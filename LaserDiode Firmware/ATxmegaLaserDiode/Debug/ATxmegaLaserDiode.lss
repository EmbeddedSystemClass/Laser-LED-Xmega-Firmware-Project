
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b0  00802000  00006b5a  00006bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c1  008022b0  008022b0  00006e9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006e9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cb0  00000000  00000000  00006f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018328  00000000  00000000  00007bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000660b  00000000  00000000  0001fee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005fef  00000000  00000000  000264f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000039cc  00000000  00000000  0002c4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009338  00000000  00000000  0002feb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ab03  00000000  00000000  000391e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb8  00000000  00000000  00043ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 46 11 	jmp	0x228c	; 0x228c <__vector_1>
       8:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__vector_2>
       c:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__vector_3>
      10:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_4>
      14:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__vector_5>
      18:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_6>
      1c:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__vector_7>
      20:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__vector_8>
      24:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__vector_9>
      28:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__vector_10>
      2c:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__vector_11>
      30:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__vector_12>
      34:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__vector_13>
      38:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__vector_14>
      3c:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__vector_15>
      40:	0c 94 25 14 	jmp	0x284a	; 0x284a <__vector_16>
      44:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_17>
      48:	0c 94 87 14 	jmp	0x290e	; 0x290e <__vector_18>
      4c:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__vector_19>
      50:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_20>
      54:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__vector_21>
      58:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__vector_22>
      5c:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__vector_23>
      60:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__vector_24>
      64:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__vector_25>
      68:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__vector_26>
      6c:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__vector_27>
      70:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__vector_28>
      74:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__vector_29>
      78:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__vector_30>
      7c:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__vector_31>
      80:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__vector_32>
      84:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__vector_33>
      88:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__vector_34>
      8c:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__vector_35>
      90:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__vector_36>
      94:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__vector_37>
      98:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__vector_38>
      9c:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__vector_39>
      a0:	0c 94 bd 18 	jmp	0x317a	; 0x317a <__vector_40>
      a4:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__vector_41>
      a8:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__vector_42>
      ac:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__vector_43>
      b0:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__vector_44>
      b4:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__vector_45>
      b8:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__vector_46>
      bc:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__vector_47>
      c0:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__vector_48>
      c4:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__vector_49>
      c8:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__vector_50>
      cc:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__vector_51>
      d0:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__vector_52>
      d4:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <__vector_53>
      d8:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__vector_54>
      dc:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <__vector_55>
      e0:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__vector_56>
      e4:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__vector_57>
      e8:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__vector_58>
      ec:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__vector_59>
      f0:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__vector_60>
      f4:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__vector_61>
      f8:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__vector_62>
      fc:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__vector_63>
     100:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__vector_64>
     104:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__vector_65>
     108:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__vector_66>
     10c:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__vector_67>
     110:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__vector_68>
     114:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__vector_69>
     118:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__vector_70>
     11c:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__vector_71>
     120:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__vector_72>
     124:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__vector_73>
     128:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <__vector_77>
     138:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__vector_78>
     13c:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <__vector_79>
     140:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__vector_80>
     144:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__vector_81>
     148:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__vector_82>
     14c:	0c 94 96 20 	jmp	0x412c	; 0x412c <__vector_83>
     150:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__vector_84>
     154:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__vector_85>
     158:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__vector_86>
     15c:	0c 94 5a 21 	jmp	0x42b4	; 0x42b4 <__vector_87>
     160:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__vector_88>
     164:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__vector_89>
     168:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__vector_90>
     16c:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__vector_91>
     170:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__vector_92>
     174:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__vector_104>
     1a4:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 13 23 	jmp	0x4626	; 0x4626 <__vector_108>
     1b4:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__vector_109>
     1b8:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__vector_110>
     1bc:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__vector_111>
     1c0:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__vector_112>
     1c4:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__vector_119>
     1e0:	0c 94 6a 24 	jmp	0x48d4	; 0x48d4 <__vector_120>
     1e4:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7b 04       	cpc	r7, r11
     25e:	81 04       	cpc	r8, r1
     260:	87 04       	cpc	r8, r7
     262:	8d 04       	cpc	r8, r13
     264:	93 04       	cpc	r9, r3
     266:	99 04       	cpc	r9, r9
     268:	9f 04       	cpc	r9, r15
     26a:	a5 04       	cpc	r10, r5
     26c:	1c 05       	cpc	r17, r12
     26e:	b3 04       	cpc	r11, r3
     270:	b9 04       	cpc	r11, r9
     272:	bf 04       	cpc	r11, r15
     274:	c5 04       	cpc	r12, r5
     276:	cb 04       	cpc	r12, r11
     278:	d1 04       	cpc	r13, r1
     27a:	d7 04       	cpc	r13, r7
     27c:	dd 04       	cpc	r13, r13
     27e:	e3 04       	cpc	r14, r3
     280:	49 29       	or	r20, r9
     282:	49 29       	or	r20, r9
     284:	53 29       	or	r21, r3
     286:	5d 29       	or	r21, r13
     288:	6d 29       	or	r22, r13
     28a:	bd 29       	or	r27, r13
     28c:	c7 29       	or	r28, r7
     28e:	fc 29       	or	r31, r12
     290:	fc 29       	or	r31, r12
     292:	fa 29       	or	r31, r10
     294:	fa 29       	or	r31, r10

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 26 2a 	jmp	0x544c	; 0x544c <_ZN9CMBSender18OnTimeoutInterruptEPv>
     2a2:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2a6:	0c 94 5a 27 	jmp	0x4eb4	; 0x4eb4 <_ZN16CMBEventsHandler11FreeBuffersEv>
     2aa:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <_ZN8CTimerC18SetCOMPAEj>
     2ae:	0c 94 9a 2b 	jmp	0x5734	; 0x5734 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2b2:	0c 94 0a 31 	jmp	0x6214	; 0x6214 <_ZN8CTimerD19SetPeriodEj>
     2b6:	0c 94 2d 32 	jmp	0x645a	; 0x645a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2ba:	0c 94 fc 30 	jmp	0x61f8	; 0x61f8 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     2be:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <_ZN7CTimerC8SetCOMPBEj>
     2c2:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <_ZN8CTimerC18SetCOMPBEj>
     2c6:	0c 94 fc 29 	jmp	0x53f8	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
     2ca:	0c 94 8b 2a 	jmp	0x5516	; 0x5516 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     2ce:	0c 94 33 30 	jmp	0x6066	; 0x6066 <_ZN7CTimerD9SetPeriodEj>
     2d2:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2d6:	0c 94 f5 2f 	jmp	0x5fea	; 0x5fea <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2da:	0c 94 b5 2b 	jmp	0x576a	; 0x576a <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     2de:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2e2:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <_ZN7CTimerC8SetCOMPDEj>
     2e6:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     2ea:	0c 94 2e 11 	jmp	0x225c	; 0x225c <_ZN4CSPI16StaticOnTransmitEPv>
     2ee:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     2f2:	0c 94 b3 2e 	jmp	0x5d66	; 0x5d66 <_ZN7CTimerC9SetPeriodEj>
     2f6:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2fa:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2fe:	0c 94 3b 31 	jmp	0x6276	; 0x6276 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     302:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <_ZN7CTimerF8SetCOMPDEj>
     306:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     30a:	0c 94 14 31 	jmp	0x6228	; 0x6228 <_ZN8CTimerD18SetCOMPBEj>
     30e:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <_ZN7CTimerC8SetCOMPCEj>
     312:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     316:	0c 94 53 29 	jmp	0x52a6	; 0x52a6 <_ZN9CMBSender13OnReceiveByteEh+0x3a>
     31a:	0c 94 c7 29 	jmp	0x538e	; 0x538e <_ZN9CMBSender13OnReceiveByteEh+0x122>
     31e:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     322:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     326:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     32a:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     32e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     332:	0c 94 9d 2e 	jmp	0x5d3a	; 0x5d3a <_ZN7CTimerC4StopEv>
     336:	0c 94 1d 30 	jmp	0x603a	; 0x603a <_ZN7CTimerD4StopEv>
     33a:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     33e:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <_ZN9CMBSender13OnReceiveByteEh+0x188>
     342:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     346:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     34a:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     34e:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     352:	0c 94 a5 2e 	jmp	0x5d4a	; 0x5d4a <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     356:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     35a:	0c 94 03 31 	jmp	0x6206	; 0x6206 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     35e:	0c 94 25 30 	jmp	0x604a	; 0x604a <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     362:	0c 94 4c 30 	jmp	0x6098	; 0x6098 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     366:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <_ZN10CDGUSUSART15GetReceivedByteEv>
     36a:	0c 94 76 06 	jmp	0xcec	; 0xcec <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     36e:	0c 94 83 2b 	jmp	0x5706	; 0x5706 <_ZN10CDGUSUSART14IsTransmittingEv>
     372:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     376:	0c 94 6a 2f 	jmp	0x5ed4	; 0x5ed4 <_ZN8CTimerC14StopEv>
     37a:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     37e:	0c 94 ac 2e 	jmp	0x5d58	; 0x5d58 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     382:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <_ZN16CLaserControlApp13OnTimerStaticEPv>
     386:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     38a:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     38e:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     392:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <_GLOBAL__sub_D_dacSPI>
     396:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <_ZN10CDGUSUSART11IsDataEmptyEv>
     39a:	0c 94 21 2f 	jmp	0x5e42	; 0x5e42 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     39e:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3a2:	0c 94 b8 2e 	jmp	0x5d70	; 0x5d70 <_ZN7CTimerC8SetCOMPAEj>
     3a6:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3aa:	0c 94 bf 31 	jmp	0x637e	; 0x637e <_ZN7CTimerF9SetPeriodEj>
     3ae:	0c 94 8c 31 	jmp	0x6318	; 0x6318 <_ZN7CTimerF5StartEj>
     3b2:	0c 94 cf 2f 	jmp	0x5f9e	; 0x5f9e <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3b6:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     3ba:	0c 94 d8 31 	jmp	0x63b0	; 0x63b0 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3be:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     3c2:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3c6:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <_ZN7CTimerF8SetCOMPAEj>
     3ca:	0c 94 8a 2f 	jmp	0x5f14	; 0x5f14 <_ZN8CTimerC19SetPeriodEj>
     3ce:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3d2:	0c 94 2d 28 	jmp	0x505a	; 0x505a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     3d6:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3da:	0c 94 c9 31 	jmp	0x6392	; 0x6392 <_ZN7CTimerF8SetCOMPBEj>
     3de:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3e2:	0c 94 6e 30 	jmp	0x60dc	; 0x60dc <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3e6:	0c 94 3f 27 	jmp	0x4e7e	; 0x4e7e <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     3ea:	0c 94 90 30 	jmp	0x6120	; 0x6120 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3ee:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     3f2:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     3f6:	0c 94 ff 29 	jmp	0x53fe	; 0x53fe <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     3fa:	0c 94 cc 24 	jmp	0x4998	; 0x4998 <__cxa_pure_virtual>
     3fe:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     402:	0c 94 bd 2f 	jmp	0x5f7a	; 0x5f7a <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     406:	0c 94 10 30 	jmp	0x6020	; 0x6020 <_ZN7CTimerD5StartEj>
     40a:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     40e:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     412:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     416:	0c 94 42 2b 	jmp	0x5684	; 0x5684 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     41a:	0c 94 99 28 	jmp	0x5132	; 0x5132 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     41e:	0c 94 ac 2b 	jmp	0x5758	; 0x5758 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     422:	0c 94 83 2f 	jmp	0x5f06	; 0x5f06 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     426:	0c 94 42 30 	jmp	0x6084	; 0x6084 <_ZN7CTimerD8SetCOMPCEj>
     42a:	0c 94 dd 2e 	jmp	0x5dba	; 0x5dba <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     42e:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     432:	0c 94 47 30 	jmp	0x608e	; 0x608e <_ZN7CTimerD8SetCOMPDEj>
     436:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     43a:	0c 94 19 31 	jmp	0x6232	; 0x6232 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     43e:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     442:	0c 94 3d 30 	jmp	0x607a	; 0x607a <_ZN7CTimerD8SetCOMPBEj>
     446:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <_ZN8CTimerD14StopEv>
     44a:	0c 94 99 2f 	jmp	0x5f32	; 0x5f32 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44e:	0c 94 2a 31 	jmp	0x6254	; 0x6254 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     452:	0c 94 99 31 	jmp	0x6332	; 0x6332 <_ZN7CTimerF4StopEv>
     456:	0c 94 38 30 	jmp	0x6070	; 0x6070 <_ZN7CTimerD8SetCOMPAEj>
     45a:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     45e:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     462:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     466:	0c 94 ce 31 	jmp	0x639c	; 0x639c <_ZN7CTimerF8SetCOMPCEj>
     46a:	0c 94 5d 2f 	jmp	0x5eba	; 0x5eba <_ZN8CTimerC15StartEj>
     46e:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <_ZN10CDGUSUSART11IsReceivingEv>
     472:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     476:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     47a:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     47e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     482:	0c 94 f2 30 	jmp	0x61e4	; 0x61e4 <_ZN8CTimerD15ResetEv>
     486:	0c 94 49 29 	jmp	0x5292	; 0x5292 <_ZN9CMBSender13OnReceiveByteEh+0x26>
     48a:	0c 94 3f 2b 	jmp	0x567e	; 0x567e <_ZN9CMBSender21OnTransactionCallbackEPhj>
     48e:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <_ZN7CTimerC5StartEj>
     492:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     496:	0c 94 6d 29 	jmp	0x52da	; 0x52da <_ZN9CMBSender13OnReceiveByteEh+0x6e>
     49a:	0c 94 77 06 	jmp	0xcee	; 0xcee <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     49e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     4a2:	0c 94 ae 31 	jmp	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     4a6:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     4aa:	0c 94 2c 30 	jmp	0x6058	; 0x6058 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     4ae:	0c 94 c6 30 	jmp	0x618c	; 0x618c <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b2:	0c 94 75 2e 	jmp	0x5cea	; 0x5cea <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b6:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     4ba:	0c 94 a7 31 	jmp	0x634e	; 0x634e <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     4be:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4c2:	0c 94 cb 04 	jmp	0x996	; 0x996 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     4c6:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <_ZN8CTimerD15StartEj>
     4ca:	0c 94 70 06 	jmp	0xce0	; 0xce0 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4ce:	0c 94 b6 31 	jmp	0x636c	; 0x636c <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     4d2:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4d6:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     4da:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x4e>
     4de:	0c 94 a1 31 	jmp	0x6342	; 0x6342 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     4e2:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4e6:	0c 94 bd 29 	jmp	0x537a	; 0x537a <_ZN9CMBSender13OnReceiveByteEh+0x10e>
     4ea:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     4ee:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4f2:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc2>
     4f6:	0c 94 0f 31 	jmp	0x621e	; 0x621e <_ZN8CTimerD18SetCOMPAEj>
     4fa:	0c 94 ab 2f 	jmp	0x5f56	; 0x5f56 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4fe:	0c 94 80 2b 	jmp	0x5700	; 0x5700 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     502:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     506:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     50a:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     50e:	0c 94 72 2f 	jmp	0x5ee4	; 0x5ee4 <_ZN8CTimerC15ResetEv>
     512:	0c 94 cf 24 	jmp	0x499e	; 0x499e <_GLOBAL__sub_I_dacSPI>

00000516 <__ctors_start>:
     516:	cf 24       	eor	r12, r15

00000518 <__ctors_end>:
     518:	04 25       	eor	r16, r4

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	ea e5       	ldi	r30, 0x5A	; 90
     532:	fb e6       	ldi	r31, 0x6B	; 107
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a0 3b       	cpi	r26, 0xB0	; 176
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	25 e2       	ldi	r18, 0x25	; 37
     546:	a0 eb       	ldi	r26, 0xB0	; 176
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a1 37       	cpi	r26, 0x71	; 113
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 32 26 	call	0x4c64	; 0x4c64 <main>
     578:	0c 94 9b 35 	jmp	0x6b36	; 0x6b36 <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 b4 2a 	call	0x5568	; 0x5568 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 b4 2a 	call	0x5568	; 0x5568 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 b4 2a 	call	0x5568	; 0x5568 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 b1 22 	sts	0x22B1, r24	; 0x8022b1 <DatabaseStatusRegister>
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	eb 01       	movw	r28, r22
     8c4:	7a 01       	movw	r14, r20
     8c6:	69 01       	movw	r12, r18
     8c8:	fa 01       	movw	r30, r20
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	0e 94 ab 10 	call	0x2156	; 0x2156 <_Z4swapj>
     8d2:	9c 01       	movw	r18, r24
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8dc:	7a c0       	rjmp	.+244    	; 0x9d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8de:	fe 01       	movw	r30, r28
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	e2 31       	cpi	r30, 0x12	; 18
     8e4:	f1 05       	cpc	r31, r1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e8:	a7 c0       	rjmp	.+334    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     8ea:	88 27       	eor	r24, r24
     8ec:	e2 5d       	subi	r30, 0xD2	; 210
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <__tablejump2__>
     8f6:	f8 01       	movw	r30, r16
     8f8:	ea 5b       	subi	r30, 0xBA	; 186
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	20 83       	st	Z, r18
     8fe:	31 83       	std	Z+1, r19	; 0x01
     900:	9b c0       	rjmp	.+310    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     902:	f8 01       	movw	r30, r16
     904:	e8 5b       	subi	r30, 0xB8	; 184
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	20 83       	st	Z, r18
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	95 c0       	rjmp	.+298    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     90e:	f8 01       	movw	r30, r16
     910:	e6 5b       	subi	r30, 0xB6	; 182
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	8f c0       	rjmp	.+286    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     91a:	f8 01       	movw	r30, r16
     91c:	e4 5b       	subi	r30, 0xB4	; 180
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	89 c0       	rjmp	.+274    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     926:	f8 01       	movw	r30, r16
     928:	e2 5b       	subi	r30, 0xB2	; 178
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	83 c0       	rjmp	.+262    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     932:	f8 01       	movw	r30, r16
     934:	e0 5b       	subi	r30, 0xB0	; 176
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	20 83       	st	Z, r18
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	7d c0       	rjmp	.+250    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     93e:	f8 01       	movw	r30, r16
     940:	ee 5a       	subi	r30, 0xAE	; 174
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	77 c0       	rjmp	.+238    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     94a:	f7 01       	movw	r30, r14
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	0e 94 af 10 	call	0x215e	; 0x215e <_Z6swap32m>
     958:	f8 01       	movw	r30, r16
     95a:	fe 96       	adiw	r30, 0x3e	; 62
     95c:	60 83       	st	Z, r22
     95e:	71 83       	std	Z+1, r23	; 0x01
     960:	82 83       	std	Z+2, r24	; 0x02
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	69 c0       	rjmp	.+210    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     966:	f8 01       	movw	r30, r16
     968:	e8 5a       	subi	r30, 0xA8	; 168
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	63 c0       	rjmp	.+198    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     972:	f8 01       	movw	r30, r16
     974:	e6 5a       	subi	r30, 0xA6	; 166
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	20 83       	st	Z, r18
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	5d c0       	rjmp	.+186    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     97e:	f8 01       	movw	r30, r16
     980:	e4 5a       	subi	r30, 0xA4	; 164
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	20 83       	st	Z, r18
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	57 c0       	rjmp	.+174    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     98a:	f8 01       	movw	r30, r16
     98c:	e2 5a       	subi	r30, 0xA2	; 162
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	20 83       	st	Z, r18
     992:	31 83       	std	Z+1, r19	; 0x01
     994:	51 c0       	rjmp	.+162    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     996:	f8 01       	movw	r30, r16
     998:	e0 5a       	subi	r30, 0xA0	; 160
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	4b c0       	rjmp	.+150    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9a2:	f8 01       	movw	r30, r16
     9a4:	ee 59       	subi	r30, 0x9E	; 158
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	20 83       	st	Z, r18
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ae:	f8 01       	movw	r30, r16
     9b0:	ec 59       	subi	r30, 0x9C	; 156
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	20 83       	st	Z, r18
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ba:	f8 01       	movw	r30, r16
     9bc:	ea 59       	subi	r30, 0x9A	; 154
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	20 83       	st	Z, r18
     9c2:	31 83       	std	Z+1, r19	; 0x01
     9c4:	39 c0       	rjmp	.+114    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9c6:	f8 01       	movw	r30, r16
     9c8:	e8 59       	subi	r30, 0x98	; 152
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	20 83       	st	Z, r18
     9ce:	31 83       	std	Z+1, r19	; 0x01
     9d0:	33 c0       	rjmp	.+102    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9d2:	c1 30       	cpi	r28, 0x01	; 1
     9d4:	d1 05       	cpc	r29, r1
     9d6:	51 f4       	brne	.+20     	; 0x9ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a6 01       	movw	r20, r12
     9de:	b7 01       	movw	r22, r14
     9e0:	c8 01       	movw	r24, r16
     9e2:	8a 5b       	subi	r24, 0xBA	; 186
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	0e 94 75 10 	call	0x20ea	; 0x20ea <_Z11ConvertDataPvS_jj>
     9ea:	26 c0       	rjmp	.+76     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ec:	c5 30       	cpi	r28, 0x05	; 5
     9ee:	d1 05       	cpc	r29, r1
     9f0:	49 f4       	brne	.+18     	; 0xa04 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x154>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	a6 01       	movw	r20, r12
     9f8:	b7 01       	movw	r22, r14
     9fa:	c8 01       	movw	r24, r16
     9fc:	c0 96       	adiw	r24, 0x30	; 48
     9fe:	0e 94 75 10 	call	0x20ea	; 0x20ea <_Z11ConvertDataPvS_jj>
     a02:	1a c0       	rjmp	.+52     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a04:	22 97       	sbiw	r28, 0x02	; 2
     a06:	c1 f4       	brne	.+48     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a08:	f8 01       	movw	r30, r16
     a0a:	86 85       	ldd	r24, Z+14	; 0x0e
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	90 f4       	brcc	.+36     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x184>
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	48 96       	adiw	r24, 0x18	; 24
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a6 01       	movw	r20, r12
     a28:	b7 01       	movw	r22, r14
     a2a:	80 0f       	add	r24, r16
     a2c:	91 1f       	adc	r25, r17
     a2e:	0e 94 75 10 	call	0x20ea	; 0x20ea <_Z11ConvertDataPvS_jj>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a34:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <_ZN11CLaserBoard4BeepEv>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN16CLaserControlAppC1Ev>:
     a4a:	2a e6       	ldi	r18, 0x6A	; 106
     a4c:	31 e2       	ldi	r19, 0x21	; 33
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	08 95       	ret

00000a56 <_ZN16CLaserControlAppD1Ev>:
     a56:	2a e6       	ldi	r18, 0x6A	; 106
     a58:	31 e2       	ldi	r19, 0x21	; 33
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
     a5e:	31 83       	std	Z+1, r19	; 0x01
     a60:	0e 94 98 28 	call	0x5130	; 0x5130 <_ZN16CMBEventsHandlerD1Ev>
     a64:	08 95       	ret

00000a66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	7c 01       	movw	r14, r24
     a90:	8b 01       	movw	r16, r22
     a92:	fb 01       	movw	r30, r22
     a94:	80 80       	ld	r8, Z
     a96:	91 80       	ldd	r9, Z+1	; 0x01
     a98:	88 ee       	ldi	r24, 0xE8	; 232
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 93 33 	call	0x6726	; 0x6726 <__udivmodhi4>
     aa2:	5b 01       	movw	r10, r22
     aa4:	22 81       	ldd	r18, Z+2	; 0x02
     aa6:	33 81       	ldd	r19, Z+3	; 0x03
     aa8:	a8 ee       	ldi	r26, 0xE8	; 232
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
     ab0:	95 01       	movw	r18, r10
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	0e 94 bb 33 	call	0x6776	; 0x6776 <__udivmodsi4>
     aba:	29 01       	movw	r4, r18
     abc:	3a 01       	movw	r6, r20
     abe:	f8 01       	movw	r30, r16
     ac0:	c4 80       	ldd	r12, Z+4	; 0x04
     ac2:	d5 80       	ldd	r13, Z+5	; 0x05
     ac4:	8a e6       	ldi	r24, 0x6A	; 106
     ac6:	98 e1       	ldi	r25, 0x18	; 24
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 93 33 	call	0x6726	; 0x6726 <__udivmodhi4>
     ace:	8b 01       	movw	r16, r22
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	06 0f       	add	r16, r22
     ae2:	17 1f       	adc	r17, r23
     ae4:	f7 01       	movw	r30, r14
     ae6:	06 ab       	std	Z+54, r16	; 0x36
     ae8:	17 ab       	std	Z+55, r17	; 0x37
     aea:	d8 01       	movw	r26, r16
     aec:	a3 01       	movw	r20, r6
     aee:	92 01       	movw	r18, r4
     af0:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
     af4:	28 ee       	ldi	r18, 0xE8	; 232
     af6:	33 e0       	ldi	r19, 0x03	; 3
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 bb 33 	call	0x6776	; 0x6776 <__udivmodsi4>
     b00:	02 1b       	sub	r16, r18
     b02:	13 0b       	sbc	r17, r19
     b04:	f7 01       	movw	r30, r14
     b06:	00 af       	std	Z+56, r16	; 0x38
     b08:	11 af       	std	Z+57, r17	; 0x39
     b0a:	a2 ae       	std	Z+58, r10	; 0x3a
     b0c:	b3 ae       	std	Z+59, r11	; 0x3b
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	8c 9d       	mul	r24, r12
     b12:	90 01       	movw	r18, r0
     b14:	8d 9d       	mul	r24, r13
     b16:	30 0d       	add	r19, r0
     b18:	11 24       	eor	r1, r1
     b1a:	36 95       	lsr	r19
     b1c:	27 95       	ror	r18
     b1e:	36 95       	lsr	r19
     b20:	27 95       	ror	r18
     b22:	ab e7       	ldi	r26, 0x7B	; 123
     b24:	b4 e1       	ldi	r27, 0x14	; 20
     b26:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
     b2a:	8c 01       	movw	r16, r24
     b2c:	16 95       	lsr	r17
     b2e:	07 95       	ror	r16
     b30:	09 83       	std	Y+1, r16	; 0x01
     b32:	1a 83       	std	Y+2, r17	; 0x02
     b34:	96 01       	movw	r18, r12
     b36:	a8 ec       	ldi	r26, 0xC8	; 200
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	0e 94 83 33 	call	0x6706	; 0x6706 <__mulsi3>
     b4a:	20 ea       	ldi	r18, 0xA0	; 160
     b4c:	36 e8       	ldi	r19, 0x86	; 134
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 bb 33 	call	0x6776	; 0x6776 <__udivmodsi4>
     b56:	12 2f       	mov	r17, r18
     b58:	82 2f       	mov	r24, r18
     b5a:	93 2f       	mov	r25, r19
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	2a e0       	ldi	r18, 0x0A	; 10
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	0e 94 bb 33 	call	0x6776	; 0x6776 <__udivmodsi4>
     b70:	62 2f       	mov	r22, r18
     b72:	82 2f       	mov	r24, r18
     b74:	93 2f       	mov	r25, r19
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	20 2f       	mov	r18, r16
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	41 2f       	mov	r20, r17
     b80:	5c 81       	ldd	r21, Y+4	; 0x04
     b82:	7e 81       	ldd	r23, Y+6	; 0x06
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	08 95       	ret

00000bb0 <_ZN16CLaserControlApp11GetVariableEjj>:
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	c2 58       	subi	r28, 0x82	; 130
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	0e 94 8e 2a 	call	0x551c	; 0x551c <_ZN9CMBSender18WaitMODBUSListenerEv>
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	c2 58       	subi	r28, 0x82	; 130
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	0e 94 c3 2a 	call	0x5586	; 0x5586 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8c 01       	movw	r16, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	0e 94 ab 10 	call	0x2156	; 0x2156 <_Z4swapj>
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	02 58       	subi	r16, 0x82	; 130
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	ae 01       	movw	r20, r28
     c1c:	4f 5f       	subi	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	63 e0       	ldi	r22, 0x03	; 3
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	0e 94 b4 2a 	call	0x5568	; 0x5568 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     c44:	fc 01       	movw	r30, r24
     c46:	fe 96       	adiw	r30, 0x3e	; 62
     c48:	40 81       	ld	r20, Z
     c4a:	51 81       	ldd	r21, Z+1	; 0x01
     c4c:	62 81       	ldd	r22, Z+2	; 0x02
     c4e:	73 81       	ldd	r23, Z+3	; 0x03
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	6f 4f       	sbci	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	40 83       	st	Z, r20
     c5a:	51 83       	std	Z+1, r21	; 0x01
     c5c:	62 83       	std	Z+2, r22	; 0x02
     c5e:	73 83       	std	Z+3, r23	; 0x03
     c60:	34 96       	adiw	r30, 0x04	; 4
     c62:	40 81       	ld	r20, Z
     c64:	51 81       	ldd	r21, Z+1	; 0x01
     c66:	62 81       	ldd	r22, Z+2	; 0x02
     c68:	73 81       	ldd	r23, Z+3	; 0x03
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	6f 4f       	sbci	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	40 83       	st	Z, r20
     c74:	51 83       	std	Z+1, r21	; 0x01
     c76:	62 83       	std	Z+2, r22	; 0x02
     c78:	73 83       	std	Z+3, r23	; 0x03
     c7a:	fc 01       	movw	r30, r24
     c7c:	42 ad       	ldd	r20, Z+58	; 0x3a
     c7e:	53 ad       	ldd	r21, Z+59	; 0x3b
     c80:	45 36       	cpi	r20, 0x65	; 101
     c82:	51 05       	cpc	r21, r1
     c84:	50 f0       	brcs	.+20     	; 0xc9a <_ZN16CLaserControlApp12OnLaserTimerEv+0x56>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	42 e3       	ldi	r20, 0x32	; 50
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	64 ef       	ldi	r22, 0xF4	; 244
     c8e:	71 e0       	ldi	r23, 0x01	; 1
     c90:	86 e2       	ldi	r24, 0x26	; 38
     c92:	95 e2       	ldi	r25, 0x25	; 37
     c94:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
     c98:	09 c0       	rjmp	.+18     	; 0xcac <_ZN16CLaserControlApp12OnLaserTimerEv+0x68>
     c9a:	56 95       	lsr	r21
     c9c:	47 95       	ror	r20
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	64 ef       	ldi	r22, 0xF4	; 244
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	86 e2       	ldi	r24, 0x26	; 38
     ca6:	95 e2       	ldi	r25, 0x25	; 37
     ca8:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
     cac:	86 e2       	ldi	r24, 0x26	; 38
     cae:	95 e2       	ldi	r25, 0x25	; 37
     cb0:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
     cb4:	08 95       	ret

00000cb6 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     cb6:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN16CLaserControlApp12OnLaserTimerEv>
     cba:	08 95       	ret

00000cbc <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     cbc:	fc 01       	movw	r30, r24
     cbe:	83 89       	ldd	r24, Z+19	; 0x13
     cc0:	88 23       	and	r24, r24
     cc2:	21 f0       	breq	.+8      	; 0xccc <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     cc4:	87 e2       	ldi	r24, 0x27	; 39
     cc6:	95 e2       	ldi	r25, 0x25	; 37
     cc8:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_ZN11CLaserBoard6PWMOffEv>
     ccc:	08 95       	ret

00000cce <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     cce:	fc 01       	movw	r30, r24
     cd0:	83 89       	ldd	r24, Z+19	; 0x13
     cd2:	88 23       	and	r24, r24
     cd4:	21 f0       	breq	.+8      	; 0xcde <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     cd6:	87 e2       	ldi	r24, 0x27	; 39
     cd8:	95 e2       	ldi	r25, 0x25	; 37
     cda:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN11CLaserBoard5PWMOnEv>
     cde:	08 95       	ret

00000ce0 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     ce0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     ce4:	08 95       	ret

00000ce6 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     ce6:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     cea:	08 95       	ret

00000cec <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     cec:	08 95       	ret

00000cee <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     cee:	08 95       	ret

00000cf0 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     cf0:	08 95       	ret

00000cf2 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     cfc:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     cfe:	fc 01       	movw	r30, r24
     d00:	ea 5b       	subi	r30, 0xBA	; 186
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	10 82       	st	Z, r1
     d06:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     d08:	32 96       	adiw	r30, 0x02	; 2
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     d12:	6a 30       	cpi	r22, 0x0A	; 10
     d14:	71 05       	cpc	r23, r1
     d16:	70 f4       	brcc	.+28     	; 0xd34 <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	72 96       	adiw	r30, 0x12	; 18
     d1e:	80 83       	st	Z, r24
     d20:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d22:	8c e3       	ldi	r24, 0x3C	; 60
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	8e 8b       	std	Y+22, r24	; 0x16
     d28:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d2a:	81 e6       	ldi	r24, 0x61	; 97
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	8c 8b       	std	Y+20, r24	; 0x14
     d30:	9d 8b       	std	Y+21, r25	; 0x15
     d32:	5b c0       	rjmp	.+182    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     d34:	64 31       	cpi	r22, 0x14	; 20
     d36:	71 05       	cpc	r23, r1
     d38:	80 f4       	brcc	.+32     	; 0xd5a <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fe 01       	movw	r30, r28
     d40:	e6 5a       	subi	r30, 0xA6	; 166
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	80 83       	st	Z, r24
     d46:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d48:	8c e3       	ldi	r24, 0x3C	; 60
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	8e 8b       	std	Y+22, r24	; 0x16
     d4e:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d50:	81 e6       	ldi	r24, 0x61	; 97
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	8c 8b       	std	Y+20, r24	; 0x14
     d56:	9d 8b       	std	Y+21, r25	; 0x15
     d58:	48 c0       	rjmp	.+144    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     d5a:	63 32       	cpi	r22, 0x23	; 35
     d5c:	71 05       	cpc	r23, r1
     d5e:	80 f4       	brcc	.+32     	; 0xd80 <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fe 01       	movw	r30, r28
     d66:	e6 5a       	subi	r30, 0xA6	; 166
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d6e:	8c e3       	ldi	r24, 0x3C	; 60
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	8e 8b       	std	Y+22, r24	; 0x16
     d74:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d76:	81 e6       	ldi	r24, 0x61	; 97
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	8c 8b       	std	Y+20, r24	; 0x14
     d7c:	9d 8b       	std	Y+21, r25	; 0x15
     d7e:	35 c0       	rjmp	.+106    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     d80:	61 33       	cpi	r22, 0x31	; 49
     d82:	71 05       	cpc	r23, r1
     d84:	80 f4       	brcc	.+32     	; 0xda6 <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	fe 01       	movw	r30, r28
     d8c:	e6 5a       	subi	r30, 0xA6	; 166
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	8e 8b       	std	Y+22, r24	; 0x16
     d9a:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d9c:	81 e6       	ldi	r24, 0x61	; 97
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8c 8b       	std	Y+20, r24	; 0x14
     da2:	9d 8b       	std	Y+21, r25	; 0x15
     da4:	22 c0       	rjmp	.+68     	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     da6:	68 34       	cpi	r22, 0x48	; 72
     da8:	71 05       	cpc	r23, r1
     daa:	80 f4       	brcc	.+32     	; 0xdcc <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     dac:	85 e0       	ldi	r24, 0x05	; 5
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fe 01       	movw	r30, r28
     db2:	e6 5a       	subi	r30, 0xA6	; 166
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dba:	84 e6       	ldi	r24, 0x64	; 100
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	8e 8b       	std	Y+22, r24	; 0x16
     dc0:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 90;
     dc2:	8a e5       	ldi	r24, 0x5A	; 90
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	8c 8b       	std	Y+20, r24	; 0x14
     dc8:	9d 8b       	std	Y+21, r25	; 0x15
     dca:	0f c0       	rjmp	.+30     	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fe 01       	movw	r30, r28
     dd2:	e6 5a       	subi	r30, 0xA6	; 166
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 83       	st	Z, r24
     dd8:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dda:	84 e6       	ldi	r24, 0x64	; 100
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	8e 8b       	std	Y+22, r24	; 0x16
     de0:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 87;
     de2:	87 e5       	ldi	r24, 0x57	; 87
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	8c 8b       	std	Y+20, r24	; 0x14
     de8:	9d 8b       	std	Y+21, r25	; 0x15
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     dea:	fe 01       	movw	r30, r28
     dec:	e4 5b       	subi	r30, 0xB4	; 180
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     df8:	8e 89       	ldd	r24, Y+22	; 0x16
     dfa:	9f 89       	ldd	r25, Y+23	; 0x17
     dfc:	32 97       	sbiw	r30, 0x02	; 2
     dfe:	80 83       	st	Z, r24
     e00:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     e02:	8e 01       	movw	r16, r28
     e04:	02 5b       	subi	r16, 0xB2	; 178
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	68 0f       	add	r22, r24
     e14:	79 1f       	adc	r23, r25
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	68 5e       	subi	r22, 0xE8	; 232
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	6c 0f       	add	r22, r28
     e20:	7d 1f       	adc	r23, r29
     e22:	ce 01       	movw	r24, r28
     e24:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     e28:	f8 01       	movw	r30, r16
     e2a:	20 83       	st	Z, r18
     e2c:	31 83       	std	Z+1, r19	; 0x01
     e2e:	42 83       	std	Z+2, r20	; 0x02
     e30:	53 83       	std	Z+3, r21	; 0x03
     e32:	64 83       	std	Z+4, r22	; 0x04
     e34:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     e36:	8e 85       	ldd	r24, Y+14	; 0x0e
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ec 0f       	add	r30, r28
     e4a:	fd 1f       	adc	r31, r29
     e4c:	84 8d       	ldd	r24, Z+28	; 0x1c
     e4e:	95 8d       	ldd	r25, Z+29	; 0x1d
     e50:	8c af       	std	Y+60, r24	; 0x3c
     e52:	9d af       	std	Y+61, r25	; 0x3d
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     e68:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     e6a:	fc 01       	movw	r30, r24
     e6c:	ea 5b       	subi	r30, 0xBA	; 186
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	10 82       	st	Z, r1
     e72:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     e74:	32 96       	adiw	r30, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	80 83       	st	Z, r24
     e7c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     e7e:	72 96       	adiw	r30, 0x12	; 18
     e80:	60 83       	st	Z, r22
     e82:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     e84:	63 30       	cpi	r22, 0x03	; 3
     e86:	71 05       	cpc	r23, r1
     e88:	91 f1       	breq	.+100    	; 0xeee <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     e8c:	61 30       	cpi	r22, 0x01	; 1
     e8e:	71 05       	cpc	r23, r1
     e90:	71 f0       	breq	.+28     	; 0xeae <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     e92:	62 30       	cpi	r22, 0x02	; 2
     e94:	71 05       	cpc	r23, r1
     e96:	d9 f0       	breq	.+54     	; 0xece <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     e98:	69 c0       	rjmp	.+210    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     e9a:	65 30       	cpi	r22, 0x05	; 5
     e9c:	71 05       	cpc	r23, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     ea0:	46 c0       	rjmp	.+140    	; 0xf2e <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     ea2:	a8 f1       	brcs	.+106    	; 0xf0e <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     ea4:	66 30       	cpi	r22, 0x06	; 6
     ea6:	71 05       	cpc	r23, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     eaa:	51 c0       	rjmp	.+162    	; 0xf4e <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     eac:	5f c0       	rjmp	.+190    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fe 01       	movw	r30, r28
     eb4:	e8 5a       	subi	r30, 0xA8	; 168
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 83       	st	Z, r24
     eba:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ebc:	8c e3       	ldi	r24, 0x3C	; 60
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	8e 8b       	std	Y+22, r24	; 0x16
     ec2:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     ec4:	81 e6       	ldi	r24, 0x61	; 97
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8c 8b       	std	Y+20, r24	; 0x14
     eca:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     ecc:	4f c0       	rjmp	.+158    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     ece:	8e e0       	ldi	r24, 0x0E	; 14
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fe 01       	movw	r30, r28
     ed4:	e8 5a       	subi	r30, 0xA8	; 168
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     edc:	8c e3       	ldi	r24, 0x3C	; 60
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	8e 8b       	std	Y+22, r24	; 0x16
     ee2:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     ee4:	81 e6       	ldi	r24, 0x61	; 97
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	8c 8b       	std	Y+20, r24	; 0x14
     eea:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     eee:	8b e1       	ldi	r24, 0x1B	; 27
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fe 01       	movw	r30, r28
     ef4:	e8 5a       	subi	r30, 0xA8	; 168
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     efc:	8c e3       	ldi	r24, 0x3C	; 60
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	8e 8b       	std	Y+22, r24	; 0x16
     f02:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f04:	81 e6       	ldi	r24, 0x61	; 97
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	8c 8b       	std	Y+20, r24	; 0x14
     f0a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f0c:	2f c0       	rjmp	.+94     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     f0e:	89 e2       	ldi	r24, 0x29	; 41
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fe 01       	movw	r30, r28
     f14:	e8 5a       	subi	r30, 0xA8	; 168
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 83       	st	Z, r24
     f1a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f1c:	84 e6       	ldi	r24, 0x64	; 100
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	8e 8b       	std	Y+22, r24	; 0x16
     f22:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f24:	81 e6       	ldi	r24, 0x61	; 97
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	8c 8b       	std	Y+20, r24	; 0x14
     f2a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     f2e:	8d e3       	ldi	r24, 0x3D	; 61
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	fe 01       	movw	r30, r28
     f34:	e8 5a       	subi	r30, 0xA8	; 168
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f3c:	84 e6       	ldi	r24, 0x64	; 100
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	8e 8b       	std	Y+22, r24	; 0x16
     f42:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 90;
     f44:	8a e5       	ldi	r24, 0x5A	; 90
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8c 8b       	std	Y+20, r24	; 0x14
     f4a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     f4e:	85 e5       	ldi	r24, 0x55	; 85
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fe 01       	movw	r30, r28
     f54:	e8 5a       	subi	r30, 0xA8	; 168
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f5c:	84 e6       	ldi	r24, 0x64	; 100
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	8e 8b       	std	Y+22, r24	; 0x16
     f62:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 87;
     f64:	87 e5       	ldi	r24, 0x57	; 87
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	8c 8b       	std	Y+20, r24	; 0x14
     f6a:	9d 8b       	std	Y+21, r25	; 0x15
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     f6c:	fe 01       	movw	r30, r28
     f6e:	e4 5b       	subi	r30, 0xB4	; 180
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	84 e6       	ldi	r24, 0x64	; 100
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     f7a:	8e 89       	ldd	r24, Y+22	; 0x16
     f7c:	9f 89       	ldd	r25, Y+23	; 0x17
     f7e:	32 97       	sbiw	r30, 0x02	; 2
     f80:	80 83       	st	Z, r24
     f82:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     f84:	8e 01       	movw	r16, r28
     f86:	02 5b       	subi	r16, 0xB2	; 178
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	be 01       	movw	r22, r28
     f8c:	68 5e       	subi	r22, 0xE8	; 232
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	ce 01       	movw	r24, r28
     f92:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     f96:	f8 01       	movw	r30, r16
     f98:	20 83       	st	Z, r18
     f9a:	31 83       	std	Z+1, r19	; 0x01
     f9c:	42 83       	std	Z+2, r20	; 0x02
     f9e:	53 83       	std	Z+3, r21	; 0x03
     fa0:	64 83       	std	Z+4, r22	; 0x04
     fa2:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ec 0f       	add	r30, r28
     fb8:	fd 1f       	adc	r31, r29
     fba:	84 8d       	ldd	r24, Z+28	; 0x1c
     fbc:	95 8d       	ldd	r25, Z+29	; 0x1d
     fbe:	8c af       	std	Y+60, r24	; 0x3c
     fc0:	9d af       	std	Y+61, r25	; 0x3d
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	8b 01       	movw	r16, r22
     fe4:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	b1 f0       	breq	.+44     	; 0x1016 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
     fea:	18 f4       	brcc	.+6      	; 0xff2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
     fec:	21 30       	cpi	r18, 0x01	; 1
     fee:	31 f0       	breq	.+12     	; 0xffc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
     ff0:	58 c0       	rjmp	.+176    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	39 f1       	breq	.+78     	; 0x1044 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
     ff6:	24 30       	cpi	r18, 0x04	; 4
     ff8:	e9 f1       	breq	.+122    	; 0x1074 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
     ffa:	53 c0       	rjmp	.+166    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
     ffc:	db 01       	movw	r26, r22
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	09 f4       	brne	.+2      	; 0x100a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
    1008:	4c c0       	rjmp	.+152    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	8d 93       	st	X+, r24
    1010:	9c 93       	st	X, r25
				update = true;
    1012:	89 8b       	std	Y+17, r24	; 0x11
    1014:	46 c0       	rjmp	.+140    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
    1016:	fb 01       	movw	r30, r22
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	04 97       	sbiw	r24, 0x04	; 4
    101e:	30 f0       	brcs	.+12     	; 0x102c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 1)
    102c:	d8 01       	movw	r26, r16
    102e:	8d 91       	ld	r24, X+
    1030:	9c 91       	ld	r25, X
    1032:	11 97       	sbiw	r26, 0x01	; 1
    1034:	89 2b       	or	r24, r25
    1036:	a9 f5       	brne	.+106    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	8d 93       	st	X+, r24
    103e:	9c 93       	st	X, r25
				update = true;
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	2f c0       	rjmp	.+94     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
    1044:	fb 01       	movw	r30, r22
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	07 97       	sbiw	r24, 0x07	; 7
    104c:	30 f0       	brcs	.+12     	; 0x105a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 4)
    105a:	d8 01       	movw	r26, r16
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	04 97       	sbiw	r24, 0x04	; 4
    1064:	f0 f4       	brcc	.+60     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	8d 93       	st	X+, r24
    106c:	9c 93       	st	X, r25
				update = true;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 8b       	std	Y+17, r24	; 0x11
    1072:	17 c0       	rjmp	.+46     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    1074:	fb 01       	movw	r30, r22
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	0b 97       	sbiw	r24, 0x0b	; 11
    107c:	30 f0       	brcs	.+12     	; 0x108a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 7)
    108a:	d8 01       	movw	r26, r16
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	11 97       	sbiw	r26, 0x01	; 1
    1092:	07 97       	sbiw	r24, 0x07	; 7
    1094:	30 f4       	brcc	.+12     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	8d 93       	st	X+, r24
    109c:	9c 93       	st	X, r25
				update = true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 8b       	std	Y+17, r24	; 0x11
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    10a2:	f8 01       	movw	r30, r16
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	f9 01       	movw	r30, r18
    10ae:	e0 5f       	subi	r30, 0xF0	; 240
    10b0:	fe 4d       	sbci	r31, 0xDE	; 222
    10b2:	c0 80       	ld	r12, Z
    10b4:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    10b6:	f9 01       	movw	r30, r18
    10b8:	e6 50       	subi	r30, 0x06	; 6
    10ba:	ff 4d       	sbci	r31, 0xDF	; 223
    10bc:	01 90       	ld	r0, Z+
    10be:	f0 81       	ld	r31, Z
    10c0:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    10c2:	cf 01       	movw	r24, r30
    10c4:	8c 19       	sub	r24, r12
    10c6:	9d 09       	sbc	r25, r13
    10c8:	d9 01       	movw	r26, r18
    10ca:	ac 51       	subi	r26, 0x1C	; 28
    10cc:	bf 4d       	sbci	r27, 0xDF	; 223
    10ce:	6d 91       	ld	r22, X+
    10d0:	7c 91       	ld	r23, X
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	71 09       	sbc	r23, r1
    10d6:	0e 94 93 33 	call	0x6726	; 0x6726 <__udivmodhi4>
	
	if (duration < MinD)
    10da:	d7 01       	movw	r26, r14
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	8c 15       	cp	r24, r12
    10e4:	9d 05       	cpc	r25, r13
    10e6:	20 f4       	brcc	.+8      	; 0x10f0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    10e8:	cd 92       	st	X+, r12
    10ea:	dc 92       	st	X, r13
		update = true;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	if (duration > MaxD)
    10f0:	d7 01       	movw	r26, r14
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	e8 17       	cp	r30, r24
    10fa:	f9 07       	cpc	r31, r25
    10fc:	20 f4       	brcc	.+8      	; 0x1106 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    10fe:	ed 93       	st	X+, r30
    1100:	fc 93       	st	X, r31
		update = true;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1106:	d8 01       	movw	r26, r16
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ec 51       	subi	r30, 0x1C	; 28
    1112:	ff 4d       	sbci	r31, 0xDF	; 223
    1114:	a0 80       	ld	r10, Z
    1116:	b1 80       	ldd	r11, Z+1	; 0x01
    1118:	b1 e0       	ldi	r27, 0x01	; 1
    111a:	ab 1a       	sub	r10, r27
    111c:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    111e:	f7 01       	movw	r30, r14
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	8c 19       	sub	r24, r12
    1126:	9d 09       	sbc	r25, r13
    1128:	0e 94 93 33 	call	0x6726	; 0x6726 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 a6 10 	call	0x214c	; 0x214c <_Z3maxjj>
    1134:	b5 01       	movw	r22, r10
    1136:	0e 94 a1 10 	call	0x2142	; 0x2142 <_Z3minjj>
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    113a:	d8 01       	movw	r26, r16
    113c:	4d 91       	ld	r20, X+
    113e:	5c 91       	ld	r21, X
    1140:	6b e0       	ldi	r22, 0x0B	; 11
    1142:	64 9f       	mul	r22, r20
    1144:	90 01       	movw	r18, r0
    1146:	65 9f       	mul	r22, r21
    1148:	30 0d       	add	r19, r0
    114a:	11 24       	eor	r1, r1
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	fc 01       	movw	r30, r24
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	ee 50       	subi	r30, 0x0E	; 14
    1158:	f0 4e       	sbci	r31, 0xE0	; 224
    115a:	20 81       	ld	r18, Z
    115c:	31 81       	ldd	r19, Z+1	; 0x01
    115e:	ad ec       	ldi	r26, 0xCD	; 205
    1160:	bc ec       	ldi	r27, 0xCC	; 204
    1162:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	8c 8b       	std	Y+20, r24	; 0x14
    1170:	9d 8b       	std	Y+21, r25	; 0x15
	
	return update;
    1172:	89 89       	ldd	r24, Y+17	; 0x11
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	08 95       	ret

0000118a <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 58       	subi	r30, 0x82	; 130
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	60 83       	st	Z, r22
    11ac:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    11ae:	1f 86       	std	Y+15, r1	; 0x0f
	update = false;
    11b0:	19 8a       	std	Y+17, r1	; 0x11
	prepare = false;
    11b2:	1a 8a       	std	Y+18, r1	; 0x12
	peltier_en = false;
    11b4:	1b 8a       	std	Y+19, r1	; 0x13
	//isstarted = false;
	m_wSetMin = 0;
    11b6:	6c 01       	movw	r12, r24
    11b8:	26 e7       	ldi	r18, 0x76	; 118
    11ba:	c2 0e       	add	r12, r18
    11bc:	d1 1c       	adc	r13, r1
    11be:	f6 01       	movw	r30, r12
    11c0:	10 82       	st	Z, r1
    11c2:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 10;
    11c4:	7c 01       	movw	r14, r24
    11c6:	f8 e7       	ldi	r31, 0x78	; 120
    11c8:	ef 0e       	add	r14, r31
    11ca:	f1 1c       	adc	r15, r1
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f7 01       	movw	r30, r14
    11d2:	80 83       	st	Z, r24
    11d4:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    11d6:	34 97       	sbiw	r30, 0x04	; 4
    11d8:	10 82       	st	Z, r1
    11da:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    11dc:	f6 01       	movw	r30, r12
    11de:	20 81       	ld	r18, Z
    11e0:	31 81       	ldd	r19, Z+1	; 0x01
    11e2:	36 97       	sbiw	r30, 0x06	; 6
    11e4:	20 83       	st	Z, r18
    11e6:	31 83       	std	Z+1, r19	; 0x01
	m_wSeconds = m_wSetSec;
    11e8:	f7 01       	movw	r30, r14
    11ea:	20 81       	ld	r18, Z
    11ec:	31 81       	ldd	r19, Z+1	; 0x01
    11ee:	36 97       	sbiw	r30, 0x06	; 6
    11f0:	20 83       	st	Z, r18
    11f2:	31 83       	std	Z+1, r19	; 0x01
	m_wDeadTime = 0;
    11f4:	3a 96       	adiw	r30, 0x0a	; 10
    11f6:	10 82       	st	Z, r1
    11f8:	11 82       	std	Z+1, r1	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    11fa:	88 ab       	std	Y+48, r24	; 0x30
    11fc:	99 ab       	std	Y+49, r25	; 0x31
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    11fe:	88 e2       	ldi	r24, 0x28	; 40
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	8a ab       	std	Y+50, r24	; 0x32
    1204:	9b ab       	std	Y+51, r25	; 0x33
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	8c ab       	std	Y+52, r24	; 0x34
    120c:	9d ab       	std	Y+53, r25	; 0x35
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    120e:	25 e0       	ldi	r18, 0x05	; 5
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	2a a7       	std	Y+42, r18	; 0x2a
    1214:	3b a7       	std	Y+43, r19	; 0x2b
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    1216:	20 e5       	ldi	r18, 0x50	; 80
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	2c a7       	std	Y+44, r18	; 0x2c
    121c:	3d a7       	std	Y+45, r19	; 0x2d
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
    121e:	8e a7       	std	Y+46, r24	; 0x2e
    1220:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    1222:	22 e0       	ldi	r18, 0x02	; 2
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	2c a3       	std	Y+36, r18	; 0x24
    1228:	3d a3       	std	Y+37, r19	; 0x25
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    122a:	28 e7       	ldi	r18, 0x78	; 120
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	2e a3       	std	Y+38, r18	; 0x26
    1230:	3f a3       	std	Y+39, r19	; 0x27
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
    1232:	88 a7       	std	Y+40, r24	; 0x28
    1234:	99 a7       	std	Y+41, r25	; 0x29
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    1236:	aa 24       	eor	r10, r10
    1238:	a3 94       	inc	r10
    123a:	b1 2c       	mov	r11, r1
    123c:	ae 8e       	std	Y+30, r10	; 0x1e
    123e:	bf 8e       	std	Y+31, r11	; 0x1f
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    1240:	88 a3       	std	Y+32, r24	; 0x20
    1242:	99 a3       	std	Y+33, r25	; 0x21
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
    1244:	8a a3       	std	Y+34, r24	; 0x22
    1246:	9b a3       	std	Y+35, r25	; 0x23
	
	// Current profile
	Profile = PROFILE_FAST;
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <eeprom_read_dword>
    1254:	4e 01       	movw	r8, r28
    1256:	fe e3       	ldi	r31, 0x3E	; 62
    1258:	8f 0e       	add	r8, r31
    125a:	91 1c       	adc	r9, r1
    125c:	f4 01       	movw	r30, r8
    125e:	60 83       	st	Z, r22
    1260:	71 83       	std	Z+1, r23	; 0x01
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    1266:	38 96       	adiw	r30, 0x08	; 8
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	80 83       	st	Z, r24
    126e:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1270:	be 01       	movw	r22, r28
    1272:	60 5d       	subi	r22, 0xD0	; 208
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	de 01       	movw	r26, r28
    1278:	a8 5b       	subi	r26, 0xB8	; 184
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	fb 01       	movw	r30, r22
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	8a 95       	dec	r24
    1286:	e1 f7       	brne	.-8      	; 0x1280 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0xf6>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    1288:	8e 01       	movw	r16, r28
    128a:	02 5b       	subi	r16, 0xB2	; 178
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1294:	f8 01       	movw	r30, r16
    1296:	20 83       	st	Z, r18
    1298:	31 83       	std	Z+1, r19	; 0x01
    129a:	42 83       	std	Z+2, r20	; 0x02
    129c:	53 83       	std	Z+3, r21	; 0x03
    129e:	64 83       	std	Z+4, r22	; 0x04
    12a0:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    12a2:	f6 01       	movw	r30, r12
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	74 97       	sbiw	r30, 0x14	; 20
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    12ae:	f7 01       	movw	r30, r14
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	74 97       	sbiw	r30, 0x14	; 20
    12b6:	80 83       	st	Z, r24
    12b8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    12ba:	f4 01       	movw	r30, r8
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	0e 94 af 10 	call	0x215e	; 0x215e <_Z6swap32m>
    12c8:	fe 01       	movw	r30, r28
    12ca:	ec 5a       	subi	r30, 0xAC	; 172
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 83       	st	Z, r22
    12d0:	71 83       	std	Z+1, r23	; 0x01
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    12d6:	34 96       	adiw	r30, 0x04	; 4
    12d8:	10 82       	st	Z, r1
    12da:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    12dc:	32 96       	adiw	r30, 0x02	; 2
    12de:	a0 82       	st	Z, r10
    12e0:	b1 82       	std	Z+1, r11	; 0x01
	laserDiodeData.temperature = temperature;
    12e2:	32 96       	adiw	r30, 0x02	; 2
    12e4:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    12e8:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    12f0:	32 96       	adiw	r30, 0x02	; 2
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	80 83       	st	Z, r24
    12f8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    12fa:	32 96       	adiw	r30, 0x02	; 2
    12fc:	10 82       	st	Z, r1
    12fe:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    1300:	36 96       	adiw	r30, 0x06	; 6
    1302:	10 82       	st	Z, r1
    1304:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    1306:	32 96       	adiw	r30, 0x02	; 2
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    1310:	34 96       	adiw	r30, 0x04	; 4
    1312:	10 82       	st	Z, r1
    1314:	11 82       	std	Z+1, r1	; 0x01
    1316:	12 82       	std	Z+2, r1	; 0x02
    1318:	13 82       	std	Z+3, r1	; 0x03
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    131a:	47 e0       	ldi	r20, 0x07	; 7
    131c:	63 e0       	ldi	r22, 0x03	; 3
    131e:	8e e5       	ldi	r24, 0x5E	; 94
    1320:	95 e2       	ldi	r25, 0x25	; 37
    1322:	0e 94 71 31 	call	0x62e2	; 0x62e2 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    1326:	6e a9       	ldd	r22, Y+54	; 0x36
    1328:	7f a9       	ldd	r23, Y+55	; 0x37
    132a:	8e e5       	ldi	r24, 0x5E	; 94
    132c:	95 e2       	ldi	r25, 0x25	; 37
    132e:	0e 94 bf 31 	call	0x637e	; 0x637e <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1332:	68 ad       	ldd	r22, Y+56	; 0x38
    1334:	79 ad       	ldd	r23, Y+57	; 0x39
    1336:	8e e5       	ldi	r24, 0x5E	; 94
    1338:	95 e2       	ldi	r25, 0x25	; 37
    133a:	0e 94 c4 31 	call	0x6388	; 0x6388 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	ae 01       	movw	r20, r28
    1342:	6b e5       	ldi	r22, 0x5B	; 91
    1344:	76 e0       	ldi	r23, 0x06	; 6
    1346:	8e e5       	ldi	r24, 0x5E	; 94
    1348:	95 e2       	ldi	r25, 0x25	; 37
    134a:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	ae 01       	movw	r20, r28
    1352:	61 e3       	ldi	r22, 0x31	; 49
    1354:	7a e0       	ldi	r23, 0x0A	; 10
    1356:	8e e5       	ldi	r24, 0x5E	; 94
    1358:	95 e2       	ldi	r25, 0x25	; 37
    135a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    135e:	60 e1       	ldi	r22, 0x10	; 16
    1360:	8e e5       	ldi	r24, 0x5E	; 94
    1362:	95 e2       	ldi	r25, 0x25	; 37
    1364:	0e 94 a1 31 	call	0x6342	; 0x6342 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1368:	60 e1       	ldi	r22, 0x10	; 16
    136a:	8e e5       	ldi	r24, 0x5E	; 94
    136c:	95 e2       	ldi	r25, 0x25	; 37
    136e:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1372:	68 ad       	ldd	r22, Y+56	; 0x38
    1374:	79 ad       	ldd	r23, Y+57	; 0x39
    1376:	8e e5       	ldi	r24, 0x5E	; 94
    1378:	95 e2       	ldi	r25, 0x25	; 37
    137a:	0e 94 c9 31 	call	0x6392	; 0x6392 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    137e:	60 e2       	ldi	r22, 0x20	; 32
    1380:	8e e5       	ldi	r24, 0x5E	; 94
    1382:	95 e2       	ldi	r25, 0x25	; 37
    1384:	0e 94 a1 31 	call	0x6342	; 0x6342 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1388:	60 e2       	ldi	r22, 0x20	; 32
    138a:	8e e5       	ldi	r24, 0x5E	; 94
    138c:	95 e2       	ldi	r25, 0x25	; 37
    138e:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	08 95       	ret

000013ac <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	1f 92       	push	r1
    13ba:	1f 92       	push	r1
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 ab 10 	call	0x2156	; 0x2156 <_Z4swapj>
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    13ce:	87 01       	movw	r16, r14
    13d0:	02 58       	subi	r16, 0x82	; 130
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	22 e0       	ldi	r18, 0x02	; 2
    13d6:	ae 01       	movw	r20, r28
    13d8:	4f 5f       	subi	r20, 0xFF	; 255
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	f8 01       	movw	r30, r16
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	0e 94 b4 2a 	call	0x5568	; 0x5568 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    13f2:	a7 01       	movw	r20, r14
    13f4:	4a 5b       	subi	r20, 0xBA	; 186
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	2a e2       	ldi	r18, 0x2A	; 42
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	f8 01       	movw	r30, r16
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	0e 94 c3 2a 	call	0x5586	; 0x5586 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    140a:	f8 01       	movw	r30, r16
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    1414:	68 ea       	ldi	r22, 0xA8	; 168
    1416:	71 e6       	ldi	r23, 0x61	; 97
    1418:	84 e6       	ldi	r24, 0x64	; 100
    141a:	95 e2       	ldi	r25, 0x25	; 37
    141c:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	f7 01       	movw	r30, r14
    1426:	84 87       	std	Z+12, r24	; 0x0c
    1428:	95 87       	std	Z+13, r25	; 0x0d
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    143c:	fc 01       	movw	r30, r24
    143e:	86 85       	ldd	r24, Z+14	; 0x0e
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	71 f4       	brne	.+28     	; 0x1460 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    1444:	8e e5       	ldi	r24, 0x5E	; 94
    1446:	95 e2       	ldi	r25, 0x25	; 37
    1448:	0e 94 99 31 	call	0x6332	; 0x6332 <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    144c:	60 e1       	ldi	r22, 0x10	; 16
    144e:	8e e5       	ldi	r24, 0x5E	; 94
    1450:	95 e2       	ldi	r25, 0x25	; 37
    1452:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1456:	60 e2       	ldi	r22, 0x20	; 32
    1458:	8e e5       	ldi	r24, 0x5E	; 94
    145a:	95 e2       	ldi	r25, 0x25	; 37
    145c:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    1460:	08 95       	ret

00001462 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    1462:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1466:	08 95       	ret

00001468 <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <_ZN16CLaserControlApp3RunEv+0x16>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <_ZN16CLaserControlApp3RunEv+0x18>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    1486:	8c 01       	movw	r16, r24
    1488:	02 58       	subi	r16, 0x82	; 130
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	42 e0       	ldi	r20, 0x02	; 2
    148e:	63 e0       	ldi	r22, 0x03	; 3
    1490:	f8 01       	movw	r30, r16
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	0e 94 02 2b 	call	0x5604	; 0x5604 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    149a:	f8 01       	movw	r30, r16
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    14a4:	f8 01       	movw	r30, r16
    14a6:	80 81       	ld	r24, Z
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	0e 94 8e 2a 	call	0x551c	; 0x551c <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14ae:	ff ef       	ldi	r31, 0xFF	; 255
    14b0:	29 ef       	ldi	r18, 0xF9	; 249
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	f1 50       	subi	r31, 0x01	; 1
    14b6:	20 40       	sbci	r18, 0x00	; 0
    14b8:	80 40       	sbci	r24, 0x00	; 0
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <_ZN16CLaserControlApp3RunEv+0x4c>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <_ZN16CLaserControlApp3RunEv+0x56>
    14be:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    14c0:	f7 01       	movw	r30, r14
    14c2:	84 85       	ldd	r24, Z+12	; 0x0c
    14c4:	95 85       	ldd	r25, Z+13	; 0x0d
    14c6:	9f 70       	andi	r25, 0x0F	; 15
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x66>
    14cc:	41 c0       	rjmp	.+130    	; 0x1550 <_ZN16CLaserControlApp3RunEv+0xe8>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    14ce:	22 e0       	ldi	r18, 0x02	; 2
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 ea       	ldi	r20, 0xA0	; 160
    14d4:	54 e2       	ldi	r21, 0x24	; 36
    14d6:	6c e0       	ldi	r22, 0x0C	; 12
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	c7 01       	movw	r24, r14
    14dc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    14e0:	f7 01       	movw	r30, r14
    14e2:	e6 58       	subi	r30, 0x86	; 134
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	44 97       	sbiw	r24, 0x14	; 20
    14ec:	28 f4       	brcc	.+10     	; 0x14f8 <_ZN16CLaserControlApp3RunEv+0x90>
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	70 97       	sbiw	r30, 0x10	; 16
    14f4:	80 83       	st	Z, r24
    14f6:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    14f8:	f7 01       	movw	r30, r14
    14fa:	e6 58       	subi	r30, 0x86	; 134
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	44 97       	sbiw	r24, 0x14	; 20
    1504:	28 f0       	brcs	.+10     	; 0x1510 <_ZN16CLaserControlApp3RunEv+0xa8>
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
    150a:	89 97       	sbiw	r24, 0x29	; 41
    150c:	08 f4       	brcc	.+2      	; 0x1510 <_ZN16CLaserControlApp3RunEv+0xa8>
    150e:	29 c4       	rjmp	.+2130   	; 0x1d62 <_ZN16CLaserControlApp3RunEv+0x8fa>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    1510:	f7 01       	movw	r30, r14
    1512:	e6 58       	subi	r30, 0x86	; 134
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	80 81       	ld	r24, Z
    1518:	91 81       	ldd	r25, Z+1	; 0x01
    151a:	89 97       	sbiw	r24, 0x29	; 41
    151c:	28 f0       	brcs	.+10     	; 0x1528 <_ZN16CLaserControlApp3RunEv+0xc0>
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	70 97       	sbiw	r30, 0x10	; 16
    1524:	80 83       	st	Z, r24
    1526:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1528:	22 e0       	ldi	r18, 0x02	; 2
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	a7 01       	movw	r20, r14
    152e:	46 59       	subi	r20, 0x96	; 150
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	63 e1       	ldi	r22, 0x13	; 19
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	c7 01       	movw	r24, r14
    1538:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    153c:	22 e0       	ldi	r18, 0x02	; 2
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	a7 01       	movw	r20, r14
    1542:	46 58       	subi	r20, 0x86	; 134
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	6e e0       	ldi	r22, 0x0E	; 14
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	c7 01       	movw	r24, r14
    154c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    1550:	f7 01       	movw	r30, r14
    1552:	84 85       	ldd	r24, Z+12	; 0x0c
    1554:	95 85       	ldd	r25, Z+13	; 0x0d
    1556:	88 73       	andi	r24, 0x38	; 56
    1558:	99 27       	eor	r25, r25
    155a:	89 2b       	or	r24, r25
    155c:	21 f1       	breq	.+72     	; 0x15a6 <_ZN16CLaserControlApp3RunEv+0x13e>
	{
		if (temperature > 300)
    155e:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    1562:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    1566:	8d 32       	cpi	r24, 0x2D	; 45
    1568:	91 40       	sbci	r25, 0x01	; 1
    156a:	ec f0       	brlt	.+58     	; 0x15a6 <_ZN16CLaserControlApp3RunEv+0x13e>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    156c:	69 e2       	ldi	r22, 0x29	; 41
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	c7 01       	movw	r24, r14
    1572:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    1576:	f7 01       	movw	r30, r14
    1578:	87 85       	ldd	r24, Z+15	; 0x0f
    157a:	80 8b       	std	Z+16, r24	; 0x10
			
			//if (isstarted)
			{
				laserTimer.Stop();
    157c:	8e e5       	ldi	r24, 0x5E	; 94
    157e:	95 e2       	ldi	r25, 0x25	; 37
    1580:	0e 94 99 31 	call	0x6332	; 0x6332 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1584:	60 e1       	ldi	r22, 0x10	; 16
    1586:	8e e5       	ldi	r24, 0x5E	; 94
    1588:	95 e2       	ldi	r25, 0x25	; 37
    158a:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    158e:	60 e2       	ldi	r22, 0x20	; 32
    1590:	8e e5       	ldi	r24, 0x5E	; 94
    1592:	95 e2       	ldi	r25, 0x25	; 37
    1594:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1598:	87 e2       	ldi	r24, 0x27	; 39
    159a:	95 e2       	ldi	r25, 0x25	; 37
    159c:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <_ZN11CLaserBoard13LaserPowerOffEv>
				PIC_ID_last = PICID_WORK_PREPARE;
    15a0:	87 e0       	ldi	r24, 0x07	; 7
    15a2:	f7 01       	movw	r30, r14
    15a4:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	/*if ((state & (APP_WORKPOWERON | APP_WORKLIGHT)) == 0)
		isstarted = false;*/
	
	switch (state)
    15a6:	f7 01       	movw	r30, r14
    15a8:	84 85       	ldd	r24, Z+12	; 0x0c
    15aa:	95 85       	ldd	r25, Z+13	; 0x0d
    15ac:	81 15       	cp	r24, r1
    15ae:	f2 e0       	ldi	r31, 0x02	; 2
    15b0:	9f 07       	cpc	r25, r31
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <_ZN16CLaserControlApp3RunEv+0x14e>
    15b4:	cb c2       	rjmp	.+1430   	; 0x1b4c <_ZN16CLaserControlApp3RunEv+0x6e4>
    15b6:	1c f5       	brge	.+70     	; 0x15fe <_ZN16CLaserControlApp3RunEv+0x196>
    15b8:	88 30       	cpi	r24, 0x08	; 8
    15ba:	91 05       	cpc	r25, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <_ZN16CLaserControlApp3RunEv+0x158>
    15be:	bc c1       	rjmp	.+888    	; 0x1938 <_ZN16CLaserControlApp3RunEv+0x4d0>
    15c0:	64 f4       	brge	.+24     	; 0x15da <_ZN16CLaserControlApp3RunEv+0x172>
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <_ZN16CLaserControlApp3RunEv+0x162>
    15c8:	4d c1       	rjmp	.+666    	; 0x1864 <_ZN16CLaserControlApp3RunEv+0x3fc>
    15ca:	84 30       	cpi	r24, 0x04	; 4
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <_ZN16CLaserControlApp3RunEv+0x16a>
    15d0:	51 c0       	rjmp	.+162    	; 0x1674 <_ZN16CLaserControlApp3RunEv+0x20c>
    15d2:	89 2b       	or	r24, r25
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <_ZN16CLaserControlApp3RunEv+0x170>
    15d6:	b0 c3       	rjmp	.+1888   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
    15d8:	42 c0       	rjmp	.+132    	; 0x165e <_ZN16CLaserControlApp3RunEv+0x1f6>
    15da:	80 32       	cpi	r24, 0x20	; 32
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <_ZN16CLaserControlApp3RunEv+0x17a>
    15e0:	bc c1       	rjmp	.+888    	; 0x195a <_ZN16CLaserControlApp3RunEv+0x4f2>
    15e2:	24 f4       	brge	.+8      	; 0x15ec <_ZN16CLaserControlApp3RunEv+0x184>
    15e4:	40 97       	sbiw	r24, 0x10	; 16
    15e6:	09 f4       	brne	.+2      	; 0x15ea <_ZN16CLaserControlApp3RunEv+0x182>
    15e8:	b8 c1       	rjmp	.+880    	; 0x195a <_ZN16CLaserControlApp3RunEv+0x4f2>
    15ea:	a6 c3       	rjmp	.+1868   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
    15ec:	80 34       	cpi	r24, 0x40	; 64
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <_ZN16CLaserControlApp3RunEv+0x18c>
    15f2:	6d c1       	rjmp	.+730    	; 0x18ce <_ZN16CLaserControlApp3RunEv+0x466>
    15f4:	81 15       	cp	r24, r1
    15f6:	91 40       	sbci	r25, 0x01	; 1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <_ZN16CLaserControlApp3RunEv+0x194>
    15fa:	6a c2       	rjmp	.+1236   	; 0x1ad0 <_ZN16CLaserControlApp3RunEv+0x668>
    15fc:	9d c3       	rjmp	.+1850   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
    15fe:	81 15       	cp	r24, r1
    1600:	f7 e0       	ldi	r31, 0x07	; 7
    1602:	9f 07       	cpc	r25, r31
    1604:	09 f4       	brne	.+2      	; 0x1608 <_ZN16CLaserControlApp3RunEv+0x1a0>
    1606:	3e c2       	rjmp	.+1148   	; 0x1a84 <_ZN16CLaserControlApp3RunEv+0x61c>
    1608:	ac f4       	brge	.+42     	; 0x1634 <_ZN16CLaserControlApp3RunEv+0x1cc>
    160a:	81 15       	cp	r24, r1
    160c:	e4 e0       	ldi	r30, 0x04	; 4
    160e:	9e 07       	cpc	r25, r30
    1610:	09 f4       	brne	.+2      	; 0x1614 <_ZN16CLaserControlApp3RunEv+0x1ac>
    1612:	05 c3       	rjmp	.+1546   	; 0x1c1e <_ZN16CLaserControlApp3RunEv+0x7b6>
    1614:	2c f4       	brge	.+10     	; 0x1620 <_ZN16CLaserControlApp3RunEv+0x1b8>
    1616:	81 15       	cp	r24, r1
    1618:	93 40       	sbci	r25, 0x03	; 3
    161a:	09 f4       	brne	.+2      	; 0x161e <_ZN16CLaserControlApp3RunEv+0x1b6>
    161c:	cd c2       	rjmp	.+1434   	; 0x1bb8 <_ZN16CLaserControlApp3RunEv+0x750>
    161e:	8c c3       	rjmp	.+1816   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
    1620:	81 15       	cp	r24, r1
    1622:	e5 e0       	ldi	r30, 0x05	; 5
    1624:	9e 07       	cpc	r25, r30
    1626:	09 f4       	brne	.+2      	; 0x162a <_ZN16CLaserControlApp3RunEv+0x1c2>
    1628:	44 c2       	rjmp	.+1160   	; 0x1ab2 <_ZN16CLaserControlApp3RunEv+0x64a>
    162a:	81 15       	cp	r24, r1
    162c:	96 40       	sbci	r25, 0x06	; 6
    162e:	09 f4       	brne	.+2      	; 0x1632 <_ZN16CLaserControlApp3RunEv+0x1ca>
    1630:	17 c2       	rjmp	.+1070   	; 0x1a60 <_ZN16CLaserControlApp3RunEv+0x5f8>
    1632:	82 c3       	rjmp	.+1796   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
    1634:	81 15       	cp	r24, r1
    1636:	20 e2       	ldi	r18, 0x20	; 32
    1638:	92 07       	cpc	r25, r18
    163a:	09 f4       	brne	.+2      	; 0x163e <_ZN16CLaserControlApp3RunEv+0x1d6>
    163c:	2e c3       	rjmp	.+1628   	; 0x1c9a <_ZN16CLaserControlApp3RunEv+0x832>
    163e:	2c f4       	brge	.+10     	; 0x164a <_ZN16CLaserControlApp3RunEv+0x1e2>
    1640:	81 15       	cp	r24, r1
    1642:	90 41       	sbci	r25, 0x10	; 16
    1644:	09 f4       	brne	.+2      	; 0x1648 <_ZN16CLaserControlApp3RunEv+0x1e0>
    1646:	f1 c2       	rjmp	.+1506   	; 0x1c2a <_ZN16CLaserControlApp3RunEv+0x7c2>
    1648:	77 c3       	rjmp	.+1774   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
    164a:	81 15       	cp	r24, r1
    164c:	20 e3       	ldi	r18, 0x30	; 48
    164e:	92 07       	cpc	r25, r18
    1650:	09 f4       	brne	.+2      	; 0x1654 <_ZN16CLaserControlApp3RunEv+0x1ec>
    1652:	50 c3       	rjmp	.+1696   	; 0x1cf4 <_ZN16CLaserControlApp3RunEv+0x88c>
    1654:	81 15       	cp	r24, r1
    1656:	90 44       	sbci	r25, 0x40	; 64
    1658:	09 f4       	brne	.+2      	; 0x165c <_ZN16CLaserControlApp3RunEv+0x1f4>
    165a:	69 c3       	rjmp	.+1746   	; 0x1d2e <_ZN16CLaserControlApp3RunEv+0x8c6>
    165c:	6d c3       	rjmp	.+1754   	; 0x1d38 <_ZN16CLaserControlApp3RunEv+0x8d0>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    165e:	63 e0       	ldi	r22, 0x03	; 3
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	c7 01       	movw	r24, r14
    1664:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	f7 01       	movw	r30, r14
    166e:	84 87       	std	Z+12, r24	; 0x0c
    1670:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    1672:	66 c3       	rjmp	.+1740   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    1674:	f7 01       	movw	r30, r14
    1676:	e8 5a       	subi	r30, 0xA8	; 168
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	a0 80       	ld	r10, Z
    167c:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    167e:	87 01       	movw	r16, r14
    1680:	06 5a       	subi	r16, 0xA6	; 166
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	f8 01       	movw	r30, r16
    1686:	c0 80       	ld	r12, Z
    1688:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    168a:	46 e0       	ldi	r20, 0x06	; 6
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	c7 01       	movw	r24, r14
    1694:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1698:	ff ef       	ldi	r31, 0xFF	; 255
    169a:	29 ef       	ldi	r18, 0xF9	; 249
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	f1 50       	subi	r31, 0x01	; 1
    16a0:	20 40       	sbci	r18, 0x00	; 0
    16a2:	80 40       	sbci	r24, 0x00	; 0
    16a4:	e1 f7       	brne	.-8      	; 0x169e <_ZN16CLaserControlApp3RunEv+0x236>
    16a6:	00 c0       	rjmp	.+0      	; 0x16a8 <_ZN16CLaserControlApp3RunEv+0x240>
    16a8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    16aa:	42 e0       	ldi	r20, 0x02	; 2
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	6d e0       	ldi	r22, 0x0D	; 13
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	c7 01       	movw	r24, r14
    16b4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	e9 ef       	ldi	r30, 0xF9	; 249
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	91 50       	subi	r25, 0x01	; 1
    16c0:	e0 40       	sbci	r30, 0x00	; 0
    16c2:	f0 40       	sbci	r31, 0x00	; 0
    16c4:	e1 f7       	brne	.-8      	; 0x16be <_ZN16CLaserControlApp3RunEv+0x256>
    16c6:	00 c0       	rjmp	.+0      	; 0x16c8 <_ZN16CLaserControlApp3RunEv+0x260>
    16c8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    16ca:	42 e0       	ldi	r20, 0x02	; 2
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	c7 01       	movw	r24, r14
    16d4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16d8:	2f ef       	ldi	r18, 0xFF	; 255
    16da:	89 ef       	ldi	r24, 0xF9	; 249
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	21 50       	subi	r18, 0x01	; 1
    16e0:	80 40       	sbci	r24, 0x00	; 0
    16e2:	90 40       	sbci	r25, 0x00	; 0
    16e4:	e1 f7       	brne	.-8      	; 0x16de <_ZN16CLaserControlApp3RunEv+0x276>
    16e6:	00 c0       	rjmp	.+0      	; 0x16e8 <_ZN16CLaserControlApp3RunEv+0x280>
    16e8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    16ea:	42 e0       	ldi	r20, 0x02	; 2
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	6a e0       	ldi	r22, 0x0A	; 10
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	c7 01       	movw	r24, r14
    16f4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16f8:	ef ef       	ldi	r30, 0xFF	; 255
    16fa:	f9 ef       	ldi	r31, 0xF9	; 249
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	e1 50       	subi	r30, 0x01	; 1
    1700:	f0 40       	sbci	r31, 0x00	; 0
    1702:	20 40       	sbci	r18, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <_ZN16CLaserControlApp3RunEv+0x296>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <_ZN16CLaserControlApp3RunEv+0x2a0>
    1708:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    170a:	42 e0       	ldi	r20, 0x02	; 2
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	6b e0       	ldi	r22, 0x0B	; 11
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	c7 01       	movw	r24, r14
    1714:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	99 ef       	ldi	r25, 0xF9	; 249
    171c:	e0 e0       	ldi	r30, 0x00	; 0
    171e:	81 50       	subi	r24, 0x01	; 1
    1720:	90 40       	sbci	r25, 0x00	; 0
    1722:	e0 40       	sbci	r30, 0x00	; 0
    1724:	e1 f7       	brne	.-8      	; 0x171e <_ZN16CLaserControlApp3RunEv+0x2b6>
    1726:	00 c0       	rjmp	.+0      	; 0x1728 <_ZN16CLaserControlApp3RunEv+0x2c0>
    1728:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    172a:	f7 01       	movw	r30, r14
    172c:	fe 96       	adiw	r30, 0x3e	; 62
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	93 81       	ldd	r25, Z+3	; 0x03
    1736:	0e 94 af 10 	call	0x215e	; 0x215e <_Z6swap32m>
    173a:	f7 01       	movw	r30, r14
    173c:	ec 5a       	subi	r30, 0xAC	; 172
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 83       	st	Z, r22
    1742:	71 83       	std	Z+1, r23	; 0x01
    1744:	82 83       	std	Z+2, r24	; 0x02
    1746:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature = temperature;
    1748:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    174c:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    1750:	38 96       	adiw	r30, 0x08	; 8
    1752:	80 83       	st	Z, r24
    1754:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    1756:	7e 96       	adiw	r30, 0x1e	; 30
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	7a 97       	sbiw	r30, 0x1a	; 26
    175e:	80 83       	st	Z, r24
    1760:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    1762:	f8 01       	movw	r30, r16
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	6c 15       	cp	r22, r12
    176a:	7d 05       	cpc	r23, r13
    176c:	39 f0       	breq	.+14     	; 0x177c <_ZN16CLaserControlApp3RunEv+0x314>
				{
					PhototypePreset(laserDiodeData.phototype);
    176e:	c7 01       	movw	r24, r14
    1770:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	f7 01       	movw	r30, r14
    1778:	81 8b       	std	Z+17, r24	; 0x11
    177a:	4f c0       	rjmp	.+158    	; 0x181a <_ZN16CLaserControlApp3RunEv+0x3b2>
				}
				else
				if (melanin != laserDiodeData.melanin)
    177c:	f7 01       	movw	r30, r14
    177e:	e8 5a       	subi	r30, 0xA8	; 168
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	6a 15       	cp	r22, r10
    1788:	7b 05       	cpc	r23, r11
    178a:	39 f0       	breq	.+14     	; 0x179a <_ZN16CLaserControlApp3RunEv+0x332>
				{
					MelaninPreset(laserDiodeData.melanin);
    178c:	c7 01       	movw	r24, r14
    178e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	f7 01       	movw	r30, r14
    1796:	81 8b       	std	Z+17, r24	; 0x11
    1798:	40 c0       	rjmp	.+128    	; 0x181a <_ZN16CLaserControlApp3RunEv+0x3b2>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    179a:	f7 01       	movw	r30, r14
    179c:	ea 5b       	subi	r30, 0xBA	; 186
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    17a2:	f7 01       	movw	r30, r14
    17a4:	96 85       	ldd	r25, Z+14	; 0x0e
    17a6:	98 17       	cp	r25, r24
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <_ZN16CLaserControlApp3RunEv+0x348>
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	91 8b       	std	Z+17, r25	; 0x11
    17ae:	86 87       	std	Z+14, r24	; 0x0e
				
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    17b0:	f7 01       	movw	r30, r14
    17b2:	86 85       	ldd	r24, Z+14	; 0x0e
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	bc 01       	movw	r22, r24
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	68 0f       	add	r22, r24
    17be:	79 1f       	adc	r23, r25
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	68 5e       	subi	r22, 0xE8	; 232
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	6e 0d       	add	r22, r14
    17ca:	7f 1d       	adc	r23, r15
    17cc:	86 e0       	ldi	r24, 0x06	; 6
    17ce:	fb 01       	movw	r30, r22
    17d0:	d7 01       	movw	r26, r14
    17d2:	a8 5b       	subi	r26, 0xB8	; 184
    17d4:	bf 4f       	sbci	r27, 0xFF	; 255
    17d6:	01 90       	ld	r0, Z+
    17d8:	0d 92       	st	X+, r0
    17da:	8a 95       	dec	r24
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <_ZN16CLaserControlApp3RunEv+0x36e>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    17de:	87 01       	movw	r16, r14
    17e0:	02 5b       	subi	r16, 0xB2	; 178
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	c7 01       	movw	r24, r14
    17e6:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    17ea:	f8 01       	movw	r30, r16
    17ec:	20 83       	st	Z, r18
    17ee:	31 83       	std	Z+1, r19	; 0x01
    17f0:	42 83       	std	Z+2, r20	; 0x02
    17f2:	53 83       	std	Z+3, r21	; 0x03
    17f4:	64 83       	std	Z+4, r22	; 0x04
    17f6:	75 83       	std	Z+5, r23	; 0x05
					laserPower = m_structLaserProfile[Profile].EnergyPercent;
    17f8:	f7 01       	movw	r30, r14
    17fa:	86 85       	ldd	r24, Z+14	; 0x0e
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	fc 01       	movw	r30, r24
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	e8 0f       	add	r30, r24
    1806:	f9 1f       	adc	r31, r25
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	ee 0d       	add	r30, r14
    180e:	ff 1d       	adc	r31, r15
    1810:	84 8d       	ldd	r24, Z+28	; 0x1c
    1812:	95 8d       	ldd	r25, Z+29	; 0x1d
    1814:	f7 01       	movw	r30, r14
    1816:	84 af       	std	Z+60, r24	; 0x3c
    1818:	95 af       	std	Z+61, r25	; 0x3d
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    181a:	f7 01       	movw	r30, r14
    181c:	26 85       	ldd	r18, Z+14	; 0x0e
    181e:	a7 01       	movw	r20, r14
    1820:	46 5b       	subi	r20, 0xB6	; 182
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	b7 01       	movw	r22, r14
    1826:	68 5b       	subi	r22, 0xB8	; 184
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	c7 01       	movw	r24, r14
    182c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    1830:	f7 01       	movw	r30, r14
    1832:	81 8b       	std	Z+17, r24	; 0x11
				
				laserPower = m_wMaxEnergy * laserPower / 100;
    1834:	44 89       	ldd	r20, Z+20	; 0x14
    1836:	55 89       	ldd	r21, Z+21	; 0x15
    1838:	84 ad       	ldd	r24, Z+60	; 0x3c
    183a:	95 ad       	ldd	r25, Z+61	; 0x3d
    183c:	48 9f       	mul	r20, r24
    183e:	90 01       	movw	r18, r0
    1840:	49 9f       	mul	r20, r25
    1842:	30 0d       	add	r19, r0
    1844:	58 9f       	mul	r21, r24
    1846:	30 0d       	add	r19, r0
    1848:	11 24       	eor	r1, r1
    184a:	36 95       	lsr	r19
    184c:	27 95       	ror	r18
    184e:	36 95       	lsr	r19
    1850:	27 95       	ror	r18
    1852:	ab e7       	ldi	r26, 0x7B	; 123
    1854:	b4 e1       	ldi	r27, 0x14	; 20
    1856:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	84 af       	std	Z+60, r24	; 0x3c
    1860:	95 af       	std	Z+61, r25	; 0x3d
					laserDiodeData.laserprofile.EnergyPercent = m_wMaxEnergy;
					laserPower = m_wMaxEnergy;
					update = true;
				}*/
			}
		break;
    1862:	6e c2       	rjmp	.+1244   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    1864:	f7 01       	movw	r30, r14
    1866:	82 89       	ldd	r24, Z+18	; 0x12
    1868:	88 23       	and	r24, r24
    186a:	b1 f0       	breq	.+44     	; 0x1898 <_ZN16CLaserControlApp3RunEv+0x430>
				{
					timervar.timer_minutes = m_wMinutes;
    186c:	e0 59       	subi	r30, 0x90	; 144
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    1878:	32 96       	adiw	r30, 0x02	; 2
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1882:	24 e0       	ldi	r18, 0x04	; 4
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	ae 01       	movw	r20, r28
    1888:	4f 5f       	subi	r20, 0xFF	; 255
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	6f e0       	ldi	r22, 0x0F	; 15
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	c7 01       	movw	r24, r14
    1892:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    1896:	54 c2       	rjmp	.+1192   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    1898:	f7 01       	movw	r30, r14
    189a:	86 85       	ldd	r24, Z+14	; 0x0e
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	ac 01       	movw	r20, r24
    18a0:	44 0f       	add	r20, r20
    18a2:	55 1f       	adc	r21, r21
    18a4:	48 0f       	add	r20, r24
    18a6:	59 1f       	adc	r21, r25
    18a8:	44 0f       	add	r20, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	48 5e       	subi	r20, 0xE8	; 232
    18ae:	5f 4f       	sbci	r21, 0xFF	; 255
    18b0:	4e 0d       	add	r20, r14
    18b2:	5f 1d       	adc	r21, r15
    18b4:	26 e0       	ldi	r18, 0x06	; 6
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	62 e0       	ldi	r22, 0x02	; 2
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	c7 01       	movw	r24, r14
    18be:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    18c2:	6c e0       	ldi	r22, 0x0C	; 12
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	c7 01       	movw	r24, r14
    18c8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    18cc:	39 c2       	rjmp	.+1138   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    18ce:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    18d2:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    18d6:	6a e0       	ldi	r22, 0x0A	; 10
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	0e 94 a7 33 	call	0x674e	; 0x674e <__divmodhi4>
    18de:	69 83       	std	Y+1, r22	; 0x01
    18e0:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    18e2:	8b 83       	std	Y+3, r24	; 0x03
    18e4:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    18e6:	24 e0       	ldi	r18, 0x04	; 4
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	ae 01       	movw	r20, r28
    18ec:	4f 5f       	subi	r20, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	6f e0       	ldi	r22, 0x0F	; 15
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	c7 01       	movw	r24, r14
    18f6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    18fa:	f7 01       	movw	r30, r14
    18fc:	ea 58       	subi	r30, 0x8A	; 138
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	36 97       	sbiw	r30, 0x06	; 6
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    190a:	38 96       	adiw	r30, 0x08	; 8
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	36 97       	sbiw	r30, 0x06	; 6
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	f7 01       	movw	r30, r14
    191a:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    191c:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    1920:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    1924:	82 32       	cpi	r24, 0x22	; 34
    1926:	91 40       	sbci	r25, 0x01	; 1
    1928:	0c f0       	brlt	.+2      	; 0x192c <_ZN16CLaserControlApp3RunEv+0x4c4>
    192a:	0a c2       	rjmp	.+1044   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
					SetPictureId(PICID_WORK_PREPARE);
    192c:	67 e0       	ldi	r22, 0x07	; 7
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	c7 01       	movw	r24, r14
    1932:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1936:	04 c2       	rjmp	.+1032   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    1938:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    193c:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    1940:	8d 32       	cpi	r24, 0x2D	; 45
    1942:	91 40       	sbci	r25, 0x01	; 1
    1944:	0c f4       	brge	.+2      	; 0x1948 <_ZN16CLaserControlApp3RunEv+0x4e0>
    1946:	fc c1       	rjmp	.+1016   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    1948:	69 e2       	ldi	r22, 0x29	; 41
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	c7 01       	movw	r24, r14
    194e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    1952:	f7 01       	movw	r30, r14
    1954:	87 85       	ldd	r24, Z+15	; 0x0f
    1956:	80 8b       	std	Z+16, r24	; 0x10
    1958:	f3 c1       	rjmp	.+998    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    195a:	f7 01       	movw	r30, r14
    195c:	84 ad       	ldd	r24, Z+60	; 0x3c
    195e:	95 ad       	ldd	r25, Z+61	; 0x3d
    1960:	ac 01       	movw	r20, r24
    1962:	56 95       	lsr	r21
    1964:	54 2f       	mov	r21, r20
    1966:	44 27       	eor	r20, r20
    1968:	57 95       	ror	r21
    196a:	47 95       	ror	r20
    196c:	98 2f       	mov	r25, r24
    196e:	88 27       	eor	r24, r24
    1970:	99 0f       	add	r25, r25
    1972:	48 0f       	add	r20, r24
    1974:	59 1f       	adc	r21, r25
    1976:	9a 01       	movw	r18, r20
    1978:	a1 e1       	ldi	r26, 0x11	; 17
    197a:	b4 e0       	ldi	r27, 0x04	; 4
    197c:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    1980:	48 1b       	sub	r20, r24
    1982:	59 0b       	sbc	r21, r25
    1984:	56 95       	lsr	r21
    1986:	47 95       	ror	r20
    1988:	84 0f       	add	r24, r20
    198a:	95 1f       	adc	r25, r21
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	92 95       	swap	r25
    1992:	82 95       	swap	r24
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	89 27       	eor	r24, r25
    1998:	9f 70       	andi	r25, 0x0F	; 15
    199a:	89 27       	eor	r24, r25
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	9e 83       	std	Y+6, r25	; 0x06
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    19a8:	42 e0       	ldi	r20, 0x02	; 2
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	be 01       	movw	r22, r28
    19ae:	6b 5f       	subi	r22, 0xFB	; 251
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	87 e6       	ldi	r24, 0x67	; 103
    19b4:	95 e2       	ldi	r25, 0x25	; 37
    19b6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN4CSPI4SendEPhj>
							
				if (!laserBoard.Footswitch())
    19ba:	87 e2       	ldi	r24, 0x27	; 39
    19bc:	95 e2       	ldi	r25, 0x25	; 37
    19be:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <_ZN11CLaserBoard10FootswitchEv>
    19c2:	81 11       	cpse	r24, r1
    19c4:	10 c0       	rjmp	.+32     	; 0x19e6 <_ZN16CLaserControlApp3RunEv+0x57e>
				{
					//isstarted = true;
					if (state != APP_WORKLIGHT)
    19c6:	f7 01       	movw	r30, r14
    19c8:	84 85       	ldd	r24, Z+12	; 0x0c
    19ca:	95 85       	ldd	r25, Z+13	; 0x0d
    19cc:	80 97       	sbiw	r24, 0x20	; 32
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <_ZN16CLaserControlApp3RunEv+0x59c>
					{
						SetPictureId(PICID_WORK_STARTED);
    19d0:	60 e1       	ldi	r22, 0x10	; 16
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	c7 01       	movw	r24, r14
    19d6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    19da:	80 e2       	ldi	r24, 0x20	; 32
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	f7 01       	movw	r30, r14
    19e0:	84 87       	std	Z+12, r24	; 0x0c
    19e2:	95 87       	std	Z+13, r25	; 0x0d
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <_ZN16CLaserControlApp3RunEv+0x59c>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    19e6:	f7 01       	movw	r30, r14
    19e8:	84 85       	ldd	r24, Z+12	; 0x0c
    19ea:	95 85       	ldd	r25, Z+13	; 0x0d
    19ec:	40 97       	sbiw	r24, 0x10	; 16
    19ee:	51 f0       	breq	.+20     	; 0x1a04 <_ZN16CLaserControlApp3RunEv+0x59c>
					{
						SetPictureId(PICID_WORK_POWERON);
    19f0:	6e e0       	ldi	r22, 0x0E	; 14
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	c7 01       	movw	r24, r14
    19f6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    19fa:	80 e1       	ldi	r24, 0x10	; 16
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	f7 01       	movw	r30, r14
    1a00:	84 87       	std	Z+12, r24	; 0x0c
    1a02:	95 87       	std	Z+13, r25	; 0x0d
					/*laserTimer.Stop();
					laserTimer.ChannelSet(TIMER_CHANNEL_A);
					laserTimer.ChannelSet(TIMER_CHANNEL_B);*/
				}
			
				uint32_t cnt = swap32(laserCounter);
    1a04:	f7 01       	movw	r30, r14
    1a06:	fe 96       	adiw	r30, 0x3e	; 62
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0e 94 af 10 	call	0x215e	; 0x215e <_Z6swap32m>
    1a14:	69 83       	std	Y+1, r22	; 0x01
    1a16:	7a 83       	std	Y+2, r23	; 0x02
    1a18:	8b 83       	std	Y+3, r24	; 0x03
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    1a1c:	24 e0       	ldi	r18, 0x04	; 4
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	ae 01       	movw	r20, r28
    1a22:	4f 5f       	subi	r20, 0xFF	; 255
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
    1a26:	68 e0       	ldi	r22, 0x08	; 8
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    1a30:	f7 01       	movw	r30, r14
    1a32:	ee 5b       	subi	r30, 0xBE	; 190
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	0e 94 af 10 	call	0x215e	; 0x215e <_Z6swap32m>
    1a42:	69 83       	std	Y+1, r22	; 0x01
    1a44:	7a 83       	std	Y+2, r23	; 0x02
    1a46:	8b 83       	std	Y+3, r24	; 0x03
    1a48:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    1a4a:	24 e0       	ldi	r18, 0x04	; 4
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	ae 01       	movw	r20, r28
    1a50:	4f 5f       	subi	r20, 0xFF	; 255
    1a52:	5f 4f       	sbci	r21, 0xFF	; 255
    1a54:	64 e1       	ldi	r22, 0x14	; 20
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	c7 01       	movw	r24, r14
    1a5a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    1a5e:	70 c1       	rjmp	.+736    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    1a60:	87 e2       	ldi	r24, 0x27	; 39
    1a62:	95 e2       	ldi	r25, 0x25	; 37
    1a64:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    1a68:	f7 01       	movw	r30, r14
    1a6a:	e6 58       	subi	r30, 0x86	; 134
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	cd 97       	sbiw	r24, 0x3d	; 61
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <_ZN16CLaserControlApp3RunEv+0x610>
    1a76:	64 c1       	rjmp	.+712    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
				SetPictureId(PICID_WORKOnReady);
    1a78:	69 e1       	ldi	r22, 0x19	; 25
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a82:	5e c1       	rjmp	.+700    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    1a84:	87 e2       	ldi	r24, 0x27	; 39
    1a86:	95 e2       	ldi	r25, 0x25	; 37
    1a88:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    1a8c:	f7 01       	movw	r30, r14
    1a8e:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    1a90:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    1a94:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    1a98:	82 32       	cpi	r24, 0x22	; 34
    1a9a:	91 40       	sbci	r25, 0x01	; 1
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <_ZN16CLaserControlApp3RunEv+0x638>
    1a9e:	50 c1       	rjmp	.+672    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
			{
				prepare = true;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	f7 01       	movw	r30, r14
    1aa4:	82 8b       	std	Z+18, r24	; 0x12
				SetPictureId(PIC_ID_last);
    1aa6:	60 89       	ldd	r22, Z+16	; 0x10
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	c7 01       	movw	r24, r14
    1aac:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ab0:	47 c1       	rjmp	.+654    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    1ab2:	87 e2       	ldi	r24, 0x27	; 39
    1ab4:	95 e2       	ldi	r25, 0x25	; 37
    1ab6:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    1aba:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    1abe:	85 ff       	sbrs	r24, 5
    1ac0:	3f c1       	rjmp	.+638    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
				SetPictureId(PIC_ID_last);
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	60 89       	ldd	r22, Z+16	; 0x10
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	c7 01       	movw	r24, r14
    1aca:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ace:	38 c1       	rjmp	.+624    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    1ad0:	f7 01       	movw	r30, r14
    1ad2:	ee 5b       	subi	r30, 0xBE	; 190
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	10 82       	st	Z, r1
    1ad8:	11 82       	std	Z+1, r1	; 0x01
    1ada:	12 82       	std	Z+2, r1	; 0x02
    1adc:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    1ade:	87 e2       	ldi	r24, 0x27	; 39
    1ae0:	95 e2       	ldi	r25, 0x25	; 37
    1ae2:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1ae6:	f7 01       	movw	r30, r14
    1ae8:	e2 5a       	subi	r30, 0xA2	; 162
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	2c ec       	ldi	r18, 0xCC	; 204
    1af2:	28 9f       	mul	r18, r24
    1af4:	b0 01       	movw	r22, r0
    1af6:	29 9f       	mul	r18, r25
    1af8:	70 0d       	add	r23, r0
    1afa:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1afc:	88 e5       	ldi	r24, 0x58	; 88
    1afe:	95 e2       	ldi	r25, 0x25	; 37
    1b00:	0e 94 38 30 	call	0x6070	; 0x6070 <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	f7 01       	movw	r30, r14
    1b08:	83 8b       	std	Z+19, r24	; 0x13
				
				prepare = true;
    1b0a:	82 8b       	std	Z+18, r24	; 0x12
				m_wMinutes = m_wSetMin;
    1b0c:	ea 58       	subi	r30, 0x8A	; 138
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	36 97       	sbiw	r30, 0x06	; 6
    1b16:	80 83       	st	Z, r24
    1b18:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1b1a:	38 96       	adiw	r30, 0x08	; 8
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	36 97       	sbiw	r30, 0x06	; 6
    1b22:	80 83       	st	Z, r24
    1b24:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    1b26:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    1b2a:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    1b2e:	83 32       	cpi	r24, 0x23	; 35
    1b30:	91 40       	sbci	r25, 0x01	; 1
    1b32:	34 f0       	brlt	.+12     	; 0x1b40 <_ZN16CLaserControlApp3RunEv+0x6d8>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1b34:	67 e2       	ldi	r22, 0x27	; 39
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	c7 01       	movw	r24, r14
    1b3a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1b3e:	00 c1       	rjmp	.+512    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1b40:	67 e0       	ldi	r22, 0x07	; 7
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	c7 01       	movw	r24, r14
    1b46:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1b4a:	fa c0       	rjmp	.+500    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	84 ad       	ldd	r24, Z+60	; 0x3c
    1b50:	95 ad       	ldd	r25, Z+61	; 0x3d
    1b52:	ac 01       	movw	r20, r24
    1b54:	56 95       	lsr	r21
    1b56:	54 2f       	mov	r21, r20
    1b58:	44 27       	eor	r20, r20
    1b5a:	57 95       	ror	r21
    1b5c:	47 95       	ror	r20
    1b5e:	98 2f       	mov	r25, r24
    1b60:	88 27       	eor	r24, r24
    1b62:	99 0f       	add	r25, r25
    1b64:	48 0f       	add	r20, r24
    1b66:	59 1f       	adc	r21, r25
    1b68:	9a 01       	movw	r18, r20
    1b6a:	a1 e1       	ldi	r26, 0x11	; 17
    1b6c:	b4 e0       	ldi	r27, 0x04	; 4
    1b6e:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    1b72:	48 1b       	sub	r20, r24
    1b74:	59 0b       	sbc	r21, r25
    1b76:	56 95       	lsr	r21
    1b78:	47 95       	ror	r20
    1b7a:	84 0f       	add	r24, r20
    1b7c:	95 1f       	adc	r25, r21
    1b7e:	96 95       	lsr	r25
    1b80:	87 95       	ror	r24
    1b82:	92 95       	swap	r25
    1b84:	82 95       	swap	r24
    1b86:	8f 70       	andi	r24, 0x0F	; 15
    1b88:	89 27       	eor	r24, r25
    1b8a:	9f 70       	andi	r25, 0x0F	; 15
    1b8c:	89 27       	eor	r24, r25
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1b9a:	42 e0       	ldi	r20, 0x02	; 2
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	be 01       	movw	r22, r28
    1ba0:	6f 5f       	subi	r22, 0xFF	; 255
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	87 e6       	ldi	r24, 0x67	; 103
    1ba6:	95 e2       	ldi	r25, 0x25	; 37
    1ba8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    1bac:	6e e0       	ldi	r22, 0x0E	; 14
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1bb6:	c4 c0       	rjmp	.+392    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1bb8:	6a e0       	ldi	r22, 0x0A	; 10
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	c7 01       	movw	r24, r14
    1bbe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1bc2:	8e e5       	ldi	r24, 0x5E	; 94
    1bc4:	95 e2       	ldi	r25, 0x25	; 37
    1bc6:	0e 94 99 31 	call	0x6332	; 0x6332 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1bca:	60 e1       	ldi	r22, 0x10	; 16
    1bcc:	8e e5       	ldi	r24, 0x5E	; 94
    1bce:	95 e2       	ldi	r25, 0x25	; 37
    1bd0:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1bd4:	60 e2       	ldi	r22, 0x20	; 32
    1bd6:	8e e5       	ldi	r24, 0x5E	; 94
    1bd8:	95 e2       	ldi	r25, 0x25	; 37
    1bda:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1bde:	87 e2       	ldi	r24, 0x27	; 39
    1be0:	95 e2       	ldi	r25, 0x25	; 37
    1be2:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    1be6:	f7 01       	movw	r30, r14
    1be8:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    1bea:	87 e2       	ldi	r24, 0x27	; 39
    1bec:	95 e2       	ldi	r25, 0x25	; 37
    1bee:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	fe 96       	adiw	r30, 0x3e	; 62
    1bf6:	40 81       	ld	r20, Z
    1bf8:	51 81       	ldd	r21, Z+1	; 0x01
    1bfa:	62 81       	ldd	r22, Z+2	; 0x02
    1bfc:	73 81       	ldd	r23, Z+3	; 0x03
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1c0a:	42 e0       	ldi	r20, 0x02	; 2
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	be 01       	movw	r22, r28
    1c10:	6f 5f       	subi	r22, 0xFF	; 255
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	87 e6       	ldi	r24, 0x67	; 103
    1c16:	95 e2       	ldi	r25, 0x25	; 37
    1c18:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN4CSPI4SendEPhj>
			}
		break;
    1c1c:	91 c0       	rjmp	.+290    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1c1e:	6a e0       	ldi	r22, 0x0A	; 10
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	c7 01       	movw	r24, r14
    1c24:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1c28:	8b c0       	rjmp	.+278    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1c2a:	42 e0       	ldi	r20, 0x02	; 2
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	61 e1       	ldi	r22, 0x11	; 17
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	c7 01       	movw	r24, r14
    1c34:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1c38:	ff ef       	ldi	r31, 0xFF	; 255
    1c3a:	21 ee       	ldi	r18, 0xE1	; 225
    1c3c:	84 e0       	ldi	r24, 0x04	; 4
    1c3e:	f1 50       	subi	r31, 0x01	; 1
    1c40:	20 40       	sbci	r18, 0x00	; 0
    1c42:	80 40       	sbci	r24, 0x00	; 0
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <_ZN16CLaserControlApp3RunEv+0x7d6>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <_ZN16CLaserControlApp3RunEv+0x7e0>
    1c48:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1c4a:	42 e0       	ldi	r20, 0x02	; 2
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	62 e1       	ldi	r22, 0x12	; 18
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	c7 01       	movw	r24, r14
    1c54:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	e1 ee       	ldi	r30, 0xE1	; 225
    1c5c:	f4 e0       	ldi	r31, 0x04	; 4
    1c5e:	91 50       	subi	r25, 0x01	; 1
    1c60:	e0 40       	sbci	r30, 0x00	; 0
    1c62:	f0 40       	sbci	r31, 0x00	; 0
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <_ZN16CLaserControlApp3RunEv+0x7f6>
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <_ZN16CLaserControlApp3RunEv+0x800>
    1c68:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1c6a:	f7 01       	movw	r30, r14
    1c6c:	ea 59       	subi	r30, 0x9A	; 154
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	20 81       	ld	r18, Z
    1c72:	31 81       	ldd	r19, Z+1	; 0x01
    1c74:	c9 01       	movw	r24, r18
    1c76:	a0 e0       	ldi	r26, 0x00	; 0
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	90 51       	subi	r25, 0x10	; 16
    1c7c:	af 4f       	sbci	r26, 0xFF	; 255
    1c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c80:	22 27       	eor	r18, r18
    1c82:	38 2f       	mov	r19, r24
    1c84:	49 2f       	mov	r20, r25
    1c86:	5a 2f       	mov	r21, r26
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	1c e0       	ldi	r17, 0x0C	; 12
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	71 e0       	ldi	r23, 0x01	; 1
    1c90:	8e e4       	ldi	r24, 0x4E	; 78
    1c92:	95 e2       	ldi	r25, 0x25	; 37
    1c94:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1c98:	53 c0       	rjmp	.+166    	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
    1c9a:	2f ef       	ldi	r18, 0xFF	; 255
    1c9c:	87 ea       	ldi	r24, 0xA7	; 167
    1c9e:	91 e6       	ldi	r25, 0x61	; 97
    1ca0:	21 50       	subi	r18, 0x01	; 1
    1ca2:	80 40       	sbci	r24, 0x00	; 0
    1ca4:	90 40       	sbci	r25, 0x00	; 0
    1ca6:	e1 f7       	brne	.-8      	; 0x1ca0 <_ZN16CLaserControlApp3RunEv+0x838>
    1ca8:	00 c0       	rjmp	.+0      	; 0x1caa <_ZN16CLaserControlApp3RunEv+0x842>
    1caa:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1cac:	42 e0       	ldi	r20, 0x02	; 2
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	62 e1       	ldi	r22, 0x12	; 18
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1cba:	f7 01       	movw	r30, r14
    1cbc:	e8 59       	subi	r30, 0x98	; 152
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	20 81       	ld	r18, Z
    1cc2:	31 81       	ldd	r19, Z+1	; 0x01
    1cc4:	32 97       	sbiw	r30, 0x02	; 2
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	28 0f       	add	r18, r24
    1ccc:	39 1f       	adc	r19, r25
    1cce:	c9 01       	movw	r24, r18
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	90 51       	subi	r25, 0x10	; 16
    1cd6:	af 4f       	sbci	r26, 0xFF	; 255
    1cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cda:	22 27       	eor	r18, r18
    1cdc:	38 2f       	mov	r19, r24
    1cde:	49 2f       	mov	r20, r25
    1ce0:	5a 2f       	mov	r21, r26
    1ce2:	00 e0       	ldi	r16, 0x00	; 0
    1ce4:	11 e0       	ldi	r17, 0x01	; 1
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	7d e0       	ldi	r23, 0x0D	; 13
    1cea:	8e e4       	ldi	r24, 0x4E	; 78
    1cec:	95 e2       	ldi	r25, 0x25	; 37
    1cee:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1cf2:	26 c0       	rjmp	.+76     	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1cf4:	f7 01       	movw	r30, r14
    1cf6:	e8 59       	subi	r30, 0x98	; 152
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	20 81       	ld	r18, Z
    1cfc:	31 81       	ldd	r19, Z+1	; 0x01
    1cfe:	32 97       	sbiw	r30, 0x02	; 2
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	28 0f       	add	r18, r24
    1d06:	39 1f       	adc	r19, r25
    1d08:	c9 01       	movw	r24, r18
    1d0a:	a0 e0       	ldi	r26, 0x00	; 0
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	90 51       	subi	r25, 0x10	; 16
    1d10:	af 4f       	sbci	r26, 0xFF	; 255
    1d12:	bf 4f       	sbci	r27, 0xFF	; 255
    1d14:	22 27       	eor	r18, r18
    1d16:	38 2f       	mov	r19, r24
    1d18:	49 2f       	mov	r20, r25
    1d1a:	5a 2f       	mov	r21, r26
    1d1c:	00 e0       	ldi	r16, 0x00	; 0
    1d1e:	11 e0       	ldi	r17, 0x01	; 1
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	7d e0       	ldi	r23, 0x0D	; 13
    1d24:	8e e4       	ldi	r24, 0x4E	; 78
    1d26:	95 e2       	ldi	r25, 0x25	; 37
    1d28:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1d2e:	8e e4       	ldi	r24, 0x4E	; 78
    1d30:	95 e2       	ldi	r25, 0x25	; 37
    1d32:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x8d8>
		default:
			Database.UnMap();
    1d38:	8e e4       	ldi	r24, 0x4E	; 78
    1d3a:	95 e2       	ldi	r25, 0x25	; 37
    1d3c:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
			PIC_ID_last = PIC_ID;
			SetPictureId(PICID_WORK_ERROR1);
		}
#endif
	
	if (update)
    1d40:	f7 01       	movw	r30, r14
    1d42:	81 89       	ldd	r24, Z+17	; 0x11
    1d44:	88 23       	and	r24, r24
    1d46:	a9 f0       	breq	.+42     	; 0x1d72 <_ZN16CLaserControlApp3RunEv+0x90a>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1d48:	a7 01       	movw	r20, r14
    1d4a:	4a 5b       	subi	r20, 0xBA	; 186
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	2a e2       	ldi	r18, 0x2A	; 42
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	61 e0       	ldi	r22, 0x01	; 1
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	c7 01       	movw	r24, r14
    1d58:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	11 8a       	std	Z+17, r1	; 0x11
    1d60:	08 c0       	rjmp	.+16     	; 0x1d72 <_ZN16CLaserControlApp3RunEv+0x90a>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	f7 01       	movw	r30, r14
    1d68:	e6 59       	subi	r30, 0x96	; 150
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	cf cb       	rjmp	.-2146   	; 0x1510 <_ZN16CLaserControlApp3RunEv+0xa8>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    1d72:	26 96       	adiw	r28, 0x06	; 6
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	08 95       	ret

00001d8e <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    1d94:	fc 01       	movw	r30, r24
    1d96:	e4 58       	subi	r30, 0x84	; 132
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	89 2b       	or	r24, r25
    1da0:	29 f0       	breq	.+10     	; 0x1dac <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	80 83       	st	Z, r24
    1daa:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    1dac:	8a 89       	ldd	r24, Y+18	; 0x12
    1dae:	88 23       	and	r24, r24
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    1db2:	89 c0       	rjmp	.+274    	; 0x1ec6 <_ZN16CLaserControlApp7OnTimerEv+0x138>
	{
		if (m_wMillSec == 0)
    1db4:	fe 01       	movw	r30, r28
    1db6:	ec 58       	subi	r30, 0x8C	; 140
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	89 2b       	or	r24, r25
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    1dc2:	79 c0       	rjmp	.+242    	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x128>
		{			
			if (m_wSeconds == 0)
    1dc4:	32 97       	sbiw	r30, 0x02	; 2
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	89 2b       	or	r24, r25
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <_ZN16CLaserControlApp7OnTimerEv+0x42>
    1dce:	4c c0       	rjmp	.+152    	; 0x1e68 <_ZN16CLaserControlApp7OnTimerEv+0xda>
			{
				if (m_wMinutes == 0)
    1dd0:	32 97       	sbiw	r30, 0x02	; 2
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	89 2b       	or	r24, r25
    1dd8:	d1 f5       	brne	.+116    	; 0x1e4e <_ZN16CLaserControlApp7OnTimerEv+0xc0>
				{
					if (state == APP_WORKPREPARE)
    1dda:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ddc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dde:	02 97       	sbiw	r24, 0x02	; 2
    1de0:	a1 f5       	brne	.+104    	; 0x1e4a <_ZN16CLaserControlApp7OnTimerEv+0xbc>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    1de2:	22 e0       	ldi	r18, 0x02	; 2
    1de4:	44 e6       	ldi	r20, 0x64	; 100
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	65 e0       	ldi	r22, 0x05	; 5
    1dea:	71 e0       	ldi	r23, 0x01	; 1
    1dec:	86 e2       	ldi	r24, 0x26	; 38
    1dee:	95 e2       	ldi	r25, 0x25	; 37
    1df0:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1df4:	86 e2       	ldi	r24, 0x26	; 38
    1df6:	95 e2       	ldi	r25, 0x25	; 37
    1df8:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    1dfc:	22 e0       	ldi	r18, 0x02	; 2
    1dfe:	44 e6       	ldi	r20, 0x64	; 100
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	66 e2       	ldi	r22, 0x26	; 38
    1e04:	71 e0       	ldi	r23, 0x01	; 1
    1e06:	86 e2       	ldi	r24, 0x26	; 38
    1e08:	95 e2       	ldi	r25, 0x25	; 37
    1e0a:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e0e:	86 e2       	ldi	r24, 0x26	; 38
    1e10:	95 e2       	ldi	r25, 0x25	; 37
    1e12:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    1e16:	22 e0       	ldi	r18, 0x02	; 2
    1e18:	44 e6       	ldi	r20, 0x64	; 100
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	69 e4       	ldi	r22, 0x49	; 73
    1e1e:	71 e0       	ldi	r23, 0x01	; 1
    1e20:	86 e2       	ldi	r24, 0x26	; 38
    1e22:	95 e2       	ldi	r25, 0x25	; 37
    1e24:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e28:	86 e2       	ldi	r24, 0x26	; 38
    1e2a:	95 e2       	ldi	r25, 0x25	; 37
    1e2c:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    1e30:	22 e0       	ldi	r18, 0x02	; 2
    1e32:	44 e6       	ldi	r20, 0x64	; 100
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	6d e5       	ldi	r22, 0x5D	; 93
    1e38:	71 e0       	ldi	r23, 0x01	; 1
    1e3a:	86 e2       	ldi	r24, 0x26	; 38
    1e3c:	95 e2       	ldi	r25, 0x25	; 37
    1e3e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e42:	86 e2       	ldi	r24, 0x26	; 38
    1e44:	95 e2       	ldi	r25, 0x25	; 37
    1e46:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1e4a:	1a 8a       	std	Y+18, r1	; 0x12
    1e4c:	a3 c0       	rjmp	.+326    	; 0x1f94 <_ZN16CLaserControlApp7OnTimerEv+0x206>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    1e4e:	8c e3       	ldi	r24, 0x3C	; 60
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	fe 01       	movw	r30, r28
    1e54:	ee 58       	subi	r30, 0x8E	; 142
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    1e5c:	32 97       	sbiw	r30, 0x02	; 2
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    1e68:	84 e6       	ldi	r24, 0x64	; 100
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ec 58       	subi	r30, 0x8C	; 140
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 83       	st	Z, r24
    1e74:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    1e76:	32 97       	sbiw	r30, 0x02	; 2
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
    1e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e84:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e86:	02 97       	sbiw	r24, 0x02	; 2
    1e88:	b1 f4       	brne	.+44     	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x128>
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    1e8a:	32 97       	sbiw	r30, 0x02	; 2
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	89 2b       	or	r24, r25
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <_ZN16CLaserControlApp7OnTimerEv+0x108>
    1e94:	4c c0       	rjmp	.+152    	; 0x1f2e <_ZN16CLaserControlApp7OnTimerEv+0x1a0>
    1e96:	32 96       	adiw	r30, 0x02	; 2
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	0a 97       	sbiw	r24, 0x0a	; 10
    1e9e:	08 f4       	brcc	.+2      	; 0x1ea2 <_ZN16CLaserControlApp7OnTimerEv+0x114>
    1ea0:	54 c0       	rjmp	.+168    	; 0x1f4a <_ZN16CLaserControlApp7OnTimerEv+0x1bc>
    1ea2:	45 c0       	rjmp	.+138    	; 0x1f2e <_ZN16CLaserControlApp7OnTimerEv+0x1a0>
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ee 58       	subi	r30, 0x8E	; 142
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	05 97       	sbiw	r24, 0x05	; 5
    1eb0:	08 f4       	brcc	.+2      	; 0x1eb4 <_ZN16CLaserControlApp7OnTimerEv+0x126>
    1eb2:	54 c0       	rjmp	.+168    	; 0x1f5c <_ZN16CLaserControlApp7OnTimerEv+0x1ce>
    1eb4:	61 c0       	rjmp	.+194    	; 0x1f78 <_ZN16CLaserControlApp7OnTimerEv+0x1ea>
					//player.beep(1000, 25);
					}
			}
			// ************************************
		}
		m_wMillSec-=10;
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ec 58       	subi	r30, 0x8C	; 140
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	0a 97       	sbiw	r24, 0x0a	; 10
    1ec2:	80 83       	st	Z, r24
    1ec4:	91 83       	std	Z+1, r25	; 0x01
	}
	
	// Flow sensor
	{
		static uint16_t millsec = 100;
		if (millsec == 0)
    1ec6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1eca:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    1ece:	89 2b       	or	r24, r25
    1ed0:	21 f5       	brne	.+72     	; 0x1f1a <_ZN16CLaserControlApp7OnTimerEv+0x18c>
		{
			millsec = 100;
    1ed2:	84 e6       	ldi	r24, 0x64	; 100
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1eda:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
			
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    1ede:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    1ee2:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    1ee6:	49 e4       	ldi	r20, 0x49	; 73
    1ee8:	48 9f       	mul	r20, r24
    1eea:	90 01       	movw	r18, r0
    1eec:	49 9f       	mul	r20, r25
    1eee:	30 0d       	add	r19, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	a5 ec       	ldi	r26, 0xC5	; 197
    1ef4:	be e4       	ldi	r27, 0x4E	; 78
    1ef6:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	92 95       	swap	r25
    1f00:	82 95       	swap	r24
    1f02:	8f 70       	andi	r24, 0x0F	; 15
    1f04:	89 27       	eor	r24, r25
    1f06:	9f 70       	andi	r25, 0x0F	; 15
    1f08:	89 27       	eor	r24, r25
    1f0a:	c6 58       	subi	r28, 0x86	; 134
    1f0c:	df 4f       	sbci	r29, 0xFF	; 255
    1f0e:	88 83       	st	Y, r24
    1f10:	99 83       	std	Y+1, r25	; 0x01
			flowtimer.Reset();
    1f12:	8b e5       	ldi	r24, 0x5B	; 91
    1f14:	95 e2       	ldi	r25, 0x25	; 37
    1f16:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <_ZN8CTimerC15ResetEv>
		}
		millsec-=10;
    1f1a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1f1e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    1f22:	0a 97       	sbiw	r24, 0x0a	; 10
    1f24:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1f28:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    1f2c:	33 c0       	rjmp	.+102    	; 0x1f94 <_ZN16CLaserControlApp7OnTimerEv+0x206>
						//player.beep(1000, 50);
					}
				}
				else
				{
					player.SoundStart(1000, 25, 2);
    1f2e:	22 e0       	ldi	r18, 0x02	; 2
    1f30:	49 e1       	ldi	r20, 0x19	; 25
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	68 ee       	ldi	r22, 0xE8	; 232
    1f36:	73 e0       	ldi	r23, 0x03	; 3
    1f38:	86 e2       	ldi	r24, 0x26	; 38
    1f3a:	95 e2       	ldi	r25, 0x25	; 37
    1f3c:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f40:	86 e2       	ldi	r24, 0x26	; 38
    1f42:	95 e2       	ldi	r25, 0x25	; 37
    1f44:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
    1f48:	b6 cf       	rjmp	.-148    	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x128>
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e0 59       	subi	r30, 0x90	; 144
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	89 2b       	or	r24, r25
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <_ZN16CLaserControlApp7OnTimerEv+0x1cc>
    1f58:	a5 cf       	rjmp	.-182    	; 0x1ea4 <_ZN16CLaserControlApp7OnTimerEv+0x116>
    1f5a:	0e c0       	rjmp	.+28     	; 0x1f78 <_ZN16CLaserControlApp7OnTimerEv+0x1ea>
					{
						player.SoundStart(1000, 100, 2);
    1f5c:	22 e0       	ldi	r18, 0x02	; 2
    1f5e:	44 e6       	ldi	r20, 0x64	; 100
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	68 ee       	ldi	r22, 0xE8	; 232
    1f64:	73 e0       	ldi	r23, 0x03	; 3
    1f66:	86 e2       	ldi	r24, 0x26	; 38
    1f68:	95 e2       	ldi	r25, 0x25	; 37
    1f6a:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1f6e:	86 e2       	ldi	r24, 0x26	; 38
    1f70:	95 e2       	ldi	r25, 0x25	; 37
    1f72:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
    1f76:	9f cf       	rjmp	.-194    	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x128>
						//player.beep(1000, 100);
					}
					else
					{
						player.SoundStart(1000, 50, 2);
    1f78:	22 e0       	ldi	r18, 0x02	; 2
    1f7a:	42 e3       	ldi	r20, 0x32	; 50
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	68 ee       	ldi	r22, 0xE8	; 232
    1f80:	73 e0       	ldi	r23, 0x03	; 3
    1f82:	86 e2       	ldi	r24, 0x26	; 38
    1f84:	95 e2       	ldi	r25, 0x25	; 37
    1f86:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1f8a:	86 e2       	ldi	r24, 0x26	; 38
    1f8c:	95 e2       	ldi	r25, 0x25	; 37
    1f8e:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
    1f92:	91 cf       	rjmp	.-222    	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x128>
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
			flowtimer.Reset();
		}
		millsec-=10;
	}
}
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1f9a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN16CLaserControlApp7OnTimerEv>
    1f9e:	08 95       	ret

00001fa0 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	24 85       	ldd	r18, Z+12	; 0x0c
    1fa8:	35 85       	ldd	r19, Z+13	; 0x0d
    1faa:	20 31       	cpi	r18, 0x10	; 16
    1fac:	31 05       	cpc	r19, r1
    1fae:	21 f0       	breq	.+8      	; 0x1fb8 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fb0:	20 32       	cpi	r18, 0x20	; 32
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fb6:	93 c0       	rjmp	.+294    	; 0x20de <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    1fb8:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    1fba:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    1fbe:	80 fd       	sbrc	r24, 0
    1fc0:	78 c0       	rjmp	.+240    	; 0x20b2 <_ZN16CLaserControlApp6OnINT0Ev+0x112>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    1fc2:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <__data_end>
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	8a c0       	rjmp	.+276    	; 0x20de <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e4 58       	subi	r30, 0x84	; 132
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	89 2b       	or	r24, r25
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    1fd8:	7d c0       	rjmp	.+250    	; 0x20d4 <_ZN16CLaserControlApp6OnINT0Ev+0x134>
    1fda:	81 c0       	rjmp	.+258    	; 0x20de <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    1fdc:	8a e0       	ldi	r24, 0x0A	; 10
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e4 58       	subi	r30, 0x84	; 132
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    1fea:	fe 97       	sbiw	r30, 0x3e	; 62
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ff2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	80 83       	st	Z, r24
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	a2 83       	std	Z+2, r26	; 0x02
    2000:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    2002:	34 96       	adiw	r30, 0x04	; 4
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	a2 81       	ldd	r26, Z+2	; 0x02
    200a:	b3 81       	ldd	r27, Z+3	; 0x03
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	a1 1d       	adc	r26, r1
    2010:	b1 1d       	adc	r27, r1
    2012:	80 83       	st	Z, r24
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	a2 83       	std	Z+2, r26	; 0x02
    2018:	b3 83       	std	Z+3, r27	; 0x03
						
						if (laserTimerDutyCyclems > 100)
    201a:	4a ad       	ldd	r20, Y+58	; 0x3a
    201c:	5b ad       	ldd	r21, Y+59	; 0x3b
    201e:	45 36       	cpi	r20, 0x65	; 101
    2020:	51 05       	cpc	r21, r1
    2022:	50 f0       	brcs	.+20     	; 0x2038 <_ZN16CLaserControlApp6OnINT0Ev+0x98>
							player.SoundStart(500, 50, 0);
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	42 e3       	ldi	r20, 0x32	; 50
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	64 ef       	ldi	r22, 0xF4	; 244
    202c:	71 e0       	ldi	r23, 0x01	; 1
    202e:	86 e2       	ldi	r24, 0x26	; 38
    2030:	95 e2       	ldi	r25, 0x25	; 37
    2032:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
    2036:	09 c0       	rjmp	.+18     	; 0x204a <_ZN16CLaserControlApp6OnINT0Ev+0xaa>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    2038:	56 95       	lsr	r21
    203a:	47 95       	ror	r20
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	64 ef       	ldi	r22, 0xF4	; 244
    2040:	71 e0       	ldi	r23, 0x01	; 1
    2042:	86 e2       	ldi	r24, 0x26	; 38
    2044:	95 e2       	ldi	r25, 0x25	; 37
    2046:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    204a:	86 e2       	ldi	r24, 0x26	; 38
    204c:	95 e2       	ldi	r25, 0x25	; 37
    204e:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    2052:	88 ad       	ldd	r24, Y+56	; 0x38
    2054:	99 ad       	ldd	r25, Y+57	; 0x39
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	29 f0       	breq	.+10     	; 0x2064 <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
						TCF0.CNT = laserTimerDutyCycle - 1;
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    2060:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    2064:	68 ad       	ldd	r22, Y+56	; 0x38
    2066:	79 ad       	ldd	r23, Y+57	; 0x39
    2068:	8e e5       	ldi	r24, 0x5E	; 94
    206a:	95 e2       	ldi	r25, 0x25	; 37
    206c:	0e 94 c4 31 	call	0x6388	; 0x6388 <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    2070:	68 ad       	ldd	r22, Y+56	; 0x38
    2072:	79 ad       	ldd	r23, Y+57	; 0x39
    2074:	8e e5       	ldi	r24, 0x5E	; 94
    2076:	95 e2       	ldi	r25, 0x25	; 37
    2078:	0e 94 c9 31 	call	0x6392	; 0x6392 <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    207c:	6e a9       	ldd	r22, Y+54	; 0x36
    207e:	7f a9       	ldd	r23, Y+55	; 0x37
    2080:	8e e5       	ldi	r24, 0x5E	; 94
    2082:	95 e2       	ldi	r25, 0x25	; 37
    2084:	0e 94 8c 31 	call	0x6318	; 0x6318 <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    2088:	8e 85       	ldd	r24, Y+14	; 0x0e
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	49 f4       	brne	.+18     	; 0x20a0 <_ZN16CLaserControlApp6OnINT0Ev+0x100>
    208e:	ff ef       	ldi	r31, 0xFF	; 255
    2090:	27 e8       	ldi	r18, 0x87	; 135
    2092:	83 e1       	ldi	r24, 0x13	; 19
    2094:	f1 50       	subi	r31, 0x01	; 1
    2096:	20 40       	sbci	r18, 0x00	; 0
    2098:	80 40       	sbci	r24, 0x00	; 0
    209a:	e1 f7       	brne	.-8      	; 0x2094 <_ZN16CLaserControlApp6OnINT0Ev+0xf4>
    209c:	00 c0       	rjmp	.+0      	; 0x209e <_ZN16CLaserControlApp6OnINT0Ev+0xfe>
    209e:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    20a0:	e0 e4       	ldi	r30, 0x40	; 64
    20a2:	f6 e0       	ldi	r31, 0x06	; 6
    20a4:	84 85       	ldd	r24, Z+12	; 0x0c
    20a6:	8e 7f       	andi	r24, 0xFE	; 254
    20a8:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <__data_end>
    20b0:	16 c0       	rjmp	.+44     	; 0x20de <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    20b2:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <__data_end>
				
				laserTimer.Stop();
    20b6:	8e e5       	ldi	r24, 0x5E	; 94
    20b8:	95 e2       	ldi	r25, 0x25	; 37
    20ba:	0e 94 99 31 	call	0x6332	; 0x6332 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    20be:	60 e1       	ldi	r22, 0x10	; 16
    20c0:	8e e5       	ldi	r24, 0x5E	; 94
    20c2:	95 e2       	ldi	r25, 0x25	; 37
    20c4:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    20c8:	60 e2       	ldi	r22, 0x20	; 32
    20ca:	8e e5       	ldi	r24, 0x5E	; 94
    20cc:	95 e2       	ldi	r25, 0x25	; 37
    20ce:	0e 94 ae 31 	call	0x635c	; 0x635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    20d2:	05 c0       	rjmp	.+10     	; 0x20de <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    20d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	09 f0       	breq	.+2      	; 0x20dc <_ZN16CLaserControlApp6OnINT0Ev+0x13c>
    20da:	bb cf       	rjmp	.-138    	; 0x2052 <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    20dc:	7f cf       	rjmp	.-258    	; 0x1fdc <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	08 95       	ret

000020e4 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    20e4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN16CLaserControlApp6OnINT0Ev>
    20e8:	08 95       	ret

000020ea <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	7c 01       	movw	r14, r24
    20fc:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    20fe:	41 15       	cp	r20, r1
    2100:	51 05       	cpc	r21, r1
    2102:	b1 f0       	breq	.+44     	; 0x2130 <_Z11ConvertDataPvS_jj+0x46>
    2104:	6b 01       	movw	r12, r22
    2106:	c4 0e       	add	r12, r20
    2108:	d5 1e       	adc	r13, r21
    210a:	eb 01       	movw	r28, r22
    210c:	26 1b       	sub	r18, r22
    210e:	37 0b       	sbc	r19, r23
    2110:	c9 01       	movw	r24, r18
    2112:	8c 0f       	add	r24, r28
    2114:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    2116:	b8 01       	movw	r22, r16
    2118:	0e 94 93 33 	call	0x6726	; 0x6726 <__udivmodhi4>
    211c:	fc 01       	movw	r30, r24
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	e4 27       	eor	r30, r20
    2122:	ee 0d       	add	r30, r14
    2124:	ff 1d       	adc	r31, r15
    2126:	89 91       	ld	r24, Y+
    2128:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    212a:	cc 15       	cp	r28, r12
    212c:	dd 05       	cpc	r29, r13
    212e:	81 f7       	brne	.-32     	; 0x2110 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	df 90       	pop	r13
    213e:	cf 90       	pop	r12
    2140:	08 95       	ret

00002142 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    2142:	68 17       	cp	r22, r24
    2144:	79 07       	cpc	r23, r25
    2146:	08 f4       	brcc	.+2      	; 0x214a <_Z3minjj+0x8>
    2148:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    214a:	08 95       	ret

0000214c <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    214c:	86 17       	cp	r24, r22
    214e:	97 07       	cpc	r25, r23
    2150:	08 f4       	brcc	.+2      	; 0x2154 <_Z3maxjj+0x8>
    2152:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    2154:	08 95       	ret

00002156 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    2156:	98 27       	eor	r25, r24
    2158:	89 27       	eor	r24, r25
    215a:	98 27       	eor	r25, r24
    215c:	08 95       	ret

0000215e <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    215e:	9b 01       	movw	r18, r22
    2160:	bc 01       	movw	r22, r24
    2162:	c9 01       	movw	r24, r18
}
    2164:	08 95       	ret

00002166 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    2166:	08 95       	ret

00002168 <_ZN4CSPID1Ev>:
    2168:	08 95       	ret

0000216a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    216a:	ef 92       	push	r14
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
    2176:	e0 e8       	ldi	r30, 0x80	; 128
    2178:	f6 e0       	ldi	r31, 0x06	; 6
    217a:	90 eb       	ldi	r25, 0xB0	; 176
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 ec       	ldi	r24, 0xC0	; 192
    2180:	84 8b       	std	Z+20, r24	; 0x14
    2182:	85 8b       	std	Z+21, r24	; 0x15
    2184:	87 8b       	std	Z+23, r24	; 0x17
    2186:	95 83       	std	Z+5, r25	; 0x05
    2188:	61 11       	cpse	r22, r1
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    218c:	80 e4       	ldi	r24, 0x40	; 64
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    2190:	80 e5       	ldi	r24, 0x50	; 80
    2192:	01 11       	cpse	r16, r1
    2194:	02 c0       	rjmp	.+4      	; 0x219a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	01 c0       	rjmp	.+2      	; 0x219c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    219a:	30 e8       	ldi	r19, 0x80	; 128
    219c:	41 11       	cpse	r20, r1
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    21a4:	90 e2       	ldi	r25, 0x20	; 32
    21a6:	22 0f       	add	r18, r18
    21a8:	22 0f       	add	r18, r18
    21aa:	e2 2a       	or	r14, r18
    21ac:	e8 2a       	or	r14, r24
    21ae:	e3 2a       	or	r14, r19
    21b0:	e9 2a       	or	r14, r25
    21b2:	00 ec       	ldi	r16, 0xC0	; 192
    21b4:	1a e0       	ldi	r17, 0x0A	; 10
    21b6:	f8 01       	movw	r30, r16
    21b8:	e0 82       	st	Z, r14
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	0e 94 1e 34 	call	0x683c	; 0x683c <malloc>
    21c2:	88 83       	st	Y, r24
    21c4:	99 83       	std	Y+1, r25	; 0x01
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	f8 01       	movw	r30, r16
    21ca:	81 83       	std	Z+1, r24	; 0x01
    21cc:	8e e2       	ldi	r24, 0x2E	; 46
    21ce:	91 e1       	ldi	r25, 0x11	; 17
    21d0:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <InterruptFuncTable+0x72>
    21d4:	90 93 25 23 	sts	0x2325, r25	; 0x802325 <InterruptFuncTable+0x73>
    21d8:	c0 93 1a 24 	sts	0x241A, r28	; 0x80241a <InterruptSenderTable+0x72>
    21dc:	d0 93 1b 24 	sts	0x241B, r29	; 0x80241b <InterruptSenderTable+0x73>
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ef 90       	pop	r14
    21ea:	08 95       	ret

000021ec <_ZN4CSPI4SendEPhj>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ec 01       	movw	r28, r24
    21f2:	4a 83       	std	Y+2, r20	; 0x02
    21f4:	5b 83       	std	Y+3, r21	; 0x03
    21f6:	4c 83       	std	Y+4, r20	; 0x04
    21f8:	5d 83       	std	Y+5, r21	; 0x05
    21fa:	88 81       	ld	r24, Y
    21fc:	99 81       	ldd	r25, Y+1	; 0x01
    21fe:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <memcpy>
    2202:	80 e1       	ldi	r24, 0x10	; 16
    2204:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    2208:	88 81       	ld	r24, Y
    220a:	99 81       	ldd	r25, Y+1	; 0x01
    220c:	4a 81       	ldd	r20, Y+2	; 0x02
    220e:	5b 81       	ldd	r21, Y+3	; 0x03
    2210:	9a 01       	movw	r18, r20
    2212:	21 50       	subi	r18, 0x01	; 1
    2214:	31 09       	sbc	r19, r1
    2216:	2a 83       	std	Y+2, r18	; 0x02
    2218:	3b 83       	std	Y+3, r19	; 0x03
    221a:	fc 01       	movw	r30, r24
    221c:	e2 0f       	add	r30, r18
    221e:	f3 1f       	adc	r31, r19
    2220:	80 81       	ld	r24, Z
    2222:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    222c:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	89 2b       	or	r24, r25
    2234:	79 f0       	breq	.+30     	; 0x2254 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2236:	40 81       	ld	r20, Z
    2238:	51 81       	ldd	r21, Z+1	; 0x01
    223a:	22 81       	ldd	r18, Z+2	; 0x02
    223c:	33 81       	ldd	r19, Z+3	; 0x03
    223e:	c9 01       	movw	r24, r18
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	82 83       	std	Z+2, r24	; 0x02
    2244:	93 83       	std	Z+3, r25	; 0x03
    2246:	fa 01       	movw	r30, r20
    2248:	e8 0f       	add	r30, r24
    224a:	f9 1f       	adc	r31, r25
    224c:	80 81       	ld	r24, Z
    224e:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    2252:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    2254:	80 e1       	ldi	r24, 0x10	; 16
    2256:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    225a:	08 95       	ret

0000225c <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    225c:	0e 94 16 11 	call	0x222c	; 0x222c <_ZN4CSPI10OnTransmitEv>
    2260:	08 95       	ret

00002262 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    2262:	20 e8       	ldi	r18, 0x80	; 128
    2264:	31 e2       	ldi	r19, 0x21	; 33
    2266:	fc 01       	movw	r30, r24
    2268:	20 83       	st	Z, r18
    226a:	31 83       	std	Z+1, r19	; 0x01
    226c:	08 95       	ret

0000226e <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    226e:	08 95       	ret

00002270 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    2270:	24 ea       	ldi	r18, 0xA4	; 164
    2272:	31 e2       	ldi	r19, 0x21	; 33
    2274:	fc 01       	movw	r30, r24
    2276:	20 83       	st	Z, r18
    2278:	31 83       	std	Z+1, r19	; 0x01
    227a:	08 95       	ret

0000227c <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    227c:	08 95       	ret

0000227e <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    227e:	22 ec       	ldi	r18, 0xC2	; 194
    2280:	31 e2       	ldi	r19, 0x21	; 33
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
    2286:	31 83       	std	Z+1, r19	; 0x01
    2288:	08 95       	ret

0000228a <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    228a:	08 95       	ret

0000228c <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    228c:	1f 92       	push	r1
    228e:	0f 92       	push	r0
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	0f 92       	push	r0
    2294:	11 24       	eor	r1, r1
    2296:	0b b6       	in	r0, 0x3b	; 59
    2298:	0f 92       	push	r0
    229a:	2f 93       	push	r18
    229c:	3f 93       	push	r19
    229e:	4f 93       	push	r20
    22a0:	5f 93       	push	r21
    22a2:	6f 93       	push	r22
    22a4:	7f 93       	push	r23
    22a6:	8f 93       	push	r24
    22a8:	9f 93       	push	r25
    22aa:	af 93       	push	r26
    22ac:	bf 93       	push	r27
    22ae:	ef 93       	push	r30
    22b0:	ff 93       	push	r31
    22b2:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <InterruptFuncTable+0x2>
    22b6:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <InterruptFuncTable+0x3>
    22ba:	30 97       	sbiw	r30, 0x00	; 0
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <__vector_1+0x3c>
    22be:	80 91 aa 23 	lds	r24, 0x23AA	; 0x8023aa <InterruptSenderTable+0x2>
    22c2:	90 91 ab 23 	lds	r25, 0x23AB	; 0x8023ab <InterruptSenderTable+0x3>
    22c6:	19 95       	eicall
    22c8:	ff 91       	pop	r31
    22ca:	ef 91       	pop	r30
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	0f 90       	pop	r0
    22e2:	0b be       	out	0x3b, r0	; 59
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    22ee:	1f 92       	push	r1
    22f0:	0f 92       	push	r0
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	0f 92       	push	r0
    22f6:	11 24       	eor	r1, r1
    22f8:	0b b6       	in	r0, 0x3b	; 59
    22fa:	0f 92       	push	r0
    22fc:	2f 93       	push	r18
    22fe:	3f 93       	push	r19
    2300:	4f 93       	push	r20
    2302:	5f 93       	push	r21
    2304:	6f 93       	push	r22
    2306:	7f 93       	push	r23
    2308:	8f 93       	push	r24
    230a:	9f 93       	push	r25
    230c:	af 93       	push	r26
    230e:	bf 93       	push	r27
    2310:	ef 93       	push	r30
    2312:	ff 93       	push	r31
    2314:	e0 91 b6 22 	lds	r30, 0x22B6	; 0x8022b6 <InterruptFuncTable+0x4>
    2318:	f0 91 b7 22 	lds	r31, 0x22B7	; 0x8022b7 <InterruptFuncTable+0x5>
    231c:	30 97       	sbiw	r30, 0x00	; 0
    231e:	29 f0       	breq	.+10     	; 0x232a <__vector_2+0x3c>
    2320:	80 91 ac 23 	lds	r24, 0x23AC	; 0x8023ac <InterruptSenderTable+0x4>
    2324:	90 91 ad 23 	lds	r25, 0x23AD	; 0x8023ad <InterruptSenderTable+0x5>
    2328:	19 95       	eicall
    232a:	ff 91       	pop	r31
    232c:	ef 91       	pop	r30
    232e:	bf 91       	pop	r27
    2330:	af 91       	pop	r26
    2332:	9f 91       	pop	r25
    2334:	8f 91       	pop	r24
    2336:	7f 91       	pop	r23
    2338:	6f 91       	pop	r22
    233a:	5f 91       	pop	r21
    233c:	4f 91       	pop	r20
    233e:	3f 91       	pop	r19
    2340:	2f 91       	pop	r18
    2342:	0f 90       	pop	r0
    2344:	0b be       	out	0x3b, r0	; 59
    2346:	0f 90       	pop	r0
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	0f 90       	pop	r0
    234c:	1f 90       	pop	r1
    234e:	18 95       	reti

00002350 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    2350:	1f 92       	push	r1
    2352:	0f 92       	push	r0
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	0f 92       	push	r0
    2358:	11 24       	eor	r1, r1
    235a:	0b b6       	in	r0, 0x3b	; 59
    235c:	0f 92       	push	r0
    235e:	2f 93       	push	r18
    2360:	3f 93       	push	r19
    2362:	4f 93       	push	r20
    2364:	5f 93       	push	r21
    2366:	6f 93       	push	r22
    2368:	7f 93       	push	r23
    236a:	8f 93       	push	r24
    236c:	9f 93       	push	r25
    236e:	af 93       	push	r26
    2370:	bf 93       	push	r27
    2372:	ef 93       	push	r30
    2374:	ff 93       	push	r31
    2376:	e0 91 b8 22 	lds	r30, 0x22B8	; 0x8022b8 <InterruptFuncTable+0x6>
    237a:	f0 91 b9 22 	lds	r31, 0x22B9	; 0x8022b9 <InterruptFuncTable+0x7>
    237e:	30 97       	sbiw	r30, 0x00	; 0
    2380:	29 f0       	breq	.+10     	; 0x238c <__vector_3+0x3c>
    2382:	80 91 ae 23 	lds	r24, 0x23AE	; 0x8023ae <InterruptSenderTable+0x6>
    2386:	90 91 af 23 	lds	r25, 0x23AF	; 0x8023af <InterruptSenderTable+0x7>
    238a:	19 95       	eicall
    238c:	ff 91       	pop	r31
    238e:	ef 91       	pop	r30
    2390:	bf 91       	pop	r27
    2392:	af 91       	pop	r26
    2394:	9f 91       	pop	r25
    2396:	8f 91       	pop	r24
    2398:	7f 91       	pop	r23
    239a:	6f 91       	pop	r22
    239c:	5f 91       	pop	r21
    239e:	4f 91       	pop	r20
    23a0:	3f 91       	pop	r19
    23a2:	2f 91       	pop	r18
    23a4:	0f 90       	pop	r0
    23a6:	0b be       	out	0x3b, r0	; 59
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	0b b6       	in	r0, 0x3b	; 59
    23be:	0f 92       	push	r0
    23c0:	2f 93       	push	r18
    23c2:	3f 93       	push	r19
    23c4:	4f 93       	push	r20
    23c6:	5f 93       	push	r21
    23c8:	6f 93       	push	r22
    23ca:	7f 93       	push	r23
    23cc:	8f 93       	push	r24
    23ce:	9f 93       	push	r25
    23d0:	af 93       	push	r26
    23d2:	bf 93       	push	r27
    23d4:	ef 93       	push	r30
    23d6:	ff 93       	push	r31
    23d8:	e0 91 ba 22 	lds	r30, 0x22BA	; 0x8022ba <InterruptFuncTable+0x8>
    23dc:	f0 91 bb 22 	lds	r31, 0x22BB	; 0x8022bb <InterruptFuncTable+0x9>
    23e0:	30 97       	sbiw	r30, 0x00	; 0
    23e2:	29 f0       	breq	.+10     	; 0x23ee <__vector_4+0x3c>
    23e4:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <InterruptSenderTable+0x8>
    23e8:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <InterruptSenderTable+0x9>
    23ec:	19 95       	eicall
    23ee:	ff 91       	pop	r31
    23f0:	ef 91       	pop	r30
    23f2:	bf 91       	pop	r27
    23f4:	af 91       	pop	r26
    23f6:	9f 91       	pop	r25
    23f8:	8f 91       	pop	r24
    23fa:	7f 91       	pop	r23
    23fc:	6f 91       	pop	r22
    23fe:	5f 91       	pop	r21
    2400:	4f 91       	pop	r20
    2402:	3f 91       	pop	r19
    2404:	2f 91       	pop	r18
    2406:	0f 90       	pop	r0
    2408:	0b be       	out	0x3b, r0	; 59
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2414:	1f 92       	push	r1
    2416:	0f 92       	push	r0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	0f 92       	push	r0
    241c:	11 24       	eor	r1, r1
    241e:	0b b6       	in	r0, 0x3b	; 59
    2420:	0f 92       	push	r0
    2422:	2f 93       	push	r18
    2424:	3f 93       	push	r19
    2426:	4f 93       	push	r20
    2428:	5f 93       	push	r21
    242a:	6f 93       	push	r22
    242c:	7f 93       	push	r23
    242e:	8f 93       	push	r24
    2430:	9f 93       	push	r25
    2432:	af 93       	push	r26
    2434:	bf 93       	push	r27
    2436:	ef 93       	push	r30
    2438:	ff 93       	push	r31
    243a:	e0 91 bc 22 	lds	r30, 0x22BC	; 0x8022bc <InterruptFuncTable+0xa>
    243e:	f0 91 bd 22 	lds	r31, 0x22BD	; 0x8022bd <InterruptFuncTable+0xb>
    2442:	30 97       	sbiw	r30, 0x00	; 0
    2444:	29 f0       	breq	.+10     	; 0x2450 <__vector_5+0x3c>
    2446:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <InterruptSenderTable+0xa>
    244a:	90 91 b3 23 	lds	r25, 0x23B3	; 0x8023b3 <InterruptSenderTable+0xb>
    244e:	19 95       	eicall
    2450:	ff 91       	pop	r31
    2452:	ef 91       	pop	r30
    2454:	bf 91       	pop	r27
    2456:	af 91       	pop	r26
    2458:	9f 91       	pop	r25
    245a:	8f 91       	pop	r24
    245c:	7f 91       	pop	r23
    245e:	6f 91       	pop	r22
    2460:	5f 91       	pop	r21
    2462:	4f 91       	pop	r20
    2464:	3f 91       	pop	r19
    2466:	2f 91       	pop	r18
    2468:	0f 90       	pop	r0
    246a:	0b be       	out	0x3b, r0	; 59
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	0f 90       	pop	r0
    2472:	1f 90       	pop	r1
    2474:	18 95       	reti

00002476 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    2476:	1f 92       	push	r1
    2478:	0f 92       	push	r0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	0f 92       	push	r0
    247e:	11 24       	eor	r1, r1
    2480:	0b b6       	in	r0, 0x3b	; 59
    2482:	0f 92       	push	r0
    2484:	2f 93       	push	r18
    2486:	3f 93       	push	r19
    2488:	4f 93       	push	r20
    248a:	5f 93       	push	r21
    248c:	6f 93       	push	r22
    248e:	7f 93       	push	r23
    2490:	8f 93       	push	r24
    2492:	9f 93       	push	r25
    2494:	af 93       	push	r26
    2496:	bf 93       	push	r27
    2498:	ef 93       	push	r30
    249a:	ff 93       	push	r31
    249c:	e0 91 be 22 	lds	r30, 0x22BE	; 0x8022be <InterruptFuncTable+0xc>
    24a0:	f0 91 bf 22 	lds	r31, 0x22BF	; 0x8022bf <InterruptFuncTable+0xd>
    24a4:	30 97       	sbiw	r30, 0x00	; 0
    24a6:	29 f0       	breq	.+10     	; 0x24b2 <__vector_6+0x3c>
    24a8:	80 91 b4 23 	lds	r24, 0x23B4	; 0x8023b4 <InterruptSenderTable+0xc>
    24ac:	90 91 b5 23 	lds	r25, 0x23B5	; 0x8023b5 <InterruptSenderTable+0xd>
    24b0:	19 95       	eicall
    24b2:	ff 91       	pop	r31
    24b4:	ef 91       	pop	r30
    24b6:	bf 91       	pop	r27
    24b8:	af 91       	pop	r26
    24ba:	9f 91       	pop	r25
    24bc:	8f 91       	pop	r24
    24be:	7f 91       	pop	r23
    24c0:	6f 91       	pop	r22
    24c2:	5f 91       	pop	r21
    24c4:	4f 91       	pop	r20
    24c6:	3f 91       	pop	r19
    24c8:	2f 91       	pop	r18
    24ca:	0f 90       	pop	r0
    24cc:	0b be       	out	0x3b, r0	; 59
    24ce:	0f 90       	pop	r0
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	0f 90       	pop	r0
    24d4:	1f 90       	pop	r1
    24d6:	18 95       	reti

000024d8 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    24d8:	1f 92       	push	r1
    24da:	0f 92       	push	r0
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	0f 92       	push	r0
    24e0:	11 24       	eor	r1, r1
    24e2:	0b b6       	in	r0, 0x3b	; 59
    24e4:	0f 92       	push	r0
    24e6:	2f 93       	push	r18
    24e8:	3f 93       	push	r19
    24ea:	4f 93       	push	r20
    24ec:	5f 93       	push	r21
    24ee:	6f 93       	push	r22
    24f0:	7f 93       	push	r23
    24f2:	8f 93       	push	r24
    24f4:	9f 93       	push	r25
    24f6:	af 93       	push	r26
    24f8:	bf 93       	push	r27
    24fa:	ef 93       	push	r30
    24fc:	ff 93       	push	r31
    24fe:	e0 91 c0 22 	lds	r30, 0x22C0	; 0x8022c0 <InterruptFuncTable+0xe>
    2502:	f0 91 c1 22 	lds	r31, 0x22C1	; 0x8022c1 <InterruptFuncTable+0xf>
    2506:	30 97       	sbiw	r30, 0x00	; 0
    2508:	29 f0       	breq	.+10     	; 0x2514 <__vector_7+0x3c>
    250a:	80 91 b6 23 	lds	r24, 0x23B6	; 0x8023b6 <InterruptSenderTable+0xe>
    250e:	90 91 b7 23 	lds	r25, 0x23B7	; 0x8023b7 <InterruptSenderTable+0xf>
    2512:	19 95       	eicall
    2514:	ff 91       	pop	r31
    2516:	ef 91       	pop	r30
    2518:	bf 91       	pop	r27
    251a:	af 91       	pop	r26
    251c:	9f 91       	pop	r25
    251e:	8f 91       	pop	r24
    2520:	7f 91       	pop	r23
    2522:	6f 91       	pop	r22
    2524:	5f 91       	pop	r21
    2526:	4f 91       	pop	r20
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	0b be       	out	0x3b, r0	; 59
    2530:	0f 90       	pop	r0
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	0f 90       	pop	r0
    2536:	1f 90       	pop	r1
    2538:	18 95       	reti

0000253a <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	0b b6       	in	r0, 0x3b	; 59
    2546:	0f 92       	push	r0
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	5f 93       	push	r21
    2550:	6f 93       	push	r22
    2552:	7f 93       	push	r23
    2554:	8f 93       	push	r24
    2556:	9f 93       	push	r25
    2558:	af 93       	push	r26
    255a:	bf 93       	push	r27
    255c:	ef 93       	push	r30
    255e:	ff 93       	push	r31
    2560:	e0 91 c2 22 	lds	r30, 0x22C2	; 0x8022c2 <InterruptFuncTable+0x10>
    2564:	f0 91 c3 22 	lds	r31, 0x22C3	; 0x8022c3 <InterruptFuncTable+0x11>
    2568:	30 97       	sbiw	r30, 0x00	; 0
    256a:	29 f0       	breq	.+10     	; 0x2576 <__vector_8+0x3c>
    256c:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <InterruptSenderTable+0x10>
    2570:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <InterruptSenderTable+0x11>
    2574:	19 95       	eicall
    2576:	ff 91       	pop	r31
    2578:	ef 91       	pop	r30
    257a:	bf 91       	pop	r27
    257c:	af 91       	pop	r26
    257e:	9f 91       	pop	r25
    2580:	8f 91       	pop	r24
    2582:	7f 91       	pop	r23
    2584:	6f 91       	pop	r22
    2586:	5f 91       	pop	r21
    2588:	4f 91       	pop	r20
    258a:	3f 91       	pop	r19
    258c:	2f 91       	pop	r18
    258e:	0f 90       	pop	r0
    2590:	0b be       	out	0x3b, r0	; 59
    2592:	0f 90       	pop	r0
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	0f 90       	pop	r0
    2598:	1f 90       	pop	r1
    259a:	18 95       	reti

0000259c <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    259c:	1f 92       	push	r1
    259e:	0f 92       	push	r0
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	0b b6       	in	r0, 0x3b	; 59
    25a8:	0f 92       	push	r0
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
    25c2:	e0 91 c4 22 	lds	r30, 0x22C4	; 0x8022c4 <InterruptFuncTable+0x12>
    25c6:	f0 91 c5 22 	lds	r31, 0x22C5	; 0x8022c5 <InterruptFuncTable+0x13>
    25ca:	30 97       	sbiw	r30, 0x00	; 0
    25cc:	29 f0       	breq	.+10     	; 0x25d8 <__vector_9+0x3c>
    25ce:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <InterruptSenderTable+0x12>
    25d2:	90 91 bb 23 	lds	r25, 0x23BB	; 0x8023bb <InterruptSenderTable+0x13>
    25d6:	19 95       	eicall
    25d8:	ff 91       	pop	r31
    25da:	ef 91       	pop	r30
    25dc:	bf 91       	pop	r27
    25de:	af 91       	pop	r26
    25e0:	9f 91       	pop	r25
    25e2:	8f 91       	pop	r24
    25e4:	7f 91       	pop	r23
    25e6:	6f 91       	pop	r22
    25e8:	5f 91       	pop	r21
    25ea:	4f 91       	pop	r20
    25ec:	3f 91       	pop	r19
    25ee:	2f 91       	pop	r18
    25f0:	0f 90       	pop	r0
    25f2:	0b be       	out	0x3b, r0	; 59
    25f4:	0f 90       	pop	r0
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	0f 90       	pop	r0
    25fa:	1f 90       	pop	r1
    25fc:	18 95       	reti

000025fe <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    25fe:	1f 92       	push	r1
    2600:	0f 92       	push	r0
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	0f 92       	push	r0
    2606:	11 24       	eor	r1, r1
    2608:	0b b6       	in	r0, 0x3b	; 59
    260a:	0f 92       	push	r0
    260c:	2f 93       	push	r18
    260e:	3f 93       	push	r19
    2610:	4f 93       	push	r20
    2612:	5f 93       	push	r21
    2614:	6f 93       	push	r22
    2616:	7f 93       	push	r23
    2618:	8f 93       	push	r24
    261a:	9f 93       	push	r25
    261c:	af 93       	push	r26
    261e:	bf 93       	push	r27
    2620:	ef 93       	push	r30
    2622:	ff 93       	push	r31
    2624:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <InterruptFuncTable+0x14>
    2628:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <InterruptFuncTable+0x15>
    262c:	30 97       	sbiw	r30, 0x00	; 0
    262e:	29 f0       	breq	.+10     	; 0x263a <__vector_10+0x3c>
    2630:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <InterruptSenderTable+0x14>
    2634:	90 91 bd 23 	lds	r25, 0x23BD	; 0x8023bd <InterruptSenderTable+0x15>
    2638:	19 95       	eicall
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	bf 91       	pop	r27
    2640:	af 91       	pop	r26
    2642:	9f 91       	pop	r25
    2644:	8f 91       	pop	r24
    2646:	7f 91       	pop	r23
    2648:	6f 91       	pop	r22
    264a:	5f 91       	pop	r21
    264c:	4f 91       	pop	r20
    264e:	3f 91       	pop	r19
    2650:	2f 91       	pop	r18
    2652:	0f 90       	pop	r0
    2654:	0b be       	out	0x3b, r0	; 59
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2660:	1f 92       	push	r1
    2662:	0f 92       	push	r0
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	0f 92       	push	r0
    2668:	11 24       	eor	r1, r1
    266a:	0b b6       	in	r0, 0x3b	; 59
    266c:	0f 92       	push	r0
    266e:	2f 93       	push	r18
    2670:	3f 93       	push	r19
    2672:	4f 93       	push	r20
    2674:	5f 93       	push	r21
    2676:	6f 93       	push	r22
    2678:	7f 93       	push	r23
    267a:	8f 93       	push	r24
    267c:	9f 93       	push	r25
    267e:	af 93       	push	r26
    2680:	bf 93       	push	r27
    2682:	ef 93       	push	r30
    2684:	ff 93       	push	r31
    2686:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <InterruptFuncTable+0x16>
    268a:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <InterruptFuncTable+0x17>
    268e:	30 97       	sbiw	r30, 0x00	; 0
    2690:	29 f0       	breq	.+10     	; 0x269c <__vector_11+0x3c>
    2692:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <InterruptSenderTable+0x16>
    2696:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <InterruptSenderTable+0x17>
    269a:	19 95       	eicall
    269c:	ff 91       	pop	r31
    269e:	ef 91       	pop	r30
    26a0:	bf 91       	pop	r27
    26a2:	af 91       	pop	r26
    26a4:	9f 91       	pop	r25
    26a6:	8f 91       	pop	r24
    26a8:	7f 91       	pop	r23
    26aa:	6f 91       	pop	r22
    26ac:	5f 91       	pop	r21
    26ae:	4f 91       	pop	r20
    26b0:	3f 91       	pop	r19
    26b2:	2f 91       	pop	r18
    26b4:	0f 90       	pop	r0
    26b6:	0b be       	out	0x3b, r0	; 59
    26b8:	0f 90       	pop	r0
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	0f 90       	pop	r0
    26be:	1f 90       	pop	r1
    26c0:	18 95       	reti

000026c2 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    26c2:	1f 92       	push	r1
    26c4:	0f 92       	push	r0
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	0f 92       	push	r0
    26ca:	11 24       	eor	r1, r1
    26cc:	0b b6       	in	r0, 0x3b	; 59
    26ce:	0f 92       	push	r0
    26d0:	2f 93       	push	r18
    26d2:	3f 93       	push	r19
    26d4:	4f 93       	push	r20
    26d6:	5f 93       	push	r21
    26d8:	6f 93       	push	r22
    26da:	7f 93       	push	r23
    26dc:	8f 93       	push	r24
    26de:	9f 93       	push	r25
    26e0:	af 93       	push	r26
    26e2:	bf 93       	push	r27
    26e4:	ef 93       	push	r30
    26e6:	ff 93       	push	r31
    26e8:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <InterruptFuncTable+0x18>
    26ec:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <InterruptFuncTable+0x19>
    26f0:	30 97       	sbiw	r30, 0x00	; 0
    26f2:	29 f0       	breq	.+10     	; 0x26fe <__vector_12+0x3c>
    26f4:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <InterruptSenderTable+0x18>
    26f8:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <InterruptSenderTable+0x19>
    26fc:	19 95       	eicall
    26fe:	ff 91       	pop	r31
    2700:	ef 91       	pop	r30
    2702:	bf 91       	pop	r27
    2704:	af 91       	pop	r26
    2706:	9f 91       	pop	r25
    2708:	8f 91       	pop	r24
    270a:	7f 91       	pop	r23
    270c:	6f 91       	pop	r22
    270e:	5f 91       	pop	r21
    2710:	4f 91       	pop	r20
    2712:	3f 91       	pop	r19
    2714:	2f 91       	pop	r18
    2716:	0f 90       	pop	r0
    2718:	0b be       	out	0x3b, r0	; 59
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti

00002724 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2724:	1f 92       	push	r1
    2726:	0f 92       	push	r0
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	0f 92       	push	r0
    272c:	11 24       	eor	r1, r1
    272e:	0b b6       	in	r0, 0x3b	; 59
    2730:	0f 92       	push	r0
    2732:	2f 93       	push	r18
    2734:	3f 93       	push	r19
    2736:	4f 93       	push	r20
    2738:	5f 93       	push	r21
    273a:	6f 93       	push	r22
    273c:	7f 93       	push	r23
    273e:	8f 93       	push	r24
    2740:	9f 93       	push	r25
    2742:	af 93       	push	r26
    2744:	bf 93       	push	r27
    2746:	ef 93       	push	r30
    2748:	ff 93       	push	r31
    274a:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <InterruptFuncTable+0x1a>
    274e:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <InterruptFuncTable+0x1b>
    2752:	30 97       	sbiw	r30, 0x00	; 0
    2754:	29 f0       	breq	.+10     	; 0x2760 <__vector_13+0x3c>
    2756:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <InterruptSenderTable+0x1a>
    275a:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <InterruptSenderTable+0x1b>
    275e:	19 95       	eicall
    2760:	ff 91       	pop	r31
    2762:	ef 91       	pop	r30
    2764:	bf 91       	pop	r27
    2766:	af 91       	pop	r26
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	7f 91       	pop	r23
    276e:	6f 91       	pop	r22
    2770:	5f 91       	pop	r21
    2772:	4f 91       	pop	r20
    2774:	3f 91       	pop	r19
    2776:	2f 91       	pop	r18
    2778:	0f 90       	pop	r0
    277a:	0b be       	out	0x3b, r0	; 59
    277c:	0f 90       	pop	r0
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	0f 90       	pop	r0
    2782:	1f 90       	pop	r1
    2784:	18 95       	reti

00002786 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	0f 92       	push	r0
    278e:	11 24       	eor	r1, r1
    2790:	0b b6       	in	r0, 0x3b	; 59
    2792:	0f 92       	push	r0
    2794:	2f 93       	push	r18
    2796:	3f 93       	push	r19
    2798:	4f 93       	push	r20
    279a:	5f 93       	push	r21
    279c:	6f 93       	push	r22
    279e:	7f 93       	push	r23
    27a0:	8f 93       	push	r24
    27a2:	9f 93       	push	r25
    27a4:	af 93       	push	r26
    27a6:	bf 93       	push	r27
    27a8:	ef 93       	push	r30
    27aa:	ff 93       	push	r31
    27ac:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <InterruptFuncTable+0x1c>
    27b0:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <InterruptFuncTable+0x1d>
    27b4:	30 97       	sbiw	r30, 0x00	; 0
    27b6:	29 f0       	breq	.+10     	; 0x27c2 <__vector_14+0x3c>
    27b8:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <InterruptSenderTable+0x1c>
    27bc:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <InterruptSenderTable+0x1d>
    27c0:	19 95       	eicall
    27c2:	ff 91       	pop	r31
    27c4:	ef 91       	pop	r30
    27c6:	bf 91       	pop	r27
    27c8:	af 91       	pop	r26
    27ca:	9f 91       	pop	r25
    27cc:	8f 91       	pop	r24
    27ce:	7f 91       	pop	r23
    27d0:	6f 91       	pop	r22
    27d2:	5f 91       	pop	r21
    27d4:	4f 91       	pop	r20
    27d6:	3f 91       	pop	r19
    27d8:	2f 91       	pop	r18
    27da:	0f 90       	pop	r0
    27dc:	0b be       	out	0x3b, r0	; 59
    27de:	0f 90       	pop	r0
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	0f 90       	pop	r0
    27e4:	1f 90       	pop	r1
    27e6:	18 95       	reti

000027e8 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    27e8:	1f 92       	push	r1
    27ea:	0f 92       	push	r0
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	0f 92       	push	r0
    27f0:	11 24       	eor	r1, r1
    27f2:	0b b6       	in	r0, 0x3b	; 59
    27f4:	0f 92       	push	r0
    27f6:	2f 93       	push	r18
    27f8:	3f 93       	push	r19
    27fa:	4f 93       	push	r20
    27fc:	5f 93       	push	r21
    27fe:	6f 93       	push	r22
    2800:	7f 93       	push	r23
    2802:	8f 93       	push	r24
    2804:	9f 93       	push	r25
    2806:	af 93       	push	r26
    2808:	bf 93       	push	r27
    280a:	ef 93       	push	r30
    280c:	ff 93       	push	r31
    280e:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <InterruptFuncTable+0x1e>
    2812:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <InterruptFuncTable+0x1f>
    2816:	30 97       	sbiw	r30, 0x00	; 0
    2818:	29 f0       	breq	.+10     	; 0x2824 <__vector_15+0x3c>
    281a:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <InterruptSenderTable+0x1e>
    281e:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <InterruptSenderTable+0x1f>
    2822:	19 95       	eicall
    2824:	ff 91       	pop	r31
    2826:	ef 91       	pop	r30
    2828:	bf 91       	pop	r27
    282a:	af 91       	pop	r26
    282c:	9f 91       	pop	r25
    282e:	8f 91       	pop	r24
    2830:	7f 91       	pop	r23
    2832:	6f 91       	pop	r22
    2834:	5f 91       	pop	r21
    2836:	4f 91       	pop	r20
    2838:	3f 91       	pop	r19
    283a:	2f 91       	pop	r18
    283c:	0f 90       	pop	r0
    283e:	0b be       	out	0x3b, r0	; 59
    2840:	0f 90       	pop	r0
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	0f 90       	pop	r0
    2846:	1f 90       	pop	r1
    2848:	18 95       	reti

0000284a <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    284a:	1f 92       	push	r1
    284c:	0f 92       	push	r0
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	0f 92       	push	r0
    2852:	11 24       	eor	r1, r1
    2854:	0b b6       	in	r0, 0x3b	; 59
    2856:	0f 92       	push	r0
    2858:	2f 93       	push	r18
    285a:	3f 93       	push	r19
    285c:	4f 93       	push	r20
    285e:	5f 93       	push	r21
    2860:	6f 93       	push	r22
    2862:	7f 93       	push	r23
    2864:	8f 93       	push	r24
    2866:	9f 93       	push	r25
    2868:	af 93       	push	r26
    286a:	bf 93       	push	r27
    286c:	ef 93       	push	r30
    286e:	ff 93       	push	r31
    2870:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <InterruptFuncTable+0x20>
    2874:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <InterruptFuncTable+0x21>
    2878:	30 97       	sbiw	r30, 0x00	; 0
    287a:	29 f0       	breq	.+10     	; 0x2886 <__vector_16+0x3c>
    287c:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <InterruptSenderTable+0x20>
    2880:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <InterruptSenderTable+0x21>
    2884:	19 95       	eicall
    2886:	ff 91       	pop	r31
    2888:	ef 91       	pop	r30
    288a:	bf 91       	pop	r27
    288c:	af 91       	pop	r26
    288e:	9f 91       	pop	r25
    2890:	8f 91       	pop	r24
    2892:	7f 91       	pop	r23
    2894:	6f 91       	pop	r22
    2896:	5f 91       	pop	r21
    2898:	4f 91       	pop	r20
    289a:	3f 91       	pop	r19
    289c:	2f 91       	pop	r18
    289e:	0f 90       	pop	r0
    28a0:	0b be       	out	0x3b, r0	; 59
    28a2:	0f 90       	pop	r0
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	0f 90       	pop	r0
    28a8:	1f 90       	pop	r1
    28aa:	18 95       	reti

000028ac <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	0b b6       	in	r0, 0x3b	; 59
    28b8:	0f 92       	push	r0
    28ba:	2f 93       	push	r18
    28bc:	3f 93       	push	r19
    28be:	4f 93       	push	r20
    28c0:	5f 93       	push	r21
    28c2:	6f 93       	push	r22
    28c4:	7f 93       	push	r23
    28c6:	8f 93       	push	r24
    28c8:	9f 93       	push	r25
    28ca:	af 93       	push	r26
    28cc:	bf 93       	push	r27
    28ce:	ef 93       	push	r30
    28d0:	ff 93       	push	r31
    28d2:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <InterruptFuncTable+0x22>
    28d6:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <InterruptFuncTable+0x23>
    28da:	30 97       	sbiw	r30, 0x00	; 0
    28dc:	29 f0       	breq	.+10     	; 0x28e8 <__vector_17+0x3c>
    28de:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <InterruptSenderTable+0x22>
    28e2:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <InterruptSenderTable+0x23>
    28e6:	19 95       	eicall
    28e8:	ff 91       	pop	r31
    28ea:	ef 91       	pop	r30
    28ec:	bf 91       	pop	r27
    28ee:	af 91       	pop	r26
    28f0:	9f 91       	pop	r25
    28f2:	8f 91       	pop	r24
    28f4:	7f 91       	pop	r23
    28f6:	6f 91       	pop	r22
    28f8:	5f 91       	pop	r21
    28fa:	4f 91       	pop	r20
    28fc:	3f 91       	pop	r19
    28fe:	2f 91       	pop	r18
    2900:	0f 90       	pop	r0
    2902:	0b be       	out	0x3b, r0	; 59
    2904:	0f 90       	pop	r0
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	0f 90       	pop	r0
    290a:	1f 90       	pop	r1
    290c:	18 95       	reti

0000290e <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    290e:	1f 92       	push	r1
    2910:	0f 92       	push	r0
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	0f 92       	push	r0
    2916:	11 24       	eor	r1, r1
    2918:	0b b6       	in	r0, 0x3b	; 59
    291a:	0f 92       	push	r0
    291c:	2f 93       	push	r18
    291e:	3f 93       	push	r19
    2920:	4f 93       	push	r20
    2922:	5f 93       	push	r21
    2924:	6f 93       	push	r22
    2926:	7f 93       	push	r23
    2928:	8f 93       	push	r24
    292a:	9f 93       	push	r25
    292c:	af 93       	push	r26
    292e:	bf 93       	push	r27
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <InterruptFuncTable+0x24>
    2938:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <InterruptFuncTable+0x25>
    293c:	30 97       	sbiw	r30, 0x00	; 0
    293e:	29 f0       	breq	.+10     	; 0x294a <__vector_18+0x3c>
    2940:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <InterruptSenderTable+0x24>
    2944:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <InterruptSenderTable+0x25>
    2948:	19 95       	eicall
    294a:	ff 91       	pop	r31
    294c:	ef 91       	pop	r30
    294e:	bf 91       	pop	r27
    2950:	af 91       	pop	r26
    2952:	9f 91       	pop	r25
    2954:	8f 91       	pop	r24
    2956:	7f 91       	pop	r23
    2958:	6f 91       	pop	r22
    295a:	5f 91       	pop	r21
    295c:	4f 91       	pop	r20
    295e:	3f 91       	pop	r19
    2960:	2f 91       	pop	r18
    2962:	0f 90       	pop	r0
    2964:	0b be       	out	0x3b, r0	; 59
    2966:	0f 90       	pop	r0
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	0f 90       	pop	r0
    296c:	1f 90       	pop	r1
    296e:	18 95       	reti

00002970 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2970:	1f 92       	push	r1
    2972:	0f 92       	push	r0
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	0f 92       	push	r0
    2978:	11 24       	eor	r1, r1
    297a:	0b b6       	in	r0, 0x3b	; 59
    297c:	0f 92       	push	r0
    297e:	2f 93       	push	r18
    2980:	3f 93       	push	r19
    2982:	4f 93       	push	r20
    2984:	5f 93       	push	r21
    2986:	6f 93       	push	r22
    2988:	7f 93       	push	r23
    298a:	8f 93       	push	r24
    298c:	9f 93       	push	r25
    298e:	af 93       	push	r26
    2990:	bf 93       	push	r27
    2992:	ef 93       	push	r30
    2994:	ff 93       	push	r31
    2996:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <InterruptFuncTable+0x26>
    299a:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <InterruptFuncTable+0x27>
    299e:	30 97       	sbiw	r30, 0x00	; 0
    29a0:	29 f0       	breq	.+10     	; 0x29ac <__vector_19+0x3c>
    29a2:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <InterruptSenderTable+0x26>
    29a6:	90 91 cf 23 	lds	r25, 0x23CF	; 0x8023cf <InterruptSenderTable+0x27>
    29aa:	19 95       	eicall
    29ac:	ff 91       	pop	r31
    29ae:	ef 91       	pop	r30
    29b0:	bf 91       	pop	r27
    29b2:	af 91       	pop	r26
    29b4:	9f 91       	pop	r25
    29b6:	8f 91       	pop	r24
    29b8:	7f 91       	pop	r23
    29ba:	6f 91       	pop	r22
    29bc:	5f 91       	pop	r21
    29be:	4f 91       	pop	r20
    29c0:	3f 91       	pop	r19
    29c2:	2f 91       	pop	r18
    29c4:	0f 90       	pop	r0
    29c6:	0b be       	out	0x3b, r0	; 59
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	0f 90       	pop	r0
    29ce:	1f 90       	pop	r1
    29d0:	18 95       	reti

000029d2 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	0b b6       	in	r0, 0x3b	; 59
    29de:	0f 92       	push	r0
    29e0:	2f 93       	push	r18
    29e2:	3f 93       	push	r19
    29e4:	4f 93       	push	r20
    29e6:	5f 93       	push	r21
    29e8:	6f 93       	push	r22
    29ea:	7f 93       	push	r23
    29ec:	8f 93       	push	r24
    29ee:	9f 93       	push	r25
    29f0:	af 93       	push	r26
    29f2:	bf 93       	push	r27
    29f4:	ef 93       	push	r30
    29f6:	ff 93       	push	r31
    29f8:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <InterruptFuncTable+0x28>
    29fc:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <InterruptFuncTable+0x29>
    2a00:	30 97       	sbiw	r30, 0x00	; 0
    2a02:	29 f0       	breq	.+10     	; 0x2a0e <__vector_20+0x3c>
    2a04:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <InterruptSenderTable+0x28>
    2a08:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <InterruptSenderTable+0x29>
    2a0c:	19 95       	eicall
    2a0e:	ff 91       	pop	r31
    2a10:	ef 91       	pop	r30
    2a12:	bf 91       	pop	r27
    2a14:	af 91       	pop	r26
    2a16:	9f 91       	pop	r25
    2a18:	8f 91       	pop	r24
    2a1a:	7f 91       	pop	r23
    2a1c:	6f 91       	pop	r22
    2a1e:	5f 91       	pop	r21
    2a20:	4f 91       	pop	r20
    2a22:	3f 91       	pop	r19
    2a24:	2f 91       	pop	r18
    2a26:	0f 90       	pop	r0
    2a28:	0b be       	out	0x3b, r0	; 59
    2a2a:	0f 90       	pop	r0
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	0f 90       	pop	r0
    2a30:	1f 90       	pop	r1
    2a32:	18 95       	reti

00002a34 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2a34:	1f 92       	push	r1
    2a36:	0f 92       	push	r0
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	0f 92       	push	r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	0b b6       	in	r0, 0x3b	; 59
    2a40:	0f 92       	push	r0
    2a42:	2f 93       	push	r18
    2a44:	3f 93       	push	r19
    2a46:	4f 93       	push	r20
    2a48:	5f 93       	push	r21
    2a4a:	6f 93       	push	r22
    2a4c:	7f 93       	push	r23
    2a4e:	8f 93       	push	r24
    2a50:	9f 93       	push	r25
    2a52:	af 93       	push	r26
    2a54:	bf 93       	push	r27
    2a56:	ef 93       	push	r30
    2a58:	ff 93       	push	r31
    2a5a:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <InterruptFuncTable+0x2a>
    2a5e:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <InterruptFuncTable+0x2b>
    2a62:	30 97       	sbiw	r30, 0x00	; 0
    2a64:	29 f0       	breq	.+10     	; 0x2a70 <__vector_21+0x3c>
    2a66:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <InterruptSenderTable+0x2a>
    2a6a:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <InterruptSenderTable+0x2b>
    2a6e:	19 95       	eicall
    2a70:	ff 91       	pop	r31
    2a72:	ef 91       	pop	r30
    2a74:	bf 91       	pop	r27
    2a76:	af 91       	pop	r26
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	7f 91       	pop	r23
    2a7e:	6f 91       	pop	r22
    2a80:	5f 91       	pop	r21
    2a82:	4f 91       	pop	r20
    2a84:	3f 91       	pop	r19
    2a86:	2f 91       	pop	r18
    2a88:	0f 90       	pop	r0
    2a8a:	0b be       	out	0x3b, r0	; 59
    2a8c:	0f 90       	pop	r0
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	0f 90       	pop	r0
    2a92:	1f 90       	pop	r1
    2a94:	18 95       	reti

00002a96 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2a96:	1f 92       	push	r1
    2a98:	0f 92       	push	r0
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	0f 92       	push	r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	0b b6       	in	r0, 0x3b	; 59
    2aa2:	0f 92       	push	r0
    2aa4:	2f 93       	push	r18
    2aa6:	3f 93       	push	r19
    2aa8:	4f 93       	push	r20
    2aaa:	5f 93       	push	r21
    2aac:	6f 93       	push	r22
    2aae:	7f 93       	push	r23
    2ab0:	8f 93       	push	r24
    2ab2:	9f 93       	push	r25
    2ab4:	af 93       	push	r26
    2ab6:	bf 93       	push	r27
    2ab8:	ef 93       	push	r30
    2aba:	ff 93       	push	r31
    2abc:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <InterruptFuncTable+0x2c>
    2ac0:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <InterruptFuncTable+0x2d>
    2ac4:	30 97       	sbiw	r30, 0x00	; 0
    2ac6:	29 f0       	breq	.+10     	; 0x2ad2 <__vector_22+0x3c>
    2ac8:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <InterruptSenderTable+0x2c>
    2acc:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <InterruptSenderTable+0x2d>
    2ad0:	19 95       	eicall
    2ad2:	ff 91       	pop	r31
    2ad4:	ef 91       	pop	r30
    2ad6:	bf 91       	pop	r27
    2ad8:	af 91       	pop	r26
    2ada:	9f 91       	pop	r25
    2adc:	8f 91       	pop	r24
    2ade:	7f 91       	pop	r23
    2ae0:	6f 91       	pop	r22
    2ae2:	5f 91       	pop	r21
    2ae4:	4f 91       	pop	r20
    2ae6:	3f 91       	pop	r19
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0b be       	out	0x3b, r0	; 59
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	0f 90       	pop	r0
    2af4:	1f 90       	pop	r1
    2af6:	18 95       	reti

00002af8 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2af8:	1f 92       	push	r1
    2afa:	0f 92       	push	r0
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	0f 92       	push	r0
    2b00:	11 24       	eor	r1, r1
    2b02:	0b b6       	in	r0, 0x3b	; 59
    2b04:	0f 92       	push	r0
    2b06:	2f 93       	push	r18
    2b08:	3f 93       	push	r19
    2b0a:	4f 93       	push	r20
    2b0c:	5f 93       	push	r21
    2b0e:	6f 93       	push	r22
    2b10:	7f 93       	push	r23
    2b12:	8f 93       	push	r24
    2b14:	9f 93       	push	r25
    2b16:	af 93       	push	r26
    2b18:	bf 93       	push	r27
    2b1a:	ef 93       	push	r30
    2b1c:	ff 93       	push	r31
    2b1e:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <InterruptFuncTable+0x2e>
    2b22:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <InterruptFuncTable+0x2f>
    2b26:	30 97       	sbiw	r30, 0x00	; 0
    2b28:	29 f0       	breq	.+10     	; 0x2b34 <__vector_23+0x3c>
    2b2a:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <InterruptSenderTable+0x2e>
    2b2e:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <InterruptSenderTable+0x2f>
    2b32:	19 95       	eicall
    2b34:	ff 91       	pop	r31
    2b36:	ef 91       	pop	r30
    2b38:	bf 91       	pop	r27
    2b3a:	af 91       	pop	r26
    2b3c:	9f 91       	pop	r25
    2b3e:	8f 91       	pop	r24
    2b40:	7f 91       	pop	r23
    2b42:	6f 91       	pop	r22
    2b44:	5f 91       	pop	r21
    2b46:	4f 91       	pop	r20
    2b48:	3f 91       	pop	r19
    2b4a:	2f 91       	pop	r18
    2b4c:	0f 90       	pop	r0
    2b4e:	0b be       	out	0x3b, r0	; 59
    2b50:	0f 90       	pop	r0
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	0f 90       	pop	r0
    2b56:	1f 90       	pop	r1
    2b58:	18 95       	reti

00002b5a <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2b5a:	1f 92       	push	r1
    2b5c:	0f 92       	push	r0
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	0f 92       	push	r0
    2b62:	11 24       	eor	r1, r1
    2b64:	0b b6       	in	r0, 0x3b	; 59
    2b66:	0f 92       	push	r0
    2b68:	2f 93       	push	r18
    2b6a:	3f 93       	push	r19
    2b6c:	4f 93       	push	r20
    2b6e:	5f 93       	push	r21
    2b70:	6f 93       	push	r22
    2b72:	7f 93       	push	r23
    2b74:	8f 93       	push	r24
    2b76:	9f 93       	push	r25
    2b78:	af 93       	push	r26
    2b7a:	bf 93       	push	r27
    2b7c:	ef 93       	push	r30
    2b7e:	ff 93       	push	r31
    2b80:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <InterruptFuncTable+0x30>
    2b84:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <InterruptFuncTable+0x31>
    2b88:	30 97       	sbiw	r30, 0x00	; 0
    2b8a:	29 f0       	breq	.+10     	; 0x2b96 <__vector_24+0x3c>
    2b8c:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <InterruptSenderTable+0x30>
    2b90:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <InterruptSenderTable+0x31>
    2b94:	19 95       	eicall
    2b96:	ff 91       	pop	r31
    2b98:	ef 91       	pop	r30
    2b9a:	bf 91       	pop	r27
    2b9c:	af 91       	pop	r26
    2b9e:	9f 91       	pop	r25
    2ba0:	8f 91       	pop	r24
    2ba2:	7f 91       	pop	r23
    2ba4:	6f 91       	pop	r22
    2ba6:	5f 91       	pop	r21
    2ba8:	4f 91       	pop	r20
    2baa:	3f 91       	pop	r19
    2bac:	2f 91       	pop	r18
    2bae:	0f 90       	pop	r0
    2bb0:	0b be       	out	0x3b, r0	; 59
    2bb2:	0f 90       	pop	r0
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	0f 90       	pop	r0
    2bb8:	1f 90       	pop	r1
    2bba:	18 95       	reti

00002bbc <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2bbc:	1f 92       	push	r1
    2bbe:	0f 92       	push	r0
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	0f 92       	push	r0
    2bc4:	11 24       	eor	r1, r1
    2bc6:	0b b6       	in	r0, 0x3b	; 59
    2bc8:	0f 92       	push	r0
    2bca:	2f 93       	push	r18
    2bcc:	3f 93       	push	r19
    2bce:	4f 93       	push	r20
    2bd0:	5f 93       	push	r21
    2bd2:	6f 93       	push	r22
    2bd4:	7f 93       	push	r23
    2bd6:	8f 93       	push	r24
    2bd8:	9f 93       	push	r25
    2bda:	af 93       	push	r26
    2bdc:	bf 93       	push	r27
    2bde:	ef 93       	push	r30
    2be0:	ff 93       	push	r31
    2be2:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <InterruptFuncTable+0x32>
    2be6:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <InterruptFuncTable+0x33>
    2bea:	30 97       	sbiw	r30, 0x00	; 0
    2bec:	29 f0       	breq	.+10     	; 0x2bf8 <__vector_25+0x3c>
    2bee:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <InterruptSenderTable+0x32>
    2bf2:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <InterruptSenderTable+0x33>
    2bf6:	19 95       	eicall
    2bf8:	ff 91       	pop	r31
    2bfa:	ef 91       	pop	r30
    2bfc:	bf 91       	pop	r27
    2bfe:	af 91       	pop	r26
    2c00:	9f 91       	pop	r25
    2c02:	8f 91       	pop	r24
    2c04:	7f 91       	pop	r23
    2c06:	6f 91       	pop	r22
    2c08:	5f 91       	pop	r21
    2c0a:	4f 91       	pop	r20
    2c0c:	3f 91       	pop	r19
    2c0e:	2f 91       	pop	r18
    2c10:	0f 90       	pop	r0
    2c12:	0b be       	out	0x3b, r0	; 59
    2c14:	0f 90       	pop	r0
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	0f 90       	pop	r0
    2c1a:	1f 90       	pop	r1
    2c1c:	18 95       	reti

00002c1e <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2c1e:	1f 92       	push	r1
    2c20:	0f 92       	push	r0
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	0f 92       	push	r0
    2c26:	11 24       	eor	r1, r1
    2c28:	0b b6       	in	r0, 0x3b	; 59
    2c2a:	0f 92       	push	r0
    2c2c:	2f 93       	push	r18
    2c2e:	3f 93       	push	r19
    2c30:	4f 93       	push	r20
    2c32:	5f 93       	push	r21
    2c34:	6f 93       	push	r22
    2c36:	7f 93       	push	r23
    2c38:	8f 93       	push	r24
    2c3a:	9f 93       	push	r25
    2c3c:	af 93       	push	r26
    2c3e:	bf 93       	push	r27
    2c40:	ef 93       	push	r30
    2c42:	ff 93       	push	r31
    2c44:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <InterruptFuncTable+0x34>
    2c48:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <InterruptFuncTable+0x35>
    2c4c:	30 97       	sbiw	r30, 0x00	; 0
    2c4e:	29 f0       	breq	.+10     	; 0x2c5a <__vector_26+0x3c>
    2c50:	80 91 dc 23 	lds	r24, 0x23DC	; 0x8023dc <InterruptSenderTable+0x34>
    2c54:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <InterruptSenderTable+0x35>
    2c58:	19 95       	eicall
    2c5a:	ff 91       	pop	r31
    2c5c:	ef 91       	pop	r30
    2c5e:	bf 91       	pop	r27
    2c60:	af 91       	pop	r26
    2c62:	9f 91       	pop	r25
    2c64:	8f 91       	pop	r24
    2c66:	7f 91       	pop	r23
    2c68:	6f 91       	pop	r22
    2c6a:	5f 91       	pop	r21
    2c6c:	4f 91       	pop	r20
    2c6e:	3f 91       	pop	r19
    2c70:	2f 91       	pop	r18
    2c72:	0f 90       	pop	r0
    2c74:	0b be       	out	0x3b, r0	; 59
    2c76:	0f 90       	pop	r0
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	0f 90       	pop	r0
    2c7c:	1f 90       	pop	r1
    2c7e:	18 95       	reti

00002c80 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2c80:	1f 92       	push	r1
    2c82:	0f 92       	push	r0
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	0f 92       	push	r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	0b b6       	in	r0, 0x3b	; 59
    2c8c:	0f 92       	push	r0
    2c8e:	2f 93       	push	r18
    2c90:	3f 93       	push	r19
    2c92:	4f 93       	push	r20
    2c94:	5f 93       	push	r21
    2c96:	6f 93       	push	r22
    2c98:	7f 93       	push	r23
    2c9a:	8f 93       	push	r24
    2c9c:	9f 93       	push	r25
    2c9e:	af 93       	push	r26
    2ca0:	bf 93       	push	r27
    2ca2:	ef 93       	push	r30
    2ca4:	ff 93       	push	r31
    2ca6:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <InterruptFuncTable+0x36>
    2caa:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <InterruptFuncTable+0x37>
    2cae:	30 97       	sbiw	r30, 0x00	; 0
    2cb0:	29 f0       	breq	.+10     	; 0x2cbc <__vector_27+0x3c>
    2cb2:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <InterruptSenderTable+0x36>
    2cb6:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <InterruptSenderTable+0x37>
    2cba:	19 95       	eicall
    2cbc:	ff 91       	pop	r31
    2cbe:	ef 91       	pop	r30
    2cc0:	bf 91       	pop	r27
    2cc2:	af 91       	pop	r26
    2cc4:	9f 91       	pop	r25
    2cc6:	8f 91       	pop	r24
    2cc8:	7f 91       	pop	r23
    2cca:	6f 91       	pop	r22
    2ccc:	5f 91       	pop	r21
    2cce:	4f 91       	pop	r20
    2cd0:	3f 91       	pop	r19
    2cd2:	2f 91       	pop	r18
    2cd4:	0f 90       	pop	r0
    2cd6:	0b be       	out	0x3b, r0	; 59
    2cd8:	0f 90       	pop	r0
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	0f 90       	pop	r0
    2cde:	1f 90       	pop	r1
    2ce0:	18 95       	reti

00002ce2 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2ce2:	1f 92       	push	r1
    2ce4:	0f 92       	push	r0
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	0f 92       	push	r0
    2cea:	11 24       	eor	r1, r1
    2cec:	0b b6       	in	r0, 0x3b	; 59
    2cee:	0f 92       	push	r0
    2cf0:	2f 93       	push	r18
    2cf2:	3f 93       	push	r19
    2cf4:	4f 93       	push	r20
    2cf6:	5f 93       	push	r21
    2cf8:	6f 93       	push	r22
    2cfa:	7f 93       	push	r23
    2cfc:	8f 93       	push	r24
    2cfe:	9f 93       	push	r25
    2d00:	af 93       	push	r26
    2d02:	bf 93       	push	r27
    2d04:	ef 93       	push	r30
    2d06:	ff 93       	push	r31
    2d08:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <InterruptFuncTable+0x38>
    2d0c:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <InterruptFuncTable+0x39>
    2d10:	30 97       	sbiw	r30, 0x00	; 0
    2d12:	29 f0       	breq	.+10     	; 0x2d1e <__vector_28+0x3c>
    2d14:	80 91 e0 23 	lds	r24, 0x23E0	; 0x8023e0 <InterruptSenderTable+0x38>
    2d18:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <InterruptSenderTable+0x39>
    2d1c:	19 95       	eicall
    2d1e:	ff 91       	pop	r31
    2d20:	ef 91       	pop	r30
    2d22:	bf 91       	pop	r27
    2d24:	af 91       	pop	r26
    2d26:	9f 91       	pop	r25
    2d28:	8f 91       	pop	r24
    2d2a:	7f 91       	pop	r23
    2d2c:	6f 91       	pop	r22
    2d2e:	5f 91       	pop	r21
    2d30:	4f 91       	pop	r20
    2d32:	3f 91       	pop	r19
    2d34:	2f 91       	pop	r18
    2d36:	0f 90       	pop	r0
    2d38:	0b be       	out	0x3b, r0	; 59
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	0f 90       	pop	r0
    2d40:	1f 90       	pop	r1
    2d42:	18 95       	reti

00002d44 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2d44:	1f 92       	push	r1
    2d46:	0f 92       	push	r0
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	0f 92       	push	r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	0b b6       	in	r0, 0x3b	; 59
    2d50:	0f 92       	push	r0
    2d52:	2f 93       	push	r18
    2d54:	3f 93       	push	r19
    2d56:	4f 93       	push	r20
    2d58:	5f 93       	push	r21
    2d5a:	6f 93       	push	r22
    2d5c:	7f 93       	push	r23
    2d5e:	8f 93       	push	r24
    2d60:	9f 93       	push	r25
    2d62:	af 93       	push	r26
    2d64:	bf 93       	push	r27
    2d66:	ef 93       	push	r30
    2d68:	ff 93       	push	r31
    2d6a:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <InterruptFuncTable+0x3a>
    2d6e:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <InterruptFuncTable+0x3b>
    2d72:	30 97       	sbiw	r30, 0x00	; 0
    2d74:	29 f0       	breq	.+10     	; 0x2d80 <__vector_29+0x3c>
    2d76:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <InterruptSenderTable+0x3a>
    2d7a:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <InterruptSenderTable+0x3b>
    2d7e:	19 95       	eicall
    2d80:	ff 91       	pop	r31
    2d82:	ef 91       	pop	r30
    2d84:	bf 91       	pop	r27
    2d86:	af 91       	pop	r26
    2d88:	9f 91       	pop	r25
    2d8a:	8f 91       	pop	r24
    2d8c:	7f 91       	pop	r23
    2d8e:	6f 91       	pop	r22
    2d90:	5f 91       	pop	r21
    2d92:	4f 91       	pop	r20
    2d94:	3f 91       	pop	r19
    2d96:	2f 91       	pop	r18
    2d98:	0f 90       	pop	r0
    2d9a:	0b be       	out	0x3b, r0	; 59
    2d9c:	0f 90       	pop	r0
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	0f 90       	pop	r0
    2da2:	1f 90       	pop	r1
    2da4:	18 95       	reti

00002da6 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2da6:	1f 92       	push	r1
    2da8:	0f 92       	push	r0
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	0f 92       	push	r0
    2dae:	11 24       	eor	r1, r1
    2db0:	0b b6       	in	r0, 0x3b	; 59
    2db2:	0f 92       	push	r0
    2db4:	2f 93       	push	r18
    2db6:	3f 93       	push	r19
    2db8:	4f 93       	push	r20
    2dba:	5f 93       	push	r21
    2dbc:	6f 93       	push	r22
    2dbe:	7f 93       	push	r23
    2dc0:	8f 93       	push	r24
    2dc2:	9f 93       	push	r25
    2dc4:	af 93       	push	r26
    2dc6:	bf 93       	push	r27
    2dc8:	ef 93       	push	r30
    2dca:	ff 93       	push	r31
    2dcc:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <InterruptFuncTable+0x3c>
    2dd0:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <InterruptFuncTable+0x3d>
    2dd4:	30 97       	sbiw	r30, 0x00	; 0
    2dd6:	29 f0       	breq	.+10     	; 0x2de2 <__vector_30+0x3c>
    2dd8:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <InterruptSenderTable+0x3c>
    2ddc:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <InterruptSenderTable+0x3d>
    2de0:	19 95       	eicall
    2de2:	ff 91       	pop	r31
    2de4:	ef 91       	pop	r30
    2de6:	bf 91       	pop	r27
    2de8:	af 91       	pop	r26
    2dea:	9f 91       	pop	r25
    2dec:	8f 91       	pop	r24
    2dee:	7f 91       	pop	r23
    2df0:	6f 91       	pop	r22
    2df2:	5f 91       	pop	r21
    2df4:	4f 91       	pop	r20
    2df6:	3f 91       	pop	r19
    2df8:	2f 91       	pop	r18
    2dfa:	0f 90       	pop	r0
    2dfc:	0b be       	out	0x3b, r0	; 59
    2dfe:	0f 90       	pop	r0
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	0f 90       	pop	r0
    2e04:	1f 90       	pop	r1
    2e06:	18 95       	reti

00002e08 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2e08:	1f 92       	push	r1
    2e0a:	0f 92       	push	r0
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	0f 92       	push	r0
    2e10:	11 24       	eor	r1, r1
    2e12:	0b b6       	in	r0, 0x3b	; 59
    2e14:	0f 92       	push	r0
    2e16:	2f 93       	push	r18
    2e18:	3f 93       	push	r19
    2e1a:	4f 93       	push	r20
    2e1c:	5f 93       	push	r21
    2e1e:	6f 93       	push	r22
    2e20:	7f 93       	push	r23
    2e22:	8f 93       	push	r24
    2e24:	9f 93       	push	r25
    2e26:	af 93       	push	r26
    2e28:	bf 93       	push	r27
    2e2a:	ef 93       	push	r30
    2e2c:	ff 93       	push	r31
    2e2e:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <InterruptFuncTable+0x3e>
    2e32:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <InterruptFuncTable+0x3f>
    2e36:	30 97       	sbiw	r30, 0x00	; 0
    2e38:	29 f0       	breq	.+10     	; 0x2e44 <__vector_31+0x3c>
    2e3a:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <InterruptSenderTable+0x3e>
    2e3e:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <InterruptSenderTable+0x3f>
    2e42:	19 95       	eicall
    2e44:	ff 91       	pop	r31
    2e46:	ef 91       	pop	r30
    2e48:	bf 91       	pop	r27
    2e4a:	af 91       	pop	r26
    2e4c:	9f 91       	pop	r25
    2e4e:	8f 91       	pop	r24
    2e50:	7f 91       	pop	r23
    2e52:	6f 91       	pop	r22
    2e54:	5f 91       	pop	r21
    2e56:	4f 91       	pop	r20
    2e58:	3f 91       	pop	r19
    2e5a:	2f 91       	pop	r18
    2e5c:	0f 90       	pop	r0
    2e5e:	0b be       	out	0x3b, r0	; 59
    2e60:	0f 90       	pop	r0
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	0f 90       	pop	r0
    2e66:	1f 90       	pop	r1
    2e68:	18 95       	reti

00002e6a <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2e6a:	1f 92       	push	r1
    2e6c:	0f 92       	push	r0
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	0f 92       	push	r0
    2e72:	11 24       	eor	r1, r1
    2e74:	0b b6       	in	r0, 0x3b	; 59
    2e76:	0f 92       	push	r0
    2e78:	2f 93       	push	r18
    2e7a:	3f 93       	push	r19
    2e7c:	4f 93       	push	r20
    2e7e:	5f 93       	push	r21
    2e80:	6f 93       	push	r22
    2e82:	7f 93       	push	r23
    2e84:	8f 93       	push	r24
    2e86:	9f 93       	push	r25
    2e88:	af 93       	push	r26
    2e8a:	bf 93       	push	r27
    2e8c:	ef 93       	push	r30
    2e8e:	ff 93       	push	r31
    2e90:	e0 91 f2 22 	lds	r30, 0x22F2	; 0x8022f2 <InterruptFuncTable+0x40>
    2e94:	f0 91 f3 22 	lds	r31, 0x22F3	; 0x8022f3 <InterruptFuncTable+0x41>
    2e98:	30 97       	sbiw	r30, 0x00	; 0
    2e9a:	29 f0       	breq	.+10     	; 0x2ea6 <__vector_32+0x3c>
    2e9c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <InterruptSenderTable+0x40>
    2ea0:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <InterruptSenderTable+0x41>
    2ea4:	19 95       	eicall
    2ea6:	ff 91       	pop	r31
    2ea8:	ef 91       	pop	r30
    2eaa:	bf 91       	pop	r27
    2eac:	af 91       	pop	r26
    2eae:	9f 91       	pop	r25
    2eb0:	8f 91       	pop	r24
    2eb2:	7f 91       	pop	r23
    2eb4:	6f 91       	pop	r22
    2eb6:	5f 91       	pop	r21
    2eb8:	4f 91       	pop	r20
    2eba:	3f 91       	pop	r19
    2ebc:	2f 91       	pop	r18
    2ebe:	0f 90       	pop	r0
    2ec0:	0b be       	out	0x3b, r0	; 59
    2ec2:	0f 90       	pop	r0
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	0f 90       	pop	r0
    2ec8:	1f 90       	pop	r1
    2eca:	18 95       	reti

00002ecc <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2ecc:	1f 92       	push	r1
    2ece:	0f 92       	push	r0
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	0f 92       	push	r0
    2ed4:	11 24       	eor	r1, r1
    2ed6:	0b b6       	in	r0, 0x3b	; 59
    2ed8:	0f 92       	push	r0
    2eda:	2f 93       	push	r18
    2edc:	3f 93       	push	r19
    2ede:	4f 93       	push	r20
    2ee0:	5f 93       	push	r21
    2ee2:	6f 93       	push	r22
    2ee4:	7f 93       	push	r23
    2ee6:	8f 93       	push	r24
    2ee8:	9f 93       	push	r25
    2eea:	af 93       	push	r26
    2eec:	bf 93       	push	r27
    2eee:	ef 93       	push	r30
    2ef0:	ff 93       	push	r31
    2ef2:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <InterruptFuncTable+0x42>
    2ef6:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <InterruptFuncTable+0x43>
    2efa:	30 97       	sbiw	r30, 0x00	; 0
    2efc:	29 f0       	breq	.+10     	; 0x2f08 <__vector_33+0x3c>
    2efe:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <InterruptSenderTable+0x42>
    2f02:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <InterruptSenderTable+0x43>
    2f06:	19 95       	eicall
    2f08:	ff 91       	pop	r31
    2f0a:	ef 91       	pop	r30
    2f0c:	bf 91       	pop	r27
    2f0e:	af 91       	pop	r26
    2f10:	9f 91       	pop	r25
    2f12:	8f 91       	pop	r24
    2f14:	7f 91       	pop	r23
    2f16:	6f 91       	pop	r22
    2f18:	5f 91       	pop	r21
    2f1a:	4f 91       	pop	r20
    2f1c:	3f 91       	pop	r19
    2f1e:	2f 91       	pop	r18
    2f20:	0f 90       	pop	r0
    2f22:	0b be       	out	0x3b, r0	; 59
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2f2e:	1f 92       	push	r1
    2f30:	0f 92       	push	r0
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	0f 92       	push	r0
    2f36:	11 24       	eor	r1, r1
    2f38:	0b b6       	in	r0, 0x3b	; 59
    2f3a:	0f 92       	push	r0
    2f3c:	2f 93       	push	r18
    2f3e:	3f 93       	push	r19
    2f40:	4f 93       	push	r20
    2f42:	5f 93       	push	r21
    2f44:	6f 93       	push	r22
    2f46:	7f 93       	push	r23
    2f48:	8f 93       	push	r24
    2f4a:	9f 93       	push	r25
    2f4c:	af 93       	push	r26
    2f4e:	bf 93       	push	r27
    2f50:	ef 93       	push	r30
    2f52:	ff 93       	push	r31
    2f54:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <InterruptFuncTable+0x44>
    2f58:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <InterruptFuncTable+0x45>
    2f5c:	30 97       	sbiw	r30, 0x00	; 0
    2f5e:	29 f0       	breq	.+10     	; 0x2f6a <__vector_34+0x3c>
    2f60:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <InterruptSenderTable+0x44>
    2f64:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <InterruptSenderTable+0x45>
    2f68:	19 95       	eicall
    2f6a:	ff 91       	pop	r31
    2f6c:	ef 91       	pop	r30
    2f6e:	bf 91       	pop	r27
    2f70:	af 91       	pop	r26
    2f72:	9f 91       	pop	r25
    2f74:	8f 91       	pop	r24
    2f76:	7f 91       	pop	r23
    2f78:	6f 91       	pop	r22
    2f7a:	5f 91       	pop	r21
    2f7c:	4f 91       	pop	r20
    2f7e:	3f 91       	pop	r19
    2f80:	2f 91       	pop	r18
    2f82:	0f 90       	pop	r0
    2f84:	0b be       	out	0x3b, r0	; 59
    2f86:	0f 90       	pop	r0
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	0f 90       	pop	r0
    2f8c:	1f 90       	pop	r1
    2f8e:	18 95       	reti

00002f90 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2f90:	1f 92       	push	r1
    2f92:	0f 92       	push	r0
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	0f 92       	push	r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	0b b6       	in	r0, 0x3b	; 59
    2f9c:	0f 92       	push	r0
    2f9e:	2f 93       	push	r18
    2fa0:	3f 93       	push	r19
    2fa2:	4f 93       	push	r20
    2fa4:	5f 93       	push	r21
    2fa6:	6f 93       	push	r22
    2fa8:	7f 93       	push	r23
    2faa:	8f 93       	push	r24
    2fac:	9f 93       	push	r25
    2fae:	af 93       	push	r26
    2fb0:	bf 93       	push	r27
    2fb2:	ef 93       	push	r30
    2fb4:	ff 93       	push	r31
    2fb6:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <InterruptFuncTable+0x46>
    2fba:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <InterruptFuncTable+0x47>
    2fbe:	30 97       	sbiw	r30, 0x00	; 0
    2fc0:	29 f0       	breq	.+10     	; 0x2fcc <__vector_35+0x3c>
    2fc2:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <InterruptSenderTable+0x46>
    2fc6:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <InterruptSenderTable+0x47>
    2fca:	19 95       	eicall
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0b be       	out	0x3b, r0	; 59
    2fe8:	0f 90       	pop	r0
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	0f 90       	pop	r0
    2fee:	1f 90       	pop	r1
    2ff0:	18 95       	reti

00002ff2 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    2ff2:	1f 92       	push	r1
    2ff4:	0f 92       	push	r0
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	0f 92       	push	r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	0b b6       	in	r0, 0x3b	; 59
    2ffe:	0f 92       	push	r0
    3000:	2f 93       	push	r18
    3002:	3f 93       	push	r19
    3004:	4f 93       	push	r20
    3006:	5f 93       	push	r21
    3008:	6f 93       	push	r22
    300a:	7f 93       	push	r23
    300c:	8f 93       	push	r24
    300e:	9f 93       	push	r25
    3010:	af 93       	push	r26
    3012:	bf 93       	push	r27
    3014:	ef 93       	push	r30
    3016:	ff 93       	push	r31
    3018:	e0 91 fa 22 	lds	r30, 0x22FA	; 0x8022fa <InterruptFuncTable+0x48>
    301c:	f0 91 fb 22 	lds	r31, 0x22FB	; 0x8022fb <InterruptFuncTable+0x49>
    3020:	30 97       	sbiw	r30, 0x00	; 0
    3022:	29 f0       	breq	.+10     	; 0x302e <__vector_36+0x3c>
    3024:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <InterruptSenderTable+0x48>
    3028:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <InterruptSenderTable+0x49>
    302c:	19 95       	eicall
    302e:	ff 91       	pop	r31
    3030:	ef 91       	pop	r30
    3032:	bf 91       	pop	r27
    3034:	af 91       	pop	r26
    3036:	9f 91       	pop	r25
    3038:	8f 91       	pop	r24
    303a:	7f 91       	pop	r23
    303c:	6f 91       	pop	r22
    303e:	5f 91       	pop	r21
    3040:	4f 91       	pop	r20
    3042:	3f 91       	pop	r19
    3044:	2f 91       	pop	r18
    3046:	0f 90       	pop	r0
    3048:	0b be       	out	0x3b, r0	; 59
    304a:	0f 90       	pop	r0
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	0f 90       	pop	r0
    3050:	1f 90       	pop	r1
    3052:	18 95       	reti

00003054 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    3054:	1f 92       	push	r1
    3056:	0f 92       	push	r0
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	0f 92       	push	r0
    305c:	11 24       	eor	r1, r1
    305e:	0b b6       	in	r0, 0x3b	; 59
    3060:	0f 92       	push	r0
    3062:	2f 93       	push	r18
    3064:	3f 93       	push	r19
    3066:	4f 93       	push	r20
    3068:	5f 93       	push	r21
    306a:	6f 93       	push	r22
    306c:	7f 93       	push	r23
    306e:	8f 93       	push	r24
    3070:	9f 93       	push	r25
    3072:	af 93       	push	r26
    3074:	bf 93       	push	r27
    3076:	ef 93       	push	r30
    3078:	ff 93       	push	r31
    307a:	e0 91 fc 22 	lds	r30, 0x22FC	; 0x8022fc <InterruptFuncTable+0x4a>
    307e:	f0 91 fd 22 	lds	r31, 0x22FD	; 0x8022fd <InterruptFuncTable+0x4b>
    3082:	30 97       	sbiw	r30, 0x00	; 0
    3084:	29 f0       	breq	.+10     	; 0x3090 <__vector_37+0x3c>
    3086:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <InterruptSenderTable+0x4a>
    308a:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <InterruptSenderTable+0x4b>
    308e:	19 95       	eicall
    3090:	ff 91       	pop	r31
    3092:	ef 91       	pop	r30
    3094:	bf 91       	pop	r27
    3096:	af 91       	pop	r26
    3098:	9f 91       	pop	r25
    309a:	8f 91       	pop	r24
    309c:	7f 91       	pop	r23
    309e:	6f 91       	pop	r22
    30a0:	5f 91       	pop	r21
    30a2:	4f 91       	pop	r20
    30a4:	3f 91       	pop	r19
    30a6:	2f 91       	pop	r18
    30a8:	0f 90       	pop	r0
    30aa:	0b be       	out	0x3b, r0	; 59
    30ac:	0f 90       	pop	r0
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	0f 90       	pop	r0
    30b2:	1f 90       	pop	r1
    30b4:	18 95       	reti

000030b6 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    30b6:	1f 92       	push	r1
    30b8:	0f 92       	push	r0
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	0f 92       	push	r0
    30be:	11 24       	eor	r1, r1
    30c0:	0b b6       	in	r0, 0x3b	; 59
    30c2:	0f 92       	push	r0
    30c4:	2f 93       	push	r18
    30c6:	3f 93       	push	r19
    30c8:	4f 93       	push	r20
    30ca:	5f 93       	push	r21
    30cc:	6f 93       	push	r22
    30ce:	7f 93       	push	r23
    30d0:	8f 93       	push	r24
    30d2:	9f 93       	push	r25
    30d4:	af 93       	push	r26
    30d6:	bf 93       	push	r27
    30d8:	ef 93       	push	r30
    30da:	ff 93       	push	r31
    30dc:	e0 91 fe 22 	lds	r30, 0x22FE	; 0x8022fe <InterruptFuncTable+0x4c>
    30e0:	f0 91 ff 22 	lds	r31, 0x22FF	; 0x8022ff <InterruptFuncTable+0x4d>
    30e4:	30 97       	sbiw	r30, 0x00	; 0
    30e6:	29 f0       	breq	.+10     	; 0x30f2 <__vector_38+0x3c>
    30e8:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <InterruptSenderTable+0x4c>
    30ec:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <InterruptSenderTable+0x4d>
    30f0:	19 95       	eicall
    30f2:	ff 91       	pop	r31
    30f4:	ef 91       	pop	r30
    30f6:	bf 91       	pop	r27
    30f8:	af 91       	pop	r26
    30fa:	9f 91       	pop	r25
    30fc:	8f 91       	pop	r24
    30fe:	7f 91       	pop	r23
    3100:	6f 91       	pop	r22
    3102:	5f 91       	pop	r21
    3104:	4f 91       	pop	r20
    3106:	3f 91       	pop	r19
    3108:	2f 91       	pop	r18
    310a:	0f 90       	pop	r0
    310c:	0b be       	out	0x3b, r0	; 59
    310e:	0f 90       	pop	r0
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	0f 90       	pop	r0
    3114:	1f 90       	pop	r1
    3116:	18 95       	reti

00003118 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    3118:	1f 92       	push	r1
    311a:	0f 92       	push	r0
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	0f 92       	push	r0
    3120:	11 24       	eor	r1, r1
    3122:	0b b6       	in	r0, 0x3b	; 59
    3124:	0f 92       	push	r0
    3126:	2f 93       	push	r18
    3128:	3f 93       	push	r19
    312a:	4f 93       	push	r20
    312c:	5f 93       	push	r21
    312e:	6f 93       	push	r22
    3130:	7f 93       	push	r23
    3132:	8f 93       	push	r24
    3134:	9f 93       	push	r25
    3136:	af 93       	push	r26
    3138:	bf 93       	push	r27
    313a:	ef 93       	push	r30
    313c:	ff 93       	push	r31
    313e:	e0 91 00 23 	lds	r30, 0x2300	; 0x802300 <InterruptFuncTable+0x4e>
    3142:	f0 91 01 23 	lds	r31, 0x2301	; 0x802301 <InterruptFuncTable+0x4f>
    3146:	30 97       	sbiw	r30, 0x00	; 0
    3148:	29 f0       	breq	.+10     	; 0x3154 <__vector_39+0x3c>
    314a:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <InterruptSenderTable+0x4e>
    314e:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <InterruptSenderTable+0x4f>
    3152:	19 95       	eicall
    3154:	ff 91       	pop	r31
    3156:	ef 91       	pop	r30
    3158:	bf 91       	pop	r27
    315a:	af 91       	pop	r26
    315c:	9f 91       	pop	r25
    315e:	8f 91       	pop	r24
    3160:	7f 91       	pop	r23
    3162:	6f 91       	pop	r22
    3164:	5f 91       	pop	r21
    3166:	4f 91       	pop	r20
    3168:	3f 91       	pop	r19
    316a:	2f 91       	pop	r18
    316c:	0f 90       	pop	r0
    316e:	0b be       	out	0x3b, r0	; 59
    3170:	0f 90       	pop	r0
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	0f 90       	pop	r0
    3176:	1f 90       	pop	r1
    3178:	18 95       	reti

0000317a <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    317a:	1f 92       	push	r1
    317c:	0f 92       	push	r0
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	0f 92       	push	r0
    3182:	11 24       	eor	r1, r1
    3184:	0b b6       	in	r0, 0x3b	; 59
    3186:	0f 92       	push	r0
    3188:	2f 93       	push	r18
    318a:	3f 93       	push	r19
    318c:	4f 93       	push	r20
    318e:	5f 93       	push	r21
    3190:	6f 93       	push	r22
    3192:	7f 93       	push	r23
    3194:	8f 93       	push	r24
    3196:	9f 93       	push	r25
    3198:	af 93       	push	r26
    319a:	bf 93       	push	r27
    319c:	ef 93       	push	r30
    319e:	ff 93       	push	r31
    31a0:	e0 91 02 23 	lds	r30, 0x2302	; 0x802302 <InterruptFuncTable+0x50>
    31a4:	f0 91 03 23 	lds	r31, 0x2303	; 0x802303 <InterruptFuncTable+0x51>
    31a8:	30 97       	sbiw	r30, 0x00	; 0
    31aa:	29 f0       	breq	.+10     	; 0x31b6 <__vector_40+0x3c>
    31ac:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <InterruptSenderTable+0x50>
    31b0:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <InterruptSenderTable+0x51>
    31b4:	19 95       	eicall
    31b6:	ff 91       	pop	r31
    31b8:	ef 91       	pop	r30
    31ba:	bf 91       	pop	r27
    31bc:	af 91       	pop	r26
    31be:	9f 91       	pop	r25
    31c0:	8f 91       	pop	r24
    31c2:	7f 91       	pop	r23
    31c4:	6f 91       	pop	r22
    31c6:	5f 91       	pop	r21
    31c8:	4f 91       	pop	r20
    31ca:	3f 91       	pop	r19
    31cc:	2f 91       	pop	r18
    31ce:	0f 90       	pop	r0
    31d0:	0b be       	out	0x3b, r0	; 59
    31d2:	0f 90       	pop	r0
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	0f 90       	pop	r0
    31d8:	1f 90       	pop	r1
    31da:	18 95       	reti

000031dc <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    31dc:	1f 92       	push	r1
    31de:	0f 92       	push	r0
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	0f 92       	push	r0
    31e4:	11 24       	eor	r1, r1
    31e6:	0b b6       	in	r0, 0x3b	; 59
    31e8:	0f 92       	push	r0
    31ea:	2f 93       	push	r18
    31ec:	3f 93       	push	r19
    31ee:	4f 93       	push	r20
    31f0:	5f 93       	push	r21
    31f2:	6f 93       	push	r22
    31f4:	7f 93       	push	r23
    31f6:	8f 93       	push	r24
    31f8:	9f 93       	push	r25
    31fa:	af 93       	push	r26
    31fc:	bf 93       	push	r27
    31fe:	ef 93       	push	r30
    3200:	ff 93       	push	r31
    3202:	e0 91 04 23 	lds	r30, 0x2304	; 0x802304 <InterruptFuncTable+0x52>
    3206:	f0 91 05 23 	lds	r31, 0x2305	; 0x802305 <InterruptFuncTable+0x53>
    320a:	30 97       	sbiw	r30, 0x00	; 0
    320c:	29 f0       	breq	.+10     	; 0x3218 <__vector_41+0x3c>
    320e:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <InterruptSenderTable+0x52>
    3212:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <InterruptSenderTable+0x53>
    3216:	19 95       	eicall
    3218:	ff 91       	pop	r31
    321a:	ef 91       	pop	r30
    321c:	bf 91       	pop	r27
    321e:	af 91       	pop	r26
    3220:	9f 91       	pop	r25
    3222:	8f 91       	pop	r24
    3224:	7f 91       	pop	r23
    3226:	6f 91       	pop	r22
    3228:	5f 91       	pop	r21
    322a:	4f 91       	pop	r20
    322c:	3f 91       	pop	r19
    322e:	2f 91       	pop	r18
    3230:	0f 90       	pop	r0
    3232:	0b be       	out	0x3b, r0	; 59
    3234:	0f 90       	pop	r0
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	0f 90       	pop	r0
    323a:	1f 90       	pop	r1
    323c:	18 95       	reti

0000323e <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    323e:	1f 92       	push	r1
    3240:	0f 92       	push	r0
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	0f 92       	push	r0
    3246:	11 24       	eor	r1, r1
    3248:	0b b6       	in	r0, 0x3b	; 59
    324a:	0f 92       	push	r0
    324c:	2f 93       	push	r18
    324e:	3f 93       	push	r19
    3250:	4f 93       	push	r20
    3252:	5f 93       	push	r21
    3254:	6f 93       	push	r22
    3256:	7f 93       	push	r23
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	af 93       	push	r26
    325e:	bf 93       	push	r27
    3260:	ef 93       	push	r30
    3262:	ff 93       	push	r31
    3264:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <InterruptFuncTable+0x54>
    3268:	f0 91 07 23 	lds	r31, 0x2307	; 0x802307 <InterruptFuncTable+0x55>
    326c:	30 97       	sbiw	r30, 0x00	; 0
    326e:	29 f0       	breq	.+10     	; 0x327a <__vector_42+0x3c>
    3270:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <InterruptSenderTable+0x54>
    3274:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <InterruptSenderTable+0x55>
    3278:	19 95       	eicall
    327a:	ff 91       	pop	r31
    327c:	ef 91       	pop	r30
    327e:	bf 91       	pop	r27
    3280:	af 91       	pop	r26
    3282:	9f 91       	pop	r25
    3284:	8f 91       	pop	r24
    3286:	7f 91       	pop	r23
    3288:	6f 91       	pop	r22
    328a:	5f 91       	pop	r21
    328c:	4f 91       	pop	r20
    328e:	3f 91       	pop	r19
    3290:	2f 91       	pop	r18
    3292:	0f 90       	pop	r0
    3294:	0b be       	out	0x3b, r0	; 59
    3296:	0f 90       	pop	r0
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	0f 90       	pop	r0
    329c:	1f 90       	pop	r1
    329e:	18 95       	reti

000032a0 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    32a0:	1f 92       	push	r1
    32a2:	0f 92       	push	r0
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	0f 92       	push	r0
    32a8:	11 24       	eor	r1, r1
    32aa:	0b b6       	in	r0, 0x3b	; 59
    32ac:	0f 92       	push	r0
    32ae:	2f 93       	push	r18
    32b0:	3f 93       	push	r19
    32b2:	4f 93       	push	r20
    32b4:	5f 93       	push	r21
    32b6:	6f 93       	push	r22
    32b8:	7f 93       	push	r23
    32ba:	8f 93       	push	r24
    32bc:	9f 93       	push	r25
    32be:	af 93       	push	r26
    32c0:	bf 93       	push	r27
    32c2:	ef 93       	push	r30
    32c4:	ff 93       	push	r31
    32c6:	e0 91 08 23 	lds	r30, 0x2308	; 0x802308 <InterruptFuncTable+0x56>
    32ca:	f0 91 09 23 	lds	r31, 0x2309	; 0x802309 <InterruptFuncTable+0x57>
    32ce:	30 97       	sbiw	r30, 0x00	; 0
    32d0:	29 f0       	breq	.+10     	; 0x32dc <__vector_43+0x3c>
    32d2:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <InterruptSenderTable+0x56>
    32d6:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <InterruptSenderTable+0x57>
    32da:	19 95       	eicall
    32dc:	ff 91       	pop	r31
    32de:	ef 91       	pop	r30
    32e0:	bf 91       	pop	r27
    32e2:	af 91       	pop	r26
    32e4:	9f 91       	pop	r25
    32e6:	8f 91       	pop	r24
    32e8:	7f 91       	pop	r23
    32ea:	6f 91       	pop	r22
    32ec:	5f 91       	pop	r21
    32ee:	4f 91       	pop	r20
    32f0:	3f 91       	pop	r19
    32f2:	2f 91       	pop	r18
    32f4:	0f 90       	pop	r0
    32f6:	0b be       	out	0x3b, r0	; 59
    32f8:	0f 90       	pop	r0
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	0f 90       	pop	r0
    32fe:	1f 90       	pop	r1
    3300:	18 95       	reti

00003302 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    3302:	1f 92       	push	r1
    3304:	0f 92       	push	r0
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	0f 92       	push	r0
    330a:	11 24       	eor	r1, r1
    330c:	0b b6       	in	r0, 0x3b	; 59
    330e:	0f 92       	push	r0
    3310:	2f 93       	push	r18
    3312:	3f 93       	push	r19
    3314:	4f 93       	push	r20
    3316:	5f 93       	push	r21
    3318:	6f 93       	push	r22
    331a:	7f 93       	push	r23
    331c:	8f 93       	push	r24
    331e:	9f 93       	push	r25
    3320:	af 93       	push	r26
    3322:	bf 93       	push	r27
    3324:	ef 93       	push	r30
    3326:	ff 93       	push	r31
    3328:	e0 91 0a 23 	lds	r30, 0x230A	; 0x80230a <InterruptFuncTable+0x58>
    332c:	f0 91 0b 23 	lds	r31, 0x230B	; 0x80230b <InterruptFuncTable+0x59>
    3330:	30 97       	sbiw	r30, 0x00	; 0
    3332:	29 f0       	breq	.+10     	; 0x333e <__vector_44+0x3c>
    3334:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <InterruptSenderTable+0x58>
    3338:	90 91 01 24 	lds	r25, 0x2401	; 0x802401 <InterruptSenderTable+0x59>
    333c:	19 95       	eicall
    333e:	ff 91       	pop	r31
    3340:	ef 91       	pop	r30
    3342:	bf 91       	pop	r27
    3344:	af 91       	pop	r26
    3346:	9f 91       	pop	r25
    3348:	8f 91       	pop	r24
    334a:	7f 91       	pop	r23
    334c:	6f 91       	pop	r22
    334e:	5f 91       	pop	r21
    3350:	4f 91       	pop	r20
    3352:	3f 91       	pop	r19
    3354:	2f 91       	pop	r18
    3356:	0f 90       	pop	r0
    3358:	0b be       	out	0x3b, r0	; 59
    335a:	0f 90       	pop	r0
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	0f 90       	pop	r0
    3360:	1f 90       	pop	r1
    3362:	18 95       	reti

00003364 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3364:	1f 92       	push	r1
    3366:	0f 92       	push	r0
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	0f 92       	push	r0
    336c:	11 24       	eor	r1, r1
    336e:	0b b6       	in	r0, 0x3b	; 59
    3370:	0f 92       	push	r0
    3372:	2f 93       	push	r18
    3374:	3f 93       	push	r19
    3376:	4f 93       	push	r20
    3378:	5f 93       	push	r21
    337a:	6f 93       	push	r22
    337c:	7f 93       	push	r23
    337e:	8f 93       	push	r24
    3380:	9f 93       	push	r25
    3382:	af 93       	push	r26
    3384:	bf 93       	push	r27
    3386:	ef 93       	push	r30
    3388:	ff 93       	push	r31
    338a:	e0 91 0c 23 	lds	r30, 0x230C	; 0x80230c <InterruptFuncTable+0x5a>
    338e:	f0 91 0d 23 	lds	r31, 0x230D	; 0x80230d <InterruptFuncTable+0x5b>
    3392:	30 97       	sbiw	r30, 0x00	; 0
    3394:	29 f0       	breq	.+10     	; 0x33a0 <__vector_45+0x3c>
    3396:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <InterruptSenderTable+0x5a>
    339a:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <InterruptSenderTable+0x5b>
    339e:	19 95       	eicall
    33a0:	ff 91       	pop	r31
    33a2:	ef 91       	pop	r30
    33a4:	bf 91       	pop	r27
    33a6:	af 91       	pop	r26
    33a8:	9f 91       	pop	r25
    33aa:	8f 91       	pop	r24
    33ac:	7f 91       	pop	r23
    33ae:	6f 91       	pop	r22
    33b0:	5f 91       	pop	r21
    33b2:	4f 91       	pop	r20
    33b4:	3f 91       	pop	r19
    33b6:	2f 91       	pop	r18
    33b8:	0f 90       	pop	r0
    33ba:	0b be       	out	0x3b, r0	; 59
    33bc:	0f 90       	pop	r0
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	0f 90       	pop	r0
    33c2:	1f 90       	pop	r1
    33c4:	18 95       	reti

000033c6 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    33c6:	1f 92       	push	r1
    33c8:	0f 92       	push	r0
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	0f 92       	push	r0
    33ce:	11 24       	eor	r1, r1
    33d0:	0b b6       	in	r0, 0x3b	; 59
    33d2:	0f 92       	push	r0
    33d4:	2f 93       	push	r18
    33d6:	3f 93       	push	r19
    33d8:	4f 93       	push	r20
    33da:	5f 93       	push	r21
    33dc:	6f 93       	push	r22
    33de:	7f 93       	push	r23
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	af 93       	push	r26
    33e6:	bf 93       	push	r27
    33e8:	ef 93       	push	r30
    33ea:	ff 93       	push	r31
    33ec:	e0 91 0e 23 	lds	r30, 0x230E	; 0x80230e <InterruptFuncTable+0x5c>
    33f0:	f0 91 0f 23 	lds	r31, 0x230F	; 0x80230f <InterruptFuncTable+0x5d>
    33f4:	30 97       	sbiw	r30, 0x00	; 0
    33f6:	29 f0       	breq	.+10     	; 0x3402 <__vector_46+0x3c>
    33f8:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <InterruptSenderTable+0x5c>
    33fc:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <InterruptSenderTable+0x5d>
    3400:	19 95       	eicall
    3402:	ff 91       	pop	r31
    3404:	ef 91       	pop	r30
    3406:	bf 91       	pop	r27
    3408:	af 91       	pop	r26
    340a:	9f 91       	pop	r25
    340c:	8f 91       	pop	r24
    340e:	7f 91       	pop	r23
    3410:	6f 91       	pop	r22
    3412:	5f 91       	pop	r21
    3414:	4f 91       	pop	r20
    3416:	3f 91       	pop	r19
    3418:	2f 91       	pop	r18
    341a:	0f 90       	pop	r0
    341c:	0b be       	out	0x3b, r0	; 59
    341e:	0f 90       	pop	r0
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	0f 90       	pop	r0
    3424:	1f 90       	pop	r1
    3426:	18 95       	reti

00003428 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    3428:	1f 92       	push	r1
    342a:	0f 92       	push	r0
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	0f 92       	push	r0
    3430:	11 24       	eor	r1, r1
    3432:	0b b6       	in	r0, 0x3b	; 59
    3434:	0f 92       	push	r0
    3436:	2f 93       	push	r18
    3438:	3f 93       	push	r19
    343a:	4f 93       	push	r20
    343c:	5f 93       	push	r21
    343e:	6f 93       	push	r22
    3440:	7f 93       	push	r23
    3442:	8f 93       	push	r24
    3444:	9f 93       	push	r25
    3446:	af 93       	push	r26
    3448:	bf 93       	push	r27
    344a:	ef 93       	push	r30
    344c:	ff 93       	push	r31
    344e:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <InterruptFuncTable+0x5e>
    3452:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <InterruptFuncTable+0x5f>
    3456:	30 97       	sbiw	r30, 0x00	; 0
    3458:	29 f0       	breq	.+10     	; 0x3464 <__vector_47+0x3c>
    345a:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <InterruptSenderTable+0x5e>
    345e:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <InterruptSenderTable+0x5f>
    3462:	19 95       	eicall
    3464:	ff 91       	pop	r31
    3466:	ef 91       	pop	r30
    3468:	bf 91       	pop	r27
    346a:	af 91       	pop	r26
    346c:	9f 91       	pop	r25
    346e:	8f 91       	pop	r24
    3470:	7f 91       	pop	r23
    3472:	6f 91       	pop	r22
    3474:	5f 91       	pop	r21
    3476:	4f 91       	pop	r20
    3478:	3f 91       	pop	r19
    347a:	2f 91       	pop	r18
    347c:	0f 90       	pop	r0
    347e:	0b be       	out	0x3b, r0	; 59
    3480:	0f 90       	pop	r0
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	0f 90       	pop	r0
    3486:	1f 90       	pop	r1
    3488:	18 95       	reti

0000348a <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    348a:	1f 92       	push	r1
    348c:	0f 92       	push	r0
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	0f 92       	push	r0
    3492:	11 24       	eor	r1, r1
    3494:	0b b6       	in	r0, 0x3b	; 59
    3496:	0f 92       	push	r0
    3498:	2f 93       	push	r18
    349a:	3f 93       	push	r19
    349c:	4f 93       	push	r20
    349e:	5f 93       	push	r21
    34a0:	6f 93       	push	r22
    34a2:	7f 93       	push	r23
    34a4:	8f 93       	push	r24
    34a6:	9f 93       	push	r25
    34a8:	af 93       	push	r26
    34aa:	bf 93       	push	r27
    34ac:	ef 93       	push	r30
    34ae:	ff 93       	push	r31
    34b0:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <InterruptFuncTable+0x60>
    34b4:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <InterruptFuncTable+0x61>
    34b8:	30 97       	sbiw	r30, 0x00	; 0
    34ba:	29 f0       	breq	.+10     	; 0x34c6 <__vector_48+0x3c>
    34bc:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <InterruptSenderTable+0x60>
    34c0:	90 91 09 24 	lds	r25, 0x2409	; 0x802409 <InterruptSenderTable+0x61>
    34c4:	19 95       	eicall
    34c6:	ff 91       	pop	r31
    34c8:	ef 91       	pop	r30
    34ca:	bf 91       	pop	r27
    34cc:	af 91       	pop	r26
    34ce:	9f 91       	pop	r25
    34d0:	8f 91       	pop	r24
    34d2:	7f 91       	pop	r23
    34d4:	6f 91       	pop	r22
    34d6:	5f 91       	pop	r21
    34d8:	4f 91       	pop	r20
    34da:	3f 91       	pop	r19
    34dc:	2f 91       	pop	r18
    34de:	0f 90       	pop	r0
    34e0:	0b be       	out	0x3b, r0	; 59
    34e2:	0f 90       	pop	r0
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	0f 90       	pop	r0
    34e8:	1f 90       	pop	r1
    34ea:	18 95       	reti

000034ec <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    34ec:	1f 92       	push	r1
    34ee:	0f 92       	push	r0
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	0f 92       	push	r0
    34f4:	11 24       	eor	r1, r1
    34f6:	0b b6       	in	r0, 0x3b	; 59
    34f8:	0f 92       	push	r0
    34fa:	2f 93       	push	r18
    34fc:	3f 93       	push	r19
    34fe:	4f 93       	push	r20
    3500:	5f 93       	push	r21
    3502:	6f 93       	push	r22
    3504:	7f 93       	push	r23
    3506:	8f 93       	push	r24
    3508:	9f 93       	push	r25
    350a:	af 93       	push	r26
    350c:	bf 93       	push	r27
    350e:	ef 93       	push	r30
    3510:	ff 93       	push	r31
    3512:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <InterruptFuncTable+0x62>
    3516:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <InterruptFuncTable+0x63>
    351a:	30 97       	sbiw	r30, 0x00	; 0
    351c:	29 f0       	breq	.+10     	; 0x3528 <__vector_49+0x3c>
    351e:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <InterruptSenderTable+0x62>
    3522:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <InterruptSenderTable+0x63>
    3526:	19 95       	eicall
    3528:	ff 91       	pop	r31
    352a:	ef 91       	pop	r30
    352c:	bf 91       	pop	r27
    352e:	af 91       	pop	r26
    3530:	9f 91       	pop	r25
    3532:	8f 91       	pop	r24
    3534:	7f 91       	pop	r23
    3536:	6f 91       	pop	r22
    3538:	5f 91       	pop	r21
    353a:	4f 91       	pop	r20
    353c:	3f 91       	pop	r19
    353e:	2f 91       	pop	r18
    3540:	0f 90       	pop	r0
    3542:	0b be       	out	0x3b, r0	; 59
    3544:	0f 90       	pop	r0
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	0f 90       	pop	r0
    354a:	1f 90       	pop	r1
    354c:	18 95       	reti

0000354e <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    354e:	1f 92       	push	r1
    3550:	0f 92       	push	r0
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	0f 92       	push	r0
    3556:	11 24       	eor	r1, r1
    3558:	0b b6       	in	r0, 0x3b	; 59
    355a:	0f 92       	push	r0
    355c:	2f 93       	push	r18
    355e:	3f 93       	push	r19
    3560:	4f 93       	push	r20
    3562:	5f 93       	push	r21
    3564:	6f 93       	push	r22
    3566:	7f 93       	push	r23
    3568:	8f 93       	push	r24
    356a:	9f 93       	push	r25
    356c:	af 93       	push	r26
    356e:	bf 93       	push	r27
    3570:	ef 93       	push	r30
    3572:	ff 93       	push	r31
    3574:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <InterruptFuncTable+0x64>
    3578:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <InterruptFuncTable+0x65>
    357c:	30 97       	sbiw	r30, 0x00	; 0
    357e:	29 f0       	breq	.+10     	; 0x358a <__vector_50+0x3c>
    3580:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <InterruptSenderTable+0x64>
    3584:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <InterruptSenderTable+0x65>
    3588:	19 95       	eicall
    358a:	ff 91       	pop	r31
    358c:	ef 91       	pop	r30
    358e:	bf 91       	pop	r27
    3590:	af 91       	pop	r26
    3592:	9f 91       	pop	r25
    3594:	8f 91       	pop	r24
    3596:	7f 91       	pop	r23
    3598:	6f 91       	pop	r22
    359a:	5f 91       	pop	r21
    359c:	4f 91       	pop	r20
    359e:	3f 91       	pop	r19
    35a0:	2f 91       	pop	r18
    35a2:	0f 90       	pop	r0
    35a4:	0b be       	out	0x3b, r0	; 59
    35a6:	0f 90       	pop	r0
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	0f 90       	pop	r0
    35ac:	1f 90       	pop	r1
    35ae:	18 95       	reti

000035b0 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    35b0:	1f 92       	push	r1
    35b2:	0f 92       	push	r0
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	0f 92       	push	r0
    35b8:	11 24       	eor	r1, r1
    35ba:	0b b6       	in	r0, 0x3b	; 59
    35bc:	0f 92       	push	r0
    35be:	2f 93       	push	r18
    35c0:	3f 93       	push	r19
    35c2:	4f 93       	push	r20
    35c4:	5f 93       	push	r21
    35c6:	6f 93       	push	r22
    35c8:	7f 93       	push	r23
    35ca:	8f 93       	push	r24
    35cc:	9f 93       	push	r25
    35ce:	af 93       	push	r26
    35d0:	bf 93       	push	r27
    35d2:	ef 93       	push	r30
    35d4:	ff 93       	push	r31
    35d6:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <InterruptFuncTable+0x66>
    35da:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <InterruptFuncTable+0x67>
    35de:	30 97       	sbiw	r30, 0x00	; 0
    35e0:	29 f0       	breq	.+10     	; 0x35ec <__vector_51+0x3c>
    35e2:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <InterruptSenderTable+0x66>
    35e6:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <InterruptSenderTable+0x67>
    35ea:	19 95       	eicall
    35ec:	ff 91       	pop	r31
    35ee:	ef 91       	pop	r30
    35f0:	bf 91       	pop	r27
    35f2:	af 91       	pop	r26
    35f4:	9f 91       	pop	r25
    35f6:	8f 91       	pop	r24
    35f8:	7f 91       	pop	r23
    35fa:	6f 91       	pop	r22
    35fc:	5f 91       	pop	r21
    35fe:	4f 91       	pop	r20
    3600:	3f 91       	pop	r19
    3602:	2f 91       	pop	r18
    3604:	0f 90       	pop	r0
    3606:	0b be       	out	0x3b, r0	; 59
    3608:	0f 90       	pop	r0
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	0f 90       	pop	r0
    360e:	1f 90       	pop	r1
    3610:	18 95       	reti

00003612 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    3612:	1f 92       	push	r1
    3614:	0f 92       	push	r0
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	0f 92       	push	r0
    361a:	11 24       	eor	r1, r1
    361c:	0b b6       	in	r0, 0x3b	; 59
    361e:	0f 92       	push	r0
    3620:	2f 93       	push	r18
    3622:	3f 93       	push	r19
    3624:	4f 93       	push	r20
    3626:	5f 93       	push	r21
    3628:	6f 93       	push	r22
    362a:	7f 93       	push	r23
    362c:	8f 93       	push	r24
    362e:	9f 93       	push	r25
    3630:	af 93       	push	r26
    3632:	bf 93       	push	r27
    3634:	ef 93       	push	r30
    3636:	ff 93       	push	r31
    3638:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <InterruptFuncTable+0x68>
    363c:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <InterruptFuncTable+0x69>
    3640:	30 97       	sbiw	r30, 0x00	; 0
    3642:	29 f0       	breq	.+10     	; 0x364e <__vector_52+0x3c>
    3644:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <InterruptSenderTable+0x68>
    3648:	90 91 11 24 	lds	r25, 0x2411	; 0x802411 <InterruptSenderTable+0x69>
    364c:	19 95       	eicall
    364e:	ff 91       	pop	r31
    3650:	ef 91       	pop	r30
    3652:	bf 91       	pop	r27
    3654:	af 91       	pop	r26
    3656:	9f 91       	pop	r25
    3658:	8f 91       	pop	r24
    365a:	7f 91       	pop	r23
    365c:	6f 91       	pop	r22
    365e:	5f 91       	pop	r21
    3660:	4f 91       	pop	r20
    3662:	3f 91       	pop	r19
    3664:	2f 91       	pop	r18
    3666:	0f 90       	pop	r0
    3668:	0b be       	out	0x3b, r0	; 59
    366a:	0f 90       	pop	r0
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	0f 90       	pop	r0
    3670:	1f 90       	pop	r1
    3672:	18 95       	reti

00003674 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    3674:	1f 92       	push	r1
    3676:	0f 92       	push	r0
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	0f 92       	push	r0
    367c:	11 24       	eor	r1, r1
    367e:	0b b6       	in	r0, 0x3b	; 59
    3680:	0f 92       	push	r0
    3682:	2f 93       	push	r18
    3684:	3f 93       	push	r19
    3686:	4f 93       	push	r20
    3688:	5f 93       	push	r21
    368a:	6f 93       	push	r22
    368c:	7f 93       	push	r23
    368e:	8f 93       	push	r24
    3690:	9f 93       	push	r25
    3692:	af 93       	push	r26
    3694:	bf 93       	push	r27
    3696:	ef 93       	push	r30
    3698:	ff 93       	push	r31
    369a:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <InterruptFuncTable+0x6a>
    369e:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <InterruptFuncTable+0x6b>
    36a2:	30 97       	sbiw	r30, 0x00	; 0
    36a4:	29 f0       	breq	.+10     	; 0x36b0 <__vector_53+0x3c>
    36a6:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <InterruptSenderTable+0x6a>
    36aa:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <InterruptSenderTable+0x6b>
    36ae:	19 95       	eicall
    36b0:	ff 91       	pop	r31
    36b2:	ef 91       	pop	r30
    36b4:	bf 91       	pop	r27
    36b6:	af 91       	pop	r26
    36b8:	9f 91       	pop	r25
    36ba:	8f 91       	pop	r24
    36bc:	7f 91       	pop	r23
    36be:	6f 91       	pop	r22
    36c0:	5f 91       	pop	r21
    36c2:	4f 91       	pop	r20
    36c4:	3f 91       	pop	r19
    36c6:	2f 91       	pop	r18
    36c8:	0f 90       	pop	r0
    36ca:	0b be       	out	0x3b, r0	; 59
    36cc:	0f 90       	pop	r0
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	0f 90       	pop	r0
    36d2:	1f 90       	pop	r1
    36d4:	18 95       	reti

000036d6 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    36d6:	1f 92       	push	r1
    36d8:	0f 92       	push	r0
    36da:	0f b6       	in	r0, 0x3f	; 63
    36dc:	0f 92       	push	r0
    36de:	11 24       	eor	r1, r1
    36e0:	0b b6       	in	r0, 0x3b	; 59
    36e2:	0f 92       	push	r0
    36e4:	2f 93       	push	r18
    36e6:	3f 93       	push	r19
    36e8:	4f 93       	push	r20
    36ea:	5f 93       	push	r21
    36ec:	6f 93       	push	r22
    36ee:	7f 93       	push	r23
    36f0:	8f 93       	push	r24
    36f2:	9f 93       	push	r25
    36f4:	af 93       	push	r26
    36f6:	bf 93       	push	r27
    36f8:	ef 93       	push	r30
    36fa:	ff 93       	push	r31
    36fc:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <InterruptFuncTable+0x6c>
    3700:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <InterruptFuncTable+0x6d>
    3704:	30 97       	sbiw	r30, 0x00	; 0
    3706:	29 f0       	breq	.+10     	; 0x3712 <__vector_54+0x3c>
    3708:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <InterruptSenderTable+0x6c>
    370c:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <InterruptSenderTable+0x6d>
    3710:	19 95       	eicall
    3712:	ff 91       	pop	r31
    3714:	ef 91       	pop	r30
    3716:	bf 91       	pop	r27
    3718:	af 91       	pop	r26
    371a:	9f 91       	pop	r25
    371c:	8f 91       	pop	r24
    371e:	7f 91       	pop	r23
    3720:	6f 91       	pop	r22
    3722:	5f 91       	pop	r21
    3724:	4f 91       	pop	r20
    3726:	3f 91       	pop	r19
    3728:	2f 91       	pop	r18
    372a:	0f 90       	pop	r0
    372c:	0b be       	out	0x3b, r0	; 59
    372e:	0f 90       	pop	r0
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	0f 90       	pop	r0
    3734:	1f 90       	pop	r1
    3736:	18 95       	reti

00003738 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    3738:	1f 92       	push	r1
    373a:	0f 92       	push	r0
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	0f 92       	push	r0
    3740:	11 24       	eor	r1, r1
    3742:	0b b6       	in	r0, 0x3b	; 59
    3744:	0f 92       	push	r0
    3746:	2f 93       	push	r18
    3748:	3f 93       	push	r19
    374a:	4f 93       	push	r20
    374c:	5f 93       	push	r21
    374e:	6f 93       	push	r22
    3750:	7f 93       	push	r23
    3752:	8f 93       	push	r24
    3754:	9f 93       	push	r25
    3756:	af 93       	push	r26
    3758:	bf 93       	push	r27
    375a:	ef 93       	push	r30
    375c:	ff 93       	push	r31
    375e:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <InterruptFuncTable+0x6e>
    3762:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <InterruptFuncTable+0x6f>
    3766:	30 97       	sbiw	r30, 0x00	; 0
    3768:	29 f0       	breq	.+10     	; 0x3774 <__vector_55+0x3c>
    376a:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <InterruptSenderTable+0x6e>
    376e:	90 91 17 24 	lds	r25, 0x2417	; 0x802417 <InterruptSenderTable+0x6f>
    3772:	19 95       	eicall
    3774:	ff 91       	pop	r31
    3776:	ef 91       	pop	r30
    3778:	bf 91       	pop	r27
    377a:	af 91       	pop	r26
    377c:	9f 91       	pop	r25
    377e:	8f 91       	pop	r24
    3780:	7f 91       	pop	r23
    3782:	6f 91       	pop	r22
    3784:	5f 91       	pop	r21
    3786:	4f 91       	pop	r20
    3788:	3f 91       	pop	r19
    378a:	2f 91       	pop	r18
    378c:	0f 90       	pop	r0
    378e:	0b be       	out	0x3b, r0	; 59
    3790:	0f 90       	pop	r0
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	0f 90       	pop	r0
    3796:	1f 90       	pop	r1
    3798:	18 95       	reti

0000379a <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    379a:	1f 92       	push	r1
    379c:	0f 92       	push	r0
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	0f 92       	push	r0
    37a2:	11 24       	eor	r1, r1
    37a4:	0b b6       	in	r0, 0x3b	; 59
    37a6:	0f 92       	push	r0
    37a8:	2f 93       	push	r18
    37aa:	3f 93       	push	r19
    37ac:	4f 93       	push	r20
    37ae:	5f 93       	push	r21
    37b0:	6f 93       	push	r22
    37b2:	7f 93       	push	r23
    37b4:	8f 93       	push	r24
    37b6:	9f 93       	push	r25
    37b8:	af 93       	push	r26
    37ba:	bf 93       	push	r27
    37bc:	ef 93       	push	r30
    37be:	ff 93       	push	r31
    37c0:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <InterruptFuncTable+0x70>
    37c4:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <InterruptFuncTable+0x71>
    37c8:	30 97       	sbiw	r30, 0x00	; 0
    37ca:	29 f0       	breq	.+10     	; 0x37d6 <__vector_56+0x3c>
    37cc:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <InterruptSenderTable+0x70>
    37d0:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <InterruptSenderTable+0x71>
    37d4:	19 95       	eicall
    37d6:	ff 91       	pop	r31
    37d8:	ef 91       	pop	r30
    37da:	bf 91       	pop	r27
    37dc:	af 91       	pop	r26
    37de:	9f 91       	pop	r25
    37e0:	8f 91       	pop	r24
    37e2:	7f 91       	pop	r23
    37e4:	6f 91       	pop	r22
    37e6:	5f 91       	pop	r21
    37e8:	4f 91       	pop	r20
    37ea:	3f 91       	pop	r19
    37ec:	2f 91       	pop	r18
    37ee:	0f 90       	pop	r0
    37f0:	0b be       	out	0x3b, r0	; 59
    37f2:	0f 90       	pop	r0
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	0f 90       	pop	r0
    37f8:	1f 90       	pop	r1
    37fa:	18 95       	reti

000037fc <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    37fc:	1f 92       	push	r1
    37fe:	0f 92       	push	r0
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	0f 92       	push	r0
    3804:	11 24       	eor	r1, r1
    3806:	0b b6       	in	r0, 0x3b	; 59
    3808:	0f 92       	push	r0
    380a:	2f 93       	push	r18
    380c:	3f 93       	push	r19
    380e:	4f 93       	push	r20
    3810:	5f 93       	push	r21
    3812:	6f 93       	push	r22
    3814:	7f 93       	push	r23
    3816:	8f 93       	push	r24
    3818:	9f 93       	push	r25
    381a:	af 93       	push	r26
    381c:	bf 93       	push	r27
    381e:	ef 93       	push	r30
    3820:	ff 93       	push	r31
    3822:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <InterruptFuncTable+0x72>
    3826:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <InterruptFuncTable+0x73>
    382a:	30 97       	sbiw	r30, 0x00	; 0
    382c:	29 f0       	breq	.+10     	; 0x3838 <__vector_57+0x3c>
    382e:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <InterruptSenderTable+0x72>
    3832:	90 91 1b 24 	lds	r25, 0x241B	; 0x80241b <InterruptSenderTable+0x73>
    3836:	19 95       	eicall
    3838:	ff 91       	pop	r31
    383a:	ef 91       	pop	r30
    383c:	bf 91       	pop	r27
    383e:	af 91       	pop	r26
    3840:	9f 91       	pop	r25
    3842:	8f 91       	pop	r24
    3844:	7f 91       	pop	r23
    3846:	6f 91       	pop	r22
    3848:	5f 91       	pop	r21
    384a:	4f 91       	pop	r20
    384c:	3f 91       	pop	r19
    384e:	2f 91       	pop	r18
    3850:	0f 90       	pop	r0
    3852:	0b be       	out	0x3b, r0	; 59
    3854:	0f 90       	pop	r0
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	0f 90       	pop	r0
    385a:	1f 90       	pop	r1
    385c:	18 95       	reti

0000385e <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    385e:	1f 92       	push	r1
    3860:	0f 92       	push	r0
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	0f 92       	push	r0
    3866:	11 24       	eor	r1, r1
    3868:	0b b6       	in	r0, 0x3b	; 59
    386a:	0f 92       	push	r0
    386c:	2f 93       	push	r18
    386e:	3f 93       	push	r19
    3870:	4f 93       	push	r20
    3872:	5f 93       	push	r21
    3874:	6f 93       	push	r22
    3876:	7f 93       	push	r23
    3878:	8f 93       	push	r24
    387a:	9f 93       	push	r25
    387c:	af 93       	push	r26
    387e:	bf 93       	push	r27
    3880:	ef 93       	push	r30
    3882:	ff 93       	push	r31
    3884:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <InterruptFuncTable+0x74>
    3888:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <InterruptFuncTable+0x75>
    388c:	30 97       	sbiw	r30, 0x00	; 0
    388e:	29 f0       	breq	.+10     	; 0x389a <__vector_58+0x3c>
    3890:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <InterruptSenderTable+0x74>
    3894:	90 91 1d 24 	lds	r25, 0x241D	; 0x80241d <InterruptSenderTable+0x75>
    3898:	19 95       	eicall
    389a:	ff 91       	pop	r31
    389c:	ef 91       	pop	r30
    389e:	bf 91       	pop	r27
    38a0:	af 91       	pop	r26
    38a2:	9f 91       	pop	r25
    38a4:	8f 91       	pop	r24
    38a6:	7f 91       	pop	r23
    38a8:	6f 91       	pop	r22
    38aa:	5f 91       	pop	r21
    38ac:	4f 91       	pop	r20
    38ae:	3f 91       	pop	r19
    38b0:	2f 91       	pop	r18
    38b2:	0f 90       	pop	r0
    38b4:	0b be       	out	0x3b, r0	; 59
    38b6:	0f 90       	pop	r0
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	0f 90       	pop	r0
    38bc:	1f 90       	pop	r1
    38be:	18 95       	reti

000038c0 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    38c0:	1f 92       	push	r1
    38c2:	0f 92       	push	r0
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	0f 92       	push	r0
    38c8:	11 24       	eor	r1, r1
    38ca:	0b b6       	in	r0, 0x3b	; 59
    38cc:	0f 92       	push	r0
    38ce:	2f 93       	push	r18
    38d0:	3f 93       	push	r19
    38d2:	4f 93       	push	r20
    38d4:	5f 93       	push	r21
    38d6:	6f 93       	push	r22
    38d8:	7f 93       	push	r23
    38da:	8f 93       	push	r24
    38dc:	9f 93       	push	r25
    38de:	af 93       	push	r26
    38e0:	bf 93       	push	r27
    38e2:	ef 93       	push	r30
    38e4:	ff 93       	push	r31
    38e6:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <InterruptFuncTable+0x76>
    38ea:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <InterruptFuncTable+0x77>
    38ee:	30 97       	sbiw	r30, 0x00	; 0
    38f0:	29 f0       	breq	.+10     	; 0x38fc <__vector_59+0x3c>
    38f2:	80 91 1e 24 	lds	r24, 0x241E	; 0x80241e <InterruptSenderTable+0x76>
    38f6:	90 91 1f 24 	lds	r25, 0x241F	; 0x80241f <InterruptSenderTable+0x77>
    38fa:	19 95       	eicall
    38fc:	ff 91       	pop	r31
    38fe:	ef 91       	pop	r30
    3900:	bf 91       	pop	r27
    3902:	af 91       	pop	r26
    3904:	9f 91       	pop	r25
    3906:	8f 91       	pop	r24
    3908:	7f 91       	pop	r23
    390a:	6f 91       	pop	r22
    390c:	5f 91       	pop	r21
    390e:	4f 91       	pop	r20
    3910:	3f 91       	pop	r19
    3912:	2f 91       	pop	r18
    3914:	0f 90       	pop	r0
    3916:	0b be       	out	0x3b, r0	; 59
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0f 90       	pop	r0
    391e:	1f 90       	pop	r1
    3920:	18 95       	reti

00003922 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3922:	1f 92       	push	r1
    3924:	0f 92       	push	r0
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	0f 92       	push	r0
    392a:	11 24       	eor	r1, r1
    392c:	0b b6       	in	r0, 0x3b	; 59
    392e:	0f 92       	push	r0
    3930:	2f 93       	push	r18
    3932:	3f 93       	push	r19
    3934:	4f 93       	push	r20
    3936:	5f 93       	push	r21
    3938:	6f 93       	push	r22
    393a:	7f 93       	push	r23
    393c:	8f 93       	push	r24
    393e:	9f 93       	push	r25
    3940:	af 93       	push	r26
    3942:	bf 93       	push	r27
    3944:	ef 93       	push	r30
    3946:	ff 93       	push	r31
    3948:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <InterruptFuncTable+0x78>
    394c:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <InterruptFuncTable+0x79>
    3950:	30 97       	sbiw	r30, 0x00	; 0
    3952:	29 f0       	breq	.+10     	; 0x395e <__vector_60+0x3c>
    3954:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <InterruptSenderTable+0x78>
    3958:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <InterruptSenderTable+0x79>
    395c:	19 95       	eicall
    395e:	ff 91       	pop	r31
    3960:	ef 91       	pop	r30
    3962:	bf 91       	pop	r27
    3964:	af 91       	pop	r26
    3966:	9f 91       	pop	r25
    3968:	8f 91       	pop	r24
    396a:	7f 91       	pop	r23
    396c:	6f 91       	pop	r22
    396e:	5f 91       	pop	r21
    3970:	4f 91       	pop	r20
    3972:	3f 91       	pop	r19
    3974:	2f 91       	pop	r18
    3976:	0f 90       	pop	r0
    3978:	0b be       	out	0x3b, r0	; 59
    397a:	0f 90       	pop	r0
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	0f 90       	pop	r0
    3980:	1f 90       	pop	r1
    3982:	18 95       	reti

00003984 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3984:	1f 92       	push	r1
    3986:	0f 92       	push	r0
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	0f 92       	push	r0
    398c:	11 24       	eor	r1, r1
    398e:	0b b6       	in	r0, 0x3b	; 59
    3990:	0f 92       	push	r0
    3992:	2f 93       	push	r18
    3994:	3f 93       	push	r19
    3996:	4f 93       	push	r20
    3998:	5f 93       	push	r21
    399a:	6f 93       	push	r22
    399c:	7f 93       	push	r23
    399e:	8f 93       	push	r24
    39a0:	9f 93       	push	r25
    39a2:	af 93       	push	r26
    39a4:	bf 93       	push	r27
    39a6:	ef 93       	push	r30
    39a8:	ff 93       	push	r31
    39aa:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <InterruptFuncTable+0x7a>
    39ae:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <InterruptFuncTable+0x7b>
    39b2:	30 97       	sbiw	r30, 0x00	; 0
    39b4:	29 f0       	breq	.+10     	; 0x39c0 <__vector_61+0x3c>
    39b6:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <InterruptSenderTable+0x7a>
    39ba:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <InterruptSenderTable+0x7b>
    39be:	19 95       	eicall
    39c0:	ff 91       	pop	r31
    39c2:	ef 91       	pop	r30
    39c4:	bf 91       	pop	r27
    39c6:	af 91       	pop	r26
    39c8:	9f 91       	pop	r25
    39ca:	8f 91       	pop	r24
    39cc:	7f 91       	pop	r23
    39ce:	6f 91       	pop	r22
    39d0:	5f 91       	pop	r21
    39d2:	4f 91       	pop	r20
    39d4:	3f 91       	pop	r19
    39d6:	2f 91       	pop	r18
    39d8:	0f 90       	pop	r0
    39da:	0b be       	out	0x3b, r0	; 59
    39dc:	0f 90       	pop	r0
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	0f 90       	pop	r0
    39e2:	1f 90       	pop	r1
    39e4:	18 95       	reti

000039e6 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    39e6:	1f 92       	push	r1
    39e8:	0f 92       	push	r0
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	0f 92       	push	r0
    39ee:	11 24       	eor	r1, r1
    39f0:	0b b6       	in	r0, 0x3b	; 59
    39f2:	0f 92       	push	r0
    39f4:	2f 93       	push	r18
    39f6:	3f 93       	push	r19
    39f8:	4f 93       	push	r20
    39fa:	5f 93       	push	r21
    39fc:	6f 93       	push	r22
    39fe:	7f 93       	push	r23
    3a00:	8f 93       	push	r24
    3a02:	9f 93       	push	r25
    3a04:	af 93       	push	r26
    3a06:	bf 93       	push	r27
    3a08:	ef 93       	push	r30
    3a0a:	ff 93       	push	r31
    3a0c:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <InterruptFuncTable+0x7c>
    3a10:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <InterruptFuncTable+0x7d>
    3a14:	30 97       	sbiw	r30, 0x00	; 0
    3a16:	29 f0       	breq	.+10     	; 0x3a22 <__vector_62+0x3c>
    3a18:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <InterruptSenderTable+0x7c>
    3a1c:	90 91 25 24 	lds	r25, 0x2425	; 0x802425 <InterruptSenderTable+0x7d>
    3a20:	19 95       	eicall
    3a22:	ff 91       	pop	r31
    3a24:	ef 91       	pop	r30
    3a26:	bf 91       	pop	r27
    3a28:	af 91       	pop	r26
    3a2a:	9f 91       	pop	r25
    3a2c:	8f 91       	pop	r24
    3a2e:	7f 91       	pop	r23
    3a30:	6f 91       	pop	r22
    3a32:	5f 91       	pop	r21
    3a34:	4f 91       	pop	r20
    3a36:	3f 91       	pop	r19
    3a38:	2f 91       	pop	r18
    3a3a:	0f 90       	pop	r0
    3a3c:	0b be       	out	0x3b, r0	; 59
    3a3e:	0f 90       	pop	r0
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	0f 90       	pop	r0
    3a44:	1f 90       	pop	r1
    3a46:	18 95       	reti

00003a48 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3a48:	1f 92       	push	r1
    3a4a:	0f 92       	push	r0
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	0f 92       	push	r0
    3a50:	11 24       	eor	r1, r1
    3a52:	0b b6       	in	r0, 0x3b	; 59
    3a54:	0f 92       	push	r0
    3a56:	2f 93       	push	r18
    3a58:	3f 93       	push	r19
    3a5a:	4f 93       	push	r20
    3a5c:	5f 93       	push	r21
    3a5e:	6f 93       	push	r22
    3a60:	7f 93       	push	r23
    3a62:	8f 93       	push	r24
    3a64:	9f 93       	push	r25
    3a66:	af 93       	push	r26
    3a68:	bf 93       	push	r27
    3a6a:	ef 93       	push	r30
    3a6c:	ff 93       	push	r31
    3a6e:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <InterruptFuncTable+0x7e>
    3a72:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <InterruptFuncTable+0x7f>
    3a76:	30 97       	sbiw	r30, 0x00	; 0
    3a78:	29 f0       	breq	.+10     	; 0x3a84 <__vector_63+0x3c>
    3a7a:	80 91 26 24 	lds	r24, 0x2426	; 0x802426 <InterruptSenderTable+0x7e>
    3a7e:	90 91 27 24 	lds	r25, 0x2427	; 0x802427 <InterruptSenderTable+0x7f>
    3a82:	19 95       	eicall
    3a84:	ff 91       	pop	r31
    3a86:	ef 91       	pop	r30
    3a88:	bf 91       	pop	r27
    3a8a:	af 91       	pop	r26
    3a8c:	9f 91       	pop	r25
    3a8e:	8f 91       	pop	r24
    3a90:	7f 91       	pop	r23
    3a92:	6f 91       	pop	r22
    3a94:	5f 91       	pop	r21
    3a96:	4f 91       	pop	r20
    3a98:	3f 91       	pop	r19
    3a9a:	2f 91       	pop	r18
    3a9c:	0f 90       	pop	r0
    3a9e:	0b be       	out	0x3b, r0	; 59
    3aa0:	0f 90       	pop	r0
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	0f 90       	pop	r0
    3aa6:	1f 90       	pop	r1
    3aa8:	18 95       	reti

00003aaa <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3aaa:	1f 92       	push	r1
    3aac:	0f 92       	push	r0
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	0f 92       	push	r0
    3ab2:	11 24       	eor	r1, r1
    3ab4:	0b b6       	in	r0, 0x3b	; 59
    3ab6:	0f 92       	push	r0
    3ab8:	2f 93       	push	r18
    3aba:	3f 93       	push	r19
    3abc:	4f 93       	push	r20
    3abe:	5f 93       	push	r21
    3ac0:	6f 93       	push	r22
    3ac2:	7f 93       	push	r23
    3ac4:	8f 93       	push	r24
    3ac6:	9f 93       	push	r25
    3ac8:	af 93       	push	r26
    3aca:	bf 93       	push	r27
    3acc:	ef 93       	push	r30
    3ace:	ff 93       	push	r31
    3ad0:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <InterruptFuncTable+0x80>
    3ad4:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <InterruptFuncTable+0x81>
    3ad8:	30 97       	sbiw	r30, 0x00	; 0
    3ada:	29 f0       	breq	.+10     	; 0x3ae6 <__vector_64+0x3c>
    3adc:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <InterruptSenderTable+0x80>
    3ae0:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <InterruptSenderTable+0x81>
    3ae4:	19 95       	eicall
    3ae6:	ff 91       	pop	r31
    3ae8:	ef 91       	pop	r30
    3aea:	bf 91       	pop	r27
    3aec:	af 91       	pop	r26
    3aee:	9f 91       	pop	r25
    3af0:	8f 91       	pop	r24
    3af2:	7f 91       	pop	r23
    3af4:	6f 91       	pop	r22
    3af6:	5f 91       	pop	r21
    3af8:	4f 91       	pop	r20
    3afa:	3f 91       	pop	r19
    3afc:	2f 91       	pop	r18
    3afe:	0f 90       	pop	r0
    3b00:	0b be       	out	0x3b, r0	; 59
    3b02:	0f 90       	pop	r0
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	0f 90       	pop	r0
    3b08:	1f 90       	pop	r1
    3b0a:	18 95       	reti

00003b0c <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3b0c:	1f 92       	push	r1
    3b0e:	0f 92       	push	r0
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	0f 92       	push	r0
    3b14:	11 24       	eor	r1, r1
    3b16:	0b b6       	in	r0, 0x3b	; 59
    3b18:	0f 92       	push	r0
    3b1a:	2f 93       	push	r18
    3b1c:	3f 93       	push	r19
    3b1e:	4f 93       	push	r20
    3b20:	5f 93       	push	r21
    3b22:	6f 93       	push	r22
    3b24:	7f 93       	push	r23
    3b26:	8f 93       	push	r24
    3b28:	9f 93       	push	r25
    3b2a:	af 93       	push	r26
    3b2c:	bf 93       	push	r27
    3b2e:	ef 93       	push	r30
    3b30:	ff 93       	push	r31
    3b32:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <InterruptFuncTable+0x82>
    3b36:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <InterruptFuncTable+0x83>
    3b3a:	30 97       	sbiw	r30, 0x00	; 0
    3b3c:	29 f0       	breq	.+10     	; 0x3b48 <__vector_65+0x3c>
    3b3e:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <InterruptSenderTable+0x82>
    3b42:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <InterruptSenderTable+0x83>
    3b46:	19 95       	eicall
    3b48:	ff 91       	pop	r31
    3b4a:	ef 91       	pop	r30
    3b4c:	bf 91       	pop	r27
    3b4e:	af 91       	pop	r26
    3b50:	9f 91       	pop	r25
    3b52:	8f 91       	pop	r24
    3b54:	7f 91       	pop	r23
    3b56:	6f 91       	pop	r22
    3b58:	5f 91       	pop	r21
    3b5a:	4f 91       	pop	r20
    3b5c:	3f 91       	pop	r19
    3b5e:	2f 91       	pop	r18
    3b60:	0f 90       	pop	r0
    3b62:	0b be       	out	0x3b, r0	; 59
    3b64:	0f 90       	pop	r0
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	0f 90       	pop	r0
    3b6a:	1f 90       	pop	r1
    3b6c:	18 95       	reti

00003b6e <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3b6e:	1f 92       	push	r1
    3b70:	0f 92       	push	r0
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	0f 92       	push	r0
    3b76:	11 24       	eor	r1, r1
    3b78:	0b b6       	in	r0, 0x3b	; 59
    3b7a:	0f 92       	push	r0
    3b7c:	2f 93       	push	r18
    3b7e:	3f 93       	push	r19
    3b80:	4f 93       	push	r20
    3b82:	5f 93       	push	r21
    3b84:	6f 93       	push	r22
    3b86:	7f 93       	push	r23
    3b88:	8f 93       	push	r24
    3b8a:	9f 93       	push	r25
    3b8c:	af 93       	push	r26
    3b8e:	bf 93       	push	r27
    3b90:	ef 93       	push	r30
    3b92:	ff 93       	push	r31
    3b94:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <InterruptFuncTable+0x84>
    3b98:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <InterruptFuncTable+0x85>
    3b9c:	30 97       	sbiw	r30, 0x00	; 0
    3b9e:	29 f0       	breq	.+10     	; 0x3baa <__vector_66+0x3c>
    3ba0:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <InterruptSenderTable+0x84>
    3ba4:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <InterruptSenderTable+0x85>
    3ba8:	19 95       	eicall
    3baa:	ff 91       	pop	r31
    3bac:	ef 91       	pop	r30
    3bae:	bf 91       	pop	r27
    3bb0:	af 91       	pop	r26
    3bb2:	9f 91       	pop	r25
    3bb4:	8f 91       	pop	r24
    3bb6:	7f 91       	pop	r23
    3bb8:	6f 91       	pop	r22
    3bba:	5f 91       	pop	r21
    3bbc:	4f 91       	pop	r20
    3bbe:	3f 91       	pop	r19
    3bc0:	2f 91       	pop	r18
    3bc2:	0f 90       	pop	r0
    3bc4:	0b be       	out	0x3b, r0	; 59
    3bc6:	0f 90       	pop	r0
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	0f 90       	pop	r0
    3bcc:	1f 90       	pop	r1
    3bce:	18 95       	reti

00003bd0 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3bd0:	1f 92       	push	r1
    3bd2:	0f 92       	push	r0
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	0f 92       	push	r0
    3bd8:	11 24       	eor	r1, r1
    3bda:	0b b6       	in	r0, 0x3b	; 59
    3bdc:	0f 92       	push	r0
    3bde:	2f 93       	push	r18
    3be0:	3f 93       	push	r19
    3be2:	4f 93       	push	r20
    3be4:	5f 93       	push	r21
    3be6:	6f 93       	push	r22
    3be8:	7f 93       	push	r23
    3bea:	8f 93       	push	r24
    3bec:	9f 93       	push	r25
    3bee:	af 93       	push	r26
    3bf0:	bf 93       	push	r27
    3bf2:	ef 93       	push	r30
    3bf4:	ff 93       	push	r31
    3bf6:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <InterruptFuncTable+0x86>
    3bfa:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <InterruptFuncTable+0x87>
    3bfe:	30 97       	sbiw	r30, 0x00	; 0
    3c00:	29 f0       	breq	.+10     	; 0x3c0c <__vector_67+0x3c>
    3c02:	80 91 2e 24 	lds	r24, 0x242E	; 0x80242e <InterruptSenderTable+0x86>
    3c06:	90 91 2f 24 	lds	r25, 0x242F	; 0x80242f <InterruptSenderTable+0x87>
    3c0a:	19 95       	eicall
    3c0c:	ff 91       	pop	r31
    3c0e:	ef 91       	pop	r30
    3c10:	bf 91       	pop	r27
    3c12:	af 91       	pop	r26
    3c14:	9f 91       	pop	r25
    3c16:	8f 91       	pop	r24
    3c18:	7f 91       	pop	r23
    3c1a:	6f 91       	pop	r22
    3c1c:	5f 91       	pop	r21
    3c1e:	4f 91       	pop	r20
    3c20:	3f 91       	pop	r19
    3c22:	2f 91       	pop	r18
    3c24:	0f 90       	pop	r0
    3c26:	0b be       	out	0x3b, r0	; 59
    3c28:	0f 90       	pop	r0
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	0f 90       	pop	r0
    3c2e:	1f 90       	pop	r1
    3c30:	18 95       	reti

00003c32 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3c32:	1f 92       	push	r1
    3c34:	0f 92       	push	r0
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	0f 92       	push	r0
    3c3a:	11 24       	eor	r1, r1
    3c3c:	0b b6       	in	r0, 0x3b	; 59
    3c3e:	0f 92       	push	r0
    3c40:	2f 93       	push	r18
    3c42:	3f 93       	push	r19
    3c44:	4f 93       	push	r20
    3c46:	5f 93       	push	r21
    3c48:	6f 93       	push	r22
    3c4a:	7f 93       	push	r23
    3c4c:	8f 93       	push	r24
    3c4e:	9f 93       	push	r25
    3c50:	af 93       	push	r26
    3c52:	bf 93       	push	r27
    3c54:	ef 93       	push	r30
    3c56:	ff 93       	push	r31
    3c58:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <InterruptFuncTable+0x88>
    3c5c:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <InterruptFuncTable+0x89>
    3c60:	30 97       	sbiw	r30, 0x00	; 0
    3c62:	29 f0       	breq	.+10     	; 0x3c6e <__vector_68+0x3c>
    3c64:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <InterruptSenderTable+0x88>
    3c68:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <InterruptSenderTable+0x89>
    3c6c:	19 95       	eicall
    3c6e:	ff 91       	pop	r31
    3c70:	ef 91       	pop	r30
    3c72:	bf 91       	pop	r27
    3c74:	af 91       	pop	r26
    3c76:	9f 91       	pop	r25
    3c78:	8f 91       	pop	r24
    3c7a:	7f 91       	pop	r23
    3c7c:	6f 91       	pop	r22
    3c7e:	5f 91       	pop	r21
    3c80:	4f 91       	pop	r20
    3c82:	3f 91       	pop	r19
    3c84:	2f 91       	pop	r18
    3c86:	0f 90       	pop	r0
    3c88:	0b be       	out	0x3b, r0	; 59
    3c8a:	0f 90       	pop	r0
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	0f 90       	pop	r0
    3c90:	1f 90       	pop	r1
    3c92:	18 95       	reti

00003c94 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3c94:	1f 92       	push	r1
    3c96:	0f 92       	push	r0
    3c98:	0f b6       	in	r0, 0x3f	; 63
    3c9a:	0f 92       	push	r0
    3c9c:	11 24       	eor	r1, r1
    3c9e:	0b b6       	in	r0, 0x3b	; 59
    3ca0:	0f 92       	push	r0
    3ca2:	2f 93       	push	r18
    3ca4:	3f 93       	push	r19
    3ca6:	4f 93       	push	r20
    3ca8:	5f 93       	push	r21
    3caa:	6f 93       	push	r22
    3cac:	7f 93       	push	r23
    3cae:	8f 93       	push	r24
    3cb0:	9f 93       	push	r25
    3cb2:	af 93       	push	r26
    3cb4:	bf 93       	push	r27
    3cb6:	ef 93       	push	r30
    3cb8:	ff 93       	push	r31
    3cba:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <InterruptFuncTable+0x8a>
    3cbe:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <InterruptFuncTable+0x8b>
    3cc2:	30 97       	sbiw	r30, 0x00	; 0
    3cc4:	29 f0       	breq	.+10     	; 0x3cd0 <__vector_69+0x3c>
    3cc6:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <InterruptSenderTable+0x8a>
    3cca:	90 91 33 24 	lds	r25, 0x2433	; 0x802433 <InterruptSenderTable+0x8b>
    3cce:	19 95       	eicall
    3cd0:	ff 91       	pop	r31
    3cd2:	ef 91       	pop	r30
    3cd4:	bf 91       	pop	r27
    3cd6:	af 91       	pop	r26
    3cd8:	9f 91       	pop	r25
    3cda:	8f 91       	pop	r24
    3cdc:	7f 91       	pop	r23
    3cde:	6f 91       	pop	r22
    3ce0:	5f 91       	pop	r21
    3ce2:	4f 91       	pop	r20
    3ce4:	3f 91       	pop	r19
    3ce6:	2f 91       	pop	r18
    3ce8:	0f 90       	pop	r0
    3cea:	0b be       	out	0x3b, r0	; 59
    3cec:	0f 90       	pop	r0
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	0f 90       	pop	r0
    3cf2:	1f 90       	pop	r1
    3cf4:	18 95       	reti

00003cf6 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3cf6:	1f 92       	push	r1
    3cf8:	0f 92       	push	r0
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	0f 92       	push	r0
    3cfe:	11 24       	eor	r1, r1
    3d00:	0b b6       	in	r0, 0x3b	; 59
    3d02:	0f 92       	push	r0
    3d04:	2f 93       	push	r18
    3d06:	3f 93       	push	r19
    3d08:	4f 93       	push	r20
    3d0a:	5f 93       	push	r21
    3d0c:	6f 93       	push	r22
    3d0e:	7f 93       	push	r23
    3d10:	8f 93       	push	r24
    3d12:	9f 93       	push	r25
    3d14:	af 93       	push	r26
    3d16:	bf 93       	push	r27
    3d18:	ef 93       	push	r30
    3d1a:	ff 93       	push	r31
    3d1c:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <InterruptFuncTable+0x8c>
    3d20:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <InterruptFuncTable+0x8d>
    3d24:	30 97       	sbiw	r30, 0x00	; 0
    3d26:	29 f0       	breq	.+10     	; 0x3d32 <__vector_70+0x3c>
    3d28:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <InterruptSenderTable+0x8c>
    3d2c:	90 91 35 24 	lds	r25, 0x2435	; 0x802435 <InterruptSenderTable+0x8d>
    3d30:	19 95       	eicall
    3d32:	ff 91       	pop	r31
    3d34:	ef 91       	pop	r30
    3d36:	bf 91       	pop	r27
    3d38:	af 91       	pop	r26
    3d3a:	9f 91       	pop	r25
    3d3c:	8f 91       	pop	r24
    3d3e:	7f 91       	pop	r23
    3d40:	6f 91       	pop	r22
    3d42:	5f 91       	pop	r21
    3d44:	4f 91       	pop	r20
    3d46:	3f 91       	pop	r19
    3d48:	2f 91       	pop	r18
    3d4a:	0f 90       	pop	r0
    3d4c:	0b be       	out	0x3b, r0	; 59
    3d4e:	0f 90       	pop	r0
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	0f 90       	pop	r0
    3d54:	1f 90       	pop	r1
    3d56:	18 95       	reti

00003d58 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3d58:	1f 92       	push	r1
    3d5a:	0f 92       	push	r0
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	0f 92       	push	r0
    3d60:	11 24       	eor	r1, r1
    3d62:	0b b6       	in	r0, 0x3b	; 59
    3d64:	0f 92       	push	r0
    3d66:	2f 93       	push	r18
    3d68:	3f 93       	push	r19
    3d6a:	4f 93       	push	r20
    3d6c:	5f 93       	push	r21
    3d6e:	6f 93       	push	r22
    3d70:	7f 93       	push	r23
    3d72:	8f 93       	push	r24
    3d74:	9f 93       	push	r25
    3d76:	af 93       	push	r26
    3d78:	bf 93       	push	r27
    3d7a:	ef 93       	push	r30
    3d7c:	ff 93       	push	r31
    3d7e:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <InterruptFuncTable+0x8e>
    3d82:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <InterruptFuncTable+0x8f>
    3d86:	30 97       	sbiw	r30, 0x00	; 0
    3d88:	29 f0       	breq	.+10     	; 0x3d94 <__vector_71+0x3c>
    3d8a:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <InterruptSenderTable+0x8e>
    3d8e:	90 91 37 24 	lds	r25, 0x2437	; 0x802437 <InterruptSenderTable+0x8f>
    3d92:	19 95       	eicall
    3d94:	ff 91       	pop	r31
    3d96:	ef 91       	pop	r30
    3d98:	bf 91       	pop	r27
    3d9a:	af 91       	pop	r26
    3d9c:	9f 91       	pop	r25
    3d9e:	8f 91       	pop	r24
    3da0:	7f 91       	pop	r23
    3da2:	6f 91       	pop	r22
    3da4:	5f 91       	pop	r21
    3da6:	4f 91       	pop	r20
    3da8:	3f 91       	pop	r19
    3daa:	2f 91       	pop	r18
    3dac:	0f 90       	pop	r0
    3dae:	0b be       	out	0x3b, r0	; 59
    3db0:	0f 90       	pop	r0
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	0f 90       	pop	r0
    3db6:	1f 90       	pop	r1
    3db8:	18 95       	reti

00003dba <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3dba:	1f 92       	push	r1
    3dbc:	0f 92       	push	r0
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	0f 92       	push	r0
    3dc2:	11 24       	eor	r1, r1
    3dc4:	0b b6       	in	r0, 0x3b	; 59
    3dc6:	0f 92       	push	r0
    3dc8:	2f 93       	push	r18
    3dca:	3f 93       	push	r19
    3dcc:	4f 93       	push	r20
    3dce:	5f 93       	push	r21
    3dd0:	6f 93       	push	r22
    3dd2:	7f 93       	push	r23
    3dd4:	8f 93       	push	r24
    3dd6:	9f 93       	push	r25
    3dd8:	af 93       	push	r26
    3dda:	bf 93       	push	r27
    3ddc:	ef 93       	push	r30
    3dde:	ff 93       	push	r31
    3de0:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <InterruptFuncTable+0x90>
    3de4:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <InterruptFuncTable+0x91>
    3de8:	30 97       	sbiw	r30, 0x00	; 0
    3dea:	29 f0       	breq	.+10     	; 0x3df6 <__vector_72+0x3c>
    3dec:	80 91 38 24 	lds	r24, 0x2438	; 0x802438 <InterruptSenderTable+0x90>
    3df0:	90 91 39 24 	lds	r25, 0x2439	; 0x802439 <InterruptSenderTable+0x91>
    3df4:	19 95       	eicall
    3df6:	ff 91       	pop	r31
    3df8:	ef 91       	pop	r30
    3dfa:	bf 91       	pop	r27
    3dfc:	af 91       	pop	r26
    3dfe:	9f 91       	pop	r25
    3e00:	8f 91       	pop	r24
    3e02:	7f 91       	pop	r23
    3e04:	6f 91       	pop	r22
    3e06:	5f 91       	pop	r21
    3e08:	4f 91       	pop	r20
    3e0a:	3f 91       	pop	r19
    3e0c:	2f 91       	pop	r18
    3e0e:	0f 90       	pop	r0
    3e10:	0b be       	out	0x3b, r0	; 59
    3e12:	0f 90       	pop	r0
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	0f 90       	pop	r0
    3e18:	1f 90       	pop	r1
    3e1a:	18 95       	reti

00003e1c <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3e1c:	1f 92       	push	r1
    3e1e:	0f 92       	push	r0
    3e20:	0f b6       	in	r0, 0x3f	; 63
    3e22:	0f 92       	push	r0
    3e24:	11 24       	eor	r1, r1
    3e26:	0b b6       	in	r0, 0x3b	; 59
    3e28:	0f 92       	push	r0
    3e2a:	2f 93       	push	r18
    3e2c:	3f 93       	push	r19
    3e2e:	4f 93       	push	r20
    3e30:	5f 93       	push	r21
    3e32:	6f 93       	push	r22
    3e34:	7f 93       	push	r23
    3e36:	8f 93       	push	r24
    3e38:	9f 93       	push	r25
    3e3a:	af 93       	push	r26
    3e3c:	bf 93       	push	r27
    3e3e:	ef 93       	push	r30
    3e40:	ff 93       	push	r31
    3e42:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <InterruptFuncTable+0x92>
    3e46:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <InterruptFuncTable+0x93>
    3e4a:	30 97       	sbiw	r30, 0x00	; 0
    3e4c:	29 f0       	breq	.+10     	; 0x3e58 <__vector_73+0x3c>
    3e4e:	80 91 3a 24 	lds	r24, 0x243A	; 0x80243a <InterruptSenderTable+0x92>
    3e52:	90 91 3b 24 	lds	r25, 0x243B	; 0x80243b <InterruptSenderTable+0x93>
    3e56:	19 95       	eicall
    3e58:	ff 91       	pop	r31
    3e5a:	ef 91       	pop	r30
    3e5c:	bf 91       	pop	r27
    3e5e:	af 91       	pop	r26
    3e60:	9f 91       	pop	r25
    3e62:	8f 91       	pop	r24
    3e64:	7f 91       	pop	r23
    3e66:	6f 91       	pop	r22
    3e68:	5f 91       	pop	r21
    3e6a:	4f 91       	pop	r20
    3e6c:	3f 91       	pop	r19
    3e6e:	2f 91       	pop	r18
    3e70:	0f 90       	pop	r0
    3e72:	0b be       	out	0x3b, r0	; 59
    3e74:	0f 90       	pop	r0
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	0f 90       	pop	r0
    3e7a:	1f 90       	pop	r1
    3e7c:	18 95       	reti

00003e7e <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3e7e:	1f 92       	push	r1
    3e80:	0f 92       	push	r0
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	0f 92       	push	r0
    3e86:	11 24       	eor	r1, r1
    3e88:	0b b6       	in	r0, 0x3b	; 59
    3e8a:	0f 92       	push	r0
    3e8c:	2f 93       	push	r18
    3e8e:	3f 93       	push	r19
    3e90:	4f 93       	push	r20
    3e92:	5f 93       	push	r21
    3e94:	6f 93       	push	r22
    3e96:	7f 93       	push	r23
    3e98:	8f 93       	push	r24
    3e9a:	9f 93       	push	r25
    3e9c:	af 93       	push	r26
    3e9e:	bf 93       	push	r27
    3ea0:	ef 93       	push	r30
    3ea2:	ff 93       	push	r31
    3ea4:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <InterruptFuncTable+0x94>
    3ea8:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <InterruptFuncTable+0x95>
    3eac:	30 97       	sbiw	r30, 0x00	; 0
    3eae:	29 f0       	breq	.+10     	; 0x3eba <__vector_74+0x3c>
    3eb0:	80 91 3c 24 	lds	r24, 0x243C	; 0x80243c <InterruptSenderTable+0x94>
    3eb4:	90 91 3d 24 	lds	r25, 0x243D	; 0x80243d <InterruptSenderTable+0x95>
    3eb8:	19 95       	eicall
    3eba:	ff 91       	pop	r31
    3ebc:	ef 91       	pop	r30
    3ebe:	bf 91       	pop	r27
    3ec0:	af 91       	pop	r26
    3ec2:	9f 91       	pop	r25
    3ec4:	8f 91       	pop	r24
    3ec6:	7f 91       	pop	r23
    3ec8:	6f 91       	pop	r22
    3eca:	5f 91       	pop	r21
    3ecc:	4f 91       	pop	r20
    3ece:	3f 91       	pop	r19
    3ed0:	2f 91       	pop	r18
    3ed2:	0f 90       	pop	r0
    3ed4:	0b be       	out	0x3b, r0	; 59
    3ed6:	0f 90       	pop	r0
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	0f 90       	pop	r0
    3edc:	1f 90       	pop	r1
    3ede:	18 95       	reti

00003ee0 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3ee0:	1f 92       	push	r1
    3ee2:	0f 92       	push	r0
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	0f 92       	push	r0
    3ee8:	11 24       	eor	r1, r1
    3eea:	0b b6       	in	r0, 0x3b	; 59
    3eec:	0f 92       	push	r0
    3eee:	2f 93       	push	r18
    3ef0:	3f 93       	push	r19
    3ef2:	4f 93       	push	r20
    3ef4:	5f 93       	push	r21
    3ef6:	6f 93       	push	r22
    3ef8:	7f 93       	push	r23
    3efa:	8f 93       	push	r24
    3efc:	9f 93       	push	r25
    3efe:	af 93       	push	r26
    3f00:	bf 93       	push	r27
    3f02:	ef 93       	push	r30
    3f04:	ff 93       	push	r31
    3f06:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <InterruptFuncTable+0x9a>
    3f0a:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <InterruptFuncTable+0x9b>
    3f0e:	30 97       	sbiw	r30, 0x00	; 0
    3f10:	29 f0       	breq	.+10     	; 0x3f1c <__vector_77+0x3c>
    3f12:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <InterruptSenderTable+0x9a>
    3f16:	90 91 43 24 	lds	r25, 0x2443	; 0x802443 <InterruptSenderTable+0x9b>
    3f1a:	19 95       	eicall
    3f1c:	ff 91       	pop	r31
    3f1e:	ef 91       	pop	r30
    3f20:	bf 91       	pop	r27
    3f22:	af 91       	pop	r26
    3f24:	9f 91       	pop	r25
    3f26:	8f 91       	pop	r24
    3f28:	7f 91       	pop	r23
    3f2a:	6f 91       	pop	r22
    3f2c:	5f 91       	pop	r21
    3f2e:	4f 91       	pop	r20
    3f30:	3f 91       	pop	r19
    3f32:	2f 91       	pop	r18
    3f34:	0f 90       	pop	r0
    3f36:	0b be       	out	0x3b, r0	; 59
    3f38:	0f 90       	pop	r0
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	0f 90       	pop	r0
    3f3e:	1f 90       	pop	r1
    3f40:	18 95       	reti

00003f42 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3f42:	1f 92       	push	r1
    3f44:	0f 92       	push	r0
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	0f 92       	push	r0
    3f4a:	11 24       	eor	r1, r1
    3f4c:	0b b6       	in	r0, 0x3b	; 59
    3f4e:	0f 92       	push	r0
    3f50:	2f 93       	push	r18
    3f52:	3f 93       	push	r19
    3f54:	4f 93       	push	r20
    3f56:	5f 93       	push	r21
    3f58:	6f 93       	push	r22
    3f5a:	7f 93       	push	r23
    3f5c:	8f 93       	push	r24
    3f5e:	9f 93       	push	r25
    3f60:	af 93       	push	r26
    3f62:	bf 93       	push	r27
    3f64:	ef 93       	push	r30
    3f66:	ff 93       	push	r31
    3f68:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <InterruptFuncTable+0x9c>
    3f6c:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <InterruptFuncTable+0x9d>
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	29 f0       	breq	.+10     	; 0x3f7e <__vector_78+0x3c>
    3f74:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <InterruptSenderTable+0x9c>
    3f78:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <InterruptSenderTable+0x9d>
    3f7c:	19 95       	eicall
    3f7e:	ff 91       	pop	r31
    3f80:	ef 91       	pop	r30
    3f82:	bf 91       	pop	r27
    3f84:	af 91       	pop	r26
    3f86:	9f 91       	pop	r25
    3f88:	8f 91       	pop	r24
    3f8a:	7f 91       	pop	r23
    3f8c:	6f 91       	pop	r22
    3f8e:	5f 91       	pop	r21
    3f90:	4f 91       	pop	r20
    3f92:	3f 91       	pop	r19
    3f94:	2f 91       	pop	r18
    3f96:	0f 90       	pop	r0
    3f98:	0b be       	out	0x3b, r0	; 59
    3f9a:	0f 90       	pop	r0
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	0f 90       	pop	r0
    3fa0:	1f 90       	pop	r1
    3fa2:	18 95       	reti

00003fa4 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3fa4:	1f 92       	push	r1
    3fa6:	0f 92       	push	r0
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	0f 92       	push	r0
    3fac:	11 24       	eor	r1, r1
    3fae:	0b b6       	in	r0, 0x3b	; 59
    3fb0:	0f 92       	push	r0
    3fb2:	2f 93       	push	r18
    3fb4:	3f 93       	push	r19
    3fb6:	4f 93       	push	r20
    3fb8:	5f 93       	push	r21
    3fba:	6f 93       	push	r22
    3fbc:	7f 93       	push	r23
    3fbe:	8f 93       	push	r24
    3fc0:	9f 93       	push	r25
    3fc2:	af 93       	push	r26
    3fc4:	bf 93       	push	r27
    3fc6:	ef 93       	push	r30
    3fc8:	ff 93       	push	r31
    3fca:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <InterruptFuncTable+0x9e>
    3fce:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <InterruptFuncTable+0x9f>
    3fd2:	30 97       	sbiw	r30, 0x00	; 0
    3fd4:	29 f0       	breq	.+10     	; 0x3fe0 <__vector_79+0x3c>
    3fd6:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <InterruptSenderTable+0x9e>
    3fda:	90 91 47 24 	lds	r25, 0x2447	; 0x802447 <InterruptSenderTable+0x9f>
    3fde:	19 95       	eicall
    3fe0:	ff 91       	pop	r31
    3fe2:	ef 91       	pop	r30
    3fe4:	bf 91       	pop	r27
    3fe6:	af 91       	pop	r26
    3fe8:	9f 91       	pop	r25
    3fea:	8f 91       	pop	r24
    3fec:	7f 91       	pop	r23
    3fee:	6f 91       	pop	r22
    3ff0:	5f 91       	pop	r21
    3ff2:	4f 91       	pop	r20
    3ff4:	3f 91       	pop	r19
    3ff6:	2f 91       	pop	r18
    3ff8:	0f 90       	pop	r0
    3ffa:	0b be       	out	0x3b, r0	; 59
    3ffc:	0f 90       	pop	r0
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	0f 90       	pop	r0
    4002:	1f 90       	pop	r1
    4004:	18 95       	reti

00004006 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    4006:	1f 92       	push	r1
    4008:	0f 92       	push	r0
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	0f 92       	push	r0
    400e:	11 24       	eor	r1, r1
    4010:	0b b6       	in	r0, 0x3b	; 59
    4012:	0f 92       	push	r0
    4014:	2f 93       	push	r18
    4016:	3f 93       	push	r19
    4018:	4f 93       	push	r20
    401a:	5f 93       	push	r21
    401c:	6f 93       	push	r22
    401e:	7f 93       	push	r23
    4020:	8f 93       	push	r24
    4022:	9f 93       	push	r25
    4024:	af 93       	push	r26
    4026:	bf 93       	push	r27
    4028:	ef 93       	push	r30
    402a:	ff 93       	push	r31
    402c:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <InterruptFuncTable+0xa0>
    4030:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <InterruptFuncTable+0xa1>
    4034:	30 97       	sbiw	r30, 0x00	; 0
    4036:	29 f0       	breq	.+10     	; 0x4042 <__vector_80+0x3c>
    4038:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <InterruptSenderTable+0xa0>
    403c:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <InterruptSenderTable+0xa1>
    4040:	19 95       	eicall
    4042:	ff 91       	pop	r31
    4044:	ef 91       	pop	r30
    4046:	bf 91       	pop	r27
    4048:	af 91       	pop	r26
    404a:	9f 91       	pop	r25
    404c:	8f 91       	pop	r24
    404e:	7f 91       	pop	r23
    4050:	6f 91       	pop	r22
    4052:	5f 91       	pop	r21
    4054:	4f 91       	pop	r20
    4056:	3f 91       	pop	r19
    4058:	2f 91       	pop	r18
    405a:	0f 90       	pop	r0
    405c:	0b be       	out	0x3b, r0	; 59
    405e:	0f 90       	pop	r0
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	0f 90       	pop	r0
    4064:	1f 90       	pop	r1
    4066:	18 95       	reti

00004068 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    4068:	1f 92       	push	r1
    406a:	0f 92       	push	r0
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	0f 92       	push	r0
    4070:	11 24       	eor	r1, r1
    4072:	0b b6       	in	r0, 0x3b	; 59
    4074:	0f 92       	push	r0
    4076:	2f 93       	push	r18
    4078:	3f 93       	push	r19
    407a:	4f 93       	push	r20
    407c:	5f 93       	push	r21
    407e:	6f 93       	push	r22
    4080:	7f 93       	push	r23
    4082:	8f 93       	push	r24
    4084:	9f 93       	push	r25
    4086:	af 93       	push	r26
    4088:	bf 93       	push	r27
    408a:	ef 93       	push	r30
    408c:	ff 93       	push	r31
    408e:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <InterruptFuncTable+0xa2>
    4092:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <InterruptFuncTable+0xa3>
    4096:	30 97       	sbiw	r30, 0x00	; 0
    4098:	29 f0       	breq	.+10     	; 0x40a4 <__vector_81+0x3c>
    409a:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <InterruptSenderTable+0xa2>
    409e:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <InterruptSenderTable+0xa3>
    40a2:	19 95       	eicall
    40a4:	ff 91       	pop	r31
    40a6:	ef 91       	pop	r30
    40a8:	bf 91       	pop	r27
    40aa:	af 91       	pop	r26
    40ac:	9f 91       	pop	r25
    40ae:	8f 91       	pop	r24
    40b0:	7f 91       	pop	r23
    40b2:	6f 91       	pop	r22
    40b4:	5f 91       	pop	r21
    40b6:	4f 91       	pop	r20
    40b8:	3f 91       	pop	r19
    40ba:	2f 91       	pop	r18
    40bc:	0f 90       	pop	r0
    40be:	0b be       	out	0x3b, r0	; 59
    40c0:	0f 90       	pop	r0
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	0f 90       	pop	r0
    40c6:	1f 90       	pop	r1
    40c8:	18 95       	reti

000040ca <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    40ca:	1f 92       	push	r1
    40cc:	0f 92       	push	r0
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	0f 92       	push	r0
    40d2:	11 24       	eor	r1, r1
    40d4:	0b b6       	in	r0, 0x3b	; 59
    40d6:	0f 92       	push	r0
    40d8:	2f 93       	push	r18
    40da:	3f 93       	push	r19
    40dc:	4f 93       	push	r20
    40de:	5f 93       	push	r21
    40e0:	6f 93       	push	r22
    40e2:	7f 93       	push	r23
    40e4:	8f 93       	push	r24
    40e6:	9f 93       	push	r25
    40e8:	af 93       	push	r26
    40ea:	bf 93       	push	r27
    40ec:	ef 93       	push	r30
    40ee:	ff 93       	push	r31
    40f0:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <InterruptFuncTable+0xa4>
    40f4:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <InterruptFuncTable+0xa5>
    40f8:	30 97       	sbiw	r30, 0x00	; 0
    40fa:	29 f0       	breq	.+10     	; 0x4106 <__vector_82+0x3c>
    40fc:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <InterruptSenderTable+0xa4>
    4100:	90 91 4d 24 	lds	r25, 0x244D	; 0x80244d <InterruptSenderTable+0xa5>
    4104:	19 95       	eicall
    4106:	ff 91       	pop	r31
    4108:	ef 91       	pop	r30
    410a:	bf 91       	pop	r27
    410c:	af 91       	pop	r26
    410e:	9f 91       	pop	r25
    4110:	8f 91       	pop	r24
    4112:	7f 91       	pop	r23
    4114:	6f 91       	pop	r22
    4116:	5f 91       	pop	r21
    4118:	4f 91       	pop	r20
    411a:	3f 91       	pop	r19
    411c:	2f 91       	pop	r18
    411e:	0f 90       	pop	r0
    4120:	0b be       	out	0x3b, r0	; 59
    4122:	0f 90       	pop	r0
    4124:	0f be       	out	0x3f, r0	; 63
    4126:	0f 90       	pop	r0
    4128:	1f 90       	pop	r1
    412a:	18 95       	reti

0000412c <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    412c:	1f 92       	push	r1
    412e:	0f 92       	push	r0
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	0f 92       	push	r0
    4134:	11 24       	eor	r1, r1
    4136:	0b b6       	in	r0, 0x3b	; 59
    4138:	0f 92       	push	r0
    413a:	2f 93       	push	r18
    413c:	3f 93       	push	r19
    413e:	4f 93       	push	r20
    4140:	5f 93       	push	r21
    4142:	6f 93       	push	r22
    4144:	7f 93       	push	r23
    4146:	8f 93       	push	r24
    4148:	9f 93       	push	r25
    414a:	af 93       	push	r26
    414c:	bf 93       	push	r27
    414e:	ef 93       	push	r30
    4150:	ff 93       	push	r31
    4152:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <InterruptFuncTable+0xa6>
    4156:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <InterruptFuncTable+0xa7>
    415a:	30 97       	sbiw	r30, 0x00	; 0
    415c:	29 f0       	breq	.+10     	; 0x4168 <__vector_83+0x3c>
    415e:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <InterruptSenderTable+0xa6>
    4162:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <InterruptSenderTable+0xa7>
    4166:	19 95       	eicall
    4168:	ff 91       	pop	r31
    416a:	ef 91       	pop	r30
    416c:	bf 91       	pop	r27
    416e:	af 91       	pop	r26
    4170:	9f 91       	pop	r25
    4172:	8f 91       	pop	r24
    4174:	7f 91       	pop	r23
    4176:	6f 91       	pop	r22
    4178:	5f 91       	pop	r21
    417a:	4f 91       	pop	r20
    417c:	3f 91       	pop	r19
    417e:	2f 91       	pop	r18
    4180:	0f 90       	pop	r0
    4182:	0b be       	out	0x3b, r0	; 59
    4184:	0f 90       	pop	r0
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	0f 90       	pop	r0
    418a:	1f 90       	pop	r1
    418c:	18 95       	reti

0000418e <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    418e:	1f 92       	push	r1
    4190:	0f 92       	push	r0
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	0f 92       	push	r0
    4196:	11 24       	eor	r1, r1
    4198:	0b b6       	in	r0, 0x3b	; 59
    419a:	0f 92       	push	r0
    419c:	2f 93       	push	r18
    419e:	3f 93       	push	r19
    41a0:	4f 93       	push	r20
    41a2:	5f 93       	push	r21
    41a4:	6f 93       	push	r22
    41a6:	7f 93       	push	r23
    41a8:	8f 93       	push	r24
    41aa:	9f 93       	push	r25
    41ac:	af 93       	push	r26
    41ae:	bf 93       	push	r27
    41b0:	ef 93       	push	r30
    41b2:	ff 93       	push	r31
    41b4:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <InterruptFuncTable+0xa8>
    41b8:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <InterruptFuncTable+0xa9>
    41bc:	30 97       	sbiw	r30, 0x00	; 0
    41be:	29 f0       	breq	.+10     	; 0x41ca <__vector_84+0x3c>
    41c0:	80 91 50 24 	lds	r24, 0x2450	; 0x802450 <InterruptSenderTable+0xa8>
    41c4:	90 91 51 24 	lds	r25, 0x2451	; 0x802451 <InterruptSenderTable+0xa9>
    41c8:	19 95       	eicall
    41ca:	ff 91       	pop	r31
    41cc:	ef 91       	pop	r30
    41ce:	bf 91       	pop	r27
    41d0:	af 91       	pop	r26
    41d2:	9f 91       	pop	r25
    41d4:	8f 91       	pop	r24
    41d6:	7f 91       	pop	r23
    41d8:	6f 91       	pop	r22
    41da:	5f 91       	pop	r21
    41dc:	4f 91       	pop	r20
    41de:	3f 91       	pop	r19
    41e0:	2f 91       	pop	r18
    41e2:	0f 90       	pop	r0
    41e4:	0b be       	out	0x3b, r0	; 59
    41e6:	0f 90       	pop	r0
    41e8:	0f be       	out	0x3f, r0	; 63
    41ea:	0f 90       	pop	r0
    41ec:	1f 90       	pop	r1
    41ee:	18 95       	reti

000041f0 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    41f0:	1f 92       	push	r1
    41f2:	0f 92       	push	r0
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	0f 92       	push	r0
    41f8:	11 24       	eor	r1, r1
    41fa:	0b b6       	in	r0, 0x3b	; 59
    41fc:	0f 92       	push	r0
    41fe:	2f 93       	push	r18
    4200:	3f 93       	push	r19
    4202:	4f 93       	push	r20
    4204:	5f 93       	push	r21
    4206:	6f 93       	push	r22
    4208:	7f 93       	push	r23
    420a:	8f 93       	push	r24
    420c:	9f 93       	push	r25
    420e:	af 93       	push	r26
    4210:	bf 93       	push	r27
    4212:	ef 93       	push	r30
    4214:	ff 93       	push	r31
    4216:	e0 91 5c 23 	lds	r30, 0x235C	; 0x80235c <InterruptFuncTable+0xaa>
    421a:	f0 91 5d 23 	lds	r31, 0x235D	; 0x80235d <InterruptFuncTable+0xab>
    421e:	30 97       	sbiw	r30, 0x00	; 0
    4220:	29 f0       	breq	.+10     	; 0x422c <__vector_85+0x3c>
    4222:	80 91 52 24 	lds	r24, 0x2452	; 0x802452 <InterruptSenderTable+0xaa>
    4226:	90 91 53 24 	lds	r25, 0x2453	; 0x802453 <InterruptSenderTable+0xab>
    422a:	19 95       	eicall
    422c:	ff 91       	pop	r31
    422e:	ef 91       	pop	r30
    4230:	bf 91       	pop	r27
    4232:	af 91       	pop	r26
    4234:	9f 91       	pop	r25
    4236:	8f 91       	pop	r24
    4238:	7f 91       	pop	r23
    423a:	6f 91       	pop	r22
    423c:	5f 91       	pop	r21
    423e:	4f 91       	pop	r20
    4240:	3f 91       	pop	r19
    4242:	2f 91       	pop	r18
    4244:	0f 90       	pop	r0
    4246:	0b be       	out	0x3b, r0	; 59
    4248:	0f 90       	pop	r0
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	0f 90       	pop	r0
    424e:	1f 90       	pop	r1
    4250:	18 95       	reti

00004252 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    4252:	1f 92       	push	r1
    4254:	0f 92       	push	r0
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	0f 92       	push	r0
    425a:	11 24       	eor	r1, r1
    425c:	0b b6       	in	r0, 0x3b	; 59
    425e:	0f 92       	push	r0
    4260:	2f 93       	push	r18
    4262:	3f 93       	push	r19
    4264:	4f 93       	push	r20
    4266:	5f 93       	push	r21
    4268:	6f 93       	push	r22
    426a:	7f 93       	push	r23
    426c:	8f 93       	push	r24
    426e:	9f 93       	push	r25
    4270:	af 93       	push	r26
    4272:	bf 93       	push	r27
    4274:	ef 93       	push	r30
    4276:	ff 93       	push	r31
    4278:	e0 91 5e 23 	lds	r30, 0x235E	; 0x80235e <InterruptFuncTable+0xac>
    427c:	f0 91 5f 23 	lds	r31, 0x235F	; 0x80235f <InterruptFuncTable+0xad>
    4280:	30 97       	sbiw	r30, 0x00	; 0
    4282:	29 f0       	breq	.+10     	; 0x428e <__vector_86+0x3c>
    4284:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <InterruptSenderTable+0xac>
    4288:	90 91 55 24 	lds	r25, 0x2455	; 0x802455 <InterruptSenderTable+0xad>
    428c:	19 95       	eicall
    428e:	ff 91       	pop	r31
    4290:	ef 91       	pop	r30
    4292:	bf 91       	pop	r27
    4294:	af 91       	pop	r26
    4296:	9f 91       	pop	r25
    4298:	8f 91       	pop	r24
    429a:	7f 91       	pop	r23
    429c:	6f 91       	pop	r22
    429e:	5f 91       	pop	r21
    42a0:	4f 91       	pop	r20
    42a2:	3f 91       	pop	r19
    42a4:	2f 91       	pop	r18
    42a6:	0f 90       	pop	r0
    42a8:	0b be       	out	0x3b, r0	; 59
    42aa:	0f 90       	pop	r0
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	0f 90       	pop	r0
    42b0:	1f 90       	pop	r1
    42b2:	18 95       	reti

000042b4 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    42b4:	1f 92       	push	r1
    42b6:	0f 92       	push	r0
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	0f 92       	push	r0
    42bc:	11 24       	eor	r1, r1
    42be:	0b b6       	in	r0, 0x3b	; 59
    42c0:	0f 92       	push	r0
    42c2:	2f 93       	push	r18
    42c4:	3f 93       	push	r19
    42c6:	4f 93       	push	r20
    42c8:	5f 93       	push	r21
    42ca:	6f 93       	push	r22
    42cc:	7f 93       	push	r23
    42ce:	8f 93       	push	r24
    42d0:	9f 93       	push	r25
    42d2:	af 93       	push	r26
    42d4:	bf 93       	push	r27
    42d6:	ef 93       	push	r30
    42d8:	ff 93       	push	r31
    42da:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <InterruptFuncTable+0xae>
    42de:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <InterruptFuncTable+0xaf>
    42e2:	30 97       	sbiw	r30, 0x00	; 0
    42e4:	29 f0       	breq	.+10     	; 0x42f0 <__vector_87+0x3c>
    42e6:	80 91 56 24 	lds	r24, 0x2456	; 0x802456 <InterruptSenderTable+0xae>
    42ea:	90 91 57 24 	lds	r25, 0x2457	; 0x802457 <InterruptSenderTable+0xaf>
    42ee:	19 95       	eicall
    42f0:	ff 91       	pop	r31
    42f2:	ef 91       	pop	r30
    42f4:	bf 91       	pop	r27
    42f6:	af 91       	pop	r26
    42f8:	9f 91       	pop	r25
    42fa:	8f 91       	pop	r24
    42fc:	7f 91       	pop	r23
    42fe:	6f 91       	pop	r22
    4300:	5f 91       	pop	r21
    4302:	4f 91       	pop	r20
    4304:	3f 91       	pop	r19
    4306:	2f 91       	pop	r18
    4308:	0f 90       	pop	r0
    430a:	0b be       	out	0x3b, r0	; 59
    430c:	0f 90       	pop	r0
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	0f 90       	pop	r0
    4312:	1f 90       	pop	r1
    4314:	18 95       	reti

00004316 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4316:	1f 92       	push	r1
    4318:	0f 92       	push	r0
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	0f 92       	push	r0
    431e:	11 24       	eor	r1, r1
    4320:	0b b6       	in	r0, 0x3b	; 59
    4322:	0f 92       	push	r0
    4324:	2f 93       	push	r18
    4326:	3f 93       	push	r19
    4328:	4f 93       	push	r20
    432a:	5f 93       	push	r21
    432c:	6f 93       	push	r22
    432e:	7f 93       	push	r23
    4330:	8f 93       	push	r24
    4332:	9f 93       	push	r25
    4334:	af 93       	push	r26
    4336:	bf 93       	push	r27
    4338:	ef 93       	push	r30
    433a:	ff 93       	push	r31
    433c:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <InterruptFuncTable+0xb0>
    4340:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <InterruptFuncTable+0xb1>
    4344:	30 97       	sbiw	r30, 0x00	; 0
    4346:	29 f0       	breq	.+10     	; 0x4352 <__vector_88+0x3c>
    4348:	80 91 58 24 	lds	r24, 0x2458	; 0x802458 <InterruptSenderTable+0xb0>
    434c:	90 91 59 24 	lds	r25, 0x2459	; 0x802459 <InterruptSenderTable+0xb1>
    4350:	19 95       	eicall
    4352:	ff 91       	pop	r31
    4354:	ef 91       	pop	r30
    4356:	bf 91       	pop	r27
    4358:	af 91       	pop	r26
    435a:	9f 91       	pop	r25
    435c:	8f 91       	pop	r24
    435e:	7f 91       	pop	r23
    4360:	6f 91       	pop	r22
    4362:	5f 91       	pop	r21
    4364:	4f 91       	pop	r20
    4366:	3f 91       	pop	r19
    4368:	2f 91       	pop	r18
    436a:	0f 90       	pop	r0
    436c:	0b be       	out	0x3b, r0	; 59
    436e:	0f 90       	pop	r0
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	0f 90       	pop	r0
    4374:	1f 90       	pop	r1
    4376:	18 95       	reti

00004378 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    4378:	1f 92       	push	r1
    437a:	0f 92       	push	r0
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	0f 92       	push	r0
    4380:	11 24       	eor	r1, r1
    4382:	0b b6       	in	r0, 0x3b	; 59
    4384:	0f 92       	push	r0
    4386:	2f 93       	push	r18
    4388:	3f 93       	push	r19
    438a:	4f 93       	push	r20
    438c:	5f 93       	push	r21
    438e:	6f 93       	push	r22
    4390:	7f 93       	push	r23
    4392:	8f 93       	push	r24
    4394:	9f 93       	push	r25
    4396:	af 93       	push	r26
    4398:	bf 93       	push	r27
    439a:	ef 93       	push	r30
    439c:	ff 93       	push	r31
    439e:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <InterruptFuncTable+0xb2>
    43a2:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <InterruptFuncTable+0xb3>
    43a6:	30 97       	sbiw	r30, 0x00	; 0
    43a8:	29 f0       	breq	.+10     	; 0x43b4 <__vector_89+0x3c>
    43aa:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <InterruptSenderTable+0xb2>
    43ae:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <InterruptSenderTable+0xb3>
    43b2:	19 95       	eicall
    43b4:	ff 91       	pop	r31
    43b6:	ef 91       	pop	r30
    43b8:	bf 91       	pop	r27
    43ba:	af 91       	pop	r26
    43bc:	9f 91       	pop	r25
    43be:	8f 91       	pop	r24
    43c0:	7f 91       	pop	r23
    43c2:	6f 91       	pop	r22
    43c4:	5f 91       	pop	r21
    43c6:	4f 91       	pop	r20
    43c8:	3f 91       	pop	r19
    43ca:	2f 91       	pop	r18
    43cc:	0f 90       	pop	r0
    43ce:	0b be       	out	0x3b, r0	; 59
    43d0:	0f 90       	pop	r0
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	0f 90       	pop	r0
    43d6:	1f 90       	pop	r1
    43d8:	18 95       	reti

000043da <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    43da:	1f 92       	push	r1
    43dc:	0f 92       	push	r0
    43de:	0f b6       	in	r0, 0x3f	; 63
    43e0:	0f 92       	push	r0
    43e2:	11 24       	eor	r1, r1
    43e4:	0b b6       	in	r0, 0x3b	; 59
    43e6:	0f 92       	push	r0
    43e8:	2f 93       	push	r18
    43ea:	3f 93       	push	r19
    43ec:	4f 93       	push	r20
    43ee:	5f 93       	push	r21
    43f0:	6f 93       	push	r22
    43f2:	7f 93       	push	r23
    43f4:	8f 93       	push	r24
    43f6:	9f 93       	push	r25
    43f8:	af 93       	push	r26
    43fa:	bf 93       	push	r27
    43fc:	ef 93       	push	r30
    43fe:	ff 93       	push	r31
    4400:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <InterruptFuncTable+0xb4>
    4404:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <InterruptFuncTable+0xb5>
    4408:	30 97       	sbiw	r30, 0x00	; 0
    440a:	29 f0       	breq	.+10     	; 0x4416 <__vector_90+0x3c>
    440c:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <InterruptSenderTable+0xb4>
    4410:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <InterruptSenderTable+0xb5>
    4414:	19 95       	eicall
    4416:	ff 91       	pop	r31
    4418:	ef 91       	pop	r30
    441a:	bf 91       	pop	r27
    441c:	af 91       	pop	r26
    441e:	9f 91       	pop	r25
    4420:	8f 91       	pop	r24
    4422:	7f 91       	pop	r23
    4424:	6f 91       	pop	r22
    4426:	5f 91       	pop	r21
    4428:	4f 91       	pop	r20
    442a:	3f 91       	pop	r19
    442c:	2f 91       	pop	r18
    442e:	0f 90       	pop	r0
    4430:	0b be       	out	0x3b, r0	; 59
    4432:	0f 90       	pop	r0
    4434:	0f be       	out	0x3f, r0	; 63
    4436:	0f 90       	pop	r0
    4438:	1f 90       	pop	r1
    443a:	18 95       	reti

0000443c <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    443c:	1f 92       	push	r1
    443e:	0f 92       	push	r0
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	0f 92       	push	r0
    4444:	11 24       	eor	r1, r1
    4446:	0b b6       	in	r0, 0x3b	; 59
    4448:	0f 92       	push	r0
    444a:	2f 93       	push	r18
    444c:	3f 93       	push	r19
    444e:	4f 93       	push	r20
    4450:	5f 93       	push	r21
    4452:	6f 93       	push	r22
    4454:	7f 93       	push	r23
    4456:	8f 93       	push	r24
    4458:	9f 93       	push	r25
    445a:	af 93       	push	r26
    445c:	bf 93       	push	r27
    445e:	ef 93       	push	r30
    4460:	ff 93       	push	r31
    4462:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <InterruptFuncTable+0xb6>
    4466:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <InterruptFuncTable+0xb7>
    446a:	30 97       	sbiw	r30, 0x00	; 0
    446c:	29 f0       	breq	.+10     	; 0x4478 <__vector_91+0x3c>
    446e:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <InterruptSenderTable+0xb6>
    4472:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <InterruptSenderTable+0xb7>
    4476:	19 95       	eicall
    4478:	ff 91       	pop	r31
    447a:	ef 91       	pop	r30
    447c:	bf 91       	pop	r27
    447e:	af 91       	pop	r26
    4480:	9f 91       	pop	r25
    4482:	8f 91       	pop	r24
    4484:	7f 91       	pop	r23
    4486:	6f 91       	pop	r22
    4488:	5f 91       	pop	r21
    448a:	4f 91       	pop	r20
    448c:	3f 91       	pop	r19
    448e:	2f 91       	pop	r18
    4490:	0f 90       	pop	r0
    4492:	0b be       	out	0x3b, r0	; 59
    4494:	0f 90       	pop	r0
    4496:	0f be       	out	0x3f, r0	; 63
    4498:	0f 90       	pop	r0
    449a:	1f 90       	pop	r1
    449c:	18 95       	reti

0000449e <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    449e:	1f 92       	push	r1
    44a0:	0f 92       	push	r0
    44a2:	0f b6       	in	r0, 0x3f	; 63
    44a4:	0f 92       	push	r0
    44a6:	11 24       	eor	r1, r1
    44a8:	0b b6       	in	r0, 0x3b	; 59
    44aa:	0f 92       	push	r0
    44ac:	2f 93       	push	r18
    44ae:	3f 93       	push	r19
    44b0:	4f 93       	push	r20
    44b2:	5f 93       	push	r21
    44b4:	6f 93       	push	r22
    44b6:	7f 93       	push	r23
    44b8:	8f 93       	push	r24
    44ba:	9f 93       	push	r25
    44bc:	af 93       	push	r26
    44be:	bf 93       	push	r27
    44c0:	ef 93       	push	r30
    44c2:	ff 93       	push	r31
    44c4:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <InterruptFuncTable+0xb8>
    44c8:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <InterruptFuncTable+0xb9>
    44cc:	30 97       	sbiw	r30, 0x00	; 0
    44ce:	29 f0       	breq	.+10     	; 0x44da <__vector_92+0x3c>
    44d0:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <InterruptSenderTable+0xb8>
    44d4:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <InterruptSenderTable+0xb9>
    44d8:	19 95       	eicall
    44da:	ff 91       	pop	r31
    44dc:	ef 91       	pop	r30
    44de:	bf 91       	pop	r27
    44e0:	af 91       	pop	r26
    44e2:	9f 91       	pop	r25
    44e4:	8f 91       	pop	r24
    44e6:	7f 91       	pop	r23
    44e8:	6f 91       	pop	r22
    44ea:	5f 91       	pop	r21
    44ec:	4f 91       	pop	r20
    44ee:	3f 91       	pop	r19
    44f0:	2f 91       	pop	r18
    44f2:	0f 90       	pop	r0
    44f4:	0b be       	out	0x3b, r0	; 59
    44f6:	0f 90       	pop	r0
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	0f 90       	pop	r0
    44fc:	1f 90       	pop	r1
    44fe:	18 95       	reti

00004500 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    4500:	1f 92       	push	r1
    4502:	0f 92       	push	r0
    4504:	0f b6       	in	r0, 0x3f	; 63
    4506:	0f 92       	push	r0
    4508:	11 24       	eor	r1, r1
    450a:	0b b6       	in	r0, 0x3b	; 59
    450c:	0f 92       	push	r0
    450e:	2f 93       	push	r18
    4510:	3f 93       	push	r19
    4512:	4f 93       	push	r20
    4514:	5f 93       	push	r21
    4516:	6f 93       	push	r22
    4518:	7f 93       	push	r23
    451a:	8f 93       	push	r24
    451c:	9f 93       	push	r25
    451e:	af 93       	push	r26
    4520:	bf 93       	push	r27
    4522:	ef 93       	push	r30
    4524:	ff 93       	push	r31
    4526:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <InterruptFuncTable+0xba>
    452a:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <InterruptFuncTable+0xbb>
    452e:	30 97       	sbiw	r30, 0x00	; 0
    4530:	29 f0       	breq	.+10     	; 0x453c <__vector_93+0x3c>
    4532:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <InterruptSenderTable+0xba>
    4536:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <InterruptSenderTable+0xbb>
    453a:	19 95       	eicall
    453c:	ff 91       	pop	r31
    453e:	ef 91       	pop	r30
    4540:	bf 91       	pop	r27
    4542:	af 91       	pop	r26
    4544:	9f 91       	pop	r25
    4546:	8f 91       	pop	r24
    4548:	7f 91       	pop	r23
    454a:	6f 91       	pop	r22
    454c:	5f 91       	pop	r21
    454e:	4f 91       	pop	r20
    4550:	3f 91       	pop	r19
    4552:	2f 91       	pop	r18
    4554:	0f 90       	pop	r0
    4556:	0b be       	out	0x3b, r0	; 59
    4558:	0f 90       	pop	r0
    455a:	0f be       	out	0x3f, r0	; 63
    455c:	0f 90       	pop	r0
    455e:	1f 90       	pop	r1
    4560:	18 95       	reti

00004562 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    4562:	1f 92       	push	r1
    4564:	0f 92       	push	r0
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	0f 92       	push	r0
    456a:	11 24       	eor	r1, r1
    456c:	0b b6       	in	r0, 0x3b	; 59
    456e:	0f 92       	push	r0
    4570:	2f 93       	push	r18
    4572:	3f 93       	push	r19
    4574:	4f 93       	push	r20
    4576:	5f 93       	push	r21
    4578:	6f 93       	push	r22
    457a:	7f 93       	push	r23
    457c:	8f 93       	push	r24
    457e:	9f 93       	push	r25
    4580:	af 93       	push	r26
    4582:	bf 93       	push	r27
    4584:	ef 93       	push	r30
    4586:	ff 93       	push	r31
    4588:	e0 91 82 23 	lds	r30, 0x2382	; 0x802382 <InterruptFuncTable+0xd0>
    458c:	f0 91 83 23 	lds	r31, 0x2383	; 0x802383 <InterruptFuncTable+0xd1>
    4590:	30 97       	sbiw	r30, 0x00	; 0
    4592:	29 f0       	breq	.+10     	; 0x459e <__vector_104+0x3c>
    4594:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <InterruptSenderTable+0xd0>
    4598:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <InterruptSenderTable+0xd1>
    459c:	19 95       	eicall
    459e:	ff 91       	pop	r31
    45a0:	ef 91       	pop	r30
    45a2:	bf 91       	pop	r27
    45a4:	af 91       	pop	r26
    45a6:	9f 91       	pop	r25
    45a8:	8f 91       	pop	r24
    45aa:	7f 91       	pop	r23
    45ac:	6f 91       	pop	r22
    45ae:	5f 91       	pop	r21
    45b0:	4f 91       	pop	r20
    45b2:	3f 91       	pop	r19
    45b4:	2f 91       	pop	r18
    45b6:	0f 90       	pop	r0
    45b8:	0b be       	out	0x3b, r0	; 59
    45ba:	0f 90       	pop	r0
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	0f 90       	pop	r0
    45c0:	1f 90       	pop	r1
    45c2:	18 95       	reti

000045c4 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    45c4:	1f 92       	push	r1
    45c6:	0f 92       	push	r0
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	0f 92       	push	r0
    45cc:	11 24       	eor	r1, r1
    45ce:	0b b6       	in	r0, 0x3b	; 59
    45d0:	0f 92       	push	r0
    45d2:	2f 93       	push	r18
    45d4:	3f 93       	push	r19
    45d6:	4f 93       	push	r20
    45d8:	5f 93       	push	r21
    45da:	6f 93       	push	r22
    45dc:	7f 93       	push	r23
    45de:	8f 93       	push	r24
    45e0:	9f 93       	push	r25
    45e2:	af 93       	push	r26
    45e4:	bf 93       	push	r27
    45e6:	ef 93       	push	r30
    45e8:	ff 93       	push	r31
    45ea:	e0 91 84 23 	lds	r30, 0x2384	; 0x802384 <InterruptFuncTable+0xd2>
    45ee:	f0 91 85 23 	lds	r31, 0x2385	; 0x802385 <InterruptFuncTable+0xd3>
    45f2:	30 97       	sbiw	r30, 0x00	; 0
    45f4:	29 f0       	breq	.+10     	; 0x4600 <__vector_105+0x3c>
    45f6:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <InterruptSenderTable+0xd2>
    45fa:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <InterruptSenderTable+0xd3>
    45fe:	19 95       	eicall
    4600:	ff 91       	pop	r31
    4602:	ef 91       	pop	r30
    4604:	bf 91       	pop	r27
    4606:	af 91       	pop	r26
    4608:	9f 91       	pop	r25
    460a:	8f 91       	pop	r24
    460c:	7f 91       	pop	r23
    460e:	6f 91       	pop	r22
    4610:	5f 91       	pop	r21
    4612:	4f 91       	pop	r20
    4614:	3f 91       	pop	r19
    4616:	2f 91       	pop	r18
    4618:	0f 90       	pop	r0
    461a:	0b be       	out	0x3b, r0	; 59
    461c:	0f 90       	pop	r0
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	0f 90       	pop	r0
    4622:	1f 90       	pop	r1
    4624:	18 95       	reti

00004626 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4626:	1f 92       	push	r1
    4628:	0f 92       	push	r0
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	0f 92       	push	r0
    462e:	11 24       	eor	r1, r1
    4630:	0b b6       	in	r0, 0x3b	; 59
    4632:	0f 92       	push	r0
    4634:	2f 93       	push	r18
    4636:	3f 93       	push	r19
    4638:	4f 93       	push	r20
    463a:	5f 93       	push	r21
    463c:	6f 93       	push	r22
    463e:	7f 93       	push	r23
    4640:	8f 93       	push	r24
    4642:	9f 93       	push	r25
    4644:	af 93       	push	r26
    4646:	bf 93       	push	r27
    4648:	ef 93       	push	r30
    464a:	ff 93       	push	r31
    464c:	e0 91 8a 23 	lds	r30, 0x238A	; 0x80238a <InterruptFuncTable+0xd8>
    4650:	f0 91 8b 23 	lds	r31, 0x238B	; 0x80238b <InterruptFuncTable+0xd9>
    4654:	30 97       	sbiw	r30, 0x00	; 0
    4656:	29 f0       	breq	.+10     	; 0x4662 <__vector_108+0x3c>
    4658:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <InterruptSenderTable+0xd8>
    465c:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <InterruptSenderTable+0xd9>
    4660:	19 95       	eicall
    4662:	ff 91       	pop	r31
    4664:	ef 91       	pop	r30
    4666:	bf 91       	pop	r27
    4668:	af 91       	pop	r26
    466a:	9f 91       	pop	r25
    466c:	8f 91       	pop	r24
    466e:	7f 91       	pop	r23
    4670:	6f 91       	pop	r22
    4672:	5f 91       	pop	r21
    4674:	4f 91       	pop	r20
    4676:	3f 91       	pop	r19
    4678:	2f 91       	pop	r18
    467a:	0f 90       	pop	r0
    467c:	0b be       	out	0x3b, r0	; 59
    467e:	0f 90       	pop	r0
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	0f 90       	pop	r0
    4684:	1f 90       	pop	r1
    4686:	18 95       	reti

00004688 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    4688:	1f 92       	push	r1
    468a:	0f 92       	push	r0
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	0f 92       	push	r0
    4690:	11 24       	eor	r1, r1
    4692:	0b b6       	in	r0, 0x3b	; 59
    4694:	0f 92       	push	r0
    4696:	2f 93       	push	r18
    4698:	3f 93       	push	r19
    469a:	4f 93       	push	r20
    469c:	5f 93       	push	r21
    469e:	6f 93       	push	r22
    46a0:	7f 93       	push	r23
    46a2:	8f 93       	push	r24
    46a4:	9f 93       	push	r25
    46a6:	af 93       	push	r26
    46a8:	bf 93       	push	r27
    46aa:	ef 93       	push	r30
    46ac:	ff 93       	push	r31
    46ae:	e0 91 8c 23 	lds	r30, 0x238C	; 0x80238c <InterruptFuncTable+0xda>
    46b2:	f0 91 8d 23 	lds	r31, 0x238D	; 0x80238d <InterruptFuncTable+0xdb>
    46b6:	30 97       	sbiw	r30, 0x00	; 0
    46b8:	29 f0       	breq	.+10     	; 0x46c4 <__vector_109+0x3c>
    46ba:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <InterruptSenderTable+0xda>
    46be:	90 91 83 24 	lds	r25, 0x2483	; 0x802483 <InterruptSenderTable+0xdb>
    46c2:	19 95       	eicall
    46c4:	ff 91       	pop	r31
    46c6:	ef 91       	pop	r30
    46c8:	bf 91       	pop	r27
    46ca:	af 91       	pop	r26
    46cc:	9f 91       	pop	r25
    46ce:	8f 91       	pop	r24
    46d0:	7f 91       	pop	r23
    46d2:	6f 91       	pop	r22
    46d4:	5f 91       	pop	r21
    46d6:	4f 91       	pop	r20
    46d8:	3f 91       	pop	r19
    46da:	2f 91       	pop	r18
    46dc:	0f 90       	pop	r0
    46de:	0b be       	out	0x3b, r0	; 59
    46e0:	0f 90       	pop	r0
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	0f 90       	pop	r0
    46e6:	1f 90       	pop	r1
    46e8:	18 95       	reti

000046ea <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    46ea:	1f 92       	push	r1
    46ec:	0f 92       	push	r0
    46ee:	0f b6       	in	r0, 0x3f	; 63
    46f0:	0f 92       	push	r0
    46f2:	11 24       	eor	r1, r1
    46f4:	0b b6       	in	r0, 0x3b	; 59
    46f6:	0f 92       	push	r0
    46f8:	2f 93       	push	r18
    46fa:	3f 93       	push	r19
    46fc:	4f 93       	push	r20
    46fe:	5f 93       	push	r21
    4700:	6f 93       	push	r22
    4702:	7f 93       	push	r23
    4704:	8f 93       	push	r24
    4706:	9f 93       	push	r25
    4708:	af 93       	push	r26
    470a:	bf 93       	push	r27
    470c:	ef 93       	push	r30
    470e:	ff 93       	push	r31
    4710:	e0 91 8e 23 	lds	r30, 0x238E	; 0x80238e <InterruptFuncTable+0xdc>
    4714:	f0 91 8f 23 	lds	r31, 0x238F	; 0x80238f <InterruptFuncTable+0xdd>
    4718:	30 97       	sbiw	r30, 0x00	; 0
    471a:	29 f0       	breq	.+10     	; 0x4726 <__vector_110+0x3c>
    471c:	80 91 84 24 	lds	r24, 0x2484	; 0x802484 <InterruptSenderTable+0xdc>
    4720:	90 91 85 24 	lds	r25, 0x2485	; 0x802485 <InterruptSenderTable+0xdd>
    4724:	19 95       	eicall
    4726:	ff 91       	pop	r31
    4728:	ef 91       	pop	r30
    472a:	bf 91       	pop	r27
    472c:	af 91       	pop	r26
    472e:	9f 91       	pop	r25
    4730:	8f 91       	pop	r24
    4732:	7f 91       	pop	r23
    4734:	6f 91       	pop	r22
    4736:	5f 91       	pop	r21
    4738:	4f 91       	pop	r20
    473a:	3f 91       	pop	r19
    473c:	2f 91       	pop	r18
    473e:	0f 90       	pop	r0
    4740:	0b be       	out	0x3b, r0	; 59
    4742:	0f 90       	pop	r0
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	0f 90       	pop	r0
    4748:	1f 90       	pop	r1
    474a:	18 95       	reti

0000474c <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    474c:	1f 92       	push	r1
    474e:	0f 92       	push	r0
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	0f 92       	push	r0
    4754:	11 24       	eor	r1, r1
    4756:	0b b6       	in	r0, 0x3b	; 59
    4758:	0f 92       	push	r0
    475a:	2f 93       	push	r18
    475c:	3f 93       	push	r19
    475e:	4f 93       	push	r20
    4760:	5f 93       	push	r21
    4762:	6f 93       	push	r22
    4764:	7f 93       	push	r23
    4766:	8f 93       	push	r24
    4768:	9f 93       	push	r25
    476a:	af 93       	push	r26
    476c:	bf 93       	push	r27
    476e:	ef 93       	push	r30
    4770:	ff 93       	push	r31
    4772:	e0 91 90 23 	lds	r30, 0x2390	; 0x802390 <InterruptFuncTable+0xde>
    4776:	f0 91 91 23 	lds	r31, 0x2391	; 0x802391 <InterruptFuncTable+0xdf>
    477a:	30 97       	sbiw	r30, 0x00	; 0
    477c:	29 f0       	breq	.+10     	; 0x4788 <__vector_111+0x3c>
    477e:	80 91 86 24 	lds	r24, 0x2486	; 0x802486 <InterruptSenderTable+0xde>
    4782:	90 91 87 24 	lds	r25, 0x2487	; 0x802487 <InterruptSenderTable+0xdf>
    4786:	19 95       	eicall
    4788:	ff 91       	pop	r31
    478a:	ef 91       	pop	r30
    478c:	bf 91       	pop	r27
    478e:	af 91       	pop	r26
    4790:	9f 91       	pop	r25
    4792:	8f 91       	pop	r24
    4794:	7f 91       	pop	r23
    4796:	6f 91       	pop	r22
    4798:	5f 91       	pop	r21
    479a:	4f 91       	pop	r20
    479c:	3f 91       	pop	r19
    479e:	2f 91       	pop	r18
    47a0:	0f 90       	pop	r0
    47a2:	0b be       	out	0x3b, r0	; 59
    47a4:	0f 90       	pop	r0
    47a6:	0f be       	out	0x3f, r0	; 63
    47a8:	0f 90       	pop	r0
    47aa:	1f 90       	pop	r1
    47ac:	18 95       	reti

000047ae <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    47ae:	1f 92       	push	r1
    47b0:	0f 92       	push	r0
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	0f 92       	push	r0
    47b6:	11 24       	eor	r1, r1
    47b8:	0b b6       	in	r0, 0x3b	; 59
    47ba:	0f 92       	push	r0
    47bc:	2f 93       	push	r18
    47be:	3f 93       	push	r19
    47c0:	4f 93       	push	r20
    47c2:	5f 93       	push	r21
    47c4:	6f 93       	push	r22
    47c6:	7f 93       	push	r23
    47c8:	8f 93       	push	r24
    47ca:	9f 93       	push	r25
    47cc:	af 93       	push	r26
    47ce:	bf 93       	push	r27
    47d0:	ef 93       	push	r30
    47d2:	ff 93       	push	r31
    47d4:	e0 91 92 23 	lds	r30, 0x2392	; 0x802392 <InterruptFuncTable+0xe0>
    47d8:	f0 91 93 23 	lds	r31, 0x2393	; 0x802393 <InterruptFuncTable+0xe1>
    47dc:	30 97       	sbiw	r30, 0x00	; 0
    47de:	29 f0       	breq	.+10     	; 0x47ea <__vector_112+0x3c>
    47e0:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <InterruptSenderTable+0xe0>
    47e4:	90 91 89 24 	lds	r25, 0x2489	; 0x802489 <InterruptSenderTable+0xe1>
    47e8:	19 95       	eicall
    47ea:	ff 91       	pop	r31
    47ec:	ef 91       	pop	r30
    47ee:	bf 91       	pop	r27
    47f0:	af 91       	pop	r26
    47f2:	9f 91       	pop	r25
    47f4:	8f 91       	pop	r24
    47f6:	7f 91       	pop	r23
    47f8:	6f 91       	pop	r22
    47fa:	5f 91       	pop	r21
    47fc:	4f 91       	pop	r20
    47fe:	3f 91       	pop	r19
    4800:	2f 91       	pop	r18
    4802:	0f 90       	pop	r0
    4804:	0b be       	out	0x3b, r0	; 59
    4806:	0f 90       	pop	r0
    4808:	0f be       	out	0x3f, r0	; 63
    480a:	0f 90       	pop	r0
    480c:	1f 90       	pop	r1
    480e:	18 95       	reti

00004810 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    4810:	1f 92       	push	r1
    4812:	0f 92       	push	r0
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	0f 92       	push	r0
    4818:	11 24       	eor	r1, r1
    481a:	0b b6       	in	r0, 0x3b	; 59
    481c:	0f 92       	push	r0
    481e:	2f 93       	push	r18
    4820:	3f 93       	push	r19
    4822:	4f 93       	push	r20
    4824:	5f 93       	push	r21
    4826:	6f 93       	push	r22
    4828:	7f 93       	push	r23
    482a:	8f 93       	push	r24
    482c:	9f 93       	push	r25
    482e:	af 93       	push	r26
    4830:	bf 93       	push	r27
    4832:	ef 93       	push	r30
    4834:	ff 93       	push	r31
    4836:	e0 91 94 23 	lds	r30, 0x2394	; 0x802394 <InterruptFuncTable+0xe2>
    483a:	f0 91 95 23 	lds	r31, 0x2395	; 0x802395 <InterruptFuncTable+0xe3>
    483e:	30 97       	sbiw	r30, 0x00	; 0
    4840:	29 f0       	breq	.+10     	; 0x484c <__vector_113+0x3c>
    4842:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <InterruptSenderTable+0xe2>
    4846:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <InterruptSenderTable+0xe3>
    484a:	19 95       	eicall
    484c:	ff 91       	pop	r31
    484e:	ef 91       	pop	r30
    4850:	bf 91       	pop	r27
    4852:	af 91       	pop	r26
    4854:	9f 91       	pop	r25
    4856:	8f 91       	pop	r24
    4858:	7f 91       	pop	r23
    485a:	6f 91       	pop	r22
    485c:	5f 91       	pop	r21
    485e:	4f 91       	pop	r20
    4860:	3f 91       	pop	r19
    4862:	2f 91       	pop	r18
    4864:	0f 90       	pop	r0
    4866:	0b be       	out	0x3b, r0	; 59
    4868:	0f 90       	pop	r0
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	0f 90       	pop	r0
    486e:	1f 90       	pop	r1
    4870:	18 95       	reti

00004872 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4872:	1f 92       	push	r1
    4874:	0f 92       	push	r0
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	0f 92       	push	r0
    487a:	11 24       	eor	r1, r1
    487c:	0b b6       	in	r0, 0x3b	; 59
    487e:	0f 92       	push	r0
    4880:	2f 93       	push	r18
    4882:	3f 93       	push	r19
    4884:	4f 93       	push	r20
    4886:	5f 93       	push	r21
    4888:	6f 93       	push	r22
    488a:	7f 93       	push	r23
    488c:	8f 93       	push	r24
    488e:	9f 93       	push	r25
    4890:	af 93       	push	r26
    4892:	bf 93       	push	r27
    4894:	ef 93       	push	r30
    4896:	ff 93       	push	r31
    4898:	e0 91 a0 23 	lds	r30, 0x23A0	; 0x8023a0 <InterruptFuncTable+0xee>
    489c:	f0 91 a1 23 	lds	r31, 0x23A1	; 0x8023a1 <InterruptFuncTable+0xef>
    48a0:	30 97       	sbiw	r30, 0x00	; 0
    48a2:	29 f0       	breq	.+10     	; 0x48ae <__vector_119+0x3c>
    48a4:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <InterruptSenderTable+0xee>
    48a8:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <InterruptSenderTable+0xef>
    48ac:	19 95       	eicall
    48ae:	ff 91       	pop	r31
    48b0:	ef 91       	pop	r30
    48b2:	bf 91       	pop	r27
    48b4:	af 91       	pop	r26
    48b6:	9f 91       	pop	r25
    48b8:	8f 91       	pop	r24
    48ba:	7f 91       	pop	r23
    48bc:	6f 91       	pop	r22
    48be:	5f 91       	pop	r21
    48c0:	4f 91       	pop	r20
    48c2:	3f 91       	pop	r19
    48c4:	2f 91       	pop	r18
    48c6:	0f 90       	pop	r0
    48c8:	0b be       	out	0x3b, r0	; 59
    48ca:	0f 90       	pop	r0
    48cc:	0f be       	out	0x3f, r0	; 63
    48ce:	0f 90       	pop	r0
    48d0:	1f 90       	pop	r1
    48d2:	18 95       	reti

000048d4 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    48d4:	1f 92       	push	r1
    48d6:	0f 92       	push	r0
    48d8:	0f b6       	in	r0, 0x3f	; 63
    48da:	0f 92       	push	r0
    48dc:	11 24       	eor	r1, r1
    48de:	0b b6       	in	r0, 0x3b	; 59
    48e0:	0f 92       	push	r0
    48e2:	2f 93       	push	r18
    48e4:	3f 93       	push	r19
    48e6:	4f 93       	push	r20
    48e8:	5f 93       	push	r21
    48ea:	6f 93       	push	r22
    48ec:	7f 93       	push	r23
    48ee:	8f 93       	push	r24
    48f0:	9f 93       	push	r25
    48f2:	af 93       	push	r26
    48f4:	bf 93       	push	r27
    48f6:	ef 93       	push	r30
    48f8:	ff 93       	push	r31
    48fa:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <InterruptFuncTable+0xf0>
    48fe:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <InterruptFuncTable+0xf1>
    4902:	30 97       	sbiw	r30, 0x00	; 0
    4904:	29 f0       	breq	.+10     	; 0x4910 <__vector_120+0x3c>
    4906:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <InterruptSenderTable+0xf0>
    490a:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <InterruptSenderTable+0xf1>
    490e:	19 95       	eicall
    4910:	ff 91       	pop	r31
    4912:	ef 91       	pop	r30
    4914:	bf 91       	pop	r27
    4916:	af 91       	pop	r26
    4918:	9f 91       	pop	r25
    491a:	8f 91       	pop	r24
    491c:	7f 91       	pop	r23
    491e:	6f 91       	pop	r22
    4920:	5f 91       	pop	r21
    4922:	4f 91       	pop	r20
    4924:	3f 91       	pop	r19
    4926:	2f 91       	pop	r18
    4928:	0f 90       	pop	r0
    492a:	0b be       	out	0x3b, r0	; 59
    492c:	0f 90       	pop	r0
    492e:	0f be       	out	0x3f, r0	; 63
    4930:	0f 90       	pop	r0
    4932:	1f 90       	pop	r1
    4934:	18 95       	reti

00004936 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4936:	1f 92       	push	r1
    4938:	0f 92       	push	r0
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	0f 92       	push	r0
    493e:	11 24       	eor	r1, r1
    4940:	0b b6       	in	r0, 0x3b	; 59
    4942:	0f 92       	push	r0
    4944:	2f 93       	push	r18
    4946:	3f 93       	push	r19
    4948:	4f 93       	push	r20
    494a:	5f 93       	push	r21
    494c:	6f 93       	push	r22
    494e:	7f 93       	push	r23
    4950:	8f 93       	push	r24
    4952:	9f 93       	push	r25
    4954:	af 93       	push	r26
    4956:	bf 93       	push	r27
    4958:	ef 93       	push	r30
    495a:	ff 93       	push	r31
    495c:	e0 91 a4 23 	lds	r30, 0x23A4	; 0x8023a4 <InterruptFuncTable+0xf2>
    4960:	f0 91 a5 23 	lds	r31, 0x23A5	; 0x8023a5 <InterruptFuncTable+0xf3>
    4964:	30 97       	sbiw	r30, 0x00	; 0
    4966:	29 f0       	breq	.+10     	; 0x4972 <__vector_121+0x3c>
    4968:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <InterruptSenderTable+0xf2>
    496c:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <InterruptSenderTable+0xf3>
    4970:	19 95       	eicall
    4972:	ff 91       	pop	r31
    4974:	ef 91       	pop	r30
    4976:	bf 91       	pop	r27
    4978:	af 91       	pop	r26
    497a:	9f 91       	pop	r25
    497c:	8f 91       	pop	r24
    497e:	7f 91       	pop	r23
    4980:	6f 91       	pop	r22
    4982:	5f 91       	pop	r21
    4984:	4f 91       	pop	r20
    4986:	3f 91       	pop	r19
    4988:	2f 91       	pop	r18
    498a:	0f 90       	pop	r0
    498c:	0b be       	out	0x3b, r0	; 59
    498e:	0f 90       	pop	r0
    4990:	0f be       	out	0x3f, r0	; 63
    4992:	0f 90       	pop	r0
    4994:	1f 90       	pop	r1
    4996:	18 95       	reti

00004998 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4998:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    499c:	fd cf       	rjmp	.-6      	; 0x4998 <__cxa_pure_virtual>

0000499e <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    499e:	87 e6       	ldi	r24, 0x67	; 103
    49a0:	95 e2       	ldi	r25, 0x25	; 37
    49a2:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN4CSPIC1Ev>
CTimerC timer;
    49a6:	84 e6       	ldi	r24, 0x64	; 100
    49a8:	95 e2       	ldi	r25, 0x25	; 37
    49aa:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    49ae:	81 e6       	ldi	r24, 0x61	; 97
    49b0:	95 e2       	ldi	r25, 0x25	; 37
    49b2:	0e 94 5d 31 	call	0x62ba	; 0x62ba <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    49b6:	8e e5       	ldi	r24, 0x5E	; 94
    49b8:	95 e2       	ldi	r25, 0x25	; 37
    49ba:	0e 94 3e 32 	call	0x647c	; 0x647c <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    49be:	8b e5       	ldi	r24, 0x5B	; 91
    49c0:	95 e2       	ldi	r25, 0x25	; 37
    49c2:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    49c6:	88 e5       	ldi	r24, 0x58	; 88
    49c8:	95 e2       	ldi	r25, 0x25	; 37
    49ca:	0e 94 b2 30 	call	0x6164	; 0x6164 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    49ce:	86 e5       	ldi	r24, 0x56	; 86
    49d0:	95 e2       	ldi	r25, 0x25	; 37
    49d2:	0e 94 be 2b 	call	0x577c	; 0x577c <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    49d6:	8e e4       	ldi	r24, 0x4E	; 78
    49d8:	95 e2       	ldi	r25, 0x25	; 37
    49da:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    49de:	81 e3       	ldi	r24, 0x31	; 49
    49e0:	95 e2       	ldi	r25, 0x25	; 37
    49e2:	0e 94 b7 28 	call	0x516e	; 0x516e <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    49e6:	87 e2       	ldi	r24, 0x27	; 39
    49e8:	95 e2       	ldi	r25, 0x25	; 37
    49ea:	0e 94 ef 2c 	call	0x59de	; 0x59de <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    49ee:	86 e2       	ldi	r24, 0x26	; 38
    49f0:	95 e2       	ldi	r25, 0x25	; 37
    49f2:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    49f6:	86 ea       	ldi	r24, 0xA6	; 166
    49f8:	94 e2       	ldi	r25, 0x24	; 36
    49fa:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    49fe:	82 ea       	ldi	r24, 0xA2	; 162
    4a00:	94 e2       	ldi	r25, 0x24	; 36
    4a02:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN8CDS18B20C1Ev>
    4a06:	08 95       	ret

00004a08 <_GLOBAL__sub_D_dacSPI>:
    4a08:	82 ea       	ldi	r24, 0xA2	; 162
    4a0a:	94 e2       	ldi	r25, 0x24	; 36
    4a0c:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    4a10:	86 ea       	ldi	r24, 0xA6	; 166
    4a12:	94 e2       	ldi	r25, 0x24	; 36
    4a14:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4a18:	86 e2       	ldi	r24, 0x26	; 38
    4a1a:	95 e2       	ldi	r25, 0x25	; 37
    4a1c:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    4a20:	87 e2       	ldi	r24, 0x27	; 39
    4a22:	95 e2       	ldi	r25, 0x25	; 37
    4a24:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    4a28:	81 e3       	ldi	r24, 0x31	; 49
    4a2a:	95 e2       	ldi	r25, 0x25	; 37
    4a2c:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    4a30:	8e e4       	ldi	r24, 0x4E	; 78
    4a32:	95 e2       	ldi	r25, 0x25	; 37
    4a34:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    4a38:	86 e5       	ldi	r24, 0x56	; 86
    4a3a:	95 e2       	ldi	r25, 0x25	; 37
    4a3c:	0e 94 ca 2b 	call	0x5794	; 0x5794 <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    4a40:	88 e5       	ldi	r24, 0x58	; 88
    4a42:	95 e2       	ldi	r25, 0x25	; 37
    4a44:	0e 94 be 30 	call	0x617c	; 0x617c <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    4a48:	8b e5       	ldi	r24, 0x5B	; 91
    4a4a:	95 e2       	ldi	r25, 0x25	; 37
    4a4c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    4a50:	8e e5       	ldi	r24, 0x5E	; 94
    4a52:	95 e2       	ldi	r25, 0x25	; 37
    4a54:	0e 94 4a 32 	call	0x6494	; 0x6494 <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    4a58:	81 e6       	ldi	r24, 0x61	; 97
    4a5a:	95 e2       	ldi	r25, 0x25	; 37
    4a5c:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    4a60:	84 e6       	ldi	r24, 0x64	; 100
    4a62:	95 e2       	ldi	r25, 0x25	; 37
    4a64:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4a68:	87 e6       	ldi	r24, 0x67	; 103
    4a6a:	95 e2       	ldi	r25, 0x25	; 37
    4a6c:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN4CSPID1Ev>
    4a70:	08 95       	ret

00004a72 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4a7e:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4a80:	84 e6       	ldi	r24, 0x64	; 100
    4a82:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize modules
	laserBoard.InitializeIO();
    4a86:	87 e2       	ldi	r24, 0x27	; 39
    4a88:	95 e2       	ldi	r25, 0x25	; 37
    4a8a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4a8e:	82 ea       	ldi	r24, 0xA2	; 162
    4a90:	94 e2       	ldi	r25, 0x24	; 36
    4a92:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4a96:	86 e2       	ldi	r24, 0x26	; 38
    4a98:	95 e2       	ldi	r25, 0x25	; 37
    4a9a:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    4a9e:	46 e0       	ldi	r20, 0x06	; 6
    4aa0:	60 e0       	ldi	r22, 0x00	; 0
    4aa2:	84 e6       	ldi	r24, 0x64	; 100
    4aa4:	95 e2       	ldi	r25, 0x25	; 37
    4aa6:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    4aaa:	68 ea       	ldi	r22, 0xA8	; 168
    4aac:	71 e6       	ldi	r23, 0x61	; 97
    4aae:	84 e6       	ldi	r24, 0x64	; 100
    4ab0:	95 e2       	ldi	r25, 0x25	; 37
    4ab2:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    4ab6:	21 e0       	ldi	r18, 0x01	; 1
    4ab8:	46 ea       	ldi	r20, 0xA6	; 166
    4aba:	54 e2       	ldi	r21, 0x24	; 36
    4abc:	6d ec       	ldi	r22, 0xCD	; 205
    4abe:	7f e0       	ldi	r23, 0x0F	; 15
    4ac0:	84 e6       	ldi	r24, 0x64	; 100
    4ac2:	95 e2       	ldi	r25, 0x25	; 37
    4ac4:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4ac8:	47 e0       	ldi	r20, 0x07	; 7
    4aca:	60 e0       	ldi	r22, 0x00	; 0
    4acc:	81 e6       	ldi	r24, 0x61	; 97
    4ace:	95 e2       	ldi	r25, 0x25	; 37
    4ad0:	0e 94 c6 30 	call	0x618c	; 0x618c <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4ad4:	62 e1       	ldi	r22, 0x12	; 18
    4ad6:	7a e7       	ldi	r23, 0x7A	; 122
    4ad8:	81 e6       	ldi	r24, 0x61	; 97
    4ada:	95 e2       	ldi	r25, 0x25	; 37
    4adc:	0e 94 0a 31 	call	0x6214	; 0x6214 <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4ae0:	48 e0       	ldi	r20, 0x08	; 8
    4ae2:	60 e0       	ldi	r22, 0x00	; 0
    4ae4:	8b e5       	ldi	r24, 0x5B	; 91
    4ae6:	95 e2       	ldi	r25, 0x25	; 37
    4ae8:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4aec:	6f ef       	ldi	r22, 0xFF	; 255
    4aee:	7f ef       	ldi	r23, 0xFF	; 255
    4af0:	8b e5       	ldi	r24, 0x5B	; 91
    4af2:	95 e2       	ldi	r25, 0x25	; 37
    4af4:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4af8:	6f ef       	ldi	r22, 0xFF	; 255
    4afa:	7f ef       	ldi	r23, 0xFF	; 255
    4afc:	8b e5       	ldi	r24, 0x5B	; 91
    4afe:	95 e2       	ldi	r25, 0x25	; 37
    4b00:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    4b04:	45 e0       	ldi	r20, 0x05	; 5
    4b06:	63 e0       	ldi	r22, 0x03	; 3
    4b08:	88 e5       	ldi	r24, 0x58	; 88
    4b0a:	95 e2       	ldi	r25, 0x25	; 37
    4b0c:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    4b10:	60 e0       	ldi	r22, 0x00	; 0
    4b12:	72 e0       	ldi	r23, 0x02	; 2
    4b14:	88 e5       	ldi	r24, 0x58	; 88
    4b16:	95 e2       	ldi	r25, 0x25	; 37
    4b18:	0e 94 38 30 	call	0x6070	; 0x6070 <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    4b1c:	87 e2       	ldi	r24, 0x27	; 39
    4b1e:	95 e2       	ldi	r25, 0x25	; 37
    4b20:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    4b24:	87 e2       	ldi	r24, 0x27	; 39
    4b26:	95 e2       	ldi	r25, 0x25	; 37
    4b28:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    4b2c:	87 e2       	ldi	r24, 0x27	; 39
    4b2e:	95 e2       	ldi	r25, 0x25	; 37
    4b30:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    4b34:	87 e2       	ldi	r24, 0x27	; 39
    4b36:	95 e2       	ldi	r25, 0x25	; 37
    4b38:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4b3c:	21 e0       	ldi	r18, 0x01	; 1
    4b3e:	46 ea       	ldi	r20, 0xA6	; 166
    4b40:	54 e2       	ldi	r21, 0x24	; 36
    4b42:	60 e7       	ldi	r22, 0x70	; 112
    4b44:	76 e0       	ldi	r23, 0x06	; 6
    4b46:	88 e5       	ldi	r24, 0x58	; 88
    4b48:	95 e2       	ldi	r25, 0x25	; 37
    4b4a:	0e 94 4c 30 	call	0x6098	; 0x6098 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4b4e:	21 e0       	ldi	r18, 0x01	; 1
    4b50:	46 ea       	ldi	r20, 0xA6	; 166
    4b52:	54 e2       	ldi	r21, 0x24	; 36
    4b54:	63 e7       	ldi	r22, 0x73	; 115
    4b56:	76 e0       	ldi	r23, 0x06	; 6
    4b58:	88 e5       	ldi	r24, 0x58	; 88
    4b5a:	95 e2       	ldi	r25, 0x25	; 37
    4b5c:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    4b60:	60 e0       	ldi	r22, 0x00	; 0
    4b62:	71 e0       	ldi	r23, 0x01	; 1
    4b64:	88 e5       	ldi	r24, 0x58	; 88
    4b66:	95 e2       	ldi	r25, 0x25	; 37
    4b68:	0e 94 3d 30 	call	0x607a	; 0x607a <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    4b6c:	60 e0       	ldi	r22, 0x00	; 0
    4b6e:	72 e0       	ldi	r23, 0x02	; 2
    4b70:	88 e5       	ldi	r24, 0x58	; 88
    4b72:	95 e2       	ldi	r25, 0x25	; 37
    4b74:	0e 94 42 30 	call	0x6084	; 0x6084 <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	73 e0       	ldi	r23, 0x03	; 3
    4b7c:	88 e5       	ldi	r24, 0x58	; 88
    4b7e:	95 e2       	ldi	r25, 0x25	; 37
    4b80:	0e 94 47 30 	call	0x608e	; 0x608e <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    4b84:	2c e0       	ldi	r18, 0x0C	; 12
    4b86:	46 ea       	ldi	r20, 0xA6	; 166
    4b88:	54 e2       	ldi	r21, 0x24	; 36
    4b8a:	66 e7       	ldi	r22, 0x76	; 118
    4b8c:	76 e0       	ldi	r23, 0x06	; 6
    4b8e:	88 e5       	ldi	r24, 0x58	; 88
    4b90:	95 e2       	ldi	r25, 0x25	; 37
    4b92:	0e 94 7f 30 	call	0x60fe	; 0x60fe <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    4b96:	20 e3       	ldi	r18, 0x30	; 48
    4b98:	46 ea       	ldi	r20, 0xA6	; 166
    4b9a:	54 e2       	ldi	r21, 0x24	; 36
    4b9c:	67 e7       	ldi	r22, 0x77	; 119
    4b9e:	76 e0       	ldi	r23, 0x06	; 6
    4ba0:	88 e5       	ldi	r24, 0x58	; 88
    4ba2:	95 e2       	ldi	r25, 0x25	; 37
    4ba4:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    4ba8:	20 ec       	ldi	r18, 0xC0	; 192
    4baa:	46 ea       	ldi	r20, 0xA6	; 166
    4bac:	54 e2       	ldi	r21, 0x24	; 36
    4bae:	68 e7       	ldi	r22, 0x78	; 120
    4bb0:	76 e0       	ldi	r23, 0x06	; 6
    4bb2:	88 e5       	ldi	r24, 0x58	; 88
    4bb4:	95 e2       	ldi	r25, 0x25	; 37
    4bb6:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    4bba:	60 e0       	ldi	r22, 0x00	; 0
    4bbc:	74 e0       	ldi	r23, 0x04	; 4
    4bbe:	88 e5       	ldi	r24, 0x58	; 88
    4bc0:	95 e2       	ldi	r25, 0x25	; 37
    4bc2:	0e 94 10 30 	call	0x6020	; 0x6020 <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4bc6:	0f 2e       	mov	r0, r31
    4bc8:	f3 e0       	ldi	r31, 0x03	; 3
    4bca:	ef 2e       	mov	r14, r31
    4bcc:	f0 2d       	mov	r31, r0
    4bce:	00 e0       	ldi	r16, 0x00	; 0
    4bd0:	23 e0       	ldi	r18, 0x03	; 3
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	61 e0       	ldi	r22, 0x01	; 1
    4bd6:	87 e6       	ldi	r24, 0x67	; 103
    4bd8:	95 e2       	ldi	r25, 0x25	; 37
    4bda:	0e 94 b5 10 	call	0x216a	; 0x216a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4bde:	01 e0       	ldi	r16, 0x01	; 1
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	40 e0       	ldi	r20, 0x00	; 0
    4be4:	6d e0       	ldi	r22, 0x0D	; 13
    4be6:	86 e5       	ldi	r24, 0x56	; 86
    4be8:	95 e2       	ldi	r25, 0x25	; 37
    4bea:	0e 94 42 2b 	call	0x5684	; 0x5684 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4bee:	0f 2e       	mov	r0, r31
    4bf0:	f2 e1       	ldi	r31, 0x12	; 18
    4bf2:	cf 2e       	mov	r12, r31
    4bf4:	fa e7       	ldi	r31, 0x7A	; 122
    4bf6:	df 2e       	mov	r13, r31
    4bf8:	f0 2d       	mov	r31, r0
    4bfa:	e1 2c       	mov	r14, r1
    4bfc:	ff 24       	eor	r15, r15
    4bfe:	f3 94       	inc	r15
    4c00:	00 e0       	ldi	r16, 0x00	; 0
    4c02:	11 e0       	ldi	r17, 0x01	; 1
    4c04:	26 ea       	ldi	r18, 0xA6	; 166
    4c06:	34 e2       	ldi	r19, 0x24	; 36
    4c08:	46 e5       	ldi	r20, 0x56	; 86
    4c0a:	55 e2       	ldi	r21, 0x25	; 37
    4c0c:	61 e6       	ldi	r22, 0x61	; 97
    4c0e:	75 e2       	ldi	r23, 0x25	; 37
    4c10:	81 e3       	ldi	r24, 0x31	; 49
    4c12:	95 e2       	ldi	r25, 0x25	; 37
    4c14:	0e 94 bd 28 	call	0x517a	; 0x517a <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4c18:	40 e0       	ldi	r20, 0x00	; 0
    4c1a:	51 e0       	ldi	r21, 0x01	; 1
    4c1c:	61 e3       	ldi	r22, 0x31	; 49
    4c1e:	75 e2       	ldi	r23, 0x25	; 37
    4c20:	8e e4       	ldi	r24, 0x4E	; 78
    4c22:	95 e2       	ldi	r25, 0x25	; 37
    4c24:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4c28:	61 e3       	ldi	r22, 0x31	; 49
    4c2a:	75 e2       	ldi	r23, 0x25	; 37
    4c2c:	86 ea       	ldi	r24, 0xA6	; 166
    4c2e:	94 e2       	ldi	r25, 0x24	; 36
    4c30:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4c34:	87 e2       	ldi	r24, 0x27	; 39
    4c36:	95 e2       	ldi	r25, 0x25	; 37
    4c38:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4c3c:	86 ea       	ldi	r24, 0xA6	; 166
    4c3e:	94 e2       	ldi	r25, 0x24	; 36
    4c40:	80 93 ac 23 	sts	0x23AC, r24	; 0x8023ac <InterruptSenderTable+0x4>
    4c44:	90 93 ad 23 	sts	0x23AD, r25	; 0x8023ad <InterruptSenderTable+0x5>
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4c48:	82 e7       	ldi	r24, 0x72	; 114
    4c4a:	90 e1       	ldi	r25, 0x10	; 16
    4c4c:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <InterruptFuncTable+0x4>
    4c50:	90 93 b7 22 	sts	0x22B7, r25	; 0x8022b7 <InterruptFuncTable+0x5>
	
	sei();	/* Enable global interrupts */
    4c54:	78 94       	sei
}
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	df 90       	pop	r13
    4c60:	cf 90       	pop	r12
    4c62:	08 95       	ret

00004c64 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4c64:	cf 93       	push	r28
    4c66:	df 93       	push	r29
    4c68:	1f 92       	push	r1
    4c6a:	1f 92       	push	r1
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4c70:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z16SystemInitializev>
    4c74:	2a ea       	ldi	r18, 0xAA	; 170
    4c76:	36 ee       	ldi	r19, 0xE6	; 230
    4c78:	86 e9       	ldi	r24, 0x96	; 150
    4c7a:	91 e0       	ldi	r25, 0x01	; 1
    4c7c:	21 50       	subi	r18, 0x01	; 1
    4c7e:	30 40       	sbci	r19, 0x00	; 0
    4c80:	80 40       	sbci	r24, 0x00	; 0
    4c82:	90 40       	sbci	r25, 0x00	; 0
    4c84:	d9 f7       	brne	.-10     	; 0x4c7c <main+0x18>
    4c86:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4c88:	87 e2       	ldi	r24, 0x27	; 39
    4c8a:	95 e2       	ldi	r25, 0x25	; 37
    4c8c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_ZN11CLaserBoard8Relay1OnEv>
    4c90:	2f ef       	ldi	r18, 0xFF	; 255
    4c92:	33 ec       	ldi	r19, 0xC3	; 195
    4c94:	89 e0       	ldi	r24, 0x09	; 9
    4c96:	21 50       	subi	r18, 0x01	; 1
    4c98:	30 40       	sbci	r19, 0x00	; 0
    4c9a:	80 40       	sbci	r24, 0x00	; 0
    4c9c:	e1 f7       	brne	.-8      	; 0x4c96 <main+0x32>
    4c9e:	00 c0       	rjmp	.+0      	; 0x4ca0 <main+0x3c>
    4ca0:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4ca2:	19 82       	std	Y+1, r1	; 0x01
    4ca4:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4ca6:	42 e0       	ldi	r20, 0x02	; 2
    4ca8:	50 e0       	ldi	r21, 0x00	; 0
    4caa:	be 01       	movw	r22, r28
    4cac:	6f 5f       	subi	r22, 0xFF	; 255
    4cae:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb0:	87 e6       	ldi	r24, 0x67	; 103
    4cb2:	95 e2       	ldi	r25, 0x25	; 37
    4cb4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4cb8:	86 ea       	ldi	r24, 0xA6	; 166
    4cba:	94 e2       	ldi	r25, 0x24	; 36
    4cbc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4cc0:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4cc2:	87 e2       	ldi	r24, 0x27	; 39
    4cc4:	95 e2       	ldi	r25, 0x25	; 37
    4cc6:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4cca:	86 ea       	ldi	r24, 0xA6	; 166
    4ccc:	94 e2       	ldi	r25, 0x24	; 36
    4cce:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4cd2:	40 91 9e 24 	lds	r20, 0x249E	; 0x80249e <_ZZ4mainE3prs>
    4cd6:	50 91 9f 24 	lds	r21, 0x249F	; 0x80249f <_ZZ4mainE3prs+0x1>
    4cda:	ca 01       	movw	r24, r20
    4cdc:	01 96       	adiw	r24, 0x01	; 1
    4cde:	80 93 9e 24 	sts	0x249E, r24	; 0x80249e <_ZZ4mainE3prs>
    4ce2:	90 93 9f 24 	sts	0x249F, r25	; 0x80249f <_ZZ4mainE3prs+0x1>
    4ce6:	9a 01       	movw	r18, r20
    4ce8:	a9 e8       	ldi	r26, 0x89	; 137
    4cea:	b8 e8       	ldi	r27, 0x88	; 136
    4cec:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    4cf0:	96 95       	lsr	r25
    4cf2:	87 95       	ror	r24
    4cf4:	96 95       	lsr	r25
    4cf6:	87 95       	ror	r24
    4cf8:	96 95       	lsr	r25
    4cfa:	87 95       	ror	r24
    4cfc:	18 9f       	mul	r17, r24
    4cfe:	90 01       	movw	r18, r0
    4d00:	19 9f       	mul	r17, r25
    4d02:	30 0d       	add	r19, r0
    4d04:	11 24       	eor	r1, r1
    4d06:	42 17       	cp	r20, r18
    4d08:	53 07       	cpc	r21, r19
    4d0a:	41 f4       	brne	.+16     	; 0x4d1c <main+0xb8>
				temperature = D18B20.temp_18b20();
    4d0c:	82 ea       	ldi	r24, 0xA2	; 162
    4d0e:	94 e2       	ldi	r25, 0x24	; 36
    4d10:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN8CDS18B2010temp_18b20Ev>
    4d14:	80 93 a0 24 	sts	0x24A0, r24	; 0x8024a0 <temperature>
    4d18:	90 93 a1 24 	sts	0x24A1, r25	; 0x8024a1 <temperature+0x1>
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4d1c:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    4d20:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    4d24:	8a 30       	cpi	r24, 0x0A	; 10
    4d26:	91 40       	sbci	r25, 0x01	; 1
    4d28:	24 f0       	brlt	.+8      	; 0x4d32 <main+0xce>
				laserBoard.Relay2On();
    4d2a:	87 e2       	ldi	r24, 0x27	; 39
    4d2c:	95 e2       	ldi	r25, 0x25	; 37
    4d2e:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4d32:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <temperature>
    4d36:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <temperature+0x1>
    4d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4d3c:	91 05       	cpc	r25, r1
    4d3e:	0c f6       	brge	.-126    	; 0x4cc2 <main+0x5e>
				laserBoard.Relay2Off();			
    4d40:	87 e2       	ldi	r24, 0x27	; 39
    4d42:	95 e2       	ldi	r25, 0x25	; 37
    4d44:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN11CLaserBoard9Relay2OffEv>
    4d48:	bc cf       	rjmp	.-136    	; 0x4cc2 <main+0x5e>

00004d4a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	index = crch ^ data;	
	crch  = crcl ^ CRCTABH[index];
	crcl  = CRCTABL[index];

	return (crch << 8) | crcl;
}
    4d4a:	ef 92       	push	r14
    4d4c:	ff 92       	push	r15
    4d4e:	0f 93       	push	r16
    4d50:	1f 93       	push	r17
    4d52:	cf 93       	push	r28
    4d54:	df 93       	push	r29
    4d56:	8c 01       	movw	r16, r24
    4d58:	dc 01       	movw	r26, r24
    4d5a:	14 96       	adiw	r26, 0x04	; 4
    4d5c:	ed 91       	ld	r30, X+
    4d5e:	fc 91       	ld	r31, X
    4d60:	15 97       	sbiw	r26, 0x05	; 5
    4d62:	8a ea       	ldi	r24, 0xAA	; 170
    4d64:	80 83       	st	Z, r24
    4d66:	14 96       	adiw	r26, 0x04	; 4
    4d68:	ed 91       	ld	r30, X+
    4d6a:	fc 91       	ld	r31, X
    4d6c:	15 97       	sbiw	r26, 0x05	; 5
    4d6e:	8c ec       	ldi	r24, 0xCC	; 204
    4d70:	81 83       	std	Z+1, r24	; 0x01
    4d72:	14 96       	adiw	r26, 0x04	; 4
    4d74:	ed 91       	ld	r30, X+
    4d76:	fc 91       	ld	r31, X
    4d78:	15 97       	sbiw	r26, 0x05	; 5
    4d7a:	85 e0       	ldi	r24, 0x05	; 5
    4d7c:	82 0f       	add	r24, r18
    4d7e:	82 83       	std	Z+2, r24	; 0x02
    4d80:	14 96       	adiw	r26, 0x04	; 4
    4d82:	ed 91       	ld	r30, X+
    4d84:	fc 91       	ld	r31, X
    4d86:	15 97       	sbiw	r26, 0x05	; 5
    4d88:	82 e8       	ldi	r24, 0x82	; 130
    4d8a:	83 83       	std	Z+3, r24	; 0x03
    4d8c:	14 96       	adiw	r26, 0x04	; 4
    4d8e:	ed 91       	ld	r30, X+
    4d90:	fc 91       	ld	r31, X
    4d92:	15 97       	sbiw	r26, 0x05	; 5
    4d94:	74 83       	std	Z+4, r23	; 0x04
    4d96:	14 96       	adiw	r26, 0x04	; 4
    4d98:	ed 91       	ld	r30, X+
    4d9a:	fc 91       	ld	r31, X
    4d9c:	15 97       	sbiw	r26, 0x05	; 5
    4d9e:	65 83       	std	Z+5, r22	; 0x05
    4da0:	86 e0       	ldi	r24, 0x06	; 6
    4da2:	82 0f       	add	r24, r18
    4da4:	19 96       	adiw	r26, 0x09	; 9
    4da6:	8c 93       	st	X, r24
    4da8:	c9 01       	movw	r24, r18
    4daa:	96 95       	lsr	r25
    4dac:	87 95       	ror	r24
    4dae:	00 97       	sbiw	r24, 0x00	; 0
    4db0:	d9 f0       	breq	.+54     	; 0x4de8 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x9e>
    4db2:	e4 2f       	mov	r30, r20
    4db4:	f5 2f       	mov	r31, r21
    4db6:	03 96       	adiw	r24, 0x03	; 3
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	46 e0       	ldi	r20, 0x06	; 6
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	e8 01       	movw	r28, r16
    4dc2:	ac 81       	ldd	r26, Y+4	; 0x04
    4dc4:	bd 81       	ldd	r27, Y+5	; 0x05
    4dc6:	a4 0f       	add	r26, r20
    4dc8:	b5 1f       	adc	r27, r21
    4dca:	61 81       	ldd	r22, Z+1	; 0x01
    4dcc:	6c 93       	st	X, r22
    4dce:	ac 81       	ldd	r26, Y+4	; 0x04
    4dd0:	bd 81       	ldd	r27, Y+5	; 0x05
    4dd2:	a4 0f       	add	r26, r20
    4dd4:	b5 1f       	adc	r27, r21
    4dd6:	60 81       	ld	r22, Z
    4dd8:	32 96       	adiw	r30, 0x02	; 2
    4dda:	11 96       	adiw	r26, 0x01	; 1
    4ddc:	6c 93       	st	X, r22
    4dde:	4e 5f       	subi	r20, 0xFE	; 254
    4de0:	5f 4f       	sbci	r21, 0xFF	; 255
    4de2:	48 17       	cp	r20, r24
    4de4:	59 07       	cpc	r21, r25
    4de6:	61 f7       	brne	.-40     	; 0x4dc0 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x76>
    4de8:	f8 01       	movw	r30, r16
    4dea:	81 85       	ldd	r24, Z+9	; 0x09
    4dec:	a8 2f       	mov	r26, r24
    4dee:	b0 e0       	ldi	r27, 0x00	; 0
    4df0:	a4 30       	cpi	r26, 0x04	; 4
    4df2:	b1 05       	cpc	r27, r1
    4df4:	34 f1       	brlt	.+76     	; 0x4e42 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xf8>
    4df6:	04 80       	ldd	r0, Z+4	; 0x04
    4df8:	f5 81       	ldd	r31, Z+5	; 0x05
    4dfa:	e0 2d       	mov	r30, r0
    4dfc:	33 96       	adiw	r30, 0x03	; 3
    4dfe:	63 e0       	ldi	r22, 0x03	; 3
    4e00:	70 e0       	ldi	r23, 0x00	; 0
    4e02:	4f ef       	ldi	r20, 0xFF	; 255
    4e04:	5f ef       	ldi	r21, 0xFF	; 255
    4e06:	91 91       	ld	r25, Z+
    4e08:	49 27       	eor	r20, r25
    4e0a:	94 2f       	mov	r25, r20
    4e0c:	92 95       	swap	r25
    4e0e:	94 27       	eor	r25, r20
    4e10:	09 2e       	mov	r0, r25
    4e12:	96 95       	lsr	r25
    4e14:	96 95       	lsr	r25
    4e16:	90 25       	eor	r25, r0
    4e18:	09 2e       	mov	r0, r25
    4e1a:	96 95       	lsr	r25
    4e1c:	90 25       	eor	r25, r0
    4e1e:	97 70       	andi	r25, 0x07	; 7
    4e20:	04 2e       	mov	r0, r20
    4e22:	45 2f       	mov	r20, r21
    4e24:	96 95       	lsr	r25
    4e26:	07 94       	ror	r0
    4e28:	97 95       	ror	r25
    4e2a:	50 2d       	mov	r21, r0
    4e2c:	49 27       	eor	r20, r25
    4e2e:	06 94       	lsr	r0
    4e30:	97 95       	ror	r25
    4e32:	50 25       	eor	r21, r0
    4e34:	49 27       	eor	r20, r25
    4e36:	6f 5f       	subi	r22, 0xFF	; 255
    4e38:	7f 4f       	sbci	r23, 0xFF	; 255
    4e3a:	6a 17       	cp	r22, r26
    4e3c:	7b 07       	cpc	r23, r27
    4e3e:	1c f3       	brlt	.-58     	; 0x4e06 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xbc>
    4e40:	02 c0       	rjmp	.+4      	; 0x4e46 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xfc>
    4e42:	4f ef       	ldi	r20, 0xFF	; 255
    4e44:	5f ef       	ldi	r21, 0xFF	; 255
    4e46:	d8 01       	movw	r26, r16
    4e48:	14 96       	adiw	r26, 0x04	; 4
    4e4a:	ed 91       	ld	r30, X+
    4e4c:	fc 91       	ld	r31, X
    4e4e:	15 97       	sbiw	r26, 0x05	; 5
    4e50:	e8 0f       	add	r30, r24
    4e52:	f1 1d       	adc	r31, r1
    4e54:	51 83       	std	Z+1, r21	; 0x01
    4e56:	19 96       	adiw	r26, 0x09	; 9
    4e58:	8c 91       	ld	r24, X
    4e5a:	19 97       	sbiw	r26, 0x09	; 9
    4e5c:	14 96       	adiw	r26, 0x04	; 4
    4e5e:	ed 91       	ld	r30, X+
    4e60:	fc 91       	ld	r31, X
    4e62:	15 97       	sbiw	r26, 0x05	; 5
    4e64:	e8 0f       	add	r30, r24
    4e66:	f1 1d       	adc	r31, r1
    4e68:	40 83       	st	Z, r20
    4e6a:	28 5f       	subi	r18, 0xF8	; 248
    4e6c:	19 96       	adiw	r26, 0x09	; 9
    4e6e:	2c 93       	st	X, r18
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	ff 90       	pop	r15
    4e7a:	ef 90       	pop	r14
    4e7c:	08 95       	ret

00004e7e <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
    4e7e:	0f 93       	push	r16
    4e80:	1f 93       	push	r17
    4e82:	cf 93       	push	r28
    4e84:	df 93       	push	r29
    4e86:	ec 01       	movw	r28, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	8a 01       	movw	r16, r20
    4e8c:	6f 83       	std	Y+7, r22	; 0x07
    4e8e:	78 87       	std	Y+8, r23	; 0x08
    4e90:	4a 87       	std	Y+10, r20	; 0x0a
    4e92:	5b 87       	std	Y+11, r21	; 0x0b
    4e94:	0e 94 1e 34 	call	0x683c	; 0x683c <malloc>
    4e98:	8a 83       	std	Y+2, r24	; 0x02
    4e9a:	9b 83       	std	Y+3, r25	; 0x03
    4e9c:	c8 01       	movw	r24, r16
    4e9e:	0e 94 1e 34 	call	0x683c	; 0x683c <malloc>
    4ea2:	8c 83       	std	Y+4, r24	; 0x04
    4ea4:	9d 83       	std	Y+5, r25	; 0x05
    4ea6:	19 86       	std	Y+9, r1	; 0x09
    4ea8:	1e 82       	std	Y+6, r1	; 0x06
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	08 95       	ret

00004eb4 <_ZN16CMBEventsHandler11FreeBuffersEv>:
    4eb4:	cf 93       	push	r28
    4eb6:	df 93       	push	r29
    4eb8:	ec 01       	movw	r28, r24
    4eba:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ebe:	0e 94 b3 34 	call	0x6966	; 0x6966 <free>
    4ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ec6:	0e 94 b3 34 	call	0x6966	; 0x6966 <free>
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	08 95       	ret

00004ed0 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	14 96       	adiw	r26, 0x04	; 4
    4ed8:	ed 91       	ld	r30, X+
    4eda:	fc 91       	ld	r31, X
    4edc:	15 97       	sbiw	r26, 0x05	; 5
    4ede:	8a ea       	ldi	r24, 0xAA	; 170
    4ee0:	80 83       	st	Z, r24
    4ee2:	14 96       	adiw	r26, 0x04	; 4
    4ee4:	ed 91       	ld	r30, X+
    4ee6:	fc 91       	ld	r31, X
    4ee8:	15 97       	sbiw	r26, 0x05	; 5
    4eea:	8c ec       	ldi	r24, 0xCC	; 204
    4eec:	81 83       	std	Z+1, r24	; 0x01
    4eee:	14 96       	adiw	r26, 0x04	; 4
    4ef0:	ed 91       	ld	r30, X+
    4ef2:	fc 91       	ld	r31, X
    4ef4:	15 97       	sbiw	r26, 0x05	; 5
    4ef6:	85 e0       	ldi	r24, 0x05	; 5
    4ef8:	82 83       	std	Z+2, r24	; 0x02
    4efa:	14 96       	adiw	r26, 0x04	; 4
    4efc:	ed 91       	ld	r30, X+
    4efe:	fc 91       	ld	r31, X
    4f00:	15 97       	sbiw	r26, 0x05	; 5
    4f02:	81 e8       	ldi	r24, 0x81	; 129
    4f04:	83 83       	std	Z+3, r24	; 0x03
    4f06:	14 96       	adiw	r26, 0x04	; 4
    4f08:	ed 91       	ld	r30, X+
    4f0a:	fc 91       	ld	r31, X
    4f0c:	15 97       	sbiw	r26, 0x05	; 5
    4f0e:	64 83       	std	Z+4, r22	; 0x04
    4f10:	14 96       	adiw	r26, 0x04	; 4
    4f12:	ed 91       	ld	r30, X+
    4f14:	fc 91       	ld	r31, X
    4f16:	15 97       	sbiw	r26, 0x05	; 5
    4f18:	45 83       	std	Z+5, r20	; 0x05
    4f1a:	86 e0       	ldi	r24, 0x06	; 6
    4f1c:	19 96       	adiw	r26, 0x09	; 9
    4f1e:	8c 93       	st	X, r24
    4f20:	19 97       	sbiw	r26, 0x09	; 9
    4f22:	14 96       	adiw	r26, 0x04	; 4
    4f24:	cd 91       	ld	r28, X+
    4f26:	dc 91       	ld	r29, X
    4f28:	15 97       	sbiw	r26, 0x05	; 5
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	33 96       	adiw	r30, 0x03	; 3
    4f2e:	be 01       	movw	r22, r28
    4f30:	6a 5f       	subi	r22, 0xFA	; 250
    4f32:	7f 4f       	sbci	r23, 0xFF	; 255
    4f34:	2f ef       	ldi	r18, 0xFF	; 255
    4f36:	3f ef       	ldi	r19, 0xFF	; 255
    4f38:	91 91       	ld	r25, Z+
    4f3a:	29 27       	eor	r18, r25
    4f3c:	92 2f       	mov	r25, r18
    4f3e:	92 95       	swap	r25
    4f40:	92 27       	eor	r25, r18
    4f42:	09 2e       	mov	r0, r25
    4f44:	96 95       	lsr	r25
    4f46:	96 95       	lsr	r25
    4f48:	90 25       	eor	r25, r0
    4f4a:	09 2e       	mov	r0, r25
    4f4c:	96 95       	lsr	r25
    4f4e:	90 25       	eor	r25, r0
    4f50:	97 70       	andi	r25, 0x07	; 7
    4f52:	02 2e       	mov	r0, r18
    4f54:	23 2f       	mov	r18, r19
    4f56:	96 95       	lsr	r25
    4f58:	07 94       	ror	r0
    4f5a:	97 95       	ror	r25
    4f5c:	30 2d       	mov	r19, r0
    4f5e:	29 27       	eor	r18, r25
    4f60:	06 94       	lsr	r0
    4f62:	97 95       	ror	r25
    4f64:	30 25       	eor	r19, r0
    4f66:	29 27       	eor	r18, r25
    4f68:	e6 17       	cp	r30, r22
    4f6a:	f7 07       	cpc	r31, r23
    4f6c:	29 f7       	brne	.-54     	; 0x4f38 <_ZN16CMBEventsHandler13FillRegDataRqEhh+0x68>
    4f6e:	3f 83       	std	Y+7, r19	; 0x07
    4f70:	19 96       	adiw	r26, 0x09	; 9
    4f72:	8c 91       	ld	r24, X
    4f74:	19 97       	sbiw	r26, 0x09	; 9
    4f76:	14 96       	adiw	r26, 0x04	; 4
    4f78:	ed 91       	ld	r30, X+
    4f7a:	fc 91       	ld	r31, X
    4f7c:	15 97       	sbiw	r26, 0x05	; 5
    4f7e:	e8 0f       	add	r30, r24
    4f80:	f1 1d       	adc	r31, r1
    4f82:	20 83       	st	Z, r18
    4f84:	48 5f       	subi	r20, 0xF8	; 248
    4f86:	19 96       	adiw	r26, 0x09	; 9
    4f88:	4c 93       	st	X, r20
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	08 95       	ret

00004f90 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:
    4f90:	cf 93       	push	r28
    4f92:	df 93       	push	r29
    4f94:	dc 01       	movw	r26, r24
    4f96:	14 96       	adiw	r26, 0x04	; 4
    4f98:	ed 91       	ld	r30, X+
    4f9a:	fc 91       	ld	r31, X
    4f9c:	15 97       	sbiw	r26, 0x05	; 5
    4f9e:	8a ea       	ldi	r24, 0xAA	; 170
    4fa0:	80 83       	st	Z, r24
    4fa2:	14 96       	adiw	r26, 0x04	; 4
    4fa4:	ed 91       	ld	r30, X+
    4fa6:	fc 91       	ld	r31, X
    4fa8:	15 97       	sbiw	r26, 0x05	; 5
    4faa:	8c ec       	ldi	r24, 0xCC	; 204
    4fac:	81 83       	std	Z+1, r24	; 0x01
    4fae:	14 96       	adiw	r26, 0x04	; 4
    4fb0:	ed 91       	ld	r30, X+
    4fb2:	fc 91       	ld	r31, X
    4fb4:	15 97       	sbiw	r26, 0x05	; 5
    4fb6:	86 e0       	ldi	r24, 0x06	; 6
    4fb8:	82 83       	std	Z+2, r24	; 0x02
    4fba:	14 96       	adiw	r26, 0x04	; 4
    4fbc:	ed 91       	ld	r30, X+
    4fbe:	fc 91       	ld	r31, X
    4fc0:	15 97       	sbiw	r26, 0x05	; 5
    4fc2:	83 e8       	ldi	r24, 0x83	; 131
    4fc4:	83 83       	std	Z+3, r24	; 0x03
    4fc6:	14 96       	adiw	r26, 0x04	; 4
    4fc8:	ed 91       	ld	r30, X+
    4fca:	fc 91       	ld	r31, X
    4fcc:	15 97       	sbiw	r26, 0x05	; 5
    4fce:	74 83       	std	Z+4, r23	; 0x04
    4fd0:	14 96       	adiw	r26, 0x04	; 4
    4fd2:	ed 91       	ld	r30, X+
    4fd4:	fc 91       	ld	r31, X
    4fd6:	15 97       	sbiw	r26, 0x05	; 5
    4fd8:	65 83       	std	Z+5, r22	; 0x05
    4fda:	14 96       	adiw	r26, 0x04	; 4
    4fdc:	ed 91       	ld	r30, X+
    4fde:	fc 91       	ld	r31, X
    4fe0:	15 97       	sbiw	r26, 0x05	; 5
    4fe2:	46 83       	std	Z+6, r20	; 0x06
    4fe4:	87 e0       	ldi	r24, 0x07	; 7
    4fe6:	19 96       	adiw	r26, 0x09	; 9
    4fe8:	8c 93       	st	X, r24
    4fea:	19 97       	sbiw	r26, 0x09	; 9
    4fec:	14 96       	adiw	r26, 0x04	; 4
    4fee:	cd 91       	ld	r28, X+
    4ff0:	dc 91       	ld	r29, X
    4ff2:	15 97       	sbiw	r26, 0x05	; 5
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	33 96       	adiw	r30, 0x03	; 3
    4ff8:	ae 01       	movw	r20, r28
    4ffa:	49 5f       	subi	r20, 0xF9	; 249
    4ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ffe:	2f ef       	ldi	r18, 0xFF	; 255
    5000:	3f ef       	ldi	r19, 0xFF	; 255
    5002:	91 91       	ld	r25, Z+
    5004:	29 27       	eor	r18, r25
    5006:	92 2f       	mov	r25, r18
    5008:	92 95       	swap	r25
    500a:	92 27       	eor	r25, r18
    500c:	09 2e       	mov	r0, r25
    500e:	96 95       	lsr	r25
    5010:	96 95       	lsr	r25
    5012:	90 25       	eor	r25, r0
    5014:	09 2e       	mov	r0, r25
    5016:	96 95       	lsr	r25
    5018:	90 25       	eor	r25, r0
    501a:	97 70       	andi	r25, 0x07	; 7
    501c:	02 2e       	mov	r0, r18
    501e:	23 2f       	mov	r18, r19
    5020:	96 95       	lsr	r25
    5022:	07 94       	ror	r0
    5024:	97 95       	ror	r25
    5026:	30 2d       	mov	r19, r0
    5028:	29 27       	eor	r18, r25
    502a:	06 94       	lsr	r0
    502c:	97 95       	ror	r25
    502e:	30 25       	eor	r19, r0
    5030:	29 27       	eor	r18, r25
    5032:	e4 17       	cp	r30, r20
    5034:	f5 07       	cpc	r31, r21
    5036:	29 f7       	brne	.-54     	; 0x5002 <_ZN16CMBEventsHandler13FillVarDataRqEjj+0x72>
    5038:	38 87       	std	Y+8, r19	; 0x08
    503a:	19 96       	adiw	r26, 0x09	; 9
    503c:	8c 91       	ld	r24, X
    503e:	19 97       	sbiw	r26, 0x09	; 9
    5040:	14 96       	adiw	r26, 0x04	; 4
    5042:	ed 91       	ld	r30, X+
    5044:	fc 91       	ld	r31, X
    5046:	15 97       	sbiw	r26, 0x05	; 5
    5048:	e8 0f       	add	r30, r24
    504a:	f1 1d       	adc	r31, r1
    504c:	20 83       	st	Z, r18
    504e:	89 e0       	ldi	r24, 0x09	; 9
    5050:	19 96       	adiw	r26, 0x09	; 9
    5052:	8c 93       	st	X, r24
    5054:	df 91       	pop	r29
    5056:	cf 91       	pop	r28
    5058:	08 95       	ret

0000505a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	ec 01       	movw	r28, r24
    5060:	ec 81       	ldd	r30, Y+4	; 0x04
    5062:	fd 81       	ldd	r31, Y+5	; 0x05
    5064:	8a ea       	ldi	r24, 0xAA	; 170
    5066:	80 83       	st	Z, r24
    5068:	ec 81       	ldd	r30, Y+4	; 0x04
    506a:	fd 81       	ldd	r31, Y+5	; 0x05
    506c:	8c ec       	ldi	r24, 0xCC	; 204
    506e:	81 83       	std	Z+1, r24	; 0x01
    5070:	ec 81       	ldd	r30, Y+4	; 0x04
    5072:	fd 81       	ldd	r31, Y+5	; 0x05
    5074:	84 e0       	ldi	r24, 0x04	; 4
    5076:	82 0f       	add	r24, r18
    5078:	82 83       	std	Z+2, r24	; 0x02
    507a:	ec 81       	ldd	r30, Y+4	; 0x04
    507c:	fd 81       	ldd	r31, Y+5	; 0x05
    507e:	80 e8       	ldi	r24, 0x80	; 128
    5080:	83 83       	std	Z+3, r24	; 0x03
    5082:	ec 81       	ldd	r30, Y+4	; 0x04
    5084:	fd 81       	ldd	r31, Y+5	; 0x05
    5086:	64 83       	std	Z+4, r22	; 0x04
    5088:	85 e0       	ldi	r24, 0x05	; 5
    508a:	82 0f       	add	r24, r18
    508c:	89 87       	std	Y+9, r24	; 0x09
    508e:	82 2f       	mov	r24, r18
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	81 f0       	breq	.+32     	; 0x50b6 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    5096:	da 01       	movw	r26, r20
    5098:	48 0f       	add	r20, r24
    509a:	59 1f       	adc	r21, r25
    509c:	65 e0       	ldi	r22, 0x05	; 5
    509e:	70 e0       	ldi	r23, 0x00	; 0
    50a0:	8d 91       	ld	r24, X+
    50a2:	ec 81       	ldd	r30, Y+4	; 0x04
    50a4:	fd 81       	ldd	r31, Y+5	; 0x05
    50a6:	e6 0f       	add	r30, r22
    50a8:	f7 1f       	adc	r31, r23
    50aa:	80 83       	st	Z, r24
    50ac:	6f 5f       	subi	r22, 0xFF	; 255
    50ae:	7f 4f       	sbci	r23, 0xFF	; 255
    50b0:	a4 17       	cp	r26, r20
    50b2:	b5 07       	cpc	r27, r21
    50b4:	a9 f7       	brne	.-22     	; 0x50a0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
    50b6:	a9 85       	ldd	r26, Y+9	; 0x09
    50b8:	b0 e0       	ldi	r27, 0x00	; 0
    50ba:	a4 30       	cpi	r26, 0x04	; 4
    50bc:	b1 05       	cpc	r27, r1
    50be:	28 f1       	brcs	.+74     	; 0x510a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb0>
    50c0:	ec 81       	ldd	r30, Y+4	; 0x04
    50c2:	fd 81       	ldd	r31, Y+5	; 0x05
    50c4:	33 96       	adiw	r30, 0x03	; 3
    50c6:	63 e0       	ldi	r22, 0x03	; 3
    50c8:	70 e0       	ldi	r23, 0x00	; 0
    50ca:	4f ef       	ldi	r20, 0xFF	; 255
    50cc:	5f ef       	ldi	r21, 0xFF	; 255
    50ce:	91 91       	ld	r25, Z+
    50d0:	49 27       	eor	r20, r25
    50d2:	94 2f       	mov	r25, r20
    50d4:	92 95       	swap	r25
    50d6:	94 27       	eor	r25, r20
    50d8:	09 2e       	mov	r0, r25
    50da:	96 95       	lsr	r25
    50dc:	96 95       	lsr	r25
    50de:	90 25       	eor	r25, r0
    50e0:	09 2e       	mov	r0, r25
    50e2:	96 95       	lsr	r25
    50e4:	90 25       	eor	r25, r0
    50e6:	97 70       	andi	r25, 0x07	; 7
    50e8:	04 2e       	mov	r0, r20
    50ea:	45 2f       	mov	r20, r21
    50ec:	96 95       	lsr	r25
    50ee:	07 94       	ror	r0
    50f0:	97 95       	ror	r25
    50f2:	50 2d       	mov	r21, r0
    50f4:	49 27       	eor	r20, r25
    50f6:	06 94       	lsr	r0
    50f8:	97 95       	ror	r25
    50fa:	50 25       	eor	r21, r0
    50fc:	49 27       	eor	r20, r25
    50fe:	6f 5f       	subi	r22, 0xFF	; 255
    5100:	7f 4f       	sbci	r23, 0xFF	; 255
    5102:	6a 17       	cp	r22, r26
    5104:	7b 07       	cpc	r23, r27
    5106:	18 f3       	brcs	.-58     	; 0x50ce <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x74>
    5108:	02 c0       	rjmp	.+4      	; 0x510e <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb4>
    510a:	4f ef       	ldi	r20, 0xFF	; 255
    510c:	5f ef       	ldi	r21, 0xFF	; 255
    510e:	8c 81       	ldd	r24, Y+4	; 0x04
    5110:	9d 81       	ldd	r25, Y+5	; 0x05
    5112:	a8 0f       	add	r26, r24
    5114:	b9 1f       	adc	r27, r25
    5116:	11 96       	adiw	r26, 0x01	; 1
    5118:	5c 93       	st	X, r21
    511a:	89 85       	ldd	r24, Y+9	; 0x09
    511c:	ec 81       	ldd	r30, Y+4	; 0x04
    511e:	fd 81       	ldd	r31, Y+5	; 0x05
    5120:	e8 0f       	add	r30, r24
    5122:	f1 1d       	adc	r31, r1
    5124:	40 83       	st	Z, r20
    5126:	29 5f       	subi	r18, 0xF9	; 249
    5128:	29 87       	std	Y+9, r18	; 0x09
    512a:	df 91       	pop	r29
    512c:	cf 91       	pop	r28
    512e:	08 95       	ret

00005130 <_ZN16CMBEventsHandlerD1Ev>:

CMBEventsHandler::~CMBEventsHandler()
    5130:	08 95       	ret

00005132 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    5132:	dc 01       	movw	r26, r24
    5134:	5b 96       	adiw	r26, 0x1b	; 27
    5136:	8d 91       	ld	r24, X+
    5138:	9c 91       	ld	r25, X
    513a:	5c 97       	sbiw	r26, 0x1c	; 28
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	39 f0       	breq	.+14     	; 0x514e <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    5140:	dc 01       	movw	r26, r24
    5142:	ed 91       	ld	r30, X+
    5144:	fc 91       	ld	r31, X
    5146:	02 80       	ldd	r0, Z+2	; 0x02
    5148:	f3 81       	ldd	r31, Z+3	; 0x03
    514a:	e0 2d       	mov	r30, r0
    514c:	19 95       	eicall
    514e:	08 95       	ret

00005150 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    5150:	dc 01       	movw	r26, r24
    5152:	5b 96       	adiw	r26, 0x1b	; 27
    5154:	8d 91       	ld	r24, X+
    5156:	9c 91       	ld	r25, X
    5158:	5c 97       	sbiw	r26, 0x1c	; 28
    515a:	00 97       	sbiw	r24, 0x00	; 0
    515c:	39 f0       	breq	.+14     	; 0x516c <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    515e:	dc 01       	movw	r26, r24
    5160:	ed 91       	ld	r30, X+
    5162:	fc 91       	ld	r31, X
    5164:	04 80       	ldd	r0, Z+4	; 0x04
    5166:	f5 81       	ldd	r31, Z+5	; 0x05
    5168:	e0 2d       	mov	r30, r0
    516a:	19 95       	eicall
    516c:	08 95       	ret

0000516e <_ZN9CMBSenderC1Ev>:
    516e:	2a ed       	ldi	r18, 0xDA	; 218
    5170:	31 e2       	ldi	r19, 0x21	; 33
    5172:	fc 01       	movw	r30, r24
    5174:	20 83       	st	Z, r18
    5176:	31 83       	std	Z+1, r19	; 0x01
    5178:	08 95       	ret

0000517a <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    517a:	6f 92       	push	r6
    517c:	7f 92       	push	r7
    517e:	8f 92       	push	r8
    5180:	9f 92       	push	r9
    5182:	af 92       	push	r10
    5184:	bf 92       	push	r11
    5186:	cf 92       	push	r12
    5188:	df 92       	push	r13
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	ec 01       	movw	r28, r24
    5198:	4b 01       	movw	r8, r22
    519a:	5a 01       	movw	r10, r20
    519c:	39 01       	movw	r6, r18
    519e:	c8 01       	movw	r24, r16
    51a0:	0f 83       	std	Y+7, r16	; 0x07
    51a2:	18 87       	std	Y+8, r17	; 0x08
    51a4:	ea 86       	std	Y+10, r14	; 0x0a
    51a6:	fb 86       	std	Y+11, r15	; 0x0b
    51a8:	0e 94 1e 34 	call	0x683c	; 0x683c <malloc>
    51ac:	8a 83       	std	Y+2, r24	; 0x02
    51ae:	9b 83       	std	Y+3, r25	; 0x03
    51b0:	c7 01       	movw	r24, r14
    51b2:	0e 94 1e 34 	call	0x683c	; 0x683c <malloc>
    51b6:	8c 83       	std	Y+4, r24	; 0x04
    51b8:	9d 83       	std	Y+5, r25	; 0x05
    51ba:	19 8e       	std	Y+25, r1	; 0x19
    51bc:	19 86       	std	Y+9, r1	; 0x09
    51be:	19 8a       	std	Y+17, r1	; 0x11
    51c0:	1e 82       	std	Y+6, r1	; 0x06
    51c2:	1c 8a       	std	Y+20, r1	; 0x14
    51c4:	1d 8a       	std	Y+21, r1	; 0x15
    51c6:	8f ef       	ldi	r24, 0xFF	; 255
    51c8:	9f ef       	ldi	r25, 0xFF	; 255
    51ca:	8e 8b       	std	Y+22, r24	; 0x16
    51cc:	9f 8b       	std	Y+23, r25	; 0x17
    51ce:	87 e0       	ldi	r24, 0x07	; 7
    51d0:	88 8b       	std	Y+16, r24	; 0x10
    51d2:	82 e0       	ldi	r24, 0x02	; 2
    51d4:	88 8f       	std	Y+24, r24	; 0x18
    51d6:	1a 8e       	std	Y+26, r1	; 0x1a
    51d8:	ca 8a       	std	Y+18, r12	; 0x12
    51da:	db 8a       	std	Y+19, r13	; 0x13
    51dc:	ac 86       	std	Y+12, r10	; 0x0c
    51de:	bd 86       	std	Y+13, r11	; 0x0d
    51e0:	d5 01       	movw	r26, r10
    51e2:	ed 91       	ld	r30, X+
    51e4:	fc 91       	ld	r31, X
    51e6:	04 84       	ldd	r0, Z+12	; 0x0c
    51e8:	f5 85       	ldd	r31, Z+13	; 0x0d
    51ea:	e0 2d       	mov	r30, r0
    51ec:	4f ef       	ldi	r20, 0xFF	; 255
    51ee:	59 e2       	ldi	r21, 0x29	; 41
    51f0:	be 01       	movw	r22, r28
    51f2:	c5 01       	movw	r24, r10
    51f4:	19 95       	eicall
    51f6:	d5 01       	movw	r26, r10
    51f8:	ed 91       	ld	r30, X+
    51fa:	fc 91       	ld	r31, X
    51fc:	06 84       	ldd	r0, Z+14	; 0x0e
    51fe:	f7 85       	ldd	r31, Z+15	; 0x0f
    5200:	e0 2d       	mov	r30, r0
    5202:	4b e8       	ldi	r20, 0x8B	; 139
    5204:	5a e2       	ldi	r21, 0x2A	; 42
    5206:	be 01       	movw	r22, r28
    5208:	c5 01       	movw	r24, r10
    520a:	19 95       	eicall
    520c:	61 14       	cp	r6, r1
    520e:	71 04       	cpc	r7, r1
    5210:	19 f0       	breq	.+6      	; 0x5218 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    5212:	6b 8e       	std	Y+27, r6	; 0x1b
    5214:	7c 8e       	std	Y+28, r7	; 0x1c
    5216:	02 c0       	rjmp	.+4      	; 0x521c <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xa2>
    5218:	cb 8f       	std	Y+27, r28	; 0x1b
    521a:	dc 8f       	std	Y+28, r29	; 0x1c
    521c:	8e 86       	std	Y+14, r8	; 0x0e
    521e:	9f 86       	std	Y+15, r9	; 0x0f
    5220:	81 14       	cp	r8, r1
    5222:	91 04       	cpc	r9, r1
    5224:	61 f0       	breq	.+24     	; 0x523e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc4>
    5226:	d4 01       	movw	r26, r8
    5228:	ed 91       	ld	r30, X+
    522a:	fc 91       	ld	r31, X
    522c:	02 88       	ldd	r0, Z+18	; 0x12
    522e:	f3 89       	ldd	r31, Z+19	; 0x13
    5230:	e0 2d       	mov	r30, r0
    5232:	21 e0       	ldi	r18, 0x01	; 1
    5234:	ae 01       	movw	r20, r28
    5236:	66 e2       	ldi	r22, 0x26	; 38
    5238:	7a e2       	ldi	r23, 0x2A	; 42
    523a:	c4 01       	movw	r24, r8
    523c:	19 95       	eicall
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	1f 91       	pop	r17
    5244:	0f 91       	pop	r16
    5246:	ff 90       	pop	r15
    5248:	ef 90       	pop	r14
    524a:	df 90       	pop	r13
    524c:	cf 90       	pop	r12
    524e:	bf 90       	pop	r11
    5250:	af 90       	pop	r10
    5252:	9f 90       	pop	r9
    5254:	8f 90       	pop	r8
    5256:	7f 90       	pop	r7
    5258:	6f 90       	pop	r6
    525a:	08 95       	ret

0000525c <_ZN9CMBSenderD1Ev>:
    525c:	2a ed       	ldi	r18, 0xDA	; 218
    525e:	31 e2       	ldi	r19, 0x21	; 33
    5260:	fc 01       	movw	r30, r24
    5262:	20 83       	st	Z, r18
    5264:	31 83       	std	Z+1, r19	; 0x01
    5266:	0e 94 98 28 	call	0x5130	; 0x5130 <_ZN16CMBEventsHandlerD1Ev>
    526a:	08 95       	ret

0000526c <_ZN9CMBSender13OnReceiveByteEh>:
    526c:	cf 93       	push	r28
    526e:	df 93       	push	r29
    5270:	dc 01       	movw	r26, r24
    5272:	96 2f       	mov	r25, r22
    5274:	50 96       	adiw	r26, 0x10	; 16
    5276:	4c 91       	ld	r20, X
    5278:	50 97       	sbiw	r26, 0x10	; 16
    527a:	50 e0       	ldi	r21, 0x00	; 0
    527c:	4b 30       	cpi	r20, 0x0B	; 11
    527e:	51 05       	cpc	r21, r1
    5280:	08 f0       	brcs	.+2      	; 0x5284 <_ZN9CMBSender13OnReceiveByteEh+0x18>
    5282:	ba c0       	rjmp	.+372    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    5284:	fa 01       	movw	r30, r20
    5286:	88 27       	eor	r24, r24
    5288:	e0 5c       	subi	r30, 0xC0	; 192
    528a:	fe 4f       	sbci	r31, 0xFE	; 254
    528c:	8f 4f       	sbci	r24, 0xFF	; 255
    528e:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <__tablejump2__>
    5292:	9a 3a       	cpi	r25, 0xAA	; 170
    5294:	21 f4       	brne	.+8      	; 0x529e <_ZN9CMBSender13OnReceiveByteEh+0x32>
    5296:	82 e0       	ldi	r24, 0x02	; 2
    5298:	50 96       	adiw	r26, 0x10	; 16
    529a:	8c 93       	st	X, r24
    529c:	ad c0       	rjmp	.+346    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	50 96       	adiw	r26, 0x10	; 16
    52a2:	8c 93       	st	X, r24
    52a4:	a9 c0       	rjmp	.+338    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52a6:	9c 3c       	cpi	r25, 0xCC	; 204
    52a8:	21 f4       	brne	.+8      	; 0x52b2 <_ZN9CMBSender13OnReceiveByteEh+0x46>
    52aa:	83 e0       	ldi	r24, 0x03	; 3
    52ac:	50 96       	adiw	r26, 0x10	; 16
    52ae:	8c 93       	st	X, r24
    52b0:	a3 c0       	rjmp	.+326    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	50 96       	adiw	r26, 0x10	; 16
    52b6:	8c 93       	st	X, r24
    52b8:	9f c0       	rjmp	.+318    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52ba:	16 96       	adiw	r26, 0x06	; 6
    52bc:	9c 93       	st	X, r25
    52be:	16 97       	sbiw	r26, 0x06	; 6
    52c0:	51 96       	adiw	r26, 0x11	; 17
    52c2:	1c 92       	st	X, r1
    52c4:	51 97       	sbiw	r26, 0x11	; 17
    52c6:	8f ef       	ldi	r24, 0xFF	; 255
    52c8:	9f ef       	ldi	r25, 0xFF	; 255
    52ca:	56 96       	adiw	r26, 0x16	; 22
    52cc:	8d 93       	st	X+, r24
    52ce:	9c 93       	st	X, r25
    52d0:	57 97       	sbiw	r26, 0x17	; 23
    52d2:	84 e0       	ldi	r24, 0x04	; 4
    52d4:	50 96       	adiw	r26, 0x10	; 16
    52d6:	8c 93       	st	X, r24
    52d8:	8f c0       	rjmp	.+286    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52da:	51 96       	adiw	r26, 0x11	; 17
    52dc:	8c 91       	ld	r24, X
    52de:	51 97       	sbiw	r26, 0x11	; 17
    52e0:	12 96       	adiw	r26, 0x02	; 2
    52e2:	ed 91       	ld	r30, X+
    52e4:	fc 91       	ld	r31, X
    52e6:	13 97       	sbiw	r26, 0x03	; 3
    52e8:	e8 0f       	add	r30, r24
    52ea:	f1 1d       	adc	r31, r1
    52ec:	90 83       	st	Z, r25
    52ee:	51 96       	adiw	r26, 0x11	; 17
    52f0:	2c 91       	ld	r18, X
    52f2:	51 97       	sbiw	r26, 0x11	; 17
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	17 96       	adiw	r26, 0x07	; 7
    52f8:	4d 91       	ld	r20, X+
    52fa:	5c 91       	ld	r21, X
    52fc:	18 97       	sbiw	r26, 0x08	; 8
    52fe:	42 17       	cp	r20, r18
    5300:	53 07       	cpc	r21, r19
    5302:	20 f4       	brcc	.+8      	; 0x530c <_ZN9CMBSender13OnReceiveByteEh+0xa0>
    5304:	89 e0       	ldi	r24, 0x09	; 9
    5306:	50 96       	adiw	r26, 0x10	; 16
    5308:	8c 93       	st	X, r24
    530a:	76 c0       	rjmp	.+236    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    530c:	56 96       	adiw	r26, 0x16	; 22
    530e:	2d 91       	ld	r18, X+
    5310:	3c 91       	ld	r19, X
    5312:	57 97       	sbiw	r26, 0x17	; 23
    5314:	29 27       	eor	r18, r25
    5316:	62 2f       	mov	r22, r18
    5318:	62 95       	swap	r22
    531a:	62 27       	eor	r22, r18
    531c:	06 2e       	mov	r0, r22
    531e:	66 95       	lsr	r22
    5320:	66 95       	lsr	r22
    5322:	60 25       	eor	r22, r0
    5324:	06 2e       	mov	r0, r22
    5326:	66 95       	lsr	r22
    5328:	60 25       	eor	r22, r0
    532a:	67 70       	andi	r22, 0x07	; 7
    532c:	02 2e       	mov	r0, r18
    532e:	23 2f       	mov	r18, r19
    5330:	66 95       	lsr	r22
    5332:	07 94       	ror	r0
    5334:	67 95       	ror	r22
    5336:	30 2d       	mov	r19, r0
    5338:	26 27       	eor	r18, r22
    533a:	06 94       	lsr	r0
    533c:	67 95       	ror	r22
    533e:	30 25       	eor	r19, r0
    5340:	26 27       	eor	r18, r22
    5342:	56 96       	adiw	r26, 0x16	; 22
    5344:	2d 93       	st	X+, r18
    5346:	3c 93       	st	X, r19
    5348:	57 97       	sbiw	r26, 0x17	; 23
    534a:	51 96       	adiw	r26, 0x11	; 17
    534c:	8c 91       	ld	r24, X
    534e:	51 97       	sbiw	r26, 0x11	; 17
    5350:	8f 5f       	subi	r24, 0xFF	; 255
    5352:	51 96       	adiw	r26, 0x11	; 17
    5354:	8c 93       	st	X, r24
    5356:	51 97       	sbiw	r26, 0x11	; 17
    5358:	51 96       	adiw	r26, 0x11	; 17
    535a:	2c 91       	ld	r18, X
    535c:	51 97       	sbiw	r26, 0x11	; 17
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	16 96       	adiw	r26, 0x06	; 6
    5362:	8c 91       	ld	r24, X
    5364:	16 97       	sbiw	r26, 0x06	; 6
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	02 97       	sbiw	r24, 0x02	; 2
    536a:	28 17       	cp	r18, r24
    536c:	39 07       	cpc	r19, r25
    536e:	09 f0       	breq	.+2      	; 0x5372 <_ZN9CMBSender13OnReceiveByteEh+0x106>
    5370:	43 c0       	rjmp	.+134    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    5372:	85 e0       	ldi	r24, 0x05	; 5
    5374:	50 96       	adiw	r26, 0x10	; 16
    5376:	8c 93       	st	X, r24
    5378:	3f c0       	rjmp	.+126    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    537a:	69 2f       	mov	r22, r25
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	54 96       	adiw	r26, 0x14	; 20
    5380:	6d 93       	st	X+, r22
    5382:	7c 93       	st	X, r23
    5384:	55 97       	sbiw	r26, 0x15	; 21
    5386:	86 e0       	ldi	r24, 0x06	; 6
    5388:	50 96       	adiw	r26, 0x10	; 16
    538a:	8c 93       	st	X, r24
    538c:	35 c0       	rjmp	.+106    	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    538e:	54 96       	adiw	r26, 0x14	; 20
    5390:	2d 91       	ld	r18, X+
    5392:	3c 91       	ld	r19, X
    5394:	55 97       	sbiw	r26, 0x15	; 21
    5396:	a9 01       	movw	r20, r18
    5398:	59 2b       	or	r21, r25
    539a:	54 96       	adiw	r26, 0x14	; 20
    539c:	4d 93       	st	X+, r20
    539e:	5c 93       	st	X, r21
    53a0:	55 97       	sbiw	r26, 0x15	; 21
    53a2:	56 96       	adiw	r26, 0x16	; 22
    53a4:	2d 91       	ld	r18, X+
    53a6:	3c 91       	ld	r19, X
    53a8:	57 97       	sbiw	r26, 0x17	; 23
    53aa:	42 17       	cp	r20, r18
    53ac:	53 07       	cpc	r21, r19
    53ae:	f1 f4       	brne	.+60     	; 0x53ec <_ZN9CMBSender13OnReceiveByteEh+0x180>
    53b0:	ed 01       	movw	r28, r26
    53b2:	88 e0       	ldi	r24, 0x08	; 8
    53b4:	88 8b       	std	Y+16, r24	; 0x10
    53b6:	e8 81       	ld	r30, Y
    53b8:	f9 81       	ldd	r31, Y+1	; 0x01
    53ba:	4e 81       	ldd	r20, Y+6	; 0x06
    53bc:	50 e0       	ldi	r21, 0x00	; 0
    53be:	6a 81       	ldd	r22, Y+2	; 0x02
    53c0:	7b 81       	ldd	r23, Y+3	; 0x03
    53c2:	01 90       	ld	r0, Z+
    53c4:	f0 81       	ld	r31, Z
    53c6:	e0 2d       	mov	r30, r0
    53c8:	cd 01       	movw	r24, r26
    53ca:	19 95       	eicall
    53cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53d0:	00 97       	sbiw	r24, 0x00	; 0
    53d2:	91 f0       	breq	.+36     	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    53d4:	dc 01       	movw	r26, r24
    53d6:	ed 91       	ld	r30, X+
    53d8:	fc 91       	ld	r31, X
    53da:	4e 81       	ldd	r20, Y+6	; 0x06
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	6a 81       	ldd	r22, Y+2	; 0x02
    53e0:	7b 81       	ldd	r23, Y+3	; 0x03
    53e2:	01 90       	ld	r0, Z+
    53e4:	f0 81       	ld	r31, Z
    53e6:	e0 2d       	mov	r30, r0
    53e8:	19 95       	eicall
    53ea:	06 c0       	rjmp	.+12     	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    53ec:	89 e0       	ldi	r24, 0x09	; 9
    53ee:	50 96       	adiw	r26, 0x10	; 16
    53f0:	8c 93       	st	X, r24
    53f2:	02 c0       	rjmp	.+4      	; 0x53f8 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    53f4:	5a 96       	adiw	r26, 0x1a	; 26
    53f6:	1c 92       	st	X, r1
    53f8:	df 91       	pop	r29
    53fa:	cf 91       	pop	r28
    53fc:	08 95       	ret

000053fe <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    53fe:	cf 93       	push	r28
    5400:	df 93       	push	r29
    5402:	ec 01       	movw	r28, r24
    5404:	8c 85       	ldd	r24, Y+12	; 0x0c
    5406:	9d 85       	ldd	r25, Y+13	; 0x0d
    5408:	dc 01       	movw	r26, r24
    540a:	ed 91       	ld	r30, X+
    540c:	fc 91       	ld	r31, X
    540e:	02 80       	ldd	r0, Z+2	; 0x02
    5410:	f3 81       	ldd	r31, Z+3	; 0x03
    5412:	e0 2d       	mov	r30, r0
    5414:	19 95       	eicall
    5416:	68 2f       	mov	r22, r24
    5418:	ce 01       	movw	r24, r28
    541a:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN9CMBSender13OnReceiveByteEh>
    541e:	df 91       	pop	r29
    5420:	cf 91       	pop	r28
    5422:	08 95       	ret

00005424 <_ZN9CMBSender9OnTimeoutEv>:
    5424:	cf 93       	push	r28
    5426:	df 93       	push	r29
    5428:	ec 01       	movw	r28, r24
    542a:	8e 85       	ldd	r24, Y+14	; 0x0e
    542c:	9f 85       	ldd	r25, Y+15	; 0x0f
    542e:	dc 01       	movw	r26, r24
    5430:	ed 91       	ld	r30, X+
    5432:	fc 91       	ld	r31, X
    5434:	04 80       	ldd	r0, Z+4	; 0x04
    5436:	f5 81       	ldd	r31, Z+5	; 0x05
    5438:	e0 2d       	mov	r30, r0
    543a:	19 95       	eicall
    543c:	88 89       	ldd	r24, Y+16	; 0x10
    543e:	88 30       	cpi	r24, 0x08	; 8
    5440:	11 f0       	breq	.+4      	; 0x5446 <_ZN9CMBSender9OnTimeoutEv+0x22>
    5442:	8a e0       	ldi	r24, 0x0A	; 10
    5444:	88 8b       	std	Y+16, r24	; 0x10
    5446:	df 91       	pop	r29
    5448:	cf 91       	pop	r28
    544a:	08 95       	ret

0000544c <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    544c:	0e 94 12 2a 	call	0x5424	; 0x5424 <_ZN9CMBSender9OnTimeoutEv>
    5450:	08 95       	ret

00005452 <_ZN9CMBSender19StartMODBUSListenerEv>:
    5452:	cf 93       	push	r28
    5454:	df 93       	push	r29
    5456:	fc 01       	movw	r30, r24
    5458:	11 8a       	std	Z+17, r1	; 0x11
    545a:	16 82       	std	Z+6, r1	; 0x06
    545c:	14 8a       	std	Z+20, r1	; 0x14
    545e:	15 8a       	std	Z+21, r1	; 0x15
    5460:	16 8a       	std	Z+22, r1	; 0x16
    5462:	17 8a       	std	Z+23, r1	; 0x17
    5464:	10 8a       	std	Z+16, r1	; 0x10
    5466:	86 85       	ldd	r24, Z+14	; 0x0e
    5468:	97 85       	ldd	r25, Z+15	; 0x0f
    546a:	ec 01       	movw	r28, r24
    546c:	a8 81       	ld	r26, Y
    546e:	b9 81       	ldd	r27, Y+1	; 0x01
    5470:	62 89       	ldd	r22, Z+18	; 0x12
    5472:	73 89       	ldd	r23, Z+19	; 0x13
    5474:	12 96       	adiw	r26, 0x02	; 2
    5476:	ed 91       	ld	r30, X+
    5478:	fc 91       	ld	r31, X
    547a:	13 97       	sbiw	r26, 0x03	; 3
    547c:	19 95       	eicall
    547e:	df 91       	pop	r29
    5480:	cf 91       	pop	r28
    5482:	08 95       	ret

00005484 <_ZN9CMBSender14OnTransmitByteEv>:
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	ec 01       	movw	r28, r24
    548a:	88 8d       	ldd	r24, Y+24	; 0x18
    548c:	84 30       	cpi	r24, 0x04	; 4
    548e:	38 f4       	brcc	.+14     	; 0x549e <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    5490:	82 30       	cpi	r24, 0x02	; 2
    5492:	b8 f5       	brcc	.+110    	; 0x5502 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    5494:	88 23       	and	r24, r24
    5496:	31 f0       	breq	.+12     	; 0x54a4 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    5498:	81 30       	cpi	r24, 0x01	; 1
    549a:	d1 f0       	breq	.+52     	; 0x54d0 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    549c:	39 c0       	rjmp	.+114    	; 0x5510 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    549e:	85 30       	cpi	r24, 0x05	; 5
    54a0:	81 f1       	breq	.+96     	; 0x5502 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    54a2:	36 c0       	rjmp	.+108    	; 0x5510 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	88 8f       	std	Y+24, r24	; 0x18
    54a8:	19 8e       	std	Y+25, r1	; 0x19
    54aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    54ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    54ae:	29 8d       	ldd	r18, Y+25	; 0x19
    54b0:	dc 01       	movw	r26, r24
    54b2:	ed 91       	ld	r30, X+
    54b4:	fc 91       	ld	r31, X
    54b6:	ac 81       	ldd	r26, Y+4	; 0x04
    54b8:	bd 81       	ldd	r27, Y+5	; 0x05
    54ba:	a2 0f       	add	r26, r18
    54bc:	b1 1d       	adc	r27, r1
    54be:	04 80       	ldd	r0, Z+4	; 0x04
    54c0:	f5 81       	ldd	r31, Z+5	; 0x05
    54c2:	e0 2d       	mov	r30, r0
    54c4:	6c 91       	ld	r22, X
    54c6:	19 95       	eicall
    54c8:	89 8d       	ldd	r24, Y+25	; 0x19
    54ca:	8f 5f       	subi	r24, 0xFF	; 255
    54cc:	89 8f       	std	Y+25, r24	; 0x19
    54ce:	20 c0       	rjmp	.+64     	; 0x5510 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    54d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    54d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    54d4:	29 8d       	ldd	r18, Y+25	; 0x19
    54d6:	dc 01       	movw	r26, r24
    54d8:	ed 91       	ld	r30, X+
    54da:	fc 91       	ld	r31, X
    54dc:	ac 81       	ldd	r26, Y+4	; 0x04
    54de:	bd 81       	ldd	r27, Y+5	; 0x05
    54e0:	a2 0f       	add	r26, r18
    54e2:	b1 1d       	adc	r27, r1
    54e4:	04 80       	ldd	r0, Z+4	; 0x04
    54e6:	f5 81       	ldd	r31, Z+5	; 0x05
    54e8:	e0 2d       	mov	r30, r0
    54ea:	6c 91       	ld	r22, X
    54ec:	19 95       	eicall
    54ee:	89 8d       	ldd	r24, Y+25	; 0x19
    54f0:	8f 5f       	subi	r24, 0xFF	; 255
    54f2:	89 8f       	std	Y+25, r24	; 0x19
    54f4:	99 8d       	ldd	r25, Y+25	; 0x19
    54f6:	89 85       	ldd	r24, Y+9	; 0x09
    54f8:	98 13       	cpse	r25, r24
    54fa:	0a c0       	rjmp	.+20     	; 0x5510 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    54fc:	83 e0       	ldi	r24, 0x03	; 3
    54fe:	88 8f       	std	Y+24, r24	; 0x18
    5500:	07 c0       	rjmp	.+14     	; 0x5510 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5502:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5504:	88 23       	and	r24, r24
    5506:	19 f0       	breq	.+6      	; 0x550e <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    5508:	ce 01       	movw	r24, r28
    550a:	0e 94 29 2a 	call	0x5452	; 0x5452 <_ZN9CMBSender19StartMODBUSListenerEv>
    550e:	1a 8e       	std	Y+26, r1	; 0x1a
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	08 95       	ret

00005516 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    5516:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender14OnTransmitByteEv>
    551a:	08 95       	ret

0000551c <_ZN9CMBSender18WaitMODBUSListenerEv>:
    551c:	fc 01       	movw	r30, r24
    551e:	06 c0       	rjmp	.+12     	; 0x552c <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    5520:	80 89       	ldd	r24, Z+16	; 0x10
    5522:	89 30       	cpi	r24, 0x09	; 9
    5524:	41 f0       	breq	.+16     	; 0x5536 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    5526:	80 89       	ldd	r24, Z+16	; 0x10
    5528:	8a 30       	cpi	r24, 0x0A	; 10
    552a:	39 f0       	breq	.+14     	; 0x553a <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    552c:	80 89       	ldd	r24, Z+16	; 0x10
    552e:	88 30       	cpi	r24, 0x08	; 8
    5530:	b9 f7       	brne	.-18     	; 0x5520 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	08 95       	ret
    5536:	82 e0       	ldi	r24, 0x02	; 2
    5538:	08 95       	ret
    553a:	83 e0       	ldi	r24, 0x03	; 3
    553c:	08 95       	ret

0000553e <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    553e:	cf 93       	push	r28
    5540:	df 93       	push	r29
    5542:	ec 01       	movw	r28, r24
    5544:	19 8e       	std	Y+25, r1	; 0x19
    5546:	18 8e       	std	Y+24, r1	; 0x18
    5548:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender14OnTransmitByteEv>
    554c:	8e 85       	ldd	r24, Y+14	; 0x0e
    554e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5550:	dc 01       	movw	r26, r24
    5552:	ed 91       	ld	r30, X+
    5554:	fc 91       	ld	r31, X
    5556:	6a 89       	ldd	r22, Y+18	; 0x12
    5558:	7b 89       	ldd	r23, Y+19	; 0x13
    555a:	02 80       	ldd	r0, Z+2	; 0x02
    555c:	f3 81       	ldd	r31, Z+3	; 0x03
    555e:	e0 2d       	mov	r30, r0
    5560:	19 95       	eicall
    5562:	df 91       	pop	r29
    5564:	cf 91       	pop	r28
    5566:	08 95       	ret

00005568 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    5568:	cf 93       	push	r28
    556a:	df 93       	push	r29
    556c:	ec 01       	movw	r28, r24
    556e:	e8 81       	ld	r30, Y
    5570:	f9 81       	ldd	r31, Y+1	; 0x01
    5572:	02 84       	ldd	r0, Z+10	; 0x0a
    5574:	f3 85       	ldd	r31, Z+11	; 0x0b
    5576:	e0 2d       	mov	r30, r0
    5578:	19 95       	eicall
    557a:	ce 01       	movw	r24, r28
    557c:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5580:	df 91       	pop	r29
    5582:	cf 91       	pop	r28
    5584:	08 95       	ret

00005586 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	ec 01       	movw	r28, r24
    558c:	e8 81       	ld	r30, Y
    558e:	f9 81       	ldd	r31, Y+1	; 0x01
    5590:	06 84       	ldd	r0, Z+14	; 0x0e
    5592:	f7 85       	ldd	r31, Z+15	; 0x0f
    5594:	e0 2d       	mov	r30, r0
    5596:	19 95       	eicall
    5598:	ce 01       	movw	r24, r28
    559a:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN9CMBSender22StartMODBUSTransmitterEv>
    559e:	df 91       	pop	r29
    55a0:	cf 91       	pop	r28
    55a2:	08 95       	ret

000055a4 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	ec 01       	movw	r28, r24
    55aa:	e8 81       	ld	r30, Y
    55ac:	f9 81       	ldd	r31, Y+1	; 0x01
    55ae:	04 84       	ldd	r0, Z+12	; 0x0c
    55b0:	f5 85       	ldd	r31, Z+13	; 0x0d
    55b2:	e0 2d       	mov	r30, r0
    55b4:	19 95       	eicall
    55b6:	ce 01       	movw	r24, r28
    55b8:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN9CMBSender22StartMODBUSTransmitterEv>
    55bc:	df 91       	pop	r29
    55be:	cf 91       	pop	r28
    55c0:	08 95       	ret

000055c2 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    55c2:	cf 93       	push	r28
    55c4:	df 93       	push	r29
    55c6:	ec 01       	movw	r28, r24
    55c8:	e8 81       	ld	r30, Y
    55ca:	f9 81       	ldd	r31, Y+1	; 0x01
    55cc:	50 e0       	ldi	r21, 0x00	; 0
    55ce:	00 88       	ldd	r0, Z+16	; 0x10
    55d0:	f1 89       	ldd	r31, Z+17	; 0x11
    55d2:	e0 2d       	mov	r30, r0
    55d4:	19 95       	eicall
    55d6:	ce 01       	movw	r24, r28
    55d8:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN9CMBSender22StartMODBUSTransmitterEv>
    55dc:	df 91       	pop	r29
    55de:	cf 91       	pop	r28
    55e0:	08 95       	ret

000055e2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    55e2:	fc 01       	movw	r30, r24
    55e4:	06 c0       	rjmp	.+12     	; 0x55f2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    55e6:	80 8d       	ldd	r24, Z+24	; 0x18
    55e8:	84 30       	cpi	r24, 0x04	; 4
    55ea:	41 f0       	breq	.+16     	; 0x55fc <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    55ec:	80 8d       	ldd	r24, Z+24	; 0x18
    55ee:	85 30       	cpi	r24, 0x05	; 5
    55f0:	39 f0       	breq	.+14     	; 0x5600 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    55f2:	80 8d       	ldd	r24, Z+24	; 0x18
    55f4:	83 30       	cpi	r24, 0x03	; 3
    55f6:	b9 f7       	brne	.-18     	; 0x55e6 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	08 95       	ret
    55fc:	82 e0       	ldi	r24, 0x02	; 2
    55fe:	08 95       	ret
    5600:	83 e0       	ldi	r24, 0x03	; 3
    5602:	08 95       	ret

00005604 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    5604:	21 e0       	ldi	r18, 0x01	; 1
    5606:	fc 01       	movw	r30, r24
    5608:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    560a:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    560e:	08 95       	ret

00005610 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    5610:	21 e0       	ldi	r18, 0x01	; 1
    5612:	fc 01       	movw	r30, r24
    5614:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    5616:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    561a:	08 95       	ret

0000561c <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    561c:	0f 93       	push	r16
    561e:	1f 93       	push	r17
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	8c 01       	movw	r16, r24
    5626:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    5628:	98 81       	ld	r25, Y
    562a:	91 38       	cpi	r25, 0x81	; 129
    562c:	69 f4       	brne	.+26     	; 0x5648 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    562e:	d8 01       	movw	r26, r16
    5630:	ed 91       	ld	r30, X+
    5632:	fc 91       	ld	r31, X
    5634:	04 80       	ldd	r0, Z+4	; 0x04
    5636:	f5 81       	ldd	r31, Z+5	; 0x05
    5638:	e0 2d       	mov	r30, r0
    563a:	2a 81       	ldd	r18, Y+2	; 0x02
    563c:	ab 01       	movw	r20, r22
    563e:	4d 5f       	subi	r20, 0xFD	; 253
    5640:	5f 4f       	sbci	r21, 0xFF	; 255
    5642:	69 81       	ldd	r22, Y+1	; 0x01
    5644:	c8 01       	movw	r24, r16
    5646:	19 95       	eicall
	}
	if (data[0] == 0x83)
    5648:	98 81       	ld	r25, Y
    564a:	93 38       	cpi	r25, 0x83	; 131
    564c:	99 f4       	brne	.+38     	; 0x5674 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    564e:	d8 01       	movw	r26, r16
    5650:	ed 91       	ld	r30, X+
    5652:	fc 91       	ld	r31, X
    5654:	2b 81       	ldd	r18, Y+3	; 0x03
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	ae 01       	movw	r20, r28
    565a:	4c 5f       	subi	r20, 0xFC	; 252
    565c:	5f 4f       	sbci	r21, 0xFF	; 255
    565e:	69 81       	ldd	r22, Y+1	; 0x01
    5660:	70 e0       	ldi	r23, 0x00	; 0
    5662:	76 2f       	mov	r23, r22
    5664:	66 27       	eor	r22, r22
    5666:	8a 81       	ldd	r24, Y+2	; 0x02
    5668:	68 2b       	or	r22, r24
    566a:	02 80       	ldd	r0, Z+2	; 0x02
    566c:	f3 81       	ldd	r31, Z+3	; 0x03
    566e:	e0 2d       	mov	r30, r0
    5670:	c8 01       	movw	r24, r16
    5672:	19 95       	eicall
	}
}
    5674:	df 91       	pop	r29
    5676:	cf 91       	pop	r28
    5678:	1f 91       	pop	r17
    567a:	0f 91       	pop	r16
    567c:	08 95       	ret

0000567e <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    567e:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZN9CMBSender18ProcessTransactionEPhj>
    5682:	08 95       	ret

00005684 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    5684:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    5686:	e0 e6       	ldi	r30, 0x60	; 96
    5688:	f6 e0       	ldi	r31, 0x06	; 6
    568a:	88 e0       	ldi	r24, 0x08	; 8
    568c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    568e:	84 e0       	ldi	r24, 0x04	; 4
    5690:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    5692:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    5694:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    5696:	e0 ea       	ldi	r30, 0xA0	; 160
    5698:	f9 e0       	ldi	r31, 0x09	; 9
    569a:	84 e1       	ldi	r24, 0x14	; 20
    569c:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    569e:	88 e1       	ldi	r24, 0x18	; 24
    56a0:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    56a2:	84 81       	ldd	r24, Z+4	; 0x04
    56a4:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    56a6:	41 30       	cpi	r20, 0x01	; 1
    56a8:	19 f0       	breq	.+6      	; 0x56b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    56aa:	42 30       	cpi	r20, 0x02	; 2
    56ac:	19 f0       	breq	.+6      	; 0x56b4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    56ae:	04 c0       	rjmp	.+8      	; 0x56b8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    56b0:	80 e2       	ldi	r24, 0x20	; 32
    56b2:	03 c0       	rjmp	.+6      	; 0x56ba <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    56b4:	80 e3       	ldi	r24, 0x30	; 48
		break;
    56b6:	01 c0       	rjmp	.+2      	; 0x56ba <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    56b8:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    56ba:	22 23       	and	r18, r18
    56bc:	19 f0       	breq	.+6      	; 0x56c4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    56be:	21 30       	cpi	r18, 0x01	; 1
    56c0:	19 f0       	breq	.+6      	; 0x56c8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    56c2:	03 c0       	rjmp	.+6      	; 0x56ca <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    56c4:	87 7f       	andi	r24, 0xF7	; 247
		break;
    56c6:	01 c0       	rjmp	.+2      	; 0x56ca <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    56c8:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    56ca:	01 11       	cpse	r16, r1
    56cc:	02 c0       	rjmp	.+4      	; 0x56d2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    56ce:	93 e4       	ldi	r25, 0x43	; 67
    56d0:	01 c0       	rjmp	.+2      	; 0x56d4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    56d2:	93 e0       	ldi	r25, 0x03	; 3
    56d4:	89 2b       	or	r24, r25
    56d6:	e0 ea       	ldi	r30, 0xA0	; 160
    56d8:	f9 e0       	ldi	r31, 0x09	; 9
    56da:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    56dc:	70 e0       	ldi	r23, 0x00	; 0
    56de:	db 01       	movw	r26, r22
    56e0:	aa 5b       	subi	r26, 0xBA	; 186
    56e2:	be 4d       	sbci	r27, 0xDE	; 222
    56e4:	8c 91       	ld	r24, X
    56e6:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    56e8:	db 01       	movw	r26, r22
    56ea:	aa 5d       	subi	r26, 0xDA	; 218
    56ec:	be 4d       	sbci	r27, 0xDE	; 222
    56ee:	8c 91       	ld	r24, X
    56f0:	82 95       	swap	r24
    56f2:	80 7f       	andi	r24, 0xF0	; 240
    56f4:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    56f6:	0f 91       	pop	r16
    56f8:	08 95       	ret

000056fa <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    56fa:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
    56fe:	08 95       	ret

00005700 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    5700:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5704:	08 95       	ret

00005706 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    5706:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    570a:	86 fb       	bst	r24, 6
    570c:	88 27       	eor	r24, r24
    570e:	80 f9       	bld	r24, 0
}
    5710:	91 e0       	ldi	r25, 0x01	; 1
    5712:	89 27       	eor	r24, r25
    5714:	08 95       	ret

00005716 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    5716:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    571a:	80 95       	com	r24
}
    571c:	88 1f       	adc	r24, r24
    571e:	88 27       	eor	r24, r24
    5720:	88 1f       	adc	r24, r24
    5722:	08 95       	ret

00005724 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    5724:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    5728:	85 fb       	bst	r24, 5
    572a:	88 27       	eor	r24, r24
    572c:	80 f9       	bld	r24, 0
}
    572e:	91 e0       	ldi	r25, 0x01	; 1
    5730:	89 27       	eor	r24, r25
    5732:	08 95       	ret

00005734 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    5734:	60 93 58 24 	sts	0x2458, r22	; 0x802458 <InterruptSenderTable+0xb0>
    5738:	70 93 59 24 	sts	0x2459, r23	; 0x802459 <InterruptSenderTable+0xb1>
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    573c:	40 93 62 23 	sts	0x2362, r20	; 0x802362 <InterruptFuncTable+0xb0>
    5740:	50 93 63 23 	sts	0x2363, r21	; 0x802363 <InterruptFuncTable+0xb1>
    5744:	08 95       	ret

00005746 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    5746:	60 93 5c 24 	sts	0x245C, r22	; 0x80245c <InterruptSenderTable+0xb4>
    574a:	70 93 5d 24 	sts	0x245D, r23	; 0x80245d <InterruptSenderTable+0xb5>
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    574e:	40 93 66 23 	sts	0x2366, r20	; 0x802366 <InterruptFuncTable+0xb4>
    5752:	50 93 67 23 	sts	0x2367, r21	; 0x802367 <InterruptFuncTable+0xb5>
    5756:	08 95       	ret

00005758 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    5758:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    575a:	8b e6       	ldi	r24, 0x6B	; 107
    575c:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    575e:	80 ea       	ldi	r24, 0xA0	; 160
    5760:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    5762:	89 e0       	ldi	r24, 0x09	; 9
    5764:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    5766:	12 86       	std	Z+10, r1	; 0x0a
    5768:	08 95       	ret

0000576a <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    576a:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    576c:	8c e6       	ldi	r24, 0x6C	; 108
    576e:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    5770:	80 ea       	ldi	r24, 0xA0	; 160
    5772:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    5774:	89 e0       	ldi	r24, 0x09	; 9
    5776:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    5778:	16 86       	std	Z+14, r1	; 0x0e
    577a:	08 95       	ret

0000577c <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	ec 01       	movw	r28, r24
    5782:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN6CUSARTC1Ev>
    5786:	80 ef       	ldi	r24, 0xF0	; 240
    5788:	91 e2       	ldi	r25, 0x21	; 33
    578a:	88 83       	st	Y, r24
    578c:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    578e:	df 91       	pop	r29
    5790:	cf 91       	pop	r28
    5792:	08 95       	ret

00005794 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    5794:	20 ef       	ldi	r18, 0xF0	; 240
    5796:	31 e2       	ldi	r19, 0x21	; 33
    5798:	fc 01       	movw	r30, r24
    579a:	20 83       	st	Z, r18
    579c:	31 83       	std	Z+1, r19	; 0x01
    579e:	0e 94 45 11 	call	0x228a	; 0x228a <_ZN6CUSARTD1Ev>
    57a2:	08 95       	ret

000057a4 <_Z18onewire_crc_updatehh>:

#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
    57a4:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t p = 8; p; p--) {
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
    57a6:	3c e8       	ldi	r19, 0x8C	; 140
    57a8:	26 2f       	mov	r18, r22
    57aa:	28 27       	eor	r18, r24
    57ac:	20 ff       	sbrs	r18, 0
    57ae:	03 c0       	rjmp	.+6      	; 0x57b6 <_Z18onewire_crc_updatehh+0x12>
    57b0:	86 95       	lsr	r24
    57b2:	83 27       	eor	r24, r19
    57b4:	01 c0       	rjmp	.+2      	; 0x57b8 <_Z18onewire_crc_updatehh+0x14>
    57b6:	86 95       	lsr	r24
		b >>= 1;
    57b8:	66 95       	lsr	r22
    57ba:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
	for (uint8_t p = 8; p; p--) {
    57bc:	a9 f7       	brne	.-22     	; 0x57a8 <_Z18onewire_crc_updatehh+0x4>
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
		b >>= 1;
	}
	return crc;
}
    57be:	08 95       	ret

000057c0 <_ZN8CDS18B20C1Ev>:

// default constructor
CDS18B20::CDS18B20()
    57c0:	08 95       	ret

000057c2 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    57c2:	08 95       	ret

000057c4 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    57c4:	e0 e6       	ldi	r30, 0x60	; 96
    57c6:	f6 e0       	ldi	r31, 0x06	; 6
    57c8:	80 e8       	ldi	r24, 0x80	; 128
    57ca:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    57cc:	a7 e2       	ldi	r26, 0x27	; 39
    57ce:	bf e0       	ldi	r27, 0x0F	; 15
    57d0:	11 97       	sbiw	r26, 0x01	; 1
    57d2:	f1 f7       	brne	.-4      	; 0x57d0 <_ZN8CDS18B207w1_findEv+0xc>
    57d4:	00 c0       	rjmp	.+0      	; 0x57d6 <_ZN8CDS18B207w1_findEv+0x12>
    57d6:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    57d8:	82 83       	std	Z+2, r24	; 0x02
    57da:	87 e0       	ldi	r24, 0x07	; 7
    57dc:	92 e0       	ldi	r25, 0x02	; 2
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	f1 f7       	brne	.-4      	; 0x57de <_ZN8CDS18B207w1_findEv+0x1a>
    57e2:	00 c0       	rjmp	.+0      	; 0x57e4 <_ZN8CDS18B207w1_findEv+0x20>
    57e4:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    57e6:	80 85       	ldd	r24, Z+8	; 0x08
    57e8:	af e1       	ldi	r26, 0x1F	; 31
    57ea:	bd e0       	ldi	r27, 0x0D	; 13
    57ec:	11 97       	sbiw	r26, 0x01	; 1
    57ee:	f1 f7       	brne	.-4      	; 0x57ec <_ZN8CDS18B207w1_findEv+0x28>
    57f0:	00 c0       	rjmp	.+0      	; 0x57f2 <_ZN8CDS18B207w1_findEv+0x2e>
    57f2:	00 00       	nop
    57f4:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    57f6:	88 1f       	adc	r24, r24
    57f8:	88 27       	eor	r24, r24
    57fa:	88 1f       	adc	r24, r24
    57fc:	08 95       	ret

000057fe <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    57fe:	cf 93       	push	r28
    5800:	df 93       	push	r29
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    5806:	c1 e0       	ldi	r28, 0x01	; 1
    5808:	d0 e0       	ldi	r29, 0x00	; 0
    580a:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    580c:	e0 e6       	ldi	r30, 0x60	; 96
    580e:	f6 e0       	ldi	r31, 0x06	; 6
    5810:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    5812:	9e 01       	movw	r18, r28
    5814:	08 2e       	mov	r0, r24
    5816:	02 c0       	rjmp	.+4      	; 0x581c <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    5818:	22 0f       	add	r18, r18
    581a:	33 1f       	adc	r19, r19
    581c:	0a 94       	dec	r0
    581e:	e2 f7       	brpl	.-8      	; 0x5818 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    5820:	d9 01       	movw	r26, r18
    5822:	a6 23       	and	r26, r22
    5824:	b7 23       	and	r27, r23
    5826:	2a 17       	cp	r18, r26
    5828:	3b 07       	cpc	r19, r27
    582a:	69 f4       	brne	.+26     	; 0x5846 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    582c:	41 83       	std	Z+1, r20	; 0x01
    582e:	25 e1       	ldi	r18, 0x15	; 21
    5830:	2a 95       	dec	r18
    5832:	f1 f7       	brne	.-4      	; 0x5830 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    5834:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    5836:	42 83       	std	Z+2, r20	; 0x02
    5838:	a7 e0       	ldi	r26, 0x07	; 7
    583a:	b2 e0       	ldi	r27, 0x02	; 2
    583c:	11 97       	sbiw	r26, 0x01	; 1
    583e:	f1 f7       	brne	.-4      	; 0x583c <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    5840:	00 c0       	rjmp	.+0      	; 0x5842 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    5842:	00 00       	nop
    5844:	0c c0       	rjmp	.+24     	; 0x585e <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    5846:	41 83       	std	Z+1, r20	; 0x01
    5848:	a7 e0       	ldi	r26, 0x07	; 7
    584a:	b2 e0       	ldi	r27, 0x02	; 2
    584c:	11 97       	sbiw	r26, 0x01	; 1
    584e:	f1 f7       	brne	.-4      	; 0x584c <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    5850:	00 c0       	rjmp	.+0      	; 0x5852 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    5852:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    5854:	42 83       	std	Z+2, r20	; 0x02
    5856:	b5 e3       	ldi	r27, 0x35	; 53
    5858:	ba 95       	dec	r27
    585a:	f1 f7       	brne	.-4      	; 0x5858 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    585c:	00 00       	nop
    585e:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    5860:	88 30       	cpi	r24, 0x08	; 8
    5862:	91 05       	cpc	r25, r1
    5864:	b1 f6       	brne	.-84     	; 0x5812 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    5866:	df 91       	pop	r29
    5868:	cf 91       	pop	r28
    586a:	08 95       	ret

0000586c <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    5870:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    5872:	e0 e6       	ldi	r30, 0x60	; 96
    5874:	f6 e0       	ldi	r31, 0x06	; 6
    5876:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    5878:	61 e0       	ldi	r22, 0x01	; 1
    587a:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    587c:	91 83       	std	Z+1, r25	; 0x01
    587e:	45 e1       	ldi	r20, 0x15	; 21
    5880:	4a 95       	dec	r20
    5882:	f1 f7       	brne	.-4      	; 0x5880 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    5884:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    5886:	92 83       	std	Z+2, r25	; 0x02
    5888:	aa e6       	ldi	r26, 0x6A	; 106
    588a:	aa 95       	dec	r26
    588c:	f1 f7       	brne	.-4      	; 0x588a <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    588e:	00 c0       	rjmp	.+0      	; 0x5890 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    5890:	40 85       	ldd	r20, Z+8	; 0x08
    5892:	44 23       	and	r20, r20
    5894:	54 f0       	brlt	.+20     	; 0x58aa <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    5896:	ab 01       	movw	r20, r22
    5898:	02 2e       	mov	r0, r18
    589a:	02 c0       	rjmp	.+4      	; 0x58a0 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    589c:	44 0f       	add	r20, r20
    589e:	55 1f       	adc	r21, r21
    58a0:	0a 94       	dec	r0
    58a2:	e2 f7       	brpl	.-8      	; 0x589c <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    58a4:	40 95       	com	r20
    58a6:	84 23       	and	r24, r20
    58a8:	08 c0       	rjmp	.+16     	; 0x58ba <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    58aa:	ab 01       	movw	r20, r22
    58ac:	02 2e       	mov	r0, r18
    58ae:	02 c0       	rjmp	.+4      	; 0x58b4 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    58b0:	44 0f       	add	r20, r20
    58b2:	55 1f       	adc	r21, r21
    58b4:	0a 94       	dec	r0
    58b6:	e2 f7       	brpl	.-8      	; 0x58b0 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    58b8:	84 2b       	or	r24, r20
    58ba:	af e8       	ldi	r26, 0x8F	; 143
    58bc:	b1 e0       	ldi	r27, 0x01	; 1
    58be:	11 97       	sbiw	r26, 0x01	; 1
    58c0:	f1 f7       	brne	.-4      	; 0x58be <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    58c2:	00 c0       	rjmp	.+0      	; 0x58c4 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    58c4:	00 00       	nop
    58c6:	2f 5f       	subi	r18, 0xFF	; 255
    58c8:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    58ca:	28 30       	cpi	r18, 0x08	; 8
    58cc:	31 05       	cpc	r19, r1
    58ce:	b1 f6       	brne	.-84     	; 0x587c <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    58d0:	08 95       	ret

000058d2 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    58d2:	af 92       	push	r10
    58d4:	bf 92       	push	r11
    58d6:	df 92       	push	r13
    58d8:	ef 92       	push	r14
    58da:	ff 92       	push	r15
    58dc:	0f 93       	push	r16
    58de:	1f 93       	push	r17
    58e0:	cf 93       	push	r28
    58e2:	df 93       	push	r29
    58e4:	cd b7       	in	r28, 0x3d	; 61
    58e6:	de b7       	in	r29, 0x3e	; 62
    58e8:	29 97       	sbiw	r28, 0x09	; 9
    58ea:	cd bf       	out	0x3d, r28	; 61
    58ec:	de bf       	out	0x3e, r29	; 62
    58ee:	8c 01       	movw	r16, r24
	unsigned char data[9];
	int temp = 0;
	
	if (req)
    58f0:	fc 01       	movw	r30, r24
    58f2:	82 81       	ldd	r24, Z+2	; 0x02
    58f4:	88 23       	and	r24, r24
    58f6:	a1 f0       	breq	.+40     	; 0x5920 <_ZN8CDS18B2010temp_18b20Ev+0x4e>
	{
		if(w1_find())
    58f8:	c8 01       	movw	r24, r16
    58fa:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN8CDS18B207w1_findEv>
    58fe:	88 23       	and	r24, r24
    5900:	61 f0       	breq	.+24     	; 0x591a <_ZN8CDS18B2010temp_18b20Ev+0x48>
		{
			w1_sendcmd(0xcc);	//skip ROM
    5902:	6c ec       	ldi	r22, 0xCC	; 204
    5904:	c8 01       	movw	r24, r16
    5906:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    590a:	64 e4       	ldi	r22, 0x44	; 68
    590c:	c8 01       	movw	r24, r16
    590e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	f8 01       	movw	r30, r16
    5916:	83 83       	std	Z+3, r24	; 0x03
    5918:	3f c0       	rjmp	.+126    	; 0x5998 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		}
		else
			find = false;
    591a:	f8 01       	movw	r30, r16
    591c:	13 82       	std	Z+3, r1	; 0x03
    591e:	3c c0       	rjmp	.+120    	; 0x5998 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
	}
	else
	{
		if (find)
    5920:	f8 01       	movw	r30, r16
    5922:	83 81       	ldd	r24, Z+3	; 0x03
    5924:	88 23       	and	r24, r24
    5926:	c1 f1       	breq	.+112    	; 0x5998 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		{
			w1_find();
    5928:	c8 01       	movw	r24, r16
    592a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    592e:	6c ec       	ldi	r22, 0xCC	; 204
    5930:	c8 01       	movw	r24, r16
    5932:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    5936:	6e eb       	ldi	r22, 0xBE	; 190
    5938:	c8 01       	movw	r24, r16
    593a:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZN8CDS18B2010w1_sendcmdEh>
    593e:	ce 01       	movw	r24, r28
    5940:	01 96       	adiw	r24, 0x01	; 1
    5942:	7c 01       	movw	r14, r24
    5944:	5e 01       	movw	r10, r28
    5946:	9a e0       	ldi	r25, 0x0A	; 10
    5948:	a9 0e       	add	r10, r25
    594a:	b1 1c       	adc	r11, r1
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
    594c:	d1 2c       	mov	r13, r1
			for (int i = 0; i < 9; i++)
			{
				data[i] = w1_receive_byte();
    594e:	c8 01       	movw	r24, r16
    5950:	0e 94 36 2c 	call	0x586c	; 0x586c <_ZN8CDS18B2015w1_receive_byteEv>
    5954:	68 2f       	mov	r22, r24
    5956:	f7 01       	movw	r30, r14
    5958:	81 93       	st	Z+, r24
    595a:	7f 01       	movw	r14, r30
				crc = onewire_crc_update(crc, data[i]);
    595c:	8d 2d       	mov	r24, r13
    595e:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <_Z18onewire_crc_updatehh>
    5962:	d8 2e       	mov	r13, r24
			w1_sendcmd(0xcc);
			w1_sendcmd(0xbe);	//read temperature
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
			for (int i = 0; i < 9; i++)
    5964:	ea 14       	cp	r14, r10
    5966:	fb 04       	cpc	r15, r11
    5968:	91 f7       	brne	.-28     	; 0x594e <_ZN8CDS18B2010temp_18b20Ev+0x7c>
			{
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
    596a:	8a 81       	ldd	r24, Y+2	; 0x02
			temp = temp<<8;
			temp |= data[0];
    596c:	69 81       	ldd	r22, Y+1	; 0x01
			
			temp *= 0.625;
			
			if (crc == 0)
    596e:	d1 10       	cpse	r13, r1
    5970:	13 c0       	rjmp	.+38     	; 0x5998 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
			temp = temp<<8;
    5972:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    5974:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    5976:	07 2e       	mov	r0, r23
    5978:	00 0c       	add	r0, r0
    597a:	88 0b       	sbc	r24, r24
    597c:	99 0b       	sbc	r25, r25
    597e:	0e 94 8a 32 	call	0x6514	; 0x6514 <__floatsisf>
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	40 e2       	ldi	r20, 0x20	; 32
    5988:	5f e3       	ldi	r21, 0x3F	; 63
    598a:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__mulsf3>
    598e:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__fixsfsi>
    5992:	f8 01       	movw	r30, r16
    5994:	60 83       	st	Z, r22
    5996:	71 83       	std	Z+1, r23	; 0x01
			if (crc == 0)
				temperature = temp;
		}
	}
	
	req = !req;
    5998:	f8 01       	movw	r30, r16
    599a:	92 81       	ldd	r25, Z+2	; 0x02
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	89 27       	eor	r24, r25
    59a0:	82 83       	std	Z+2, r24	; 0x02
	
	return temperature;
}
    59a2:	80 81       	ld	r24, Z
    59a4:	91 81       	ldd	r25, Z+1	; 0x01
    59a6:	29 96       	adiw	r28, 0x09	; 9
    59a8:	cd bf       	out	0x3d, r28	; 61
    59aa:	de bf       	out	0x3e, r29	; 62
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	1f 91       	pop	r17
    59b2:	0f 91       	pop	r16
    59b4:	ff 90       	pop	r15
    59b6:	ef 90       	pop	r14
    59b8:	df 90       	pop	r13
    59ba:	bf 90       	pop	r11
    59bc:	af 90       	pop	r10
    59be:	08 95       	ret

000059c0 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    59c0:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    59c2:	a0 e6       	ldi	r26, 0x60	; 96
    59c4:	b6 e0       	ldi	r27, 0x06	; 6
    59c6:	80 e8       	ldi	r24, 0x80	; 128
    59c8:	16 96       	adiw	r26, 0x06	; 6
    59ca:	8c 93       	st	X, r24
    59cc:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    59ce:	57 96       	adiw	r26, 0x17	; 23
    59d0:	1c 92       	st	X, r1
	
	temperature = 0;
    59d2:	10 82       	st	Z, r1
    59d4:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    59d6:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    59d8:	81 e0       	ldi	r24, 0x01	; 1
    59da:	82 83       	std	Z+2, r24	; 0x02
    59dc:	08 95       	ret

000059de <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    59de:	08 95       	ret

000059e0 <_ZN11CLaserBoardD1Ev>:
    59e0:	08 95       	ret

000059e2 <_ZN11CLaserBoard12InitializeIOEv>:
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	ec 01       	movw	r28, r24
    59e8:	e0 e4       	ldi	r30, 0x40	; 64
    59ea:	f6 e0       	ldi	r31, 0x06	; 6
    59ec:	11 82       	std	Z+1, r1	; 0x01
    59ee:	98 ea       	ldi	r25, 0xA8	; 168
    59f0:	90 8b       	std	Z+16, r25	; 0x10
    59f2:	91 8b       	std	Z+17, r25	; 0x11
    59f4:	92 8b       	std	Z+18, r25	; 0x12
    59f6:	93 8b       	std	Z+19, r25	; 0x13
    59f8:	94 8b       	std	Z+20, r25	; 0x14
    59fa:	95 8b       	std	Z+21, r25	; 0x15
    59fc:	96 8b       	std	Z+22, r25	; 0x16
    59fe:	97 8b       	std	Z+23, r25	; 0x17
    5a00:	8f ef       	ldi	r24, 0xFF	; 255
    5a02:	84 83       	std	Z+4, r24	; 0x04
    5a04:	a0 e8       	ldi	r26, 0x80	; 128
    5a06:	b6 e0       	ldi	r27, 0x06	; 6
    5a08:	98 e0       	ldi	r25, 0x08	; 8
    5a0a:	11 96       	adiw	r26, 0x01	; 1
    5a0c:	9c 93       	st	X, r25
    5a0e:	11 97       	sbiw	r26, 0x01	; 1
    5a10:	53 96       	adiw	r26, 0x13	; 19
    5a12:	1c 92       	st	X, r1
    5a14:	53 97       	sbiw	r26, 0x13	; 19
    5a16:	14 96       	adiw	r26, 0x04	; 4
    5a18:	1c 92       	st	X, r1
    5a1a:	14 97       	sbiw	r26, 0x04	; 4
    5a1c:	e0 ea       	ldi	r30, 0xA0	; 160
    5a1e:	f6 e0       	ldi	r31, 0x06	; 6
    5a20:	90 ec       	ldi	r25, 0xC0	; 192
    5a22:	90 8b       	std	Z+16, r25	; 0x10
    5a24:	20 e8       	ldi	r18, 0x80	; 128
    5a26:	21 8b       	std	Z+17, r18	; 0x11
    5a28:	22 8b       	std	Z+18, r18	; 0x12
    5a2a:	23 8b       	std	Z+19, r18	; 0x13
    5a2c:	94 8b       	std	Z+20, r25	; 0x14
    5a2e:	95 8b       	std	Z+21, r25	; 0x15
    5a30:	96 8b       	std	Z+22, r25	; 0x16
    5a32:	97 8b       	std	Z+23, r25	; 0x17
    5a34:	14 82       	std	Z+4, r1	; 0x04
    5a36:	81 83       	std	Z+1, r24	; 0x01
    5a38:	e0 e6       	ldi	r30, 0x60	; 96
    5a3a:	f6 e0       	ldi	r31, 0x06	; 6
    5a3c:	81 e1       	ldi	r24, 0x11	; 17
    5a3e:	81 83       	std	Z+1, r24	; 0x01
    5a40:	90 8b       	std	Z+16, r25	; 0x10
    5a42:	94 8b       	std	Z+20, r25	; 0x14
    5a44:	15 8a       	std	Z+21, r1	; 0x15
    5a46:	14 82       	std	Z+4, r1	; 0x04
    5a48:	87 e0       	ldi	r24, 0x07	; 7
    5a4a:	11 96       	adiw	r26, 0x01	; 1
    5a4c:	8c 93       	st	X, r24
    5a4e:	11 97       	sbiw	r26, 0x01	; 1
    5a50:	50 96       	adiw	r26, 0x10	; 16
    5a52:	2c 93       	st	X, r18
    5a54:	50 97       	sbiw	r26, 0x10	; 16
    5a56:	51 96       	adiw	r26, 0x11	; 17
    5a58:	2c 93       	st	X, r18
    5a5a:	51 97       	sbiw	r26, 0x11	; 17
    5a5c:	52 96       	adiw	r26, 0x12	; 18
    5a5e:	2c 93       	st	X, r18
    5a60:	52 97       	sbiw	r26, 0x12	; 18
    5a62:	14 96       	adiw	r26, 0x04	; 4
    5a64:	1c 92       	st	X, r1
    5a66:	e0 ea       	ldi	r30, 0xA0	; 160
    5a68:	f0 e0       	ldi	r31, 0x00	; 0
    5a6a:	82 81       	ldd	r24, Z+2	; 0x02
    5a6c:	81 60       	ori	r24, 0x01	; 1
    5a6e:	82 83       	std	Z+2, r24	; 0x02
    5a70:	82 81       	ldd	r24, Z+2	; 0x02
    5a72:	82 60       	ori	r24, 0x02	; 2
    5a74:	82 83       	std	Z+2, r24	; 0x02
    5a76:	82 81       	ldd	r24, Z+2	; 0x02
    5a78:	84 60       	ori	r24, 0x04	; 4
    5a7a:	82 83       	std	Z+2, r24	; 0x02
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	9e 01       	movw	r18, r28
    5a80:	28 5f       	subi	r18, 0xF8	; 248
    5a82:	3f 4f       	sbci	r19, 0xFF	; 255
    5a84:	91 e0       	ldi	r25, 0x01	; 1
    5a86:	91 93       	st	Z+, r25
    5a88:	e2 17       	cp	r30, r18
    5a8a:	f3 07       	cpc	r31, r19
    5a8c:	e1 f7       	brne	.-8      	; 0x5a86 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    5a8e:	83 e0       	ldi	r24, 0x03	; 3
    5a90:	88 87       	std	Y+8, r24	; 0x08
    5a92:	e0 e4       	ldi	r30, 0x40	; 64
    5a94:	f6 e0       	ldi	r31, 0x06	; 6
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	82 87       	std	Z+10, r24	; 0x0a
    5a9a:	81 87       	std	Z+9, r24	; 0x09
    5a9c:	df 91       	pop	r29
    5a9e:	cf 91       	pop	r28
    5aa0:	08 95       	ret

00005aa2 <_ZN11CLaserBoard15InitializeClockEv>:
    5aa2:	e0 e5       	ldi	r30, 0x50	; 80
    5aa4:	f0 e0       	ldi	r31, 0x00	; 0
    5aa6:	8b ec       	ldi	r24, 0xCB	; 203
    5aa8:	82 83       	std	Z+2, r24	; 0x02
    5aaa:	80 81       	ld	r24, Z
    5aac:	88 60       	ori	r24, 0x08	; 8
    5aae:	80 83       	st	Z, r24
    5ab0:	81 81       	ldd	r24, Z+1	; 0x01
    5ab2:	83 ff       	sbrs	r24, 3
    5ab4:	fd cf       	rjmp	.-6      	; 0x5ab0 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    5ab6:	e0 e5       	ldi	r30, 0x50	; 80
    5ab8:	f0 e0       	ldi	r31, 0x00	; 0
    5aba:	85 81       	ldd	r24, Z+5	; 0x05
    5abc:	98 ed       	ldi	r25, 0xD8	; 216
    5abe:	94 bf       	out	0x34, r25	; 52
    5ac0:	84 ec       	ldi	r24, 0xC4	; 196
    5ac2:	85 83       	std	Z+5, r24	; 0x05
    5ac4:	80 81       	ld	r24, Z
    5ac6:	80 61       	ori	r24, 0x10	; 16
    5ac8:	80 83       	st	Z, r24
    5aca:	e0 e4       	ldi	r30, 0x40	; 64
    5acc:	f0 e0       	ldi	r31, 0x00	; 0
    5ace:	81 81       	ldd	r24, Z+1	; 0x01
    5ad0:	94 bf       	out	0x34, r25	; 52
    5ad2:	11 82       	std	Z+1, r1	; 0x01
    5ad4:	e0 e5       	ldi	r30, 0x50	; 80
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	81 81       	ldd	r24, Z+1	; 0x01
    5ada:	84 ff       	sbrs	r24, 4
    5adc:	fd cf       	rjmp	.-6      	; 0x5ad8 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    5ade:	e0 e4       	ldi	r30, 0x40	; 64
    5ae0:	f0 e0       	ldi	r31, 0x00	; 0
    5ae2:	80 81       	ld	r24, Z
    5ae4:	88 7f       	andi	r24, 0xF8	; 248
    5ae6:	84 60       	ori	r24, 0x04	; 4
    5ae8:	98 ed       	ldi	r25, 0xD8	; 216
    5aea:	94 bf       	out	0x34, r25	; 52
    5aec:	80 83       	st	Z, r24
    5aee:	a0 e5       	ldi	r26, 0x50	; 80
    5af0:	b0 e0       	ldi	r27, 0x00	; 0
    5af2:	8c 91       	ld	r24, X
    5af4:	88 7f       	andi	r24, 0xF8	; 248
    5af6:	8c 93       	st	X, r24
    5af8:	82 81       	ldd	r24, Z+2	; 0x02
    5afa:	94 bf       	out	0x34, r25	; 52
    5afc:	81 e0       	ldi	r24, 0x01	; 1
    5afe:	82 83       	std	Z+2, r24	; 0x02
    5b00:	e0 eb       	ldi	r30, 0xB0	; 176
    5b02:	f0 e0       	ldi	r31, 0x00	; 0
    5b04:	84 81       	ldd	r24, Z+4	; 0x04
    5b06:	8c 7f       	andi	r24, 0xFC	; 252
    5b08:	84 83       	std	Z+4, r24	; 0x04
    5b0a:	08 95       	ret

00005b0c <_ZN11CLaserBoard5PWMOnEv>:
    5b0c:	84 e0       	ldi	r24, 0x04	; 4
    5b0e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5b12:	08 95       	ret

00005b14 <_ZN11CLaserBoard6PWMOffEv>:
    5b14:	84 e0       	ldi	r24, 0x04	; 4
    5b16:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    5b1a:	08 95       	ret

00005b1c <_ZN11CLaserBoard5REDOnEv>:
    5b1c:	82 e0       	ldi	r24, 0x02	; 2
    5b1e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5b22:	08 95       	ret

00005b24 <_ZN11CLaserBoard5GRNOnEv>:
    5b24:	84 e0       	ldi	r24, 0x04	; 4
    5b26:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5b2a:	08 95       	ret

00005b2c <_ZN11CLaserBoard5BLUOnEv>:
    5b2c:	88 e0       	ldi	r24, 0x08	; 8
    5b2e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5b32:	08 95       	ret

00005b34 <_ZN11CLaserBoard8Relay1OnEv>:
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    5b3a:	08 95       	ret

00005b3c <_ZN11CLaserBoard8Relay2OnEv>:
    5b3c:	80 e1       	ldi	r24, 0x10	; 16
    5b3e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    5b42:	08 95       	ret

00005b44 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    5b44:	80 e1       	ldi	r24, 0x10	; 16
    5b46:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    5b4a:	08 95       	ret

00005b4c <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    5b4c:	82 e0       	ldi	r24, 0x02	; 2
    5b4e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5b52:	08 95       	ret

00005b54 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    5b54:	82 e0       	ldi	r24, 0x02	; 2
    5b56:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    5b5a:	08 95       	ret

00005b5c <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    5b5c:	f8 94       	cli
    5b5e:	84 e6       	ldi	r24, 0x64	; 100
    5b60:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    5b62:	e0 e8       	ldi	r30, 0x80	; 128
    5b64:	f6 e0       	ldi	r31, 0x06	; 6
    5b66:	28 e0       	ldi	r18, 0x08	; 8
    5b68:	25 83       	std	Z+5, r18	; 0x05
    5b6a:	af e9       	ldi	r26, 0x9F	; 159
    5b6c:	bf e0       	ldi	r27, 0x0F	; 15
    5b6e:	11 97       	sbiw	r26, 0x01	; 1
    5b70:	f1 f7       	brne	.-4      	; 0x5b6e <_ZN11CLaserBoard4BeepEv+0x12>
    5b72:	00 c0       	rjmp	.+0      	; 0x5b74 <_ZN11CLaserBoard4BeepEv+0x18>
    5b74:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    5b76:	26 83       	std	Z+6, r18	; 0x06
    5b78:	af e9       	ldi	r26, 0x9F	; 159
    5b7a:	bf e0       	ldi	r27, 0x0F	; 15
    5b7c:	11 97       	sbiw	r26, 0x01	; 1
    5b7e:	f1 f7       	brne	.-4      	; 0x5b7c <_ZN11CLaserBoard4BeepEv+0x20>
    5b80:	00 c0       	rjmp	.+0      	; 0x5b82 <_ZN11CLaserBoard4BeepEv+0x26>
    5b82:	00 00       	nop
    5b84:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    5b86:	81 f7       	brne	.-32     	; 0x5b68 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    5b88:	78 94       	sei
    5b8a:	08 95       	ret

00005b8c <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    5b8c:	f8 94       	cli
    5b8e:	45 e0       	ldi	r20, 0x05	; 5
    5b90:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5b92:	64 e6       	ldi	r22, 0x64	; 100
    5b94:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    5b96:	e0 e8       	ldi	r30, 0x80	; 128
    5b98:	f6 e0       	ldi	r31, 0x06	; 6
    5b9a:	28 e0       	ldi	r18, 0x08	; 8
    5b9c:	1c c0       	rjmp	.+56     	; 0x5bd6 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    5b9e:	25 83       	std	Z+5, r18	; 0x05
    5ba0:	af e9       	ldi	r26, 0x9F	; 159
    5ba2:	bf e0       	ldi	r27, 0x0F	; 15
    5ba4:	11 97       	sbiw	r26, 0x01	; 1
    5ba6:	f1 f7       	brne	.-4      	; 0x5ba4 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    5ba8:	00 c0       	rjmp	.+0      	; 0x5baa <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    5baa:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    5bac:	26 83       	std	Z+6, r18	; 0x06
    5bae:	af e9       	ldi	r26, 0x9F	; 159
    5bb0:	bf e0       	ldi	r27, 0x0F	; 15
    5bb2:	11 97       	sbiw	r26, 0x01	; 1
    5bb4:	f1 f7       	brne	.-4      	; 0x5bb2 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    5bb6:	00 c0       	rjmp	.+0      	; 0x5bb8 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    5bb8:	00 00       	nop
    5bba:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    5bbc:	81 f7       	brne	.-32     	; 0x5b9e <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5bbe:	bf ef       	ldi	r27, 0xFF	; 255
    5bc0:	73 ec       	ldi	r23, 0xC3	; 195
    5bc2:	89 e0       	ldi	r24, 0x09	; 9
    5bc4:	b1 50       	subi	r27, 0x01	; 1
    5bc6:	70 40       	sbci	r23, 0x00	; 0
    5bc8:	80 40       	sbci	r24, 0x00	; 0
    5bca:	e1 f7       	brne	.-8      	; 0x5bc4 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    5bcc:	00 c0       	rjmp	.+0      	; 0x5bce <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    5bce:	00 00       	nop
    5bd0:	41 50       	subi	r20, 0x01	; 1
    5bd2:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    5bd4:	19 f0       	breq	.+6      	; 0x5bdc <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5bd6:	86 2f       	mov	r24, r22
    5bd8:	93 2f       	mov	r25, r19
    5bda:	e1 cf       	rjmp	.-62     	; 0x5b9e <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5bdc:	78 94       	sei
    5bde:	08 95       	ret

00005be0 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5be0:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    5be4:	fc 01       	movw	r30, r24
    5be6:	21 87       	std	Z+9, r18	; 0x09
    5be8:	08 95       	ret

00005bea <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    5bea:	fc 01       	movw	r30, r24
    5bec:	81 85       	ldd	r24, Z+9	; 0x09
    5bee:	81 70       	andi	r24, 0x01	; 1
    5bf0:	08 95       	ret

00005bf2 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    5bf2:	08 95       	ret

00005bf4 <_ZN12CSoundPlayerD1Ev>:
    5bf4:	08 95       	ret

00005bf6 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    5bf6:	e0 e0       	ldi	r30, 0x00	; 0
    5bf8:	fa e0       	ldi	r31, 0x0A	; 10
    5bfa:	10 82       	st	Z, r1
    5bfc:	87 e8       	ldi	r24, 0x87	; 135
    5bfe:	81 83       	std	Z+1, r24	; 0x01
    5c00:	13 82       	std	Z+3, r1	; 0x03
    5c02:	84 e2       	ldi	r24, 0x24	; 36
    5c04:	94 ef       	ldi	r25, 0xF4	; 244
    5c06:	86 a3       	std	Z+38, r24	; 0x26
    5c08:	97 a3       	std	Z+39, r25	; 0x27
    5c0a:	82 e1       	ldi	r24, 0x12	; 18
    5c0c:	9a e7       	ldi	r25, 0x7A	; 122
    5c0e:	86 a7       	std	Z+46, r24	; 0x2e
    5c10:	97 a7       	std	Z+47, r25	; 0x2f
    5c12:	16 82       	std	Z+6, r1	; 0x06
    5c14:	17 82       	std	Z+7, r1	; 0x07
    5c16:	08 95       	ret

00005c18 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    5c18:	e0 e4       	ldi	r30, 0x40	; 64
    5c1a:	fa e0       	ldi	r31, 0x0A	; 10
    5c1c:	10 82       	st	Z, r1
    5c1e:	11 82       	std	Z+1, r1	; 0x01
    5c20:	13 82       	std	Z+3, r1	; 0x03
    5c22:	84 e2       	ldi	r24, 0x24	; 36
    5c24:	94 ef       	ldi	r25, 0xF4	; 244
    5c26:	86 a3       	std	Z+38, r24	; 0x26
    5c28:	97 a3       	std	Z+39, r25	; 0x27
    5c2a:	16 82       	std	Z+6, r1	; 0x06
    5c2c:	17 82       	std	Z+7, r1	; 0x07
    5c2e:	08 95       	ret

00005c30 <_ZN12CSoundPlayer10SoundStartEjjh>:
    5c30:	0f 93       	push	r16
    5c32:	1f 93       	push	r17
    5c34:	cf 93       	push	r28
    5c36:	8a 01       	movw	r16, r20
    5c38:	c2 2f       	mov	r28, r18
    5c3a:	9b 01       	movw	r18, r22
    5c3c:	40 e0       	ldi	r20, 0x00	; 0
    5c3e:	50 e0       	ldi	r21, 0x00	; 0
    5c40:	64 e2       	ldi	r22, 0x24	; 36
    5c42:	74 ef       	ldi	r23, 0xF4	; 244
    5c44:	80 e0       	ldi	r24, 0x00	; 0
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	0e 94 dd 33 	call	0x67ba	; 0x67ba <__divmodsi4>
    5c4c:	b8 01       	movw	r22, r16
    5c4e:	76 95       	lsr	r23
    5c50:	67 95       	ror	r22
    5c52:	ee e3       	ldi	r30, 0x3E	; 62
    5c54:	e0 9f       	mul	r30, r16
    5c56:	c0 01       	movw	r24, r0
    5c58:	e1 9f       	mul	r30, r17
    5c5a:	90 0d       	add	r25, r0
    5c5c:	11 24       	eor	r1, r1
    5c5e:	86 0f       	add	r24, r22
    5c60:	97 1f       	adc	r25, r23
    5c62:	cf 5f       	subi	r28, 0xFF	; 255
    5c64:	b9 01       	movw	r22, r18
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    5c68:	76 95       	lsr	r23
    5c6a:	67 95       	ror	r22
    5c6c:	ca 95       	dec	r28
    5c6e:	e2 f7       	brpl	.-8      	; 0x5c68 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    5c70:	e0 e0       	ldi	r30, 0x00	; 0
    5c72:	fa e0       	ldi	r31, 0x0A	; 10
    5c74:	66 a7       	std	Z+46, r22	; 0x2e
    5c76:	77 a7       	std	Z+47, r23	; 0x2f
    5c78:	26 a3       	std	Z+38, r18	; 0x26
    5c7a:	37 a3       	std	Z+39, r19	; 0x27
    5c7c:	a0 e4       	ldi	r26, 0x40	; 64
    5c7e:	ba e0       	ldi	r27, 0x0A	; 10
    5c80:	96 96       	adiw	r26, 0x26	; 38
    5c82:	8d 93       	st	X+, r24
    5c84:	9c 93       	st	X, r25
    5c86:	97 97       	sbiw	r26, 0x27	; 39
    5c88:	86 e0       	ldi	r24, 0x06	; 6
    5c8a:	80 83       	st	Z, r24
    5c8c:	87 e0       	ldi	r24, 0x07	; 7
    5c8e:	8c 93       	st	X, r24
    5c90:	cf 91       	pop	r28
    5c92:	1f 91       	pop	r17
    5c94:	0f 91       	pop	r16
    5c96:	08 95       	ret

00005c98 <_ZN12CSoundPlayer9SoundStopEv>:
    5c98:	e0 e4       	ldi	r30, 0x40	; 64
    5c9a:	fa e0       	ldi	r31, 0x0A	; 10
    5c9c:	84 85       	ldd	r24, Z+12	; 0x0c
    5c9e:	80 ff       	sbrs	r24, 0
    5ca0:	fd cf       	rjmp	.-6      	; 0x5c9c <_ZN12CSoundPlayer9SoundStopEv+0x4>
    5ca2:	e0 e4       	ldi	r30, 0x40	; 64
    5ca4:	fa e0       	ldi	r31, 0x0A	; 10
    5ca6:	84 85       	ldd	r24, Z+12	; 0x0c
    5ca8:	81 70       	andi	r24, 0x01	; 1
    5caa:	84 87       	std	Z+12, r24	; 0x0c
    5cac:	a0 e0       	ldi	r26, 0x00	; 0
    5cae:	ba e0       	ldi	r27, 0x0A	; 10
    5cb0:	1c 92       	st	X, r1
    5cb2:	10 82       	st	Z, r1
    5cb4:	10 a2       	std	Z+32, r1	; 0x20
    5cb6:	11 a2       	std	Z+33, r1	; 0x21
    5cb8:	90 96       	adiw	r26, 0x20	; 32
    5cba:	1d 92       	st	X+, r1
    5cbc:	1c 92       	st	X, r1
    5cbe:	91 97       	sbiw	r26, 0x21	; 33
    5cc0:	2f ef       	ldi	r18, 0xFF	; 255
    5cc2:	83 ef       	ldi	r24, 0xF3	; 243
    5cc4:	91 e0       	ldi	r25, 0x01	; 1
    5cc6:	21 50       	subi	r18, 0x01	; 1
    5cc8:	80 40       	sbci	r24, 0x00	; 0
    5cca:	90 40       	sbci	r25, 0x00	; 0
    5ccc:	e1 f7       	brne	.-8      	; 0x5cc6 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    5cce:	00 c0       	rjmp	.+0      	; 0x5cd0 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    5cd0:	00 00       	nop
    5cd2:	08 95       	ret

00005cd4 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    5cd4:	cf 93       	push	r28
    5cd6:	df 93       	push	r29
    5cd8:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5cda:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5cde:	ce 01       	movw	r24, r28
    5ce0:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	08 95       	ret

00005cea <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5cea:	fc 01       	movw	r30, r24
    5cec:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5cee:	e0 e0       	ldi	r30, 0x00	; 0
    5cf0:	f8 e0       	ldi	r31, 0x08	; 8
    5cf2:	80 81       	ld	r24, Z
    5cf4:	80 7f       	andi	r24, 0xF0	; 240
    5cf6:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5cf8:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5cfa:	10 a2       	std	Z+32, r1	; 0x20
    5cfc:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5cfe:	10 a6       	std	Z+40, r1	; 0x28
    5d00:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    5d02:	12 a6       	std	Z+42, r1	; 0x2a
    5d04:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    5d06:	14 a6       	std	Z+44, r1	; 0x2c
    5d08:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5d0a:	16 a6       	std	Z+46, r1	; 0x2e
    5d0c:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5d0e:	16 a2       	std	Z+38, r1	; 0x26
    5d10:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5d12:	81 81       	ldd	r24, Z+1	; 0x01
    5d14:	88 7f       	andi	r24, 0xF8	; 248
    5d16:	68 2b       	or	r22, r24
    5d18:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5d1a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5d1c:	17 82       	std	Z+7, r1	; 0x07
    5d1e:	08 95       	ret

00005d20 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5d20:	e0 e0       	ldi	r30, 0x00	; 0
    5d22:	f8 e0       	ldi	r31, 0x08	; 8
    5d24:	66 a3       	std	Z+38, r22	; 0x26
    5d26:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5d28:	20 81       	ld	r18, Z
    5d2a:	20 7f       	andi	r18, 0xF0	; 240
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	12 96       	adiw	r26, 0x02	; 2
    5d30:	9c 91       	ld	r25, X
    5d32:	82 2f       	mov	r24, r18
    5d34:	89 2b       	or	r24, r25
    5d36:	80 83       	st	Z, r24
    5d38:	08 95       	ret

00005d3a <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d3a:	e0 e0       	ldi	r30, 0x00	; 0
    5d3c:	f8 e0       	ldi	r31, 0x08	; 8
    5d3e:	80 81       	ld	r24, Z
    5d40:	80 7f       	andi	r24, 0xF0	; 240
    5d42:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    5d44:	10 a2       	std	Z+32, r1	; 0x20
    5d46:	11 a2       	std	Z+33, r1	; 0x21
    5d48:	08 95       	ret

00005d4a <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5d4a:	e0 e0       	ldi	r30, 0x00	; 0
    5d4c:	f8 e0       	ldi	r31, 0x08	; 8
    5d4e:	81 81       	ldd	r24, Z+1	; 0x01
    5d50:	8f 70       	andi	r24, 0x0F	; 15
    5d52:	68 2b       	or	r22, r24
    5d54:	61 83       	std	Z+1, r22	; 0x01
    5d56:	08 95       	ret

00005d58 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5d58:	e0 e0       	ldi	r30, 0x00	; 0
    5d5a:	f8 e0       	ldi	r31, 0x08	; 8
    5d5c:	81 81       	ldd	r24, Z+1	; 0x01
    5d5e:	60 95       	com	r22
    5d60:	68 23       	and	r22, r24
    5d62:	61 83       	std	Z+1, r22	; 0x01
    5d64:	08 95       	ret

00005d66 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    5d66:	60 93 26 08 	sts	0x0826, r22	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    5d6a:	70 93 27 08 	sts	0x0827, r23	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    5d6e:	08 95       	ret

00005d70 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5d70:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    5d74:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    5d78:	08 95       	ret

00005d7a <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    5d7a:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    5d7e:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    5d82:	08 95       	ret

00005d84 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    5d84:	60 93 2c 08 	sts	0x082C, r22	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
    5d88:	70 93 2d 08 	sts	0x082D, r23	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
    5d8c:	08 95       	ret

00005d8e <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    5d8e:	60 93 2e 08 	sts	0x082E, r22	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
    5d92:	70 93 2f 08 	sts	0x082F, r23	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
    5d96:	08 95       	ret

00005d98 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5d98:	61 15       	cp	r22, r1
    5d9a:	71 05       	cpc	r23, r1
    5d9c:	29 f0       	breq	.+10     	; 0x5da8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5d9e:	e0 e0       	ldi	r30, 0x00	; 0
    5da0:	f8 e0       	ldi	r31, 0x08	; 8
    5da2:	86 81       	ldd	r24, Z+6	; 0x06
    5da4:	28 2b       	or	r18, r24
    5da6:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    5da8:	60 93 ce 22 	sts	0x22CE, r22	; 0x8022ce <InterruptFuncTable+0x1c>
    5dac:	70 93 cf 22 	sts	0x22CF, r23	; 0x8022cf <InterruptFuncTable+0x1d>
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    5db0:	40 93 c4 23 	sts	0x23C4, r20	; 0x8023c4 <InterruptSenderTable+0x1c>
    5db4:	50 93 c5 23 	sts	0x23C5, r21	; 0x8023c5 <InterruptSenderTable+0x1d>
    5db8:	08 95       	ret

00005dba <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5dba:	61 15       	cp	r22, r1
    5dbc:	71 05       	cpc	r23, r1
    5dbe:	29 f0       	breq	.+10     	; 0x5dca <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5dc0:	e0 e0       	ldi	r30, 0x00	; 0
    5dc2:	f8 e0       	ldi	r31, 0x08	; 8
    5dc4:	86 81       	ldd	r24, Z+6	; 0x06
    5dc6:	28 2b       	or	r18, r24
    5dc8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    5dca:	60 93 d0 22 	sts	0x22D0, r22	; 0x8022d0 <InterruptFuncTable+0x1e>
    5dce:	70 93 d1 22 	sts	0x22D1, r23	; 0x8022d1 <InterruptFuncTable+0x1f>
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    5dd2:	40 93 c6 23 	sts	0x23C6, r20	; 0x8023c6 <InterruptSenderTable+0x1e>
    5dd6:	50 93 c7 23 	sts	0x23C7, r21	; 0x8023c7 <InterruptSenderTable+0x1f>
    5dda:	08 95       	ret

00005ddc <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5ddc:	61 15       	cp	r22, r1
    5dde:	71 05       	cpc	r23, r1
    5de0:	29 f0       	breq	.+10     	; 0x5dec <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5de2:	e0 e0       	ldi	r30, 0x00	; 0
    5de4:	f8 e0       	ldi	r31, 0x08	; 8
    5de6:	87 81       	ldd	r24, Z+7	; 0x07
    5de8:	28 2b       	or	r18, r24
    5dea:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5dec:	60 93 d2 22 	sts	0x22D2, r22	; 0x8022d2 <InterruptFuncTable+0x20>
    5df0:	70 93 d3 22 	sts	0x22D3, r23	; 0x8022d3 <InterruptFuncTable+0x21>
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5df4:	40 93 c8 23 	sts	0x23C8, r20	; 0x8023c8 <InterruptSenderTable+0x20>
    5df8:	50 93 c9 23 	sts	0x23C9, r21	; 0x8023c9 <InterruptSenderTable+0x21>
    5dfc:	08 95       	ret

00005dfe <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5dfe:	61 15       	cp	r22, r1
    5e00:	71 05       	cpc	r23, r1
    5e02:	29 f0       	breq	.+10     	; 0x5e0e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5e04:	e0 e0       	ldi	r30, 0x00	; 0
    5e06:	f8 e0       	ldi	r31, 0x08	; 8
    5e08:	87 81       	ldd	r24, Z+7	; 0x07
    5e0a:	28 2b       	or	r18, r24
    5e0c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5e0e:	60 93 d4 22 	sts	0x22D4, r22	; 0x8022d4 <InterruptFuncTable+0x22>
    5e12:	70 93 d5 22 	sts	0x22D5, r23	; 0x8022d5 <InterruptFuncTable+0x23>
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5e16:	40 93 ca 23 	sts	0x23CA, r20	; 0x8023ca <InterruptSenderTable+0x22>
    5e1a:	50 93 cb 23 	sts	0x23CB, r21	; 0x8023cb <InterruptSenderTable+0x23>
    5e1e:	08 95       	ret

00005e20 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5e20:	61 15       	cp	r22, r1
    5e22:	71 05       	cpc	r23, r1
    5e24:	29 f0       	breq	.+10     	; 0x5e30 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5e26:	e0 e0       	ldi	r30, 0x00	; 0
    5e28:	f8 e0       	ldi	r31, 0x08	; 8
    5e2a:	87 81       	ldd	r24, Z+7	; 0x07
    5e2c:	28 2b       	or	r18, r24
    5e2e:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5e30:	60 93 d6 22 	sts	0x22D6, r22	; 0x8022d6 <InterruptFuncTable+0x24>
    5e34:	70 93 d7 22 	sts	0x22D7, r23	; 0x8022d7 <InterruptFuncTable+0x25>
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5e38:	40 93 cc 23 	sts	0x23CC, r20	; 0x8023cc <InterruptSenderTable+0x24>
    5e3c:	50 93 cd 23 	sts	0x23CD, r21	; 0x8023cd <InterruptSenderTable+0x25>
    5e40:	08 95       	ret

00005e42 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5e42:	61 15       	cp	r22, r1
    5e44:	71 05       	cpc	r23, r1
    5e46:	29 f0       	breq	.+10     	; 0x5e52 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5e48:	e0 e0       	ldi	r30, 0x00	; 0
    5e4a:	f8 e0       	ldi	r31, 0x08	; 8
    5e4c:	87 81       	ldd	r24, Z+7	; 0x07
    5e4e:	28 2b       	or	r18, r24
    5e50:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5e52:	60 93 d8 22 	sts	0x22D8, r22	; 0x8022d8 <InterruptFuncTable+0x26>
    5e56:	70 93 d9 22 	sts	0x22D9, r23	; 0x8022d9 <InterruptFuncTable+0x27>
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5e5a:	40 93 ce 23 	sts	0x23CE, r20	; 0x8023ce <InterruptSenderTable+0x26>
    5e5e:	50 93 cf 23 	sts	0x23CF, r21	; 0x8023cf <InterruptSenderTable+0x27>
    5e62:	08 95       	ret

00005e64 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5e64:	cf 93       	push	r28
    5e66:	df 93       	push	r29
    5e68:	ec 01       	movw	r28, r24
    5e6a:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN6CTimerC1Ev>
    5e6e:	88 e0       	ldi	r24, 0x08	; 8
    5e70:	92 e2       	ldi	r25, 0x22	; 34
    5e72:	88 83       	st	Y, r24
    5e74:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5e76:	df 91       	pop	r29
    5e78:	cf 91       	pop	r28
    5e7a:	08 95       	ret

00005e7c <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5e7c:	28 e0       	ldi	r18, 0x08	; 8
    5e7e:	32 e2       	ldi	r19, 0x22	; 34
    5e80:	fc 01       	movw	r30, r24
    5e82:	20 83       	st	Z, r18
    5e84:	31 83       	std	Z+1, r19	; 0x01
    5e86:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN6CTimerD1Ev>
    5e8a:	08 95       	ret

00005e8c <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5e8c:	fc 01       	movw	r30, r24
    5e8e:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5e90:	e0 e4       	ldi	r30, 0x40	; 64
    5e92:	f8 e0       	ldi	r31, 0x08	; 8
    5e94:	80 81       	ld	r24, Z
    5e96:	80 7f       	andi	r24, 0xF0	; 240
    5e98:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5e9a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5e9c:	10 a2       	std	Z+32, r1	; 0x20
    5e9e:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5ea0:	10 a6       	std	Z+40, r1	; 0x28
    5ea2:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5ea4:	12 a6       	std	Z+42, r1	; 0x2a
    5ea6:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5ea8:	16 a2       	std	Z+38, r1	; 0x26
    5eaa:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5eac:	81 81       	ldd	r24, Z+1	; 0x01
    5eae:	88 7f       	andi	r24, 0xF8	; 248
    5eb0:	68 2b       	or	r22, r24
    5eb2:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5eb4:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5eb6:	17 82       	std	Z+7, r1	; 0x07
    5eb8:	08 95       	ret

00005eba <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5eba:	e0 e4       	ldi	r30, 0x40	; 64
    5ebc:	f8 e0       	ldi	r31, 0x08	; 8
    5ebe:	66 a3       	std	Z+38, r22	; 0x26
    5ec0:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5ec2:	20 81       	ld	r18, Z
    5ec4:	20 7f       	andi	r18, 0xF0	; 240
    5ec6:	dc 01       	movw	r26, r24
    5ec8:	12 96       	adiw	r26, 0x02	; 2
    5eca:	9c 91       	ld	r25, X
    5ecc:	82 2f       	mov	r24, r18
    5ece:	89 2b       	or	r24, r25
    5ed0:	80 83       	st	Z, r24
    5ed2:	08 95       	ret

00005ed4 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ed4:	e0 e4       	ldi	r30, 0x40	; 64
    5ed6:	f8 e0       	ldi	r31, 0x08	; 8
    5ed8:	80 81       	ld	r24, Z
    5eda:	80 7f       	andi	r24, 0xF0	; 240
    5edc:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5ede:	10 a2       	std	Z+32, r1	; 0x20
    5ee0:	11 a2       	std	Z+33, r1	; 0x21
    5ee2:	08 95       	ret

00005ee4 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5ee4:	e0 e4       	ldi	r30, 0x40	; 64
    5ee6:	f8 e0       	ldi	r31, 0x08	; 8
    5ee8:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5eea:	80 81       	ld	r24, Z
    5eec:	80 7f       	andi	r24, 0xF0	; 240
    5eee:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5ef0:	10 a2       	std	Z+32, r1	; 0x20
    5ef2:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5ef4:	90 83       	st	Z, r25
    5ef6:	08 95       	ret

00005ef8 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5ef8:	e0 e4       	ldi	r30, 0x40	; 64
    5efa:	f8 e0       	ldi	r31, 0x08	; 8
    5efc:	81 81       	ldd	r24, Z+1	; 0x01
    5efe:	8f 70       	andi	r24, 0x0F	; 15
    5f00:	68 2b       	or	r22, r24
    5f02:	61 83       	std	Z+1, r22	; 0x01
    5f04:	08 95       	ret

00005f06 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5f06:	e0 e4       	ldi	r30, 0x40	; 64
    5f08:	f8 e0       	ldi	r31, 0x08	; 8
    5f0a:	81 81       	ldd	r24, Z+1	; 0x01
    5f0c:	60 95       	com	r22
    5f0e:	68 23       	and	r22, r24
    5f10:	61 83       	std	Z+1, r22	; 0x01
    5f12:	08 95       	ret

00005f14 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5f14:	60 93 66 08 	sts	0x0866, r22	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    5f18:	70 93 67 08 	sts	0x0867, r23	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    5f1c:	08 95       	ret

00005f1e <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5f1e:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    5f22:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    5f26:	08 95       	ret

00005f28 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5f28:	60 93 6a 08 	sts	0x086A, r22	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    5f2c:	70 93 6b 08 	sts	0x086B, r23	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    5f30:	08 95       	ret

00005f32 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5f32:	61 15       	cp	r22, r1
    5f34:	71 05       	cpc	r23, r1
    5f36:	31 f0       	breq	.+12     	; 0x5f44 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5f38:	e0 e4       	ldi	r30, 0x40	; 64
    5f3a:	f8 e0       	ldi	r31, 0x08	; 8
    5f3c:	86 81       	ldd	r24, Z+6	; 0x06
    5f3e:	83 70       	andi	r24, 0x03	; 3
    5f40:	28 2b       	or	r18, r24
    5f42:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5f44:	60 93 da 22 	sts	0x22DA, r22	; 0x8022da <InterruptFuncTable+0x28>
    5f48:	70 93 db 22 	sts	0x22DB, r23	; 0x8022db <InterruptFuncTable+0x29>
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5f4c:	40 93 d0 23 	sts	0x23D0, r20	; 0x8023d0 <InterruptSenderTable+0x28>
    5f50:	50 93 d1 23 	sts	0x23D1, r21	; 0x8023d1 <InterruptSenderTable+0x29>
    5f54:	08 95       	ret

00005f56 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5f56:	61 15       	cp	r22, r1
    5f58:	71 05       	cpc	r23, r1
    5f5a:	31 f0       	breq	.+12     	; 0x5f68 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5f5c:	e0 e4       	ldi	r30, 0x40	; 64
    5f5e:	f8 e0       	ldi	r31, 0x08	; 8
    5f60:	86 81       	ldd	r24, Z+6	; 0x06
    5f62:	8c 70       	andi	r24, 0x0C	; 12
    5f64:	28 2b       	or	r18, r24
    5f66:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5f68:	60 93 dc 22 	sts	0x22DC, r22	; 0x8022dc <InterruptFuncTable+0x2a>
    5f6c:	70 93 dd 22 	sts	0x22DD, r23	; 0x8022dd <InterruptFuncTable+0x2b>
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5f70:	40 93 d2 23 	sts	0x23D2, r20	; 0x8023d2 <InterruptSenderTable+0x2a>
    5f74:	50 93 d3 23 	sts	0x23D3, r21	; 0x8023d3 <InterruptSenderTable+0x2b>
    5f78:	08 95       	ret

00005f7a <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5f7a:	61 15       	cp	r22, r1
    5f7c:	71 05       	cpc	r23, r1
    5f7e:	31 f0       	breq	.+12     	; 0x5f8c <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5f80:	e0 e4       	ldi	r30, 0x40	; 64
    5f82:	f8 e0       	ldi	r31, 0x08	; 8
    5f84:	87 81       	ldd	r24, Z+7	; 0x07
    5f86:	83 70       	andi	r24, 0x03	; 3
    5f88:	28 2b       	or	r18, r24
    5f8a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5f8c:	60 93 de 22 	sts	0x22DE, r22	; 0x8022de <InterruptFuncTable+0x2c>
    5f90:	70 93 df 22 	sts	0x22DF, r23	; 0x8022df <InterruptFuncTable+0x2d>
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5f94:	40 93 d4 23 	sts	0x23D4, r20	; 0x8023d4 <InterruptSenderTable+0x2c>
    5f98:	50 93 d5 23 	sts	0x23D5, r21	; 0x8023d5 <InterruptSenderTable+0x2d>
    5f9c:	08 95       	ret

00005f9e <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5f9e:	61 15       	cp	r22, r1
    5fa0:	71 05       	cpc	r23, r1
    5fa2:	31 f0       	breq	.+12     	; 0x5fb0 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5fa4:	e0 e4       	ldi	r30, 0x40	; 64
    5fa6:	f8 e0       	ldi	r31, 0x08	; 8
    5fa8:	87 81       	ldd	r24, Z+7	; 0x07
    5faa:	8c 70       	andi	r24, 0x0C	; 12
    5fac:	28 2b       	or	r18, r24
    5fae:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5fb0:	60 93 e0 22 	sts	0x22E0, r22	; 0x8022e0 <InterruptFuncTable+0x2e>
    5fb4:	70 93 e1 22 	sts	0x22E1, r23	; 0x8022e1 <InterruptFuncTable+0x2f>
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5fb8:	40 93 d6 23 	sts	0x23D6, r20	; 0x8023d6 <InterruptSenderTable+0x2e>
    5fbc:	50 93 d7 23 	sts	0x23D7, r21	; 0x8023d7 <InterruptSenderTable+0x2f>
    5fc0:	08 95       	ret

00005fc2 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5fc2:	cf 93       	push	r28
    5fc4:	df 93       	push	r29
    5fc6:	ec 01       	movw	r28, r24
    5fc8:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN7CTimer1C1Ev>
    5fcc:	8c e2       	ldi	r24, 0x2C	; 44
    5fce:	92 e2       	ldi	r25, 0x22	; 34
    5fd0:	88 83       	st	Y, r24
    5fd2:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5fd4:	df 91       	pop	r29
    5fd6:	cf 91       	pop	r28
    5fd8:	08 95       	ret

00005fda <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5fda:	2c e2       	ldi	r18, 0x2C	; 44
    5fdc:	32 e2       	ldi	r19, 0x22	; 34
    5fde:	fc 01       	movw	r30, r24
    5fe0:	20 83       	st	Z, r18
    5fe2:	31 83       	std	Z+1, r19	; 0x01
    5fe4:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7CTimer1D1Ev>
    5fe8:	08 95       	ret

00005fea <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5fea:	fc 01       	movw	r30, r24
    5fec:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5fee:	e0 e0       	ldi	r30, 0x00	; 0
    5ff0:	f9 e0       	ldi	r31, 0x09	; 9
    5ff2:	80 81       	ld	r24, Z
    5ff4:	80 7f       	andi	r24, 0xF0	; 240
    5ff6:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5ff8:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5ffa:	10 a2       	std	Z+32, r1	; 0x20
    5ffc:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    5ffe:	10 a6       	std	Z+40, r1	; 0x28
    6000:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    6002:	12 a6       	std	Z+42, r1	; 0x2a
    6004:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    6006:	14 a6       	std	Z+44, r1	; 0x2c
    6008:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    600a:	16 a6       	std	Z+46, r1	; 0x2e
    600c:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    600e:	16 a2       	std	Z+38, r1	; 0x26
    6010:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    6012:	81 81       	ldd	r24, Z+1	; 0x01
    6014:	88 7f       	andi	r24, 0xF8	; 248
    6016:	68 2b       	or	r22, r24
    6018:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    601a:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    601c:	17 82       	std	Z+7, r1	; 0x07
    601e:	08 95       	ret

00006020 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    6020:	e0 e0       	ldi	r30, 0x00	; 0
    6022:	f9 e0       	ldi	r31, 0x09	; 9
    6024:	66 a3       	std	Z+38, r22	; 0x26
    6026:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    6028:	20 81       	ld	r18, Z
    602a:	20 7f       	andi	r18, 0xF0	; 240
    602c:	dc 01       	movw	r26, r24
    602e:	12 96       	adiw	r26, 0x02	; 2
    6030:	9c 91       	ld	r25, X
    6032:	82 2f       	mov	r24, r18
    6034:	89 2b       	or	r24, r25
    6036:	80 83       	st	Z, r24
    6038:	08 95       	ret

0000603a <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    603a:	e0 e0       	ldi	r30, 0x00	; 0
    603c:	f9 e0       	ldi	r31, 0x09	; 9
    603e:	80 81       	ld	r24, Z
    6040:	80 7f       	andi	r24, 0xF0	; 240
    6042:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    6044:	10 a2       	std	Z+32, r1	; 0x20
    6046:	11 a2       	std	Z+33, r1	; 0x21
    6048:	08 95       	ret

0000604a <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    604a:	e0 e0       	ldi	r30, 0x00	; 0
    604c:	f9 e0       	ldi	r31, 0x09	; 9
    604e:	81 81       	ldd	r24, Z+1	; 0x01
    6050:	8f 70       	andi	r24, 0x0F	; 15
    6052:	68 2b       	or	r22, r24
    6054:	61 83       	std	Z+1, r22	; 0x01
    6056:	08 95       	ret

00006058 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    6058:	e0 e0       	ldi	r30, 0x00	; 0
    605a:	f9 e0       	ldi	r31, 0x09	; 9
    605c:	81 81       	ldd	r24, Z+1	; 0x01
    605e:	60 95       	com	r22
    6060:	68 23       	and	r22, r24
    6062:	61 83       	std	Z+1, r22	; 0x01
    6064:	08 95       	ret

00006066 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    6066:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    606a:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    606e:	08 95       	ret

00006070 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    6070:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    6074:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    6078:	08 95       	ret

0000607a <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    607a:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    607e:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    6082:	08 95       	ret

00006084 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    6084:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
    6088:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
    608c:	08 95       	ret

0000608e <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    608e:	60 93 2e 09 	sts	0x092E, r22	; 0x80092e <__TEXT_REGION_LENGTH__+0x70092e>
    6092:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <__TEXT_REGION_LENGTH__+0x70092f>
    6096:	08 95       	ret

00006098 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    6098:	61 15       	cp	r22, r1
    609a:	71 05       	cpc	r23, r1
    609c:	29 f0       	breq	.+10     	; 0x60a8 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    609e:	e0 e0       	ldi	r30, 0x00	; 0
    60a0:	f9 e0       	ldi	r31, 0x09	; 9
    60a2:	86 81       	ldd	r24, Z+6	; 0x06
    60a4:	28 2b       	or	r18, r24
    60a6:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    60a8:	60 93 4c 23 	sts	0x234C, r22	; 0x80234c <InterruptFuncTable+0x9a>
    60ac:	70 93 4d 23 	sts	0x234D, r23	; 0x80234d <InterruptFuncTable+0x9b>
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    60b0:	40 93 42 24 	sts	0x2442, r20	; 0x802442 <InterruptSenderTable+0x9a>
    60b4:	50 93 43 24 	sts	0x2443, r21	; 0x802443 <InterruptSenderTable+0x9b>
    60b8:	08 95       	ret

000060ba <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    60ba:	61 15       	cp	r22, r1
    60bc:	71 05       	cpc	r23, r1
    60be:	29 f0       	breq	.+10     	; 0x60ca <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    60c0:	e0 e0       	ldi	r30, 0x00	; 0
    60c2:	f9 e0       	ldi	r31, 0x09	; 9
    60c4:	86 81       	ldd	r24, Z+6	; 0x06
    60c6:	28 2b       	or	r18, r24
    60c8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    60ca:	60 93 4e 23 	sts	0x234E, r22	; 0x80234e <InterruptFuncTable+0x9c>
    60ce:	70 93 4f 23 	sts	0x234F, r23	; 0x80234f <InterruptFuncTable+0x9d>
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    60d2:	40 93 44 24 	sts	0x2444, r20	; 0x802444 <InterruptSenderTable+0x9c>
    60d6:	50 93 45 24 	sts	0x2445, r21	; 0x802445 <InterruptSenderTable+0x9d>
    60da:	08 95       	ret

000060dc <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    60dc:	61 15       	cp	r22, r1
    60de:	71 05       	cpc	r23, r1
    60e0:	29 f0       	breq	.+10     	; 0x60ec <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    60e2:	e0 e0       	ldi	r30, 0x00	; 0
    60e4:	f9 e0       	ldi	r31, 0x09	; 9
    60e6:	87 81       	ldd	r24, Z+7	; 0x07
    60e8:	28 2b       	or	r18, r24
    60ea:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    60ec:	60 93 50 23 	sts	0x2350, r22	; 0x802350 <InterruptFuncTable+0x9e>
    60f0:	70 93 51 23 	sts	0x2351, r23	; 0x802351 <InterruptFuncTable+0x9f>
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    60f4:	40 93 46 24 	sts	0x2446, r20	; 0x802446 <InterruptSenderTable+0x9e>
    60f8:	50 93 47 24 	sts	0x2447, r21	; 0x802447 <InterruptSenderTable+0x9f>
    60fc:	08 95       	ret

000060fe <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    60fe:	61 15       	cp	r22, r1
    6100:	71 05       	cpc	r23, r1
    6102:	29 f0       	breq	.+10     	; 0x610e <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    6104:	e0 e0       	ldi	r30, 0x00	; 0
    6106:	f9 e0       	ldi	r31, 0x09	; 9
    6108:	87 81       	ldd	r24, Z+7	; 0x07
    610a:	28 2b       	or	r18, r24
    610c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    610e:	60 93 52 23 	sts	0x2352, r22	; 0x802352 <InterruptFuncTable+0xa0>
    6112:	70 93 53 23 	sts	0x2353, r23	; 0x802353 <InterruptFuncTable+0xa1>
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    6116:	40 93 48 24 	sts	0x2448, r20	; 0x802448 <InterruptSenderTable+0xa0>
    611a:	50 93 49 24 	sts	0x2449, r21	; 0x802449 <InterruptSenderTable+0xa1>
    611e:	08 95       	ret

00006120 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    6120:	61 15       	cp	r22, r1
    6122:	71 05       	cpc	r23, r1
    6124:	29 f0       	breq	.+10     	; 0x6130 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6126:	e0 e0       	ldi	r30, 0x00	; 0
    6128:	f9 e0       	ldi	r31, 0x09	; 9
    612a:	87 81       	ldd	r24, Z+7	; 0x07
    612c:	28 2b       	or	r18, r24
    612e:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    6130:	60 93 54 23 	sts	0x2354, r22	; 0x802354 <InterruptFuncTable+0xa2>
    6134:	70 93 55 23 	sts	0x2355, r23	; 0x802355 <InterruptFuncTable+0xa3>
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    6138:	40 93 4a 24 	sts	0x244A, r20	; 0x80244a <InterruptSenderTable+0xa2>
    613c:	50 93 4b 24 	sts	0x244B, r21	; 0x80244b <InterruptSenderTable+0xa3>
    6140:	08 95       	ret

00006142 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    6142:	61 15       	cp	r22, r1
    6144:	71 05       	cpc	r23, r1
    6146:	29 f0       	breq	.+10     	; 0x6152 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    6148:	e0 e0       	ldi	r30, 0x00	; 0
    614a:	f9 e0       	ldi	r31, 0x09	; 9
    614c:	87 81       	ldd	r24, Z+7	; 0x07
    614e:	28 2b       	or	r18, r24
    6150:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    6152:	60 93 56 23 	sts	0x2356, r22	; 0x802356 <InterruptFuncTable+0xa4>
    6156:	70 93 57 23 	sts	0x2357, r23	; 0x802357 <InterruptFuncTable+0xa5>
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    615a:	40 93 4c 24 	sts	0x244C, r20	; 0x80244c <InterruptSenderTable+0xa4>
    615e:	50 93 4d 24 	sts	0x244D, r21	; 0x80244d <InterruptSenderTable+0xa5>
    6162:	08 95       	ret

00006164 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    6164:	cf 93       	push	r28
    6166:	df 93       	push	r29
    6168:	ec 01       	movw	r28, r24
    616a:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN6CTimerC1Ev>
    616e:	8a e4       	ldi	r24, 0x4A	; 74
    6170:	92 e2       	ldi	r25, 0x22	; 34
    6172:	88 83       	st	Y, r24
    6174:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    6176:	df 91       	pop	r29
    6178:	cf 91       	pop	r28
    617a:	08 95       	ret

0000617c <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    617c:	2a e4       	ldi	r18, 0x4A	; 74
    617e:	32 e2       	ldi	r19, 0x22	; 34
    6180:	fc 01       	movw	r30, r24
    6182:	20 83       	st	Z, r18
    6184:	31 83       	std	Z+1, r19	; 0x01
    6186:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN6CTimerD1Ev>
    618a:	08 95       	ret

0000618c <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    618c:	fc 01       	movw	r30, r24
    618e:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6190:	e0 e4       	ldi	r30, 0x40	; 64
    6192:	f9 e0       	ldi	r31, 0x09	; 9
    6194:	80 81       	ld	r24, Z
    6196:	80 7f       	andi	r24, 0xF0	; 240
    6198:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    619a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    619c:	10 a2       	std	Z+32, r1	; 0x20
    619e:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    61a0:	10 a6       	std	Z+40, r1	; 0x28
    61a2:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    61a4:	12 a6       	std	Z+42, r1	; 0x2a
    61a6:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    61a8:	16 a2       	std	Z+38, r1	; 0x26
    61aa:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    61ac:	81 81       	ldd	r24, Z+1	; 0x01
    61ae:	88 7f       	andi	r24, 0xF8	; 248
    61b0:	68 2b       	or	r22, r24
    61b2:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    61b4:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    61b6:	17 82       	std	Z+7, r1	; 0x07
    61b8:	08 95       	ret

000061ba <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    61ba:	e0 e4       	ldi	r30, 0x40	; 64
    61bc:	f9 e0       	ldi	r31, 0x09	; 9
    61be:	66 a3       	std	Z+38, r22	; 0x26
    61c0:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    61c2:	20 81       	ld	r18, Z
    61c4:	20 7f       	andi	r18, 0xF0	; 240
    61c6:	dc 01       	movw	r26, r24
    61c8:	12 96       	adiw	r26, 0x02	; 2
    61ca:	9c 91       	ld	r25, X
    61cc:	82 2f       	mov	r24, r18
    61ce:	89 2b       	or	r24, r25
    61d0:	80 83       	st	Z, r24
    61d2:	08 95       	ret

000061d4 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61d4:	e0 e4       	ldi	r30, 0x40	; 64
    61d6:	f9 e0       	ldi	r31, 0x09	; 9
    61d8:	80 81       	ld	r24, Z
    61da:	80 7f       	andi	r24, 0xF0	; 240
    61dc:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    61de:	10 a2       	std	Z+32, r1	; 0x20
    61e0:	11 a2       	std	Z+33, r1	; 0x21
    61e2:	08 95       	ret

000061e4 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    61e4:	e0 e4       	ldi	r30, 0x40	; 64
    61e6:	f9 e0       	ldi	r31, 0x09	; 9
    61e8:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61ea:	80 81       	ld	r24, Z
    61ec:	80 7f       	andi	r24, 0xF0	; 240
    61ee:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    61f0:	10 a2       	std	Z+32, r1	; 0x20
    61f2:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    61f4:	90 83       	st	Z, r25
    61f6:	08 95       	ret

000061f8 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    61f8:	e0 e4       	ldi	r30, 0x40	; 64
    61fa:	f9 e0       	ldi	r31, 0x09	; 9
    61fc:	81 81       	ldd	r24, Z+1	; 0x01
    61fe:	8f 70       	andi	r24, 0x0F	; 15
    6200:	68 2b       	or	r22, r24
    6202:	61 83       	std	Z+1, r22	; 0x01
    6204:	08 95       	ret

00006206 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    6206:	e0 e4       	ldi	r30, 0x40	; 64
    6208:	f9 e0       	ldi	r31, 0x09	; 9
    620a:	81 81       	ldd	r24, Z+1	; 0x01
    620c:	60 95       	com	r22
    620e:	68 23       	and	r22, r24
    6210:	61 83       	std	Z+1, r22	; 0x01
    6212:	08 95       	ret

00006214 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    6214:	60 93 66 09 	sts	0x0966, r22	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    6218:	70 93 67 09 	sts	0x0967, r23	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    621c:	08 95       	ret

0000621e <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    621e:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    6222:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    6226:	08 95       	ret

00006228 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    6228:	60 93 6a 09 	sts	0x096A, r22	; 0x80096a <__TEXT_REGION_LENGTH__+0x70096a>
    622c:	70 93 6b 09 	sts	0x096B, r23	; 0x80096b <__TEXT_REGION_LENGTH__+0x70096b>
    6230:	08 95       	ret

00006232 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    6232:	61 15       	cp	r22, r1
    6234:	71 05       	cpc	r23, r1
    6236:	29 f0       	breq	.+10     	; 0x6242 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    6238:	e0 e4       	ldi	r30, 0x40	; 64
    623a:	f9 e0       	ldi	r31, 0x09	; 9
    623c:	86 81       	ldd	r24, Z+6	; 0x06
    623e:	28 2b       	or	r18, r24
    6240:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    6242:	60 93 58 23 	sts	0x2358, r22	; 0x802358 <InterruptFuncTable+0xa6>
    6246:	70 93 59 23 	sts	0x2359, r23	; 0x802359 <InterruptFuncTable+0xa7>
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    624a:	40 93 4e 24 	sts	0x244E, r20	; 0x80244e <InterruptSenderTable+0xa6>
    624e:	50 93 4f 24 	sts	0x244F, r21	; 0x80244f <InterruptSenderTable+0xa7>
    6252:	08 95       	ret

00006254 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    6254:	61 15       	cp	r22, r1
    6256:	71 05       	cpc	r23, r1
    6258:	29 f0       	breq	.+10     	; 0x6264 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    625a:	e0 e4       	ldi	r30, 0x40	; 64
    625c:	f9 e0       	ldi	r31, 0x09	; 9
    625e:	86 81       	ldd	r24, Z+6	; 0x06
    6260:	28 2b       	or	r18, r24
    6262:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    6264:	60 93 5a 23 	sts	0x235A, r22	; 0x80235a <InterruptFuncTable+0xa8>
    6268:	70 93 5b 23 	sts	0x235B, r23	; 0x80235b <InterruptFuncTable+0xa9>
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    626c:	40 93 50 24 	sts	0x2450, r20	; 0x802450 <InterruptSenderTable+0xa8>
    6270:	50 93 51 24 	sts	0x2451, r21	; 0x802451 <InterruptSenderTable+0xa9>
    6274:	08 95       	ret

00006276 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    6276:	61 15       	cp	r22, r1
    6278:	71 05       	cpc	r23, r1
    627a:	29 f0       	breq	.+10     	; 0x6286 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    627c:	e0 e4       	ldi	r30, 0x40	; 64
    627e:	f9 e0       	ldi	r31, 0x09	; 9
    6280:	87 81       	ldd	r24, Z+7	; 0x07
    6282:	28 2b       	or	r18, r24
    6284:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    6286:	60 93 5c 23 	sts	0x235C, r22	; 0x80235c <InterruptFuncTable+0xaa>
    628a:	70 93 5d 23 	sts	0x235D, r23	; 0x80235d <InterruptFuncTable+0xab>
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    628e:	40 93 52 24 	sts	0x2452, r20	; 0x802452 <InterruptSenderTable+0xaa>
    6292:	50 93 53 24 	sts	0x2453, r21	; 0x802453 <InterruptSenderTable+0xab>
    6296:	08 95       	ret

00006298 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6298:	61 15       	cp	r22, r1
    629a:	71 05       	cpc	r23, r1
    629c:	29 f0       	breq	.+10     	; 0x62a8 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    629e:	e0 e4       	ldi	r30, 0x40	; 64
    62a0:	f9 e0       	ldi	r31, 0x09	; 9
    62a2:	87 81       	ldd	r24, Z+7	; 0x07
    62a4:	28 2b       	or	r18, r24
    62a6:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    62a8:	60 93 5e 23 	sts	0x235E, r22	; 0x80235e <InterruptFuncTable+0xac>
    62ac:	70 93 5f 23 	sts	0x235F, r23	; 0x80235f <InterruptFuncTable+0xad>
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    62b0:	40 93 54 24 	sts	0x2454, r20	; 0x802454 <InterruptSenderTable+0xac>
    62b4:	50 93 55 24 	sts	0x2455, r21	; 0x802455 <InterruptSenderTable+0xad>
    62b8:	08 95       	ret

000062ba <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    62ba:	cf 93       	push	r28
    62bc:	df 93       	push	r29
    62be:	ec 01       	movw	r28, r24
    62c0:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN7CTimer1C1Ev>
    62c4:	8e e6       	ldi	r24, 0x6E	; 110
    62c6:	92 e2       	ldi	r25, 0x22	; 34
    62c8:	88 83       	st	Y, r24
    62ca:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	08 95       	ret

000062d2 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    62d2:	2e e6       	ldi	r18, 0x6E	; 110
    62d4:	32 e2       	ldi	r19, 0x22	; 34
    62d6:	fc 01       	movw	r30, r24
    62d8:	20 83       	st	Z, r18
    62da:	31 83       	std	Z+1, r19	; 0x01
    62dc:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7CTimer1D1Ev>
    62e0:	08 95       	ret

000062e2 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    62e2:	fc 01       	movw	r30, r24
    62e4:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    62e6:	e0 e0       	ldi	r30, 0x00	; 0
    62e8:	fb e0       	ldi	r31, 0x0B	; 11
    62ea:	80 81       	ld	r24, Z
    62ec:	80 7f       	andi	r24, 0xF0	; 240
    62ee:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    62f0:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    62f2:	10 a2       	std	Z+32, r1	; 0x20
    62f4:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    62f6:	10 a6       	std	Z+40, r1	; 0x28
    62f8:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    62fa:	12 a6       	std	Z+42, r1	; 0x2a
    62fc:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    62fe:	14 a6       	std	Z+44, r1	; 0x2c
    6300:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    6302:	16 a6       	std	Z+46, r1	; 0x2e
    6304:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    6306:	16 a2       	std	Z+38, r1	; 0x26
    6308:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    630a:	81 81       	ldd	r24, Z+1	; 0x01
    630c:	88 7f       	andi	r24, 0xF8	; 248
    630e:	68 2b       	or	r22, r24
    6310:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    6312:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    6314:	17 82       	std	Z+7, r1	; 0x07
    6316:	08 95       	ret

00006318 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    6318:	e0 e0       	ldi	r30, 0x00	; 0
    631a:	fb e0       	ldi	r31, 0x0B	; 11
    631c:	66 a3       	std	Z+38, r22	; 0x26
    631e:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    6320:	20 81       	ld	r18, Z
    6322:	20 7f       	andi	r18, 0xF0	; 240
    6324:	dc 01       	movw	r26, r24
    6326:	12 96       	adiw	r26, 0x02	; 2
    6328:	9c 91       	ld	r25, X
    632a:	82 2f       	mov	r24, r18
    632c:	89 2b       	or	r24, r25
    632e:	80 83       	st	Z, r24
    6330:	08 95       	ret

00006332 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6332:	e0 e0       	ldi	r30, 0x00	; 0
    6334:	fb e0       	ldi	r31, 0x0B	; 11
    6336:	80 81       	ld	r24, Z
    6338:	80 7f       	andi	r24, 0xF0	; 240
    633a:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    633c:	10 a2       	std	Z+32, r1	; 0x20
    633e:	11 a2       	std	Z+33, r1	; 0x21
    6340:	08 95       	ret

00006342 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    6342:	e0 e0       	ldi	r30, 0x00	; 0
    6344:	fb e0       	ldi	r31, 0x0B	; 11
    6346:	81 81       	ldd	r24, Z+1	; 0x01
    6348:	68 2b       	or	r22, r24
    634a:	61 83       	std	Z+1, r22	; 0x01
    634c:	08 95       	ret

0000634e <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    634e:	e0 e0       	ldi	r30, 0x00	; 0
    6350:	fb e0       	ldi	r31, 0x0B	; 11
    6352:	81 81       	ldd	r24, Z+1	; 0x01
    6354:	60 95       	com	r22
    6356:	68 23       	and	r22, r24
    6358:	61 83       	std	Z+1, r22	; 0x01
    635a:	08 95       	ret

0000635c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    635c:	e0 e0       	ldi	r30, 0x00	; 0
    635e:	fb e0       	ldi	r31, 0x0B	; 11
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	62 95       	swap	r22
    6364:	6f 70       	andi	r22, 0x0F	; 15
    6366:	68 2b       	or	r22, r24
    6368:	62 83       	std	Z+2, r22	; 0x02
    636a:	08 95       	ret

0000636c <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    636c:	e0 e0       	ldi	r30, 0x00	; 0
    636e:	fb e0       	ldi	r31, 0x0B	; 11
    6370:	82 81       	ldd	r24, Z+2	; 0x02
    6372:	62 95       	swap	r22
    6374:	6f 70       	andi	r22, 0x0F	; 15
    6376:	60 95       	com	r22
    6378:	68 23       	and	r22, r24
    637a:	62 83       	std	Z+2, r22	; 0x02
    637c:	08 95       	ret

0000637e <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    637e:	60 93 26 0b 	sts	0x0B26, r22	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    6382:	70 93 27 0b 	sts	0x0B27, r23	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    6386:	08 95       	ret

00006388 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    6388:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
    638c:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
    6390:	08 95       	ret

00006392 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    6392:	60 93 2a 0b 	sts	0x0B2A, r22	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
    6396:	70 93 2b 0b 	sts	0x0B2B, r23	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
    639a:	08 95       	ret

0000639c <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    639c:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
    63a0:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
    63a4:	08 95       	ret

000063a6 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    63a6:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
    63aa:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
    63ae:	08 95       	ret

000063b0 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    63b0:	61 15       	cp	r22, r1
    63b2:	71 05       	cpc	r23, r1
    63b4:	29 f0       	breq	.+10     	; 0x63c0 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    63b6:	e0 e0       	ldi	r30, 0x00	; 0
    63b8:	fb e0       	ldi	r31, 0x0B	; 11
    63ba:	86 81       	ldd	r24, Z+6	; 0x06
    63bc:	28 2b       	or	r18, r24
    63be:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    63c0:	60 93 8a 23 	sts	0x238A, r22	; 0x80238a <InterruptFuncTable+0xd8>
    63c4:	70 93 8b 23 	sts	0x238B, r23	; 0x80238b <InterruptFuncTable+0xd9>
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    63c8:	40 93 80 24 	sts	0x2480, r20	; 0x802480 <InterruptSenderTable+0xd8>
    63cc:	50 93 81 24 	sts	0x2481, r21	; 0x802481 <InterruptSenderTable+0xd9>
    63d0:	08 95       	ret

000063d2 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    63d2:	61 15       	cp	r22, r1
    63d4:	71 05       	cpc	r23, r1
    63d6:	29 f0       	breq	.+10     	; 0x63e2 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    63d8:	e0 e0       	ldi	r30, 0x00	; 0
    63da:	fb e0       	ldi	r31, 0x0B	; 11
    63dc:	86 81       	ldd	r24, Z+6	; 0x06
    63de:	28 2b       	or	r18, r24
    63e0:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    63e2:	60 93 8c 23 	sts	0x238C, r22	; 0x80238c <InterruptFuncTable+0xda>
    63e6:	70 93 8d 23 	sts	0x238D, r23	; 0x80238d <InterruptFuncTable+0xdb>
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    63ea:	40 93 82 24 	sts	0x2482, r20	; 0x802482 <InterruptSenderTable+0xda>
    63ee:	50 93 83 24 	sts	0x2483, r21	; 0x802483 <InterruptSenderTable+0xdb>
    63f2:	08 95       	ret

000063f4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    63f4:	61 15       	cp	r22, r1
    63f6:	71 05       	cpc	r23, r1
    63f8:	29 f0       	breq	.+10     	; 0x6404 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    63fa:	e0 e0       	ldi	r30, 0x00	; 0
    63fc:	fb e0       	ldi	r31, 0x0B	; 11
    63fe:	87 81       	ldd	r24, Z+7	; 0x07
    6400:	28 2b       	or	r18, r24
    6402:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    6404:	60 93 8e 23 	sts	0x238E, r22	; 0x80238e <InterruptFuncTable+0xdc>
    6408:	70 93 8f 23 	sts	0x238F, r23	; 0x80238f <InterruptFuncTable+0xdd>
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    640c:	40 93 84 24 	sts	0x2484, r20	; 0x802484 <InterruptSenderTable+0xdc>
    6410:	50 93 85 24 	sts	0x2485, r21	; 0x802485 <InterruptSenderTable+0xdd>
    6414:	08 95       	ret

00006416 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6416:	61 15       	cp	r22, r1
    6418:	71 05       	cpc	r23, r1
    641a:	29 f0       	breq	.+10     	; 0x6426 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    641c:	e0 e0       	ldi	r30, 0x00	; 0
    641e:	fb e0       	ldi	r31, 0x0B	; 11
    6420:	87 81       	ldd	r24, Z+7	; 0x07
    6422:	28 2b       	or	r18, r24
    6424:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    6426:	60 93 90 23 	sts	0x2390, r22	; 0x802390 <InterruptFuncTable+0xde>
    642a:	70 93 91 23 	sts	0x2391, r23	; 0x802391 <InterruptFuncTable+0xdf>
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    642e:	40 93 86 24 	sts	0x2486, r20	; 0x802486 <InterruptSenderTable+0xde>
    6432:	50 93 87 24 	sts	0x2487, r21	; 0x802487 <InterruptSenderTable+0xdf>
    6436:	08 95       	ret

00006438 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    6438:	61 15       	cp	r22, r1
    643a:	71 05       	cpc	r23, r1
    643c:	29 f0       	breq	.+10     	; 0x6448 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    643e:	e0 e0       	ldi	r30, 0x00	; 0
    6440:	fb e0       	ldi	r31, 0x0B	; 11
    6442:	87 81       	ldd	r24, Z+7	; 0x07
    6444:	28 2b       	or	r18, r24
    6446:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    6448:	60 93 92 23 	sts	0x2392, r22	; 0x802392 <InterruptFuncTable+0xe0>
    644c:	70 93 93 23 	sts	0x2393, r23	; 0x802393 <InterruptFuncTable+0xe1>
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    6450:	40 93 88 24 	sts	0x2488, r20	; 0x802488 <InterruptSenderTable+0xe0>
    6454:	50 93 89 24 	sts	0x2489, r21	; 0x802489 <InterruptSenderTable+0xe1>
    6458:	08 95       	ret

0000645a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    645a:	61 15       	cp	r22, r1
    645c:	71 05       	cpc	r23, r1
    645e:	29 f0       	breq	.+10     	; 0x646a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    6460:	e0 e0       	ldi	r30, 0x00	; 0
    6462:	fb e0       	ldi	r31, 0x0B	; 11
    6464:	87 81       	ldd	r24, Z+7	; 0x07
    6466:	28 2b       	or	r18, r24
    6468:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    646a:	60 93 94 23 	sts	0x2394, r22	; 0x802394 <InterruptFuncTable+0xe2>
    646e:	70 93 95 23 	sts	0x2395, r23	; 0x802395 <InterruptFuncTable+0xe3>
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    6472:	40 93 8a 24 	sts	0x248A, r20	; 0x80248a <InterruptSenderTable+0xe2>
    6476:	50 93 8b 24 	sts	0x248B, r21	; 0x80248b <InterruptSenderTable+0xe3>
    647a:	08 95       	ret

0000647c <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    647c:	cf 93       	push	r28
    647e:	df 93       	push	r29
    6480:	ec 01       	movw	r28, r24
    6482:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN6CTimerC1Ev>
    6486:	8c e8       	ldi	r24, 0x8C	; 140
    6488:	92 e2       	ldi	r25, 0x22	; 34
    648a:	88 83       	st	Y, r24
    648c:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	08 95       	ret

00006494 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    6494:	2c e8       	ldi	r18, 0x8C	; 140
    6496:	32 e2       	ldi	r19, 0x22	; 34
    6498:	fc 01       	movw	r30, r24
    649a:	20 83       	st	Z, r18
    649c:	31 83       	std	Z+1, r19	; 0x01
    649e:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN6CTimerD1Ev>
    64a2:	08 95       	ret

000064a4 <__fixsfsi>:
    64a4:	0e 94 59 32 	call	0x64b2	; 0x64b2 <__fixunssfsi>
    64a8:	68 94       	set
    64aa:	b1 11       	cpse	r27, r1
    64ac:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <__fp_szero>
    64b0:	08 95       	ret

000064b2 <__fixunssfsi>:
    64b2:	0e 94 cd 32 	call	0x659a	; 0x659a <__fp_splitA>
    64b6:	88 f0       	brcs	.+34     	; 0x64da <__fixunssfsi+0x28>
    64b8:	9f 57       	subi	r25, 0x7F	; 127
    64ba:	98 f0       	brcs	.+38     	; 0x64e2 <__fixunssfsi+0x30>
    64bc:	b9 2f       	mov	r27, r25
    64be:	99 27       	eor	r25, r25
    64c0:	b7 51       	subi	r27, 0x17	; 23
    64c2:	b0 f0       	brcs	.+44     	; 0x64f0 <__fixunssfsi+0x3e>
    64c4:	e1 f0       	breq	.+56     	; 0x64fe <__fixunssfsi+0x4c>
    64c6:	66 0f       	add	r22, r22
    64c8:	77 1f       	adc	r23, r23
    64ca:	88 1f       	adc	r24, r24
    64cc:	99 1f       	adc	r25, r25
    64ce:	1a f0       	brmi	.+6      	; 0x64d6 <__fixunssfsi+0x24>
    64d0:	ba 95       	dec	r27
    64d2:	c9 f7       	brne	.-14     	; 0x64c6 <__fixunssfsi+0x14>
    64d4:	14 c0       	rjmp	.+40     	; 0x64fe <__fixunssfsi+0x4c>
    64d6:	b1 30       	cpi	r27, 0x01	; 1
    64d8:	91 f0       	breq	.+36     	; 0x64fe <__fixunssfsi+0x4c>
    64da:	0e 94 e7 32 	call	0x65ce	; 0x65ce <__fp_zero>
    64de:	b1 e0       	ldi	r27, 0x01	; 1
    64e0:	08 95       	ret
    64e2:	0c 94 e7 32 	jmp	0x65ce	; 0x65ce <__fp_zero>
    64e6:	67 2f       	mov	r22, r23
    64e8:	78 2f       	mov	r23, r24
    64ea:	88 27       	eor	r24, r24
    64ec:	b8 5f       	subi	r27, 0xF8	; 248
    64ee:	39 f0       	breq	.+14     	; 0x64fe <__fixunssfsi+0x4c>
    64f0:	b9 3f       	cpi	r27, 0xF9	; 249
    64f2:	cc f3       	brlt	.-14     	; 0x64e6 <__fixunssfsi+0x34>
    64f4:	86 95       	lsr	r24
    64f6:	77 95       	ror	r23
    64f8:	67 95       	ror	r22
    64fa:	b3 95       	inc	r27
    64fc:	d9 f7       	brne	.-10     	; 0x64f4 <__fixunssfsi+0x42>
    64fe:	3e f4       	brtc	.+14     	; 0x650e <__fixunssfsi+0x5c>
    6500:	90 95       	com	r25
    6502:	80 95       	com	r24
    6504:	70 95       	com	r23
    6506:	61 95       	neg	r22
    6508:	7f 4f       	sbci	r23, 0xFF	; 255
    650a:	8f 4f       	sbci	r24, 0xFF	; 255
    650c:	9f 4f       	sbci	r25, 0xFF	; 255
    650e:	08 95       	ret

00006510 <__floatunsisf>:
    6510:	e8 94       	clt
    6512:	09 c0       	rjmp	.+18     	; 0x6526 <__floatsisf+0x12>

00006514 <__floatsisf>:
    6514:	97 fb       	bst	r25, 7
    6516:	3e f4       	brtc	.+14     	; 0x6526 <__floatsisf+0x12>
    6518:	90 95       	com	r25
    651a:	80 95       	com	r24
    651c:	70 95       	com	r23
    651e:	61 95       	neg	r22
    6520:	7f 4f       	sbci	r23, 0xFF	; 255
    6522:	8f 4f       	sbci	r24, 0xFF	; 255
    6524:	9f 4f       	sbci	r25, 0xFF	; 255
    6526:	99 23       	and	r25, r25
    6528:	a9 f0       	breq	.+42     	; 0x6554 <__floatsisf+0x40>
    652a:	f9 2f       	mov	r31, r25
    652c:	96 e9       	ldi	r25, 0x96	; 150
    652e:	bb 27       	eor	r27, r27
    6530:	93 95       	inc	r25
    6532:	f6 95       	lsr	r31
    6534:	87 95       	ror	r24
    6536:	77 95       	ror	r23
    6538:	67 95       	ror	r22
    653a:	b7 95       	ror	r27
    653c:	f1 11       	cpse	r31, r1
    653e:	f8 cf       	rjmp	.-16     	; 0x6530 <__floatsisf+0x1c>
    6540:	fa f4       	brpl	.+62     	; 0x6580 <__floatsisf+0x6c>
    6542:	bb 0f       	add	r27, r27
    6544:	11 f4       	brne	.+4      	; 0x654a <__floatsisf+0x36>
    6546:	60 ff       	sbrs	r22, 0
    6548:	1b c0       	rjmp	.+54     	; 0x6580 <__floatsisf+0x6c>
    654a:	6f 5f       	subi	r22, 0xFF	; 255
    654c:	7f 4f       	sbci	r23, 0xFF	; 255
    654e:	8f 4f       	sbci	r24, 0xFF	; 255
    6550:	9f 4f       	sbci	r25, 0xFF	; 255
    6552:	16 c0       	rjmp	.+44     	; 0x6580 <__floatsisf+0x6c>
    6554:	88 23       	and	r24, r24
    6556:	11 f0       	breq	.+4      	; 0x655c <__floatsisf+0x48>
    6558:	96 e9       	ldi	r25, 0x96	; 150
    655a:	11 c0       	rjmp	.+34     	; 0x657e <__floatsisf+0x6a>
    655c:	77 23       	and	r23, r23
    655e:	21 f0       	breq	.+8      	; 0x6568 <__floatsisf+0x54>
    6560:	9e e8       	ldi	r25, 0x8E	; 142
    6562:	87 2f       	mov	r24, r23
    6564:	76 2f       	mov	r23, r22
    6566:	05 c0       	rjmp	.+10     	; 0x6572 <__floatsisf+0x5e>
    6568:	66 23       	and	r22, r22
    656a:	71 f0       	breq	.+28     	; 0x6588 <__floatsisf+0x74>
    656c:	96 e8       	ldi	r25, 0x86	; 134
    656e:	86 2f       	mov	r24, r22
    6570:	70 e0       	ldi	r23, 0x00	; 0
    6572:	60 e0       	ldi	r22, 0x00	; 0
    6574:	2a f0       	brmi	.+10     	; 0x6580 <__floatsisf+0x6c>
    6576:	9a 95       	dec	r25
    6578:	66 0f       	add	r22, r22
    657a:	77 1f       	adc	r23, r23
    657c:	88 1f       	adc	r24, r24
    657e:	da f7       	brpl	.-10     	; 0x6576 <__floatsisf+0x62>
    6580:	88 0f       	add	r24, r24
    6582:	96 95       	lsr	r25
    6584:	87 95       	ror	r24
    6586:	97 f9       	bld	r25, 7
    6588:	08 95       	ret

0000658a <__fp_split3>:
    658a:	57 fd       	sbrc	r21, 7
    658c:	90 58       	subi	r25, 0x80	; 128
    658e:	44 0f       	add	r20, r20
    6590:	55 1f       	adc	r21, r21
    6592:	59 f0       	breq	.+22     	; 0x65aa <__fp_splitA+0x10>
    6594:	5f 3f       	cpi	r21, 0xFF	; 255
    6596:	71 f0       	breq	.+28     	; 0x65b4 <__fp_splitA+0x1a>
    6598:	47 95       	ror	r20

0000659a <__fp_splitA>:
    659a:	88 0f       	add	r24, r24
    659c:	97 fb       	bst	r25, 7
    659e:	99 1f       	adc	r25, r25
    65a0:	61 f0       	breq	.+24     	; 0x65ba <__fp_splitA+0x20>
    65a2:	9f 3f       	cpi	r25, 0xFF	; 255
    65a4:	79 f0       	breq	.+30     	; 0x65c4 <__fp_splitA+0x2a>
    65a6:	87 95       	ror	r24
    65a8:	08 95       	ret
    65aa:	12 16       	cp	r1, r18
    65ac:	13 06       	cpc	r1, r19
    65ae:	14 06       	cpc	r1, r20
    65b0:	55 1f       	adc	r21, r21
    65b2:	f2 cf       	rjmp	.-28     	; 0x6598 <__fp_split3+0xe>
    65b4:	46 95       	lsr	r20
    65b6:	f1 df       	rcall	.-30     	; 0x659a <__fp_splitA>
    65b8:	08 c0       	rjmp	.+16     	; 0x65ca <__fp_splitA+0x30>
    65ba:	16 16       	cp	r1, r22
    65bc:	17 06       	cpc	r1, r23
    65be:	18 06       	cpc	r1, r24
    65c0:	99 1f       	adc	r25, r25
    65c2:	f1 cf       	rjmp	.-30     	; 0x65a6 <__fp_splitA+0xc>
    65c4:	86 95       	lsr	r24
    65c6:	71 05       	cpc	r23, r1
    65c8:	61 05       	cpc	r22, r1
    65ca:	08 94       	sec
    65cc:	08 95       	ret

000065ce <__fp_zero>:
    65ce:	e8 94       	clt

000065d0 <__fp_szero>:
    65d0:	bb 27       	eor	r27, r27
    65d2:	66 27       	eor	r22, r22
    65d4:	77 27       	eor	r23, r23
    65d6:	cb 01       	movw	r24, r22
    65d8:	97 f9       	bld	r25, 7
    65da:	08 95       	ret

000065dc <__mulsf3>:
    65dc:	0e 94 01 33 	call	0x6602	; 0x6602 <__mulsf3x>
    65e0:	0c 94 72 33 	jmp	0x66e4	; 0x66e4 <__fp_round>
    65e4:	0e 94 64 33 	call	0x66c8	; 0x66c8 <__fp_pscA>
    65e8:	38 f0       	brcs	.+14     	; 0x65f8 <__mulsf3+0x1c>
    65ea:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <__fp_pscB>
    65ee:	20 f0       	brcs	.+8      	; 0x65f8 <__mulsf3+0x1c>
    65f0:	95 23       	and	r25, r21
    65f2:	11 f0       	breq	.+4      	; 0x65f8 <__mulsf3+0x1c>
    65f4:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <__fp_inf>
    65f8:	0c 94 61 33 	jmp	0x66c2	; 0x66c2 <__fp_nan>
    65fc:	11 24       	eor	r1, r1
    65fe:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <__fp_szero>

00006602 <__mulsf3x>:
    6602:	0e 94 c5 32 	call	0x658a	; 0x658a <__fp_split3>
    6606:	70 f3       	brcs	.-36     	; 0x65e4 <__mulsf3+0x8>

00006608 <__mulsf3_pse>:
    6608:	95 9f       	mul	r25, r21
    660a:	c1 f3       	breq	.-16     	; 0x65fc <__mulsf3+0x20>
    660c:	95 0f       	add	r25, r21
    660e:	50 e0       	ldi	r21, 0x00	; 0
    6610:	55 1f       	adc	r21, r21
    6612:	62 9f       	mul	r22, r18
    6614:	f0 01       	movw	r30, r0
    6616:	72 9f       	mul	r23, r18
    6618:	bb 27       	eor	r27, r27
    661a:	f0 0d       	add	r31, r0
    661c:	b1 1d       	adc	r27, r1
    661e:	63 9f       	mul	r22, r19
    6620:	aa 27       	eor	r26, r26
    6622:	f0 0d       	add	r31, r0
    6624:	b1 1d       	adc	r27, r1
    6626:	aa 1f       	adc	r26, r26
    6628:	64 9f       	mul	r22, r20
    662a:	66 27       	eor	r22, r22
    662c:	b0 0d       	add	r27, r0
    662e:	a1 1d       	adc	r26, r1
    6630:	66 1f       	adc	r22, r22
    6632:	82 9f       	mul	r24, r18
    6634:	22 27       	eor	r18, r18
    6636:	b0 0d       	add	r27, r0
    6638:	a1 1d       	adc	r26, r1
    663a:	62 1f       	adc	r22, r18
    663c:	73 9f       	mul	r23, r19
    663e:	b0 0d       	add	r27, r0
    6640:	a1 1d       	adc	r26, r1
    6642:	62 1f       	adc	r22, r18
    6644:	83 9f       	mul	r24, r19
    6646:	a0 0d       	add	r26, r0
    6648:	61 1d       	adc	r22, r1
    664a:	22 1f       	adc	r18, r18
    664c:	74 9f       	mul	r23, r20
    664e:	33 27       	eor	r19, r19
    6650:	a0 0d       	add	r26, r0
    6652:	61 1d       	adc	r22, r1
    6654:	23 1f       	adc	r18, r19
    6656:	84 9f       	mul	r24, r20
    6658:	60 0d       	add	r22, r0
    665a:	21 1d       	adc	r18, r1
    665c:	82 2f       	mov	r24, r18
    665e:	76 2f       	mov	r23, r22
    6660:	6a 2f       	mov	r22, r26
    6662:	11 24       	eor	r1, r1
    6664:	9f 57       	subi	r25, 0x7F	; 127
    6666:	50 40       	sbci	r21, 0x00	; 0
    6668:	9a f0       	brmi	.+38     	; 0x6690 <__mulsf3_pse+0x88>
    666a:	f1 f0       	breq	.+60     	; 0x66a8 <__mulsf3_pse+0xa0>
    666c:	88 23       	and	r24, r24
    666e:	4a f0       	brmi	.+18     	; 0x6682 <__mulsf3_pse+0x7a>
    6670:	ee 0f       	add	r30, r30
    6672:	ff 1f       	adc	r31, r31
    6674:	bb 1f       	adc	r27, r27
    6676:	66 1f       	adc	r22, r22
    6678:	77 1f       	adc	r23, r23
    667a:	88 1f       	adc	r24, r24
    667c:	91 50       	subi	r25, 0x01	; 1
    667e:	50 40       	sbci	r21, 0x00	; 0
    6680:	a9 f7       	brne	.-22     	; 0x666c <__mulsf3_pse+0x64>
    6682:	9e 3f       	cpi	r25, 0xFE	; 254
    6684:	51 05       	cpc	r21, r1
    6686:	80 f0       	brcs	.+32     	; 0x66a8 <__mulsf3_pse+0xa0>
    6688:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <__fp_inf>
    668c:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <__fp_szero>
    6690:	5f 3f       	cpi	r21, 0xFF	; 255
    6692:	e4 f3       	brlt	.-8      	; 0x668c <__mulsf3_pse+0x84>
    6694:	98 3e       	cpi	r25, 0xE8	; 232
    6696:	d4 f3       	brlt	.-12     	; 0x668c <__mulsf3_pse+0x84>
    6698:	86 95       	lsr	r24
    669a:	77 95       	ror	r23
    669c:	67 95       	ror	r22
    669e:	b7 95       	ror	r27
    66a0:	f7 95       	ror	r31
    66a2:	e7 95       	ror	r30
    66a4:	9f 5f       	subi	r25, 0xFF	; 255
    66a6:	c1 f7       	brne	.-16     	; 0x6698 <__mulsf3_pse+0x90>
    66a8:	fe 2b       	or	r31, r30
    66aa:	88 0f       	add	r24, r24
    66ac:	91 1d       	adc	r25, r1
    66ae:	96 95       	lsr	r25
    66b0:	87 95       	ror	r24
    66b2:	97 f9       	bld	r25, 7
    66b4:	08 95       	ret

000066b6 <__fp_inf>:
    66b6:	97 f9       	bld	r25, 7
    66b8:	9f 67       	ori	r25, 0x7F	; 127
    66ba:	80 e8       	ldi	r24, 0x80	; 128
    66bc:	70 e0       	ldi	r23, 0x00	; 0
    66be:	60 e0       	ldi	r22, 0x00	; 0
    66c0:	08 95       	ret

000066c2 <__fp_nan>:
    66c2:	9f ef       	ldi	r25, 0xFF	; 255
    66c4:	80 ec       	ldi	r24, 0xC0	; 192
    66c6:	08 95       	ret

000066c8 <__fp_pscA>:
    66c8:	00 24       	eor	r0, r0
    66ca:	0a 94       	dec	r0
    66cc:	16 16       	cp	r1, r22
    66ce:	17 06       	cpc	r1, r23
    66d0:	18 06       	cpc	r1, r24
    66d2:	09 06       	cpc	r0, r25
    66d4:	08 95       	ret

000066d6 <__fp_pscB>:
    66d6:	00 24       	eor	r0, r0
    66d8:	0a 94       	dec	r0
    66da:	12 16       	cp	r1, r18
    66dc:	13 06       	cpc	r1, r19
    66de:	14 06       	cpc	r1, r20
    66e0:	05 06       	cpc	r0, r21
    66e2:	08 95       	ret

000066e4 <__fp_round>:
    66e4:	09 2e       	mov	r0, r25
    66e6:	03 94       	inc	r0
    66e8:	00 0c       	add	r0, r0
    66ea:	11 f4       	brne	.+4      	; 0x66f0 <__fp_round+0xc>
    66ec:	88 23       	and	r24, r24
    66ee:	52 f0       	brmi	.+20     	; 0x6704 <__fp_round+0x20>
    66f0:	bb 0f       	add	r27, r27
    66f2:	40 f4       	brcc	.+16     	; 0x6704 <__fp_round+0x20>
    66f4:	bf 2b       	or	r27, r31
    66f6:	11 f4       	brne	.+4      	; 0x66fc <__fp_round+0x18>
    66f8:	60 ff       	sbrs	r22, 0
    66fa:	04 c0       	rjmp	.+8      	; 0x6704 <__fp_round+0x20>
    66fc:	6f 5f       	subi	r22, 0xFF	; 255
    66fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6700:	8f 4f       	sbci	r24, 0xFF	; 255
    6702:	9f 4f       	sbci	r25, 0xFF	; 255
    6704:	08 95       	ret

00006706 <__mulsi3>:
    6706:	db 01       	movw	r26, r22
    6708:	8f 93       	push	r24
    670a:	9f 93       	push	r25
    670c:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    6710:	bf 91       	pop	r27
    6712:	af 91       	pop	r26
    6714:	a2 9f       	mul	r26, r18
    6716:	80 0d       	add	r24, r0
    6718:	91 1d       	adc	r25, r1
    671a:	a3 9f       	mul	r26, r19
    671c:	90 0d       	add	r25, r0
    671e:	b2 9f       	mul	r27, r18
    6720:	90 0d       	add	r25, r0
    6722:	11 24       	eor	r1, r1
    6724:	08 95       	ret

00006726 <__udivmodhi4>:
    6726:	aa 1b       	sub	r26, r26
    6728:	bb 1b       	sub	r27, r27
    672a:	51 e1       	ldi	r21, 0x11	; 17
    672c:	07 c0       	rjmp	.+14     	; 0x673c <__udivmodhi4_ep>

0000672e <__udivmodhi4_loop>:
    672e:	aa 1f       	adc	r26, r26
    6730:	bb 1f       	adc	r27, r27
    6732:	a6 17       	cp	r26, r22
    6734:	b7 07       	cpc	r27, r23
    6736:	10 f0       	brcs	.+4      	; 0x673c <__udivmodhi4_ep>
    6738:	a6 1b       	sub	r26, r22
    673a:	b7 0b       	sbc	r27, r23

0000673c <__udivmodhi4_ep>:
    673c:	88 1f       	adc	r24, r24
    673e:	99 1f       	adc	r25, r25
    6740:	5a 95       	dec	r21
    6742:	a9 f7       	brne	.-22     	; 0x672e <__udivmodhi4_loop>
    6744:	80 95       	com	r24
    6746:	90 95       	com	r25
    6748:	bc 01       	movw	r22, r24
    674a:	cd 01       	movw	r24, r26
    674c:	08 95       	ret

0000674e <__divmodhi4>:
    674e:	97 fb       	bst	r25, 7
    6750:	07 2e       	mov	r0, r23
    6752:	16 f4       	brtc	.+4      	; 0x6758 <__divmodhi4+0xa>
    6754:	00 94       	com	r0
    6756:	07 d0       	rcall	.+14     	; 0x6766 <__divmodhi4_neg1>
    6758:	77 fd       	sbrc	r23, 7
    675a:	09 d0       	rcall	.+18     	; 0x676e <__divmodhi4_neg2>
    675c:	0e 94 93 33 	call	0x6726	; 0x6726 <__udivmodhi4>
    6760:	07 fc       	sbrc	r0, 7
    6762:	05 d0       	rcall	.+10     	; 0x676e <__divmodhi4_neg2>
    6764:	3e f4       	brtc	.+14     	; 0x6774 <__divmodhi4_exit>

00006766 <__divmodhi4_neg1>:
    6766:	90 95       	com	r25
    6768:	81 95       	neg	r24
    676a:	9f 4f       	sbci	r25, 0xFF	; 255
    676c:	08 95       	ret

0000676e <__divmodhi4_neg2>:
    676e:	70 95       	com	r23
    6770:	61 95       	neg	r22
    6772:	7f 4f       	sbci	r23, 0xFF	; 255

00006774 <__divmodhi4_exit>:
    6774:	08 95       	ret

00006776 <__udivmodsi4>:
    6776:	a1 e2       	ldi	r26, 0x21	; 33
    6778:	1a 2e       	mov	r1, r26
    677a:	aa 1b       	sub	r26, r26
    677c:	bb 1b       	sub	r27, r27
    677e:	fd 01       	movw	r30, r26
    6780:	0d c0       	rjmp	.+26     	; 0x679c <__udivmodsi4_ep>

00006782 <__udivmodsi4_loop>:
    6782:	aa 1f       	adc	r26, r26
    6784:	bb 1f       	adc	r27, r27
    6786:	ee 1f       	adc	r30, r30
    6788:	ff 1f       	adc	r31, r31
    678a:	a2 17       	cp	r26, r18
    678c:	b3 07       	cpc	r27, r19
    678e:	e4 07       	cpc	r30, r20
    6790:	f5 07       	cpc	r31, r21
    6792:	20 f0       	brcs	.+8      	; 0x679c <__udivmodsi4_ep>
    6794:	a2 1b       	sub	r26, r18
    6796:	b3 0b       	sbc	r27, r19
    6798:	e4 0b       	sbc	r30, r20
    679a:	f5 0b       	sbc	r31, r21

0000679c <__udivmodsi4_ep>:
    679c:	66 1f       	adc	r22, r22
    679e:	77 1f       	adc	r23, r23
    67a0:	88 1f       	adc	r24, r24
    67a2:	99 1f       	adc	r25, r25
    67a4:	1a 94       	dec	r1
    67a6:	69 f7       	brne	.-38     	; 0x6782 <__udivmodsi4_loop>
    67a8:	60 95       	com	r22
    67aa:	70 95       	com	r23
    67ac:	80 95       	com	r24
    67ae:	90 95       	com	r25
    67b0:	9b 01       	movw	r18, r22
    67b2:	ac 01       	movw	r20, r24
    67b4:	bd 01       	movw	r22, r26
    67b6:	cf 01       	movw	r24, r30
    67b8:	08 95       	ret

000067ba <__divmodsi4>:
    67ba:	05 2e       	mov	r0, r21
    67bc:	97 fb       	bst	r25, 7
    67be:	1e f4       	brtc	.+6      	; 0x67c6 <__divmodsi4+0xc>
    67c0:	00 94       	com	r0
    67c2:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <__negsi2>
    67c6:	57 fd       	sbrc	r21, 7
    67c8:	07 d0       	rcall	.+14     	; 0x67d8 <__divmodsi4_neg2>
    67ca:	0e 94 bb 33 	call	0x6776	; 0x6776 <__udivmodsi4>
    67ce:	07 fc       	sbrc	r0, 7
    67d0:	03 d0       	rcall	.+6      	; 0x67d8 <__divmodsi4_neg2>
    67d2:	4e f4       	brtc	.+18     	; 0x67e6 <__divmodsi4_exit>
    67d4:	0c 94 f4 33 	jmp	0x67e8	; 0x67e8 <__negsi2>

000067d8 <__divmodsi4_neg2>:
    67d8:	50 95       	com	r21
    67da:	40 95       	com	r20
    67dc:	30 95       	com	r19
    67de:	21 95       	neg	r18
    67e0:	3f 4f       	sbci	r19, 0xFF	; 255
    67e2:	4f 4f       	sbci	r20, 0xFF	; 255
    67e4:	5f 4f       	sbci	r21, 0xFF	; 255

000067e6 <__divmodsi4_exit>:
    67e6:	08 95       	ret

000067e8 <__negsi2>:
    67e8:	90 95       	com	r25
    67ea:	80 95       	com	r24
    67ec:	70 95       	com	r23
    67ee:	61 95       	neg	r22
    67f0:	7f 4f       	sbci	r23, 0xFF	; 255
    67f2:	8f 4f       	sbci	r24, 0xFF	; 255
    67f4:	9f 4f       	sbci	r25, 0xFF	; 255
    67f6:	08 95       	ret

000067f8 <__tablejump2__>:
    67f8:	ee 0f       	add	r30, r30
    67fa:	ff 1f       	adc	r31, r31
    67fc:	88 1f       	adc	r24, r24
    67fe:	8b bf       	out	0x3b, r24	; 59
    6800:	07 90       	elpm	r0, Z+
    6802:	f6 91       	elpm	r31, Z
    6804:	e0 2d       	mov	r30, r0
    6806:	19 94       	eijmp

00006808 <__umulhisi3>:
    6808:	a2 9f       	mul	r26, r18
    680a:	b0 01       	movw	r22, r0
    680c:	b3 9f       	mul	r27, r19
    680e:	c0 01       	movw	r24, r0
    6810:	a3 9f       	mul	r26, r19
    6812:	70 0d       	add	r23, r0
    6814:	81 1d       	adc	r24, r1
    6816:	11 24       	eor	r1, r1
    6818:	91 1d       	adc	r25, r1
    681a:	b2 9f       	mul	r27, r18
    681c:	70 0d       	add	r23, r0
    681e:	81 1d       	adc	r24, r1
    6820:	11 24       	eor	r1, r1
    6822:	91 1d       	adc	r25, r1
    6824:	08 95       	ret

00006826 <__muluhisi3>:
    6826:	0e 94 04 34 	call	0x6808	; 0x6808 <__umulhisi3>
    682a:	a5 9f       	mul	r26, r21
    682c:	90 0d       	add	r25, r0
    682e:	b4 9f       	mul	r27, r20
    6830:	90 0d       	add	r25, r0
    6832:	a4 9f       	mul	r26, r20
    6834:	80 0d       	add	r24, r0
    6836:	91 1d       	adc	r25, r1
    6838:	11 24       	eor	r1, r1
    683a:	08 95       	ret

0000683c <malloc>:
    683c:	cf 93       	push	r28
    683e:	df 93       	push	r29
    6840:	82 30       	cpi	r24, 0x02	; 2
    6842:	91 05       	cpc	r25, r1
    6844:	10 f4       	brcc	.+4      	; 0x684a <malloc+0xe>
    6846:	82 e0       	ldi	r24, 0x02	; 2
    6848:	90 e0       	ldi	r25, 0x00	; 0
    684a:	e0 91 6f 25 	lds	r30, 0x256F	; 0x80256f <__flp>
    684e:	f0 91 70 25 	lds	r31, 0x2570	; 0x802570 <__flp+0x1>
    6852:	20 e0       	ldi	r18, 0x00	; 0
    6854:	30 e0       	ldi	r19, 0x00	; 0
    6856:	c0 e0       	ldi	r28, 0x00	; 0
    6858:	d0 e0       	ldi	r29, 0x00	; 0
    685a:	30 97       	sbiw	r30, 0x00	; 0
    685c:	11 f1       	breq	.+68     	; 0x68a2 <malloc+0x66>
    685e:	40 81       	ld	r20, Z
    6860:	51 81       	ldd	r21, Z+1	; 0x01
    6862:	48 17       	cp	r20, r24
    6864:	59 07       	cpc	r21, r25
    6866:	c0 f0       	brcs	.+48     	; 0x6898 <malloc+0x5c>
    6868:	48 17       	cp	r20, r24
    686a:	59 07       	cpc	r21, r25
    686c:	61 f4       	brne	.+24     	; 0x6886 <malloc+0x4a>
    686e:	82 81       	ldd	r24, Z+2	; 0x02
    6870:	93 81       	ldd	r25, Z+3	; 0x03
    6872:	20 97       	sbiw	r28, 0x00	; 0
    6874:	19 f0       	breq	.+6      	; 0x687c <malloc+0x40>
    6876:	8a 83       	std	Y+2, r24	; 0x02
    6878:	9b 83       	std	Y+3, r25	; 0x03
    687a:	2b c0       	rjmp	.+86     	; 0x68d2 <malloc+0x96>
    687c:	80 93 6f 25 	sts	0x256F, r24	; 0x80256f <__flp>
    6880:	90 93 70 25 	sts	0x2570, r25	; 0x802570 <__flp+0x1>
    6884:	26 c0       	rjmp	.+76     	; 0x68d2 <malloc+0x96>
    6886:	21 15       	cp	r18, r1
    6888:	31 05       	cpc	r19, r1
    688a:	19 f0       	breq	.+6      	; 0x6892 <malloc+0x56>
    688c:	42 17       	cp	r20, r18
    688e:	53 07       	cpc	r21, r19
    6890:	18 f4       	brcc	.+6      	; 0x6898 <malloc+0x5c>
    6892:	9a 01       	movw	r18, r20
    6894:	be 01       	movw	r22, r28
    6896:	df 01       	movw	r26, r30
    6898:	ef 01       	movw	r28, r30
    689a:	02 80       	ldd	r0, Z+2	; 0x02
    689c:	f3 81       	ldd	r31, Z+3	; 0x03
    689e:	e0 2d       	mov	r30, r0
    68a0:	dc cf       	rjmp	.-72     	; 0x685a <malloc+0x1e>
    68a2:	21 15       	cp	r18, r1
    68a4:	31 05       	cpc	r19, r1
    68a6:	09 f1       	breq	.+66     	; 0x68ea <malloc+0xae>
    68a8:	28 1b       	sub	r18, r24
    68aa:	39 0b       	sbc	r19, r25
    68ac:	24 30       	cpi	r18, 0x04	; 4
    68ae:	31 05       	cpc	r19, r1
    68b0:	90 f4       	brcc	.+36     	; 0x68d6 <malloc+0x9a>
    68b2:	12 96       	adiw	r26, 0x02	; 2
    68b4:	8d 91       	ld	r24, X+
    68b6:	9c 91       	ld	r25, X
    68b8:	13 97       	sbiw	r26, 0x03	; 3
    68ba:	61 15       	cp	r22, r1
    68bc:	71 05       	cpc	r23, r1
    68be:	21 f0       	breq	.+8      	; 0x68c8 <malloc+0x8c>
    68c0:	fb 01       	movw	r30, r22
    68c2:	82 83       	std	Z+2, r24	; 0x02
    68c4:	93 83       	std	Z+3, r25	; 0x03
    68c6:	04 c0       	rjmp	.+8      	; 0x68d0 <malloc+0x94>
    68c8:	80 93 6f 25 	sts	0x256F, r24	; 0x80256f <__flp>
    68cc:	90 93 70 25 	sts	0x2570, r25	; 0x802570 <__flp+0x1>
    68d0:	fd 01       	movw	r30, r26
    68d2:	32 96       	adiw	r30, 0x02	; 2
    68d4:	44 c0       	rjmp	.+136    	; 0x695e <malloc+0x122>
    68d6:	fd 01       	movw	r30, r26
    68d8:	e2 0f       	add	r30, r18
    68da:	f3 1f       	adc	r31, r19
    68dc:	81 93       	st	Z+, r24
    68de:	91 93       	st	Z+, r25
    68e0:	22 50       	subi	r18, 0x02	; 2
    68e2:	31 09       	sbc	r19, r1
    68e4:	2d 93       	st	X+, r18
    68e6:	3c 93       	st	X, r19
    68e8:	3a c0       	rjmp	.+116    	; 0x695e <malloc+0x122>
    68ea:	20 91 6d 25 	lds	r18, 0x256D	; 0x80256d <__brkval>
    68ee:	30 91 6e 25 	lds	r19, 0x256E	; 0x80256e <__brkval+0x1>
    68f2:	23 2b       	or	r18, r19
    68f4:	41 f4       	brne	.+16     	; 0x6906 <malloc+0xca>
    68f6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    68fa:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    68fe:	20 93 6d 25 	sts	0x256D, r18	; 0x80256d <__brkval>
    6902:	30 93 6e 25 	sts	0x256E, r19	; 0x80256e <__brkval+0x1>
    6906:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    690a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    690e:	21 15       	cp	r18, r1
    6910:	31 05       	cpc	r19, r1
    6912:	41 f4       	brne	.+16     	; 0x6924 <malloc+0xe8>
    6914:	2d b7       	in	r18, 0x3d	; 61
    6916:	3e b7       	in	r19, 0x3e	; 62
    6918:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    691c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6920:	24 1b       	sub	r18, r20
    6922:	35 0b       	sbc	r19, r21
    6924:	e0 91 6d 25 	lds	r30, 0x256D	; 0x80256d <__brkval>
    6928:	f0 91 6e 25 	lds	r31, 0x256E	; 0x80256e <__brkval+0x1>
    692c:	e2 17       	cp	r30, r18
    692e:	f3 07       	cpc	r31, r19
    6930:	a0 f4       	brcc	.+40     	; 0x695a <malloc+0x11e>
    6932:	2e 1b       	sub	r18, r30
    6934:	3f 0b       	sbc	r19, r31
    6936:	28 17       	cp	r18, r24
    6938:	39 07       	cpc	r19, r25
    693a:	78 f0       	brcs	.+30     	; 0x695a <malloc+0x11e>
    693c:	ac 01       	movw	r20, r24
    693e:	4e 5f       	subi	r20, 0xFE	; 254
    6940:	5f 4f       	sbci	r21, 0xFF	; 255
    6942:	24 17       	cp	r18, r20
    6944:	35 07       	cpc	r19, r21
    6946:	48 f0       	brcs	.+18     	; 0x695a <malloc+0x11e>
    6948:	4e 0f       	add	r20, r30
    694a:	5f 1f       	adc	r21, r31
    694c:	40 93 6d 25 	sts	0x256D, r20	; 0x80256d <__brkval>
    6950:	50 93 6e 25 	sts	0x256E, r21	; 0x80256e <__brkval+0x1>
    6954:	81 93       	st	Z+, r24
    6956:	91 93       	st	Z+, r25
    6958:	02 c0       	rjmp	.+4      	; 0x695e <malloc+0x122>
    695a:	e0 e0       	ldi	r30, 0x00	; 0
    695c:	f0 e0       	ldi	r31, 0x00	; 0
    695e:	cf 01       	movw	r24, r30
    6960:	df 91       	pop	r29
    6962:	cf 91       	pop	r28
    6964:	08 95       	ret

00006966 <free>:
    6966:	0f 93       	push	r16
    6968:	1f 93       	push	r17
    696a:	cf 93       	push	r28
    696c:	df 93       	push	r29
    696e:	00 97       	sbiw	r24, 0x00	; 0
    6970:	09 f4       	brne	.+2      	; 0x6974 <free+0xe>
    6972:	8c c0       	rjmp	.+280    	; 0x6a8c <free+0x126>
    6974:	fc 01       	movw	r30, r24
    6976:	32 97       	sbiw	r30, 0x02	; 2
    6978:	12 82       	std	Z+2, r1	; 0x02
    697a:	13 82       	std	Z+3, r1	; 0x03
    697c:	00 91 6f 25 	lds	r16, 0x256F	; 0x80256f <__flp>
    6980:	10 91 70 25 	lds	r17, 0x2570	; 0x802570 <__flp+0x1>
    6984:	01 15       	cp	r16, r1
    6986:	11 05       	cpc	r17, r1
    6988:	81 f4       	brne	.+32     	; 0x69aa <free+0x44>
    698a:	20 81       	ld	r18, Z
    698c:	31 81       	ldd	r19, Z+1	; 0x01
    698e:	82 0f       	add	r24, r18
    6990:	93 1f       	adc	r25, r19
    6992:	20 91 6d 25 	lds	r18, 0x256D	; 0x80256d <__brkval>
    6996:	30 91 6e 25 	lds	r19, 0x256E	; 0x80256e <__brkval+0x1>
    699a:	28 17       	cp	r18, r24
    699c:	39 07       	cpc	r19, r25
    699e:	79 f5       	brne	.+94     	; 0x69fe <free+0x98>
    69a0:	e0 93 6d 25 	sts	0x256D, r30	; 0x80256d <__brkval>
    69a4:	f0 93 6e 25 	sts	0x256E, r31	; 0x80256e <__brkval+0x1>
    69a8:	71 c0       	rjmp	.+226    	; 0x6a8c <free+0x126>
    69aa:	d8 01       	movw	r26, r16
    69ac:	40 e0       	ldi	r20, 0x00	; 0
    69ae:	50 e0       	ldi	r21, 0x00	; 0
    69b0:	ae 17       	cp	r26, r30
    69b2:	bf 07       	cpc	r27, r31
    69b4:	50 f4       	brcc	.+20     	; 0x69ca <free+0x64>
    69b6:	12 96       	adiw	r26, 0x02	; 2
    69b8:	2d 91       	ld	r18, X+
    69ba:	3c 91       	ld	r19, X
    69bc:	13 97       	sbiw	r26, 0x03	; 3
    69be:	ad 01       	movw	r20, r26
    69c0:	21 15       	cp	r18, r1
    69c2:	31 05       	cpc	r19, r1
    69c4:	09 f1       	breq	.+66     	; 0x6a08 <free+0xa2>
    69c6:	d9 01       	movw	r26, r18
    69c8:	f3 cf       	rjmp	.-26     	; 0x69b0 <free+0x4a>
    69ca:	9d 01       	movw	r18, r26
    69cc:	da 01       	movw	r26, r20
    69ce:	22 83       	std	Z+2, r18	; 0x02
    69d0:	33 83       	std	Z+3, r19	; 0x03
    69d2:	60 81       	ld	r22, Z
    69d4:	71 81       	ldd	r23, Z+1	; 0x01
    69d6:	86 0f       	add	r24, r22
    69d8:	97 1f       	adc	r25, r23
    69da:	82 17       	cp	r24, r18
    69dc:	93 07       	cpc	r25, r19
    69de:	69 f4       	brne	.+26     	; 0x69fa <free+0x94>
    69e0:	ec 01       	movw	r28, r24
    69e2:	28 81       	ld	r18, Y
    69e4:	39 81       	ldd	r19, Y+1	; 0x01
    69e6:	26 0f       	add	r18, r22
    69e8:	37 1f       	adc	r19, r23
    69ea:	2e 5f       	subi	r18, 0xFE	; 254
    69ec:	3f 4f       	sbci	r19, 0xFF	; 255
    69ee:	20 83       	st	Z, r18
    69f0:	31 83       	std	Z+1, r19	; 0x01
    69f2:	8a 81       	ldd	r24, Y+2	; 0x02
    69f4:	9b 81       	ldd	r25, Y+3	; 0x03
    69f6:	82 83       	std	Z+2, r24	; 0x02
    69f8:	93 83       	std	Z+3, r25	; 0x03
    69fa:	45 2b       	or	r20, r21
    69fc:	29 f4       	brne	.+10     	; 0x6a08 <free+0xa2>
    69fe:	e0 93 6f 25 	sts	0x256F, r30	; 0x80256f <__flp>
    6a02:	f0 93 70 25 	sts	0x2570, r31	; 0x802570 <__flp+0x1>
    6a06:	42 c0       	rjmp	.+132    	; 0x6a8c <free+0x126>
    6a08:	12 96       	adiw	r26, 0x02	; 2
    6a0a:	ed 93       	st	X+, r30
    6a0c:	fc 93       	st	X, r31
    6a0e:	13 97       	sbiw	r26, 0x03	; 3
    6a10:	ed 01       	movw	r28, r26
    6a12:	49 91       	ld	r20, Y+
    6a14:	59 91       	ld	r21, Y+
    6a16:	9e 01       	movw	r18, r28
    6a18:	24 0f       	add	r18, r20
    6a1a:	35 1f       	adc	r19, r21
    6a1c:	e2 17       	cp	r30, r18
    6a1e:	f3 07       	cpc	r31, r19
    6a20:	71 f4       	brne	.+28     	; 0x6a3e <free+0xd8>
    6a22:	80 81       	ld	r24, Z
    6a24:	91 81       	ldd	r25, Z+1	; 0x01
    6a26:	84 0f       	add	r24, r20
    6a28:	95 1f       	adc	r25, r21
    6a2a:	02 96       	adiw	r24, 0x02	; 2
    6a2c:	8d 93       	st	X+, r24
    6a2e:	9c 93       	st	X, r25
    6a30:	11 97       	sbiw	r26, 0x01	; 1
    6a32:	82 81       	ldd	r24, Z+2	; 0x02
    6a34:	93 81       	ldd	r25, Z+3	; 0x03
    6a36:	12 96       	adiw	r26, 0x02	; 2
    6a38:	8d 93       	st	X+, r24
    6a3a:	9c 93       	st	X, r25
    6a3c:	13 97       	sbiw	r26, 0x03	; 3
    6a3e:	e0 e0       	ldi	r30, 0x00	; 0
    6a40:	f0 e0       	ldi	r31, 0x00	; 0
    6a42:	d8 01       	movw	r26, r16
    6a44:	12 96       	adiw	r26, 0x02	; 2
    6a46:	8d 91       	ld	r24, X+
    6a48:	9c 91       	ld	r25, X
    6a4a:	13 97       	sbiw	r26, 0x03	; 3
    6a4c:	00 97       	sbiw	r24, 0x00	; 0
    6a4e:	19 f0       	breq	.+6      	; 0x6a56 <free+0xf0>
    6a50:	f8 01       	movw	r30, r16
    6a52:	8c 01       	movw	r16, r24
    6a54:	f6 cf       	rjmp	.-20     	; 0x6a42 <free+0xdc>
    6a56:	8d 91       	ld	r24, X+
    6a58:	9c 91       	ld	r25, X
    6a5a:	98 01       	movw	r18, r16
    6a5c:	2e 5f       	subi	r18, 0xFE	; 254
    6a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a60:	82 0f       	add	r24, r18
    6a62:	93 1f       	adc	r25, r19
    6a64:	20 91 6d 25 	lds	r18, 0x256D	; 0x80256d <__brkval>
    6a68:	30 91 6e 25 	lds	r19, 0x256E	; 0x80256e <__brkval+0x1>
    6a6c:	28 17       	cp	r18, r24
    6a6e:	39 07       	cpc	r19, r25
    6a70:	69 f4       	brne	.+26     	; 0x6a8c <free+0x126>
    6a72:	30 97       	sbiw	r30, 0x00	; 0
    6a74:	29 f4       	brne	.+10     	; 0x6a80 <free+0x11a>
    6a76:	10 92 6f 25 	sts	0x256F, r1	; 0x80256f <__flp>
    6a7a:	10 92 70 25 	sts	0x2570, r1	; 0x802570 <__flp+0x1>
    6a7e:	02 c0       	rjmp	.+4      	; 0x6a84 <free+0x11e>
    6a80:	12 82       	std	Z+2, r1	; 0x02
    6a82:	13 82       	std	Z+3, r1	; 0x03
    6a84:	00 93 6d 25 	sts	0x256D, r16	; 0x80256d <__brkval>
    6a88:	10 93 6e 25 	sts	0x256E, r17	; 0x80256e <__brkval+0x1>
    6a8c:	df 91       	pop	r29
    6a8e:	cf 91       	pop	r28
    6a90:	1f 91       	pop	r17
    6a92:	0f 91       	pop	r16
    6a94:	08 95       	ret

00006a96 <memcpy>:
    6a96:	fb 01       	movw	r30, r22
    6a98:	dc 01       	movw	r26, r24
    6a9a:	02 c0       	rjmp	.+4      	; 0x6aa0 <memcpy+0xa>
    6a9c:	01 90       	ld	r0, Z+
    6a9e:	0d 92       	st	X+, r0
    6aa0:	41 50       	subi	r20, 0x01	; 1
    6aa2:	50 40       	sbci	r21, 0x00	; 0
    6aa4:	d8 f7       	brcc	.-10     	; 0x6a9c <memcpy+0x6>
    6aa6:	08 95       	ret

00006aa8 <eeprom_read_dword>:
    6aa8:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <eeprom_mapen>
    6aac:	60 81       	ld	r22, Z
    6aae:	71 81       	ldd	r23, Z+1	; 0x01
    6ab0:	82 81       	ldd	r24, Z+2	; 0x02
    6ab2:	93 81       	ldd	r25, Z+3	; 0x03
    6ab4:	08 95       	ret

00006ab6 <eeprom_write_dword>:
    6ab6:	24 2f       	mov	r18, r20
    6ab8:	0e 94 79 35 	call	0x6af2	; 0x6af2 <eeprom_write_r18>
    6abc:	25 2f       	mov	r18, r21
    6abe:	0e 94 79 35 	call	0x6af2	; 0x6af2 <eeprom_write_r18>
    6ac2:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <eeprom_write_word>

00006ac6 <eeprom_write_word>:
    6ac6:	0e 94 78 35 	call	0x6af0	; 0x6af0 <eeprom_write_byte>
    6aca:	27 2f       	mov	r18, r23
    6acc:	0c 94 79 35 	jmp	0x6af2	; 0x6af2 <eeprom_write_r18>

00006ad0 <eeprom_read_byte>:
    6ad0:	03 d0       	rcall	.+6      	; 0x6ad8 <eeprom_mapen>
    6ad2:	80 81       	ld	r24, Z
    6ad4:	99 27       	eor	r25, r25
    6ad6:	08 95       	ret

00006ad8 <eeprom_mapen>:
    6ad8:	e0 ec       	ldi	r30, 0xC0	; 192
    6ada:	f1 e0       	ldi	r31, 0x01	; 1
    6adc:	37 85       	ldd	r19, Z+15	; 0x0f
    6ade:	37 fd       	sbrc	r19, 7
    6ae0:	fd cf       	rjmp	.-6      	; 0x6adc <eeprom_mapen+0x4>
    6ae2:	34 85       	ldd	r19, Z+12	; 0x0c
    6ae4:	38 60       	ori	r19, 0x08	; 8
    6ae6:	34 87       	std	Z+12, r19	; 0x0c
    6ae8:	fc 01       	movw	r30, r24
    6aea:	e0 50       	subi	r30, 0x00	; 0
    6aec:	f0 4f       	sbci	r31, 0xF0	; 240
    6aee:	08 95       	ret

00006af0 <eeprom_write_byte>:
    6af0:	26 2f       	mov	r18, r22

00006af2 <eeprom_write_r18>:
    6af2:	e0 ec       	ldi	r30, 0xC0	; 192
    6af4:	f1 e0       	ldi	r31, 0x01	; 1
    6af6:	37 85       	ldd	r19, Z+15	; 0x0f
    6af8:	37 fd       	sbrc	r19, 7
    6afa:	fd cf       	rjmp	.-6      	; 0x6af6 <eeprom_write_r18+0x4>
    6afc:	34 85       	ldd	r19, Z+12	; 0x0c
    6afe:	37 7f       	andi	r19, 0xF7	; 247
    6b00:	34 87       	std	Z+12, r19	; 0x0c
    6b02:	37 85       	ldd	r19, Z+15	; 0x0f
    6b04:	31 ff       	sbrs	r19, 1
    6b06:	09 c0       	rjmp	.+18     	; 0x6b1a <eeprom_write_r18+0x28>
    6b08:	36 e3       	ldi	r19, 0x36	; 54
    6b0a:	32 87       	std	Z+10, r19	; 0x0a
    6b0c:	38 ed       	ldi	r19, 0xD8	; 216
    6b0e:	34 bf       	out	0x34, r19	; 52
    6b10:	31 e0       	ldi	r19, 0x01	; 1
    6b12:	33 87       	std	Z+11, r19	; 0x0b
    6b14:	37 85       	ldd	r19, Z+15	; 0x0f
    6b16:	37 fd       	sbrc	r19, 7
    6b18:	fd cf       	rjmp	.-6      	; 0x6b14 <eeprom_write_r18+0x22>
    6b1a:	33 e3       	ldi	r19, 0x33	; 51
    6b1c:	32 87       	std	Z+10, r19	; 0x0a
    6b1e:	80 83       	st	Z, r24
    6b20:	91 83       	std	Z+1, r25	; 0x01
    6b22:	12 82       	std	Z+2, r1	; 0x02
    6b24:	24 83       	std	Z+4, r18	; 0x04
    6b26:	25 e3       	ldi	r18, 0x35	; 53
    6b28:	22 87       	std	Z+10, r18	; 0x0a
    6b2a:	28 ed       	ldi	r18, 0xD8	; 216
    6b2c:	31 e0       	ldi	r19, 0x01	; 1
    6b2e:	24 bf       	out	0x34, r18	; 52
    6b30:	33 87       	std	Z+11, r19	; 0x0b
    6b32:	01 96       	adiw	r24, 0x01	; 1
    6b34:	08 95       	ret

00006b36 <__do_global_dtors>:
    6b36:	12 e0       	ldi	r17, 0x02	; 2
    6b38:	cc e8       	ldi	r28, 0x8C	; 140
    6b3a:	d2 e0       	ldi	r29, 0x02	; 2
    6b3c:	00 e0       	ldi	r16, 0x00	; 0
    6b3e:	06 c0       	rjmp	.+12     	; 0x6b4c <__do_global_dtors+0x16>
    6b40:	80 2f       	mov	r24, r16
    6b42:	fe 01       	movw	r30, r28
    6b44:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <__tablejump2__>
    6b48:	21 96       	adiw	r28, 0x01	; 1
    6b4a:	01 1d       	adc	r16, r1
    6b4c:	cd 38       	cpi	r28, 0x8D	; 141
    6b4e:	d1 07       	cpc	r29, r17
    6b50:	80 e0       	ldi	r24, 0x00	; 0
    6b52:	08 07       	cpc	r16, r24
    6b54:	a9 f7       	brne	.-22     	; 0x6b40 <__do_global_dtors+0xa>
    6b56:	f8 94       	cli

00006b58 <__stop_program>:
    6b58:	ff cf       	rjmp	.-2      	; 0x6b58 <__stop_program>
