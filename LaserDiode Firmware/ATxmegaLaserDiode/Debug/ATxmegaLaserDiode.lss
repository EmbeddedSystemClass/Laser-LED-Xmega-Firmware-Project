
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002e0  00802000  00006a44  00006ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c9  008022e0  008022e0  00006db8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006db8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000181f3  00000000  00000000  00007ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000650f  00000000  00000000  0001fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005eaf  00000000  00000000  000261ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003964  00000000  00000000  0002c07c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000092c7  00000000  00000000  0002f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a5e4  00000000  00000000  00038ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b78  00000000  00000000  0004328b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 16 12 	jmp	0x242c	; 0x242c <__vector_1>
       8:	0c 94 47 12 	jmp	0x248e	; 0x248e <__vector_2>
       c:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__vector_3>
      10:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__vector_4>
      14:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__vector_5>
      18:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__vector_6>
      1c:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__vector_7>
      20:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__vector_8>
      24:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__vector_9>
      28:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__vector_10>
      2c:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__vector_11>
      30:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__vector_12>
      34:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__vector_13>
      38:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__vector_14>
      3c:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__vector_15>
      40:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_16>
      44:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__vector_17>
      48:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__vector_18>
      4c:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__vector_19>
      50:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__vector_20>
      54:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__vector_21>
      58:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_22>
      5c:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__vector_23>
      60:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__vector_24>
      64:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__vector_25>
      68:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_26>
      6c:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__vector_27>
      70:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__vector_28>
      74:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__vector_29>
      78:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__vector_30>
      7c:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__vector_31>
      80:	0c 94 05 18 	jmp	0x300a	; 0x300a <__vector_32>
      84:	0c 94 36 18 	jmp	0x306c	; 0x306c <__vector_33>
      88:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__vector_34>
      8c:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__vector_35>
      90:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__vector_36>
      94:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__vector_37>
      98:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__vector_38>
      9c:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__vector_39>
      a0:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__vector_40>
      a4:	0c 94 be 19 	jmp	0x337c	; 0x337c <__vector_41>
      a8:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__vector_42>
      ac:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__vector_43>
      b0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_44>
      b4:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__vector_45>
      b8:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__vector_46>
      bc:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__vector_47>
      c0:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__vector_48>
      c4:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__vector_49>
      c8:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__vector_50>
      cc:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <__vector_51>
      d0:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <__vector_52>
      d4:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__vector_53>
      d8:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__vector_54>
      dc:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__vector_55>
      e0:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__vector_56>
      e4:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <__vector_57>
      e8:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__vector_58>
      ec:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__vector_59>
      f0:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__vector_60>
      f4:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__vector_61>
      f8:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__vector_62>
      fc:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__vector_63>
     100:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__vector_64>
     104:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <__vector_65>
     108:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__vector_66>
     10c:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__vector_67>
     110:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__vector_68>
     114:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <__vector_69>
     118:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__vector_70>
     11c:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <__vector_71>
     120:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__vector_72>
     124:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__vector_73>
     128:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 40 20 	jmp	0x4080	; 0x4080 <__vector_77>
     138:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__vector_78>
     13c:	0c 94 a2 20 	jmp	0x4144	; 0x4144 <__vector_79>
     140:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__vector_80>
     144:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__vector_81>
     148:	0c 94 35 21 	jmp	0x426a	; 0x426a <__vector_82>
     14c:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__vector_83>
     150:	0c 94 97 21 	jmp	0x432e	; 0x432e <__vector_84>
     154:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__vector_85>
     158:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__vector_86>
     15c:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__vector_87>
     160:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__vector_88>
     164:	0c 94 8c 22 	jmp	0x4518	; 0x4518 <__vector_89>
     168:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__vector_90>
     16c:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__vector_91>
     170:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__vector_92>
     174:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__vector_104>
     1a4:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__vector_108>
     1b4:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__vector_109>
     1b8:	0c 94 45 24 	jmp	0x488a	; 0x488a <__vector_110>
     1bc:	0c 94 76 24 	jmp	0x48ec	; 0x48ec <__vector_111>
     1c0:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_112>
     1c4:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__vector_119>
     1e0:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <__vector_120>
     1e4:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7b 04       	cpc	r7, r11
     25e:	81 04       	cpc	r8, r1
     260:	87 04       	cpc	r8, r7
     262:	8d 04       	cpc	r8, r13
     264:	93 04       	cpc	r9, r3
     266:	99 04       	cpc	r9, r9
     268:	9f 04       	cpc	r9, r15
     26a:	a5 04       	cpc	r10, r5
     26c:	1c 05       	cpc	r17, r12
     26e:	b3 04       	cpc	r11, r3
     270:	b9 04       	cpc	r11, r9
     272:	bf 04       	cpc	r11, r15
     274:	c5 04       	cpc	r12, r5
     276:	cb 04       	cpc	r12, r11
     278:	d1 04       	cpc	r13, r1
     27a:	d7 04       	cpc	r13, r7
     27c:	dd 04       	cpc	r13, r13
     27e:	e3 04       	cpc	r14, r3
     280:	06 29       	or	r16, r6
     282:	06 29       	or	r16, r6
     284:	0e 29       	or	r16, r14
     286:	16 29       	or	r17, r6
     288:	1d 29       	or	r17, r13
     28a:	6c 29       	or	r22, r12
     28c:	73 29       	or	r23, r3
     28e:	9f 29       	or	r25, r15
     290:	9f 29       	or	r25, r15
     292:	9e 29       	or	r25, r14
     294:	9e 29       	or	r25, r14

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2a2:	0c 94 04 2f 	jmp	0x5e08	; 0x5e08 <_ZN8CTimerC18SetCOMPAEj>
     2a6:	0c 94 35 2b 	jmp	0x566a	; 0x566a <_ZN10CDGUSUSART11IsDataEmptyEv>
     2aa:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <_GLOBAL__sub_I_dacSPI>
     2ae:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <_ZN8CTimerD19SetPeriodEj>
     2b2:	0c 94 a2 31 	jmp	0x6344	; 0x6344 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2b6:	0c 94 9f 29 	jmp	0x533e	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
     2ba:	0c 94 71 30 	jmp	0x60e2	; 0x60e2 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     2be:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <_ZN7CTimerC8SetCOMPBEj>
     2c2:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <_ZN8CTimerC18SetCOMPBEj>
     2c6:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <_ZN7CTimerD9SetPeriodEj>
     2ca:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2ce:	0c 94 6a 2f 	jmp	0x5ed4	; 0x5ed4 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2d2:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2d6:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2da:	0c 94 0e 29 	jmp	0x521c	; 0x521c <_ZN9CMBSender13OnReceiveByteEh+0x32>
     2de:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <_ZN7CTimerC8SetCOMPDEj>
     2e2:	0c 94 42 11 	jmp	0x2284	; 0x2284 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     2e6:	0c 94 1d 29 	jmp	0x523a	; 0x523a <_ZN9CMBSender13OnReceiveByteEh+0x50>
     2ea:	0c 94 58 2b 	jmp	0x56b0	; 0x56b0 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     2ee:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     2f2:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <_ZN7CTimerC9SetPeriodEj>
     2f6:	0c 94 c5 27 	jmp	0x4f8a	; 0x4f8a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2fa:	0c 94 c1 30 	jmp	0x6182	; 0x6182 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2fe:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     302:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     306:	0c 94 48 31 	jmp	0x6290	; 0x6290 <_ZN7CTimerF8SetCOMPDEj>
     30a:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     30e:	0c 94 89 30 	jmp	0x6112	; 0x6112 <_ZN8CTimerD18SetCOMPBEj>
     312:	0c 94 37 2e 	jmp	0x5c6e	; 0x5c6e <_ZN7CTimerC8SetCOMPCEj>
     316:	0c 94 d2 2f 	jmp	0x5fa4	; 0x5fa4 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     31a:	0c 94 0d 28 	jmp	0x501a	; 0x501a <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     31e:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     322:	0c 94 e6 30 	jmp	0x61cc	; 0x61cc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     326:	0c 94 6f 31 	jmp	0x62de	; 0x62de <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     32a:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     32e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     332:	0c 94 67 06 	jmp	0xcce	; 0xcce <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     336:	0c 94 12 2e 	jmp	0x5c24	; 0x5c24 <_ZN7CTimerC4StopEv>
     33a:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <_ZN7CTimerD4StopEv>
     33e:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     342:	0c 94 9e 29 	jmp	0x533c	; 0x533c <_ZN9CMBSender13OnReceiveByteEh+0x152>
     346:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     34a:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     34e:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     352:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     356:	0c 94 1a 2e 	jmp	0x5c34	; 0x5c34 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     35a:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     35e:	0c 94 78 30 	jmp	0x60f0	; 0x60f0 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     362:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     366:	0c 94 c1 2f 	jmp	0x5f82	; 0x5f82 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     36a:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     36e:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     372:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     376:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     37a:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <_ZN8CTimerC14StopEv>
     37e:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     382:	0c 94 21 2e 	jmp	0x5c42	; 0x5c42 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     386:	0c 94 9d 10 	jmp	0x213a	; 0x213a <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     38a:	0c 94 91 31 	jmp	0x6322	; 0x6322 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     38e:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     392:	0c 94 e2 2a 	jmp	0x55c4	; 0x55c4 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     396:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     39a:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     39e:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <_ZN10CDGUSUSART11IsReceivingEv>
     3a2:	0c 94 96 2e 	jmp	0x5d2c	; 0x5d2c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3a6:	0c 94 85 2e 	jmp	0x5d0a	; 0x5d0a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3aa:	0c 94 2d 2e 	jmp	0x5c5a	; 0x5c5a <_ZN7CTimerC8SetCOMPAEj>
     3ae:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3b2:	0c 94 34 31 	jmp	0x6268	; 0x6268 <_ZN7CTimerF9SetPeriodEj>
     3b6:	0c 94 01 31 	jmp	0x6202	; 0x6202 <_ZN7CTimerF5StartEj>
     3ba:	0c 94 44 2f 	jmp	0x5e88	; 0x5e88 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3be:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     3c2:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     3c6:	0c 94 4d 31 	jmp	0x629a	; 0x629a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3ca:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     3ce:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3d2:	0c 94 39 31 	jmp	0x6272	; 0x6272 <_ZN7CTimerF8SetCOMPAEj>
     3d6:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <_ZN8CTimerC19SetPeriodEj>
     3da:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     3de:	0c 94 06 29 	jmp	0x520c	; 0x520c <_ZN9CMBSender13OnReceiveByteEh+0x22>
     3e2:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3e6:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     3ea:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3ee:	0c 94 3e 31 	jmp	0x627c	; 0x627c <_ZN7CTimerF8SetCOMPBEj>
     3f2:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3f6:	0c 94 e3 2f 	jmp	0x5fc6	; 0x5fc6 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3fa:	0c 94 05 30 	jmp	0x600a	; 0x600a <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3fe:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     402:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     406:	0c 94 4b 28 	jmp	0x5096	; 0x5096 <_ZN16CMBEventsHandler11FreeBuffersEv>
     40a:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     40e:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <_ZN7CTimerD5StartEj>
     412:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     416:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     41a:	0c 94 16 30 	jmp	0x602c	; 0x602c <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     41e:	0c 94 46 2b 	jmp	0x568c	; 0x568c <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     422:	0c 94 f8 2e 	jmp	0x5df0	; 0x5df0 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     426:	0c 94 b7 2f 	jmp	0x5f6e	; 0x5f6e <_ZN7CTimerD8SetCOMPCEj>
     42a:	0c 94 52 2e 	jmp	0x5ca4	; 0x5ca4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     42e:	0c 94 3d 2b 	jmp	0x567a	; 0x567a <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     432:	0c 94 bc 2f 	jmp	0x5f78	; 0x5f78 <_ZN7CTimerD8SetCOMPDEj>
     436:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     43a:	0c 94 8e 30 	jmp	0x611c	; 0x611c <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     43e:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     442:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__cxa_pure_virtual>
     446:	0c 94 30 28 	jmp	0x5060	; 0x5060 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     44a:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <_ZN7CTimerD8SetCOMPBEj>
     44e:	0c 94 5f 30 	jmp	0x60be	; 0x60be <_ZN8CTimerD14StopEv>
     452:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     456:	0c 94 9f 30 	jmp	0x613e	; 0x613e <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     45a:	0c 94 d4 25 	jmp	0x4ba8	; 0x4ba8 <_GLOBAL__sub_D_dacSPI>
     45e:	0c 94 0e 31 	jmp	0x621c	; 0x621c <_ZN7CTimerF4StopEv>
     462:	0c 94 ad 2f 	jmp	0x5f5a	; 0x5f5a <_ZN7CTimerD8SetCOMPAEj>
     466:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     46a:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     46e:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     472:	0c 94 43 31 	jmp	0x6286	; 0x6286 <_ZN7CTimerF8SetCOMPCEj>
     476:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <_ZN9CMBSender13OnReceiveByteEh+0xee>
     47a:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <_ZN8CTimerC15StartEj>
     47e:	0c 94 26 2b 	jmp	0x564c	; 0x564c <_ZN10CDGUSUSART14IsTransmittingEv>
     482:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     486:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     48a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     48e:	0c 94 67 30 	jmp	0x60ce	; 0x60ce <_ZN8CTimerD15ResetEv>
     492:	0c 94 16 29 	jmp	0x522c	; 0x522c <_ZN9CMBSender13OnReceiveByteEh+0x42>
     496:	0c 94 05 2e 	jmp	0x5c0a	; 0x5c0a <_ZN7CTimerC5StartEj>
     49a:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     49e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     4a2:	0c 94 23 31 	jmp	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     4a6:	0c 94 80 31 	jmp	0x6300	; 0x6300 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     4aa:	0c 94 a1 2f 	jmp	0x5f42	; 0x5f42 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     4ae:	0c 94 3b 30 	jmp	0x6076	; 0x6076 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b2:	0c 94 ea 2d 	jmp	0x5bd4	; 0x5bd4 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b6:	0c 94 f1 2e 	jmp	0x5de2	; 0x5de2 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     4ba:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <_ZN16CLaserControlApp13OnTimerStaticEPv>
     4be:	0c 94 1c 31 	jmp	0x6238	; 0x6238 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     4c2:	0c 94 5e 31 	jmp	0x62bc	; 0x62bc <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4c6:	0c 94 cb 04 	jmp	0x996	; 0x996 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     4ca:	0c 94 52 30 	jmp	0x60a4	; 0x60a4 <_ZN8CTimerD15StartEj>
     4ce:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     4d2:	0c 94 2b 31 	jmp	0x6256	; 0x6256 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     4d6:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4da:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     4de:	0c 94 16 31 	jmp	0x622c	; 0x622c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     4e2:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4e6:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4ea:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc2>
     4ee:	0c 94 84 30 	jmp	0x6108	; 0x6108 <_ZN8CTimerD18SetCOMPAEj>
     4f2:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <_ZN4CSPI16StaticOnTransmitEPv>
     4f6:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4fa:	0c 94 20 2b 	jmp	0x5640	; 0x5640 <_ZN10CDGUSUSART15GetReceivedByteEv>
     4fe:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     502:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     506:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     50a:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <_ZN8CTimerC15ResetEv>
     50e:	0c 94 2e 2a 	jmp	0x545c	; 0x545c <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     512:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <_ZN9CMBSender18OnUSARTRxInterruptEPv>

00000516 <__ctors_start>:
     516:	9f 25       	eor	r25, r15

00000518 <__ctors_end>:
     518:	d4 25       	eor	r29, r4

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	e4 e4       	ldi	r30, 0x44	; 68
     532:	fa e6       	ldi	r31, 0x6A	; 106
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a0 3e       	cpi	r26, 0xE0	; 224
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	25 e2       	ldi	r18, 0x25	; 37
     546:	a0 ee       	ldi	r26, 0xE0	; 224
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a9 3a       	cpi	r26, 0xA9	; 169
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 71 33 	call	0x66e2	; 0x66e2 <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 02 27 	call	0x4e04	; 0x4e04 <main>
     578:	0c 94 10 35 	jmp	0x6a20	; 0x6a20 <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 57 2a 	call	0x54ae	; 0x54ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 57 2a 	call	0x54ae	; 0x54ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
#ifndef LED_LASER_INDICATOR
	laserBoard.BLUOn();
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 e9 22 	sts	0x22E9, r24
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 71 33 	jmp	0x66e2	; 0x66e2 <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	eb 01       	movw	r28, r22
     8c4:	7a 01       	movw	r14, r20
     8c6:	69 01       	movw	r12, r18
     8c8:	fa 01       	movw	r30, r20
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_Z4swapj>
     8d2:	9c 01       	movw	r18, r24
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8dc:	7a c0       	rjmp	.+244    	; 0x9d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8de:	fe 01       	movw	r30, r28
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	e2 31       	cpi	r30, 0x12	; 18
     8e4:	f1 05       	cpc	r31, r1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e8:	a7 c0       	rjmp	.+334    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     8ea:	88 27       	eor	r24, r24
     8ec:	e2 5d       	subi	r30, 0xD2	; 210
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	0c 94 71 33 	jmp	0x66e2	; 0x66e2 <__tablejump2__>
     8f6:	f8 01       	movw	r30, r16
     8f8:	ea 5b       	subi	r30, 0xBA	; 186
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	20 83       	st	Z, r18
     8fe:	31 83       	std	Z+1, r19	; 0x01
     900:	9b c0       	rjmp	.+310    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     902:	f8 01       	movw	r30, r16
     904:	e8 5b       	subi	r30, 0xB8	; 184
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	20 83       	st	Z, r18
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	95 c0       	rjmp	.+298    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     90e:	f8 01       	movw	r30, r16
     910:	e6 5b       	subi	r30, 0xB6	; 182
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	8f c0       	rjmp	.+286    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     91a:	f8 01       	movw	r30, r16
     91c:	e4 5b       	subi	r30, 0xB4	; 180
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	89 c0       	rjmp	.+274    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     926:	f8 01       	movw	r30, r16
     928:	e2 5b       	subi	r30, 0xB2	; 178
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	83 c0       	rjmp	.+262    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     932:	f8 01       	movw	r30, r16
     934:	e0 5b       	subi	r30, 0xB0	; 176
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	20 83       	st	Z, r18
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	7d c0       	rjmp	.+250    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     93e:	f8 01       	movw	r30, r16
     940:	ee 5a       	subi	r30, 0xAE	; 174
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	77 c0       	rjmp	.+238    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     94a:	f7 01       	movw	r30, r14
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_Z6swap32m>
     958:	f8 01       	movw	r30, r16
     95a:	fe 96       	adiw	r30, 0x3e	; 62
     95c:	60 83       	st	Z, r22
     95e:	71 83       	std	Z+1, r23	; 0x01
     960:	82 83       	std	Z+2, r24	; 0x02
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	69 c0       	rjmp	.+210    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     966:	f8 01       	movw	r30, r16
     968:	e8 5a       	subi	r30, 0xA8	; 168
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	63 c0       	rjmp	.+198    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     972:	f8 01       	movw	r30, r16
     974:	e6 5a       	subi	r30, 0xA6	; 166
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	20 83       	st	Z, r18
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	5d c0       	rjmp	.+186    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     97e:	f8 01       	movw	r30, r16
     980:	e4 5a       	subi	r30, 0xA4	; 164
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	20 83       	st	Z, r18
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	57 c0       	rjmp	.+174    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     98a:	f8 01       	movw	r30, r16
     98c:	e2 5a       	subi	r30, 0xA2	; 162
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	20 83       	st	Z, r18
     992:	31 83       	std	Z+1, r19	; 0x01
     994:	51 c0       	rjmp	.+162    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     996:	f8 01       	movw	r30, r16
     998:	e0 5a       	subi	r30, 0xA0	; 160
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	4b c0       	rjmp	.+150    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9a2:	f8 01       	movw	r30, r16
     9a4:	ee 59       	subi	r30, 0x9E	; 158
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	20 83       	st	Z, r18
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ae:	f8 01       	movw	r30, r16
     9b0:	ec 59       	subi	r30, 0x9C	; 156
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	20 83       	st	Z, r18
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ba:	f8 01       	movw	r30, r16
     9bc:	ea 59       	subi	r30, 0x9A	; 154
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	20 83       	st	Z, r18
     9c2:	31 83       	std	Z+1, r19	; 0x01
     9c4:	39 c0       	rjmp	.+114    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9c6:	f8 01       	movw	r30, r16
     9c8:	e8 59       	subi	r30, 0x98	; 152
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	20 83       	st	Z, r18
     9ce:	31 83       	std	Z+1, r19	; 0x01
     9d0:	33 c0       	rjmp	.+102    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9d2:	c1 30       	cpi	r28, 0x01	; 1
     9d4:	d1 05       	cpc	r29, r1
     9d6:	51 f4       	brne	.+20     	; 0x9ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a6 01       	movw	r20, r12
     9de:	b7 01       	movw	r22, r14
     9e0:	c8 01       	movw	r24, r16
     9e2:	8a 5b       	subi	r24, 0xBA	; 186
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	0e 94 45 11 	call	0x228a	; 0x228a <_Z11ConvertDataPvS_jj>
     9ea:	26 c0       	rjmp	.+76     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ec:	c5 30       	cpi	r28, 0x05	; 5
     9ee:	d1 05       	cpc	r29, r1
     9f0:	49 f4       	brne	.+18     	; 0xa04 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x154>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	a6 01       	movw	r20, r12
     9f8:	b7 01       	movw	r22, r14
     9fa:	c8 01       	movw	r24, r16
     9fc:	c0 96       	adiw	r24, 0x30	; 48
     9fe:	0e 94 45 11 	call	0x228a	; 0x228a <_Z11ConvertDataPvS_jj>
     a02:	1a c0       	rjmp	.+52     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a04:	22 97       	sbiw	r28, 0x02	; 2
     a06:	c1 f4       	brne	.+48     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a08:	f8 01       	movw	r30, r16
     a0a:	86 85       	ldd	r24, Z+14	; 0x0e
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	90 f4       	brcc	.+36     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x184>
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	48 96       	adiw	r24, 0x18	; 24
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a6 01       	movw	r20, r12
     a28:	b7 01       	movw	r22, r14
     a2a:	80 0f       	add	r24, r16
     a2c:	91 1f       	adc	r25, r17
     a2e:	0e 94 45 11 	call	0x228a	; 0x228a <_Z11ConvertDataPvS_jj>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a34:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <_ZN11CLaserBoard4BeepEv>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN16CLaserControlAppC1Ev>:
     a4a:	2a e9       	ldi	r18, 0x9A	; 154
     a4c:	31 e2       	ldi	r19, 0x21	; 33
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	08 95       	ret

00000a56 <_ZN16CLaserControlAppD1Ev>:
     a56:	2a e9       	ldi	r18, 0x9A	; 154
     a58:	31 e2       	ldi	r19, 0x21	; 33
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
     a5e:	31 83       	std	Z+1, r19	; 0x01
     a60:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_ZN16CMBEventsHandlerD1Ev>
     a64:	08 95       	ret

00000a66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	7c 01       	movw	r14, r24
     a90:	8b 01       	movw	r16, r22
     a92:	fb 01       	movw	r30, r22
     a94:	80 80       	ld	r8, Z
     a96:	91 80       	ldd	r9, Z+1	; 0x01
     a98:	88 ee       	ldi	r24, 0xE8	; 232
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
     aa2:	5b 01       	movw	r10, r22
     aa4:	22 81       	ldd	r18, Z+2	; 0x02
     aa6:	33 81       	ldd	r19, Z+3	; 0x03
     aa8:	a8 ee       	ldi	r26, 0xE8	; 232
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
     ab0:	95 01       	movw	r18, r10
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
     aba:	29 01       	movw	r4, r18
     abc:	3a 01       	movw	r6, r20
     abe:	f8 01       	movw	r30, r16
     ac0:	c4 80       	ldd	r12, Z+4	; 0x04
     ac2:	d5 80       	ldd	r13, Z+5	; 0x05
     ac4:	8a e6       	ldi	r24, 0x6A	; 106
     ac6:	98 e1       	ldi	r25, 0x18	; 24
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
     ace:	8b 01       	movw	r16, r22
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	06 0f       	add	r16, r22
     ae2:	17 1f       	adc	r17, r23
     ae4:	f7 01       	movw	r30, r14
     ae6:	06 ab       	std	Z+54, r16	; 0x36
     ae8:	17 ab       	std	Z+55, r17	; 0x37
     aea:	d8 01       	movw	r26, r16
     aec:	a3 01       	movw	r20, r6
     aee:	92 01       	movw	r18, r4
     af0:	0e 94 88 33 	call	0x6710	; 0x6710 <__muluhisi3>
     af4:	28 ee       	ldi	r18, 0xE8	; 232
     af6:	33 e0       	ldi	r19, 0x03	; 3
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
     b00:	02 1b       	sub	r16, r18
     b02:	13 0b       	sbc	r17, r19
     b04:	f7 01       	movw	r30, r14
     b06:	00 af       	std	Z+56, r16	; 0x38
     b08:	11 af       	std	Z+57, r17	; 0x39
     b0a:	a2 ae       	std	Z+58, r10	; 0x3a
     b0c:	b3 ae       	std	Z+59, r11	; 0x3b
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	8c 9d       	mul	r24, r12
     b12:	90 01       	movw	r18, r0
     b14:	8d 9d       	mul	r24, r13
     b16:	30 0d       	add	r19, r0
     b18:	11 24       	eor	r1, r1
     b1a:	36 95       	lsr	r19
     b1c:	27 95       	ror	r18
     b1e:	36 95       	lsr	r19
     b20:	27 95       	ror	r18
     b22:	ab e7       	ldi	r26, 0x7B	; 123
     b24:	b4 e1       	ldi	r27, 0x14	; 20
     b26:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
     b2a:	8c 01       	movw	r16, r24
     b2c:	16 95       	lsr	r17
     b2e:	07 95       	ror	r16
     b30:	09 83       	std	Y+1, r16	; 0x01
     b32:	1a 83       	std	Y+2, r17	; 0x02
     b34:	96 01       	movw	r18, r12
     b36:	a8 ec       	ldi	r26, 0xC8	; 200
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <__mulsi3>
     b4a:	20 ea       	ldi	r18, 0xA0	; 160
     b4c:	36 e8       	ldi	r19, 0x86	; 134
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
     b56:	12 2f       	mov	r17, r18
     b58:	82 2f       	mov	r24, r18
     b5a:	93 2f       	mov	r25, r19
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	2a e0       	ldi	r18, 0x0A	; 10
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
     b70:	62 2f       	mov	r22, r18
     b72:	82 2f       	mov	r24, r18
     b74:	93 2f       	mov	r25, r19
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	20 2f       	mov	r18, r16
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	41 2f       	mov	r20, r17
     b80:	5c 81       	ldd	r21, Y+4	; 0x04
     b82:	7e 81       	ldd	r23, Y+6	; 0x06
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	08 95       	ret

00000bb0 <_ZN16CLaserControlApp11GetVariableEjj>:
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	c2 58       	subi	r28, 0x82	; 130
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 ab 2a 	call	0x5556	; 0x5556 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	0e 94 31 2a 	call	0x5462	; 0x5462 <_ZN9CMBSender18WaitMODBUSListenerEv>
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	c2 58       	subi	r28, 0x82	; 130
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8c 01       	movw	r16, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_Z4swapj>
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	02 58       	subi	r16, 0x82	; 130
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	ae 01       	movw	r20, r28
     c1c:	4f 5f       	subi	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	63 e0       	ldi	r22, 0x03	; 3
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	0e 94 57 2a 	call	0x54ae	; 0x54ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     c44:	fc 01       	movw	r30, r24
     c46:	fe 96       	adiw	r30, 0x3e	; 62
     c48:	40 81       	ld	r20, Z
     c4a:	51 81       	ldd	r21, Z+1	; 0x01
     c4c:	62 81       	ldd	r22, Z+2	; 0x02
     c4e:	73 81       	ldd	r23, Z+3	; 0x03
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	6f 4f       	sbci	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	40 83       	st	Z, r20
     c5a:	51 83       	std	Z+1, r21	; 0x01
     c5c:	62 83       	std	Z+2, r22	; 0x02
     c5e:	73 83       	std	Z+3, r23	; 0x03
     c60:	34 96       	adiw	r30, 0x04	; 4
     c62:	40 81       	ld	r20, Z
     c64:	51 81       	ldd	r21, Z+1	; 0x01
     c66:	62 81       	ldd	r22, Z+2	; 0x02
     c68:	73 81       	ldd	r23, Z+3	; 0x03
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	6f 4f       	sbci	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	40 83       	st	Z, r20
     c74:	51 83       	std	Z+1, r21	; 0x01
     c76:	62 83       	std	Z+2, r22	; 0x02
     c78:	73 83       	std	Z+3, r23	; 0x03
     c7a:	fc 01       	movw	r30, r24
     c7c:	42 ad       	ldd	r20, Z+58	; 0x3a
     c7e:	53 ad       	ldd	r21, Z+59	; 0x3b
     c80:	45 36       	cpi	r20, 0x65	; 101
     c82:	51 05       	cpc	r21, r1
     c84:	50 f0       	brcs	.+20     	; 0xc9a <_ZN16CLaserControlApp12OnLaserTimerEv+0x56>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	42 e3       	ldi	r20, 0x32	; 50
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	64 ef       	ldi	r22, 0xF4	; 244
     c8e:	71 e0       	ldi	r23, 0x01	; 1
     c90:	8e e5       	ldi	r24, 0x5E	; 94
     c92:	95 e2       	ldi	r25, 0x25	; 37
     c94:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
     c98:	09 c0       	rjmp	.+18     	; 0xcac <_ZN16CLaserControlApp12OnLaserTimerEv+0x68>
     c9a:	56 95       	lsr	r21
     c9c:	47 95       	ror	r20
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	64 ef       	ldi	r22, 0xF4	; 244
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	8e e5       	ldi	r24, 0x5E	; 94
     ca6:	95 e2       	ldi	r25, 0x25	; 37
     ca8:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
     cac:	8e e5       	ldi	r24, 0x5E	; 94
     cae:	95 e2       	ldi	r25, 0x25	; 37
     cb0:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
     cb4:	08 95       	ret

00000cb6 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     cb6:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN16CLaserControlApp12OnLaserTimerEv>
     cba:	08 95       	ret

00000cbc <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     cbc:	fc 01       	movw	r30, r24
     cbe:	83 89       	ldd	r24, Z+19	; 0x13
     cc0:	88 23       	and	r24, r24
     cc2:	21 f0       	breq	.+8      	; 0xccc <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     cc4:	8f e5       	ldi	r24, 0x5F	; 95
     cc6:	95 e2       	ldi	r25, 0x25	; 37
     cc8:	0e 94 ef 2c 	call	0x59de	; 0x59de <_ZN11CLaserBoard5PWMOnEv>
     ccc:	08 95       	ret

00000cce <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     cce:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     cd2:	08 95       	ret

00000cd4 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerRED()
{
#ifndef LED_LASER_INDICATOR
	laserBoard.REDOn();
     cd4:	8f e5       	ldi	r24, 0x5F	; 95
     cd6:	95 e2       	ldi	r25, 0x25	; 37
     cd8:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN11CLaserBoard5REDOnEv>
     cdc:	08 95       	ret

00000cde <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
#endif
}
void CLaserControlApp::OnPWMTimerGRN()
{
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
     cde:	8f e5       	ldi	r24, 0x5F	; 95
     ce0:	95 e2       	ldi	r25, 0x25	; 37
     ce2:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN11CLaserBoard5GRNOnEv>
     ce6:	08 95       	ret

00000ce8 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
#ifndef LED_LASER_INDICATOR
	laserBoard.BLUOn();
     ce8:	8f e5       	ldi	r24, 0x5F	; 95
     cea:	95 e2       	ldi	r25, 0x25	; 37
     cec:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <_ZN11CLaserBoard5BLUOnEv>
     cf0:	08 95       	ret

00000cf2 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     cfc:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     cfe:	fc 01       	movw	r30, r24
     d00:	ea 5b       	subi	r30, 0xBA	; 186
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	10 82       	st	Z, r1
     d06:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     d08:	32 96       	adiw	r30, 0x02	; 2
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     d12:	6a 30       	cpi	r22, 0x0A	; 10
     d14:	71 05       	cpc	r23, r1
     d16:	70 f4       	brcc	.+28     	; 0xd34 <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	72 96       	adiw	r30, 0x12	; 18
     d1e:	80 83       	st	Z, r24
     d20:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d22:	8c e3       	ldi	r24, 0x3C	; 60
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	8e 8b       	std	Y+22, r24	; 0x16
     d28:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d2a:	81 e6       	ldi	r24, 0x61	; 97
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	8c 8b       	std	Y+20, r24	; 0x14
     d30:	9d 8b       	std	Y+21, r25	; 0x15
     d32:	5b c0       	rjmp	.+182    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     d34:	64 31       	cpi	r22, 0x14	; 20
     d36:	71 05       	cpc	r23, r1
     d38:	80 f4       	brcc	.+32     	; 0xd5a <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fe 01       	movw	r30, r28
     d40:	e6 5a       	subi	r30, 0xA6	; 166
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	80 83       	st	Z, r24
     d46:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d48:	8c e3       	ldi	r24, 0x3C	; 60
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	8e 8b       	std	Y+22, r24	; 0x16
     d4e:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d50:	81 e6       	ldi	r24, 0x61	; 97
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	8c 8b       	std	Y+20, r24	; 0x14
     d56:	9d 8b       	std	Y+21, r25	; 0x15
     d58:	48 c0       	rjmp	.+144    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     d5a:	63 32       	cpi	r22, 0x23	; 35
     d5c:	71 05       	cpc	r23, r1
     d5e:	80 f4       	brcc	.+32     	; 0xd80 <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fe 01       	movw	r30, r28
     d66:	e6 5a       	subi	r30, 0xA6	; 166
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d6e:	8c e3       	ldi	r24, 0x3C	; 60
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	8e 8b       	std	Y+22, r24	; 0x16
     d74:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d76:	81 e6       	ldi	r24, 0x61	; 97
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	8c 8b       	std	Y+20, r24	; 0x14
     d7c:	9d 8b       	std	Y+21, r25	; 0x15
     d7e:	35 c0       	rjmp	.+106    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     d80:	61 33       	cpi	r22, 0x31	; 49
     d82:	71 05       	cpc	r23, r1
     d84:	80 f4       	brcc	.+32     	; 0xda6 <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	fe 01       	movw	r30, r28
     d8c:	e6 5a       	subi	r30, 0xA6	; 166
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	8e 8b       	std	Y+22, r24	; 0x16
     d9a:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d9c:	81 e6       	ldi	r24, 0x61	; 97
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8c 8b       	std	Y+20, r24	; 0x14
     da2:	9d 8b       	std	Y+21, r25	; 0x15
     da4:	22 c0       	rjmp	.+68     	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     da6:	68 34       	cpi	r22, 0x48	; 72
     da8:	71 05       	cpc	r23, r1
     daa:	80 f4       	brcc	.+32     	; 0xdcc <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     dac:	85 e0       	ldi	r24, 0x05	; 5
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fe 01       	movw	r30, r28
     db2:	e6 5a       	subi	r30, 0xA6	; 166
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dba:	84 e6       	ldi	r24, 0x64	; 100
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	8e 8b       	std	Y+22, r24	; 0x16
     dc0:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 90;
     dc2:	8a e5       	ldi	r24, 0x5A	; 90
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	8c 8b       	std	Y+20, r24	; 0x14
     dc8:	9d 8b       	std	Y+21, r25	; 0x15
     dca:	0f c0       	rjmp	.+30     	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fe 01       	movw	r30, r28
     dd2:	e6 5a       	subi	r30, 0xA6	; 166
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 83       	st	Z, r24
     dd8:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dda:	84 e6       	ldi	r24, 0x64	; 100
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	8e 8b       	std	Y+22, r24	; 0x16
     de0:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 87;
     de2:	87 e5       	ldi	r24, 0x57	; 87
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	8c 8b       	std	Y+20, r24	; 0x14
     de8:	9d 8b       	std	Y+21, r25	; 0x15
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     dea:	fe 01       	movw	r30, r28
     dec:	e4 5b       	subi	r30, 0xB4	; 180
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     df8:	8e 89       	ldd	r24, Y+22	; 0x16
     dfa:	9f 89       	ldd	r25, Y+23	; 0x17
     dfc:	32 97       	sbiw	r30, 0x02	; 2
     dfe:	80 83       	st	Z, r24
     e00:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     e02:	8e 01       	movw	r16, r28
     e04:	02 5b       	subi	r16, 0xB2	; 178
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	68 0f       	add	r22, r24
     e14:	79 1f       	adc	r23, r25
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	68 5e       	subi	r22, 0xE8	; 232
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	6c 0f       	add	r22, r28
     e20:	7d 1f       	adc	r23, r29
     e22:	ce 01       	movw	r24, r28
     e24:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     e28:	f8 01       	movw	r30, r16
     e2a:	20 83       	st	Z, r18
     e2c:	31 83       	std	Z+1, r19	; 0x01
     e2e:	42 83       	std	Z+2, r20	; 0x02
     e30:	53 83       	std	Z+3, r21	; 0x03
     e32:	64 83       	std	Z+4, r22	; 0x04
     e34:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     e36:	8e 85       	ldd	r24, Y+14	; 0x0e
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ec 0f       	add	r30, r28
     e4a:	fd 1f       	adc	r31, r29
     e4c:	84 8d       	ldd	r24, Z+28	; 0x1c
     e4e:	95 8d       	ldd	r25, Z+29	; 0x1d
     e50:	8c af       	std	Y+60, r24	; 0x3c
     e52:	9d af       	std	Y+61, r25	; 0x3d
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     e68:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     e6a:	fc 01       	movw	r30, r24
     e6c:	ea 5b       	subi	r30, 0xBA	; 186
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	10 82       	st	Z, r1
     e72:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     e74:	32 96       	adiw	r30, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	80 83       	st	Z, r24
     e7c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     e7e:	72 96       	adiw	r30, 0x12	; 18
     e80:	60 83       	st	Z, r22
     e82:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     e84:	63 30       	cpi	r22, 0x03	; 3
     e86:	71 05       	cpc	r23, r1
     e88:	91 f1       	breq	.+100    	; 0xeee <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     e8c:	61 30       	cpi	r22, 0x01	; 1
     e8e:	71 05       	cpc	r23, r1
     e90:	71 f0       	breq	.+28     	; 0xeae <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     e92:	62 30       	cpi	r22, 0x02	; 2
     e94:	71 05       	cpc	r23, r1
     e96:	d9 f0       	breq	.+54     	; 0xece <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     e98:	69 c0       	rjmp	.+210    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     e9a:	65 30       	cpi	r22, 0x05	; 5
     e9c:	71 05       	cpc	r23, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     ea0:	46 c0       	rjmp	.+140    	; 0xf2e <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     ea2:	a8 f1       	brcs	.+106    	; 0xf0e <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     ea4:	66 30       	cpi	r22, 0x06	; 6
     ea6:	71 05       	cpc	r23, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     eaa:	51 c0       	rjmp	.+162    	; 0xf4e <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     eac:	5f c0       	rjmp	.+190    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fe 01       	movw	r30, r28
     eb4:	e8 5a       	subi	r30, 0xA8	; 168
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 83       	st	Z, r24
     eba:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ebc:	8c e3       	ldi	r24, 0x3C	; 60
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	8e 8b       	std	Y+22, r24	; 0x16
     ec2:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     ec4:	81 e6       	ldi	r24, 0x61	; 97
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8c 8b       	std	Y+20, r24	; 0x14
     eca:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     ecc:	4f c0       	rjmp	.+158    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     ece:	8e e0       	ldi	r24, 0x0E	; 14
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fe 01       	movw	r30, r28
     ed4:	e8 5a       	subi	r30, 0xA8	; 168
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     edc:	8c e3       	ldi	r24, 0x3C	; 60
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	8e 8b       	std	Y+22, r24	; 0x16
     ee2:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     ee4:	81 e6       	ldi	r24, 0x61	; 97
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	8c 8b       	std	Y+20, r24	; 0x14
     eea:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     eee:	8b e1       	ldi	r24, 0x1B	; 27
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fe 01       	movw	r30, r28
     ef4:	e8 5a       	subi	r30, 0xA8	; 168
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     efc:	8c e3       	ldi	r24, 0x3C	; 60
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	8e 8b       	std	Y+22, r24	; 0x16
     f02:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f04:	81 e6       	ldi	r24, 0x61	; 97
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	8c 8b       	std	Y+20, r24	; 0x14
     f0a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f0c:	2f c0       	rjmp	.+94     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     f0e:	89 e2       	ldi	r24, 0x29	; 41
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fe 01       	movw	r30, r28
     f14:	e8 5a       	subi	r30, 0xA8	; 168
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 83       	st	Z, r24
     f1a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f1c:	84 e6       	ldi	r24, 0x64	; 100
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	8e 8b       	std	Y+22, r24	; 0x16
     f22:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f24:	81 e6       	ldi	r24, 0x61	; 97
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	8c 8b       	std	Y+20, r24	; 0x14
     f2a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     f2e:	8d e3       	ldi	r24, 0x3D	; 61
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	fe 01       	movw	r30, r28
     f34:	e8 5a       	subi	r30, 0xA8	; 168
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f3c:	84 e6       	ldi	r24, 0x64	; 100
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	8e 8b       	std	Y+22, r24	; 0x16
     f42:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 90;
     f44:	8a e5       	ldi	r24, 0x5A	; 90
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8c 8b       	std	Y+20, r24	; 0x14
     f4a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     f4e:	85 e5       	ldi	r24, 0x55	; 85
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fe 01       	movw	r30, r28
     f54:	e8 5a       	subi	r30, 0xA8	; 168
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f5c:	84 e6       	ldi	r24, 0x64	; 100
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	8e 8b       	std	Y+22, r24	; 0x16
     f62:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 87;
     f64:	87 e5       	ldi	r24, 0x57	; 87
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	8c 8b       	std	Y+20, r24	; 0x14
     f6a:	9d 8b       	std	Y+21, r25	; 0x15
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     f6c:	fe 01       	movw	r30, r28
     f6e:	e4 5b       	subi	r30, 0xB4	; 180
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	84 e6       	ldi	r24, 0x64	; 100
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     f7a:	8e 89       	ldd	r24, Y+22	; 0x16
     f7c:	9f 89       	ldd	r25, Y+23	; 0x17
     f7e:	32 97       	sbiw	r30, 0x02	; 2
     f80:	80 83       	st	Z, r24
     f82:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     f84:	8e 01       	movw	r16, r28
     f86:	02 5b       	subi	r16, 0xB2	; 178
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	be 01       	movw	r22, r28
     f8c:	68 5e       	subi	r22, 0xE8	; 232
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	ce 01       	movw	r24, r28
     f92:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     f96:	f8 01       	movw	r30, r16
     f98:	20 83       	st	Z, r18
     f9a:	31 83       	std	Z+1, r19	; 0x01
     f9c:	42 83       	std	Z+2, r20	; 0x02
     f9e:	53 83       	std	Z+3, r21	; 0x03
     fa0:	64 83       	std	Z+4, r22	; 0x04
     fa2:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ec 0f       	add	r30, r28
     fb8:	fd 1f       	adc	r31, r29
     fba:	84 8d       	ldd	r24, Z+28	; 0x1c
     fbc:	95 8d       	ldd	r25, Z+29	; 0x1d
     fbe:	8c af       	std	Y+60, r24	; 0x3c
     fc0:	9d af       	std	Y+61, r25	; 0x3d
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	8b 01       	movw	r16, r22
     fe4:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	b1 f0       	breq	.+44     	; 0x1016 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
     fea:	18 f4       	brcc	.+6      	; 0xff2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
     fec:	21 30       	cpi	r18, 0x01	; 1
     fee:	31 f0       	breq	.+12     	; 0xffc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
     ff0:	58 c0       	rjmp	.+176    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	39 f1       	breq	.+78     	; 0x1044 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
     ff6:	24 30       	cpi	r18, 0x04	; 4
     ff8:	e9 f1       	breq	.+122    	; 0x1074 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
     ffa:	53 c0       	rjmp	.+166    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
     ffc:	db 01       	movw	r26, r22
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	09 f4       	brne	.+2      	; 0x100a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
    1008:	4c c0       	rjmp	.+152    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	8d 93       	st	X+, r24
    1010:	9c 93       	st	X, r25
				update = true;
    1012:	89 8b       	std	Y+17, r24	; 0x11
    1014:	46 c0       	rjmp	.+140    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
    1016:	fb 01       	movw	r30, r22
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	04 97       	sbiw	r24, 0x04	; 4
    101e:	30 f0       	brcs	.+12     	; 0x102c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 1)
    102c:	d8 01       	movw	r26, r16
    102e:	8d 91       	ld	r24, X+
    1030:	9c 91       	ld	r25, X
    1032:	11 97       	sbiw	r26, 0x01	; 1
    1034:	89 2b       	or	r24, r25
    1036:	a9 f5       	brne	.+106    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	8d 93       	st	X+, r24
    103e:	9c 93       	st	X, r25
				update = true;
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	2f c0       	rjmp	.+94     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
    1044:	fb 01       	movw	r30, r22
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	07 97       	sbiw	r24, 0x07	; 7
    104c:	30 f0       	brcs	.+12     	; 0x105a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 4)
    105a:	d8 01       	movw	r26, r16
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	04 97       	sbiw	r24, 0x04	; 4
    1064:	f0 f4       	brcc	.+60     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	8d 93       	st	X+, r24
    106c:	9c 93       	st	X, r25
				update = true;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 8b       	std	Y+17, r24	; 0x11
    1072:	17 c0       	rjmp	.+46     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    1074:	fb 01       	movw	r30, r22
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	0b 97       	sbiw	r24, 0x0b	; 11
    107c:	30 f0       	brcs	.+12     	; 0x108a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 7)
    108a:	d8 01       	movw	r26, r16
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	11 97       	sbiw	r26, 0x01	; 1
    1092:	07 97       	sbiw	r24, 0x07	; 7
    1094:	30 f4       	brcc	.+12     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	8d 93       	st	X+, r24
    109c:	9c 93       	st	X, r25
				update = true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 8b       	std	Y+17, r24	; 0x11
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    10a2:	f8 01       	movw	r30, r16
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	f9 01       	movw	r30, r18
    10ae:	e0 5c       	subi	r30, 0xC0	; 192
    10b0:	fe 4d       	sbci	r31, 0xDE	; 222
    10b2:	c0 80       	ld	r12, Z
    10b4:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    10b6:	f9 01       	movw	r30, r18
    10b8:	e6 5d       	subi	r30, 0xD6	; 214
    10ba:	fe 4d       	sbci	r31, 0xDE	; 222
    10bc:	01 90       	ld	r0, Z+
    10be:	f0 81       	ld	r31, Z
    10c0:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    10c2:	cf 01       	movw	r24, r30
    10c4:	8c 19       	sub	r24, r12
    10c6:	9d 09       	sbc	r25, r13
    10c8:	d9 01       	movw	r26, r18
    10ca:	ac 5e       	subi	r26, 0xEC	; 236
    10cc:	be 4d       	sbci	r27, 0xDE	; 222
    10ce:	6d 91       	ld	r22, X+
    10d0:	7c 91       	ld	r23, X
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	71 09       	sbc	r23, r1
    10d6:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
	
	if (duration < MinD)
    10da:	d7 01       	movw	r26, r14
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	8c 15       	cp	r24, r12
    10e4:	9d 05       	cpc	r25, r13
    10e6:	20 f4       	brcc	.+8      	; 0x10f0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    10e8:	cd 92       	st	X+, r12
    10ea:	dc 92       	st	X, r13
		update = true;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	if (duration > MaxD)
    10f0:	d7 01       	movw	r26, r14
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	e8 17       	cp	r30, r24
    10fa:	f9 07       	cpc	r31, r25
    10fc:	20 f4       	brcc	.+8      	; 0x1106 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    10fe:	ed 93       	st	X+, r30
    1100:	fc 93       	st	X, r31
		update = true;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1106:	d8 01       	movw	r26, r16
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ec 5e       	subi	r30, 0xEC	; 236
    1112:	fe 4d       	sbci	r31, 0xDE	; 222
    1114:	a0 80       	ld	r10, Z
    1116:	b1 80       	ldd	r11, Z+1	; 0x01
    1118:	b1 e0       	ldi	r27, 0x01	; 1
    111a:	ab 1a       	sub	r10, r27
    111c:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    111e:	f7 01       	movw	r30, r14
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	8c 19       	sub	r24, r12
    1126:	9d 09       	sbc	r25, r13
    1128:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z3maxjj>
    1134:	b5 01       	movw	r22, r10
    1136:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_Z3minjj>
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    113a:	d8 01       	movw	r26, r16
    113c:	4d 91       	ld	r20, X+
    113e:	5c 91       	ld	r21, X
    1140:	6b e0       	ldi	r22, 0x0B	; 11
    1142:	64 9f       	mul	r22, r20
    1144:	90 01       	movw	r18, r0
    1146:	65 9f       	mul	r22, r21
    1148:	30 0d       	add	r19, r0
    114a:	11 24       	eor	r1, r1
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	fc 01       	movw	r30, r24
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	ee 5d       	subi	r30, 0xDE	; 222
    1158:	ff 4d       	sbci	r31, 0xDF	; 223
    115a:	20 81       	ld	r18, Z
    115c:	31 81       	ldd	r19, Z+1	; 0x01
    115e:	ad ec       	ldi	r26, 0xCD	; 205
    1160:	bc ec       	ldi	r27, 0xCC	; 204
    1162:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	8c 8b       	std	Y+20, r24	; 0x14
    1170:	9d 8b       	std	Y+21, r25	; 0x15
	
	return update;
    1172:	89 89       	ldd	r24, Y+17	; 0x11
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	08 95       	ret

0000118a <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 58       	subi	r30, 0x82	; 130
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	60 83       	st	Z, r22
    11ac:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    11ae:	1f 86       	std	Y+15, r1	; 0x0f
	update = false;
    11b0:	19 8a       	std	Y+17, r1	; 0x11
	prepare = false;
    11b2:	1a 8a       	std	Y+18, r1	; 0x12
	peltier_en = false;
    11b4:	1b 8a       	std	Y+19, r1	; 0x13
	m_wSetMin = 0;
    11b6:	6c 01       	movw	r12, r24
    11b8:	26 e7       	ldi	r18, 0x76	; 118
    11ba:	c2 0e       	add	r12, r18
    11bc:	d1 1c       	adc	r13, r1
    11be:	f6 01       	movw	r30, r12
    11c0:	10 82       	st	Z, r1
    11c2:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 10;
    11c4:	7c 01       	movw	r14, r24
    11c6:	f8 e7       	ldi	r31, 0x78	; 120
    11c8:	ef 0e       	add	r14, r31
    11ca:	f1 1c       	adc	r15, r1
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f7 01       	movw	r30, r14
    11d2:	80 83       	st	Z, r24
    11d4:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    11d6:	34 97       	sbiw	r30, 0x04	; 4
    11d8:	10 82       	st	Z, r1
    11da:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    11dc:	f6 01       	movw	r30, r12
    11de:	20 81       	ld	r18, Z
    11e0:	31 81       	ldd	r19, Z+1	; 0x01
    11e2:	36 97       	sbiw	r30, 0x06	; 6
    11e4:	20 83       	st	Z, r18
    11e6:	31 83       	std	Z+1, r19	; 0x01
	m_wSeconds = m_wSetSec;
    11e8:	f7 01       	movw	r30, r14
    11ea:	20 81       	ld	r18, Z
    11ec:	31 81       	ldd	r19, Z+1	; 0x01
    11ee:	36 97       	sbiw	r30, 0x06	; 6
    11f0:	20 83       	st	Z, r18
    11f2:	31 83       	std	Z+1, r19	; 0x01
	m_wDeadTime = 0;
    11f4:	3a 96       	adiw	r30, 0x0a	; 10
    11f6:	10 82       	st	Z, r1
    11f8:	11 82       	std	Z+1, r1	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    11fa:	88 ab       	std	Y+48, r24	; 0x30
    11fc:	99 ab       	std	Y+49, r25	; 0x31
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    11fe:	88 e2       	ldi	r24, 0x28	; 40
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	8a ab       	std	Y+50, r24	; 0x32
    1204:	9b ab       	std	Y+51, r25	; 0x33
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	8c ab       	std	Y+52, r24	; 0x34
    120c:	9d ab       	std	Y+53, r25	; 0x35
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    120e:	25 e0       	ldi	r18, 0x05	; 5
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	2a a7       	std	Y+42, r18	; 0x2a
    1214:	3b a7       	std	Y+43, r19	; 0x2b
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    1216:	20 e5       	ldi	r18, 0x50	; 80
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	2c a7       	std	Y+44, r18	; 0x2c
    121c:	3d a7       	std	Y+45, r19	; 0x2d
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
    121e:	8e a7       	std	Y+46, r24	; 0x2e
    1220:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    1222:	22 e0       	ldi	r18, 0x02	; 2
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	2c a3       	std	Y+36, r18	; 0x24
    1228:	3d a3       	std	Y+37, r19	; 0x25
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    122a:	28 e7       	ldi	r18, 0x78	; 120
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	2e a3       	std	Y+38, r18	; 0x26
    1230:	3f a3       	std	Y+39, r19	; 0x27
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
    1232:	88 a7       	std	Y+40, r24	; 0x28
    1234:	99 a7       	std	Y+41, r25	; 0x29
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    1236:	aa 24       	eor	r10, r10
    1238:	a3 94       	inc	r10
    123a:	b1 2c       	mov	r11, r1
    123c:	ae 8e       	std	Y+30, r10	; 0x1e
    123e:	bf 8e       	std	Y+31, r11	; 0x1f
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    1240:	88 a3       	std	Y+32, r24	; 0x20
    1242:	99 a3       	std	Y+33, r25	; 0x21
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
    1244:	8a a3       	std	Y+34, r24	; 0x22
    1246:	9b a3       	std	Y+35, r25	; 0x23
	
	// Current profile
	Profile = PROFILE_FAST;
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 c9 34 	call	0x6992	; 0x6992 <eeprom_read_dword>
    1254:	4e 01       	movw	r8, r28
    1256:	fe e3       	ldi	r31, 0x3E	; 62
    1258:	8f 0e       	add	r8, r31
    125a:	91 1c       	adc	r9, r1
    125c:	f4 01       	movw	r30, r8
    125e:	60 83       	st	Z, r22
    1260:	71 83       	std	Z+1, r23	; 0x01
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    1266:	38 96       	adiw	r30, 0x08	; 8
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	80 83       	st	Z, r24
    126e:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1270:	be 01       	movw	r22, r28
    1272:	60 5d       	subi	r22, 0xD0	; 208
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	de 01       	movw	r26, r28
    1278:	a8 5b       	subi	r26, 0xB8	; 184
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	fb 01       	movw	r30, r22
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	8a 95       	dec	r24
    1286:	e1 f7       	brne	.-8      	; 0x1280 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0xf6>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    1288:	8e 01       	movw	r16, r28
    128a:	02 5b       	subi	r16, 0xB2	; 178
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1294:	f8 01       	movw	r30, r16
    1296:	20 83       	st	Z, r18
    1298:	31 83       	std	Z+1, r19	; 0x01
    129a:	42 83       	std	Z+2, r20	; 0x02
    129c:	53 83       	std	Z+3, r21	; 0x03
    129e:	64 83       	std	Z+4, r22	; 0x04
    12a0:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    12a2:	f6 01       	movw	r30, r12
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	74 97       	sbiw	r30, 0x14	; 20
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    12ae:	f7 01       	movw	r30, r14
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	74 97       	sbiw	r30, 0x14	; 20
    12b6:	80 83       	st	Z, r24
    12b8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    12ba:	f4 01       	movw	r30, r8
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_Z6swap32m>
    12c8:	fe 01       	movw	r30, r28
    12ca:	ec 5a       	subi	r30, 0xAC	; 172
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 83       	st	Z, r22
    12d0:	71 83       	std	Z+1, r23	; 0x01
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    12d6:	34 96       	adiw	r30, 0x04	; 4
    12d8:	10 82       	st	Z, r1
    12da:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    12dc:	32 96       	adiw	r30, 0x02	; 2
    12de:	a0 82       	st	Z, r10
    12e0:	b1 82       	std	Z+1, r11	; 0x01
	laserDiodeData.temperature = temperature;
    12e2:	32 96       	adiw	r30, 0x02	; 2
    12e4:	80 91 d8 24 	lds	r24, 0x24D8
    12e8:	90 91 d9 24 	lds	r25, 0x24D9
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    12f0:	32 96       	adiw	r30, 0x02	; 2
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	80 83       	st	Z, r24
    12f8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    12fa:	32 96       	adiw	r30, 0x02	; 2
    12fc:	10 82       	st	Z, r1
    12fe:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    1300:	36 96       	adiw	r30, 0x06	; 6
    1302:	10 82       	st	Z, r1
    1304:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    1306:	32 96       	adiw	r30, 0x02	; 2
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    1310:	34 96       	adiw	r30, 0x04	; 4
    1312:	10 82       	st	Z, r1
    1314:	11 82       	std	Z+1, r1	; 0x01
    1316:	12 82       	std	Z+2, r1	; 0x02
    1318:	13 82       	std	Z+3, r1	; 0x03
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    131a:	47 e0       	ldi	r20, 0x07	; 7
    131c:	63 e0       	ldi	r22, 0x03	; 3
    131e:	86 e9       	ldi	r24, 0x96	; 150
    1320:	95 e2       	ldi	r25, 0x25	; 37
    1322:	0e 94 e6 30 	call	0x61cc	; 0x61cc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    1326:	6e a9       	ldd	r22, Y+54	; 0x36
    1328:	7f a9       	ldd	r23, Y+55	; 0x37
    132a:	86 e9       	ldi	r24, 0x96	; 150
    132c:	95 e2       	ldi	r25, 0x25	; 37
    132e:	0e 94 34 31 	call	0x6268	; 0x6268 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1332:	68 ad       	ldd	r22, Y+56	; 0x38
    1334:	79 ad       	ldd	r23, Y+57	; 0x39
    1336:	86 e9       	ldi	r24, 0x96	; 150
    1338:	95 e2       	ldi	r25, 0x25	; 37
    133a:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	ae 01       	movw	r20, r28
    1342:	6b e5       	ldi	r22, 0x5B	; 91
    1344:	76 e0       	ldi	r23, 0x06	; 6
    1346:	86 e9       	ldi	r24, 0x96	; 150
    1348:	95 e2       	ldi	r25, 0x25	; 37
    134a:	0e 94 4d 31 	call	0x629a	; 0x629a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	ae 01       	movw	r20, r28
    1352:	6b ea       	ldi	r22, 0xAB	; 171
    1354:	7e e0       	ldi	r23, 0x0E	; 14
    1356:	86 e9       	ldi	r24, 0x96	; 150
    1358:	95 e2       	ldi	r25, 0x25	; 37
    135a:	0e 94 6f 31 	call	0x62de	; 0x62de <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    135e:	60 e1       	ldi	r22, 0x10	; 16
    1360:	86 e9       	ldi	r24, 0x96	; 150
    1362:	95 e2       	ldi	r25, 0x25	; 37
    1364:	0e 94 16 31 	call	0x622c	; 0x622c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1368:	60 e1       	ldi	r22, 0x10	; 16
    136a:	86 e9       	ldi	r24, 0x96	; 150
    136c:	95 e2       	ldi	r25, 0x25	; 37
    136e:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
#endif
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	08 95       	ret

0000138c <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	1f 92       	push	r1
    139a:	1f 92       	push	r1
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_Z4swapj>
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    13ae:	87 01       	movw	r16, r14
    13b0:	02 58       	subi	r16, 0x82	; 130
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	22 e0       	ldi	r18, 0x02	; 2
    13b6:	ae 01       	movw	r20, r28
    13b8:	4f 5f       	subi	r20, 0xFF	; 255
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	f8 01       	movw	r30, r16
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	0e 94 57 2a 	call	0x54ae	; 0x54ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    13d2:	a7 01       	movw	r20, r14
    13d4:	4a 5b       	subi	r20, 0xBA	; 186
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	2a e2       	ldi	r18, 0x2A	; 42
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    13f4:	68 ea       	ldi	r22, 0xA8	; 168
    13f6:	71 e6       	ldi	r23, 0x61	; 97
    13f8:	8c e9       	ldi	r24, 0x9C	; 156
    13fa:	95 e2       	ldi	r25, 0x25	; 37
    13fc:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	f7 01       	movw	r30, r14
    1406:	84 87       	std	Z+12, r24	; 0x0c
    1408:	95 87       	std	Z+13, r25	; 0x0d
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	08 95       	ret

0000141c <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <_ZN16CLaserControlApp3RunEv+0x16>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <_ZN16CLaserControlApp3RunEv+0x18>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    143a:	8c 01       	movw	r16, r24
    143c:	02 58       	subi	r16, 0x82	; 130
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	42 e0       	ldi	r20, 0x02	; 2
    1442:	63 e0       	ldi	r22, 0x03	; 3
    1444:	f8 01       	movw	r30, r16
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	0e 94 a5 2a 	call	0x554a	; 0x554a <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    144e:	f8 01       	movw	r30, r16
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    1458:	f8 01       	movw	r30, r16
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	0e 94 31 2a 	call	0x5462	; 0x5462 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1462:	ff ef       	ldi	r31, 0xFF	; 255
    1464:	29 ef       	ldi	r18, 0xF9	; 249
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	f1 50       	subi	r31, 0x01	; 1
    146a:	20 40       	sbci	r18, 0x00	; 0
    146c:	80 40       	sbci	r24, 0x00	; 0
    146e:	e1 f7       	brne	.-8      	; 0x1468 <_ZN16CLaserControlApp3RunEv+0x4c>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <_ZN16CLaserControlApp3RunEv+0x56>
    1472:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    1474:	f7 01       	movw	r30, r14
    1476:	84 85       	ldd	r24, Z+12	; 0x0c
    1478:	95 85       	ldd	r25, Z+13	; 0x0d
    147a:	9f 70       	andi	r25, 0x0F	; 15
    147c:	89 2b       	or	r24, r25
    147e:	09 f4       	brne	.+2      	; 0x1482 <_ZN16CLaserControlApp3RunEv+0x66>
    1480:	41 c0       	rjmp	.+130    	; 0x1504 <_ZN16CLaserControlApp3RunEv+0xe8>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    1482:	22 e0       	ldi	r18, 0x02	; 2
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	48 ed       	ldi	r20, 0xD8	; 216
    1488:	54 e2       	ldi	r21, 0x24	; 36
    148a:	6c e0       	ldi	r22, 0x0C	; 12
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	c7 01       	movw	r24, r14
    1490:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1494:	f7 01       	movw	r30, r14
    1496:	e6 58       	subi	r30, 0x86	; 134
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	44 97       	sbiw	r24, 0x14	; 20
    14a0:	28 f4       	brcc	.+10     	; 0x14ac <_ZN16CLaserControlApp3RunEv+0x90>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	70 97       	sbiw	r30, 0x10	; 16
    14a8:	80 83       	st	Z, r24
    14aa:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    14ac:	f7 01       	movw	r30, r14
    14ae:	e6 58       	subi	r30, 0x86	; 134
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	44 97       	sbiw	r24, 0x14	; 20
    14b8:	28 f0       	brcs	.+10     	; 0x14c4 <_ZN16CLaserControlApp3RunEv+0xa8>
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	89 97       	sbiw	r24, 0x29	; 41
    14c0:	08 f4       	brcc	.+2      	; 0x14c4 <_ZN16CLaserControlApp3RunEv+0xa8>
    14c2:	20 c4       	rjmp	.+2112   	; 0x1d04 <_ZN16CLaserControlApp3RunEv+0x8e8>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    14c4:	f7 01       	movw	r30, r14
    14c6:	e6 58       	subi	r30, 0x86	; 134
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	89 97       	sbiw	r24, 0x29	; 41
    14d0:	28 f0       	brcs	.+10     	; 0x14dc <_ZN16CLaserControlApp3RunEv+0xc0>
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	70 97       	sbiw	r30, 0x10	; 16
    14d8:	80 83       	st	Z, r24
    14da:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    14dc:	22 e0       	ldi	r18, 0x02	; 2
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	a7 01       	movw	r20, r14
    14e2:	46 59       	subi	r20, 0x96	; 150
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	63 e1       	ldi	r22, 0x13	; 19
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	c7 01       	movw	r24, r14
    14ec:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    14f0:	22 e0       	ldi	r18, 0x02	; 2
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	a7 01       	movw	r20, r14
    14f6:	46 58       	subi	r20, 0x86	; 134
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	6e e0       	ldi	r22, 0x0E	; 14
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	c7 01       	movw	r24, r14
    1500:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    1504:	f7 01       	movw	r30, r14
    1506:	84 85       	ldd	r24, Z+12	; 0x0c
    1508:	95 85       	ldd	r25, Z+13	; 0x0d
    150a:	88 73       	andi	r24, 0x38	; 56
    150c:	99 27       	eor	r25, r25
    150e:	89 2b       	or	r24, r25
    1510:	79 f0       	breq	.+30     	; 0x1530 <_ZN16CLaserControlApp3RunEv+0x114>
	{
		if (temperature > 300)
    1512:	80 91 d8 24 	lds	r24, 0x24D8
    1516:	90 91 d9 24 	lds	r25, 0x24D9
    151a:	8d 32       	cpi	r24, 0x2D	; 45
    151c:	91 40       	sbci	r25, 0x01	; 1
    151e:	44 f0       	brlt	.+16     	; 0x1530 <_ZN16CLaserControlApp3RunEv+0x114>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    1520:	69 e2       	ldi	r22, 0x29	; 41
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	c7 01       	movw	r24, r14
    1526:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    152a:	f7 01       	movw	r30, r14
    152c:	87 85       	ldd	r24, Z+15	; 0x0f
    152e:	80 8b       	std	Z+16, r24	; 0x10
		}
	}
	
	switch (state)
    1530:	f7 01       	movw	r30, r14
    1532:	84 85       	ldd	r24, Z+12	; 0x0c
    1534:	95 85       	ldd	r25, Z+13	; 0x0d
    1536:	81 15       	cp	r24, r1
    1538:	f2 e0       	ldi	r31, 0x02	; 2
    153a:	9f 07       	cpc	r25, r31
    153c:	09 f4       	brne	.+2      	; 0x1540 <_ZN16CLaserControlApp3RunEv+0x124>
    153e:	cb c2       	rjmp	.+1430   	; 0x1ad6 <_ZN16CLaserControlApp3RunEv+0x6ba>
    1540:	1c f5       	brge	.+70     	; 0x1588 <_ZN16CLaserControlApp3RunEv+0x16c>
    1542:	88 30       	cpi	r24, 0x08	; 8
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <_ZN16CLaserControlApp3RunEv+0x12e>
    1548:	bc c1       	rjmp	.+888    	; 0x18c2 <_ZN16CLaserControlApp3RunEv+0x4a6>
    154a:	64 f4       	brge	.+24     	; 0x1564 <_ZN16CLaserControlApp3RunEv+0x148>
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <_ZN16CLaserControlApp3RunEv+0x138>
    1552:	4d c1       	rjmp	.+666    	; 0x17ee <_ZN16CLaserControlApp3RunEv+0x3d2>
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	91 05       	cpc	r25, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <_ZN16CLaserControlApp3RunEv+0x140>
    155a:	51 c0       	rjmp	.+162    	; 0x15fe <_ZN16CLaserControlApp3RunEv+0x1e2>
    155c:	89 2b       	or	r24, r25
    155e:	09 f0       	breq	.+2      	; 0x1562 <_ZN16CLaserControlApp3RunEv+0x146>
    1560:	b0 c3       	rjmp	.+1888   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    1562:	42 c0       	rjmp	.+132    	; 0x15e8 <_ZN16CLaserControlApp3RunEv+0x1cc>
    1564:	80 32       	cpi	r24, 0x20	; 32
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <_ZN16CLaserControlApp3RunEv+0x150>
    156a:	bc c1       	rjmp	.+888    	; 0x18e4 <_ZN16CLaserControlApp3RunEv+0x4c8>
    156c:	24 f4       	brge	.+8      	; 0x1576 <_ZN16CLaserControlApp3RunEv+0x15a>
    156e:	40 97       	sbiw	r24, 0x10	; 16
    1570:	09 f4       	brne	.+2      	; 0x1574 <_ZN16CLaserControlApp3RunEv+0x158>
    1572:	b8 c1       	rjmp	.+880    	; 0x18e4 <_ZN16CLaserControlApp3RunEv+0x4c8>
    1574:	a6 c3       	rjmp	.+1868   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    1576:	80 34       	cpi	r24, 0x40	; 64
    1578:	91 05       	cpc	r25, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <_ZN16CLaserControlApp3RunEv+0x162>
    157c:	6d c1       	rjmp	.+730    	; 0x1858 <_ZN16CLaserControlApp3RunEv+0x43c>
    157e:	81 15       	cp	r24, r1
    1580:	91 40       	sbci	r25, 0x01	; 1
    1582:	09 f4       	brne	.+2      	; 0x1586 <_ZN16CLaserControlApp3RunEv+0x16a>
    1584:	6a c2       	rjmp	.+1236   	; 0x1a5a <_ZN16CLaserControlApp3RunEv+0x63e>
    1586:	9d c3       	rjmp	.+1850   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    1588:	81 15       	cp	r24, r1
    158a:	f7 e0       	ldi	r31, 0x07	; 7
    158c:	9f 07       	cpc	r25, r31
    158e:	09 f4       	brne	.+2      	; 0x1592 <_ZN16CLaserControlApp3RunEv+0x176>
    1590:	3e c2       	rjmp	.+1148   	; 0x1a0e <_ZN16CLaserControlApp3RunEv+0x5f2>
    1592:	ac f4       	brge	.+42     	; 0x15be <_ZN16CLaserControlApp3RunEv+0x1a2>
    1594:	81 15       	cp	r24, r1
    1596:	e4 e0       	ldi	r30, 0x04	; 4
    1598:	9e 07       	cpc	r25, r30
    159a:	09 f4       	brne	.+2      	; 0x159e <_ZN16CLaserControlApp3RunEv+0x182>
    159c:	05 c3       	rjmp	.+1546   	; 0x1ba8 <_ZN16CLaserControlApp3RunEv+0x78c>
    159e:	2c f4       	brge	.+10     	; 0x15aa <_ZN16CLaserControlApp3RunEv+0x18e>
    15a0:	81 15       	cp	r24, r1
    15a2:	93 40       	sbci	r25, 0x03	; 3
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <_ZN16CLaserControlApp3RunEv+0x18c>
    15a6:	cd c2       	rjmp	.+1434   	; 0x1b42 <_ZN16CLaserControlApp3RunEv+0x726>
    15a8:	8c c3       	rjmp	.+1816   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15aa:	81 15       	cp	r24, r1
    15ac:	e5 e0       	ldi	r30, 0x05	; 5
    15ae:	9e 07       	cpc	r25, r30
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <_ZN16CLaserControlApp3RunEv+0x198>
    15b2:	44 c2       	rjmp	.+1160   	; 0x1a3c <_ZN16CLaserControlApp3RunEv+0x620>
    15b4:	81 15       	cp	r24, r1
    15b6:	96 40       	sbci	r25, 0x06	; 6
    15b8:	09 f4       	brne	.+2      	; 0x15bc <_ZN16CLaserControlApp3RunEv+0x1a0>
    15ba:	17 c2       	rjmp	.+1070   	; 0x19ea <_ZN16CLaserControlApp3RunEv+0x5ce>
    15bc:	82 c3       	rjmp	.+1796   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15be:	81 15       	cp	r24, r1
    15c0:	20 e2       	ldi	r18, 0x20	; 32
    15c2:	92 07       	cpc	r25, r18
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <_ZN16CLaserControlApp3RunEv+0x1ac>
    15c6:	2e c3       	rjmp	.+1628   	; 0x1c24 <_ZN16CLaserControlApp3RunEv+0x808>
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <_ZN16CLaserControlApp3RunEv+0x1b8>
    15ca:	81 15       	cp	r24, r1
    15cc:	90 41       	sbci	r25, 0x10	; 16
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <_ZN16CLaserControlApp3RunEv+0x1b6>
    15d0:	f1 c2       	rjmp	.+1506   	; 0x1bb4 <_ZN16CLaserControlApp3RunEv+0x798>
    15d2:	77 c3       	rjmp	.+1774   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15d4:	81 15       	cp	r24, r1
    15d6:	20 e3       	ldi	r18, 0x30	; 48
    15d8:	92 07       	cpc	r25, r18
    15da:	09 f4       	brne	.+2      	; 0x15de <_ZN16CLaserControlApp3RunEv+0x1c2>
    15dc:	50 c3       	rjmp	.+1696   	; 0x1c7e <_ZN16CLaserControlApp3RunEv+0x862>
    15de:	81 15       	cp	r24, r1
    15e0:	90 44       	sbci	r25, 0x40	; 64
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <_ZN16CLaserControlApp3RunEv+0x1ca>
    15e4:	69 c3       	rjmp	.+1746   	; 0x1cb8 <_ZN16CLaserControlApp3RunEv+0x89c>
    15e6:	6d c3       	rjmp	.+1754   	; 0x1cc2 <_ZN16CLaserControlApp3RunEv+0x8a6>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    15e8:	63 e0       	ldi	r22, 0x03	; 3
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	c7 01       	movw	r24, r14
    15ee:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	f7 01       	movw	r30, r14
    15f8:	84 87       	std	Z+12, r24	; 0x0c
    15fa:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    15fc:	66 c3       	rjmp	.+1740   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    15fe:	f7 01       	movw	r30, r14
    1600:	e8 5a       	subi	r30, 0xA8	; 168
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	a0 80       	ld	r10, Z
    1606:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    1608:	87 01       	movw	r16, r14
    160a:	06 5a       	subi	r16, 0xA6	; 166
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
    160e:	f8 01       	movw	r30, r16
    1610:	c0 80       	ld	r12, Z
    1612:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    1614:	46 e0       	ldi	r20, 0x06	; 6
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	62 e0       	ldi	r22, 0x02	; 2
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	c7 01       	movw	r24, r14
    161e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1622:	ff ef       	ldi	r31, 0xFF	; 255
    1624:	29 ef       	ldi	r18, 0xF9	; 249
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	f1 50       	subi	r31, 0x01	; 1
    162a:	20 40       	sbci	r18, 0x00	; 0
    162c:	80 40       	sbci	r24, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <_ZN16CLaserControlApp3RunEv+0x20c>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <_ZN16CLaserControlApp3RunEv+0x216>
    1632:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    1634:	42 e0       	ldi	r20, 0x02	; 2
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	6d e0       	ldi	r22, 0x0D	; 13
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	c7 01       	movw	r24, r14
    163e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1642:	9f ef       	ldi	r25, 0xFF	; 255
    1644:	e9 ef       	ldi	r30, 0xF9	; 249
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	91 50       	subi	r25, 0x01	; 1
    164a:	e0 40       	sbci	r30, 0x00	; 0
    164c:	f0 40       	sbci	r31, 0x00	; 0
    164e:	e1 f7       	brne	.-8      	; 0x1648 <_ZN16CLaserControlApp3RunEv+0x22c>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <_ZN16CLaserControlApp3RunEv+0x236>
    1652:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    1654:	42 e0       	ldi	r20, 0x02	; 2
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	c7 01       	movw	r24, r14
    165e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	89 ef       	ldi	r24, 0xF9	; 249
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	21 50       	subi	r18, 0x01	; 1
    166a:	80 40       	sbci	r24, 0x00	; 0
    166c:	90 40       	sbci	r25, 0x00	; 0
    166e:	e1 f7       	brne	.-8      	; 0x1668 <_ZN16CLaserControlApp3RunEv+0x24c>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <_ZN16CLaserControlApp3RunEv+0x256>
    1672:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    1674:	42 e0       	ldi	r20, 0x02	; 2
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	6a e0       	ldi	r22, 0x0A	; 10
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	c7 01       	movw	r24, r14
    167e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1682:	ef ef       	ldi	r30, 0xFF	; 255
    1684:	f9 ef       	ldi	r31, 0xF9	; 249
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	e1 50       	subi	r30, 0x01	; 1
    168a:	f0 40       	sbci	r31, 0x00	; 0
    168c:	20 40       	sbci	r18, 0x00	; 0
    168e:	e1 f7       	brne	.-8      	; 0x1688 <_ZN16CLaserControlApp3RunEv+0x26c>
    1690:	00 c0       	rjmp	.+0      	; 0x1692 <_ZN16CLaserControlApp3RunEv+0x276>
    1692:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    1694:	42 e0       	ldi	r20, 0x02	; 2
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	6b e0       	ldi	r22, 0x0B	; 11
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	c7 01       	movw	r24, r14
    169e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	99 ef       	ldi	r25, 0xF9	; 249
    16a6:	e0 e0       	ldi	r30, 0x00	; 0
    16a8:	81 50       	subi	r24, 0x01	; 1
    16aa:	90 40       	sbci	r25, 0x00	; 0
    16ac:	e0 40       	sbci	r30, 0x00	; 0
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <_ZN16CLaserControlApp3RunEv+0x28c>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <_ZN16CLaserControlApp3RunEv+0x296>
    16b2:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    16b4:	f7 01       	movw	r30, r14
    16b6:	fe 96       	adiw	r30, 0x3e	; 62
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_Z6swap32m>
    16c4:	f7 01       	movw	r30, r14
    16c6:	ec 5a       	subi	r30, 0xAC	; 172
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	60 83       	st	Z, r22
    16cc:	71 83       	std	Z+1, r23	; 0x01
    16ce:	82 83       	std	Z+2, r24	; 0x02
    16d0:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature = temperature;
    16d2:	80 91 d8 24 	lds	r24, 0x24D8
    16d6:	90 91 d9 24 	lds	r25, 0x24D9
    16da:	38 96       	adiw	r30, 0x08	; 8
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    16e0:	7e 96       	adiw	r30, 0x1e	; 30
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	7a 97       	sbiw	r30, 0x1a	; 26
    16e8:	80 83       	st	Z, r24
    16ea:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    16ec:	f8 01       	movw	r30, r16
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	6c 15       	cp	r22, r12
    16f4:	7d 05       	cpc	r23, r13
    16f6:	39 f0       	breq	.+14     	; 0x1706 <_ZN16CLaserControlApp3RunEv+0x2ea>
				{
					PhototypePreset(laserDiodeData.phototype);
    16f8:	c7 01       	movw	r24, r14
    16fa:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	f7 01       	movw	r30, r14
    1702:	81 8b       	std	Z+17, r24	; 0x11
    1704:	4f c0       	rjmp	.+158    	; 0x17a4 <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				if (melanin != laserDiodeData.melanin)
    1706:	f7 01       	movw	r30, r14
    1708:	e8 5a       	subi	r30, 0xA8	; 168
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	60 81       	ld	r22, Z
    170e:	71 81       	ldd	r23, Z+1	; 0x01
    1710:	6a 15       	cp	r22, r10
    1712:	7b 05       	cpc	r23, r11
    1714:	39 f0       	breq	.+14     	; 0x1724 <_ZN16CLaserControlApp3RunEv+0x308>
				{
					MelaninPreset(laserDiodeData.melanin);
    1716:	c7 01       	movw	r24, r14
    1718:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	f7 01       	movw	r30, r14
    1720:	81 8b       	std	Z+17, r24	; 0x11
    1722:	40 c0       	rjmp	.+128    	; 0x17a4 <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    1724:	f7 01       	movw	r30, r14
    1726:	ea 5b       	subi	r30, 0xBA	; 186
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    172c:	f7 01       	movw	r30, r14
    172e:	96 85       	ldd	r25, Z+14	; 0x0e
    1730:	98 17       	cp	r25, r24
    1732:	19 f0       	breq	.+6      	; 0x173a <_ZN16CLaserControlApp3RunEv+0x31e>
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	91 8b       	std	Z+17, r25	; 0x11
    1738:	86 87       	std	Z+14, r24	; 0x0e
				
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    173a:	f7 01       	movw	r30, r14
    173c:	86 85       	ldd	r24, Z+14	; 0x0e
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	bc 01       	movw	r22, r24
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	68 0f       	add	r22, r24
    1748:	79 1f       	adc	r23, r25
    174a:	66 0f       	add	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	68 5e       	subi	r22, 0xE8	; 232
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	6e 0d       	add	r22, r14
    1754:	7f 1d       	adc	r23, r15
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	fb 01       	movw	r30, r22
    175a:	d7 01       	movw	r26, r14
    175c:	a8 5b       	subi	r26, 0xB8	; 184
    175e:	bf 4f       	sbci	r27, 0xFF	; 255
    1760:	01 90       	ld	r0, Z+
    1762:	0d 92       	st	X+, r0
    1764:	8a 95       	dec	r24
    1766:	e1 f7       	brne	.-8      	; 0x1760 <_ZN16CLaserControlApp3RunEv+0x344>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    1768:	87 01       	movw	r16, r14
    176a:	02 5b       	subi	r16, 0xB2	; 178
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	c7 01       	movw	r24, r14
    1770:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1774:	f8 01       	movw	r30, r16
    1776:	20 83       	st	Z, r18
    1778:	31 83       	std	Z+1, r19	; 0x01
    177a:	42 83       	std	Z+2, r20	; 0x02
    177c:	53 83       	std	Z+3, r21	; 0x03
    177e:	64 83       	std	Z+4, r22	; 0x04
    1780:	75 83       	std	Z+5, r23	; 0x05
					laserPower = m_structLaserProfile[Profile].EnergyPercent;
    1782:	f7 01       	movw	r30, r14
    1784:	86 85       	ldd	r24, Z+14	; 0x0e
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	fc 01       	movw	r30, r24
    178a:	ee 0f       	add	r30, r30
    178c:	ff 1f       	adc	r31, r31
    178e:	e8 0f       	add	r30, r24
    1790:	f9 1f       	adc	r31, r25
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	ee 0d       	add	r30, r14
    1798:	ff 1d       	adc	r31, r15
    179a:	84 8d       	ldd	r24, Z+28	; 0x1c
    179c:	95 8d       	ldd	r25, Z+29	; 0x1d
    179e:	f7 01       	movw	r30, r14
    17a0:	84 af       	std	Z+60, r24	; 0x3c
    17a2:	95 af       	std	Z+61, r25	; 0x3d
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    17a4:	f7 01       	movw	r30, r14
    17a6:	26 85       	ldd	r18, Z+14	; 0x0e
    17a8:	a7 01       	movw	r20, r14
    17aa:	46 5b       	subi	r20, 0xB6	; 182
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	b7 01       	movw	r22, r14
    17b0:	68 5b       	subi	r22, 0xB8	; 184
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	c7 01       	movw	r24, r14
    17b6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    17ba:	f7 01       	movw	r30, r14
    17bc:	81 8b       	std	Z+17, r24	; 0x11
				
				laserPower = m_wMaxEnergy * laserPower / 100;
    17be:	44 89       	ldd	r20, Z+20	; 0x14
    17c0:	55 89       	ldd	r21, Z+21	; 0x15
    17c2:	84 ad       	ldd	r24, Z+60	; 0x3c
    17c4:	95 ad       	ldd	r25, Z+61	; 0x3d
    17c6:	48 9f       	mul	r20, r24
    17c8:	90 01       	movw	r18, r0
    17ca:	49 9f       	mul	r20, r25
    17cc:	30 0d       	add	r19, r0
    17ce:	58 9f       	mul	r21, r24
    17d0:	30 0d       	add	r19, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	36 95       	lsr	r19
    17d6:	27 95       	ror	r18
    17d8:	36 95       	lsr	r19
    17da:	27 95       	ror	r18
    17dc:	ab e7       	ldi	r26, 0x7B	; 123
    17de:	b4 e1       	ldi	r27, 0x14	; 20
    17e0:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	84 af       	std	Z+60, r24	; 0x3c
    17ea:	95 af       	std	Z+61, r25	; 0x3d
					laserDiodeData.laserprofile.EnergyPercent = m_wMaxEnergy;
					laserPower = m_wMaxEnergy;
					update = true;
				}*/
			}
		break;
    17ec:	6e c2       	rjmp	.+1244   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    17ee:	f7 01       	movw	r30, r14
    17f0:	82 89       	ldd	r24, Z+18	; 0x12
    17f2:	88 23       	and	r24, r24
    17f4:	b1 f0       	breq	.+44     	; 0x1822 <_ZN16CLaserControlApp3RunEv+0x406>
				{
					timervar.timer_minutes = m_wMinutes;
    17f6:	e0 59       	subi	r30, 0x90	; 144
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    1802:	32 96       	adiw	r30, 0x02	; 2
    1804:	80 81       	ld	r24, Z
    1806:	91 81       	ldd	r25, Z+1	; 0x01
    1808:	8b 83       	std	Y+3, r24	; 0x03
    180a:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    180c:	24 e0       	ldi	r18, 0x04	; 4
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	ae 01       	movw	r20, r28
    1812:	4f 5f       	subi	r20, 0xFF	; 255
    1814:	5f 4f       	sbci	r21, 0xFF	; 255
    1816:	6f e0       	ldi	r22, 0x0F	; 15
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	c7 01       	movw	r24, r14
    181c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    1820:	54 c2       	rjmp	.+1192   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    1822:	f7 01       	movw	r30, r14
    1824:	86 85       	ldd	r24, Z+14	; 0x0e
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	ac 01       	movw	r20, r24
    182a:	44 0f       	add	r20, r20
    182c:	55 1f       	adc	r21, r21
    182e:	48 0f       	add	r20, r24
    1830:	59 1f       	adc	r21, r25
    1832:	44 0f       	add	r20, r20
    1834:	55 1f       	adc	r21, r21
    1836:	48 5e       	subi	r20, 0xE8	; 232
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
    183a:	4e 0d       	add	r20, r14
    183c:	5f 1d       	adc	r21, r15
    183e:	26 e0       	ldi	r18, 0x06	; 6
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	c7 01       	movw	r24, r14
    1848:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    184c:	6c e0       	ldi	r22, 0x0C	; 12
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	c7 01       	movw	r24, r14
    1852:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    1856:	39 c2       	rjmp	.+1138   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    1858:	80 91 d8 24 	lds	r24, 0x24D8
    185c:	90 91 d9 24 	lds	r25, 0x24D9
    1860:	6a e0       	ldi	r22, 0x0A	; 10
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	0e 94 1c 33 	call	0x6638	; 0x6638 <__divmodhi4>
    1868:	69 83       	std	Y+1, r22	; 0x01
    186a:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1870:	24 e0       	ldi	r18, 0x04	; 4
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	ae 01       	movw	r20, r28
    1876:	4f 5f       	subi	r20, 0xFF	; 255
    1878:	5f 4f       	sbci	r21, 0xFF	; 255
    187a:	6f e0       	ldi	r22, 0x0F	; 15
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	c7 01       	movw	r24, r14
    1880:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    1884:	f7 01       	movw	r30, r14
    1886:	ea 58       	subi	r30, 0x8A	; 138
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	36 97       	sbiw	r30, 0x06	; 6
    1890:	80 83       	st	Z, r24
    1892:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1894:	38 96       	adiw	r30, 0x08	; 8
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	36 97       	sbiw	r30, 0x06	; 6
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	f7 01       	movw	r30, r14
    18a4:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    18a6:	80 91 d8 24 	lds	r24, 0x24D8
    18aa:	90 91 d9 24 	lds	r25, 0x24D9
    18ae:	82 32       	cpi	r24, 0x22	; 34
    18b0:	91 40       	sbci	r25, 0x01	; 1
    18b2:	0c f0       	brlt	.+2      	; 0x18b6 <_ZN16CLaserControlApp3RunEv+0x49a>
    18b4:	0a c2       	rjmp	.+1044   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
					SetPictureId(PICID_WORK_PREPARE);
    18b6:	67 e0       	ldi	r22, 0x07	; 7
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	c7 01       	movw	r24, r14
    18bc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    18c0:	04 c2       	rjmp	.+1032   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    18c2:	80 91 d8 24 	lds	r24, 0x24D8
    18c6:	90 91 d9 24 	lds	r25, 0x24D9
    18ca:	8d 32       	cpi	r24, 0x2D	; 45
    18cc:	91 40       	sbci	r25, 0x01	; 1
    18ce:	0c f4       	brge	.+2      	; 0x18d2 <_ZN16CLaserControlApp3RunEv+0x4b6>
    18d0:	fc c1       	rjmp	.+1016   	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    18d2:	69 e2       	ldi	r22, 0x29	; 41
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	c7 01       	movw	r24, r14
    18d8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    18dc:	f7 01       	movw	r30, r14
    18de:	87 85       	ldd	r24, Z+15	; 0x0f
    18e0:	80 8b       	std	Z+16, r24	; 0x10
    18e2:	f3 c1       	rjmp	.+998    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    18e4:	f7 01       	movw	r30, r14
    18e6:	84 ad       	ldd	r24, Z+60	; 0x3c
    18e8:	95 ad       	ldd	r25, Z+61	; 0x3d
    18ea:	ac 01       	movw	r20, r24
    18ec:	56 95       	lsr	r21
    18ee:	54 2f       	mov	r21, r20
    18f0:	44 27       	eor	r20, r20
    18f2:	57 95       	ror	r21
    18f4:	47 95       	ror	r20
    18f6:	98 2f       	mov	r25, r24
    18f8:	88 27       	eor	r24, r24
    18fa:	99 0f       	add	r25, r25
    18fc:	48 0f       	add	r20, r24
    18fe:	59 1f       	adc	r21, r25
    1900:	9a 01       	movw	r18, r20
    1902:	a1 e1       	ldi	r26, 0x11	; 17
    1904:	b4 e0       	ldi	r27, 0x04	; 4
    1906:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    190a:	48 1b       	sub	r20, r24
    190c:	59 0b       	sbc	r21, r25
    190e:	56 95       	lsr	r21
    1910:	47 95       	ror	r20
    1912:	84 0f       	add	r24, r20
    1914:	95 1f       	adc	r25, r21
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	92 95       	swap	r25
    191c:	82 95       	swap	r24
    191e:	8f 70       	andi	r24, 0x0F	; 15
    1920:	89 27       	eor	r24, r25
    1922:	9f 70       	andi	r25, 0x0F	; 15
    1924:	89 27       	eor	r24, r25
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	9e 83       	std	Y+6, r25	; 0x06
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1932:	42 e0       	ldi	r20, 0x02	; 2
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	be 01       	movw	r22, r28
    1938:	6b 5f       	subi	r22, 0xFB	; 251
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	8f e9       	ldi	r24, 0x9F	; 159
    193e:	95 e2       	ldi	r25, 0x25	; 37
    1940:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN4CSPI4SendEPhj>
							
				if (!laserBoard.Footswitch())
    1944:	8f e5       	ldi	r24, 0x5F	; 95
    1946:	95 e2       	ldi	r25, 0x25	; 37
    1948:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN11CLaserBoard10FootswitchEv>
    194c:	81 11       	cpse	r24, r1
    194e:	10 c0       	rjmp	.+32     	; 0x1970 <_ZN16CLaserControlApp3RunEv+0x554>
				{
					if (state != APP_WORKLIGHT)
    1950:	f7 01       	movw	r30, r14
    1952:	84 85       	ldd	r24, Z+12	; 0x0c
    1954:	95 85       	ldd	r25, Z+13	; 0x0d
    1956:	80 97       	sbiw	r24, 0x20	; 32
    1958:	d1 f0       	breq	.+52     	; 0x198e <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_STARTED);
    195a:	60 e1       	ldi	r22, 0x10	; 16
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	c7 01       	movw	r24, r14
    1960:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	f7 01       	movw	r30, r14
    196a:	84 87       	std	Z+12, r24	; 0x0c
    196c:	95 87       	std	Z+13, r25	; 0x0d
    196e:	0f c0       	rjmp	.+30     	; 0x198e <_ZN16CLaserControlApp3RunEv+0x572>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    1970:	f7 01       	movw	r30, r14
    1972:	84 85       	ldd	r24, Z+12	; 0x0c
    1974:	95 85       	ldd	r25, Z+13	; 0x0d
    1976:	40 97       	sbiw	r24, 0x10	; 16
    1978:	51 f0       	breq	.+20     	; 0x198e <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_POWERON);
    197a:	6e e0       	ldi	r22, 0x0E	; 14
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    1984:	80 e1       	ldi	r24, 0x10	; 16
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	f7 01       	movw	r30, r14
    198a:	84 87       	std	Z+12, r24	; 0x0c
    198c:	95 87       	std	Z+13, r25	; 0x0d
					}
				}
			
				uint32_t cnt = swap32(laserCounter);
    198e:	f7 01       	movw	r30, r14
    1990:	fe 96       	adiw	r30, 0x3e	; 62
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_Z6swap32m>
    199e:	69 83       	std	Y+1, r22	; 0x01
    19a0:	7a 83       	std	Y+2, r23	; 0x02
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    19a6:	24 e0       	ldi	r18, 0x04	; 4
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	ae 01       	movw	r20, r28
    19ac:	4f 5f       	subi	r20, 0xFF	; 255
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	68 e0       	ldi	r22, 0x08	; 8
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	c7 01       	movw	r24, r14
    19b6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    19ba:	f7 01       	movw	r30, r14
    19bc:	ee 5b       	subi	r30, 0xBE	; 190
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_Z6swap32m>
    19cc:	69 83       	std	Y+1, r22	; 0x01
    19ce:	7a 83       	std	Y+2, r23	; 0x02
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    19d4:	24 e0       	ldi	r18, 0x04	; 4
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	ae 01       	movw	r20, r28
    19da:	4f 5f       	subi	r20, 0xFF	; 255
    19dc:	5f 4f       	sbci	r21, 0xFF	; 255
    19de:	64 e1       	ldi	r22, 0x14	; 20
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	c7 01       	movw	r24, r14
    19e4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    19e8:	70 c1       	rjmp	.+736    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    19ea:	8f e5       	ldi	r24, 0x5F	; 95
    19ec:	95 e2       	ldi	r25, 0x25	; 37
    19ee:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    19f2:	f7 01       	movw	r30, r14
    19f4:	e6 58       	subi	r30, 0x86	; 134
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	cd 97       	sbiw	r24, 0x3d	; 61
    19fe:	08 f4       	brcc	.+2      	; 0x1a02 <_ZN16CLaserControlApp3RunEv+0x5e6>
    1a00:	64 c1       	rjmp	.+712    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
				SetPictureId(PICID_WORKOnReady);
    1a02:	69 e1       	ldi	r22, 0x19	; 25
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	c7 01       	movw	r24, r14
    1a08:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a0c:	5e c1       	rjmp	.+700    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    1a0e:	8f e5       	ldi	r24, 0x5F	; 95
    1a10:	95 e2       	ldi	r25, 0x25	; 37
    1a12:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    1a16:	f7 01       	movw	r30, r14
    1a18:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    1a1a:	80 91 d8 24 	lds	r24, 0x24D8
    1a1e:	90 91 d9 24 	lds	r25, 0x24D9
    1a22:	82 32       	cpi	r24, 0x22	; 34
    1a24:	91 40       	sbci	r25, 0x01	; 1
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <_ZN16CLaserControlApp3RunEv+0x60e>
    1a28:	50 c1       	rjmp	.+672    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
			{
				prepare = true;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	82 8b       	std	Z+18, r24	; 0x12
				SetPictureId(PIC_ID_last);
    1a30:	60 89       	ldd	r22, Z+16	; 0x10
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	c7 01       	movw	r24, r14
    1a36:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a3a:	47 c1       	rjmp	.+654    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    1a3c:	8f e5       	ldi	r24, 0x5F	; 95
    1a3e:	95 e2       	ldi	r25, 0x25	; 37
    1a40:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    1a44:	80 91 68 06 	lds	r24, 0x0668
    1a48:	85 ff       	sbrs	r24, 5
    1a4a:	3f c1       	rjmp	.+638    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
				SetPictureId(PIC_ID_last);
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	60 89       	ldd	r22, Z+16	; 0x10
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	c7 01       	movw	r24, r14
    1a54:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a58:	38 c1       	rjmp	.+624    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    1a5a:	f7 01       	movw	r30, r14
    1a5c:	ee 5b       	subi	r30, 0xBE	; 190
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	10 82       	st	Z, r1
    1a62:	11 82       	std	Z+1, r1	; 0x01
    1a64:	12 82       	std	Z+2, r1	; 0x02
    1a66:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    1a68:	8f e5       	ldi	r24, 0x5F	; 95
    1a6a:	95 e2       	ldi	r25, 0x25	; 37
    1a6c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1a70:	f7 01       	movw	r30, r14
    1a72:	e2 5a       	subi	r30, 0xA2	; 162
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	2c ec       	ldi	r18, 0xCC	; 204
    1a7c:	28 9f       	mul	r18, r24
    1a7e:	b0 01       	movw	r22, r0
    1a80:	29 9f       	mul	r18, r25
    1a82:	70 0d       	add	r23, r0
    1a84:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	95 e2       	ldi	r25, 0x25	; 37
    1a8a:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	f7 01       	movw	r30, r14
    1a92:	83 8b       	std	Z+19, r24	; 0x13
				
				prepare = true;
    1a94:	82 8b       	std	Z+18, r24	; 0x12
				m_wMinutes = m_wSetMin;
    1a96:	ea 58       	subi	r30, 0x8A	; 138
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	36 97       	sbiw	r30, 0x06	; 6
    1aa0:	80 83       	st	Z, r24
    1aa2:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1aa4:	38 96       	adiw	r30, 0x08	; 8
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	36 97       	sbiw	r30, 0x06	; 6
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    1ab0:	80 91 d8 24 	lds	r24, 0x24D8
    1ab4:	90 91 d9 24 	lds	r25, 0x24D9
    1ab8:	83 32       	cpi	r24, 0x23	; 35
    1aba:	91 40       	sbci	r25, 0x01	; 1
    1abc:	34 f0       	brlt	.+12     	; 0x1aca <_ZN16CLaserControlApp3RunEv+0x6ae>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1abe:	67 e2       	ldi	r22, 0x27	; 39
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ac8:	00 c1       	rjmp	.+512    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1aca:	67 e0       	ldi	r22, 0x07	; 7
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	c7 01       	movw	r24, r14
    1ad0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ad4:	fa c0       	rjmp	.+500    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1ad6:	f7 01       	movw	r30, r14
    1ad8:	84 ad       	ldd	r24, Z+60	; 0x3c
    1ada:	95 ad       	ldd	r25, Z+61	; 0x3d
    1adc:	ac 01       	movw	r20, r24
    1ade:	56 95       	lsr	r21
    1ae0:	54 2f       	mov	r21, r20
    1ae2:	44 27       	eor	r20, r20
    1ae4:	57 95       	ror	r21
    1ae6:	47 95       	ror	r20
    1ae8:	98 2f       	mov	r25, r24
    1aea:	88 27       	eor	r24, r24
    1aec:	99 0f       	add	r25, r25
    1aee:	48 0f       	add	r20, r24
    1af0:	59 1f       	adc	r21, r25
    1af2:	9a 01       	movw	r18, r20
    1af4:	a1 e1       	ldi	r26, 0x11	; 17
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    1afc:	48 1b       	sub	r20, r24
    1afe:	59 0b       	sbc	r21, r25
    1b00:	56 95       	lsr	r21
    1b02:	47 95       	ror	r20
    1b04:	84 0f       	add	r24, r20
    1b06:	95 1f       	adc	r25, r21
    1b08:	96 95       	lsr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	92 95       	swap	r25
    1b0e:	82 95       	swap	r24
    1b10:	8f 70       	andi	r24, 0x0F	; 15
    1b12:	89 27       	eor	r24, r25
    1b14:	9f 70       	andi	r25, 0x0F	; 15
    1b16:	89 27       	eor	r24, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1b24:	42 e0       	ldi	r20, 0x02	; 2
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	be 01       	movw	r22, r28
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	8f e9       	ldi	r24, 0x9F	; 159
    1b30:	95 e2       	ldi	r25, 0x25	; 37
    1b32:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    1b36:	6e e0       	ldi	r22, 0x0E	; 14
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	c7 01       	movw	r24, r14
    1b3c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1b40:	c4 c0       	rjmp	.+392    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1b42:	6a e0       	ldi	r22, 0x0A	; 10
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	c7 01       	movw	r24, r14
    1b48:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1b4c:	86 e9       	ldi	r24, 0x96	; 150
    1b4e:	95 e2       	ldi	r25, 0x25	; 37
    1b50:	0e 94 0e 31 	call	0x621c	; 0x621c <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1b54:	60 e1       	ldi	r22, 0x10	; 16
    1b56:	86 e9       	ldi	r24, 0x96	; 150
    1b58:	95 e2       	ldi	r25, 0x25	; 37
    1b5a:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1b5e:	60 e2       	ldi	r22, 0x20	; 32
    1b60:	86 e9       	ldi	r24, 0x96	; 150
    1b62:	95 e2       	ldi	r25, 0x25	; 37
    1b64:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1b68:	8f e5       	ldi	r24, 0x5F	; 95
    1b6a:	95 e2       	ldi	r25, 0x25	; 37
    1b6c:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    1b70:	f7 01       	movw	r30, r14
    1b72:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    1b74:	8f e5       	ldi	r24, 0x5F	; 95
    1b76:	95 e2       	ldi	r25, 0x25	; 37
    1b78:	0e 94 ef 2c 	call	0x59de	; 0x59de <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1b7c:	f7 01       	movw	r30, r14
    1b7e:	fe 96       	adiw	r30, 0x3e	; 62
    1b80:	40 81       	ld	r20, Z
    1b82:	51 81       	ldd	r21, Z+1	; 0x01
    1b84:	62 81       	ldd	r22, Z+2	; 0x02
    1b86:	73 81       	ldd	r23, Z+3	; 0x03
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1b90:	19 82       	std	Y+1, r1	; 0x01
    1b92:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1b94:	42 e0       	ldi	r20, 0x02	; 2
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	be 01       	movw	r22, r28
    1b9a:	6f 5f       	subi	r22, 0xFF	; 255
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	8f e9       	ldi	r24, 0x9F	; 159
    1ba0:	95 e2       	ldi	r25, 0x25	; 37
    1ba2:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN4CSPI4SendEPhj>
			}
		break;
    1ba6:	91 c0       	rjmp	.+290    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1ba8:	6a e0       	ldi	r22, 0x0A	; 10
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	c7 01       	movw	r24, r14
    1bae:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1bb2:	8b c0       	rjmp	.+278    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1bb4:	42 e0       	ldi	r20, 0x02	; 2
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	61 e1       	ldi	r22, 0x11	; 17
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	c7 01       	movw	r24, r14
    1bbe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1bc2:	ff ef       	ldi	r31, 0xFF	; 255
    1bc4:	21 ee       	ldi	r18, 0xE1	; 225
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	f1 50       	subi	r31, 0x01	; 1
    1bca:	20 40       	sbci	r18, 0x00	; 0
    1bcc:	80 40       	sbci	r24, 0x00	; 0
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <_ZN16CLaserControlApp3RunEv+0x7ac>
    1bd0:	00 c0       	rjmp	.+0      	; 0x1bd2 <_ZN16CLaserControlApp3RunEv+0x7b6>
    1bd2:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1bd4:	42 e0       	ldi	r20, 0x02	; 2
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	62 e1       	ldi	r22, 0x12	; 18
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	c7 01       	movw	r24, r14
    1bde:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1be2:	9f ef       	ldi	r25, 0xFF	; 255
    1be4:	e1 ee       	ldi	r30, 0xE1	; 225
    1be6:	f4 e0       	ldi	r31, 0x04	; 4
    1be8:	91 50       	subi	r25, 0x01	; 1
    1bea:	e0 40       	sbci	r30, 0x00	; 0
    1bec:	f0 40       	sbci	r31, 0x00	; 0
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <_ZN16CLaserControlApp3RunEv+0x7cc>
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <_ZN16CLaserControlApp3RunEv+0x7d6>
    1bf2:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	ea 59       	subi	r30, 0x9A	; 154
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	20 81       	ld	r18, Z
    1bfc:	31 81       	ldd	r19, Z+1	; 0x01
    1bfe:	c9 01       	movw	r24, r18
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	90 51       	subi	r25, 0x10	; 16
    1c06:	af 4f       	sbci	r26, 0xFF	; 255
    1c08:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0a:	22 27       	eor	r18, r18
    1c0c:	38 2f       	mov	r19, r24
    1c0e:	49 2f       	mov	r20, r25
    1c10:	5a 2f       	mov	r21, r26
    1c12:	00 e0       	ldi	r16, 0x00	; 0
    1c14:	1c e0       	ldi	r17, 0x0C	; 12
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	71 e0       	ldi	r23, 0x01	; 1
    1c1a:	86 e8       	ldi	r24, 0x86	; 134
    1c1c:	95 e2       	ldi	r25, 0x25	; 37
    1c1e:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1c22:	53 c0       	rjmp	.+166    	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
    1c24:	2f ef       	ldi	r18, 0xFF	; 255
    1c26:	87 ea       	ldi	r24, 0xA7	; 167
    1c28:	91 e6       	ldi	r25, 0x61	; 97
    1c2a:	21 50       	subi	r18, 0x01	; 1
    1c2c:	80 40       	sbci	r24, 0x00	; 0
    1c2e:	90 40       	sbci	r25, 0x00	; 0
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <_ZN16CLaserControlApp3RunEv+0x80e>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <_ZN16CLaserControlApp3RunEv+0x818>
    1c34:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1c36:	42 e0       	ldi	r20, 0x02	; 2
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	62 e1       	ldi	r22, 0x12	; 18
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	c7 01       	movw	r24, r14
    1c40:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c44:	f7 01       	movw	r30, r14
    1c46:	e8 59       	subi	r30, 0x98	; 152
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	20 81       	ld	r18, Z
    1c4c:	31 81       	ldd	r19, Z+1	; 0x01
    1c4e:	32 97       	sbiw	r30, 0x02	; 2
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	28 0f       	add	r18, r24
    1c56:	39 1f       	adc	r19, r25
    1c58:	c9 01       	movw	r24, r18
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	90 51       	subi	r25, 0x10	; 16
    1c60:	af 4f       	sbci	r26, 0xFF	; 255
    1c62:	bf 4f       	sbci	r27, 0xFF	; 255
    1c64:	22 27       	eor	r18, r18
    1c66:	38 2f       	mov	r19, r24
    1c68:	49 2f       	mov	r20, r25
    1c6a:	5a 2f       	mov	r21, r26
    1c6c:	00 e0       	ldi	r16, 0x00	; 0
    1c6e:	11 e0       	ldi	r17, 0x01	; 1
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	7d e0       	ldi	r23, 0x0D	; 13
    1c74:	86 e8       	ldi	r24, 0x86	; 134
    1c76:	95 e2       	ldi	r25, 0x25	; 37
    1c78:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1c7c:	26 c0       	rjmp	.+76     	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c7e:	f7 01       	movw	r30, r14
    1c80:	e8 59       	subi	r30, 0x98	; 152
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	20 81       	ld	r18, Z
    1c86:	31 81       	ldd	r19, Z+1	; 0x01
    1c88:	32 97       	sbiw	r30, 0x02	; 2
    1c8a:	80 81       	ld	r24, Z
    1c8c:	91 81       	ldd	r25, Z+1	; 0x01
    1c8e:	28 0f       	add	r18, r24
    1c90:	39 1f       	adc	r19, r25
    1c92:	c9 01       	movw	r24, r18
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	90 51       	subi	r25, 0x10	; 16
    1c9a:	af 4f       	sbci	r26, 0xFF	; 255
    1c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9e:	22 27       	eor	r18, r18
    1ca0:	38 2f       	mov	r19, r24
    1ca2:	49 2f       	mov	r20, r25
    1ca4:	5a 2f       	mov	r21, r26
    1ca6:	00 e0       	ldi	r16, 0x00	; 0
    1ca8:	11 e0       	ldi	r17, 0x01	; 1
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	7d e0       	ldi	r23, 0x0D	; 13
    1cae:	86 e8       	ldi	r24, 0x86	; 134
    1cb0:	95 e2       	ldi	r25, 0x25	; 37
    1cb2:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1cb8:	86 e8       	ldi	r24, 0x86	; 134
    1cba:	95 e2       	ldi	r25, 0x25	; 37
    1cbc:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <_ZN16CLaserControlApp3RunEv+0x8ae>
		default:
			Database.UnMap();
    1cc2:	86 e8       	ldi	r24, 0x86	; 134
    1cc4:	95 e2       	ldi	r25, 0x25	; 37
    1cc6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
	}
	
	if ((PORTD.IN & PIN6_bm) == 0)
    1cca:	80 91 68 06 	lds	r24, 0x0668
    1cce:	86 fd       	sbrc	r24, 6
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8c6>
		{
			PIC_ID_last = PIC_ID;
    1cd2:	f7 01       	movw	r30, r14
    1cd4:	87 85       	ldd	r24, Z+15	; 0x0f
    1cd6:	80 8b       	std	Z+16, r24	; 0x10
			SetPictureId(PICID_WORK_ERROR1);
    1cd8:	68 e0       	ldi	r22, 0x08	; 8
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	c7 01       	movw	r24, r14
    1cde:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
		}
	
	if (update)
    1ce2:	f7 01       	movw	r30, r14
    1ce4:	81 89       	ldd	r24, Z+17	; 0x11
    1ce6:	88 23       	and	r24, r24
    1ce8:	a9 f0       	breq	.+42     	; 0x1d14 <_ZN16CLaserControlApp3RunEv+0x8f8>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1cea:	a7 01       	movw	r20, r14
    1cec:	4a 5b       	subi	r20, 0xBA	; 186
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	2a e2       	ldi	r18, 0x2A	; 42
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	c7 01       	movw	r24, r14
    1cfa:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1cfe:	f7 01       	movw	r30, r14
    1d00:	11 8a       	std	Z+17, r1	; 0x11
    1d02:	08 c0       	rjmp	.+16     	; 0x1d14 <_ZN16CLaserControlApp3RunEv+0x8f8>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	f7 01       	movw	r30, r14
    1d0a:	e6 59       	subi	r30, 0x96	; 150
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 83       	st	Z, r24
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	d8 cb       	rjmp	.-2128   	; 0x14c4 <_ZN16CLaserControlApp3RunEv+0xa8>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    1d14:	26 96       	adiw	r28, 0x06	; 6
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	df 90       	pop	r13
    1d28:	cf 90       	pop	r12
    1d2a:	bf 90       	pop	r11
    1d2c:	af 90       	pop	r10
    1d2e:	08 95       	ret

00001d30 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    1d30:	fc 01       	movw	r30, r24
    1d32:	86 85       	ldd	r24, Z+14	; 0x0e
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	71 f4       	brne	.+28     	; 0x1d54 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    1d38:	86 e9       	ldi	r24, 0x96	; 150
    1d3a:	95 e2       	ldi	r25, 0x25	; 37
    1d3c:	0e 94 0e 31 	call	0x621c	; 0x621c <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1d40:	60 e1       	ldi	r22, 0x10	; 16
    1d42:	86 e9       	ldi	r24, 0x96	; 150
    1d44:	95 e2       	ldi	r25, 0x25	; 37
    1d46:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1d4a:	60 e2       	ldi	r22, 0x20	; 32
    1d4c:	86 e9       	ldi	r24, 0x96	; 150
    1d4e:	95 e2       	ldi	r25, 0x25	; 37
    1d50:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    1d54:	08 95       	ret

00001d56 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    1d56:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1d5a:	08 95       	ret

00001d5c <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    1d62:	fc 01       	movw	r30, r24
    1d64:	e4 58       	subi	r30, 0x84	; 132
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	89 2b       	or	r24, r25
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	80 83       	st	Z, r24
    1d78:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    1d7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    1d80:	a9 c0       	rjmp	.+338    	; 0x1ed4 <_ZN16CLaserControlApp7OnTimerEv+0x178>
	{
		if (m_wMillSec == 0)
    1d82:	fe 01       	movw	r30, r28
    1d84:	ec 58       	subi	r30, 0x8C	; 140
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	89 2b       	or	r24, r25
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    1d90:	99 c0       	rjmp	.+306    	; 0x1ec4 <_ZN16CLaserControlApp7OnTimerEv+0x168>
		{
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    1d92:	80 91 60 08 	lds	r24, 0x0860
    1d96:	90 91 61 08 	lds	r25, 0x0861
    1d9a:	49 e4       	ldi	r20, 0x49	; 73
    1d9c:	48 9f       	mul	r20, r24
    1d9e:	90 01       	movw	r18, r0
    1da0:	49 9f       	mul	r20, r25
    1da2:	30 0d       	add	r19, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	a5 ec       	ldi	r26, 0xC5	; 197
    1da8:	be e4       	ldi	r27, 0x4E	; 78
    1daa:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    1dae:	96 95       	lsr	r25
    1db0:	87 95       	ror	r24
    1db2:	92 95       	swap	r25
    1db4:	82 95       	swap	r24
    1db6:	8f 70       	andi	r24, 0x0F	; 15
    1db8:	89 27       	eor	r24, r25
    1dba:	9f 70       	andi	r25, 0x0F	; 15
    1dbc:	89 27       	eor	r24, r25
    1dbe:	36 96       	adiw	r30, 0x06	; 6
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1dc4:	83 e9       	ldi	r24, 0x93	; 147
    1dc6:	95 e2       	ldi	r25, 0x25	; 37
    1dc8:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN8CTimerC15ResetEv>
			
			if (m_wSeconds == 0)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ee 58       	subi	r30, 0x8E	; 142
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	89 2b       	or	r24, r25
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <_ZN16CLaserControlApp7OnTimerEv+0x80>
    1dda:	4c c0       	rjmp	.+152    	; 0x1e74 <_ZN16CLaserControlApp7OnTimerEv+0x118>
			{
				if (m_wMinutes == 0)
    1ddc:	32 97       	sbiw	r30, 0x02	; 2
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	89 2b       	or	r24, r25
    1de4:	d1 f5       	brne	.+116    	; 0x1e5a <_ZN16CLaserControlApp7OnTimerEv+0xfe>
				{
					if (state == APP_WORKPREPARE)
    1de6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1de8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dea:	02 97       	sbiw	r24, 0x02	; 2
    1dec:	a1 f5       	brne	.+104    	; 0x1e56 <_ZN16CLaserControlApp7OnTimerEv+0xfa>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    1dee:	22 e0       	ldi	r18, 0x02	; 2
    1df0:	44 e6       	ldi	r20, 0x64	; 100
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	65 e0       	ldi	r22, 0x05	; 5
    1df6:	71 e0       	ldi	r23, 0x01	; 1
    1df8:	8e e5       	ldi	r24, 0x5E	; 94
    1dfa:	95 e2       	ldi	r25, 0x25	; 37
    1dfc:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e00:	8e e5       	ldi	r24, 0x5E	; 94
    1e02:	95 e2       	ldi	r25, 0x25	; 37
    1e04:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    1e08:	22 e0       	ldi	r18, 0x02	; 2
    1e0a:	44 e6       	ldi	r20, 0x64	; 100
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	66 e2       	ldi	r22, 0x26	; 38
    1e10:	71 e0       	ldi	r23, 0x01	; 1
    1e12:	8e e5       	ldi	r24, 0x5E	; 94
    1e14:	95 e2       	ldi	r25, 0x25	; 37
    1e16:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e1a:	8e e5       	ldi	r24, 0x5E	; 94
    1e1c:	95 e2       	ldi	r25, 0x25	; 37
    1e1e:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    1e22:	22 e0       	ldi	r18, 0x02	; 2
    1e24:	44 e6       	ldi	r20, 0x64	; 100
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	69 e4       	ldi	r22, 0x49	; 73
    1e2a:	71 e0       	ldi	r23, 0x01	; 1
    1e2c:	8e e5       	ldi	r24, 0x5E	; 94
    1e2e:	95 e2       	ldi	r25, 0x25	; 37
    1e30:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e34:	8e e5       	ldi	r24, 0x5E	; 94
    1e36:	95 e2       	ldi	r25, 0x25	; 37
    1e38:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    1e3c:	22 e0       	ldi	r18, 0x02	; 2
    1e3e:	44 e6       	ldi	r20, 0x64	; 100
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	6d e5       	ldi	r22, 0x5D	; 93
    1e44:	71 e0       	ldi	r23, 0x01	; 1
    1e46:	8e e5       	ldi	r24, 0x5E	; 94
    1e48:	95 e2       	ldi	r25, 0x25	; 37
    1e4a:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e4e:	8e e5       	ldi	r24, 0x5E	; 94
    1e50:	95 e2       	ldi	r25, 0x25	; 37
    1e52:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1e56:	1a 8a       	std	Y+18, r1	; 0x12
    1e58:	9f c0       	rjmp	.+318    	; 0x1f98 <_ZN16CLaserControlApp7OnTimerEv+0x23c>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    1e5a:	8c e3       	ldi	r24, 0x3C	; 60
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ee 58       	subi	r30, 0x8E	; 142
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    1e68:	32 97       	sbiw	r30, 0x02	; 2
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	80 83       	st	Z, r24
    1e72:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    1e74:	84 e6       	ldi	r24, 0x64	; 100
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ec 58       	subi	r30, 0x8C	; 140
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    1e82:	32 97       	sbiw	r30, 0x02	; 2
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    1e8e:	32 97       	sbiw	r30, 0x02	; 2
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	89 2b       	or	r24, r25
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <_ZN16CLaserControlApp7OnTimerEv+0x13e>
    1e98:	4c c0       	rjmp	.+152    	; 0x1f32 <_ZN16CLaserControlApp7OnTimerEv+0x1d6>
    1e9a:	32 96       	adiw	r30, 0x02	; 2
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	0a 97       	sbiw	r24, 0x0a	; 10
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <_ZN16CLaserControlApp7OnTimerEv+0x14a>
    1ea4:	46 c0       	rjmp	.+140    	; 0x1f32 <_ZN16CLaserControlApp7OnTimerEv+0x1d6>
    1ea6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eaa:	02 97       	sbiw	r24, 0x02	; 2
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <_ZN16CLaserControlApp7OnTimerEv+0x154>
    1eae:	41 c0       	rjmp	.+130    	; 0x1f32 <_ZN16CLaserControlApp7OnTimerEv+0x1d6>
    1eb0:	4e c0       	rjmp	.+156    	; 0x1f4e <_ZN16CLaserControlApp7OnTimerEv+0x1f2>
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ee 58       	subi	r30, 0x8E	; 142
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	05 97       	sbiw	r24, 0x05	; 5
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <_ZN16CLaserControlApp7OnTimerEv+0x166>
    1ec0:	4f c0       	rjmp	.+158    	; 0x1f60 <_ZN16CLaserControlApp7OnTimerEv+0x204>
    1ec2:	5c c0       	rjmp	.+184    	; 0x1f7c <_ZN16CLaserControlApp7OnTimerEv+0x220>
				player.SoundStop();
				//player.beep(1000, 25);
			}
			// ************************************
		}
		m_wMillSec-=10;
    1ec4:	cc 58       	subi	r28, 0x8C	; 140
    1ec6:	df 4f       	sbci	r29, 0xFF	; 255
    1ec8:	88 81       	ld	r24, Y
    1eca:	99 81       	ldd	r25, Y+1	; 0x01
    1ecc:	0a 97       	sbiw	r24, 0x0a	; 10
    1ece:	88 83       	st	Y, r24
    1ed0:	99 83       	std	Y+1, r25	; 0x01
    1ed2:	62 c0       	rjmp	.+196    	; 0x1f98 <_ZN16CLaserControlApp7OnTimerEv+0x23c>
	}
	else
	{
		if (m_wMillSec == 0)
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ec 58       	subi	r30, 0x8C	; 140
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	89 2b       	or	r24, r25
    1ee0:	01 f5       	brne	.+64     	; 0x1f22 <_ZN16CLaserControlApp7OnTimerEv+0x1c6>
		{
			m_wMillSec = 100;
    1ee2:	84 e6       	ldi	r24, 0x64	; 100
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	80 83       	st	Z, r24
    1ee8:	91 83       	std	Z+1, r25	; 0x01
			
			m_wFlow = (TCC1.CNT * 10) / 8;
    1eea:	80 91 60 08 	lds	r24, 0x0860
    1eee:	90 91 61 08 	lds	r25, 0x0861
    1ef2:	9c 01       	movw	r18, r24
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	96 95       	lsr	r25
    1f0a:	87 95       	ror	r24
    1f0c:	96 95       	lsr	r25
    1f0e:	87 95       	ror	r24
    1f10:	96 95       	lsr	r25
    1f12:	87 95       	ror	r24
    1f14:	36 96       	adiw	r30, 0x06	; 6
    1f16:	80 83       	st	Z, r24
    1f18:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1f1a:	83 e9       	ldi	r24, 0x93	; 147
    1f1c:	95 e2       	ldi	r25, 0x25	; 37
    1f1e:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN8CTimerC15ResetEv>
		}
		m_wMillSec-=10;
    1f22:	cc 58       	subi	r28, 0x8C	; 140
    1f24:	df 4f       	sbci	r29, 0xFF	; 255
    1f26:	88 81       	ld	r24, Y
    1f28:	99 81       	ldd	r25, Y+1	; 0x01
    1f2a:	0a 97       	sbiw	r24, 0x0a	; 10
    1f2c:	88 83       	st	Y, r24
    1f2e:	99 83       	std	Y+1, r25	; 0x01
    1f30:	33 c0       	rjmp	.+102    	; 0x1f98 <_ZN16CLaserControlApp7OnTimerEv+0x23c>
					//player.beep(1000, 50);
				}
			}
			else
			{
				player.SoundStart(1000, 25, 2);
    1f32:	22 e0       	ldi	r18, 0x02	; 2
    1f34:	49 e1       	ldi	r20, 0x19	; 25
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	68 ee       	ldi	r22, 0xE8	; 232
    1f3a:	73 e0       	ldi	r23, 0x03	; 3
    1f3c:	8e e5       	ldi	r24, 0x5E	; 94
    1f3e:	95 e2       	ldi	r25, 0x25	; 37
    1f40:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    1f44:	8e e5       	ldi	r24, 0x5E	; 94
    1f46:	95 e2       	ldi	r25, 0x25	; 37
    1f48:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
    1f4c:	bb cf       	rjmp	.-138    	; 0x1ec4 <_ZN16CLaserControlApp7OnTimerEv+0x168>
			m_wSeconds--;
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e0 59       	subi	r30, 0x90	; 144
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	89 2b       	or	r24, r25
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <_ZN16CLaserControlApp7OnTimerEv+0x202>
    1f5c:	aa cf       	rjmp	.-172    	; 0x1eb2 <_ZN16CLaserControlApp7OnTimerEv+0x156>
    1f5e:	0e c0       	rjmp	.+28     	; 0x1f7c <_ZN16CLaserControlApp7OnTimerEv+0x220>
				{
					player.SoundStart(1000, 100, 2);
    1f60:	22 e0       	ldi	r18, 0x02	; 2
    1f62:	44 e6       	ldi	r20, 0x64	; 100
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	68 ee       	ldi	r22, 0xE8	; 232
    1f68:	73 e0       	ldi	r23, 0x03	; 3
    1f6a:	8e e5       	ldi	r24, 0x5E	; 94
    1f6c:	95 e2       	ldi	r25, 0x25	; 37
    1f6e:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f72:	8e e5       	ldi	r24, 0x5E	; 94
    1f74:	95 e2       	ldi	r25, 0x25	; 37
    1f76:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
    1f7a:	a4 cf       	rjmp	.-184    	; 0x1ec4 <_ZN16CLaserControlApp7OnTimerEv+0x168>
					//player.beep(1000, 100);
				}
				else
				{
					player.SoundStart(1000, 50, 2);
    1f7c:	22 e0       	ldi	r18, 0x02	; 2
    1f7e:	42 e3       	ldi	r20, 0x32	; 50
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	68 ee       	ldi	r22, 0xE8	; 232
    1f84:	73 e0       	ldi	r23, 0x03	; 3
    1f86:	8e e5       	ldi	r24, 0x5E	; 94
    1f88:	95 e2       	ldi	r25, 0x25	; 37
    1f8a:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f8e:	8e e5       	ldi	r24, 0x5E	; 94
    1f90:	95 e2       	ldi	r25, 0x25	; 37
    1f92:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
    1f96:	96 cf       	rjmp	.-212    	; 0x1ec4 <_ZN16CLaserControlApp7OnTimerEv+0x168>
			m_wFlow = (TCC1.CNT * 10) / 8;
			flowtimer.Reset();
		}
		m_wMillSec-=10;
	}
}
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1f9e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN16CLaserControlApp7OnTimerEv>
    1fa2:	08 95       	ret

00001fa4 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
	//laserBoard.Relay1Off();
}

void CLaserControlApp::OnPWMTimerOVF()
{
	if (peltier_en)
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	83 89       	ldd	r24, Z+19	; 0x13
    1fa8:	88 23       	and	r24, r24
    1faa:	21 f0       	breq	.+8      	; 0x1fb4 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
	{
		laserBoard.PWMOff();
    1fac:	8f e5       	ldi	r24, 0x5F	; 95
    1fae:	95 e2       	ldi	r25, 0x25	; 37
    1fb0:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <_ZN11CLaserBoard6PWMOffEv>
	}

#ifndef LED_LASER_INDICATOR
	laserBoard.REDOff();
    1fb4:	8f e5       	ldi	r24, 0x5F	; 95
    1fb6:	95 e2       	ldi	r25, 0x25	; 37
    1fb8:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <_ZN11CLaserBoard6REDOffEv>
	laserBoard.GRNOff();
    1fbc:	8f e5       	ldi	r24, 0x5F	; 95
    1fbe:	95 e2       	ldi	r25, 0x25	; 37
    1fc0:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <_ZN11CLaserBoard6GRNOffEv>
	laserBoard.BLUOff();
    1fc4:	8f e5       	ldi	r24, 0x5F	; 95
    1fc6:	95 e2       	ldi	r25, 0x25	; 37
    1fc8:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <_ZN11CLaserBoard6BLUOffEv>
	static int delay = 1000;
	static uint16_t red = 0;
	static uint16_t grn = 0;
	static uint16_t blu = 0;
	
	if (tableGRN[pos] > grn) grn++;
    1fcc:	80 91 e7 22 	lds	r24, 0x22E7
    1fd0:	90 91 e8 22 	lds	r25, 0x22E8
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	e8 5e       	subi	r30, 0xE8	; 232
    1fdc:	ff 4d       	sbci	r31, 0xDF	; 223
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	20 91 e5 22 	lds	r18, 0x22E5
    1fe6:	30 91 e6 22 	lds	r19, 0x22E6
    1fea:	26 17       	cp	r18, r22
    1fec:	37 07       	cpc	r19, r23
    1fee:	30 f4       	brcc	.+12     	; 0x1ffc <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x58>
    1ff0:	2f 5f       	subi	r18, 0xFF	; 255
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	20 93 e5 22 	sts	0x22E5, r18
    1ff8:	30 93 e6 22 	sts	0x22E6, r19
	if (tableGRN[pos] < grn) grn--;
    1ffc:	20 91 e5 22 	lds	r18, 0x22E5
    2000:	30 91 e6 22 	lds	r19, 0x22E6
    2004:	62 17       	cp	r22, r18
    2006:	73 07       	cpc	r23, r19
    2008:	30 f4       	brcc	.+12     	; 0x2016 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x72>
    200a:	21 50       	subi	r18, 0x01	; 1
    200c:	31 09       	sbc	r19, r1
    200e:	20 93 e5 22 	sts	0x22E5, r18
    2012:	30 93 e6 22 	sts	0x22E6, r19
	
	if (tableRED[pos] > red) red++;
    2016:	fc 01       	movw	r30, r24
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	e8 5d       	subi	r30, 0xD8	; 216
    201e:	ff 4d       	sbci	r31, 0xDF	; 223
    2020:	a0 81       	ld	r26, Z
    2022:	b1 81       	ldd	r27, Z+1	; 0x01
    2024:	20 91 e3 22 	lds	r18, 0x22E3
    2028:	30 91 e4 22 	lds	r19, 0x22E4
    202c:	2a 17       	cp	r18, r26
    202e:	3b 07       	cpc	r19, r27
    2030:	30 f4       	brcc	.+12     	; 0x203e <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x9a>
    2032:	2f 5f       	subi	r18, 0xFF	; 255
    2034:	3f 4f       	sbci	r19, 0xFF	; 255
    2036:	20 93 e3 22 	sts	0x22E3, r18
    203a:	30 93 e4 22 	sts	0x22E4, r19
	if (tableRED[pos] < red) red--;
    203e:	20 91 e3 22 	lds	r18, 0x22E3
    2042:	30 91 e4 22 	lds	r19, 0x22E4
    2046:	a2 17       	cp	r26, r18
    2048:	b3 07       	cpc	r27, r19
    204a:	30 f4       	brcc	.+12     	; 0x2058 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0xb4>
    204c:	21 50       	subi	r18, 0x01	; 1
    204e:	31 09       	sbc	r19, r1
    2050:	20 93 e3 22 	sts	0x22E3, r18
    2054:	30 93 e4 22 	sts	0x22E4, r19
	
	if (tableBLU[pos] > blu) blu++;
    2058:	fc 01       	movw	r30, r24
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	e8 5f       	subi	r30, 0xF8	; 248
    2060:	ff 4d       	sbci	r31, 0xDF	; 223
    2062:	20 81       	ld	r18, Z
    2064:	31 81       	ldd	r19, Z+1	; 0x01
    2066:	40 91 e1 22 	lds	r20, 0x22E1
    206a:	50 91 e2 22 	lds	r21, 0x22E2
    206e:	42 17       	cp	r20, r18
    2070:	53 07       	cpc	r21, r19
    2072:	30 f4       	brcc	.+12     	; 0x2080 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0xdc>
    2074:	4f 5f       	subi	r20, 0xFF	; 255
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	40 93 e1 22 	sts	0x22E1, r20
    207c:	50 93 e2 22 	sts	0x22E2, r21
	if (tableBLU[pos] < blu) blu--;
    2080:	40 91 e1 22 	lds	r20, 0x22E1
    2084:	50 91 e2 22 	lds	r21, 0x22E2
    2088:	24 17       	cp	r18, r20
    208a:	35 07       	cpc	r19, r21
    208c:	30 f4       	brcc	.+12     	; 0x209a <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0xf6>
    208e:	41 50       	subi	r20, 0x01	; 1
    2090:	51 09       	sbc	r21, r1
    2092:	40 93 e1 22 	sts	0x22E1, r20
    2096:	50 93 e2 22 	sts	0x22E2, r21
	
	if (tableBLU[pos] == blu && tableRED[pos] == red && tableGRN[pos] == grn)
    209a:	40 91 e1 22 	lds	r20, 0x22E1
    209e:	50 91 e2 22 	lds	r21, 0x22E2
    20a2:	24 17       	cp	r18, r20
    20a4:	35 07       	cpc	r19, r21
    20a6:	81 f5       	brne	.+96     	; 0x2108 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x164>
    20a8:	20 91 e3 22 	lds	r18, 0x22E3
    20ac:	30 91 e4 22 	lds	r19, 0x22E4
    20b0:	a2 17       	cp	r26, r18
    20b2:	b3 07       	cpc	r27, r19
    20b4:	49 f5       	brne	.+82     	; 0x2108 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x164>
    20b6:	20 91 e5 22 	lds	r18, 0x22E5
    20ba:	30 91 e6 22 	lds	r19, 0x22E6
    20be:	62 17       	cp	r22, r18
    20c0:	73 07       	cpc	r23, r19
    20c2:	11 f5       	brne	.+68     	; 0x2108 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x164>
	{
		if (delay == 0)
    20c4:	20 91 06 20 	lds	r18, 0x2006
    20c8:	30 91 07 20 	lds	r19, 0x2007
    20cc:	23 2b       	or	r18, r19
    20ce:	99 f4       	brne	.+38     	; 0x20f6 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x152>
		{
			pos++;
    20d0:	01 96       	adiw	r24, 0x01	; 1
			if (pos == 8) pos = 0;
    20d2:	88 30       	cpi	r24, 0x08	; 8
    20d4:	91 05       	cpc	r25, r1
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x13e>
	
	if (tableBLU[pos] == blu && tableRED[pos] == red && tableGRN[pos] == grn)
	{
		if (delay == 0)
		{
			pos++;
    20d8:	80 93 e7 22 	sts	0x22E7, r24
    20dc:	90 93 e8 22 	sts	0x22E8, r25
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x146>
			if (pos == 8) pos = 0;
    20e2:	10 92 e7 22 	sts	0x22E7, r1
    20e6:	10 92 e8 22 	sts	0x22E8, r1
			delay = 1000;
    20ea:	88 ee       	ldi	r24, 0xE8	; 232
    20ec:	93 e0       	ldi	r25, 0x03	; 3
    20ee:	80 93 06 20 	sts	0x2006, r24
    20f2:	90 93 07 20 	sts	0x2007, r25
		}
		delay --;
    20f6:	80 91 06 20 	lds	r24, 0x2006
    20fa:	90 91 07 20 	lds	r25, 0x2007
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	80 93 06 20 	sts	0x2006, r24
    2104:	90 93 07 20 	sts	0x2007, r25
	}
	
	pwmtimer.SetCOMPB(red);
    2108:	60 91 e3 22 	lds	r22, 0x22E3
    210c:	70 91 e4 22 	lds	r23, 0x22E4
    2110:	80 e9       	ldi	r24, 0x90	; 144
    2112:	95 e2       	ldi	r25, 0x25	; 37
    2114:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(grn);
    2118:	60 91 e5 22 	lds	r22, 0x22E5
    211c:	70 91 e6 22 	lds	r23, 0x22E6
    2120:	80 e9       	ldi	r24, 0x90	; 144
    2122:	95 e2       	ldi	r25, 0x25	; 37
    2124:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(blu);
    2128:	60 91 e1 22 	lds	r22, 0x22E1
    212c:	70 91 e2 22 	lds	r23, 0x22E2
    2130:	80 e9       	ldi	r24, 0x90	; 144
    2132:	95 e2       	ldi	r25, 0x25	; 37
    2134:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <_ZN7CTimerD8SetCOMPDEj>
    2138:	08 95       	ret

0000213a <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
    213a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
    213e:	08 95       	ret

00002140 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    2144:	fc 01       	movw	r30, r24
    2146:	24 85       	ldd	r18, Z+12	; 0x0c
    2148:	35 85       	ldd	r19, Z+13	; 0x0d
    214a:	20 31       	cpi	r18, 0x10	; 16
    214c:	31 05       	cpc	r19, r1
    214e:	21 f0       	breq	.+8      	; 0x2158 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    2150:	20 32       	cpi	r18, 0x20	; 32
    2152:	31 05       	cpc	r19, r1
    2154:	09 f0       	breq	.+2      	; 0x2158 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    2156:	93 c0       	rjmp	.+294    	; 0x227e <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    2158:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    215a:	80 91 48 06 	lds	r24, 0x0648
    215e:	80 fd       	sbrc	r24, 0
    2160:	78 c0       	rjmp	.+240    	; 0x2252 <_ZN16CLaserControlApp6OnINT0Ev+0x112>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    2162:	80 91 e0 22 	lds	r24, 0x22E0
    2166:	81 11       	cpse	r24, r1
    2168:	8a c0       	rjmp	.+276    	; 0x227e <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    216a:	fe 01       	movw	r30, r28
    216c:	e4 58       	subi	r30, 0x84	; 132
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	89 2b       	or	r24, r25
    2176:	09 f4       	brne	.+2      	; 0x217a <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    2178:	7d c0       	rjmp	.+250    	; 0x2274 <_ZN16CLaserControlApp6OnINT0Ev+0x134>
    217a:	81 c0       	rjmp	.+258    	; 0x227e <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    217c:	8a e0       	ldi	r24, 0x0A	; 10
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	fe 01       	movw	r30, r28
    2182:	e4 58       	subi	r30, 0x84	; 132
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 83       	st	Z, r24
    2188:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    218a:	fe 97       	sbiw	r30, 0x3e	; 62
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	a2 81       	ldd	r26, Z+2	; 0x02
    2192:	b3 81       	ldd	r27, Z+3	; 0x03
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	a1 1d       	adc	r26, r1
    2198:	b1 1d       	adc	r27, r1
    219a:	80 83       	st	Z, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	a2 83       	std	Z+2, r26	; 0x02
    21a0:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    21a2:	34 96       	adiw	r30, 0x04	; 4
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	a2 81       	ldd	r26, Z+2	; 0x02
    21aa:	b3 81       	ldd	r27, Z+3	; 0x03
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	a1 1d       	adc	r26, r1
    21b0:	b1 1d       	adc	r27, r1
    21b2:	80 83       	st	Z, r24
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	a2 83       	std	Z+2, r26	; 0x02
    21b8:	b3 83       	std	Z+3, r27	; 0x03
						
						if (laserTimerDutyCyclems > 100)
    21ba:	4a ad       	ldd	r20, Y+58	; 0x3a
    21bc:	5b ad       	ldd	r21, Y+59	; 0x3b
    21be:	45 36       	cpi	r20, 0x65	; 101
    21c0:	51 05       	cpc	r21, r1
    21c2:	50 f0       	brcs	.+20     	; 0x21d8 <_ZN16CLaserControlApp6OnINT0Ev+0x98>
							player.SoundStart(500, 50, 0);
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	42 e3       	ldi	r20, 0x32	; 50
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	64 ef       	ldi	r22, 0xF4	; 244
    21cc:	71 e0       	ldi	r23, 0x01	; 1
    21ce:	8e e5       	ldi	r24, 0x5E	; 94
    21d0:	95 e2       	ldi	r25, 0x25	; 37
    21d2:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
    21d6:	09 c0       	rjmp	.+18     	; 0x21ea <_ZN16CLaserControlApp6OnINT0Ev+0xaa>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    21d8:	56 95       	lsr	r21
    21da:	47 95       	ror	r20
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	64 ef       	ldi	r22, 0xF4	; 244
    21e0:	71 e0       	ldi	r23, 0x01	; 1
    21e2:	8e e5       	ldi	r24, 0x5E	; 94
    21e4:	95 e2       	ldi	r25, 0x25	; 37
    21e6:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    21ea:	8e e5       	ldi	r24, 0x5E	; 94
    21ec:	95 e2       	ldi	r25, 0x25	; 37
    21ee:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    21f2:	88 ad       	ldd	r24, Y+56	; 0x38
    21f4:	99 ad       	ldd	r25, Y+57	; 0x39
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	29 f0       	breq	.+10     	; 0x2204 <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
						TCF0.CNT = laserTimerDutyCycle - 1;
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	80 93 20 0b 	sts	0x0B20, r24
    2200:	90 93 21 0b 	sts	0x0B21, r25
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    2204:	68 ad       	ldd	r22, Y+56	; 0x38
    2206:	79 ad       	ldd	r23, Y+57	; 0x39
    2208:	86 e9       	ldi	r24, 0x96	; 150
    220a:	95 e2       	ldi	r25, 0x25	; 37
    220c:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    2210:	68 ad       	ldd	r22, Y+56	; 0x38
    2212:	79 ad       	ldd	r23, Y+57	; 0x39
    2214:	86 e9       	ldi	r24, 0x96	; 150
    2216:	95 e2       	ldi	r25, 0x25	; 37
    2218:	0e 94 3e 31 	call	0x627c	; 0x627c <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    221c:	6e a9       	ldd	r22, Y+54	; 0x36
    221e:	7f a9       	ldd	r23, Y+55	; 0x37
    2220:	86 e9       	ldi	r24, 0x96	; 150
    2222:	95 e2       	ldi	r25, 0x25	; 37
    2224:	0e 94 01 31 	call	0x6202	; 0x6202 <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    2228:	8e 85       	ldd	r24, Y+14	; 0x0e
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	49 f4       	brne	.+18     	; 0x2240 <_ZN16CLaserControlApp6OnINT0Ev+0x100>
    222e:	ff ef       	ldi	r31, 0xFF	; 255
    2230:	27 e8       	ldi	r18, 0x87	; 135
    2232:	83 e1       	ldi	r24, 0x13	; 19
    2234:	f1 50       	subi	r31, 0x01	; 1
    2236:	20 40       	sbci	r18, 0x00	; 0
    2238:	80 40       	sbci	r24, 0x00	; 0
    223a:	e1 f7       	brne	.-8      	; 0x2234 <_ZN16CLaserControlApp6OnINT0Ev+0xf4>
    223c:	00 c0       	rjmp	.+0      	; 0x223e <_ZN16CLaserControlApp6OnINT0Ev+0xfe>
    223e:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    2240:	e0 e4       	ldi	r30, 0x40	; 64
    2242:	f6 e0       	ldi	r31, 0x06	; 6
    2244:	84 85       	ldd	r24, Z+12	; 0x0c
    2246:	8e 7f       	andi	r24, 0xFE	; 254
    2248:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 93 e0 22 	sts	0x22E0, r24
    2250:	16 c0       	rjmp	.+44     	; 0x227e <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    2252:	10 92 e0 22 	sts	0x22E0, r1
				
				laserTimer.Stop();
    2256:	86 e9       	ldi	r24, 0x96	; 150
    2258:	95 e2       	ldi	r25, 0x25	; 37
    225a:	0e 94 0e 31 	call	0x621c	; 0x621c <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    225e:	60 e1       	ldi	r22, 0x10	; 16
    2260:	86 e9       	ldi	r24, 0x96	; 150
    2262:	95 e2       	ldi	r25, 0x25	; 37
    2264:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    2268:	60 e2       	ldi	r22, 0x20	; 32
    226a:	86 e9       	ldi	r24, 0x96	; 150
    226c:	95 e2       	ldi	r25, 0x25	; 37
    226e:	0e 94 23 31 	call	0x6246	; 0x6246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    2272:	05 c0       	rjmp	.+10     	; 0x227e <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    2274:	8e 85       	ldd	r24, Y+14	; 0x0e
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	09 f0       	breq	.+2      	; 0x227c <_ZN16CLaserControlApp6OnINT0Ev+0x13c>
    227a:	bb cf       	rjmp	.-138    	; 0x21f2 <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    227c:	7f cf       	rjmp	.-258    	; 0x217c <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	08 95       	ret

00002284 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    2284:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN16CLaserControlApp6OnINT0Ev>
    2288:	08 95       	ret

0000228a <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	7c 01       	movw	r14, r24
    229c:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    229e:	41 15       	cp	r20, r1
    22a0:	51 05       	cpc	r21, r1
    22a2:	b1 f0       	breq	.+44     	; 0x22d0 <_Z11ConvertDataPvS_jj+0x46>
    22a4:	6b 01       	movw	r12, r22
    22a6:	c4 0e       	add	r12, r20
    22a8:	d5 1e       	adc	r13, r21
    22aa:	eb 01       	movw	r28, r22
    22ac:	26 1b       	sub	r18, r22
    22ae:	37 0b       	sbc	r19, r23
    22b0:	c9 01       	movw	r24, r18
    22b2:	8c 0f       	add	r24, r28
    22b4:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    22b6:	b8 01       	movw	r22, r16
    22b8:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
    22bc:	fc 01       	movw	r30, r24
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	e4 27       	eor	r30, r20
    22c2:	ee 0d       	add	r30, r14
    22c4:	ff 1d       	adc	r31, r15
    22c6:	89 91       	ld	r24, Y+
    22c8:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    22ca:	cc 15       	cp	r28, r12
    22cc:	dd 05       	cpc	r29, r13
    22ce:	81 f7       	brne	.-32     	; 0x22b0 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	cf 90       	pop	r12
    22e0:	08 95       	ret

000022e2 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    22e2:	68 17       	cp	r22, r24
    22e4:	79 07       	cpc	r23, r25
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <_Z3minjj+0x8>
    22e8:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    22ea:	08 95       	ret

000022ec <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    22ec:	86 17       	cp	r24, r22
    22ee:	97 07       	cpc	r25, r23
    22f0:	08 f4       	brcc	.+2      	; 0x22f4 <_Z3maxjj+0x8>
    22f2:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    22f4:	08 95       	ret

000022f6 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    22f6:	98 27       	eor	r25, r24
    22f8:	89 27       	eor	r24, r25
    22fa:	98 27       	eor	r25, r24
    22fc:	08 95       	ret

000022fe <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    22fe:	9b 01       	movw	r18, r22
    2300:	bc 01       	movw	r22, r24
    2302:	c9 01       	movw	r24, r18
}
    2304:	08 95       	ret

00002306 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    2306:	08 95       	ret

00002308 <_ZN4CSPID1Ev>:
    2308:	08 95       	ret

0000230a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    230a:	ef 92       	push	r14
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	ec 01       	movw	r28, r24
    2316:	e0 e8       	ldi	r30, 0x80	; 128
    2318:	f6 e0       	ldi	r31, 0x06	; 6
    231a:	90 eb       	ldi	r25, 0xB0	; 176
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 ec       	ldi	r24, 0xC0	; 192
    2320:	84 8b       	std	Z+20, r24	; 0x14
    2322:	85 8b       	std	Z+21, r24	; 0x15
    2324:	87 8b       	std	Z+23, r24	; 0x17
    2326:	95 83       	std	Z+5, r25	; 0x05
    2328:	61 11       	cpse	r22, r1
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    232c:	80 e4       	ldi	r24, 0x40	; 64
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    2330:	80 e5       	ldi	r24, 0x50	; 80
    2332:	01 11       	cpse	r16, r1
    2334:	02 c0       	rjmp	.+4      	; 0x233a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	01 c0       	rjmp	.+2      	; 0x233c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    233a:	30 e8       	ldi	r19, 0x80	; 128
    233c:	41 11       	cpse	r20, r1
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    2344:	90 e2       	ldi	r25, 0x20	; 32
    2346:	22 0f       	add	r18, r18
    2348:	22 0f       	add	r18, r18
    234a:	e2 2a       	or	r14, r18
    234c:	e8 2a       	or	r14, r24
    234e:	e3 2a       	or	r14, r19
    2350:	e9 2a       	or	r14, r25
    2352:	00 ec       	ldi	r16, 0xC0	; 192
    2354:	1a e0       	ldi	r17, 0x0A	; 10
    2356:	f8 01       	movw	r30, r16
    2358:	e0 82       	st	Z, r14
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	0e 94 93 33 	call	0x6726	; 0x6726 <malloc>
    2362:	88 83       	st	Y, r24
    2364:	99 83       	std	Y+1, r25	; 0x01
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	f8 01       	movw	r30, r16
    236a:	81 83       	std	Z+1, r24	; 0x01
    236c:	8e ef       	ldi	r24, 0xFE	; 254
    236e:	91 e1       	ldi	r25, 0x11	; 17
    2370:	80 93 5c 23 	sts	0x235C, r24
    2374:	90 93 5d 23 	sts	0x235D, r25
    2378:	c0 93 52 24 	sts	0x2452, r28
    237c:	d0 93 53 24 	sts	0x2453, r29
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ef 90       	pop	r14
    238a:	08 95       	ret

0000238c <_ZN4CSPI4SendEPhj>:
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	ec 01       	movw	r28, r24
    2392:	4a 83       	std	Y+2, r20	; 0x02
    2394:	5b 83       	std	Y+3, r21	; 0x03
    2396:	4c 83       	std	Y+4, r20	; 0x04
    2398:	5d 83       	std	Y+5, r21	; 0x05
    239a:	88 81       	ld	r24, Y
    239c:	99 81       	ldd	r25, Y+1	; 0x01
    239e:	0e 94 c0 34 	call	0x6980	; 0x6980 <memcpy>
    23a2:	80 e1       	ldi	r24, 0x10	; 16
    23a4:	80 93 86 06 	sts	0x0686, r24
    23a8:	88 81       	ld	r24, Y
    23aa:	99 81       	ldd	r25, Y+1	; 0x01
    23ac:	4a 81       	ldd	r20, Y+2	; 0x02
    23ae:	5b 81       	ldd	r21, Y+3	; 0x03
    23b0:	9a 01       	movw	r18, r20
    23b2:	21 50       	subi	r18, 0x01	; 1
    23b4:	31 09       	sbc	r19, r1
    23b6:	2a 83       	std	Y+2, r18	; 0x02
    23b8:	3b 83       	std	Y+3, r19	; 0x03
    23ba:	fc 01       	movw	r30, r24
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	80 81       	ld	r24, Z
    23c2:	80 93 c3 0a 	sts	0x0AC3, r24
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    23cc:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	89 2b       	or	r24, r25
    23d4:	79 f0       	breq	.+30     	; 0x23f4 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    23d6:	40 81       	ld	r20, Z
    23d8:	51 81       	ldd	r21, Z+1	; 0x01
    23da:	22 81       	ldd	r18, Z+2	; 0x02
    23dc:	33 81       	ldd	r19, Z+3	; 0x03
    23de:	c9 01       	movw	r24, r18
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	82 83       	std	Z+2, r24	; 0x02
    23e4:	93 83       	std	Z+3, r25	; 0x03
    23e6:	fa 01       	movw	r30, r20
    23e8:	e8 0f       	add	r30, r24
    23ea:	f9 1f       	adc	r31, r25
    23ec:	80 81       	ld	r24, Z
    23ee:	80 93 c3 0a 	sts	0x0AC3, r24
    23f2:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    23f4:	80 e1       	ldi	r24, 0x10	; 16
    23f6:	80 93 85 06 	sts	0x0685, r24
    23fa:	08 95       	ret

000023fc <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    23fc:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN4CSPI10OnTransmitEv>
    2400:	08 95       	ret

00002402 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    2402:	20 eb       	ldi	r18, 0xB0	; 176
    2404:	31 e2       	ldi	r19, 0x21	; 33
    2406:	fc 01       	movw	r30, r24
    2408:	20 83       	st	Z, r18
    240a:	31 83       	std	Z+1, r19	; 0x01
    240c:	08 95       	ret

0000240e <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    240e:	08 95       	ret

00002410 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    2410:	24 ed       	ldi	r18, 0xD4	; 212
    2412:	31 e2       	ldi	r19, 0x21	; 33
    2414:	fc 01       	movw	r30, r24
    2416:	20 83       	st	Z, r18
    2418:	31 83       	std	Z+1, r19	; 0x01
    241a:	08 95       	ret

0000241c <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    241c:	08 95       	ret

0000241e <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    241e:	22 ef       	ldi	r18, 0xF2	; 242
    2420:	31 e2       	ldi	r19, 0x21	; 33
    2422:	fc 01       	movw	r30, r24
    2424:	20 83       	st	Z, r18
    2426:	31 83       	std	Z+1, r19	; 0x01
    2428:	08 95       	ret

0000242a <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    242a:	08 95       	ret

0000242c <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    242c:	1f 92       	push	r1
    242e:	0f 92       	push	r0
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	0f 92       	push	r0
    2434:	11 24       	eor	r1, r1
    2436:	0b b6       	in	r0, 0x3b	; 59
    2438:	0f 92       	push	r0
    243a:	2f 93       	push	r18
    243c:	3f 93       	push	r19
    243e:	4f 93       	push	r20
    2440:	5f 93       	push	r21
    2442:	6f 93       	push	r22
    2444:	7f 93       	push	r23
    2446:	8f 93       	push	r24
    2448:	9f 93       	push	r25
    244a:	af 93       	push	r26
    244c:	bf 93       	push	r27
    244e:	ef 93       	push	r30
    2450:	ff 93       	push	r31
    2452:	e0 91 ec 22 	lds	r30, 0x22EC
    2456:	f0 91 ed 22 	lds	r31, 0x22ED
    245a:	30 97       	sbiw	r30, 0x00	; 0
    245c:	29 f0       	breq	.+10     	; 0x2468 <__vector_1+0x3c>
    245e:	80 91 e2 23 	lds	r24, 0x23E2
    2462:	90 91 e3 23 	lds	r25, 0x23E3
    2466:	19 95       	eicall
    2468:	ff 91       	pop	r31
    246a:	ef 91       	pop	r30
    246c:	bf 91       	pop	r27
    246e:	af 91       	pop	r26
    2470:	9f 91       	pop	r25
    2472:	8f 91       	pop	r24
    2474:	7f 91       	pop	r23
    2476:	6f 91       	pop	r22
    2478:	5f 91       	pop	r21
    247a:	4f 91       	pop	r20
    247c:	3f 91       	pop	r19
    247e:	2f 91       	pop	r18
    2480:	0f 90       	pop	r0
    2482:	0b be       	out	0x3b, r0	; 59
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti

0000248e <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    248e:	1f 92       	push	r1
    2490:	0f 92       	push	r0
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	0f 92       	push	r0
    2496:	11 24       	eor	r1, r1
    2498:	0b b6       	in	r0, 0x3b	; 59
    249a:	0f 92       	push	r0
    249c:	2f 93       	push	r18
    249e:	3f 93       	push	r19
    24a0:	4f 93       	push	r20
    24a2:	5f 93       	push	r21
    24a4:	6f 93       	push	r22
    24a6:	7f 93       	push	r23
    24a8:	8f 93       	push	r24
    24aa:	9f 93       	push	r25
    24ac:	af 93       	push	r26
    24ae:	bf 93       	push	r27
    24b0:	ef 93       	push	r30
    24b2:	ff 93       	push	r31
    24b4:	e0 91 ee 22 	lds	r30, 0x22EE
    24b8:	f0 91 ef 22 	lds	r31, 0x22EF
    24bc:	30 97       	sbiw	r30, 0x00	; 0
    24be:	29 f0       	breq	.+10     	; 0x24ca <__vector_2+0x3c>
    24c0:	80 91 e4 23 	lds	r24, 0x23E4
    24c4:	90 91 e5 23 	lds	r25, 0x23E5
    24c8:	19 95       	eicall
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0b be       	out	0x3b, r0	; 59
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	0f 90       	pop	r0
    24ec:	1f 90       	pop	r1
    24ee:	18 95       	reti

000024f0 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    24f0:	1f 92       	push	r1
    24f2:	0f 92       	push	r0
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	0f 92       	push	r0
    24f8:	11 24       	eor	r1, r1
    24fa:	0b b6       	in	r0, 0x3b	; 59
    24fc:	0f 92       	push	r0
    24fe:	2f 93       	push	r18
    2500:	3f 93       	push	r19
    2502:	4f 93       	push	r20
    2504:	5f 93       	push	r21
    2506:	6f 93       	push	r22
    2508:	7f 93       	push	r23
    250a:	8f 93       	push	r24
    250c:	9f 93       	push	r25
    250e:	af 93       	push	r26
    2510:	bf 93       	push	r27
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	e0 91 f0 22 	lds	r30, 0x22F0
    251a:	f0 91 f1 22 	lds	r31, 0x22F1
    251e:	30 97       	sbiw	r30, 0x00	; 0
    2520:	29 f0       	breq	.+10     	; 0x252c <__vector_3+0x3c>
    2522:	80 91 e6 23 	lds	r24, 0x23E6
    2526:	90 91 e7 23 	lds	r25, 0x23E7
    252a:	19 95       	eicall
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	bf 91       	pop	r27
    2532:	af 91       	pop	r26
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	7f 91       	pop	r23
    253a:	6f 91       	pop	r22
    253c:	5f 91       	pop	r21
    253e:	4f 91       	pop	r20
    2540:	3f 91       	pop	r19
    2542:	2f 91       	pop	r18
    2544:	0f 90       	pop	r0
    2546:	0b be       	out	0x3b, r0	; 59
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	0f 90       	pop	r0
    254e:	1f 90       	pop	r1
    2550:	18 95       	reti

00002552 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    2552:	1f 92       	push	r1
    2554:	0f 92       	push	r0
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	0f 92       	push	r0
    255a:	11 24       	eor	r1, r1
    255c:	0b b6       	in	r0, 0x3b	; 59
    255e:	0f 92       	push	r0
    2560:	2f 93       	push	r18
    2562:	3f 93       	push	r19
    2564:	4f 93       	push	r20
    2566:	5f 93       	push	r21
    2568:	6f 93       	push	r22
    256a:	7f 93       	push	r23
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	af 93       	push	r26
    2572:	bf 93       	push	r27
    2574:	ef 93       	push	r30
    2576:	ff 93       	push	r31
    2578:	e0 91 f2 22 	lds	r30, 0x22F2
    257c:	f0 91 f3 22 	lds	r31, 0x22F3
    2580:	30 97       	sbiw	r30, 0x00	; 0
    2582:	29 f0       	breq	.+10     	; 0x258e <__vector_4+0x3c>
    2584:	80 91 e8 23 	lds	r24, 0x23E8
    2588:	90 91 e9 23 	lds	r25, 0x23E9
    258c:	19 95       	eicall
    258e:	ff 91       	pop	r31
    2590:	ef 91       	pop	r30
    2592:	bf 91       	pop	r27
    2594:	af 91       	pop	r26
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	7f 91       	pop	r23
    259c:	6f 91       	pop	r22
    259e:	5f 91       	pop	r21
    25a0:	4f 91       	pop	r20
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0b be       	out	0x3b, r0	; 59
    25aa:	0f 90       	pop	r0
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	0f 90       	pop	r0
    25b0:	1f 90       	pop	r1
    25b2:	18 95       	reti

000025b4 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    25b4:	1f 92       	push	r1
    25b6:	0f 92       	push	r0
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	0f 92       	push	r0
    25bc:	11 24       	eor	r1, r1
    25be:	0b b6       	in	r0, 0x3b	; 59
    25c0:	0f 92       	push	r0
    25c2:	2f 93       	push	r18
    25c4:	3f 93       	push	r19
    25c6:	4f 93       	push	r20
    25c8:	5f 93       	push	r21
    25ca:	6f 93       	push	r22
    25cc:	7f 93       	push	r23
    25ce:	8f 93       	push	r24
    25d0:	9f 93       	push	r25
    25d2:	af 93       	push	r26
    25d4:	bf 93       	push	r27
    25d6:	ef 93       	push	r30
    25d8:	ff 93       	push	r31
    25da:	e0 91 f4 22 	lds	r30, 0x22F4
    25de:	f0 91 f5 22 	lds	r31, 0x22F5
    25e2:	30 97       	sbiw	r30, 0x00	; 0
    25e4:	29 f0       	breq	.+10     	; 0x25f0 <__vector_5+0x3c>
    25e6:	80 91 ea 23 	lds	r24, 0x23EA
    25ea:	90 91 eb 23 	lds	r25, 0x23EB
    25ee:	19 95       	eicall
    25f0:	ff 91       	pop	r31
    25f2:	ef 91       	pop	r30
    25f4:	bf 91       	pop	r27
    25f6:	af 91       	pop	r26
    25f8:	9f 91       	pop	r25
    25fa:	8f 91       	pop	r24
    25fc:	7f 91       	pop	r23
    25fe:	6f 91       	pop	r22
    2600:	5f 91       	pop	r21
    2602:	4f 91       	pop	r20
    2604:	3f 91       	pop	r19
    2606:	2f 91       	pop	r18
    2608:	0f 90       	pop	r0
    260a:	0b be       	out	0x3b, r0	; 59
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	0f 90       	pop	r0
    2612:	1f 90       	pop	r1
    2614:	18 95       	reti

00002616 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    2616:	1f 92       	push	r1
    2618:	0f 92       	push	r0
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	0f 92       	push	r0
    261e:	11 24       	eor	r1, r1
    2620:	0b b6       	in	r0, 0x3b	; 59
    2622:	0f 92       	push	r0
    2624:	2f 93       	push	r18
    2626:	3f 93       	push	r19
    2628:	4f 93       	push	r20
    262a:	5f 93       	push	r21
    262c:	6f 93       	push	r22
    262e:	7f 93       	push	r23
    2630:	8f 93       	push	r24
    2632:	9f 93       	push	r25
    2634:	af 93       	push	r26
    2636:	bf 93       	push	r27
    2638:	ef 93       	push	r30
    263a:	ff 93       	push	r31
    263c:	e0 91 f6 22 	lds	r30, 0x22F6
    2640:	f0 91 f7 22 	lds	r31, 0x22F7
    2644:	30 97       	sbiw	r30, 0x00	; 0
    2646:	29 f0       	breq	.+10     	; 0x2652 <__vector_6+0x3c>
    2648:	80 91 ec 23 	lds	r24, 0x23EC
    264c:	90 91 ed 23 	lds	r25, 0x23ED
    2650:	19 95       	eicall
    2652:	ff 91       	pop	r31
    2654:	ef 91       	pop	r30
    2656:	bf 91       	pop	r27
    2658:	af 91       	pop	r26
    265a:	9f 91       	pop	r25
    265c:	8f 91       	pop	r24
    265e:	7f 91       	pop	r23
    2660:	6f 91       	pop	r22
    2662:	5f 91       	pop	r21
    2664:	4f 91       	pop	r20
    2666:	3f 91       	pop	r19
    2668:	2f 91       	pop	r18
    266a:	0f 90       	pop	r0
    266c:	0b be       	out	0x3b, r0	; 59
    266e:	0f 90       	pop	r0
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	0f 90       	pop	r0
    2674:	1f 90       	pop	r1
    2676:	18 95       	reti

00002678 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    2678:	1f 92       	push	r1
    267a:	0f 92       	push	r0
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	0f 92       	push	r0
    2680:	11 24       	eor	r1, r1
    2682:	0b b6       	in	r0, 0x3b	; 59
    2684:	0f 92       	push	r0
    2686:	2f 93       	push	r18
    2688:	3f 93       	push	r19
    268a:	4f 93       	push	r20
    268c:	5f 93       	push	r21
    268e:	6f 93       	push	r22
    2690:	7f 93       	push	r23
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    269e:	e0 91 f8 22 	lds	r30, 0x22F8
    26a2:	f0 91 f9 22 	lds	r31, 0x22F9
    26a6:	30 97       	sbiw	r30, 0x00	; 0
    26a8:	29 f0       	breq	.+10     	; 0x26b4 <__vector_7+0x3c>
    26aa:	80 91 ee 23 	lds	r24, 0x23EE
    26ae:	90 91 ef 23 	lds	r25, 0x23EF
    26b2:	19 95       	eicall
    26b4:	ff 91       	pop	r31
    26b6:	ef 91       	pop	r30
    26b8:	bf 91       	pop	r27
    26ba:	af 91       	pop	r26
    26bc:	9f 91       	pop	r25
    26be:	8f 91       	pop	r24
    26c0:	7f 91       	pop	r23
    26c2:	6f 91       	pop	r22
    26c4:	5f 91       	pop	r21
    26c6:	4f 91       	pop	r20
    26c8:	3f 91       	pop	r19
    26ca:	2f 91       	pop	r18
    26cc:	0f 90       	pop	r0
    26ce:	0b be       	out	0x3b, r0	; 59
    26d0:	0f 90       	pop	r0
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	0f 90       	pop	r0
    26d6:	1f 90       	pop	r1
    26d8:	18 95       	reti

000026da <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    26da:	1f 92       	push	r1
    26dc:	0f 92       	push	r0
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	0f 92       	push	r0
    26e2:	11 24       	eor	r1, r1
    26e4:	0b b6       	in	r0, 0x3b	; 59
    26e6:	0f 92       	push	r0
    26e8:	2f 93       	push	r18
    26ea:	3f 93       	push	r19
    26ec:	4f 93       	push	r20
    26ee:	5f 93       	push	r21
    26f0:	6f 93       	push	r22
    26f2:	7f 93       	push	r23
    26f4:	8f 93       	push	r24
    26f6:	9f 93       	push	r25
    26f8:	af 93       	push	r26
    26fa:	bf 93       	push	r27
    26fc:	ef 93       	push	r30
    26fe:	ff 93       	push	r31
    2700:	e0 91 fa 22 	lds	r30, 0x22FA
    2704:	f0 91 fb 22 	lds	r31, 0x22FB
    2708:	30 97       	sbiw	r30, 0x00	; 0
    270a:	29 f0       	breq	.+10     	; 0x2716 <__vector_8+0x3c>
    270c:	80 91 f0 23 	lds	r24, 0x23F0
    2710:	90 91 f1 23 	lds	r25, 0x23F1
    2714:	19 95       	eicall
    2716:	ff 91       	pop	r31
    2718:	ef 91       	pop	r30
    271a:	bf 91       	pop	r27
    271c:	af 91       	pop	r26
    271e:	9f 91       	pop	r25
    2720:	8f 91       	pop	r24
    2722:	7f 91       	pop	r23
    2724:	6f 91       	pop	r22
    2726:	5f 91       	pop	r21
    2728:	4f 91       	pop	r20
    272a:	3f 91       	pop	r19
    272c:	2f 91       	pop	r18
    272e:	0f 90       	pop	r0
    2730:	0b be       	out	0x3b, r0	; 59
    2732:	0f 90       	pop	r0
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	0f 90       	pop	r0
    2738:	1f 90       	pop	r1
    273a:	18 95       	reti

0000273c <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    273c:	1f 92       	push	r1
    273e:	0f 92       	push	r0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	0f 92       	push	r0
    2744:	11 24       	eor	r1, r1
    2746:	0b b6       	in	r0, 0x3b	; 59
    2748:	0f 92       	push	r0
    274a:	2f 93       	push	r18
    274c:	3f 93       	push	r19
    274e:	4f 93       	push	r20
    2750:	5f 93       	push	r21
    2752:	6f 93       	push	r22
    2754:	7f 93       	push	r23
    2756:	8f 93       	push	r24
    2758:	9f 93       	push	r25
    275a:	af 93       	push	r26
    275c:	bf 93       	push	r27
    275e:	ef 93       	push	r30
    2760:	ff 93       	push	r31
    2762:	e0 91 fc 22 	lds	r30, 0x22FC
    2766:	f0 91 fd 22 	lds	r31, 0x22FD
    276a:	30 97       	sbiw	r30, 0x00	; 0
    276c:	29 f0       	breq	.+10     	; 0x2778 <__vector_9+0x3c>
    276e:	80 91 f2 23 	lds	r24, 0x23F2
    2772:	90 91 f3 23 	lds	r25, 0x23F3
    2776:	19 95       	eicall
    2778:	ff 91       	pop	r31
    277a:	ef 91       	pop	r30
    277c:	bf 91       	pop	r27
    277e:	af 91       	pop	r26
    2780:	9f 91       	pop	r25
    2782:	8f 91       	pop	r24
    2784:	7f 91       	pop	r23
    2786:	6f 91       	pop	r22
    2788:	5f 91       	pop	r21
    278a:	4f 91       	pop	r20
    278c:	3f 91       	pop	r19
    278e:	2f 91       	pop	r18
    2790:	0f 90       	pop	r0
    2792:	0b be       	out	0x3b, r0	; 59
    2794:	0f 90       	pop	r0
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	0f 90       	pop	r0
    279a:	1f 90       	pop	r1
    279c:	18 95       	reti

0000279e <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    279e:	1f 92       	push	r1
    27a0:	0f 92       	push	r0
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	0f 92       	push	r0
    27a6:	11 24       	eor	r1, r1
    27a8:	0b b6       	in	r0, 0x3b	; 59
    27aa:	0f 92       	push	r0
    27ac:	2f 93       	push	r18
    27ae:	3f 93       	push	r19
    27b0:	4f 93       	push	r20
    27b2:	5f 93       	push	r21
    27b4:	6f 93       	push	r22
    27b6:	7f 93       	push	r23
    27b8:	8f 93       	push	r24
    27ba:	9f 93       	push	r25
    27bc:	af 93       	push	r26
    27be:	bf 93       	push	r27
    27c0:	ef 93       	push	r30
    27c2:	ff 93       	push	r31
    27c4:	e0 91 fe 22 	lds	r30, 0x22FE
    27c8:	f0 91 ff 22 	lds	r31, 0x22FF
    27cc:	30 97       	sbiw	r30, 0x00	; 0
    27ce:	29 f0       	breq	.+10     	; 0x27da <__vector_10+0x3c>
    27d0:	80 91 f4 23 	lds	r24, 0x23F4
    27d4:	90 91 f5 23 	lds	r25, 0x23F5
    27d8:	19 95       	eicall
    27da:	ff 91       	pop	r31
    27dc:	ef 91       	pop	r30
    27de:	bf 91       	pop	r27
    27e0:	af 91       	pop	r26
    27e2:	9f 91       	pop	r25
    27e4:	8f 91       	pop	r24
    27e6:	7f 91       	pop	r23
    27e8:	6f 91       	pop	r22
    27ea:	5f 91       	pop	r21
    27ec:	4f 91       	pop	r20
    27ee:	3f 91       	pop	r19
    27f0:	2f 91       	pop	r18
    27f2:	0f 90       	pop	r0
    27f4:	0b be       	out	0x3b, r0	; 59
    27f6:	0f 90       	pop	r0
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	0f 90       	pop	r0
    27fc:	1f 90       	pop	r1
    27fe:	18 95       	reti

00002800 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2800:	1f 92       	push	r1
    2802:	0f 92       	push	r0
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	0f 92       	push	r0
    2808:	11 24       	eor	r1, r1
    280a:	0b b6       	in	r0, 0x3b	; 59
    280c:	0f 92       	push	r0
    280e:	2f 93       	push	r18
    2810:	3f 93       	push	r19
    2812:	4f 93       	push	r20
    2814:	5f 93       	push	r21
    2816:	6f 93       	push	r22
    2818:	7f 93       	push	r23
    281a:	8f 93       	push	r24
    281c:	9f 93       	push	r25
    281e:	af 93       	push	r26
    2820:	bf 93       	push	r27
    2822:	ef 93       	push	r30
    2824:	ff 93       	push	r31
    2826:	e0 91 00 23 	lds	r30, 0x2300
    282a:	f0 91 01 23 	lds	r31, 0x2301
    282e:	30 97       	sbiw	r30, 0x00	; 0
    2830:	29 f0       	breq	.+10     	; 0x283c <__vector_11+0x3c>
    2832:	80 91 f6 23 	lds	r24, 0x23F6
    2836:	90 91 f7 23 	lds	r25, 0x23F7
    283a:	19 95       	eicall
    283c:	ff 91       	pop	r31
    283e:	ef 91       	pop	r30
    2840:	bf 91       	pop	r27
    2842:	af 91       	pop	r26
    2844:	9f 91       	pop	r25
    2846:	8f 91       	pop	r24
    2848:	7f 91       	pop	r23
    284a:	6f 91       	pop	r22
    284c:	5f 91       	pop	r21
    284e:	4f 91       	pop	r20
    2850:	3f 91       	pop	r19
    2852:	2f 91       	pop	r18
    2854:	0f 90       	pop	r0
    2856:	0b be       	out	0x3b, r0	; 59
    2858:	0f 90       	pop	r0
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	0f 90       	pop	r0
    285e:	1f 90       	pop	r1
    2860:	18 95       	reti

00002862 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    2862:	1f 92       	push	r1
    2864:	0f 92       	push	r0
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	0f 92       	push	r0
    286a:	11 24       	eor	r1, r1
    286c:	0b b6       	in	r0, 0x3b	; 59
    286e:	0f 92       	push	r0
    2870:	2f 93       	push	r18
    2872:	3f 93       	push	r19
    2874:	4f 93       	push	r20
    2876:	5f 93       	push	r21
    2878:	6f 93       	push	r22
    287a:	7f 93       	push	r23
    287c:	8f 93       	push	r24
    287e:	9f 93       	push	r25
    2880:	af 93       	push	r26
    2882:	bf 93       	push	r27
    2884:	ef 93       	push	r30
    2886:	ff 93       	push	r31
    2888:	e0 91 02 23 	lds	r30, 0x2302
    288c:	f0 91 03 23 	lds	r31, 0x2303
    2890:	30 97       	sbiw	r30, 0x00	; 0
    2892:	29 f0       	breq	.+10     	; 0x289e <__vector_12+0x3c>
    2894:	80 91 f8 23 	lds	r24, 0x23F8
    2898:	90 91 f9 23 	lds	r25, 0x23F9
    289c:	19 95       	eicall
    289e:	ff 91       	pop	r31
    28a0:	ef 91       	pop	r30
    28a2:	bf 91       	pop	r27
    28a4:	af 91       	pop	r26
    28a6:	9f 91       	pop	r25
    28a8:	8f 91       	pop	r24
    28aa:	7f 91       	pop	r23
    28ac:	6f 91       	pop	r22
    28ae:	5f 91       	pop	r21
    28b0:	4f 91       	pop	r20
    28b2:	3f 91       	pop	r19
    28b4:	2f 91       	pop	r18
    28b6:	0f 90       	pop	r0
    28b8:	0b be       	out	0x3b, r0	; 59
    28ba:	0f 90       	pop	r0
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	0f 90       	pop	r0
    28c0:	1f 90       	pop	r1
    28c2:	18 95       	reti

000028c4 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    28c4:	1f 92       	push	r1
    28c6:	0f 92       	push	r0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	0f 92       	push	r0
    28cc:	11 24       	eor	r1, r1
    28ce:	0b b6       	in	r0, 0x3b	; 59
    28d0:	0f 92       	push	r0
    28d2:	2f 93       	push	r18
    28d4:	3f 93       	push	r19
    28d6:	4f 93       	push	r20
    28d8:	5f 93       	push	r21
    28da:	6f 93       	push	r22
    28dc:	7f 93       	push	r23
    28de:	8f 93       	push	r24
    28e0:	9f 93       	push	r25
    28e2:	af 93       	push	r26
    28e4:	bf 93       	push	r27
    28e6:	ef 93       	push	r30
    28e8:	ff 93       	push	r31
    28ea:	e0 91 04 23 	lds	r30, 0x2304
    28ee:	f0 91 05 23 	lds	r31, 0x2305
    28f2:	30 97       	sbiw	r30, 0x00	; 0
    28f4:	29 f0       	breq	.+10     	; 0x2900 <__vector_13+0x3c>
    28f6:	80 91 fa 23 	lds	r24, 0x23FA
    28fa:	90 91 fb 23 	lds	r25, 0x23FB
    28fe:	19 95       	eicall
    2900:	ff 91       	pop	r31
    2902:	ef 91       	pop	r30
    2904:	bf 91       	pop	r27
    2906:	af 91       	pop	r26
    2908:	9f 91       	pop	r25
    290a:	8f 91       	pop	r24
    290c:	7f 91       	pop	r23
    290e:	6f 91       	pop	r22
    2910:	5f 91       	pop	r21
    2912:	4f 91       	pop	r20
    2914:	3f 91       	pop	r19
    2916:	2f 91       	pop	r18
    2918:	0f 90       	pop	r0
    291a:	0b be       	out	0x3b, r0	; 59
    291c:	0f 90       	pop	r0
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	0f 90       	pop	r0
    2922:	1f 90       	pop	r1
    2924:	18 95       	reti

00002926 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    2926:	1f 92       	push	r1
    2928:	0f 92       	push	r0
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	0f 92       	push	r0
    292e:	11 24       	eor	r1, r1
    2930:	0b b6       	in	r0, 0x3b	; 59
    2932:	0f 92       	push	r0
    2934:	2f 93       	push	r18
    2936:	3f 93       	push	r19
    2938:	4f 93       	push	r20
    293a:	5f 93       	push	r21
    293c:	6f 93       	push	r22
    293e:	7f 93       	push	r23
    2940:	8f 93       	push	r24
    2942:	9f 93       	push	r25
    2944:	af 93       	push	r26
    2946:	bf 93       	push	r27
    2948:	ef 93       	push	r30
    294a:	ff 93       	push	r31
    294c:	e0 91 06 23 	lds	r30, 0x2306
    2950:	f0 91 07 23 	lds	r31, 0x2307
    2954:	30 97       	sbiw	r30, 0x00	; 0
    2956:	29 f0       	breq	.+10     	; 0x2962 <__vector_14+0x3c>
    2958:	80 91 fc 23 	lds	r24, 0x23FC
    295c:	90 91 fd 23 	lds	r25, 0x23FD
    2960:	19 95       	eicall
    2962:	ff 91       	pop	r31
    2964:	ef 91       	pop	r30
    2966:	bf 91       	pop	r27
    2968:	af 91       	pop	r26
    296a:	9f 91       	pop	r25
    296c:	8f 91       	pop	r24
    296e:	7f 91       	pop	r23
    2970:	6f 91       	pop	r22
    2972:	5f 91       	pop	r21
    2974:	4f 91       	pop	r20
    2976:	3f 91       	pop	r19
    2978:	2f 91       	pop	r18
    297a:	0f 90       	pop	r0
    297c:	0b be       	out	0x3b, r0	; 59
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	0f 90       	pop	r0
    2984:	1f 90       	pop	r1
    2986:	18 95       	reti

00002988 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    2988:	1f 92       	push	r1
    298a:	0f 92       	push	r0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	0f 92       	push	r0
    2990:	11 24       	eor	r1, r1
    2992:	0b b6       	in	r0, 0x3b	; 59
    2994:	0f 92       	push	r0
    2996:	2f 93       	push	r18
    2998:	3f 93       	push	r19
    299a:	4f 93       	push	r20
    299c:	5f 93       	push	r21
    299e:	6f 93       	push	r22
    29a0:	7f 93       	push	r23
    29a2:	8f 93       	push	r24
    29a4:	9f 93       	push	r25
    29a6:	af 93       	push	r26
    29a8:	bf 93       	push	r27
    29aa:	ef 93       	push	r30
    29ac:	ff 93       	push	r31
    29ae:	e0 91 08 23 	lds	r30, 0x2308
    29b2:	f0 91 09 23 	lds	r31, 0x2309
    29b6:	30 97       	sbiw	r30, 0x00	; 0
    29b8:	29 f0       	breq	.+10     	; 0x29c4 <__vector_15+0x3c>
    29ba:	80 91 fe 23 	lds	r24, 0x23FE
    29be:	90 91 ff 23 	lds	r25, 0x23FF
    29c2:	19 95       	eicall
    29c4:	ff 91       	pop	r31
    29c6:	ef 91       	pop	r30
    29c8:	bf 91       	pop	r27
    29ca:	af 91       	pop	r26
    29cc:	9f 91       	pop	r25
    29ce:	8f 91       	pop	r24
    29d0:	7f 91       	pop	r23
    29d2:	6f 91       	pop	r22
    29d4:	5f 91       	pop	r21
    29d6:	4f 91       	pop	r20
    29d8:	3f 91       	pop	r19
    29da:	2f 91       	pop	r18
    29dc:	0f 90       	pop	r0
    29de:	0b be       	out	0x3b, r0	; 59
    29e0:	0f 90       	pop	r0
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	0f 90       	pop	r0
    29e6:	1f 90       	pop	r1
    29e8:	18 95       	reti

000029ea <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	0b b6       	in	r0, 0x3b	; 59
    29f6:	0f 92       	push	r0
    29f8:	2f 93       	push	r18
    29fa:	3f 93       	push	r19
    29fc:	4f 93       	push	r20
    29fe:	5f 93       	push	r21
    2a00:	6f 93       	push	r22
    2a02:	7f 93       	push	r23
    2a04:	8f 93       	push	r24
    2a06:	9f 93       	push	r25
    2a08:	af 93       	push	r26
    2a0a:	bf 93       	push	r27
    2a0c:	ef 93       	push	r30
    2a0e:	ff 93       	push	r31
    2a10:	e0 91 0a 23 	lds	r30, 0x230A
    2a14:	f0 91 0b 23 	lds	r31, 0x230B
    2a18:	30 97       	sbiw	r30, 0x00	; 0
    2a1a:	29 f0       	breq	.+10     	; 0x2a26 <__vector_16+0x3c>
    2a1c:	80 91 00 24 	lds	r24, 0x2400
    2a20:	90 91 01 24 	lds	r25, 0x2401
    2a24:	19 95       	eicall
    2a26:	ff 91       	pop	r31
    2a28:	ef 91       	pop	r30
    2a2a:	bf 91       	pop	r27
    2a2c:	af 91       	pop	r26
    2a2e:	9f 91       	pop	r25
    2a30:	8f 91       	pop	r24
    2a32:	7f 91       	pop	r23
    2a34:	6f 91       	pop	r22
    2a36:	5f 91       	pop	r21
    2a38:	4f 91       	pop	r20
    2a3a:	3f 91       	pop	r19
    2a3c:	2f 91       	pop	r18
    2a3e:	0f 90       	pop	r0
    2a40:	0b be       	out	0x3b, r0	; 59
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    2a4c:	1f 92       	push	r1
    2a4e:	0f 92       	push	r0
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	0f 92       	push	r0
    2a54:	11 24       	eor	r1, r1
    2a56:	0b b6       	in	r0, 0x3b	; 59
    2a58:	0f 92       	push	r0
    2a5a:	2f 93       	push	r18
    2a5c:	3f 93       	push	r19
    2a5e:	4f 93       	push	r20
    2a60:	5f 93       	push	r21
    2a62:	6f 93       	push	r22
    2a64:	7f 93       	push	r23
    2a66:	8f 93       	push	r24
    2a68:	9f 93       	push	r25
    2a6a:	af 93       	push	r26
    2a6c:	bf 93       	push	r27
    2a6e:	ef 93       	push	r30
    2a70:	ff 93       	push	r31
    2a72:	e0 91 0c 23 	lds	r30, 0x230C
    2a76:	f0 91 0d 23 	lds	r31, 0x230D
    2a7a:	30 97       	sbiw	r30, 0x00	; 0
    2a7c:	29 f0       	breq	.+10     	; 0x2a88 <__vector_17+0x3c>
    2a7e:	80 91 02 24 	lds	r24, 0x2402
    2a82:	90 91 03 24 	lds	r25, 0x2403
    2a86:	19 95       	eicall
    2a88:	ff 91       	pop	r31
    2a8a:	ef 91       	pop	r30
    2a8c:	bf 91       	pop	r27
    2a8e:	af 91       	pop	r26
    2a90:	9f 91       	pop	r25
    2a92:	8f 91       	pop	r24
    2a94:	7f 91       	pop	r23
    2a96:	6f 91       	pop	r22
    2a98:	5f 91       	pop	r21
    2a9a:	4f 91       	pop	r20
    2a9c:	3f 91       	pop	r19
    2a9e:	2f 91       	pop	r18
    2aa0:	0f 90       	pop	r0
    2aa2:	0b be       	out	0x3b, r0	; 59
    2aa4:	0f 90       	pop	r0
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	0f 90       	pop	r0
    2aaa:	1f 90       	pop	r1
    2aac:	18 95       	reti

00002aae <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2aae:	1f 92       	push	r1
    2ab0:	0f 92       	push	r0
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	0f 92       	push	r0
    2ab6:	11 24       	eor	r1, r1
    2ab8:	0b b6       	in	r0, 0x3b	; 59
    2aba:	0f 92       	push	r0
    2abc:	2f 93       	push	r18
    2abe:	3f 93       	push	r19
    2ac0:	4f 93       	push	r20
    2ac2:	5f 93       	push	r21
    2ac4:	6f 93       	push	r22
    2ac6:	7f 93       	push	r23
    2ac8:	8f 93       	push	r24
    2aca:	9f 93       	push	r25
    2acc:	af 93       	push	r26
    2ace:	bf 93       	push	r27
    2ad0:	ef 93       	push	r30
    2ad2:	ff 93       	push	r31
    2ad4:	e0 91 0e 23 	lds	r30, 0x230E
    2ad8:	f0 91 0f 23 	lds	r31, 0x230F
    2adc:	30 97       	sbiw	r30, 0x00	; 0
    2ade:	29 f0       	breq	.+10     	; 0x2aea <__vector_18+0x3c>
    2ae0:	80 91 04 24 	lds	r24, 0x2404
    2ae4:	90 91 05 24 	lds	r25, 0x2405
    2ae8:	19 95       	eicall
    2aea:	ff 91       	pop	r31
    2aec:	ef 91       	pop	r30
    2aee:	bf 91       	pop	r27
    2af0:	af 91       	pop	r26
    2af2:	9f 91       	pop	r25
    2af4:	8f 91       	pop	r24
    2af6:	7f 91       	pop	r23
    2af8:	6f 91       	pop	r22
    2afa:	5f 91       	pop	r21
    2afc:	4f 91       	pop	r20
    2afe:	3f 91       	pop	r19
    2b00:	2f 91       	pop	r18
    2b02:	0f 90       	pop	r0
    2b04:	0b be       	out	0x3b, r0	; 59
    2b06:	0f 90       	pop	r0
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	0f 90       	pop	r0
    2b0c:	1f 90       	pop	r1
    2b0e:	18 95       	reti

00002b10 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2b10:	1f 92       	push	r1
    2b12:	0f 92       	push	r0
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	0f 92       	push	r0
    2b18:	11 24       	eor	r1, r1
    2b1a:	0b b6       	in	r0, 0x3b	; 59
    2b1c:	0f 92       	push	r0
    2b1e:	2f 93       	push	r18
    2b20:	3f 93       	push	r19
    2b22:	4f 93       	push	r20
    2b24:	5f 93       	push	r21
    2b26:	6f 93       	push	r22
    2b28:	7f 93       	push	r23
    2b2a:	8f 93       	push	r24
    2b2c:	9f 93       	push	r25
    2b2e:	af 93       	push	r26
    2b30:	bf 93       	push	r27
    2b32:	ef 93       	push	r30
    2b34:	ff 93       	push	r31
    2b36:	e0 91 10 23 	lds	r30, 0x2310
    2b3a:	f0 91 11 23 	lds	r31, 0x2311
    2b3e:	30 97       	sbiw	r30, 0x00	; 0
    2b40:	29 f0       	breq	.+10     	; 0x2b4c <__vector_19+0x3c>
    2b42:	80 91 06 24 	lds	r24, 0x2406
    2b46:	90 91 07 24 	lds	r25, 0x2407
    2b4a:	19 95       	eicall
    2b4c:	ff 91       	pop	r31
    2b4e:	ef 91       	pop	r30
    2b50:	bf 91       	pop	r27
    2b52:	af 91       	pop	r26
    2b54:	9f 91       	pop	r25
    2b56:	8f 91       	pop	r24
    2b58:	7f 91       	pop	r23
    2b5a:	6f 91       	pop	r22
    2b5c:	5f 91       	pop	r21
    2b5e:	4f 91       	pop	r20
    2b60:	3f 91       	pop	r19
    2b62:	2f 91       	pop	r18
    2b64:	0f 90       	pop	r0
    2b66:	0b be       	out	0x3b, r0	; 59
    2b68:	0f 90       	pop	r0
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	0f 90       	pop	r0
    2b6e:	1f 90       	pop	r1
    2b70:	18 95       	reti

00002b72 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    2b72:	1f 92       	push	r1
    2b74:	0f 92       	push	r0
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	0f 92       	push	r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	0b b6       	in	r0, 0x3b	; 59
    2b7e:	0f 92       	push	r0
    2b80:	2f 93       	push	r18
    2b82:	3f 93       	push	r19
    2b84:	4f 93       	push	r20
    2b86:	5f 93       	push	r21
    2b88:	6f 93       	push	r22
    2b8a:	7f 93       	push	r23
    2b8c:	8f 93       	push	r24
    2b8e:	9f 93       	push	r25
    2b90:	af 93       	push	r26
    2b92:	bf 93       	push	r27
    2b94:	ef 93       	push	r30
    2b96:	ff 93       	push	r31
    2b98:	e0 91 12 23 	lds	r30, 0x2312
    2b9c:	f0 91 13 23 	lds	r31, 0x2313
    2ba0:	30 97       	sbiw	r30, 0x00	; 0
    2ba2:	29 f0       	breq	.+10     	; 0x2bae <__vector_20+0x3c>
    2ba4:	80 91 08 24 	lds	r24, 0x2408
    2ba8:	90 91 09 24 	lds	r25, 0x2409
    2bac:	19 95       	eicall
    2bae:	ff 91       	pop	r31
    2bb0:	ef 91       	pop	r30
    2bb2:	bf 91       	pop	r27
    2bb4:	af 91       	pop	r26
    2bb6:	9f 91       	pop	r25
    2bb8:	8f 91       	pop	r24
    2bba:	7f 91       	pop	r23
    2bbc:	6f 91       	pop	r22
    2bbe:	5f 91       	pop	r21
    2bc0:	4f 91       	pop	r20
    2bc2:	3f 91       	pop	r19
    2bc4:	2f 91       	pop	r18
    2bc6:	0f 90       	pop	r0
    2bc8:	0b be       	out	0x3b, r0	; 59
    2bca:	0f 90       	pop	r0
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	0f 90       	pop	r0
    2bd0:	1f 90       	pop	r1
    2bd2:	18 95       	reti

00002bd4 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2bd4:	1f 92       	push	r1
    2bd6:	0f 92       	push	r0
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	0f 92       	push	r0
    2bdc:	11 24       	eor	r1, r1
    2bde:	0b b6       	in	r0, 0x3b	; 59
    2be0:	0f 92       	push	r0
    2be2:	2f 93       	push	r18
    2be4:	3f 93       	push	r19
    2be6:	4f 93       	push	r20
    2be8:	5f 93       	push	r21
    2bea:	6f 93       	push	r22
    2bec:	7f 93       	push	r23
    2bee:	8f 93       	push	r24
    2bf0:	9f 93       	push	r25
    2bf2:	af 93       	push	r26
    2bf4:	bf 93       	push	r27
    2bf6:	ef 93       	push	r30
    2bf8:	ff 93       	push	r31
    2bfa:	e0 91 14 23 	lds	r30, 0x2314
    2bfe:	f0 91 15 23 	lds	r31, 0x2315
    2c02:	30 97       	sbiw	r30, 0x00	; 0
    2c04:	29 f0       	breq	.+10     	; 0x2c10 <__vector_21+0x3c>
    2c06:	80 91 0a 24 	lds	r24, 0x240A
    2c0a:	90 91 0b 24 	lds	r25, 0x240B
    2c0e:	19 95       	eicall
    2c10:	ff 91       	pop	r31
    2c12:	ef 91       	pop	r30
    2c14:	bf 91       	pop	r27
    2c16:	af 91       	pop	r26
    2c18:	9f 91       	pop	r25
    2c1a:	8f 91       	pop	r24
    2c1c:	7f 91       	pop	r23
    2c1e:	6f 91       	pop	r22
    2c20:	5f 91       	pop	r21
    2c22:	4f 91       	pop	r20
    2c24:	3f 91       	pop	r19
    2c26:	2f 91       	pop	r18
    2c28:	0f 90       	pop	r0
    2c2a:	0b be       	out	0x3b, r0	; 59
    2c2c:	0f 90       	pop	r0
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	0b b6       	in	r0, 0x3b	; 59
    2c42:	0f 92       	push	r0
    2c44:	2f 93       	push	r18
    2c46:	3f 93       	push	r19
    2c48:	4f 93       	push	r20
    2c4a:	5f 93       	push	r21
    2c4c:	6f 93       	push	r22
    2c4e:	7f 93       	push	r23
    2c50:	8f 93       	push	r24
    2c52:	9f 93       	push	r25
    2c54:	af 93       	push	r26
    2c56:	bf 93       	push	r27
    2c58:	ef 93       	push	r30
    2c5a:	ff 93       	push	r31
    2c5c:	e0 91 16 23 	lds	r30, 0x2316
    2c60:	f0 91 17 23 	lds	r31, 0x2317
    2c64:	30 97       	sbiw	r30, 0x00	; 0
    2c66:	29 f0       	breq	.+10     	; 0x2c72 <__vector_22+0x3c>
    2c68:	80 91 0c 24 	lds	r24, 0x240C
    2c6c:	90 91 0d 24 	lds	r25, 0x240D
    2c70:	19 95       	eicall
    2c72:	ff 91       	pop	r31
    2c74:	ef 91       	pop	r30
    2c76:	bf 91       	pop	r27
    2c78:	af 91       	pop	r26
    2c7a:	9f 91       	pop	r25
    2c7c:	8f 91       	pop	r24
    2c7e:	7f 91       	pop	r23
    2c80:	6f 91       	pop	r22
    2c82:	5f 91       	pop	r21
    2c84:	4f 91       	pop	r20
    2c86:	3f 91       	pop	r19
    2c88:	2f 91       	pop	r18
    2c8a:	0f 90       	pop	r0
    2c8c:	0b be       	out	0x3b, r0	; 59
    2c8e:	0f 90       	pop	r0
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	0f 90       	pop	r0
    2c94:	1f 90       	pop	r1
    2c96:	18 95       	reti

00002c98 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2c98:	1f 92       	push	r1
    2c9a:	0f 92       	push	r0
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	0f 92       	push	r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	0b b6       	in	r0, 0x3b	; 59
    2ca4:	0f 92       	push	r0
    2ca6:	2f 93       	push	r18
    2ca8:	3f 93       	push	r19
    2caa:	4f 93       	push	r20
    2cac:	5f 93       	push	r21
    2cae:	6f 93       	push	r22
    2cb0:	7f 93       	push	r23
    2cb2:	8f 93       	push	r24
    2cb4:	9f 93       	push	r25
    2cb6:	af 93       	push	r26
    2cb8:	bf 93       	push	r27
    2cba:	ef 93       	push	r30
    2cbc:	ff 93       	push	r31
    2cbe:	e0 91 18 23 	lds	r30, 0x2318
    2cc2:	f0 91 19 23 	lds	r31, 0x2319
    2cc6:	30 97       	sbiw	r30, 0x00	; 0
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <__vector_23+0x3c>
    2cca:	80 91 0e 24 	lds	r24, 0x240E
    2cce:	90 91 0f 24 	lds	r25, 0x240F
    2cd2:	19 95       	eicall
    2cd4:	ff 91       	pop	r31
    2cd6:	ef 91       	pop	r30
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	9f 91       	pop	r25
    2cde:	8f 91       	pop	r24
    2ce0:	7f 91       	pop	r23
    2ce2:	6f 91       	pop	r22
    2ce4:	5f 91       	pop	r21
    2ce6:	4f 91       	pop	r20
    2ce8:	3f 91       	pop	r19
    2cea:	2f 91       	pop	r18
    2cec:	0f 90       	pop	r0
    2cee:	0b be       	out	0x3b, r0	; 59
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2cfa:	1f 92       	push	r1
    2cfc:	0f 92       	push	r0
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	0f 92       	push	r0
    2d02:	11 24       	eor	r1, r1
    2d04:	0b b6       	in	r0, 0x3b	; 59
    2d06:	0f 92       	push	r0
    2d08:	2f 93       	push	r18
    2d0a:	3f 93       	push	r19
    2d0c:	4f 93       	push	r20
    2d0e:	5f 93       	push	r21
    2d10:	6f 93       	push	r22
    2d12:	7f 93       	push	r23
    2d14:	8f 93       	push	r24
    2d16:	9f 93       	push	r25
    2d18:	af 93       	push	r26
    2d1a:	bf 93       	push	r27
    2d1c:	ef 93       	push	r30
    2d1e:	ff 93       	push	r31
    2d20:	e0 91 1a 23 	lds	r30, 0x231A
    2d24:	f0 91 1b 23 	lds	r31, 0x231B
    2d28:	30 97       	sbiw	r30, 0x00	; 0
    2d2a:	29 f0       	breq	.+10     	; 0x2d36 <__vector_24+0x3c>
    2d2c:	80 91 10 24 	lds	r24, 0x2410
    2d30:	90 91 11 24 	lds	r25, 0x2411
    2d34:	19 95       	eicall
    2d36:	ff 91       	pop	r31
    2d38:	ef 91       	pop	r30
    2d3a:	bf 91       	pop	r27
    2d3c:	af 91       	pop	r26
    2d3e:	9f 91       	pop	r25
    2d40:	8f 91       	pop	r24
    2d42:	7f 91       	pop	r23
    2d44:	6f 91       	pop	r22
    2d46:	5f 91       	pop	r21
    2d48:	4f 91       	pop	r20
    2d4a:	3f 91       	pop	r19
    2d4c:	2f 91       	pop	r18
    2d4e:	0f 90       	pop	r0
    2d50:	0b be       	out	0x3b, r0	; 59
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	0f 90       	pop	r0
    2d58:	1f 90       	pop	r1
    2d5a:	18 95       	reti

00002d5c <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2d5c:	1f 92       	push	r1
    2d5e:	0f 92       	push	r0
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	0f 92       	push	r0
    2d64:	11 24       	eor	r1, r1
    2d66:	0b b6       	in	r0, 0x3b	; 59
    2d68:	0f 92       	push	r0
    2d6a:	2f 93       	push	r18
    2d6c:	3f 93       	push	r19
    2d6e:	4f 93       	push	r20
    2d70:	5f 93       	push	r21
    2d72:	6f 93       	push	r22
    2d74:	7f 93       	push	r23
    2d76:	8f 93       	push	r24
    2d78:	9f 93       	push	r25
    2d7a:	af 93       	push	r26
    2d7c:	bf 93       	push	r27
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31
    2d82:	e0 91 1c 23 	lds	r30, 0x231C
    2d86:	f0 91 1d 23 	lds	r31, 0x231D
    2d8a:	30 97       	sbiw	r30, 0x00	; 0
    2d8c:	29 f0       	breq	.+10     	; 0x2d98 <__vector_25+0x3c>
    2d8e:	80 91 12 24 	lds	r24, 0x2412
    2d92:	90 91 13 24 	lds	r25, 0x2413
    2d96:	19 95       	eicall
    2d98:	ff 91       	pop	r31
    2d9a:	ef 91       	pop	r30
    2d9c:	bf 91       	pop	r27
    2d9e:	af 91       	pop	r26
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	7f 91       	pop	r23
    2da6:	6f 91       	pop	r22
    2da8:	5f 91       	pop	r21
    2daa:	4f 91       	pop	r20
    2dac:	3f 91       	pop	r19
    2dae:	2f 91       	pop	r18
    2db0:	0f 90       	pop	r0
    2db2:	0b be       	out	0x3b, r0	; 59
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	0b b6       	in	r0, 0x3b	; 59
    2dca:	0f 92       	push	r0
    2dcc:	2f 93       	push	r18
    2dce:	3f 93       	push	r19
    2dd0:	4f 93       	push	r20
    2dd2:	5f 93       	push	r21
    2dd4:	6f 93       	push	r22
    2dd6:	7f 93       	push	r23
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31
    2de4:	e0 91 1e 23 	lds	r30, 0x231E
    2de8:	f0 91 1f 23 	lds	r31, 0x231F
    2dec:	30 97       	sbiw	r30, 0x00	; 0
    2dee:	29 f0       	breq	.+10     	; 0x2dfa <__vector_26+0x3c>
    2df0:	80 91 14 24 	lds	r24, 0x2414
    2df4:	90 91 15 24 	lds	r25, 0x2415
    2df8:	19 95       	eicall
    2dfa:	ff 91       	pop	r31
    2dfc:	ef 91       	pop	r30
    2dfe:	bf 91       	pop	r27
    2e00:	af 91       	pop	r26
    2e02:	9f 91       	pop	r25
    2e04:	8f 91       	pop	r24
    2e06:	7f 91       	pop	r23
    2e08:	6f 91       	pop	r22
    2e0a:	5f 91       	pop	r21
    2e0c:	4f 91       	pop	r20
    2e0e:	3f 91       	pop	r19
    2e10:	2f 91       	pop	r18
    2e12:	0f 90       	pop	r0
    2e14:	0b be       	out	0x3b, r0	; 59
    2e16:	0f 90       	pop	r0
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	0f 90       	pop	r0
    2e1c:	1f 90       	pop	r1
    2e1e:	18 95       	reti

00002e20 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2e20:	1f 92       	push	r1
    2e22:	0f 92       	push	r0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	0f 92       	push	r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	0b b6       	in	r0, 0x3b	; 59
    2e2c:	0f 92       	push	r0
    2e2e:	2f 93       	push	r18
    2e30:	3f 93       	push	r19
    2e32:	4f 93       	push	r20
    2e34:	5f 93       	push	r21
    2e36:	6f 93       	push	r22
    2e38:	7f 93       	push	r23
    2e3a:	8f 93       	push	r24
    2e3c:	9f 93       	push	r25
    2e3e:	af 93       	push	r26
    2e40:	bf 93       	push	r27
    2e42:	ef 93       	push	r30
    2e44:	ff 93       	push	r31
    2e46:	e0 91 20 23 	lds	r30, 0x2320
    2e4a:	f0 91 21 23 	lds	r31, 0x2321
    2e4e:	30 97       	sbiw	r30, 0x00	; 0
    2e50:	29 f0       	breq	.+10     	; 0x2e5c <__vector_27+0x3c>
    2e52:	80 91 16 24 	lds	r24, 0x2416
    2e56:	90 91 17 24 	lds	r25, 0x2417
    2e5a:	19 95       	eicall
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	bf 91       	pop	r27
    2e62:	af 91       	pop	r26
    2e64:	9f 91       	pop	r25
    2e66:	8f 91       	pop	r24
    2e68:	7f 91       	pop	r23
    2e6a:	6f 91       	pop	r22
    2e6c:	5f 91       	pop	r21
    2e6e:	4f 91       	pop	r20
    2e70:	3f 91       	pop	r19
    2e72:	2f 91       	pop	r18
    2e74:	0f 90       	pop	r0
    2e76:	0b be       	out	0x3b, r0	; 59
    2e78:	0f 90       	pop	r0
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	0f 90       	pop	r0
    2e7e:	1f 90       	pop	r1
    2e80:	18 95       	reti

00002e82 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2e82:	1f 92       	push	r1
    2e84:	0f 92       	push	r0
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	0f 92       	push	r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	0b b6       	in	r0, 0x3b	; 59
    2e8e:	0f 92       	push	r0
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	4f 93       	push	r20
    2e96:	5f 93       	push	r21
    2e98:	6f 93       	push	r22
    2e9a:	7f 93       	push	r23
    2e9c:	8f 93       	push	r24
    2e9e:	9f 93       	push	r25
    2ea0:	af 93       	push	r26
    2ea2:	bf 93       	push	r27
    2ea4:	ef 93       	push	r30
    2ea6:	ff 93       	push	r31
    2ea8:	e0 91 22 23 	lds	r30, 0x2322
    2eac:	f0 91 23 23 	lds	r31, 0x2323
    2eb0:	30 97       	sbiw	r30, 0x00	; 0
    2eb2:	29 f0       	breq	.+10     	; 0x2ebe <__vector_28+0x3c>
    2eb4:	80 91 18 24 	lds	r24, 0x2418
    2eb8:	90 91 19 24 	lds	r25, 0x2419
    2ebc:	19 95       	eicall
    2ebe:	ff 91       	pop	r31
    2ec0:	ef 91       	pop	r30
    2ec2:	bf 91       	pop	r27
    2ec4:	af 91       	pop	r26
    2ec6:	9f 91       	pop	r25
    2ec8:	8f 91       	pop	r24
    2eca:	7f 91       	pop	r23
    2ecc:	6f 91       	pop	r22
    2ece:	5f 91       	pop	r21
    2ed0:	4f 91       	pop	r20
    2ed2:	3f 91       	pop	r19
    2ed4:	2f 91       	pop	r18
    2ed6:	0f 90       	pop	r0
    2ed8:	0b be       	out	0x3b, r0	; 59
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2ee4:	1f 92       	push	r1
    2ee6:	0f 92       	push	r0
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	0f 92       	push	r0
    2eec:	11 24       	eor	r1, r1
    2eee:	0b b6       	in	r0, 0x3b	; 59
    2ef0:	0f 92       	push	r0
    2ef2:	2f 93       	push	r18
    2ef4:	3f 93       	push	r19
    2ef6:	4f 93       	push	r20
    2ef8:	5f 93       	push	r21
    2efa:	6f 93       	push	r22
    2efc:	7f 93       	push	r23
    2efe:	8f 93       	push	r24
    2f00:	9f 93       	push	r25
    2f02:	af 93       	push	r26
    2f04:	bf 93       	push	r27
    2f06:	ef 93       	push	r30
    2f08:	ff 93       	push	r31
    2f0a:	e0 91 24 23 	lds	r30, 0x2324
    2f0e:	f0 91 25 23 	lds	r31, 0x2325
    2f12:	30 97       	sbiw	r30, 0x00	; 0
    2f14:	29 f0       	breq	.+10     	; 0x2f20 <__vector_29+0x3c>
    2f16:	80 91 1a 24 	lds	r24, 0x241A
    2f1a:	90 91 1b 24 	lds	r25, 0x241B
    2f1e:	19 95       	eicall
    2f20:	ff 91       	pop	r31
    2f22:	ef 91       	pop	r30
    2f24:	bf 91       	pop	r27
    2f26:	af 91       	pop	r26
    2f28:	9f 91       	pop	r25
    2f2a:	8f 91       	pop	r24
    2f2c:	7f 91       	pop	r23
    2f2e:	6f 91       	pop	r22
    2f30:	5f 91       	pop	r21
    2f32:	4f 91       	pop	r20
    2f34:	3f 91       	pop	r19
    2f36:	2f 91       	pop	r18
    2f38:	0f 90       	pop	r0
    2f3a:	0b be       	out	0x3b, r0	; 59
    2f3c:	0f 90       	pop	r0
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	0f 90       	pop	r0
    2f42:	1f 90       	pop	r1
    2f44:	18 95       	reti

00002f46 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2f46:	1f 92       	push	r1
    2f48:	0f 92       	push	r0
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	0f 92       	push	r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	0b b6       	in	r0, 0x3b	; 59
    2f52:	0f 92       	push	r0
    2f54:	2f 93       	push	r18
    2f56:	3f 93       	push	r19
    2f58:	4f 93       	push	r20
    2f5a:	5f 93       	push	r21
    2f5c:	6f 93       	push	r22
    2f5e:	7f 93       	push	r23
    2f60:	8f 93       	push	r24
    2f62:	9f 93       	push	r25
    2f64:	af 93       	push	r26
    2f66:	bf 93       	push	r27
    2f68:	ef 93       	push	r30
    2f6a:	ff 93       	push	r31
    2f6c:	e0 91 26 23 	lds	r30, 0x2326
    2f70:	f0 91 27 23 	lds	r31, 0x2327
    2f74:	30 97       	sbiw	r30, 0x00	; 0
    2f76:	29 f0       	breq	.+10     	; 0x2f82 <__vector_30+0x3c>
    2f78:	80 91 1c 24 	lds	r24, 0x241C
    2f7c:	90 91 1d 24 	lds	r25, 0x241D
    2f80:	19 95       	eicall
    2f82:	ff 91       	pop	r31
    2f84:	ef 91       	pop	r30
    2f86:	bf 91       	pop	r27
    2f88:	af 91       	pop	r26
    2f8a:	9f 91       	pop	r25
    2f8c:	8f 91       	pop	r24
    2f8e:	7f 91       	pop	r23
    2f90:	6f 91       	pop	r22
    2f92:	5f 91       	pop	r21
    2f94:	4f 91       	pop	r20
    2f96:	3f 91       	pop	r19
    2f98:	2f 91       	pop	r18
    2f9a:	0f 90       	pop	r0
    2f9c:	0b be       	out	0x3b, r0	; 59
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2fa8:	1f 92       	push	r1
    2faa:	0f 92       	push	r0
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	0f 92       	push	r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	0b b6       	in	r0, 0x3b	; 59
    2fb4:	0f 92       	push	r0
    2fb6:	2f 93       	push	r18
    2fb8:	3f 93       	push	r19
    2fba:	4f 93       	push	r20
    2fbc:	5f 93       	push	r21
    2fbe:	6f 93       	push	r22
    2fc0:	7f 93       	push	r23
    2fc2:	8f 93       	push	r24
    2fc4:	9f 93       	push	r25
    2fc6:	af 93       	push	r26
    2fc8:	bf 93       	push	r27
    2fca:	ef 93       	push	r30
    2fcc:	ff 93       	push	r31
    2fce:	e0 91 28 23 	lds	r30, 0x2328
    2fd2:	f0 91 29 23 	lds	r31, 0x2329
    2fd6:	30 97       	sbiw	r30, 0x00	; 0
    2fd8:	29 f0       	breq	.+10     	; 0x2fe4 <__vector_31+0x3c>
    2fda:	80 91 1e 24 	lds	r24, 0x241E
    2fde:	90 91 1f 24 	lds	r25, 0x241F
    2fe2:	19 95       	eicall
    2fe4:	ff 91       	pop	r31
    2fe6:	ef 91       	pop	r30
    2fe8:	bf 91       	pop	r27
    2fea:	af 91       	pop	r26
    2fec:	9f 91       	pop	r25
    2fee:	8f 91       	pop	r24
    2ff0:	7f 91       	pop	r23
    2ff2:	6f 91       	pop	r22
    2ff4:	5f 91       	pop	r21
    2ff6:	4f 91       	pop	r20
    2ff8:	3f 91       	pop	r19
    2ffa:	2f 91       	pop	r18
    2ffc:	0f 90       	pop	r0
    2ffe:	0b be       	out	0x3b, r0	; 59
    3000:	0f 90       	pop	r0
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	0f 90       	pop	r0
    3006:	1f 90       	pop	r1
    3008:	18 95       	reti

0000300a <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    300a:	1f 92       	push	r1
    300c:	0f 92       	push	r0
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	0f 92       	push	r0
    3012:	11 24       	eor	r1, r1
    3014:	0b b6       	in	r0, 0x3b	; 59
    3016:	0f 92       	push	r0
    3018:	2f 93       	push	r18
    301a:	3f 93       	push	r19
    301c:	4f 93       	push	r20
    301e:	5f 93       	push	r21
    3020:	6f 93       	push	r22
    3022:	7f 93       	push	r23
    3024:	8f 93       	push	r24
    3026:	9f 93       	push	r25
    3028:	af 93       	push	r26
    302a:	bf 93       	push	r27
    302c:	ef 93       	push	r30
    302e:	ff 93       	push	r31
    3030:	e0 91 2a 23 	lds	r30, 0x232A
    3034:	f0 91 2b 23 	lds	r31, 0x232B
    3038:	30 97       	sbiw	r30, 0x00	; 0
    303a:	29 f0       	breq	.+10     	; 0x3046 <__vector_32+0x3c>
    303c:	80 91 20 24 	lds	r24, 0x2420
    3040:	90 91 21 24 	lds	r25, 0x2421
    3044:	19 95       	eicall
    3046:	ff 91       	pop	r31
    3048:	ef 91       	pop	r30
    304a:	bf 91       	pop	r27
    304c:	af 91       	pop	r26
    304e:	9f 91       	pop	r25
    3050:	8f 91       	pop	r24
    3052:	7f 91       	pop	r23
    3054:	6f 91       	pop	r22
    3056:	5f 91       	pop	r21
    3058:	4f 91       	pop	r20
    305a:	3f 91       	pop	r19
    305c:	2f 91       	pop	r18
    305e:	0f 90       	pop	r0
    3060:	0b be       	out	0x3b, r0	; 59
    3062:	0f 90       	pop	r0
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	0f 90       	pop	r0
    3068:	1f 90       	pop	r1
    306a:	18 95       	reti

0000306c <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    306c:	1f 92       	push	r1
    306e:	0f 92       	push	r0
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	0f 92       	push	r0
    3074:	11 24       	eor	r1, r1
    3076:	0b b6       	in	r0, 0x3b	; 59
    3078:	0f 92       	push	r0
    307a:	2f 93       	push	r18
    307c:	3f 93       	push	r19
    307e:	4f 93       	push	r20
    3080:	5f 93       	push	r21
    3082:	6f 93       	push	r22
    3084:	7f 93       	push	r23
    3086:	8f 93       	push	r24
    3088:	9f 93       	push	r25
    308a:	af 93       	push	r26
    308c:	bf 93       	push	r27
    308e:	ef 93       	push	r30
    3090:	ff 93       	push	r31
    3092:	e0 91 2c 23 	lds	r30, 0x232C
    3096:	f0 91 2d 23 	lds	r31, 0x232D
    309a:	30 97       	sbiw	r30, 0x00	; 0
    309c:	29 f0       	breq	.+10     	; 0x30a8 <__vector_33+0x3c>
    309e:	80 91 22 24 	lds	r24, 0x2422
    30a2:	90 91 23 24 	lds	r25, 0x2423
    30a6:	19 95       	eicall
    30a8:	ff 91       	pop	r31
    30aa:	ef 91       	pop	r30
    30ac:	bf 91       	pop	r27
    30ae:	af 91       	pop	r26
    30b0:	9f 91       	pop	r25
    30b2:	8f 91       	pop	r24
    30b4:	7f 91       	pop	r23
    30b6:	6f 91       	pop	r22
    30b8:	5f 91       	pop	r21
    30ba:	4f 91       	pop	r20
    30bc:	3f 91       	pop	r19
    30be:	2f 91       	pop	r18
    30c0:	0f 90       	pop	r0
    30c2:	0b be       	out	0x3b, r0	; 59
    30c4:	0f 90       	pop	r0
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	0f 90       	pop	r0
    30ca:	1f 90       	pop	r1
    30cc:	18 95       	reti

000030ce <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    30ce:	1f 92       	push	r1
    30d0:	0f 92       	push	r0
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	0f 92       	push	r0
    30d6:	11 24       	eor	r1, r1
    30d8:	0b b6       	in	r0, 0x3b	; 59
    30da:	0f 92       	push	r0
    30dc:	2f 93       	push	r18
    30de:	3f 93       	push	r19
    30e0:	4f 93       	push	r20
    30e2:	5f 93       	push	r21
    30e4:	6f 93       	push	r22
    30e6:	7f 93       	push	r23
    30e8:	8f 93       	push	r24
    30ea:	9f 93       	push	r25
    30ec:	af 93       	push	r26
    30ee:	bf 93       	push	r27
    30f0:	ef 93       	push	r30
    30f2:	ff 93       	push	r31
    30f4:	e0 91 2e 23 	lds	r30, 0x232E
    30f8:	f0 91 2f 23 	lds	r31, 0x232F
    30fc:	30 97       	sbiw	r30, 0x00	; 0
    30fe:	29 f0       	breq	.+10     	; 0x310a <__vector_34+0x3c>
    3100:	80 91 24 24 	lds	r24, 0x2424
    3104:	90 91 25 24 	lds	r25, 0x2425
    3108:	19 95       	eicall
    310a:	ff 91       	pop	r31
    310c:	ef 91       	pop	r30
    310e:	bf 91       	pop	r27
    3110:	af 91       	pop	r26
    3112:	9f 91       	pop	r25
    3114:	8f 91       	pop	r24
    3116:	7f 91       	pop	r23
    3118:	6f 91       	pop	r22
    311a:	5f 91       	pop	r21
    311c:	4f 91       	pop	r20
    311e:	3f 91       	pop	r19
    3120:	2f 91       	pop	r18
    3122:	0f 90       	pop	r0
    3124:	0b be       	out	0x3b, r0	; 59
    3126:	0f 90       	pop	r0
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	0f 90       	pop	r0
    312c:	1f 90       	pop	r1
    312e:	18 95       	reti

00003130 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    3130:	1f 92       	push	r1
    3132:	0f 92       	push	r0
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	0f 92       	push	r0
    3138:	11 24       	eor	r1, r1
    313a:	0b b6       	in	r0, 0x3b	; 59
    313c:	0f 92       	push	r0
    313e:	2f 93       	push	r18
    3140:	3f 93       	push	r19
    3142:	4f 93       	push	r20
    3144:	5f 93       	push	r21
    3146:	6f 93       	push	r22
    3148:	7f 93       	push	r23
    314a:	8f 93       	push	r24
    314c:	9f 93       	push	r25
    314e:	af 93       	push	r26
    3150:	bf 93       	push	r27
    3152:	ef 93       	push	r30
    3154:	ff 93       	push	r31
    3156:	e0 91 30 23 	lds	r30, 0x2330
    315a:	f0 91 31 23 	lds	r31, 0x2331
    315e:	30 97       	sbiw	r30, 0x00	; 0
    3160:	29 f0       	breq	.+10     	; 0x316c <__vector_35+0x3c>
    3162:	80 91 26 24 	lds	r24, 0x2426
    3166:	90 91 27 24 	lds	r25, 0x2427
    316a:	19 95       	eicall
    316c:	ff 91       	pop	r31
    316e:	ef 91       	pop	r30
    3170:	bf 91       	pop	r27
    3172:	af 91       	pop	r26
    3174:	9f 91       	pop	r25
    3176:	8f 91       	pop	r24
    3178:	7f 91       	pop	r23
    317a:	6f 91       	pop	r22
    317c:	5f 91       	pop	r21
    317e:	4f 91       	pop	r20
    3180:	3f 91       	pop	r19
    3182:	2f 91       	pop	r18
    3184:	0f 90       	pop	r0
    3186:	0b be       	out	0x3b, r0	; 59
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	1f 90       	pop	r1
    3190:	18 95       	reti

00003192 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    3192:	1f 92       	push	r1
    3194:	0f 92       	push	r0
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	0f 92       	push	r0
    319a:	11 24       	eor	r1, r1
    319c:	0b b6       	in	r0, 0x3b	; 59
    319e:	0f 92       	push	r0
    31a0:	2f 93       	push	r18
    31a2:	3f 93       	push	r19
    31a4:	4f 93       	push	r20
    31a6:	5f 93       	push	r21
    31a8:	6f 93       	push	r22
    31aa:	7f 93       	push	r23
    31ac:	8f 93       	push	r24
    31ae:	9f 93       	push	r25
    31b0:	af 93       	push	r26
    31b2:	bf 93       	push	r27
    31b4:	ef 93       	push	r30
    31b6:	ff 93       	push	r31
    31b8:	e0 91 32 23 	lds	r30, 0x2332
    31bc:	f0 91 33 23 	lds	r31, 0x2333
    31c0:	30 97       	sbiw	r30, 0x00	; 0
    31c2:	29 f0       	breq	.+10     	; 0x31ce <__vector_36+0x3c>
    31c4:	80 91 28 24 	lds	r24, 0x2428
    31c8:	90 91 29 24 	lds	r25, 0x2429
    31cc:	19 95       	eicall
    31ce:	ff 91       	pop	r31
    31d0:	ef 91       	pop	r30
    31d2:	bf 91       	pop	r27
    31d4:	af 91       	pop	r26
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	7f 91       	pop	r23
    31dc:	6f 91       	pop	r22
    31de:	5f 91       	pop	r21
    31e0:	4f 91       	pop	r20
    31e2:	3f 91       	pop	r19
    31e4:	2f 91       	pop	r18
    31e6:	0f 90       	pop	r0
    31e8:	0b be       	out	0x3b, r0	; 59
    31ea:	0f 90       	pop	r0
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	0f 90       	pop	r0
    31f0:	1f 90       	pop	r1
    31f2:	18 95       	reti

000031f4 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    31f4:	1f 92       	push	r1
    31f6:	0f 92       	push	r0
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	0f 92       	push	r0
    31fc:	11 24       	eor	r1, r1
    31fe:	0b b6       	in	r0, 0x3b	; 59
    3200:	0f 92       	push	r0
    3202:	2f 93       	push	r18
    3204:	3f 93       	push	r19
    3206:	4f 93       	push	r20
    3208:	5f 93       	push	r21
    320a:	6f 93       	push	r22
    320c:	7f 93       	push	r23
    320e:	8f 93       	push	r24
    3210:	9f 93       	push	r25
    3212:	af 93       	push	r26
    3214:	bf 93       	push	r27
    3216:	ef 93       	push	r30
    3218:	ff 93       	push	r31
    321a:	e0 91 34 23 	lds	r30, 0x2334
    321e:	f0 91 35 23 	lds	r31, 0x2335
    3222:	30 97       	sbiw	r30, 0x00	; 0
    3224:	29 f0       	breq	.+10     	; 0x3230 <__vector_37+0x3c>
    3226:	80 91 2a 24 	lds	r24, 0x242A
    322a:	90 91 2b 24 	lds	r25, 0x242B
    322e:	19 95       	eicall
    3230:	ff 91       	pop	r31
    3232:	ef 91       	pop	r30
    3234:	bf 91       	pop	r27
    3236:	af 91       	pop	r26
    3238:	9f 91       	pop	r25
    323a:	8f 91       	pop	r24
    323c:	7f 91       	pop	r23
    323e:	6f 91       	pop	r22
    3240:	5f 91       	pop	r21
    3242:	4f 91       	pop	r20
    3244:	3f 91       	pop	r19
    3246:	2f 91       	pop	r18
    3248:	0f 90       	pop	r0
    324a:	0b be       	out	0x3b, r0	; 59
    324c:	0f 90       	pop	r0
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	0f 90       	pop	r0
    3252:	1f 90       	pop	r1
    3254:	18 95       	reti

00003256 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    3256:	1f 92       	push	r1
    3258:	0f 92       	push	r0
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	0f 92       	push	r0
    325e:	11 24       	eor	r1, r1
    3260:	0b b6       	in	r0, 0x3b	; 59
    3262:	0f 92       	push	r0
    3264:	2f 93       	push	r18
    3266:	3f 93       	push	r19
    3268:	4f 93       	push	r20
    326a:	5f 93       	push	r21
    326c:	6f 93       	push	r22
    326e:	7f 93       	push	r23
    3270:	8f 93       	push	r24
    3272:	9f 93       	push	r25
    3274:	af 93       	push	r26
    3276:	bf 93       	push	r27
    3278:	ef 93       	push	r30
    327a:	ff 93       	push	r31
    327c:	e0 91 36 23 	lds	r30, 0x2336
    3280:	f0 91 37 23 	lds	r31, 0x2337
    3284:	30 97       	sbiw	r30, 0x00	; 0
    3286:	29 f0       	breq	.+10     	; 0x3292 <__vector_38+0x3c>
    3288:	80 91 2c 24 	lds	r24, 0x242C
    328c:	90 91 2d 24 	lds	r25, 0x242D
    3290:	19 95       	eicall
    3292:	ff 91       	pop	r31
    3294:	ef 91       	pop	r30
    3296:	bf 91       	pop	r27
    3298:	af 91       	pop	r26
    329a:	9f 91       	pop	r25
    329c:	8f 91       	pop	r24
    329e:	7f 91       	pop	r23
    32a0:	6f 91       	pop	r22
    32a2:	5f 91       	pop	r21
    32a4:	4f 91       	pop	r20
    32a6:	3f 91       	pop	r19
    32a8:	2f 91       	pop	r18
    32aa:	0f 90       	pop	r0
    32ac:	0b be       	out	0x3b, r0	; 59
    32ae:	0f 90       	pop	r0
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	0f 90       	pop	r0
    32b4:	1f 90       	pop	r1
    32b6:	18 95       	reti

000032b8 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    32b8:	1f 92       	push	r1
    32ba:	0f 92       	push	r0
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	0f 92       	push	r0
    32c0:	11 24       	eor	r1, r1
    32c2:	0b b6       	in	r0, 0x3b	; 59
    32c4:	0f 92       	push	r0
    32c6:	2f 93       	push	r18
    32c8:	3f 93       	push	r19
    32ca:	4f 93       	push	r20
    32cc:	5f 93       	push	r21
    32ce:	6f 93       	push	r22
    32d0:	7f 93       	push	r23
    32d2:	8f 93       	push	r24
    32d4:	9f 93       	push	r25
    32d6:	af 93       	push	r26
    32d8:	bf 93       	push	r27
    32da:	ef 93       	push	r30
    32dc:	ff 93       	push	r31
    32de:	e0 91 38 23 	lds	r30, 0x2338
    32e2:	f0 91 39 23 	lds	r31, 0x2339
    32e6:	30 97       	sbiw	r30, 0x00	; 0
    32e8:	29 f0       	breq	.+10     	; 0x32f4 <__vector_39+0x3c>
    32ea:	80 91 2e 24 	lds	r24, 0x242E
    32ee:	90 91 2f 24 	lds	r25, 0x242F
    32f2:	19 95       	eicall
    32f4:	ff 91       	pop	r31
    32f6:	ef 91       	pop	r30
    32f8:	bf 91       	pop	r27
    32fa:	af 91       	pop	r26
    32fc:	9f 91       	pop	r25
    32fe:	8f 91       	pop	r24
    3300:	7f 91       	pop	r23
    3302:	6f 91       	pop	r22
    3304:	5f 91       	pop	r21
    3306:	4f 91       	pop	r20
    3308:	3f 91       	pop	r19
    330a:	2f 91       	pop	r18
    330c:	0f 90       	pop	r0
    330e:	0b be       	out	0x3b, r0	; 59
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	0f 90       	pop	r0
    3316:	1f 90       	pop	r1
    3318:	18 95       	reti

0000331a <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    331a:	1f 92       	push	r1
    331c:	0f 92       	push	r0
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	0f 92       	push	r0
    3322:	11 24       	eor	r1, r1
    3324:	0b b6       	in	r0, 0x3b	; 59
    3326:	0f 92       	push	r0
    3328:	2f 93       	push	r18
    332a:	3f 93       	push	r19
    332c:	4f 93       	push	r20
    332e:	5f 93       	push	r21
    3330:	6f 93       	push	r22
    3332:	7f 93       	push	r23
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
    3340:	e0 91 3a 23 	lds	r30, 0x233A
    3344:	f0 91 3b 23 	lds	r31, 0x233B
    3348:	30 97       	sbiw	r30, 0x00	; 0
    334a:	29 f0       	breq	.+10     	; 0x3356 <__vector_40+0x3c>
    334c:	80 91 30 24 	lds	r24, 0x2430
    3350:	90 91 31 24 	lds	r25, 0x2431
    3354:	19 95       	eicall
    3356:	ff 91       	pop	r31
    3358:	ef 91       	pop	r30
    335a:	bf 91       	pop	r27
    335c:	af 91       	pop	r26
    335e:	9f 91       	pop	r25
    3360:	8f 91       	pop	r24
    3362:	7f 91       	pop	r23
    3364:	6f 91       	pop	r22
    3366:	5f 91       	pop	r21
    3368:	4f 91       	pop	r20
    336a:	3f 91       	pop	r19
    336c:	2f 91       	pop	r18
    336e:	0f 90       	pop	r0
    3370:	0b be       	out	0x3b, r0	; 59
    3372:	0f 90       	pop	r0
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	0f 90       	pop	r0
    3378:	1f 90       	pop	r1
    337a:	18 95       	reti

0000337c <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    337c:	1f 92       	push	r1
    337e:	0f 92       	push	r0
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	0f 92       	push	r0
    3384:	11 24       	eor	r1, r1
    3386:	0b b6       	in	r0, 0x3b	; 59
    3388:	0f 92       	push	r0
    338a:	2f 93       	push	r18
    338c:	3f 93       	push	r19
    338e:	4f 93       	push	r20
    3390:	5f 93       	push	r21
    3392:	6f 93       	push	r22
    3394:	7f 93       	push	r23
    3396:	8f 93       	push	r24
    3398:	9f 93       	push	r25
    339a:	af 93       	push	r26
    339c:	bf 93       	push	r27
    339e:	ef 93       	push	r30
    33a0:	ff 93       	push	r31
    33a2:	e0 91 3c 23 	lds	r30, 0x233C
    33a6:	f0 91 3d 23 	lds	r31, 0x233D
    33aa:	30 97       	sbiw	r30, 0x00	; 0
    33ac:	29 f0       	breq	.+10     	; 0x33b8 <__vector_41+0x3c>
    33ae:	80 91 32 24 	lds	r24, 0x2432
    33b2:	90 91 33 24 	lds	r25, 0x2433
    33b6:	19 95       	eicall
    33b8:	ff 91       	pop	r31
    33ba:	ef 91       	pop	r30
    33bc:	bf 91       	pop	r27
    33be:	af 91       	pop	r26
    33c0:	9f 91       	pop	r25
    33c2:	8f 91       	pop	r24
    33c4:	7f 91       	pop	r23
    33c6:	6f 91       	pop	r22
    33c8:	5f 91       	pop	r21
    33ca:	4f 91       	pop	r20
    33cc:	3f 91       	pop	r19
    33ce:	2f 91       	pop	r18
    33d0:	0f 90       	pop	r0
    33d2:	0b be       	out	0x3b, r0	; 59
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

000033de <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    33de:	1f 92       	push	r1
    33e0:	0f 92       	push	r0
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	0f 92       	push	r0
    33e6:	11 24       	eor	r1, r1
    33e8:	0b b6       	in	r0, 0x3b	; 59
    33ea:	0f 92       	push	r0
    33ec:	2f 93       	push	r18
    33ee:	3f 93       	push	r19
    33f0:	4f 93       	push	r20
    33f2:	5f 93       	push	r21
    33f4:	6f 93       	push	r22
    33f6:	7f 93       	push	r23
    33f8:	8f 93       	push	r24
    33fa:	9f 93       	push	r25
    33fc:	af 93       	push	r26
    33fe:	bf 93       	push	r27
    3400:	ef 93       	push	r30
    3402:	ff 93       	push	r31
    3404:	e0 91 3e 23 	lds	r30, 0x233E
    3408:	f0 91 3f 23 	lds	r31, 0x233F
    340c:	30 97       	sbiw	r30, 0x00	; 0
    340e:	29 f0       	breq	.+10     	; 0x341a <__vector_42+0x3c>
    3410:	80 91 34 24 	lds	r24, 0x2434
    3414:	90 91 35 24 	lds	r25, 0x2435
    3418:	19 95       	eicall
    341a:	ff 91       	pop	r31
    341c:	ef 91       	pop	r30
    341e:	bf 91       	pop	r27
    3420:	af 91       	pop	r26
    3422:	9f 91       	pop	r25
    3424:	8f 91       	pop	r24
    3426:	7f 91       	pop	r23
    3428:	6f 91       	pop	r22
    342a:	5f 91       	pop	r21
    342c:	4f 91       	pop	r20
    342e:	3f 91       	pop	r19
    3430:	2f 91       	pop	r18
    3432:	0f 90       	pop	r0
    3434:	0b be       	out	0x3b, r0	; 59
    3436:	0f 90       	pop	r0
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	0f 90       	pop	r0
    343c:	1f 90       	pop	r1
    343e:	18 95       	reti

00003440 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    3440:	1f 92       	push	r1
    3442:	0f 92       	push	r0
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	0f 92       	push	r0
    3448:	11 24       	eor	r1, r1
    344a:	0b b6       	in	r0, 0x3b	; 59
    344c:	0f 92       	push	r0
    344e:	2f 93       	push	r18
    3450:	3f 93       	push	r19
    3452:	4f 93       	push	r20
    3454:	5f 93       	push	r21
    3456:	6f 93       	push	r22
    3458:	7f 93       	push	r23
    345a:	8f 93       	push	r24
    345c:	9f 93       	push	r25
    345e:	af 93       	push	r26
    3460:	bf 93       	push	r27
    3462:	ef 93       	push	r30
    3464:	ff 93       	push	r31
    3466:	e0 91 40 23 	lds	r30, 0x2340
    346a:	f0 91 41 23 	lds	r31, 0x2341
    346e:	30 97       	sbiw	r30, 0x00	; 0
    3470:	29 f0       	breq	.+10     	; 0x347c <__vector_43+0x3c>
    3472:	80 91 36 24 	lds	r24, 0x2436
    3476:	90 91 37 24 	lds	r25, 0x2437
    347a:	19 95       	eicall
    347c:	ff 91       	pop	r31
    347e:	ef 91       	pop	r30
    3480:	bf 91       	pop	r27
    3482:	af 91       	pop	r26
    3484:	9f 91       	pop	r25
    3486:	8f 91       	pop	r24
    3488:	7f 91       	pop	r23
    348a:	6f 91       	pop	r22
    348c:	5f 91       	pop	r21
    348e:	4f 91       	pop	r20
    3490:	3f 91       	pop	r19
    3492:	2f 91       	pop	r18
    3494:	0f 90       	pop	r0
    3496:	0b be       	out	0x3b, r0	; 59
    3498:	0f 90       	pop	r0
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	0f 90       	pop	r0
    349e:	1f 90       	pop	r1
    34a0:	18 95       	reti

000034a2 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	11 24       	eor	r1, r1
    34ac:	0b b6       	in	r0, 0x3b	; 59
    34ae:	0f 92       	push	r0
    34b0:	2f 93       	push	r18
    34b2:	3f 93       	push	r19
    34b4:	4f 93       	push	r20
    34b6:	5f 93       	push	r21
    34b8:	6f 93       	push	r22
    34ba:	7f 93       	push	r23
    34bc:	8f 93       	push	r24
    34be:	9f 93       	push	r25
    34c0:	af 93       	push	r26
    34c2:	bf 93       	push	r27
    34c4:	ef 93       	push	r30
    34c6:	ff 93       	push	r31
    34c8:	e0 91 42 23 	lds	r30, 0x2342
    34cc:	f0 91 43 23 	lds	r31, 0x2343
    34d0:	30 97       	sbiw	r30, 0x00	; 0
    34d2:	29 f0       	breq	.+10     	; 0x34de <__vector_44+0x3c>
    34d4:	80 91 38 24 	lds	r24, 0x2438
    34d8:	90 91 39 24 	lds	r25, 0x2439
    34dc:	19 95       	eicall
    34de:	ff 91       	pop	r31
    34e0:	ef 91       	pop	r30
    34e2:	bf 91       	pop	r27
    34e4:	af 91       	pop	r26
    34e6:	9f 91       	pop	r25
    34e8:	8f 91       	pop	r24
    34ea:	7f 91       	pop	r23
    34ec:	6f 91       	pop	r22
    34ee:	5f 91       	pop	r21
    34f0:	4f 91       	pop	r20
    34f2:	3f 91       	pop	r19
    34f4:	2f 91       	pop	r18
    34f6:	0f 90       	pop	r0
    34f8:	0b be       	out	0x3b, r0	; 59
    34fa:	0f 90       	pop	r0
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	0f 90       	pop	r0
    3500:	1f 90       	pop	r1
    3502:	18 95       	reti

00003504 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3504:	1f 92       	push	r1
    3506:	0f 92       	push	r0
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	0f 92       	push	r0
    350c:	11 24       	eor	r1, r1
    350e:	0b b6       	in	r0, 0x3b	; 59
    3510:	0f 92       	push	r0
    3512:	2f 93       	push	r18
    3514:	3f 93       	push	r19
    3516:	4f 93       	push	r20
    3518:	5f 93       	push	r21
    351a:	6f 93       	push	r22
    351c:	7f 93       	push	r23
    351e:	8f 93       	push	r24
    3520:	9f 93       	push	r25
    3522:	af 93       	push	r26
    3524:	bf 93       	push	r27
    3526:	ef 93       	push	r30
    3528:	ff 93       	push	r31
    352a:	e0 91 44 23 	lds	r30, 0x2344
    352e:	f0 91 45 23 	lds	r31, 0x2345
    3532:	30 97       	sbiw	r30, 0x00	; 0
    3534:	29 f0       	breq	.+10     	; 0x3540 <__vector_45+0x3c>
    3536:	80 91 3a 24 	lds	r24, 0x243A
    353a:	90 91 3b 24 	lds	r25, 0x243B
    353e:	19 95       	eicall
    3540:	ff 91       	pop	r31
    3542:	ef 91       	pop	r30
    3544:	bf 91       	pop	r27
    3546:	af 91       	pop	r26
    3548:	9f 91       	pop	r25
    354a:	8f 91       	pop	r24
    354c:	7f 91       	pop	r23
    354e:	6f 91       	pop	r22
    3550:	5f 91       	pop	r21
    3552:	4f 91       	pop	r20
    3554:	3f 91       	pop	r19
    3556:	2f 91       	pop	r18
    3558:	0f 90       	pop	r0
    355a:	0b be       	out	0x3b, r0	; 59
    355c:	0f 90       	pop	r0
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	0f 90       	pop	r0
    3562:	1f 90       	pop	r1
    3564:	18 95       	reti

00003566 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    3566:	1f 92       	push	r1
    3568:	0f 92       	push	r0
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	0f 92       	push	r0
    356e:	11 24       	eor	r1, r1
    3570:	0b b6       	in	r0, 0x3b	; 59
    3572:	0f 92       	push	r0
    3574:	2f 93       	push	r18
    3576:	3f 93       	push	r19
    3578:	4f 93       	push	r20
    357a:	5f 93       	push	r21
    357c:	6f 93       	push	r22
    357e:	7f 93       	push	r23
    3580:	8f 93       	push	r24
    3582:	9f 93       	push	r25
    3584:	af 93       	push	r26
    3586:	bf 93       	push	r27
    3588:	ef 93       	push	r30
    358a:	ff 93       	push	r31
    358c:	e0 91 46 23 	lds	r30, 0x2346
    3590:	f0 91 47 23 	lds	r31, 0x2347
    3594:	30 97       	sbiw	r30, 0x00	; 0
    3596:	29 f0       	breq	.+10     	; 0x35a2 <__vector_46+0x3c>
    3598:	80 91 3c 24 	lds	r24, 0x243C
    359c:	90 91 3d 24 	lds	r25, 0x243D
    35a0:	19 95       	eicall
    35a2:	ff 91       	pop	r31
    35a4:	ef 91       	pop	r30
    35a6:	bf 91       	pop	r27
    35a8:	af 91       	pop	r26
    35aa:	9f 91       	pop	r25
    35ac:	8f 91       	pop	r24
    35ae:	7f 91       	pop	r23
    35b0:	6f 91       	pop	r22
    35b2:	5f 91       	pop	r21
    35b4:	4f 91       	pop	r20
    35b6:	3f 91       	pop	r19
    35b8:	2f 91       	pop	r18
    35ba:	0f 90       	pop	r0
    35bc:	0b be       	out	0x3b, r0	; 59
    35be:	0f 90       	pop	r0
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	0f 90       	pop	r0
    35c4:	1f 90       	pop	r1
    35c6:	18 95       	reti

000035c8 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    35c8:	1f 92       	push	r1
    35ca:	0f 92       	push	r0
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	0f 92       	push	r0
    35d0:	11 24       	eor	r1, r1
    35d2:	0b b6       	in	r0, 0x3b	; 59
    35d4:	0f 92       	push	r0
    35d6:	2f 93       	push	r18
    35d8:	3f 93       	push	r19
    35da:	4f 93       	push	r20
    35dc:	5f 93       	push	r21
    35de:	6f 93       	push	r22
    35e0:	7f 93       	push	r23
    35e2:	8f 93       	push	r24
    35e4:	9f 93       	push	r25
    35e6:	af 93       	push	r26
    35e8:	bf 93       	push	r27
    35ea:	ef 93       	push	r30
    35ec:	ff 93       	push	r31
    35ee:	e0 91 48 23 	lds	r30, 0x2348
    35f2:	f0 91 49 23 	lds	r31, 0x2349
    35f6:	30 97       	sbiw	r30, 0x00	; 0
    35f8:	29 f0       	breq	.+10     	; 0x3604 <__vector_47+0x3c>
    35fa:	80 91 3e 24 	lds	r24, 0x243E
    35fe:	90 91 3f 24 	lds	r25, 0x243F
    3602:	19 95       	eicall
    3604:	ff 91       	pop	r31
    3606:	ef 91       	pop	r30
    3608:	bf 91       	pop	r27
    360a:	af 91       	pop	r26
    360c:	9f 91       	pop	r25
    360e:	8f 91       	pop	r24
    3610:	7f 91       	pop	r23
    3612:	6f 91       	pop	r22
    3614:	5f 91       	pop	r21
    3616:	4f 91       	pop	r20
    3618:	3f 91       	pop	r19
    361a:	2f 91       	pop	r18
    361c:	0f 90       	pop	r0
    361e:	0b be       	out	0x3b, r0	; 59
    3620:	0f 90       	pop	r0
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	0f 90       	pop	r0
    3626:	1f 90       	pop	r1
    3628:	18 95       	reti

0000362a <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    362a:	1f 92       	push	r1
    362c:	0f 92       	push	r0
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	0f 92       	push	r0
    3632:	11 24       	eor	r1, r1
    3634:	0b b6       	in	r0, 0x3b	; 59
    3636:	0f 92       	push	r0
    3638:	2f 93       	push	r18
    363a:	3f 93       	push	r19
    363c:	4f 93       	push	r20
    363e:	5f 93       	push	r21
    3640:	6f 93       	push	r22
    3642:	7f 93       	push	r23
    3644:	8f 93       	push	r24
    3646:	9f 93       	push	r25
    3648:	af 93       	push	r26
    364a:	bf 93       	push	r27
    364c:	ef 93       	push	r30
    364e:	ff 93       	push	r31
    3650:	e0 91 4a 23 	lds	r30, 0x234A
    3654:	f0 91 4b 23 	lds	r31, 0x234B
    3658:	30 97       	sbiw	r30, 0x00	; 0
    365a:	29 f0       	breq	.+10     	; 0x3666 <__vector_48+0x3c>
    365c:	80 91 40 24 	lds	r24, 0x2440
    3660:	90 91 41 24 	lds	r25, 0x2441
    3664:	19 95       	eicall
    3666:	ff 91       	pop	r31
    3668:	ef 91       	pop	r30
    366a:	bf 91       	pop	r27
    366c:	af 91       	pop	r26
    366e:	9f 91       	pop	r25
    3670:	8f 91       	pop	r24
    3672:	7f 91       	pop	r23
    3674:	6f 91       	pop	r22
    3676:	5f 91       	pop	r21
    3678:	4f 91       	pop	r20
    367a:	3f 91       	pop	r19
    367c:	2f 91       	pop	r18
    367e:	0f 90       	pop	r0
    3680:	0b be       	out	0x3b, r0	; 59
    3682:	0f 90       	pop	r0
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	0f 90       	pop	r0
    3688:	1f 90       	pop	r1
    368a:	18 95       	reti

0000368c <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    368c:	1f 92       	push	r1
    368e:	0f 92       	push	r0
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	0f 92       	push	r0
    3694:	11 24       	eor	r1, r1
    3696:	0b b6       	in	r0, 0x3b	; 59
    3698:	0f 92       	push	r0
    369a:	2f 93       	push	r18
    369c:	3f 93       	push	r19
    369e:	4f 93       	push	r20
    36a0:	5f 93       	push	r21
    36a2:	6f 93       	push	r22
    36a4:	7f 93       	push	r23
    36a6:	8f 93       	push	r24
    36a8:	9f 93       	push	r25
    36aa:	af 93       	push	r26
    36ac:	bf 93       	push	r27
    36ae:	ef 93       	push	r30
    36b0:	ff 93       	push	r31
    36b2:	e0 91 4c 23 	lds	r30, 0x234C
    36b6:	f0 91 4d 23 	lds	r31, 0x234D
    36ba:	30 97       	sbiw	r30, 0x00	; 0
    36bc:	29 f0       	breq	.+10     	; 0x36c8 <__vector_49+0x3c>
    36be:	80 91 42 24 	lds	r24, 0x2442
    36c2:	90 91 43 24 	lds	r25, 0x2443
    36c6:	19 95       	eicall
    36c8:	ff 91       	pop	r31
    36ca:	ef 91       	pop	r30
    36cc:	bf 91       	pop	r27
    36ce:	af 91       	pop	r26
    36d0:	9f 91       	pop	r25
    36d2:	8f 91       	pop	r24
    36d4:	7f 91       	pop	r23
    36d6:	6f 91       	pop	r22
    36d8:	5f 91       	pop	r21
    36da:	4f 91       	pop	r20
    36dc:	3f 91       	pop	r19
    36de:	2f 91       	pop	r18
    36e0:	0f 90       	pop	r0
    36e2:	0b be       	out	0x3b, r0	; 59
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f 90       	pop	r0
    36ea:	1f 90       	pop	r1
    36ec:	18 95       	reti

000036ee <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    36ee:	1f 92       	push	r1
    36f0:	0f 92       	push	r0
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	0f 92       	push	r0
    36f6:	11 24       	eor	r1, r1
    36f8:	0b b6       	in	r0, 0x3b	; 59
    36fa:	0f 92       	push	r0
    36fc:	2f 93       	push	r18
    36fe:	3f 93       	push	r19
    3700:	4f 93       	push	r20
    3702:	5f 93       	push	r21
    3704:	6f 93       	push	r22
    3706:	7f 93       	push	r23
    3708:	8f 93       	push	r24
    370a:	9f 93       	push	r25
    370c:	af 93       	push	r26
    370e:	bf 93       	push	r27
    3710:	ef 93       	push	r30
    3712:	ff 93       	push	r31
    3714:	e0 91 4e 23 	lds	r30, 0x234E
    3718:	f0 91 4f 23 	lds	r31, 0x234F
    371c:	30 97       	sbiw	r30, 0x00	; 0
    371e:	29 f0       	breq	.+10     	; 0x372a <__vector_50+0x3c>
    3720:	80 91 44 24 	lds	r24, 0x2444
    3724:	90 91 45 24 	lds	r25, 0x2445
    3728:	19 95       	eicall
    372a:	ff 91       	pop	r31
    372c:	ef 91       	pop	r30
    372e:	bf 91       	pop	r27
    3730:	af 91       	pop	r26
    3732:	9f 91       	pop	r25
    3734:	8f 91       	pop	r24
    3736:	7f 91       	pop	r23
    3738:	6f 91       	pop	r22
    373a:	5f 91       	pop	r21
    373c:	4f 91       	pop	r20
    373e:	3f 91       	pop	r19
    3740:	2f 91       	pop	r18
    3742:	0f 90       	pop	r0
    3744:	0b be       	out	0x3b, r0	; 59
    3746:	0f 90       	pop	r0
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	0f 90       	pop	r0
    374c:	1f 90       	pop	r1
    374e:	18 95       	reti

00003750 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    3750:	1f 92       	push	r1
    3752:	0f 92       	push	r0
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	0f 92       	push	r0
    3758:	11 24       	eor	r1, r1
    375a:	0b b6       	in	r0, 0x3b	; 59
    375c:	0f 92       	push	r0
    375e:	2f 93       	push	r18
    3760:	3f 93       	push	r19
    3762:	4f 93       	push	r20
    3764:	5f 93       	push	r21
    3766:	6f 93       	push	r22
    3768:	7f 93       	push	r23
    376a:	8f 93       	push	r24
    376c:	9f 93       	push	r25
    376e:	af 93       	push	r26
    3770:	bf 93       	push	r27
    3772:	ef 93       	push	r30
    3774:	ff 93       	push	r31
    3776:	e0 91 50 23 	lds	r30, 0x2350
    377a:	f0 91 51 23 	lds	r31, 0x2351
    377e:	30 97       	sbiw	r30, 0x00	; 0
    3780:	29 f0       	breq	.+10     	; 0x378c <__vector_51+0x3c>
    3782:	80 91 46 24 	lds	r24, 0x2446
    3786:	90 91 47 24 	lds	r25, 0x2447
    378a:	19 95       	eicall
    378c:	ff 91       	pop	r31
    378e:	ef 91       	pop	r30
    3790:	bf 91       	pop	r27
    3792:	af 91       	pop	r26
    3794:	9f 91       	pop	r25
    3796:	8f 91       	pop	r24
    3798:	7f 91       	pop	r23
    379a:	6f 91       	pop	r22
    379c:	5f 91       	pop	r21
    379e:	4f 91       	pop	r20
    37a0:	3f 91       	pop	r19
    37a2:	2f 91       	pop	r18
    37a4:	0f 90       	pop	r0
    37a6:	0b be       	out	0x3b, r0	; 59
    37a8:	0f 90       	pop	r0
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	0f 90       	pop	r0
    37ae:	1f 90       	pop	r1
    37b0:	18 95       	reti

000037b2 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    37b2:	1f 92       	push	r1
    37b4:	0f 92       	push	r0
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	0f 92       	push	r0
    37ba:	11 24       	eor	r1, r1
    37bc:	0b b6       	in	r0, 0x3b	; 59
    37be:	0f 92       	push	r0
    37c0:	2f 93       	push	r18
    37c2:	3f 93       	push	r19
    37c4:	4f 93       	push	r20
    37c6:	5f 93       	push	r21
    37c8:	6f 93       	push	r22
    37ca:	7f 93       	push	r23
    37cc:	8f 93       	push	r24
    37ce:	9f 93       	push	r25
    37d0:	af 93       	push	r26
    37d2:	bf 93       	push	r27
    37d4:	ef 93       	push	r30
    37d6:	ff 93       	push	r31
    37d8:	e0 91 52 23 	lds	r30, 0x2352
    37dc:	f0 91 53 23 	lds	r31, 0x2353
    37e0:	30 97       	sbiw	r30, 0x00	; 0
    37e2:	29 f0       	breq	.+10     	; 0x37ee <__vector_52+0x3c>
    37e4:	80 91 48 24 	lds	r24, 0x2448
    37e8:	90 91 49 24 	lds	r25, 0x2449
    37ec:	19 95       	eicall
    37ee:	ff 91       	pop	r31
    37f0:	ef 91       	pop	r30
    37f2:	bf 91       	pop	r27
    37f4:	af 91       	pop	r26
    37f6:	9f 91       	pop	r25
    37f8:	8f 91       	pop	r24
    37fa:	7f 91       	pop	r23
    37fc:	6f 91       	pop	r22
    37fe:	5f 91       	pop	r21
    3800:	4f 91       	pop	r20
    3802:	3f 91       	pop	r19
    3804:	2f 91       	pop	r18
    3806:	0f 90       	pop	r0
    3808:	0b be       	out	0x3b, r0	; 59
    380a:	0f 90       	pop	r0
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	0f 90       	pop	r0
    3810:	1f 90       	pop	r1
    3812:	18 95       	reti

00003814 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    3814:	1f 92       	push	r1
    3816:	0f 92       	push	r0
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	0f 92       	push	r0
    381c:	11 24       	eor	r1, r1
    381e:	0b b6       	in	r0, 0x3b	; 59
    3820:	0f 92       	push	r0
    3822:	2f 93       	push	r18
    3824:	3f 93       	push	r19
    3826:	4f 93       	push	r20
    3828:	5f 93       	push	r21
    382a:	6f 93       	push	r22
    382c:	7f 93       	push	r23
    382e:	8f 93       	push	r24
    3830:	9f 93       	push	r25
    3832:	af 93       	push	r26
    3834:	bf 93       	push	r27
    3836:	ef 93       	push	r30
    3838:	ff 93       	push	r31
    383a:	e0 91 54 23 	lds	r30, 0x2354
    383e:	f0 91 55 23 	lds	r31, 0x2355
    3842:	30 97       	sbiw	r30, 0x00	; 0
    3844:	29 f0       	breq	.+10     	; 0x3850 <__vector_53+0x3c>
    3846:	80 91 4a 24 	lds	r24, 0x244A
    384a:	90 91 4b 24 	lds	r25, 0x244B
    384e:	19 95       	eicall
    3850:	ff 91       	pop	r31
    3852:	ef 91       	pop	r30
    3854:	bf 91       	pop	r27
    3856:	af 91       	pop	r26
    3858:	9f 91       	pop	r25
    385a:	8f 91       	pop	r24
    385c:	7f 91       	pop	r23
    385e:	6f 91       	pop	r22
    3860:	5f 91       	pop	r21
    3862:	4f 91       	pop	r20
    3864:	3f 91       	pop	r19
    3866:	2f 91       	pop	r18
    3868:	0f 90       	pop	r0
    386a:	0b be       	out	0x3b, r0	; 59
    386c:	0f 90       	pop	r0
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	0f 90       	pop	r0
    3872:	1f 90       	pop	r1
    3874:	18 95       	reti

00003876 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    3876:	1f 92       	push	r1
    3878:	0f 92       	push	r0
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	0f 92       	push	r0
    387e:	11 24       	eor	r1, r1
    3880:	0b b6       	in	r0, 0x3b	; 59
    3882:	0f 92       	push	r0
    3884:	2f 93       	push	r18
    3886:	3f 93       	push	r19
    3888:	4f 93       	push	r20
    388a:	5f 93       	push	r21
    388c:	6f 93       	push	r22
    388e:	7f 93       	push	r23
    3890:	8f 93       	push	r24
    3892:	9f 93       	push	r25
    3894:	af 93       	push	r26
    3896:	bf 93       	push	r27
    3898:	ef 93       	push	r30
    389a:	ff 93       	push	r31
    389c:	e0 91 56 23 	lds	r30, 0x2356
    38a0:	f0 91 57 23 	lds	r31, 0x2357
    38a4:	30 97       	sbiw	r30, 0x00	; 0
    38a6:	29 f0       	breq	.+10     	; 0x38b2 <__vector_54+0x3c>
    38a8:	80 91 4c 24 	lds	r24, 0x244C
    38ac:	90 91 4d 24 	lds	r25, 0x244D
    38b0:	19 95       	eicall
    38b2:	ff 91       	pop	r31
    38b4:	ef 91       	pop	r30
    38b6:	bf 91       	pop	r27
    38b8:	af 91       	pop	r26
    38ba:	9f 91       	pop	r25
    38bc:	8f 91       	pop	r24
    38be:	7f 91       	pop	r23
    38c0:	6f 91       	pop	r22
    38c2:	5f 91       	pop	r21
    38c4:	4f 91       	pop	r20
    38c6:	3f 91       	pop	r19
    38c8:	2f 91       	pop	r18
    38ca:	0f 90       	pop	r0
    38cc:	0b be       	out	0x3b, r0	; 59
    38ce:	0f 90       	pop	r0
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	0f 90       	pop	r0
    38d4:	1f 90       	pop	r1
    38d6:	18 95       	reti

000038d8 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    38d8:	1f 92       	push	r1
    38da:	0f 92       	push	r0
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	0f 92       	push	r0
    38e0:	11 24       	eor	r1, r1
    38e2:	0b b6       	in	r0, 0x3b	; 59
    38e4:	0f 92       	push	r0
    38e6:	2f 93       	push	r18
    38e8:	3f 93       	push	r19
    38ea:	4f 93       	push	r20
    38ec:	5f 93       	push	r21
    38ee:	6f 93       	push	r22
    38f0:	7f 93       	push	r23
    38f2:	8f 93       	push	r24
    38f4:	9f 93       	push	r25
    38f6:	af 93       	push	r26
    38f8:	bf 93       	push	r27
    38fa:	ef 93       	push	r30
    38fc:	ff 93       	push	r31
    38fe:	e0 91 58 23 	lds	r30, 0x2358
    3902:	f0 91 59 23 	lds	r31, 0x2359
    3906:	30 97       	sbiw	r30, 0x00	; 0
    3908:	29 f0       	breq	.+10     	; 0x3914 <__vector_55+0x3c>
    390a:	80 91 4e 24 	lds	r24, 0x244E
    390e:	90 91 4f 24 	lds	r25, 0x244F
    3912:	19 95       	eicall
    3914:	ff 91       	pop	r31
    3916:	ef 91       	pop	r30
    3918:	bf 91       	pop	r27
    391a:	af 91       	pop	r26
    391c:	9f 91       	pop	r25
    391e:	8f 91       	pop	r24
    3920:	7f 91       	pop	r23
    3922:	6f 91       	pop	r22
    3924:	5f 91       	pop	r21
    3926:	4f 91       	pop	r20
    3928:	3f 91       	pop	r19
    392a:	2f 91       	pop	r18
    392c:	0f 90       	pop	r0
    392e:	0b be       	out	0x3b, r0	; 59
    3930:	0f 90       	pop	r0
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	0f 90       	pop	r0
    3936:	1f 90       	pop	r1
    3938:	18 95       	reti

0000393a <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    393a:	1f 92       	push	r1
    393c:	0f 92       	push	r0
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	0f 92       	push	r0
    3942:	11 24       	eor	r1, r1
    3944:	0b b6       	in	r0, 0x3b	; 59
    3946:	0f 92       	push	r0
    3948:	2f 93       	push	r18
    394a:	3f 93       	push	r19
    394c:	4f 93       	push	r20
    394e:	5f 93       	push	r21
    3950:	6f 93       	push	r22
    3952:	7f 93       	push	r23
    3954:	8f 93       	push	r24
    3956:	9f 93       	push	r25
    3958:	af 93       	push	r26
    395a:	bf 93       	push	r27
    395c:	ef 93       	push	r30
    395e:	ff 93       	push	r31
    3960:	e0 91 5a 23 	lds	r30, 0x235A
    3964:	f0 91 5b 23 	lds	r31, 0x235B
    3968:	30 97       	sbiw	r30, 0x00	; 0
    396a:	29 f0       	breq	.+10     	; 0x3976 <__vector_56+0x3c>
    396c:	80 91 50 24 	lds	r24, 0x2450
    3970:	90 91 51 24 	lds	r25, 0x2451
    3974:	19 95       	eicall
    3976:	ff 91       	pop	r31
    3978:	ef 91       	pop	r30
    397a:	bf 91       	pop	r27
    397c:	af 91       	pop	r26
    397e:	9f 91       	pop	r25
    3980:	8f 91       	pop	r24
    3982:	7f 91       	pop	r23
    3984:	6f 91       	pop	r22
    3986:	5f 91       	pop	r21
    3988:	4f 91       	pop	r20
    398a:	3f 91       	pop	r19
    398c:	2f 91       	pop	r18
    398e:	0f 90       	pop	r0
    3990:	0b be       	out	0x3b, r0	; 59
    3992:	0f 90       	pop	r0
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	0f 90       	pop	r0
    3998:	1f 90       	pop	r1
    399a:	18 95       	reti

0000399c <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    399c:	1f 92       	push	r1
    399e:	0f 92       	push	r0
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	0f 92       	push	r0
    39a4:	11 24       	eor	r1, r1
    39a6:	0b b6       	in	r0, 0x3b	; 59
    39a8:	0f 92       	push	r0
    39aa:	2f 93       	push	r18
    39ac:	3f 93       	push	r19
    39ae:	4f 93       	push	r20
    39b0:	5f 93       	push	r21
    39b2:	6f 93       	push	r22
    39b4:	7f 93       	push	r23
    39b6:	8f 93       	push	r24
    39b8:	9f 93       	push	r25
    39ba:	af 93       	push	r26
    39bc:	bf 93       	push	r27
    39be:	ef 93       	push	r30
    39c0:	ff 93       	push	r31
    39c2:	e0 91 5c 23 	lds	r30, 0x235C
    39c6:	f0 91 5d 23 	lds	r31, 0x235D
    39ca:	30 97       	sbiw	r30, 0x00	; 0
    39cc:	29 f0       	breq	.+10     	; 0x39d8 <__vector_57+0x3c>
    39ce:	80 91 52 24 	lds	r24, 0x2452
    39d2:	90 91 53 24 	lds	r25, 0x2453
    39d6:	19 95       	eicall
    39d8:	ff 91       	pop	r31
    39da:	ef 91       	pop	r30
    39dc:	bf 91       	pop	r27
    39de:	af 91       	pop	r26
    39e0:	9f 91       	pop	r25
    39e2:	8f 91       	pop	r24
    39e4:	7f 91       	pop	r23
    39e6:	6f 91       	pop	r22
    39e8:	5f 91       	pop	r21
    39ea:	4f 91       	pop	r20
    39ec:	3f 91       	pop	r19
    39ee:	2f 91       	pop	r18
    39f0:	0f 90       	pop	r0
    39f2:	0b be       	out	0x3b, r0	; 59
    39f4:	0f 90       	pop	r0
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	0f 90       	pop	r0
    39fa:	1f 90       	pop	r1
    39fc:	18 95       	reti

000039fe <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    39fe:	1f 92       	push	r1
    3a00:	0f 92       	push	r0
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	0f 92       	push	r0
    3a06:	11 24       	eor	r1, r1
    3a08:	0b b6       	in	r0, 0x3b	; 59
    3a0a:	0f 92       	push	r0
    3a0c:	2f 93       	push	r18
    3a0e:	3f 93       	push	r19
    3a10:	4f 93       	push	r20
    3a12:	5f 93       	push	r21
    3a14:	6f 93       	push	r22
    3a16:	7f 93       	push	r23
    3a18:	8f 93       	push	r24
    3a1a:	9f 93       	push	r25
    3a1c:	af 93       	push	r26
    3a1e:	bf 93       	push	r27
    3a20:	ef 93       	push	r30
    3a22:	ff 93       	push	r31
    3a24:	e0 91 5e 23 	lds	r30, 0x235E
    3a28:	f0 91 5f 23 	lds	r31, 0x235F
    3a2c:	30 97       	sbiw	r30, 0x00	; 0
    3a2e:	29 f0       	breq	.+10     	; 0x3a3a <__vector_58+0x3c>
    3a30:	80 91 54 24 	lds	r24, 0x2454
    3a34:	90 91 55 24 	lds	r25, 0x2455
    3a38:	19 95       	eicall
    3a3a:	ff 91       	pop	r31
    3a3c:	ef 91       	pop	r30
    3a3e:	bf 91       	pop	r27
    3a40:	af 91       	pop	r26
    3a42:	9f 91       	pop	r25
    3a44:	8f 91       	pop	r24
    3a46:	7f 91       	pop	r23
    3a48:	6f 91       	pop	r22
    3a4a:	5f 91       	pop	r21
    3a4c:	4f 91       	pop	r20
    3a4e:	3f 91       	pop	r19
    3a50:	2f 91       	pop	r18
    3a52:	0f 90       	pop	r0
    3a54:	0b be       	out	0x3b, r0	; 59
    3a56:	0f 90       	pop	r0
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	0f 90       	pop	r0
    3a5c:	1f 90       	pop	r1
    3a5e:	18 95       	reti

00003a60 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    3a60:	1f 92       	push	r1
    3a62:	0f 92       	push	r0
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	0f 92       	push	r0
    3a68:	11 24       	eor	r1, r1
    3a6a:	0b b6       	in	r0, 0x3b	; 59
    3a6c:	0f 92       	push	r0
    3a6e:	2f 93       	push	r18
    3a70:	3f 93       	push	r19
    3a72:	4f 93       	push	r20
    3a74:	5f 93       	push	r21
    3a76:	6f 93       	push	r22
    3a78:	7f 93       	push	r23
    3a7a:	8f 93       	push	r24
    3a7c:	9f 93       	push	r25
    3a7e:	af 93       	push	r26
    3a80:	bf 93       	push	r27
    3a82:	ef 93       	push	r30
    3a84:	ff 93       	push	r31
    3a86:	e0 91 60 23 	lds	r30, 0x2360
    3a8a:	f0 91 61 23 	lds	r31, 0x2361
    3a8e:	30 97       	sbiw	r30, 0x00	; 0
    3a90:	29 f0       	breq	.+10     	; 0x3a9c <__vector_59+0x3c>
    3a92:	80 91 56 24 	lds	r24, 0x2456
    3a96:	90 91 57 24 	lds	r25, 0x2457
    3a9a:	19 95       	eicall
    3a9c:	ff 91       	pop	r31
    3a9e:	ef 91       	pop	r30
    3aa0:	bf 91       	pop	r27
    3aa2:	af 91       	pop	r26
    3aa4:	9f 91       	pop	r25
    3aa6:	8f 91       	pop	r24
    3aa8:	7f 91       	pop	r23
    3aaa:	6f 91       	pop	r22
    3aac:	5f 91       	pop	r21
    3aae:	4f 91       	pop	r20
    3ab0:	3f 91       	pop	r19
    3ab2:	2f 91       	pop	r18
    3ab4:	0f 90       	pop	r0
    3ab6:	0b be       	out	0x3b, r0	; 59
    3ab8:	0f 90       	pop	r0
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	0f 90       	pop	r0
    3abe:	1f 90       	pop	r1
    3ac0:	18 95       	reti

00003ac2 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3ac2:	1f 92       	push	r1
    3ac4:	0f 92       	push	r0
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	0f 92       	push	r0
    3aca:	11 24       	eor	r1, r1
    3acc:	0b b6       	in	r0, 0x3b	; 59
    3ace:	0f 92       	push	r0
    3ad0:	2f 93       	push	r18
    3ad2:	3f 93       	push	r19
    3ad4:	4f 93       	push	r20
    3ad6:	5f 93       	push	r21
    3ad8:	6f 93       	push	r22
    3ada:	7f 93       	push	r23
    3adc:	8f 93       	push	r24
    3ade:	9f 93       	push	r25
    3ae0:	af 93       	push	r26
    3ae2:	bf 93       	push	r27
    3ae4:	ef 93       	push	r30
    3ae6:	ff 93       	push	r31
    3ae8:	e0 91 62 23 	lds	r30, 0x2362
    3aec:	f0 91 63 23 	lds	r31, 0x2363
    3af0:	30 97       	sbiw	r30, 0x00	; 0
    3af2:	29 f0       	breq	.+10     	; 0x3afe <__vector_60+0x3c>
    3af4:	80 91 58 24 	lds	r24, 0x2458
    3af8:	90 91 59 24 	lds	r25, 0x2459
    3afc:	19 95       	eicall
    3afe:	ff 91       	pop	r31
    3b00:	ef 91       	pop	r30
    3b02:	bf 91       	pop	r27
    3b04:	af 91       	pop	r26
    3b06:	9f 91       	pop	r25
    3b08:	8f 91       	pop	r24
    3b0a:	7f 91       	pop	r23
    3b0c:	6f 91       	pop	r22
    3b0e:	5f 91       	pop	r21
    3b10:	4f 91       	pop	r20
    3b12:	3f 91       	pop	r19
    3b14:	2f 91       	pop	r18
    3b16:	0f 90       	pop	r0
    3b18:	0b be       	out	0x3b, r0	; 59
    3b1a:	0f 90       	pop	r0
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	0f 90       	pop	r0
    3b20:	1f 90       	pop	r1
    3b22:	18 95       	reti

00003b24 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3b24:	1f 92       	push	r1
    3b26:	0f 92       	push	r0
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	0f 92       	push	r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	0b b6       	in	r0, 0x3b	; 59
    3b30:	0f 92       	push	r0
    3b32:	2f 93       	push	r18
    3b34:	3f 93       	push	r19
    3b36:	4f 93       	push	r20
    3b38:	5f 93       	push	r21
    3b3a:	6f 93       	push	r22
    3b3c:	7f 93       	push	r23
    3b3e:	8f 93       	push	r24
    3b40:	9f 93       	push	r25
    3b42:	af 93       	push	r26
    3b44:	bf 93       	push	r27
    3b46:	ef 93       	push	r30
    3b48:	ff 93       	push	r31
    3b4a:	e0 91 64 23 	lds	r30, 0x2364
    3b4e:	f0 91 65 23 	lds	r31, 0x2365
    3b52:	30 97       	sbiw	r30, 0x00	; 0
    3b54:	29 f0       	breq	.+10     	; 0x3b60 <__vector_61+0x3c>
    3b56:	80 91 5a 24 	lds	r24, 0x245A
    3b5a:	90 91 5b 24 	lds	r25, 0x245B
    3b5e:	19 95       	eicall
    3b60:	ff 91       	pop	r31
    3b62:	ef 91       	pop	r30
    3b64:	bf 91       	pop	r27
    3b66:	af 91       	pop	r26
    3b68:	9f 91       	pop	r25
    3b6a:	8f 91       	pop	r24
    3b6c:	7f 91       	pop	r23
    3b6e:	6f 91       	pop	r22
    3b70:	5f 91       	pop	r21
    3b72:	4f 91       	pop	r20
    3b74:	3f 91       	pop	r19
    3b76:	2f 91       	pop	r18
    3b78:	0f 90       	pop	r0
    3b7a:	0b be       	out	0x3b, r0	; 59
    3b7c:	0f 90       	pop	r0
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	0f 90       	pop	r0
    3b82:	1f 90       	pop	r1
    3b84:	18 95       	reti

00003b86 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    3b86:	1f 92       	push	r1
    3b88:	0f 92       	push	r0
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	0f 92       	push	r0
    3b8e:	11 24       	eor	r1, r1
    3b90:	0b b6       	in	r0, 0x3b	; 59
    3b92:	0f 92       	push	r0
    3b94:	2f 93       	push	r18
    3b96:	3f 93       	push	r19
    3b98:	4f 93       	push	r20
    3b9a:	5f 93       	push	r21
    3b9c:	6f 93       	push	r22
    3b9e:	7f 93       	push	r23
    3ba0:	8f 93       	push	r24
    3ba2:	9f 93       	push	r25
    3ba4:	af 93       	push	r26
    3ba6:	bf 93       	push	r27
    3ba8:	ef 93       	push	r30
    3baa:	ff 93       	push	r31
    3bac:	e0 91 66 23 	lds	r30, 0x2366
    3bb0:	f0 91 67 23 	lds	r31, 0x2367
    3bb4:	30 97       	sbiw	r30, 0x00	; 0
    3bb6:	29 f0       	breq	.+10     	; 0x3bc2 <__vector_62+0x3c>
    3bb8:	80 91 5c 24 	lds	r24, 0x245C
    3bbc:	90 91 5d 24 	lds	r25, 0x245D
    3bc0:	19 95       	eicall
    3bc2:	ff 91       	pop	r31
    3bc4:	ef 91       	pop	r30
    3bc6:	bf 91       	pop	r27
    3bc8:	af 91       	pop	r26
    3bca:	9f 91       	pop	r25
    3bcc:	8f 91       	pop	r24
    3bce:	7f 91       	pop	r23
    3bd0:	6f 91       	pop	r22
    3bd2:	5f 91       	pop	r21
    3bd4:	4f 91       	pop	r20
    3bd6:	3f 91       	pop	r19
    3bd8:	2f 91       	pop	r18
    3bda:	0f 90       	pop	r0
    3bdc:	0b be       	out	0x3b, r0	; 59
    3bde:	0f 90       	pop	r0
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	0f 90       	pop	r0
    3be4:	1f 90       	pop	r1
    3be6:	18 95       	reti

00003be8 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3be8:	1f 92       	push	r1
    3bea:	0f 92       	push	r0
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	0f 92       	push	r0
    3bf0:	11 24       	eor	r1, r1
    3bf2:	0b b6       	in	r0, 0x3b	; 59
    3bf4:	0f 92       	push	r0
    3bf6:	2f 93       	push	r18
    3bf8:	3f 93       	push	r19
    3bfa:	4f 93       	push	r20
    3bfc:	5f 93       	push	r21
    3bfe:	6f 93       	push	r22
    3c00:	7f 93       	push	r23
    3c02:	8f 93       	push	r24
    3c04:	9f 93       	push	r25
    3c06:	af 93       	push	r26
    3c08:	bf 93       	push	r27
    3c0a:	ef 93       	push	r30
    3c0c:	ff 93       	push	r31
    3c0e:	e0 91 68 23 	lds	r30, 0x2368
    3c12:	f0 91 69 23 	lds	r31, 0x2369
    3c16:	30 97       	sbiw	r30, 0x00	; 0
    3c18:	29 f0       	breq	.+10     	; 0x3c24 <__vector_63+0x3c>
    3c1a:	80 91 5e 24 	lds	r24, 0x245E
    3c1e:	90 91 5f 24 	lds	r25, 0x245F
    3c22:	19 95       	eicall
    3c24:	ff 91       	pop	r31
    3c26:	ef 91       	pop	r30
    3c28:	bf 91       	pop	r27
    3c2a:	af 91       	pop	r26
    3c2c:	9f 91       	pop	r25
    3c2e:	8f 91       	pop	r24
    3c30:	7f 91       	pop	r23
    3c32:	6f 91       	pop	r22
    3c34:	5f 91       	pop	r21
    3c36:	4f 91       	pop	r20
    3c38:	3f 91       	pop	r19
    3c3a:	2f 91       	pop	r18
    3c3c:	0f 90       	pop	r0
    3c3e:	0b be       	out	0x3b, r0	; 59
    3c40:	0f 90       	pop	r0
    3c42:	0f be       	out	0x3f, r0	; 63
    3c44:	0f 90       	pop	r0
    3c46:	1f 90       	pop	r1
    3c48:	18 95       	reti

00003c4a <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3c4a:	1f 92       	push	r1
    3c4c:	0f 92       	push	r0
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	0f 92       	push	r0
    3c52:	11 24       	eor	r1, r1
    3c54:	0b b6       	in	r0, 0x3b	; 59
    3c56:	0f 92       	push	r0
    3c58:	2f 93       	push	r18
    3c5a:	3f 93       	push	r19
    3c5c:	4f 93       	push	r20
    3c5e:	5f 93       	push	r21
    3c60:	6f 93       	push	r22
    3c62:	7f 93       	push	r23
    3c64:	8f 93       	push	r24
    3c66:	9f 93       	push	r25
    3c68:	af 93       	push	r26
    3c6a:	bf 93       	push	r27
    3c6c:	ef 93       	push	r30
    3c6e:	ff 93       	push	r31
    3c70:	e0 91 6a 23 	lds	r30, 0x236A
    3c74:	f0 91 6b 23 	lds	r31, 0x236B
    3c78:	30 97       	sbiw	r30, 0x00	; 0
    3c7a:	29 f0       	breq	.+10     	; 0x3c86 <__vector_64+0x3c>
    3c7c:	80 91 60 24 	lds	r24, 0x2460
    3c80:	90 91 61 24 	lds	r25, 0x2461
    3c84:	19 95       	eicall
    3c86:	ff 91       	pop	r31
    3c88:	ef 91       	pop	r30
    3c8a:	bf 91       	pop	r27
    3c8c:	af 91       	pop	r26
    3c8e:	9f 91       	pop	r25
    3c90:	8f 91       	pop	r24
    3c92:	7f 91       	pop	r23
    3c94:	6f 91       	pop	r22
    3c96:	5f 91       	pop	r21
    3c98:	4f 91       	pop	r20
    3c9a:	3f 91       	pop	r19
    3c9c:	2f 91       	pop	r18
    3c9e:	0f 90       	pop	r0
    3ca0:	0b be       	out	0x3b, r0	; 59
    3ca2:	0f 90       	pop	r0
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	0f 90       	pop	r0
    3ca8:	1f 90       	pop	r1
    3caa:	18 95       	reti

00003cac <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3cac:	1f 92       	push	r1
    3cae:	0f 92       	push	r0
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	0f 92       	push	r0
    3cb4:	11 24       	eor	r1, r1
    3cb6:	0b b6       	in	r0, 0x3b	; 59
    3cb8:	0f 92       	push	r0
    3cba:	2f 93       	push	r18
    3cbc:	3f 93       	push	r19
    3cbe:	4f 93       	push	r20
    3cc0:	5f 93       	push	r21
    3cc2:	6f 93       	push	r22
    3cc4:	7f 93       	push	r23
    3cc6:	8f 93       	push	r24
    3cc8:	9f 93       	push	r25
    3cca:	af 93       	push	r26
    3ccc:	bf 93       	push	r27
    3cce:	ef 93       	push	r30
    3cd0:	ff 93       	push	r31
    3cd2:	e0 91 6c 23 	lds	r30, 0x236C
    3cd6:	f0 91 6d 23 	lds	r31, 0x236D
    3cda:	30 97       	sbiw	r30, 0x00	; 0
    3cdc:	29 f0       	breq	.+10     	; 0x3ce8 <__vector_65+0x3c>
    3cde:	80 91 62 24 	lds	r24, 0x2462
    3ce2:	90 91 63 24 	lds	r25, 0x2463
    3ce6:	19 95       	eicall
    3ce8:	ff 91       	pop	r31
    3cea:	ef 91       	pop	r30
    3cec:	bf 91       	pop	r27
    3cee:	af 91       	pop	r26
    3cf0:	9f 91       	pop	r25
    3cf2:	8f 91       	pop	r24
    3cf4:	7f 91       	pop	r23
    3cf6:	6f 91       	pop	r22
    3cf8:	5f 91       	pop	r21
    3cfa:	4f 91       	pop	r20
    3cfc:	3f 91       	pop	r19
    3cfe:	2f 91       	pop	r18
    3d00:	0f 90       	pop	r0
    3d02:	0b be       	out	0x3b, r0	; 59
    3d04:	0f 90       	pop	r0
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	0f 90       	pop	r0
    3d0a:	1f 90       	pop	r1
    3d0c:	18 95       	reti

00003d0e <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3d0e:	1f 92       	push	r1
    3d10:	0f 92       	push	r0
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	0f 92       	push	r0
    3d16:	11 24       	eor	r1, r1
    3d18:	0b b6       	in	r0, 0x3b	; 59
    3d1a:	0f 92       	push	r0
    3d1c:	2f 93       	push	r18
    3d1e:	3f 93       	push	r19
    3d20:	4f 93       	push	r20
    3d22:	5f 93       	push	r21
    3d24:	6f 93       	push	r22
    3d26:	7f 93       	push	r23
    3d28:	8f 93       	push	r24
    3d2a:	9f 93       	push	r25
    3d2c:	af 93       	push	r26
    3d2e:	bf 93       	push	r27
    3d30:	ef 93       	push	r30
    3d32:	ff 93       	push	r31
    3d34:	e0 91 6e 23 	lds	r30, 0x236E
    3d38:	f0 91 6f 23 	lds	r31, 0x236F
    3d3c:	30 97       	sbiw	r30, 0x00	; 0
    3d3e:	29 f0       	breq	.+10     	; 0x3d4a <__vector_66+0x3c>
    3d40:	80 91 64 24 	lds	r24, 0x2464
    3d44:	90 91 65 24 	lds	r25, 0x2465
    3d48:	19 95       	eicall
    3d4a:	ff 91       	pop	r31
    3d4c:	ef 91       	pop	r30
    3d4e:	bf 91       	pop	r27
    3d50:	af 91       	pop	r26
    3d52:	9f 91       	pop	r25
    3d54:	8f 91       	pop	r24
    3d56:	7f 91       	pop	r23
    3d58:	6f 91       	pop	r22
    3d5a:	5f 91       	pop	r21
    3d5c:	4f 91       	pop	r20
    3d5e:	3f 91       	pop	r19
    3d60:	2f 91       	pop	r18
    3d62:	0f 90       	pop	r0
    3d64:	0b be       	out	0x3b, r0	; 59
    3d66:	0f 90       	pop	r0
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	0f 90       	pop	r0
    3d6c:	1f 90       	pop	r1
    3d6e:	18 95       	reti

00003d70 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3d70:	1f 92       	push	r1
    3d72:	0f 92       	push	r0
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	0f 92       	push	r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	0b b6       	in	r0, 0x3b	; 59
    3d7c:	0f 92       	push	r0
    3d7e:	2f 93       	push	r18
    3d80:	3f 93       	push	r19
    3d82:	4f 93       	push	r20
    3d84:	5f 93       	push	r21
    3d86:	6f 93       	push	r22
    3d88:	7f 93       	push	r23
    3d8a:	8f 93       	push	r24
    3d8c:	9f 93       	push	r25
    3d8e:	af 93       	push	r26
    3d90:	bf 93       	push	r27
    3d92:	ef 93       	push	r30
    3d94:	ff 93       	push	r31
    3d96:	e0 91 70 23 	lds	r30, 0x2370
    3d9a:	f0 91 71 23 	lds	r31, 0x2371
    3d9e:	30 97       	sbiw	r30, 0x00	; 0
    3da0:	29 f0       	breq	.+10     	; 0x3dac <__vector_67+0x3c>
    3da2:	80 91 66 24 	lds	r24, 0x2466
    3da6:	90 91 67 24 	lds	r25, 0x2467
    3daa:	19 95       	eicall
    3dac:	ff 91       	pop	r31
    3dae:	ef 91       	pop	r30
    3db0:	bf 91       	pop	r27
    3db2:	af 91       	pop	r26
    3db4:	9f 91       	pop	r25
    3db6:	8f 91       	pop	r24
    3db8:	7f 91       	pop	r23
    3dba:	6f 91       	pop	r22
    3dbc:	5f 91       	pop	r21
    3dbe:	4f 91       	pop	r20
    3dc0:	3f 91       	pop	r19
    3dc2:	2f 91       	pop	r18
    3dc4:	0f 90       	pop	r0
    3dc6:	0b be       	out	0x3b, r0	; 59
    3dc8:	0f 90       	pop	r0
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	0f 90       	pop	r0
    3dce:	1f 90       	pop	r1
    3dd0:	18 95       	reti

00003dd2 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3dd2:	1f 92       	push	r1
    3dd4:	0f 92       	push	r0
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	0f 92       	push	r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	0b b6       	in	r0, 0x3b	; 59
    3dde:	0f 92       	push	r0
    3de0:	2f 93       	push	r18
    3de2:	3f 93       	push	r19
    3de4:	4f 93       	push	r20
    3de6:	5f 93       	push	r21
    3de8:	6f 93       	push	r22
    3dea:	7f 93       	push	r23
    3dec:	8f 93       	push	r24
    3dee:	9f 93       	push	r25
    3df0:	af 93       	push	r26
    3df2:	bf 93       	push	r27
    3df4:	ef 93       	push	r30
    3df6:	ff 93       	push	r31
    3df8:	e0 91 72 23 	lds	r30, 0x2372
    3dfc:	f0 91 73 23 	lds	r31, 0x2373
    3e00:	30 97       	sbiw	r30, 0x00	; 0
    3e02:	29 f0       	breq	.+10     	; 0x3e0e <__vector_68+0x3c>
    3e04:	80 91 68 24 	lds	r24, 0x2468
    3e08:	90 91 69 24 	lds	r25, 0x2469
    3e0c:	19 95       	eicall
    3e0e:	ff 91       	pop	r31
    3e10:	ef 91       	pop	r30
    3e12:	bf 91       	pop	r27
    3e14:	af 91       	pop	r26
    3e16:	9f 91       	pop	r25
    3e18:	8f 91       	pop	r24
    3e1a:	7f 91       	pop	r23
    3e1c:	6f 91       	pop	r22
    3e1e:	5f 91       	pop	r21
    3e20:	4f 91       	pop	r20
    3e22:	3f 91       	pop	r19
    3e24:	2f 91       	pop	r18
    3e26:	0f 90       	pop	r0
    3e28:	0b be       	out	0x3b, r0	; 59
    3e2a:	0f 90       	pop	r0
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	0f 90       	pop	r0
    3e30:	1f 90       	pop	r1
    3e32:	18 95       	reti

00003e34 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3e34:	1f 92       	push	r1
    3e36:	0f 92       	push	r0
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	0f 92       	push	r0
    3e3c:	11 24       	eor	r1, r1
    3e3e:	0b b6       	in	r0, 0x3b	; 59
    3e40:	0f 92       	push	r0
    3e42:	2f 93       	push	r18
    3e44:	3f 93       	push	r19
    3e46:	4f 93       	push	r20
    3e48:	5f 93       	push	r21
    3e4a:	6f 93       	push	r22
    3e4c:	7f 93       	push	r23
    3e4e:	8f 93       	push	r24
    3e50:	9f 93       	push	r25
    3e52:	af 93       	push	r26
    3e54:	bf 93       	push	r27
    3e56:	ef 93       	push	r30
    3e58:	ff 93       	push	r31
    3e5a:	e0 91 74 23 	lds	r30, 0x2374
    3e5e:	f0 91 75 23 	lds	r31, 0x2375
    3e62:	30 97       	sbiw	r30, 0x00	; 0
    3e64:	29 f0       	breq	.+10     	; 0x3e70 <__vector_69+0x3c>
    3e66:	80 91 6a 24 	lds	r24, 0x246A
    3e6a:	90 91 6b 24 	lds	r25, 0x246B
    3e6e:	19 95       	eicall
    3e70:	ff 91       	pop	r31
    3e72:	ef 91       	pop	r30
    3e74:	bf 91       	pop	r27
    3e76:	af 91       	pop	r26
    3e78:	9f 91       	pop	r25
    3e7a:	8f 91       	pop	r24
    3e7c:	7f 91       	pop	r23
    3e7e:	6f 91       	pop	r22
    3e80:	5f 91       	pop	r21
    3e82:	4f 91       	pop	r20
    3e84:	3f 91       	pop	r19
    3e86:	2f 91       	pop	r18
    3e88:	0f 90       	pop	r0
    3e8a:	0b be       	out	0x3b, r0	; 59
    3e8c:	0f 90       	pop	r0
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	0f 90       	pop	r0
    3e92:	1f 90       	pop	r1
    3e94:	18 95       	reti

00003e96 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3e96:	1f 92       	push	r1
    3e98:	0f 92       	push	r0
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	0f 92       	push	r0
    3e9e:	11 24       	eor	r1, r1
    3ea0:	0b b6       	in	r0, 0x3b	; 59
    3ea2:	0f 92       	push	r0
    3ea4:	2f 93       	push	r18
    3ea6:	3f 93       	push	r19
    3ea8:	4f 93       	push	r20
    3eaa:	5f 93       	push	r21
    3eac:	6f 93       	push	r22
    3eae:	7f 93       	push	r23
    3eb0:	8f 93       	push	r24
    3eb2:	9f 93       	push	r25
    3eb4:	af 93       	push	r26
    3eb6:	bf 93       	push	r27
    3eb8:	ef 93       	push	r30
    3eba:	ff 93       	push	r31
    3ebc:	e0 91 76 23 	lds	r30, 0x2376
    3ec0:	f0 91 77 23 	lds	r31, 0x2377
    3ec4:	30 97       	sbiw	r30, 0x00	; 0
    3ec6:	29 f0       	breq	.+10     	; 0x3ed2 <__vector_70+0x3c>
    3ec8:	80 91 6c 24 	lds	r24, 0x246C
    3ecc:	90 91 6d 24 	lds	r25, 0x246D
    3ed0:	19 95       	eicall
    3ed2:	ff 91       	pop	r31
    3ed4:	ef 91       	pop	r30
    3ed6:	bf 91       	pop	r27
    3ed8:	af 91       	pop	r26
    3eda:	9f 91       	pop	r25
    3edc:	8f 91       	pop	r24
    3ede:	7f 91       	pop	r23
    3ee0:	6f 91       	pop	r22
    3ee2:	5f 91       	pop	r21
    3ee4:	4f 91       	pop	r20
    3ee6:	3f 91       	pop	r19
    3ee8:	2f 91       	pop	r18
    3eea:	0f 90       	pop	r0
    3eec:	0b be       	out	0x3b, r0	; 59
    3eee:	0f 90       	pop	r0
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	0f 90       	pop	r0
    3ef4:	1f 90       	pop	r1
    3ef6:	18 95       	reti

00003ef8 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3ef8:	1f 92       	push	r1
    3efa:	0f 92       	push	r0
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	0f 92       	push	r0
    3f00:	11 24       	eor	r1, r1
    3f02:	0b b6       	in	r0, 0x3b	; 59
    3f04:	0f 92       	push	r0
    3f06:	2f 93       	push	r18
    3f08:	3f 93       	push	r19
    3f0a:	4f 93       	push	r20
    3f0c:	5f 93       	push	r21
    3f0e:	6f 93       	push	r22
    3f10:	7f 93       	push	r23
    3f12:	8f 93       	push	r24
    3f14:	9f 93       	push	r25
    3f16:	af 93       	push	r26
    3f18:	bf 93       	push	r27
    3f1a:	ef 93       	push	r30
    3f1c:	ff 93       	push	r31
    3f1e:	e0 91 78 23 	lds	r30, 0x2378
    3f22:	f0 91 79 23 	lds	r31, 0x2379
    3f26:	30 97       	sbiw	r30, 0x00	; 0
    3f28:	29 f0       	breq	.+10     	; 0x3f34 <__vector_71+0x3c>
    3f2a:	80 91 6e 24 	lds	r24, 0x246E
    3f2e:	90 91 6f 24 	lds	r25, 0x246F
    3f32:	19 95       	eicall
    3f34:	ff 91       	pop	r31
    3f36:	ef 91       	pop	r30
    3f38:	bf 91       	pop	r27
    3f3a:	af 91       	pop	r26
    3f3c:	9f 91       	pop	r25
    3f3e:	8f 91       	pop	r24
    3f40:	7f 91       	pop	r23
    3f42:	6f 91       	pop	r22
    3f44:	5f 91       	pop	r21
    3f46:	4f 91       	pop	r20
    3f48:	3f 91       	pop	r19
    3f4a:	2f 91       	pop	r18
    3f4c:	0f 90       	pop	r0
    3f4e:	0b be       	out	0x3b, r0	; 59
    3f50:	0f 90       	pop	r0
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	0f 90       	pop	r0
    3f56:	1f 90       	pop	r1
    3f58:	18 95       	reti

00003f5a <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3f5a:	1f 92       	push	r1
    3f5c:	0f 92       	push	r0
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	0f 92       	push	r0
    3f62:	11 24       	eor	r1, r1
    3f64:	0b b6       	in	r0, 0x3b	; 59
    3f66:	0f 92       	push	r0
    3f68:	2f 93       	push	r18
    3f6a:	3f 93       	push	r19
    3f6c:	4f 93       	push	r20
    3f6e:	5f 93       	push	r21
    3f70:	6f 93       	push	r22
    3f72:	7f 93       	push	r23
    3f74:	8f 93       	push	r24
    3f76:	9f 93       	push	r25
    3f78:	af 93       	push	r26
    3f7a:	bf 93       	push	r27
    3f7c:	ef 93       	push	r30
    3f7e:	ff 93       	push	r31
    3f80:	e0 91 7a 23 	lds	r30, 0x237A
    3f84:	f0 91 7b 23 	lds	r31, 0x237B
    3f88:	30 97       	sbiw	r30, 0x00	; 0
    3f8a:	29 f0       	breq	.+10     	; 0x3f96 <__vector_72+0x3c>
    3f8c:	80 91 70 24 	lds	r24, 0x2470
    3f90:	90 91 71 24 	lds	r25, 0x2471
    3f94:	19 95       	eicall
    3f96:	ff 91       	pop	r31
    3f98:	ef 91       	pop	r30
    3f9a:	bf 91       	pop	r27
    3f9c:	af 91       	pop	r26
    3f9e:	9f 91       	pop	r25
    3fa0:	8f 91       	pop	r24
    3fa2:	7f 91       	pop	r23
    3fa4:	6f 91       	pop	r22
    3fa6:	5f 91       	pop	r21
    3fa8:	4f 91       	pop	r20
    3faa:	3f 91       	pop	r19
    3fac:	2f 91       	pop	r18
    3fae:	0f 90       	pop	r0
    3fb0:	0b be       	out	0x3b, r0	; 59
    3fb2:	0f 90       	pop	r0
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	0f 90       	pop	r0
    3fb8:	1f 90       	pop	r1
    3fba:	18 95       	reti

00003fbc <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3fbc:	1f 92       	push	r1
    3fbe:	0f 92       	push	r0
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	0f 92       	push	r0
    3fc4:	11 24       	eor	r1, r1
    3fc6:	0b b6       	in	r0, 0x3b	; 59
    3fc8:	0f 92       	push	r0
    3fca:	2f 93       	push	r18
    3fcc:	3f 93       	push	r19
    3fce:	4f 93       	push	r20
    3fd0:	5f 93       	push	r21
    3fd2:	6f 93       	push	r22
    3fd4:	7f 93       	push	r23
    3fd6:	8f 93       	push	r24
    3fd8:	9f 93       	push	r25
    3fda:	af 93       	push	r26
    3fdc:	bf 93       	push	r27
    3fde:	ef 93       	push	r30
    3fe0:	ff 93       	push	r31
    3fe2:	e0 91 7c 23 	lds	r30, 0x237C
    3fe6:	f0 91 7d 23 	lds	r31, 0x237D
    3fea:	30 97       	sbiw	r30, 0x00	; 0
    3fec:	29 f0       	breq	.+10     	; 0x3ff8 <__vector_73+0x3c>
    3fee:	80 91 72 24 	lds	r24, 0x2472
    3ff2:	90 91 73 24 	lds	r25, 0x2473
    3ff6:	19 95       	eicall
    3ff8:	ff 91       	pop	r31
    3ffa:	ef 91       	pop	r30
    3ffc:	bf 91       	pop	r27
    3ffe:	af 91       	pop	r26
    4000:	9f 91       	pop	r25
    4002:	8f 91       	pop	r24
    4004:	7f 91       	pop	r23
    4006:	6f 91       	pop	r22
    4008:	5f 91       	pop	r21
    400a:	4f 91       	pop	r20
    400c:	3f 91       	pop	r19
    400e:	2f 91       	pop	r18
    4010:	0f 90       	pop	r0
    4012:	0b be       	out	0x3b, r0	; 59
    4014:	0f 90       	pop	r0
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	0f 90       	pop	r0
    401a:	1f 90       	pop	r1
    401c:	18 95       	reti

0000401e <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    401e:	1f 92       	push	r1
    4020:	0f 92       	push	r0
    4022:	0f b6       	in	r0, 0x3f	; 63
    4024:	0f 92       	push	r0
    4026:	11 24       	eor	r1, r1
    4028:	0b b6       	in	r0, 0x3b	; 59
    402a:	0f 92       	push	r0
    402c:	2f 93       	push	r18
    402e:	3f 93       	push	r19
    4030:	4f 93       	push	r20
    4032:	5f 93       	push	r21
    4034:	6f 93       	push	r22
    4036:	7f 93       	push	r23
    4038:	8f 93       	push	r24
    403a:	9f 93       	push	r25
    403c:	af 93       	push	r26
    403e:	bf 93       	push	r27
    4040:	ef 93       	push	r30
    4042:	ff 93       	push	r31
    4044:	e0 91 7e 23 	lds	r30, 0x237E
    4048:	f0 91 7f 23 	lds	r31, 0x237F
    404c:	30 97       	sbiw	r30, 0x00	; 0
    404e:	29 f0       	breq	.+10     	; 0x405a <__vector_74+0x3c>
    4050:	80 91 74 24 	lds	r24, 0x2474
    4054:	90 91 75 24 	lds	r25, 0x2475
    4058:	19 95       	eicall
    405a:	ff 91       	pop	r31
    405c:	ef 91       	pop	r30
    405e:	bf 91       	pop	r27
    4060:	af 91       	pop	r26
    4062:	9f 91       	pop	r25
    4064:	8f 91       	pop	r24
    4066:	7f 91       	pop	r23
    4068:	6f 91       	pop	r22
    406a:	5f 91       	pop	r21
    406c:	4f 91       	pop	r20
    406e:	3f 91       	pop	r19
    4070:	2f 91       	pop	r18
    4072:	0f 90       	pop	r0
    4074:	0b be       	out	0x3b, r0	; 59
    4076:	0f 90       	pop	r0
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	0f 90       	pop	r0
    407c:	1f 90       	pop	r1
    407e:	18 95       	reti

00004080 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    4080:	1f 92       	push	r1
    4082:	0f 92       	push	r0
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	0f 92       	push	r0
    4088:	11 24       	eor	r1, r1
    408a:	0b b6       	in	r0, 0x3b	; 59
    408c:	0f 92       	push	r0
    408e:	2f 93       	push	r18
    4090:	3f 93       	push	r19
    4092:	4f 93       	push	r20
    4094:	5f 93       	push	r21
    4096:	6f 93       	push	r22
    4098:	7f 93       	push	r23
    409a:	8f 93       	push	r24
    409c:	9f 93       	push	r25
    409e:	af 93       	push	r26
    40a0:	bf 93       	push	r27
    40a2:	ef 93       	push	r30
    40a4:	ff 93       	push	r31
    40a6:	e0 91 84 23 	lds	r30, 0x2384
    40aa:	f0 91 85 23 	lds	r31, 0x2385
    40ae:	30 97       	sbiw	r30, 0x00	; 0
    40b0:	29 f0       	breq	.+10     	; 0x40bc <__vector_77+0x3c>
    40b2:	80 91 7a 24 	lds	r24, 0x247A
    40b6:	90 91 7b 24 	lds	r25, 0x247B
    40ba:	19 95       	eicall
    40bc:	ff 91       	pop	r31
    40be:	ef 91       	pop	r30
    40c0:	bf 91       	pop	r27
    40c2:	af 91       	pop	r26
    40c4:	9f 91       	pop	r25
    40c6:	8f 91       	pop	r24
    40c8:	7f 91       	pop	r23
    40ca:	6f 91       	pop	r22
    40cc:	5f 91       	pop	r21
    40ce:	4f 91       	pop	r20
    40d0:	3f 91       	pop	r19
    40d2:	2f 91       	pop	r18
    40d4:	0f 90       	pop	r0
    40d6:	0b be       	out	0x3b, r0	; 59
    40d8:	0f 90       	pop	r0
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	0f 90       	pop	r0
    40de:	1f 90       	pop	r1
    40e0:	18 95       	reti

000040e2 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    40e2:	1f 92       	push	r1
    40e4:	0f 92       	push	r0
    40e6:	0f b6       	in	r0, 0x3f	; 63
    40e8:	0f 92       	push	r0
    40ea:	11 24       	eor	r1, r1
    40ec:	0b b6       	in	r0, 0x3b	; 59
    40ee:	0f 92       	push	r0
    40f0:	2f 93       	push	r18
    40f2:	3f 93       	push	r19
    40f4:	4f 93       	push	r20
    40f6:	5f 93       	push	r21
    40f8:	6f 93       	push	r22
    40fa:	7f 93       	push	r23
    40fc:	8f 93       	push	r24
    40fe:	9f 93       	push	r25
    4100:	af 93       	push	r26
    4102:	bf 93       	push	r27
    4104:	ef 93       	push	r30
    4106:	ff 93       	push	r31
    4108:	e0 91 86 23 	lds	r30, 0x2386
    410c:	f0 91 87 23 	lds	r31, 0x2387
    4110:	30 97       	sbiw	r30, 0x00	; 0
    4112:	29 f0       	breq	.+10     	; 0x411e <__vector_78+0x3c>
    4114:	80 91 7c 24 	lds	r24, 0x247C
    4118:	90 91 7d 24 	lds	r25, 0x247D
    411c:	19 95       	eicall
    411e:	ff 91       	pop	r31
    4120:	ef 91       	pop	r30
    4122:	bf 91       	pop	r27
    4124:	af 91       	pop	r26
    4126:	9f 91       	pop	r25
    4128:	8f 91       	pop	r24
    412a:	7f 91       	pop	r23
    412c:	6f 91       	pop	r22
    412e:	5f 91       	pop	r21
    4130:	4f 91       	pop	r20
    4132:	3f 91       	pop	r19
    4134:	2f 91       	pop	r18
    4136:	0f 90       	pop	r0
    4138:	0b be       	out	0x3b, r0	; 59
    413a:	0f 90       	pop	r0
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	0f 90       	pop	r0
    4140:	1f 90       	pop	r1
    4142:	18 95       	reti

00004144 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    4144:	1f 92       	push	r1
    4146:	0f 92       	push	r0
    4148:	0f b6       	in	r0, 0x3f	; 63
    414a:	0f 92       	push	r0
    414c:	11 24       	eor	r1, r1
    414e:	0b b6       	in	r0, 0x3b	; 59
    4150:	0f 92       	push	r0
    4152:	2f 93       	push	r18
    4154:	3f 93       	push	r19
    4156:	4f 93       	push	r20
    4158:	5f 93       	push	r21
    415a:	6f 93       	push	r22
    415c:	7f 93       	push	r23
    415e:	8f 93       	push	r24
    4160:	9f 93       	push	r25
    4162:	af 93       	push	r26
    4164:	bf 93       	push	r27
    4166:	ef 93       	push	r30
    4168:	ff 93       	push	r31
    416a:	e0 91 88 23 	lds	r30, 0x2388
    416e:	f0 91 89 23 	lds	r31, 0x2389
    4172:	30 97       	sbiw	r30, 0x00	; 0
    4174:	29 f0       	breq	.+10     	; 0x4180 <__vector_79+0x3c>
    4176:	80 91 7e 24 	lds	r24, 0x247E
    417a:	90 91 7f 24 	lds	r25, 0x247F
    417e:	19 95       	eicall
    4180:	ff 91       	pop	r31
    4182:	ef 91       	pop	r30
    4184:	bf 91       	pop	r27
    4186:	af 91       	pop	r26
    4188:	9f 91       	pop	r25
    418a:	8f 91       	pop	r24
    418c:	7f 91       	pop	r23
    418e:	6f 91       	pop	r22
    4190:	5f 91       	pop	r21
    4192:	4f 91       	pop	r20
    4194:	3f 91       	pop	r19
    4196:	2f 91       	pop	r18
    4198:	0f 90       	pop	r0
    419a:	0b be       	out	0x3b, r0	; 59
    419c:	0f 90       	pop	r0
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	0f 90       	pop	r0
    41a2:	1f 90       	pop	r1
    41a4:	18 95       	reti

000041a6 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    41a6:	1f 92       	push	r1
    41a8:	0f 92       	push	r0
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	0f 92       	push	r0
    41ae:	11 24       	eor	r1, r1
    41b0:	0b b6       	in	r0, 0x3b	; 59
    41b2:	0f 92       	push	r0
    41b4:	2f 93       	push	r18
    41b6:	3f 93       	push	r19
    41b8:	4f 93       	push	r20
    41ba:	5f 93       	push	r21
    41bc:	6f 93       	push	r22
    41be:	7f 93       	push	r23
    41c0:	8f 93       	push	r24
    41c2:	9f 93       	push	r25
    41c4:	af 93       	push	r26
    41c6:	bf 93       	push	r27
    41c8:	ef 93       	push	r30
    41ca:	ff 93       	push	r31
    41cc:	e0 91 8a 23 	lds	r30, 0x238A
    41d0:	f0 91 8b 23 	lds	r31, 0x238B
    41d4:	30 97       	sbiw	r30, 0x00	; 0
    41d6:	29 f0       	breq	.+10     	; 0x41e2 <__vector_80+0x3c>
    41d8:	80 91 80 24 	lds	r24, 0x2480
    41dc:	90 91 81 24 	lds	r25, 0x2481
    41e0:	19 95       	eicall
    41e2:	ff 91       	pop	r31
    41e4:	ef 91       	pop	r30
    41e6:	bf 91       	pop	r27
    41e8:	af 91       	pop	r26
    41ea:	9f 91       	pop	r25
    41ec:	8f 91       	pop	r24
    41ee:	7f 91       	pop	r23
    41f0:	6f 91       	pop	r22
    41f2:	5f 91       	pop	r21
    41f4:	4f 91       	pop	r20
    41f6:	3f 91       	pop	r19
    41f8:	2f 91       	pop	r18
    41fa:	0f 90       	pop	r0
    41fc:	0b be       	out	0x3b, r0	; 59
    41fe:	0f 90       	pop	r0
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	0f 90       	pop	r0
    4204:	1f 90       	pop	r1
    4206:	18 95       	reti

00004208 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    4208:	1f 92       	push	r1
    420a:	0f 92       	push	r0
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	0f 92       	push	r0
    4210:	11 24       	eor	r1, r1
    4212:	0b b6       	in	r0, 0x3b	; 59
    4214:	0f 92       	push	r0
    4216:	2f 93       	push	r18
    4218:	3f 93       	push	r19
    421a:	4f 93       	push	r20
    421c:	5f 93       	push	r21
    421e:	6f 93       	push	r22
    4220:	7f 93       	push	r23
    4222:	8f 93       	push	r24
    4224:	9f 93       	push	r25
    4226:	af 93       	push	r26
    4228:	bf 93       	push	r27
    422a:	ef 93       	push	r30
    422c:	ff 93       	push	r31
    422e:	e0 91 8c 23 	lds	r30, 0x238C
    4232:	f0 91 8d 23 	lds	r31, 0x238D
    4236:	30 97       	sbiw	r30, 0x00	; 0
    4238:	29 f0       	breq	.+10     	; 0x4244 <__vector_81+0x3c>
    423a:	80 91 82 24 	lds	r24, 0x2482
    423e:	90 91 83 24 	lds	r25, 0x2483
    4242:	19 95       	eicall
    4244:	ff 91       	pop	r31
    4246:	ef 91       	pop	r30
    4248:	bf 91       	pop	r27
    424a:	af 91       	pop	r26
    424c:	9f 91       	pop	r25
    424e:	8f 91       	pop	r24
    4250:	7f 91       	pop	r23
    4252:	6f 91       	pop	r22
    4254:	5f 91       	pop	r21
    4256:	4f 91       	pop	r20
    4258:	3f 91       	pop	r19
    425a:	2f 91       	pop	r18
    425c:	0f 90       	pop	r0
    425e:	0b be       	out	0x3b, r0	; 59
    4260:	0f 90       	pop	r0
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	0f 90       	pop	r0
    4266:	1f 90       	pop	r1
    4268:	18 95       	reti

0000426a <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    426a:	1f 92       	push	r1
    426c:	0f 92       	push	r0
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	0f 92       	push	r0
    4272:	11 24       	eor	r1, r1
    4274:	0b b6       	in	r0, 0x3b	; 59
    4276:	0f 92       	push	r0
    4278:	2f 93       	push	r18
    427a:	3f 93       	push	r19
    427c:	4f 93       	push	r20
    427e:	5f 93       	push	r21
    4280:	6f 93       	push	r22
    4282:	7f 93       	push	r23
    4284:	8f 93       	push	r24
    4286:	9f 93       	push	r25
    4288:	af 93       	push	r26
    428a:	bf 93       	push	r27
    428c:	ef 93       	push	r30
    428e:	ff 93       	push	r31
    4290:	e0 91 8e 23 	lds	r30, 0x238E
    4294:	f0 91 8f 23 	lds	r31, 0x238F
    4298:	30 97       	sbiw	r30, 0x00	; 0
    429a:	29 f0       	breq	.+10     	; 0x42a6 <__vector_82+0x3c>
    429c:	80 91 84 24 	lds	r24, 0x2484
    42a0:	90 91 85 24 	lds	r25, 0x2485
    42a4:	19 95       	eicall
    42a6:	ff 91       	pop	r31
    42a8:	ef 91       	pop	r30
    42aa:	bf 91       	pop	r27
    42ac:	af 91       	pop	r26
    42ae:	9f 91       	pop	r25
    42b0:	8f 91       	pop	r24
    42b2:	7f 91       	pop	r23
    42b4:	6f 91       	pop	r22
    42b6:	5f 91       	pop	r21
    42b8:	4f 91       	pop	r20
    42ba:	3f 91       	pop	r19
    42bc:	2f 91       	pop	r18
    42be:	0f 90       	pop	r0
    42c0:	0b be       	out	0x3b, r0	; 59
    42c2:	0f 90       	pop	r0
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	0f 90       	pop	r0
    42c8:	1f 90       	pop	r1
    42ca:	18 95       	reti

000042cc <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    42cc:	1f 92       	push	r1
    42ce:	0f 92       	push	r0
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	0f 92       	push	r0
    42d4:	11 24       	eor	r1, r1
    42d6:	0b b6       	in	r0, 0x3b	; 59
    42d8:	0f 92       	push	r0
    42da:	2f 93       	push	r18
    42dc:	3f 93       	push	r19
    42de:	4f 93       	push	r20
    42e0:	5f 93       	push	r21
    42e2:	6f 93       	push	r22
    42e4:	7f 93       	push	r23
    42e6:	8f 93       	push	r24
    42e8:	9f 93       	push	r25
    42ea:	af 93       	push	r26
    42ec:	bf 93       	push	r27
    42ee:	ef 93       	push	r30
    42f0:	ff 93       	push	r31
    42f2:	e0 91 90 23 	lds	r30, 0x2390
    42f6:	f0 91 91 23 	lds	r31, 0x2391
    42fa:	30 97       	sbiw	r30, 0x00	; 0
    42fc:	29 f0       	breq	.+10     	; 0x4308 <__vector_83+0x3c>
    42fe:	80 91 86 24 	lds	r24, 0x2486
    4302:	90 91 87 24 	lds	r25, 0x2487
    4306:	19 95       	eicall
    4308:	ff 91       	pop	r31
    430a:	ef 91       	pop	r30
    430c:	bf 91       	pop	r27
    430e:	af 91       	pop	r26
    4310:	9f 91       	pop	r25
    4312:	8f 91       	pop	r24
    4314:	7f 91       	pop	r23
    4316:	6f 91       	pop	r22
    4318:	5f 91       	pop	r21
    431a:	4f 91       	pop	r20
    431c:	3f 91       	pop	r19
    431e:	2f 91       	pop	r18
    4320:	0f 90       	pop	r0
    4322:	0b be       	out	0x3b, r0	; 59
    4324:	0f 90       	pop	r0
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	0f 90       	pop	r0
    432a:	1f 90       	pop	r1
    432c:	18 95       	reti

0000432e <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    432e:	1f 92       	push	r1
    4330:	0f 92       	push	r0
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	0f 92       	push	r0
    4336:	11 24       	eor	r1, r1
    4338:	0b b6       	in	r0, 0x3b	; 59
    433a:	0f 92       	push	r0
    433c:	2f 93       	push	r18
    433e:	3f 93       	push	r19
    4340:	4f 93       	push	r20
    4342:	5f 93       	push	r21
    4344:	6f 93       	push	r22
    4346:	7f 93       	push	r23
    4348:	8f 93       	push	r24
    434a:	9f 93       	push	r25
    434c:	af 93       	push	r26
    434e:	bf 93       	push	r27
    4350:	ef 93       	push	r30
    4352:	ff 93       	push	r31
    4354:	e0 91 92 23 	lds	r30, 0x2392
    4358:	f0 91 93 23 	lds	r31, 0x2393
    435c:	30 97       	sbiw	r30, 0x00	; 0
    435e:	29 f0       	breq	.+10     	; 0x436a <__vector_84+0x3c>
    4360:	80 91 88 24 	lds	r24, 0x2488
    4364:	90 91 89 24 	lds	r25, 0x2489
    4368:	19 95       	eicall
    436a:	ff 91       	pop	r31
    436c:	ef 91       	pop	r30
    436e:	bf 91       	pop	r27
    4370:	af 91       	pop	r26
    4372:	9f 91       	pop	r25
    4374:	8f 91       	pop	r24
    4376:	7f 91       	pop	r23
    4378:	6f 91       	pop	r22
    437a:	5f 91       	pop	r21
    437c:	4f 91       	pop	r20
    437e:	3f 91       	pop	r19
    4380:	2f 91       	pop	r18
    4382:	0f 90       	pop	r0
    4384:	0b be       	out	0x3b, r0	; 59
    4386:	0f 90       	pop	r0
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	0f 90       	pop	r0
    438c:	1f 90       	pop	r1
    438e:	18 95       	reti

00004390 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    4390:	1f 92       	push	r1
    4392:	0f 92       	push	r0
    4394:	0f b6       	in	r0, 0x3f	; 63
    4396:	0f 92       	push	r0
    4398:	11 24       	eor	r1, r1
    439a:	0b b6       	in	r0, 0x3b	; 59
    439c:	0f 92       	push	r0
    439e:	2f 93       	push	r18
    43a0:	3f 93       	push	r19
    43a2:	4f 93       	push	r20
    43a4:	5f 93       	push	r21
    43a6:	6f 93       	push	r22
    43a8:	7f 93       	push	r23
    43aa:	8f 93       	push	r24
    43ac:	9f 93       	push	r25
    43ae:	af 93       	push	r26
    43b0:	bf 93       	push	r27
    43b2:	ef 93       	push	r30
    43b4:	ff 93       	push	r31
    43b6:	e0 91 94 23 	lds	r30, 0x2394
    43ba:	f0 91 95 23 	lds	r31, 0x2395
    43be:	30 97       	sbiw	r30, 0x00	; 0
    43c0:	29 f0       	breq	.+10     	; 0x43cc <__vector_85+0x3c>
    43c2:	80 91 8a 24 	lds	r24, 0x248A
    43c6:	90 91 8b 24 	lds	r25, 0x248B
    43ca:	19 95       	eicall
    43cc:	ff 91       	pop	r31
    43ce:	ef 91       	pop	r30
    43d0:	bf 91       	pop	r27
    43d2:	af 91       	pop	r26
    43d4:	9f 91       	pop	r25
    43d6:	8f 91       	pop	r24
    43d8:	7f 91       	pop	r23
    43da:	6f 91       	pop	r22
    43dc:	5f 91       	pop	r21
    43de:	4f 91       	pop	r20
    43e0:	3f 91       	pop	r19
    43e2:	2f 91       	pop	r18
    43e4:	0f 90       	pop	r0
    43e6:	0b be       	out	0x3b, r0	; 59
    43e8:	0f 90       	pop	r0
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	0f 90       	pop	r0
    43ee:	1f 90       	pop	r1
    43f0:	18 95       	reti

000043f2 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    43f2:	1f 92       	push	r1
    43f4:	0f 92       	push	r0
    43f6:	0f b6       	in	r0, 0x3f	; 63
    43f8:	0f 92       	push	r0
    43fa:	11 24       	eor	r1, r1
    43fc:	0b b6       	in	r0, 0x3b	; 59
    43fe:	0f 92       	push	r0
    4400:	2f 93       	push	r18
    4402:	3f 93       	push	r19
    4404:	4f 93       	push	r20
    4406:	5f 93       	push	r21
    4408:	6f 93       	push	r22
    440a:	7f 93       	push	r23
    440c:	8f 93       	push	r24
    440e:	9f 93       	push	r25
    4410:	af 93       	push	r26
    4412:	bf 93       	push	r27
    4414:	ef 93       	push	r30
    4416:	ff 93       	push	r31
    4418:	e0 91 96 23 	lds	r30, 0x2396
    441c:	f0 91 97 23 	lds	r31, 0x2397
    4420:	30 97       	sbiw	r30, 0x00	; 0
    4422:	29 f0       	breq	.+10     	; 0x442e <__vector_86+0x3c>
    4424:	80 91 8c 24 	lds	r24, 0x248C
    4428:	90 91 8d 24 	lds	r25, 0x248D
    442c:	19 95       	eicall
    442e:	ff 91       	pop	r31
    4430:	ef 91       	pop	r30
    4432:	bf 91       	pop	r27
    4434:	af 91       	pop	r26
    4436:	9f 91       	pop	r25
    4438:	8f 91       	pop	r24
    443a:	7f 91       	pop	r23
    443c:	6f 91       	pop	r22
    443e:	5f 91       	pop	r21
    4440:	4f 91       	pop	r20
    4442:	3f 91       	pop	r19
    4444:	2f 91       	pop	r18
    4446:	0f 90       	pop	r0
    4448:	0b be       	out	0x3b, r0	; 59
    444a:	0f 90       	pop	r0
    444c:	0f be       	out	0x3f, r0	; 63
    444e:	0f 90       	pop	r0
    4450:	1f 90       	pop	r1
    4452:	18 95       	reti

00004454 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    4454:	1f 92       	push	r1
    4456:	0f 92       	push	r0
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	0f 92       	push	r0
    445c:	11 24       	eor	r1, r1
    445e:	0b b6       	in	r0, 0x3b	; 59
    4460:	0f 92       	push	r0
    4462:	2f 93       	push	r18
    4464:	3f 93       	push	r19
    4466:	4f 93       	push	r20
    4468:	5f 93       	push	r21
    446a:	6f 93       	push	r22
    446c:	7f 93       	push	r23
    446e:	8f 93       	push	r24
    4470:	9f 93       	push	r25
    4472:	af 93       	push	r26
    4474:	bf 93       	push	r27
    4476:	ef 93       	push	r30
    4478:	ff 93       	push	r31
    447a:	e0 91 98 23 	lds	r30, 0x2398
    447e:	f0 91 99 23 	lds	r31, 0x2399
    4482:	30 97       	sbiw	r30, 0x00	; 0
    4484:	29 f0       	breq	.+10     	; 0x4490 <__vector_87+0x3c>
    4486:	80 91 8e 24 	lds	r24, 0x248E
    448a:	90 91 8f 24 	lds	r25, 0x248F
    448e:	19 95       	eicall
    4490:	ff 91       	pop	r31
    4492:	ef 91       	pop	r30
    4494:	bf 91       	pop	r27
    4496:	af 91       	pop	r26
    4498:	9f 91       	pop	r25
    449a:	8f 91       	pop	r24
    449c:	7f 91       	pop	r23
    449e:	6f 91       	pop	r22
    44a0:	5f 91       	pop	r21
    44a2:	4f 91       	pop	r20
    44a4:	3f 91       	pop	r19
    44a6:	2f 91       	pop	r18
    44a8:	0f 90       	pop	r0
    44aa:	0b be       	out	0x3b, r0	; 59
    44ac:	0f 90       	pop	r0
    44ae:	0f be       	out	0x3f, r0	; 63
    44b0:	0f 90       	pop	r0
    44b2:	1f 90       	pop	r1
    44b4:	18 95       	reti

000044b6 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    44b6:	1f 92       	push	r1
    44b8:	0f 92       	push	r0
    44ba:	0f b6       	in	r0, 0x3f	; 63
    44bc:	0f 92       	push	r0
    44be:	11 24       	eor	r1, r1
    44c0:	0b b6       	in	r0, 0x3b	; 59
    44c2:	0f 92       	push	r0
    44c4:	2f 93       	push	r18
    44c6:	3f 93       	push	r19
    44c8:	4f 93       	push	r20
    44ca:	5f 93       	push	r21
    44cc:	6f 93       	push	r22
    44ce:	7f 93       	push	r23
    44d0:	8f 93       	push	r24
    44d2:	9f 93       	push	r25
    44d4:	af 93       	push	r26
    44d6:	bf 93       	push	r27
    44d8:	ef 93       	push	r30
    44da:	ff 93       	push	r31
    44dc:	e0 91 9a 23 	lds	r30, 0x239A
    44e0:	f0 91 9b 23 	lds	r31, 0x239B
    44e4:	30 97       	sbiw	r30, 0x00	; 0
    44e6:	29 f0       	breq	.+10     	; 0x44f2 <__vector_88+0x3c>
    44e8:	80 91 90 24 	lds	r24, 0x2490
    44ec:	90 91 91 24 	lds	r25, 0x2491
    44f0:	19 95       	eicall
    44f2:	ff 91       	pop	r31
    44f4:	ef 91       	pop	r30
    44f6:	bf 91       	pop	r27
    44f8:	af 91       	pop	r26
    44fa:	9f 91       	pop	r25
    44fc:	8f 91       	pop	r24
    44fe:	7f 91       	pop	r23
    4500:	6f 91       	pop	r22
    4502:	5f 91       	pop	r21
    4504:	4f 91       	pop	r20
    4506:	3f 91       	pop	r19
    4508:	2f 91       	pop	r18
    450a:	0f 90       	pop	r0
    450c:	0b be       	out	0x3b, r0	; 59
    450e:	0f 90       	pop	r0
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	0f 90       	pop	r0
    4514:	1f 90       	pop	r1
    4516:	18 95       	reti

00004518 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    4518:	1f 92       	push	r1
    451a:	0f 92       	push	r0
    451c:	0f b6       	in	r0, 0x3f	; 63
    451e:	0f 92       	push	r0
    4520:	11 24       	eor	r1, r1
    4522:	0b b6       	in	r0, 0x3b	; 59
    4524:	0f 92       	push	r0
    4526:	2f 93       	push	r18
    4528:	3f 93       	push	r19
    452a:	4f 93       	push	r20
    452c:	5f 93       	push	r21
    452e:	6f 93       	push	r22
    4530:	7f 93       	push	r23
    4532:	8f 93       	push	r24
    4534:	9f 93       	push	r25
    4536:	af 93       	push	r26
    4538:	bf 93       	push	r27
    453a:	ef 93       	push	r30
    453c:	ff 93       	push	r31
    453e:	e0 91 9c 23 	lds	r30, 0x239C
    4542:	f0 91 9d 23 	lds	r31, 0x239D
    4546:	30 97       	sbiw	r30, 0x00	; 0
    4548:	29 f0       	breq	.+10     	; 0x4554 <__vector_89+0x3c>
    454a:	80 91 92 24 	lds	r24, 0x2492
    454e:	90 91 93 24 	lds	r25, 0x2493
    4552:	19 95       	eicall
    4554:	ff 91       	pop	r31
    4556:	ef 91       	pop	r30
    4558:	bf 91       	pop	r27
    455a:	af 91       	pop	r26
    455c:	9f 91       	pop	r25
    455e:	8f 91       	pop	r24
    4560:	7f 91       	pop	r23
    4562:	6f 91       	pop	r22
    4564:	5f 91       	pop	r21
    4566:	4f 91       	pop	r20
    4568:	3f 91       	pop	r19
    456a:	2f 91       	pop	r18
    456c:	0f 90       	pop	r0
    456e:	0b be       	out	0x3b, r0	; 59
    4570:	0f 90       	pop	r0
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	0f 90       	pop	r0
    4576:	1f 90       	pop	r1
    4578:	18 95       	reti

0000457a <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    457a:	1f 92       	push	r1
    457c:	0f 92       	push	r0
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	0f 92       	push	r0
    4582:	11 24       	eor	r1, r1
    4584:	0b b6       	in	r0, 0x3b	; 59
    4586:	0f 92       	push	r0
    4588:	2f 93       	push	r18
    458a:	3f 93       	push	r19
    458c:	4f 93       	push	r20
    458e:	5f 93       	push	r21
    4590:	6f 93       	push	r22
    4592:	7f 93       	push	r23
    4594:	8f 93       	push	r24
    4596:	9f 93       	push	r25
    4598:	af 93       	push	r26
    459a:	bf 93       	push	r27
    459c:	ef 93       	push	r30
    459e:	ff 93       	push	r31
    45a0:	e0 91 9e 23 	lds	r30, 0x239E
    45a4:	f0 91 9f 23 	lds	r31, 0x239F
    45a8:	30 97       	sbiw	r30, 0x00	; 0
    45aa:	29 f0       	breq	.+10     	; 0x45b6 <__vector_90+0x3c>
    45ac:	80 91 94 24 	lds	r24, 0x2494
    45b0:	90 91 95 24 	lds	r25, 0x2495
    45b4:	19 95       	eicall
    45b6:	ff 91       	pop	r31
    45b8:	ef 91       	pop	r30
    45ba:	bf 91       	pop	r27
    45bc:	af 91       	pop	r26
    45be:	9f 91       	pop	r25
    45c0:	8f 91       	pop	r24
    45c2:	7f 91       	pop	r23
    45c4:	6f 91       	pop	r22
    45c6:	5f 91       	pop	r21
    45c8:	4f 91       	pop	r20
    45ca:	3f 91       	pop	r19
    45cc:	2f 91       	pop	r18
    45ce:	0f 90       	pop	r0
    45d0:	0b be       	out	0x3b, r0	; 59
    45d2:	0f 90       	pop	r0
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	0f 90       	pop	r0
    45d8:	1f 90       	pop	r1
    45da:	18 95       	reti

000045dc <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    45dc:	1f 92       	push	r1
    45de:	0f 92       	push	r0
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	0f 92       	push	r0
    45e4:	11 24       	eor	r1, r1
    45e6:	0b b6       	in	r0, 0x3b	; 59
    45e8:	0f 92       	push	r0
    45ea:	2f 93       	push	r18
    45ec:	3f 93       	push	r19
    45ee:	4f 93       	push	r20
    45f0:	5f 93       	push	r21
    45f2:	6f 93       	push	r22
    45f4:	7f 93       	push	r23
    45f6:	8f 93       	push	r24
    45f8:	9f 93       	push	r25
    45fa:	af 93       	push	r26
    45fc:	bf 93       	push	r27
    45fe:	ef 93       	push	r30
    4600:	ff 93       	push	r31
    4602:	e0 91 a0 23 	lds	r30, 0x23A0
    4606:	f0 91 a1 23 	lds	r31, 0x23A1
    460a:	30 97       	sbiw	r30, 0x00	; 0
    460c:	29 f0       	breq	.+10     	; 0x4618 <__vector_91+0x3c>
    460e:	80 91 96 24 	lds	r24, 0x2496
    4612:	90 91 97 24 	lds	r25, 0x2497
    4616:	19 95       	eicall
    4618:	ff 91       	pop	r31
    461a:	ef 91       	pop	r30
    461c:	bf 91       	pop	r27
    461e:	af 91       	pop	r26
    4620:	9f 91       	pop	r25
    4622:	8f 91       	pop	r24
    4624:	7f 91       	pop	r23
    4626:	6f 91       	pop	r22
    4628:	5f 91       	pop	r21
    462a:	4f 91       	pop	r20
    462c:	3f 91       	pop	r19
    462e:	2f 91       	pop	r18
    4630:	0f 90       	pop	r0
    4632:	0b be       	out	0x3b, r0	; 59
    4634:	0f 90       	pop	r0
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	0f 90       	pop	r0
    463a:	1f 90       	pop	r1
    463c:	18 95       	reti

0000463e <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    463e:	1f 92       	push	r1
    4640:	0f 92       	push	r0
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	0f 92       	push	r0
    4646:	11 24       	eor	r1, r1
    4648:	0b b6       	in	r0, 0x3b	; 59
    464a:	0f 92       	push	r0
    464c:	2f 93       	push	r18
    464e:	3f 93       	push	r19
    4650:	4f 93       	push	r20
    4652:	5f 93       	push	r21
    4654:	6f 93       	push	r22
    4656:	7f 93       	push	r23
    4658:	8f 93       	push	r24
    465a:	9f 93       	push	r25
    465c:	af 93       	push	r26
    465e:	bf 93       	push	r27
    4660:	ef 93       	push	r30
    4662:	ff 93       	push	r31
    4664:	e0 91 a2 23 	lds	r30, 0x23A2
    4668:	f0 91 a3 23 	lds	r31, 0x23A3
    466c:	30 97       	sbiw	r30, 0x00	; 0
    466e:	29 f0       	breq	.+10     	; 0x467a <__vector_92+0x3c>
    4670:	80 91 98 24 	lds	r24, 0x2498
    4674:	90 91 99 24 	lds	r25, 0x2499
    4678:	19 95       	eicall
    467a:	ff 91       	pop	r31
    467c:	ef 91       	pop	r30
    467e:	bf 91       	pop	r27
    4680:	af 91       	pop	r26
    4682:	9f 91       	pop	r25
    4684:	8f 91       	pop	r24
    4686:	7f 91       	pop	r23
    4688:	6f 91       	pop	r22
    468a:	5f 91       	pop	r21
    468c:	4f 91       	pop	r20
    468e:	3f 91       	pop	r19
    4690:	2f 91       	pop	r18
    4692:	0f 90       	pop	r0
    4694:	0b be       	out	0x3b, r0	; 59
    4696:	0f 90       	pop	r0
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	0f 90       	pop	r0
    469c:	1f 90       	pop	r1
    469e:	18 95       	reti

000046a0 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    46a0:	1f 92       	push	r1
    46a2:	0f 92       	push	r0
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	0f 92       	push	r0
    46a8:	11 24       	eor	r1, r1
    46aa:	0b b6       	in	r0, 0x3b	; 59
    46ac:	0f 92       	push	r0
    46ae:	2f 93       	push	r18
    46b0:	3f 93       	push	r19
    46b2:	4f 93       	push	r20
    46b4:	5f 93       	push	r21
    46b6:	6f 93       	push	r22
    46b8:	7f 93       	push	r23
    46ba:	8f 93       	push	r24
    46bc:	9f 93       	push	r25
    46be:	af 93       	push	r26
    46c0:	bf 93       	push	r27
    46c2:	ef 93       	push	r30
    46c4:	ff 93       	push	r31
    46c6:	e0 91 a4 23 	lds	r30, 0x23A4
    46ca:	f0 91 a5 23 	lds	r31, 0x23A5
    46ce:	30 97       	sbiw	r30, 0x00	; 0
    46d0:	29 f0       	breq	.+10     	; 0x46dc <__vector_93+0x3c>
    46d2:	80 91 9a 24 	lds	r24, 0x249A
    46d6:	90 91 9b 24 	lds	r25, 0x249B
    46da:	19 95       	eicall
    46dc:	ff 91       	pop	r31
    46de:	ef 91       	pop	r30
    46e0:	bf 91       	pop	r27
    46e2:	af 91       	pop	r26
    46e4:	9f 91       	pop	r25
    46e6:	8f 91       	pop	r24
    46e8:	7f 91       	pop	r23
    46ea:	6f 91       	pop	r22
    46ec:	5f 91       	pop	r21
    46ee:	4f 91       	pop	r20
    46f0:	3f 91       	pop	r19
    46f2:	2f 91       	pop	r18
    46f4:	0f 90       	pop	r0
    46f6:	0b be       	out	0x3b, r0	; 59
    46f8:	0f 90       	pop	r0
    46fa:	0f be       	out	0x3f, r0	; 63
    46fc:	0f 90       	pop	r0
    46fe:	1f 90       	pop	r1
    4700:	18 95       	reti

00004702 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    4702:	1f 92       	push	r1
    4704:	0f 92       	push	r0
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	0f 92       	push	r0
    470a:	11 24       	eor	r1, r1
    470c:	0b b6       	in	r0, 0x3b	; 59
    470e:	0f 92       	push	r0
    4710:	2f 93       	push	r18
    4712:	3f 93       	push	r19
    4714:	4f 93       	push	r20
    4716:	5f 93       	push	r21
    4718:	6f 93       	push	r22
    471a:	7f 93       	push	r23
    471c:	8f 93       	push	r24
    471e:	9f 93       	push	r25
    4720:	af 93       	push	r26
    4722:	bf 93       	push	r27
    4724:	ef 93       	push	r30
    4726:	ff 93       	push	r31
    4728:	e0 91 ba 23 	lds	r30, 0x23BA
    472c:	f0 91 bb 23 	lds	r31, 0x23BB
    4730:	30 97       	sbiw	r30, 0x00	; 0
    4732:	29 f0       	breq	.+10     	; 0x473e <__vector_104+0x3c>
    4734:	80 91 b0 24 	lds	r24, 0x24B0
    4738:	90 91 b1 24 	lds	r25, 0x24B1
    473c:	19 95       	eicall
    473e:	ff 91       	pop	r31
    4740:	ef 91       	pop	r30
    4742:	bf 91       	pop	r27
    4744:	af 91       	pop	r26
    4746:	9f 91       	pop	r25
    4748:	8f 91       	pop	r24
    474a:	7f 91       	pop	r23
    474c:	6f 91       	pop	r22
    474e:	5f 91       	pop	r21
    4750:	4f 91       	pop	r20
    4752:	3f 91       	pop	r19
    4754:	2f 91       	pop	r18
    4756:	0f 90       	pop	r0
    4758:	0b be       	out	0x3b, r0	; 59
    475a:	0f 90       	pop	r0
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	0f 90       	pop	r0
    4760:	1f 90       	pop	r1
    4762:	18 95       	reti

00004764 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    4764:	1f 92       	push	r1
    4766:	0f 92       	push	r0
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	0f 92       	push	r0
    476c:	11 24       	eor	r1, r1
    476e:	0b b6       	in	r0, 0x3b	; 59
    4770:	0f 92       	push	r0
    4772:	2f 93       	push	r18
    4774:	3f 93       	push	r19
    4776:	4f 93       	push	r20
    4778:	5f 93       	push	r21
    477a:	6f 93       	push	r22
    477c:	7f 93       	push	r23
    477e:	8f 93       	push	r24
    4780:	9f 93       	push	r25
    4782:	af 93       	push	r26
    4784:	bf 93       	push	r27
    4786:	ef 93       	push	r30
    4788:	ff 93       	push	r31
    478a:	e0 91 bc 23 	lds	r30, 0x23BC
    478e:	f0 91 bd 23 	lds	r31, 0x23BD
    4792:	30 97       	sbiw	r30, 0x00	; 0
    4794:	29 f0       	breq	.+10     	; 0x47a0 <__vector_105+0x3c>
    4796:	80 91 b2 24 	lds	r24, 0x24B2
    479a:	90 91 b3 24 	lds	r25, 0x24B3
    479e:	19 95       	eicall
    47a0:	ff 91       	pop	r31
    47a2:	ef 91       	pop	r30
    47a4:	bf 91       	pop	r27
    47a6:	af 91       	pop	r26
    47a8:	9f 91       	pop	r25
    47aa:	8f 91       	pop	r24
    47ac:	7f 91       	pop	r23
    47ae:	6f 91       	pop	r22
    47b0:	5f 91       	pop	r21
    47b2:	4f 91       	pop	r20
    47b4:	3f 91       	pop	r19
    47b6:	2f 91       	pop	r18
    47b8:	0f 90       	pop	r0
    47ba:	0b be       	out	0x3b, r0	; 59
    47bc:	0f 90       	pop	r0
    47be:	0f be       	out	0x3f, r0	; 63
    47c0:	0f 90       	pop	r0
    47c2:	1f 90       	pop	r1
    47c4:	18 95       	reti

000047c6 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    47c6:	1f 92       	push	r1
    47c8:	0f 92       	push	r0
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	0f 92       	push	r0
    47ce:	11 24       	eor	r1, r1
    47d0:	0b b6       	in	r0, 0x3b	; 59
    47d2:	0f 92       	push	r0
    47d4:	2f 93       	push	r18
    47d6:	3f 93       	push	r19
    47d8:	4f 93       	push	r20
    47da:	5f 93       	push	r21
    47dc:	6f 93       	push	r22
    47de:	7f 93       	push	r23
    47e0:	8f 93       	push	r24
    47e2:	9f 93       	push	r25
    47e4:	af 93       	push	r26
    47e6:	bf 93       	push	r27
    47e8:	ef 93       	push	r30
    47ea:	ff 93       	push	r31
    47ec:	e0 91 c2 23 	lds	r30, 0x23C2
    47f0:	f0 91 c3 23 	lds	r31, 0x23C3
    47f4:	30 97       	sbiw	r30, 0x00	; 0
    47f6:	29 f0       	breq	.+10     	; 0x4802 <__vector_108+0x3c>
    47f8:	80 91 b8 24 	lds	r24, 0x24B8
    47fc:	90 91 b9 24 	lds	r25, 0x24B9
    4800:	19 95       	eicall
    4802:	ff 91       	pop	r31
    4804:	ef 91       	pop	r30
    4806:	bf 91       	pop	r27
    4808:	af 91       	pop	r26
    480a:	9f 91       	pop	r25
    480c:	8f 91       	pop	r24
    480e:	7f 91       	pop	r23
    4810:	6f 91       	pop	r22
    4812:	5f 91       	pop	r21
    4814:	4f 91       	pop	r20
    4816:	3f 91       	pop	r19
    4818:	2f 91       	pop	r18
    481a:	0f 90       	pop	r0
    481c:	0b be       	out	0x3b, r0	; 59
    481e:	0f 90       	pop	r0
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	0f 90       	pop	r0
    4824:	1f 90       	pop	r1
    4826:	18 95       	reti

00004828 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    4828:	1f 92       	push	r1
    482a:	0f 92       	push	r0
    482c:	0f b6       	in	r0, 0x3f	; 63
    482e:	0f 92       	push	r0
    4830:	11 24       	eor	r1, r1
    4832:	0b b6       	in	r0, 0x3b	; 59
    4834:	0f 92       	push	r0
    4836:	2f 93       	push	r18
    4838:	3f 93       	push	r19
    483a:	4f 93       	push	r20
    483c:	5f 93       	push	r21
    483e:	6f 93       	push	r22
    4840:	7f 93       	push	r23
    4842:	8f 93       	push	r24
    4844:	9f 93       	push	r25
    4846:	af 93       	push	r26
    4848:	bf 93       	push	r27
    484a:	ef 93       	push	r30
    484c:	ff 93       	push	r31
    484e:	e0 91 c4 23 	lds	r30, 0x23C4
    4852:	f0 91 c5 23 	lds	r31, 0x23C5
    4856:	30 97       	sbiw	r30, 0x00	; 0
    4858:	29 f0       	breq	.+10     	; 0x4864 <__vector_109+0x3c>
    485a:	80 91 ba 24 	lds	r24, 0x24BA
    485e:	90 91 bb 24 	lds	r25, 0x24BB
    4862:	19 95       	eicall
    4864:	ff 91       	pop	r31
    4866:	ef 91       	pop	r30
    4868:	bf 91       	pop	r27
    486a:	af 91       	pop	r26
    486c:	9f 91       	pop	r25
    486e:	8f 91       	pop	r24
    4870:	7f 91       	pop	r23
    4872:	6f 91       	pop	r22
    4874:	5f 91       	pop	r21
    4876:	4f 91       	pop	r20
    4878:	3f 91       	pop	r19
    487a:	2f 91       	pop	r18
    487c:	0f 90       	pop	r0
    487e:	0b be       	out	0x3b, r0	; 59
    4880:	0f 90       	pop	r0
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	0f 90       	pop	r0
    4886:	1f 90       	pop	r1
    4888:	18 95       	reti

0000488a <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    488a:	1f 92       	push	r1
    488c:	0f 92       	push	r0
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	0f 92       	push	r0
    4892:	11 24       	eor	r1, r1
    4894:	0b b6       	in	r0, 0x3b	; 59
    4896:	0f 92       	push	r0
    4898:	2f 93       	push	r18
    489a:	3f 93       	push	r19
    489c:	4f 93       	push	r20
    489e:	5f 93       	push	r21
    48a0:	6f 93       	push	r22
    48a2:	7f 93       	push	r23
    48a4:	8f 93       	push	r24
    48a6:	9f 93       	push	r25
    48a8:	af 93       	push	r26
    48aa:	bf 93       	push	r27
    48ac:	ef 93       	push	r30
    48ae:	ff 93       	push	r31
    48b0:	e0 91 c6 23 	lds	r30, 0x23C6
    48b4:	f0 91 c7 23 	lds	r31, 0x23C7
    48b8:	30 97       	sbiw	r30, 0x00	; 0
    48ba:	29 f0       	breq	.+10     	; 0x48c6 <__vector_110+0x3c>
    48bc:	80 91 bc 24 	lds	r24, 0x24BC
    48c0:	90 91 bd 24 	lds	r25, 0x24BD
    48c4:	19 95       	eicall
    48c6:	ff 91       	pop	r31
    48c8:	ef 91       	pop	r30
    48ca:	bf 91       	pop	r27
    48cc:	af 91       	pop	r26
    48ce:	9f 91       	pop	r25
    48d0:	8f 91       	pop	r24
    48d2:	7f 91       	pop	r23
    48d4:	6f 91       	pop	r22
    48d6:	5f 91       	pop	r21
    48d8:	4f 91       	pop	r20
    48da:	3f 91       	pop	r19
    48dc:	2f 91       	pop	r18
    48de:	0f 90       	pop	r0
    48e0:	0b be       	out	0x3b, r0	; 59
    48e2:	0f 90       	pop	r0
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	0f 90       	pop	r0
    48e8:	1f 90       	pop	r1
    48ea:	18 95       	reti

000048ec <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    48ec:	1f 92       	push	r1
    48ee:	0f 92       	push	r0
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	0f 92       	push	r0
    48f4:	11 24       	eor	r1, r1
    48f6:	0b b6       	in	r0, 0x3b	; 59
    48f8:	0f 92       	push	r0
    48fa:	2f 93       	push	r18
    48fc:	3f 93       	push	r19
    48fe:	4f 93       	push	r20
    4900:	5f 93       	push	r21
    4902:	6f 93       	push	r22
    4904:	7f 93       	push	r23
    4906:	8f 93       	push	r24
    4908:	9f 93       	push	r25
    490a:	af 93       	push	r26
    490c:	bf 93       	push	r27
    490e:	ef 93       	push	r30
    4910:	ff 93       	push	r31
    4912:	e0 91 c8 23 	lds	r30, 0x23C8
    4916:	f0 91 c9 23 	lds	r31, 0x23C9
    491a:	30 97       	sbiw	r30, 0x00	; 0
    491c:	29 f0       	breq	.+10     	; 0x4928 <__vector_111+0x3c>
    491e:	80 91 be 24 	lds	r24, 0x24BE
    4922:	90 91 bf 24 	lds	r25, 0x24BF
    4926:	19 95       	eicall
    4928:	ff 91       	pop	r31
    492a:	ef 91       	pop	r30
    492c:	bf 91       	pop	r27
    492e:	af 91       	pop	r26
    4930:	9f 91       	pop	r25
    4932:	8f 91       	pop	r24
    4934:	7f 91       	pop	r23
    4936:	6f 91       	pop	r22
    4938:	5f 91       	pop	r21
    493a:	4f 91       	pop	r20
    493c:	3f 91       	pop	r19
    493e:	2f 91       	pop	r18
    4940:	0f 90       	pop	r0
    4942:	0b be       	out	0x3b, r0	; 59
    4944:	0f 90       	pop	r0
    4946:	0f be       	out	0x3f, r0	; 63
    4948:	0f 90       	pop	r0
    494a:	1f 90       	pop	r1
    494c:	18 95       	reti

0000494e <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    494e:	1f 92       	push	r1
    4950:	0f 92       	push	r0
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	0f 92       	push	r0
    4956:	11 24       	eor	r1, r1
    4958:	0b b6       	in	r0, 0x3b	; 59
    495a:	0f 92       	push	r0
    495c:	2f 93       	push	r18
    495e:	3f 93       	push	r19
    4960:	4f 93       	push	r20
    4962:	5f 93       	push	r21
    4964:	6f 93       	push	r22
    4966:	7f 93       	push	r23
    4968:	8f 93       	push	r24
    496a:	9f 93       	push	r25
    496c:	af 93       	push	r26
    496e:	bf 93       	push	r27
    4970:	ef 93       	push	r30
    4972:	ff 93       	push	r31
    4974:	e0 91 ca 23 	lds	r30, 0x23CA
    4978:	f0 91 cb 23 	lds	r31, 0x23CB
    497c:	30 97       	sbiw	r30, 0x00	; 0
    497e:	29 f0       	breq	.+10     	; 0x498a <__vector_112+0x3c>
    4980:	80 91 c0 24 	lds	r24, 0x24C0
    4984:	90 91 c1 24 	lds	r25, 0x24C1
    4988:	19 95       	eicall
    498a:	ff 91       	pop	r31
    498c:	ef 91       	pop	r30
    498e:	bf 91       	pop	r27
    4990:	af 91       	pop	r26
    4992:	9f 91       	pop	r25
    4994:	8f 91       	pop	r24
    4996:	7f 91       	pop	r23
    4998:	6f 91       	pop	r22
    499a:	5f 91       	pop	r21
    499c:	4f 91       	pop	r20
    499e:	3f 91       	pop	r19
    49a0:	2f 91       	pop	r18
    49a2:	0f 90       	pop	r0
    49a4:	0b be       	out	0x3b, r0	; 59
    49a6:	0f 90       	pop	r0
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	0f 90       	pop	r0
    49ac:	1f 90       	pop	r1
    49ae:	18 95       	reti

000049b0 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    49b0:	1f 92       	push	r1
    49b2:	0f 92       	push	r0
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	0f 92       	push	r0
    49b8:	11 24       	eor	r1, r1
    49ba:	0b b6       	in	r0, 0x3b	; 59
    49bc:	0f 92       	push	r0
    49be:	2f 93       	push	r18
    49c0:	3f 93       	push	r19
    49c2:	4f 93       	push	r20
    49c4:	5f 93       	push	r21
    49c6:	6f 93       	push	r22
    49c8:	7f 93       	push	r23
    49ca:	8f 93       	push	r24
    49cc:	9f 93       	push	r25
    49ce:	af 93       	push	r26
    49d0:	bf 93       	push	r27
    49d2:	ef 93       	push	r30
    49d4:	ff 93       	push	r31
    49d6:	e0 91 cc 23 	lds	r30, 0x23CC
    49da:	f0 91 cd 23 	lds	r31, 0x23CD
    49de:	30 97       	sbiw	r30, 0x00	; 0
    49e0:	29 f0       	breq	.+10     	; 0x49ec <__vector_113+0x3c>
    49e2:	80 91 c2 24 	lds	r24, 0x24C2
    49e6:	90 91 c3 24 	lds	r25, 0x24C3
    49ea:	19 95       	eicall
    49ec:	ff 91       	pop	r31
    49ee:	ef 91       	pop	r30
    49f0:	bf 91       	pop	r27
    49f2:	af 91       	pop	r26
    49f4:	9f 91       	pop	r25
    49f6:	8f 91       	pop	r24
    49f8:	7f 91       	pop	r23
    49fa:	6f 91       	pop	r22
    49fc:	5f 91       	pop	r21
    49fe:	4f 91       	pop	r20
    4a00:	3f 91       	pop	r19
    4a02:	2f 91       	pop	r18
    4a04:	0f 90       	pop	r0
    4a06:	0b be       	out	0x3b, r0	; 59
    4a08:	0f 90       	pop	r0
    4a0a:	0f be       	out	0x3f, r0	; 63
    4a0c:	0f 90       	pop	r0
    4a0e:	1f 90       	pop	r1
    4a10:	18 95       	reti

00004a12 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4a12:	1f 92       	push	r1
    4a14:	0f 92       	push	r0
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	0f 92       	push	r0
    4a1a:	11 24       	eor	r1, r1
    4a1c:	0b b6       	in	r0, 0x3b	; 59
    4a1e:	0f 92       	push	r0
    4a20:	2f 93       	push	r18
    4a22:	3f 93       	push	r19
    4a24:	4f 93       	push	r20
    4a26:	5f 93       	push	r21
    4a28:	6f 93       	push	r22
    4a2a:	7f 93       	push	r23
    4a2c:	8f 93       	push	r24
    4a2e:	9f 93       	push	r25
    4a30:	af 93       	push	r26
    4a32:	bf 93       	push	r27
    4a34:	ef 93       	push	r30
    4a36:	ff 93       	push	r31
    4a38:	e0 91 d8 23 	lds	r30, 0x23D8
    4a3c:	f0 91 d9 23 	lds	r31, 0x23D9
    4a40:	30 97       	sbiw	r30, 0x00	; 0
    4a42:	29 f0       	breq	.+10     	; 0x4a4e <__vector_119+0x3c>
    4a44:	80 91 ce 24 	lds	r24, 0x24CE
    4a48:	90 91 cf 24 	lds	r25, 0x24CF
    4a4c:	19 95       	eicall
    4a4e:	ff 91       	pop	r31
    4a50:	ef 91       	pop	r30
    4a52:	bf 91       	pop	r27
    4a54:	af 91       	pop	r26
    4a56:	9f 91       	pop	r25
    4a58:	8f 91       	pop	r24
    4a5a:	7f 91       	pop	r23
    4a5c:	6f 91       	pop	r22
    4a5e:	5f 91       	pop	r21
    4a60:	4f 91       	pop	r20
    4a62:	3f 91       	pop	r19
    4a64:	2f 91       	pop	r18
    4a66:	0f 90       	pop	r0
    4a68:	0b be       	out	0x3b, r0	; 59
    4a6a:	0f 90       	pop	r0
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	0f 90       	pop	r0
    4a70:	1f 90       	pop	r1
    4a72:	18 95       	reti

00004a74 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    4a74:	1f 92       	push	r1
    4a76:	0f 92       	push	r0
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	0f 92       	push	r0
    4a7c:	11 24       	eor	r1, r1
    4a7e:	0b b6       	in	r0, 0x3b	; 59
    4a80:	0f 92       	push	r0
    4a82:	2f 93       	push	r18
    4a84:	3f 93       	push	r19
    4a86:	4f 93       	push	r20
    4a88:	5f 93       	push	r21
    4a8a:	6f 93       	push	r22
    4a8c:	7f 93       	push	r23
    4a8e:	8f 93       	push	r24
    4a90:	9f 93       	push	r25
    4a92:	af 93       	push	r26
    4a94:	bf 93       	push	r27
    4a96:	ef 93       	push	r30
    4a98:	ff 93       	push	r31
    4a9a:	e0 91 da 23 	lds	r30, 0x23DA
    4a9e:	f0 91 db 23 	lds	r31, 0x23DB
    4aa2:	30 97       	sbiw	r30, 0x00	; 0
    4aa4:	29 f0       	breq	.+10     	; 0x4ab0 <__vector_120+0x3c>
    4aa6:	80 91 d0 24 	lds	r24, 0x24D0
    4aaa:	90 91 d1 24 	lds	r25, 0x24D1
    4aae:	19 95       	eicall
    4ab0:	ff 91       	pop	r31
    4ab2:	ef 91       	pop	r30
    4ab4:	bf 91       	pop	r27
    4ab6:	af 91       	pop	r26
    4ab8:	9f 91       	pop	r25
    4aba:	8f 91       	pop	r24
    4abc:	7f 91       	pop	r23
    4abe:	6f 91       	pop	r22
    4ac0:	5f 91       	pop	r21
    4ac2:	4f 91       	pop	r20
    4ac4:	3f 91       	pop	r19
    4ac6:	2f 91       	pop	r18
    4ac8:	0f 90       	pop	r0
    4aca:	0b be       	out	0x3b, r0	; 59
    4acc:	0f 90       	pop	r0
    4ace:	0f be       	out	0x3f, r0	; 63
    4ad0:	0f 90       	pop	r0
    4ad2:	1f 90       	pop	r1
    4ad4:	18 95       	reti

00004ad6 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4ad6:	1f 92       	push	r1
    4ad8:	0f 92       	push	r0
    4ada:	0f b6       	in	r0, 0x3f	; 63
    4adc:	0f 92       	push	r0
    4ade:	11 24       	eor	r1, r1
    4ae0:	0b b6       	in	r0, 0x3b	; 59
    4ae2:	0f 92       	push	r0
    4ae4:	2f 93       	push	r18
    4ae6:	3f 93       	push	r19
    4ae8:	4f 93       	push	r20
    4aea:	5f 93       	push	r21
    4aec:	6f 93       	push	r22
    4aee:	7f 93       	push	r23
    4af0:	8f 93       	push	r24
    4af2:	9f 93       	push	r25
    4af4:	af 93       	push	r26
    4af6:	bf 93       	push	r27
    4af8:	ef 93       	push	r30
    4afa:	ff 93       	push	r31
    4afc:	e0 91 dc 23 	lds	r30, 0x23DC
    4b00:	f0 91 dd 23 	lds	r31, 0x23DD
    4b04:	30 97       	sbiw	r30, 0x00	; 0
    4b06:	29 f0       	breq	.+10     	; 0x4b12 <__vector_121+0x3c>
    4b08:	80 91 d2 24 	lds	r24, 0x24D2
    4b0c:	90 91 d3 24 	lds	r25, 0x24D3
    4b10:	19 95       	eicall
    4b12:	ff 91       	pop	r31
    4b14:	ef 91       	pop	r30
    4b16:	bf 91       	pop	r27
    4b18:	af 91       	pop	r26
    4b1a:	9f 91       	pop	r25
    4b1c:	8f 91       	pop	r24
    4b1e:	7f 91       	pop	r23
    4b20:	6f 91       	pop	r22
    4b22:	5f 91       	pop	r21
    4b24:	4f 91       	pop	r20
    4b26:	3f 91       	pop	r19
    4b28:	2f 91       	pop	r18
    4b2a:	0f 90       	pop	r0
    4b2c:	0b be       	out	0x3b, r0	; 59
    4b2e:	0f 90       	pop	r0
    4b30:	0f be       	out	0x3f, r0	; 63
    4b32:	0f 90       	pop	r0
    4b34:	1f 90       	pop	r1
    4b36:	18 95       	reti

00004b38 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4b38:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    4b3c:	fd cf       	rjmp	.-6      	; 0x4b38 <__cxa_pure_virtual>

00004b3e <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4b3e:	8f e9       	ldi	r24, 0x9F	; 159
    4b40:	95 e2       	ldi	r25, 0x25	; 37
    4b42:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN4CSPIC1Ev>
CTimerC timer;
    4b46:	8c e9       	ldi	r24, 0x9C	; 156
    4b48:	95 e2       	ldi	r25, 0x25	; 37
    4b4a:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    4b4e:	89 e9       	ldi	r24, 0x99	; 153
    4b50:	95 e2       	ldi	r25, 0x25	; 37
    4b52:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    4b56:	86 e9       	ldi	r24, 0x96	; 150
    4b58:	95 e2       	ldi	r25, 0x25	; 37
    4b5a:	0e 94 b3 31 	call	0x6366	; 0x6366 <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    4b5e:	83 e9       	ldi	r24, 0x93	; 147
    4b60:	95 e2       	ldi	r25, 0x25	; 37
    4b62:	0e 94 56 2f 	call	0x5eac	; 0x5eac <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    4b66:	80 e9       	ldi	r24, 0x90	; 144
    4b68:	95 e2       	ldi	r25, 0x25	; 37
    4b6a:	0e 94 27 30 	call	0x604e	; 0x604e <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    4b6e:	8e e8       	ldi	r24, 0x8E	; 142
    4b70:	95 e2       	ldi	r25, 0x25	; 37
    4b72:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    4b76:	86 e8       	ldi	r24, 0x86	; 134
    4b78:	95 e2       	ldi	r25, 0x25	; 37
    4b7a:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    4b7e:	89 e6       	ldi	r24, 0x69	; 105
    4b80:	95 e2       	ldi	r25, 0x25	; 37
    4b82:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    4b86:	8f e5       	ldi	r24, 0x5F	; 95
    4b88:	95 e2       	ldi	r25, 0x25	; 37
    4b8a:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    4b8e:	8e e5       	ldi	r24, 0x5E	; 94
    4b90:	95 e2       	ldi	r25, 0x25	; 37
    4b92:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    4b96:	8e ed       	ldi	r24, 0xDE	; 222
    4b98:	94 e2       	ldi	r25, 0x24	; 36
    4b9a:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    4b9e:	8a ed       	ldi	r24, 0xDA	; 218
    4ba0:	94 e2       	ldi	r25, 0x24	; 36
    4ba2:	0e 94 75 2b 	call	0x56ea	; 0x56ea <_ZN8CDS18B20C1Ev>
    4ba6:	08 95       	ret

00004ba8 <_GLOBAL__sub_D_dacSPI>:
    4ba8:	8a ed       	ldi	r24, 0xDA	; 218
    4baa:	94 e2       	ldi	r25, 0x24	; 36
    4bac:	0e 94 76 2b 	call	0x56ec	; 0x56ec <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    4bb0:	8e ed       	ldi	r24, 0xDE	; 222
    4bb2:	94 e2       	ldi	r25, 0x24	; 36
    4bb4:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4bb8:	8e e5       	ldi	r24, 0x5E	; 94
    4bba:	95 e2       	ldi	r25, 0x25	; 37
    4bbc:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    4bc0:	8f e5       	ldi	r24, 0x5F	; 95
    4bc2:	95 e2       	ldi	r25, 0x25	; 37
    4bc4:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    4bc8:	89 e6       	ldi	r24, 0x69	; 105
    4bca:	95 e2       	ldi	r25, 0x25	; 37
    4bcc:	0e 94 ed 28 	call	0x51da	; 0x51da <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    4bd0:	86 e8       	ldi	r24, 0x86	; 134
    4bd2:	95 e2       	ldi	r25, 0x25	; 37
    4bd4:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    4bd8:	8e e8       	ldi	r24, 0x8E	; 142
    4bda:	95 e2       	ldi	r25, 0x25	; 37
    4bdc:	0e 94 6d 2b 	call	0x56da	; 0x56da <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    4be0:	80 e9       	ldi	r24, 0x90	; 144
    4be2:	95 e2       	ldi	r25, 0x25	; 37
    4be4:	0e 94 33 30 	call	0x6066	; 0x6066 <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    4be8:	83 e9       	ldi	r24, 0x93	; 147
    4bea:	95 e2       	ldi	r25, 0x25	; 37
    4bec:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    4bf0:	86 e9       	ldi	r24, 0x96	; 150
    4bf2:	95 e2       	ldi	r25, 0x25	; 37
    4bf4:	0e 94 bf 31 	call	0x637e	; 0x637e <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    4bf8:	89 e9       	ldi	r24, 0x99	; 153
    4bfa:	95 e2       	ldi	r25, 0x25	; 37
    4bfc:	0e 94 de 30 	call	0x61bc	; 0x61bc <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    4c00:	8c e9       	ldi	r24, 0x9C	; 156
    4c02:	95 e2       	ldi	r25, 0x25	; 37
    4c04:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4c08:	8f e9       	ldi	r24, 0x9F	; 159
    4c0a:	95 e2       	ldi	r25, 0x25	; 37
    4c0c:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN4CSPID1Ev>
    4c10:	08 95       	ret

00004c12 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4c12:	cf 92       	push	r12
    4c14:	df 92       	push	r13
    4c16:	ef 92       	push	r14
    4c18:	ff 92       	push	r15
    4c1a:	0f 93       	push	r16
    4c1c:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4c1e:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4c20:	84 e6       	ldi	r24, 0x64	; 100
    4c22:	80 93 80 01 	sts	0x0180, r24
	
	// Initialize modules
	laserBoard.InitializeIO();
    4c26:	8f e5       	ldi	r24, 0x5F	; 95
    4c28:	95 e2       	ldi	r25, 0x25	; 37
    4c2a:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4c2e:	8a ed       	ldi	r24, 0xDA	; 218
    4c30:	94 e2       	ldi	r25, 0x24	; 36
    4c32:	0e 94 49 2c 	call	0x5892	; 0x5892 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4c36:	8e e5       	ldi	r24, 0x5E	; 94
    4c38:	95 e2       	ldi	r25, 0x25	; 37
    4c3a:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    4c3e:	46 e0       	ldi	r20, 0x06	; 6
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	8c e9       	ldi	r24, 0x9C	; 156
    4c44:	95 e2       	ldi	r25, 0x25	; 37
    4c46:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    4c4a:	68 ea       	ldi	r22, 0xA8	; 168
    4c4c:	71 e6       	ldi	r23, 0x61	; 97
    4c4e:	8c e9       	ldi	r24, 0x9C	; 156
    4c50:	95 e2       	ldi	r25, 0x25	; 37
    4c52:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    4c56:	21 e0       	ldi	r18, 0x01	; 1
    4c58:	4e ed       	ldi	r20, 0xDE	; 222
    4c5a:	54 e2       	ldi	r21, 0x24	; 36
    4c5c:	6f ec       	ldi	r22, 0xCF	; 207
    4c5e:	7f e0       	ldi	r23, 0x0F	; 15
    4c60:	8c e9       	ldi	r24, 0x9C	; 156
    4c62:	95 e2       	ldi	r25, 0x25	; 37
    4c64:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4c68:	47 e0       	ldi	r20, 0x07	; 7
    4c6a:	60 e0       	ldi	r22, 0x00	; 0
    4c6c:	89 e9       	ldi	r24, 0x99	; 153
    4c6e:	95 e2       	ldi	r25, 0x25	; 37
    4c70:	0e 94 3b 30 	call	0x6076	; 0x6076 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4c74:	62 e1       	ldi	r22, 0x12	; 18
    4c76:	7a e7       	ldi	r23, 0x7A	; 122
    4c78:	89 e9       	ldi	r24, 0x99	; 153
    4c7a:	95 e2       	ldi	r25, 0x25	; 37
    4c7c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4c80:	48 e0       	ldi	r20, 0x08	; 8
    4c82:	60 e0       	ldi	r22, 0x00	; 0
    4c84:	83 e9       	ldi	r24, 0x93	; 147
    4c86:	95 e2       	ldi	r25, 0x25	; 37
    4c88:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4c8c:	6f ef       	ldi	r22, 0xFF	; 255
    4c8e:	7f ef       	ldi	r23, 0xFF	; 255
    4c90:	83 e9       	ldi	r24, 0x93	; 147
    4c92:	95 e2       	ldi	r25, 0x25	; 37
    4c94:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4c98:	6f ef       	ldi	r22, 0xFF	; 255
    4c9a:	7f ef       	ldi	r23, 0xFF	; 255
    4c9c:	83 e9       	ldi	r24, 0x93	; 147
    4c9e:	95 e2       	ldi	r25, 0x25	; 37
    4ca0:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    4ca4:	45 e0       	ldi	r20, 0x05	; 5
    4ca6:	63 e0       	ldi	r22, 0x03	; 3
    4ca8:	80 e9       	ldi	r24, 0x90	; 144
    4caa:	95 e2       	ldi	r25, 0x25	; 37
    4cac:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    4cb0:	60 e0       	ldi	r22, 0x00	; 0
    4cb2:	72 e0       	ldi	r23, 0x02	; 2
    4cb4:	80 e9       	ldi	r24, 0x90	; 144
    4cb6:	95 e2       	ldi	r25, 0x25	; 37
    4cb8:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    4cbc:	8f e5       	ldi	r24, 0x5F	; 95
    4cbe:	95 e2       	ldi	r25, 0x25	; 37
    4cc0:	0e 94 ef 2c 	call	0x59de	; 0x59de <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    4cc4:	8f e5       	ldi	r24, 0x5F	; 95
    4cc6:	95 e2       	ldi	r25, 0x25	; 37
    4cc8:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    4ccc:	8f e5       	ldi	r24, 0x5F	; 95
    4cce:	95 e2       	ldi	r25, 0x25	; 37
    4cd0:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    4cd4:	8f e5       	ldi	r24, 0x5F	; 95
    4cd6:	95 e2       	ldi	r25, 0x25	; 37
    4cd8:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4cdc:	21 e0       	ldi	r18, 0x01	; 1
    4cde:	4e ed       	ldi	r20, 0xDE	; 222
    4ce0:	54 e2       	ldi	r21, 0x24	; 36
    4ce2:	6d e9       	ldi	r22, 0x9D	; 157
    4ce4:	70 e1       	ldi	r23, 0x10	; 16
    4ce6:	80 e9       	ldi	r24, 0x90	; 144
    4ce8:	95 e2       	ldi	r25, 0x25	; 37
    4cea:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4cee:	21 e0       	ldi	r18, 0x01	; 1
    4cf0:	4e ed       	ldi	r20, 0xDE	; 222
    4cf2:	54 e2       	ldi	r21, 0x24	; 36
    4cf4:	67 e6       	ldi	r22, 0x67	; 103
    4cf6:	76 e0       	ldi	r23, 0x06	; 6
    4cf8:	80 e9       	ldi	r24, 0x90	; 144
    4cfa:	95 e2       	ldi	r25, 0x25	; 37
    4cfc:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    4d00:	60 e0       	ldi	r22, 0x00	; 0
    4d02:	71 e0       	ldi	r23, 0x01	; 1
    4d04:	80 e9       	ldi	r24, 0x90	; 144
    4d06:	95 e2       	ldi	r25, 0x25	; 37
    4d08:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    4d0c:	60 e0       	ldi	r22, 0x00	; 0
    4d0e:	72 e0       	ldi	r23, 0x02	; 2
    4d10:	80 e9       	ldi	r24, 0x90	; 144
    4d12:	95 e2       	ldi	r25, 0x25	; 37
    4d14:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    4d18:	60 e0       	ldi	r22, 0x00	; 0
    4d1a:	73 e0       	ldi	r23, 0x03	; 3
    4d1c:	80 e9       	ldi	r24, 0x90	; 144
    4d1e:	95 e2       	ldi	r25, 0x25	; 37
    4d20:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    4d24:	2c e0       	ldi	r18, 0x0C	; 12
    4d26:	4e ed       	ldi	r20, 0xDE	; 222
    4d28:	54 e2       	ldi	r21, 0x24	; 36
    4d2a:	6a e6       	ldi	r22, 0x6A	; 106
    4d2c:	76 e0       	ldi	r23, 0x06	; 6
    4d2e:	80 e9       	ldi	r24, 0x90	; 144
    4d30:	95 e2       	ldi	r25, 0x25	; 37
    4d32:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    4d36:	20 e3       	ldi	r18, 0x30	; 48
    4d38:	4e ed       	ldi	r20, 0xDE	; 222
    4d3a:	54 e2       	ldi	r21, 0x24	; 36
    4d3c:	6f e6       	ldi	r22, 0x6F	; 111
    4d3e:	76 e0       	ldi	r23, 0x06	; 6
    4d40:	80 e9       	ldi	r24, 0x90	; 144
    4d42:	95 e2       	ldi	r25, 0x25	; 37
    4d44:	0e 94 05 30 	call	0x600a	; 0x600a <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    4d48:	20 ec       	ldi	r18, 0xC0	; 192
    4d4a:	4e ed       	ldi	r20, 0xDE	; 222
    4d4c:	54 e2       	ldi	r21, 0x24	; 36
    4d4e:	64 e7       	ldi	r22, 0x74	; 116
    4d50:	76 e0       	ldi	r23, 0x06	; 6
    4d52:	80 e9       	ldi	r24, 0x90	; 144
    4d54:	95 e2       	ldi	r25, 0x25	; 37
    4d56:	0e 94 16 30 	call	0x602c	; 0x602c <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    4d5a:	60 e0       	ldi	r22, 0x00	; 0
    4d5c:	74 e0       	ldi	r23, 0x04	; 4
    4d5e:	80 e9       	ldi	r24, 0x90	; 144
    4d60:	95 e2       	ldi	r25, 0x25	; 37
    4d62:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4d66:	0f 2e       	mov	r0, r31
    4d68:	f3 e0       	ldi	r31, 0x03	; 3
    4d6a:	ef 2e       	mov	r14, r31
    4d6c:	f0 2d       	mov	r31, r0
    4d6e:	00 e0       	ldi	r16, 0x00	; 0
    4d70:	23 e0       	ldi	r18, 0x03	; 3
    4d72:	40 e0       	ldi	r20, 0x00	; 0
    4d74:	61 e0       	ldi	r22, 0x01	; 1
    4d76:	8f e9       	ldi	r24, 0x9F	; 159
    4d78:	95 e2       	ldi	r25, 0x25	; 37
    4d7a:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4d7e:	01 e0       	ldi	r16, 0x01	; 1
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	40 e0       	ldi	r20, 0x00	; 0
    4d84:	6d e0       	ldi	r22, 0x0D	; 13
    4d86:	8e e8       	ldi	r24, 0x8E	; 142
    4d88:	95 e2       	ldi	r25, 0x25	; 37
    4d8a:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4d8e:	0f 2e       	mov	r0, r31
    4d90:	f2 e1       	ldi	r31, 0x12	; 18
    4d92:	cf 2e       	mov	r12, r31
    4d94:	fa e7       	ldi	r31, 0x7A	; 122
    4d96:	df 2e       	mov	r13, r31
    4d98:	f0 2d       	mov	r31, r0
    4d9a:	e1 2c       	mov	r14, r1
    4d9c:	ff 24       	eor	r15, r15
    4d9e:	f3 94       	inc	r15
    4da0:	00 e0       	ldi	r16, 0x00	; 0
    4da2:	11 e0       	ldi	r17, 0x01	; 1
    4da4:	2e ed       	ldi	r18, 0xDE	; 222
    4da6:	34 e2       	ldi	r19, 0x24	; 36
    4da8:	4e e8       	ldi	r20, 0x8E	; 142
    4daa:	55 e2       	ldi	r21, 0x25	; 37
    4dac:	69 e9       	ldi	r22, 0x99	; 153
    4dae:	75 e2       	ldi	r23, 0x25	; 37
    4db0:	89 e6       	ldi	r24, 0x69	; 105
    4db2:	95 e2       	ldi	r25, 0x25	; 37
    4db4:	0e 94 7e 28 	call	0x50fc	; 0x50fc <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4db8:	40 e0       	ldi	r20, 0x00	; 0
    4dba:	51 e0       	ldi	r21, 0x01	; 1
    4dbc:	69 e6       	ldi	r22, 0x69	; 105
    4dbe:	75 e2       	ldi	r23, 0x25	; 37
    4dc0:	86 e8       	ldi	r24, 0x86	; 134
    4dc2:	95 e2       	ldi	r25, 0x25	; 37
    4dc4:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4dc8:	69 e6       	ldi	r22, 0x69	; 105
    4dca:	75 e2       	ldi	r23, 0x25	; 37
    4dcc:	8e ed       	ldi	r24, 0xDE	; 222
    4dce:	94 e2       	ldi	r25, 0x24	; 36
    4dd0:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4dd4:	8f e5       	ldi	r24, 0x5F	; 95
    4dd6:	95 e2       	ldi	r25, 0x25	; 37
    4dd8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4ddc:	8e ed       	ldi	r24, 0xDE	; 222
    4dde:	94 e2       	ldi	r25, 0x24	; 36
    4de0:	80 93 e4 23 	sts	0x23E4, r24
    4de4:	90 93 e5 23 	sts	0x23E5, r25
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4de8:	82 e4       	ldi	r24, 0x42	; 66
    4dea:	91 e1       	ldi	r25, 0x11	; 17
    4dec:	80 93 ee 22 	sts	0x22EE, r24
    4df0:	90 93 ef 22 	sts	0x22EF, r25
	
	sei();	/* Enable global interrupts */
    4df4:	78 94       	sei
}
    4df6:	1f 91       	pop	r17
    4df8:	0f 91       	pop	r16
    4dfa:	ff 90       	pop	r15
    4dfc:	ef 90       	pop	r14
    4dfe:	df 90       	pop	r13
    4e00:	cf 90       	pop	r12
    4e02:	08 95       	ret

00004e04 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	1f 92       	push	r1
    4e0a:	1f 92       	push	r1
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4e10:	0e 94 09 26 	call	0x4c12	; 0x4c12 <_Z16SystemInitializev>
    4e14:	2a ea       	ldi	r18, 0xAA	; 170
    4e16:	36 ee       	ldi	r19, 0xE6	; 230
    4e18:	86 e9       	ldi	r24, 0x96	; 150
    4e1a:	91 e0       	ldi	r25, 0x01	; 1
    4e1c:	21 50       	subi	r18, 0x01	; 1
    4e1e:	30 40       	sbci	r19, 0x00	; 0
    4e20:	80 40       	sbci	r24, 0x00	; 0
    4e22:	90 40       	sbci	r25, 0x00	; 0
    4e24:	d9 f7       	brne	.-10     	; 0x4e1c <main+0x18>
    4e26:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4e28:	8f e5       	ldi	r24, 0x5F	; 95
    4e2a:	95 e2       	ldi	r25, 0x25	; 37
    4e2c:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <_ZN11CLaserBoard8Relay1OnEv>
    4e30:	2f ef       	ldi	r18, 0xFF	; 255
    4e32:	33 ec       	ldi	r19, 0xC3	; 195
    4e34:	89 e0       	ldi	r24, 0x09	; 9
    4e36:	21 50       	subi	r18, 0x01	; 1
    4e38:	30 40       	sbci	r19, 0x00	; 0
    4e3a:	80 40       	sbci	r24, 0x00	; 0
    4e3c:	e1 f7       	brne	.-8      	; 0x4e36 <main+0x32>
    4e3e:	00 c0       	rjmp	.+0      	; 0x4e40 <main+0x3c>
    4e40:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4e42:	19 82       	std	Y+1, r1	; 0x01
    4e44:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4e46:	42 e0       	ldi	r20, 0x02	; 2
    4e48:	50 e0       	ldi	r21, 0x00	; 0
    4e4a:	be 01       	movw	r22, r28
    4e4c:	6f 5f       	subi	r22, 0xFF	; 255
    4e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e50:	8f e9       	ldi	r24, 0x9F	; 159
    4e52:	95 e2       	ldi	r25, 0x25	; 37
    4e54:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4e58:	8e ed       	ldi	r24, 0xDE	; 222
    4e5a:	94 e2       	ldi	r25, 0x24	; 36
    4e5c:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4e60:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4e62:	8f e5       	ldi	r24, 0x5F	; 95
    4e64:	95 e2       	ldi	r25, 0x25	; 37
    4e66:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4e6a:	8e ed       	ldi	r24, 0xDE	; 222
    4e6c:	94 e2       	ldi	r25, 0x24	; 36
    4e6e:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4e72:	40 91 d6 24 	lds	r20, 0x24D6
    4e76:	50 91 d7 24 	lds	r21, 0x24D7
    4e7a:	ca 01       	movw	r24, r20
    4e7c:	01 96       	adiw	r24, 0x01	; 1
    4e7e:	80 93 d6 24 	sts	0x24D6, r24
    4e82:	90 93 d7 24 	sts	0x24D7, r25
    4e86:	9a 01       	movw	r18, r20
    4e88:	a9 e8       	ldi	r26, 0x89	; 137
    4e8a:	b8 e8       	ldi	r27, 0x88	; 136
    4e8c:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    4e90:	96 95       	lsr	r25
    4e92:	87 95       	ror	r24
    4e94:	96 95       	lsr	r25
    4e96:	87 95       	ror	r24
    4e98:	96 95       	lsr	r25
    4e9a:	87 95       	ror	r24
    4e9c:	18 9f       	mul	r17, r24
    4e9e:	90 01       	movw	r18, r0
    4ea0:	19 9f       	mul	r17, r25
    4ea2:	30 0d       	add	r19, r0
    4ea4:	11 24       	eor	r1, r1
    4ea6:	42 17       	cp	r20, r18
    4ea8:	53 07       	cpc	r21, r19
    4eaa:	41 f4       	brne	.+16     	; 0x4ebc <main+0xb8>
				temperature = D18B20.temp_18b20();
    4eac:	8a ed       	ldi	r24, 0xDA	; 218
    4eae:	94 e2       	ldi	r25, 0x24	; 36
    4eb0:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <_ZN8CDS18B2010temp_18b20Ev>
    4eb4:	80 93 d8 24 	sts	0x24D8, r24
    4eb8:	90 93 d9 24 	sts	0x24D9, r25
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4ebc:	80 91 d8 24 	lds	r24, 0x24D8
    4ec0:	90 91 d9 24 	lds	r25, 0x24D9
    4ec4:	8a 30       	cpi	r24, 0x0A	; 10
    4ec6:	91 40       	sbci	r25, 0x01	; 1
    4ec8:	24 f0       	brlt	.+8      	; 0x4ed2 <main+0xce>
				laserBoard.Relay2On();
    4eca:	8f e5       	ldi	r24, 0x5F	; 95
    4ecc:	95 e2       	ldi	r25, 0x25	; 37
    4ece:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4ed2:	80 91 d8 24 	lds	r24, 0x24D8
    4ed6:	90 91 d9 24 	lds	r25, 0x24D9
    4eda:	8f 3f       	cpi	r24, 0xFF	; 255
    4edc:	91 05       	cpc	r25, r1
    4ede:	0c f6       	brge	.-126    	; 0x4e62 <main+0x5e>
				laserBoard.Relay2Off();			
    4ee0:	8f e5       	ldi	r24, 0x5F	; 95
    4ee2:	95 e2       	ldi	r25, 0x25	; 37
    4ee4:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <_ZN11CLaserBoard9Relay2OffEv>
    4ee8:	bc cf       	rjmp	.-136    	; 0x4e62 <main+0x5e>

00004eea <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4eea:	cf 93       	push	r28
    4eec:	df 93       	push	r29
    4eee:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4ef0:	ec 81       	ldd	r30, Y+4	; 0x04
    4ef2:	fd 81       	ldd	r31, Y+5	; 0x05
    4ef4:	8a ea       	ldi	r24, 0xAA	; 170
    4ef6:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4ef8:	ec 81       	ldd	r30, Y+4	; 0x04
    4efa:	fd 81       	ldd	r31, Y+5	; 0x05
    4efc:	8c ec       	ldi	r24, 0xCC	; 204
    4efe:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4f00:	ec 81       	ldd	r30, Y+4	; 0x04
    4f02:	fd 81       	ldd	r31, Y+5	; 0x05
    4f04:	82 e0       	ldi	r24, 0x02	; 2
    4f06:	82 0f       	add	r24, r18
    4f08:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4f0a:	ec 81       	ldd	r30, Y+4	; 0x04
    4f0c:	fd 81       	ldd	r31, Y+5	; 0x05
    4f0e:	80 e8       	ldi	r24, 0x80	; 128
    4f10:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4f12:	ec 81       	ldd	r30, Y+4	; 0x04
    4f14:	fd 81       	ldd	r31, Y+5	; 0x05
    4f16:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4f18:	85 e0       	ldi	r24, 0x05	; 5
    4f1a:	82 0f       	add	r24, r18
    4f1c:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	21 15       	cp	r18, r1
    4f22:	31 05       	cpc	r19, r1
    4f24:	81 f0       	breq	.+32     	; 0x4f46 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4f26:	da 01       	movw	r26, r20
    4f28:	42 0f       	add	r20, r18
    4f2a:	53 1f       	adc	r21, r19
    4f2c:	65 e0       	ldi	r22, 0x05	; 5
    4f2e:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4f30:	9d 91       	ld	r25, X+
    4f32:	ec 81       	ldd	r30, Y+4	; 0x04
    4f34:	fd 81       	ldd	r31, Y+5	; 0x05
    4f36:	e6 0f       	add	r30, r22
    4f38:	f7 1f       	adc	r31, r23
    4f3a:	90 83       	st	Z, r25
    4f3c:	6f 5f       	subi	r22, 0xFF	; 255
    4f3e:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4f40:	a4 17       	cp	r26, r20
    4f42:	b5 07       	cpc	r27, r21
    4f44:	a9 f7       	brne	.-22     	; 0x4f30 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	08 95       	ret

00004f4c <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4f4c:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4f4e:	a4 81       	ldd	r26, Z+4	; 0x04
    4f50:	b5 81       	ldd	r27, Z+5	; 0x05
    4f52:	8a ea       	ldi	r24, 0xAA	; 170
    4f54:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4f56:	a4 81       	ldd	r26, Z+4	; 0x04
    4f58:	b5 81       	ldd	r27, Z+5	; 0x05
    4f5a:	8c ec       	ldi	r24, 0xCC	; 204
    4f5c:	11 96       	adiw	r26, 0x01	; 1
    4f5e:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4f60:	a4 81       	ldd	r26, Z+4	; 0x04
    4f62:	b5 81       	ldd	r27, Z+5	; 0x05
    4f64:	83 e0       	ldi	r24, 0x03	; 3
    4f66:	12 96       	adiw	r26, 0x02	; 2
    4f68:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4f6a:	a4 81       	ldd	r26, Z+4	; 0x04
    4f6c:	b5 81       	ldd	r27, Z+5	; 0x05
    4f6e:	81 e8       	ldi	r24, 0x81	; 129
    4f70:	13 96       	adiw	r26, 0x03	; 3
    4f72:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4f74:	a4 81       	ldd	r26, Z+4	; 0x04
    4f76:	b5 81       	ldd	r27, Z+5	; 0x05
    4f78:	14 96       	adiw	r26, 0x04	; 4
    4f7a:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4f7c:	a4 81       	ldd	r26, Z+4	; 0x04
    4f7e:	b5 81       	ldd	r27, Z+5	; 0x05
    4f80:	15 96       	adiw	r26, 0x05	; 5
    4f82:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4f84:	86 e0       	ldi	r24, 0x06	; 6
    4f86:	81 87       	std	Z+9, r24	; 0x09
    4f88:	08 95       	ret

00004f8a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4f8a:	0f 93       	push	r16
    4f8c:	1f 93       	push	r17
    4f8e:	cf 93       	push	r28
    4f90:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4f92:	dc 01       	movw	r26, r24
    4f94:	14 96       	adiw	r26, 0x04	; 4
    4f96:	ed 91       	ld	r30, X+
    4f98:	fc 91       	ld	r31, X
    4f9a:	15 97       	sbiw	r26, 0x05	; 5
    4f9c:	aa ea       	ldi	r26, 0xAA	; 170
    4f9e:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4fa0:	ec 01       	movw	r28, r24
    4fa2:	ec 81       	ldd	r30, Y+4	; 0x04
    4fa4:	fd 81       	ldd	r31, Y+5	; 0x05
    4fa6:	ac ec       	ldi	r26, 0xCC	; 204
    4fa8:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4faa:	ec 81       	ldd	r30, Y+4	; 0x04
    4fac:	fd 81       	ldd	r31, Y+5	; 0x05
    4fae:	a3 e0       	ldi	r26, 0x03	; 3
    4fb0:	a2 0f       	add	r26, r18
    4fb2:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4fb4:	ec 81       	ldd	r30, Y+4	; 0x04
    4fb6:	fd 81       	ldd	r31, Y+5	; 0x05
    4fb8:	a2 e8       	ldi	r26, 0x82	; 130
    4fba:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4fbc:	ec 81       	ldd	r30, Y+4	; 0x04
    4fbe:	fd 81       	ldd	r31, Y+5	; 0x05
    4fc0:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4fc2:	ec 81       	ldd	r30, Y+4	; 0x04
    4fc4:	fd 81       	ldd	r31, Y+5	; 0x05
    4fc6:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4fc8:	66 e0       	ldi	r22, 0x06	; 6
    4fca:	62 0f       	add	r22, r18
    4fcc:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4fce:	36 95       	lsr	r19
    4fd0:	27 95       	ror	r18
    4fd2:	21 15       	cp	r18, r1
    4fd4:	31 05       	cpc	r19, r1
    4fd6:	e1 f0       	breq	.+56     	; 0x5010 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4fd8:	e4 2f       	mov	r30, r20
    4fda:	f5 2f       	mov	r31, r21
    4fdc:	2d 5f       	subi	r18, 0xFD	; 253
    4fde:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe0:	22 0f       	add	r18, r18
    4fe2:	33 1f       	adc	r19, r19
    4fe4:	46 e0       	ldi	r20, 0x06	; 6
    4fe6:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4fe8:	ec 01       	movw	r28, r24
    4fea:	ac 81       	ldd	r26, Y+4	; 0x04
    4fec:	bd 81       	ldd	r27, Y+5	; 0x05
    4fee:	a4 0f       	add	r26, r20
    4ff0:	b5 1f       	adc	r27, r21
    4ff2:	61 81       	ldd	r22, Z+1	; 0x01
    4ff4:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4ff6:	ac 81       	ldd	r26, Y+4	; 0x04
    4ff8:	bd 81       	ldd	r27, Y+5	; 0x05
    4ffa:	a4 0f       	add	r26, r20
    4ffc:	b5 1f       	adc	r27, r21
    4ffe:	60 81       	ld	r22, Z
    5000:	32 96       	adiw	r30, 0x02	; 2
    5002:	11 96       	adiw	r26, 0x01	; 1
    5004:	6c 93       	st	X, r22
    5006:	4e 5f       	subi	r20, 0xFE	; 254
    5008:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    500a:	42 17       	cp	r20, r18
    500c:	53 07       	cpc	r21, r19
    500e:	61 f7       	brne	.-40     	; 0x4fe8 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    5010:	df 91       	pop	r29
    5012:	cf 91       	pop	r28
    5014:	1f 91       	pop	r17
    5016:	0f 91       	pop	r16
    5018:	08 95       	ret

0000501a <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    501a:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    501c:	a4 81       	ldd	r26, Z+4	; 0x04
    501e:	b5 81       	ldd	r27, Z+5	; 0x05
    5020:	8a ea       	ldi	r24, 0xAA	; 170
    5022:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    5024:	a4 81       	ldd	r26, Z+4	; 0x04
    5026:	b5 81       	ldd	r27, Z+5	; 0x05
    5028:	8c ec       	ldi	r24, 0xCC	; 204
    502a:	11 96       	adiw	r26, 0x01	; 1
    502c:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    502e:	a4 81       	ldd	r26, Z+4	; 0x04
    5030:	b5 81       	ldd	r27, Z+5	; 0x05
    5032:	84 e0       	ldi	r24, 0x04	; 4
    5034:	12 96       	adiw	r26, 0x02	; 2
    5036:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    5038:	a4 81       	ldd	r26, Z+4	; 0x04
    503a:	b5 81       	ldd	r27, Z+5	; 0x05
    503c:	83 e8       	ldi	r24, 0x83	; 131
    503e:	13 96       	adiw	r26, 0x03	; 3
    5040:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    5042:	a4 81       	ldd	r26, Z+4	; 0x04
    5044:	b5 81       	ldd	r27, Z+5	; 0x05
    5046:	14 96       	adiw	r26, 0x04	; 4
    5048:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    504a:	a4 81       	ldd	r26, Z+4	; 0x04
    504c:	b5 81       	ldd	r27, Z+5	; 0x05
    504e:	15 96       	adiw	r26, 0x05	; 5
    5050:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    5052:	a4 81       	ldd	r26, Z+4	; 0x04
    5054:	b5 81       	ldd	r27, Z+5	; 0x05
    5056:	16 96       	adiw	r26, 0x06	; 6
    5058:	4c 93       	st	X, r20
	tx_frame_length = 7;
    505a:	87 e0       	ldi	r24, 0x07	; 7
    505c:	81 87       	std	Z+9, r24	; 0x09
    505e:	08 95       	ret

00005060 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    5060:	0f 93       	push	r16
    5062:	1f 93       	push	r17
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	ec 01       	movw	r28, r24
    506a:	cb 01       	movw	r24, r22
    506c:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    506e:	6f 83       	std	Y+7, r22	; 0x07
    5070:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    5072:	4a 87       	std	Y+10, r20	; 0x0a
    5074:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    5076:	0e 94 93 33 	call	0x6726	; 0x6726 <malloc>
    507a:	8a 83       	std	Y+2, r24	; 0x02
    507c:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    507e:	c8 01       	movw	r24, r16
    5080:	0e 94 93 33 	call	0x6726	; 0x6726 <malloc>
    5084:	8c 83       	std	Y+4, r24	; 0x04
    5086:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    5088:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    508a:	1e 82       	std	Y+6, r1	; 0x06
}
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	08 95       	ret

00005096 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    5096:	cf 93       	push	r28
    5098:	df 93       	push	r29
    509a:	ec 01       	movw	r28, r24
	free(rx_buffer);
    509c:	8a 81       	ldd	r24, Y+2	; 0x02
    509e:	9b 81       	ldd	r25, Y+3	; 0x03
    50a0:	0e 94 28 34 	call	0x6850	; 0x6850 <free>
	free(tx_buffer);
    50a4:	8c 81       	ldd	r24, Y+4	; 0x04
    50a6:	9d 81       	ldd	r25, Y+5	; 0x05
    50a8:	0e 94 28 34 	call	0x6850	; 0x6850 <free>
}
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	08 95       	ret

000050b2 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    50b2:	08 95       	ret

000050b4 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    50b4:	dc 01       	movw	r26, r24
    50b6:	5b 96       	adiw	r26, 0x1b	; 27
    50b8:	8d 91       	ld	r24, X+
    50ba:	9c 91       	ld	r25, X
    50bc:	5c 97       	sbiw	r26, 0x1c	; 28
    50be:	00 97       	sbiw	r24, 0x00	; 0
    50c0:	39 f0       	breq	.+14     	; 0x50d0 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    50c2:	dc 01       	movw	r26, r24
    50c4:	ed 91       	ld	r30, X+
    50c6:	fc 91       	ld	r31, X
    50c8:	02 80       	ldd	r0, Z+2	; 0x02
    50ca:	f3 81       	ldd	r31, Z+3	; 0x03
    50cc:	e0 2d       	mov	r30, r0
    50ce:	19 95       	eicall
    50d0:	08 95       	ret

000050d2 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    50d2:	dc 01       	movw	r26, r24
    50d4:	5b 96       	adiw	r26, 0x1b	; 27
    50d6:	8d 91       	ld	r24, X+
    50d8:	9c 91       	ld	r25, X
    50da:	5c 97       	sbiw	r26, 0x1c	; 28
    50dc:	00 97       	sbiw	r24, 0x00	; 0
    50de:	39 f0       	breq	.+14     	; 0x50ee <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    50e0:	dc 01       	movw	r26, r24
    50e2:	ed 91       	ld	r30, X+
    50e4:	fc 91       	ld	r31, X
    50e6:	04 80       	ldd	r0, Z+4	; 0x04
    50e8:	f5 81       	ldd	r31, Z+5	; 0x05
    50ea:	e0 2d       	mov	r30, r0
    50ec:	19 95       	eicall
    50ee:	08 95       	ret

000050f0 <_ZN9CMBSenderC1Ev>:
    50f0:	2a e0       	ldi	r18, 0x0A	; 10
    50f2:	32 e2       	ldi	r19, 0x22	; 34
    50f4:	fc 01       	movw	r30, r24
    50f6:	20 83       	st	Z, r18
    50f8:	31 83       	std	Z+1, r19	; 0x01
    50fa:	08 95       	ret

000050fc <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    50fc:	6f 92       	push	r6
    50fe:	7f 92       	push	r7
    5100:	8f 92       	push	r8
    5102:	9f 92       	push	r9
    5104:	af 92       	push	r10
    5106:	bf 92       	push	r11
    5108:	cf 92       	push	r12
    510a:	df 92       	push	r13
    510c:	ef 92       	push	r14
    510e:	ff 92       	push	r15
    5110:	0f 93       	push	r16
    5112:	1f 93       	push	r17
    5114:	cf 93       	push	r28
    5116:	df 93       	push	r29
    5118:	ec 01       	movw	r28, r24
    511a:	4b 01       	movw	r8, r22
    511c:	5a 01       	movw	r10, r20
    511e:	39 01       	movw	r6, r18
    5120:	c8 01       	movw	r24, r16
    5122:	0f 83       	std	Y+7, r16	; 0x07
    5124:	18 87       	std	Y+8, r17	; 0x08
    5126:	ea 86       	std	Y+10, r14	; 0x0a
    5128:	fb 86       	std	Y+11, r15	; 0x0b
    512a:	0e 94 93 33 	call	0x6726	; 0x6726 <malloc>
    512e:	8a 83       	std	Y+2, r24	; 0x02
    5130:	9b 83       	std	Y+3, r25	; 0x03
    5132:	c7 01       	movw	r24, r14
    5134:	0e 94 93 33 	call	0x6726	; 0x6726 <malloc>
    5138:	8c 83       	std	Y+4, r24	; 0x04
    513a:	9d 83       	std	Y+5, r25	; 0x05
    513c:	19 8e       	std	Y+25, r1	; 0x19
    513e:	19 86       	std	Y+9, r1	; 0x09
    5140:	19 8a       	std	Y+17, r1	; 0x11
    5142:	1e 82       	std	Y+6, r1	; 0x06
    5144:	1c 8a       	std	Y+20, r1	; 0x14
    5146:	1d 8a       	std	Y+21, r1	; 0x15
    5148:	1e 8a       	std	Y+22, r1	; 0x16
    514a:	1f 8a       	std	Y+23, r1	; 0x17
    514c:	87 e0       	ldi	r24, 0x07	; 7
    514e:	88 8b       	std	Y+16, r24	; 0x10
    5150:	82 e0       	ldi	r24, 0x02	; 2
    5152:	88 8f       	std	Y+24, r24	; 0x18
    5154:	1a 8e       	std	Y+26, r1	; 0x1a
    5156:	ca 8a       	std	Y+18, r12	; 0x12
    5158:	db 8a       	std	Y+19, r13	; 0x13
    515a:	ac 86       	std	Y+12, r10	; 0x0c
    515c:	bd 86       	std	Y+13, r11	; 0x0d
    515e:	d5 01       	movw	r26, r10
    5160:	ed 91       	ld	r30, X+
    5162:	fc 91       	ld	r31, X
    5164:	04 84       	ldd	r0, Z+12	; 0x0c
    5166:	f5 85       	ldd	r31, Z+13	; 0x0d
    5168:	e0 2d       	mov	r30, r0
    516a:	42 ea       	ldi	r20, 0xA2	; 162
    516c:	59 e2       	ldi	r21, 0x29	; 41
    516e:	be 01       	movw	r22, r28
    5170:	c5 01       	movw	r24, r10
    5172:	19 95       	eicall
    5174:	d5 01       	movw	r26, r10
    5176:	ed 91       	ld	r30, X+
    5178:	fc 91       	ld	r31, X
    517a:	06 84       	ldd	r0, Z+14	; 0x0e
    517c:	f7 85       	ldd	r31, Z+15	; 0x0f
    517e:	e0 2d       	mov	r30, r0
    5180:	4e e2       	ldi	r20, 0x2E	; 46
    5182:	5a e2       	ldi	r21, 0x2A	; 42
    5184:	be 01       	movw	r22, r28
    5186:	c5 01       	movw	r24, r10
    5188:	19 95       	eicall
    518a:	61 14       	cp	r6, r1
    518c:	71 04       	cpc	r7, r1
    518e:	19 f0       	breq	.+6      	; 0x5196 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9a>
    5190:	6b 8e       	std	Y+27, r6	; 0x1b
    5192:	7c 8e       	std	Y+28, r7	; 0x1c
    5194:	02 c0       	rjmp	.+4      	; 0x519a <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    5196:	cb 8f       	std	Y+27, r28	; 0x1b
    5198:	dc 8f       	std	Y+28, r29	; 0x1c
    519a:	8e 86       	std	Y+14, r8	; 0x0e
    519c:	9f 86       	std	Y+15, r9	; 0x0f
    519e:	81 14       	cp	r8, r1
    51a0:	91 04       	cpc	r9, r1
    51a2:	61 f0       	breq	.+24     	; 0x51bc <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc0>
    51a4:	d4 01       	movw	r26, r8
    51a6:	ed 91       	ld	r30, X+
    51a8:	fc 91       	ld	r31, X
    51aa:	02 88       	ldd	r0, Z+18	; 0x12
    51ac:	f3 89       	ldd	r31, Z+19	; 0x13
    51ae:	e0 2d       	mov	r30, r0
    51b0:	21 e0       	ldi	r18, 0x01	; 1
    51b2:	ae 01       	movw	r20, r28
    51b4:	69 ec       	ldi	r22, 0xC9	; 201
    51b6:	79 e2       	ldi	r23, 0x29	; 41
    51b8:	c4 01       	movw	r24, r8
    51ba:	19 95       	eicall
    51bc:	df 91       	pop	r29
    51be:	cf 91       	pop	r28
    51c0:	1f 91       	pop	r17
    51c2:	0f 91       	pop	r16
    51c4:	ff 90       	pop	r15
    51c6:	ef 90       	pop	r14
    51c8:	df 90       	pop	r13
    51ca:	cf 90       	pop	r12
    51cc:	bf 90       	pop	r11
    51ce:	af 90       	pop	r10
    51d0:	9f 90       	pop	r9
    51d2:	8f 90       	pop	r8
    51d4:	7f 90       	pop	r7
    51d6:	6f 90       	pop	r6
    51d8:	08 95       	ret

000051da <_ZN9CMBSenderD1Ev>:
    51da:	2a e0       	ldi	r18, 0x0A	; 10
    51dc:	32 e2       	ldi	r19, 0x22	; 34
    51de:	fc 01       	movw	r30, r24
    51e0:	20 83       	st	Z, r18
    51e2:	31 83       	std	Z+1, r19	; 0x01
    51e4:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_ZN16CMBEventsHandlerD1Ev>
    51e8:	08 95       	ret

000051ea <_ZN9CMBSender13OnReceiveByteEh>:
    51ea:	cf 93       	push	r28
    51ec:	df 93       	push	r29
    51ee:	ec 01       	movw	r28, r24
    51f0:	96 2f       	mov	r25, r22
    51f2:	48 89       	ldd	r20, Y+16	; 0x10
    51f4:	50 e0       	ldi	r21, 0x00	; 0
    51f6:	4b 30       	cpi	r20, 0x0B	; 11
    51f8:	51 05       	cpc	r21, r1
    51fa:	08 f0       	brcs	.+2      	; 0x51fe <_ZN9CMBSender13OnReceiveByteEh+0x14>
    51fc:	a0 c0       	rjmp	.+320    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51fe:	fa 01       	movw	r30, r20
    5200:	88 27       	eor	r24, r24
    5202:	e0 5c       	subi	r30, 0xC0	; 192
    5204:	fe 4f       	sbci	r31, 0xFE	; 254
    5206:	8f 4f       	sbci	r24, 0xFF	; 255
    5208:	0c 94 71 33 	jmp	0x66e2	; 0x66e2 <__tablejump2__>
    520c:	9a 3a       	cpi	r25, 0xAA	; 170
    520e:	19 f4       	brne	.+6      	; 0x5216 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
    5210:	82 e0       	ldi	r24, 0x02	; 2
    5212:	88 8b       	std	Y+16, r24	; 0x10
    5214:	94 c0       	rjmp	.+296    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5216:	81 e0       	ldi	r24, 0x01	; 1
    5218:	88 8b       	std	Y+16, r24	; 0x10
    521a:	91 c0       	rjmp	.+290    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    521c:	9c 3c       	cpi	r25, 0xCC	; 204
    521e:	19 f4       	brne	.+6      	; 0x5226 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
    5220:	83 e0       	ldi	r24, 0x03	; 3
    5222:	88 8b       	std	Y+16, r24	; 0x10
    5224:	8c c0       	rjmp	.+280    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	88 8b       	std	Y+16, r24	; 0x10
    522a:	89 c0       	rjmp	.+274    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    522c:	9e 83       	std	Y+6, r25	; 0x06
    522e:	19 8a       	std	Y+17, r1	; 0x11
    5230:	1e 8a       	std	Y+22, r1	; 0x16
    5232:	1f 8a       	std	Y+23, r1	; 0x17
    5234:	84 e0       	ldi	r24, 0x04	; 4
    5236:	88 8b       	std	Y+16, r24	; 0x10
    5238:	82 c0       	rjmp	.+260    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    523a:	89 89       	ldd	r24, Y+17	; 0x11
    523c:	ea 81       	ldd	r30, Y+2	; 0x02
    523e:	fb 81       	ldd	r31, Y+3	; 0x03
    5240:	e8 0f       	add	r30, r24
    5242:	f1 1d       	adc	r31, r1
    5244:	90 83       	st	Z, r25
    5246:	29 89       	ldd	r18, Y+17	; 0x11
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	4f 81       	ldd	r20, Y+7	; 0x07
    524c:	58 85       	ldd	r21, Y+8	; 0x08
    524e:	42 17       	cp	r20, r18
    5250:	53 07       	cpc	r21, r19
    5252:	18 f4       	brcc	.+6      	; 0x525a <_ZN9CMBSender13OnReceiveByteEh+0x70>
    5254:	89 e0       	ldi	r24, 0x09	; 9
    5256:	88 8b       	std	Y+16, r24	; 0x10
    5258:	72 c0       	rjmp	.+228    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    525a:	2e 89       	ldd	r18, Y+22	; 0x16
    525c:	3f 89       	ldd	r19, Y+23	; 0x17
    525e:	29 27       	eor	r18, r25
    5260:	92 2f       	mov	r25, r18
    5262:	92 95       	swap	r25
    5264:	92 27       	eor	r25, r18
    5266:	09 2e       	mov	r0, r25
    5268:	96 95       	lsr	r25
    526a:	96 95       	lsr	r25
    526c:	90 25       	eor	r25, r0
    526e:	09 2e       	mov	r0, r25
    5270:	96 95       	lsr	r25
    5272:	90 25       	eor	r25, r0
    5274:	97 70       	andi	r25, 0x07	; 7
    5276:	02 2e       	mov	r0, r18
    5278:	23 2f       	mov	r18, r19
    527a:	96 95       	lsr	r25
    527c:	07 94       	ror	r0
    527e:	97 95       	ror	r25
    5280:	30 2d       	mov	r19, r0
    5282:	29 27       	eor	r18, r25
    5284:	06 94       	lsr	r0
    5286:	97 95       	ror	r25
    5288:	30 25       	eor	r19, r0
    528a:	29 27       	eor	r18, r25
    528c:	2e 8b       	std	Y+22, r18	; 0x16
    528e:	3f 8b       	std	Y+23, r19	; 0x17
    5290:	89 89       	ldd	r24, Y+17	; 0x11
    5292:	8f 5f       	subi	r24, 0xFF	; 255
    5294:	89 8b       	std	Y+17, r24	; 0x11
    5296:	49 89       	ldd	r20, Y+17	; 0x11
    5298:	8e 81       	ldd	r24, Y+6	; 0x06
    529a:	48 13       	cpse	r20, r24
    529c:	50 c0       	rjmp	.+160    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    529e:	88 e0       	ldi	r24, 0x08	; 8
    52a0:	88 8b       	std	Y+16, r24	; 0x10
    52a2:	e8 81       	ld	r30, Y
    52a4:	f9 81       	ldd	r31, Y+1	; 0x01
    52a6:	50 e0       	ldi	r21, 0x00	; 0
    52a8:	6a 81       	ldd	r22, Y+2	; 0x02
    52aa:	7b 81       	ldd	r23, Y+3	; 0x03
    52ac:	01 90       	ld	r0, Z+
    52ae:	f0 81       	ld	r31, Z
    52b0:	e0 2d       	mov	r30, r0
    52b2:	ce 01       	movw	r24, r28
    52b4:	19 95       	eicall
    52b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52ba:	00 97       	sbiw	r24, 0x00	; 0
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    52be:	3f c0       	rjmp	.+126    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52c0:	dc 01       	movw	r26, r24
    52c2:	ed 91       	ld	r30, X+
    52c4:	fc 91       	ld	r31, X
    52c6:	4e 81       	ldd	r20, Y+6	; 0x06
    52c8:	50 e0       	ldi	r21, 0x00	; 0
    52ca:	6a 81       	ldd	r22, Y+2	; 0x02
    52cc:	7b 81       	ldd	r23, Y+3	; 0x03
    52ce:	01 90       	ld	r0, Z+
    52d0:	f0 81       	ld	r31, Z
    52d2:	e0 2d       	mov	r30, r0
    52d4:	19 95       	eicall
    52d6:	33 c0       	rjmp	.+102    	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52d8:	69 2f       	mov	r22, r25
    52da:	70 e0       	ldi	r23, 0x00	; 0
    52dc:	6c 8b       	std	Y+20, r22	; 0x14
    52de:	7d 8b       	std	Y+21, r23	; 0x15
    52e0:	86 e0       	ldi	r24, 0x06	; 6
    52e2:	88 8b       	std	Y+16, r24	; 0x10
    52e4:	2c c0       	rjmp	.+88     	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52e6:	2c 89       	ldd	r18, Y+20	; 0x14
    52e8:	3d 89       	ldd	r19, Y+21	; 0x15
    52ea:	a9 01       	movw	r20, r18
    52ec:	59 2b       	or	r21, r25
    52ee:	4c 8b       	std	Y+20, r20	; 0x14
    52f0:	5d 8b       	std	Y+21, r21	; 0x15
    52f2:	2e 89       	ldd	r18, Y+22	; 0x16
    52f4:	3f 89       	ldd	r19, Y+23	; 0x17
    52f6:	42 17       	cp	r20, r18
    52f8:	53 07       	cpc	r21, r19
    52fa:	e9 f4       	brne	.+58     	; 0x5336 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
    52fc:	88 e0       	ldi	r24, 0x08	; 8
    52fe:	88 8b       	std	Y+16, r24	; 0x10
    5300:	e8 81       	ld	r30, Y
    5302:	f9 81       	ldd	r31, Y+1	; 0x01
    5304:	4e 81       	ldd	r20, Y+6	; 0x06
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	6a 81       	ldd	r22, Y+2	; 0x02
    530a:	7b 81       	ldd	r23, Y+3	; 0x03
    530c:	01 90       	ld	r0, Z+
    530e:	f0 81       	ld	r31, Z
    5310:	e0 2d       	mov	r30, r0
    5312:	ce 01       	movw	r24, r28
    5314:	19 95       	eicall
    5316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    531a:	00 97       	sbiw	r24, 0x00	; 0
    531c:	81 f0       	breq	.+32     	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    531e:	dc 01       	movw	r26, r24
    5320:	ed 91       	ld	r30, X+
    5322:	fc 91       	ld	r31, X
    5324:	4e 81       	ldd	r20, Y+6	; 0x06
    5326:	50 e0       	ldi	r21, 0x00	; 0
    5328:	6a 81       	ldd	r22, Y+2	; 0x02
    532a:	7b 81       	ldd	r23, Y+3	; 0x03
    532c:	01 90       	ld	r0, Z+
    532e:	f0 81       	ld	r31, Z
    5330:	e0 2d       	mov	r30, r0
    5332:	19 95       	eicall
    5334:	04 c0       	rjmp	.+8      	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5336:	89 e0       	ldi	r24, 0x09	; 9
    5338:	88 8b       	std	Y+16, r24	; 0x10
    533a:	01 c0       	rjmp	.+2      	; 0x533e <_ZN9CMBSender13OnReceiveByteEh+0x154>
    533c:	1a 8e       	std	Y+26, r1	; 0x1a
    533e:	df 91       	pop	r29
    5340:	cf 91       	pop	r28
    5342:	08 95       	ret

00005344 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    5344:	cf 93       	push	r28
    5346:	df 93       	push	r29
    5348:	ec 01       	movw	r28, r24
    534a:	8c 85       	ldd	r24, Y+12	; 0x0c
    534c:	9d 85       	ldd	r25, Y+13	; 0x0d
    534e:	dc 01       	movw	r26, r24
    5350:	ed 91       	ld	r30, X+
    5352:	fc 91       	ld	r31, X
    5354:	02 80       	ldd	r0, Z+2	; 0x02
    5356:	f3 81       	ldd	r31, Z+3	; 0x03
    5358:	e0 2d       	mov	r30, r0
    535a:	19 95       	eicall
    535c:	68 2f       	mov	r22, r24
    535e:	ce 01       	movw	r24, r28
    5360:	0e 94 f5 28 	call	0x51ea	; 0x51ea <_ZN9CMBSender13OnReceiveByteEh>
    5364:	df 91       	pop	r29
    5366:	cf 91       	pop	r28
    5368:	08 95       	ret

0000536a <_ZN9CMBSender9OnTimeoutEv>:
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	ec 01       	movw	r28, r24
    5370:	8e 85       	ldd	r24, Y+14	; 0x0e
    5372:	9f 85       	ldd	r25, Y+15	; 0x0f
    5374:	dc 01       	movw	r26, r24
    5376:	ed 91       	ld	r30, X+
    5378:	fc 91       	ld	r31, X
    537a:	04 80       	ldd	r0, Z+4	; 0x04
    537c:	f5 81       	ldd	r31, Z+5	; 0x05
    537e:	e0 2d       	mov	r30, r0
    5380:	19 95       	eicall
    5382:	88 89       	ldd	r24, Y+16	; 0x10
    5384:	88 30       	cpi	r24, 0x08	; 8
    5386:	11 f0       	breq	.+4      	; 0x538c <_ZN9CMBSender9OnTimeoutEv+0x22>
    5388:	8a e0       	ldi	r24, 0x0A	; 10
    538a:	88 8b       	std	Y+16, r24	; 0x10
    538c:	df 91       	pop	r29
    538e:	cf 91       	pop	r28
    5390:	08 95       	ret

00005392 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    5392:	0e 94 b5 29 	call	0x536a	; 0x536a <_ZN9CMBSender9OnTimeoutEv>
    5396:	08 95       	ret

00005398 <_ZN9CMBSender19StartMODBUSListenerEv>:
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	fc 01       	movw	r30, r24
    539e:	11 8a       	std	Z+17, r1	; 0x11
    53a0:	16 82       	std	Z+6, r1	; 0x06
    53a2:	14 8a       	std	Z+20, r1	; 0x14
    53a4:	15 8a       	std	Z+21, r1	; 0x15
    53a6:	16 8a       	std	Z+22, r1	; 0x16
    53a8:	17 8a       	std	Z+23, r1	; 0x17
    53aa:	10 8a       	std	Z+16, r1	; 0x10
    53ac:	86 85       	ldd	r24, Z+14	; 0x0e
    53ae:	97 85       	ldd	r25, Z+15	; 0x0f
    53b0:	ec 01       	movw	r28, r24
    53b2:	a8 81       	ld	r26, Y
    53b4:	b9 81       	ldd	r27, Y+1	; 0x01
    53b6:	62 89       	ldd	r22, Z+18	; 0x12
    53b8:	73 89       	ldd	r23, Z+19	; 0x13
    53ba:	12 96       	adiw	r26, 0x02	; 2
    53bc:	ed 91       	ld	r30, X+
    53be:	fc 91       	ld	r31, X
    53c0:	13 97       	sbiw	r26, 0x03	; 3
    53c2:	19 95       	eicall
    53c4:	df 91       	pop	r29
    53c6:	cf 91       	pop	r28
    53c8:	08 95       	ret

000053ca <_ZN9CMBSender14OnTransmitByteEv>:
    53ca:	cf 93       	push	r28
    53cc:	df 93       	push	r29
    53ce:	ec 01       	movw	r28, r24
    53d0:	88 8d       	ldd	r24, Y+24	; 0x18
    53d2:	84 30       	cpi	r24, 0x04	; 4
    53d4:	38 f4       	brcc	.+14     	; 0x53e4 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    53d6:	82 30       	cpi	r24, 0x02	; 2
    53d8:	b8 f5       	brcc	.+110    	; 0x5448 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    53da:	88 23       	and	r24, r24
    53dc:	31 f0       	breq	.+12     	; 0x53ea <_ZN9CMBSender14OnTransmitByteEv+0x20>
    53de:	81 30       	cpi	r24, 0x01	; 1
    53e0:	d1 f0       	breq	.+52     	; 0x5416 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    53e2:	39 c0       	rjmp	.+114    	; 0x5456 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    53e4:	85 30       	cpi	r24, 0x05	; 5
    53e6:	81 f1       	breq	.+96     	; 0x5448 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    53e8:	36 c0       	rjmp	.+108    	; 0x5456 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	88 8f       	std	Y+24, r24	; 0x18
    53ee:	19 8e       	std	Y+25, r1	; 0x19
    53f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    53f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    53f4:	29 8d       	ldd	r18, Y+25	; 0x19
    53f6:	dc 01       	movw	r26, r24
    53f8:	ed 91       	ld	r30, X+
    53fa:	fc 91       	ld	r31, X
    53fc:	ac 81       	ldd	r26, Y+4	; 0x04
    53fe:	bd 81       	ldd	r27, Y+5	; 0x05
    5400:	a2 0f       	add	r26, r18
    5402:	b1 1d       	adc	r27, r1
    5404:	04 80       	ldd	r0, Z+4	; 0x04
    5406:	f5 81       	ldd	r31, Z+5	; 0x05
    5408:	e0 2d       	mov	r30, r0
    540a:	6c 91       	ld	r22, X
    540c:	19 95       	eicall
    540e:	89 8d       	ldd	r24, Y+25	; 0x19
    5410:	8f 5f       	subi	r24, 0xFF	; 255
    5412:	89 8f       	std	Y+25, r24	; 0x19
    5414:	20 c0       	rjmp	.+64     	; 0x5456 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5416:	8c 85       	ldd	r24, Y+12	; 0x0c
    5418:	9d 85       	ldd	r25, Y+13	; 0x0d
    541a:	29 8d       	ldd	r18, Y+25	; 0x19
    541c:	dc 01       	movw	r26, r24
    541e:	ed 91       	ld	r30, X+
    5420:	fc 91       	ld	r31, X
    5422:	ac 81       	ldd	r26, Y+4	; 0x04
    5424:	bd 81       	ldd	r27, Y+5	; 0x05
    5426:	a2 0f       	add	r26, r18
    5428:	b1 1d       	adc	r27, r1
    542a:	04 80       	ldd	r0, Z+4	; 0x04
    542c:	f5 81       	ldd	r31, Z+5	; 0x05
    542e:	e0 2d       	mov	r30, r0
    5430:	6c 91       	ld	r22, X
    5432:	19 95       	eicall
    5434:	89 8d       	ldd	r24, Y+25	; 0x19
    5436:	8f 5f       	subi	r24, 0xFF	; 255
    5438:	89 8f       	std	Y+25, r24	; 0x19
    543a:	99 8d       	ldd	r25, Y+25	; 0x19
    543c:	89 85       	ldd	r24, Y+9	; 0x09
    543e:	98 13       	cpse	r25, r24
    5440:	0a c0       	rjmp	.+20     	; 0x5456 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5442:	83 e0       	ldi	r24, 0x03	; 3
    5444:	88 8f       	std	Y+24, r24	; 0x18
    5446:	07 c0       	rjmp	.+14     	; 0x5456 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5448:	8a 8d       	ldd	r24, Y+26	; 0x1a
    544a:	88 23       	and	r24, r24
    544c:	19 f0       	breq	.+6      	; 0x5454 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    544e:	ce 01       	movw	r24, r28
    5450:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN9CMBSender19StartMODBUSListenerEv>
    5454:	1a 8e       	std	Y+26, r1	; 0x1a
    5456:	df 91       	pop	r29
    5458:	cf 91       	pop	r28
    545a:	08 95       	ret

0000545c <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    545c:	0e 94 e5 29 	call	0x53ca	; 0x53ca <_ZN9CMBSender14OnTransmitByteEv>
    5460:	08 95       	ret

00005462 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    5462:	fc 01       	movw	r30, r24
    5464:	06 c0       	rjmp	.+12     	; 0x5472 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    5466:	80 89       	ldd	r24, Z+16	; 0x10
    5468:	89 30       	cpi	r24, 0x09	; 9
    546a:	41 f0       	breq	.+16     	; 0x547c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    546c:	80 89       	ldd	r24, Z+16	; 0x10
    546e:	8a 30       	cpi	r24, 0x0A	; 10
    5470:	39 f0       	breq	.+14     	; 0x5480 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    5472:	80 89       	ldd	r24, Z+16	; 0x10
    5474:	88 30       	cpi	r24, 0x08	; 8
    5476:	b9 f7       	brne	.-18     	; 0x5466 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	08 95       	ret
    547c:	82 e0       	ldi	r24, 0x02	; 2
    547e:	08 95       	ret
    5480:	83 e0       	ldi	r24, 0x03	; 3
    5482:	08 95       	ret

00005484 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	ec 01       	movw	r28, r24
    548a:	19 8e       	std	Y+25, r1	; 0x19
    548c:	18 8e       	std	Y+24, r1	; 0x18
    548e:	0e 94 e5 29 	call	0x53ca	; 0x53ca <_ZN9CMBSender14OnTransmitByteEv>
    5492:	8e 85       	ldd	r24, Y+14	; 0x0e
    5494:	9f 85       	ldd	r25, Y+15	; 0x0f
    5496:	dc 01       	movw	r26, r24
    5498:	ed 91       	ld	r30, X+
    549a:	fc 91       	ld	r31, X
    549c:	6a 89       	ldd	r22, Y+18	; 0x12
    549e:	7b 89       	ldd	r23, Y+19	; 0x13
    54a0:	02 80       	ldd	r0, Z+2	; 0x02
    54a2:	f3 81       	ldd	r31, Z+3	; 0x03
    54a4:	e0 2d       	mov	r30, r0
    54a6:	19 95       	eicall
    54a8:	df 91       	pop	r29
    54aa:	cf 91       	pop	r28
    54ac:	08 95       	ret

000054ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    54ae:	cf 93       	push	r28
    54b0:	df 93       	push	r29
    54b2:	ec 01       	movw	r28, r24
    54b4:	e8 81       	ld	r30, Y
    54b6:	f9 81       	ldd	r31, Y+1	; 0x01
    54b8:	02 84       	ldd	r0, Z+10	; 0x0a
    54ba:	f3 85       	ldd	r31, Z+11	; 0x0b
    54bc:	e0 2d       	mov	r30, r0
    54be:	19 95       	eicall
    54c0:	ce 01       	movw	r24, r28
    54c2:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    54c6:	df 91       	pop	r29
    54c8:	cf 91       	pop	r28
    54ca:	08 95       	ret

000054cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    54cc:	cf 93       	push	r28
    54ce:	df 93       	push	r29
    54d0:	ec 01       	movw	r28, r24
    54d2:	e8 81       	ld	r30, Y
    54d4:	f9 81       	ldd	r31, Y+1	; 0x01
    54d6:	06 84       	ldd	r0, Z+14	; 0x0e
    54d8:	f7 85       	ldd	r31, Z+15	; 0x0f
    54da:	e0 2d       	mov	r30, r0
    54dc:	19 95       	eicall
    54de:	ce 01       	movw	r24, r28
    54e0:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    54e4:	df 91       	pop	r29
    54e6:	cf 91       	pop	r28
    54e8:	08 95       	ret

000054ea <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    54ea:	cf 93       	push	r28
    54ec:	df 93       	push	r29
    54ee:	ec 01       	movw	r28, r24
    54f0:	e8 81       	ld	r30, Y
    54f2:	f9 81       	ldd	r31, Y+1	; 0x01
    54f4:	04 84       	ldd	r0, Z+12	; 0x0c
    54f6:	f5 85       	ldd	r31, Z+13	; 0x0d
    54f8:	e0 2d       	mov	r30, r0
    54fa:	19 95       	eicall
    54fc:	ce 01       	movw	r24, r28
    54fe:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	08 95       	ret

00005508 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	ec 01       	movw	r28, r24
    550e:	e8 81       	ld	r30, Y
    5510:	f9 81       	ldd	r31, Y+1	; 0x01
    5512:	50 e0       	ldi	r21, 0x00	; 0
    5514:	00 88       	ldd	r0, Z+16	; 0x10
    5516:	f1 89       	ldd	r31, Z+17	; 0x11
    5518:	e0 2d       	mov	r30, r0
    551a:	19 95       	eicall
    551c:	ce 01       	movw	r24, r28
    551e:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	08 95       	ret

00005528 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    5528:	fc 01       	movw	r30, r24
    552a:	06 c0       	rjmp	.+12     	; 0x5538 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    552c:	80 8d       	ldd	r24, Z+24	; 0x18
    552e:	84 30       	cpi	r24, 0x04	; 4
    5530:	41 f0       	breq	.+16     	; 0x5542 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    5532:	80 8d       	ldd	r24, Z+24	; 0x18
    5534:	85 30       	cpi	r24, 0x05	; 5
    5536:	39 f0       	breq	.+14     	; 0x5546 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    5538:	80 8d       	ldd	r24, Z+24	; 0x18
    553a:	83 30       	cpi	r24, 0x03	; 3
    553c:	b9 f7       	brne	.-18     	; 0x552c <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	08 95       	ret
    5542:	82 e0       	ldi	r24, 0x02	; 2
    5544:	08 95       	ret
    5546:	83 e0       	ldi	r24, 0x03	; 3
    5548:	08 95       	ret

0000554a <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    554a:	21 e0       	ldi	r18, 0x01	; 1
    554c:	fc 01       	movw	r30, r24
    554e:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    5550:	0e 94 75 2a 	call	0x54ea	; 0x54ea <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    5554:	08 95       	ret

00005556 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    5556:	21 e0       	ldi	r18, 0x01	; 1
    5558:	fc 01       	movw	r30, r24
    555a:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    555c:	0e 94 84 2a 	call	0x5508	; 0x5508 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    5560:	08 95       	ret

00005562 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    5562:	0f 93       	push	r16
    5564:	1f 93       	push	r17
    5566:	cf 93       	push	r28
    5568:	df 93       	push	r29
    556a:	8c 01       	movw	r16, r24
    556c:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    556e:	98 81       	ld	r25, Y
    5570:	91 38       	cpi	r25, 0x81	; 129
    5572:	69 f4       	brne	.+26     	; 0x558e <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    5574:	d8 01       	movw	r26, r16
    5576:	ed 91       	ld	r30, X+
    5578:	fc 91       	ld	r31, X
    557a:	04 80       	ldd	r0, Z+4	; 0x04
    557c:	f5 81       	ldd	r31, Z+5	; 0x05
    557e:	e0 2d       	mov	r30, r0
    5580:	2a 81       	ldd	r18, Y+2	; 0x02
    5582:	ab 01       	movw	r20, r22
    5584:	4d 5f       	subi	r20, 0xFD	; 253
    5586:	5f 4f       	sbci	r21, 0xFF	; 255
    5588:	69 81       	ldd	r22, Y+1	; 0x01
    558a:	c8 01       	movw	r24, r16
    558c:	19 95       	eicall
	}
	if (data[0] == 0x83)
    558e:	98 81       	ld	r25, Y
    5590:	93 38       	cpi	r25, 0x83	; 131
    5592:	99 f4       	brne	.+38     	; 0x55ba <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5594:	d8 01       	movw	r26, r16
    5596:	ed 91       	ld	r30, X+
    5598:	fc 91       	ld	r31, X
    559a:	2b 81       	ldd	r18, Y+3	; 0x03
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	ae 01       	movw	r20, r28
    55a0:	4c 5f       	subi	r20, 0xFC	; 252
    55a2:	5f 4f       	sbci	r21, 0xFF	; 255
    55a4:	69 81       	ldd	r22, Y+1	; 0x01
    55a6:	70 e0       	ldi	r23, 0x00	; 0
    55a8:	76 2f       	mov	r23, r22
    55aa:	66 27       	eor	r22, r22
    55ac:	8a 81       	ldd	r24, Y+2	; 0x02
    55ae:	68 2b       	or	r22, r24
    55b0:	02 80       	ldd	r0, Z+2	; 0x02
    55b2:	f3 81       	ldd	r31, Z+3	; 0x03
    55b4:	e0 2d       	mov	r30, r0
    55b6:	c8 01       	movw	r24, r16
    55b8:	19 95       	eicall
	}
}
    55ba:	df 91       	pop	r29
    55bc:	cf 91       	pop	r28
    55be:	1f 91       	pop	r17
    55c0:	0f 91       	pop	r16
    55c2:	08 95       	ret

000055c4 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    55c4:	0e 94 b1 2a 	call	0x5562	; 0x5562 <_ZN9CMBSender18ProcessTransactionEPhj>
    55c8:	08 95       	ret

000055ca <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    55ca:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    55cc:	e0 e6       	ldi	r30, 0x60	; 96
    55ce:	f6 e0       	ldi	r31, 0x06	; 6
    55d0:	88 e0       	ldi	r24, 0x08	; 8
    55d2:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    55d4:	84 e0       	ldi	r24, 0x04	; 4
    55d6:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    55d8:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    55da:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    55dc:	e0 ea       	ldi	r30, 0xA0	; 160
    55de:	f9 e0       	ldi	r31, 0x09	; 9
    55e0:	84 e1       	ldi	r24, 0x14	; 20
    55e2:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    55e4:	88 e1       	ldi	r24, 0x18	; 24
    55e6:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    55e8:	84 81       	ldd	r24, Z+4	; 0x04
    55ea:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    55ec:	41 30       	cpi	r20, 0x01	; 1
    55ee:	19 f0       	breq	.+6      	; 0x55f6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    55f0:	42 30       	cpi	r20, 0x02	; 2
    55f2:	19 f0       	breq	.+6      	; 0x55fa <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    55f4:	04 c0       	rjmp	.+8      	; 0x55fe <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    55f6:	80 e2       	ldi	r24, 0x20	; 32
    55f8:	03 c0       	rjmp	.+6      	; 0x5600 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    55fa:	80 e3       	ldi	r24, 0x30	; 48
		break;
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    55fe:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    5600:	22 23       	and	r18, r18
    5602:	19 f0       	breq	.+6      	; 0x560a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    5604:	21 30       	cpi	r18, 0x01	; 1
    5606:	19 f0       	breq	.+6      	; 0x560e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    5608:	03 c0       	rjmp	.+6      	; 0x5610 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    560a:	87 7f       	andi	r24, 0xF7	; 247
		break;
    560c:	01 c0       	rjmp	.+2      	; 0x5610 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    560e:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    5610:	01 11       	cpse	r16, r1
    5612:	02 c0       	rjmp	.+4      	; 0x5618 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    5614:	93 e4       	ldi	r25, 0x43	; 67
    5616:	01 c0       	rjmp	.+2      	; 0x561a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    5618:	93 e0       	ldi	r25, 0x03	; 3
    561a:	89 2b       	or	r24, r25
    561c:	e0 ea       	ldi	r30, 0xA0	; 160
    561e:	f9 e0       	ldi	r31, 0x09	; 9
    5620:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    5622:	70 e0       	ldi	r23, 0x00	; 0
    5624:	db 01       	movw	r26, r22
    5626:	aa 58       	subi	r26, 0x8A	; 138
    5628:	be 4d       	sbci	r27, 0xDE	; 222
    562a:	8c 91       	ld	r24, X
    562c:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    562e:	db 01       	movw	r26, r22
    5630:	aa 5a       	subi	r26, 0xAA	; 170
    5632:	be 4d       	sbci	r27, 0xDE	; 222
    5634:	8c 91       	ld	r24, X
    5636:	82 95       	swap	r24
    5638:	80 7f       	andi	r24, 0xF0	; 240
    563a:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    563c:	0f 91       	pop	r16
    563e:	08 95       	ret

00005640 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    5640:	80 91 a0 09 	lds	r24, 0x09A0
}
    5644:	08 95       	ret

00005646 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    5646:	60 93 a0 09 	sts	0x09A0, r22
    564a:	08 95       	ret

0000564c <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    564c:	80 91 a1 09 	lds	r24, 0x09A1
    5650:	86 fb       	bst	r24, 6
    5652:	88 27       	eor	r24, r24
    5654:	80 f9       	bld	r24, 0
}
    5656:	91 e0       	ldi	r25, 0x01	; 1
    5658:	89 27       	eor	r24, r25
    565a:	08 95       	ret

0000565c <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    565c:	80 91 a1 09 	lds	r24, 0x09A1
    5660:	80 95       	com	r24
}
    5662:	88 1f       	adc	r24, r24
    5664:	88 27       	eor	r24, r24
    5666:	88 1f       	adc	r24, r24
    5668:	08 95       	ret

0000566a <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    566a:	80 91 a1 09 	lds	r24, 0x09A1
    566e:	85 fb       	bst	r24, 5
    5670:	88 27       	eor	r24, r24
    5672:	80 f9       	bld	r24, 0
}
    5674:	91 e0       	ldi	r25, 0x01	; 1
    5676:	89 27       	eor	r24, r25
    5678:	08 95       	ret

0000567a <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    567a:	60 93 90 24 	sts	0x2490, r22
    567e:	70 93 91 24 	sts	0x2491, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    5682:	40 93 9a 23 	sts	0x239A, r20
    5686:	50 93 9b 23 	sts	0x239B, r21
    568a:	08 95       	ret

0000568c <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    568c:	60 93 94 24 	sts	0x2494, r22
    5690:	70 93 95 24 	sts	0x2495, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    5694:	40 93 9e 23 	sts	0x239E, r20
    5698:	50 93 9f 23 	sts	0x239F, r21
    569c:	08 95       	ret

0000569e <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    569e:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    56a0:	8b e6       	ldi	r24, 0x6B	; 107
    56a2:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    56a4:	80 ea       	ldi	r24, 0xA0	; 160
    56a6:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    56a8:	89 e0       	ldi	r24, 0x09	; 9
    56aa:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    56ac:	12 86       	std	Z+10, r1	; 0x0a
    56ae:	08 95       	ret

000056b0 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    56b0:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    56b2:	8c e6       	ldi	r24, 0x6C	; 108
    56b4:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    56b6:	80 ea       	ldi	r24, 0xA0	; 160
    56b8:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    56ba:	89 e0       	ldi	r24, 0x09	; 9
    56bc:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    56be:	16 86       	std	Z+14, r1	; 0x0e
    56c0:	08 95       	ret

000056c2 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	ec 01       	movw	r28, r24
    56c8:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN6CUSARTC1Ev>
    56cc:	80 e2       	ldi	r24, 0x20	; 32
    56ce:	92 e2       	ldi	r25, 0x22	; 34
    56d0:	88 83       	st	Y, r24
    56d2:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    56d4:	df 91       	pop	r29
    56d6:	cf 91       	pop	r28
    56d8:	08 95       	ret

000056da <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    56da:	20 e2       	ldi	r18, 0x20	; 32
    56dc:	32 e2       	ldi	r19, 0x22	; 34
    56de:	fc 01       	movw	r30, r24
    56e0:	20 83       	st	Z, r18
    56e2:	31 83       	std	Z+1, r19	; 0x01
    56e4:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN6CUSARTD1Ev>
    56e8:	08 95       	ret

000056ea <_ZN8CDS18B20C1Ev>:
#define F_CPU	32000000

#include <util/delay.h>

// default constructor
CDS18B20::CDS18B20()
    56ea:	08 95       	ret

000056ec <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    56ec:	08 95       	ret

000056ee <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    56ee:	e0 e6       	ldi	r30, 0x60	; 96
    56f0:	f6 e0       	ldi	r31, 0x06	; 6
    56f2:	80 e8       	ldi	r24, 0x80	; 128
    56f4:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56f6:	a7 e2       	ldi	r26, 0x27	; 39
    56f8:	bf e0       	ldi	r27, 0x0F	; 15
    56fa:	11 97       	sbiw	r26, 0x01	; 1
    56fc:	f1 f7       	brne	.-4      	; 0x56fa <_ZN8CDS18B207w1_findEv+0xc>
    56fe:	00 c0       	rjmp	.+0      	; 0x5700 <_ZN8CDS18B207w1_findEv+0x12>
    5700:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    5702:	82 83       	std	Z+2, r24	; 0x02
    5704:	87 e0       	ldi	r24, 0x07	; 7
    5706:	92 e0       	ldi	r25, 0x02	; 2
    5708:	01 97       	sbiw	r24, 0x01	; 1
    570a:	f1 f7       	brne	.-4      	; 0x5708 <_ZN8CDS18B207w1_findEv+0x1a>
    570c:	00 c0       	rjmp	.+0      	; 0x570e <_ZN8CDS18B207w1_findEv+0x20>
    570e:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    5710:	80 85       	ldd	r24, Z+8	; 0x08
    5712:	af e1       	ldi	r26, 0x1F	; 31
    5714:	bd e0       	ldi	r27, 0x0D	; 13
    5716:	11 97       	sbiw	r26, 0x01	; 1
    5718:	f1 f7       	brne	.-4      	; 0x5716 <_ZN8CDS18B207w1_findEv+0x28>
    571a:	00 c0       	rjmp	.+0      	; 0x571c <_ZN8CDS18B207w1_findEv+0x2e>
    571c:	00 00       	nop
    571e:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    5720:	88 1f       	adc	r24, r24
    5722:	88 27       	eor	r24, r24
    5724:	88 1f       	adc	r24, r24
    5726:	08 95       	ret

00005728 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    5728:	cf 93       	push	r28
    572a:	df 93       	push	r29
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    5730:	c1 e0       	ldi	r28, 0x01	; 1
    5732:	d0 e0       	ldi	r29, 0x00	; 0
    5734:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    5736:	e0 e6       	ldi	r30, 0x60	; 96
    5738:	f6 e0       	ldi	r31, 0x06	; 6
    573a:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    573c:	9e 01       	movw	r18, r28
    573e:	08 2e       	mov	r0, r24
    5740:	02 c0       	rjmp	.+4      	; 0x5746 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    5742:	22 0f       	add	r18, r18
    5744:	33 1f       	adc	r19, r19
    5746:	0a 94       	dec	r0
    5748:	e2 f7       	brpl	.-8      	; 0x5742 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    574a:	d9 01       	movw	r26, r18
    574c:	a6 23       	and	r26, r22
    574e:	b7 23       	and	r27, r23
    5750:	2a 17       	cp	r18, r26
    5752:	3b 07       	cpc	r19, r27
    5754:	69 f4       	brne	.+26     	; 0x5770 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    5756:	41 83       	std	Z+1, r20	; 0x01
    5758:	25 e1       	ldi	r18, 0x15	; 21
    575a:	2a 95       	dec	r18
    575c:	f1 f7       	brne	.-4      	; 0x575a <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    575e:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    5760:	42 83       	std	Z+2, r20	; 0x02
    5762:	a7 e0       	ldi	r26, 0x07	; 7
    5764:	b2 e0       	ldi	r27, 0x02	; 2
    5766:	11 97       	sbiw	r26, 0x01	; 1
    5768:	f1 f7       	brne	.-4      	; 0x5766 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    576a:	00 c0       	rjmp	.+0      	; 0x576c <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    576c:	00 00       	nop
    576e:	0c c0       	rjmp	.+24     	; 0x5788 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    5770:	41 83       	std	Z+1, r20	; 0x01
    5772:	a7 e0       	ldi	r26, 0x07	; 7
    5774:	b2 e0       	ldi	r27, 0x02	; 2
    5776:	11 97       	sbiw	r26, 0x01	; 1
    5778:	f1 f7       	brne	.-4      	; 0x5776 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    577a:	00 c0       	rjmp	.+0      	; 0x577c <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    577c:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    577e:	42 83       	std	Z+2, r20	; 0x02
    5780:	b5 e3       	ldi	r27, 0x35	; 53
    5782:	ba 95       	dec	r27
    5784:	f1 f7       	brne	.-4      	; 0x5782 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    5786:	00 00       	nop
    5788:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    578a:	88 30       	cpi	r24, 0x08	; 8
    578c:	91 05       	cpc	r25, r1
    578e:	b1 f6       	brne	.-84     	; 0x573c <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    5790:	df 91       	pop	r29
    5792:	cf 91       	pop	r28
    5794:	08 95       	ret

00005796 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    579a:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    579c:	e0 e6       	ldi	r30, 0x60	; 96
    579e:	f6 e0       	ldi	r31, 0x06	; 6
    57a0:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    57a2:	61 e0       	ldi	r22, 0x01	; 1
    57a4:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    57a6:	91 83       	std	Z+1, r25	; 0x01
    57a8:	45 e1       	ldi	r20, 0x15	; 21
    57aa:	4a 95       	dec	r20
    57ac:	f1 f7       	brne	.-4      	; 0x57aa <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    57ae:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    57b0:	92 83       	std	Z+2, r25	; 0x02
    57b2:	aa e6       	ldi	r26, 0x6A	; 106
    57b4:	aa 95       	dec	r26
    57b6:	f1 f7       	brne	.-4      	; 0x57b4 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    57b8:	00 c0       	rjmp	.+0      	; 0x57ba <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    57ba:	40 85       	ldd	r20, Z+8	; 0x08
    57bc:	44 23       	and	r20, r20
    57be:	54 f0       	brlt	.+20     	; 0x57d4 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    57c0:	ab 01       	movw	r20, r22
    57c2:	02 2e       	mov	r0, r18
    57c4:	02 c0       	rjmp	.+4      	; 0x57ca <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    57c6:	44 0f       	add	r20, r20
    57c8:	55 1f       	adc	r21, r21
    57ca:	0a 94       	dec	r0
    57cc:	e2 f7       	brpl	.-8      	; 0x57c6 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    57ce:	40 95       	com	r20
    57d0:	84 23       	and	r24, r20
    57d2:	08 c0       	rjmp	.+16     	; 0x57e4 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    57d4:	ab 01       	movw	r20, r22
    57d6:	02 2e       	mov	r0, r18
    57d8:	02 c0       	rjmp	.+4      	; 0x57de <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    57da:	44 0f       	add	r20, r20
    57dc:	55 1f       	adc	r21, r21
    57de:	0a 94       	dec	r0
    57e0:	e2 f7       	brpl	.-8      	; 0x57da <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    57e2:	84 2b       	or	r24, r20
    57e4:	af e8       	ldi	r26, 0x8F	; 143
    57e6:	b1 e0       	ldi	r27, 0x01	; 1
    57e8:	11 97       	sbiw	r26, 0x01	; 1
    57ea:	f1 f7       	brne	.-4      	; 0x57e8 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    57ec:	00 c0       	rjmp	.+0      	; 0x57ee <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    57ee:	00 00       	nop
    57f0:	2f 5f       	subi	r18, 0xFF	; 255
    57f2:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    57f4:	28 30       	cpi	r18, 0x08	; 8
    57f6:	31 05       	cpc	r19, r1
    57f8:	b1 f6       	brne	.-84     	; 0x57a6 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    57fa:	08 95       	ret

000057fc <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    57fc:	1f 93       	push	r17
    57fe:	cf 93       	push	r28
    5800:	df 93       	push	r29
    5802:	ec 01       	movw	r28, r24
	unsigned char data[2];
	int temp = 0;
	
	if (req)
    5804:	8a 81       	ldd	r24, Y+2	; 0x02
    5806:	88 23       	and	r24, r24
    5808:	91 f0       	breq	.+36     	; 0x582e <_ZN8CDS18B2010temp_18b20Ev+0x32>
	{
		if(w1_find())
    580a:	ce 01       	movw	r24, r28
    580c:	0e 94 77 2b 	call	0x56ee	; 0x56ee <_ZN8CDS18B207w1_findEv>
    5810:	88 23       	and	r24, r24
    5812:	59 f0       	breq	.+22     	; 0x582a <_ZN8CDS18B2010temp_18b20Ev+0x2e>
		{
			w1_sendcmd(0xcc);	//skip ROM
    5814:	6c ec       	ldi	r22, 0xCC	; 204
    5816:	ce 01       	movw	r24, r28
    5818:	0e 94 94 2b 	call	0x5728	; 0x5728 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    581c:	64 e4       	ldi	r22, 0x44	; 68
    581e:	ce 01       	movw	r24, r28
    5820:	0e 94 94 2b 	call	0x5728	; 0x5728 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    5824:	81 e0       	ldi	r24, 0x01	; 1
    5826:	8b 83       	std	Y+3, r24	; 0x03
    5828:	2a c0       	rjmp	.+84     	; 0x587e <_ZN8CDS18B2010temp_18b20Ev+0x82>
		}
		else
			find = false;
    582a:	1b 82       	std	Y+3, r1	; 0x03
    582c:	28 c0       	rjmp	.+80     	; 0x587e <_ZN8CDS18B2010temp_18b20Ev+0x82>
	}
	else
	{
		if (find)
    582e:	8b 81       	ldd	r24, Y+3	; 0x03
    5830:	88 23       	and	r24, r24
    5832:	29 f1       	breq	.+74     	; 0x587e <_ZN8CDS18B2010temp_18b20Ev+0x82>
		{
			w1_find();
    5834:	ce 01       	movw	r24, r28
    5836:	0e 94 77 2b 	call	0x56ee	; 0x56ee <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    583a:	6c ec       	ldi	r22, 0xCC	; 204
    583c:	ce 01       	movw	r24, r28
    583e:	0e 94 94 2b 	call	0x5728	; 0x5728 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    5842:	6e eb       	ldi	r22, 0xBE	; 190
    5844:	ce 01       	movw	r24, r28
    5846:	0e 94 94 2b 	call	0x5728	; 0x5728 <_ZN8CDS18B2010w1_sendcmdEh>
			data[0] = w1_receive_byte();
    584a:	ce 01       	movw	r24, r28
    584c:	0e 94 cb 2b 	call	0x5796	; 0x5796 <_ZN8CDS18B2015w1_receive_byteEv>
    5850:	18 2f       	mov	r17, r24
			data[1] = w1_receive_byte();
    5852:	ce 01       	movw	r24, r28
    5854:	0e 94 cb 2b 	call	0x5796	; 0x5796 <_ZN8CDS18B2015w1_receive_byteEv>
			
			temp = data[1];
			temp = temp<<8;
    5858:	61 2f       	mov	r22, r17
    585a:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    585c:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    585e:	07 2e       	mov	r0, r23
    5860:	00 0c       	add	r0, r0
    5862:	88 0b       	sbc	r24, r24
    5864:	99 0b       	sbc	r25, r25
    5866:	0e 94 ff 31 	call	0x63fe	; 0x63fe <__floatsisf>
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	40 e2       	ldi	r20, 0x20	; 32
    5870:	5f e3       	ldi	r21, 0x3F	; 63
    5872:	0e 94 63 32 	call	0x64c6	; 0x64c6 <__mulsf3>
    5876:	0e 94 c7 31 	call	0x638e	; 0x638e <__fixsfsi>
    587a:	68 83       	st	Y, r22
    587c:	79 83       	std	Y+1, r23	; 0x01
			
			temperature = temp;
		}
	}
	
	req = !req;
    587e:	9a 81       	ldd	r25, Y+2	; 0x02
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	89 27       	eor	r24, r25
    5884:	8a 83       	std	Y+2, r24	; 0x02
	
	return temperature;
}
    5886:	88 81       	ld	r24, Y
    5888:	99 81       	ldd	r25, Y+1	; 0x01
    588a:	df 91       	pop	r29
    588c:	cf 91       	pop	r28
    588e:	1f 91       	pop	r17
    5890:	08 95       	ret

00005892 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    5892:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    5894:	a0 e6       	ldi	r26, 0x60	; 96
    5896:	b6 e0       	ldi	r27, 0x06	; 6
    5898:	80 e8       	ldi	r24, 0x80	; 128
    589a:	16 96       	adiw	r26, 0x06	; 6
    589c:	8c 93       	st	X, r24
    589e:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    58a0:	57 96       	adiw	r26, 0x17	; 23
    58a2:	1c 92       	st	X, r1
	
	temperature = 0;
    58a4:	10 82       	st	Z, r1
    58a6:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    58a8:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	82 83       	std	Z+2, r24	; 0x02
    58ae:	08 95       	ret

000058b0 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    58b0:	08 95       	ret

000058b2 <_ZN11CLaserBoardD1Ev>:
    58b2:	08 95       	ret

000058b4 <_ZN11CLaserBoard12InitializeIOEv>:
    58b4:	cf 93       	push	r28
    58b6:	df 93       	push	r29
    58b8:	ec 01       	movw	r28, r24
    58ba:	e0 e4       	ldi	r30, 0x40	; 64
    58bc:	f6 e0       	ldi	r31, 0x06	; 6
    58be:	11 82       	std	Z+1, r1	; 0x01
    58c0:	98 ea       	ldi	r25, 0xA8	; 168
    58c2:	90 8b       	std	Z+16, r25	; 0x10
    58c4:	91 8b       	std	Z+17, r25	; 0x11
    58c6:	92 8b       	std	Z+18, r25	; 0x12
    58c8:	93 8b       	std	Z+19, r25	; 0x13
    58ca:	94 8b       	std	Z+20, r25	; 0x14
    58cc:	95 8b       	std	Z+21, r25	; 0x15
    58ce:	96 8b       	std	Z+22, r25	; 0x16
    58d0:	97 8b       	std	Z+23, r25	; 0x17
    58d2:	8f ef       	ldi	r24, 0xFF	; 255
    58d4:	84 83       	std	Z+4, r24	; 0x04
    58d6:	a0 e8       	ldi	r26, 0x80	; 128
    58d8:	b6 e0       	ldi	r27, 0x06	; 6
    58da:	98 e0       	ldi	r25, 0x08	; 8
    58dc:	11 96       	adiw	r26, 0x01	; 1
    58de:	9c 93       	st	X, r25
    58e0:	11 97       	sbiw	r26, 0x01	; 1
    58e2:	53 96       	adiw	r26, 0x13	; 19
    58e4:	1c 92       	st	X, r1
    58e6:	53 97       	sbiw	r26, 0x13	; 19
    58e8:	14 96       	adiw	r26, 0x04	; 4
    58ea:	1c 92       	st	X, r1
    58ec:	14 97       	sbiw	r26, 0x04	; 4
    58ee:	e0 ea       	ldi	r30, 0xA0	; 160
    58f0:	f6 e0       	ldi	r31, 0x06	; 6
    58f2:	90 ec       	ldi	r25, 0xC0	; 192
    58f4:	90 8b       	std	Z+16, r25	; 0x10
    58f6:	20 e8       	ldi	r18, 0x80	; 128
    58f8:	21 8b       	std	Z+17, r18	; 0x11
    58fa:	22 8b       	std	Z+18, r18	; 0x12
    58fc:	23 8b       	std	Z+19, r18	; 0x13
    58fe:	94 8b       	std	Z+20, r25	; 0x14
    5900:	95 8b       	std	Z+21, r25	; 0x15
    5902:	96 8b       	std	Z+22, r25	; 0x16
    5904:	97 8b       	std	Z+23, r25	; 0x17
    5906:	14 82       	std	Z+4, r1	; 0x04
    5908:	81 83       	std	Z+1, r24	; 0x01
    590a:	e0 e6       	ldi	r30, 0x60	; 96
    590c:	f6 e0       	ldi	r31, 0x06	; 6
    590e:	81 e1       	ldi	r24, 0x11	; 17
    5910:	81 83       	std	Z+1, r24	; 0x01
    5912:	90 8b       	std	Z+16, r25	; 0x10
    5914:	94 8b       	std	Z+20, r25	; 0x14
    5916:	15 8a       	std	Z+21, r1	; 0x15
    5918:	14 82       	std	Z+4, r1	; 0x04
    591a:	87 e0       	ldi	r24, 0x07	; 7
    591c:	11 96       	adiw	r26, 0x01	; 1
    591e:	8c 93       	st	X, r24
    5920:	11 97       	sbiw	r26, 0x01	; 1
    5922:	50 96       	adiw	r26, 0x10	; 16
    5924:	2c 93       	st	X, r18
    5926:	50 97       	sbiw	r26, 0x10	; 16
    5928:	51 96       	adiw	r26, 0x11	; 17
    592a:	2c 93       	st	X, r18
    592c:	51 97       	sbiw	r26, 0x11	; 17
    592e:	52 96       	adiw	r26, 0x12	; 18
    5930:	2c 93       	st	X, r18
    5932:	52 97       	sbiw	r26, 0x12	; 18
    5934:	14 96       	adiw	r26, 0x04	; 4
    5936:	1c 92       	st	X, r1
    5938:	e0 ea       	ldi	r30, 0xA0	; 160
    593a:	f0 e0       	ldi	r31, 0x00	; 0
    593c:	82 81       	ldd	r24, Z+2	; 0x02
    593e:	81 60       	ori	r24, 0x01	; 1
    5940:	82 83       	std	Z+2, r24	; 0x02
    5942:	82 81       	ldd	r24, Z+2	; 0x02
    5944:	82 60       	ori	r24, 0x02	; 2
    5946:	82 83       	std	Z+2, r24	; 0x02
    5948:	82 81       	ldd	r24, Z+2	; 0x02
    594a:	84 60       	ori	r24, 0x04	; 4
    594c:	82 83       	std	Z+2, r24	; 0x02
    594e:	fe 01       	movw	r30, r28
    5950:	9e 01       	movw	r18, r28
    5952:	28 5f       	subi	r18, 0xF8	; 248
    5954:	3f 4f       	sbci	r19, 0xFF	; 255
    5956:	91 e0       	ldi	r25, 0x01	; 1
    5958:	91 93       	st	Z+, r25
    595a:	e2 17       	cp	r30, r18
    595c:	f3 07       	cpc	r31, r19
    595e:	e1 f7       	brne	.-8      	; 0x5958 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    5960:	83 e0       	ldi	r24, 0x03	; 3
    5962:	88 87       	std	Y+8, r24	; 0x08
    5964:	e0 e4       	ldi	r30, 0x40	; 64
    5966:	f6 e0       	ldi	r31, 0x06	; 6
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	82 87       	std	Z+10, r24	; 0x0a
    596c:	81 87       	std	Z+9, r24	; 0x09
    596e:	df 91       	pop	r29
    5970:	cf 91       	pop	r28
    5972:	08 95       	ret

00005974 <_ZN11CLaserBoard15InitializeClockEv>:
    5974:	e0 e5       	ldi	r30, 0x50	; 80
    5976:	f0 e0       	ldi	r31, 0x00	; 0
    5978:	8b ec       	ldi	r24, 0xCB	; 203
    597a:	82 83       	std	Z+2, r24	; 0x02
    597c:	80 81       	ld	r24, Z
    597e:	88 60       	ori	r24, 0x08	; 8
    5980:	80 83       	st	Z, r24
    5982:	81 81       	ldd	r24, Z+1	; 0x01
    5984:	83 ff       	sbrs	r24, 3
    5986:	fd cf       	rjmp	.-6      	; 0x5982 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    5988:	e0 e5       	ldi	r30, 0x50	; 80
    598a:	f0 e0       	ldi	r31, 0x00	; 0
    598c:	85 81       	ldd	r24, Z+5	; 0x05
    598e:	98 ed       	ldi	r25, 0xD8	; 216
    5990:	94 bf       	out	0x34, r25	; 52
    5992:	84 ec       	ldi	r24, 0xC4	; 196
    5994:	85 83       	std	Z+5, r24	; 0x05
    5996:	80 81       	ld	r24, Z
    5998:	80 61       	ori	r24, 0x10	; 16
    599a:	80 83       	st	Z, r24
    599c:	e0 e4       	ldi	r30, 0x40	; 64
    599e:	f0 e0       	ldi	r31, 0x00	; 0
    59a0:	81 81       	ldd	r24, Z+1	; 0x01
    59a2:	94 bf       	out	0x34, r25	; 52
    59a4:	11 82       	std	Z+1, r1	; 0x01
    59a6:	e0 e5       	ldi	r30, 0x50	; 80
    59a8:	f0 e0       	ldi	r31, 0x00	; 0
    59aa:	81 81       	ldd	r24, Z+1	; 0x01
    59ac:	84 ff       	sbrs	r24, 4
    59ae:	fd cf       	rjmp	.-6      	; 0x59aa <_ZN11CLaserBoard15InitializeClockEv+0x36>
    59b0:	e0 e4       	ldi	r30, 0x40	; 64
    59b2:	f0 e0       	ldi	r31, 0x00	; 0
    59b4:	80 81       	ld	r24, Z
    59b6:	88 7f       	andi	r24, 0xF8	; 248
    59b8:	84 60       	ori	r24, 0x04	; 4
    59ba:	98 ed       	ldi	r25, 0xD8	; 216
    59bc:	94 bf       	out	0x34, r25	; 52
    59be:	80 83       	st	Z, r24
    59c0:	a0 e5       	ldi	r26, 0x50	; 80
    59c2:	b0 e0       	ldi	r27, 0x00	; 0
    59c4:	8c 91       	ld	r24, X
    59c6:	88 7f       	andi	r24, 0xF8	; 248
    59c8:	8c 93       	st	X, r24
    59ca:	82 81       	ldd	r24, Z+2	; 0x02
    59cc:	94 bf       	out	0x34, r25	; 52
    59ce:	81 e0       	ldi	r24, 0x01	; 1
    59d0:	82 83       	std	Z+2, r24	; 0x02
    59d2:	e0 eb       	ldi	r30, 0xB0	; 176
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	84 81       	ldd	r24, Z+4	; 0x04
    59d8:	8c 7f       	andi	r24, 0xFC	; 252
    59da:	84 83       	std	Z+4, r24	; 0x04
    59dc:	08 95       	ret

000059de <_ZN11CLaserBoard5PWMOnEv>:
    59de:	84 e0       	ldi	r24, 0x04	; 4
    59e0:	80 93 85 06 	sts	0x0685, r24
    59e4:	08 95       	ret

000059e6 <_ZN11CLaserBoard6PWMOffEv>:
    59e6:	84 e0       	ldi	r24, 0x04	; 4
    59e8:	80 93 86 06 	sts	0x0686, r24
    59ec:	08 95       	ret

000059ee <_ZN11CLaserBoard5REDOnEv>:
    59ee:	82 e0       	ldi	r24, 0x02	; 2
    59f0:	80 93 a5 06 	sts	0x06A5, r24
    59f4:	08 95       	ret

000059f6 <_ZN11CLaserBoard6REDOffEv>:
    59f6:	82 e0       	ldi	r24, 0x02	; 2
    59f8:	80 93 a6 06 	sts	0x06A6, r24
    59fc:	08 95       	ret

000059fe <_ZN11CLaserBoard5GRNOnEv>:
    59fe:	84 e0       	ldi	r24, 0x04	; 4
    5a00:	80 93 a5 06 	sts	0x06A5, r24
    5a04:	08 95       	ret

00005a06 <_ZN11CLaserBoard6GRNOffEv>:
    5a06:	84 e0       	ldi	r24, 0x04	; 4
    5a08:	80 93 a6 06 	sts	0x06A6, r24
    5a0c:	08 95       	ret

00005a0e <_ZN11CLaserBoard5BLUOnEv>:
    5a0e:	88 e0       	ldi	r24, 0x08	; 8
    5a10:	80 93 a5 06 	sts	0x06A5, r24
    5a14:	08 95       	ret

00005a16 <_ZN11CLaserBoard6BLUOffEv>:
    5a16:	88 e0       	ldi	r24, 0x08	; 8
    5a18:	80 93 a6 06 	sts	0x06A6, r24
    5a1c:	08 95       	ret

00005a1e <_ZN11CLaserBoard8Relay1OnEv>:
    5a1e:	81 e0       	ldi	r24, 0x01	; 1
    5a20:	80 93 62 06 	sts	0x0662, r24
    5a24:	08 95       	ret

00005a26 <_ZN11CLaserBoard8Relay2OnEv>:
    5a26:	80 e1       	ldi	r24, 0x10	; 16
    5a28:	80 93 62 06 	sts	0x0662, r24
    5a2c:	08 95       	ret

00005a2e <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    5a2e:	80 e1       	ldi	r24, 0x10	; 16
    5a30:	80 93 61 06 	sts	0x0661, r24
    5a34:	08 95       	ret

00005a36 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    5a36:	82 e0       	ldi	r24, 0x02	; 2
    5a38:	80 93 85 06 	sts	0x0685, r24
    5a3c:	08 95       	ret

00005a3e <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    5a3e:	82 e0       	ldi	r24, 0x02	; 2
    5a40:	80 93 86 06 	sts	0x0686, r24
    5a44:	08 95       	ret

00005a46 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    5a46:	f8 94       	cli
    5a48:	84 e6       	ldi	r24, 0x64	; 100
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    5a4c:	e0 e8       	ldi	r30, 0x80	; 128
    5a4e:	f6 e0       	ldi	r31, 0x06	; 6
    5a50:	28 e0       	ldi	r18, 0x08	; 8
    5a52:	25 83       	std	Z+5, r18	; 0x05
    5a54:	af e9       	ldi	r26, 0x9F	; 159
    5a56:	bf e0       	ldi	r27, 0x0F	; 15
    5a58:	11 97       	sbiw	r26, 0x01	; 1
    5a5a:	f1 f7       	brne	.-4      	; 0x5a58 <_ZN11CLaserBoard4BeepEv+0x12>
    5a5c:	00 c0       	rjmp	.+0      	; 0x5a5e <_ZN11CLaserBoard4BeepEv+0x18>
    5a5e:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    5a60:	26 83       	std	Z+6, r18	; 0x06
    5a62:	af e9       	ldi	r26, 0x9F	; 159
    5a64:	bf e0       	ldi	r27, 0x0F	; 15
    5a66:	11 97       	sbiw	r26, 0x01	; 1
    5a68:	f1 f7       	brne	.-4      	; 0x5a66 <_ZN11CLaserBoard4BeepEv+0x20>
    5a6a:	00 c0       	rjmp	.+0      	; 0x5a6c <_ZN11CLaserBoard4BeepEv+0x26>
    5a6c:	00 00       	nop
    5a6e:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    5a70:	81 f7       	brne	.-32     	; 0x5a52 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    5a72:	78 94       	sei
    5a74:	08 95       	ret

00005a76 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    5a76:	f8 94       	cli
    5a78:	45 e0       	ldi	r20, 0x05	; 5
    5a7a:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5a7c:	64 e6       	ldi	r22, 0x64	; 100
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    5a80:	e0 e8       	ldi	r30, 0x80	; 128
    5a82:	f6 e0       	ldi	r31, 0x06	; 6
    5a84:	28 e0       	ldi	r18, 0x08	; 8
    5a86:	1c c0       	rjmp	.+56     	; 0x5ac0 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    5a88:	25 83       	std	Z+5, r18	; 0x05
    5a8a:	af e9       	ldi	r26, 0x9F	; 159
    5a8c:	bf e0       	ldi	r27, 0x0F	; 15
    5a8e:	11 97       	sbiw	r26, 0x01	; 1
    5a90:	f1 f7       	brne	.-4      	; 0x5a8e <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    5a92:	00 c0       	rjmp	.+0      	; 0x5a94 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    5a94:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    5a96:	26 83       	std	Z+6, r18	; 0x06
    5a98:	af e9       	ldi	r26, 0x9F	; 159
    5a9a:	bf e0       	ldi	r27, 0x0F	; 15
    5a9c:	11 97       	sbiw	r26, 0x01	; 1
    5a9e:	f1 f7       	brne	.-4      	; 0x5a9c <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    5aa0:	00 c0       	rjmp	.+0      	; 0x5aa2 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    5aa2:	00 00       	nop
    5aa4:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    5aa6:	81 f7       	brne	.-32     	; 0x5a88 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5aa8:	bf ef       	ldi	r27, 0xFF	; 255
    5aaa:	73 ec       	ldi	r23, 0xC3	; 195
    5aac:	89 e0       	ldi	r24, 0x09	; 9
    5aae:	b1 50       	subi	r27, 0x01	; 1
    5ab0:	70 40       	sbci	r23, 0x00	; 0
    5ab2:	80 40       	sbci	r24, 0x00	; 0
    5ab4:	e1 f7       	brne	.-8      	; 0x5aae <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    5ab6:	00 c0       	rjmp	.+0      	; 0x5ab8 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    5ab8:	00 00       	nop
    5aba:	41 50       	subi	r20, 0x01	; 1
    5abc:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    5abe:	19 f0       	breq	.+6      	; 0x5ac6 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5ac0:	86 2f       	mov	r24, r22
    5ac2:	93 2f       	mov	r25, r19
    5ac4:	e1 cf       	rjmp	.-62     	; 0x5a88 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5ac6:	78 94       	sei
    5ac8:	08 95       	ret

00005aca <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5aca:	20 91 48 06 	lds	r18, 0x0648
    5ace:	fc 01       	movw	r30, r24
    5ad0:	21 87       	std	Z+9, r18	; 0x09
    5ad2:	08 95       	ret

00005ad4 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    5ad4:	fc 01       	movw	r30, r24
    5ad6:	81 85       	ldd	r24, Z+9	; 0x09
    5ad8:	81 70       	andi	r24, 0x01	; 1
    5ada:	08 95       	ret

00005adc <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    5adc:	08 95       	ret

00005ade <_ZN12CSoundPlayerD1Ev>:
    5ade:	08 95       	ret

00005ae0 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    5ae0:	e0 e0       	ldi	r30, 0x00	; 0
    5ae2:	fa e0       	ldi	r31, 0x0A	; 10
    5ae4:	10 82       	st	Z, r1
    5ae6:	87 e8       	ldi	r24, 0x87	; 135
    5ae8:	81 83       	std	Z+1, r24	; 0x01
    5aea:	13 82       	std	Z+3, r1	; 0x03
    5aec:	84 e2       	ldi	r24, 0x24	; 36
    5aee:	94 ef       	ldi	r25, 0xF4	; 244
    5af0:	86 a3       	std	Z+38, r24	; 0x26
    5af2:	97 a3       	std	Z+39, r25	; 0x27
    5af4:	82 e1       	ldi	r24, 0x12	; 18
    5af6:	9a e7       	ldi	r25, 0x7A	; 122
    5af8:	86 a7       	std	Z+46, r24	; 0x2e
    5afa:	97 a7       	std	Z+47, r25	; 0x2f
    5afc:	16 82       	std	Z+6, r1	; 0x06
    5afe:	17 82       	std	Z+7, r1	; 0x07
    5b00:	08 95       	ret

00005b02 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    5b02:	e0 e4       	ldi	r30, 0x40	; 64
    5b04:	fa e0       	ldi	r31, 0x0A	; 10
    5b06:	10 82       	st	Z, r1
    5b08:	11 82       	std	Z+1, r1	; 0x01
    5b0a:	13 82       	std	Z+3, r1	; 0x03
    5b0c:	84 e2       	ldi	r24, 0x24	; 36
    5b0e:	94 ef       	ldi	r25, 0xF4	; 244
    5b10:	86 a3       	std	Z+38, r24	; 0x26
    5b12:	97 a3       	std	Z+39, r25	; 0x27
    5b14:	16 82       	std	Z+6, r1	; 0x06
    5b16:	17 82       	std	Z+7, r1	; 0x07
    5b18:	08 95       	ret

00005b1a <_ZN12CSoundPlayer10SoundStartEjjh>:
    5b1a:	0f 93       	push	r16
    5b1c:	1f 93       	push	r17
    5b1e:	cf 93       	push	r28
    5b20:	8a 01       	movw	r16, r20
    5b22:	c2 2f       	mov	r28, r18
    5b24:	9b 01       	movw	r18, r22
    5b26:	40 e0       	ldi	r20, 0x00	; 0
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	64 e2       	ldi	r22, 0x24	; 36
    5b2c:	74 ef       	ldi	r23, 0xF4	; 244
    5b2e:	80 e0       	ldi	r24, 0x00	; 0
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__divmodsi4>
    5b36:	b8 01       	movw	r22, r16
    5b38:	76 95       	lsr	r23
    5b3a:	67 95       	ror	r22
    5b3c:	ee e3       	ldi	r30, 0x3E	; 62
    5b3e:	e0 9f       	mul	r30, r16
    5b40:	c0 01       	movw	r24, r0
    5b42:	e1 9f       	mul	r30, r17
    5b44:	90 0d       	add	r25, r0
    5b46:	11 24       	eor	r1, r1
    5b48:	86 0f       	add	r24, r22
    5b4a:	97 1f       	adc	r25, r23
    5b4c:	cf 5f       	subi	r28, 0xFF	; 255
    5b4e:	b9 01       	movw	r22, r18
    5b50:	02 c0       	rjmp	.+4      	; 0x5b56 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    5b52:	76 95       	lsr	r23
    5b54:	67 95       	ror	r22
    5b56:	ca 95       	dec	r28
    5b58:	e2 f7       	brpl	.-8      	; 0x5b52 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    5b5a:	e0 e0       	ldi	r30, 0x00	; 0
    5b5c:	fa e0       	ldi	r31, 0x0A	; 10
    5b5e:	66 a7       	std	Z+46, r22	; 0x2e
    5b60:	77 a7       	std	Z+47, r23	; 0x2f
    5b62:	26 a3       	std	Z+38, r18	; 0x26
    5b64:	37 a3       	std	Z+39, r19	; 0x27
    5b66:	a0 e4       	ldi	r26, 0x40	; 64
    5b68:	ba e0       	ldi	r27, 0x0A	; 10
    5b6a:	96 96       	adiw	r26, 0x26	; 38
    5b6c:	8d 93       	st	X+, r24
    5b6e:	9c 93       	st	X, r25
    5b70:	97 97       	sbiw	r26, 0x27	; 39
    5b72:	86 e0       	ldi	r24, 0x06	; 6
    5b74:	80 83       	st	Z, r24
    5b76:	87 e0       	ldi	r24, 0x07	; 7
    5b78:	8c 93       	st	X, r24
    5b7a:	cf 91       	pop	r28
    5b7c:	1f 91       	pop	r17
    5b7e:	0f 91       	pop	r16
    5b80:	08 95       	ret

00005b82 <_ZN12CSoundPlayer9SoundStopEv>:
    5b82:	e0 e4       	ldi	r30, 0x40	; 64
    5b84:	fa e0       	ldi	r31, 0x0A	; 10
    5b86:	84 85       	ldd	r24, Z+12	; 0x0c
    5b88:	80 ff       	sbrs	r24, 0
    5b8a:	fd cf       	rjmp	.-6      	; 0x5b86 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    5b8c:	e0 e4       	ldi	r30, 0x40	; 64
    5b8e:	fa e0       	ldi	r31, 0x0A	; 10
    5b90:	84 85       	ldd	r24, Z+12	; 0x0c
    5b92:	81 70       	andi	r24, 0x01	; 1
    5b94:	84 87       	std	Z+12, r24	; 0x0c
    5b96:	a0 e0       	ldi	r26, 0x00	; 0
    5b98:	ba e0       	ldi	r27, 0x0A	; 10
    5b9a:	1c 92       	st	X, r1
    5b9c:	10 82       	st	Z, r1
    5b9e:	10 a2       	std	Z+32, r1	; 0x20
    5ba0:	11 a2       	std	Z+33, r1	; 0x21
    5ba2:	90 96       	adiw	r26, 0x20	; 32
    5ba4:	1d 92       	st	X+, r1
    5ba6:	1c 92       	st	X, r1
    5ba8:	91 97       	sbiw	r26, 0x21	; 33
    5baa:	2f ef       	ldi	r18, 0xFF	; 255
    5bac:	83 ef       	ldi	r24, 0xF3	; 243
    5bae:	91 e0       	ldi	r25, 0x01	; 1
    5bb0:	21 50       	subi	r18, 0x01	; 1
    5bb2:	80 40       	sbci	r24, 0x00	; 0
    5bb4:	90 40       	sbci	r25, 0x00	; 0
    5bb6:	e1 f7       	brne	.-8      	; 0x5bb0 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    5bb8:	00 c0       	rjmp	.+0      	; 0x5bba <_ZN12CSoundPlayer9SoundStopEv+0x38>
    5bba:	00 00       	nop
    5bbc:	08 95       	ret

00005bbe <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    5bbe:	cf 93       	push	r28
    5bc0:	df 93       	push	r29
    5bc2:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5bc4:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5bc8:	ce 01       	movw	r24, r28
    5bca:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	08 95       	ret

00005bd4 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5bd8:	e0 e0       	ldi	r30, 0x00	; 0
    5bda:	f8 e0       	ldi	r31, 0x08	; 8
    5bdc:	80 81       	ld	r24, Z
    5bde:	80 7f       	andi	r24, 0xF0	; 240
    5be0:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5be2:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5be4:	10 a2       	std	Z+32, r1	; 0x20
    5be6:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5be8:	10 a6       	std	Z+40, r1	; 0x28
    5bea:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    5bec:	12 a6       	std	Z+42, r1	; 0x2a
    5bee:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    5bf0:	14 a6       	std	Z+44, r1	; 0x2c
    5bf2:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5bf4:	16 a6       	std	Z+46, r1	; 0x2e
    5bf6:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5bf8:	16 a2       	std	Z+38, r1	; 0x26
    5bfa:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5bfc:	81 81       	ldd	r24, Z+1	; 0x01
    5bfe:	88 7f       	andi	r24, 0xF8	; 248
    5c00:	68 2b       	or	r22, r24
    5c02:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5c04:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5c06:	17 82       	std	Z+7, r1	; 0x07
    5c08:	08 95       	ret

00005c0a <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5c0a:	e0 e0       	ldi	r30, 0x00	; 0
    5c0c:	f8 e0       	ldi	r31, 0x08	; 8
    5c0e:	66 a3       	std	Z+38, r22	; 0x26
    5c10:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5c12:	20 81       	ld	r18, Z
    5c14:	20 7f       	andi	r18, 0xF0	; 240
    5c16:	dc 01       	movw	r26, r24
    5c18:	12 96       	adiw	r26, 0x02	; 2
    5c1a:	9c 91       	ld	r25, X
    5c1c:	82 2f       	mov	r24, r18
    5c1e:	89 2b       	or	r24, r25
    5c20:	80 83       	st	Z, r24
    5c22:	08 95       	ret

00005c24 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5c24:	e0 e0       	ldi	r30, 0x00	; 0
    5c26:	f8 e0       	ldi	r31, 0x08	; 8
    5c28:	80 81       	ld	r24, Z
    5c2a:	80 7f       	andi	r24, 0xF0	; 240
    5c2c:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    5c2e:	10 a2       	std	Z+32, r1	; 0x20
    5c30:	11 a2       	std	Z+33, r1	; 0x21
    5c32:	08 95       	ret

00005c34 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5c34:	e0 e0       	ldi	r30, 0x00	; 0
    5c36:	f8 e0       	ldi	r31, 0x08	; 8
    5c38:	81 81       	ldd	r24, Z+1	; 0x01
    5c3a:	8f 70       	andi	r24, 0x0F	; 15
    5c3c:	68 2b       	or	r22, r24
    5c3e:	61 83       	std	Z+1, r22	; 0x01
    5c40:	08 95       	ret

00005c42 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5c42:	e0 e0       	ldi	r30, 0x00	; 0
    5c44:	f8 e0       	ldi	r31, 0x08	; 8
    5c46:	81 81       	ldd	r24, Z+1	; 0x01
    5c48:	60 95       	com	r22
    5c4a:	68 23       	and	r22, r24
    5c4c:	61 83       	std	Z+1, r22	; 0x01
    5c4e:	08 95       	ret

00005c50 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    5c50:	60 93 26 08 	sts	0x0826, r22
    5c54:	70 93 27 08 	sts	0x0827, r23
    5c58:	08 95       	ret

00005c5a <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5c5a:	60 93 28 08 	sts	0x0828, r22
    5c5e:	70 93 29 08 	sts	0x0829, r23
    5c62:	08 95       	ret

00005c64 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    5c64:	60 93 2a 08 	sts	0x082A, r22
    5c68:	70 93 2b 08 	sts	0x082B, r23
    5c6c:	08 95       	ret

00005c6e <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    5c6e:	60 93 2c 08 	sts	0x082C, r22
    5c72:	70 93 2d 08 	sts	0x082D, r23
    5c76:	08 95       	ret

00005c78 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    5c78:	60 93 2e 08 	sts	0x082E, r22
    5c7c:	70 93 2f 08 	sts	0x082F, r23
    5c80:	08 95       	ret

00005c82 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5c82:	61 15       	cp	r22, r1
    5c84:	71 05       	cpc	r23, r1
    5c86:	29 f0       	breq	.+10     	; 0x5c92 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5c88:	e0 e0       	ldi	r30, 0x00	; 0
    5c8a:	f8 e0       	ldi	r31, 0x08	; 8
    5c8c:	86 81       	ldd	r24, Z+6	; 0x06
    5c8e:	28 2b       	or	r18, r24
    5c90:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    5c92:	60 93 06 23 	sts	0x2306, r22
    5c96:	70 93 07 23 	sts	0x2307, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    5c9a:	40 93 fc 23 	sts	0x23FC, r20
    5c9e:	50 93 fd 23 	sts	0x23FD, r21
    5ca2:	08 95       	ret

00005ca4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5ca4:	61 15       	cp	r22, r1
    5ca6:	71 05       	cpc	r23, r1
    5ca8:	29 f0       	breq	.+10     	; 0x5cb4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5caa:	e0 e0       	ldi	r30, 0x00	; 0
    5cac:	f8 e0       	ldi	r31, 0x08	; 8
    5cae:	86 81       	ldd	r24, Z+6	; 0x06
    5cb0:	28 2b       	or	r18, r24
    5cb2:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    5cb4:	60 93 08 23 	sts	0x2308, r22
    5cb8:	70 93 09 23 	sts	0x2309, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    5cbc:	40 93 fe 23 	sts	0x23FE, r20
    5cc0:	50 93 ff 23 	sts	0x23FF, r21
    5cc4:	08 95       	ret

00005cc6 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5cc6:	61 15       	cp	r22, r1
    5cc8:	71 05       	cpc	r23, r1
    5cca:	29 f0       	breq	.+10     	; 0x5cd6 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5ccc:	e0 e0       	ldi	r30, 0x00	; 0
    5cce:	f8 e0       	ldi	r31, 0x08	; 8
    5cd0:	87 81       	ldd	r24, Z+7	; 0x07
    5cd2:	28 2b       	or	r18, r24
    5cd4:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5cd6:	60 93 0a 23 	sts	0x230A, r22
    5cda:	70 93 0b 23 	sts	0x230B, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5cde:	40 93 00 24 	sts	0x2400, r20
    5ce2:	50 93 01 24 	sts	0x2401, r21
    5ce6:	08 95       	ret

00005ce8 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5ce8:	61 15       	cp	r22, r1
    5cea:	71 05       	cpc	r23, r1
    5cec:	29 f0       	breq	.+10     	; 0x5cf8 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5cee:	e0 e0       	ldi	r30, 0x00	; 0
    5cf0:	f8 e0       	ldi	r31, 0x08	; 8
    5cf2:	87 81       	ldd	r24, Z+7	; 0x07
    5cf4:	28 2b       	or	r18, r24
    5cf6:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5cf8:	60 93 0c 23 	sts	0x230C, r22
    5cfc:	70 93 0d 23 	sts	0x230D, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5d00:	40 93 02 24 	sts	0x2402, r20
    5d04:	50 93 03 24 	sts	0x2403, r21
    5d08:	08 95       	ret

00005d0a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5d0a:	61 15       	cp	r22, r1
    5d0c:	71 05       	cpc	r23, r1
    5d0e:	29 f0       	breq	.+10     	; 0x5d1a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5d10:	e0 e0       	ldi	r30, 0x00	; 0
    5d12:	f8 e0       	ldi	r31, 0x08	; 8
    5d14:	87 81       	ldd	r24, Z+7	; 0x07
    5d16:	28 2b       	or	r18, r24
    5d18:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5d1a:	60 93 0e 23 	sts	0x230E, r22
    5d1e:	70 93 0f 23 	sts	0x230F, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5d22:	40 93 04 24 	sts	0x2404, r20
    5d26:	50 93 05 24 	sts	0x2405, r21
    5d2a:	08 95       	ret

00005d2c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5d2c:	61 15       	cp	r22, r1
    5d2e:	71 05       	cpc	r23, r1
    5d30:	29 f0       	breq	.+10     	; 0x5d3c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5d32:	e0 e0       	ldi	r30, 0x00	; 0
    5d34:	f8 e0       	ldi	r31, 0x08	; 8
    5d36:	87 81       	ldd	r24, Z+7	; 0x07
    5d38:	28 2b       	or	r18, r24
    5d3a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5d3c:	60 93 10 23 	sts	0x2310, r22
    5d40:	70 93 11 23 	sts	0x2311, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5d44:	40 93 06 24 	sts	0x2406, r20
    5d48:	50 93 07 24 	sts	0x2407, r21
    5d4c:	08 95       	ret

00005d4e <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5d4e:	cf 93       	push	r28
    5d50:	df 93       	push	r29
    5d52:	ec 01       	movw	r28, r24
    5d54:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN6CTimerC1Ev>
    5d58:	88 e3       	ldi	r24, 0x38	; 56
    5d5a:	92 e2       	ldi	r25, 0x22	; 34
    5d5c:	88 83       	st	Y, r24
    5d5e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5d60:	df 91       	pop	r29
    5d62:	cf 91       	pop	r28
    5d64:	08 95       	ret

00005d66 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5d66:	28 e3       	ldi	r18, 0x38	; 56
    5d68:	32 e2       	ldi	r19, 0x22	; 34
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	20 83       	st	Z, r18
    5d6e:	31 83       	std	Z+1, r19	; 0x01
    5d70:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN6CTimerD1Ev>
    5d74:	08 95       	ret

00005d76 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5d76:	fc 01       	movw	r30, r24
    5d78:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d7a:	e0 e4       	ldi	r30, 0x40	; 64
    5d7c:	f8 e0       	ldi	r31, 0x08	; 8
    5d7e:	80 81       	ld	r24, Z
    5d80:	80 7f       	andi	r24, 0xF0	; 240
    5d82:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5d84:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5d86:	10 a2       	std	Z+32, r1	; 0x20
    5d88:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5d8a:	10 a6       	std	Z+40, r1	; 0x28
    5d8c:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5d8e:	12 a6       	std	Z+42, r1	; 0x2a
    5d90:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5d92:	16 a2       	std	Z+38, r1	; 0x26
    5d94:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5d96:	81 81       	ldd	r24, Z+1	; 0x01
    5d98:	88 7f       	andi	r24, 0xF8	; 248
    5d9a:	68 2b       	or	r22, r24
    5d9c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5d9e:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5da0:	17 82       	std	Z+7, r1	; 0x07
    5da2:	08 95       	ret

00005da4 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5da4:	e0 e4       	ldi	r30, 0x40	; 64
    5da6:	f8 e0       	ldi	r31, 0x08	; 8
    5da8:	66 a3       	std	Z+38, r22	; 0x26
    5daa:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5dac:	20 81       	ld	r18, Z
    5dae:	20 7f       	andi	r18, 0xF0	; 240
    5db0:	dc 01       	movw	r26, r24
    5db2:	12 96       	adiw	r26, 0x02	; 2
    5db4:	9c 91       	ld	r25, X
    5db6:	82 2f       	mov	r24, r18
    5db8:	89 2b       	or	r24, r25
    5dba:	80 83       	st	Z, r24
    5dbc:	08 95       	ret

00005dbe <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5dbe:	e0 e4       	ldi	r30, 0x40	; 64
    5dc0:	f8 e0       	ldi	r31, 0x08	; 8
    5dc2:	80 81       	ld	r24, Z
    5dc4:	80 7f       	andi	r24, 0xF0	; 240
    5dc6:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5dc8:	10 a2       	std	Z+32, r1	; 0x20
    5dca:	11 a2       	std	Z+33, r1	; 0x21
    5dcc:	08 95       	ret

00005dce <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5dce:	e0 e4       	ldi	r30, 0x40	; 64
    5dd0:	f8 e0       	ldi	r31, 0x08	; 8
    5dd2:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5dd4:	80 81       	ld	r24, Z
    5dd6:	80 7f       	andi	r24, 0xF0	; 240
    5dd8:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5dda:	10 a2       	std	Z+32, r1	; 0x20
    5ddc:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5dde:	90 83       	st	Z, r25
    5de0:	08 95       	ret

00005de2 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5de2:	e0 e4       	ldi	r30, 0x40	; 64
    5de4:	f8 e0       	ldi	r31, 0x08	; 8
    5de6:	81 81       	ldd	r24, Z+1	; 0x01
    5de8:	8f 70       	andi	r24, 0x0F	; 15
    5dea:	68 2b       	or	r22, r24
    5dec:	61 83       	std	Z+1, r22	; 0x01
    5dee:	08 95       	ret

00005df0 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5df0:	e0 e4       	ldi	r30, 0x40	; 64
    5df2:	f8 e0       	ldi	r31, 0x08	; 8
    5df4:	81 81       	ldd	r24, Z+1	; 0x01
    5df6:	60 95       	com	r22
    5df8:	68 23       	and	r22, r24
    5dfa:	61 83       	std	Z+1, r22	; 0x01
    5dfc:	08 95       	ret

00005dfe <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5dfe:	60 93 66 08 	sts	0x0866, r22
    5e02:	70 93 67 08 	sts	0x0867, r23
    5e06:	08 95       	ret

00005e08 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5e08:	60 93 68 08 	sts	0x0868, r22
    5e0c:	70 93 69 08 	sts	0x0869, r23
    5e10:	08 95       	ret

00005e12 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5e12:	60 93 6a 08 	sts	0x086A, r22
    5e16:	70 93 6b 08 	sts	0x086B, r23
    5e1a:	08 95       	ret

00005e1c <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5e1c:	61 15       	cp	r22, r1
    5e1e:	71 05       	cpc	r23, r1
    5e20:	31 f0       	breq	.+12     	; 0x5e2e <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5e22:	e0 e4       	ldi	r30, 0x40	; 64
    5e24:	f8 e0       	ldi	r31, 0x08	; 8
    5e26:	86 81       	ldd	r24, Z+6	; 0x06
    5e28:	83 70       	andi	r24, 0x03	; 3
    5e2a:	28 2b       	or	r18, r24
    5e2c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5e2e:	60 93 12 23 	sts	0x2312, r22
    5e32:	70 93 13 23 	sts	0x2313, r23
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5e36:	40 93 08 24 	sts	0x2408, r20
    5e3a:	50 93 09 24 	sts	0x2409, r21
    5e3e:	08 95       	ret

00005e40 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5e40:	61 15       	cp	r22, r1
    5e42:	71 05       	cpc	r23, r1
    5e44:	31 f0       	breq	.+12     	; 0x5e52 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5e46:	e0 e4       	ldi	r30, 0x40	; 64
    5e48:	f8 e0       	ldi	r31, 0x08	; 8
    5e4a:	86 81       	ldd	r24, Z+6	; 0x06
    5e4c:	8c 70       	andi	r24, 0x0C	; 12
    5e4e:	28 2b       	or	r18, r24
    5e50:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5e52:	60 93 14 23 	sts	0x2314, r22
    5e56:	70 93 15 23 	sts	0x2315, r23
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5e5a:	40 93 0a 24 	sts	0x240A, r20
    5e5e:	50 93 0b 24 	sts	0x240B, r21
    5e62:	08 95       	ret

00005e64 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5e64:	61 15       	cp	r22, r1
    5e66:	71 05       	cpc	r23, r1
    5e68:	31 f0       	breq	.+12     	; 0x5e76 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5e6a:	e0 e4       	ldi	r30, 0x40	; 64
    5e6c:	f8 e0       	ldi	r31, 0x08	; 8
    5e6e:	87 81       	ldd	r24, Z+7	; 0x07
    5e70:	83 70       	andi	r24, 0x03	; 3
    5e72:	28 2b       	or	r18, r24
    5e74:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5e76:	60 93 16 23 	sts	0x2316, r22
    5e7a:	70 93 17 23 	sts	0x2317, r23
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5e7e:	40 93 0c 24 	sts	0x240C, r20
    5e82:	50 93 0d 24 	sts	0x240D, r21
    5e86:	08 95       	ret

00005e88 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5e88:	61 15       	cp	r22, r1
    5e8a:	71 05       	cpc	r23, r1
    5e8c:	31 f0       	breq	.+12     	; 0x5e9a <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5e8e:	e0 e4       	ldi	r30, 0x40	; 64
    5e90:	f8 e0       	ldi	r31, 0x08	; 8
    5e92:	87 81       	ldd	r24, Z+7	; 0x07
    5e94:	8c 70       	andi	r24, 0x0C	; 12
    5e96:	28 2b       	or	r18, r24
    5e98:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5e9a:	60 93 18 23 	sts	0x2318, r22
    5e9e:	70 93 19 23 	sts	0x2319, r23
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5ea2:	40 93 0e 24 	sts	0x240E, r20
    5ea6:	50 93 0f 24 	sts	0x240F, r21
    5eaa:	08 95       	ret

00005eac <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5eac:	cf 93       	push	r28
    5eae:	df 93       	push	r29
    5eb0:	ec 01       	movw	r28, r24
    5eb2:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN7CTimer1C1Ev>
    5eb6:	8c e5       	ldi	r24, 0x5C	; 92
    5eb8:	92 e2       	ldi	r25, 0x22	; 34
    5eba:	88 83       	st	Y, r24
    5ebc:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5ebe:	df 91       	pop	r29
    5ec0:	cf 91       	pop	r28
    5ec2:	08 95       	ret

00005ec4 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5ec4:	2c e5       	ldi	r18, 0x5C	; 92
    5ec6:	32 e2       	ldi	r19, 0x22	; 34
    5ec8:	fc 01       	movw	r30, r24
    5eca:	20 83       	st	Z, r18
    5ecc:	31 83       	std	Z+1, r19	; 0x01
    5ece:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN7CTimer1D1Ev>
    5ed2:	08 95       	ret

00005ed4 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ed8:	e0 e0       	ldi	r30, 0x00	; 0
    5eda:	f9 e0       	ldi	r31, 0x09	; 9
    5edc:	80 81       	ld	r24, Z
    5ede:	80 7f       	andi	r24, 0xF0	; 240
    5ee0:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5ee2:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5ee4:	10 a2       	std	Z+32, r1	; 0x20
    5ee6:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    5ee8:	10 a6       	std	Z+40, r1	; 0x28
    5eea:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    5eec:	12 a6       	std	Z+42, r1	; 0x2a
    5eee:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    5ef0:	14 a6       	std	Z+44, r1	; 0x2c
    5ef2:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    5ef4:	16 a6       	std	Z+46, r1	; 0x2e
    5ef6:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    5ef8:	16 a2       	std	Z+38, r1	; 0x26
    5efa:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5efc:	81 81       	ldd	r24, Z+1	; 0x01
    5efe:	88 7f       	andi	r24, 0xF8	; 248
    5f00:	68 2b       	or	r22, r24
    5f02:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5f04:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5f06:	17 82       	std	Z+7, r1	; 0x07
    5f08:	08 95       	ret

00005f0a <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    5f0a:	e0 e0       	ldi	r30, 0x00	; 0
    5f0c:	f9 e0       	ldi	r31, 0x09	; 9
    5f0e:	66 a3       	std	Z+38, r22	; 0x26
    5f10:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5f12:	20 81       	ld	r18, Z
    5f14:	20 7f       	andi	r18, 0xF0	; 240
    5f16:	dc 01       	movw	r26, r24
    5f18:	12 96       	adiw	r26, 0x02	; 2
    5f1a:	9c 91       	ld	r25, X
    5f1c:	82 2f       	mov	r24, r18
    5f1e:	89 2b       	or	r24, r25
    5f20:	80 83       	st	Z, r24
    5f22:	08 95       	ret

00005f24 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5f24:	e0 e0       	ldi	r30, 0x00	; 0
    5f26:	f9 e0       	ldi	r31, 0x09	; 9
    5f28:	80 81       	ld	r24, Z
    5f2a:	80 7f       	andi	r24, 0xF0	; 240
    5f2c:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    5f2e:	10 a2       	std	Z+32, r1	; 0x20
    5f30:	11 a2       	std	Z+33, r1	; 0x21
    5f32:	08 95       	ret

00005f34 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    5f34:	e0 e0       	ldi	r30, 0x00	; 0
    5f36:	f9 e0       	ldi	r31, 0x09	; 9
    5f38:	81 81       	ldd	r24, Z+1	; 0x01
    5f3a:	8f 70       	andi	r24, 0x0F	; 15
    5f3c:	68 2b       	or	r22, r24
    5f3e:	61 83       	std	Z+1, r22	; 0x01
    5f40:	08 95       	ret

00005f42 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    5f42:	e0 e0       	ldi	r30, 0x00	; 0
    5f44:	f9 e0       	ldi	r31, 0x09	; 9
    5f46:	81 81       	ldd	r24, Z+1	; 0x01
    5f48:	60 95       	com	r22
    5f4a:	68 23       	and	r22, r24
    5f4c:	61 83       	std	Z+1, r22	; 0x01
    5f4e:	08 95       	ret

00005f50 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    5f50:	60 93 26 09 	sts	0x0926, r22
    5f54:	70 93 27 09 	sts	0x0927, r23
    5f58:	08 95       	ret

00005f5a <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    5f5a:	60 93 28 09 	sts	0x0928, r22
    5f5e:	70 93 29 09 	sts	0x0929, r23
    5f62:	08 95       	ret

00005f64 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    5f64:	60 93 2a 09 	sts	0x092A, r22
    5f68:	70 93 2b 09 	sts	0x092B, r23
    5f6c:	08 95       	ret

00005f6e <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    5f6e:	60 93 2c 09 	sts	0x092C, r22
    5f72:	70 93 2d 09 	sts	0x092D, r23
    5f76:	08 95       	ret

00005f78 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    5f78:	60 93 2e 09 	sts	0x092E, r22
    5f7c:	70 93 2f 09 	sts	0x092F, r23
    5f80:	08 95       	ret

00005f82 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5f82:	61 15       	cp	r22, r1
    5f84:	71 05       	cpc	r23, r1
    5f86:	29 f0       	breq	.+10     	; 0x5f92 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5f88:	e0 e0       	ldi	r30, 0x00	; 0
    5f8a:	f9 e0       	ldi	r31, 0x09	; 9
    5f8c:	86 81       	ldd	r24, Z+6	; 0x06
    5f8e:	28 2b       	or	r18, r24
    5f90:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    5f92:	60 93 84 23 	sts	0x2384, r22
    5f96:	70 93 85 23 	sts	0x2385, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    5f9a:	40 93 7a 24 	sts	0x247A, r20
    5f9e:	50 93 7b 24 	sts	0x247B, r21
    5fa2:	08 95       	ret

00005fa4 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5fa4:	61 15       	cp	r22, r1
    5fa6:	71 05       	cpc	r23, r1
    5fa8:	29 f0       	breq	.+10     	; 0x5fb4 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5faa:	e0 e0       	ldi	r30, 0x00	; 0
    5fac:	f9 e0       	ldi	r31, 0x09	; 9
    5fae:	86 81       	ldd	r24, Z+6	; 0x06
    5fb0:	28 2b       	or	r18, r24
    5fb2:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    5fb4:	60 93 86 23 	sts	0x2386, r22
    5fb8:	70 93 87 23 	sts	0x2387, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    5fbc:	40 93 7c 24 	sts	0x247C, r20
    5fc0:	50 93 7d 24 	sts	0x247D, r21
    5fc4:	08 95       	ret

00005fc6 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5fc6:	61 15       	cp	r22, r1
    5fc8:	71 05       	cpc	r23, r1
    5fca:	29 f0       	breq	.+10     	; 0x5fd6 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5fcc:	e0 e0       	ldi	r30, 0x00	; 0
    5fce:	f9 e0       	ldi	r31, 0x09	; 9
    5fd0:	87 81       	ldd	r24, Z+7	; 0x07
    5fd2:	28 2b       	or	r18, r24
    5fd4:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    5fd6:	60 93 88 23 	sts	0x2388, r22
    5fda:	70 93 89 23 	sts	0x2389, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    5fde:	40 93 7e 24 	sts	0x247E, r20
    5fe2:	50 93 7f 24 	sts	0x247F, r21
    5fe6:	08 95       	ret

00005fe8 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5fe8:	61 15       	cp	r22, r1
    5fea:	71 05       	cpc	r23, r1
    5fec:	29 f0       	breq	.+10     	; 0x5ff8 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5fee:	e0 e0       	ldi	r30, 0x00	; 0
    5ff0:	f9 e0       	ldi	r31, 0x09	; 9
    5ff2:	87 81       	ldd	r24, Z+7	; 0x07
    5ff4:	28 2b       	or	r18, r24
    5ff6:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    5ff8:	60 93 8a 23 	sts	0x238A, r22
    5ffc:	70 93 8b 23 	sts	0x238B, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    6000:	40 93 80 24 	sts	0x2480, r20
    6004:	50 93 81 24 	sts	0x2481, r21
    6008:	08 95       	ret

0000600a <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    600a:	61 15       	cp	r22, r1
    600c:	71 05       	cpc	r23, r1
    600e:	29 f0       	breq	.+10     	; 0x601a <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6010:	e0 e0       	ldi	r30, 0x00	; 0
    6012:	f9 e0       	ldi	r31, 0x09	; 9
    6014:	87 81       	ldd	r24, Z+7	; 0x07
    6016:	28 2b       	or	r18, r24
    6018:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    601a:	60 93 8c 23 	sts	0x238C, r22
    601e:	70 93 8d 23 	sts	0x238D, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    6022:	40 93 82 24 	sts	0x2482, r20
    6026:	50 93 83 24 	sts	0x2483, r21
    602a:	08 95       	ret

0000602c <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    602c:	61 15       	cp	r22, r1
    602e:	71 05       	cpc	r23, r1
    6030:	29 f0       	breq	.+10     	; 0x603c <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    6032:	e0 e0       	ldi	r30, 0x00	; 0
    6034:	f9 e0       	ldi	r31, 0x09	; 9
    6036:	87 81       	ldd	r24, Z+7	; 0x07
    6038:	28 2b       	or	r18, r24
    603a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    603c:	60 93 8e 23 	sts	0x238E, r22
    6040:	70 93 8f 23 	sts	0x238F, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    6044:	40 93 84 24 	sts	0x2484, r20
    6048:	50 93 85 24 	sts	0x2485, r21
    604c:	08 95       	ret

0000604e <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    604e:	cf 93       	push	r28
    6050:	df 93       	push	r29
    6052:	ec 01       	movw	r28, r24
    6054:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN6CTimerC1Ev>
    6058:	8a e7       	ldi	r24, 0x7A	; 122
    605a:	92 e2       	ldi	r25, 0x22	; 34
    605c:	88 83       	st	Y, r24
    605e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    6060:	df 91       	pop	r29
    6062:	cf 91       	pop	r28
    6064:	08 95       	ret

00006066 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    6066:	2a e7       	ldi	r18, 0x7A	; 122
    6068:	32 e2       	ldi	r19, 0x22	; 34
    606a:	fc 01       	movw	r30, r24
    606c:	20 83       	st	Z, r18
    606e:	31 83       	std	Z+1, r19	; 0x01
    6070:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN6CTimerD1Ev>
    6074:	08 95       	ret

00006076 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    6076:	fc 01       	movw	r30, r24
    6078:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    607a:	e0 e4       	ldi	r30, 0x40	; 64
    607c:	f9 e0       	ldi	r31, 0x09	; 9
    607e:	80 81       	ld	r24, Z
    6080:	80 7f       	andi	r24, 0xF0	; 240
    6082:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    6084:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    6086:	10 a2       	std	Z+32, r1	; 0x20
    6088:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    608a:	10 a6       	std	Z+40, r1	; 0x28
    608c:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    608e:	12 a6       	std	Z+42, r1	; 0x2a
    6090:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    6092:	16 a2       	std	Z+38, r1	; 0x26
    6094:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    6096:	81 81       	ldd	r24, Z+1	; 0x01
    6098:	88 7f       	andi	r24, 0xF8	; 248
    609a:	68 2b       	or	r22, r24
    609c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    609e:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    60a0:	17 82       	std	Z+7, r1	; 0x07
    60a2:	08 95       	ret

000060a4 <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    60a4:	e0 e4       	ldi	r30, 0x40	; 64
    60a6:	f9 e0       	ldi	r31, 0x09	; 9
    60a8:	66 a3       	std	Z+38, r22	; 0x26
    60aa:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    60ac:	20 81       	ld	r18, Z
    60ae:	20 7f       	andi	r18, 0xF0	; 240
    60b0:	dc 01       	movw	r26, r24
    60b2:	12 96       	adiw	r26, 0x02	; 2
    60b4:	9c 91       	ld	r25, X
    60b6:	82 2f       	mov	r24, r18
    60b8:	89 2b       	or	r24, r25
    60ba:	80 83       	st	Z, r24
    60bc:	08 95       	ret

000060be <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    60be:	e0 e4       	ldi	r30, 0x40	; 64
    60c0:	f9 e0       	ldi	r31, 0x09	; 9
    60c2:	80 81       	ld	r24, Z
    60c4:	80 7f       	andi	r24, 0xF0	; 240
    60c6:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    60c8:	10 a2       	std	Z+32, r1	; 0x20
    60ca:	11 a2       	std	Z+33, r1	; 0x21
    60cc:	08 95       	ret

000060ce <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    60ce:	e0 e4       	ldi	r30, 0x40	; 64
    60d0:	f9 e0       	ldi	r31, 0x09	; 9
    60d2:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    60d4:	80 81       	ld	r24, Z
    60d6:	80 7f       	andi	r24, 0xF0	; 240
    60d8:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    60da:	10 a2       	std	Z+32, r1	; 0x20
    60dc:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    60de:	90 83       	st	Z, r25
    60e0:	08 95       	ret

000060e2 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    60e2:	e0 e4       	ldi	r30, 0x40	; 64
    60e4:	f9 e0       	ldi	r31, 0x09	; 9
    60e6:	81 81       	ldd	r24, Z+1	; 0x01
    60e8:	8f 70       	andi	r24, 0x0F	; 15
    60ea:	68 2b       	or	r22, r24
    60ec:	61 83       	std	Z+1, r22	; 0x01
    60ee:	08 95       	ret

000060f0 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    60f0:	e0 e4       	ldi	r30, 0x40	; 64
    60f2:	f9 e0       	ldi	r31, 0x09	; 9
    60f4:	81 81       	ldd	r24, Z+1	; 0x01
    60f6:	60 95       	com	r22
    60f8:	68 23       	and	r22, r24
    60fa:	61 83       	std	Z+1, r22	; 0x01
    60fc:	08 95       	ret

000060fe <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    60fe:	60 93 66 09 	sts	0x0966, r22
    6102:	70 93 67 09 	sts	0x0967, r23
    6106:	08 95       	ret

00006108 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    6108:	60 93 68 09 	sts	0x0968, r22
    610c:	70 93 69 09 	sts	0x0969, r23
    6110:	08 95       	ret

00006112 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    6112:	60 93 6a 09 	sts	0x096A, r22
    6116:	70 93 6b 09 	sts	0x096B, r23
    611a:	08 95       	ret

0000611c <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    611c:	61 15       	cp	r22, r1
    611e:	71 05       	cpc	r23, r1
    6120:	29 f0       	breq	.+10     	; 0x612c <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    6122:	e0 e4       	ldi	r30, 0x40	; 64
    6124:	f9 e0       	ldi	r31, 0x09	; 9
    6126:	86 81       	ldd	r24, Z+6	; 0x06
    6128:	28 2b       	or	r18, r24
    612a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    612c:	60 93 90 23 	sts	0x2390, r22
    6130:	70 93 91 23 	sts	0x2391, r23
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    6134:	40 93 86 24 	sts	0x2486, r20
    6138:	50 93 87 24 	sts	0x2487, r21
    613c:	08 95       	ret

0000613e <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    613e:	61 15       	cp	r22, r1
    6140:	71 05       	cpc	r23, r1
    6142:	29 f0       	breq	.+10     	; 0x614e <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    6144:	e0 e4       	ldi	r30, 0x40	; 64
    6146:	f9 e0       	ldi	r31, 0x09	; 9
    6148:	86 81       	ldd	r24, Z+6	; 0x06
    614a:	28 2b       	or	r18, r24
    614c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    614e:	60 93 92 23 	sts	0x2392, r22
    6152:	70 93 93 23 	sts	0x2393, r23
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    6156:	40 93 88 24 	sts	0x2488, r20
    615a:	50 93 89 24 	sts	0x2489, r21
    615e:	08 95       	ret

00006160 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    6160:	61 15       	cp	r22, r1
    6162:	71 05       	cpc	r23, r1
    6164:	29 f0       	breq	.+10     	; 0x6170 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    6166:	e0 e4       	ldi	r30, 0x40	; 64
    6168:	f9 e0       	ldi	r31, 0x09	; 9
    616a:	87 81       	ldd	r24, Z+7	; 0x07
    616c:	28 2b       	or	r18, r24
    616e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    6170:	60 93 94 23 	sts	0x2394, r22
    6174:	70 93 95 23 	sts	0x2395, r23
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    6178:	40 93 8a 24 	sts	0x248A, r20
    617c:	50 93 8b 24 	sts	0x248B, r21
    6180:	08 95       	ret

00006182 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6182:	61 15       	cp	r22, r1
    6184:	71 05       	cpc	r23, r1
    6186:	29 f0       	breq	.+10     	; 0x6192 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    6188:	e0 e4       	ldi	r30, 0x40	; 64
    618a:	f9 e0       	ldi	r31, 0x09	; 9
    618c:	87 81       	ldd	r24, Z+7	; 0x07
    618e:	28 2b       	or	r18, r24
    6190:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    6192:	60 93 96 23 	sts	0x2396, r22
    6196:	70 93 97 23 	sts	0x2397, r23
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    619a:	40 93 8c 24 	sts	0x248C, r20
    619e:	50 93 8d 24 	sts	0x248D, r21
    61a2:	08 95       	ret

000061a4 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    61a4:	cf 93       	push	r28
    61a6:	df 93       	push	r29
    61a8:	ec 01       	movw	r28, r24
    61aa:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN7CTimer1C1Ev>
    61ae:	8e e9       	ldi	r24, 0x9E	; 158
    61b0:	92 e2       	ldi	r25, 0x22	; 34
    61b2:	88 83       	st	Y, r24
    61b4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    61b6:	df 91       	pop	r29
    61b8:	cf 91       	pop	r28
    61ba:	08 95       	ret

000061bc <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    61bc:	2e e9       	ldi	r18, 0x9E	; 158
    61be:	32 e2       	ldi	r19, 0x22	; 34
    61c0:	fc 01       	movw	r30, r24
    61c2:	20 83       	st	Z, r18
    61c4:	31 83       	std	Z+1, r19	; 0x01
    61c6:	0e 94 0e 12 	call	0x241c	; 0x241c <_ZN7CTimer1D1Ev>
    61ca:	08 95       	ret

000061cc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    61cc:	fc 01       	movw	r30, r24
    61ce:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61d0:	e0 e0       	ldi	r30, 0x00	; 0
    61d2:	fb e0       	ldi	r31, 0x0B	; 11
    61d4:	80 81       	ld	r24, Z
    61d6:	80 7f       	andi	r24, 0xF0	; 240
    61d8:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    61da:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    61dc:	10 a2       	std	Z+32, r1	; 0x20
    61de:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    61e0:	10 a6       	std	Z+40, r1	; 0x28
    61e2:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    61e4:	12 a6       	std	Z+42, r1	; 0x2a
    61e6:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    61e8:	14 a6       	std	Z+44, r1	; 0x2c
    61ea:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    61ec:	16 a6       	std	Z+46, r1	; 0x2e
    61ee:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    61f0:	16 a2       	std	Z+38, r1	; 0x26
    61f2:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    61f4:	81 81       	ldd	r24, Z+1	; 0x01
    61f6:	88 7f       	andi	r24, 0xF8	; 248
    61f8:	68 2b       	or	r22, r24
    61fa:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    61fc:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    61fe:	17 82       	std	Z+7, r1	; 0x07
    6200:	08 95       	ret

00006202 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    6202:	e0 e0       	ldi	r30, 0x00	; 0
    6204:	fb e0       	ldi	r31, 0x0B	; 11
    6206:	66 a3       	std	Z+38, r22	; 0x26
    6208:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    620a:	20 81       	ld	r18, Z
    620c:	20 7f       	andi	r18, 0xF0	; 240
    620e:	dc 01       	movw	r26, r24
    6210:	12 96       	adiw	r26, 0x02	; 2
    6212:	9c 91       	ld	r25, X
    6214:	82 2f       	mov	r24, r18
    6216:	89 2b       	or	r24, r25
    6218:	80 83       	st	Z, r24
    621a:	08 95       	ret

0000621c <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    621c:	e0 e0       	ldi	r30, 0x00	; 0
    621e:	fb e0       	ldi	r31, 0x0B	; 11
    6220:	80 81       	ld	r24, Z
    6222:	80 7f       	andi	r24, 0xF0	; 240
    6224:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    6226:	10 a2       	std	Z+32, r1	; 0x20
    6228:	11 a2       	std	Z+33, r1	; 0x21
    622a:	08 95       	ret

0000622c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    622c:	e0 e0       	ldi	r30, 0x00	; 0
    622e:	fb e0       	ldi	r31, 0x0B	; 11
    6230:	81 81       	ldd	r24, Z+1	; 0x01
    6232:	68 2b       	or	r22, r24
    6234:	61 83       	std	Z+1, r22	; 0x01
    6236:	08 95       	ret

00006238 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    6238:	e0 e0       	ldi	r30, 0x00	; 0
    623a:	fb e0       	ldi	r31, 0x0B	; 11
    623c:	81 81       	ldd	r24, Z+1	; 0x01
    623e:	60 95       	com	r22
    6240:	68 23       	and	r22, r24
    6242:	61 83       	std	Z+1, r22	; 0x01
    6244:	08 95       	ret

00006246 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    6246:	e0 e0       	ldi	r30, 0x00	; 0
    6248:	fb e0       	ldi	r31, 0x0B	; 11
    624a:	82 81       	ldd	r24, Z+2	; 0x02
    624c:	62 95       	swap	r22
    624e:	6f 70       	andi	r22, 0x0F	; 15
    6250:	68 2b       	or	r22, r24
    6252:	62 83       	std	Z+2, r22	; 0x02
    6254:	08 95       	ret

00006256 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    6256:	e0 e0       	ldi	r30, 0x00	; 0
    6258:	fb e0       	ldi	r31, 0x0B	; 11
    625a:	82 81       	ldd	r24, Z+2	; 0x02
    625c:	62 95       	swap	r22
    625e:	6f 70       	andi	r22, 0x0F	; 15
    6260:	60 95       	com	r22
    6262:	68 23       	and	r22, r24
    6264:	62 83       	std	Z+2, r22	; 0x02
    6266:	08 95       	ret

00006268 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    6268:	60 93 26 0b 	sts	0x0B26, r22
    626c:	70 93 27 0b 	sts	0x0B27, r23
    6270:	08 95       	ret

00006272 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    6272:	60 93 28 0b 	sts	0x0B28, r22
    6276:	70 93 29 0b 	sts	0x0B29, r23
    627a:	08 95       	ret

0000627c <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    627c:	60 93 2a 0b 	sts	0x0B2A, r22
    6280:	70 93 2b 0b 	sts	0x0B2B, r23
    6284:	08 95       	ret

00006286 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    6286:	60 93 2c 0b 	sts	0x0B2C, r22
    628a:	70 93 2d 0b 	sts	0x0B2D, r23
    628e:	08 95       	ret

00006290 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    6290:	60 93 2e 0b 	sts	0x0B2E, r22
    6294:	70 93 2f 0b 	sts	0x0B2F, r23
    6298:	08 95       	ret

0000629a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    629a:	61 15       	cp	r22, r1
    629c:	71 05       	cpc	r23, r1
    629e:	29 f0       	breq	.+10     	; 0x62aa <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    62a0:	e0 e0       	ldi	r30, 0x00	; 0
    62a2:	fb e0       	ldi	r31, 0x0B	; 11
    62a4:	86 81       	ldd	r24, Z+6	; 0x06
    62a6:	28 2b       	or	r18, r24
    62a8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    62aa:	60 93 c2 23 	sts	0x23C2, r22
    62ae:	70 93 c3 23 	sts	0x23C3, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    62b2:	40 93 b8 24 	sts	0x24B8, r20
    62b6:	50 93 b9 24 	sts	0x24B9, r21
    62ba:	08 95       	ret

000062bc <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    62bc:	61 15       	cp	r22, r1
    62be:	71 05       	cpc	r23, r1
    62c0:	29 f0       	breq	.+10     	; 0x62cc <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    62c2:	e0 e0       	ldi	r30, 0x00	; 0
    62c4:	fb e0       	ldi	r31, 0x0B	; 11
    62c6:	86 81       	ldd	r24, Z+6	; 0x06
    62c8:	28 2b       	or	r18, r24
    62ca:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    62cc:	60 93 c4 23 	sts	0x23C4, r22
    62d0:	70 93 c5 23 	sts	0x23C5, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    62d4:	40 93 ba 24 	sts	0x24BA, r20
    62d8:	50 93 bb 24 	sts	0x24BB, r21
    62dc:	08 95       	ret

000062de <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    62de:	61 15       	cp	r22, r1
    62e0:	71 05       	cpc	r23, r1
    62e2:	29 f0       	breq	.+10     	; 0x62ee <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    62e4:	e0 e0       	ldi	r30, 0x00	; 0
    62e6:	fb e0       	ldi	r31, 0x0B	; 11
    62e8:	87 81       	ldd	r24, Z+7	; 0x07
    62ea:	28 2b       	or	r18, r24
    62ec:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    62ee:	60 93 c6 23 	sts	0x23C6, r22
    62f2:	70 93 c7 23 	sts	0x23C7, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    62f6:	40 93 bc 24 	sts	0x24BC, r20
    62fa:	50 93 bd 24 	sts	0x24BD, r21
    62fe:	08 95       	ret

00006300 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6300:	61 15       	cp	r22, r1
    6302:	71 05       	cpc	r23, r1
    6304:	29 f0       	breq	.+10     	; 0x6310 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    6306:	e0 e0       	ldi	r30, 0x00	; 0
    6308:	fb e0       	ldi	r31, 0x0B	; 11
    630a:	87 81       	ldd	r24, Z+7	; 0x07
    630c:	28 2b       	or	r18, r24
    630e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    6310:	60 93 c8 23 	sts	0x23C8, r22
    6314:	70 93 c9 23 	sts	0x23C9, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    6318:	40 93 be 24 	sts	0x24BE, r20
    631c:	50 93 bf 24 	sts	0x24BF, r21
    6320:	08 95       	ret

00006322 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    6322:	61 15       	cp	r22, r1
    6324:	71 05       	cpc	r23, r1
    6326:	29 f0       	breq	.+10     	; 0x6332 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6328:	e0 e0       	ldi	r30, 0x00	; 0
    632a:	fb e0       	ldi	r31, 0x0B	; 11
    632c:	87 81       	ldd	r24, Z+7	; 0x07
    632e:	28 2b       	or	r18, r24
    6330:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    6332:	60 93 ca 23 	sts	0x23CA, r22
    6336:	70 93 cb 23 	sts	0x23CB, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    633a:	40 93 c0 24 	sts	0x24C0, r20
    633e:	50 93 c1 24 	sts	0x24C1, r21
    6342:	08 95       	ret

00006344 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    6344:	61 15       	cp	r22, r1
    6346:	71 05       	cpc	r23, r1
    6348:	29 f0       	breq	.+10     	; 0x6354 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    634a:	e0 e0       	ldi	r30, 0x00	; 0
    634c:	fb e0       	ldi	r31, 0x0B	; 11
    634e:	87 81       	ldd	r24, Z+7	; 0x07
    6350:	28 2b       	or	r18, r24
    6352:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    6354:	60 93 cc 23 	sts	0x23CC, r22
    6358:	70 93 cd 23 	sts	0x23CD, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    635c:	40 93 c2 24 	sts	0x24C2, r20
    6360:	50 93 c3 24 	sts	0x24C3, r21
    6364:	08 95       	ret

00006366 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    6366:	cf 93       	push	r28
    6368:	df 93       	push	r29
    636a:	ec 01       	movw	r28, r24
    636c:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN6CTimerC1Ev>
    6370:	8c eb       	ldi	r24, 0xBC	; 188
    6372:	92 e2       	ldi	r25, 0x22	; 34
    6374:	88 83       	st	Y, r24
    6376:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    6378:	df 91       	pop	r29
    637a:	cf 91       	pop	r28
    637c:	08 95       	ret

0000637e <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    637e:	2c eb       	ldi	r18, 0xBC	; 188
    6380:	32 e2       	ldi	r19, 0x22	; 34
    6382:	fc 01       	movw	r30, r24
    6384:	20 83       	st	Z, r18
    6386:	31 83       	std	Z+1, r19	; 0x01
    6388:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN6CTimerD1Ev>
    638c:	08 95       	ret

0000638e <__fixsfsi>:
    638e:	0e 94 ce 31 	call	0x639c	; 0x639c <__fixunssfsi>
    6392:	68 94       	set
    6394:	b1 11       	cpse	r27, r1
    6396:	0c 94 5d 32 	jmp	0x64ba	; 0x64ba <__fp_szero>
    639a:	08 95       	ret

0000639c <__fixunssfsi>:
    639c:	0e 94 42 32 	call	0x6484	; 0x6484 <__fp_splitA>
    63a0:	88 f0       	brcs	.+34     	; 0x63c4 <__fixunssfsi+0x28>
    63a2:	9f 57       	subi	r25, 0x7F	; 127
    63a4:	98 f0       	brcs	.+38     	; 0x63cc <__fixunssfsi+0x30>
    63a6:	b9 2f       	mov	r27, r25
    63a8:	99 27       	eor	r25, r25
    63aa:	b7 51       	subi	r27, 0x17	; 23
    63ac:	b0 f0       	brcs	.+44     	; 0x63da <__fixunssfsi+0x3e>
    63ae:	e1 f0       	breq	.+56     	; 0x63e8 <__fixunssfsi+0x4c>
    63b0:	66 0f       	add	r22, r22
    63b2:	77 1f       	adc	r23, r23
    63b4:	88 1f       	adc	r24, r24
    63b6:	99 1f       	adc	r25, r25
    63b8:	1a f0       	brmi	.+6      	; 0x63c0 <__fixunssfsi+0x24>
    63ba:	ba 95       	dec	r27
    63bc:	c9 f7       	brne	.-14     	; 0x63b0 <__fixunssfsi+0x14>
    63be:	14 c0       	rjmp	.+40     	; 0x63e8 <__fixunssfsi+0x4c>
    63c0:	b1 30       	cpi	r27, 0x01	; 1
    63c2:	91 f0       	breq	.+36     	; 0x63e8 <__fixunssfsi+0x4c>
    63c4:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__fp_zero>
    63c8:	b1 e0       	ldi	r27, 0x01	; 1
    63ca:	08 95       	ret
    63cc:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__fp_zero>
    63d0:	67 2f       	mov	r22, r23
    63d2:	78 2f       	mov	r23, r24
    63d4:	88 27       	eor	r24, r24
    63d6:	b8 5f       	subi	r27, 0xF8	; 248
    63d8:	39 f0       	breq	.+14     	; 0x63e8 <__fixunssfsi+0x4c>
    63da:	b9 3f       	cpi	r27, 0xF9	; 249
    63dc:	cc f3       	brlt	.-14     	; 0x63d0 <__fixunssfsi+0x34>
    63de:	86 95       	lsr	r24
    63e0:	77 95       	ror	r23
    63e2:	67 95       	ror	r22
    63e4:	b3 95       	inc	r27
    63e6:	d9 f7       	brne	.-10     	; 0x63de <__fixunssfsi+0x42>
    63e8:	3e f4       	brtc	.+14     	; 0x63f8 <__fixunssfsi+0x5c>
    63ea:	90 95       	com	r25
    63ec:	80 95       	com	r24
    63ee:	70 95       	com	r23
    63f0:	61 95       	neg	r22
    63f2:	7f 4f       	sbci	r23, 0xFF	; 255
    63f4:	8f 4f       	sbci	r24, 0xFF	; 255
    63f6:	9f 4f       	sbci	r25, 0xFF	; 255
    63f8:	08 95       	ret

000063fa <__floatunsisf>:
    63fa:	e8 94       	clt
    63fc:	09 c0       	rjmp	.+18     	; 0x6410 <__floatsisf+0x12>

000063fe <__floatsisf>:
    63fe:	97 fb       	bst	r25, 7
    6400:	3e f4       	brtc	.+14     	; 0x6410 <__floatsisf+0x12>
    6402:	90 95       	com	r25
    6404:	80 95       	com	r24
    6406:	70 95       	com	r23
    6408:	61 95       	neg	r22
    640a:	7f 4f       	sbci	r23, 0xFF	; 255
    640c:	8f 4f       	sbci	r24, 0xFF	; 255
    640e:	9f 4f       	sbci	r25, 0xFF	; 255
    6410:	99 23       	and	r25, r25
    6412:	a9 f0       	breq	.+42     	; 0x643e <__floatsisf+0x40>
    6414:	f9 2f       	mov	r31, r25
    6416:	96 e9       	ldi	r25, 0x96	; 150
    6418:	bb 27       	eor	r27, r27
    641a:	93 95       	inc	r25
    641c:	f6 95       	lsr	r31
    641e:	87 95       	ror	r24
    6420:	77 95       	ror	r23
    6422:	67 95       	ror	r22
    6424:	b7 95       	ror	r27
    6426:	f1 11       	cpse	r31, r1
    6428:	f8 cf       	rjmp	.-16     	; 0x641a <__floatsisf+0x1c>
    642a:	fa f4       	brpl	.+62     	; 0x646a <__floatsisf+0x6c>
    642c:	bb 0f       	add	r27, r27
    642e:	11 f4       	brne	.+4      	; 0x6434 <__floatsisf+0x36>
    6430:	60 ff       	sbrs	r22, 0
    6432:	1b c0       	rjmp	.+54     	; 0x646a <__floatsisf+0x6c>
    6434:	6f 5f       	subi	r22, 0xFF	; 255
    6436:	7f 4f       	sbci	r23, 0xFF	; 255
    6438:	8f 4f       	sbci	r24, 0xFF	; 255
    643a:	9f 4f       	sbci	r25, 0xFF	; 255
    643c:	16 c0       	rjmp	.+44     	; 0x646a <__floatsisf+0x6c>
    643e:	88 23       	and	r24, r24
    6440:	11 f0       	breq	.+4      	; 0x6446 <__floatsisf+0x48>
    6442:	96 e9       	ldi	r25, 0x96	; 150
    6444:	11 c0       	rjmp	.+34     	; 0x6468 <__floatsisf+0x6a>
    6446:	77 23       	and	r23, r23
    6448:	21 f0       	breq	.+8      	; 0x6452 <__floatsisf+0x54>
    644a:	9e e8       	ldi	r25, 0x8E	; 142
    644c:	87 2f       	mov	r24, r23
    644e:	76 2f       	mov	r23, r22
    6450:	05 c0       	rjmp	.+10     	; 0x645c <__floatsisf+0x5e>
    6452:	66 23       	and	r22, r22
    6454:	71 f0       	breq	.+28     	; 0x6472 <__floatsisf+0x74>
    6456:	96 e8       	ldi	r25, 0x86	; 134
    6458:	86 2f       	mov	r24, r22
    645a:	70 e0       	ldi	r23, 0x00	; 0
    645c:	60 e0       	ldi	r22, 0x00	; 0
    645e:	2a f0       	brmi	.+10     	; 0x646a <__floatsisf+0x6c>
    6460:	9a 95       	dec	r25
    6462:	66 0f       	add	r22, r22
    6464:	77 1f       	adc	r23, r23
    6466:	88 1f       	adc	r24, r24
    6468:	da f7       	brpl	.-10     	; 0x6460 <__floatsisf+0x62>
    646a:	88 0f       	add	r24, r24
    646c:	96 95       	lsr	r25
    646e:	87 95       	ror	r24
    6470:	97 f9       	bld	r25, 7
    6472:	08 95       	ret

00006474 <__fp_split3>:
    6474:	57 fd       	sbrc	r21, 7
    6476:	90 58       	subi	r25, 0x80	; 128
    6478:	44 0f       	add	r20, r20
    647a:	55 1f       	adc	r21, r21
    647c:	59 f0       	breq	.+22     	; 0x6494 <__fp_splitA+0x10>
    647e:	5f 3f       	cpi	r21, 0xFF	; 255
    6480:	71 f0       	breq	.+28     	; 0x649e <__fp_splitA+0x1a>
    6482:	47 95       	ror	r20

00006484 <__fp_splitA>:
    6484:	88 0f       	add	r24, r24
    6486:	97 fb       	bst	r25, 7
    6488:	99 1f       	adc	r25, r25
    648a:	61 f0       	breq	.+24     	; 0x64a4 <__fp_splitA+0x20>
    648c:	9f 3f       	cpi	r25, 0xFF	; 255
    648e:	79 f0       	breq	.+30     	; 0x64ae <__fp_splitA+0x2a>
    6490:	87 95       	ror	r24
    6492:	08 95       	ret
    6494:	12 16       	cp	r1, r18
    6496:	13 06       	cpc	r1, r19
    6498:	14 06       	cpc	r1, r20
    649a:	55 1f       	adc	r21, r21
    649c:	f2 cf       	rjmp	.-28     	; 0x6482 <__fp_split3+0xe>
    649e:	46 95       	lsr	r20
    64a0:	f1 df       	rcall	.-30     	; 0x6484 <__fp_splitA>
    64a2:	08 c0       	rjmp	.+16     	; 0x64b4 <__fp_splitA+0x30>
    64a4:	16 16       	cp	r1, r22
    64a6:	17 06       	cpc	r1, r23
    64a8:	18 06       	cpc	r1, r24
    64aa:	99 1f       	adc	r25, r25
    64ac:	f1 cf       	rjmp	.-30     	; 0x6490 <__fp_splitA+0xc>
    64ae:	86 95       	lsr	r24
    64b0:	71 05       	cpc	r23, r1
    64b2:	61 05       	cpc	r22, r1
    64b4:	08 94       	sec
    64b6:	08 95       	ret

000064b8 <__fp_zero>:
    64b8:	e8 94       	clt

000064ba <__fp_szero>:
    64ba:	bb 27       	eor	r27, r27
    64bc:	66 27       	eor	r22, r22
    64be:	77 27       	eor	r23, r23
    64c0:	cb 01       	movw	r24, r22
    64c2:	97 f9       	bld	r25, 7
    64c4:	08 95       	ret

000064c6 <__mulsf3>:
    64c6:	0e 94 76 32 	call	0x64ec	; 0x64ec <__mulsf3x>
    64ca:	0c 94 e7 32 	jmp	0x65ce	; 0x65ce <__fp_round>
    64ce:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <__fp_pscA>
    64d2:	38 f0       	brcs	.+14     	; 0x64e2 <__mulsf3+0x1c>
    64d4:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__fp_pscB>
    64d8:	20 f0       	brcs	.+8      	; 0x64e2 <__mulsf3+0x1c>
    64da:	95 23       	and	r25, r21
    64dc:	11 f0       	breq	.+4      	; 0x64e2 <__mulsf3+0x1c>
    64de:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <__fp_inf>
    64e2:	0c 94 d6 32 	jmp	0x65ac	; 0x65ac <__fp_nan>
    64e6:	11 24       	eor	r1, r1
    64e8:	0c 94 5d 32 	jmp	0x64ba	; 0x64ba <__fp_szero>

000064ec <__mulsf3x>:
    64ec:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fp_split3>
    64f0:	70 f3       	brcs	.-36     	; 0x64ce <__mulsf3+0x8>

000064f2 <__mulsf3_pse>:
    64f2:	95 9f       	mul	r25, r21
    64f4:	c1 f3       	breq	.-16     	; 0x64e6 <__mulsf3+0x20>
    64f6:	95 0f       	add	r25, r21
    64f8:	50 e0       	ldi	r21, 0x00	; 0
    64fa:	55 1f       	adc	r21, r21
    64fc:	62 9f       	mul	r22, r18
    64fe:	f0 01       	movw	r30, r0
    6500:	72 9f       	mul	r23, r18
    6502:	bb 27       	eor	r27, r27
    6504:	f0 0d       	add	r31, r0
    6506:	b1 1d       	adc	r27, r1
    6508:	63 9f       	mul	r22, r19
    650a:	aa 27       	eor	r26, r26
    650c:	f0 0d       	add	r31, r0
    650e:	b1 1d       	adc	r27, r1
    6510:	aa 1f       	adc	r26, r26
    6512:	64 9f       	mul	r22, r20
    6514:	66 27       	eor	r22, r22
    6516:	b0 0d       	add	r27, r0
    6518:	a1 1d       	adc	r26, r1
    651a:	66 1f       	adc	r22, r22
    651c:	82 9f       	mul	r24, r18
    651e:	22 27       	eor	r18, r18
    6520:	b0 0d       	add	r27, r0
    6522:	a1 1d       	adc	r26, r1
    6524:	62 1f       	adc	r22, r18
    6526:	73 9f       	mul	r23, r19
    6528:	b0 0d       	add	r27, r0
    652a:	a1 1d       	adc	r26, r1
    652c:	62 1f       	adc	r22, r18
    652e:	83 9f       	mul	r24, r19
    6530:	a0 0d       	add	r26, r0
    6532:	61 1d       	adc	r22, r1
    6534:	22 1f       	adc	r18, r18
    6536:	74 9f       	mul	r23, r20
    6538:	33 27       	eor	r19, r19
    653a:	a0 0d       	add	r26, r0
    653c:	61 1d       	adc	r22, r1
    653e:	23 1f       	adc	r18, r19
    6540:	84 9f       	mul	r24, r20
    6542:	60 0d       	add	r22, r0
    6544:	21 1d       	adc	r18, r1
    6546:	82 2f       	mov	r24, r18
    6548:	76 2f       	mov	r23, r22
    654a:	6a 2f       	mov	r22, r26
    654c:	11 24       	eor	r1, r1
    654e:	9f 57       	subi	r25, 0x7F	; 127
    6550:	50 40       	sbci	r21, 0x00	; 0
    6552:	9a f0       	brmi	.+38     	; 0x657a <__mulsf3_pse+0x88>
    6554:	f1 f0       	breq	.+60     	; 0x6592 <__mulsf3_pse+0xa0>
    6556:	88 23       	and	r24, r24
    6558:	4a f0       	brmi	.+18     	; 0x656c <__mulsf3_pse+0x7a>
    655a:	ee 0f       	add	r30, r30
    655c:	ff 1f       	adc	r31, r31
    655e:	bb 1f       	adc	r27, r27
    6560:	66 1f       	adc	r22, r22
    6562:	77 1f       	adc	r23, r23
    6564:	88 1f       	adc	r24, r24
    6566:	91 50       	subi	r25, 0x01	; 1
    6568:	50 40       	sbci	r21, 0x00	; 0
    656a:	a9 f7       	brne	.-22     	; 0x6556 <__mulsf3_pse+0x64>
    656c:	9e 3f       	cpi	r25, 0xFE	; 254
    656e:	51 05       	cpc	r21, r1
    6570:	80 f0       	brcs	.+32     	; 0x6592 <__mulsf3_pse+0xa0>
    6572:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <__fp_inf>
    6576:	0c 94 5d 32 	jmp	0x64ba	; 0x64ba <__fp_szero>
    657a:	5f 3f       	cpi	r21, 0xFF	; 255
    657c:	e4 f3       	brlt	.-8      	; 0x6576 <__mulsf3_pse+0x84>
    657e:	98 3e       	cpi	r25, 0xE8	; 232
    6580:	d4 f3       	brlt	.-12     	; 0x6576 <__mulsf3_pse+0x84>
    6582:	86 95       	lsr	r24
    6584:	77 95       	ror	r23
    6586:	67 95       	ror	r22
    6588:	b7 95       	ror	r27
    658a:	f7 95       	ror	r31
    658c:	e7 95       	ror	r30
    658e:	9f 5f       	subi	r25, 0xFF	; 255
    6590:	c1 f7       	brne	.-16     	; 0x6582 <__mulsf3_pse+0x90>
    6592:	fe 2b       	or	r31, r30
    6594:	88 0f       	add	r24, r24
    6596:	91 1d       	adc	r25, r1
    6598:	96 95       	lsr	r25
    659a:	87 95       	ror	r24
    659c:	97 f9       	bld	r25, 7
    659e:	08 95       	ret

000065a0 <__fp_inf>:
    65a0:	97 f9       	bld	r25, 7
    65a2:	9f 67       	ori	r25, 0x7F	; 127
    65a4:	80 e8       	ldi	r24, 0x80	; 128
    65a6:	70 e0       	ldi	r23, 0x00	; 0
    65a8:	60 e0       	ldi	r22, 0x00	; 0
    65aa:	08 95       	ret

000065ac <__fp_nan>:
    65ac:	9f ef       	ldi	r25, 0xFF	; 255
    65ae:	80 ec       	ldi	r24, 0xC0	; 192
    65b0:	08 95       	ret

000065b2 <__fp_pscA>:
    65b2:	00 24       	eor	r0, r0
    65b4:	0a 94       	dec	r0
    65b6:	16 16       	cp	r1, r22
    65b8:	17 06       	cpc	r1, r23
    65ba:	18 06       	cpc	r1, r24
    65bc:	09 06       	cpc	r0, r25
    65be:	08 95       	ret

000065c0 <__fp_pscB>:
    65c0:	00 24       	eor	r0, r0
    65c2:	0a 94       	dec	r0
    65c4:	12 16       	cp	r1, r18
    65c6:	13 06       	cpc	r1, r19
    65c8:	14 06       	cpc	r1, r20
    65ca:	05 06       	cpc	r0, r21
    65cc:	08 95       	ret

000065ce <__fp_round>:
    65ce:	09 2e       	mov	r0, r25
    65d0:	03 94       	inc	r0
    65d2:	00 0c       	add	r0, r0
    65d4:	11 f4       	brne	.+4      	; 0x65da <__fp_round+0xc>
    65d6:	88 23       	and	r24, r24
    65d8:	52 f0       	brmi	.+20     	; 0x65ee <__fp_round+0x20>
    65da:	bb 0f       	add	r27, r27
    65dc:	40 f4       	brcc	.+16     	; 0x65ee <__fp_round+0x20>
    65de:	bf 2b       	or	r27, r31
    65e0:	11 f4       	brne	.+4      	; 0x65e6 <__fp_round+0x18>
    65e2:	60 ff       	sbrs	r22, 0
    65e4:	04 c0       	rjmp	.+8      	; 0x65ee <__fp_round+0x20>
    65e6:	6f 5f       	subi	r22, 0xFF	; 255
    65e8:	7f 4f       	sbci	r23, 0xFF	; 255
    65ea:	8f 4f       	sbci	r24, 0xFF	; 255
    65ec:	9f 4f       	sbci	r25, 0xFF	; 255
    65ee:	08 95       	ret

000065f0 <__mulsi3>:
    65f0:	db 01       	movw	r26, r22
    65f2:	8f 93       	push	r24
    65f4:	9f 93       	push	r25
    65f6:	0e 94 88 33 	call	0x6710	; 0x6710 <__muluhisi3>
    65fa:	bf 91       	pop	r27
    65fc:	af 91       	pop	r26
    65fe:	a2 9f       	mul	r26, r18
    6600:	80 0d       	add	r24, r0
    6602:	91 1d       	adc	r25, r1
    6604:	a3 9f       	mul	r26, r19
    6606:	90 0d       	add	r25, r0
    6608:	b2 9f       	mul	r27, r18
    660a:	90 0d       	add	r25, r0
    660c:	11 24       	eor	r1, r1
    660e:	08 95       	ret

00006610 <__udivmodhi4>:
    6610:	aa 1b       	sub	r26, r26
    6612:	bb 1b       	sub	r27, r27
    6614:	51 e1       	ldi	r21, 0x11	; 17
    6616:	07 c0       	rjmp	.+14     	; 0x6626 <__udivmodhi4_ep>

00006618 <__udivmodhi4_loop>:
    6618:	aa 1f       	adc	r26, r26
    661a:	bb 1f       	adc	r27, r27
    661c:	a6 17       	cp	r26, r22
    661e:	b7 07       	cpc	r27, r23
    6620:	10 f0       	brcs	.+4      	; 0x6626 <__udivmodhi4_ep>
    6622:	a6 1b       	sub	r26, r22
    6624:	b7 0b       	sbc	r27, r23

00006626 <__udivmodhi4_ep>:
    6626:	88 1f       	adc	r24, r24
    6628:	99 1f       	adc	r25, r25
    662a:	5a 95       	dec	r21
    662c:	a9 f7       	brne	.-22     	; 0x6618 <__udivmodhi4_loop>
    662e:	80 95       	com	r24
    6630:	90 95       	com	r25
    6632:	bc 01       	movw	r22, r24
    6634:	cd 01       	movw	r24, r26
    6636:	08 95       	ret

00006638 <__divmodhi4>:
    6638:	97 fb       	bst	r25, 7
    663a:	07 2e       	mov	r0, r23
    663c:	16 f4       	brtc	.+4      	; 0x6642 <__divmodhi4+0xa>
    663e:	00 94       	com	r0
    6640:	07 d0       	rcall	.+14     	; 0x6650 <__divmodhi4_neg1>
    6642:	77 fd       	sbrc	r23, 7
    6644:	09 d0       	rcall	.+18     	; 0x6658 <__divmodhi4_neg2>
    6646:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
    664a:	07 fc       	sbrc	r0, 7
    664c:	05 d0       	rcall	.+10     	; 0x6658 <__divmodhi4_neg2>
    664e:	3e f4       	brtc	.+14     	; 0x665e <__divmodhi4_exit>

00006650 <__divmodhi4_neg1>:
    6650:	90 95       	com	r25
    6652:	81 95       	neg	r24
    6654:	9f 4f       	sbci	r25, 0xFF	; 255
    6656:	08 95       	ret

00006658 <__divmodhi4_neg2>:
    6658:	70 95       	com	r23
    665a:	61 95       	neg	r22
    665c:	7f 4f       	sbci	r23, 0xFF	; 255

0000665e <__divmodhi4_exit>:
    665e:	08 95       	ret

00006660 <__udivmodsi4>:
    6660:	a1 e2       	ldi	r26, 0x21	; 33
    6662:	1a 2e       	mov	r1, r26
    6664:	aa 1b       	sub	r26, r26
    6666:	bb 1b       	sub	r27, r27
    6668:	fd 01       	movw	r30, r26
    666a:	0d c0       	rjmp	.+26     	; 0x6686 <__udivmodsi4_ep>

0000666c <__udivmodsi4_loop>:
    666c:	aa 1f       	adc	r26, r26
    666e:	bb 1f       	adc	r27, r27
    6670:	ee 1f       	adc	r30, r30
    6672:	ff 1f       	adc	r31, r31
    6674:	a2 17       	cp	r26, r18
    6676:	b3 07       	cpc	r27, r19
    6678:	e4 07       	cpc	r30, r20
    667a:	f5 07       	cpc	r31, r21
    667c:	20 f0       	brcs	.+8      	; 0x6686 <__udivmodsi4_ep>
    667e:	a2 1b       	sub	r26, r18
    6680:	b3 0b       	sbc	r27, r19
    6682:	e4 0b       	sbc	r30, r20
    6684:	f5 0b       	sbc	r31, r21

00006686 <__udivmodsi4_ep>:
    6686:	66 1f       	adc	r22, r22
    6688:	77 1f       	adc	r23, r23
    668a:	88 1f       	adc	r24, r24
    668c:	99 1f       	adc	r25, r25
    668e:	1a 94       	dec	r1
    6690:	69 f7       	brne	.-38     	; 0x666c <__udivmodsi4_loop>
    6692:	60 95       	com	r22
    6694:	70 95       	com	r23
    6696:	80 95       	com	r24
    6698:	90 95       	com	r25
    669a:	9b 01       	movw	r18, r22
    669c:	ac 01       	movw	r20, r24
    669e:	bd 01       	movw	r22, r26
    66a0:	cf 01       	movw	r24, r30
    66a2:	08 95       	ret

000066a4 <__divmodsi4>:
    66a4:	05 2e       	mov	r0, r21
    66a6:	97 fb       	bst	r25, 7
    66a8:	1e f4       	brtc	.+6      	; 0x66b0 <__divmodsi4+0xc>
    66aa:	00 94       	com	r0
    66ac:	0e 94 69 33 	call	0x66d2	; 0x66d2 <__negsi2>
    66b0:	57 fd       	sbrc	r21, 7
    66b2:	07 d0       	rcall	.+14     	; 0x66c2 <__divmodsi4_neg2>
    66b4:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    66b8:	07 fc       	sbrc	r0, 7
    66ba:	03 d0       	rcall	.+6      	; 0x66c2 <__divmodsi4_neg2>
    66bc:	4e f4       	brtc	.+18     	; 0x66d0 <__divmodsi4_exit>
    66be:	0c 94 69 33 	jmp	0x66d2	; 0x66d2 <__negsi2>

000066c2 <__divmodsi4_neg2>:
    66c2:	50 95       	com	r21
    66c4:	40 95       	com	r20
    66c6:	30 95       	com	r19
    66c8:	21 95       	neg	r18
    66ca:	3f 4f       	sbci	r19, 0xFF	; 255
    66cc:	4f 4f       	sbci	r20, 0xFF	; 255
    66ce:	5f 4f       	sbci	r21, 0xFF	; 255

000066d0 <__divmodsi4_exit>:
    66d0:	08 95       	ret

000066d2 <__negsi2>:
    66d2:	90 95       	com	r25
    66d4:	80 95       	com	r24
    66d6:	70 95       	com	r23
    66d8:	61 95       	neg	r22
    66da:	7f 4f       	sbci	r23, 0xFF	; 255
    66dc:	8f 4f       	sbci	r24, 0xFF	; 255
    66de:	9f 4f       	sbci	r25, 0xFF	; 255
    66e0:	08 95       	ret

000066e2 <__tablejump2__>:
    66e2:	ee 0f       	add	r30, r30
    66e4:	ff 1f       	adc	r31, r31
    66e6:	88 1f       	adc	r24, r24
    66e8:	8b bf       	out	0x3b, r24	; 59
    66ea:	07 90       	elpm	r0, Z+
    66ec:	f6 91       	elpm	r31, Z
    66ee:	e0 2d       	mov	r30, r0
    66f0:	19 94       	eijmp

000066f2 <__umulhisi3>:
    66f2:	a2 9f       	mul	r26, r18
    66f4:	b0 01       	movw	r22, r0
    66f6:	b3 9f       	mul	r27, r19
    66f8:	c0 01       	movw	r24, r0
    66fa:	a3 9f       	mul	r26, r19
    66fc:	70 0d       	add	r23, r0
    66fe:	81 1d       	adc	r24, r1
    6700:	11 24       	eor	r1, r1
    6702:	91 1d       	adc	r25, r1
    6704:	b2 9f       	mul	r27, r18
    6706:	70 0d       	add	r23, r0
    6708:	81 1d       	adc	r24, r1
    670a:	11 24       	eor	r1, r1
    670c:	91 1d       	adc	r25, r1
    670e:	08 95       	ret

00006710 <__muluhisi3>:
    6710:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__umulhisi3>
    6714:	a5 9f       	mul	r26, r21
    6716:	90 0d       	add	r25, r0
    6718:	b4 9f       	mul	r27, r20
    671a:	90 0d       	add	r25, r0
    671c:	a4 9f       	mul	r26, r20
    671e:	80 0d       	add	r24, r0
    6720:	91 1d       	adc	r25, r1
    6722:	11 24       	eor	r1, r1
    6724:	08 95       	ret

00006726 <malloc>:
    6726:	cf 93       	push	r28
    6728:	df 93       	push	r29
    672a:	82 30       	cpi	r24, 0x02	; 2
    672c:	91 05       	cpc	r25, r1
    672e:	10 f4       	brcc	.+4      	; 0x6734 <malloc+0xe>
    6730:	82 e0       	ldi	r24, 0x02	; 2
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	e0 91 a7 25 	lds	r30, 0x25A7
    6738:	f0 91 a8 25 	lds	r31, 0x25A8
    673c:	20 e0       	ldi	r18, 0x00	; 0
    673e:	30 e0       	ldi	r19, 0x00	; 0
    6740:	c0 e0       	ldi	r28, 0x00	; 0
    6742:	d0 e0       	ldi	r29, 0x00	; 0
    6744:	30 97       	sbiw	r30, 0x00	; 0
    6746:	11 f1       	breq	.+68     	; 0x678c <malloc+0x66>
    6748:	40 81       	ld	r20, Z
    674a:	51 81       	ldd	r21, Z+1	; 0x01
    674c:	48 17       	cp	r20, r24
    674e:	59 07       	cpc	r21, r25
    6750:	c0 f0       	brcs	.+48     	; 0x6782 <malloc+0x5c>
    6752:	48 17       	cp	r20, r24
    6754:	59 07       	cpc	r21, r25
    6756:	61 f4       	brne	.+24     	; 0x6770 <malloc+0x4a>
    6758:	82 81       	ldd	r24, Z+2	; 0x02
    675a:	93 81       	ldd	r25, Z+3	; 0x03
    675c:	20 97       	sbiw	r28, 0x00	; 0
    675e:	19 f0       	breq	.+6      	; 0x6766 <malloc+0x40>
    6760:	8a 83       	std	Y+2, r24	; 0x02
    6762:	9b 83       	std	Y+3, r25	; 0x03
    6764:	2b c0       	rjmp	.+86     	; 0x67bc <malloc+0x96>
    6766:	80 93 a7 25 	sts	0x25A7, r24
    676a:	90 93 a8 25 	sts	0x25A8, r25
    676e:	26 c0       	rjmp	.+76     	; 0x67bc <malloc+0x96>
    6770:	21 15       	cp	r18, r1
    6772:	31 05       	cpc	r19, r1
    6774:	19 f0       	breq	.+6      	; 0x677c <malloc+0x56>
    6776:	42 17       	cp	r20, r18
    6778:	53 07       	cpc	r21, r19
    677a:	18 f4       	brcc	.+6      	; 0x6782 <malloc+0x5c>
    677c:	9a 01       	movw	r18, r20
    677e:	be 01       	movw	r22, r28
    6780:	df 01       	movw	r26, r30
    6782:	ef 01       	movw	r28, r30
    6784:	02 80       	ldd	r0, Z+2	; 0x02
    6786:	f3 81       	ldd	r31, Z+3	; 0x03
    6788:	e0 2d       	mov	r30, r0
    678a:	dc cf       	rjmp	.-72     	; 0x6744 <malloc+0x1e>
    678c:	21 15       	cp	r18, r1
    678e:	31 05       	cpc	r19, r1
    6790:	09 f1       	breq	.+66     	; 0x67d4 <malloc+0xae>
    6792:	28 1b       	sub	r18, r24
    6794:	39 0b       	sbc	r19, r25
    6796:	24 30       	cpi	r18, 0x04	; 4
    6798:	31 05       	cpc	r19, r1
    679a:	90 f4       	brcc	.+36     	; 0x67c0 <malloc+0x9a>
    679c:	12 96       	adiw	r26, 0x02	; 2
    679e:	8d 91       	ld	r24, X+
    67a0:	9c 91       	ld	r25, X
    67a2:	13 97       	sbiw	r26, 0x03	; 3
    67a4:	61 15       	cp	r22, r1
    67a6:	71 05       	cpc	r23, r1
    67a8:	21 f0       	breq	.+8      	; 0x67b2 <malloc+0x8c>
    67aa:	fb 01       	movw	r30, r22
    67ac:	82 83       	std	Z+2, r24	; 0x02
    67ae:	93 83       	std	Z+3, r25	; 0x03
    67b0:	04 c0       	rjmp	.+8      	; 0x67ba <malloc+0x94>
    67b2:	80 93 a7 25 	sts	0x25A7, r24
    67b6:	90 93 a8 25 	sts	0x25A8, r25
    67ba:	fd 01       	movw	r30, r26
    67bc:	32 96       	adiw	r30, 0x02	; 2
    67be:	44 c0       	rjmp	.+136    	; 0x6848 <malloc+0x122>
    67c0:	fd 01       	movw	r30, r26
    67c2:	e2 0f       	add	r30, r18
    67c4:	f3 1f       	adc	r31, r19
    67c6:	81 93       	st	Z+, r24
    67c8:	91 93       	st	Z+, r25
    67ca:	22 50       	subi	r18, 0x02	; 2
    67cc:	31 09       	sbc	r19, r1
    67ce:	2d 93       	st	X+, r18
    67d0:	3c 93       	st	X, r19
    67d2:	3a c0       	rjmp	.+116    	; 0x6848 <malloc+0x122>
    67d4:	20 91 a5 25 	lds	r18, 0x25A5
    67d8:	30 91 a6 25 	lds	r19, 0x25A6
    67dc:	23 2b       	or	r18, r19
    67de:	41 f4       	brne	.+16     	; 0x67f0 <malloc+0xca>
    67e0:	20 91 02 20 	lds	r18, 0x2002
    67e4:	30 91 03 20 	lds	r19, 0x2003
    67e8:	20 93 a5 25 	sts	0x25A5, r18
    67ec:	30 93 a6 25 	sts	0x25A6, r19
    67f0:	20 91 00 20 	lds	r18, 0x2000
    67f4:	30 91 01 20 	lds	r19, 0x2001
    67f8:	21 15       	cp	r18, r1
    67fa:	31 05       	cpc	r19, r1
    67fc:	41 f4       	brne	.+16     	; 0x680e <malloc+0xe8>
    67fe:	2d b7       	in	r18, 0x3d	; 61
    6800:	3e b7       	in	r19, 0x3e	; 62
    6802:	40 91 04 20 	lds	r20, 0x2004
    6806:	50 91 05 20 	lds	r21, 0x2005
    680a:	24 1b       	sub	r18, r20
    680c:	35 0b       	sbc	r19, r21
    680e:	e0 91 a5 25 	lds	r30, 0x25A5
    6812:	f0 91 a6 25 	lds	r31, 0x25A6
    6816:	e2 17       	cp	r30, r18
    6818:	f3 07       	cpc	r31, r19
    681a:	a0 f4       	brcc	.+40     	; 0x6844 <malloc+0x11e>
    681c:	2e 1b       	sub	r18, r30
    681e:	3f 0b       	sbc	r19, r31
    6820:	28 17       	cp	r18, r24
    6822:	39 07       	cpc	r19, r25
    6824:	78 f0       	brcs	.+30     	; 0x6844 <malloc+0x11e>
    6826:	ac 01       	movw	r20, r24
    6828:	4e 5f       	subi	r20, 0xFE	; 254
    682a:	5f 4f       	sbci	r21, 0xFF	; 255
    682c:	24 17       	cp	r18, r20
    682e:	35 07       	cpc	r19, r21
    6830:	48 f0       	brcs	.+18     	; 0x6844 <malloc+0x11e>
    6832:	4e 0f       	add	r20, r30
    6834:	5f 1f       	adc	r21, r31
    6836:	40 93 a5 25 	sts	0x25A5, r20
    683a:	50 93 a6 25 	sts	0x25A6, r21
    683e:	81 93       	st	Z+, r24
    6840:	91 93       	st	Z+, r25
    6842:	02 c0       	rjmp	.+4      	; 0x6848 <malloc+0x122>
    6844:	e0 e0       	ldi	r30, 0x00	; 0
    6846:	f0 e0       	ldi	r31, 0x00	; 0
    6848:	cf 01       	movw	r24, r30
    684a:	df 91       	pop	r29
    684c:	cf 91       	pop	r28
    684e:	08 95       	ret

00006850 <free>:
    6850:	0f 93       	push	r16
    6852:	1f 93       	push	r17
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	00 97       	sbiw	r24, 0x00	; 0
    685a:	09 f4       	brne	.+2      	; 0x685e <free+0xe>
    685c:	8c c0       	rjmp	.+280    	; 0x6976 <free+0x126>
    685e:	fc 01       	movw	r30, r24
    6860:	32 97       	sbiw	r30, 0x02	; 2
    6862:	12 82       	std	Z+2, r1	; 0x02
    6864:	13 82       	std	Z+3, r1	; 0x03
    6866:	00 91 a7 25 	lds	r16, 0x25A7
    686a:	10 91 a8 25 	lds	r17, 0x25A8
    686e:	01 15       	cp	r16, r1
    6870:	11 05       	cpc	r17, r1
    6872:	81 f4       	brne	.+32     	; 0x6894 <free+0x44>
    6874:	20 81       	ld	r18, Z
    6876:	31 81       	ldd	r19, Z+1	; 0x01
    6878:	82 0f       	add	r24, r18
    687a:	93 1f       	adc	r25, r19
    687c:	20 91 a5 25 	lds	r18, 0x25A5
    6880:	30 91 a6 25 	lds	r19, 0x25A6
    6884:	28 17       	cp	r18, r24
    6886:	39 07       	cpc	r19, r25
    6888:	79 f5       	brne	.+94     	; 0x68e8 <free+0x98>
    688a:	e0 93 a5 25 	sts	0x25A5, r30
    688e:	f0 93 a6 25 	sts	0x25A6, r31
    6892:	71 c0       	rjmp	.+226    	; 0x6976 <free+0x126>
    6894:	d8 01       	movw	r26, r16
    6896:	40 e0       	ldi	r20, 0x00	; 0
    6898:	50 e0       	ldi	r21, 0x00	; 0
    689a:	ae 17       	cp	r26, r30
    689c:	bf 07       	cpc	r27, r31
    689e:	50 f4       	brcc	.+20     	; 0x68b4 <free+0x64>
    68a0:	12 96       	adiw	r26, 0x02	; 2
    68a2:	2d 91       	ld	r18, X+
    68a4:	3c 91       	ld	r19, X
    68a6:	13 97       	sbiw	r26, 0x03	; 3
    68a8:	ad 01       	movw	r20, r26
    68aa:	21 15       	cp	r18, r1
    68ac:	31 05       	cpc	r19, r1
    68ae:	09 f1       	breq	.+66     	; 0x68f2 <free+0xa2>
    68b0:	d9 01       	movw	r26, r18
    68b2:	f3 cf       	rjmp	.-26     	; 0x689a <free+0x4a>
    68b4:	9d 01       	movw	r18, r26
    68b6:	da 01       	movw	r26, r20
    68b8:	22 83       	std	Z+2, r18	; 0x02
    68ba:	33 83       	std	Z+3, r19	; 0x03
    68bc:	60 81       	ld	r22, Z
    68be:	71 81       	ldd	r23, Z+1	; 0x01
    68c0:	86 0f       	add	r24, r22
    68c2:	97 1f       	adc	r25, r23
    68c4:	82 17       	cp	r24, r18
    68c6:	93 07       	cpc	r25, r19
    68c8:	69 f4       	brne	.+26     	; 0x68e4 <free+0x94>
    68ca:	ec 01       	movw	r28, r24
    68cc:	28 81       	ld	r18, Y
    68ce:	39 81       	ldd	r19, Y+1	; 0x01
    68d0:	26 0f       	add	r18, r22
    68d2:	37 1f       	adc	r19, r23
    68d4:	2e 5f       	subi	r18, 0xFE	; 254
    68d6:	3f 4f       	sbci	r19, 0xFF	; 255
    68d8:	20 83       	st	Z, r18
    68da:	31 83       	std	Z+1, r19	; 0x01
    68dc:	8a 81       	ldd	r24, Y+2	; 0x02
    68de:	9b 81       	ldd	r25, Y+3	; 0x03
    68e0:	82 83       	std	Z+2, r24	; 0x02
    68e2:	93 83       	std	Z+3, r25	; 0x03
    68e4:	45 2b       	or	r20, r21
    68e6:	29 f4       	brne	.+10     	; 0x68f2 <free+0xa2>
    68e8:	e0 93 a7 25 	sts	0x25A7, r30
    68ec:	f0 93 a8 25 	sts	0x25A8, r31
    68f0:	42 c0       	rjmp	.+132    	; 0x6976 <free+0x126>
    68f2:	12 96       	adiw	r26, 0x02	; 2
    68f4:	ed 93       	st	X+, r30
    68f6:	fc 93       	st	X, r31
    68f8:	13 97       	sbiw	r26, 0x03	; 3
    68fa:	ed 01       	movw	r28, r26
    68fc:	49 91       	ld	r20, Y+
    68fe:	59 91       	ld	r21, Y+
    6900:	9e 01       	movw	r18, r28
    6902:	24 0f       	add	r18, r20
    6904:	35 1f       	adc	r19, r21
    6906:	e2 17       	cp	r30, r18
    6908:	f3 07       	cpc	r31, r19
    690a:	71 f4       	brne	.+28     	; 0x6928 <free+0xd8>
    690c:	80 81       	ld	r24, Z
    690e:	91 81       	ldd	r25, Z+1	; 0x01
    6910:	84 0f       	add	r24, r20
    6912:	95 1f       	adc	r25, r21
    6914:	02 96       	adiw	r24, 0x02	; 2
    6916:	8d 93       	st	X+, r24
    6918:	9c 93       	st	X, r25
    691a:	11 97       	sbiw	r26, 0x01	; 1
    691c:	82 81       	ldd	r24, Z+2	; 0x02
    691e:	93 81       	ldd	r25, Z+3	; 0x03
    6920:	12 96       	adiw	r26, 0x02	; 2
    6922:	8d 93       	st	X+, r24
    6924:	9c 93       	st	X, r25
    6926:	13 97       	sbiw	r26, 0x03	; 3
    6928:	e0 e0       	ldi	r30, 0x00	; 0
    692a:	f0 e0       	ldi	r31, 0x00	; 0
    692c:	d8 01       	movw	r26, r16
    692e:	12 96       	adiw	r26, 0x02	; 2
    6930:	8d 91       	ld	r24, X+
    6932:	9c 91       	ld	r25, X
    6934:	13 97       	sbiw	r26, 0x03	; 3
    6936:	00 97       	sbiw	r24, 0x00	; 0
    6938:	19 f0       	breq	.+6      	; 0x6940 <free+0xf0>
    693a:	f8 01       	movw	r30, r16
    693c:	8c 01       	movw	r16, r24
    693e:	f6 cf       	rjmp	.-20     	; 0x692c <free+0xdc>
    6940:	8d 91       	ld	r24, X+
    6942:	9c 91       	ld	r25, X
    6944:	98 01       	movw	r18, r16
    6946:	2e 5f       	subi	r18, 0xFE	; 254
    6948:	3f 4f       	sbci	r19, 0xFF	; 255
    694a:	82 0f       	add	r24, r18
    694c:	93 1f       	adc	r25, r19
    694e:	20 91 a5 25 	lds	r18, 0x25A5
    6952:	30 91 a6 25 	lds	r19, 0x25A6
    6956:	28 17       	cp	r18, r24
    6958:	39 07       	cpc	r19, r25
    695a:	69 f4       	brne	.+26     	; 0x6976 <free+0x126>
    695c:	30 97       	sbiw	r30, 0x00	; 0
    695e:	29 f4       	brne	.+10     	; 0x696a <free+0x11a>
    6960:	10 92 a7 25 	sts	0x25A7, r1
    6964:	10 92 a8 25 	sts	0x25A8, r1
    6968:	02 c0       	rjmp	.+4      	; 0x696e <free+0x11e>
    696a:	12 82       	std	Z+2, r1	; 0x02
    696c:	13 82       	std	Z+3, r1	; 0x03
    696e:	00 93 a5 25 	sts	0x25A5, r16
    6972:	10 93 a6 25 	sts	0x25A6, r17
    6976:	df 91       	pop	r29
    6978:	cf 91       	pop	r28
    697a:	1f 91       	pop	r17
    697c:	0f 91       	pop	r16
    697e:	08 95       	ret

00006980 <memcpy>:
    6980:	fb 01       	movw	r30, r22
    6982:	dc 01       	movw	r26, r24
    6984:	02 c0       	rjmp	.+4      	; 0x698a <memcpy+0xa>
    6986:	01 90       	ld	r0, Z+
    6988:	0d 92       	st	X+, r0
    698a:	41 50       	subi	r20, 0x01	; 1
    698c:	50 40       	sbci	r21, 0x00	; 0
    698e:	d8 f7       	brcc	.-10     	; 0x6986 <memcpy+0x6>
    6990:	08 95       	ret

00006992 <eeprom_read_dword>:
    6992:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <eeprom_mapen>
    6996:	60 81       	ld	r22, Z
    6998:	71 81       	ldd	r23, Z+1	; 0x01
    699a:	82 81       	ldd	r24, Z+2	; 0x02
    699c:	93 81       	ldd	r25, Z+3	; 0x03
    699e:	08 95       	ret

000069a0 <eeprom_write_dword>:
    69a0:	24 2f       	mov	r18, r20
    69a2:	0e 94 ee 34 	call	0x69dc	; 0x69dc <eeprom_write_r18>
    69a6:	25 2f       	mov	r18, r21
    69a8:	0e 94 ee 34 	call	0x69dc	; 0x69dc <eeprom_write_r18>
    69ac:	0c 94 d8 34 	jmp	0x69b0	; 0x69b0 <eeprom_write_word>

000069b0 <eeprom_write_word>:
    69b0:	0e 94 ed 34 	call	0x69da	; 0x69da <eeprom_write_byte>
    69b4:	27 2f       	mov	r18, r23
    69b6:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <eeprom_write_r18>

000069ba <eeprom_read_byte>:
    69ba:	03 d0       	rcall	.+6      	; 0x69c2 <eeprom_mapen>
    69bc:	80 81       	ld	r24, Z
    69be:	99 27       	eor	r25, r25
    69c0:	08 95       	ret

000069c2 <eeprom_mapen>:
    69c2:	e0 ec       	ldi	r30, 0xC0	; 192
    69c4:	f1 e0       	ldi	r31, 0x01	; 1
    69c6:	37 85       	ldd	r19, Z+15	; 0x0f
    69c8:	37 fd       	sbrc	r19, 7
    69ca:	fd cf       	rjmp	.-6      	; 0x69c6 <eeprom_mapen+0x4>
    69cc:	34 85       	ldd	r19, Z+12	; 0x0c
    69ce:	38 60       	ori	r19, 0x08	; 8
    69d0:	34 87       	std	Z+12, r19	; 0x0c
    69d2:	fc 01       	movw	r30, r24
    69d4:	e0 50       	subi	r30, 0x00	; 0
    69d6:	f0 4f       	sbci	r31, 0xF0	; 240
    69d8:	08 95       	ret

000069da <eeprom_write_byte>:
    69da:	26 2f       	mov	r18, r22

000069dc <eeprom_write_r18>:
    69dc:	e0 ec       	ldi	r30, 0xC0	; 192
    69de:	f1 e0       	ldi	r31, 0x01	; 1
    69e0:	37 85       	ldd	r19, Z+15	; 0x0f
    69e2:	37 fd       	sbrc	r19, 7
    69e4:	fd cf       	rjmp	.-6      	; 0x69e0 <eeprom_write_r18+0x4>
    69e6:	34 85       	ldd	r19, Z+12	; 0x0c
    69e8:	37 7f       	andi	r19, 0xF7	; 247
    69ea:	34 87       	std	Z+12, r19	; 0x0c
    69ec:	37 85       	ldd	r19, Z+15	; 0x0f
    69ee:	31 ff       	sbrs	r19, 1
    69f0:	09 c0       	rjmp	.+18     	; 0x6a04 <eeprom_write_r18+0x28>
    69f2:	36 e3       	ldi	r19, 0x36	; 54
    69f4:	32 87       	std	Z+10, r19	; 0x0a
    69f6:	38 ed       	ldi	r19, 0xD8	; 216
    69f8:	34 bf       	out	0x34, r19	; 52
    69fa:	31 e0       	ldi	r19, 0x01	; 1
    69fc:	33 87       	std	Z+11, r19	; 0x0b
    69fe:	37 85       	ldd	r19, Z+15	; 0x0f
    6a00:	37 fd       	sbrc	r19, 7
    6a02:	fd cf       	rjmp	.-6      	; 0x69fe <eeprom_write_r18+0x22>
    6a04:	33 e3       	ldi	r19, 0x33	; 51
    6a06:	32 87       	std	Z+10, r19	; 0x0a
    6a08:	80 83       	st	Z, r24
    6a0a:	91 83       	std	Z+1, r25	; 0x01
    6a0c:	12 82       	std	Z+2, r1	; 0x02
    6a0e:	24 83       	std	Z+4, r18	; 0x04
    6a10:	25 e3       	ldi	r18, 0x35	; 53
    6a12:	22 87       	std	Z+10, r18	; 0x0a
    6a14:	28 ed       	ldi	r18, 0xD8	; 216
    6a16:	31 e0       	ldi	r19, 0x01	; 1
    6a18:	24 bf       	out	0x34, r18	; 52
    6a1a:	33 87       	std	Z+11, r19	; 0x0b
    6a1c:	01 96       	adiw	r24, 0x01	; 1
    6a1e:	08 95       	ret

00006a20 <__do_global_dtors>:
    6a20:	12 e0       	ldi	r17, 0x02	; 2
    6a22:	cc e8       	ldi	r28, 0x8C	; 140
    6a24:	d2 e0       	ldi	r29, 0x02	; 2
    6a26:	00 e0       	ldi	r16, 0x00	; 0
    6a28:	06 c0       	rjmp	.+12     	; 0x6a36 <__do_global_dtors+0x16>
    6a2a:	80 2f       	mov	r24, r16
    6a2c:	fe 01       	movw	r30, r28
    6a2e:	0e 94 71 33 	call	0x66e2	; 0x66e2 <__tablejump2__>
    6a32:	21 96       	adiw	r28, 0x01	; 1
    6a34:	01 1d       	adc	r16, r1
    6a36:	cd 38       	cpi	r28, 0x8D	; 141
    6a38:	d1 07       	cpc	r29, r17
    6a3a:	80 e0       	ldi	r24, 0x00	; 0
    6a3c:	08 07       	cpc	r16, r24
    6a3e:	a9 f7       	brne	.-22     	; 0x6a2a <__do_global_dtors+0xa>
    6a40:	f8 94       	cli

00006a42 <__stop_program>:
    6a42:	ff cf       	rjmp	.-2      	; 0x6a42 <__stop_program>
