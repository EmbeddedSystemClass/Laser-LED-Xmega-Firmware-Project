
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00802000  00004eec  00004f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000266  00802134  00802134  000050b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bfe1  00000000  00000000  00005a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022cf  00000000  00000000  000119e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000287f  00000000  00000000  00013cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f6c  00000000  00000000  00016534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004bfd  00000000  00000000  000194a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e3f  00000000  00000000  0001e09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  00025edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__dtors_end>
       4:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__vector_1>
       8:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_2>
       c:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__vector_3>
      10:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_4>
      14:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__vector_5>
      18:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_6>
      1c:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__vector_7>
      20:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_8>
      24:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_9>
      28:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__vector_10>
      2c:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_11>
      30:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__vector_12>
      34:	0c 94 96 10 	jmp	0x212c	; 0x212c <__vector_13>
      38:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_14>
      3c:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__vector_15>
      40:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__vector_16>
      44:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__vector_17>
      48:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__vector_18>
      4c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_19>
      50:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__vector_20>
      54:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_21>
      58:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__vector_22>
      5c:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__vector_23>
      60:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_24>
      64:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__vector_25>
      68:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__vector_26>
      6c:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__vector_27>
      70:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_28>
      74:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__vector_29>
      78:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_30>
      7c:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__vector_31>
      80:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_32>
      84:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__vector_33>
      88:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__vector_34>
      8c:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__vector_35>
      90:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__vector_36>
      94:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__vector_37>
      98:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__vector_38>
      9c:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__vector_39>
      a0:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__vector_40>
      a4:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_41>
      a8:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__vector_42>
      ac:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__vector_43>
      b0:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__vector_44>
      b4:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__vector_45>
      b8:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__vector_46>
      bc:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__vector_47>
      c0:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__vector_48>
      c4:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_49>
      c8:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__vector_50>
      cc:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__vector_51>
      d0:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__vector_52>
      d4:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__vector_53>
      d8:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__vector_54>
      dc:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__vector_55>
      e0:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__vector_56>
      e4:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__vector_57>
      e8:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__vector_58>
      ec:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__vector_59>
      f0:	0c 94 95 19 	jmp	0x332a	; 0x332a <__vector_60>
      f4:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__vector_61>
      f8:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__vector_62>
      fc:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__vector_63>
     100:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__vector_64>
     104:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__vector_65>
     108:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__vector_66>
     10c:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__vector_67>
     110:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__vector_68>
     114:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_69>
     118:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__vector_70>
     11c:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <__vector_71>
     120:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__vector_72>
     124:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__vector_73>
     128:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__vector_74>
     12c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     130:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     134:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__vector_77>
     138:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__vector_78>
     13c:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__vector_79>
     140:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__vector_80>
     144:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__vector_81>
     148:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__vector_82>
     14c:	0c 94 9a 1d 	jmp	0x3b34	; 0x3b34 <__vector_83>
     150:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__vector_84>
     154:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__vector_85>
     158:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__vector_86>
     15c:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__vector_87>
     160:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__vector_88>
     164:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__vector_89>
     168:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__vector_90>
     16c:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__vector_91>
     170:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__vector_92>
     174:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__vector_93>
     178:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     17c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     180:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     184:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     188:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     18c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     190:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     194:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     198:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     19c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1a0:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__vector_104>
     1a4:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__vector_105>
     1a8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1ac:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1b0:	0c 94 17 20 	jmp	0x402e	; 0x402e <__vector_108>
     1b4:	0c 94 48 20 	jmp	0x4090	; 0x4090 <__vector_109>
     1b8:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__vector_110>
     1bc:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__vector_111>
     1c0:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__vector_112>
     1c4:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__vector_113>
     1c8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1cc:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1d0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1d4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1d8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1dc:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__vector_119>
     1e0:	0c 94 6e 21 	jmp	0x42dc	; 0x42dc <__vector_120>
     1e4:	0c 94 9f 21 	jmp	0x433e	; 0x433e <__vector_121>
     1e8:	cd 03       	fmulsu	r20, r21
     1ea:	d0 03       	fmuls	r21, r16
     1ec:	e1 03       	fmuls	r22, r17
     1ee:	f2 03       	fmuls	r23, r18
     1f0:	34 04       	cpc	r3, r4
     1f2:	34 04       	cpc	r3, r4
     1f4:	34 04       	cpc	r3, r4
     1f6:	04 04       	cpc	r0, r4
     1f8:	08 04       	cpc	r0, r8
     1fa:	0c 04       	cpc	r0, r12
     1fc:	10 04       	cpc	r1, r0
     1fe:	14 04       	cpc	r1, r4
     200:	18 04       	cpc	r1, r8
     202:	34 04       	cpc	r3, r4
     204:	1c 04       	cpc	r1, r12
     206:	20 04       	cpc	r2, r0
     208:	24 04       	cpc	r2, r4
     20a:	28 04       	cpc	r2, r8
     20c:	2c 04       	cpc	r2, r12
     20e:	30 04       	cpc	r3, r0
     210:	0c 24       	eor	r0, r12
     212:	0c 24       	eor	r0, r12
     214:	14 24       	eor	r1, r4
     216:	1c 24       	eor	r1, r12
     218:	27 24       	eor	r2, r7
     21a:	7f 24       	eor	r7, r15
     21c:	86 24       	eor	r8, r6
     21e:	b2 24       	eor	r11, r2
     220:	b2 24       	eor	r11, r2
     222:	b1 24       	eor	r11, r1
     224:	b1 24       	eor	r11, r1

00000226 <__trampolines_start>:
     226:	0c 94 b5 24 	jmp	0x496a	; 0x496a <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     22a:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9c>
     22e:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_ZN7CTimerF8SetCOMPAEj>
     232:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     236:	0c 94 1c 24 	jmp	0x4838	; 0x4838 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     23a:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     23e:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <_GLOBAL__sub_D_dacSPI>
     242:	0c 94 80 23 	jmp	0x4700	; 0x4700 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     246:	0c 94 0c 04 	jmp	0x818	; 0x818 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     24a:	0c 94 71 23 	jmp	0x46e2	; 0x46e2 <_ZN16CMBEventsHandler11FreeBuffersEv>
     24e:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <_ZN7CTimerC8SetCOMPCEj>
     252:	0c 94 33 23 	jmp	0x4666	; 0x4666 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     256:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     25a:	0c 94 27 24 	jmp	0x484e	; 0x484e <_ZN9CMBSender13OnReceiveByteEh+0x58>
     25e:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     262:	0c 94 14 04 	jmp	0x828	; 0x828 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xbc>
     266:	0c 94 24 04 	jmp	0x848	; 0x848 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xdc>
     26a:	0c 94 42 04 	jmp	0x884	; 0x884 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     26e:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     272:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     276:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <_ZN7CTimerF5StartEj>
     27a:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <_ZN7CTimerC9SetPeriodEj>
     27e:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <_ZN7CTimerC8SetCOMPAEj>
     282:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     286:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     28a:	0c 94 28 04 	jmp	0x850	; 0x850 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe4>
     28e:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd4>
     292:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     296:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <_ZN7CTimerF8SetCOMPDEj>
     29a:	0c 94 8f 23 	jmp	0x471e	; 0x471e <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     29e:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2a2:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <_ZN7CTimerF4StopEv>
     2a6:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2aa:	0c 94 1c 04 	jmp	0x838	; 0x838 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xcc>
     2ae:	0c 94 18 04 	jmp	0x830	; 0x830 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     2b2:	0c 94 00 02 	jmp	0x400	; 0x400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     2b6:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2ba:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <_ZN9CMBSender13OnReceiveByteEh+0x108>
     2be:	0c 94 34 04 	jmp	0x868	; 0x868 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     2c2:	0c 94 2c 04 	jmp	0x858	; 0x858 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xec>
     2c6:	0c 94 30 04 	jmp	0x860	; 0x860 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf4>
     2ca:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     2ce:	0c 94 6f 04 	jmp	0x8de	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2d2:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     2d6:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <_ZN9CMBSender21OnTransactionCallbackEPhj>
     2da:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <_GLOBAL__sub_I_dacSPI>
     2de:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2e2:	0c 94 9b 22 	jmp	0x4536	; 0x4536 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2e6:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     2ea:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <_ZN7CTimerC8SetCOMPDEj>
     2ee:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
     2f2:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2f6:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     2fa:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_ZN7CTimerF9SetPeriodEj>
     2fe:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     302:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     306:	0c 94 3b 02 	jmp	0x476	; 0x476 <_ZN10CDGUSUSART15GetReceivedByteEv>
     30a:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__cxa_pure_virtual>
     30e:	0c 94 25 0c 	jmp	0x184a	; 0x184a <_ZN7CTimerC4StopEv>
     312:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_GLOBAL__sub_I_timer>
     316:	0c 94 41 02 	jmp	0x482	; 0x482 <_ZN10CDGUSUSART14IsTransmittingEv>
     31a:	0c 94 10 04 	jmp	0x820	; 0x820 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb4>
     31e:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     322:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     326:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     32a:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     32e:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <_ZN4CSPI16StaticOnTransmitEPv>
     332:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     336:	0c 94 14 24 	jmp	0x4828	; 0x4828 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     33a:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     33e:	0c 94 56 23 	jmp	0x46ac	; 0x46ac <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     342:	0c 94 cd 03 	jmp	0x79a	; 0x79a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     346:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     34a:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     34e:	0c 94 49 02 	jmp	0x492	; 0x492 <_ZN10CDGUSUSART11IsReceivingEv>
     352:	0c 94 86 24 	jmp	0x490c	; 0x490c <_ZN9CMBSender13OnReceiveByteEh+0x116>
     356:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <_ZN7CTimerC5StartEj>
     35a:	0c 94 cc 22 	jmp	0x4598	; 0x4598 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     35e:	0c 94 08 04 	jmp	0x810	; 0x810 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa4>
     362:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <_ZN7CTimerF8SetCOMPCEj>
     366:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     36a:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     36e:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     372:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     376:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     37a:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <_ZN7CTimerF8SetCOMPBEj>
     37e:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_GLOBAL__sub_D_timer>
     382:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_ZN10CDGUSUSART11IsDataEmptyEv>
     386:	0c 94 45 0c 	jmp	0x188a	; 0x188a <_ZN7CTimerC8SetCOMPBEj>
     38a:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     38e:	0c 94 3e 02 	jmp	0x47c	; 0x47c <_ZN10CDGUSUSART19SetTransmittingByteEh>

00000392 <__ctors_start>:
     392:	f0 04       	cpc	r15, r0
     394:	d3 21       	and	r29, r3

00000396 <__ctors_end>:
     396:	f9 04       	cpc	r15, r9
     398:	ec 21       	and	r30, r12

0000039a <__dtors_end>:
     39a:	11 24       	eor	r1, r1
     39c:	1f be       	out	0x3f, r1	; 63
     39e:	cf ef       	ldi	r28, 0xFF	; 255
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df e3       	ldi	r29, 0x3F	; 63
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	0c bf       	out	0x3c, r16	; 60

000003aa <__do_copy_data>:
     3aa:	11 e2       	ldi	r17, 0x21	; 33
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e2       	ldi	r27, 0x20	; 32
     3b0:	ec ee       	ldi	r30, 0xEC	; 236
     3b2:	fe e4       	ldi	r31, 0x4E	; 78
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	0b bf       	out	0x3b, r16	; 59
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x14>
     3ba:	07 90       	elpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a4 33       	cpi	r26, 0x34	; 52
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0x10>

000003c4 <__do_clear_bss>:
     3c4:	23 e2       	ldi	r18, 0x23	; 35
     3c6:	a4 e3       	ldi	r26, 0x34	; 52
     3c8:	b1 e2       	ldi	r27, 0x21	; 33
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	aa 39       	cpi	r26, 0x9A	; 154
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>

000003d4 <__do_global_ctors>:
     3d4:	11 e0       	ldi	r17, 0x01	; 1
     3d6:	cb ec       	ldi	r28, 0xCB	; 203
     3d8:	d1 e0       	ldi	r29, 0x01	; 1
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <__do_global_ctors+0x16>
     3de:	21 97       	sbiw	r28, 0x01	; 1
     3e0:	01 09       	sbc	r16, r1
     3e2:	80 2f       	mov	r24, r16
     3e4:	fe 01       	movw	r30, r28
     3e6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__tablejump2__>
     3ea:	c9 3c       	cpi	r28, 0xC9	; 201
     3ec:	d1 07       	cpc	r29, r17
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	08 07       	cpc	r16, r24
     3f2:	a9 f7       	brne	.-22     	; 0x3de <__do_global_ctors+0xa>
     3f4:	0e 94 40 22 	call	0x4480	; 0x4480 <main>
     3f8:	0c 94 64 27 	jmp	0x4ec8	; 0x4ec8 <__do_global_dtors>

000003fc <__bad_interrupt>:
     3fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     400:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     402:	e0 e6       	ldi	r30, 0x60	; 96
     404:	f6 e0       	ldi	r31, 0x06	; 6
     406:	88 e0       	ldi	r24, 0x08	; 8
     408:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     40e:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     410:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     412:	e0 ea       	ldi	r30, 0xA0	; 160
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	84 e1       	ldi	r24, 0x14	; 20
     418:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     41a:	88 e1       	ldi	r24, 0x18	; 24
     41c:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     41e:	84 81       	ldd	r24, Z+4	; 0x04
     420:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     422:	41 30       	cpi	r20, 0x01	; 1
     424:	19 f0       	breq	.+6      	; 0x42c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     426:	42 30       	cpi	r20, 0x02	; 2
     428:	19 f0       	breq	.+6      	; 0x430 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     42a:	04 c0       	rjmp	.+8      	; 0x434 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     42c:	80 e2       	ldi	r24, 0x20	; 32
     42e:	03 c0       	rjmp	.+6      	; 0x436 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     430:	80 e3       	ldi	r24, 0x30	; 48
		break;
     432:	01 c0       	rjmp	.+2      	; 0x436 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     434:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     436:	22 23       	and	r18, r18
     438:	19 f0       	breq	.+6      	; 0x440 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     43a:	21 30       	cpi	r18, 0x01	; 1
     43c:	19 f0       	breq	.+6      	; 0x444 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     440:	87 7f       	andi	r24, 0xF7	; 247
		break;
     442:	01 c0       	rjmp	.+2      	; 0x446 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     444:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     446:	01 11       	cpse	r16, r1
     448:	02 c0       	rjmp	.+4      	; 0x44e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     44a:	93 e4       	ldi	r25, 0x43	; 67
     44c:	01 c0       	rjmp	.+2      	; 0x450 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     44e:	93 e0       	ldi	r25, 0x03	; 3
     450:	89 2b       	or	r24, r25
     452:	e0 ea       	ldi	r30, 0xA0	; 160
     454:	f9 e0       	ldi	r31, 0x09	; 9
     456:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	db 01       	movw	r26, r22
     45c:	aa 5d       	subi	r26, 0xDA	; 218
     45e:	bf 4d       	sbci	r27, 0xDF	; 223
     460:	8c 91       	ld	r24, X
     462:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     464:	db 01       	movw	r26, r22
     466:	aa 5f       	subi	r26, 0xFA	; 250
     468:	bf 4d       	sbci	r27, 0xDF	; 223
     46a:	8c 91       	ld	r24, X
     46c:	82 95       	swap	r24
     46e:	80 7f       	andi	r24, 0xF0	; 240
     470:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     476:	80 91 a0 09 	lds	r24, 0x09A0
}
     47a:	08 95       	ret

0000047c <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     47c:	60 93 a0 09 	sts	0x09A0, r22
     480:	08 95       	ret

00000482 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     482:	80 91 a1 09 	lds	r24, 0x09A1
     486:	86 fb       	bst	r24, 6
     488:	88 27       	eor	r24, r24
     48a:	80 f9       	bld	r24, 0
}
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	89 27       	eor	r24, r25
     490:	08 95       	ret

00000492 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     492:	80 91 a1 09 	lds	r24, 0x09A1
     496:	80 95       	com	r24
}
     498:	88 1f       	adc	r24, r24
     49a:	88 27       	eor	r24, r24
     49c:	88 1f       	adc	r24, r24
     49e:	08 95       	ret

000004a0 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     4a0:	80 91 a1 09 	lds	r24, 0x09A1
     4a4:	85 fb       	bst	r24, 5
     4a6:	88 27       	eor	r24, r24
     4a8:	80 f9       	bld	r24, 0
}
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	89 27       	eor	r24, r25
     4ae:	08 95       	ret

000004b0 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     4b0:	60 93 06 23 	sts	0x2306, r22
     4b4:	70 93 07 23 	sts	0x2307, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     4b8:	40 93 10 22 	sts	0x2210, r20
     4bc:	50 93 11 22 	sts	0x2211, r21
     4c0:	08 95       	ret

000004c2 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     4c2:	60 93 0a 23 	sts	0x230A, r22
     4c6:	70 93 0b 23 	sts	0x230B, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     4ca:	40 93 14 22 	sts	0x2214, r20
     4ce:	50 93 15 22 	sts	0x2215, r21
     4d2:	08 95       	ret

000004d4 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     4d4:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     4d6:	8b e6       	ldi	r24, 0x6B	; 107
     4d8:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     4da:	80 ea       	ldi	r24, 0xA0	; 160
     4dc:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     4de:	89 e0       	ldi	r24, 0x09	; 9
     4e0:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     4e2:	12 86       	std	Z+10, r1	; 0x0a
     4e4:	08 95       	ret

000004e6 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     4e6:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     4e8:	8c e6       	ldi	r24, 0x6C	; 108
     4ea:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     4ec:	80 ea       	ldi	r24, 0xA0	; 160
     4ee:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     4f0:	89 e0       	ldi	r24, 0x09	; 9
     4f2:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     4f4:	16 86       	std	Z+14, r1	; 0x0e
     4f6:	08 95       	ret

000004f8 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
     4fe:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZN6CUSARTC1Ev>
     502:	8a e4       	ldi	r24, 0x4A	; 74
     504:	90 e2       	ldi	r25, 0x20	; 32
     506:	88 83       	st	Y, r24
     508:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     510:	2a e4       	ldi	r18, 0x4A	; 74
     512:	30 e2       	ldi	r19, 0x20	; 32
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
     518:	31 83       	std	Z+1, r19	; 0x01
     51a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN6CUSARTD1Ev>
     51e:	08 95       	ret

00000520 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     520:	08 95       	ret

00000522 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     522:	08 95       	ret

00000524 <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
     52a:	e0 e4       	ldi	r30, 0x40	; 64
     52c:	f6 e0       	ldi	r31, 0x06	; 6
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     532:	98 ea       	ldi	r25, 0xA8	; 168
     534:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     536:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     538:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     53a:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     53c:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     53e:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     540:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     542:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
     544:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     546:	a0 e8       	ldi	r26, 0x80	; 128
     548:	b6 e0       	ldi	r27, 0x06	; 6
     54a:	88 e0       	ldi	r24, 0x08	; 8
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	8c 93       	st	X, r24
     550:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     552:	53 96       	adiw	r26, 0x13	; 19
     554:	1c 92       	st	X, r1
     556:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
     558:	14 96       	adiw	r26, 0x04	; 4
     55a:	1c 92       	st	X, r1
     55c:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     55e:	e0 ea       	ldi	r30, 0xA0	; 160
     560:	f6 e0       	ldi	r31, 0x06	; 6
     562:	90 ec       	ldi	r25, 0xC0	; 192
     564:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     566:	80 e8       	ldi	r24, 0x80	; 128
     568:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56a:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56c:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56e:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     570:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     572:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     574:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     576:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     578:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     57a:	e0 e6       	ldi	r30, 0x60	; 96
     57c:	f6 e0       	ldi	r31, 0x06	; 6
     57e:	21 e1       	ldi	r18, 0x11	; 17
     580:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     582:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     584:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     586:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	9c 93       	st	X, r25
     58e:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     590:	50 96       	adiw	r26, 0x10	; 16
     592:	8c 93       	st	X, r24
     594:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     596:	51 96       	adiw	r26, 0x11	; 17
     598:	8c 93       	st	X, r24
     59a:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
     59c:	14 96       	adiw	r26, 0x04	; 4
     59e:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     5a0:	e0 ea       	ldi	r30, 0xA0	; 160
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	82 60       	ori	r24, 0x02	; 2
     5ae:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	84 60       	ori	r24, 0x04	; 4
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	fe 01       	movw	r30, r28
     5b8:	9e 01       	movw	r18, r28
     5ba:	28 5f       	subi	r18, 0xF8	; 248
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
     5c2:	e2 17       	cp	r30, r18
     5c4:	f3 07       	cpc	r31, r19
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <_ZN11CLaserBoard12InitializeIOEv+0x9c>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
     5c8:	8a e0       	ldi	r24, 0x0A	; 10
     5ca:	88 87       	std	Y+8, r24	; 0x08
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     5d2:	e0 e5       	ldi	r30, 0x50	; 80
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	8b ec       	ldi	r24, 0xCB	; 203
     5d8:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     5da:	80 81       	ld	r24, Z
     5dc:	88 60       	ori	r24, 0x08	; 8
     5de:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     5e0:	81 81       	ldd	r24, Z+1	; 0x01
     5e2:	83 ff       	sbrs	r24, 3
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     5e6:	e0 e5       	ldi	r30, 0x50	; 80
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     5ec:	98 ed       	ldi	r25, 0xD8	; 216
     5ee:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     5f0:	84 ec       	ldi	r24, 0xC4	; 196
     5f2:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     5f4:	80 81       	ld	r24, Z
     5f6:	80 61       	ori	r24, 0x10	; 16
     5f8:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     5fa:	e0 e4       	ldi	r30, 0x40	; 64
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     600:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     602:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     604:	e0 e5       	ldi	r30, 0x50	; 80
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	81 81       	ldd	r24, Z+1	; 0x01
     60a:	84 ff       	sbrs	r24, 4
     60c:	fd cf       	rjmp	.-6      	; 0x608 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     60e:	e0 e4       	ldi	r30, 0x40	; 64
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	88 7f       	andi	r24, 0xF8	; 248
     616:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     618:	98 ed       	ldi	r25, 0xD8	; 216
     61a:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     61c:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     61e:	a0 e5       	ldi	r26, 0x50	; 80
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	8c 91       	ld	r24, X
     624:	88 7f       	andi	r24, 0xF8	; 248
     626:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     628:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     62a:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     630:	e0 eb       	ldi	r30, 0xB0	; 176
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	84 81       	ldd	r24, Z+4	; 0x04
     636:	8c 7f       	andi	r24, 0xFC	; 252
     638:	84 83       	std	Z+4, r24	; 0x04
     63a:	08 95       	ret

0000063c <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 62 06 	sts	0x0662, r24
     642:	08 95       	ret

00000644 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     644:	80 e1       	ldi	r24, 0x10	; 16
     646:	80 93 62 06 	sts	0x0662, r24
     64a:	08 95       	ret

0000064c <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 61 06 	sts	0x0661, r24
     652:	08 95       	ret

00000654 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     654:	80 e1       	ldi	r24, 0x10	; 16
     656:	80 93 61 06 	sts	0x0661, r24
     65a:	08 95       	ret

0000065c <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	80 93 85 06 	sts	0x0685, r24
     662:	08 95       	ret

00000664 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	80 93 86 06 	sts	0x0686, r24
     66a:	08 95       	ret

0000066c <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     66c:	f8 94       	cli
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     672:	e0 e8       	ldi	r30, 0x80	; 128
     674:	f6 e0       	ldi	r31, 0x06	; 6
     676:	28 e0       	ldi	r18, 0x08	; 8
     678:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	af e9       	ldi	r26, 0x9F	; 159
     67c:	bf e0       	ldi	r27, 0x0F	; 15
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <_ZN11CLaserBoard4BeepEv+0x12>
     682:	00 c0       	rjmp	.+0      	; 0x684 <_ZN11CLaserBoard4BeepEv+0x18>
     684:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     686:	26 83       	std	Z+6, r18	; 0x06
     688:	af e9       	ldi	r26, 0x9F	; 159
     68a:	bf e0       	ldi	r27, 0x0F	; 15
     68c:	11 97       	sbiw	r26, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <_ZN11CLaserBoard4BeepEv+0x20>
     690:	00 c0       	rjmp	.+0      	; 0x692 <_ZN11CLaserBoard4BeepEv+0x26>
     692:	00 00       	nop
     694:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     696:	81 f7       	brne	.-32     	; 0x678 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     698:	78 94       	sei
     69a:	08 95       	ret

0000069c <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     69c:	f8 94       	cli
     69e:	45 e0       	ldi	r20, 0x05	; 5
     6a0:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6a2:	64 e6       	ldi	r22, 0x64	; 100
     6a4:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     6a6:	e0 e8       	ldi	r30, 0x80	; 128
     6a8:	f6 e0       	ldi	r31, 0x06	; 6
     6aa:	28 e0       	ldi	r18, 0x08	; 8
     6ac:	1c c0       	rjmp	.+56     	; 0x6e6 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     6ae:	25 83       	std	Z+5, r18	; 0x05
     6b0:	af e9       	ldi	r26, 0x9F	; 159
     6b2:	bf e0       	ldi	r27, 0x0F	; 15
     6b4:	11 97       	sbiw	r26, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     6ba:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     6bc:	26 83       	std	Z+6, r18	; 0x06
     6be:	af e9       	ldi	r26, 0x9F	; 159
     6c0:	bf e0       	ldi	r27, 0x0F	; 15
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     6c8:	00 00       	nop
     6ca:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     6cc:	81 f7       	brne	.-32     	; 0x6ae <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ce:	bf ef       	ldi	r27, 0xFF	; 255
     6d0:	73 ec       	ldi	r23, 0xC3	; 195
     6d2:	89 e0       	ldi	r24, 0x09	; 9
     6d4:	b1 50       	subi	r27, 0x01	; 1
     6d6:	70 40       	sbci	r23, 0x00	; 0
     6d8:	80 40       	sbci	r24, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     6de:	00 00       	nop
     6e0:	41 50       	subi	r20, 0x01	; 1
     6e2:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     6e4:	19 f0       	breq	.+6      	; 0x6ec <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6e6:	86 2f       	mov	r24, r22
     6e8:	93 2f       	mov	r25, r19
     6ea:	e1 cf       	rjmp	.-62     	; 0x6ae <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     6ec:	78 94       	sei
     6ee:	08 95       	ret

000006f0 <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
     6f0:	cf 93       	push	r28
     6f2:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
     6f4:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     6f8:	18 96       	adiw	r26, 0x08	; 8
     6fa:	3c 91       	ld	r19, X
     6fc:	18 97       	sbiw	r26, 0x08	; 8
     6fe:	fc 01       	movw	r30, r24
     700:	ac 01       	movw	r20, r24
     702:	48 5f       	subi	r20, 0xF8	; 248
     704:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
     706:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     708:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     70a:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
     70c:	89 2f       	mov	r24, r25
     70e:	86 23       	and	r24, r22
     710:	41 f0       	breq	.+16     	; 0x722 <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
     712:	80 81       	ld	r24, Z
     714:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
     716:	81 38       	cpi	r24, 0x81	; 129
     718:	10 f4       	brcc	.+4      	; 0x71e <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
     71a:	80 83       	st	Z, r24
     71c:	08 c0       	rjmp	.+16     	; 0x72e <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     71e:	70 83       	st	Z, r23
     720:	06 c0       	rjmp	.+12     	; 0x72e <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
     722:	80 81       	ld	r24, Z
     724:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
     726:	11 f0       	breq	.+4      	; 0x72c <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
     728:	80 83       	st	Z, r24
     72a:	01 c0       	rjmp	.+2      	; 0x72e <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     72c:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     72e:	81 91       	ld	r24, Z+
     730:	38 17       	cp	r19, r24
     732:	40 f4       	brcc	.+16     	; 0x744 <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
     734:	19 96       	adiw	r26, 0x09	; 9
     736:	8c 91       	ld	r24, X
     738:	19 97       	sbiw	r26, 0x09	; 9
     73a:	89 2b       	or	r24, r25
     73c:	19 96       	adiw	r26, 0x09	; 9
     73e:	8c 93       	st	X, r24
     740:	19 97       	sbiw	r26, 0x09	; 9
     742:	09 c0       	rjmp	.+18     	; 0x756 <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
     744:	19 96       	adiw	r26, 0x09	; 9
     746:	8c 91       	ld	r24, X
     748:	19 97       	sbiw	r26, 0x09	; 9
     74a:	29 2f       	mov	r18, r25
     74c:	20 95       	com	r18
     74e:	28 23       	and	r18, r24
     750:	19 96       	adiw	r26, 0x09	; 9
     752:	2c 93       	st	X, r18
     754:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
     756:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
     758:	e4 17       	cp	r30, r20
     75a:	f5 07       	cpc	r31, r21
     75c:	b9 f6       	brne	.-82     	; 0x70c <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
     762:	fc 01       	movw	r30, r24
     764:	81 85       	ldd	r24, Z+9	; 0x09
     766:	81 70       	andi	r24, 0x01	; 1
     768:	08 95       	ret

0000076a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
		}
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     76c:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     76e:	63 30       	cpi	r22, 0x03	; 3
     770:	29 f4       	brne	.+10     	; 0x77c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     772:	fa 01       	movw	r30, r20
     774:	81 81       	ldd	r24, Z+1	; 0x01
     776:	1e 96       	adiw	r26, 0x0e	; 14
     778:	8c 93       	st	X, r24
     77a:	1e 97       	sbiw	r26, 0x0e	; 14
	
	switch (PIC_ID)
     77c:	1e 96       	adiw	r26, 0x0e	; 14
     77e:	4c 91       	ld	r20, X
     780:	1e 97       	sbiw	r26, 0x0e	; 14
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	44 31       	cpi	r20, 0x14	; 20
     786:	51 05       	cpc	r21, r1
     788:	08 f0       	brcs	.+2      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     78a:	6e c0       	rjmp	.+220    	; 0x868 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     78c:	fa 01       	movw	r30, r20
     78e:	88 27       	eor	r24, r24
     790:	ec 50       	subi	r30, 0x0C	; 12
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	8f 4f       	sbci	r24, 0xFF	; 255
     796:	0c 94 f5 25 	jmp	0x4bea	; 0x4bea <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     79a:	1c 96       	adiw	r26, 0x0c	; 12
     79c:	1c 92       	st	X, r1
		break;
     79e:	08 95       	ret
		case PICID_WORKFAST:
			state = APP_WORKFAST;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	1c 96       	adiw	r26, 0x0c	; 12
     7a4:	8c 93       	st	X, r24
     7a6:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkFast)
     7a8:	1d 96       	adiw	r26, 0x0d	; 13
     7aa:	8c 91       	ld	r24, X
     7ac:	1d 97       	sbiw	r26, 0x0d	; 13
     7ae:	88 23       	and	r24, r24
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     7b2:	67 c0       	rjmp	.+206    	; 0x882 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x116>
			{
				profile = WorkFast;
     7b4:	1d 96       	adiw	r26, 0x0d	; 13
     7b6:	1c 92       	st	X, r1
     7b8:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	1f 96       	adiw	r26, 0x0f	; 15
     7be:	8c 93       	st	X, r24
     7c0:	08 95       	ret
			}
		break;
		case PICID_WORKMEDIUM:
			state = APP_WORKMEDIUM;
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	1c 96       	adiw	r26, 0x0c	; 12
     7c6:	8c 93       	st	X, r24
     7c8:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkMedium)
     7ca:	1d 96       	adiw	r26, 0x0d	; 13
     7cc:	8c 91       	ld	r24, X
     7ce:	1d 97       	sbiw	r26, 0x0d	; 13
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     7d4:	56 c0       	rjmp	.+172    	; 0x882 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x116>
			{
				profile = WorkMedium;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	1d 96       	adiw	r26, 0x0d	; 13
     7da:	8c 93       	st	X, r24
     7dc:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     7de:	1f 96       	adiw	r26, 0x0f	; 15
     7e0:	8c 93       	st	X, r24
     7e2:	08 95       	ret
			}
		break;
		case PICID_WORKSLOW:
			state = APP_WORKSLOW;
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	1c 96       	adiw	r26, 0x0c	; 12
     7e8:	8c 93       	st	X, r24
     7ea:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkSlow)
     7ec:	1d 96       	adiw	r26, 0x0d	; 13
     7ee:	8c 91       	ld	r24, X
     7f0:	1d 97       	sbiw	r26, 0x0d	; 13
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     7f6:	45 c0       	rjmp	.+138    	; 0x882 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x116>
			{
				profile = WorkSlow;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	1d 96       	adiw	r26, 0x0d	; 13
     7fc:	8c 93       	st	X, r24
     7fe:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	1f 96       	adiw	r26, 0x0f	; 15
     804:	8c 93       	st	X, r24
     806:	08 95       	ret
			}
		break;
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     808:	86 e0       	ldi	r24, 0x06	; 6
     80a:	1c 96       	adiw	r26, 0x0c	; 12
     80c:	8c 93       	st	X, r24
		break;
     80e:	08 95       	ret
		case PICID_WORKOnStart:
			state = APP_WORKOnStart;
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	1c 96       	adiw	r26, 0x0c	; 12
     814:	8c 93       	st	X, r24
		break;
     816:	08 95       	ret
		case PICID_WORKOnStop:
			state = APP_WORKOnStop;
     818:	88 e0       	ldi	r24, 0x08	; 8
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8c 93       	st	X, r24
		break;
     81e:	08 95       	ret
		case PICID_WORKSTART:
			state = APP_WORKSTART;
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	1c 96       	adiw	r26, 0x0c	; 12
     824:	8c 93       	st	X, r24
		break;
     826:	08 95       	ret
		case PICID_WORKSTARTED:
			state = APP_WORKSTARTED;
     828:	85 e0       	ldi	r24, 0x05	; 5
     82a:	1c 96       	adiw	r26, 0x0c	; 12
     82c:	8c 93       	st	X, r24
		break;
     82e:	08 95       	ret
		case PICID_PHOTOTYPESELECT:
			state = APP_PHOTOTYPESELECT;
     830:	89 e0       	ldi	r24, 0x09	; 9
     832:	1c 96       	adiw	r26, 0x0c	; 12
     834:	8c 93       	st	X, r24
		break;
     836:	08 95       	ret
		case PICID_PHOTOTYPE1:
			state = APP_PHOTOTYPE1;
     838:	8a e0       	ldi	r24, 0x0A	; 10
     83a:	1c 96       	adiw	r26, 0x0c	; 12
     83c:	8c 93       	st	X, r24
		break;
     83e:	08 95       	ret
		case PICID_PHOTOTYPE2:
			state = APP_PHOTOTYPE2;
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	1c 96       	adiw	r26, 0x0c	; 12
     844:	8c 93       	st	X, r24
		break;
     846:	08 95       	ret
		case PICID_PHOTOTYPE3:
			state = APP_PHOTOTYPE3;
     848:	8c e0       	ldi	r24, 0x0C	; 12
     84a:	1c 96       	adiw	r26, 0x0c	; 12
     84c:	8c 93       	st	X, r24
		break;
     84e:	08 95       	ret
		case PICID_PHOTOTYPE4:
			state = APP_PHOTOTYPE4;
     850:	8d e0       	ldi	r24, 0x0D	; 13
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8c 93       	st	X, r24
		break;
     856:	08 95       	ret
		case PICID_PHOTOTYPE5:
			state = APP_PHOTOTYPE5;
     858:	8e e0       	ldi	r24, 0x0E	; 14
     85a:	1c 96       	adiw	r26, 0x0c	; 12
     85c:	8c 93       	st	X, r24
		break;
     85e:	08 95       	ret
		case PICID_PHOTOTYPE6:
			state = APP_PHOTOTYPE6;
     860:	8f e0       	ldi	r24, 0x0F	; 15
     862:	1c 96       	adiw	r26, 0x0c	; 12
     864:	8c 93       	st	X, r24
		break;
     866:	08 95       	ret
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID <= PICID_DATABASE_MAX)
     868:	1e 96       	adiw	r26, 0x0e	; 14
     86a:	8c 91       	ld	r24, X
     86c:	1e 97       	sbiw	r26, 0x0e	; 14
     86e:	88 31       	cpi	r24, 0x18	; 24
     870:	40 f0       	brcs	.+16     	; 0x882 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x116>
     872:	1e 96       	adiw	r26, 0x0e	; 14
     874:	8c 91       	ld	r24, X
     876:	1e 97       	sbiw	r26, 0x0e	; 14
     878:	8a 32       	cpi	r24, 0x2A	; 42
     87a:	18 f4       	brcc	.+6      	; 0x882 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x116>
			{
				state = APP_DATABASE;
     87c:	80 e1       	ldi	r24, 0x10	; 16
     87e:	1c 96       	adiw	r26, 0x0c	; 12
     880:	8c 93       	st	X, r24
     882:	08 95       	ret

00000884 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     884:	08 95       	ret

00000886 <_Z11ConvertDataPvS_jj>:
{
	return (data >> 8) | (data << 8);
}

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	7c 01       	movw	r14, r24
     898:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     89a:	41 15       	cp	r20, r1
     89c:	51 05       	cpc	r21, r1
     89e:	b1 f0       	breq	.+44     	; 0x8cc <_Z11ConvertDataPvS_jj+0x46>
     8a0:	6b 01       	movw	r12, r22
     8a2:	c4 0e       	add	r12, r20
     8a4:	d5 1e       	adc	r13, r21
     8a6:	eb 01       	movw	r28, r22
     8a8:	26 1b       	sub	r18, r22
     8aa:	37 0b       	sbc	r19, r23
     8ac:	c9 01       	movw	r24, r18
     8ae:	8c 0f       	add	r24, r28
     8b0:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     8b2:	b8 01       	movw	r22, r16
     8b4:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
     8b8:	fc 01       	movw	r30, r24
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	e4 27       	eor	r30, r20
     8be:	ee 0d       	add	r30, r14
     8c0:	ff 1d       	adc	r31, r15
     8c2:	89 91       	ld	r24, Y+
     8c4:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     8c6:	cc 15       	cp	r28, r12
     8c8:	dd 05       	cpc	r29, r13
     8ca:	81 f7       	brne	.-32     	; 0x8ac <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	08 95       	ret

000008de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	
	if (addr == STRUCT_ADDR_DATA)
     8de:	61 30       	cpi	r22, 0x01	; 1
     8e0:	71 05       	cpc	r23, r1
     8e2:	29 f5       	brne	.+74     	; 0x92e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x50>
     8e4:	f9 01       	movw	r30, r18
     8e6:	ba 01       	movw	r22, r20
     8e8:	dc 01       	movw	r26, r24
	{
		//memcpy((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		switch (profile)
     8ea:	1d 96       	adiw	r26, 0x0d	; 13
     8ec:	8c 91       	ld	r24, X
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	a1 f0       	breq	.+40     	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3c>
     8f2:	18 f0       	brcs	.+6      	; 0x8fa <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1c>
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	49 f0       	breq	.+18     	; 0x90a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2c>
     8f8:	18 c0       	rjmp	.+48     	; 0x92a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x4c>
		{
			case WorkFast:
				ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	af 01       	movw	r20, r30
     900:	8e e4       	ldi	r24, 0x4E	; 78
     902:	91 e2       	ldi	r25, 0x21	; 33
     904:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
			break;
     908:	08 95       	ret
			case WorkSlow:
				ConvertData((void*)&m_structDGUSDATA_Slow, (void*)data, length);
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	af 01       	movw	r20, r30
     910:	86 e3       	ldi	r24, 0x36	; 54
     912:	91 e2       	ldi	r25, 0x21	; 33
     914:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
			break;
     918:	08 95       	ret
			case WorkMedium:
				ConvertData((void*)&m_structDGUSDATA_Medium, (void*)data, length);
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	af 01       	movw	r20, r30
     920:	82 e4       	ldi	r24, 0x42	; 66
     922:	91 e2       	ldi	r25, 0x21	; 33
     924:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
			break;
     928:	08 95       	ret
			default:
				// Error
				CLaserBoard::Beep();
     92a:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN11CLaserBoard4BeepEv>
     92e:	08 95       	ret

00000930 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     930:	23 e8       	ldi	r18, 0x83	; 131
     932:	30 e2       	ldi	r19, 0x20	; 32
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	08 95       	ret

0000093c <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     93c:	23 e8       	ldi	r18, 0x83	; 131
     93e:	30 e2       	ldi	r19, 0x20	; 32
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
     944:	31 83       	std	Z+1, r19	; 0x01
     946:	0e 94 7f 23 	call	0x46fe	; 0x46fe <_ZN16CMBEventsHandlerD1Ev>
     94a:	08 95       	ret

0000094c <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = WorkFast;
}

void CLaserControlApp::Start()
{	
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	1f 92       	push	r1
     956:	1f 92       	push	r1
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	94 e1       	ldi	r25, 0x14	; 20
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     966:	22 e0       	ldi	r18, 0x02	; 2
     968:	ae 01       	movw	r20, r28
     96a:	4f 5f       	subi	r20, 0xFF	; 255
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
     96e:	63 e0       	ldi	r22, 0x03	; 3
     970:	f8 01       	movw	r30, r16
     972:	80 8d       	ldd	r24, Z+24	; 0x18
     974:	91 8d       	ldd	r25, Z+25	; 0x19
     976:	0e 94 34 25 	call	0x4a68	; 0x4a68 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     97a:	f8 01       	movw	r30, r16
     97c:	80 8d       	ldd	r24, Z+24	; 0x18
     97e:	91 8d       	ldd	r25, Z+25	; 0x19
     980:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(m_structDGUSDATA_Fast));
     984:	2c e0       	ldi	r18, 0x0C	; 12
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	4e e4       	ldi	r20, 0x4E	; 78
     98a:	51 e2       	ldi	r21, 0x21	; 33
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	f8 01       	movw	r30, r16
     992:	80 8d       	ldd	r24, Z+24	; 0x18
     994:	91 8d       	ldd	r25, Z+25	; 0x19
     996:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     99a:	f8 01       	movw	r30, r16
     99c:	80 8d       	ldd	r24, Z+24	; 0x18
     99e:	91 8d       	ldd	r25, Z+25	; 0x19
     9a0:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	f8 01       	movw	r30, r16
     9a8:	84 87       	std	Z+12, r24	; 0x0c
}
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     9b8:	fc 01       	movw	r30, r24
     9ba:	44 89       	ldd	r20, Z+20	; 0x14
     9bc:	55 89       	ldd	r21, Z+21	; 0x15
     9be:	56 95       	lsr	r21
     9c0:	47 95       	ror	r20
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	68 ee       	ldi	r22, 0xE8	; 232
     9c6:	73 e0       	ldi	r23, 0x03	; 3
     9c8:	88 e6       	ldi	r24, 0x68	; 104
     9ca:	93 e2       	ldi	r25, 0x23	; 35
     9cc:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     9d0:	88 e6       	ldi	r24, 0x68	; 104
     9d2:	93 e2       	ldi	r25, 0x23	; 35
     9d4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN12CSoundPlayer9SoundStopEv>
     9d8:	08 95       	ret

000009da <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     9da:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_ZN16CLaserControlApp12OnLaserTimerEv>
     9de:	08 95       	ret

000009e0 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     9e0:	8d e5       	ldi	r24, 0x5D	; 93
     9e2:	91 e2       	ldi	r25, 0x21	; 33
     9e4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     9e8:	8a e5       	ldi	r24, 0x5A	; 90
     9ea:	91 e2       	ldi	r25, 0x21	; 33
     9ec:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN7CTimerFC1Ev>
     9f0:	08 95       	ret

000009f2 <_GLOBAL__sub_D_timer>:
     9f2:	8a e5       	ldi	r24, 0x5A	; 90
     9f4:	91 e2       	ldi	r25, 0x21	; 33
     9f6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     9fa:	8d e5       	ldi	r24, 0x5D	; 93
     9fc:	91 e2       	ldi	r25, 0x21	; 33
     9fe:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN7CTimerCD1Ev>
     a02:	08 95       	ret

00000a04 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	8c 01       	movw	r16, r24
	// GUI class initialization
	m_cpSender = sender;
     a1e:	dc 01       	movw	r26, r24
     a20:	58 96       	adiw	r26, 0x18	; 24
     a22:	6d 93       	st	X+, r22
     a24:	7c 93       	st	X, r23
     a26:	59 97       	sbiw	r26, 0x19	; 25
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     a28:	46 e0       	ldi	r20, 0x06	; 6
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	8d e5       	ldi	r24, 0x5D	; 93
     a2e:	91 e2       	ldi	r25, 0x21	; 33
     a30:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     a34:	68 ea       	ldi	r22, 0xA8	; 168
     a36:	71 e6       	ldi	r23, 0x61	; 97
     a38:	8d e5       	ldi	r24, 0x5D	; 93
     a3a:	91 e2       	ldi	r25, 0x21	; 33
     a3c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	a8 01       	movw	r20, r16
     a44:	62 e4       	ldi	r22, 0x42	; 66
     a46:	74 e0       	ldi	r23, 0x04	; 4
     a48:	8d e5       	ldi	r24, 0x5D	; 93
     a4a:	91 e2       	ldi	r25, 0x21	; 33
     a4c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     a50:	f8 01       	movw	r30, r16
     a52:	16 86       	std	Z+14, r1	; 0x0e
	update = false;
     a54:	17 86       	std	Z+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA_Fast.Frequency = 10; // 10 Hz
     a56:	ee e4       	ldi	r30, 0x4E	; 78
     a58:	f1 e2       	ldi	r31, 0x21	; 33
     a5a:	8a e0       	ldi	r24, 0x0A	; 10
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	80 83       	st	Z, r24
     a60:	91 83       	std	Z+1, r25	; 0x01
	m_structDGUSDATA_Fast.DutyCycle = 50; // 50%
     a62:	0f 2e       	mov	r0, r31
     a64:	f2 e3       	ldi	r31, 0x32	; 50
     a66:	af 2e       	mov	r10, r31
     a68:	b1 2c       	mov	r11, r1
     a6a:	f0 2d       	mov	r31, r0
     a6c:	a2 86       	std	Z+10, r10	; 0x0a
     a6e:	b3 86       	std	Z+11, r11	; 0x0b
	m_structDGUSDATA_Fast.Duration  = ((1000 / m_structDGUSDATA_Fast.Frequency) * m_structDGUSDATA_Fast.DutyCycle) / 100; // ms
     a70:	60 81       	ld	r22, Z
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	c2 85       	ldd	r28, Z+10	; 0x0a
     a76:	d3 85       	ldd	r29, Z+11	; 0x0b
     a78:	0f 2e       	mov	r0, r31
     a7a:	f8 ee       	ldi	r31, 0xE8	; 232
     a7c:	cf 2e       	mov	r12, r31
     a7e:	f3 e0       	ldi	r31, 0x03	; 3
     a80:	df 2e       	mov	r13, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	c6 01       	movw	r24, r12
     a86:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
     a8a:	6c 9f       	mul	r22, r28
     a8c:	90 01       	movw	r18, r0
     a8e:	6d 9f       	mul	r22, r29
     a90:	30 0d       	add	r19, r0
     a92:	7c 9f       	mul	r23, r28
     a94:	30 0d       	add	r19, r0
     a96:	11 24       	eor	r1, r1
     a98:	36 95       	lsr	r19
     a9a:	27 95       	ror	r18
     a9c:	36 95       	lsr	r19
     a9e:	27 95       	ror	r18
     aa0:	ab e7       	ldi	r26, 0x7B	; 123
     aa2:	b4 e1       	ldi	r27, 0x14	; 20
     aa4:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     aa8:	96 95       	lsr	r25
     aaa:	87 95       	ror	r24
     aac:	82 83       	std	Z+2, r24	; 0x02
     aae:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Fast.Intensity = 200; // W
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f8 ec       	ldi	r31, 0xC8	; 200
     ab4:	ef 2e       	mov	r14, r31
     ab6:	f1 2c       	mov	r15, r1
     ab8:	f0 2d       	mov	r31, r0
     aba:	e4 82       	std	Z+4, r14	; 0x04
     abc:	f5 82       	std	Z+5, r15	; 0x05
	m_structDGUSDATA_Fast.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100; // W
     abe:	84 81       	ldd	r24, Z+4	; 0x04
     ac0:	95 81       	ldd	r25, Z+5	; 0x05
     ac2:	42 85       	ldd	r20, Z+10	; 0x0a
     ac4:	53 85       	ldd	r21, Z+11	; 0x0b
     ac6:	48 9f       	mul	r20, r24
     ac8:	90 01       	movw	r18, r0
     aca:	49 9f       	mul	r20, r25
     acc:	30 0d       	add	r19, r0
     ace:	58 9f       	mul	r21, r24
     ad0:	30 0d       	add	r19, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	36 95       	lsr	r19
     ad6:	27 95       	ror	r18
     ad8:	36 95       	lsr	r19
     ada:	27 95       	ror	r18
     adc:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     ae0:	96 95       	lsr	r25
     ae2:	87 95       	ror	r24
     ae4:	86 83       	std	Z+6, r24	; 0x06
     ae6:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Fast.Energy    = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration) / 1000; // J
     ae8:	84 81       	ldd	r24, Z+4	; 0x04
     aea:	95 81       	ldd	r25, Z+5	; 0x05
     aec:	42 81       	ldd	r20, Z+2	; 0x02
     aee:	53 81       	ldd	r21, Z+3	; 0x03
     af0:	48 9f       	mul	r20, r24
     af2:	90 01       	movw	r18, r0
     af4:	49 9f       	mul	r20, r25
     af6:	30 0d       	add	r19, r0
     af8:	58 9f       	mul	r21, r24
     afa:	30 0d       	add	r19, r0
     afc:	11 24       	eor	r1, r1
     afe:	36 95       	lsr	r19
     b00:	27 95       	ror	r18
     b02:	36 95       	lsr	r19
     b04:	27 95       	ror	r18
     b06:	36 95       	lsr	r19
     b08:	27 95       	ror	r18
     b0a:	a5 ec       	ldi	r26, 0xC5	; 197
     b0c:	b0 e2       	ldi	r27, 0x20	; 32
     b0e:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     b12:	92 95       	swap	r25
     b14:	82 95       	swap	r24
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	89 27       	eor	r24, r25
     b1a:	9f 70       	andi	r25, 0x0F	; 15
     b1c:	89 27       	eor	r24, r25
     b1e:	80 87       	std	Z+8, r24	; 0x08
     b20:	91 87       	std	Z+9, r25	; 0x09
	
	// Slow profile
	m_structDGUSDATA_Slow.Frequency = 1; // 10 Hz
     b22:	c6 e3       	ldi	r28, 0x36	; 54
     b24:	d1 e2       	ldi	r29, 0x21	; 33
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	88 83       	st	Y, r24
     b2c:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Slow.DutyCycle = 50; // 50%
     b2e:	aa 86       	std	Y+10, r10	; 0x0a
     b30:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Slow.Duration  = ((1000 / m_structDGUSDATA_Slow.Frequency) * m_structDGUSDATA_Slow.DutyCycle) / 100; // ms
     b32:	68 81       	ld	r22, Y
     b34:	79 81       	ldd	r23, Y+1	; 0x01
     b36:	8a 84       	ldd	r8, Y+10	; 0x0a
     b38:	9b 84       	ldd	r9, Y+11	; 0x0b
     b3a:	c6 01       	movw	r24, r12
     b3c:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
     b40:	68 9d       	mul	r22, r8
     b42:	90 01       	movw	r18, r0
     b44:	69 9d       	mul	r22, r9
     b46:	30 0d       	add	r19, r0
     b48:	78 9d       	mul	r23, r8
     b4a:	30 0d       	add	r19, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	36 95       	lsr	r19
     b50:	27 95       	ror	r18
     b52:	36 95       	lsr	r19
     b54:	27 95       	ror	r18
     b56:	ab e7       	ldi	r26, 0x7B	; 123
     b58:	b4 e1       	ldi	r27, 0x14	; 20
     b5a:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     b5e:	96 95       	lsr	r25
     b60:	87 95       	ror	r24
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Slow.Intensity = 200; // W
     b66:	ec 82       	std	Y+4, r14	; 0x04
     b68:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Slow.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100; // W
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	4a 85       	ldd	r20, Y+10	; 0x0a
     b70:	5b 85       	ldd	r21, Y+11	; 0x0b
     b72:	48 9f       	mul	r20, r24
     b74:	90 01       	movw	r18, r0
     b76:	49 9f       	mul	r20, r25
     b78:	30 0d       	add	r19, r0
     b7a:	58 9f       	mul	r21, r24
     b7c:	30 0d       	add	r19, r0
     b7e:	11 24       	eor	r1, r1
     b80:	36 95       	lsr	r19
     b82:	27 95       	ror	r18
     b84:	36 95       	lsr	r19
     b86:	27 95       	ror	r18
     b88:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	8e 83       	std	Y+6, r24	; 0x06
     b92:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Slow.Energy    = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration) / 1000; // J
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	4a 81       	ldd	r20, Y+2	; 0x02
     b9a:	5b 81       	ldd	r21, Y+3	; 0x03
     b9c:	48 9f       	mul	r20, r24
     b9e:	90 01       	movw	r18, r0
     ba0:	49 9f       	mul	r20, r25
     ba2:	30 0d       	add	r19, r0
     ba4:	58 9f       	mul	r21, r24
     ba6:	30 0d       	add	r19, r0
     ba8:	11 24       	eor	r1, r1
     baa:	36 95       	lsr	r19
     bac:	27 95       	ror	r18
     bae:	36 95       	lsr	r19
     bb0:	27 95       	ror	r18
     bb2:	36 95       	lsr	r19
     bb4:	27 95       	ror	r18
     bb6:	a5 ec       	ldi	r26, 0xC5	; 197
     bb8:	b0 e2       	ldi	r27, 0x20	; 32
     bba:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     bbe:	92 95       	swap	r25
     bc0:	82 95       	swap	r24
     bc2:	8f 70       	andi	r24, 0x0F	; 15
     bc4:	89 27       	eor	r24, r25
     bc6:	9f 70       	andi	r25, 0x0F	; 15
     bc8:	89 27       	eor	r24, r25
     bca:	88 87       	std	Y+8, r24	; 0x08
     bcc:	99 87       	std	Y+9, r25	; 0x09
	
	// Medium profile
	m_structDGUSDATA_Medium.Frequency = 5; // 10 Hz
     bce:	c2 e4       	ldi	r28, 0x42	; 66
     bd0:	d1 e2       	ldi	r29, 0x21	; 33
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	88 83       	st	Y, r24
     bd8:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Medium.DutyCycle = 50; // 50%
     bda:	aa 86       	std	Y+10, r10	; 0x0a
     bdc:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Medium.Duration  = ((1000 / m_structDGUSDATA_Medium.Frequency) * m_structDGUSDATA_Medium.DutyCycle) / 100; // ms
     bde:	68 81       	ld	r22, Y
     be0:	79 81       	ldd	r23, Y+1	; 0x01
     be2:	aa 84       	ldd	r10, Y+10	; 0x0a
     be4:	bb 84       	ldd	r11, Y+11	; 0x0b
     be6:	c6 01       	movw	r24, r12
     be8:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
     bec:	6a 9d       	mul	r22, r10
     bee:	90 01       	movw	r18, r0
     bf0:	6b 9d       	mul	r22, r11
     bf2:	30 0d       	add	r19, r0
     bf4:	7a 9d       	mul	r23, r10
     bf6:	30 0d       	add	r19, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	36 95       	lsr	r19
     bfc:	27 95       	ror	r18
     bfe:	36 95       	lsr	r19
     c00:	27 95       	ror	r18
     c02:	ab e7       	ldi	r26, 0x7B	; 123
     c04:	b4 e1       	ldi	r27, 0x14	; 20
     c06:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     c0a:	96 95       	lsr	r25
     c0c:	87 95       	ror	r24
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Medium.Intensity = 200; // W
     c12:	ec 82       	std	Y+4, r14	; 0x04
     c14:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Medium.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100; // W
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	9d 81       	ldd	r25, Y+5	; 0x05
     c1a:	4a 85       	ldd	r20, Y+10	; 0x0a
     c1c:	5b 85       	ldd	r21, Y+11	; 0x0b
     c1e:	48 9f       	mul	r20, r24
     c20:	90 01       	movw	r18, r0
     c22:	49 9f       	mul	r20, r25
     c24:	30 0d       	add	r19, r0
     c26:	58 9f       	mul	r21, r24
     c28:	30 0d       	add	r19, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	36 95       	lsr	r19
     c2e:	27 95       	ror	r18
     c30:	36 95       	lsr	r19
     c32:	27 95       	ror	r18
     c34:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     c38:	96 95       	lsr	r25
     c3a:	87 95       	ror	r24
     c3c:	8e 83       	std	Y+6, r24	; 0x06
     c3e:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Medium.Energy    = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration) / 1000; // J
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	4a 81       	ldd	r20, Y+2	; 0x02
     c46:	5b 81       	ldd	r21, Y+3	; 0x03
     c48:	48 9f       	mul	r20, r24
     c4a:	90 01       	movw	r18, r0
     c4c:	49 9f       	mul	r20, r25
     c4e:	30 0d       	add	r19, r0
     c50:	58 9f       	mul	r21, r24
     c52:	30 0d       	add	r19, r0
     c54:	11 24       	eor	r1, r1
     c56:	36 95       	lsr	r19
     c58:	27 95       	ror	r18
     c5a:	36 95       	lsr	r19
     c5c:	27 95       	ror	r18
     c5e:	36 95       	lsr	r19
     c60:	27 95       	ror	r18
     c62:	a5 ec       	ldi	r26, 0xC5	; 197
     c64:	b0 e2       	ldi	r27, 0x20	; 32
     c66:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     c6a:	92 95       	swap	r25
     c6c:	82 95       	swap	r24
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	89 27       	eor	r24, r25
     c72:	9f 70       	andi	r25, 0x0F	; 15
     c74:	89 27       	eor	r24, r25
     c76:	88 87       	std	Y+8, r24	; 0x08
     c78:	99 87       	std	Y+9, r25	; 0x09
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	8a e6       	ldi	r24, 0x6A	; 106
     c80:	98 e1       	ldi	r25, 0x18	; 24
     c82:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
     c86:	ab 01       	movw	r20, r22
     c88:	44 0f       	add	r20, r20
     c8a:	55 1f       	adc	r21, r21
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	66 0f       	add	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	66 0f       	add	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	46 0f       	add	r20, r22
     c9a:	57 1f       	adc	r21, r23
     c9c:	d8 01       	movw	r26, r16
     c9e:	50 96       	adiw	r26, 0x10	; 16
     ca0:	4d 93       	st	X+, r20
     ca2:	5c 93       	st	X, r21
     ca4:	51 97       	sbiw	r26, 0x11	; 17
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA_Fast.DutyCycle);
     ca6:	02 84       	ldd	r0, Z+10	; 0x0a
     ca8:	f3 85       	ldd	r31, Z+11	; 0x0b
     caa:	e0 2d       	mov	r30, r0
     cac:	9a 01       	movw	r18, r20
     cae:	36 95       	lsr	r19
     cb0:	27 95       	ror	r18
     cb2:	36 95       	lsr	r19
     cb4:	27 95       	ror	r18
     cb6:	ab e7       	ldi	r26, 0x7B	; 123
     cb8:	b4 e1       	ldi	r27, 0x14	; 20
     cba:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	8e 9f       	mul	r24, r30
     cc4:	90 01       	movw	r18, r0
     cc6:	8f 9f       	mul	r24, r31
     cc8:	30 0d       	add	r19, r0
     cca:	9e 9f       	mul	r25, r30
     ccc:	30 0d       	add	r19, r0
     cce:	11 24       	eor	r1, r1
     cd0:	42 1b       	sub	r20, r18
     cd2:	53 0b       	sbc	r21, r19
     cd4:	f8 01       	movw	r30, r16
     cd6:	42 8b       	std	Z+18, r20	; 0x12
     cd8:	53 8b       	std	Z+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     cda:	47 e0       	ldi	r20, 0x07	; 7
     cdc:	63 e0       	ldi	r22, 0x03	; 3
     cde:	8a e5       	ldi	r24, 0x5A	; 90
     ce0:	91 e2       	ldi	r25, 0x21	; 33
     ce2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     ce6:	d8 01       	movw	r26, r16
     ce8:	50 96       	adiw	r26, 0x10	; 16
     cea:	6d 91       	ld	r22, X+
     cec:	7c 91       	ld	r23, X
     cee:	51 97       	sbiw	r26, 0x11	; 17
     cf0:	8a e5       	ldi	r24, 0x5A	; 90
     cf2:	91 e2       	ldi	r25, 0x21	; 33
     cf4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     cf8:	f8 01       	movw	r30, r16
     cfa:	62 89       	ldd	r22, Z+18	; 0x12
     cfc:	73 89       	ldd	r23, Z+19	; 0x13
     cfe:	8a e5       	ldi	r24, 0x5A	; 90
     d00:	91 e2       	ldi	r25, 0x21	; 33
     d02:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     d06:	d8 01       	movw	r26, r16
     d08:	52 96       	adiw	r26, 0x12	; 18
     d0a:	6d 91       	ld	r22, X+
     d0c:	7c 91       	ld	r23, X
     d0e:	53 97       	sbiw	r26, 0x13	; 19
     d10:	8a e5       	ldi	r24, 0x5A	; 90
     d12:	91 e2       	ldi	r25, 0x21	; 33
     d14:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	a8 01       	movw	r20, r16
     d1c:	6d ee       	ldi	r22, 0xED	; 237
     d1e:	74 e0       	ldi	r23, 0x04	; 4
     d20:	8a e5       	ldi	r24, 0x5A	; 90
     d22:	91 e2       	ldi	r25, 0x21	; 33
     d24:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     d28:	60 e1       	ldi	r22, 0x10	; 16
     d2a:	8a e5       	ldi	r24, 0x5A	; 90
     d2c:	91 e2       	ldi	r25, 0x21	; 33
     d2e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     d32:	60 e2       	ldi	r22, 0x20	; 32
     d34:	8a e5       	ldi	r24, 0x5A	; 90
     d36:	91 e2       	ldi	r25, 0x21	; 33
     d38:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     d3c:	60 e1       	ldi	r22, 0x10	; 16
     d3e:	8a e5       	ldi	r24, 0x5A	; 90
     d40:	91 e2       	ldi	r25, 0x21	; 33
     d42:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     d46:	60 e2       	ldi	r22, 0x20	; 32
     d48:	8a e5       	ldi	r24, 0x5A	; 90
     d4a:	91 e2       	ldi	r25, 0x21	; 33
     d4c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = WorkFast;
     d50:	f8 01       	movw	r30, r16
     d52:	15 86       	std	Z+13, r1	; 0x0d
}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	bf 90       	pop	r11
     d66:	af 90       	pop	r10
     d68:	9f 90       	pop	r9
     d6a:	8f 90       	pop	r8
     d6c:	08 95       	ret

00000d6e <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKFAST;
}

// Process GUI
void CLaserControlApp::Run()
{
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	c1 5e       	subi	r28, 0xE1	; 225
     d80:	d1 40       	sbci	r29, 0x01	; 1
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     d88:	42 e0       	ldi	r20, 0x02	; 2
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	dc 01       	movw	r26, r24
     d8e:	58 96       	adiw	r26, 0x18	; 24
     d90:	8d 91       	ld	r24, X+
     d92:	9c 91       	ld	r25, X
     d94:	59 97       	sbiw	r26, 0x19	; 25
     d96:	0e 94 82 25 	call	0x4b04	; 0x4b04 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     d9a:	f8 01       	movw	r30, r16
     d9c:	80 8d       	ldd	r24, Z+24	; 0x18
     d9e:	91 8d       	ldd	r25, Z+25	; 0x19
     da0:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     da4:	d8 01       	movw	r26, r16
     da6:	58 96       	adiw	r26, 0x18	; 24
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	59 97       	sbiw	r26, 0x19	; 25
     dae:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <_ZN9CMBSender18WaitMODBUSListenerEv>
     db2:	bf ef       	ldi	r27, 0xFF	; 255
     db4:	e1 ee       	ldi	r30, 0xE1	; 225
     db6:	f4 e0       	ldi	r31, 0x04	; 4
     db8:	b1 50       	subi	r27, 0x01	; 1
     dba:	e0 40       	sbci	r30, 0x00	; 0
     dbc:	f0 40       	sbci	r31, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <_ZN16CLaserControlApp3RunEv+0x4a>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <_ZN16CLaserControlApp3RunEv+0x54>
     dc2:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     dc4:	d8 01       	movw	r26, r16
     dc6:	1f 96       	adiw	r26, 0x0f	; 15
     dc8:	8c 91       	ld	r24, X
     dca:	1f 97       	sbiw	r26, 0x0f	; 15
     dcc:	81 11       	cpse	r24, r1
     dce:	1e c0       	rjmp	.+60     	; 0xe0c <_ZN16CLaserControlApp3RunEv+0x9e>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     dd0:	4c e0       	ldi	r20, 0x0C	; 12
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	58 96       	adiw	r26, 0x18	; 24
     dd8:	8d 91       	ld	r24, X+
     dda:	9c 91       	ld	r25, X
     ddc:	59 97       	sbiw	r26, 0x19	; 25
     dde:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     de2:	f8 01       	movw	r30, r16
     de4:	80 8d       	ldd	r24, Z+24	; 0x18
     de6:	91 8d       	ldd	r25, Z+25	; 0x19
     de8:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     dec:	d8 01       	movw	r26, r16
     dee:	58 96       	adiw	r26, 0x18	; 24
     df0:	8d 91       	ld	r24, X+
     df2:	9c 91       	ld	r25, X
     df4:	59 97       	sbiw	r26, 0x19	; 25
     df6:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <_ZN9CMBSender18WaitMODBUSListenerEv>
     dfa:	bf ef       	ldi	r27, 0xFF	; 255
     dfc:	e1 ee       	ldi	r30, 0xE1	; 225
     dfe:	f4 e0       	ldi	r31, 0x04	; 4
     e00:	b1 50       	subi	r27, 0x01	; 1
     e02:	e0 40       	sbci	r30, 0x00	; 0
     e04:	f0 40       	sbci	r31, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <_ZN16CLaserControlApp3RunEv+0x92>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <_ZN16CLaserControlApp3RunEv+0x9c>
     e0a:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     e0c:	d8 01       	movw	r26, r16
     e0e:	1c 96       	adiw	r26, 0x0c	; 12
     e10:	8c 91       	ld	r24, X
     e12:	86 30       	cpi	r24, 0x06	; 6
     e14:	09 f4       	brne	.+2      	; 0xe18 <_ZN16CLaserControlApp3RunEv+0xaa>
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <_ZN16CLaserControlApp3RunEv+0x158>
     e18:	28 f4       	brcc	.+10     	; 0xe24 <_ZN16CLaserControlApp3RunEv+0xb6>
     e1a:	88 23       	and	r24, r24
     e1c:	61 f0       	breq	.+24     	; 0xe36 <_ZN16CLaserControlApp3RunEv+0xc8>
     e1e:	85 30       	cpi	r24, 0x05	; 5
     e20:	19 f1       	breq	.+70     	; 0xe68 <_ZN16CLaserControlApp3RunEv+0xfa>
     e22:	07 c2       	rjmp	.+1038   	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
     e24:	88 30       	cpi	r24, 0x08	; 8
     e26:	09 f4       	brne	.+2      	; 0xe2a <_ZN16CLaserControlApp3RunEv+0xbc>
     e28:	bc c0       	rjmp	.+376    	; 0xfa2 <_ZN16CLaserControlApp3RunEv+0x234>
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <_ZN16CLaserControlApp3RunEv+0xc0>
     e2c:	6d c0       	rjmp	.+218    	; 0xf08 <_ZN16CLaserControlApp3RunEv+0x19a>
     e2e:	80 31       	cpi	r24, 0x10	; 16
     e30:	09 f4       	brne	.+2      	; 0xe34 <_ZN16CLaserControlApp3RunEv+0xc6>
     e32:	11 c1       	rjmp	.+546    	; 0x1056 <_ZN16CLaserControlApp3RunEv+0x2e8>
     e34:	fe c1       	rjmp	.+1020   	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_MAINMENU);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	94 e1       	ldi	r25, 0x14	; 20
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     e3e:	22 e0       	ldi	r18, 0x02	; 2
     e40:	ae 01       	movw	r20, r28
     e42:	4f 5f       	subi	r20, 0xFF	; 255
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	63 e0       	ldi	r22, 0x03	; 3
     e48:	f8 01       	movw	r30, r16
     e4a:	80 8d       	ldd	r24, Z+24	; 0x18
     e4c:	91 8d       	ldd	r25, Z+25	; 0x19
     e4e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     e52:	d8 01       	movw	r26, r16
     e54:	58 96       	adiw	r26, 0x18	; 24
     e56:	8d 91       	ld	r24, X+
     e58:	9c 91       	ld	r25, X
     e5a:	59 97       	sbiw	r26, 0x19	; 25
     e5c:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKFAST;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	f8 01       	movw	r30, r16
     e64:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     e66:	e5 c1       	rjmp	.+970    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
			//state = APP_WORKFAST;
		break;
		case APP_WORKSTARTED:
			//state = APP_WORKFAST;
			
			if (!laserBoard.Footswitch())
     e68:	89 e6       	ldi	r24, 0x69	; 105
     e6a:	93 e2       	ldi	r25, 0x23	; 35
     e6c:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN11CLaserBoard10FootswitchEv>
     e70:	81 11       	cpse	r24, r1
     e72:	1a c0       	rjmp	.+52     	; 0xea8 <_ZN16CLaserControlApp3RunEv+0x13a>
			{
				laserTimer.SetCOMPA(laserTimerDutyCycle);
     e74:	d8 01       	movw	r26, r16
     e76:	52 96       	adiw	r26, 0x12	; 18
     e78:	6d 91       	ld	r22, X+
     e7a:	7c 91       	ld	r23, X
     e7c:	53 97       	sbiw	r26, 0x13	; 19
     e7e:	8a e5       	ldi	r24, 0x5A	; 90
     e80:	91 e2       	ldi	r25, 0x21	; 33
     e82:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
     e86:	f8 01       	movw	r30, r16
     e88:	62 89       	ldd	r22, Z+18	; 0x12
     e8a:	73 89       	ldd	r23, Z+19	; 0x13
     e8c:	8a e5       	ldi	r24, 0x5A	; 90
     e8e:	91 e2       	ldi	r25, 0x21	; 33
     e90:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN7CTimerF8SetCOMPBEj>
				//laserTimer.SetPeriod(laserTimerPeriod);
				laserTimer.Start(laserTimerPeriod);
     e94:	d8 01       	movw	r26, r16
     e96:	50 96       	adiw	r26, 0x10	; 16
     e98:	6d 91       	ld	r22, X+
     e9a:	7c 91       	ld	r23, X
     e9c:	51 97       	sbiw	r26, 0x11	; 17
     e9e:	8a e5       	ldi	r24, 0x5A	; 90
     ea0:	91 e2       	ldi	r25, 0x21	; 33
     ea2:	0e 94 ef 0c 	call	0x19de	; 0x19de <_ZN7CTimerF5StartEj>
     ea6:	c5 c1       	rjmp	.+906    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
			}
			else
			{
				laserTimer.Stop();
     ea8:	8a e5       	ldi	r24, 0x5A	; 90
     eaa:	91 e2       	ldi	r25, 0x21	; 33
     eac:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     eb0:	60 e1       	ldi	r22, 0x10	; 16
     eb2:	8a e5       	ldi	r24, 0x5A	; 90
     eb4:	91 e2       	ldi	r25, 0x21	; 33
     eb6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     eba:	60 e2       	ldi	r22, 0x20	; 32
     ebc:	8a e5       	ldi	r24, 0x5A	; 90
     ebe:	91 e2       	ldi	r25, 0x21	; 33
     ec0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     ec4:	b6 c1       	rjmp	.+876    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     ec6:	89 e6       	ldi	r24, 0x69	; 105
     ec8:	93 e2       	ldi	r25, 0x23	; 35
     eca:	0e 94 22 03 	call	0x644	; 0x644 <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     ece:	89 e6       	ldi	r24, 0x69	; 105
     ed0:	93 e2       	ldi	r25, 0x23	; 35
     ed2:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORKSTART);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	9a e0       	ldi	r25, 0x0A	; 10
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     ede:	22 e0       	ldi	r18, 0x02	; 2
     ee0:	ae 01       	movw	r20, r28
     ee2:	4f 5f       	subi	r20, 0xFF	; 255
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	f8 01       	movw	r30, r16
     eea:	80 8d       	ldd	r24, Z+24	; 0x18
     eec:	91 8d       	ldd	r25, Z+25	; 0x19
     eee:	0e 94 34 25 	call	0x4a68	; 0x4a68 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     ef2:	d8 01       	movw	r26, r16
     ef4:	58 96       	adiw	r26, 0x18	; 24
     ef6:	8d 91       	ld	r24, X+
     ef8:	9c 91       	ld	r25, X
     efa:	59 97       	sbiw	r26, 0x19	; 25
     efc:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTART;
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	f8 01       	movw	r30, r16
     f04:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     f06:	95 c1       	rjmp	.+810    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
		case APP_WORKOnStart:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     f08:	d8 01       	movw	r26, r16
     f0a:	56 96       	adiw	r26, 0x16	; 22
     f0c:	4d 91       	ld	r20, X+
     f0e:	5c 91       	ld	r21, X
     f10:	57 97       	sbiw	r26, 0x17	; 23
     f12:	00 24       	eor	r0, r0
     f14:	56 95       	lsr	r21
     f16:	47 95       	ror	r20
     f18:	07 94       	ror	r0
     f1a:	56 95       	lsr	r21
     f1c:	47 95       	ror	r20
     f1e:	07 94       	ror	r0
     f20:	54 2f       	mov	r21, r20
     f22:	40 2d       	mov	r20, r0
     f24:	9a 01       	movw	r18, r20
     f26:	a1 e1       	ldi	r26, 0x11	; 17
     f28:	b4 e0       	ldi	r27, 0x04	; 4
     f2a:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
     f2e:	48 1b       	sub	r20, r24
     f30:	59 0b       	sbc	r21, r25
     f32:	56 95       	lsr	r21
     f34:	47 95       	ror	r20
     f36:	84 0f       	add	r24, r20
     f38:	95 1f       	adc	r25, r21
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	92 95       	swap	r25
     f40:	82 95       	swap	r24
     f42:	8f 70       	andi	r24, 0x0F	; 15
     f44:	89 27       	eor	r24, r25
     f46:	9f 70       	andi	r25, 0x0F	; 15
     f48:	89 27       	eor	r24, r25
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	cf 51       	subi	r28, 0x1F	; 31
     f54:	df 4f       	sbci	r29, 0xFF	; 255
     f56:	88 83       	st	Y, r24
     f58:	99 83       	std	Y+1, r25	; 0x01
     f5a:	c1 5e       	subi	r28, 0xE1	; 225
     f5c:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     f5e:	42 e0       	ldi	r20, 0x02	; 2
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	be 01       	movw	r22, r28
     f64:	6f 51       	subi	r22, 0x1F	; 31
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8e e8       	ldi	r24, 0x8E	; 142
     f6a:	93 e2       	ldi	r25, 0x23	; 35
     f6c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORKSTARTED);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	9b e0       	ldi	r25, 0x0B	; 11
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f78:	22 e0       	ldi	r18, 0x02	; 2
     f7a:	ae 01       	movw	r20, r28
     f7c:	4f 5f       	subi	r20, 0xFF	; 255
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	63 e0       	ldi	r22, 0x03	; 3
     f82:	f8 01       	movw	r30, r16
     f84:	80 8d       	ldd	r24, Z+24	; 0x18
     f86:	91 8d       	ldd	r25, Z+25	; 0x19
     f88:	0e 94 34 25 	call	0x4a68	; 0x4a68 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     f8c:	d8 01       	movw	r26, r16
     f8e:	58 96       	adiw	r26, 0x18	; 24
     f90:	8d 91       	ld	r24, X+
     f92:	9c 91       	ld	r25, X
     f94:	59 97       	sbiw	r26, 0x19	; 25
     f96:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTARTED;
     f9a:	85 e0       	ldi	r24, 0x05	; 5
     f9c:	f8 01       	movw	r30, r16
     f9e:	84 87       	std	Z+12, r24	; 0x0c

				//laserTimer.Start(12500);
			}
		break;
     fa0:	48 c1       	rjmp	.+656    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
		case APP_WORKOnStop:
			{
				uint16_t data = 0;
     fa2:	cf 51       	subi	r28, 0x1F	; 31
     fa4:	df 4f       	sbci	r29, 0xFF	; 255
     fa6:	18 82       	st	Y, r1
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	c1 5e       	subi	r28, 0xE1	; 225
     fac:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     fae:	42 e0       	ldi	r20, 0x02	; 2
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 51       	subi	r22, 0x1F	; 31
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	8e e8       	ldi	r24, 0x8E	; 142
     fba:	93 e2       	ldi	r25, 0x23	; 35
     fbc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN4CSPI4SendEPhj>
				
				laserTimer.Stop();
     fc0:	8a e5       	ldi	r24, 0x5A	; 90
     fc2:	91 e2       	ldi	r25, 0x21	; 33
     fc4:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     fc8:	60 e1       	ldi	r22, 0x10	; 16
     fca:	8a e5       	ldi	r24, 0x5A	; 90
     fcc:	91 e2       	ldi	r25, 0x21	; 33
     fce:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     fd2:	60 e2       	ldi	r22, 0x20	; 32
     fd4:	8a e5       	ldi	r24, 0x5A	; 90
     fd6:	91 e2       	ldi	r25, 0x21	; 33
     fd8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
     fdc:	89 e6       	ldi	r24, 0x69	; 105
     fde:	93 e2       	ldi	r25, 0x23	; 35
     fe0:	0e 94 32 03 	call	0x664	; 0x664 <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
     fe4:	89 e6       	ldi	r24, 0x69	; 105
     fe6:	93 e2       	ldi	r25, 0x23	; 35
     fe8:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t pic_id = 0;
     fec:	19 82       	std	Y+1, r1	; 0x01
     fee:	1a 82       	std	Y+2, r1	; 0x02
				switch (profile)
     ff0:	d8 01       	movw	r26, r16
     ff2:	1d 96       	adiw	r26, 0x0d	; 13
     ff4:	8c 91       	ld	r24, X
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	a9 f0       	breq	.+42     	; 0x1024 <_ZN16CLaserControlApp3RunEv+0x2b6>
     ffa:	18 f0       	brcs	.+6      	; 0x1002 <_ZN16CLaserControlApp3RunEv+0x294>
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	49 f0       	breq	.+18     	; 0x1012 <_ZN16CLaserControlApp3RunEv+0x2a4>
    1000:	18 c0       	rjmp	.+48     	; 0x1032 <_ZN16CLaserControlApp3RunEv+0x2c4>
				{
					case WorkFast: 
						pic_id = swap(PICID_WORKFAST); 
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKFAST;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	f8 01       	movw	r30, r16
    100e:	84 87       	std	Z+12, r24	; 0x0c
						break;
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <_ZN16CLaserControlApp3RunEv+0x2c4>
					case WorkSlow: 
						pic_id = swap(PICID_WORKSLOW); 
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKSLOW;
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	d8 01       	movw	r26, r16
    101e:	1c 96       	adiw	r26, 0x0c	; 12
    1020:	8c 93       	st	X, r24
						break;
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <_ZN16CLaserControlApp3RunEv+0x2c4>
					case WorkMedium: 
						pic_id = swap(PICID_WORKMEDIUM); 
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKMEDIUM;
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	f8 01       	movw	r30, r16
    1030:	84 87       	std	Z+12, r24	; 0x0c
						break;
				}
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1032:	22 e0       	ldi	r18, 0x02	; 2
    1034:	ae 01       	movw	r20, r28
    1036:	4f 5f       	subi	r20, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	63 e0       	ldi	r22, 0x03	; 3
    103c:	d8 01       	movw	r26, r16
    103e:	58 96       	adiw	r26, 0x18	; 24
    1040:	8d 91       	ld	r24, X+
    1042:	9c 91       	ld	r25, X
    1044:	59 97       	sbiw	r26, 0x19	; 25
    1046:	0e 94 34 25 	call	0x4a68	; 0x4a68 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    104a:	f8 01       	movw	r30, r16
    104c:	80 8d       	ldd	r24, Z+24	; 0x18
    104e:	91 8d       	ldd	r25, Z+25	; 0x19
    1050:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			}
		break;
    1054:	ee c0       	rjmp	.+476    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x4c4>
		case APP_PHOTOTYPE6:
			//state = APP_WORKFAST;
		break;
		case APP_DATABASE:
			{
				DGUS_LINESDATA1 lines1 = {0};
    1056:	fe 01       	movw	r30, r28
    1058:	ef 51       	subi	r30, 0x1F	; 31
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	80 ee       	ldi	r24, 0xE0	; 224
    105e:	df 01       	movw	r26, r30
    1060:	28 2f       	mov	r18, r24
    1062:	1d 92       	st	X+, r1
    1064:	2a 95       	dec	r18
    1066:	e9 f7       	brne	.-6      	; 0x1062 <_ZN16CLaserControlApp3RunEv+0x2f4>
				DGUS_LINESDATA2 lines2 = {0};                     //
    1068:	e0 5e       	subi	r30, 0xE0	; 224
    106a:	f1 09       	sbc	r31, r1
    106c:	df 01       	movw	r26, r30
    106e:	1d 92       	st	X+, r1
    1070:	8a 95       	dec	r24
    1072:	e9 f7       	brne	.-6      	; 0x106e <_ZN16CLaserControlApp3RunEv+0x300>
				char empty[33] = "Hello world!                    ";
    1074:	81 e2       	ldi	r24, 0x21	; 33
    1076:	ee e5       	ldi	r30, 0x5E	; 94
    1078:	f0 e2       	ldi	r31, 0x20	; 32
    107a:	de 01       	movw	r26, r28
    107c:	af 53       	subi	r26, 0x3F	; 63
    107e:	be 4f       	sbci	r27, 0xFE	; 254
    1080:	01 90       	ld	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	8a 95       	dec	r24
    1086:	e1 f7       	brne	.-8      	; 0x1080 <_ZN16CLaserControlApp3RunEv+0x312>
				
				static int cnt = 0;
				cnt+=1;
    1088:	80 91 34 21 	lds	r24, 0x2134
    108c:	90 91 35 21 	lds	r25, 0x2135
    1090:	01 96       	adiw	r24, 0x01	; 1
				if (cnt >= 32) cnt = 0;
    1092:	80 32       	cpi	r24, 0x20	; 32
    1094:	91 05       	cpc	r25, r1
    1096:	2c f4       	brge	.+10     	; 0x10a2 <_ZN16CLaserControlApp3RunEv+0x334>
				DGUS_LINESDATA1 lines1 = {0};
				DGUS_LINESDATA2 lines2 = {0};                     //
				char empty[33] = "Hello world!                    ";
				
				static int cnt = 0;
				cnt+=1;
    1098:	80 93 34 21 	sts	0x2134, r24
    109c:	90 93 35 21 	sts	0x2135, r25
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <_ZN16CLaserControlApp3RunEv+0x33c>
				if (cnt >= 32) cnt = 0;
    10a2:	10 92 34 21 	sts	0x2134, r1
    10a6:	10 92 35 21 	sts	0x2135, r1
					
				ConvertData((void*)lines1.line1 , (void*)empty, 32, cnt);
    10aa:	e0 90 34 21 	lds	r14, 0x2134
    10ae:	f0 90 35 21 	lds	r15, 0x2135
    10b2:	97 01       	movw	r18, r14
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	be 01       	movw	r22, r28
    10ba:	6f 53       	subi	r22, 0x3F	; 63
    10bc:	7e 4f       	sbci	r23, 0xFE	; 254
    10be:	ce 01       	movw	r24, r28
    10c0:	8f 51       	subi	r24, 0x1F	; 31
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines1.line2 , (void*)empty, 32, cnt);
    10c8:	97 01       	movw	r18, r14
    10ca:	40 e2       	ldi	r20, 0x20	; 32
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 53       	subi	r22, 0x3F	; 63
    10d2:	7e 4f       	sbci	r23, 0xFE	; 254
    10d4:	81 ee       	ldi	r24, 0xE1	; 225
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	8c 0f       	add	r24, r28
    10da:	9d 1f       	adc	r25, r29
    10dc:	80 96       	adiw	r24, 0x20	; 32
    10de:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines1.line3 , (void*)empty, 32, cnt);
    10e2:	97 01       	movw	r18, r14
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	be 01       	movw	r22, r28
    10ea:	6f 53       	subi	r22, 0x3F	; 63
    10ec:	7e 4f       	sbci	r23, 0xFE	; 254
    10ee:	ce 01       	movw	r24, r28
    10f0:	8f 5d       	subi	r24, 0xDF	; 223
    10f2:	9e 4f       	sbci	r25, 0xFE	; 254
    10f4:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines1.line4 , (void*)empty, 32, cnt);
    10f8:	97 01       	movw	r18, r14
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	be 01       	movw	r22, r28
    1100:	6f 53       	subi	r22, 0x3F	; 63
    1102:	7e 4f       	sbci	r23, 0xFE	; 254
    1104:	ce 01       	movw	r24, r28
    1106:	8f 5b       	subi	r24, 0xBF	; 191
    1108:	9e 4f       	sbci	r25, 0xFE	; 254
    110a:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines1.line5 , (void*)empty, 32, cnt);
    110e:	97 01       	movw	r18, r14
    1110:	40 e2       	ldi	r20, 0x20	; 32
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	be 01       	movw	r22, r28
    1116:	6f 53       	subi	r22, 0x3F	; 63
    1118:	7e 4f       	sbci	r23, 0xFE	; 254
    111a:	ce 01       	movw	r24, r28
    111c:	8f 59       	subi	r24, 0x9F	; 159
    111e:	9e 4f       	sbci	r25, 0xFE	; 254
    1120:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines1.line6 , (void*)empty, 32, cnt);
    1124:	97 01       	movw	r18, r14
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	be 01       	movw	r22, r28
    112c:	6f 53       	subi	r22, 0x3F	; 63
    112e:	7e 4f       	sbci	r23, 0xFE	; 254
    1130:	ce 01       	movw	r24, r28
    1132:	8f 57       	subi	r24, 0x7F	; 127
    1134:	9e 4f       	sbci	r25, 0xFE	; 254
    1136:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines1.line7 , (void*)empty, 32, cnt);
    113a:	97 01       	movw	r18, r14
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	be 01       	movw	r22, r28
    1142:	6f 53       	subi	r22, 0x3F	; 63
    1144:	7e 4f       	sbci	r23, 0xFE	; 254
    1146:	ce 01       	movw	r24, r28
    1148:	8f 55       	subi	r24, 0x5F	; 95
    114a:	9e 4f       	sbci	r25, 0xFE	; 254
    114c:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line8 , (void*)empty, 32, cnt);
    1150:	97 01       	movw	r18, r14
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	be 01       	movw	r22, r28
    1158:	6f 53       	subi	r22, 0x3F	; 63
    115a:	7e 4f       	sbci	r23, 0xFE	; 254
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line9 , (void*)empty, 32, cnt);
    1164:	97 01       	movw	r18, r14
    1166:	40 e2       	ldi	r20, 0x20	; 32
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	be 01       	movw	r22, r28
    116c:	6f 53       	subi	r22, 0x3F	; 63
    116e:	7e 4f       	sbci	r23, 0xFE	; 254
    1170:	ce 01       	movw	r24, r28
    1172:	81 96       	adiw	r24, 0x21	; 33
    1174:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line10, (void*)empty, 32, cnt);
    1178:	97 01       	movw	r18, r14
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	be 01       	movw	r22, r28
    1180:	6f 53       	subi	r22, 0x3F	; 63
    1182:	7e 4f       	sbci	r23, 0xFE	; 254
    1184:	ce 01       	movw	r24, r28
    1186:	8f 5b       	subi	r24, 0xBF	; 191
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line11, (void*)empty, 32, cnt);
    118e:	97 01       	movw	r18, r14
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	be 01       	movw	r22, r28
    1196:	6f 53       	subi	r22, 0x3F	; 63
    1198:	7e 4f       	sbci	r23, 0xFE	; 254
    119a:	ce 01       	movw	r24, r28
    119c:	8f 59       	subi	r24, 0x9F	; 159
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line12, (void*)empty, 32, cnt);
    11a4:	97 01       	movw	r18, r14
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	be 01       	movw	r22, r28
    11ac:	6f 53       	subi	r22, 0x3F	; 63
    11ae:	7e 4f       	sbci	r23, 0xFE	; 254
    11b0:	ce 01       	movw	r24, r28
    11b2:	8f 57       	subi	r24, 0x7F	; 127
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line13, (void*)empty, 32, cnt);
    11ba:	97 01       	movw	r18, r14
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	be 01       	movw	r22, r28
    11c2:	6f 53       	subi	r22, 0x3F	; 63
    11c4:	7e 4f       	sbci	r23, 0xFE	; 254
    11c6:	ce 01       	movw	r24, r28
    11c8:	8f 55       	subi	r24, 0x5F	; 95
    11ca:	9f 4f       	sbci	r25, 0xFF	; 255
    11cc:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)lines2.line14, (void*)empty, 32, cnt);
    11d0:	97 01       	movw	r18, r14
    11d2:	40 e2       	ldi	r20, 0x20	; 32
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	be 01       	movw	r22, r28
    11d8:	6f 53       	subi	r22, 0x3F	; 63
    11da:	7e 4f       	sbci	r23, 0xFE	; 254
    11dc:	ce 01       	movw	r24, r28
    11de:	8f 53       	subi	r24, 0x3F	; 63
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	0e 94 43 04 	call	0x886	; 0x886 <_Z11ConvertDataPvS_jj>
								
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA1, (uint16_t*)&lines1, sizeof(lines1));
    11e6:	20 ee       	ldi	r18, 0xE0	; 224
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	ae 01       	movw	r20, r28
    11ec:	4f 51       	subi	r20, 0x1F	; 31
    11ee:	5f 4f       	sbci	r21, 0xFF	; 255
    11f0:	60 e1       	ldi	r22, 0x10	; 16
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	f8 01       	movw	r30, r16
    11f6:	80 8d       	ldd	r24, Z+24	; 0x18
    11f8:	91 8d       	ldd	r25, Z+25	; 0x19
    11fa:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    11fe:	d8 01       	movw	r26, r16
    1200:	58 96       	adiw	r26, 0x18	; 24
    1202:	8d 91       	ld	r24, X+
    1204:	9c 91       	ld	r25, X
    1206:	59 97       	sbiw	r26, 0x19	; 25
    1208:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA2, (uint16_t*)&lines2, sizeof(lines2));
    120c:	20 ee       	ldi	r18, 0xE0	; 224
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	ae 01       	movw	r20, r28
    1212:	4f 5f       	subi	r20, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	60 e8       	ldi	r22, 0x80	; 128
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	f8 01       	movw	r30, r16
    121c:	80 8d       	ldd	r24, Z+24	; 0x18
    121e:	91 8d       	ldd	r25, Z+25	; 0x19
    1220:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    1224:	d8 01       	movw	r26, r16
    1226:	58 96       	adiw	r26, 0x18	; 24
    1228:	8d 91       	ld	r24, X+
    122a:	9c 91       	ld	r25, X
    122c:	59 97       	sbiw	r26, 0x19	; 25
    122e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
    1232:	f8 01       	movw	r30, r16
    1234:	87 85       	ldd	r24, Z+15	; 0x0f
    1236:	88 23       	and	r24, r24
    1238:	89 f1       	breq	.+98     	; 0x129c <_ZN16CLaserControlApp3RunEv+0x52e>
	{
		switch (profile)
    123a:	85 85       	ldd	r24, Z+13	; 0x0d
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	d9 f0       	breq	.+54     	; 0x1276 <_ZN16CLaserControlApp3RunEv+0x508>
    1240:	18 f0       	brcs	.+6      	; 0x1248 <_ZN16CLaserControlApp3RunEv+0x4da>
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	61 f0       	breq	.+24     	; 0x125e <_ZN16CLaserControlApp3RunEv+0x4f0>
    1246:	21 c0       	rjmp	.+66     	; 0x128a <_ZN16CLaserControlApp3RunEv+0x51c>
		{
			case WorkFast:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(DGUS_DATA));
    1248:	2c e0       	ldi	r18, 0x0C	; 12
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4e e4       	ldi	r20, 0x4E	; 78
    124e:	51 e2       	ldi	r21, 0x21	; 33
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	80 8d       	ldd	r24, Z+24	; 0x18
    1256:	91 8d       	ldd	r25, Z+25	; 0x19
    1258:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    125c:	16 c0       	rjmp	.+44     	; 0x128a <_ZN16CLaserControlApp3RunEv+0x51c>
			case WorkSlow:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Slow, sizeof(DGUS_DATA));
    125e:	2c e0       	ldi	r18, 0x0C	; 12
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	46 e3       	ldi	r20, 0x36	; 54
    1264:	51 e2       	ldi	r21, 0x21	; 33
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	f8 01       	movw	r30, r16
    126c:	80 8d       	ldd	r24, Z+24	; 0x18
    126e:	91 8d       	ldd	r25, Z+25	; 0x19
    1270:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1274:	0a c0       	rjmp	.+20     	; 0x128a <_ZN16CLaserControlApp3RunEv+0x51c>
			case WorkMedium:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Medium, sizeof(DGUS_DATA));
    1276:	2c e0       	ldi	r18, 0x0C	; 12
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	42 e4       	ldi	r20, 0x42	; 66
    127c:	51 e2       	ldi	r21, 0x21	; 33
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 8d       	ldd	r24, Z+24	; 0x18
    1284:	91 8d       	ldd	r25, Z+25	; 0x19
    1286:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    128a:	f8 01       	movw	r30, r16
    128c:	80 8d       	ldd	r24, Z+24	; 0x18
    128e:	91 8d       	ldd	r25, Z+25	; 0x19
    1290:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
    1294:	d8 01       	movw	r26, r16
    1296:	1f 96       	adiw	r26, 0x0f	; 15
    1298:	1c 92       	st	X, r1
    129a:	cd c1       	rjmp	.+922    	; 0x1636 <_ZN16CLaserControlApp3RunEv+0x8c8>
	}
	else
	{
		switch (profile)
    129c:	f8 01       	movw	r30, r16
    129e:	85 85       	ldd	r24, Z+13	; 0x0d
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <_ZN16CLaserControlApp3RunEv+0x538>
    12a4:	2f c1       	rjmp	.+606    	; 0x1504 <_ZN16CLaserControlApp3RunEv+0x796>
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <_ZN16CLaserControlApp3RunEv+0x542>
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	09 f4       	brne	.+2      	; 0x12ae <_ZN16CLaserControlApp3RunEv+0x540>
    12ac:	96 c0       	rjmp	.+300    	; 0x13da <_ZN16CLaserControlApp3RunEv+0x66c>
    12ae:	be c1       	rjmp	.+892    	; 0x162c <_ZN16CLaserControlApp3RunEv+0x8be>
		{
			case WorkFast:
				// Fast profile			
				DGUSDATA.DutyCycle = m_structDGUSDATA_Fast.Duration * m_structDGUSDATA_Fast.Frequency / 10;
    12b0:	ee e4       	ldi	r30, 0x4E	; 78
    12b2:	f1 e2       	ldi	r31, 0x21	; 33
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	40 81       	ld	r20, Z
    12ba:	51 81       	ldd	r21, Z+1	; 0x01
    12bc:	48 9f       	mul	r20, r24
    12be:	90 01       	movw	r18, r0
    12c0:	49 9f       	mul	r20, r25
    12c2:	30 0d       	add	r19, r0
    12c4:	58 9f       	mul	r21, r24
    12c6:	30 0d       	add	r19, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	ad ec       	ldi	r26, 0xCD	; 205
    12cc:	bc ec       	ldi	r27, 0xCC	; 204
    12ce:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    12d2:	7c 01       	movw	r14, r24
    12d4:	f6 94       	lsr	r15
    12d6:	e7 94       	ror	r14
    12d8:	f6 94       	lsr	r15
    12da:	e7 94       	ror	r14
    12dc:	f6 94       	lsr	r15
    12de:	e7 94       	ror	r14
    12e0:	eb 86       	std	Y+11, r14	; 0x0b
    12e2:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100;
    12e4:	84 81       	ldd	r24, Z+4	; 0x04
    12e6:	95 81       	ldd	r25, Z+5	; 0x05
    12e8:	42 85       	ldd	r20, Z+10	; 0x0a
    12ea:	53 85       	ldd	r21, Z+11	; 0x0b
    12ec:	48 9f       	mul	r20, r24
    12ee:	90 01       	movw	r18, r0
    12f0:	49 9f       	mul	r20, r25
    12f2:	30 0d       	add	r19, r0
    12f4:	58 9f       	mul	r21, r24
    12f6:	30 0d       	add	r19, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	36 95       	lsr	r19
    12fc:	27 95       	ror	r18
    12fe:	36 95       	lsr	r19
    1300:	27 95       	ror	r18
    1302:	ab e7       	ldi	r26, 0x7B	; 123
    1304:	b4 e1       	ldi	r27, 0x14	; 20
    1306:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	8f 83       	std	Y+7, r24	; 0x07
    1310:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration / 1000;
    1312:	84 81       	ldd	r24, Z+4	; 0x04
    1314:	95 81       	ldd	r25, Z+5	; 0x05
    1316:	42 81       	ldd	r20, Z+2	; 0x02
    1318:	53 81       	ldd	r21, Z+3	; 0x03
    131a:	48 9f       	mul	r20, r24
    131c:	90 01       	movw	r18, r0
    131e:	49 9f       	mul	r20, r25
    1320:	30 0d       	add	r19, r0
    1322:	58 9f       	mul	r21, r24
    1324:	30 0d       	add	r19, r0
    1326:	11 24       	eor	r1, r1
    1328:	36 95       	lsr	r19
    132a:	27 95       	ror	r18
    132c:	36 95       	lsr	r19
    132e:	27 95       	ror	r18
    1330:	36 95       	lsr	r19
    1332:	27 95       	ror	r18
    1334:	a5 ec       	ldi	r26, 0xC5	; 197
    1336:	b0 e2       	ldi	r27, 0x20	; 32
    1338:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    133c:	92 95       	swap	r25
    133e:	82 95       	swap	r24
    1340:	8f 70       	andi	r24, 0x0F	; 15
    1342:	89 27       	eor	r24, r25
    1344:	9f 70       	andi	r25, 0x0F	; 15
    1346:	89 27       	eor	r24, r25
    1348:	89 87       	std	Y+9, r24	; 0x09
    134a:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	8a e6       	ldi	r24, 0x6A	; 106
    1352:	98 e1       	ldi	r25, 0x18	; 24
    1354:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
    1358:	ab 01       	movw	r20, r22
    135a:	44 0f       	add	r20, r20
    135c:	55 1f       	adc	r21, r21
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	66 0f       	add	r22, r22
    1368:	77 1f       	adc	r23, r23
    136a:	46 0f       	add	r20, r22
    136c:	57 1f       	adc	r21, r23
    136e:	d8 01       	movw	r26, r16
    1370:	50 96       	adiw	r26, 0x10	; 16
    1372:	4d 93       	st	X+, r20
    1374:	5c 93       	st	X, r21
    1376:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1378:	9a 01       	movw	r18, r20
    137a:	36 95       	lsr	r19
    137c:	27 95       	ror	r18
    137e:	36 95       	lsr	r19
    1380:	27 95       	ror	r18
    1382:	ab e7       	ldi	r26, 0x7B	; 123
    1384:	b4 e1       	ldi	r27, 0x14	; 20
    1386:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	8e 9d       	mul	r24, r14
    1390:	90 01       	movw	r18, r0
    1392:	8f 9d       	mul	r24, r15
    1394:	30 0d       	add	r19, r0
    1396:	9e 9d       	mul	r25, r14
    1398:	30 0d       	add	r19, r0
    139a:	11 24       	eor	r1, r1
    139c:	42 1b       	sub	r20, r18
    139e:	53 0b       	sbc	r21, r19
    13a0:	d8 01       	movw	r26, r16
    13a2:	52 96       	adiw	r26, 0x12	; 18
    13a4:	4d 93       	st	X+, r20
    13a6:	5c 93       	st	X, r21
    13a8:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    13aa:	54 96       	adiw	r26, 0x14	; 20
    13ac:	ed 92       	st	X+, r14
    13ae:	fc 92       	st	X, r15
    13b0:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Fast.Intensity;
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	95 81       	ldd	r25, Z+5	; 0x05
    13b6:	56 96       	adiw	r26, 0x16	; 22
    13b8:	8d 93       	st	X+, r24
    13ba:	9c 93       	st	X, r25
    13bc:	57 97       	sbiw	r26, 0x17	; 23
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    13be:	26 e0       	ldi	r18, 0x06	; 6
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	ae 01       	movw	r20, r28
    13c4:	49 5f       	subi	r20, 0xF9	; 249
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	64 e0       	ldi	r22, 0x04	; 4
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	58 96       	adiw	r26, 0x18	; 24
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	59 97       	sbiw	r26, 0x19	; 25
    13d4:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    13d8:	29 c1       	rjmp	.+594    	; 0x162c <_ZN16CLaserControlApp3RunEv+0x8be>
			case WorkSlow:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Slow.Duration * m_structDGUSDATA_Slow.Frequency / 10;
    13da:	e6 e3       	ldi	r30, 0x36	; 54
    13dc:	f1 e2       	ldi	r31, 0x21	; 33
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	40 81       	ld	r20, Z
    13e4:	51 81       	ldd	r21, Z+1	; 0x01
    13e6:	48 9f       	mul	r20, r24
    13e8:	90 01       	movw	r18, r0
    13ea:	49 9f       	mul	r20, r25
    13ec:	30 0d       	add	r19, r0
    13ee:	58 9f       	mul	r21, r24
    13f0:	30 0d       	add	r19, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	ad ec       	ldi	r26, 0xCD	; 205
    13f6:	bc ec       	ldi	r27, 0xCC	; 204
    13f8:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    13fc:	7c 01       	movw	r14, r24
    13fe:	f6 94       	lsr	r15
    1400:	e7 94       	ror	r14
    1402:	f6 94       	lsr	r15
    1404:	e7 94       	ror	r14
    1406:	f6 94       	lsr	r15
    1408:	e7 94       	ror	r14
    140a:	eb 86       	std	Y+11, r14	; 0x0b
    140c:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100;
    140e:	84 81       	ldd	r24, Z+4	; 0x04
    1410:	95 81       	ldd	r25, Z+5	; 0x05
    1412:	42 85       	ldd	r20, Z+10	; 0x0a
    1414:	53 85       	ldd	r21, Z+11	; 0x0b
    1416:	48 9f       	mul	r20, r24
    1418:	90 01       	movw	r18, r0
    141a:	49 9f       	mul	r20, r25
    141c:	30 0d       	add	r19, r0
    141e:	58 9f       	mul	r21, r24
    1420:	30 0d       	add	r19, r0
    1422:	11 24       	eor	r1, r1
    1424:	36 95       	lsr	r19
    1426:	27 95       	ror	r18
    1428:	36 95       	lsr	r19
    142a:	27 95       	ror	r18
    142c:	ab e7       	ldi	r26, 0x7B	; 123
    142e:	b4 e1       	ldi	r27, 0x14	; 20
    1430:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    1434:	96 95       	lsr	r25
    1436:	87 95       	ror	r24
    1438:	8f 83       	std	Y+7, r24	; 0x07
    143a:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration / 1000;
    143c:	84 81       	ldd	r24, Z+4	; 0x04
    143e:	95 81       	ldd	r25, Z+5	; 0x05
    1440:	42 81       	ldd	r20, Z+2	; 0x02
    1442:	53 81       	ldd	r21, Z+3	; 0x03
    1444:	48 9f       	mul	r20, r24
    1446:	90 01       	movw	r18, r0
    1448:	49 9f       	mul	r20, r25
    144a:	30 0d       	add	r19, r0
    144c:	58 9f       	mul	r21, r24
    144e:	30 0d       	add	r19, r0
    1450:	11 24       	eor	r1, r1
    1452:	36 95       	lsr	r19
    1454:	27 95       	ror	r18
    1456:	36 95       	lsr	r19
    1458:	27 95       	ror	r18
    145a:	36 95       	lsr	r19
    145c:	27 95       	ror	r18
    145e:	a5 ec       	ldi	r26, 0xC5	; 197
    1460:	b0 e2       	ldi	r27, 0x20	; 32
    1462:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    1466:	92 95       	swap	r25
    1468:	82 95       	swap	r24
    146a:	8f 70       	andi	r24, 0x0F	; 15
    146c:	89 27       	eor	r24, r25
    146e:	9f 70       	andi	r25, 0x0F	; 15
    1470:	89 27       	eor	r24, r25
    1472:	89 87       	std	Y+9, r24	; 0x09
    1474:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Slow.Frequency) * 10;
    1476:	60 81       	ld	r22, Z
    1478:	71 81       	ldd	r23, Z+1	; 0x01
    147a:	8a e6       	ldi	r24, 0x6A	; 106
    147c:	98 e1       	ldi	r25, 0x18	; 24
    147e:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
    1482:	ab 01       	movw	r20, r22
    1484:	44 0f       	add	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	66 0f       	add	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	46 0f       	add	r20, r22
    1496:	57 1f       	adc	r21, r23
    1498:	d8 01       	movw	r26, r16
    149a:	50 96       	adiw	r26, 0x10	; 16
    149c:	4d 93       	st	X+, r20
    149e:	5c 93       	st	X, r21
    14a0:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    14a2:	9a 01       	movw	r18, r20
    14a4:	36 95       	lsr	r19
    14a6:	27 95       	ror	r18
    14a8:	36 95       	lsr	r19
    14aa:	27 95       	ror	r18
    14ac:	ab e7       	ldi	r26, 0x7B	; 123
    14ae:	b4 e1       	ldi	r27, 0x14	; 20
    14b0:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	8e 9d       	mul	r24, r14
    14ba:	90 01       	movw	r18, r0
    14bc:	8f 9d       	mul	r24, r15
    14be:	30 0d       	add	r19, r0
    14c0:	9e 9d       	mul	r25, r14
    14c2:	30 0d       	add	r19, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	42 1b       	sub	r20, r18
    14c8:	53 0b       	sbc	r21, r19
    14ca:	d8 01       	movw	r26, r16
    14cc:	52 96       	adiw	r26, 0x12	; 18
    14ce:	4d 93       	st	X+, r20
    14d0:	5c 93       	st	X, r21
    14d2:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    14d4:	54 96       	adiw	r26, 0x14	; 20
    14d6:	ed 92       	st	X+, r14
    14d8:	fc 92       	st	X, r15
    14da:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Slow.Intensity;
    14dc:	84 81       	ldd	r24, Z+4	; 0x04
    14de:	95 81       	ldd	r25, Z+5	; 0x05
    14e0:	56 96       	adiw	r26, 0x16	; 22
    14e2:	8d 93       	st	X+, r24
    14e4:	9c 93       	st	X, r25
    14e6:	57 97       	sbiw	r26, 0x17	; 23
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    14e8:	26 e0       	ldi	r18, 0x06	; 6
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	ae 01       	movw	r20, r28
    14ee:	49 5f       	subi	r20, 0xF9	; 249
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	64 e0       	ldi	r22, 0x04	; 4
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	58 96       	adiw	r26, 0x18	; 24
    14f8:	8d 91       	ld	r24, X+
    14fa:	9c 91       	ld	r25, X
    14fc:	59 97       	sbiw	r26, 0x19	; 25
    14fe:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1502:	94 c0       	rjmp	.+296    	; 0x162c <_ZN16CLaserControlApp3RunEv+0x8be>
			case WorkMedium:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Medium.Duration * m_structDGUSDATA_Medium.Frequency / 10;
    1504:	e2 e4       	ldi	r30, 0x42	; 66
    1506:	f1 e2       	ldi	r31, 0x21	; 33
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	40 81       	ld	r20, Z
    150e:	51 81       	ldd	r21, Z+1	; 0x01
    1510:	48 9f       	mul	r20, r24
    1512:	90 01       	movw	r18, r0
    1514:	49 9f       	mul	r20, r25
    1516:	30 0d       	add	r19, r0
    1518:	58 9f       	mul	r21, r24
    151a:	30 0d       	add	r19, r0
    151c:	11 24       	eor	r1, r1
    151e:	ad ec       	ldi	r26, 0xCD	; 205
    1520:	bc ec       	ldi	r27, 0xCC	; 204
    1522:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    1526:	7c 01       	movw	r14, r24
    1528:	f6 94       	lsr	r15
    152a:	e7 94       	ror	r14
    152c:	f6 94       	lsr	r15
    152e:	e7 94       	ror	r14
    1530:	f6 94       	lsr	r15
    1532:	e7 94       	ror	r14
    1534:	eb 86       	std	Y+11, r14	; 0x0b
    1536:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100;
    1538:	84 81       	ldd	r24, Z+4	; 0x04
    153a:	95 81       	ldd	r25, Z+5	; 0x05
    153c:	42 85       	ldd	r20, Z+10	; 0x0a
    153e:	53 85       	ldd	r21, Z+11	; 0x0b
    1540:	48 9f       	mul	r20, r24
    1542:	90 01       	movw	r18, r0
    1544:	49 9f       	mul	r20, r25
    1546:	30 0d       	add	r19, r0
    1548:	58 9f       	mul	r21, r24
    154a:	30 0d       	add	r19, r0
    154c:	11 24       	eor	r1, r1
    154e:	36 95       	lsr	r19
    1550:	27 95       	ror	r18
    1552:	36 95       	lsr	r19
    1554:	27 95       	ror	r18
    1556:	ab e7       	ldi	r26, 0x7B	; 123
    1558:	b4 e1       	ldi	r27, 0x14	; 20
    155a:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	8f 83       	std	Y+7, r24	; 0x07
    1564:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration / 1000;
    1566:	84 81       	ldd	r24, Z+4	; 0x04
    1568:	95 81       	ldd	r25, Z+5	; 0x05
    156a:	42 81       	ldd	r20, Z+2	; 0x02
    156c:	53 81       	ldd	r21, Z+3	; 0x03
    156e:	48 9f       	mul	r20, r24
    1570:	90 01       	movw	r18, r0
    1572:	49 9f       	mul	r20, r25
    1574:	30 0d       	add	r19, r0
    1576:	58 9f       	mul	r21, r24
    1578:	30 0d       	add	r19, r0
    157a:	11 24       	eor	r1, r1
    157c:	36 95       	lsr	r19
    157e:	27 95       	ror	r18
    1580:	36 95       	lsr	r19
    1582:	27 95       	ror	r18
    1584:	36 95       	lsr	r19
    1586:	27 95       	ror	r18
    1588:	a5 ec       	ldi	r26, 0xC5	; 197
    158a:	b0 e2       	ldi	r27, 0x20	; 32
    158c:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    1590:	92 95       	swap	r25
    1592:	82 95       	swap	r24
    1594:	8f 70       	andi	r24, 0x0F	; 15
    1596:	89 27       	eor	r24, r25
    1598:	9f 70       	andi	r25, 0x0F	; 15
    159a:	89 27       	eor	r24, r25
    159c:	89 87       	std	Y+9, r24	; 0x09
    159e:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Medium.Frequency) * 10;
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	8a e6       	ldi	r24, 0x6A	; 106
    15a6:	98 e1       	ldi	r25, 0x18	; 24
    15a8:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__udivmodhi4>
    15ac:	ab 01       	movw	r20, r22
    15ae:	44 0f       	add	r20, r20
    15b0:	55 1f       	adc	r21, r21
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	66 0f       	add	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	66 0f       	add	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	46 0f       	add	r20, r22
    15c0:	57 1f       	adc	r21, r23
    15c2:	d8 01       	movw	r26, r16
    15c4:	50 96       	adiw	r26, 0x10	; 16
    15c6:	4d 93       	st	X+, r20
    15c8:	5c 93       	st	X, r21
    15ca:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    15cc:	9a 01       	movw	r18, r20
    15ce:	36 95       	lsr	r19
    15d0:	27 95       	ror	r18
    15d2:	36 95       	lsr	r19
    15d4:	27 95       	ror	r18
    15d6:	ab e7       	ldi	r26, 0x7B	; 123
    15d8:	b4 e1       	ldi	r27, 0x14	; 20
    15da:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    15de:	96 95       	lsr	r25
    15e0:	87 95       	ror	r24
    15e2:	8e 9d       	mul	r24, r14
    15e4:	90 01       	movw	r18, r0
    15e6:	8f 9d       	mul	r24, r15
    15e8:	30 0d       	add	r19, r0
    15ea:	9e 9d       	mul	r25, r14
    15ec:	30 0d       	add	r19, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	42 1b       	sub	r20, r18
    15f2:	53 0b       	sbc	r21, r19
    15f4:	d8 01       	movw	r26, r16
    15f6:	52 96       	adiw	r26, 0x12	; 18
    15f8:	4d 93       	st	X+, r20
    15fa:	5c 93       	st	X, r21
    15fc:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    15fe:	54 96       	adiw	r26, 0x14	; 20
    1600:	ed 92       	st	X+, r14
    1602:	fc 92       	st	X, r15
    1604:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Medium.Intensity;
    1606:	84 81       	ldd	r24, Z+4	; 0x04
    1608:	95 81       	ldd	r25, Z+5	; 0x05
    160a:	56 96       	adiw	r26, 0x16	; 22
    160c:	8d 93       	st	X+, r24
    160e:	9c 93       	st	X, r25
    1610:	57 97       	sbiw	r26, 0x17	; 23
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    1612:	26 e0       	ldi	r18, 0x06	; 6
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	ae 01       	movw	r20, r28
    1618:	49 5f       	subi	r20, 0xF9	; 249
    161a:	5f 4f       	sbci	r21, 0xFF	; 255
    161c:	64 e0       	ldi	r22, 0x04	; 4
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	58 96       	adiw	r26, 0x18	; 24
    1622:	8d 91       	ld	r24, X+
    1624:	9c 91       	ld	r25, X
    1626:	59 97       	sbiw	r26, 0x19	; 25
    1628:	0e 94 43 25 	call	0x4a86	; 0x4a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    162c:	f8 01       	movw	r30, r16
    162e:	80 8d       	ldd	r24, Z+24	; 0x18
    1630:	91 8d       	ldd	r25, Z+25	; 0x19
    1632:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
    1636:	cf 51       	subi	r28, 0x1F	; 31
    1638:	de 4f       	sbci	r29, 0xFE	; 254
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	08 95       	ret

0000164c <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    164c:	08 95       	ret

0000164e <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    164e:	08 95       	ret

00001650 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    1650:	e0 e0       	ldi	r30, 0x00	; 0
    1652:	fa e0       	ldi	r31, 0x0A	; 10
    1654:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    1656:	87 e8       	ldi	r24, 0x87	; 135
    1658:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    165a:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    165c:	84 e2       	ldi	r24, 0x24	; 36
    165e:	94 ef       	ldi	r25, 0xF4	; 244
    1660:	86 a3       	std	Z+38, r24	; 0x26
    1662:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    1664:	82 e1       	ldi	r24, 0x12	; 18
    1666:	9a e7       	ldi	r25, 0x7A	; 122
    1668:	86 a7       	std	Z+46, r24	; 0x2e
    166a:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    166c:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    166e:	17 82       	std	Z+7, r1	; 0x07
    1670:	08 95       	ret

00001672 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    1672:	e0 e4       	ldi	r30, 0x40	; 64
    1674:	fa e0       	ldi	r31, 0x0A	; 10
    1676:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    1678:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    167a:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    167c:	84 e2       	ldi	r24, 0x24	; 36
    167e:	94 ef       	ldi	r25, 0xF4	; 244
    1680:	86 a3       	std	Z+38, r24	; 0x26
    1682:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1684:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1686:	17 82       	std	Z+7, r1	; 0x07
    1688:	08 95       	ret

0000168a <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	8a 01       	movw	r16, r20
    1692:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    1694:	9b 01       	movw	r18, r22
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	64 e2       	ldi	r22, 0x24	; 36
    169c:	74 ef       	ldi	r23, 0xF4	; 244
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 d6 25 	call	0x4bac	; 0x4bac <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    16a6:	b8 01       	movw	r22, r16
    16a8:	76 95       	lsr	r23
    16aa:	67 95       	ror	r22
    16ac:	ee e3       	ldi	r30, 0x3E	; 62
    16ae:	e0 9f       	mul	r30, r16
    16b0:	c0 01       	movw	r24, r0
    16b2:	e1 9f       	mul	r30, r17
    16b4:	90 0d       	add	r25, r0
    16b6:	11 24       	eor	r1, r1
    16b8:	86 0f       	add	r24, r22
    16ba:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    16bc:	cf 5f       	subi	r28, 0xFF	; 255
    16be:	b9 01       	movw	r22, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    16c2:	76 95       	lsr	r23
    16c4:	67 95       	ror	r22
    16c6:	ca 95       	dec	r28
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    16ca:	e0 e0       	ldi	r30, 0x00	; 0
    16cc:	fa e0       	ldi	r31, 0x0A	; 10
    16ce:	66 a7       	std	Z+46, r22	; 0x2e
    16d0:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    16d2:	26 a3       	std	Z+38, r18	; 0x26
    16d4:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    16d6:	a0 e4       	ldi	r26, 0x40	; 64
    16d8:	ba e0       	ldi	r27, 0x0A	; 10
    16da:	96 96       	adiw	r26, 0x26	; 38
    16dc:	8d 93       	st	X+, r24
    16de:	9c 93       	st	X, r25
    16e0:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    16e2:	86 e0       	ldi	r24, 0x06	; 6
    16e4:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    16e6:	87 e0       	ldi	r24, 0x07	; 7
    16e8:	8c 93       	st	X, r24
}
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	08 95       	ret

000016f2 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    16f2:	e0 e4       	ldi	r30, 0x40	; 64
    16f4:	fa e0       	ldi	r31, 0x0A	; 10
    16f6:	84 85       	ldd	r24, Z+12	; 0x0c
    16f8:	80 ff       	sbrs	r24, 0
    16fa:	fd cf       	rjmp	.-6      	; 0x16f6 <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    16fc:	e0 e4       	ldi	r30, 0x40	; 64
    16fe:	fa e0       	ldi	r31, 0x0A	; 10
    1700:	84 85       	ldd	r24, Z+12	; 0x0c
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    1706:	a0 e0       	ldi	r26, 0x00	; 0
    1708:	ba e0       	ldi	r27, 0x0A	; 10
    170a:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    170c:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    170e:	10 a2       	std	Z+32, r1	; 0x20
    1710:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    1712:	90 96       	adiw	r26, 0x20	; 32
    1714:	1d 92       	st	X+, r1
    1716:	1c 92       	st	X, r1
    1718:	91 97       	sbiw	r26, 0x21	; 33
    171a:	2f ef       	ldi	r18, 0xFF	; 255
    171c:	83 ef       	ldi	r24, 0xF3	; 243
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	21 50       	subi	r18, 0x01	; 1
    1722:	80 40       	sbci	r24, 0x00	; 0
    1724:	90 40       	sbci	r25, 0x00	; 0
    1726:	e1 f7       	brne	.-8      	; 0x1720 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    1728:	00 c0       	rjmp	.+0      	; 0x172a <_ZN12CSoundPlayer9SoundStopEv+0x38>
    172a:	00 00       	nop
    172c:	08 95       	ret

0000172e <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    1734:	23 e0       	ldi	r18, 0x03	; 3
    1736:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    173a:	ce 01       	movw	r24, r28
    173c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN12CSoundPlayer9SoundStopEv>
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    174c:	0e 94 28 0b 	call	0x1650	; 0x1650 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
	cli();
    1762:	f8 94       	cli

	beep(a, 500);
    1764:	44 ef       	ldi	r20, 0xF4	; 244
    1766:	51 e0       	ldi	r21, 0x01	; 1
    1768:	68 eb       	ldi	r22, 0xB8	; 184
    176a:	71 e0       	ldi	r23, 0x01	; 1
    176c:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1770:	44 ef       	ldi	r20, 0xF4	; 244
    1772:	51 e0       	ldi	r21, 0x01	; 1
    1774:	68 eb       	ldi	r22, 0xB8	; 184
    1776:	71 e0       	ldi	r23, 0x01	; 1
    1778:	ce 01       	movw	r24, r28
    177a:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    177e:	44 ef       	ldi	r20, 0xF4	; 244
    1780:	51 e0       	ldi	r21, 0x01	; 1
    1782:	68 eb       	ldi	r22, 0xB8	; 184
    1784:	71 e0       	ldi	r23, 0x01	; 1
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    178c:	4e e5       	ldi	r20, 0x5E	; 94
    178e:	51 e0       	ldi	r21, 0x01	; 1
    1790:	6d e5       	ldi	r22, 0x5D	; 93
    1792:	71 e0       	ldi	r23, 0x01	; 1
    1794:	ce 01       	movw	r24, r28
    1796:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    179a:	46 e9       	ldi	r20, 0x96	; 150
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	6b e0       	ldi	r22, 0x0B	; 11
    17a0:	72 e0       	ldi	r23, 0x02	; 2
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    17a8:	44 ef       	ldi	r20, 0xF4	; 244
    17aa:	51 e0       	ldi	r21, 0x01	; 1
    17ac:	68 eb       	ldi	r22, 0xB8	; 184
    17ae:	71 e0       	ldi	r23, 0x01	; 1
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    17b6:	4e e5       	ldi	r20, 0x5E	; 94
    17b8:	51 e0       	ldi	r21, 0x01	; 1
    17ba:	6d e5       	ldi	r22, 0x5D	; 93
    17bc:	71 e0       	ldi	r23, 0x01	; 1
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    17c4:	46 e9       	ldi	r20, 0x96	; 150
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	6b e0       	ldi	r22, 0x0B	; 11
    17ca:	72 e0       	ldi	r23, 0x02	; 2
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    17d2:	4a e8       	ldi	r20, 0x8A	; 138
    17d4:	52 e0       	ldi	r21, 0x02	; 2
    17d6:	68 eb       	ldi	r22, 0xB8	; 184
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN12CSoundPlayer4beepEjj>
    17e0:	2f ef       	ldi	r18, 0xFF	; 255
    17e2:	85 ea       	ldi	r24, 0xA5	; 165
    17e4:	9e e0       	ldi	r25, 0x0E	; 14
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	80 40       	sbci	r24, 0x00	; 0
    17ea:	90 40       	sbci	r25, 0x00	; 0
    17ec:	e1 f7       	brne	.-8      	; 0x17e6 <_ZN12CSoundPlayer4PlayEv+0x8a>
    17ee:	00 c0       	rjmp	.+0      	; 0x17f0 <_ZN12CSoundPlayer4PlayEv+0x94>
    17f0:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    17f2:	78 94       	sei
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    17fa:	fc 01       	movw	r30, r24
    17fc:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    17fe:	e0 e0       	ldi	r30, 0x00	; 0
    1800:	f8 e0       	ldi	r31, 0x08	; 8
    1802:	80 81       	ld	r24, Z
    1804:	80 7f       	andi	r24, 0xF0	; 240
    1806:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1808:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    180a:	10 a2       	std	Z+32, r1	; 0x20
    180c:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    180e:	10 a6       	std	Z+40, r1	; 0x28
    1810:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    1812:	12 a6       	std	Z+42, r1	; 0x2a
    1814:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1816:	14 a6       	std	Z+44, r1	; 0x2c
    1818:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    181a:	16 a6       	std	Z+46, r1	; 0x2e
    181c:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    181e:	16 a2       	std	Z+38, r1	; 0x26
    1820:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1822:	81 81       	ldd	r24, Z+1	; 0x01
    1824:	88 7f       	andi	r24, 0xF8	; 248
    1826:	68 2b       	or	r22, r24
    1828:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    182a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    182c:	17 82       	std	Z+7, r1	; 0x07
    182e:	08 95       	ret

00001830 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    1830:	e0 e0       	ldi	r30, 0x00	; 0
    1832:	f8 e0       	ldi	r31, 0x08	; 8
    1834:	66 a3       	std	Z+38, r22	; 0x26
    1836:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1838:	20 81       	ld	r18, Z
    183a:	20 7f       	andi	r18, 0xF0	; 240
    183c:	dc 01       	movw	r26, r24
    183e:	12 96       	adiw	r26, 0x02	; 2
    1840:	9c 91       	ld	r25, X
    1842:	82 2f       	mov	r24, r18
    1844:	89 2b       	or	r24, r25
    1846:	80 83       	st	Z, r24
    1848:	08 95       	ret

0000184a <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	f8 e0       	ldi	r31, 0x08	; 8
    184e:	80 81       	ld	r24, Z
    1850:	80 7f       	andi	r24, 0xF0	; 240
    1852:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1854:	10 a2       	std	Z+32, r1	; 0x20
    1856:	11 a2       	std	Z+33, r1	; 0x21
    1858:	08 95       	ret

0000185a <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    185a:	e0 e0       	ldi	r30, 0x00	; 0
    185c:	f8 e0       	ldi	r31, 0x08	; 8
    185e:	81 81       	ldd	r24, Z+1	; 0x01
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	68 2b       	or	r22, r24
    1864:	61 83       	std	Z+1, r22	; 0x01
    1866:	08 95       	ret

00001868 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    1868:	e0 e0       	ldi	r30, 0x00	; 0
    186a:	f8 e0       	ldi	r31, 0x08	; 8
    186c:	81 81       	ldd	r24, Z+1	; 0x01
    186e:	60 95       	com	r22
    1870:	68 23       	and	r22, r24
    1872:	61 83       	std	Z+1, r22	; 0x01
    1874:	08 95       	ret

00001876 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    1876:	60 93 26 08 	sts	0x0826, r22
    187a:	70 93 27 08 	sts	0x0827, r23
    187e:	08 95       	ret

00001880 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    1880:	60 93 28 08 	sts	0x0828, r22
    1884:	70 93 29 08 	sts	0x0829, r23
    1888:	08 95       	ret

0000188a <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    188a:	60 93 2a 08 	sts	0x082A, r22
    188e:	70 93 2b 08 	sts	0x082B, r23
    1892:	08 95       	ret

00001894 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1894:	60 93 2c 08 	sts	0x082C, r22
    1898:	70 93 2d 08 	sts	0x082D, r23
    189c:	08 95       	ret

0000189e <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    189e:	60 93 2e 08 	sts	0x082E, r22
    18a2:	70 93 2f 08 	sts	0x082F, r23
    18a6:	08 95       	ret

000018a8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	31 f0       	breq	.+12     	; 0x18ba <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    18ae:	e0 e0       	ldi	r30, 0x00	; 0
    18b0:	f8 e0       	ldi	r31, 0x08	; 8
    18b2:	86 81       	ldd	r24, Z+6	; 0x06
    18b4:	83 70       	andi	r24, 0x03	; 3
    18b6:	28 2b       	or	r18, r24
    18b8:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    18ba:	60 93 7c 21 	sts	0x217C, r22
    18be:	70 93 7d 21 	sts	0x217D, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    18c2:	40 93 72 22 	sts	0x2272, r20
    18c6:	50 93 73 22 	sts	0x2273, r21
    18ca:	08 95       	ret

000018cc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    18cc:	61 15       	cp	r22, r1
    18ce:	71 05       	cpc	r23, r1
    18d0:	31 f0       	breq	.+12     	; 0x18de <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    18d2:	e0 e0       	ldi	r30, 0x00	; 0
    18d4:	f8 e0       	ldi	r31, 0x08	; 8
    18d6:	86 81       	ldd	r24, Z+6	; 0x06
    18d8:	8c 70       	andi	r24, 0x0C	; 12
    18da:	28 2b       	or	r18, r24
    18dc:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    18de:	60 93 7e 21 	sts	0x217E, r22
    18e2:	70 93 7f 21 	sts	0x217F, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    18e6:	40 93 74 22 	sts	0x2274, r20
    18ea:	50 93 75 22 	sts	0x2275, r21
    18ee:	08 95       	ret

000018f0 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    18f0:	61 15       	cp	r22, r1
    18f2:	71 05       	cpc	r23, r1
    18f4:	31 f0       	breq	.+12     	; 0x1902 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    18f6:	e0 e0       	ldi	r30, 0x00	; 0
    18f8:	f8 e0       	ldi	r31, 0x08	; 8
    18fa:	87 81       	ldd	r24, Z+7	; 0x07
    18fc:	83 70       	andi	r24, 0x03	; 3
    18fe:	28 2b       	or	r18, r24
    1900:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    1902:	60 93 80 21 	sts	0x2180, r22
    1906:	70 93 81 21 	sts	0x2181, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    190a:	40 93 76 22 	sts	0x2276, r20
    190e:	50 93 77 22 	sts	0x2277, r21
    1912:	08 95       	ret

00001914 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1914:	61 15       	cp	r22, r1
    1916:	71 05       	cpc	r23, r1
    1918:	31 f0       	breq	.+12     	; 0x1926 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    191a:	e0 e0       	ldi	r30, 0x00	; 0
    191c:	f8 e0       	ldi	r31, 0x08	; 8
    191e:	87 81       	ldd	r24, Z+7	; 0x07
    1920:	8c 70       	andi	r24, 0x0C	; 12
    1922:	28 2b       	or	r18, r24
    1924:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1926:	60 93 82 21 	sts	0x2182, r22
    192a:	70 93 83 21 	sts	0x2183, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    192e:	40 93 78 22 	sts	0x2278, r20
    1932:	50 93 79 22 	sts	0x2279, r21
    1936:	08 95       	ret

00001938 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	31 f0       	breq	.+12     	; 0x194a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    193e:	e0 e0       	ldi	r30, 0x00	; 0
    1940:	f8 e0       	ldi	r31, 0x08	; 8
    1942:	87 81       	ldd	r24, Z+7	; 0x07
    1944:	80 73       	andi	r24, 0x30	; 48
    1946:	28 2b       	or	r18, r24
    1948:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    194a:	60 93 84 21 	sts	0x2184, r22
    194e:	70 93 85 21 	sts	0x2185, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    1952:	40 93 7a 22 	sts	0x227A, r20
    1956:	50 93 7b 22 	sts	0x227B, r21
    195a:	08 95       	ret

0000195c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	31 f0       	breq	.+12     	; 0x196e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1962:	e0 e0       	ldi	r30, 0x00	; 0
    1964:	f8 e0       	ldi	r31, 0x08	; 8
    1966:	87 81       	ldd	r24, Z+7	; 0x07
    1968:	80 7c       	andi	r24, 0xC0	; 192
    196a:	28 2b       	or	r18, r24
    196c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    196e:	60 93 86 21 	sts	0x2186, r22
    1972:	70 93 87 21 	sts	0x2187, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    1976:	40 93 7c 22 	sts	0x227C, r20
    197a:	50 93 7d 22 	sts	0x227D, r21
    197e:	08 95       	ret

00001980 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	ec 01       	movw	r28, r24
    1986:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN6CTimerC1Ev>
    198a:	89 e9       	ldi	r24, 0x99	; 153
    198c:	90 e2       	ldi	r25, 0x20	; 32
    198e:	88 83       	st	Y, r24
    1990:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    1998:	29 e9       	ldi	r18, 0x99	; 153
    199a:	30 e2       	ldi	r19, 0x20	; 32
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
    19a0:	31 83       	std	Z+1, r19	; 0x01
    19a2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN6CTimerD1Ev>
    19a6:	08 95       	ret

000019a8 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    19a8:	fc 01       	movw	r30, r24
    19aa:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    19ac:	e0 e0       	ldi	r30, 0x00	; 0
    19ae:	fb e0       	ldi	r31, 0x0B	; 11
    19b0:	80 81       	ld	r24, Z
    19b2:	80 7f       	andi	r24, 0xF0	; 240
    19b4:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    19b6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    19b8:	10 a2       	std	Z+32, r1	; 0x20
    19ba:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    19bc:	10 a6       	std	Z+40, r1	; 0x28
    19be:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    19c0:	12 a6       	std	Z+42, r1	; 0x2a
    19c2:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    19c4:	14 a6       	std	Z+44, r1	; 0x2c
    19c6:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    19c8:	16 a6       	std	Z+46, r1	; 0x2e
    19ca:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    19cc:	16 a2       	std	Z+38, r1	; 0x26
    19ce:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    19d0:	81 81       	ldd	r24, Z+1	; 0x01
    19d2:	88 7f       	andi	r24, 0xF8	; 248
    19d4:	68 2b       	or	r22, r24
    19d6:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    19d8:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    19da:	17 82       	std	Z+7, r1	; 0x07
    19dc:	08 95       	ret

000019de <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    19de:	e0 e0       	ldi	r30, 0x00	; 0
    19e0:	fb e0       	ldi	r31, 0x0B	; 11
    19e2:	66 a3       	std	Z+38, r22	; 0x26
    19e4:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    19e6:	20 81       	ld	r18, Z
    19e8:	20 7f       	andi	r18, 0xF0	; 240
    19ea:	dc 01       	movw	r26, r24
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	9c 91       	ld	r25, X
    19f0:	82 2f       	mov	r24, r18
    19f2:	89 2b       	or	r24, r25
    19f4:	80 83       	st	Z, r24
    19f6:	08 95       	ret

000019f8 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	fb e0       	ldi	r31, 0x0B	; 11
    19fc:	80 81       	ld	r24, Z
    19fe:	80 7f       	andi	r24, 0xF0	; 240
    1a00:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    1a02:	10 a2       	std	Z+32, r1	; 0x20
    1a04:	11 a2       	std	Z+33, r1	; 0x21
    1a06:	08 95       	ret

00001a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    1a08:	e0 e0       	ldi	r30, 0x00	; 0
    1a0a:	fb e0       	ldi	r31, 0x0B	; 11
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	68 2b       	or	r22, r24
    1a10:	61 83       	std	Z+1, r22	; 0x01
    1a12:	08 95       	ret

00001a14 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    1a14:	e0 e0       	ldi	r30, 0x00	; 0
    1a16:	fb e0       	ldi	r31, 0x0B	; 11
    1a18:	81 81       	ldd	r24, Z+1	; 0x01
    1a1a:	60 95       	com	r22
    1a1c:	68 23       	and	r22, r24
    1a1e:	61 83       	std	Z+1, r22	; 0x01
    1a20:	08 95       	ret

00001a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    1a22:	e0 e0       	ldi	r30, 0x00	; 0
    1a24:	fb e0       	ldi	r31, 0x0B	; 11
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	62 95       	swap	r22
    1a2a:	6f 70       	andi	r22, 0x0F	; 15
    1a2c:	68 2b       	or	r22, r24
    1a2e:	62 83       	std	Z+2, r22	; 0x02
    1a30:	08 95       	ret

00001a32 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    1a32:	e0 e0       	ldi	r30, 0x00	; 0
    1a34:	fb e0       	ldi	r31, 0x0B	; 11
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	62 95       	swap	r22
    1a3a:	6f 70       	andi	r22, 0x0F	; 15
    1a3c:	60 95       	com	r22
    1a3e:	68 23       	and	r22, r24
    1a40:	62 83       	std	Z+2, r22	; 0x02
    1a42:	08 95       	ret

00001a44 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    1a44:	60 93 26 0b 	sts	0x0B26, r22
    1a48:	70 93 27 0b 	sts	0x0B27, r23
    1a4c:	08 95       	ret

00001a4e <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    1a4e:	60 93 28 0b 	sts	0x0B28, r22
    1a52:	70 93 29 0b 	sts	0x0B29, r23
    1a56:	08 95       	ret

00001a58 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    1a58:	60 93 2a 0b 	sts	0x0B2A, r22
    1a5c:	70 93 2b 0b 	sts	0x0B2B, r23
    1a60:	08 95       	ret

00001a62 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    1a62:	60 93 2c 0b 	sts	0x0B2C, r22
    1a66:	70 93 2d 0b 	sts	0x0B2D, r23
    1a6a:	08 95       	ret

00001a6c <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    1a6c:	60 93 2e 0b 	sts	0x0B2E, r22
    1a70:	70 93 2f 0b 	sts	0x0B2F, r23
    1a74:	08 95       	ret

00001a76 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1a76:	61 15       	cp	r22, r1
    1a78:	71 05       	cpc	r23, r1
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1a7c:	e0 e0       	ldi	r30, 0x00	; 0
    1a7e:	fb e0       	ldi	r31, 0x0B	; 11
    1a80:	86 81       	ldd	r24, Z+6	; 0x06
    1a82:	83 70       	andi	r24, 0x03	; 3
    1a84:	28 2b       	or	r18, r24
    1a86:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    1a88:	60 93 38 22 	sts	0x2238, r22
    1a8c:	70 93 39 22 	sts	0x2239, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    1a90:	40 93 2e 23 	sts	0x232E, r20
    1a94:	50 93 2f 23 	sts	0x232F, r21
    1a98:	08 95       	ret

00001a9a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1a9a:	61 15       	cp	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	31 f0       	breq	.+12     	; 0x1aac <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1aa0:	e0 e0       	ldi	r30, 0x00	; 0
    1aa2:	fb e0       	ldi	r31, 0x0B	; 11
    1aa4:	86 81       	ldd	r24, Z+6	; 0x06
    1aa6:	8c 70       	andi	r24, 0x0C	; 12
    1aa8:	28 2b       	or	r18, r24
    1aaa:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    1aac:	60 93 3a 22 	sts	0x223A, r22
    1ab0:	70 93 3b 22 	sts	0x223B, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    1ab4:	40 93 30 23 	sts	0x2330, r20
    1ab8:	50 93 31 23 	sts	0x2331, r21
    1abc:	08 95       	ret

00001abe <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1abe:	61 15       	cp	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1ac4:	e0 e0       	ldi	r30, 0x00	; 0
    1ac6:	fb e0       	ldi	r31, 0x0B	; 11
    1ac8:	87 81       	ldd	r24, Z+7	; 0x07
    1aca:	83 70       	andi	r24, 0x03	; 3
    1acc:	28 2b       	or	r18, r24
    1ace:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    1ad0:	60 93 3c 22 	sts	0x223C, r22
    1ad4:	70 93 3d 22 	sts	0x223D, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    1ad8:	40 93 32 23 	sts	0x2332, r20
    1adc:	50 93 33 23 	sts	0x2333, r21
    1ae0:	08 95       	ret

00001ae2 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1ae2:	61 15       	cp	r22, r1
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	31 f0       	breq	.+12     	; 0x1af4 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1ae8:	e0 e0       	ldi	r30, 0x00	; 0
    1aea:	fb e0       	ldi	r31, 0x0B	; 11
    1aec:	87 81       	ldd	r24, Z+7	; 0x07
    1aee:	8c 70       	andi	r24, 0x0C	; 12
    1af0:	28 2b       	or	r18, r24
    1af2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    1af4:	60 93 3e 22 	sts	0x223E, r22
    1af8:	70 93 3f 22 	sts	0x223F, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    1afc:	40 93 34 23 	sts	0x2334, r20
    1b00:	50 93 35 23 	sts	0x2335, r21
    1b04:	08 95       	ret

00001b06 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1b06:	61 15       	cp	r22, r1
    1b08:	71 05       	cpc	r23, r1
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    1b0c:	e0 e0       	ldi	r30, 0x00	; 0
    1b0e:	fb e0       	ldi	r31, 0x0B	; 11
    1b10:	87 81       	ldd	r24, Z+7	; 0x07
    1b12:	80 73       	andi	r24, 0x30	; 48
    1b14:	28 2b       	or	r18, r24
    1b16:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    1b18:	60 93 40 22 	sts	0x2240, r22
    1b1c:	70 93 41 22 	sts	0x2241, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    1b20:	40 93 36 23 	sts	0x2336, r20
    1b24:	50 93 37 23 	sts	0x2337, r21
    1b28:	08 95       	ret

00001b2a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    1b2a:	61 15       	cp	r22, r1
    1b2c:	71 05       	cpc	r23, r1
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1b30:	e0 e0       	ldi	r30, 0x00	; 0
    1b32:	fb e0       	ldi	r31, 0x0B	; 11
    1b34:	87 81       	ldd	r24, Z+7	; 0x07
    1b36:	80 7c       	andi	r24, 0xC0	; 192
    1b38:	28 2b       	or	r18, r24
    1b3a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    1b3c:	60 93 42 22 	sts	0x2242, r22
    1b40:	70 93 43 22 	sts	0x2243, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    1b44:	40 93 38 23 	sts	0x2338, r20
    1b48:	50 93 39 23 	sts	0x2339, r21
    1b4c:	08 95       	ret

00001b4e <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	ec 01       	movw	r28, r24
    1b54:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN6CTimerC1Ev>
    1b58:	8d eb       	ldi	r24, 0xBD	; 189
    1b5a:	90 e2       	ldi	r25, 0x20	; 32
    1b5c:	88 83       	st	Y, r24
    1b5e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    1b66:	2d eb       	ldi	r18, 0xBD	; 189
    1b68:	30 e2       	ldi	r19, 0x20	; 32
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
    1b6e:	31 83       	std	Z+1, r19	; 0x01
    1b70:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN6CTimerD1Ev>
    1b74:	08 95       	ret

00001b76 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    1b76:	08 95       	ret

00001b78 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    1b78:	08 95       	ret

00001b7a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    1b7a:	ef 92       	push	r14
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    1b86:	e0 e8       	ldi	r30, 0x80	; 128
    1b88:	f6 e0       	ldi	r31, 0x06	; 6
    1b8a:	80 eb       	ldi	r24, 0xB0	; 176
    1b8c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    1b8e:	90 e4       	ldi	r25, 0x40	; 64
    1b90:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b92:	90 ec       	ldi	r25, 0xC0	; 192
    1b94:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b96:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b98:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b9a:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    1b9c:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    1b9e:	61 11       	cpse	r22, r1
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1ba2:	80 e4       	ldi	r24, 0x40	; 64
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    1ba6:	80 e5       	ldi	r24, 0x50	; 80
    1ba8:	01 11       	cpse	r16, r1
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1bb0:	30 e8       	ldi	r19, 0x80	; 128
    1bb2:	41 11       	cpse	r20, r1
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    1bba:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    1bbc:	22 0f       	add	r18, r18
    1bbe:	22 0f       	add	r18, r18
    1bc0:	e2 2a       	or	r14, r18
    1bc2:	e8 2a       	or	r14, r24
    1bc4:	e3 2a       	or	r14, r19
		prescaler;
    1bc6:	e9 2a       	or	r14, r25
    1bc8:	00 ec       	ldi	r16, 0xC0	; 192
    1bca:	1a e0       	ldi	r17, 0x0A	; 10
    1bcc:	f8 01       	movw	r30, r16
    1bce:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <malloc>
    1bd8:	88 83       	st	Y, r24
    1bda:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	f8 01       	movw	r30, r16
    1be0:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    1be2:	89 e3       	ldi	r24, 0x39	; 57
    1be4:	9e e0       	ldi	r25, 0x0E	; 14
    1be6:	80 93 d2 21 	sts	0x21D2, r24
    1bea:	90 93 d3 21 	sts	0x21D3, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    1bee:	c0 93 c8 22 	sts	0x22C8, r28
    1bf2:	d0 93 c9 22 	sts	0x22C9, r29
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ef 90       	pop	r14
    1c00:	08 95       	ret

00001c02 <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	ec 01       	movw	r28, r24
	rx_pos = length;
    1c08:	4a 83       	std	Y+2, r20	; 0x02
    1c0a:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
    1c0c:	4c 83       	std	Y+4, r20	; 0x04
    1c0e:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
    1c10:	88 81       	ld	r24, Y
    1c12:	99 81       	ldd	r25, Y+1	; 0x01
    1c14:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
    1c18:	80 e1       	ldi	r24, 0x10	; 16
    1c1a:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
    1c1e:	88 81       	ld	r24, Y
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	4a 81       	ldd	r20, Y+2	; 0x02
    1c24:	5b 81       	ldd	r21, Y+3	; 0x03
    1c26:	9a 01       	movw	r18, r20
    1c28:	21 50       	subi	r18, 0x01	; 1
    1c2a:	31 09       	sbc	r19, r1
    1c2c:	2a 83       	std	Y+2, r18	; 0x02
    1c2e:	3b 83       	std	Y+3, r19	; 0x03
    1c30:	fc 01       	movw	r30, r24
    1c32:	e2 0f       	add	r30, r18
    1c34:	f3 1f       	adc	r31, r19
    1c36:	80 81       	ld	r24, Z
    1c38:	80 93 c3 0a 	sts	0x0AC3, r24
}
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1c42:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	89 2b       	or	r24, r25
    1c4a:	79 f0       	breq	.+30     	; 0x1c6a <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    1c4c:	40 81       	ld	r20, Z
    1c4e:	51 81       	ldd	r21, Z+1	; 0x01
    1c50:	22 81       	ldd	r18, Z+2	; 0x02
    1c52:	33 81       	ldd	r19, Z+3	; 0x03
    1c54:	c9 01       	movw	r24, r18
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	82 83       	std	Z+2, r24	; 0x02
    1c5a:	93 83       	std	Z+3, r25	; 0x03
    1c5c:	fa 01       	movw	r30, r20
    1c5e:	e8 0f       	add	r30, r24
    1c60:	f9 1f       	adc	r31, r25
    1c62:	80 81       	ld	r24, Z
    1c64:	80 93 c3 0a 	sts	0x0AC3, r24
    1c68:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    1c6a:	80 e1       	ldi	r24, 0x10	; 16
    1c6c:	80 93 85 06 	sts	0x0685, r24
    1c70:	08 95       	ret

00001c72 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    1c72:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN4CSPI10OnTransmitEv>
    1c76:	08 95       	ret

00001c78 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    1c78:	25 ee       	ldi	r18, 0xE5	; 229
    1c7a:	30 e2       	ldi	r19, 0x20	; 32
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 83       	st	Z, r18
    1c80:	31 83       	std	Z+1, r19	; 0x01
    1c82:	08 95       	ret

00001c84 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    1c84:	08 95       	ret

00001c86 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    1c86:	29 e0       	ldi	r18, 0x09	; 9
    1c88:	31 e2       	ldi	r19, 0x21	; 33
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	20 83       	st	Z, r18
    1c8e:	31 83       	std	Z+1, r19	; 0x01
    1c90:	08 95       	ret

00001c92 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1c92:	08 95       	ret

00001c94 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    1c94:	1f 92       	push	r1
    1c96:	0f 92       	push	r0
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	0f 92       	push	r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	0b b6       	in	r0, 0x3b	; 59
    1ca0:	0f 92       	push	r0
    1ca2:	2f 93       	push	r18
    1ca4:	3f 93       	push	r19
    1ca6:	4f 93       	push	r20
    1ca8:	5f 93       	push	r21
    1caa:	6f 93       	push	r22
    1cac:	7f 93       	push	r23
    1cae:	8f 93       	push	r24
    1cb0:	9f 93       	push	r25
    1cb2:	af 93       	push	r26
    1cb4:	bf 93       	push	r27
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
    1cba:	e0 91 62 21 	lds	r30, 0x2162
    1cbe:	f0 91 63 21 	lds	r31, 0x2163
    1cc2:	30 97       	sbiw	r30, 0x00	; 0
    1cc4:	29 f0       	breq	.+10     	; 0x1cd0 <__vector_1+0x3c>
    1cc6:	80 91 58 22 	lds	r24, 0x2258
    1cca:	90 91 59 22 	lds	r25, 0x2259
    1cce:	19 95       	eicall
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0b be       	out	0x3b, r0	; 59
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	0b b6       	in	r0, 0x3b	; 59
    1d02:	0f 92       	push	r0
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
    1d1c:	e0 91 64 21 	lds	r30, 0x2164
    1d20:	f0 91 65 21 	lds	r31, 0x2165
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	29 f0       	breq	.+10     	; 0x1d32 <__vector_2+0x3c>
    1d28:	80 91 5a 22 	lds	r24, 0x225A
    1d2c:	90 91 5b 22 	lds	r25, 0x225B
    1d30:	19 95       	eicall
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0b be       	out	0x3b, r0	; 59
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	0f 90       	pop	r0
    1d54:	1f 90       	pop	r1
    1d56:	18 95       	reti

00001d58 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    1d58:	1f 92       	push	r1
    1d5a:	0f 92       	push	r0
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	0f 92       	push	r0
    1d60:	11 24       	eor	r1, r1
    1d62:	0b b6       	in	r0, 0x3b	; 59
    1d64:	0f 92       	push	r0
    1d66:	2f 93       	push	r18
    1d68:	3f 93       	push	r19
    1d6a:	4f 93       	push	r20
    1d6c:	5f 93       	push	r21
    1d6e:	6f 93       	push	r22
    1d70:	7f 93       	push	r23
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	af 93       	push	r26
    1d78:	bf 93       	push	r27
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
    1d7e:	e0 91 66 21 	lds	r30, 0x2166
    1d82:	f0 91 67 21 	lds	r31, 0x2167
    1d86:	30 97       	sbiw	r30, 0x00	; 0
    1d88:	29 f0       	breq	.+10     	; 0x1d94 <__vector_3+0x3c>
    1d8a:	80 91 5c 22 	lds	r24, 0x225C
    1d8e:	90 91 5d 22 	lds	r25, 0x225D
    1d92:	19 95       	eicall
    1d94:	ff 91       	pop	r31
    1d96:	ef 91       	pop	r30
    1d98:	bf 91       	pop	r27
    1d9a:	af 91       	pop	r26
    1d9c:	9f 91       	pop	r25
    1d9e:	8f 91       	pop	r24
    1da0:	7f 91       	pop	r23
    1da2:	6f 91       	pop	r22
    1da4:	5f 91       	pop	r21
    1da6:	4f 91       	pop	r20
    1da8:	3f 91       	pop	r19
    1daa:	2f 91       	pop	r18
    1dac:	0f 90       	pop	r0
    1dae:	0b be       	out	0x3b, r0	; 59
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti

00001dba <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	0b b6       	in	r0, 0x3b	; 59
    1dc6:	0f 92       	push	r0
    1dc8:	2f 93       	push	r18
    1dca:	3f 93       	push	r19
    1dcc:	4f 93       	push	r20
    1dce:	5f 93       	push	r21
    1dd0:	6f 93       	push	r22
    1dd2:	7f 93       	push	r23
    1dd4:	8f 93       	push	r24
    1dd6:	9f 93       	push	r25
    1dd8:	af 93       	push	r26
    1dda:	bf 93       	push	r27
    1ddc:	ef 93       	push	r30
    1dde:	ff 93       	push	r31
    1de0:	e0 91 68 21 	lds	r30, 0x2168
    1de4:	f0 91 69 21 	lds	r31, 0x2169
    1de8:	30 97       	sbiw	r30, 0x00	; 0
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <__vector_4+0x3c>
    1dec:	80 91 5e 22 	lds	r24, 0x225E
    1df0:	90 91 5f 22 	lds	r25, 0x225F
    1df4:	19 95       	eicall
    1df6:	ff 91       	pop	r31
    1df8:	ef 91       	pop	r30
    1dfa:	bf 91       	pop	r27
    1dfc:	af 91       	pop	r26
    1dfe:	9f 91       	pop	r25
    1e00:	8f 91       	pop	r24
    1e02:	7f 91       	pop	r23
    1e04:	6f 91       	pop	r22
    1e06:	5f 91       	pop	r21
    1e08:	4f 91       	pop	r20
    1e0a:	3f 91       	pop	r19
    1e0c:	2f 91       	pop	r18
    1e0e:	0f 90       	pop	r0
    1e10:	0b be       	out	0x3b, r0	; 59
    1e12:	0f 90       	pop	r0
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	0f 90       	pop	r0
    1e18:	1f 90       	pop	r1
    1e1a:	18 95       	reti

00001e1c <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1e1c:	1f 92       	push	r1
    1e1e:	0f 92       	push	r0
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	0f 92       	push	r0
    1e24:	11 24       	eor	r1, r1
    1e26:	0b b6       	in	r0, 0x3b	; 59
    1e28:	0f 92       	push	r0
    1e2a:	2f 93       	push	r18
    1e2c:	3f 93       	push	r19
    1e2e:	4f 93       	push	r20
    1e30:	5f 93       	push	r21
    1e32:	6f 93       	push	r22
    1e34:	7f 93       	push	r23
    1e36:	8f 93       	push	r24
    1e38:	9f 93       	push	r25
    1e3a:	af 93       	push	r26
    1e3c:	bf 93       	push	r27
    1e3e:	ef 93       	push	r30
    1e40:	ff 93       	push	r31
    1e42:	e0 91 6a 21 	lds	r30, 0x216A
    1e46:	f0 91 6b 21 	lds	r31, 0x216B
    1e4a:	30 97       	sbiw	r30, 0x00	; 0
    1e4c:	29 f0       	breq	.+10     	; 0x1e58 <__vector_5+0x3c>
    1e4e:	80 91 60 22 	lds	r24, 0x2260
    1e52:	90 91 61 22 	lds	r25, 0x2261
    1e56:	19 95       	eicall
    1e58:	ff 91       	pop	r31
    1e5a:	ef 91       	pop	r30
    1e5c:	bf 91       	pop	r27
    1e5e:	af 91       	pop	r26
    1e60:	9f 91       	pop	r25
    1e62:	8f 91       	pop	r24
    1e64:	7f 91       	pop	r23
    1e66:	6f 91       	pop	r22
    1e68:	5f 91       	pop	r21
    1e6a:	4f 91       	pop	r20
    1e6c:	3f 91       	pop	r19
    1e6e:	2f 91       	pop	r18
    1e70:	0f 90       	pop	r0
    1e72:	0b be       	out	0x3b, r0	; 59
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	0b b6       	in	r0, 0x3b	; 59
    1e8a:	0f 92       	push	r0
    1e8c:	2f 93       	push	r18
    1e8e:	3f 93       	push	r19
    1e90:	4f 93       	push	r20
    1e92:	5f 93       	push	r21
    1e94:	6f 93       	push	r22
    1e96:	7f 93       	push	r23
    1e98:	8f 93       	push	r24
    1e9a:	9f 93       	push	r25
    1e9c:	af 93       	push	r26
    1e9e:	bf 93       	push	r27
    1ea0:	ef 93       	push	r30
    1ea2:	ff 93       	push	r31
    1ea4:	e0 91 6c 21 	lds	r30, 0x216C
    1ea8:	f0 91 6d 21 	lds	r31, 0x216D
    1eac:	30 97       	sbiw	r30, 0x00	; 0
    1eae:	29 f0       	breq	.+10     	; 0x1eba <__vector_6+0x3c>
    1eb0:	80 91 62 22 	lds	r24, 0x2262
    1eb4:	90 91 63 22 	lds	r25, 0x2263
    1eb8:	19 95       	eicall
    1eba:	ff 91       	pop	r31
    1ebc:	ef 91       	pop	r30
    1ebe:	bf 91       	pop	r27
    1ec0:	af 91       	pop	r26
    1ec2:	9f 91       	pop	r25
    1ec4:	8f 91       	pop	r24
    1ec6:	7f 91       	pop	r23
    1ec8:	6f 91       	pop	r22
    1eca:	5f 91       	pop	r21
    1ecc:	4f 91       	pop	r20
    1ece:	3f 91       	pop	r19
    1ed0:	2f 91       	pop	r18
    1ed2:	0f 90       	pop	r0
    1ed4:	0b be       	out	0x3b, r0	; 59
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	0f 90       	pop	r0
    1edc:	1f 90       	pop	r1
    1ede:	18 95       	reti

00001ee0 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1ee0:	1f 92       	push	r1
    1ee2:	0f 92       	push	r0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	0b b6       	in	r0, 0x3b	; 59
    1eec:	0f 92       	push	r0
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
    1f06:	e0 91 6e 21 	lds	r30, 0x216E
    1f0a:	f0 91 6f 21 	lds	r31, 0x216F
    1f0e:	30 97       	sbiw	r30, 0x00	; 0
    1f10:	29 f0       	breq	.+10     	; 0x1f1c <__vector_7+0x3c>
    1f12:	80 91 64 22 	lds	r24, 0x2264
    1f16:	90 91 65 22 	lds	r25, 0x2265
    1f1a:	19 95       	eicall
    1f1c:	ff 91       	pop	r31
    1f1e:	ef 91       	pop	r30
    1f20:	bf 91       	pop	r27
    1f22:	af 91       	pop	r26
    1f24:	9f 91       	pop	r25
    1f26:	8f 91       	pop	r24
    1f28:	7f 91       	pop	r23
    1f2a:	6f 91       	pop	r22
    1f2c:	5f 91       	pop	r21
    1f2e:	4f 91       	pop	r20
    1f30:	3f 91       	pop	r19
    1f32:	2f 91       	pop	r18
    1f34:	0f 90       	pop	r0
    1f36:	0b be       	out	0x3b, r0	; 59
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	0f 90       	pop	r0
    1f3e:	1f 90       	pop	r1
    1f40:	18 95       	reti

00001f42 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	0b b6       	in	r0, 0x3b	; 59
    1f4e:	0f 92       	push	r0
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	4f 93       	push	r20
    1f56:	5f 93       	push	r21
    1f58:	6f 93       	push	r22
    1f5a:	7f 93       	push	r23
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
    1f60:	af 93       	push	r26
    1f62:	bf 93       	push	r27
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
    1f68:	e0 91 70 21 	lds	r30, 0x2170
    1f6c:	f0 91 71 21 	lds	r31, 0x2171
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <__vector_8+0x3c>
    1f74:	80 91 66 22 	lds	r24, 0x2266
    1f78:	90 91 67 22 	lds	r25, 0x2267
    1f7c:	19 95       	eicall
    1f7e:	ff 91       	pop	r31
    1f80:	ef 91       	pop	r30
    1f82:	bf 91       	pop	r27
    1f84:	af 91       	pop	r26
    1f86:	9f 91       	pop	r25
    1f88:	8f 91       	pop	r24
    1f8a:	7f 91       	pop	r23
    1f8c:	6f 91       	pop	r22
    1f8e:	5f 91       	pop	r21
    1f90:	4f 91       	pop	r20
    1f92:	3f 91       	pop	r19
    1f94:	2f 91       	pop	r18
    1f96:	0f 90       	pop	r0
    1f98:	0b be       	out	0x3b, r0	; 59
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	0b b6       	in	r0, 0x3b	; 59
    1fb0:	0f 92       	push	r0
    1fb2:	2f 93       	push	r18
    1fb4:	3f 93       	push	r19
    1fb6:	4f 93       	push	r20
    1fb8:	5f 93       	push	r21
    1fba:	6f 93       	push	r22
    1fbc:	7f 93       	push	r23
    1fbe:	8f 93       	push	r24
    1fc0:	9f 93       	push	r25
    1fc2:	af 93       	push	r26
    1fc4:	bf 93       	push	r27
    1fc6:	ef 93       	push	r30
    1fc8:	ff 93       	push	r31
    1fca:	e0 91 72 21 	lds	r30, 0x2172
    1fce:	f0 91 73 21 	lds	r31, 0x2173
    1fd2:	30 97       	sbiw	r30, 0x00	; 0
    1fd4:	29 f0       	breq	.+10     	; 0x1fe0 <__vector_9+0x3c>
    1fd6:	80 91 68 22 	lds	r24, 0x2268
    1fda:	90 91 69 22 	lds	r25, 0x2269
    1fde:	19 95       	eicall
    1fe0:	ff 91       	pop	r31
    1fe2:	ef 91       	pop	r30
    1fe4:	bf 91       	pop	r27
    1fe6:	af 91       	pop	r26
    1fe8:	9f 91       	pop	r25
    1fea:	8f 91       	pop	r24
    1fec:	7f 91       	pop	r23
    1fee:	6f 91       	pop	r22
    1ff0:	5f 91       	pop	r21
    1ff2:	4f 91       	pop	r20
    1ff4:	3f 91       	pop	r19
    1ff6:	2f 91       	pop	r18
    1ff8:	0f 90       	pop	r0
    1ffa:	0b be       	out	0x3b, r0	; 59
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	0f 90       	pop	r0
    2002:	1f 90       	pop	r1
    2004:	18 95       	reti

00002006 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    2006:	1f 92       	push	r1
    2008:	0f 92       	push	r0
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	0f 92       	push	r0
    200e:	11 24       	eor	r1, r1
    2010:	0b b6       	in	r0, 0x3b	; 59
    2012:	0f 92       	push	r0
    2014:	2f 93       	push	r18
    2016:	3f 93       	push	r19
    2018:	4f 93       	push	r20
    201a:	5f 93       	push	r21
    201c:	6f 93       	push	r22
    201e:	7f 93       	push	r23
    2020:	8f 93       	push	r24
    2022:	9f 93       	push	r25
    2024:	af 93       	push	r26
    2026:	bf 93       	push	r27
    2028:	ef 93       	push	r30
    202a:	ff 93       	push	r31
    202c:	e0 91 74 21 	lds	r30, 0x2174
    2030:	f0 91 75 21 	lds	r31, 0x2175
    2034:	30 97       	sbiw	r30, 0x00	; 0
    2036:	29 f0       	breq	.+10     	; 0x2042 <__vector_10+0x3c>
    2038:	80 91 6a 22 	lds	r24, 0x226A
    203c:	90 91 6b 22 	lds	r25, 0x226B
    2040:	19 95       	eicall
    2042:	ff 91       	pop	r31
    2044:	ef 91       	pop	r30
    2046:	bf 91       	pop	r27
    2048:	af 91       	pop	r26
    204a:	9f 91       	pop	r25
    204c:	8f 91       	pop	r24
    204e:	7f 91       	pop	r23
    2050:	6f 91       	pop	r22
    2052:	5f 91       	pop	r21
    2054:	4f 91       	pop	r20
    2056:	3f 91       	pop	r19
    2058:	2f 91       	pop	r18
    205a:	0f 90       	pop	r0
    205c:	0b be       	out	0x3b, r0	; 59
    205e:	0f 90       	pop	r0
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	0f 90       	pop	r0
    2064:	1f 90       	pop	r1
    2066:	18 95       	reti

00002068 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	0b b6       	in	r0, 0x3b	; 59
    2074:	0f 92       	push	r0
    2076:	2f 93       	push	r18
    2078:	3f 93       	push	r19
    207a:	4f 93       	push	r20
    207c:	5f 93       	push	r21
    207e:	6f 93       	push	r22
    2080:	7f 93       	push	r23
    2082:	8f 93       	push	r24
    2084:	9f 93       	push	r25
    2086:	af 93       	push	r26
    2088:	bf 93       	push	r27
    208a:	ef 93       	push	r30
    208c:	ff 93       	push	r31
    208e:	e0 91 76 21 	lds	r30, 0x2176
    2092:	f0 91 77 21 	lds	r31, 0x2177
    2096:	30 97       	sbiw	r30, 0x00	; 0
    2098:	29 f0       	breq	.+10     	; 0x20a4 <__vector_11+0x3c>
    209a:	80 91 6c 22 	lds	r24, 0x226C
    209e:	90 91 6d 22 	lds	r25, 0x226D
    20a2:	19 95       	eicall
    20a4:	ff 91       	pop	r31
    20a6:	ef 91       	pop	r30
    20a8:	bf 91       	pop	r27
    20aa:	af 91       	pop	r26
    20ac:	9f 91       	pop	r25
    20ae:	8f 91       	pop	r24
    20b0:	7f 91       	pop	r23
    20b2:	6f 91       	pop	r22
    20b4:	5f 91       	pop	r21
    20b6:	4f 91       	pop	r20
    20b8:	3f 91       	pop	r19
    20ba:	2f 91       	pop	r18
    20bc:	0f 90       	pop	r0
    20be:	0b be       	out	0x3b, r0	; 59
    20c0:	0f 90       	pop	r0
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	0f 90       	pop	r0
    20c6:	1f 90       	pop	r1
    20c8:	18 95       	reti

000020ca <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    20ca:	1f 92       	push	r1
    20cc:	0f 92       	push	r0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	0b b6       	in	r0, 0x3b	; 59
    20d6:	0f 92       	push	r0
    20d8:	2f 93       	push	r18
    20da:	3f 93       	push	r19
    20dc:	4f 93       	push	r20
    20de:	5f 93       	push	r21
    20e0:	6f 93       	push	r22
    20e2:	7f 93       	push	r23
    20e4:	8f 93       	push	r24
    20e6:	9f 93       	push	r25
    20e8:	af 93       	push	r26
    20ea:	bf 93       	push	r27
    20ec:	ef 93       	push	r30
    20ee:	ff 93       	push	r31
    20f0:	e0 91 78 21 	lds	r30, 0x2178
    20f4:	f0 91 79 21 	lds	r31, 0x2179
    20f8:	30 97       	sbiw	r30, 0x00	; 0
    20fa:	29 f0       	breq	.+10     	; 0x2106 <__vector_12+0x3c>
    20fc:	80 91 6e 22 	lds	r24, 0x226E
    2100:	90 91 6f 22 	lds	r25, 0x226F
    2104:	19 95       	eicall
    2106:	ff 91       	pop	r31
    2108:	ef 91       	pop	r30
    210a:	bf 91       	pop	r27
    210c:	af 91       	pop	r26
    210e:	9f 91       	pop	r25
    2110:	8f 91       	pop	r24
    2112:	7f 91       	pop	r23
    2114:	6f 91       	pop	r22
    2116:	5f 91       	pop	r21
    2118:	4f 91       	pop	r20
    211a:	3f 91       	pop	r19
    211c:	2f 91       	pop	r18
    211e:	0f 90       	pop	r0
    2120:	0b be       	out	0x3b, r0	; 59
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	0f 90       	pop	r0
    2128:	1f 90       	pop	r1
    212a:	18 95       	reti

0000212c <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    212c:	1f 92       	push	r1
    212e:	0f 92       	push	r0
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	0f 92       	push	r0
    2134:	11 24       	eor	r1, r1
    2136:	0b b6       	in	r0, 0x3b	; 59
    2138:	0f 92       	push	r0
    213a:	2f 93       	push	r18
    213c:	3f 93       	push	r19
    213e:	4f 93       	push	r20
    2140:	5f 93       	push	r21
    2142:	6f 93       	push	r22
    2144:	7f 93       	push	r23
    2146:	8f 93       	push	r24
    2148:	9f 93       	push	r25
    214a:	af 93       	push	r26
    214c:	bf 93       	push	r27
    214e:	ef 93       	push	r30
    2150:	ff 93       	push	r31
    2152:	e0 91 7a 21 	lds	r30, 0x217A
    2156:	f0 91 7b 21 	lds	r31, 0x217B
    215a:	30 97       	sbiw	r30, 0x00	; 0
    215c:	29 f0       	breq	.+10     	; 0x2168 <__vector_13+0x3c>
    215e:	80 91 70 22 	lds	r24, 0x2270
    2162:	90 91 71 22 	lds	r25, 0x2271
    2166:	19 95       	eicall
    2168:	ff 91       	pop	r31
    216a:	ef 91       	pop	r30
    216c:	bf 91       	pop	r27
    216e:	af 91       	pop	r26
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	7f 91       	pop	r23
    2176:	6f 91       	pop	r22
    2178:	5f 91       	pop	r21
    217a:	4f 91       	pop	r20
    217c:	3f 91       	pop	r19
    217e:	2f 91       	pop	r18
    2180:	0f 90       	pop	r0
    2182:	0b be       	out	0x3b, r0	; 59
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	0f 90       	pop	r0
    218a:	1f 90       	pop	r1
    218c:	18 95       	reti

0000218e <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	0b b6       	in	r0, 0x3b	; 59
    219a:	0f 92       	push	r0
    219c:	2f 93       	push	r18
    219e:	3f 93       	push	r19
    21a0:	4f 93       	push	r20
    21a2:	5f 93       	push	r21
    21a4:	6f 93       	push	r22
    21a6:	7f 93       	push	r23
    21a8:	8f 93       	push	r24
    21aa:	9f 93       	push	r25
    21ac:	af 93       	push	r26
    21ae:	bf 93       	push	r27
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
    21b4:	e0 91 7c 21 	lds	r30, 0x217C
    21b8:	f0 91 7d 21 	lds	r31, 0x217D
    21bc:	30 97       	sbiw	r30, 0x00	; 0
    21be:	29 f0       	breq	.+10     	; 0x21ca <__vector_14+0x3c>
    21c0:	80 91 72 22 	lds	r24, 0x2272
    21c4:	90 91 73 22 	lds	r25, 0x2273
    21c8:	19 95       	eicall
    21ca:	ff 91       	pop	r31
    21cc:	ef 91       	pop	r30
    21ce:	bf 91       	pop	r27
    21d0:	af 91       	pop	r26
    21d2:	9f 91       	pop	r25
    21d4:	8f 91       	pop	r24
    21d6:	7f 91       	pop	r23
    21d8:	6f 91       	pop	r22
    21da:	5f 91       	pop	r21
    21dc:	4f 91       	pop	r20
    21de:	3f 91       	pop	r19
    21e0:	2f 91       	pop	r18
    21e2:	0f 90       	pop	r0
    21e4:	0b be       	out	0x3b, r0	; 59
    21e6:	0f 90       	pop	r0
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	0f 90       	pop	r0
    21ec:	1f 90       	pop	r1
    21ee:	18 95       	reti

000021f0 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    21f0:	1f 92       	push	r1
    21f2:	0f 92       	push	r0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	0f 92       	push	r0
    21f8:	11 24       	eor	r1, r1
    21fa:	0b b6       	in	r0, 0x3b	; 59
    21fc:	0f 92       	push	r0
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	4f 93       	push	r20
    2204:	5f 93       	push	r21
    2206:	6f 93       	push	r22
    2208:	7f 93       	push	r23
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	af 93       	push	r26
    2210:	bf 93       	push	r27
    2212:	ef 93       	push	r30
    2214:	ff 93       	push	r31
    2216:	e0 91 7e 21 	lds	r30, 0x217E
    221a:	f0 91 7f 21 	lds	r31, 0x217F
    221e:	30 97       	sbiw	r30, 0x00	; 0
    2220:	29 f0       	breq	.+10     	; 0x222c <__vector_15+0x3c>
    2222:	80 91 74 22 	lds	r24, 0x2274
    2226:	90 91 75 22 	lds	r25, 0x2275
    222a:	19 95       	eicall
    222c:	ff 91       	pop	r31
    222e:	ef 91       	pop	r30
    2230:	bf 91       	pop	r27
    2232:	af 91       	pop	r26
    2234:	9f 91       	pop	r25
    2236:	8f 91       	pop	r24
    2238:	7f 91       	pop	r23
    223a:	6f 91       	pop	r22
    223c:	5f 91       	pop	r21
    223e:	4f 91       	pop	r20
    2240:	3f 91       	pop	r19
    2242:	2f 91       	pop	r18
    2244:	0f 90       	pop	r0
    2246:	0b be       	out	0x3b, r0	; 59
    2248:	0f 90       	pop	r0
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	0f 90       	pop	r0
    224e:	1f 90       	pop	r1
    2250:	18 95       	reti

00002252 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2252:	1f 92       	push	r1
    2254:	0f 92       	push	r0
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	0f 92       	push	r0
    225a:	11 24       	eor	r1, r1
    225c:	0b b6       	in	r0, 0x3b	; 59
    225e:	0f 92       	push	r0
    2260:	2f 93       	push	r18
    2262:	3f 93       	push	r19
    2264:	4f 93       	push	r20
    2266:	5f 93       	push	r21
    2268:	6f 93       	push	r22
    226a:	7f 93       	push	r23
    226c:	8f 93       	push	r24
    226e:	9f 93       	push	r25
    2270:	af 93       	push	r26
    2272:	bf 93       	push	r27
    2274:	ef 93       	push	r30
    2276:	ff 93       	push	r31
    2278:	e0 91 80 21 	lds	r30, 0x2180
    227c:	f0 91 81 21 	lds	r31, 0x2181
    2280:	30 97       	sbiw	r30, 0x00	; 0
    2282:	29 f0       	breq	.+10     	; 0x228e <__vector_16+0x3c>
    2284:	80 91 76 22 	lds	r24, 0x2276
    2288:	90 91 77 22 	lds	r25, 0x2277
    228c:	19 95       	eicall
    228e:	ff 91       	pop	r31
    2290:	ef 91       	pop	r30
    2292:	bf 91       	pop	r27
    2294:	af 91       	pop	r26
    2296:	9f 91       	pop	r25
    2298:	8f 91       	pop	r24
    229a:	7f 91       	pop	r23
    229c:	6f 91       	pop	r22
    229e:	5f 91       	pop	r21
    22a0:	4f 91       	pop	r20
    22a2:	3f 91       	pop	r19
    22a4:	2f 91       	pop	r18
    22a6:	0f 90       	pop	r0
    22a8:	0b be       	out	0x3b, r0	; 59
    22aa:	0f 90       	pop	r0
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	0f 90       	pop	r0
    22b0:	1f 90       	pop	r1
    22b2:	18 95       	reti

000022b4 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    22b4:	1f 92       	push	r1
    22b6:	0f 92       	push	r0
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	0f 92       	push	r0
    22bc:	11 24       	eor	r1, r1
    22be:	0b b6       	in	r0, 0x3b	; 59
    22c0:	0f 92       	push	r0
    22c2:	2f 93       	push	r18
    22c4:	3f 93       	push	r19
    22c6:	4f 93       	push	r20
    22c8:	5f 93       	push	r21
    22ca:	6f 93       	push	r22
    22cc:	7f 93       	push	r23
    22ce:	8f 93       	push	r24
    22d0:	9f 93       	push	r25
    22d2:	af 93       	push	r26
    22d4:	bf 93       	push	r27
    22d6:	ef 93       	push	r30
    22d8:	ff 93       	push	r31
    22da:	e0 91 82 21 	lds	r30, 0x2182
    22de:	f0 91 83 21 	lds	r31, 0x2183
    22e2:	30 97       	sbiw	r30, 0x00	; 0
    22e4:	29 f0       	breq	.+10     	; 0x22f0 <__vector_17+0x3c>
    22e6:	80 91 78 22 	lds	r24, 0x2278
    22ea:	90 91 79 22 	lds	r25, 0x2279
    22ee:	19 95       	eicall
    22f0:	ff 91       	pop	r31
    22f2:	ef 91       	pop	r30
    22f4:	bf 91       	pop	r27
    22f6:	af 91       	pop	r26
    22f8:	9f 91       	pop	r25
    22fa:	8f 91       	pop	r24
    22fc:	7f 91       	pop	r23
    22fe:	6f 91       	pop	r22
    2300:	5f 91       	pop	r21
    2302:	4f 91       	pop	r20
    2304:	3f 91       	pop	r19
    2306:	2f 91       	pop	r18
    2308:	0f 90       	pop	r0
    230a:	0b be       	out	0x3b, r0	; 59
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	0f 90       	pop	r0
    2312:	1f 90       	pop	r1
    2314:	18 95       	reti

00002316 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2316:	1f 92       	push	r1
    2318:	0f 92       	push	r0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	0f 92       	push	r0
    231e:	11 24       	eor	r1, r1
    2320:	0b b6       	in	r0, 0x3b	; 59
    2322:	0f 92       	push	r0
    2324:	2f 93       	push	r18
    2326:	3f 93       	push	r19
    2328:	4f 93       	push	r20
    232a:	5f 93       	push	r21
    232c:	6f 93       	push	r22
    232e:	7f 93       	push	r23
    2330:	8f 93       	push	r24
    2332:	9f 93       	push	r25
    2334:	af 93       	push	r26
    2336:	bf 93       	push	r27
    2338:	ef 93       	push	r30
    233a:	ff 93       	push	r31
    233c:	e0 91 84 21 	lds	r30, 0x2184
    2340:	f0 91 85 21 	lds	r31, 0x2185
    2344:	30 97       	sbiw	r30, 0x00	; 0
    2346:	29 f0       	breq	.+10     	; 0x2352 <__vector_18+0x3c>
    2348:	80 91 7a 22 	lds	r24, 0x227A
    234c:	90 91 7b 22 	lds	r25, 0x227B
    2350:	19 95       	eicall
    2352:	ff 91       	pop	r31
    2354:	ef 91       	pop	r30
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	7f 91       	pop	r23
    2360:	6f 91       	pop	r22
    2362:	5f 91       	pop	r21
    2364:	4f 91       	pop	r20
    2366:	3f 91       	pop	r19
    2368:	2f 91       	pop	r18
    236a:	0f 90       	pop	r0
    236c:	0b be       	out	0x3b, r0	; 59
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	0b b6       	in	r0, 0x3b	; 59
    2384:	0f 92       	push	r0
    2386:	2f 93       	push	r18
    2388:	3f 93       	push	r19
    238a:	4f 93       	push	r20
    238c:	5f 93       	push	r21
    238e:	6f 93       	push	r22
    2390:	7f 93       	push	r23
    2392:	8f 93       	push	r24
    2394:	9f 93       	push	r25
    2396:	af 93       	push	r26
    2398:	bf 93       	push	r27
    239a:	ef 93       	push	r30
    239c:	ff 93       	push	r31
    239e:	e0 91 86 21 	lds	r30, 0x2186
    23a2:	f0 91 87 21 	lds	r31, 0x2187
    23a6:	30 97       	sbiw	r30, 0x00	; 0
    23a8:	29 f0       	breq	.+10     	; 0x23b4 <__vector_19+0x3c>
    23aa:	80 91 7c 22 	lds	r24, 0x227C
    23ae:	90 91 7d 22 	lds	r25, 0x227D
    23b2:	19 95       	eicall
    23b4:	ff 91       	pop	r31
    23b6:	ef 91       	pop	r30
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	0f 90       	pop	r0
    23ce:	0b be       	out	0x3b, r0	; 59
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f 90       	pop	r0
    23d6:	1f 90       	pop	r1
    23d8:	18 95       	reti

000023da <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    23da:	1f 92       	push	r1
    23dc:	0f 92       	push	r0
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	0f 92       	push	r0
    23e2:	11 24       	eor	r1, r1
    23e4:	0b b6       	in	r0, 0x3b	; 59
    23e6:	0f 92       	push	r0
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
    2400:	e0 91 88 21 	lds	r30, 0x2188
    2404:	f0 91 89 21 	lds	r31, 0x2189
    2408:	30 97       	sbiw	r30, 0x00	; 0
    240a:	29 f0       	breq	.+10     	; 0x2416 <__vector_20+0x3c>
    240c:	80 91 7e 22 	lds	r24, 0x227E
    2410:	90 91 7f 22 	lds	r25, 0x227F
    2414:	19 95       	eicall
    2416:	ff 91       	pop	r31
    2418:	ef 91       	pop	r30
    241a:	bf 91       	pop	r27
    241c:	af 91       	pop	r26
    241e:	9f 91       	pop	r25
    2420:	8f 91       	pop	r24
    2422:	7f 91       	pop	r23
    2424:	6f 91       	pop	r22
    2426:	5f 91       	pop	r21
    2428:	4f 91       	pop	r20
    242a:	3f 91       	pop	r19
    242c:	2f 91       	pop	r18
    242e:	0f 90       	pop	r0
    2430:	0b be       	out	0x3b, r0	; 59
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	0b b6       	in	r0, 0x3b	; 59
    2448:	0f 92       	push	r0
    244a:	2f 93       	push	r18
    244c:	3f 93       	push	r19
    244e:	4f 93       	push	r20
    2450:	5f 93       	push	r21
    2452:	6f 93       	push	r22
    2454:	7f 93       	push	r23
    2456:	8f 93       	push	r24
    2458:	9f 93       	push	r25
    245a:	af 93       	push	r26
    245c:	bf 93       	push	r27
    245e:	ef 93       	push	r30
    2460:	ff 93       	push	r31
    2462:	e0 91 8a 21 	lds	r30, 0x218A
    2466:	f0 91 8b 21 	lds	r31, 0x218B
    246a:	30 97       	sbiw	r30, 0x00	; 0
    246c:	29 f0       	breq	.+10     	; 0x2478 <__vector_21+0x3c>
    246e:	80 91 80 22 	lds	r24, 0x2280
    2472:	90 91 81 22 	lds	r25, 0x2281
    2476:	19 95       	eicall
    2478:	ff 91       	pop	r31
    247a:	ef 91       	pop	r30
    247c:	bf 91       	pop	r27
    247e:	af 91       	pop	r26
    2480:	9f 91       	pop	r25
    2482:	8f 91       	pop	r24
    2484:	7f 91       	pop	r23
    2486:	6f 91       	pop	r22
    2488:	5f 91       	pop	r21
    248a:	4f 91       	pop	r20
    248c:	3f 91       	pop	r19
    248e:	2f 91       	pop	r18
    2490:	0f 90       	pop	r0
    2492:	0b be       	out	0x3b, r0	; 59
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	0f 90       	pop	r0
    249a:	1f 90       	pop	r1
    249c:	18 95       	reti

0000249e <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    249e:	1f 92       	push	r1
    24a0:	0f 92       	push	r0
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	0f 92       	push	r0
    24a6:	11 24       	eor	r1, r1
    24a8:	0b b6       	in	r0, 0x3b	; 59
    24aa:	0f 92       	push	r0
    24ac:	2f 93       	push	r18
    24ae:	3f 93       	push	r19
    24b0:	4f 93       	push	r20
    24b2:	5f 93       	push	r21
    24b4:	6f 93       	push	r22
    24b6:	7f 93       	push	r23
    24b8:	8f 93       	push	r24
    24ba:	9f 93       	push	r25
    24bc:	af 93       	push	r26
    24be:	bf 93       	push	r27
    24c0:	ef 93       	push	r30
    24c2:	ff 93       	push	r31
    24c4:	e0 91 8c 21 	lds	r30, 0x218C
    24c8:	f0 91 8d 21 	lds	r31, 0x218D
    24cc:	30 97       	sbiw	r30, 0x00	; 0
    24ce:	29 f0       	breq	.+10     	; 0x24da <__vector_22+0x3c>
    24d0:	80 91 82 22 	lds	r24, 0x2282
    24d4:	90 91 83 22 	lds	r25, 0x2283
    24d8:	19 95       	eicall
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	bf 91       	pop	r27
    24e0:	af 91       	pop	r26
    24e2:	9f 91       	pop	r25
    24e4:	8f 91       	pop	r24
    24e6:	7f 91       	pop	r23
    24e8:	6f 91       	pop	r22
    24ea:	5f 91       	pop	r21
    24ec:	4f 91       	pop	r20
    24ee:	3f 91       	pop	r19
    24f0:	2f 91       	pop	r18
    24f2:	0f 90       	pop	r0
    24f4:	0b be       	out	0x3b, r0	; 59
    24f6:	0f 90       	pop	r0
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	0f 90       	pop	r0
    24fc:	1f 90       	pop	r1
    24fe:	18 95       	reti

00002500 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2500:	1f 92       	push	r1
    2502:	0f 92       	push	r0
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	0f 92       	push	r0
    2508:	11 24       	eor	r1, r1
    250a:	0b b6       	in	r0, 0x3b	; 59
    250c:	0f 92       	push	r0
    250e:	2f 93       	push	r18
    2510:	3f 93       	push	r19
    2512:	4f 93       	push	r20
    2514:	5f 93       	push	r21
    2516:	6f 93       	push	r22
    2518:	7f 93       	push	r23
    251a:	8f 93       	push	r24
    251c:	9f 93       	push	r25
    251e:	af 93       	push	r26
    2520:	bf 93       	push	r27
    2522:	ef 93       	push	r30
    2524:	ff 93       	push	r31
    2526:	e0 91 8e 21 	lds	r30, 0x218E
    252a:	f0 91 8f 21 	lds	r31, 0x218F
    252e:	30 97       	sbiw	r30, 0x00	; 0
    2530:	29 f0       	breq	.+10     	; 0x253c <__vector_23+0x3c>
    2532:	80 91 84 22 	lds	r24, 0x2284
    2536:	90 91 85 22 	lds	r25, 0x2285
    253a:	19 95       	eicall
    253c:	ff 91       	pop	r31
    253e:	ef 91       	pop	r30
    2540:	bf 91       	pop	r27
    2542:	af 91       	pop	r26
    2544:	9f 91       	pop	r25
    2546:	8f 91       	pop	r24
    2548:	7f 91       	pop	r23
    254a:	6f 91       	pop	r22
    254c:	5f 91       	pop	r21
    254e:	4f 91       	pop	r20
    2550:	3f 91       	pop	r19
    2552:	2f 91       	pop	r18
    2554:	0f 90       	pop	r0
    2556:	0b be       	out	0x3b, r0	; 59
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	0b b6       	in	r0, 0x3b	; 59
    256e:	0f 92       	push	r0
    2570:	2f 93       	push	r18
    2572:	3f 93       	push	r19
    2574:	4f 93       	push	r20
    2576:	5f 93       	push	r21
    2578:	6f 93       	push	r22
    257a:	7f 93       	push	r23
    257c:	8f 93       	push	r24
    257e:	9f 93       	push	r25
    2580:	af 93       	push	r26
    2582:	bf 93       	push	r27
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
    2588:	e0 91 90 21 	lds	r30, 0x2190
    258c:	f0 91 91 21 	lds	r31, 0x2191
    2590:	30 97       	sbiw	r30, 0x00	; 0
    2592:	29 f0       	breq	.+10     	; 0x259e <__vector_24+0x3c>
    2594:	80 91 86 22 	lds	r24, 0x2286
    2598:	90 91 87 22 	lds	r25, 0x2287
    259c:	19 95       	eicall
    259e:	ff 91       	pop	r31
    25a0:	ef 91       	pop	r30
    25a2:	bf 91       	pop	r27
    25a4:	af 91       	pop	r26
    25a6:	9f 91       	pop	r25
    25a8:	8f 91       	pop	r24
    25aa:	7f 91       	pop	r23
    25ac:	6f 91       	pop	r22
    25ae:	5f 91       	pop	r21
    25b0:	4f 91       	pop	r20
    25b2:	3f 91       	pop	r19
    25b4:	2f 91       	pop	r18
    25b6:	0f 90       	pop	r0
    25b8:	0b be       	out	0x3b, r0	; 59
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	0f 90       	pop	r0
    25c0:	1f 90       	pop	r1
    25c2:	18 95       	reti

000025c4 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    25c4:	1f 92       	push	r1
    25c6:	0f 92       	push	r0
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	0f 92       	push	r0
    25cc:	11 24       	eor	r1, r1
    25ce:	0b b6       	in	r0, 0x3b	; 59
    25d0:	0f 92       	push	r0
    25d2:	2f 93       	push	r18
    25d4:	3f 93       	push	r19
    25d6:	4f 93       	push	r20
    25d8:	5f 93       	push	r21
    25da:	6f 93       	push	r22
    25dc:	7f 93       	push	r23
    25de:	8f 93       	push	r24
    25e0:	9f 93       	push	r25
    25e2:	af 93       	push	r26
    25e4:	bf 93       	push	r27
    25e6:	ef 93       	push	r30
    25e8:	ff 93       	push	r31
    25ea:	e0 91 92 21 	lds	r30, 0x2192
    25ee:	f0 91 93 21 	lds	r31, 0x2193
    25f2:	30 97       	sbiw	r30, 0x00	; 0
    25f4:	29 f0       	breq	.+10     	; 0x2600 <__vector_25+0x3c>
    25f6:	80 91 88 22 	lds	r24, 0x2288
    25fa:	90 91 89 22 	lds	r25, 0x2289
    25fe:	19 95       	eicall
    2600:	ff 91       	pop	r31
    2602:	ef 91       	pop	r30
    2604:	bf 91       	pop	r27
    2606:	af 91       	pop	r26
    2608:	9f 91       	pop	r25
    260a:	8f 91       	pop	r24
    260c:	7f 91       	pop	r23
    260e:	6f 91       	pop	r22
    2610:	5f 91       	pop	r21
    2612:	4f 91       	pop	r20
    2614:	3f 91       	pop	r19
    2616:	2f 91       	pop	r18
    2618:	0f 90       	pop	r0
    261a:	0b be       	out	0x3b, r0	; 59
    261c:	0f 90       	pop	r0
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	0f 90       	pop	r0
    2622:	1f 90       	pop	r1
    2624:	18 95       	reti

00002626 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2626:	1f 92       	push	r1
    2628:	0f 92       	push	r0
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	0f 92       	push	r0
    262e:	11 24       	eor	r1, r1
    2630:	0b b6       	in	r0, 0x3b	; 59
    2632:	0f 92       	push	r0
    2634:	2f 93       	push	r18
    2636:	3f 93       	push	r19
    2638:	4f 93       	push	r20
    263a:	5f 93       	push	r21
    263c:	6f 93       	push	r22
    263e:	7f 93       	push	r23
    2640:	8f 93       	push	r24
    2642:	9f 93       	push	r25
    2644:	af 93       	push	r26
    2646:	bf 93       	push	r27
    2648:	ef 93       	push	r30
    264a:	ff 93       	push	r31
    264c:	e0 91 94 21 	lds	r30, 0x2194
    2650:	f0 91 95 21 	lds	r31, 0x2195
    2654:	30 97       	sbiw	r30, 0x00	; 0
    2656:	29 f0       	breq	.+10     	; 0x2662 <__vector_26+0x3c>
    2658:	80 91 8a 22 	lds	r24, 0x228A
    265c:	90 91 8b 22 	lds	r25, 0x228B
    2660:	19 95       	eicall
    2662:	ff 91       	pop	r31
    2664:	ef 91       	pop	r30
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	7f 91       	pop	r23
    2670:	6f 91       	pop	r22
    2672:	5f 91       	pop	r21
    2674:	4f 91       	pop	r20
    2676:	3f 91       	pop	r19
    2678:	2f 91       	pop	r18
    267a:	0f 90       	pop	r0
    267c:	0b be       	out	0x3b, r0	; 59
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0
    2684:	1f 90       	pop	r1
    2686:	18 95       	reti

00002688 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2688:	1f 92       	push	r1
    268a:	0f 92       	push	r0
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	0b b6       	in	r0, 0x3b	; 59
    2694:	0f 92       	push	r0
    2696:	2f 93       	push	r18
    2698:	3f 93       	push	r19
    269a:	4f 93       	push	r20
    269c:	5f 93       	push	r21
    269e:	6f 93       	push	r22
    26a0:	7f 93       	push	r23
    26a2:	8f 93       	push	r24
    26a4:	9f 93       	push	r25
    26a6:	af 93       	push	r26
    26a8:	bf 93       	push	r27
    26aa:	ef 93       	push	r30
    26ac:	ff 93       	push	r31
    26ae:	e0 91 96 21 	lds	r30, 0x2196
    26b2:	f0 91 97 21 	lds	r31, 0x2197
    26b6:	30 97       	sbiw	r30, 0x00	; 0
    26b8:	29 f0       	breq	.+10     	; 0x26c4 <__vector_27+0x3c>
    26ba:	80 91 8c 22 	lds	r24, 0x228C
    26be:	90 91 8d 22 	lds	r25, 0x228D
    26c2:	19 95       	eicall
    26c4:	ff 91       	pop	r31
    26c6:	ef 91       	pop	r30
    26c8:	bf 91       	pop	r27
    26ca:	af 91       	pop	r26
    26cc:	9f 91       	pop	r25
    26ce:	8f 91       	pop	r24
    26d0:	7f 91       	pop	r23
    26d2:	6f 91       	pop	r22
    26d4:	5f 91       	pop	r21
    26d6:	4f 91       	pop	r20
    26d8:	3f 91       	pop	r19
    26da:	2f 91       	pop	r18
    26dc:	0f 90       	pop	r0
    26de:	0b be       	out	0x3b, r0	; 59
    26e0:	0f 90       	pop	r0
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	0f 90       	pop	r0
    26e6:	1f 90       	pop	r1
    26e8:	18 95       	reti

000026ea <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    26ea:	1f 92       	push	r1
    26ec:	0f 92       	push	r0
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	0f 92       	push	r0
    26f2:	11 24       	eor	r1, r1
    26f4:	0b b6       	in	r0, 0x3b	; 59
    26f6:	0f 92       	push	r0
    26f8:	2f 93       	push	r18
    26fa:	3f 93       	push	r19
    26fc:	4f 93       	push	r20
    26fe:	5f 93       	push	r21
    2700:	6f 93       	push	r22
    2702:	7f 93       	push	r23
    2704:	8f 93       	push	r24
    2706:	9f 93       	push	r25
    2708:	af 93       	push	r26
    270a:	bf 93       	push	r27
    270c:	ef 93       	push	r30
    270e:	ff 93       	push	r31
    2710:	e0 91 98 21 	lds	r30, 0x2198
    2714:	f0 91 99 21 	lds	r31, 0x2199
    2718:	30 97       	sbiw	r30, 0x00	; 0
    271a:	29 f0       	breq	.+10     	; 0x2726 <__vector_28+0x3c>
    271c:	80 91 8e 22 	lds	r24, 0x228E
    2720:	90 91 8f 22 	lds	r25, 0x228F
    2724:	19 95       	eicall
    2726:	ff 91       	pop	r31
    2728:	ef 91       	pop	r30
    272a:	bf 91       	pop	r27
    272c:	af 91       	pop	r26
    272e:	9f 91       	pop	r25
    2730:	8f 91       	pop	r24
    2732:	7f 91       	pop	r23
    2734:	6f 91       	pop	r22
    2736:	5f 91       	pop	r21
    2738:	4f 91       	pop	r20
    273a:	3f 91       	pop	r19
    273c:	2f 91       	pop	r18
    273e:	0f 90       	pop	r0
    2740:	0b be       	out	0x3b, r0	; 59
    2742:	0f 90       	pop	r0
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	0f 90       	pop	r0
    2748:	1f 90       	pop	r1
    274a:	18 95       	reti

0000274c <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    274c:	1f 92       	push	r1
    274e:	0f 92       	push	r0
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	0f 92       	push	r0
    2754:	11 24       	eor	r1, r1
    2756:	0b b6       	in	r0, 0x3b	; 59
    2758:	0f 92       	push	r0
    275a:	2f 93       	push	r18
    275c:	3f 93       	push	r19
    275e:	4f 93       	push	r20
    2760:	5f 93       	push	r21
    2762:	6f 93       	push	r22
    2764:	7f 93       	push	r23
    2766:	8f 93       	push	r24
    2768:	9f 93       	push	r25
    276a:	af 93       	push	r26
    276c:	bf 93       	push	r27
    276e:	ef 93       	push	r30
    2770:	ff 93       	push	r31
    2772:	e0 91 9a 21 	lds	r30, 0x219A
    2776:	f0 91 9b 21 	lds	r31, 0x219B
    277a:	30 97       	sbiw	r30, 0x00	; 0
    277c:	29 f0       	breq	.+10     	; 0x2788 <__vector_29+0x3c>
    277e:	80 91 90 22 	lds	r24, 0x2290
    2782:	90 91 91 22 	lds	r25, 0x2291
    2786:	19 95       	eicall
    2788:	ff 91       	pop	r31
    278a:	ef 91       	pop	r30
    278c:	bf 91       	pop	r27
    278e:	af 91       	pop	r26
    2790:	9f 91       	pop	r25
    2792:	8f 91       	pop	r24
    2794:	7f 91       	pop	r23
    2796:	6f 91       	pop	r22
    2798:	5f 91       	pop	r21
    279a:	4f 91       	pop	r20
    279c:	3f 91       	pop	r19
    279e:	2f 91       	pop	r18
    27a0:	0f 90       	pop	r0
    27a2:	0b be       	out	0x3b, r0	; 59
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	0b b6       	in	r0, 0x3b	; 59
    27ba:	0f 92       	push	r0
    27bc:	2f 93       	push	r18
    27be:	3f 93       	push	r19
    27c0:	4f 93       	push	r20
    27c2:	5f 93       	push	r21
    27c4:	6f 93       	push	r22
    27c6:	7f 93       	push	r23
    27c8:	8f 93       	push	r24
    27ca:	9f 93       	push	r25
    27cc:	af 93       	push	r26
    27ce:	bf 93       	push	r27
    27d0:	ef 93       	push	r30
    27d2:	ff 93       	push	r31
    27d4:	e0 91 9c 21 	lds	r30, 0x219C
    27d8:	f0 91 9d 21 	lds	r31, 0x219D
    27dc:	30 97       	sbiw	r30, 0x00	; 0
    27de:	29 f0       	breq	.+10     	; 0x27ea <__vector_30+0x3c>
    27e0:	80 91 92 22 	lds	r24, 0x2292
    27e4:	90 91 93 22 	lds	r25, 0x2293
    27e8:	19 95       	eicall
    27ea:	ff 91       	pop	r31
    27ec:	ef 91       	pop	r30
    27ee:	bf 91       	pop	r27
    27f0:	af 91       	pop	r26
    27f2:	9f 91       	pop	r25
    27f4:	8f 91       	pop	r24
    27f6:	7f 91       	pop	r23
    27f8:	6f 91       	pop	r22
    27fa:	5f 91       	pop	r21
    27fc:	4f 91       	pop	r20
    27fe:	3f 91       	pop	r19
    2800:	2f 91       	pop	r18
    2802:	0f 90       	pop	r0
    2804:	0b be       	out	0x3b, r0	; 59
    2806:	0f 90       	pop	r0
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	0f 90       	pop	r0
    280c:	1f 90       	pop	r1
    280e:	18 95       	reti

00002810 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2810:	1f 92       	push	r1
    2812:	0f 92       	push	r0
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	0f 92       	push	r0
    2818:	11 24       	eor	r1, r1
    281a:	0b b6       	in	r0, 0x3b	; 59
    281c:	0f 92       	push	r0
    281e:	2f 93       	push	r18
    2820:	3f 93       	push	r19
    2822:	4f 93       	push	r20
    2824:	5f 93       	push	r21
    2826:	6f 93       	push	r22
    2828:	7f 93       	push	r23
    282a:	8f 93       	push	r24
    282c:	9f 93       	push	r25
    282e:	af 93       	push	r26
    2830:	bf 93       	push	r27
    2832:	ef 93       	push	r30
    2834:	ff 93       	push	r31
    2836:	e0 91 9e 21 	lds	r30, 0x219E
    283a:	f0 91 9f 21 	lds	r31, 0x219F
    283e:	30 97       	sbiw	r30, 0x00	; 0
    2840:	29 f0       	breq	.+10     	; 0x284c <__vector_31+0x3c>
    2842:	80 91 94 22 	lds	r24, 0x2294
    2846:	90 91 95 22 	lds	r25, 0x2295
    284a:	19 95       	eicall
    284c:	ff 91       	pop	r31
    284e:	ef 91       	pop	r30
    2850:	bf 91       	pop	r27
    2852:	af 91       	pop	r26
    2854:	9f 91       	pop	r25
    2856:	8f 91       	pop	r24
    2858:	7f 91       	pop	r23
    285a:	6f 91       	pop	r22
    285c:	5f 91       	pop	r21
    285e:	4f 91       	pop	r20
    2860:	3f 91       	pop	r19
    2862:	2f 91       	pop	r18
    2864:	0f 90       	pop	r0
    2866:	0b be       	out	0x3b, r0	; 59
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	1f 90       	pop	r1
    2870:	18 95       	reti

00002872 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	0b b6       	in	r0, 0x3b	; 59
    287e:	0f 92       	push	r0
    2880:	2f 93       	push	r18
    2882:	3f 93       	push	r19
    2884:	4f 93       	push	r20
    2886:	5f 93       	push	r21
    2888:	6f 93       	push	r22
    288a:	7f 93       	push	r23
    288c:	8f 93       	push	r24
    288e:	9f 93       	push	r25
    2890:	af 93       	push	r26
    2892:	bf 93       	push	r27
    2894:	ef 93       	push	r30
    2896:	ff 93       	push	r31
    2898:	e0 91 a0 21 	lds	r30, 0x21A0
    289c:	f0 91 a1 21 	lds	r31, 0x21A1
    28a0:	30 97       	sbiw	r30, 0x00	; 0
    28a2:	29 f0       	breq	.+10     	; 0x28ae <__vector_32+0x3c>
    28a4:	80 91 96 22 	lds	r24, 0x2296
    28a8:	90 91 97 22 	lds	r25, 0x2297
    28ac:	19 95       	eicall
    28ae:	ff 91       	pop	r31
    28b0:	ef 91       	pop	r30
    28b2:	bf 91       	pop	r27
    28b4:	af 91       	pop	r26
    28b6:	9f 91       	pop	r25
    28b8:	8f 91       	pop	r24
    28ba:	7f 91       	pop	r23
    28bc:	6f 91       	pop	r22
    28be:	5f 91       	pop	r21
    28c0:	4f 91       	pop	r20
    28c2:	3f 91       	pop	r19
    28c4:	2f 91       	pop	r18
    28c6:	0f 90       	pop	r0
    28c8:	0b be       	out	0x3b, r0	; 59
    28ca:	0f 90       	pop	r0
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	0f 90       	pop	r0
    28d0:	1f 90       	pop	r1
    28d2:	18 95       	reti

000028d4 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    28d4:	1f 92       	push	r1
    28d6:	0f 92       	push	r0
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	0f 92       	push	r0
    28dc:	11 24       	eor	r1, r1
    28de:	0b b6       	in	r0, 0x3b	; 59
    28e0:	0f 92       	push	r0
    28e2:	2f 93       	push	r18
    28e4:	3f 93       	push	r19
    28e6:	4f 93       	push	r20
    28e8:	5f 93       	push	r21
    28ea:	6f 93       	push	r22
    28ec:	7f 93       	push	r23
    28ee:	8f 93       	push	r24
    28f0:	9f 93       	push	r25
    28f2:	af 93       	push	r26
    28f4:	bf 93       	push	r27
    28f6:	ef 93       	push	r30
    28f8:	ff 93       	push	r31
    28fa:	e0 91 a2 21 	lds	r30, 0x21A2
    28fe:	f0 91 a3 21 	lds	r31, 0x21A3
    2902:	30 97       	sbiw	r30, 0x00	; 0
    2904:	29 f0       	breq	.+10     	; 0x2910 <__vector_33+0x3c>
    2906:	80 91 98 22 	lds	r24, 0x2298
    290a:	90 91 99 22 	lds	r25, 0x2299
    290e:	19 95       	eicall
    2910:	ff 91       	pop	r31
    2912:	ef 91       	pop	r30
    2914:	bf 91       	pop	r27
    2916:	af 91       	pop	r26
    2918:	9f 91       	pop	r25
    291a:	8f 91       	pop	r24
    291c:	7f 91       	pop	r23
    291e:	6f 91       	pop	r22
    2920:	5f 91       	pop	r21
    2922:	4f 91       	pop	r20
    2924:	3f 91       	pop	r19
    2926:	2f 91       	pop	r18
    2928:	0f 90       	pop	r0
    292a:	0b be       	out	0x3b, r0	; 59
    292c:	0f 90       	pop	r0
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	0f 90       	pop	r0
    2932:	1f 90       	pop	r1
    2934:	18 95       	reti

00002936 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2936:	1f 92       	push	r1
    2938:	0f 92       	push	r0
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	0f 92       	push	r0
    293e:	11 24       	eor	r1, r1
    2940:	0b b6       	in	r0, 0x3b	; 59
    2942:	0f 92       	push	r0
    2944:	2f 93       	push	r18
    2946:	3f 93       	push	r19
    2948:	4f 93       	push	r20
    294a:	5f 93       	push	r21
    294c:	6f 93       	push	r22
    294e:	7f 93       	push	r23
    2950:	8f 93       	push	r24
    2952:	9f 93       	push	r25
    2954:	af 93       	push	r26
    2956:	bf 93       	push	r27
    2958:	ef 93       	push	r30
    295a:	ff 93       	push	r31
    295c:	e0 91 a4 21 	lds	r30, 0x21A4
    2960:	f0 91 a5 21 	lds	r31, 0x21A5
    2964:	30 97       	sbiw	r30, 0x00	; 0
    2966:	29 f0       	breq	.+10     	; 0x2972 <__vector_34+0x3c>
    2968:	80 91 9a 22 	lds	r24, 0x229A
    296c:	90 91 9b 22 	lds	r25, 0x229B
    2970:	19 95       	eicall
    2972:	ff 91       	pop	r31
    2974:	ef 91       	pop	r30
    2976:	bf 91       	pop	r27
    2978:	af 91       	pop	r26
    297a:	9f 91       	pop	r25
    297c:	8f 91       	pop	r24
    297e:	7f 91       	pop	r23
    2980:	6f 91       	pop	r22
    2982:	5f 91       	pop	r21
    2984:	4f 91       	pop	r20
    2986:	3f 91       	pop	r19
    2988:	2f 91       	pop	r18
    298a:	0f 90       	pop	r0
    298c:	0b be       	out	0x3b, r0	; 59
    298e:	0f 90       	pop	r0
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	0f 90       	pop	r0
    2994:	1f 90       	pop	r1
    2996:	18 95       	reti

00002998 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2998:	1f 92       	push	r1
    299a:	0f 92       	push	r0
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	0f 92       	push	r0
    29a0:	11 24       	eor	r1, r1
    29a2:	0b b6       	in	r0, 0x3b	; 59
    29a4:	0f 92       	push	r0
    29a6:	2f 93       	push	r18
    29a8:	3f 93       	push	r19
    29aa:	4f 93       	push	r20
    29ac:	5f 93       	push	r21
    29ae:	6f 93       	push	r22
    29b0:	7f 93       	push	r23
    29b2:	8f 93       	push	r24
    29b4:	9f 93       	push	r25
    29b6:	af 93       	push	r26
    29b8:	bf 93       	push	r27
    29ba:	ef 93       	push	r30
    29bc:	ff 93       	push	r31
    29be:	e0 91 a6 21 	lds	r30, 0x21A6
    29c2:	f0 91 a7 21 	lds	r31, 0x21A7
    29c6:	30 97       	sbiw	r30, 0x00	; 0
    29c8:	29 f0       	breq	.+10     	; 0x29d4 <__vector_35+0x3c>
    29ca:	80 91 9c 22 	lds	r24, 0x229C
    29ce:	90 91 9d 22 	lds	r25, 0x229D
    29d2:	19 95       	eicall
    29d4:	ff 91       	pop	r31
    29d6:	ef 91       	pop	r30
    29d8:	bf 91       	pop	r27
    29da:	af 91       	pop	r26
    29dc:	9f 91       	pop	r25
    29de:	8f 91       	pop	r24
    29e0:	7f 91       	pop	r23
    29e2:	6f 91       	pop	r22
    29e4:	5f 91       	pop	r21
    29e6:	4f 91       	pop	r20
    29e8:	3f 91       	pop	r19
    29ea:	2f 91       	pop	r18
    29ec:	0f 90       	pop	r0
    29ee:	0b be       	out	0x3b, r0	; 59
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	0f 90       	pop	r0
    29f6:	1f 90       	pop	r1
    29f8:	18 95       	reti

000029fa <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    29fa:	1f 92       	push	r1
    29fc:	0f 92       	push	r0
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	0f 92       	push	r0
    2a02:	11 24       	eor	r1, r1
    2a04:	0b b6       	in	r0, 0x3b	; 59
    2a06:	0f 92       	push	r0
    2a08:	2f 93       	push	r18
    2a0a:	3f 93       	push	r19
    2a0c:	4f 93       	push	r20
    2a0e:	5f 93       	push	r21
    2a10:	6f 93       	push	r22
    2a12:	7f 93       	push	r23
    2a14:	8f 93       	push	r24
    2a16:	9f 93       	push	r25
    2a18:	af 93       	push	r26
    2a1a:	bf 93       	push	r27
    2a1c:	ef 93       	push	r30
    2a1e:	ff 93       	push	r31
    2a20:	e0 91 a8 21 	lds	r30, 0x21A8
    2a24:	f0 91 a9 21 	lds	r31, 0x21A9
    2a28:	30 97       	sbiw	r30, 0x00	; 0
    2a2a:	29 f0       	breq	.+10     	; 0x2a36 <__vector_36+0x3c>
    2a2c:	80 91 9e 22 	lds	r24, 0x229E
    2a30:	90 91 9f 22 	lds	r25, 0x229F
    2a34:	19 95       	eicall
    2a36:	ff 91       	pop	r31
    2a38:	ef 91       	pop	r30
    2a3a:	bf 91       	pop	r27
    2a3c:	af 91       	pop	r26
    2a3e:	9f 91       	pop	r25
    2a40:	8f 91       	pop	r24
    2a42:	7f 91       	pop	r23
    2a44:	6f 91       	pop	r22
    2a46:	5f 91       	pop	r21
    2a48:	4f 91       	pop	r20
    2a4a:	3f 91       	pop	r19
    2a4c:	2f 91       	pop	r18
    2a4e:	0f 90       	pop	r0
    2a50:	0b be       	out	0x3b, r0	; 59
    2a52:	0f 90       	pop	r0
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	0f 90       	pop	r0
    2a58:	1f 90       	pop	r1
    2a5a:	18 95       	reti

00002a5c <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2a5c:	1f 92       	push	r1
    2a5e:	0f 92       	push	r0
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	0f 92       	push	r0
    2a64:	11 24       	eor	r1, r1
    2a66:	0b b6       	in	r0, 0x3b	; 59
    2a68:	0f 92       	push	r0
    2a6a:	2f 93       	push	r18
    2a6c:	3f 93       	push	r19
    2a6e:	4f 93       	push	r20
    2a70:	5f 93       	push	r21
    2a72:	6f 93       	push	r22
    2a74:	7f 93       	push	r23
    2a76:	8f 93       	push	r24
    2a78:	9f 93       	push	r25
    2a7a:	af 93       	push	r26
    2a7c:	bf 93       	push	r27
    2a7e:	ef 93       	push	r30
    2a80:	ff 93       	push	r31
    2a82:	e0 91 aa 21 	lds	r30, 0x21AA
    2a86:	f0 91 ab 21 	lds	r31, 0x21AB
    2a8a:	30 97       	sbiw	r30, 0x00	; 0
    2a8c:	29 f0       	breq	.+10     	; 0x2a98 <__vector_37+0x3c>
    2a8e:	80 91 a0 22 	lds	r24, 0x22A0
    2a92:	90 91 a1 22 	lds	r25, 0x22A1
    2a96:	19 95       	eicall
    2a98:	ff 91       	pop	r31
    2a9a:	ef 91       	pop	r30
    2a9c:	bf 91       	pop	r27
    2a9e:	af 91       	pop	r26
    2aa0:	9f 91       	pop	r25
    2aa2:	8f 91       	pop	r24
    2aa4:	7f 91       	pop	r23
    2aa6:	6f 91       	pop	r22
    2aa8:	5f 91       	pop	r21
    2aaa:	4f 91       	pop	r20
    2aac:	3f 91       	pop	r19
    2aae:	2f 91       	pop	r18
    2ab0:	0f 90       	pop	r0
    2ab2:	0b be       	out	0x3b, r0	; 59
    2ab4:	0f 90       	pop	r0
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	0f 90       	pop	r0
    2aba:	1f 90       	pop	r1
    2abc:	18 95       	reti

00002abe <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2abe:	1f 92       	push	r1
    2ac0:	0f 92       	push	r0
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	0f 92       	push	r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	0b b6       	in	r0, 0x3b	; 59
    2aca:	0f 92       	push	r0
    2acc:	2f 93       	push	r18
    2ace:	3f 93       	push	r19
    2ad0:	4f 93       	push	r20
    2ad2:	5f 93       	push	r21
    2ad4:	6f 93       	push	r22
    2ad6:	7f 93       	push	r23
    2ad8:	8f 93       	push	r24
    2ada:	9f 93       	push	r25
    2adc:	af 93       	push	r26
    2ade:	bf 93       	push	r27
    2ae0:	ef 93       	push	r30
    2ae2:	ff 93       	push	r31
    2ae4:	e0 91 ac 21 	lds	r30, 0x21AC
    2ae8:	f0 91 ad 21 	lds	r31, 0x21AD
    2aec:	30 97       	sbiw	r30, 0x00	; 0
    2aee:	29 f0       	breq	.+10     	; 0x2afa <__vector_38+0x3c>
    2af0:	80 91 a2 22 	lds	r24, 0x22A2
    2af4:	90 91 a3 22 	lds	r25, 0x22A3
    2af8:	19 95       	eicall
    2afa:	ff 91       	pop	r31
    2afc:	ef 91       	pop	r30
    2afe:	bf 91       	pop	r27
    2b00:	af 91       	pop	r26
    2b02:	9f 91       	pop	r25
    2b04:	8f 91       	pop	r24
    2b06:	7f 91       	pop	r23
    2b08:	6f 91       	pop	r22
    2b0a:	5f 91       	pop	r21
    2b0c:	4f 91       	pop	r20
    2b0e:	3f 91       	pop	r19
    2b10:	2f 91       	pop	r18
    2b12:	0f 90       	pop	r0
    2b14:	0b be       	out	0x3b, r0	; 59
    2b16:	0f 90       	pop	r0
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	0f 90       	pop	r0
    2b1c:	1f 90       	pop	r1
    2b1e:	18 95       	reti

00002b20 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    2b20:	1f 92       	push	r1
    2b22:	0f 92       	push	r0
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	0f 92       	push	r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	0b b6       	in	r0, 0x3b	; 59
    2b2c:	0f 92       	push	r0
    2b2e:	2f 93       	push	r18
    2b30:	3f 93       	push	r19
    2b32:	4f 93       	push	r20
    2b34:	5f 93       	push	r21
    2b36:	6f 93       	push	r22
    2b38:	7f 93       	push	r23
    2b3a:	8f 93       	push	r24
    2b3c:	9f 93       	push	r25
    2b3e:	af 93       	push	r26
    2b40:	bf 93       	push	r27
    2b42:	ef 93       	push	r30
    2b44:	ff 93       	push	r31
    2b46:	e0 91 ae 21 	lds	r30, 0x21AE
    2b4a:	f0 91 af 21 	lds	r31, 0x21AF
    2b4e:	30 97       	sbiw	r30, 0x00	; 0
    2b50:	29 f0       	breq	.+10     	; 0x2b5c <__vector_39+0x3c>
    2b52:	80 91 a4 22 	lds	r24, 0x22A4
    2b56:	90 91 a5 22 	lds	r25, 0x22A5
    2b5a:	19 95       	eicall
    2b5c:	ff 91       	pop	r31
    2b5e:	ef 91       	pop	r30
    2b60:	bf 91       	pop	r27
    2b62:	af 91       	pop	r26
    2b64:	9f 91       	pop	r25
    2b66:	8f 91       	pop	r24
    2b68:	7f 91       	pop	r23
    2b6a:	6f 91       	pop	r22
    2b6c:	5f 91       	pop	r21
    2b6e:	4f 91       	pop	r20
    2b70:	3f 91       	pop	r19
    2b72:	2f 91       	pop	r18
    2b74:	0f 90       	pop	r0
    2b76:	0b be       	out	0x3b, r0	; 59
    2b78:	0f 90       	pop	r0
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	0f 90       	pop	r0
    2b7e:	1f 90       	pop	r1
    2b80:	18 95       	reti

00002b82 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2b82:	1f 92       	push	r1
    2b84:	0f 92       	push	r0
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	0f 92       	push	r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	0b b6       	in	r0, 0x3b	; 59
    2b8e:	0f 92       	push	r0
    2b90:	2f 93       	push	r18
    2b92:	3f 93       	push	r19
    2b94:	4f 93       	push	r20
    2b96:	5f 93       	push	r21
    2b98:	6f 93       	push	r22
    2b9a:	7f 93       	push	r23
    2b9c:	8f 93       	push	r24
    2b9e:	9f 93       	push	r25
    2ba0:	af 93       	push	r26
    2ba2:	bf 93       	push	r27
    2ba4:	ef 93       	push	r30
    2ba6:	ff 93       	push	r31
    2ba8:	e0 91 b0 21 	lds	r30, 0x21B0
    2bac:	f0 91 b1 21 	lds	r31, 0x21B1
    2bb0:	30 97       	sbiw	r30, 0x00	; 0
    2bb2:	29 f0       	breq	.+10     	; 0x2bbe <__vector_40+0x3c>
    2bb4:	80 91 a6 22 	lds	r24, 0x22A6
    2bb8:	90 91 a7 22 	lds	r25, 0x22A7
    2bbc:	19 95       	eicall
    2bbe:	ff 91       	pop	r31
    2bc0:	ef 91       	pop	r30
    2bc2:	bf 91       	pop	r27
    2bc4:	af 91       	pop	r26
    2bc6:	9f 91       	pop	r25
    2bc8:	8f 91       	pop	r24
    2bca:	7f 91       	pop	r23
    2bcc:	6f 91       	pop	r22
    2bce:	5f 91       	pop	r21
    2bd0:	4f 91       	pop	r20
    2bd2:	3f 91       	pop	r19
    2bd4:	2f 91       	pop	r18
    2bd6:	0f 90       	pop	r0
    2bd8:	0b be       	out	0x3b, r0	; 59
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	0f 90       	pop	r0
    2be0:	1f 90       	pop	r1
    2be2:	18 95       	reti

00002be4 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	0b b6       	in	r0, 0x3b	; 59
    2bf0:	0f 92       	push	r0
    2bf2:	2f 93       	push	r18
    2bf4:	3f 93       	push	r19
    2bf6:	4f 93       	push	r20
    2bf8:	5f 93       	push	r21
    2bfa:	6f 93       	push	r22
    2bfc:	7f 93       	push	r23
    2bfe:	8f 93       	push	r24
    2c00:	9f 93       	push	r25
    2c02:	af 93       	push	r26
    2c04:	bf 93       	push	r27
    2c06:	ef 93       	push	r30
    2c08:	ff 93       	push	r31
    2c0a:	e0 91 b2 21 	lds	r30, 0x21B2
    2c0e:	f0 91 b3 21 	lds	r31, 0x21B3
    2c12:	30 97       	sbiw	r30, 0x00	; 0
    2c14:	29 f0       	breq	.+10     	; 0x2c20 <__vector_41+0x3c>
    2c16:	80 91 a8 22 	lds	r24, 0x22A8
    2c1a:	90 91 a9 22 	lds	r25, 0x22A9
    2c1e:	19 95       	eicall
    2c20:	ff 91       	pop	r31
    2c22:	ef 91       	pop	r30
    2c24:	bf 91       	pop	r27
    2c26:	af 91       	pop	r26
    2c28:	9f 91       	pop	r25
    2c2a:	8f 91       	pop	r24
    2c2c:	7f 91       	pop	r23
    2c2e:	6f 91       	pop	r22
    2c30:	5f 91       	pop	r21
    2c32:	4f 91       	pop	r20
    2c34:	3f 91       	pop	r19
    2c36:	2f 91       	pop	r18
    2c38:	0f 90       	pop	r0
    2c3a:	0b be       	out	0x3b, r0	; 59
    2c3c:	0f 90       	pop	r0
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	0f 90       	pop	r0
    2c42:	1f 90       	pop	r1
    2c44:	18 95       	reti

00002c46 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    2c46:	1f 92       	push	r1
    2c48:	0f 92       	push	r0
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	0f 92       	push	r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	0b b6       	in	r0, 0x3b	; 59
    2c52:	0f 92       	push	r0
    2c54:	2f 93       	push	r18
    2c56:	3f 93       	push	r19
    2c58:	4f 93       	push	r20
    2c5a:	5f 93       	push	r21
    2c5c:	6f 93       	push	r22
    2c5e:	7f 93       	push	r23
    2c60:	8f 93       	push	r24
    2c62:	9f 93       	push	r25
    2c64:	af 93       	push	r26
    2c66:	bf 93       	push	r27
    2c68:	ef 93       	push	r30
    2c6a:	ff 93       	push	r31
    2c6c:	e0 91 b4 21 	lds	r30, 0x21B4
    2c70:	f0 91 b5 21 	lds	r31, 0x21B5
    2c74:	30 97       	sbiw	r30, 0x00	; 0
    2c76:	29 f0       	breq	.+10     	; 0x2c82 <__vector_42+0x3c>
    2c78:	80 91 aa 22 	lds	r24, 0x22AA
    2c7c:	90 91 ab 22 	lds	r25, 0x22AB
    2c80:	19 95       	eicall
    2c82:	ff 91       	pop	r31
    2c84:	ef 91       	pop	r30
    2c86:	bf 91       	pop	r27
    2c88:	af 91       	pop	r26
    2c8a:	9f 91       	pop	r25
    2c8c:	8f 91       	pop	r24
    2c8e:	7f 91       	pop	r23
    2c90:	6f 91       	pop	r22
    2c92:	5f 91       	pop	r21
    2c94:	4f 91       	pop	r20
    2c96:	3f 91       	pop	r19
    2c98:	2f 91       	pop	r18
    2c9a:	0f 90       	pop	r0
    2c9c:	0b be       	out	0x3b, r0	; 59
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	0f 90       	pop	r0
    2ca4:	1f 90       	pop	r1
    2ca6:	18 95       	reti

00002ca8 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    2ca8:	1f 92       	push	r1
    2caa:	0f 92       	push	r0
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	0f 92       	push	r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	0b b6       	in	r0, 0x3b	; 59
    2cb4:	0f 92       	push	r0
    2cb6:	2f 93       	push	r18
    2cb8:	3f 93       	push	r19
    2cba:	4f 93       	push	r20
    2cbc:	5f 93       	push	r21
    2cbe:	6f 93       	push	r22
    2cc0:	7f 93       	push	r23
    2cc2:	8f 93       	push	r24
    2cc4:	9f 93       	push	r25
    2cc6:	af 93       	push	r26
    2cc8:	bf 93       	push	r27
    2cca:	ef 93       	push	r30
    2ccc:	ff 93       	push	r31
    2cce:	e0 91 b6 21 	lds	r30, 0x21B6
    2cd2:	f0 91 b7 21 	lds	r31, 0x21B7
    2cd6:	30 97       	sbiw	r30, 0x00	; 0
    2cd8:	29 f0       	breq	.+10     	; 0x2ce4 <__vector_43+0x3c>
    2cda:	80 91 ac 22 	lds	r24, 0x22AC
    2cde:	90 91 ad 22 	lds	r25, 0x22AD
    2ce2:	19 95       	eicall
    2ce4:	ff 91       	pop	r31
    2ce6:	ef 91       	pop	r30
    2ce8:	bf 91       	pop	r27
    2cea:	af 91       	pop	r26
    2cec:	9f 91       	pop	r25
    2cee:	8f 91       	pop	r24
    2cf0:	7f 91       	pop	r23
    2cf2:	6f 91       	pop	r22
    2cf4:	5f 91       	pop	r21
    2cf6:	4f 91       	pop	r20
    2cf8:	3f 91       	pop	r19
    2cfa:	2f 91       	pop	r18
    2cfc:	0f 90       	pop	r0
    2cfe:	0b be       	out	0x3b, r0	; 59
    2d00:	0f 90       	pop	r0
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	0f 90       	pop	r0
    2d06:	1f 90       	pop	r1
    2d08:	18 95       	reti

00002d0a <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    2d0a:	1f 92       	push	r1
    2d0c:	0f 92       	push	r0
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	0f 92       	push	r0
    2d12:	11 24       	eor	r1, r1
    2d14:	0b b6       	in	r0, 0x3b	; 59
    2d16:	0f 92       	push	r0
    2d18:	2f 93       	push	r18
    2d1a:	3f 93       	push	r19
    2d1c:	4f 93       	push	r20
    2d1e:	5f 93       	push	r21
    2d20:	6f 93       	push	r22
    2d22:	7f 93       	push	r23
    2d24:	8f 93       	push	r24
    2d26:	9f 93       	push	r25
    2d28:	af 93       	push	r26
    2d2a:	bf 93       	push	r27
    2d2c:	ef 93       	push	r30
    2d2e:	ff 93       	push	r31
    2d30:	e0 91 b8 21 	lds	r30, 0x21B8
    2d34:	f0 91 b9 21 	lds	r31, 0x21B9
    2d38:	30 97       	sbiw	r30, 0x00	; 0
    2d3a:	29 f0       	breq	.+10     	; 0x2d46 <__vector_44+0x3c>
    2d3c:	80 91 ae 22 	lds	r24, 0x22AE
    2d40:	90 91 af 22 	lds	r25, 0x22AF
    2d44:	19 95       	eicall
    2d46:	ff 91       	pop	r31
    2d48:	ef 91       	pop	r30
    2d4a:	bf 91       	pop	r27
    2d4c:	af 91       	pop	r26
    2d4e:	9f 91       	pop	r25
    2d50:	8f 91       	pop	r24
    2d52:	7f 91       	pop	r23
    2d54:	6f 91       	pop	r22
    2d56:	5f 91       	pop	r21
    2d58:	4f 91       	pop	r20
    2d5a:	3f 91       	pop	r19
    2d5c:	2f 91       	pop	r18
    2d5e:	0f 90       	pop	r0
    2d60:	0b be       	out	0x3b, r0	; 59
    2d62:	0f 90       	pop	r0
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	0f 90       	pop	r0
    2d68:	1f 90       	pop	r1
    2d6a:	18 95       	reti

00002d6c <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    2d6c:	1f 92       	push	r1
    2d6e:	0f 92       	push	r0
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	0f 92       	push	r0
    2d74:	11 24       	eor	r1, r1
    2d76:	0b b6       	in	r0, 0x3b	; 59
    2d78:	0f 92       	push	r0
    2d7a:	2f 93       	push	r18
    2d7c:	3f 93       	push	r19
    2d7e:	4f 93       	push	r20
    2d80:	5f 93       	push	r21
    2d82:	6f 93       	push	r22
    2d84:	7f 93       	push	r23
    2d86:	8f 93       	push	r24
    2d88:	9f 93       	push	r25
    2d8a:	af 93       	push	r26
    2d8c:	bf 93       	push	r27
    2d8e:	ef 93       	push	r30
    2d90:	ff 93       	push	r31
    2d92:	e0 91 ba 21 	lds	r30, 0x21BA
    2d96:	f0 91 bb 21 	lds	r31, 0x21BB
    2d9a:	30 97       	sbiw	r30, 0x00	; 0
    2d9c:	29 f0       	breq	.+10     	; 0x2da8 <__vector_45+0x3c>
    2d9e:	80 91 b0 22 	lds	r24, 0x22B0
    2da2:	90 91 b1 22 	lds	r25, 0x22B1
    2da6:	19 95       	eicall
    2da8:	ff 91       	pop	r31
    2daa:	ef 91       	pop	r30
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	7f 91       	pop	r23
    2db6:	6f 91       	pop	r22
    2db8:	5f 91       	pop	r21
    2dba:	4f 91       	pop	r20
    2dbc:	3f 91       	pop	r19
    2dbe:	2f 91       	pop	r18
    2dc0:	0f 90       	pop	r0
    2dc2:	0b be       	out	0x3b, r0	; 59
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	0f 90       	pop	r0
    2dca:	1f 90       	pop	r1
    2dcc:	18 95       	reti

00002dce <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    2dce:	1f 92       	push	r1
    2dd0:	0f 92       	push	r0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	0f 92       	push	r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	0b b6       	in	r0, 0x3b	; 59
    2dda:	0f 92       	push	r0
    2ddc:	2f 93       	push	r18
    2dde:	3f 93       	push	r19
    2de0:	4f 93       	push	r20
    2de2:	5f 93       	push	r21
    2de4:	6f 93       	push	r22
    2de6:	7f 93       	push	r23
    2de8:	8f 93       	push	r24
    2dea:	9f 93       	push	r25
    2dec:	af 93       	push	r26
    2dee:	bf 93       	push	r27
    2df0:	ef 93       	push	r30
    2df2:	ff 93       	push	r31
    2df4:	e0 91 bc 21 	lds	r30, 0x21BC
    2df8:	f0 91 bd 21 	lds	r31, 0x21BD
    2dfc:	30 97       	sbiw	r30, 0x00	; 0
    2dfe:	29 f0       	breq	.+10     	; 0x2e0a <__vector_46+0x3c>
    2e00:	80 91 b2 22 	lds	r24, 0x22B2
    2e04:	90 91 b3 22 	lds	r25, 0x22B3
    2e08:	19 95       	eicall
    2e0a:	ff 91       	pop	r31
    2e0c:	ef 91       	pop	r30
    2e0e:	bf 91       	pop	r27
    2e10:	af 91       	pop	r26
    2e12:	9f 91       	pop	r25
    2e14:	8f 91       	pop	r24
    2e16:	7f 91       	pop	r23
    2e18:	6f 91       	pop	r22
    2e1a:	5f 91       	pop	r21
    2e1c:	4f 91       	pop	r20
    2e1e:	3f 91       	pop	r19
    2e20:	2f 91       	pop	r18
    2e22:	0f 90       	pop	r0
    2e24:	0b be       	out	0x3b, r0	; 59
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	0f 90       	pop	r0
    2e2c:	1f 90       	pop	r1
    2e2e:	18 95       	reti

00002e30 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2e30:	1f 92       	push	r1
    2e32:	0f 92       	push	r0
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	0f 92       	push	r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	0b b6       	in	r0, 0x3b	; 59
    2e3c:	0f 92       	push	r0
    2e3e:	2f 93       	push	r18
    2e40:	3f 93       	push	r19
    2e42:	4f 93       	push	r20
    2e44:	5f 93       	push	r21
    2e46:	6f 93       	push	r22
    2e48:	7f 93       	push	r23
    2e4a:	8f 93       	push	r24
    2e4c:	9f 93       	push	r25
    2e4e:	af 93       	push	r26
    2e50:	bf 93       	push	r27
    2e52:	ef 93       	push	r30
    2e54:	ff 93       	push	r31
    2e56:	e0 91 be 21 	lds	r30, 0x21BE
    2e5a:	f0 91 bf 21 	lds	r31, 0x21BF
    2e5e:	30 97       	sbiw	r30, 0x00	; 0
    2e60:	29 f0       	breq	.+10     	; 0x2e6c <__vector_47+0x3c>
    2e62:	80 91 b4 22 	lds	r24, 0x22B4
    2e66:	90 91 b5 22 	lds	r25, 0x22B5
    2e6a:	19 95       	eicall
    2e6c:	ff 91       	pop	r31
    2e6e:	ef 91       	pop	r30
    2e70:	bf 91       	pop	r27
    2e72:	af 91       	pop	r26
    2e74:	9f 91       	pop	r25
    2e76:	8f 91       	pop	r24
    2e78:	7f 91       	pop	r23
    2e7a:	6f 91       	pop	r22
    2e7c:	5f 91       	pop	r21
    2e7e:	4f 91       	pop	r20
    2e80:	3f 91       	pop	r19
    2e82:	2f 91       	pop	r18
    2e84:	0f 90       	pop	r0
    2e86:	0b be       	out	0x3b, r0	; 59
    2e88:	0f 90       	pop	r0
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	0f 90       	pop	r0
    2e8e:	1f 90       	pop	r1
    2e90:	18 95       	reti

00002e92 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2e92:	1f 92       	push	r1
    2e94:	0f 92       	push	r0
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	0f 92       	push	r0
    2e9a:	11 24       	eor	r1, r1
    2e9c:	0b b6       	in	r0, 0x3b	; 59
    2e9e:	0f 92       	push	r0
    2ea0:	2f 93       	push	r18
    2ea2:	3f 93       	push	r19
    2ea4:	4f 93       	push	r20
    2ea6:	5f 93       	push	r21
    2ea8:	6f 93       	push	r22
    2eaa:	7f 93       	push	r23
    2eac:	8f 93       	push	r24
    2eae:	9f 93       	push	r25
    2eb0:	af 93       	push	r26
    2eb2:	bf 93       	push	r27
    2eb4:	ef 93       	push	r30
    2eb6:	ff 93       	push	r31
    2eb8:	e0 91 c0 21 	lds	r30, 0x21C0
    2ebc:	f0 91 c1 21 	lds	r31, 0x21C1
    2ec0:	30 97       	sbiw	r30, 0x00	; 0
    2ec2:	29 f0       	breq	.+10     	; 0x2ece <__vector_48+0x3c>
    2ec4:	80 91 b6 22 	lds	r24, 0x22B6
    2ec8:	90 91 b7 22 	lds	r25, 0x22B7
    2ecc:	19 95       	eicall
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	0b be       	out	0x3b, r0	; 59
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	0f 92       	push	r0
    2efc:	11 24       	eor	r1, r1
    2efe:	0b b6       	in	r0, 0x3b	; 59
    2f00:	0f 92       	push	r0
    2f02:	2f 93       	push	r18
    2f04:	3f 93       	push	r19
    2f06:	4f 93       	push	r20
    2f08:	5f 93       	push	r21
    2f0a:	6f 93       	push	r22
    2f0c:	7f 93       	push	r23
    2f0e:	8f 93       	push	r24
    2f10:	9f 93       	push	r25
    2f12:	af 93       	push	r26
    2f14:	bf 93       	push	r27
    2f16:	ef 93       	push	r30
    2f18:	ff 93       	push	r31
    2f1a:	e0 91 c2 21 	lds	r30, 0x21C2
    2f1e:	f0 91 c3 21 	lds	r31, 0x21C3
    2f22:	30 97       	sbiw	r30, 0x00	; 0
    2f24:	29 f0       	breq	.+10     	; 0x2f30 <__vector_49+0x3c>
    2f26:	80 91 b8 22 	lds	r24, 0x22B8
    2f2a:	90 91 b9 22 	lds	r25, 0x22B9
    2f2e:	19 95       	eicall
    2f30:	ff 91       	pop	r31
    2f32:	ef 91       	pop	r30
    2f34:	bf 91       	pop	r27
    2f36:	af 91       	pop	r26
    2f38:	9f 91       	pop	r25
    2f3a:	8f 91       	pop	r24
    2f3c:	7f 91       	pop	r23
    2f3e:	6f 91       	pop	r22
    2f40:	5f 91       	pop	r21
    2f42:	4f 91       	pop	r20
    2f44:	3f 91       	pop	r19
    2f46:	2f 91       	pop	r18
    2f48:	0f 90       	pop	r0
    2f4a:	0b be       	out	0x3b, r0	; 59
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	0f 90       	pop	r0
    2f52:	1f 90       	pop	r1
    2f54:	18 95       	reti

00002f56 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2f56:	1f 92       	push	r1
    2f58:	0f 92       	push	r0
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	0f 92       	push	r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	0b b6       	in	r0, 0x3b	; 59
    2f62:	0f 92       	push	r0
    2f64:	2f 93       	push	r18
    2f66:	3f 93       	push	r19
    2f68:	4f 93       	push	r20
    2f6a:	5f 93       	push	r21
    2f6c:	6f 93       	push	r22
    2f6e:	7f 93       	push	r23
    2f70:	8f 93       	push	r24
    2f72:	9f 93       	push	r25
    2f74:	af 93       	push	r26
    2f76:	bf 93       	push	r27
    2f78:	ef 93       	push	r30
    2f7a:	ff 93       	push	r31
    2f7c:	e0 91 c4 21 	lds	r30, 0x21C4
    2f80:	f0 91 c5 21 	lds	r31, 0x21C5
    2f84:	30 97       	sbiw	r30, 0x00	; 0
    2f86:	29 f0       	breq	.+10     	; 0x2f92 <__vector_50+0x3c>
    2f88:	80 91 ba 22 	lds	r24, 0x22BA
    2f8c:	90 91 bb 22 	lds	r25, 0x22BB
    2f90:	19 95       	eicall
    2f92:	ff 91       	pop	r31
    2f94:	ef 91       	pop	r30
    2f96:	bf 91       	pop	r27
    2f98:	af 91       	pop	r26
    2f9a:	9f 91       	pop	r25
    2f9c:	8f 91       	pop	r24
    2f9e:	7f 91       	pop	r23
    2fa0:	6f 91       	pop	r22
    2fa2:	5f 91       	pop	r21
    2fa4:	4f 91       	pop	r20
    2fa6:	3f 91       	pop	r19
    2fa8:	2f 91       	pop	r18
    2faa:	0f 90       	pop	r0
    2fac:	0b be       	out	0x3b, r0	; 59
    2fae:	0f 90       	pop	r0
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	0f 90       	pop	r0
    2fb4:	1f 90       	pop	r1
    2fb6:	18 95       	reti

00002fb8 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2fb8:	1f 92       	push	r1
    2fba:	0f 92       	push	r0
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	0f 92       	push	r0
    2fc0:	11 24       	eor	r1, r1
    2fc2:	0b b6       	in	r0, 0x3b	; 59
    2fc4:	0f 92       	push	r0
    2fc6:	2f 93       	push	r18
    2fc8:	3f 93       	push	r19
    2fca:	4f 93       	push	r20
    2fcc:	5f 93       	push	r21
    2fce:	6f 93       	push	r22
    2fd0:	7f 93       	push	r23
    2fd2:	8f 93       	push	r24
    2fd4:	9f 93       	push	r25
    2fd6:	af 93       	push	r26
    2fd8:	bf 93       	push	r27
    2fda:	ef 93       	push	r30
    2fdc:	ff 93       	push	r31
    2fde:	e0 91 c6 21 	lds	r30, 0x21C6
    2fe2:	f0 91 c7 21 	lds	r31, 0x21C7
    2fe6:	30 97       	sbiw	r30, 0x00	; 0
    2fe8:	29 f0       	breq	.+10     	; 0x2ff4 <__vector_51+0x3c>
    2fea:	80 91 bc 22 	lds	r24, 0x22BC
    2fee:	90 91 bd 22 	lds	r25, 0x22BD
    2ff2:	19 95       	eicall
    2ff4:	ff 91       	pop	r31
    2ff6:	ef 91       	pop	r30
    2ff8:	bf 91       	pop	r27
    2ffa:	af 91       	pop	r26
    2ffc:	9f 91       	pop	r25
    2ffe:	8f 91       	pop	r24
    3000:	7f 91       	pop	r23
    3002:	6f 91       	pop	r22
    3004:	5f 91       	pop	r21
    3006:	4f 91       	pop	r20
    3008:	3f 91       	pop	r19
    300a:	2f 91       	pop	r18
    300c:	0f 90       	pop	r0
    300e:	0b be       	out	0x3b, r0	; 59
    3010:	0f 90       	pop	r0
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	0f 90       	pop	r0
    3016:	1f 90       	pop	r1
    3018:	18 95       	reti

0000301a <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    301a:	1f 92       	push	r1
    301c:	0f 92       	push	r0
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	0f 92       	push	r0
    3022:	11 24       	eor	r1, r1
    3024:	0b b6       	in	r0, 0x3b	; 59
    3026:	0f 92       	push	r0
    3028:	2f 93       	push	r18
    302a:	3f 93       	push	r19
    302c:	4f 93       	push	r20
    302e:	5f 93       	push	r21
    3030:	6f 93       	push	r22
    3032:	7f 93       	push	r23
    3034:	8f 93       	push	r24
    3036:	9f 93       	push	r25
    3038:	af 93       	push	r26
    303a:	bf 93       	push	r27
    303c:	ef 93       	push	r30
    303e:	ff 93       	push	r31
    3040:	e0 91 c8 21 	lds	r30, 0x21C8
    3044:	f0 91 c9 21 	lds	r31, 0x21C9
    3048:	30 97       	sbiw	r30, 0x00	; 0
    304a:	29 f0       	breq	.+10     	; 0x3056 <__vector_52+0x3c>
    304c:	80 91 be 22 	lds	r24, 0x22BE
    3050:	90 91 bf 22 	lds	r25, 0x22BF
    3054:	19 95       	eicall
    3056:	ff 91       	pop	r31
    3058:	ef 91       	pop	r30
    305a:	bf 91       	pop	r27
    305c:	af 91       	pop	r26
    305e:	9f 91       	pop	r25
    3060:	8f 91       	pop	r24
    3062:	7f 91       	pop	r23
    3064:	6f 91       	pop	r22
    3066:	5f 91       	pop	r21
    3068:	4f 91       	pop	r20
    306a:	3f 91       	pop	r19
    306c:	2f 91       	pop	r18
    306e:	0f 90       	pop	r0
    3070:	0b be       	out	0x3b, r0	; 59
    3072:	0f 90       	pop	r0
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	0f 90       	pop	r0
    3078:	1f 90       	pop	r1
    307a:	18 95       	reti

0000307c <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    307c:	1f 92       	push	r1
    307e:	0f 92       	push	r0
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	0f 92       	push	r0
    3084:	11 24       	eor	r1, r1
    3086:	0b b6       	in	r0, 0x3b	; 59
    3088:	0f 92       	push	r0
    308a:	2f 93       	push	r18
    308c:	3f 93       	push	r19
    308e:	4f 93       	push	r20
    3090:	5f 93       	push	r21
    3092:	6f 93       	push	r22
    3094:	7f 93       	push	r23
    3096:	8f 93       	push	r24
    3098:	9f 93       	push	r25
    309a:	af 93       	push	r26
    309c:	bf 93       	push	r27
    309e:	ef 93       	push	r30
    30a0:	ff 93       	push	r31
    30a2:	e0 91 ca 21 	lds	r30, 0x21CA
    30a6:	f0 91 cb 21 	lds	r31, 0x21CB
    30aa:	30 97       	sbiw	r30, 0x00	; 0
    30ac:	29 f0       	breq	.+10     	; 0x30b8 <__vector_53+0x3c>
    30ae:	80 91 c0 22 	lds	r24, 0x22C0
    30b2:	90 91 c1 22 	lds	r25, 0x22C1
    30b6:	19 95       	eicall
    30b8:	ff 91       	pop	r31
    30ba:	ef 91       	pop	r30
    30bc:	bf 91       	pop	r27
    30be:	af 91       	pop	r26
    30c0:	9f 91       	pop	r25
    30c2:	8f 91       	pop	r24
    30c4:	7f 91       	pop	r23
    30c6:	6f 91       	pop	r22
    30c8:	5f 91       	pop	r21
    30ca:	4f 91       	pop	r20
    30cc:	3f 91       	pop	r19
    30ce:	2f 91       	pop	r18
    30d0:	0f 90       	pop	r0
    30d2:	0b be       	out	0x3b, r0	; 59
    30d4:	0f 90       	pop	r0
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	0f 90       	pop	r0
    30da:	1f 90       	pop	r1
    30dc:	18 95       	reti

000030de <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    30de:	1f 92       	push	r1
    30e0:	0f 92       	push	r0
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	0f 92       	push	r0
    30e6:	11 24       	eor	r1, r1
    30e8:	0b b6       	in	r0, 0x3b	; 59
    30ea:	0f 92       	push	r0
    30ec:	2f 93       	push	r18
    30ee:	3f 93       	push	r19
    30f0:	4f 93       	push	r20
    30f2:	5f 93       	push	r21
    30f4:	6f 93       	push	r22
    30f6:	7f 93       	push	r23
    30f8:	8f 93       	push	r24
    30fa:	9f 93       	push	r25
    30fc:	af 93       	push	r26
    30fe:	bf 93       	push	r27
    3100:	ef 93       	push	r30
    3102:	ff 93       	push	r31
    3104:	e0 91 cc 21 	lds	r30, 0x21CC
    3108:	f0 91 cd 21 	lds	r31, 0x21CD
    310c:	30 97       	sbiw	r30, 0x00	; 0
    310e:	29 f0       	breq	.+10     	; 0x311a <__vector_54+0x3c>
    3110:	80 91 c2 22 	lds	r24, 0x22C2
    3114:	90 91 c3 22 	lds	r25, 0x22C3
    3118:	19 95       	eicall
    311a:	ff 91       	pop	r31
    311c:	ef 91       	pop	r30
    311e:	bf 91       	pop	r27
    3120:	af 91       	pop	r26
    3122:	9f 91       	pop	r25
    3124:	8f 91       	pop	r24
    3126:	7f 91       	pop	r23
    3128:	6f 91       	pop	r22
    312a:	5f 91       	pop	r21
    312c:	4f 91       	pop	r20
    312e:	3f 91       	pop	r19
    3130:	2f 91       	pop	r18
    3132:	0f 90       	pop	r0
    3134:	0b be       	out	0x3b, r0	; 59
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti

00003140 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    3140:	1f 92       	push	r1
    3142:	0f 92       	push	r0
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	0f 92       	push	r0
    3148:	11 24       	eor	r1, r1
    314a:	0b b6       	in	r0, 0x3b	; 59
    314c:	0f 92       	push	r0
    314e:	2f 93       	push	r18
    3150:	3f 93       	push	r19
    3152:	4f 93       	push	r20
    3154:	5f 93       	push	r21
    3156:	6f 93       	push	r22
    3158:	7f 93       	push	r23
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	af 93       	push	r26
    3160:	bf 93       	push	r27
    3162:	ef 93       	push	r30
    3164:	ff 93       	push	r31
    3166:	e0 91 ce 21 	lds	r30, 0x21CE
    316a:	f0 91 cf 21 	lds	r31, 0x21CF
    316e:	30 97       	sbiw	r30, 0x00	; 0
    3170:	29 f0       	breq	.+10     	; 0x317c <__vector_55+0x3c>
    3172:	80 91 c4 22 	lds	r24, 0x22C4
    3176:	90 91 c5 22 	lds	r25, 0x22C5
    317a:	19 95       	eicall
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	bf 91       	pop	r27
    3182:	af 91       	pop	r26
    3184:	9f 91       	pop	r25
    3186:	8f 91       	pop	r24
    3188:	7f 91       	pop	r23
    318a:	6f 91       	pop	r22
    318c:	5f 91       	pop	r21
    318e:	4f 91       	pop	r20
    3190:	3f 91       	pop	r19
    3192:	2f 91       	pop	r18
    3194:	0f 90       	pop	r0
    3196:	0b be       	out	0x3b, r0	; 59
    3198:	0f 90       	pop	r0
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	0f 90       	pop	r0
    319e:	1f 90       	pop	r1
    31a0:	18 95       	reti

000031a2 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    31a2:	1f 92       	push	r1
    31a4:	0f 92       	push	r0
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	0f 92       	push	r0
    31aa:	11 24       	eor	r1, r1
    31ac:	0b b6       	in	r0, 0x3b	; 59
    31ae:	0f 92       	push	r0
    31b0:	2f 93       	push	r18
    31b2:	3f 93       	push	r19
    31b4:	4f 93       	push	r20
    31b6:	5f 93       	push	r21
    31b8:	6f 93       	push	r22
    31ba:	7f 93       	push	r23
    31bc:	8f 93       	push	r24
    31be:	9f 93       	push	r25
    31c0:	af 93       	push	r26
    31c2:	bf 93       	push	r27
    31c4:	ef 93       	push	r30
    31c6:	ff 93       	push	r31
    31c8:	e0 91 d0 21 	lds	r30, 0x21D0
    31cc:	f0 91 d1 21 	lds	r31, 0x21D1
    31d0:	30 97       	sbiw	r30, 0x00	; 0
    31d2:	29 f0       	breq	.+10     	; 0x31de <__vector_56+0x3c>
    31d4:	80 91 c6 22 	lds	r24, 0x22C6
    31d8:	90 91 c7 22 	lds	r25, 0x22C7
    31dc:	19 95       	eicall
    31de:	ff 91       	pop	r31
    31e0:	ef 91       	pop	r30
    31e2:	bf 91       	pop	r27
    31e4:	af 91       	pop	r26
    31e6:	9f 91       	pop	r25
    31e8:	8f 91       	pop	r24
    31ea:	7f 91       	pop	r23
    31ec:	6f 91       	pop	r22
    31ee:	5f 91       	pop	r21
    31f0:	4f 91       	pop	r20
    31f2:	3f 91       	pop	r19
    31f4:	2f 91       	pop	r18
    31f6:	0f 90       	pop	r0
    31f8:	0b be       	out	0x3b, r0	; 59
    31fa:	0f 90       	pop	r0
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	0f 90       	pop	r0
    3200:	1f 90       	pop	r1
    3202:	18 95       	reti

00003204 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    3204:	1f 92       	push	r1
    3206:	0f 92       	push	r0
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	0f 92       	push	r0
    320c:	11 24       	eor	r1, r1
    320e:	0b b6       	in	r0, 0x3b	; 59
    3210:	0f 92       	push	r0
    3212:	2f 93       	push	r18
    3214:	3f 93       	push	r19
    3216:	4f 93       	push	r20
    3218:	5f 93       	push	r21
    321a:	6f 93       	push	r22
    321c:	7f 93       	push	r23
    321e:	8f 93       	push	r24
    3220:	9f 93       	push	r25
    3222:	af 93       	push	r26
    3224:	bf 93       	push	r27
    3226:	ef 93       	push	r30
    3228:	ff 93       	push	r31
    322a:	e0 91 d2 21 	lds	r30, 0x21D2
    322e:	f0 91 d3 21 	lds	r31, 0x21D3
    3232:	30 97       	sbiw	r30, 0x00	; 0
    3234:	29 f0       	breq	.+10     	; 0x3240 <__vector_57+0x3c>
    3236:	80 91 c8 22 	lds	r24, 0x22C8
    323a:	90 91 c9 22 	lds	r25, 0x22C9
    323e:	19 95       	eicall
    3240:	ff 91       	pop	r31
    3242:	ef 91       	pop	r30
    3244:	bf 91       	pop	r27
    3246:	af 91       	pop	r26
    3248:	9f 91       	pop	r25
    324a:	8f 91       	pop	r24
    324c:	7f 91       	pop	r23
    324e:	6f 91       	pop	r22
    3250:	5f 91       	pop	r21
    3252:	4f 91       	pop	r20
    3254:	3f 91       	pop	r19
    3256:	2f 91       	pop	r18
    3258:	0f 90       	pop	r0
    325a:	0b be       	out	0x3b, r0	; 59
    325c:	0f 90       	pop	r0
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	0f 90       	pop	r0
    3262:	1f 90       	pop	r1
    3264:	18 95       	reti

00003266 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3266:	1f 92       	push	r1
    3268:	0f 92       	push	r0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	0b b6       	in	r0, 0x3b	; 59
    3272:	0f 92       	push	r0
    3274:	2f 93       	push	r18
    3276:	3f 93       	push	r19
    3278:	4f 93       	push	r20
    327a:	5f 93       	push	r21
    327c:	6f 93       	push	r22
    327e:	7f 93       	push	r23
    3280:	8f 93       	push	r24
    3282:	9f 93       	push	r25
    3284:	af 93       	push	r26
    3286:	bf 93       	push	r27
    3288:	ef 93       	push	r30
    328a:	ff 93       	push	r31
    328c:	e0 91 d4 21 	lds	r30, 0x21D4
    3290:	f0 91 d5 21 	lds	r31, 0x21D5
    3294:	30 97       	sbiw	r30, 0x00	; 0
    3296:	29 f0       	breq	.+10     	; 0x32a2 <__vector_58+0x3c>
    3298:	80 91 ca 22 	lds	r24, 0x22CA
    329c:	90 91 cb 22 	lds	r25, 0x22CB
    32a0:	19 95       	eicall
    32a2:	ff 91       	pop	r31
    32a4:	ef 91       	pop	r30
    32a6:	bf 91       	pop	r27
    32a8:	af 91       	pop	r26
    32aa:	9f 91       	pop	r25
    32ac:	8f 91       	pop	r24
    32ae:	7f 91       	pop	r23
    32b0:	6f 91       	pop	r22
    32b2:	5f 91       	pop	r21
    32b4:	4f 91       	pop	r20
    32b6:	3f 91       	pop	r19
    32b8:	2f 91       	pop	r18
    32ba:	0f 90       	pop	r0
    32bc:	0b be       	out	0x3b, r0	; 59
    32be:	0f 90       	pop	r0
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	0f 90       	pop	r0
    32c4:	1f 90       	pop	r1
    32c6:	18 95       	reti

000032c8 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    32c8:	1f 92       	push	r1
    32ca:	0f 92       	push	r0
    32cc:	0f b6       	in	r0, 0x3f	; 63
    32ce:	0f 92       	push	r0
    32d0:	11 24       	eor	r1, r1
    32d2:	0b b6       	in	r0, 0x3b	; 59
    32d4:	0f 92       	push	r0
    32d6:	2f 93       	push	r18
    32d8:	3f 93       	push	r19
    32da:	4f 93       	push	r20
    32dc:	5f 93       	push	r21
    32de:	6f 93       	push	r22
    32e0:	7f 93       	push	r23
    32e2:	8f 93       	push	r24
    32e4:	9f 93       	push	r25
    32e6:	af 93       	push	r26
    32e8:	bf 93       	push	r27
    32ea:	ef 93       	push	r30
    32ec:	ff 93       	push	r31
    32ee:	e0 91 d6 21 	lds	r30, 0x21D6
    32f2:	f0 91 d7 21 	lds	r31, 0x21D7
    32f6:	30 97       	sbiw	r30, 0x00	; 0
    32f8:	29 f0       	breq	.+10     	; 0x3304 <__vector_59+0x3c>
    32fa:	80 91 cc 22 	lds	r24, 0x22CC
    32fe:	90 91 cd 22 	lds	r25, 0x22CD
    3302:	19 95       	eicall
    3304:	ff 91       	pop	r31
    3306:	ef 91       	pop	r30
    3308:	bf 91       	pop	r27
    330a:	af 91       	pop	r26
    330c:	9f 91       	pop	r25
    330e:	8f 91       	pop	r24
    3310:	7f 91       	pop	r23
    3312:	6f 91       	pop	r22
    3314:	5f 91       	pop	r21
    3316:	4f 91       	pop	r20
    3318:	3f 91       	pop	r19
    331a:	2f 91       	pop	r18
    331c:	0f 90       	pop	r0
    331e:	0b be       	out	0x3b, r0	; 59
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	0f 90       	pop	r0
    3326:	1f 90       	pop	r1
    3328:	18 95       	reti

0000332a <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    332a:	1f 92       	push	r1
    332c:	0f 92       	push	r0
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	0f 92       	push	r0
    3332:	11 24       	eor	r1, r1
    3334:	0b b6       	in	r0, 0x3b	; 59
    3336:	0f 92       	push	r0
    3338:	2f 93       	push	r18
    333a:	3f 93       	push	r19
    333c:	4f 93       	push	r20
    333e:	5f 93       	push	r21
    3340:	6f 93       	push	r22
    3342:	7f 93       	push	r23
    3344:	8f 93       	push	r24
    3346:	9f 93       	push	r25
    3348:	af 93       	push	r26
    334a:	bf 93       	push	r27
    334c:	ef 93       	push	r30
    334e:	ff 93       	push	r31
    3350:	e0 91 d8 21 	lds	r30, 0x21D8
    3354:	f0 91 d9 21 	lds	r31, 0x21D9
    3358:	30 97       	sbiw	r30, 0x00	; 0
    335a:	29 f0       	breq	.+10     	; 0x3366 <__vector_60+0x3c>
    335c:	80 91 ce 22 	lds	r24, 0x22CE
    3360:	90 91 cf 22 	lds	r25, 0x22CF
    3364:	19 95       	eicall
    3366:	ff 91       	pop	r31
    3368:	ef 91       	pop	r30
    336a:	bf 91       	pop	r27
    336c:	af 91       	pop	r26
    336e:	9f 91       	pop	r25
    3370:	8f 91       	pop	r24
    3372:	7f 91       	pop	r23
    3374:	6f 91       	pop	r22
    3376:	5f 91       	pop	r21
    3378:	4f 91       	pop	r20
    337a:	3f 91       	pop	r19
    337c:	2f 91       	pop	r18
    337e:	0f 90       	pop	r0
    3380:	0b be       	out	0x3b, r0	; 59
    3382:	0f 90       	pop	r0
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	0f 90       	pop	r0
    3388:	1f 90       	pop	r1
    338a:	18 95       	reti

0000338c <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    338c:	1f 92       	push	r1
    338e:	0f 92       	push	r0
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	0f 92       	push	r0
    3394:	11 24       	eor	r1, r1
    3396:	0b b6       	in	r0, 0x3b	; 59
    3398:	0f 92       	push	r0
    339a:	2f 93       	push	r18
    339c:	3f 93       	push	r19
    339e:	4f 93       	push	r20
    33a0:	5f 93       	push	r21
    33a2:	6f 93       	push	r22
    33a4:	7f 93       	push	r23
    33a6:	8f 93       	push	r24
    33a8:	9f 93       	push	r25
    33aa:	af 93       	push	r26
    33ac:	bf 93       	push	r27
    33ae:	ef 93       	push	r30
    33b0:	ff 93       	push	r31
    33b2:	e0 91 da 21 	lds	r30, 0x21DA
    33b6:	f0 91 db 21 	lds	r31, 0x21DB
    33ba:	30 97       	sbiw	r30, 0x00	; 0
    33bc:	29 f0       	breq	.+10     	; 0x33c8 <__vector_61+0x3c>
    33be:	80 91 d0 22 	lds	r24, 0x22D0
    33c2:	90 91 d1 22 	lds	r25, 0x22D1
    33c6:	19 95       	eicall
    33c8:	ff 91       	pop	r31
    33ca:	ef 91       	pop	r30
    33cc:	bf 91       	pop	r27
    33ce:	af 91       	pop	r26
    33d0:	9f 91       	pop	r25
    33d2:	8f 91       	pop	r24
    33d4:	7f 91       	pop	r23
    33d6:	6f 91       	pop	r22
    33d8:	5f 91       	pop	r21
    33da:	4f 91       	pop	r20
    33dc:	3f 91       	pop	r19
    33de:	2f 91       	pop	r18
    33e0:	0f 90       	pop	r0
    33e2:	0b be       	out	0x3b, r0	; 59
    33e4:	0f 90       	pop	r0
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	0f 90       	pop	r0
    33ea:	1f 90       	pop	r1
    33ec:	18 95       	reti

000033ee <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    33ee:	1f 92       	push	r1
    33f0:	0f 92       	push	r0
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	0f 92       	push	r0
    33f6:	11 24       	eor	r1, r1
    33f8:	0b b6       	in	r0, 0x3b	; 59
    33fa:	0f 92       	push	r0
    33fc:	2f 93       	push	r18
    33fe:	3f 93       	push	r19
    3400:	4f 93       	push	r20
    3402:	5f 93       	push	r21
    3404:	6f 93       	push	r22
    3406:	7f 93       	push	r23
    3408:	8f 93       	push	r24
    340a:	9f 93       	push	r25
    340c:	af 93       	push	r26
    340e:	bf 93       	push	r27
    3410:	ef 93       	push	r30
    3412:	ff 93       	push	r31
    3414:	e0 91 dc 21 	lds	r30, 0x21DC
    3418:	f0 91 dd 21 	lds	r31, 0x21DD
    341c:	30 97       	sbiw	r30, 0x00	; 0
    341e:	29 f0       	breq	.+10     	; 0x342a <__vector_62+0x3c>
    3420:	80 91 d2 22 	lds	r24, 0x22D2
    3424:	90 91 d3 22 	lds	r25, 0x22D3
    3428:	19 95       	eicall
    342a:	ff 91       	pop	r31
    342c:	ef 91       	pop	r30
    342e:	bf 91       	pop	r27
    3430:	af 91       	pop	r26
    3432:	9f 91       	pop	r25
    3434:	8f 91       	pop	r24
    3436:	7f 91       	pop	r23
    3438:	6f 91       	pop	r22
    343a:	5f 91       	pop	r21
    343c:	4f 91       	pop	r20
    343e:	3f 91       	pop	r19
    3440:	2f 91       	pop	r18
    3442:	0f 90       	pop	r0
    3444:	0b be       	out	0x3b, r0	; 59
    3446:	0f 90       	pop	r0
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	0f 90       	pop	r0
    344c:	1f 90       	pop	r1
    344e:	18 95       	reti

00003450 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3450:	1f 92       	push	r1
    3452:	0f 92       	push	r0
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	0f 92       	push	r0
    3458:	11 24       	eor	r1, r1
    345a:	0b b6       	in	r0, 0x3b	; 59
    345c:	0f 92       	push	r0
    345e:	2f 93       	push	r18
    3460:	3f 93       	push	r19
    3462:	4f 93       	push	r20
    3464:	5f 93       	push	r21
    3466:	6f 93       	push	r22
    3468:	7f 93       	push	r23
    346a:	8f 93       	push	r24
    346c:	9f 93       	push	r25
    346e:	af 93       	push	r26
    3470:	bf 93       	push	r27
    3472:	ef 93       	push	r30
    3474:	ff 93       	push	r31
    3476:	e0 91 de 21 	lds	r30, 0x21DE
    347a:	f0 91 df 21 	lds	r31, 0x21DF
    347e:	30 97       	sbiw	r30, 0x00	; 0
    3480:	29 f0       	breq	.+10     	; 0x348c <__vector_63+0x3c>
    3482:	80 91 d4 22 	lds	r24, 0x22D4
    3486:	90 91 d5 22 	lds	r25, 0x22D5
    348a:	19 95       	eicall
    348c:	ff 91       	pop	r31
    348e:	ef 91       	pop	r30
    3490:	bf 91       	pop	r27
    3492:	af 91       	pop	r26
    3494:	9f 91       	pop	r25
    3496:	8f 91       	pop	r24
    3498:	7f 91       	pop	r23
    349a:	6f 91       	pop	r22
    349c:	5f 91       	pop	r21
    349e:	4f 91       	pop	r20
    34a0:	3f 91       	pop	r19
    34a2:	2f 91       	pop	r18
    34a4:	0f 90       	pop	r0
    34a6:	0b be       	out	0x3b, r0	; 59
    34a8:	0f 90       	pop	r0
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	0f 90       	pop	r0
    34ae:	1f 90       	pop	r1
    34b0:	18 95       	reti

000034b2 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    34b2:	1f 92       	push	r1
    34b4:	0f 92       	push	r0
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	0f 92       	push	r0
    34ba:	11 24       	eor	r1, r1
    34bc:	0b b6       	in	r0, 0x3b	; 59
    34be:	0f 92       	push	r0
    34c0:	2f 93       	push	r18
    34c2:	3f 93       	push	r19
    34c4:	4f 93       	push	r20
    34c6:	5f 93       	push	r21
    34c8:	6f 93       	push	r22
    34ca:	7f 93       	push	r23
    34cc:	8f 93       	push	r24
    34ce:	9f 93       	push	r25
    34d0:	af 93       	push	r26
    34d2:	bf 93       	push	r27
    34d4:	ef 93       	push	r30
    34d6:	ff 93       	push	r31
    34d8:	e0 91 e0 21 	lds	r30, 0x21E0
    34dc:	f0 91 e1 21 	lds	r31, 0x21E1
    34e0:	30 97       	sbiw	r30, 0x00	; 0
    34e2:	29 f0       	breq	.+10     	; 0x34ee <__vector_64+0x3c>
    34e4:	80 91 d6 22 	lds	r24, 0x22D6
    34e8:	90 91 d7 22 	lds	r25, 0x22D7
    34ec:	19 95       	eicall
    34ee:	ff 91       	pop	r31
    34f0:	ef 91       	pop	r30
    34f2:	bf 91       	pop	r27
    34f4:	af 91       	pop	r26
    34f6:	9f 91       	pop	r25
    34f8:	8f 91       	pop	r24
    34fa:	7f 91       	pop	r23
    34fc:	6f 91       	pop	r22
    34fe:	5f 91       	pop	r21
    3500:	4f 91       	pop	r20
    3502:	3f 91       	pop	r19
    3504:	2f 91       	pop	r18
    3506:	0f 90       	pop	r0
    3508:	0b be       	out	0x3b, r0	; 59
    350a:	0f 90       	pop	r0
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	0f 90       	pop	r0
    3510:	1f 90       	pop	r1
    3512:	18 95       	reti

00003514 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3514:	1f 92       	push	r1
    3516:	0f 92       	push	r0
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	0f 92       	push	r0
    351c:	11 24       	eor	r1, r1
    351e:	0b b6       	in	r0, 0x3b	; 59
    3520:	0f 92       	push	r0
    3522:	2f 93       	push	r18
    3524:	3f 93       	push	r19
    3526:	4f 93       	push	r20
    3528:	5f 93       	push	r21
    352a:	6f 93       	push	r22
    352c:	7f 93       	push	r23
    352e:	8f 93       	push	r24
    3530:	9f 93       	push	r25
    3532:	af 93       	push	r26
    3534:	bf 93       	push	r27
    3536:	ef 93       	push	r30
    3538:	ff 93       	push	r31
    353a:	e0 91 e2 21 	lds	r30, 0x21E2
    353e:	f0 91 e3 21 	lds	r31, 0x21E3
    3542:	30 97       	sbiw	r30, 0x00	; 0
    3544:	29 f0       	breq	.+10     	; 0x3550 <__vector_65+0x3c>
    3546:	80 91 d8 22 	lds	r24, 0x22D8
    354a:	90 91 d9 22 	lds	r25, 0x22D9
    354e:	19 95       	eicall
    3550:	ff 91       	pop	r31
    3552:	ef 91       	pop	r30
    3554:	bf 91       	pop	r27
    3556:	af 91       	pop	r26
    3558:	9f 91       	pop	r25
    355a:	8f 91       	pop	r24
    355c:	7f 91       	pop	r23
    355e:	6f 91       	pop	r22
    3560:	5f 91       	pop	r21
    3562:	4f 91       	pop	r20
    3564:	3f 91       	pop	r19
    3566:	2f 91       	pop	r18
    3568:	0f 90       	pop	r0
    356a:	0b be       	out	0x3b, r0	; 59
    356c:	0f 90       	pop	r0
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	0f 90       	pop	r0
    3572:	1f 90       	pop	r1
    3574:	18 95       	reti

00003576 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3576:	1f 92       	push	r1
    3578:	0f 92       	push	r0
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	0f 92       	push	r0
    357e:	11 24       	eor	r1, r1
    3580:	0b b6       	in	r0, 0x3b	; 59
    3582:	0f 92       	push	r0
    3584:	2f 93       	push	r18
    3586:	3f 93       	push	r19
    3588:	4f 93       	push	r20
    358a:	5f 93       	push	r21
    358c:	6f 93       	push	r22
    358e:	7f 93       	push	r23
    3590:	8f 93       	push	r24
    3592:	9f 93       	push	r25
    3594:	af 93       	push	r26
    3596:	bf 93       	push	r27
    3598:	ef 93       	push	r30
    359a:	ff 93       	push	r31
    359c:	e0 91 e4 21 	lds	r30, 0x21E4
    35a0:	f0 91 e5 21 	lds	r31, 0x21E5
    35a4:	30 97       	sbiw	r30, 0x00	; 0
    35a6:	29 f0       	breq	.+10     	; 0x35b2 <__vector_66+0x3c>
    35a8:	80 91 da 22 	lds	r24, 0x22DA
    35ac:	90 91 db 22 	lds	r25, 0x22DB
    35b0:	19 95       	eicall
    35b2:	ff 91       	pop	r31
    35b4:	ef 91       	pop	r30
    35b6:	bf 91       	pop	r27
    35b8:	af 91       	pop	r26
    35ba:	9f 91       	pop	r25
    35bc:	8f 91       	pop	r24
    35be:	7f 91       	pop	r23
    35c0:	6f 91       	pop	r22
    35c2:	5f 91       	pop	r21
    35c4:	4f 91       	pop	r20
    35c6:	3f 91       	pop	r19
    35c8:	2f 91       	pop	r18
    35ca:	0f 90       	pop	r0
    35cc:	0b be       	out	0x3b, r0	; 59
    35ce:	0f 90       	pop	r0
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	0f 90       	pop	r0
    35d4:	1f 90       	pop	r1
    35d6:	18 95       	reti

000035d8 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    35d8:	1f 92       	push	r1
    35da:	0f 92       	push	r0
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	0f 92       	push	r0
    35e0:	11 24       	eor	r1, r1
    35e2:	0b b6       	in	r0, 0x3b	; 59
    35e4:	0f 92       	push	r0
    35e6:	2f 93       	push	r18
    35e8:	3f 93       	push	r19
    35ea:	4f 93       	push	r20
    35ec:	5f 93       	push	r21
    35ee:	6f 93       	push	r22
    35f0:	7f 93       	push	r23
    35f2:	8f 93       	push	r24
    35f4:	9f 93       	push	r25
    35f6:	af 93       	push	r26
    35f8:	bf 93       	push	r27
    35fa:	ef 93       	push	r30
    35fc:	ff 93       	push	r31
    35fe:	e0 91 e6 21 	lds	r30, 0x21E6
    3602:	f0 91 e7 21 	lds	r31, 0x21E7
    3606:	30 97       	sbiw	r30, 0x00	; 0
    3608:	29 f0       	breq	.+10     	; 0x3614 <__vector_67+0x3c>
    360a:	80 91 dc 22 	lds	r24, 0x22DC
    360e:	90 91 dd 22 	lds	r25, 0x22DD
    3612:	19 95       	eicall
    3614:	ff 91       	pop	r31
    3616:	ef 91       	pop	r30
    3618:	bf 91       	pop	r27
    361a:	af 91       	pop	r26
    361c:	9f 91       	pop	r25
    361e:	8f 91       	pop	r24
    3620:	7f 91       	pop	r23
    3622:	6f 91       	pop	r22
    3624:	5f 91       	pop	r21
    3626:	4f 91       	pop	r20
    3628:	3f 91       	pop	r19
    362a:	2f 91       	pop	r18
    362c:	0f 90       	pop	r0
    362e:	0b be       	out	0x3b, r0	; 59
    3630:	0f 90       	pop	r0
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	0f 90       	pop	r0
    3636:	1f 90       	pop	r1
    3638:	18 95       	reti

0000363a <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    363a:	1f 92       	push	r1
    363c:	0f 92       	push	r0
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	0f 92       	push	r0
    3642:	11 24       	eor	r1, r1
    3644:	0b b6       	in	r0, 0x3b	; 59
    3646:	0f 92       	push	r0
    3648:	2f 93       	push	r18
    364a:	3f 93       	push	r19
    364c:	4f 93       	push	r20
    364e:	5f 93       	push	r21
    3650:	6f 93       	push	r22
    3652:	7f 93       	push	r23
    3654:	8f 93       	push	r24
    3656:	9f 93       	push	r25
    3658:	af 93       	push	r26
    365a:	bf 93       	push	r27
    365c:	ef 93       	push	r30
    365e:	ff 93       	push	r31
    3660:	e0 91 e8 21 	lds	r30, 0x21E8
    3664:	f0 91 e9 21 	lds	r31, 0x21E9
    3668:	30 97       	sbiw	r30, 0x00	; 0
    366a:	29 f0       	breq	.+10     	; 0x3676 <__vector_68+0x3c>
    366c:	80 91 de 22 	lds	r24, 0x22DE
    3670:	90 91 df 22 	lds	r25, 0x22DF
    3674:	19 95       	eicall
    3676:	ff 91       	pop	r31
    3678:	ef 91       	pop	r30
    367a:	bf 91       	pop	r27
    367c:	af 91       	pop	r26
    367e:	9f 91       	pop	r25
    3680:	8f 91       	pop	r24
    3682:	7f 91       	pop	r23
    3684:	6f 91       	pop	r22
    3686:	5f 91       	pop	r21
    3688:	4f 91       	pop	r20
    368a:	3f 91       	pop	r19
    368c:	2f 91       	pop	r18
    368e:	0f 90       	pop	r0
    3690:	0b be       	out	0x3b, r0	; 59
    3692:	0f 90       	pop	r0
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	0f 90       	pop	r0
    3698:	1f 90       	pop	r1
    369a:	18 95       	reti

0000369c <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	11 24       	eor	r1, r1
    36a6:	0b b6       	in	r0, 0x3b	; 59
    36a8:	0f 92       	push	r0
    36aa:	2f 93       	push	r18
    36ac:	3f 93       	push	r19
    36ae:	4f 93       	push	r20
    36b0:	5f 93       	push	r21
    36b2:	6f 93       	push	r22
    36b4:	7f 93       	push	r23
    36b6:	8f 93       	push	r24
    36b8:	9f 93       	push	r25
    36ba:	af 93       	push	r26
    36bc:	bf 93       	push	r27
    36be:	ef 93       	push	r30
    36c0:	ff 93       	push	r31
    36c2:	e0 91 ea 21 	lds	r30, 0x21EA
    36c6:	f0 91 eb 21 	lds	r31, 0x21EB
    36ca:	30 97       	sbiw	r30, 0x00	; 0
    36cc:	29 f0       	breq	.+10     	; 0x36d8 <__vector_69+0x3c>
    36ce:	80 91 e0 22 	lds	r24, 0x22E0
    36d2:	90 91 e1 22 	lds	r25, 0x22E1
    36d6:	19 95       	eicall
    36d8:	ff 91       	pop	r31
    36da:	ef 91       	pop	r30
    36dc:	bf 91       	pop	r27
    36de:	af 91       	pop	r26
    36e0:	9f 91       	pop	r25
    36e2:	8f 91       	pop	r24
    36e4:	7f 91       	pop	r23
    36e6:	6f 91       	pop	r22
    36e8:	5f 91       	pop	r21
    36ea:	4f 91       	pop	r20
    36ec:	3f 91       	pop	r19
    36ee:	2f 91       	pop	r18
    36f0:	0f 90       	pop	r0
    36f2:	0b be       	out	0x3b, r0	; 59
    36f4:	0f 90       	pop	r0
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	0f 90       	pop	r0
    36fa:	1f 90       	pop	r1
    36fc:	18 95       	reti

000036fe <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    36fe:	1f 92       	push	r1
    3700:	0f 92       	push	r0
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	0f 92       	push	r0
    3706:	11 24       	eor	r1, r1
    3708:	0b b6       	in	r0, 0x3b	; 59
    370a:	0f 92       	push	r0
    370c:	2f 93       	push	r18
    370e:	3f 93       	push	r19
    3710:	4f 93       	push	r20
    3712:	5f 93       	push	r21
    3714:	6f 93       	push	r22
    3716:	7f 93       	push	r23
    3718:	8f 93       	push	r24
    371a:	9f 93       	push	r25
    371c:	af 93       	push	r26
    371e:	bf 93       	push	r27
    3720:	ef 93       	push	r30
    3722:	ff 93       	push	r31
    3724:	e0 91 ec 21 	lds	r30, 0x21EC
    3728:	f0 91 ed 21 	lds	r31, 0x21ED
    372c:	30 97       	sbiw	r30, 0x00	; 0
    372e:	29 f0       	breq	.+10     	; 0x373a <__vector_70+0x3c>
    3730:	80 91 e2 22 	lds	r24, 0x22E2
    3734:	90 91 e3 22 	lds	r25, 0x22E3
    3738:	19 95       	eicall
    373a:	ff 91       	pop	r31
    373c:	ef 91       	pop	r30
    373e:	bf 91       	pop	r27
    3740:	af 91       	pop	r26
    3742:	9f 91       	pop	r25
    3744:	8f 91       	pop	r24
    3746:	7f 91       	pop	r23
    3748:	6f 91       	pop	r22
    374a:	5f 91       	pop	r21
    374c:	4f 91       	pop	r20
    374e:	3f 91       	pop	r19
    3750:	2f 91       	pop	r18
    3752:	0f 90       	pop	r0
    3754:	0b be       	out	0x3b, r0	; 59
    3756:	0f 90       	pop	r0
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	0f 90       	pop	r0
    375c:	1f 90       	pop	r1
    375e:	18 95       	reti

00003760 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3760:	1f 92       	push	r1
    3762:	0f 92       	push	r0
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	0f 92       	push	r0
    3768:	11 24       	eor	r1, r1
    376a:	0b b6       	in	r0, 0x3b	; 59
    376c:	0f 92       	push	r0
    376e:	2f 93       	push	r18
    3770:	3f 93       	push	r19
    3772:	4f 93       	push	r20
    3774:	5f 93       	push	r21
    3776:	6f 93       	push	r22
    3778:	7f 93       	push	r23
    377a:	8f 93       	push	r24
    377c:	9f 93       	push	r25
    377e:	af 93       	push	r26
    3780:	bf 93       	push	r27
    3782:	ef 93       	push	r30
    3784:	ff 93       	push	r31
    3786:	e0 91 ee 21 	lds	r30, 0x21EE
    378a:	f0 91 ef 21 	lds	r31, 0x21EF
    378e:	30 97       	sbiw	r30, 0x00	; 0
    3790:	29 f0       	breq	.+10     	; 0x379c <__vector_71+0x3c>
    3792:	80 91 e4 22 	lds	r24, 0x22E4
    3796:	90 91 e5 22 	lds	r25, 0x22E5
    379a:	19 95       	eicall
    379c:	ff 91       	pop	r31
    379e:	ef 91       	pop	r30
    37a0:	bf 91       	pop	r27
    37a2:	af 91       	pop	r26
    37a4:	9f 91       	pop	r25
    37a6:	8f 91       	pop	r24
    37a8:	7f 91       	pop	r23
    37aa:	6f 91       	pop	r22
    37ac:	5f 91       	pop	r21
    37ae:	4f 91       	pop	r20
    37b0:	3f 91       	pop	r19
    37b2:	2f 91       	pop	r18
    37b4:	0f 90       	pop	r0
    37b6:	0b be       	out	0x3b, r0	; 59
    37b8:	0f 90       	pop	r0
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	0f 90       	pop	r0
    37be:	1f 90       	pop	r1
    37c0:	18 95       	reti

000037c2 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    37c2:	1f 92       	push	r1
    37c4:	0f 92       	push	r0
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	0f 92       	push	r0
    37ca:	11 24       	eor	r1, r1
    37cc:	0b b6       	in	r0, 0x3b	; 59
    37ce:	0f 92       	push	r0
    37d0:	2f 93       	push	r18
    37d2:	3f 93       	push	r19
    37d4:	4f 93       	push	r20
    37d6:	5f 93       	push	r21
    37d8:	6f 93       	push	r22
    37da:	7f 93       	push	r23
    37dc:	8f 93       	push	r24
    37de:	9f 93       	push	r25
    37e0:	af 93       	push	r26
    37e2:	bf 93       	push	r27
    37e4:	ef 93       	push	r30
    37e6:	ff 93       	push	r31
    37e8:	e0 91 f0 21 	lds	r30, 0x21F0
    37ec:	f0 91 f1 21 	lds	r31, 0x21F1
    37f0:	30 97       	sbiw	r30, 0x00	; 0
    37f2:	29 f0       	breq	.+10     	; 0x37fe <__vector_72+0x3c>
    37f4:	80 91 e6 22 	lds	r24, 0x22E6
    37f8:	90 91 e7 22 	lds	r25, 0x22E7
    37fc:	19 95       	eicall
    37fe:	ff 91       	pop	r31
    3800:	ef 91       	pop	r30
    3802:	bf 91       	pop	r27
    3804:	af 91       	pop	r26
    3806:	9f 91       	pop	r25
    3808:	8f 91       	pop	r24
    380a:	7f 91       	pop	r23
    380c:	6f 91       	pop	r22
    380e:	5f 91       	pop	r21
    3810:	4f 91       	pop	r20
    3812:	3f 91       	pop	r19
    3814:	2f 91       	pop	r18
    3816:	0f 90       	pop	r0
    3818:	0b be       	out	0x3b, r0	; 59
    381a:	0f 90       	pop	r0
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	0f 90       	pop	r0
    3820:	1f 90       	pop	r1
    3822:	18 95       	reti

00003824 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3824:	1f 92       	push	r1
    3826:	0f 92       	push	r0
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	0f 92       	push	r0
    382c:	11 24       	eor	r1, r1
    382e:	0b b6       	in	r0, 0x3b	; 59
    3830:	0f 92       	push	r0
    3832:	2f 93       	push	r18
    3834:	3f 93       	push	r19
    3836:	4f 93       	push	r20
    3838:	5f 93       	push	r21
    383a:	6f 93       	push	r22
    383c:	7f 93       	push	r23
    383e:	8f 93       	push	r24
    3840:	9f 93       	push	r25
    3842:	af 93       	push	r26
    3844:	bf 93       	push	r27
    3846:	ef 93       	push	r30
    3848:	ff 93       	push	r31
    384a:	e0 91 f2 21 	lds	r30, 0x21F2
    384e:	f0 91 f3 21 	lds	r31, 0x21F3
    3852:	30 97       	sbiw	r30, 0x00	; 0
    3854:	29 f0       	breq	.+10     	; 0x3860 <__vector_73+0x3c>
    3856:	80 91 e8 22 	lds	r24, 0x22E8
    385a:	90 91 e9 22 	lds	r25, 0x22E9
    385e:	19 95       	eicall
    3860:	ff 91       	pop	r31
    3862:	ef 91       	pop	r30
    3864:	bf 91       	pop	r27
    3866:	af 91       	pop	r26
    3868:	9f 91       	pop	r25
    386a:	8f 91       	pop	r24
    386c:	7f 91       	pop	r23
    386e:	6f 91       	pop	r22
    3870:	5f 91       	pop	r21
    3872:	4f 91       	pop	r20
    3874:	3f 91       	pop	r19
    3876:	2f 91       	pop	r18
    3878:	0f 90       	pop	r0
    387a:	0b be       	out	0x3b, r0	; 59
    387c:	0f 90       	pop	r0
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	0f 90       	pop	r0
    3882:	1f 90       	pop	r1
    3884:	18 95       	reti

00003886 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3886:	1f 92       	push	r1
    3888:	0f 92       	push	r0
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	0f 92       	push	r0
    388e:	11 24       	eor	r1, r1
    3890:	0b b6       	in	r0, 0x3b	; 59
    3892:	0f 92       	push	r0
    3894:	2f 93       	push	r18
    3896:	3f 93       	push	r19
    3898:	4f 93       	push	r20
    389a:	5f 93       	push	r21
    389c:	6f 93       	push	r22
    389e:	7f 93       	push	r23
    38a0:	8f 93       	push	r24
    38a2:	9f 93       	push	r25
    38a4:	af 93       	push	r26
    38a6:	bf 93       	push	r27
    38a8:	ef 93       	push	r30
    38aa:	ff 93       	push	r31
    38ac:	e0 91 f4 21 	lds	r30, 0x21F4
    38b0:	f0 91 f5 21 	lds	r31, 0x21F5
    38b4:	30 97       	sbiw	r30, 0x00	; 0
    38b6:	29 f0       	breq	.+10     	; 0x38c2 <__vector_74+0x3c>
    38b8:	80 91 ea 22 	lds	r24, 0x22EA
    38bc:	90 91 eb 22 	lds	r25, 0x22EB
    38c0:	19 95       	eicall
    38c2:	ff 91       	pop	r31
    38c4:	ef 91       	pop	r30
    38c6:	bf 91       	pop	r27
    38c8:	af 91       	pop	r26
    38ca:	9f 91       	pop	r25
    38cc:	8f 91       	pop	r24
    38ce:	7f 91       	pop	r23
    38d0:	6f 91       	pop	r22
    38d2:	5f 91       	pop	r21
    38d4:	4f 91       	pop	r20
    38d6:	3f 91       	pop	r19
    38d8:	2f 91       	pop	r18
    38da:	0f 90       	pop	r0
    38dc:	0b be       	out	0x3b, r0	; 59
    38de:	0f 90       	pop	r0
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	0f 90       	pop	r0
    38e4:	1f 90       	pop	r1
    38e6:	18 95       	reti

000038e8 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    38e8:	1f 92       	push	r1
    38ea:	0f 92       	push	r0
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	0f 92       	push	r0
    38f0:	11 24       	eor	r1, r1
    38f2:	0b b6       	in	r0, 0x3b	; 59
    38f4:	0f 92       	push	r0
    38f6:	2f 93       	push	r18
    38f8:	3f 93       	push	r19
    38fa:	4f 93       	push	r20
    38fc:	5f 93       	push	r21
    38fe:	6f 93       	push	r22
    3900:	7f 93       	push	r23
    3902:	8f 93       	push	r24
    3904:	9f 93       	push	r25
    3906:	af 93       	push	r26
    3908:	bf 93       	push	r27
    390a:	ef 93       	push	r30
    390c:	ff 93       	push	r31
    390e:	e0 91 fa 21 	lds	r30, 0x21FA
    3912:	f0 91 fb 21 	lds	r31, 0x21FB
    3916:	30 97       	sbiw	r30, 0x00	; 0
    3918:	29 f0       	breq	.+10     	; 0x3924 <__vector_77+0x3c>
    391a:	80 91 f0 22 	lds	r24, 0x22F0
    391e:	90 91 f1 22 	lds	r25, 0x22F1
    3922:	19 95       	eicall
    3924:	ff 91       	pop	r31
    3926:	ef 91       	pop	r30
    3928:	bf 91       	pop	r27
    392a:	af 91       	pop	r26
    392c:	9f 91       	pop	r25
    392e:	8f 91       	pop	r24
    3930:	7f 91       	pop	r23
    3932:	6f 91       	pop	r22
    3934:	5f 91       	pop	r21
    3936:	4f 91       	pop	r20
    3938:	3f 91       	pop	r19
    393a:	2f 91       	pop	r18
    393c:	0f 90       	pop	r0
    393e:	0b be       	out	0x3b, r0	; 59
    3940:	0f 90       	pop	r0
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	0f 90       	pop	r0
    3946:	1f 90       	pop	r1
    3948:	18 95       	reti

0000394a <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    394a:	1f 92       	push	r1
    394c:	0f 92       	push	r0
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	0f 92       	push	r0
    3952:	11 24       	eor	r1, r1
    3954:	0b b6       	in	r0, 0x3b	; 59
    3956:	0f 92       	push	r0
    3958:	2f 93       	push	r18
    395a:	3f 93       	push	r19
    395c:	4f 93       	push	r20
    395e:	5f 93       	push	r21
    3960:	6f 93       	push	r22
    3962:	7f 93       	push	r23
    3964:	8f 93       	push	r24
    3966:	9f 93       	push	r25
    3968:	af 93       	push	r26
    396a:	bf 93       	push	r27
    396c:	ef 93       	push	r30
    396e:	ff 93       	push	r31
    3970:	e0 91 fc 21 	lds	r30, 0x21FC
    3974:	f0 91 fd 21 	lds	r31, 0x21FD
    3978:	30 97       	sbiw	r30, 0x00	; 0
    397a:	29 f0       	breq	.+10     	; 0x3986 <__vector_78+0x3c>
    397c:	80 91 f2 22 	lds	r24, 0x22F2
    3980:	90 91 f3 22 	lds	r25, 0x22F3
    3984:	19 95       	eicall
    3986:	ff 91       	pop	r31
    3988:	ef 91       	pop	r30
    398a:	bf 91       	pop	r27
    398c:	af 91       	pop	r26
    398e:	9f 91       	pop	r25
    3990:	8f 91       	pop	r24
    3992:	7f 91       	pop	r23
    3994:	6f 91       	pop	r22
    3996:	5f 91       	pop	r21
    3998:	4f 91       	pop	r20
    399a:	3f 91       	pop	r19
    399c:	2f 91       	pop	r18
    399e:	0f 90       	pop	r0
    39a0:	0b be       	out	0x3b, r0	; 59
    39a2:	0f 90       	pop	r0
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	0f 90       	pop	r0
    39a8:	1f 90       	pop	r1
    39aa:	18 95       	reti

000039ac <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    39ac:	1f 92       	push	r1
    39ae:	0f 92       	push	r0
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	0f 92       	push	r0
    39b4:	11 24       	eor	r1, r1
    39b6:	0b b6       	in	r0, 0x3b	; 59
    39b8:	0f 92       	push	r0
    39ba:	2f 93       	push	r18
    39bc:	3f 93       	push	r19
    39be:	4f 93       	push	r20
    39c0:	5f 93       	push	r21
    39c2:	6f 93       	push	r22
    39c4:	7f 93       	push	r23
    39c6:	8f 93       	push	r24
    39c8:	9f 93       	push	r25
    39ca:	af 93       	push	r26
    39cc:	bf 93       	push	r27
    39ce:	ef 93       	push	r30
    39d0:	ff 93       	push	r31
    39d2:	e0 91 fe 21 	lds	r30, 0x21FE
    39d6:	f0 91 ff 21 	lds	r31, 0x21FF
    39da:	30 97       	sbiw	r30, 0x00	; 0
    39dc:	29 f0       	breq	.+10     	; 0x39e8 <__vector_79+0x3c>
    39de:	80 91 f4 22 	lds	r24, 0x22F4
    39e2:	90 91 f5 22 	lds	r25, 0x22F5
    39e6:	19 95       	eicall
    39e8:	ff 91       	pop	r31
    39ea:	ef 91       	pop	r30
    39ec:	bf 91       	pop	r27
    39ee:	af 91       	pop	r26
    39f0:	9f 91       	pop	r25
    39f2:	8f 91       	pop	r24
    39f4:	7f 91       	pop	r23
    39f6:	6f 91       	pop	r22
    39f8:	5f 91       	pop	r21
    39fa:	4f 91       	pop	r20
    39fc:	3f 91       	pop	r19
    39fe:	2f 91       	pop	r18
    3a00:	0f 90       	pop	r0
    3a02:	0b be       	out	0x3b, r0	; 59
    3a04:	0f 90       	pop	r0
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	0f 90       	pop	r0
    3a0a:	1f 90       	pop	r1
    3a0c:	18 95       	reti

00003a0e <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    3a0e:	1f 92       	push	r1
    3a10:	0f 92       	push	r0
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	0f 92       	push	r0
    3a16:	11 24       	eor	r1, r1
    3a18:	0b b6       	in	r0, 0x3b	; 59
    3a1a:	0f 92       	push	r0
    3a1c:	2f 93       	push	r18
    3a1e:	3f 93       	push	r19
    3a20:	4f 93       	push	r20
    3a22:	5f 93       	push	r21
    3a24:	6f 93       	push	r22
    3a26:	7f 93       	push	r23
    3a28:	8f 93       	push	r24
    3a2a:	9f 93       	push	r25
    3a2c:	af 93       	push	r26
    3a2e:	bf 93       	push	r27
    3a30:	ef 93       	push	r30
    3a32:	ff 93       	push	r31
    3a34:	e0 91 00 22 	lds	r30, 0x2200
    3a38:	f0 91 01 22 	lds	r31, 0x2201
    3a3c:	30 97       	sbiw	r30, 0x00	; 0
    3a3e:	29 f0       	breq	.+10     	; 0x3a4a <__vector_80+0x3c>
    3a40:	80 91 f6 22 	lds	r24, 0x22F6
    3a44:	90 91 f7 22 	lds	r25, 0x22F7
    3a48:	19 95       	eicall
    3a4a:	ff 91       	pop	r31
    3a4c:	ef 91       	pop	r30
    3a4e:	bf 91       	pop	r27
    3a50:	af 91       	pop	r26
    3a52:	9f 91       	pop	r25
    3a54:	8f 91       	pop	r24
    3a56:	7f 91       	pop	r23
    3a58:	6f 91       	pop	r22
    3a5a:	5f 91       	pop	r21
    3a5c:	4f 91       	pop	r20
    3a5e:	3f 91       	pop	r19
    3a60:	2f 91       	pop	r18
    3a62:	0f 90       	pop	r0
    3a64:	0b be       	out	0x3b, r0	; 59
    3a66:	0f 90       	pop	r0
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	0f 90       	pop	r0
    3a6c:	1f 90       	pop	r1
    3a6e:	18 95       	reti

00003a70 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3a70:	1f 92       	push	r1
    3a72:	0f 92       	push	r0
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	0f 92       	push	r0
    3a78:	11 24       	eor	r1, r1
    3a7a:	0b b6       	in	r0, 0x3b	; 59
    3a7c:	0f 92       	push	r0
    3a7e:	2f 93       	push	r18
    3a80:	3f 93       	push	r19
    3a82:	4f 93       	push	r20
    3a84:	5f 93       	push	r21
    3a86:	6f 93       	push	r22
    3a88:	7f 93       	push	r23
    3a8a:	8f 93       	push	r24
    3a8c:	9f 93       	push	r25
    3a8e:	af 93       	push	r26
    3a90:	bf 93       	push	r27
    3a92:	ef 93       	push	r30
    3a94:	ff 93       	push	r31
    3a96:	e0 91 02 22 	lds	r30, 0x2202
    3a9a:	f0 91 03 22 	lds	r31, 0x2203
    3a9e:	30 97       	sbiw	r30, 0x00	; 0
    3aa0:	29 f0       	breq	.+10     	; 0x3aac <__vector_81+0x3c>
    3aa2:	80 91 f8 22 	lds	r24, 0x22F8
    3aa6:	90 91 f9 22 	lds	r25, 0x22F9
    3aaa:	19 95       	eicall
    3aac:	ff 91       	pop	r31
    3aae:	ef 91       	pop	r30
    3ab0:	bf 91       	pop	r27
    3ab2:	af 91       	pop	r26
    3ab4:	9f 91       	pop	r25
    3ab6:	8f 91       	pop	r24
    3ab8:	7f 91       	pop	r23
    3aba:	6f 91       	pop	r22
    3abc:	5f 91       	pop	r21
    3abe:	4f 91       	pop	r20
    3ac0:	3f 91       	pop	r19
    3ac2:	2f 91       	pop	r18
    3ac4:	0f 90       	pop	r0
    3ac6:	0b be       	out	0x3b, r0	; 59
    3ac8:	0f 90       	pop	r0
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	0f 90       	pop	r0
    3ace:	1f 90       	pop	r1
    3ad0:	18 95       	reti

00003ad2 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3ad2:	1f 92       	push	r1
    3ad4:	0f 92       	push	r0
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	0f 92       	push	r0
    3ada:	11 24       	eor	r1, r1
    3adc:	0b b6       	in	r0, 0x3b	; 59
    3ade:	0f 92       	push	r0
    3ae0:	2f 93       	push	r18
    3ae2:	3f 93       	push	r19
    3ae4:	4f 93       	push	r20
    3ae6:	5f 93       	push	r21
    3ae8:	6f 93       	push	r22
    3aea:	7f 93       	push	r23
    3aec:	8f 93       	push	r24
    3aee:	9f 93       	push	r25
    3af0:	af 93       	push	r26
    3af2:	bf 93       	push	r27
    3af4:	ef 93       	push	r30
    3af6:	ff 93       	push	r31
    3af8:	e0 91 04 22 	lds	r30, 0x2204
    3afc:	f0 91 05 22 	lds	r31, 0x2205
    3b00:	30 97       	sbiw	r30, 0x00	; 0
    3b02:	29 f0       	breq	.+10     	; 0x3b0e <__vector_82+0x3c>
    3b04:	80 91 fa 22 	lds	r24, 0x22FA
    3b08:	90 91 fb 22 	lds	r25, 0x22FB
    3b0c:	19 95       	eicall
    3b0e:	ff 91       	pop	r31
    3b10:	ef 91       	pop	r30
    3b12:	bf 91       	pop	r27
    3b14:	af 91       	pop	r26
    3b16:	9f 91       	pop	r25
    3b18:	8f 91       	pop	r24
    3b1a:	7f 91       	pop	r23
    3b1c:	6f 91       	pop	r22
    3b1e:	5f 91       	pop	r21
    3b20:	4f 91       	pop	r20
    3b22:	3f 91       	pop	r19
    3b24:	2f 91       	pop	r18
    3b26:	0f 90       	pop	r0
    3b28:	0b be       	out	0x3b, r0	; 59
    3b2a:	0f 90       	pop	r0
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	0f 90       	pop	r0
    3b30:	1f 90       	pop	r1
    3b32:	18 95       	reti

00003b34 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3b34:	1f 92       	push	r1
    3b36:	0f 92       	push	r0
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	0f 92       	push	r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	0b b6       	in	r0, 0x3b	; 59
    3b40:	0f 92       	push	r0
    3b42:	2f 93       	push	r18
    3b44:	3f 93       	push	r19
    3b46:	4f 93       	push	r20
    3b48:	5f 93       	push	r21
    3b4a:	6f 93       	push	r22
    3b4c:	7f 93       	push	r23
    3b4e:	8f 93       	push	r24
    3b50:	9f 93       	push	r25
    3b52:	af 93       	push	r26
    3b54:	bf 93       	push	r27
    3b56:	ef 93       	push	r30
    3b58:	ff 93       	push	r31
    3b5a:	e0 91 06 22 	lds	r30, 0x2206
    3b5e:	f0 91 07 22 	lds	r31, 0x2207
    3b62:	30 97       	sbiw	r30, 0x00	; 0
    3b64:	29 f0       	breq	.+10     	; 0x3b70 <__vector_83+0x3c>
    3b66:	80 91 fc 22 	lds	r24, 0x22FC
    3b6a:	90 91 fd 22 	lds	r25, 0x22FD
    3b6e:	19 95       	eicall
    3b70:	ff 91       	pop	r31
    3b72:	ef 91       	pop	r30
    3b74:	bf 91       	pop	r27
    3b76:	af 91       	pop	r26
    3b78:	9f 91       	pop	r25
    3b7a:	8f 91       	pop	r24
    3b7c:	7f 91       	pop	r23
    3b7e:	6f 91       	pop	r22
    3b80:	5f 91       	pop	r21
    3b82:	4f 91       	pop	r20
    3b84:	3f 91       	pop	r19
    3b86:	2f 91       	pop	r18
    3b88:	0f 90       	pop	r0
    3b8a:	0b be       	out	0x3b, r0	; 59
    3b8c:	0f 90       	pop	r0
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	0f 90       	pop	r0
    3b92:	1f 90       	pop	r1
    3b94:	18 95       	reti

00003b96 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    3b96:	1f 92       	push	r1
    3b98:	0f 92       	push	r0
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	0f 92       	push	r0
    3b9e:	11 24       	eor	r1, r1
    3ba0:	0b b6       	in	r0, 0x3b	; 59
    3ba2:	0f 92       	push	r0
    3ba4:	2f 93       	push	r18
    3ba6:	3f 93       	push	r19
    3ba8:	4f 93       	push	r20
    3baa:	5f 93       	push	r21
    3bac:	6f 93       	push	r22
    3bae:	7f 93       	push	r23
    3bb0:	8f 93       	push	r24
    3bb2:	9f 93       	push	r25
    3bb4:	af 93       	push	r26
    3bb6:	bf 93       	push	r27
    3bb8:	ef 93       	push	r30
    3bba:	ff 93       	push	r31
    3bbc:	e0 91 08 22 	lds	r30, 0x2208
    3bc0:	f0 91 09 22 	lds	r31, 0x2209
    3bc4:	30 97       	sbiw	r30, 0x00	; 0
    3bc6:	29 f0       	breq	.+10     	; 0x3bd2 <__vector_84+0x3c>
    3bc8:	80 91 fe 22 	lds	r24, 0x22FE
    3bcc:	90 91 ff 22 	lds	r25, 0x22FF
    3bd0:	19 95       	eicall
    3bd2:	ff 91       	pop	r31
    3bd4:	ef 91       	pop	r30
    3bd6:	bf 91       	pop	r27
    3bd8:	af 91       	pop	r26
    3bda:	9f 91       	pop	r25
    3bdc:	8f 91       	pop	r24
    3bde:	7f 91       	pop	r23
    3be0:	6f 91       	pop	r22
    3be2:	5f 91       	pop	r21
    3be4:	4f 91       	pop	r20
    3be6:	3f 91       	pop	r19
    3be8:	2f 91       	pop	r18
    3bea:	0f 90       	pop	r0
    3bec:	0b be       	out	0x3b, r0	; 59
    3bee:	0f 90       	pop	r0
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	0f 90       	pop	r0
    3bf4:	1f 90       	pop	r1
    3bf6:	18 95       	reti

00003bf8 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    3bf8:	1f 92       	push	r1
    3bfa:	0f 92       	push	r0
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	0f 92       	push	r0
    3c00:	11 24       	eor	r1, r1
    3c02:	0b b6       	in	r0, 0x3b	; 59
    3c04:	0f 92       	push	r0
    3c06:	2f 93       	push	r18
    3c08:	3f 93       	push	r19
    3c0a:	4f 93       	push	r20
    3c0c:	5f 93       	push	r21
    3c0e:	6f 93       	push	r22
    3c10:	7f 93       	push	r23
    3c12:	8f 93       	push	r24
    3c14:	9f 93       	push	r25
    3c16:	af 93       	push	r26
    3c18:	bf 93       	push	r27
    3c1a:	ef 93       	push	r30
    3c1c:	ff 93       	push	r31
    3c1e:	e0 91 0a 22 	lds	r30, 0x220A
    3c22:	f0 91 0b 22 	lds	r31, 0x220B
    3c26:	30 97       	sbiw	r30, 0x00	; 0
    3c28:	29 f0       	breq	.+10     	; 0x3c34 <__vector_85+0x3c>
    3c2a:	80 91 00 23 	lds	r24, 0x2300
    3c2e:	90 91 01 23 	lds	r25, 0x2301
    3c32:	19 95       	eicall
    3c34:	ff 91       	pop	r31
    3c36:	ef 91       	pop	r30
    3c38:	bf 91       	pop	r27
    3c3a:	af 91       	pop	r26
    3c3c:	9f 91       	pop	r25
    3c3e:	8f 91       	pop	r24
    3c40:	7f 91       	pop	r23
    3c42:	6f 91       	pop	r22
    3c44:	5f 91       	pop	r21
    3c46:	4f 91       	pop	r20
    3c48:	3f 91       	pop	r19
    3c4a:	2f 91       	pop	r18
    3c4c:	0f 90       	pop	r0
    3c4e:	0b be       	out	0x3b, r0	; 59
    3c50:	0f 90       	pop	r0
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	0f 90       	pop	r0
    3c56:	1f 90       	pop	r1
    3c58:	18 95       	reti

00003c5a <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    3c5a:	1f 92       	push	r1
    3c5c:	0f 92       	push	r0
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	0f 92       	push	r0
    3c62:	11 24       	eor	r1, r1
    3c64:	0b b6       	in	r0, 0x3b	; 59
    3c66:	0f 92       	push	r0
    3c68:	2f 93       	push	r18
    3c6a:	3f 93       	push	r19
    3c6c:	4f 93       	push	r20
    3c6e:	5f 93       	push	r21
    3c70:	6f 93       	push	r22
    3c72:	7f 93       	push	r23
    3c74:	8f 93       	push	r24
    3c76:	9f 93       	push	r25
    3c78:	af 93       	push	r26
    3c7a:	bf 93       	push	r27
    3c7c:	ef 93       	push	r30
    3c7e:	ff 93       	push	r31
    3c80:	e0 91 0c 22 	lds	r30, 0x220C
    3c84:	f0 91 0d 22 	lds	r31, 0x220D
    3c88:	30 97       	sbiw	r30, 0x00	; 0
    3c8a:	29 f0       	breq	.+10     	; 0x3c96 <__vector_86+0x3c>
    3c8c:	80 91 02 23 	lds	r24, 0x2302
    3c90:	90 91 03 23 	lds	r25, 0x2303
    3c94:	19 95       	eicall
    3c96:	ff 91       	pop	r31
    3c98:	ef 91       	pop	r30
    3c9a:	bf 91       	pop	r27
    3c9c:	af 91       	pop	r26
    3c9e:	9f 91       	pop	r25
    3ca0:	8f 91       	pop	r24
    3ca2:	7f 91       	pop	r23
    3ca4:	6f 91       	pop	r22
    3ca6:	5f 91       	pop	r21
    3ca8:	4f 91       	pop	r20
    3caa:	3f 91       	pop	r19
    3cac:	2f 91       	pop	r18
    3cae:	0f 90       	pop	r0
    3cb0:	0b be       	out	0x3b, r0	; 59
    3cb2:	0f 90       	pop	r0
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	0f 90       	pop	r0
    3cb8:	1f 90       	pop	r1
    3cba:	18 95       	reti

00003cbc <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3cbc:	1f 92       	push	r1
    3cbe:	0f 92       	push	r0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	0f 92       	push	r0
    3cc4:	11 24       	eor	r1, r1
    3cc6:	0b b6       	in	r0, 0x3b	; 59
    3cc8:	0f 92       	push	r0
    3cca:	2f 93       	push	r18
    3ccc:	3f 93       	push	r19
    3cce:	4f 93       	push	r20
    3cd0:	5f 93       	push	r21
    3cd2:	6f 93       	push	r22
    3cd4:	7f 93       	push	r23
    3cd6:	8f 93       	push	r24
    3cd8:	9f 93       	push	r25
    3cda:	af 93       	push	r26
    3cdc:	bf 93       	push	r27
    3cde:	ef 93       	push	r30
    3ce0:	ff 93       	push	r31
    3ce2:	e0 91 0e 22 	lds	r30, 0x220E
    3ce6:	f0 91 0f 22 	lds	r31, 0x220F
    3cea:	30 97       	sbiw	r30, 0x00	; 0
    3cec:	29 f0       	breq	.+10     	; 0x3cf8 <__vector_87+0x3c>
    3cee:	80 91 04 23 	lds	r24, 0x2304
    3cf2:	90 91 05 23 	lds	r25, 0x2305
    3cf6:	19 95       	eicall
    3cf8:	ff 91       	pop	r31
    3cfa:	ef 91       	pop	r30
    3cfc:	bf 91       	pop	r27
    3cfe:	af 91       	pop	r26
    3d00:	9f 91       	pop	r25
    3d02:	8f 91       	pop	r24
    3d04:	7f 91       	pop	r23
    3d06:	6f 91       	pop	r22
    3d08:	5f 91       	pop	r21
    3d0a:	4f 91       	pop	r20
    3d0c:	3f 91       	pop	r19
    3d0e:	2f 91       	pop	r18
    3d10:	0f 90       	pop	r0
    3d12:	0b be       	out	0x3b, r0	; 59
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	0f 90       	pop	r0
    3d1a:	1f 90       	pop	r1
    3d1c:	18 95       	reti

00003d1e <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    3d1e:	1f 92       	push	r1
    3d20:	0f 92       	push	r0
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	0f 92       	push	r0
    3d26:	11 24       	eor	r1, r1
    3d28:	0b b6       	in	r0, 0x3b	; 59
    3d2a:	0f 92       	push	r0
    3d2c:	2f 93       	push	r18
    3d2e:	3f 93       	push	r19
    3d30:	4f 93       	push	r20
    3d32:	5f 93       	push	r21
    3d34:	6f 93       	push	r22
    3d36:	7f 93       	push	r23
    3d38:	8f 93       	push	r24
    3d3a:	9f 93       	push	r25
    3d3c:	af 93       	push	r26
    3d3e:	bf 93       	push	r27
    3d40:	ef 93       	push	r30
    3d42:	ff 93       	push	r31
    3d44:	e0 91 10 22 	lds	r30, 0x2210
    3d48:	f0 91 11 22 	lds	r31, 0x2211
    3d4c:	30 97       	sbiw	r30, 0x00	; 0
    3d4e:	29 f0       	breq	.+10     	; 0x3d5a <__vector_88+0x3c>
    3d50:	80 91 06 23 	lds	r24, 0x2306
    3d54:	90 91 07 23 	lds	r25, 0x2307
    3d58:	19 95       	eicall
    3d5a:	ff 91       	pop	r31
    3d5c:	ef 91       	pop	r30
    3d5e:	bf 91       	pop	r27
    3d60:	af 91       	pop	r26
    3d62:	9f 91       	pop	r25
    3d64:	8f 91       	pop	r24
    3d66:	7f 91       	pop	r23
    3d68:	6f 91       	pop	r22
    3d6a:	5f 91       	pop	r21
    3d6c:	4f 91       	pop	r20
    3d6e:	3f 91       	pop	r19
    3d70:	2f 91       	pop	r18
    3d72:	0f 90       	pop	r0
    3d74:	0b be       	out	0x3b, r0	; 59
    3d76:	0f 90       	pop	r0
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	0f 90       	pop	r0
    3d7c:	1f 90       	pop	r1
    3d7e:	18 95       	reti

00003d80 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3d80:	1f 92       	push	r1
    3d82:	0f 92       	push	r0
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	0f 92       	push	r0
    3d88:	11 24       	eor	r1, r1
    3d8a:	0b b6       	in	r0, 0x3b	; 59
    3d8c:	0f 92       	push	r0
    3d8e:	2f 93       	push	r18
    3d90:	3f 93       	push	r19
    3d92:	4f 93       	push	r20
    3d94:	5f 93       	push	r21
    3d96:	6f 93       	push	r22
    3d98:	7f 93       	push	r23
    3d9a:	8f 93       	push	r24
    3d9c:	9f 93       	push	r25
    3d9e:	af 93       	push	r26
    3da0:	bf 93       	push	r27
    3da2:	ef 93       	push	r30
    3da4:	ff 93       	push	r31
    3da6:	e0 91 12 22 	lds	r30, 0x2212
    3daa:	f0 91 13 22 	lds	r31, 0x2213
    3dae:	30 97       	sbiw	r30, 0x00	; 0
    3db0:	29 f0       	breq	.+10     	; 0x3dbc <__vector_89+0x3c>
    3db2:	80 91 08 23 	lds	r24, 0x2308
    3db6:	90 91 09 23 	lds	r25, 0x2309
    3dba:	19 95       	eicall
    3dbc:	ff 91       	pop	r31
    3dbe:	ef 91       	pop	r30
    3dc0:	bf 91       	pop	r27
    3dc2:	af 91       	pop	r26
    3dc4:	9f 91       	pop	r25
    3dc6:	8f 91       	pop	r24
    3dc8:	7f 91       	pop	r23
    3dca:	6f 91       	pop	r22
    3dcc:	5f 91       	pop	r21
    3dce:	4f 91       	pop	r20
    3dd0:	3f 91       	pop	r19
    3dd2:	2f 91       	pop	r18
    3dd4:	0f 90       	pop	r0
    3dd6:	0b be       	out	0x3b, r0	; 59
    3dd8:	0f 90       	pop	r0
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	0f 90       	pop	r0
    3dde:	1f 90       	pop	r1
    3de0:	18 95       	reti

00003de2 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3de2:	1f 92       	push	r1
    3de4:	0f 92       	push	r0
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	0f 92       	push	r0
    3dea:	11 24       	eor	r1, r1
    3dec:	0b b6       	in	r0, 0x3b	; 59
    3dee:	0f 92       	push	r0
    3df0:	2f 93       	push	r18
    3df2:	3f 93       	push	r19
    3df4:	4f 93       	push	r20
    3df6:	5f 93       	push	r21
    3df8:	6f 93       	push	r22
    3dfa:	7f 93       	push	r23
    3dfc:	8f 93       	push	r24
    3dfe:	9f 93       	push	r25
    3e00:	af 93       	push	r26
    3e02:	bf 93       	push	r27
    3e04:	ef 93       	push	r30
    3e06:	ff 93       	push	r31
    3e08:	e0 91 14 22 	lds	r30, 0x2214
    3e0c:	f0 91 15 22 	lds	r31, 0x2215
    3e10:	30 97       	sbiw	r30, 0x00	; 0
    3e12:	29 f0       	breq	.+10     	; 0x3e1e <__vector_90+0x3c>
    3e14:	80 91 0a 23 	lds	r24, 0x230A
    3e18:	90 91 0b 23 	lds	r25, 0x230B
    3e1c:	19 95       	eicall
    3e1e:	ff 91       	pop	r31
    3e20:	ef 91       	pop	r30
    3e22:	bf 91       	pop	r27
    3e24:	af 91       	pop	r26
    3e26:	9f 91       	pop	r25
    3e28:	8f 91       	pop	r24
    3e2a:	7f 91       	pop	r23
    3e2c:	6f 91       	pop	r22
    3e2e:	5f 91       	pop	r21
    3e30:	4f 91       	pop	r20
    3e32:	3f 91       	pop	r19
    3e34:	2f 91       	pop	r18
    3e36:	0f 90       	pop	r0
    3e38:	0b be       	out	0x3b, r0	; 59
    3e3a:	0f 90       	pop	r0
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	0f 90       	pop	r0
    3e40:	1f 90       	pop	r1
    3e42:	18 95       	reti

00003e44 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3e44:	1f 92       	push	r1
    3e46:	0f 92       	push	r0
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	0f 92       	push	r0
    3e4c:	11 24       	eor	r1, r1
    3e4e:	0b b6       	in	r0, 0x3b	; 59
    3e50:	0f 92       	push	r0
    3e52:	2f 93       	push	r18
    3e54:	3f 93       	push	r19
    3e56:	4f 93       	push	r20
    3e58:	5f 93       	push	r21
    3e5a:	6f 93       	push	r22
    3e5c:	7f 93       	push	r23
    3e5e:	8f 93       	push	r24
    3e60:	9f 93       	push	r25
    3e62:	af 93       	push	r26
    3e64:	bf 93       	push	r27
    3e66:	ef 93       	push	r30
    3e68:	ff 93       	push	r31
    3e6a:	e0 91 16 22 	lds	r30, 0x2216
    3e6e:	f0 91 17 22 	lds	r31, 0x2217
    3e72:	30 97       	sbiw	r30, 0x00	; 0
    3e74:	29 f0       	breq	.+10     	; 0x3e80 <__vector_91+0x3c>
    3e76:	80 91 0c 23 	lds	r24, 0x230C
    3e7a:	90 91 0d 23 	lds	r25, 0x230D
    3e7e:	19 95       	eicall
    3e80:	ff 91       	pop	r31
    3e82:	ef 91       	pop	r30
    3e84:	bf 91       	pop	r27
    3e86:	af 91       	pop	r26
    3e88:	9f 91       	pop	r25
    3e8a:	8f 91       	pop	r24
    3e8c:	7f 91       	pop	r23
    3e8e:	6f 91       	pop	r22
    3e90:	5f 91       	pop	r21
    3e92:	4f 91       	pop	r20
    3e94:	3f 91       	pop	r19
    3e96:	2f 91       	pop	r18
    3e98:	0f 90       	pop	r0
    3e9a:	0b be       	out	0x3b, r0	; 59
    3e9c:	0f 90       	pop	r0
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	0f 90       	pop	r0
    3ea2:	1f 90       	pop	r1
    3ea4:	18 95       	reti

00003ea6 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3ea6:	1f 92       	push	r1
    3ea8:	0f 92       	push	r0
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	0f 92       	push	r0
    3eae:	11 24       	eor	r1, r1
    3eb0:	0b b6       	in	r0, 0x3b	; 59
    3eb2:	0f 92       	push	r0
    3eb4:	2f 93       	push	r18
    3eb6:	3f 93       	push	r19
    3eb8:	4f 93       	push	r20
    3eba:	5f 93       	push	r21
    3ebc:	6f 93       	push	r22
    3ebe:	7f 93       	push	r23
    3ec0:	8f 93       	push	r24
    3ec2:	9f 93       	push	r25
    3ec4:	af 93       	push	r26
    3ec6:	bf 93       	push	r27
    3ec8:	ef 93       	push	r30
    3eca:	ff 93       	push	r31
    3ecc:	e0 91 18 22 	lds	r30, 0x2218
    3ed0:	f0 91 19 22 	lds	r31, 0x2219
    3ed4:	30 97       	sbiw	r30, 0x00	; 0
    3ed6:	29 f0       	breq	.+10     	; 0x3ee2 <__vector_92+0x3c>
    3ed8:	80 91 0e 23 	lds	r24, 0x230E
    3edc:	90 91 0f 23 	lds	r25, 0x230F
    3ee0:	19 95       	eicall
    3ee2:	ff 91       	pop	r31
    3ee4:	ef 91       	pop	r30
    3ee6:	bf 91       	pop	r27
    3ee8:	af 91       	pop	r26
    3eea:	9f 91       	pop	r25
    3eec:	8f 91       	pop	r24
    3eee:	7f 91       	pop	r23
    3ef0:	6f 91       	pop	r22
    3ef2:	5f 91       	pop	r21
    3ef4:	4f 91       	pop	r20
    3ef6:	3f 91       	pop	r19
    3ef8:	2f 91       	pop	r18
    3efa:	0f 90       	pop	r0
    3efc:	0b be       	out	0x3b, r0	; 59
    3efe:	0f 90       	pop	r0
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	0f 90       	pop	r0
    3f04:	1f 90       	pop	r1
    3f06:	18 95       	reti

00003f08 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3f08:	1f 92       	push	r1
    3f0a:	0f 92       	push	r0
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	0f 92       	push	r0
    3f10:	11 24       	eor	r1, r1
    3f12:	0b b6       	in	r0, 0x3b	; 59
    3f14:	0f 92       	push	r0
    3f16:	2f 93       	push	r18
    3f18:	3f 93       	push	r19
    3f1a:	4f 93       	push	r20
    3f1c:	5f 93       	push	r21
    3f1e:	6f 93       	push	r22
    3f20:	7f 93       	push	r23
    3f22:	8f 93       	push	r24
    3f24:	9f 93       	push	r25
    3f26:	af 93       	push	r26
    3f28:	bf 93       	push	r27
    3f2a:	ef 93       	push	r30
    3f2c:	ff 93       	push	r31
    3f2e:	e0 91 1a 22 	lds	r30, 0x221A
    3f32:	f0 91 1b 22 	lds	r31, 0x221B
    3f36:	30 97       	sbiw	r30, 0x00	; 0
    3f38:	29 f0       	breq	.+10     	; 0x3f44 <__vector_93+0x3c>
    3f3a:	80 91 10 23 	lds	r24, 0x2310
    3f3e:	90 91 11 23 	lds	r25, 0x2311
    3f42:	19 95       	eicall
    3f44:	ff 91       	pop	r31
    3f46:	ef 91       	pop	r30
    3f48:	bf 91       	pop	r27
    3f4a:	af 91       	pop	r26
    3f4c:	9f 91       	pop	r25
    3f4e:	8f 91       	pop	r24
    3f50:	7f 91       	pop	r23
    3f52:	6f 91       	pop	r22
    3f54:	5f 91       	pop	r21
    3f56:	4f 91       	pop	r20
    3f58:	3f 91       	pop	r19
    3f5a:	2f 91       	pop	r18
    3f5c:	0f 90       	pop	r0
    3f5e:	0b be       	out	0x3b, r0	; 59
    3f60:	0f 90       	pop	r0
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	0f 90       	pop	r0
    3f66:	1f 90       	pop	r1
    3f68:	18 95       	reti

00003f6a <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3f6a:	1f 92       	push	r1
    3f6c:	0f 92       	push	r0
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	0f 92       	push	r0
    3f72:	11 24       	eor	r1, r1
    3f74:	0b b6       	in	r0, 0x3b	; 59
    3f76:	0f 92       	push	r0
    3f78:	2f 93       	push	r18
    3f7a:	3f 93       	push	r19
    3f7c:	4f 93       	push	r20
    3f7e:	5f 93       	push	r21
    3f80:	6f 93       	push	r22
    3f82:	7f 93       	push	r23
    3f84:	8f 93       	push	r24
    3f86:	9f 93       	push	r25
    3f88:	af 93       	push	r26
    3f8a:	bf 93       	push	r27
    3f8c:	ef 93       	push	r30
    3f8e:	ff 93       	push	r31
    3f90:	e0 91 30 22 	lds	r30, 0x2230
    3f94:	f0 91 31 22 	lds	r31, 0x2231
    3f98:	30 97       	sbiw	r30, 0x00	; 0
    3f9a:	29 f0       	breq	.+10     	; 0x3fa6 <__vector_104+0x3c>
    3f9c:	80 91 26 23 	lds	r24, 0x2326
    3fa0:	90 91 27 23 	lds	r25, 0x2327
    3fa4:	19 95       	eicall
    3fa6:	ff 91       	pop	r31
    3fa8:	ef 91       	pop	r30
    3faa:	bf 91       	pop	r27
    3fac:	af 91       	pop	r26
    3fae:	9f 91       	pop	r25
    3fb0:	8f 91       	pop	r24
    3fb2:	7f 91       	pop	r23
    3fb4:	6f 91       	pop	r22
    3fb6:	5f 91       	pop	r21
    3fb8:	4f 91       	pop	r20
    3fba:	3f 91       	pop	r19
    3fbc:	2f 91       	pop	r18
    3fbe:	0f 90       	pop	r0
    3fc0:	0b be       	out	0x3b, r0	; 59
    3fc2:	0f 90       	pop	r0
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	0f 90       	pop	r0
    3fc8:	1f 90       	pop	r1
    3fca:	18 95       	reti

00003fcc <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3fcc:	1f 92       	push	r1
    3fce:	0f 92       	push	r0
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	0f 92       	push	r0
    3fd4:	11 24       	eor	r1, r1
    3fd6:	0b b6       	in	r0, 0x3b	; 59
    3fd8:	0f 92       	push	r0
    3fda:	2f 93       	push	r18
    3fdc:	3f 93       	push	r19
    3fde:	4f 93       	push	r20
    3fe0:	5f 93       	push	r21
    3fe2:	6f 93       	push	r22
    3fe4:	7f 93       	push	r23
    3fe6:	8f 93       	push	r24
    3fe8:	9f 93       	push	r25
    3fea:	af 93       	push	r26
    3fec:	bf 93       	push	r27
    3fee:	ef 93       	push	r30
    3ff0:	ff 93       	push	r31
    3ff2:	e0 91 32 22 	lds	r30, 0x2232
    3ff6:	f0 91 33 22 	lds	r31, 0x2233
    3ffa:	30 97       	sbiw	r30, 0x00	; 0
    3ffc:	29 f0       	breq	.+10     	; 0x4008 <__stack+0x9>
    3ffe:	80 91 28 23 	lds	r24, 0x2328
    4002:	90 91 29 23 	lds	r25, 0x2329
    4006:	19 95       	eicall
    4008:	ff 91       	pop	r31
    400a:	ef 91       	pop	r30
    400c:	bf 91       	pop	r27
    400e:	af 91       	pop	r26
    4010:	9f 91       	pop	r25
    4012:	8f 91       	pop	r24
    4014:	7f 91       	pop	r23
    4016:	6f 91       	pop	r22
    4018:	5f 91       	pop	r21
    401a:	4f 91       	pop	r20
    401c:	3f 91       	pop	r19
    401e:	2f 91       	pop	r18
    4020:	0f 90       	pop	r0
    4022:	0b be       	out	0x3b, r0	; 59
    4024:	0f 90       	pop	r0
    4026:	0f be       	out	0x3f, r0	; 63
    4028:	0f 90       	pop	r0
    402a:	1f 90       	pop	r1
    402c:	18 95       	reti

0000402e <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    402e:	1f 92       	push	r1
    4030:	0f 92       	push	r0
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	0f 92       	push	r0
    4036:	11 24       	eor	r1, r1
    4038:	0b b6       	in	r0, 0x3b	; 59
    403a:	0f 92       	push	r0
    403c:	2f 93       	push	r18
    403e:	3f 93       	push	r19
    4040:	4f 93       	push	r20
    4042:	5f 93       	push	r21
    4044:	6f 93       	push	r22
    4046:	7f 93       	push	r23
    4048:	8f 93       	push	r24
    404a:	9f 93       	push	r25
    404c:	af 93       	push	r26
    404e:	bf 93       	push	r27
    4050:	ef 93       	push	r30
    4052:	ff 93       	push	r31
    4054:	e0 91 38 22 	lds	r30, 0x2238
    4058:	f0 91 39 22 	lds	r31, 0x2239
    405c:	30 97       	sbiw	r30, 0x00	; 0
    405e:	29 f0       	breq	.+10     	; 0x406a <__vector_108+0x3c>
    4060:	80 91 2e 23 	lds	r24, 0x232E
    4064:	90 91 2f 23 	lds	r25, 0x232F
    4068:	19 95       	eicall
    406a:	ff 91       	pop	r31
    406c:	ef 91       	pop	r30
    406e:	bf 91       	pop	r27
    4070:	af 91       	pop	r26
    4072:	9f 91       	pop	r25
    4074:	8f 91       	pop	r24
    4076:	7f 91       	pop	r23
    4078:	6f 91       	pop	r22
    407a:	5f 91       	pop	r21
    407c:	4f 91       	pop	r20
    407e:	3f 91       	pop	r19
    4080:	2f 91       	pop	r18
    4082:	0f 90       	pop	r0
    4084:	0b be       	out	0x3b, r0	; 59
    4086:	0f 90       	pop	r0
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	0f 90       	pop	r0
    408c:	1f 90       	pop	r1
    408e:	18 95       	reti

00004090 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    4090:	1f 92       	push	r1
    4092:	0f 92       	push	r0
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	0f 92       	push	r0
    4098:	11 24       	eor	r1, r1
    409a:	0b b6       	in	r0, 0x3b	; 59
    409c:	0f 92       	push	r0
    409e:	2f 93       	push	r18
    40a0:	3f 93       	push	r19
    40a2:	4f 93       	push	r20
    40a4:	5f 93       	push	r21
    40a6:	6f 93       	push	r22
    40a8:	7f 93       	push	r23
    40aa:	8f 93       	push	r24
    40ac:	9f 93       	push	r25
    40ae:	af 93       	push	r26
    40b0:	bf 93       	push	r27
    40b2:	ef 93       	push	r30
    40b4:	ff 93       	push	r31
    40b6:	e0 91 3a 22 	lds	r30, 0x223A
    40ba:	f0 91 3b 22 	lds	r31, 0x223B
    40be:	30 97       	sbiw	r30, 0x00	; 0
    40c0:	29 f0       	breq	.+10     	; 0x40cc <__vector_109+0x3c>
    40c2:	80 91 30 23 	lds	r24, 0x2330
    40c6:	90 91 31 23 	lds	r25, 0x2331
    40ca:	19 95       	eicall
    40cc:	ff 91       	pop	r31
    40ce:	ef 91       	pop	r30
    40d0:	bf 91       	pop	r27
    40d2:	af 91       	pop	r26
    40d4:	9f 91       	pop	r25
    40d6:	8f 91       	pop	r24
    40d8:	7f 91       	pop	r23
    40da:	6f 91       	pop	r22
    40dc:	5f 91       	pop	r21
    40de:	4f 91       	pop	r20
    40e0:	3f 91       	pop	r19
    40e2:	2f 91       	pop	r18
    40e4:	0f 90       	pop	r0
    40e6:	0b be       	out	0x3b, r0	; 59
    40e8:	0f 90       	pop	r0
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	0f 90       	pop	r0
    40ee:	1f 90       	pop	r1
    40f0:	18 95       	reti

000040f2 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    40f2:	1f 92       	push	r1
    40f4:	0f 92       	push	r0
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	0f 92       	push	r0
    40fa:	11 24       	eor	r1, r1
    40fc:	0b b6       	in	r0, 0x3b	; 59
    40fe:	0f 92       	push	r0
    4100:	2f 93       	push	r18
    4102:	3f 93       	push	r19
    4104:	4f 93       	push	r20
    4106:	5f 93       	push	r21
    4108:	6f 93       	push	r22
    410a:	7f 93       	push	r23
    410c:	8f 93       	push	r24
    410e:	9f 93       	push	r25
    4110:	af 93       	push	r26
    4112:	bf 93       	push	r27
    4114:	ef 93       	push	r30
    4116:	ff 93       	push	r31
    4118:	e0 91 3c 22 	lds	r30, 0x223C
    411c:	f0 91 3d 22 	lds	r31, 0x223D
    4120:	30 97       	sbiw	r30, 0x00	; 0
    4122:	29 f0       	breq	.+10     	; 0x412e <__vector_110+0x3c>
    4124:	80 91 32 23 	lds	r24, 0x2332
    4128:	90 91 33 23 	lds	r25, 0x2333
    412c:	19 95       	eicall
    412e:	ff 91       	pop	r31
    4130:	ef 91       	pop	r30
    4132:	bf 91       	pop	r27
    4134:	af 91       	pop	r26
    4136:	9f 91       	pop	r25
    4138:	8f 91       	pop	r24
    413a:	7f 91       	pop	r23
    413c:	6f 91       	pop	r22
    413e:	5f 91       	pop	r21
    4140:	4f 91       	pop	r20
    4142:	3f 91       	pop	r19
    4144:	2f 91       	pop	r18
    4146:	0f 90       	pop	r0
    4148:	0b be       	out	0x3b, r0	; 59
    414a:	0f 90       	pop	r0
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	0f 90       	pop	r0
    4150:	1f 90       	pop	r1
    4152:	18 95       	reti

00004154 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    4154:	1f 92       	push	r1
    4156:	0f 92       	push	r0
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	0f 92       	push	r0
    415c:	11 24       	eor	r1, r1
    415e:	0b b6       	in	r0, 0x3b	; 59
    4160:	0f 92       	push	r0
    4162:	2f 93       	push	r18
    4164:	3f 93       	push	r19
    4166:	4f 93       	push	r20
    4168:	5f 93       	push	r21
    416a:	6f 93       	push	r22
    416c:	7f 93       	push	r23
    416e:	8f 93       	push	r24
    4170:	9f 93       	push	r25
    4172:	af 93       	push	r26
    4174:	bf 93       	push	r27
    4176:	ef 93       	push	r30
    4178:	ff 93       	push	r31
    417a:	e0 91 3e 22 	lds	r30, 0x223E
    417e:	f0 91 3f 22 	lds	r31, 0x223F
    4182:	30 97       	sbiw	r30, 0x00	; 0
    4184:	29 f0       	breq	.+10     	; 0x4190 <__vector_111+0x3c>
    4186:	80 91 34 23 	lds	r24, 0x2334
    418a:	90 91 35 23 	lds	r25, 0x2335
    418e:	19 95       	eicall
    4190:	ff 91       	pop	r31
    4192:	ef 91       	pop	r30
    4194:	bf 91       	pop	r27
    4196:	af 91       	pop	r26
    4198:	9f 91       	pop	r25
    419a:	8f 91       	pop	r24
    419c:	7f 91       	pop	r23
    419e:	6f 91       	pop	r22
    41a0:	5f 91       	pop	r21
    41a2:	4f 91       	pop	r20
    41a4:	3f 91       	pop	r19
    41a6:	2f 91       	pop	r18
    41a8:	0f 90       	pop	r0
    41aa:	0b be       	out	0x3b, r0	; 59
    41ac:	0f 90       	pop	r0
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	0f 90       	pop	r0
    41b2:	1f 90       	pop	r1
    41b4:	18 95       	reti

000041b6 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    41b6:	1f 92       	push	r1
    41b8:	0f 92       	push	r0
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	0f 92       	push	r0
    41be:	11 24       	eor	r1, r1
    41c0:	0b b6       	in	r0, 0x3b	; 59
    41c2:	0f 92       	push	r0
    41c4:	2f 93       	push	r18
    41c6:	3f 93       	push	r19
    41c8:	4f 93       	push	r20
    41ca:	5f 93       	push	r21
    41cc:	6f 93       	push	r22
    41ce:	7f 93       	push	r23
    41d0:	8f 93       	push	r24
    41d2:	9f 93       	push	r25
    41d4:	af 93       	push	r26
    41d6:	bf 93       	push	r27
    41d8:	ef 93       	push	r30
    41da:	ff 93       	push	r31
    41dc:	e0 91 40 22 	lds	r30, 0x2240
    41e0:	f0 91 41 22 	lds	r31, 0x2241
    41e4:	30 97       	sbiw	r30, 0x00	; 0
    41e6:	29 f0       	breq	.+10     	; 0x41f2 <__vector_112+0x3c>
    41e8:	80 91 36 23 	lds	r24, 0x2336
    41ec:	90 91 37 23 	lds	r25, 0x2337
    41f0:	19 95       	eicall
    41f2:	ff 91       	pop	r31
    41f4:	ef 91       	pop	r30
    41f6:	bf 91       	pop	r27
    41f8:	af 91       	pop	r26
    41fa:	9f 91       	pop	r25
    41fc:	8f 91       	pop	r24
    41fe:	7f 91       	pop	r23
    4200:	6f 91       	pop	r22
    4202:	5f 91       	pop	r21
    4204:	4f 91       	pop	r20
    4206:	3f 91       	pop	r19
    4208:	2f 91       	pop	r18
    420a:	0f 90       	pop	r0
    420c:	0b be       	out	0x3b, r0	; 59
    420e:	0f 90       	pop	r0
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	0f 90       	pop	r0
    4214:	1f 90       	pop	r1
    4216:	18 95       	reti

00004218 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    4218:	1f 92       	push	r1
    421a:	0f 92       	push	r0
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	0f 92       	push	r0
    4220:	11 24       	eor	r1, r1
    4222:	0b b6       	in	r0, 0x3b	; 59
    4224:	0f 92       	push	r0
    4226:	2f 93       	push	r18
    4228:	3f 93       	push	r19
    422a:	4f 93       	push	r20
    422c:	5f 93       	push	r21
    422e:	6f 93       	push	r22
    4230:	7f 93       	push	r23
    4232:	8f 93       	push	r24
    4234:	9f 93       	push	r25
    4236:	af 93       	push	r26
    4238:	bf 93       	push	r27
    423a:	ef 93       	push	r30
    423c:	ff 93       	push	r31
    423e:	e0 91 42 22 	lds	r30, 0x2242
    4242:	f0 91 43 22 	lds	r31, 0x2243
    4246:	30 97       	sbiw	r30, 0x00	; 0
    4248:	29 f0       	breq	.+10     	; 0x4254 <__vector_113+0x3c>
    424a:	80 91 38 23 	lds	r24, 0x2338
    424e:	90 91 39 23 	lds	r25, 0x2339
    4252:	19 95       	eicall
    4254:	ff 91       	pop	r31
    4256:	ef 91       	pop	r30
    4258:	bf 91       	pop	r27
    425a:	af 91       	pop	r26
    425c:	9f 91       	pop	r25
    425e:	8f 91       	pop	r24
    4260:	7f 91       	pop	r23
    4262:	6f 91       	pop	r22
    4264:	5f 91       	pop	r21
    4266:	4f 91       	pop	r20
    4268:	3f 91       	pop	r19
    426a:	2f 91       	pop	r18
    426c:	0f 90       	pop	r0
    426e:	0b be       	out	0x3b, r0	; 59
    4270:	0f 90       	pop	r0
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	0f 90       	pop	r0
    4276:	1f 90       	pop	r1
    4278:	18 95       	reti

0000427a <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    427a:	1f 92       	push	r1
    427c:	0f 92       	push	r0
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	0f 92       	push	r0
    4282:	11 24       	eor	r1, r1
    4284:	0b b6       	in	r0, 0x3b	; 59
    4286:	0f 92       	push	r0
    4288:	2f 93       	push	r18
    428a:	3f 93       	push	r19
    428c:	4f 93       	push	r20
    428e:	5f 93       	push	r21
    4290:	6f 93       	push	r22
    4292:	7f 93       	push	r23
    4294:	8f 93       	push	r24
    4296:	9f 93       	push	r25
    4298:	af 93       	push	r26
    429a:	bf 93       	push	r27
    429c:	ef 93       	push	r30
    429e:	ff 93       	push	r31
    42a0:	e0 91 4e 22 	lds	r30, 0x224E
    42a4:	f0 91 4f 22 	lds	r31, 0x224F
    42a8:	30 97       	sbiw	r30, 0x00	; 0
    42aa:	29 f0       	breq	.+10     	; 0x42b6 <__vector_119+0x3c>
    42ac:	80 91 44 23 	lds	r24, 0x2344
    42b0:	90 91 45 23 	lds	r25, 0x2345
    42b4:	19 95       	eicall
    42b6:	ff 91       	pop	r31
    42b8:	ef 91       	pop	r30
    42ba:	bf 91       	pop	r27
    42bc:	af 91       	pop	r26
    42be:	9f 91       	pop	r25
    42c0:	8f 91       	pop	r24
    42c2:	7f 91       	pop	r23
    42c4:	6f 91       	pop	r22
    42c6:	5f 91       	pop	r21
    42c8:	4f 91       	pop	r20
    42ca:	3f 91       	pop	r19
    42cc:	2f 91       	pop	r18
    42ce:	0f 90       	pop	r0
    42d0:	0b be       	out	0x3b, r0	; 59
    42d2:	0f 90       	pop	r0
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	0f 90       	pop	r0
    42d8:	1f 90       	pop	r1
    42da:	18 95       	reti

000042dc <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    42dc:	1f 92       	push	r1
    42de:	0f 92       	push	r0
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	0f 92       	push	r0
    42e4:	11 24       	eor	r1, r1
    42e6:	0b b6       	in	r0, 0x3b	; 59
    42e8:	0f 92       	push	r0
    42ea:	2f 93       	push	r18
    42ec:	3f 93       	push	r19
    42ee:	4f 93       	push	r20
    42f0:	5f 93       	push	r21
    42f2:	6f 93       	push	r22
    42f4:	7f 93       	push	r23
    42f6:	8f 93       	push	r24
    42f8:	9f 93       	push	r25
    42fa:	af 93       	push	r26
    42fc:	bf 93       	push	r27
    42fe:	ef 93       	push	r30
    4300:	ff 93       	push	r31
    4302:	e0 91 50 22 	lds	r30, 0x2250
    4306:	f0 91 51 22 	lds	r31, 0x2251
    430a:	30 97       	sbiw	r30, 0x00	; 0
    430c:	29 f0       	breq	.+10     	; 0x4318 <__vector_120+0x3c>
    430e:	80 91 46 23 	lds	r24, 0x2346
    4312:	90 91 47 23 	lds	r25, 0x2347
    4316:	19 95       	eicall
    4318:	ff 91       	pop	r31
    431a:	ef 91       	pop	r30
    431c:	bf 91       	pop	r27
    431e:	af 91       	pop	r26
    4320:	9f 91       	pop	r25
    4322:	8f 91       	pop	r24
    4324:	7f 91       	pop	r23
    4326:	6f 91       	pop	r22
    4328:	5f 91       	pop	r21
    432a:	4f 91       	pop	r20
    432c:	3f 91       	pop	r19
    432e:	2f 91       	pop	r18
    4330:	0f 90       	pop	r0
    4332:	0b be       	out	0x3b, r0	; 59
    4334:	0f 90       	pop	r0
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	0f 90       	pop	r0
    433a:	1f 90       	pop	r1
    433c:	18 95       	reti

0000433e <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    433e:	1f 92       	push	r1
    4340:	0f 92       	push	r0
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	0f 92       	push	r0
    4346:	11 24       	eor	r1, r1
    4348:	0b b6       	in	r0, 0x3b	; 59
    434a:	0f 92       	push	r0
    434c:	2f 93       	push	r18
    434e:	3f 93       	push	r19
    4350:	4f 93       	push	r20
    4352:	5f 93       	push	r21
    4354:	6f 93       	push	r22
    4356:	7f 93       	push	r23
    4358:	8f 93       	push	r24
    435a:	9f 93       	push	r25
    435c:	af 93       	push	r26
    435e:	bf 93       	push	r27
    4360:	ef 93       	push	r30
    4362:	ff 93       	push	r31
    4364:	e0 91 52 22 	lds	r30, 0x2252
    4368:	f0 91 53 22 	lds	r31, 0x2253
    436c:	30 97       	sbiw	r30, 0x00	; 0
    436e:	29 f0       	breq	.+10     	; 0x437a <__vector_121+0x3c>
    4370:	80 91 48 23 	lds	r24, 0x2348
    4374:	90 91 49 23 	lds	r25, 0x2349
    4378:	19 95       	eicall
    437a:	ff 91       	pop	r31
    437c:	ef 91       	pop	r30
    437e:	bf 91       	pop	r27
    4380:	af 91       	pop	r26
    4382:	9f 91       	pop	r25
    4384:	8f 91       	pop	r24
    4386:	7f 91       	pop	r23
    4388:	6f 91       	pop	r22
    438a:	5f 91       	pop	r21
    438c:	4f 91       	pop	r20
    438e:	3f 91       	pop	r19
    4390:	2f 91       	pop	r18
    4392:	0f 90       	pop	r0
    4394:	0b be       	out	0x3b, r0	; 59
    4396:	0f 90       	pop	r0
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	0f 90       	pop	r0
    439c:	1f 90       	pop	r1
    439e:	18 95       	reti

000043a0 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    43a0:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    43a4:	fd cf       	rjmp	.-6      	; 0x43a0 <__cxa_pure_virtual>

000043a6 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    43a6:	8e e8       	ldi	r24, 0x8E	; 142
    43a8:	93 e2       	ldi	r25, 0x23	; 35
    43aa:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    43ae:	8c e8       	ldi	r24, 0x8C	; 140
    43b0:	93 e2       	ldi	r25, 0x23	; 35
    43b2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    43b6:	83 e7       	ldi	r24, 0x73	; 115
    43b8:	93 e2       	ldi	r25, 0x23	; 35
    43ba:	0e 94 9e 23 	call	0x473c	; 0x473c <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    43be:	89 e6       	ldi	r24, 0x69	; 105
    43c0:	93 e2       	ldi	r25, 0x23	; 35
    43c2:	0e 94 90 02 	call	0x520	; 0x520 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    43c6:	88 e6       	ldi	r24, 0x68	; 104
    43c8:	93 e2       	ldi	r25, 0x23	; 35
    43ca:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    43ce:	8e e4       	ldi	r24, 0x4E	; 78
    43d0:	93 e2       	ldi	r25, 0x23	; 35
    43d2:	0e 94 98 04 	call	0x930	; 0x930 <_ZN16CLaserControlAppC1Ev>
    43d6:	08 95       	ret

000043d8 <_GLOBAL__sub_D_dacSPI>:
    43d8:	8e e4       	ldi	r24, 0x4E	; 78
    43da:	93 e2       	ldi	r25, 0x23	; 35
    43dc:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    43e0:	88 e6       	ldi	r24, 0x68	; 104
    43e2:	93 e2       	ldi	r25, 0x23	; 35
    43e4:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    43e8:	89 e6       	ldi	r24, 0x69	; 105
    43ea:	93 e2       	ldi	r25, 0x23	; 35
    43ec:	0e 94 91 02 	call	0x522	; 0x522 <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    43f0:	83 e7       	ldi	r24, 0x73	; 115
    43f2:	93 e2       	ldi	r25, 0x23	; 35
    43f4:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    43f8:	8c e8       	ldi	r24, 0x8C	; 140
    43fa:	93 e2       	ldi	r25, 0x23	; 35
    43fc:	0e 94 88 02 	call	0x510	; 0x510 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4400:	8e e8       	ldi	r24, 0x8E	; 142
    4402:	93 e2       	ldi	r25, 0x23	; 35
    4404:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_ZN4CSPID1Ev>
    4408:	08 95       	ret

0000440a <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    440a:	ef 92       	push	r14
    440c:	0f 93       	push	r16
    440e:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    4410:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    4412:	89 e6       	ldi	r24, 0x69	; 105
    4414:	93 e2       	ldi	r25, 0x23	; 35
    4416:	0e 94 92 02 	call	0x524	; 0x524 <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    441a:	88 e6       	ldi	r24, 0x68	; 104
    441c:	93 e2       	ldi	r25, 0x23	; 35
    441e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4422:	0f 2e       	mov	r0, r31
    4424:	f3 e0       	ldi	r31, 0x03	; 3
    4426:	ef 2e       	mov	r14, r31
    4428:	f0 2d       	mov	r31, r0
    442a:	00 e0       	ldi	r16, 0x00	; 0
    442c:	23 e0       	ldi	r18, 0x03	; 3
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	61 e0       	ldi	r22, 0x01	; 1
    4432:	8e e8       	ldi	r24, 0x8E	; 142
    4434:	93 e2       	ldi	r25, 0x23	; 35
    4436:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    443a:	01 e0       	ldi	r16, 0x01	; 1
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	40 e0       	ldi	r20, 0x00	; 0
    4440:	6d e0       	ldi	r22, 0x0D	; 13
    4442:	8c e8       	ldi	r24, 0x8C	; 140
    4444:	93 e2       	ldi	r25, 0x23	; 35
    4446:	0e 94 00 02 	call	0x400	; 0x400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    444a:	00 e0       	ldi	r16, 0x00	; 0
    444c:	11 e0       	ldi	r17, 0x01	; 1
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	31 e0       	ldi	r19, 0x01	; 1
    4452:	4e e4       	ldi	r20, 0x4E	; 78
    4454:	53 e2       	ldi	r21, 0x23	; 35
    4456:	6c e8       	ldi	r22, 0x8C	; 140
    4458:	73 e2       	ldi	r23, 0x23	; 35
    445a:	83 e7       	ldi	r24, 0x73	; 115
    445c:	93 e2       	ldi	r25, 0x23	; 35
    445e:	0e 94 a4 23 	call	0x4748	; 0x4748 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    4462:	63 e7       	ldi	r22, 0x73	; 115
    4464:	73 e2       	ldi	r23, 0x23	; 35
    4466:	8e e4       	ldi	r24, 0x4E	; 78
    4468:	93 e2       	ldi	r25, 0x23	; 35
    446a:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    446e:	89 e6       	ldi	r24, 0x69	; 105
    4470:	93 e2       	ldi	r25, 0x23	; 35
    4472:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    4476:	78 94       	sei
}
    4478:	1f 91       	pop	r17
    447a:	0f 91       	pop	r16
    447c:	ef 90       	pop	r14
    447e:	08 95       	ret

00004480 <main>:
	 
int main(void)
{
    4480:	cf 93       	push	r28
    4482:	df 93       	push	r29
    4484:	1f 92       	push	r1
    4486:	1f 92       	push	r1
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    448c:	0e 94 05 22 	call	0x440a	; 0x440a <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    4490:	88 e6       	ldi	r24, 0x68	; 104
    4492:	93 e2       	ldi	r25, 0x23	; 35
    4494:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN12CSoundPlayer4PlayEv>
	laserBoard.Relay1On();
    4498:	89 e6       	ldi	r24, 0x69	; 105
    449a:	93 e2       	ldi	r25, 0x23	; 35
    449c:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN11CLaserBoard8Relay1OnEv>
    44a0:	2f ef       	ldi	r18, 0xFF	; 255
    44a2:	83 ec       	ldi	r24, 0xC3	; 195
    44a4:	99 e0       	ldi	r25, 0x09	; 9
    44a6:	21 50       	subi	r18, 0x01	; 1
    44a8:	80 40       	sbci	r24, 0x00	; 0
    44aa:	90 40       	sbci	r25, 0x00	; 0
    44ac:	e1 f7       	brne	.-8      	; 0x44a6 <main+0x26>
    44ae:	00 c0       	rjmp	.+0      	; 0x44b0 <main+0x30>
    44b0:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    44b2:	89 e6       	ldi	r24, 0x69	; 105
    44b4:	93 e2       	ldi	r25, 0x23	; 35
    44b6:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    44ba:	19 82       	std	Y+1, r1	; 0x01
    44bc:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    44be:	42 e0       	ldi	r20, 0x02	; 2
    44c0:	50 e0       	ldi	r21, 0x00	; 0
    44c2:	be 01       	movw	r22, r28
    44c4:	6f 5f       	subi	r22, 0xFF	; 255
    44c6:	7f 4f       	sbci	r23, 0xFF	; 255
    44c8:	8e e8       	ldi	r24, 0x8E	; 142
    44ca:	93 e2       	ldi	r25, 0x23	; 35
    44cc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    44d0:	8e e4       	ldi	r24, 0x4E	; 78
    44d2:	93 e2       	ldi	r25, 0x23	; 35
    44d4:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    44d8:	18 ec       	ldi	r17, 0xC8	; 200
    44da:	8f e3       	ldi	r24, 0x3F	; 63
    44dc:	9f e1       	ldi	r25, 0x1F	; 31
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	f1 f7       	brne	.-4      	; 0x44de <main+0x5e>
    44e2:	00 c0       	rjmp	.+0      	; 0x44e4 <main+0x64>
    44e4:	00 00       	nop
    44e6:	40 91 4c 23 	lds	r20, 0x234C
    44ea:	50 91 4d 23 	lds	r21, 0x234D
    44ee:	ca 01       	movw	r24, r20
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	80 93 4c 23 	sts	0x234C, r24
    44f6:	90 93 4d 23 	sts	0x234D, r25
    44fa:	9a 01       	movw	r18, r20
    44fc:	36 95       	lsr	r19
    44fe:	27 95       	ror	r18
    4500:	36 95       	lsr	r19
    4502:	27 95       	ror	r18
    4504:	36 95       	lsr	r19
    4506:	27 95       	ror	r18
    4508:	ab e7       	ldi	r26, 0x7B	; 123
    450a:	b4 e1       	ldi	r27, 0x14	; 20
    450c:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <__umulhisi3>
    4510:	96 95       	lsr	r25
    4512:	87 95       	ror	r24
    4514:	18 9f       	mul	r17, r24
    4516:	90 01       	movw	r18, r0
    4518:	19 9f       	mul	r17, r25
    451a:	30 0d       	add	r19, r0
    451c:	11 24       	eor	r1, r1
    451e:	42 17       	cp	r20, r18
    4520:	53 07       	cpc	r21, r19
    4522:	21 f4       	brne	.+8      	; 0x452c <main+0xac>
			App.Run();
    4524:	8e e4       	ldi	r24, 0x4E	; 78
    4526:	93 e2       	ldi	r25, 0x23	; 35
    4528:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN16CLaserControlApp3RunEv>
			
		laserBoard.PortCheck();
    452c:	89 e6       	ldi	r24, 0x69	; 105
    452e:	93 e2       	ldi	r25, 0x23	; 35
    4530:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN11CLaserBoard9PortCheckEv>
		float y = 1023.0f * (1.0f + sinf(x)) * 0.5f;
		uint16_t data = ((uint16_t)y) << 2;
	
		// Send to DAC	
		dacSPI.Send((uint8_t*)&data, sizeof(data));*/
    }
    4534:	d2 cf       	rjmp	.-92     	; 0x44da <main+0x5a>

00004536 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4536:	cf 93       	push	r28
    4538:	df 93       	push	r29
    453a:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    453c:	ec 81       	ldd	r30, Y+4	; 0x04
    453e:	fd 81       	ldd	r31, Y+5	; 0x05
    4540:	8a ea       	ldi	r24, 0xAA	; 170
    4542:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4544:	ec 81       	ldd	r30, Y+4	; 0x04
    4546:	fd 81       	ldd	r31, Y+5	; 0x05
    4548:	8c ec       	ldi	r24, 0xCC	; 204
    454a:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    454c:	ec 81       	ldd	r30, Y+4	; 0x04
    454e:	fd 81       	ldd	r31, Y+5	; 0x05
    4550:	82 e0       	ldi	r24, 0x02	; 2
    4552:	82 0f       	add	r24, r18
    4554:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4556:	ec 81       	ldd	r30, Y+4	; 0x04
    4558:	fd 81       	ldd	r31, Y+5	; 0x05
    455a:	80 e8       	ldi	r24, 0x80	; 128
    455c:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    455e:	ec 81       	ldd	r30, Y+4	; 0x04
    4560:	fd 81       	ldd	r31, Y+5	; 0x05
    4562:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4564:	85 e0       	ldi	r24, 0x05	; 5
    4566:	82 0f       	add	r24, r18
    4568:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	21 15       	cp	r18, r1
    456e:	31 05       	cpc	r19, r1
    4570:	81 f0       	breq	.+32     	; 0x4592 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4572:	da 01       	movw	r26, r20
    4574:	42 0f       	add	r20, r18
    4576:	53 1f       	adc	r21, r19
    4578:	65 e0       	ldi	r22, 0x05	; 5
    457a:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    457c:	9d 91       	ld	r25, X+
    457e:	ec 81       	ldd	r30, Y+4	; 0x04
    4580:	fd 81       	ldd	r31, Y+5	; 0x05
    4582:	e6 0f       	add	r30, r22
    4584:	f7 1f       	adc	r31, r23
    4586:	90 83       	st	Z, r25
    4588:	6f 5f       	subi	r22, 0xFF	; 255
    458a:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    458c:	a4 17       	cp	r26, r20
    458e:	b5 07       	cpc	r27, r21
    4590:	a9 f7       	brne	.-22     	; 0x457c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	08 95       	ret

00004598 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4598:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    459a:	a4 81       	ldd	r26, Z+4	; 0x04
    459c:	b5 81       	ldd	r27, Z+5	; 0x05
    459e:	8a ea       	ldi	r24, 0xAA	; 170
    45a0:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    45a2:	a4 81       	ldd	r26, Z+4	; 0x04
    45a4:	b5 81       	ldd	r27, Z+5	; 0x05
    45a6:	8c ec       	ldi	r24, 0xCC	; 204
    45a8:	11 96       	adiw	r26, 0x01	; 1
    45aa:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    45ac:	a4 81       	ldd	r26, Z+4	; 0x04
    45ae:	b5 81       	ldd	r27, Z+5	; 0x05
    45b0:	83 e0       	ldi	r24, 0x03	; 3
    45b2:	12 96       	adiw	r26, 0x02	; 2
    45b4:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    45b6:	a4 81       	ldd	r26, Z+4	; 0x04
    45b8:	b5 81       	ldd	r27, Z+5	; 0x05
    45ba:	81 e8       	ldi	r24, 0x81	; 129
    45bc:	13 96       	adiw	r26, 0x03	; 3
    45be:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    45c0:	a4 81       	ldd	r26, Z+4	; 0x04
    45c2:	b5 81       	ldd	r27, Z+5	; 0x05
    45c4:	14 96       	adiw	r26, 0x04	; 4
    45c6:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    45c8:	a4 81       	ldd	r26, Z+4	; 0x04
    45ca:	b5 81       	ldd	r27, Z+5	; 0x05
    45cc:	15 96       	adiw	r26, 0x05	; 5
    45ce:	4c 93       	st	X, r20
	tx_frame_length = 6;
    45d0:	86 e0       	ldi	r24, 0x06	; 6
    45d2:	81 87       	std	Z+9, r24	; 0x09
    45d4:	08 95       	ret

000045d6 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    45de:	dc 01       	movw	r26, r24
    45e0:	14 96       	adiw	r26, 0x04	; 4
    45e2:	ed 91       	ld	r30, X+
    45e4:	fc 91       	ld	r31, X
    45e6:	15 97       	sbiw	r26, 0x05	; 5
    45e8:	aa ea       	ldi	r26, 0xAA	; 170
    45ea:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    45ec:	ec 01       	movw	r28, r24
    45ee:	ec 81       	ldd	r30, Y+4	; 0x04
    45f0:	fd 81       	ldd	r31, Y+5	; 0x05
    45f2:	ac ec       	ldi	r26, 0xCC	; 204
    45f4:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    45f6:	ec 81       	ldd	r30, Y+4	; 0x04
    45f8:	fd 81       	ldd	r31, Y+5	; 0x05
    45fa:	a3 e0       	ldi	r26, 0x03	; 3
    45fc:	a2 0f       	add	r26, r18
    45fe:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4600:	ec 81       	ldd	r30, Y+4	; 0x04
    4602:	fd 81       	ldd	r31, Y+5	; 0x05
    4604:	a2 e8       	ldi	r26, 0x82	; 130
    4606:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4608:	ec 81       	ldd	r30, Y+4	; 0x04
    460a:	fd 81       	ldd	r31, Y+5	; 0x05
    460c:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    460e:	ec 81       	ldd	r30, Y+4	; 0x04
    4610:	fd 81       	ldd	r31, Y+5	; 0x05
    4612:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4614:	66 e0       	ldi	r22, 0x06	; 6
    4616:	62 0f       	add	r22, r18
    4618:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    461a:	36 95       	lsr	r19
    461c:	27 95       	ror	r18
    461e:	21 15       	cp	r18, r1
    4620:	31 05       	cpc	r19, r1
    4622:	e1 f0       	breq	.+56     	; 0x465c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4624:	e4 2f       	mov	r30, r20
    4626:	f5 2f       	mov	r31, r21
    4628:	2d 5f       	subi	r18, 0xFD	; 253
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
    462c:	22 0f       	add	r18, r18
    462e:	33 1f       	adc	r19, r19
    4630:	46 e0       	ldi	r20, 0x06	; 6
    4632:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4634:	ec 01       	movw	r28, r24
    4636:	ac 81       	ldd	r26, Y+4	; 0x04
    4638:	bd 81       	ldd	r27, Y+5	; 0x05
    463a:	a4 0f       	add	r26, r20
    463c:	b5 1f       	adc	r27, r21
    463e:	61 81       	ldd	r22, Z+1	; 0x01
    4640:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4642:	ac 81       	ldd	r26, Y+4	; 0x04
    4644:	bd 81       	ldd	r27, Y+5	; 0x05
    4646:	a4 0f       	add	r26, r20
    4648:	b5 1f       	adc	r27, r21
    464a:	60 81       	ld	r22, Z
    464c:	32 96       	adiw	r30, 0x02	; 2
    464e:	11 96       	adiw	r26, 0x01	; 1
    4650:	6c 93       	st	X, r22
    4652:	4e 5f       	subi	r20, 0xFE	; 254
    4654:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4656:	42 17       	cp	r20, r18
    4658:	53 07       	cpc	r21, r19
    465a:	61 f7       	brne	.-40     	; 0x4634 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	1f 91       	pop	r17
    4662:	0f 91       	pop	r16
    4664:	08 95       	ret

00004666 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4666:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4668:	a4 81       	ldd	r26, Z+4	; 0x04
    466a:	b5 81       	ldd	r27, Z+5	; 0x05
    466c:	8a ea       	ldi	r24, 0xAA	; 170
    466e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4670:	a4 81       	ldd	r26, Z+4	; 0x04
    4672:	b5 81       	ldd	r27, Z+5	; 0x05
    4674:	8c ec       	ldi	r24, 0xCC	; 204
    4676:	11 96       	adiw	r26, 0x01	; 1
    4678:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    467a:	a4 81       	ldd	r26, Z+4	; 0x04
    467c:	b5 81       	ldd	r27, Z+5	; 0x05
    467e:	84 e0       	ldi	r24, 0x04	; 4
    4680:	12 96       	adiw	r26, 0x02	; 2
    4682:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4684:	a4 81       	ldd	r26, Z+4	; 0x04
    4686:	b5 81       	ldd	r27, Z+5	; 0x05
    4688:	83 e8       	ldi	r24, 0x83	; 131
    468a:	13 96       	adiw	r26, 0x03	; 3
    468c:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    468e:	a4 81       	ldd	r26, Z+4	; 0x04
    4690:	b5 81       	ldd	r27, Z+5	; 0x05
    4692:	14 96       	adiw	r26, 0x04	; 4
    4694:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4696:	a4 81       	ldd	r26, Z+4	; 0x04
    4698:	b5 81       	ldd	r27, Z+5	; 0x05
    469a:	15 96       	adiw	r26, 0x05	; 5
    469c:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    469e:	a4 81       	ldd	r26, Z+4	; 0x04
    46a0:	b5 81       	ldd	r27, Z+5	; 0x05
    46a2:	16 96       	adiw	r26, 0x06	; 6
    46a4:	4c 93       	st	X, r20
	tx_frame_length = 7;
    46a6:	87 e0       	ldi	r24, 0x07	; 7
    46a8:	81 87       	std	Z+9, r24	; 0x09
    46aa:	08 95       	ret

000046ac <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    46ac:	0f 93       	push	r16
    46ae:	1f 93       	push	r17
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
    46b4:	ec 01       	movw	r28, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    46ba:	6f 83       	std	Y+7, r22	; 0x07
    46bc:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    46be:	4a 87       	std	Y+10, r20	; 0x0a
    46c0:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    46c2:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <malloc>
    46c6:	8a 83       	std	Y+2, r24	; 0x02
    46c8:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    46ca:	c8 01       	movw	r24, r16
    46cc:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <malloc>
    46d0:	8c 83       	std	Y+4, r24	; 0x04
    46d2:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    46d4:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    46d6:	1e 82       	std	Y+6, r1	; 0x06
}
    46d8:	df 91       	pop	r29
    46da:	cf 91       	pop	r28
    46dc:	1f 91       	pop	r17
    46de:	0f 91       	pop	r16
    46e0:	08 95       	ret

000046e2 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	ec 01       	movw	r28, r24
	free(rx_buffer);
    46e8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ea:	9b 81       	ldd	r25, Y+3	; 0x03
    46ec:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <free>
	free(tx_buffer);
    46f0:	8c 81       	ldd	r24, Y+4	; 0x04
    46f2:	9d 81       	ldd	r25, Y+5	; 0x05
    46f4:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <free>
}
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	08 95       	ret

000046fe <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    46fe:	08 95       	ret

00004700 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    4700:	dc 01       	movw	r26, r24
    4702:	57 96       	adiw	r26, 0x17	; 23
    4704:	8d 91       	ld	r24, X+
    4706:	9c 91       	ld	r25, X
    4708:	58 97       	sbiw	r26, 0x18	; 24
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	39 f0       	breq	.+14     	; 0x471c <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    470e:	dc 01       	movw	r26, r24
    4710:	ed 91       	ld	r30, X+
    4712:	fc 91       	ld	r31, X
    4714:	02 80       	ldd	r0, Z+2	; 0x02
    4716:	f3 81       	ldd	r31, Z+3	; 0x03
    4718:	e0 2d       	mov	r30, r0
    471a:	19 95       	eicall
    471c:	08 95       	ret

0000471e <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    471e:	dc 01       	movw	r26, r24
    4720:	57 96       	adiw	r26, 0x17	; 23
    4722:	8d 91       	ld	r24, X+
    4724:	9c 91       	ld	r25, X
    4726:	58 97       	sbiw	r26, 0x18	; 24
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	39 f0       	breq	.+14     	; 0x473a <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    472c:	dc 01       	movw	r26, r24
    472e:	ed 91       	ld	r30, X+
    4730:	fc 91       	ld	r31, X
    4732:	04 80       	ldd	r0, Z+4	; 0x04
    4734:	f5 81       	ldd	r31, Z+5	; 0x05
    4736:	e0 2d       	mov	r30, r0
    4738:	19 95       	eicall
    473a:	08 95       	ret

0000473c <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    473c:	21 e2       	ldi	r18, 0x21	; 33
    473e:	31 e2       	ldi	r19, 0x21	; 33
    4740:	fc 01       	movw	r30, r24
    4742:	20 83       	st	Z, r18
    4744:	31 83       	std	Z+1, r19	; 0x01
    4746:	08 95       	ret

00004748 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4748:	cf 92       	push	r12
    474a:	df 92       	push	r13
    474c:	ef 92       	push	r14
    474e:	ff 92       	push	r15
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	ec 01       	movw	r28, r24
    475a:	7b 01       	movw	r14, r22
    475c:	6a 01       	movw	r12, r20
    475e:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4760:	2f 83       	std	Y+7, r18	; 0x07
    4762:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4764:	0a 87       	std	Y+10, r16	; 0x0a
    4766:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4768:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <malloc>
    476c:	8a 83       	std	Y+2, r24	; 0x02
    476e:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4770:	c8 01       	movw	r24, r16
    4772:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <malloc>
    4776:	8c 83       	std	Y+4, r24	; 0x04
    4778:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    477a:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    477c:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    477e:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4780:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4782:	18 8a       	std	Y+16, r1	; 0x10
    4784:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4786:	1a 8a       	std	Y+18, r1	; 0x12
    4788:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    478a:	87 e0       	ldi	r24, 0x07	; 7
    478c:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4792:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4794:	ec 86       	std	Y+12, r14	; 0x0c
    4796:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    4798:	d7 01       	movw	r26, r14
    479a:	ed 91       	ld	r30, X+
    479c:	fc 91       	ld	r31, X
    479e:	04 84       	ldd	r0, Z+12	; 0x0c
    47a0:	f5 85       	ldd	r31, Z+13	; 0x0d
    47a2:	e0 2d       	mov	r30, r0
    47a4:	45 eb       	ldi	r20, 0xB5	; 181
    47a6:	54 e2       	ldi	r21, 0x24	; 36
    47a8:	be 01       	movw	r22, r28
    47aa:	c7 01       	movw	r24, r14
    47ac:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    47ae:	d7 01       	movw	r26, r14
    47b0:	ed 91       	ld	r30, X+
    47b2:	fc 91       	ld	r31, X
    47b4:	06 84       	ldd	r0, Z+14	; 0x0e
    47b6:	f7 85       	ldd	r31, Z+15	; 0x0f
    47b8:	e0 2d       	mov	r30, r0
    47ba:	4a e1       	ldi	r20, 0x1A	; 26
    47bc:	55 e2       	ldi	r21, 0x25	; 37
    47be:	be 01       	movw	r22, r28
    47c0:	c7 01       	movw	r24, r14
    47c2:	19 95       	eicall
	
	// Set event handler
	if (handler)
    47c4:	c1 14       	cp	r12, r1
    47c6:	d1 04       	cpc	r13, r1
    47c8:	19 f0       	breq	.+6      	; 0x47d0 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    47ca:	cf 8a       	std	Y+23, r12	; 0x17
    47cc:	d8 8e       	std	Y+24, r13	; 0x18
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    47d0:	cf 8b       	std	Y+23, r28	; 0x17
    47d2:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	df 90       	pop	r13
    47e2:	cf 90       	pop	r12
    47e4:	08 95       	ret

000047e6 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    47e6:	21 e2       	ldi	r18, 0x21	; 33
    47e8:	31 e2       	ldi	r19, 0x21	; 33
    47ea:	fc 01       	movw	r30, r24
    47ec:	20 83       	st	Z, r18
    47ee:	31 83       	std	Z+1, r19	; 0x01
    47f0:	0e 94 7f 23 	call	0x46fe	; 0x46fe <_ZN16CMBEventsHandlerD1Ev>
    47f4:	08 95       	ret

000047f6 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    47f6:	cf 93       	push	r28
    47f8:	df 93       	push	r29
    47fa:	ec 01       	movw	r28, r24
    47fc:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    47fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	4b 30       	cpi	r20, 0x0B	; 11
    4804:	51 05       	cpc	r21, r1
    4806:	08 f0       	brcs	.+2      	; 0x480a <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4808:	ad c0       	rjmp	.+346    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    480a:	fa 01       	movw	r30, r20
    480c:	88 27       	eor	r24, r24
    480e:	e8 5f       	subi	r30, 0xF8	; 248
    4810:	fe 4f       	sbci	r31, 0xFE	; 254
    4812:	8f 4f       	sbci	r24, 0xFF	; 255
    4814:	0c 94 f5 25 	jmp	0x4bea	; 0x4bea <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    4818:	9a 3a       	cpi	r25, 0xAA	; 170
    481a:	19 f4       	brne	.+6      	; 0x4822 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    481c:	82 e0       	ldi	r24, 0x02	; 2
    481e:	8e 87       	std	Y+14, r24	; 0x0e
    4820:	a1 c0       	rjmp	.+322    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	8e 87       	std	Y+14, r24	; 0x0e
    4826:	9e c0       	rjmp	.+316    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    4828:	9c 3c       	cpi	r25, 0xCC	; 204
    482a:	19 f4       	brne	.+6      	; 0x4832 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    482c:	83 e0       	ldi	r24, 0x03	; 3
    482e:	8e 87       	std	Y+14, r24	; 0x0e
    4830:	99 c0       	rjmp	.+306    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	8e 87       	std	Y+14, r24	; 0x0e
    4836:	96 c0       	rjmp	.+300    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    4838:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    483a:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    483c:	1a 8a       	std	Y+18, r1	; 0x12
    483e:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    4840:	10 92 94 23 	sts	0x2394, r1
    4844:	10 92 95 23 	sts	0x2395, r1
			modbus_receiver_state = rx_FrameReceive;
    4848:	84 e0       	ldi	r24, 0x04	; 4
    484a:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    484c:	8b c0       	rjmp	.+278    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    484e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4850:	ea 81       	ldd	r30, Y+2	; 0x02
    4852:	fb 81       	ldd	r31, Y+3	; 0x03
    4854:	e8 0f       	add	r30, r24
    4856:	f1 1d       	adc	r31, r1
    4858:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    485a:	2f 85       	ldd	r18, Y+15	; 0x0f
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	4f 81       	ldd	r20, Y+7	; 0x07
    4860:	58 85       	ldd	r21, Y+8	; 0x08
    4862:	42 17       	cp	r20, r18
    4864:	53 07       	cpc	r21, r19
    4866:	18 f4       	brcc	.+6      	; 0x486e <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    4868:	89 e0       	ldi	r24, 0x09	; 9
    486a:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    486c:	7b c0       	rjmp	.+246    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    486e:	2a 89       	ldd	r18, Y+18	; 0x12
    4870:	3b 89       	ldd	r19, Y+19	; 0x13
    4872:	29 27       	eor	r18, r25
    4874:	92 2f       	mov	r25, r18
    4876:	92 95       	swap	r25
    4878:	92 27       	eor	r25, r18
    487a:	09 2e       	mov	r0, r25
    487c:	96 95       	lsr	r25
    487e:	96 95       	lsr	r25
    4880:	90 25       	eor	r25, r0
    4882:	09 2e       	mov	r0, r25
    4884:	96 95       	lsr	r25
    4886:	90 25       	eor	r25, r0
    4888:	97 70       	andi	r25, 0x07	; 7
    488a:	02 2e       	mov	r0, r18
    488c:	23 2f       	mov	r18, r19
    488e:	96 95       	lsr	r25
    4890:	07 94       	ror	r0
    4892:	97 95       	ror	r25
    4894:	30 2d       	mov	r19, r0
    4896:	29 27       	eor	r18, r25
    4898:	06 94       	lsr	r0
    489a:	97 95       	ror	r25
    489c:	30 25       	eor	r19, r0
    489e:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    48a0:	2a 8b       	std	Y+18, r18	; 0x12
    48a2:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    48a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    48a6:	8f 5f       	subi	r24, 0xFF	; 255
    48a8:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    48aa:	80 91 94 23 	lds	r24, 0x2394
    48ae:	90 91 95 23 	lds	r25, 0x2395
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	80 93 94 23 	sts	0x2394, r24
    48b8:	90 93 95 23 	sts	0x2395, r25
			if (rx_buffer_pos == rx_frame_length)
    48bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    48be:	8e 81       	ldd	r24, Y+6	; 0x06
    48c0:	48 13       	cpse	r20, r24
    48c2:	50 c0       	rjmp	.+160    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    48c4:	88 e0       	ldi	r24, 0x08	; 8
    48c6:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    48c8:	e8 81       	ld	r30, Y
    48ca:	f9 81       	ldd	r31, Y+1	; 0x01
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	6a 81       	ldd	r22, Y+2	; 0x02
    48d0:	7b 81       	ldd	r23, Y+3	; 0x03
    48d2:	01 90       	ld	r0, Z+
    48d4:	f0 81       	ld	r31, Z
    48d6:	e0 2d       	mov	r30, r0
    48d8:	ce 01       	movw	r24, r28
    48da:	19 95       	eicall
				if (CallbackHandler != 0)
    48dc:	8f 89       	ldd	r24, Y+23	; 0x17
    48de:	98 8d       	ldd	r25, Y+24	; 0x18
    48e0:	00 97       	sbiw	r24, 0x00	; 0
    48e2:	09 f4       	brne	.+2      	; 0x48e6 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    48e4:	3f c0       	rjmp	.+126    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    48e6:	dc 01       	movw	r26, r24
    48e8:	ed 91       	ld	r30, X+
    48ea:	fc 91       	ld	r31, X
    48ec:	4e 81       	ldd	r20, Y+6	; 0x06
    48ee:	50 e0       	ldi	r21, 0x00	; 0
    48f0:	6a 81       	ldd	r22, Y+2	; 0x02
    48f2:	7b 81       	ldd	r23, Y+3	; 0x03
    48f4:	01 90       	ld	r0, Z+
    48f6:	f0 81       	ld	r31, Z
    48f8:	e0 2d       	mov	r30, r0
    48fa:	19 95       	eicall
    48fc:	33 c0       	rjmp	.+102    	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    48fe:	69 2f       	mov	r22, r25
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	68 8b       	std	Y+16, r22	; 0x10
    4904:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    4906:	86 e0       	ldi	r24, 0x06	; 6
    4908:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    490a:	2c c0       	rjmp	.+88     	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    490c:	28 89       	ldd	r18, Y+16	; 0x10
    490e:	39 89       	ldd	r19, Y+17	; 0x11
    4910:	a9 01       	movw	r20, r18
    4912:	59 2b       	or	r21, r25
    4914:	48 8b       	std	Y+16, r20	; 0x10
    4916:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    4918:	2a 89       	ldd	r18, Y+18	; 0x12
    491a:	3b 89       	ldd	r19, Y+19	; 0x13
    491c:	42 17       	cp	r20, r18
    491e:	53 07       	cpc	r21, r19
    4920:	e9 f4       	brne	.+58     	; 0x495c <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    4922:	88 e0       	ldi	r24, 0x08	; 8
    4924:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4926:	e8 81       	ld	r30, Y
    4928:	f9 81       	ldd	r31, Y+1	; 0x01
    492a:	4e 81       	ldd	r20, Y+6	; 0x06
    492c:	50 e0       	ldi	r21, 0x00	; 0
    492e:	6a 81       	ldd	r22, Y+2	; 0x02
    4930:	7b 81       	ldd	r23, Y+3	; 0x03
    4932:	01 90       	ld	r0, Z+
    4934:	f0 81       	ld	r31, Z
    4936:	e0 2d       	mov	r30, r0
    4938:	ce 01       	movw	r24, r28
    493a:	19 95       	eicall
				if (CallbackHandler != 0)
    493c:	8f 89       	ldd	r24, Y+23	; 0x17
    493e:	98 8d       	ldd	r25, Y+24	; 0x18
    4940:	00 97       	sbiw	r24, 0x00	; 0
    4942:	81 f0       	breq	.+32     	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4944:	dc 01       	movw	r26, r24
    4946:	ed 91       	ld	r30, X+
    4948:	fc 91       	ld	r31, X
    494a:	4e 81       	ldd	r20, Y+6	; 0x06
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	6a 81       	ldd	r22, Y+2	; 0x02
    4950:	7b 81       	ldd	r23, Y+3	; 0x03
    4952:	01 90       	ld	r0, Z+
    4954:	f0 81       	ld	r31, Z
    4956:	e0 2d       	mov	r30, r0
    4958:	19 95       	eicall
    495a:	04 c0       	rjmp	.+8      	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    495c:	89 e0       	ldi	r24, 0x09	; 9
    495e:	8e 87       	std	Y+14, r24	; 0x0e
    4960:	01 c0       	rjmp	.+2      	; 0x4964 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    4962:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	08 95       	ret

0000496a <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    496a:	cf 93       	push	r28
    496c:	df 93       	push	r29
    496e:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4970:	8c 85       	ldd	r24, Y+12	; 0x0c
    4972:	9d 85       	ldd	r25, Y+13	; 0x0d
    4974:	dc 01       	movw	r26, r24
    4976:	ed 91       	ld	r30, X+
    4978:	fc 91       	ld	r31, X
    497a:	02 80       	ldd	r0, Z+2	; 0x02
    497c:	f3 81       	ldd	r31, Z+3	; 0x03
    497e:	e0 2d       	mov	r30, r0
    4980:	19 95       	eicall
	owner->OnReceiveByte(data);
    4982:	68 2f       	mov	r22, r24
    4984:	ce 01       	movw	r24, r28
    4986:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <_ZN9CMBSender13OnReceiveByteEh>
}
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	08 95       	ret

00004990 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4990:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4992:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4994:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4996:	10 8a       	std	Z+16, r1	; 0x10
    4998:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    499a:	12 8a       	std	Z+18, r1	; 0x12
    499c:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    499e:	16 86       	std	Z+14, r1	; 0x0e
    49a0:	08 95       	ret

000049a2 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    49a2:	cf 93       	push	r28
    49a4:	df 93       	push	r29
    49a6:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    49a8:	8c 89       	ldd	r24, Y+20	; 0x14
    49aa:	84 30       	cpi	r24, 0x04	; 4
    49ac:	38 f4       	brcc	.+14     	; 0x49bc <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    49ae:	82 30       	cpi	r24, 0x02	; 2
    49b0:	b8 f5       	brcc	.+110    	; 0x4a20 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    49b2:	88 23       	and	r24, r24
    49b4:	31 f0       	breq	.+12     	; 0x49c2 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    49b6:	81 30       	cpi	r24, 0x01	; 1
    49b8:	d1 f0       	breq	.+52     	; 0x49ee <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    49ba:	39 c0       	rjmp	.+114    	; 0x4a2e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    49bc:	85 30       	cpi	r24, 0x05	; 5
    49be:	81 f1       	breq	.+96     	; 0x4a20 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    49c0:	36 c0       	rjmp	.+108    	; 0x4a2e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    49c6:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    49c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    49cc:	2d 89       	ldd	r18, Y+21	; 0x15
    49ce:	dc 01       	movw	r26, r24
    49d0:	ed 91       	ld	r30, X+
    49d2:	fc 91       	ld	r31, X
    49d4:	ac 81       	ldd	r26, Y+4	; 0x04
    49d6:	bd 81       	ldd	r27, Y+5	; 0x05
    49d8:	a2 0f       	add	r26, r18
    49da:	b1 1d       	adc	r27, r1
    49dc:	04 80       	ldd	r0, Z+4	; 0x04
    49de:	f5 81       	ldd	r31, Z+5	; 0x05
    49e0:	e0 2d       	mov	r30, r0
    49e2:	6c 91       	ld	r22, X
    49e4:	19 95       	eicall
			tx_buffer_pos++;
    49e6:	8d 89       	ldd	r24, Y+21	; 0x15
    49e8:	8f 5f       	subi	r24, 0xFF	; 255
    49ea:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    49ec:	20 c0       	rjmp	.+64     	; 0x4a2e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    49ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    49f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    49f2:	2d 89       	ldd	r18, Y+21	; 0x15
    49f4:	dc 01       	movw	r26, r24
    49f6:	ed 91       	ld	r30, X+
    49f8:	fc 91       	ld	r31, X
    49fa:	ac 81       	ldd	r26, Y+4	; 0x04
    49fc:	bd 81       	ldd	r27, Y+5	; 0x05
    49fe:	a2 0f       	add	r26, r18
    4a00:	b1 1d       	adc	r27, r1
    4a02:	04 80       	ldd	r0, Z+4	; 0x04
    4a04:	f5 81       	ldd	r31, Z+5	; 0x05
    4a06:	e0 2d       	mov	r30, r0
    4a08:	6c 91       	ld	r22, X
    4a0a:	19 95       	eicall
			tx_buffer_pos++;
    4a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    4a0e:	8f 5f       	subi	r24, 0xFF	; 255
    4a10:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    4a12:	9d 89       	ldd	r25, Y+21	; 0x15
    4a14:	89 85       	ldd	r24, Y+9	; 0x09
    4a16:	98 13       	cpse	r25, r24
    4a18:	0a c0       	rjmp	.+20     	; 0x4a2e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    4a1a:	83 e0       	ldi	r24, 0x03	; 3
    4a1c:	8c 8b       	std	Y+20, r24	; 0x14
    4a1e:	07 c0       	rjmp	.+14     	; 0x4a2e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    4a20:	8e 89       	ldd	r24, Y+22	; 0x16
    4a22:	88 23       	and	r24, r24
    4a24:	19 f0       	breq	.+6      	; 0x4a2c <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    4a26:	ce 01       	movw	r24, r28
    4a28:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    4a2c:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	08 95       	ret

00004a34 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    4a34:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <_ZN9CMBSender14OnTransmitByteEv>
    4a38:	08 95       	ret

00004a3a <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    4a3a:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    4a3c:	06 c0       	rjmp	.+12     	; 0x4a4a <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4a3e:	86 85       	ldd	r24, Z+14	; 0x0e
    4a40:	89 30       	cpi	r24, 0x09	; 9
    4a42:	41 f0       	breq	.+16     	; 0x4a54 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    4a44:	86 85       	ldd	r24, Z+14	; 0x0e
    4a46:	8a 30       	cpi	r24, 0x0A	; 10
    4a48:	39 f0       	breq	.+14     	; 0x4a58 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    4a4a:	86 85       	ldd	r24, Z+14	; 0x0e
    4a4c:	88 30       	cpi	r24, 0x08	; 8
    4a4e:	b9 f7       	brne	.-18     	; 0x4a3e <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    4a54:	82 e0       	ldi	r24, 0x02	; 2
    4a56:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    4a58:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4a5a:	08 95       	ret

00004a5c <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4a60:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    4a62:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <_ZN9CMBSender14OnTransmitByteEv>
    4a66:	08 95       	ret

00004a68 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    4a68:	cf 93       	push	r28
    4a6a:	df 93       	push	r29
    4a6c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4a6e:	e8 81       	ld	r30, Y
    4a70:	f9 81       	ldd	r31, Y+1	; 0x01
    4a72:	02 84       	ldd	r0, Z+10	; 0x0a
    4a74:	f3 85       	ldd	r31, Z+11	; 0x0b
    4a76:	e0 2d       	mov	r30, r0
    4a78:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4a7a:	ce 01       	movw	r24, r28
    4a7c:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	08 95       	ret

00004a86 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    4a86:	cf 93       	push	r28
    4a88:	df 93       	push	r29
    4a8a:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    4a8c:	e8 81       	ld	r30, Y
    4a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    4a90:	06 84       	ldd	r0, Z+14	; 0x0e
    4a92:	f7 85       	ldd	r31, Z+15	; 0x0f
    4a94:	e0 2d       	mov	r30, r0
    4a96:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    4a98:	ce 01       	movw	r24, r28
    4a9a:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4a9e:	df 91       	pop	r29
    4aa0:	cf 91       	pop	r28
    4aa2:	08 95       	ret

00004aa4 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
    4aa8:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    4aaa:	e8 81       	ld	r30, Y
    4aac:	f9 81       	ldd	r31, Y+1	; 0x01
    4aae:	04 84       	ldd	r0, Z+12	; 0x0c
    4ab0:	f5 85       	ldd	r31, Z+13	; 0x0d
    4ab2:	e0 2d       	mov	r30, r0
    4ab4:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4ab6:	ce 01       	movw	r24, r28
    4ab8:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4abc:	df 91       	pop	r29
    4abe:	cf 91       	pop	r28
    4ac0:	08 95       	ret

00004ac2 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
    4ac6:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    4ac8:	e8 81       	ld	r30, Y
    4aca:	f9 81       	ldd	r31, Y+1	; 0x01
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	00 88       	ldd	r0, Z+16	; 0x10
    4ad0:	f1 89       	ldd	r31, Z+17	; 0x11
    4ad2:	e0 2d       	mov	r30, r0
    4ad4:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	08 95       	ret

00004ae2 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    4ae2:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    4ae4:	06 c0       	rjmp	.+12     	; 0x4af2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    4ae6:	84 89       	ldd	r24, Z+20	; 0x14
    4ae8:	84 30       	cpi	r24, 0x04	; 4
    4aea:	41 f0       	breq	.+16     	; 0x4afc <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    4aec:	84 89       	ldd	r24, Z+20	; 0x14
    4aee:	85 30       	cpi	r24, 0x05	; 5
    4af0:	39 f0       	breq	.+14     	; 0x4b00 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    4af2:	84 89       	ldd	r24, Z+20	; 0x14
    4af4:	83 30       	cpi	r24, 0x03	; 3
    4af6:	b9 f7       	brne	.-18     	; 0x4ae6 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    4afc:	82 e0       	ldi	r24, 0x02	; 2
    4afe:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    4b00:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4b02:	08 95       	ret

00004b04 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    4b04:	21 e0       	ldi	r18, 0x01	; 1
    4b06:	fc 01       	movw	r30, r24
    4b08:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    4b0a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    4b0e:	08 95       	ret

00004b10 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    4b10:	21 e0       	ldi	r18, 0x01	; 1
    4b12:	fc 01       	movw	r30, r24
    4b14:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    4b16:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    4b1a:	08 95       	ret

00004b1c <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    4b1c:	0f 93       	push	r16
    4b1e:	1f 93       	push	r17
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	8c 01       	movw	r16, r24
    4b26:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    4b28:	98 81       	ld	r25, Y
    4b2a:	91 38       	cpi	r25, 0x81	; 129
    4b2c:	69 f4       	brne	.+26     	; 0x4b48 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    4b2e:	d8 01       	movw	r26, r16
    4b30:	ed 91       	ld	r30, X+
    4b32:	fc 91       	ld	r31, X
    4b34:	04 80       	ldd	r0, Z+4	; 0x04
    4b36:	f5 81       	ldd	r31, Z+5	; 0x05
    4b38:	e0 2d       	mov	r30, r0
    4b3a:	2a 81       	ldd	r18, Y+2	; 0x02
    4b3c:	ab 01       	movw	r20, r22
    4b3e:	4d 5f       	subi	r20, 0xFD	; 253
    4b40:	5f 4f       	sbci	r21, 0xFF	; 255
    4b42:	69 81       	ldd	r22, Y+1	; 0x01
    4b44:	c8 01       	movw	r24, r16
    4b46:	19 95       	eicall
	}
	if (data[0] == 0x83)
    4b48:	98 81       	ld	r25, Y
    4b4a:	93 38       	cpi	r25, 0x83	; 131
    4b4c:	99 f4       	brne	.+38     	; 0x4b74 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4b4e:	d8 01       	movw	r26, r16
    4b50:	ed 91       	ld	r30, X+
    4b52:	fc 91       	ld	r31, X
    4b54:	2b 81       	ldd	r18, Y+3	; 0x03
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	ae 01       	movw	r20, r28
    4b5a:	4c 5f       	subi	r20, 0xFC	; 252
    4b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5e:	69 81       	ldd	r22, Y+1	; 0x01
    4b60:	70 e0       	ldi	r23, 0x00	; 0
    4b62:	76 2f       	mov	r23, r22
    4b64:	66 27       	eor	r22, r22
    4b66:	8a 81       	ldd	r24, Y+2	; 0x02
    4b68:	68 2b       	or	r22, r24
    4b6a:	02 80       	ldd	r0, Z+2	; 0x02
    4b6c:	f3 81       	ldd	r31, Z+3	; 0x03
    4b6e:	e0 2d       	mov	r30, r0
    4b70:	c8 01       	movw	r24, r16
    4b72:	19 95       	eicall
	}
}
    4b74:	df 91       	pop	r29
    4b76:	cf 91       	pop	r28
    4b78:	1f 91       	pop	r17
    4b7a:	0f 91       	pop	r16
    4b7c:	08 95       	ret

00004b7e <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4b7e:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <_ZN9CMBSender18ProcessTransactionEPhj>
    4b82:	08 95       	ret

00004b84 <__udivmodhi4>:
    4b84:	aa 1b       	sub	r26, r26
    4b86:	bb 1b       	sub	r27, r27
    4b88:	51 e1       	ldi	r21, 0x11	; 17
    4b8a:	07 c0       	rjmp	.+14     	; 0x4b9a <__udivmodhi4_ep>

00004b8c <__udivmodhi4_loop>:
    4b8c:	aa 1f       	adc	r26, r26
    4b8e:	bb 1f       	adc	r27, r27
    4b90:	a6 17       	cp	r26, r22
    4b92:	b7 07       	cpc	r27, r23
    4b94:	10 f0       	brcs	.+4      	; 0x4b9a <__udivmodhi4_ep>
    4b96:	a6 1b       	sub	r26, r22
    4b98:	b7 0b       	sbc	r27, r23

00004b9a <__udivmodhi4_ep>:
    4b9a:	88 1f       	adc	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	5a 95       	dec	r21
    4ba0:	a9 f7       	brne	.-22     	; 0x4b8c <__udivmodhi4_loop>
    4ba2:	80 95       	com	r24
    4ba4:	90 95       	com	r25
    4ba6:	bc 01       	movw	r22, r24
    4ba8:	cd 01       	movw	r24, r26
    4baa:	08 95       	ret

00004bac <__divmodsi4>:
    4bac:	05 2e       	mov	r0, r21
    4bae:	97 fb       	bst	r25, 7
    4bb0:	1e f4       	brtc	.+6      	; 0x4bb8 <__divmodsi4+0xc>
    4bb2:	00 94       	com	r0
    4bb4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__negsi2>
    4bb8:	57 fd       	sbrc	r21, 7
    4bba:	07 d0       	rcall	.+14     	; 0x4bca <__divmodsi4_neg2>
    4bbc:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__udivmodsi4>
    4bc0:	07 fc       	sbrc	r0, 7
    4bc2:	03 d0       	rcall	.+6      	; 0x4bca <__divmodsi4_neg2>
    4bc4:	4e f4       	brtc	.+18     	; 0x4bd8 <__divmodsi4_exit>
    4bc6:	0c 94 ed 25 	jmp	0x4bda	; 0x4bda <__negsi2>

00004bca <__divmodsi4_neg2>:
    4bca:	50 95       	com	r21
    4bcc:	40 95       	com	r20
    4bce:	30 95       	com	r19
    4bd0:	21 95       	neg	r18
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	4f 4f       	sbci	r20, 0xFF	; 255
    4bd6:	5f 4f       	sbci	r21, 0xFF	; 255

00004bd8 <__divmodsi4_exit>:
    4bd8:	08 95       	ret

00004bda <__negsi2>:
    4bda:	90 95       	com	r25
    4bdc:	80 95       	com	r24
    4bde:	70 95       	com	r23
    4be0:	61 95       	neg	r22
    4be2:	7f 4f       	sbci	r23, 0xFF	; 255
    4be4:	8f 4f       	sbci	r24, 0xFF	; 255
    4be6:	9f 4f       	sbci	r25, 0xFF	; 255
    4be8:	08 95       	ret

00004bea <__tablejump2__>:
    4bea:	ee 0f       	add	r30, r30
    4bec:	ff 1f       	adc	r31, r31
    4bee:	88 1f       	adc	r24, r24
    4bf0:	8b bf       	out	0x3b, r24	; 59
    4bf2:	07 90       	elpm	r0, Z+
    4bf4:	f6 91       	elpm	r31, Z
    4bf6:	e0 2d       	mov	r30, r0
    4bf8:	19 94       	eijmp

00004bfa <__umulhisi3>:
    4bfa:	a2 9f       	mul	r26, r18
    4bfc:	b0 01       	movw	r22, r0
    4bfe:	b3 9f       	mul	r27, r19
    4c00:	c0 01       	movw	r24, r0
    4c02:	a3 9f       	mul	r26, r19
    4c04:	70 0d       	add	r23, r0
    4c06:	81 1d       	adc	r24, r1
    4c08:	11 24       	eor	r1, r1
    4c0a:	91 1d       	adc	r25, r1
    4c0c:	b2 9f       	mul	r27, r18
    4c0e:	70 0d       	add	r23, r0
    4c10:	81 1d       	adc	r24, r1
    4c12:	11 24       	eor	r1, r1
    4c14:	91 1d       	adc	r25, r1
    4c16:	08 95       	ret

00004c18 <__udivmodsi4>:
    4c18:	a1 e2       	ldi	r26, 0x21	; 33
    4c1a:	1a 2e       	mov	r1, r26
    4c1c:	aa 1b       	sub	r26, r26
    4c1e:	bb 1b       	sub	r27, r27
    4c20:	fd 01       	movw	r30, r26
    4c22:	0d c0       	rjmp	.+26     	; 0x4c3e <__udivmodsi4_ep>

00004c24 <__udivmodsi4_loop>:
    4c24:	aa 1f       	adc	r26, r26
    4c26:	bb 1f       	adc	r27, r27
    4c28:	ee 1f       	adc	r30, r30
    4c2a:	ff 1f       	adc	r31, r31
    4c2c:	a2 17       	cp	r26, r18
    4c2e:	b3 07       	cpc	r27, r19
    4c30:	e4 07       	cpc	r30, r20
    4c32:	f5 07       	cpc	r31, r21
    4c34:	20 f0       	brcs	.+8      	; 0x4c3e <__udivmodsi4_ep>
    4c36:	a2 1b       	sub	r26, r18
    4c38:	b3 0b       	sbc	r27, r19
    4c3a:	e4 0b       	sbc	r30, r20
    4c3c:	f5 0b       	sbc	r31, r21

00004c3e <__udivmodsi4_ep>:
    4c3e:	66 1f       	adc	r22, r22
    4c40:	77 1f       	adc	r23, r23
    4c42:	88 1f       	adc	r24, r24
    4c44:	99 1f       	adc	r25, r25
    4c46:	1a 94       	dec	r1
    4c48:	69 f7       	brne	.-38     	; 0x4c24 <__udivmodsi4_loop>
    4c4a:	60 95       	com	r22
    4c4c:	70 95       	com	r23
    4c4e:	80 95       	com	r24
    4c50:	90 95       	com	r25
    4c52:	9b 01       	movw	r18, r22
    4c54:	ac 01       	movw	r20, r24
    4c56:	bd 01       	movw	r22, r26
    4c58:	cf 01       	movw	r24, r30
    4c5a:	08 95       	ret

00004c5c <malloc>:
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	82 30       	cpi	r24, 0x02	; 2
    4c62:	91 05       	cpc	r25, r1
    4c64:	10 f4       	brcc	.+4      	; 0x4c6a <malloc+0xe>
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	e0 91 98 23 	lds	r30, 0x2398
    4c6e:	f0 91 99 23 	lds	r31, 0x2399
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	c0 e0       	ldi	r28, 0x00	; 0
    4c78:	d0 e0       	ldi	r29, 0x00	; 0
    4c7a:	30 97       	sbiw	r30, 0x00	; 0
    4c7c:	11 f1       	breq	.+68     	; 0x4cc2 <malloc+0x66>
    4c7e:	40 81       	ld	r20, Z
    4c80:	51 81       	ldd	r21, Z+1	; 0x01
    4c82:	48 17       	cp	r20, r24
    4c84:	59 07       	cpc	r21, r25
    4c86:	c0 f0       	brcs	.+48     	; 0x4cb8 <malloc+0x5c>
    4c88:	48 17       	cp	r20, r24
    4c8a:	59 07       	cpc	r21, r25
    4c8c:	61 f4       	brne	.+24     	; 0x4ca6 <malloc+0x4a>
    4c8e:	82 81       	ldd	r24, Z+2	; 0x02
    4c90:	93 81       	ldd	r25, Z+3	; 0x03
    4c92:	20 97       	sbiw	r28, 0x00	; 0
    4c94:	19 f0       	breq	.+6      	; 0x4c9c <malloc+0x40>
    4c96:	8a 83       	std	Y+2, r24	; 0x02
    4c98:	9b 83       	std	Y+3, r25	; 0x03
    4c9a:	2b c0       	rjmp	.+86     	; 0x4cf2 <malloc+0x96>
    4c9c:	80 93 98 23 	sts	0x2398, r24
    4ca0:	90 93 99 23 	sts	0x2399, r25
    4ca4:	26 c0       	rjmp	.+76     	; 0x4cf2 <malloc+0x96>
    4ca6:	21 15       	cp	r18, r1
    4ca8:	31 05       	cpc	r19, r1
    4caa:	19 f0       	breq	.+6      	; 0x4cb2 <malloc+0x56>
    4cac:	42 17       	cp	r20, r18
    4cae:	53 07       	cpc	r21, r19
    4cb0:	18 f4       	brcc	.+6      	; 0x4cb8 <malloc+0x5c>
    4cb2:	9a 01       	movw	r18, r20
    4cb4:	be 01       	movw	r22, r28
    4cb6:	df 01       	movw	r26, r30
    4cb8:	ef 01       	movw	r28, r30
    4cba:	02 80       	ldd	r0, Z+2	; 0x02
    4cbc:	f3 81       	ldd	r31, Z+3	; 0x03
    4cbe:	e0 2d       	mov	r30, r0
    4cc0:	dc cf       	rjmp	.-72     	; 0x4c7a <malloc+0x1e>
    4cc2:	21 15       	cp	r18, r1
    4cc4:	31 05       	cpc	r19, r1
    4cc6:	09 f1       	breq	.+66     	; 0x4d0a <malloc+0xae>
    4cc8:	28 1b       	sub	r18, r24
    4cca:	39 0b       	sbc	r19, r25
    4ccc:	24 30       	cpi	r18, 0x04	; 4
    4cce:	31 05       	cpc	r19, r1
    4cd0:	90 f4       	brcc	.+36     	; 0x4cf6 <malloc+0x9a>
    4cd2:	12 96       	adiw	r26, 0x02	; 2
    4cd4:	8d 91       	ld	r24, X+
    4cd6:	9c 91       	ld	r25, X
    4cd8:	13 97       	sbiw	r26, 0x03	; 3
    4cda:	61 15       	cp	r22, r1
    4cdc:	71 05       	cpc	r23, r1
    4cde:	21 f0       	breq	.+8      	; 0x4ce8 <malloc+0x8c>
    4ce0:	fb 01       	movw	r30, r22
    4ce2:	82 83       	std	Z+2, r24	; 0x02
    4ce4:	93 83       	std	Z+3, r25	; 0x03
    4ce6:	04 c0       	rjmp	.+8      	; 0x4cf0 <malloc+0x94>
    4ce8:	80 93 98 23 	sts	0x2398, r24
    4cec:	90 93 99 23 	sts	0x2399, r25
    4cf0:	fd 01       	movw	r30, r26
    4cf2:	32 96       	adiw	r30, 0x02	; 2
    4cf4:	44 c0       	rjmp	.+136    	; 0x4d7e <malloc+0x122>
    4cf6:	fd 01       	movw	r30, r26
    4cf8:	e2 0f       	add	r30, r18
    4cfa:	f3 1f       	adc	r31, r19
    4cfc:	81 93       	st	Z+, r24
    4cfe:	91 93       	st	Z+, r25
    4d00:	22 50       	subi	r18, 0x02	; 2
    4d02:	31 09       	sbc	r19, r1
    4d04:	2d 93       	st	X+, r18
    4d06:	3c 93       	st	X, r19
    4d08:	3a c0       	rjmp	.+116    	; 0x4d7e <malloc+0x122>
    4d0a:	20 91 96 23 	lds	r18, 0x2396
    4d0e:	30 91 97 23 	lds	r19, 0x2397
    4d12:	23 2b       	or	r18, r19
    4d14:	41 f4       	brne	.+16     	; 0x4d26 <malloc+0xca>
    4d16:	20 91 02 20 	lds	r18, 0x2002
    4d1a:	30 91 03 20 	lds	r19, 0x2003
    4d1e:	20 93 96 23 	sts	0x2396, r18
    4d22:	30 93 97 23 	sts	0x2397, r19
    4d26:	20 91 00 20 	lds	r18, 0x2000
    4d2a:	30 91 01 20 	lds	r19, 0x2001
    4d2e:	21 15       	cp	r18, r1
    4d30:	31 05       	cpc	r19, r1
    4d32:	41 f4       	brne	.+16     	; 0x4d44 <malloc+0xe8>
    4d34:	2d b7       	in	r18, 0x3d	; 61
    4d36:	3e b7       	in	r19, 0x3e	; 62
    4d38:	40 91 04 20 	lds	r20, 0x2004
    4d3c:	50 91 05 20 	lds	r21, 0x2005
    4d40:	24 1b       	sub	r18, r20
    4d42:	35 0b       	sbc	r19, r21
    4d44:	e0 91 96 23 	lds	r30, 0x2396
    4d48:	f0 91 97 23 	lds	r31, 0x2397
    4d4c:	e2 17       	cp	r30, r18
    4d4e:	f3 07       	cpc	r31, r19
    4d50:	a0 f4       	brcc	.+40     	; 0x4d7a <malloc+0x11e>
    4d52:	2e 1b       	sub	r18, r30
    4d54:	3f 0b       	sbc	r19, r31
    4d56:	28 17       	cp	r18, r24
    4d58:	39 07       	cpc	r19, r25
    4d5a:	78 f0       	brcs	.+30     	; 0x4d7a <malloc+0x11e>
    4d5c:	ac 01       	movw	r20, r24
    4d5e:	4e 5f       	subi	r20, 0xFE	; 254
    4d60:	5f 4f       	sbci	r21, 0xFF	; 255
    4d62:	24 17       	cp	r18, r20
    4d64:	35 07       	cpc	r19, r21
    4d66:	48 f0       	brcs	.+18     	; 0x4d7a <malloc+0x11e>
    4d68:	4e 0f       	add	r20, r30
    4d6a:	5f 1f       	adc	r21, r31
    4d6c:	40 93 96 23 	sts	0x2396, r20
    4d70:	50 93 97 23 	sts	0x2397, r21
    4d74:	81 93       	st	Z+, r24
    4d76:	91 93       	st	Z+, r25
    4d78:	02 c0       	rjmp	.+4      	; 0x4d7e <malloc+0x122>
    4d7a:	e0 e0       	ldi	r30, 0x00	; 0
    4d7c:	f0 e0       	ldi	r31, 0x00	; 0
    4d7e:	cf 01       	movw	r24, r30
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	08 95       	ret

00004d86 <free>:
    4d86:	0f 93       	push	r16
    4d88:	1f 93       	push	r17
    4d8a:	cf 93       	push	r28
    4d8c:	df 93       	push	r29
    4d8e:	00 97       	sbiw	r24, 0x00	; 0
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <free+0xe>
    4d92:	8c c0       	rjmp	.+280    	; 0x4eac <free+0x126>
    4d94:	fc 01       	movw	r30, r24
    4d96:	32 97       	sbiw	r30, 0x02	; 2
    4d98:	12 82       	std	Z+2, r1	; 0x02
    4d9a:	13 82       	std	Z+3, r1	; 0x03
    4d9c:	00 91 98 23 	lds	r16, 0x2398
    4da0:	10 91 99 23 	lds	r17, 0x2399
    4da4:	01 15       	cp	r16, r1
    4da6:	11 05       	cpc	r17, r1
    4da8:	81 f4       	brne	.+32     	; 0x4dca <free+0x44>
    4daa:	20 81       	ld	r18, Z
    4dac:	31 81       	ldd	r19, Z+1	; 0x01
    4dae:	82 0f       	add	r24, r18
    4db0:	93 1f       	adc	r25, r19
    4db2:	20 91 96 23 	lds	r18, 0x2396
    4db6:	30 91 97 23 	lds	r19, 0x2397
    4dba:	28 17       	cp	r18, r24
    4dbc:	39 07       	cpc	r19, r25
    4dbe:	79 f5       	brne	.+94     	; 0x4e1e <free+0x98>
    4dc0:	e0 93 96 23 	sts	0x2396, r30
    4dc4:	f0 93 97 23 	sts	0x2397, r31
    4dc8:	71 c0       	rjmp	.+226    	; 0x4eac <free+0x126>
    4dca:	d8 01       	movw	r26, r16
    4dcc:	40 e0       	ldi	r20, 0x00	; 0
    4dce:	50 e0       	ldi	r21, 0x00	; 0
    4dd0:	ae 17       	cp	r26, r30
    4dd2:	bf 07       	cpc	r27, r31
    4dd4:	50 f4       	brcc	.+20     	; 0x4dea <free+0x64>
    4dd6:	12 96       	adiw	r26, 0x02	; 2
    4dd8:	2d 91       	ld	r18, X+
    4dda:	3c 91       	ld	r19, X
    4ddc:	13 97       	sbiw	r26, 0x03	; 3
    4dde:	ad 01       	movw	r20, r26
    4de0:	21 15       	cp	r18, r1
    4de2:	31 05       	cpc	r19, r1
    4de4:	09 f1       	breq	.+66     	; 0x4e28 <free+0xa2>
    4de6:	d9 01       	movw	r26, r18
    4de8:	f3 cf       	rjmp	.-26     	; 0x4dd0 <free+0x4a>
    4dea:	9d 01       	movw	r18, r26
    4dec:	da 01       	movw	r26, r20
    4dee:	22 83       	std	Z+2, r18	; 0x02
    4df0:	33 83       	std	Z+3, r19	; 0x03
    4df2:	60 81       	ld	r22, Z
    4df4:	71 81       	ldd	r23, Z+1	; 0x01
    4df6:	86 0f       	add	r24, r22
    4df8:	97 1f       	adc	r25, r23
    4dfa:	82 17       	cp	r24, r18
    4dfc:	93 07       	cpc	r25, r19
    4dfe:	69 f4       	brne	.+26     	; 0x4e1a <free+0x94>
    4e00:	ec 01       	movw	r28, r24
    4e02:	28 81       	ld	r18, Y
    4e04:	39 81       	ldd	r19, Y+1	; 0x01
    4e06:	26 0f       	add	r18, r22
    4e08:	37 1f       	adc	r19, r23
    4e0a:	2e 5f       	subi	r18, 0xFE	; 254
    4e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0e:	20 83       	st	Z, r18
    4e10:	31 83       	std	Z+1, r19	; 0x01
    4e12:	8a 81       	ldd	r24, Y+2	; 0x02
    4e14:	9b 81       	ldd	r25, Y+3	; 0x03
    4e16:	82 83       	std	Z+2, r24	; 0x02
    4e18:	93 83       	std	Z+3, r25	; 0x03
    4e1a:	45 2b       	or	r20, r21
    4e1c:	29 f4       	brne	.+10     	; 0x4e28 <free+0xa2>
    4e1e:	e0 93 98 23 	sts	0x2398, r30
    4e22:	f0 93 99 23 	sts	0x2399, r31
    4e26:	42 c0       	rjmp	.+132    	; 0x4eac <free+0x126>
    4e28:	12 96       	adiw	r26, 0x02	; 2
    4e2a:	ed 93       	st	X+, r30
    4e2c:	fc 93       	st	X, r31
    4e2e:	13 97       	sbiw	r26, 0x03	; 3
    4e30:	ed 01       	movw	r28, r26
    4e32:	49 91       	ld	r20, Y+
    4e34:	59 91       	ld	r21, Y+
    4e36:	9e 01       	movw	r18, r28
    4e38:	24 0f       	add	r18, r20
    4e3a:	35 1f       	adc	r19, r21
    4e3c:	e2 17       	cp	r30, r18
    4e3e:	f3 07       	cpc	r31, r19
    4e40:	71 f4       	brne	.+28     	; 0x4e5e <free+0xd8>
    4e42:	80 81       	ld	r24, Z
    4e44:	91 81       	ldd	r25, Z+1	; 0x01
    4e46:	84 0f       	add	r24, r20
    4e48:	95 1f       	adc	r25, r21
    4e4a:	02 96       	adiw	r24, 0x02	; 2
    4e4c:	8d 93       	st	X+, r24
    4e4e:	9c 93       	st	X, r25
    4e50:	11 97       	sbiw	r26, 0x01	; 1
    4e52:	82 81       	ldd	r24, Z+2	; 0x02
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	12 96       	adiw	r26, 0x02	; 2
    4e58:	8d 93       	st	X+, r24
    4e5a:	9c 93       	st	X, r25
    4e5c:	13 97       	sbiw	r26, 0x03	; 3
    4e5e:	e0 e0       	ldi	r30, 0x00	; 0
    4e60:	f0 e0       	ldi	r31, 0x00	; 0
    4e62:	d8 01       	movw	r26, r16
    4e64:	12 96       	adiw	r26, 0x02	; 2
    4e66:	8d 91       	ld	r24, X+
    4e68:	9c 91       	ld	r25, X
    4e6a:	13 97       	sbiw	r26, 0x03	; 3
    4e6c:	00 97       	sbiw	r24, 0x00	; 0
    4e6e:	19 f0       	breq	.+6      	; 0x4e76 <free+0xf0>
    4e70:	f8 01       	movw	r30, r16
    4e72:	8c 01       	movw	r16, r24
    4e74:	f6 cf       	rjmp	.-20     	; 0x4e62 <free+0xdc>
    4e76:	8d 91       	ld	r24, X+
    4e78:	9c 91       	ld	r25, X
    4e7a:	98 01       	movw	r18, r16
    4e7c:	2e 5f       	subi	r18, 0xFE	; 254
    4e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e80:	82 0f       	add	r24, r18
    4e82:	93 1f       	adc	r25, r19
    4e84:	20 91 96 23 	lds	r18, 0x2396
    4e88:	30 91 97 23 	lds	r19, 0x2397
    4e8c:	28 17       	cp	r18, r24
    4e8e:	39 07       	cpc	r19, r25
    4e90:	69 f4       	brne	.+26     	; 0x4eac <free+0x126>
    4e92:	30 97       	sbiw	r30, 0x00	; 0
    4e94:	29 f4       	brne	.+10     	; 0x4ea0 <free+0x11a>
    4e96:	10 92 98 23 	sts	0x2398, r1
    4e9a:	10 92 99 23 	sts	0x2399, r1
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <free+0x11e>
    4ea0:	12 82       	std	Z+2, r1	; 0x02
    4ea2:	13 82       	std	Z+3, r1	; 0x03
    4ea4:	00 93 96 23 	sts	0x2396, r16
    4ea8:	10 93 97 23 	sts	0x2397, r17
    4eac:	df 91       	pop	r29
    4eae:	cf 91       	pop	r28
    4eb0:	1f 91       	pop	r17
    4eb2:	0f 91       	pop	r16
    4eb4:	08 95       	ret

00004eb6 <memcpy>:
    4eb6:	fb 01       	movw	r30, r22
    4eb8:	dc 01       	movw	r26, r24
    4eba:	02 c0       	rjmp	.+4      	; 0x4ec0 <memcpy+0xa>
    4ebc:	01 90       	ld	r0, Z+
    4ebe:	0d 92       	st	X+, r0
    4ec0:	41 50       	subi	r20, 0x01	; 1
    4ec2:	50 40       	sbci	r21, 0x00	; 0
    4ec4:	d8 f7       	brcc	.-10     	; 0x4ebc <memcpy+0x6>
    4ec6:	08 95       	ret

00004ec8 <__do_global_dtors>:
    4ec8:	11 e0       	ldi	r17, 0x01	; 1
    4eca:	cb ec       	ldi	r28, 0xCB	; 203
    4ecc:	d1 e0       	ldi	r29, 0x01	; 1
    4ece:	00 e0       	ldi	r16, 0x00	; 0
    4ed0:	06 c0       	rjmp	.+12     	; 0x4ede <__do_global_dtors+0x16>
    4ed2:	80 2f       	mov	r24, r16
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__tablejump2__>
    4eda:	21 96       	adiw	r28, 0x01	; 1
    4edc:	01 1d       	adc	r16, r1
    4ede:	cd 3c       	cpi	r28, 0xCD	; 205
    4ee0:	d1 07       	cpc	r29, r17
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	08 07       	cpc	r16, r24
    4ee6:	a9 f7       	brne	.-22     	; 0x4ed2 <__do_global_dtors+0xa>
    4ee8:	f8 94       	cli

00004eea <__stop_program>:
    4eea:	ff cf       	rjmp	.-2      	; 0x4eea <__stop_program>
