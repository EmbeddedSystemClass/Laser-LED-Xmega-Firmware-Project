
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00802000  00005cde  00005d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f0  0080219e  0080219e  00005f10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c28  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013ee3  00000000  00000000  00006ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000345b  00000000  00000000  0001aa8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005700  00000000  00000000  0001dee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000037fc  00000000  00000000  000235e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006c64  00000000  00000000  00026de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009eec  00000000  00000000  0002da48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  00037934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__dtors_end>
       4:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_1>
       8:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_2>
       c:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__vector_3>
      10:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_4>
      14:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__vector_5>
      18:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_6>
      1c:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__vector_7>
      20:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_8>
      24:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__vector_9>
      28:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_10>
      2c:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__vector_11>
      30:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__vector_12>
      34:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_13>
      38:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_14>
      3c:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__vector_15>
      40:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_16>
      44:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_17>
      48:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__vector_18>
      4c:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__vector_19>
      50:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_20>
      54:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_21>
      58:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__vector_22>
      5c:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_23>
      60:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__vector_24>
      64:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__vector_25>
      68:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__vector_26>
      6c:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_27>
      70:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_28>
      74:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__vector_29>
      78:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__vector_30>
      7c:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_31>
      80:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_32>
      84:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__vector_33>
      88:	0c 94 06 12 	jmp	0x240c	; 0x240c <__vector_34>
      8c:	0c 94 37 12 	jmp	0x246e	; 0x246e <__vector_35>
      90:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__vector_36>
      94:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_37>
      98:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__vector_38>
      9c:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__vector_39>
      a0:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_40>
      a4:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__vector_41>
      a8:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__vector_42>
      ac:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_43>
      b0:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__vector_44>
      b4:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__vector_45>
      b8:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__vector_46>
      bc:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__vector_47>
      c0:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__vector_48>
      c4:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__vector_49>
      c8:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_50>
      cc:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__vector_51>
      d0:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_52>
      d4:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__vector_53>
      d8:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__vector_54>
      dc:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__vector_55>
      e0:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__vector_56>
      e4:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__vector_57>
      e8:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__vector_58>
      ec:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__vector_59>
      f0:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__vector_60>
      f4:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_61>
      f8:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__vector_62>
      fc:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__vector_63>
     100:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__vector_64>
     104:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__vector_65>
     108:	0c 94 26 18 	jmp	0x304c	; 0x304c <__vector_66>
     10c:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__vector_67>
     110:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__vector_68>
     114:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__vector_69>
     118:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__vector_70>
     11c:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__vector_71>
     120:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__vector_72>
     124:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__vector_73>
     128:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__vector_74>
     12c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     130:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     134:	0c 94 df 19 	jmp	0x33be	; 0x33be <__vector_77>
     138:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__vector_78>
     13c:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <__vector_79>
     140:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__vector_80>
     144:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__vector_81>
     148:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__vector_82>
     14c:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__vector_83>
     150:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__vector_84>
     154:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__vector_85>
     158:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__vector_86>
     15c:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__vector_87>
     160:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__vector_88>
     164:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__vector_89>
     168:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__vector_90>
     16c:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__vector_91>
     170:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__vector_92>
     174:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__vector_93>
     178:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     17c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     180:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     184:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     188:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     18c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     190:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     194:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     198:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     19c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1a0:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__vector_104>
     1a4:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__vector_105>
     1a8:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1ac:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1b0:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__vector_108>
     1b4:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__vector_109>
     1b8:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__vector_110>
     1bc:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__vector_111>
     1c0:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <__vector_112>
     1c4:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__vector_113>
     1c8:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1cc:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1d0:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1d4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1d8:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1dc:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__vector_119>
     1e0:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <__vector_120>
     1e4:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__vector_121>
     1e8:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1ec:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1f0:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1f4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1f8:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__bad_interrupt>
     1fc:	e4 03       	fmuls	r22, r20
     1fe:	1a 04       	cpc	r1, r10
     200:	1a 04       	cpc	r1, r10
     202:	1a 04       	cpc	r1, r10
     204:	1a 04       	cpc	r1, r10
     206:	1a 04       	cpc	r1, r10
     208:	1a 04       	cpc	r1, r10
     20a:	e7 03       	fmuls	r22, r23
     20c:	1a 04       	cpc	r1, r10
     20e:	1a 04       	cpc	r1, r10
     210:	eb 03       	fmulsu	r22, r19
     212:	1a 04       	cpc	r1, r10
     214:	ef 03       	fmulsu	r22, r23
     216:	1a 04       	cpc	r1, r10
     218:	f3 03       	fmuls	r23, r19
     21a:	1a 04       	cpc	r1, r10
     21c:	f7 03       	fmuls	r23, r23
     21e:	1a 04       	cpc	r1, r10
     220:	1a 04       	cpc	r1, r10
     222:	1a 04       	cpc	r1, r10
     224:	1a 04       	cpc	r1, r10
     226:	1a 04       	cpc	r1, r10
     228:	fb 03       	fmulsu	r23, r19
     22a:	ff 03       	fmulsu	r23, r23
     22c:	03 04       	cpc	r0, r3
     22e:	07 04       	cpc	r0, r7
     230:	13 04       	cpc	r1, r3
     232:	1a 04       	cpc	r1, r10
     234:	0b 04       	cpc	r0, r11
     236:	1a 04       	cpc	r1, r10
     238:	17 04       	cpc	r1, r7
     23a:	1a 04       	cpc	r1, r10
     23c:	1a 04       	cpc	r1, r10
     23e:	1a 04       	cpc	r1, r10
     240:	1a 04       	cpc	r1, r10
     242:	1a 04       	cpc	r1, r10
     244:	1a 04       	cpc	r1, r10
     246:	0f 04       	cpc	r0, r15
     248:	3e 04       	cpc	r3, r14
     24a:	42 04       	cpc	r4, r2
     24c:	46 04       	cpc	r4, r6
     24e:	4b 04       	cpc	r4, r11
     250:	51 04       	cpc	r5, r1
     252:	57 04       	cpc	r5, r7
     254:	5d 04       	cpc	r5, r13
     256:	63 04       	cpc	r6, r3
     258:	d8 04       	cpc	r13, r8
     25a:	70 04       	cpc	r7, r0
     25c:	76 04       	cpc	r7, r6
     25e:	7c 04       	cpc	r7, r12
     260:	82 04       	cpc	r8, r2
     262:	88 04       	cpc	r8, r8
     264:	8e 04       	cpc	r8, r14
     266:	94 04       	cpc	r9, r4
     268:	9a 04       	cpc	r9, r10
     26a:	a0 04       	cpc	r10, r0
     26c:	b5 07       	cpc	r27, r21
     26e:	70 09       	sbc	r23, r0
     270:	13 08       	sbc	r1, r3
     272:	be 07       	cpc	r27, r30
     274:	70 09       	sbc	r23, r0
     276:	48 08       	sbc	r4, r8
     278:	48 08       	sbc	r4, r8
     27a:	7d 08       	sbc	r7, r13
     27c:	87 08       	sbc	r8, r7
     27e:	bd 08       	sbc	r11, r13
     280:	e9 08       	sbc	r14, r9
     282:	21 09       	sbc	r18, r1
     284:	4e 09       	sbc	r20, r14
     286:	6b 09       	sbc	r22, r11
     288:	79 22       	and	r7, r25
     28a:	79 22       	and	r7, r25
     28c:	81 22       	and	r8, r17
     28e:	89 22       	and	r8, r25
     290:	90 22       	and	r9, r16
     292:	df 22       	and	r13, r31
     294:	e6 22       	and	r14, r22
     296:	12 23       	and	r17, r18
     298:	12 23       	and	r17, r18
     29a:	11 23       	and	r17, r17
     29c:	11 23       	and	r17, r17

0000029e <__trampolines_start>:
     29e:	0c 94 42 04 	jmp	0x884	; 0x884 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x4e>
     2a2:	0c 94 81 22 	jmp	0x4502	; 0x4502 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     2a6:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <_ZN8CTimerC18SetCOMPBEj>
     2aa:	0c 94 a0 04 	jmp	0x940	; 0x940 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     2ae:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <_ZN16CLaserControlApp3RunEv+0x34a>
     2b2:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <_ZN7CTimerD9SetPeriodEj>
     2b6:	0c 94 77 2a 	jmp	0x54ee	; 0x54ee <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     2ba:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <_ZN16CLaserControlApp3RunEv+0x44e>
     2be:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2c2:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <_ZN7CTimerF4StopEv>
     2c6:	0c 94 30 28 	jmp	0x5060	; 0x5060 <_ZN8CTimerC14StopEv>
     2ca:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <_ZN7CTimerD8SetCOMPAEj>
     2ce:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2d2:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     2d6:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     2da:	0c 94 92 29 	jmp	0x5324	; 0x5324 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2de:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     2e2:	0c 94 87 27 	jmp	0x4f0e	; 0x4f0e <_ZN7CTimerC8SetCOMPDEj>
     2e6:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     2ea:	0c 94 42 28 	jmp	0x5084	; 0x5084 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     2ee:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     2f2:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     2f6:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <_ZN9CMBSender21OnTransactionCallbackEPhj>
     2fa:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x68>
     2fe:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xaa>
     302:	0c 94 0c 28 	jmp	0x5018	; 0x5018 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     306:	0c 94 9e 2a 	jmp	0x553c	; 0x553c <_ZN7CTimerF8SetCOMPCEj>
     30a:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <_ZN7CTimerF8SetCOMPBEj>
     30e:	0c 94 86 2a 	jmp	0x550c	; 0x550c <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     312:	0c 94 38 28 	jmp	0x5070	; 0x5070 <_ZN8CTimerC15ResetEv>
     316:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x84>
     31a:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <_ZN8CTimerD19SetPeriodEj>
     31e:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <_ZN16CLaserControlApp3RunEv+0x458>
     322:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     326:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <_ZN7CTimerC8SetCOMPAEj>
     32a:	0c 94 94 04 	jmp	0x928	; 0x928 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     32e:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <_ZN4CSPI16StaticOnTransmitEPv>
     332:	0c 94 a8 2a 	jmp	0x5550	; 0x5550 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     336:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <_ZN16CLaserControlApp3RunEv+0xf4>
     33a:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3a>
     33e:	0c 94 31 06 	jmp	0xc62	; 0xc62 <_GLOBAL__sub_D_timer>
     342:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     346:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6c>
     34a:	0c 94 13 04 	jmp	0x826	; 0x826 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x98>
     34e:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     352:	0c 94 11 23 	jmp	0x4622	; 0x4622 <_ZN9CMBSender13OnReceiveByteEh+0x152>
     356:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     35a:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x40>
     35e:	0c 94 90 22 	jmp	0x4520	; 0x4520 <_ZN9CMBSender13OnReceiveByteEh+0x50>
     362:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     366:	0c 94 bd 08 	jmp	0x117a	; 0x117a <_ZN16CLaserControlApp3RunEv+0x2f2>
     36a:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__cxa_pure_virtual>
     36e:	0c 94 be 21 	jmp	0x437c	; 0x437c <_ZN16CMBEventsHandler11FreeBuffersEv>
     372:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <_ZN7CTimerC8SetCOMPBEj>
     376:	0c 94 1a 04 	jmp	0x834	; 0x834 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa6>
     37a:	0c 94 71 2a 	jmp	0x54e2	; 0x54e2 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     37e:	0c 94 17 04 	jmp	0x82e	; 0x82e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa0>
     382:	0c 94 4b 04 	jmp	0x896	; 0x896 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x60>
     386:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_GLOBAL__sub_I_timer>
     38a:	0c 94 cf 29 	jmp	0x539e	; 0x539e <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     38e:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     392:	0c 94 95 28 	jmp	0x512a	; 0x512a <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     396:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     39a:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x58>
     39e:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <_ZN7CTimerF8SetCOMPDEj>
     3a2:	0c 94 bb 28 	jmp	0x5176	; 0x5176 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3a6:	0c 94 83 28 	jmp	0x5106	; 0x5106 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3aa:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <_GLOBAL__sub_D_dacSPI>
     3ae:	0c 94 49 28 	jmp	0x5092	; 0x5092 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     3b2:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     3b6:	0c 94 38 21 	jmp	0x4270	; 0x4270 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     3ba:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x50>
     3be:	0c 94 71 28 	jmp	0x50e2	; 0x50e2 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3c2:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <_ZN7CTimerC8SetCOMPCEj>
     3c6:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     3ca:	0c 94 5f 28 	jmp	0x50be	; 0x50be <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3ce:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3d2:	0c 94 23 28 	jmp	0x5046	; 0x5046 <_ZN8CTimerC15StartEj>
     3d6:	0c 94 b0 27 	jmp	0x4f60	; 0x4f60 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3da:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <_ZN8CTimerD18SetCOMPBEj>
     3de:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     3e2:	0c 94 99 24 	jmp	0x4932	; 0x4932 <_ZN10CDGUSUSART14IsTransmittingEv>
     3e6:	0c 94 c2 27 	jmp	0x4f84	; 0x4f84 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3ea:	0c 94 02 2b 	jmp	0x5604	; 0x5604 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3ee:	0c 94 12 29 	jmp	0x5224	; 0x5224 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3f2:	0c 94 6c 27 	jmp	0x4ed8	; 0x4ed8 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     3f6:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     3fa:	0c 94 82 04 	jmp	0x904	; 0x904 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     3fe:	0c 94 f2 28 	jmp	0x51e4	; 0x51e4 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     402:	0c 94 03 04 	jmp	0x806	; 0x806 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     406:	0c 94 46 04 	jmp	0x88c	; 0x88c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x56>
     40a:	0c 94 89 22 	jmp	0x4512	; 0x4512 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     40e:	0c 94 93 24 	jmp	0x4926	; 0x4926 <_ZN10CDGUSUSART15GetReceivedByteEv>
     412:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     416:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <_ZN8CTimerD18SetCOMPAEj>
     41a:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     41e:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x90>
     422:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     426:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     42a:	0c 94 f0 2a 	jmp	0x55e0	; 0x55e0 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     42e:	0c 94 0d 29 	jmp	0x521a	; 0x521a <_ZN7CTimerD8SetCOMPDEj>
     432:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     436:	0c 94 ba 2a 	jmp	0x5574	; 0x5574 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     43a:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     43e:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     442:	0c 94 48 29 	jmp	0x5290	; 0x5290 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     446:	0c 94 9e 27 	jmp	0x4f3c	; 0x4f3c <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     44a:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <_ZN8CTimerC18SetCOMPAEj>
     44e:	0c 94 f7 29 	jmp	0x53ee	; 0x53ee <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     452:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     456:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     45a:	0c 94 be 29 	jmp	0x537c	; 0x537c <_ZN8CTimerD15ResetEv>
     45e:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <_ZN8CTimerC19SetPeriodEj>
     462:	0c 94 c8 29 	jmp	0x5390	; 0x5390 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     466:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <_ZN7CTimerF9SetPeriodEj>
     46a:	0c 94 13 08 	jmp	0x1026	; 0x1026 <_ZN16CLaserControlApp3RunEv+0x19e>
     46e:	0c 94 0f 04 	jmp	0x81e	; 0x81e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x90>
     472:	0c 94 b6 29 	jmp	0x536c	; 0x536c <_ZN8CTimerD14StopEv>
     476:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     47a:	0c 94 15 23 	jmp	0x462a	; 0x462a <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     47e:	0c 94 cc 2a 	jmp	0x5598	; 0x5598 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     482:	0c 94 03 29 	jmp	0x5206	; 0x5206 <_ZN7CTimerD8SetCOMPBEj>
     486:	0c 94 50 27 	jmp	0x4ea0	; 0x4ea0 <_ZN7CTimerC5StartEj>
     48a:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <_ZN7CTimerF8SetCOMPAEj>
     48e:	0c 94 88 04 	jmp	0x910	; 0x910 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     492:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <_ZN8CTimerD15StartEj>
     496:	0c 94 23 06 	jmp	0xc46	; 0xc46 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     49a:	0c 94 e6 27 	jmp	0x4fcc	; 0x4fcc <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     49e:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     4a2:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x78>
     4a6:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     4aa:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <_GLOBAL__sub_I_dacSPI>
     4ae:	0c 94 cd 21 	jmp	0x439a	; 0x439a <_ZN9CMBSender18OnVariableReceivedEjPjj>
     4b2:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <_ZN16CLaserControlApp3RunEv+0xe2>
     4b6:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4ba:	0c 94 a1 24 	jmp	0x4942	; 0x4942 <_ZN10CDGUSUSART11IsReceivingEv>
     4be:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     4c2:	0c 94 9a 04 	jmp	0x934	; 0x934 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     4c6:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <_ZN7CTimerF5StartEj>
     4ca:	0c 94 96 24 	jmp	0x492c	; 0x492c <_ZN10CDGUSUSART19SetTransmittingByteEh>
     4ce:	0c 94 a8 24 	jmp	0x4950	; 0x4950 <_ZN10CDGUSUSART11IsDataEmptyEv>
     4d2:	0c 94 19 21 	jmp	0x4232	; 0x4232 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     4d6:	0c 94 21 09 	jmp	0x1242	; 0x1242 <_ZN16CLaserControlApp3RunEv+0x3ba>
     4da:	0c 94 24 29 	jmp	0x5248	; 0x5248 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4de:	0c 94 73 27 	jmp	0x4ee6	; 0x4ee6 <_ZN7CTimerC9SetPeriodEj>
     4e2:	0c 94 df 22 	jmp	0x45be	; 0x45be <_ZN9CMBSender13OnReceiveByteEh+0xee>
     4e6:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x88>
     4ea:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc2>
     4ee:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <_ZN7CTimerD4StopEv>
     4f2:	0c 94 80 21 	jmp	0x4300	; 0x4300 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     4f6:	0c 94 07 04 	jmp	0x80e	; 0x80e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x80>
     4fa:	0c 94 12 23 	jmp	0x4624	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
     4fe:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     502:	0c 94 79 22 	jmp	0x44f2	; 0x44f2 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     506:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     50a:	0c 94 48 08 	jmp	0x1090	; 0x1090 <_ZN16CLaserControlApp3RunEv+0x208>
     50e:	0c 94 87 08 	jmp	0x110e	; 0x110e <_ZN16CLaserControlApp3RunEv+0x286>
     512:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     516:	0c 94 de 2a 	jmp	0x55bc	; 0x55bc <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     51a:	0c 94 08 29 	jmp	0x5210	; 0x5210 <_ZN7CTimerD8SetCOMPCEj>
     51e:	0c 94 5d 27 	jmp	0x4eba	; 0x4eba <_ZN7CTimerC4StopEv>
     522:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     526:	0c 94 d6 28 	jmp	0x51ac	; 0x51ac <_ZN7CTimerD5StartEj>
     52a:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <_ZN16CLaserControlApp3RunEv+0x272>
     52e:	0c 94 4e 09 	jmp	0x129c	; 0x129c <_ZN16CLaserControlApp3RunEv+0x414>

00000532 <__ctors_start>:
     532:	28 06       	cpc	r2, r24
     534:	3e 1f       	adc	r19, r30

00000536 <__ctors_end>:
     536:	31 06       	cpc	r3, r17
     538:	6b 1f       	adc	r22, r27

0000053a <__dtors_end>:
     53a:	11 24       	eor	r1, r1
     53c:	1f be       	out	0x3f, r1	; 63
     53e:	cf ef       	ldi	r28, 0xFF	; 255
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df e3       	ldi	r29, 0x3F	; 63
     544:	de bf       	out	0x3e, r29	; 62
     546:	00 e0       	ldi	r16, 0x00	; 0
     548:	0c bf       	out	0x3c, r16	; 60

0000054a <__do_copy_data>:
     54a:	11 e2       	ldi	r17, 0x21	; 33
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e2       	ldi	r27, 0x20	; 32
     550:	ee ed       	ldi	r30, 0xDE	; 222
     552:	fc e5       	ldi	r31, 0x5C	; 92
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	0b bf       	out	0x3b, r16	; 59
     558:	02 c0       	rjmp	.+4      	; 0x55e <__do_copy_data+0x14>
     55a:	07 90       	elpm	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	ae 39       	cpi	r26, 0x9E	; 158
     560:	b1 07       	cpc	r27, r17
     562:	d9 f7       	brne	.-10     	; 0x55a <__do_copy_data+0x10>

00000564 <__do_clear_bss>:
     564:	24 e2       	ldi	r18, 0x24	; 36
     566:	ae e9       	ldi	r26, 0x9E	; 158
     568:	b1 e2       	ldi	r27, 0x21	; 33
     56a:	01 c0       	rjmp	.+2      	; 0x56e <.do_clear_bss_start>

0000056c <.do_clear_bss_loop>:
     56c:	1d 92       	st	X+, r1

0000056e <.do_clear_bss_start>:
     56e:	ae 38       	cpi	r26, 0x8E	; 142
     570:	b2 07       	cpc	r27, r18
     572:	e1 f7       	brne	.-8      	; 0x56c <.do_clear_bss_loop>

00000574 <__do_global_ctors>:
     574:	12 e0       	ldi	r17, 0x02	; 2
     576:	cb e9       	ldi	r28, 0x9B	; 155
     578:	d2 e0       	ldi	r29, 0x02	; 2
     57a:	00 e0       	ldi	r16, 0x00	; 0
     57c:	06 c0       	rjmp	.+12     	; 0x58a <__do_global_ctors+0x16>
     57e:	21 97       	sbiw	r28, 0x01	; 1
     580:	01 09       	sbc	r16, r1
     582:	80 2f       	mov	r24, r16
     584:	fe 01       	movw	r30, r28
     586:	0e 94 be 2c 	call	0x597c	; 0x597c <__tablejump2__>
     58a:	c9 39       	cpi	r28, 0x99	; 153
     58c:	d1 07       	cpc	r29, r17
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	08 07       	cpc	r16, r24
     592:	a9 f7       	brne	.-22     	; 0x57e <__do_global_ctors+0xa>
     594:	0e 94 44 20 	call	0x4088	; 0x4088 <main>
     598:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <__do_global_dtors>

0000059c <__bad_interrupt>:
     59c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a0 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     5a0:	08 95       	ret

000005a2 <_ZN13CDGUSDatabaseD1Ev>:
     5a2:	08 95       	ret

000005a4 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     5a4:	fc 01       	movw	r30, r24
     5a6:	62 83       	std	Z+2, r22	; 0x02
     5a8:	73 83       	std	Z+3, r23	; 0x03
     5aa:	94 2f       	mov	r25, r20
     5ac:	85 2f       	mov	r24, r21
     5ae:	84 83       	std	Z+4, r24	; 0x04
     5b0:	95 83       	std	Z+5, r25	; 0x05
     5b2:	46 83       	std	Z+6, r20	; 0x06
     5b4:	57 83       	std	Z+7, r21	; 0x07
     5b6:	10 82       	st	Z, r1
     5b8:	11 82       	std	Z+1, r1	; 0x01
     5ba:	08 95       	ret

000005bc <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     5bc:	8f 92       	push	r8
     5be:	9f 92       	push	r9
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	2a 97       	sbiw	r28, 0x0a	; 10
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5dc:	8a e5       	ldi	r24, 0x5A	; 90
     5de:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5e0:	80 e5       	ldi	r24, 0x50	; 80
     5e2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5e4:	85 2e       	mov	r8, r21
     5e6:	99 24       	eor	r9, r9
     5e8:	aa 24       	eor	r10, r10
     5ea:	bb 24       	eor	r11, r11
     5ec:	b2 2f       	mov	r27, r18
     5ee:	aa 27       	eor	r26, r26
     5f0:	99 27       	eor	r25, r25
     5f2:	88 27       	eor	r24, r24
     5f4:	88 29       	or	r24, r8
     5f6:	99 29       	or	r25, r9
     5f8:	aa 29       	or	r26, r10
     5fa:	bb 29       	or	r27, r11
     5fc:	49 01       	movw	r8, r18
     5fe:	5a 01       	movw	r10, r20
     600:	88 24       	eor	r8, r8
     602:	aa 24       	eor	r10, r10
     604:	bb 24       	eor	r11, r11
     606:	ba 2c       	mov	r11, r10
     608:	a9 2c       	mov	r10, r9
     60a:	98 2c       	mov	r9, r8
     60c:	88 24       	eor	r8, r8
     60e:	88 29       	or	r24, r8
     610:	99 29       	or	r25, r9
     612:	aa 29       	or	r26, r10
     614:	bb 29       	or	r27, r11
     616:	49 01       	movw	r8, r18
     618:	5a 01       	movw	r10, r20
     61a:	88 24       	eor	r8, r8
     61c:	99 24       	eor	r9, r9
     61e:	bb 24       	eor	r11, r11
     620:	89 2c       	mov	r8, r9
     622:	9a 2c       	mov	r9, r10
     624:	ab 2c       	mov	r10, r11
     626:	bb 24       	eor	r11, r11
     628:	88 29       	or	r24, r8
     62a:	99 29       	or	r25, r9
     62c:	aa 29       	or	r26, r10
     62e:	bb 29       	or	r27, r11
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	9c 83       	std	Y+4, r25	; 0x04
     634:	ad 83       	std	Y+5, r26	; 0x05
     636:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     638:	76 27       	eor	r23, r22
     63a:	67 27       	eor	r22, r23
     63c:	76 27       	eor	r23, r22
     63e:	6f 83       	std	Y+7, r22	; 0x07
     640:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     642:	10 27       	eor	r17, r16
     644:	01 27       	eor	r16, r17
     646:	10 27       	eor	r17, r16
     648:	09 87       	std	Y+9, r16	; 0x09
     64a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     64c:	2a e0       	ldi	r18, 0x0A	; 10
     64e:	ae 01       	movw	r20, r28
     650:	4f 5f       	subi	r20, 0xFF	; 255
     652:	5f 4f       	sbci	r21, 0xFF	; 255
     654:	66 e5       	ldi	r22, 0x56	; 86
     656:	f7 01       	movw	r30, r14
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	93 81       	ldd	r25, Z+3	; 0x03
     65c:	0e 94 ca 23 	call	0x4794	; 0x4794 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     660:	f7 01       	movw	r30, r14
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	93 81       	ldd	r25, Z+3	; 0x03
     666:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     66a:	2a 96       	adiw	r28, 0x0a	; 10
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	de bf       	out	0x3e, r29	; 62
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	bf 90       	pop	r11
     67e:	af 90       	pop	r10
     680:	9f 90       	pop	r9
     682:	8f 90       	pop	r8
     684:	08 95       	ret

00000686 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	2a 97       	sbiw	r28, 0x0a	; 10
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     6a6:	8a e5       	ldi	r24, 0x5A	; 90
     6a8:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     6aa:	80 ea       	ldi	r24, 0xA0	; 160
     6ac:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     6ae:	85 2e       	mov	r8, r21
     6b0:	99 24       	eor	r9, r9
     6b2:	aa 24       	eor	r10, r10
     6b4:	bb 24       	eor	r11, r11
     6b6:	b2 2f       	mov	r27, r18
     6b8:	aa 27       	eor	r26, r26
     6ba:	99 27       	eor	r25, r25
     6bc:	88 27       	eor	r24, r24
     6be:	88 29       	or	r24, r8
     6c0:	99 29       	or	r25, r9
     6c2:	aa 29       	or	r26, r10
     6c4:	bb 29       	or	r27, r11
     6c6:	49 01       	movw	r8, r18
     6c8:	5a 01       	movw	r10, r20
     6ca:	88 24       	eor	r8, r8
     6cc:	aa 24       	eor	r10, r10
     6ce:	bb 24       	eor	r11, r11
     6d0:	ba 2c       	mov	r11, r10
     6d2:	a9 2c       	mov	r10, r9
     6d4:	98 2c       	mov	r9, r8
     6d6:	88 24       	eor	r8, r8
     6d8:	88 29       	or	r24, r8
     6da:	99 29       	or	r25, r9
     6dc:	aa 29       	or	r26, r10
     6de:	bb 29       	or	r27, r11
     6e0:	49 01       	movw	r8, r18
     6e2:	5a 01       	movw	r10, r20
     6e4:	88 24       	eor	r8, r8
     6e6:	99 24       	eor	r9, r9
     6e8:	bb 24       	eor	r11, r11
     6ea:	89 2c       	mov	r8, r9
     6ec:	9a 2c       	mov	r9, r10
     6ee:	ab 2c       	mov	r10, r11
     6f0:	bb 24       	eor	r11, r11
     6f2:	88 29       	or	r24, r8
     6f4:	99 29       	or	r25, r9
     6f6:	aa 29       	or	r26, r10
     6f8:	bb 29       	or	r27, r11
     6fa:	8b 83       	std	Y+3, r24	; 0x03
     6fc:	9c 83       	std	Y+4, r25	; 0x04
     6fe:	ad 83       	std	Y+5, r26	; 0x05
     700:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     702:	76 27       	eor	r23, r22
     704:	67 27       	eor	r22, r23
     706:	76 27       	eor	r23, r22
     708:	6f 83       	std	Y+7, r22	; 0x07
     70a:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     70c:	10 27       	eor	r17, r16
     70e:	01 27       	eor	r16, r17
     710:	10 27       	eor	r17, r16
     712:	09 87       	std	Y+9, r16	; 0x09
     714:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     716:	2a e0       	ldi	r18, 0x0A	; 10
     718:	ae 01       	movw	r20, r28
     71a:	4f 5f       	subi	r20, 0xFF	; 255
     71c:	5f 4f       	sbci	r21, 0xFF	; 255
     71e:	66 e5       	ldi	r22, 0x56	; 86
     720:	f7 01       	movw	r30, r14
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 ca 23 	call	0x4794	; 0x4794 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     72a:	f7 01       	movw	r30, r14
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     734:	2a 96       	adiw	r28, 0x0a	; 10
     736:	cd bf       	out	0x3d, r28	; 61
     738:	de bf       	out	0x3e, r29	; 62
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	08 95       	ret

00000750 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     760:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	ae 01       	movw	r20, r28
     766:	4f 5f       	subi	r20, 0xFF	; 255
     768:	5f 4f       	sbci	r21, 0xFF	; 255
     76a:	66 e5       	ldi	r22, 0x56	; 86
     76c:	fc 01       	movw	r30, r24
     76e:	82 81       	ldd	r24, Z+2	; 0x02
     770:	93 81       	ldd	r25, Z+3	; 0x03
     772:	0e 94 ca 23 	call	0x4794	; 0x4794 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     776:	f8 01       	movw	r30, r16
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	93 81       	ldd	r25, Z+3	; 0x03
     77c:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
	laserBoard.PWMOn();
}

void CLaserControlApp::OnPWMTimerCMP()
{
	laserBoard.PWMOff();
     78c:	08 95       	ret

0000078e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     78e:	dc 01       	movw	r26, r24
     790:	63 30       	cpi	r22, 0x03	; 3
     792:	31 f4       	brne	.+12     	; 0x7a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     794:	fa 01       	movw	r30, r20
     796:	81 81       	ldd	r24, Z+1	; 0x01
     798:	1e 96       	adiw	r26, 0x0e	; 14
     79a:	8c 93       	st	X, r24
     79c:	1e 97       	sbiw	r26, 0x0e	; 14
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     7a0:	66 35       	cpi	r22, 0x56	; 86
     7a2:	21 f4       	brne	.+8      	; 0x7ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     7a4:	fa 01       	movw	r30, r20
     7a6:	80 81       	ld	r24, Z
     7a8:	80 93 a0 21 	sts	0x21A0, r24
     7ac:	1e 96       	adiw	r26, 0x0e	; 14
     7ae:	4c 91       	ld	r20, X
     7b0:	1e 97       	sbiw	r26, 0x0e	; 14
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	46 32       	cpi	r20, 0x26	; 38
     7b6:	51 05       	cpc	r21, r1
     7b8:	e8 f5       	brcc	.+122    	; 0x834 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa6>
     7ba:	fa 01       	movw	r30, r20
     7bc:	88 27       	eor	r24, r24
     7be:	e2 50       	subi	r30, 0x02	; 2
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	8f 4f       	sbci	r24, 0xFF	; 255
     7c4:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__tablejump2__>
     7c8:	1c 96       	adiw	r26, 0x0c	; 12
     7ca:	1c 92       	st	X, r1
     7cc:	08 95       	ret
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	1c 96       	adiw	r26, 0x0c	; 12
     7d2:	8c 93       	st	X, r24
     7d4:	08 95       	ret
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	1c 96       	adiw	r26, 0x0c	; 12
     7da:	8c 93       	st	X, r24
     7dc:	08 95       	ret
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	1c 96       	adiw	r26, 0x0c	; 12
     7e2:	8c 93       	st	X, r24
     7e4:	08 95       	ret
     7e6:	85 e0       	ldi	r24, 0x05	; 5
     7e8:	1c 96       	adiw	r26, 0x0c	; 12
     7ea:	8c 93       	st	X, r24
     7ec:	08 95       	ret
     7ee:	86 e0       	ldi	r24, 0x06	; 6
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8c 93       	st	X, r24
     7f4:	08 95       	ret
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	1c 96       	adiw	r26, 0x0c	; 12
     7fa:	8c 93       	st	X, r24
     7fc:	08 95       	ret
     7fe:	89 e0       	ldi	r24, 0x09	; 9
     800:	1c 96       	adiw	r26, 0x0c	; 12
     802:	8c 93       	st	X, r24
     804:	08 95       	ret
     806:	88 e0       	ldi	r24, 0x08	; 8
     808:	1c 96       	adiw	r26, 0x0c	; 12
     80a:	8c 93       	st	X, r24
     80c:	08 95       	ret
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	1c 96       	adiw	r26, 0x0c	; 12
     812:	8c 93       	st	X, r24
     814:	08 95       	ret
     816:	8b e0       	ldi	r24, 0x0B	; 11
     818:	1c 96       	adiw	r26, 0x0c	; 12
     81a:	8c 93       	st	X, r24
     81c:	08 95       	ret
     81e:	8c e0       	ldi	r24, 0x0C	; 12
     820:	1c 96       	adiw	r26, 0x0c	; 12
     822:	8c 93       	st	X, r24
     824:	08 95       	ret
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8c 93       	st	X, r24
     82c:	08 95       	ret
     82e:	8d e0       	ldi	r24, 0x0D	; 13
     830:	1c 96       	adiw	r26, 0x0c	; 12
     832:	8c 93       	st	X, r24
     834:	08 95       	ret

00000836 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	6c 01       	movw	r12, r24
     848:	eb 01       	movw	r28, r22
     84a:	8a 01       	movw	r16, r20
     84c:	79 01       	movw	r14, r18
     84e:	fa 01       	movw	r30, r20
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	0e 94 0f 0b 	call	0x161e	; 0x161e <_Z4swapj>
     858:	9c 01       	movw	r18, r24
     85a:	f2 e0       	ldi	r31, 0x02	; 2
     85c:	ef 16       	cp	r14, r31
     85e:	f1 04       	cpc	r15, r1
     860:	09 f0       	breq	.+2      	; 0x864 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     862:	74 c0       	rjmp	.+232    	; 0x94c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     864:	fe 01       	movw	r30, r28
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	e2 31       	cpi	r30, 0x12	; 18
     86a:	f1 05       	cpc	r31, r1
     86c:	08 f0       	brcs	.+2      	; 0x870 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     86e:	a0 c0       	rjmp	.+320    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     870:	88 27       	eor	r24, r24
     872:	ec 5d       	subi	r30, 0xDC	; 220
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	8f 4f       	sbci	r24, 0xFF	; 255
     878:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__tablejump2__>
     87c:	f6 01       	movw	r30, r12
     87e:	23 af       	std	Z+59, r18	; 0x3b
     880:	34 af       	std	Z+60, r19	; 0x3c
     882:	96 c0       	rjmp	.+300    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     884:	f6 01       	movw	r30, r12
     886:	25 af       	std	Z+61, r18	; 0x3d
     888:	36 af       	std	Z+62, r19	; 0x3e
     88a:	92 c0       	rjmp	.+292    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     88c:	f6 01       	movw	r30, r12
     88e:	ff 96       	adiw	r30, 0x3f	; 63
     890:	20 83       	st	Z, r18
     892:	31 83       	std	Z+1, r19	; 0x01
     894:	8d c0       	rjmp	.+282    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     896:	f6 01       	movw	r30, r12
     898:	ef 5b       	subi	r30, 0xBF	; 191
     89a:	ff 4f       	sbci	r31, 0xFF	; 255
     89c:	20 83       	st	Z, r18
     89e:	31 83       	std	Z+1, r19	; 0x01
     8a0:	87 c0       	rjmp	.+270    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8a2:	f6 01       	movw	r30, r12
     8a4:	ed 5b       	subi	r30, 0xBD	; 189
     8a6:	ff 4f       	sbci	r31, 0xFF	; 255
     8a8:	20 83       	st	Z, r18
     8aa:	31 83       	std	Z+1, r19	; 0x01
     8ac:	81 c0       	rjmp	.+258    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8ae:	f6 01       	movw	r30, r12
     8b0:	eb 5b       	subi	r30, 0xBB	; 187
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	20 83       	st	Z, r18
     8b6:	31 83       	std	Z+1, r19	; 0x01
     8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8ba:	f6 01       	movw	r30, r12
     8bc:	e9 5b       	subi	r30, 0xB9	; 185
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	20 83       	st	Z, r18
     8c2:	31 83       	std	Z+1, r19	; 0x01
     8c4:	75 c0       	rjmp	.+234    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8c6:	f8 01       	movw	r30, r16
     8c8:	60 81       	ld	r22, Z
     8ca:	71 81       	ldd	r23, Z+1	; 0x01
     8cc:	82 81       	ldd	r24, Z+2	; 0x02
     8ce:	93 81       	ldd	r25, Z+3	; 0x03
     8d0:	0e 94 13 0b 	call	0x1626	; 0x1626 <_Z6swap32m>
     8d4:	f6 01       	movw	r30, r12
     8d6:	67 ab       	std	Z+55, r22	; 0x37
     8d8:	70 af       	std	Z+56, r23	; 0x38
     8da:	81 af       	std	Z+57, r24	; 0x39
     8dc:	92 af       	std	Z+58, r25	; 0x3a
     8de:	68 c0       	rjmp	.+208    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8e0:	f6 01       	movw	r30, r12
     8e2:	e3 5b       	subi	r30, 0xB3	; 179
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	20 83       	st	Z, r18
     8e8:	31 83       	std	Z+1, r19	; 0x01
     8ea:	62 c0       	rjmp	.+196    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8ec:	f6 01       	movw	r30, r12
     8ee:	e1 5b       	subi	r30, 0xB1	; 177
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	20 83       	st	Z, r18
     8f4:	31 83       	std	Z+1, r19	; 0x01
     8f6:	5c c0       	rjmp	.+184    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8f8:	f6 01       	movw	r30, r12
     8fa:	ef 5a       	subi	r30, 0xAF	; 175
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	20 83       	st	Z, r18
     900:	31 83       	std	Z+1, r19	; 0x01
     902:	56 c0       	rjmp	.+172    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     904:	f6 01       	movw	r30, r12
     906:	ed 5a       	subi	r30, 0xAD	; 173
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	20 83       	st	Z, r18
     90c:	31 83       	std	Z+1, r19	; 0x01
     90e:	50 c0       	rjmp	.+160    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     910:	f6 01       	movw	r30, r12
     912:	eb 5a       	subi	r30, 0xAB	; 171
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	20 83       	st	Z, r18
     918:	31 83       	std	Z+1, r19	; 0x01
     91a:	4a c0       	rjmp	.+148    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     91c:	f6 01       	movw	r30, r12
     91e:	e9 5a       	subi	r30, 0xA9	; 169
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	20 83       	st	Z, r18
     924:	31 83       	std	Z+1, r19	; 0x01
     926:	44 c0       	rjmp	.+136    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     928:	f6 01       	movw	r30, r12
     92a:	e7 5a       	subi	r30, 0xA7	; 167
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	20 83       	st	Z, r18
     930:	31 83       	std	Z+1, r19	; 0x01
     932:	3e c0       	rjmp	.+124    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     934:	f6 01       	movw	r30, r12
     936:	e5 5a       	subi	r30, 0xA5	; 165
     938:	ff 4f       	sbci	r31, 0xFF	; 255
     93a:	20 83       	st	Z, r18
     93c:	31 83       	std	Z+1, r19	; 0x01
     93e:	38 c0       	rjmp	.+112    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     940:	f6 01       	movw	r30, r12
     942:	e3 5a       	subi	r30, 0xA3	; 163
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	20 83       	st	Z, r18
     948:	31 83       	std	Z+1, r19	; 0x01
     94a:	32 c0       	rjmp	.+100    	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     94c:	c1 30       	cpi	r28, 0x01	; 1
     94e:	d1 05       	cpc	r29, r1
     950:	49 f4       	brne	.+18     	; 0x964 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x12e>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	a7 01       	movw	r20, r14
     958:	b8 01       	movw	r22, r16
     95a:	c6 01       	movw	r24, r12
     95c:	cb 96       	adiw	r24, 0x3b	; 59
     95e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_Z11ConvertDataPvS_jj>
     962:	26 c0       	rjmp	.+76     	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     964:	c5 30       	cpi	r28, 0x05	; 5
     966:	d1 05       	cpc	r29, r1
     968:	49 f4       	brne	.+18     	; 0x97c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x146>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	a7 01       	movw	r20, r14
     970:	b8 01       	movw	r22, r16
     972:	c6 01       	movw	r24, r12
     974:	89 96       	adiw	r24, 0x29	; 41
     976:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_Z11ConvertDataPvS_jj>
     97a:	1a c0       	rjmp	.+52     	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     97c:	22 97       	sbiw	r28, 0x02	; 2
     97e:	c1 f4       	brne	.+48     	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     980:	f6 01       	movw	r30, r12
     982:	85 85       	ldd	r24, Z+13	; 0x0d
     984:	86 30       	cpi	r24, 0x06	; 6
     986:	90 f4       	brcc	.+36     	; 0x9ac <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x176>
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9c 01       	movw	r18, r24
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	82 0f       	add	r24, r18
     992:	93 1f       	adc	r25, r19
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	41 96       	adiw	r24, 0x11	; 17
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	a7 01       	movw	r20, r14
     9a0:	b8 01       	movw	r22, r16
     9a2:	8c 0d       	add	r24, r12
     9a4:	9d 1d       	adc	r25, r13
     9a6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_Z11ConvertDataPvS_jj>
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9ac:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN11CLaserBoard4BeepEv>
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	08 95       	ret

000009c2 <_ZN16CLaserControlAppC1Ev>:
     9c2:	28 e5       	ldi	r18, 0x58	; 88
     9c4:	30 e2       	ldi	r19, 0x20	; 32
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	08 95       	ret

000009ce <_ZN16CLaserControlAppD1Ev>:
     9ce:	28 e5       	ldi	r18, 0x58	; 88
     9d0:	30 e2       	ldi	r19, 0x20	; 32
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	0e 94 cc 21 	call	0x4398	; 0x4398 <_ZN16CMBEventsHandlerD1Ev>
     9dc:	08 95       	ret

000009de <_ZN16CLaserControlApp5StartEv>:
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	1f 92       	push	r1
     9ec:	1f 92       	push	r1
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	7c 01       	movw	r14, r24
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 0f 0b 	call	0x161e	; 0x161e <_Z4swapj>
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	87 01       	movw	r16, r14
     a02:	03 59       	subi	r16, 0x93	; 147
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	22 e0       	ldi	r18, 0x02	; 2
     a08:	ae 01       	movw	r20, r28
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	63 e0       	ldi	r22, 0x03	; 3
     a10:	f8 01       	movw	r30, r16
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	0e 94 ca 23 	call	0x4794	; 0x4794 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     a1a:	f8 01       	movw	r30, r16
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     a24:	a7 01       	movw	r20, r14
     a26:	45 5c       	subi	r20, 0xC5	; 197
     a28:	5f 4f       	sbci	r21, 0xFF	; 255
     a2a:	26 e2       	ldi	r18, 0x26	; 38
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	f8 01       	movw	r30, r16
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     a3c:	f8 01       	movw	r30, r16
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	f7 01       	movw	r30, r14
     a4a:	84 87       	std	Z+12, r24	; 0x0c
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	08 95       	ret

00000a5e <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a5e:	4f 92       	push	r4
     a60:	5f 92       	push	r5
     a62:	6f 92       	push	r6
     a64:	7f 92       	push	r7
     a66:	8f 92       	push	r8
     a68:	9f 92       	push	r9
     a6a:	af 92       	push	r10
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	7c 01       	movw	r14, r24
     a88:	8b 01       	movw	r16, r22
     a8a:	fb 01       	movw	r30, r22
     a8c:	80 80       	ld	r8, Z
     a8e:	91 80       	ldd	r9, Z+1	; 0x01
     a90:	88 ee       	ldi	r24, 0xE8	; 232
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	b4 01       	movw	r22, r8
     a96:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__udivmodhi4>
     a9a:	5b 01       	movw	r10, r22
     a9c:	22 81       	ldd	r18, Z+2	; 0x02
     a9e:	33 81       	ldd	r19, Z+3	; 0x03
     aa0:	a8 ee       	ldi	r26, 0xE8	; 232
     aa2:	b3 e0       	ldi	r27, 0x03	; 3
     aa4:	0e 94 c6 2c 	call	0x598c	; 0x598c <__umulhisi3>
     aa8:	95 01       	movw	r18, r10
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__udivmodsi4>
     ab2:	29 01       	movw	r4, r18
     ab4:	3a 01       	movw	r6, r20
     ab6:	f8 01       	movw	r30, r16
     ab8:	c4 80       	ldd	r12, Z+4	; 0x04
     aba:	d5 80       	ldd	r13, Z+5	; 0x05
     abc:	8a e6       	ldi	r24, 0x6A	; 106
     abe:	98 e1       	ldi	r25, 0x18	; 24
     ac0:	b4 01       	movw	r22, r8
     ac2:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__udivmodhi4>
     ac6:	8b 01       	movw	r16, r22
     ac8:	00 0f       	add	r16, r16
     aca:	11 1f       	adc	r17, r17
     acc:	66 0f       	add	r22, r22
     ace:	77 1f       	adc	r23, r23
     ad0:	66 0f       	add	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	06 0f       	add	r16, r22
     ada:	17 1f       	adc	r17, r23
     adc:	f7 01       	movw	r30, r14
     ade:	07 a7       	std	Z+47, r16	; 0x2f
     ae0:	10 ab       	std	Z+48, r17	; 0x30
     ae2:	d8 01       	movw	r26, r16
     ae4:	a3 01       	movw	r20, r6
     ae6:	92 01       	movw	r18, r4
     ae8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__muluhisi3>
     aec:	28 ee       	ldi	r18, 0xE8	; 232
     aee:	33 e0       	ldi	r19, 0x03	; 3
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__udivmodsi4>
     af8:	02 1b       	sub	r16, r18
     afa:	13 0b       	sbc	r17, r19
     afc:	f7 01       	movw	r30, r14
     afe:	01 ab       	std	Z+49, r16	; 0x31
     b00:	12 ab       	std	Z+50, r17	; 0x32
     b02:	a3 aa       	std	Z+51, r10	; 0x33
     b04:	b4 aa       	std	Z+52, r11	; 0x34
     b06:	88 ec       	ldi	r24, 0xC8	; 200
     b08:	8c 9d       	mul	r24, r12
     b0a:	90 01       	movw	r18, r0
     b0c:	8d 9d       	mul	r24, r13
     b0e:	30 0d       	add	r19, r0
     b10:	11 24       	eor	r1, r1
     b12:	36 95       	lsr	r19
     b14:	27 95       	ror	r18
     b16:	36 95       	lsr	r19
     b18:	27 95       	ror	r18
     b1a:	ab e7       	ldi	r26, 0x7B	; 123
     b1c:	b4 e1       	ldi	r27, 0x14	; 20
     b1e:	0e 94 c6 2c 	call	0x598c	; 0x598c <__umulhisi3>
     b22:	8c 01       	movw	r16, r24
     b24:	16 95       	lsr	r17
     b26:	07 95       	ror	r16
     b28:	09 83       	std	Y+1, r16	; 0x01
     b2a:	1a 83       	std	Y+2, r17	; 0x02
     b2c:	96 01       	movw	r18, r12
     b2e:	a8 ec       	ldi	r26, 0xC8	; 200
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	0e 94 c6 2c 	call	0x598c	; 0x598c <__umulhisi3>
     b36:	9b 01       	movw	r18, r22
     b38:	ac 01       	movw	r20, r24
     b3a:	c3 01       	movw	r24, r6
     b3c:	b2 01       	movw	r22, r4
     b3e:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <__mulsi3>
     b42:	20 ea       	ldi	r18, 0xA0	; 160
     b44:	36 e8       	ldi	r19, 0x86	; 134
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__udivmodsi4>
     b4e:	12 2f       	mov	r17, r18
     b50:	82 2f       	mov	r24, r18
     b52:	93 2f       	mov	r25, r19
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	c3 01       	movw	r24, r6
     b5a:	b2 01       	movw	r22, r4
     b5c:	2a e0       	ldi	r18, 0x0A	; 10
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__udivmodsi4>
     b68:	62 2f       	mov	r22, r18
     b6a:	82 2f       	mov	r24, r18
     b6c:	93 2f       	mov	r25, r19
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	20 2f       	mov	r18, r16
     b74:	3a 81       	ldd	r19, Y+2	; 0x02
     b76:	41 2f       	mov	r20, r17
     b78:	5c 81       	ldd	r21, Y+4	; 0x04
     b7a:	7e 81       	ldd	r23, Y+6	; 0x06
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	26 96       	adiw	r28, 0x06	; 6
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	7f 90       	pop	r7
     ba0:	6f 90       	pop	r6
     ba2:	5f 90       	pop	r5
     ba4:	4f 90       	pop	r4
     ba6:	08 95       	ret

00000ba8 <_ZN16CLaserControlApp11GetVariableEjj>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
     bae:	c3 59       	subi	r28, 0x93	; 147
     bb0:	df 4f       	sbci	r29, 0xFF	; 255
     bb2:	88 81       	ld	r24, Y
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	0e 94 1e 24 	call	0x483c	; 0x483c <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 a4 23 	call	0x4748	; 0x4748 <_ZN9CMBSender18WaitMODBUSListenerEv>
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
     bd6:	c3 59       	subi	r28, 0x93	; 147
     bd8:	df 4f       	sbci	r29, 0xFF	; 255
     bda:	88 81       	ld	r24, Y
     bdc:	99 81       	ldd	r25, Y+1	; 0x01
     bde:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	1f 92       	push	r1
     bfa:	1f 92       	push	r1
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8c 01       	movw	r16, r24
     c02:	cb 01       	movw	r24, r22
     c04:	0e 94 0f 0b 	call	0x161e	; 0x161e <_Z4swapj>
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	03 59       	subi	r16, 0x93	; 147
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
     c10:	22 e0       	ldi	r18, 0x02	; 2
     c12:	ae 01       	movw	r20, r28
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	0e 94 ca 23 	call	0x4794	; 0x4794 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c24:	f8 01       	movw	r30, r16
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
	//laserBoard.Relay1Off();
}

void CLaserControlApp::OnPWMTimerOVF()
{
	laserBoard.PWMOn();
     c3c:	8a e4       	ldi	r24, 0x4A	; 74
     c3e:	94 e2       	ldi	r25, 0x24	; 36
     c40:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_ZN11CLaserBoard5PWMOnEv>
     c44:	08 95       	ret

00000c46 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMP()
{
	laserBoard.PWMOff();
     c46:	8a e4       	ldi	r24, 0x4A	; 74
     c48:	94 e2       	ldi	r25, 0x24	; 36
     c4a:	0e 94 56 26 	call	0x4cac	; 0x4cac <_ZN11CLaserBoard6PWMOffEv>
     c4e:	08 95       	ret

00000c50 <_GLOBAL__sub_I_timer>:
#include "CDGUSDatabase.h"
#include <string.h>
#include <util/delay.h>
#include <avr/eeprom.h>

CTimerC timer;
     c50:	84 ea       	ldi	r24, 0xA4	; 164
     c52:	91 e2       	ldi	r25, 0x21	; 33
     c54:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     c58:	81 ea       	ldi	r24, 0xA1	; 161
     c5a:	91 e2       	ldi	r25, 0x21	; 33
     c5c:	0e 94 14 2b 	call	0x5628	; 0x5628 <_ZN7CTimerFC1Ev>
     c60:	08 95       	ret

00000c62 <_GLOBAL__sub_D_timer>:
     c62:	81 ea       	ldi	r24, 0xA1	; 161
     c64:	91 e2       	ldi	r25, 0x21	; 33
     c66:	0e 94 20 2b 	call	0x5640	; 0x5640 <_ZN7CTimerFD1Ev>
#include "CDGUSDatabase.h"
#include <string.h>
#include <util/delay.h>
#include <avr/eeprom.h>

CTimerC timer;
     c6a:	84 ea       	ldi	r24, 0xA4	; 164
     c6c:	91 e2       	ldi	r25, 0x21	; 33
     c6e:	0e 94 04 28 	call	0x5008	; 0x5008 <_ZN7CTimerCD1Ev>
     c72:	08 95       	ret

00000c74 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     c86:	fc 01       	movw	r30, r24
     c88:	e3 59       	subi	r30, 0x93	; 147
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	60 83       	st	Z, r22
     c8e:	71 83       	std	Z+1, r23	; 0x01
	
	// Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     c90:	46 e0       	ldi	r20, 0x06	; 6
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	84 ea       	ldi	r24, 0xA4	; 164
     c96:	91 e2       	ldi	r25, 0x21	; 33
     c98:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     c9c:	68 ea       	ldi	r22, 0xA8	; 168
     c9e:	71 e6       	ldi	r23, 0x61	; 97
     ca0:	84 ea       	ldi	r24, 0xA4	; 164
     ca2:	91 e2       	ldi	r25, 0x21	; 33
     ca4:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     ca8:	21 e0       	ldi	r18, 0x01	; 1
     caa:	ae 01       	movw	r20, r28
     cac:	64 ea       	ldi	r22, 0xA4	; 164
     cae:	7a e0       	ldi	r23, 0x0A	; 10
     cb0:	84 ea       	ldi	r24, 0xA4	; 164
     cb2:	91 e2       	ldi	r25, 0x21	; 33
     cb4:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	timer.Start(25000);
     cb8:	68 ea       	ldi	r22, 0xA8	; 168
     cba:	71 e6       	ldi	r23, 0x61	; 97
     cbc:	84 ea       	ldi	r24, 0xA4	; 164
     cbe:	91 e2       	ldi	r25, 0x21	; 33
     cc0:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <_ZN7CTimerC5StartEj>
	
	// Set global variables
	PIC_ID = 0;
     cc4:	1e 86       	std	Y+14, r1	; 0x0e
	update = false;
     cc6:	1f 86       	std	Y+15, r1	; 0x0f
	prepare = true;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	88 8b       	std	Y+16, r24	; 0x10
	m_wSetMin = 0;
     ccc:	6e 01       	movw	r12, r28
     cce:	87 e6       	ldi	r24, 0x67	; 103
     cd0:	c8 0e       	add	r12, r24
     cd2:	d1 1c       	adc	r13, r1
     cd4:	f6 01       	movw	r30, r12
     cd6:	10 82       	st	Z, r1
     cd8:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 5;
     cda:	7e 01       	movw	r14, r28
     cdc:	f9 e6       	ldi	r31, 0x69	; 105
     cde:	ef 0e       	add	r14, r31
     ce0:	f1 1c       	adc	r15, r1
     ce2:	25 e0       	ldi	r18, 0x05	; 5
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	f7 01       	movw	r30, r14
     ce8:	20 83       	st	Z, r18
     cea:	31 83       	std	Z+1, r19	; 0x01
	m_wMillSec = 0;
     cec:	34 97       	sbiw	r30, 0x04	; 4
     cee:	10 82       	st	Z, r1
     cf0:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
     cf2:	f6 01       	movw	r30, r12
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	36 97       	sbiw	r30, 0x06	; 6
     cfa:	80 83       	st	Z, r24
     cfc:	91 83       	std	Z+1, r25	; 0x01
	m_wSeconds = m_wSetSec;
     cfe:	f7 01       	movw	r30, r14
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	36 97       	sbiw	r30, 0x06	; 6
     d06:	80 83       	st	Z, r24
     d08:	91 83       	std	Z+1, r25	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
     d0a:	8a e0       	ldi	r24, 0x0A	; 10
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	89 a7       	std	Y+41, r24	; 0x29
     d10:	9a a7       	std	Y+42, r25	; 0x2a
	m_structLaserProfile[PROFILE_FAST].Duration  = 50;			// ms
     d12:	82 e3       	ldi	r24, 0x32	; 50
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	8b a7       	std	Y+43, r24	; 0x2b
     d18:	9c a7       	std	Y+44, r25	; 0x2c
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
     d1a:	84 e6       	ldi	r24, 0x64	; 100
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	8d a7       	std	Y+45, r24	; 0x2d
     d20:	9e a7       	std	Y+46, r25	; 0x2e
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
     d22:	2b a3       	std	Y+35, r18	; 0x23
     d24:	3c a3       	std	Y+36, r19	; 0x24
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 100;		// ms
     d26:	8d a3       	std	Y+37, r24	; 0x25
     d28:	9e a3       	std	Y+38, r25	; 0x26
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
     d2a:	8f a3       	std	Y+39, r24	; 0x27
     d2c:	98 a7       	std	Y+40, r25	; 0x28
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
     d2e:	22 e0       	ldi	r18, 0x02	; 2
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	2d 8f       	std	Y+29, r18	; 0x1d
     d34:	3e 8f       	std	Y+30, r19	; 0x1e
	m_structLaserProfile[PROFILE_SLOW].Duration  = 200;			// ma
     d36:	28 ec       	ldi	r18, 0xC8	; 200
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	2f 8f       	std	Y+31, r18	; 0x1f
     d3c:	38 a3       	std	Y+32, r19	; 0x20
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
     d3e:	89 a3       	std	Y+33, r24	; 0x21
     d40:	9a a3       	std	Y+34, r25	; 0x22
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	2f 8b       	std	Y+23, r18	; 0x17
     d48:	38 8f       	std	Y+24, r19	; 0x18
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 400;		// ms
     d4a:	20 e9       	ldi	r18, 0x90	; 144
     d4c:	31 e0       	ldi	r19, 0x01	; 1
     d4e:	29 8f       	std	Y+25, r18	; 0x19
     d50:	3a 8f       	std	Y+26, r19	; 0x1a
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
     d52:	8b 8f       	std	Y+27, r24	; 0x1b
     d54:	9c 8f       	std	Y+28, r25	; 0x1c
	
	// Current profile
	Profile = PROFILE_FAST;
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	8d 87       	std	Y+13, r24	; 0x0d
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <eeprom_read_dword>
     d62:	6f ab       	std	Y+55, r22	; 0x37
     d64:	78 af       	std	Y+56, r23	; 0x38
     d66:	89 af       	std	Y+57, r24	; 0x39
     d68:	9a af       	std	Y+58, r25	; 0x3a
	laserDiodeData.mode = Profile;
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	8b af       	std	Y+59, r24	; 0x3b
     d70:	9c af       	std	Y+60, r25	; 0x3c
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
     d72:	be 01       	movw	r22, r28
     d74:	67 5d       	subi	r22, 0xD7	; 215
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	de 01       	movw	r26, r28
     d7a:	dd 96       	adiw	r26, 0x3d	; 61
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	fb 01       	movw	r30, r22
     d80:	01 90       	ld	r0, Z+
     d82:	0d 92       	st	X+, r0
     d84:	8a 95       	dec	r24
     d86:	e1 f7       	brne	.-8      	; 0xd80 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x10c>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
     d88:	8e 01       	movw	r16, r28
     d8a:	0d 5b       	subi	r16, 0xBD	; 189
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	ce 01       	movw	r24, r28
     d90:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     d94:	f8 01       	movw	r30, r16
     d96:	20 83       	st	Z, r18
     d98:	31 83       	std	Z+1, r19	; 0x01
     d9a:	42 83       	std	Z+2, r20	; 0x02
     d9c:	53 83       	std	Z+3, r21	; 0x03
     d9e:	64 83       	std	Z+4, r22	; 0x04
     da0:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
     da2:	f6 01       	movw	r30, r12
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	70 97       	sbiw	r30, 0x10	; 16
     daa:	80 83       	st	Z, r24
     dac:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
     dae:	f7 01       	movw	r30, r14
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	70 97       	sbiw	r30, 0x10	; 16
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
     dba:	6f a9       	ldd	r22, Y+55	; 0x37
     dbc:	78 ad       	ldd	r23, Y+56	; 0x38
     dbe:	89 ad       	ldd	r24, Y+57	; 0x39
     dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
     dc2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_Z6swap32m>
     dc6:	fe 01       	movw	r30, r28
     dc8:	e7 5b       	subi	r30, 0xB7	; 183
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	60 83       	st	Z, r22
     dce:	71 83       	std	Z+1, r23	; 0x01
     dd0:	82 83       	std	Z+2, r24	; 0x02
     dd2:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
     dd4:	34 96       	adiw	r30, 0x04	; 4
     dd6:	10 82       	st	Z, r1
     dd8:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 0;
     dda:	32 96       	adiw	r30, 0x02	; 2
     ddc:	10 82       	st	Z, r1
     dde:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.temperature = temperature;
     de0:	32 96       	adiw	r30, 0x02	; 2
     de2:	80 91 d7 23 	lds	r24, 0x23D7
     de6:	90 91 d8 23 	lds	r25, 0x23D8
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 6;
     dee:	32 96       	adiw	r30, 0x02	; 2
     df0:	86 e0       	ldi	r24, 0x06	; 6
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
     df8:	32 96       	adiw	r30, 0x02	; 2
     dfa:	10 82       	st	Z, r1
     dfc:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
     dfe:	36 96       	adiw	r30, 0x06	; 6
     e00:	10 82       	st	Z, r1
     e02:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
     e04:	32 96       	adiw	r30, 0x02	; 2
     e06:	8d e0       	ldi	r24, 0x0D	; 13
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     e0e:	47 e0       	ldi	r20, 0x07	; 7
     e10:	63 e0       	ldi	r22, 0x03	; 3
     e12:	81 ea       	ldi	r24, 0xA1	; 161
     e14:	91 e2       	ldi	r25, 0x21	; 33
     e16:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
     e1a:	6f a5       	ldd	r22, Y+47	; 0x2f
     e1c:	78 a9       	ldd	r23, Y+48	; 0x30
     e1e:	81 ea       	ldi	r24, 0xA1	; 161
     e20:	91 e2       	ldi	r25, 0x21	; 33
     e22:	0e 94 8f 2a 	call	0x551e	; 0x551e <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     e26:	69 a9       	ldd	r22, Y+49	; 0x31
     e28:	7a a9       	ldd	r23, Y+50	; 0x32
     e2a:	81 ea       	ldi	r24, 0xA1	; 161
     e2c:	91 e2       	ldi	r25, 0x21	; 33
     e2e:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     e32:	69 a9       	ldd	r22, Y+49	; 0x31
     e34:	7a a9       	ldd	r23, Y+50	; 0x32
     e36:	81 ea       	ldi	r24, 0xA1	; 161
     e38:	91 e2       	ldi	r25, 0x21	; 33
     e3a:	0e 94 99 2a 	call	0x5532	; 0x5532 <_ZN7CTimerF8SetCOMPBEj>
	//laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
     e3e:	21 e0       	ldi	r18, 0x01	; 1
     e40:	ae 01       	movw	r20, r28
     e42:	60 ee       	ldi	r22, 0xE0	; 224
     e44:	79 e0       	ldi	r23, 0x09	; 9
     e46:	81 ea       	ldi	r24, 0xA1	; 161
     e48:	91 e2       	ldi	r25, 0x21	; 33
     e4a:	0e 94 cc 2a 	call	0x5598	; 0x5598 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
     e4e:	60 e1       	ldi	r22, 0x10	; 16
     e50:	81 ea       	ldi	r24, 0xA1	; 161
     e52:	91 e2       	ldi	r25, 0x21	; 33
     e54:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
     e58:	60 e2       	ldi	r22, 0x20	; 32
     e5a:	81 ea       	ldi	r24, 0xA1	; 161
     e5c:	91 e2       	ldi	r25, 0x21	; 33
     e5e:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     e62:	60 e1       	ldi	r22, 0x10	; 16
     e64:	81 ea       	ldi	r24, 0xA1	; 161
     e66:	91 e2       	ldi	r25, 0x21	; 33
     e68:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     e6c:	60 e2       	ldi	r22, 0x20	; 32
     e6e:	81 ea       	ldi	r24, 0xA1	; 161
     e70:	91 e2       	ldi	r25, 0x21	; 33
     e72:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	08 95       	ret

00000e88 <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	00 d0       	rcall	.+0      	; 0xe96 <_ZN16CLaserControlApp3RunEv+0xe>
     e96:	1f 92       	push	r1
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	7c 01       	movw	r14, r24
	// Get PIC ID
	static uint16_t prs = 0;
	if ((prs++ % 4) == 0)
     e9e:	80 91 9e 21 	lds	r24, 0x219E
     ea2:	90 91 9f 21 	lds	r25, 0x219F
     ea6:	9c 01       	movw	r18, r24
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	20 93 9e 21 	sts	0x219E, r18
     eb0:	30 93 9f 21 	sts	0x219F, r19
     eb4:	83 70       	andi	r24, 0x03	; 3
     eb6:	99 27       	eor	r25, r25
     eb8:	89 2b       	or	r24, r25
     eba:	09 f5       	brne	.+66     	; 0xefe <_ZN16CLaserControlApp3RunEv+0x76>
	{
		m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     ebc:	42 e0       	ldi	r20, 0x02	; 2
     ebe:	63 e0       	ldi	r22, 0x03	; 3
     ec0:	87 01       	movw	r16, r14
     ec2:	03 59       	subi	r16, 0x93	; 147
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	f8 01       	movw	r30, r16
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	0e 94 18 24 	call	0x4830	; 0x4830 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
		m_cpSender->WaitMODBUSTransmitter();
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     eda:	f8 01       	movw	r30, r16
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	0e 94 a4 23 	call	0x4748	; 0x4748 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee4:	8f e3       	ldi	r24, 0x3F	; 63
     ee6:	9f e1       	ldi	r25, 0x1F	; 31
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <_ZN16CLaserControlApp3RunEv+0x60>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <_ZN16CLaserControlApp3RunEv+0x66>
     eee:	00 00       	nop
		
		_delay_ms(1);
		
		GetVariable(VARIABLE_ADDR_COOLING, 2);
     ef0:	42 e0       	ldi	r20, 0x02	; 2
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	6d e0       	ldi	r22, 0x0D	; 13
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	c7 01       	movw	r24, r14
     efa:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11GetVariableEjj>
     efe:	ef e3       	ldi	r30, 0x3F	; 63
     f00:	ff e1       	ldi	r31, 0x1F	; 31
     f02:	31 97       	sbiw	r30, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <_ZN16CLaserControlApp3RunEv+0x7a>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <_ZN16CLaserControlApp3RunEv+0x80>
     f08:	00 00       	nop
	}
	
	_delay_ms(1);
	
	SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
     f0a:	22 e0       	ldi	r18, 0x02	; 2
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	47 ed       	ldi	r20, 0xD7	; 215
     f10:	53 e2       	ldi	r21, 0x23	; 35
     f12:	6c e0       	ldi	r22, 0x0C	; 12
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	c7 01       	movw	r24, r14
     f18:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
	SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
     f1c:	22 e0       	ldi	r18, 0x02	; 2
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	a7 01       	movw	r20, r14
     f22:	45 59       	subi	r20, 0x95	; 149
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	6e e0       	ldi	r22, 0x0E	; 14
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	c7 01       	movw	r24, r14
     f2c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
	
	uint16_t coolpwm = laserDiodeData.cooling * 170;
     f30:	f7 01       	movw	r30, r14
     f32:	ed 5a       	subi	r30, 0xAD	; 173
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	2a ea       	ldi	r18, 0xAA	; 170
     f3c:	28 9f       	mul	r18, r24
     f3e:	b0 01       	movw	r22, r0
     f40:	29 9f       	mul	r18, r25
     f42:	70 0d       	add	r23, r0
     f44:	11 24       	eor	r1, r1
	pwmtimer.SetCOMPA(coolpwm);
     f46:	8b e7       	ldi	r24, 0x7B	; 123
     f48:	94 e2       	ldi	r25, 0x24	; 36
     f4a:	0e 94 db 29 	call	0x53b6	; 0x53b6 <_ZN8CTimerD18SetCOMPAEj>
	
	switch (state)
     f4e:	f7 01       	movw	r30, r14
     f50:	84 85       	ldd	r24, Z+12	; 0x0c
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	8e 30       	cpi	r24, 0x0E	; 14
     f56:	91 05       	cpc	r25, r1
     f58:	08 f0       	brcs	.+2      	; 0xf5c <_ZN16CLaserControlApp3RunEv+0xd4>
     f5a:	c2 c1       	rjmp	.+900    	; 0x12e0 <_ZN16CLaserControlApp3RunEv+0x458>
     f5c:	fc 01       	movw	r30, r24
     f5e:	88 27       	eor	r24, r24
     f60:	ea 5c       	subi	r30, 0xCA	; 202
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__tablejump2__>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
     f6a:	63 e0       	ldi	r22, 0x03	; 3
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	c7 01       	movw	r24, r14
     f70:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	f7 01       	movw	r30, r14
     f78:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     f7a:	b6 c1       	rjmp	.+876    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_WORKSETUP:
			{
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
     f7c:	46 e0       	ldi	r20, 0x06	; 6
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	62 e0       	ldi	r22, 0x02	; 2
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	c7 01       	movw	r24, r14
     f86:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11GetVariableEjj>
     f8a:	ff ef       	ldi	r31, 0xFF	; 255
     f8c:	21 ee       	ldi	r18, 0xE1	; 225
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	f1 50       	subi	r31, 0x01	; 1
     f92:	20 40       	sbci	r18, 0x00	; 0
     f94:	80 40       	sbci	r24, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <_ZN16CLaserControlApp3RunEv+0x108>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <_ZN16CLaserControlApp3RunEv+0x112>
     f9a:	00 00       	nop
				_delay_ms(50);
				GetVariable(VARIABLE_ADDR_MODE, 2);
     f9c:	42 e0       	ldi	r20, 0x02	; 2
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	c7 01       	movw	r24, r14
     fa6:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11GetVariableEjj>
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	e1 ee       	ldi	r30, 0xE1	; 225
     fae:	f4 e0       	ldi	r31, 0x04	; 4
     fb0:	91 50       	subi	r25, 0x01	; 1
     fb2:	e0 40       	sbci	r30, 0x00	; 0
     fb4:	f0 40       	sbci	r31, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <_ZN16CLaserControlApp3RunEv+0x128>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <_ZN16CLaserControlApp3RunEv+0x132>
     fba:	00 00       	nop
				_delay_ms(50);
				
				APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
     fbc:	f7 01       	movw	r30, r14
     fbe:	83 ad       	ldd	r24, Z+59	; 0x3b
				if (Profile != prof)	{update = true; Profile = prof;}
     fc0:	95 85       	ldd	r25, Z+13	; 0x0d
     fc2:	98 17       	cp	r25, r24
     fc4:	19 f0       	breq	.+6      	; 0xfcc <_ZN16CLaserControlApp3RunEv+0x144>
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	97 87       	std	Z+15, r25	; 0x0f
     fca:	85 87       	std	Z+13, r24	; 0x0d
				
				laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     fcc:	87 01       	movw	r16, r14
     fce:	0d 5b       	subi	r16, 0xBD	; 189
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	f7 01       	movw	r30, r14
     fd4:	85 85       	ldd	r24, Z+13	; 0x0d
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	bc 01       	movw	r22, r24
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	68 0f       	add	r22, r24
     fe0:	79 1f       	adc	r23, r25
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	6f 5e       	subi	r22, 0xEF	; 239
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	6e 0d       	add	r22, r14
     fec:	7f 1d       	adc	r23, r15
     fee:	c7 01       	movw	r24, r14
     ff0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     ff4:	f8 01       	movw	r30, r16
     ff6:	20 83       	st	Z, r18
     ff8:	31 83       	std	Z+1, r19	; 0x01
     ffa:	42 83       	std	Z+2, r20	; 0x02
     ffc:	53 83       	std	Z+3, r21	; 0x03
     ffe:	64 83       	std	Z+4, r22	; 0x04
    1000:	75 83       	std	Z+5, r23	; 0x05
				laserPower = m_structLaserProfile[Profile].EnergyPercent;
    1002:	f7 01       	movw	r30, r14
    1004:	85 85       	ldd	r24, Z+13	; 0x0d
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	fc 01       	movw	r30, r24
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	e8 0f       	add	r30, r24
    1010:	f9 1f       	adc	r31, r25
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ee 0d       	add	r30, r14
    1018:	ff 1d       	adc	r31, r15
    101a:	85 89       	ldd	r24, Z+21	; 0x15
    101c:	96 89       	ldd	r25, Z+22	; 0x16
    101e:	f7 01       	movw	r30, r14
    1020:	85 ab       	std	Z+53, r24	; 0x35
    1022:	96 ab       	std	Z+54, r25	; 0x36
				
				//SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile],  sizeof(DGUS_LASERPROFILE));
				//SetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, (uint16_t*)&laserDiodeData.lasersettings,  sizeof(DGUS_LASERSETTINGS));
			}
		break;
    1024:	61 c1       	rjmp	.+706    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    1026:	f7 01       	movw	r30, r14
    1028:	85 85       	ldd	r24, Z+13	; 0x0d
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	ac 01       	movw	r20, r24
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	48 0f       	add	r20, r24
    1034:	59 1f       	adc	r21, r25
    1036:	44 0f       	add	r20, r20
    1038:	55 1f       	adc	r21, r21
    103a:	4f 5e       	subi	r20, 0xEF	; 239
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	4e 0d       	add	r20, r14
    1040:	5f 1d       	adc	r21, r15
    1042:	26 e0       	ldi	r18, 0x06	; 6
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	c7 01       	movw	r24, r14
    104c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
				if (prepare)
    1050:	f7 01       	movw	r30, r14
    1052:	80 89       	ldd	r24, Z+16	; 0x10
    1054:	88 23       	and	r24, r24
    1056:	b1 f0       	breq	.+44     	; 0x1084 <_ZN16CLaserControlApp3RunEv+0x1fc>
				{
					timervar.timer_minutes = m_wMinutes;
    1058:	ef 59       	subi	r30, 0x9F	; 159
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    1064:	32 96       	adiw	r30, 0x02	; 2
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	8b 83       	std	Y+3, r24	; 0x03
    106c:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    106e:	24 e0       	ldi	r18, 0x04	; 4
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	ae 01       	movw	r20, r28
    1074:	4f 5f       	subi	r20, 0xFF	; 255
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	6f e0       	ldi	r22, 0x0F	; 15
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	c7 01       	movw	r24, r14
    107e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
    1082:	32 c1       	rjmp	.+612    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
				}
				else
					SetPictureId(PICID_WORK_IDLE);
    1084:	6a e0       	ldi	r22, 0x0A	; 10
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	c7 01       	movw	r24, r14
    108a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    108e:	2c c1       	rjmp	.+600    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				if (!laserBoard.Footswitch())
    1090:	8a e4       	ldi	r24, 0x4A	; 74
    1092:	94 e2       	ldi	r25, 0x24	; 36
    1094:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <_ZN11CLaserBoard10FootswitchEv>
    1098:	81 11       	cpse	r24, r1
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <_ZN16CLaserControlApp3RunEv+0x22e>
				{
					if (state != APP_WORKLIGHT)
    109c:	f7 01       	movw	r30, r14
    109e:	84 85       	ldd	r24, Z+12	; 0x0c
    10a0:	86 30       	cpi	r24, 0x06	; 6
    10a2:	a9 f0       	breq	.+42     	; 0x10ce <_ZN16CLaserControlApp3RunEv+0x246>
					{
						SetPictureId(PICID_WORK_STARTED);
    10a4:	60 e1       	ldi	r22, 0x10	; 16
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	c7 01       	movw	r24, r14
    10aa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    10ae:	86 e0       	ldi	r24, 0x06	; 6
    10b0:	f7 01       	movw	r30, r14
    10b2:	84 87       	std	Z+12, r24	; 0x0c
    10b4:	0c c0       	rjmp	.+24     	; 0x10ce <_ZN16CLaserControlApp3RunEv+0x246>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    10b6:	f7 01       	movw	r30, r14
    10b8:	84 85       	ldd	r24, Z+12	; 0x0c
    10ba:	85 30       	cpi	r24, 0x05	; 5
    10bc:	41 f0       	breq	.+16     	; 0x10ce <_ZN16CLaserControlApp3RunEv+0x246>
					{
						SetPictureId(PICID_WORK_POWERON);
    10be:	6e e0       	ldi	r22, 0x0E	; 14
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	c7 01       	movw	r24, r14
    10c4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    10c8:	85 e0       	ldi	r24, 0x05	; 5
    10ca:	f7 01       	movw	r30, r14
    10cc:	84 87       	std	Z+12, r24	; 0x0c
					}
				}
			
				uint32_t cnt = swap32(laserCounter);
    10ce:	f7 01       	movw	r30, r14
    10d0:	67 a9       	ldd	r22, Z+55	; 0x37
    10d2:	70 ad       	ldd	r23, Z+56	; 0x38
    10d4:	81 ad       	ldd	r24, Z+57	; 0x39
    10d6:	92 ad       	ldd	r25, Z+58	; 0x3a
    10d8:	0e 94 13 0b 	call	0x1626	; 0x1626 <_Z6swap32m>
    10dc:	69 83       	std	Y+1, r22	; 0x01
    10de:	7a 83       	std	Y+2, r23	; 0x02
    10e0:	8b 83       	std	Y+3, r24	; 0x03
    10e2:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    10e4:	24 e0       	ldi	r18, 0x04	; 4
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	ae 01       	movw	r20, r28
    10ea:	4f 5f       	subi	r20, 0xFF	; 255
    10ec:	5f 4f       	sbci	r21, 0xFF	; 255
    10ee:	68 e0       	ldi	r22, 0x08	; 8
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	c7 01       	movw	r24, r14
    10f4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
			}
		break;
    10f8:	f7 c0       	rjmp	.+494    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		
		// Commands
		case APP_WORKOnReady:
			{
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    10fa:	8a e4       	ldi	r24, 0x4A	; 74
    10fc:	94 e2       	ldi	r25, 0x24	; 36
    10fe:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <_ZN11CLaserBoard12LaserPowerOnEv>
				
				SetPictureId(PICID_WORK_READY);
    1102:	6c e0       	ldi	r22, 0x0C	; 12
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	c7 01       	movw	r24, r14
    1108:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    110c:	ed c0       	rjmp	.+474    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    110e:	f7 01       	movw	r30, r14
    1110:	85 a9       	ldd	r24, Z+53	; 0x35
    1112:	96 a9       	ldd	r25, Z+54	; 0x36
    1114:	ac 01       	movw	r20, r24
    1116:	56 95       	lsr	r21
    1118:	54 2f       	mov	r21, r20
    111a:	44 27       	eor	r20, r20
    111c:	57 95       	ror	r21
    111e:	47 95       	ror	r20
    1120:	98 2f       	mov	r25, r24
    1122:	88 27       	eor	r24, r24
    1124:	99 0f       	add	r25, r25
    1126:	48 0f       	add	r20, r24
    1128:	59 1f       	adc	r21, r25
    112a:	9a 01       	movw	r18, r20
    112c:	a1 e1       	ldi	r26, 0x11	; 17
    112e:	b4 e0       	ldi	r27, 0x04	; 4
    1130:	0e 94 c6 2c 	call	0x598c	; 0x598c <__umulhisi3>
    1134:	48 1b       	sub	r20, r24
    1136:	59 0b       	sbc	r21, r25
    1138:	56 95       	lsr	r21
    113a:	47 95       	ror	r20
    113c:	84 0f       	add	r24, r20
    113e:	95 1f       	adc	r25, r21
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	92 95       	swap	r25
    1146:	82 95       	swap	r24
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	89 27       	eor	r24, r25
    114c:	9f 70       	andi	r25, 0x0F	; 15
    114e:	89 27       	eor	r24, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    115c:	42 e0       	ldi	r20, 0x02	; 2
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	be 01       	movw	r22, r28
    1162:	6f 5f       	subi	r22, 0xFF	; 255
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	84 e8       	ldi	r24, 0x84	; 132
    1168:	94 e2       	ldi	r25, 0x24	; 36
    116a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    116e:	6e e0       	ldi	r22, 0x0E	; 14
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	c7 01       	movw	r24, r14
    1174:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1178:	b7 c0       	rjmp	.+366    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    117a:	6a e0       	ldi	r22, 0x0A	; 10
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	c7 01       	movw	r24, r14
    1180:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1184:	81 ea       	ldi	r24, 0xA1	; 161
    1186:	91 e2       	ldi	r25, 0x21	; 33
    1188:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    118c:	60 e1       	ldi	r22, 0x10	; 16
    118e:	81 ea       	ldi	r24, 0xA1	; 161
    1190:	91 e2       	ldi	r25, 0x21	; 33
    1192:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1196:	60 e2       	ldi	r22, 0x20	; 32
    1198:	81 ea       	ldi	r24, 0xA1	; 161
    119a:	91 e2       	ldi	r25, 0x21	; 33
    119c:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    11a0:	8a e4       	ldi	r24, 0x4A	; 74
    11a2:	94 e2       	ldi	r25, 0x24	; 36
    11a4:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <_ZN11CLaserBoard13LaserPowerOffEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    11a8:	f7 01       	movw	r30, r14
    11aa:	47 a9       	ldd	r20, Z+55	; 0x37
    11ac:	50 ad       	ldd	r21, Z+56	; 0x38
    11ae:	61 ad       	ldd	r22, Z+57	; 0x39
    11b0:	72 ad       	ldd	r23, Z+58	; 0x3a
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    11ba:	19 82       	std	Y+1, r1	; 0x01
    11bc:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    11be:	42 e0       	ldi	r20, 0x02	; 2
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	be 01       	movw	r22, r28
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	84 e8       	ldi	r24, 0x84	; 132
    11ca:	94 e2       	ldi	r25, 0x24	; 36
    11cc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN4CSPI4SendEPhj>
			}
		break;
    11d0:	8b c0       	rjmp	.+278    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    11d2:	42 e0       	ldi	r20, 0x02	; 2
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	61 e1       	ldi	r22, 0x11	; 17
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	c7 01       	movw	r24, r14
    11dc:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11GetVariableEjj>
    11e0:	ff ef       	ldi	r31, 0xFF	; 255
    11e2:	21 ee       	ldi	r18, 0xE1	; 225
    11e4:	84 e0       	ldi	r24, 0x04	; 4
    11e6:	f1 50       	subi	r31, 0x01	; 1
    11e8:	20 40       	sbci	r18, 0x00	; 0
    11ea:	80 40       	sbci	r24, 0x00	; 0
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <_ZN16CLaserControlApp3RunEv+0x35e>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <_ZN16CLaserControlApp3RunEv+0x368>
    11f0:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    11f2:	42 e0       	ldi	r20, 0x02	; 2
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	62 e1       	ldi	r22, 0x12	; 18
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	c7 01       	movw	r24, r14
    11fc:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11GetVariableEjj>
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	e1 ee       	ldi	r30, 0xE1	; 225
    1204:	f4 e0       	ldi	r31, 0x04	; 4
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	e0 40       	sbci	r30, 0x00	; 0
    120a:	f0 40       	sbci	r31, 0x00	; 0
    120c:	e1 f7       	brne	.-8      	; 0x1206 <_ZN16CLaserControlApp3RunEv+0x37e>
    120e:	00 c0       	rjmp	.+0      	; 0x1210 <_ZN16CLaserControlApp3RunEv+0x388>
    1210:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1212:	f7 01       	movw	r30, r14
    1214:	e5 5a       	subi	r30, 0xA5	; 165
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	20 81       	ld	r18, Z
    121a:	31 81       	ldd	r19, Z+1	; 0x01
    121c:	c9 01       	movw	r24, r18
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	90 51       	subi	r25, 0x10	; 16
    1224:	af 4f       	sbci	r26, 0xFF	; 255
    1226:	bf 4f       	sbci	r27, 0xFF	; 255
    1228:	22 27       	eor	r18, r18
    122a:	38 2f       	mov	r19, r24
    122c:	49 2f       	mov	r20, r25
    122e:	5a 2f       	mov	r21, r26
    1230:	00 e0       	ldi	r16, 0x00	; 0
    1232:	1c e0       	ldi	r17, 0x0C	; 12
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	71 e0       	ldi	r23, 0x01	; 1
    1238:	81 e7       	ldi	r24, 0x71	; 113
    123a:	94 e2       	ldi	r25, 0x24	; 36
    123c:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1240:	53 c0       	rjmp	.+166    	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	87 ea       	ldi	r24, 0xA7	; 167
    1246:	91 e6       	ldi	r25, 0x61	; 97
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	80 40       	sbci	r24, 0x00	; 0
    124c:	90 40       	sbci	r25, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <_ZN16CLaserControlApp3RunEv+0x3c0>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <_ZN16CLaserControlApp3RunEv+0x3ca>
    1252:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1254:	42 e0       	ldi	r20, 0x02	; 2
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	62 e1       	ldi	r22, 0x12	; 18
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	c7 01       	movw	r24, r14
    125e:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1262:	f7 01       	movw	r30, r14
    1264:	e3 5a       	subi	r30, 0xA3	; 163
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	20 81       	ld	r18, Z
    126a:	31 81       	ldd	r19, Z+1	; 0x01
    126c:	32 97       	sbiw	r30, 0x02	; 2
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	28 0f       	add	r18, r24
    1274:	39 1f       	adc	r19, r25
    1276:	c9 01       	movw	r24, r18
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	90 51       	subi	r25, 0x10	; 16
    127e:	af 4f       	sbci	r26, 0xFF	; 255
    1280:	bf 4f       	sbci	r27, 0xFF	; 255
    1282:	22 27       	eor	r18, r18
    1284:	38 2f       	mov	r19, r24
    1286:	49 2f       	mov	r20, r25
    1288:	5a 2f       	mov	r21, r26
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	11 e0       	ldi	r17, 0x01	; 1
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	7d e0       	ldi	r23, 0x0D	; 13
    1292:	81 e7       	ldi	r24, 0x71	; 113
    1294:	94 e2       	ldi	r25, 0x24	; 36
    1296:	0e 94 43 03 	call	0x686	; 0x686 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    129a:	26 c0       	rjmp	.+76     	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    129c:	f7 01       	movw	r30, r14
    129e:	e3 5a       	subi	r30, 0xA3	; 163
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	20 81       	ld	r18, Z
    12a4:	31 81       	ldd	r19, Z+1	; 0x01
    12a6:	32 97       	sbiw	r30, 0x02	; 2
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	28 0f       	add	r18, r24
    12ae:	39 1f       	adc	r19, r25
    12b0:	c9 01       	movw	r24, r18
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	90 51       	subi	r25, 0x10	; 16
    12b8:	af 4f       	sbci	r26, 0xFF	; 255
    12ba:	bf 4f       	sbci	r27, 0xFF	; 255
    12bc:	22 27       	eor	r18, r18
    12be:	38 2f       	mov	r19, r24
    12c0:	49 2f       	mov	r20, r25
    12c2:	5a 2f       	mov	r21, r26
    12c4:	00 e0       	ldi	r16, 0x00	; 0
    12c6:	11 e0       	ldi	r17, 0x01	; 1
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	7d e0       	ldi	r23, 0x0D	; 13
    12cc:	81 e7       	ldi	r24, 0x71	; 113
    12ce:	94 e2       	ldi	r25, 0x24	; 36
    12d0:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    12d4:	09 c0       	rjmp	.+18     	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    12d6:	81 e7       	ldi	r24, 0x71	; 113
    12d8:	94 e2       	ldi	r25, 0x24	; 36
    12da:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x460>
		default:
			Database.UnMap();
    12e0:	81 e7       	ldi	r24, 0x71	; 113
    12e2:	94 e2       	ldi	r25, 0x24	; 36
    12e4:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN13CDGUSDatabase5UnMapEv>
		break;
	}
	
	if (update)
    12e8:	f7 01       	movw	r30, r14
    12ea:	87 85       	ldd	r24, Z+15	; 0x0f
    12ec:	88 23       	and	r24, r24
    12ee:	01 f1       	breq	.+64     	; 0x1330 <_ZN16CLaserControlApp3RunEv+0x4a8>
	{		
		SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    12f0:	85 85       	ldd	r24, Z+13	; 0x0d
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	ac 01       	movw	r20, r24
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	48 0f       	add	r20, r24
    12fc:	59 1f       	adc	r21, r25
    12fe:	44 0f       	add	r20, r20
    1300:	55 1f       	adc	r21, r21
    1302:	4f 5e       	subi	r20, 0xEF	; 239
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	4e 0d       	add	r20, r14
    1308:	5f 1d       	adc	r21, r15
    130a:	26 e0       	ldi	r18, 0x06	; 6
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	62 e0       	ldi	r22, 0x02	; 2
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	c7 01       	movw	r24, r14
    1314:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, (uint16_t*)&laserDiodeData.lasersettings,  sizeof(DGUS_LASERSETTINGS));
    1318:	a7 01       	movw	r20, r14
    131a:	4d 5b       	subi	r20, 0xBD	; 189
    131c:	5f 4f       	sbci	r21, 0xFF	; 255
    131e:	26 e0       	ldi	r18, 0x06	; 6
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	65 e0       	ldi	r22, 0x05	; 5
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	c7 01       	movw	r24, r14
    1328:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    132c:	f7 01       	movw	r30, r14
    132e:	17 86       	std	Z+15, r1	; 0x0f
	}
}
    1330:	24 96       	adiw	r28, 0x04	; 4
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	08 95       	ret

00001344 <_ZN16CLaserControlApp12OnLaserTimerEv>:
		m_wMillSec-=10;
	}
}

void CLaserControlApp::OnLaserTimer()
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
	laserCounter++;
    134a:	8f a9       	ldd	r24, Y+55	; 0x37
    134c:	98 ad       	ldd	r25, Y+56	; 0x38
    134e:	a9 ad       	ldd	r26, Y+57	; 0x39
    1350:	ba ad       	ldd	r27, Y+58	; 0x3a
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	a1 1d       	adc	r26, r1
    1356:	b1 1d       	adc	r27, r1
    1358:	8f ab       	std	Y+55, r24	; 0x37
    135a:	98 af       	std	Y+56, r25	; 0x38
    135c:	a9 af       	std	Y+57, r26	; 0x39
    135e:	ba af       	std	Y+58, r27	; 0x3a
	
	if (Profile == PROFILE_SINGLE)
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	71 f4       	brne	.+28     	; 0x1382 <_ZN16CLaserControlApp12OnLaserTimerEv+0x3e>
	{
		laserTimer.Stop();
    1366:	81 ea       	ldi	r24, 0xA1	; 161
    1368:	91 e2       	ldi	r25, 0x21	; 33
    136a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    136e:	60 e1       	ldi	r22, 0x10	; 16
    1370:	81 ea       	ldi	r24, 0xA1	; 161
    1372:	91 e2       	ldi	r25, 0x21	; 33
    1374:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1378:	60 e2       	ldi	r22, 0x20	; 32
    137a:	81 ea       	ldi	r24, 0xA1	; 161
    137c:	91 e2       	ldi	r25, 0x21	; 33
    137e:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	}
	
	if (laserTimerDutyCyclems > 100)
    1382:	4b a9       	ldd	r20, Y+51	; 0x33
    1384:	5c a9       	ldd	r21, Y+52	; 0x34
    1386:	45 36       	cpi	r20, 0x65	; 101
    1388:	51 05       	cpc	r21, r1
    138a:	50 f0       	brcs	.+20     	; 0x13a0 <_ZN16CLaserControlApp12OnLaserTimerEv+0x5c>
		player.SoundStart(1000, 50, 2);
    138c:	22 e0       	ldi	r18, 0x02	; 2
    138e:	42 e3       	ldi	r20, 0x32	; 50
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	68 ee       	ldi	r22, 0xE8	; 232
    1394:	73 e0       	ldi	r23, 0x03	; 3
    1396:	89 e4       	ldi	r24, 0x49	; 73
    1398:	94 e2       	ldi	r25, 0x24	; 36
    139a:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <_ZN12CSoundPlayer10SoundStartEjjh>
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <_ZN16CLaserControlApp12OnLaserTimerEv+0x6e>
	else
		player.SoundStart(1000, laserTimerDutyCyclems/2, 2);
    13a0:	56 95       	lsr	r21
    13a2:	47 95       	ror	r20
    13a4:	22 e0       	ldi	r18, 0x02	; 2
    13a6:	68 ee       	ldi	r22, 0xE8	; 232
    13a8:	73 e0       	ldi	r23, 0x03	; 3
    13aa:	89 e4       	ldi	r24, 0x49	; 73
    13ac:	94 e2       	ldi	r25, 0x24	; 36
    13ae:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
    13b2:	89 e4       	ldi	r24, 0x49	; 73
    13b4:	94 e2       	ldi	r25, 0x24	; 36
    13b6:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_ZN12CSoundPlayer9SoundStopEv>
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
    13c0:	0e 94 a2 09 	call	0x1344	; 0x1344 <_ZN16CLaserControlApp12OnLaserTimerEv>
    13c4:	08 95       	ret

000013c6 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	ec 01       	movw	r28, r24
	if (prepare)
    13cc:	88 89       	ldd	r24, Y+16	; 0x10
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <_ZN16CLaserControlApp7OnTimerEv+0xe>
    13d2:	89 c0       	rjmp	.+274    	; 0x14e6 <_ZN16CLaserControlApp7OnTimerEv+0x120>
	{
		if (m_wMillSec == 0)
    13d4:	fe 01       	movw	r30, r28
    13d6:	eb 59       	subi	r30, 0x9B	; 155
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	89 2b       	or	r24, r25
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
    13e2:	79 c0       	rjmp	.+242    	; 0x14d6 <_ZN16CLaserControlApp7OnTimerEv+0x110>
		{
			m_wFlow = (TCC1.CNT * 10) / 8;
    13e4:	80 91 60 08 	lds	r24, 0x0860
    13e8:	90 91 61 08 	lds	r25, 0x0861
    13ec:	9c 01       	movw	r18, r24
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	82 0f       	add	r24, r18
    1400:	93 1f       	adc	r25, r19
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	96 95       	lsr	r25
    140c:	87 95       	ror	r24
    140e:	36 96       	adiw	r30, 0x06	; 6
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1414:	8e e7       	ldi	r24, 0x7E	; 126
    1416:	94 e2       	ldi	r25, 0x24	; 36
    1418:	0e 94 38 28 	call	0x5070	; 0x5070 <_ZN8CTimerC15ResetEv>
			
			if (m_wSeconds == 0)
    141c:	fe 01       	movw	r30, r28
    141e:	ed 59       	subi	r30, 0x9D	; 157
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	89 2b       	or	r24, r25
    1428:	09 f0       	breq	.+2      	; 0x142c <_ZN16CLaserControlApp7OnTimerEv+0x66>
    142a:	48 c0       	rjmp	.+144    	; 0x14bc <_ZN16CLaserControlApp7OnTimerEv+0xf6>
			{
				if (m_wMinutes == 0)
    142c:	32 97       	sbiw	r30, 0x02	; 2
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	89 2b       	or	r24, r25
    1434:	b1 f5       	brne	.+108    	; 0x14a2 <_ZN16CLaserControlApp7OnTimerEv+0xdc>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1436:	18 8a       	std	Y+16, r1	; 0x10
				if (m_wMinutes == 0)
				{
					OnTimeout();
					/*player.SoundStart(1000, 1000, 2);
					player.SoundStop();*/
					player.SoundStart(261, 100, 4);
    1438:	24 e0       	ldi	r18, 0x04	; 4
    143a:	44 e6       	ldi	r20, 0x64	; 100
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	65 e0       	ldi	r22, 0x05	; 5
    1440:	71 e0       	ldi	r23, 0x01	; 1
    1442:	89 e4       	ldi	r24, 0x49	; 73
    1444:	94 e2       	ldi	r25, 0x24	; 36
    1446:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    144a:	89 e4       	ldi	r24, 0x49	; 73
    144c:	94 e2       	ldi	r25, 0x24	; 36
    144e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_ZN12CSoundPlayer9SoundStopEv>
					player.SoundStart(294, 100, 4);
    1452:	24 e0       	ldi	r18, 0x04	; 4
    1454:	44 e6       	ldi	r20, 0x64	; 100
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	66 e2       	ldi	r22, 0x26	; 38
    145a:	71 e0       	ldi	r23, 0x01	; 1
    145c:	89 e4       	ldi	r24, 0x49	; 73
    145e:	94 e2       	ldi	r25, 0x24	; 36
    1460:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1464:	89 e4       	ldi	r24, 0x49	; 73
    1466:	94 e2       	ldi	r25, 0x24	; 36
    1468:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_ZN12CSoundPlayer9SoundStopEv>
					player.SoundStart(329, 100, 4);
    146c:	24 e0       	ldi	r18, 0x04	; 4
    146e:	44 e6       	ldi	r20, 0x64	; 100
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	69 e4       	ldi	r22, 0x49	; 73
    1474:	71 e0       	ldi	r23, 0x01	; 1
    1476:	89 e4       	ldi	r24, 0x49	; 73
    1478:	94 e2       	ldi	r25, 0x24	; 36
    147a:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    147e:	89 e4       	ldi	r24, 0x49	; 73
    1480:	94 e2       	ldi	r25, 0x24	; 36
    1482:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_ZN12CSoundPlayer9SoundStopEv>
					player.SoundStart(349, 100, 4);
    1486:	24 e0       	ldi	r18, 0x04	; 4
    1488:	44 e6       	ldi	r20, 0x64	; 100
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	6d e5       	ldi	r22, 0x5D	; 93
    148e:	71 e0       	ldi	r23, 0x01	; 1
    1490:	89 e4       	ldi	r24, 0x49	; 73
    1492:	94 e2       	ldi	r25, 0x24	; 36
    1494:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1498:	89 e4       	ldi	r24, 0x49	; 73
    149a:	94 e2       	ldi	r25, 0x24	; 36
    149c:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_ZN12CSoundPlayer9SoundStopEv>
					
					//player.beep(1000, 1000);
					return;
    14a0:	50 c0       	rjmp	.+160    	; 0x1542 <_ZN16CLaserControlApp7OnTimerEv+0x17c>
				}
				m_wSeconds = 60;
    14a2:	8c e3       	ldi	r24, 0x3C	; 60
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	fe 01       	movw	r30, r28
    14a8:	ed 59       	subi	r30, 0x9D	; 157
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    14b0:	32 97       	sbiw	r30, 0x02	; 2
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	80 83       	st	Z, r24
    14ba:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    14bc:	84 e6       	ldi	r24, 0x64	; 100
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	fe 01       	movw	r30, r28
    14c2:	eb 59       	subi	r30, 0x9B	; 155
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	80 83       	st	Z, r24
    14c8:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    14ca:	32 97       	sbiw	r30, 0x02	; 2
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	80 83       	st	Z, r24
    14d4:	91 83       	std	Z+1, r25	; 0x01
				player.SoundStart(1000, 25, 2);
				player.SoundStop();
				//player.beep(1000, 25);
			}*/
		}
		m_wMillSec-=10;
    14d6:	cb 59       	subi	r28, 0x9B	; 155
    14d8:	df 4f       	sbci	r29, 0xFF	; 255
    14da:	88 81       	ld	r24, Y
    14dc:	99 81       	ldd	r25, Y+1	; 0x01
    14de:	0a 97       	sbiw	r24, 0x0a	; 10
    14e0:	88 83       	st	Y, r24
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	2e c0       	rjmp	.+92     	; 0x1542 <_ZN16CLaserControlApp7OnTimerEv+0x17c>
	}
	else
	{
		if (m_wMillSec == 0)
    14e6:	fe 01       	movw	r30, r28
    14e8:	eb 59       	subi	r30, 0x9B	; 155
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	89 2b       	or	r24, r25
    14f2:	01 f5       	brne	.+64     	; 0x1534 <_ZN16CLaserControlApp7OnTimerEv+0x16e>
		{
			m_wMillSec = 100;
    14f4:	84 e6       	ldi	r24, 0x64	; 100
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01
			
			m_wFlow = (TCC1.CNT * 10) / 8;
    14fc:	80 91 60 08 	lds	r24, 0x0860
    1500:	90 91 61 08 	lds	r25, 0x0861
    1504:	9c 01       	movw	r18, r24
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	82 0f       	add	r24, r18
    1518:	93 1f       	adc	r25, r19
    151a:	96 95       	lsr	r25
    151c:	87 95       	ror	r24
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	36 96       	adiw	r30, 0x06	; 6
    1528:	80 83       	st	Z, r24
    152a:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    152c:	8e e7       	ldi	r24, 0x7E	; 126
    152e:	94 e2       	ldi	r25, 0x24	; 36
    1530:	0e 94 38 28 	call	0x5070	; 0x5070 <_ZN8CTimerC15ResetEv>
		}
		m_wMillSec-=10;
    1534:	cb 59       	subi	r28, 0x9B	; 155
    1536:	df 4f       	sbci	r29, 0xFF	; 255
    1538:	88 81       	ld	r24, Y
    153a:	99 81       	ldd	r25, Y+1	; 0x01
    153c:	0a 97       	sbiw	r24, 0x0a	; 10
    153e:	88 83       	st	Y, r24
    1540:	99 83       	std	Y+1, r25	; 0x01
	}
}
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1548:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN16CLaserControlApp7OnTimerEv>
    154c:	08 95       	ret

0000154e <_ZN16CLaserControlApp6OnINT0Ev>:
{
	laserBoard.PWMOff();
}

void CLaserControlApp::OnINT0()
{
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
	switch (state)
    1552:	fc 01       	movw	r30, r24
    1554:	24 85       	ldd	r18, Z+12	; 0x0c
    1556:	25 50       	subi	r18, 0x05	; 5
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	78 f5       	brcc	.+94     	; 0x15ba <_ZN16CLaserControlApp6OnINT0Ev+0x6c>
    155c:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    155e:	80 91 48 06 	lds	r24, 0x0648
    1562:	80 fd       	sbrc	r24, 0
    1564:	1c c0       	rjmp	.+56     	; 0x159e <_ZN16CLaserControlApp6OnINT0Ev+0x50>
			{
				if (laserTimerDutyCycle != 0)
    1566:	81 a9       	ldd	r24, Z+49	; 0x31
    1568:	92 a9       	ldd	r25, Z+50	; 0x32
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	29 f0       	breq	.+10     	; 0x1578 <_ZN16CLaserControlApp6OnINT0Ev+0x2a>
					TCF0.CNT = laserTimerDutyCycle - 1;
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	80 93 20 0b 	sts	0x0B20, r24
    1574:	90 93 21 0b 	sts	0x0B21, r25
					
				laserTimer.SetCOMPA(laserTimerDutyCycle);
    1578:	69 a9       	ldd	r22, Y+49	; 0x31
    157a:	7a a9       	ldd	r23, Y+50	; 0x32
    157c:	81 ea       	ldi	r24, 0xA1	; 161
    157e:	91 e2       	ldi	r25, 0x21	; 33
    1580:	0e 94 94 2a 	call	0x5528	; 0x5528 <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
    1584:	69 a9       	ldd	r22, Y+49	; 0x31
    1586:	7a a9       	ldd	r23, Y+50	; 0x32
    1588:	81 ea       	ldi	r24, 0xA1	; 161
    158a:	91 e2       	ldi	r25, 0x21	; 33
    158c:	0e 94 99 2a 	call	0x5532	; 0x5532 <_ZN7CTimerF8SetCOMPBEj>
				laserTimer.Start(laserTimerPeriod);
    1590:	6f a5       	ldd	r22, Y+47	; 0x2f
    1592:	78 a9       	ldd	r23, Y+48	; 0x30
    1594:	81 ea       	ldi	r24, 0xA1	; 161
    1596:	91 e2       	ldi	r25, 0x21	; 33
    1598:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <_ZN7CTimerF5StartEj>
    159c:	0e c0       	rjmp	.+28     	; 0x15ba <_ZN16CLaserControlApp6OnINT0Ev+0x6c>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				laserTimer.Stop();
    159e:	81 ea       	ldi	r24, 0xA1	; 161
    15a0:	91 e2       	ldi	r25, 0x21	; 33
    15a2:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    15a6:	60 e1       	ldi	r22, 0x10	; 16
    15a8:	81 ea       	ldi	r24, 0xA1	; 161
    15aa:	91 e2       	ldi	r25, 0x21	; 33
    15ac:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    15b0:	60 e2       	ldi	r22, 0x20	; 32
    15b2:	81 ea       	ldi	r24, 0xA1	; 161
    15b4:	91 e2       	ldi	r25, 0x21	; 33
    15b6:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		}
		break;
		default:
		break;
	}
}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    15c0:	0e 94 a7 0a 	call	0x154e	; 0x154e <_ZN16CLaserControlApp6OnINT0Ev>
    15c4:	08 95       	ret

000015c6 <_Z11ConvertDataPvS_jj>:
{
	if (x > y)
		return x;
	else
		return y;
}
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	7c 01       	movw	r14, r24
    15d8:	8a 01       	movw	r16, r20
    15da:	41 15       	cp	r20, r1
    15dc:	51 05       	cpc	r21, r1
    15de:	b1 f0       	breq	.+44     	; 0x160c <_Z11ConvertDataPvS_jj+0x46>
    15e0:	6b 01       	movw	r12, r22
    15e2:	c4 0e       	add	r12, r20
    15e4:	d5 1e       	adc	r13, r21
    15e6:	eb 01       	movw	r28, r22
    15e8:	26 1b       	sub	r18, r22
    15ea:	37 0b       	sbc	r19, r23
    15ec:	c9 01       	movw	r24, r18
    15ee:	8c 0f       	add	r24, r28
    15f0:	9d 1f       	adc	r25, r29
    15f2:	b8 01       	movw	r22, r16
    15f4:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__udivmodhi4>
    15f8:	fc 01       	movw	r30, r24
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	e4 27       	eor	r30, r20
    15fe:	ee 0d       	add	r30, r14
    1600:	ff 1d       	adc	r31, r15
    1602:	89 91       	ld	r24, Y+
    1604:	80 83       	st	Z, r24
    1606:	cc 15       	cp	r28, r12
    1608:	dd 05       	cpc	r29, r13
    160a:	81 f7       	brne	.-32     	; 0x15ec <_Z11ConvertDataPvS_jj+0x26>
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	08 95       	ret

0000161e <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    161e:	98 27       	eor	r25, r24
    1620:	89 27       	eor	r24, r25
    1622:	98 27       	eor	r25, r24
    1624:	08 95       	ret

00001626 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    1626:	9b 01       	movw	r18, r22
    1628:	bc 01       	movw	r22, r24
    162a:	c9 01       	movw	r24, r18
}
    162c:	08 95       	ret

0000162e <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    162e:	08 95       	ret

00001630 <_ZN4CSPID1Ev>:
    1630:	08 95       	ret

00001632 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    1632:	ef 92       	push	r14
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	ec 01       	movw	r28, r24
    163e:	e0 e8       	ldi	r30, 0x80	; 128
    1640:	f6 e0       	ldi	r31, 0x06	; 6
    1642:	90 eb       	ldi	r25, 0xB0	; 176
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 ec       	ldi	r24, 0xC0	; 192
    1648:	84 8b       	std	Z+20, r24	; 0x14
    164a:	85 8b       	std	Z+21, r24	; 0x15
    164c:	87 8b       	std	Z+23, r24	; 0x17
    164e:	95 83       	std	Z+5, r25	; 0x05
    1650:	61 11       	cpse	r22, r1
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    1654:	80 e4       	ldi	r24, 0x40	; 64
    1656:	01 c0       	rjmp	.+2      	; 0x165a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    1658:	80 e5       	ldi	r24, 0x50	; 80
    165a:	01 11       	cpse	r16, r1
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    1662:	30 e8       	ldi	r19, 0x80	; 128
    1664:	41 11       	cpse	r20, r1
    1666:	02 c0       	rjmp	.+4      	; 0x166c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	01 c0       	rjmp	.+2      	; 0x166e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    166c:	90 e2       	ldi	r25, 0x20	; 32
    166e:	22 0f       	add	r18, r18
    1670:	22 0f       	add	r18, r18
    1672:	e2 2a       	or	r14, r18
    1674:	e8 2a       	or	r14, r24
    1676:	e3 2a       	or	r14, r19
    1678:	e9 2a       	or	r14, r25
    167a:	00 ec       	ldi	r16, 0xC0	; 192
    167c:	1a e0       	ldi	r17, 0x0A	; 10
    167e:	f8 01       	movw	r30, r16
    1680:	e0 82       	st	Z, r14
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <malloc>
    168a:	88 83       	st	Y, r24
    168c:	99 83       	std	Y+1, r25	; 0x01
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	f8 01       	movw	r30, r16
    1692:	81 83       	std	Z+1, r24	; 0x01
    1694:	8d e9       	ldi	r24, 0x9D	; 157
    1696:	9b e0       	ldi	r25, 0x0B	; 11
    1698:	80 93 19 22 	sts	0x2219, r24
    169c:	90 93 1a 22 	sts	0x221A, r25
    16a0:	c0 93 0f 23 	sts	0x230F, r28
    16a4:	d0 93 10 23 	sts	0x2310, r29
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ef 90       	pop	r14
    16b2:	08 95       	ret

000016b4 <_ZN4CSPI12DeinitializeEv>:
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	0e 94 75 2d 	call	0x5aea	; 0x5aea <free>
    16be:	e0 ec       	ldi	r30, 0xC0	; 192
    16c0:	fa e0       	ldi	r31, 0x0A	; 10
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 7b       	andi	r24, 0xBF	; 191
    16c6:	80 83       	st	Z, r24
    16c8:	08 95       	ret

000016ca <_ZN4CSPI4SendEPhj>:
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	ec 01       	movw	r28, r24
    16d0:	4a 83       	std	Y+2, r20	; 0x02
    16d2:	5b 83       	std	Y+3, r21	; 0x03
    16d4:	4c 83       	std	Y+4, r20	; 0x04
    16d6:	5d 83       	std	Y+5, r21	; 0x05
    16d8:	88 81       	ld	r24, Y
    16da:	99 81       	ldd	r25, Y+1	; 0x01
    16dc:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <memcpy>
    16e0:	80 e1       	ldi	r24, 0x10	; 16
    16e2:	80 93 86 06 	sts	0x0686, r24
    16e6:	88 81       	ld	r24, Y
    16e8:	99 81       	ldd	r25, Y+1	; 0x01
    16ea:	4a 81       	ldd	r20, Y+2	; 0x02
    16ec:	5b 81       	ldd	r21, Y+3	; 0x03
    16ee:	9a 01       	movw	r18, r20
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	31 09       	sbc	r19, r1
    16f4:	2a 83       	std	Y+2, r18	; 0x02
    16f6:	3b 83       	std	Y+3, r19	; 0x03
    16f8:	fc 01       	movw	r30, r24
    16fa:	e2 0f       	add	r30, r18
    16fc:	f3 1f       	adc	r31, r19
    16fe:	80 81       	ld	r24, Z
    1700:	80 93 c3 0a 	sts	0x0AC3, r24
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    170a:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	89 2b       	or	r24, r25
    1712:	79 f0       	breq	.+30     	; 0x1732 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    1714:	40 81       	ld	r20, Z
    1716:	51 81       	ldd	r21, Z+1	; 0x01
    1718:	22 81       	ldd	r18, Z+2	; 0x02
    171a:	33 81       	ldd	r19, Z+3	; 0x03
    171c:	c9 01       	movw	r24, r18
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	82 83       	std	Z+2, r24	; 0x02
    1722:	93 83       	std	Z+3, r25	; 0x03
    1724:	fa 01       	movw	r30, r20
    1726:	e8 0f       	add	r30, r24
    1728:	f9 1f       	adc	r31, r25
    172a:	80 81       	ld	r24, Z
    172c:	80 93 c3 0a 	sts	0x0AC3, r24
    1730:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    1732:	80 e1       	ldi	r24, 0x10	; 16
    1734:	80 93 85 06 	sts	0x0685, r24
    1738:	08 95       	ret

0000173a <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    173a:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZN4CSPI10OnTransmitEv>
    173e:	08 95       	ret

00001740 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    1740:	2e e6       	ldi	r18, 0x6E	; 110
    1742:	30 e2       	ldi	r19, 0x20	; 32
    1744:	fc 01       	movw	r30, r24
    1746:	20 83       	st	Z, r18
    1748:	31 83       	std	Z+1, r19	; 0x01
    174a:	08 95       	ret

0000174c <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    174c:	08 95       	ret

0000174e <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    174e:	22 e9       	ldi	r18, 0x92	; 146
    1750:	30 e2       	ldi	r19, 0x20	; 32
    1752:	fc 01       	movw	r30, r24
    1754:	20 83       	st	Z, r18
    1756:	31 83       	std	Z+1, r19	; 0x01
    1758:	08 95       	ret

0000175a <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    175a:	08 95       	ret

0000175c <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    175c:	20 eb       	ldi	r18, 0xB0	; 176
    175e:	30 e2       	ldi	r19, 0x20	; 32
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	08 95       	ret

00001768 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1768:	08 95       	ret

0000176a <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	0b b6       	in	r0, 0x3b	; 59
    1776:	0f 92       	push	r0
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	e0 91 a9 21 	lds	r30, 0x21A9
    1794:	f0 91 aa 21 	lds	r31, 0x21AA
    1798:	30 97       	sbiw	r30, 0x00	; 0
    179a:	29 f0       	breq	.+10     	; 0x17a6 <__vector_1+0x3c>
    179c:	80 91 9f 22 	lds	r24, 0x229F
    17a0:	90 91 a0 22 	lds	r25, 0x22A0
    17a4:	19 95       	eicall
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	0f 90       	pop	r0
    17c0:	0b be       	out	0x3b, r0	; 59
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	0b b6       	in	r0, 0x3b	; 59
    17d8:	0f 92       	push	r0
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
    17f2:	e0 91 ab 21 	lds	r30, 0x21AB
    17f6:	f0 91 ac 21 	lds	r31, 0x21AC
    17fa:	30 97       	sbiw	r30, 0x00	; 0
    17fc:	29 f0       	breq	.+10     	; 0x1808 <__vector_2+0x3c>
    17fe:	80 91 a1 22 	lds	r24, 0x22A1
    1802:	90 91 a2 22 	lds	r25, 0x22A2
    1806:	19 95       	eicall
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0b be       	out	0x3b, r0	; 59
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    182e:	1f 92       	push	r1
    1830:	0f 92       	push	r0
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	0f 92       	push	r0
    1836:	11 24       	eor	r1, r1
    1838:	0b b6       	in	r0, 0x3b	; 59
    183a:	0f 92       	push	r0
    183c:	2f 93       	push	r18
    183e:	3f 93       	push	r19
    1840:	4f 93       	push	r20
    1842:	5f 93       	push	r21
    1844:	6f 93       	push	r22
    1846:	7f 93       	push	r23
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	e0 91 ad 21 	lds	r30, 0x21AD
    1858:	f0 91 ae 21 	lds	r31, 0x21AE
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	29 f0       	breq	.+10     	; 0x186a <__vector_3+0x3c>
    1860:	80 91 a3 22 	lds	r24, 0x22A3
    1864:	90 91 a4 22 	lds	r25, 0x22A4
    1868:	19 95       	eicall
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	bf 91       	pop	r27
    1870:	af 91       	pop	r26
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	7f 91       	pop	r23
    1878:	6f 91       	pop	r22
    187a:	5f 91       	pop	r21
    187c:	4f 91       	pop	r20
    187e:	3f 91       	pop	r19
    1880:	2f 91       	pop	r18
    1882:	0f 90       	pop	r0
    1884:	0b be       	out	0x3b, r0	; 59
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	0b b6       	in	r0, 0x3b	; 59
    189c:	0f 92       	push	r0
    189e:	2f 93       	push	r18
    18a0:	3f 93       	push	r19
    18a2:	4f 93       	push	r20
    18a4:	5f 93       	push	r21
    18a6:	6f 93       	push	r22
    18a8:	7f 93       	push	r23
    18aa:	8f 93       	push	r24
    18ac:	9f 93       	push	r25
    18ae:	af 93       	push	r26
    18b0:	bf 93       	push	r27
    18b2:	ef 93       	push	r30
    18b4:	ff 93       	push	r31
    18b6:	e0 91 af 21 	lds	r30, 0x21AF
    18ba:	f0 91 b0 21 	lds	r31, 0x21B0
    18be:	30 97       	sbiw	r30, 0x00	; 0
    18c0:	29 f0       	breq	.+10     	; 0x18cc <__vector_4+0x3c>
    18c2:	80 91 a5 22 	lds	r24, 0x22A5
    18c6:	90 91 a6 22 	lds	r25, 0x22A6
    18ca:	19 95       	eicall
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	7f 91       	pop	r23
    18da:	6f 91       	pop	r22
    18dc:	5f 91       	pop	r21
    18de:	4f 91       	pop	r20
    18e0:	3f 91       	pop	r19
    18e2:	2f 91       	pop	r18
    18e4:	0f 90       	pop	r0
    18e6:	0b be       	out	0x3b, r0	; 59
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    18f2:	1f 92       	push	r1
    18f4:	0f 92       	push	r0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	0f 92       	push	r0
    18fa:	11 24       	eor	r1, r1
    18fc:	0b b6       	in	r0, 0x3b	; 59
    18fe:	0f 92       	push	r0
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
    1918:	e0 91 b1 21 	lds	r30, 0x21B1
    191c:	f0 91 b2 21 	lds	r31, 0x21B2
    1920:	30 97       	sbiw	r30, 0x00	; 0
    1922:	29 f0       	breq	.+10     	; 0x192e <__vector_5+0x3c>
    1924:	80 91 a7 22 	lds	r24, 0x22A7
    1928:	90 91 a8 22 	lds	r25, 0x22A8
    192c:	19 95       	eicall
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0b be       	out	0x3b, r0	; 59
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
    195e:	0b b6       	in	r0, 0x3b	; 59
    1960:	0f 92       	push	r0
    1962:	2f 93       	push	r18
    1964:	3f 93       	push	r19
    1966:	4f 93       	push	r20
    1968:	5f 93       	push	r21
    196a:	6f 93       	push	r22
    196c:	7f 93       	push	r23
    196e:	8f 93       	push	r24
    1970:	9f 93       	push	r25
    1972:	af 93       	push	r26
    1974:	bf 93       	push	r27
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
    197a:	e0 91 b3 21 	lds	r30, 0x21B3
    197e:	f0 91 b4 21 	lds	r31, 0x21B4
    1982:	30 97       	sbiw	r30, 0x00	; 0
    1984:	29 f0       	breq	.+10     	; 0x1990 <__vector_6+0x3c>
    1986:	80 91 a9 22 	lds	r24, 0x22A9
    198a:	90 91 aa 22 	lds	r25, 0x22AA
    198e:	19 95       	eicall
    1990:	ff 91       	pop	r31
    1992:	ef 91       	pop	r30
    1994:	bf 91       	pop	r27
    1996:	af 91       	pop	r26
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	7f 91       	pop	r23
    199e:	6f 91       	pop	r22
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0b be       	out	0x3b, r0	; 59
    19ac:	0f 90       	pop	r0
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	0f 90       	pop	r0
    19b2:	1f 90       	pop	r1
    19b4:	18 95       	reti

000019b6 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    19b6:	1f 92       	push	r1
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	0f 92       	push	r0
    19be:	11 24       	eor	r1, r1
    19c0:	0b b6       	in	r0, 0x3b	; 59
    19c2:	0f 92       	push	r0
    19c4:	2f 93       	push	r18
    19c6:	3f 93       	push	r19
    19c8:	4f 93       	push	r20
    19ca:	5f 93       	push	r21
    19cc:	6f 93       	push	r22
    19ce:	7f 93       	push	r23
    19d0:	8f 93       	push	r24
    19d2:	9f 93       	push	r25
    19d4:	af 93       	push	r26
    19d6:	bf 93       	push	r27
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
    19dc:	e0 91 b5 21 	lds	r30, 0x21B5
    19e0:	f0 91 b6 21 	lds	r31, 0x21B6
    19e4:	30 97       	sbiw	r30, 0x00	; 0
    19e6:	29 f0       	breq	.+10     	; 0x19f2 <__vector_7+0x3c>
    19e8:	80 91 ab 22 	lds	r24, 0x22AB
    19ec:	90 91 ac 22 	lds	r25, 0x22AC
    19f0:	19 95       	eicall
    19f2:	ff 91       	pop	r31
    19f4:	ef 91       	pop	r30
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0b be       	out	0x3b, r0	; 59
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	0b b6       	in	r0, 0x3b	; 59
    1a24:	0f 92       	push	r0
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
    1a3e:	e0 91 b7 21 	lds	r30, 0x21B7
    1a42:	f0 91 b8 21 	lds	r31, 0x21B8
    1a46:	30 97       	sbiw	r30, 0x00	; 0
    1a48:	29 f0       	breq	.+10     	; 0x1a54 <__vector_8+0x3c>
    1a4a:	80 91 ad 22 	lds	r24, 0x22AD
    1a4e:	90 91 ae 22 	lds	r25, 0x22AE
    1a52:	19 95       	eicall
    1a54:	ff 91       	pop	r31
    1a56:	ef 91       	pop	r30
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	0f 90       	pop	r0
    1a6e:	0b be       	out	0x3b, r0	; 59
    1a70:	0f 90       	pop	r0
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	0f 90       	pop	r0
    1a76:	1f 90       	pop	r1
    1a78:	18 95       	reti

00001a7a <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1a7a:	1f 92       	push	r1
    1a7c:	0f 92       	push	r0
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	0f 92       	push	r0
    1a82:	11 24       	eor	r1, r1
    1a84:	0b b6       	in	r0, 0x3b	; 59
    1a86:	0f 92       	push	r0
    1a88:	2f 93       	push	r18
    1a8a:	3f 93       	push	r19
    1a8c:	4f 93       	push	r20
    1a8e:	5f 93       	push	r21
    1a90:	6f 93       	push	r22
    1a92:	7f 93       	push	r23
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
    1a9c:	ef 93       	push	r30
    1a9e:	ff 93       	push	r31
    1aa0:	e0 91 b9 21 	lds	r30, 0x21B9
    1aa4:	f0 91 ba 21 	lds	r31, 0x21BA
    1aa8:	30 97       	sbiw	r30, 0x00	; 0
    1aaa:	29 f0       	breq	.+10     	; 0x1ab6 <__vector_9+0x3c>
    1aac:	80 91 af 22 	lds	r24, 0x22AF
    1ab0:	90 91 b0 22 	lds	r25, 0x22B0
    1ab4:	19 95       	eicall
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0b be       	out	0x3b, r0	; 59
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	0f 90       	pop	r0
    1ad8:	1f 90       	pop	r1
    1ada:	18 95       	reti

00001adc <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	0b b6       	in	r0, 0x3b	; 59
    1ae8:	0f 92       	push	r0
    1aea:	2f 93       	push	r18
    1aec:	3f 93       	push	r19
    1aee:	4f 93       	push	r20
    1af0:	5f 93       	push	r21
    1af2:	6f 93       	push	r22
    1af4:	7f 93       	push	r23
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
    1afa:	af 93       	push	r26
    1afc:	bf 93       	push	r27
    1afe:	ef 93       	push	r30
    1b00:	ff 93       	push	r31
    1b02:	e0 91 bb 21 	lds	r30, 0x21BB
    1b06:	f0 91 bc 21 	lds	r31, 0x21BC
    1b0a:	30 97       	sbiw	r30, 0x00	; 0
    1b0c:	29 f0       	breq	.+10     	; 0x1b18 <__vector_10+0x3c>
    1b0e:	80 91 b1 22 	lds	r24, 0x22B1
    1b12:	90 91 b2 22 	lds	r25, 0x22B2
    1b16:	19 95       	eicall
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	0b be       	out	0x3b, r0	; 59
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	0f 90       	pop	r0
    1b3a:	1f 90       	pop	r1
    1b3c:	18 95       	reti

00001b3e <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1b3e:	1f 92       	push	r1
    1b40:	0f 92       	push	r0
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	0f 92       	push	r0
    1b46:	11 24       	eor	r1, r1
    1b48:	0b b6       	in	r0, 0x3b	; 59
    1b4a:	0f 92       	push	r0
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	ef 93       	push	r30
    1b62:	ff 93       	push	r31
    1b64:	e0 91 bd 21 	lds	r30, 0x21BD
    1b68:	f0 91 be 21 	lds	r31, 0x21BE
    1b6c:	30 97       	sbiw	r30, 0x00	; 0
    1b6e:	29 f0       	breq	.+10     	; 0x1b7a <__vector_11+0x3c>
    1b70:	80 91 b3 22 	lds	r24, 0x22B3
    1b74:	90 91 b4 22 	lds	r25, 0x22B4
    1b78:	19 95       	eicall
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0b be       	out	0x3b, r0	; 59
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1ba0:	1f 92       	push	r1
    1ba2:	0f 92       	push	r0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	0f 92       	push	r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	0b b6       	in	r0, 0x3b	; 59
    1bac:	0f 92       	push	r0
    1bae:	2f 93       	push	r18
    1bb0:	3f 93       	push	r19
    1bb2:	4f 93       	push	r20
    1bb4:	5f 93       	push	r21
    1bb6:	6f 93       	push	r22
    1bb8:	7f 93       	push	r23
    1bba:	8f 93       	push	r24
    1bbc:	9f 93       	push	r25
    1bbe:	af 93       	push	r26
    1bc0:	bf 93       	push	r27
    1bc2:	ef 93       	push	r30
    1bc4:	ff 93       	push	r31
    1bc6:	e0 91 bf 21 	lds	r30, 0x21BF
    1bca:	f0 91 c0 21 	lds	r31, 0x21C0
    1bce:	30 97       	sbiw	r30, 0x00	; 0
    1bd0:	29 f0       	breq	.+10     	; 0x1bdc <__vector_12+0x3c>
    1bd2:	80 91 b5 22 	lds	r24, 0x22B5
    1bd6:	90 91 b6 22 	lds	r25, 0x22B6
    1bda:	19 95       	eicall
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0b be       	out	0x3b, r0	; 59
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	0f 92       	push	r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	0b b6       	in	r0, 0x3b	; 59
    1c0e:	0f 92       	push	r0
    1c10:	2f 93       	push	r18
    1c12:	3f 93       	push	r19
    1c14:	4f 93       	push	r20
    1c16:	5f 93       	push	r21
    1c18:	6f 93       	push	r22
    1c1a:	7f 93       	push	r23
    1c1c:	8f 93       	push	r24
    1c1e:	9f 93       	push	r25
    1c20:	af 93       	push	r26
    1c22:	bf 93       	push	r27
    1c24:	ef 93       	push	r30
    1c26:	ff 93       	push	r31
    1c28:	e0 91 c1 21 	lds	r30, 0x21C1
    1c2c:	f0 91 c2 21 	lds	r31, 0x21C2
    1c30:	30 97       	sbiw	r30, 0x00	; 0
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <__vector_13+0x3c>
    1c34:	80 91 b7 22 	lds	r24, 0x22B7
    1c38:	90 91 b8 22 	lds	r25, 0x22B8
    1c3c:	19 95       	eicall
    1c3e:	ff 91       	pop	r31
    1c40:	ef 91       	pop	r30
    1c42:	bf 91       	pop	r27
    1c44:	af 91       	pop	r26
    1c46:	9f 91       	pop	r25
    1c48:	8f 91       	pop	r24
    1c4a:	7f 91       	pop	r23
    1c4c:	6f 91       	pop	r22
    1c4e:	5f 91       	pop	r21
    1c50:	4f 91       	pop	r20
    1c52:	3f 91       	pop	r19
    1c54:	2f 91       	pop	r18
    1c56:	0f 90       	pop	r0
    1c58:	0b be       	out	0x3b, r0	; 59
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	0b b6       	in	r0, 0x3b	; 59
    1c70:	0f 92       	push	r0
    1c72:	2f 93       	push	r18
    1c74:	3f 93       	push	r19
    1c76:	4f 93       	push	r20
    1c78:	5f 93       	push	r21
    1c7a:	6f 93       	push	r22
    1c7c:	7f 93       	push	r23
    1c7e:	8f 93       	push	r24
    1c80:	9f 93       	push	r25
    1c82:	af 93       	push	r26
    1c84:	bf 93       	push	r27
    1c86:	ef 93       	push	r30
    1c88:	ff 93       	push	r31
    1c8a:	e0 91 c3 21 	lds	r30, 0x21C3
    1c8e:	f0 91 c4 21 	lds	r31, 0x21C4
    1c92:	30 97       	sbiw	r30, 0x00	; 0
    1c94:	29 f0       	breq	.+10     	; 0x1ca0 <__vector_14+0x3c>
    1c96:	80 91 b9 22 	lds	r24, 0x22B9
    1c9a:	90 91 ba 22 	lds	r25, 0x22BA
    1c9e:	19 95       	eicall
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0b be       	out	0x3b, r0	; 59
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1cc6:	1f 92       	push	r1
    1cc8:	0f 92       	push	r0
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	0f 92       	push	r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	0b b6       	in	r0, 0x3b	; 59
    1cd2:	0f 92       	push	r0
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	e0 91 c5 21 	lds	r30, 0x21C5
    1cf0:	f0 91 c6 21 	lds	r31, 0x21C6
    1cf4:	30 97       	sbiw	r30, 0x00	; 0
    1cf6:	29 f0       	breq	.+10     	; 0x1d02 <__vector_15+0x3c>
    1cf8:	80 91 bb 22 	lds	r24, 0x22BB
    1cfc:	90 91 bc 22 	lds	r25, 0x22BC
    1d00:	19 95       	eicall
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0b be       	out	0x3b, r0	; 59
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	0f 90       	pop	r0
    1d24:	1f 90       	pop	r1
    1d26:	18 95       	reti

00001d28 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	0b b6       	in	r0, 0x3b	; 59
    1d34:	0f 92       	push	r0
    1d36:	2f 93       	push	r18
    1d38:	3f 93       	push	r19
    1d3a:	4f 93       	push	r20
    1d3c:	5f 93       	push	r21
    1d3e:	6f 93       	push	r22
    1d40:	7f 93       	push	r23
    1d42:	8f 93       	push	r24
    1d44:	9f 93       	push	r25
    1d46:	af 93       	push	r26
    1d48:	bf 93       	push	r27
    1d4a:	ef 93       	push	r30
    1d4c:	ff 93       	push	r31
    1d4e:	e0 91 c7 21 	lds	r30, 0x21C7
    1d52:	f0 91 c8 21 	lds	r31, 0x21C8
    1d56:	30 97       	sbiw	r30, 0x00	; 0
    1d58:	29 f0       	breq	.+10     	; 0x1d64 <__vector_16+0x3c>
    1d5a:	80 91 bd 22 	lds	r24, 0x22BD
    1d5e:	90 91 be 22 	lds	r25, 0x22BE
    1d62:	19 95       	eicall
    1d64:	ff 91       	pop	r31
    1d66:	ef 91       	pop	r30
    1d68:	bf 91       	pop	r27
    1d6a:	af 91       	pop	r26
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	7f 91       	pop	r23
    1d72:	6f 91       	pop	r22
    1d74:	5f 91       	pop	r21
    1d76:	4f 91       	pop	r20
    1d78:	3f 91       	pop	r19
    1d7a:	2f 91       	pop	r18
    1d7c:	0f 90       	pop	r0
    1d7e:	0b be       	out	0x3b, r0	; 59
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	0b b6       	in	r0, 0x3b	; 59
    1d96:	0f 92       	push	r0
    1d98:	2f 93       	push	r18
    1d9a:	3f 93       	push	r19
    1d9c:	4f 93       	push	r20
    1d9e:	5f 93       	push	r21
    1da0:	6f 93       	push	r22
    1da2:	7f 93       	push	r23
    1da4:	8f 93       	push	r24
    1da6:	9f 93       	push	r25
    1da8:	af 93       	push	r26
    1daa:	bf 93       	push	r27
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
    1db0:	e0 91 c9 21 	lds	r30, 0x21C9
    1db4:	f0 91 ca 21 	lds	r31, 0x21CA
    1db8:	30 97       	sbiw	r30, 0x00	; 0
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <__vector_17+0x3c>
    1dbc:	80 91 bf 22 	lds	r24, 0x22BF
    1dc0:	90 91 c0 22 	lds	r25, 0x22C0
    1dc4:	19 95       	eicall
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	bf 91       	pop	r27
    1dcc:	af 91       	pop	r26
    1dce:	9f 91       	pop	r25
    1dd0:	8f 91       	pop	r24
    1dd2:	7f 91       	pop	r23
    1dd4:	6f 91       	pop	r22
    1dd6:	5f 91       	pop	r21
    1dd8:	4f 91       	pop	r20
    1dda:	3f 91       	pop	r19
    1ddc:	2f 91       	pop	r18
    1dde:	0f 90       	pop	r0
    1de0:	0b be       	out	0x3b, r0	; 59
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1dec:	1f 92       	push	r1
    1dee:	0f 92       	push	r0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	0f 92       	push	r0
    1df4:	11 24       	eor	r1, r1
    1df6:	0b b6       	in	r0, 0x3b	; 59
    1df8:	0f 92       	push	r0
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
    1e12:	e0 91 cb 21 	lds	r30, 0x21CB
    1e16:	f0 91 cc 21 	lds	r31, 0x21CC
    1e1a:	30 97       	sbiw	r30, 0x00	; 0
    1e1c:	29 f0       	breq	.+10     	; 0x1e28 <__vector_18+0x3c>
    1e1e:	80 91 c1 22 	lds	r24, 0x22C1
    1e22:	90 91 c2 22 	lds	r25, 0x22C2
    1e26:	19 95       	eicall
    1e28:	ff 91       	pop	r31
    1e2a:	ef 91       	pop	r30
    1e2c:	bf 91       	pop	r27
    1e2e:	af 91       	pop	r26
    1e30:	9f 91       	pop	r25
    1e32:	8f 91       	pop	r24
    1e34:	7f 91       	pop	r23
    1e36:	6f 91       	pop	r22
    1e38:	5f 91       	pop	r21
    1e3a:	4f 91       	pop	r20
    1e3c:	3f 91       	pop	r19
    1e3e:	2f 91       	pop	r18
    1e40:	0f 90       	pop	r0
    1e42:	0b be       	out	0x3b, r0	; 59
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti

00001e4e <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1e4e:	1f 92       	push	r1
    1e50:	0f 92       	push	r0
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	0f 92       	push	r0
    1e56:	11 24       	eor	r1, r1
    1e58:	0b b6       	in	r0, 0x3b	; 59
    1e5a:	0f 92       	push	r0
    1e5c:	2f 93       	push	r18
    1e5e:	3f 93       	push	r19
    1e60:	4f 93       	push	r20
    1e62:	5f 93       	push	r21
    1e64:	6f 93       	push	r22
    1e66:	7f 93       	push	r23
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
    1e74:	e0 91 cd 21 	lds	r30, 0x21CD
    1e78:	f0 91 ce 21 	lds	r31, 0x21CE
    1e7c:	30 97       	sbiw	r30, 0x00	; 0
    1e7e:	29 f0       	breq	.+10     	; 0x1e8a <__vector_19+0x3c>
    1e80:	80 91 c3 22 	lds	r24, 0x22C3
    1e84:	90 91 c4 22 	lds	r25, 0x22C4
    1e88:	19 95       	eicall
    1e8a:	ff 91       	pop	r31
    1e8c:	ef 91       	pop	r30
    1e8e:	bf 91       	pop	r27
    1e90:	af 91       	pop	r26
    1e92:	9f 91       	pop	r25
    1e94:	8f 91       	pop	r24
    1e96:	7f 91       	pop	r23
    1e98:	6f 91       	pop	r22
    1e9a:	5f 91       	pop	r21
    1e9c:	4f 91       	pop	r20
    1e9e:	3f 91       	pop	r19
    1ea0:	2f 91       	pop	r18
    1ea2:	0f 90       	pop	r0
    1ea4:	0b be       	out	0x3b, r0	; 59
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti

00001eb0 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	0b b6       	in	r0, 0x3b	; 59
    1ebc:	0f 92       	push	r0
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
    1ed6:	e0 91 cf 21 	lds	r30, 0x21CF
    1eda:	f0 91 d0 21 	lds	r31, 0x21D0
    1ede:	30 97       	sbiw	r30, 0x00	; 0
    1ee0:	29 f0       	breq	.+10     	; 0x1eec <__vector_20+0x3c>
    1ee2:	80 91 c5 22 	lds	r24, 0x22C5
    1ee6:	90 91 c6 22 	lds	r25, 0x22C6
    1eea:	19 95       	eicall
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0b be       	out	0x3b, r0	; 59
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	0b b6       	in	r0, 0x3b	; 59
    1f1e:	0f 92       	push	r0
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
    1f38:	e0 91 d1 21 	lds	r30, 0x21D1
    1f3c:	f0 91 d2 21 	lds	r31, 0x21D2
    1f40:	30 97       	sbiw	r30, 0x00	; 0
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <__vector_21+0x3c>
    1f44:	80 91 c7 22 	lds	r24, 0x22C7
    1f48:	90 91 c8 22 	lds	r25, 0x22C8
    1f4c:	19 95       	eicall
    1f4e:	ff 91       	pop	r31
    1f50:	ef 91       	pop	r30
    1f52:	bf 91       	pop	r27
    1f54:	af 91       	pop	r26
    1f56:	9f 91       	pop	r25
    1f58:	8f 91       	pop	r24
    1f5a:	7f 91       	pop	r23
    1f5c:	6f 91       	pop	r22
    1f5e:	5f 91       	pop	r21
    1f60:	4f 91       	pop	r20
    1f62:	3f 91       	pop	r19
    1f64:	2f 91       	pop	r18
    1f66:	0f 90       	pop	r0
    1f68:	0b be       	out	0x3b, r0	; 59
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    1f74:	1f 92       	push	r1
    1f76:	0f 92       	push	r0
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	0f 92       	push	r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	0b b6       	in	r0, 0x3b	; 59
    1f80:	0f 92       	push	r0
    1f82:	2f 93       	push	r18
    1f84:	3f 93       	push	r19
    1f86:	4f 93       	push	r20
    1f88:	5f 93       	push	r21
    1f8a:	6f 93       	push	r22
    1f8c:	7f 93       	push	r23
    1f8e:	8f 93       	push	r24
    1f90:	9f 93       	push	r25
    1f92:	af 93       	push	r26
    1f94:	bf 93       	push	r27
    1f96:	ef 93       	push	r30
    1f98:	ff 93       	push	r31
    1f9a:	e0 91 d3 21 	lds	r30, 0x21D3
    1f9e:	f0 91 d4 21 	lds	r31, 0x21D4
    1fa2:	30 97       	sbiw	r30, 0x00	; 0
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <__vector_22+0x3c>
    1fa6:	80 91 c9 22 	lds	r24, 0x22C9
    1faa:	90 91 ca 22 	lds	r25, 0x22CA
    1fae:	19 95       	eicall
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0b be       	out	0x3b, r0	; 59
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	0b b6       	in	r0, 0x3b	; 59
    1fe2:	0f 92       	push	r0
    1fe4:	2f 93       	push	r18
    1fe6:	3f 93       	push	r19
    1fe8:	4f 93       	push	r20
    1fea:	5f 93       	push	r21
    1fec:	6f 93       	push	r22
    1fee:	7f 93       	push	r23
    1ff0:	8f 93       	push	r24
    1ff2:	9f 93       	push	r25
    1ff4:	af 93       	push	r26
    1ff6:	bf 93       	push	r27
    1ff8:	ef 93       	push	r30
    1ffa:	ff 93       	push	r31
    1ffc:	e0 91 d5 21 	lds	r30, 0x21D5
    2000:	f0 91 d6 21 	lds	r31, 0x21D6
    2004:	30 97       	sbiw	r30, 0x00	; 0
    2006:	29 f0       	breq	.+10     	; 0x2012 <__vector_23+0x3c>
    2008:	80 91 cb 22 	lds	r24, 0x22CB
    200c:	90 91 cc 22 	lds	r25, 0x22CC
    2010:	19 95       	eicall
    2012:	ff 91       	pop	r31
    2014:	ef 91       	pop	r30
    2016:	bf 91       	pop	r27
    2018:	af 91       	pop	r26
    201a:	9f 91       	pop	r25
    201c:	8f 91       	pop	r24
    201e:	7f 91       	pop	r23
    2020:	6f 91       	pop	r22
    2022:	5f 91       	pop	r21
    2024:	4f 91       	pop	r20
    2026:	3f 91       	pop	r19
    2028:	2f 91       	pop	r18
    202a:	0f 90       	pop	r0
    202c:	0b be       	out	0x3b, r0	; 59
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2038:	1f 92       	push	r1
    203a:	0f 92       	push	r0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	0f 92       	push	r0
    2040:	11 24       	eor	r1, r1
    2042:	0b b6       	in	r0, 0x3b	; 59
    2044:	0f 92       	push	r0
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	7f 93       	push	r23
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31
    205e:	e0 91 d7 21 	lds	r30, 0x21D7
    2062:	f0 91 d8 21 	lds	r31, 0x21D8
    2066:	30 97       	sbiw	r30, 0x00	; 0
    2068:	29 f0       	breq	.+10     	; 0x2074 <__vector_24+0x3c>
    206a:	80 91 cd 22 	lds	r24, 0x22CD
    206e:	90 91 ce 22 	lds	r25, 0x22CE
    2072:	19 95       	eicall
    2074:	ff 91       	pop	r31
    2076:	ef 91       	pop	r30
    2078:	bf 91       	pop	r27
    207a:	af 91       	pop	r26
    207c:	9f 91       	pop	r25
    207e:	8f 91       	pop	r24
    2080:	7f 91       	pop	r23
    2082:	6f 91       	pop	r22
    2084:	5f 91       	pop	r21
    2086:	4f 91       	pop	r20
    2088:	3f 91       	pop	r19
    208a:	2f 91       	pop	r18
    208c:	0f 90       	pop	r0
    208e:	0b be       	out	0x3b, r0	; 59
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti

0000209a <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    209a:	1f 92       	push	r1
    209c:	0f 92       	push	r0
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	0f 92       	push	r0
    20a2:	11 24       	eor	r1, r1
    20a4:	0b b6       	in	r0, 0x3b	; 59
    20a6:	0f 92       	push	r0
    20a8:	2f 93       	push	r18
    20aa:	3f 93       	push	r19
    20ac:	4f 93       	push	r20
    20ae:	5f 93       	push	r21
    20b0:	6f 93       	push	r22
    20b2:	7f 93       	push	r23
    20b4:	8f 93       	push	r24
    20b6:	9f 93       	push	r25
    20b8:	af 93       	push	r26
    20ba:	bf 93       	push	r27
    20bc:	ef 93       	push	r30
    20be:	ff 93       	push	r31
    20c0:	e0 91 d9 21 	lds	r30, 0x21D9
    20c4:	f0 91 da 21 	lds	r31, 0x21DA
    20c8:	30 97       	sbiw	r30, 0x00	; 0
    20ca:	29 f0       	breq	.+10     	; 0x20d6 <__vector_25+0x3c>
    20cc:	80 91 cf 22 	lds	r24, 0x22CF
    20d0:	90 91 d0 22 	lds	r25, 0x22D0
    20d4:	19 95       	eicall
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	bf 91       	pop	r27
    20dc:	af 91       	pop	r26
    20de:	9f 91       	pop	r25
    20e0:	8f 91       	pop	r24
    20e2:	7f 91       	pop	r23
    20e4:	6f 91       	pop	r22
    20e6:	5f 91       	pop	r21
    20e8:	4f 91       	pop	r20
    20ea:	3f 91       	pop	r19
    20ec:	2f 91       	pop	r18
    20ee:	0f 90       	pop	r0
    20f0:	0b be       	out	0x3b, r0	; 59
    20f2:	0f 90       	pop	r0
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	0f 90       	pop	r0
    20f8:	1f 90       	pop	r1
    20fa:	18 95       	reti

000020fc <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    20fc:	1f 92       	push	r1
    20fe:	0f 92       	push	r0
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	0f 92       	push	r0
    2104:	11 24       	eor	r1, r1
    2106:	0b b6       	in	r0, 0x3b	; 59
    2108:	0f 92       	push	r0
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
    2122:	e0 91 db 21 	lds	r30, 0x21DB
    2126:	f0 91 dc 21 	lds	r31, 0x21DC
    212a:	30 97       	sbiw	r30, 0x00	; 0
    212c:	29 f0       	breq	.+10     	; 0x2138 <__vector_26+0x3c>
    212e:	80 91 d1 22 	lds	r24, 0x22D1
    2132:	90 91 d2 22 	lds	r25, 0x22D2
    2136:	19 95       	eicall
    2138:	ff 91       	pop	r31
    213a:	ef 91       	pop	r30
    213c:	bf 91       	pop	r27
    213e:	af 91       	pop	r26
    2140:	9f 91       	pop	r25
    2142:	8f 91       	pop	r24
    2144:	7f 91       	pop	r23
    2146:	6f 91       	pop	r22
    2148:	5f 91       	pop	r21
    214a:	4f 91       	pop	r20
    214c:	3f 91       	pop	r19
    214e:	2f 91       	pop	r18
    2150:	0f 90       	pop	r0
    2152:	0b be       	out	0x3b, r0	; 59
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	0f 92       	push	r0
    2166:	11 24       	eor	r1, r1
    2168:	0b b6       	in	r0, 0x3b	; 59
    216a:	0f 92       	push	r0
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
    2184:	e0 91 dd 21 	lds	r30, 0x21DD
    2188:	f0 91 de 21 	lds	r31, 0x21DE
    218c:	30 97       	sbiw	r30, 0x00	; 0
    218e:	29 f0       	breq	.+10     	; 0x219a <__vector_27+0x3c>
    2190:	80 91 d3 22 	lds	r24, 0x22D3
    2194:	90 91 d4 22 	lds	r25, 0x22D4
    2198:	19 95       	eicall
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	bf 91       	pop	r27
    21a0:	af 91       	pop	r26
    21a2:	9f 91       	pop	r25
    21a4:	8f 91       	pop	r24
    21a6:	7f 91       	pop	r23
    21a8:	6f 91       	pop	r22
    21aa:	5f 91       	pop	r21
    21ac:	4f 91       	pop	r20
    21ae:	3f 91       	pop	r19
    21b0:	2f 91       	pop	r18
    21b2:	0f 90       	pop	r0
    21b4:	0b be       	out	0x3b, r0	; 59
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	0b b6       	in	r0, 0x3b	; 59
    21cc:	0f 92       	push	r0
    21ce:	2f 93       	push	r18
    21d0:	3f 93       	push	r19
    21d2:	4f 93       	push	r20
    21d4:	5f 93       	push	r21
    21d6:	6f 93       	push	r22
    21d8:	7f 93       	push	r23
    21da:	8f 93       	push	r24
    21dc:	9f 93       	push	r25
    21de:	af 93       	push	r26
    21e0:	bf 93       	push	r27
    21e2:	ef 93       	push	r30
    21e4:	ff 93       	push	r31
    21e6:	e0 91 df 21 	lds	r30, 0x21DF
    21ea:	f0 91 e0 21 	lds	r31, 0x21E0
    21ee:	30 97       	sbiw	r30, 0x00	; 0
    21f0:	29 f0       	breq	.+10     	; 0x21fc <__vector_28+0x3c>
    21f2:	80 91 d5 22 	lds	r24, 0x22D5
    21f6:	90 91 d6 22 	lds	r25, 0x22D6
    21fa:	19 95       	eicall
    21fc:	ff 91       	pop	r31
    21fe:	ef 91       	pop	r30
    2200:	bf 91       	pop	r27
    2202:	af 91       	pop	r26
    2204:	9f 91       	pop	r25
    2206:	8f 91       	pop	r24
    2208:	7f 91       	pop	r23
    220a:	6f 91       	pop	r22
    220c:	5f 91       	pop	r21
    220e:	4f 91       	pop	r20
    2210:	3f 91       	pop	r19
    2212:	2f 91       	pop	r18
    2214:	0f 90       	pop	r0
    2216:	0b be       	out	0x3b, r0	; 59
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2222:	1f 92       	push	r1
    2224:	0f 92       	push	r0
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	0f 92       	push	r0
    222a:	11 24       	eor	r1, r1
    222c:	0b b6       	in	r0, 0x3b	; 59
    222e:	0f 92       	push	r0
    2230:	2f 93       	push	r18
    2232:	3f 93       	push	r19
    2234:	4f 93       	push	r20
    2236:	5f 93       	push	r21
    2238:	6f 93       	push	r22
    223a:	7f 93       	push	r23
    223c:	8f 93       	push	r24
    223e:	9f 93       	push	r25
    2240:	af 93       	push	r26
    2242:	bf 93       	push	r27
    2244:	ef 93       	push	r30
    2246:	ff 93       	push	r31
    2248:	e0 91 e1 21 	lds	r30, 0x21E1
    224c:	f0 91 e2 21 	lds	r31, 0x21E2
    2250:	30 97       	sbiw	r30, 0x00	; 0
    2252:	29 f0       	breq	.+10     	; 0x225e <__vector_29+0x3c>
    2254:	80 91 d7 22 	lds	r24, 0x22D7
    2258:	90 91 d8 22 	lds	r25, 0x22D8
    225c:	19 95       	eicall
    225e:	ff 91       	pop	r31
    2260:	ef 91       	pop	r30
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0b be       	out	0x3b, r0	; 59
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	0f 90       	pop	r0
    2280:	1f 90       	pop	r1
    2282:	18 95       	reti

00002284 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2284:	1f 92       	push	r1
    2286:	0f 92       	push	r0
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	0f 92       	push	r0
    228c:	11 24       	eor	r1, r1
    228e:	0b b6       	in	r0, 0x3b	; 59
    2290:	0f 92       	push	r0
    2292:	2f 93       	push	r18
    2294:	3f 93       	push	r19
    2296:	4f 93       	push	r20
    2298:	5f 93       	push	r21
    229a:	6f 93       	push	r22
    229c:	7f 93       	push	r23
    229e:	8f 93       	push	r24
    22a0:	9f 93       	push	r25
    22a2:	af 93       	push	r26
    22a4:	bf 93       	push	r27
    22a6:	ef 93       	push	r30
    22a8:	ff 93       	push	r31
    22aa:	e0 91 e3 21 	lds	r30, 0x21E3
    22ae:	f0 91 e4 21 	lds	r31, 0x21E4
    22b2:	30 97       	sbiw	r30, 0x00	; 0
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <__vector_30+0x3c>
    22b6:	80 91 d9 22 	lds	r24, 0x22D9
    22ba:	90 91 da 22 	lds	r25, 0x22DA
    22be:	19 95       	eicall
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0b be       	out	0x3b, r0	; 59
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	11 24       	eor	r1, r1
    22f0:	0b b6       	in	r0, 0x3b	; 59
    22f2:	0f 92       	push	r0
    22f4:	2f 93       	push	r18
    22f6:	3f 93       	push	r19
    22f8:	4f 93       	push	r20
    22fa:	5f 93       	push	r21
    22fc:	6f 93       	push	r22
    22fe:	7f 93       	push	r23
    2300:	8f 93       	push	r24
    2302:	9f 93       	push	r25
    2304:	af 93       	push	r26
    2306:	bf 93       	push	r27
    2308:	ef 93       	push	r30
    230a:	ff 93       	push	r31
    230c:	e0 91 e5 21 	lds	r30, 0x21E5
    2310:	f0 91 e6 21 	lds	r31, 0x21E6
    2314:	30 97       	sbiw	r30, 0x00	; 0
    2316:	29 f0       	breq	.+10     	; 0x2322 <__vector_31+0x3c>
    2318:	80 91 db 22 	lds	r24, 0x22DB
    231c:	90 91 dc 22 	lds	r25, 0x22DC
    2320:	19 95       	eicall
    2322:	ff 91       	pop	r31
    2324:	ef 91       	pop	r30
    2326:	bf 91       	pop	r27
    2328:	af 91       	pop	r26
    232a:	9f 91       	pop	r25
    232c:	8f 91       	pop	r24
    232e:	7f 91       	pop	r23
    2330:	6f 91       	pop	r22
    2332:	5f 91       	pop	r21
    2334:	4f 91       	pop	r20
    2336:	3f 91       	pop	r19
    2338:	2f 91       	pop	r18
    233a:	0f 90       	pop	r0
    233c:	0b be       	out	0x3b, r0	; 59
    233e:	0f 90       	pop	r0
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	0f 90       	pop	r0
    2344:	1f 90       	pop	r1
    2346:	18 95       	reti

00002348 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	0b b6       	in	r0, 0x3b	; 59
    2354:	0f 92       	push	r0
    2356:	2f 93       	push	r18
    2358:	3f 93       	push	r19
    235a:	4f 93       	push	r20
    235c:	5f 93       	push	r21
    235e:	6f 93       	push	r22
    2360:	7f 93       	push	r23
    2362:	8f 93       	push	r24
    2364:	9f 93       	push	r25
    2366:	af 93       	push	r26
    2368:	bf 93       	push	r27
    236a:	ef 93       	push	r30
    236c:	ff 93       	push	r31
    236e:	e0 91 e7 21 	lds	r30, 0x21E7
    2372:	f0 91 e8 21 	lds	r31, 0x21E8
    2376:	30 97       	sbiw	r30, 0x00	; 0
    2378:	29 f0       	breq	.+10     	; 0x2384 <__vector_32+0x3c>
    237a:	80 91 dd 22 	lds	r24, 0x22DD
    237e:	90 91 de 22 	lds	r25, 0x22DE
    2382:	19 95       	eicall
    2384:	ff 91       	pop	r31
    2386:	ef 91       	pop	r30
    2388:	bf 91       	pop	r27
    238a:	af 91       	pop	r26
    238c:	9f 91       	pop	r25
    238e:	8f 91       	pop	r24
    2390:	7f 91       	pop	r23
    2392:	6f 91       	pop	r22
    2394:	5f 91       	pop	r21
    2396:	4f 91       	pop	r20
    2398:	3f 91       	pop	r19
    239a:	2f 91       	pop	r18
    239c:	0f 90       	pop	r0
    239e:	0b be       	out	0x3b, r0	; 59
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	0f 90       	pop	r0
    23a6:	1f 90       	pop	r1
    23a8:	18 95       	reti

000023aa <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    23aa:	1f 92       	push	r1
    23ac:	0f 92       	push	r0
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	0f 92       	push	r0
    23b2:	11 24       	eor	r1, r1
    23b4:	0b b6       	in	r0, 0x3b	; 59
    23b6:	0f 92       	push	r0
    23b8:	2f 93       	push	r18
    23ba:	3f 93       	push	r19
    23bc:	4f 93       	push	r20
    23be:	5f 93       	push	r21
    23c0:	6f 93       	push	r22
    23c2:	7f 93       	push	r23
    23c4:	8f 93       	push	r24
    23c6:	9f 93       	push	r25
    23c8:	af 93       	push	r26
    23ca:	bf 93       	push	r27
    23cc:	ef 93       	push	r30
    23ce:	ff 93       	push	r31
    23d0:	e0 91 e9 21 	lds	r30, 0x21E9
    23d4:	f0 91 ea 21 	lds	r31, 0x21EA
    23d8:	30 97       	sbiw	r30, 0x00	; 0
    23da:	29 f0       	breq	.+10     	; 0x23e6 <__vector_33+0x3c>
    23dc:	80 91 df 22 	lds	r24, 0x22DF
    23e0:	90 91 e0 22 	lds	r25, 0x22E0
    23e4:	19 95       	eicall
    23e6:	ff 91       	pop	r31
    23e8:	ef 91       	pop	r30
    23ea:	bf 91       	pop	r27
    23ec:	af 91       	pop	r26
    23ee:	9f 91       	pop	r25
    23f0:	8f 91       	pop	r24
    23f2:	7f 91       	pop	r23
    23f4:	6f 91       	pop	r22
    23f6:	5f 91       	pop	r21
    23f8:	4f 91       	pop	r20
    23fa:	3f 91       	pop	r19
    23fc:	2f 91       	pop	r18
    23fe:	0f 90       	pop	r0
    2400:	0b be       	out	0x3b, r0	; 59
    2402:	0f 90       	pop	r0
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	0f 90       	pop	r0
    2408:	1f 90       	pop	r1
    240a:	18 95       	reti

0000240c <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    240c:	1f 92       	push	r1
    240e:	0f 92       	push	r0
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	0f 92       	push	r0
    2414:	11 24       	eor	r1, r1
    2416:	0b b6       	in	r0, 0x3b	; 59
    2418:	0f 92       	push	r0
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31
    2432:	e0 91 eb 21 	lds	r30, 0x21EB
    2436:	f0 91 ec 21 	lds	r31, 0x21EC
    243a:	30 97       	sbiw	r30, 0x00	; 0
    243c:	29 f0       	breq	.+10     	; 0x2448 <__vector_34+0x3c>
    243e:	80 91 e1 22 	lds	r24, 0x22E1
    2442:	90 91 e2 22 	lds	r25, 0x22E2
    2446:	19 95       	eicall
    2448:	ff 91       	pop	r31
    244a:	ef 91       	pop	r30
    244c:	bf 91       	pop	r27
    244e:	af 91       	pop	r26
    2450:	9f 91       	pop	r25
    2452:	8f 91       	pop	r24
    2454:	7f 91       	pop	r23
    2456:	6f 91       	pop	r22
    2458:	5f 91       	pop	r21
    245a:	4f 91       	pop	r20
    245c:	3f 91       	pop	r19
    245e:	2f 91       	pop	r18
    2460:	0f 90       	pop	r0
    2462:	0b be       	out	0x3b, r0	; 59
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	0f 90       	pop	r0
    246a:	1f 90       	pop	r1
    246c:	18 95       	reti

0000246e <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    246e:	1f 92       	push	r1
    2470:	0f 92       	push	r0
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	0f 92       	push	r0
    2476:	11 24       	eor	r1, r1
    2478:	0b b6       	in	r0, 0x3b	; 59
    247a:	0f 92       	push	r0
    247c:	2f 93       	push	r18
    247e:	3f 93       	push	r19
    2480:	4f 93       	push	r20
    2482:	5f 93       	push	r21
    2484:	6f 93       	push	r22
    2486:	7f 93       	push	r23
    2488:	8f 93       	push	r24
    248a:	9f 93       	push	r25
    248c:	af 93       	push	r26
    248e:	bf 93       	push	r27
    2490:	ef 93       	push	r30
    2492:	ff 93       	push	r31
    2494:	e0 91 ed 21 	lds	r30, 0x21ED
    2498:	f0 91 ee 21 	lds	r31, 0x21EE
    249c:	30 97       	sbiw	r30, 0x00	; 0
    249e:	29 f0       	breq	.+10     	; 0x24aa <__vector_35+0x3c>
    24a0:	80 91 e3 22 	lds	r24, 0x22E3
    24a4:	90 91 e4 22 	lds	r25, 0x22E4
    24a8:	19 95       	eicall
    24aa:	ff 91       	pop	r31
    24ac:	ef 91       	pop	r30
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	9f 91       	pop	r25
    24b4:	8f 91       	pop	r24
    24b6:	7f 91       	pop	r23
    24b8:	6f 91       	pop	r22
    24ba:	5f 91       	pop	r21
    24bc:	4f 91       	pop	r20
    24be:	3f 91       	pop	r19
    24c0:	2f 91       	pop	r18
    24c2:	0f 90       	pop	r0
    24c4:	0b be       	out	0x3b, r0	; 59
    24c6:	0f 90       	pop	r0
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	0f 90       	pop	r0
    24cc:	1f 90       	pop	r1
    24ce:	18 95       	reti

000024d0 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    24d0:	1f 92       	push	r1
    24d2:	0f 92       	push	r0
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	0f 92       	push	r0
    24d8:	11 24       	eor	r1, r1
    24da:	0b b6       	in	r0, 0x3b	; 59
    24dc:	0f 92       	push	r0
    24de:	2f 93       	push	r18
    24e0:	3f 93       	push	r19
    24e2:	4f 93       	push	r20
    24e4:	5f 93       	push	r21
    24e6:	6f 93       	push	r22
    24e8:	7f 93       	push	r23
    24ea:	8f 93       	push	r24
    24ec:	9f 93       	push	r25
    24ee:	af 93       	push	r26
    24f0:	bf 93       	push	r27
    24f2:	ef 93       	push	r30
    24f4:	ff 93       	push	r31
    24f6:	e0 91 ef 21 	lds	r30, 0x21EF
    24fa:	f0 91 f0 21 	lds	r31, 0x21F0
    24fe:	30 97       	sbiw	r30, 0x00	; 0
    2500:	29 f0       	breq	.+10     	; 0x250c <__vector_36+0x3c>
    2502:	80 91 e5 22 	lds	r24, 0x22E5
    2506:	90 91 e6 22 	lds	r25, 0x22E6
    250a:	19 95       	eicall
    250c:	ff 91       	pop	r31
    250e:	ef 91       	pop	r30
    2510:	bf 91       	pop	r27
    2512:	af 91       	pop	r26
    2514:	9f 91       	pop	r25
    2516:	8f 91       	pop	r24
    2518:	7f 91       	pop	r23
    251a:	6f 91       	pop	r22
    251c:	5f 91       	pop	r21
    251e:	4f 91       	pop	r20
    2520:	3f 91       	pop	r19
    2522:	2f 91       	pop	r18
    2524:	0f 90       	pop	r0
    2526:	0b be       	out	0x3b, r0	; 59
    2528:	0f 90       	pop	r0
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	0f 90       	pop	r0
    252e:	1f 90       	pop	r1
    2530:	18 95       	reti

00002532 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2532:	1f 92       	push	r1
    2534:	0f 92       	push	r0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	0f 92       	push	r0
    253a:	11 24       	eor	r1, r1
    253c:	0b b6       	in	r0, 0x3b	; 59
    253e:	0f 92       	push	r0
    2540:	2f 93       	push	r18
    2542:	3f 93       	push	r19
    2544:	4f 93       	push	r20
    2546:	5f 93       	push	r21
    2548:	6f 93       	push	r22
    254a:	7f 93       	push	r23
    254c:	8f 93       	push	r24
    254e:	9f 93       	push	r25
    2550:	af 93       	push	r26
    2552:	bf 93       	push	r27
    2554:	ef 93       	push	r30
    2556:	ff 93       	push	r31
    2558:	e0 91 f1 21 	lds	r30, 0x21F1
    255c:	f0 91 f2 21 	lds	r31, 0x21F2
    2560:	30 97       	sbiw	r30, 0x00	; 0
    2562:	29 f0       	breq	.+10     	; 0x256e <__vector_37+0x3c>
    2564:	80 91 e7 22 	lds	r24, 0x22E7
    2568:	90 91 e8 22 	lds	r25, 0x22E8
    256c:	19 95       	eicall
    256e:	ff 91       	pop	r31
    2570:	ef 91       	pop	r30
    2572:	bf 91       	pop	r27
    2574:	af 91       	pop	r26
    2576:	9f 91       	pop	r25
    2578:	8f 91       	pop	r24
    257a:	7f 91       	pop	r23
    257c:	6f 91       	pop	r22
    257e:	5f 91       	pop	r21
    2580:	4f 91       	pop	r20
    2582:	3f 91       	pop	r19
    2584:	2f 91       	pop	r18
    2586:	0f 90       	pop	r0
    2588:	0b be       	out	0x3b, r0	; 59
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	0f 90       	pop	r0
    2590:	1f 90       	pop	r1
    2592:	18 95       	reti

00002594 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2594:	1f 92       	push	r1
    2596:	0f 92       	push	r0
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	0f 92       	push	r0
    259c:	11 24       	eor	r1, r1
    259e:	0b b6       	in	r0, 0x3b	; 59
    25a0:	0f 92       	push	r0
    25a2:	2f 93       	push	r18
    25a4:	3f 93       	push	r19
    25a6:	4f 93       	push	r20
    25a8:	5f 93       	push	r21
    25aa:	6f 93       	push	r22
    25ac:	7f 93       	push	r23
    25ae:	8f 93       	push	r24
    25b0:	9f 93       	push	r25
    25b2:	af 93       	push	r26
    25b4:	bf 93       	push	r27
    25b6:	ef 93       	push	r30
    25b8:	ff 93       	push	r31
    25ba:	e0 91 f3 21 	lds	r30, 0x21F3
    25be:	f0 91 f4 21 	lds	r31, 0x21F4
    25c2:	30 97       	sbiw	r30, 0x00	; 0
    25c4:	29 f0       	breq	.+10     	; 0x25d0 <__vector_38+0x3c>
    25c6:	80 91 e9 22 	lds	r24, 0x22E9
    25ca:	90 91 ea 22 	lds	r25, 0x22EA
    25ce:	19 95       	eicall
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0b be       	out	0x3b, r0	; 59
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    25f6:	1f 92       	push	r1
    25f8:	0f 92       	push	r0
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	0f 92       	push	r0
    25fe:	11 24       	eor	r1, r1
    2600:	0b b6       	in	r0, 0x3b	; 59
    2602:	0f 92       	push	r0
    2604:	2f 93       	push	r18
    2606:	3f 93       	push	r19
    2608:	4f 93       	push	r20
    260a:	5f 93       	push	r21
    260c:	6f 93       	push	r22
    260e:	7f 93       	push	r23
    2610:	8f 93       	push	r24
    2612:	9f 93       	push	r25
    2614:	af 93       	push	r26
    2616:	bf 93       	push	r27
    2618:	ef 93       	push	r30
    261a:	ff 93       	push	r31
    261c:	e0 91 f5 21 	lds	r30, 0x21F5
    2620:	f0 91 f6 21 	lds	r31, 0x21F6
    2624:	30 97       	sbiw	r30, 0x00	; 0
    2626:	29 f0       	breq	.+10     	; 0x2632 <__vector_39+0x3c>
    2628:	80 91 eb 22 	lds	r24, 0x22EB
    262c:	90 91 ec 22 	lds	r25, 0x22EC
    2630:	19 95       	eicall
    2632:	ff 91       	pop	r31
    2634:	ef 91       	pop	r30
    2636:	bf 91       	pop	r27
    2638:	af 91       	pop	r26
    263a:	9f 91       	pop	r25
    263c:	8f 91       	pop	r24
    263e:	7f 91       	pop	r23
    2640:	6f 91       	pop	r22
    2642:	5f 91       	pop	r21
    2644:	4f 91       	pop	r20
    2646:	3f 91       	pop	r19
    2648:	2f 91       	pop	r18
    264a:	0f 90       	pop	r0
    264c:	0b be       	out	0x3b, r0	; 59
    264e:	0f 90       	pop	r0
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	0f 90       	pop	r0
    2654:	1f 90       	pop	r1
    2656:	18 95       	reti

00002658 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	0b b6       	in	r0, 0x3b	; 59
    2664:	0f 92       	push	r0
    2666:	2f 93       	push	r18
    2668:	3f 93       	push	r19
    266a:	4f 93       	push	r20
    266c:	5f 93       	push	r21
    266e:	6f 93       	push	r22
    2670:	7f 93       	push	r23
    2672:	8f 93       	push	r24
    2674:	9f 93       	push	r25
    2676:	af 93       	push	r26
    2678:	bf 93       	push	r27
    267a:	ef 93       	push	r30
    267c:	ff 93       	push	r31
    267e:	e0 91 f7 21 	lds	r30, 0x21F7
    2682:	f0 91 f8 21 	lds	r31, 0x21F8
    2686:	30 97       	sbiw	r30, 0x00	; 0
    2688:	29 f0       	breq	.+10     	; 0x2694 <__vector_40+0x3c>
    268a:	80 91 ed 22 	lds	r24, 0x22ED
    268e:	90 91 ee 22 	lds	r25, 0x22EE
    2692:	19 95       	eicall
    2694:	ff 91       	pop	r31
    2696:	ef 91       	pop	r30
    2698:	bf 91       	pop	r27
    269a:	af 91       	pop	r26
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	7f 91       	pop	r23
    26a2:	6f 91       	pop	r22
    26a4:	5f 91       	pop	r21
    26a6:	4f 91       	pop	r20
    26a8:	3f 91       	pop	r19
    26aa:	2f 91       	pop	r18
    26ac:	0f 90       	pop	r0
    26ae:	0b be       	out	0x3b, r0	; 59
    26b0:	0f 90       	pop	r0
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	0f 90       	pop	r0
    26b6:	1f 90       	pop	r1
    26b8:	18 95       	reti

000026ba <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    26ba:	1f 92       	push	r1
    26bc:	0f 92       	push	r0
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	0f 92       	push	r0
    26c2:	11 24       	eor	r1, r1
    26c4:	0b b6       	in	r0, 0x3b	; 59
    26c6:	0f 92       	push	r0
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	6f 93       	push	r22
    26d2:	7f 93       	push	r23
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	af 93       	push	r26
    26da:	bf 93       	push	r27
    26dc:	ef 93       	push	r30
    26de:	ff 93       	push	r31
    26e0:	e0 91 f9 21 	lds	r30, 0x21F9
    26e4:	f0 91 fa 21 	lds	r31, 0x21FA
    26e8:	30 97       	sbiw	r30, 0x00	; 0
    26ea:	29 f0       	breq	.+10     	; 0x26f6 <__vector_41+0x3c>
    26ec:	80 91 ef 22 	lds	r24, 0x22EF
    26f0:	90 91 f0 22 	lds	r25, 0x22F0
    26f4:	19 95       	eicall
    26f6:	ff 91       	pop	r31
    26f8:	ef 91       	pop	r30
    26fa:	bf 91       	pop	r27
    26fc:	af 91       	pop	r26
    26fe:	9f 91       	pop	r25
    2700:	8f 91       	pop	r24
    2702:	7f 91       	pop	r23
    2704:	6f 91       	pop	r22
    2706:	5f 91       	pop	r21
    2708:	4f 91       	pop	r20
    270a:	3f 91       	pop	r19
    270c:	2f 91       	pop	r18
    270e:	0f 90       	pop	r0
    2710:	0b be       	out	0x3b, r0	; 59
    2712:	0f 90       	pop	r0
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	0f 90       	pop	r0
    2718:	1f 90       	pop	r1
    271a:	18 95       	reti

0000271c <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    271c:	1f 92       	push	r1
    271e:	0f 92       	push	r0
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	0f 92       	push	r0
    2724:	11 24       	eor	r1, r1
    2726:	0b b6       	in	r0, 0x3b	; 59
    2728:	0f 92       	push	r0
    272a:	2f 93       	push	r18
    272c:	3f 93       	push	r19
    272e:	4f 93       	push	r20
    2730:	5f 93       	push	r21
    2732:	6f 93       	push	r22
    2734:	7f 93       	push	r23
    2736:	8f 93       	push	r24
    2738:	9f 93       	push	r25
    273a:	af 93       	push	r26
    273c:	bf 93       	push	r27
    273e:	ef 93       	push	r30
    2740:	ff 93       	push	r31
    2742:	e0 91 fb 21 	lds	r30, 0x21FB
    2746:	f0 91 fc 21 	lds	r31, 0x21FC
    274a:	30 97       	sbiw	r30, 0x00	; 0
    274c:	29 f0       	breq	.+10     	; 0x2758 <__vector_42+0x3c>
    274e:	80 91 f1 22 	lds	r24, 0x22F1
    2752:	90 91 f2 22 	lds	r25, 0x22F2
    2756:	19 95       	eicall
    2758:	ff 91       	pop	r31
    275a:	ef 91       	pop	r30
    275c:	bf 91       	pop	r27
    275e:	af 91       	pop	r26
    2760:	9f 91       	pop	r25
    2762:	8f 91       	pop	r24
    2764:	7f 91       	pop	r23
    2766:	6f 91       	pop	r22
    2768:	5f 91       	pop	r21
    276a:	4f 91       	pop	r20
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0b be       	out	0x3b, r0	; 59
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	11 24       	eor	r1, r1
    2788:	0b b6       	in	r0, 0x3b	; 59
    278a:	0f 92       	push	r0
    278c:	2f 93       	push	r18
    278e:	3f 93       	push	r19
    2790:	4f 93       	push	r20
    2792:	5f 93       	push	r21
    2794:	6f 93       	push	r22
    2796:	7f 93       	push	r23
    2798:	8f 93       	push	r24
    279a:	9f 93       	push	r25
    279c:	af 93       	push	r26
    279e:	bf 93       	push	r27
    27a0:	ef 93       	push	r30
    27a2:	ff 93       	push	r31
    27a4:	e0 91 fd 21 	lds	r30, 0x21FD
    27a8:	f0 91 fe 21 	lds	r31, 0x21FE
    27ac:	30 97       	sbiw	r30, 0x00	; 0
    27ae:	29 f0       	breq	.+10     	; 0x27ba <__vector_43+0x3c>
    27b0:	80 91 f3 22 	lds	r24, 0x22F3
    27b4:	90 91 f4 22 	lds	r25, 0x22F4
    27b8:	19 95       	eicall
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0b be       	out	0x3b, r0	; 59
    27d6:	0f 90       	pop	r0
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	0f 90       	pop	r0
    27dc:	1f 90       	pop	r1
    27de:	18 95       	reti

000027e0 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    27e0:	1f 92       	push	r1
    27e2:	0f 92       	push	r0
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	0f 92       	push	r0
    27e8:	11 24       	eor	r1, r1
    27ea:	0b b6       	in	r0, 0x3b	; 59
    27ec:	0f 92       	push	r0
    27ee:	2f 93       	push	r18
    27f0:	3f 93       	push	r19
    27f2:	4f 93       	push	r20
    27f4:	5f 93       	push	r21
    27f6:	6f 93       	push	r22
    27f8:	7f 93       	push	r23
    27fa:	8f 93       	push	r24
    27fc:	9f 93       	push	r25
    27fe:	af 93       	push	r26
    2800:	bf 93       	push	r27
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
    2806:	e0 91 ff 21 	lds	r30, 0x21FF
    280a:	f0 91 00 22 	lds	r31, 0x2200
    280e:	30 97       	sbiw	r30, 0x00	; 0
    2810:	29 f0       	breq	.+10     	; 0x281c <__vector_44+0x3c>
    2812:	80 91 f5 22 	lds	r24, 0x22F5
    2816:	90 91 f6 22 	lds	r25, 0x22F6
    281a:	19 95       	eicall
    281c:	ff 91       	pop	r31
    281e:	ef 91       	pop	r30
    2820:	bf 91       	pop	r27
    2822:	af 91       	pop	r26
    2824:	9f 91       	pop	r25
    2826:	8f 91       	pop	r24
    2828:	7f 91       	pop	r23
    282a:	6f 91       	pop	r22
    282c:	5f 91       	pop	r21
    282e:	4f 91       	pop	r20
    2830:	3f 91       	pop	r19
    2832:	2f 91       	pop	r18
    2834:	0f 90       	pop	r0
    2836:	0b be       	out	0x3b, r0	; 59
    2838:	0f 90       	pop	r0
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	0f 90       	pop	r0
    283e:	1f 90       	pop	r1
    2840:	18 95       	reti

00002842 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    2842:	1f 92       	push	r1
    2844:	0f 92       	push	r0
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	0f 92       	push	r0
    284a:	11 24       	eor	r1, r1
    284c:	0b b6       	in	r0, 0x3b	; 59
    284e:	0f 92       	push	r0
    2850:	2f 93       	push	r18
    2852:	3f 93       	push	r19
    2854:	4f 93       	push	r20
    2856:	5f 93       	push	r21
    2858:	6f 93       	push	r22
    285a:	7f 93       	push	r23
    285c:	8f 93       	push	r24
    285e:	9f 93       	push	r25
    2860:	af 93       	push	r26
    2862:	bf 93       	push	r27
    2864:	ef 93       	push	r30
    2866:	ff 93       	push	r31
    2868:	e0 91 01 22 	lds	r30, 0x2201
    286c:	f0 91 02 22 	lds	r31, 0x2202
    2870:	30 97       	sbiw	r30, 0x00	; 0
    2872:	29 f0       	breq	.+10     	; 0x287e <__vector_45+0x3c>
    2874:	80 91 f7 22 	lds	r24, 0x22F7
    2878:	90 91 f8 22 	lds	r25, 0x22F8
    287c:	19 95       	eicall
    287e:	ff 91       	pop	r31
    2880:	ef 91       	pop	r30
    2882:	bf 91       	pop	r27
    2884:	af 91       	pop	r26
    2886:	9f 91       	pop	r25
    2888:	8f 91       	pop	r24
    288a:	7f 91       	pop	r23
    288c:	6f 91       	pop	r22
    288e:	5f 91       	pop	r21
    2890:	4f 91       	pop	r20
    2892:	3f 91       	pop	r19
    2894:	2f 91       	pop	r18
    2896:	0f 90       	pop	r0
    2898:	0b be       	out	0x3b, r0	; 59
    289a:	0f 90       	pop	r0
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	0f 90       	pop	r0
    28a0:	1f 90       	pop	r1
    28a2:	18 95       	reti

000028a4 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    28a4:	1f 92       	push	r1
    28a6:	0f 92       	push	r0
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	0f 92       	push	r0
    28ac:	11 24       	eor	r1, r1
    28ae:	0b b6       	in	r0, 0x3b	; 59
    28b0:	0f 92       	push	r0
    28b2:	2f 93       	push	r18
    28b4:	3f 93       	push	r19
    28b6:	4f 93       	push	r20
    28b8:	5f 93       	push	r21
    28ba:	6f 93       	push	r22
    28bc:	7f 93       	push	r23
    28be:	8f 93       	push	r24
    28c0:	9f 93       	push	r25
    28c2:	af 93       	push	r26
    28c4:	bf 93       	push	r27
    28c6:	ef 93       	push	r30
    28c8:	ff 93       	push	r31
    28ca:	e0 91 03 22 	lds	r30, 0x2203
    28ce:	f0 91 04 22 	lds	r31, 0x2204
    28d2:	30 97       	sbiw	r30, 0x00	; 0
    28d4:	29 f0       	breq	.+10     	; 0x28e0 <__vector_46+0x3c>
    28d6:	80 91 f9 22 	lds	r24, 0x22F9
    28da:	90 91 fa 22 	lds	r25, 0x22FA
    28de:	19 95       	eicall
    28e0:	ff 91       	pop	r31
    28e2:	ef 91       	pop	r30
    28e4:	bf 91       	pop	r27
    28e6:	af 91       	pop	r26
    28e8:	9f 91       	pop	r25
    28ea:	8f 91       	pop	r24
    28ec:	7f 91       	pop	r23
    28ee:	6f 91       	pop	r22
    28f0:	5f 91       	pop	r21
    28f2:	4f 91       	pop	r20
    28f4:	3f 91       	pop	r19
    28f6:	2f 91       	pop	r18
    28f8:	0f 90       	pop	r0
    28fa:	0b be       	out	0x3b, r0	; 59
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	0f 90       	pop	r0
    2902:	1f 90       	pop	r1
    2904:	18 95       	reti

00002906 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2906:	1f 92       	push	r1
    2908:	0f 92       	push	r0
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	0f 92       	push	r0
    290e:	11 24       	eor	r1, r1
    2910:	0b b6       	in	r0, 0x3b	; 59
    2912:	0f 92       	push	r0
    2914:	2f 93       	push	r18
    2916:	3f 93       	push	r19
    2918:	4f 93       	push	r20
    291a:	5f 93       	push	r21
    291c:	6f 93       	push	r22
    291e:	7f 93       	push	r23
    2920:	8f 93       	push	r24
    2922:	9f 93       	push	r25
    2924:	af 93       	push	r26
    2926:	bf 93       	push	r27
    2928:	ef 93       	push	r30
    292a:	ff 93       	push	r31
    292c:	e0 91 05 22 	lds	r30, 0x2205
    2930:	f0 91 06 22 	lds	r31, 0x2206
    2934:	30 97       	sbiw	r30, 0x00	; 0
    2936:	29 f0       	breq	.+10     	; 0x2942 <__vector_47+0x3c>
    2938:	80 91 fb 22 	lds	r24, 0x22FB
    293c:	90 91 fc 22 	lds	r25, 0x22FC
    2940:	19 95       	eicall
    2942:	ff 91       	pop	r31
    2944:	ef 91       	pop	r30
    2946:	bf 91       	pop	r27
    2948:	af 91       	pop	r26
    294a:	9f 91       	pop	r25
    294c:	8f 91       	pop	r24
    294e:	7f 91       	pop	r23
    2950:	6f 91       	pop	r22
    2952:	5f 91       	pop	r21
    2954:	4f 91       	pop	r20
    2956:	3f 91       	pop	r19
    2958:	2f 91       	pop	r18
    295a:	0f 90       	pop	r0
    295c:	0b be       	out	0x3b, r0	; 59
    295e:	0f 90       	pop	r0
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	0f 90       	pop	r0
    2964:	1f 90       	pop	r1
    2966:	18 95       	reti

00002968 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2968:	1f 92       	push	r1
    296a:	0f 92       	push	r0
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	0f 92       	push	r0
    2970:	11 24       	eor	r1, r1
    2972:	0b b6       	in	r0, 0x3b	; 59
    2974:	0f 92       	push	r0
    2976:	2f 93       	push	r18
    2978:	3f 93       	push	r19
    297a:	4f 93       	push	r20
    297c:	5f 93       	push	r21
    297e:	6f 93       	push	r22
    2980:	7f 93       	push	r23
    2982:	8f 93       	push	r24
    2984:	9f 93       	push	r25
    2986:	af 93       	push	r26
    2988:	bf 93       	push	r27
    298a:	ef 93       	push	r30
    298c:	ff 93       	push	r31
    298e:	e0 91 07 22 	lds	r30, 0x2207
    2992:	f0 91 08 22 	lds	r31, 0x2208
    2996:	30 97       	sbiw	r30, 0x00	; 0
    2998:	29 f0       	breq	.+10     	; 0x29a4 <__vector_48+0x3c>
    299a:	80 91 fd 22 	lds	r24, 0x22FD
    299e:	90 91 fe 22 	lds	r25, 0x22FE
    29a2:	19 95       	eicall
    29a4:	ff 91       	pop	r31
    29a6:	ef 91       	pop	r30
    29a8:	bf 91       	pop	r27
    29aa:	af 91       	pop	r26
    29ac:	9f 91       	pop	r25
    29ae:	8f 91       	pop	r24
    29b0:	7f 91       	pop	r23
    29b2:	6f 91       	pop	r22
    29b4:	5f 91       	pop	r21
    29b6:	4f 91       	pop	r20
    29b8:	3f 91       	pop	r19
    29ba:	2f 91       	pop	r18
    29bc:	0f 90       	pop	r0
    29be:	0b be       	out	0x3b, r0	; 59
    29c0:	0f 90       	pop	r0
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	0f 90       	pop	r0
    29c6:	1f 90       	pop	r1
    29c8:	18 95       	reti

000029ca <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    29ca:	1f 92       	push	r1
    29cc:	0f 92       	push	r0
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	0f 92       	push	r0
    29d2:	11 24       	eor	r1, r1
    29d4:	0b b6       	in	r0, 0x3b	; 59
    29d6:	0f 92       	push	r0
    29d8:	2f 93       	push	r18
    29da:	3f 93       	push	r19
    29dc:	4f 93       	push	r20
    29de:	5f 93       	push	r21
    29e0:	6f 93       	push	r22
    29e2:	7f 93       	push	r23
    29e4:	8f 93       	push	r24
    29e6:	9f 93       	push	r25
    29e8:	af 93       	push	r26
    29ea:	bf 93       	push	r27
    29ec:	ef 93       	push	r30
    29ee:	ff 93       	push	r31
    29f0:	e0 91 09 22 	lds	r30, 0x2209
    29f4:	f0 91 0a 22 	lds	r31, 0x220A
    29f8:	30 97       	sbiw	r30, 0x00	; 0
    29fa:	29 f0       	breq	.+10     	; 0x2a06 <__vector_49+0x3c>
    29fc:	80 91 ff 22 	lds	r24, 0x22FF
    2a00:	90 91 00 23 	lds	r25, 0x2300
    2a04:	19 95       	eicall
    2a06:	ff 91       	pop	r31
    2a08:	ef 91       	pop	r30
    2a0a:	bf 91       	pop	r27
    2a0c:	af 91       	pop	r26
    2a0e:	9f 91       	pop	r25
    2a10:	8f 91       	pop	r24
    2a12:	7f 91       	pop	r23
    2a14:	6f 91       	pop	r22
    2a16:	5f 91       	pop	r21
    2a18:	4f 91       	pop	r20
    2a1a:	3f 91       	pop	r19
    2a1c:	2f 91       	pop	r18
    2a1e:	0f 90       	pop	r0
    2a20:	0b be       	out	0x3b, r0	; 59
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	0f 90       	pop	r0
    2a28:	1f 90       	pop	r1
    2a2a:	18 95       	reti

00002a2c <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	0b b6       	in	r0, 0x3b	; 59
    2a38:	0f 92       	push	r0
    2a3a:	2f 93       	push	r18
    2a3c:	3f 93       	push	r19
    2a3e:	4f 93       	push	r20
    2a40:	5f 93       	push	r21
    2a42:	6f 93       	push	r22
    2a44:	7f 93       	push	r23
    2a46:	8f 93       	push	r24
    2a48:	9f 93       	push	r25
    2a4a:	af 93       	push	r26
    2a4c:	bf 93       	push	r27
    2a4e:	ef 93       	push	r30
    2a50:	ff 93       	push	r31
    2a52:	e0 91 0b 22 	lds	r30, 0x220B
    2a56:	f0 91 0c 22 	lds	r31, 0x220C
    2a5a:	30 97       	sbiw	r30, 0x00	; 0
    2a5c:	29 f0       	breq	.+10     	; 0x2a68 <__vector_50+0x3c>
    2a5e:	80 91 01 23 	lds	r24, 0x2301
    2a62:	90 91 02 23 	lds	r25, 0x2302
    2a66:	19 95       	eicall
    2a68:	ff 91       	pop	r31
    2a6a:	ef 91       	pop	r30
    2a6c:	bf 91       	pop	r27
    2a6e:	af 91       	pop	r26
    2a70:	9f 91       	pop	r25
    2a72:	8f 91       	pop	r24
    2a74:	7f 91       	pop	r23
    2a76:	6f 91       	pop	r22
    2a78:	5f 91       	pop	r21
    2a7a:	4f 91       	pop	r20
    2a7c:	3f 91       	pop	r19
    2a7e:	2f 91       	pop	r18
    2a80:	0f 90       	pop	r0
    2a82:	0b be       	out	0x3b, r0	; 59
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	0f 90       	pop	r0
    2a8a:	1f 90       	pop	r1
    2a8c:	18 95       	reti

00002a8e <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2a8e:	1f 92       	push	r1
    2a90:	0f 92       	push	r0
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	0f 92       	push	r0
    2a96:	11 24       	eor	r1, r1
    2a98:	0b b6       	in	r0, 0x3b	; 59
    2a9a:	0f 92       	push	r0
    2a9c:	2f 93       	push	r18
    2a9e:	3f 93       	push	r19
    2aa0:	4f 93       	push	r20
    2aa2:	5f 93       	push	r21
    2aa4:	6f 93       	push	r22
    2aa6:	7f 93       	push	r23
    2aa8:	8f 93       	push	r24
    2aaa:	9f 93       	push	r25
    2aac:	af 93       	push	r26
    2aae:	bf 93       	push	r27
    2ab0:	ef 93       	push	r30
    2ab2:	ff 93       	push	r31
    2ab4:	e0 91 0d 22 	lds	r30, 0x220D
    2ab8:	f0 91 0e 22 	lds	r31, 0x220E
    2abc:	30 97       	sbiw	r30, 0x00	; 0
    2abe:	29 f0       	breq	.+10     	; 0x2aca <__vector_51+0x3c>
    2ac0:	80 91 03 23 	lds	r24, 0x2303
    2ac4:	90 91 04 23 	lds	r25, 0x2304
    2ac8:	19 95       	eicall
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0b be       	out	0x3b, r0	; 59
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	0f 92       	push	r0
    2af8:	11 24       	eor	r1, r1
    2afa:	0b b6       	in	r0, 0x3b	; 59
    2afc:	0f 92       	push	r0
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	5f 93       	push	r21
    2b06:	6f 93       	push	r22
    2b08:	7f 93       	push	r23
    2b0a:	8f 93       	push	r24
    2b0c:	9f 93       	push	r25
    2b0e:	af 93       	push	r26
    2b10:	bf 93       	push	r27
    2b12:	ef 93       	push	r30
    2b14:	ff 93       	push	r31
    2b16:	e0 91 0f 22 	lds	r30, 0x220F
    2b1a:	f0 91 10 22 	lds	r31, 0x2210
    2b1e:	30 97       	sbiw	r30, 0x00	; 0
    2b20:	29 f0       	breq	.+10     	; 0x2b2c <__vector_52+0x3c>
    2b22:	80 91 05 23 	lds	r24, 0x2305
    2b26:	90 91 06 23 	lds	r25, 0x2306
    2b2a:	19 95       	eicall
    2b2c:	ff 91       	pop	r31
    2b2e:	ef 91       	pop	r30
    2b30:	bf 91       	pop	r27
    2b32:	af 91       	pop	r26
    2b34:	9f 91       	pop	r25
    2b36:	8f 91       	pop	r24
    2b38:	7f 91       	pop	r23
    2b3a:	6f 91       	pop	r22
    2b3c:	5f 91       	pop	r21
    2b3e:	4f 91       	pop	r20
    2b40:	3f 91       	pop	r19
    2b42:	2f 91       	pop	r18
    2b44:	0f 90       	pop	r0
    2b46:	0b be       	out	0x3b, r0	; 59
    2b48:	0f 90       	pop	r0
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	0f 90       	pop	r0
    2b4e:	1f 90       	pop	r1
    2b50:	18 95       	reti

00002b52 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2b52:	1f 92       	push	r1
    2b54:	0f 92       	push	r0
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	0f 92       	push	r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	0b b6       	in	r0, 0x3b	; 59
    2b5e:	0f 92       	push	r0
    2b60:	2f 93       	push	r18
    2b62:	3f 93       	push	r19
    2b64:	4f 93       	push	r20
    2b66:	5f 93       	push	r21
    2b68:	6f 93       	push	r22
    2b6a:	7f 93       	push	r23
    2b6c:	8f 93       	push	r24
    2b6e:	9f 93       	push	r25
    2b70:	af 93       	push	r26
    2b72:	bf 93       	push	r27
    2b74:	ef 93       	push	r30
    2b76:	ff 93       	push	r31
    2b78:	e0 91 11 22 	lds	r30, 0x2211
    2b7c:	f0 91 12 22 	lds	r31, 0x2212
    2b80:	30 97       	sbiw	r30, 0x00	; 0
    2b82:	29 f0       	breq	.+10     	; 0x2b8e <__vector_53+0x3c>
    2b84:	80 91 07 23 	lds	r24, 0x2307
    2b88:	90 91 08 23 	lds	r25, 0x2308
    2b8c:	19 95       	eicall
    2b8e:	ff 91       	pop	r31
    2b90:	ef 91       	pop	r30
    2b92:	bf 91       	pop	r27
    2b94:	af 91       	pop	r26
    2b96:	9f 91       	pop	r25
    2b98:	8f 91       	pop	r24
    2b9a:	7f 91       	pop	r23
    2b9c:	6f 91       	pop	r22
    2b9e:	5f 91       	pop	r21
    2ba0:	4f 91       	pop	r20
    2ba2:	3f 91       	pop	r19
    2ba4:	2f 91       	pop	r18
    2ba6:	0f 90       	pop	r0
    2ba8:	0b be       	out	0x3b, r0	; 59
    2baa:	0f 90       	pop	r0
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	0f 90       	pop	r0
    2bb0:	1f 90       	pop	r1
    2bb2:	18 95       	reti

00002bb4 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2bb4:	1f 92       	push	r1
    2bb6:	0f 92       	push	r0
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	0f 92       	push	r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	0b b6       	in	r0, 0x3b	; 59
    2bc0:	0f 92       	push	r0
    2bc2:	2f 93       	push	r18
    2bc4:	3f 93       	push	r19
    2bc6:	4f 93       	push	r20
    2bc8:	5f 93       	push	r21
    2bca:	6f 93       	push	r22
    2bcc:	7f 93       	push	r23
    2bce:	8f 93       	push	r24
    2bd0:	9f 93       	push	r25
    2bd2:	af 93       	push	r26
    2bd4:	bf 93       	push	r27
    2bd6:	ef 93       	push	r30
    2bd8:	ff 93       	push	r31
    2bda:	e0 91 13 22 	lds	r30, 0x2213
    2bde:	f0 91 14 22 	lds	r31, 0x2214
    2be2:	30 97       	sbiw	r30, 0x00	; 0
    2be4:	29 f0       	breq	.+10     	; 0x2bf0 <__vector_54+0x3c>
    2be6:	80 91 09 23 	lds	r24, 0x2309
    2bea:	90 91 0a 23 	lds	r25, 0x230A
    2bee:	19 95       	eicall
    2bf0:	ff 91       	pop	r31
    2bf2:	ef 91       	pop	r30
    2bf4:	bf 91       	pop	r27
    2bf6:	af 91       	pop	r26
    2bf8:	9f 91       	pop	r25
    2bfa:	8f 91       	pop	r24
    2bfc:	7f 91       	pop	r23
    2bfe:	6f 91       	pop	r22
    2c00:	5f 91       	pop	r21
    2c02:	4f 91       	pop	r20
    2c04:	3f 91       	pop	r19
    2c06:	2f 91       	pop	r18
    2c08:	0f 90       	pop	r0
    2c0a:	0b be       	out	0x3b, r0	; 59
    2c0c:	0f 90       	pop	r0
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	0f 90       	pop	r0
    2c12:	1f 90       	pop	r1
    2c14:	18 95       	reti

00002c16 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2c16:	1f 92       	push	r1
    2c18:	0f 92       	push	r0
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	0f 92       	push	r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	0b b6       	in	r0, 0x3b	; 59
    2c22:	0f 92       	push	r0
    2c24:	2f 93       	push	r18
    2c26:	3f 93       	push	r19
    2c28:	4f 93       	push	r20
    2c2a:	5f 93       	push	r21
    2c2c:	6f 93       	push	r22
    2c2e:	7f 93       	push	r23
    2c30:	8f 93       	push	r24
    2c32:	9f 93       	push	r25
    2c34:	af 93       	push	r26
    2c36:	bf 93       	push	r27
    2c38:	ef 93       	push	r30
    2c3a:	ff 93       	push	r31
    2c3c:	e0 91 15 22 	lds	r30, 0x2215
    2c40:	f0 91 16 22 	lds	r31, 0x2216
    2c44:	30 97       	sbiw	r30, 0x00	; 0
    2c46:	29 f0       	breq	.+10     	; 0x2c52 <__vector_55+0x3c>
    2c48:	80 91 0b 23 	lds	r24, 0x230B
    2c4c:	90 91 0c 23 	lds	r25, 0x230C
    2c50:	19 95       	eicall
    2c52:	ff 91       	pop	r31
    2c54:	ef 91       	pop	r30
    2c56:	bf 91       	pop	r27
    2c58:	af 91       	pop	r26
    2c5a:	9f 91       	pop	r25
    2c5c:	8f 91       	pop	r24
    2c5e:	7f 91       	pop	r23
    2c60:	6f 91       	pop	r22
    2c62:	5f 91       	pop	r21
    2c64:	4f 91       	pop	r20
    2c66:	3f 91       	pop	r19
    2c68:	2f 91       	pop	r18
    2c6a:	0f 90       	pop	r0
    2c6c:	0b be       	out	0x3b, r0	; 59
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	0f 90       	pop	r0
    2c74:	1f 90       	pop	r1
    2c76:	18 95       	reti

00002c78 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2c78:	1f 92       	push	r1
    2c7a:	0f 92       	push	r0
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	0f 92       	push	r0
    2c80:	11 24       	eor	r1, r1
    2c82:	0b b6       	in	r0, 0x3b	; 59
    2c84:	0f 92       	push	r0
    2c86:	2f 93       	push	r18
    2c88:	3f 93       	push	r19
    2c8a:	4f 93       	push	r20
    2c8c:	5f 93       	push	r21
    2c8e:	6f 93       	push	r22
    2c90:	7f 93       	push	r23
    2c92:	8f 93       	push	r24
    2c94:	9f 93       	push	r25
    2c96:	af 93       	push	r26
    2c98:	bf 93       	push	r27
    2c9a:	ef 93       	push	r30
    2c9c:	ff 93       	push	r31
    2c9e:	e0 91 17 22 	lds	r30, 0x2217
    2ca2:	f0 91 18 22 	lds	r31, 0x2218
    2ca6:	30 97       	sbiw	r30, 0x00	; 0
    2ca8:	29 f0       	breq	.+10     	; 0x2cb4 <__vector_56+0x3c>
    2caa:	80 91 0d 23 	lds	r24, 0x230D
    2cae:	90 91 0e 23 	lds	r25, 0x230E
    2cb2:	19 95       	eicall
    2cb4:	ff 91       	pop	r31
    2cb6:	ef 91       	pop	r30
    2cb8:	bf 91       	pop	r27
    2cba:	af 91       	pop	r26
    2cbc:	9f 91       	pop	r25
    2cbe:	8f 91       	pop	r24
    2cc0:	7f 91       	pop	r23
    2cc2:	6f 91       	pop	r22
    2cc4:	5f 91       	pop	r21
    2cc6:	4f 91       	pop	r20
    2cc8:	3f 91       	pop	r19
    2cca:	2f 91       	pop	r18
    2ccc:	0f 90       	pop	r0
    2cce:	0b be       	out	0x3b, r0	; 59
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	0f 90       	pop	r0
    2cd6:	1f 90       	pop	r1
    2cd8:	18 95       	reti

00002cda <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2cda:	1f 92       	push	r1
    2cdc:	0f 92       	push	r0
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	0f 92       	push	r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	0b b6       	in	r0, 0x3b	; 59
    2ce6:	0f 92       	push	r0
    2ce8:	2f 93       	push	r18
    2cea:	3f 93       	push	r19
    2cec:	4f 93       	push	r20
    2cee:	5f 93       	push	r21
    2cf0:	6f 93       	push	r22
    2cf2:	7f 93       	push	r23
    2cf4:	8f 93       	push	r24
    2cf6:	9f 93       	push	r25
    2cf8:	af 93       	push	r26
    2cfa:	bf 93       	push	r27
    2cfc:	ef 93       	push	r30
    2cfe:	ff 93       	push	r31
    2d00:	e0 91 19 22 	lds	r30, 0x2219
    2d04:	f0 91 1a 22 	lds	r31, 0x221A
    2d08:	30 97       	sbiw	r30, 0x00	; 0
    2d0a:	29 f0       	breq	.+10     	; 0x2d16 <__vector_57+0x3c>
    2d0c:	80 91 0f 23 	lds	r24, 0x230F
    2d10:	90 91 10 23 	lds	r25, 0x2310
    2d14:	19 95       	eicall
    2d16:	ff 91       	pop	r31
    2d18:	ef 91       	pop	r30
    2d1a:	bf 91       	pop	r27
    2d1c:	af 91       	pop	r26
    2d1e:	9f 91       	pop	r25
    2d20:	8f 91       	pop	r24
    2d22:	7f 91       	pop	r23
    2d24:	6f 91       	pop	r22
    2d26:	5f 91       	pop	r21
    2d28:	4f 91       	pop	r20
    2d2a:	3f 91       	pop	r19
    2d2c:	2f 91       	pop	r18
    2d2e:	0f 90       	pop	r0
    2d30:	0b be       	out	0x3b, r0	; 59
    2d32:	0f 90       	pop	r0
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	0f 90       	pop	r0
    2d38:	1f 90       	pop	r1
    2d3a:	18 95       	reti

00002d3c <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2d3c:	1f 92       	push	r1
    2d3e:	0f 92       	push	r0
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	0f 92       	push	r0
    2d44:	11 24       	eor	r1, r1
    2d46:	0b b6       	in	r0, 0x3b	; 59
    2d48:	0f 92       	push	r0
    2d4a:	2f 93       	push	r18
    2d4c:	3f 93       	push	r19
    2d4e:	4f 93       	push	r20
    2d50:	5f 93       	push	r21
    2d52:	6f 93       	push	r22
    2d54:	7f 93       	push	r23
    2d56:	8f 93       	push	r24
    2d58:	9f 93       	push	r25
    2d5a:	af 93       	push	r26
    2d5c:	bf 93       	push	r27
    2d5e:	ef 93       	push	r30
    2d60:	ff 93       	push	r31
    2d62:	e0 91 1b 22 	lds	r30, 0x221B
    2d66:	f0 91 1c 22 	lds	r31, 0x221C
    2d6a:	30 97       	sbiw	r30, 0x00	; 0
    2d6c:	29 f0       	breq	.+10     	; 0x2d78 <__vector_58+0x3c>
    2d6e:	80 91 11 23 	lds	r24, 0x2311
    2d72:	90 91 12 23 	lds	r25, 0x2312
    2d76:	19 95       	eicall
    2d78:	ff 91       	pop	r31
    2d7a:	ef 91       	pop	r30
    2d7c:	bf 91       	pop	r27
    2d7e:	af 91       	pop	r26
    2d80:	9f 91       	pop	r25
    2d82:	8f 91       	pop	r24
    2d84:	7f 91       	pop	r23
    2d86:	6f 91       	pop	r22
    2d88:	5f 91       	pop	r21
    2d8a:	4f 91       	pop	r20
    2d8c:	3f 91       	pop	r19
    2d8e:	2f 91       	pop	r18
    2d90:	0f 90       	pop	r0
    2d92:	0b be       	out	0x3b, r0	; 59
    2d94:	0f 90       	pop	r0
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	0f 90       	pop	r0
    2d9a:	1f 90       	pop	r1
    2d9c:	18 95       	reti

00002d9e <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2d9e:	1f 92       	push	r1
    2da0:	0f 92       	push	r0
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	0f 92       	push	r0
    2da6:	11 24       	eor	r1, r1
    2da8:	0b b6       	in	r0, 0x3b	; 59
    2daa:	0f 92       	push	r0
    2dac:	2f 93       	push	r18
    2dae:	3f 93       	push	r19
    2db0:	4f 93       	push	r20
    2db2:	5f 93       	push	r21
    2db4:	6f 93       	push	r22
    2db6:	7f 93       	push	r23
    2db8:	8f 93       	push	r24
    2dba:	9f 93       	push	r25
    2dbc:	af 93       	push	r26
    2dbe:	bf 93       	push	r27
    2dc0:	ef 93       	push	r30
    2dc2:	ff 93       	push	r31
    2dc4:	e0 91 1d 22 	lds	r30, 0x221D
    2dc8:	f0 91 1e 22 	lds	r31, 0x221E
    2dcc:	30 97       	sbiw	r30, 0x00	; 0
    2dce:	29 f0       	breq	.+10     	; 0x2dda <__vector_59+0x3c>
    2dd0:	80 91 13 23 	lds	r24, 0x2313
    2dd4:	90 91 14 23 	lds	r25, 0x2314
    2dd8:	19 95       	eicall
    2dda:	ff 91       	pop	r31
    2ddc:	ef 91       	pop	r30
    2dde:	bf 91       	pop	r27
    2de0:	af 91       	pop	r26
    2de2:	9f 91       	pop	r25
    2de4:	8f 91       	pop	r24
    2de6:	7f 91       	pop	r23
    2de8:	6f 91       	pop	r22
    2dea:	5f 91       	pop	r21
    2dec:	4f 91       	pop	r20
    2dee:	3f 91       	pop	r19
    2df0:	2f 91       	pop	r18
    2df2:	0f 90       	pop	r0
    2df4:	0b be       	out	0x3b, r0	; 59
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	0f 90       	pop	r0
    2dfc:	1f 90       	pop	r1
    2dfe:	18 95       	reti

00002e00 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2e00:	1f 92       	push	r1
    2e02:	0f 92       	push	r0
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	0f 92       	push	r0
    2e08:	11 24       	eor	r1, r1
    2e0a:	0b b6       	in	r0, 0x3b	; 59
    2e0c:	0f 92       	push	r0
    2e0e:	2f 93       	push	r18
    2e10:	3f 93       	push	r19
    2e12:	4f 93       	push	r20
    2e14:	5f 93       	push	r21
    2e16:	6f 93       	push	r22
    2e18:	7f 93       	push	r23
    2e1a:	8f 93       	push	r24
    2e1c:	9f 93       	push	r25
    2e1e:	af 93       	push	r26
    2e20:	bf 93       	push	r27
    2e22:	ef 93       	push	r30
    2e24:	ff 93       	push	r31
    2e26:	e0 91 1f 22 	lds	r30, 0x221F
    2e2a:	f0 91 20 22 	lds	r31, 0x2220
    2e2e:	30 97       	sbiw	r30, 0x00	; 0
    2e30:	29 f0       	breq	.+10     	; 0x2e3c <__vector_60+0x3c>
    2e32:	80 91 15 23 	lds	r24, 0x2315
    2e36:	90 91 16 23 	lds	r25, 0x2316
    2e3a:	19 95       	eicall
    2e3c:	ff 91       	pop	r31
    2e3e:	ef 91       	pop	r30
    2e40:	bf 91       	pop	r27
    2e42:	af 91       	pop	r26
    2e44:	9f 91       	pop	r25
    2e46:	8f 91       	pop	r24
    2e48:	7f 91       	pop	r23
    2e4a:	6f 91       	pop	r22
    2e4c:	5f 91       	pop	r21
    2e4e:	4f 91       	pop	r20
    2e50:	3f 91       	pop	r19
    2e52:	2f 91       	pop	r18
    2e54:	0f 90       	pop	r0
    2e56:	0b be       	out	0x3b, r0	; 59
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	0b b6       	in	r0, 0x3b	; 59
    2e6e:	0f 92       	push	r0
    2e70:	2f 93       	push	r18
    2e72:	3f 93       	push	r19
    2e74:	4f 93       	push	r20
    2e76:	5f 93       	push	r21
    2e78:	6f 93       	push	r22
    2e7a:	7f 93       	push	r23
    2e7c:	8f 93       	push	r24
    2e7e:	9f 93       	push	r25
    2e80:	af 93       	push	r26
    2e82:	bf 93       	push	r27
    2e84:	ef 93       	push	r30
    2e86:	ff 93       	push	r31
    2e88:	e0 91 21 22 	lds	r30, 0x2221
    2e8c:	f0 91 22 22 	lds	r31, 0x2222
    2e90:	30 97       	sbiw	r30, 0x00	; 0
    2e92:	29 f0       	breq	.+10     	; 0x2e9e <__vector_61+0x3c>
    2e94:	80 91 17 23 	lds	r24, 0x2317
    2e98:	90 91 18 23 	lds	r25, 0x2318
    2e9c:	19 95       	eicall
    2e9e:	ff 91       	pop	r31
    2ea0:	ef 91       	pop	r30
    2ea2:	bf 91       	pop	r27
    2ea4:	af 91       	pop	r26
    2ea6:	9f 91       	pop	r25
    2ea8:	8f 91       	pop	r24
    2eaa:	7f 91       	pop	r23
    2eac:	6f 91       	pop	r22
    2eae:	5f 91       	pop	r21
    2eb0:	4f 91       	pop	r20
    2eb2:	3f 91       	pop	r19
    2eb4:	2f 91       	pop	r18
    2eb6:	0f 90       	pop	r0
    2eb8:	0b be       	out	0x3b, r0	; 59
    2eba:	0f 90       	pop	r0
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	0f 90       	pop	r0
    2ec0:	1f 90       	pop	r1
    2ec2:	18 95       	reti

00002ec4 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2ec4:	1f 92       	push	r1
    2ec6:	0f 92       	push	r0
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	0f 92       	push	r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	0b b6       	in	r0, 0x3b	; 59
    2ed0:	0f 92       	push	r0
    2ed2:	2f 93       	push	r18
    2ed4:	3f 93       	push	r19
    2ed6:	4f 93       	push	r20
    2ed8:	5f 93       	push	r21
    2eda:	6f 93       	push	r22
    2edc:	7f 93       	push	r23
    2ede:	8f 93       	push	r24
    2ee0:	9f 93       	push	r25
    2ee2:	af 93       	push	r26
    2ee4:	bf 93       	push	r27
    2ee6:	ef 93       	push	r30
    2ee8:	ff 93       	push	r31
    2eea:	e0 91 23 22 	lds	r30, 0x2223
    2eee:	f0 91 24 22 	lds	r31, 0x2224
    2ef2:	30 97       	sbiw	r30, 0x00	; 0
    2ef4:	29 f0       	breq	.+10     	; 0x2f00 <__vector_62+0x3c>
    2ef6:	80 91 19 23 	lds	r24, 0x2319
    2efa:	90 91 1a 23 	lds	r25, 0x231A
    2efe:	19 95       	eicall
    2f00:	ff 91       	pop	r31
    2f02:	ef 91       	pop	r30
    2f04:	bf 91       	pop	r27
    2f06:	af 91       	pop	r26
    2f08:	9f 91       	pop	r25
    2f0a:	8f 91       	pop	r24
    2f0c:	7f 91       	pop	r23
    2f0e:	6f 91       	pop	r22
    2f10:	5f 91       	pop	r21
    2f12:	4f 91       	pop	r20
    2f14:	3f 91       	pop	r19
    2f16:	2f 91       	pop	r18
    2f18:	0f 90       	pop	r0
    2f1a:	0b be       	out	0x3b, r0	; 59
    2f1c:	0f 90       	pop	r0
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	0f 90       	pop	r0
    2f22:	1f 90       	pop	r1
    2f24:	18 95       	reti

00002f26 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    2f26:	1f 92       	push	r1
    2f28:	0f 92       	push	r0
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	0f 92       	push	r0
    2f2e:	11 24       	eor	r1, r1
    2f30:	0b b6       	in	r0, 0x3b	; 59
    2f32:	0f 92       	push	r0
    2f34:	2f 93       	push	r18
    2f36:	3f 93       	push	r19
    2f38:	4f 93       	push	r20
    2f3a:	5f 93       	push	r21
    2f3c:	6f 93       	push	r22
    2f3e:	7f 93       	push	r23
    2f40:	8f 93       	push	r24
    2f42:	9f 93       	push	r25
    2f44:	af 93       	push	r26
    2f46:	bf 93       	push	r27
    2f48:	ef 93       	push	r30
    2f4a:	ff 93       	push	r31
    2f4c:	e0 91 25 22 	lds	r30, 0x2225
    2f50:	f0 91 26 22 	lds	r31, 0x2226
    2f54:	30 97       	sbiw	r30, 0x00	; 0
    2f56:	29 f0       	breq	.+10     	; 0x2f62 <__vector_63+0x3c>
    2f58:	80 91 1b 23 	lds	r24, 0x231B
    2f5c:	90 91 1c 23 	lds	r25, 0x231C
    2f60:	19 95       	eicall
    2f62:	ff 91       	pop	r31
    2f64:	ef 91       	pop	r30
    2f66:	bf 91       	pop	r27
    2f68:	af 91       	pop	r26
    2f6a:	9f 91       	pop	r25
    2f6c:	8f 91       	pop	r24
    2f6e:	7f 91       	pop	r23
    2f70:	6f 91       	pop	r22
    2f72:	5f 91       	pop	r21
    2f74:	4f 91       	pop	r20
    2f76:	3f 91       	pop	r19
    2f78:	2f 91       	pop	r18
    2f7a:	0f 90       	pop	r0
    2f7c:	0b be       	out	0x3b, r0	; 59
    2f7e:	0f 90       	pop	r0
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	0f 90       	pop	r0
    2f84:	1f 90       	pop	r1
    2f86:	18 95       	reti

00002f88 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    2f88:	1f 92       	push	r1
    2f8a:	0f 92       	push	r0
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	0f 92       	push	r0
    2f90:	11 24       	eor	r1, r1
    2f92:	0b b6       	in	r0, 0x3b	; 59
    2f94:	0f 92       	push	r0
    2f96:	2f 93       	push	r18
    2f98:	3f 93       	push	r19
    2f9a:	4f 93       	push	r20
    2f9c:	5f 93       	push	r21
    2f9e:	6f 93       	push	r22
    2fa0:	7f 93       	push	r23
    2fa2:	8f 93       	push	r24
    2fa4:	9f 93       	push	r25
    2fa6:	af 93       	push	r26
    2fa8:	bf 93       	push	r27
    2faa:	ef 93       	push	r30
    2fac:	ff 93       	push	r31
    2fae:	e0 91 27 22 	lds	r30, 0x2227
    2fb2:	f0 91 28 22 	lds	r31, 0x2228
    2fb6:	30 97       	sbiw	r30, 0x00	; 0
    2fb8:	29 f0       	breq	.+10     	; 0x2fc4 <__vector_64+0x3c>
    2fba:	80 91 1d 23 	lds	r24, 0x231D
    2fbe:	90 91 1e 23 	lds	r25, 0x231E
    2fc2:	19 95       	eicall
    2fc4:	ff 91       	pop	r31
    2fc6:	ef 91       	pop	r30
    2fc8:	bf 91       	pop	r27
    2fca:	af 91       	pop	r26
    2fcc:	9f 91       	pop	r25
    2fce:	8f 91       	pop	r24
    2fd0:	7f 91       	pop	r23
    2fd2:	6f 91       	pop	r22
    2fd4:	5f 91       	pop	r21
    2fd6:	4f 91       	pop	r20
    2fd8:	3f 91       	pop	r19
    2fda:	2f 91       	pop	r18
    2fdc:	0f 90       	pop	r0
    2fde:	0b be       	out	0x3b, r0	; 59
    2fe0:	0f 90       	pop	r0
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	0f 90       	pop	r0
    2fe6:	1f 90       	pop	r1
    2fe8:	18 95       	reti

00002fea <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    2fea:	1f 92       	push	r1
    2fec:	0f 92       	push	r0
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	0f 92       	push	r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	0b b6       	in	r0, 0x3b	; 59
    2ff6:	0f 92       	push	r0
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	e0 91 29 22 	lds	r30, 0x2229
    3014:	f0 91 2a 22 	lds	r31, 0x222A
    3018:	30 97       	sbiw	r30, 0x00	; 0
    301a:	29 f0       	breq	.+10     	; 0x3026 <__vector_65+0x3c>
    301c:	80 91 1f 23 	lds	r24, 0x231F
    3020:	90 91 20 23 	lds	r25, 0x2320
    3024:	19 95       	eicall
    3026:	ff 91       	pop	r31
    3028:	ef 91       	pop	r30
    302a:	bf 91       	pop	r27
    302c:	af 91       	pop	r26
    302e:	9f 91       	pop	r25
    3030:	8f 91       	pop	r24
    3032:	7f 91       	pop	r23
    3034:	6f 91       	pop	r22
    3036:	5f 91       	pop	r21
    3038:	4f 91       	pop	r20
    303a:	3f 91       	pop	r19
    303c:	2f 91       	pop	r18
    303e:	0f 90       	pop	r0
    3040:	0b be       	out	0x3b, r0	; 59
    3042:	0f 90       	pop	r0
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	0f 90       	pop	r0
    3048:	1f 90       	pop	r1
    304a:	18 95       	reti

0000304c <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    304c:	1f 92       	push	r1
    304e:	0f 92       	push	r0
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	0b b6       	in	r0, 0x3b	; 59
    3058:	0f 92       	push	r0
    305a:	2f 93       	push	r18
    305c:	3f 93       	push	r19
    305e:	4f 93       	push	r20
    3060:	5f 93       	push	r21
    3062:	6f 93       	push	r22
    3064:	7f 93       	push	r23
    3066:	8f 93       	push	r24
    3068:	9f 93       	push	r25
    306a:	af 93       	push	r26
    306c:	bf 93       	push	r27
    306e:	ef 93       	push	r30
    3070:	ff 93       	push	r31
    3072:	e0 91 2b 22 	lds	r30, 0x222B
    3076:	f0 91 2c 22 	lds	r31, 0x222C
    307a:	30 97       	sbiw	r30, 0x00	; 0
    307c:	29 f0       	breq	.+10     	; 0x3088 <__vector_66+0x3c>
    307e:	80 91 21 23 	lds	r24, 0x2321
    3082:	90 91 22 23 	lds	r25, 0x2322
    3086:	19 95       	eicall
    3088:	ff 91       	pop	r31
    308a:	ef 91       	pop	r30
    308c:	bf 91       	pop	r27
    308e:	af 91       	pop	r26
    3090:	9f 91       	pop	r25
    3092:	8f 91       	pop	r24
    3094:	7f 91       	pop	r23
    3096:	6f 91       	pop	r22
    3098:	5f 91       	pop	r21
    309a:	4f 91       	pop	r20
    309c:	3f 91       	pop	r19
    309e:	2f 91       	pop	r18
    30a0:	0f 90       	pop	r0
    30a2:	0b be       	out	0x3b, r0	; 59
    30a4:	0f 90       	pop	r0
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	0f 90       	pop	r0
    30aa:	1f 90       	pop	r1
    30ac:	18 95       	reti

000030ae <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    30ae:	1f 92       	push	r1
    30b0:	0f 92       	push	r0
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	0f 92       	push	r0
    30b6:	11 24       	eor	r1, r1
    30b8:	0b b6       	in	r0, 0x3b	; 59
    30ba:	0f 92       	push	r0
    30bc:	2f 93       	push	r18
    30be:	3f 93       	push	r19
    30c0:	4f 93       	push	r20
    30c2:	5f 93       	push	r21
    30c4:	6f 93       	push	r22
    30c6:	7f 93       	push	r23
    30c8:	8f 93       	push	r24
    30ca:	9f 93       	push	r25
    30cc:	af 93       	push	r26
    30ce:	bf 93       	push	r27
    30d0:	ef 93       	push	r30
    30d2:	ff 93       	push	r31
    30d4:	e0 91 2d 22 	lds	r30, 0x222D
    30d8:	f0 91 2e 22 	lds	r31, 0x222E
    30dc:	30 97       	sbiw	r30, 0x00	; 0
    30de:	29 f0       	breq	.+10     	; 0x30ea <__vector_67+0x3c>
    30e0:	80 91 23 23 	lds	r24, 0x2323
    30e4:	90 91 24 23 	lds	r25, 0x2324
    30e8:	19 95       	eicall
    30ea:	ff 91       	pop	r31
    30ec:	ef 91       	pop	r30
    30ee:	bf 91       	pop	r27
    30f0:	af 91       	pop	r26
    30f2:	9f 91       	pop	r25
    30f4:	8f 91       	pop	r24
    30f6:	7f 91       	pop	r23
    30f8:	6f 91       	pop	r22
    30fa:	5f 91       	pop	r21
    30fc:	4f 91       	pop	r20
    30fe:	3f 91       	pop	r19
    3100:	2f 91       	pop	r18
    3102:	0f 90       	pop	r0
    3104:	0b be       	out	0x3b, r0	; 59
    3106:	0f 90       	pop	r0
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	0f 90       	pop	r0
    310c:	1f 90       	pop	r1
    310e:	18 95       	reti

00003110 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3110:	1f 92       	push	r1
    3112:	0f 92       	push	r0
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	0f 92       	push	r0
    3118:	11 24       	eor	r1, r1
    311a:	0b b6       	in	r0, 0x3b	; 59
    311c:	0f 92       	push	r0
    311e:	2f 93       	push	r18
    3120:	3f 93       	push	r19
    3122:	4f 93       	push	r20
    3124:	5f 93       	push	r21
    3126:	6f 93       	push	r22
    3128:	7f 93       	push	r23
    312a:	8f 93       	push	r24
    312c:	9f 93       	push	r25
    312e:	af 93       	push	r26
    3130:	bf 93       	push	r27
    3132:	ef 93       	push	r30
    3134:	ff 93       	push	r31
    3136:	e0 91 2f 22 	lds	r30, 0x222F
    313a:	f0 91 30 22 	lds	r31, 0x2230
    313e:	30 97       	sbiw	r30, 0x00	; 0
    3140:	29 f0       	breq	.+10     	; 0x314c <__vector_68+0x3c>
    3142:	80 91 25 23 	lds	r24, 0x2325
    3146:	90 91 26 23 	lds	r25, 0x2326
    314a:	19 95       	eicall
    314c:	ff 91       	pop	r31
    314e:	ef 91       	pop	r30
    3150:	bf 91       	pop	r27
    3152:	af 91       	pop	r26
    3154:	9f 91       	pop	r25
    3156:	8f 91       	pop	r24
    3158:	7f 91       	pop	r23
    315a:	6f 91       	pop	r22
    315c:	5f 91       	pop	r21
    315e:	4f 91       	pop	r20
    3160:	3f 91       	pop	r19
    3162:	2f 91       	pop	r18
    3164:	0f 90       	pop	r0
    3166:	0b be       	out	0x3b, r0	; 59
    3168:	0f 90       	pop	r0
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	0f 90       	pop	r0
    316e:	1f 90       	pop	r1
    3170:	18 95       	reti

00003172 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3172:	1f 92       	push	r1
    3174:	0f 92       	push	r0
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	0f 92       	push	r0
    317a:	11 24       	eor	r1, r1
    317c:	0b b6       	in	r0, 0x3b	; 59
    317e:	0f 92       	push	r0
    3180:	2f 93       	push	r18
    3182:	3f 93       	push	r19
    3184:	4f 93       	push	r20
    3186:	5f 93       	push	r21
    3188:	6f 93       	push	r22
    318a:	7f 93       	push	r23
    318c:	8f 93       	push	r24
    318e:	9f 93       	push	r25
    3190:	af 93       	push	r26
    3192:	bf 93       	push	r27
    3194:	ef 93       	push	r30
    3196:	ff 93       	push	r31
    3198:	e0 91 31 22 	lds	r30, 0x2231
    319c:	f0 91 32 22 	lds	r31, 0x2232
    31a0:	30 97       	sbiw	r30, 0x00	; 0
    31a2:	29 f0       	breq	.+10     	; 0x31ae <__vector_69+0x3c>
    31a4:	80 91 27 23 	lds	r24, 0x2327
    31a8:	90 91 28 23 	lds	r25, 0x2328
    31ac:	19 95       	eicall
    31ae:	ff 91       	pop	r31
    31b0:	ef 91       	pop	r30
    31b2:	bf 91       	pop	r27
    31b4:	af 91       	pop	r26
    31b6:	9f 91       	pop	r25
    31b8:	8f 91       	pop	r24
    31ba:	7f 91       	pop	r23
    31bc:	6f 91       	pop	r22
    31be:	5f 91       	pop	r21
    31c0:	4f 91       	pop	r20
    31c2:	3f 91       	pop	r19
    31c4:	2f 91       	pop	r18
    31c6:	0f 90       	pop	r0
    31c8:	0b be       	out	0x3b, r0	; 59
    31ca:	0f 90       	pop	r0
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	0f 90       	pop	r0
    31d0:	1f 90       	pop	r1
    31d2:	18 95       	reti

000031d4 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    31d4:	1f 92       	push	r1
    31d6:	0f 92       	push	r0
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	0f 92       	push	r0
    31dc:	11 24       	eor	r1, r1
    31de:	0b b6       	in	r0, 0x3b	; 59
    31e0:	0f 92       	push	r0
    31e2:	2f 93       	push	r18
    31e4:	3f 93       	push	r19
    31e6:	4f 93       	push	r20
    31e8:	5f 93       	push	r21
    31ea:	6f 93       	push	r22
    31ec:	7f 93       	push	r23
    31ee:	8f 93       	push	r24
    31f0:	9f 93       	push	r25
    31f2:	af 93       	push	r26
    31f4:	bf 93       	push	r27
    31f6:	ef 93       	push	r30
    31f8:	ff 93       	push	r31
    31fa:	e0 91 33 22 	lds	r30, 0x2233
    31fe:	f0 91 34 22 	lds	r31, 0x2234
    3202:	30 97       	sbiw	r30, 0x00	; 0
    3204:	29 f0       	breq	.+10     	; 0x3210 <__vector_70+0x3c>
    3206:	80 91 29 23 	lds	r24, 0x2329
    320a:	90 91 2a 23 	lds	r25, 0x232A
    320e:	19 95       	eicall
    3210:	ff 91       	pop	r31
    3212:	ef 91       	pop	r30
    3214:	bf 91       	pop	r27
    3216:	af 91       	pop	r26
    3218:	9f 91       	pop	r25
    321a:	8f 91       	pop	r24
    321c:	7f 91       	pop	r23
    321e:	6f 91       	pop	r22
    3220:	5f 91       	pop	r21
    3222:	4f 91       	pop	r20
    3224:	3f 91       	pop	r19
    3226:	2f 91       	pop	r18
    3228:	0f 90       	pop	r0
    322a:	0b be       	out	0x3b, r0	; 59
    322c:	0f 90       	pop	r0
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	0f 90       	pop	r0
    3232:	1f 90       	pop	r1
    3234:	18 95       	reti

00003236 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3236:	1f 92       	push	r1
    3238:	0f 92       	push	r0
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	0f 92       	push	r0
    323e:	11 24       	eor	r1, r1
    3240:	0b b6       	in	r0, 0x3b	; 59
    3242:	0f 92       	push	r0
    3244:	2f 93       	push	r18
    3246:	3f 93       	push	r19
    3248:	4f 93       	push	r20
    324a:	5f 93       	push	r21
    324c:	6f 93       	push	r22
    324e:	7f 93       	push	r23
    3250:	8f 93       	push	r24
    3252:	9f 93       	push	r25
    3254:	af 93       	push	r26
    3256:	bf 93       	push	r27
    3258:	ef 93       	push	r30
    325a:	ff 93       	push	r31
    325c:	e0 91 35 22 	lds	r30, 0x2235
    3260:	f0 91 36 22 	lds	r31, 0x2236
    3264:	30 97       	sbiw	r30, 0x00	; 0
    3266:	29 f0       	breq	.+10     	; 0x3272 <__vector_71+0x3c>
    3268:	80 91 2b 23 	lds	r24, 0x232B
    326c:	90 91 2c 23 	lds	r25, 0x232C
    3270:	19 95       	eicall
    3272:	ff 91       	pop	r31
    3274:	ef 91       	pop	r30
    3276:	bf 91       	pop	r27
    3278:	af 91       	pop	r26
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	7f 91       	pop	r23
    3280:	6f 91       	pop	r22
    3282:	5f 91       	pop	r21
    3284:	4f 91       	pop	r20
    3286:	3f 91       	pop	r19
    3288:	2f 91       	pop	r18
    328a:	0f 90       	pop	r0
    328c:	0b be       	out	0x3b, r0	; 59
    328e:	0f 90       	pop	r0
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	0f 90       	pop	r0
    3294:	1f 90       	pop	r1
    3296:	18 95       	reti

00003298 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3298:	1f 92       	push	r1
    329a:	0f 92       	push	r0
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	0f 92       	push	r0
    32a0:	11 24       	eor	r1, r1
    32a2:	0b b6       	in	r0, 0x3b	; 59
    32a4:	0f 92       	push	r0
    32a6:	2f 93       	push	r18
    32a8:	3f 93       	push	r19
    32aa:	4f 93       	push	r20
    32ac:	5f 93       	push	r21
    32ae:	6f 93       	push	r22
    32b0:	7f 93       	push	r23
    32b2:	8f 93       	push	r24
    32b4:	9f 93       	push	r25
    32b6:	af 93       	push	r26
    32b8:	bf 93       	push	r27
    32ba:	ef 93       	push	r30
    32bc:	ff 93       	push	r31
    32be:	e0 91 37 22 	lds	r30, 0x2237
    32c2:	f0 91 38 22 	lds	r31, 0x2238
    32c6:	30 97       	sbiw	r30, 0x00	; 0
    32c8:	29 f0       	breq	.+10     	; 0x32d4 <__vector_72+0x3c>
    32ca:	80 91 2d 23 	lds	r24, 0x232D
    32ce:	90 91 2e 23 	lds	r25, 0x232E
    32d2:	19 95       	eicall
    32d4:	ff 91       	pop	r31
    32d6:	ef 91       	pop	r30
    32d8:	bf 91       	pop	r27
    32da:	af 91       	pop	r26
    32dc:	9f 91       	pop	r25
    32de:	8f 91       	pop	r24
    32e0:	7f 91       	pop	r23
    32e2:	6f 91       	pop	r22
    32e4:	5f 91       	pop	r21
    32e6:	4f 91       	pop	r20
    32e8:	3f 91       	pop	r19
    32ea:	2f 91       	pop	r18
    32ec:	0f 90       	pop	r0
    32ee:	0b be       	out	0x3b, r0	; 59
    32f0:	0f 90       	pop	r0
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	0f 90       	pop	r0
    32f6:	1f 90       	pop	r1
    32f8:	18 95       	reti

000032fa <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    32fa:	1f 92       	push	r1
    32fc:	0f 92       	push	r0
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	0f 92       	push	r0
    3302:	11 24       	eor	r1, r1
    3304:	0b b6       	in	r0, 0x3b	; 59
    3306:	0f 92       	push	r0
    3308:	2f 93       	push	r18
    330a:	3f 93       	push	r19
    330c:	4f 93       	push	r20
    330e:	5f 93       	push	r21
    3310:	6f 93       	push	r22
    3312:	7f 93       	push	r23
    3314:	8f 93       	push	r24
    3316:	9f 93       	push	r25
    3318:	af 93       	push	r26
    331a:	bf 93       	push	r27
    331c:	ef 93       	push	r30
    331e:	ff 93       	push	r31
    3320:	e0 91 39 22 	lds	r30, 0x2239
    3324:	f0 91 3a 22 	lds	r31, 0x223A
    3328:	30 97       	sbiw	r30, 0x00	; 0
    332a:	29 f0       	breq	.+10     	; 0x3336 <__vector_73+0x3c>
    332c:	80 91 2f 23 	lds	r24, 0x232F
    3330:	90 91 30 23 	lds	r25, 0x2330
    3334:	19 95       	eicall
    3336:	ff 91       	pop	r31
    3338:	ef 91       	pop	r30
    333a:	bf 91       	pop	r27
    333c:	af 91       	pop	r26
    333e:	9f 91       	pop	r25
    3340:	8f 91       	pop	r24
    3342:	7f 91       	pop	r23
    3344:	6f 91       	pop	r22
    3346:	5f 91       	pop	r21
    3348:	4f 91       	pop	r20
    334a:	3f 91       	pop	r19
    334c:	2f 91       	pop	r18
    334e:	0f 90       	pop	r0
    3350:	0b be       	out	0x3b, r0	; 59
    3352:	0f 90       	pop	r0
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	0f 90       	pop	r0
    3358:	1f 90       	pop	r1
    335a:	18 95       	reti

0000335c <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    335c:	1f 92       	push	r1
    335e:	0f 92       	push	r0
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	0f 92       	push	r0
    3364:	11 24       	eor	r1, r1
    3366:	0b b6       	in	r0, 0x3b	; 59
    3368:	0f 92       	push	r0
    336a:	2f 93       	push	r18
    336c:	3f 93       	push	r19
    336e:	4f 93       	push	r20
    3370:	5f 93       	push	r21
    3372:	6f 93       	push	r22
    3374:	7f 93       	push	r23
    3376:	8f 93       	push	r24
    3378:	9f 93       	push	r25
    337a:	af 93       	push	r26
    337c:	bf 93       	push	r27
    337e:	ef 93       	push	r30
    3380:	ff 93       	push	r31
    3382:	e0 91 3b 22 	lds	r30, 0x223B
    3386:	f0 91 3c 22 	lds	r31, 0x223C
    338a:	30 97       	sbiw	r30, 0x00	; 0
    338c:	29 f0       	breq	.+10     	; 0x3398 <__vector_74+0x3c>
    338e:	80 91 31 23 	lds	r24, 0x2331
    3392:	90 91 32 23 	lds	r25, 0x2332
    3396:	19 95       	eicall
    3398:	ff 91       	pop	r31
    339a:	ef 91       	pop	r30
    339c:	bf 91       	pop	r27
    339e:	af 91       	pop	r26
    33a0:	9f 91       	pop	r25
    33a2:	8f 91       	pop	r24
    33a4:	7f 91       	pop	r23
    33a6:	6f 91       	pop	r22
    33a8:	5f 91       	pop	r21
    33aa:	4f 91       	pop	r20
    33ac:	3f 91       	pop	r19
    33ae:	2f 91       	pop	r18
    33b0:	0f 90       	pop	r0
    33b2:	0b be       	out	0x3b, r0	; 59
    33b4:	0f 90       	pop	r0
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	0f 90       	pop	r0
    33ba:	1f 90       	pop	r1
    33bc:	18 95       	reti

000033be <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    33be:	1f 92       	push	r1
    33c0:	0f 92       	push	r0
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	0f 92       	push	r0
    33c6:	11 24       	eor	r1, r1
    33c8:	0b b6       	in	r0, 0x3b	; 59
    33ca:	0f 92       	push	r0
    33cc:	2f 93       	push	r18
    33ce:	3f 93       	push	r19
    33d0:	4f 93       	push	r20
    33d2:	5f 93       	push	r21
    33d4:	6f 93       	push	r22
    33d6:	7f 93       	push	r23
    33d8:	8f 93       	push	r24
    33da:	9f 93       	push	r25
    33dc:	af 93       	push	r26
    33de:	bf 93       	push	r27
    33e0:	ef 93       	push	r30
    33e2:	ff 93       	push	r31
    33e4:	e0 91 41 22 	lds	r30, 0x2241
    33e8:	f0 91 42 22 	lds	r31, 0x2242
    33ec:	30 97       	sbiw	r30, 0x00	; 0
    33ee:	29 f0       	breq	.+10     	; 0x33fa <__vector_77+0x3c>
    33f0:	80 91 37 23 	lds	r24, 0x2337
    33f4:	90 91 38 23 	lds	r25, 0x2338
    33f8:	19 95       	eicall
    33fa:	ff 91       	pop	r31
    33fc:	ef 91       	pop	r30
    33fe:	bf 91       	pop	r27
    3400:	af 91       	pop	r26
    3402:	9f 91       	pop	r25
    3404:	8f 91       	pop	r24
    3406:	7f 91       	pop	r23
    3408:	6f 91       	pop	r22
    340a:	5f 91       	pop	r21
    340c:	4f 91       	pop	r20
    340e:	3f 91       	pop	r19
    3410:	2f 91       	pop	r18
    3412:	0f 90       	pop	r0
    3414:	0b be       	out	0x3b, r0	; 59
    3416:	0f 90       	pop	r0
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	0f 90       	pop	r0
    341c:	1f 90       	pop	r1
    341e:	18 95       	reti

00003420 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3420:	1f 92       	push	r1
    3422:	0f 92       	push	r0
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	0f 92       	push	r0
    3428:	11 24       	eor	r1, r1
    342a:	0b b6       	in	r0, 0x3b	; 59
    342c:	0f 92       	push	r0
    342e:	2f 93       	push	r18
    3430:	3f 93       	push	r19
    3432:	4f 93       	push	r20
    3434:	5f 93       	push	r21
    3436:	6f 93       	push	r22
    3438:	7f 93       	push	r23
    343a:	8f 93       	push	r24
    343c:	9f 93       	push	r25
    343e:	af 93       	push	r26
    3440:	bf 93       	push	r27
    3442:	ef 93       	push	r30
    3444:	ff 93       	push	r31
    3446:	e0 91 43 22 	lds	r30, 0x2243
    344a:	f0 91 44 22 	lds	r31, 0x2244
    344e:	30 97       	sbiw	r30, 0x00	; 0
    3450:	29 f0       	breq	.+10     	; 0x345c <__vector_78+0x3c>
    3452:	80 91 39 23 	lds	r24, 0x2339
    3456:	90 91 3a 23 	lds	r25, 0x233A
    345a:	19 95       	eicall
    345c:	ff 91       	pop	r31
    345e:	ef 91       	pop	r30
    3460:	bf 91       	pop	r27
    3462:	af 91       	pop	r26
    3464:	9f 91       	pop	r25
    3466:	8f 91       	pop	r24
    3468:	7f 91       	pop	r23
    346a:	6f 91       	pop	r22
    346c:	5f 91       	pop	r21
    346e:	4f 91       	pop	r20
    3470:	3f 91       	pop	r19
    3472:	2f 91       	pop	r18
    3474:	0f 90       	pop	r0
    3476:	0b be       	out	0x3b, r0	; 59
    3478:	0f 90       	pop	r0
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	0f 90       	pop	r0
    347e:	1f 90       	pop	r1
    3480:	18 95       	reti

00003482 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3482:	1f 92       	push	r1
    3484:	0f 92       	push	r0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	0f 92       	push	r0
    348a:	11 24       	eor	r1, r1
    348c:	0b b6       	in	r0, 0x3b	; 59
    348e:	0f 92       	push	r0
    3490:	2f 93       	push	r18
    3492:	3f 93       	push	r19
    3494:	4f 93       	push	r20
    3496:	5f 93       	push	r21
    3498:	6f 93       	push	r22
    349a:	7f 93       	push	r23
    349c:	8f 93       	push	r24
    349e:	9f 93       	push	r25
    34a0:	af 93       	push	r26
    34a2:	bf 93       	push	r27
    34a4:	ef 93       	push	r30
    34a6:	ff 93       	push	r31
    34a8:	e0 91 45 22 	lds	r30, 0x2245
    34ac:	f0 91 46 22 	lds	r31, 0x2246
    34b0:	30 97       	sbiw	r30, 0x00	; 0
    34b2:	29 f0       	breq	.+10     	; 0x34be <__vector_79+0x3c>
    34b4:	80 91 3b 23 	lds	r24, 0x233B
    34b8:	90 91 3c 23 	lds	r25, 0x233C
    34bc:	19 95       	eicall
    34be:	ff 91       	pop	r31
    34c0:	ef 91       	pop	r30
    34c2:	bf 91       	pop	r27
    34c4:	af 91       	pop	r26
    34c6:	9f 91       	pop	r25
    34c8:	8f 91       	pop	r24
    34ca:	7f 91       	pop	r23
    34cc:	6f 91       	pop	r22
    34ce:	5f 91       	pop	r21
    34d0:	4f 91       	pop	r20
    34d2:	3f 91       	pop	r19
    34d4:	2f 91       	pop	r18
    34d6:	0f 90       	pop	r0
    34d8:	0b be       	out	0x3b, r0	; 59
    34da:	0f 90       	pop	r0
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	0f 90       	pop	r0
    34e0:	1f 90       	pop	r1
    34e2:	18 95       	reti

000034e4 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    34e4:	1f 92       	push	r1
    34e6:	0f 92       	push	r0
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	0f 92       	push	r0
    34ec:	11 24       	eor	r1, r1
    34ee:	0b b6       	in	r0, 0x3b	; 59
    34f0:	0f 92       	push	r0
    34f2:	2f 93       	push	r18
    34f4:	3f 93       	push	r19
    34f6:	4f 93       	push	r20
    34f8:	5f 93       	push	r21
    34fa:	6f 93       	push	r22
    34fc:	7f 93       	push	r23
    34fe:	8f 93       	push	r24
    3500:	9f 93       	push	r25
    3502:	af 93       	push	r26
    3504:	bf 93       	push	r27
    3506:	ef 93       	push	r30
    3508:	ff 93       	push	r31
    350a:	e0 91 47 22 	lds	r30, 0x2247
    350e:	f0 91 48 22 	lds	r31, 0x2248
    3512:	30 97       	sbiw	r30, 0x00	; 0
    3514:	29 f0       	breq	.+10     	; 0x3520 <__vector_80+0x3c>
    3516:	80 91 3d 23 	lds	r24, 0x233D
    351a:	90 91 3e 23 	lds	r25, 0x233E
    351e:	19 95       	eicall
    3520:	ff 91       	pop	r31
    3522:	ef 91       	pop	r30
    3524:	bf 91       	pop	r27
    3526:	af 91       	pop	r26
    3528:	9f 91       	pop	r25
    352a:	8f 91       	pop	r24
    352c:	7f 91       	pop	r23
    352e:	6f 91       	pop	r22
    3530:	5f 91       	pop	r21
    3532:	4f 91       	pop	r20
    3534:	3f 91       	pop	r19
    3536:	2f 91       	pop	r18
    3538:	0f 90       	pop	r0
    353a:	0b be       	out	0x3b, r0	; 59
    353c:	0f 90       	pop	r0
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	0f 90       	pop	r0
    3542:	1f 90       	pop	r1
    3544:	18 95       	reti

00003546 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3546:	1f 92       	push	r1
    3548:	0f 92       	push	r0
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	0f 92       	push	r0
    354e:	11 24       	eor	r1, r1
    3550:	0b b6       	in	r0, 0x3b	; 59
    3552:	0f 92       	push	r0
    3554:	2f 93       	push	r18
    3556:	3f 93       	push	r19
    3558:	4f 93       	push	r20
    355a:	5f 93       	push	r21
    355c:	6f 93       	push	r22
    355e:	7f 93       	push	r23
    3560:	8f 93       	push	r24
    3562:	9f 93       	push	r25
    3564:	af 93       	push	r26
    3566:	bf 93       	push	r27
    3568:	ef 93       	push	r30
    356a:	ff 93       	push	r31
    356c:	e0 91 49 22 	lds	r30, 0x2249
    3570:	f0 91 4a 22 	lds	r31, 0x224A
    3574:	30 97       	sbiw	r30, 0x00	; 0
    3576:	29 f0       	breq	.+10     	; 0x3582 <__vector_81+0x3c>
    3578:	80 91 3f 23 	lds	r24, 0x233F
    357c:	90 91 40 23 	lds	r25, 0x2340
    3580:	19 95       	eicall
    3582:	ff 91       	pop	r31
    3584:	ef 91       	pop	r30
    3586:	bf 91       	pop	r27
    3588:	af 91       	pop	r26
    358a:	9f 91       	pop	r25
    358c:	8f 91       	pop	r24
    358e:	7f 91       	pop	r23
    3590:	6f 91       	pop	r22
    3592:	5f 91       	pop	r21
    3594:	4f 91       	pop	r20
    3596:	3f 91       	pop	r19
    3598:	2f 91       	pop	r18
    359a:	0f 90       	pop	r0
    359c:	0b be       	out	0x3b, r0	; 59
    359e:	0f 90       	pop	r0
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	0f 90       	pop	r0
    35a4:	1f 90       	pop	r1
    35a6:	18 95       	reti

000035a8 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    35a8:	1f 92       	push	r1
    35aa:	0f 92       	push	r0
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	0f 92       	push	r0
    35b0:	11 24       	eor	r1, r1
    35b2:	0b b6       	in	r0, 0x3b	; 59
    35b4:	0f 92       	push	r0
    35b6:	2f 93       	push	r18
    35b8:	3f 93       	push	r19
    35ba:	4f 93       	push	r20
    35bc:	5f 93       	push	r21
    35be:	6f 93       	push	r22
    35c0:	7f 93       	push	r23
    35c2:	8f 93       	push	r24
    35c4:	9f 93       	push	r25
    35c6:	af 93       	push	r26
    35c8:	bf 93       	push	r27
    35ca:	ef 93       	push	r30
    35cc:	ff 93       	push	r31
    35ce:	e0 91 4b 22 	lds	r30, 0x224B
    35d2:	f0 91 4c 22 	lds	r31, 0x224C
    35d6:	30 97       	sbiw	r30, 0x00	; 0
    35d8:	29 f0       	breq	.+10     	; 0x35e4 <__vector_82+0x3c>
    35da:	80 91 41 23 	lds	r24, 0x2341
    35de:	90 91 42 23 	lds	r25, 0x2342
    35e2:	19 95       	eicall
    35e4:	ff 91       	pop	r31
    35e6:	ef 91       	pop	r30
    35e8:	bf 91       	pop	r27
    35ea:	af 91       	pop	r26
    35ec:	9f 91       	pop	r25
    35ee:	8f 91       	pop	r24
    35f0:	7f 91       	pop	r23
    35f2:	6f 91       	pop	r22
    35f4:	5f 91       	pop	r21
    35f6:	4f 91       	pop	r20
    35f8:	3f 91       	pop	r19
    35fa:	2f 91       	pop	r18
    35fc:	0f 90       	pop	r0
    35fe:	0b be       	out	0x3b, r0	; 59
    3600:	0f 90       	pop	r0
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	0f 90       	pop	r0
    3606:	1f 90       	pop	r1
    3608:	18 95       	reti

0000360a <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    360a:	1f 92       	push	r1
    360c:	0f 92       	push	r0
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	0f 92       	push	r0
    3612:	11 24       	eor	r1, r1
    3614:	0b b6       	in	r0, 0x3b	; 59
    3616:	0f 92       	push	r0
    3618:	2f 93       	push	r18
    361a:	3f 93       	push	r19
    361c:	4f 93       	push	r20
    361e:	5f 93       	push	r21
    3620:	6f 93       	push	r22
    3622:	7f 93       	push	r23
    3624:	8f 93       	push	r24
    3626:	9f 93       	push	r25
    3628:	af 93       	push	r26
    362a:	bf 93       	push	r27
    362c:	ef 93       	push	r30
    362e:	ff 93       	push	r31
    3630:	e0 91 4d 22 	lds	r30, 0x224D
    3634:	f0 91 4e 22 	lds	r31, 0x224E
    3638:	30 97       	sbiw	r30, 0x00	; 0
    363a:	29 f0       	breq	.+10     	; 0x3646 <__vector_83+0x3c>
    363c:	80 91 43 23 	lds	r24, 0x2343
    3640:	90 91 44 23 	lds	r25, 0x2344
    3644:	19 95       	eicall
    3646:	ff 91       	pop	r31
    3648:	ef 91       	pop	r30
    364a:	bf 91       	pop	r27
    364c:	af 91       	pop	r26
    364e:	9f 91       	pop	r25
    3650:	8f 91       	pop	r24
    3652:	7f 91       	pop	r23
    3654:	6f 91       	pop	r22
    3656:	5f 91       	pop	r21
    3658:	4f 91       	pop	r20
    365a:	3f 91       	pop	r19
    365c:	2f 91       	pop	r18
    365e:	0f 90       	pop	r0
    3660:	0b be       	out	0x3b, r0	; 59
    3662:	0f 90       	pop	r0
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	0f 90       	pop	r0
    3668:	1f 90       	pop	r1
    366a:	18 95       	reti

0000366c <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    366c:	1f 92       	push	r1
    366e:	0f 92       	push	r0
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	0f 92       	push	r0
    3674:	11 24       	eor	r1, r1
    3676:	0b b6       	in	r0, 0x3b	; 59
    3678:	0f 92       	push	r0
    367a:	2f 93       	push	r18
    367c:	3f 93       	push	r19
    367e:	4f 93       	push	r20
    3680:	5f 93       	push	r21
    3682:	6f 93       	push	r22
    3684:	7f 93       	push	r23
    3686:	8f 93       	push	r24
    3688:	9f 93       	push	r25
    368a:	af 93       	push	r26
    368c:	bf 93       	push	r27
    368e:	ef 93       	push	r30
    3690:	ff 93       	push	r31
    3692:	e0 91 4f 22 	lds	r30, 0x224F
    3696:	f0 91 50 22 	lds	r31, 0x2250
    369a:	30 97       	sbiw	r30, 0x00	; 0
    369c:	29 f0       	breq	.+10     	; 0x36a8 <__vector_84+0x3c>
    369e:	80 91 45 23 	lds	r24, 0x2345
    36a2:	90 91 46 23 	lds	r25, 0x2346
    36a6:	19 95       	eicall
    36a8:	ff 91       	pop	r31
    36aa:	ef 91       	pop	r30
    36ac:	bf 91       	pop	r27
    36ae:	af 91       	pop	r26
    36b0:	9f 91       	pop	r25
    36b2:	8f 91       	pop	r24
    36b4:	7f 91       	pop	r23
    36b6:	6f 91       	pop	r22
    36b8:	5f 91       	pop	r21
    36ba:	4f 91       	pop	r20
    36bc:	3f 91       	pop	r19
    36be:	2f 91       	pop	r18
    36c0:	0f 90       	pop	r0
    36c2:	0b be       	out	0x3b, r0	; 59
    36c4:	0f 90       	pop	r0
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	0f 90       	pop	r0
    36ca:	1f 90       	pop	r1
    36cc:	18 95       	reti

000036ce <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    36ce:	1f 92       	push	r1
    36d0:	0f 92       	push	r0
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	0f 92       	push	r0
    36d6:	11 24       	eor	r1, r1
    36d8:	0b b6       	in	r0, 0x3b	; 59
    36da:	0f 92       	push	r0
    36dc:	2f 93       	push	r18
    36de:	3f 93       	push	r19
    36e0:	4f 93       	push	r20
    36e2:	5f 93       	push	r21
    36e4:	6f 93       	push	r22
    36e6:	7f 93       	push	r23
    36e8:	8f 93       	push	r24
    36ea:	9f 93       	push	r25
    36ec:	af 93       	push	r26
    36ee:	bf 93       	push	r27
    36f0:	ef 93       	push	r30
    36f2:	ff 93       	push	r31
    36f4:	e0 91 51 22 	lds	r30, 0x2251
    36f8:	f0 91 52 22 	lds	r31, 0x2252
    36fc:	30 97       	sbiw	r30, 0x00	; 0
    36fe:	29 f0       	breq	.+10     	; 0x370a <__vector_85+0x3c>
    3700:	80 91 47 23 	lds	r24, 0x2347
    3704:	90 91 48 23 	lds	r25, 0x2348
    3708:	19 95       	eicall
    370a:	ff 91       	pop	r31
    370c:	ef 91       	pop	r30
    370e:	bf 91       	pop	r27
    3710:	af 91       	pop	r26
    3712:	9f 91       	pop	r25
    3714:	8f 91       	pop	r24
    3716:	7f 91       	pop	r23
    3718:	6f 91       	pop	r22
    371a:	5f 91       	pop	r21
    371c:	4f 91       	pop	r20
    371e:	3f 91       	pop	r19
    3720:	2f 91       	pop	r18
    3722:	0f 90       	pop	r0
    3724:	0b be       	out	0x3b, r0	; 59
    3726:	0f 90       	pop	r0
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	0f 90       	pop	r0
    372c:	1f 90       	pop	r1
    372e:	18 95       	reti

00003730 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    3730:	1f 92       	push	r1
    3732:	0f 92       	push	r0
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	0f 92       	push	r0
    3738:	11 24       	eor	r1, r1
    373a:	0b b6       	in	r0, 0x3b	; 59
    373c:	0f 92       	push	r0
    373e:	2f 93       	push	r18
    3740:	3f 93       	push	r19
    3742:	4f 93       	push	r20
    3744:	5f 93       	push	r21
    3746:	6f 93       	push	r22
    3748:	7f 93       	push	r23
    374a:	8f 93       	push	r24
    374c:	9f 93       	push	r25
    374e:	af 93       	push	r26
    3750:	bf 93       	push	r27
    3752:	ef 93       	push	r30
    3754:	ff 93       	push	r31
    3756:	e0 91 53 22 	lds	r30, 0x2253
    375a:	f0 91 54 22 	lds	r31, 0x2254
    375e:	30 97       	sbiw	r30, 0x00	; 0
    3760:	29 f0       	breq	.+10     	; 0x376c <__vector_86+0x3c>
    3762:	80 91 49 23 	lds	r24, 0x2349
    3766:	90 91 4a 23 	lds	r25, 0x234A
    376a:	19 95       	eicall
    376c:	ff 91       	pop	r31
    376e:	ef 91       	pop	r30
    3770:	bf 91       	pop	r27
    3772:	af 91       	pop	r26
    3774:	9f 91       	pop	r25
    3776:	8f 91       	pop	r24
    3778:	7f 91       	pop	r23
    377a:	6f 91       	pop	r22
    377c:	5f 91       	pop	r21
    377e:	4f 91       	pop	r20
    3780:	3f 91       	pop	r19
    3782:	2f 91       	pop	r18
    3784:	0f 90       	pop	r0
    3786:	0b be       	out	0x3b, r0	; 59
    3788:	0f 90       	pop	r0
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	0f 90       	pop	r0
    378e:	1f 90       	pop	r1
    3790:	18 95       	reti

00003792 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3792:	1f 92       	push	r1
    3794:	0f 92       	push	r0
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	0f 92       	push	r0
    379a:	11 24       	eor	r1, r1
    379c:	0b b6       	in	r0, 0x3b	; 59
    379e:	0f 92       	push	r0
    37a0:	2f 93       	push	r18
    37a2:	3f 93       	push	r19
    37a4:	4f 93       	push	r20
    37a6:	5f 93       	push	r21
    37a8:	6f 93       	push	r22
    37aa:	7f 93       	push	r23
    37ac:	8f 93       	push	r24
    37ae:	9f 93       	push	r25
    37b0:	af 93       	push	r26
    37b2:	bf 93       	push	r27
    37b4:	ef 93       	push	r30
    37b6:	ff 93       	push	r31
    37b8:	e0 91 55 22 	lds	r30, 0x2255
    37bc:	f0 91 56 22 	lds	r31, 0x2256
    37c0:	30 97       	sbiw	r30, 0x00	; 0
    37c2:	29 f0       	breq	.+10     	; 0x37ce <__vector_87+0x3c>
    37c4:	80 91 4b 23 	lds	r24, 0x234B
    37c8:	90 91 4c 23 	lds	r25, 0x234C
    37cc:	19 95       	eicall
    37ce:	ff 91       	pop	r31
    37d0:	ef 91       	pop	r30
    37d2:	bf 91       	pop	r27
    37d4:	af 91       	pop	r26
    37d6:	9f 91       	pop	r25
    37d8:	8f 91       	pop	r24
    37da:	7f 91       	pop	r23
    37dc:	6f 91       	pop	r22
    37de:	5f 91       	pop	r21
    37e0:	4f 91       	pop	r20
    37e2:	3f 91       	pop	r19
    37e4:	2f 91       	pop	r18
    37e6:	0f 90       	pop	r0
    37e8:	0b be       	out	0x3b, r0	; 59
    37ea:	0f 90       	pop	r0
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	0f 90       	pop	r0
    37f0:	1f 90       	pop	r1
    37f2:	18 95       	reti

000037f4 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    37f4:	1f 92       	push	r1
    37f6:	0f 92       	push	r0
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	0f 92       	push	r0
    37fc:	11 24       	eor	r1, r1
    37fe:	0b b6       	in	r0, 0x3b	; 59
    3800:	0f 92       	push	r0
    3802:	2f 93       	push	r18
    3804:	3f 93       	push	r19
    3806:	4f 93       	push	r20
    3808:	5f 93       	push	r21
    380a:	6f 93       	push	r22
    380c:	7f 93       	push	r23
    380e:	8f 93       	push	r24
    3810:	9f 93       	push	r25
    3812:	af 93       	push	r26
    3814:	bf 93       	push	r27
    3816:	ef 93       	push	r30
    3818:	ff 93       	push	r31
    381a:	e0 91 57 22 	lds	r30, 0x2257
    381e:	f0 91 58 22 	lds	r31, 0x2258
    3822:	30 97       	sbiw	r30, 0x00	; 0
    3824:	29 f0       	breq	.+10     	; 0x3830 <__vector_88+0x3c>
    3826:	80 91 4d 23 	lds	r24, 0x234D
    382a:	90 91 4e 23 	lds	r25, 0x234E
    382e:	19 95       	eicall
    3830:	ff 91       	pop	r31
    3832:	ef 91       	pop	r30
    3834:	bf 91       	pop	r27
    3836:	af 91       	pop	r26
    3838:	9f 91       	pop	r25
    383a:	8f 91       	pop	r24
    383c:	7f 91       	pop	r23
    383e:	6f 91       	pop	r22
    3840:	5f 91       	pop	r21
    3842:	4f 91       	pop	r20
    3844:	3f 91       	pop	r19
    3846:	2f 91       	pop	r18
    3848:	0f 90       	pop	r0
    384a:	0b be       	out	0x3b, r0	; 59
    384c:	0f 90       	pop	r0
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	0f 90       	pop	r0
    3852:	1f 90       	pop	r1
    3854:	18 95       	reti

00003856 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3856:	1f 92       	push	r1
    3858:	0f 92       	push	r0
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	0b b6       	in	r0, 0x3b	; 59
    3862:	0f 92       	push	r0
    3864:	2f 93       	push	r18
    3866:	3f 93       	push	r19
    3868:	4f 93       	push	r20
    386a:	5f 93       	push	r21
    386c:	6f 93       	push	r22
    386e:	7f 93       	push	r23
    3870:	8f 93       	push	r24
    3872:	9f 93       	push	r25
    3874:	af 93       	push	r26
    3876:	bf 93       	push	r27
    3878:	ef 93       	push	r30
    387a:	ff 93       	push	r31
    387c:	e0 91 59 22 	lds	r30, 0x2259
    3880:	f0 91 5a 22 	lds	r31, 0x225A
    3884:	30 97       	sbiw	r30, 0x00	; 0
    3886:	29 f0       	breq	.+10     	; 0x3892 <__vector_89+0x3c>
    3888:	80 91 4f 23 	lds	r24, 0x234F
    388c:	90 91 50 23 	lds	r25, 0x2350
    3890:	19 95       	eicall
    3892:	ff 91       	pop	r31
    3894:	ef 91       	pop	r30
    3896:	bf 91       	pop	r27
    3898:	af 91       	pop	r26
    389a:	9f 91       	pop	r25
    389c:	8f 91       	pop	r24
    389e:	7f 91       	pop	r23
    38a0:	6f 91       	pop	r22
    38a2:	5f 91       	pop	r21
    38a4:	4f 91       	pop	r20
    38a6:	3f 91       	pop	r19
    38a8:	2f 91       	pop	r18
    38aa:	0f 90       	pop	r0
    38ac:	0b be       	out	0x3b, r0	; 59
    38ae:	0f 90       	pop	r0
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	0f 90       	pop	r0
    38b4:	1f 90       	pop	r1
    38b6:	18 95       	reti

000038b8 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    38b8:	1f 92       	push	r1
    38ba:	0f 92       	push	r0
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	0f 92       	push	r0
    38c0:	11 24       	eor	r1, r1
    38c2:	0b b6       	in	r0, 0x3b	; 59
    38c4:	0f 92       	push	r0
    38c6:	2f 93       	push	r18
    38c8:	3f 93       	push	r19
    38ca:	4f 93       	push	r20
    38cc:	5f 93       	push	r21
    38ce:	6f 93       	push	r22
    38d0:	7f 93       	push	r23
    38d2:	8f 93       	push	r24
    38d4:	9f 93       	push	r25
    38d6:	af 93       	push	r26
    38d8:	bf 93       	push	r27
    38da:	ef 93       	push	r30
    38dc:	ff 93       	push	r31
    38de:	e0 91 5b 22 	lds	r30, 0x225B
    38e2:	f0 91 5c 22 	lds	r31, 0x225C
    38e6:	30 97       	sbiw	r30, 0x00	; 0
    38e8:	29 f0       	breq	.+10     	; 0x38f4 <__vector_90+0x3c>
    38ea:	80 91 51 23 	lds	r24, 0x2351
    38ee:	90 91 52 23 	lds	r25, 0x2352
    38f2:	19 95       	eicall
    38f4:	ff 91       	pop	r31
    38f6:	ef 91       	pop	r30
    38f8:	bf 91       	pop	r27
    38fa:	af 91       	pop	r26
    38fc:	9f 91       	pop	r25
    38fe:	8f 91       	pop	r24
    3900:	7f 91       	pop	r23
    3902:	6f 91       	pop	r22
    3904:	5f 91       	pop	r21
    3906:	4f 91       	pop	r20
    3908:	3f 91       	pop	r19
    390a:	2f 91       	pop	r18
    390c:	0f 90       	pop	r0
    390e:	0b be       	out	0x3b, r0	; 59
    3910:	0f 90       	pop	r0
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	0f 90       	pop	r0
    3916:	1f 90       	pop	r1
    3918:	18 95       	reti

0000391a <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    391a:	1f 92       	push	r1
    391c:	0f 92       	push	r0
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	0f 92       	push	r0
    3922:	11 24       	eor	r1, r1
    3924:	0b b6       	in	r0, 0x3b	; 59
    3926:	0f 92       	push	r0
    3928:	2f 93       	push	r18
    392a:	3f 93       	push	r19
    392c:	4f 93       	push	r20
    392e:	5f 93       	push	r21
    3930:	6f 93       	push	r22
    3932:	7f 93       	push	r23
    3934:	8f 93       	push	r24
    3936:	9f 93       	push	r25
    3938:	af 93       	push	r26
    393a:	bf 93       	push	r27
    393c:	ef 93       	push	r30
    393e:	ff 93       	push	r31
    3940:	e0 91 5d 22 	lds	r30, 0x225D
    3944:	f0 91 5e 22 	lds	r31, 0x225E
    3948:	30 97       	sbiw	r30, 0x00	; 0
    394a:	29 f0       	breq	.+10     	; 0x3956 <__vector_91+0x3c>
    394c:	80 91 53 23 	lds	r24, 0x2353
    3950:	90 91 54 23 	lds	r25, 0x2354
    3954:	19 95       	eicall
    3956:	ff 91       	pop	r31
    3958:	ef 91       	pop	r30
    395a:	bf 91       	pop	r27
    395c:	af 91       	pop	r26
    395e:	9f 91       	pop	r25
    3960:	8f 91       	pop	r24
    3962:	7f 91       	pop	r23
    3964:	6f 91       	pop	r22
    3966:	5f 91       	pop	r21
    3968:	4f 91       	pop	r20
    396a:	3f 91       	pop	r19
    396c:	2f 91       	pop	r18
    396e:	0f 90       	pop	r0
    3970:	0b be       	out	0x3b, r0	; 59
    3972:	0f 90       	pop	r0
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	0f 90       	pop	r0
    3978:	1f 90       	pop	r1
    397a:	18 95       	reti

0000397c <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    397c:	1f 92       	push	r1
    397e:	0f 92       	push	r0
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	0f 92       	push	r0
    3984:	11 24       	eor	r1, r1
    3986:	0b b6       	in	r0, 0x3b	; 59
    3988:	0f 92       	push	r0
    398a:	2f 93       	push	r18
    398c:	3f 93       	push	r19
    398e:	4f 93       	push	r20
    3990:	5f 93       	push	r21
    3992:	6f 93       	push	r22
    3994:	7f 93       	push	r23
    3996:	8f 93       	push	r24
    3998:	9f 93       	push	r25
    399a:	af 93       	push	r26
    399c:	bf 93       	push	r27
    399e:	ef 93       	push	r30
    39a0:	ff 93       	push	r31
    39a2:	e0 91 5f 22 	lds	r30, 0x225F
    39a6:	f0 91 60 22 	lds	r31, 0x2260
    39aa:	30 97       	sbiw	r30, 0x00	; 0
    39ac:	29 f0       	breq	.+10     	; 0x39b8 <__vector_92+0x3c>
    39ae:	80 91 55 23 	lds	r24, 0x2355
    39b2:	90 91 56 23 	lds	r25, 0x2356
    39b6:	19 95       	eicall
    39b8:	ff 91       	pop	r31
    39ba:	ef 91       	pop	r30
    39bc:	bf 91       	pop	r27
    39be:	af 91       	pop	r26
    39c0:	9f 91       	pop	r25
    39c2:	8f 91       	pop	r24
    39c4:	7f 91       	pop	r23
    39c6:	6f 91       	pop	r22
    39c8:	5f 91       	pop	r21
    39ca:	4f 91       	pop	r20
    39cc:	3f 91       	pop	r19
    39ce:	2f 91       	pop	r18
    39d0:	0f 90       	pop	r0
    39d2:	0b be       	out	0x3b, r0	; 59
    39d4:	0f 90       	pop	r0
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	0f 90       	pop	r0
    39da:	1f 90       	pop	r1
    39dc:	18 95       	reti

000039de <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    39de:	1f 92       	push	r1
    39e0:	0f 92       	push	r0
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	0f 92       	push	r0
    39e6:	11 24       	eor	r1, r1
    39e8:	0b b6       	in	r0, 0x3b	; 59
    39ea:	0f 92       	push	r0
    39ec:	2f 93       	push	r18
    39ee:	3f 93       	push	r19
    39f0:	4f 93       	push	r20
    39f2:	5f 93       	push	r21
    39f4:	6f 93       	push	r22
    39f6:	7f 93       	push	r23
    39f8:	8f 93       	push	r24
    39fa:	9f 93       	push	r25
    39fc:	af 93       	push	r26
    39fe:	bf 93       	push	r27
    3a00:	ef 93       	push	r30
    3a02:	ff 93       	push	r31
    3a04:	e0 91 61 22 	lds	r30, 0x2261
    3a08:	f0 91 62 22 	lds	r31, 0x2262
    3a0c:	30 97       	sbiw	r30, 0x00	; 0
    3a0e:	29 f0       	breq	.+10     	; 0x3a1a <__vector_93+0x3c>
    3a10:	80 91 57 23 	lds	r24, 0x2357
    3a14:	90 91 58 23 	lds	r25, 0x2358
    3a18:	19 95       	eicall
    3a1a:	ff 91       	pop	r31
    3a1c:	ef 91       	pop	r30
    3a1e:	bf 91       	pop	r27
    3a20:	af 91       	pop	r26
    3a22:	9f 91       	pop	r25
    3a24:	8f 91       	pop	r24
    3a26:	7f 91       	pop	r23
    3a28:	6f 91       	pop	r22
    3a2a:	5f 91       	pop	r21
    3a2c:	4f 91       	pop	r20
    3a2e:	3f 91       	pop	r19
    3a30:	2f 91       	pop	r18
    3a32:	0f 90       	pop	r0
    3a34:	0b be       	out	0x3b, r0	; 59
    3a36:	0f 90       	pop	r0
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	0f 90       	pop	r0
    3a3c:	1f 90       	pop	r1
    3a3e:	18 95       	reti

00003a40 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3a40:	1f 92       	push	r1
    3a42:	0f 92       	push	r0
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	0f 92       	push	r0
    3a48:	11 24       	eor	r1, r1
    3a4a:	0b b6       	in	r0, 0x3b	; 59
    3a4c:	0f 92       	push	r0
    3a4e:	2f 93       	push	r18
    3a50:	3f 93       	push	r19
    3a52:	4f 93       	push	r20
    3a54:	5f 93       	push	r21
    3a56:	6f 93       	push	r22
    3a58:	7f 93       	push	r23
    3a5a:	8f 93       	push	r24
    3a5c:	9f 93       	push	r25
    3a5e:	af 93       	push	r26
    3a60:	bf 93       	push	r27
    3a62:	ef 93       	push	r30
    3a64:	ff 93       	push	r31
    3a66:	e0 91 77 22 	lds	r30, 0x2277
    3a6a:	f0 91 78 22 	lds	r31, 0x2278
    3a6e:	30 97       	sbiw	r30, 0x00	; 0
    3a70:	29 f0       	breq	.+10     	; 0x3a7c <__vector_104+0x3c>
    3a72:	80 91 6d 23 	lds	r24, 0x236D
    3a76:	90 91 6e 23 	lds	r25, 0x236E
    3a7a:	19 95       	eicall
    3a7c:	ff 91       	pop	r31
    3a7e:	ef 91       	pop	r30
    3a80:	bf 91       	pop	r27
    3a82:	af 91       	pop	r26
    3a84:	9f 91       	pop	r25
    3a86:	8f 91       	pop	r24
    3a88:	7f 91       	pop	r23
    3a8a:	6f 91       	pop	r22
    3a8c:	5f 91       	pop	r21
    3a8e:	4f 91       	pop	r20
    3a90:	3f 91       	pop	r19
    3a92:	2f 91       	pop	r18
    3a94:	0f 90       	pop	r0
    3a96:	0b be       	out	0x3b, r0	; 59
    3a98:	0f 90       	pop	r0
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	0f 90       	pop	r0
    3a9e:	1f 90       	pop	r1
    3aa0:	18 95       	reti

00003aa2 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3aa2:	1f 92       	push	r1
    3aa4:	0f 92       	push	r0
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	0f 92       	push	r0
    3aaa:	11 24       	eor	r1, r1
    3aac:	0b b6       	in	r0, 0x3b	; 59
    3aae:	0f 92       	push	r0
    3ab0:	2f 93       	push	r18
    3ab2:	3f 93       	push	r19
    3ab4:	4f 93       	push	r20
    3ab6:	5f 93       	push	r21
    3ab8:	6f 93       	push	r22
    3aba:	7f 93       	push	r23
    3abc:	8f 93       	push	r24
    3abe:	9f 93       	push	r25
    3ac0:	af 93       	push	r26
    3ac2:	bf 93       	push	r27
    3ac4:	ef 93       	push	r30
    3ac6:	ff 93       	push	r31
    3ac8:	e0 91 79 22 	lds	r30, 0x2279
    3acc:	f0 91 7a 22 	lds	r31, 0x227A
    3ad0:	30 97       	sbiw	r30, 0x00	; 0
    3ad2:	29 f0       	breq	.+10     	; 0x3ade <__vector_105+0x3c>
    3ad4:	80 91 6f 23 	lds	r24, 0x236F
    3ad8:	90 91 70 23 	lds	r25, 0x2370
    3adc:	19 95       	eicall
    3ade:	ff 91       	pop	r31
    3ae0:	ef 91       	pop	r30
    3ae2:	bf 91       	pop	r27
    3ae4:	af 91       	pop	r26
    3ae6:	9f 91       	pop	r25
    3ae8:	8f 91       	pop	r24
    3aea:	7f 91       	pop	r23
    3aec:	6f 91       	pop	r22
    3aee:	5f 91       	pop	r21
    3af0:	4f 91       	pop	r20
    3af2:	3f 91       	pop	r19
    3af4:	2f 91       	pop	r18
    3af6:	0f 90       	pop	r0
    3af8:	0b be       	out	0x3b, r0	; 59
    3afa:	0f 90       	pop	r0
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	0f 90       	pop	r0
    3b00:	1f 90       	pop	r1
    3b02:	18 95       	reti

00003b04 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3b04:	1f 92       	push	r1
    3b06:	0f 92       	push	r0
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	0f 92       	push	r0
    3b0c:	11 24       	eor	r1, r1
    3b0e:	0b b6       	in	r0, 0x3b	; 59
    3b10:	0f 92       	push	r0
    3b12:	2f 93       	push	r18
    3b14:	3f 93       	push	r19
    3b16:	4f 93       	push	r20
    3b18:	5f 93       	push	r21
    3b1a:	6f 93       	push	r22
    3b1c:	7f 93       	push	r23
    3b1e:	8f 93       	push	r24
    3b20:	9f 93       	push	r25
    3b22:	af 93       	push	r26
    3b24:	bf 93       	push	r27
    3b26:	ef 93       	push	r30
    3b28:	ff 93       	push	r31
    3b2a:	e0 91 7f 22 	lds	r30, 0x227F
    3b2e:	f0 91 80 22 	lds	r31, 0x2280
    3b32:	30 97       	sbiw	r30, 0x00	; 0
    3b34:	29 f0       	breq	.+10     	; 0x3b40 <__vector_108+0x3c>
    3b36:	80 91 75 23 	lds	r24, 0x2375
    3b3a:	90 91 76 23 	lds	r25, 0x2376
    3b3e:	19 95       	eicall
    3b40:	ff 91       	pop	r31
    3b42:	ef 91       	pop	r30
    3b44:	bf 91       	pop	r27
    3b46:	af 91       	pop	r26
    3b48:	9f 91       	pop	r25
    3b4a:	8f 91       	pop	r24
    3b4c:	7f 91       	pop	r23
    3b4e:	6f 91       	pop	r22
    3b50:	5f 91       	pop	r21
    3b52:	4f 91       	pop	r20
    3b54:	3f 91       	pop	r19
    3b56:	2f 91       	pop	r18
    3b58:	0f 90       	pop	r0
    3b5a:	0b be       	out	0x3b, r0	; 59
    3b5c:	0f 90       	pop	r0
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	0f 90       	pop	r0
    3b62:	1f 90       	pop	r1
    3b64:	18 95       	reti

00003b66 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    3b66:	1f 92       	push	r1
    3b68:	0f 92       	push	r0
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	0f 92       	push	r0
    3b6e:	11 24       	eor	r1, r1
    3b70:	0b b6       	in	r0, 0x3b	; 59
    3b72:	0f 92       	push	r0
    3b74:	2f 93       	push	r18
    3b76:	3f 93       	push	r19
    3b78:	4f 93       	push	r20
    3b7a:	5f 93       	push	r21
    3b7c:	6f 93       	push	r22
    3b7e:	7f 93       	push	r23
    3b80:	8f 93       	push	r24
    3b82:	9f 93       	push	r25
    3b84:	af 93       	push	r26
    3b86:	bf 93       	push	r27
    3b88:	ef 93       	push	r30
    3b8a:	ff 93       	push	r31
    3b8c:	e0 91 81 22 	lds	r30, 0x2281
    3b90:	f0 91 82 22 	lds	r31, 0x2282
    3b94:	30 97       	sbiw	r30, 0x00	; 0
    3b96:	29 f0       	breq	.+10     	; 0x3ba2 <__vector_109+0x3c>
    3b98:	80 91 77 23 	lds	r24, 0x2377
    3b9c:	90 91 78 23 	lds	r25, 0x2378
    3ba0:	19 95       	eicall
    3ba2:	ff 91       	pop	r31
    3ba4:	ef 91       	pop	r30
    3ba6:	bf 91       	pop	r27
    3ba8:	af 91       	pop	r26
    3baa:	9f 91       	pop	r25
    3bac:	8f 91       	pop	r24
    3bae:	7f 91       	pop	r23
    3bb0:	6f 91       	pop	r22
    3bb2:	5f 91       	pop	r21
    3bb4:	4f 91       	pop	r20
    3bb6:	3f 91       	pop	r19
    3bb8:	2f 91       	pop	r18
    3bba:	0f 90       	pop	r0
    3bbc:	0b be       	out	0x3b, r0	; 59
    3bbe:	0f 90       	pop	r0
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	0f 90       	pop	r0
    3bc4:	1f 90       	pop	r1
    3bc6:	18 95       	reti

00003bc8 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3bc8:	1f 92       	push	r1
    3bca:	0f 92       	push	r0
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	0f 92       	push	r0
    3bd0:	11 24       	eor	r1, r1
    3bd2:	0b b6       	in	r0, 0x3b	; 59
    3bd4:	0f 92       	push	r0
    3bd6:	2f 93       	push	r18
    3bd8:	3f 93       	push	r19
    3bda:	4f 93       	push	r20
    3bdc:	5f 93       	push	r21
    3bde:	6f 93       	push	r22
    3be0:	7f 93       	push	r23
    3be2:	8f 93       	push	r24
    3be4:	9f 93       	push	r25
    3be6:	af 93       	push	r26
    3be8:	bf 93       	push	r27
    3bea:	ef 93       	push	r30
    3bec:	ff 93       	push	r31
    3bee:	e0 91 83 22 	lds	r30, 0x2283
    3bf2:	f0 91 84 22 	lds	r31, 0x2284
    3bf6:	30 97       	sbiw	r30, 0x00	; 0
    3bf8:	29 f0       	breq	.+10     	; 0x3c04 <__vector_110+0x3c>
    3bfa:	80 91 79 23 	lds	r24, 0x2379
    3bfe:	90 91 7a 23 	lds	r25, 0x237A
    3c02:	19 95       	eicall
    3c04:	ff 91       	pop	r31
    3c06:	ef 91       	pop	r30
    3c08:	bf 91       	pop	r27
    3c0a:	af 91       	pop	r26
    3c0c:	9f 91       	pop	r25
    3c0e:	8f 91       	pop	r24
    3c10:	7f 91       	pop	r23
    3c12:	6f 91       	pop	r22
    3c14:	5f 91       	pop	r21
    3c16:	4f 91       	pop	r20
    3c18:	3f 91       	pop	r19
    3c1a:	2f 91       	pop	r18
    3c1c:	0f 90       	pop	r0
    3c1e:	0b be       	out	0x3b, r0	; 59
    3c20:	0f 90       	pop	r0
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	0f 90       	pop	r0
    3c26:	1f 90       	pop	r1
    3c28:	18 95       	reti

00003c2a <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3c2a:	1f 92       	push	r1
    3c2c:	0f 92       	push	r0
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	0f 92       	push	r0
    3c32:	11 24       	eor	r1, r1
    3c34:	0b b6       	in	r0, 0x3b	; 59
    3c36:	0f 92       	push	r0
    3c38:	2f 93       	push	r18
    3c3a:	3f 93       	push	r19
    3c3c:	4f 93       	push	r20
    3c3e:	5f 93       	push	r21
    3c40:	6f 93       	push	r22
    3c42:	7f 93       	push	r23
    3c44:	8f 93       	push	r24
    3c46:	9f 93       	push	r25
    3c48:	af 93       	push	r26
    3c4a:	bf 93       	push	r27
    3c4c:	ef 93       	push	r30
    3c4e:	ff 93       	push	r31
    3c50:	e0 91 85 22 	lds	r30, 0x2285
    3c54:	f0 91 86 22 	lds	r31, 0x2286
    3c58:	30 97       	sbiw	r30, 0x00	; 0
    3c5a:	29 f0       	breq	.+10     	; 0x3c66 <__vector_111+0x3c>
    3c5c:	80 91 7b 23 	lds	r24, 0x237B
    3c60:	90 91 7c 23 	lds	r25, 0x237C
    3c64:	19 95       	eicall
    3c66:	ff 91       	pop	r31
    3c68:	ef 91       	pop	r30
    3c6a:	bf 91       	pop	r27
    3c6c:	af 91       	pop	r26
    3c6e:	9f 91       	pop	r25
    3c70:	8f 91       	pop	r24
    3c72:	7f 91       	pop	r23
    3c74:	6f 91       	pop	r22
    3c76:	5f 91       	pop	r21
    3c78:	4f 91       	pop	r20
    3c7a:	3f 91       	pop	r19
    3c7c:	2f 91       	pop	r18
    3c7e:	0f 90       	pop	r0
    3c80:	0b be       	out	0x3b, r0	; 59
    3c82:	0f 90       	pop	r0
    3c84:	0f be       	out	0x3f, r0	; 63
    3c86:	0f 90       	pop	r0
    3c88:	1f 90       	pop	r1
    3c8a:	18 95       	reti

00003c8c <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3c8c:	1f 92       	push	r1
    3c8e:	0f 92       	push	r0
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	0f 92       	push	r0
    3c94:	11 24       	eor	r1, r1
    3c96:	0b b6       	in	r0, 0x3b	; 59
    3c98:	0f 92       	push	r0
    3c9a:	2f 93       	push	r18
    3c9c:	3f 93       	push	r19
    3c9e:	4f 93       	push	r20
    3ca0:	5f 93       	push	r21
    3ca2:	6f 93       	push	r22
    3ca4:	7f 93       	push	r23
    3ca6:	8f 93       	push	r24
    3ca8:	9f 93       	push	r25
    3caa:	af 93       	push	r26
    3cac:	bf 93       	push	r27
    3cae:	ef 93       	push	r30
    3cb0:	ff 93       	push	r31
    3cb2:	e0 91 87 22 	lds	r30, 0x2287
    3cb6:	f0 91 88 22 	lds	r31, 0x2288
    3cba:	30 97       	sbiw	r30, 0x00	; 0
    3cbc:	29 f0       	breq	.+10     	; 0x3cc8 <__vector_112+0x3c>
    3cbe:	80 91 7d 23 	lds	r24, 0x237D
    3cc2:	90 91 7e 23 	lds	r25, 0x237E
    3cc6:	19 95       	eicall
    3cc8:	ff 91       	pop	r31
    3cca:	ef 91       	pop	r30
    3ccc:	bf 91       	pop	r27
    3cce:	af 91       	pop	r26
    3cd0:	9f 91       	pop	r25
    3cd2:	8f 91       	pop	r24
    3cd4:	7f 91       	pop	r23
    3cd6:	6f 91       	pop	r22
    3cd8:	5f 91       	pop	r21
    3cda:	4f 91       	pop	r20
    3cdc:	3f 91       	pop	r19
    3cde:	2f 91       	pop	r18
    3ce0:	0f 90       	pop	r0
    3ce2:	0b be       	out	0x3b, r0	; 59
    3ce4:	0f 90       	pop	r0
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	0f 90       	pop	r0
    3cea:	1f 90       	pop	r1
    3cec:	18 95       	reti

00003cee <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3cee:	1f 92       	push	r1
    3cf0:	0f 92       	push	r0
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	0f 92       	push	r0
    3cf6:	11 24       	eor	r1, r1
    3cf8:	0b b6       	in	r0, 0x3b	; 59
    3cfa:	0f 92       	push	r0
    3cfc:	2f 93       	push	r18
    3cfe:	3f 93       	push	r19
    3d00:	4f 93       	push	r20
    3d02:	5f 93       	push	r21
    3d04:	6f 93       	push	r22
    3d06:	7f 93       	push	r23
    3d08:	8f 93       	push	r24
    3d0a:	9f 93       	push	r25
    3d0c:	af 93       	push	r26
    3d0e:	bf 93       	push	r27
    3d10:	ef 93       	push	r30
    3d12:	ff 93       	push	r31
    3d14:	e0 91 89 22 	lds	r30, 0x2289
    3d18:	f0 91 8a 22 	lds	r31, 0x228A
    3d1c:	30 97       	sbiw	r30, 0x00	; 0
    3d1e:	29 f0       	breq	.+10     	; 0x3d2a <__vector_113+0x3c>
    3d20:	80 91 7f 23 	lds	r24, 0x237F
    3d24:	90 91 80 23 	lds	r25, 0x2380
    3d28:	19 95       	eicall
    3d2a:	ff 91       	pop	r31
    3d2c:	ef 91       	pop	r30
    3d2e:	bf 91       	pop	r27
    3d30:	af 91       	pop	r26
    3d32:	9f 91       	pop	r25
    3d34:	8f 91       	pop	r24
    3d36:	7f 91       	pop	r23
    3d38:	6f 91       	pop	r22
    3d3a:	5f 91       	pop	r21
    3d3c:	4f 91       	pop	r20
    3d3e:	3f 91       	pop	r19
    3d40:	2f 91       	pop	r18
    3d42:	0f 90       	pop	r0
    3d44:	0b be       	out	0x3b, r0	; 59
    3d46:	0f 90       	pop	r0
    3d48:	0f be       	out	0x3f, r0	; 63
    3d4a:	0f 90       	pop	r0
    3d4c:	1f 90       	pop	r1
    3d4e:	18 95       	reti

00003d50 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3d50:	1f 92       	push	r1
    3d52:	0f 92       	push	r0
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	0f 92       	push	r0
    3d58:	11 24       	eor	r1, r1
    3d5a:	0b b6       	in	r0, 0x3b	; 59
    3d5c:	0f 92       	push	r0
    3d5e:	2f 93       	push	r18
    3d60:	3f 93       	push	r19
    3d62:	4f 93       	push	r20
    3d64:	5f 93       	push	r21
    3d66:	6f 93       	push	r22
    3d68:	7f 93       	push	r23
    3d6a:	8f 93       	push	r24
    3d6c:	9f 93       	push	r25
    3d6e:	af 93       	push	r26
    3d70:	bf 93       	push	r27
    3d72:	ef 93       	push	r30
    3d74:	ff 93       	push	r31
    3d76:	e0 91 95 22 	lds	r30, 0x2295
    3d7a:	f0 91 96 22 	lds	r31, 0x2296
    3d7e:	30 97       	sbiw	r30, 0x00	; 0
    3d80:	29 f0       	breq	.+10     	; 0x3d8c <__vector_119+0x3c>
    3d82:	80 91 8b 23 	lds	r24, 0x238B
    3d86:	90 91 8c 23 	lds	r25, 0x238C
    3d8a:	19 95       	eicall
    3d8c:	ff 91       	pop	r31
    3d8e:	ef 91       	pop	r30
    3d90:	bf 91       	pop	r27
    3d92:	af 91       	pop	r26
    3d94:	9f 91       	pop	r25
    3d96:	8f 91       	pop	r24
    3d98:	7f 91       	pop	r23
    3d9a:	6f 91       	pop	r22
    3d9c:	5f 91       	pop	r21
    3d9e:	4f 91       	pop	r20
    3da0:	3f 91       	pop	r19
    3da2:	2f 91       	pop	r18
    3da4:	0f 90       	pop	r0
    3da6:	0b be       	out	0x3b, r0	; 59
    3da8:	0f 90       	pop	r0
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	0f 90       	pop	r0
    3dae:	1f 90       	pop	r1
    3db0:	18 95       	reti

00003db2 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3db2:	1f 92       	push	r1
    3db4:	0f 92       	push	r0
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	0f 92       	push	r0
    3dba:	11 24       	eor	r1, r1
    3dbc:	0b b6       	in	r0, 0x3b	; 59
    3dbe:	0f 92       	push	r0
    3dc0:	2f 93       	push	r18
    3dc2:	3f 93       	push	r19
    3dc4:	4f 93       	push	r20
    3dc6:	5f 93       	push	r21
    3dc8:	6f 93       	push	r22
    3dca:	7f 93       	push	r23
    3dcc:	8f 93       	push	r24
    3dce:	9f 93       	push	r25
    3dd0:	af 93       	push	r26
    3dd2:	bf 93       	push	r27
    3dd4:	ef 93       	push	r30
    3dd6:	ff 93       	push	r31
    3dd8:	e0 91 97 22 	lds	r30, 0x2297
    3ddc:	f0 91 98 22 	lds	r31, 0x2298
    3de0:	30 97       	sbiw	r30, 0x00	; 0
    3de2:	29 f0       	breq	.+10     	; 0x3dee <__vector_120+0x3c>
    3de4:	80 91 8d 23 	lds	r24, 0x238D
    3de8:	90 91 8e 23 	lds	r25, 0x238E
    3dec:	19 95       	eicall
    3dee:	ff 91       	pop	r31
    3df0:	ef 91       	pop	r30
    3df2:	bf 91       	pop	r27
    3df4:	af 91       	pop	r26
    3df6:	9f 91       	pop	r25
    3df8:	8f 91       	pop	r24
    3dfa:	7f 91       	pop	r23
    3dfc:	6f 91       	pop	r22
    3dfe:	5f 91       	pop	r21
    3e00:	4f 91       	pop	r20
    3e02:	3f 91       	pop	r19
    3e04:	2f 91       	pop	r18
    3e06:	0f 90       	pop	r0
    3e08:	0b be       	out	0x3b, r0	; 59
    3e0a:	0f 90       	pop	r0
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	0f 90       	pop	r0
    3e10:	1f 90       	pop	r1
    3e12:	18 95       	reti

00003e14 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3e14:	1f 92       	push	r1
    3e16:	0f 92       	push	r0
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	0f 92       	push	r0
    3e1c:	11 24       	eor	r1, r1
    3e1e:	0b b6       	in	r0, 0x3b	; 59
    3e20:	0f 92       	push	r0
    3e22:	2f 93       	push	r18
    3e24:	3f 93       	push	r19
    3e26:	4f 93       	push	r20
    3e28:	5f 93       	push	r21
    3e2a:	6f 93       	push	r22
    3e2c:	7f 93       	push	r23
    3e2e:	8f 93       	push	r24
    3e30:	9f 93       	push	r25
    3e32:	af 93       	push	r26
    3e34:	bf 93       	push	r27
    3e36:	ef 93       	push	r30
    3e38:	ff 93       	push	r31
    3e3a:	e0 91 99 22 	lds	r30, 0x2299
    3e3e:	f0 91 9a 22 	lds	r31, 0x229A
    3e42:	30 97       	sbiw	r30, 0x00	; 0
    3e44:	29 f0       	breq	.+10     	; 0x3e50 <__vector_121+0x3c>
    3e46:	80 91 8f 23 	lds	r24, 0x238F
    3e4a:	90 91 90 23 	lds	r25, 0x2390
    3e4e:	19 95       	eicall
    3e50:	ff 91       	pop	r31
    3e52:	ef 91       	pop	r30
    3e54:	bf 91       	pop	r27
    3e56:	af 91       	pop	r26
    3e58:	9f 91       	pop	r25
    3e5a:	8f 91       	pop	r24
    3e5c:	7f 91       	pop	r23
    3e5e:	6f 91       	pop	r22
    3e60:	5f 91       	pop	r21
    3e62:	4f 91       	pop	r20
    3e64:	3f 91       	pop	r19
    3e66:	2f 91       	pop	r18
    3e68:	0f 90       	pop	r0
    3e6a:	0b be       	out	0x3b, r0	; 59
    3e6c:	0f 90       	pop	r0
    3e6e:	0f be       	out	0x3f, r0	; 63
    3e70:	0f 90       	pop	r0
    3e72:	1f 90       	pop	r1
    3e74:	18 95       	reti

00003e76 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    3e76:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    3e7a:	fd cf       	rjmp	.-6      	; 0x3e76 <__cxa_pure_virtual>

00003e7c <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3e7c:	84 e8       	ldi	r24, 0x84	; 132
    3e7e:	94 e2       	ldi	r25, 0x24	; 36
    3e80:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN4CSPIC1Ev>
CTimerD timeout;
    3e84:	81 e8       	ldi	r24, 0x81	; 129
    3e86:	94 e2       	ldi	r25, 0x24	; 36
    3e88:	0e 94 7e 29 	call	0x52fc	; 0x52fc <_ZN7CTimerDC1Ev>
CTimerC1 flowtimer;
    3e8c:	8e e7       	ldi	r24, 0x7E	; 126
    3e8e:	94 e2       	ldi	r25, 0x24	; 36
    3e90:	0e 94 a7 28 	call	0x514e	; 0x514e <_ZN8CTimerC1C1Ev>
CTimerD1 pwmtimer;
    3e94:	8b e7       	ldi	r24, 0x7B	; 123
    3e96:	94 e2       	ldi	r25, 0x24	; 36
    3e98:	0e 94 2d 2a 	call	0x545a	; 0x545a <_ZN8CTimerD1C1Ev>
CDGUSUSART usart;
    3e9c:	89 e7       	ldi	r24, 0x79	; 121
    3e9e:	94 e2       	ldi	r25, 0x24	; 36
    3ea0:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    3ea4:	81 e7       	ldi	r24, 0x71	; 113
    3ea6:	94 e2       	ldi	r25, 0x24	; 36
    3ea8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    3eac:	84 e5       	ldi	r24, 0x54	; 84
    3eae:	94 e2       	ldi	r25, 0x24	; 36
    3eb0:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3eb4:	8a e4       	ldi	r24, 0x4A	; 74
    3eb6:	94 e2       	ldi	r25, 0x24	; 36
    3eb8:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    3ebc:	89 e4       	ldi	r24, 0x49	; 73
    3ebe:	94 e2       	ldi	r25, 0x24	; 36
    3ec0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3ec4:	8a ed       	ldi	r24, 0xDA	; 218
    3ec6:	93 e2       	ldi	r25, 0x23	; 35
    3ec8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    3ecc:	89 ed       	ldi	r24, 0xD9	; 217
    3ece:	93 e2       	ldi	r25, 0x23	; 35
    3ed0:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <_ZN8CDS18B20C1Ev>
    3ed4:	08 95       	ret

00003ed6 <_GLOBAL__sub_D_dacSPI>:
    3ed6:	89 ed       	ldi	r24, 0xD9	; 217
    3ed8:	93 e2       	ldi	r25, 0x23	; 35
    3eda:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    3ede:	8a ed       	ldi	r24, 0xDA	; 218
    3ee0:	93 e2       	ldi	r25, 0x23	; 35
    3ee2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN16CLaserControlAppD1Ev>
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3ee6:	89 e4       	ldi	r24, 0x49	; 73
    3ee8:	94 e2       	ldi	r25, 0x24	; 36
    3eea:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    3eee:	8a e4       	ldi	r24, 0x4A	; 74
    3ef0:	94 e2       	ldi	r25, 0x24	; 36
    3ef2:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZN11CLaserBoardD1Ev>
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    3ef6:	84 e5       	ldi	r24, 0x54	; 84
    3ef8:	94 e2       	ldi	r25, 0x24	; 36
    3efa:	0e 94 60 22 	call	0x44c0	; 0x44c0 <_ZN9CMBSenderD1Ev>
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
    3efe:	81 e7       	ldi	r24, 0x71	; 113
    3f00:	94 e2       	ldi	r25, 0x24	; 36
    3f02:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_ZN13CDGUSDatabaseD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
    3f06:	89 e7       	ldi	r24, 0x79	; 121
    3f08:	94 e2       	ldi	r25, 0x24	; 36
    3f0a:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <_ZN10CDGUSUSARTD1Ev>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
    3f0e:	8b e7       	ldi	r24, 0x7B	; 123
    3f10:	94 e2       	ldi	r25, 0x24	; 36
    3f12:	0e 94 39 2a 	call	0x5472	; 0x5472 <_ZN8CTimerD1D1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
    3f16:	8e e7       	ldi	r24, 0x7E	; 126
    3f18:	94 e2       	ldi	r25, 0x24	; 36
    3f1a:	0e 94 b3 28 	call	0x5166	; 0x5166 <_ZN8CTimerC1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
    3f1e:	81 e8       	ldi	r24, 0x81	; 129
    3f20:	94 e2       	ldi	r25, 0x24	; 36
    3f22:	0e 94 8a 29 	call	0x5314	; 0x5314 <_ZN7CTimerDD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3f26:	84 e8       	ldi	r24, 0x84	; 132
    3f28:	94 e2       	ldi	r25, 0x24	; 36
    3f2a:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN4CSPID1Ev>
    3f2e:	08 95       	ret

00003f30 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3f30:	cf 92       	push	r12
    3f32:	df 92       	push	r13
    3f34:	ef 92       	push	r14
    3f36:	ff 92       	push	r15
    3f38:	0f 93       	push	r16
    3f3a:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    3f3c:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    3f3e:	84 e6       	ldi	r24, 0x64	; 100
    3f40:	80 93 80 01 	sts	0x0180, r24
	
	// Initialize modules
	laserBoard.InitializeIO();
    3f44:	8a e4       	ldi	r24, 0x4A	; 74
    3f46:	94 e2       	ldi	r25, 0x24	; 36
    3f48:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    3f4c:	89 ed       	ldi	r24, 0xD9	; 217
    3f4e:	93 e2       	ldi	r25, 0x23	; 35
    3f50:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    3f54:	89 e4       	ldi	r24, 0x49	; 73
    3f56:	94 e2       	ldi	r25, 0x24	; 36
    3f58:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN12CSoundPlayer10InitializeEv>
	// TimerD0
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    3f5c:	47 e0       	ldi	r20, 0x07	; 7
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	81 e8       	ldi	r24, 0x81	; 129
    3f62:	94 e2       	ldi	r25, 0x24	; 36
    3f64:	0e 94 bb 28 	call	0x5176	; 0x5176 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    3f68:	62 e1       	ldi	r22, 0x12	; 18
    3f6a:	7a e7       	ldi	r23, 0x7A	; 122
    3f6c:	81 e8       	ldi	r24, 0x81	; 129
    3f6e:	94 e2       	ldi	r25, 0x24	; 36
    3f70:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <_ZN7CTimerD9SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    3f74:	48 e0       	ldi	r20, 0x08	; 8
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	8e e7       	ldi	r24, 0x7E	; 126
    3f7a:	94 e2       	ldi	r25, 0x24	; 36
    3f7c:	0e 94 0c 28 	call	0x5018	; 0x5018 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    3f80:	6f ef       	ldi	r22, 0xFF	; 255
    3f82:	7f ef       	ldi	r23, 0xFF	; 255
    3f84:	8e e7       	ldi	r24, 0x7E	; 126
    3f86:	94 e2       	ldi	r25, 0x24	; 36
    3f88:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    3f8c:	6f ef       	ldi	r22, 0xFF	; 255
    3f8e:	7f ef       	ldi	r23, 0xFF	; 255
    3f90:	8e e7       	ldi	r24, 0x7E	; 126
    3f92:	94 e2       	ldi	r25, 0x24	; 36
    3f94:	0e 94 23 28 	call	0x5046	; 0x5046 <_ZN8CTimerC15StartEj>
	// TimerD1
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);
    3f98:	45 e0       	ldi	r20, 0x05	; 5
    3f9a:	63 e0       	ldi	r22, 0x03	; 3
    3f9c:	8b e7       	ldi	r24, 0x7B	; 123
    3f9e:	94 e2       	ldi	r25, 0x24	; 36
    3fa0:	0e 94 92 29 	call	0x5324	; 0x5324 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.Start(1024);
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	74 e0       	ldi	r23, 0x04	; 4
    3fa8:	8b e7       	ldi	r24, 0x7B	; 123
    3faa:	94 e2       	ldi	r25, 0x24	; 36
    3fac:	0e 94 a9 29 	call	0x5352	; 0x5352 <_ZN8CTimerD15StartEj>
	pwmtimer.SetCOMPA(512);
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	72 e0       	ldi	r23, 0x02	; 2
    3fb4:	8b e7       	ldi	r24, 0x7B	; 123
    3fb6:	94 e2       	ldi	r25, 0x24	; 36
    3fb8:	0e 94 db 29 	call	0x53b6	; 0x53b6 <_ZN8CTimerD18SetCOMPAEj>
	pwmtimer.EnableChannel(TIMER_CHANNEL_A);
    3fbc:	60 e1       	ldi	r22, 0x10	; 16
    3fbe:	8b e7       	ldi	r24, 0x7B	; 123
    3fc0:	94 e2       	ldi	r25, 0x24	; 36
    3fc2:	0e 94 c8 29 	call	0x5390	; 0x5390 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    3fc6:	21 e0       	ldi	r18, 0x01	; 1
    3fc8:	4a ed       	ldi	r20, 0xDA	; 218
    3fca:	53 e2       	ldi	r21, 0x23	; 35
    3fcc:	6e e1       	ldi	r22, 0x1E	; 30
    3fce:	76 e0       	ldi	r23, 0x06	; 6
    3fd0:	8b e7       	ldi	r24, 0x7B	; 123
    3fd2:	94 e2       	ldi	r25, 0x24	; 36
    3fd4:	0e 94 e5 29 	call	0x53ca	; 0x53ca <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    3fd8:	21 e0       	ldi	r18, 0x01	; 1
    3fda:	4a ed       	ldi	r20, 0xDA	; 218
    3fdc:	53 e2       	ldi	r21, 0x23	; 35
    3fde:	63 e2       	ldi	r22, 0x23	; 35
    3fe0:	76 e0       	ldi	r23, 0x06	; 6
    3fe2:	8b e7       	ldi	r24, 0x7B	; 123
    3fe4:	94 e2       	ldi	r25, 0x24	; 36
    3fe6:	0e 94 09 2a 	call	0x5412	; 0x5412 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    3fea:	0f 2e       	mov	r0, r31
    3fec:	f3 e0       	ldi	r31, 0x03	; 3
    3fee:	ef 2e       	mov	r14, r31
    3ff0:	f0 2d       	mov	r31, r0
    3ff2:	00 e0       	ldi	r16, 0x00	; 0
    3ff4:	23 e0       	ldi	r18, 0x03	; 3
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	61 e0       	ldi	r22, 0x01	; 1
    3ffa:	84 e8       	ldi	r24, 0x84	; 132
    3ffc:	94 e2       	ldi	r25, 0x24	; 36
    3ffe:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4002:	01 e0       	ldi	r16, 0x01	; 1
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	40 e0       	ldi	r20, 0x00	; 0
    4008:	6d e0       	ldi	r22, 0x0D	; 13
    400a:	89 e7       	ldi	r24, 0x79	; 121
    400c:	94 e2       	ldi	r25, 0x24	; 36
    400e:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4012:	0f 2e       	mov	r0, r31
    4014:	f2 e1       	ldi	r31, 0x12	; 18
    4016:	cf 2e       	mov	r12, r31
    4018:	fa e7       	ldi	r31, 0x7A	; 122
    401a:	df 2e       	mov	r13, r31
    401c:	f0 2d       	mov	r31, r0
    401e:	e1 2c       	mov	r14, r1
    4020:	ff 24       	eor	r15, r15
    4022:	f3 94       	inc	r15
    4024:	00 e0       	ldi	r16, 0x00	; 0
    4026:	11 e0       	ldi	r17, 0x01	; 1
    4028:	2a ed       	ldi	r18, 0xDA	; 218
    402a:	33 e2       	ldi	r19, 0x23	; 35
    402c:	49 e7       	ldi	r20, 0x79	; 121
    402e:	54 e2       	ldi	r21, 0x24	; 36
    4030:	61 e8       	ldi	r22, 0x81	; 129
    4032:	74 e2       	ldi	r23, 0x24	; 36
    4034:	84 e5       	ldi	r24, 0x54	; 84
    4036:	94 e2       	ldi	r25, 0x24	; 36
    4038:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	51 e0       	ldi	r21, 0x01	; 1
    4040:	64 e5       	ldi	r22, 0x54	; 84
    4042:	74 e2       	ldi	r23, 0x24	; 36
    4044:	81 e7       	ldi	r24, 0x71	; 113
    4046:	94 e2       	ldi	r25, 0x24	; 36
    4048:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    404c:	64 e5       	ldi	r22, 0x54	; 84
    404e:	74 e2       	ldi	r23, 0x24	; 36
    4050:	8a ed       	ldi	r24, 0xDA	; 218
    4052:	93 e2       	ldi	r25, 0x23	; 35
    4054:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4058:	8a e4       	ldi	r24, 0x4A	; 74
    405a:	94 e2       	ldi	r25, 0x24	; 36
    405c:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4060:	8a ed       	ldi	r24, 0xDA	; 218
    4062:	93 e2       	ldi	r25, 0x23	; 35
    4064:	80 93 a1 22 	sts	0x22A1, r24
    4068:	90 93 a2 22 	sts	0x22A2, r25
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    406c:	80 ee       	ldi	r24, 0xE0	; 224
    406e:	9a e0       	ldi	r25, 0x0A	; 10
    4070:	80 93 ab 21 	sts	0x21AB, r24
    4074:	90 93 ac 21 	sts	0x21AC, r25
	
	sei();	/* Enable global interrupts */
    4078:	78 94       	sei
}
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	08 95       	ret

00004088 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	60 97       	sbiw	r28, 0x10	; 16
    4092:	cd bf       	out	0x3d, r28	; 61
    4094:	de bf       	out	0x3e, r29	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4096:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_Z16SystemInitializev>
	
	float x = 0.0f;
	char empty_name[] = "Empty\0";
    409a:	87 e0       	ldi	r24, 0x07	; 7
    409c:	e6 e4       	ldi	r30, 0x46	; 70
    409e:	f0 e2       	ldi	r31, 0x20	; 32
    40a0:	de 01       	movw	r26, r28
    40a2:	18 96       	adiw	r26, 0x08	; 8
    40a4:	01 90       	ld	r0, Z+
    40a6:	0d 92       	st	X+, r0
    40a8:	8a 95       	dec	r24
    40aa:	e1 f7       	brne	.-8      	; 0x40a4 <main+0x1c>
	char empty_time[] = "00:00\0";
    40ac:	87 e0       	ldi	r24, 0x07	; 7
    40ae:	ed e4       	ldi	r30, 0x4D	; 77
    40b0:	f0 e2       	ldi	r31, 0x20	; 32
    40b2:	de 01       	movw	r26, r28
    40b4:	11 96       	adiw	r26, 0x01	; 1
    40b6:	01 90       	ld	r0, Z+
    40b8:	0d 92       	st	X+, r0
    40ba:	8a 95       	dec	r24
    40bc:	e1 f7       	brne	.-8      	; 0x40b6 <main+0x2e>
	
	empty_record.ID = 0;
    40be:	10 92 93 23 	sts	0x2393, r1
    40c2:	10 92 94 23 	sts	0x2394, r1
	ConvertData(empty_record.Name, empty_name, 6, 0);
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	46 e0       	ldi	r20, 0x06	; 6
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	be 01       	movw	r22, r28
    40d0:	68 5f       	subi	r22, 0xF8	; 248
    40d2:	7f 4f       	sbci	r23, 0xFF	; 255
    40d4:	85 e9       	ldi	r24, 0x95	; 149
    40d6:	93 e2       	ldi	r25, 0x23	; 35
    40d8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_Z11ConvertDataPvS_jj>
	ConvertData(empty_record.Time, empty_time, 6, 0);
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	46 e0       	ldi	r20, 0x06	; 6
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	be 01       	movw	r22, r28
    40e6:	6f 5f       	subi	r22, 0xFF	; 255
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ea:	85 eb       	ldi	r24, 0xB5	; 181
    40ec:	93 e2       	ldi	r25, 0x23	; 35
    40ee:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_Z11ConvertDataPvS_jj>
	empty_record.Power = 0;
    40f2:	10 92 d5 23 	sts	0x23D5, r1
    40f6:	10 92 d6 23 	sts	0x23D6, r1
    40fa:	2f ef       	ldi	r18, 0xFF	; 255
    40fc:	33 e2       	ldi	r19, 0x23	; 35
    40fe:	84 ef       	ldi	r24, 0xF4	; 244
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	21 50       	subi	r18, 0x01	; 1
    4104:	30 40       	sbci	r19, 0x00	; 0
    4106:	80 40       	sbci	r24, 0x00	; 0
    4108:	90 40       	sbci	r25, 0x00	; 0
    410a:	d9 f7       	brne	.-10     	; 0x4102 <main+0x7a>
    410c:	00 c0       	rjmp	.+0      	; 0x410e <main+0x86>
    410e:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(3000);
	laserBoard.Relay1On();
    4110:	8a e4       	ldi	r24, 0x4A	; 74
    4112:	94 e2       	ldi	r25, 0x24	; 36
    4114:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <_ZN11CLaserBoard8Relay1OnEv>
    4118:	ef ef       	ldi	r30, 0xFF	; 255
    411a:	f3 ec       	ldi	r31, 0xC3	; 195
    411c:	29 e0       	ldi	r18, 0x09	; 9
    411e:	e1 50       	subi	r30, 0x01	; 1
    4120:	f0 40       	sbci	r31, 0x00	; 0
    4122:	20 40       	sbci	r18, 0x00	; 0
    4124:	e1 f7       	brne	.-8      	; 0x411e <main+0x96>
    4126:	00 c0       	rjmp	.+0      	; 0x4128 <main+0xa0>
    4128:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    412a:	1f 86       	std	Y+15, r1	; 0x0f
    412c:	18 8a       	std	Y+16, r1	; 0x10
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    412e:	42 e0       	ldi	r20, 0x02	; 2
    4130:	50 e0       	ldi	r21, 0x00	; 0
    4132:	be 01       	movw	r22, r28
    4134:	61 5f       	subi	r22, 0xF1	; 241
    4136:	7f 4f       	sbci	r23, 0xFF	; 255
    4138:	84 e8       	ldi	r24, 0x84	; 132
    413a:	94 e2       	ldi	r25, 0x24	; 36
    413c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4140:	8a ed       	ldi	r24, 0xDA	; 218
    4142:	93 e2       	ldi	r25, 0x23	; 35
    4144:	0e 94 ef 04 	call	0x9de	; 0x9de <_ZN16CLaserControlApp5StartEv>
	void Deinitialize();
	
	// Data send
	void Send(uint8_t* data, uint16_t length);
	void SendByte(uint8_t data);
	uint16_t transmitterState() { return rx_pos; };
    4148:	0f 2e       	mov	r0, r31
    414a:	f4 e8       	ldi	r31, 0x84	; 132
    414c:	cf 2e       	mov	r12, r31
    414e:	f4 e2       	ldi	r31, 0x24	; 36
    4150:	df 2e       	mov	r13, r31
    4152:	f0 2d       	mov	r31, r0
    4154:	fc 2c       	mov	r15, r12
    4156:	1d 2d       	mov	r17, r13
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4158:	8a e4       	ldi	r24, 0x4A	; 74
    415a:	94 e2       	ldi	r25, 0x24	; 36
    415c:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		/*static uint16_t prs = 0;
		if ((prs++ % 100) == 0)*/
		{
			App.Run();
    4160:	8a ed       	ldi	r24, 0xDA	; 218
    4162:	93 e2       	ldi	r25, 0x23	; 35
    4164:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN16CLaserControlApp3RunEv>
    4168:	f6 01       	movw	r30, r12
    416a:	22 81       	ldd	r18, Z+2	; 0x02
    416c:	33 81       	ldd	r19, Z+3	; 0x03
			
			while (dacSPI.transmitterState() > 0);
    416e:	23 2b       	or	r18, r19
    4170:	d9 f7       	brne	.-10     	; 0x4168 <main+0xe0>
			dacSPI.Deinitialize();
    4172:	8f 2d       	mov	r24, r15
    4174:	91 2f       	mov	r25, r17
    4176:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_ZN4CSPI12DeinitializeEv>
			//_delay_ms(1);
			temperature = D18B20.temp_18b20();
    417a:	89 ed       	ldi	r24, 0xD9	; 217
    417c:	93 e2       	ldi	r25, 0x23	; 35
    417e:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <_ZN8CDS18B2010temp_18b20Ev>
    4182:	80 93 d7 23 	sts	0x23D7, r24
    4186:	90 93 d8 23 	sts	0x23D8, r25
			//_delay_ms(1);
			dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    418a:	0f 2e       	mov	r0, r31
    418c:	f3 e0       	ldi	r31, 0x03	; 3
    418e:	ef 2e       	mov	r14, r31
    4190:	f0 2d       	mov	r31, r0
    4192:	00 e0       	ldi	r16, 0x00	; 0
    4194:	23 e0       	ldi	r18, 0x03	; 3
    4196:	40 e0       	ldi	r20, 0x00	; 0
    4198:	61 e0       	ldi	r22, 0x01	; 1
    419a:	8f 2d       	mov	r24, r15
    419c:	91 2f       	mov	r25, r17
    419e:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
			
			if (temperature > 265)
    41a2:	80 91 d7 23 	lds	r24, 0x23D7
    41a6:	90 91 d8 23 	lds	r25, 0x23D8
    41aa:	8a 30       	cpi	r24, 0x0A	; 10
    41ac:	91 40       	sbci	r25, 0x01	; 1
    41ae:	24 f0       	brlt	.+8      	; 0x41b8 <main+0x130>
				laserBoard.Relay2On();
    41b0:	8a e4       	ldi	r24, 0x4A	; 74
    41b2:	94 e2       	ldi	r25, 0x24	; 36
    41b4:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    41b8:	80 91 d7 23 	lds	r24, 0x23D7
    41bc:	90 91 d8 23 	lds	r25, 0x23D8
    41c0:	8f 3f       	cpi	r24, 0xFF	; 255
    41c2:	91 05       	cpc	r25, r1
    41c4:	4c f6       	brge	.-110    	; 0x4158 <main+0xd0>
				laserBoard.Relay2Off();			
    41c6:	8a e4       	ldi	r24, 0x4A	; 74
    41c8:	94 e2       	ldi	r25, 0x24	; 36
    41ca:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <_ZN11CLaserBoard9Relay2OffEv>
    41ce:	c4 cf       	rjmp	.-120    	; 0x4158 <main+0xd0>

000041d0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    41d0:	cf 93       	push	r28
    41d2:	df 93       	push	r29
    41d4:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    41d6:	ec 81       	ldd	r30, Y+4	; 0x04
    41d8:	fd 81       	ldd	r31, Y+5	; 0x05
    41da:	8a ea       	ldi	r24, 0xAA	; 170
    41dc:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    41de:	ec 81       	ldd	r30, Y+4	; 0x04
    41e0:	fd 81       	ldd	r31, Y+5	; 0x05
    41e2:	8c ec       	ldi	r24, 0xCC	; 204
    41e4:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    41e6:	ec 81       	ldd	r30, Y+4	; 0x04
    41e8:	fd 81       	ldd	r31, Y+5	; 0x05
    41ea:	82 e0       	ldi	r24, 0x02	; 2
    41ec:	82 0f       	add	r24, r18
    41ee:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    41f0:	ec 81       	ldd	r30, Y+4	; 0x04
    41f2:	fd 81       	ldd	r31, Y+5	; 0x05
    41f4:	80 e8       	ldi	r24, 0x80	; 128
    41f6:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    41f8:	ec 81       	ldd	r30, Y+4	; 0x04
    41fa:	fd 81       	ldd	r31, Y+5	; 0x05
    41fc:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    41fe:	85 e0       	ldi	r24, 0x05	; 5
    4200:	82 0f       	add	r24, r18
    4202:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	21 15       	cp	r18, r1
    4208:	31 05       	cpc	r19, r1
    420a:	81 f0       	breq	.+32     	; 0x422c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    420c:	da 01       	movw	r26, r20
    420e:	42 0f       	add	r20, r18
    4210:	53 1f       	adc	r21, r19
    4212:	65 e0       	ldi	r22, 0x05	; 5
    4214:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4216:	9d 91       	ld	r25, X+
    4218:	ec 81       	ldd	r30, Y+4	; 0x04
    421a:	fd 81       	ldd	r31, Y+5	; 0x05
    421c:	e6 0f       	add	r30, r22
    421e:	f7 1f       	adc	r31, r23
    4220:	90 83       	st	Z, r25
    4222:	6f 5f       	subi	r22, 0xFF	; 255
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4226:	a4 17       	cp	r26, r20
    4228:	b5 07       	cpc	r27, r21
    422a:	a9 f7       	brne	.-22     	; 0x4216 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	08 95       	ret

00004232 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4232:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4234:	a4 81       	ldd	r26, Z+4	; 0x04
    4236:	b5 81       	ldd	r27, Z+5	; 0x05
    4238:	8a ea       	ldi	r24, 0xAA	; 170
    423a:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    423c:	a4 81       	ldd	r26, Z+4	; 0x04
    423e:	b5 81       	ldd	r27, Z+5	; 0x05
    4240:	8c ec       	ldi	r24, 0xCC	; 204
    4242:	11 96       	adiw	r26, 0x01	; 1
    4244:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4246:	a4 81       	ldd	r26, Z+4	; 0x04
    4248:	b5 81       	ldd	r27, Z+5	; 0x05
    424a:	83 e0       	ldi	r24, 0x03	; 3
    424c:	12 96       	adiw	r26, 0x02	; 2
    424e:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4250:	a4 81       	ldd	r26, Z+4	; 0x04
    4252:	b5 81       	ldd	r27, Z+5	; 0x05
    4254:	81 e8       	ldi	r24, 0x81	; 129
    4256:	13 96       	adiw	r26, 0x03	; 3
    4258:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    425a:	a4 81       	ldd	r26, Z+4	; 0x04
    425c:	b5 81       	ldd	r27, Z+5	; 0x05
    425e:	14 96       	adiw	r26, 0x04	; 4
    4260:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4262:	a4 81       	ldd	r26, Z+4	; 0x04
    4264:	b5 81       	ldd	r27, Z+5	; 0x05
    4266:	15 96       	adiw	r26, 0x05	; 5
    4268:	4c 93       	st	X, r20
	tx_frame_length = 6;
    426a:	86 e0       	ldi	r24, 0x06	; 6
    426c:	81 87       	std	Z+9, r24	; 0x09
    426e:	08 95       	ret

00004270 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4278:	dc 01       	movw	r26, r24
    427a:	14 96       	adiw	r26, 0x04	; 4
    427c:	ed 91       	ld	r30, X+
    427e:	fc 91       	ld	r31, X
    4280:	15 97       	sbiw	r26, 0x05	; 5
    4282:	aa ea       	ldi	r26, 0xAA	; 170
    4284:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4286:	ec 01       	movw	r28, r24
    4288:	ec 81       	ldd	r30, Y+4	; 0x04
    428a:	fd 81       	ldd	r31, Y+5	; 0x05
    428c:	ac ec       	ldi	r26, 0xCC	; 204
    428e:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4290:	ec 81       	ldd	r30, Y+4	; 0x04
    4292:	fd 81       	ldd	r31, Y+5	; 0x05
    4294:	a3 e0       	ldi	r26, 0x03	; 3
    4296:	a2 0f       	add	r26, r18
    4298:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    429a:	ec 81       	ldd	r30, Y+4	; 0x04
    429c:	fd 81       	ldd	r31, Y+5	; 0x05
    429e:	a2 e8       	ldi	r26, 0x82	; 130
    42a0:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    42a2:	ec 81       	ldd	r30, Y+4	; 0x04
    42a4:	fd 81       	ldd	r31, Y+5	; 0x05
    42a6:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    42a8:	ec 81       	ldd	r30, Y+4	; 0x04
    42aa:	fd 81       	ldd	r31, Y+5	; 0x05
    42ac:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    42ae:	66 e0       	ldi	r22, 0x06	; 6
    42b0:	62 0f       	add	r22, r18
    42b2:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    42b4:	36 95       	lsr	r19
    42b6:	27 95       	ror	r18
    42b8:	21 15       	cp	r18, r1
    42ba:	31 05       	cpc	r19, r1
    42bc:	e1 f0       	breq	.+56     	; 0x42f6 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    42be:	e4 2f       	mov	r30, r20
    42c0:	f5 2f       	mov	r31, r21
    42c2:	2d 5f       	subi	r18, 0xFD	; 253
    42c4:	3f 4f       	sbci	r19, 0xFF	; 255
    42c6:	22 0f       	add	r18, r18
    42c8:	33 1f       	adc	r19, r19
    42ca:	46 e0       	ldi	r20, 0x06	; 6
    42cc:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    42ce:	ec 01       	movw	r28, r24
    42d0:	ac 81       	ldd	r26, Y+4	; 0x04
    42d2:	bd 81       	ldd	r27, Y+5	; 0x05
    42d4:	a4 0f       	add	r26, r20
    42d6:	b5 1f       	adc	r27, r21
    42d8:	61 81       	ldd	r22, Z+1	; 0x01
    42da:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    42dc:	ac 81       	ldd	r26, Y+4	; 0x04
    42de:	bd 81       	ldd	r27, Y+5	; 0x05
    42e0:	a4 0f       	add	r26, r20
    42e2:	b5 1f       	adc	r27, r21
    42e4:	60 81       	ld	r22, Z
    42e6:	32 96       	adiw	r30, 0x02	; 2
    42e8:	11 96       	adiw	r26, 0x01	; 1
    42ea:	6c 93       	st	X, r22
    42ec:	4e 5f       	subi	r20, 0xFE	; 254
    42ee:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    42f0:	42 17       	cp	r20, r18
    42f2:	53 07       	cpc	r21, r19
    42f4:	61 f7       	brne	.-40     	; 0x42ce <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    42f6:	df 91       	pop	r29
    42f8:	cf 91       	pop	r28
    42fa:	1f 91       	pop	r17
    42fc:	0f 91       	pop	r16
    42fe:	08 95       	ret

00004300 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4300:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4302:	a4 81       	ldd	r26, Z+4	; 0x04
    4304:	b5 81       	ldd	r27, Z+5	; 0x05
    4306:	8a ea       	ldi	r24, 0xAA	; 170
    4308:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    430a:	a4 81       	ldd	r26, Z+4	; 0x04
    430c:	b5 81       	ldd	r27, Z+5	; 0x05
    430e:	8c ec       	ldi	r24, 0xCC	; 204
    4310:	11 96       	adiw	r26, 0x01	; 1
    4312:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4314:	a4 81       	ldd	r26, Z+4	; 0x04
    4316:	b5 81       	ldd	r27, Z+5	; 0x05
    4318:	84 e0       	ldi	r24, 0x04	; 4
    431a:	12 96       	adiw	r26, 0x02	; 2
    431c:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    431e:	a4 81       	ldd	r26, Z+4	; 0x04
    4320:	b5 81       	ldd	r27, Z+5	; 0x05
    4322:	83 e8       	ldi	r24, 0x83	; 131
    4324:	13 96       	adiw	r26, 0x03	; 3
    4326:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4328:	a4 81       	ldd	r26, Z+4	; 0x04
    432a:	b5 81       	ldd	r27, Z+5	; 0x05
    432c:	14 96       	adiw	r26, 0x04	; 4
    432e:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4330:	a4 81       	ldd	r26, Z+4	; 0x04
    4332:	b5 81       	ldd	r27, Z+5	; 0x05
    4334:	15 96       	adiw	r26, 0x05	; 5
    4336:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4338:	a4 81       	ldd	r26, Z+4	; 0x04
    433a:	b5 81       	ldd	r27, Z+5	; 0x05
    433c:	16 96       	adiw	r26, 0x06	; 6
    433e:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4340:	87 e0       	ldi	r24, 0x07	; 7
    4342:	81 87       	std	Z+9, r24	; 0x09
    4344:	08 95       	ret

00004346 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4346:	0f 93       	push	r16
    4348:	1f 93       	push	r17
    434a:	cf 93       	push	r28
    434c:	df 93       	push	r29
    434e:	ec 01       	movw	r28, r24
    4350:	cb 01       	movw	r24, r22
    4352:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4354:	6f 83       	std	Y+7, r22	; 0x07
    4356:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4358:	4a 87       	std	Y+10, r20	; 0x0a
    435a:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    435c:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <malloc>
    4360:	8a 83       	std	Y+2, r24	; 0x02
    4362:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4364:	c8 01       	movw	r24, r16
    4366:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <malloc>
    436a:	8c 83       	std	Y+4, r24	; 0x04
    436c:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    436e:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4370:	1e 82       	std	Y+6, r1	; 0x06
}
    4372:	df 91       	pop	r29
    4374:	cf 91       	pop	r28
    4376:	1f 91       	pop	r17
    4378:	0f 91       	pop	r16
    437a:	08 95       	ret

0000437c <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	9b 81       	ldd	r25, Y+3	; 0x03
    4386:	0e 94 75 2d 	call	0x5aea	; 0x5aea <free>
	free(tx_buffer);
    438a:	8c 81       	ldd	r24, Y+4	; 0x04
    438c:	9d 81       	ldd	r25, Y+5	; 0x05
    438e:	0e 94 75 2d 	call	0x5aea	; 0x5aea <free>
}
    4392:	df 91       	pop	r29
    4394:	cf 91       	pop	r28
    4396:	08 95       	ret

00004398 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    4398:	08 95       	ret

0000439a <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    439a:	dc 01       	movw	r26, r24
    439c:	5b 96       	adiw	r26, 0x1b	; 27
    439e:	8d 91       	ld	r24, X+
    43a0:	9c 91       	ld	r25, X
    43a2:	5c 97       	sbiw	r26, 0x1c	; 28
    43a4:	00 97       	sbiw	r24, 0x00	; 0
    43a6:	39 f0       	breq	.+14     	; 0x43b6 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    43a8:	dc 01       	movw	r26, r24
    43aa:	ed 91       	ld	r30, X+
    43ac:	fc 91       	ld	r31, X
    43ae:	02 80       	ldd	r0, Z+2	; 0x02
    43b0:	f3 81       	ldd	r31, Z+3	; 0x03
    43b2:	e0 2d       	mov	r30, r0
    43b4:	19 95       	eicall
    43b6:	08 95       	ret

000043b8 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    43b8:	dc 01       	movw	r26, r24
    43ba:	5b 96       	adiw	r26, 0x1b	; 27
    43bc:	8d 91       	ld	r24, X+
    43be:	9c 91       	ld	r25, X
    43c0:	5c 97       	sbiw	r26, 0x1c	; 28
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	39 f0       	breq	.+14     	; 0x43d4 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    43c6:	dc 01       	movw	r26, r24
    43c8:	ed 91       	ld	r30, X+
    43ca:	fc 91       	ld	r31, X
    43cc:	04 80       	ldd	r0, Z+4	; 0x04
    43ce:	f5 81       	ldd	r31, Z+5	; 0x05
    43d0:	e0 2d       	mov	r30, r0
    43d2:	19 95       	eicall
    43d4:	08 95       	ret

000043d6 <_ZN9CMBSenderC1Ev>:
    43d6:	28 ec       	ldi	r18, 0xC8	; 200
    43d8:	30 e2       	ldi	r19, 0x20	; 32
    43da:	fc 01       	movw	r30, r24
    43dc:	20 83       	st	Z, r18
    43de:	31 83       	std	Z+1, r19	; 0x01
    43e0:	08 95       	ret

000043e2 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>:
    43e2:	6f 92       	push	r6
    43e4:	7f 92       	push	r7
    43e6:	8f 92       	push	r8
    43e8:	9f 92       	push	r9
    43ea:	af 92       	push	r10
    43ec:	bf 92       	push	r11
    43ee:	cf 92       	push	r12
    43f0:	df 92       	push	r13
    43f2:	ef 92       	push	r14
    43f4:	ff 92       	push	r15
    43f6:	0f 93       	push	r16
    43f8:	1f 93       	push	r17
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	ec 01       	movw	r28, r24
    4400:	4b 01       	movw	r8, r22
    4402:	5a 01       	movw	r10, r20
    4404:	39 01       	movw	r6, r18
    4406:	c8 01       	movw	r24, r16
    4408:	0f 83       	std	Y+7, r16	; 0x07
    440a:	18 87       	std	Y+8, r17	; 0x08
    440c:	ea 86       	std	Y+10, r14	; 0x0a
    440e:	fb 86       	std	Y+11, r15	; 0x0b
    4410:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <malloc>
    4414:	8a 83       	std	Y+2, r24	; 0x02
    4416:	9b 83       	std	Y+3, r25	; 0x03
    4418:	c7 01       	movw	r24, r14
    441a:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <malloc>
    441e:	8c 83       	std	Y+4, r24	; 0x04
    4420:	9d 83       	std	Y+5, r25	; 0x05
    4422:	19 8e       	std	Y+25, r1	; 0x19
    4424:	19 86       	std	Y+9, r1	; 0x09
    4426:	19 8a       	std	Y+17, r1	; 0x11
    4428:	1e 82       	std	Y+6, r1	; 0x06
    442a:	1c 8a       	std	Y+20, r1	; 0x14
    442c:	1d 8a       	std	Y+21, r1	; 0x15
    442e:	1e 8a       	std	Y+22, r1	; 0x16
    4430:	1f 8a       	std	Y+23, r1	; 0x17
    4432:	87 e0       	ldi	r24, 0x07	; 7
    4434:	88 8b       	std	Y+16, r24	; 0x10
    4436:	82 e0       	ldi	r24, 0x02	; 2
    4438:	88 8f       	std	Y+24, r24	; 0x18
    443a:	1a 8e       	std	Y+26, r1	; 0x1a
    443c:	ca 8a       	std	Y+18, r12	; 0x12
    443e:	db 8a       	std	Y+19, r13	; 0x13
    4440:	ac 86       	std	Y+12, r10	; 0x0c
    4442:	bd 86       	std	Y+13, r11	; 0x0d
    4444:	d5 01       	movw	r26, r10
    4446:	ed 91       	ld	r30, X+
    4448:	fc 91       	ld	r31, X
    444a:	04 84       	ldd	r0, Z+12	; 0x0c
    444c:	f5 85       	ldd	r31, Z+13	; 0x0d
    444e:	e0 2d       	mov	r30, r0
    4450:	45 e1       	ldi	r20, 0x15	; 21
    4452:	53 e2       	ldi	r21, 0x23	; 35
    4454:	be 01       	movw	r22, r28
    4456:	c5 01       	movw	r24, r10
    4458:	19 95       	eicall
    445a:	d5 01       	movw	r26, r10
    445c:	ed 91       	ld	r30, X+
    445e:	fc 91       	ld	r31, X
    4460:	06 84       	ldd	r0, Z+14	; 0x0e
    4462:	f7 85       	ldd	r31, Z+15	; 0x0f
    4464:	e0 2d       	mov	r30, r0
    4466:	41 ea       	ldi	r20, 0xA1	; 161
    4468:	53 e2       	ldi	r21, 0x23	; 35
    446a:	be 01       	movw	r22, r28
    446c:	c5 01       	movw	r24, r10
    446e:	19 95       	eicall
    4470:	61 14       	cp	r6, r1
    4472:	71 04       	cpc	r7, r1
    4474:	19 f0       	breq	.+6      	; 0x447c <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9a>
    4476:	6b 8e       	std	Y+27, r6	; 0x1b
    4478:	7c 8e       	std	Y+28, r7	; 0x1c
    447a:	02 c0       	rjmp	.+4      	; 0x4480 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9e>
    447c:	cb 8f       	std	Y+27, r28	; 0x1b
    447e:	dc 8f       	std	Y+28, r29	; 0x1c
    4480:	8e 86       	std	Y+14, r8	; 0x0e
    4482:	9f 86       	std	Y+15, r9	; 0x0f
    4484:	81 14       	cp	r8, r1
    4486:	91 04       	cpc	r9, r1
    4488:	61 f0       	breq	.+24     	; 0x44a2 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0xc0>
    448a:	d4 01       	movw	r26, r8
    448c:	ed 91       	ld	r30, X+
    448e:	fc 91       	ld	r31, X
    4490:	04 88       	ldd	r0, Z+20	; 0x14
    4492:	f5 89       	ldd	r31, Z+21	; 0x15
    4494:	e0 2d       	mov	r30, r0
    4496:	21 e0       	ldi	r18, 0x01	; 1
    4498:	ae 01       	movw	r20, r28
    449a:	6c e3       	ldi	r22, 0x3C	; 60
    449c:	73 e2       	ldi	r23, 0x23	; 35
    449e:	c4 01       	movw	r24, r8
    44a0:	19 95       	eicall
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	1f 91       	pop	r17
    44a8:	0f 91       	pop	r16
    44aa:	ff 90       	pop	r15
    44ac:	ef 90       	pop	r14
    44ae:	df 90       	pop	r13
    44b0:	cf 90       	pop	r12
    44b2:	bf 90       	pop	r11
    44b4:	af 90       	pop	r10
    44b6:	9f 90       	pop	r9
    44b8:	8f 90       	pop	r8
    44ba:	7f 90       	pop	r7
    44bc:	6f 90       	pop	r6
    44be:	08 95       	ret

000044c0 <_ZN9CMBSenderD1Ev>:
    44c0:	28 ec       	ldi	r18, 0xC8	; 200
    44c2:	30 e2       	ldi	r19, 0x20	; 32
    44c4:	fc 01       	movw	r30, r24
    44c6:	20 83       	st	Z, r18
    44c8:	31 83       	std	Z+1, r19	; 0x01
    44ca:	0e 94 cc 21 	call	0x4398	; 0x4398 <_ZN16CMBEventsHandlerD1Ev>
    44ce:	08 95       	ret

000044d0 <_ZN9CMBSender13OnReceiveByteEh>:
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	ec 01       	movw	r28, r24
    44d6:	96 2f       	mov	r25, r22
    44d8:	48 89       	ldd	r20, Y+16	; 0x10
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	4b 30       	cpi	r20, 0x0B	; 11
    44de:	51 05       	cpc	r21, r1
    44e0:	08 f0       	brcs	.+2      	; 0x44e4 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    44e2:	a0 c0       	rjmp	.+320    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    44e4:	fa 01       	movw	r30, r20
    44e6:	88 27       	eor	r24, r24
    44e8:	ec 5b       	subi	r30, 0xBC	; 188
    44ea:	fe 4f       	sbci	r31, 0xFE	; 254
    44ec:	8f 4f       	sbci	r24, 0xFF	; 255
    44ee:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__tablejump2__>
    44f2:	9a 3a       	cpi	r25, 0xAA	; 170
    44f4:	19 f4       	brne	.+6      	; 0x44fc <_ZN9CMBSender13OnReceiveByteEh+0x2c>
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	88 8b       	std	Y+16, r24	; 0x10
    44fa:	94 c0       	rjmp	.+296    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	88 8b       	std	Y+16, r24	; 0x10
    4500:	91 c0       	rjmp	.+290    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4502:	9c 3c       	cpi	r25, 0xCC	; 204
    4504:	19 f4       	brne	.+6      	; 0x450c <_ZN9CMBSender13OnReceiveByteEh+0x3c>
    4506:	83 e0       	ldi	r24, 0x03	; 3
    4508:	88 8b       	std	Y+16, r24	; 0x10
    450a:	8c c0       	rjmp	.+280    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	88 8b       	std	Y+16, r24	; 0x10
    4510:	89 c0       	rjmp	.+274    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4512:	9e 83       	std	Y+6, r25	; 0x06
    4514:	19 8a       	std	Y+17, r1	; 0x11
    4516:	1e 8a       	std	Y+22, r1	; 0x16
    4518:	1f 8a       	std	Y+23, r1	; 0x17
    451a:	84 e0       	ldi	r24, 0x04	; 4
    451c:	88 8b       	std	Y+16, r24	; 0x10
    451e:	82 c0       	rjmp	.+260    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4520:	89 89       	ldd	r24, Y+17	; 0x11
    4522:	ea 81       	ldd	r30, Y+2	; 0x02
    4524:	fb 81       	ldd	r31, Y+3	; 0x03
    4526:	e8 0f       	add	r30, r24
    4528:	f1 1d       	adc	r31, r1
    452a:	90 83       	st	Z, r25
    452c:	29 89       	ldd	r18, Y+17	; 0x11
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	4f 81       	ldd	r20, Y+7	; 0x07
    4532:	58 85       	ldd	r21, Y+8	; 0x08
    4534:	42 17       	cp	r20, r18
    4536:	53 07       	cpc	r21, r19
    4538:	18 f4       	brcc	.+6      	; 0x4540 <_ZN9CMBSender13OnReceiveByteEh+0x70>
    453a:	89 e0       	ldi	r24, 0x09	; 9
    453c:	88 8b       	std	Y+16, r24	; 0x10
    453e:	72 c0       	rjmp	.+228    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4540:	2e 89       	ldd	r18, Y+22	; 0x16
    4542:	3f 89       	ldd	r19, Y+23	; 0x17
    4544:	29 27       	eor	r18, r25
    4546:	92 2f       	mov	r25, r18
    4548:	92 95       	swap	r25
    454a:	92 27       	eor	r25, r18
    454c:	09 2e       	mov	r0, r25
    454e:	96 95       	lsr	r25
    4550:	96 95       	lsr	r25
    4552:	90 25       	eor	r25, r0
    4554:	09 2e       	mov	r0, r25
    4556:	96 95       	lsr	r25
    4558:	90 25       	eor	r25, r0
    455a:	97 70       	andi	r25, 0x07	; 7
    455c:	02 2e       	mov	r0, r18
    455e:	23 2f       	mov	r18, r19
    4560:	96 95       	lsr	r25
    4562:	07 94       	ror	r0
    4564:	97 95       	ror	r25
    4566:	30 2d       	mov	r19, r0
    4568:	29 27       	eor	r18, r25
    456a:	06 94       	lsr	r0
    456c:	97 95       	ror	r25
    456e:	30 25       	eor	r19, r0
    4570:	29 27       	eor	r18, r25
    4572:	2e 8b       	std	Y+22, r18	; 0x16
    4574:	3f 8b       	std	Y+23, r19	; 0x17
    4576:	89 89       	ldd	r24, Y+17	; 0x11
    4578:	8f 5f       	subi	r24, 0xFF	; 255
    457a:	89 8b       	std	Y+17, r24	; 0x11
    457c:	49 89       	ldd	r20, Y+17	; 0x11
    457e:	8e 81       	ldd	r24, Y+6	; 0x06
    4580:	48 13       	cpse	r20, r24
    4582:	50 c0       	rjmp	.+160    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4584:	88 e0       	ldi	r24, 0x08	; 8
    4586:	88 8b       	std	Y+16, r24	; 0x10
    4588:	e8 81       	ld	r30, Y
    458a:	f9 81       	ldd	r31, Y+1	; 0x01
    458c:	50 e0       	ldi	r21, 0x00	; 0
    458e:	6a 81       	ldd	r22, Y+2	; 0x02
    4590:	7b 81       	ldd	r23, Y+3	; 0x03
    4592:	01 90       	ld	r0, Z+
    4594:	f0 81       	ld	r31, Z
    4596:	e0 2d       	mov	r30, r0
    4598:	ce 01       	movw	r24, r28
    459a:	19 95       	eicall
    459c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    459e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45a0:	00 97       	sbiw	r24, 0x00	; 0
    45a2:	09 f4       	brne	.+2      	; 0x45a6 <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    45a4:	3f c0       	rjmp	.+126    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    45a6:	dc 01       	movw	r26, r24
    45a8:	ed 91       	ld	r30, X+
    45aa:	fc 91       	ld	r31, X
    45ac:	4e 81       	ldd	r20, Y+6	; 0x06
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	6a 81       	ldd	r22, Y+2	; 0x02
    45b2:	7b 81       	ldd	r23, Y+3	; 0x03
    45b4:	01 90       	ld	r0, Z+
    45b6:	f0 81       	ld	r31, Z
    45b8:	e0 2d       	mov	r30, r0
    45ba:	19 95       	eicall
    45bc:	33 c0       	rjmp	.+102    	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    45be:	69 2f       	mov	r22, r25
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	6c 8b       	std	Y+20, r22	; 0x14
    45c4:	7d 8b       	std	Y+21, r23	; 0x15
    45c6:	86 e0       	ldi	r24, 0x06	; 6
    45c8:	88 8b       	std	Y+16, r24	; 0x10
    45ca:	2c c0       	rjmp	.+88     	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    45cc:	2c 89       	ldd	r18, Y+20	; 0x14
    45ce:	3d 89       	ldd	r19, Y+21	; 0x15
    45d0:	a9 01       	movw	r20, r18
    45d2:	59 2b       	or	r21, r25
    45d4:	4c 8b       	std	Y+20, r20	; 0x14
    45d6:	5d 8b       	std	Y+21, r21	; 0x15
    45d8:	2e 89       	ldd	r18, Y+22	; 0x16
    45da:	3f 89       	ldd	r19, Y+23	; 0x17
    45dc:	42 17       	cp	r20, r18
    45de:	53 07       	cpc	r21, r19
    45e0:	e9 f4       	brne	.+58     	; 0x461c <_ZN9CMBSender13OnReceiveByteEh+0x14c>
    45e2:	88 e0       	ldi	r24, 0x08	; 8
    45e4:	88 8b       	std	Y+16, r24	; 0x10
    45e6:	e8 81       	ld	r30, Y
    45e8:	f9 81       	ldd	r31, Y+1	; 0x01
    45ea:	4e 81       	ldd	r20, Y+6	; 0x06
    45ec:	50 e0       	ldi	r21, 0x00	; 0
    45ee:	6a 81       	ldd	r22, Y+2	; 0x02
    45f0:	7b 81       	ldd	r23, Y+3	; 0x03
    45f2:	01 90       	ld	r0, Z+
    45f4:	f0 81       	ld	r31, Z
    45f6:	e0 2d       	mov	r30, r0
    45f8:	ce 01       	movw	r24, r28
    45fa:	19 95       	eicall
    45fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4600:	00 97       	sbiw	r24, 0x00	; 0
    4602:	81 f0       	breq	.+32     	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4604:	dc 01       	movw	r26, r24
    4606:	ed 91       	ld	r30, X+
    4608:	fc 91       	ld	r31, X
    460a:	4e 81       	ldd	r20, Y+6	; 0x06
    460c:	50 e0       	ldi	r21, 0x00	; 0
    460e:	6a 81       	ldd	r22, Y+2	; 0x02
    4610:	7b 81       	ldd	r23, Y+3	; 0x03
    4612:	01 90       	ld	r0, Z+
    4614:	f0 81       	ld	r31, Z
    4616:	e0 2d       	mov	r30, r0
    4618:	19 95       	eicall
    461a:	04 c0       	rjmp	.+8      	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    461c:	89 e0       	ldi	r24, 0x09	; 9
    461e:	88 8b       	std	Y+16, r24	; 0x10
    4620:	01 c0       	rjmp	.+2      	; 0x4624 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4622:	1a 8e       	std	Y+26, r1	; 0x1a
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	08 95       	ret

0000462a <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	ec 01       	movw	r28, r24
    4630:	8c 85       	ldd	r24, Y+12	; 0x0c
    4632:	9d 85       	ldd	r25, Y+13	; 0x0d
    4634:	dc 01       	movw	r26, r24
    4636:	ed 91       	ld	r30, X+
    4638:	fc 91       	ld	r31, X
    463a:	02 80       	ldd	r0, Z+2	; 0x02
    463c:	f3 81       	ldd	r31, Z+3	; 0x03
    463e:	e0 2d       	mov	r30, r0
    4640:	19 95       	eicall
    4642:	68 2f       	mov	r22, r24
    4644:	ce 01       	movw	r24, r28
    4646:	0e 94 68 22 	call	0x44d0	; 0x44d0 <_ZN9CMBSender13OnReceiveByteEh>
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	08 95       	ret

00004650 <_ZN9CMBSender9OnTimeoutEv>:
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	ec 01       	movw	r28, r24
    4656:	8e 85       	ldd	r24, Y+14	; 0x0e
    4658:	9f 85       	ldd	r25, Y+15	; 0x0f
    465a:	dc 01       	movw	r26, r24
    465c:	ed 91       	ld	r30, X+
    465e:	fc 91       	ld	r31, X
    4660:	04 80       	ldd	r0, Z+4	; 0x04
    4662:	f5 81       	ldd	r31, Z+5	; 0x05
    4664:	e0 2d       	mov	r30, r0
    4666:	19 95       	eicall
    4668:	88 89       	ldd	r24, Y+16	; 0x10
    466a:	88 30       	cpi	r24, 0x08	; 8
    466c:	11 f0       	breq	.+4      	; 0x4672 <_ZN9CMBSender9OnTimeoutEv+0x22>
    466e:	8a e0       	ldi	r24, 0x0A	; 10
    4670:	88 8b       	std	Y+16, r24	; 0x10
    4672:	df 91       	pop	r29
    4674:	cf 91       	pop	r28
    4676:	08 95       	ret

00004678 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    4678:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN9CMBSender9OnTimeoutEv>
    467c:	08 95       	ret

0000467e <_ZN9CMBSender19StartMODBUSListenerEv>:
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	fc 01       	movw	r30, r24
    4684:	11 8a       	std	Z+17, r1	; 0x11
    4686:	16 82       	std	Z+6, r1	; 0x06
    4688:	14 8a       	std	Z+20, r1	; 0x14
    468a:	15 8a       	std	Z+21, r1	; 0x15
    468c:	16 8a       	std	Z+22, r1	; 0x16
    468e:	17 8a       	std	Z+23, r1	; 0x17
    4690:	10 8a       	std	Z+16, r1	; 0x10
    4692:	86 85       	ldd	r24, Z+14	; 0x0e
    4694:	97 85       	ldd	r25, Z+15	; 0x0f
    4696:	ec 01       	movw	r28, r24
    4698:	a8 81       	ld	r26, Y
    469a:	b9 81       	ldd	r27, Y+1	; 0x01
    469c:	62 89       	ldd	r22, Z+18	; 0x12
    469e:	73 89       	ldd	r23, Z+19	; 0x13
    46a0:	12 96       	adiw	r26, 0x02	; 2
    46a2:	ed 91       	ld	r30, X+
    46a4:	fc 91       	ld	r31, X
    46a6:	13 97       	sbiw	r26, 0x03	; 3
    46a8:	19 95       	eicall
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	08 95       	ret

000046b0 <_ZN9CMBSender14OnTransmitByteEv>:
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
    46b4:	ec 01       	movw	r28, r24
    46b6:	88 8d       	ldd	r24, Y+24	; 0x18
    46b8:	84 30       	cpi	r24, 0x04	; 4
    46ba:	38 f4       	brcc	.+14     	; 0x46ca <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    46bc:	82 30       	cpi	r24, 0x02	; 2
    46be:	b8 f5       	brcc	.+110    	; 0x472e <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    46c0:	88 23       	and	r24, r24
    46c2:	31 f0       	breq	.+12     	; 0x46d0 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    46c4:	81 30       	cpi	r24, 0x01	; 1
    46c6:	d1 f0       	breq	.+52     	; 0x46fc <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    46c8:	39 c0       	rjmp	.+114    	; 0x473c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    46ca:	85 30       	cpi	r24, 0x05	; 5
    46cc:	81 f1       	breq	.+96     	; 0x472e <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    46ce:	36 c0       	rjmp	.+108    	; 0x473c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	88 8f       	std	Y+24, r24	; 0x18
    46d4:	19 8e       	std	Y+25, r1	; 0x19
    46d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    46d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    46da:	29 8d       	ldd	r18, Y+25	; 0x19
    46dc:	dc 01       	movw	r26, r24
    46de:	ed 91       	ld	r30, X+
    46e0:	fc 91       	ld	r31, X
    46e2:	ac 81       	ldd	r26, Y+4	; 0x04
    46e4:	bd 81       	ldd	r27, Y+5	; 0x05
    46e6:	a2 0f       	add	r26, r18
    46e8:	b1 1d       	adc	r27, r1
    46ea:	04 80       	ldd	r0, Z+4	; 0x04
    46ec:	f5 81       	ldd	r31, Z+5	; 0x05
    46ee:	e0 2d       	mov	r30, r0
    46f0:	6c 91       	ld	r22, X
    46f2:	19 95       	eicall
    46f4:	89 8d       	ldd	r24, Y+25	; 0x19
    46f6:	8f 5f       	subi	r24, 0xFF	; 255
    46f8:	89 8f       	std	Y+25, r24	; 0x19
    46fa:	20 c0       	rjmp	.+64     	; 0x473c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    46fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    46fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    4700:	29 8d       	ldd	r18, Y+25	; 0x19
    4702:	dc 01       	movw	r26, r24
    4704:	ed 91       	ld	r30, X+
    4706:	fc 91       	ld	r31, X
    4708:	ac 81       	ldd	r26, Y+4	; 0x04
    470a:	bd 81       	ldd	r27, Y+5	; 0x05
    470c:	a2 0f       	add	r26, r18
    470e:	b1 1d       	adc	r27, r1
    4710:	04 80       	ldd	r0, Z+4	; 0x04
    4712:	f5 81       	ldd	r31, Z+5	; 0x05
    4714:	e0 2d       	mov	r30, r0
    4716:	6c 91       	ld	r22, X
    4718:	19 95       	eicall
    471a:	89 8d       	ldd	r24, Y+25	; 0x19
    471c:	8f 5f       	subi	r24, 0xFF	; 255
    471e:	89 8f       	std	Y+25, r24	; 0x19
    4720:	99 8d       	ldd	r25, Y+25	; 0x19
    4722:	89 85       	ldd	r24, Y+9	; 0x09
    4724:	98 13       	cpse	r25, r24
    4726:	0a c0       	rjmp	.+20     	; 0x473c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    4728:	83 e0       	ldi	r24, 0x03	; 3
    472a:	88 8f       	std	Y+24, r24	; 0x18
    472c:	07 c0       	rjmp	.+14     	; 0x473c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    472e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4730:	88 23       	and	r24, r24
    4732:	19 f0       	breq	.+6      	; 0x473a <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    4734:	ce 01       	movw	r24, r28
    4736:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN9CMBSender19StartMODBUSListenerEv>
    473a:	1a 8e       	std	Y+26, r1	; 0x1a
    473c:	df 91       	pop	r29
    473e:	cf 91       	pop	r28
    4740:	08 95       	ret

00004742 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    4742:	0e 94 58 23 	call	0x46b0	; 0x46b0 <_ZN9CMBSender14OnTransmitByteEv>
    4746:	08 95       	ret

00004748 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    4748:	fc 01       	movw	r30, r24
    474a:	06 c0       	rjmp	.+12     	; 0x4758 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    474c:	80 89       	ldd	r24, Z+16	; 0x10
    474e:	89 30       	cpi	r24, 0x09	; 9
    4750:	41 f0       	breq	.+16     	; 0x4762 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    4752:	80 89       	ldd	r24, Z+16	; 0x10
    4754:	8a 30       	cpi	r24, 0x0A	; 10
    4756:	39 f0       	breq	.+14     	; 0x4766 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    4758:	80 89       	ldd	r24, Z+16	; 0x10
    475a:	88 30       	cpi	r24, 0x08	; 8
    475c:	b9 f7       	brne	.-18     	; 0x474c <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	08 95       	ret
    4762:	82 e0       	ldi	r24, 0x02	; 2
    4764:	08 95       	ret
    4766:	83 e0       	ldi	r24, 0x03	; 3
    4768:	08 95       	ret

0000476a <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	ec 01       	movw	r28, r24
    4770:	19 8e       	std	Y+25, r1	; 0x19
    4772:	18 8e       	std	Y+24, r1	; 0x18
    4774:	0e 94 58 23 	call	0x46b0	; 0x46b0 <_ZN9CMBSender14OnTransmitByteEv>
    4778:	8e 85       	ldd	r24, Y+14	; 0x0e
    477a:	9f 85       	ldd	r25, Y+15	; 0x0f
    477c:	dc 01       	movw	r26, r24
    477e:	ed 91       	ld	r30, X+
    4780:	fc 91       	ld	r31, X
    4782:	6a 89       	ldd	r22, Y+18	; 0x12
    4784:	7b 89       	ldd	r23, Y+19	; 0x13
    4786:	02 80       	ldd	r0, Z+2	; 0x02
    4788:	f3 81       	ldd	r31, Z+3	; 0x03
    478a:	e0 2d       	mov	r30, r0
    478c:	19 95       	eicall
    478e:	df 91       	pop	r29
    4790:	cf 91       	pop	r28
    4792:	08 95       	ret

00004794 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    4794:	cf 93       	push	r28
    4796:	df 93       	push	r29
    4798:	ec 01       	movw	r28, r24
    479a:	e8 81       	ld	r30, Y
    479c:	f9 81       	ldd	r31, Y+1	; 0x01
    479e:	02 84       	ldd	r0, Z+10	; 0x0a
    47a0:	f3 85       	ldd	r31, Z+11	; 0x0b
    47a2:	e0 2d       	mov	r30, r0
    47a4:	19 95       	eicall
    47a6:	ce 01       	movw	r24, r28
    47a8:	0e 94 b5 23 	call	0x476a	; 0x476a <_ZN9CMBSender22StartMODBUSTransmitterEv>
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	08 95       	ret

000047b2 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    47b2:	cf 93       	push	r28
    47b4:	df 93       	push	r29
    47b6:	ec 01       	movw	r28, r24
    47b8:	e8 81       	ld	r30, Y
    47ba:	f9 81       	ldd	r31, Y+1	; 0x01
    47bc:	06 84       	ldd	r0, Z+14	; 0x0e
    47be:	f7 85       	ldd	r31, Z+15	; 0x0f
    47c0:	e0 2d       	mov	r30, r0
    47c2:	19 95       	eicall
    47c4:	ce 01       	movw	r24, r28
    47c6:	0e 94 b5 23 	call	0x476a	; 0x476a <_ZN9CMBSender22StartMODBUSTransmitterEv>
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	08 95       	ret

000047d0 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	ec 01       	movw	r28, r24
    47d6:	e8 81       	ld	r30, Y
    47d8:	f9 81       	ldd	r31, Y+1	; 0x01
    47da:	04 84       	ldd	r0, Z+12	; 0x0c
    47dc:	f5 85       	ldd	r31, Z+13	; 0x0d
    47de:	e0 2d       	mov	r30, r0
    47e0:	19 95       	eicall
    47e2:	ce 01       	movw	r24, r28
    47e4:	0e 94 b5 23 	call	0x476a	; 0x476a <_ZN9CMBSender22StartMODBUSTransmitterEv>
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	08 95       	ret

000047ee <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	ec 01       	movw	r28, r24
    47f4:	e8 81       	ld	r30, Y
    47f6:	f9 81       	ldd	r31, Y+1	; 0x01
    47f8:	50 e0       	ldi	r21, 0x00	; 0
    47fa:	00 88       	ldd	r0, Z+16	; 0x10
    47fc:	f1 89       	ldd	r31, Z+17	; 0x11
    47fe:	e0 2d       	mov	r30, r0
    4800:	19 95       	eicall
    4802:	ce 01       	movw	r24, r28
    4804:	0e 94 b5 23 	call	0x476a	; 0x476a <_ZN9CMBSender22StartMODBUSTransmitterEv>
    4808:	df 91       	pop	r29
    480a:	cf 91       	pop	r28
    480c:	08 95       	ret

0000480e <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    480e:	fc 01       	movw	r30, r24
    4810:	06 c0       	rjmp	.+12     	; 0x481e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    4812:	80 8d       	ldd	r24, Z+24	; 0x18
    4814:	84 30       	cpi	r24, 0x04	; 4
    4816:	41 f0       	breq	.+16     	; 0x4828 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    4818:	80 8d       	ldd	r24, Z+24	; 0x18
    481a:	85 30       	cpi	r24, 0x05	; 5
    481c:	39 f0       	breq	.+14     	; 0x482c <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    481e:	80 8d       	ldd	r24, Z+24	; 0x18
    4820:	83 30       	cpi	r24, 0x03	; 3
    4822:	b9 f7       	brne	.-18     	; 0x4812 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	08 95       	ret
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	08 95       	ret
    482c:	83 e0       	ldi	r24, 0x03	; 3
    482e:	08 95       	ret

00004830 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    4830:	21 e0       	ldi	r18, 0x01	; 1
    4832:	fc 01       	movw	r30, r24
    4834:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    4836:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    483a:	08 95       	ret

0000483c <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    483c:	21 e0       	ldi	r18, 0x01	; 1
    483e:	fc 01       	movw	r30, r24
    4840:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    4842:	0e 94 f7 23 	call	0x47ee	; 0x47ee <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    4846:	08 95       	ret

00004848 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    4848:	0f 93       	push	r16
    484a:	1f 93       	push	r17
    484c:	cf 93       	push	r28
    484e:	df 93       	push	r29
    4850:	8c 01       	movw	r16, r24
    4852:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    4854:	98 81       	ld	r25, Y
    4856:	91 38       	cpi	r25, 0x81	; 129
    4858:	69 f4       	brne	.+26     	; 0x4874 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    485a:	d8 01       	movw	r26, r16
    485c:	ed 91       	ld	r30, X+
    485e:	fc 91       	ld	r31, X
    4860:	04 80       	ldd	r0, Z+4	; 0x04
    4862:	f5 81       	ldd	r31, Z+5	; 0x05
    4864:	e0 2d       	mov	r30, r0
    4866:	2a 81       	ldd	r18, Y+2	; 0x02
    4868:	ab 01       	movw	r20, r22
    486a:	4d 5f       	subi	r20, 0xFD	; 253
    486c:	5f 4f       	sbci	r21, 0xFF	; 255
    486e:	69 81       	ldd	r22, Y+1	; 0x01
    4870:	c8 01       	movw	r24, r16
    4872:	19 95       	eicall
	}
	if (data[0] == 0x83)
    4874:	98 81       	ld	r25, Y
    4876:	93 38       	cpi	r25, 0x83	; 131
    4878:	99 f4       	brne	.+38     	; 0x48a0 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    487a:	d8 01       	movw	r26, r16
    487c:	ed 91       	ld	r30, X+
    487e:	fc 91       	ld	r31, X
    4880:	2b 81       	ldd	r18, Y+3	; 0x03
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	ae 01       	movw	r20, r28
    4886:	4c 5f       	subi	r20, 0xFC	; 252
    4888:	5f 4f       	sbci	r21, 0xFF	; 255
    488a:	69 81       	ldd	r22, Y+1	; 0x01
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	76 2f       	mov	r23, r22
    4890:	66 27       	eor	r22, r22
    4892:	8a 81       	ldd	r24, Y+2	; 0x02
    4894:	68 2b       	or	r22, r24
    4896:	02 80       	ldd	r0, Z+2	; 0x02
    4898:	f3 81       	ldd	r31, Z+3	; 0x03
    489a:	e0 2d       	mov	r30, r0
    489c:	c8 01       	movw	r24, r16
    489e:	19 95       	eicall
	}
}
    48a0:	df 91       	pop	r29
    48a2:	cf 91       	pop	r28
    48a4:	1f 91       	pop	r17
    48a6:	0f 91       	pop	r16
    48a8:	08 95       	ret

000048aa <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    48aa:	0e 94 24 24 	call	0x4848	; 0x4848 <_ZN9CMBSender18ProcessTransactionEPhj>
    48ae:	08 95       	ret

000048b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    48b0:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    48b2:	e0 e6       	ldi	r30, 0x60	; 96
    48b4:	f6 e0       	ldi	r31, 0x06	; 6
    48b6:	88 e0       	ldi	r24, 0x08	; 8
    48b8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    48ba:	84 e0       	ldi	r24, 0x04	; 4
    48bc:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    48be:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    48c0:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    48c2:	e0 ea       	ldi	r30, 0xA0	; 160
    48c4:	f9 e0       	ldi	r31, 0x09	; 9
    48c6:	84 e1       	ldi	r24, 0x14	; 20
    48c8:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    48ca:	88 e1       	ldi	r24, 0x18	; 24
    48cc:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    48ce:	84 81       	ldd	r24, Z+4	; 0x04
    48d0:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    48d2:	41 30       	cpi	r20, 0x01	; 1
    48d4:	19 f0       	breq	.+6      	; 0x48dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    48d6:	42 30       	cpi	r20, 0x02	; 2
    48d8:	19 f0       	breq	.+6      	; 0x48e0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    48da:	04 c0       	rjmp	.+8      	; 0x48e4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    48dc:	80 e2       	ldi	r24, 0x20	; 32
    48de:	03 c0       	rjmp	.+6      	; 0x48e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    48e0:	80 e3       	ldi	r24, 0x30	; 48
		break;
    48e2:	01 c0       	rjmp	.+2      	; 0x48e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    48e4:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    48e6:	22 23       	and	r18, r18
    48e8:	19 f0       	breq	.+6      	; 0x48f0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    48ea:	21 30       	cpi	r18, 0x01	; 1
    48ec:	19 f0       	breq	.+6      	; 0x48f4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    48ee:	03 c0       	rjmp	.+6      	; 0x48f6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    48f0:	87 7f       	andi	r24, 0xF7	; 247
		break;
    48f2:	01 c0       	rjmp	.+2      	; 0x48f6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    48f4:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    48f6:	01 11       	cpse	r16, r1
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    48fa:	93 e4       	ldi	r25, 0x43	; 67
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    48fe:	93 e0       	ldi	r25, 0x03	; 3
    4900:	89 2b       	or	r24, r25
    4902:	e0 ea       	ldi	r30, 0xA0	; 160
    4904:	f9 e0       	ldi	r31, 0x09	; 9
    4906:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    4908:	70 e0       	ldi	r23, 0x00	; 0
    490a:	db 01       	movw	r26, r22
    490c:	aa 5d       	subi	r26, 0xDA	; 218
    490e:	bf 4d       	sbci	r27, 0xDF	; 223
    4910:	8c 91       	ld	r24, X
    4912:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    4914:	db 01       	movw	r26, r22
    4916:	aa 5f       	subi	r26, 0xFA	; 250
    4918:	bf 4d       	sbci	r27, 0xDF	; 223
    491a:	8c 91       	ld	r24, X
    491c:	82 95       	swap	r24
    491e:	80 7f       	andi	r24, 0xF0	; 240
    4920:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    4922:	0f 91       	pop	r16
    4924:	08 95       	ret

00004926 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    4926:	80 91 a0 09 	lds	r24, 0x09A0
}
    492a:	08 95       	ret

0000492c <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    492c:	60 93 a0 09 	sts	0x09A0, r22
    4930:	08 95       	ret

00004932 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    4932:	80 91 a1 09 	lds	r24, 0x09A1
    4936:	86 fb       	bst	r24, 6
    4938:	88 27       	eor	r24, r24
    493a:	80 f9       	bld	r24, 0
}
    493c:	91 e0       	ldi	r25, 0x01	; 1
    493e:	89 27       	eor	r24, r25
    4940:	08 95       	ret

00004942 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    4942:	80 91 a1 09 	lds	r24, 0x09A1
    4946:	80 95       	com	r24
}
    4948:	88 1f       	adc	r24, r24
    494a:	88 27       	eor	r24, r24
    494c:	88 1f       	adc	r24, r24
    494e:	08 95       	ret

00004950 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    4950:	80 91 a1 09 	lds	r24, 0x09A1
    4954:	85 fb       	bst	r24, 5
    4956:	88 27       	eor	r24, r24
    4958:	80 f9       	bld	r24, 0
}
    495a:	91 e0       	ldi	r25, 0x01	; 1
    495c:	89 27       	eor	r24, r25
    495e:	08 95       	ret

00004960 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    4960:	60 93 4d 23 	sts	0x234D, r22
    4964:	70 93 4e 23 	sts	0x234E, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    4968:	40 93 57 22 	sts	0x2257, r20
    496c:	50 93 58 22 	sts	0x2258, r21
    4970:	08 95       	ret

00004972 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    4972:	60 93 51 23 	sts	0x2351, r22
    4976:	70 93 52 23 	sts	0x2352, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    497a:	40 93 5b 22 	sts	0x225B, r20
    497e:	50 93 5c 22 	sts	0x225C, r21
    4982:	08 95       	ret

00004984 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    4984:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    4986:	8b e6       	ldi	r24, 0x6B	; 107
    4988:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    498a:	80 ea       	ldi	r24, 0xA0	; 160
    498c:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    498e:	89 e0       	ldi	r24, 0x09	; 9
    4990:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    4992:	12 86       	std	Z+10, r1	; 0x0a
    4994:	08 95       	ret

00004996 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    4996:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    4998:	8c e6       	ldi	r24, 0x6C	; 108
    499a:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    499c:	80 ea       	ldi	r24, 0xA0	; 160
    499e:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    49a0:	89 e0       	ldi	r24, 0x09	; 9
    49a2:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    49a4:	16 86       	std	Z+14, r1	; 0x0e
    49a6:	08 95       	ret

000049a8 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	ec 01       	movw	r28, r24
    49ae:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN6CUSARTC1Ev>
    49b2:	8e ed       	ldi	r24, 0xDE	; 222
    49b4:	90 e2       	ldi	r25, 0x20	; 32
    49b6:	88 83       	st	Y, r24
    49b8:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	08 95       	ret

000049c0 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    49c0:	2e ed       	ldi	r18, 0xDE	; 222
    49c2:	30 e2       	ldi	r19, 0x20	; 32
    49c4:	fc 01       	movw	r30, r24
    49c6:	20 83       	st	Z, r18
    49c8:	31 83       	std	Z+1, r19	; 0x01
    49ca:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN6CUSARTD1Ev>
    49ce:	08 95       	ret

000049d0 <_ZN8CDS18B20C1Ev>:
#define F_CPU	32000000

#include <util/delay.h>

// default constructor
CDS18B20::CDS18B20()
    49d0:	08 95       	ret

000049d2 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    49d2:	08 95       	ret

000049d4 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTE.DIRSET = PIN6_bm;	// pull down 1-wire bus
    49d4:	e0 e8       	ldi	r30, 0x80	; 128
    49d6:	f6 e0       	ldi	r31, 0x06	; 6
    49d8:	80 e4       	ldi	r24, 0x40	; 64
    49da:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    49dc:	a7 e2       	ldi	r26, 0x27	; 39
    49de:	bf e0       	ldi	r27, 0x0F	; 15
    49e0:	11 97       	sbiw	r26, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <_ZN8CDS18B207w1_findEv+0xc>
    49e4:	00 c0       	rjmp	.+0      	; 0x49e6 <_ZN8CDS18B207w1_findEv+0x12>
    49e6:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTE.DIRCLR = PIN6_bm; // 1-wire bus pull up
    49e8:	82 83       	std	Z+2, r24	; 0x02
    49ea:	87 e0       	ldi	r24, 0x07	; 7
    49ec:	92 e0       	ldi	r25, 0x02	; 2
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	f1 f7       	brne	.-4      	; 0x49ee <_ZN8CDS18B207w1_findEv+0x1a>
    49f2:	00 c0       	rjmp	.+0      	; 0x49f4 <_ZN8CDS18B207w1_findEv+0x20>
    49f4:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTE.IN & PIN6_bm) == 0x00)
    49f6:	80 85       	ldd	r24, Z+8	; 0x08
    49f8:	af e1       	ldi	r26, 0x1F	; 31
    49fa:	bd e0       	ldi	r27, 0x0D	; 13
    49fc:	11 97       	sbiw	r26, 0x01	; 1
    49fe:	f1 f7       	brne	.-4      	; 0x49fc <_ZN8CDS18B207w1_findEv+0x28>
    4a00:	00 c0       	rjmp	.+0      	; 0x4a02 <_ZN8CDS18B207w1_findEv+0x2e>
    4a02:	00 00       	nop
    4a04:	86 fb       	bst	r24, 6
    4a06:	88 27       	eor	r24, r24
    4a08:	80 f9       	bld	r24, 0
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	89 27       	eor	r24, r25
    4a0e:	08 95       	ret

00004a10 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    4a18:	c1 e0       	ldi	r28, 0x01	; 1
    4a1a:	d0 e0       	ldi	r29, 0x00	; 0
    4a1c:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTE.DIRSET = PIN6_bm;
    4a1e:	e0 e8       	ldi	r30, 0x80	; 128
    4a20:	f6 e0       	ldi	r31, 0x06	; 6
    4a22:	40 e4       	ldi	r20, 0x40	; 64

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    4a24:	9e 01       	movw	r18, r28
    4a26:	08 2e       	mov	r0, r24
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    4a2a:	22 0f       	add	r18, r18
    4a2c:	33 1f       	adc	r19, r19
    4a2e:	0a 94       	dec	r0
    4a30:	e2 f7       	brpl	.-8      	; 0x4a2a <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    4a32:	d9 01       	movw	r26, r18
    4a34:	a6 23       	and	r26, r22
    4a36:	b7 23       	and	r27, r23
    4a38:	2a 17       	cp	r18, r26
    4a3a:	3b 07       	cpc	r19, r27
    4a3c:	69 f4       	brne	.+26     	; 0x4a58 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTE.DIRSET = PIN6_bm;
    4a3e:	41 83       	std	Z+1, r20	; 0x01
    4a40:	25 e1       	ldi	r18, 0x15	; 21
    4a42:	2a 95       	dec	r18
    4a44:	f1 f7       	brne	.-4      	; 0x4a42 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    4a46:	00 00       	nop
			_delay_us(2);
			PORTE.DIRCLR = PIN6_bm;
    4a48:	42 83       	std	Z+2, r20	; 0x02
    4a4a:	a7 e0       	ldi	r26, 0x07	; 7
    4a4c:	b2 e0       	ldi	r27, 0x02	; 2
    4a4e:	11 97       	sbiw	r26, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    4a52:	00 c0       	rjmp	.+0      	; 0x4a54 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    4a54:	00 00       	nop
    4a56:	0c c0       	rjmp	.+24     	; 0x4a70 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTE.DIRSET = PIN6_bm;
    4a58:	41 83       	std	Z+1, r20	; 0x01
    4a5a:	a7 e0       	ldi	r26, 0x07	; 7
    4a5c:	b2 e0       	ldi	r27, 0x02	; 2
    4a5e:	11 97       	sbiw	r26, 0x01	; 1
    4a60:	f1 f7       	brne	.-4      	; 0x4a5e <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    4a62:	00 c0       	rjmp	.+0      	; 0x4a64 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    4a64:	00 00       	nop
			_delay_us(65);
			PORTE.DIRCLR = PIN6_bm;
    4a66:	42 83       	std	Z+2, r20	; 0x02
    4a68:	b5 e3       	ldi	r27, 0x35	; 53
    4a6a:	ba 95       	dec	r27
    4a6c:	f1 f7       	brne	.-4      	; 0x4a6a <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    4a6e:	00 00       	nop
    4a70:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    4a72:	88 30       	cpi	r24, 0x08	; 8
    4a74:	91 05       	cpc	r25, r1
    4a76:	b1 f6       	brne	.-84     	; 0x4a24 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTE.DIRCLR = PIN6_bm;
			_delay_us(5);
		}
	}
}
    4a78:	df 91       	pop	r29
    4a7a:	cf 91       	pop	r28
    4a7c:	08 95       	ret

00004a7e <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    4a82:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTE.DIRSET = PIN6_bm;
    4a84:	e0 e8       	ldi	r30, 0x80	; 128
    4a86:	f6 e0       	ldi	r31, 0x06	; 6
    4a88:	90 e4       	ldi	r25, 0x40	; 64
		PORTE.DIRCLR = PIN6_bm;
		_delay_us(10);
		if((PORTE.IN & PIN6_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTE.DIRSET = PIN6_bm;
    4a8e:	91 83       	std	Z+1, r25	; 0x01
    4a90:	45 e1       	ldi	r20, 0x15	; 21
    4a92:	4a 95       	dec	r20
    4a94:	f1 f7       	brne	.-4      	; 0x4a92 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    4a96:	00 00       	nop
		_delay_us(2);
		PORTE.DIRCLR = PIN6_bm;
    4a98:	92 83       	std	Z+2, r25	; 0x02
    4a9a:	aa e6       	ldi	r26, 0x6A	; 106
    4a9c:	aa 95       	dec	r26
    4a9e:	f1 f7       	brne	.-4      	; 0x4a9c <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    4aa0:	00 c0       	rjmp	.+0      	; 0x4aa2 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTE.IN & PIN6_bm) == 0x00)
    4aa2:	40 85       	ldd	r20, Z+8	; 0x08
    4aa4:	46 fd       	sbrc	r20, 6
    4aa6:	0a c0       	rjmp	.+20     	; 0x4abc <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    4aa8:	ab 01       	movw	r20, r22
    4aaa:	02 2e       	mov	r0, r18
    4aac:	02 c0       	rjmp	.+4      	; 0x4ab2 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    4aae:	44 0f       	add	r20, r20
    4ab0:	55 1f       	adc	r21, r21
    4ab2:	0a 94       	dec	r0
    4ab4:	e2 f7       	brpl	.-8      	; 0x4aae <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    4ab6:	40 95       	com	r20
    4ab8:	84 23       	and	r24, r20
    4aba:	08 c0       	rjmp	.+16     	; 0x4acc <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    4abc:	ab 01       	movw	r20, r22
    4abe:	02 2e       	mov	r0, r18
    4ac0:	02 c0       	rjmp	.+4      	; 0x4ac6 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    4ac2:	44 0f       	add	r20, r20
    4ac4:	55 1f       	adc	r21, r21
    4ac6:	0a 94       	dec	r0
    4ac8:	e2 f7       	brpl	.-8      	; 0x4ac2 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    4aca:	84 2b       	or	r24, r20
    4acc:	af e8       	ldi	r26, 0x8F	; 143
    4ace:	b1 e0       	ldi	r27, 0x01	; 1
    4ad0:	11 97       	sbiw	r26, 0x01	; 1
    4ad2:	f1 f7       	brne	.-4      	; 0x4ad0 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    4ad4:	00 c0       	rjmp	.+0      	; 0x4ad6 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    4ad6:	00 00       	nop
    4ad8:	2f 5f       	subi	r18, 0xFF	; 255
    4ada:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    4adc:	28 30       	cpi	r18, 0x08	; 8
    4ade:	31 05       	cpc	r19, r1
    4ae0:	b1 f6       	brne	.-84     	; 0x4a8e <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    4ae2:	08 95       	ret

00004ae4 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    4ae4:	1f 93       	push	r17
    4ae6:	cf 93       	push	r28
    4ae8:	df 93       	push	r29
    4aea:	ec 01       	movw	r28, r24
	unsigned char data[2];
	int temp = 0;
	if(w1_find())
    4aec:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <_ZN8CDS18B207w1_findEv>
    4af0:	88 23       	and	r24, r24
    4af2:	b1 f1       	breq	.+108    	; 0x4b60 <_ZN8CDS18B2010temp_18b20Ev+0x7c>
	{
		w1_sendcmd(0xcc);	//skip ROM
    4af4:	6c ec       	ldi	r22, 0xCC	; 204
    4af6:	ce 01       	movw	r24, r28
    4af8:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_ZN8CDS18B2010w1_sendcmdEh>
		w1_sendcmd(0x44);	//start conversion
    4afc:	64 e4       	ldi	r22, 0x44	; 68
    4afe:	ce 01       	movw	r24, r28
    4b00:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_ZN8CDS18B2010w1_sendcmdEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4b04:	2f ef       	ldi	r18, 0xFF	; 255
    4b06:	8d e3       	ldi	r24, 0x3D	; 61
    4b08:	99 e4       	ldi	r25, 0x49	; 73
    4b0a:	21 50       	subi	r18, 0x01	; 1
    4b0c:	80 40       	sbci	r24, 0x00	; 0
    4b0e:	90 40       	sbci	r25, 0x00	; 0
    4b10:	e1 f7       	brne	.-8      	; 0x4b0a <_ZN8CDS18B2010temp_18b20Ev+0x26>
    4b12:	00 c0       	rjmp	.+0      	; 0x4b14 <_ZN8CDS18B2010temp_18b20Ev+0x30>
    4b14:	00 00       	nop
		_delay_ms(750);		//wait for conversion 750 ms
		w1_find();			//send Presence & Reset
    4b16:	ce 01       	movw	r24, r28
    4b18:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <_ZN8CDS18B207w1_findEv>
		w1_sendcmd(0xcc);
    4b1c:	6c ec       	ldi	r22, 0xCC	; 204
    4b1e:	ce 01       	movw	r24, r28
    4b20:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_ZN8CDS18B2010w1_sendcmdEh>
		w1_sendcmd(0xbe);	//read temperature
    4b24:	6e eb       	ldi	r22, 0xBE	; 190
    4b26:	ce 01       	movw	r24, r28
    4b28:	0e 94 08 25 	call	0x4a10	; 0x4a10 <_ZN8CDS18B2010w1_sendcmdEh>
		data[0] = w1_receive_byte();
    4b2c:	ce 01       	movw	r24, r28
    4b2e:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <_ZN8CDS18B2015w1_receive_byteEv>
    4b32:	18 2f       	mov	r17, r24
		data[1] = w1_receive_byte();
    4b34:	ce 01       	movw	r24, r28
    4b36:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <_ZN8CDS18B2015w1_receive_byteEv>
		
		temp = data[1];
		temp = temp<<8;
    4b3a:	61 2f       	mov	r22, r17
    4b3c:	70 e0       	ldi	r23, 0x00	; 0
		temp |= data[0];
    4b3e:	78 2b       	or	r23, r24
		
		temp *= 0.625;
    4b40:	07 2e       	mov	r0, r23
    4b42:	00 0c       	add	r0, r0
    4b44:	88 0b       	sbc	r24, r24
    4b46:	99 0b       	sbc	r25, r25
    4b48:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <__floatsisf>
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e2       	ldi	r20, 0x20	; 32
    4b52:	5f e3       	ldi	r21, 0x3F	; 63
    4b54:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    4b58:	0e 94 28 2b 	call	0x5650	; 0x5650 <__fixsfsi>
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	02 c0       	rjmp	.+4      	; 0x4b64 <_ZN8CDS18B2010temp_18b20Ev+0x80>
}

int CDS18B20::temp_18b20()
{
	unsigned char data[2];
	int temp = 0;
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	90 e0       	ldi	r25, 0x00	; 0
		
		temp *= 0.625;
	}
	
	return temp;
}
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	1f 91       	pop	r17
    4b6a:	08 95       	ret

00004b6c <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
	PORTE.OUTCLR = PIN6_bm;
    4b6c:	e0 e8       	ldi	r30, 0x80	; 128
    4b6e:	f6 e0       	ldi	r31, 0x06	; 6
    4b70:	80 e4       	ldi	r24, 0x40	; 64
    4b72:	86 83       	std	Z+6, r24	; 0x06
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    4b74:	16 8a       	std	Z+22, r1	; 0x16
    4b76:	08 95       	ret

00004b78 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    4b78:	08 95       	ret

00004b7a <_ZN11CLaserBoardD1Ev>:
    4b7a:	08 95       	ret

00004b7c <_ZN11CLaserBoard12InitializeIOEv>:
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	ec 01       	movw	r28, r24
    4b82:	e0 e4       	ldi	r30, 0x40	; 64
    4b84:	f6 e0       	ldi	r31, 0x06	; 6
    4b86:	11 82       	std	Z+1, r1	; 0x01
    4b88:	98 ea       	ldi	r25, 0xA8	; 168
    4b8a:	90 8b       	std	Z+16, r25	; 0x10
    4b8c:	91 8b       	std	Z+17, r25	; 0x11
    4b8e:	92 8b       	std	Z+18, r25	; 0x12
    4b90:	93 8b       	std	Z+19, r25	; 0x13
    4b92:	94 8b       	std	Z+20, r25	; 0x14
    4b94:	95 8b       	std	Z+21, r25	; 0x15
    4b96:	96 8b       	std	Z+22, r25	; 0x16
    4b98:	97 8b       	std	Z+23, r25	; 0x17
    4b9a:	8f ef       	ldi	r24, 0xFF	; 255
    4b9c:	84 83       	std	Z+4, r24	; 0x04
    4b9e:	a0 e8       	ldi	r26, 0x80	; 128
    4ba0:	b6 e0       	ldi	r27, 0x06	; 6
    4ba2:	98 e0       	ldi	r25, 0x08	; 8
    4ba4:	11 96       	adiw	r26, 0x01	; 1
    4ba6:	9c 93       	st	X, r25
    4ba8:	11 97       	sbiw	r26, 0x01	; 1
    4baa:	53 96       	adiw	r26, 0x13	; 19
    4bac:	1c 92       	st	X, r1
    4bae:	53 97       	sbiw	r26, 0x13	; 19
    4bb0:	14 96       	adiw	r26, 0x04	; 4
    4bb2:	1c 92       	st	X, r1
    4bb4:	14 97       	sbiw	r26, 0x04	; 4
    4bb6:	e0 ea       	ldi	r30, 0xA0	; 160
    4bb8:	f6 e0       	ldi	r31, 0x06	; 6
    4bba:	90 ec       	ldi	r25, 0xC0	; 192
    4bbc:	90 8b       	std	Z+16, r25	; 0x10
    4bbe:	20 e8       	ldi	r18, 0x80	; 128
    4bc0:	21 8b       	std	Z+17, r18	; 0x11
    4bc2:	92 8b       	std	Z+18, r25	; 0x12
    4bc4:	93 8b       	std	Z+19, r25	; 0x13
    4bc6:	94 8b       	std	Z+20, r25	; 0x14
    4bc8:	95 8b       	std	Z+21, r25	; 0x15
    4bca:	96 8b       	std	Z+22, r25	; 0x16
    4bcc:	97 8b       	std	Z+23, r25	; 0x17
    4bce:	14 82       	std	Z+4, r1	; 0x04
    4bd0:	81 83       	std	Z+1, r24	; 0x01
    4bd2:	e0 e6       	ldi	r30, 0x60	; 96
    4bd4:	f6 e0       	ldi	r31, 0x06	; 6
    4bd6:	81 e1       	ldi	r24, 0x11	; 17
    4bd8:	81 83       	std	Z+1, r24	; 0x01
    4bda:	90 8b       	std	Z+16, r25	; 0x10
    4bdc:	94 8b       	std	Z+20, r25	; 0x14
    4bde:	14 82       	std	Z+4, r1	; 0x04
    4be0:	87 e0       	ldi	r24, 0x07	; 7
    4be2:	11 96       	adiw	r26, 0x01	; 1
    4be4:	8c 93       	st	X, r24
    4be6:	11 97       	sbiw	r26, 0x01	; 1
    4be8:	50 96       	adiw	r26, 0x10	; 16
    4bea:	2c 93       	st	X, r18
    4bec:	50 97       	sbiw	r26, 0x10	; 16
    4bee:	51 96       	adiw	r26, 0x11	; 17
    4bf0:	2c 93       	st	X, r18
    4bf2:	51 97       	sbiw	r26, 0x11	; 17
    4bf4:	52 96       	adiw	r26, 0x12	; 18
    4bf6:	2c 93       	st	X, r18
    4bf8:	52 97       	sbiw	r26, 0x12	; 18
    4bfa:	14 96       	adiw	r26, 0x04	; 4
    4bfc:	1c 92       	st	X, r1
    4bfe:	e0 ea       	ldi	r30, 0xA0	; 160
    4c00:	f0 e0       	ldi	r31, 0x00	; 0
    4c02:	82 81       	ldd	r24, Z+2	; 0x02
    4c04:	81 60       	ori	r24, 0x01	; 1
    4c06:	82 83       	std	Z+2, r24	; 0x02
    4c08:	82 81       	ldd	r24, Z+2	; 0x02
    4c0a:	82 60       	ori	r24, 0x02	; 2
    4c0c:	82 83       	std	Z+2, r24	; 0x02
    4c0e:	82 81       	ldd	r24, Z+2	; 0x02
    4c10:	84 60       	ori	r24, 0x04	; 4
    4c12:	82 83       	std	Z+2, r24	; 0x02
    4c14:	fe 01       	movw	r30, r28
    4c16:	9e 01       	movw	r18, r28
    4c18:	28 5f       	subi	r18, 0xF8	; 248
    4c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	91 93       	st	Z+, r25
    4c20:	e2 17       	cp	r30, r18
    4c22:	f3 07       	cpc	r31, r19
    4c24:	e1 f7       	brne	.-8      	; 0x4c1e <_ZN11CLaserBoard12InitializeIOEv+0xa2>
    4c26:	83 e0       	ldi	r24, 0x03	; 3
    4c28:	88 87       	std	Y+8, r24	; 0x08
    4c2a:	e0 e4       	ldi	r30, 0x40	; 64
    4c2c:	f6 e0       	ldi	r31, 0x06	; 6
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	82 87       	std	Z+10, r24	; 0x0a
    4c32:	81 87       	std	Z+9, r24	; 0x09
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	08 95       	ret

00004c3a <_ZN11CLaserBoard15InitializeClockEv>:
    4c3a:	e0 e5       	ldi	r30, 0x50	; 80
    4c3c:	f0 e0       	ldi	r31, 0x00	; 0
    4c3e:	8b ec       	ldi	r24, 0xCB	; 203
    4c40:	82 83       	std	Z+2, r24	; 0x02
    4c42:	80 81       	ld	r24, Z
    4c44:	88 60       	ori	r24, 0x08	; 8
    4c46:	80 83       	st	Z, r24
    4c48:	81 81       	ldd	r24, Z+1	; 0x01
    4c4a:	83 ff       	sbrs	r24, 3
    4c4c:	fd cf       	rjmp	.-6      	; 0x4c48 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    4c4e:	e0 e5       	ldi	r30, 0x50	; 80
    4c50:	f0 e0       	ldi	r31, 0x00	; 0
    4c52:	85 81       	ldd	r24, Z+5	; 0x05
    4c54:	98 ed       	ldi	r25, 0xD8	; 216
    4c56:	94 bf       	out	0x34, r25	; 52
    4c58:	84 ec       	ldi	r24, 0xC4	; 196
    4c5a:	85 83       	std	Z+5, r24	; 0x05
    4c5c:	80 81       	ld	r24, Z
    4c5e:	80 61       	ori	r24, 0x10	; 16
    4c60:	80 83       	st	Z, r24
    4c62:	e0 e4       	ldi	r30, 0x40	; 64
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	81 81       	ldd	r24, Z+1	; 0x01
    4c68:	94 bf       	out	0x34, r25	; 52
    4c6a:	11 82       	std	Z+1, r1	; 0x01
    4c6c:	e0 e5       	ldi	r30, 0x50	; 80
    4c6e:	f0 e0       	ldi	r31, 0x00	; 0
    4c70:	81 81       	ldd	r24, Z+1	; 0x01
    4c72:	84 ff       	sbrs	r24, 4
    4c74:	fd cf       	rjmp	.-6      	; 0x4c70 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    4c76:	e0 e4       	ldi	r30, 0x40	; 64
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	80 81       	ld	r24, Z
    4c7c:	88 7f       	andi	r24, 0xF8	; 248
    4c7e:	84 60       	ori	r24, 0x04	; 4
    4c80:	98 ed       	ldi	r25, 0xD8	; 216
    4c82:	94 bf       	out	0x34, r25	; 52
    4c84:	80 83       	st	Z, r24
    4c86:	a0 e5       	ldi	r26, 0x50	; 80
    4c88:	b0 e0       	ldi	r27, 0x00	; 0
    4c8a:	8c 91       	ld	r24, X
    4c8c:	88 7f       	andi	r24, 0xF8	; 248
    4c8e:	8c 93       	st	X, r24
    4c90:	82 81       	ldd	r24, Z+2	; 0x02
    4c92:	94 bf       	out	0x34, r25	; 52
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	82 83       	std	Z+2, r24	; 0x02
    4c98:	e0 eb       	ldi	r30, 0xB0	; 176
    4c9a:	f0 e0       	ldi	r31, 0x00	; 0
    4c9c:	84 81       	ldd	r24, Z+4	; 0x04
    4c9e:	8c 7f       	andi	r24, 0xFC	; 252
    4ca0:	84 83       	std	Z+4, r24	; 0x04
    4ca2:	08 95       	ret

00004ca4 <_ZN11CLaserBoard5PWMOnEv>:
    4ca4:	84 e0       	ldi	r24, 0x04	; 4
    4ca6:	80 93 85 06 	sts	0x0685, r24
    4caa:	08 95       	ret

00004cac <_ZN11CLaserBoard6PWMOffEv>:
    4cac:	84 e0       	ldi	r24, 0x04	; 4
    4cae:	80 93 86 06 	sts	0x0686, r24
    4cb2:	08 95       	ret

00004cb4 <_ZN11CLaserBoard8Relay1OnEv>:
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	80 93 62 06 	sts	0x0662, r24
    4cba:	08 95       	ret

00004cbc <_ZN11CLaserBoard8Relay2OnEv>:
    4cbc:	80 e1       	ldi	r24, 0x10	; 16
    4cbe:	80 93 62 06 	sts	0x0662, r24
    4cc2:	08 95       	ret

00004cc4 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    4cc4:	80 e1       	ldi	r24, 0x10	; 16
    4cc6:	80 93 61 06 	sts	0x0661, r24
    4cca:	08 95       	ret

00004ccc <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    4ccc:	82 e0       	ldi	r24, 0x02	; 2
    4cce:	80 93 85 06 	sts	0x0685, r24
    4cd2:	08 95       	ret

00004cd4 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    4cd4:	82 e0       	ldi	r24, 0x02	; 2
    4cd6:	80 93 86 06 	sts	0x0686, r24
    4cda:	08 95       	ret

00004cdc <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    4cdc:	f8 94       	cli
    4cde:	84 e6       	ldi	r24, 0x64	; 100
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    4ce2:	e0 e8       	ldi	r30, 0x80	; 128
    4ce4:	f6 e0       	ldi	r31, 0x06	; 6
    4ce6:	28 e0       	ldi	r18, 0x08	; 8
    4ce8:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4cea:	af e9       	ldi	r26, 0x9F	; 159
    4cec:	bf e0       	ldi	r27, 0x0F	; 15
    4cee:	11 97       	sbiw	r26, 0x01	; 1
    4cf0:	f1 f7       	brne	.-4      	; 0x4cee <_ZN11CLaserBoard4BeepEv+0x12>
    4cf2:	00 c0       	rjmp	.+0      	; 0x4cf4 <_ZN11CLaserBoard4BeepEv+0x18>
    4cf4:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    4cf6:	26 83       	std	Z+6, r18	; 0x06
    4cf8:	af e9       	ldi	r26, 0x9F	; 159
    4cfa:	bf e0       	ldi	r27, 0x0F	; 15
    4cfc:	11 97       	sbiw	r26, 0x01	; 1
    4cfe:	f1 f7       	brne	.-4      	; 0x4cfc <_ZN11CLaserBoard4BeepEv+0x20>
    4d00:	00 c0       	rjmp	.+0      	; 0x4d02 <_ZN11CLaserBoard4BeepEv+0x26>
    4d02:	00 00       	nop
    4d04:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    4d06:	81 f7       	brne	.-32     	; 0x4ce8 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    4d08:	78 94       	sei
    4d0a:	08 95       	ret

00004d0c <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    4d0c:	f8 94       	cli
    4d0e:	45 e0       	ldi	r20, 0x05	; 5
    4d10:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    4d12:	64 e6       	ldi	r22, 0x64	; 100
    4d14:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    4d16:	e0 e8       	ldi	r30, 0x80	; 128
    4d18:	f6 e0       	ldi	r31, 0x06	; 6
    4d1a:	28 e0       	ldi	r18, 0x08	; 8
    4d1c:	1c c0       	rjmp	.+56     	; 0x4d56 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    4d1e:	25 83       	std	Z+5, r18	; 0x05
    4d20:	af e9       	ldi	r26, 0x9F	; 159
    4d22:	bf e0       	ldi	r27, 0x0F	; 15
    4d24:	11 97       	sbiw	r26, 0x01	; 1
    4d26:	f1 f7       	brne	.-4      	; 0x4d24 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    4d28:	00 c0       	rjmp	.+0      	; 0x4d2a <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    4d2a:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    4d2c:	26 83       	std	Z+6, r18	; 0x06
    4d2e:	af e9       	ldi	r26, 0x9F	; 159
    4d30:	bf e0       	ldi	r27, 0x0F	; 15
    4d32:	11 97       	sbiw	r26, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    4d36:	00 c0       	rjmp	.+0      	; 0x4d38 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    4d38:	00 00       	nop
    4d3a:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    4d3c:	81 f7       	brne	.-32     	; 0x4d1e <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4d3e:	bf ef       	ldi	r27, 0xFF	; 255
    4d40:	73 ec       	ldi	r23, 0xC3	; 195
    4d42:	89 e0       	ldi	r24, 0x09	; 9
    4d44:	b1 50       	subi	r27, 0x01	; 1
    4d46:	70 40       	sbci	r23, 0x00	; 0
    4d48:	80 40       	sbci	r24, 0x00	; 0
    4d4a:	e1 f7       	brne	.-8      	; 0x4d44 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    4d4c:	00 c0       	rjmp	.+0      	; 0x4d4e <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    4d4e:	00 00       	nop
    4d50:	41 50       	subi	r20, 0x01	; 1
    4d52:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    4d54:	19 f0       	breq	.+6      	; 0x4d5c <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    4d56:	86 2f       	mov	r24, r22
    4d58:	93 2f       	mov	r25, r19
    4d5a:	e1 cf       	rjmp	.-62     	; 0x4d1e <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    4d5c:	78 94       	sei
    4d5e:	08 95       	ret

00004d60 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    4d60:	20 91 48 06 	lds	r18, 0x0648
    4d64:	fc 01       	movw	r30, r24
    4d66:	21 87       	std	Z+9, r18	; 0x09
    4d68:	08 95       	ret

00004d6a <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	81 85       	ldd	r24, Z+9	; 0x09
    4d6e:	81 70       	andi	r24, 0x01	; 1
    4d70:	08 95       	ret

00004d72 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    4d72:	08 95       	ret

00004d74 <_ZN12CSoundPlayerD1Ev>:
    4d74:	08 95       	ret

00004d76 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    4d76:	e0 e0       	ldi	r30, 0x00	; 0
    4d78:	fa e0       	ldi	r31, 0x0A	; 10
    4d7a:	10 82       	st	Z, r1
    4d7c:	87 e8       	ldi	r24, 0x87	; 135
    4d7e:	81 83       	std	Z+1, r24	; 0x01
    4d80:	13 82       	std	Z+3, r1	; 0x03
    4d82:	84 e2       	ldi	r24, 0x24	; 36
    4d84:	94 ef       	ldi	r25, 0xF4	; 244
    4d86:	86 a3       	std	Z+38, r24	; 0x26
    4d88:	97 a3       	std	Z+39, r25	; 0x27
    4d8a:	82 e1       	ldi	r24, 0x12	; 18
    4d8c:	9a e7       	ldi	r25, 0x7A	; 122
    4d8e:	86 a7       	std	Z+46, r24	; 0x2e
    4d90:	97 a7       	std	Z+47, r25	; 0x2f
    4d92:	16 82       	std	Z+6, r1	; 0x06
    4d94:	17 82       	std	Z+7, r1	; 0x07
    4d96:	08 95       	ret

00004d98 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    4d98:	e0 e4       	ldi	r30, 0x40	; 64
    4d9a:	fa e0       	ldi	r31, 0x0A	; 10
    4d9c:	10 82       	st	Z, r1
    4d9e:	11 82       	std	Z+1, r1	; 0x01
    4da0:	13 82       	std	Z+3, r1	; 0x03
    4da2:	84 e2       	ldi	r24, 0x24	; 36
    4da4:	94 ef       	ldi	r25, 0xF4	; 244
    4da6:	86 a3       	std	Z+38, r24	; 0x26
    4da8:	97 a3       	std	Z+39, r25	; 0x27
    4daa:	16 82       	std	Z+6, r1	; 0x06
    4dac:	17 82       	std	Z+7, r1	; 0x07
    4dae:	08 95       	ret

00004db0 <_ZN12CSoundPlayer10SoundStartEjjh>:
    4db0:	0f 93       	push	r16
    4db2:	1f 93       	push	r17
    4db4:	cf 93       	push	r28
    4db6:	8a 01       	movw	r16, r20
    4db8:	c2 2f       	mov	r28, r18
    4dba:	9b 01       	movw	r18, r22
    4dbc:	40 e0       	ldi	r20, 0x00	; 0
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	64 e2       	ldi	r22, 0x24	; 36
    4dc2:	74 ef       	ldi	r23, 0xF4	; 244
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	0e 94 9f 2c 	call	0x593e	; 0x593e <__divmodsi4>
    4dcc:	b8 01       	movw	r22, r16
    4dce:	76 95       	lsr	r23
    4dd0:	67 95       	ror	r22
    4dd2:	ee e3       	ldi	r30, 0x3E	; 62
    4dd4:	e0 9f       	mul	r30, r16
    4dd6:	c0 01       	movw	r24, r0
    4dd8:	e1 9f       	mul	r30, r17
    4dda:	90 0d       	add	r25, r0
    4ddc:	11 24       	eor	r1, r1
    4dde:	86 0f       	add	r24, r22
    4de0:	97 1f       	adc	r25, r23
    4de2:	cf 5f       	subi	r28, 0xFF	; 255
    4de4:	b9 01       	movw	r22, r18
    4de6:	02 c0       	rjmp	.+4      	; 0x4dec <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    4de8:	76 95       	lsr	r23
    4dea:	67 95       	ror	r22
    4dec:	ca 95       	dec	r28
    4dee:	e2 f7       	brpl	.-8      	; 0x4de8 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    4df0:	e0 e0       	ldi	r30, 0x00	; 0
    4df2:	fa e0       	ldi	r31, 0x0A	; 10
    4df4:	66 a7       	std	Z+46, r22	; 0x2e
    4df6:	77 a7       	std	Z+47, r23	; 0x2f
    4df8:	26 a3       	std	Z+38, r18	; 0x26
    4dfa:	37 a3       	std	Z+39, r19	; 0x27
    4dfc:	a0 e4       	ldi	r26, 0x40	; 64
    4dfe:	ba e0       	ldi	r27, 0x0A	; 10
    4e00:	96 96       	adiw	r26, 0x26	; 38
    4e02:	8d 93       	st	X+, r24
    4e04:	9c 93       	st	X, r25
    4e06:	97 97       	sbiw	r26, 0x27	; 39
    4e08:	86 e0       	ldi	r24, 0x06	; 6
    4e0a:	80 83       	st	Z, r24
    4e0c:	87 e0       	ldi	r24, 0x07	; 7
    4e0e:	8c 93       	st	X, r24
    4e10:	cf 91       	pop	r28
    4e12:	1f 91       	pop	r17
    4e14:	0f 91       	pop	r16
    4e16:	08 95       	ret

00004e18 <_ZN12CSoundPlayer9SoundStopEv>:
    4e18:	e0 e4       	ldi	r30, 0x40	; 64
    4e1a:	fa e0       	ldi	r31, 0x0A	; 10
    4e1c:	84 85       	ldd	r24, Z+12	; 0x0c
    4e1e:	80 ff       	sbrs	r24, 0
    4e20:	fd cf       	rjmp	.-6      	; 0x4e1c <_ZN12CSoundPlayer9SoundStopEv+0x4>
    4e22:	e0 e4       	ldi	r30, 0x40	; 64
    4e24:	fa e0       	ldi	r31, 0x0A	; 10
    4e26:	84 85       	ldd	r24, Z+12	; 0x0c
    4e28:	81 70       	andi	r24, 0x01	; 1
    4e2a:	84 87       	std	Z+12, r24	; 0x0c
    4e2c:	a0 e0       	ldi	r26, 0x00	; 0
    4e2e:	ba e0       	ldi	r27, 0x0A	; 10
    4e30:	1c 92       	st	X, r1
    4e32:	10 82       	st	Z, r1
    4e34:	10 a2       	std	Z+32, r1	; 0x20
    4e36:	11 a2       	std	Z+33, r1	; 0x21
    4e38:	90 96       	adiw	r26, 0x20	; 32
    4e3a:	1d 92       	st	X+, r1
    4e3c:	1c 92       	st	X, r1
    4e3e:	91 97       	sbiw	r26, 0x21	; 33
    4e40:	2f ef       	ldi	r18, 0xFF	; 255
    4e42:	83 ef       	ldi	r24, 0xF3	; 243
    4e44:	91 e0       	ldi	r25, 0x01	; 1
    4e46:	21 50       	subi	r18, 0x01	; 1
    4e48:	80 40       	sbci	r24, 0x00	; 0
    4e4a:	90 40       	sbci	r25, 0x00	; 0
    4e4c:	e1 f7       	brne	.-8      	; 0x4e46 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    4e4e:	00 c0       	rjmp	.+0      	; 0x4e50 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    4e50:	00 00       	nop
    4e52:	08 95       	ret

00004e54 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    4e54:	cf 93       	push	r28
    4e56:	df 93       	push	r29
    4e58:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    4e5a:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    4e5e:	ce 01       	movw	r24, r28
    4e60:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    4e64:	df 91       	pop	r29
    4e66:	cf 91       	pop	r28
    4e68:	08 95       	ret

00004e6a <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4e6e:	e0 e0       	ldi	r30, 0x00	; 0
    4e70:	f8 e0       	ldi	r31, 0x08	; 8
    4e72:	80 81       	ld	r24, Z
    4e74:	80 7f       	andi	r24, 0xF0	; 240
    4e76:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    4e78:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    4e7a:	10 a2       	std	Z+32, r1	; 0x20
    4e7c:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    4e7e:	10 a6       	std	Z+40, r1	; 0x28
    4e80:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    4e82:	12 a6       	std	Z+42, r1	; 0x2a
    4e84:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    4e86:	14 a6       	std	Z+44, r1	; 0x2c
    4e88:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    4e8a:	16 a6       	std	Z+46, r1	; 0x2e
    4e8c:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    4e8e:	16 a2       	std	Z+38, r1	; 0x26
    4e90:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    4e92:	81 81       	ldd	r24, Z+1	; 0x01
    4e94:	88 7f       	andi	r24, 0xF8	; 248
    4e96:	68 2b       	or	r22, r24
    4e98:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4e9a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4e9c:	17 82       	std	Z+7, r1	; 0x07
    4e9e:	08 95       	ret

00004ea0 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    4ea0:	e0 e0       	ldi	r30, 0x00	; 0
    4ea2:	f8 e0       	ldi	r31, 0x08	; 8
    4ea4:	66 a3       	std	Z+38, r22	; 0x26
    4ea6:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    4ea8:	20 81       	ld	r18, Z
    4eaa:	20 7f       	andi	r18, 0xF0	; 240
    4eac:	dc 01       	movw	r26, r24
    4eae:	12 96       	adiw	r26, 0x02	; 2
    4eb0:	9c 91       	ld	r25, X
    4eb2:	82 2f       	mov	r24, r18
    4eb4:	89 2b       	or	r24, r25
    4eb6:	80 83       	st	Z, r24
    4eb8:	08 95       	ret

00004eba <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4eba:	e0 e0       	ldi	r30, 0x00	; 0
    4ebc:	f8 e0       	ldi	r31, 0x08	; 8
    4ebe:	80 81       	ld	r24, Z
    4ec0:	80 7f       	andi	r24, 0xF0	; 240
    4ec2:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    4ec4:	10 a2       	std	Z+32, r1	; 0x20
    4ec6:	11 a2       	std	Z+33, r1	; 0x21
    4ec8:	08 95       	ret

00004eca <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    4eca:	e0 e0       	ldi	r30, 0x00	; 0
    4ecc:	f8 e0       	ldi	r31, 0x08	; 8
    4ece:	81 81       	ldd	r24, Z+1	; 0x01
    4ed0:	8f 70       	andi	r24, 0x0F	; 15
    4ed2:	68 2b       	or	r22, r24
    4ed4:	61 83       	std	Z+1, r22	; 0x01
    4ed6:	08 95       	ret

00004ed8 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    4ed8:	e0 e0       	ldi	r30, 0x00	; 0
    4eda:	f8 e0       	ldi	r31, 0x08	; 8
    4edc:	81 81       	ldd	r24, Z+1	; 0x01
    4ede:	60 95       	com	r22
    4ee0:	68 23       	and	r22, r24
    4ee2:	61 83       	std	Z+1, r22	; 0x01
    4ee4:	08 95       	ret

00004ee6 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    4ee6:	60 93 26 08 	sts	0x0826, r22
    4eea:	70 93 27 08 	sts	0x0827, r23
    4eee:	08 95       	ret

00004ef0 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    4ef0:	60 93 28 08 	sts	0x0828, r22
    4ef4:	70 93 29 08 	sts	0x0829, r23
    4ef8:	08 95       	ret

00004efa <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    4efa:	60 93 2a 08 	sts	0x082A, r22
    4efe:	70 93 2b 08 	sts	0x082B, r23
    4f02:	08 95       	ret

00004f04 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    4f04:	60 93 2c 08 	sts	0x082C, r22
    4f08:	70 93 2d 08 	sts	0x082D, r23
    4f0c:	08 95       	ret

00004f0e <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    4f0e:	60 93 2e 08 	sts	0x082E, r22
    4f12:	70 93 2f 08 	sts	0x082F, r23
    4f16:	08 95       	ret

00004f18 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    4f18:	61 15       	cp	r22, r1
    4f1a:	71 05       	cpc	r23, r1
    4f1c:	31 f0       	breq	.+12     	; 0x4f2a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    4f1e:	e0 e0       	ldi	r30, 0x00	; 0
    4f20:	f8 e0       	ldi	r31, 0x08	; 8
    4f22:	86 81       	ldd	r24, Z+6	; 0x06
    4f24:	83 70       	andi	r24, 0x03	; 3
    4f26:	28 2b       	or	r18, r24
    4f28:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    4f2a:	60 93 c3 21 	sts	0x21C3, r22
    4f2e:	70 93 c4 21 	sts	0x21C4, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    4f32:	40 93 b9 22 	sts	0x22B9, r20
    4f36:	50 93 ba 22 	sts	0x22BA, r21
    4f3a:	08 95       	ret

00004f3c <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    4f3c:	61 15       	cp	r22, r1
    4f3e:	71 05       	cpc	r23, r1
    4f40:	31 f0       	breq	.+12     	; 0x4f4e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    4f42:	e0 e0       	ldi	r30, 0x00	; 0
    4f44:	f8 e0       	ldi	r31, 0x08	; 8
    4f46:	86 81       	ldd	r24, Z+6	; 0x06
    4f48:	8c 70       	andi	r24, 0x0C	; 12
    4f4a:	28 2b       	or	r18, r24
    4f4c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    4f4e:	60 93 c5 21 	sts	0x21C5, r22
    4f52:	70 93 c6 21 	sts	0x21C6, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    4f56:	40 93 bb 22 	sts	0x22BB, r20
    4f5a:	50 93 bc 22 	sts	0x22BC, r21
    4f5e:	08 95       	ret

00004f60 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    4f60:	61 15       	cp	r22, r1
    4f62:	71 05       	cpc	r23, r1
    4f64:	31 f0       	breq	.+12     	; 0x4f72 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    4f66:	e0 e0       	ldi	r30, 0x00	; 0
    4f68:	f8 e0       	ldi	r31, 0x08	; 8
    4f6a:	87 81       	ldd	r24, Z+7	; 0x07
    4f6c:	83 70       	andi	r24, 0x03	; 3
    4f6e:	28 2b       	or	r18, r24
    4f70:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    4f72:	60 93 c7 21 	sts	0x21C7, r22
    4f76:	70 93 c8 21 	sts	0x21C8, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    4f7a:	40 93 bd 22 	sts	0x22BD, r20
    4f7e:	50 93 be 22 	sts	0x22BE, r21
    4f82:	08 95       	ret

00004f84 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    4f84:	61 15       	cp	r22, r1
    4f86:	71 05       	cpc	r23, r1
    4f88:	31 f0       	breq	.+12     	; 0x4f96 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    4f8a:	e0 e0       	ldi	r30, 0x00	; 0
    4f8c:	f8 e0       	ldi	r31, 0x08	; 8
    4f8e:	87 81       	ldd	r24, Z+7	; 0x07
    4f90:	8c 70       	andi	r24, 0x0C	; 12
    4f92:	28 2b       	or	r18, r24
    4f94:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    4f96:	60 93 c9 21 	sts	0x21C9, r22
    4f9a:	70 93 ca 21 	sts	0x21CA, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    4f9e:	40 93 bf 22 	sts	0x22BF, r20
    4fa2:	50 93 c0 22 	sts	0x22C0, r21
    4fa6:	08 95       	ret

00004fa8 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    4fa8:	61 15       	cp	r22, r1
    4faa:	71 05       	cpc	r23, r1
    4fac:	31 f0       	breq	.+12     	; 0x4fba <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    4fae:	e0 e0       	ldi	r30, 0x00	; 0
    4fb0:	f8 e0       	ldi	r31, 0x08	; 8
    4fb2:	87 81       	ldd	r24, Z+7	; 0x07
    4fb4:	80 73       	andi	r24, 0x30	; 48
    4fb6:	28 2b       	or	r18, r24
    4fb8:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    4fba:	60 93 cb 21 	sts	0x21CB, r22
    4fbe:	70 93 cc 21 	sts	0x21CC, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    4fc2:	40 93 c1 22 	sts	0x22C1, r20
    4fc6:	50 93 c2 22 	sts	0x22C2, r21
    4fca:	08 95       	ret

00004fcc <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    4fcc:	61 15       	cp	r22, r1
    4fce:	71 05       	cpc	r23, r1
    4fd0:	31 f0       	breq	.+12     	; 0x4fde <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    4fd2:	e0 e0       	ldi	r30, 0x00	; 0
    4fd4:	f8 e0       	ldi	r31, 0x08	; 8
    4fd6:	87 81       	ldd	r24, Z+7	; 0x07
    4fd8:	80 7c       	andi	r24, 0xC0	; 192
    4fda:	28 2b       	or	r18, r24
    4fdc:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    4fde:	60 93 cd 21 	sts	0x21CD, r22
    4fe2:	70 93 ce 21 	sts	0x21CE, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    4fe6:	40 93 c3 22 	sts	0x22C3, r20
    4fea:	50 93 c4 22 	sts	0x22C4, r21
    4fee:	08 95       	ret

00004ff0 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    4ff0:	cf 93       	push	r28
    4ff2:	df 93       	push	r29
    4ff4:	ec 01       	movw	r28, r24
    4ff6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6CTimerC1Ev>
    4ffa:	86 ef       	ldi	r24, 0xF6	; 246
    4ffc:	90 e2       	ldi	r25, 0x20	; 32
    4ffe:	88 83       	st	Y, r24
    5000:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5002:	df 91       	pop	r29
    5004:	cf 91       	pop	r28
    5006:	08 95       	ret

00005008 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5008:	26 ef       	ldi	r18, 0xF6	; 246
    500a:	30 e2       	ldi	r19, 0x20	; 32
    500c:	fc 01       	movw	r30, r24
    500e:	20 83       	st	Z, r18
    5010:	31 83       	std	Z+1, r19	; 0x01
    5012:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN6CTimerD1Ev>
    5016:	08 95       	ret

00005018 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5018:	fc 01       	movw	r30, r24
    501a:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    501c:	e0 e4       	ldi	r30, 0x40	; 64
    501e:	f8 e0       	ldi	r31, 0x08	; 8
    5020:	80 81       	ld	r24, Z
    5022:	80 7f       	andi	r24, 0xF0	; 240
    5024:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5026:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5028:	10 a2       	std	Z+32, r1	; 0x20
    502a:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    502c:	10 a6       	std	Z+40, r1	; 0x28
    502e:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5030:	12 a6       	std	Z+42, r1	; 0x2a
    5032:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5034:	16 a2       	std	Z+38, r1	; 0x26
    5036:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5038:	81 81       	ldd	r24, Z+1	; 0x01
    503a:	88 7f       	andi	r24, 0xF8	; 248
    503c:	68 2b       	or	r22, r24
    503e:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5040:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5042:	17 82       	std	Z+7, r1	; 0x07
    5044:	08 95       	ret

00005046 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5046:	e0 e4       	ldi	r30, 0x40	; 64
    5048:	f8 e0       	ldi	r31, 0x08	; 8
    504a:	66 a3       	std	Z+38, r22	; 0x26
    504c:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    504e:	20 81       	ld	r18, Z
    5050:	20 7f       	andi	r18, 0xF0	; 240
    5052:	dc 01       	movw	r26, r24
    5054:	12 96       	adiw	r26, 0x02	; 2
    5056:	9c 91       	ld	r25, X
    5058:	82 2f       	mov	r24, r18
    505a:	89 2b       	or	r24, r25
    505c:	80 83       	st	Z, r24
    505e:	08 95       	ret

00005060 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5060:	e0 e4       	ldi	r30, 0x40	; 64
    5062:	f8 e0       	ldi	r31, 0x08	; 8
    5064:	80 81       	ld	r24, Z
    5066:	80 7f       	andi	r24, 0xF0	; 240
    5068:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    506a:	10 a2       	std	Z+32, r1	; 0x20
    506c:	11 a2       	std	Z+33, r1	; 0x21
    506e:	08 95       	ret

00005070 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5070:	e0 e4       	ldi	r30, 0x40	; 64
    5072:	f8 e0       	ldi	r31, 0x08	; 8
    5074:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5076:	80 81       	ld	r24, Z
    5078:	80 7f       	andi	r24, 0xF0	; 240
    507a:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    507c:	10 a2       	std	Z+32, r1	; 0x20
    507e:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5080:	90 83       	st	Z, r25
    5082:	08 95       	ret

00005084 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5084:	e0 e4       	ldi	r30, 0x40	; 64
    5086:	f8 e0       	ldi	r31, 0x08	; 8
    5088:	81 81       	ldd	r24, Z+1	; 0x01
    508a:	8f 70       	andi	r24, 0x0F	; 15
    508c:	68 2b       	or	r22, r24
    508e:	61 83       	std	Z+1, r22	; 0x01
    5090:	08 95       	ret

00005092 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5092:	e0 e4       	ldi	r30, 0x40	; 64
    5094:	f8 e0       	ldi	r31, 0x08	; 8
    5096:	81 81       	ldd	r24, Z+1	; 0x01
    5098:	60 95       	com	r22
    509a:	68 23       	and	r22, r24
    509c:	61 83       	std	Z+1, r22	; 0x01
    509e:	08 95       	ret

000050a0 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    50a0:	60 93 66 08 	sts	0x0866, r22
    50a4:	70 93 67 08 	sts	0x0867, r23
    50a8:	08 95       	ret

000050aa <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    50aa:	60 93 68 08 	sts	0x0868, r22
    50ae:	70 93 69 08 	sts	0x0869, r23
    50b2:	08 95       	ret

000050b4 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    50b4:	60 93 6a 08 	sts	0x086A, r22
    50b8:	70 93 6b 08 	sts	0x086B, r23
    50bc:	08 95       	ret

000050be <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    50be:	61 15       	cp	r22, r1
    50c0:	71 05       	cpc	r23, r1
    50c2:	31 f0       	breq	.+12     	; 0x50d0 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    50c4:	e0 e4       	ldi	r30, 0x40	; 64
    50c6:	f8 e0       	ldi	r31, 0x08	; 8
    50c8:	86 81       	ldd	r24, Z+6	; 0x06
    50ca:	83 70       	andi	r24, 0x03	; 3
    50cc:	28 2b       	or	r18, r24
    50ce:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    50d0:	60 93 cf 21 	sts	0x21CF, r22
    50d4:	70 93 d0 21 	sts	0x21D0, r23
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    50d8:	40 93 c5 22 	sts	0x22C5, r20
    50dc:	50 93 c6 22 	sts	0x22C6, r21
    50e0:	08 95       	ret

000050e2 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    50e2:	61 15       	cp	r22, r1
    50e4:	71 05       	cpc	r23, r1
    50e6:	31 f0       	breq	.+12     	; 0x50f4 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    50e8:	e0 e4       	ldi	r30, 0x40	; 64
    50ea:	f8 e0       	ldi	r31, 0x08	; 8
    50ec:	86 81       	ldd	r24, Z+6	; 0x06
    50ee:	8c 70       	andi	r24, 0x0C	; 12
    50f0:	28 2b       	or	r18, r24
    50f2:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    50f4:	60 93 d1 21 	sts	0x21D1, r22
    50f8:	70 93 d2 21 	sts	0x21D2, r23
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    50fc:	40 93 c7 22 	sts	0x22C7, r20
    5100:	50 93 c8 22 	sts	0x22C8, r21
    5104:	08 95       	ret

00005106 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5106:	61 15       	cp	r22, r1
    5108:	71 05       	cpc	r23, r1
    510a:	31 f0       	breq	.+12     	; 0x5118 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    510c:	e0 e4       	ldi	r30, 0x40	; 64
    510e:	f8 e0       	ldi	r31, 0x08	; 8
    5110:	87 81       	ldd	r24, Z+7	; 0x07
    5112:	83 70       	andi	r24, 0x03	; 3
    5114:	28 2b       	or	r18, r24
    5116:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5118:	60 93 d3 21 	sts	0x21D3, r22
    511c:	70 93 d4 21 	sts	0x21D4, r23
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5120:	40 93 c9 22 	sts	0x22C9, r20
    5124:	50 93 ca 22 	sts	0x22CA, r21
    5128:	08 95       	ret

0000512a <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    512a:	61 15       	cp	r22, r1
    512c:	71 05       	cpc	r23, r1
    512e:	31 f0       	breq	.+12     	; 0x513c <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5130:	e0 e4       	ldi	r30, 0x40	; 64
    5132:	f8 e0       	ldi	r31, 0x08	; 8
    5134:	87 81       	ldd	r24, Z+7	; 0x07
    5136:	8c 70       	andi	r24, 0x0C	; 12
    5138:	28 2b       	or	r18, r24
    513a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    513c:	60 93 d5 21 	sts	0x21D5, r22
    5140:	70 93 d6 21 	sts	0x21D6, r23
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5144:	40 93 cb 22 	sts	0x22CB, r20
    5148:	50 93 cc 22 	sts	0x22CC, r21
    514c:	08 95       	ret

0000514e <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    514e:	cf 93       	push	r28
    5150:	df 93       	push	r29
    5152:	ec 01       	movw	r28, r24
    5154:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN7CTimer1C1Ev>
    5158:	8a e1       	ldi	r24, 0x1A	; 26
    515a:	91 e2       	ldi	r25, 0x21	; 33
    515c:	88 83       	st	Y, r24
    515e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	08 95       	ret

00005166 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5166:	2a e1       	ldi	r18, 0x1A	; 26
    5168:	31 e2       	ldi	r19, 0x21	; 33
    516a:	fc 01       	movw	r30, r24
    516c:	20 83       	st	Z, r18
    516e:	31 83       	std	Z+1, r19	; 0x01
    5170:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN7CTimer1D1Ev>
    5174:	08 95       	ret

00005176 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5176:	fc 01       	movw	r30, r24
    5178:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    517a:	e0 e0       	ldi	r30, 0x00	; 0
    517c:	f9 e0       	ldi	r31, 0x09	; 9
    517e:	80 81       	ld	r24, Z
    5180:	80 7f       	andi	r24, 0xF0	; 240
    5182:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5184:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5186:	10 a2       	std	Z+32, r1	; 0x20
    5188:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    518a:	10 a6       	std	Z+40, r1	; 0x28
    518c:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    518e:	12 a6       	std	Z+42, r1	; 0x2a
    5190:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    5192:	14 a6       	std	Z+44, r1	; 0x2c
    5194:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    5196:	16 a6       	std	Z+46, r1	; 0x2e
    5198:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    519a:	16 a2       	std	Z+38, r1	; 0x26
    519c:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    519e:	81 81       	ldd	r24, Z+1	; 0x01
    51a0:	88 7f       	andi	r24, 0xF8	; 248
    51a2:	68 2b       	or	r22, r24
    51a4:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    51a6:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    51a8:	17 82       	std	Z+7, r1	; 0x07
    51aa:	08 95       	ret

000051ac <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    51ac:	e0 e0       	ldi	r30, 0x00	; 0
    51ae:	f9 e0       	ldi	r31, 0x09	; 9
    51b0:	66 a3       	std	Z+38, r22	; 0x26
    51b2:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    51b4:	20 81       	ld	r18, Z
    51b6:	20 7f       	andi	r18, 0xF0	; 240
    51b8:	dc 01       	movw	r26, r24
    51ba:	12 96       	adiw	r26, 0x02	; 2
    51bc:	9c 91       	ld	r25, X
    51be:	82 2f       	mov	r24, r18
    51c0:	89 2b       	or	r24, r25
    51c2:	80 83       	st	Z, r24
    51c4:	08 95       	ret

000051c6 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    51c6:	e0 e0       	ldi	r30, 0x00	; 0
    51c8:	f9 e0       	ldi	r31, 0x09	; 9
    51ca:	80 81       	ld	r24, Z
    51cc:	80 7f       	andi	r24, 0xF0	; 240
    51ce:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    51d0:	10 a2       	std	Z+32, r1	; 0x20
    51d2:	11 a2       	std	Z+33, r1	; 0x21
    51d4:	08 95       	ret

000051d6 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    51d6:	e0 e0       	ldi	r30, 0x00	; 0
    51d8:	f9 e0       	ldi	r31, 0x09	; 9
    51da:	81 81       	ldd	r24, Z+1	; 0x01
    51dc:	8f 70       	andi	r24, 0x0F	; 15
    51de:	68 2b       	or	r22, r24
    51e0:	61 83       	std	Z+1, r22	; 0x01
    51e2:	08 95       	ret

000051e4 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    51e4:	e0 e0       	ldi	r30, 0x00	; 0
    51e6:	f9 e0       	ldi	r31, 0x09	; 9
    51e8:	81 81       	ldd	r24, Z+1	; 0x01
    51ea:	60 95       	com	r22
    51ec:	68 23       	and	r22, r24
    51ee:	61 83       	std	Z+1, r22	; 0x01
    51f0:	08 95       	ret

000051f2 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    51f2:	60 93 26 09 	sts	0x0926, r22
    51f6:	70 93 27 09 	sts	0x0927, r23
    51fa:	08 95       	ret

000051fc <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    51fc:	60 93 28 09 	sts	0x0928, r22
    5200:	70 93 29 09 	sts	0x0929, r23
    5204:	08 95       	ret

00005206 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    5206:	60 93 2a 09 	sts	0x092A, r22
    520a:	70 93 2b 09 	sts	0x092B, r23
    520e:	08 95       	ret

00005210 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    5210:	60 93 2c 09 	sts	0x092C, r22
    5214:	70 93 2d 09 	sts	0x092D, r23
    5218:	08 95       	ret

0000521a <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    521a:	60 93 2e 09 	sts	0x092E, r22
    521e:	70 93 2f 09 	sts	0x092F, r23
    5222:	08 95       	ret

00005224 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5224:	61 15       	cp	r22, r1
    5226:	71 05       	cpc	r23, r1
    5228:	31 f0       	breq	.+12     	; 0x5236 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    522a:	e0 e0       	ldi	r30, 0x00	; 0
    522c:	f9 e0       	ldi	r31, 0x09	; 9
    522e:	86 81       	ldd	r24, Z+6	; 0x06
    5230:	83 70       	andi	r24, 0x03	; 3
    5232:	28 2b       	or	r18, r24
    5234:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    5236:	60 93 41 22 	sts	0x2241, r22
    523a:	70 93 42 22 	sts	0x2242, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    523e:	40 93 37 23 	sts	0x2337, r20
    5242:	50 93 38 23 	sts	0x2338, r21
    5246:	08 95       	ret

00005248 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5248:	61 15       	cp	r22, r1
    524a:	71 05       	cpc	r23, r1
    524c:	31 f0       	breq	.+12     	; 0x525a <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    524e:	e0 e0       	ldi	r30, 0x00	; 0
    5250:	f9 e0       	ldi	r31, 0x09	; 9
    5252:	86 81       	ldd	r24, Z+6	; 0x06
    5254:	8c 70       	andi	r24, 0x0C	; 12
    5256:	28 2b       	or	r18, r24
    5258:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    525a:	60 93 43 22 	sts	0x2243, r22
    525e:	70 93 44 22 	sts	0x2244, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    5262:	40 93 39 23 	sts	0x2339, r20
    5266:	50 93 3a 23 	sts	0x233A, r21
    526a:	08 95       	ret

0000526c <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    526c:	61 15       	cp	r22, r1
    526e:	71 05       	cpc	r23, r1
    5270:	31 f0       	breq	.+12     	; 0x527e <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5272:	e0 e0       	ldi	r30, 0x00	; 0
    5274:	f9 e0       	ldi	r31, 0x09	; 9
    5276:	87 81       	ldd	r24, Z+7	; 0x07
    5278:	83 70       	andi	r24, 0x03	; 3
    527a:	28 2b       	or	r18, r24
    527c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    527e:	60 93 45 22 	sts	0x2245, r22
    5282:	70 93 46 22 	sts	0x2246, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    5286:	40 93 3b 23 	sts	0x233B, r20
    528a:	50 93 3c 23 	sts	0x233C, r21
    528e:	08 95       	ret

00005290 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5290:	61 15       	cp	r22, r1
    5292:	71 05       	cpc	r23, r1
    5294:	31 f0       	breq	.+12     	; 0x52a2 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5296:	e0 e0       	ldi	r30, 0x00	; 0
    5298:	f9 e0       	ldi	r31, 0x09	; 9
    529a:	87 81       	ldd	r24, Z+7	; 0x07
    529c:	8c 70       	andi	r24, 0x0C	; 12
    529e:	28 2b       	or	r18, r24
    52a0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    52a2:	60 93 47 22 	sts	0x2247, r22
    52a6:	70 93 48 22 	sts	0x2248, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    52aa:	40 93 3d 23 	sts	0x233D, r20
    52ae:	50 93 3e 23 	sts	0x233E, r21
    52b2:	08 95       	ret

000052b4 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    52b4:	61 15       	cp	r22, r1
    52b6:	71 05       	cpc	r23, r1
    52b8:	31 f0       	breq	.+12     	; 0x52c6 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    52ba:	e0 e0       	ldi	r30, 0x00	; 0
    52bc:	f9 e0       	ldi	r31, 0x09	; 9
    52be:	87 81       	ldd	r24, Z+7	; 0x07
    52c0:	80 73       	andi	r24, 0x30	; 48
    52c2:	28 2b       	or	r18, r24
    52c4:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    52c6:	60 93 49 22 	sts	0x2249, r22
    52ca:	70 93 4a 22 	sts	0x224A, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    52ce:	40 93 3f 23 	sts	0x233F, r20
    52d2:	50 93 40 23 	sts	0x2340, r21
    52d6:	08 95       	ret

000052d8 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    52d8:	61 15       	cp	r22, r1
    52da:	71 05       	cpc	r23, r1
    52dc:	31 f0       	breq	.+12     	; 0x52ea <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    52de:	e0 e0       	ldi	r30, 0x00	; 0
    52e0:	f9 e0       	ldi	r31, 0x09	; 9
    52e2:	87 81       	ldd	r24, Z+7	; 0x07
    52e4:	80 7c       	andi	r24, 0xC0	; 192
    52e6:	28 2b       	or	r18, r24
    52e8:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    52ea:	60 93 4b 22 	sts	0x224B, r22
    52ee:	70 93 4c 22 	sts	0x224C, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    52f2:	40 93 41 23 	sts	0x2341, r20
    52f6:	50 93 42 23 	sts	0x2342, r21
    52fa:	08 95       	ret

000052fc <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    52fc:	cf 93       	push	r28
    52fe:	df 93       	push	r29
    5300:	ec 01       	movw	r28, r24
    5302:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6CTimerC1Ev>
    5306:	88 e3       	ldi	r24, 0x38	; 56
    5308:	91 e2       	ldi	r25, 0x21	; 33
    530a:	88 83       	st	Y, r24
    530c:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    530e:	df 91       	pop	r29
    5310:	cf 91       	pop	r28
    5312:	08 95       	ret

00005314 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    5314:	28 e3       	ldi	r18, 0x38	; 56
    5316:	31 e2       	ldi	r19, 0x21	; 33
    5318:	fc 01       	movw	r30, r24
    531a:	20 83       	st	Z, r18
    531c:	31 83       	std	Z+1, r19	; 0x01
    531e:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN6CTimerD1Ev>
    5322:	08 95       	ret

00005324 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5324:	fc 01       	movw	r30, r24
    5326:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5328:	e0 e4       	ldi	r30, 0x40	; 64
    532a:	f9 e0       	ldi	r31, 0x09	; 9
    532c:	80 81       	ld	r24, Z
    532e:	80 7f       	andi	r24, 0xF0	; 240
    5330:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5332:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    5334:	10 a2       	std	Z+32, r1	; 0x20
    5336:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    5338:	10 a6       	std	Z+40, r1	; 0x28
    533a:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    533c:	12 a6       	std	Z+42, r1	; 0x2a
    533e:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    5340:	16 a2       	std	Z+38, r1	; 0x26
    5342:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5344:	81 81       	ldd	r24, Z+1	; 0x01
    5346:	88 7f       	andi	r24, 0xF8	; 248
    5348:	68 2b       	or	r22, r24
    534a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    534c:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    534e:	17 82       	std	Z+7, r1	; 0x07
    5350:	08 95       	ret

00005352 <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    5352:	e0 e4       	ldi	r30, 0x40	; 64
    5354:	f9 e0       	ldi	r31, 0x09	; 9
    5356:	66 a3       	std	Z+38, r22	; 0x26
    5358:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    535a:	20 81       	ld	r18, Z
    535c:	20 7f       	andi	r18, 0xF0	; 240
    535e:	dc 01       	movw	r26, r24
    5360:	12 96       	adiw	r26, 0x02	; 2
    5362:	9c 91       	ld	r25, X
    5364:	82 2f       	mov	r24, r18
    5366:	89 2b       	or	r24, r25
    5368:	80 83       	st	Z, r24
    536a:	08 95       	ret

0000536c <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    536c:	e0 e4       	ldi	r30, 0x40	; 64
    536e:	f9 e0       	ldi	r31, 0x09	; 9
    5370:	80 81       	ld	r24, Z
    5372:	80 7f       	andi	r24, 0xF0	; 240
    5374:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    5376:	10 a2       	std	Z+32, r1	; 0x20
    5378:	11 a2       	std	Z+33, r1	; 0x21
    537a:	08 95       	ret

0000537c <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    537c:	e0 e4       	ldi	r30, 0x40	; 64
    537e:	f9 e0       	ldi	r31, 0x09	; 9
    5380:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5382:	80 81       	ld	r24, Z
    5384:	80 7f       	andi	r24, 0xF0	; 240
    5386:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    5388:	10 a2       	std	Z+32, r1	; 0x20
    538a:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    538c:	90 83       	st	Z, r25
    538e:	08 95       	ret

00005390 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    5390:	e0 e4       	ldi	r30, 0x40	; 64
    5392:	f9 e0       	ldi	r31, 0x09	; 9
    5394:	81 81       	ldd	r24, Z+1	; 0x01
    5396:	8f 70       	andi	r24, 0x0F	; 15
    5398:	68 2b       	or	r22, r24
    539a:	61 83       	std	Z+1, r22	; 0x01
    539c:	08 95       	ret

0000539e <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    539e:	e0 e4       	ldi	r30, 0x40	; 64
    53a0:	f9 e0       	ldi	r31, 0x09	; 9
    53a2:	81 81       	ldd	r24, Z+1	; 0x01
    53a4:	60 95       	com	r22
    53a6:	68 23       	and	r22, r24
    53a8:	61 83       	std	Z+1, r22	; 0x01
    53aa:	08 95       	ret

000053ac <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    53ac:	60 93 66 09 	sts	0x0966, r22
    53b0:	70 93 67 09 	sts	0x0967, r23
    53b4:	08 95       	ret

000053b6 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    53b6:	60 93 68 09 	sts	0x0968, r22
    53ba:	70 93 69 09 	sts	0x0969, r23
    53be:	08 95       	ret

000053c0 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    53c0:	60 93 6a 09 	sts	0x096A, r22
    53c4:	70 93 6b 09 	sts	0x096B, r23
    53c8:	08 95       	ret

000053ca <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    53ca:	61 15       	cp	r22, r1
    53cc:	71 05       	cpc	r23, r1
    53ce:	31 f0       	breq	.+12     	; 0x53dc <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCD1.INTCTRLA = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    53d0:	e0 e4       	ldi	r30, 0x40	; 64
    53d2:	f9 e0       	ldi	r31, 0x09	; 9
    53d4:	86 81       	ldd	r24, Z+6	; 0x06
    53d6:	83 70       	andi	r24, 0x03	; 3
    53d8:	28 2b       	or	r18, r24
    53da:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    53dc:	60 93 4d 22 	sts	0x224D, r22
    53e0:	70 93 4e 22 	sts	0x224E, r23
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    53e4:	40 93 43 23 	sts	0x2343, r20
    53e8:	50 93 44 23 	sts	0x2344, r21
    53ec:	08 95       	ret

000053ee <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    53ee:	61 15       	cp	r22, r1
    53f0:	71 05       	cpc	r23, r1
    53f2:	31 f0       	breq	.+12     	; 0x5400 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCD1.INTCTRLA = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    53f4:	e0 e4       	ldi	r30, 0x40	; 64
    53f6:	f9 e0       	ldi	r31, 0x09	; 9
    53f8:	86 81       	ldd	r24, Z+6	; 0x06
    53fa:	8c 70       	andi	r24, 0x0C	; 12
    53fc:	28 2b       	or	r18, r24
    53fe:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    5400:	60 93 4f 22 	sts	0x224F, r22
    5404:	70 93 50 22 	sts	0x2250, r23
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    5408:	40 93 45 23 	sts	0x2345, r20
    540c:	50 93 46 23 	sts	0x2346, r21
    5410:	08 95       	ret

00005412 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5412:	61 15       	cp	r22, r1
    5414:	71 05       	cpc	r23, r1
    5416:	31 f0       	breq	.+12     	; 0x5424 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCD1.INTCTRLB = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5418:	e0 e4       	ldi	r30, 0x40	; 64
    541a:	f9 e0       	ldi	r31, 0x09	; 9
    541c:	87 81       	ldd	r24, Z+7	; 0x07
    541e:	83 70       	andi	r24, 0x03	; 3
    5420:	28 2b       	or	r18, r24
    5422:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    5424:	60 93 51 22 	sts	0x2251, r22
    5428:	70 93 52 22 	sts	0x2252, r23
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    542c:	40 93 47 23 	sts	0x2347, r20
    5430:	50 93 48 23 	sts	0x2348, r21
    5434:	08 95       	ret

00005436 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5436:	61 15       	cp	r22, r1
    5438:	71 05       	cpc	r23, r1
    543a:	31 f0       	breq	.+12     	; 0x5448 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCD1.INTCTRLB = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    543c:	e0 e4       	ldi	r30, 0x40	; 64
    543e:	f9 e0       	ldi	r31, 0x09	; 9
    5440:	87 81       	ldd	r24, Z+7	; 0x07
    5442:	8c 70       	andi	r24, 0x0C	; 12
    5444:	28 2b       	or	r18, r24
    5446:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    5448:	60 93 53 22 	sts	0x2253, r22
    544c:	70 93 54 22 	sts	0x2254, r23
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    5450:	40 93 49 23 	sts	0x2349, r20
    5454:	50 93 4a 23 	sts	0x234A, r21
    5458:	08 95       	ret

0000545a <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	ec 01       	movw	r28, r24
    5460:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN7CTimer1C1Ev>
    5464:	8c e5       	ldi	r24, 0x5C	; 92
    5466:	91 e2       	ldi	r25, 0x21	; 33
    5468:	88 83       	st	Y, r24
    546a:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	08 95       	ret

00005472 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    5472:	2c e5       	ldi	r18, 0x5C	; 92
    5474:	31 e2       	ldi	r19, 0x21	; 33
    5476:	fc 01       	movw	r30, r24
    5478:	20 83       	st	Z, r18
    547a:	31 83       	std	Z+1, r19	; 0x01
    547c:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN7CTimer1D1Ev>
    5480:	08 95       	ret

00005482 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5482:	fc 01       	movw	r30, r24
    5484:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5486:	e0 e0       	ldi	r30, 0x00	; 0
    5488:	fb e0       	ldi	r31, 0x0B	; 11
    548a:	80 81       	ld	r24, Z
    548c:	80 7f       	andi	r24, 0xF0	; 240
    548e:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5490:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    5492:	10 a2       	std	Z+32, r1	; 0x20
    5494:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    5496:	10 a6       	std	Z+40, r1	; 0x28
    5498:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    549a:	12 a6       	std	Z+42, r1	; 0x2a
    549c:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    549e:	14 a6       	std	Z+44, r1	; 0x2c
    54a0:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    54a2:	16 a6       	std	Z+46, r1	; 0x2e
    54a4:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    54a6:	16 a2       	std	Z+38, r1	; 0x26
    54a8:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    54aa:	81 81       	ldd	r24, Z+1	; 0x01
    54ac:	88 7f       	andi	r24, 0xF8	; 248
    54ae:	68 2b       	or	r22, r24
    54b0:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    54b2:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    54b4:	17 82       	std	Z+7, r1	; 0x07
    54b6:	08 95       	ret

000054b8 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    54b8:	e0 e0       	ldi	r30, 0x00	; 0
    54ba:	fb e0       	ldi	r31, 0x0B	; 11
    54bc:	66 a3       	std	Z+38, r22	; 0x26
    54be:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    54c0:	20 81       	ld	r18, Z
    54c2:	20 7f       	andi	r18, 0xF0	; 240
    54c4:	dc 01       	movw	r26, r24
    54c6:	12 96       	adiw	r26, 0x02	; 2
    54c8:	9c 91       	ld	r25, X
    54ca:	82 2f       	mov	r24, r18
    54cc:	89 2b       	or	r24, r25
    54ce:	80 83       	st	Z, r24
    54d0:	08 95       	ret

000054d2 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    54d2:	e0 e0       	ldi	r30, 0x00	; 0
    54d4:	fb e0       	ldi	r31, 0x0B	; 11
    54d6:	80 81       	ld	r24, Z
    54d8:	80 7f       	andi	r24, 0xF0	; 240
    54da:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    54dc:	10 a2       	std	Z+32, r1	; 0x20
    54de:	11 a2       	std	Z+33, r1	; 0x21
    54e0:	08 95       	ret

000054e2 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    54e2:	e0 e0       	ldi	r30, 0x00	; 0
    54e4:	fb e0       	ldi	r31, 0x0B	; 11
    54e6:	81 81       	ldd	r24, Z+1	; 0x01
    54e8:	68 2b       	or	r22, r24
    54ea:	61 83       	std	Z+1, r22	; 0x01
    54ec:	08 95       	ret

000054ee <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    54ee:	e0 e0       	ldi	r30, 0x00	; 0
    54f0:	fb e0       	ldi	r31, 0x0B	; 11
    54f2:	81 81       	ldd	r24, Z+1	; 0x01
    54f4:	60 95       	com	r22
    54f6:	68 23       	and	r22, r24
    54f8:	61 83       	std	Z+1, r22	; 0x01
    54fa:	08 95       	ret

000054fc <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    54fc:	e0 e0       	ldi	r30, 0x00	; 0
    54fe:	fb e0       	ldi	r31, 0x0B	; 11
    5500:	82 81       	ldd	r24, Z+2	; 0x02
    5502:	62 95       	swap	r22
    5504:	6f 70       	andi	r22, 0x0F	; 15
    5506:	68 2b       	or	r22, r24
    5508:	62 83       	std	Z+2, r22	; 0x02
    550a:	08 95       	ret

0000550c <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    550c:	e0 e0       	ldi	r30, 0x00	; 0
    550e:	fb e0       	ldi	r31, 0x0B	; 11
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	62 95       	swap	r22
    5514:	6f 70       	andi	r22, 0x0F	; 15
    5516:	60 95       	com	r22
    5518:	68 23       	and	r22, r24
    551a:	62 83       	std	Z+2, r22	; 0x02
    551c:	08 95       	ret

0000551e <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    551e:	60 93 26 0b 	sts	0x0B26, r22
    5522:	70 93 27 0b 	sts	0x0B27, r23
    5526:	08 95       	ret

00005528 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    5528:	60 93 28 0b 	sts	0x0B28, r22
    552c:	70 93 29 0b 	sts	0x0B29, r23
    5530:	08 95       	ret

00005532 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    5532:	60 93 2a 0b 	sts	0x0B2A, r22
    5536:	70 93 2b 0b 	sts	0x0B2B, r23
    553a:	08 95       	ret

0000553c <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    553c:	60 93 2c 0b 	sts	0x0B2C, r22
    5540:	70 93 2d 0b 	sts	0x0B2D, r23
    5544:	08 95       	ret

00005546 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    5546:	60 93 2e 0b 	sts	0x0B2E, r22
    554a:	70 93 2f 0b 	sts	0x0B2F, r23
    554e:	08 95       	ret

00005550 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5550:	61 15       	cp	r22, r1
    5552:	71 05       	cpc	r23, r1
    5554:	31 f0       	breq	.+12     	; 0x5562 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5556:	e0 e0       	ldi	r30, 0x00	; 0
    5558:	fb e0       	ldi	r31, 0x0B	; 11
    555a:	86 81       	ldd	r24, Z+6	; 0x06
    555c:	83 70       	andi	r24, 0x03	; 3
    555e:	28 2b       	or	r18, r24
    5560:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    5562:	60 93 7f 22 	sts	0x227F, r22
    5566:	70 93 80 22 	sts	0x2280, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    556a:	40 93 75 23 	sts	0x2375, r20
    556e:	50 93 76 23 	sts	0x2376, r21
    5572:	08 95       	ret

00005574 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5574:	61 15       	cp	r22, r1
    5576:	71 05       	cpc	r23, r1
    5578:	31 f0       	breq	.+12     	; 0x5586 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    557a:	e0 e0       	ldi	r30, 0x00	; 0
    557c:	fb e0       	ldi	r31, 0x0B	; 11
    557e:	86 81       	ldd	r24, Z+6	; 0x06
    5580:	8c 70       	andi	r24, 0x0C	; 12
    5582:	28 2b       	or	r18, r24
    5584:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    5586:	60 93 81 22 	sts	0x2281, r22
    558a:	70 93 82 22 	sts	0x2282, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    558e:	40 93 77 23 	sts	0x2377, r20
    5592:	50 93 78 23 	sts	0x2378, r21
    5596:	08 95       	ret

00005598 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5598:	61 15       	cp	r22, r1
    559a:	71 05       	cpc	r23, r1
    559c:	31 f0       	breq	.+12     	; 0x55aa <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    559e:	e0 e0       	ldi	r30, 0x00	; 0
    55a0:	fb e0       	ldi	r31, 0x0B	; 11
    55a2:	87 81       	ldd	r24, Z+7	; 0x07
    55a4:	83 70       	andi	r24, 0x03	; 3
    55a6:	28 2b       	or	r18, r24
    55a8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    55aa:	60 93 83 22 	sts	0x2283, r22
    55ae:	70 93 84 22 	sts	0x2284, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    55b2:	40 93 79 23 	sts	0x2379, r20
    55b6:	50 93 7a 23 	sts	0x237A, r21
    55ba:	08 95       	ret

000055bc <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    55bc:	61 15       	cp	r22, r1
    55be:	71 05       	cpc	r23, r1
    55c0:	31 f0       	breq	.+12     	; 0x55ce <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    55c2:	e0 e0       	ldi	r30, 0x00	; 0
    55c4:	fb e0       	ldi	r31, 0x0B	; 11
    55c6:	87 81       	ldd	r24, Z+7	; 0x07
    55c8:	8c 70       	andi	r24, 0x0C	; 12
    55ca:	28 2b       	or	r18, r24
    55cc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    55ce:	60 93 85 22 	sts	0x2285, r22
    55d2:	70 93 86 22 	sts	0x2286, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    55d6:	40 93 7b 23 	sts	0x237B, r20
    55da:	50 93 7c 23 	sts	0x237C, r21
    55de:	08 95       	ret

000055e0 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    55e0:	61 15       	cp	r22, r1
    55e2:	71 05       	cpc	r23, r1
    55e4:	31 f0       	breq	.+12     	; 0x55f2 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    55e6:	e0 e0       	ldi	r30, 0x00	; 0
    55e8:	fb e0       	ldi	r31, 0x0B	; 11
    55ea:	87 81       	ldd	r24, Z+7	; 0x07
    55ec:	80 73       	andi	r24, 0x30	; 48
    55ee:	28 2b       	or	r18, r24
    55f0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    55f2:	60 93 87 22 	sts	0x2287, r22
    55f6:	70 93 88 22 	sts	0x2288, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    55fa:	40 93 7d 23 	sts	0x237D, r20
    55fe:	50 93 7e 23 	sts	0x237E, r21
    5602:	08 95       	ret

00005604 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5604:	61 15       	cp	r22, r1
    5606:	71 05       	cpc	r23, r1
    5608:	31 f0       	breq	.+12     	; 0x5616 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    560a:	e0 e0       	ldi	r30, 0x00	; 0
    560c:	fb e0       	ldi	r31, 0x0B	; 11
    560e:	87 81       	ldd	r24, Z+7	; 0x07
    5610:	80 7c       	andi	r24, 0xC0	; 192
    5612:	28 2b       	or	r18, r24
    5614:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    5616:	60 93 89 22 	sts	0x2289, r22
    561a:	70 93 8a 22 	sts	0x228A, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    561e:	40 93 7f 23 	sts	0x237F, r20
    5622:	50 93 80 23 	sts	0x2380, r21
    5626:	08 95       	ret

00005628 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    5628:	cf 93       	push	r28
    562a:	df 93       	push	r29
    562c:	ec 01       	movw	r28, r24
    562e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6CTimerC1Ev>
    5632:	8a e7       	ldi	r24, 0x7A	; 122
    5634:	91 e2       	ldi	r25, 0x21	; 33
    5636:	88 83       	st	Y, r24
    5638:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    563a:	df 91       	pop	r29
    563c:	cf 91       	pop	r28
    563e:	08 95       	ret

00005640 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    5640:	2a e7       	ldi	r18, 0x7A	; 122
    5642:	31 e2       	ldi	r19, 0x21	; 33
    5644:	fc 01       	movw	r30, r24
    5646:	20 83       	st	Z, r18
    5648:	31 83       	std	Z+1, r19	; 0x01
    564a:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN6CTimerD1Ev>
    564e:	08 95       	ret

00005650 <__fixsfsi>:
    5650:	0e 94 2f 2b 	call	0x565e	; 0x565e <__fixunssfsi>
    5654:	68 94       	set
    5656:	b1 11       	cpse	r27, r1
    5658:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__fp_szero>
    565c:	08 95       	ret

0000565e <__fixunssfsi>:
    565e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__fp_splitA>
    5662:	88 f0       	brcs	.+34     	; 0x5686 <__fixunssfsi+0x28>
    5664:	9f 57       	subi	r25, 0x7F	; 127
    5666:	98 f0       	brcs	.+38     	; 0x568e <__fixunssfsi+0x30>
    5668:	b9 2f       	mov	r27, r25
    566a:	99 27       	eor	r25, r25
    566c:	b7 51       	subi	r27, 0x17	; 23
    566e:	b0 f0       	brcs	.+44     	; 0x569c <__fixunssfsi+0x3e>
    5670:	e1 f0       	breq	.+56     	; 0x56aa <__fixunssfsi+0x4c>
    5672:	66 0f       	add	r22, r22
    5674:	77 1f       	adc	r23, r23
    5676:	88 1f       	adc	r24, r24
    5678:	99 1f       	adc	r25, r25
    567a:	1a f0       	brmi	.+6      	; 0x5682 <__fixunssfsi+0x24>
    567c:	ba 95       	dec	r27
    567e:	c9 f7       	brne	.-14     	; 0x5672 <__fixunssfsi+0x14>
    5680:	14 c0       	rjmp	.+40     	; 0x56aa <__fixunssfsi+0x4c>
    5682:	b1 30       	cpi	r27, 0x01	; 1
    5684:	91 f0       	breq	.+36     	; 0x56aa <__fixunssfsi+0x4c>
    5686:	0e 94 bd 2b 	call	0x577a	; 0x577a <__fp_zero>
    568a:	b1 e0       	ldi	r27, 0x01	; 1
    568c:	08 95       	ret
    568e:	0c 94 bd 2b 	jmp	0x577a	; 0x577a <__fp_zero>
    5692:	67 2f       	mov	r22, r23
    5694:	78 2f       	mov	r23, r24
    5696:	88 27       	eor	r24, r24
    5698:	b8 5f       	subi	r27, 0xF8	; 248
    569a:	39 f0       	breq	.+14     	; 0x56aa <__fixunssfsi+0x4c>
    569c:	b9 3f       	cpi	r27, 0xF9	; 249
    569e:	cc f3       	brlt	.-14     	; 0x5692 <__fixunssfsi+0x34>
    56a0:	86 95       	lsr	r24
    56a2:	77 95       	ror	r23
    56a4:	67 95       	ror	r22
    56a6:	b3 95       	inc	r27
    56a8:	d9 f7       	brne	.-10     	; 0x56a0 <__fixunssfsi+0x42>
    56aa:	3e f4       	brtc	.+14     	; 0x56ba <__fixunssfsi+0x5c>
    56ac:	90 95       	com	r25
    56ae:	80 95       	com	r24
    56b0:	70 95       	com	r23
    56b2:	61 95       	neg	r22
    56b4:	7f 4f       	sbci	r23, 0xFF	; 255
    56b6:	8f 4f       	sbci	r24, 0xFF	; 255
    56b8:	9f 4f       	sbci	r25, 0xFF	; 255
    56ba:	08 95       	ret

000056bc <__floatunsisf>:
    56bc:	e8 94       	clt
    56be:	09 c0       	rjmp	.+18     	; 0x56d2 <__floatsisf+0x12>

000056c0 <__floatsisf>:
    56c0:	97 fb       	bst	r25, 7
    56c2:	3e f4       	brtc	.+14     	; 0x56d2 <__floatsisf+0x12>
    56c4:	90 95       	com	r25
    56c6:	80 95       	com	r24
    56c8:	70 95       	com	r23
    56ca:	61 95       	neg	r22
    56cc:	7f 4f       	sbci	r23, 0xFF	; 255
    56ce:	8f 4f       	sbci	r24, 0xFF	; 255
    56d0:	9f 4f       	sbci	r25, 0xFF	; 255
    56d2:	99 23       	and	r25, r25
    56d4:	a9 f0       	breq	.+42     	; 0x5700 <__floatsisf+0x40>
    56d6:	f9 2f       	mov	r31, r25
    56d8:	96 e9       	ldi	r25, 0x96	; 150
    56da:	bb 27       	eor	r27, r27
    56dc:	93 95       	inc	r25
    56de:	f6 95       	lsr	r31
    56e0:	87 95       	ror	r24
    56e2:	77 95       	ror	r23
    56e4:	67 95       	ror	r22
    56e6:	b7 95       	ror	r27
    56e8:	f1 11       	cpse	r31, r1
    56ea:	f8 cf       	rjmp	.-16     	; 0x56dc <__floatsisf+0x1c>
    56ec:	fa f4       	brpl	.+62     	; 0x572c <__floatsisf+0x6c>
    56ee:	bb 0f       	add	r27, r27
    56f0:	11 f4       	brne	.+4      	; 0x56f6 <__floatsisf+0x36>
    56f2:	60 ff       	sbrs	r22, 0
    56f4:	1b c0       	rjmp	.+54     	; 0x572c <__floatsisf+0x6c>
    56f6:	6f 5f       	subi	r22, 0xFF	; 255
    56f8:	7f 4f       	sbci	r23, 0xFF	; 255
    56fa:	8f 4f       	sbci	r24, 0xFF	; 255
    56fc:	9f 4f       	sbci	r25, 0xFF	; 255
    56fe:	16 c0       	rjmp	.+44     	; 0x572c <__floatsisf+0x6c>
    5700:	88 23       	and	r24, r24
    5702:	11 f0       	breq	.+4      	; 0x5708 <__floatsisf+0x48>
    5704:	96 e9       	ldi	r25, 0x96	; 150
    5706:	11 c0       	rjmp	.+34     	; 0x572a <__floatsisf+0x6a>
    5708:	77 23       	and	r23, r23
    570a:	21 f0       	breq	.+8      	; 0x5714 <__floatsisf+0x54>
    570c:	9e e8       	ldi	r25, 0x8E	; 142
    570e:	87 2f       	mov	r24, r23
    5710:	76 2f       	mov	r23, r22
    5712:	05 c0       	rjmp	.+10     	; 0x571e <__floatsisf+0x5e>
    5714:	66 23       	and	r22, r22
    5716:	71 f0       	breq	.+28     	; 0x5734 <__floatsisf+0x74>
    5718:	96 e8       	ldi	r25, 0x86	; 134
    571a:	86 2f       	mov	r24, r22
    571c:	70 e0       	ldi	r23, 0x00	; 0
    571e:	60 e0       	ldi	r22, 0x00	; 0
    5720:	2a f0       	brmi	.+10     	; 0x572c <__floatsisf+0x6c>
    5722:	9a 95       	dec	r25
    5724:	66 0f       	add	r22, r22
    5726:	77 1f       	adc	r23, r23
    5728:	88 1f       	adc	r24, r24
    572a:	da f7       	brpl	.-10     	; 0x5722 <__floatsisf+0x62>
    572c:	88 0f       	add	r24, r24
    572e:	96 95       	lsr	r25
    5730:	87 95       	ror	r24
    5732:	97 f9       	bld	r25, 7
    5734:	08 95       	ret

00005736 <__fp_split3>:
    5736:	57 fd       	sbrc	r21, 7
    5738:	90 58       	subi	r25, 0x80	; 128
    573a:	44 0f       	add	r20, r20
    573c:	55 1f       	adc	r21, r21
    573e:	59 f0       	breq	.+22     	; 0x5756 <__fp_splitA+0x10>
    5740:	5f 3f       	cpi	r21, 0xFF	; 255
    5742:	71 f0       	breq	.+28     	; 0x5760 <__fp_splitA+0x1a>
    5744:	47 95       	ror	r20

00005746 <__fp_splitA>:
    5746:	88 0f       	add	r24, r24
    5748:	97 fb       	bst	r25, 7
    574a:	99 1f       	adc	r25, r25
    574c:	61 f0       	breq	.+24     	; 0x5766 <__fp_splitA+0x20>
    574e:	9f 3f       	cpi	r25, 0xFF	; 255
    5750:	79 f0       	breq	.+30     	; 0x5770 <__fp_splitA+0x2a>
    5752:	87 95       	ror	r24
    5754:	08 95       	ret
    5756:	12 16       	cp	r1, r18
    5758:	13 06       	cpc	r1, r19
    575a:	14 06       	cpc	r1, r20
    575c:	55 1f       	adc	r21, r21
    575e:	f2 cf       	rjmp	.-28     	; 0x5744 <__fp_split3+0xe>
    5760:	46 95       	lsr	r20
    5762:	f1 df       	rcall	.-30     	; 0x5746 <__fp_splitA>
    5764:	08 c0       	rjmp	.+16     	; 0x5776 <__fp_splitA+0x30>
    5766:	16 16       	cp	r1, r22
    5768:	17 06       	cpc	r1, r23
    576a:	18 06       	cpc	r1, r24
    576c:	99 1f       	adc	r25, r25
    576e:	f1 cf       	rjmp	.-30     	; 0x5752 <__fp_splitA+0xc>
    5770:	86 95       	lsr	r24
    5772:	71 05       	cpc	r23, r1
    5774:	61 05       	cpc	r22, r1
    5776:	08 94       	sec
    5778:	08 95       	ret

0000577a <__fp_zero>:
    577a:	e8 94       	clt

0000577c <__fp_szero>:
    577c:	bb 27       	eor	r27, r27
    577e:	66 27       	eor	r22, r22
    5780:	77 27       	eor	r23, r23
    5782:	cb 01       	movw	r24, r22
    5784:	97 f9       	bld	r25, 7
    5786:	08 95       	ret

00005788 <__mulsf3>:
    5788:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__mulsf3x>
    578c:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__fp_round>
    5790:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__fp_pscA>
    5794:	38 f0       	brcs	.+14     	; 0x57a4 <__mulsf3+0x1c>
    5796:	0e 94 41 2c 	call	0x5882	; 0x5882 <__fp_pscB>
    579a:	20 f0       	brcs	.+8      	; 0x57a4 <__mulsf3+0x1c>
    579c:	95 23       	and	r25, r21
    579e:	11 f0       	breq	.+4      	; 0x57a4 <__mulsf3+0x1c>
    57a0:	0c 94 31 2c 	jmp	0x5862	; 0x5862 <__fp_inf>
    57a4:	0c 94 37 2c 	jmp	0x586e	; 0x586e <__fp_nan>
    57a8:	11 24       	eor	r1, r1
    57aa:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__fp_szero>

000057ae <__mulsf3x>:
    57ae:	0e 94 9b 2b 	call	0x5736	; 0x5736 <__fp_split3>
    57b2:	70 f3       	brcs	.-36     	; 0x5790 <__mulsf3+0x8>

000057b4 <__mulsf3_pse>:
    57b4:	95 9f       	mul	r25, r21
    57b6:	c1 f3       	breq	.-16     	; 0x57a8 <__mulsf3+0x20>
    57b8:	95 0f       	add	r25, r21
    57ba:	50 e0       	ldi	r21, 0x00	; 0
    57bc:	55 1f       	adc	r21, r21
    57be:	62 9f       	mul	r22, r18
    57c0:	f0 01       	movw	r30, r0
    57c2:	72 9f       	mul	r23, r18
    57c4:	bb 27       	eor	r27, r27
    57c6:	f0 0d       	add	r31, r0
    57c8:	b1 1d       	adc	r27, r1
    57ca:	63 9f       	mul	r22, r19
    57cc:	aa 27       	eor	r26, r26
    57ce:	f0 0d       	add	r31, r0
    57d0:	b1 1d       	adc	r27, r1
    57d2:	aa 1f       	adc	r26, r26
    57d4:	64 9f       	mul	r22, r20
    57d6:	66 27       	eor	r22, r22
    57d8:	b0 0d       	add	r27, r0
    57da:	a1 1d       	adc	r26, r1
    57dc:	66 1f       	adc	r22, r22
    57de:	82 9f       	mul	r24, r18
    57e0:	22 27       	eor	r18, r18
    57e2:	b0 0d       	add	r27, r0
    57e4:	a1 1d       	adc	r26, r1
    57e6:	62 1f       	adc	r22, r18
    57e8:	73 9f       	mul	r23, r19
    57ea:	b0 0d       	add	r27, r0
    57ec:	a1 1d       	adc	r26, r1
    57ee:	62 1f       	adc	r22, r18
    57f0:	83 9f       	mul	r24, r19
    57f2:	a0 0d       	add	r26, r0
    57f4:	61 1d       	adc	r22, r1
    57f6:	22 1f       	adc	r18, r18
    57f8:	74 9f       	mul	r23, r20
    57fa:	33 27       	eor	r19, r19
    57fc:	a0 0d       	add	r26, r0
    57fe:	61 1d       	adc	r22, r1
    5800:	23 1f       	adc	r18, r19
    5802:	84 9f       	mul	r24, r20
    5804:	60 0d       	add	r22, r0
    5806:	21 1d       	adc	r18, r1
    5808:	82 2f       	mov	r24, r18
    580a:	76 2f       	mov	r23, r22
    580c:	6a 2f       	mov	r22, r26
    580e:	11 24       	eor	r1, r1
    5810:	9f 57       	subi	r25, 0x7F	; 127
    5812:	50 40       	sbci	r21, 0x00	; 0
    5814:	9a f0       	brmi	.+38     	; 0x583c <__mulsf3_pse+0x88>
    5816:	f1 f0       	breq	.+60     	; 0x5854 <__mulsf3_pse+0xa0>
    5818:	88 23       	and	r24, r24
    581a:	4a f0       	brmi	.+18     	; 0x582e <__mulsf3_pse+0x7a>
    581c:	ee 0f       	add	r30, r30
    581e:	ff 1f       	adc	r31, r31
    5820:	bb 1f       	adc	r27, r27
    5822:	66 1f       	adc	r22, r22
    5824:	77 1f       	adc	r23, r23
    5826:	88 1f       	adc	r24, r24
    5828:	91 50       	subi	r25, 0x01	; 1
    582a:	50 40       	sbci	r21, 0x00	; 0
    582c:	a9 f7       	brne	.-22     	; 0x5818 <__mulsf3_pse+0x64>
    582e:	9e 3f       	cpi	r25, 0xFE	; 254
    5830:	51 05       	cpc	r21, r1
    5832:	80 f0       	brcs	.+32     	; 0x5854 <__mulsf3_pse+0xa0>
    5834:	0c 94 31 2c 	jmp	0x5862	; 0x5862 <__fp_inf>
    5838:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__fp_szero>
    583c:	5f 3f       	cpi	r21, 0xFF	; 255
    583e:	e4 f3       	brlt	.-8      	; 0x5838 <__mulsf3_pse+0x84>
    5840:	98 3e       	cpi	r25, 0xE8	; 232
    5842:	d4 f3       	brlt	.-12     	; 0x5838 <__mulsf3_pse+0x84>
    5844:	86 95       	lsr	r24
    5846:	77 95       	ror	r23
    5848:	67 95       	ror	r22
    584a:	b7 95       	ror	r27
    584c:	f7 95       	ror	r31
    584e:	e7 95       	ror	r30
    5850:	9f 5f       	subi	r25, 0xFF	; 255
    5852:	c1 f7       	brne	.-16     	; 0x5844 <__mulsf3_pse+0x90>
    5854:	fe 2b       	or	r31, r30
    5856:	88 0f       	add	r24, r24
    5858:	91 1d       	adc	r25, r1
    585a:	96 95       	lsr	r25
    585c:	87 95       	ror	r24
    585e:	97 f9       	bld	r25, 7
    5860:	08 95       	ret

00005862 <__fp_inf>:
    5862:	97 f9       	bld	r25, 7
    5864:	9f 67       	ori	r25, 0x7F	; 127
    5866:	80 e8       	ldi	r24, 0x80	; 128
    5868:	70 e0       	ldi	r23, 0x00	; 0
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	08 95       	ret

0000586e <__fp_nan>:
    586e:	9f ef       	ldi	r25, 0xFF	; 255
    5870:	80 ec       	ldi	r24, 0xC0	; 192
    5872:	08 95       	ret

00005874 <__fp_pscA>:
    5874:	00 24       	eor	r0, r0
    5876:	0a 94       	dec	r0
    5878:	16 16       	cp	r1, r22
    587a:	17 06       	cpc	r1, r23
    587c:	18 06       	cpc	r1, r24
    587e:	09 06       	cpc	r0, r25
    5880:	08 95       	ret

00005882 <__fp_pscB>:
    5882:	00 24       	eor	r0, r0
    5884:	0a 94       	dec	r0
    5886:	12 16       	cp	r1, r18
    5888:	13 06       	cpc	r1, r19
    588a:	14 06       	cpc	r1, r20
    588c:	05 06       	cpc	r0, r21
    588e:	08 95       	ret

00005890 <__fp_round>:
    5890:	09 2e       	mov	r0, r25
    5892:	03 94       	inc	r0
    5894:	00 0c       	add	r0, r0
    5896:	11 f4       	brne	.+4      	; 0x589c <__fp_round+0xc>
    5898:	88 23       	and	r24, r24
    589a:	52 f0       	brmi	.+20     	; 0x58b0 <__fp_round+0x20>
    589c:	bb 0f       	add	r27, r27
    589e:	40 f4       	brcc	.+16     	; 0x58b0 <__fp_round+0x20>
    58a0:	bf 2b       	or	r27, r31
    58a2:	11 f4       	brne	.+4      	; 0x58a8 <__fp_round+0x18>
    58a4:	60 ff       	sbrs	r22, 0
    58a6:	04 c0       	rjmp	.+8      	; 0x58b0 <__fp_round+0x20>
    58a8:	6f 5f       	subi	r22, 0xFF	; 255
    58aa:	7f 4f       	sbci	r23, 0xFF	; 255
    58ac:	8f 4f       	sbci	r24, 0xFF	; 255
    58ae:	9f 4f       	sbci	r25, 0xFF	; 255
    58b0:	08 95       	ret

000058b2 <__mulsi3>:
    58b2:	db 01       	movw	r26, r22
    58b4:	8f 93       	push	r24
    58b6:	9f 93       	push	r25
    58b8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__muluhisi3>
    58bc:	bf 91       	pop	r27
    58be:	af 91       	pop	r26
    58c0:	a2 9f       	mul	r26, r18
    58c2:	80 0d       	add	r24, r0
    58c4:	91 1d       	adc	r25, r1
    58c6:	a3 9f       	mul	r26, r19
    58c8:	90 0d       	add	r25, r0
    58ca:	b2 9f       	mul	r27, r18
    58cc:	90 0d       	add	r25, r0
    58ce:	11 24       	eor	r1, r1
    58d0:	08 95       	ret

000058d2 <__udivmodhi4>:
    58d2:	aa 1b       	sub	r26, r26
    58d4:	bb 1b       	sub	r27, r27
    58d6:	51 e1       	ldi	r21, 0x11	; 17
    58d8:	07 c0       	rjmp	.+14     	; 0x58e8 <__udivmodhi4_ep>

000058da <__udivmodhi4_loop>:
    58da:	aa 1f       	adc	r26, r26
    58dc:	bb 1f       	adc	r27, r27
    58de:	a6 17       	cp	r26, r22
    58e0:	b7 07       	cpc	r27, r23
    58e2:	10 f0       	brcs	.+4      	; 0x58e8 <__udivmodhi4_ep>
    58e4:	a6 1b       	sub	r26, r22
    58e6:	b7 0b       	sbc	r27, r23

000058e8 <__udivmodhi4_ep>:
    58e8:	88 1f       	adc	r24, r24
    58ea:	99 1f       	adc	r25, r25
    58ec:	5a 95       	dec	r21
    58ee:	a9 f7       	brne	.-22     	; 0x58da <__udivmodhi4_loop>
    58f0:	80 95       	com	r24
    58f2:	90 95       	com	r25
    58f4:	bc 01       	movw	r22, r24
    58f6:	cd 01       	movw	r24, r26
    58f8:	08 95       	ret

000058fa <__udivmodsi4>:
    58fa:	a1 e2       	ldi	r26, 0x21	; 33
    58fc:	1a 2e       	mov	r1, r26
    58fe:	aa 1b       	sub	r26, r26
    5900:	bb 1b       	sub	r27, r27
    5902:	fd 01       	movw	r30, r26
    5904:	0d c0       	rjmp	.+26     	; 0x5920 <__udivmodsi4_ep>

00005906 <__udivmodsi4_loop>:
    5906:	aa 1f       	adc	r26, r26
    5908:	bb 1f       	adc	r27, r27
    590a:	ee 1f       	adc	r30, r30
    590c:	ff 1f       	adc	r31, r31
    590e:	a2 17       	cp	r26, r18
    5910:	b3 07       	cpc	r27, r19
    5912:	e4 07       	cpc	r30, r20
    5914:	f5 07       	cpc	r31, r21
    5916:	20 f0       	brcs	.+8      	; 0x5920 <__udivmodsi4_ep>
    5918:	a2 1b       	sub	r26, r18
    591a:	b3 0b       	sbc	r27, r19
    591c:	e4 0b       	sbc	r30, r20
    591e:	f5 0b       	sbc	r31, r21

00005920 <__udivmodsi4_ep>:
    5920:	66 1f       	adc	r22, r22
    5922:	77 1f       	adc	r23, r23
    5924:	88 1f       	adc	r24, r24
    5926:	99 1f       	adc	r25, r25
    5928:	1a 94       	dec	r1
    592a:	69 f7       	brne	.-38     	; 0x5906 <__udivmodsi4_loop>
    592c:	60 95       	com	r22
    592e:	70 95       	com	r23
    5930:	80 95       	com	r24
    5932:	90 95       	com	r25
    5934:	9b 01       	movw	r18, r22
    5936:	ac 01       	movw	r20, r24
    5938:	bd 01       	movw	r22, r26
    593a:	cf 01       	movw	r24, r30
    593c:	08 95       	ret

0000593e <__divmodsi4>:
    593e:	05 2e       	mov	r0, r21
    5940:	97 fb       	bst	r25, 7
    5942:	1e f4       	brtc	.+6      	; 0x594a <__divmodsi4+0xc>
    5944:	00 94       	com	r0
    5946:	0e 94 b6 2c 	call	0x596c	; 0x596c <__negsi2>
    594a:	57 fd       	sbrc	r21, 7
    594c:	07 d0       	rcall	.+14     	; 0x595c <__divmodsi4_neg2>
    594e:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__udivmodsi4>
    5952:	07 fc       	sbrc	r0, 7
    5954:	03 d0       	rcall	.+6      	; 0x595c <__divmodsi4_neg2>
    5956:	4e f4       	brtc	.+18     	; 0x596a <__divmodsi4_exit>
    5958:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__negsi2>

0000595c <__divmodsi4_neg2>:
    595c:	50 95       	com	r21
    595e:	40 95       	com	r20
    5960:	30 95       	com	r19
    5962:	21 95       	neg	r18
    5964:	3f 4f       	sbci	r19, 0xFF	; 255
    5966:	4f 4f       	sbci	r20, 0xFF	; 255
    5968:	5f 4f       	sbci	r21, 0xFF	; 255

0000596a <__divmodsi4_exit>:
    596a:	08 95       	ret

0000596c <__negsi2>:
    596c:	90 95       	com	r25
    596e:	80 95       	com	r24
    5970:	70 95       	com	r23
    5972:	61 95       	neg	r22
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	8f 4f       	sbci	r24, 0xFF	; 255
    5978:	9f 4f       	sbci	r25, 0xFF	; 255
    597a:	08 95       	ret

0000597c <__tablejump2__>:
    597c:	ee 0f       	add	r30, r30
    597e:	ff 1f       	adc	r31, r31
    5980:	88 1f       	adc	r24, r24
    5982:	8b bf       	out	0x3b, r24	; 59
    5984:	07 90       	elpm	r0, Z+
    5986:	f6 91       	elpm	r31, Z
    5988:	e0 2d       	mov	r30, r0
    598a:	19 94       	eijmp

0000598c <__umulhisi3>:
    598c:	a2 9f       	mul	r26, r18
    598e:	b0 01       	movw	r22, r0
    5990:	b3 9f       	mul	r27, r19
    5992:	c0 01       	movw	r24, r0
    5994:	a3 9f       	mul	r26, r19
    5996:	70 0d       	add	r23, r0
    5998:	81 1d       	adc	r24, r1
    599a:	11 24       	eor	r1, r1
    599c:	91 1d       	adc	r25, r1
    599e:	b2 9f       	mul	r27, r18
    59a0:	70 0d       	add	r23, r0
    59a2:	81 1d       	adc	r24, r1
    59a4:	11 24       	eor	r1, r1
    59a6:	91 1d       	adc	r25, r1
    59a8:	08 95       	ret

000059aa <__muluhisi3>:
    59aa:	0e 94 c6 2c 	call	0x598c	; 0x598c <__umulhisi3>
    59ae:	a5 9f       	mul	r26, r21
    59b0:	90 0d       	add	r25, r0
    59b2:	b4 9f       	mul	r27, r20
    59b4:	90 0d       	add	r25, r0
    59b6:	a4 9f       	mul	r26, r20
    59b8:	80 0d       	add	r24, r0
    59ba:	91 1d       	adc	r25, r1
    59bc:	11 24       	eor	r1, r1
    59be:	08 95       	ret

000059c0 <malloc>:
    59c0:	cf 93       	push	r28
    59c2:	df 93       	push	r29
    59c4:	82 30       	cpi	r24, 0x02	; 2
    59c6:	91 05       	cpc	r25, r1
    59c8:	10 f4       	brcc	.+4      	; 0x59ce <malloc+0xe>
    59ca:	82 e0       	ldi	r24, 0x02	; 2
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	e0 91 8c 24 	lds	r30, 0x248C
    59d2:	f0 91 8d 24 	lds	r31, 0x248D
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	c0 e0       	ldi	r28, 0x00	; 0
    59dc:	d0 e0       	ldi	r29, 0x00	; 0
    59de:	30 97       	sbiw	r30, 0x00	; 0
    59e0:	11 f1       	breq	.+68     	; 0x5a26 <malloc+0x66>
    59e2:	40 81       	ld	r20, Z
    59e4:	51 81       	ldd	r21, Z+1	; 0x01
    59e6:	48 17       	cp	r20, r24
    59e8:	59 07       	cpc	r21, r25
    59ea:	c0 f0       	brcs	.+48     	; 0x5a1c <malloc+0x5c>
    59ec:	48 17       	cp	r20, r24
    59ee:	59 07       	cpc	r21, r25
    59f0:	61 f4       	brne	.+24     	; 0x5a0a <malloc+0x4a>
    59f2:	82 81       	ldd	r24, Z+2	; 0x02
    59f4:	93 81       	ldd	r25, Z+3	; 0x03
    59f6:	20 97       	sbiw	r28, 0x00	; 0
    59f8:	19 f0       	breq	.+6      	; 0x5a00 <malloc+0x40>
    59fa:	8a 83       	std	Y+2, r24	; 0x02
    59fc:	9b 83       	std	Y+3, r25	; 0x03
    59fe:	2b c0       	rjmp	.+86     	; 0x5a56 <malloc+0x96>
    5a00:	80 93 8c 24 	sts	0x248C, r24
    5a04:	90 93 8d 24 	sts	0x248D, r25
    5a08:	26 c0       	rjmp	.+76     	; 0x5a56 <malloc+0x96>
    5a0a:	21 15       	cp	r18, r1
    5a0c:	31 05       	cpc	r19, r1
    5a0e:	19 f0       	breq	.+6      	; 0x5a16 <malloc+0x56>
    5a10:	42 17       	cp	r20, r18
    5a12:	53 07       	cpc	r21, r19
    5a14:	18 f4       	brcc	.+6      	; 0x5a1c <malloc+0x5c>
    5a16:	9a 01       	movw	r18, r20
    5a18:	be 01       	movw	r22, r28
    5a1a:	df 01       	movw	r26, r30
    5a1c:	ef 01       	movw	r28, r30
    5a1e:	02 80       	ldd	r0, Z+2	; 0x02
    5a20:	f3 81       	ldd	r31, Z+3	; 0x03
    5a22:	e0 2d       	mov	r30, r0
    5a24:	dc cf       	rjmp	.-72     	; 0x59de <malloc+0x1e>
    5a26:	21 15       	cp	r18, r1
    5a28:	31 05       	cpc	r19, r1
    5a2a:	09 f1       	breq	.+66     	; 0x5a6e <malloc+0xae>
    5a2c:	28 1b       	sub	r18, r24
    5a2e:	39 0b       	sbc	r19, r25
    5a30:	24 30       	cpi	r18, 0x04	; 4
    5a32:	31 05       	cpc	r19, r1
    5a34:	90 f4       	brcc	.+36     	; 0x5a5a <malloc+0x9a>
    5a36:	12 96       	adiw	r26, 0x02	; 2
    5a38:	8d 91       	ld	r24, X+
    5a3a:	9c 91       	ld	r25, X
    5a3c:	13 97       	sbiw	r26, 0x03	; 3
    5a3e:	61 15       	cp	r22, r1
    5a40:	71 05       	cpc	r23, r1
    5a42:	21 f0       	breq	.+8      	; 0x5a4c <malloc+0x8c>
    5a44:	fb 01       	movw	r30, r22
    5a46:	82 83       	std	Z+2, r24	; 0x02
    5a48:	93 83       	std	Z+3, r25	; 0x03
    5a4a:	04 c0       	rjmp	.+8      	; 0x5a54 <malloc+0x94>
    5a4c:	80 93 8c 24 	sts	0x248C, r24
    5a50:	90 93 8d 24 	sts	0x248D, r25
    5a54:	fd 01       	movw	r30, r26
    5a56:	32 96       	adiw	r30, 0x02	; 2
    5a58:	44 c0       	rjmp	.+136    	; 0x5ae2 <malloc+0x122>
    5a5a:	fd 01       	movw	r30, r26
    5a5c:	e2 0f       	add	r30, r18
    5a5e:	f3 1f       	adc	r31, r19
    5a60:	81 93       	st	Z+, r24
    5a62:	91 93       	st	Z+, r25
    5a64:	22 50       	subi	r18, 0x02	; 2
    5a66:	31 09       	sbc	r19, r1
    5a68:	2d 93       	st	X+, r18
    5a6a:	3c 93       	st	X, r19
    5a6c:	3a c0       	rjmp	.+116    	; 0x5ae2 <malloc+0x122>
    5a6e:	20 91 8a 24 	lds	r18, 0x248A
    5a72:	30 91 8b 24 	lds	r19, 0x248B
    5a76:	23 2b       	or	r18, r19
    5a78:	41 f4       	brne	.+16     	; 0x5a8a <malloc+0xca>
    5a7a:	20 91 02 20 	lds	r18, 0x2002
    5a7e:	30 91 03 20 	lds	r19, 0x2003
    5a82:	20 93 8a 24 	sts	0x248A, r18
    5a86:	30 93 8b 24 	sts	0x248B, r19
    5a8a:	20 91 00 20 	lds	r18, 0x2000
    5a8e:	30 91 01 20 	lds	r19, 0x2001
    5a92:	21 15       	cp	r18, r1
    5a94:	31 05       	cpc	r19, r1
    5a96:	41 f4       	brne	.+16     	; 0x5aa8 <malloc+0xe8>
    5a98:	2d b7       	in	r18, 0x3d	; 61
    5a9a:	3e b7       	in	r19, 0x3e	; 62
    5a9c:	40 91 04 20 	lds	r20, 0x2004
    5aa0:	50 91 05 20 	lds	r21, 0x2005
    5aa4:	24 1b       	sub	r18, r20
    5aa6:	35 0b       	sbc	r19, r21
    5aa8:	e0 91 8a 24 	lds	r30, 0x248A
    5aac:	f0 91 8b 24 	lds	r31, 0x248B
    5ab0:	e2 17       	cp	r30, r18
    5ab2:	f3 07       	cpc	r31, r19
    5ab4:	a0 f4       	brcc	.+40     	; 0x5ade <malloc+0x11e>
    5ab6:	2e 1b       	sub	r18, r30
    5ab8:	3f 0b       	sbc	r19, r31
    5aba:	28 17       	cp	r18, r24
    5abc:	39 07       	cpc	r19, r25
    5abe:	78 f0       	brcs	.+30     	; 0x5ade <malloc+0x11e>
    5ac0:	ac 01       	movw	r20, r24
    5ac2:	4e 5f       	subi	r20, 0xFE	; 254
    5ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ac6:	24 17       	cp	r18, r20
    5ac8:	35 07       	cpc	r19, r21
    5aca:	48 f0       	brcs	.+18     	; 0x5ade <malloc+0x11e>
    5acc:	4e 0f       	add	r20, r30
    5ace:	5f 1f       	adc	r21, r31
    5ad0:	40 93 8a 24 	sts	0x248A, r20
    5ad4:	50 93 8b 24 	sts	0x248B, r21
    5ad8:	81 93       	st	Z+, r24
    5ada:	91 93       	st	Z+, r25
    5adc:	02 c0       	rjmp	.+4      	; 0x5ae2 <malloc+0x122>
    5ade:	e0 e0       	ldi	r30, 0x00	; 0
    5ae0:	f0 e0       	ldi	r31, 0x00	; 0
    5ae2:	cf 01       	movw	r24, r30
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	08 95       	ret

00005aea <free>:
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	00 97       	sbiw	r24, 0x00	; 0
    5af4:	09 f4       	brne	.+2      	; 0x5af8 <free+0xe>
    5af6:	8c c0       	rjmp	.+280    	; 0x5c10 <free+0x126>
    5af8:	fc 01       	movw	r30, r24
    5afa:	32 97       	sbiw	r30, 0x02	; 2
    5afc:	12 82       	std	Z+2, r1	; 0x02
    5afe:	13 82       	std	Z+3, r1	; 0x03
    5b00:	00 91 8c 24 	lds	r16, 0x248C
    5b04:	10 91 8d 24 	lds	r17, 0x248D
    5b08:	01 15       	cp	r16, r1
    5b0a:	11 05       	cpc	r17, r1
    5b0c:	81 f4       	brne	.+32     	; 0x5b2e <free+0x44>
    5b0e:	20 81       	ld	r18, Z
    5b10:	31 81       	ldd	r19, Z+1	; 0x01
    5b12:	82 0f       	add	r24, r18
    5b14:	93 1f       	adc	r25, r19
    5b16:	20 91 8a 24 	lds	r18, 0x248A
    5b1a:	30 91 8b 24 	lds	r19, 0x248B
    5b1e:	28 17       	cp	r18, r24
    5b20:	39 07       	cpc	r19, r25
    5b22:	79 f5       	brne	.+94     	; 0x5b82 <free+0x98>
    5b24:	e0 93 8a 24 	sts	0x248A, r30
    5b28:	f0 93 8b 24 	sts	0x248B, r31
    5b2c:	71 c0       	rjmp	.+226    	; 0x5c10 <free+0x126>
    5b2e:	d8 01       	movw	r26, r16
    5b30:	40 e0       	ldi	r20, 0x00	; 0
    5b32:	50 e0       	ldi	r21, 0x00	; 0
    5b34:	ae 17       	cp	r26, r30
    5b36:	bf 07       	cpc	r27, r31
    5b38:	50 f4       	brcc	.+20     	; 0x5b4e <free+0x64>
    5b3a:	12 96       	adiw	r26, 0x02	; 2
    5b3c:	2d 91       	ld	r18, X+
    5b3e:	3c 91       	ld	r19, X
    5b40:	13 97       	sbiw	r26, 0x03	; 3
    5b42:	ad 01       	movw	r20, r26
    5b44:	21 15       	cp	r18, r1
    5b46:	31 05       	cpc	r19, r1
    5b48:	09 f1       	breq	.+66     	; 0x5b8c <free+0xa2>
    5b4a:	d9 01       	movw	r26, r18
    5b4c:	f3 cf       	rjmp	.-26     	; 0x5b34 <free+0x4a>
    5b4e:	9d 01       	movw	r18, r26
    5b50:	da 01       	movw	r26, r20
    5b52:	22 83       	std	Z+2, r18	; 0x02
    5b54:	33 83       	std	Z+3, r19	; 0x03
    5b56:	60 81       	ld	r22, Z
    5b58:	71 81       	ldd	r23, Z+1	; 0x01
    5b5a:	86 0f       	add	r24, r22
    5b5c:	97 1f       	adc	r25, r23
    5b5e:	82 17       	cp	r24, r18
    5b60:	93 07       	cpc	r25, r19
    5b62:	69 f4       	brne	.+26     	; 0x5b7e <free+0x94>
    5b64:	ec 01       	movw	r28, r24
    5b66:	28 81       	ld	r18, Y
    5b68:	39 81       	ldd	r19, Y+1	; 0x01
    5b6a:	26 0f       	add	r18, r22
    5b6c:	37 1f       	adc	r19, r23
    5b6e:	2e 5f       	subi	r18, 0xFE	; 254
    5b70:	3f 4f       	sbci	r19, 0xFF	; 255
    5b72:	20 83       	st	Z, r18
    5b74:	31 83       	std	Z+1, r19	; 0x01
    5b76:	8a 81       	ldd	r24, Y+2	; 0x02
    5b78:	9b 81       	ldd	r25, Y+3	; 0x03
    5b7a:	82 83       	std	Z+2, r24	; 0x02
    5b7c:	93 83       	std	Z+3, r25	; 0x03
    5b7e:	45 2b       	or	r20, r21
    5b80:	29 f4       	brne	.+10     	; 0x5b8c <free+0xa2>
    5b82:	e0 93 8c 24 	sts	0x248C, r30
    5b86:	f0 93 8d 24 	sts	0x248D, r31
    5b8a:	42 c0       	rjmp	.+132    	; 0x5c10 <free+0x126>
    5b8c:	12 96       	adiw	r26, 0x02	; 2
    5b8e:	ed 93       	st	X+, r30
    5b90:	fc 93       	st	X, r31
    5b92:	13 97       	sbiw	r26, 0x03	; 3
    5b94:	ed 01       	movw	r28, r26
    5b96:	49 91       	ld	r20, Y+
    5b98:	59 91       	ld	r21, Y+
    5b9a:	9e 01       	movw	r18, r28
    5b9c:	24 0f       	add	r18, r20
    5b9e:	35 1f       	adc	r19, r21
    5ba0:	e2 17       	cp	r30, r18
    5ba2:	f3 07       	cpc	r31, r19
    5ba4:	71 f4       	brne	.+28     	; 0x5bc2 <free+0xd8>
    5ba6:	80 81       	ld	r24, Z
    5ba8:	91 81       	ldd	r25, Z+1	; 0x01
    5baa:	84 0f       	add	r24, r20
    5bac:	95 1f       	adc	r25, r21
    5bae:	02 96       	adiw	r24, 0x02	; 2
    5bb0:	8d 93       	st	X+, r24
    5bb2:	9c 93       	st	X, r25
    5bb4:	11 97       	sbiw	r26, 0x01	; 1
    5bb6:	82 81       	ldd	r24, Z+2	; 0x02
    5bb8:	93 81       	ldd	r25, Z+3	; 0x03
    5bba:	12 96       	adiw	r26, 0x02	; 2
    5bbc:	8d 93       	st	X+, r24
    5bbe:	9c 93       	st	X, r25
    5bc0:	13 97       	sbiw	r26, 0x03	; 3
    5bc2:	e0 e0       	ldi	r30, 0x00	; 0
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	d8 01       	movw	r26, r16
    5bc8:	12 96       	adiw	r26, 0x02	; 2
    5bca:	8d 91       	ld	r24, X+
    5bcc:	9c 91       	ld	r25, X
    5bce:	13 97       	sbiw	r26, 0x03	; 3
    5bd0:	00 97       	sbiw	r24, 0x00	; 0
    5bd2:	19 f0       	breq	.+6      	; 0x5bda <free+0xf0>
    5bd4:	f8 01       	movw	r30, r16
    5bd6:	8c 01       	movw	r16, r24
    5bd8:	f6 cf       	rjmp	.-20     	; 0x5bc6 <free+0xdc>
    5bda:	8d 91       	ld	r24, X+
    5bdc:	9c 91       	ld	r25, X
    5bde:	98 01       	movw	r18, r16
    5be0:	2e 5f       	subi	r18, 0xFE	; 254
    5be2:	3f 4f       	sbci	r19, 0xFF	; 255
    5be4:	82 0f       	add	r24, r18
    5be6:	93 1f       	adc	r25, r19
    5be8:	20 91 8a 24 	lds	r18, 0x248A
    5bec:	30 91 8b 24 	lds	r19, 0x248B
    5bf0:	28 17       	cp	r18, r24
    5bf2:	39 07       	cpc	r19, r25
    5bf4:	69 f4       	brne	.+26     	; 0x5c10 <free+0x126>
    5bf6:	30 97       	sbiw	r30, 0x00	; 0
    5bf8:	29 f4       	brne	.+10     	; 0x5c04 <free+0x11a>
    5bfa:	10 92 8c 24 	sts	0x248C, r1
    5bfe:	10 92 8d 24 	sts	0x248D, r1
    5c02:	02 c0       	rjmp	.+4      	; 0x5c08 <free+0x11e>
    5c04:	12 82       	std	Z+2, r1	; 0x02
    5c06:	13 82       	std	Z+3, r1	; 0x03
    5c08:	00 93 8a 24 	sts	0x248A, r16
    5c0c:	10 93 8b 24 	sts	0x248B, r17
    5c10:	df 91       	pop	r29
    5c12:	cf 91       	pop	r28
    5c14:	1f 91       	pop	r17
    5c16:	0f 91       	pop	r16
    5c18:	08 95       	ret

00005c1a <memcpy>:
    5c1a:	fb 01       	movw	r30, r22
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	02 c0       	rjmp	.+4      	; 0x5c24 <memcpy+0xa>
    5c20:	01 90       	ld	r0, Z+
    5c22:	0d 92       	st	X+, r0
    5c24:	41 50       	subi	r20, 0x01	; 1
    5c26:	50 40       	sbci	r21, 0x00	; 0
    5c28:	d8 f7       	brcc	.-10     	; 0x5c20 <memcpy+0x6>
    5c2a:	08 95       	ret

00005c2c <eeprom_read_dword>:
    5c2c:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <eeprom_mapen>
    5c30:	60 81       	ld	r22, Z
    5c32:	71 81       	ldd	r23, Z+1	; 0x01
    5c34:	82 81       	ldd	r24, Z+2	; 0x02
    5c36:	93 81       	ldd	r25, Z+3	; 0x03
    5c38:	08 95       	ret

00005c3a <eeprom_write_dword>:
    5c3a:	24 2f       	mov	r18, r20
    5c3c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <eeprom_write_r18>
    5c40:	25 2f       	mov	r18, r21
    5c42:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <eeprom_write_r18>
    5c46:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <eeprom_write_word>

00005c4a <eeprom_write_word>:
    5c4a:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <eeprom_write_byte>
    5c4e:	27 2f       	mov	r18, r23
    5c50:	0c 94 3b 2e 	jmp	0x5c76	; 0x5c76 <eeprom_write_r18>

00005c54 <eeprom_read_byte>:
    5c54:	03 d0       	rcall	.+6      	; 0x5c5c <eeprom_mapen>
    5c56:	80 81       	ld	r24, Z
    5c58:	99 27       	eor	r25, r25
    5c5a:	08 95       	ret

00005c5c <eeprom_mapen>:
    5c5c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c5e:	f1 e0       	ldi	r31, 0x01	; 1
    5c60:	37 85       	ldd	r19, Z+15	; 0x0f
    5c62:	37 fd       	sbrc	r19, 7
    5c64:	fd cf       	rjmp	.-6      	; 0x5c60 <eeprom_mapen+0x4>
    5c66:	34 85       	ldd	r19, Z+12	; 0x0c
    5c68:	38 60       	ori	r19, 0x08	; 8
    5c6a:	34 87       	std	Z+12, r19	; 0x0c
    5c6c:	fc 01       	movw	r30, r24
    5c6e:	e0 50       	subi	r30, 0x00	; 0
    5c70:	f0 4f       	sbci	r31, 0xF0	; 240
    5c72:	08 95       	ret

00005c74 <eeprom_write_byte>:
    5c74:	26 2f       	mov	r18, r22

00005c76 <eeprom_write_r18>:
    5c76:	e0 ec       	ldi	r30, 0xC0	; 192
    5c78:	f1 e0       	ldi	r31, 0x01	; 1
    5c7a:	37 85       	ldd	r19, Z+15	; 0x0f
    5c7c:	37 fd       	sbrc	r19, 7
    5c7e:	fd cf       	rjmp	.-6      	; 0x5c7a <eeprom_write_r18+0x4>
    5c80:	34 85       	ldd	r19, Z+12	; 0x0c
    5c82:	37 7f       	andi	r19, 0xF7	; 247
    5c84:	34 87       	std	Z+12, r19	; 0x0c
    5c86:	37 85       	ldd	r19, Z+15	; 0x0f
    5c88:	31 ff       	sbrs	r19, 1
    5c8a:	09 c0       	rjmp	.+18     	; 0x5c9e <eeprom_write_r18+0x28>
    5c8c:	36 e3       	ldi	r19, 0x36	; 54
    5c8e:	32 87       	std	Z+10, r19	; 0x0a
    5c90:	38 ed       	ldi	r19, 0xD8	; 216
    5c92:	34 bf       	out	0x34, r19	; 52
    5c94:	31 e0       	ldi	r19, 0x01	; 1
    5c96:	33 87       	std	Z+11, r19	; 0x0b
    5c98:	37 85       	ldd	r19, Z+15	; 0x0f
    5c9a:	37 fd       	sbrc	r19, 7
    5c9c:	fd cf       	rjmp	.-6      	; 0x5c98 <eeprom_write_r18+0x22>
    5c9e:	33 e3       	ldi	r19, 0x33	; 51
    5ca0:	32 87       	std	Z+10, r19	; 0x0a
    5ca2:	80 83       	st	Z, r24
    5ca4:	91 83       	std	Z+1, r25	; 0x01
    5ca6:	12 82       	std	Z+2, r1	; 0x02
    5ca8:	24 83       	std	Z+4, r18	; 0x04
    5caa:	25 e3       	ldi	r18, 0x35	; 53
    5cac:	22 87       	std	Z+10, r18	; 0x0a
    5cae:	28 ed       	ldi	r18, 0xD8	; 216
    5cb0:	31 e0       	ldi	r19, 0x01	; 1
    5cb2:	24 bf       	out	0x34, r18	; 52
    5cb4:	33 87       	std	Z+11, r19	; 0x0b
    5cb6:	01 96       	adiw	r24, 0x01	; 1
    5cb8:	08 95       	ret

00005cba <__do_global_dtors>:
    5cba:	12 e0       	ldi	r17, 0x02	; 2
    5cbc:	cb e9       	ldi	r28, 0x9B	; 155
    5cbe:	d2 e0       	ldi	r29, 0x02	; 2
    5cc0:	00 e0       	ldi	r16, 0x00	; 0
    5cc2:	06 c0       	rjmp	.+12     	; 0x5cd0 <__do_global_dtors+0x16>
    5cc4:	80 2f       	mov	r24, r16
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	0e 94 be 2c 	call	0x597c	; 0x597c <__tablejump2__>
    5ccc:	21 96       	adiw	r28, 0x01	; 1
    5cce:	01 1d       	adc	r16, r1
    5cd0:	cd 39       	cpi	r28, 0x9D	; 157
    5cd2:	d1 07       	cpc	r29, r17
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	08 07       	cpc	r16, r24
    5cd8:	a9 f7       	brne	.-22     	; 0x5cc4 <__do_global_dtors+0xa>
    5cda:	f8 94       	cli

00005cdc <__stop_program>:
    5cdc:	ff cf       	rjmp	.-2      	; 0x5cdc <__stop_program>
