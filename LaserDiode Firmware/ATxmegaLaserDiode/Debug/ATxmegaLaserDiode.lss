
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00802000  00004cb2  00004d46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000264  00802112  00802112  00004e58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004e58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  00004ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba99  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022e0  00000000  00000000  00011241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002860  00000000  00000000  00013521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f40  00000000  00000000  00015d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b06  00000000  00000000  00018cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d0f  00000000  00000000  0001d7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  000254d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__dtors_end>
       4:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_1>
       8:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_2>
       c:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_3>
      10:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_4>
      14:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__vector_5>
      18:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_6>
      1c:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_7>
      20:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_8>
      24:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__vector_9>
      28:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_10>
      2c:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_11>
      30:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__vector_12>
      34:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__vector_13>
      38:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_14>
      3c:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_15>
      40:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__vector_16>
      44:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__vector_17>
      48:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__vector_18>
      4c:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__vector_19>
      50:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_20>
      54:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__vector_21>
      58:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_22>
      5c:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_23>
      60:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_24>
      64:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_25>
      68:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__vector_26>
      6c:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_27>
      70:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_28>
      74:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__vector_29>
      78:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__vector_30>
      7c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_31>
      80:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__vector_32>
      84:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__vector_33>
      88:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_34>
      8c:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_35>
      90:	0c 94 df 13 	jmp	0x27be	; 0x27be <__vector_36>
      94:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__vector_37>
      98:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__vector_38>
      9c:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__vector_39>
      a0:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_40>
      a4:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_41>
      a8:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__vector_42>
      ac:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__vector_43>
      b0:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__vector_44>
      b4:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__vector_45>
      b8:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_46>
      bc:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_47>
      c0:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__vector_48>
      c4:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_49>
      c8:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__vector_50>
      cc:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_51>
      d0:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_52>
      d4:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_53>
      d8:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__vector_54>
      dc:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_55>
      e0:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_56>
      e4:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__vector_57>
      e8:	0c 94 15 18 	jmp	0x302a	; 0x302a <__vector_58>
      ec:	0c 94 46 18 	jmp	0x308c	; 0x308c <__vector_59>
      f0:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__vector_60>
      f4:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__vector_61>
      f8:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__vector_62>
      fc:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__vector_63>
     100:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__vector_64>
     104:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__vector_65>
     108:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__vector_66>
     10c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__vector_67>
     110:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_68>
     114:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__vector_69>
     118:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__vector_70>
     11c:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__vector_71>
     120:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__vector_72>
     124:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_73>
     128:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_74>
     12c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     130:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     134:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__vector_77>
     138:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__vector_78>
     13c:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__vector_79>
     140:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_80>
     144:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__vector_81>
     148:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__vector_82>
     14c:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__vector_83>
     150:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__vector_84>
     154:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__vector_85>
     158:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_86>
     15c:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__vector_87>
     160:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_88>
     164:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__vector_89>
     168:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__vector_90>
     16c:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_91>
     170:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__vector_92>
     174:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__vector_93>
     178:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     17c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     180:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     184:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     188:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     18c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     190:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     194:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     198:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     19c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1a0:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__vector_104>
     1a4:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__vector_105>
     1a8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1ac:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1b0:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__vector_108>
     1b4:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__vector_109>
     1b8:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__vector_110>
     1bc:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__vector_111>
     1c0:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__vector_112>
     1c4:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__vector_113>
     1c8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1cc:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1d0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1d4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1d8:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__bad_interrupt>
     1dc:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__vector_119>
     1e0:	0c 94 50 20 	jmp	0x40a0	; 0x40a0 <__vector_120>
     1e4:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__vector_121>
     1e8:	cd 03       	fmulsu	r20, r21
     1ea:	d0 03       	fmuls	r21, r16
     1ec:	e1 03       	fmuls	r22, r17
     1ee:	f2 03       	fmuls	r23, r18
     1f0:	32 04       	cpc	r3, r2
     1f2:	32 04       	cpc	r3, r2
     1f4:	32 04       	cpc	r3, r2
     1f6:	03 04       	cpc	r0, r3
     1f8:	07 04       	cpc	r0, r7
     1fa:	0b 04       	cpc	r0, r11
     1fc:	0f 04       	cpc	r0, r15
     1fe:	13 04       	cpc	r1, r3
     200:	17 04       	cpc	r1, r7
     202:	32 04       	cpc	r3, r2
     204:	1b 04       	cpc	r1, r11
     206:	1f 04       	cpc	r1, r15
     208:	23 04       	cpc	r2, r3
     20a:	27 04       	cpc	r2, r7
     20c:	2b 04       	cpc	r2, r11
     20e:	2f 04       	cpc	r2, r15
     210:	ef 22       	and	r14, r31
     212:	ef 22       	and	r14, r31
     214:	f7 22       	and	r15, r23
     216:	ff 22       	and	r15, r31
     218:	0a 23       	and	r16, r26
     21a:	62 23       	and	r22, r18
     21c:	69 23       	and	r22, r25
     21e:	95 23       	and	r25, r21
     220:	95 23       	and	r25, r21
     222:	94 23       	and	r25, r20
     224:	94 23       	and	r25, r20

00000226 <__trampolines_start>:
     226:	0c 94 95 23 	jmp	0x472a	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     22a:	0c 94 17 04 	jmp	0x82e	; 0x82e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc2>
     22e:	0c 94 b5 20 	jmp	0x416a	; 0x416a <_GLOBAL__sub_I_dacSPI>
     232:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <_ZN7CTimerF8SetCOMPCEj>
     236:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     23a:	0c 94 39 22 	jmp	0x4472	; 0x4472 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     23e:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <_ZN7CTimerC8SetCOMPAEj>
     242:	0c 94 ef 22 	jmp	0x45de	; 0x45de <_ZN9CMBSender13OnReceiveByteEh+0x22>
     246:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <_ZN9CMBSender13OnReceiveByteEh+0x116>
     24a:	0c 94 36 0b 	jmp	0x166c	; 0x166c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     24e:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <_ZN16CMBEventsHandler11FreeBuffersEv>
     252:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     256:	0c 94 33 04 	jmp	0x866	; 0x866 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     25a:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     25e:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     262:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     266:	0c 94 27 0b 	jmp	0x164e	; 0x164e <_ZN7CTimerC8SetCOMPBEj>
     26a:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_ZN7CTimerC8SetCOMPCEj>
     26e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     272:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     276:	0c 94 df 0a 	jmp	0x15be	; 0x15be <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     27a:	0c 94 03 04 	jmp	0x806	; 0x806 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     27e:	0c 94 98 23 	jmp	0x4730	; 0x4730 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     282:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     286:	0c 94 ae 21 	jmp	0x435c	; 0x435c <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     28a:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     28e:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     292:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     296:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <_ZN7CTimerF4StopEv>
     29a:	0c 94 00 02 	jmp	0x400	; 0x400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     29e:	0c 94 94 23 	jmp	0x4728	; 0x4728 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     2a2:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe2>
     2a6:	0c 94 4b 04 	jmp	0x896	; 0x896 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2aa:	0c 94 ce 20 	jmp	0x419c	; 0x419c <_GLOBAL__sub_D_dacSPI>
     2ae:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2b2:	0c 94 cd 21 	jmp	0x439a	; 0x439a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2b6:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf2>
     2ba:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2be:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
     2c2:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     2c6:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2ca:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     2ce:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <_ZN7CTimerF8SetCOMPBEj>
     2d2:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <__cxa_pure_virtual>
     2d6:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2da:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2de:	0c 94 3b 02 	jmp	0x476	; 0x476 <_ZN10CDGUSUSART15GetReceivedByteEv>
     2e2:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <_ZN7CTimerC5StartEj>
     2e6:	0c 94 07 04 	jmp	0x80e	; 0x80e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa2>
     2ea:	0c 94 1f 04 	jmp	0x83e	; 0x83e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2ee:	0c 94 16 0b 	jmp	0x162c	; 0x162c <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     2f2:	0c 94 13 04 	jmp	0x826	; 0x826 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xba>
     2f6:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xaa>
     2fa:	0c 94 c4 04 	jmp	0x988	; 0x988 <_GLOBAL__sub_I_timer>
     2fe:	0c 94 41 02 	jmp	0x482	; 0x482 <_ZN10CDGUSUSART14IsTransmittingEv>
     302:	0c 94 63 22 	jmp	0x44c6	; 0x44c6 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     306:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <_ZN9CMBSender13OnReceiveByteEh+0x32>
     30a:	0c 94 2b 04 	jmp	0x856	; 0x856 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xea>
     30e:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <_ZN9CMBSender13OnReceiveByteEh+0x42>
     312:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     316:	0c 94 0f 04 	jmp	0x81e	; 0x81e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb2>
     31a:	0c 94 32 04 	jmp	0x864	; 0x864 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf8>
     31e:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <_ZN4CSPI16StaticOnTransmitEPv>
     322:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     326:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <_ZN7CTimerF9SetPeriodEj>
     32a:	0c 94 07 0b 	jmp	0x160e	; 0x160e <_ZN7CTimerC4StopEv>
     32e:	0c 94 cd 03 	jmp	0x79a	; 0x79a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     332:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     336:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     33a:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     33e:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xca>
     342:	0c 94 49 02 	jmp	0x492	; 0x492 <_ZN10CDGUSUSART11IsReceivingEv>
     346:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     34a:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     34e:	0c 94 16 22 	jmp	0x442c	; 0x442c <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     352:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     356:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     35a:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <_ZN7CTimerF8SetCOMPAEj>
     35e:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN7CTimerC9SetPeriodEj>
     362:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_ZN7CTimerF5StartEj>
     366:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     36a:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     36e:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     372:	0c 94 23 04 	jmp	0x846	; 0x846 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xda>
     376:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     37a:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <_ZN7CTimerF8SetCOMPDEj>
     37e:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_GLOBAL__sub_D_timer>
     382:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_ZN10CDGUSUSART11IsDataEmptyEv>
     386:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <_ZN7CTimerC8SetCOMPDEj>
     38a:	0c 94 c1 04 	jmp	0x982	; 0x982 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     38e:	0c 94 3e 02 	jmp	0x47c	; 0x47c <_ZN10CDGUSUSART19SetTransmittingByteEh>

00000392 <__ctors_start>:
     392:	c4 04       	cpc	r12, r4
     394:	b5 20       	and	r11, r5

00000396 <__ctors_end>:
     396:	cd 04       	cpc	r12, r13
     398:	ce 20       	and	r12, r14

0000039a <__dtors_end>:
     39a:	11 24       	eor	r1, r1
     39c:	1f be       	out	0x3f, r1	; 63
     39e:	cf ef       	ldi	r28, 0xFF	; 255
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df e3       	ldi	r29, 0x3F	; 63
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	0c bf       	out	0x3c, r16	; 60

000003aa <__do_copy_data>:
     3aa:	11 e2       	ldi	r17, 0x21	; 33
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e2       	ldi	r27, 0x20	; 32
     3b0:	e2 eb       	ldi	r30, 0xB2	; 178
     3b2:	fc e4       	ldi	r31, 0x4C	; 76
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	0b bf       	out	0x3b, r16	; 59
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x14>
     3ba:	07 90       	elpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a2 31       	cpi	r26, 0x12	; 18
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0x10>

000003c4 <__do_clear_bss>:
     3c4:	23 e2       	ldi	r18, 0x23	; 35
     3c6:	a2 e1       	ldi	r26, 0x12	; 18
     3c8:	b1 e2       	ldi	r27, 0x21	; 33
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	a6 37       	cpi	r26, 0x76	; 118
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>

000003d4 <__do_global_ctors>:
     3d4:	11 e0       	ldi	r17, 0x01	; 1
     3d6:	cb ec       	ldi	r28, 0xCB	; 203
     3d8:	d1 e0       	ldi	r29, 0x01	; 1
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <__do_global_ctors+0x16>
     3de:	21 97       	sbiw	r28, 0x01	; 1
     3e0:	01 09       	sbc	r16, r1
     3e2:	80 2f       	mov	r24, r16
     3e4:	fe 01       	movw	r30, r28
     3e6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__tablejump2__>
     3ea:	c9 3c       	cpi	r28, 0xC9	; 201
     3ec:	d1 07       	cpc	r29, r17
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	08 07       	cpc	r16, r24
     3f2:	a9 f7       	brne	.-22     	; 0x3de <__do_global_ctors+0xa>
     3f4:	0e 94 22 21 	call	0x4244	; 0x4244 <main>
     3f8:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__do_global_dtors>

000003fc <__bad_interrupt>:
     3fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     400:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     402:	e0 e6       	ldi	r30, 0x60	; 96
     404:	f6 e0       	ldi	r31, 0x06	; 6
     406:	88 e0       	ldi	r24, 0x08	; 8
     408:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     40e:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     410:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     412:	e0 ea       	ldi	r30, 0xA0	; 160
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	84 e1       	ldi	r24, 0x14	; 20
     418:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     41a:	88 e1       	ldi	r24, 0x18	; 24
     41c:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     41e:	84 81       	ldd	r24, Z+4	; 0x04
     420:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     422:	41 30       	cpi	r20, 0x01	; 1
     424:	19 f0       	breq	.+6      	; 0x42c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     426:	42 30       	cpi	r20, 0x02	; 2
     428:	19 f0       	breq	.+6      	; 0x430 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     42a:	04 c0       	rjmp	.+8      	; 0x434 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     42c:	80 e2       	ldi	r24, 0x20	; 32
     42e:	03 c0       	rjmp	.+6      	; 0x436 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     430:	80 e3       	ldi	r24, 0x30	; 48
		break;
     432:	01 c0       	rjmp	.+2      	; 0x436 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     434:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     436:	22 23       	and	r18, r18
     438:	19 f0       	breq	.+6      	; 0x440 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     43a:	21 30       	cpi	r18, 0x01	; 1
     43c:	19 f0       	breq	.+6      	; 0x444 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     440:	87 7f       	andi	r24, 0xF7	; 247
		break;
     442:	01 c0       	rjmp	.+2      	; 0x446 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     444:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     446:	01 11       	cpse	r16, r1
     448:	02 c0       	rjmp	.+4      	; 0x44e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     44a:	93 e4       	ldi	r25, 0x43	; 67
     44c:	01 c0       	rjmp	.+2      	; 0x450 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     44e:	93 e0       	ldi	r25, 0x03	; 3
     450:	89 2b       	or	r24, r25
     452:	e0 ea       	ldi	r30, 0xA0	; 160
     454:	f9 e0       	ldi	r31, 0x09	; 9
     456:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	db 01       	movw	r26, r22
     45c:	aa 5d       	subi	r26, 0xDA	; 218
     45e:	bf 4d       	sbci	r27, 0xDF	; 223
     460:	8c 91       	ld	r24, X
     462:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     464:	db 01       	movw	r26, r22
     466:	aa 5f       	subi	r26, 0xFA	; 250
     468:	bf 4d       	sbci	r27, 0xDF	; 223
     46a:	8c 91       	ld	r24, X
     46c:	82 95       	swap	r24
     46e:	80 7f       	andi	r24, 0xF0	; 240
     470:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     476:	80 91 a0 09 	lds	r24, 0x09A0
}
     47a:	08 95       	ret

0000047c <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     47c:	60 93 a0 09 	sts	0x09A0, r22
     480:	08 95       	ret

00000482 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     482:	80 91 a1 09 	lds	r24, 0x09A1
     486:	86 fb       	bst	r24, 6
     488:	88 27       	eor	r24, r24
     48a:	80 f9       	bld	r24, 0
}
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	89 27       	eor	r24, r25
     490:	08 95       	ret

00000492 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     492:	80 91 a1 09 	lds	r24, 0x09A1
     496:	80 95       	com	r24
}
     498:	88 1f       	adc	r24, r24
     49a:	88 27       	eor	r24, r24
     49c:	88 1f       	adc	r24, r24
     49e:	08 95       	ret

000004a0 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     4a0:	80 91 a1 09 	lds	r24, 0x09A1
     4a4:	85 fb       	bst	r24, 5
     4a6:	88 27       	eor	r24, r24
     4a8:	80 f9       	bld	r24, 0
}
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	89 27       	eor	r24, r25
     4ae:	08 95       	ret

000004b0 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     4b0:	60 93 e2 22 	sts	0x22E2, r22
     4b4:	70 93 e3 22 	sts	0x22E3, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     4b8:	40 93 ec 21 	sts	0x21EC, r20
     4bc:	50 93 ed 21 	sts	0x21ED, r21
     4c0:	08 95       	ret

000004c2 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     4c2:	60 93 e6 22 	sts	0x22E6, r22
     4c6:	70 93 e7 22 	sts	0x22E7, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     4ca:	40 93 f0 21 	sts	0x21F0, r20
     4ce:	50 93 f1 21 	sts	0x21F1, r21
     4d2:	08 95       	ret

000004d4 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     4d4:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     4d6:	8b e6       	ldi	r24, 0x6B	; 107
     4d8:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     4da:	80 ea       	ldi	r24, 0xA0	; 160
     4dc:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     4de:	89 e0       	ldi	r24, 0x09	; 9
     4e0:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     4e2:	12 86       	std	Z+10, r1	; 0x0a
     4e4:	08 95       	ret

000004e6 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     4e6:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     4e8:	8c e6       	ldi	r24, 0x6C	; 108
     4ea:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     4ec:	80 ea       	ldi	r24, 0xA0	; 160
     4ee:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     4f0:	89 e0       	ldi	r24, 0x09	; 9
     4f2:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     4f4:	16 86       	std	Z+14, r1	; 0x0e
     4f6:	08 95       	ret

000004f8 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
     4fe:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6CUSARTC1Ev>
     502:	8a e4       	ldi	r24, 0x4A	; 74
     504:	90 e2       	ldi	r25, 0x20	; 32
     506:	88 83       	st	Y, r24
     508:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     510:	2a e4       	ldi	r18, 0x4A	; 74
     512:	30 e2       	ldi	r19, 0x20	; 32
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
     518:	31 83       	std	Z+1, r19	; 0x01
     51a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN6CUSARTD1Ev>
     51e:	08 95       	ret

00000520 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     520:	08 95       	ret

00000522 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     522:	08 95       	ret

00000524 <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
     52a:	e0 e4       	ldi	r30, 0x40	; 64
     52c:	f6 e0       	ldi	r31, 0x06	; 6
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     532:	98 ea       	ldi	r25, 0xA8	; 168
     534:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     536:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     538:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     53a:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     53c:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     53e:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     540:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     542:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
     544:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     546:	a0 e8       	ldi	r26, 0x80	; 128
     548:	b6 e0       	ldi	r27, 0x06	; 6
     54a:	88 e0       	ldi	r24, 0x08	; 8
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	8c 93       	st	X, r24
     550:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     552:	53 96       	adiw	r26, 0x13	; 19
     554:	1c 92       	st	X, r1
     556:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
     558:	14 96       	adiw	r26, 0x04	; 4
     55a:	1c 92       	st	X, r1
     55c:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     55e:	e0 ea       	ldi	r30, 0xA0	; 160
     560:	f6 e0       	ldi	r31, 0x06	; 6
     562:	90 ec       	ldi	r25, 0xC0	; 192
     564:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     566:	80 e8       	ldi	r24, 0x80	; 128
     568:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56a:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56c:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56e:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     570:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     572:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     574:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     576:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     578:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     57a:	e0 e6       	ldi	r30, 0x60	; 96
     57c:	f6 e0       	ldi	r31, 0x06	; 6
     57e:	21 e1       	ldi	r18, 0x11	; 17
     580:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     582:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     584:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     586:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	9c 93       	st	X, r25
     58e:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     590:	50 96       	adiw	r26, 0x10	; 16
     592:	8c 93       	st	X, r24
     594:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     596:	51 96       	adiw	r26, 0x11	; 17
     598:	8c 93       	st	X, r24
     59a:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
     59c:	14 96       	adiw	r26, 0x04	; 4
     59e:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     5a0:	e0 ea       	ldi	r30, 0xA0	; 160
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	82 60       	ori	r24, 0x02	; 2
     5ae:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	84 60       	ori	r24, 0x04	; 4
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	fe 01       	movw	r30, r28
     5b8:	9e 01       	movw	r18, r28
     5ba:	28 5f       	subi	r18, 0xF8	; 248
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
     5c2:	e2 17       	cp	r30, r18
     5c4:	f3 07       	cpc	r31, r19
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <_ZN11CLaserBoard12InitializeIOEv+0x9c>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
     5c8:	8a e0       	ldi	r24, 0x0A	; 10
     5ca:	88 87       	std	Y+8, r24	; 0x08
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     5d2:	e0 e5       	ldi	r30, 0x50	; 80
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	8b ec       	ldi	r24, 0xCB	; 203
     5d8:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     5da:	80 81       	ld	r24, Z
     5dc:	88 60       	ori	r24, 0x08	; 8
     5de:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     5e0:	81 81       	ldd	r24, Z+1	; 0x01
     5e2:	83 ff       	sbrs	r24, 3
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     5e6:	e0 e5       	ldi	r30, 0x50	; 80
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     5ec:	98 ed       	ldi	r25, 0xD8	; 216
     5ee:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     5f0:	84 ec       	ldi	r24, 0xC4	; 196
     5f2:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     5f4:	80 81       	ld	r24, Z
     5f6:	80 61       	ori	r24, 0x10	; 16
     5f8:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     5fa:	e0 e4       	ldi	r30, 0x40	; 64
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     600:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     602:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     604:	e0 e5       	ldi	r30, 0x50	; 80
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	81 81       	ldd	r24, Z+1	; 0x01
     60a:	84 ff       	sbrs	r24, 4
     60c:	fd cf       	rjmp	.-6      	; 0x608 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     60e:	e0 e4       	ldi	r30, 0x40	; 64
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	88 7f       	andi	r24, 0xF8	; 248
     616:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     618:	98 ed       	ldi	r25, 0xD8	; 216
     61a:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     61c:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     61e:	a0 e5       	ldi	r26, 0x50	; 80
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	8c 91       	ld	r24, X
     624:	88 7f       	andi	r24, 0xF8	; 248
     626:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     628:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     62a:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     630:	e0 eb       	ldi	r30, 0xB0	; 176
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	84 81       	ldd	r24, Z+4	; 0x04
     636:	8c 7f       	andi	r24, 0xFC	; 252
     638:	84 83       	std	Z+4, r24	; 0x04
     63a:	08 95       	ret

0000063c <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 62 06 	sts	0x0662, r24
     642:	08 95       	ret

00000644 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     644:	80 e1       	ldi	r24, 0x10	; 16
     646:	80 93 62 06 	sts	0x0662, r24
     64a:	08 95       	ret

0000064c <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 61 06 	sts	0x0661, r24
     652:	08 95       	ret

00000654 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     654:	80 e1       	ldi	r24, 0x10	; 16
     656:	80 93 61 06 	sts	0x0661, r24
     65a:	08 95       	ret

0000065c <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	80 93 85 06 	sts	0x0685, r24
     662:	08 95       	ret

00000664 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	80 93 86 06 	sts	0x0686, r24
     66a:	08 95       	ret

0000066c <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     66c:	f8 94       	cli
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     672:	e0 e8       	ldi	r30, 0x80	; 128
     674:	f6 e0       	ldi	r31, 0x06	; 6
     676:	28 e0       	ldi	r18, 0x08	; 8
     678:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	af e9       	ldi	r26, 0x9F	; 159
     67c:	bf e0       	ldi	r27, 0x0F	; 15
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <_ZN11CLaserBoard4BeepEv+0x12>
     682:	00 c0       	rjmp	.+0      	; 0x684 <_ZN11CLaserBoard4BeepEv+0x18>
     684:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     686:	26 83       	std	Z+6, r18	; 0x06
     688:	af e9       	ldi	r26, 0x9F	; 159
     68a:	bf e0       	ldi	r27, 0x0F	; 15
     68c:	11 97       	sbiw	r26, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <_ZN11CLaserBoard4BeepEv+0x20>
     690:	00 c0       	rjmp	.+0      	; 0x692 <_ZN11CLaserBoard4BeepEv+0x26>
     692:	00 00       	nop
     694:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     696:	81 f7       	brne	.-32     	; 0x678 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     698:	78 94       	sei
     69a:	08 95       	ret

0000069c <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     69c:	f8 94       	cli
     69e:	45 e0       	ldi	r20, 0x05	; 5
     6a0:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6a2:	64 e6       	ldi	r22, 0x64	; 100
     6a4:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     6a6:	e0 e8       	ldi	r30, 0x80	; 128
     6a8:	f6 e0       	ldi	r31, 0x06	; 6
     6aa:	28 e0       	ldi	r18, 0x08	; 8
     6ac:	1c c0       	rjmp	.+56     	; 0x6e6 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     6ae:	25 83       	std	Z+5, r18	; 0x05
     6b0:	af e9       	ldi	r26, 0x9F	; 159
     6b2:	bf e0       	ldi	r27, 0x0F	; 15
     6b4:	11 97       	sbiw	r26, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     6ba:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     6bc:	26 83       	std	Z+6, r18	; 0x06
     6be:	af e9       	ldi	r26, 0x9F	; 159
     6c0:	bf e0       	ldi	r27, 0x0F	; 15
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     6c8:	00 00       	nop
     6ca:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     6cc:	81 f7       	brne	.-32     	; 0x6ae <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ce:	bf ef       	ldi	r27, 0xFF	; 255
     6d0:	73 ec       	ldi	r23, 0xC3	; 195
     6d2:	89 e0       	ldi	r24, 0x09	; 9
     6d4:	b1 50       	subi	r27, 0x01	; 1
     6d6:	70 40       	sbci	r23, 0x00	; 0
     6d8:	80 40       	sbci	r24, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     6de:	00 00       	nop
     6e0:	41 50       	subi	r20, 0x01	; 1
     6e2:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     6e4:	19 f0       	breq	.+6      	; 0x6ec <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6e6:	86 2f       	mov	r24, r22
     6e8:	93 2f       	mov	r25, r19
     6ea:	e1 cf       	rjmp	.-62     	; 0x6ae <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     6ec:	78 94       	sei
     6ee:	08 95       	ret

000006f0 <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
     6f0:	cf 93       	push	r28
     6f2:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
     6f4:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     6f8:	18 96       	adiw	r26, 0x08	; 8
     6fa:	3c 91       	ld	r19, X
     6fc:	18 97       	sbiw	r26, 0x08	; 8
     6fe:	fc 01       	movw	r30, r24
     700:	ac 01       	movw	r20, r24
     702:	48 5f       	subi	r20, 0xF8	; 248
     704:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
     706:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     708:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     70a:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
     70c:	89 2f       	mov	r24, r25
     70e:	86 23       	and	r24, r22
     710:	41 f0       	breq	.+16     	; 0x722 <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
     712:	80 81       	ld	r24, Z
     714:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
     716:	81 38       	cpi	r24, 0x81	; 129
     718:	10 f4       	brcc	.+4      	; 0x71e <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
     71a:	80 83       	st	Z, r24
     71c:	08 c0       	rjmp	.+16     	; 0x72e <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     71e:	70 83       	st	Z, r23
     720:	06 c0       	rjmp	.+12     	; 0x72e <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
     722:	80 81       	ld	r24, Z
     724:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
     726:	11 f0       	breq	.+4      	; 0x72c <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
     728:	80 83       	st	Z, r24
     72a:	01 c0       	rjmp	.+2      	; 0x72e <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     72c:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     72e:	81 91       	ld	r24, Z+
     730:	38 17       	cp	r19, r24
     732:	40 f4       	brcc	.+16     	; 0x744 <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
     734:	19 96       	adiw	r26, 0x09	; 9
     736:	8c 91       	ld	r24, X
     738:	19 97       	sbiw	r26, 0x09	; 9
     73a:	89 2b       	or	r24, r25
     73c:	19 96       	adiw	r26, 0x09	; 9
     73e:	8c 93       	st	X, r24
     740:	19 97       	sbiw	r26, 0x09	; 9
     742:	09 c0       	rjmp	.+18     	; 0x756 <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
     744:	19 96       	adiw	r26, 0x09	; 9
     746:	8c 91       	ld	r24, X
     748:	19 97       	sbiw	r26, 0x09	; 9
     74a:	29 2f       	mov	r18, r25
     74c:	20 95       	com	r18
     74e:	28 23       	and	r18, r24
     750:	19 96       	adiw	r26, 0x09	; 9
     752:	2c 93       	st	X, r18
     754:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
     756:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
     758:	e4 17       	cp	r30, r20
     75a:	f5 07       	cpc	r31, r21
     75c:	b9 f6       	brne	.-82     	; 0x70c <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
     762:	fc 01       	movw	r30, r24
     764:	81 85       	ldd	r24, Z+9	; 0x09
     766:	81 70       	andi	r24, 0x01	; 1
     768:	08 95       	ret

0000076a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
		}
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     76c:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     76e:	63 30       	cpi	r22, 0x03	; 3
     770:	29 f4       	brne	.+10     	; 0x77c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     772:	fa 01       	movw	r30, r20
     774:	81 81       	ldd	r24, Z+1	; 0x01
     776:	1e 96       	adiw	r26, 0x0e	; 14
     778:	8c 93       	st	X, r24
     77a:	1e 97       	sbiw	r26, 0x0e	; 14
	
	switch (PIC_ID)
     77c:	1e 96       	adiw	r26, 0x0e	; 14
     77e:	4c 91       	ld	r20, X
     780:	1e 97       	sbiw	r26, 0x0e	; 14
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	44 31       	cpi	r20, 0x14	; 20
     786:	51 05       	cpc	r21, r1
     788:	08 f0       	brcs	.+2      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     78a:	6c c0       	rjmp	.+216    	; 0x864 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf8>
     78c:	fa 01       	movw	r30, r20
     78e:	88 27       	eor	r24, r24
     790:	ec 50       	subi	r30, 0x0C	; 12
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	8f 4f       	sbci	r24, 0xFF	; 255
     796:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     79a:	1c 96       	adiw	r26, 0x0c	; 12
     79c:	1c 92       	st	X, r1
		break;
     79e:	08 95       	ret
		case PICID_WORKFAST:
			state = APP_WORKFAST;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	1c 96       	adiw	r26, 0x0c	; 12
     7a4:	8c 93       	st	X, r24
     7a6:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkFast)
     7a8:	1d 96       	adiw	r26, 0x0d	; 13
     7aa:	8c 91       	ld	r24, X
     7ac:	1d 97       	sbiw	r26, 0x0d	; 13
     7ae:	88 23       	and	r24, r24
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     7b2:	58 c0       	rjmp	.+176    	; 0x864 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf8>
			{
				profile = WorkFast;
     7b4:	1d 96       	adiw	r26, 0x0d	; 13
     7b6:	1c 92       	st	X, r1
     7b8:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	1f 96       	adiw	r26, 0x0f	; 15
     7be:	8c 93       	st	X, r24
     7c0:	08 95       	ret
			}
		break;
		case PICID_WORKMEDIUM:
			state = APP_WORKMEDIUM;
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	1c 96       	adiw	r26, 0x0c	; 12
     7c6:	8c 93       	st	X, r24
     7c8:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkMedium)
     7ca:	1d 96       	adiw	r26, 0x0d	; 13
     7cc:	8c 91       	ld	r24, X
     7ce:	1d 97       	sbiw	r26, 0x0d	; 13
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     7d4:	47 c0       	rjmp	.+142    	; 0x864 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf8>
			{
				profile = WorkMedium;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	1d 96       	adiw	r26, 0x0d	; 13
     7da:	8c 93       	st	X, r24
     7dc:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     7de:	1f 96       	adiw	r26, 0x0f	; 15
     7e0:	8c 93       	st	X, r24
     7e2:	08 95       	ret
			}
		break;
		case PICID_WORKSLOW:
			state = APP_WORKSLOW;
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	1c 96       	adiw	r26, 0x0c	; 12
     7e8:	8c 93       	st	X, r24
     7ea:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkSlow)
     7ec:	1d 96       	adiw	r26, 0x0d	; 13
     7ee:	8c 91       	ld	r24, X
     7f0:	1d 97       	sbiw	r26, 0x0d	; 13
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	b9 f1       	breq	.+110    	; 0x864 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf8>
			{
				profile = WorkSlow;
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	1d 96       	adiw	r26, 0x0d	; 13
     7fa:	8c 93       	st	X, r24
     7fc:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	1f 96       	adiw	r26, 0x0f	; 15
     802:	8c 93       	st	X, r24
     804:	08 95       	ret
			}
		break;
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     806:	86 e0       	ldi	r24, 0x06	; 6
     808:	1c 96       	adiw	r26, 0x0c	; 12
     80a:	8c 93       	st	X, r24
		break;
     80c:	08 95       	ret
		case PICID_WORKOnStart:
			state = APP_WORKOnStart;
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	1c 96       	adiw	r26, 0x0c	; 12
     812:	8c 93       	st	X, r24
		break;
     814:	08 95       	ret
		case PICID_WORKOnStop:
			state = APP_WORKOnStop;
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	1c 96       	adiw	r26, 0x0c	; 12
     81a:	8c 93       	st	X, r24
		break;
     81c:	08 95       	ret
		case PICID_WORKSTART:
			state = APP_WORKSTART;
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	1c 96       	adiw	r26, 0x0c	; 12
     822:	8c 93       	st	X, r24
		break;
     824:	08 95       	ret
		case PICID_WORKSTARTED:
			state = APP_WORKSTARTED;
     826:	85 e0       	ldi	r24, 0x05	; 5
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8c 93       	st	X, r24
		break;
     82c:	08 95       	ret
		case PICID_PHOTOTYPESELECT:
			state = APP_PHOTOTYPESELECT;
     82e:	89 e0       	ldi	r24, 0x09	; 9
     830:	1c 96       	adiw	r26, 0x0c	; 12
     832:	8c 93       	st	X, r24
		break;
     834:	08 95       	ret
		case PICID_PHOTOTYPE1:
			state = APP_PHOTOTYPE1;
     836:	8a e0       	ldi	r24, 0x0A	; 10
     838:	1c 96       	adiw	r26, 0x0c	; 12
     83a:	8c 93       	st	X, r24
		break;
     83c:	08 95       	ret
		case PICID_PHOTOTYPE2:
			state = APP_PHOTOTYPE2;
     83e:	8b e0       	ldi	r24, 0x0B	; 11
     840:	1c 96       	adiw	r26, 0x0c	; 12
     842:	8c 93       	st	X, r24
		break;
     844:	08 95       	ret
		case PICID_PHOTOTYPE3:
			state = APP_PHOTOTYPE3;
     846:	8c e0       	ldi	r24, 0x0C	; 12
     848:	1c 96       	adiw	r26, 0x0c	; 12
     84a:	8c 93       	st	X, r24
		break;
     84c:	08 95       	ret
		case PICID_PHOTOTYPE4:
			state = APP_PHOTOTYPE4;
     84e:	8d e0       	ldi	r24, 0x0D	; 13
     850:	1c 96       	adiw	r26, 0x0c	; 12
     852:	8c 93       	st	X, r24
		break;
     854:	08 95       	ret
		case PICID_PHOTOTYPE5:
			state = APP_PHOTOTYPE5;
     856:	8e e0       	ldi	r24, 0x0E	; 14
     858:	1c 96       	adiw	r26, 0x0c	; 12
     85a:	8c 93       	st	X, r24
		break;
     85c:	08 95       	ret
		case PICID_PHOTOTYPE6:
			state = APP_PHOTOTYPE6;
     85e:	8f e0       	ldi	r24, 0x0F	; 15
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8c 93       	st	X, r24
     864:	08 95       	ret

00000866 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     866:	08 95       	ret

00000868 <_Z11ConvertDataPvS_j>:
	return (data >> 8) | (data << 8);
}

void ConvertData(void* dst, void* src, uint16_t size)
{
	uint16_t  length = size / 2;
     868:	56 95       	lsr	r21
     86a:	47 95       	ror	r20
	uint16_t* source = (uint16_t*)src;
	uint16_t* dest = (uint16_t*)dst;
	
	// swap bytes in words
	for (uint16_t i = 0; i < length; i++)
     86c:	41 15       	cp	r20, r1
     86e:	51 05       	cpc	r21, r1
     870:	89 f0       	breq	.+34     	; 0x894 <_Z11ConvertDataPvS_j+0x2c>
     872:	fb 01       	movw	r30, r22
     874:	a8 2f       	mov	r26, r24
     876:	b9 2f       	mov	r27, r25
     878:	44 0f       	add	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	64 0f       	add	r22, r20
     87e:	75 1f       	adc	r23, r21
		dest[i] = swap(source[i]);
     880:	81 91       	ld	r24, Z+
     882:	91 91       	ld	r25, Z+
volatile DGUS_DATA m_structDGUSDATA_Medium;
volatile DGUS_DATA m_structDGUSDATA_Slow;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     884:	98 27       	eor	r25, r24
     886:	89 27       	eor	r24, r25
     888:	98 27       	eor	r25, r24
	uint16_t* source = (uint16_t*)src;
	uint16_t* dest = (uint16_t*)dst;
	
	// swap bytes in words
	for (uint16_t i = 0; i < length; i++)
		dest[i] = swap(source[i]);
     88a:	8d 93       	st	X+, r24
     88c:	9d 93       	st	X+, r25
	uint16_t  length = size / 2;
	uint16_t* source = (uint16_t*)src;
	uint16_t* dest = (uint16_t*)dst;
	
	// swap bytes in words
	for (uint16_t i = 0; i < length; i++)
     88e:	e6 17       	cp	r30, r22
     890:	f7 07       	cpc	r31, r23
     892:	b1 f7       	brne	.-20     	; 0x880 <_Z11ConvertDataPvS_j+0x18>
     894:	08 95       	ret

00000896 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	
	if (addr == STRUCT_ADDR_DATA)
     896:	61 30       	cpi	r22, 0x01	; 1
     898:	71 05       	cpc	r23, r1
     89a:	e9 f4       	brne	.+58     	; 0x8d6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x40>
     89c:	ba 01       	movw	r22, r20
     89e:	fc 01       	movw	r30, r24
	{
		//memcpy((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		switch (profile)
     8a0:	85 85       	ldd	r24, Z+13	; 0x0d
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	81 f0       	breq	.+32     	; 0x8c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x30>
     8a6:	18 f0       	brcs	.+6      	; 0x8ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	39 f0       	breq	.+14     	; 0x8ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x24>
     8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3c>
		{
			case WorkFast:
				ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
     8ae:	a9 01       	movw	r20, r18
     8b0:	8a e2       	ldi	r24, 0x2A	; 42
     8b2:	91 e2       	ldi	r25, 0x21	; 33
     8b4:	0e 94 34 04 	call	0x868	; 0x868 <_Z11ConvertDataPvS_j>
			break;
     8b8:	08 95       	ret
			case WorkSlow:
				ConvertData((void*)&m_structDGUSDATA_Slow, (void*)data, length);
     8ba:	a9 01       	movw	r20, r18
     8bc:	82 e1       	ldi	r24, 0x12	; 18
     8be:	91 e2       	ldi	r25, 0x21	; 33
     8c0:	0e 94 34 04 	call	0x868	; 0x868 <_Z11ConvertDataPvS_j>
			break;
     8c4:	08 95       	ret
			case WorkMedium:
				ConvertData((void*)&m_structDGUSDATA_Medium, (void*)data, length);
     8c6:	a9 01       	movw	r20, r18
     8c8:	8e e1       	ldi	r24, 0x1E	; 30
     8ca:	91 e2       	ldi	r25, 0x21	; 33
     8cc:	0e 94 34 04 	call	0x868	; 0x868 <_Z11ConvertDataPvS_j>
			break;
     8d0:	08 95       	ret
			default:
				// Error
				CLaserBoard::Beep();
     8d2:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN11CLaserBoard4BeepEv>
     8d6:	08 95       	ret

000008d8 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     8d8:	22 e6       	ldi	r18, 0x62	; 98
     8da:	30 e2       	ldi	r19, 0x20	; 32
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	08 95       	ret

000008e4 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     8e4:	22 e6       	ldi	r18, 0x62	; 98
     8e6:	30 e2       	ldi	r19, 0x20	; 32
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	31 83       	std	Z+1, r19	; 0x01
     8ee:	0e 94 62 22 	call	0x44c4	; 0x44c4 <_ZN16CMBEventsHandlerD1Ev>
     8f2:	08 95       	ret

000008f4 <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = WorkFast;
}

void CLaserControlApp::Start()
{	
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	1f 92       	push	r1
     8fe:	1f 92       	push	r1
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     90e:	22 e0       	ldi	r18, 0x02	; 2
     910:	ae 01       	movw	r20, r28
     912:	4f 5f       	subi	r20, 0xFF	; 255
     914:	5f 4f       	sbci	r21, 0xFF	; 255
     916:	63 e0       	ldi	r22, 0x03	; 3
     918:	f8 01       	movw	r30, r16
     91a:	80 8d       	ldd	r24, Z+24	; 0x18
     91c:	91 8d       	ldd	r25, Z+25	; 0x19
     91e:	0e 94 17 24 	call	0x482e	; 0x482e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     922:	f8 01       	movw	r30, r16
     924:	80 8d       	ldd	r24, Z+24	; 0x18
     926:	91 8d       	ldd	r25, Z+25	; 0x19
     928:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(m_structDGUSDATA_Fast));
     92c:	2c e0       	ldi	r18, 0x0C	; 12
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	4a e2       	ldi	r20, 0x2A	; 42
     932:	51 e2       	ldi	r21, 0x21	; 33
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	f8 01       	movw	r30, r16
     93a:	80 8d       	ldd	r24, Z+24	; 0x18
     93c:	91 8d       	ldd	r25, Z+25	; 0x19
     93e:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     942:	f8 01       	movw	r30, r16
     944:	80 8d       	ldd	r24, Z+24	; 0x18
     946:	91 8d       	ldd	r25, Z+25	; 0x19
     948:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	f8 01       	movw	r30, r16
     950:	84 87       	std	Z+12, r24	; 0x0c
}
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     960:	fc 01       	movw	r30, r24
     962:	44 89       	ldd	r20, Z+20	; 0x14
     964:	55 89       	ldd	r21, Z+21	; 0x15
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	68 ee       	ldi	r22, 0xE8	; 232
     96e:	73 e0       	ldi	r23, 0x03	; 3
     970:	84 e4       	ldi	r24, 0x44	; 68
     972:	93 e2       	ldi	r25, 0x23	; 35
     974:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     978:	84 e4       	ldi	r24, 0x44	; 68
     97a:	93 e2       	ldi	r25, 0x23	; 35
     97c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_ZN12CSoundPlayer9SoundStopEv>
     980:	08 95       	ret

00000982 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     982:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN16CLaserControlApp12OnLaserTimerEv>
     986:	08 95       	ret

00000988 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     988:	89 e3       	ldi	r24, 0x39	; 57
     98a:	91 e2       	ldi	r25, 0x21	; 33
     98c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     990:	86 e3       	ldi	r24, 0x36	; 54
     992:	91 e2       	ldi	r25, 0x21	; 33
     994:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN7CTimerFC1Ev>
     998:	08 95       	ret

0000099a <_GLOBAL__sub_D_timer>:
     99a:	86 e3       	ldi	r24, 0x36	; 54
     99c:	91 e2       	ldi	r25, 0x21	; 33
     99e:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     9a2:	89 e3       	ldi	r24, 0x39	; 57
     9a4:	91 e2       	ldi	r25, 0x21	; 33
     9a6:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN7CTimerCD1Ev>
     9aa:	08 95       	ret

000009ac <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     9ac:	8f 92       	push	r8
     9ae:	9f 92       	push	r9
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	8c 01       	movw	r16, r24
	// GUI class initialization
	m_cpSender = sender;
     9c6:	dc 01       	movw	r26, r24
     9c8:	58 96       	adiw	r26, 0x18	; 24
     9ca:	6d 93       	st	X+, r22
     9cc:	7c 93       	st	X, r23
     9ce:	59 97       	sbiw	r26, 0x19	; 25
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     9d0:	46 e0       	ldi	r20, 0x06	; 6
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	89 e3       	ldi	r24, 0x39	; 57
     9d6:	91 e2       	ldi	r25, 0x21	; 33
     9d8:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     9dc:	68 ea       	ldi	r22, 0xA8	; 168
     9de:	71 e6       	ldi	r23, 0x61	; 97
     9e0:	89 e3       	ldi	r24, 0x39	; 57
     9e2:	91 e2       	ldi	r25, 0x21	; 33
     9e4:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	a8 01       	movw	r20, r16
     9ec:	63 e3       	ldi	r22, 0x33	; 51
     9ee:	74 e0       	ldi	r23, 0x04	; 4
     9f0:	89 e3       	ldi	r24, 0x39	; 57
     9f2:	91 e2       	ldi	r25, 0x21	; 33
     9f4:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     9f8:	f8 01       	movw	r30, r16
     9fa:	16 86       	std	Z+14, r1	; 0x0e
	update = false;
     9fc:	17 86       	std	Z+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA_Fast.Frequency = 10; // 10 Hz
     9fe:	ea e2       	ldi	r30, 0x2A	; 42
     a00:	f1 e2       	ldi	r31, 0x21	; 33
     a02:	8a e0       	ldi	r24, 0x0A	; 10
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	80 83       	st	Z, r24
     a08:	91 83       	std	Z+1, r25	; 0x01
	m_structDGUSDATA_Fast.DutyCycle = 50; // 50%
     a0a:	0f 2e       	mov	r0, r31
     a0c:	f2 e3       	ldi	r31, 0x32	; 50
     a0e:	af 2e       	mov	r10, r31
     a10:	b1 2c       	mov	r11, r1
     a12:	f0 2d       	mov	r31, r0
     a14:	a2 86       	std	Z+10, r10	; 0x0a
     a16:	b3 86       	std	Z+11, r11	; 0x0b
	m_structDGUSDATA_Fast.Duration  = ((1000 / m_structDGUSDATA_Fast.Frequency) * m_structDGUSDATA_Fast.DutyCycle) / 100; // ms
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	c2 85       	ldd	r28, Z+10	; 0x0a
     a1e:	d3 85       	ldd	r29, Z+11	; 0x0b
     a20:	0f 2e       	mov	r0, r31
     a22:	f8 ee       	ldi	r31, 0xE8	; 232
     a24:	cf 2e       	mov	r12, r31
     a26:	f3 e0       	ldi	r31, 0x03	; 3
     a28:	df 2e       	mov	r13, r31
     a2a:	f0 2d       	mov	r31, r0
     a2c:	c6 01       	movw	r24, r12
     a2e:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
     a32:	6c 9f       	mul	r22, r28
     a34:	90 01       	movw	r18, r0
     a36:	6d 9f       	mul	r22, r29
     a38:	30 0d       	add	r19, r0
     a3a:	7c 9f       	mul	r23, r28
     a3c:	30 0d       	add	r19, r0
     a3e:	11 24       	eor	r1, r1
     a40:	36 95       	lsr	r19
     a42:	27 95       	ror	r18
     a44:	36 95       	lsr	r19
     a46:	27 95       	ror	r18
     a48:	ab e7       	ldi	r26, 0x7B	; 123
     a4a:	b4 e1       	ldi	r27, 0x14	; 20
     a4c:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	82 83       	std	Z+2, r24	; 0x02
     a56:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Fast.Intensity = 200; // W
     a58:	0f 2e       	mov	r0, r31
     a5a:	f8 ec       	ldi	r31, 0xC8	; 200
     a5c:	ef 2e       	mov	r14, r31
     a5e:	f1 2c       	mov	r15, r1
     a60:	f0 2d       	mov	r31, r0
     a62:	e4 82       	std	Z+4, r14	; 0x04
     a64:	f5 82       	std	Z+5, r15	; 0x05
	m_structDGUSDATA_Fast.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100; // W
     a66:	84 81       	ldd	r24, Z+4	; 0x04
     a68:	95 81       	ldd	r25, Z+5	; 0x05
     a6a:	42 85       	ldd	r20, Z+10	; 0x0a
     a6c:	53 85       	ldd	r21, Z+11	; 0x0b
     a6e:	48 9f       	mul	r20, r24
     a70:	90 01       	movw	r18, r0
     a72:	49 9f       	mul	r20, r25
     a74:	30 0d       	add	r19, r0
     a76:	58 9f       	mul	r21, r24
     a78:	30 0d       	add	r19, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	36 95       	lsr	r19
     a7e:	27 95       	ror	r18
     a80:	36 95       	lsr	r19
     a82:	27 95       	ror	r18
     a84:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	86 83       	std	Z+6, r24	; 0x06
     a8e:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Fast.Energy    = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration) / 1000; // J
     a90:	84 81       	ldd	r24, Z+4	; 0x04
     a92:	95 81       	ldd	r25, Z+5	; 0x05
     a94:	42 81       	ldd	r20, Z+2	; 0x02
     a96:	53 81       	ldd	r21, Z+3	; 0x03
     a98:	48 9f       	mul	r20, r24
     a9a:	90 01       	movw	r18, r0
     a9c:	49 9f       	mul	r20, r25
     a9e:	30 0d       	add	r19, r0
     aa0:	58 9f       	mul	r21, r24
     aa2:	30 0d       	add	r19, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	36 95       	lsr	r19
     aa8:	27 95       	ror	r18
     aaa:	36 95       	lsr	r19
     aac:	27 95       	ror	r18
     aae:	36 95       	lsr	r19
     ab0:	27 95       	ror	r18
     ab2:	a5 ec       	ldi	r26, 0xC5	; 197
     ab4:	b0 e2       	ldi	r27, 0x20	; 32
     ab6:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     aba:	92 95       	swap	r25
     abc:	82 95       	swap	r24
     abe:	8f 70       	andi	r24, 0x0F	; 15
     ac0:	89 27       	eor	r24, r25
     ac2:	9f 70       	andi	r25, 0x0F	; 15
     ac4:	89 27       	eor	r24, r25
     ac6:	80 87       	std	Z+8, r24	; 0x08
     ac8:	91 87       	std	Z+9, r25	; 0x09
	
	// Slow profile
	m_structDGUSDATA_Slow.Frequency = 1; // 10 Hz
     aca:	c2 e1       	ldi	r28, 0x12	; 18
     acc:	d1 e2       	ldi	r29, 0x21	; 33
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	88 83       	st	Y, r24
     ad4:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Slow.DutyCycle = 50; // 50%
     ad6:	aa 86       	std	Y+10, r10	; 0x0a
     ad8:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Slow.Duration  = ((1000 / m_structDGUSDATA_Slow.Frequency) * m_structDGUSDATA_Slow.DutyCycle) / 100; // ms
     ada:	68 81       	ld	r22, Y
     adc:	79 81       	ldd	r23, Y+1	; 0x01
     ade:	8a 84       	ldd	r8, Y+10	; 0x0a
     ae0:	9b 84       	ldd	r9, Y+11	; 0x0b
     ae2:	c6 01       	movw	r24, r12
     ae4:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
     ae8:	68 9d       	mul	r22, r8
     aea:	90 01       	movw	r18, r0
     aec:	69 9d       	mul	r22, r9
     aee:	30 0d       	add	r19, r0
     af0:	78 9d       	mul	r23, r8
     af2:	30 0d       	add	r19, r0
     af4:	11 24       	eor	r1, r1
     af6:	36 95       	lsr	r19
     af8:	27 95       	ror	r18
     afa:	36 95       	lsr	r19
     afc:	27 95       	ror	r18
     afe:	ab e7       	ldi	r26, 0x7B	; 123
     b00:	b4 e1       	ldi	r27, 0x14	; 20
     b02:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     b06:	96 95       	lsr	r25
     b08:	87 95       	ror	r24
     b0a:	8a 83       	std	Y+2, r24	; 0x02
     b0c:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Slow.Intensity = 200; // W
     b0e:	ec 82       	std	Y+4, r14	; 0x04
     b10:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Slow.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100; // W
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	4a 85       	ldd	r20, Y+10	; 0x0a
     b18:	5b 85       	ldd	r21, Y+11	; 0x0b
     b1a:	48 9f       	mul	r20, r24
     b1c:	90 01       	movw	r18, r0
     b1e:	49 9f       	mul	r20, r25
     b20:	30 0d       	add	r19, r0
     b22:	58 9f       	mul	r21, r24
     b24:	30 0d       	add	r19, r0
     b26:	11 24       	eor	r1, r1
     b28:	36 95       	lsr	r19
     b2a:	27 95       	ror	r18
     b2c:	36 95       	lsr	r19
     b2e:	27 95       	ror	r18
     b30:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     b34:	96 95       	lsr	r25
     b36:	87 95       	ror	r24
     b38:	8e 83       	std	Y+6, r24	; 0x06
     b3a:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Slow.Energy    = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration) / 1000; // J
     b3c:	8c 81       	ldd	r24, Y+4	; 0x04
     b3e:	9d 81       	ldd	r25, Y+5	; 0x05
     b40:	4a 81       	ldd	r20, Y+2	; 0x02
     b42:	5b 81       	ldd	r21, Y+3	; 0x03
     b44:	48 9f       	mul	r20, r24
     b46:	90 01       	movw	r18, r0
     b48:	49 9f       	mul	r20, r25
     b4a:	30 0d       	add	r19, r0
     b4c:	58 9f       	mul	r21, r24
     b4e:	30 0d       	add	r19, r0
     b50:	11 24       	eor	r1, r1
     b52:	36 95       	lsr	r19
     b54:	27 95       	ror	r18
     b56:	36 95       	lsr	r19
     b58:	27 95       	ror	r18
     b5a:	36 95       	lsr	r19
     b5c:	27 95       	ror	r18
     b5e:	a5 ec       	ldi	r26, 0xC5	; 197
     b60:	b0 e2       	ldi	r27, 0x20	; 32
     b62:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     b66:	92 95       	swap	r25
     b68:	82 95       	swap	r24
     b6a:	8f 70       	andi	r24, 0x0F	; 15
     b6c:	89 27       	eor	r24, r25
     b6e:	9f 70       	andi	r25, 0x0F	; 15
     b70:	89 27       	eor	r24, r25
     b72:	88 87       	std	Y+8, r24	; 0x08
     b74:	99 87       	std	Y+9, r25	; 0x09
	
	// Medium profile
	m_structDGUSDATA_Medium.Frequency = 5; // 10 Hz
     b76:	ce e1       	ldi	r28, 0x1E	; 30
     b78:	d1 e2       	ldi	r29, 0x21	; 33
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	88 83       	st	Y, r24
     b80:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Medium.DutyCycle = 50; // 50%
     b82:	aa 86       	std	Y+10, r10	; 0x0a
     b84:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Medium.Duration  = ((1000 / m_structDGUSDATA_Medium.Frequency) * m_structDGUSDATA_Medium.DutyCycle) / 100; // ms
     b86:	68 81       	ld	r22, Y
     b88:	79 81       	ldd	r23, Y+1	; 0x01
     b8a:	aa 84       	ldd	r10, Y+10	; 0x0a
     b8c:	bb 84       	ldd	r11, Y+11	; 0x0b
     b8e:	c6 01       	movw	r24, r12
     b90:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
     b94:	6a 9d       	mul	r22, r10
     b96:	90 01       	movw	r18, r0
     b98:	6b 9d       	mul	r22, r11
     b9a:	30 0d       	add	r19, r0
     b9c:	7a 9d       	mul	r23, r10
     b9e:	30 0d       	add	r19, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	36 95       	lsr	r19
     ba4:	27 95       	ror	r18
     ba6:	36 95       	lsr	r19
     ba8:	27 95       	ror	r18
     baa:	ab e7       	ldi	r26, 0x7B	; 123
     bac:	b4 e1       	ldi	r27, 0x14	; 20
     bae:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     bb2:	96 95       	lsr	r25
     bb4:	87 95       	ror	r24
     bb6:	8a 83       	std	Y+2, r24	; 0x02
     bb8:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Medium.Intensity = 200; // W
     bba:	ec 82       	std	Y+4, r14	; 0x04
     bbc:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Medium.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100; // W
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	9d 81       	ldd	r25, Y+5	; 0x05
     bc2:	4a 85       	ldd	r20, Y+10	; 0x0a
     bc4:	5b 85       	ldd	r21, Y+11	; 0x0b
     bc6:	48 9f       	mul	r20, r24
     bc8:	90 01       	movw	r18, r0
     bca:	49 9f       	mul	r20, r25
     bcc:	30 0d       	add	r19, r0
     bce:	58 9f       	mul	r21, r24
     bd0:	30 0d       	add	r19, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	36 95       	lsr	r19
     bd6:	27 95       	ror	r18
     bd8:	36 95       	lsr	r19
     bda:	27 95       	ror	r18
     bdc:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     be0:	96 95       	lsr	r25
     be2:	87 95       	ror	r24
     be4:	8e 83       	std	Y+6, r24	; 0x06
     be6:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Medium.Energy    = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration) / 1000; // J
     be8:	8c 81       	ldd	r24, Y+4	; 0x04
     bea:	9d 81       	ldd	r25, Y+5	; 0x05
     bec:	4a 81       	ldd	r20, Y+2	; 0x02
     bee:	5b 81       	ldd	r21, Y+3	; 0x03
     bf0:	48 9f       	mul	r20, r24
     bf2:	90 01       	movw	r18, r0
     bf4:	49 9f       	mul	r20, r25
     bf6:	30 0d       	add	r19, r0
     bf8:	58 9f       	mul	r21, r24
     bfa:	30 0d       	add	r19, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	36 95       	lsr	r19
     c00:	27 95       	ror	r18
     c02:	36 95       	lsr	r19
     c04:	27 95       	ror	r18
     c06:	36 95       	lsr	r19
     c08:	27 95       	ror	r18
     c0a:	a5 ec       	ldi	r26, 0xC5	; 197
     c0c:	b0 e2       	ldi	r27, 0x20	; 32
     c0e:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     c12:	92 95       	swap	r25
     c14:	82 95       	swap	r24
     c16:	8f 70       	andi	r24, 0x0F	; 15
     c18:	89 27       	eor	r24, r25
     c1a:	9f 70       	andi	r25, 0x0F	; 15
     c1c:	89 27       	eor	r24, r25
     c1e:	88 87       	std	Y+8, r24	; 0x08
     c20:	99 87       	std	Y+9, r25	; 0x09
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
     c22:	60 81       	ld	r22, Z
     c24:	71 81       	ldd	r23, Z+1	; 0x01
     c26:	8a e6       	ldi	r24, 0x6A	; 106
     c28:	98 e1       	ldi	r25, 0x18	; 24
     c2a:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
     c2e:	ab 01       	movw	r20, r22
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	66 0f       	add	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	46 0f       	add	r20, r22
     c42:	57 1f       	adc	r21, r23
     c44:	d8 01       	movw	r26, r16
     c46:	50 96       	adiw	r26, 0x10	; 16
     c48:	4d 93       	st	X+, r20
     c4a:	5c 93       	st	X, r21
     c4c:	51 97       	sbiw	r26, 0x11	; 17
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA_Fast.DutyCycle);
     c4e:	02 84       	ldd	r0, Z+10	; 0x0a
     c50:	f3 85       	ldd	r31, Z+11	; 0x0b
     c52:	e0 2d       	mov	r30, r0
     c54:	9a 01       	movw	r18, r20
     c56:	36 95       	lsr	r19
     c58:	27 95       	ror	r18
     c5a:	36 95       	lsr	r19
     c5c:	27 95       	ror	r18
     c5e:	ab e7       	ldi	r26, 0x7B	; 123
     c60:	b4 e1       	ldi	r27, 0x14	; 20
     c62:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     c66:	96 95       	lsr	r25
     c68:	87 95       	ror	r24
     c6a:	8e 9f       	mul	r24, r30
     c6c:	90 01       	movw	r18, r0
     c6e:	8f 9f       	mul	r24, r31
     c70:	30 0d       	add	r19, r0
     c72:	9e 9f       	mul	r25, r30
     c74:	30 0d       	add	r19, r0
     c76:	11 24       	eor	r1, r1
     c78:	42 1b       	sub	r20, r18
     c7a:	53 0b       	sbc	r21, r19
     c7c:	f8 01       	movw	r30, r16
     c7e:	42 8b       	std	Z+18, r20	; 0x12
     c80:	53 8b       	std	Z+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     c82:	47 e0       	ldi	r20, 0x07	; 7
     c84:	63 e0       	ldi	r22, 0x03	; 3
     c86:	86 e3       	ldi	r24, 0x36	; 54
     c88:	91 e2       	ldi	r25, 0x21	; 33
     c8a:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     c8e:	d8 01       	movw	r26, r16
     c90:	50 96       	adiw	r26, 0x10	; 16
     c92:	6d 91       	ld	r22, X+
     c94:	7c 91       	ld	r23, X
     c96:	51 97       	sbiw	r26, 0x11	; 17
     c98:	86 e3       	ldi	r24, 0x36	; 54
     c9a:	91 e2       	ldi	r25, 0x21	; 33
     c9c:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     ca0:	f8 01       	movw	r30, r16
     ca2:	62 89       	ldd	r22, Z+18	; 0x12
     ca4:	73 89       	ldd	r23, Z+19	; 0x13
     ca6:	86 e3       	ldi	r24, 0x36	; 54
     ca8:	91 e2       	ldi	r25, 0x21	; 33
     caa:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     cae:	d8 01       	movw	r26, r16
     cb0:	52 96       	adiw	r26, 0x12	; 18
     cb2:	6d 91       	ld	r22, X+
     cb4:	7c 91       	ld	r23, X
     cb6:	53 97       	sbiw	r26, 0x13	; 19
     cb8:	86 e3       	ldi	r24, 0x36	; 54
     cba:	91 e2       	ldi	r25, 0x21	; 33
     cbc:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	a8 01       	movw	r20, r16
     cc4:	61 ec       	ldi	r22, 0xC1	; 193
     cc6:	74 e0       	ldi	r23, 0x04	; 4
     cc8:	86 e3       	ldi	r24, 0x36	; 54
     cca:	91 e2       	ldi	r25, 0x21	; 33
     ccc:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     cd0:	60 e1       	ldi	r22, 0x10	; 16
     cd2:	86 e3       	ldi	r24, 0x36	; 54
     cd4:	91 e2       	ldi	r25, 0x21	; 33
     cd6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     cda:	60 e2       	ldi	r22, 0x20	; 32
     cdc:	86 e3       	ldi	r24, 0x36	; 54
     cde:	91 e2       	ldi	r25, 0x21	; 33
     ce0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     ce4:	60 e1       	ldi	r22, 0x10	; 16
     ce6:	86 e3       	ldi	r24, 0x36	; 54
     ce8:	91 e2       	ldi	r25, 0x21	; 33
     cea:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     cee:	60 e2       	ldi	r22, 0x20	; 32
     cf0:	86 e3       	ldi	r24, 0x36	; 54
     cf2:	91 e2       	ldi	r25, 0x21	; 33
     cf4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = WorkFast;
     cf8:	f8 01       	movw	r30, r16
     cfa:	15 86       	std	Z+13, r1	; 0x0d
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	9f 90       	pop	r9
     d12:	8f 90       	pop	r8
     d14:	08 95       	ret

00000d16 <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKFAST;
}

// Process GUI
void CLaserControlApp::Run()
{
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	2e 97       	sbiw	r28, 0x0e	; 14
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     d2e:	42 e0       	ldi	r20, 0x02	; 2
     d30:	63 e0       	ldi	r22, 0x03	; 3
     d32:	dc 01       	movw	r26, r24
     d34:	58 96       	adiw	r26, 0x18	; 24
     d36:	8d 91       	ld	r24, X+
     d38:	9c 91       	ld	r25, X
     d3a:	59 97       	sbiw	r26, 0x19	; 25
     d3c:	0e 94 65 24 	call	0x48ca	; 0x48ca <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     d40:	f8 01       	movw	r30, r16
     d42:	80 8d       	ldd	r24, Z+24	; 0x18
     d44:	91 8d       	ldd	r25, Z+25	; 0x19
     d46:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     d4a:	d8 01       	movw	r26, r16
     d4c:	58 96       	adiw	r26, 0x18	; 24
     d4e:	8d 91       	ld	r24, X+
     d50:	9c 91       	ld	r25, X
     d52:	59 97       	sbiw	r26, 0x19	; 25
     d54:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZN9CMBSender18WaitMODBUSListenerEv>
     d58:	bf ef       	ldi	r27, 0xFF	; 255
     d5a:	e1 ee       	ldi	r30, 0xE1	; 225
     d5c:	f4 e0       	ldi	r31, 0x04	; 4
     d5e:	b1 50       	subi	r27, 0x01	; 1
     d60:	e0 40       	sbci	r30, 0x00	; 0
     d62:	f0 40       	sbci	r31, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <_ZN16CLaserControlApp3RunEv+0x48>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <_ZN16CLaserControlApp3RunEv+0x52>
     d68:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     d6a:	d8 01       	movw	r26, r16
     d6c:	1f 96       	adiw	r26, 0x0f	; 15
     d6e:	8c 91       	ld	r24, X
     d70:	1f 97       	sbiw	r26, 0x0f	; 15
     d72:	81 11       	cpse	r24, r1
     d74:	1e c0       	rjmp	.+60     	; 0xdb2 <_ZN16CLaserControlApp3RunEv+0x9c>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     d76:	4c e0       	ldi	r20, 0x0C	; 12
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	58 96       	adiw	r26, 0x18	; 24
     d7e:	8d 91       	ld	r24, X+
     d80:	9c 91       	ld	r25, X
     d82:	59 97       	sbiw	r26, 0x19	; 25
     d84:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     d88:	f8 01       	movw	r30, r16
     d8a:	80 8d       	ldd	r24, Z+24	; 0x18
     d8c:	91 8d       	ldd	r25, Z+25	; 0x19
     d8e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     d92:	d8 01       	movw	r26, r16
     d94:	58 96       	adiw	r26, 0x18	; 24
     d96:	8d 91       	ld	r24, X+
     d98:	9c 91       	ld	r25, X
     d9a:	59 97       	sbiw	r26, 0x19	; 25
     d9c:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZN9CMBSender18WaitMODBUSListenerEv>
     da0:	bf ef       	ldi	r27, 0xFF	; 255
     da2:	e1 ee       	ldi	r30, 0xE1	; 225
     da4:	f4 e0       	ldi	r31, 0x04	; 4
     da6:	b1 50       	subi	r27, 0x01	; 1
     da8:	e0 40       	sbci	r30, 0x00	; 0
     daa:	f0 40       	sbci	r31, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <_ZN16CLaserControlApp3RunEv+0x90>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <_ZN16CLaserControlApp3RunEv+0x9a>
     db0:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     db2:	d8 01       	movw	r26, r16
     db4:	1c 96       	adiw	r26, 0x0c	; 12
     db6:	8c 91       	ld	r24, X
     db8:	86 30       	cpi	r24, 0x06	; 6
     dba:	09 f4       	brne	.+2      	; 0xdbe <_ZN16CLaserControlApp3RunEv+0xa8>
     dbc:	55 c0       	rjmp	.+170    	; 0xe68 <_ZN16CLaserControlApp3RunEv+0x152>
     dbe:	28 f4       	brcc	.+10     	; 0xdca <_ZN16CLaserControlApp3RunEv+0xb4>
     dc0:	88 23       	and	r24, r24
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <_ZN16CLaserControlApp3RunEv+0xc2>
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	09 f1       	breq	.+66     	; 0xe0a <_ZN16CLaserControlApp3RunEv+0xf4>
     dc8:	0e c1       	rjmp	.+540    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
     dca:	87 30       	cpi	r24, 0x07	; 7
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_ZN16CLaserControlApp3RunEv+0xba>
     dce:	6d c0       	rjmp	.+218    	; 0xeaa <_ZN16CLaserControlApp3RunEv+0x194>
     dd0:	88 30       	cpi	r24, 0x08	; 8
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <_ZN16CLaserControlApp3RunEv+0xc0>
     dd4:	b3 c0       	rjmp	.+358    	; 0xf3c <_ZN16CLaserControlApp3RunEv+0x226>
     dd6:	07 c1       	rjmp	.+526    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_WORKFAST);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     de0:	22 e0       	ldi	r18, 0x02	; 2
     de2:	ae 01       	movw	r20, r28
     de4:	4f 5f       	subi	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	f8 01       	movw	r30, r16
     dec:	80 8d       	ldd	r24, Z+24	; 0x18
     dee:	91 8d       	ldd	r25, Z+25	; 0x19
     df0:	0e 94 17 24 	call	0x482e	; 0x482e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     df4:	d8 01       	movw	r26, r16
     df6:	58 96       	adiw	r26, 0x18	; 24
     df8:	8d 91       	ld	r24, X+
     dfa:	9c 91       	ld	r25, X
     dfc:	59 97       	sbiw	r26, 0x19	; 25
     dfe:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKFAST;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	f8 01       	movw	r30, r16
     e06:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     e08:	ee c0       	rjmp	.+476    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
			//state = APP_WORKFAST;
		break;
		case APP_WORKSTARTED:
			//state = APP_WORKFAST;
			
			if (!laserBoard.Footswitch())
     e0a:	85 e4       	ldi	r24, 0x45	; 69
     e0c:	93 e2       	ldi	r25, 0x23	; 35
     e0e:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN11CLaserBoard10FootswitchEv>
     e12:	81 11       	cpse	r24, r1
     e14:	1a c0       	rjmp	.+52     	; 0xe4a <_ZN16CLaserControlApp3RunEv+0x134>
			{
				laserTimer.SetCOMPA(laserTimerDutyCycle);
     e16:	d8 01       	movw	r26, r16
     e18:	52 96       	adiw	r26, 0x12	; 18
     e1a:	6d 91       	ld	r22, X+
     e1c:	7c 91       	ld	r23, X
     e1e:	53 97       	sbiw	r26, 0x13	; 19
     e20:	86 e3       	ldi	r24, 0x36	; 54
     e22:	91 e2       	ldi	r25, 0x21	; 33
     e24:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
     e28:	f8 01       	movw	r30, r16
     e2a:	62 89       	ldd	r22, Z+18	; 0x12
     e2c:	73 89       	ldd	r23, Z+19	; 0x13
     e2e:	86 e3       	ldi	r24, 0x36	; 54
     e30:	91 e2       	ldi	r25, 0x21	; 33
     e32:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN7CTimerF8SetCOMPBEj>
				//laserTimer.SetPeriod(laserTimerPeriod);
				laserTimer.Start(laserTimerPeriod);
     e36:	d8 01       	movw	r26, r16
     e38:	50 96       	adiw	r26, 0x10	; 16
     e3a:	6d 91       	ld	r22, X+
     e3c:	7c 91       	ld	r23, X
     e3e:	51 97       	sbiw	r26, 0x11	; 17
     e40:	86 e3       	ldi	r24, 0x36	; 54
     e42:	91 e2       	ldi	r25, 0x21	; 33
     e44:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN7CTimerF5StartEj>
     e48:	ce c0       	rjmp	.+412    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
			}
			else
			{
				laserTimer.Stop();
     e4a:	86 e3       	ldi	r24, 0x36	; 54
     e4c:	91 e2       	ldi	r25, 0x21	; 33
     e4e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     e52:	60 e1       	ldi	r22, 0x10	; 16
     e54:	86 e3       	ldi	r24, 0x36	; 54
     e56:	91 e2       	ldi	r25, 0x21	; 33
     e58:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     e5c:	60 e2       	ldi	r22, 0x20	; 32
     e5e:	86 e3       	ldi	r24, 0x36	; 54
     e60:	91 e2       	ldi	r25, 0x21	; 33
     e62:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     e66:	bf c0       	rjmp	.+382    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     e68:	85 e4       	ldi	r24, 0x45	; 69
     e6a:	93 e2       	ldi	r25, 0x23	; 35
     e6c:	0e 94 22 03 	call	0x644	; 0x644 <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     e70:	85 e4       	ldi	r24, 0x45	; 69
     e72:	93 e2       	ldi	r25, 0x23	; 35
     e74:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORKSTART);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	9a e0       	ldi	r25, 0x0A	; 10
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     e80:	22 e0       	ldi	r18, 0x02	; 2
     e82:	ae 01       	movw	r20, r28
     e84:	4f 5f       	subi	r20, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	63 e0       	ldi	r22, 0x03	; 3
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 8d       	ldd	r24, Z+24	; 0x18
     e8e:	91 8d       	ldd	r25, Z+25	; 0x19
     e90:	0e 94 17 24 	call	0x482e	; 0x482e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     e94:	d8 01       	movw	r26, r16
     e96:	58 96       	adiw	r26, 0x18	; 24
     e98:	8d 91       	ld	r24, X+
     e9a:	9c 91       	ld	r25, X
     e9c:	59 97       	sbiw	r26, 0x19	; 25
     e9e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTART;
     ea2:	84 e0       	ldi	r24, 0x04	; 4
     ea4:	f8 01       	movw	r30, r16
     ea6:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     ea8:	9e c0       	rjmp	.+316    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
		case APP_WORKOnStart:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     eaa:	d8 01       	movw	r26, r16
     eac:	56 96       	adiw	r26, 0x16	; 22
     eae:	4d 91       	ld	r20, X+
     eb0:	5c 91       	ld	r21, X
     eb2:	57 97       	sbiw	r26, 0x17	; 23
     eb4:	00 24       	eor	r0, r0
     eb6:	56 95       	lsr	r21
     eb8:	47 95       	ror	r20
     eba:	07 94       	ror	r0
     ebc:	56 95       	lsr	r21
     ebe:	47 95       	ror	r20
     ec0:	07 94       	ror	r0
     ec2:	54 2f       	mov	r21, r20
     ec4:	40 2d       	mov	r20, r0
     ec6:	9a 01       	movw	r18, r20
     ec8:	a1 e1       	ldi	r26, 0x11	; 17
     eca:	b4 e0       	ldi	r27, 0x04	; 4
     ecc:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
     ed0:	48 1b       	sub	r20, r24
     ed2:	59 0b       	sbc	r21, r25
     ed4:	56 95       	lsr	r21
     ed6:	47 95       	ror	r20
     ed8:	84 0f       	add	r24, r20
     eda:	95 1f       	adc	r25, r21
     edc:	96 95       	lsr	r25
     ede:	87 95       	ror	r24
     ee0:	92 95       	swap	r25
     ee2:	82 95       	swap	r24
     ee4:	8f 70       	andi	r24, 0x0F	; 15
     ee6:	89 27       	eor	r24, r25
     ee8:	9f 70       	andi	r25, 0x0F	; 15
     eea:	89 27       	eor	r24, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	8d 87       	std	Y+13, r24	; 0x0d
     ef6:	9e 87       	std	Y+14, r25	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     ef8:	42 e0       	ldi	r20, 0x02	; 2
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	be 01       	movw	r22, r28
     efe:	63 5f       	subi	r22, 0xF3	; 243
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	8a e6       	ldi	r24, 0x6A	; 106
     f04:	93 e2       	ldi	r25, 0x23	; 35
     f06:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORKSTARTED);
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	9b e0       	ldi	r25, 0x0B	; 11
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f12:	22 e0       	ldi	r18, 0x02	; 2
     f14:	ae 01       	movw	r20, r28
     f16:	4f 5f       	subi	r20, 0xFF	; 255
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	63 e0       	ldi	r22, 0x03	; 3
     f1c:	f8 01       	movw	r30, r16
     f1e:	80 8d       	ldd	r24, Z+24	; 0x18
     f20:	91 8d       	ldd	r25, Z+25	; 0x19
     f22:	0e 94 17 24 	call	0x482e	; 0x482e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     f26:	d8 01       	movw	r26, r16
     f28:	58 96       	adiw	r26, 0x18	; 24
     f2a:	8d 91       	ld	r24, X+
     f2c:	9c 91       	ld	r25, X
     f2e:	59 97       	sbiw	r26, 0x19	; 25
     f30:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTARTED;
     f34:	85 e0       	ldi	r24, 0x05	; 5
     f36:	f8 01       	movw	r30, r16
     f38:	84 87       	std	Z+12, r24	; 0x0c

				//laserTimer.Start(12500);
			}
		break;
     f3a:	55 c0       	rjmp	.+170    	; 0xfe6 <_ZN16CLaserControlApp3RunEv+0x2d0>
		case APP_WORKOnStop:
			{
				uint16_t data = 0;
     f3c:	1d 86       	std	Y+13, r1	; 0x0d
     f3e:	1e 86       	std	Y+14, r1	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     f40:	42 e0       	ldi	r20, 0x02	; 2
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	be 01       	movw	r22, r28
     f46:	63 5f       	subi	r22, 0xF3	; 243
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8a e6       	ldi	r24, 0x6A	; 106
     f4c:	93 e2       	ldi	r25, 0x23	; 35
     f4e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN4CSPI4SendEPhj>
				
				laserTimer.Stop();
     f52:	86 e3       	ldi	r24, 0x36	; 54
     f54:	91 e2       	ldi	r25, 0x21	; 33
     f56:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     f5a:	60 e1       	ldi	r22, 0x10	; 16
     f5c:	86 e3       	ldi	r24, 0x36	; 54
     f5e:	91 e2       	ldi	r25, 0x21	; 33
     f60:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     f64:	60 e2       	ldi	r22, 0x20	; 32
     f66:	86 e3       	ldi	r24, 0x36	; 54
     f68:	91 e2       	ldi	r25, 0x21	; 33
     f6a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
     f6e:	85 e4       	ldi	r24, 0x45	; 69
     f70:	93 e2       	ldi	r25, 0x23	; 35
     f72:	0e 94 32 03 	call	0x664	; 0x664 <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
     f76:	85 e4       	ldi	r24, 0x45	; 69
     f78:	93 e2       	ldi	r25, 0x23	; 35
     f7a:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t pic_id = 0;
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	1a 82       	std	Y+2, r1	; 0x02
				switch (profile)
     f82:	d8 01       	movw	r26, r16
     f84:	1d 96       	adiw	r26, 0x0d	; 13
     f86:	8c 91       	ld	r24, X
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	a9 f0       	breq	.+42     	; 0xfb6 <_ZN16CLaserControlApp3RunEv+0x2a0>
     f8c:	18 f0       	brcs	.+6      	; 0xf94 <_ZN16CLaserControlApp3RunEv+0x27e>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	49 f0       	breq	.+18     	; 0xfa4 <_ZN16CLaserControlApp3RunEv+0x28e>
     f92:	18 c0       	rjmp	.+48     	; 0xfc4 <_ZN16CLaserControlApp3RunEv+0x2ae>
				{
					case WorkFast: 
						pic_id = swap(PICID_WORKFAST); 
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKFAST;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	f8 01       	movw	r30, r16
     fa0:	84 87       	std	Z+12, r24	; 0x0c
						break;
     fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <_ZN16CLaserControlApp3RunEv+0x2ae>
					case WorkSlow: 
						pic_id = swap(PICID_WORKSLOW); 
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	93 e0       	ldi	r25, 0x03	; 3
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKSLOW;
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	d8 01       	movw	r26, r16
     fb0:	1c 96       	adiw	r26, 0x0c	; 12
     fb2:	8c 93       	st	X, r24
						break;
     fb4:	07 c0       	rjmp	.+14     	; 0xfc4 <_ZN16CLaserControlApp3RunEv+0x2ae>
					case WorkMedium: 
						pic_id = swap(PICID_WORKMEDIUM); 
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKMEDIUM;
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	f8 01       	movw	r30, r16
     fc2:	84 87       	std	Z+12, r24	; 0x0c
						break;
				}
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     fc4:	22 e0       	ldi	r18, 0x02	; 2
     fc6:	ae 01       	movw	r20, r28
     fc8:	4f 5f       	subi	r20, 0xFF	; 255
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	63 e0       	ldi	r22, 0x03	; 3
     fce:	d8 01       	movw	r26, r16
     fd0:	58 96       	adiw	r26, 0x18	; 24
     fd2:	8d 91       	ld	r24, X+
     fd4:	9c 91       	ld	r25, X
     fd6:	59 97       	sbiw	r26, 0x19	; 25
     fd8:	0e 94 17 24 	call	0x482e	; 0x482e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     fdc:	f8 01       	movw	r30, r16
     fde:	80 8d       	ldd	r24, Z+24	; 0x18
     fe0:	91 8d       	ldd	r25, Z+25	; 0x19
     fe2:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
     fe6:	d8 01       	movw	r26, r16
     fe8:	1f 96       	adiw	r26, 0x0f	; 15
     fea:	8c 91       	ld	r24, X
     fec:	1f 97       	sbiw	r26, 0x0f	; 15
     fee:	88 23       	and	r24, r24
     ff0:	b9 f1       	breq	.+110    	; 0x1060 <_ZN16CLaserControlApp3RunEv+0x34a>
	{
		switch (profile)
     ff2:	1d 96       	adiw	r26, 0x0d	; 13
     ff4:	8c 91       	ld	r24, X
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	f1 f0       	breq	.+60     	; 0x1036 <_ZN16CLaserControlApp3RunEv+0x320>
     ffa:	18 f0       	brcs	.+6      	; 0x1002 <_ZN16CLaserControlApp3RunEv+0x2ec>
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	69 f0       	breq	.+26     	; 0x101a <_ZN16CLaserControlApp3RunEv+0x304>
    1000:	25 c0       	rjmp	.+74     	; 0x104c <_ZN16CLaserControlApp3RunEv+0x336>
		{
			case WorkFast:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(DGUS_DATA));
    1002:	2c e0       	ldi	r18, 0x0C	; 12
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a e2       	ldi	r20, 0x2A	; 42
    1008:	51 e2       	ldi	r21, 0x21	; 33
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	f8 01       	movw	r30, r16
    1010:	80 8d       	ldd	r24, Z+24	; 0x18
    1012:	91 8d       	ldd	r25, Z+25	; 0x19
    1014:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1018:	19 c0       	rjmp	.+50     	; 0x104c <_ZN16CLaserControlApp3RunEv+0x336>
			case WorkSlow:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Slow, sizeof(DGUS_DATA));
    101a:	2c e0       	ldi	r18, 0x0C	; 12
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	42 e1       	ldi	r20, 0x12	; 18
    1020:	51 e2       	ldi	r21, 0x21	; 33
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	d8 01       	movw	r26, r16
    1028:	58 96       	adiw	r26, 0x18	; 24
    102a:	8d 91       	ld	r24, X+
    102c:	9c 91       	ld	r25, X
    102e:	59 97       	sbiw	r26, 0x19	; 25
    1030:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1034:	0b c0       	rjmp	.+22     	; 0x104c <_ZN16CLaserControlApp3RunEv+0x336>
			case WorkMedium:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Medium, sizeof(DGUS_DATA));
    1036:	2c e0       	ldi	r18, 0x0C	; 12
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	4e e1       	ldi	r20, 0x1E	; 30
    103c:	51 e2       	ldi	r21, 0x21	; 33
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	f8 01       	movw	r30, r16
    1044:	80 8d       	ldd	r24, Z+24	; 0x18
    1046:	91 8d       	ldd	r25, Z+25	; 0x19
    1048:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    104c:	d8 01       	movw	r26, r16
    104e:	58 96       	adiw	r26, 0x18	; 24
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	59 97       	sbiw	r26, 0x19	; 25
    1056:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
    105a:	f8 01       	movw	r30, r16
    105c:	17 86       	std	Z+15, r1	; 0x0f
    105e:	ce c1       	rjmp	.+924    	; 0x13fc <_ZN16CLaserControlApp3RunEv+0x6e6>
	}
	else
	{
		switch (profile)
    1060:	d8 01       	movw	r26, r16
    1062:	1d 96       	adiw	r26, 0x0d	; 13
    1064:	8c 91       	ld	r24, X
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	09 f4       	brne	.+2      	; 0x106c <_ZN16CLaserControlApp3RunEv+0x356>
    106a:	2f c1       	rjmp	.+606    	; 0x12ca <_ZN16CLaserControlApp3RunEv+0x5b4>
    106c:	20 f0       	brcs	.+8      	; 0x1076 <_ZN16CLaserControlApp3RunEv+0x360>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	09 f4       	brne	.+2      	; 0x1074 <_ZN16CLaserControlApp3RunEv+0x35e>
    1072:	96 c0       	rjmp	.+300    	; 0x11a0 <_ZN16CLaserControlApp3RunEv+0x48a>
    1074:	be c1       	rjmp	.+892    	; 0x13f2 <_ZN16CLaserControlApp3RunEv+0x6dc>
		{
			case WorkFast:
				// Fast profile			
				DGUSDATA.DutyCycle = m_structDGUSDATA_Fast.Duration * m_structDGUSDATA_Fast.Frequency / 10;
    1076:	ea e2       	ldi	r30, 0x2A	; 42
    1078:	f1 e2       	ldi	r31, 0x21	; 33
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	40 81       	ld	r20, Z
    1080:	51 81       	ldd	r21, Z+1	; 0x01
    1082:	48 9f       	mul	r20, r24
    1084:	90 01       	movw	r18, r0
    1086:	49 9f       	mul	r20, r25
    1088:	30 0d       	add	r19, r0
    108a:	58 9f       	mul	r21, r24
    108c:	30 0d       	add	r19, r0
    108e:	11 24       	eor	r1, r1
    1090:	ad ec       	ldi	r26, 0xCD	; 205
    1092:	bc ec       	ldi	r27, 0xCC	; 204
    1094:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    1098:	7c 01       	movw	r14, r24
    109a:	f6 94       	lsr	r15
    109c:	e7 94       	ror	r14
    109e:	f6 94       	lsr	r15
    10a0:	e7 94       	ror	r14
    10a2:	f6 94       	lsr	r15
    10a4:	e7 94       	ror	r14
    10a6:	eb 86       	std	Y+11, r14	; 0x0b
    10a8:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100;
    10aa:	84 81       	ldd	r24, Z+4	; 0x04
    10ac:	95 81       	ldd	r25, Z+5	; 0x05
    10ae:	42 85       	ldd	r20, Z+10	; 0x0a
    10b0:	53 85       	ldd	r21, Z+11	; 0x0b
    10b2:	48 9f       	mul	r20, r24
    10b4:	90 01       	movw	r18, r0
    10b6:	49 9f       	mul	r20, r25
    10b8:	30 0d       	add	r19, r0
    10ba:	58 9f       	mul	r21, r24
    10bc:	30 0d       	add	r19, r0
    10be:	11 24       	eor	r1, r1
    10c0:	36 95       	lsr	r19
    10c2:	27 95       	ror	r18
    10c4:	36 95       	lsr	r19
    10c6:	27 95       	ror	r18
    10c8:	ab e7       	ldi	r26, 0x7B	; 123
    10ca:	b4 e1       	ldi	r27, 0x14	; 20
    10cc:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    10d0:	96 95       	lsr	r25
    10d2:	87 95       	ror	r24
    10d4:	8f 83       	std	Y+7, r24	; 0x07
    10d6:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration / 1000;
    10d8:	84 81       	ldd	r24, Z+4	; 0x04
    10da:	95 81       	ldd	r25, Z+5	; 0x05
    10dc:	42 81       	ldd	r20, Z+2	; 0x02
    10de:	53 81       	ldd	r21, Z+3	; 0x03
    10e0:	48 9f       	mul	r20, r24
    10e2:	90 01       	movw	r18, r0
    10e4:	49 9f       	mul	r20, r25
    10e6:	30 0d       	add	r19, r0
    10e8:	58 9f       	mul	r21, r24
    10ea:	30 0d       	add	r19, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	36 95       	lsr	r19
    10f0:	27 95       	ror	r18
    10f2:	36 95       	lsr	r19
    10f4:	27 95       	ror	r18
    10f6:	36 95       	lsr	r19
    10f8:	27 95       	ror	r18
    10fa:	a5 ec       	ldi	r26, 0xC5	; 197
    10fc:	b0 e2       	ldi	r27, 0x20	; 32
    10fe:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    1102:	92 95       	swap	r25
    1104:	82 95       	swap	r24
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	89 27       	eor	r24, r25
    110a:	9f 70       	andi	r25, 0x0F	; 15
    110c:	89 27       	eor	r24, r25
    110e:	89 87       	std	Y+9, r24	; 0x09
    1110:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	8a e6       	ldi	r24, 0x6A	; 106
    1118:	98 e1       	ldi	r25, 0x18	; 24
    111a:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
    111e:	ab 01       	movw	r20, r22
    1120:	44 0f       	add	r20, r20
    1122:	55 1f       	adc	r21, r21
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	46 0f       	add	r20, r22
    1132:	57 1f       	adc	r21, r23
    1134:	d8 01       	movw	r26, r16
    1136:	50 96       	adiw	r26, 0x10	; 16
    1138:	4d 93       	st	X+, r20
    113a:	5c 93       	st	X, r21
    113c:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    113e:	9a 01       	movw	r18, r20
    1140:	36 95       	lsr	r19
    1142:	27 95       	ror	r18
    1144:	36 95       	lsr	r19
    1146:	27 95       	ror	r18
    1148:	ab e7       	ldi	r26, 0x7B	; 123
    114a:	b4 e1       	ldi	r27, 0x14	; 20
    114c:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	8e 9d       	mul	r24, r14
    1156:	90 01       	movw	r18, r0
    1158:	8f 9d       	mul	r24, r15
    115a:	30 0d       	add	r19, r0
    115c:	9e 9d       	mul	r25, r14
    115e:	30 0d       	add	r19, r0
    1160:	11 24       	eor	r1, r1
    1162:	42 1b       	sub	r20, r18
    1164:	53 0b       	sbc	r21, r19
    1166:	d8 01       	movw	r26, r16
    1168:	52 96       	adiw	r26, 0x12	; 18
    116a:	4d 93       	st	X+, r20
    116c:	5c 93       	st	X, r21
    116e:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    1170:	54 96       	adiw	r26, 0x14	; 20
    1172:	ed 92       	st	X+, r14
    1174:	fc 92       	st	X, r15
    1176:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Fast.Intensity;
    1178:	84 81       	ldd	r24, Z+4	; 0x04
    117a:	95 81       	ldd	r25, Z+5	; 0x05
    117c:	56 96       	adiw	r26, 0x16	; 22
    117e:	8d 93       	st	X+, r24
    1180:	9c 93       	st	X, r25
    1182:	57 97       	sbiw	r26, 0x17	; 23
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    1184:	26 e0       	ldi	r18, 0x06	; 6
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	ae 01       	movw	r20, r28
    118a:	49 5f       	subi	r20, 0xF9	; 249
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	64 e0       	ldi	r22, 0x04	; 4
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	58 96       	adiw	r26, 0x18	; 24
    1194:	8d 91       	ld	r24, X+
    1196:	9c 91       	ld	r25, X
    1198:	59 97       	sbiw	r26, 0x19	; 25
    119a:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    119e:	29 c1       	rjmp	.+594    	; 0x13f2 <_ZN16CLaserControlApp3RunEv+0x6dc>
			case WorkSlow:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Slow.Duration * m_structDGUSDATA_Slow.Frequency / 10;
    11a0:	e2 e1       	ldi	r30, 0x12	; 18
    11a2:	f1 e2       	ldi	r31, 0x21	; 33
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	40 81       	ld	r20, Z
    11aa:	51 81       	ldd	r21, Z+1	; 0x01
    11ac:	48 9f       	mul	r20, r24
    11ae:	90 01       	movw	r18, r0
    11b0:	49 9f       	mul	r20, r25
    11b2:	30 0d       	add	r19, r0
    11b4:	58 9f       	mul	r21, r24
    11b6:	30 0d       	add	r19, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	ad ec       	ldi	r26, 0xCD	; 205
    11bc:	bc ec       	ldi	r27, 0xCC	; 204
    11be:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    11c2:	7c 01       	movw	r14, r24
    11c4:	f6 94       	lsr	r15
    11c6:	e7 94       	ror	r14
    11c8:	f6 94       	lsr	r15
    11ca:	e7 94       	ror	r14
    11cc:	f6 94       	lsr	r15
    11ce:	e7 94       	ror	r14
    11d0:	eb 86       	std	Y+11, r14	; 0x0b
    11d2:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100;
    11d4:	84 81       	ldd	r24, Z+4	; 0x04
    11d6:	95 81       	ldd	r25, Z+5	; 0x05
    11d8:	42 85       	ldd	r20, Z+10	; 0x0a
    11da:	53 85       	ldd	r21, Z+11	; 0x0b
    11dc:	48 9f       	mul	r20, r24
    11de:	90 01       	movw	r18, r0
    11e0:	49 9f       	mul	r20, r25
    11e2:	30 0d       	add	r19, r0
    11e4:	58 9f       	mul	r21, r24
    11e6:	30 0d       	add	r19, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	36 95       	lsr	r19
    11ec:	27 95       	ror	r18
    11ee:	36 95       	lsr	r19
    11f0:	27 95       	ror	r18
    11f2:	ab e7       	ldi	r26, 0x7B	; 123
    11f4:	b4 e1       	ldi	r27, 0x14	; 20
    11f6:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	8f 83       	std	Y+7, r24	; 0x07
    1200:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration / 1000;
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	42 81       	ldd	r20, Z+2	; 0x02
    1208:	53 81       	ldd	r21, Z+3	; 0x03
    120a:	48 9f       	mul	r20, r24
    120c:	90 01       	movw	r18, r0
    120e:	49 9f       	mul	r20, r25
    1210:	30 0d       	add	r19, r0
    1212:	58 9f       	mul	r21, r24
    1214:	30 0d       	add	r19, r0
    1216:	11 24       	eor	r1, r1
    1218:	36 95       	lsr	r19
    121a:	27 95       	ror	r18
    121c:	36 95       	lsr	r19
    121e:	27 95       	ror	r18
    1220:	36 95       	lsr	r19
    1222:	27 95       	ror	r18
    1224:	a5 ec       	ldi	r26, 0xC5	; 197
    1226:	b0 e2       	ldi	r27, 0x20	; 32
    1228:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    122c:	92 95       	swap	r25
    122e:	82 95       	swap	r24
    1230:	8f 70       	andi	r24, 0x0F	; 15
    1232:	89 27       	eor	r24, r25
    1234:	9f 70       	andi	r25, 0x0F	; 15
    1236:	89 27       	eor	r24, r25
    1238:	89 87       	std	Y+9, r24	; 0x09
    123a:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Slow.Frequency) * 10;
    123c:	60 81       	ld	r22, Z
    123e:	71 81       	ldd	r23, Z+1	; 0x01
    1240:	8a e6       	ldi	r24, 0x6A	; 106
    1242:	98 e1       	ldi	r25, 0x18	; 24
    1244:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
    1248:	ab 01       	movw	r20, r22
    124a:	44 0f       	add	r20, r20
    124c:	55 1f       	adc	r21, r21
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	46 0f       	add	r20, r22
    125c:	57 1f       	adc	r21, r23
    125e:	d8 01       	movw	r26, r16
    1260:	50 96       	adiw	r26, 0x10	; 16
    1262:	4d 93       	st	X+, r20
    1264:	5c 93       	st	X, r21
    1266:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1268:	9a 01       	movw	r18, r20
    126a:	36 95       	lsr	r19
    126c:	27 95       	ror	r18
    126e:	36 95       	lsr	r19
    1270:	27 95       	ror	r18
    1272:	ab e7       	ldi	r26, 0x7B	; 123
    1274:	b4 e1       	ldi	r27, 0x14	; 20
    1276:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	8e 9d       	mul	r24, r14
    1280:	90 01       	movw	r18, r0
    1282:	8f 9d       	mul	r24, r15
    1284:	30 0d       	add	r19, r0
    1286:	9e 9d       	mul	r25, r14
    1288:	30 0d       	add	r19, r0
    128a:	11 24       	eor	r1, r1
    128c:	42 1b       	sub	r20, r18
    128e:	53 0b       	sbc	r21, r19
    1290:	d8 01       	movw	r26, r16
    1292:	52 96       	adiw	r26, 0x12	; 18
    1294:	4d 93       	st	X+, r20
    1296:	5c 93       	st	X, r21
    1298:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    129a:	54 96       	adiw	r26, 0x14	; 20
    129c:	ed 92       	st	X+, r14
    129e:	fc 92       	st	X, r15
    12a0:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Slow.Intensity;
    12a2:	84 81       	ldd	r24, Z+4	; 0x04
    12a4:	95 81       	ldd	r25, Z+5	; 0x05
    12a6:	56 96       	adiw	r26, 0x16	; 22
    12a8:	8d 93       	st	X+, r24
    12aa:	9c 93       	st	X, r25
    12ac:	57 97       	sbiw	r26, 0x17	; 23
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    12ae:	26 e0       	ldi	r18, 0x06	; 6
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	ae 01       	movw	r20, r28
    12b4:	49 5f       	subi	r20, 0xF9	; 249
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	64 e0       	ldi	r22, 0x04	; 4
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	58 96       	adiw	r26, 0x18	; 24
    12be:	8d 91       	ld	r24, X+
    12c0:	9c 91       	ld	r25, X
    12c2:	59 97       	sbiw	r26, 0x19	; 25
    12c4:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    12c8:	94 c0       	rjmp	.+296    	; 0x13f2 <_ZN16CLaserControlApp3RunEv+0x6dc>
			case WorkMedium:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Medium.Duration * m_structDGUSDATA_Medium.Frequency / 10;
    12ca:	ee e1       	ldi	r30, 0x1E	; 30
    12cc:	f1 e2       	ldi	r31, 0x21	; 33
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	40 81       	ld	r20, Z
    12d4:	51 81       	ldd	r21, Z+1	; 0x01
    12d6:	48 9f       	mul	r20, r24
    12d8:	90 01       	movw	r18, r0
    12da:	49 9f       	mul	r20, r25
    12dc:	30 0d       	add	r19, r0
    12de:	58 9f       	mul	r21, r24
    12e0:	30 0d       	add	r19, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	ad ec       	ldi	r26, 0xCD	; 205
    12e6:	bc ec       	ldi	r27, 0xCC	; 204
    12e8:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    12ec:	7c 01       	movw	r14, r24
    12ee:	f6 94       	lsr	r15
    12f0:	e7 94       	ror	r14
    12f2:	f6 94       	lsr	r15
    12f4:	e7 94       	ror	r14
    12f6:	f6 94       	lsr	r15
    12f8:	e7 94       	ror	r14
    12fa:	eb 86       	std	Y+11, r14	; 0x0b
    12fc:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100;
    12fe:	84 81       	ldd	r24, Z+4	; 0x04
    1300:	95 81       	ldd	r25, Z+5	; 0x05
    1302:	42 85       	ldd	r20, Z+10	; 0x0a
    1304:	53 85       	ldd	r21, Z+11	; 0x0b
    1306:	48 9f       	mul	r20, r24
    1308:	90 01       	movw	r18, r0
    130a:	49 9f       	mul	r20, r25
    130c:	30 0d       	add	r19, r0
    130e:	58 9f       	mul	r21, r24
    1310:	30 0d       	add	r19, r0
    1312:	11 24       	eor	r1, r1
    1314:	36 95       	lsr	r19
    1316:	27 95       	ror	r18
    1318:	36 95       	lsr	r19
    131a:	27 95       	ror	r18
    131c:	ab e7       	ldi	r26, 0x7B	; 123
    131e:	b4 e1       	ldi	r27, 0x14	; 20
    1320:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    1324:	96 95       	lsr	r25
    1326:	87 95       	ror	r24
    1328:	8f 83       	std	Y+7, r24	; 0x07
    132a:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration / 1000;
    132c:	84 81       	ldd	r24, Z+4	; 0x04
    132e:	95 81       	ldd	r25, Z+5	; 0x05
    1330:	42 81       	ldd	r20, Z+2	; 0x02
    1332:	53 81       	ldd	r21, Z+3	; 0x03
    1334:	48 9f       	mul	r20, r24
    1336:	90 01       	movw	r18, r0
    1338:	49 9f       	mul	r20, r25
    133a:	30 0d       	add	r19, r0
    133c:	58 9f       	mul	r21, r24
    133e:	30 0d       	add	r19, r0
    1340:	11 24       	eor	r1, r1
    1342:	36 95       	lsr	r19
    1344:	27 95       	ror	r18
    1346:	36 95       	lsr	r19
    1348:	27 95       	ror	r18
    134a:	36 95       	lsr	r19
    134c:	27 95       	ror	r18
    134e:	a5 ec       	ldi	r26, 0xC5	; 197
    1350:	b0 e2       	ldi	r27, 0x20	; 32
    1352:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    1356:	92 95       	swap	r25
    1358:	82 95       	swap	r24
    135a:	8f 70       	andi	r24, 0x0F	; 15
    135c:	89 27       	eor	r24, r25
    135e:	9f 70       	andi	r25, 0x0F	; 15
    1360:	89 27       	eor	r24, r25
    1362:	89 87       	std	Y+9, r24	; 0x09
    1364:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Medium.Frequency) * 10;
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	8a e6       	ldi	r24, 0x6A	; 106
    136c:	98 e1       	ldi	r25, 0x18	; 24
    136e:	0e 94 a5 24 	call	0x494a	; 0x494a <__udivmodhi4>
    1372:	ab 01       	movw	r20, r22
    1374:	44 0f       	add	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	46 0f       	add	r20, r22
    1386:	57 1f       	adc	r21, r23
    1388:	d8 01       	movw	r26, r16
    138a:	50 96       	adiw	r26, 0x10	; 16
    138c:	4d 93       	st	X+, r20
    138e:	5c 93       	st	X, r21
    1390:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1392:	9a 01       	movw	r18, r20
    1394:	36 95       	lsr	r19
    1396:	27 95       	ror	r18
    1398:	36 95       	lsr	r19
    139a:	27 95       	ror	r18
    139c:	ab e7       	ldi	r26, 0x7B	; 123
    139e:	b4 e1       	ldi	r27, 0x14	; 20
    13a0:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	8e 9d       	mul	r24, r14
    13aa:	90 01       	movw	r18, r0
    13ac:	8f 9d       	mul	r24, r15
    13ae:	30 0d       	add	r19, r0
    13b0:	9e 9d       	mul	r25, r14
    13b2:	30 0d       	add	r19, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	42 1b       	sub	r20, r18
    13b8:	53 0b       	sbc	r21, r19
    13ba:	d8 01       	movw	r26, r16
    13bc:	52 96       	adiw	r26, 0x12	; 18
    13be:	4d 93       	st	X+, r20
    13c0:	5c 93       	st	X, r21
    13c2:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    13c4:	54 96       	adiw	r26, 0x14	; 20
    13c6:	ed 92       	st	X+, r14
    13c8:	fc 92       	st	X, r15
    13ca:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Medium.Intensity;
    13cc:	84 81       	ldd	r24, Z+4	; 0x04
    13ce:	95 81       	ldd	r25, Z+5	; 0x05
    13d0:	56 96       	adiw	r26, 0x16	; 22
    13d2:	8d 93       	st	X+, r24
    13d4:	9c 93       	st	X, r25
    13d6:	57 97       	sbiw	r26, 0x17	; 23
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    13d8:	26 e0       	ldi	r18, 0x06	; 6
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	ae 01       	movw	r20, r28
    13de:	49 5f       	subi	r20, 0xF9	; 249
    13e0:	5f 4f       	sbci	r21, 0xFF	; 255
    13e2:	64 e0       	ldi	r22, 0x04	; 4
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	58 96       	adiw	r26, 0x18	; 24
    13e8:	8d 91       	ld	r24, X+
    13ea:	9c 91       	ld	r25, X
    13ec:	59 97       	sbiw	r26, 0x19	; 25
    13ee:	0e 94 26 24 	call	0x484c	; 0x484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    13f2:	f8 01       	movw	r30, r16
    13f4:	80 8d       	ldd	r24, Z+24	; 0x18
    13f6:	91 8d       	ldd	r25, Z+25	; 0x19
    13f8:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
    13fc:	2e 96       	adiw	r28, 0x0e	; 14
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	08 95       	ret

00001410 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    1410:	08 95       	ret

00001412 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    1412:	08 95       	ret

00001414 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    1414:	e0 e0       	ldi	r30, 0x00	; 0
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    141a:	87 e8       	ldi	r24, 0x87	; 135
    141c:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    141e:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    1420:	84 e2       	ldi	r24, 0x24	; 36
    1422:	94 ef       	ldi	r25, 0xF4	; 244
    1424:	86 a3       	std	Z+38, r24	; 0x26
    1426:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    1428:	82 e1       	ldi	r24, 0x12	; 18
    142a:	9a e7       	ldi	r25, 0x7A	; 122
    142c:	86 a7       	std	Z+46, r24	; 0x2e
    142e:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1430:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1432:	17 82       	std	Z+7, r1	; 0x07
    1434:	08 95       	ret

00001436 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    1436:	e0 e4       	ldi	r30, 0x40	; 64
    1438:	fa e0       	ldi	r31, 0x0A	; 10
    143a:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    143c:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    143e:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    1440:	84 e2       	ldi	r24, 0x24	; 36
    1442:	94 ef       	ldi	r25, 0xF4	; 244
    1444:	86 a3       	std	Z+38, r24	; 0x26
    1446:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1448:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    144a:	17 82       	std	Z+7, r1	; 0x07
    144c:	08 95       	ret

0000144e <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	8a 01       	movw	r16, r20
    1456:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    1458:	9b 01       	movw	r18, r22
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	64 e2       	ldi	r22, 0x24	; 36
    1460:	74 ef       	ldi	r23, 0xF4	; 244
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 b9 24 	call	0x4972	; 0x4972 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    146a:	b8 01       	movw	r22, r16
    146c:	76 95       	lsr	r23
    146e:	67 95       	ror	r22
    1470:	ee e3       	ldi	r30, 0x3E	; 62
    1472:	e0 9f       	mul	r30, r16
    1474:	c0 01       	movw	r24, r0
    1476:	e1 9f       	mul	r30, r17
    1478:	90 0d       	add	r25, r0
    147a:	11 24       	eor	r1, r1
    147c:	86 0f       	add	r24, r22
    147e:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1480:	cf 5f       	subi	r28, 0xFF	; 255
    1482:	b9 01       	movw	r22, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    1486:	76 95       	lsr	r23
    1488:	67 95       	ror	r22
    148a:	ca 95       	dec	r28
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    148e:	e0 e0       	ldi	r30, 0x00	; 0
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	66 a7       	std	Z+46, r22	; 0x2e
    1494:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    1496:	26 a3       	std	Z+38, r18	; 0x26
    1498:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    149a:	a0 e4       	ldi	r26, 0x40	; 64
    149c:	ba e0       	ldi	r27, 0x0A	; 10
    149e:	96 96       	adiw	r26, 0x26	; 38
    14a0:	8d 93       	st	X+, r24
    14a2:	9c 93       	st	X, r25
    14a4:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    14a6:	86 e0       	ldi	r24, 0x06	; 6
    14a8:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    14aa:	87 e0       	ldi	r24, 0x07	; 7
    14ac:	8c 93       	st	X, r24
}
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    14b6:	e0 e4       	ldi	r30, 0x40	; 64
    14b8:	fa e0       	ldi	r31, 0x0A	; 10
    14ba:	84 85       	ldd	r24, Z+12	; 0x0c
    14bc:	80 ff       	sbrs	r24, 0
    14be:	fd cf       	rjmp	.-6      	; 0x14ba <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    14c0:	e0 e4       	ldi	r30, 0x40	; 64
    14c2:	fa e0       	ldi	r31, 0x0A	; 10
    14c4:	84 85       	ldd	r24, Z+12	; 0x0c
    14c6:	81 70       	andi	r24, 0x01	; 1
    14c8:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	ba e0       	ldi	r27, 0x0A	; 10
    14ce:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    14d0:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    14d2:	10 a2       	std	Z+32, r1	; 0x20
    14d4:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    14d6:	90 96       	adiw	r26, 0x20	; 32
    14d8:	1d 92       	st	X+, r1
    14da:	1c 92       	st	X, r1
    14dc:	91 97       	sbiw	r26, 0x21	; 33
    14de:	2f ef       	ldi	r18, 0xFF	; 255
    14e0:	83 ef       	ldi	r24, 0xF3	; 243
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	21 50       	subi	r18, 0x01	; 1
    14e6:	80 40       	sbci	r24, 0x00	; 0
    14e8:	90 40       	sbci	r25, 0x00	; 0
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    14ec:	00 c0       	rjmp	.+0      	; 0x14ee <_ZN12CSoundPlayer9SoundStopEv+0x38>
    14ee:	00 00       	nop
    14f0:	08 95       	ret

000014f2 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    14f8:	23 e0       	ldi	r18, 0x03	; 3
    14fa:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    14fe:	ce 01       	movw	r24, r28
    1500:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_ZN12CSoundPlayer9SoundStopEv>
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    1510:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	ec 01       	movw	r28, r24
	cli();
    1526:	f8 94       	cli

	beep(a, 500);
    1528:	44 ef       	ldi	r20, 0xF4	; 244
    152a:	51 e0       	ldi	r21, 0x01	; 1
    152c:	68 eb       	ldi	r22, 0xB8	; 184
    152e:	71 e0       	ldi	r23, 0x01	; 1
    1530:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1534:	44 ef       	ldi	r20, 0xF4	; 244
    1536:	51 e0       	ldi	r21, 0x01	; 1
    1538:	68 eb       	ldi	r22, 0xB8	; 184
    153a:	71 e0       	ldi	r23, 0x01	; 1
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1542:	44 ef       	ldi	r20, 0xF4	; 244
    1544:	51 e0       	ldi	r21, 0x01	; 1
    1546:	68 eb       	ldi	r22, 0xB8	; 184
    1548:	71 e0       	ldi	r23, 0x01	; 1
    154a:	ce 01       	movw	r24, r28
    154c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    1550:	4e e5       	ldi	r20, 0x5E	; 94
    1552:	51 e0       	ldi	r21, 0x01	; 1
    1554:	6d e5       	ldi	r22, 0x5D	; 93
    1556:	71 e0       	ldi	r23, 0x01	; 1
    1558:	ce 01       	movw	r24, r28
    155a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    155e:	46 e9       	ldi	r20, 0x96	; 150
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	6b e0       	ldi	r22, 0x0B	; 11
    1564:	72 e0       	ldi	r23, 0x02	; 2
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    156c:	44 ef       	ldi	r20, 0xF4	; 244
    156e:	51 e0       	ldi	r21, 0x01	; 1
    1570:	68 eb       	ldi	r22, 0xB8	; 184
    1572:	71 e0       	ldi	r23, 0x01	; 1
    1574:	ce 01       	movw	r24, r28
    1576:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    157a:	4e e5       	ldi	r20, 0x5E	; 94
    157c:	51 e0       	ldi	r21, 0x01	; 1
    157e:	6d e5       	ldi	r22, 0x5D	; 93
    1580:	71 e0       	ldi	r23, 0x01	; 1
    1582:	ce 01       	movw	r24, r28
    1584:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1588:	46 e9       	ldi	r20, 0x96	; 150
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	6b e0       	ldi	r22, 0x0B	; 11
    158e:	72 e0       	ldi	r23, 0x02	; 2
    1590:	ce 01       	movw	r24, r28
    1592:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    1596:	4a e8       	ldi	r20, 0x8A	; 138
    1598:	52 e0       	ldi	r21, 0x02	; 2
    159a:	68 eb       	ldi	r22, 0xB8	; 184
    159c:	71 e0       	ldi	r23, 0x01	; 1
    159e:	ce 01       	movw	r24, r28
    15a0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12CSoundPlayer4beepEjj>
    15a4:	2f ef       	ldi	r18, 0xFF	; 255
    15a6:	85 ea       	ldi	r24, 0xA5	; 165
    15a8:	9e e0       	ldi	r25, 0x0E	; 14
    15aa:	21 50       	subi	r18, 0x01	; 1
    15ac:	80 40       	sbci	r24, 0x00	; 0
    15ae:	90 40       	sbci	r25, 0x00	; 0
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <_ZN12CSoundPlayer4PlayEv+0x8a>
    15b2:	00 c0       	rjmp	.+0      	; 0x15b4 <_ZN12CSoundPlayer4PlayEv+0x94>
    15b4:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    15b6:	78 94       	sei
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    15be:	fc 01       	movw	r30, r24
    15c0:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    15c2:	e0 e0       	ldi	r30, 0x00	; 0
    15c4:	f8 e0       	ldi	r31, 0x08	; 8
    15c6:	80 81       	ld	r24, Z
    15c8:	80 7f       	andi	r24, 0xF0	; 240
    15ca:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    15cc:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    15ce:	10 a2       	std	Z+32, r1	; 0x20
    15d0:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    15d2:	10 a6       	std	Z+40, r1	; 0x28
    15d4:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    15d6:	12 a6       	std	Z+42, r1	; 0x2a
    15d8:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    15da:	14 a6       	std	Z+44, r1	; 0x2c
    15dc:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    15de:	16 a6       	std	Z+46, r1	; 0x2e
    15e0:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    15e2:	16 a2       	std	Z+38, r1	; 0x26
    15e4:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
    15e8:	88 7f       	andi	r24, 0xF8	; 248
    15ea:	68 2b       	or	r22, r24
    15ec:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    15ee:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    15f0:	17 82       	std	Z+7, r1	; 0x07
    15f2:	08 95       	ret

000015f4 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    15f4:	e0 e0       	ldi	r30, 0x00	; 0
    15f6:	f8 e0       	ldi	r31, 0x08	; 8
    15f8:	66 a3       	std	Z+38, r22	; 0x26
    15fa:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    15fc:	20 81       	ld	r18, Z
    15fe:	20 7f       	andi	r18, 0xF0	; 240
    1600:	dc 01       	movw	r26, r24
    1602:	12 96       	adiw	r26, 0x02	; 2
    1604:	9c 91       	ld	r25, X
    1606:	82 2f       	mov	r24, r18
    1608:	89 2b       	or	r24, r25
    160a:	80 83       	st	Z, r24
    160c:	08 95       	ret

0000160e <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    160e:	e0 e0       	ldi	r30, 0x00	; 0
    1610:	f8 e0       	ldi	r31, 0x08	; 8
    1612:	80 81       	ld	r24, Z
    1614:	80 7f       	andi	r24, 0xF0	; 240
    1616:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1618:	10 a2       	std	Z+32, r1	; 0x20
    161a:	11 a2       	std	Z+33, r1	; 0x21
    161c:	08 95       	ret

0000161e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    161e:	e0 e0       	ldi	r30, 0x00	; 0
    1620:	f8 e0       	ldi	r31, 0x08	; 8
    1622:	81 81       	ldd	r24, Z+1	; 0x01
    1624:	8f 70       	andi	r24, 0x0F	; 15
    1626:	68 2b       	or	r22, r24
    1628:	61 83       	std	Z+1, r22	; 0x01
    162a:	08 95       	ret

0000162c <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f8 e0       	ldi	r31, 0x08	; 8
    1630:	81 81       	ldd	r24, Z+1	; 0x01
    1632:	60 95       	com	r22
    1634:	68 23       	and	r22, r24
    1636:	61 83       	std	Z+1, r22	; 0x01
    1638:	08 95       	ret

0000163a <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    163a:	60 93 26 08 	sts	0x0826, r22
    163e:	70 93 27 08 	sts	0x0827, r23
    1642:	08 95       	ret

00001644 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    1644:	60 93 28 08 	sts	0x0828, r22
    1648:	70 93 29 08 	sts	0x0829, r23
    164c:	08 95       	ret

0000164e <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    164e:	60 93 2a 08 	sts	0x082A, r22
    1652:	70 93 2b 08 	sts	0x082B, r23
    1656:	08 95       	ret

00001658 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1658:	60 93 2c 08 	sts	0x082C, r22
    165c:	70 93 2d 08 	sts	0x082D, r23
    1660:	08 95       	ret

00001662 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1662:	60 93 2e 08 	sts	0x082E, r22
    1666:	70 93 2f 08 	sts	0x082F, r23
    166a:	08 95       	ret

0000166c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    166c:	61 15       	cp	r22, r1
    166e:	71 05       	cpc	r23, r1
    1670:	31 f0       	breq	.+12     	; 0x167e <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1672:	e0 e0       	ldi	r30, 0x00	; 0
    1674:	f8 e0       	ldi	r31, 0x08	; 8
    1676:	86 81       	ldd	r24, Z+6	; 0x06
    1678:	83 70       	andi	r24, 0x03	; 3
    167a:	28 2b       	or	r18, r24
    167c:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    167e:	60 93 58 21 	sts	0x2158, r22
    1682:	70 93 59 21 	sts	0x2159, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    1686:	40 93 4e 22 	sts	0x224E, r20
    168a:	50 93 4f 22 	sts	0x224F, r21
    168e:	08 95       	ret

00001690 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1690:	61 15       	cp	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	31 f0       	breq	.+12     	; 0x16a2 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1696:	e0 e0       	ldi	r30, 0x00	; 0
    1698:	f8 e0       	ldi	r31, 0x08	; 8
    169a:	86 81       	ldd	r24, Z+6	; 0x06
    169c:	8c 70       	andi	r24, 0x0C	; 12
    169e:	28 2b       	or	r18, r24
    16a0:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    16a2:	60 93 5a 21 	sts	0x215A, r22
    16a6:	70 93 5b 21 	sts	0x215B, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    16aa:	40 93 50 22 	sts	0x2250, r20
    16ae:	50 93 51 22 	sts	0x2251, r21
    16b2:	08 95       	ret

000016b4 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    16b4:	61 15       	cp	r22, r1
    16b6:	71 05       	cpc	r23, r1
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    16ba:	e0 e0       	ldi	r30, 0x00	; 0
    16bc:	f8 e0       	ldi	r31, 0x08	; 8
    16be:	87 81       	ldd	r24, Z+7	; 0x07
    16c0:	83 70       	andi	r24, 0x03	; 3
    16c2:	28 2b       	or	r18, r24
    16c4:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    16c6:	60 93 5c 21 	sts	0x215C, r22
    16ca:	70 93 5d 21 	sts	0x215D, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    16ce:	40 93 52 22 	sts	0x2252, r20
    16d2:	50 93 53 22 	sts	0x2253, r21
    16d6:	08 95       	ret

000016d8 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    16d8:	61 15       	cp	r22, r1
    16da:	71 05       	cpc	r23, r1
    16dc:	31 f0       	breq	.+12     	; 0x16ea <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    16de:	e0 e0       	ldi	r30, 0x00	; 0
    16e0:	f8 e0       	ldi	r31, 0x08	; 8
    16e2:	87 81       	ldd	r24, Z+7	; 0x07
    16e4:	8c 70       	andi	r24, 0x0C	; 12
    16e6:	28 2b       	or	r18, r24
    16e8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    16ea:	60 93 5e 21 	sts	0x215E, r22
    16ee:	70 93 5f 21 	sts	0x215F, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    16f2:	40 93 54 22 	sts	0x2254, r20
    16f6:	50 93 55 22 	sts	0x2255, r21
    16fa:	08 95       	ret

000016fc <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    16fc:	61 15       	cp	r22, r1
    16fe:	71 05       	cpc	r23, r1
    1700:	31 f0       	breq	.+12     	; 0x170e <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    1702:	e0 e0       	ldi	r30, 0x00	; 0
    1704:	f8 e0       	ldi	r31, 0x08	; 8
    1706:	87 81       	ldd	r24, Z+7	; 0x07
    1708:	80 73       	andi	r24, 0x30	; 48
    170a:	28 2b       	or	r18, r24
    170c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    170e:	60 93 60 21 	sts	0x2160, r22
    1712:	70 93 61 21 	sts	0x2161, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    1716:	40 93 56 22 	sts	0x2256, r20
    171a:	50 93 57 22 	sts	0x2257, r21
    171e:	08 95       	ret

00001720 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    1720:	61 15       	cp	r22, r1
    1722:	71 05       	cpc	r23, r1
    1724:	31 f0       	breq	.+12     	; 0x1732 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1726:	e0 e0       	ldi	r30, 0x00	; 0
    1728:	f8 e0       	ldi	r31, 0x08	; 8
    172a:	87 81       	ldd	r24, Z+7	; 0x07
    172c:	80 7c       	andi	r24, 0xC0	; 192
    172e:	28 2b       	or	r18, r24
    1730:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    1732:	60 93 62 21 	sts	0x2162, r22
    1736:	70 93 63 21 	sts	0x2163, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    173a:	40 93 58 22 	sts	0x2258, r20
    173e:	50 93 59 22 	sts	0x2259, r21
    1742:	08 95       	ret

00001744 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
    174a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN6CTimerC1Ev>
    174e:	88 e7       	ldi	r24, 0x78	; 120
    1750:	90 e2       	ldi	r25, 0x20	; 32
    1752:	88 83       	st	Y, r24
    1754:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    175c:	28 e7       	ldi	r18, 0x78	; 120
    175e:	30 e2       	ldi	r19, 0x20	; 32
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN6CTimerD1Ev>
    176a:	08 95       	ret

0000176c <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    176c:	fc 01       	movw	r30, r24
    176e:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1770:	e0 e0       	ldi	r30, 0x00	; 0
    1772:	fb e0       	ldi	r31, 0x0B	; 11
    1774:	80 81       	ld	r24, Z
    1776:	80 7f       	andi	r24, 0xF0	; 240
    1778:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    177a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    177c:	10 a2       	std	Z+32, r1	; 0x20
    177e:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    1780:	10 a6       	std	Z+40, r1	; 0x28
    1782:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    1784:	12 a6       	std	Z+42, r1	; 0x2a
    1786:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    1788:	14 a6       	std	Z+44, r1	; 0x2c
    178a:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    178c:	16 a6       	std	Z+46, r1	; 0x2e
    178e:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    1790:	16 a2       	std	Z+38, r1	; 0x26
    1792:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1794:	81 81       	ldd	r24, Z+1	; 0x01
    1796:	88 7f       	andi	r24, 0xF8	; 248
    1798:	68 2b       	or	r22, r24
    179a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    179c:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    179e:	17 82       	std	Z+7, r1	; 0x07
    17a0:	08 95       	ret

000017a2 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    17a2:	e0 e0       	ldi	r30, 0x00	; 0
    17a4:	fb e0       	ldi	r31, 0x0B	; 11
    17a6:	66 a3       	std	Z+38, r22	; 0x26
    17a8:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    17aa:	20 81       	ld	r18, Z
    17ac:	20 7f       	andi	r18, 0xF0	; 240
    17ae:	dc 01       	movw	r26, r24
    17b0:	12 96       	adiw	r26, 0x02	; 2
    17b2:	9c 91       	ld	r25, X
    17b4:	82 2f       	mov	r24, r18
    17b6:	89 2b       	or	r24, r25
    17b8:	80 83       	st	Z, r24
    17ba:	08 95       	ret

000017bc <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    17bc:	e0 e0       	ldi	r30, 0x00	; 0
    17be:	fb e0       	ldi	r31, 0x0B	; 11
    17c0:	80 81       	ld	r24, Z
    17c2:	80 7f       	andi	r24, 0xF0	; 240
    17c4:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    17c6:	10 a2       	std	Z+32, r1	; 0x20
    17c8:	11 a2       	std	Z+33, r1	; 0x21
    17ca:	08 95       	ret

000017cc <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    17cc:	e0 e0       	ldi	r30, 0x00	; 0
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	81 81       	ldd	r24, Z+1	; 0x01
    17d2:	68 2b       	or	r22, r24
    17d4:	61 83       	std	Z+1, r22	; 0x01
    17d6:	08 95       	ret

000017d8 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    17d8:	e0 e0       	ldi	r30, 0x00	; 0
    17da:	fb e0       	ldi	r31, 0x0B	; 11
    17dc:	81 81       	ldd	r24, Z+1	; 0x01
    17de:	60 95       	com	r22
    17e0:	68 23       	and	r22, r24
    17e2:	61 83       	std	Z+1, r22	; 0x01
    17e4:	08 95       	ret

000017e6 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    17e6:	e0 e0       	ldi	r30, 0x00	; 0
    17e8:	fb e0       	ldi	r31, 0x0B	; 11
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	62 95       	swap	r22
    17ee:	6f 70       	andi	r22, 0x0F	; 15
    17f0:	68 2b       	or	r22, r24
    17f2:	62 83       	std	Z+2, r22	; 0x02
    17f4:	08 95       	ret

000017f6 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    17f6:	e0 e0       	ldi	r30, 0x00	; 0
    17f8:	fb e0       	ldi	r31, 0x0B	; 11
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	62 95       	swap	r22
    17fe:	6f 70       	andi	r22, 0x0F	; 15
    1800:	60 95       	com	r22
    1802:	68 23       	and	r22, r24
    1804:	62 83       	std	Z+2, r22	; 0x02
    1806:	08 95       	ret

00001808 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    1808:	60 93 26 0b 	sts	0x0B26, r22
    180c:	70 93 27 0b 	sts	0x0B27, r23
    1810:	08 95       	ret

00001812 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    1812:	60 93 28 0b 	sts	0x0B28, r22
    1816:	70 93 29 0b 	sts	0x0B29, r23
    181a:	08 95       	ret

0000181c <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    181c:	60 93 2a 0b 	sts	0x0B2A, r22
    1820:	70 93 2b 0b 	sts	0x0B2B, r23
    1824:	08 95       	ret

00001826 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    1826:	60 93 2c 0b 	sts	0x0B2C, r22
    182a:	70 93 2d 0b 	sts	0x0B2D, r23
    182e:	08 95       	ret

00001830 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    1830:	60 93 2e 0b 	sts	0x0B2E, r22
    1834:	70 93 2f 0b 	sts	0x0B2F, r23
    1838:	08 95       	ret

0000183a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	31 f0       	breq	.+12     	; 0x184c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1840:	e0 e0       	ldi	r30, 0x00	; 0
    1842:	fb e0       	ldi	r31, 0x0B	; 11
    1844:	86 81       	ldd	r24, Z+6	; 0x06
    1846:	83 70       	andi	r24, 0x03	; 3
    1848:	28 2b       	or	r18, r24
    184a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    184c:	60 93 14 22 	sts	0x2214, r22
    1850:	70 93 15 22 	sts	0x2215, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    1854:	40 93 0a 23 	sts	0x230A, r20
    1858:	50 93 0b 23 	sts	0x230B, r21
    185c:	08 95       	ret

0000185e <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    185e:	61 15       	cp	r22, r1
    1860:	71 05       	cpc	r23, r1
    1862:	31 f0       	breq	.+12     	; 0x1870 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1864:	e0 e0       	ldi	r30, 0x00	; 0
    1866:	fb e0       	ldi	r31, 0x0B	; 11
    1868:	86 81       	ldd	r24, Z+6	; 0x06
    186a:	8c 70       	andi	r24, 0x0C	; 12
    186c:	28 2b       	or	r18, r24
    186e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    1870:	60 93 16 22 	sts	0x2216, r22
    1874:	70 93 17 22 	sts	0x2217, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    1878:	40 93 0c 23 	sts	0x230C, r20
    187c:	50 93 0d 23 	sts	0x230D, r21
    1880:	08 95       	ret

00001882 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1882:	61 15       	cp	r22, r1
    1884:	71 05       	cpc	r23, r1
    1886:	31 f0       	breq	.+12     	; 0x1894 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1888:	e0 e0       	ldi	r30, 0x00	; 0
    188a:	fb e0       	ldi	r31, 0x0B	; 11
    188c:	87 81       	ldd	r24, Z+7	; 0x07
    188e:	83 70       	andi	r24, 0x03	; 3
    1890:	28 2b       	or	r18, r24
    1892:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    1894:	60 93 18 22 	sts	0x2218, r22
    1898:	70 93 19 22 	sts	0x2219, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    189c:	40 93 0e 23 	sts	0x230E, r20
    18a0:	50 93 0f 23 	sts	0x230F, r21
    18a4:	08 95       	ret

000018a6 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    18a6:	61 15       	cp	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	31 f0       	breq	.+12     	; 0x18b8 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    18ac:	e0 e0       	ldi	r30, 0x00	; 0
    18ae:	fb e0       	ldi	r31, 0x0B	; 11
    18b0:	87 81       	ldd	r24, Z+7	; 0x07
    18b2:	8c 70       	andi	r24, 0x0C	; 12
    18b4:	28 2b       	or	r18, r24
    18b6:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    18b8:	60 93 1a 22 	sts	0x221A, r22
    18bc:	70 93 1b 22 	sts	0x221B, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    18c0:	40 93 10 23 	sts	0x2310, r20
    18c4:	50 93 11 23 	sts	0x2311, r21
    18c8:	08 95       	ret

000018ca <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    18ca:	61 15       	cp	r22, r1
    18cc:	71 05       	cpc	r23, r1
    18ce:	31 f0       	breq	.+12     	; 0x18dc <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    18d0:	e0 e0       	ldi	r30, 0x00	; 0
    18d2:	fb e0       	ldi	r31, 0x0B	; 11
    18d4:	87 81       	ldd	r24, Z+7	; 0x07
    18d6:	80 73       	andi	r24, 0x30	; 48
    18d8:	28 2b       	or	r18, r24
    18da:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    18dc:	60 93 1c 22 	sts	0x221C, r22
    18e0:	70 93 1d 22 	sts	0x221D, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    18e4:	40 93 12 23 	sts	0x2312, r20
    18e8:	50 93 13 23 	sts	0x2313, r21
    18ec:	08 95       	ret

000018ee <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	31 f0       	breq	.+12     	; 0x1900 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    18f4:	e0 e0       	ldi	r30, 0x00	; 0
    18f6:	fb e0       	ldi	r31, 0x0B	; 11
    18f8:	87 81       	ldd	r24, Z+7	; 0x07
    18fa:	80 7c       	andi	r24, 0xC0	; 192
    18fc:	28 2b       	or	r18, r24
    18fe:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    1900:	60 93 1e 22 	sts	0x221E, r22
    1904:	70 93 1f 22 	sts	0x221F, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    1908:	40 93 14 23 	sts	0x2314, r20
    190c:	50 93 15 23 	sts	0x2315, r21
    1910:	08 95       	ret

00001912 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	ec 01       	movw	r28, r24
    1918:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN6CTimerC1Ev>
    191c:	8c e9       	ldi	r24, 0x9C	; 156
    191e:	90 e2       	ldi	r25, 0x20	; 32
    1920:	88 83       	st	Y, r24
    1922:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    192a:	2c e9       	ldi	r18, 0x9C	; 156
    192c:	30 e2       	ldi	r19, 0x20	; 32
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
    1932:	31 83       	std	Z+1, r19	; 0x01
    1934:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN6CTimerD1Ev>
    1938:	08 95       	ret

0000193a <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    193a:	08 95       	ret

0000193c <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    193c:	08 95       	ret

0000193e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    193e:	ef 92       	push	r14
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    194a:	e0 e8       	ldi	r30, 0x80	; 128
    194c:	f6 e0       	ldi	r31, 0x06	; 6
    194e:	80 eb       	ldi	r24, 0xB0	; 176
    1950:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    1952:	90 e4       	ldi	r25, 0x40	; 64
    1954:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1956:	90 ec       	ldi	r25, 0xC0	; 192
    1958:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    195a:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    195c:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    195e:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    1960:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    1962:	61 11       	cpse	r22, r1
    1964:	02 c0       	rjmp	.+4      	; 0x196a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1966:	80 e4       	ldi	r24, 0x40	; 64
    1968:	01 c0       	rjmp	.+2      	; 0x196c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    196a:	80 e5       	ldi	r24, 0x50	; 80
    196c:	01 11       	cpse	r16, r1
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1974:	30 e8       	ldi	r19, 0x80	; 128
    1976:	41 11       	cpse	r20, r1
    1978:	02 c0       	rjmp	.+4      	; 0x197e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    197e:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    1980:	22 0f       	add	r18, r18
    1982:	22 0f       	add	r18, r18
    1984:	e2 2a       	or	r14, r18
    1986:	e8 2a       	or	r14, r24
    1988:	e3 2a       	or	r14, r19
		prescaler;
    198a:	e9 2a       	or	r14, r25
    198c:	00 ec       	ldi	r16, 0xC0	; 192
    198e:	1a e0       	ldi	r17, 0x0A	; 10
    1990:	f8 01       	movw	r30, r16
    1992:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    199c:	88 83       	st	Y, r24
    199e:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	f8 01       	movw	r30, r16
    19a4:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    19a6:	8b e1       	ldi	r24, 0x1B	; 27
    19a8:	9d e0       	ldi	r25, 0x0D	; 13
    19aa:	80 93 ae 21 	sts	0x21AE, r24
    19ae:	90 93 af 21 	sts	0x21AF, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    19b2:	c0 93 a4 22 	sts	0x22A4, r28
    19b6:	d0 93 a5 22 	sts	0x22A5, r29
}
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ef 90       	pop	r14
    19c4:	08 95       	ret

000019c6 <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
	rx_pos = length;
    19cc:	4a 83       	std	Y+2, r20	; 0x02
    19ce:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
    19d0:	4c 83       	std	Y+4, r20	; 0x04
    19d2:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
    19d4:	88 81       	ld	r24, Y
    19d6:	99 81       	ldd	r25, Y+1	; 0x01
    19d8:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
    19dc:	80 e1       	ldi	r24, 0x10	; 16
    19de:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
    19e2:	88 81       	ld	r24, Y
    19e4:	99 81       	ldd	r25, Y+1	; 0x01
    19e6:	4a 81       	ldd	r20, Y+2	; 0x02
    19e8:	5b 81       	ldd	r21, Y+3	; 0x03
    19ea:	9a 01       	movw	r18, r20
    19ec:	21 50       	subi	r18, 0x01	; 1
    19ee:	31 09       	sbc	r19, r1
    19f0:	2a 83       	std	Y+2, r18	; 0x02
    19f2:	3b 83       	std	Y+3, r19	; 0x03
    19f4:	fc 01       	movw	r30, r24
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	80 81       	ld	r24, Z
    19fc:	80 93 c3 0a 	sts	0x0AC3, r24
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1a06:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	89 2b       	or	r24, r25
    1a0e:	79 f0       	breq	.+30     	; 0x1a2e <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    1a10:	40 81       	ld	r20, Z
    1a12:	51 81       	ldd	r21, Z+1	; 0x01
    1a14:	22 81       	ldd	r18, Z+2	; 0x02
    1a16:	33 81       	ldd	r19, Z+3	; 0x03
    1a18:	c9 01       	movw	r24, r18
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	82 83       	std	Z+2, r24	; 0x02
    1a1e:	93 83       	std	Z+3, r25	; 0x03
    1a20:	fa 01       	movw	r30, r20
    1a22:	e8 0f       	add	r30, r24
    1a24:	f9 1f       	adc	r31, r25
    1a26:	80 81       	ld	r24, Z
    1a28:	80 93 c3 0a 	sts	0x0AC3, r24
    1a2c:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    1a2e:	80 e1       	ldi	r24, 0x10	; 16
    1a30:	80 93 85 06 	sts	0x0685, r24
    1a34:	08 95       	ret

00001a36 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    1a36:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_ZN4CSPI10OnTransmitEv>
    1a3a:	08 95       	ret

00001a3c <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    1a3c:	24 ec       	ldi	r18, 0xC4	; 196
    1a3e:	30 e2       	ldi	r19, 0x20	; 32
    1a40:	fc 01       	movw	r30, r24
    1a42:	20 83       	st	Z, r18
    1a44:	31 83       	std	Z+1, r19	; 0x01
    1a46:	08 95       	ret

00001a48 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    1a48:	08 95       	ret

00001a4a <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    1a4a:	28 ee       	ldi	r18, 0xE8	; 232
    1a4c:	30 e2       	ldi	r19, 0x20	; 32
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
    1a52:	31 83       	std	Z+1, r19	; 0x01
    1a54:	08 95       	ret

00001a56 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1a56:	08 95       	ret

00001a58 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	0b b6       	in	r0, 0x3b	; 59
    1a64:	0f 92       	push	r0
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
    1a7e:	e0 91 3e 21 	lds	r30, 0x213E
    1a82:	f0 91 3f 21 	lds	r31, 0x213F
    1a86:	30 97       	sbiw	r30, 0x00	; 0
    1a88:	29 f0       	breq	.+10     	; 0x1a94 <__vector_1+0x3c>
    1a8a:	80 91 34 22 	lds	r24, 0x2234
    1a8e:	90 91 35 22 	lds	r25, 0x2235
    1a92:	19 95       	eicall
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0b be       	out	0x3b, r0	; 59
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	0b b6       	in	r0, 0x3b	; 59
    1ac6:	0f 92       	push	r0
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
    1ae0:	e0 91 40 21 	lds	r30, 0x2140
    1ae4:	f0 91 41 21 	lds	r31, 0x2141
    1ae8:	30 97       	sbiw	r30, 0x00	; 0
    1aea:	29 f0       	breq	.+10     	; 0x1af6 <__vector_2+0x3c>
    1aec:	80 91 36 22 	lds	r24, 0x2236
    1af0:	90 91 37 22 	lds	r25, 0x2237
    1af4:	19 95       	eicall
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	0b be       	out	0x3b, r0	; 59
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	0b b6       	in	r0, 0x3b	; 59
    1b28:	0f 92       	push	r0
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	e0 91 42 21 	lds	r30, 0x2142
    1b46:	f0 91 43 21 	lds	r31, 0x2143
    1b4a:	30 97       	sbiw	r30, 0x00	; 0
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <__vector_3+0x3c>
    1b4e:	80 91 38 22 	lds	r24, 0x2238
    1b52:	90 91 39 22 	lds	r25, 0x2239
    1b56:	19 95       	eicall
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0b be       	out	0x3b, r0	; 59
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	0b b6       	in	r0, 0x3b	; 59
    1b8a:	0f 92       	push	r0
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
    1ba4:	e0 91 44 21 	lds	r30, 0x2144
    1ba8:	f0 91 45 21 	lds	r31, 0x2145
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	29 f0       	breq	.+10     	; 0x1bba <__vector_4+0x3c>
    1bb0:	80 91 3a 22 	lds	r24, 0x223A
    1bb4:	90 91 3b 22 	lds	r25, 0x223B
    1bb8:	19 95       	eicall
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	0b be       	out	0x3b, r0	; 59
    1bd6:	0f 90       	pop	r0
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	0f 90       	pop	r0
    1bdc:	1f 90       	pop	r1
    1bde:	18 95       	reti

00001be0 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1be0:	1f 92       	push	r1
    1be2:	0f 92       	push	r0
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	0f 92       	push	r0
    1be8:	11 24       	eor	r1, r1
    1bea:	0b b6       	in	r0, 0x3b	; 59
    1bec:	0f 92       	push	r0
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	e0 91 46 21 	lds	r30, 0x2146
    1c0a:	f0 91 47 21 	lds	r31, 0x2147
    1c0e:	30 97       	sbiw	r30, 0x00	; 0
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <__vector_5+0x3c>
    1c12:	80 91 3c 22 	lds	r24, 0x223C
    1c16:	90 91 3d 22 	lds	r25, 0x223D
    1c1a:	19 95       	eicall
    1c1c:	ff 91       	pop	r31
    1c1e:	ef 91       	pop	r30
    1c20:	bf 91       	pop	r27
    1c22:	af 91       	pop	r26
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	7f 91       	pop	r23
    1c2a:	6f 91       	pop	r22
    1c2c:	5f 91       	pop	r21
    1c2e:	4f 91       	pop	r20
    1c30:	3f 91       	pop	r19
    1c32:	2f 91       	pop	r18
    1c34:	0f 90       	pop	r0
    1c36:	0b be       	out	0x3b, r0	; 59
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	0b b6       	in	r0, 0x3b	; 59
    1c4e:	0f 92       	push	r0
    1c50:	2f 93       	push	r18
    1c52:	3f 93       	push	r19
    1c54:	4f 93       	push	r20
    1c56:	5f 93       	push	r21
    1c58:	6f 93       	push	r22
    1c5a:	7f 93       	push	r23
    1c5c:	8f 93       	push	r24
    1c5e:	9f 93       	push	r25
    1c60:	af 93       	push	r26
    1c62:	bf 93       	push	r27
    1c64:	ef 93       	push	r30
    1c66:	ff 93       	push	r31
    1c68:	e0 91 48 21 	lds	r30, 0x2148
    1c6c:	f0 91 49 21 	lds	r31, 0x2149
    1c70:	30 97       	sbiw	r30, 0x00	; 0
    1c72:	29 f0       	breq	.+10     	; 0x1c7e <__vector_6+0x3c>
    1c74:	80 91 3e 22 	lds	r24, 0x223E
    1c78:	90 91 3f 22 	lds	r25, 0x223F
    1c7c:	19 95       	eicall
    1c7e:	ff 91       	pop	r31
    1c80:	ef 91       	pop	r30
    1c82:	bf 91       	pop	r27
    1c84:	af 91       	pop	r26
    1c86:	9f 91       	pop	r25
    1c88:	8f 91       	pop	r24
    1c8a:	7f 91       	pop	r23
    1c8c:	6f 91       	pop	r22
    1c8e:	5f 91       	pop	r21
    1c90:	4f 91       	pop	r20
    1c92:	3f 91       	pop	r19
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0b be       	out	0x3b, r0	; 59
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 90       	pop	r1
    1ca2:	18 95       	reti

00001ca4 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	0b b6       	in	r0, 0x3b	; 59
    1cb0:	0f 92       	push	r0
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	6f 93       	push	r22
    1cbc:	7f 93       	push	r23
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	af 93       	push	r26
    1cc4:	bf 93       	push	r27
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
    1cca:	e0 91 4a 21 	lds	r30, 0x214A
    1cce:	f0 91 4b 21 	lds	r31, 0x214B
    1cd2:	30 97       	sbiw	r30, 0x00	; 0
    1cd4:	29 f0       	breq	.+10     	; 0x1ce0 <__vector_7+0x3c>
    1cd6:	80 91 40 22 	lds	r24, 0x2240
    1cda:	90 91 41 22 	lds	r25, 0x2241
    1cde:	19 95       	eicall
    1ce0:	ff 91       	pop	r31
    1ce2:	ef 91       	pop	r30
    1ce4:	bf 91       	pop	r27
    1ce6:	af 91       	pop	r26
    1ce8:	9f 91       	pop	r25
    1cea:	8f 91       	pop	r24
    1cec:	7f 91       	pop	r23
    1cee:	6f 91       	pop	r22
    1cf0:	5f 91       	pop	r21
    1cf2:	4f 91       	pop	r20
    1cf4:	3f 91       	pop	r19
    1cf6:	2f 91       	pop	r18
    1cf8:	0f 90       	pop	r0
    1cfa:	0b be       	out	0x3b, r0	; 59
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	0b b6       	in	r0, 0x3b	; 59
    1d12:	0f 92       	push	r0
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
    1d2c:	e0 91 4c 21 	lds	r30, 0x214C
    1d30:	f0 91 4d 21 	lds	r31, 0x214D
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	29 f0       	breq	.+10     	; 0x1d42 <__vector_8+0x3c>
    1d38:	80 91 42 22 	lds	r24, 0x2242
    1d3c:	90 91 43 22 	lds	r25, 0x2243
    1d40:	19 95       	eicall
    1d42:	ff 91       	pop	r31
    1d44:	ef 91       	pop	r30
    1d46:	bf 91       	pop	r27
    1d48:	af 91       	pop	r26
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	7f 91       	pop	r23
    1d50:	6f 91       	pop	r22
    1d52:	5f 91       	pop	r21
    1d54:	4f 91       	pop	r20
    1d56:	3f 91       	pop	r19
    1d58:	2f 91       	pop	r18
    1d5a:	0f 90       	pop	r0
    1d5c:	0b be       	out	0x3b, r0	; 59
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	0f 90       	pop	r0
    1d64:	1f 90       	pop	r1
    1d66:	18 95       	reti

00001d68 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1d68:	1f 92       	push	r1
    1d6a:	0f 92       	push	r0
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	0f 92       	push	r0
    1d70:	11 24       	eor	r1, r1
    1d72:	0b b6       	in	r0, 0x3b	; 59
    1d74:	0f 92       	push	r0
    1d76:	2f 93       	push	r18
    1d78:	3f 93       	push	r19
    1d7a:	4f 93       	push	r20
    1d7c:	5f 93       	push	r21
    1d7e:	6f 93       	push	r22
    1d80:	7f 93       	push	r23
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
    1d8e:	e0 91 4e 21 	lds	r30, 0x214E
    1d92:	f0 91 4f 21 	lds	r31, 0x214F
    1d96:	30 97       	sbiw	r30, 0x00	; 0
    1d98:	29 f0       	breq	.+10     	; 0x1da4 <__vector_9+0x3c>
    1d9a:	80 91 44 22 	lds	r24, 0x2244
    1d9e:	90 91 45 22 	lds	r25, 0x2245
    1da2:	19 95       	eicall
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	bf 91       	pop	r27
    1daa:	af 91       	pop	r26
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	7f 91       	pop	r23
    1db2:	6f 91       	pop	r22
    1db4:	5f 91       	pop	r21
    1db6:	4f 91       	pop	r20
    1db8:	3f 91       	pop	r19
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0b be       	out	0x3b, r0	; 59
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	0b b6       	in	r0, 0x3b	; 59
    1dd6:	0f 92       	push	r0
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	5f 93       	push	r21
    1de0:	6f 93       	push	r22
    1de2:	7f 93       	push	r23
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	af 93       	push	r26
    1dea:	bf 93       	push	r27
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	e0 91 50 21 	lds	r30, 0x2150
    1df4:	f0 91 51 21 	lds	r31, 0x2151
    1df8:	30 97       	sbiw	r30, 0x00	; 0
    1dfa:	29 f0       	breq	.+10     	; 0x1e06 <__vector_10+0x3c>
    1dfc:	80 91 46 22 	lds	r24, 0x2246
    1e00:	90 91 47 22 	lds	r25, 0x2247
    1e04:	19 95       	eicall
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	7f 91       	pop	r23
    1e14:	6f 91       	pop	r22
    1e16:	5f 91       	pop	r21
    1e18:	4f 91       	pop	r20
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0b be       	out	0x3b, r0	; 59
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	0b b6       	in	r0, 0x3b	; 59
    1e38:	0f 92       	push	r0
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
    1e52:	e0 91 52 21 	lds	r30, 0x2152
    1e56:	f0 91 53 21 	lds	r31, 0x2153
    1e5a:	30 97       	sbiw	r30, 0x00	; 0
    1e5c:	29 f0       	breq	.+10     	; 0x1e68 <__vector_11+0x3c>
    1e5e:	80 91 48 22 	lds	r24, 0x2248
    1e62:	90 91 49 22 	lds	r25, 0x2249
    1e66:	19 95       	eicall
    1e68:	ff 91       	pop	r31
    1e6a:	ef 91       	pop	r30
    1e6c:	bf 91       	pop	r27
    1e6e:	af 91       	pop	r26
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	7f 91       	pop	r23
    1e76:	6f 91       	pop	r22
    1e78:	5f 91       	pop	r21
    1e7a:	4f 91       	pop	r20
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	0f 90       	pop	r0
    1e82:	0b be       	out	0x3b, r0	; 59
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1e8e:	1f 92       	push	r1
    1e90:	0f 92       	push	r0
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	0f 92       	push	r0
    1e96:	11 24       	eor	r1, r1
    1e98:	0b b6       	in	r0, 0x3b	; 59
    1e9a:	0f 92       	push	r0
    1e9c:	2f 93       	push	r18
    1e9e:	3f 93       	push	r19
    1ea0:	4f 93       	push	r20
    1ea2:	5f 93       	push	r21
    1ea4:	6f 93       	push	r22
    1ea6:	7f 93       	push	r23
    1ea8:	8f 93       	push	r24
    1eaa:	9f 93       	push	r25
    1eac:	af 93       	push	r26
    1eae:	bf 93       	push	r27
    1eb0:	ef 93       	push	r30
    1eb2:	ff 93       	push	r31
    1eb4:	e0 91 54 21 	lds	r30, 0x2154
    1eb8:	f0 91 55 21 	lds	r31, 0x2155
    1ebc:	30 97       	sbiw	r30, 0x00	; 0
    1ebe:	29 f0       	breq	.+10     	; 0x1eca <__vector_12+0x3c>
    1ec0:	80 91 4a 22 	lds	r24, 0x224A
    1ec4:	90 91 4b 22 	lds	r25, 0x224B
    1ec8:	19 95       	eicall
    1eca:	ff 91       	pop	r31
    1ecc:	ef 91       	pop	r30
    1ece:	bf 91       	pop	r27
    1ed0:	af 91       	pop	r26
    1ed2:	9f 91       	pop	r25
    1ed4:	8f 91       	pop	r24
    1ed6:	7f 91       	pop	r23
    1ed8:	6f 91       	pop	r22
    1eda:	5f 91       	pop	r21
    1edc:	4f 91       	pop	r20
    1ede:	3f 91       	pop	r19
    1ee0:	2f 91       	pop	r18
    1ee2:	0f 90       	pop	r0
    1ee4:	0b be       	out	0x3b, r0	; 59
    1ee6:	0f 90       	pop	r0
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	0f 90       	pop	r0
    1eec:	1f 90       	pop	r1
    1eee:	18 95       	reti

00001ef0 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1ef0:	1f 92       	push	r1
    1ef2:	0f 92       	push	r0
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	0f 92       	push	r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	0b b6       	in	r0, 0x3b	; 59
    1efc:	0f 92       	push	r0
    1efe:	2f 93       	push	r18
    1f00:	3f 93       	push	r19
    1f02:	4f 93       	push	r20
    1f04:	5f 93       	push	r21
    1f06:	6f 93       	push	r22
    1f08:	7f 93       	push	r23
    1f0a:	8f 93       	push	r24
    1f0c:	9f 93       	push	r25
    1f0e:	af 93       	push	r26
    1f10:	bf 93       	push	r27
    1f12:	ef 93       	push	r30
    1f14:	ff 93       	push	r31
    1f16:	e0 91 56 21 	lds	r30, 0x2156
    1f1a:	f0 91 57 21 	lds	r31, 0x2157
    1f1e:	30 97       	sbiw	r30, 0x00	; 0
    1f20:	29 f0       	breq	.+10     	; 0x1f2c <__vector_13+0x3c>
    1f22:	80 91 4c 22 	lds	r24, 0x224C
    1f26:	90 91 4d 22 	lds	r25, 0x224D
    1f2a:	19 95       	eicall
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0b be       	out	0x3b, r0	; 59
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	0f 90       	pop	r0
    1f4e:	1f 90       	pop	r1
    1f50:	18 95       	reti

00001f52 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	0b b6       	in	r0, 0x3b	; 59
    1f5e:	0f 92       	push	r0
    1f60:	2f 93       	push	r18
    1f62:	3f 93       	push	r19
    1f64:	4f 93       	push	r20
    1f66:	5f 93       	push	r21
    1f68:	6f 93       	push	r22
    1f6a:	7f 93       	push	r23
    1f6c:	8f 93       	push	r24
    1f6e:	9f 93       	push	r25
    1f70:	af 93       	push	r26
    1f72:	bf 93       	push	r27
    1f74:	ef 93       	push	r30
    1f76:	ff 93       	push	r31
    1f78:	e0 91 58 21 	lds	r30, 0x2158
    1f7c:	f0 91 59 21 	lds	r31, 0x2159
    1f80:	30 97       	sbiw	r30, 0x00	; 0
    1f82:	29 f0       	breq	.+10     	; 0x1f8e <__vector_14+0x3c>
    1f84:	80 91 4e 22 	lds	r24, 0x224E
    1f88:	90 91 4f 22 	lds	r25, 0x224F
    1f8c:	19 95       	eicall
    1f8e:	ff 91       	pop	r31
    1f90:	ef 91       	pop	r30
    1f92:	bf 91       	pop	r27
    1f94:	af 91       	pop	r26
    1f96:	9f 91       	pop	r25
    1f98:	8f 91       	pop	r24
    1f9a:	7f 91       	pop	r23
    1f9c:	6f 91       	pop	r22
    1f9e:	5f 91       	pop	r21
    1fa0:	4f 91       	pop	r20
    1fa2:	3f 91       	pop	r19
    1fa4:	2f 91       	pop	r18
    1fa6:	0f 90       	pop	r0
    1fa8:	0b be       	out	0x3b, r0	; 59
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	0b b6       	in	r0, 0x3b	; 59
    1fc0:	0f 92       	push	r0
    1fc2:	2f 93       	push	r18
    1fc4:	3f 93       	push	r19
    1fc6:	4f 93       	push	r20
    1fc8:	5f 93       	push	r21
    1fca:	6f 93       	push	r22
    1fcc:	7f 93       	push	r23
    1fce:	8f 93       	push	r24
    1fd0:	9f 93       	push	r25
    1fd2:	af 93       	push	r26
    1fd4:	bf 93       	push	r27
    1fd6:	ef 93       	push	r30
    1fd8:	ff 93       	push	r31
    1fda:	e0 91 5a 21 	lds	r30, 0x215A
    1fde:	f0 91 5b 21 	lds	r31, 0x215B
    1fe2:	30 97       	sbiw	r30, 0x00	; 0
    1fe4:	29 f0       	breq	.+10     	; 0x1ff0 <__vector_15+0x3c>
    1fe6:	80 91 50 22 	lds	r24, 0x2250
    1fea:	90 91 51 22 	lds	r25, 0x2251
    1fee:	19 95       	eicall
    1ff0:	ff 91       	pop	r31
    1ff2:	ef 91       	pop	r30
    1ff4:	bf 91       	pop	r27
    1ff6:	af 91       	pop	r26
    1ff8:	9f 91       	pop	r25
    1ffa:	8f 91       	pop	r24
    1ffc:	7f 91       	pop	r23
    1ffe:	6f 91       	pop	r22
    2000:	5f 91       	pop	r21
    2002:	4f 91       	pop	r20
    2004:	3f 91       	pop	r19
    2006:	2f 91       	pop	r18
    2008:	0f 90       	pop	r0
    200a:	0b be       	out	0x3b, r0	; 59
    200c:	0f 90       	pop	r0
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	0f 90       	pop	r0
    2012:	1f 90       	pop	r1
    2014:	18 95       	reti

00002016 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2016:	1f 92       	push	r1
    2018:	0f 92       	push	r0
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	0f 92       	push	r0
    201e:	11 24       	eor	r1, r1
    2020:	0b b6       	in	r0, 0x3b	; 59
    2022:	0f 92       	push	r0
    2024:	2f 93       	push	r18
    2026:	3f 93       	push	r19
    2028:	4f 93       	push	r20
    202a:	5f 93       	push	r21
    202c:	6f 93       	push	r22
    202e:	7f 93       	push	r23
    2030:	8f 93       	push	r24
    2032:	9f 93       	push	r25
    2034:	af 93       	push	r26
    2036:	bf 93       	push	r27
    2038:	ef 93       	push	r30
    203a:	ff 93       	push	r31
    203c:	e0 91 5c 21 	lds	r30, 0x215C
    2040:	f0 91 5d 21 	lds	r31, 0x215D
    2044:	30 97       	sbiw	r30, 0x00	; 0
    2046:	29 f0       	breq	.+10     	; 0x2052 <__vector_16+0x3c>
    2048:	80 91 52 22 	lds	r24, 0x2252
    204c:	90 91 53 22 	lds	r25, 0x2253
    2050:	19 95       	eicall
    2052:	ff 91       	pop	r31
    2054:	ef 91       	pop	r30
    2056:	bf 91       	pop	r27
    2058:	af 91       	pop	r26
    205a:	9f 91       	pop	r25
    205c:	8f 91       	pop	r24
    205e:	7f 91       	pop	r23
    2060:	6f 91       	pop	r22
    2062:	5f 91       	pop	r21
    2064:	4f 91       	pop	r20
    2066:	3f 91       	pop	r19
    2068:	2f 91       	pop	r18
    206a:	0f 90       	pop	r0
    206c:	0b be       	out	0x3b, r0	; 59
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    2078:	1f 92       	push	r1
    207a:	0f 92       	push	r0
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	0f 92       	push	r0
    2080:	11 24       	eor	r1, r1
    2082:	0b b6       	in	r0, 0x3b	; 59
    2084:	0f 92       	push	r0
    2086:	2f 93       	push	r18
    2088:	3f 93       	push	r19
    208a:	4f 93       	push	r20
    208c:	5f 93       	push	r21
    208e:	6f 93       	push	r22
    2090:	7f 93       	push	r23
    2092:	8f 93       	push	r24
    2094:	9f 93       	push	r25
    2096:	af 93       	push	r26
    2098:	bf 93       	push	r27
    209a:	ef 93       	push	r30
    209c:	ff 93       	push	r31
    209e:	e0 91 5e 21 	lds	r30, 0x215E
    20a2:	f0 91 5f 21 	lds	r31, 0x215F
    20a6:	30 97       	sbiw	r30, 0x00	; 0
    20a8:	29 f0       	breq	.+10     	; 0x20b4 <__vector_17+0x3c>
    20aa:	80 91 54 22 	lds	r24, 0x2254
    20ae:	90 91 55 22 	lds	r25, 0x2255
    20b2:	19 95       	eicall
    20b4:	ff 91       	pop	r31
    20b6:	ef 91       	pop	r30
    20b8:	bf 91       	pop	r27
    20ba:	af 91       	pop	r26
    20bc:	9f 91       	pop	r25
    20be:	8f 91       	pop	r24
    20c0:	7f 91       	pop	r23
    20c2:	6f 91       	pop	r22
    20c4:	5f 91       	pop	r21
    20c6:	4f 91       	pop	r20
    20c8:	3f 91       	pop	r19
    20ca:	2f 91       	pop	r18
    20cc:	0f 90       	pop	r0
    20ce:	0b be       	out	0x3b, r0	; 59
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    20da:	1f 92       	push	r1
    20dc:	0f 92       	push	r0
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	0f 92       	push	r0
    20e2:	11 24       	eor	r1, r1
    20e4:	0b b6       	in	r0, 0x3b	; 59
    20e6:	0f 92       	push	r0
    20e8:	2f 93       	push	r18
    20ea:	3f 93       	push	r19
    20ec:	4f 93       	push	r20
    20ee:	5f 93       	push	r21
    20f0:	6f 93       	push	r22
    20f2:	7f 93       	push	r23
    20f4:	8f 93       	push	r24
    20f6:	9f 93       	push	r25
    20f8:	af 93       	push	r26
    20fa:	bf 93       	push	r27
    20fc:	ef 93       	push	r30
    20fe:	ff 93       	push	r31
    2100:	e0 91 60 21 	lds	r30, 0x2160
    2104:	f0 91 61 21 	lds	r31, 0x2161
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	29 f0       	breq	.+10     	; 0x2116 <__vector_18+0x3c>
    210c:	80 91 56 22 	lds	r24, 0x2256
    2110:	90 91 57 22 	lds	r25, 0x2257
    2114:	19 95       	eicall
    2116:	ff 91       	pop	r31
    2118:	ef 91       	pop	r30
    211a:	bf 91       	pop	r27
    211c:	af 91       	pop	r26
    211e:	9f 91       	pop	r25
    2120:	8f 91       	pop	r24
    2122:	7f 91       	pop	r23
    2124:	6f 91       	pop	r22
    2126:	5f 91       	pop	r21
    2128:	4f 91       	pop	r20
    212a:	3f 91       	pop	r19
    212c:	2f 91       	pop	r18
    212e:	0f 90       	pop	r0
    2130:	0b be       	out	0x3b, r0	; 59
    2132:	0f 90       	pop	r0
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	0f 90       	pop	r0
    2138:	1f 90       	pop	r1
    213a:	18 95       	reti

0000213c <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    213c:	1f 92       	push	r1
    213e:	0f 92       	push	r0
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	0f 92       	push	r0
    2144:	11 24       	eor	r1, r1
    2146:	0b b6       	in	r0, 0x3b	; 59
    2148:	0f 92       	push	r0
    214a:	2f 93       	push	r18
    214c:	3f 93       	push	r19
    214e:	4f 93       	push	r20
    2150:	5f 93       	push	r21
    2152:	6f 93       	push	r22
    2154:	7f 93       	push	r23
    2156:	8f 93       	push	r24
    2158:	9f 93       	push	r25
    215a:	af 93       	push	r26
    215c:	bf 93       	push	r27
    215e:	ef 93       	push	r30
    2160:	ff 93       	push	r31
    2162:	e0 91 62 21 	lds	r30, 0x2162
    2166:	f0 91 63 21 	lds	r31, 0x2163
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	29 f0       	breq	.+10     	; 0x2178 <__vector_19+0x3c>
    216e:	80 91 58 22 	lds	r24, 0x2258
    2172:	90 91 59 22 	lds	r25, 0x2259
    2176:	19 95       	eicall
    2178:	ff 91       	pop	r31
    217a:	ef 91       	pop	r30
    217c:	bf 91       	pop	r27
    217e:	af 91       	pop	r26
    2180:	9f 91       	pop	r25
    2182:	8f 91       	pop	r24
    2184:	7f 91       	pop	r23
    2186:	6f 91       	pop	r22
    2188:	5f 91       	pop	r21
    218a:	4f 91       	pop	r20
    218c:	3f 91       	pop	r19
    218e:	2f 91       	pop	r18
    2190:	0f 90       	pop	r0
    2192:	0b be       	out	0x3b, r0	; 59
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti

0000219e <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	0b b6       	in	r0, 0x3b	; 59
    21aa:	0f 92       	push	r0
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
    21c4:	e0 91 64 21 	lds	r30, 0x2164
    21c8:	f0 91 65 21 	lds	r31, 0x2165
    21cc:	30 97       	sbiw	r30, 0x00	; 0
    21ce:	29 f0       	breq	.+10     	; 0x21da <__vector_20+0x3c>
    21d0:	80 91 5a 22 	lds	r24, 0x225A
    21d4:	90 91 5b 22 	lds	r25, 0x225B
    21d8:	19 95       	eicall
    21da:	ff 91       	pop	r31
    21dc:	ef 91       	pop	r30
    21de:	bf 91       	pop	r27
    21e0:	af 91       	pop	r26
    21e2:	9f 91       	pop	r25
    21e4:	8f 91       	pop	r24
    21e6:	7f 91       	pop	r23
    21e8:	6f 91       	pop	r22
    21ea:	5f 91       	pop	r21
    21ec:	4f 91       	pop	r20
    21ee:	3f 91       	pop	r19
    21f0:	2f 91       	pop	r18
    21f2:	0f 90       	pop	r0
    21f4:	0b be       	out	0x3b, r0	; 59
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	0f 90       	pop	r0
    21fc:	1f 90       	pop	r1
    21fe:	18 95       	reti

00002200 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2200:	1f 92       	push	r1
    2202:	0f 92       	push	r0
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	0f 92       	push	r0
    2208:	11 24       	eor	r1, r1
    220a:	0b b6       	in	r0, 0x3b	; 59
    220c:	0f 92       	push	r0
    220e:	2f 93       	push	r18
    2210:	3f 93       	push	r19
    2212:	4f 93       	push	r20
    2214:	5f 93       	push	r21
    2216:	6f 93       	push	r22
    2218:	7f 93       	push	r23
    221a:	8f 93       	push	r24
    221c:	9f 93       	push	r25
    221e:	af 93       	push	r26
    2220:	bf 93       	push	r27
    2222:	ef 93       	push	r30
    2224:	ff 93       	push	r31
    2226:	e0 91 66 21 	lds	r30, 0x2166
    222a:	f0 91 67 21 	lds	r31, 0x2167
    222e:	30 97       	sbiw	r30, 0x00	; 0
    2230:	29 f0       	breq	.+10     	; 0x223c <__vector_21+0x3c>
    2232:	80 91 5c 22 	lds	r24, 0x225C
    2236:	90 91 5d 22 	lds	r25, 0x225D
    223a:	19 95       	eicall
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	bf 91       	pop	r27
    2242:	af 91       	pop	r26
    2244:	9f 91       	pop	r25
    2246:	8f 91       	pop	r24
    2248:	7f 91       	pop	r23
    224a:	6f 91       	pop	r22
    224c:	5f 91       	pop	r21
    224e:	4f 91       	pop	r20
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	0f 90       	pop	r0
    2256:	0b be       	out	0x3b, r0	; 59
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	0f 90       	pop	r0
    225e:	1f 90       	pop	r1
    2260:	18 95       	reti

00002262 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
    226c:	0b b6       	in	r0, 0x3b	; 59
    226e:	0f 92       	push	r0
    2270:	2f 93       	push	r18
    2272:	3f 93       	push	r19
    2274:	4f 93       	push	r20
    2276:	5f 93       	push	r21
    2278:	6f 93       	push	r22
    227a:	7f 93       	push	r23
    227c:	8f 93       	push	r24
    227e:	9f 93       	push	r25
    2280:	af 93       	push	r26
    2282:	bf 93       	push	r27
    2284:	ef 93       	push	r30
    2286:	ff 93       	push	r31
    2288:	e0 91 68 21 	lds	r30, 0x2168
    228c:	f0 91 69 21 	lds	r31, 0x2169
    2290:	30 97       	sbiw	r30, 0x00	; 0
    2292:	29 f0       	breq	.+10     	; 0x229e <__vector_22+0x3c>
    2294:	80 91 5e 22 	lds	r24, 0x225E
    2298:	90 91 5f 22 	lds	r25, 0x225F
    229c:	19 95       	eicall
    229e:	ff 91       	pop	r31
    22a0:	ef 91       	pop	r30
    22a2:	bf 91       	pop	r27
    22a4:	af 91       	pop	r26
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	7f 91       	pop	r23
    22ac:	6f 91       	pop	r22
    22ae:	5f 91       	pop	r21
    22b0:	4f 91       	pop	r20
    22b2:	3f 91       	pop	r19
    22b4:	2f 91       	pop	r18
    22b6:	0f 90       	pop	r0
    22b8:	0b be       	out	0x3b, r0	; 59
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	0f 90       	pop	r0
    22c0:	1f 90       	pop	r1
    22c2:	18 95       	reti

000022c4 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	0b b6       	in	r0, 0x3b	; 59
    22d0:	0f 92       	push	r0
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
    22ea:	e0 91 6a 21 	lds	r30, 0x216A
    22ee:	f0 91 6b 21 	lds	r31, 0x216B
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	29 f0       	breq	.+10     	; 0x2300 <__vector_23+0x3c>
    22f6:	80 91 60 22 	lds	r24, 0x2260
    22fa:	90 91 61 22 	lds	r25, 0x2261
    22fe:	19 95       	eicall
    2300:	ff 91       	pop	r31
    2302:	ef 91       	pop	r30
    2304:	bf 91       	pop	r27
    2306:	af 91       	pop	r26
    2308:	9f 91       	pop	r25
    230a:	8f 91       	pop	r24
    230c:	7f 91       	pop	r23
    230e:	6f 91       	pop	r22
    2310:	5f 91       	pop	r21
    2312:	4f 91       	pop	r20
    2314:	3f 91       	pop	r19
    2316:	2f 91       	pop	r18
    2318:	0f 90       	pop	r0
    231a:	0b be       	out	0x3b, r0	; 59
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	0b b6       	in	r0, 0x3b	; 59
    2332:	0f 92       	push	r0
    2334:	2f 93       	push	r18
    2336:	3f 93       	push	r19
    2338:	4f 93       	push	r20
    233a:	5f 93       	push	r21
    233c:	6f 93       	push	r22
    233e:	7f 93       	push	r23
    2340:	8f 93       	push	r24
    2342:	9f 93       	push	r25
    2344:	af 93       	push	r26
    2346:	bf 93       	push	r27
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	e0 91 6c 21 	lds	r30, 0x216C
    2350:	f0 91 6d 21 	lds	r31, 0x216D
    2354:	30 97       	sbiw	r30, 0x00	; 0
    2356:	29 f0       	breq	.+10     	; 0x2362 <__vector_24+0x3c>
    2358:	80 91 62 22 	lds	r24, 0x2262
    235c:	90 91 63 22 	lds	r25, 0x2263
    2360:	19 95       	eicall
    2362:	ff 91       	pop	r31
    2364:	ef 91       	pop	r30
    2366:	bf 91       	pop	r27
    2368:	af 91       	pop	r26
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	7f 91       	pop	r23
    2370:	6f 91       	pop	r22
    2372:	5f 91       	pop	r21
    2374:	4f 91       	pop	r20
    2376:	3f 91       	pop	r19
    2378:	2f 91       	pop	r18
    237a:	0f 90       	pop	r0
    237c:	0b be       	out	0x3b, r0	; 59
    237e:	0f 90       	pop	r0
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	0f 90       	pop	r0
    2384:	1f 90       	pop	r1
    2386:	18 95       	reti

00002388 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	0b b6       	in	r0, 0x3b	; 59
    2394:	0f 92       	push	r0
    2396:	2f 93       	push	r18
    2398:	3f 93       	push	r19
    239a:	4f 93       	push	r20
    239c:	5f 93       	push	r21
    239e:	6f 93       	push	r22
    23a0:	7f 93       	push	r23
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
    23ae:	e0 91 6e 21 	lds	r30, 0x216E
    23b2:	f0 91 6f 21 	lds	r31, 0x216F
    23b6:	30 97       	sbiw	r30, 0x00	; 0
    23b8:	29 f0       	breq	.+10     	; 0x23c4 <__vector_25+0x3c>
    23ba:	80 91 64 22 	lds	r24, 0x2264
    23be:	90 91 65 22 	lds	r25, 0x2265
    23c2:	19 95       	eicall
    23c4:	ff 91       	pop	r31
    23c6:	ef 91       	pop	r30
    23c8:	bf 91       	pop	r27
    23ca:	af 91       	pop	r26
    23cc:	9f 91       	pop	r25
    23ce:	8f 91       	pop	r24
    23d0:	7f 91       	pop	r23
    23d2:	6f 91       	pop	r22
    23d4:	5f 91       	pop	r21
    23d6:	4f 91       	pop	r20
    23d8:	3f 91       	pop	r19
    23da:	2f 91       	pop	r18
    23dc:	0f 90       	pop	r0
    23de:	0b be       	out	0x3b, r0	; 59
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    23ea:	1f 92       	push	r1
    23ec:	0f 92       	push	r0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	0f 92       	push	r0
    23f2:	11 24       	eor	r1, r1
    23f4:	0b b6       	in	r0, 0x3b	; 59
    23f6:	0f 92       	push	r0
    23f8:	2f 93       	push	r18
    23fa:	3f 93       	push	r19
    23fc:	4f 93       	push	r20
    23fe:	5f 93       	push	r21
    2400:	6f 93       	push	r22
    2402:	7f 93       	push	r23
    2404:	8f 93       	push	r24
    2406:	9f 93       	push	r25
    2408:	af 93       	push	r26
    240a:	bf 93       	push	r27
    240c:	ef 93       	push	r30
    240e:	ff 93       	push	r31
    2410:	e0 91 70 21 	lds	r30, 0x2170
    2414:	f0 91 71 21 	lds	r31, 0x2171
    2418:	30 97       	sbiw	r30, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_26+0x3c>
    241c:	80 91 66 22 	lds	r24, 0x2266
    2420:	90 91 67 22 	lds	r25, 0x2267
    2424:	19 95       	eicall
    2426:	ff 91       	pop	r31
    2428:	ef 91       	pop	r30
    242a:	bf 91       	pop	r27
    242c:	af 91       	pop	r26
    242e:	9f 91       	pop	r25
    2430:	8f 91       	pop	r24
    2432:	7f 91       	pop	r23
    2434:	6f 91       	pop	r22
    2436:	5f 91       	pop	r21
    2438:	4f 91       	pop	r20
    243a:	3f 91       	pop	r19
    243c:	2f 91       	pop	r18
    243e:	0f 90       	pop	r0
    2440:	0b be       	out	0x3b, r0	; 59
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	0b b6       	in	r0, 0x3b	; 59
    2458:	0f 92       	push	r0
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
    2472:	e0 91 72 21 	lds	r30, 0x2172
    2476:	f0 91 73 21 	lds	r31, 0x2173
    247a:	30 97       	sbiw	r30, 0x00	; 0
    247c:	29 f0       	breq	.+10     	; 0x2488 <__vector_27+0x3c>
    247e:	80 91 68 22 	lds	r24, 0x2268
    2482:	90 91 69 22 	lds	r25, 0x2269
    2486:	19 95       	eicall
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0b be       	out	0x3b, r0	; 59
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	0b b6       	in	r0, 0x3b	; 59
    24ba:	0f 92       	push	r0
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
    24d4:	e0 91 74 21 	lds	r30, 0x2174
    24d8:	f0 91 75 21 	lds	r31, 0x2175
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	29 f0       	breq	.+10     	; 0x24ea <__vector_28+0x3c>
    24e0:	80 91 6a 22 	lds	r24, 0x226A
    24e4:	90 91 6b 22 	lds	r25, 0x226B
    24e8:	19 95       	eicall
    24ea:	ff 91       	pop	r31
    24ec:	ef 91       	pop	r30
    24ee:	bf 91       	pop	r27
    24f0:	af 91       	pop	r26
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	7f 91       	pop	r23
    24f8:	6f 91       	pop	r22
    24fa:	5f 91       	pop	r21
    24fc:	4f 91       	pop	r20
    24fe:	3f 91       	pop	r19
    2500:	2f 91       	pop	r18
    2502:	0f 90       	pop	r0
    2504:	0b be       	out	0x3b, r0	; 59
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2510:	1f 92       	push	r1
    2512:	0f 92       	push	r0
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	0f 92       	push	r0
    2518:	11 24       	eor	r1, r1
    251a:	0b b6       	in	r0, 0x3b	; 59
    251c:	0f 92       	push	r0
    251e:	2f 93       	push	r18
    2520:	3f 93       	push	r19
    2522:	4f 93       	push	r20
    2524:	5f 93       	push	r21
    2526:	6f 93       	push	r22
    2528:	7f 93       	push	r23
    252a:	8f 93       	push	r24
    252c:	9f 93       	push	r25
    252e:	af 93       	push	r26
    2530:	bf 93       	push	r27
    2532:	ef 93       	push	r30
    2534:	ff 93       	push	r31
    2536:	e0 91 76 21 	lds	r30, 0x2176
    253a:	f0 91 77 21 	lds	r31, 0x2177
    253e:	30 97       	sbiw	r30, 0x00	; 0
    2540:	29 f0       	breq	.+10     	; 0x254c <__vector_29+0x3c>
    2542:	80 91 6c 22 	lds	r24, 0x226C
    2546:	90 91 6d 22 	lds	r25, 0x226D
    254a:	19 95       	eicall
    254c:	ff 91       	pop	r31
    254e:	ef 91       	pop	r30
    2550:	bf 91       	pop	r27
    2552:	af 91       	pop	r26
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	7f 91       	pop	r23
    255a:	6f 91       	pop	r22
    255c:	5f 91       	pop	r21
    255e:	4f 91       	pop	r20
    2560:	3f 91       	pop	r19
    2562:	2f 91       	pop	r18
    2564:	0f 90       	pop	r0
    2566:	0b be       	out	0x3b, r0	; 59
    2568:	0f 90       	pop	r0
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	0f 90       	pop	r0
    256e:	1f 90       	pop	r1
    2570:	18 95       	reti

00002572 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2572:	1f 92       	push	r1
    2574:	0f 92       	push	r0
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	0f 92       	push	r0
    257a:	11 24       	eor	r1, r1
    257c:	0b b6       	in	r0, 0x3b	; 59
    257e:	0f 92       	push	r0
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
    2598:	e0 91 78 21 	lds	r30, 0x2178
    259c:	f0 91 79 21 	lds	r31, 0x2179
    25a0:	30 97       	sbiw	r30, 0x00	; 0
    25a2:	29 f0       	breq	.+10     	; 0x25ae <__vector_30+0x3c>
    25a4:	80 91 6e 22 	lds	r24, 0x226E
    25a8:	90 91 6f 22 	lds	r25, 0x226F
    25ac:	19 95       	eicall
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	bf 91       	pop	r27
    25b4:	af 91       	pop	r26
    25b6:	9f 91       	pop	r25
    25b8:	8f 91       	pop	r24
    25ba:	7f 91       	pop	r23
    25bc:	6f 91       	pop	r22
    25be:	5f 91       	pop	r21
    25c0:	4f 91       	pop	r20
    25c2:	3f 91       	pop	r19
    25c4:	2f 91       	pop	r18
    25c6:	0f 90       	pop	r0
    25c8:	0b be       	out	0x3b, r0	; 59
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0
    25d0:	1f 90       	pop	r1
    25d2:	18 95       	reti

000025d4 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	0b b6       	in	r0, 0x3b	; 59
    25e0:	0f 92       	push	r0
    25e2:	2f 93       	push	r18
    25e4:	3f 93       	push	r19
    25e6:	4f 93       	push	r20
    25e8:	5f 93       	push	r21
    25ea:	6f 93       	push	r22
    25ec:	7f 93       	push	r23
    25ee:	8f 93       	push	r24
    25f0:	9f 93       	push	r25
    25f2:	af 93       	push	r26
    25f4:	bf 93       	push	r27
    25f6:	ef 93       	push	r30
    25f8:	ff 93       	push	r31
    25fa:	e0 91 7a 21 	lds	r30, 0x217A
    25fe:	f0 91 7b 21 	lds	r31, 0x217B
    2602:	30 97       	sbiw	r30, 0x00	; 0
    2604:	29 f0       	breq	.+10     	; 0x2610 <__vector_31+0x3c>
    2606:	80 91 70 22 	lds	r24, 0x2270
    260a:	90 91 71 22 	lds	r25, 0x2271
    260e:	19 95       	eicall
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	7f 91       	pop	r23
    261e:	6f 91       	pop	r22
    2620:	5f 91       	pop	r21
    2622:	4f 91       	pop	r20
    2624:	3f 91       	pop	r19
    2626:	2f 91       	pop	r18
    2628:	0f 90       	pop	r0
    262a:	0b be       	out	0x3b, r0	; 59
    262c:	0f 90       	pop	r0
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	0f 90       	pop	r0
    2632:	1f 90       	pop	r1
    2634:	18 95       	reti

00002636 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2636:	1f 92       	push	r1
    2638:	0f 92       	push	r0
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	0b b6       	in	r0, 0x3b	; 59
    2642:	0f 92       	push	r0
    2644:	2f 93       	push	r18
    2646:	3f 93       	push	r19
    2648:	4f 93       	push	r20
    264a:	5f 93       	push	r21
    264c:	6f 93       	push	r22
    264e:	7f 93       	push	r23
    2650:	8f 93       	push	r24
    2652:	9f 93       	push	r25
    2654:	af 93       	push	r26
    2656:	bf 93       	push	r27
    2658:	ef 93       	push	r30
    265a:	ff 93       	push	r31
    265c:	e0 91 7c 21 	lds	r30, 0x217C
    2660:	f0 91 7d 21 	lds	r31, 0x217D
    2664:	30 97       	sbiw	r30, 0x00	; 0
    2666:	29 f0       	breq	.+10     	; 0x2672 <__vector_32+0x3c>
    2668:	80 91 72 22 	lds	r24, 0x2272
    266c:	90 91 73 22 	lds	r25, 0x2273
    2670:	19 95       	eicall
    2672:	ff 91       	pop	r31
    2674:	ef 91       	pop	r30
    2676:	bf 91       	pop	r27
    2678:	af 91       	pop	r26
    267a:	9f 91       	pop	r25
    267c:	8f 91       	pop	r24
    267e:	7f 91       	pop	r23
    2680:	6f 91       	pop	r22
    2682:	5f 91       	pop	r21
    2684:	4f 91       	pop	r20
    2686:	3f 91       	pop	r19
    2688:	2f 91       	pop	r18
    268a:	0f 90       	pop	r0
    268c:	0b be       	out	0x3b, r0	; 59
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2698:	1f 92       	push	r1
    269a:	0f 92       	push	r0
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	0f 92       	push	r0
    26a0:	11 24       	eor	r1, r1
    26a2:	0b b6       	in	r0, 0x3b	; 59
    26a4:	0f 92       	push	r0
    26a6:	2f 93       	push	r18
    26a8:	3f 93       	push	r19
    26aa:	4f 93       	push	r20
    26ac:	5f 93       	push	r21
    26ae:	6f 93       	push	r22
    26b0:	7f 93       	push	r23
    26b2:	8f 93       	push	r24
    26b4:	9f 93       	push	r25
    26b6:	af 93       	push	r26
    26b8:	bf 93       	push	r27
    26ba:	ef 93       	push	r30
    26bc:	ff 93       	push	r31
    26be:	e0 91 7e 21 	lds	r30, 0x217E
    26c2:	f0 91 7f 21 	lds	r31, 0x217F
    26c6:	30 97       	sbiw	r30, 0x00	; 0
    26c8:	29 f0       	breq	.+10     	; 0x26d4 <__vector_33+0x3c>
    26ca:	80 91 74 22 	lds	r24, 0x2274
    26ce:	90 91 75 22 	lds	r25, 0x2275
    26d2:	19 95       	eicall
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0b be       	out	0x3b, r0	; 59
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	0b b6       	in	r0, 0x3b	; 59
    2706:	0f 92       	push	r0
    2708:	2f 93       	push	r18
    270a:	3f 93       	push	r19
    270c:	4f 93       	push	r20
    270e:	5f 93       	push	r21
    2710:	6f 93       	push	r22
    2712:	7f 93       	push	r23
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	af 93       	push	r26
    271a:	bf 93       	push	r27
    271c:	ef 93       	push	r30
    271e:	ff 93       	push	r31
    2720:	e0 91 80 21 	lds	r30, 0x2180
    2724:	f0 91 81 21 	lds	r31, 0x2181
    2728:	30 97       	sbiw	r30, 0x00	; 0
    272a:	29 f0       	breq	.+10     	; 0x2736 <__vector_34+0x3c>
    272c:	80 91 76 22 	lds	r24, 0x2276
    2730:	90 91 77 22 	lds	r25, 0x2277
    2734:	19 95       	eicall
    2736:	ff 91       	pop	r31
    2738:	ef 91       	pop	r30
    273a:	bf 91       	pop	r27
    273c:	af 91       	pop	r26
    273e:	9f 91       	pop	r25
    2740:	8f 91       	pop	r24
    2742:	7f 91       	pop	r23
    2744:	6f 91       	pop	r22
    2746:	5f 91       	pop	r21
    2748:	4f 91       	pop	r20
    274a:	3f 91       	pop	r19
    274c:	2f 91       	pop	r18
    274e:	0f 90       	pop	r0
    2750:	0b be       	out	0x3b, r0	; 59
    2752:	0f 90       	pop	r0
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	0f 90       	pop	r0
    2758:	1f 90       	pop	r1
    275a:	18 95       	reti

0000275c <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	0b b6       	in	r0, 0x3b	; 59
    2768:	0f 92       	push	r0
    276a:	2f 93       	push	r18
    276c:	3f 93       	push	r19
    276e:	4f 93       	push	r20
    2770:	5f 93       	push	r21
    2772:	6f 93       	push	r22
    2774:	7f 93       	push	r23
    2776:	8f 93       	push	r24
    2778:	9f 93       	push	r25
    277a:	af 93       	push	r26
    277c:	bf 93       	push	r27
    277e:	ef 93       	push	r30
    2780:	ff 93       	push	r31
    2782:	e0 91 82 21 	lds	r30, 0x2182
    2786:	f0 91 83 21 	lds	r31, 0x2183
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	29 f0       	breq	.+10     	; 0x2798 <__vector_35+0x3c>
    278e:	80 91 78 22 	lds	r24, 0x2278
    2792:	90 91 79 22 	lds	r25, 0x2279
    2796:	19 95       	eicall
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	bf 91       	pop	r27
    279e:	af 91       	pop	r26
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	7f 91       	pop	r23
    27a6:	6f 91       	pop	r22
    27a8:	5f 91       	pop	r21
    27aa:	4f 91       	pop	r20
    27ac:	3f 91       	pop	r19
    27ae:	2f 91       	pop	r18
    27b0:	0f 90       	pop	r0
    27b2:	0b be       	out	0x3b, r0	; 59
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	0f 90       	pop	r0
    27ba:	1f 90       	pop	r1
    27bc:	18 95       	reti

000027be <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    27be:	1f 92       	push	r1
    27c0:	0f 92       	push	r0
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	0f 92       	push	r0
    27c6:	11 24       	eor	r1, r1
    27c8:	0b b6       	in	r0, 0x3b	; 59
    27ca:	0f 92       	push	r0
    27cc:	2f 93       	push	r18
    27ce:	3f 93       	push	r19
    27d0:	4f 93       	push	r20
    27d2:	5f 93       	push	r21
    27d4:	6f 93       	push	r22
    27d6:	7f 93       	push	r23
    27d8:	8f 93       	push	r24
    27da:	9f 93       	push	r25
    27dc:	af 93       	push	r26
    27de:	bf 93       	push	r27
    27e0:	ef 93       	push	r30
    27e2:	ff 93       	push	r31
    27e4:	e0 91 84 21 	lds	r30, 0x2184
    27e8:	f0 91 85 21 	lds	r31, 0x2185
    27ec:	30 97       	sbiw	r30, 0x00	; 0
    27ee:	29 f0       	breq	.+10     	; 0x27fa <__vector_36+0x3c>
    27f0:	80 91 7a 22 	lds	r24, 0x227A
    27f4:	90 91 7b 22 	lds	r25, 0x227B
    27f8:	19 95       	eicall
    27fa:	ff 91       	pop	r31
    27fc:	ef 91       	pop	r30
    27fe:	bf 91       	pop	r27
    2800:	af 91       	pop	r26
    2802:	9f 91       	pop	r25
    2804:	8f 91       	pop	r24
    2806:	7f 91       	pop	r23
    2808:	6f 91       	pop	r22
    280a:	5f 91       	pop	r21
    280c:	4f 91       	pop	r20
    280e:	3f 91       	pop	r19
    2810:	2f 91       	pop	r18
    2812:	0f 90       	pop	r0
    2814:	0b be       	out	0x3b, r0	; 59
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	0f 90       	pop	r0
    281c:	1f 90       	pop	r1
    281e:	18 95       	reti

00002820 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2820:	1f 92       	push	r1
    2822:	0f 92       	push	r0
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	0f 92       	push	r0
    2828:	11 24       	eor	r1, r1
    282a:	0b b6       	in	r0, 0x3b	; 59
    282c:	0f 92       	push	r0
    282e:	2f 93       	push	r18
    2830:	3f 93       	push	r19
    2832:	4f 93       	push	r20
    2834:	5f 93       	push	r21
    2836:	6f 93       	push	r22
    2838:	7f 93       	push	r23
    283a:	8f 93       	push	r24
    283c:	9f 93       	push	r25
    283e:	af 93       	push	r26
    2840:	bf 93       	push	r27
    2842:	ef 93       	push	r30
    2844:	ff 93       	push	r31
    2846:	e0 91 86 21 	lds	r30, 0x2186
    284a:	f0 91 87 21 	lds	r31, 0x2187
    284e:	30 97       	sbiw	r30, 0x00	; 0
    2850:	29 f0       	breq	.+10     	; 0x285c <__vector_37+0x3c>
    2852:	80 91 7c 22 	lds	r24, 0x227C
    2856:	90 91 7d 22 	lds	r25, 0x227D
    285a:	19 95       	eicall
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	bf 91       	pop	r27
    2862:	af 91       	pop	r26
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	5f 91       	pop	r21
    286e:	4f 91       	pop	r20
    2870:	3f 91       	pop	r19
    2872:	2f 91       	pop	r18
    2874:	0f 90       	pop	r0
    2876:	0b be       	out	0x3b, r0	; 59
    2878:	0f 90       	pop	r0
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	0f 90       	pop	r0
    287e:	1f 90       	pop	r1
    2880:	18 95       	reti

00002882 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2882:	1f 92       	push	r1
    2884:	0f 92       	push	r0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	11 24       	eor	r1, r1
    288c:	0b b6       	in	r0, 0x3b	; 59
    288e:	0f 92       	push	r0
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	ef 93       	push	r30
    28a6:	ff 93       	push	r31
    28a8:	e0 91 88 21 	lds	r30, 0x2188
    28ac:	f0 91 89 21 	lds	r31, 0x2189
    28b0:	30 97       	sbiw	r30, 0x00	; 0
    28b2:	29 f0       	breq	.+10     	; 0x28be <__vector_38+0x3c>
    28b4:	80 91 7e 22 	lds	r24, 0x227E
    28b8:	90 91 7f 22 	lds	r25, 0x227F
    28bc:	19 95       	eicall
    28be:	ff 91       	pop	r31
    28c0:	ef 91       	pop	r30
    28c2:	bf 91       	pop	r27
    28c4:	af 91       	pop	r26
    28c6:	9f 91       	pop	r25
    28c8:	8f 91       	pop	r24
    28ca:	7f 91       	pop	r23
    28cc:	6f 91       	pop	r22
    28ce:	5f 91       	pop	r21
    28d0:	4f 91       	pop	r20
    28d2:	3f 91       	pop	r19
    28d4:	2f 91       	pop	r18
    28d6:	0f 90       	pop	r0
    28d8:	0b be       	out	0x3b, r0	; 59
    28da:	0f 90       	pop	r0
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	0f 90       	pop	r0
    28e0:	1f 90       	pop	r1
    28e2:	18 95       	reti

000028e4 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    28e4:	1f 92       	push	r1
    28e6:	0f 92       	push	r0
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	0f 92       	push	r0
    28ec:	11 24       	eor	r1, r1
    28ee:	0b b6       	in	r0, 0x3b	; 59
    28f0:	0f 92       	push	r0
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	4f 93       	push	r20
    28f8:	5f 93       	push	r21
    28fa:	6f 93       	push	r22
    28fc:	7f 93       	push	r23
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	af 93       	push	r26
    2904:	bf 93       	push	r27
    2906:	ef 93       	push	r30
    2908:	ff 93       	push	r31
    290a:	e0 91 8a 21 	lds	r30, 0x218A
    290e:	f0 91 8b 21 	lds	r31, 0x218B
    2912:	30 97       	sbiw	r30, 0x00	; 0
    2914:	29 f0       	breq	.+10     	; 0x2920 <__vector_39+0x3c>
    2916:	80 91 80 22 	lds	r24, 0x2280
    291a:	90 91 81 22 	lds	r25, 0x2281
    291e:	19 95       	eicall
    2920:	ff 91       	pop	r31
    2922:	ef 91       	pop	r30
    2924:	bf 91       	pop	r27
    2926:	af 91       	pop	r26
    2928:	9f 91       	pop	r25
    292a:	8f 91       	pop	r24
    292c:	7f 91       	pop	r23
    292e:	6f 91       	pop	r22
    2930:	5f 91       	pop	r21
    2932:	4f 91       	pop	r20
    2934:	3f 91       	pop	r19
    2936:	2f 91       	pop	r18
    2938:	0f 90       	pop	r0
    293a:	0b be       	out	0x3b, r0	; 59
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0
    2942:	1f 90       	pop	r1
    2944:	18 95       	reti

00002946 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	0b b6       	in	r0, 0x3b	; 59
    2952:	0f 92       	push	r0
    2954:	2f 93       	push	r18
    2956:	3f 93       	push	r19
    2958:	4f 93       	push	r20
    295a:	5f 93       	push	r21
    295c:	6f 93       	push	r22
    295e:	7f 93       	push	r23
    2960:	8f 93       	push	r24
    2962:	9f 93       	push	r25
    2964:	af 93       	push	r26
    2966:	bf 93       	push	r27
    2968:	ef 93       	push	r30
    296a:	ff 93       	push	r31
    296c:	e0 91 8c 21 	lds	r30, 0x218C
    2970:	f0 91 8d 21 	lds	r31, 0x218D
    2974:	30 97       	sbiw	r30, 0x00	; 0
    2976:	29 f0       	breq	.+10     	; 0x2982 <__vector_40+0x3c>
    2978:	80 91 82 22 	lds	r24, 0x2282
    297c:	90 91 83 22 	lds	r25, 0x2283
    2980:	19 95       	eicall
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	bf 91       	pop	r27
    2988:	af 91       	pop	r26
    298a:	9f 91       	pop	r25
    298c:	8f 91       	pop	r24
    298e:	7f 91       	pop	r23
    2990:	6f 91       	pop	r22
    2992:	5f 91       	pop	r21
    2994:	4f 91       	pop	r20
    2996:	3f 91       	pop	r19
    2998:	2f 91       	pop	r18
    299a:	0f 90       	pop	r0
    299c:	0b be       	out	0x3b, r0	; 59
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	0b b6       	in	r0, 0x3b	; 59
    29b4:	0f 92       	push	r0
    29b6:	2f 93       	push	r18
    29b8:	3f 93       	push	r19
    29ba:	4f 93       	push	r20
    29bc:	5f 93       	push	r21
    29be:	6f 93       	push	r22
    29c0:	7f 93       	push	r23
    29c2:	8f 93       	push	r24
    29c4:	9f 93       	push	r25
    29c6:	af 93       	push	r26
    29c8:	bf 93       	push	r27
    29ca:	ef 93       	push	r30
    29cc:	ff 93       	push	r31
    29ce:	e0 91 8e 21 	lds	r30, 0x218E
    29d2:	f0 91 8f 21 	lds	r31, 0x218F
    29d6:	30 97       	sbiw	r30, 0x00	; 0
    29d8:	29 f0       	breq	.+10     	; 0x29e4 <__vector_41+0x3c>
    29da:	80 91 84 22 	lds	r24, 0x2284
    29de:	90 91 85 22 	lds	r25, 0x2285
    29e2:	19 95       	eicall
    29e4:	ff 91       	pop	r31
    29e6:	ef 91       	pop	r30
    29e8:	bf 91       	pop	r27
    29ea:	af 91       	pop	r26
    29ec:	9f 91       	pop	r25
    29ee:	8f 91       	pop	r24
    29f0:	7f 91       	pop	r23
    29f2:	6f 91       	pop	r22
    29f4:	5f 91       	pop	r21
    29f6:	4f 91       	pop	r20
    29f8:	3f 91       	pop	r19
    29fa:	2f 91       	pop	r18
    29fc:	0f 90       	pop	r0
    29fe:	0b be       	out	0x3b, r0	; 59
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	0f 90       	pop	r0
    2a06:	1f 90       	pop	r1
    2a08:	18 95       	reti

00002a0a <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    2a0a:	1f 92       	push	r1
    2a0c:	0f 92       	push	r0
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	0f 92       	push	r0
    2a12:	11 24       	eor	r1, r1
    2a14:	0b b6       	in	r0, 0x3b	; 59
    2a16:	0f 92       	push	r0
    2a18:	2f 93       	push	r18
    2a1a:	3f 93       	push	r19
    2a1c:	4f 93       	push	r20
    2a1e:	5f 93       	push	r21
    2a20:	6f 93       	push	r22
    2a22:	7f 93       	push	r23
    2a24:	8f 93       	push	r24
    2a26:	9f 93       	push	r25
    2a28:	af 93       	push	r26
    2a2a:	bf 93       	push	r27
    2a2c:	ef 93       	push	r30
    2a2e:	ff 93       	push	r31
    2a30:	e0 91 90 21 	lds	r30, 0x2190
    2a34:	f0 91 91 21 	lds	r31, 0x2191
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	29 f0       	breq	.+10     	; 0x2a46 <__vector_42+0x3c>
    2a3c:	80 91 86 22 	lds	r24, 0x2286
    2a40:	90 91 87 22 	lds	r25, 0x2287
    2a44:	19 95       	eicall
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0b be       	out	0x3b, r0	; 59
    2a62:	0f 90       	pop	r0
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	0f 90       	pop	r0
    2a68:	1f 90       	pop	r1
    2a6a:	18 95       	reti

00002a6c <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    2a6c:	1f 92       	push	r1
    2a6e:	0f 92       	push	r0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	0f 92       	push	r0
    2a74:	11 24       	eor	r1, r1
    2a76:	0b b6       	in	r0, 0x3b	; 59
    2a78:	0f 92       	push	r0
    2a7a:	2f 93       	push	r18
    2a7c:	3f 93       	push	r19
    2a7e:	4f 93       	push	r20
    2a80:	5f 93       	push	r21
    2a82:	6f 93       	push	r22
    2a84:	7f 93       	push	r23
    2a86:	8f 93       	push	r24
    2a88:	9f 93       	push	r25
    2a8a:	af 93       	push	r26
    2a8c:	bf 93       	push	r27
    2a8e:	ef 93       	push	r30
    2a90:	ff 93       	push	r31
    2a92:	e0 91 92 21 	lds	r30, 0x2192
    2a96:	f0 91 93 21 	lds	r31, 0x2193
    2a9a:	30 97       	sbiw	r30, 0x00	; 0
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <__vector_43+0x3c>
    2a9e:	80 91 88 22 	lds	r24, 0x2288
    2aa2:	90 91 89 22 	lds	r25, 0x2289
    2aa6:	19 95       	eicall
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	0f 90       	pop	r0
    2ac2:	0b be       	out	0x3b, r0	; 59
    2ac4:	0f 90       	pop	r0
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	0f 90       	pop	r0
    2aca:	1f 90       	pop	r1
    2acc:	18 95       	reti

00002ace <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    2ace:	1f 92       	push	r1
    2ad0:	0f 92       	push	r0
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	0f 92       	push	r0
    2ad6:	11 24       	eor	r1, r1
    2ad8:	0b b6       	in	r0, 0x3b	; 59
    2ada:	0f 92       	push	r0
    2adc:	2f 93       	push	r18
    2ade:	3f 93       	push	r19
    2ae0:	4f 93       	push	r20
    2ae2:	5f 93       	push	r21
    2ae4:	6f 93       	push	r22
    2ae6:	7f 93       	push	r23
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
    2aec:	af 93       	push	r26
    2aee:	bf 93       	push	r27
    2af0:	ef 93       	push	r30
    2af2:	ff 93       	push	r31
    2af4:	e0 91 94 21 	lds	r30, 0x2194
    2af8:	f0 91 95 21 	lds	r31, 0x2195
    2afc:	30 97       	sbiw	r30, 0x00	; 0
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <__vector_44+0x3c>
    2b00:	80 91 8a 22 	lds	r24, 0x228A
    2b04:	90 91 8b 22 	lds	r25, 0x228B
    2b08:	19 95       	eicall
    2b0a:	ff 91       	pop	r31
    2b0c:	ef 91       	pop	r30
    2b0e:	bf 91       	pop	r27
    2b10:	af 91       	pop	r26
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	7f 91       	pop	r23
    2b18:	6f 91       	pop	r22
    2b1a:	5f 91       	pop	r21
    2b1c:	4f 91       	pop	r20
    2b1e:	3f 91       	pop	r19
    2b20:	2f 91       	pop	r18
    2b22:	0f 90       	pop	r0
    2b24:	0b be       	out	0x3b, r0	; 59
    2b26:	0f 90       	pop	r0
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	0f 90       	pop	r0
    2b2c:	1f 90       	pop	r1
    2b2e:	18 95       	reti

00002b30 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    2b30:	1f 92       	push	r1
    2b32:	0f 92       	push	r0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	0f 92       	push	r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	0b b6       	in	r0, 0x3b	; 59
    2b3c:	0f 92       	push	r0
    2b3e:	2f 93       	push	r18
    2b40:	3f 93       	push	r19
    2b42:	4f 93       	push	r20
    2b44:	5f 93       	push	r21
    2b46:	6f 93       	push	r22
    2b48:	7f 93       	push	r23
    2b4a:	8f 93       	push	r24
    2b4c:	9f 93       	push	r25
    2b4e:	af 93       	push	r26
    2b50:	bf 93       	push	r27
    2b52:	ef 93       	push	r30
    2b54:	ff 93       	push	r31
    2b56:	e0 91 96 21 	lds	r30, 0x2196
    2b5a:	f0 91 97 21 	lds	r31, 0x2197
    2b5e:	30 97       	sbiw	r30, 0x00	; 0
    2b60:	29 f0       	breq	.+10     	; 0x2b6c <__vector_45+0x3c>
    2b62:	80 91 8c 22 	lds	r24, 0x228C
    2b66:	90 91 8d 22 	lds	r25, 0x228D
    2b6a:	19 95       	eicall
    2b6c:	ff 91       	pop	r31
    2b6e:	ef 91       	pop	r30
    2b70:	bf 91       	pop	r27
    2b72:	af 91       	pop	r26
    2b74:	9f 91       	pop	r25
    2b76:	8f 91       	pop	r24
    2b78:	7f 91       	pop	r23
    2b7a:	6f 91       	pop	r22
    2b7c:	5f 91       	pop	r21
    2b7e:	4f 91       	pop	r20
    2b80:	3f 91       	pop	r19
    2b82:	2f 91       	pop	r18
    2b84:	0f 90       	pop	r0
    2b86:	0b be       	out	0x3b, r0	; 59
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	0b b6       	in	r0, 0x3b	; 59
    2b9e:	0f 92       	push	r0
    2ba0:	2f 93       	push	r18
    2ba2:	3f 93       	push	r19
    2ba4:	4f 93       	push	r20
    2ba6:	5f 93       	push	r21
    2ba8:	6f 93       	push	r22
    2baa:	7f 93       	push	r23
    2bac:	8f 93       	push	r24
    2bae:	9f 93       	push	r25
    2bb0:	af 93       	push	r26
    2bb2:	bf 93       	push	r27
    2bb4:	ef 93       	push	r30
    2bb6:	ff 93       	push	r31
    2bb8:	e0 91 98 21 	lds	r30, 0x2198
    2bbc:	f0 91 99 21 	lds	r31, 0x2199
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
    2bc2:	29 f0       	breq	.+10     	; 0x2bce <__vector_46+0x3c>
    2bc4:	80 91 8e 22 	lds	r24, 0x228E
    2bc8:	90 91 8f 22 	lds	r25, 0x228F
    2bcc:	19 95       	eicall
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	bf 91       	pop	r27
    2bd4:	af 91       	pop	r26
    2bd6:	9f 91       	pop	r25
    2bd8:	8f 91       	pop	r24
    2bda:	7f 91       	pop	r23
    2bdc:	6f 91       	pop	r22
    2bde:	5f 91       	pop	r21
    2be0:	4f 91       	pop	r20
    2be2:	3f 91       	pop	r19
    2be4:	2f 91       	pop	r18
    2be6:	0f 90       	pop	r0
    2be8:	0b be       	out	0x3b, r0	; 59
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	0f 92       	push	r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	0b b6       	in	r0, 0x3b	; 59
    2c00:	0f 92       	push	r0
    2c02:	2f 93       	push	r18
    2c04:	3f 93       	push	r19
    2c06:	4f 93       	push	r20
    2c08:	5f 93       	push	r21
    2c0a:	6f 93       	push	r22
    2c0c:	7f 93       	push	r23
    2c0e:	8f 93       	push	r24
    2c10:	9f 93       	push	r25
    2c12:	af 93       	push	r26
    2c14:	bf 93       	push	r27
    2c16:	ef 93       	push	r30
    2c18:	ff 93       	push	r31
    2c1a:	e0 91 9a 21 	lds	r30, 0x219A
    2c1e:	f0 91 9b 21 	lds	r31, 0x219B
    2c22:	30 97       	sbiw	r30, 0x00	; 0
    2c24:	29 f0       	breq	.+10     	; 0x2c30 <__vector_47+0x3c>
    2c26:	80 91 90 22 	lds	r24, 0x2290
    2c2a:	90 91 91 22 	lds	r25, 0x2291
    2c2e:	19 95       	eicall
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0b be       	out	0x3b, r0	; 59
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2c56:	1f 92       	push	r1
    2c58:	0f 92       	push	r0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	0f 92       	push	r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	0b b6       	in	r0, 0x3b	; 59
    2c62:	0f 92       	push	r0
    2c64:	2f 93       	push	r18
    2c66:	3f 93       	push	r19
    2c68:	4f 93       	push	r20
    2c6a:	5f 93       	push	r21
    2c6c:	6f 93       	push	r22
    2c6e:	7f 93       	push	r23
    2c70:	8f 93       	push	r24
    2c72:	9f 93       	push	r25
    2c74:	af 93       	push	r26
    2c76:	bf 93       	push	r27
    2c78:	ef 93       	push	r30
    2c7a:	ff 93       	push	r31
    2c7c:	e0 91 9c 21 	lds	r30, 0x219C
    2c80:	f0 91 9d 21 	lds	r31, 0x219D
    2c84:	30 97       	sbiw	r30, 0x00	; 0
    2c86:	29 f0       	breq	.+10     	; 0x2c92 <__vector_48+0x3c>
    2c88:	80 91 92 22 	lds	r24, 0x2292
    2c8c:	90 91 93 22 	lds	r25, 0x2293
    2c90:	19 95       	eicall
    2c92:	ff 91       	pop	r31
    2c94:	ef 91       	pop	r30
    2c96:	bf 91       	pop	r27
    2c98:	af 91       	pop	r26
    2c9a:	9f 91       	pop	r25
    2c9c:	8f 91       	pop	r24
    2c9e:	7f 91       	pop	r23
    2ca0:	6f 91       	pop	r22
    2ca2:	5f 91       	pop	r21
    2ca4:	4f 91       	pop	r20
    2ca6:	3f 91       	pop	r19
    2ca8:	2f 91       	pop	r18
    2caa:	0f 90       	pop	r0
    2cac:	0b be       	out	0x3b, r0	; 59
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	0b b6       	in	r0, 0x3b	; 59
    2cc4:	0f 92       	push	r0
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	4f 93       	push	r20
    2ccc:	5f 93       	push	r21
    2cce:	6f 93       	push	r22
    2cd0:	7f 93       	push	r23
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	af 93       	push	r26
    2cd8:	bf 93       	push	r27
    2cda:	ef 93       	push	r30
    2cdc:	ff 93       	push	r31
    2cde:	e0 91 9e 21 	lds	r30, 0x219E
    2ce2:	f0 91 9f 21 	lds	r31, 0x219F
    2ce6:	30 97       	sbiw	r30, 0x00	; 0
    2ce8:	29 f0       	breq	.+10     	; 0x2cf4 <__vector_49+0x3c>
    2cea:	80 91 94 22 	lds	r24, 0x2294
    2cee:	90 91 95 22 	lds	r25, 0x2295
    2cf2:	19 95       	eicall
    2cf4:	ff 91       	pop	r31
    2cf6:	ef 91       	pop	r30
    2cf8:	bf 91       	pop	r27
    2cfa:	af 91       	pop	r26
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	7f 91       	pop	r23
    2d02:	6f 91       	pop	r22
    2d04:	5f 91       	pop	r21
    2d06:	4f 91       	pop	r20
    2d08:	3f 91       	pop	r19
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0b be       	out	0x3b, r0	; 59
    2d10:	0f 90       	pop	r0
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	0f 90       	pop	r0
    2d16:	1f 90       	pop	r1
    2d18:	18 95       	reti

00002d1a <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2d1a:	1f 92       	push	r1
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	0f 92       	push	r0
    2d22:	11 24       	eor	r1, r1
    2d24:	0b b6       	in	r0, 0x3b	; 59
    2d26:	0f 92       	push	r0
    2d28:	2f 93       	push	r18
    2d2a:	3f 93       	push	r19
    2d2c:	4f 93       	push	r20
    2d2e:	5f 93       	push	r21
    2d30:	6f 93       	push	r22
    2d32:	7f 93       	push	r23
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
    2d40:	e0 91 a0 21 	lds	r30, 0x21A0
    2d44:	f0 91 a1 21 	lds	r31, 0x21A1
    2d48:	30 97       	sbiw	r30, 0x00	; 0
    2d4a:	29 f0       	breq	.+10     	; 0x2d56 <__vector_50+0x3c>
    2d4c:	80 91 96 22 	lds	r24, 0x2296
    2d50:	90 91 97 22 	lds	r25, 0x2297
    2d54:	19 95       	eicall
    2d56:	ff 91       	pop	r31
    2d58:	ef 91       	pop	r30
    2d5a:	bf 91       	pop	r27
    2d5c:	af 91       	pop	r26
    2d5e:	9f 91       	pop	r25
    2d60:	8f 91       	pop	r24
    2d62:	7f 91       	pop	r23
    2d64:	6f 91       	pop	r22
    2d66:	5f 91       	pop	r21
    2d68:	4f 91       	pop	r20
    2d6a:	3f 91       	pop	r19
    2d6c:	2f 91       	pop	r18
    2d6e:	0f 90       	pop	r0
    2d70:	0b be       	out	0x3b, r0	; 59
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	0f 90       	pop	r0
    2d78:	1f 90       	pop	r1
    2d7a:	18 95       	reti

00002d7c <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	0f 92       	push	r0
    2d84:	11 24       	eor	r1, r1
    2d86:	0b b6       	in	r0, 0x3b	; 59
    2d88:	0f 92       	push	r0
    2d8a:	2f 93       	push	r18
    2d8c:	3f 93       	push	r19
    2d8e:	4f 93       	push	r20
    2d90:	5f 93       	push	r21
    2d92:	6f 93       	push	r22
    2d94:	7f 93       	push	r23
    2d96:	8f 93       	push	r24
    2d98:	9f 93       	push	r25
    2d9a:	af 93       	push	r26
    2d9c:	bf 93       	push	r27
    2d9e:	ef 93       	push	r30
    2da0:	ff 93       	push	r31
    2da2:	e0 91 a2 21 	lds	r30, 0x21A2
    2da6:	f0 91 a3 21 	lds	r31, 0x21A3
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	29 f0       	breq	.+10     	; 0x2db8 <__vector_51+0x3c>
    2dae:	80 91 98 22 	lds	r24, 0x2298
    2db2:	90 91 99 22 	lds	r25, 0x2299
    2db6:	19 95       	eicall
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0b be       	out	0x3b, r0	; 59
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

00002dde <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2dde:	1f 92       	push	r1
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	0f 92       	push	r0
    2de6:	11 24       	eor	r1, r1
    2de8:	0b b6       	in	r0, 0x3b	; 59
    2dea:	0f 92       	push	r0
    2dec:	2f 93       	push	r18
    2dee:	3f 93       	push	r19
    2df0:	4f 93       	push	r20
    2df2:	5f 93       	push	r21
    2df4:	6f 93       	push	r22
    2df6:	7f 93       	push	r23
    2df8:	8f 93       	push	r24
    2dfa:	9f 93       	push	r25
    2dfc:	af 93       	push	r26
    2dfe:	bf 93       	push	r27
    2e00:	ef 93       	push	r30
    2e02:	ff 93       	push	r31
    2e04:	e0 91 a4 21 	lds	r30, 0x21A4
    2e08:	f0 91 a5 21 	lds	r31, 0x21A5
    2e0c:	30 97       	sbiw	r30, 0x00	; 0
    2e0e:	29 f0       	breq	.+10     	; 0x2e1a <__vector_52+0x3c>
    2e10:	80 91 9a 22 	lds	r24, 0x229A
    2e14:	90 91 9b 22 	lds	r25, 0x229B
    2e18:	19 95       	eicall
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0b be       	out	0x3b, r0	; 59
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	0b b6       	in	r0, 0x3b	; 59
    2e4c:	0f 92       	push	r0
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	7f 93       	push	r23
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	af 93       	push	r26
    2e60:	bf 93       	push	r27
    2e62:	ef 93       	push	r30
    2e64:	ff 93       	push	r31
    2e66:	e0 91 a6 21 	lds	r30, 0x21A6
    2e6a:	f0 91 a7 21 	lds	r31, 0x21A7
    2e6e:	30 97       	sbiw	r30, 0x00	; 0
    2e70:	29 f0       	breq	.+10     	; 0x2e7c <__vector_53+0x3c>
    2e72:	80 91 9c 22 	lds	r24, 0x229C
    2e76:	90 91 9d 22 	lds	r25, 0x229D
    2e7a:	19 95       	eicall
    2e7c:	ff 91       	pop	r31
    2e7e:	ef 91       	pop	r30
    2e80:	bf 91       	pop	r27
    2e82:	af 91       	pop	r26
    2e84:	9f 91       	pop	r25
    2e86:	8f 91       	pop	r24
    2e88:	7f 91       	pop	r23
    2e8a:	6f 91       	pop	r22
    2e8c:	5f 91       	pop	r21
    2e8e:	4f 91       	pop	r20
    2e90:	3f 91       	pop	r19
    2e92:	2f 91       	pop	r18
    2e94:	0f 90       	pop	r0
    2e96:	0b be       	out	0x3b, r0	; 59
    2e98:	0f 90       	pop	r0
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	0f 90       	pop	r0
    2e9e:	1f 90       	pop	r1
    2ea0:	18 95       	reti

00002ea2 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2ea2:	1f 92       	push	r1
    2ea4:	0f 92       	push	r0
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	0f 92       	push	r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	0b b6       	in	r0, 0x3b	; 59
    2eae:	0f 92       	push	r0
    2eb0:	2f 93       	push	r18
    2eb2:	3f 93       	push	r19
    2eb4:	4f 93       	push	r20
    2eb6:	5f 93       	push	r21
    2eb8:	6f 93       	push	r22
    2eba:	7f 93       	push	r23
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	af 93       	push	r26
    2ec2:	bf 93       	push	r27
    2ec4:	ef 93       	push	r30
    2ec6:	ff 93       	push	r31
    2ec8:	e0 91 a8 21 	lds	r30, 0x21A8
    2ecc:	f0 91 a9 21 	lds	r31, 0x21A9
    2ed0:	30 97       	sbiw	r30, 0x00	; 0
    2ed2:	29 f0       	breq	.+10     	; 0x2ede <__vector_54+0x3c>
    2ed4:	80 91 9e 22 	lds	r24, 0x229E
    2ed8:	90 91 9f 22 	lds	r25, 0x229F
    2edc:	19 95       	eicall
    2ede:	ff 91       	pop	r31
    2ee0:	ef 91       	pop	r30
    2ee2:	bf 91       	pop	r27
    2ee4:	af 91       	pop	r26
    2ee6:	9f 91       	pop	r25
    2ee8:	8f 91       	pop	r24
    2eea:	7f 91       	pop	r23
    2eec:	6f 91       	pop	r22
    2eee:	5f 91       	pop	r21
    2ef0:	4f 91       	pop	r20
    2ef2:	3f 91       	pop	r19
    2ef4:	2f 91       	pop	r18
    2ef6:	0f 90       	pop	r0
    2ef8:	0b be       	out	0x3b, r0	; 59
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	0b b6       	in	r0, 0x3b	; 59
    2f10:	0f 92       	push	r0
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
    2f2a:	e0 91 aa 21 	lds	r30, 0x21AA
    2f2e:	f0 91 ab 21 	lds	r31, 0x21AB
    2f32:	30 97       	sbiw	r30, 0x00	; 0
    2f34:	29 f0       	breq	.+10     	; 0x2f40 <__vector_55+0x3c>
    2f36:	80 91 a0 22 	lds	r24, 0x22A0
    2f3a:	90 91 a1 22 	lds	r25, 0x22A1
    2f3e:	19 95       	eicall
    2f40:	ff 91       	pop	r31
    2f42:	ef 91       	pop	r30
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	0f 90       	pop	r0
    2f5a:	0b be       	out	0x3b, r0	; 59
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	0f 92       	push	r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	0b b6       	in	r0, 0x3b	; 59
    2f72:	0f 92       	push	r0
    2f74:	2f 93       	push	r18
    2f76:	3f 93       	push	r19
    2f78:	4f 93       	push	r20
    2f7a:	5f 93       	push	r21
    2f7c:	6f 93       	push	r22
    2f7e:	7f 93       	push	r23
    2f80:	8f 93       	push	r24
    2f82:	9f 93       	push	r25
    2f84:	af 93       	push	r26
    2f86:	bf 93       	push	r27
    2f88:	ef 93       	push	r30
    2f8a:	ff 93       	push	r31
    2f8c:	e0 91 ac 21 	lds	r30, 0x21AC
    2f90:	f0 91 ad 21 	lds	r31, 0x21AD
    2f94:	30 97       	sbiw	r30, 0x00	; 0
    2f96:	29 f0       	breq	.+10     	; 0x2fa2 <__vector_56+0x3c>
    2f98:	80 91 a2 22 	lds	r24, 0x22A2
    2f9c:	90 91 a3 22 	lds	r25, 0x22A3
    2fa0:	19 95       	eicall
    2fa2:	ff 91       	pop	r31
    2fa4:	ef 91       	pop	r30
    2fa6:	bf 91       	pop	r27
    2fa8:	af 91       	pop	r26
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	7f 91       	pop	r23
    2fb0:	6f 91       	pop	r22
    2fb2:	5f 91       	pop	r21
    2fb4:	4f 91       	pop	r20
    2fb6:	3f 91       	pop	r19
    2fb8:	2f 91       	pop	r18
    2fba:	0f 90       	pop	r0
    2fbc:	0b be       	out	0x3b, r0	; 59
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	0f 90       	pop	r0
    2fc4:	1f 90       	pop	r1
    2fc6:	18 95       	reti

00002fc8 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2fc8:	1f 92       	push	r1
    2fca:	0f 92       	push	r0
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	0b b6       	in	r0, 0x3b	; 59
    2fd4:	0f 92       	push	r0
    2fd6:	2f 93       	push	r18
    2fd8:	3f 93       	push	r19
    2fda:	4f 93       	push	r20
    2fdc:	5f 93       	push	r21
    2fde:	6f 93       	push	r22
    2fe0:	7f 93       	push	r23
    2fe2:	8f 93       	push	r24
    2fe4:	9f 93       	push	r25
    2fe6:	af 93       	push	r26
    2fe8:	bf 93       	push	r27
    2fea:	ef 93       	push	r30
    2fec:	ff 93       	push	r31
    2fee:	e0 91 ae 21 	lds	r30, 0x21AE
    2ff2:	f0 91 af 21 	lds	r31, 0x21AF
    2ff6:	30 97       	sbiw	r30, 0x00	; 0
    2ff8:	29 f0       	breq	.+10     	; 0x3004 <__vector_57+0x3c>
    2ffa:	80 91 a4 22 	lds	r24, 0x22A4
    2ffe:	90 91 a5 22 	lds	r25, 0x22A5
    3002:	19 95       	eicall
    3004:	ff 91       	pop	r31
    3006:	ef 91       	pop	r30
    3008:	bf 91       	pop	r27
    300a:	af 91       	pop	r26
    300c:	9f 91       	pop	r25
    300e:	8f 91       	pop	r24
    3010:	7f 91       	pop	r23
    3012:	6f 91       	pop	r22
    3014:	5f 91       	pop	r21
    3016:	4f 91       	pop	r20
    3018:	3f 91       	pop	r19
    301a:	2f 91       	pop	r18
    301c:	0f 90       	pop	r0
    301e:	0b be       	out	0x3b, r0	; 59
    3020:	0f 90       	pop	r0
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	0f 90       	pop	r0
    3026:	1f 90       	pop	r1
    3028:	18 95       	reti

0000302a <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    302a:	1f 92       	push	r1
    302c:	0f 92       	push	r0
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	0f 92       	push	r0
    3032:	11 24       	eor	r1, r1
    3034:	0b b6       	in	r0, 0x3b	; 59
    3036:	0f 92       	push	r0
    3038:	2f 93       	push	r18
    303a:	3f 93       	push	r19
    303c:	4f 93       	push	r20
    303e:	5f 93       	push	r21
    3040:	6f 93       	push	r22
    3042:	7f 93       	push	r23
    3044:	8f 93       	push	r24
    3046:	9f 93       	push	r25
    3048:	af 93       	push	r26
    304a:	bf 93       	push	r27
    304c:	ef 93       	push	r30
    304e:	ff 93       	push	r31
    3050:	e0 91 b0 21 	lds	r30, 0x21B0
    3054:	f0 91 b1 21 	lds	r31, 0x21B1
    3058:	30 97       	sbiw	r30, 0x00	; 0
    305a:	29 f0       	breq	.+10     	; 0x3066 <__vector_58+0x3c>
    305c:	80 91 a6 22 	lds	r24, 0x22A6
    3060:	90 91 a7 22 	lds	r25, 0x22A7
    3064:	19 95       	eicall
    3066:	ff 91       	pop	r31
    3068:	ef 91       	pop	r30
    306a:	bf 91       	pop	r27
    306c:	af 91       	pop	r26
    306e:	9f 91       	pop	r25
    3070:	8f 91       	pop	r24
    3072:	7f 91       	pop	r23
    3074:	6f 91       	pop	r22
    3076:	5f 91       	pop	r21
    3078:	4f 91       	pop	r20
    307a:	3f 91       	pop	r19
    307c:	2f 91       	pop	r18
    307e:	0f 90       	pop	r0
    3080:	0b be       	out	0x3b, r0	; 59
    3082:	0f 90       	pop	r0
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	0f 90       	pop	r0
    3088:	1f 90       	pop	r1
    308a:	18 95       	reti

0000308c <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    308c:	1f 92       	push	r1
    308e:	0f 92       	push	r0
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	0f 92       	push	r0
    3094:	11 24       	eor	r1, r1
    3096:	0b b6       	in	r0, 0x3b	; 59
    3098:	0f 92       	push	r0
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	e0 91 b2 21 	lds	r30, 0x21B2
    30b6:	f0 91 b3 21 	lds	r31, 0x21B3
    30ba:	30 97       	sbiw	r30, 0x00	; 0
    30bc:	29 f0       	breq	.+10     	; 0x30c8 <__vector_59+0x3c>
    30be:	80 91 a8 22 	lds	r24, 0x22A8
    30c2:	90 91 a9 22 	lds	r25, 0x22A9
    30c6:	19 95       	eicall
    30c8:	ff 91       	pop	r31
    30ca:	ef 91       	pop	r30
    30cc:	bf 91       	pop	r27
    30ce:	af 91       	pop	r26
    30d0:	9f 91       	pop	r25
    30d2:	8f 91       	pop	r24
    30d4:	7f 91       	pop	r23
    30d6:	6f 91       	pop	r22
    30d8:	5f 91       	pop	r21
    30da:	4f 91       	pop	r20
    30dc:	3f 91       	pop	r19
    30de:	2f 91       	pop	r18
    30e0:	0f 90       	pop	r0
    30e2:	0b be       	out	0x3b, r0	; 59
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    30ee:	1f 92       	push	r1
    30f0:	0f 92       	push	r0
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	0f 92       	push	r0
    30f6:	11 24       	eor	r1, r1
    30f8:	0b b6       	in	r0, 0x3b	; 59
    30fa:	0f 92       	push	r0
    30fc:	2f 93       	push	r18
    30fe:	3f 93       	push	r19
    3100:	4f 93       	push	r20
    3102:	5f 93       	push	r21
    3104:	6f 93       	push	r22
    3106:	7f 93       	push	r23
    3108:	8f 93       	push	r24
    310a:	9f 93       	push	r25
    310c:	af 93       	push	r26
    310e:	bf 93       	push	r27
    3110:	ef 93       	push	r30
    3112:	ff 93       	push	r31
    3114:	e0 91 b4 21 	lds	r30, 0x21B4
    3118:	f0 91 b5 21 	lds	r31, 0x21B5
    311c:	30 97       	sbiw	r30, 0x00	; 0
    311e:	29 f0       	breq	.+10     	; 0x312a <__vector_60+0x3c>
    3120:	80 91 aa 22 	lds	r24, 0x22AA
    3124:	90 91 ab 22 	lds	r25, 0x22AB
    3128:	19 95       	eicall
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	bf 91       	pop	r27
    3130:	af 91       	pop	r26
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	7f 91       	pop	r23
    3138:	6f 91       	pop	r22
    313a:	5f 91       	pop	r21
    313c:	4f 91       	pop	r20
    313e:	3f 91       	pop	r19
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0b be       	out	0x3b, r0	; 59
    3146:	0f 90       	pop	r0
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	0f 90       	pop	r0
    314c:	1f 90       	pop	r1
    314e:	18 95       	reti

00003150 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3150:	1f 92       	push	r1
    3152:	0f 92       	push	r0
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	0f 92       	push	r0
    3158:	11 24       	eor	r1, r1
    315a:	0b b6       	in	r0, 0x3b	; 59
    315c:	0f 92       	push	r0
    315e:	2f 93       	push	r18
    3160:	3f 93       	push	r19
    3162:	4f 93       	push	r20
    3164:	5f 93       	push	r21
    3166:	6f 93       	push	r22
    3168:	7f 93       	push	r23
    316a:	8f 93       	push	r24
    316c:	9f 93       	push	r25
    316e:	af 93       	push	r26
    3170:	bf 93       	push	r27
    3172:	ef 93       	push	r30
    3174:	ff 93       	push	r31
    3176:	e0 91 b6 21 	lds	r30, 0x21B6
    317a:	f0 91 b7 21 	lds	r31, 0x21B7
    317e:	30 97       	sbiw	r30, 0x00	; 0
    3180:	29 f0       	breq	.+10     	; 0x318c <__vector_61+0x3c>
    3182:	80 91 ac 22 	lds	r24, 0x22AC
    3186:	90 91 ad 22 	lds	r25, 0x22AD
    318a:	19 95       	eicall
    318c:	ff 91       	pop	r31
    318e:	ef 91       	pop	r30
    3190:	bf 91       	pop	r27
    3192:	af 91       	pop	r26
    3194:	9f 91       	pop	r25
    3196:	8f 91       	pop	r24
    3198:	7f 91       	pop	r23
    319a:	6f 91       	pop	r22
    319c:	5f 91       	pop	r21
    319e:	4f 91       	pop	r20
    31a0:	3f 91       	pop	r19
    31a2:	2f 91       	pop	r18
    31a4:	0f 90       	pop	r0
    31a6:	0b be       	out	0x3b, r0	; 59
    31a8:	0f 90       	pop	r0
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	0f 90       	pop	r0
    31ae:	1f 90       	pop	r1
    31b0:	18 95       	reti

000031b2 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    31b2:	1f 92       	push	r1
    31b4:	0f 92       	push	r0
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	0f 92       	push	r0
    31ba:	11 24       	eor	r1, r1
    31bc:	0b b6       	in	r0, 0x3b	; 59
    31be:	0f 92       	push	r0
    31c0:	2f 93       	push	r18
    31c2:	3f 93       	push	r19
    31c4:	4f 93       	push	r20
    31c6:	5f 93       	push	r21
    31c8:	6f 93       	push	r22
    31ca:	7f 93       	push	r23
    31cc:	8f 93       	push	r24
    31ce:	9f 93       	push	r25
    31d0:	af 93       	push	r26
    31d2:	bf 93       	push	r27
    31d4:	ef 93       	push	r30
    31d6:	ff 93       	push	r31
    31d8:	e0 91 b8 21 	lds	r30, 0x21B8
    31dc:	f0 91 b9 21 	lds	r31, 0x21B9
    31e0:	30 97       	sbiw	r30, 0x00	; 0
    31e2:	29 f0       	breq	.+10     	; 0x31ee <__vector_62+0x3c>
    31e4:	80 91 ae 22 	lds	r24, 0x22AE
    31e8:	90 91 af 22 	lds	r25, 0x22AF
    31ec:	19 95       	eicall
    31ee:	ff 91       	pop	r31
    31f0:	ef 91       	pop	r30
    31f2:	bf 91       	pop	r27
    31f4:	af 91       	pop	r26
    31f6:	9f 91       	pop	r25
    31f8:	8f 91       	pop	r24
    31fa:	7f 91       	pop	r23
    31fc:	6f 91       	pop	r22
    31fe:	5f 91       	pop	r21
    3200:	4f 91       	pop	r20
    3202:	3f 91       	pop	r19
    3204:	2f 91       	pop	r18
    3206:	0f 90       	pop	r0
    3208:	0b be       	out	0x3b, r0	; 59
    320a:	0f 90       	pop	r0
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	0f 90       	pop	r0
    3210:	1f 90       	pop	r1
    3212:	18 95       	reti

00003214 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3214:	1f 92       	push	r1
    3216:	0f 92       	push	r0
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	0f 92       	push	r0
    321c:	11 24       	eor	r1, r1
    321e:	0b b6       	in	r0, 0x3b	; 59
    3220:	0f 92       	push	r0
    3222:	2f 93       	push	r18
    3224:	3f 93       	push	r19
    3226:	4f 93       	push	r20
    3228:	5f 93       	push	r21
    322a:	6f 93       	push	r22
    322c:	7f 93       	push	r23
    322e:	8f 93       	push	r24
    3230:	9f 93       	push	r25
    3232:	af 93       	push	r26
    3234:	bf 93       	push	r27
    3236:	ef 93       	push	r30
    3238:	ff 93       	push	r31
    323a:	e0 91 ba 21 	lds	r30, 0x21BA
    323e:	f0 91 bb 21 	lds	r31, 0x21BB
    3242:	30 97       	sbiw	r30, 0x00	; 0
    3244:	29 f0       	breq	.+10     	; 0x3250 <__vector_63+0x3c>
    3246:	80 91 b0 22 	lds	r24, 0x22B0
    324a:	90 91 b1 22 	lds	r25, 0x22B1
    324e:	19 95       	eicall
    3250:	ff 91       	pop	r31
    3252:	ef 91       	pop	r30
    3254:	bf 91       	pop	r27
    3256:	af 91       	pop	r26
    3258:	9f 91       	pop	r25
    325a:	8f 91       	pop	r24
    325c:	7f 91       	pop	r23
    325e:	6f 91       	pop	r22
    3260:	5f 91       	pop	r21
    3262:	4f 91       	pop	r20
    3264:	3f 91       	pop	r19
    3266:	2f 91       	pop	r18
    3268:	0f 90       	pop	r0
    326a:	0b be       	out	0x3b, r0	; 59
    326c:	0f 90       	pop	r0
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	0f 90       	pop	r0
    3272:	1f 90       	pop	r1
    3274:	18 95       	reti

00003276 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3276:	1f 92       	push	r1
    3278:	0f 92       	push	r0
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	0f 92       	push	r0
    327e:	11 24       	eor	r1, r1
    3280:	0b b6       	in	r0, 0x3b	; 59
    3282:	0f 92       	push	r0
    3284:	2f 93       	push	r18
    3286:	3f 93       	push	r19
    3288:	4f 93       	push	r20
    328a:	5f 93       	push	r21
    328c:	6f 93       	push	r22
    328e:	7f 93       	push	r23
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	af 93       	push	r26
    3296:	bf 93       	push	r27
    3298:	ef 93       	push	r30
    329a:	ff 93       	push	r31
    329c:	e0 91 bc 21 	lds	r30, 0x21BC
    32a0:	f0 91 bd 21 	lds	r31, 0x21BD
    32a4:	30 97       	sbiw	r30, 0x00	; 0
    32a6:	29 f0       	breq	.+10     	; 0x32b2 <__vector_64+0x3c>
    32a8:	80 91 b2 22 	lds	r24, 0x22B2
    32ac:	90 91 b3 22 	lds	r25, 0x22B3
    32b0:	19 95       	eicall
    32b2:	ff 91       	pop	r31
    32b4:	ef 91       	pop	r30
    32b6:	bf 91       	pop	r27
    32b8:	af 91       	pop	r26
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	7f 91       	pop	r23
    32c0:	6f 91       	pop	r22
    32c2:	5f 91       	pop	r21
    32c4:	4f 91       	pop	r20
    32c6:	3f 91       	pop	r19
    32c8:	2f 91       	pop	r18
    32ca:	0f 90       	pop	r0
    32cc:	0b be       	out	0x3b, r0	; 59
    32ce:	0f 90       	pop	r0
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	0f 90       	pop	r0
    32d4:	1f 90       	pop	r1
    32d6:	18 95       	reti

000032d8 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    32d8:	1f 92       	push	r1
    32da:	0f 92       	push	r0
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	0f 92       	push	r0
    32e0:	11 24       	eor	r1, r1
    32e2:	0b b6       	in	r0, 0x3b	; 59
    32e4:	0f 92       	push	r0
    32e6:	2f 93       	push	r18
    32e8:	3f 93       	push	r19
    32ea:	4f 93       	push	r20
    32ec:	5f 93       	push	r21
    32ee:	6f 93       	push	r22
    32f0:	7f 93       	push	r23
    32f2:	8f 93       	push	r24
    32f4:	9f 93       	push	r25
    32f6:	af 93       	push	r26
    32f8:	bf 93       	push	r27
    32fa:	ef 93       	push	r30
    32fc:	ff 93       	push	r31
    32fe:	e0 91 be 21 	lds	r30, 0x21BE
    3302:	f0 91 bf 21 	lds	r31, 0x21BF
    3306:	30 97       	sbiw	r30, 0x00	; 0
    3308:	29 f0       	breq	.+10     	; 0x3314 <__vector_65+0x3c>
    330a:	80 91 b4 22 	lds	r24, 0x22B4
    330e:	90 91 b5 22 	lds	r25, 0x22B5
    3312:	19 95       	eicall
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0b be       	out	0x3b, r0	; 59
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

0000333a <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    333a:	1f 92       	push	r1
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	0f 92       	push	r0
    3342:	11 24       	eor	r1, r1
    3344:	0b b6       	in	r0, 0x3b	; 59
    3346:	0f 92       	push	r0
    3348:	2f 93       	push	r18
    334a:	3f 93       	push	r19
    334c:	4f 93       	push	r20
    334e:	5f 93       	push	r21
    3350:	6f 93       	push	r22
    3352:	7f 93       	push	r23
    3354:	8f 93       	push	r24
    3356:	9f 93       	push	r25
    3358:	af 93       	push	r26
    335a:	bf 93       	push	r27
    335c:	ef 93       	push	r30
    335e:	ff 93       	push	r31
    3360:	e0 91 c0 21 	lds	r30, 0x21C0
    3364:	f0 91 c1 21 	lds	r31, 0x21C1
    3368:	30 97       	sbiw	r30, 0x00	; 0
    336a:	29 f0       	breq	.+10     	; 0x3376 <__vector_66+0x3c>
    336c:	80 91 b6 22 	lds	r24, 0x22B6
    3370:	90 91 b7 22 	lds	r25, 0x22B7
    3374:	19 95       	eicall
    3376:	ff 91       	pop	r31
    3378:	ef 91       	pop	r30
    337a:	bf 91       	pop	r27
    337c:	af 91       	pop	r26
    337e:	9f 91       	pop	r25
    3380:	8f 91       	pop	r24
    3382:	7f 91       	pop	r23
    3384:	6f 91       	pop	r22
    3386:	5f 91       	pop	r21
    3388:	4f 91       	pop	r20
    338a:	3f 91       	pop	r19
    338c:	2f 91       	pop	r18
    338e:	0f 90       	pop	r0
    3390:	0b be       	out	0x3b, r0	; 59
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	0f 90       	pop	r0
    3398:	1f 90       	pop	r1
    339a:	18 95       	reti

0000339c <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    339c:	1f 92       	push	r1
    339e:	0f 92       	push	r0
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	0f 92       	push	r0
    33a4:	11 24       	eor	r1, r1
    33a6:	0b b6       	in	r0, 0x3b	; 59
    33a8:	0f 92       	push	r0
    33aa:	2f 93       	push	r18
    33ac:	3f 93       	push	r19
    33ae:	4f 93       	push	r20
    33b0:	5f 93       	push	r21
    33b2:	6f 93       	push	r22
    33b4:	7f 93       	push	r23
    33b6:	8f 93       	push	r24
    33b8:	9f 93       	push	r25
    33ba:	af 93       	push	r26
    33bc:	bf 93       	push	r27
    33be:	ef 93       	push	r30
    33c0:	ff 93       	push	r31
    33c2:	e0 91 c2 21 	lds	r30, 0x21C2
    33c6:	f0 91 c3 21 	lds	r31, 0x21C3
    33ca:	30 97       	sbiw	r30, 0x00	; 0
    33cc:	29 f0       	breq	.+10     	; 0x33d8 <__vector_67+0x3c>
    33ce:	80 91 b8 22 	lds	r24, 0x22B8
    33d2:	90 91 b9 22 	lds	r25, 0x22B9
    33d6:	19 95       	eicall
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	bf 91       	pop	r27
    33de:	af 91       	pop	r26
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	7f 91       	pop	r23
    33e6:	6f 91       	pop	r22
    33e8:	5f 91       	pop	r21
    33ea:	4f 91       	pop	r20
    33ec:	3f 91       	pop	r19
    33ee:	2f 91       	pop	r18
    33f0:	0f 90       	pop	r0
    33f2:	0b be       	out	0x3b, r0	; 59
    33f4:	0f 90       	pop	r0
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	0f 90       	pop	r0
    33fa:	1f 90       	pop	r1
    33fc:	18 95       	reti

000033fe <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	0b b6       	in	r0, 0x3b	; 59
    340a:	0f 92       	push	r0
    340c:	2f 93       	push	r18
    340e:	3f 93       	push	r19
    3410:	4f 93       	push	r20
    3412:	5f 93       	push	r21
    3414:	6f 93       	push	r22
    3416:	7f 93       	push	r23
    3418:	8f 93       	push	r24
    341a:	9f 93       	push	r25
    341c:	af 93       	push	r26
    341e:	bf 93       	push	r27
    3420:	ef 93       	push	r30
    3422:	ff 93       	push	r31
    3424:	e0 91 c4 21 	lds	r30, 0x21C4
    3428:	f0 91 c5 21 	lds	r31, 0x21C5
    342c:	30 97       	sbiw	r30, 0x00	; 0
    342e:	29 f0       	breq	.+10     	; 0x343a <__vector_68+0x3c>
    3430:	80 91 ba 22 	lds	r24, 0x22BA
    3434:	90 91 bb 22 	lds	r25, 0x22BB
    3438:	19 95       	eicall
    343a:	ff 91       	pop	r31
    343c:	ef 91       	pop	r30
    343e:	bf 91       	pop	r27
    3440:	af 91       	pop	r26
    3442:	9f 91       	pop	r25
    3444:	8f 91       	pop	r24
    3446:	7f 91       	pop	r23
    3448:	6f 91       	pop	r22
    344a:	5f 91       	pop	r21
    344c:	4f 91       	pop	r20
    344e:	3f 91       	pop	r19
    3450:	2f 91       	pop	r18
    3452:	0f 90       	pop	r0
    3454:	0b be       	out	0x3b, r0	; 59
    3456:	0f 90       	pop	r0
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	0f 90       	pop	r0
    345c:	1f 90       	pop	r1
    345e:	18 95       	reti

00003460 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3460:	1f 92       	push	r1
    3462:	0f 92       	push	r0
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	0f 92       	push	r0
    3468:	11 24       	eor	r1, r1
    346a:	0b b6       	in	r0, 0x3b	; 59
    346c:	0f 92       	push	r0
    346e:	2f 93       	push	r18
    3470:	3f 93       	push	r19
    3472:	4f 93       	push	r20
    3474:	5f 93       	push	r21
    3476:	6f 93       	push	r22
    3478:	7f 93       	push	r23
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
    3486:	e0 91 c6 21 	lds	r30, 0x21C6
    348a:	f0 91 c7 21 	lds	r31, 0x21C7
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	29 f0       	breq	.+10     	; 0x349c <__vector_69+0x3c>
    3492:	80 91 bc 22 	lds	r24, 0x22BC
    3496:	90 91 bd 22 	lds	r25, 0x22BD
    349a:	19 95       	eicall
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	7f 91       	pop	r23
    34aa:	6f 91       	pop	r22
    34ac:	5f 91       	pop	r21
    34ae:	4f 91       	pop	r20
    34b0:	3f 91       	pop	r19
    34b2:	2f 91       	pop	r18
    34b4:	0f 90       	pop	r0
    34b6:	0b be       	out	0x3b, r0	; 59
    34b8:	0f 90       	pop	r0
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	0f 90       	pop	r0
    34be:	1f 90       	pop	r1
    34c0:	18 95       	reti

000034c2 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    34c2:	1f 92       	push	r1
    34c4:	0f 92       	push	r0
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	0f 92       	push	r0
    34ca:	11 24       	eor	r1, r1
    34cc:	0b b6       	in	r0, 0x3b	; 59
    34ce:	0f 92       	push	r0
    34d0:	2f 93       	push	r18
    34d2:	3f 93       	push	r19
    34d4:	4f 93       	push	r20
    34d6:	5f 93       	push	r21
    34d8:	6f 93       	push	r22
    34da:	7f 93       	push	r23
    34dc:	8f 93       	push	r24
    34de:	9f 93       	push	r25
    34e0:	af 93       	push	r26
    34e2:	bf 93       	push	r27
    34e4:	ef 93       	push	r30
    34e6:	ff 93       	push	r31
    34e8:	e0 91 c8 21 	lds	r30, 0x21C8
    34ec:	f0 91 c9 21 	lds	r31, 0x21C9
    34f0:	30 97       	sbiw	r30, 0x00	; 0
    34f2:	29 f0       	breq	.+10     	; 0x34fe <__vector_70+0x3c>
    34f4:	80 91 be 22 	lds	r24, 0x22BE
    34f8:	90 91 bf 22 	lds	r25, 0x22BF
    34fc:	19 95       	eicall
    34fe:	ff 91       	pop	r31
    3500:	ef 91       	pop	r30
    3502:	bf 91       	pop	r27
    3504:	af 91       	pop	r26
    3506:	9f 91       	pop	r25
    3508:	8f 91       	pop	r24
    350a:	7f 91       	pop	r23
    350c:	6f 91       	pop	r22
    350e:	5f 91       	pop	r21
    3510:	4f 91       	pop	r20
    3512:	3f 91       	pop	r19
    3514:	2f 91       	pop	r18
    3516:	0f 90       	pop	r0
    3518:	0b be       	out	0x3b, r0	; 59
    351a:	0f 90       	pop	r0
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	0f 90       	pop	r0
    3520:	1f 90       	pop	r1
    3522:	18 95       	reti

00003524 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3524:	1f 92       	push	r1
    3526:	0f 92       	push	r0
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	0f 92       	push	r0
    352c:	11 24       	eor	r1, r1
    352e:	0b b6       	in	r0, 0x3b	; 59
    3530:	0f 92       	push	r0
    3532:	2f 93       	push	r18
    3534:	3f 93       	push	r19
    3536:	4f 93       	push	r20
    3538:	5f 93       	push	r21
    353a:	6f 93       	push	r22
    353c:	7f 93       	push	r23
    353e:	8f 93       	push	r24
    3540:	9f 93       	push	r25
    3542:	af 93       	push	r26
    3544:	bf 93       	push	r27
    3546:	ef 93       	push	r30
    3548:	ff 93       	push	r31
    354a:	e0 91 ca 21 	lds	r30, 0x21CA
    354e:	f0 91 cb 21 	lds	r31, 0x21CB
    3552:	30 97       	sbiw	r30, 0x00	; 0
    3554:	29 f0       	breq	.+10     	; 0x3560 <__vector_71+0x3c>
    3556:	80 91 c0 22 	lds	r24, 0x22C0
    355a:	90 91 c1 22 	lds	r25, 0x22C1
    355e:	19 95       	eicall
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0b be       	out	0x3b, r0	; 59
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3586:	1f 92       	push	r1
    3588:	0f 92       	push	r0
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	0b b6       	in	r0, 0x3b	; 59
    3592:	0f 92       	push	r0
    3594:	2f 93       	push	r18
    3596:	3f 93       	push	r19
    3598:	4f 93       	push	r20
    359a:	5f 93       	push	r21
    359c:	6f 93       	push	r22
    359e:	7f 93       	push	r23
    35a0:	8f 93       	push	r24
    35a2:	9f 93       	push	r25
    35a4:	af 93       	push	r26
    35a6:	bf 93       	push	r27
    35a8:	ef 93       	push	r30
    35aa:	ff 93       	push	r31
    35ac:	e0 91 cc 21 	lds	r30, 0x21CC
    35b0:	f0 91 cd 21 	lds	r31, 0x21CD
    35b4:	30 97       	sbiw	r30, 0x00	; 0
    35b6:	29 f0       	breq	.+10     	; 0x35c2 <__vector_72+0x3c>
    35b8:	80 91 c2 22 	lds	r24, 0x22C2
    35bc:	90 91 c3 22 	lds	r25, 0x22C3
    35c0:	19 95       	eicall
    35c2:	ff 91       	pop	r31
    35c4:	ef 91       	pop	r30
    35c6:	bf 91       	pop	r27
    35c8:	af 91       	pop	r26
    35ca:	9f 91       	pop	r25
    35cc:	8f 91       	pop	r24
    35ce:	7f 91       	pop	r23
    35d0:	6f 91       	pop	r22
    35d2:	5f 91       	pop	r21
    35d4:	4f 91       	pop	r20
    35d6:	3f 91       	pop	r19
    35d8:	2f 91       	pop	r18
    35da:	0f 90       	pop	r0
    35dc:	0b be       	out	0x3b, r0	; 59
    35de:	0f 90       	pop	r0
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	0f 90       	pop	r0
    35e4:	1f 90       	pop	r1
    35e6:	18 95       	reti

000035e8 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	0b b6       	in	r0, 0x3b	; 59
    35f4:	0f 92       	push	r0
    35f6:	2f 93       	push	r18
    35f8:	3f 93       	push	r19
    35fa:	4f 93       	push	r20
    35fc:	5f 93       	push	r21
    35fe:	6f 93       	push	r22
    3600:	7f 93       	push	r23
    3602:	8f 93       	push	r24
    3604:	9f 93       	push	r25
    3606:	af 93       	push	r26
    3608:	bf 93       	push	r27
    360a:	ef 93       	push	r30
    360c:	ff 93       	push	r31
    360e:	e0 91 ce 21 	lds	r30, 0x21CE
    3612:	f0 91 cf 21 	lds	r31, 0x21CF
    3616:	30 97       	sbiw	r30, 0x00	; 0
    3618:	29 f0       	breq	.+10     	; 0x3624 <__vector_73+0x3c>
    361a:	80 91 c4 22 	lds	r24, 0x22C4
    361e:	90 91 c5 22 	lds	r25, 0x22C5
    3622:	19 95       	eicall
    3624:	ff 91       	pop	r31
    3626:	ef 91       	pop	r30
    3628:	bf 91       	pop	r27
    362a:	af 91       	pop	r26
    362c:	9f 91       	pop	r25
    362e:	8f 91       	pop	r24
    3630:	7f 91       	pop	r23
    3632:	6f 91       	pop	r22
    3634:	5f 91       	pop	r21
    3636:	4f 91       	pop	r20
    3638:	3f 91       	pop	r19
    363a:	2f 91       	pop	r18
    363c:	0f 90       	pop	r0
    363e:	0b be       	out	0x3b, r0	; 59
    3640:	0f 90       	pop	r0
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	0f 90       	pop	r0
    3646:	1f 90       	pop	r1
    3648:	18 95       	reti

0000364a <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	11 24       	eor	r1, r1
    3654:	0b b6       	in	r0, 0x3b	; 59
    3656:	0f 92       	push	r0
    3658:	2f 93       	push	r18
    365a:	3f 93       	push	r19
    365c:	4f 93       	push	r20
    365e:	5f 93       	push	r21
    3660:	6f 93       	push	r22
    3662:	7f 93       	push	r23
    3664:	8f 93       	push	r24
    3666:	9f 93       	push	r25
    3668:	af 93       	push	r26
    366a:	bf 93       	push	r27
    366c:	ef 93       	push	r30
    366e:	ff 93       	push	r31
    3670:	e0 91 d0 21 	lds	r30, 0x21D0
    3674:	f0 91 d1 21 	lds	r31, 0x21D1
    3678:	30 97       	sbiw	r30, 0x00	; 0
    367a:	29 f0       	breq	.+10     	; 0x3686 <__vector_74+0x3c>
    367c:	80 91 c6 22 	lds	r24, 0x22C6
    3680:	90 91 c7 22 	lds	r25, 0x22C7
    3684:	19 95       	eicall
    3686:	ff 91       	pop	r31
    3688:	ef 91       	pop	r30
    368a:	bf 91       	pop	r27
    368c:	af 91       	pop	r26
    368e:	9f 91       	pop	r25
    3690:	8f 91       	pop	r24
    3692:	7f 91       	pop	r23
    3694:	6f 91       	pop	r22
    3696:	5f 91       	pop	r21
    3698:	4f 91       	pop	r20
    369a:	3f 91       	pop	r19
    369c:	2f 91       	pop	r18
    369e:	0f 90       	pop	r0
    36a0:	0b be       	out	0x3b, r0	; 59
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	0f 90       	pop	r0
    36a8:	1f 90       	pop	r1
    36aa:	18 95       	reti

000036ac <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    36ac:	1f 92       	push	r1
    36ae:	0f 92       	push	r0
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	0f 92       	push	r0
    36b4:	11 24       	eor	r1, r1
    36b6:	0b b6       	in	r0, 0x3b	; 59
    36b8:	0f 92       	push	r0
    36ba:	2f 93       	push	r18
    36bc:	3f 93       	push	r19
    36be:	4f 93       	push	r20
    36c0:	5f 93       	push	r21
    36c2:	6f 93       	push	r22
    36c4:	7f 93       	push	r23
    36c6:	8f 93       	push	r24
    36c8:	9f 93       	push	r25
    36ca:	af 93       	push	r26
    36cc:	bf 93       	push	r27
    36ce:	ef 93       	push	r30
    36d0:	ff 93       	push	r31
    36d2:	e0 91 d6 21 	lds	r30, 0x21D6
    36d6:	f0 91 d7 21 	lds	r31, 0x21D7
    36da:	30 97       	sbiw	r30, 0x00	; 0
    36dc:	29 f0       	breq	.+10     	; 0x36e8 <__vector_77+0x3c>
    36de:	80 91 cc 22 	lds	r24, 0x22CC
    36e2:	90 91 cd 22 	lds	r25, 0x22CD
    36e6:	19 95       	eicall
    36e8:	ff 91       	pop	r31
    36ea:	ef 91       	pop	r30
    36ec:	bf 91       	pop	r27
    36ee:	af 91       	pop	r26
    36f0:	9f 91       	pop	r25
    36f2:	8f 91       	pop	r24
    36f4:	7f 91       	pop	r23
    36f6:	6f 91       	pop	r22
    36f8:	5f 91       	pop	r21
    36fa:	4f 91       	pop	r20
    36fc:	3f 91       	pop	r19
    36fe:	2f 91       	pop	r18
    3700:	0f 90       	pop	r0
    3702:	0b be       	out	0x3b, r0	; 59
    3704:	0f 90       	pop	r0
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	0f 90       	pop	r0
    370a:	1f 90       	pop	r1
    370c:	18 95       	reti

0000370e <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    370e:	1f 92       	push	r1
    3710:	0f 92       	push	r0
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	0f 92       	push	r0
    3716:	11 24       	eor	r1, r1
    3718:	0b b6       	in	r0, 0x3b	; 59
    371a:	0f 92       	push	r0
    371c:	2f 93       	push	r18
    371e:	3f 93       	push	r19
    3720:	4f 93       	push	r20
    3722:	5f 93       	push	r21
    3724:	6f 93       	push	r22
    3726:	7f 93       	push	r23
    3728:	8f 93       	push	r24
    372a:	9f 93       	push	r25
    372c:	af 93       	push	r26
    372e:	bf 93       	push	r27
    3730:	ef 93       	push	r30
    3732:	ff 93       	push	r31
    3734:	e0 91 d8 21 	lds	r30, 0x21D8
    3738:	f0 91 d9 21 	lds	r31, 0x21D9
    373c:	30 97       	sbiw	r30, 0x00	; 0
    373e:	29 f0       	breq	.+10     	; 0x374a <__vector_78+0x3c>
    3740:	80 91 ce 22 	lds	r24, 0x22CE
    3744:	90 91 cf 22 	lds	r25, 0x22CF
    3748:	19 95       	eicall
    374a:	ff 91       	pop	r31
    374c:	ef 91       	pop	r30
    374e:	bf 91       	pop	r27
    3750:	af 91       	pop	r26
    3752:	9f 91       	pop	r25
    3754:	8f 91       	pop	r24
    3756:	7f 91       	pop	r23
    3758:	6f 91       	pop	r22
    375a:	5f 91       	pop	r21
    375c:	4f 91       	pop	r20
    375e:	3f 91       	pop	r19
    3760:	2f 91       	pop	r18
    3762:	0f 90       	pop	r0
    3764:	0b be       	out	0x3b, r0	; 59
    3766:	0f 90       	pop	r0
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	0f 90       	pop	r0
    376c:	1f 90       	pop	r1
    376e:	18 95       	reti

00003770 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3770:	1f 92       	push	r1
    3772:	0f 92       	push	r0
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	0f 92       	push	r0
    3778:	11 24       	eor	r1, r1
    377a:	0b b6       	in	r0, 0x3b	; 59
    377c:	0f 92       	push	r0
    377e:	2f 93       	push	r18
    3780:	3f 93       	push	r19
    3782:	4f 93       	push	r20
    3784:	5f 93       	push	r21
    3786:	6f 93       	push	r22
    3788:	7f 93       	push	r23
    378a:	8f 93       	push	r24
    378c:	9f 93       	push	r25
    378e:	af 93       	push	r26
    3790:	bf 93       	push	r27
    3792:	ef 93       	push	r30
    3794:	ff 93       	push	r31
    3796:	e0 91 da 21 	lds	r30, 0x21DA
    379a:	f0 91 db 21 	lds	r31, 0x21DB
    379e:	30 97       	sbiw	r30, 0x00	; 0
    37a0:	29 f0       	breq	.+10     	; 0x37ac <__vector_79+0x3c>
    37a2:	80 91 d0 22 	lds	r24, 0x22D0
    37a6:	90 91 d1 22 	lds	r25, 0x22D1
    37aa:	19 95       	eicall
    37ac:	ff 91       	pop	r31
    37ae:	ef 91       	pop	r30
    37b0:	bf 91       	pop	r27
    37b2:	af 91       	pop	r26
    37b4:	9f 91       	pop	r25
    37b6:	8f 91       	pop	r24
    37b8:	7f 91       	pop	r23
    37ba:	6f 91       	pop	r22
    37bc:	5f 91       	pop	r21
    37be:	4f 91       	pop	r20
    37c0:	3f 91       	pop	r19
    37c2:	2f 91       	pop	r18
    37c4:	0f 90       	pop	r0
    37c6:	0b be       	out	0x3b, r0	; 59
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	11 24       	eor	r1, r1
    37dc:	0b b6       	in	r0, 0x3b	; 59
    37de:	0f 92       	push	r0
    37e0:	2f 93       	push	r18
    37e2:	3f 93       	push	r19
    37e4:	4f 93       	push	r20
    37e6:	5f 93       	push	r21
    37e8:	6f 93       	push	r22
    37ea:	7f 93       	push	r23
    37ec:	8f 93       	push	r24
    37ee:	9f 93       	push	r25
    37f0:	af 93       	push	r26
    37f2:	bf 93       	push	r27
    37f4:	ef 93       	push	r30
    37f6:	ff 93       	push	r31
    37f8:	e0 91 dc 21 	lds	r30, 0x21DC
    37fc:	f0 91 dd 21 	lds	r31, 0x21DD
    3800:	30 97       	sbiw	r30, 0x00	; 0
    3802:	29 f0       	breq	.+10     	; 0x380e <__vector_80+0x3c>
    3804:	80 91 d2 22 	lds	r24, 0x22D2
    3808:	90 91 d3 22 	lds	r25, 0x22D3
    380c:	19 95       	eicall
    380e:	ff 91       	pop	r31
    3810:	ef 91       	pop	r30
    3812:	bf 91       	pop	r27
    3814:	af 91       	pop	r26
    3816:	9f 91       	pop	r25
    3818:	8f 91       	pop	r24
    381a:	7f 91       	pop	r23
    381c:	6f 91       	pop	r22
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	0f 90       	pop	r0
    3830:	1f 90       	pop	r1
    3832:	18 95       	reti

00003834 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3834:	1f 92       	push	r1
    3836:	0f 92       	push	r0
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	0f 92       	push	r0
    383c:	11 24       	eor	r1, r1
    383e:	0b b6       	in	r0, 0x3b	; 59
    3840:	0f 92       	push	r0
    3842:	2f 93       	push	r18
    3844:	3f 93       	push	r19
    3846:	4f 93       	push	r20
    3848:	5f 93       	push	r21
    384a:	6f 93       	push	r22
    384c:	7f 93       	push	r23
    384e:	8f 93       	push	r24
    3850:	9f 93       	push	r25
    3852:	af 93       	push	r26
    3854:	bf 93       	push	r27
    3856:	ef 93       	push	r30
    3858:	ff 93       	push	r31
    385a:	e0 91 de 21 	lds	r30, 0x21DE
    385e:	f0 91 df 21 	lds	r31, 0x21DF
    3862:	30 97       	sbiw	r30, 0x00	; 0
    3864:	29 f0       	breq	.+10     	; 0x3870 <__vector_81+0x3c>
    3866:	80 91 d4 22 	lds	r24, 0x22D4
    386a:	90 91 d5 22 	lds	r25, 0x22D5
    386e:	19 95       	eicall
    3870:	ff 91       	pop	r31
    3872:	ef 91       	pop	r30
    3874:	bf 91       	pop	r27
    3876:	af 91       	pop	r26
    3878:	9f 91       	pop	r25
    387a:	8f 91       	pop	r24
    387c:	7f 91       	pop	r23
    387e:	6f 91       	pop	r22
    3880:	5f 91       	pop	r21
    3882:	4f 91       	pop	r20
    3884:	3f 91       	pop	r19
    3886:	2f 91       	pop	r18
    3888:	0f 90       	pop	r0
    388a:	0b be       	out	0x3b, r0	; 59
    388c:	0f 90       	pop	r0
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	0f 90       	pop	r0
    3892:	1f 90       	pop	r1
    3894:	18 95       	reti

00003896 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3896:	1f 92       	push	r1
    3898:	0f 92       	push	r0
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	0f 92       	push	r0
    389e:	11 24       	eor	r1, r1
    38a0:	0b b6       	in	r0, 0x3b	; 59
    38a2:	0f 92       	push	r0
    38a4:	2f 93       	push	r18
    38a6:	3f 93       	push	r19
    38a8:	4f 93       	push	r20
    38aa:	5f 93       	push	r21
    38ac:	6f 93       	push	r22
    38ae:	7f 93       	push	r23
    38b0:	8f 93       	push	r24
    38b2:	9f 93       	push	r25
    38b4:	af 93       	push	r26
    38b6:	bf 93       	push	r27
    38b8:	ef 93       	push	r30
    38ba:	ff 93       	push	r31
    38bc:	e0 91 e0 21 	lds	r30, 0x21E0
    38c0:	f0 91 e1 21 	lds	r31, 0x21E1
    38c4:	30 97       	sbiw	r30, 0x00	; 0
    38c6:	29 f0       	breq	.+10     	; 0x38d2 <__vector_82+0x3c>
    38c8:	80 91 d6 22 	lds	r24, 0x22D6
    38cc:	90 91 d7 22 	lds	r25, 0x22D7
    38d0:	19 95       	eicall
    38d2:	ff 91       	pop	r31
    38d4:	ef 91       	pop	r30
    38d6:	bf 91       	pop	r27
    38d8:	af 91       	pop	r26
    38da:	9f 91       	pop	r25
    38dc:	8f 91       	pop	r24
    38de:	7f 91       	pop	r23
    38e0:	6f 91       	pop	r22
    38e2:	5f 91       	pop	r21
    38e4:	4f 91       	pop	r20
    38e6:	3f 91       	pop	r19
    38e8:	2f 91       	pop	r18
    38ea:	0f 90       	pop	r0
    38ec:	0b be       	out	0x3b, r0	; 59
    38ee:	0f 90       	pop	r0
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	0f 90       	pop	r0
    38f4:	1f 90       	pop	r1
    38f6:	18 95       	reti

000038f8 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    38f8:	1f 92       	push	r1
    38fa:	0f 92       	push	r0
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	0f 92       	push	r0
    3900:	11 24       	eor	r1, r1
    3902:	0b b6       	in	r0, 0x3b	; 59
    3904:	0f 92       	push	r0
    3906:	2f 93       	push	r18
    3908:	3f 93       	push	r19
    390a:	4f 93       	push	r20
    390c:	5f 93       	push	r21
    390e:	6f 93       	push	r22
    3910:	7f 93       	push	r23
    3912:	8f 93       	push	r24
    3914:	9f 93       	push	r25
    3916:	af 93       	push	r26
    3918:	bf 93       	push	r27
    391a:	ef 93       	push	r30
    391c:	ff 93       	push	r31
    391e:	e0 91 e2 21 	lds	r30, 0x21E2
    3922:	f0 91 e3 21 	lds	r31, 0x21E3
    3926:	30 97       	sbiw	r30, 0x00	; 0
    3928:	29 f0       	breq	.+10     	; 0x3934 <__vector_83+0x3c>
    392a:	80 91 d8 22 	lds	r24, 0x22D8
    392e:	90 91 d9 22 	lds	r25, 0x22D9
    3932:	19 95       	eicall
    3934:	ff 91       	pop	r31
    3936:	ef 91       	pop	r30
    3938:	bf 91       	pop	r27
    393a:	af 91       	pop	r26
    393c:	9f 91       	pop	r25
    393e:	8f 91       	pop	r24
    3940:	7f 91       	pop	r23
    3942:	6f 91       	pop	r22
    3944:	5f 91       	pop	r21
    3946:	4f 91       	pop	r20
    3948:	3f 91       	pop	r19
    394a:	2f 91       	pop	r18
    394c:	0f 90       	pop	r0
    394e:	0b be       	out	0x3b, r0	; 59
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    395a:	1f 92       	push	r1
    395c:	0f 92       	push	r0
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	0f 92       	push	r0
    3962:	11 24       	eor	r1, r1
    3964:	0b b6       	in	r0, 0x3b	; 59
    3966:	0f 92       	push	r0
    3968:	2f 93       	push	r18
    396a:	3f 93       	push	r19
    396c:	4f 93       	push	r20
    396e:	5f 93       	push	r21
    3970:	6f 93       	push	r22
    3972:	7f 93       	push	r23
    3974:	8f 93       	push	r24
    3976:	9f 93       	push	r25
    3978:	af 93       	push	r26
    397a:	bf 93       	push	r27
    397c:	ef 93       	push	r30
    397e:	ff 93       	push	r31
    3980:	e0 91 e4 21 	lds	r30, 0x21E4
    3984:	f0 91 e5 21 	lds	r31, 0x21E5
    3988:	30 97       	sbiw	r30, 0x00	; 0
    398a:	29 f0       	breq	.+10     	; 0x3996 <__vector_84+0x3c>
    398c:	80 91 da 22 	lds	r24, 0x22DA
    3990:	90 91 db 22 	lds	r25, 0x22DB
    3994:	19 95       	eicall
    3996:	ff 91       	pop	r31
    3998:	ef 91       	pop	r30
    399a:	bf 91       	pop	r27
    399c:	af 91       	pop	r26
    399e:	9f 91       	pop	r25
    39a0:	8f 91       	pop	r24
    39a2:	7f 91       	pop	r23
    39a4:	6f 91       	pop	r22
    39a6:	5f 91       	pop	r21
    39a8:	4f 91       	pop	r20
    39aa:	3f 91       	pop	r19
    39ac:	2f 91       	pop	r18
    39ae:	0f 90       	pop	r0
    39b0:	0b be       	out	0x3b, r0	; 59
    39b2:	0f 90       	pop	r0
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	0f 90       	pop	r0
    39b8:	1f 90       	pop	r1
    39ba:	18 95       	reti

000039bc <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    39bc:	1f 92       	push	r1
    39be:	0f 92       	push	r0
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	0f 92       	push	r0
    39c4:	11 24       	eor	r1, r1
    39c6:	0b b6       	in	r0, 0x3b	; 59
    39c8:	0f 92       	push	r0
    39ca:	2f 93       	push	r18
    39cc:	3f 93       	push	r19
    39ce:	4f 93       	push	r20
    39d0:	5f 93       	push	r21
    39d2:	6f 93       	push	r22
    39d4:	7f 93       	push	r23
    39d6:	8f 93       	push	r24
    39d8:	9f 93       	push	r25
    39da:	af 93       	push	r26
    39dc:	bf 93       	push	r27
    39de:	ef 93       	push	r30
    39e0:	ff 93       	push	r31
    39e2:	e0 91 e6 21 	lds	r30, 0x21E6
    39e6:	f0 91 e7 21 	lds	r31, 0x21E7
    39ea:	30 97       	sbiw	r30, 0x00	; 0
    39ec:	29 f0       	breq	.+10     	; 0x39f8 <__vector_85+0x3c>
    39ee:	80 91 dc 22 	lds	r24, 0x22DC
    39f2:	90 91 dd 22 	lds	r25, 0x22DD
    39f6:	19 95       	eicall
    39f8:	ff 91       	pop	r31
    39fa:	ef 91       	pop	r30
    39fc:	bf 91       	pop	r27
    39fe:	af 91       	pop	r26
    3a00:	9f 91       	pop	r25
    3a02:	8f 91       	pop	r24
    3a04:	7f 91       	pop	r23
    3a06:	6f 91       	pop	r22
    3a08:	5f 91       	pop	r21
    3a0a:	4f 91       	pop	r20
    3a0c:	3f 91       	pop	r19
    3a0e:	2f 91       	pop	r18
    3a10:	0f 90       	pop	r0
    3a12:	0b be       	out	0x3b, r0	; 59
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti

00003a1e <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	0b b6       	in	r0, 0x3b	; 59
    3a2a:	0f 92       	push	r0
    3a2c:	2f 93       	push	r18
    3a2e:	3f 93       	push	r19
    3a30:	4f 93       	push	r20
    3a32:	5f 93       	push	r21
    3a34:	6f 93       	push	r22
    3a36:	7f 93       	push	r23
    3a38:	8f 93       	push	r24
    3a3a:	9f 93       	push	r25
    3a3c:	af 93       	push	r26
    3a3e:	bf 93       	push	r27
    3a40:	ef 93       	push	r30
    3a42:	ff 93       	push	r31
    3a44:	e0 91 e8 21 	lds	r30, 0x21E8
    3a48:	f0 91 e9 21 	lds	r31, 0x21E9
    3a4c:	30 97       	sbiw	r30, 0x00	; 0
    3a4e:	29 f0       	breq	.+10     	; 0x3a5a <__vector_86+0x3c>
    3a50:	80 91 de 22 	lds	r24, 0x22DE
    3a54:	90 91 df 22 	lds	r25, 0x22DF
    3a58:	19 95       	eicall
    3a5a:	ff 91       	pop	r31
    3a5c:	ef 91       	pop	r30
    3a5e:	bf 91       	pop	r27
    3a60:	af 91       	pop	r26
    3a62:	9f 91       	pop	r25
    3a64:	8f 91       	pop	r24
    3a66:	7f 91       	pop	r23
    3a68:	6f 91       	pop	r22
    3a6a:	5f 91       	pop	r21
    3a6c:	4f 91       	pop	r20
    3a6e:	3f 91       	pop	r19
    3a70:	2f 91       	pop	r18
    3a72:	0f 90       	pop	r0
    3a74:	0b be       	out	0x3b, r0	; 59
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	0f 90       	pop	r0
    3a7c:	1f 90       	pop	r1
    3a7e:	18 95       	reti

00003a80 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3a80:	1f 92       	push	r1
    3a82:	0f 92       	push	r0
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	0f 92       	push	r0
    3a88:	11 24       	eor	r1, r1
    3a8a:	0b b6       	in	r0, 0x3b	; 59
    3a8c:	0f 92       	push	r0
    3a8e:	2f 93       	push	r18
    3a90:	3f 93       	push	r19
    3a92:	4f 93       	push	r20
    3a94:	5f 93       	push	r21
    3a96:	6f 93       	push	r22
    3a98:	7f 93       	push	r23
    3a9a:	8f 93       	push	r24
    3a9c:	9f 93       	push	r25
    3a9e:	af 93       	push	r26
    3aa0:	bf 93       	push	r27
    3aa2:	ef 93       	push	r30
    3aa4:	ff 93       	push	r31
    3aa6:	e0 91 ea 21 	lds	r30, 0x21EA
    3aaa:	f0 91 eb 21 	lds	r31, 0x21EB
    3aae:	30 97       	sbiw	r30, 0x00	; 0
    3ab0:	29 f0       	breq	.+10     	; 0x3abc <__vector_87+0x3c>
    3ab2:	80 91 e0 22 	lds	r24, 0x22E0
    3ab6:	90 91 e1 22 	lds	r25, 0x22E1
    3aba:	19 95       	eicall
    3abc:	ff 91       	pop	r31
    3abe:	ef 91       	pop	r30
    3ac0:	bf 91       	pop	r27
    3ac2:	af 91       	pop	r26
    3ac4:	9f 91       	pop	r25
    3ac6:	8f 91       	pop	r24
    3ac8:	7f 91       	pop	r23
    3aca:	6f 91       	pop	r22
    3acc:	5f 91       	pop	r21
    3ace:	4f 91       	pop	r20
    3ad0:	3f 91       	pop	r19
    3ad2:	2f 91       	pop	r18
    3ad4:	0f 90       	pop	r0
    3ad6:	0b be       	out	0x3b, r0	; 59
    3ad8:	0f 90       	pop	r0
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	0f 90       	pop	r0
    3ade:	1f 90       	pop	r1
    3ae0:	18 95       	reti

00003ae2 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	0b b6       	in	r0, 0x3b	; 59
    3aee:	0f 92       	push	r0
    3af0:	2f 93       	push	r18
    3af2:	3f 93       	push	r19
    3af4:	4f 93       	push	r20
    3af6:	5f 93       	push	r21
    3af8:	6f 93       	push	r22
    3afa:	7f 93       	push	r23
    3afc:	8f 93       	push	r24
    3afe:	9f 93       	push	r25
    3b00:	af 93       	push	r26
    3b02:	bf 93       	push	r27
    3b04:	ef 93       	push	r30
    3b06:	ff 93       	push	r31
    3b08:	e0 91 ec 21 	lds	r30, 0x21EC
    3b0c:	f0 91 ed 21 	lds	r31, 0x21ED
    3b10:	30 97       	sbiw	r30, 0x00	; 0
    3b12:	29 f0       	breq	.+10     	; 0x3b1e <__vector_88+0x3c>
    3b14:	80 91 e2 22 	lds	r24, 0x22E2
    3b18:	90 91 e3 22 	lds	r25, 0x22E3
    3b1c:	19 95       	eicall
    3b1e:	ff 91       	pop	r31
    3b20:	ef 91       	pop	r30
    3b22:	bf 91       	pop	r27
    3b24:	af 91       	pop	r26
    3b26:	9f 91       	pop	r25
    3b28:	8f 91       	pop	r24
    3b2a:	7f 91       	pop	r23
    3b2c:	6f 91       	pop	r22
    3b2e:	5f 91       	pop	r21
    3b30:	4f 91       	pop	r20
    3b32:	3f 91       	pop	r19
    3b34:	2f 91       	pop	r18
    3b36:	0f 90       	pop	r0
    3b38:	0b be       	out	0x3b, r0	; 59
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	0f 90       	pop	r0
    3b40:	1f 90       	pop	r1
    3b42:	18 95       	reti

00003b44 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3b44:	1f 92       	push	r1
    3b46:	0f 92       	push	r0
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	0f 92       	push	r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	0b b6       	in	r0, 0x3b	; 59
    3b50:	0f 92       	push	r0
    3b52:	2f 93       	push	r18
    3b54:	3f 93       	push	r19
    3b56:	4f 93       	push	r20
    3b58:	5f 93       	push	r21
    3b5a:	6f 93       	push	r22
    3b5c:	7f 93       	push	r23
    3b5e:	8f 93       	push	r24
    3b60:	9f 93       	push	r25
    3b62:	af 93       	push	r26
    3b64:	bf 93       	push	r27
    3b66:	ef 93       	push	r30
    3b68:	ff 93       	push	r31
    3b6a:	e0 91 ee 21 	lds	r30, 0x21EE
    3b6e:	f0 91 ef 21 	lds	r31, 0x21EF
    3b72:	30 97       	sbiw	r30, 0x00	; 0
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <__vector_89+0x3c>
    3b76:	80 91 e4 22 	lds	r24, 0x22E4
    3b7a:	90 91 e5 22 	lds	r25, 0x22E5
    3b7e:	19 95       	eicall
    3b80:	ff 91       	pop	r31
    3b82:	ef 91       	pop	r30
    3b84:	bf 91       	pop	r27
    3b86:	af 91       	pop	r26
    3b88:	9f 91       	pop	r25
    3b8a:	8f 91       	pop	r24
    3b8c:	7f 91       	pop	r23
    3b8e:	6f 91       	pop	r22
    3b90:	5f 91       	pop	r21
    3b92:	4f 91       	pop	r20
    3b94:	3f 91       	pop	r19
    3b96:	2f 91       	pop	r18
    3b98:	0f 90       	pop	r0
    3b9a:	0b be       	out	0x3b, r0	; 59
    3b9c:	0f 90       	pop	r0
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	0f 90       	pop	r0
    3ba2:	1f 90       	pop	r1
    3ba4:	18 95       	reti

00003ba6 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3ba6:	1f 92       	push	r1
    3ba8:	0f 92       	push	r0
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	0f 92       	push	r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	0b b6       	in	r0, 0x3b	; 59
    3bb2:	0f 92       	push	r0
    3bb4:	2f 93       	push	r18
    3bb6:	3f 93       	push	r19
    3bb8:	4f 93       	push	r20
    3bba:	5f 93       	push	r21
    3bbc:	6f 93       	push	r22
    3bbe:	7f 93       	push	r23
    3bc0:	8f 93       	push	r24
    3bc2:	9f 93       	push	r25
    3bc4:	af 93       	push	r26
    3bc6:	bf 93       	push	r27
    3bc8:	ef 93       	push	r30
    3bca:	ff 93       	push	r31
    3bcc:	e0 91 f0 21 	lds	r30, 0x21F0
    3bd0:	f0 91 f1 21 	lds	r31, 0x21F1
    3bd4:	30 97       	sbiw	r30, 0x00	; 0
    3bd6:	29 f0       	breq	.+10     	; 0x3be2 <__vector_90+0x3c>
    3bd8:	80 91 e6 22 	lds	r24, 0x22E6
    3bdc:	90 91 e7 22 	lds	r25, 0x22E7
    3be0:	19 95       	eicall
    3be2:	ff 91       	pop	r31
    3be4:	ef 91       	pop	r30
    3be6:	bf 91       	pop	r27
    3be8:	af 91       	pop	r26
    3bea:	9f 91       	pop	r25
    3bec:	8f 91       	pop	r24
    3bee:	7f 91       	pop	r23
    3bf0:	6f 91       	pop	r22
    3bf2:	5f 91       	pop	r21
    3bf4:	4f 91       	pop	r20
    3bf6:	3f 91       	pop	r19
    3bf8:	2f 91       	pop	r18
    3bfa:	0f 90       	pop	r0
    3bfc:	0b be       	out	0x3b, r0	; 59
    3bfe:	0f 90       	pop	r0
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	0f 90       	pop	r0
    3c04:	1f 90       	pop	r1
    3c06:	18 95       	reti

00003c08 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3c08:	1f 92       	push	r1
    3c0a:	0f 92       	push	r0
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	0f 92       	push	r0
    3c10:	11 24       	eor	r1, r1
    3c12:	0b b6       	in	r0, 0x3b	; 59
    3c14:	0f 92       	push	r0
    3c16:	2f 93       	push	r18
    3c18:	3f 93       	push	r19
    3c1a:	4f 93       	push	r20
    3c1c:	5f 93       	push	r21
    3c1e:	6f 93       	push	r22
    3c20:	7f 93       	push	r23
    3c22:	8f 93       	push	r24
    3c24:	9f 93       	push	r25
    3c26:	af 93       	push	r26
    3c28:	bf 93       	push	r27
    3c2a:	ef 93       	push	r30
    3c2c:	ff 93       	push	r31
    3c2e:	e0 91 f2 21 	lds	r30, 0x21F2
    3c32:	f0 91 f3 21 	lds	r31, 0x21F3
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	29 f0       	breq	.+10     	; 0x3c44 <__vector_91+0x3c>
    3c3a:	80 91 e8 22 	lds	r24, 0x22E8
    3c3e:	90 91 e9 22 	lds	r25, 0x22E9
    3c42:	19 95       	eicall
    3c44:	ff 91       	pop	r31
    3c46:	ef 91       	pop	r30
    3c48:	bf 91       	pop	r27
    3c4a:	af 91       	pop	r26
    3c4c:	9f 91       	pop	r25
    3c4e:	8f 91       	pop	r24
    3c50:	7f 91       	pop	r23
    3c52:	6f 91       	pop	r22
    3c54:	5f 91       	pop	r21
    3c56:	4f 91       	pop	r20
    3c58:	3f 91       	pop	r19
    3c5a:	2f 91       	pop	r18
    3c5c:	0f 90       	pop	r0
    3c5e:	0b be       	out	0x3b, r0	; 59
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f 90       	pop	r0
    3c66:	1f 90       	pop	r1
    3c68:	18 95       	reti

00003c6a <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3c6a:	1f 92       	push	r1
    3c6c:	0f 92       	push	r0
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	0f 92       	push	r0
    3c72:	11 24       	eor	r1, r1
    3c74:	0b b6       	in	r0, 0x3b	; 59
    3c76:	0f 92       	push	r0
    3c78:	2f 93       	push	r18
    3c7a:	3f 93       	push	r19
    3c7c:	4f 93       	push	r20
    3c7e:	5f 93       	push	r21
    3c80:	6f 93       	push	r22
    3c82:	7f 93       	push	r23
    3c84:	8f 93       	push	r24
    3c86:	9f 93       	push	r25
    3c88:	af 93       	push	r26
    3c8a:	bf 93       	push	r27
    3c8c:	ef 93       	push	r30
    3c8e:	ff 93       	push	r31
    3c90:	e0 91 f4 21 	lds	r30, 0x21F4
    3c94:	f0 91 f5 21 	lds	r31, 0x21F5
    3c98:	30 97       	sbiw	r30, 0x00	; 0
    3c9a:	29 f0       	breq	.+10     	; 0x3ca6 <__vector_92+0x3c>
    3c9c:	80 91 ea 22 	lds	r24, 0x22EA
    3ca0:	90 91 eb 22 	lds	r25, 0x22EB
    3ca4:	19 95       	eicall
    3ca6:	ff 91       	pop	r31
    3ca8:	ef 91       	pop	r30
    3caa:	bf 91       	pop	r27
    3cac:	af 91       	pop	r26
    3cae:	9f 91       	pop	r25
    3cb0:	8f 91       	pop	r24
    3cb2:	7f 91       	pop	r23
    3cb4:	6f 91       	pop	r22
    3cb6:	5f 91       	pop	r21
    3cb8:	4f 91       	pop	r20
    3cba:	3f 91       	pop	r19
    3cbc:	2f 91       	pop	r18
    3cbe:	0f 90       	pop	r0
    3cc0:	0b be       	out	0x3b, r0	; 59
    3cc2:	0f 90       	pop	r0
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	0f 90       	pop	r0
    3cc8:	1f 90       	pop	r1
    3cca:	18 95       	reti

00003ccc <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3ccc:	1f 92       	push	r1
    3cce:	0f 92       	push	r0
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	0f 92       	push	r0
    3cd4:	11 24       	eor	r1, r1
    3cd6:	0b b6       	in	r0, 0x3b	; 59
    3cd8:	0f 92       	push	r0
    3cda:	2f 93       	push	r18
    3cdc:	3f 93       	push	r19
    3cde:	4f 93       	push	r20
    3ce0:	5f 93       	push	r21
    3ce2:	6f 93       	push	r22
    3ce4:	7f 93       	push	r23
    3ce6:	8f 93       	push	r24
    3ce8:	9f 93       	push	r25
    3cea:	af 93       	push	r26
    3cec:	bf 93       	push	r27
    3cee:	ef 93       	push	r30
    3cf0:	ff 93       	push	r31
    3cf2:	e0 91 f6 21 	lds	r30, 0x21F6
    3cf6:	f0 91 f7 21 	lds	r31, 0x21F7
    3cfa:	30 97       	sbiw	r30, 0x00	; 0
    3cfc:	29 f0       	breq	.+10     	; 0x3d08 <__vector_93+0x3c>
    3cfe:	80 91 ec 22 	lds	r24, 0x22EC
    3d02:	90 91 ed 22 	lds	r25, 0x22ED
    3d06:	19 95       	eicall
    3d08:	ff 91       	pop	r31
    3d0a:	ef 91       	pop	r30
    3d0c:	bf 91       	pop	r27
    3d0e:	af 91       	pop	r26
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	0f 90       	pop	r0
    3d22:	0b be       	out	0x3b, r0	; 59
    3d24:	0f 90       	pop	r0
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	0f 90       	pop	r0
    3d2a:	1f 90       	pop	r1
    3d2c:	18 95       	reti

00003d2e <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3d2e:	1f 92       	push	r1
    3d30:	0f 92       	push	r0
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	0f 92       	push	r0
    3d36:	11 24       	eor	r1, r1
    3d38:	0b b6       	in	r0, 0x3b	; 59
    3d3a:	0f 92       	push	r0
    3d3c:	2f 93       	push	r18
    3d3e:	3f 93       	push	r19
    3d40:	4f 93       	push	r20
    3d42:	5f 93       	push	r21
    3d44:	6f 93       	push	r22
    3d46:	7f 93       	push	r23
    3d48:	8f 93       	push	r24
    3d4a:	9f 93       	push	r25
    3d4c:	af 93       	push	r26
    3d4e:	bf 93       	push	r27
    3d50:	ef 93       	push	r30
    3d52:	ff 93       	push	r31
    3d54:	e0 91 0c 22 	lds	r30, 0x220C
    3d58:	f0 91 0d 22 	lds	r31, 0x220D
    3d5c:	30 97       	sbiw	r30, 0x00	; 0
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <__vector_104+0x3c>
    3d60:	80 91 02 23 	lds	r24, 0x2302
    3d64:	90 91 03 23 	lds	r25, 0x2303
    3d68:	19 95       	eicall
    3d6a:	ff 91       	pop	r31
    3d6c:	ef 91       	pop	r30
    3d6e:	bf 91       	pop	r27
    3d70:	af 91       	pop	r26
    3d72:	9f 91       	pop	r25
    3d74:	8f 91       	pop	r24
    3d76:	7f 91       	pop	r23
    3d78:	6f 91       	pop	r22
    3d7a:	5f 91       	pop	r21
    3d7c:	4f 91       	pop	r20
    3d7e:	3f 91       	pop	r19
    3d80:	2f 91       	pop	r18
    3d82:	0f 90       	pop	r0
    3d84:	0b be       	out	0x3b, r0	; 59
    3d86:	0f 90       	pop	r0
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	0f 90       	pop	r0
    3d8c:	1f 90       	pop	r1
    3d8e:	18 95       	reti

00003d90 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3d90:	1f 92       	push	r1
    3d92:	0f 92       	push	r0
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	0f 92       	push	r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	0b b6       	in	r0, 0x3b	; 59
    3d9c:	0f 92       	push	r0
    3d9e:	2f 93       	push	r18
    3da0:	3f 93       	push	r19
    3da2:	4f 93       	push	r20
    3da4:	5f 93       	push	r21
    3da6:	6f 93       	push	r22
    3da8:	7f 93       	push	r23
    3daa:	8f 93       	push	r24
    3dac:	9f 93       	push	r25
    3dae:	af 93       	push	r26
    3db0:	bf 93       	push	r27
    3db2:	ef 93       	push	r30
    3db4:	ff 93       	push	r31
    3db6:	e0 91 0e 22 	lds	r30, 0x220E
    3dba:	f0 91 0f 22 	lds	r31, 0x220F
    3dbe:	30 97       	sbiw	r30, 0x00	; 0
    3dc0:	29 f0       	breq	.+10     	; 0x3dcc <__vector_105+0x3c>
    3dc2:	80 91 04 23 	lds	r24, 0x2304
    3dc6:	90 91 05 23 	lds	r25, 0x2305
    3dca:	19 95       	eicall
    3dcc:	ff 91       	pop	r31
    3dce:	ef 91       	pop	r30
    3dd0:	bf 91       	pop	r27
    3dd2:	af 91       	pop	r26
    3dd4:	9f 91       	pop	r25
    3dd6:	8f 91       	pop	r24
    3dd8:	7f 91       	pop	r23
    3dda:	6f 91       	pop	r22
    3ddc:	5f 91       	pop	r21
    3dde:	4f 91       	pop	r20
    3de0:	3f 91       	pop	r19
    3de2:	2f 91       	pop	r18
    3de4:	0f 90       	pop	r0
    3de6:	0b be       	out	0x3b, r0	; 59
    3de8:	0f 90       	pop	r0
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	0f 90       	pop	r0
    3dee:	1f 90       	pop	r1
    3df0:	18 95       	reti

00003df2 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3df2:	1f 92       	push	r1
    3df4:	0f 92       	push	r0
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	0f 92       	push	r0
    3dfa:	11 24       	eor	r1, r1
    3dfc:	0b b6       	in	r0, 0x3b	; 59
    3dfe:	0f 92       	push	r0
    3e00:	2f 93       	push	r18
    3e02:	3f 93       	push	r19
    3e04:	4f 93       	push	r20
    3e06:	5f 93       	push	r21
    3e08:	6f 93       	push	r22
    3e0a:	7f 93       	push	r23
    3e0c:	8f 93       	push	r24
    3e0e:	9f 93       	push	r25
    3e10:	af 93       	push	r26
    3e12:	bf 93       	push	r27
    3e14:	ef 93       	push	r30
    3e16:	ff 93       	push	r31
    3e18:	e0 91 14 22 	lds	r30, 0x2214
    3e1c:	f0 91 15 22 	lds	r31, 0x2215
    3e20:	30 97       	sbiw	r30, 0x00	; 0
    3e22:	29 f0       	breq	.+10     	; 0x3e2e <__vector_108+0x3c>
    3e24:	80 91 0a 23 	lds	r24, 0x230A
    3e28:	90 91 0b 23 	lds	r25, 0x230B
    3e2c:	19 95       	eicall
    3e2e:	ff 91       	pop	r31
    3e30:	ef 91       	pop	r30
    3e32:	bf 91       	pop	r27
    3e34:	af 91       	pop	r26
    3e36:	9f 91       	pop	r25
    3e38:	8f 91       	pop	r24
    3e3a:	7f 91       	pop	r23
    3e3c:	6f 91       	pop	r22
    3e3e:	5f 91       	pop	r21
    3e40:	4f 91       	pop	r20
    3e42:	3f 91       	pop	r19
    3e44:	2f 91       	pop	r18
    3e46:	0f 90       	pop	r0
    3e48:	0b be       	out	0x3b, r0	; 59
    3e4a:	0f 90       	pop	r0
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	0f 90       	pop	r0
    3e50:	1f 90       	pop	r1
    3e52:	18 95       	reti

00003e54 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    3e54:	1f 92       	push	r1
    3e56:	0f 92       	push	r0
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	0f 92       	push	r0
    3e5c:	11 24       	eor	r1, r1
    3e5e:	0b b6       	in	r0, 0x3b	; 59
    3e60:	0f 92       	push	r0
    3e62:	2f 93       	push	r18
    3e64:	3f 93       	push	r19
    3e66:	4f 93       	push	r20
    3e68:	5f 93       	push	r21
    3e6a:	6f 93       	push	r22
    3e6c:	7f 93       	push	r23
    3e6e:	8f 93       	push	r24
    3e70:	9f 93       	push	r25
    3e72:	af 93       	push	r26
    3e74:	bf 93       	push	r27
    3e76:	ef 93       	push	r30
    3e78:	ff 93       	push	r31
    3e7a:	e0 91 16 22 	lds	r30, 0x2216
    3e7e:	f0 91 17 22 	lds	r31, 0x2217
    3e82:	30 97       	sbiw	r30, 0x00	; 0
    3e84:	29 f0       	breq	.+10     	; 0x3e90 <__vector_109+0x3c>
    3e86:	80 91 0c 23 	lds	r24, 0x230C
    3e8a:	90 91 0d 23 	lds	r25, 0x230D
    3e8e:	19 95       	eicall
    3e90:	ff 91       	pop	r31
    3e92:	ef 91       	pop	r30
    3e94:	bf 91       	pop	r27
    3e96:	af 91       	pop	r26
    3e98:	9f 91       	pop	r25
    3e9a:	8f 91       	pop	r24
    3e9c:	7f 91       	pop	r23
    3e9e:	6f 91       	pop	r22
    3ea0:	5f 91       	pop	r21
    3ea2:	4f 91       	pop	r20
    3ea4:	3f 91       	pop	r19
    3ea6:	2f 91       	pop	r18
    3ea8:	0f 90       	pop	r0
    3eaa:	0b be       	out	0x3b, r0	; 59
    3eac:	0f 90       	pop	r0
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	0f 90       	pop	r0
    3eb2:	1f 90       	pop	r1
    3eb4:	18 95       	reti

00003eb6 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3eb6:	1f 92       	push	r1
    3eb8:	0f 92       	push	r0
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	0f 92       	push	r0
    3ebe:	11 24       	eor	r1, r1
    3ec0:	0b b6       	in	r0, 0x3b	; 59
    3ec2:	0f 92       	push	r0
    3ec4:	2f 93       	push	r18
    3ec6:	3f 93       	push	r19
    3ec8:	4f 93       	push	r20
    3eca:	5f 93       	push	r21
    3ecc:	6f 93       	push	r22
    3ece:	7f 93       	push	r23
    3ed0:	8f 93       	push	r24
    3ed2:	9f 93       	push	r25
    3ed4:	af 93       	push	r26
    3ed6:	bf 93       	push	r27
    3ed8:	ef 93       	push	r30
    3eda:	ff 93       	push	r31
    3edc:	e0 91 18 22 	lds	r30, 0x2218
    3ee0:	f0 91 19 22 	lds	r31, 0x2219
    3ee4:	30 97       	sbiw	r30, 0x00	; 0
    3ee6:	29 f0       	breq	.+10     	; 0x3ef2 <__vector_110+0x3c>
    3ee8:	80 91 0e 23 	lds	r24, 0x230E
    3eec:	90 91 0f 23 	lds	r25, 0x230F
    3ef0:	19 95       	eicall
    3ef2:	ff 91       	pop	r31
    3ef4:	ef 91       	pop	r30
    3ef6:	bf 91       	pop	r27
    3ef8:	af 91       	pop	r26
    3efa:	9f 91       	pop	r25
    3efc:	8f 91       	pop	r24
    3efe:	7f 91       	pop	r23
    3f00:	6f 91       	pop	r22
    3f02:	5f 91       	pop	r21
    3f04:	4f 91       	pop	r20
    3f06:	3f 91       	pop	r19
    3f08:	2f 91       	pop	r18
    3f0a:	0f 90       	pop	r0
    3f0c:	0b be       	out	0x3b, r0	; 59
    3f0e:	0f 90       	pop	r0
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	0f 90       	pop	r0
    3f14:	1f 90       	pop	r1
    3f16:	18 95       	reti

00003f18 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3f18:	1f 92       	push	r1
    3f1a:	0f 92       	push	r0
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	0f 92       	push	r0
    3f20:	11 24       	eor	r1, r1
    3f22:	0b b6       	in	r0, 0x3b	; 59
    3f24:	0f 92       	push	r0
    3f26:	2f 93       	push	r18
    3f28:	3f 93       	push	r19
    3f2a:	4f 93       	push	r20
    3f2c:	5f 93       	push	r21
    3f2e:	6f 93       	push	r22
    3f30:	7f 93       	push	r23
    3f32:	8f 93       	push	r24
    3f34:	9f 93       	push	r25
    3f36:	af 93       	push	r26
    3f38:	bf 93       	push	r27
    3f3a:	ef 93       	push	r30
    3f3c:	ff 93       	push	r31
    3f3e:	e0 91 1a 22 	lds	r30, 0x221A
    3f42:	f0 91 1b 22 	lds	r31, 0x221B
    3f46:	30 97       	sbiw	r30, 0x00	; 0
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <__vector_111+0x3c>
    3f4a:	80 91 10 23 	lds	r24, 0x2310
    3f4e:	90 91 11 23 	lds	r25, 0x2311
    3f52:	19 95       	eicall
    3f54:	ff 91       	pop	r31
    3f56:	ef 91       	pop	r30
    3f58:	bf 91       	pop	r27
    3f5a:	af 91       	pop	r26
    3f5c:	9f 91       	pop	r25
    3f5e:	8f 91       	pop	r24
    3f60:	7f 91       	pop	r23
    3f62:	6f 91       	pop	r22
    3f64:	5f 91       	pop	r21
    3f66:	4f 91       	pop	r20
    3f68:	3f 91       	pop	r19
    3f6a:	2f 91       	pop	r18
    3f6c:	0f 90       	pop	r0
    3f6e:	0b be       	out	0x3b, r0	; 59
    3f70:	0f 90       	pop	r0
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	0f 90       	pop	r0
    3f76:	1f 90       	pop	r1
    3f78:	18 95       	reti

00003f7a <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3f7a:	1f 92       	push	r1
    3f7c:	0f 92       	push	r0
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	0f 92       	push	r0
    3f82:	11 24       	eor	r1, r1
    3f84:	0b b6       	in	r0, 0x3b	; 59
    3f86:	0f 92       	push	r0
    3f88:	2f 93       	push	r18
    3f8a:	3f 93       	push	r19
    3f8c:	4f 93       	push	r20
    3f8e:	5f 93       	push	r21
    3f90:	6f 93       	push	r22
    3f92:	7f 93       	push	r23
    3f94:	8f 93       	push	r24
    3f96:	9f 93       	push	r25
    3f98:	af 93       	push	r26
    3f9a:	bf 93       	push	r27
    3f9c:	ef 93       	push	r30
    3f9e:	ff 93       	push	r31
    3fa0:	e0 91 1c 22 	lds	r30, 0x221C
    3fa4:	f0 91 1d 22 	lds	r31, 0x221D
    3fa8:	30 97       	sbiw	r30, 0x00	; 0
    3faa:	29 f0       	breq	.+10     	; 0x3fb6 <__vector_112+0x3c>
    3fac:	80 91 12 23 	lds	r24, 0x2312
    3fb0:	90 91 13 23 	lds	r25, 0x2313
    3fb4:	19 95       	eicall
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	9f 91       	pop	r25
    3fc0:	8f 91       	pop	r24
    3fc2:	7f 91       	pop	r23
    3fc4:	6f 91       	pop	r22
    3fc6:	5f 91       	pop	r21
    3fc8:	4f 91       	pop	r20
    3fca:	3f 91       	pop	r19
    3fcc:	2f 91       	pop	r18
    3fce:	0f 90       	pop	r0
    3fd0:	0b be       	out	0x3b, r0	; 59
    3fd2:	0f 90       	pop	r0
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	0f 90       	pop	r0
    3fd8:	1f 90       	pop	r1
    3fda:	18 95       	reti

00003fdc <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3fdc:	1f 92       	push	r1
    3fde:	0f 92       	push	r0
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	0f 92       	push	r0
    3fe4:	11 24       	eor	r1, r1
    3fe6:	0b b6       	in	r0, 0x3b	; 59
    3fe8:	0f 92       	push	r0
    3fea:	2f 93       	push	r18
    3fec:	3f 93       	push	r19
    3fee:	4f 93       	push	r20
    3ff0:	5f 93       	push	r21
    3ff2:	6f 93       	push	r22
    3ff4:	7f 93       	push	r23
    3ff6:	8f 93       	push	r24
    3ff8:	9f 93       	push	r25
    3ffa:	af 93       	push	r26
    3ffc:	bf 93       	push	r27
    3ffe:	ef 93       	push	r30
    4000:	ff 93       	push	r31
    4002:	e0 91 1e 22 	lds	r30, 0x221E
    4006:	f0 91 1f 22 	lds	r31, 0x221F
    400a:	30 97       	sbiw	r30, 0x00	; 0
    400c:	29 f0       	breq	.+10     	; 0x4018 <__stack+0x19>
    400e:	80 91 14 23 	lds	r24, 0x2314
    4012:	90 91 15 23 	lds	r25, 0x2315
    4016:	19 95       	eicall
    4018:	ff 91       	pop	r31
    401a:	ef 91       	pop	r30
    401c:	bf 91       	pop	r27
    401e:	af 91       	pop	r26
    4020:	9f 91       	pop	r25
    4022:	8f 91       	pop	r24
    4024:	7f 91       	pop	r23
    4026:	6f 91       	pop	r22
    4028:	5f 91       	pop	r21
    402a:	4f 91       	pop	r20
    402c:	3f 91       	pop	r19
    402e:	2f 91       	pop	r18
    4030:	0f 90       	pop	r0
    4032:	0b be       	out	0x3b, r0	; 59
    4034:	0f 90       	pop	r0
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	0f 90       	pop	r0
    403a:	1f 90       	pop	r1
    403c:	18 95       	reti

0000403e <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    403e:	1f 92       	push	r1
    4040:	0f 92       	push	r0
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	0f 92       	push	r0
    4046:	11 24       	eor	r1, r1
    4048:	0b b6       	in	r0, 0x3b	; 59
    404a:	0f 92       	push	r0
    404c:	2f 93       	push	r18
    404e:	3f 93       	push	r19
    4050:	4f 93       	push	r20
    4052:	5f 93       	push	r21
    4054:	6f 93       	push	r22
    4056:	7f 93       	push	r23
    4058:	8f 93       	push	r24
    405a:	9f 93       	push	r25
    405c:	af 93       	push	r26
    405e:	bf 93       	push	r27
    4060:	ef 93       	push	r30
    4062:	ff 93       	push	r31
    4064:	e0 91 2a 22 	lds	r30, 0x222A
    4068:	f0 91 2b 22 	lds	r31, 0x222B
    406c:	30 97       	sbiw	r30, 0x00	; 0
    406e:	29 f0       	breq	.+10     	; 0x407a <__vector_119+0x3c>
    4070:	80 91 20 23 	lds	r24, 0x2320
    4074:	90 91 21 23 	lds	r25, 0x2321
    4078:	19 95       	eicall
    407a:	ff 91       	pop	r31
    407c:	ef 91       	pop	r30
    407e:	bf 91       	pop	r27
    4080:	af 91       	pop	r26
    4082:	9f 91       	pop	r25
    4084:	8f 91       	pop	r24
    4086:	7f 91       	pop	r23
    4088:	6f 91       	pop	r22
    408a:	5f 91       	pop	r21
    408c:	4f 91       	pop	r20
    408e:	3f 91       	pop	r19
    4090:	2f 91       	pop	r18
    4092:	0f 90       	pop	r0
    4094:	0b be       	out	0x3b, r0	; 59
    4096:	0f 90       	pop	r0
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	0f 90       	pop	r0
    409c:	1f 90       	pop	r1
    409e:	18 95       	reti

000040a0 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    40a0:	1f 92       	push	r1
    40a2:	0f 92       	push	r0
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	0f 92       	push	r0
    40a8:	11 24       	eor	r1, r1
    40aa:	0b b6       	in	r0, 0x3b	; 59
    40ac:	0f 92       	push	r0
    40ae:	2f 93       	push	r18
    40b0:	3f 93       	push	r19
    40b2:	4f 93       	push	r20
    40b4:	5f 93       	push	r21
    40b6:	6f 93       	push	r22
    40b8:	7f 93       	push	r23
    40ba:	8f 93       	push	r24
    40bc:	9f 93       	push	r25
    40be:	af 93       	push	r26
    40c0:	bf 93       	push	r27
    40c2:	ef 93       	push	r30
    40c4:	ff 93       	push	r31
    40c6:	e0 91 2c 22 	lds	r30, 0x222C
    40ca:	f0 91 2d 22 	lds	r31, 0x222D
    40ce:	30 97       	sbiw	r30, 0x00	; 0
    40d0:	29 f0       	breq	.+10     	; 0x40dc <__vector_120+0x3c>
    40d2:	80 91 22 23 	lds	r24, 0x2322
    40d6:	90 91 23 23 	lds	r25, 0x2323
    40da:	19 95       	eicall
    40dc:	ff 91       	pop	r31
    40de:	ef 91       	pop	r30
    40e0:	bf 91       	pop	r27
    40e2:	af 91       	pop	r26
    40e4:	9f 91       	pop	r25
    40e6:	8f 91       	pop	r24
    40e8:	7f 91       	pop	r23
    40ea:	6f 91       	pop	r22
    40ec:	5f 91       	pop	r21
    40ee:	4f 91       	pop	r20
    40f0:	3f 91       	pop	r19
    40f2:	2f 91       	pop	r18
    40f4:	0f 90       	pop	r0
    40f6:	0b be       	out	0x3b, r0	; 59
    40f8:	0f 90       	pop	r0
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	0f 90       	pop	r0
    40fe:	1f 90       	pop	r1
    4100:	18 95       	reti

00004102 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4102:	1f 92       	push	r1
    4104:	0f 92       	push	r0
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	0f 92       	push	r0
    410a:	11 24       	eor	r1, r1
    410c:	0b b6       	in	r0, 0x3b	; 59
    410e:	0f 92       	push	r0
    4110:	2f 93       	push	r18
    4112:	3f 93       	push	r19
    4114:	4f 93       	push	r20
    4116:	5f 93       	push	r21
    4118:	6f 93       	push	r22
    411a:	7f 93       	push	r23
    411c:	8f 93       	push	r24
    411e:	9f 93       	push	r25
    4120:	af 93       	push	r26
    4122:	bf 93       	push	r27
    4124:	ef 93       	push	r30
    4126:	ff 93       	push	r31
    4128:	e0 91 2e 22 	lds	r30, 0x222E
    412c:	f0 91 2f 22 	lds	r31, 0x222F
    4130:	30 97       	sbiw	r30, 0x00	; 0
    4132:	29 f0       	breq	.+10     	; 0x413e <__vector_121+0x3c>
    4134:	80 91 24 23 	lds	r24, 0x2324
    4138:	90 91 25 23 	lds	r25, 0x2325
    413c:	19 95       	eicall
    413e:	ff 91       	pop	r31
    4140:	ef 91       	pop	r30
    4142:	bf 91       	pop	r27
    4144:	af 91       	pop	r26
    4146:	9f 91       	pop	r25
    4148:	8f 91       	pop	r24
    414a:	7f 91       	pop	r23
    414c:	6f 91       	pop	r22
    414e:	5f 91       	pop	r21
    4150:	4f 91       	pop	r20
    4152:	3f 91       	pop	r19
    4154:	2f 91       	pop	r18
    4156:	0f 90       	pop	r0
    4158:	0b be       	out	0x3b, r0	; 59
    415a:	0f 90       	pop	r0
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	0f 90       	pop	r0
    4160:	1f 90       	pop	r1
    4162:	18 95       	reti

00004164 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4164:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    4168:	fd cf       	rjmp	.-6      	; 0x4164 <__cxa_pure_virtual>

0000416a <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    416a:	8a e6       	ldi	r24, 0x6A	; 106
    416c:	93 e2       	ldi	r25, 0x23	; 35
    416e:	0e 94 9d 0c 	call	0x193a	; 0x193a <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    4172:	88 e6       	ldi	r24, 0x68	; 104
    4174:	93 e2       	ldi	r25, 0x23	; 35
    4176:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    417a:	8f e4       	ldi	r24, 0x4F	; 79
    417c:	93 e2       	ldi	r25, 0x23	; 35
    417e:	0e 94 81 22 	call	0x4502	; 0x4502 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    4182:	85 e4       	ldi	r24, 0x45	; 69
    4184:	93 e2       	ldi	r25, 0x23	; 35
    4186:	0e 94 90 02 	call	0x520	; 0x520 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    418a:	84 e4       	ldi	r24, 0x44	; 68
    418c:	93 e2       	ldi	r25, 0x23	; 35
    418e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    4192:	8a e2       	ldi	r24, 0x2A	; 42
    4194:	93 e2       	ldi	r25, 0x23	; 35
    4196:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN16CLaserControlAppC1Ev>
    419a:	08 95       	ret

0000419c <_GLOBAL__sub_D_dacSPI>:
    419c:	8a e2       	ldi	r24, 0x2A	; 42
    419e:	93 e2       	ldi	r25, 0x23	; 35
    41a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    41a4:	84 e4       	ldi	r24, 0x44	; 68
    41a6:	93 e2       	ldi	r25, 0x23	; 35
    41a8:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    41ac:	85 e4       	ldi	r24, 0x45	; 69
    41ae:	93 e2       	ldi	r25, 0x23	; 35
    41b0:	0e 94 91 02 	call	0x522	; 0x522 <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    41b4:	8f e4       	ldi	r24, 0x4F	; 79
    41b6:	93 e2       	ldi	r25, 0x23	; 35
    41b8:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    41bc:	88 e6       	ldi	r24, 0x68	; 104
    41be:	93 e2       	ldi	r25, 0x23	; 35
    41c0:	0e 94 88 02 	call	0x510	; 0x510 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    41c4:	8a e6       	ldi	r24, 0x6A	; 106
    41c6:	93 e2       	ldi	r25, 0x23	; 35
    41c8:	0e 94 9e 0c 	call	0x193c	; 0x193c <_ZN4CSPID1Ev>
    41cc:	08 95       	ret

000041ce <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    41ce:	ef 92       	push	r14
    41d0:	0f 93       	push	r16
    41d2:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    41d4:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    41d6:	85 e4       	ldi	r24, 0x45	; 69
    41d8:	93 e2       	ldi	r25, 0x23	; 35
    41da:	0e 94 92 02 	call	0x524	; 0x524 <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    41de:	84 e4       	ldi	r24, 0x44	; 68
    41e0:	93 e2       	ldi	r25, 0x23	; 35
    41e2:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    41e6:	0f 2e       	mov	r0, r31
    41e8:	f3 e0       	ldi	r31, 0x03	; 3
    41ea:	ef 2e       	mov	r14, r31
    41ec:	f0 2d       	mov	r31, r0
    41ee:	00 e0       	ldi	r16, 0x00	; 0
    41f0:	23 e0       	ldi	r18, 0x03	; 3
    41f2:	40 e0       	ldi	r20, 0x00	; 0
    41f4:	61 e0       	ldi	r22, 0x01	; 1
    41f6:	8a e6       	ldi	r24, 0x6A	; 106
    41f8:	93 e2       	ldi	r25, 0x23	; 35
    41fa:	0e 94 9f 0c 	call	0x193e	; 0x193e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    41fe:	01 e0       	ldi	r16, 0x01	; 1
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	40 e0       	ldi	r20, 0x00	; 0
    4204:	6d e0       	ldi	r22, 0x0D	; 13
    4206:	88 e6       	ldi	r24, 0x68	; 104
    4208:	93 e2       	ldi	r25, 0x23	; 35
    420a:	0e 94 00 02 	call	0x400	; 0x400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    420e:	00 e0       	ldi	r16, 0x00	; 0
    4210:	11 e0       	ldi	r17, 0x01	; 1
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	31 e0       	ldi	r19, 0x01	; 1
    4216:	4a e2       	ldi	r20, 0x2A	; 42
    4218:	53 e2       	ldi	r21, 0x23	; 35
    421a:	68 e6       	ldi	r22, 0x68	; 104
    421c:	73 e2       	ldi	r23, 0x23	; 35
    421e:	8f e4       	ldi	r24, 0x4F	; 79
    4220:	93 e2       	ldi	r25, 0x23	; 35
    4222:	0e 94 87 22 	call	0x450e	; 0x450e <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    4226:	6f e4       	ldi	r22, 0x4F	; 79
    4228:	73 e2       	ldi	r23, 0x23	; 35
    422a:	8a e2       	ldi	r24, 0x2A	; 42
    422c:	93 e2       	ldi	r25, 0x23	; 35
    422e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4232:	85 e4       	ldi	r24, 0x45	; 69
    4234:	93 e2       	ldi	r25, 0x23	; 35
    4236:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    423a:	78 94       	sei
}
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	ef 90       	pop	r14
    4242:	08 95       	ret

00004244 <main>:
	 
int main(void)
{
    4244:	cf 93       	push	r28
    4246:	df 93       	push	r29
    4248:	1f 92       	push	r1
    424a:	1f 92       	push	r1
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    4250:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    4254:	84 e4       	ldi	r24, 0x44	; 68
    4256:	93 e2       	ldi	r25, 0x23	; 35
    4258:	0e 94 90 0a 	call	0x1520	; 0x1520 <_ZN12CSoundPlayer4PlayEv>
	laserBoard.Relay1On();
    425c:	85 e4       	ldi	r24, 0x45	; 69
    425e:	93 e2       	ldi	r25, 0x23	; 35
    4260:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN11CLaserBoard8Relay1OnEv>
    4264:	2f ef       	ldi	r18, 0xFF	; 255
    4266:	83 ec       	ldi	r24, 0xC3	; 195
    4268:	99 e0       	ldi	r25, 0x09	; 9
    426a:	21 50       	subi	r18, 0x01	; 1
    426c:	80 40       	sbci	r24, 0x00	; 0
    426e:	90 40       	sbci	r25, 0x00	; 0
    4270:	e1 f7       	brne	.-8      	; 0x426a <main+0x26>
    4272:	00 c0       	rjmp	.+0      	; 0x4274 <main+0x30>
    4274:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    4276:	85 e4       	ldi	r24, 0x45	; 69
    4278:	93 e2       	ldi	r25, 0x23	; 35
    427a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    427e:	19 82       	std	Y+1, r1	; 0x01
    4280:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4282:	42 e0       	ldi	r20, 0x02	; 2
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	be 01       	movw	r22, r28
    4288:	6f 5f       	subi	r22, 0xFF	; 255
    428a:	7f 4f       	sbci	r23, 0xFF	; 255
    428c:	8a e6       	ldi	r24, 0x6A	; 106
    428e:	93 e2       	ldi	r25, 0x23	; 35
    4290:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4294:	8a e2       	ldi	r24, 0x2A	; 42
    4296:	93 e2       	ldi	r25, 0x23	; 35
    4298:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    429c:	18 ec       	ldi	r17, 0xC8	; 200
    429e:	8f e3       	ldi	r24, 0x3F	; 63
    42a0:	9f e1       	ldi	r25, 0x1F	; 31
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	f1 f7       	brne	.-4      	; 0x42a2 <main+0x5e>
    42a6:	00 c0       	rjmp	.+0      	; 0x42a8 <main+0x64>
    42a8:	00 00       	nop
    42aa:	40 91 28 23 	lds	r20, 0x2328
    42ae:	50 91 29 23 	lds	r21, 0x2329
    42b2:	ca 01       	movw	r24, r20
    42b4:	01 96       	adiw	r24, 0x01	; 1
    42b6:	80 93 28 23 	sts	0x2328, r24
    42ba:	90 93 29 23 	sts	0x2329, r25
    42be:	9a 01       	movw	r18, r20
    42c0:	36 95       	lsr	r19
    42c2:	27 95       	ror	r18
    42c4:	36 95       	lsr	r19
    42c6:	27 95       	ror	r18
    42c8:	36 95       	lsr	r19
    42ca:	27 95       	ror	r18
    42cc:	ab e7       	ldi	r26, 0x7B	; 123
    42ce:	b4 e1       	ldi	r27, 0x14	; 20
    42d0:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__umulhisi3>
    42d4:	96 95       	lsr	r25
    42d6:	87 95       	ror	r24
    42d8:	18 9f       	mul	r17, r24
    42da:	90 01       	movw	r18, r0
    42dc:	19 9f       	mul	r17, r25
    42de:	30 0d       	add	r19, r0
    42e0:	11 24       	eor	r1, r1
    42e2:	42 17       	cp	r20, r18
    42e4:	53 07       	cpc	r21, r19
    42e6:	21 f4       	brne	.+8      	; 0x42f0 <main+0xac>
			App.Run();
    42e8:	8a e2       	ldi	r24, 0x2A	; 42
    42ea:	93 e2       	ldi	r25, 0x23	; 35
    42ec:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN16CLaserControlApp3RunEv>
			
		laserBoard.PortCheck();
    42f0:	85 e4       	ldi	r24, 0x45	; 69
    42f2:	93 e2       	ldi	r25, 0x23	; 35
    42f4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN11CLaserBoard9PortCheckEv>
		float y = 1023.0f * (1.0f + sinf(x)) * 0.5f;
		uint16_t data = ((uint16_t)y) << 2;
	
		// Send to DAC	
		dacSPI.Send((uint8_t*)&data, sizeof(data));*/
    }
    42f8:	d2 cf       	rjmp	.-92     	; 0x429e <main+0x5a>

000042fa <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4300:	ec 81       	ldd	r30, Y+4	; 0x04
    4302:	fd 81       	ldd	r31, Y+5	; 0x05
    4304:	8a ea       	ldi	r24, 0xAA	; 170
    4306:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4308:	ec 81       	ldd	r30, Y+4	; 0x04
    430a:	fd 81       	ldd	r31, Y+5	; 0x05
    430c:	8c ec       	ldi	r24, 0xCC	; 204
    430e:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4310:	ec 81       	ldd	r30, Y+4	; 0x04
    4312:	fd 81       	ldd	r31, Y+5	; 0x05
    4314:	82 e0       	ldi	r24, 0x02	; 2
    4316:	82 0f       	add	r24, r18
    4318:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    431a:	ec 81       	ldd	r30, Y+4	; 0x04
    431c:	fd 81       	ldd	r31, Y+5	; 0x05
    431e:	80 e8       	ldi	r24, 0x80	; 128
    4320:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4322:	ec 81       	ldd	r30, Y+4	; 0x04
    4324:	fd 81       	ldd	r31, Y+5	; 0x05
    4326:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4328:	85 e0       	ldi	r24, 0x05	; 5
    432a:	82 0f       	add	r24, r18
    432c:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	21 15       	cp	r18, r1
    4332:	31 05       	cpc	r19, r1
    4334:	81 f0       	breq	.+32     	; 0x4356 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4336:	da 01       	movw	r26, r20
    4338:	42 0f       	add	r20, r18
    433a:	53 1f       	adc	r21, r19
    433c:	65 e0       	ldi	r22, 0x05	; 5
    433e:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4340:	9d 91       	ld	r25, X+
    4342:	ec 81       	ldd	r30, Y+4	; 0x04
    4344:	fd 81       	ldd	r31, Y+5	; 0x05
    4346:	e6 0f       	add	r30, r22
    4348:	f7 1f       	adc	r31, r23
    434a:	90 83       	st	Z, r25
    434c:	6f 5f       	subi	r22, 0xFF	; 255
    434e:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4350:	a4 17       	cp	r26, r20
    4352:	b5 07       	cpc	r27, r21
    4354:	a9 f7       	brne	.-22     	; 0x4340 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4356:	df 91       	pop	r29
    4358:	cf 91       	pop	r28
    435a:	08 95       	ret

0000435c <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    435c:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    435e:	a4 81       	ldd	r26, Z+4	; 0x04
    4360:	b5 81       	ldd	r27, Z+5	; 0x05
    4362:	8a ea       	ldi	r24, 0xAA	; 170
    4364:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4366:	a4 81       	ldd	r26, Z+4	; 0x04
    4368:	b5 81       	ldd	r27, Z+5	; 0x05
    436a:	8c ec       	ldi	r24, 0xCC	; 204
    436c:	11 96       	adiw	r26, 0x01	; 1
    436e:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4370:	a4 81       	ldd	r26, Z+4	; 0x04
    4372:	b5 81       	ldd	r27, Z+5	; 0x05
    4374:	83 e0       	ldi	r24, 0x03	; 3
    4376:	12 96       	adiw	r26, 0x02	; 2
    4378:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    437a:	a4 81       	ldd	r26, Z+4	; 0x04
    437c:	b5 81       	ldd	r27, Z+5	; 0x05
    437e:	81 e8       	ldi	r24, 0x81	; 129
    4380:	13 96       	adiw	r26, 0x03	; 3
    4382:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4384:	a4 81       	ldd	r26, Z+4	; 0x04
    4386:	b5 81       	ldd	r27, Z+5	; 0x05
    4388:	14 96       	adiw	r26, 0x04	; 4
    438a:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    438c:	a4 81       	ldd	r26, Z+4	; 0x04
    438e:	b5 81       	ldd	r27, Z+5	; 0x05
    4390:	15 96       	adiw	r26, 0x05	; 5
    4392:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4394:	86 e0       	ldi	r24, 0x06	; 6
    4396:	81 87       	std	Z+9, r24	; 0x09
    4398:	08 95       	ret

0000439a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    439a:	0f 93       	push	r16
    439c:	1f 93       	push	r17
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    43a2:	dc 01       	movw	r26, r24
    43a4:	14 96       	adiw	r26, 0x04	; 4
    43a6:	ed 91       	ld	r30, X+
    43a8:	fc 91       	ld	r31, X
    43aa:	15 97       	sbiw	r26, 0x05	; 5
    43ac:	aa ea       	ldi	r26, 0xAA	; 170
    43ae:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    43b0:	ec 01       	movw	r28, r24
    43b2:	ec 81       	ldd	r30, Y+4	; 0x04
    43b4:	fd 81       	ldd	r31, Y+5	; 0x05
    43b6:	ac ec       	ldi	r26, 0xCC	; 204
    43b8:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length * 2 + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length * 2 + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    43ba:	ac 81       	ldd	r26, Y+4	; 0x04
    43bc:	bd 81       	ldd	r27, Y+5	; 0x05
    43be:	e2 2f       	mov	r30, r18
    43c0:	ee 0f       	add	r30, r30
    43c2:	ed 5f       	subi	r30, 0xFD	; 253
    43c4:	12 96       	adiw	r26, 0x02	; 2
    43c6:	ec 93       	st	X, r30
#endif
	tx_buffer[3] = 0x82;	// Frame command
    43c8:	ec 81       	ldd	r30, Y+4	; 0x04
    43ca:	fd 81       	ldd	r31, Y+5	; 0x05
    43cc:	a2 e8       	ldi	r26, 0x82	; 130
    43ce:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    43d0:	ec 81       	ldd	r30, Y+4	; 0x04
    43d2:	fd 81       	ldd	r31, Y+5	; 0x05
    43d4:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    43d6:	ec 81       	ldd	r30, Y+4	; 0x04
    43d8:	fd 81       	ldd	r31, Y+5	; 0x05
    43da:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length * 2 + 6;
    43dc:	b9 01       	movw	r22, r18
    43de:	6d 5f       	subi	r22, 0xFD	; 253
    43e0:	7f 4f       	sbci	r23, 0xFF	; 255
    43e2:	e6 2f       	mov	r30, r22
    43e4:	ee 0f       	add	r30, r30
    43e6:	e9 87       	std	Y+9, r30	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    43e8:	23 2b       	or	r18, r19
    43ea:	d9 f0       	breq	.+54     	; 0x4422 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x88>
    43ec:	e4 2f       	mov	r30, r20
    43ee:	f5 2f       	mov	r31, r21
    43f0:	ab 01       	movw	r20, r22
    43f2:	44 0f       	add	r20, r20
    43f4:	55 1f       	adc	r21, r21
    43f6:	26 e0       	ldi	r18, 0x06	; 6
    43f8:	30 e0       	ldi	r19, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    43fa:	ec 01       	movw	r28, r24
    43fc:	ac 81       	ldd	r26, Y+4	; 0x04
    43fe:	bd 81       	ldd	r27, Y+5	; 0x05
    4400:	a2 0f       	add	r26, r18
    4402:	b3 1f       	adc	r27, r19
    4404:	61 81       	ldd	r22, Z+1	; 0x01
    4406:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4408:	ac 81       	ldd	r26, Y+4	; 0x04
    440a:	bd 81       	ldd	r27, Y+5	; 0x05
    440c:	a2 0f       	add	r26, r18
    440e:	b3 1f       	adc	r27, r19
    4410:	60 81       	ld	r22, Z
    4412:	32 96       	adiw	r30, 0x02	; 2
    4414:	11 96       	adiw	r26, 0x01	; 1
    4416:	6c 93       	st	X, r22
    4418:	2e 5f       	subi	r18, 0xFE	; 254
    441a:	3f 4f       	sbci	r19, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length * 2 + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    441c:	24 17       	cp	r18, r20
    441e:	35 07       	cpc	r19, r21
    4420:	61 f7       	brne	.-40     	; 0x43fa <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x60>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	08 95       	ret

0000442c <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    442c:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    442e:	a4 81       	ldd	r26, Z+4	; 0x04
    4430:	b5 81       	ldd	r27, Z+5	; 0x05
    4432:	8a ea       	ldi	r24, 0xAA	; 170
    4434:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4436:	a4 81       	ldd	r26, Z+4	; 0x04
    4438:	b5 81       	ldd	r27, Z+5	; 0x05
    443a:	8c ec       	ldi	r24, 0xCC	; 204
    443c:	11 96       	adiw	r26, 0x01	; 1
    443e:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4440:	a4 81       	ldd	r26, Z+4	; 0x04
    4442:	b5 81       	ldd	r27, Z+5	; 0x05
    4444:	84 e0       	ldi	r24, 0x04	; 4
    4446:	12 96       	adiw	r26, 0x02	; 2
    4448:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    444a:	a4 81       	ldd	r26, Z+4	; 0x04
    444c:	b5 81       	ldd	r27, Z+5	; 0x05
    444e:	83 e8       	ldi	r24, 0x83	; 131
    4450:	13 96       	adiw	r26, 0x03	; 3
    4452:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4454:	a4 81       	ldd	r26, Z+4	; 0x04
    4456:	b5 81       	ldd	r27, Z+5	; 0x05
    4458:	14 96       	adiw	r26, 0x04	; 4
    445a:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    445c:	a4 81       	ldd	r26, Z+4	; 0x04
    445e:	b5 81       	ldd	r27, Z+5	; 0x05
    4460:	15 96       	adiw	r26, 0x05	; 5
    4462:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4464:	a4 81       	ldd	r26, Z+4	; 0x04
    4466:	b5 81       	ldd	r27, Z+5	; 0x05
    4468:	16 96       	adiw	r26, 0x06	; 6
    446a:	4c 93       	st	X, r20
	tx_frame_length = 7;
    446c:	87 e0       	ldi	r24, 0x07	; 7
    446e:	81 87       	std	Z+9, r24	; 0x09
    4470:	08 95       	ret

00004472 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	df 93       	push	r29
    447a:	ec 01       	movw	r28, r24
    447c:	cb 01       	movw	r24, r22
    447e:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4480:	6f 83       	std	Y+7, r22	; 0x07
    4482:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4484:	4a 87       	std	Y+10, r20	; 0x0a
    4486:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4488:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    448c:	8a 83       	std	Y+2, r24	; 0x02
    448e:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4490:	c8 01       	movw	r24, r16
    4492:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    4496:	8c 83       	std	Y+4, r24	; 0x04
    4498:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    449a:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    449c:	1e 82       	std	Y+6, r1	; 0x06
}
    449e:	df 91       	pop	r29
    44a0:	cf 91       	pop	r28
    44a2:	1f 91       	pop	r17
    44a4:	0f 91       	pop	r16
    44a6:	08 95       	ret

000044a8 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	ec 01       	movw	r28, r24
	free(rx_buffer);
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	9b 81       	ldd	r25, Y+3	; 0x03
    44b2:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <free>
	free(tx_buffer);
    44b6:	8c 81       	ldd	r24, Y+4	; 0x04
    44b8:	9d 81       	ldd	r25, Y+5	; 0x05
    44ba:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <free>
}
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	08 95       	ret

000044c4 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    44c4:	08 95       	ret

000044c6 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    44c6:	dc 01       	movw	r26, r24
    44c8:	57 96       	adiw	r26, 0x17	; 23
    44ca:	8d 91       	ld	r24, X+
    44cc:	9c 91       	ld	r25, X
    44ce:	58 97       	sbiw	r26, 0x18	; 24
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	39 f0       	breq	.+14     	; 0x44e2 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    44d4:	dc 01       	movw	r26, r24
    44d6:	ed 91       	ld	r30, X+
    44d8:	fc 91       	ld	r31, X
    44da:	02 80       	ldd	r0, Z+2	; 0x02
    44dc:	f3 81       	ldd	r31, Z+3	; 0x03
    44de:	e0 2d       	mov	r30, r0
    44e0:	19 95       	eicall
    44e2:	08 95       	ret

000044e4 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    44e4:	dc 01       	movw	r26, r24
    44e6:	57 96       	adiw	r26, 0x17	; 23
    44e8:	8d 91       	ld	r24, X+
    44ea:	9c 91       	ld	r25, X
    44ec:	58 97       	sbiw	r26, 0x18	; 24
    44ee:	00 97       	sbiw	r24, 0x00	; 0
    44f0:	39 f0       	breq	.+14     	; 0x4500 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    44f2:	dc 01       	movw	r26, r24
    44f4:	ed 91       	ld	r30, X+
    44f6:	fc 91       	ld	r31, X
    44f8:	04 80       	ldd	r0, Z+4	; 0x04
    44fa:	f5 81       	ldd	r31, Z+5	; 0x05
    44fc:	e0 2d       	mov	r30, r0
    44fe:	19 95       	eicall
    4500:	08 95       	ret

00004502 <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	31 e2       	ldi	r19, 0x21	; 33
    4506:	fc 01       	movw	r30, r24
    4508:	20 83       	st	Z, r18
    450a:	31 83       	std	Z+1, r19	; 0x01
    450c:	08 95       	ret

0000450e <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    450e:	cf 92       	push	r12
    4510:	df 92       	push	r13
    4512:	ef 92       	push	r14
    4514:	ff 92       	push	r15
    4516:	0f 93       	push	r16
    4518:	1f 93       	push	r17
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	ec 01       	movw	r28, r24
    4520:	7b 01       	movw	r14, r22
    4522:	6a 01       	movw	r12, r20
    4524:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4526:	2f 83       	std	Y+7, r18	; 0x07
    4528:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    452a:	0a 87       	std	Y+10, r16	; 0x0a
    452c:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    452e:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    4532:	8a 83       	std	Y+2, r24	; 0x02
    4534:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4536:	c8 01       	movw	r24, r16
    4538:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    453c:	8c 83       	std	Y+4, r24	; 0x04
    453e:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    4540:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    4542:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    4544:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4546:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4548:	18 8a       	std	Y+16, r1	; 0x10
    454a:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    454c:	1a 8a       	std	Y+18, r1	; 0x12
    454e:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    4550:	87 e0       	ldi	r24, 0x07	; 7
    4552:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    4554:	82 e0       	ldi	r24, 0x02	; 2
    4556:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4558:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    455a:	ec 86       	std	Y+12, r14	; 0x0c
    455c:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    455e:	d7 01       	movw	r26, r14
    4560:	ed 91       	ld	r30, X+
    4562:	fc 91       	ld	r31, X
    4564:	04 84       	ldd	r0, Z+12	; 0x0c
    4566:	f5 85       	ldd	r31, Z+13	; 0x0d
    4568:	e0 2d       	mov	r30, r0
    456a:	48 e9       	ldi	r20, 0x98	; 152
    456c:	53 e2       	ldi	r21, 0x23	; 35
    456e:	be 01       	movw	r22, r28
    4570:	c7 01       	movw	r24, r14
    4572:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    4574:	d7 01       	movw	r26, r14
    4576:	ed 91       	ld	r30, X+
    4578:	fc 91       	ld	r31, X
    457a:	06 84       	ldd	r0, Z+14	; 0x0e
    457c:	f7 85       	ldd	r31, Z+15	; 0x0f
    457e:	e0 2d       	mov	r30, r0
    4580:	4d ef       	ldi	r20, 0xFD	; 253
    4582:	53 e2       	ldi	r21, 0x23	; 35
    4584:	be 01       	movw	r22, r28
    4586:	c7 01       	movw	r24, r14
    4588:	19 95       	eicall
	
	// Set event handler
	if (handler)
    458a:	c1 14       	cp	r12, r1
    458c:	d1 04       	cpc	r13, r1
    458e:	19 f0       	breq	.+6      	; 0x4596 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    4590:	cf 8a       	std	Y+23, r12	; 0x17
    4592:	d8 8e       	std	Y+24, r13	; 0x18
    4594:	02 c0       	rjmp	.+4      	; 0x459a <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    4596:	cf 8b       	std	Y+23, r28	; 0x17
    4598:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	1f 91       	pop	r17
    45a0:	0f 91       	pop	r16
    45a2:	ff 90       	pop	r15
    45a4:	ef 90       	pop	r14
    45a6:	df 90       	pop	r13
    45a8:	cf 90       	pop	r12
    45aa:	08 95       	ret

000045ac <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	31 e2       	ldi	r19, 0x21	; 33
    45b0:	fc 01       	movw	r30, r24
    45b2:	20 83       	st	Z, r18
    45b4:	31 83       	std	Z+1, r19	; 0x01
    45b6:	0e 94 62 22 	call	0x44c4	; 0x44c4 <_ZN16CMBEventsHandlerD1Ev>
    45ba:	08 95       	ret

000045bc <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	ec 01       	movw	r28, r24
    45c2:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    45c4:	4e 85       	ldd	r20, Y+14	; 0x0e
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	4b 30       	cpi	r20, 0x0B	; 11
    45ca:	51 05       	cpc	r21, r1
    45cc:	08 f0       	brcs	.+2      	; 0x45d0 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    45ce:	ad c0       	rjmp	.+346    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    45d0:	fa 01       	movw	r30, r20
    45d2:	88 27       	eor	r24, r24
    45d4:	e8 5f       	subi	r30, 0xF8	; 248
    45d6:	fe 4f       	sbci	r31, 0xFE	; 254
    45d8:	8f 4f       	sbci	r24, 0xFF	; 255
    45da:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    45de:	9a 3a       	cpi	r25, 0xAA	; 170
    45e0:	19 f4       	brne	.+6      	; 0x45e8 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    45e2:	82 e0       	ldi	r24, 0x02	; 2
    45e4:	8e 87       	std	Y+14, r24	; 0x0e
    45e6:	a1 c0       	rjmp	.+322    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	8e 87       	std	Y+14, r24	; 0x0e
    45ec:	9e c0       	rjmp	.+316    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    45ee:	9c 3c       	cpi	r25, 0xCC	; 204
    45f0:	19 f4       	brne	.+6      	; 0x45f8 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    45f2:	83 e0       	ldi	r24, 0x03	; 3
    45f4:	8e 87       	std	Y+14, r24	; 0x0e
    45f6:	99 c0       	rjmp	.+306    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	8e 87       	std	Y+14, r24	; 0x0e
    45fc:	96 c0       	rjmp	.+300    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    45fe:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    4600:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    4602:	1a 8a       	std	Y+18, r1	; 0x12
    4604:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    4606:	10 92 70 23 	sts	0x2370, r1
    460a:	10 92 71 23 	sts	0x2371, r1
			modbus_receiver_state = rx_FrameReceive;
    460e:	84 e0       	ldi	r24, 0x04	; 4
    4610:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4612:	8b c0       	rjmp	.+278    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    4614:	8f 85       	ldd	r24, Y+15	; 0x0f
    4616:	ea 81       	ldd	r30, Y+2	; 0x02
    4618:	fb 81       	ldd	r31, Y+3	; 0x03
    461a:	e8 0f       	add	r30, r24
    461c:	f1 1d       	adc	r31, r1
    461e:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    4620:	2f 85       	ldd	r18, Y+15	; 0x0f
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	4f 81       	ldd	r20, Y+7	; 0x07
    4626:	58 85       	ldd	r21, Y+8	; 0x08
    4628:	42 17       	cp	r20, r18
    462a:	53 07       	cpc	r21, r19
    462c:	18 f4       	brcc	.+6      	; 0x4634 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    462e:	89 e0       	ldi	r24, 0x09	; 9
    4630:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    4632:	7b c0       	rjmp	.+246    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4634:	2a 89       	ldd	r18, Y+18	; 0x12
    4636:	3b 89       	ldd	r19, Y+19	; 0x13
    4638:	29 27       	eor	r18, r25
    463a:	92 2f       	mov	r25, r18
    463c:	92 95       	swap	r25
    463e:	92 27       	eor	r25, r18
    4640:	09 2e       	mov	r0, r25
    4642:	96 95       	lsr	r25
    4644:	96 95       	lsr	r25
    4646:	90 25       	eor	r25, r0
    4648:	09 2e       	mov	r0, r25
    464a:	96 95       	lsr	r25
    464c:	90 25       	eor	r25, r0
    464e:	97 70       	andi	r25, 0x07	; 7
    4650:	02 2e       	mov	r0, r18
    4652:	23 2f       	mov	r18, r19
    4654:	96 95       	lsr	r25
    4656:	07 94       	ror	r0
    4658:	97 95       	ror	r25
    465a:	30 2d       	mov	r19, r0
    465c:	29 27       	eor	r18, r25
    465e:	06 94       	lsr	r0
    4660:	97 95       	ror	r25
    4662:	30 25       	eor	r19, r0
    4664:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    4666:	2a 8b       	std	Y+18, r18	; 0x12
    4668:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    466a:	8f 85       	ldd	r24, Y+15	; 0x0f
    466c:	8f 5f       	subi	r24, 0xFF	; 255
    466e:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    4670:	80 91 70 23 	lds	r24, 0x2370
    4674:	90 91 71 23 	lds	r25, 0x2371
    4678:	01 96       	adiw	r24, 0x01	; 1
    467a:	80 93 70 23 	sts	0x2370, r24
    467e:	90 93 71 23 	sts	0x2371, r25
			if (rx_buffer_pos == rx_frame_length)
    4682:	4f 85       	ldd	r20, Y+15	; 0x0f
    4684:	8e 81       	ldd	r24, Y+6	; 0x06
    4686:	48 13       	cpse	r20, r24
    4688:	50 c0       	rjmp	.+160    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    468a:	88 e0       	ldi	r24, 0x08	; 8
    468c:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    468e:	e8 81       	ld	r30, Y
    4690:	f9 81       	ldd	r31, Y+1	; 0x01
    4692:	50 e0       	ldi	r21, 0x00	; 0
    4694:	6a 81       	ldd	r22, Y+2	; 0x02
    4696:	7b 81       	ldd	r23, Y+3	; 0x03
    4698:	01 90       	ld	r0, Z+
    469a:	f0 81       	ld	r31, Z
    469c:	e0 2d       	mov	r30, r0
    469e:	ce 01       	movw	r24, r28
    46a0:	19 95       	eicall
				if (CallbackHandler != 0)
    46a2:	8f 89       	ldd	r24, Y+23	; 0x17
    46a4:	98 8d       	ldd	r25, Y+24	; 0x18
    46a6:	00 97       	sbiw	r24, 0x00	; 0
    46a8:	09 f4       	brne	.+2      	; 0x46ac <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    46aa:	3f c0       	rjmp	.+126    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    46ac:	dc 01       	movw	r26, r24
    46ae:	ed 91       	ld	r30, X+
    46b0:	fc 91       	ld	r31, X
    46b2:	4e 81       	ldd	r20, Y+6	; 0x06
    46b4:	50 e0       	ldi	r21, 0x00	; 0
    46b6:	6a 81       	ldd	r22, Y+2	; 0x02
    46b8:	7b 81       	ldd	r23, Y+3	; 0x03
    46ba:	01 90       	ld	r0, Z+
    46bc:	f0 81       	ld	r31, Z
    46be:	e0 2d       	mov	r30, r0
    46c0:	19 95       	eicall
    46c2:	33 c0       	rjmp	.+102    	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    46c4:	69 2f       	mov	r22, r25
    46c6:	70 e0       	ldi	r23, 0x00	; 0
    46c8:	68 8b       	std	Y+16, r22	; 0x10
    46ca:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    46cc:	86 e0       	ldi	r24, 0x06	; 6
    46ce:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    46d0:	2c c0       	rjmp	.+88     	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    46d2:	28 89       	ldd	r18, Y+16	; 0x10
    46d4:	39 89       	ldd	r19, Y+17	; 0x11
    46d6:	a9 01       	movw	r20, r18
    46d8:	59 2b       	or	r21, r25
    46da:	48 8b       	std	Y+16, r20	; 0x10
    46dc:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    46de:	2a 89       	ldd	r18, Y+18	; 0x12
    46e0:	3b 89       	ldd	r19, Y+19	; 0x13
    46e2:	42 17       	cp	r20, r18
    46e4:	53 07       	cpc	r21, r19
    46e6:	e9 f4       	brne	.+58     	; 0x4722 <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    46e8:	88 e0       	ldi	r24, 0x08	; 8
    46ea:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    46ec:	e8 81       	ld	r30, Y
    46ee:	f9 81       	ldd	r31, Y+1	; 0x01
    46f0:	4e 81       	ldd	r20, Y+6	; 0x06
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	6a 81       	ldd	r22, Y+2	; 0x02
    46f6:	7b 81       	ldd	r23, Y+3	; 0x03
    46f8:	01 90       	ld	r0, Z+
    46fa:	f0 81       	ld	r31, Z
    46fc:	e0 2d       	mov	r30, r0
    46fe:	ce 01       	movw	r24, r28
    4700:	19 95       	eicall
				if (CallbackHandler != 0)
    4702:	8f 89       	ldd	r24, Y+23	; 0x17
    4704:	98 8d       	ldd	r25, Y+24	; 0x18
    4706:	00 97       	sbiw	r24, 0x00	; 0
    4708:	81 f0       	breq	.+32     	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    470a:	dc 01       	movw	r26, r24
    470c:	ed 91       	ld	r30, X+
    470e:	fc 91       	ld	r31, X
    4710:	4e 81       	ldd	r20, Y+6	; 0x06
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	6a 81       	ldd	r22, Y+2	; 0x02
    4716:	7b 81       	ldd	r23, Y+3	; 0x03
    4718:	01 90       	ld	r0, Z+
    471a:	f0 81       	ld	r31, Z
    471c:	e0 2d       	mov	r30, r0
    471e:	19 95       	eicall
    4720:	04 c0       	rjmp	.+8      	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    4722:	89 e0       	ldi	r24, 0x09	; 9
    4724:	8e 87       	std	Y+14, r24	; 0x0e
    4726:	01 c0       	rjmp	.+2      	; 0x472a <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    4728:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    472a:	df 91       	pop	r29
    472c:	cf 91       	pop	r28
    472e:	08 95       	ret

00004730 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4736:	8c 85       	ldd	r24, Y+12	; 0x0c
    4738:	9d 85       	ldd	r25, Y+13	; 0x0d
    473a:	dc 01       	movw	r26, r24
    473c:	ed 91       	ld	r30, X+
    473e:	fc 91       	ld	r31, X
    4740:	02 80       	ldd	r0, Z+2	; 0x02
    4742:	f3 81       	ldd	r31, Z+3	; 0x03
    4744:	e0 2d       	mov	r30, r0
    4746:	19 95       	eicall
	owner->OnReceiveByte(data);
    4748:	68 2f       	mov	r22, r24
    474a:	ce 01       	movw	r24, r28
    474c:	0e 94 de 22 	call	0x45bc	; 0x45bc <_ZN9CMBSender13OnReceiveByteEh>
}
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	08 95       	ret

00004756 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4756:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4758:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    475a:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    475c:	10 8a       	std	Z+16, r1	; 0x10
    475e:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4760:	12 8a       	std	Z+18, r1	; 0x12
    4762:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    4764:	16 86       	std	Z+14, r1	; 0x0e
    4766:	08 95       	ret

00004768 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    476e:	8c 89       	ldd	r24, Y+20	; 0x14
    4770:	84 30       	cpi	r24, 0x04	; 4
    4772:	38 f4       	brcc	.+14     	; 0x4782 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    4774:	82 30       	cpi	r24, 0x02	; 2
    4776:	b8 f5       	brcc	.+110    	; 0x47e6 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4778:	88 23       	and	r24, r24
    477a:	31 f0       	breq	.+12     	; 0x4788 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    477c:	81 30       	cpi	r24, 0x01	; 1
    477e:	d1 f0       	breq	.+52     	; 0x47b4 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    4780:	39 c0       	rjmp	.+114    	; 0x47f4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    4782:	85 30       	cpi	r24, 0x05	; 5
    4784:	81 f1       	breq	.+96     	; 0x47e6 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4786:	36 c0       	rjmp	.+108    	; 0x47f4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    478c:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    478e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4790:	9d 85       	ldd	r25, Y+13	; 0x0d
    4792:	2d 89       	ldd	r18, Y+21	; 0x15
    4794:	dc 01       	movw	r26, r24
    4796:	ed 91       	ld	r30, X+
    4798:	fc 91       	ld	r31, X
    479a:	ac 81       	ldd	r26, Y+4	; 0x04
    479c:	bd 81       	ldd	r27, Y+5	; 0x05
    479e:	a2 0f       	add	r26, r18
    47a0:	b1 1d       	adc	r27, r1
    47a2:	04 80       	ldd	r0, Z+4	; 0x04
    47a4:	f5 81       	ldd	r31, Z+5	; 0x05
    47a6:	e0 2d       	mov	r30, r0
    47a8:	6c 91       	ld	r22, X
    47aa:	19 95       	eicall
			tx_buffer_pos++;
    47ac:	8d 89       	ldd	r24, Y+21	; 0x15
    47ae:	8f 5f       	subi	r24, 0xFF	; 255
    47b0:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    47b2:	20 c0       	rjmp	.+64     	; 0x47f4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    47b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    47b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    47b8:	2d 89       	ldd	r18, Y+21	; 0x15
    47ba:	dc 01       	movw	r26, r24
    47bc:	ed 91       	ld	r30, X+
    47be:	fc 91       	ld	r31, X
    47c0:	ac 81       	ldd	r26, Y+4	; 0x04
    47c2:	bd 81       	ldd	r27, Y+5	; 0x05
    47c4:	a2 0f       	add	r26, r18
    47c6:	b1 1d       	adc	r27, r1
    47c8:	04 80       	ldd	r0, Z+4	; 0x04
    47ca:	f5 81       	ldd	r31, Z+5	; 0x05
    47cc:	e0 2d       	mov	r30, r0
    47ce:	6c 91       	ld	r22, X
    47d0:	19 95       	eicall
			tx_buffer_pos++;
    47d2:	8d 89       	ldd	r24, Y+21	; 0x15
    47d4:	8f 5f       	subi	r24, 0xFF	; 255
    47d6:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    47d8:	9d 89       	ldd	r25, Y+21	; 0x15
    47da:	89 85       	ldd	r24, Y+9	; 0x09
    47dc:	98 13       	cpse	r25, r24
    47de:	0a c0       	rjmp	.+20     	; 0x47f4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    47e0:	83 e0       	ldi	r24, 0x03	; 3
    47e2:	8c 8b       	std	Y+20, r24	; 0x14
    47e4:	07 c0       	rjmp	.+14     	; 0x47f4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    47e6:	8e 89       	ldd	r24, Y+22	; 0x16
    47e8:	88 23       	and	r24, r24
    47ea:	19 f0       	breq	.+6      	; 0x47f2 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    47ec:	ce 01       	movw	r24, r28
    47ee:	0e 94 ab 23 	call	0x4756	; 0x4756 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    47f2:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	08 95       	ret

000047fa <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    47fa:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN9CMBSender14OnTransmitByteEv>
    47fe:	08 95       	ret

00004800 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    4800:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    4802:	06 c0       	rjmp	.+12     	; 0x4810 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4804:	86 85       	ldd	r24, Z+14	; 0x0e
    4806:	89 30       	cpi	r24, 0x09	; 9
    4808:	41 f0       	breq	.+16     	; 0x481a <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    480a:	86 85       	ldd	r24, Z+14	; 0x0e
    480c:	8a 30       	cpi	r24, 0x0A	; 10
    480e:	39 f0       	breq	.+14     	; 0x481e <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    4810:	86 85       	ldd	r24, Z+14	; 0x0e
    4812:	88 30       	cpi	r24, 0x08	; 8
    4814:	b9 f7       	brne	.-18     	; 0x4804 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    481a:	82 e0       	ldi	r24, 0x02	; 2
    481c:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    481e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4820:	08 95       	ret

00004822 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    4822:	fc 01       	movw	r30, r24
    4824:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4826:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    4828:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN9CMBSender14OnTransmitByteEv>
    482c:	08 95       	ret

0000482e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4834:	e8 81       	ld	r30, Y
    4836:	f9 81       	ldd	r31, Y+1	; 0x01
    4838:	02 84       	ldd	r0, Z+10	; 0x0a
    483a:	f3 85       	ldd	r31, Z+11	; 0x0b
    483c:	e0 2d       	mov	r30, r0
    483e:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4840:	ce 01       	movw	r24, r28
    4842:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	08 95       	ret

0000484c <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    484c:	cf 93       	push	r28
    484e:	df 93       	push	r29
    4850:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    4852:	e8 81       	ld	r30, Y
    4854:	f9 81       	ldd	r31, Y+1	; 0x01
    4856:	06 84       	ldd	r0, Z+14	; 0x0e
    4858:	f7 85       	ldd	r31, Z+15	; 0x0f
    485a:	e0 2d       	mov	r30, r0
    485c:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    485e:	ce 01       	movw	r24, r28
    4860:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	08 95       	ret

0000486a <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    486a:	cf 93       	push	r28
    486c:	df 93       	push	r29
    486e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    4870:	e8 81       	ld	r30, Y
    4872:	f9 81       	ldd	r31, Y+1	; 0x01
    4874:	04 84       	ldd	r0, Z+12	; 0x0c
    4876:	f5 85       	ldd	r31, Z+13	; 0x0d
    4878:	e0 2d       	mov	r30, r0
    487a:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    487c:	ce 01       	movw	r24, r28
    487e:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4882:	df 91       	pop	r29
    4884:	cf 91       	pop	r28
    4886:	08 95       	ret

00004888 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    4888:	cf 93       	push	r28
    488a:	df 93       	push	r29
    488c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    488e:	e8 81       	ld	r30, Y
    4890:	f9 81       	ldd	r31, Y+1	; 0x01
    4892:	50 e0       	ldi	r21, 0x00	; 0
    4894:	00 88       	ldd	r0, Z+16	; 0x10
    4896:	f1 89       	ldd	r31, Z+17	; 0x11
    4898:	e0 2d       	mov	r30, r0
    489a:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    489c:	ce 01       	movw	r24, r28
    489e:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    48a2:	df 91       	pop	r29
    48a4:	cf 91       	pop	r28
    48a6:	08 95       	ret

000048a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    48a8:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    48aa:	06 c0       	rjmp	.+12     	; 0x48b8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    48ac:	84 89       	ldd	r24, Z+20	; 0x14
    48ae:	84 30       	cpi	r24, 0x04	; 4
    48b0:	41 f0       	breq	.+16     	; 0x48c2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    48b2:	84 89       	ldd	r24, Z+20	; 0x14
    48b4:	85 30       	cpi	r24, 0x05	; 5
    48b6:	39 f0       	breq	.+14     	; 0x48c6 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    48b8:	84 89       	ldd	r24, Z+20	; 0x14
    48ba:	83 30       	cpi	r24, 0x03	; 3
    48bc:	b9 f7       	brne	.-18     	; 0x48ac <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    48c2:	82 e0       	ldi	r24, 0x02	; 2
    48c4:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    48c6:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    48c8:	08 95       	ret

000048ca <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    48ca:	21 e0       	ldi	r18, 0x01	; 1
    48cc:	fc 01       	movw	r30, r24
    48ce:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    48d0:	0e 94 35 24 	call	0x486a	; 0x486a <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    48d4:	08 95       	ret

000048d6 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    48d6:	21 e0       	ldi	r18, 0x01	; 1
    48d8:	fc 01       	movw	r30, r24
    48da:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    48dc:	0e 94 44 24 	call	0x4888	; 0x4888 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    48e0:	08 95       	ret

000048e2 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	8c 01       	movw	r16, r24
    48ec:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    48ee:	98 81       	ld	r25, Y
    48f0:	91 38       	cpi	r25, 0x81	; 129
    48f2:	69 f4       	brne	.+26     	; 0x490e <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    48f4:	d8 01       	movw	r26, r16
    48f6:	ed 91       	ld	r30, X+
    48f8:	fc 91       	ld	r31, X
    48fa:	04 80       	ldd	r0, Z+4	; 0x04
    48fc:	f5 81       	ldd	r31, Z+5	; 0x05
    48fe:	e0 2d       	mov	r30, r0
    4900:	2a 81       	ldd	r18, Y+2	; 0x02
    4902:	ab 01       	movw	r20, r22
    4904:	4d 5f       	subi	r20, 0xFD	; 253
    4906:	5f 4f       	sbci	r21, 0xFF	; 255
    4908:	69 81       	ldd	r22, Y+1	; 0x01
    490a:	c8 01       	movw	r24, r16
    490c:	19 95       	eicall
	}
	if (data[0] == 0x83)
    490e:	98 81       	ld	r25, Y
    4910:	93 38       	cpi	r25, 0x83	; 131
    4912:	99 f4       	brne	.+38     	; 0x493a <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4914:	d8 01       	movw	r26, r16
    4916:	ed 91       	ld	r30, X+
    4918:	fc 91       	ld	r31, X
    491a:	2b 81       	ldd	r18, Y+3	; 0x03
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	ae 01       	movw	r20, r28
    4920:	4c 5f       	subi	r20, 0xFC	; 252
    4922:	5f 4f       	sbci	r21, 0xFF	; 255
    4924:	69 81       	ldd	r22, Y+1	; 0x01
    4926:	70 e0       	ldi	r23, 0x00	; 0
    4928:	76 2f       	mov	r23, r22
    492a:	66 27       	eor	r22, r22
    492c:	8a 81       	ldd	r24, Y+2	; 0x02
    492e:	68 2b       	or	r22, r24
    4930:	02 80       	ldd	r0, Z+2	; 0x02
    4932:	f3 81       	ldd	r31, Z+3	; 0x03
    4934:	e0 2d       	mov	r30, r0
    4936:	c8 01       	movw	r24, r16
    4938:	19 95       	eicall
	}
}
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	1f 91       	pop	r17
    4940:	0f 91       	pop	r16
    4942:	08 95       	ret

00004944 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4944:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_ZN9CMBSender18ProcessTransactionEPhj>
    4948:	08 95       	ret

0000494a <__udivmodhi4>:
    494a:	aa 1b       	sub	r26, r26
    494c:	bb 1b       	sub	r27, r27
    494e:	51 e1       	ldi	r21, 0x11	; 17
    4950:	07 c0       	rjmp	.+14     	; 0x4960 <__udivmodhi4_ep>

00004952 <__udivmodhi4_loop>:
    4952:	aa 1f       	adc	r26, r26
    4954:	bb 1f       	adc	r27, r27
    4956:	a6 17       	cp	r26, r22
    4958:	b7 07       	cpc	r27, r23
    495a:	10 f0       	brcs	.+4      	; 0x4960 <__udivmodhi4_ep>
    495c:	a6 1b       	sub	r26, r22
    495e:	b7 0b       	sbc	r27, r23

00004960 <__udivmodhi4_ep>:
    4960:	88 1f       	adc	r24, r24
    4962:	99 1f       	adc	r25, r25
    4964:	5a 95       	dec	r21
    4966:	a9 f7       	brne	.-22     	; 0x4952 <__udivmodhi4_loop>
    4968:	80 95       	com	r24
    496a:	90 95       	com	r25
    496c:	bc 01       	movw	r22, r24
    496e:	cd 01       	movw	r24, r26
    4970:	08 95       	ret

00004972 <__divmodsi4>:
    4972:	05 2e       	mov	r0, r21
    4974:	97 fb       	bst	r25, 7
    4976:	1e f4       	brtc	.+6      	; 0x497e <__divmodsi4+0xc>
    4978:	00 94       	com	r0
    497a:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__negsi2>
    497e:	57 fd       	sbrc	r21, 7
    4980:	07 d0       	rcall	.+14     	; 0x4990 <__divmodsi4_neg2>
    4982:	0e 94 ef 24 	call	0x49de	; 0x49de <__udivmodsi4>
    4986:	07 fc       	sbrc	r0, 7
    4988:	03 d0       	rcall	.+6      	; 0x4990 <__divmodsi4_neg2>
    498a:	4e f4       	brtc	.+18     	; 0x499e <__divmodsi4_exit>
    498c:	0c 94 d0 24 	jmp	0x49a0	; 0x49a0 <__negsi2>

00004990 <__divmodsi4_neg2>:
    4990:	50 95       	com	r21
    4992:	40 95       	com	r20
    4994:	30 95       	com	r19
    4996:	21 95       	neg	r18
    4998:	3f 4f       	sbci	r19, 0xFF	; 255
    499a:	4f 4f       	sbci	r20, 0xFF	; 255
    499c:	5f 4f       	sbci	r21, 0xFF	; 255

0000499e <__divmodsi4_exit>:
    499e:	08 95       	ret

000049a0 <__negsi2>:
    49a0:	90 95       	com	r25
    49a2:	80 95       	com	r24
    49a4:	70 95       	com	r23
    49a6:	61 95       	neg	r22
    49a8:	7f 4f       	sbci	r23, 0xFF	; 255
    49aa:	8f 4f       	sbci	r24, 0xFF	; 255
    49ac:	9f 4f       	sbci	r25, 0xFF	; 255
    49ae:	08 95       	ret

000049b0 <__tablejump2__>:
    49b0:	ee 0f       	add	r30, r30
    49b2:	ff 1f       	adc	r31, r31
    49b4:	88 1f       	adc	r24, r24
    49b6:	8b bf       	out	0x3b, r24	; 59
    49b8:	07 90       	elpm	r0, Z+
    49ba:	f6 91       	elpm	r31, Z
    49bc:	e0 2d       	mov	r30, r0
    49be:	19 94       	eijmp

000049c0 <__umulhisi3>:
    49c0:	a2 9f       	mul	r26, r18
    49c2:	b0 01       	movw	r22, r0
    49c4:	b3 9f       	mul	r27, r19
    49c6:	c0 01       	movw	r24, r0
    49c8:	a3 9f       	mul	r26, r19
    49ca:	70 0d       	add	r23, r0
    49cc:	81 1d       	adc	r24, r1
    49ce:	11 24       	eor	r1, r1
    49d0:	91 1d       	adc	r25, r1
    49d2:	b2 9f       	mul	r27, r18
    49d4:	70 0d       	add	r23, r0
    49d6:	81 1d       	adc	r24, r1
    49d8:	11 24       	eor	r1, r1
    49da:	91 1d       	adc	r25, r1
    49dc:	08 95       	ret

000049de <__udivmodsi4>:
    49de:	a1 e2       	ldi	r26, 0x21	; 33
    49e0:	1a 2e       	mov	r1, r26
    49e2:	aa 1b       	sub	r26, r26
    49e4:	bb 1b       	sub	r27, r27
    49e6:	fd 01       	movw	r30, r26
    49e8:	0d c0       	rjmp	.+26     	; 0x4a04 <__udivmodsi4_ep>

000049ea <__udivmodsi4_loop>:
    49ea:	aa 1f       	adc	r26, r26
    49ec:	bb 1f       	adc	r27, r27
    49ee:	ee 1f       	adc	r30, r30
    49f0:	ff 1f       	adc	r31, r31
    49f2:	a2 17       	cp	r26, r18
    49f4:	b3 07       	cpc	r27, r19
    49f6:	e4 07       	cpc	r30, r20
    49f8:	f5 07       	cpc	r31, r21
    49fa:	20 f0       	brcs	.+8      	; 0x4a04 <__udivmodsi4_ep>
    49fc:	a2 1b       	sub	r26, r18
    49fe:	b3 0b       	sbc	r27, r19
    4a00:	e4 0b       	sbc	r30, r20
    4a02:	f5 0b       	sbc	r31, r21

00004a04 <__udivmodsi4_ep>:
    4a04:	66 1f       	adc	r22, r22
    4a06:	77 1f       	adc	r23, r23
    4a08:	88 1f       	adc	r24, r24
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	1a 94       	dec	r1
    4a0e:	69 f7       	brne	.-38     	; 0x49ea <__udivmodsi4_loop>
    4a10:	60 95       	com	r22
    4a12:	70 95       	com	r23
    4a14:	80 95       	com	r24
    4a16:	90 95       	com	r25
    4a18:	9b 01       	movw	r18, r22
    4a1a:	ac 01       	movw	r20, r24
    4a1c:	bd 01       	movw	r22, r26
    4a1e:	cf 01       	movw	r24, r30
    4a20:	08 95       	ret

00004a22 <malloc>:
    4a22:	cf 93       	push	r28
    4a24:	df 93       	push	r29
    4a26:	82 30       	cpi	r24, 0x02	; 2
    4a28:	91 05       	cpc	r25, r1
    4a2a:	10 f4       	brcc	.+4      	; 0x4a30 <malloc+0xe>
    4a2c:	82 e0       	ldi	r24, 0x02	; 2
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	e0 91 74 23 	lds	r30, 0x2374
    4a34:	f0 91 75 23 	lds	r31, 0x2375
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	c0 e0       	ldi	r28, 0x00	; 0
    4a3e:	d0 e0       	ldi	r29, 0x00	; 0
    4a40:	30 97       	sbiw	r30, 0x00	; 0
    4a42:	11 f1       	breq	.+68     	; 0x4a88 <malloc+0x66>
    4a44:	40 81       	ld	r20, Z
    4a46:	51 81       	ldd	r21, Z+1	; 0x01
    4a48:	48 17       	cp	r20, r24
    4a4a:	59 07       	cpc	r21, r25
    4a4c:	c0 f0       	brcs	.+48     	; 0x4a7e <malloc+0x5c>
    4a4e:	48 17       	cp	r20, r24
    4a50:	59 07       	cpc	r21, r25
    4a52:	61 f4       	brne	.+24     	; 0x4a6c <malloc+0x4a>
    4a54:	82 81       	ldd	r24, Z+2	; 0x02
    4a56:	93 81       	ldd	r25, Z+3	; 0x03
    4a58:	20 97       	sbiw	r28, 0x00	; 0
    4a5a:	19 f0       	breq	.+6      	; 0x4a62 <malloc+0x40>
    4a5c:	8a 83       	std	Y+2, r24	; 0x02
    4a5e:	9b 83       	std	Y+3, r25	; 0x03
    4a60:	2b c0       	rjmp	.+86     	; 0x4ab8 <malloc+0x96>
    4a62:	80 93 74 23 	sts	0x2374, r24
    4a66:	90 93 75 23 	sts	0x2375, r25
    4a6a:	26 c0       	rjmp	.+76     	; 0x4ab8 <malloc+0x96>
    4a6c:	21 15       	cp	r18, r1
    4a6e:	31 05       	cpc	r19, r1
    4a70:	19 f0       	breq	.+6      	; 0x4a78 <malloc+0x56>
    4a72:	42 17       	cp	r20, r18
    4a74:	53 07       	cpc	r21, r19
    4a76:	18 f4       	brcc	.+6      	; 0x4a7e <malloc+0x5c>
    4a78:	9a 01       	movw	r18, r20
    4a7a:	be 01       	movw	r22, r28
    4a7c:	df 01       	movw	r26, r30
    4a7e:	ef 01       	movw	r28, r30
    4a80:	02 80       	ldd	r0, Z+2	; 0x02
    4a82:	f3 81       	ldd	r31, Z+3	; 0x03
    4a84:	e0 2d       	mov	r30, r0
    4a86:	dc cf       	rjmp	.-72     	; 0x4a40 <malloc+0x1e>
    4a88:	21 15       	cp	r18, r1
    4a8a:	31 05       	cpc	r19, r1
    4a8c:	09 f1       	breq	.+66     	; 0x4ad0 <malloc+0xae>
    4a8e:	28 1b       	sub	r18, r24
    4a90:	39 0b       	sbc	r19, r25
    4a92:	24 30       	cpi	r18, 0x04	; 4
    4a94:	31 05       	cpc	r19, r1
    4a96:	90 f4       	brcc	.+36     	; 0x4abc <malloc+0x9a>
    4a98:	12 96       	adiw	r26, 0x02	; 2
    4a9a:	8d 91       	ld	r24, X+
    4a9c:	9c 91       	ld	r25, X
    4a9e:	13 97       	sbiw	r26, 0x03	; 3
    4aa0:	61 15       	cp	r22, r1
    4aa2:	71 05       	cpc	r23, r1
    4aa4:	21 f0       	breq	.+8      	; 0x4aae <malloc+0x8c>
    4aa6:	fb 01       	movw	r30, r22
    4aa8:	82 83       	std	Z+2, r24	; 0x02
    4aaa:	93 83       	std	Z+3, r25	; 0x03
    4aac:	04 c0       	rjmp	.+8      	; 0x4ab6 <malloc+0x94>
    4aae:	80 93 74 23 	sts	0x2374, r24
    4ab2:	90 93 75 23 	sts	0x2375, r25
    4ab6:	fd 01       	movw	r30, r26
    4ab8:	32 96       	adiw	r30, 0x02	; 2
    4aba:	44 c0       	rjmp	.+136    	; 0x4b44 <malloc+0x122>
    4abc:	fd 01       	movw	r30, r26
    4abe:	e2 0f       	add	r30, r18
    4ac0:	f3 1f       	adc	r31, r19
    4ac2:	81 93       	st	Z+, r24
    4ac4:	91 93       	st	Z+, r25
    4ac6:	22 50       	subi	r18, 0x02	; 2
    4ac8:	31 09       	sbc	r19, r1
    4aca:	2d 93       	st	X+, r18
    4acc:	3c 93       	st	X, r19
    4ace:	3a c0       	rjmp	.+116    	; 0x4b44 <malloc+0x122>
    4ad0:	20 91 72 23 	lds	r18, 0x2372
    4ad4:	30 91 73 23 	lds	r19, 0x2373
    4ad8:	23 2b       	or	r18, r19
    4ada:	41 f4       	brne	.+16     	; 0x4aec <malloc+0xca>
    4adc:	20 91 02 20 	lds	r18, 0x2002
    4ae0:	30 91 03 20 	lds	r19, 0x2003
    4ae4:	20 93 72 23 	sts	0x2372, r18
    4ae8:	30 93 73 23 	sts	0x2373, r19
    4aec:	20 91 00 20 	lds	r18, 0x2000
    4af0:	30 91 01 20 	lds	r19, 0x2001
    4af4:	21 15       	cp	r18, r1
    4af6:	31 05       	cpc	r19, r1
    4af8:	41 f4       	brne	.+16     	; 0x4b0a <malloc+0xe8>
    4afa:	2d b7       	in	r18, 0x3d	; 61
    4afc:	3e b7       	in	r19, 0x3e	; 62
    4afe:	40 91 04 20 	lds	r20, 0x2004
    4b02:	50 91 05 20 	lds	r21, 0x2005
    4b06:	24 1b       	sub	r18, r20
    4b08:	35 0b       	sbc	r19, r21
    4b0a:	e0 91 72 23 	lds	r30, 0x2372
    4b0e:	f0 91 73 23 	lds	r31, 0x2373
    4b12:	e2 17       	cp	r30, r18
    4b14:	f3 07       	cpc	r31, r19
    4b16:	a0 f4       	brcc	.+40     	; 0x4b40 <malloc+0x11e>
    4b18:	2e 1b       	sub	r18, r30
    4b1a:	3f 0b       	sbc	r19, r31
    4b1c:	28 17       	cp	r18, r24
    4b1e:	39 07       	cpc	r19, r25
    4b20:	78 f0       	brcs	.+30     	; 0x4b40 <malloc+0x11e>
    4b22:	ac 01       	movw	r20, r24
    4b24:	4e 5f       	subi	r20, 0xFE	; 254
    4b26:	5f 4f       	sbci	r21, 0xFF	; 255
    4b28:	24 17       	cp	r18, r20
    4b2a:	35 07       	cpc	r19, r21
    4b2c:	48 f0       	brcs	.+18     	; 0x4b40 <malloc+0x11e>
    4b2e:	4e 0f       	add	r20, r30
    4b30:	5f 1f       	adc	r21, r31
    4b32:	40 93 72 23 	sts	0x2372, r20
    4b36:	50 93 73 23 	sts	0x2373, r21
    4b3a:	81 93       	st	Z+, r24
    4b3c:	91 93       	st	Z+, r25
    4b3e:	02 c0       	rjmp	.+4      	; 0x4b44 <malloc+0x122>
    4b40:	e0 e0       	ldi	r30, 0x00	; 0
    4b42:	f0 e0       	ldi	r31, 0x00	; 0
    4b44:	cf 01       	movw	r24, r30
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	08 95       	ret

00004b4c <free>:
    4b4c:	0f 93       	push	r16
    4b4e:	1f 93       	push	r17
    4b50:	cf 93       	push	r28
    4b52:	df 93       	push	r29
    4b54:	00 97       	sbiw	r24, 0x00	; 0
    4b56:	09 f4       	brne	.+2      	; 0x4b5a <free+0xe>
    4b58:	8c c0       	rjmp	.+280    	; 0x4c72 <free+0x126>
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	32 97       	sbiw	r30, 0x02	; 2
    4b5e:	12 82       	std	Z+2, r1	; 0x02
    4b60:	13 82       	std	Z+3, r1	; 0x03
    4b62:	00 91 74 23 	lds	r16, 0x2374
    4b66:	10 91 75 23 	lds	r17, 0x2375
    4b6a:	01 15       	cp	r16, r1
    4b6c:	11 05       	cpc	r17, r1
    4b6e:	81 f4       	brne	.+32     	; 0x4b90 <free+0x44>
    4b70:	20 81       	ld	r18, Z
    4b72:	31 81       	ldd	r19, Z+1	; 0x01
    4b74:	82 0f       	add	r24, r18
    4b76:	93 1f       	adc	r25, r19
    4b78:	20 91 72 23 	lds	r18, 0x2372
    4b7c:	30 91 73 23 	lds	r19, 0x2373
    4b80:	28 17       	cp	r18, r24
    4b82:	39 07       	cpc	r19, r25
    4b84:	79 f5       	brne	.+94     	; 0x4be4 <free+0x98>
    4b86:	e0 93 72 23 	sts	0x2372, r30
    4b8a:	f0 93 73 23 	sts	0x2373, r31
    4b8e:	71 c0       	rjmp	.+226    	; 0x4c72 <free+0x126>
    4b90:	d8 01       	movw	r26, r16
    4b92:	40 e0       	ldi	r20, 0x00	; 0
    4b94:	50 e0       	ldi	r21, 0x00	; 0
    4b96:	ae 17       	cp	r26, r30
    4b98:	bf 07       	cpc	r27, r31
    4b9a:	50 f4       	brcc	.+20     	; 0x4bb0 <free+0x64>
    4b9c:	12 96       	adiw	r26, 0x02	; 2
    4b9e:	2d 91       	ld	r18, X+
    4ba0:	3c 91       	ld	r19, X
    4ba2:	13 97       	sbiw	r26, 0x03	; 3
    4ba4:	ad 01       	movw	r20, r26
    4ba6:	21 15       	cp	r18, r1
    4ba8:	31 05       	cpc	r19, r1
    4baa:	09 f1       	breq	.+66     	; 0x4bee <free+0xa2>
    4bac:	d9 01       	movw	r26, r18
    4bae:	f3 cf       	rjmp	.-26     	; 0x4b96 <free+0x4a>
    4bb0:	9d 01       	movw	r18, r26
    4bb2:	da 01       	movw	r26, r20
    4bb4:	22 83       	std	Z+2, r18	; 0x02
    4bb6:	33 83       	std	Z+3, r19	; 0x03
    4bb8:	60 81       	ld	r22, Z
    4bba:	71 81       	ldd	r23, Z+1	; 0x01
    4bbc:	86 0f       	add	r24, r22
    4bbe:	97 1f       	adc	r25, r23
    4bc0:	82 17       	cp	r24, r18
    4bc2:	93 07       	cpc	r25, r19
    4bc4:	69 f4       	brne	.+26     	; 0x4be0 <free+0x94>
    4bc6:	ec 01       	movw	r28, r24
    4bc8:	28 81       	ld	r18, Y
    4bca:	39 81       	ldd	r19, Y+1	; 0x01
    4bcc:	26 0f       	add	r18, r22
    4bce:	37 1f       	adc	r19, r23
    4bd0:	2e 5f       	subi	r18, 0xFE	; 254
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	20 83       	st	Z, r18
    4bd6:	31 83       	std	Z+1, r19	; 0x01
    4bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bda:	9b 81       	ldd	r25, Y+3	; 0x03
    4bdc:	82 83       	std	Z+2, r24	; 0x02
    4bde:	93 83       	std	Z+3, r25	; 0x03
    4be0:	45 2b       	or	r20, r21
    4be2:	29 f4       	brne	.+10     	; 0x4bee <free+0xa2>
    4be4:	e0 93 74 23 	sts	0x2374, r30
    4be8:	f0 93 75 23 	sts	0x2375, r31
    4bec:	42 c0       	rjmp	.+132    	; 0x4c72 <free+0x126>
    4bee:	12 96       	adiw	r26, 0x02	; 2
    4bf0:	ed 93       	st	X+, r30
    4bf2:	fc 93       	st	X, r31
    4bf4:	13 97       	sbiw	r26, 0x03	; 3
    4bf6:	ed 01       	movw	r28, r26
    4bf8:	49 91       	ld	r20, Y+
    4bfa:	59 91       	ld	r21, Y+
    4bfc:	9e 01       	movw	r18, r28
    4bfe:	24 0f       	add	r18, r20
    4c00:	35 1f       	adc	r19, r21
    4c02:	e2 17       	cp	r30, r18
    4c04:	f3 07       	cpc	r31, r19
    4c06:	71 f4       	brne	.+28     	; 0x4c24 <free+0xd8>
    4c08:	80 81       	ld	r24, Z
    4c0a:	91 81       	ldd	r25, Z+1	; 0x01
    4c0c:	84 0f       	add	r24, r20
    4c0e:	95 1f       	adc	r25, r21
    4c10:	02 96       	adiw	r24, 0x02	; 2
    4c12:	8d 93       	st	X+, r24
    4c14:	9c 93       	st	X, r25
    4c16:	11 97       	sbiw	r26, 0x01	; 1
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	12 96       	adiw	r26, 0x02	; 2
    4c1e:	8d 93       	st	X+, r24
    4c20:	9c 93       	st	X, r25
    4c22:	13 97       	sbiw	r26, 0x03	; 3
    4c24:	e0 e0       	ldi	r30, 0x00	; 0
    4c26:	f0 e0       	ldi	r31, 0x00	; 0
    4c28:	d8 01       	movw	r26, r16
    4c2a:	12 96       	adiw	r26, 0x02	; 2
    4c2c:	8d 91       	ld	r24, X+
    4c2e:	9c 91       	ld	r25, X
    4c30:	13 97       	sbiw	r26, 0x03	; 3
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	19 f0       	breq	.+6      	; 0x4c3c <free+0xf0>
    4c36:	f8 01       	movw	r30, r16
    4c38:	8c 01       	movw	r16, r24
    4c3a:	f6 cf       	rjmp	.-20     	; 0x4c28 <free+0xdc>
    4c3c:	8d 91       	ld	r24, X+
    4c3e:	9c 91       	ld	r25, X
    4c40:	98 01       	movw	r18, r16
    4c42:	2e 5f       	subi	r18, 0xFE	; 254
    4c44:	3f 4f       	sbci	r19, 0xFF	; 255
    4c46:	82 0f       	add	r24, r18
    4c48:	93 1f       	adc	r25, r19
    4c4a:	20 91 72 23 	lds	r18, 0x2372
    4c4e:	30 91 73 23 	lds	r19, 0x2373
    4c52:	28 17       	cp	r18, r24
    4c54:	39 07       	cpc	r19, r25
    4c56:	69 f4       	brne	.+26     	; 0x4c72 <free+0x126>
    4c58:	30 97       	sbiw	r30, 0x00	; 0
    4c5a:	29 f4       	brne	.+10     	; 0x4c66 <free+0x11a>
    4c5c:	10 92 74 23 	sts	0x2374, r1
    4c60:	10 92 75 23 	sts	0x2375, r1
    4c64:	02 c0       	rjmp	.+4      	; 0x4c6a <free+0x11e>
    4c66:	12 82       	std	Z+2, r1	; 0x02
    4c68:	13 82       	std	Z+3, r1	; 0x03
    4c6a:	00 93 72 23 	sts	0x2372, r16
    4c6e:	10 93 73 23 	sts	0x2373, r17
    4c72:	df 91       	pop	r29
    4c74:	cf 91       	pop	r28
    4c76:	1f 91       	pop	r17
    4c78:	0f 91       	pop	r16
    4c7a:	08 95       	ret

00004c7c <memcpy>:
    4c7c:	fb 01       	movw	r30, r22
    4c7e:	dc 01       	movw	r26, r24
    4c80:	02 c0       	rjmp	.+4      	; 0x4c86 <memcpy+0xa>
    4c82:	01 90       	ld	r0, Z+
    4c84:	0d 92       	st	X+, r0
    4c86:	41 50       	subi	r20, 0x01	; 1
    4c88:	50 40       	sbci	r21, 0x00	; 0
    4c8a:	d8 f7       	brcc	.-10     	; 0x4c82 <memcpy+0x6>
    4c8c:	08 95       	ret

00004c8e <__do_global_dtors>:
    4c8e:	11 e0       	ldi	r17, 0x01	; 1
    4c90:	cb ec       	ldi	r28, 0xCB	; 203
    4c92:	d1 e0       	ldi	r29, 0x01	; 1
    4c94:	00 e0       	ldi	r16, 0x00	; 0
    4c96:	06 c0       	rjmp	.+12     	; 0x4ca4 <__do_global_dtors+0x16>
    4c98:	80 2f       	mov	r24, r16
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__tablejump2__>
    4ca0:	21 96       	adiw	r28, 0x01	; 1
    4ca2:	01 1d       	adc	r16, r1
    4ca4:	cd 3c       	cpi	r28, 0xCD	; 205
    4ca6:	d1 07       	cpc	r29, r17
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	08 07       	cpc	r16, r24
    4cac:	a9 f7       	brne	.-22     	; 0x4c98 <__do_global_dtors+0xa>
    4cae:	f8 94       	cli

00004cb0 <__stop_program>:
    4cb0:	ff cf       	rjmp	.-2      	; 0x4cb0 <__stop_program>
