
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c4  00802000  00008382  00008416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000036b  008022c4  008022c4  000086da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000086da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000870c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d10  00000000  00000000  0000874c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019603  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006681  00000000  00000000  00022a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000699b  00000000  00000000  000290e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003d24  00000000  00000000  0002fa7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009899  00000000  00000000  000337a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c22b  00000000  00000000  0003d039  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  00049264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__vector_1>
       8:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__vector_2>
       c:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__vector_3>
      10:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__vector_4>
      14:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__vector_5>
      18:	0c 94 5a 1e 	jmp	0x3cb4	; 0x3cb4 <__vector_6>
      1c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__vector_7>
      20:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <__vector_8>
      24:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__vector_9>
      28:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__vector_10>
      2c:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__vector_11>
      30:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__vector_12>
      34:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__vector_13>
      38:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__vector_14>
      3c:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__vector_15>
      40:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__vector_16>
      44:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__vector_17>
      48:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__vector_18>
      4c:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__vector_19>
      50:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__vector_20>
      54:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__vector_21>
      58:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <__vector_22>
      5c:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__vector_23>
      60:	0c 94 cc 21 	jmp	0x4398	; 0x4398 <__vector_24>
      64:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <__vector_25>
      68:	0c 94 2e 22 	jmp	0x445c	; 0x445c <__vector_26>
      6c:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__vector_27>
      70:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__vector_28>
      74:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__vector_29>
      78:	0c 94 f2 22 	jmp	0x45e4	; 0x45e4 <__vector_30>
      7c:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__vector_31>
      80:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__vector_32>
      84:	0c 94 85 23 	jmp	0x470a	; 0x470a <__vector_33>
      88:	0c 94 b6 23 	jmp	0x476c	; 0x476c <__vector_34>
      8c:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <__vector_35>
      90:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__vector_36>
      94:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__vector_37>
      98:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__vector_38>
      9c:	0c 94 ab 24 	jmp	0x4956	; 0x4956 <__vector_39>
      a0:	0c 94 dc 24 	jmp	0x49b8	; 0x49b8 <__vector_40>
      a4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__vector_41>
      a8:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__vector_42>
      ac:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__vector_43>
      b0:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__vector_44>
      b4:	0c 94 d1 25 	jmp	0x4ba2	; 0x4ba2 <__vector_45>
      b8:	0c 94 02 26 	jmp	0x4c04	; 0x4c04 <__vector_46>
      bc:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <__vector_47>
      c0:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_48>
      c4:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__vector_49>
      c8:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__vector_50>
      cc:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__vector_51>
      d0:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__vector_52>
      d4:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__vector_53>
      d8:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <__vector_54>
      dc:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__vector_55>
      e0:	0c 94 ec 27 	jmp	0x4fd8	; 0x4fd8 <__vector_56>
      e4:	0c 94 1d 28 	jmp	0x503a	; 0x503a <__vector_57>
      e8:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__vector_58>
      ec:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_59>
      f0:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <__vector_60>
      f4:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <__vector_61>
      f8:	0c 94 12 29 	jmp	0x5224	; 0x5224 <__vector_62>
      fc:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__vector_63>
     100:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__vector_64>
     104:	0c 94 a5 29 	jmp	0x534a	; 0x534a <__vector_65>
     108:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__vector_66>
     10c:	0c 94 07 2a 	jmp	0x540e	; 0x540e <__vector_67>
     110:	0c 94 38 2a 	jmp	0x5470	; 0x5470 <__vector_68>
     114:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__vector_69>
     118:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__vector_70>
     11c:	0c 94 cb 2a 	jmp	0x5596	; 0x5596 <__vector_71>
     120:	0c 94 fc 2a 	jmp	0x55f8	; 0x55f8 <__vector_72>
     124:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <__vector_73>
     128:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 8f 2b 	jmp	0x571e	; 0x571e <__vector_77>
     138:	0c 94 c0 2b 	jmp	0x5780	; 0x5780 <__vector_78>
     13c:	0c 94 f1 2b 	jmp	0x57e2	; 0x57e2 <__vector_79>
     140:	0c 94 22 2c 	jmp	0x5844	; 0x5844 <__vector_80>
     144:	0c 94 53 2c 	jmp	0x58a6	; 0x58a6 <__vector_81>
     148:	0c 94 84 2c 	jmp	0x5908	; 0x5908 <__vector_82>
     14c:	0c 94 b5 2c 	jmp	0x596a	; 0x596a <__vector_83>
     150:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__vector_84>
     154:	0c 94 17 2d 	jmp	0x5a2e	; 0x5a2e <__vector_85>
     158:	0c 94 48 2d 	jmp	0x5a90	; 0x5a90 <__vector_86>
     15c:	0c 94 79 2d 	jmp	0x5af2	; 0x5af2 <__vector_87>
     160:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__vector_88>
     164:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__vector_89>
     168:	0c 94 0c 2e 	jmp	0x5c18	; 0x5c18 <__vector_90>
     16c:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__vector_91>
     170:	0c 94 6e 2e 	jmp	0x5cdc	; 0x5cdc <__vector_92>
     174:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <__vector_104>
     1a4:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <__vector_108>
     1b4:	0c 94 63 2f 	jmp	0x5ec6	; 0x5ec6 <__vector_109>
     1b8:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__vector_110>
     1bc:	0c 94 c5 2f 	jmp	0x5f8a	; 0x5f8a <__vector_111>
     1c0:	0c 94 f6 2f 	jmp	0x5fec	; 0x5fec <__vector_112>
     1c4:	0c 94 27 30 	jmp	0x604e	; 0x604e <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 58 30 	jmp	0x60b0	; 0x60b0 <__vector_119>
     1e0:	0c 94 89 30 	jmp	0x6112	; 0x6112 <__vector_120>
     1e4:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	dc 03       	fmulsu	r21, r20
     1fe:	5e 04       	cpc	r5, r14
     200:	5e 04       	cpc	r5, r14
     202:	d5 03       	fmuls	r21, r21
     204:	5e 04       	cpc	r5, r14
     206:	5e 04       	cpc	r5, r14
     208:	5e 04       	cpc	r5, r14
     20a:	e1 03       	fmuls	r22, r17
     20c:	3c 04       	cpc	r3, r12
     20e:	5e 04       	cpc	r5, r14
     210:	e8 03       	fmulsu	r22, r16
     212:	5e 04       	cpc	r5, r14
     214:	ef 03       	fmulsu	r22, r23
     216:	5e 04       	cpc	r5, r14
     218:	f6 03       	fmuls	r23, r22
     21a:	5e 04       	cpc	r5, r14
     21c:	fd 03       	fmulsu	r23, r21
     21e:	5e 04       	cpc	r5, r14
     220:	5e 04       	cpc	r5, r14
     222:	5e 04       	cpc	r5, r14
     224:	5e 04       	cpc	r5, r14
     226:	5e 04       	cpc	r5, r14
     228:	04 04       	cpc	r0, r4
     22a:	0b 04       	cpc	r0, r11
     22c:	12 04       	cpc	r1, r2
     22e:	19 04       	cpc	r1, r9
     230:	2e 04       	cpc	r2, r14
     232:	5e 04       	cpc	r5, r14
     234:	20 04       	cpc	r2, r0
     236:	5e 04       	cpc	r5, r14
     238:	35 04       	cpc	r3, r5
     23a:	5e 04       	cpc	r5, r14
     23c:	5e 04       	cpc	r5, r14
     23e:	5e 04       	cpc	r5, r14
     240:	5e 04       	cpc	r5, r14
     242:	5e 04       	cpc	r5, r14
     244:	5e 04       	cpc	r5, r14
     246:	27 04       	cpc	r2, r7
     248:	5e 04       	cpc	r5, r14
     24a:	51 04       	cpc	r5, r1
     24c:	43 04       	cpc	r4, r3
     24e:	4a 04       	cpc	r4, r10
     250:	5e 04       	cpc	r5, r14
     252:	5e 04       	cpc	r5, r14
     254:	5e 04       	cpc	r5, r14
     256:	5e 04       	cpc	r5, r14
     258:	5e 04       	cpc	r5, r14
     25a:	58 04       	cpc	r5, r8
     25c:	8a 04       	cpc	r8, r10
     25e:	90 04       	cpc	r9, r0
     260:	96 04       	cpc	r9, r6
     262:	9c 04       	cpc	r9, r12
     264:	a2 04       	cpc	r10, r2
     266:	1f 05       	cpc	r17, r15
     268:	a8 04       	cpc	r10, r8
     26a:	ae 04       	cpc	r10, r14
     26c:	1f 05       	cpc	r17, r15
     26e:	bd 04       	cpc	r11, r13
     270:	c3 04       	cpc	r12, r3
     272:	c9 04       	cpc	r12, r9
     274:	cf 04       	cpc	r12, r15
     276:	d5 04       	cpc	r13, r5
     278:	db 04       	cpc	r13, r11
     27a:	e1 04       	cpc	r14, r1
     27c:	e7 04       	cpc	r14, r7
     27e:	ed 04       	cpc	r14, r13
     280:	68 35       	cpi	r22, 0x58	; 88
     282:	68 35       	cpi	r22, 0x58	; 88
     284:	72 35       	cpi	r23, 0x52	; 82
     286:	7c 35       	cpi	r23, 0x5C	; 92
     288:	8c 35       	cpi	r24, 0x5C	; 92
     28a:	dc 35       	cpi	r29, 0x5C	; 92
     28c:	e6 35       	cpi	r30, 0x56	; 86
     28e:	1b 36       	cpi	r17, 0x6B	; 107
     290:	1b 36       	cpi	r17, 0x6B	; 107
     292:	19 36       	cpi	r17, 0x69	; 105
     294:	19 36       	cpi	r17, 0x69	; 105

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 72 35 	jmp	0x6ae4	; 0x6ae4 <_ZN9CMBSender13OnReceiveByteEh+0x3a>
     2a2:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2a6:	0c 94 dc 35 	jmp	0x6bb8	; 0x6bb8 <_ZN9CMBSender13OnReceiveByteEh+0x10e>
     2aa:	0c 94 c2 37 	jmp	0x6f84	; 0x6f84 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2ae:	0c 94 cb 3d 	jmp	0x7b96	; 0x7b96 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     2b2:	0c 94 b8 3b 	jmp	0x7770	; 0x7770 <_ZN8CTimerC18SetCOMPBEj>
     2b6:	0c 94 a0 3b 	jmp	0x7740	; 0x7740 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     2ba:	0c 94 45 3b 	jmp	0x768a	; 0x768a <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2be:	0c 94 57 3c 	jmp	0x78ae	; 0x78ae <_ZN7CTimerD9SetPeriodEj>
     2c2:	0c 94 70 3d 	jmp	0x7ae0	; 0x7ae0 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2c6:	0c 94 aa 37 	jmp	0x6f54	; 0x6f54 <_ZN10CDGUSUSART11IsReceivingEv>
     2ca:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2ce:	0c 94 c7 34 	jmp	0x698e	; 0x698e <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2d2:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xea>
     2d6:	0c 94 51 3e 	jmp	0x7ca2	; 0x7ca2 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2da:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <_ZN7CTimerD8SetCOMPBEj>
     2de:	0c 94 1e 36 	jmp	0x6c3c	; 0x6c3c <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2e2:	0c 94 4c 34 	jmp	0x6898	; 0x6898 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2e6:	0c 94 ae 3b 	jmp	0x775c	; 0x775c <_ZN8CTimerC19SetPeriodEj>
     2ea:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2ee:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     2f2:	0c 94 ed 3d 	jmp	0x7bda	; 0x7bda <_ZN7CTimerF8SetCOMPBEj>
     2f6:	0c 94 e6 3a 	jmp	0x75cc	; 0x75cc <_ZN7CTimerC8SetCOMPCEj>
     2fa:	0c 94 5c 3c 	jmp	0x78b8	; 0x78b8 <_ZN7CTimerD8SetCOMPAEj>
     2fe:	0c 94 8a 04 	jmp	0x914	; 0x914 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x54>
     302:	0c 94 f3 3b 	jmp	0x77e6	; 0x77e6 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     306:	0c 94 eb 3a 	jmp	0x75d6	; 0x75d6 <_ZN7CTimerC8SetCOMPDEj>
     30a:	0c 94 b0 3d 	jmp	0x7b60	; 0x7b60 <_ZN7CTimerF5StartEj>
     30e:	0c 94 38 3d 	jmp	0x7a70	; 0x7a70 <_ZN8CTimerD18SetCOMPBEj>
     312:	0c 94 81 3b 	jmp	0x7702	; 0x7702 <_ZN8CTimerC15StartEj>
     316:	0c 94 ae 04 	jmp	0x95c	; 0x95c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9c>
     31a:	0c 94 4e 3d 	jmp	0x7a9c	; 0x7a9c <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     31e:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <_ZN4CSPI16StaticOnTransmitEPv>
     322:	0c 94 cf 3b 	jmp	0x779e	; 0x779e <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     326:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     32a:	0c 94 c9 04 	jmp	0x992	; 0x992 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xd2>
     32e:	0c 94 01 3d 	jmp	0x7a02	; 0x7a02 <_ZN8CTimerD15StartEj>
     332:	0c 94 87 33 	jmp	0x670e	; 0x670e <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     336:	0c 94 a7 3b 	jmp	0x774e	; 0x774e <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     33a:	0c 94 b1 37 	jmp	0x6f62	; 0x6f62 <_ZN10CDGUSUSART11IsDataEmptyEv>
     33e:	0c 94 d2 3d 	jmp	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     342:	0c 94 a2 37 	jmp	0x6f44	; 0x6f44 <_ZN10CDGUSUSART14IsTransmittingEv>
     346:	0c 94 b4 3c 	jmp	0x7968	; 0x7968 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     34a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     34e:	0c 94 f2 3d 	jmp	0x7be4	; 0x7be4 <_ZN7CTimerF8SetCOMPCEj>
     352:	0c 94 81 3c 	jmp	0x7902	; 0x7902 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     356:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     35a:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x11a>
     35e:	0c 94 96 04 	jmp	0x92c	; 0x92c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6c>
     362:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     366:	0c 94 d0 3a 	jmp	0x75a0	; 0x75a0 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     36a:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
     36e:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     372:	0c 94 cb 37 	jmp	0x6f96	; 0x6f96 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     376:	0c 94 ea 3c 	jmp	0x79d4	; 0x79d4 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     37a:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     37e:	0c 94 c9 3a 	jmp	0x7592	; 0x7592 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     382:	0c 94 c5 3d 	jmp	0x7b8a	; 0x7b8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     386:	0c 94 66 3c 	jmp	0x78cc	; 0x78cc <_ZN7CTimerD8SetCOMPCEj>
     38a:	0c 94 1e 3e 	jmp	0x7c3c	; 0x7c3c <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     38e:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xde>
     392:	0c 94 c3 04 	jmp	0x986	; 0x986 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc6>
     396:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     39a:	0c 94 b8 34 	jmp	0x6970	; 0x6970 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     39e:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     3a2:	0c 94 c1 3a 	jmp	0x7582	; 0x7582 <_ZN7CTimerC4StopEv>
     3a6:	0c 94 40 3e 	jmp	0x7c80	; 0x7c80 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3aa:	0c 94 b4 3a 	jmp	0x7568	; 0x7568 <_ZN7CTimerC5StartEj>
     3ae:	0c 94 e1 3b 	jmp	0x77c2	; 0x77c2 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3b2:	0c 94 50 3c 	jmp	0x78a0	; 0x78a0 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     3b6:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <_ZN8CTimerC18SetCOMPAEj>
     3ba:	0c 94 eb 30 	jmp	0x61d6	; 0x61d6 <__cxa_pure_virtual>
     3be:	0c 94 19 3c 	jmp	0x7832	; 0x7832 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3c2:	0c 94 d7 3a 	jmp	0x75ae	; 0x75ae <_ZN7CTimerC9SetPeriodEj>
     3c6:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     3ca:	0c 94 2e 3d 	jmp	0x7a5c	; 0x7a5c <_ZN8CTimerD19SetPeriodEj>
     3ce:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3d2:	0c 94 a8 04 	jmp	0x950	; 0x950 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x90>
     3d6:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xba>
     3da:	0c 94 23 31 	jmp	0x6246	; 0x6246 <_GLOBAL__sub_D_dacSPI>
     3de:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3e2:	0c 94 da 3d 	jmp	0x7bb4	; 0x7bb4 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     3e6:	0c 94 34 3c 	jmp	0x7868	; 0x7868 <_ZN7CTimerD5StartEj>
     3ea:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     3ee:	0c 94 f7 3d 	jmp	0x7bee	; 0x7bee <_ZN7CTimerF8SetCOMPDEj>
     3f2:	0c 94 79 33 	jmp	0x66f2	; 0x66f2 <_ZN16CMBEventsHandler11FreeBuffersEv>
     3f6:	0c 94 2f 3e 	jmp	0x7c5e	; 0x7c5e <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3fa:	0c 94 23 06 	jmp	0xc46	; 0xc46 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     3fe:	0c 94 27 3d 	jmp	0x7a4e	; 0x7a4e <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     402:	0c 94 0e 3d 	jmp	0x7a1c	; 0x7a1c <_ZN8CTimerD14StopEv>
     406:	0c 94 e7 33 	jmp	0x67ce	; 0x67ce <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     40a:	0c 94 8c 35 	jmp	0x6b18	; 0x6b18 <_ZN9CMBSender13OnReceiveByteEh+0x6e>
     40e:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <_ZN8CTimerC14StopEv>
     412:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     416:	0c 94 41 3c 	jmp	0x7882	; 0x7882 <_ZN7CTimerD4StopEv>
     41a:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x142>
     41e:	0c 94 6b 3c 	jmp	0x78d6	; 0x78d6 <_ZN7CTimerD8SetCOMPDEj>
     422:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x14e>
     426:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     42a:	0c 94 a3 3c 	jmp	0x7946	; 0x7946 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     42e:	0c 94 b9 37 	jmp	0x6f72	; 0x6f72 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     432:	0c 94 a2 04 	jmp	0x944	; 0x944 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x84>
     436:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     43a:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     43e:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     442:	0c 94 16 3d 	jmp	0x7a2c	; 0x7a2c <_ZN8CTimerD15ResetEv>
     446:	0c 94 19 36 	jmp	0x6c32	; 0x6c32 <_ZN9CMBSender13OnReceiveByteEh+0x188>
     44a:	0c 94 f0 3a 	jmp	0x75e0	; 0x75e0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44e:	0c 94 70 3c 	jmp	0x78e0	; 0x78e0 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     452:	0c 94 ee 30 	jmp	0x61dc	; 0x61dc <_GLOBAL__sub_I_dacSPI>
     456:	0c 94 e8 3d 	jmp	0x7bd0	; 0x7bd0 <_ZN7CTimerF8SetCOMPAEj>
     45a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     45e:	0c 94 e6 35 	jmp	0x6bcc	; 0x6bcc <_ZN9CMBSender13OnReceiveByteEh+0x122>
     462:	0c 94 34 3b 	jmp	0x7668	; 0x7668 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     466:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <_ZN9CMBSender18OnTimeoutInterruptEPv>
     46a:	0c 94 68 35 	jmp	0x6ad0	; 0x6ad0 <_ZN9CMBSender13OnReceiveByteEh+0x26>
     46e:	0c 94 aa 36 	jmp	0x6d54	; 0x6d54 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     472:	0c 94 c4 32 	jmp	0x6588	; 0x6588 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     476:	0c 94 61 37 	jmp	0x6ec2	; 0x6ec2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     47a:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     47e:	0c 94 9c 37 	jmp	0x6f38	; 0x6f38 <_ZN10CDGUSUSART15GetReceivedByteEv>
     482:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     486:	0c 94 22 06 	jmp	0xc44	; 0xc44 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     48a:	0c 94 9f 37 	jmp	0x6f3e	; 0x6f3e <_ZN10CDGUSUSART19SetTransmittingByteEh>
     48e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     492:	0c 94 92 3c 	jmp	0x7924	; 0x7924 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     496:	0c 94 d4 37 	jmp	0x6fa8	; 0x6fa8 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     49a:	0c 94 bd 3d 	jmp	0x7b7a	; 0x7b7a <_ZN7CTimerF4StopEv>
     49e:	0c 94 33 3d 	jmp	0x7a66	; 0x7a66 <_ZN8CTimerD18SetCOMPAEj>
     4a2:	0c 94 6a 3b 	jmp	0x76d4	; 0x76d4 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4a6:	0c 94 01 3b 	jmp	0x7602	; 0x7602 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4aa:	0c 94 fc 3d 	jmp	0x7bf8	; 0x7bf8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4ae:	0c 94 e1 3a 	jmp	0x75c2	; 0x75c2 <_ZN7CTimerC8SetCOMPBEj>
     4b2:	0c 94 5e 37 	jmp	0x6ebc	; 0x6ebc <_ZN9CMBSender21OnTransactionCallbackEPhj>
     4b6:	0c 94 95 3d 	jmp	0x7b2a	; 0x7b2a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4ba:	0c 94 12 3b 	jmp	0x7624	; 0x7624 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4be:	0c 94 96 3b 	jmp	0x772c	; 0x772c <_ZN8CTimerC15ResetEv>
     4c2:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4c6:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4ca:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     4ce:	0c 94 dc 3a 	jmp	0x75b8	; 0x75b8 <_ZN7CTimerC8SetCOMPAEj>
     4d2:	0c 94 e3 3d 	jmp	0x7bc6	; 0x7bc6 <_ZN7CTimerF9SetPeriodEj>
     4d6:	0c 94 90 04 	jmp	0x920	; 0x920 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x60>
     4da:	0c 94 9c 04 	jmp	0x938	; 0x938 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x78>
     4de:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4e2:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     4e6:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4ea:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf6>
     4ee:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     4f2:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4f6:	0c 94 7c 35 	jmp	0x6af8	; 0x6af8 <_ZN9CMBSender13OnReceiveByteEh+0x4e>
     4fa:	0c 94 c5 3c 	jmp	0x798a	; 0x798a <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     4fe:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10e>
     502:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     506:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     50a:	0c 94 49 3c 	jmp	0x7892	; 0x7892 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     50e:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     512:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>

00000516 <__ctors_start>:
     516:	ee 30       	cpi	r30, 0x0E	; 14

00000518 <__ctors_end>:
     518:	23 31       	cpi	r18, 0x13	; 19

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	e2 e8       	ldi	r30, 0x82	; 130
     532:	f3 e8       	ldi	r31, 0x83	; 131
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 3c       	cpi	r26, 0xC4	; 196
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	26 e2       	ldi	r18, 0x26	; 38
     546:	a4 ec       	ldi	r26, 0xC4	; 196
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	af 32       	cpi	r26, 0x2F	; 47
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 10 40 	call	0x8020	; 0x8020 <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 51 32 	call	0x64a2	; 0x64a2 <main>
     578:	0c 94 af 41 	jmp	0x835e	; 0x835e <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <DatabaseStatusRegister>
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	90 c0       	rjmp	.+288    	; 0x8bc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x14e>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 10 40 	jmp	0x8020	; 0x8020 <__tablejump2__>
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	1c 96       	adiw	r26, 0x0c	; 12
     7b0:	8d 93       	st	X+, r24
     7b2:	9c 93       	st	X, r25
     7b4:	1d 97       	sbiw	r26, 0x0d	; 13
     7b6:	08 95       	ret
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	1d 92       	st	X+, r1
     7bc:	1c 92       	st	X, r1
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e2       	ldi	r25, 0x20	; 32
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e3       	ldi	r25, 0x30	; 48
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e1       	ldi	r25, 0x10	; 16
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e4       	ldi	r25, 0x40	; 64
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	95 e0       	ldi	r25, 0x05	; 5
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	96 e0       	ldi	r25, 0x06	; 6
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	97 e0       	ldi	r25, 0x07	; 7
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e4       	ldi	r24, 0x40	; 64
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	1c 96       	adiw	r26, 0x0c	; 12
     8b6:	8d 93       	st	X+, r24
     8b8:	9c 93       	st	X, r25
     8ba:	1d 97       	sbiw	r26, 0x0d	; 13
     8bc:	08 95       	ret

000008be <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
     8be:	08 95       	ret

000008c0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	8b 01       	movw	r16, r22
     8d8:	7a 01       	movw	r14, r20
     8da:	69 01       	movw	r12, r18
     8dc:	fa 01       	movw	r30, r20
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_Z4swapj>
     8e6:	9c 01       	movw	r18, r24
     8e8:	fe 01       	movw	r30, r28
     8ea:	e4 50       	subi	r30, 0x04	; 4
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	a0 80       	ld	r10, Z
     8f0:	b1 80       	ldd	r11, Z+1	; 0x01
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	cf 16       	cp	r12, r31
     8f6:	d1 04       	cpc	r13, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3c>
     8fa:	75 c0       	rjmp	.+234    	; 0x9e6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x126>
     8fc:	f8 01       	movw	r30, r16
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	e2 31       	cpi	r30, 0x12	; 18
     902:	f1 05       	cpc	r31, r1
     904:	08 f0       	brcs	.+2      	; 0x908 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x48>
     906:	9b c0       	rjmp	.+310    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     908:	88 27       	eor	r24, r24
     90a:	e2 5d       	subi	r30, 0xD2	; 210
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	8f 4f       	sbci	r24, 0xFF	; 255
     910:	0c 94 10 40 	jmp	0x8020	; 0x8020 <__tablejump2__>
     914:	fe 01       	movw	r30, r28
     916:	e0 51       	subi	r30, 0x10	; 16
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	20 83       	st	Z, r18
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	8f c0       	rjmp	.+286    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     920:	fe 01       	movw	r30, r28
     922:	ee 50       	subi	r30, 0x0E	; 14
     924:	ff 4f       	sbci	r31, 0xFF	; 255
     926:	20 83       	st	Z, r18
     928:	31 83       	std	Z+1, r19	; 0x01
     92a:	89 c0       	rjmp	.+274    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     92c:	fe 01       	movw	r30, r28
     92e:	ec 50       	subi	r30, 0x0C	; 12
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	20 83       	st	Z, r18
     934:	31 83       	std	Z+1, r19	; 0x01
     936:	83 c0       	rjmp	.+262    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     938:	fe 01       	movw	r30, r28
     93a:	ea 50       	subi	r30, 0x0A	; 10
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	20 83       	st	Z, r18
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	7d c0       	rjmp	.+250    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     944:	fe 01       	movw	r30, r28
     946:	e8 50       	subi	r30, 0x08	; 8
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	20 83       	st	Z, r18
     94c:	31 83       	std	Z+1, r19	; 0x01
     94e:	77 c0       	rjmp	.+238    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     950:	fe 01       	movw	r30, r28
     952:	e6 50       	subi	r30, 0x06	; 6
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	20 83       	st	Z, r18
     958:	31 83       	std	Z+1, r19	; 0x01
     95a:	71 c0       	rjmp	.+226    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     95c:	f7 01       	movw	r30, r14
     95e:	60 81       	ld	r22, Z
     960:	71 81       	ldd	r23, Z+1	; 0x01
     962:	82 81       	ldd	r24, Z+2	; 0x02
     964:	93 81       	ldd	r25, Z+3	; 0x03
     966:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z6swap32m>
     96a:	fe 01       	movw	r30, r28
     96c:	e6 52       	subi	r30, 0x26	; 38
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	60 83       	st	Z, r22
     972:	71 83       	std	Z+1, r23	; 0x01
     974:	82 83       	std	Z+2, r24	; 0x02
     976:	93 83       	std	Z+3, r25	; 0x03
     978:	62 c0       	rjmp	.+196    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     97a:	fe 01       	movw	r30, r28
     97c:	ee 5f       	subi	r30, 0xFE	; 254
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	20 83       	st	Z, r18
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	5c c0       	rjmp	.+184    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     986:	fe 01       	movw	r30, r28
     988:	ec 5f       	subi	r30, 0xFC	; 252
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	20 83       	st	Z, r18
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	56 c0       	rjmp	.+172    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     992:	fe 01       	movw	r30, r28
     994:	ea 5f       	subi	r30, 0xFA	; 250
     996:	fe 4f       	sbci	r31, 0xFE	; 254
     998:	20 83       	st	Z, r18
     99a:	31 83       	std	Z+1, r19	; 0x01
     99c:	50 c0       	rjmp	.+160    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     99e:	fe 01       	movw	r30, r28
     9a0:	e8 5f       	subi	r30, 0xF8	; 248
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	20 83       	st	Z, r18
     9a6:	31 83       	std	Z+1, r19	; 0x01
     9a8:	4a c0       	rjmp	.+148    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9aa:	fe 01       	movw	r30, r28
     9ac:	e6 5f       	subi	r30, 0xF6	; 246
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	20 83       	st	Z, r18
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	44 c0       	rjmp	.+136    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9b6:	fe 01       	movw	r30, r28
     9b8:	e4 5f       	subi	r30, 0xF4	; 244
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	20 83       	st	Z, r18
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	3e c0       	rjmp	.+124    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9c2:	fe 01       	movw	r30, r28
     9c4:	e2 5f       	subi	r30, 0xF2	; 242
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	20 83       	st	Z, r18
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	38 c0       	rjmp	.+112    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9ce:	fe 01       	movw	r30, r28
     9d0:	e0 5f       	subi	r30, 0xF0	; 240
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	20 83       	st	Z, r18
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	32 c0       	rjmp	.+100    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9da:	fe 01       	movw	r30, r28
     9dc:	ee 5e       	subi	r30, 0xEE	; 238
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	20 83       	st	Z, r18
     9e2:	31 83       	std	Z+1, r19	; 0x01
     9e4:	2c c0       	rjmp	.+88     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9e6:	01 30       	cpi	r16, 0x01	; 1
     9e8:	11 05       	cpc	r17, r1
     9ea:	51 f4       	brne	.+20     	; 0xa00 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x140>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	a6 01       	movw	r20, r12
     9f2:	b7 01       	movw	r22, r14
     9f4:	ce 01       	movw	r24, r28
     9f6:	80 51       	subi	r24, 0x10	; 16
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
     9fa:	0e 94 94 1c 	call	0x3928	; 0x3928 <_Z11ConvertDataPvS_jj>
     9fe:	1f c0       	rjmp	.+62     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a00:	05 30       	cpi	r16, 0x05	; 5
     a02:	11 05       	cpc	r17, r1
     a04:	51 f4       	brne	.+20     	; 0xa1a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x15a>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a6 01       	movw	r20, r12
     a0c:	b7 01       	movw	r22, r14
     a0e:	ce 01       	movw	r24, r28
     a10:	88 50       	subi	r24, 0x08	; 8
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	0e 94 94 1c 	call	0x3928	; 0x3928 <_Z11ConvertDataPvS_jj>
     a18:	12 c0       	rjmp	.+36     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a1a:	02 30       	cpi	r16, 0x02	; 2
     a1c:	11 05       	cpc	r17, r1
     a1e:	79 f4       	brne	.+30     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a20:	8e 85       	ldd	r24, Y+14	; 0x0e
     a22:	86 30       	cpi	r24, 0x06	; 6
     a24:	50 f4       	brcc	.+20     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	a6 01       	movw	r20, r12
     a2c:	b7 01       	movw	r22, r14
     a2e:	ce 01       	movw	r24, r28
     a30:	8e 50       	subi	r24, 0x0E	; 14
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	0e 94 94 1c 	call	0x3928	; 0x3928 <_Z11ConvertDataPvS_jj>
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a3a:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <_ZN11CLaserBoard4BeepEv>
     a3e:	c4 50       	subi	r28, 0x04	; 4
     a40:	df 4f       	sbci	r29, 0xFF	; 255
     a42:	a8 82       	st	Y, r10
     a44:	b9 82       	std	Y+1, r11	; 0x01
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	08 95       	ret

00000a5c <_Z13NormalizeStepRjS_S_jPj>:
     a5c:	8f 92       	push	r8
     a5e:	9f 92       	push	r9
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	6c 01       	movw	r12, r24
     a76:	fb 01       	movw	r30, r22
     a78:	7a 01       	movw	r14, r20
     a7a:	dc 01       	movw	r26, r24
     a7c:	8d 90       	ld	r8, X+
     a7e:	9c 90       	ld	r9, X
     a80:	da 01       	movw	r26, r20
     a82:	cd 91       	ld	r28, X+
     a84:	dc 91       	ld	r29, X
     a86:	c4 01       	movw	r24, r8
     a88:	be 01       	movw	r22, r28
     a8a:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
     a8e:	6c 9f       	mul	r22, r28
     a90:	50 01       	movw	r10, r0
     a92:	6d 9f       	mul	r22, r29
     a94:	b0 0c       	add	r11, r0
     a96:	7c 9f       	mul	r23, r28
     a98:	b0 0c       	add	r11, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	c0 81       	ld	r28, Z
     a9e:	d1 81       	ldd	r29, Z+1	; 0x01
     aa0:	c8 19       	sub	r28, r8
     aa2:	d9 09       	sbc	r29, r9
     aa4:	f8 01       	movw	r30, r16
     aa6:	60 81       	ld	r22, Z
     aa8:	71 81       	ldd	r23, Z+1	; 0x01
     aaa:	d7 01       	movw	r26, r14
     aac:	6d 93       	st	X+, r22
     aae:	7c 93       	st	X, r23
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
     ab6:	26 17       	cp	r18, r22
     ab8:	37 07       	cpc	r19, r23
     aba:	60 f4       	brcc	.+24     	; 0xad4 <_Z13NormalizeStepRjS_S_jPj+0x78>
     abc:	32 96       	adiw	r30, 0x02	; 2
     abe:	61 91       	ld	r22, Z+
     ac0:	71 91       	ld	r23, Z+
     ac2:	d7 01       	movw	r26, r14
     ac4:	6d 93       	st	X+, r22
     ac6:	7c 93       	st	X, r23
     ac8:	ce 01       	movw	r24, r28
     aca:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
     ace:	26 17       	cp	r18, r22
     ad0:	37 07       	cpc	r19, r23
     ad2:	a8 f3       	brcs	.-22     	; 0xabe <_Z13NormalizeStepRjS_S_jPj+0x62>
     ad4:	f6 01       	movw	r30, r12
     ad6:	a0 82       	st	Z, r10
     ad8:	b1 82       	std	Z+1, r11	; 0x01
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <_ZN16CLaserControlAppC1Ev>:
     af4:	2e e7       	ldi	r18, 0x7E	; 126
     af6:	31 e2       	ldi	r19, 0x21	; 33
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	31 83       	std	Z+1, r19	; 0x01
     afe:	08 95       	ret

00000b00 <_ZN16CLaserControlAppD1Ev>:
     b00:	2e e7       	ldi	r18, 0x7E	; 126
     b02:	31 e2       	ldi	r19, 0x21	; 33
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
     b08:	31 83       	std	Z+1, r19	; 0x01
     b0a:	0e 94 b7 34 	call	0x696e	; 0x696e <_ZN16CMBEventsHandlerD1Ev>
     b0e:	08 95       	ret

00000b10 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>:
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	fc 01       	movw	r30, r24
     b1e:	e8 52       	subi	r30, 0x28	; 40
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	60 81       	ld	r22, Z
     b24:	71 81       	ldd	r23, Z+1	; 0x01
     b26:	cb 01       	movw	r24, r22
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	05 2e       	mov	r0, r21
     b32:	5a e0       	ldi	r21, 0x0A	; 10
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	88 1f       	adc	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	5a 95       	dec	r21
     b3e:	d1 f7       	brne	.-12     	; 0xb34 <_ZN16CLaserControlApp18SetLaserDiodePowerEv+0x24>
     b40:	50 2d       	mov	r21, r0
     b42:	24 ef       	ldi	r18, 0xF4	; 244
     b44:	31 e0       	ldi	r19, 0x01	; 1
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
     b4e:	c9 01       	movw	r24, r18
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	6f ef       	ldi	r22, 0xFF	; 255
     b5a:	7f e0       	ldi	r23, 0x0F	; 15
     b5c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <_Z3minjj>
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	42 e0       	ldi	r20, 0x02	; 2
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	85 e2       	ldi	r24, 0x25	; 37
     b70:	96 e2       	ldi	r25, 0x26	; 38
     b72:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_ZN4CSPI4SendEPhj>
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <_ZN16CLaserControlApp11GetVariableEjj>:
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ec 01       	movw	r28, r24
     b86:	c8 5d       	subi	r28, 0xD8	; 216
     b88:	de 4f       	sbci	r29, 0xFE	; 254
     b8a:	88 81       	ld	r24, Y
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     b92:	88 81       	ld	r24, Y
     b94:	99 81       	ldd	r25, Y+1	; 0x01
     b96:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     b9a:	88 81       	ld	r24, Y
     b9c:	99 81       	ldd	r25, Y+1	; 0x01
     b9e:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <_ZN9CMBSender18WaitMODBUSListenerEv>
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
     bae:	c8 5d       	subi	r28, 0xD8	; 216
     bb0:	de 4f       	sbci	r29, 0xFE	; 254
     bb2:	88 81       	ld	r24, Y
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	1f 92       	push	r1
     bd2:	1f 92       	push	r1
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	8c 01       	movw	r16, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_Z4swapj>
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	9a 83       	std	Y+2, r25	; 0x02
     be4:	08 5d       	subi	r16, 0xD8	; 216
     be6:	1e 4f       	sbci	r17, 0xFE	; 254
     be8:	22 e0       	ldi	r18, 0x02	; 2
     bea:	ae 01       	movw	r20, r28
     bec:	4f 5f       	subi	r20, 0xFF	; 255
     bee:	5f 4f       	sbci	r21, 0xFF	; 255
     bf0:	63 e0       	ldi	r22, 0x03	; 3
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     bfc:	f8 01       	movw	r30, r16
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     c14:	fc 01       	movw	r30, r24
     c16:	83 89       	ldd	r24, Z+19	; 0x13
     c18:	88 23       	and	r24, r24
     c1a:	21 f0       	breq	.+8      	; 0xc24 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     c1c:	85 ee       	ldi	r24, 0xE5	; 229
     c1e:	95 e2       	ldi	r25, 0x25	; 37
     c20:	0e 94 ae 39 	call	0x735c	; 0x735c <_ZN11CLaserBoard6PWMOffEv>
     c24:	08 95       	ret

00000c26 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     c26:	fc 01       	movw	r30, r24
     c28:	83 89       	ldd	r24, Z+19	; 0x13
     c2a:	88 23       	and	r24, r24
     c2c:	21 f0       	breq	.+8      	; 0xc36 <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     c2e:	85 ee       	ldi	r24, 0xE5	; 229
     c30:	95 e2       	ldi	r25, 0x25	; 37
     c32:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN11CLaserBoard5PWMOnEv>
     c36:	08 95       	ret

00000c38 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     c38:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     c3c:	08 95       	ret

00000c3e <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     c3e:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     c44:	08 95       	ret

00000c46 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     c46:	08 95       	ret

00000c48 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     c48:	08 95       	ret

00000c4a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>:
	update = true;	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
}

void CLaserControlApp::UpdateLimits(uint16_t freq, uint16_t duration, uint16_t energy, APP_PROFILE mode)
{
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	6b 01       	movw	r12, r22
     c64:	7a 01       	movw	r14, r20
	bool UpdateFreq = false;
	switch (mode)
     c66:	02 30       	cpi	r16, 0x02	; 2
     c68:	81 f0       	breq	.+32     	; 0xc8a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x40>
     c6a:	18 f4       	brcc	.+6      	; 0xc72 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x28>
     c6c:	01 30       	cpi	r16, 0x01	; 1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x32>
     c70:	33 c0       	rjmp	.+102    	; 0xcd8 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
     c72:	03 30       	cpi	r16, 0x03	; 3
     c74:	b9 f0       	breq	.+46     	; 0xca4 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x5a>
     c76:	04 30       	cpi	r16, 0x04	; 4
     c78:	11 f1       	breq	.+68     	; 0xcbe <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x74>
     c7a:	2e c0       	rjmp	.+92     	; 0xcd8 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:		
			pstGUI[mode].m_wMinFreq = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	88 af       	std	Y+56, r24	; 0x38
     c82:	99 af       	std	Y+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     c84:	8e ab       	std	Y+54, r24	; 0x36
     c86:	9f ab       	std	Y+55, r25	; 0x37
     c88:	44 c0       	rjmp	.+136    	; 0xd12 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc8>
			UpdateFreq = true;
			break;
		case PROFILE_SLOW:			
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	fe 01       	movw	r30, r28
     c90:	ee 5a       	subi	r30, 0xAE	; 174
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	80 83       	st	Z, r24
     c96:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	32 97       	sbiw	r30, 0x02	; 2
     c9e:	80 83       	st	Z, r24
     ca0:	91 83       	std	Z+1, r25	; 0x01
			break;
     ca2:	1d c0       	rjmp	.+58     	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
		case PROFILE_MEDIUM:		
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	fe 01       	movw	r30, r28
     caa:	e4 59       	subi	r30, 0x94	; 148
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 83       	st	Z, r24
     cb0:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	32 97       	sbiw	r30, 0x02	; 2
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
			break;
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     cbe:	86 e0       	ldi	r24, 0x06	; 6
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	fe 01       	movw	r30, r28
     cc4:	ea 57       	subi	r30, 0x7A	; 122
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 83       	st	Z, r24
     cca:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     ccc:	8a e0       	ldi	r24, 0x0A	; 10
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	32 97       	sbiw	r30, 0x02	; 2
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
			break;
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
	}
	if (mode != PROFILE_SINGLE)	
     cd8:	01 30       	cpi	r16, 0x01	; 1
     cda:	09 f4       	brne	.+2      	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
     cdc:	b2 c0       	rjmp	.+356    	; 0xe42 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x1f8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
     cde:	80 2f       	mov	r24, r16
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fe 01       	movw	r30, r28
     ce4:	2a e1       	ldi	r18, 0x1A	; 26
     ce6:	02 9f       	mul	r16, r18
     ce8:	e0 0d       	add	r30, r0
     cea:	f1 1d       	adc	r31, r1
     cec:	11 24       	eor	r1, r1
     cee:	26 8d       	ldd	r18, Z+30	; 0x1e
     cf0:	37 8d       	ldd	r19, Z+31	; 0x1f
     cf2:	c2 16       	cp	r12, r18
     cf4:	d3 06       	cpc	r13, r19
     cf6:	68 f0       	brcs	.+26     	; 0xd12 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc8>
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
     cf8:	2a e1       	ldi	r18, 0x1A	; 26
     cfa:	28 9f       	mul	r18, r24
     cfc:	f0 01       	movw	r30, r0
     cfe:	29 9f       	mul	r18, r25
     d00:	f0 0d       	add	r31, r0
     d02:	11 24       	eor	r1, r1
     d04:	ec 0f       	add	r30, r28
     d06:	fd 1f       	adc	r31, r29
     d08:	84 8d       	ldd	r24, Z+28	; 0x1c
     d0a:	95 8d       	ldd	r25, Z+29	; 0x1d
     d0c:	8c 15       	cp	r24, r12
     d0e:	9d 05       	cpc	r25, r13
     d10:	28 f4       	brcc	.+10     	; 0xd1c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xd2>
	}
	
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
     d12:	fe 01       	movw	r30, r28
     d14:	ee 50       	subi	r30, 0x0E	; 14
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	c0 82       	st	Z, r12
     d1a:	d1 82       	std	Z+1, r13	; 0x01
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     d1c:	c6 01       	movw	r24, r12
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	fc 01       	movw	r30, r24
     d24:	ec 5d       	subi	r30, 0xDC	; 220
     d26:	fe 4d       	sbci	r31, 0xDE	; 222
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 5f       	subi	r30, 0xF2	; 242
     d30:	fe 4d       	sbci	r31, 0xDE	; 222
     d32:	01 90       	ld	r0, Z+
     d34:	f0 81       	ld	r31, Z
     d36:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     d38:	dc 01       	movw	r26, r24
     d3a:	a8 50       	subi	r26, 0x08	; 8
     d3c:	bf 4d       	sbci	r27, 0xDF	; 223
     d3e:	ad 90       	ld	r10, X+
     d40:	bc 90       	ld	r11, X
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	a4 1a       	sub	r10, r20
     d46:	b1 08       	sbc	r11, r1
     d48:	cf 01       	movw	r24, r30
     d4a:	82 1b       	sub	r24, r18
     d4c:	93 0b       	sbc	r25, r19
     d4e:	b5 01       	movw	r22, r10
     d50:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
	
	if (mode == PROFILE_MEDIUM)
     d54:	03 30       	cpi	r16, 0x03	; 3
     d56:	21 f4       	brne	.+8      	; 0xd60 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
	{
		MinD = 10;
		MaxD = 100;
     d58:	e4 e6       	ldi	r30, 0x64	; 100
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t MaxD = MaxDurationTable[freq];
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
	
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	52 2f       	mov	r21, r18
     d62:	43 2f       	mov	r20, r19
     d64:	2e 15       	cp	r18, r14
     d66:	3f 05       	cpc	r19, r15
     d68:	10 f4       	brcc	.+4      	; 0xd6e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x124>
     d6a:	5e 2d       	mov	r21, r14
     d6c:	4f 2d       	mov	r20, r15
     d6e:	85 2f       	mov	r24, r21
     d70:	94 2f       	mov	r25, r20
     d72:	e8 17       	cp	r30, r24
     d74:	f9 07       	cpc	r31, r25
     d76:	08 f4       	brcc	.+2      	; 0xd7a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x130>
     d78:	cf 01       	movw	r24, r30
     d7a:	e0 2e       	mov	r14, r16
     d7c:	f1 2c       	mov	r15, r1
     d7e:	4e 01       	movw	r8, r28
     d80:	aa e1       	ldi	r26, 0x1A	; 26
     d82:	0a 9f       	mul	r16, r26
     d84:	80 0c       	add	r8, r0
     d86:	91 1c       	adc	r9, r1
     d88:	11 24       	eor	r1, r1
	
	// Update duration helpers
	if (duration < MinD)	duration = MinD;
	if (duration > MaxD)	duration = MaxD;
		
	if ((pstGUI[mode].m_wMinDuration != MinD) || (pstGUI[mode].m_wMaxDuration != MaxD))
     d8a:	d4 01       	movw	r26, r8
     d8c:	5a 96       	adiw	r26, 0x1a	; 26
     d8e:	4d 91       	ld	r20, X+
     d90:	5c 91       	ld	r21, X
     d92:	5b 97       	sbiw	r26, 0x1b	; 27
     d94:	42 17       	cp	r20, r18
     d96:	53 07       	cpc	r21, r19
     d98:	81 f4       	brne	.+32     	; 0xdba <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x170>
     d9a:	0a e1       	ldi	r16, 0x1A	; 26
     d9c:	0e 9d       	mul	r16, r14
     d9e:	a0 01       	movw	r20, r0
     da0:	0f 9d       	mul	r16, r15
     da2:	50 0d       	add	r21, r0
     da4:	11 24       	eor	r1, r1
     da6:	4c 0f       	add	r20, r28
     da8:	5d 1f       	adc	r21, r29
     daa:	da 01       	movw	r26, r20
     dac:	58 96       	adiw	r26, 0x18	; 24
     dae:	4d 91       	ld	r20, X+
     db0:	5c 91       	ld	r21, X
     db2:	59 97       	sbiw	r26, 0x19	; 25
     db4:	4e 17       	cp	r20, r30
     db6:	5f 07       	cpc	r21, r31
     db8:	a1 f0       	breq	.+40     	; 0xde2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x198>
	{
		pstGUI[mode].m_wMinDuration = MinD;
     dba:	d4 01       	movw	r26, r8
     dbc:	5a 96       	adiw	r26, 0x1a	; 26
     dbe:	2d 93       	st	X+, r18
     dc0:	3c 93       	st	X, r19
     dc2:	5b 97       	sbiw	r26, 0x1b	; 27
		pstGUI[mode].m_wMaxDuration = MaxD;	
     dc4:	4a e1       	ldi	r20, 0x1A	; 26
     dc6:	4e 9d       	mul	r20, r14
     dc8:	d0 01       	movw	r26, r0
     dca:	4f 9d       	mul	r20, r15
     dcc:	b0 0d       	add	r27, r0
     dce:	11 24       	eor	r1, r1
     dd0:	ac 0f       	add	r26, r28
     dd2:	bd 1f       	adc	r27, r29
     dd4:	58 96       	adiw	r26, 0x18	; 24
     dd6:	ed 93       	st	X+, r30
     dd8:	fc 93       	st	X, r31
     dda:	59 97       	sbiw	r26, 0x19	; 25
		pstGUI[mode].updateDuration = true;
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	9c 96       	adiw	r26, 0x2c	; 44
     de0:	4c 93       	st	X, r20
	}

	uint16_t index = (duration - MinD) / Delta;
     de2:	82 1b       	sub	r24, r18
     de4:	93 0b       	sbc	r25, r19
     de6:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z3maxjj>
     df2:	b5 01       	movw	r22, r10
     df4:	0e 94 c0 1c 	call	0x3980	; 0x3980 <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
     df8:	4b e0       	ldi	r20, 0x0B	; 11
     dfa:	4c 9d       	mul	r20, r12
     dfc:	90 01       	movw	r18, r0
     dfe:	4d 9d       	mul	r20, r13
     e00:	30 0d       	add	r19, r0
     e02:	11 24       	eor	r1, r1
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ea 5f       	subi	r30, 0xFA	; 250
     e10:	ff 4d       	sbci	r31, 0xDF	; 223
     e12:	20 81       	ld	r18, Z
     e14:	31 81       	ldd	r19, Z+1	; 0x01
     e16:	8a e1       	ldi	r24, 0x1A	; 26
     e18:	8e 9d       	mul	r24, r14
     e1a:	f0 01       	movw	r30, r0
     e1c:	8f 9d       	mul	r24, r15
     e1e:	f0 0d       	add	r31, r0
     e20:	11 24       	eor	r1, r1
     e22:	ec 0f       	add	r30, r28
     e24:	fd 1f       	adc	r31, r29
     e26:	24 8b       	std	Z+20, r18	; 0x14
     e28:	35 8b       	std	Z+21, r19	; 0x15
		
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
     e2a:	40 a1       	ldd	r20, Z+32	; 0x20
     e2c:	51 a1       	ldd	r21, Z+33	; 0x21
		
	if ((pstGUI[mode].m_wMinEnergy_ != Offset) || (pstGUI[mode].m_wMaxEnergy_ != MaxEnergy))
     e2e:	86 89       	ldd	r24, Z+22	; 0x16
     e30:	97 89       	ldd	r25, Z+23	; 0x17
     e32:	84 17       	cp	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	11 f1       	breq	.+68     	; 0xe7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x232>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
     e38:	46 8b       	std	Z+22, r20	; 0x16
     e3a:	57 8b       	std	Z+23, r21	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	85 a7       	std	Z+45, r24	; 0x2d
     e40:	1d c0       	rjmp	.+58     	; 0xe7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x232>
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     e42:	c6 01       	movw	r24, r12
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	fc 01       	movw	r30, r24
     e4a:	ec 5d       	subi	r30, 0xDC	; 220
     e4c:	fe 4d       	sbci	r31, 0xDE	; 222
     e4e:	20 81       	ld	r18, Z
     e50:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     e52:	fc 01       	movw	r30, r24
     e54:	e2 5f       	subi	r30, 0xF2	; 242
     e56:	fe 4d       	sbci	r31, 0xDE	; 222
     e58:	01 90       	ld	r0, Z+
     e5a:	f0 81       	ld	r31, Z
     e5c:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     e5e:	dc 01       	movw	r26, r24
     e60:	a8 50       	subi	r26, 0x08	; 8
     e62:	bf 4d       	sbci	r27, 0xDF	; 223
     e64:	ad 90       	ld	r10, X+
     e66:	bc 90       	ld	r11, X
     e68:	b1 e0       	ldi	r27, 0x01	; 1
     e6a:	ab 1a       	sub	r10, r27
     e6c:	b1 08       	sbc	r11, r1
     e6e:	cf 01       	movw	r24, r30
     e70:	82 1b       	sub	r24, r18
     e72:	93 0b       	sbc	r25, r19
     e74:	b5 01       	movw	r22, r10
     e76:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
     e7a:	72 cf       	rjmp	.-284    	; 0xd60 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
	}
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	08 95       	ret

00000e94 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
     e94:	3f 92       	push	r3
     e96:	4f 92       	push	r4
     e98:	5f 92       	push	r5
     e9a:	6f 92       	push	r6
     e9c:	7f 92       	push	r7
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	2a 97       	sbiw	r28, 0x0a	; 10
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	7c 01       	movw	r14, r24
     ec2:	6b 01       	movw	r12, r22
     ec4:	5a 01       	movw	r10, r20
     ec6:	49 01       	movw	r8, r18
     ec8:	30 2e       	mov	r3, r16
	bool UpdateFreq = false;
	switch (mode)
     eca:	22 e0       	ldi	r18, 0x02	; 2
     ecc:	02 17       	cp	r16, r18
     ece:	01 f1       	breq	.+64     	; 0xf10 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x7c>
     ed0:	20 17       	cp	r18, r16
     ed2:	20 f0       	brcs	.+8      	; 0xedc <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x48>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	04 17       	cp	r16, r20
     ed8:	41 f0       	breq	.+16     	; 0xeea <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x56>
     eda:	41 c0       	rjmp	.+130    	; 0xf5e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	08 17       	cp	r16, r24
     ee0:	21 f1       	breq	.+72     	; 0xf2a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x96>
     ee2:	a4 e0       	ldi	r26, 0x04	; 4
     ee4:	0a 17       	cp	r16, r26
     ee6:	71 f1       	breq	.+92     	; 0xf44 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xb0>
     ee8:	3a c0       	rjmp	.+116    	; 0xf5e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	f7 01       	movw	r30, r14
     ef0:	80 af       	std	Z+56, r24	; 0x38
     ef2:	91 af       	std	Z+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     ef4:	86 ab       	std	Z+54, r24	; 0x36
     ef6:	97 ab       	std	Z+55, r25	; 0x37
			if (freq != 1)
     ef8:	db 01       	movw	r26, r22
     efa:	8d 91       	ld	r24, X+
     efc:	9c 91       	ld	r25, X
     efe:	11 97       	sbiw	r26, 0x01	; 1
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	09 f4       	brne	.+2      	; 0xf06 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x72>
     f04:	9b c1       	rjmp	.+822    	; 0x123c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a8>
			{
				freq = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	8d 93       	st	X+, r24
     f0c:	9c 93       	st	X, r25
     f0e:	97 c1       	rjmp	.+814    	; 0x123e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3aa>
				UpdateFreq = true;
			}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	f7 01       	movw	r30, r14
     f16:	ee 5a       	subi	r30, 0xAE	; 174
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 83       	st	Z, r24
     f1c:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	32 97       	sbiw	r30, 0x02	; 2
     f24:	80 83       	st	Z, r24
     f26:	91 83       	std	Z+1, r25	; 0x01
		break;
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	f7 01       	movw	r30, r14
     f30:	e4 59       	subi	r30, 0x94	; 148
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	32 97       	sbiw	r30, 0x02	; 2
     f3e:	80 83       	st	Z, r24
     f40:	91 83       	std	Z+1, r25	; 0x01
		break;
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	f7 01       	movw	r30, r14
     f4a:	ea 57       	subi	r30, 0x7A	; 122
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 83       	st	Z, r24
     f50:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	32 97       	sbiw	r30, 0x02	; 2
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
		break;
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
	}
	
	if (mode != PROFILE_SINGLE)
     f5e:	b1 e0       	ldi	r27, 0x01	; 1
     f60:	3b 16       	cp	r3, r27
     f62:	09 f4       	brne	.+2      	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
     f64:	6f c1       	rjmp	.+734    	; 0x1244 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3b0>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
     f66:	f6 01       	movw	r30, r12
     f68:	20 81       	ld	r18, Z
     f6a:	31 81       	ldd	r19, Z+1	; 0x01
     f6c:	83 2d       	mov	r24, r3
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	f7 01       	movw	r30, r14
     f72:	4a e1       	ldi	r20, 0x1A	; 26
     f74:	34 9e       	mul	r3, r20
     f76:	e0 0d       	add	r30, r0
     f78:	f1 1d       	adc	r31, r1
     f7a:	11 24       	eor	r1, r1
     f7c:	46 8d       	ldd	r20, Z+30	; 0x1e
     f7e:	57 8d       	ldd	r21, Z+31	; 0x1f
     f80:	24 17       	cp	r18, r20
     f82:	35 07       	cpc	r19, r21
     f84:	88 f4       	brcc	.+34     	; 0xfa8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x114>
     f86:	d6 01       	movw	r26, r12
     f88:	4d 93       	st	X+, r20
     f8a:	5c 93       	st	X, r21
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
     f8c:	2a e1       	ldi	r18, 0x1A	; 26
     f8e:	28 9f       	mul	r18, r24
     f90:	f0 01       	movw	r30, r0
     f92:	29 9f       	mul	r18, r25
     f94:	f0 0d       	add	r31, r0
     f96:	11 24       	eor	r1, r1
     f98:	ee 0d       	add	r30, r14
     f9a:	ff 1d       	adc	r31, r15
     f9c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f9e:	95 8d       	ldd	r25, Z+29	; 0x1d
     fa0:	84 17       	cp	r24, r20
     fa2:	95 07       	cpc	r25, r21
     fa4:	70 f0       	brcs	.+28     	; 0xfc2 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x12e>
     fa6:	10 c0       	rjmp	.+32     	; 0xfc8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x134>
     fa8:	4a e1       	ldi	r20, 0x1A	; 26
     faa:	48 9f       	mul	r20, r24
     fac:	f0 01       	movw	r30, r0
     fae:	49 9f       	mul	r20, r25
     fb0:	f0 0d       	add	r31, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	ee 0d       	add	r30, r14
     fb6:	ff 1d       	adc	r31, r15
     fb8:	84 8d       	ldd	r24, Z+28	; 0x1c
     fba:	95 8d       	ldd	r25, Z+29	; 0x1d
     fbc:	82 17       	cp	r24, r18
     fbe:	93 07       	cpc	r25, r19
     fc0:	70 f4       	brcc	.+28     	; 0xfde <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x14a>
     fc2:	f6 01       	movw	r30, r12
     fc4:	80 83       	st	Z, r24
     fc6:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (UpdateFreq)
	{
		// Update Frequency
		laserDiodeData.laserprofile.Frequency = freq;
     fc8:	d6 01       	movw	r26, r12
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	f7 01       	movw	r30, r14
     fd0:	ee 50       	subi	r30, 0x0E	; 14
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
		update = true;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	f7 01       	movw	r30, r14
     fdc:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     fde:	d6 01       	movw	r26, r12
     fe0:	2d 91       	ld	r18, X+
     fe2:	3c 91       	ld	r19, X
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	f9 01       	movw	r30, r18
     fea:	ec 5d       	subi	r30, 0xDC	; 220
     fec:	fe 4d       	sbci	r31, 0xDE	; 222
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	49 87       	std	Y+9, r20	; 0x09
     ff4:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
     ff6:	f9 01       	movw	r30, r18
     ff8:	e2 5f       	subi	r30, 0xF2	; 242
     ffa:	fe 4d       	sbci	r31, 0xDE	; 222
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	8f 83       	std	Y+7, r24	; 0x07
    1002:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1004:	84 1b       	sub	r24, r20
    1006:	95 0b       	sbc	r25, r21
    1008:	f9 01       	movw	r30, r18
    100a:	e8 50       	subi	r30, 0x08	; 8
    100c:	ff 4d       	sbci	r31, 0xDF	; 223
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	61 50       	subi	r22, 0x01	; 1
    1014:	71 09       	sbc	r23, r1
    1016:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    101a:	3b 01       	movw	r6, r22
	uint16_t step ;
	
	if (mode == PROFILE_MEDIUM)
    101c:	b3 e0       	ldi	r27, 0x03	; 3
    101e:	3b 12       	cpse	r3, r27
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
	{
		MinD = 10;
    1022:	8a e0       	ldi	r24, 0x0A	; 10
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	89 87       	std	Y+9, r24	; 0x09
    1028:	9a 87       	std	Y+10, r25	; 0x0a
		MaxD = 100;	
    102a:	84 e6       	ldi	r24, 0x64	; 100
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	8f 83       	std	Y+7, r24	; 0x07
    1030:	98 87       	std	Y+8, r25	; 0x08
	}
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
    1032:	f5 01       	movw	r30, r10
    1034:	40 81       	ld	r20, Z
    1036:	51 81       	ldd	r21, Z+1	; 0x01
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	48 17       	cp	r20, r24
    103e:	59 07       	cpc	r21, r25
    1040:	08 f0       	brcs	.+2      	; 0x1044 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1b0>
    1042:	20 c1       	rjmp	.+576    	; 0x1284 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3f0>
    1044:	80 83       	st	Z, r24
    1046:	91 83       	std	Z+1, r25	; 0x01
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    1048:	2f 81       	ldd	r18, Y+7	; 0x07
    104a:	38 85       	ldd	r19, Y+8	; 0x08
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	18 f4       	brcc	.+6      	; 0x1058 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1c4>
    1052:	d5 01       	movw	r26, r10
    1054:	2d 93       	st	X+, r18
    1056:	3c 93       	st	X, r19
	
	if (UpdateDuration)
	{			
		// Update duration helpers	
		step = 1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	9e 83       	std	Y+6, r25	; 0x06
		NormalizeStep(MinD, MaxD, step, 20, step_table);
    1060:	08 e0       	ldi	r16, 0x08	; 8
    1062:	10 e2       	ldi	r17, 0x20	; 32
    1064:	24 e1       	ldi	r18, 0x14	; 20
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	ae 01       	movw	r20, r28
    106a:	4b 5f       	subi	r20, 0xFB	; 251
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	be 01       	movw	r22, r28
    1070:	69 5f       	subi	r22, 0xF9	; 249
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	ce 01       	movw	r24, r28
    1076:	09 96       	adiw	r24, 0x09	; 9
    1078:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wDurationStep = step;
    107c:	6d 81       	ldd	r22, Y+5	; 0x05
    107e:	7e 81       	ldd	r23, Y+6	; 0x06
    1080:	4a e1       	ldi	r20, 0x1A	; 26
    1082:	03 2d       	mov	r16, r3
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	f7 01       	movw	r30, r14
    1088:	43 9d       	mul	r20, r3
    108a:	e0 0d       	add	r30, r0
    108c:	f1 1d       	adc	r31, r1
    108e:	11 24       	eor	r1, r1
    1090:	60 a7       	std	Z+40, r22	; 0x28
    1092:	71 a7       	std	Z+41, r23	; 0x29
		pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    1094:	4f 80       	ldd	r4, Y+7	; 0x07
    1096:	58 84       	ldd	r5, Y+8	; 0x08
    1098:	29 85       	ldd	r18, Y+9	; 0x09
    109a:	3a 85       	ldd	r19, Y+10	; 0x0a
    109c:	c2 01       	movw	r24, r4
    109e:	82 1b       	sub	r24, r18
    10a0:	93 0b       	sbc	r25, r19
    10a2:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    10a6:	62 a7       	std	Z+42, r22	; 0x2a
    10a8:	73 a7       	std	Z+43, r23	; 0x2b
		pstGUI[mode].m_wDurationOffset = MinD;
    10aa:	26 a3       	std	Z+38, r18	; 0x26
    10ac:	37 a3       	std	Z+39, r19	; 0x27
		pstGUI[mode].m_wMinDuration = MinD;
    10ae:	0f 5f       	subi	r16, 0xFF	; 255
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	40 9f       	mul	r20, r16
    10b4:	d0 01       	movw	r26, r0
    10b6:	41 9f       	mul	r20, r17
    10b8:	b0 0d       	add	r27, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	ae 0d       	add	r26, r14
    10be:	bf 1d       	adc	r27, r15
    10c0:	2d 93       	st	X+, r18
    10c2:	3c 93       	st	X, r19
		pstGUI[mode].m_wMaxDuration = MaxD;
    10c4:	40 8e       	std	Z+24, r4	; 0x18
    10c6:	51 8e       	std	Z+25, r5	; 0x19
		
		// Update Duration
		laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    10c8:	97 01       	movw	r18, r14
    10ca:	2c 50       	subi	r18, 0x0C	; 12
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	d5 01       	movw	r26, r10
    10d0:	8d 91       	ld	r24, X+
    10d2:	9c 91       	ld	r25, X
    10d4:	46 a1       	ldd	r20, Z+38	; 0x26
    10d6:	57 a1       	ldd	r21, Z+39	; 0x27
    10d8:	84 1b       	sub	r24, r20
    10da:	95 0b       	sbc	r25, r21
    10dc:	60 a5       	ldd	r22, Z+40	; 0x28
    10de:	71 a5       	ldd	r23, Z+41	; 0x29
    10e0:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    10e4:	f9 01       	movw	r30, r18
    10e6:	60 83       	st	Z, r22
    10e8:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Duration = duration;
    10ea:	d5 01       	movw	r26, r10
    10ec:	8d 91       	ld	r24, X+
    10ee:	9c 91       	ld	r25, X
    10f0:	36 96       	adiw	r30, 0x06	; 6
    10f2:	80 83       	st	Z, r24
    10f4:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	f7 01       	movw	r30, r14
    10fa:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    10fc:	d6 01       	movw	r26, r12
    10fe:	ed 91       	ld	r30, X+
    1100:	fc 91       	ld	r31, X
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e8 50       	subi	r30, 0x08	; 8
    1108:	ff 4d       	sbci	r31, 0xDF	; 223
    110a:	40 80       	ld	r4, Z
    110c:	51 80       	ldd	r5, Z+1	; 0x01
    110e:	b1 e0       	ldi	r27, 0x01	; 1
    1110:	4b 1a       	sub	r4, r27
    1112:	51 08       	sbc	r5, r1
		laserDiodeData.lasersettings.Duration = duration;
		
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    1114:	f5 01       	movw	r30, r10
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	29 85       	ldd	r18, Y+9	; 0x09
    111c:	3a 85       	ldd	r19, Y+10	; 0x0a
    111e:	82 1b       	sub	r24, r18
    1120:	93 0b       	sbc	r25, r19
    1122:	b3 01       	movw	r22, r6
    1124:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z3maxjj>
    1130:	b2 01       	movw	r22, r4
    1132:	0e 94 c0 1c 	call	0x3980	; 0x3980 <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    1136:	d6 01       	movw	r26, r12
    1138:	4d 91       	ld	r20, X+
    113a:	5c 91       	ld	r21, X
    113c:	6b e0       	ldi	r22, 0x0B	; 11
    113e:	64 9f       	mul	r22, r20
    1140:	90 01       	movw	r18, r0
    1142:	65 9f       	mul	r22, r21
    1144:	30 0d       	add	r19, r0
    1146:	11 24       	eor	r1, r1
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	fc 01       	movw	r30, r24
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	ea 5f       	subi	r30, 0xFA	; 250
    1154:	ff 4d       	sbci	r31, 0xDF	; 223
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	43 2d       	mov	r20, r3
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	f7 01       	movw	r30, r14
    1160:	ba e1       	ldi	r27, 0x1A	; 26
    1162:	3b 9e       	mul	r3, r27
    1164:	e0 0d       	add	r30, r0
    1166:	f1 1d       	adc	r31, r1
    1168:	11 24       	eor	r1, r1
    116a:	84 8b       	std	Z+20, r24	; 0x14
    116c:	95 8b       	std	Z+21, r25	; 0x15
	
	if (energy > pstGUI[mode].m_wMaxEnergy_)
    116e:	f4 01       	movw	r30, r8
    1170:	20 81       	ld	r18, Z
    1172:	31 81       	ldd	r19, Z+1	; 0x01
    1174:	82 17       	cp	r24, r18
    1176:	93 07       	cpc	r25, r19
    1178:	08 f0       	brcs	.+2      	; 0x117c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x2e8>
    117a:	5d c0       	rjmp	.+186    	; 0x1236 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a2>
	{
		energy = pstGUI[mode].m_wMaxEnergy_;
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
		
		// Update energy helpers
		step = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	9e 83       	std	Y+6, r25	; 0x06
		uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    1188:	8a e1       	ldi	r24, 0x1A	; 26
    118a:	84 9f       	mul	r24, r20
    118c:	60 01       	movw	r12, r0
    118e:	85 9f       	mul	r24, r21
    1190:	d0 0c       	add	r13, r0
    1192:	11 24       	eor	r1, r1
    1194:	ce 0c       	add	r12, r14
    1196:	df 1c       	adc	r13, r15
    1198:	d6 01       	movw	r26, r12
    119a:	54 96       	adiw	r26, 0x14	; 20
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	55 97       	sbiw	r26, 0x15	; 21
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    11a6:	90 96       	adiw	r26, 0x20	; 32
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	91 97       	sbiw	r26, 0x21	; 33
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	9a 83       	std	Y+2, r25	; 0x02
		NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    11b2:	08 e0       	ldi	r16, 0x08	; 8
    11b4:	10 e2       	ldi	r17, 0x20	; 32
    11b6:	24 e1       	ldi	r18, 0x14	; 20
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	ae 01       	movw	r20, r28
    11bc:	4b 5f       	subi	r20, 0xFB	; 251
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	be 01       	movw	r22, r28
    11c2:	6d 5f       	subi	r22, 0xFD	; 253
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	ce 01       	movw	r24, r28
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wEnergyOffset = Offset;
    11ce:	29 81       	ldd	r18, Y+1	; 0x01
    11d0:	3a 81       	ldd	r19, Y+2	; 0x02
    11d2:	f6 01       	movw	r30, r12
    11d4:	20 a3       	std	Z+32, r18	; 0x20
    11d6:	31 a3       	std	Z+33, r19	; 0x21
		pstGUI[mode].m_wEnergyStep = step;
    11d8:	6d 81       	ldd	r22, Y+5	; 0x05
    11da:	7e 81       	ldd	r23, Y+6	; 0x06
    11dc:	62 a3       	std	Z+34, r22	; 0x22
    11de:	73 a3       	std	Z+35, r23	; 0x23
		pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    11e0:	84 89       	ldd	r24, Z+20	; 0x14
    11e2:	95 89       	ldd	r25, Z+21	; 0x15
    11e4:	82 1b       	sub	r24, r18
    11e6:	93 0b       	sbc	r25, r19
    11e8:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    11ec:	64 a3       	std	Z+36, r22	; 0x24
    11ee:	75 a3       	std	Z+37, r23	; 0x25
		pstGUI[mode].m_wMinEnergy_ = Offset;
    11f0:	26 8b       	std	Z+22, r18	; 0x16
    11f2:	37 8b       	std	Z+23, r19	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	84 8b       	std	Z+20, r24	; 0x14
    11fa:	95 8b       	std	Z+21, r25	; 0x15
		
		// Update Energy
		laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    11fc:	f7 01       	movw	r30, r14
    11fe:	ea 50       	subi	r30, 0x0A	; 10
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	d4 01       	movw	r26, r8
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	d6 01       	movw	r26, r12
    120a:	82 1b       	sub	r24, r18
    120c:	93 0b       	sbc	r25, r19
    120e:	92 96       	adiw	r26, 0x22	; 34
    1210:	6d 91       	ld	r22, X+
    1212:	7c 91       	ld	r23, X
    1214:	93 97       	sbiw	r26, 0x23	; 35
    1216:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    121a:	60 83       	st	Z, r22
    121c:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Energy = energy;
    121e:	f4 01       	movw	r30, r8
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	f7 01       	movw	r30, r14
    1226:	e4 50       	subi	r30, 0x04	; 4
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 83       	st	Z, r24
    122c:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	d7 01       	movw	r26, r14
    1232:	51 96       	adiw	r26, 0x11	; 17
    1234:	8c 93       	st	X, r24
	}
	
	return update;
    1236:	f7 01       	movw	r30, r14
    1238:	81 89       	ldd	r24, Z+17	; 0x11
    123a:	4b c0       	rjmp	.+150    	; 0x12d2 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x43e>
	}
}

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    123c:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
	}
	
	if (UpdateFreq)
    123e:	81 11       	cpse	r24, r1
    1240:	c3 ce       	rjmp	.-634    	; 0xfc8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x134>
    1242:	27 c0       	rjmp	.+78     	; 0x1292 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3fe>
		laserDiodeData.laserprofile.Frequency = freq;
		update = true;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1244:	d6 01       	movw	r26, r12
    1246:	2d 91       	ld	r18, X+
    1248:	3c 91       	ld	r19, X
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	f9 01       	movw	r30, r18
    1250:	ec 5d       	subi	r30, 0xDC	; 220
    1252:	fe 4d       	sbci	r31, 0xDE	; 222
    1254:	40 81       	ld	r20, Z
    1256:	51 81       	ldd	r21, Z+1	; 0x01
    1258:	49 87       	std	Y+9, r20	; 0x09
    125a:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    125c:	f9 01       	movw	r30, r18
    125e:	e2 5f       	subi	r30, 0xF2	; 242
    1260:	fe 4d       	sbci	r31, 0xDE	; 222
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	8f 83       	std	Y+7, r24	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    126a:	84 1b       	sub	r24, r20
    126c:	95 0b       	sbc	r25, r21
    126e:	f9 01       	movw	r30, r18
    1270:	e8 50       	subi	r30, 0x08	; 8
    1272:	ff 4d       	sbci	r31, 0xDF	; 223
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	61 50       	subi	r22, 0x01	; 1
    127a:	71 09       	sbc	r23, r1
    127c:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    1280:	3b 01       	movw	r6, r22
    1282:	d7 ce       	rjmp	.-594    	; 0x1032 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
		MaxD = 100;	
	}
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    1284:	2f 81       	ldd	r18, Y+7	; 0x07
    1286:	38 85       	ldd	r19, Y+8	; 0x08
    1288:	24 17       	cp	r18, r20
    128a:	35 07       	cpc	r19, r21
    128c:	08 f4       	brcc	.+2      	; 0x1290 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3fc>
    128e:	e1 ce       	rjmp	.-574    	; 0x1052 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1be>
    1290:	35 cf       	rjmp	.-406    	; 0x10fc <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x268>
		laserDiodeData.laserprofile.Frequency = freq;
		update = true;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1292:	f6 01       	movw	r30, r12
    1294:	20 81       	ld	r18, Z
    1296:	31 81       	ldd	r19, Z+1	; 0x01
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	f9 01       	movw	r30, r18
    129e:	ec 5d       	subi	r30, 0xDC	; 220
    12a0:	fe 4d       	sbci	r31, 0xDE	; 222
    12a2:	40 81       	ld	r20, Z
    12a4:	51 81       	ldd	r21, Z+1	; 0x01
    12a6:	49 87       	std	Y+9, r20	; 0x09
    12a8:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    12aa:	f9 01       	movw	r30, r18
    12ac:	e2 5f       	subi	r30, 0xF2	; 242
    12ae:	fe 4d       	sbci	r31, 0xDE	; 222
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	8f 83       	std	Y+7, r24	; 0x07
    12b6:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    12b8:	84 1b       	sub	r24, r20
    12ba:	95 0b       	sbc	r25, r21
    12bc:	f9 01       	movw	r30, r18
    12be:	e8 50       	subi	r30, 0x08	; 8
    12c0:	ff 4d       	sbci	r31, 0xDF	; 223
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	61 50       	subi	r22, 0x01	; 1
    12c8:	71 09       	sbc	r23, r1
    12ca:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    12ce:	3b 01       	movw	r6, r22
    12d0:	b0 ce       	rjmp	.-672    	; 0x1032 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
		
		update = true;
	}
	
	return update;
}
    12d2:	2a 96       	adiw	r28, 0x0a	; 10
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	5f 90       	pop	r5
    12f6:	4f 90       	pop	r4
    12f8:	3f 90       	pop	r3
    12fa:	08 95       	ret

000012fc <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>:

void CLaserControlApp::CalculateDurationSteps(uint16_t &freq, uint16_t &duration)
{
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	00 d0       	rcall	.+0      	; 0x1310 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x14>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x16>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	7c 01       	movw	r14, r24
    1318:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MinD = pstGUI[Profile].m_wMinDuration;
    1322:	d7 01       	movw	r26, r14
    1324:	1e 96       	adiw	r26, 0x0e	; 14
    1326:	8c 91       	ld	r24, X
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 01       	movw	r18, r24
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	0f 2e       	mov	r0, r31
    1332:	fa e1       	ldi	r31, 0x1A	; 26
    1334:	bf 2e       	mov	r11, r31
    1336:	f0 2d       	mov	r31, r0
    1338:	b2 9e       	mul	r11, r18
    133a:	f0 01       	movw	r30, r0
    133c:	b3 9e       	mul	r11, r19
    133e:	f0 0d       	add	r31, r0
    1340:	11 24       	eor	r1, r1
    1342:	ee 0d       	add	r30, r14
    1344:	ff 1d       	adc	r31, r15
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	3c 83       	std	Y+4, r19	; 0x04
	uint16_t MaxD = pstGUI[Profile].m_wMaxDuration;
    134e:	b8 9e       	mul	r11, r24
    1350:	f0 01       	movw	r30, r0
    1352:	b9 9e       	mul	r11, r25
    1354:	f0 0d       	add	r31, r0
    1356:	11 24       	eor	r1, r1
    1358:	ee 0d       	add	r30, r14
    135a:	ff 1d       	adc	r31, r15
    135c:	80 8d       	ldd	r24, Z+24	; 0x18
    135e:	91 8d       	ldd	r25, Z+25	; 0x19
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    1364:	08 e0       	ldi	r16, 0x08	; 8
    1366:	10 e2       	ldi	r17, 0x20	; 32
    1368:	24 e1       	ldi	r18, 0x14	; 20
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	ae 01       	movw	r20, r28
    136e:	4b 5f       	subi	r20, 0xFB	; 251
    1370:	5f 4f       	sbci	r21, 0xFF	; 255
    1372:	be 01       	movw	r22, r28
    1374:	6f 5f       	subi	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	ce 01       	movw	r24, r28
    137a:	03 96       	adiw	r24, 0x03	; 3
    137c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wDurationStep = step;
    1380:	f7 01       	movw	r30, r14
    1382:	86 85       	ldd	r24, Z+14	; 0x0e
    1384:	6d 81       	ldd	r22, Y+5	; 0x05
    1386:	7e 81       	ldd	r23, Y+6	; 0x06
    1388:	b8 9e       	mul	r11, r24
    138a:	e0 0d       	add	r30, r0
    138c:	f1 1d       	adc	r31, r1
    138e:	11 24       	eor	r1, r1
    1390:	60 a7       	std	Z+40, r22	; 0x28
    1392:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[Profile].m_wDurationNumSteps = (MaxD - MinD)/step;
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	82 1b       	sub	r24, r18
    139e:	93 0b       	sbc	r25, r19
    13a0:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    13a4:	62 a7       	std	Z+42, r22	; 0x2a
    13a6:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[Profile].m_wDurationOffset = MinD;
    13a8:	26 a3       	std	Z+38, r18	; 0x26
    13aa:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[Profile].updateDuration = false;
    13ac:	14 a6       	std	Z+44, r1	; 0x2c
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[Profile].m_wDurationOffset) / pstGUI[Profile].m_wDurationStep;
    13ae:	97 01       	movw	r18, r14
    13b0:	2c 50       	subi	r18, 0x0C	; 12
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	d6 01       	movw	r26, r12
    13b6:	8d 91       	ld	r24, X+
    13b8:	9c 91       	ld	r25, X
    13ba:	46 a1       	ldd	r20, Z+38	; 0x26
    13bc:	57 a1       	ldd	r21, Z+39	; 0x27
    13be:	84 1b       	sub	r24, r20
    13c0:	95 0b       	sbc	r25, r21
    13c2:	60 a5       	ldd	r22, Z+40	; 0x28
    13c4:	71 a5       	ldd	r23, Z+41	; 0x29
    13c6:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    13ca:	f9 01       	movw	r30, r18
    13cc:	60 83       	st	Z, r22
    13ce:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Duration = duration;
    13d0:	d6 01       	movw	r26, r12
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	36 96       	adiw	r30, 0x06	; 6
    13d8:	80 83       	st	Z, r24
    13da:	91 83       	std	Z+1, r25	; 0x01
}
    13dc:	26 96       	adiw	r28, 0x06	; 6
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	08 95       	ret

000013f6 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>:

void CLaserControlApp::CalculateEnergySteps(uint16_t &freq, uint16_t &energy)
{
    13f6:	bf 92       	push	r11
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	00 d0       	rcall	.+0      	; 0x140a <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x14>
    140a:	00 d0       	rcall	.+0      	; 0x140c <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x16>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	7c 01       	movw	r14, r24
    1412:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MaxEnergy = pstGUI[Profile].m_wMaxEnergy_;
    141c:	d7 01       	movw	r26, r14
    141e:	1e 96       	adiw	r26, 0x0e	; 14
    1420:	8c 91       	ld	r24, X
    1422:	0f 2e       	mov	r0, r31
    1424:	fa e1       	ldi	r31, 0x1A	; 26
    1426:	bf 2e       	mov	r11, r31
    1428:	f0 2d       	mov	r31, r0
    142a:	f7 01       	movw	r30, r14
    142c:	b8 9e       	mul	r11, r24
    142e:	e0 0d       	add	r30, r0
    1430:	f1 1d       	adc	r31, r1
    1432:	11 24       	eor	r1, r1
    1434:	84 89       	ldd	r24, Z+20	; 0x14
    1436:	95 89       	ldd	r25, Z+21	; 0x15
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t MinEnergy = pstGUI[Profile].m_wMinEnergy_;
    143c:	86 89       	ldd	r24, Z+22	; 0x16
    143e:	97 89       	ldd	r25, Z+23	; 0x17
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinEnergy, MaxEnergy, step, 20, step_table);
    1444:	08 e0       	ldi	r16, 0x08	; 8
    1446:	10 e2       	ldi	r17, 0x20	; 32
    1448:	24 e1       	ldi	r18, 0x14	; 20
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	ae 01       	movw	r20, r28
    144e:	4b 5f       	subi	r20, 0xFB	; 251
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	be 01       	movw	r22, r28
    1454:	6d 5f       	subi	r22, 0xFD	; 253
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	ce 01       	movw	r24, r28
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wEnergyStep = step;
    1460:	f7 01       	movw	r30, r14
    1462:	86 85       	ldd	r24, Z+14	; 0x0e
    1464:	6d 81       	ldd	r22, Y+5	; 0x05
    1466:	7e 81       	ldd	r23, Y+6	; 0x06
    1468:	b8 9e       	mul	r11, r24
    146a:	e0 0d       	add	r30, r0
    146c:	f1 1d       	adc	r31, r1
    146e:	11 24       	eor	r1, r1
    1470:	62 a3       	std	Z+34, r22	; 0x22
    1472:	73 a3       	std	Z+35, r23	; 0x23
	pstGUI[Profile].m_wEnergyNumSteps = (pstGUI[Profile].m_wMaxEnergy_ - MinEnergy)/step;
    1474:	29 81       	ldd	r18, Y+1	; 0x01
    1476:	3a 81       	ldd	r19, Y+2	; 0x02
    1478:	84 89       	ldd	r24, Z+20	; 0x14
    147a:	95 89       	ldd	r25, Z+21	; 0x15
    147c:	82 1b       	sub	r24, r18
    147e:	93 0b       	sbc	r25, r19
    1480:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    1484:	64 a3       	std	Z+36, r22	; 0x24
    1486:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[Profile].m_wEnergyOffset = MinEnergy;
    1488:	20 a3       	std	Z+32, r18	; 0x20
    148a:	31 a3       	std	Z+33, r19	; 0x21
	pstGUI[Profile].updateEnergy = false;
    148c:	15 a6       	std	Z+45, r1	; 0x2d
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[Profile].m_wEnergyOffset) / pstGUI[Profile].m_wEnergyStep;
    148e:	97 01       	movw	r18, r14
    1490:	2a 50       	subi	r18, 0x0A	; 10
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	d6 01       	movw	r26, r12
    1496:	8d 91       	ld	r24, X+
    1498:	9c 91       	ld	r25, X
    149a:	40 a1       	ldd	r20, Z+32	; 0x20
    149c:	51 a1       	ldd	r21, Z+33	; 0x21
    149e:	84 1b       	sub	r24, r20
    14a0:	95 0b       	sbc	r25, r21
    14a2:	62 a1       	ldd	r22, Z+34	; 0x22
    14a4:	73 a1       	ldd	r23, Z+35	; 0x23
    14a6:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    14aa:	f9 01       	movw	r30, r18
    14ac:	60 83       	st	Z, r22
    14ae:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Energy = energy;
    14b0:	d6 01       	movw	r26, r12
    14b2:	8d 91       	ld	r24, X+
    14b4:	9c 91       	ld	r25, X
    14b6:	36 96       	adiw	r30, 0x06	; 6
    14b8:	80 83       	st	Z, r24
    14ba:	91 83       	std	Z+1, r25	; 0x01
}
    14bc:	26 96       	adiw	r28, 0x06	; 6
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	08 95       	ret

000014d6 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>:

void CLaserControlApp::CalculateAllSteps(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	2a 97       	sbiw	r28, 0x0a	; 10
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	7c 01       	movw	r14, r24
    14fc:	8b 01       	movw	r16, r22
    14fe:	6a 01       	movw	r12, r20
	uint16_t MinD = MinDurationTable[freq];
    1500:	db 01       	movw	r26, r22
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	cf 01       	movw	r24, r30
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	dc 01       	movw	r26, r24
    150e:	ac 5d       	subi	r26, 0xDC	; 220
    1510:	be 4d       	sbci	r27, 0xDE	; 222
    1512:	4d 91       	ld	r20, X+
    1514:	5c 91       	ld	r21, X
    1516:	49 87       	std	Y+9, r20	; 0x09
    1518:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    151a:	dc 01       	movw	r26, r24
    151c:	a2 5f       	subi	r26, 0xF2	; 242
    151e:	be 4d       	sbci	r27, 0xDE	; 222
    1520:	8d 91       	ld	r24, X+
    1522:	9c 91       	ld	r25, X
    1524:	8f 83       	std	Y+7, r24	; 0x07
    1526:	98 87       	std	Y+8, r25	; 0x08
	if (mode == PROFILE_MEDIUM)
    1528:	23 30       	cpi	r18, 0x03	; 3
    152a:	d1 f4       	brne	.+52     	; 0x1560 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x8a>
	{
		MinD = 10;
    152c:	8a e0       	ldi	r24, 0x0A	; 10
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	89 87       	std	Y+9, r24	; 0x09
    1532:	9a 87       	std	Y+10, r25	; 0x0a
		MaxD = 100;
    1534:	84 e6       	ldi	r24, 0x64	; 100
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	8f 83       	std	Y+7, r24	; 0x07
    153a:	98 87       	std	Y+8, r25	; 0x08
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	e8 50       	subi	r30, 0x08	; 8
    1542:	ff 4d       	sbci	r31, 0xDF	; 223
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	61 50       	subi	r22, 0x01	; 1
    154a:	71 09       	sbc	r23, r1
    154c:	8a e5       	ldi	r24, 0x5A	; 90
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    1554:	5b 01       	movw	r10, r22
	uint16_t step = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	44 c0       	rjmp	.+136    	; 0x15e8 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x112>
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
		MaxD = 100;
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1560:	49 85       	ldd	r20, Y+9	; 0x09
    1562:	5a 85       	ldd	r21, Y+10	; 0x0a
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e8 50       	subi	r30, 0x08	; 8
    156a:	ff 4d       	sbci	r31, 0xDF	; 223
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
	uint16_t step = 1;
    1570:	e1 e0       	ldi	r30, 0x01	; 1
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	ed 83       	std	Y+5, r30	; 0x05
    1576:	fe 83       	std	Y+6, r31	; 0x06
	
	if (mode == PROFILE_FAST)
    1578:	24 30       	cpi	r18, 0x04	; 4
    157a:	79 f5       	brne	.+94     	; 0x15da <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x104>
	{
		// Update energy helpers
		pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    157c:	f7 01       	movw	r30, r14
    157e:	e8 57       	subi	r30, 0x78	; 120
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    158a:	32 96       	adiw	r30, 0x02	; 2
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	20 83       	st	Z, r18
    1592:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    1594:	32 96       	adiw	r30, 0x02	; 2
    1596:	47 e0       	ldi	r20, 0x07	; 7
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	40 83       	st	Z, r20
    159c:	51 83       	std	Z+1, r21	; 0x01
		pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    159e:	3e 97       	sbiw	r30, 0x0e	; 14
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 12;
    15a4:	32 97       	sbiw	r30, 0x02	; 2
    15a6:	8c e0       	ldi	r24, 0x0C	; 12
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
		
		// Update duration helpers
		pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    15ae:	72 96       	adiw	r30, 0x12	; 18
    15b0:	82 e1       	ldi	r24, 0x12	; 18
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 83       	st	Z, r24
    15b6:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    15b8:	32 96       	adiw	r30, 0x02	; 2
    15ba:	20 83       	st	Z, r18
    15bc:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    15be:	32 96       	adiw	r30, 0x02	; 2
    15c0:	21 e1       	ldi	r18, 0x11	; 17
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	20 83       	st	Z, r18
    15c6:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    15c8:	70 97       	sbiw	r30, 0x10	; 16
    15ca:	80 83       	st	Z, r24
    15cc:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    15ce:	32 97       	sbiw	r30, 0x02	; 2
    15d0:	83 e2       	ldi	r24, 0x23	; 35
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	8e c0       	rjmp	.+284    	; 0x16f6 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x220>
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
		MaxD = 100;
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    15da:	84 1b       	sub	r24, r20
    15dc:	95 0b       	sbc	r25, r21
    15de:	61 50       	subi	r22, 0x01	; 1
    15e0:	71 09       	sbc	r23, r1
    15e2:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    15e6:	5b 01       	movw	r10, r22
    15e8:	72 2e       	mov	r7, r18
    15ea:	48 01       	movw	r8, r16
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
		return;
	}
	
	// Update duration helpers
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    15ec:	08 e0       	ldi	r16, 0x08	; 8
    15ee:	10 e2       	ldi	r17, 0x20	; 32
    15f0:	24 e1       	ldi	r18, 0x14	; 20
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	ae 01       	movw	r20, r28
    15f6:	4b 5f       	subi	r20, 0xFB	; 251
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	be 01       	movw	r22, r28
    15fc:	69 5f       	subi	r22, 0xF9	; 249
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	ce 01       	movw	r24, r28
    1602:	09 96       	adiw	r24, 0x09	; 9
    1604:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wDurationStep = step;
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	ba e1       	ldi	r27, 0x1A	; 26
    160e:	7b 9e       	mul	r7, r27
    1610:	e0 0c       	add	r14, r0
    1612:	f1 1c       	adc	r15, r1
    1614:	11 24       	eor	r1, r1
    1616:	f7 01       	movw	r30, r14
    1618:	60 a7       	std	Z+40, r22	; 0x28
    161a:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    161c:	29 85       	ldd	r18, Y+9	; 0x09
    161e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1620:	8f 81       	ldd	r24, Y+7	; 0x07
    1622:	98 85       	ldd	r25, Y+8	; 0x08
    1624:	82 1b       	sub	r24, r18
    1626:	93 0b       	sbc	r25, r19
    1628:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    162c:	62 a7       	std	Z+42, r22	; 0x2a
    162e:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[mode].m_wDurationOffset = MinD;
    1630:	26 a3       	std	Z+38, r18	; 0x26
    1632:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[mode].updateDuration = false;
    1634:	14 a6       	std	Z+44, r1	; 0x2c
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1636:	d4 01       	movw	r26, r8
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	e8 50       	subi	r30, 0x08	; 8
    1642:	ff 4d       	sbci	r31, 0xDF	; 223
    1644:	00 81       	ld	r16, Z
    1646:	11 81       	ldd	r17, Z+1	; 0x01
    1648:	01 50       	subi	r16, 0x01	; 1
    164a:	11 09       	sbc	r17, r1
	pstGUI[mode].m_wDurationStep = step;
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
	pstGUI[mode].m_wDurationOffset = MinD;
	pstGUI[mode].updateDuration = false;
	
	uint16_t index = (duration - MinD) / Delta;
    164c:	f6 01       	movw	r30, r12
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	82 1b       	sub	r24, r18
    1654:	93 0b       	sbc	r25, r19
    1656:	b5 01       	movw	r22, r10
    1658:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z3maxjj>
    1664:	b8 01       	movw	r22, r16
    1666:	0e 94 c0 1c 	call	0x3980	; 0x3980 <_Z3minjj>
	
	//pstGUI[mode].m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    166a:	d4 01       	movw	r26, r8
    166c:	4d 91       	ld	r20, X+
    166e:	5c 91       	ld	r21, X
    1670:	6b e0       	ldi	r22, 0x0B	; 11
    1672:	64 9f       	mul	r22, r20
    1674:	90 01       	movw	r18, r0
    1676:	65 9f       	mul	r22, r21
    1678:	30 0d       	add	r19, r0
    167a:	11 24       	eor	r1, r1
    167c:	82 0f       	add	r24, r18
    167e:	93 1f       	adc	r25, r19
    1680:	fc 01       	movw	r30, r24
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	ea 5f       	subi	r30, 0xFA	; 250
    1688:	ff 4d       	sbci	r31, 0xDF	; 223
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	f7 01       	movw	r30, r14
    1690:	84 8b       	std	Z+20, r24	; 0x14
    1692:	95 8b       	std	Z+21, r25	; 0x15
	
	// Update energy helpers
	step = 1;
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	2d 83       	std	Y+5, r18	; 0x05
    169a:	3e 83       	std	Y+6, r19	; 0x06
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    169c:	8b 83       	std	Y+3, r24	; 0x03
    169e:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    16a0:	80 a1       	ldd	r24, Z+32	; 0x20
    16a2:	91 a1       	ldd	r25, Z+33	; 0x21
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    16a8:	08 e0       	ldi	r16, 0x08	; 8
    16aa:	10 e2       	ldi	r17, 0x20	; 32
    16ac:	24 e1       	ldi	r18, 0x14	; 20
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	ae 01       	movw	r20, r28
    16b2:	4b 5f       	subi	r20, 0xFB	; 251
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	be 01       	movw	r22, r28
    16b8:	6d 5f       	subi	r22, 0xFD	; 253
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wEnergyOffset = Offset;
    16c4:	29 81       	ldd	r18, Y+1	; 0x01
    16c6:	3a 81       	ldd	r19, Y+2	; 0x02
    16c8:	d7 01       	movw	r26, r14
    16ca:	90 96       	adiw	r26, 0x20	; 32
    16cc:	2d 93       	st	X+, r18
    16ce:	3c 93       	st	X, r19
    16d0:	91 97       	sbiw	r26, 0x21	; 33
	pstGUI[mode].m_wEnergyStep = step;
    16d2:	6d 81       	ldd	r22, Y+5	; 0x05
    16d4:	7e 81       	ldd	r23, Y+6	; 0x06
    16d6:	92 96       	adiw	r26, 0x22	; 34
    16d8:	6d 93       	st	X+, r22
    16da:	7c 93       	st	X, r23
    16dc:	93 97       	sbiw	r26, 0x23	; 35
	pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    16de:	54 96       	adiw	r26, 0x14	; 20
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	55 97       	sbiw	r26, 0x15	; 21
    16e6:	82 1b       	sub	r24, r18
    16e8:	93 0b       	sbc	r25, r19
    16ea:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    16ee:	f7 01       	movw	r30, r14
    16f0:	64 a3       	std	Z+36, r22	; 0x24
    16f2:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[mode].updateEnergy = false;
    16f4:	15 a6       	std	Z+45, r1	; 0x2d
}
    16f6:	2a 96       	adiw	r28, 0x0a	; 10
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	9f 90       	pop	r9
    1712:	8f 90       	pop	r8
    1714:	7f 90       	pop	r7
    1716:	08 95       	ret

00001718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>:
	
	return result;
}

void CLaserControlApp::LaserPreset(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	7c 01       	movw	r14, r24
    1732:	6b 01       	movw	r12, r22
    1734:	ea 01       	movw	r28, r20
    1736:	59 01       	movw	r10, r18
    1738:	10 2f       	mov	r17, r16
	UpdateLimits(freq, duration, energy, mode);
    173a:	d9 01       	movw	r26, r18
    173c:	2d 91       	ld	r18, X+
    173e:	3c 91       	ld	r19, X
    1740:	48 81       	ld	r20, Y
    1742:	59 81       	ldd	r21, Y+1	; 0x01
    1744:	fb 01       	movw	r30, r22
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
	CalculateAllSteps(freq, duration, mode);
    174e:	21 2f       	mov	r18, r17
    1750:	ae 01       	movw	r20, r28
    1752:	b6 01       	movw	r22, r12
    1754:	c7 01       	movw	r24, r14
    1756:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>
	
	m_structLaserProfile[mode].Frequency = freq;
    175a:	81 2e       	mov	r8, r17
    175c:	91 2c       	mov	r9, r1
    175e:	d6 01       	movw	r26, r12
    1760:	2d 91       	ld	r18, X+
    1762:	3c 91       	ld	r19, X
    1764:	f4 01       	movw	r30, r8
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	e8 0d       	add	r30, r8
    176c:	f9 1d       	adc	r31, r9
    176e:	cf 01       	movw	r24, r30
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	f7 01       	movw	r30, r14
    1776:	e8 0f       	add	r30, r24
    1778:	f9 1f       	adc	r31, r25
    177a:	df 01       	movw	r26, r30
    177c:	aa 56       	subi	r26, 0x6A	; 106
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	2d 93       	st	X+, r18
    1782:	3c 93       	st	X, r19
	m_structLaserProfile[mode].EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    1784:	8a e1       	ldi	r24, 0x1A	; 26
    1786:	88 9d       	mul	r24, r8
    1788:	90 01       	movw	r18, r0
    178a:	89 9d       	mul	r24, r9
    178c:	30 0d       	add	r19, r0
    178e:	11 24       	eor	r1, r1
    1790:	2e 0d       	add	r18, r14
    1792:	3f 1d       	adc	r19, r15
    1794:	d5 01       	movw	r26, r10
    1796:	8d 91       	ld	r24, X+
    1798:	9c 91       	ld	r25, X
    179a:	d9 01       	movw	r26, r18
    179c:	90 96       	adiw	r26, 0x20	; 32
    179e:	4d 91       	ld	r20, X+
    17a0:	5c 91       	ld	r21, X
    17a2:	91 97       	sbiw	r26, 0x21	; 33
    17a4:	84 1b       	sub	r24, r20
    17a6:	95 0b       	sbc	r25, r21
    17a8:	92 96       	adiw	r26, 0x22	; 34
    17aa:	6d 91       	ld	r22, X+
    17ac:	7c 91       	ld	r23, X
    17ae:	93 97       	sbiw	r26, 0x23	; 35
    17b0:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    17b4:	df 01       	movw	r26, r30
    17b6:	a6 56       	subi	r26, 0x66	; 102
    17b8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ba:	6d 93       	st	X+, r22
    17bc:	7c 93       	st	X, r23
	m_structLaserProfile[mode].DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    17be:	88 81       	ld	r24, Y
    17c0:	99 81       	ldd	r25, Y+1	; 0x01
    17c2:	d9 01       	movw	r26, r18
    17c4:	96 96       	adiw	r26, 0x26	; 38
    17c6:	4d 91       	ld	r20, X+
    17c8:	5c 91       	ld	r21, X
    17ca:	97 97       	sbiw	r26, 0x27	; 39
    17cc:	84 1b       	sub	r24, r20
    17ce:	95 0b       	sbc	r25, r21
    17d0:	98 96       	adiw	r26, 0x28	; 40
    17d2:	6d 91       	ld	r22, X+
    17d4:	7c 91       	ld	r23, X
    17d6:	99 97       	sbiw	r26, 0x29	; 41
    17d8:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    17dc:	df 01       	movw	r26, r30
    17de:	a8 56       	subi	r26, 0x68	; 104
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	6d 93       	st	X+, r22
    17e4:	7c 93       	st	X, r23
    17e6:	11 97       	sbiw	r26, 0x01	; 1
	m_structLaserSettings[mode].Duration = duration;
    17e8:	88 81       	ld	r24, Y
    17ea:	99 81       	ldd	r25, Y+1	; 0x01
    17ec:	5e 96       	adiw	r26, 0x1e	; 30
    17ee:	8d 93       	st	X+, r24
    17f0:	9c 93       	st	X, r25
	m_structLaserSettings[mode].Energy = energy;
    17f2:	d5 01       	movw	r26, r10
    17f4:	8d 91       	ld	r24, X+
    17f6:	9c 91       	ld	r25, X
    17f8:	df 01       	movw	r26, r30
    17fa:	a8 54       	subi	r26, 0x48	; 72
    17fc:	bf 4f       	sbci	r27, 0xFF	; 255
    17fe:	8d 93       	st	X+, r24
    1800:	9c 93       	st	X, r25
	m_structLaserSettings[mode].FlushesLimit = 4; // deprecated
    1802:	ec 54       	subi	r30, 0x4C	; 76
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
	
	if (mode == PROFILE_FAST)
    180e:	14 30       	cpi	r17, 0x04	; 4
    1810:	69 f4       	brne	.+26     	; 0x182c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM+0x114>
	{
		m_structLaserSettings[mode].FlushesLimit = 0;
    1812:	f4 01       	movw	r30, r8
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	e8 0d       	add	r30, r8
    181a:	f9 1d       	adc	r31, r9
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0d       	add	r30, r14
    1822:	ff 1d       	adc	r31, r15
    1824:	ec 54       	subi	r30, 0x4C	; 76
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	10 82       	st	Z, r1
    182a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	// Set settings to hardware
	uint16_t period = 1000 / freq;											//  period [ms]
    182c:	f6 01       	movw	r30, r12
    182e:	a0 80       	ld	r10, Z
    1830:	b1 80       	ldd	r11, Z+1	; 0x01
    1832:	88 ee       	ldi	r24, 0xE8	; 232
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	b5 01       	movw	r22, r10
    1838:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    183c:	6b 01       	movw	r12, r22
	uint32_t dutycycle = uint32_t(duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    183e:	28 81       	ld	r18, Y
    1840:	39 81       	ldd	r19, Y+1	; 0x01
    1842:	a8 ee       	ldi	r26, 0xE8	; 232
    1844:	b3 e0       	ldi	r27, 0x03	; 3
    1846:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    184a:	96 01       	movw	r18, r12
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    1854:	89 01       	movw	r16, r18
    1856:	9a 01       	movw	r18, r20
	// calculate timer settings
	laserTimerPeriod = (6250 / freq) * 10;
    1858:	8a e6       	ldi	r24, 0x6A	; 106
    185a:	98 e1       	ldi	r25, 0x18	; 24
    185c:	b5 01       	movw	r22, r10
    185e:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    1862:	eb 01       	movw	r28, r22
    1864:	cc 0f       	add	r28, r28
    1866:	dd 1f       	adc	r29, r29
    1868:	66 0f       	add	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	66 0f       	add	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	66 0f       	add	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	c6 0f       	add	r28, r22
    1876:	d7 1f       	adc	r29, r23
    1878:	f7 01       	movw	r30, r14
    187a:	ee 52       	subi	r30, 0x2E	; 46
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	c0 83       	st	Z, r28
    1880:	d1 83       	std	Z+1, r29	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1882:	57 01       	movw	r10, r14
    1884:	f4 ed       	ldi	r31, 0xD4	; 212
    1886:	af 0e       	add	r10, r31
    1888:	b1 1c       	adc	r11, r1
    188a:	de 01       	movw	r26, r28
    188c:	a9 01       	movw	r20, r18
    188e:	98 01       	movw	r18, r16
    1890:	0e 94 27 40 	call	0x804e	; 0x804e <__muluhisi3>
    1894:	28 ee       	ldi	r18, 0xE8	; 232
    1896:	33 e0       	ldi	r19, 0x03	; 3
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    18a0:	c2 1b       	sub	r28, r18
    18a2:	d3 0b       	sbc	r29, r19
    18a4:	d5 01       	movw	r26, r10
    18a6:	cd 93       	st	X+, r28
    18a8:	dc 93       	st	X, r29
	laserTimerDutyCyclems = period;
    18aa:	f7 01       	movw	r30, r14
    18ac:	ea 52       	subi	r30, 0x2A	; 42
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	c0 82       	st	Z, r12
    18b2:	d1 82       	std	Z+1, r13	; 0x01
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	08 95       	ret

000018ce <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>:
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
	switch (mode)
    18ce:	42 30       	cpi	r20, 0x02	; 2
    18d0:	d9 f0       	breq	.+54     	; 0x1908 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x3a>
    18d2:	18 f4       	brcc	.+6      	; 0x18da <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc>
    18d4:	41 30       	cpi	r20, 0x01	; 1
    18d6:	31 f0       	breq	.+12     	; 0x18e4 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x16>
    18d8:	3e c0       	rjmp	.+124    	; 0x1956 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
    18da:	43 30       	cpi	r20, 0x03	; 3
    18dc:	11 f1       	breq	.+68     	; 0x1922 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x54>
    18de:	44 30       	cpi	r20, 0x04	; 4
    18e0:	69 f1       	breq	.+90     	; 0x193c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x6e>
    18e2:	39 c0       	rjmp	.+114    	; 0x1956 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 af       	std	Z+56, r18	; 0x38
    18ec:	31 af       	std	Z+57, r19	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
    18ee:	26 ab       	std	Z+54, r18	; 0x36
    18f0:	37 ab       	std	Z+55, r19	; 0x37
			if (freq != 1)
    18f2:	fb 01       	movw	r30, r22
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x30>
    18fc:	48 c0       	rjmp	.+144    	; 0x198e <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc0>
			{
				freq = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	08 95       	ret
				UpdateFreq = true;
				}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
    1908:	21 e0       	ldi	r18, 0x01	; 1
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	fc 01       	movw	r30, r24
    190e:	ee 5a       	subi	r30, 0xAE	; 174
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	20 83       	st	Z, r18
    1914:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
    1916:	26 e0       	ldi	r18, 0x06	; 6
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	32 97       	sbiw	r30, 0x02	; 2
    191c:	20 83       	st	Z, r18
    191e:	31 83       	std	Z+1, r19	; 0x01
		break;
    1920:	1c c0       	rjmp	.+56     	; 0x195a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	fc 01       	movw	r30, r24
    1928:	e4 59       	subi	r30, 0x94	; 148
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	20 83       	st	Z, r18
    192e:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
    1930:	23 e0       	ldi	r18, 0x03	; 3
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	32 97       	sbiw	r30, 0x02	; 2
    1936:	20 83       	st	Z, r18
    1938:	31 83       	std	Z+1, r19	; 0x01
		break;
    193a:	0f c0       	rjmp	.+30     	; 0x195a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    193c:	26 e0       	ldi	r18, 0x06	; 6
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	fc 01       	movw	r30, r24
    1942:	ea 57       	subi	r30, 0x7A	; 122
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	20 83       	st	Z, r18
    1948:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    194a:	2a e0       	ldi	r18, 0x0A	; 10
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	32 97       	sbiw	r30, 0x02	; 2
    1950:	20 83       	st	Z, r18
    1952:	31 83       	std	Z+1, r19	; 0x01
		break;
    1954:	02 c0       	rjmp	.+4      	; 0x195a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
	}
	if (mode != PROFILE_SINGLE)
    1956:	41 30       	cpi	r20, 0x01	; 1
    1958:	b1 f0       	breq	.+44     	; 0x1986 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xb8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    195a:	fb 01       	movw	r30, r22
    195c:	20 81       	ld	r18, Z
    195e:	31 81       	ldd	r19, Z+1	; 0x01
    1960:	fc 01       	movw	r30, r24
    1962:	5a e1       	ldi	r21, 0x1A	; 26
    1964:	45 9f       	mul	r20, r21
    1966:	e0 0d       	add	r30, r0
    1968:	f1 1d       	adc	r31, r1
    196a:	11 24       	eor	r1, r1
    196c:	46 8d       	ldd	r20, Z+30	; 0x1e
    196e:	57 8d       	ldd	r21, Z+31	; 0x1f
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    1970:	84 8d       	ldd	r24, Z+28	; 0x1c
    1972:	95 8d       	ldd	r25, Z+29	; 0x1d
    1974:	82 17       	cp	r24, r18
    1976:	93 07       	cpc	r25, r19
    1978:	40 f0       	brcs	.+16     	; 0x198a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xbc>
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	24 17       	cp	r18, r20
    197e:	35 07       	cpc	r19, r21
    1980:	38 f0       	brcs	.+14     	; 0x1990 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc2>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	08 95       	ret
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    198e:	80 e0       	ldi	r24, 0x00	; 0
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
	}
	
	return UpdateFreq;
}
    1990:	08 95       	ret

00001992 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>:

bool CLaserControlApp::CheckLimitsFastMode(uint16_t &freq, uint16_t &duration, uint16_t &energy)
{
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	fc 01       	movw	r30, r24
    199c:	d9 01       	movw	r26, r18
	pstGUI[PROFILE_FAST].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    199e:	8a 57       	subi	r24, 0x7A	; 122
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	26 e0       	ldi	r18, 0x06	; 6
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	ec 01       	movw	r28, r24
    19a8:	28 83       	st	Y, r18
    19aa:	39 83       	std	Y+1, r19	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    19ac:	02 97       	sbiw	r24, 0x02	; 2
    19ae:	2a e0       	ldi	r18, 0x0A	; 10
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	ec 01       	movw	r28, r24
    19b4:	28 83       	st	Y, r18
    19b6:	39 83       	std	Y+1, r19	; 0x01
	
	if (freq < pstGUI[PROFILE_FAST].m_wMinFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMinFreq;	}
    19b8:	eb 01       	movw	r28, r22
    19ba:	88 81       	ld	r24, Y
    19bc:	99 81       	ldd	r25, Y+1	; 0x01
    19be:	06 97       	sbiw	r24, 0x06	; 6
    19c0:	20 f4       	brcc	.+8      	; 0x19ca <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x38>
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	88 83       	st	Y, r24
    19c8:	99 83       	std	Y+1, r25	; 0x01
	if (freq > pstGUI[PROFILE_FAST].m_wMaxFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMaxFreq;	}
    19ca:	cf 01       	movw	r24, r30
    19cc:	8c 57       	subi	r24, 0x7C	; 124
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	ec 01       	movw	r28, r24
    19d2:	88 81       	ld	r24, Y
    19d4:	99 81       	ldd	r25, Y+1	; 0x01
    19d6:	eb 01       	movw	r28, r22
    19d8:	28 81       	ld	r18, Y
    19da:	39 81       	ldd	r19, Y+1	; 0x01
    19dc:	82 17       	cp	r24, r18
    19de:	93 07       	cpc	r25, r19
    19e0:	10 f4       	brcc	.+4      	; 0x19e6 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x54>
    19e2:	88 83       	st	Y, r24
    19e4:	99 83       	std	Y+1, r25	; 0x01
	
	laserDiodeData.laserprofile.Frequency = freq;
    19e6:	eb 01       	movw	r28, r22
    19e8:	88 81       	ld	r24, Y
    19ea:	99 81       	ldd	r25, Y+1	; 0x01
    19ec:	ef 01       	movw	r28, r30
    19ee:	ce 50       	subi	r28, 0x0E	; 14
    19f0:	df 4f       	sbci	r29, 0xFF	; 255
    19f2:	88 83       	st	Y, r24
    19f4:	99 83       	std	Y+1, r25	; 0x01
	
	if (energy > 13) { energy = 13;  }
    19f6:	8d 91       	ld	r24, X+
    19f8:	9c 91       	ld	r25, X
    19fa:	11 97       	sbiw	r26, 0x01	; 1
    19fc:	8e 30       	cpi	r24, 0x0E	; 14
    19fe:	91 05       	cpc	r25, r1
    1a00:	30 f0       	brcs	.+12     	; 0x1a0e <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x7c>
    1a02:	8d e0       	ldi	r24, 0x0D	; 13
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	8d 93       	st	X+, r24
    1a08:	9c 93       	st	X, r25
    1a0a:	11 97       	sbiw	r26, 0x01	; 1
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
	if (energy <  6) { energy = 6; }
    1a0e:	06 97       	sbiw	r24, 0x06	; 6
    1a10:	28 f4       	brcc	.+10     	; 0x1a1c <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
    1a12:	86 e0       	ldi	r24, 0x06	; 6
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	8d 93       	st	X+, r24
    1a18:	9c 93       	st	X, r25
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update energy helpers
	pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    1a1c:	ef 01       	movw	r28, r30
    1a1e:	c8 57       	subi	r28, 0x78	; 120
    1a20:	df 4f       	sbci	r29, 0xFF	; 255
    1a22:	86 e0       	ldi	r24, 0x06	; 6
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	88 83       	st	Y, r24
    1a28:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    1a2a:	9f 01       	movw	r18, r30
    1a2c:	26 57       	subi	r18, 0x76	; 118
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	01 e0       	ldi	r16, 0x01	; 1
    1a32:	10 e0       	ldi	r17, 0x00	; 0
    1a34:	e9 01       	movw	r28, r18
    1a36:	08 83       	st	Y, r16
    1a38:	19 83       	std	Y+1, r17	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    1a3a:	2e 5f       	subi	r18, 0xFE	; 254
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	67 e0       	ldi	r22, 0x07	; 7
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	e9 01       	movw	r28, r18
    1a44:	68 83       	st	Y, r22
    1a46:	79 83       	std	Y+1, r23	; 0x01
	pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    1a48:	2e 50       	subi	r18, 0x0E	; 14
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	e9 01       	movw	r28, r18
    1a4e:	88 83       	st	Y, r24
    1a50:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 13;
    1a52:	cf 01       	movw	r24, r30
    1a54:	84 58       	subi	r24, 0x84	; 132
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	2d e0       	ldi	r18, 0x0D	; 13
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	ec 01       	movw	r28, r24
    1a5e:	28 83       	st	Y, r18
    1a60:	39 83       	std	Y+1, r19	; 0x01
	
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[PROFILE_FAST].m_wEnergyOffset) / pstGUI[PROFILE_FAST].m_wEnergyStep;
    1a62:	9f 01       	movw	r18, r30
    1a64:	2a 50       	subi	r18, 0x0A	; 10
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	8d 91       	ld	r24, X+
    1a6a:	9c 91       	ld	r25, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	06 97       	sbiw	r24, 0x06	; 6
    1a70:	e9 01       	movw	r28, r18
    1a72:	88 83       	st	Y, r24
    1a74:	99 83       	std	Y+1, r25	; 0x01
	laserDiodeData.lasersettings.Energy = energy;	
    1a76:	2d 91       	ld	r18, X+
    1a78:	3c 91       	ld	r19, X
    1a7a:	11 97       	sbiw	r26, 0x01	; 1
    1a7c:	cf 01       	movw	r24, r30
    1a7e:	84 50       	subi	r24, 0x04	; 4
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	ec 01       	movw	r28, r24
    1a84:	28 83       	st	Y, r18
    1a86:	39 83       	std	Y+1, r19	; 0x01
	
	duration = (energy * 1440) / 500; // Calculate max duration
    1a88:	6d 91       	ld	r22, X+
    1a8a:	7c 91       	ld	r23, X
    1a8c:	80 ea       	ldi	r24, 0xA0	; 160
    1a8e:	95 e0       	ldi	r25, 0x05	; 5
    1a90:	68 9f       	mul	r22, r24
    1a92:	90 01       	movw	r18, r0
    1a94:	69 9f       	mul	r22, r25
    1a96:	30 0d       	add	r19, r0
    1a98:	78 9f       	mul	r23, r24
    1a9a:	30 0d       	add	r19, r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	36 95       	lsr	r19
    1aa0:	27 95       	ror	r18
    1aa2:	36 95       	lsr	r19
    1aa4:	27 95       	ror	r18
    1aa6:	a5 ec       	ldi	r26, 0xC5	; 197
    1aa8:	b0 e2       	ldi	r27, 0x20	; 32
    1aaa:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    1aae:	92 95       	swap	r25
    1ab0:	82 95       	swap	r24
    1ab2:	8f 70       	andi	r24, 0x0F	; 15
    1ab4:	89 27       	eor	r24, r25
    1ab6:	9f 70       	andi	r25, 0x0F	; 15
    1ab8:	89 27       	eor	r24, r25
    1aba:	da 01       	movw	r26, r20
    1abc:	8d 93       	st	X+, r24
    1abe:	9c 93       	st	X, r25
	/*if (duration >= 35) duration = 35;	else
	if (duration >= 24) duration = 24;	else
	if (duration >= 18) duration = 18;*/
	
	// Update duration helpers
	pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    1ac0:	df 01       	movw	r26, r30
    1ac2:	a2 57       	subi	r26, 0x72	; 114
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	82 e1       	ldi	r24, 0x12	; 18
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	8d 93       	st	X+, r24
    1acc:	9c 93       	st	X, r25
    1ace:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	0d 93       	st	X+, r16
    1ad4:	1c 93       	st	X, r17
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    1ad8:	12 96       	adiw	r26, 0x02	; 2
    1ada:	21 e1       	ldi	r18, 0x11	; 17
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	2d 93       	st	X+, r18
    1ae0:	3c 93       	st	X, r19
    1ae2:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    1ae4:	50 97       	sbiw	r26, 0x10	; 16
    1ae6:	8d 93       	st	X+, r24
    1ae8:	9c 93       	st	X, r25
    1aea:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    1aec:	12 97       	sbiw	r26, 0x02	; 2
    1aee:	83 e2       	ldi	r24, 0x23	; 35
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	8d 93       	st	X+, r24
    1af4:	9c 93       	st	X, r25
    1af6:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[PROFILE_FAST].m_wDurationOffset) / pstGUI[PROFILE_FAST].m_wDurationStep;
    1af8:	ac 58       	subi	r26, 0x8C	; 140
    1afa:	bf 4f       	sbci	r27, 0xFF	; 255
    1afc:	ea 01       	movw	r28, r20
    1afe:	88 81       	ld	r24, Y
    1b00:	99 81       	ldd	r25, Y+1	; 0x01
    1b02:	42 97       	sbiw	r24, 0x12	; 18
    1b04:	8d 93       	st	X+, r24
    1b06:	9c 93       	st	X, r25
	laserDiodeData.lasersettings.Duration = duration;
    1b08:	88 81       	ld	r24, Y
    1b0a:	99 81       	ldd	r25, Y+1	; 0x01
    1b0c:	e6 50       	subi	r30, 0x06	; 6
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
	
	return true;
}
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
		update = false;
	}
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    1b20:	4f 92       	push	r4
    1b22:	5f 92       	push	r5
    1b24:	6f 92       	push	r6
    1b26:	7f 92       	push	r7
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	2c 97       	sbiw	r28, 0x0c	; 12
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	6c 01       	movw	r12, r24
    1b48:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    1b4a:	db 01       	movw	r26, r22
    1b4c:	0d 91       	ld	r16, X+
    1b4e:	1c 91       	ld	r17, X
    1b50:	88 ee       	ldi	r24, 0xE8	; 232
    1b52:	93 e0       	ldi	r25, 0x03	; 3
    1b54:	b8 01       	movw	r22, r16
    1b56:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    1b5a:	7b 01       	movw	r14, r22
	uint32_t dutycycle = uint32_t(settings->Duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    1b5c:	22 81       	ldd	r18, Z+2	; 0x02
    1b5e:	33 81       	ldd	r19, Z+3	; 0x03
    1b60:	a8 ee       	ldi	r26, 0xE8	; 232
    1b62:	b3 e0       	ldi	r27, 0x03	; 3
    1b64:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    1b68:	97 01       	movw	r18, r14
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    1b72:	29 01       	movw	r4, r18
    1b74:	3a 01       	movw	r6, r20
	
	// calculate timer settings
	laserTimerPeriod = (6250 / profile->Frequency) * 10;
    1b76:	8a e6       	ldi	r24, 0x6A	; 106
    1b78:	98 e1       	ldi	r25, 0x18	; 24
    1b7a:	b8 01       	movw	r22, r16
    1b7c:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    1b80:	8b 01       	movw	r16, r22
    1b82:	00 0f       	add	r16, r16
    1b84:	11 1f       	adc	r17, r17
    1b86:	ab 01       	movw	r20, r22
    1b88:	44 0f       	add	r20, r20
    1b8a:	55 1f       	adc	r21, r21
    1b8c:	44 0f       	add	r20, r20
    1b8e:	55 1f       	adc	r21, r21
    1b90:	44 0f       	add	r20, r20
    1b92:	55 1f       	adc	r21, r21
    1b94:	04 0f       	add	r16, r20
    1b96:	15 1f       	adc	r17, r21
    1b98:	f6 01       	movw	r30, r12
    1b9a:	ee 52       	subi	r30, 0x2E	; 46
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	00 83       	st	Z, r16
    1ba0:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1ba2:	56 01       	movw	r10, r12
    1ba4:	b4 ed       	ldi	r27, 0xD4	; 212
    1ba6:	ab 0e       	add	r10, r27
    1ba8:	b1 1c       	adc	r11, r1
    1baa:	d8 01       	movw	r26, r16
    1bac:	a3 01       	movw	r20, r6
    1bae:	92 01       	movw	r18, r4
    1bb0:	0e 94 27 40 	call	0x804e	; 0x804e <__muluhisi3>
    1bb4:	28 ee       	ldi	r18, 0xE8	; 232
    1bb6:	33 e0       	ldi	r19, 0x03	; 3
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    1bc0:	02 1b       	sub	r16, r18
    1bc2:	13 0b       	sbc	r17, r19
    1bc4:	f5 01       	movw	r30, r10
    1bc6:	00 83       	st	Z, r16
    1bc8:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCyclems = period;
    1bca:	32 96       	adiw	r30, 0x02	; 2
    1bcc:	e0 82       	st	Z, r14
    1bce:	f1 82       	std	Z+1, r15	; 0x01
	
	laserTimer.EnableChannel(TIMER_CHANNEL_A);
    1bd0:	60 e1       	ldi	r22, 0x10	; 16
    1bd2:	8c e1       	ldi	r24, 0x1C	; 28
    1bd4:	96 e2       	ldi	r25, 0x26	; 38
    1bd6:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);
    1bda:	60 e2       	ldi	r22, 0x20	; 32
    1bdc:	8c e1       	ldi	r24, 0x1C	; 28
    1bde:	96 e2       	ldi	r25, 0x26	; 38
    1be0:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1be4:	60 e1       	ldi	r22, 0x10	; 16
    1be6:	8c e1       	ldi	r24, 0x1C	; 28
    1be8:	96 e2       	ldi	r25, 0x26	; 38
    1bea:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1bee:	60 e2       	ldi	r22, 0x20	; 32
    1bf0:	8c e1       	ldi	r24, 0x1C	; 28
    1bf2:	96 e2       	ldi	r25, 0x26	; 38
    1bf4:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	return result;
    1bf8:	86 e0       	ldi	r24, 0x06	; 6
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	37 96       	adiw	r30, 0x07	; 7
    1bfe:	de 01       	movw	r26, r28
    1c00:	11 96       	adiw	r26, 0x01	; 1
    1c02:	01 90       	ld	r0, Z+
    1c04:	0d 92       	st	X+, r0
    1c06:	8a 95       	dec	r24
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0xe2>
    1c0a:	29 81       	ldd	r18, Y+1	; 0x01
    1c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0e:	4b 81       	ldd	r20, Y+3	; 0x03
    1c10:	5c 81       	ldd	r21, Y+4	; 0x04
    1c12:	6d 81       	ldd	r22, Y+5	; 0x05
    1c14:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	2c 96       	adiw	r28, 0x0c	; 12
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	cf 90       	pop	r12
    1c30:	bf 90       	pop	r11
    1c32:	af 90       	pop	r10
    1c34:	7f 90       	pop	r7
    1c36:	6f 90       	pop	r6
    1c38:	5f 90       	pop	r5
    1c3a:	4f 90       	pop	r4
    1c3c:	08 95       	ret

00001c3e <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <_ZN16CLaserControlApp13MelaninPresetEj+0xe>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <_ZN16CLaserControlApp13MelaninPresetEj+0x10>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	7c 01       	movw	r14, r24
	uint16_t freq = 3;
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t duration = 65;
    1c5c:	81 e4       	ldi	r24, 0x41	; 65
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	8b 83       	std	Y+3, r24	; 0x03
    1c62:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t energy = 22;
    1c64:	86 e1       	ldi	r24, 0x16	; 22
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
	
	Profile = PROFILE_SLOW;
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	f7 01       	movw	r30, r14
    1c70:	86 87       	std	Z+14, r24	; 0x0e
	laserDiodeData.mode = Profile;
    1c72:	e0 51       	subi	r30, 0x10	; 16
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	80 83       	st	Z, r24
    1c7c:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
    1c7e:	6a 30       	cpi	r22, 0x0A	; 10
    1c80:	71 05       	cpc	r23, r1
    1c82:	70 f4       	brcc	.+28     	; 0x1ca0 <_ZN16CLaserControlApp13MelaninPresetEj+0x62>
	{
		laserDiodeData.phototype = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	74 96       	adiw	r30, 0x14	; 20
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 75; energy = 21;
    1c8e:	8b e4       	ldi	r24, 0x4B	; 75
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	85 e1       	ldi	r24, 0x15	; 21
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	57 c0       	rjmp	.+174    	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 20)
    1ca0:	64 31       	cpi	r22, 0x14	; 20
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	80 f4       	brcc	.+32     	; 0x1cc6 <_ZN16CLaserControlApp13MelaninPresetEj+0x88>
	{
		laserDiodeData.phototype = 2;
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	f7 01       	movw	r30, r14
    1cac:	ec 5f       	subi	r30, 0xFC	; 252
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	80 83       	st	Z, r24
    1cb2:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 70; energy = 23;
    1cb4:	86 e4       	ldi	r24, 0x46	; 70
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	87 e1       	ldi	r24, 0x17	; 23
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	44 c0       	rjmp	.+136    	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 35)
    1cc6:	63 32       	cpi	r22, 0x23	; 35
    1cc8:	71 05       	cpc	r23, r1
    1cca:	80 f4       	brcc	.+32     	; 0x1cec <_ZN16CLaserControlApp13MelaninPresetEj+0xae>
	{
		laserDiodeData.phototype = 3;
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	f7 01       	movw	r30, r14
    1cd2:	ec 5f       	subi	r30, 0xFC	; 252
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 70; energy = 23;
    1cda:	86 e4       	ldi	r24, 0x46	; 70
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	87 e1       	ldi	r24, 0x17	; 23
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	31 c0       	rjmp	.+98     	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 49)
    1cec:	61 33       	cpi	r22, 0x31	; 49
    1cee:	71 05       	cpc	r23, r1
    1cf0:	60 f4       	brcc	.+24     	; 0x1d0a <_ZN16CLaserControlApp13MelaninPresetEj+0xcc>
	{
		laserDiodeData.phototype = 4;
    1cf2:	84 e0       	ldi	r24, 0x04	; 4
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	ec 5f       	subi	r30, 0xFC	; 252
    1cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfc:	80 83       	st	Z, r24
    1cfe:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 65; energy = 21;
    1d00:	85 e1       	ldi	r24, 0x15	; 21
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	22 c0       	rjmp	.+68     	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 72)
    1d0a:	68 34       	cpi	r22, 0x48	; 72
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	60 f4       	brcc	.+24     	; 0x1d28 <_ZN16CLaserControlApp13MelaninPresetEj+0xea>
	{
		laserDiodeData.phototype = 5;
    1d10:	85 e0       	ldi	r24, 0x05	; 5
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	f7 01       	movw	r30, r14
    1d16:	ec 5f       	subi	r30, 0xFC	; 252
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 100; energy = 22;
    1d1e:	84 e6       	ldi	r24, 0x64	; 100
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	8b 83       	std	Y+3, r24	; 0x03
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	{
		laserDiodeData.phototype = 6;
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	ec 5f       	subi	r30, 0xFC	; 252
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	80 83       	st	Z, r24
    1d34:	91 83       	std	Z+1, r25	; 0x01
		freq = 1; duration = 200; energy = 32;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	8b 83       	std	Y+3, r24	; 0x03
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	LaserPreset(freq, duration, energy, Profile);
    1d4e:	f7 01       	movw	r30, r14
    1d50:	06 85       	ldd	r16, Z+14	; 0x0e
    1d52:	9e 01       	movw	r18, r28
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	ae 01       	movw	r20, r28
    1d5a:	4d 5f       	subi	r20, 0xFD	; 253
    1d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5e:	be 01       	movw	r22, r28
    1d60:	6b 5f       	subi	r22, 0xFB	; 251
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	c7 01       	movw	r24, r14
    1d66:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	update = true;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	81 8b       	std	Z+17, r24	; 0x11
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1d70:	26 85       	ldd	r18, Z+14	; 0x0e
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	87 01       	movw	r16, r14
    1d76:	08 50       	subi	r16, 0x08	; 8
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	b9 01       	movw	r22, r18
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	ab 01       	movw	r20, r22
    1d82:	42 0f       	add	r20, r18
    1d84:	53 1f       	adc	r21, r19
    1d86:	44 0f       	add	r20, r20
    1d88:	55 1f       	adc	r21, r21
    1d8a:	4c 54       	subi	r20, 0x4C	; 76
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8e:	4e 0d       	add	r20, r14
    1d90:	5f 1d       	adc	r21, r15
    1d92:	62 0f       	add	r22, r18
    1d94:	73 1f       	adc	r23, r19
    1d96:	66 0f       	add	r22, r22
    1d98:	77 1f       	adc	r23, r23
    1d9a:	6a 56       	subi	r22, 0x6A	; 106
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	6e 0d       	add	r22, r14
    1da0:	7f 1d       	adc	r23, r15
    1da2:	c7 01       	movw	r24, r14
    1da4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1da8:	f8 01       	movw	r30, r16
    1daa:	20 83       	st	Z, r18
    1dac:	31 83       	std	Z+1, r19	; 0x01
    1dae:	42 83       	std	Z+2, r20	; 0x02
    1db0:	53 83       	std	Z+3, r21	; 0x03
    1db2:	64 83       	std	Z+4, r22	; 0x04
    1db4:	75 83       	std	Z+5, r23	; 0x05
}
    1db6:	26 96       	adiw	r28, 0x06	; 6
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	08 95       	ret

00001dca <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <_ZN16CLaserControlApp15PhototypePresetEj+0xe>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <_ZN16CLaserControlApp15PhototypePresetEj+0x10>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	7c 01       	movw	r14, r24
	uint16_t freq = 3;
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t duration = 65;
    1de8:	81 e4       	ldi	r24, 0x41	; 65
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t energy = 22;
    1df0:	86 e1       	ldi	r24, 0x16	; 22
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	9a 83       	std	Y+2, r25	; 0x02
	
	Profile = PROFILE_SLOW;
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	f7 01       	movw	r30, r14
    1dfc:	86 87       	std	Z+14, r24	; 0x0e
	laserDiodeData.mode = Profile;
    1dfe:	e0 51       	subi	r30, 0x10	; 16
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
    1e0a:	74 96       	adiw	r30, 0x14	; 20
    1e0c:	60 83       	st	Z, r22
    1e0e:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
    1e10:	63 30       	cpi	r22, 0x03	; 3
    1e12:	71 05       	cpc	r23, r1
    1e14:	91 f1       	breq	.+100    	; 0x1e7a <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
    1e16:	38 f4       	brcc	.+14     	; 0x1e26 <_ZN16CLaserControlApp15PhototypePresetEj+0x5c>
    1e18:	61 30       	cpi	r22, 0x01	; 1
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
    1e1e:	62 30       	cpi	r22, 0x02	; 2
    1e20:	71 05       	cpc	r23, r1
    1e22:	d9 f0       	breq	.+54     	; 0x1e5a <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
    1e24:	65 c0       	rjmp	.+202    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
    1e26:	65 30       	cpi	r22, 0x05	; 5
    1e28:	71 05       	cpc	r23, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <_ZN16CLaserControlApp15PhototypePresetEj+0x64>
    1e2c:	42 c0       	rjmp	.+132    	; 0x1eb2 <_ZN16CLaserControlApp15PhototypePresetEj+0xe8>
    1e2e:	a8 f1       	brcs	.+106    	; 0x1e9a <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
    1e30:	66 30       	cpi	r22, 0x06	; 6
    1e32:	71 05       	cpc	r23, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <_ZN16CLaserControlApp15PhototypePresetEj+0x6e>
    1e36:	49 c0       	rjmp	.+146    	; 0x1eca <_ZN16CLaserControlApp15PhototypePresetEj+0x100>
    1e38:	5b c0       	rjmp	.+182    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
    1e3a:	85 e0       	ldi	r24, 0x05	; 5
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	f7 01       	movw	r30, r14
    1e40:	ee 5f       	subi	r30, 0xFE	; 254
    1e42:	fe 4f       	sbci	r31, 0xFE	; 254
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 75; energy = 21;
    1e48:	8b e4       	ldi	r24, 0x4B	; 75
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	85 e1       	ldi	r24, 0x15	; 21
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e58:	4b c0       	rjmp	.+150    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 2:
		{
			laserDiodeData.melanin = 14;
    1e5a:	8e e0       	ldi	r24, 0x0E	; 14
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	f7 01       	movw	r30, r14
    1e60:	ee 5f       	subi	r30, 0xFE	; 254
    1e62:	fe 4f       	sbci	r31, 0xFE	; 254
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 70; energy = 23;
    1e68:	86 e4       	ldi	r24, 0x46	; 70
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	87 e1       	ldi	r24, 0x17	; 23
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e78:	3b c0       	rjmp	.+118    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 3:
		{
			laserDiodeData.melanin = 27;
    1e7a:	8b e1       	ldi	r24, 0x1B	; 27
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	f7 01       	movw	r30, r14
    1e80:	ee 5f       	subi	r30, 0xFE	; 254
    1e82:	fe 4f       	sbci	r31, 0xFE	; 254
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 70; energy = 23;
    1e88:	86 e4       	ldi	r24, 0x46	; 70
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	87 e1       	ldi	r24, 0x17	; 23
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e98:	2b c0       	rjmp	.+86     	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 4:
		{
			laserDiodeData.melanin = 41;
    1e9a:	89 e2       	ldi	r24, 0x29	; 41
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	ee 5f       	subi	r30, 0xFE	; 254
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	80 83       	st	Z, r24
    1ea6:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 65; energy = 21;
    1ea8:	85 e1       	ldi	r24, 0x15	; 21
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 5:
		{
			laserDiodeData.melanin = 61;
    1eb2:	8d e3       	ldi	r24, 0x3D	; 61
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	ee 5f       	subi	r30, 0xFE	; 254
    1eba:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebc:	80 83       	st	Z, r24
    1ebe:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 100; energy = 22;
    1ec0:	84 e6       	ldi	r24, 0x64	; 100
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
		}
		break;
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 6:
		{
			laserDiodeData.melanin = 85;
    1eca:	85 e5       	ldi	r24, 0x55	; 85
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	f7 01       	movw	r30, r14
    1ed0:	ee 5f       	subi	r30, 0xFE	; 254
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed4:	80 83       	st	Z, r24
    1ed6:	91 83       	std	Z+1, r25	; 0x01
			freq = 1; duration = 200; energy = 32;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	9a 83       	std	Y+2, r25	; 0x02
		}
	}
	
	LaserPreset(freq, duration, energy, Profile);
    1ef0:	02 e0       	ldi	r16, 0x02	; 2
    1ef2:	9e 01       	movw	r18, r28
    1ef4:	2f 5f       	subi	r18, 0xFF	; 255
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	ae 01       	movw	r20, r28
    1efa:	4d 5f       	subi	r20, 0xFD	; 253
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	be 01       	movw	r22, r28
    1f00:	6b 5f       	subi	r22, 0xFB	; 251
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	c7 01       	movw	r24, r14
    1f06:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	update = true;	
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	81 8b       	std	Z+17, r24	; 0x11
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1f10:	26 85       	ldd	r18, Z+14	; 0x0e
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	87 01       	movw	r16, r14
    1f16:	08 50       	subi	r16, 0x08	; 8
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	66 0f       	add	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	ab 01       	movw	r20, r22
    1f22:	42 0f       	add	r20, r18
    1f24:	53 1f       	adc	r21, r19
    1f26:	44 0f       	add	r20, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	4c 54       	subi	r20, 0x4C	; 76
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	4e 0d       	add	r20, r14
    1f30:	5f 1d       	adc	r21, r15
    1f32:	62 0f       	add	r22, r18
    1f34:	73 1f       	adc	r23, r19
    1f36:	66 0f       	add	r22, r22
    1f38:	77 1f       	adc	r23, r23
    1f3a:	6a 56       	subi	r22, 0x6A	; 106
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	6e 0d       	add	r22, r14
    1f40:	7f 1d       	adc	r23, r15
    1f42:	c7 01       	movw	r24, r14
    1f44:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1f48:	f8 01       	movw	r30, r16
    1f4a:	20 83       	st	Z, r18
    1f4c:	31 83       	std	Z+1, r19	; 0x01
    1f4e:	42 83       	std	Z+2, r20	; 0x02
    1f50:	53 83       	std	Z+3, r21	; 0x03
    1f52:	64 83       	std	Z+4, r22	; 0x04
    1f54:	75 83       	std	Z+5, r23	; 0x05
}
    1f56:	26 96       	adiw	r28, 0x06	; 6
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	08 95       	ret

00001f6a <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x24>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x26>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	7c 01       	movw	r14, r24
	// GUI class initialization
	m_cpSender = sender;
    1f96:	fc 01       	movw	r30, r24
    1f98:	e8 5d       	subi	r30, 0xD8	; 216
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	60 83       	st	Z, r22
    1f9e:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	17 86       	std	Z+15, r1	; 0x0f
	update = false;
    1fa4:	11 8a       	std	Z+17, r1	; 0x11
	prepare = false;
    1fa6:	12 8a       	std	Z+18, r1	; 0x12
	peltier_en = false;
    1fa8:	13 8a       	std	Z+19, r1	; 0x13
	//isstarted = false;
	m_wSetMin = 0;
    1faa:	5c 01       	movw	r10, r24
    1fac:	f0 ee       	ldi	r31, 0xE0	; 224
    1fae:	af 1a       	sub	r10, r31
    1fb0:	fe ef       	ldi	r31, 0xFE	; 254
    1fb2:	bf 0a       	sbc	r11, r31
    1fb4:	f5 01       	movw	r30, r10
    1fb6:	10 82       	st	Z, r1
    1fb8:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 0;
    1fba:	6c 01       	movw	r12, r24
    1fbc:	fe ed       	ldi	r31, 0xDE	; 222
    1fbe:	cf 1a       	sub	r12, r31
    1fc0:	fe ef       	ldi	r31, 0xFE	; 254
    1fc2:	df 0a       	sbc	r13, r31
    1fc4:	f6 01       	movw	r30, r12
    1fc6:	10 82       	st	Z, r1
    1fc8:	11 82       	std	Z+1, r1	; 0x01
	m_wMillSec = 0;
    1fca:	34 97       	sbiw	r30, 0x04	; 4
    1fcc:	10 82       	st	Z, r1
    1fce:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    1fd0:	f5 01       	movw	r30, r10
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	36 97       	sbiw	r30, 0x06	; 6
    1fd8:	80 83       	st	Z, r24
    1fda:	91 83       	std	Z+1, r25	; 0x01
	m_wSeconds = m_wSetSec;
    1fdc:	f6 01       	movw	r30, r12
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	36 97       	sbiw	r30, 0x06	; 6
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
	m_wDeadTime = 0;
    1fe8:	3a 96       	adiw	r30, 0x0a	; 10
    1fea:	10 82       	st	Z, r1
    1fec:	11 82       	std	Z+1, r1	; 0x01
	
	uint16_t freq = 10;
    1fee:	0f 2e       	mov	r0, r31
    1ff0:	fa e0       	ldi	r31, 0x0A	; 10
    1ff2:	8f 2e       	mov	r8, r31
    1ff4:	91 2c       	mov	r9, r1
    1ff6:	f0 2d       	mov	r31, r0
    1ff8:	8d 82       	std	Y+5, r8	; 0x05
    1ffa:	9e 82       	std	Y+6, r9	; 0x06
	uint16_t duration = 40;
    1ffc:	0f 2e       	mov	r0, r31
    1ffe:	f8 e2       	ldi	r31, 0x28	; 40
    2000:	4f 2e       	mov	r4, r31
    2002:	51 2c       	mov	r5, r1
    2004:	f0 2d       	mov	r31, r0
    2006:	4b 82       	std	Y+3, r4	; 0x03
    2008:	5c 82       	std	Y+4, r5	; 0x04
	uint16_t energy = 14;
    200a:	0f 2e       	mov	r0, r31
    200c:	fe e0       	ldi	r31, 0x0E	; 14
    200e:	2f 2e       	mov	r2, r31
    2010:	31 2c       	mov	r3, r1
    2012:	f0 2d       	mov	r31, r0
    2014:	29 82       	std	Y+1, r2	; 0x01
    2016:	3a 82       	std	Y+2, r3	; 0x02
	
	// Fast profile
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    2018:	04 e0       	ldi	r16, 0x04	; 4
    201a:	9e 01       	movw	r18, r28
    201c:	2f 5f       	subi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	ae 01       	movw	r20, r28
    2022:	4d 5f       	subi	r20, 0xFD	; 253
    2024:	5f 4f       	sbci	r21, 0xFF	; 255
    2026:	be 01       	movw	r22, r28
    2028:	6b 5f       	subi	r22, 0xFB	; 251
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	c7 01       	movw	r24, r14
    202e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Medium profile
	freq = 5; duration = 80; energy = 26;
    2032:	85 e0       	ldi	r24, 0x05	; 5
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	80 e5       	ldi	r24, 0x50	; 80
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8a e1       	ldi	r24, 0x1A	; 26
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_MEDIUM);
    204a:	03 e0       	ldi	r16, 0x03	; 3
    204c:	9e 01       	movw	r18, r28
    204e:	2f 5f       	subi	r18, 0xFF	; 255
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	ae 01       	movw	r20, r28
    2054:	4d 5f       	subi	r20, 0xFD	; 253
    2056:	5f 4f       	sbci	r21, 0xFF	; 255
    2058:	be 01       	movw	r22, r28
    205a:	6b 5f       	subi	r22, 0xFB	; 251
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	c7 01       	movw	r24, r14
    2060:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Slow profile
	freq = 2; duration = 120; energy = 36;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	88 e7       	ldi	r24, 0x78	; 120
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	8b 83       	std	Y+3, r24	; 0x03
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	84 e2       	ldi	r24, 0x24	; 36
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SLOW);
    207c:	02 e0       	ldi	r16, 0x02	; 2
    207e:	9e 01       	movw	r18, r28
    2080:	2f 5f       	subi	r18, 0xFF	; 255
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	ae 01       	movw	r20, r28
    2086:	4d 5f       	subi	r20, 0xFD	; 253
    2088:	5f 4f       	sbci	r21, 0xFF	; 255
    208a:	be 01       	movw	r22, r28
    208c:	6b 5f       	subi	r22, 0xFB	; 251
    208e:	7f 4f       	sbci	r23, 0xFF	; 255
    2090:	c7 01       	movw	r24, r14
    2092:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Single profile
	freq = 1; duration = 100; energy = 38;
    2096:	66 24       	eor	r6, r6
    2098:	63 94       	inc	r6
    209a:	71 2c       	mov	r7, r1
    209c:	6d 82       	std	Y+5, r6	; 0x05
    209e:	7e 82       	std	Y+6, r7	; 0x06
    20a0:	84 e6       	ldi	r24, 0x64	; 100
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	86 e2       	ldi	r24, 0x26	; 38
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SINGLE);
    20b0:	01 e0       	ldi	r16, 0x01	; 1
    20b2:	9e 01       	movw	r18, r28
    20b4:	2f 5f       	subi	r18, 0xFF	; 255
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	ae 01       	movw	r20, r28
    20ba:	4d 5f       	subi	r20, 0xFD	; 253
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	be 01       	movw	r22, r28
    20c0:	6b 5f       	subi	r22, 0xFB	; 251
    20c2:	7f 4f       	sbci	r23, 0xFF	; 255
    20c4:	c7 01       	movw	r24, r14
    20c6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Current profile
	Profile = PROFILE_FAST;
    20ca:	84 e0       	ldi	r24, 0x04	; 4
    20cc:	f7 01       	movw	r30, r14
    20ce:	86 87       	std	Z+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	0e 94 68 41 	call	0x82d0	; 0x82d0 <eeprom_read_dword>
    20d8:	f7 01       	movw	r30, r14
    20da:	e6 52       	subi	r30, 0x26	; 38
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 83       	st	Z, r22
    20e0:	71 83       	std	Z+1, r23	; 0x01
    20e2:	82 83       	std	Z+2, r24	; 0x02
    20e4:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    20e6:	76 96       	adiw	r30, 0x16	; 22
    20e8:	24 e0       	ldi	r18, 0x04	; 4
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	20 83       	st	Z, r18
    20ee:	31 83       	std	Z+1, r19	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    20f0:	d7 01       	movw	r26, r14
    20f2:	ae 50       	subi	r26, 0x0E	; 14
    20f4:	bf 4f       	sbci	r27, 0xFF	; 255
    20f6:	e2 54       	subi	r30, 0x42	; 66
    20f8:	f1 09       	sbc	r31, r1
    20fa:	26 e0       	ldi	r18, 0x06	; 6
    20fc:	01 90       	ld	r0, Z+
    20fe:	0d 92       	st	X+, r0
    2100:	2a 95       	dec	r18
    2102:	e1 f7       	brne	.-8      	; 0x20fc <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x192>
	memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[PROFILE_FAST], sizeof(DGUS_LASERSETTINGS));
    2104:	d7 01       	movw	r26, r14
    2106:	a8 50       	subi	r26, 0x08	; 8
    2108:	bf 4f       	sbci	r27, 0xFF	; 255
    210a:	f7 01       	movw	r30, r14
    210c:	e4 53       	subi	r30, 0x34	; 52
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	26 e0       	ldi	r18, 0x06	; 6
    2112:	01 90       	ld	r0, Z+
    2114:	0d 92       	st	X+, r0
    2116:	2a 95       	dec	r18
    2118:	e1 f7       	brne	.-8      	; 0x2112 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x1a8>
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    211a:	f5 01       	movw	r30, r10
    211c:	20 81       	ld	r18, Z
    211e:	31 81       	ldd	r19, Z+1	; 0x01
    2120:	74 97       	sbiw	r30, 0x14	; 20
    2122:	20 83       	st	Z, r18
    2124:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    2126:	f6 01       	movw	r30, r12
    2128:	20 81       	ld	r18, Z
    212a:	31 81       	ldd	r19, Z+1	; 0x01
    212c:	74 97       	sbiw	r30, 0x14	; 20
    212e:	20 83       	st	Z, r18
    2130:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    2132:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z6swap32m>
    2136:	f7 01       	movw	r30, r14
    2138:	e2 50       	subi	r30, 0x02	; 2
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 83       	st	Z, r22
    213e:	71 83       	std	Z+1, r23	; 0x01
    2140:	82 83       	std	Z+2, r24	; 0x02
    2142:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    2144:	34 96       	adiw	r30, 0x04	; 4
    2146:	10 82       	st	Z, r1
    2148:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    214a:	32 96       	adiw	r30, 0x02	; 2
    214c:	60 82       	st	Z, r6
    214e:	71 82       	std	Z+1, r7	; 0x01
	laserDiodeData.temperature = temperature;
    2150:	32 96       	adiw	r30, 0x02	; 2
    2152:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2156:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    215e:	32 96       	adiw	r30, 0x02	; 2
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	80 83       	st	Z, r24
    2166:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    2168:	32 96       	adiw	r30, 0x02	; 2
    216a:	10 82       	st	Z, r1
    216c:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    216e:	36 96       	adiw	r30, 0x06	; 6
    2170:	10 82       	st	Z, r1
    2172:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    2174:	32 96       	adiw	r30, 0x02	; 2
    2176:	8d e0       	ldi	r24, 0x0D	; 13
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	80 83       	st	Z, r24
    217c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    217e:	34 96       	adiw	r30, 0x04	; 4
    2180:	10 82       	st	Z, r1
    2182:	11 82       	std	Z+1, r1	; 0x01
    2184:	12 82       	std	Z+2, r1	; 0x02
    2186:	13 82       	std	Z+3, r1	; 0x03
	
	// Preset hardware to FAST mode
	freq = 10;
    2188:	8d 82       	std	Y+5, r8	; 0x05
    218a:	9e 82       	std	Y+6, r9	; 0x06
	duration = 40;
    218c:	4b 82       	std	Y+3, r4	; 0x03
    218e:	5c 82       	std	Y+4, r5	; 0x04
	energy = 14;
    2190:	29 82       	std	Y+1, r2	; 0x01
    2192:	3a 82       	std	Y+2, r3	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    2194:	04 e0       	ldi	r16, 0x04	; 4
    2196:	9e 01       	movw	r18, r28
    2198:	2f 5f       	subi	r18, 0xFF	; 255
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	ae 01       	movw	r20, r28
    219e:	4d 5f       	subi	r20, 0xFD	; 253
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	be 01       	movw	r22, r28
    21a4:	6b 5f       	subi	r22, 0xFB	; 251
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	c7 01       	movw	r24, r14
    21aa:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    21ae:	47 e0       	ldi	r20, 0x07	; 7
    21b0:	63 e0       	ldi	r22, 0x03	; 3
    21b2:	8c e1       	ldi	r24, 0x1C	; 28
    21b4:	96 e2       	ldi	r25, 0x26	; 38
    21b6:	0e 94 95 3d 	call	0x7b2a	; 0x7b2a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    21ba:	f7 01       	movw	r30, r14
    21bc:	ee 52       	subi	r30, 0x2E	; 46
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	8c e1       	ldi	r24, 0x1C	; 28
    21c6:	96 e2       	ldi	r25, 0x26	; 38
    21c8:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    21cc:	67 01       	movw	r12, r14
    21ce:	f4 ed       	ldi	r31, 0xD4	; 212
    21d0:	cf 0e       	add	r12, r31
    21d2:	d1 1c       	adc	r13, r1
    21d4:	f6 01       	movw	r30, r12
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	8c e1       	ldi	r24, 0x1C	; 28
    21dc:	96 e2       	ldi	r25, 0x26	; 38
    21de:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    21e2:	21 e0       	ldi	r18, 0x01	; 1
    21e4:	a7 01       	movw	r20, r14
    21e6:	61 ea       	ldi	r22, 0xA1	; 161
    21e8:	7b e1       	ldi	r23, 0x1B	; 27
    21ea:	8c e1       	ldi	r24, 0x1C	; 28
    21ec:	96 e2       	ldi	r25, 0x26	; 38
    21ee:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    21f2:	21 e0       	ldi	r18, 0x01	; 1
    21f4:	a7 01       	movw	r20, r14
    21f6:	6f e5       	ldi	r22, 0x5F	; 95
    21f8:	74 e0       	ldi	r23, 0x04	; 4
    21fa:	8c e1       	ldi	r24, 0x1C	; 28
    21fc:	96 e2       	ldi	r25, 0x26	; 38
    21fe:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    2202:	60 e1       	ldi	r22, 0x10	; 16
    2204:	8c e1       	ldi	r24, 0x1C	; 28
    2206:	96 e2       	ldi	r25, 0x26	; 38
    2208:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    220c:	60 e1       	ldi	r22, 0x10	; 16
    220e:	8c e1       	ldi	r24, 0x1C	; 28
    2210:	96 e2       	ldi	r25, 0x26	; 38
    2212:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    2216:	f6 01       	movw	r30, r12
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	8c e1       	ldi	r24, 0x1C	; 28
    221e:	96 e2       	ldi	r25, 0x26	; 38
    2220:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    2224:	60 e2       	ldi	r22, 0x20	; 32
    2226:	8c e1       	ldi	r24, 0x1C	; 28
    2228:	96 e2       	ldi	r25, 0x26	; 38
    222a:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    222e:	60 e2       	ldi	r22, 0x20	; 32
    2230:	8c e1       	ldi	r24, 0x1C	; 28
    2232:	96 e2       	ldi	r25, 0x26	; 38
    2234:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    2238:	26 96       	adiw	r28, 0x06	; 6
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	6f 90       	pop	r6
    2258:	5f 90       	pop	r5
    225a:	4f 90       	pop	r4
    225c:	3f 90       	pop	r3
    225e:	2f 90       	pop	r2
    2260:	08 95       	ret

00002262 <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	ac 97       	sbiw	r28, 0x2c	; 44
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_Z4swapj>
    2282:	8b a7       	std	Y+43, r24	; 0x2b
    2284:	9c a7       	std	Y+44, r25	; 0x2c
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    2286:	78 01       	movw	r14, r16
    2288:	88 ed       	ldi	r24, 0xD8	; 216
    228a:	e8 1a       	sub	r14, r24
    228c:	8e ef       	ldi	r24, 0xFE	; 254
    228e:	f8 0a       	sbc	r15, r24
    2290:	22 e0       	ldi	r18, 0x02	; 2
    2292:	ae 01       	movw	r20, r28
    2294:	45 5d       	subi	r20, 0xD5	; 213
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	63 e0       	ldi	r22, 0x03	; 3
    229a:	f7 01       	movw	r30, r14
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    22a4:	f7 01       	movw	r30, r14
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	DGUS_LASERDIODE data;
	memcpy(&data, &laserDiodeData, sizeof(data));
    22ae:	f8 01       	movw	r30, r16
    22b0:	e0 51       	subi	r30, 0x10	; 16
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	8a e2       	ldi	r24, 0x2A	; 42
    22b6:	de 01       	movw	r26, r28
    22b8:	11 96       	adiw	r26, 0x01	; 1
    22ba:	01 90       	ld	r0, Z+
    22bc:	0d 92       	st	X+, r0
    22be:	8a 95       	dec	r24
    22c0:	e1 f7       	brne	.-8      	; 0x22ba <_ZN16CLaserControlApp5StartEv+0x58>
	data.lasersettings.Energy = laserDiodeData.lasersettings.Energy + laserDiodeData.lasersettings.Energy / 5;
    22c2:	f8 01       	movw	r30, r16
    22c4:	e4 50       	subi	r30, 0x04	; 4
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	40 81       	ld	r20, Z
    22ca:	51 81       	ldd	r21, Z+1	; 0x01
    22cc:	9a 01       	movw	r18, r20
    22ce:	ad ec       	ldi	r26, 0xCD	; 205
    22d0:	bc ec       	ldi	r27, 0xCC	; 204
    22d2:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    22d6:	96 95       	lsr	r25
    22d8:	87 95       	ror	r24
    22da:	96 95       	lsr	r25
    22dc:	87 95       	ror	r24
    22de:	48 0f       	add	r20, r24
    22e0:	59 1f       	adc	r21, r25
    22e2:	4d 87       	std	Y+13, r20	; 0x0d
    22e4:	5e 87       	std	Y+14, r21	; 0x0e
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&data, sizeof(DGUS_LASERDIODE));
    22e6:	2a e2       	ldi	r18, 0x2A	; 42
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	ae 01       	movw	r20, r28
    22ec:	4f 5f       	subi	r20, 0xFF	; 255
    22ee:	5f 4f       	sbci	r21, 0xFF	; 255
    22f0:	61 e0       	ldi	r22, 0x01	; 1
    22f2:	70 e0       	ldi	r23, 0x00	; 0
    22f4:	f7 01       	movw	r30, r14
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    22fe:	f7 01       	movw	r30, r14
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    2308:	68 ea       	ldi	r22, 0xA8	; 168
    230a:	71 e6       	ldi	r23, 0x61	; 97
    230c:	82 e2       	ldi	r24, 0x22	; 34
    230e:	96 e2       	ldi	r25, 0x26	; 38
    2310:	0e 94 b4 3a 	call	0x7568	; 0x7568 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	f8 01       	movw	r30, r16
    231a:	84 87       	std	Z+12, r24	; 0x0c
    231c:	95 87       	std	Z+13, r25	; 0x0d
}
    231e:	ac 96       	adiw	r28, 0x2c	; 44
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	08 95       	ret

00002332 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
	
	return result;
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateMultiPulseLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    2332:	4f 92       	push	r4
    2334:	5f 92       	push	r5
    2336:	6f 92       	push	r6
    2338:	7f 92       	push	r7
    233a:	8f 92       	push	r8
    233c:	9f 92       	push	r9
    233e:	af 92       	push	r10
    2340:	bf 92       	push	r11
    2342:	cf 92       	push	r12
    2344:	df 92       	push	r13
    2346:	ef 92       	push	r14
    2348:	ff 92       	push	r15
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	2c 97       	sbiw	r28, 0x0c	; 12
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	8c 01       	movw	r16, r24
    235e:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    2360:	db 01       	movw	r26, r22
    2362:	2d 91       	ld	r18, X+
    2364:	3c 91       	ld	r19, X
    2366:	88 ee       	ldi	r24, 0xE8	; 232
    2368:	93 e0       	ldi	r25, 0x03	; 3
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
	uint16_t duration1 = settings->Duration / 2;
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	6c 01       	movw	r12, r24
    2376:	d6 94       	lsr	r13
    2378:	c7 94       	ror	r12
	uint16_t period1;
	uint16_t period2;
	uint16_t period3;
	uint16_t period4;
	
	if (profile->Frequency >= 2)
    237a:	22 30       	cpi	r18, 0x02	; 2
    237c:	31 05       	cpc	r19, r1
    237e:	48 f0       	brcs	.+18     	; 0x2392 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x60>
	{
		period3 = period - (settings->Duration - 5);
    2380:	7b 01       	movw	r14, r22
    2382:	e8 1a       	sub	r14, r24
    2384:	f9 0a       	sbc	r15, r25
    2386:	b5 e0       	ldi	r27, 0x05	; 5
    2388:	eb 0e       	add	r14, r27
    238a:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 5;
    238c:	25 e0       	ldi	r18, 0x05	; 5
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	08 c0       	rjmp	.+16     	; 0x23a2 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x70>
		period2 = duration2;
	}
	else
	{
		period3 = period - (settings->Duration - 10);
    2392:	7b 01       	movw	r14, r22
    2394:	e8 1a       	sub	r14, r24
    2396:	f9 0a       	sbc	r15, r25
    2398:	ea e0       	ldi	r30, 0x0A	; 10
    239a:	ee 0e       	add	r14, r30
    239c:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 10;
    239e:	2a e0       	ldi	r18, 0x0A	; 10
    23a0:	30 e0       	ldi	r19, 0x00	; 0
		period2 = duration2;
	}
	
	// calculate multi pulse
	laserMultiPulsePeriod[0] = uint32_t(625ul * (uint32_t)period1) / 10ul;
    23a2:	58 01       	movw	r10, r16
    23a4:	f4 ee       	ldi	r31, 0xE4	; 228
    23a6:	af 0e       	add	r10, r31
    23a8:	b1 1c       	adc	r11, r1
    23aa:	a1 e7       	ldi	r26, 0x71	; 113
    23ac:	b2 e0       	ldi	r27, 0x02	; 2
    23ae:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    23b2:	0f 2e       	mov	r0, r31
    23b4:	fa e0       	ldi	r31, 0x0A	; 10
    23b6:	4f 2e       	mov	r4, r31
    23b8:	51 2c       	mov	r5, r1
    23ba:	61 2c       	mov	r6, r1
    23bc:	71 2c       	mov	r7, r1
    23be:	f0 2d       	mov	r31, r0
    23c0:	a3 01       	movw	r20, r6
    23c2:	92 01       	movw	r18, r4
    23c4:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    23c8:	d5 01       	movw	r26, r10
    23ca:	2d 93       	st	X+, r18
    23cc:	3c 93       	st	X, r19
	laserMultiPulsePeriod[1] = uint32_t(625ul * (uint32_t)period2) / 10ul;
    23ce:	96 01       	movw	r18, r12
    23d0:	a1 e7       	ldi	r26, 0x71	; 113
    23d2:	b2 e0       	ldi	r27, 0x02	; 2
    23d4:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    23d8:	a3 01       	movw	r20, r6
    23da:	92 01       	movw	r18, r4
    23dc:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    23e0:	49 01       	movw	r8, r18
    23e2:	5a 01       	movw	r10, r20
    23e4:	f8 01       	movw	r30, r16
    23e6:	ea 51       	subi	r30, 0x1A	; 26
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	20 83       	st	Z, r18
    23ec:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[2] = uint32_t(625ul * (uint32_t)period3) / 10ul;
    23ee:	68 01       	movw	r12, r16
    23f0:	b8 ee       	ldi	r27, 0xE8	; 232
    23f2:	cb 0e       	add	r12, r27
    23f4:	d1 1c       	adc	r13, r1
    23f6:	97 01       	movw	r18, r14
    23f8:	a1 e7       	ldi	r26, 0x71	; 113
    23fa:	b2 e0       	ldi	r27, 0x02	; 2
    23fc:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    2400:	a3 01       	movw	r20, r6
    2402:	92 01       	movw	r18, r4
    2404:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    2408:	f6 01       	movw	r30, r12
    240a:	20 83       	st	Z, r18
    240c:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[3] = uint32_t(625ul * (uint32_t)period4) / 10ul;
    240e:	32 96       	adiw	r30, 0x02	; 2
    2410:	80 82       	st	Z, r8
    2412:	91 82       	std	Z+1, r9	; 0x01
	
	laserTimer.DisableChannel(TIMER_CHANNEL_A);
    2414:	60 e1       	ldi	r22, 0x10	; 16
    2416:	8c e1       	ldi	r24, 0x1C	; 28
    2418:	96 e2       	ldi	r25, 0x26	; 38
    241a:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.DisableChannel(TIMER_CHANNEL_B);
    241e:	60 e2       	ldi	r22, 0x20	; 32
    2420:	8c e1       	ldi	r24, 0x1C	; 28
    2422:	96 e2       	ldi	r25, 0x26	; 38
    2424:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	
	return result;
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	fe 01       	movw	r30, r28
    242c:	37 96       	adiw	r30, 0x07	; 7
    242e:	de 01       	movw	r26, r28
    2430:	11 96       	adiw	r26, 0x01	; 1
    2432:	01 90       	ld	r0, Z+
    2434:	0d 92       	st	X+, r0
    2436:	8a 95       	dec	r24
    2438:	e1 f7       	brne	.-8      	; 0x2432 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x100>
    243a:	29 81       	ldd	r18, Y+1	; 0x01
    243c:	3a 81       	ldd	r19, Y+2	; 0x02
    243e:	4b 81       	ldd	r20, Y+3	; 0x03
    2440:	5c 81       	ldd	r21, Y+4	; 0x04
    2442:	6d 81       	ldd	r22, Y+5	; 0x05
    2444:	7e 81       	ldd	r23, Y+6	; 0x06
}
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	2c 96       	adiw	r28, 0x0c	; 12
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	ef 90       	pop	r14
    245c:	df 90       	pop	r13
    245e:	cf 90       	pop	r12
    2460:	bf 90       	pop	r11
    2462:	af 90       	pop	r10
    2464:	9f 90       	pop	r9
    2466:	8f 90       	pop	r8
    2468:	7f 90       	pop	r7
    246a:	6f 90       	pop	r6
    246c:	5f 90       	pop	r5
    246e:	4f 90       	pop	r4
    2470:	08 95       	ret

00002472 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    2478:	fc 01       	movw	r30, r24
    247a:	ea 5d       	subi	r30, 0xDA	; 218
    247c:	fe 4f       	sbci	r31, 0xFE	; 254
    247e:	80 81       	ld	r24, Z
    2480:	91 81       	ldd	r25, Z+1	; 0x01
    2482:	89 2b       	or	r24, r25
    2484:	29 f0       	breq	.+10     	; 0x2490 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    2486:	80 81       	ld	r24, Z
    2488:	91 81       	ldd	r25, Z+1	; 0x01
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	80 83       	st	Z, r24
    248e:	91 83       	std	Z+1, r25	; 0x01
		
	if (m_wMillSec > 100) m_wMillSec = 0;
    2490:	fe 01       	movw	r30, r28
    2492:	e2 5e       	subi	r30, 0xE2	; 226
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	85 36       	cpi	r24, 0x65	; 101
    249c:	91 05       	cpc	r25, r1
    249e:	10 f0       	brcs	.+4      	; 0x24a4 <_ZN16CLaserControlApp7OnTimerEv+0x32>
    24a0:	10 82       	st	Z, r1
    24a2:	11 82       	std	Z+1, r1	; 0x01
		
	if (prepare)
    24a4:	8a 89       	ldd	r24, Y+18	; 0x12
    24a6:	88 23       	and	r24, r24
    24a8:	09 f4       	brne	.+2      	; 0x24ac <_ZN16CLaserControlApp7OnTimerEv+0x3a>
    24aa:	89 c0       	rjmp	.+274    	; 0x25be <_ZN16CLaserControlApp7OnTimerEv+0x14c>
	{
		if (m_wMillSec == 0)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e2 5e       	subi	r30, 0xE2	; 226
    24b0:	fe 4f       	sbci	r31, 0xFE	; 254
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	89 2b       	or	r24, r25
    24b8:	09 f0       	breq	.+2      	; 0x24bc <_ZN16CLaserControlApp7OnTimerEv+0x4a>
    24ba:	79 c0       	rjmp	.+242    	; 0x25ae <_ZN16CLaserControlApp7OnTimerEv+0x13c>
		{			
			if (m_wSeconds == 0)
    24bc:	32 97       	sbiw	r30, 0x02	; 2
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	89 2b       	or	r24, r25
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <_ZN16CLaserControlApp7OnTimerEv+0x56>
    24c6:	4c c0       	rjmp	.+152    	; 0x2560 <_ZN16CLaserControlApp7OnTimerEv+0xee>
			{
				if (m_wMinutes == 0)
    24c8:	32 97       	sbiw	r30, 0x02	; 2
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	89 2b       	or	r24, r25
    24d0:	d1 f5       	brne	.+116    	; 0x2546 <_ZN16CLaserControlApp7OnTimerEv+0xd4>
				{
					if (state == APP_WORKPREPARE)
    24d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    24d6:	02 97       	sbiw	r24, 0x02	; 2
    24d8:	a1 f5       	brne	.+104    	; 0x2542 <_ZN16CLaserControlApp7OnTimerEv+0xd0>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    24da:	22 e0       	ldi	r18, 0x02	; 2
    24dc:	44 e6       	ldi	r20, 0x64	; 100
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	65 e0       	ldi	r22, 0x05	; 5
    24e2:	71 e0       	ldi	r23, 0x01	; 1
    24e4:	84 ee       	ldi	r24, 0xE4	; 228
    24e6:	95 e2       	ldi	r25, 0x25	; 37
    24e8:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    24ec:	84 ee       	ldi	r24, 0xE4	; 228
    24ee:	95 e2       	ldi	r25, 0x25	; 37
    24f0:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    24f4:	22 e0       	ldi	r18, 0x02	; 2
    24f6:	44 e6       	ldi	r20, 0x64	; 100
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	66 e2       	ldi	r22, 0x26	; 38
    24fc:	71 e0       	ldi	r23, 0x01	; 1
    24fe:	84 ee       	ldi	r24, 0xE4	; 228
    2500:	95 e2       	ldi	r25, 0x25	; 37
    2502:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2506:	84 ee       	ldi	r24, 0xE4	; 228
    2508:	95 e2       	ldi	r25, 0x25	; 37
    250a:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    250e:	22 e0       	ldi	r18, 0x02	; 2
    2510:	44 e6       	ldi	r20, 0x64	; 100
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	69 e4       	ldi	r22, 0x49	; 73
    2516:	71 e0       	ldi	r23, 0x01	; 1
    2518:	84 ee       	ldi	r24, 0xE4	; 228
    251a:	95 e2       	ldi	r25, 0x25	; 37
    251c:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2520:	84 ee       	ldi	r24, 0xE4	; 228
    2522:	95 e2       	ldi	r25, 0x25	; 37
    2524:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    2528:	22 e0       	ldi	r18, 0x02	; 2
    252a:	44 e6       	ldi	r20, 0x64	; 100
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	6d e5       	ldi	r22, 0x5D	; 93
    2530:	71 e0       	ldi	r23, 0x01	; 1
    2532:	84 ee       	ldi	r24, 0xE4	; 228
    2534:	95 e2       	ldi	r25, 0x25	; 37
    2536:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    253a:	84 ee       	ldi	r24, 0xE4	; 228
    253c:	95 e2       	ldi	r25, 0x25	; 37
    253e:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    2542:	1a 8a       	std	Y+18, r1	; 0x12
    2544:	05 c1       	rjmp	.+522    	; 0x2750 <_ZN16CLaserControlApp7OnTimerEv+0x2de>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    2546:	8c e3       	ldi	r24, 0x3C	; 60
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	fe 01       	movw	r30, r28
    254c:	e4 5e       	subi	r30, 0xE4	; 228
    254e:	fe 4f       	sbci	r31, 0xFE	; 254
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    2554:	32 97       	sbiw	r30, 0x02	; 2
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	80 83       	st	Z, r24
    255e:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    2560:	84 e6       	ldi	r24, 0x64	; 100
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	fe 01       	movw	r30, r28
    2566:	e2 5e       	subi	r30, 0xE2	; 226
    2568:	fe 4f       	sbci	r31, 0xFE	; 254
    256a:	80 83       	st	Z, r24
    256c:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    256e:	32 97       	sbiw	r30, 0x02	; 2
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	80 83       	st	Z, r24
    2578:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
    257a:	8c 85       	ldd	r24, Y+12	; 0x0c
    257c:	9d 85       	ldd	r25, Y+13	; 0x0d
    257e:	02 97       	sbiw	r24, 0x02	; 2
    2580:	b1 f4       	brne	.+44     	; 0x25ae <_ZN16CLaserControlApp7OnTimerEv+0x13c>
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    2582:	32 97       	sbiw	r30, 0x02	; 2
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	89 2b       	or	r24, r25
    258a:	09 f0       	breq	.+2      	; 0x258e <_ZN16CLaserControlApp7OnTimerEv+0x11c>
    258c:	9c c0       	rjmp	.+312    	; 0x26c6 <_ZN16CLaserControlApp7OnTimerEv+0x254>
    258e:	32 96       	adiw	r30, 0x02	; 2
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	0a 97       	sbiw	r24, 0x0a	; 10
    2596:	08 f4       	brcc	.+2      	; 0x259a <_ZN16CLaserControlApp7OnTimerEv+0x128>
    2598:	a4 c0       	rjmp	.+328    	; 0x26e2 <_ZN16CLaserControlApp7OnTimerEv+0x270>
    259a:	95 c0       	rjmp	.+298    	; 0x26c6 <_ZN16CLaserControlApp7OnTimerEv+0x254>
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    259c:	fe 01       	movw	r30, r28
    259e:	e4 5e       	subi	r30, 0xE4	; 228
    25a0:	fe 4f       	sbci	r31, 0xFE	; 254
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	05 97       	sbiw	r24, 0x05	; 5
    25a8:	08 f4       	brcc	.+2      	; 0x25ac <_ZN16CLaserControlApp7OnTimerEv+0x13a>
    25aa:	a4 c0       	rjmp	.+328    	; 0x26f4 <_ZN16CLaserControlApp7OnTimerEv+0x282>
    25ac:	b1 c0       	rjmp	.+354    	; 0x2710 <_ZN16CLaserControlApp7OnTimerEv+0x29e>
					//player.beep(1000, 25);
					}
			}
			// ************************************
		}
		m_wMillSec-=10;
    25ae:	fe 01       	movw	r30, r28
    25b0:	e2 5e       	subi	r30, 0xE2	; 226
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	0a 97       	sbiw	r24, 0x0a	; 10
    25ba:	80 83       	st	Z, r24
    25bc:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (!peltier_en)
    25be:	8b 89       	ldd	r24, Y+19	; 0x13
    25c0:	81 11       	cpse	r24, r1
    25c2:	4d c0       	rjmp	.+154    	; 0x265e <_ZN16CLaserControlApp7OnTimerEv+0x1ec>
	{
		if (m_wMillSec >= 70)
    25c4:	fe 01       	movw	r30, r28
    25c6:	e2 5e       	subi	r30, 0xE2	; 226
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	86 34       	cpi	r24, 0x46	; 70
    25d0:	91 05       	cpc	r25, r1
    25d2:	e8 f1       	brcs	.+122    	; 0x264e <_ZN16CLaserControlApp7OnTimerEv+0x1dc>
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
    25d4:	32 97       	sbiw	r30, 0x02	; 2
    25d6:	20 81       	ld	r18, Z
    25d8:	31 81       	ldd	r19, Z+1	; 0x01
    25da:	36 96       	adiw	r30, 0x06	; 6
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	28 17       	cp	r18, r24
    25e2:	39 07       	cpc	r19, r25
    25e4:	08 f4       	brcc	.+2      	; 0x25e8 <_ZN16CLaserControlApp7OnTimerEv+0x176>
    25e6:	a2 c0       	rjmp	.+324    	; 0x272c <_ZN16CLaserControlApp7OnTimerEv+0x2ba>
    25e8:	38 97       	sbiw	r30, 0x08	; 8
    25ea:	20 81       	ld	r18, Z
    25ec:	31 81       	ldd	r19, Z+1	; 0x01
    25ee:	36 96       	adiw	r30, 0x06	; 6
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	28 17       	cp	r18, r24
    25f6:	39 07       	cpc	r19, r25
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <_ZN16CLaserControlApp7OnTimerEv+0x18a>
    25fa:	a1 c0       	rjmp	.+322    	; 0x273e <_ZN16CLaserControlApp7OnTimerEv+0x2cc>
    25fc:	97 c0       	rjmp	.+302    	; 0x272c <_ZN16CLaserControlApp7OnTimerEv+0x2ba>
				m_wSeconds = m_wSetSec;
			else
			{
				if (m_wSeconds == 60)
				{
					if (m_wMinutes >= m_wSetMin)
    25fe:	fe 01       	movw	r30, r28
    2600:	e6 5e       	subi	r30, 0xE6	; 230
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	20 81       	ld	r18, Z
    2606:	31 81       	ldd	r19, Z+1	; 0x01
    2608:	36 96       	adiw	r30, 0x06	; 6
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	28 17       	cp	r18, r24
    2610:	39 07       	cpc	r19, r25
    2612:	28 f0       	brcs	.+10     	; 0x261e <_ZN16CLaserControlApp7OnTimerEv+0x1ac>
						m_wMinutes = m_wSetMin;
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	36 97       	sbiw	r30, 0x06	; 6
    261a:	80 83       	st	Z, r24
    261c:	91 83       	std	Z+1, r25	; 0x01
					m_wSeconds = 0;
    261e:	fe 01       	movw	r30, r28
    2620:	e4 5e       	subi	r30, 0xE4	; 228
    2622:	fe 4f       	sbci	r31, 0xFE	; 254
    2624:	10 82       	st	Z, r1
    2626:	11 82       	std	Z+1, r1	; 0x01
					m_wMinutes++;
    2628:	32 97       	sbiw	r30, 0x02	; 2
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
				}
				m_wSeconds++;
    2634:	fe 01       	movw	r30, r28
    2636:	e4 5e       	subi	r30, 0xE4	; 228
    2638:	fe 4f       	sbci	r31, 0xFE	; 254
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	80 83       	st	Z, r24
    2642:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 0; // Every 10 ms
    2644:	fe 01       	movw	r30, r28
    2646:	e2 5e       	subi	r30, 0xE2	; 226
    2648:	fe 4f       	sbci	r31, 0xFE	; 254
    264a:	10 82       	st	Z, r1
    264c:	11 82       	std	Z+1, r1	; 0x01
		}
		m_wMillSec += 10;
    264e:	fe 01       	movw	r30, r28
    2650:	e2 5e       	subi	r30, 0xE2	; 226
    2652:	fe 4f       	sbci	r31, 0xFE	; 254
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	0a 96       	adiw	r24, 0x0a	; 10
    265a:	80 83       	st	Z, r24
    265c:	91 83       	std	Z+1, r25	; 0x01
	}
	
	// Flow sensor
	{
		static uint16_t millsec = 100;
		if (millsec == 0)
    265e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    2662:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    2666:	89 2b       	or	r24, r25
    2668:	21 f5       	brne	.+72     	; 0x26b2 <_ZN16CLaserControlApp7OnTimerEv+0x240>
		{
			millsec = 100;
    266a:	84 e6       	ldi	r24, 0x64	; 100
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    2672:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
			
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    2676:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    267a:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    267e:	49 e4       	ldi	r20, 0x49	; 73
    2680:	48 9f       	mul	r20, r24
    2682:	90 01       	movw	r18, r0
    2684:	49 9f       	mul	r20, r25
    2686:	30 0d       	add	r19, r0
    2688:	11 24       	eor	r1, r1
    268a:	a5 ec       	ldi	r26, 0xC5	; 197
    268c:	be e4       	ldi	r27, 0x4E	; 78
    268e:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    2692:	96 95       	lsr	r25
    2694:	87 95       	ror	r24
    2696:	92 95       	swap	r25
    2698:	82 95       	swap	r24
    269a:	8f 70       	andi	r24, 0x0F	; 15
    269c:	89 27       	eor	r24, r25
    269e:	9f 70       	andi	r25, 0x0F	; 15
    26a0:	89 27       	eor	r24, r25
    26a2:	cc 5d       	subi	r28, 0xDC	; 220
    26a4:	de 4f       	sbci	r29, 0xFE	; 254
    26a6:	88 83       	st	Y, r24
    26a8:	99 83       	std	Y+1, r25	; 0x01
			flowtimer.Reset();
    26aa:	89 e1       	ldi	r24, 0x19	; 25
    26ac:	96 e2       	ldi	r25, 0x26	; 38
    26ae:	0e 94 96 3b 	call	0x772c	; 0x772c <_ZN8CTimerC15ResetEv>
		}
		millsec-=10;
    26b2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    26b6:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    26ba:	0a 97       	sbiw	r24, 0x0a	; 10
    26bc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    26c0:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    26c4:	45 c0       	rjmp	.+138    	; 0x2750 <_ZN16CLaserControlApp7OnTimerEv+0x2de>
						//player.beep(1000, 50);
					}
				}
				else
				{
					player.SoundStart(1000, 25, 2);
    26c6:	22 e0       	ldi	r18, 0x02	; 2
    26c8:	49 e1       	ldi	r20, 0x19	; 25
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	68 ee       	ldi	r22, 0xE8	; 232
    26ce:	73 e0       	ldi	r23, 0x03	; 3
    26d0:	84 ee       	ldi	r24, 0xE4	; 228
    26d2:	95 e2       	ldi	r25, 0x25	; 37
    26d4:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    26d8:	84 ee       	ldi	r24, 0xE4	; 228
    26da:	95 e2       	ldi	r25, 0x25	; 37
    26dc:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
    26e0:	66 cf       	rjmp	.-308    	; 0x25ae <_ZN16CLaserControlApp7OnTimerEv+0x13c>
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    26e2:	fe 01       	movw	r30, r28
    26e4:	e6 5e       	subi	r30, 0xE6	; 230
    26e6:	fe 4f       	sbci	r31, 0xFE	; 254
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	89 2b       	or	r24, r25
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <_ZN16CLaserControlApp7OnTimerEv+0x280>
    26f0:	55 cf       	rjmp	.-342    	; 0x259c <_ZN16CLaserControlApp7OnTimerEv+0x12a>
    26f2:	0e c0       	rjmp	.+28     	; 0x2710 <_ZN16CLaserControlApp7OnTimerEv+0x29e>
					{
						player.SoundStart(1000, 100, 2);
    26f4:	22 e0       	ldi	r18, 0x02	; 2
    26f6:	44 e6       	ldi	r20, 0x64	; 100
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	68 ee       	ldi	r22, 0xE8	; 232
    26fc:	73 e0       	ldi	r23, 0x03	; 3
    26fe:	84 ee       	ldi	r24, 0xE4	; 228
    2700:	95 e2       	ldi	r25, 0x25	; 37
    2702:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2706:	84 ee       	ldi	r24, 0xE4	; 228
    2708:	95 e2       	ldi	r25, 0x25	; 37
    270a:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
    270e:	4f cf       	rjmp	.-354    	; 0x25ae <_ZN16CLaserControlApp7OnTimerEv+0x13c>
						//player.beep(1000, 100);
					}
					else
					{
						player.SoundStart(1000, 50, 2);
    2710:	22 e0       	ldi	r18, 0x02	; 2
    2712:	42 e3       	ldi	r20, 0x32	; 50
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	68 ee       	ldi	r22, 0xE8	; 232
    2718:	73 e0       	ldi	r23, 0x03	; 3
    271a:	84 ee       	ldi	r24, 0xE4	; 228
    271c:	95 e2       	ldi	r25, 0x25	; 37
    271e:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2722:	84 ee       	ldi	r24, 0xE4	; 228
    2724:	95 e2       	ldi	r25, 0x25	; 37
    2726:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
    272a:	41 cf       	rjmp	.-382    	; 0x25ae <_ZN16CLaserControlApp7OnTimerEv+0x13c>
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
				m_wSeconds = m_wSetSec;
			else
			{
				if (m_wSeconds == 60)
    272c:	fe 01       	movw	r30, r28
    272e:	e4 5e       	subi	r30, 0xE4	; 228
    2730:	fe 4f       	sbci	r31, 0xFE	; 254
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	cc 97       	sbiw	r24, 0x3c	; 60
    2738:	09 f0       	breq	.+2      	; 0x273c <_ZN16CLaserControlApp7OnTimerEv+0x2ca>
    273a:	7c cf       	rjmp	.-264    	; 0x2634 <_ZN16CLaserControlApp7OnTimerEv+0x1c2>
    273c:	60 cf       	rjmp	.-320    	; 0x25fe <_ZN16CLaserControlApp7OnTimerEv+0x18c>
	if (!peltier_en)
	{
		if (m_wMillSec >= 70)
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
				m_wSeconds = m_wSetSec;
    273e:	fe 01       	movw	r30, r28
    2740:	ee 5d       	subi	r30, 0xDE	; 222
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	36 97       	sbiw	r30, 0x06	; 6
    274a:	80 83       	st	Z, r24
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	7a cf       	rjmp	.-268    	; 0x2644 <_ZN16CLaserControlApp7OnTimerEv+0x1d2>
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
			flowtimer.Reset();
		}
		millsec-=10;
	}
}
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    2756:	0e 94 39 12 	call	0x2472	; 0x2472 <_ZN16CLaserControlApp7OnTimerEv>
    275a:	08 95       	ret

0000275c <_ZN16CLaserControlApp9StopLaserEv>:
	}
}

void CLaserControlApp::StopLaser()
{
	laserTimer.Stop();
    275c:	8c e1       	ldi	r24, 0x1C	; 28
    275e:	96 e2       	ldi	r25, 0x26	; 38
    2760:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <_ZN7CTimerF4StopEv>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    2764:	60 e1       	ldi	r22, 0x10	; 16
    2766:	8c e1       	ldi	r24, 0x1C	; 28
    2768:	96 e2       	ldi	r25, 0x26	; 38
    276a:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    276e:	60 e2       	ldi	r22, 0x20	; 32
    2770:	8c e1       	ldi	r24, 0x1C	; 28
    2772:	96 e2       	ldi	r25, 0x26	; 38
    2774:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	PORTF.OUTSET = PIN0_bm;
    2778:	e0 ea       	ldi	r30, 0xA0	; 160
    277a:	f6 e0       	ldi	r31, 0x06	; 6
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	85 83       	std	Z+5, r24	; 0x05
	PORTF.OUTSET = PIN1_bm;
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	85 83       	std	Z+5, r24	; 0x05
    2784:	08 95       	ret

00002786 <_ZN16CLaserControlApp3RunEv>:
	uint16_t data = min(uint16_t((uint32_t(laserPower) * 1024ul) / MAX_LASER_POWER) << 2, 4095);  // (laserPower * 640) / 63)
	dacSPI.Send((uint8_t*)&data, sizeof(data));
}

void CLaserControlApp::Run()
{	
    2786:	4f 92       	push	r4
    2788:	5f 92       	push	r5
    278a:	6f 92       	push	r6
    278c:	7f 92       	push	r7
    278e:	8f 92       	push	r8
    2790:	9f 92       	push	r9
    2792:	af 92       	push	r10
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	ea 97       	sbiw	r28, 0x3a	; 58
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    27b2:	8c 01       	movw	r16, r24
    27b4:	08 5d       	subi	r16, 0xD8	; 216
    27b6:	1e 4f       	sbci	r17, 0xFE	; 254
    27b8:	42 e0       	ldi	r20, 0x02	; 2
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	d8 01       	movw	r26, r16
    27be:	8d 91       	ld	r24, X+
    27c0:	9c 91       	ld	r25, X
    27c2:	0e 94 21 37 	call	0x6e42	; 0x6e42 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    27c6:	f8 01       	movw	r30, r16
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    27d0:	d8 01       	movw	r26, r16
    27d2:	8d 91       	ld	r24, X+
    27d4:	9c 91       	ld	r25, X
    27d6:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27da:	bf ef       	ldi	r27, 0xFF	; 255
    27dc:	e9 ef       	ldi	r30, 0xF9	; 249
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	b1 50       	subi	r27, 0x01	; 1
    27e2:	e0 40       	sbci	r30, 0x00	; 0
    27e4:	f0 40       	sbci	r31, 0x00	; 0
    27e6:	e1 f7       	brne	.-8      	; 0x27e0 <_ZN16CLaserControlApp3RunEv+0x5a>
    27e8:	00 c0       	rjmp	.+0      	; 0x27ea <_ZN16CLaserControlApp3RunEv+0x64>
    27ea:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    27ec:	d7 01       	movw	r26, r14
    27ee:	1c 96       	adiw	r26, 0x0c	; 12
    27f0:	8d 91       	ld	r24, X+
    27f2:	9c 91       	ld	r25, X
    27f4:	1d 97       	sbiw	r26, 0x0d	; 13
    27f6:	9f 70       	andi	r25, 0x0F	; 15
    27f8:	89 2b       	or	r24, r25
    27fa:	09 f4       	brne	.+2      	; 0x27fe <_ZN16CLaserControlApp3RunEv+0x78>
    27fc:	41 c0       	rjmp	.+130    	; 0x2880 <_ZN16CLaserControlApp3RunEv+0xfa>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    27fe:	22 e0       	ldi	r18, 0x02	; 2
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	44 eb       	ldi	r20, 0xB4	; 180
    2804:	54 e2       	ldi	r21, 0x24	; 36
    2806:	6c e0       	ldi	r22, 0x0C	; 12
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	c7 01       	movw	r24, r14
    280c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    2810:	f7 01       	movw	r30, r14
    2812:	ec 5d       	subi	r30, 0xDC	; 220
    2814:	fe 4f       	sbci	r31, 0xFE	; 254
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	44 97       	sbiw	r24, 0x14	; 20
    281c:	28 f4       	brcc	.+10     	; 0x2828 <_ZN16CLaserControlApp3RunEv+0xa2>
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	70 97       	sbiw	r30, 0x10	; 16
    2824:	80 83       	st	Z, r24
    2826:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    2828:	f7 01       	movw	r30, r14
    282a:	ec 5d       	subi	r30, 0xDC	; 220
    282c:	fe 4f       	sbci	r31, 0xFE	; 254
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	44 97       	sbiw	r24, 0x14	; 20
    2834:	28 f0       	brcs	.+10     	; 0x2840 <_ZN16CLaserControlApp3RunEv+0xba>
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	89 97       	sbiw	r24, 0x29	; 41
    283c:	08 f4       	brcc	.+2      	; 0x2840 <_ZN16CLaserControlApp3RunEv+0xba>
    283e:	03 c6       	rjmp	.+3078   	; 0x3446 <_ZN16CLaserControlApp3RunEv+0xcc0>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    2840:	f7 01       	movw	r30, r14
    2842:	ec 5d       	subi	r30, 0xDC	; 220
    2844:	fe 4f       	sbci	r31, 0xFE	; 254
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	89 97       	sbiw	r24, 0x29	; 41
    284c:	28 f0       	brcs	.+10     	; 0x2858 <_ZN16CLaserControlApp3RunEv+0xd2>
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	70 97       	sbiw	r30, 0x10	; 16
    2854:	80 83       	st	Z, r24
    2856:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    2858:	22 e0       	ldi	r18, 0x02	; 2
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	a7 01       	movw	r20, r14
    285e:	4c 5e       	subi	r20, 0xEC	; 236
    2860:	5e 4f       	sbci	r21, 0xFE	; 254
    2862:	63 e1       	ldi	r22, 0x13	; 19
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	c7 01       	movw	r24, r14
    2868:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    286c:	22 e0       	ldi	r18, 0x02	; 2
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	a7 01       	movw	r20, r14
    2872:	4c 5d       	subi	r20, 0xDC	; 220
    2874:	5e 4f       	sbci	r21, 0xFE	; 254
    2876:	6e e0       	ldi	r22, 0x0E	; 14
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	c7 01       	movw	r24, r14
    287c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    2880:	f7 01       	movw	r30, r14
    2882:	84 85       	ldd	r24, Z+12	; 0x0c
    2884:	95 85       	ldd	r25, Z+13	; 0x0d
    2886:	88 73       	andi	r24, 0x38	; 56
    2888:	99 27       	eor	r25, r25
    288a:	89 2b       	or	r24, r25
    288c:	e1 f0       	breq	.+56     	; 0x28c6 <_ZN16CLaserControlApp3RunEv+0x140>
	{
		if (temperature > 300)
    288e:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2892:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2896:	8d 32       	cpi	r24, 0x2D	; 45
    2898:	91 40       	sbci	r25, 0x01	; 1
    289a:	ac f0       	brlt	.+42     	; 0x28c6 <_ZN16CLaserControlApp3RunEv+0x140>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    289c:	69 e2       	ldi	r22, 0x29	; 41
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	c7 01       	movw	r24, r14
    28a2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    28a6:	d7 01       	movw	r26, r14
    28a8:	1f 96       	adiw	r26, 0x0f	; 15
    28aa:	8c 91       	ld	r24, X
    28ac:	1f 97       	sbiw	r26, 0x0f	; 15
    28ae:	50 96       	adiw	r26, 0x10	; 16
    28b0:	8c 93       	st	X, r24
			
			//if (isstarted)
			{
				StopLaser();
    28b2:	c7 01       	movw	r24, r14
    28b4:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    28b8:	85 ee       	ldi	r24, 0xE5	; 229
    28ba:	95 e2       	ldi	r25, 0x25	; 37
    28bc:	0e 94 ce 39 	call	0x739c	; 0x739c <_ZN11CLaserBoard13LaserPowerOffEv>
				PIC_ID_last = PICID_WORK_PREPARE;
    28c0:	87 e0       	ldi	r24, 0x07	; 7
    28c2:	f7 01       	movw	r30, r14
    28c4:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	/*if ((state & (APP_WORKPOWERON | APP_WORKLIGHT)) == 0)
		isstarted = false;*/
	
	switch (state)
    28c6:	d7 01       	movw	r26, r14
    28c8:	1c 96       	adiw	r26, 0x0c	; 12
    28ca:	8d 91       	ld	r24, X+
    28cc:	9c 91       	ld	r25, X
    28ce:	1d 97       	sbiw	r26, 0x0d	; 13
    28d0:	81 15       	cp	r24, r1
    28d2:	b2 e0       	ldi	r27, 0x02	; 2
    28d4:	9b 07       	cpc	r25, r27
    28d6:	09 f4       	brne	.+2      	; 0x28da <_ZN16CLaserControlApp3RunEv+0x154>
    28d8:	c5 c4       	rjmp	.+2442   	; 0x3264 <_ZN16CLaserControlApp3RunEv+0xade>
    28da:	44 f5       	brge	.+80     	; 0x292c <_ZN16CLaserControlApp3RunEv+0x1a6>
    28dc:	80 31       	cpi	r24, 0x10	; 16
    28de:	91 05       	cpc	r25, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <_ZN16CLaserControlApp3RunEv+0x15e>
    28e2:	f6 c3       	rjmp	.+2028   	; 0x30d0 <_ZN16CLaserControlApp3RunEv+0x94a>
    28e4:	8c f4       	brge	.+34     	; 0x2908 <_ZN16CLaserControlApp3RunEv+0x182>
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	91 05       	cpc	r25, r1
    28ea:	09 f4       	brne	.+2      	; 0x28ee <_ZN16CLaserControlApp3RunEv+0x168>
    28ec:	7d c3       	rjmp	.+1786   	; 0x2fe8 <_ZN16CLaserControlApp3RunEv+0x862>
    28ee:	24 f4       	brge	.+8      	; 0x28f8 <_ZN16CLaserControlApp3RunEv+0x172>
    28f0:	89 2b       	or	r24, r25
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <_ZN16CLaserControlApp3RunEv+0x170>
    28f4:	4b c0       	rjmp	.+150    	; 0x298c <_ZN16CLaserControlApp3RunEv+0x206>
    28f6:	75 c5       	rjmp	.+2794   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    28f8:	84 30       	cpi	r24, 0x04	; 4
    28fa:	91 05       	cpc	r25, r1
    28fc:	09 f4       	brne	.+2      	; 0x2900 <_ZN16CLaserControlApp3RunEv+0x17a>
    28fe:	64 c0       	rjmp	.+200    	; 0x29c8 <_ZN16CLaserControlApp3RunEv+0x242>
    2900:	08 97       	sbiw	r24, 0x08	; 8
    2902:	09 f4       	brne	.+2      	; 0x2906 <_ZN16CLaserControlApp3RunEv+0x180>
    2904:	d1 c3       	rjmp	.+1954   	; 0x30a8 <_ZN16CLaserControlApp3RunEv+0x922>
    2906:	6d c5       	rjmp	.+2778   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    2908:	80 34       	cpi	r24, 0x40	; 64
    290a:	91 05       	cpc	r25, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <_ZN16CLaserControlApp3RunEv+0x18a>
    290e:	a4 c3       	rjmp	.+1864   	; 0x3058 <_ZN16CLaserControlApp3RunEv+0x8d2>
    2910:	24 f4       	brge	.+8      	; 0x291a <_ZN16CLaserControlApp3RunEv+0x194>
    2912:	80 97       	sbiw	r24, 0x20	; 32
    2914:	09 f4       	brne	.+2      	; 0x2918 <_ZN16CLaserControlApp3RunEv+0x192>
    2916:	dc c3       	rjmp	.+1976   	; 0x30d0 <_ZN16CLaserControlApp3RunEv+0x94a>
    2918:	64 c5       	rjmp	.+2760   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    291a:	80 38       	cpi	r24, 0x80	; 128
    291c:	91 05       	cpc	r25, r1
    291e:	09 f4       	brne	.+2      	; 0x2922 <_ZN16CLaserControlApp3RunEv+0x19c>
    2920:	42 c0       	rjmp	.+132    	; 0x29a6 <_ZN16CLaserControlApp3RunEv+0x220>
    2922:	81 15       	cp	r24, r1
    2924:	91 40       	sbci	r25, 0x01	; 1
    2926:	09 f4       	brne	.+2      	; 0x292a <_ZN16CLaserControlApp3RunEv+0x1a4>
    2928:	69 c4       	rjmp	.+2258   	; 0x31fc <_ZN16CLaserControlApp3RunEv+0xa76>
    292a:	5b c5       	rjmp	.+2742   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    292c:	81 15       	cp	r24, r1
    292e:	27 e0       	ldi	r18, 0x07	; 7
    2930:	92 07       	cpc	r25, r18
    2932:	09 f4       	brne	.+2      	; 0x2936 <_ZN16CLaserControlApp3RunEv+0x1b0>
    2934:	3a c4       	rjmp	.+2164   	; 0x31aa <_ZN16CLaserControlApp3RunEv+0xa24>
    2936:	ac f4       	brge	.+42     	; 0x2962 <_ZN16CLaserControlApp3RunEv+0x1dc>
    2938:	81 15       	cp	r24, r1
    293a:	a4 e0       	ldi	r26, 0x04	; 4
    293c:	9a 07       	cpc	r25, r26
    293e:	09 f4       	brne	.+2      	; 0x2942 <_ZN16CLaserControlApp3RunEv+0x1bc>
    2940:	c3 c4       	rjmp	.+2438   	; 0x32c8 <_ZN16CLaserControlApp3RunEv+0xb42>
    2942:	2c f4       	brge	.+10     	; 0x294e <_ZN16CLaserControlApp3RunEv+0x1c8>
    2944:	81 15       	cp	r24, r1
    2946:	93 40       	sbci	r25, 0x03	; 3
    2948:	09 f4       	brne	.+2      	; 0x294c <_ZN16CLaserControlApp3RunEv+0x1c6>
    294a:	95 c4       	rjmp	.+2346   	; 0x3276 <_ZN16CLaserControlApp3RunEv+0xaf0>
    294c:	4a c5       	rjmp	.+2708   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    294e:	81 15       	cp	r24, r1
    2950:	f5 e0       	ldi	r31, 0x05	; 5
    2952:	9f 07       	cpc	r25, r31
    2954:	09 f4       	brne	.+2      	; 0x2958 <_ZN16CLaserControlApp3RunEv+0x1d2>
    2956:	43 c4       	rjmp	.+2182   	; 0x31de <_ZN16CLaserControlApp3RunEv+0xa58>
    2958:	81 15       	cp	r24, r1
    295a:	96 40       	sbci	r25, 0x06	; 6
    295c:	09 f4       	brne	.+2      	; 0x2960 <_ZN16CLaserControlApp3RunEv+0x1da>
    295e:	13 c4       	rjmp	.+2086   	; 0x3186 <_ZN16CLaserControlApp3RunEv+0xa00>
    2960:	40 c5       	rjmp	.+2688   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    2962:	81 15       	cp	r24, r1
    2964:	30 e2       	ldi	r19, 0x20	; 32
    2966:	93 07       	cpc	r25, r19
    2968:	09 f4       	brne	.+2      	; 0x296c <_ZN16CLaserControlApp3RunEv+0x1e6>
    296a:	ec c4       	rjmp	.+2520   	; 0x3344 <_ZN16CLaserControlApp3RunEv+0xbbe>
    296c:	2c f4       	brge	.+10     	; 0x2978 <_ZN16CLaserControlApp3RunEv+0x1f2>
    296e:	81 15       	cp	r24, r1
    2970:	90 41       	sbci	r25, 0x10	; 16
    2972:	09 f4       	brne	.+2      	; 0x2976 <_ZN16CLaserControlApp3RunEv+0x1f0>
    2974:	af c4       	rjmp	.+2398   	; 0x32d4 <_ZN16CLaserControlApp3RunEv+0xb4e>
    2976:	35 c5       	rjmp	.+2666   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
    2978:	81 15       	cp	r24, r1
    297a:	e0 e3       	ldi	r30, 0x30	; 48
    297c:	9e 07       	cpc	r25, r30
    297e:	09 f4       	brne	.+2      	; 0x2982 <_ZN16CLaserControlApp3RunEv+0x1fc>
    2980:	0e c5       	rjmp	.+2588   	; 0x339e <_ZN16CLaserControlApp3RunEv+0xc18>
    2982:	81 15       	cp	r24, r1
    2984:	90 44       	sbci	r25, 0x40	; 64
    2986:	09 f4       	brne	.+2      	; 0x298a <_ZN16CLaserControlApp3RunEv+0x204>
    2988:	27 c5       	rjmp	.+2638   	; 0x33d8 <_ZN16CLaserControlApp3RunEv+0xc52>
    298a:	2b c5       	rjmp	.+2646   	; 0x33e2 <_ZN16CLaserControlApp3RunEv+0xc5c>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	c7 01       	movw	r24, r14
    2992:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	d7 01       	movw	r26, r14
    299c:	1c 96       	adiw	r26, 0x0c	; 12
    299e:	8d 93       	st	X+, r24
    29a0:	9c 93       	st	X, r25
    29a2:	1d 97       	sbiw	r26, 0x0d	; 13
			}
		break;
    29a4:	22 c5       	rjmp	.+2628   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_MENU:
			{
				prepare = false;
    29a6:	f7 01       	movw	r30, r14
    29a8:	12 8a       	std	Z+18, r1	; 0x12
				StopLaser();
    29aa:	c7 01       	movw	r24, r14
    29ac:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    29b0:	85 ee       	ldi	r24, 0xE5	; 229
    29b2:	95 e2       	ldi	r25, 0x25	; 37
    29b4:	0e 94 ce 39 	call	0x739c	; 0x739c <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    29b8:	d7 01       	movw	r26, r14
    29ba:	53 96       	adiw	r26, 0x13	; 19
    29bc:	1c 92       	st	X, r1
				laserBoard.PWMOn(); // Cooling off
    29be:	85 ee       	ldi	r24, 0xE5	; 229
    29c0:	95 e2       	ldi	r25, 0x25	; 37
    29c2:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN11CLaserBoard5PWMOnEv>
			}
		break;
    29c6:	11 c5       	rjmp	.+2594   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKSETUP:
			{
				prepare = false;
    29c8:	f7 01       	movw	r30, r14
    29ca:	12 8a       	std	Z+18, r1	; 0x12
				StopLaser();
    29cc:	c7 01       	movw	r24, r14
    29ce:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
				//pwmtimer.Stop();
				peltier_en = false;
    29d2:	d7 01       	movw	r26, r14
    29d4:	53 96       	adiw	r26, 0x13	; 19
    29d6:	1c 92       	st	X, r1
				laserBoard.PWMOn(); // Cooling off
    29d8:	85 ee       	ldi	r24, 0xE5	; 229
    29da:	95 e2       	ldi	r25, 0x25	; 37
    29dc:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN11CLaserBoard5PWMOnEv>
				
				uint16_t melanin     = laserDiodeData.melanin;
    29e0:	f7 01       	movw	r30, r14
    29e2:	ee 5f       	subi	r30, 0xFE	; 254
    29e4:	fe 4f       	sbci	r31, 0xFE	; 254
    29e6:	80 80       	ld	r8, Z
    29e8:	91 80       	ldd	r9, Z+1	; 0x01
				uint16_t phototype   = laserDiodeData.phototype;
    29ea:	32 96       	adiw	r30, 0x02	; 2
    29ec:	a0 80       	ld	r10, Z
    29ee:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t freq        = laserDiodeData.laserprofile.Frequency;
    29f0:	72 97       	sbiw	r30, 0x12	; 18
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	89 af       	std	Y+57, r24	; 0x39
    29f8:	9a af       	std	Y+58, r25	; 0x3a
				uint16_t durationCnt = laserDiodeData.laserprofile.DurationCnt;
    29fa:	32 96       	adiw	r30, 0x02	; 2
    29fc:	60 80       	ld	r6, Z
    29fe:	71 80       	ldd	r7, Z+1	; 0x01
				uint16_t energyCnt   = laserDiodeData.laserprofile.EnergyCnt;
    2a00:	32 96       	adiw	r30, 0x02	; 2
    2a02:	40 80       	ld	r4, Z
    2a04:	51 80       	ldd	r5, Z+1	; 0x01
				uint16_t flushesLimit	= laserDiodeData.lasersettings.FlushesLimit;
    2a06:	87 01       	movw	r16, r14
    2a08:	08 50       	subi	r16, 0x08	; 8
    2a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	c0 80       	ld	r12, Z
    2a10:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    2a12:	46 e0       	ldi	r20, 0x06	; 6
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a20:	ff ef       	ldi	r31, 0xFF	; 255
    2a22:	29 ef       	ldi	r18, 0xF9	; 249
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	f1 50       	subi	r31, 0x01	; 1
    2a28:	20 40       	sbci	r18, 0x00	; 0
    2a2a:	30 40       	sbci	r19, 0x00	; 0
    2a2c:	e1 f7       	brne	.-8      	; 0x2a26 <_ZN16CLaserControlApp3RunEv+0x2a0>
    2a2e:	00 c0       	rjmp	.+0      	; 0x2a30 <_ZN16CLaserControlApp3RunEv+0x2aa>
    2a30:	00 00       	nop
				_delay_ms(10);
				GetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, sizeof(DGUS_LASERSETTINGS));
    2a32:	46 e0       	ldi	r20, 0x06	; 6
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	65 e0       	ldi	r22, 0x05	; 5
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	c7 01       	movw	r24, r14
    2a3c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	99 ef       	ldi	r25, 0xF9	; 249
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	90 40       	sbci	r25, 0x00	; 0
    2a4a:	a0 40       	sbci	r26, 0x00	; 0
    2a4c:	e1 f7       	brne	.-8      	; 0x2a46 <_ZN16CLaserControlApp3RunEv+0x2c0>
    2a4e:	00 c0       	rjmp	.+0      	; 0x2a50 <_ZN16CLaserControlApp3RunEv+0x2ca>
    2a50:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    2a52:	42 e0       	ldi	r20, 0x02	; 2
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	6d e0       	ldi	r22, 0x0D	; 13
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	c7 01       	movw	r24, r14
    2a5c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a60:	bf ef       	ldi	r27, 0xFF	; 255
    2a62:	e9 ef       	ldi	r30, 0xF9	; 249
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	b1 50       	subi	r27, 0x01	; 1
    2a68:	e0 40       	sbci	r30, 0x00	; 0
    2a6a:	f0 40       	sbci	r31, 0x00	; 0
    2a6c:	e1 f7       	brne	.-8      	; 0x2a66 <_ZN16CLaserControlApp3RunEv+0x2e0>
    2a6e:	00 c0       	rjmp	.+0      	; 0x2a70 <_ZN16CLaserControlApp3RunEv+0x2ea>
    2a70:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    2a72:	42 e0       	ldi	r20, 0x02	; 2
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	c7 01       	movw	r24, r14
    2a7c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a80:	2f ef       	ldi	r18, 0xFF	; 255
    2a82:	39 ef       	ldi	r19, 0xF9	; 249
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	21 50       	subi	r18, 0x01	; 1
    2a88:	30 40       	sbci	r19, 0x00	; 0
    2a8a:	80 40       	sbci	r24, 0x00	; 0
    2a8c:	e1 f7       	brne	.-8      	; 0x2a86 <_ZN16CLaserControlApp3RunEv+0x300>
    2a8e:	00 c0       	rjmp	.+0      	; 0x2a90 <_ZN16CLaserControlApp3RunEv+0x30a>
    2a90:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    2a92:	42 e0       	ldi	r20, 0x02	; 2
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	6a e0       	ldi	r22, 0x0A	; 10
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	c7 01       	movw	r24, r14
    2a9c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2aa0:	9f ef       	ldi	r25, 0xFF	; 255
    2aa2:	a9 ef       	ldi	r26, 0xF9	; 249
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	91 50       	subi	r25, 0x01	; 1
    2aa8:	a0 40       	sbci	r26, 0x00	; 0
    2aaa:	b0 40       	sbci	r27, 0x00	; 0
    2aac:	e1 f7       	brne	.-8      	; 0x2aa6 <_ZN16CLaserControlApp3RunEv+0x320>
    2aae:	00 c0       	rjmp	.+0      	; 0x2ab0 <_ZN16CLaserControlApp3RunEv+0x32a>
    2ab0:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    2ab2:	42 e0       	ldi	r20, 0x02	; 2
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	6b e0       	ldi	r22, 0x0B	; 11
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	c7 01       	movw	r24, r14
    2abc:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2ac0:	ef ef       	ldi	r30, 0xFF	; 255
    2ac2:	f9 ef       	ldi	r31, 0xF9	; 249
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	e1 50       	subi	r30, 0x01	; 1
    2ac8:	f0 40       	sbci	r31, 0x00	; 0
    2aca:	20 40       	sbci	r18, 0x00	; 0
    2acc:	e1 f7       	brne	.-8      	; 0x2ac6 <_ZN16CLaserControlApp3RunEv+0x340>
    2ace:	00 c0       	rjmp	.+0      	; 0x2ad0 <_ZN16CLaserControlApp3RunEv+0x34a>
    2ad0:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	e6 52       	subi	r30, 0x26	; 38
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z6swap32m>
    2ae4:	f7 01       	movw	r30, r14
    2ae6:	e2 50       	subi	r30, 0x02	; 2
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 83       	st	Z, r22
    2aec:	71 83       	std	Z+1, r23	; 0x01
    2aee:	82 83       	std	Z+2, r24	; 0x02
    2af0:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature  = temperature;
    2af2:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2af6:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2afa:	38 96       	adiw	r30, 0x08	; 8
    2afc:	80 83       	st	Z, r24
    2afe:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow         = m_wFlow;
    2b00:	7e 96       	adiw	r30, 0x1e	; 30
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	7a 97       	sbiw	r30, 0x1a	; 26
    2b08:	80 83       	st	Z, r24
    2b0a:	91 83       	std	Z+1, r25	; 0x01
				
				if (flushesLimit != laserDiodeData.lasersettings.FlushesLimit)
    2b0c:	d8 01       	movw	r26, r16
    2b0e:	8d 91       	ld	r24, X+
    2b10:	9c 91       	ld	r25, X
    2b12:	8c 15       	cp	r24, r12
    2b14:	9d 05       	cpc	r25, r13
    2b16:	21 f1       	breq	.+72     	; 0x2b60 <_ZN16CLaserControlApp3RunEv+0x3da>
				{	
					if ((laserDiodeData.lasersettings.FlushesLimit != 4) && (Profile != PROFILE_FAST))
    2b18:	84 30       	cpi	r24, 0x04	; 4
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <_ZN16CLaserControlApp3RunEv+0x39a>
    2b1e:	9f c4       	rjmp	.+2366   	; 0x345e <_ZN16CLaserControlApp3RunEv+0xcd8>
    2b20:	f7 01       	movw	r30, r14
    2b22:	26 85       	ldd	r18, Z+14	; 0x0e
    2b24:	24 30       	cpi	r18, 0x04	; 4
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <_ZN16CLaserControlApp3RunEv+0x3a4>
    2b28:	96 c4       	rjmp	.+2348   	; 0x3456 <_ZN16CLaserControlApp3RunEv+0xcd0>
					{
						laserDiodeData.lasersettings.FlushesLimit = 4;
    2b2a:	84 e0       	ldi	r24, 0x04	; 4
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	f8 01       	movw	r30, r16
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
						update = true;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	d7 01       	movw	r26, r14
    2b38:	51 96       	adiw	r26, 0x11	; 17
    2b3a:	8c 93       	st	X, r24
						break;
    2b3c:	56 c4       	rjmp	.+2220   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
					}
					
					if (Profile == PROFILE_FAST)
					{
						if (laserDiodeData.lasersettings.FlushesLimit == 3) laserDiodeData.lasersettings.FlushesLimit = 0;
    2b3e:	f7 01       	movw	r30, r14
    2b40:	e8 50       	subi	r30, 0x08	; 8
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	10 82       	st	Z, r1
    2b46:	11 82       	std	Z+1, r1	; 0x01
						laserLimitMode = laserDiodeData.lasersettings.FlushesLimit;
    2b48:	f7 01       	movw	r30, r14
    2b4a:	e8 50       	subi	r30, 0x08	; 8
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	91 81       	ldd	r25, Z+1	; 0x01
    2b52:	3c 97       	sbiw	r30, 0x0c	; 12
    2b54:	80 83       	st	Z, r24
    2b56:	91 83       	std	Z+1, r25	; 0x01
						update = true;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	f7 01       	movw	r30, r14
    2b5c:	81 8b       	std	Z+17, r24	; 0x11
						break;
    2b5e:	45 c4       	rjmp	.+2186   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
					}
				}
				
				if (phototype != laserDiodeData.phototype)
    2b60:	f7 01       	movw	r30, r14
    2b62:	ec 5f       	subi	r30, 0xFC	; 252
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	6a 15       	cp	r22, r10
    2b6c:	7b 05       	cpc	r23, r11
    2b6e:	89 f1       	breq	.+98     	; 0x2bd2 <_ZN16CLaserControlApp3RunEv+0x44c>
				{
					PhototypePreset(laserDiodeData.phototype);
    2b70:	c7 01       	movw	r24, r14
    2b72:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN16CLaserControlApp15PhototypePresetEj>
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2b76:	d7 01       	movw	r26, r14
    2b78:	1e 96       	adiw	r26, 0x0e	; 14
    2b7a:	8c 91       	ld	r24, X
    2b7c:	1e 97       	sbiw	r26, 0x0e	; 14
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	ac 01       	movw	r20, r24
    2b82:	44 0f       	add	r20, r20
    2b84:	55 1f       	adc	r21, r21
    2b86:	9a 01       	movw	r18, r20
    2b88:	28 0f       	add	r18, r24
    2b8a:	39 1f       	adc	r19, r25
    2b8c:	22 0f       	add	r18, r18
    2b8e:	33 1f       	adc	r19, r19
    2b90:	f9 01       	movw	r30, r18
    2b92:	ea 56       	subi	r30, 0x6A	; 106
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	ee 0d       	add	r30, r14
    2b98:	ff 1d       	adc	r31, r15
    2b9a:	26 e0       	ldi	r18, 0x06	; 6
    2b9c:	ae 50       	subi	r26, 0x0E	; 14
    2b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba0:	01 90       	ld	r0, Z+
    2ba2:	0d 92       	st	X+, r0
    2ba4:	2a 95       	dec	r18
    2ba6:	e1 f7       	brne	.-8      	; 0x2ba0 <_ZN16CLaserControlApp3RunEv+0x41a>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2ba8:	84 0f       	add	r24, r20
    2baa:	95 1f       	adc	r25, r21
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	ec 54       	subi	r30, 0x4C	; 76
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	ee 0d       	add	r30, r14
    2bb8:	ff 1d       	adc	r31, r15
    2bba:	86 e0       	ldi	r24, 0x06	; 6
    2bbc:	d7 01       	movw	r26, r14
    2bbe:	a8 50       	subi	r26, 0x08	; 8
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	01 90       	ld	r0, Z+
    2bc4:	0d 92       	st	X+, r0
    2bc6:	8a 95       	dec	r24
    2bc8:	e1 f7       	brne	.-8      	; 0x2bc2 <_ZN16CLaserControlApp3RunEv+0x43c>
					update = true;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	f7 01       	movw	r30, r14
    2bce:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2bd0:	0c c4       	rjmp	.+2072   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
				if (melanin != laserDiodeData.melanin)
    2bd2:	f7 01       	movw	r30, r14
    2bd4:	ee 5f       	subi	r30, 0xFE	; 254
    2bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	68 15       	cp	r22, r8
    2bde:	79 05       	cpc	r23, r9
    2be0:	89 f1       	breq	.+98     	; 0x2c44 <_ZN16CLaserControlApp3RunEv+0x4be>
				{
					MelaninPreset(laserDiodeData.melanin);
    2be2:	c7 01       	movw	r24, r14
    2be4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN16CLaserControlApp13MelaninPresetEj>
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2be8:	d7 01       	movw	r26, r14
    2bea:	1e 96       	adiw	r26, 0x0e	; 14
    2bec:	8c 91       	ld	r24, X
    2bee:	1e 97       	sbiw	r26, 0x0e	; 14
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	44 0f       	add	r20, r20
    2bf6:	55 1f       	adc	r21, r21
    2bf8:	9a 01       	movw	r18, r20
    2bfa:	28 0f       	add	r18, r24
    2bfc:	39 1f       	adc	r19, r25
    2bfe:	22 0f       	add	r18, r18
    2c00:	33 1f       	adc	r19, r19
    2c02:	f9 01       	movw	r30, r18
    2c04:	ea 56       	subi	r30, 0x6A	; 106
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	ee 0d       	add	r30, r14
    2c0a:	ff 1d       	adc	r31, r15
    2c0c:	26 e0       	ldi	r18, 0x06	; 6
    2c0e:	ae 50       	subi	r26, 0x0E	; 14
    2c10:	bf 4f       	sbci	r27, 0xFF	; 255
    2c12:	01 90       	ld	r0, Z+
    2c14:	0d 92       	st	X+, r0
    2c16:	2a 95       	dec	r18
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <_ZN16CLaserControlApp3RunEv+0x48c>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2c1a:	84 0f       	add	r24, r20
    2c1c:	95 1f       	adc	r25, r21
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	fc 01       	movw	r30, r24
    2c24:	ec 54       	subi	r30, 0x4C	; 76
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	ee 0d       	add	r30, r14
    2c2a:	ff 1d       	adc	r31, r15
    2c2c:	86 e0       	ldi	r24, 0x06	; 6
    2c2e:	d7 01       	movw	r26, r14
    2c30:	a8 50       	subi	r26, 0x08	; 8
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	01 90       	ld	r0, Z+
    2c36:	0d 92       	st	X+, r0
    2c38:	8a 95       	dec	r24
    2c3a:	e1 f7       	brne	.-8      	; 0x2c34 <_ZN16CLaserControlApp3RunEv+0x4ae>
					update = true;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	f7 01       	movw	r30, r14
    2c40:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2c42:	d3 c3       	rjmp	.+1958   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
				if (Profile != (APP_PROFILE)laserDiodeData.mode)
    2c44:	d7 01       	movw	r26, r14
    2c46:	1e 96       	adiw	r26, 0x0e	; 14
    2c48:	4c 91       	ld	r20, X
    2c4a:	1e 97       	sbiw	r26, 0x0e	; 14
    2c4c:	f7 01       	movw	r30, r14
    2c4e:	e0 51       	subi	r30, 0x10	; 16
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	01 90       	ld	r0, Z+
    2c54:	f0 81       	ld	r31, Z
    2c56:	e0 2d       	mov	r30, r0
    2c58:	4e 17       	cp	r20, r30
    2c5a:	71 f1       	breq	.+92     	; 0x2cb8 <_ZN16CLaserControlApp3RunEv+0x532>
				{
					Profile = (APP_PROFILE)laserDiodeData.mode;
    2c5c:	1e 96       	adiw	r26, 0x0e	; 14
    2c5e:	ec 93       	st	X, r30
    2c60:	1e 97       	sbiw	r26, 0x0e	; 14
    2c62:	9f 01       	movw	r18, r30
    2c64:	33 27       	eor	r19, r19
					// Update profile
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2c66:	a9 01       	movw	r20, r18
    2c68:	44 0f       	add	r20, r20
    2c6a:	55 1f       	adc	r21, r21
    2c6c:	ca 01       	movw	r24, r20
    2c6e:	82 0f       	add	r24, r18
    2c70:	93 1f       	adc	r25, r19
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	8a 56       	subi	r24, 0x6A	; 106
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	f7 01       	movw	r30, r14
    2c7c:	e8 0f       	add	r30, r24
    2c7e:	f9 1f       	adc	r31, r25
    2c80:	66 e0       	ldi	r22, 0x06	; 6
    2c82:	ae 50       	subi	r26, 0x0E	; 14
    2c84:	bf 4f       	sbci	r27, 0xFF	; 255
    2c86:	01 90       	ld	r0, Z+
    2c88:	0d 92       	st	X+, r0
    2c8a:	6a 95       	dec	r22
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <_ZN16CLaserControlApp3RunEv+0x500>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2c8e:	fa 01       	movw	r30, r20
    2c90:	e2 0f       	add	r30, r18
    2c92:	f3 1f       	adc	r31, r19
    2c94:	ee 0f       	add	r30, r30
    2c96:	ff 1f       	adc	r31, r31
    2c98:	ec 54       	subi	r30, 0x4C	; 76
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	ee 0d       	add	r30, r14
    2c9e:	ff 1d       	adc	r31, r15
    2ca0:	86 e0       	ldi	r24, 0x06	; 6
    2ca2:	d7 01       	movw	r26, r14
    2ca4:	a8 50       	subi	r26, 0x08	; 8
    2ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca8:	01 90       	ld	r0, Z+
    2caa:	0d 92       	st	X+, r0
    2cac:	8a 95       	dec	r24
    2cae:	e1 f7       	brne	.-8      	; 0x2ca8 <_ZN16CLaserControlApp3RunEv+0x522>
					
					update = true;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	f7 01       	movw	r30, r14
    2cb4:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2cb6:	99 c3       	rjmp	.+1842   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				
				uint16_t duration = durationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    2cb8:	f7 01       	movw	r30, r14
    2cba:	2a e1       	ldi	r18, 0x1A	; 26
    2cbc:	42 9f       	mul	r20, r18
    2cbe:	e0 0d       	add	r30, r0
    2cc0:	f1 1d       	adc	r31, r1
    2cc2:	11 24       	eor	r1, r1
    2cc4:	80 a5       	ldd	r24, Z+40	; 0x28
    2cc6:	91 a5       	ldd	r25, Z+41	; 0x29
    2cc8:	68 9e       	mul	r6, r24
    2cca:	90 01       	movw	r18, r0
    2ccc:	69 9e       	mul	r6, r25
    2cce:	30 0d       	add	r19, r0
    2cd0:	78 9e       	mul	r7, r24
    2cd2:	30 0d       	add	r19, r0
    2cd4:	11 24       	eor	r1, r1
    2cd6:	86 a1       	ldd	r24, Z+38	; 0x26
    2cd8:	97 a1       	ldd	r25, Z+39	; 0x27
    2cda:	82 0f       	add	r24, r18
    2cdc:	93 1f       	adc	r25, r19
    2cde:	8f ab       	std	Y+55, r24	; 0x37
    2ce0:	98 af       	std	Y+56, r25	; 0x38
				uint16_t energy   = energyCnt   * pstGUI[Profile].m_wEnergyStep   + pstGUI[Profile].m_wEnergyOffset;
    2ce2:	82 a1       	ldd	r24, Z+34	; 0x22
    2ce4:	93 a1       	ldd	r25, Z+35	; 0x23
    2ce6:	48 9e       	mul	r4, r24
    2ce8:	90 01       	movw	r18, r0
    2cea:	49 9e       	mul	r4, r25
    2cec:	30 0d       	add	r19, r0
    2cee:	58 9e       	mul	r5, r24
    2cf0:	30 0d       	add	r19, r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	80 a1       	ldd	r24, Z+32	; 0x20
    2cf6:	91 a1       	ldd	r25, Z+33	; 0x21
    2cf8:	82 0f       	add	r24, r18
    2cfa:	93 1f       	adc	r25, r19
    2cfc:	8d 87       	std	Y+13, r24	; 0x0d
    2cfe:	9e 87       	std	Y+14, r25	; 0x0e
				
				if (freq != laserDiodeData.laserprofile.Frequency)
    2d00:	f7 01       	movw	r30, r14
    2d02:	ee 50       	subi	r30, 0x0E	; 14
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	29 ad       	ldd	r18, Y+57	; 0x39
    2d0c:	3a ad       	ldd	r19, Y+58	; 0x3a
    2d0e:	82 17       	cp	r24, r18
    2d10:	93 07       	cpc	r25, r19
    2d12:	61 f0       	breq	.+24     	; 0x2d2c <_ZN16CLaserControlApp3RunEv+0x5a6>
				{
					freq = laserDiodeData.laserprofile.Frequency;
    2d14:	89 af       	std	Y+57, r24	; 0x39
    2d16:	9a af       	std	Y+58, r25	; 0x3a
					
					if (!FreqLimits(freq, (APP_PROFILE)laserDiodeData.mode))
    2d18:	be 01       	movw	r22, r28
    2d1a:	67 5c       	subi	r22, 0xC7	; 199
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	c7 01       	movw	r24, r14
    2d20:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>
					{
						//laserDiodeData.laserprofile.Frequency = freq;
						//update = true;
					}
					
					update = true;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	d7 01       	movw	r26, r14
    2d28:	51 96       	adiw	r26, 0x11	; 17
    2d2a:	8c 93       	st	X, r24
				}
				
				UpdateLimits(freq, duration, energy, Profile);
    2d2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d30:	4f a9       	ldd	r20, Y+55	; 0x37
    2d32:	58 ad       	ldd	r21, Y+56	; 0x38
    2d34:	69 ad       	ldd	r22, Y+57	; 0x39
    2d36:	7a ad       	ldd	r23, Y+58	; 0x3a
    2d38:	f7 01       	movw	r30, r14
    2d3a:	06 85       	ldd	r16, Z+14	; 0x0e
    2d3c:	c7 01       	movw	r24, r14
    2d3e:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
				
				if (durationCnt != laserDiodeData.laserprofile.DurationCnt)
    2d42:	f7 01       	movw	r30, r14
    2d44:	ec 50       	subi	r30, 0x0C	; 12
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	86 15       	cp	r24, r6
    2d4e:	97 05       	cpc	r25, r7
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <_ZN16CLaserControlApp3RunEv+0x5ce>
    2d52:	58 c0       	rjmp	.+176    	; 0x2e04 <_ZN16CLaserControlApp3RunEv+0x67e>
				{					
					if (Profile == PROFILE_FAST)
    2d54:	d7 01       	movw	r26, r14
    2d56:	1e 96       	adiw	r26, 0x0e	; 14
    2d58:	2c 91       	ld	r18, X
    2d5a:	24 30       	cpi	r18, 0x04	; 4
    2d5c:	19 f4       	brne	.+6      	; 0x2d64 <_ZN16CLaserControlApp3RunEv+0x5de>
						laserDiodeData.laserprofile.DurationCnt = durationCnt; // Disable duration when FAST mode
    2d5e:	60 82       	st	Z, r6
    2d60:	71 82       	std	Z+1, r7	; 0x01
    2d62:	4d c0       	rjmp	.+154    	; 0x2dfe <_ZN16CLaserControlApp3RunEv+0x678>
					else
					{
						duration = laserDiodeData.laserprofile.DurationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    2d64:	42 2f       	mov	r20, r18
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	f7 01       	movw	r30, r14
    2d6a:	ba e1       	ldi	r27, 0x1A	; 26
    2d6c:	2b 9f       	mul	r18, r27
    2d6e:	e0 0d       	add	r30, r0
    2d70:	f1 1d       	adc	r31, r1
    2d72:	11 24       	eor	r1, r1
    2d74:	60 a5       	ldd	r22, Z+40	; 0x28
    2d76:	71 a5       	ldd	r23, Z+41	; 0x29
    2d78:	86 9f       	mul	r24, r22
    2d7a:	90 01       	movw	r18, r0
    2d7c:	87 9f       	mul	r24, r23
    2d7e:	30 0d       	add	r19, r0
    2d80:	96 9f       	mul	r25, r22
    2d82:	30 0d       	add	r19, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	86 a1       	ldd	r24, Z+38	; 0x26
    2d88:	97 a1       	ldd	r25, Z+39	; 0x27
    2d8a:	82 0f       	add	r24, r18
    2d8c:	93 1f       	adc	r25, r19
    2d8e:	8f ab       	std	Y+55, r24	; 0x37
    2d90:	98 af       	std	Y+56, r25	; 0x38
						
						// Check limit
						if ((duration <= pstGUI[Profile].m_wMaxDuration) && (duration >= pstGUI[Profile].m_wMinDuration))
    2d92:	20 8d       	ldd	r18, Z+24	; 0x18
    2d94:	31 8d       	ldd	r19, Z+25	; 0x19
    2d96:	28 17       	cp	r18, r24
    2d98:	39 07       	cpc	r19, r25
    2d9a:	60 f1       	brcs	.+88     	; 0x2df4 <_ZN16CLaserControlApp3RunEv+0x66e>
    2d9c:	9a 01       	movw	r18, r20
    2d9e:	2f 5f       	subi	r18, 0xFF	; 255
    2da0:	3f 4f       	sbci	r19, 0xFF	; 255
    2da2:	6a e1       	ldi	r22, 0x1A	; 26
    2da4:	62 9f       	mul	r22, r18
    2da6:	f0 01       	movw	r30, r0
    2da8:	63 9f       	mul	r22, r19
    2daa:	f0 0d       	add	r31, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	ee 0d       	add	r30, r14
    2db0:	ff 1d       	adc	r31, r15
    2db2:	20 81       	ld	r18, Z
    2db4:	31 81       	ldd	r19, Z+1	; 0x01
    2db6:	82 17       	cp	r24, r18
    2db8:	93 07       	cpc	r25, r19
    2dba:	e0 f0       	brcs	.+56     	; 0x2df4 <_ZN16CLaserControlApp3RunEv+0x66e>
						{
							if (pstGUI[Profile].updateDuration)
    2dbc:	8a e1       	ldi	r24, 0x1A	; 26
    2dbe:	84 9f       	mul	r24, r20
    2dc0:	f0 01       	movw	r30, r0
    2dc2:	85 9f       	mul	r24, r21
    2dc4:	f0 0d       	add	r31, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	ee 0d       	add	r30, r14
    2dca:	ff 1d       	adc	r31, r15
    2dcc:	84 a5       	ldd	r24, Z+44	; 0x2c
    2dce:	88 23       	and	r24, r24
    2dd0:	49 f0       	breq	.+18     	; 0x2de4 <_ZN16CLaserControlApp3RunEv+0x65e>
								CalculateDurationSteps(freq, duration);
    2dd2:	ae 01       	movw	r20, r28
    2dd4:	49 5c       	subi	r20, 0xC9	; 201
    2dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd8:	be 01       	movw	r22, r28
    2dda:	67 5c       	subi	r22, 0xC7	; 199
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	c7 01       	movw	r24, r14
    2de0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>
							laserDiodeData.lasersettings.Duration = duration;
    2de4:	8f a9       	ldd	r24, Y+55	; 0x37
    2de6:	98 ad       	ldd	r25, Y+56	; 0x38
    2de8:	f7 01       	movw	r30, r14
    2dea:	e6 50       	subi	r30, 0x06	; 6
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 83       	st	Z, r24
    2df0:	91 83       	std	Z+1, r25	; 0x01
    2df2:	05 c0       	rjmp	.+10     	; 0x2dfe <_ZN16CLaserControlApp3RunEv+0x678>
						}
						else
							laserDiodeData.laserprofile.DurationCnt = durationCnt; // Cancel change if out
    2df4:	f7 01       	movw	r30, r14
    2df6:	ec 50       	subi	r30, 0x0C	; 12
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	60 82       	st	Z, r6
    2dfc:	71 82       	std	Z+1, r7	; 0x01
					}
					update = true;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	f7 01       	movw	r30, r14
    2e02:	81 8b       	std	Z+17, r24	; 0x11
				}
				if (energyCnt != laserDiodeData.laserprofile.EnergyCnt)
    2e04:	f7 01       	movw	r30, r14
    2e06:	ea 50       	subi	r30, 0x0A	; 10
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	40 81       	ld	r20, Z
    2e0c:	51 81       	ldd	r21, Z+1	; 0x01
    2e0e:	44 15       	cp	r20, r4
    2e10:	55 05       	cpc	r21, r5
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <_ZN16CLaserControlApp3RunEv+0x690>
    2e14:	67 c0       	rjmp	.+206    	; 0x2ee4 <_ZN16CLaserControlApp3RunEv+0x75e>
				{
					energy = laserDiodeData.laserprofile.EnergyCnt * pstGUI[Profile].m_wEnergyStep + pstGUI[Profile].m_wEnergyOffset;
    2e16:	d7 01       	movw	r26, r14
    2e18:	1e 96       	adiw	r26, 0x0e	; 14
    2e1a:	2c 91       	ld	r18, X
    2e1c:	62 2f       	mov	r22, r18
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	f7 01       	movw	r30, r14
    2e22:	ba e1       	ldi	r27, 0x1A	; 26
    2e24:	2b 9f       	mul	r18, r27
    2e26:	e0 0d       	add	r30, r0
    2e28:	f1 1d       	adc	r31, r1
    2e2a:	11 24       	eor	r1, r1
    2e2c:	82 a1       	ldd	r24, Z+34	; 0x22
    2e2e:	93 a1       	ldd	r25, Z+35	; 0x23
    2e30:	48 9f       	mul	r20, r24
    2e32:	d0 01       	movw	r26, r0
    2e34:	49 9f       	mul	r20, r25
    2e36:	b0 0d       	add	r27, r0
    2e38:	58 9f       	mul	r21, r24
    2e3a:	b0 0d       	add	r27, r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	80 a1       	ldd	r24, Z+32	; 0x20
    2e40:	91 a1       	ldd	r25, Z+33	; 0x21
    2e42:	8a 0f       	add	r24, r26
    2e44:	9b 1f       	adc	r25, r27
    2e46:	8d 87       	std	Y+13, r24	; 0x0d
    2e48:	9e 87       	std	Y+14, r25	; 0x0e
					
					if (Profile == PROFILE_FAST)
    2e4a:	24 30       	cpi	r18, 0x04	; 4
    2e4c:	69 f4       	brne	.+26     	; 0x2e68 <_ZN16CLaserControlApp3RunEv+0x6e2>
						CheckLimitsFastMode(freq, duration, energy);
    2e4e:	9e 01       	movw	r18, r28
    2e50:	23 5f       	subi	r18, 0xF3	; 243
    2e52:	3f 4f       	sbci	r19, 0xFF	; 255
    2e54:	ae 01       	movw	r20, r28
    2e56:	49 5c       	subi	r20, 0xC9	; 201
    2e58:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5a:	be 01       	movw	r22, r28
    2e5c:	67 5c       	subi	r22, 0xC7	; 199
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	c7 01       	movw	r24, r14
    2e62:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
    2e66:	3b c0       	rjmp	.+118    	; 0x2ede <_ZN16CLaserControlApp3RunEv+0x758>
					else
					{
						// Check limit
						if ((energy <= pstGUI[Profile].m_wMaxEnergy_) && (energy >= pstGUI[Profile].m_wMinEnergy_))
    2e68:	2a e1       	ldi	r18, 0x1A	; 26
    2e6a:	26 9f       	mul	r18, r22
    2e6c:	f0 01       	movw	r30, r0
    2e6e:	27 9f       	mul	r18, r23
    2e70:	f0 0d       	add	r31, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	ee 0d       	add	r30, r14
    2e76:	ff 1d       	adc	r31, r15
    2e78:	24 89       	ldd	r18, Z+20	; 0x14
    2e7a:	35 89       	ldd	r19, Z+21	; 0x15
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	48 f1       	brcs	.+82     	; 0x2ed4 <_ZN16CLaserControlApp3RunEv+0x74e>
    2e82:	2a e1       	ldi	r18, 0x1A	; 26
    2e84:	26 9f       	mul	r18, r22
    2e86:	f0 01       	movw	r30, r0
    2e88:	27 9f       	mul	r18, r23
    2e8a:	f0 0d       	add	r31, r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	ee 0d       	add	r30, r14
    2e90:	ff 1d       	adc	r31, r15
    2e92:	26 89       	ldd	r18, Z+22	; 0x16
    2e94:	37 89       	ldd	r19, Z+23	; 0x17
    2e96:	82 17       	cp	r24, r18
    2e98:	93 07       	cpc	r25, r19
    2e9a:	e0 f0       	brcs	.+56     	; 0x2ed4 <_ZN16CLaserControlApp3RunEv+0x74e>
						{
							if (pstGUI[Profile].updateEnergy)
    2e9c:	8a e1       	ldi	r24, 0x1A	; 26
    2e9e:	86 9f       	mul	r24, r22
    2ea0:	f0 01       	movw	r30, r0
    2ea2:	87 9f       	mul	r24, r23
    2ea4:	f0 0d       	add	r31, r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	ee 0d       	add	r30, r14
    2eaa:	ff 1d       	adc	r31, r15
    2eac:	85 a5       	ldd	r24, Z+45	; 0x2d
    2eae:	88 23       	and	r24, r24
    2eb0:	49 f0       	breq	.+18     	; 0x2ec4 <_ZN16CLaserControlApp3RunEv+0x73e>
								CalculateEnergySteps(freq, energy);
    2eb2:	ae 01       	movw	r20, r28
    2eb4:	43 5f       	subi	r20, 0xF3	; 243
    2eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb8:	be 01       	movw	r22, r28
    2eba:	67 5c       	subi	r22, 0xC7	; 199
    2ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>
							laserDiodeData.lasersettings.Energy = energy;
    2ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec8:	f7 01       	movw	r30, r14
    2eca:	e4 50       	subi	r30, 0x04	; 4
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 83       	st	Z, r24
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	05 c0       	rjmp	.+10     	; 0x2ede <_ZN16CLaserControlApp3RunEv+0x758>
						}
						else
							laserDiodeData.laserprofile.EnergyCnt = energyCnt; // Cancel change if out
    2ed4:	f7 01       	movw	r30, r14
    2ed6:	ea 50       	subi	r30, 0x0A	; 10
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	40 82       	st	Z, r4
    2edc:	51 82       	std	Z+1, r5	; 0x01
					}
					update = true;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	f7 01       	movw	r30, r14
    2ee2:	81 8b       	std	Z+17, r24	; 0x11
				}
				
				if (Profile != PROFILE_FAST)
    2ee4:	d7 01       	movw	r26, r14
    2ee6:	1e 96       	adiw	r26, 0x0e	; 14
    2ee8:	0c 91       	ld	r16, X
    2eea:	04 30       	cpi	r16, 0x04	; 4
    2eec:	69 f0       	breq	.+26     	; 0x2f08 <_ZN16CLaserControlApp3RunEv+0x782>
					CheckLimits(freq, duration, energy, Profile);
    2eee:	9e 01       	movw	r18, r28
    2ef0:	23 5f       	subi	r18, 0xF3	; 243
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	ae 01       	movw	r20, r28
    2ef6:	49 5c       	subi	r20, 0xC9	; 201
    2ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    2efa:	be 01       	movw	r22, r28
    2efc:	67 5c       	subi	r22, 0xC7	; 199
    2efe:	7f 4f       	sbci	r23, 0xFF	; 255
    2f00:	c7 01       	movw	r24, r14
    2f02:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>
    2f06:	0c c0       	rjmp	.+24     	; 0x2f20 <_ZN16CLaserControlApp3RunEv+0x79a>
				else
					CheckLimitsFastMode(freq, duration, energy);
    2f08:	9e 01       	movw	r18, r28
    2f0a:	23 5f       	subi	r18, 0xF3	; 243
    2f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0e:	ae 01       	movw	r20, r28
    2f10:	49 5c       	subi	r20, 0xC9	; 201
    2f12:	5f 4f       	sbci	r21, 0xFF	; 255
    2f14:	be 01       	movw	r22, r28
    2f16:	67 5c       	subi	r22, 0xC7	; 199
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1a:	c7 01       	movw	r24, r14
    2f1c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
				
				if (Profile == PROFILE_MEDIUM)
    2f20:	f7 01       	movw	r30, r14
    2f22:	86 85       	ldd	r24, Z+14	; 0x0e
    2f24:	83 30       	cpi	r24, 0x03	; 3
    2f26:	81 f4       	brne	.+32     	; 0x2f48 <_ZN16CLaserControlApp3RunEv+0x7c2>
					CalculateMultiPulseLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2f28:	a7 01       	movw	r20, r14
    2f2a:	48 50       	subi	r20, 0x08	; 8
    2f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2e:	b7 01       	movw	r22, r14
    2f30:	6e 50       	subi	r22, 0x0E	; 14
    2f32:	7f 4f       	sbci	r23, 0xFF	; 255
    2f34:	c7 01       	movw	r24, r14
    2f36:	0e 94 99 11 	call	0x2332	; 0x2332 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2f3a:	2f 83       	std	Y+7, r18	; 0x07
    2f3c:	38 87       	std	Y+8, r19	; 0x08
    2f3e:	49 87       	std	Y+9, r20	; 0x09
    2f40:	5a 87       	std	Y+10, r21	; 0x0a
    2f42:	6b 87       	std	Y+11, r22	; 0x0b
    2f44:	7c 87       	std	Y+12, r23	; 0x0c
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <_ZN16CLaserControlApp3RunEv+0x7e0>
				else
					CalculateLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2f48:	a7 01       	movw	r20, r14
    2f4a:	48 50       	subi	r20, 0x08	; 8
    2f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4e:	b7 01       	movw	r22, r14
    2f50:	6e 50       	subi	r22, 0x0E	; 14
    2f52:	7f 4f       	sbci	r23, 0xFF	; 255
    2f54:	c7 01       	movw	r24, r14
    2f56:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2f5a:	29 83       	std	Y+1, r18	; 0x01
    2f5c:	3a 83       	std	Y+2, r19	; 0x02
    2f5e:	4b 83       	std	Y+3, r20	; 0x03
    2f60:	5c 83       	std	Y+4, r21	; 0x04
    2f62:	6d 83       	std	Y+5, r22	; 0x05
    2f64:	7e 83       	std	Y+6, r23	; 0x06
					
				laserPower = min((uint32_t)(laserDiodeData.lasersettings.Energy * 1440ul) / (uint32_t)laserDiodeData.lasersettings.Duration, MAX_LASER_POWER); // Convert Energy J/cm2 to Power in Watts
    2f66:	f7 01       	movw	r30, r14
    2f68:	e4 50       	subi	r30, 0x04	; 4
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	20 81       	ld	r18, Z
    2f6e:	31 81       	ldd	r19, Z+1	; 0x01
    2f70:	a0 ea       	ldi	r26, 0xA0	; 160
    2f72:	b5 e0       	ldi	r27, 0x05	; 5
    2f74:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    2f78:	32 97       	sbiw	r30, 0x02	; 2
    2f7a:	20 81       	ld	r18, Z
    2f7c:	31 81       	ldd	r19, Z+1	; 0x01
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    2f86:	64 ef       	ldi	r22, 0xF4	; 244
    2f88:	71 e0       	ldi	r23, 0x01	; 1
    2f8a:	c9 01       	movw	r24, r18
    2f8c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <_Z3minjj>
    2f90:	f7 01       	movw	r30, r14
    2f92:	e8 52       	subi	r30, 0x28	; 40
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
				
				// Copy data to profiles
				if (update)
    2f9a:	d7 01       	movw	r26, r14
    2f9c:	51 96       	adiw	r26, 0x11	; 17
    2f9e:	8c 91       	ld	r24, X
    2fa0:	51 97       	sbiw	r26, 0x11	; 17
    2fa2:	88 23       	and	r24, r24
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <_ZN16CLaserControlApp3RunEv+0x822>
    2fa6:	21 c2       	rjmp	.+1090   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				{
					memcpy((void*)&m_structLaserProfile [Profile], (void*)&laserDiodeData.laserprofile , sizeof(laserDiodeData.laserprofile));
    2fa8:	1e 96       	adiw	r26, 0x0e	; 14
    2faa:	9c 91       	ld	r25, X
    2fac:	1e 97       	sbiw	r26, 0x0e	; 14
    2fae:	86 e0       	ldi	r24, 0x06	; 6
    2fb0:	89 9f       	mul	r24, r25
    2fb2:	a0 0d       	add	r26, r0
    2fb4:	b1 1d       	adc	r27, r1
    2fb6:	11 24       	eor	r1, r1
    2fb8:	aa 56       	subi	r26, 0x6A	; 106
    2fba:	bf 4f       	sbci	r27, 0xFF	; 255
    2fbc:	96 e0       	ldi	r25, 0x06	; 6
    2fbe:	7a 96       	adiw	r30, 0x1a	; 26
    2fc0:	01 90       	ld	r0, Z+
    2fc2:	0d 92       	st	X+, r0
    2fc4:	9a 95       	dec	r25
    2fc6:	e1 f7       	brne	.-8      	; 0x2fc0 <_ZN16CLaserControlApp3RunEv+0x83a>
					memcpy((void*)&m_structLaserSettings[Profile], (void*)&laserDiodeData.lasersettings, sizeof(laserDiodeData.lasersettings));
    2fc8:	f7 01       	movw	r30, r14
    2fca:	96 85       	ldd	r25, Z+14	; 0x0e
    2fcc:	d7 01       	movw	r26, r14
    2fce:	89 9f       	mul	r24, r25
    2fd0:	a0 0d       	add	r26, r0
    2fd2:	b1 1d       	adc	r27, r1
    2fd4:	11 24       	eor	r1, r1
    2fd6:	ac 54       	subi	r26, 0x4C	; 76
    2fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fda:	e8 50       	subi	r30, 0x08	; 8
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	01 90       	ld	r0, Z+
    2fe0:	0d 92       	st	X+, r0
    2fe2:	8a 95       	dec	r24
    2fe4:	e1 f7       	brne	.-8      	; 0x2fde <_ZN16CLaserControlApp3RunEv+0x858>
				}
			}
		break;
    2fe6:	01 c2       	rjmp	.+1026   	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    2fe8:	d7 01       	movw	r26, r14
    2fea:	52 96       	adiw	r26, 0x12	; 18
    2fec:	8c 91       	ld	r24, X
    2fee:	88 23       	and	r24, r24
    2ff0:	b9 f0       	breq	.+46     	; 0x3020 <_ZN16CLaserControlApp3RunEv+0x89a>
				{
					timervar.timer_minutes = m_wMinutes;
    2ff2:	f7 01       	movw	r30, r14
    2ff4:	e6 5e       	subi	r30, 0xE6	; 230
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	8d 87       	std	Y+13, r24	; 0x0d
    2ffe:	9e 87       	std	Y+14, r25	; 0x0e
					timervar.timer_seconds = m_wSeconds;
    3000:	32 96       	adiw	r30, 0x02	; 2
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	8f 87       	std	Y+15, r24	; 0x0f
    3008:	98 8b       	std	Y+16, r25	; 0x10
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    300a:	24 e0       	ldi	r18, 0x04	; 4
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	ae 01       	movw	r20, r28
    3010:	43 5f       	subi	r20, 0xF3	; 243
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	6f e0       	ldi	r22, 0x0F	; 15
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	c7 01       	movw	r24, r14
    301a:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    301e:	e5 c1       	rjmp	.+970    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    3020:	f7 01       	movw	r30, r14
    3022:	86 85       	ldd	r24, Z+14	; 0x0e
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	ac 01       	movw	r20, r24
    3028:	44 0f       	add	r20, r20
    302a:	55 1f       	adc	r21, r21
    302c:	84 0f       	add	r24, r20
    302e:	95 1f       	adc	r25, r21
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	ac 01       	movw	r20, r24
    3036:	4a 56       	subi	r20, 0x6A	; 106
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	4e 0d       	add	r20, r14
    303c:	5f 1d       	adc	r21, r15
    303e:	26 e0       	ldi	r18, 0x06	; 6
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	62 e0       	ldi	r22, 0x02	; 2
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	c7 01       	movw	r24, r14
    3048:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    304c:	6c e0       	ldi	r22, 0x0C	; 12
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	c7 01       	movw	r24, r14
    3052:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    3056:	c9 c1       	rjmp	.+914    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    3058:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    305c:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    3060:	6a e0       	ldi	r22, 0x0A	; 10
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <__divmodhi4>
    3068:	6d 87       	std	Y+13, r22	; 0x0d
    306a:	7e 87       	std	Y+14, r23	; 0x0e
				timervar.timer_seconds = temperature % 10;
    306c:	8f 87       	std	Y+15, r24	; 0x0f
    306e:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    3070:	24 e0       	ldi	r18, 0x04	; 4
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	ae 01       	movw	r20, r28
    3076:	43 5f       	subi	r20, 0xF3	; 243
    3078:	5f 4f       	sbci	r21, 0xFF	; 255
    307a:	6f e0       	ldi	r22, 0x0F	; 15
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	c7 01       	movw	r24, r14
    3080:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				/*m_wMinutes = m_wSetMin;
				m_wSeconds = m_wSetSec;*/
				prepare = true;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	d7 01       	movw	r26, r14
    3088:	52 96       	adiw	r26, 0x12	; 18
    308a:	8c 93       	st	X, r24
				
				if (temperature < 290)
    308c:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    3090:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    3094:	82 32       	cpi	r24, 0x22	; 34
    3096:	91 40       	sbci	r25, 0x01	; 1
    3098:	0c f0       	brlt	.+2      	; 0x309c <_ZN16CLaserControlApp3RunEv+0x916>
    309a:	a7 c1       	rjmp	.+846    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
					SetPictureId(PICID_WORK_PREPARE);
    309c:	67 e0       	ldi	r22, 0x07	; 7
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	c7 01       	movw	r24, r14
    30a2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    30a6:	a1 c1       	rjmp	.+834    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    30a8:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    30ac:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    30b0:	8d 32       	cpi	r24, 0x2D	; 45
    30b2:	91 40       	sbci	r25, 0x01	; 1
    30b4:	0c f4       	brge	.+2      	; 0x30b8 <_ZN16CLaserControlApp3RunEv+0x932>
    30b6:	99 c1       	rjmp	.+818    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    30b8:	69 e2       	ldi	r22, 0x29	; 41
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	c7 01       	movw	r24, r14
    30be:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    30c2:	d7 01       	movw	r26, r14
    30c4:	1f 96       	adiw	r26, 0x0f	; 15
    30c6:	8c 91       	ld	r24, X
    30c8:	1f 97       	sbiw	r26, 0x0f	; 15
    30ca:	50 96       	adiw	r26, 0x10	; 16
    30cc:	8c 93       	st	X, r24
    30ce:	8d c1       	rjmp	.+794    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				SetLaserDiodePower();
    30d0:	c7 01       	movw	r24, r14
    30d2:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
							
				if (!laserBoard.Footswitch())
    30d6:	85 ee       	ldi	r24, 0xE5	; 229
    30d8:	95 e2       	ldi	r25, 0x25	; 37
    30da:	0e 94 19 3a 	call	0x7432	; 0x7432 <_ZN11CLaserBoard10FootswitchEv>
    30de:	81 11       	cpse	r24, r1
    30e0:	12 c0       	rjmp	.+36     	; 0x3106 <_ZN16CLaserControlApp3RunEv+0x980>
				{
					//isstarted = true;
					if (state != APP_WORKLIGHT)
    30e2:	f7 01       	movw	r30, r14
    30e4:	84 85       	ldd	r24, Z+12	; 0x0c
    30e6:	95 85       	ldd	r25, Z+13	; 0x0d
    30e8:	80 97       	sbiw	r24, 0x20	; 32
    30ea:	f1 f0       	breq	.+60     	; 0x3128 <_ZN16CLaserControlApp3RunEv+0x9a2>
					{
						SetPictureId(PICID_WORK_STARTED);
    30ec:	60 e1       	ldi	r22, 0x10	; 16
    30ee:	70 e0       	ldi	r23, 0x00	; 0
    30f0:	c7 01       	movw	r24, r14
    30f2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    30f6:	80 e2       	ldi	r24, 0x20	; 32
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	d7 01       	movw	r26, r14
    30fc:	1c 96       	adiw	r26, 0x0c	; 12
    30fe:	8d 93       	st	X+, r24
    3100:	9c 93       	st	X, r25
    3102:	1d 97       	sbiw	r26, 0x0d	; 13
    3104:	11 c0       	rjmp	.+34     	; 0x3128 <_ZN16CLaserControlApp3RunEv+0x9a2>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    3106:	f7 01       	movw	r30, r14
    3108:	84 85       	ldd	r24, Z+12	; 0x0c
    310a:	95 85       	ldd	r25, Z+13	; 0x0d
    310c:	40 97       	sbiw	r24, 0x10	; 16
    310e:	61 f0       	breq	.+24     	; 0x3128 <_ZN16CLaserControlApp3RunEv+0x9a2>
					{
						SetPictureId(PICID_WORK_POWERON);
    3110:	6e e0       	ldi	r22, 0x0E	; 14
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	c7 01       	movw	r24, r14
    3116:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    311a:	80 e1       	ldi	r24, 0x10	; 16
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	d7 01       	movw	r26, r14
    3120:	1c 96       	adiw	r26, 0x0c	; 12
    3122:	8d 93       	st	X+, r24
    3124:	9c 93       	st	X, r25
    3126:	1d 97       	sbiw	r26, 0x0d	; 13
					}
					//StopLaser();
				}
			
				uint32_t cnt = swap32(laserCounter);
    3128:	f7 01       	movw	r30, r14
    312a:	e6 52       	subi	r30, 0x26	; 38
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z6swap32m>
    313a:	6d 87       	std	Y+13, r22	; 0x0d
    313c:	7e 87       	std	Y+14, r23	; 0x0e
    313e:	8f 87       	std	Y+15, r24	; 0x0f
    3140:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    3142:	24 e0       	ldi	r18, 0x04	; 4
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	ae 01       	movw	r20, r28
    3148:	43 5f       	subi	r20, 0xF3	; 243
    314a:	5f 4f       	sbci	r21, 0xFF	; 255
    314c:	68 e0       	ldi	r22, 0x08	; 8
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	c7 01       	movw	r24, r14
    3152:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    3156:	f7 01       	movw	r30, r14
    3158:	e2 52       	subi	r30, 0x22	; 34
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z6swap32m>
    3168:	6d 87       	std	Y+13, r22	; 0x0d
    316a:	7e 87       	std	Y+14, r23	; 0x0e
    316c:	8f 87       	std	Y+15, r24	; 0x0f
    316e:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    3170:	24 e0       	ldi	r18, 0x04	; 4
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	ae 01       	movw	r20, r28
    3176:	43 5f       	subi	r20, 0xF3	; 243
    3178:	5f 4f       	sbci	r21, 0xFF	; 255
    317a:	64 e1       	ldi	r22, 0x14	; 20
    317c:	70 e0       	ldi	r23, 0x00	; 0
    317e:	c7 01       	movw	r24, r14
    3180:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    3184:	32 c1       	rjmp	.+612    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    3186:	85 ee       	ldi	r24, 0xE5	; 229
    3188:	95 e2       	ldi	r25, 0x25	; 37
    318a:	0e 94 ce 39 	call	0x739c	; 0x739c <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    318e:	f7 01       	movw	r30, r14
    3190:	ec 5d       	subi	r30, 0xDC	; 220
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	cd 97       	sbiw	r24, 0x3d	; 61
    319a:	08 f4       	brcc	.+2      	; 0x319e <_ZN16CLaserControlApp3RunEv+0xa18>
    319c:	26 c1       	rjmp	.+588    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				SetPictureId(PICID_WORKOnReady);
    319e:	69 e1       	ldi	r22, 0x19	; 25
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	c7 01       	movw	r24, r14
    31a4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    31a8:	20 c1       	rjmp	.+576    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    31aa:	85 ee       	ldi	r24, 0xE5	; 229
    31ac:	95 e2       	ldi	r25, 0x25	; 37
    31ae:	0e 94 ce 39 	call	0x739c	; 0x739c <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    31b2:	f7 01       	movw	r30, r14
    31b4:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    31b6:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    31ba:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    31be:	82 32       	cpi	r24, 0x22	; 34
    31c0:	91 40       	sbci	r25, 0x01	; 1
    31c2:	0c f0       	brlt	.+2      	; 0x31c6 <_ZN16CLaserControlApp3RunEv+0xa40>
    31c4:	12 c1       	rjmp	.+548    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
			{
				prepare = true;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	d7 01       	movw	r26, r14
    31ca:	52 96       	adiw	r26, 0x12	; 18
    31cc:	8c 93       	st	X, r24
    31ce:	52 97       	sbiw	r26, 0x12	; 18
				SetPictureId(PIC_ID_last);
    31d0:	50 96       	adiw	r26, 0x10	; 16
    31d2:	6c 91       	ld	r22, X
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	c7 01       	movw	r24, r14
    31d8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    31dc:	06 c1       	rjmp	.+524    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    31de:	85 ee       	ldi	r24, 0xE5	; 229
    31e0:	95 e2       	ldi	r25, 0x25	; 37
    31e2:	0e 94 ce 39 	call	0x739c	; 0x739c <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    31e6:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    31ea:	85 ff       	sbrs	r24, 5
    31ec:	fe c0       	rjmp	.+508    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				SetPictureId(PIC_ID_last);
    31ee:	f7 01       	movw	r30, r14
    31f0:	60 89       	ldd	r22, Z+16	; 0x10
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	c7 01       	movw	r24, r14
    31f6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    31fa:	f7 c0       	rjmp	.+494    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    31fc:	f7 01       	movw	r30, r14
    31fe:	e2 52       	subi	r30, 0x22	; 34
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	10 82       	st	Z, r1
    3204:	11 82       	std	Z+1, r1	; 0x01
    3206:	12 82       	std	Z+2, r1	; 0x02
    3208:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    320a:	85 ee       	ldi	r24, 0xE5	; 229
    320c:	95 e2       	ldi	r25, 0x25	; 37
    320e:	0e 94 ca 39 	call	0x7394	; 0x7394 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    3212:	f7 01       	movw	r30, r14
    3214:	e8 5f       	subi	r30, 0xF8	; 248
    3216:	fe 4f       	sbci	r31, 0xFE	; 254
    3218:	80 81       	ld	r24, Z
    321a:	91 81       	ldd	r25, Z+1	; 0x01
    321c:	2c ec       	ldi	r18, 0xCC	; 204
    321e:	28 9f       	mul	r18, r24
    3220:	b0 01       	movw	r22, r0
    3222:	29 9f       	mul	r18, r25
    3224:	70 0d       	add	r23, r0
    3226:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    3228:	86 e1       	ldi	r24, 0x16	; 22
    322a:	96 e2       	ldi	r25, 0x26	; 38
    322c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	d7 01       	movw	r26, r14
    3234:	53 96       	adiw	r26, 0x13	; 19
    3236:	8c 93       	st	X, r24
    3238:	53 97       	sbiw	r26, 0x13	; 19
				
				prepare = true;
    323a:	52 96       	adiw	r26, 0x12	; 18
    323c:	8c 93       	st	X, r24
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    323e:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    3242:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    3246:	83 32       	cpi	r24, 0x23	; 35
    3248:	91 40       	sbci	r25, 0x01	; 1
    324a:	34 f0       	brlt	.+12     	; 0x3258 <_ZN16CLaserControlApp3RunEv+0xad2>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    324c:	67 e2       	ldi	r22, 0x27	; 39
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	c7 01       	movw	r24, r14
    3252:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    3256:	c9 c0       	rjmp	.+402    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    3258:	67 e0       	ldi	r22, 0x07	; 7
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	c7 01       	movw	r24, r14
    325e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    3262:	c3 c0       	rjmp	.+390    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				SetLaserDiodePower();
    3264:	c7 01       	movw	r24, r14
    3266:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
				
				SetPictureId(PICID_WORK_POWERON);
    326a:	6e e0       	ldi	r22, 0x0E	; 14
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	c7 01       	movw	r24, r14
    3270:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    3274:	ba c0       	rjmp	.+372    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    3276:	6a e0       	ldi	r22, 0x0A	; 10
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	c7 01       	movw	r24, r14
    327c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				StopLaser();
    3280:	c7 01       	movw	r24, r14
    3282:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    3286:	85 ee       	ldi	r24, 0xE5	; 229
    3288:	95 e2       	ldi	r25, 0x25	; 37
    328a:	0e 94 ce 39 	call	0x739c	; 0x739c <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    328e:	f7 01       	movw	r30, r14
    3290:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    3292:	85 ee       	ldi	r24, 0xE5	; 229
    3294:	95 e2       	ldi	r25, 0x25	; 37
    3296:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    329a:	f7 01       	movw	r30, r14
    329c:	e6 52       	subi	r30, 0x26	; 38
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	40 81       	ld	r20, Z
    32a2:	51 81       	ldd	r21, Z+1	; 0x01
    32a4:	62 81       	ldd	r22, Z+2	; 0x02
    32a6:	73 81       	ldd	r23, Z+3	; 0x03
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 6f 41 	call	0x82de	; 0x82de <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    32b0:	1d 86       	std	Y+13, r1	; 0x0d
    32b2:	1e 86       	std	Y+14, r1	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    32b4:	42 e0       	ldi	r20, 0x02	; 2
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	be 01       	movw	r22, r28
    32ba:	63 5f       	subi	r22, 0xF3	; 243
    32bc:	7f 4f       	sbci	r23, 0xFF	; 255
    32be:	85 e2       	ldi	r24, 0x25	; 37
    32c0:	96 e2       	ldi	r25, 0x26	; 38
    32c2:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_ZN4CSPI4SendEPhj>
			}
		break;
    32c6:	91 c0       	rjmp	.+290    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    32c8:	6a e0       	ldi	r22, 0x0A	; 10
    32ca:	70 e0       	ldi	r23, 0x00	; 0
    32cc:	c7 01       	movw	r24, r14
    32ce:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    32d2:	8b c0       	rjmp	.+278    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    32d4:	42 e0       	ldi	r20, 0x02	; 2
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	61 e1       	ldi	r22, 0x11	; 17
    32da:	70 e0       	ldi	r23, 0x00	; 0
    32dc:	c7 01       	movw	r24, r14
    32de:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    32e2:	ff ef       	ldi	r31, 0xFF	; 255
    32e4:	21 ee       	ldi	r18, 0xE1	; 225
    32e6:	34 e0       	ldi	r19, 0x04	; 4
    32e8:	f1 50       	subi	r31, 0x01	; 1
    32ea:	20 40       	sbci	r18, 0x00	; 0
    32ec:	30 40       	sbci	r19, 0x00	; 0
    32ee:	e1 f7       	brne	.-8      	; 0x32e8 <_ZN16CLaserControlApp3RunEv+0xb62>
    32f0:	00 c0       	rjmp	.+0      	; 0x32f2 <_ZN16CLaserControlApp3RunEv+0xb6c>
    32f2:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    32f4:	42 e0       	ldi	r20, 0x02	; 2
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	62 e1       	ldi	r22, 0x12	; 18
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	c7 01       	movw	r24, r14
    32fe:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	91 ee       	ldi	r25, 0xE1	; 225
    3306:	a4 e0       	ldi	r26, 0x04	; 4
    3308:	81 50       	subi	r24, 0x01	; 1
    330a:	90 40       	sbci	r25, 0x00	; 0
    330c:	a0 40       	sbci	r26, 0x00	; 0
    330e:	e1 f7       	brne	.-8      	; 0x3308 <_ZN16CLaserControlApp3RunEv+0xb82>
    3310:	00 c0       	rjmp	.+0      	; 0x3312 <_ZN16CLaserControlApp3RunEv+0xb8c>
    3312:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    3314:	f7 01       	movw	r30, r14
    3316:	e0 5f       	subi	r30, 0xF0	; 240
    3318:	fe 4f       	sbci	r31, 0xFE	; 254
    331a:	20 81       	ld	r18, Z
    331c:	31 81       	ldd	r19, Z+1	; 0x01
    331e:	c9 01       	movw	r24, r18
    3320:	a0 e0       	ldi	r26, 0x00	; 0
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	90 51       	subi	r25, 0x10	; 16
    3326:	af 4f       	sbci	r26, 0xFF	; 255
    3328:	bf 4f       	sbci	r27, 0xFF	; 255
    332a:	22 27       	eor	r18, r18
    332c:	38 2f       	mov	r19, r24
    332e:	49 2f       	mov	r20, r25
    3330:	5a 2f       	mov	r21, r26
    3332:	00 e0       	ldi	r16, 0x00	; 0
    3334:	1c e0       	ldi	r17, 0x0C	; 12
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	71 e0       	ldi	r23, 0x01	; 1
    333a:	8c e0       	ldi	r24, 0x0C	; 12
    333c:	96 e2       	ldi	r25, 0x26	; 38
    333e:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    3342:	53 c0       	rjmp	.+166    	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
    3344:	bf ef       	ldi	r27, 0xFF	; 255
    3346:	e7 ea       	ldi	r30, 0xA7	; 167
    3348:	f1 e6       	ldi	r31, 0x61	; 97
    334a:	b1 50       	subi	r27, 0x01	; 1
    334c:	e0 40       	sbci	r30, 0x00	; 0
    334e:	f0 40       	sbci	r31, 0x00	; 0
    3350:	e1 f7       	brne	.-8      	; 0x334a <_ZN16CLaserControlApp3RunEv+0xbc4>
    3352:	00 c0       	rjmp	.+0      	; 0x3354 <_ZN16CLaserControlApp3RunEv+0xbce>
    3354:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    3356:	42 e0       	ldi	r20, 0x02	; 2
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	62 e1       	ldi	r22, 0x12	; 18
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	c7 01       	movw	r24, r14
    3360:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    3364:	f7 01       	movw	r30, r14
    3366:	ee 5e       	subi	r30, 0xEE	; 238
    3368:	fe 4f       	sbci	r31, 0xFE	; 254
    336a:	20 81       	ld	r18, Z
    336c:	31 81       	ldd	r19, Z+1	; 0x01
    336e:	32 97       	sbiw	r30, 0x02	; 2
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	28 0f       	add	r18, r24
    3376:	39 1f       	adc	r19, r25
    3378:	c9 01       	movw	r24, r18
    337a:	a0 e0       	ldi	r26, 0x00	; 0
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	90 51       	subi	r25, 0x10	; 16
    3380:	af 4f       	sbci	r26, 0xFF	; 255
    3382:	bf 4f       	sbci	r27, 0xFF	; 255
    3384:	22 27       	eor	r18, r18
    3386:	38 2f       	mov	r19, r24
    3388:	49 2f       	mov	r20, r25
    338a:	5a 2f       	mov	r21, r26
    338c:	00 e0       	ldi	r16, 0x00	; 0
    338e:	11 e0       	ldi	r17, 0x01	; 1
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	7d e0       	ldi	r23, 0x0D	; 13
    3394:	8c e0       	ldi	r24, 0x0C	; 12
    3396:	96 e2       	ldi	r25, 0x26	; 38
    3398:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    339c:	26 c0       	rjmp	.+76     	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    339e:	f7 01       	movw	r30, r14
    33a0:	ee 5e       	subi	r30, 0xEE	; 238
    33a2:	fe 4f       	sbci	r31, 0xFE	; 254
    33a4:	20 81       	ld	r18, Z
    33a6:	31 81       	ldd	r19, Z+1	; 0x01
    33a8:	32 97       	sbiw	r30, 0x02	; 2
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	28 0f       	add	r18, r24
    33b0:	39 1f       	adc	r19, r25
    33b2:	c9 01       	movw	r24, r18
    33b4:	a0 e0       	ldi	r26, 0x00	; 0
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	90 51       	subi	r25, 0x10	; 16
    33ba:	af 4f       	sbci	r26, 0xFF	; 255
    33bc:	bf 4f       	sbci	r27, 0xFF	; 255
    33be:	22 27       	eor	r18, r18
    33c0:	38 2f       	mov	r19, r24
    33c2:	49 2f       	mov	r20, r25
    33c4:	5a 2f       	mov	r21, r26
    33c6:	00 e0       	ldi	r16, 0x00	; 0
    33c8:	11 e0       	ldi	r17, 0x01	; 1
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	7d e0       	ldi	r23, 0x0D	; 13
    33ce:	8c e0       	ldi	r24, 0x0C	; 12
    33d0:	96 e2       	ldi	r25, 0x26	; 38
    33d2:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    33d6:	09 c0       	rjmp	.+18     	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    33d8:	8c e0       	ldi	r24, 0x0C	; 12
    33da:	96 e2       	ldi	r25, 0x26	; 38
    33dc:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    33e0:	04 c0       	rjmp	.+8      	; 0x33ea <_ZN16CLaserControlApp3RunEv+0xc64>
		default:
			Database.UnMap();
    33e2:	8c e0       	ldi	r24, 0x0C	; 12
    33e4:	96 e2       	ldi	r25, 0x26	; 38
    33e6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
			PIC_ID_last = PIC_ID;
			SetPictureId(PICID_WORK_ERROR1);
		}
#endif
	
	if (update)
    33ea:	d7 01       	movw	r26, r14
    33ec:	51 96       	adiw	r26, 0x11	; 17
    33ee:	8c 91       	ld	r24, X
    33f0:	88 23       	and	r24, r24
    33f2:	e1 f1       	breq	.+120    	; 0x346c <_ZN16CLaserControlApp3RunEv+0xce6>
	{		
		DGUS_LASERDIODE data;
		memcpy(&data, &laserDiodeData, sizeof(data));
    33f4:	f7 01       	movw	r30, r14
    33f6:	e0 51       	subi	r30, 0x10	; 16
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	8a e2       	ldi	r24, 0x2A	; 42
    33fc:	de 01       	movw	r26, r28
    33fe:	1d 96       	adiw	r26, 0x0d	; 13
    3400:	01 90       	ld	r0, Z+
    3402:	0d 92       	st	X+, r0
    3404:	8a 95       	dec	r24
    3406:	e1 f7       	brne	.-8      	; 0x3400 <_ZN16CLaserControlApp3RunEv+0xc7a>
		data.lasersettings.Energy = laserDiodeData.lasersettings.Energy + laserDiodeData.lasersettings.Energy / 5;
    3408:	f7 01       	movw	r30, r14
    340a:	e4 50       	subi	r30, 0x04	; 4
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	40 81       	ld	r20, Z
    3410:	51 81       	ldd	r21, Z+1	; 0x01
    3412:	9a 01       	movw	r18, r20
    3414:	ad ec       	ldi	r26, 0xCD	; 205
    3416:	bc ec       	ldi	r27, 0xCC	; 204
    3418:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    341c:	96 95       	lsr	r25
    341e:	87 95       	ror	r24
    3420:	96 95       	lsr	r25
    3422:	87 95       	ror	r24
    3424:	48 0f       	add	r20, r24
    3426:	59 1f       	adc	r21, r25
    3428:	49 8f       	std	Y+25, r20	; 0x19
    342a:	5a 8f       	std	Y+26, r21	; 0x1a
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&data, sizeof(DGUS_LASERDIODE));
    342c:	2a e2       	ldi	r18, 0x2A	; 42
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	ae 01       	movw	r20, r28
    3432:	43 5f       	subi	r20, 0xF3	; 243
    3434:	5f 4f       	sbci	r21, 0xFF	; 255
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	c7 01       	movw	r24, r14
    343c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    3440:	f7 01       	movw	r30, r14
    3442:	11 8a       	std	Z+17, r1	; 0x11
    3444:	13 c0       	rjmp	.+38     	; 0x346c <_ZN16CLaserControlApp3RunEv+0xce6>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	f7 01       	movw	r30, r14
    344c:	ec 5e       	subi	r30, 0xEC	; 236
    344e:	fe 4f       	sbci	r31, 0xFE	; 254
    3450:	80 83       	st	Z, r24
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	f5 c9       	rjmp	.-3094   	; 0x2840 <_ZN16CLaserControlApp3RunEv+0xba>
						break;
					}
					
					if (Profile == PROFILE_FAST)
					{
						if (laserDiodeData.lasersettings.FlushesLimit == 3) laserDiodeData.lasersettings.FlushesLimit = 0;
    3456:	03 97       	sbiw	r24, 0x03	; 3
    3458:	09 f0       	breq	.+2      	; 0x345c <_ZN16CLaserControlApp3RunEv+0xcd6>
    345a:	76 cb       	rjmp	.-2324   	; 0x2b48 <_ZN16CLaserControlApp3RunEv+0x3c2>
    345c:	70 cb       	rjmp	.-2336   	; 0x2b3e <_ZN16CLaserControlApp3RunEv+0x3b8>
						laserDiodeData.lasersettings.FlushesLimit = 4;
						update = true;
						break;
					}
					
					if (Profile == PROFILE_FAST)
    345e:	d7 01       	movw	r26, r14
    3460:	1e 96       	adiw	r26, 0x0e	; 14
    3462:	8c 91       	ld	r24, X
    3464:	84 30       	cpi	r24, 0x04	; 4
    3466:	09 f0       	breq	.+2      	; 0x346a <_ZN16CLaserControlApp3RunEv+0xce4>
    3468:	7b cb       	rjmp	.-2314   	; 0x2b60 <_ZN16CLaserControlApp3RunEv+0x3da>
    346a:	6e cb       	rjmp	.-2340   	; 0x2b48 <_ZN16CLaserControlApp3RunEv+0x3c2>
		memcpy(&data, &laserDiodeData, sizeof(data));
		data.lasersettings.Energy = laserDiodeData.lasersettings.Energy + laserDiodeData.lasersettings.Energy / 5;
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&data, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    346c:	ea 96       	adiw	r28, 0x3a	; 58
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	df 90       	pop	r13
    3480:	cf 90       	pop	r12
    3482:	bf 90       	pop	r11
    3484:	af 90       	pop	r10
    3486:	9f 90       	pop	r9
    3488:	8f 90       	pop	r8
    348a:	7f 90       	pop	r7
    348c:	6f 90       	pop	r6
    348e:	5f 90       	pop	r5
    3490:	4f 90       	pop	r4
    3492:	08 95       	ret

00003494 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
void CLaserControlApp::OnLaserTimer()
{
}

void CLaserControlApp::OnLaserTimerStop()
{			
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	ec 01       	movw	r28, r24
	if (Profile == PROFILE_SINGLE)
    34a2:	2e 85       	ldd	r18, Y+14	; 0x0e
    34a4:	21 30       	cpi	r18, 0x01	; 1
    34a6:	09 f5       	brne	.+66     	; 0x34ea <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x56>
	{
		StopLaser();
    34a8:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
		
		if (laserTimerDutyCyclems > 100)
    34ac:	ca 52       	subi	r28, 0x2A	; 42
    34ae:	df 4f       	sbci	r29, 0xFF	; 255
    34b0:	48 81       	ld	r20, Y
    34b2:	59 81       	ldd	r21, Y+1	; 0x01
    34b4:	45 36       	cpi	r20, 0x65	; 101
    34b6:	51 05       	cpc	r21, r1
    34b8:	50 f0       	brcs	.+20     	; 0x34ce <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x3a>
			player.SoundStart(500, 50, 0);
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	42 e3       	ldi	r20, 0x32	; 50
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	64 ef       	ldi	r22, 0xF4	; 244
    34c2:	71 e0       	ldi	r23, 0x01	; 1
    34c4:	84 ee       	ldi	r24, 0xE4	; 228
    34c6:	95 e2       	ldi	r25, 0x25	; 37
    34c8:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
    34cc:	09 c0       	rjmp	.+18     	; 0x34e0 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x4c>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    34ce:	56 95       	lsr	r21
    34d0:	47 95       	ror	r20
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	64 ef       	ldi	r22, 0xF4	; 244
    34d6:	71 e0       	ldi	r23, 0x01	; 1
    34d8:	84 ee       	ldi	r24, 0xE4	; 228
    34da:	95 e2       	ldi	r25, 0x25	; 37
    34dc:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    34e0:	84 ee       	ldi	r24, 0xE4	; 228
    34e2:	95 e2       	ldi	r25, 0x25	; 37
    34e4:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
		return;
    34e8:	25 c1       	rjmp	.+586    	; 0x3734 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x2a0>
	}
	
	laserCounter++;
    34ea:	fc 01       	movw	r30, r24
    34ec:	e6 52       	subi	r30, 0x26	; 38
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	80 81       	ld	r24, Z
    34f2:	91 81       	ldd	r25, Z+1	; 0x01
    34f4:	a2 81       	ldd	r26, Z+2	; 0x02
    34f6:	b3 81       	ldd	r27, Z+3	; 0x03
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	a1 1d       	adc	r26, r1
    34fc:	b1 1d       	adc	r27, r1
    34fe:	80 83       	st	Z, r24
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	a2 83       	std	Z+2, r26	; 0x02
    3504:	b3 83       	std	Z+3, r27	; 0x03
	laserCounterSession++;
    3506:	34 96       	adiw	r30, 0x04	; 4
    3508:	c0 80       	ld	r12, Z
    350a:	d1 80       	ldd	r13, Z+1	; 0x01
    350c:	e2 80       	ldd	r14, Z+2	; 0x02
    350e:	f3 80       	ldd	r15, Z+3	; 0x03
    3510:	8f ef       	ldi	r24, 0xFF	; 255
    3512:	c8 1a       	sub	r12, r24
    3514:	d8 0a       	sbc	r13, r24
    3516:	e8 0a       	sbc	r14, r24
    3518:	f8 0a       	sbc	r15, r24
    351a:	c0 82       	st	Z, r12
    351c:	d1 82       	std	Z+1, r13	; 0x01
    351e:	e2 82       	std	Z+2, r14	; 0x02
    3520:	f3 82       	std	Z+3, r15	; 0x03
	
	if (Profile == PROFILE_FAST)
    3522:	24 30       	cpi	r18, 0x04	; 4
    3524:	09 f0       	breq	.+2      	; 0x3528 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x94>
    3526:	96 c0       	rjmp	.+300    	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
	{
		laserLimitCnt ++;
    3528:	70 96       	adiw	r30, 0x10	; 16
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	80 83       	st	Z, r24
    3532:	91 83       	std	Z+1, r25	; 0x01
		if ((laserLimitMode == 0) && ((laserCounterSession%300) == 0) && (laserCounterSession != 0))
    3534:	32 97       	sbiw	r30, 0x02	; 2
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	89 2b       	or	r24, r25
    353c:	39 f5       	brne	.+78     	; 0x358c <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xf8>
    353e:	c7 01       	movw	r24, r14
    3540:	b6 01       	movw	r22, r12
    3542:	2c e2       	ldi	r18, 0x2C	; 44
    3544:	31 e0       	ldi	r19, 0x01	; 1
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    354e:	67 2b       	or	r22, r23
    3550:	68 2b       	or	r22, r24
    3552:	69 2b       	or	r22, r25
    3554:	09 f0       	breq	.+2      	; 0x3558 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xc4>
    3556:	7e c0       	rjmp	.+252    	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    3558:	cd 28       	or	r12, r13
    355a:	ce 28       	or	r12, r14
    355c:	cf 28       	or	r12, r15
    355e:	09 f4       	brne	.+2      	; 0x3562 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xce>
    3560:	79 c0       	rjmp	.+242    	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
		{
			laserLimitCnt = 0;
    3562:	fe 01       	movw	r30, r28
    3564:	e2 51       	subi	r30, 0x12	; 18
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	10 82       	st	Z, r1
    356a:	11 82       	std	Z+1, r1	; 0x01
			StopLaser();
    356c:	ce 01       	movw	r24, r28
    356e:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
			player.SoundStart(500, 1000, 0);
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	48 ee       	ldi	r20, 0xE8	; 232
    3576:	53 e0       	ldi	r21, 0x03	; 3
    3578:	64 ef       	ldi	r22, 0xF4	; 244
    357a:	71 e0       	ldi	r23, 0x01	; 1
    357c:	84 ee       	ldi	r24, 0xE4	; 228
    357e:	95 e2       	ldi	r25, 0x25	; 37
    3580:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    3584:	84 ee       	ldi	r24, 0xE4	; 228
    3586:	95 e2       	ldi	r25, 0x25	; 37
    3588:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
			//StartLaser();
		}
		
		if ((laserLimitMode == 1) && ((laserCounterSession%400) == 0) && (laserCounterSession != 0))
    358c:	fe 01       	movw	r30, r28
    358e:	e4 51       	subi	r30, 0x14	; 20
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	61 f5       	brne	.+88     	; 0x35f2 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x15e>
    359a:	3e 97       	sbiw	r30, 0x0e	; 14
    359c:	c0 80       	ld	r12, Z
    359e:	d1 80       	ldd	r13, Z+1	; 0x01
    35a0:	e2 80       	ldd	r14, Z+2	; 0x02
    35a2:	f3 80       	ldd	r15, Z+3	; 0x03
    35a4:	c7 01       	movw	r24, r14
    35a6:	b6 01       	movw	r22, r12
    35a8:	20 e9       	ldi	r18, 0x90	; 144
    35aa:	31 e0       	ldi	r19, 0x01	; 1
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    35b4:	67 2b       	or	r22, r23
    35b6:	68 2b       	or	r22, r24
    35b8:	69 2b       	or	r22, r25
    35ba:	09 f0       	breq	.+2      	; 0x35be <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x12a>
    35bc:	4b c0       	rjmp	.+150    	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    35be:	cd 28       	or	r12, r13
    35c0:	ce 28       	or	r12, r14
    35c2:	cf 28       	or	r12, r15
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x134>
    35c6:	46 c0       	rjmp	.+140    	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
		{
			laserLimitCnt = 0;
    35c8:	fe 01       	movw	r30, r28
    35ca:	e2 51       	subi	r30, 0x12	; 18
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	10 82       	st	Z, r1
    35d0:	11 82       	std	Z+1, r1	; 0x01
			StopLaser();
    35d2:	ce 01       	movw	r24, r28
    35d4:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
			player.SoundStart(500, 1000, 0);
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	48 ee       	ldi	r20, 0xE8	; 232
    35dc:	53 e0       	ldi	r21, 0x03	; 3
    35de:	64 ef       	ldi	r22, 0xF4	; 244
    35e0:	71 e0       	ldi	r23, 0x01	; 1
    35e2:	84 ee       	ldi	r24, 0xE4	; 228
    35e4:	95 e2       	ldi	r25, 0x25	; 37
    35e6:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    35ea:	84 ee       	ldi	r24, 0xE4	; 228
    35ec:	95 e2       	ldi	r25, 0x25	; 37
    35ee:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
			//StartLaser();
		}
		
		if ((laserLimitMode == 2) && ((laserCounterSession%500) == 0) && (laserCounterSession != 0))
    35f2:	fe 01       	movw	r30, r28
    35f4:	e4 51       	subi	r30, 0x14	; 20
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	02 97       	sbiw	r24, 0x02	; 2
    35fe:	51 f5       	brne	.+84     	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    3600:	3e 97       	sbiw	r30, 0x0e	; 14
    3602:	c0 80       	ld	r12, Z
    3604:	d1 80       	ldd	r13, Z+1	; 0x01
    3606:	e2 80       	ldd	r14, Z+2	; 0x02
    3608:	f3 80       	ldd	r15, Z+3	; 0x03
    360a:	c7 01       	movw	r24, r14
    360c:	b6 01       	movw	r22, r12
    360e:	24 ef       	ldi	r18, 0xF4	; 244
    3610:	31 e0       	ldi	r19, 0x01	; 1
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    361a:	67 2b       	or	r22, r23
    361c:	68 2b       	or	r22, r24
    361e:	69 2b       	or	r22, r25
    3620:	c9 f4       	brne	.+50     	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    3622:	cd 28       	or	r12, r13
    3624:	ce 28       	or	r12, r14
    3626:	cf 28       	or	r12, r15
    3628:	a9 f0       	breq	.+42     	; 0x3654 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
		{
			laserLimitCnt = 0;
    362a:	fe 01       	movw	r30, r28
    362c:	e2 51       	subi	r30, 0x12	; 18
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	10 82       	st	Z, r1
    3632:	11 82       	std	Z+1, r1	; 0x01
			StopLaser();
    3634:	ce 01       	movw	r24, r28
    3636:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
			player.SoundStart(500, 1000, 0);
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	48 ee       	ldi	r20, 0xE8	; 232
    363e:	53 e0       	ldi	r21, 0x03	; 3
    3640:	64 ef       	ldi	r22, 0xF4	; 244
    3642:	71 e0       	ldi	r23, 0x01	; 1
    3644:	84 ee       	ldi	r24, 0xE4	; 228
    3646:	95 e2       	ldi	r25, 0x25	; 37
    3648:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    364c:	84 ee       	ldi	r24, 0xE4	; 228
    364e:	95 e2       	ldi	r25, 0x25	; 37
    3650:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
			//StartLaser();
		}
	}
	
	if (Profile == PROFILE_MEDIUM)
    3654:	8e 85       	ldd	r24, Y+14	; 0x0e
    3656:	83 30       	cpi	r24, 0x03	; 3
    3658:	09 f0       	breq	.+2      	; 0x365c <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c8>
    365a:	4e c0       	rjmp	.+156    	; 0x36f8 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x264>
	{	
		if 	((laserMultiPulseState%2) == 0)
    365c:	fe 01       	movw	r30, r28
    365e:	ee 51       	subi	r30, 0x1E	; 30
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	80 81       	ld	r24, Z
    3664:	80 fd       	sbrc	r24, 0
    3666:	04 c0       	rjmp	.+8      	; 0x3670 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1dc>
			PORTF.OUTCLR = PIN0_bm;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    366e:	03 c0       	rjmp	.+6      	; 0x3676 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1e2>
		else
			PORTF.OUTSET = PIN0_bm;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if 	((laserMultiPulseState%2) == 0)
    3676:	fe 01       	movw	r30, r28
    3678:	ee 51       	subi	r30, 0x1E	; 30
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	80 81       	ld	r24, Z
    367e:	80 fd       	sbrc	r24, 0
    3680:	04 c0       	rjmp	.+8      	; 0x368a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1f6>
			PORTF.OUTCLR = PIN1_bm;
    3682:	82 e0       	ldi	r24, 0x02	; 2
    3684:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1fc>
		else
			PORTF.OUTSET = PIN1_bm;
    368a:	82 e0       	ldi	r24, 0x02	; 2
    368c:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if (laserMultiPulseState >= NUM_PULSES * 2) laserMultiPulseState = 0;
    3690:	fe 01       	movw	r30, r28
    3692:	ee 51       	subi	r30, 0x1E	; 30
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	91 81       	ldd	r25, Z+1	; 0x01
    369a:	04 97       	sbiw	r24, 0x04	; 4
    369c:	10 f0       	brcs	.+4      	; 0x36a2 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x20e>
    369e:	10 82       	st	Z, r1
    36a0:	11 82       	std	Z+1, r1	; 0x01
		TCF0.PERBUF = laserMultiPulsePeriod[laserMultiPulseState];
    36a2:	de 01       	movw	r26, r28
    36a4:	ae 51       	subi	r26, 0x1E	; 30
    36a6:	bf 4f       	sbci	r27, 0xFF	; 255
    36a8:	ed 91       	ld	r30, X+
    36aa:	fc 91       	ld	r31, X
    36ac:	11 97       	sbiw	r26, 0x01	; 1
    36ae:	ee 58       	subi	r30, 0x8E	; 142
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	ee 0f       	add	r30, r30
    36b4:	ff 1f       	adc	r31, r31
    36b6:	ec 0f       	add	r30, r28
    36b8:	fd 1f       	adc	r31, r29
    36ba:	80 81       	ld	r24, Z
    36bc:	91 81       	ldd	r25, Z+1	; 0x01
    36be:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    36c2:	90 93 37 0b 	sts	0x0B37, r25	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
		
		if (laserMultiPulseState == 3)
    36c6:	8d 91       	ld	r24, X+
    36c8:	9c 91       	ld	r25, X
    36ca:	03 97       	sbiw	r24, 0x03	; 3
    36cc:	69 f4       	brne	.+26     	; 0x36e8 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x254>
		{
			player.SoundStart(500, 100, 0);
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	44 e6       	ldi	r20, 0x64	; 100
    36d2:	50 e0       	ldi	r21, 0x00	; 0
    36d4:	64 ef       	ldi	r22, 0xF4	; 244
    36d6:	71 e0       	ldi	r23, 0x01	; 1
    36d8:	84 ee       	ldi	r24, 0xE4	; 228
    36da:	95 e2       	ldi	r25, 0x25	; 37
    36dc:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    36e0:	84 ee       	ldi	r24, 0xE4	; 228
    36e2:	95 e2       	ldi	r25, 0x25	; 37
    36e4:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
		}
		
		laserMultiPulseState++;
    36e8:	ce 51       	subi	r28, 0x1E	; 30
    36ea:	df 4f       	sbci	r29, 0xFF	; 255
    36ec:	88 81       	ld	r24, Y
    36ee:	99 81       	ldd	r25, Y+1	; 0x01
    36f0:	01 96       	adiw	r24, 0x01	; 1
    36f2:	88 83       	st	Y, r24
    36f4:	99 83       	std	Y+1, r25	; 0x01
    36f6:	1e c0       	rjmp	.+60     	; 0x3734 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x2a0>
	}
	else
	{
		if (laserTimerDutyCyclems > 100)
    36f8:	ca 52       	subi	r28, 0x2A	; 42
    36fa:	df 4f       	sbci	r29, 0xFF	; 255
    36fc:	48 81       	ld	r20, Y
    36fe:	59 81       	ldd	r21, Y+1	; 0x01
    3700:	45 36       	cpi	r20, 0x65	; 101
    3702:	51 05       	cpc	r21, r1
    3704:	50 f0       	brcs	.+20     	; 0x371a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x286>
			player.SoundStart(500, 50, 0);
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	42 e3       	ldi	r20, 0x32	; 50
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	64 ef       	ldi	r22, 0xF4	; 244
    370e:	71 e0       	ldi	r23, 0x01	; 1
    3710:	84 ee       	ldi	r24, 0xE4	; 228
    3712:	95 e2       	ldi	r25, 0x25	; 37
    3714:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
    3718:	09 c0       	rjmp	.+18     	; 0x372c <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x298>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    371a:	56 95       	lsr	r21
    371c:	47 95       	ror	r20
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	64 ef       	ldi	r22, 0xF4	; 244
    3722:	71 e0       	ldi	r23, 0x01	; 1
    3724:	84 ee       	ldi	r24, 0xE4	; 228
    3726:	95 e2       	ldi	r25, 0x25	; 37
    3728:	0e 94 3c 3a 	call	0x7478	; 0x7478 <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    372c:	84 ee       	ldi	r24, 0xE4	; 228
    372e:	95 e2       	ldi	r25, 0x25	; 37
    3730:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_ZN12CSoundPlayer9SoundStopEv>
	}
}
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	df 90       	pop	r13
    373e:	cf 90       	pop	r12
    3740:	08 95       	ret

00003742 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStopStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    3742:	0e 94 4a 1a 	call	0x3494	; 0x3494 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    3746:	08 95       	ret

00003748 <_ZN16CLaserControlApp10StartLaserEv>:
	
	return true;
}

void CLaserControlApp::StartLaser()
{
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	ec 01       	movw	r28, r24
	laserLimitCnt = 0;
    3752:	fc 01       	movw	r30, r24
    3754:	e2 51       	subi	r30, 0x12	; 18
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	10 82       	st	Z, r1
    375a:	11 82       	std	Z+1, r1	; 0x01
	if (Profile == PROFILE_MEDIUM)
    375c:	8e 85       	ldd	r24, Y+14	; 0x0e
    375e:	83 30       	cpi	r24, 0x03	; 3
    3760:	09 f0       	breq	.+2      	; 0x3764 <_ZN16CLaserControlApp10StartLaserEv+0x1c>
    3762:	44 c0       	rjmp	.+136    	; 0x37ec <_ZN16CLaserControlApp10StartLaserEv+0xa4>
	{
		laserTimer.Stop();
    3764:	8c e1       	ldi	r24, 0x1C	; 28
    3766:	96 e2       	ldi	r25, 0x26	; 38
    3768:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <_ZN7CTimerF4StopEv>
		laserMultiPulseState = 2;
    376c:	fe 01       	movw	r30, r28
    376e:	ee 51       	subi	r30, 0x1E	; 30
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	80 83       	st	Z, r24
    3778:	91 83       	std	Z+1, r25	; 0x01
		PORTF.OUTSET = PIN0_bm;
    377a:	e0 ea       	ldi	r30, 0xA0	; 160
    377c:	f6 e0       	ldi	r31, 0x06	; 6
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	85 83       	std	Z+5, r24	; 0x05
		PORTF.OUTSET = PIN1_bm;
    3782:	82 e0       	ldi	r24, 0x02	; 2
    3784:	85 83       	std	Z+5, r24	; 0x05
		laserTimer.SetCOMPA(laserMultiPulsePeriod[0]/2);
    3786:	8e 01       	movw	r16, r28
    3788:	0c 51       	subi	r16, 0x1C	; 28
    378a:	1f 4f       	sbci	r17, 0xFF	; 255
    378c:	f8 01       	movw	r30, r16
    378e:	60 81       	ld	r22, Z
    3790:	71 81       	ldd	r23, Z+1	; 0x01
    3792:	76 95       	lsr	r23
    3794:	67 95       	ror	r22
    3796:	8c e1       	ldi	r24, 0x1C	; 28
    3798:	96 e2       	ldi	r25, 0x26	; 38
    379a:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserMultiPulsePeriod[0]/2);
    379e:	f8 01       	movw	r30, r16
    37a0:	60 81       	ld	r22, Z
    37a2:	71 81       	ldd	r23, Z+1	; 0x01
    37a4:	76 95       	lsr	r23
    37a6:	67 95       	ror	r22
    37a8:	8c e1       	ldi	r24, 0x1C	; 28
    37aa:	96 e2       	ldi	r25, 0x26	; 38
    37ac:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <_ZN7CTimerF8SetCOMPBEj>
		TCF0.PERBUF = laserMultiPulsePeriod[1];
    37b0:	ca 51       	subi	r28, 0x1A	; 26
    37b2:	df 4f       	sbci	r29, 0xFF	; 255
    37b4:	88 81       	ld	r24, Y
    37b6:	99 81       	ldd	r25, Y+1	; 0x01
    37b8:	e0 e0       	ldi	r30, 0x00	; 0
    37ba:	fb e0       	ldi	r31, 0x0B	; 11
    37bc:	86 ab       	std	Z+54, r24	; 0x36
    37be:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserMultiPulsePeriod[1]/2;
    37c0:	88 81       	ld	r24, Y
    37c2:	99 81       	ldd	r25, Y+1	; 0x01
    37c4:	96 95       	lsr	r25
    37c6:	87 95       	ror	r24
    37c8:	80 af       	std	Z+56, r24	; 0x38
    37ca:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserMultiPulsePeriod[1]/2;
    37cc:	88 81       	ld	r24, Y
    37ce:	99 81       	ldd	r25, Y+1	; 0x01
    37d0:	96 95       	lsr	r25
    37d2:	87 95       	ror	r24
    37d4:	82 af       	std	Z+58, r24	; 0x3a
    37d6:	93 af       	std	Z+59, r25	; 0x3b
		TCF0.CNT = 0;
    37d8:	10 a2       	std	Z+32, r1	; 0x20
    37da:	11 a2       	std	Z+33, r1	; 0x21
		laserTimer.Start(laserMultiPulsePeriod[0]);
    37dc:	f8 01       	movw	r30, r16
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	8c e1       	ldi	r24, 0x1C	; 28
    37e4:	96 e2       	ldi	r25, 0x26	; 38
    37e6:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN7CTimerF5StartEj>
    37ea:	27 c0       	rjmp	.+78     	; 0x383a <_ZN16CLaserControlApp10StartLaserEv+0xf2>
	} else
	{
		TCF0.PERBUF = laserTimerPeriod;
    37ec:	8e 01       	movw	r16, r28
    37ee:	0e 52       	subi	r16, 0x2E	; 46
    37f0:	1f 4f       	sbci	r17, 0xFF	; 255
    37f2:	f8 01       	movw	r30, r16
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	e0 e0       	ldi	r30, 0x00	; 0
    37fa:	fb e0       	ldi	r31, 0x0B	; 11
    37fc:	86 ab       	std	Z+54, r24	; 0x36
    37fe:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserTimerDutyCycle;
    3800:	cc 52       	subi	r28, 0x2C	; 44
    3802:	df 4f       	sbci	r29, 0xFF	; 255
    3804:	88 81       	ld	r24, Y
    3806:	99 81       	ldd	r25, Y+1	; 0x01
    3808:	80 af       	std	Z+56, r24	; 0x38
    380a:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserTimerDutyCycle;
    380c:	88 81       	ld	r24, Y
    380e:	99 81       	ldd	r25, Y+1	; 0x01
    3810:	82 af       	std	Z+58, r24	; 0x3a
    3812:	93 af       	std	Z+59, r25	; 0x3b
		laserTimer.SetCOMPA(laserTimerDutyCycle);
    3814:	68 81       	ld	r22, Y
    3816:	79 81       	ldd	r23, Y+1	; 0x01
    3818:	8c e1       	ldi	r24, 0x1C	; 28
    381a:	96 e2       	ldi	r25, 0x26	; 38
    381c:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserTimerDutyCycle);
    3820:	68 81       	ld	r22, Y
    3822:	79 81       	ldd	r23, Y+1	; 0x01
    3824:	8c e1       	ldi	r24, 0x1C	; 28
    3826:	96 e2       	ldi	r25, 0x26	; 38
    3828:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <_ZN7CTimerF8SetCOMPBEj>
		//TCF0.CNT = 0;
		//laserTimer.ChannelReset(TIMER_CHANNEL_A);
		//laserTimer.ChannelReset(TIMER_CHANNEL_B);
		laserTimer.Start(laserTimerPeriod);
    382c:	f8 01       	movw	r30, r16
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	8c e1       	ldi	r24, 0x1C	; 28
    3834:	96 e2       	ldi	r25, 0x26	; 38
    3836:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <_ZN7CTimerF5StartEj>
	}
}
    383a:	df 91       	pop	r29
    383c:	cf 91       	pop	r28
    383e:	1f 91       	pop	r17
    3840:	0f 91       	pop	r16
    3842:	08 95       	ret

00003844 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    3848:	fc 01       	movw	r30, r24
    384a:	24 85       	ldd	r18, Z+12	; 0x0c
    384c:	35 85       	ldd	r19, Z+13	; 0x0d
    384e:	20 31       	cpi	r18, 0x10	; 16
    3850:	31 05       	cpc	r19, r1
    3852:	21 f0       	breq	.+8      	; 0x385c <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    3854:	20 32       	cpi	r18, 0x20	; 32
    3856:	31 05       	cpc	r19, r1
    3858:	09 f0       	breq	.+2      	; 0x385c <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    385a:	60 c0       	rjmp	.+192    	; 0x391c <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    385c:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    385e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3862:	80 fd       	sbrc	r24, 0
    3864:	51 c0       	rjmp	.+162    	; 0x3908 <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    3866:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <__data_end>
    386a:	81 11       	cpse	r24, r1
    386c:	57 c0       	rjmp	.+174    	; 0x391c <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    386e:	fe 01       	movw	r30, r28
    3870:	ea 5d       	subi	r30, 0xDA	; 218
    3872:	fe 4f       	sbci	r31, 0xFE	; 254
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	89 2b       	or	r24, r25
    387a:	09 f4       	brne	.+2      	; 0x387e <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    387c:	4b c0       	rjmp	.+150    	; 0x3914 <_ZN16CLaserControlApp6OnINT0Ev+0xd0>
    387e:	4e c0       	rjmp	.+156    	; 0x391c <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    3880:	8a e0       	ldi	r24, 0x0A	; 10
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	fe 01       	movw	r30, r28
    3886:	ea 5d       	subi	r30, 0xDA	; 218
    3888:	fe 4f       	sbci	r31, 0xFE	; 254
    388a:	80 83       	st	Z, r24
    388c:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    388e:	ec 54       	subi	r30, 0x4C	; 76
    3890:	f1 09       	sbc	r31, r1
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	a2 81       	ldd	r26, Z+2	; 0x02
    3898:	b3 81       	ldd	r27, Z+3	; 0x03
    389a:	01 96       	adiw	r24, 0x01	; 1
    389c:	a1 1d       	adc	r26, r1
    389e:	b1 1d       	adc	r27, r1
    38a0:	80 83       	st	Z, r24
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	a2 83       	std	Z+2, r26	; 0x02
    38a6:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    38a8:	34 96       	adiw	r30, 0x04	; 4
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	a2 81       	ldd	r26, Z+2	; 0x02
    38b0:	b3 81       	ldd	r27, Z+3	; 0x03
    38b2:	01 96       	adiw	r24, 0x01	; 1
    38b4:	a1 1d       	adc	r26, r1
    38b6:	b1 1d       	adc	r27, r1
    38b8:	80 83       	st	Z, r24
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	a2 83       	std	Z+2, r26	; 0x02
    38be:	b3 83       	std	Z+3, r27	; 0x03
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
						player.SoundStop();*/
					}
						
					if (laserTimerDutyCycle != 0)
    38c0:	fe 01       	movw	r30, r28
    38c2:	ec 52       	subi	r30, 0x2C	; 44
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	29 f0       	breq	.+10     	; 0x38d8 <_ZN16CLaserControlApp6OnINT0Ev+0x94>
						TCF0.CNT = laserTimerDutyCycle - 1;
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    38d4:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
						
					StartLaser();
    38d8:	ce 01       	movw	r24, r28
    38da:	0e 94 a4 1b 	call	0x3748	; 0x3748 <_ZN16CLaserControlApp10StartLaserEv>
					
					if (Profile == PROFILE_SINGLE)
    38de:	8e 85       	ldd	r24, Y+14	; 0x0e
    38e0:	81 30       	cpi	r24, 0x01	; 1
    38e2:	49 f4       	brne	.+18     	; 0x38f6 <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    38e4:	ff ef       	ldi	r31, 0xFF	; 255
    38e6:	27 e8       	ldi	r18, 0x87	; 135
    38e8:	83 e1       	ldi	r24, 0x13	; 19
    38ea:	f1 50       	subi	r31, 0x01	; 1
    38ec:	20 40       	sbci	r18, 0x00	; 0
    38ee:	80 40       	sbci	r24, 0x00	; 0
    38f0:	e1 f7       	brne	.-8      	; 0x38ea <_ZN16CLaserControlApp6OnINT0Ev+0xa6>
    38f2:	00 c0       	rjmp	.+0      	; 0x38f4 <_ZN16CLaserControlApp6OnINT0Ev+0xb0>
    38f4:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    38f6:	e0 e4       	ldi	r30, 0x40	; 64
    38f8:	f6 e0       	ldi	r31, 0x06	; 6
    38fa:	84 85       	ldd	r24, Z+12	; 0x0c
    38fc:	8e 7f       	andi	r24, 0xFE	; 254
    38fe:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <__data_end>
    3906:	0a c0       	rjmp	.+20     	; 0x391c <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    3908:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <__data_end>
				
				StopLaser();
    390c:	ce 01       	movw	r24, r28
    390e:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16CLaserControlApp9StopLaserEv>
    3912:	04 c0       	rjmp	.+8      	; 0x391c <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    3914:	8e 85       	ldd	r24, Y+14	; 0x0e
    3916:	81 30       	cpi	r24, 0x01	; 1
    3918:	99 f6       	brne	.-90     	; 0x38c0 <_ZN16CLaserControlApp6OnINT0Ev+0x7c>
    391a:	b2 cf       	rjmp	.-156    	; 0x3880 <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	08 95       	ret

00003922 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    3922:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN16CLaserControlApp6OnINT0Ev>
    3926:	08 95       	ret

00003928 <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    3928:	cf 92       	push	r12
    392a:	df 92       	push	r13
    392c:	ef 92       	push	r14
    392e:	ff 92       	push	r15
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	7c 01       	movw	r14, r24
    393a:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    393c:	41 15       	cp	r20, r1
    393e:	51 05       	cpc	r21, r1
    3940:	b1 f0       	breq	.+44     	; 0x396e <_Z11ConvertDataPvS_jj+0x46>
    3942:	6b 01       	movw	r12, r22
    3944:	c4 0e       	add	r12, r20
    3946:	d5 1e       	adc	r13, r21
    3948:	eb 01       	movw	r28, r22
    394a:	26 1b       	sub	r18, r22
    394c:	37 0b       	sbc	r19, r23
    394e:	c9 01       	movw	r24, r18
    3950:	8c 0f       	add	r24, r28
    3952:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    3954:	b8 01       	movw	r22, r16
    3956:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    395a:	fc 01       	movw	r30, r24
    395c:	41 e0       	ldi	r20, 0x01	; 1
    395e:	e4 27       	eor	r30, r20
    3960:	ee 0d       	add	r30, r14
    3962:	ff 1d       	adc	r31, r15
    3964:	89 91       	ld	r24, Y+
    3966:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    3968:	cc 15       	cp	r28, r12
    396a:	dd 05       	cpc	r29, r13
    396c:	81 f7       	brne	.-32     	; 0x394e <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	ff 90       	pop	r15
    3978:	ef 90       	pop	r14
    397a:	df 90       	pop	r13
    397c:	cf 90       	pop	r12
    397e:	08 95       	ret

00003980 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    3980:	68 17       	cp	r22, r24
    3982:	79 07       	cpc	r23, r25
    3984:	08 f4       	brcc	.+2      	; 0x3988 <_Z3minjj+0x8>
    3986:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    3988:	08 95       	ret

0000398a <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    398a:	86 17       	cp	r24, r22
    398c:	97 07       	cpc	r25, r23
    398e:	08 f4       	brcc	.+2      	; 0x3992 <_Z3maxjj+0x8>
    3990:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    3992:	08 95       	ret

00003994 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    3994:	98 27       	eor	r25, r24
    3996:	89 27       	eor	r24, r25
    3998:	98 27       	eor	r25, r24
    399a:	08 95       	ret

0000399c <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    399c:	9b 01       	movw	r18, r22
    399e:	bc 01       	movw	r22, r24
    39a0:	c9 01       	movw	r24, r18
}
    39a2:	08 95       	ret

000039a4 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    39a4:	08 95       	ret

000039a6 <_ZN4CSPID1Ev>:
    39a6:	08 95       	ret

000039a8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    39a8:	ef 92       	push	r14
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	ec 01       	movw	r28, r24
    39b4:	e0 e8       	ldi	r30, 0x80	; 128
    39b6:	f6 e0       	ldi	r31, 0x06	; 6
    39b8:	90 eb       	ldi	r25, 0xB0	; 176
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	80 ec       	ldi	r24, 0xC0	; 192
    39be:	84 8b       	std	Z+20, r24	; 0x14
    39c0:	85 8b       	std	Z+21, r24	; 0x15
    39c2:	87 8b       	std	Z+23, r24	; 0x17
    39c4:	95 83       	std	Z+5, r25	; 0x05
    39c6:	61 11       	cpse	r22, r1
    39c8:	02 c0       	rjmp	.+4      	; 0x39ce <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    39ca:	80 e4       	ldi	r24, 0x40	; 64
    39cc:	01 c0       	rjmp	.+2      	; 0x39d0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    39ce:	80 e5       	ldi	r24, 0x50	; 80
    39d0:	01 11       	cpse	r16, r1
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	01 c0       	rjmp	.+2      	; 0x39da <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    39d8:	30 e8       	ldi	r19, 0x80	; 128
    39da:	41 11       	cpse	r20, r1
    39dc:	02 c0       	rjmp	.+4      	; 0x39e2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	01 c0       	rjmp	.+2      	; 0x39e4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    39e2:	90 e2       	ldi	r25, 0x20	; 32
    39e4:	22 0f       	add	r18, r18
    39e6:	22 0f       	add	r18, r18
    39e8:	e2 2a       	or	r14, r18
    39ea:	e8 2a       	or	r14, r24
    39ec:	e3 2a       	or	r14, r19
    39ee:	e9 2a       	or	r14, r25
    39f0:	00 ec       	ldi	r16, 0xC0	; 192
    39f2:	1a e0       	ldi	r17, 0x0A	; 10
    39f4:	f8 01       	movw	r30, r16
    39f6:	e0 82       	st	Z, r14
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	91 e0       	ldi	r25, 0x01	; 1
    39fc:	0e 94 32 40 	call	0x8064	; 0x8064 <malloc>
    3a00:	88 83       	st	Y, r24
    3a02:	99 83       	std	Y+1, r25	; 0x01
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	f8 01       	movw	r30, r16
    3a08:	81 83       	std	Z+1, r24	; 0x01
    3a0a:	8d e4       	ldi	r24, 0x4D	; 77
    3a0c:	9d e1       	ldi	r25, 0x1D	; 29
    3a0e:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <InterruptFuncTable+0x72>
    3a12:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <InterruptFuncTable+0x73>
    3a16:	c0 93 2e 24 	sts	0x242E, r28	; 0x80242e <InterruptSenderTable+0x72>
    3a1a:	d0 93 2f 24 	sts	0x242F, r29	; 0x80242f <InterruptSenderTable+0x73>
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ef 90       	pop	r14
    3a28:	08 95       	ret

00003a2a <_ZN4CSPI4SendEPhj>:
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	ec 01       	movw	r28, r24
    3a30:	4a 83       	std	Y+2, r20	; 0x02
    3a32:	5b 83       	std	Y+3, r21	; 0x03
    3a34:	4c 83       	std	Y+4, r20	; 0x04
    3a36:	5d 83       	std	Y+5, r21	; 0x05
    3a38:	88 81       	ld	r24, Y
    3a3a:	99 81       	ldd	r25, Y+1	; 0x01
    3a3c:	0e 94 5f 41 	call	0x82be	; 0x82be <memcpy>
    3a40:	80 e1       	ldi	r24, 0x10	; 16
    3a42:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3a46:	88 81       	ld	r24, Y
    3a48:	99 81       	ldd	r25, Y+1	; 0x01
    3a4a:	4a 81       	ldd	r20, Y+2	; 0x02
    3a4c:	5b 81       	ldd	r21, Y+3	; 0x03
    3a4e:	9a 01       	movw	r18, r20
    3a50:	21 50       	subi	r18, 0x01	; 1
    3a52:	31 09       	sbc	r19, r1
    3a54:	2a 83       	std	Y+2, r18	; 0x02
    3a56:	3b 83       	std	Y+3, r19	; 0x03
    3a58:	fc 01       	movw	r30, r24
    3a5a:	e2 0f       	add	r30, r18
    3a5c:	f3 1f       	adc	r31, r19
    3a5e:	80 81       	ld	r24, Z
    3a60:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	08 95       	ret

00003a6a <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    3a6a:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	89 2b       	or	r24, r25
    3a72:	79 f0       	breq	.+30     	; 0x3a92 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    3a74:	40 81       	ld	r20, Z
    3a76:	51 81       	ldd	r21, Z+1	; 0x01
    3a78:	22 81       	ldd	r18, Z+2	; 0x02
    3a7a:	33 81       	ldd	r19, Z+3	; 0x03
    3a7c:	c9 01       	movw	r24, r18
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	82 83       	std	Z+2, r24	; 0x02
    3a82:	93 83       	std	Z+3, r25	; 0x03
    3a84:	fa 01       	movw	r30, r20
    3a86:	e8 0f       	add	r30, r24
    3a88:	f9 1f       	adc	r31, r25
    3a8a:	80 81       	ld	r24, Z
    3a8c:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    3a90:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    3a92:	80 e1       	ldi	r24, 0x10	; 16
    3a94:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3a98:	08 95       	ret

00003a9a <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    3a9a:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <_ZN4CSPI10OnTransmitEv>
    3a9e:	08 95       	ret

00003aa0 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    3aa0:	24 e9       	ldi	r18, 0x94	; 148
    3aa2:	31 e2       	ldi	r19, 0x21	; 33
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	20 83       	st	Z, r18
    3aa8:	31 83       	std	Z+1, r19	; 0x01
    3aaa:	08 95       	ret

00003aac <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    3aac:	08 95       	ret

00003aae <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    3aae:	28 eb       	ldi	r18, 0xB8	; 184
    3ab0:	31 e2       	ldi	r19, 0x21	; 33
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	20 83       	st	Z, r18
    3ab6:	31 83       	std	Z+1, r19	; 0x01
    3ab8:	08 95       	ret

00003aba <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    3aba:	08 95       	ret

00003abc <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    3abc:	26 ed       	ldi	r18, 0xD6	; 214
    3abe:	31 e2       	ldi	r19, 0x21	; 33
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	20 83       	st	Z, r18
    3ac4:	31 83       	std	Z+1, r19	; 0x01
    3ac6:	08 95       	ret

00003ac8 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    3ac8:	08 95       	ret

00003aca <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    3aca:	1f 92       	push	r1
    3acc:	0f 92       	push	r0
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	0f 92       	push	r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	0b b6       	in	r0, 0x3b	; 59
    3ad6:	0f 92       	push	r0
    3ad8:	2f 93       	push	r18
    3ada:	3f 93       	push	r19
    3adc:	4f 93       	push	r20
    3ade:	5f 93       	push	r21
    3ae0:	6f 93       	push	r22
    3ae2:	7f 93       	push	r23
    3ae4:	8f 93       	push	r24
    3ae6:	9f 93       	push	r25
    3ae8:	af 93       	push	r26
    3aea:	bf 93       	push	r27
    3aec:	ef 93       	push	r30
    3aee:	ff 93       	push	r31
    3af0:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <InterruptFuncTable+0x2>
    3af4:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <InterruptFuncTable+0x3>
    3af8:	30 97       	sbiw	r30, 0x00	; 0
    3afa:	29 f0       	breq	.+10     	; 0x3b06 <__vector_1+0x3c>
    3afc:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <InterruptSenderTable+0x2>
    3b00:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <InterruptSenderTable+0x3>
    3b04:	19 95       	eicall
    3b06:	ff 91       	pop	r31
    3b08:	ef 91       	pop	r30
    3b0a:	bf 91       	pop	r27
    3b0c:	af 91       	pop	r26
    3b0e:	9f 91       	pop	r25
    3b10:	8f 91       	pop	r24
    3b12:	7f 91       	pop	r23
    3b14:	6f 91       	pop	r22
    3b16:	5f 91       	pop	r21
    3b18:	4f 91       	pop	r20
    3b1a:	3f 91       	pop	r19
    3b1c:	2f 91       	pop	r18
    3b1e:	0f 90       	pop	r0
    3b20:	0b be       	out	0x3b, r0	; 59
    3b22:	0f 90       	pop	r0
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	0f 90       	pop	r0
    3b28:	1f 90       	pop	r1
    3b2a:	18 95       	reti

00003b2c <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    3b2c:	1f 92       	push	r1
    3b2e:	0f 92       	push	r0
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	0f 92       	push	r0
    3b34:	11 24       	eor	r1, r1
    3b36:	0b b6       	in	r0, 0x3b	; 59
    3b38:	0f 92       	push	r0
    3b3a:	2f 93       	push	r18
    3b3c:	3f 93       	push	r19
    3b3e:	4f 93       	push	r20
    3b40:	5f 93       	push	r21
    3b42:	6f 93       	push	r22
    3b44:	7f 93       	push	r23
    3b46:	8f 93       	push	r24
    3b48:	9f 93       	push	r25
    3b4a:	af 93       	push	r26
    3b4c:	bf 93       	push	r27
    3b4e:	ef 93       	push	r30
    3b50:	ff 93       	push	r31
    3b52:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <InterruptFuncTable+0x4>
    3b56:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <InterruptFuncTable+0x5>
    3b5a:	30 97       	sbiw	r30, 0x00	; 0
    3b5c:	29 f0       	breq	.+10     	; 0x3b68 <__vector_2+0x3c>
    3b5e:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <InterruptSenderTable+0x4>
    3b62:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <InterruptSenderTable+0x5>
    3b66:	19 95       	eicall
    3b68:	ff 91       	pop	r31
    3b6a:	ef 91       	pop	r30
    3b6c:	bf 91       	pop	r27
    3b6e:	af 91       	pop	r26
    3b70:	9f 91       	pop	r25
    3b72:	8f 91       	pop	r24
    3b74:	7f 91       	pop	r23
    3b76:	6f 91       	pop	r22
    3b78:	5f 91       	pop	r21
    3b7a:	4f 91       	pop	r20
    3b7c:	3f 91       	pop	r19
    3b7e:	2f 91       	pop	r18
    3b80:	0f 90       	pop	r0
    3b82:	0b be       	out	0x3b, r0	; 59
    3b84:	0f 90       	pop	r0
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	0f 90       	pop	r0
    3b8a:	1f 90       	pop	r1
    3b8c:	18 95       	reti

00003b8e <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    3b8e:	1f 92       	push	r1
    3b90:	0f 92       	push	r0
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	0f 92       	push	r0
    3b96:	11 24       	eor	r1, r1
    3b98:	0b b6       	in	r0, 0x3b	; 59
    3b9a:	0f 92       	push	r0
    3b9c:	2f 93       	push	r18
    3b9e:	3f 93       	push	r19
    3ba0:	4f 93       	push	r20
    3ba2:	5f 93       	push	r21
    3ba4:	6f 93       	push	r22
    3ba6:	7f 93       	push	r23
    3ba8:	8f 93       	push	r24
    3baa:	9f 93       	push	r25
    3bac:	af 93       	push	r26
    3bae:	bf 93       	push	r27
    3bb0:	ef 93       	push	r30
    3bb2:	ff 93       	push	r31
    3bb4:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <InterruptFuncTable+0x6>
    3bb8:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <InterruptFuncTable+0x7>
    3bbc:	30 97       	sbiw	r30, 0x00	; 0
    3bbe:	29 f0       	breq	.+10     	; 0x3bca <__vector_3+0x3c>
    3bc0:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <InterruptSenderTable+0x6>
    3bc4:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <InterruptSenderTable+0x7>
    3bc8:	19 95       	eicall
    3bca:	ff 91       	pop	r31
    3bcc:	ef 91       	pop	r30
    3bce:	bf 91       	pop	r27
    3bd0:	af 91       	pop	r26
    3bd2:	9f 91       	pop	r25
    3bd4:	8f 91       	pop	r24
    3bd6:	7f 91       	pop	r23
    3bd8:	6f 91       	pop	r22
    3bda:	5f 91       	pop	r21
    3bdc:	4f 91       	pop	r20
    3bde:	3f 91       	pop	r19
    3be0:	2f 91       	pop	r18
    3be2:	0f 90       	pop	r0
    3be4:	0b be       	out	0x3b, r0	; 59
    3be6:	0f 90       	pop	r0
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	0f 90       	pop	r0
    3bec:	1f 90       	pop	r1
    3bee:	18 95       	reti

00003bf0 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    3bf0:	1f 92       	push	r1
    3bf2:	0f 92       	push	r0
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	0f 92       	push	r0
    3bf8:	11 24       	eor	r1, r1
    3bfa:	0b b6       	in	r0, 0x3b	; 59
    3bfc:	0f 92       	push	r0
    3bfe:	2f 93       	push	r18
    3c00:	3f 93       	push	r19
    3c02:	4f 93       	push	r20
    3c04:	5f 93       	push	r21
    3c06:	6f 93       	push	r22
    3c08:	7f 93       	push	r23
    3c0a:	8f 93       	push	r24
    3c0c:	9f 93       	push	r25
    3c0e:	af 93       	push	r26
    3c10:	bf 93       	push	r27
    3c12:	ef 93       	push	r30
    3c14:	ff 93       	push	r31
    3c16:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <InterruptFuncTable+0x8>
    3c1a:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <InterruptFuncTable+0x9>
    3c1e:	30 97       	sbiw	r30, 0x00	; 0
    3c20:	29 f0       	breq	.+10     	; 0x3c2c <__vector_4+0x3c>
    3c22:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <InterruptSenderTable+0x8>
    3c26:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <InterruptSenderTable+0x9>
    3c2a:	19 95       	eicall
    3c2c:	ff 91       	pop	r31
    3c2e:	ef 91       	pop	r30
    3c30:	bf 91       	pop	r27
    3c32:	af 91       	pop	r26
    3c34:	9f 91       	pop	r25
    3c36:	8f 91       	pop	r24
    3c38:	7f 91       	pop	r23
    3c3a:	6f 91       	pop	r22
    3c3c:	5f 91       	pop	r21
    3c3e:	4f 91       	pop	r20
    3c40:	3f 91       	pop	r19
    3c42:	2f 91       	pop	r18
    3c44:	0f 90       	pop	r0
    3c46:	0b be       	out	0x3b, r0	; 59
    3c48:	0f 90       	pop	r0
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	0f 90       	pop	r0
    3c4e:	1f 90       	pop	r1
    3c50:	18 95       	reti

00003c52 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    3c52:	1f 92       	push	r1
    3c54:	0f 92       	push	r0
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	0f 92       	push	r0
    3c5a:	11 24       	eor	r1, r1
    3c5c:	0b b6       	in	r0, 0x3b	; 59
    3c5e:	0f 92       	push	r0
    3c60:	2f 93       	push	r18
    3c62:	3f 93       	push	r19
    3c64:	4f 93       	push	r20
    3c66:	5f 93       	push	r21
    3c68:	6f 93       	push	r22
    3c6a:	7f 93       	push	r23
    3c6c:	8f 93       	push	r24
    3c6e:	9f 93       	push	r25
    3c70:	af 93       	push	r26
    3c72:	bf 93       	push	r27
    3c74:	ef 93       	push	r30
    3c76:	ff 93       	push	r31
    3c78:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <InterruptFuncTable+0xa>
    3c7c:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <InterruptFuncTable+0xb>
    3c80:	30 97       	sbiw	r30, 0x00	; 0
    3c82:	29 f0       	breq	.+10     	; 0x3c8e <__vector_5+0x3c>
    3c84:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <InterruptSenderTable+0xa>
    3c88:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <InterruptSenderTable+0xb>
    3c8c:	19 95       	eicall
    3c8e:	ff 91       	pop	r31
    3c90:	ef 91       	pop	r30
    3c92:	bf 91       	pop	r27
    3c94:	af 91       	pop	r26
    3c96:	9f 91       	pop	r25
    3c98:	8f 91       	pop	r24
    3c9a:	7f 91       	pop	r23
    3c9c:	6f 91       	pop	r22
    3c9e:	5f 91       	pop	r21
    3ca0:	4f 91       	pop	r20
    3ca2:	3f 91       	pop	r19
    3ca4:	2f 91       	pop	r18
    3ca6:	0f 90       	pop	r0
    3ca8:	0b be       	out	0x3b, r0	; 59
    3caa:	0f 90       	pop	r0
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	0f 90       	pop	r0
    3cb0:	1f 90       	pop	r1
    3cb2:	18 95       	reti

00003cb4 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    3cb4:	1f 92       	push	r1
    3cb6:	0f 92       	push	r0
    3cb8:	0f b6       	in	r0, 0x3f	; 63
    3cba:	0f 92       	push	r0
    3cbc:	11 24       	eor	r1, r1
    3cbe:	0b b6       	in	r0, 0x3b	; 59
    3cc0:	0f 92       	push	r0
    3cc2:	2f 93       	push	r18
    3cc4:	3f 93       	push	r19
    3cc6:	4f 93       	push	r20
    3cc8:	5f 93       	push	r21
    3cca:	6f 93       	push	r22
    3ccc:	7f 93       	push	r23
    3cce:	8f 93       	push	r24
    3cd0:	9f 93       	push	r25
    3cd2:	af 93       	push	r26
    3cd4:	bf 93       	push	r27
    3cd6:	ef 93       	push	r30
    3cd8:	ff 93       	push	r31
    3cda:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <InterruptFuncTable+0xc>
    3cde:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <InterruptFuncTable+0xd>
    3ce2:	30 97       	sbiw	r30, 0x00	; 0
    3ce4:	29 f0       	breq	.+10     	; 0x3cf0 <__vector_6+0x3c>
    3ce6:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <InterruptSenderTable+0xc>
    3cea:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <InterruptSenderTable+0xd>
    3cee:	19 95       	eicall
    3cf0:	ff 91       	pop	r31
    3cf2:	ef 91       	pop	r30
    3cf4:	bf 91       	pop	r27
    3cf6:	af 91       	pop	r26
    3cf8:	9f 91       	pop	r25
    3cfa:	8f 91       	pop	r24
    3cfc:	7f 91       	pop	r23
    3cfe:	6f 91       	pop	r22
    3d00:	5f 91       	pop	r21
    3d02:	4f 91       	pop	r20
    3d04:	3f 91       	pop	r19
    3d06:	2f 91       	pop	r18
    3d08:	0f 90       	pop	r0
    3d0a:	0b be       	out	0x3b, r0	; 59
    3d0c:	0f 90       	pop	r0
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	0f 90       	pop	r0
    3d12:	1f 90       	pop	r1
    3d14:	18 95       	reti

00003d16 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    3d16:	1f 92       	push	r1
    3d18:	0f 92       	push	r0
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	0f 92       	push	r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	0b b6       	in	r0, 0x3b	; 59
    3d22:	0f 92       	push	r0
    3d24:	2f 93       	push	r18
    3d26:	3f 93       	push	r19
    3d28:	4f 93       	push	r20
    3d2a:	5f 93       	push	r21
    3d2c:	6f 93       	push	r22
    3d2e:	7f 93       	push	r23
    3d30:	8f 93       	push	r24
    3d32:	9f 93       	push	r25
    3d34:	af 93       	push	r26
    3d36:	bf 93       	push	r27
    3d38:	ef 93       	push	r30
    3d3a:	ff 93       	push	r31
    3d3c:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <InterruptFuncTable+0xe>
    3d40:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <InterruptFuncTable+0xf>
    3d44:	30 97       	sbiw	r30, 0x00	; 0
    3d46:	29 f0       	breq	.+10     	; 0x3d52 <__vector_7+0x3c>
    3d48:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <InterruptSenderTable+0xe>
    3d4c:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <InterruptSenderTable+0xf>
    3d50:	19 95       	eicall
    3d52:	ff 91       	pop	r31
    3d54:	ef 91       	pop	r30
    3d56:	bf 91       	pop	r27
    3d58:	af 91       	pop	r26
    3d5a:	9f 91       	pop	r25
    3d5c:	8f 91       	pop	r24
    3d5e:	7f 91       	pop	r23
    3d60:	6f 91       	pop	r22
    3d62:	5f 91       	pop	r21
    3d64:	4f 91       	pop	r20
    3d66:	3f 91       	pop	r19
    3d68:	2f 91       	pop	r18
    3d6a:	0f 90       	pop	r0
    3d6c:	0b be       	out	0x3b, r0	; 59
    3d6e:	0f 90       	pop	r0
    3d70:	0f be       	out	0x3f, r0	; 63
    3d72:	0f 90       	pop	r0
    3d74:	1f 90       	pop	r1
    3d76:	18 95       	reti

00003d78 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    3d78:	1f 92       	push	r1
    3d7a:	0f 92       	push	r0
    3d7c:	0f b6       	in	r0, 0x3f	; 63
    3d7e:	0f 92       	push	r0
    3d80:	11 24       	eor	r1, r1
    3d82:	0b b6       	in	r0, 0x3b	; 59
    3d84:	0f 92       	push	r0
    3d86:	2f 93       	push	r18
    3d88:	3f 93       	push	r19
    3d8a:	4f 93       	push	r20
    3d8c:	5f 93       	push	r21
    3d8e:	6f 93       	push	r22
    3d90:	7f 93       	push	r23
    3d92:	8f 93       	push	r24
    3d94:	9f 93       	push	r25
    3d96:	af 93       	push	r26
    3d98:	bf 93       	push	r27
    3d9a:	ef 93       	push	r30
    3d9c:	ff 93       	push	r31
    3d9e:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <InterruptFuncTable+0x10>
    3da2:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <InterruptFuncTable+0x11>
    3da6:	30 97       	sbiw	r30, 0x00	; 0
    3da8:	29 f0       	breq	.+10     	; 0x3db4 <__vector_8+0x3c>
    3daa:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <InterruptSenderTable+0x10>
    3dae:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <InterruptSenderTable+0x11>
    3db2:	19 95       	eicall
    3db4:	ff 91       	pop	r31
    3db6:	ef 91       	pop	r30
    3db8:	bf 91       	pop	r27
    3dba:	af 91       	pop	r26
    3dbc:	9f 91       	pop	r25
    3dbe:	8f 91       	pop	r24
    3dc0:	7f 91       	pop	r23
    3dc2:	6f 91       	pop	r22
    3dc4:	5f 91       	pop	r21
    3dc6:	4f 91       	pop	r20
    3dc8:	3f 91       	pop	r19
    3dca:	2f 91       	pop	r18
    3dcc:	0f 90       	pop	r0
    3dce:	0b be       	out	0x3b, r0	; 59
    3dd0:	0f 90       	pop	r0
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	0f 90       	pop	r0
    3dd6:	1f 90       	pop	r1
    3dd8:	18 95       	reti

00003dda <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    3dda:	1f 92       	push	r1
    3ddc:	0f 92       	push	r0
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	0f 92       	push	r0
    3de2:	11 24       	eor	r1, r1
    3de4:	0b b6       	in	r0, 0x3b	; 59
    3de6:	0f 92       	push	r0
    3de8:	2f 93       	push	r18
    3dea:	3f 93       	push	r19
    3dec:	4f 93       	push	r20
    3dee:	5f 93       	push	r21
    3df0:	6f 93       	push	r22
    3df2:	7f 93       	push	r23
    3df4:	8f 93       	push	r24
    3df6:	9f 93       	push	r25
    3df8:	af 93       	push	r26
    3dfa:	bf 93       	push	r27
    3dfc:	ef 93       	push	r30
    3dfe:	ff 93       	push	r31
    3e00:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <InterruptFuncTable+0x12>
    3e04:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <InterruptFuncTable+0x13>
    3e08:	30 97       	sbiw	r30, 0x00	; 0
    3e0a:	29 f0       	breq	.+10     	; 0x3e16 <__vector_9+0x3c>
    3e0c:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <InterruptSenderTable+0x12>
    3e10:	90 91 cf 23 	lds	r25, 0x23CF	; 0x8023cf <InterruptSenderTable+0x13>
    3e14:	19 95       	eicall
    3e16:	ff 91       	pop	r31
    3e18:	ef 91       	pop	r30
    3e1a:	bf 91       	pop	r27
    3e1c:	af 91       	pop	r26
    3e1e:	9f 91       	pop	r25
    3e20:	8f 91       	pop	r24
    3e22:	7f 91       	pop	r23
    3e24:	6f 91       	pop	r22
    3e26:	5f 91       	pop	r21
    3e28:	4f 91       	pop	r20
    3e2a:	3f 91       	pop	r19
    3e2c:	2f 91       	pop	r18
    3e2e:	0f 90       	pop	r0
    3e30:	0b be       	out	0x3b, r0	; 59
    3e32:	0f 90       	pop	r0
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	0f 90       	pop	r0
    3e38:	1f 90       	pop	r1
    3e3a:	18 95       	reti

00003e3c <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    3e3c:	1f 92       	push	r1
    3e3e:	0f 92       	push	r0
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	0f 92       	push	r0
    3e44:	11 24       	eor	r1, r1
    3e46:	0b b6       	in	r0, 0x3b	; 59
    3e48:	0f 92       	push	r0
    3e4a:	2f 93       	push	r18
    3e4c:	3f 93       	push	r19
    3e4e:	4f 93       	push	r20
    3e50:	5f 93       	push	r21
    3e52:	6f 93       	push	r22
    3e54:	7f 93       	push	r23
    3e56:	8f 93       	push	r24
    3e58:	9f 93       	push	r25
    3e5a:	af 93       	push	r26
    3e5c:	bf 93       	push	r27
    3e5e:	ef 93       	push	r30
    3e60:	ff 93       	push	r31
    3e62:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <InterruptFuncTable+0x14>
    3e66:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <InterruptFuncTable+0x15>
    3e6a:	30 97       	sbiw	r30, 0x00	; 0
    3e6c:	29 f0       	breq	.+10     	; 0x3e78 <__vector_10+0x3c>
    3e6e:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <InterruptSenderTable+0x14>
    3e72:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <InterruptSenderTable+0x15>
    3e76:	19 95       	eicall
    3e78:	ff 91       	pop	r31
    3e7a:	ef 91       	pop	r30
    3e7c:	bf 91       	pop	r27
    3e7e:	af 91       	pop	r26
    3e80:	9f 91       	pop	r25
    3e82:	8f 91       	pop	r24
    3e84:	7f 91       	pop	r23
    3e86:	6f 91       	pop	r22
    3e88:	5f 91       	pop	r21
    3e8a:	4f 91       	pop	r20
    3e8c:	3f 91       	pop	r19
    3e8e:	2f 91       	pop	r18
    3e90:	0f 90       	pop	r0
    3e92:	0b be       	out	0x3b, r0	; 59
    3e94:	0f 90       	pop	r0
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	0f 90       	pop	r0
    3e9a:	1f 90       	pop	r1
    3e9c:	18 95       	reti

00003e9e <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    3e9e:	1f 92       	push	r1
    3ea0:	0f 92       	push	r0
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	0f 92       	push	r0
    3ea6:	11 24       	eor	r1, r1
    3ea8:	0b b6       	in	r0, 0x3b	; 59
    3eaa:	0f 92       	push	r0
    3eac:	2f 93       	push	r18
    3eae:	3f 93       	push	r19
    3eb0:	4f 93       	push	r20
    3eb2:	5f 93       	push	r21
    3eb4:	6f 93       	push	r22
    3eb6:	7f 93       	push	r23
    3eb8:	8f 93       	push	r24
    3eba:	9f 93       	push	r25
    3ebc:	af 93       	push	r26
    3ebe:	bf 93       	push	r27
    3ec0:	ef 93       	push	r30
    3ec2:	ff 93       	push	r31
    3ec4:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <InterruptFuncTable+0x16>
    3ec8:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <InterruptFuncTable+0x17>
    3ecc:	30 97       	sbiw	r30, 0x00	; 0
    3ece:	29 f0       	breq	.+10     	; 0x3eda <__vector_11+0x3c>
    3ed0:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <InterruptSenderTable+0x16>
    3ed4:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <InterruptSenderTable+0x17>
    3ed8:	19 95       	eicall
    3eda:	ff 91       	pop	r31
    3edc:	ef 91       	pop	r30
    3ede:	bf 91       	pop	r27
    3ee0:	af 91       	pop	r26
    3ee2:	9f 91       	pop	r25
    3ee4:	8f 91       	pop	r24
    3ee6:	7f 91       	pop	r23
    3ee8:	6f 91       	pop	r22
    3eea:	5f 91       	pop	r21
    3eec:	4f 91       	pop	r20
    3eee:	3f 91       	pop	r19
    3ef0:	2f 91       	pop	r18
    3ef2:	0f 90       	pop	r0
    3ef4:	0b be       	out	0x3b, r0	; 59
    3ef6:	0f 90       	pop	r0
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	0f 90       	pop	r0
    3efc:	1f 90       	pop	r1
    3efe:	18 95       	reti

00003f00 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    3f00:	1f 92       	push	r1
    3f02:	0f 92       	push	r0
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	0f 92       	push	r0
    3f08:	11 24       	eor	r1, r1
    3f0a:	0b b6       	in	r0, 0x3b	; 59
    3f0c:	0f 92       	push	r0
    3f0e:	2f 93       	push	r18
    3f10:	3f 93       	push	r19
    3f12:	4f 93       	push	r20
    3f14:	5f 93       	push	r21
    3f16:	6f 93       	push	r22
    3f18:	7f 93       	push	r23
    3f1a:	8f 93       	push	r24
    3f1c:	9f 93       	push	r25
    3f1e:	af 93       	push	r26
    3f20:	bf 93       	push	r27
    3f22:	ef 93       	push	r30
    3f24:	ff 93       	push	r31
    3f26:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <InterruptFuncTable+0x18>
    3f2a:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <InterruptFuncTable+0x19>
    3f2e:	30 97       	sbiw	r30, 0x00	; 0
    3f30:	29 f0       	breq	.+10     	; 0x3f3c <__vector_12+0x3c>
    3f32:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <InterruptSenderTable+0x18>
    3f36:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <InterruptSenderTable+0x19>
    3f3a:	19 95       	eicall
    3f3c:	ff 91       	pop	r31
    3f3e:	ef 91       	pop	r30
    3f40:	bf 91       	pop	r27
    3f42:	af 91       	pop	r26
    3f44:	9f 91       	pop	r25
    3f46:	8f 91       	pop	r24
    3f48:	7f 91       	pop	r23
    3f4a:	6f 91       	pop	r22
    3f4c:	5f 91       	pop	r21
    3f4e:	4f 91       	pop	r20
    3f50:	3f 91       	pop	r19
    3f52:	2f 91       	pop	r18
    3f54:	0f 90       	pop	r0
    3f56:	0b be       	out	0x3b, r0	; 59
    3f58:	0f 90       	pop	r0
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	0f 90       	pop	r0
    3f5e:	1f 90       	pop	r1
    3f60:	18 95       	reti

00003f62 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    3f62:	1f 92       	push	r1
    3f64:	0f 92       	push	r0
    3f66:	0f b6       	in	r0, 0x3f	; 63
    3f68:	0f 92       	push	r0
    3f6a:	11 24       	eor	r1, r1
    3f6c:	0b b6       	in	r0, 0x3b	; 59
    3f6e:	0f 92       	push	r0
    3f70:	2f 93       	push	r18
    3f72:	3f 93       	push	r19
    3f74:	4f 93       	push	r20
    3f76:	5f 93       	push	r21
    3f78:	6f 93       	push	r22
    3f7a:	7f 93       	push	r23
    3f7c:	8f 93       	push	r24
    3f7e:	9f 93       	push	r25
    3f80:	af 93       	push	r26
    3f82:	bf 93       	push	r27
    3f84:	ef 93       	push	r30
    3f86:	ff 93       	push	r31
    3f88:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <InterruptFuncTable+0x1a>
    3f8c:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <InterruptFuncTable+0x1b>
    3f90:	30 97       	sbiw	r30, 0x00	; 0
    3f92:	29 f0       	breq	.+10     	; 0x3f9e <__vector_13+0x3c>
    3f94:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <InterruptSenderTable+0x1a>
    3f98:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <InterruptSenderTable+0x1b>
    3f9c:	19 95       	eicall
    3f9e:	ff 91       	pop	r31
    3fa0:	ef 91       	pop	r30
    3fa2:	bf 91       	pop	r27
    3fa4:	af 91       	pop	r26
    3fa6:	9f 91       	pop	r25
    3fa8:	8f 91       	pop	r24
    3faa:	7f 91       	pop	r23
    3fac:	6f 91       	pop	r22
    3fae:	5f 91       	pop	r21
    3fb0:	4f 91       	pop	r20
    3fb2:	3f 91       	pop	r19
    3fb4:	2f 91       	pop	r18
    3fb6:	0f 90       	pop	r0
    3fb8:	0b be       	out	0x3b, r0	; 59
    3fba:	0f 90       	pop	r0
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	0f 90       	pop	r0
    3fc0:	1f 90       	pop	r1
    3fc2:	18 95       	reti

00003fc4 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    3fc4:	1f 92       	push	r1
    3fc6:	0f 92       	push	r0
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	0f 92       	push	r0
    3fcc:	11 24       	eor	r1, r1
    3fce:	0b b6       	in	r0, 0x3b	; 59
    3fd0:	0f 92       	push	r0
    3fd2:	2f 93       	push	r18
    3fd4:	3f 93       	push	r19
    3fd6:	4f 93       	push	r20
    3fd8:	5f 93       	push	r21
    3fda:	6f 93       	push	r22
    3fdc:	7f 93       	push	r23
    3fde:	8f 93       	push	r24
    3fe0:	9f 93       	push	r25
    3fe2:	af 93       	push	r26
    3fe4:	bf 93       	push	r27
    3fe6:	ef 93       	push	r30
    3fe8:	ff 93       	push	r31
    3fea:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <InterruptFuncTable+0x1c>
    3fee:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <InterruptFuncTable+0x1d>
    3ff2:	30 97       	sbiw	r30, 0x00	; 0
    3ff4:	29 f0       	breq	.+10     	; 0x4000 <__stack+0x1>
    3ff6:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <InterruptSenderTable+0x1c>
    3ffa:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <InterruptSenderTable+0x1d>
    3ffe:	19 95       	eicall
    4000:	ff 91       	pop	r31
    4002:	ef 91       	pop	r30
    4004:	bf 91       	pop	r27
    4006:	af 91       	pop	r26
    4008:	9f 91       	pop	r25
    400a:	8f 91       	pop	r24
    400c:	7f 91       	pop	r23
    400e:	6f 91       	pop	r22
    4010:	5f 91       	pop	r21
    4012:	4f 91       	pop	r20
    4014:	3f 91       	pop	r19
    4016:	2f 91       	pop	r18
    4018:	0f 90       	pop	r0
    401a:	0b be       	out	0x3b, r0	; 59
    401c:	0f 90       	pop	r0
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	0f 90       	pop	r0
    4022:	1f 90       	pop	r1
    4024:	18 95       	reti

00004026 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    4026:	1f 92       	push	r1
    4028:	0f 92       	push	r0
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	0f 92       	push	r0
    402e:	11 24       	eor	r1, r1
    4030:	0b b6       	in	r0, 0x3b	; 59
    4032:	0f 92       	push	r0
    4034:	2f 93       	push	r18
    4036:	3f 93       	push	r19
    4038:	4f 93       	push	r20
    403a:	5f 93       	push	r21
    403c:	6f 93       	push	r22
    403e:	7f 93       	push	r23
    4040:	8f 93       	push	r24
    4042:	9f 93       	push	r25
    4044:	af 93       	push	r26
    4046:	bf 93       	push	r27
    4048:	ef 93       	push	r30
    404a:	ff 93       	push	r31
    404c:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <InterruptFuncTable+0x1e>
    4050:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <InterruptFuncTable+0x1f>
    4054:	30 97       	sbiw	r30, 0x00	; 0
    4056:	29 f0       	breq	.+10     	; 0x4062 <__vector_15+0x3c>
    4058:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <InterruptSenderTable+0x1e>
    405c:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <InterruptSenderTable+0x1f>
    4060:	19 95       	eicall
    4062:	ff 91       	pop	r31
    4064:	ef 91       	pop	r30
    4066:	bf 91       	pop	r27
    4068:	af 91       	pop	r26
    406a:	9f 91       	pop	r25
    406c:	8f 91       	pop	r24
    406e:	7f 91       	pop	r23
    4070:	6f 91       	pop	r22
    4072:	5f 91       	pop	r21
    4074:	4f 91       	pop	r20
    4076:	3f 91       	pop	r19
    4078:	2f 91       	pop	r18
    407a:	0f 90       	pop	r0
    407c:	0b be       	out	0x3b, r0	; 59
    407e:	0f 90       	pop	r0
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	0f 90       	pop	r0
    4084:	1f 90       	pop	r1
    4086:	18 95       	reti

00004088 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    4088:	1f 92       	push	r1
    408a:	0f 92       	push	r0
    408c:	0f b6       	in	r0, 0x3f	; 63
    408e:	0f 92       	push	r0
    4090:	11 24       	eor	r1, r1
    4092:	0b b6       	in	r0, 0x3b	; 59
    4094:	0f 92       	push	r0
    4096:	2f 93       	push	r18
    4098:	3f 93       	push	r19
    409a:	4f 93       	push	r20
    409c:	5f 93       	push	r21
    409e:	6f 93       	push	r22
    40a0:	7f 93       	push	r23
    40a2:	8f 93       	push	r24
    40a4:	9f 93       	push	r25
    40a6:	af 93       	push	r26
    40a8:	bf 93       	push	r27
    40aa:	ef 93       	push	r30
    40ac:	ff 93       	push	r31
    40ae:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <InterruptFuncTable+0x20>
    40b2:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <InterruptFuncTable+0x21>
    40b6:	30 97       	sbiw	r30, 0x00	; 0
    40b8:	29 f0       	breq	.+10     	; 0x40c4 <__vector_16+0x3c>
    40ba:	80 91 dc 23 	lds	r24, 0x23DC	; 0x8023dc <InterruptSenderTable+0x20>
    40be:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <InterruptSenderTable+0x21>
    40c2:	19 95       	eicall
    40c4:	ff 91       	pop	r31
    40c6:	ef 91       	pop	r30
    40c8:	bf 91       	pop	r27
    40ca:	af 91       	pop	r26
    40cc:	9f 91       	pop	r25
    40ce:	8f 91       	pop	r24
    40d0:	7f 91       	pop	r23
    40d2:	6f 91       	pop	r22
    40d4:	5f 91       	pop	r21
    40d6:	4f 91       	pop	r20
    40d8:	3f 91       	pop	r19
    40da:	2f 91       	pop	r18
    40dc:	0f 90       	pop	r0
    40de:	0b be       	out	0x3b, r0	; 59
    40e0:	0f 90       	pop	r0
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	0f 90       	pop	r0
    40e6:	1f 90       	pop	r1
    40e8:	18 95       	reti

000040ea <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    40ea:	1f 92       	push	r1
    40ec:	0f 92       	push	r0
    40ee:	0f b6       	in	r0, 0x3f	; 63
    40f0:	0f 92       	push	r0
    40f2:	11 24       	eor	r1, r1
    40f4:	0b b6       	in	r0, 0x3b	; 59
    40f6:	0f 92       	push	r0
    40f8:	2f 93       	push	r18
    40fa:	3f 93       	push	r19
    40fc:	4f 93       	push	r20
    40fe:	5f 93       	push	r21
    4100:	6f 93       	push	r22
    4102:	7f 93       	push	r23
    4104:	8f 93       	push	r24
    4106:	9f 93       	push	r25
    4108:	af 93       	push	r26
    410a:	bf 93       	push	r27
    410c:	ef 93       	push	r30
    410e:	ff 93       	push	r31
    4110:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <InterruptFuncTable+0x22>
    4114:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <InterruptFuncTable+0x23>
    4118:	30 97       	sbiw	r30, 0x00	; 0
    411a:	29 f0       	breq	.+10     	; 0x4126 <__vector_17+0x3c>
    411c:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <InterruptSenderTable+0x22>
    4120:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <InterruptSenderTable+0x23>
    4124:	19 95       	eicall
    4126:	ff 91       	pop	r31
    4128:	ef 91       	pop	r30
    412a:	bf 91       	pop	r27
    412c:	af 91       	pop	r26
    412e:	9f 91       	pop	r25
    4130:	8f 91       	pop	r24
    4132:	7f 91       	pop	r23
    4134:	6f 91       	pop	r22
    4136:	5f 91       	pop	r21
    4138:	4f 91       	pop	r20
    413a:	3f 91       	pop	r19
    413c:	2f 91       	pop	r18
    413e:	0f 90       	pop	r0
    4140:	0b be       	out	0x3b, r0	; 59
    4142:	0f 90       	pop	r0
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	0f 90       	pop	r0
    4148:	1f 90       	pop	r1
    414a:	18 95       	reti

0000414c <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    414c:	1f 92       	push	r1
    414e:	0f 92       	push	r0
    4150:	0f b6       	in	r0, 0x3f	; 63
    4152:	0f 92       	push	r0
    4154:	11 24       	eor	r1, r1
    4156:	0b b6       	in	r0, 0x3b	; 59
    4158:	0f 92       	push	r0
    415a:	2f 93       	push	r18
    415c:	3f 93       	push	r19
    415e:	4f 93       	push	r20
    4160:	5f 93       	push	r21
    4162:	6f 93       	push	r22
    4164:	7f 93       	push	r23
    4166:	8f 93       	push	r24
    4168:	9f 93       	push	r25
    416a:	af 93       	push	r26
    416c:	bf 93       	push	r27
    416e:	ef 93       	push	r30
    4170:	ff 93       	push	r31
    4172:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <InterruptFuncTable+0x24>
    4176:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <InterruptFuncTable+0x25>
    417a:	30 97       	sbiw	r30, 0x00	; 0
    417c:	29 f0       	breq	.+10     	; 0x4188 <__vector_18+0x3c>
    417e:	80 91 e0 23 	lds	r24, 0x23E0	; 0x8023e0 <InterruptSenderTable+0x24>
    4182:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <InterruptSenderTable+0x25>
    4186:	19 95       	eicall
    4188:	ff 91       	pop	r31
    418a:	ef 91       	pop	r30
    418c:	bf 91       	pop	r27
    418e:	af 91       	pop	r26
    4190:	9f 91       	pop	r25
    4192:	8f 91       	pop	r24
    4194:	7f 91       	pop	r23
    4196:	6f 91       	pop	r22
    4198:	5f 91       	pop	r21
    419a:	4f 91       	pop	r20
    419c:	3f 91       	pop	r19
    419e:	2f 91       	pop	r18
    41a0:	0f 90       	pop	r0
    41a2:	0b be       	out	0x3b, r0	; 59
    41a4:	0f 90       	pop	r0
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	0f 90       	pop	r0
    41aa:	1f 90       	pop	r1
    41ac:	18 95       	reti

000041ae <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    41ae:	1f 92       	push	r1
    41b0:	0f 92       	push	r0
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	0f 92       	push	r0
    41b6:	11 24       	eor	r1, r1
    41b8:	0b b6       	in	r0, 0x3b	; 59
    41ba:	0f 92       	push	r0
    41bc:	2f 93       	push	r18
    41be:	3f 93       	push	r19
    41c0:	4f 93       	push	r20
    41c2:	5f 93       	push	r21
    41c4:	6f 93       	push	r22
    41c6:	7f 93       	push	r23
    41c8:	8f 93       	push	r24
    41ca:	9f 93       	push	r25
    41cc:	af 93       	push	r26
    41ce:	bf 93       	push	r27
    41d0:	ef 93       	push	r30
    41d2:	ff 93       	push	r31
    41d4:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <InterruptFuncTable+0x26>
    41d8:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <InterruptFuncTable+0x27>
    41dc:	30 97       	sbiw	r30, 0x00	; 0
    41de:	29 f0       	breq	.+10     	; 0x41ea <__vector_19+0x3c>
    41e0:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <InterruptSenderTable+0x26>
    41e4:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <InterruptSenderTable+0x27>
    41e8:	19 95       	eicall
    41ea:	ff 91       	pop	r31
    41ec:	ef 91       	pop	r30
    41ee:	bf 91       	pop	r27
    41f0:	af 91       	pop	r26
    41f2:	9f 91       	pop	r25
    41f4:	8f 91       	pop	r24
    41f6:	7f 91       	pop	r23
    41f8:	6f 91       	pop	r22
    41fa:	5f 91       	pop	r21
    41fc:	4f 91       	pop	r20
    41fe:	3f 91       	pop	r19
    4200:	2f 91       	pop	r18
    4202:	0f 90       	pop	r0
    4204:	0b be       	out	0x3b, r0	; 59
    4206:	0f 90       	pop	r0
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	0f 90       	pop	r0
    420c:	1f 90       	pop	r1
    420e:	18 95       	reti

00004210 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    4210:	1f 92       	push	r1
    4212:	0f 92       	push	r0
    4214:	0f b6       	in	r0, 0x3f	; 63
    4216:	0f 92       	push	r0
    4218:	11 24       	eor	r1, r1
    421a:	0b b6       	in	r0, 0x3b	; 59
    421c:	0f 92       	push	r0
    421e:	2f 93       	push	r18
    4220:	3f 93       	push	r19
    4222:	4f 93       	push	r20
    4224:	5f 93       	push	r21
    4226:	6f 93       	push	r22
    4228:	7f 93       	push	r23
    422a:	8f 93       	push	r24
    422c:	9f 93       	push	r25
    422e:	af 93       	push	r26
    4230:	bf 93       	push	r27
    4232:	ef 93       	push	r30
    4234:	ff 93       	push	r31
    4236:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <InterruptFuncTable+0x28>
    423a:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <InterruptFuncTable+0x29>
    423e:	30 97       	sbiw	r30, 0x00	; 0
    4240:	29 f0       	breq	.+10     	; 0x424c <__vector_20+0x3c>
    4242:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <InterruptSenderTable+0x28>
    4246:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <InterruptSenderTable+0x29>
    424a:	19 95       	eicall
    424c:	ff 91       	pop	r31
    424e:	ef 91       	pop	r30
    4250:	bf 91       	pop	r27
    4252:	af 91       	pop	r26
    4254:	9f 91       	pop	r25
    4256:	8f 91       	pop	r24
    4258:	7f 91       	pop	r23
    425a:	6f 91       	pop	r22
    425c:	5f 91       	pop	r21
    425e:	4f 91       	pop	r20
    4260:	3f 91       	pop	r19
    4262:	2f 91       	pop	r18
    4264:	0f 90       	pop	r0
    4266:	0b be       	out	0x3b, r0	; 59
    4268:	0f 90       	pop	r0
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	0f 90       	pop	r0
    426e:	1f 90       	pop	r1
    4270:	18 95       	reti

00004272 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    4272:	1f 92       	push	r1
    4274:	0f 92       	push	r0
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	0f 92       	push	r0
    427a:	11 24       	eor	r1, r1
    427c:	0b b6       	in	r0, 0x3b	; 59
    427e:	0f 92       	push	r0
    4280:	2f 93       	push	r18
    4282:	3f 93       	push	r19
    4284:	4f 93       	push	r20
    4286:	5f 93       	push	r21
    4288:	6f 93       	push	r22
    428a:	7f 93       	push	r23
    428c:	8f 93       	push	r24
    428e:	9f 93       	push	r25
    4290:	af 93       	push	r26
    4292:	bf 93       	push	r27
    4294:	ef 93       	push	r30
    4296:	ff 93       	push	r31
    4298:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <InterruptFuncTable+0x2a>
    429c:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <InterruptFuncTable+0x2b>
    42a0:	30 97       	sbiw	r30, 0x00	; 0
    42a2:	29 f0       	breq	.+10     	; 0x42ae <__vector_21+0x3c>
    42a4:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <InterruptSenderTable+0x2a>
    42a8:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <InterruptSenderTable+0x2b>
    42ac:	19 95       	eicall
    42ae:	ff 91       	pop	r31
    42b0:	ef 91       	pop	r30
    42b2:	bf 91       	pop	r27
    42b4:	af 91       	pop	r26
    42b6:	9f 91       	pop	r25
    42b8:	8f 91       	pop	r24
    42ba:	7f 91       	pop	r23
    42bc:	6f 91       	pop	r22
    42be:	5f 91       	pop	r21
    42c0:	4f 91       	pop	r20
    42c2:	3f 91       	pop	r19
    42c4:	2f 91       	pop	r18
    42c6:	0f 90       	pop	r0
    42c8:	0b be       	out	0x3b, r0	; 59
    42ca:	0f 90       	pop	r0
    42cc:	0f be       	out	0x3f, r0	; 63
    42ce:	0f 90       	pop	r0
    42d0:	1f 90       	pop	r1
    42d2:	18 95       	reti

000042d4 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    42d4:	1f 92       	push	r1
    42d6:	0f 92       	push	r0
    42d8:	0f b6       	in	r0, 0x3f	; 63
    42da:	0f 92       	push	r0
    42dc:	11 24       	eor	r1, r1
    42de:	0b b6       	in	r0, 0x3b	; 59
    42e0:	0f 92       	push	r0
    42e2:	2f 93       	push	r18
    42e4:	3f 93       	push	r19
    42e6:	4f 93       	push	r20
    42e8:	5f 93       	push	r21
    42ea:	6f 93       	push	r22
    42ec:	7f 93       	push	r23
    42ee:	8f 93       	push	r24
    42f0:	9f 93       	push	r25
    42f2:	af 93       	push	r26
    42f4:	bf 93       	push	r27
    42f6:	ef 93       	push	r30
    42f8:	ff 93       	push	r31
    42fa:	e0 91 f2 22 	lds	r30, 0x22F2	; 0x8022f2 <InterruptFuncTable+0x2c>
    42fe:	f0 91 f3 22 	lds	r31, 0x22F3	; 0x8022f3 <InterruptFuncTable+0x2d>
    4302:	30 97       	sbiw	r30, 0x00	; 0
    4304:	29 f0       	breq	.+10     	; 0x4310 <__vector_22+0x3c>
    4306:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <InterruptSenderTable+0x2c>
    430a:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <InterruptSenderTable+0x2d>
    430e:	19 95       	eicall
    4310:	ff 91       	pop	r31
    4312:	ef 91       	pop	r30
    4314:	bf 91       	pop	r27
    4316:	af 91       	pop	r26
    4318:	9f 91       	pop	r25
    431a:	8f 91       	pop	r24
    431c:	7f 91       	pop	r23
    431e:	6f 91       	pop	r22
    4320:	5f 91       	pop	r21
    4322:	4f 91       	pop	r20
    4324:	3f 91       	pop	r19
    4326:	2f 91       	pop	r18
    4328:	0f 90       	pop	r0
    432a:	0b be       	out	0x3b, r0	; 59
    432c:	0f 90       	pop	r0
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	0f 90       	pop	r0
    4332:	1f 90       	pop	r1
    4334:	18 95       	reti

00004336 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    4336:	1f 92       	push	r1
    4338:	0f 92       	push	r0
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	0f 92       	push	r0
    433e:	11 24       	eor	r1, r1
    4340:	0b b6       	in	r0, 0x3b	; 59
    4342:	0f 92       	push	r0
    4344:	2f 93       	push	r18
    4346:	3f 93       	push	r19
    4348:	4f 93       	push	r20
    434a:	5f 93       	push	r21
    434c:	6f 93       	push	r22
    434e:	7f 93       	push	r23
    4350:	8f 93       	push	r24
    4352:	9f 93       	push	r25
    4354:	af 93       	push	r26
    4356:	bf 93       	push	r27
    4358:	ef 93       	push	r30
    435a:	ff 93       	push	r31
    435c:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <InterruptFuncTable+0x2e>
    4360:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <InterruptFuncTable+0x2f>
    4364:	30 97       	sbiw	r30, 0x00	; 0
    4366:	29 f0       	breq	.+10     	; 0x4372 <__vector_23+0x3c>
    4368:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <InterruptSenderTable+0x2e>
    436c:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <InterruptSenderTable+0x2f>
    4370:	19 95       	eicall
    4372:	ff 91       	pop	r31
    4374:	ef 91       	pop	r30
    4376:	bf 91       	pop	r27
    4378:	af 91       	pop	r26
    437a:	9f 91       	pop	r25
    437c:	8f 91       	pop	r24
    437e:	7f 91       	pop	r23
    4380:	6f 91       	pop	r22
    4382:	5f 91       	pop	r21
    4384:	4f 91       	pop	r20
    4386:	3f 91       	pop	r19
    4388:	2f 91       	pop	r18
    438a:	0f 90       	pop	r0
    438c:	0b be       	out	0x3b, r0	; 59
    438e:	0f 90       	pop	r0
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	0f 90       	pop	r0
    4394:	1f 90       	pop	r1
    4396:	18 95       	reti

00004398 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    4398:	1f 92       	push	r1
    439a:	0f 92       	push	r0
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	0f 92       	push	r0
    43a0:	11 24       	eor	r1, r1
    43a2:	0b b6       	in	r0, 0x3b	; 59
    43a4:	0f 92       	push	r0
    43a6:	2f 93       	push	r18
    43a8:	3f 93       	push	r19
    43aa:	4f 93       	push	r20
    43ac:	5f 93       	push	r21
    43ae:	6f 93       	push	r22
    43b0:	7f 93       	push	r23
    43b2:	8f 93       	push	r24
    43b4:	9f 93       	push	r25
    43b6:	af 93       	push	r26
    43b8:	bf 93       	push	r27
    43ba:	ef 93       	push	r30
    43bc:	ff 93       	push	r31
    43be:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <InterruptFuncTable+0x30>
    43c2:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <InterruptFuncTable+0x31>
    43c6:	30 97       	sbiw	r30, 0x00	; 0
    43c8:	29 f0       	breq	.+10     	; 0x43d4 <__vector_24+0x3c>
    43ca:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <InterruptSenderTable+0x30>
    43ce:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <InterruptSenderTable+0x31>
    43d2:	19 95       	eicall
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 90       	pop	r0
    43ee:	0b be       	out	0x3b, r0	; 59
    43f0:	0f 90       	pop	r0
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	0f 90       	pop	r0
    43f6:	1f 90       	pop	r1
    43f8:	18 95       	reti

000043fa <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    43fa:	1f 92       	push	r1
    43fc:	0f 92       	push	r0
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	0f 92       	push	r0
    4402:	11 24       	eor	r1, r1
    4404:	0b b6       	in	r0, 0x3b	; 59
    4406:	0f 92       	push	r0
    4408:	2f 93       	push	r18
    440a:	3f 93       	push	r19
    440c:	4f 93       	push	r20
    440e:	5f 93       	push	r21
    4410:	6f 93       	push	r22
    4412:	7f 93       	push	r23
    4414:	8f 93       	push	r24
    4416:	9f 93       	push	r25
    4418:	af 93       	push	r26
    441a:	bf 93       	push	r27
    441c:	ef 93       	push	r30
    441e:	ff 93       	push	r31
    4420:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <InterruptFuncTable+0x32>
    4424:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <InterruptFuncTable+0x33>
    4428:	30 97       	sbiw	r30, 0x00	; 0
    442a:	29 f0       	breq	.+10     	; 0x4436 <__vector_25+0x3c>
    442c:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <InterruptSenderTable+0x32>
    4430:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <InterruptSenderTable+0x33>
    4434:	19 95       	eicall
    4436:	ff 91       	pop	r31
    4438:	ef 91       	pop	r30
    443a:	bf 91       	pop	r27
    443c:	af 91       	pop	r26
    443e:	9f 91       	pop	r25
    4440:	8f 91       	pop	r24
    4442:	7f 91       	pop	r23
    4444:	6f 91       	pop	r22
    4446:	5f 91       	pop	r21
    4448:	4f 91       	pop	r20
    444a:	3f 91       	pop	r19
    444c:	2f 91       	pop	r18
    444e:	0f 90       	pop	r0
    4450:	0b be       	out	0x3b, r0	; 59
    4452:	0f 90       	pop	r0
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	0f 90       	pop	r0
    4458:	1f 90       	pop	r1
    445a:	18 95       	reti

0000445c <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    445c:	1f 92       	push	r1
    445e:	0f 92       	push	r0
    4460:	0f b6       	in	r0, 0x3f	; 63
    4462:	0f 92       	push	r0
    4464:	11 24       	eor	r1, r1
    4466:	0b b6       	in	r0, 0x3b	; 59
    4468:	0f 92       	push	r0
    446a:	2f 93       	push	r18
    446c:	3f 93       	push	r19
    446e:	4f 93       	push	r20
    4470:	5f 93       	push	r21
    4472:	6f 93       	push	r22
    4474:	7f 93       	push	r23
    4476:	8f 93       	push	r24
    4478:	9f 93       	push	r25
    447a:	af 93       	push	r26
    447c:	bf 93       	push	r27
    447e:	ef 93       	push	r30
    4480:	ff 93       	push	r31
    4482:	e0 91 fa 22 	lds	r30, 0x22FA	; 0x8022fa <InterruptFuncTable+0x34>
    4486:	f0 91 fb 22 	lds	r31, 0x22FB	; 0x8022fb <InterruptFuncTable+0x35>
    448a:	30 97       	sbiw	r30, 0x00	; 0
    448c:	29 f0       	breq	.+10     	; 0x4498 <__vector_26+0x3c>
    448e:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <InterruptSenderTable+0x34>
    4492:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <InterruptSenderTable+0x35>
    4496:	19 95       	eicall
    4498:	ff 91       	pop	r31
    449a:	ef 91       	pop	r30
    449c:	bf 91       	pop	r27
    449e:	af 91       	pop	r26
    44a0:	9f 91       	pop	r25
    44a2:	8f 91       	pop	r24
    44a4:	7f 91       	pop	r23
    44a6:	6f 91       	pop	r22
    44a8:	5f 91       	pop	r21
    44aa:	4f 91       	pop	r20
    44ac:	3f 91       	pop	r19
    44ae:	2f 91       	pop	r18
    44b0:	0f 90       	pop	r0
    44b2:	0b be       	out	0x3b, r0	; 59
    44b4:	0f 90       	pop	r0
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	0f 90       	pop	r0
    44ba:	1f 90       	pop	r1
    44bc:	18 95       	reti

000044be <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    44be:	1f 92       	push	r1
    44c0:	0f 92       	push	r0
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	0f 92       	push	r0
    44c6:	11 24       	eor	r1, r1
    44c8:	0b b6       	in	r0, 0x3b	; 59
    44ca:	0f 92       	push	r0
    44cc:	2f 93       	push	r18
    44ce:	3f 93       	push	r19
    44d0:	4f 93       	push	r20
    44d2:	5f 93       	push	r21
    44d4:	6f 93       	push	r22
    44d6:	7f 93       	push	r23
    44d8:	8f 93       	push	r24
    44da:	9f 93       	push	r25
    44dc:	af 93       	push	r26
    44de:	bf 93       	push	r27
    44e0:	ef 93       	push	r30
    44e2:	ff 93       	push	r31
    44e4:	e0 91 fc 22 	lds	r30, 0x22FC	; 0x8022fc <InterruptFuncTable+0x36>
    44e8:	f0 91 fd 22 	lds	r31, 0x22FD	; 0x8022fd <InterruptFuncTable+0x37>
    44ec:	30 97       	sbiw	r30, 0x00	; 0
    44ee:	29 f0       	breq	.+10     	; 0x44fa <__vector_27+0x3c>
    44f0:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <InterruptSenderTable+0x36>
    44f4:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <InterruptSenderTable+0x37>
    44f8:	19 95       	eicall
    44fa:	ff 91       	pop	r31
    44fc:	ef 91       	pop	r30
    44fe:	bf 91       	pop	r27
    4500:	af 91       	pop	r26
    4502:	9f 91       	pop	r25
    4504:	8f 91       	pop	r24
    4506:	7f 91       	pop	r23
    4508:	6f 91       	pop	r22
    450a:	5f 91       	pop	r21
    450c:	4f 91       	pop	r20
    450e:	3f 91       	pop	r19
    4510:	2f 91       	pop	r18
    4512:	0f 90       	pop	r0
    4514:	0b be       	out	0x3b, r0	; 59
    4516:	0f 90       	pop	r0
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	0f 90       	pop	r0
    451c:	1f 90       	pop	r1
    451e:	18 95       	reti

00004520 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    4520:	1f 92       	push	r1
    4522:	0f 92       	push	r0
    4524:	0f b6       	in	r0, 0x3f	; 63
    4526:	0f 92       	push	r0
    4528:	11 24       	eor	r1, r1
    452a:	0b b6       	in	r0, 0x3b	; 59
    452c:	0f 92       	push	r0
    452e:	2f 93       	push	r18
    4530:	3f 93       	push	r19
    4532:	4f 93       	push	r20
    4534:	5f 93       	push	r21
    4536:	6f 93       	push	r22
    4538:	7f 93       	push	r23
    453a:	8f 93       	push	r24
    453c:	9f 93       	push	r25
    453e:	af 93       	push	r26
    4540:	bf 93       	push	r27
    4542:	ef 93       	push	r30
    4544:	ff 93       	push	r31
    4546:	e0 91 fe 22 	lds	r30, 0x22FE	; 0x8022fe <InterruptFuncTable+0x38>
    454a:	f0 91 ff 22 	lds	r31, 0x22FF	; 0x8022ff <InterruptFuncTable+0x39>
    454e:	30 97       	sbiw	r30, 0x00	; 0
    4550:	29 f0       	breq	.+10     	; 0x455c <__vector_28+0x3c>
    4552:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <InterruptSenderTable+0x38>
    4556:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <InterruptSenderTable+0x39>
    455a:	19 95       	eicall
    455c:	ff 91       	pop	r31
    455e:	ef 91       	pop	r30
    4560:	bf 91       	pop	r27
    4562:	af 91       	pop	r26
    4564:	9f 91       	pop	r25
    4566:	8f 91       	pop	r24
    4568:	7f 91       	pop	r23
    456a:	6f 91       	pop	r22
    456c:	5f 91       	pop	r21
    456e:	4f 91       	pop	r20
    4570:	3f 91       	pop	r19
    4572:	2f 91       	pop	r18
    4574:	0f 90       	pop	r0
    4576:	0b be       	out	0x3b, r0	; 59
    4578:	0f 90       	pop	r0
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	0f 90       	pop	r0
    457e:	1f 90       	pop	r1
    4580:	18 95       	reti

00004582 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    4582:	1f 92       	push	r1
    4584:	0f 92       	push	r0
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	0f 92       	push	r0
    458a:	11 24       	eor	r1, r1
    458c:	0b b6       	in	r0, 0x3b	; 59
    458e:	0f 92       	push	r0
    4590:	2f 93       	push	r18
    4592:	3f 93       	push	r19
    4594:	4f 93       	push	r20
    4596:	5f 93       	push	r21
    4598:	6f 93       	push	r22
    459a:	7f 93       	push	r23
    459c:	8f 93       	push	r24
    459e:	9f 93       	push	r25
    45a0:	af 93       	push	r26
    45a2:	bf 93       	push	r27
    45a4:	ef 93       	push	r30
    45a6:	ff 93       	push	r31
    45a8:	e0 91 00 23 	lds	r30, 0x2300	; 0x802300 <InterruptFuncTable+0x3a>
    45ac:	f0 91 01 23 	lds	r31, 0x2301	; 0x802301 <InterruptFuncTable+0x3b>
    45b0:	30 97       	sbiw	r30, 0x00	; 0
    45b2:	29 f0       	breq	.+10     	; 0x45be <__vector_29+0x3c>
    45b4:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <InterruptSenderTable+0x3a>
    45b8:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <InterruptSenderTable+0x3b>
    45bc:	19 95       	eicall
    45be:	ff 91       	pop	r31
    45c0:	ef 91       	pop	r30
    45c2:	bf 91       	pop	r27
    45c4:	af 91       	pop	r26
    45c6:	9f 91       	pop	r25
    45c8:	8f 91       	pop	r24
    45ca:	7f 91       	pop	r23
    45cc:	6f 91       	pop	r22
    45ce:	5f 91       	pop	r21
    45d0:	4f 91       	pop	r20
    45d2:	3f 91       	pop	r19
    45d4:	2f 91       	pop	r18
    45d6:	0f 90       	pop	r0
    45d8:	0b be       	out	0x3b, r0	; 59
    45da:	0f 90       	pop	r0
    45dc:	0f be       	out	0x3f, r0	; 63
    45de:	0f 90       	pop	r0
    45e0:	1f 90       	pop	r1
    45e2:	18 95       	reti

000045e4 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    45e4:	1f 92       	push	r1
    45e6:	0f 92       	push	r0
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	0f 92       	push	r0
    45ec:	11 24       	eor	r1, r1
    45ee:	0b b6       	in	r0, 0x3b	; 59
    45f0:	0f 92       	push	r0
    45f2:	2f 93       	push	r18
    45f4:	3f 93       	push	r19
    45f6:	4f 93       	push	r20
    45f8:	5f 93       	push	r21
    45fa:	6f 93       	push	r22
    45fc:	7f 93       	push	r23
    45fe:	8f 93       	push	r24
    4600:	9f 93       	push	r25
    4602:	af 93       	push	r26
    4604:	bf 93       	push	r27
    4606:	ef 93       	push	r30
    4608:	ff 93       	push	r31
    460a:	e0 91 02 23 	lds	r30, 0x2302	; 0x802302 <InterruptFuncTable+0x3c>
    460e:	f0 91 03 23 	lds	r31, 0x2303	; 0x802303 <InterruptFuncTable+0x3d>
    4612:	30 97       	sbiw	r30, 0x00	; 0
    4614:	29 f0       	breq	.+10     	; 0x4620 <__vector_30+0x3c>
    4616:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <InterruptSenderTable+0x3c>
    461a:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <InterruptSenderTable+0x3d>
    461e:	19 95       	eicall
    4620:	ff 91       	pop	r31
    4622:	ef 91       	pop	r30
    4624:	bf 91       	pop	r27
    4626:	af 91       	pop	r26
    4628:	9f 91       	pop	r25
    462a:	8f 91       	pop	r24
    462c:	7f 91       	pop	r23
    462e:	6f 91       	pop	r22
    4630:	5f 91       	pop	r21
    4632:	4f 91       	pop	r20
    4634:	3f 91       	pop	r19
    4636:	2f 91       	pop	r18
    4638:	0f 90       	pop	r0
    463a:	0b be       	out	0x3b, r0	; 59
    463c:	0f 90       	pop	r0
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	0f 90       	pop	r0
    4642:	1f 90       	pop	r1
    4644:	18 95       	reti

00004646 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    4646:	1f 92       	push	r1
    4648:	0f 92       	push	r0
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	0f 92       	push	r0
    464e:	11 24       	eor	r1, r1
    4650:	0b b6       	in	r0, 0x3b	; 59
    4652:	0f 92       	push	r0
    4654:	2f 93       	push	r18
    4656:	3f 93       	push	r19
    4658:	4f 93       	push	r20
    465a:	5f 93       	push	r21
    465c:	6f 93       	push	r22
    465e:	7f 93       	push	r23
    4660:	8f 93       	push	r24
    4662:	9f 93       	push	r25
    4664:	af 93       	push	r26
    4666:	bf 93       	push	r27
    4668:	ef 93       	push	r30
    466a:	ff 93       	push	r31
    466c:	e0 91 04 23 	lds	r30, 0x2304	; 0x802304 <InterruptFuncTable+0x3e>
    4670:	f0 91 05 23 	lds	r31, 0x2305	; 0x802305 <InterruptFuncTable+0x3f>
    4674:	30 97       	sbiw	r30, 0x00	; 0
    4676:	29 f0       	breq	.+10     	; 0x4682 <__vector_31+0x3c>
    4678:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <InterruptSenderTable+0x3e>
    467c:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <InterruptSenderTable+0x3f>
    4680:	19 95       	eicall
    4682:	ff 91       	pop	r31
    4684:	ef 91       	pop	r30
    4686:	bf 91       	pop	r27
    4688:	af 91       	pop	r26
    468a:	9f 91       	pop	r25
    468c:	8f 91       	pop	r24
    468e:	7f 91       	pop	r23
    4690:	6f 91       	pop	r22
    4692:	5f 91       	pop	r21
    4694:	4f 91       	pop	r20
    4696:	3f 91       	pop	r19
    4698:	2f 91       	pop	r18
    469a:	0f 90       	pop	r0
    469c:	0b be       	out	0x3b, r0	; 59
    469e:	0f 90       	pop	r0
    46a0:	0f be       	out	0x3f, r0	; 63
    46a2:	0f 90       	pop	r0
    46a4:	1f 90       	pop	r1
    46a6:	18 95       	reti

000046a8 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    46a8:	1f 92       	push	r1
    46aa:	0f 92       	push	r0
    46ac:	0f b6       	in	r0, 0x3f	; 63
    46ae:	0f 92       	push	r0
    46b0:	11 24       	eor	r1, r1
    46b2:	0b b6       	in	r0, 0x3b	; 59
    46b4:	0f 92       	push	r0
    46b6:	2f 93       	push	r18
    46b8:	3f 93       	push	r19
    46ba:	4f 93       	push	r20
    46bc:	5f 93       	push	r21
    46be:	6f 93       	push	r22
    46c0:	7f 93       	push	r23
    46c2:	8f 93       	push	r24
    46c4:	9f 93       	push	r25
    46c6:	af 93       	push	r26
    46c8:	bf 93       	push	r27
    46ca:	ef 93       	push	r30
    46cc:	ff 93       	push	r31
    46ce:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <InterruptFuncTable+0x40>
    46d2:	f0 91 07 23 	lds	r31, 0x2307	; 0x802307 <InterruptFuncTable+0x41>
    46d6:	30 97       	sbiw	r30, 0x00	; 0
    46d8:	29 f0       	breq	.+10     	; 0x46e4 <__vector_32+0x3c>
    46da:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <InterruptSenderTable+0x40>
    46de:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <InterruptSenderTable+0x41>
    46e2:	19 95       	eicall
    46e4:	ff 91       	pop	r31
    46e6:	ef 91       	pop	r30
    46e8:	bf 91       	pop	r27
    46ea:	af 91       	pop	r26
    46ec:	9f 91       	pop	r25
    46ee:	8f 91       	pop	r24
    46f0:	7f 91       	pop	r23
    46f2:	6f 91       	pop	r22
    46f4:	5f 91       	pop	r21
    46f6:	4f 91       	pop	r20
    46f8:	3f 91       	pop	r19
    46fa:	2f 91       	pop	r18
    46fc:	0f 90       	pop	r0
    46fe:	0b be       	out	0x3b, r0	; 59
    4700:	0f 90       	pop	r0
    4702:	0f be       	out	0x3f, r0	; 63
    4704:	0f 90       	pop	r0
    4706:	1f 90       	pop	r1
    4708:	18 95       	reti

0000470a <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    470a:	1f 92       	push	r1
    470c:	0f 92       	push	r0
    470e:	0f b6       	in	r0, 0x3f	; 63
    4710:	0f 92       	push	r0
    4712:	11 24       	eor	r1, r1
    4714:	0b b6       	in	r0, 0x3b	; 59
    4716:	0f 92       	push	r0
    4718:	2f 93       	push	r18
    471a:	3f 93       	push	r19
    471c:	4f 93       	push	r20
    471e:	5f 93       	push	r21
    4720:	6f 93       	push	r22
    4722:	7f 93       	push	r23
    4724:	8f 93       	push	r24
    4726:	9f 93       	push	r25
    4728:	af 93       	push	r26
    472a:	bf 93       	push	r27
    472c:	ef 93       	push	r30
    472e:	ff 93       	push	r31
    4730:	e0 91 08 23 	lds	r30, 0x2308	; 0x802308 <InterruptFuncTable+0x42>
    4734:	f0 91 09 23 	lds	r31, 0x2309	; 0x802309 <InterruptFuncTable+0x43>
    4738:	30 97       	sbiw	r30, 0x00	; 0
    473a:	29 f0       	breq	.+10     	; 0x4746 <__vector_33+0x3c>
    473c:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <InterruptSenderTable+0x42>
    4740:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <InterruptSenderTable+0x43>
    4744:	19 95       	eicall
    4746:	ff 91       	pop	r31
    4748:	ef 91       	pop	r30
    474a:	bf 91       	pop	r27
    474c:	af 91       	pop	r26
    474e:	9f 91       	pop	r25
    4750:	8f 91       	pop	r24
    4752:	7f 91       	pop	r23
    4754:	6f 91       	pop	r22
    4756:	5f 91       	pop	r21
    4758:	4f 91       	pop	r20
    475a:	3f 91       	pop	r19
    475c:	2f 91       	pop	r18
    475e:	0f 90       	pop	r0
    4760:	0b be       	out	0x3b, r0	; 59
    4762:	0f 90       	pop	r0
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	0f 90       	pop	r0
    4768:	1f 90       	pop	r1
    476a:	18 95       	reti

0000476c <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    476c:	1f 92       	push	r1
    476e:	0f 92       	push	r0
    4770:	0f b6       	in	r0, 0x3f	; 63
    4772:	0f 92       	push	r0
    4774:	11 24       	eor	r1, r1
    4776:	0b b6       	in	r0, 0x3b	; 59
    4778:	0f 92       	push	r0
    477a:	2f 93       	push	r18
    477c:	3f 93       	push	r19
    477e:	4f 93       	push	r20
    4780:	5f 93       	push	r21
    4782:	6f 93       	push	r22
    4784:	7f 93       	push	r23
    4786:	8f 93       	push	r24
    4788:	9f 93       	push	r25
    478a:	af 93       	push	r26
    478c:	bf 93       	push	r27
    478e:	ef 93       	push	r30
    4790:	ff 93       	push	r31
    4792:	e0 91 0a 23 	lds	r30, 0x230A	; 0x80230a <InterruptFuncTable+0x44>
    4796:	f0 91 0b 23 	lds	r31, 0x230B	; 0x80230b <InterruptFuncTable+0x45>
    479a:	30 97       	sbiw	r30, 0x00	; 0
    479c:	29 f0       	breq	.+10     	; 0x47a8 <__vector_34+0x3c>
    479e:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <InterruptSenderTable+0x44>
    47a2:	90 91 01 24 	lds	r25, 0x2401	; 0x802401 <InterruptSenderTable+0x45>
    47a6:	19 95       	eicall
    47a8:	ff 91       	pop	r31
    47aa:	ef 91       	pop	r30
    47ac:	bf 91       	pop	r27
    47ae:	af 91       	pop	r26
    47b0:	9f 91       	pop	r25
    47b2:	8f 91       	pop	r24
    47b4:	7f 91       	pop	r23
    47b6:	6f 91       	pop	r22
    47b8:	5f 91       	pop	r21
    47ba:	4f 91       	pop	r20
    47bc:	3f 91       	pop	r19
    47be:	2f 91       	pop	r18
    47c0:	0f 90       	pop	r0
    47c2:	0b be       	out	0x3b, r0	; 59
    47c4:	0f 90       	pop	r0
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	0f 90       	pop	r0
    47ca:	1f 90       	pop	r1
    47cc:	18 95       	reti

000047ce <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    47ce:	1f 92       	push	r1
    47d0:	0f 92       	push	r0
    47d2:	0f b6       	in	r0, 0x3f	; 63
    47d4:	0f 92       	push	r0
    47d6:	11 24       	eor	r1, r1
    47d8:	0b b6       	in	r0, 0x3b	; 59
    47da:	0f 92       	push	r0
    47dc:	2f 93       	push	r18
    47de:	3f 93       	push	r19
    47e0:	4f 93       	push	r20
    47e2:	5f 93       	push	r21
    47e4:	6f 93       	push	r22
    47e6:	7f 93       	push	r23
    47e8:	8f 93       	push	r24
    47ea:	9f 93       	push	r25
    47ec:	af 93       	push	r26
    47ee:	bf 93       	push	r27
    47f0:	ef 93       	push	r30
    47f2:	ff 93       	push	r31
    47f4:	e0 91 0c 23 	lds	r30, 0x230C	; 0x80230c <InterruptFuncTable+0x46>
    47f8:	f0 91 0d 23 	lds	r31, 0x230D	; 0x80230d <InterruptFuncTable+0x47>
    47fc:	30 97       	sbiw	r30, 0x00	; 0
    47fe:	29 f0       	breq	.+10     	; 0x480a <__vector_35+0x3c>
    4800:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <InterruptSenderTable+0x46>
    4804:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <InterruptSenderTable+0x47>
    4808:	19 95       	eicall
    480a:	ff 91       	pop	r31
    480c:	ef 91       	pop	r30
    480e:	bf 91       	pop	r27
    4810:	af 91       	pop	r26
    4812:	9f 91       	pop	r25
    4814:	8f 91       	pop	r24
    4816:	7f 91       	pop	r23
    4818:	6f 91       	pop	r22
    481a:	5f 91       	pop	r21
    481c:	4f 91       	pop	r20
    481e:	3f 91       	pop	r19
    4820:	2f 91       	pop	r18
    4822:	0f 90       	pop	r0
    4824:	0b be       	out	0x3b, r0	; 59
    4826:	0f 90       	pop	r0
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	0f 90       	pop	r0
    482c:	1f 90       	pop	r1
    482e:	18 95       	reti

00004830 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    4830:	1f 92       	push	r1
    4832:	0f 92       	push	r0
    4834:	0f b6       	in	r0, 0x3f	; 63
    4836:	0f 92       	push	r0
    4838:	11 24       	eor	r1, r1
    483a:	0b b6       	in	r0, 0x3b	; 59
    483c:	0f 92       	push	r0
    483e:	2f 93       	push	r18
    4840:	3f 93       	push	r19
    4842:	4f 93       	push	r20
    4844:	5f 93       	push	r21
    4846:	6f 93       	push	r22
    4848:	7f 93       	push	r23
    484a:	8f 93       	push	r24
    484c:	9f 93       	push	r25
    484e:	af 93       	push	r26
    4850:	bf 93       	push	r27
    4852:	ef 93       	push	r30
    4854:	ff 93       	push	r31
    4856:	e0 91 0e 23 	lds	r30, 0x230E	; 0x80230e <InterruptFuncTable+0x48>
    485a:	f0 91 0f 23 	lds	r31, 0x230F	; 0x80230f <InterruptFuncTable+0x49>
    485e:	30 97       	sbiw	r30, 0x00	; 0
    4860:	29 f0       	breq	.+10     	; 0x486c <__vector_36+0x3c>
    4862:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <InterruptSenderTable+0x48>
    4866:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <InterruptSenderTable+0x49>
    486a:	19 95       	eicall
    486c:	ff 91       	pop	r31
    486e:	ef 91       	pop	r30
    4870:	bf 91       	pop	r27
    4872:	af 91       	pop	r26
    4874:	9f 91       	pop	r25
    4876:	8f 91       	pop	r24
    4878:	7f 91       	pop	r23
    487a:	6f 91       	pop	r22
    487c:	5f 91       	pop	r21
    487e:	4f 91       	pop	r20
    4880:	3f 91       	pop	r19
    4882:	2f 91       	pop	r18
    4884:	0f 90       	pop	r0
    4886:	0b be       	out	0x3b, r0	; 59
    4888:	0f 90       	pop	r0
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	0f 90       	pop	r0
    488e:	1f 90       	pop	r1
    4890:	18 95       	reti

00004892 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    4892:	1f 92       	push	r1
    4894:	0f 92       	push	r0
    4896:	0f b6       	in	r0, 0x3f	; 63
    4898:	0f 92       	push	r0
    489a:	11 24       	eor	r1, r1
    489c:	0b b6       	in	r0, 0x3b	; 59
    489e:	0f 92       	push	r0
    48a0:	2f 93       	push	r18
    48a2:	3f 93       	push	r19
    48a4:	4f 93       	push	r20
    48a6:	5f 93       	push	r21
    48a8:	6f 93       	push	r22
    48aa:	7f 93       	push	r23
    48ac:	8f 93       	push	r24
    48ae:	9f 93       	push	r25
    48b0:	af 93       	push	r26
    48b2:	bf 93       	push	r27
    48b4:	ef 93       	push	r30
    48b6:	ff 93       	push	r31
    48b8:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <InterruptFuncTable+0x4a>
    48bc:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <InterruptFuncTable+0x4b>
    48c0:	30 97       	sbiw	r30, 0x00	; 0
    48c2:	29 f0       	breq	.+10     	; 0x48ce <__vector_37+0x3c>
    48c4:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <InterruptSenderTable+0x4a>
    48c8:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <InterruptSenderTable+0x4b>
    48cc:	19 95       	eicall
    48ce:	ff 91       	pop	r31
    48d0:	ef 91       	pop	r30
    48d2:	bf 91       	pop	r27
    48d4:	af 91       	pop	r26
    48d6:	9f 91       	pop	r25
    48d8:	8f 91       	pop	r24
    48da:	7f 91       	pop	r23
    48dc:	6f 91       	pop	r22
    48de:	5f 91       	pop	r21
    48e0:	4f 91       	pop	r20
    48e2:	3f 91       	pop	r19
    48e4:	2f 91       	pop	r18
    48e6:	0f 90       	pop	r0
    48e8:	0b be       	out	0x3b, r0	; 59
    48ea:	0f 90       	pop	r0
    48ec:	0f be       	out	0x3f, r0	; 63
    48ee:	0f 90       	pop	r0
    48f0:	1f 90       	pop	r1
    48f2:	18 95       	reti

000048f4 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    48f4:	1f 92       	push	r1
    48f6:	0f 92       	push	r0
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	0f 92       	push	r0
    48fc:	11 24       	eor	r1, r1
    48fe:	0b b6       	in	r0, 0x3b	; 59
    4900:	0f 92       	push	r0
    4902:	2f 93       	push	r18
    4904:	3f 93       	push	r19
    4906:	4f 93       	push	r20
    4908:	5f 93       	push	r21
    490a:	6f 93       	push	r22
    490c:	7f 93       	push	r23
    490e:	8f 93       	push	r24
    4910:	9f 93       	push	r25
    4912:	af 93       	push	r26
    4914:	bf 93       	push	r27
    4916:	ef 93       	push	r30
    4918:	ff 93       	push	r31
    491a:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <InterruptFuncTable+0x4c>
    491e:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <InterruptFuncTable+0x4d>
    4922:	30 97       	sbiw	r30, 0x00	; 0
    4924:	29 f0       	breq	.+10     	; 0x4930 <__vector_38+0x3c>
    4926:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <InterruptSenderTable+0x4c>
    492a:	90 91 09 24 	lds	r25, 0x2409	; 0x802409 <InterruptSenderTable+0x4d>
    492e:	19 95       	eicall
    4930:	ff 91       	pop	r31
    4932:	ef 91       	pop	r30
    4934:	bf 91       	pop	r27
    4936:	af 91       	pop	r26
    4938:	9f 91       	pop	r25
    493a:	8f 91       	pop	r24
    493c:	7f 91       	pop	r23
    493e:	6f 91       	pop	r22
    4940:	5f 91       	pop	r21
    4942:	4f 91       	pop	r20
    4944:	3f 91       	pop	r19
    4946:	2f 91       	pop	r18
    4948:	0f 90       	pop	r0
    494a:	0b be       	out	0x3b, r0	; 59
    494c:	0f 90       	pop	r0
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	0f 90       	pop	r0
    4952:	1f 90       	pop	r1
    4954:	18 95       	reti

00004956 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    4956:	1f 92       	push	r1
    4958:	0f 92       	push	r0
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	0f 92       	push	r0
    495e:	11 24       	eor	r1, r1
    4960:	0b b6       	in	r0, 0x3b	; 59
    4962:	0f 92       	push	r0
    4964:	2f 93       	push	r18
    4966:	3f 93       	push	r19
    4968:	4f 93       	push	r20
    496a:	5f 93       	push	r21
    496c:	6f 93       	push	r22
    496e:	7f 93       	push	r23
    4970:	8f 93       	push	r24
    4972:	9f 93       	push	r25
    4974:	af 93       	push	r26
    4976:	bf 93       	push	r27
    4978:	ef 93       	push	r30
    497a:	ff 93       	push	r31
    497c:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <InterruptFuncTable+0x4e>
    4980:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <InterruptFuncTable+0x4f>
    4984:	30 97       	sbiw	r30, 0x00	; 0
    4986:	29 f0       	breq	.+10     	; 0x4992 <__vector_39+0x3c>
    4988:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <InterruptSenderTable+0x4e>
    498c:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <InterruptSenderTable+0x4f>
    4990:	19 95       	eicall
    4992:	ff 91       	pop	r31
    4994:	ef 91       	pop	r30
    4996:	bf 91       	pop	r27
    4998:	af 91       	pop	r26
    499a:	9f 91       	pop	r25
    499c:	8f 91       	pop	r24
    499e:	7f 91       	pop	r23
    49a0:	6f 91       	pop	r22
    49a2:	5f 91       	pop	r21
    49a4:	4f 91       	pop	r20
    49a6:	3f 91       	pop	r19
    49a8:	2f 91       	pop	r18
    49aa:	0f 90       	pop	r0
    49ac:	0b be       	out	0x3b, r0	; 59
    49ae:	0f 90       	pop	r0
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	0f 90       	pop	r0
    49b4:	1f 90       	pop	r1
    49b6:	18 95       	reti

000049b8 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    49b8:	1f 92       	push	r1
    49ba:	0f 92       	push	r0
    49bc:	0f b6       	in	r0, 0x3f	; 63
    49be:	0f 92       	push	r0
    49c0:	11 24       	eor	r1, r1
    49c2:	0b b6       	in	r0, 0x3b	; 59
    49c4:	0f 92       	push	r0
    49c6:	2f 93       	push	r18
    49c8:	3f 93       	push	r19
    49ca:	4f 93       	push	r20
    49cc:	5f 93       	push	r21
    49ce:	6f 93       	push	r22
    49d0:	7f 93       	push	r23
    49d2:	8f 93       	push	r24
    49d4:	9f 93       	push	r25
    49d6:	af 93       	push	r26
    49d8:	bf 93       	push	r27
    49da:	ef 93       	push	r30
    49dc:	ff 93       	push	r31
    49de:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <InterruptFuncTable+0x50>
    49e2:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <InterruptFuncTable+0x51>
    49e6:	30 97       	sbiw	r30, 0x00	; 0
    49e8:	29 f0       	breq	.+10     	; 0x49f4 <__vector_40+0x3c>
    49ea:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <InterruptSenderTable+0x50>
    49ee:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <InterruptSenderTable+0x51>
    49f2:	19 95       	eicall
    49f4:	ff 91       	pop	r31
    49f6:	ef 91       	pop	r30
    49f8:	bf 91       	pop	r27
    49fa:	af 91       	pop	r26
    49fc:	9f 91       	pop	r25
    49fe:	8f 91       	pop	r24
    4a00:	7f 91       	pop	r23
    4a02:	6f 91       	pop	r22
    4a04:	5f 91       	pop	r21
    4a06:	4f 91       	pop	r20
    4a08:	3f 91       	pop	r19
    4a0a:	2f 91       	pop	r18
    4a0c:	0f 90       	pop	r0
    4a0e:	0b be       	out	0x3b, r0	; 59
    4a10:	0f 90       	pop	r0
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	0f 90       	pop	r0
    4a16:	1f 90       	pop	r1
    4a18:	18 95       	reti

00004a1a <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    4a1a:	1f 92       	push	r1
    4a1c:	0f 92       	push	r0
    4a1e:	0f b6       	in	r0, 0x3f	; 63
    4a20:	0f 92       	push	r0
    4a22:	11 24       	eor	r1, r1
    4a24:	0b b6       	in	r0, 0x3b	; 59
    4a26:	0f 92       	push	r0
    4a28:	2f 93       	push	r18
    4a2a:	3f 93       	push	r19
    4a2c:	4f 93       	push	r20
    4a2e:	5f 93       	push	r21
    4a30:	6f 93       	push	r22
    4a32:	7f 93       	push	r23
    4a34:	8f 93       	push	r24
    4a36:	9f 93       	push	r25
    4a38:	af 93       	push	r26
    4a3a:	bf 93       	push	r27
    4a3c:	ef 93       	push	r30
    4a3e:	ff 93       	push	r31
    4a40:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <InterruptFuncTable+0x52>
    4a44:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <InterruptFuncTable+0x53>
    4a48:	30 97       	sbiw	r30, 0x00	; 0
    4a4a:	29 f0       	breq	.+10     	; 0x4a56 <__vector_41+0x3c>
    4a4c:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <InterruptSenderTable+0x52>
    4a50:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <InterruptSenderTable+0x53>
    4a54:	19 95       	eicall
    4a56:	ff 91       	pop	r31
    4a58:	ef 91       	pop	r30
    4a5a:	bf 91       	pop	r27
    4a5c:	af 91       	pop	r26
    4a5e:	9f 91       	pop	r25
    4a60:	8f 91       	pop	r24
    4a62:	7f 91       	pop	r23
    4a64:	6f 91       	pop	r22
    4a66:	5f 91       	pop	r21
    4a68:	4f 91       	pop	r20
    4a6a:	3f 91       	pop	r19
    4a6c:	2f 91       	pop	r18
    4a6e:	0f 90       	pop	r0
    4a70:	0b be       	out	0x3b, r0	; 59
    4a72:	0f 90       	pop	r0
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	0f 90       	pop	r0
    4a78:	1f 90       	pop	r1
    4a7a:	18 95       	reti

00004a7c <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    4a7c:	1f 92       	push	r1
    4a7e:	0f 92       	push	r0
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	0f 92       	push	r0
    4a84:	11 24       	eor	r1, r1
    4a86:	0b b6       	in	r0, 0x3b	; 59
    4a88:	0f 92       	push	r0
    4a8a:	2f 93       	push	r18
    4a8c:	3f 93       	push	r19
    4a8e:	4f 93       	push	r20
    4a90:	5f 93       	push	r21
    4a92:	6f 93       	push	r22
    4a94:	7f 93       	push	r23
    4a96:	8f 93       	push	r24
    4a98:	9f 93       	push	r25
    4a9a:	af 93       	push	r26
    4a9c:	bf 93       	push	r27
    4a9e:	ef 93       	push	r30
    4aa0:	ff 93       	push	r31
    4aa2:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <InterruptFuncTable+0x54>
    4aa6:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <InterruptFuncTable+0x55>
    4aaa:	30 97       	sbiw	r30, 0x00	; 0
    4aac:	29 f0       	breq	.+10     	; 0x4ab8 <__vector_42+0x3c>
    4aae:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <InterruptSenderTable+0x54>
    4ab2:	90 91 11 24 	lds	r25, 0x2411	; 0x802411 <InterruptSenderTable+0x55>
    4ab6:	19 95       	eicall
    4ab8:	ff 91       	pop	r31
    4aba:	ef 91       	pop	r30
    4abc:	bf 91       	pop	r27
    4abe:	af 91       	pop	r26
    4ac0:	9f 91       	pop	r25
    4ac2:	8f 91       	pop	r24
    4ac4:	7f 91       	pop	r23
    4ac6:	6f 91       	pop	r22
    4ac8:	5f 91       	pop	r21
    4aca:	4f 91       	pop	r20
    4acc:	3f 91       	pop	r19
    4ace:	2f 91       	pop	r18
    4ad0:	0f 90       	pop	r0
    4ad2:	0b be       	out	0x3b, r0	; 59
    4ad4:	0f 90       	pop	r0
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	0f 90       	pop	r0
    4ada:	1f 90       	pop	r1
    4adc:	18 95       	reti

00004ade <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    4ade:	1f 92       	push	r1
    4ae0:	0f 92       	push	r0
    4ae2:	0f b6       	in	r0, 0x3f	; 63
    4ae4:	0f 92       	push	r0
    4ae6:	11 24       	eor	r1, r1
    4ae8:	0b b6       	in	r0, 0x3b	; 59
    4aea:	0f 92       	push	r0
    4aec:	2f 93       	push	r18
    4aee:	3f 93       	push	r19
    4af0:	4f 93       	push	r20
    4af2:	5f 93       	push	r21
    4af4:	6f 93       	push	r22
    4af6:	7f 93       	push	r23
    4af8:	8f 93       	push	r24
    4afa:	9f 93       	push	r25
    4afc:	af 93       	push	r26
    4afe:	bf 93       	push	r27
    4b00:	ef 93       	push	r30
    4b02:	ff 93       	push	r31
    4b04:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <InterruptFuncTable+0x56>
    4b08:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <InterruptFuncTable+0x57>
    4b0c:	30 97       	sbiw	r30, 0x00	; 0
    4b0e:	29 f0       	breq	.+10     	; 0x4b1a <__vector_43+0x3c>
    4b10:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <InterruptSenderTable+0x56>
    4b14:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <InterruptSenderTable+0x57>
    4b18:	19 95       	eicall
    4b1a:	ff 91       	pop	r31
    4b1c:	ef 91       	pop	r30
    4b1e:	bf 91       	pop	r27
    4b20:	af 91       	pop	r26
    4b22:	9f 91       	pop	r25
    4b24:	8f 91       	pop	r24
    4b26:	7f 91       	pop	r23
    4b28:	6f 91       	pop	r22
    4b2a:	5f 91       	pop	r21
    4b2c:	4f 91       	pop	r20
    4b2e:	3f 91       	pop	r19
    4b30:	2f 91       	pop	r18
    4b32:	0f 90       	pop	r0
    4b34:	0b be       	out	0x3b, r0	; 59
    4b36:	0f 90       	pop	r0
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	0f 90       	pop	r0
    4b3c:	1f 90       	pop	r1
    4b3e:	18 95       	reti

00004b40 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    4b40:	1f 92       	push	r1
    4b42:	0f 92       	push	r0
    4b44:	0f b6       	in	r0, 0x3f	; 63
    4b46:	0f 92       	push	r0
    4b48:	11 24       	eor	r1, r1
    4b4a:	0b b6       	in	r0, 0x3b	; 59
    4b4c:	0f 92       	push	r0
    4b4e:	2f 93       	push	r18
    4b50:	3f 93       	push	r19
    4b52:	4f 93       	push	r20
    4b54:	5f 93       	push	r21
    4b56:	6f 93       	push	r22
    4b58:	7f 93       	push	r23
    4b5a:	8f 93       	push	r24
    4b5c:	9f 93       	push	r25
    4b5e:	af 93       	push	r26
    4b60:	bf 93       	push	r27
    4b62:	ef 93       	push	r30
    4b64:	ff 93       	push	r31
    4b66:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <InterruptFuncTable+0x58>
    4b6a:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <InterruptFuncTable+0x59>
    4b6e:	30 97       	sbiw	r30, 0x00	; 0
    4b70:	29 f0       	breq	.+10     	; 0x4b7c <__vector_44+0x3c>
    4b72:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <InterruptSenderTable+0x58>
    4b76:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <InterruptSenderTable+0x59>
    4b7a:	19 95       	eicall
    4b7c:	ff 91       	pop	r31
    4b7e:	ef 91       	pop	r30
    4b80:	bf 91       	pop	r27
    4b82:	af 91       	pop	r26
    4b84:	9f 91       	pop	r25
    4b86:	8f 91       	pop	r24
    4b88:	7f 91       	pop	r23
    4b8a:	6f 91       	pop	r22
    4b8c:	5f 91       	pop	r21
    4b8e:	4f 91       	pop	r20
    4b90:	3f 91       	pop	r19
    4b92:	2f 91       	pop	r18
    4b94:	0f 90       	pop	r0
    4b96:	0b be       	out	0x3b, r0	; 59
    4b98:	0f 90       	pop	r0
    4b9a:	0f be       	out	0x3f, r0	; 63
    4b9c:	0f 90       	pop	r0
    4b9e:	1f 90       	pop	r1
    4ba0:	18 95       	reti

00004ba2 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    4ba2:	1f 92       	push	r1
    4ba4:	0f 92       	push	r0
    4ba6:	0f b6       	in	r0, 0x3f	; 63
    4ba8:	0f 92       	push	r0
    4baa:	11 24       	eor	r1, r1
    4bac:	0b b6       	in	r0, 0x3b	; 59
    4bae:	0f 92       	push	r0
    4bb0:	2f 93       	push	r18
    4bb2:	3f 93       	push	r19
    4bb4:	4f 93       	push	r20
    4bb6:	5f 93       	push	r21
    4bb8:	6f 93       	push	r22
    4bba:	7f 93       	push	r23
    4bbc:	8f 93       	push	r24
    4bbe:	9f 93       	push	r25
    4bc0:	af 93       	push	r26
    4bc2:	bf 93       	push	r27
    4bc4:	ef 93       	push	r30
    4bc6:	ff 93       	push	r31
    4bc8:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <InterruptFuncTable+0x5a>
    4bcc:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <InterruptFuncTable+0x5b>
    4bd0:	30 97       	sbiw	r30, 0x00	; 0
    4bd2:	29 f0       	breq	.+10     	; 0x4bde <__vector_45+0x3c>
    4bd4:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <InterruptSenderTable+0x5a>
    4bd8:	90 91 17 24 	lds	r25, 0x2417	; 0x802417 <InterruptSenderTable+0x5b>
    4bdc:	19 95       	eicall
    4bde:	ff 91       	pop	r31
    4be0:	ef 91       	pop	r30
    4be2:	bf 91       	pop	r27
    4be4:	af 91       	pop	r26
    4be6:	9f 91       	pop	r25
    4be8:	8f 91       	pop	r24
    4bea:	7f 91       	pop	r23
    4bec:	6f 91       	pop	r22
    4bee:	5f 91       	pop	r21
    4bf0:	4f 91       	pop	r20
    4bf2:	3f 91       	pop	r19
    4bf4:	2f 91       	pop	r18
    4bf6:	0f 90       	pop	r0
    4bf8:	0b be       	out	0x3b, r0	; 59
    4bfa:	0f 90       	pop	r0
    4bfc:	0f be       	out	0x3f, r0	; 63
    4bfe:	0f 90       	pop	r0
    4c00:	1f 90       	pop	r1
    4c02:	18 95       	reti

00004c04 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    4c04:	1f 92       	push	r1
    4c06:	0f 92       	push	r0
    4c08:	0f b6       	in	r0, 0x3f	; 63
    4c0a:	0f 92       	push	r0
    4c0c:	11 24       	eor	r1, r1
    4c0e:	0b b6       	in	r0, 0x3b	; 59
    4c10:	0f 92       	push	r0
    4c12:	2f 93       	push	r18
    4c14:	3f 93       	push	r19
    4c16:	4f 93       	push	r20
    4c18:	5f 93       	push	r21
    4c1a:	6f 93       	push	r22
    4c1c:	7f 93       	push	r23
    4c1e:	8f 93       	push	r24
    4c20:	9f 93       	push	r25
    4c22:	af 93       	push	r26
    4c24:	bf 93       	push	r27
    4c26:	ef 93       	push	r30
    4c28:	ff 93       	push	r31
    4c2a:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <InterruptFuncTable+0x5c>
    4c2e:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <InterruptFuncTable+0x5d>
    4c32:	30 97       	sbiw	r30, 0x00	; 0
    4c34:	29 f0       	breq	.+10     	; 0x4c40 <__vector_46+0x3c>
    4c36:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <InterruptSenderTable+0x5c>
    4c3a:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <InterruptSenderTable+0x5d>
    4c3e:	19 95       	eicall
    4c40:	ff 91       	pop	r31
    4c42:	ef 91       	pop	r30
    4c44:	bf 91       	pop	r27
    4c46:	af 91       	pop	r26
    4c48:	9f 91       	pop	r25
    4c4a:	8f 91       	pop	r24
    4c4c:	7f 91       	pop	r23
    4c4e:	6f 91       	pop	r22
    4c50:	5f 91       	pop	r21
    4c52:	4f 91       	pop	r20
    4c54:	3f 91       	pop	r19
    4c56:	2f 91       	pop	r18
    4c58:	0f 90       	pop	r0
    4c5a:	0b be       	out	0x3b, r0	; 59
    4c5c:	0f 90       	pop	r0
    4c5e:	0f be       	out	0x3f, r0	; 63
    4c60:	0f 90       	pop	r0
    4c62:	1f 90       	pop	r1
    4c64:	18 95       	reti

00004c66 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    4c66:	1f 92       	push	r1
    4c68:	0f 92       	push	r0
    4c6a:	0f b6       	in	r0, 0x3f	; 63
    4c6c:	0f 92       	push	r0
    4c6e:	11 24       	eor	r1, r1
    4c70:	0b b6       	in	r0, 0x3b	; 59
    4c72:	0f 92       	push	r0
    4c74:	2f 93       	push	r18
    4c76:	3f 93       	push	r19
    4c78:	4f 93       	push	r20
    4c7a:	5f 93       	push	r21
    4c7c:	6f 93       	push	r22
    4c7e:	7f 93       	push	r23
    4c80:	8f 93       	push	r24
    4c82:	9f 93       	push	r25
    4c84:	af 93       	push	r26
    4c86:	bf 93       	push	r27
    4c88:	ef 93       	push	r30
    4c8a:	ff 93       	push	r31
    4c8c:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <InterruptFuncTable+0x5e>
    4c90:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <InterruptFuncTable+0x5f>
    4c94:	30 97       	sbiw	r30, 0x00	; 0
    4c96:	29 f0       	breq	.+10     	; 0x4ca2 <__vector_47+0x3c>
    4c98:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <InterruptSenderTable+0x5e>
    4c9c:	90 91 1b 24 	lds	r25, 0x241B	; 0x80241b <InterruptSenderTable+0x5f>
    4ca0:	19 95       	eicall
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	0b b6       	in	r0, 0x3b	; 59
    4cd4:	0f 92       	push	r0
    4cd6:	2f 93       	push	r18
    4cd8:	3f 93       	push	r19
    4cda:	4f 93       	push	r20
    4cdc:	5f 93       	push	r21
    4cde:	6f 93       	push	r22
    4ce0:	7f 93       	push	r23
    4ce2:	8f 93       	push	r24
    4ce4:	9f 93       	push	r25
    4ce6:	af 93       	push	r26
    4ce8:	bf 93       	push	r27
    4cea:	ef 93       	push	r30
    4cec:	ff 93       	push	r31
    4cee:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <InterruptFuncTable+0x60>
    4cf2:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <InterruptFuncTable+0x61>
    4cf6:	30 97       	sbiw	r30, 0x00	; 0
    4cf8:	29 f0       	breq	.+10     	; 0x4d04 <__vector_48+0x3c>
    4cfa:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <InterruptSenderTable+0x60>
    4cfe:	90 91 1d 24 	lds	r25, 0x241D	; 0x80241d <InterruptSenderTable+0x61>
    4d02:	19 95       	eicall
    4d04:	ff 91       	pop	r31
    4d06:	ef 91       	pop	r30
    4d08:	bf 91       	pop	r27
    4d0a:	af 91       	pop	r26
    4d0c:	9f 91       	pop	r25
    4d0e:	8f 91       	pop	r24
    4d10:	7f 91       	pop	r23
    4d12:	6f 91       	pop	r22
    4d14:	5f 91       	pop	r21
    4d16:	4f 91       	pop	r20
    4d18:	3f 91       	pop	r19
    4d1a:	2f 91       	pop	r18
    4d1c:	0f 90       	pop	r0
    4d1e:	0b be       	out	0x3b, r0	; 59
    4d20:	0f 90       	pop	r0
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	0f 90       	pop	r0
    4d26:	1f 90       	pop	r1
    4d28:	18 95       	reti

00004d2a <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    4d2a:	1f 92       	push	r1
    4d2c:	0f 92       	push	r0
    4d2e:	0f b6       	in	r0, 0x3f	; 63
    4d30:	0f 92       	push	r0
    4d32:	11 24       	eor	r1, r1
    4d34:	0b b6       	in	r0, 0x3b	; 59
    4d36:	0f 92       	push	r0
    4d38:	2f 93       	push	r18
    4d3a:	3f 93       	push	r19
    4d3c:	4f 93       	push	r20
    4d3e:	5f 93       	push	r21
    4d40:	6f 93       	push	r22
    4d42:	7f 93       	push	r23
    4d44:	8f 93       	push	r24
    4d46:	9f 93       	push	r25
    4d48:	af 93       	push	r26
    4d4a:	bf 93       	push	r27
    4d4c:	ef 93       	push	r30
    4d4e:	ff 93       	push	r31
    4d50:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <InterruptFuncTable+0x62>
    4d54:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <InterruptFuncTable+0x63>
    4d58:	30 97       	sbiw	r30, 0x00	; 0
    4d5a:	29 f0       	breq	.+10     	; 0x4d66 <__vector_49+0x3c>
    4d5c:	80 91 1e 24 	lds	r24, 0x241E	; 0x80241e <InterruptSenderTable+0x62>
    4d60:	90 91 1f 24 	lds	r25, 0x241F	; 0x80241f <InterruptSenderTable+0x63>
    4d64:	19 95       	eicall
    4d66:	ff 91       	pop	r31
    4d68:	ef 91       	pop	r30
    4d6a:	bf 91       	pop	r27
    4d6c:	af 91       	pop	r26
    4d6e:	9f 91       	pop	r25
    4d70:	8f 91       	pop	r24
    4d72:	7f 91       	pop	r23
    4d74:	6f 91       	pop	r22
    4d76:	5f 91       	pop	r21
    4d78:	4f 91       	pop	r20
    4d7a:	3f 91       	pop	r19
    4d7c:	2f 91       	pop	r18
    4d7e:	0f 90       	pop	r0
    4d80:	0b be       	out	0x3b, r0	; 59
    4d82:	0f 90       	pop	r0
    4d84:	0f be       	out	0x3f, r0	; 63
    4d86:	0f 90       	pop	r0
    4d88:	1f 90       	pop	r1
    4d8a:	18 95       	reti

00004d8c <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    4d8c:	1f 92       	push	r1
    4d8e:	0f 92       	push	r0
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	0f 92       	push	r0
    4d94:	11 24       	eor	r1, r1
    4d96:	0b b6       	in	r0, 0x3b	; 59
    4d98:	0f 92       	push	r0
    4d9a:	2f 93       	push	r18
    4d9c:	3f 93       	push	r19
    4d9e:	4f 93       	push	r20
    4da0:	5f 93       	push	r21
    4da2:	6f 93       	push	r22
    4da4:	7f 93       	push	r23
    4da6:	8f 93       	push	r24
    4da8:	9f 93       	push	r25
    4daa:	af 93       	push	r26
    4dac:	bf 93       	push	r27
    4dae:	ef 93       	push	r30
    4db0:	ff 93       	push	r31
    4db2:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <InterruptFuncTable+0x64>
    4db6:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <InterruptFuncTable+0x65>
    4dba:	30 97       	sbiw	r30, 0x00	; 0
    4dbc:	29 f0       	breq	.+10     	; 0x4dc8 <__vector_50+0x3c>
    4dbe:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <InterruptSenderTable+0x64>
    4dc2:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <InterruptSenderTable+0x65>
    4dc6:	19 95       	eicall
    4dc8:	ff 91       	pop	r31
    4dca:	ef 91       	pop	r30
    4dcc:	bf 91       	pop	r27
    4dce:	af 91       	pop	r26
    4dd0:	9f 91       	pop	r25
    4dd2:	8f 91       	pop	r24
    4dd4:	7f 91       	pop	r23
    4dd6:	6f 91       	pop	r22
    4dd8:	5f 91       	pop	r21
    4dda:	4f 91       	pop	r20
    4ddc:	3f 91       	pop	r19
    4dde:	2f 91       	pop	r18
    4de0:	0f 90       	pop	r0
    4de2:	0b be       	out	0x3b, r0	; 59
    4de4:	0f 90       	pop	r0
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	0f 90       	pop	r0
    4dea:	1f 90       	pop	r1
    4dec:	18 95       	reti

00004dee <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    4dee:	1f 92       	push	r1
    4df0:	0f 92       	push	r0
    4df2:	0f b6       	in	r0, 0x3f	; 63
    4df4:	0f 92       	push	r0
    4df6:	11 24       	eor	r1, r1
    4df8:	0b b6       	in	r0, 0x3b	; 59
    4dfa:	0f 92       	push	r0
    4dfc:	2f 93       	push	r18
    4dfe:	3f 93       	push	r19
    4e00:	4f 93       	push	r20
    4e02:	5f 93       	push	r21
    4e04:	6f 93       	push	r22
    4e06:	7f 93       	push	r23
    4e08:	8f 93       	push	r24
    4e0a:	9f 93       	push	r25
    4e0c:	af 93       	push	r26
    4e0e:	bf 93       	push	r27
    4e10:	ef 93       	push	r30
    4e12:	ff 93       	push	r31
    4e14:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <InterruptFuncTable+0x66>
    4e18:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <InterruptFuncTable+0x67>
    4e1c:	30 97       	sbiw	r30, 0x00	; 0
    4e1e:	29 f0       	breq	.+10     	; 0x4e2a <__vector_51+0x3c>
    4e20:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <InterruptSenderTable+0x66>
    4e24:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <InterruptSenderTable+0x67>
    4e28:	19 95       	eicall
    4e2a:	ff 91       	pop	r31
    4e2c:	ef 91       	pop	r30
    4e2e:	bf 91       	pop	r27
    4e30:	af 91       	pop	r26
    4e32:	9f 91       	pop	r25
    4e34:	8f 91       	pop	r24
    4e36:	7f 91       	pop	r23
    4e38:	6f 91       	pop	r22
    4e3a:	5f 91       	pop	r21
    4e3c:	4f 91       	pop	r20
    4e3e:	3f 91       	pop	r19
    4e40:	2f 91       	pop	r18
    4e42:	0f 90       	pop	r0
    4e44:	0b be       	out	0x3b, r0	; 59
    4e46:	0f 90       	pop	r0
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	0f 90       	pop	r0
    4e4c:	1f 90       	pop	r1
    4e4e:	18 95       	reti

00004e50 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    4e50:	1f 92       	push	r1
    4e52:	0f 92       	push	r0
    4e54:	0f b6       	in	r0, 0x3f	; 63
    4e56:	0f 92       	push	r0
    4e58:	11 24       	eor	r1, r1
    4e5a:	0b b6       	in	r0, 0x3b	; 59
    4e5c:	0f 92       	push	r0
    4e5e:	2f 93       	push	r18
    4e60:	3f 93       	push	r19
    4e62:	4f 93       	push	r20
    4e64:	5f 93       	push	r21
    4e66:	6f 93       	push	r22
    4e68:	7f 93       	push	r23
    4e6a:	8f 93       	push	r24
    4e6c:	9f 93       	push	r25
    4e6e:	af 93       	push	r26
    4e70:	bf 93       	push	r27
    4e72:	ef 93       	push	r30
    4e74:	ff 93       	push	r31
    4e76:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <InterruptFuncTable+0x68>
    4e7a:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <InterruptFuncTable+0x69>
    4e7e:	30 97       	sbiw	r30, 0x00	; 0
    4e80:	29 f0       	breq	.+10     	; 0x4e8c <__vector_52+0x3c>
    4e82:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <InterruptSenderTable+0x68>
    4e86:	90 91 25 24 	lds	r25, 0x2425	; 0x802425 <InterruptSenderTable+0x69>
    4e8a:	19 95       	eicall
    4e8c:	ff 91       	pop	r31
    4e8e:	ef 91       	pop	r30
    4e90:	bf 91       	pop	r27
    4e92:	af 91       	pop	r26
    4e94:	9f 91       	pop	r25
    4e96:	8f 91       	pop	r24
    4e98:	7f 91       	pop	r23
    4e9a:	6f 91       	pop	r22
    4e9c:	5f 91       	pop	r21
    4e9e:	4f 91       	pop	r20
    4ea0:	3f 91       	pop	r19
    4ea2:	2f 91       	pop	r18
    4ea4:	0f 90       	pop	r0
    4ea6:	0b be       	out	0x3b, r0	; 59
    4ea8:	0f 90       	pop	r0
    4eaa:	0f be       	out	0x3f, r0	; 63
    4eac:	0f 90       	pop	r0
    4eae:	1f 90       	pop	r1
    4eb0:	18 95       	reti

00004eb2 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    4eb2:	1f 92       	push	r1
    4eb4:	0f 92       	push	r0
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	0f 92       	push	r0
    4eba:	11 24       	eor	r1, r1
    4ebc:	0b b6       	in	r0, 0x3b	; 59
    4ebe:	0f 92       	push	r0
    4ec0:	2f 93       	push	r18
    4ec2:	3f 93       	push	r19
    4ec4:	4f 93       	push	r20
    4ec6:	5f 93       	push	r21
    4ec8:	6f 93       	push	r22
    4eca:	7f 93       	push	r23
    4ecc:	8f 93       	push	r24
    4ece:	9f 93       	push	r25
    4ed0:	af 93       	push	r26
    4ed2:	bf 93       	push	r27
    4ed4:	ef 93       	push	r30
    4ed6:	ff 93       	push	r31
    4ed8:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <InterruptFuncTable+0x6a>
    4edc:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <InterruptFuncTable+0x6b>
    4ee0:	30 97       	sbiw	r30, 0x00	; 0
    4ee2:	29 f0       	breq	.+10     	; 0x4eee <__vector_53+0x3c>
    4ee4:	80 91 26 24 	lds	r24, 0x2426	; 0x802426 <InterruptSenderTable+0x6a>
    4ee8:	90 91 27 24 	lds	r25, 0x2427	; 0x802427 <InterruptSenderTable+0x6b>
    4eec:	19 95       	eicall
    4eee:	ff 91       	pop	r31
    4ef0:	ef 91       	pop	r30
    4ef2:	bf 91       	pop	r27
    4ef4:	af 91       	pop	r26
    4ef6:	9f 91       	pop	r25
    4ef8:	8f 91       	pop	r24
    4efa:	7f 91       	pop	r23
    4efc:	6f 91       	pop	r22
    4efe:	5f 91       	pop	r21
    4f00:	4f 91       	pop	r20
    4f02:	3f 91       	pop	r19
    4f04:	2f 91       	pop	r18
    4f06:	0f 90       	pop	r0
    4f08:	0b be       	out	0x3b, r0	; 59
    4f0a:	0f 90       	pop	r0
    4f0c:	0f be       	out	0x3f, r0	; 63
    4f0e:	0f 90       	pop	r0
    4f10:	1f 90       	pop	r1
    4f12:	18 95       	reti

00004f14 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    4f14:	1f 92       	push	r1
    4f16:	0f 92       	push	r0
    4f18:	0f b6       	in	r0, 0x3f	; 63
    4f1a:	0f 92       	push	r0
    4f1c:	11 24       	eor	r1, r1
    4f1e:	0b b6       	in	r0, 0x3b	; 59
    4f20:	0f 92       	push	r0
    4f22:	2f 93       	push	r18
    4f24:	3f 93       	push	r19
    4f26:	4f 93       	push	r20
    4f28:	5f 93       	push	r21
    4f2a:	6f 93       	push	r22
    4f2c:	7f 93       	push	r23
    4f2e:	8f 93       	push	r24
    4f30:	9f 93       	push	r25
    4f32:	af 93       	push	r26
    4f34:	bf 93       	push	r27
    4f36:	ef 93       	push	r30
    4f38:	ff 93       	push	r31
    4f3a:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <InterruptFuncTable+0x6c>
    4f3e:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <InterruptFuncTable+0x6d>
    4f42:	30 97       	sbiw	r30, 0x00	; 0
    4f44:	29 f0       	breq	.+10     	; 0x4f50 <__vector_54+0x3c>
    4f46:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <InterruptSenderTable+0x6c>
    4f4a:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <InterruptSenderTable+0x6d>
    4f4e:	19 95       	eicall
    4f50:	ff 91       	pop	r31
    4f52:	ef 91       	pop	r30
    4f54:	bf 91       	pop	r27
    4f56:	af 91       	pop	r26
    4f58:	9f 91       	pop	r25
    4f5a:	8f 91       	pop	r24
    4f5c:	7f 91       	pop	r23
    4f5e:	6f 91       	pop	r22
    4f60:	5f 91       	pop	r21
    4f62:	4f 91       	pop	r20
    4f64:	3f 91       	pop	r19
    4f66:	2f 91       	pop	r18
    4f68:	0f 90       	pop	r0
    4f6a:	0b be       	out	0x3b, r0	; 59
    4f6c:	0f 90       	pop	r0
    4f6e:	0f be       	out	0x3f, r0	; 63
    4f70:	0f 90       	pop	r0
    4f72:	1f 90       	pop	r1
    4f74:	18 95       	reti

00004f76 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    4f76:	1f 92       	push	r1
    4f78:	0f 92       	push	r0
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	0f 92       	push	r0
    4f7e:	11 24       	eor	r1, r1
    4f80:	0b b6       	in	r0, 0x3b	; 59
    4f82:	0f 92       	push	r0
    4f84:	2f 93       	push	r18
    4f86:	3f 93       	push	r19
    4f88:	4f 93       	push	r20
    4f8a:	5f 93       	push	r21
    4f8c:	6f 93       	push	r22
    4f8e:	7f 93       	push	r23
    4f90:	8f 93       	push	r24
    4f92:	9f 93       	push	r25
    4f94:	af 93       	push	r26
    4f96:	bf 93       	push	r27
    4f98:	ef 93       	push	r30
    4f9a:	ff 93       	push	r31
    4f9c:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <InterruptFuncTable+0x6e>
    4fa0:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <InterruptFuncTable+0x6f>
    4fa4:	30 97       	sbiw	r30, 0x00	; 0
    4fa6:	29 f0       	breq	.+10     	; 0x4fb2 <__vector_55+0x3c>
    4fa8:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <InterruptSenderTable+0x6e>
    4fac:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <InterruptSenderTable+0x6f>
    4fb0:	19 95       	eicall
    4fb2:	ff 91       	pop	r31
    4fb4:	ef 91       	pop	r30
    4fb6:	bf 91       	pop	r27
    4fb8:	af 91       	pop	r26
    4fba:	9f 91       	pop	r25
    4fbc:	8f 91       	pop	r24
    4fbe:	7f 91       	pop	r23
    4fc0:	6f 91       	pop	r22
    4fc2:	5f 91       	pop	r21
    4fc4:	4f 91       	pop	r20
    4fc6:	3f 91       	pop	r19
    4fc8:	2f 91       	pop	r18
    4fca:	0f 90       	pop	r0
    4fcc:	0b be       	out	0x3b, r0	; 59
    4fce:	0f 90       	pop	r0
    4fd0:	0f be       	out	0x3f, r0	; 63
    4fd2:	0f 90       	pop	r0
    4fd4:	1f 90       	pop	r1
    4fd6:	18 95       	reti

00004fd8 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    4fd8:	1f 92       	push	r1
    4fda:	0f 92       	push	r0
    4fdc:	0f b6       	in	r0, 0x3f	; 63
    4fde:	0f 92       	push	r0
    4fe0:	11 24       	eor	r1, r1
    4fe2:	0b b6       	in	r0, 0x3b	; 59
    4fe4:	0f 92       	push	r0
    4fe6:	2f 93       	push	r18
    4fe8:	3f 93       	push	r19
    4fea:	4f 93       	push	r20
    4fec:	5f 93       	push	r21
    4fee:	6f 93       	push	r22
    4ff0:	7f 93       	push	r23
    4ff2:	8f 93       	push	r24
    4ff4:	9f 93       	push	r25
    4ff6:	af 93       	push	r26
    4ff8:	bf 93       	push	r27
    4ffa:	ef 93       	push	r30
    4ffc:	ff 93       	push	r31
    4ffe:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <InterruptFuncTable+0x70>
    5002:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <InterruptFuncTable+0x71>
    5006:	30 97       	sbiw	r30, 0x00	; 0
    5008:	29 f0       	breq	.+10     	; 0x5014 <__vector_56+0x3c>
    500a:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <InterruptSenderTable+0x70>
    500e:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <InterruptSenderTable+0x71>
    5012:	19 95       	eicall
    5014:	ff 91       	pop	r31
    5016:	ef 91       	pop	r30
    5018:	bf 91       	pop	r27
    501a:	af 91       	pop	r26
    501c:	9f 91       	pop	r25
    501e:	8f 91       	pop	r24
    5020:	7f 91       	pop	r23
    5022:	6f 91       	pop	r22
    5024:	5f 91       	pop	r21
    5026:	4f 91       	pop	r20
    5028:	3f 91       	pop	r19
    502a:	2f 91       	pop	r18
    502c:	0f 90       	pop	r0
    502e:	0b be       	out	0x3b, r0	; 59
    5030:	0f 90       	pop	r0
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	0f 90       	pop	r0
    5036:	1f 90       	pop	r1
    5038:	18 95       	reti

0000503a <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    503a:	1f 92       	push	r1
    503c:	0f 92       	push	r0
    503e:	0f b6       	in	r0, 0x3f	; 63
    5040:	0f 92       	push	r0
    5042:	11 24       	eor	r1, r1
    5044:	0b b6       	in	r0, 0x3b	; 59
    5046:	0f 92       	push	r0
    5048:	2f 93       	push	r18
    504a:	3f 93       	push	r19
    504c:	4f 93       	push	r20
    504e:	5f 93       	push	r21
    5050:	6f 93       	push	r22
    5052:	7f 93       	push	r23
    5054:	8f 93       	push	r24
    5056:	9f 93       	push	r25
    5058:	af 93       	push	r26
    505a:	bf 93       	push	r27
    505c:	ef 93       	push	r30
    505e:	ff 93       	push	r31
    5060:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <InterruptFuncTable+0x72>
    5064:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <InterruptFuncTable+0x73>
    5068:	30 97       	sbiw	r30, 0x00	; 0
    506a:	29 f0       	breq	.+10     	; 0x5076 <__vector_57+0x3c>
    506c:	80 91 2e 24 	lds	r24, 0x242E	; 0x80242e <InterruptSenderTable+0x72>
    5070:	90 91 2f 24 	lds	r25, 0x242F	; 0x80242f <InterruptSenderTable+0x73>
    5074:	19 95       	eicall
    5076:	ff 91       	pop	r31
    5078:	ef 91       	pop	r30
    507a:	bf 91       	pop	r27
    507c:	af 91       	pop	r26
    507e:	9f 91       	pop	r25
    5080:	8f 91       	pop	r24
    5082:	7f 91       	pop	r23
    5084:	6f 91       	pop	r22
    5086:	5f 91       	pop	r21
    5088:	4f 91       	pop	r20
    508a:	3f 91       	pop	r19
    508c:	2f 91       	pop	r18
    508e:	0f 90       	pop	r0
    5090:	0b be       	out	0x3b, r0	; 59
    5092:	0f 90       	pop	r0
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	0f 90       	pop	r0
    5098:	1f 90       	pop	r1
    509a:	18 95       	reti

0000509c <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    509c:	1f 92       	push	r1
    509e:	0f 92       	push	r0
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	0f 92       	push	r0
    50a4:	11 24       	eor	r1, r1
    50a6:	0b b6       	in	r0, 0x3b	; 59
    50a8:	0f 92       	push	r0
    50aa:	2f 93       	push	r18
    50ac:	3f 93       	push	r19
    50ae:	4f 93       	push	r20
    50b0:	5f 93       	push	r21
    50b2:	6f 93       	push	r22
    50b4:	7f 93       	push	r23
    50b6:	8f 93       	push	r24
    50b8:	9f 93       	push	r25
    50ba:	af 93       	push	r26
    50bc:	bf 93       	push	r27
    50be:	ef 93       	push	r30
    50c0:	ff 93       	push	r31
    50c2:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <InterruptFuncTable+0x74>
    50c6:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <InterruptFuncTable+0x75>
    50ca:	30 97       	sbiw	r30, 0x00	; 0
    50cc:	29 f0       	breq	.+10     	; 0x50d8 <__vector_58+0x3c>
    50ce:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <InterruptSenderTable+0x74>
    50d2:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <InterruptSenderTable+0x75>
    50d6:	19 95       	eicall
    50d8:	ff 91       	pop	r31
    50da:	ef 91       	pop	r30
    50dc:	bf 91       	pop	r27
    50de:	af 91       	pop	r26
    50e0:	9f 91       	pop	r25
    50e2:	8f 91       	pop	r24
    50e4:	7f 91       	pop	r23
    50e6:	6f 91       	pop	r22
    50e8:	5f 91       	pop	r21
    50ea:	4f 91       	pop	r20
    50ec:	3f 91       	pop	r19
    50ee:	2f 91       	pop	r18
    50f0:	0f 90       	pop	r0
    50f2:	0b be       	out	0x3b, r0	; 59
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	11 24       	eor	r1, r1
    5108:	0b b6       	in	r0, 0x3b	; 59
    510a:	0f 92       	push	r0
    510c:	2f 93       	push	r18
    510e:	3f 93       	push	r19
    5110:	4f 93       	push	r20
    5112:	5f 93       	push	r21
    5114:	6f 93       	push	r22
    5116:	7f 93       	push	r23
    5118:	8f 93       	push	r24
    511a:	9f 93       	push	r25
    511c:	af 93       	push	r26
    511e:	bf 93       	push	r27
    5120:	ef 93       	push	r30
    5122:	ff 93       	push	r31
    5124:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <InterruptFuncTable+0x76>
    5128:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <InterruptFuncTable+0x77>
    512c:	30 97       	sbiw	r30, 0x00	; 0
    512e:	29 f0       	breq	.+10     	; 0x513a <__vector_59+0x3c>
    5130:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <InterruptSenderTable+0x76>
    5134:	90 91 33 24 	lds	r25, 0x2433	; 0x802433 <InterruptSenderTable+0x77>
    5138:	19 95       	eicall
    513a:	ff 91       	pop	r31
    513c:	ef 91       	pop	r30
    513e:	bf 91       	pop	r27
    5140:	af 91       	pop	r26
    5142:	9f 91       	pop	r25
    5144:	8f 91       	pop	r24
    5146:	7f 91       	pop	r23
    5148:	6f 91       	pop	r22
    514a:	5f 91       	pop	r21
    514c:	4f 91       	pop	r20
    514e:	3f 91       	pop	r19
    5150:	2f 91       	pop	r18
    5152:	0f 90       	pop	r0
    5154:	0b be       	out	0x3b, r0	; 59
    5156:	0f 90       	pop	r0
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	0f 90       	pop	r0
    515c:	1f 90       	pop	r1
    515e:	18 95       	reti

00005160 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    5160:	1f 92       	push	r1
    5162:	0f 92       	push	r0
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	0f 92       	push	r0
    5168:	11 24       	eor	r1, r1
    516a:	0b b6       	in	r0, 0x3b	; 59
    516c:	0f 92       	push	r0
    516e:	2f 93       	push	r18
    5170:	3f 93       	push	r19
    5172:	4f 93       	push	r20
    5174:	5f 93       	push	r21
    5176:	6f 93       	push	r22
    5178:	7f 93       	push	r23
    517a:	8f 93       	push	r24
    517c:	9f 93       	push	r25
    517e:	af 93       	push	r26
    5180:	bf 93       	push	r27
    5182:	ef 93       	push	r30
    5184:	ff 93       	push	r31
    5186:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <InterruptFuncTable+0x78>
    518a:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <InterruptFuncTable+0x79>
    518e:	30 97       	sbiw	r30, 0x00	; 0
    5190:	29 f0       	breq	.+10     	; 0x519c <__vector_60+0x3c>
    5192:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <InterruptSenderTable+0x78>
    5196:	90 91 35 24 	lds	r25, 0x2435	; 0x802435 <InterruptSenderTable+0x79>
    519a:	19 95       	eicall
    519c:	ff 91       	pop	r31
    519e:	ef 91       	pop	r30
    51a0:	bf 91       	pop	r27
    51a2:	af 91       	pop	r26
    51a4:	9f 91       	pop	r25
    51a6:	8f 91       	pop	r24
    51a8:	7f 91       	pop	r23
    51aa:	6f 91       	pop	r22
    51ac:	5f 91       	pop	r21
    51ae:	4f 91       	pop	r20
    51b0:	3f 91       	pop	r19
    51b2:	2f 91       	pop	r18
    51b4:	0f 90       	pop	r0
    51b6:	0b be       	out	0x3b, r0	; 59
    51b8:	0f 90       	pop	r0
    51ba:	0f be       	out	0x3f, r0	; 63
    51bc:	0f 90       	pop	r0
    51be:	1f 90       	pop	r1
    51c0:	18 95       	reti

000051c2 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    51c2:	1f 92       	push	r1
    51c4:	0f 92       	push	r0
    51c6:	0f b6       	in	r0, 0x3f	; 63
    51c8:	0f 92       	push	r0
    51ca:	11 24       	eor	r1, r1
    51cc:	0b b6       	in	r0, 0x3b	; 59
    51ce:	0f 92       	push	r0
    51d0:	2f 93       	push	r18
    51d2:	3f 93       	push	r19
    51d4:	4f 93       	push	r20
    51d6:	5f 93       	push	r21
    51d8:	6f 93       	push	r22
    51da:	7f 93       	push	r23
    51dc:	8f 93       	push	r24
    51de:	9f 93       	push	r25
    51e0:	af 93       	push	r26
    51e2:	bf 93       	push	r27
    51e4:	ef 93       	push	r30
    51e6:	ff 93       	push	r31
    51e8:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <InterruptFuncTable+0x7a>
    51ec:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <InterruptFuncTable+0x7b>
    51f0:	30 97       	sbiw	r30, 0x00	; 0
    51f2:	29 f0       	breq	.+10     	; 0x51fe <__vector_61+0x3c>
    51f4:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <InterruptSenderTable+0x7a>
    51f8:	90 91 37 24 	lds	r25, 0x2437	; 0x802437 <InterruptSenderTable+0x7b>
    51fc:	19 95       	eicall
    51fe:	ff 91       	pop	r31
    5200:	ef 91       	pop	r30
    5202:	bf 91       	pop	r27
    5204:	af 91       	pop	r26
    5206:	9f 91       	pop	r25
    5208:	8f 91       	pop	r24
    520a:	7f 91       	pop	r23
    520c:	6f 91       	pop	r22
    520e:	5f 91       	pop	r21
    5210:	4f 91       	pop	r20
    5212:	3f 91       	pop	r19
    5214:	2f 91       	pop	r18
    5216:	0f 90       	pop	r0
    5218:	0b be       	out	0x3b, r0	; 59
    521a:	0f 90       	pop	r0
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	0f 90       	pop	r0
    5220:	1f 90       	pop	r1
    5222:	18 95       	reti

00005224 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    5224:	1f 92       	push	r1
    5226:	0f 92       	push	r0
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	0f 92       	push	r0
    522c:	11 24       	eor	r1, r1
    522e:	0b b6       	in	r0, 0x3b	; 59
    5230:	0f 92       	push	r0
    5232:	2f 93       	push	r18
    5234:	3f 93       	push	r19
    5236:	4f 93       	push	r20
    5238:	5f 93       	push	r21
    523a:	6f 93       	push	r22
    523c:	7f 93       	push	r23
    523e:	8f 93       	push	r24
    5240:	9f 93       	push	r25
    5242:	af 93       	push	r26
    5244:	bf 93       	push	r27
    5246:	ef 93       	push	r30
    5248:	ff 93       	push	r31
    524a:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <InterruptFuncTable+0x7c>
    524e:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <InterruptFuncTable+0x7d>
    5252:	30 97       	sbiw	r30, 0x00	; 0
    5254:	29 f0       	breq	.+10     	; 0x5260 <__vector_62+0x3c>
    5256:	80 91 38 24 	lds	r24, 0x2438	; 0x802438 <InterruptSenderTable+0x7c>
    525a:	90 91 39 24 	lds	r25, 0x2439	; 0x802439 <InterruptSenderTable+0x7d>
    525e:	19 95       	eicall
    5260:	ff 91       	pop	r31
    5262:	ef 91       	pop	r30
    5264:	bf 91       	pop	r27
    5266:	af 91       	pop	r26
    5268:	9f 91       	pop	r25
    526a:	8f 91       	pop	r24
    526c:	7f 91       	pop	r23
    526e:	6f 91       	pop	r22
    5270:	5f 91       	pop	r21
    5272:	4f 91       	pop	r20
    5274:	3f 91       	pop	r19
    5276:	2f 91       	pop	r18
    5278:	0f 90       	pop	r0
    527a:	0b be       	out	0x3b, r0	; 59
    527c:	0f 90       	pop	r0
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	0f 90       	pop	r0
    5282:	1f 90       	pop	r1
    5284:	18 95       	reti

00005286 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    5286:	1f 92       	push	r1
    5288:	0f 92       	push	r0
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	0f 92       	push	r0
    528e:	11 24       	eor	r1, r1
    5290:	0b b6       	in	r0, 0x3b	; 59
    5292:	0f 92       	push	r0
    5294:	2f 93       	push	r18
    5296:	3f 93       	push	r19
    5298:	4f 93       	push	r20
    529a:	5f 93       	push	r21
    529c:	6f 93       	push	r22
    529e:	7f 93       	push	r23
    52a0:	8f 93       	push	r24
    52a2:	9f 93       	push	r25
    52a4:	af 93       	push	r26
    52a6:	bf 93       	push	r27
    52a8:	ef 93       	push	r30
    52aa:	ff 93       	push	r31
    52ac:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <InterruptFuncTable+0x7e>
    52b0:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <InterruptFuncTable+0x7f>
    52b4:	30 97       	sbiw	r30, 0x00	; 0
    52b6:	29 f0       	breq	.+10     	; 0x52c2 <__vector_63+0x3c>
    52b8:	80 91 3a 24 	lds	r24, 0x243A	; 0x80243a <InterruptSenderTable+0x7e>
    52bc:	90 91 3b 24 	lds	r25, 0x243B	; 0x80243b <InterruptSenderTable+0x7f>
    52c0:	19 95       	eicall
    52c2:	ff 91       	pop	r31
    52c4:	ef 91       	pop	r30
    52c6:	bf 91       	pop	r27
    52c8:	af 91       	pop	r26
    52ca:	9f 91       	pop	r25
    52cc:	8f 91       	pop	r24
    52ce:	7f 91       	pop	r23
    52d0:	6f 91       	pop	r22
    52d2:	5f 91       	pop	r21
    52d4:	4f 91       	pop	r20
    52d6:	3f 91       	pop	r19
    52d8:	2f 91       	pop	r18
    52da:	0f 90       	pop	r0
    52dc:	0b be       	out	0x3b, r0	; 59
    52de:	0f 90       	pop	r0
    52e0:	0f be       	out	0x3f, r0	; 63
    52e2:	0f 90       	pop	r0
    52e4:	1f 90       	pop	r1
    52e6:	18 95       	reti

000052e8 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    52e8:	1f 92       	push	r1
    52ea:	0f 92       	push	r0
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	0f 92       	push	r0
    52f0:	11 24       	eor	r1, r1
    52f2:	0b b6       	in	r0, 0x3b	; 59
    52f4:	0f 92       	push	r0
    52f6:	2f 93       	push	r18
    52f8:	3f 93       	push	r19
    52fa:	4f 93       	push	r20
    52fc:	5f 93       	push	r21
    52fe:	6f 93       	push	r22
    5300:	7f 93       	push	r23
    5302:	8f 93       	push	r24
    5304:	9f 93       	push	r25
    5306:	af 93       	push	r26
    5308:	bf 93       	push	r27
    530a:	ef 93       	push	r30
    530c:	ff 93       	push	r31
    530e:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <InterruptFuncTable+0x80>
    5312:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <InterruptFuncTable+0x81>
    5316:	30 97       	sbiw	r30, 0x00	; 0
    5318:	29 f0       	breq	.+10     	; 0x5324 <__vector_64+0x3c>
    531a:	80 91 3c 24 	lds	r24, 0x243C	; 0x80243c <InterruptSenderTable+0x80>
    531e:	90 91 3d 24 	lds	r25, 0x243D	; 0x80243d <InterruptSenderTable+0x81>
    5322:	19 95       	eicall
    5324:	ff 91       	pop	r31
    5326:	ef 91       	pop	r30
    5328:	bf 91       	pop	r27
    532a:	af 91       	pop	r26
    532c:	9f 91       	pop	r25
    532e:	8f 91       	pop	r24
    5330:	7f 91       	pop	r23
    5332:	6f 91       	pop	r22
    5334:	5f 91       	pop	r21
    5336:	4f 91       	pop	r20
    5338:	3f 91       	pop	r19
    533a:	2f 91       	pop	r18
    533c:	0f 90       	pop	r0
    533e:	0b be       	out	0x3b, r0	; 59
    5340:	0f 90       	pop	r0
    5342:	0f be       	out	0x3f, r0	; 63
    5344:	0f 90       	pop	r0
    5346:	1f 90       	pop	r1
    5348:	18 95       	reti

0000534a <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    534a:	1f 92       	push	r1
    534c:	0f 92       	push	r0
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	0f 92       	push	r0
    5352:	11 24       	eor	r1, r1
    5354:	0b b6       	in	r0, 0x3b	; 59
    5356:	0f 92       	push	r0
    5358:	2f 93       	push	r18
    535a:	3f 93       	push	r19
    535c:	4f 93       	push	r20
    535e:	5f 93       	push	r21
    5360:	6f 93       	push	r22
    5362:	7f 93       	push	r23
    5364:	8f 93       	push	r24
    5366:	9f 93       	push	r25
    5368:	af 93       	push	r26
    536a:	bf 93       	push	r27
    536c:	ef 93       	push	r30
    536e:	ff 93       	push	r31
    5370:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <InterruptFuncTable+0x82>
    5374:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <InterruptFuncTable+0x83>
    5378:	30 97       	sbiw	r30, 0x00	; 0
    537a:	29 f0       	breq	.+10     	; 0x5386 <__vector_65+0x3c>
    537c:	80 91 3e 24 	lds	r24, 0x243E	; 0x80243e <InterruptSenderTable+0x82>
    5380:	90 91 3f 24 	lds	r25, 0x243F	; 0x80243f <InterruptSenderTable+0x83>
    5384:	19 95       	eicall
    5386:	ff 91       	pop	r31
    5388:	ef 91       	pop	r30
    538a:	bf 91       	pop	r27
    538c:	af 91       	pop	r26
    538e:	9f 91       	pop	r25
    5390:	8f 91       	pop	r24
    5392:	7f 91       	pop	r23
    5394:	6f 91       	pop	r22
    5396:	5f 91       	pop	r21
    5398:	4f 91       	pop	r20
    539a:	3f 91       	pop	r19
    539c:	2f 91       	pop	r18
    539e:	0f 90       	pop	r0
    53a0:	0b be       	out	0x3b, r0	; 59
    53a2:	0f 90       	pop	r0
    53a4:	0f be       	out	0x3f, r0	; 63
    53a6:	0f 90       	pop	r0
    53a8:	1f 90       	pop	r1
    53aa:	18 95       	reti

000053ac <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    53ac:	1f 92       	push	r1
    53ae:	0f 92       	push	r0
    53b0:	0f b6       	in	r0, 0x3f	; 63
    53b2:	0f 92       	push	r0
    53b4:	11 24       	eor	r1, r1
    53b6:	0b b6       	in	r0, 0x3b	; 59
    53b8:	0f 92       	push	r0
    53ba:	2f 93       	push	r18
    53bc:	3f 93       	push	r19
    53be:	4f 93       	push	r20
    53c0:	5f 93       	push	r21
    53c2:	6f 93       	push	r22
    53c4:	7f 93       	push	r23
    53c6:	8f 93       	push	r24
    53c8:	9f 93       	push	r25
    53ca:	af 93       	push	r26
    53cc:	bf 93       	push	r27
    53ce:	ef 93       	push	r30
    53d0:	ff 93       	push	r31
    53d2:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <InterruptFuncTable+0x84>
    53d6:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <InterruptFuncTable+0x85>
    53da:	30 97       	sbiw	r30, 0x00	; 0
    53dc:	29 f0       	breq	.+10     	; 0x53e8 <__vector_66+0x3c>
    53de:	80 91 40 24 	lds	r24, 0x2440	; 0x802440 <InterruptSenderTable+0x84>
    53e2:	90 91 41 24 	lds	r25, 0x2441	; 0x802441 <InterruptSenderTable+0x85>
    53e6:	19 95       	eicall
    53e8:	ff 91       	pop	r31
    53ea:	ef 91       	pop	r30
    53ec:	bf 91       	pop	r27
    53ee:	af 91       	pop	r26
    53f0:	9f 91       	pop	r25
    53f2:	8f 91       	pop	r24
    53f4:	7f 91       	pop	r23
    53f6:	6f 91       	pop	r22
    53f8:	5f 91       	pop	r21
    53fa:	4f 91       	pop	r20
    53fc:	3f 91       	pop	r19
    53fe:	2f 91       	pop	r18
    5400:	0f 90       	pop	r0
    5402:	0b be       	out	0x3b, r0	; 59
    5404:	0f 90       	pop	r0
    5406:	0f be       	out	0x3f, r0	; 63
    5408:	0f 90       	pop	r0
    540a:	1f 90       	pop	r1
    540c:	18 95       	reti

0000540e <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    540e:	1f 92       	push	r1
    5410:	0f 92       	push	r0
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	0f 92       	push	r0
    5416:	11 24       	eor	r1, r1
    5418:	0b b6       	in	r0, 0x3b	; 59
    541a:	0f 92       	push	r0
    541c:	2f 93       	push	r18
    541e:	3f 93       	push	r19
    5420:	4f 93       	push	r20
    5422:	5f 93       	push	r21
    5424:	6f 93       	push	r22
    5426:	7f 93       	push	r23
    5428:	8f 93       	push	r24
    542a:	9f 93       	push	r25
    542c:	af 93       	push	r26
    542e:	bf 93       	push	r27
    5430:	ef 93       	push	r30
    5432:	ff 93       	push	r31
    5434:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <InterruptFuncTable+0x86>
    5438:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <InterruptFuncTable+0x87>
    543c:	30 97       	sbiw	r30, 0x00	; 0
    543e:	29 f0       	breq	.+10     	; 0x544a <__vector_67+0x3c>
    5440:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <InterruptSenderTable+0x86>
    5444:	90 91 43 24 	lds	r25, 0x2443	; 0x802443 <InterruptSenderTable+0x87>
    5448:	19 95       	eicall
    544a:	ff 91       	pop	r31
    544c:	ef 91       	pop	r30
    544e:	bf 91       	pop	r27
    5450:	af 91       	pop	r26
    5452:	9f 91       	pop	r25
    5454:	8f 91       	pop	r24
    5456:	7f 91       	pop	r23
    5458:	6f 91       	pop	r22
    545a:	5f 91       	pop	r21
    545c:	4f 91       	pop	r20
    545e:	3f 91       	pop	r19
    5460:	2f 91       	pop	r18
    5462:	0f 90       	pop	r0
    5464:	0b be       	out	0x3b, r0	; 59
    5466:	0f 90       	pop	r0
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	0f 90       	pop	r0
    546c:	1f 90       	pop	r1
    546e:	18 95       	reti

00005470 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    5470:	1f 92       	push	r1
    5472:	0f 92       	push	r0
    5474:	0f b6       	in	r0, 0x3f	; 63
    5476:	0f 92       	push	r0
    5478:	11 24       	eor	r1, r1
    547a:	0b b6       	in	r0, 0x3b	; 59
    547c:	0f 92       	push	r0
    547e:	2f 93       	push	r18
    5480:	3f 93       	push	r19
    5482:	4f 93       	push	r20
    5484:	5f 93       	push	r21
    5486:	6f 93       	push	r22
    5488:	7f 93       	push	r23
    548a:	8f 93       	push	r24
    548c:	9f 93       	push	r25
    548e:	af 93       	push	r26
    5490:	bf 93       	push	r27
    5492:	ef 93       	push	r30
    5494:	ff 93       	push	r31
    5496:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <InterruptFuncTable+0x88>
    549a:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <InterruptFuncTable+0x89>
    549e:	30 97       	sbiw	r30, 0x00	; 0
    54a0:	29 f0       	breq	.+10     	; 0x54ac <__vector_68+0x3c>
    54a2:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <InterruptSenderTable+0x88>
    54a6:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <InterruptSenderTable+0x89>
    54aa:	19 95       	eicall
    54ac:	ff 91       	pop	r31
    54ae:	ef 91       	pop	r30
    54b0:	bf 91       	pop	r27
    54b2:	af 91       	pop	r26
    54b4:	9f 91       	pop	r25
    54b6:	8f 91       	pop	r24
    54b8:	7f 91       	pop	r23
    54ba:	6f 91       	pop	r22
    54bc:	5f 91       	pop	r21
    54be:	4f 91       	pop	r20
    54c0:	3f 91       	pop	r19
    54c2:	2f 91       	pop	r18
    54c4:	0f 90       	pop	r0
    54c6:	0b be       	out	0x3b, r0	; 59
    54c8:	0f 90       	pop	r0
    54ca:	0f be       	out	0x3f, r0	; 63
    54cc:	0f 90       	pop	r0
    54ce:	1f 90       	pop	r1
    54d0:	18 95       	reti

000054d2 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    54d2:	1f 92       	push	r1
    54d4:	0f 92       	push	r0
    54d6:	0f b6       	in	r0, 0x3f	; 63
    54d8:	0f 92       	push	r0
    54da:	11 24       	eor	r1, r1
    54dc:	0b b6       	in	r0, 0x3b	; 59
    54de:	0f 92       	push	r0
    54e0:	2f 93       	push	r18
    54e2:	3f 93       	push	r19
    54e4:	4f 93       	push	r20
    54e6:	5f 93       	push	r21
    54e8:	6f 93       	push	r22
    54ea:	7f 93       	push	r23
    54ec:	8f 93       	push	r24
    54ee:	9f 93       	push	r25
    54f0:	af 93       	push	r26
    54f2:	bf 93       	push	r27
    54f4:	ef 93       	push	r30
    54f6:	ff 93       	push	r31
    54f8:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <InterruptFuncTable+0x8a>
    54fc:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <InterruptFuncTable+0x8b>
    5500:	30 97       	sbiw	r30, 0x00	; 0
    5502:	29 f0       	breq	.+10     	; 0x550e <__vector_69+0x3c>
    5504:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <InterruptSenderTable+0x8a>
    5508:	90 91 47 24 	lds	r25, 0x2447	; 0x802447 <InterruptSenderTable+0x8b>
    550c:	19 95       	eicall
    550e:	ff 91       	pop	r31
    5510:	ef 91       	pop	r30
    5512:	bf 91       	pop	r27
    5514:	af 91       	pop	r26
    5516:	9f 91       	pop	r25
    5518:	8f 91       	pop	r24
    551a:	7f 91       	pop	r23
    551c:	6f 91       	pop	r22
    551e:	5f 91       	pop	r21
    5520:	4f 91       	pop	r20
    5522:	3f 91       	pop	r19
    5524:	2f 91       	pop	r18
    5526:	0f 90       	pop	r0
    5528:	0b be       	out	0x3b, r0	; 59
    552a:	0f 90       	pop	r0
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	0f 90       	pop	r0
    5530:	1f 90       	pop	r1
    5532:	18 95       	reti

00005534 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    5534:	1f 92       	push	r1
    5536:	0f 92       	push	r0
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	0f 92       	push	r0
    553c:	11 24       	eor	r1, r1
    553e:	0b b6       	in	r0, 0x3b	; 59
    5540:	0f 92       	push	r0
    5542:	2f 93       	push	r18
    5544:	3f 93       	push	r19
    5546:	4f 93       	push	r20
    5548:	5f 93       	push	r21
    554a:	6f 93       	push	r22
    554c:	7f 93       	push	r23
    554e:	8f 93       	push	r24
    5550:	9f 93       	push	r25
    5552:	af 93       	push	r26
    5554:	bf 93       	push	r27
    5556:	ef 93       	push	r30
    5558:	ff 93       	push	r31
    555a:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <InterruptFuncTable+0x8c>
    555e:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <InterruptFuncTable+0x8d>
    5562:	30 97       	sbiw	r30, 0x00	; 0
    5564:	29 f0       	breq	.+10     	; 0x5570 <__vector_70+0x3c>
    5566:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <InterruptSenderTable+0x8c>
    556a:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <InterruptSenderTable+0x8d>
    556e:	19 95       	eicall
    5570:	ff 91       	pop	r31
    5572:	ef 91       	pop	r30
    5574:	bf 91       	pop	r27
    5576:	af 91       	pop	r26
    5578:	9f 91       	pop	r25
    557a:	8f 91       	pop	r24
    557c:	7f 91       	pop	r23
    557e:	6f 91       	pop	r22
    5580:	5f 91       	pop	r21
    5582:	4f 91       	pop	r20
    5584:	3f 91       	pop	r19
    5586:	2f 91       	pop	r18
    5588:	0f 90       	pop	r0
    558a:	0b be       	out	0x3b, r0	; 59
    558c:	0f 90       	pop	r0
    558e:	0f be       	out	0x3f, r0	; 63
    5590:	0f 90       	pop	r0
    5592:	1f 90       	pop	r1
    5594:	18 95       	reti

00005596 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    5596:	1f 92       	push	r1
    5598:	0f 92       	push	r0
    559a:	0f b6       	in	r0, 0x3f	; 63
    559c:	0f 92       	push	r0
    559e:	11 24       	eor	r1, r1
    55a0:	0b b6       	in	r0, 0x3b	; 59
    55a2:	0f 92       	push	r0
    55a4:	2f 93       	push	r18
    55a6:	3f 93       	push	r19
    55a8:	4f 93       	push	r20
    55aa:	5f 93       	push	r21
    55ac:	6f 93       	push	r22
    55ae:	7f 93       	push	r23
    55b0:	8f 93       	push	r24
    55b2:	9f 93       	push	r25
    55b4:	af 93       	push	r26
    55b6:	bf 93       	push	r27
    55b8:	ef 93       	push	r30
    55ba:	ff 93       	push	r31
    55bc:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <InterruptFuncTable+0x8e>
    55c0:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <InterruptFuncTable+0x8f>
    55c4:	30 97       	sbiw	r30, 0x00	; 0
    55c6:	29 f0       	breq	.+10     	; 0x55d2 <__vector_71+0x3c>
    55c8:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <InterruptSenderTable+0x8e>
    55cc:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <InterruptSenderTable+0x8f>
    55d0:	19 95       	eicall
    55d2:	ff 91       	pop	r31
    55d4:	ef 91       	pop	r30
    55d6:	bf 91       	pop	r27
    55d8:	af 91       	pop	r26
    55da:	9f 91       	pop	r25
    55dc:	8f 91       	pop	r24
    55de:	7f 91       	pop	r23
    55e0:	6f 91       	pop	r22
    55e2:	5f 91       	pop	r21
    55e4:	4f 91       	pop	r20
    55e6:	3f 91       	pop	r19
    55e8:	2f 91       	pop	r18
    55ea:	0f 90       	pop	r0
    55ec:	0b be       	out	0x3b, r0	; 59
    55ee:	0f 90       	pop	r0
    55f0:	0f be       	out	0x3f, r0	; 63
    55f2:	0f 90       	pop	r0
    55f4:	1f 90       	pop	r1
    55f6:	18 95       	reti

000055f8 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    55f8:	1f 92       	push	r1
    55fa:	0f 92       	push	r0
    55fc:	0f b6       	in	r0, 0x3f	; 63
    55fe:	0f 92       	push	r0
    5600:	11 24       	eor	r1, r1
    5602:	0b b6       	in	r0, 0x3b	; 59
    5604:	0f 92       	push	r0
    5606:	2f 93       	push	r18
    5608:	3f 93       	push	r19
    560a:	4f 93       	push	r20
    560c:	5f 93       	push	r21
    560e:	6f 93       	push	r22
    5610:	7f 93       	push	r23
    5612:	8f 93       	push	r24
    5614:	9f 93       	push	r25
    5616:	af 93       	push	r26
    5618:	bf 93       	push	r27
    561a:	ef 93       	push	r30
    561c:	ff 93       	push	r31
    561e:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <InterruptFuncTable+0x90>
    5622:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <InterruptFuncTable+0x91>
    5626:	30 97       	sbiw	r30, 0x00	; 0
    5628:	29 f0       	breq	.+10     	; 0x5634 <__vector_72+0x3c>
    562a:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <InterruptSenderTable+0x90>
    562e:	90 91 4d 24 	lds	r25, 0x244D	; 0x80244d <InterruptSenderTable+0x91>
    5632:	19 95       	eicall
    5634:	ff 91       	pop	r31
    5636:	ef 91       	pop	r30
    5638:	bf 91       	pop	r27
    563a:	af 91       	pop	r26
    563c:	9f 91       	pop	r25
    563e:	8f 91       	pop	r24
    5640:	7f 91       	pop	r23
    5642:	6f 91       	pop	r22
    5644:	5f 91       	pop	r21
    5646:	4f 91       	pop	r20
    5648:	3f 91       	pop	r19
    564a:	2f 91       	pop	r18
    564c:	0f 90       	pop	r0
    564e:	0b be       	out	0x3b, r0	; 59
    5650:	0f 90       	pop	r0
    5652:	0f be       	out	0x3f, r0	; 63
    5654:	0f 90       	pop	r0
    5656:	1f 90       	pop	r1
    5658:	18 95       	reti

0000565a <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    565a:	1f 92       	push	r1
    565c:	0f 92       	push	r0
    565e:	0f b6       	in	r0, 0x3f	; 63
    5660:	0f 92       	push	r0
    5662:	11 24       	eor	r1, r1
    5664:	0b b6       	in	r0, 0x3b	; 59
    5666:	0f 92       	push	r0
    5668:	2f 93       	push	r18
    566a:	3f 93       	push	r19
    566c:	4f 93       	push	r20
    566e:	5f 93       	push	r21
    5670:	6f 93       	push	r22
    5672:	7f 93       	push	r23
    5674:	8f 93       	push	r24
    5676:	9f 93       	push	r25
    5678:	af 93       	push	r26
    567a:	bf 93       	push	r27
    567c:	ef 93       	push	r30
    567e:	ff 93       	push	r31
    5680:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <InterruptFuncTable+0x92>
    5684:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <InterruptFuncTable+0x93>
    5688:	30 97       	sbiw	r30, 0x00	; 0
    568a:	29 f0       	breq	.+10     	; 0x5696 <__vector_73+0x3c>
    568c:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <InterruptSenderTable+0x92>
    5690:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <InterruptSenderTable+0x93>
    5694:	19 95       	eicall
    5696:	ff 91       	pop	r31
    5698:	ef 91       	pop	r30
    569a:	bf 91       	pop	r27
    569c:	af 91       	pop	r26
    569e:	9f 91       	pop	r25
    56a0:	8f 91       	pop	r24
    56a2:	7f 91       	pop	r23
    56a4:	6f 91       	pop	r22
    56a6:	5f 91       	pop	r21
    56a8:	4f 91       	pop	r20
    56aa:	3f 91       	pop	r19
    56ac:	2f 91       	pop	r18
    56ae:	0f 90       	pop	r0
    56b0:	0b be       	out	0x3b, r0	; 59
    56b2:	0f 90       	pop	r0
    56b4:	0f be       	out	0x3f, r0	; 63
    56b6:	0f 90       	pop	r0
    56b8:	1f 90       	pop	r1
    56ba:	18 95       	reti

000056bc <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    56bc:	1f 92       	push	r1
    56be:	0f 92       	push	r0
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	0f 92       	push	r0
    56c4:	11 24       	eor	r1, r1
    56c6:	0b b6       	in	r0, 0x3b	; 59
    56c8:	0f 92       	push	r0
    56ca:	2f 93       	push	r18
    56cc:	3f 93       	push	r19
    56ce:	4f 93       	push	r20
    56d0:	5f 93       	push	r21
    56d2:	6f 93       	push	r22
    56d4:	7f 93       	push	r23
    56d6:	8f 93       	push	r24
    56d8:	9f 93       	push	r25
    56da:	af 93       	push	r26
    56dc:	bf 93       	push	r27
    56de:	ef 93       	push	r30
    56e0:	ff 93       	push	r31
    56e2:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <InterruptFuncTable+0x94>
    56e6:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <InterruptFuncTable+0x95>
    56ea:	30 97       	sbiw	r30, 0x00	; 0
    56ec:	29 f0       	breq	.+10     	; 0x56f8 <__vector_74+0x3c>
    56ee:	80 91 50 24 	lds	r24, 0x2450	; 0x802450 <InterruptSenderTable+0x94>
    56f2:	90 91 51 24 	lds	r25, 0x2451	; 0x802451 <InterruptSenderTable+0x95>
    56f6:	19 95       	eicall
    56f8:	ff 91       	pop	r31
    56fa:	ef 91       	pop	r30
    56fc:	bf 91       	pop	r27
    56fe:	af 91       	pop	r26
    5700:	9f 91       	pop	r25
    5702:	8f 91       	pop	r24
    5704:	7f 91       	pop	r23
    5706:	6f 91       	pop	r22
    5708:	5f 91       	pop	r21
    570a:	4f 91       	pop	r20
    570c:	3f 91       	pop	r19
    570e:	2f 91       	pop	r18
    5710:	0f 90       	pop	r0
    5712:	0b be       	out	0x3b, r0	; 59
    5714:	0f 90       	pop	r0
    5716:	0f be       	out	0x3f, r0	; 63
    5718:	0f 90       	pop	r0
    571a:	1f 90       	pop	r1
    571c:	18 95       	reti

0000571e <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    571e:	1f 92       	push	r1
    5720:	0f 92       	push	r0
    5722:	0f b6       	in	r0, 0x3f	; 63
    5724:	0f 92       	push	r0
    5726:	11 24       	eor	r1, r1
    5728:	0b b6       	in	r0, 0x3b	; 59
    572a:	0f 92       	push	r0
    572c:	2f 93       	push	r18
    572e:	3f 93       	push	r19
    5730:	4f 93       	push	r20
    5732:	5f 93       	push	r21
    5734:	6f 93       	push	r22
    5736:	7f 93       	push	r23
    5738:	8f 93       	push	r24
    573a:	9f 93       	push	r25
    573c:	af 93       	push	r26
    573e:	bf 93       	push	r27
    5740:	ef 93       	push	r30
    5742:	ff 93       	push	r31
    5744:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <InterruptFuncTable+0x9a>
    5748:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <InterruptFuncTable+0x9b>
    574c:	30 97       	sbiw	r30, 0x00	; 0
    574e:	29 f0       	breq	.+10     	; 0x575a <__vector_77+0x3c>
    5750:	80 91 56 24 	lds	r24, 0x2456	; 0x802456 <InterruptSenderTable+0x9a>
    5754:	90 91 57 24 	lds	r25, 0x2457	; 0x802457 <InterruptSenderTable+0x9b>
    5758:	19 95       	eicall
    575a:	ff 91       	pop	r31
    575c:	ef 91       	pop	r30
    575e:	bf 91       	pop	r27
    5760:	af 91       	pop	r26
    5762:	9f 91       	pop	r25
    5764:	8f 91       	pop	r24
    5766:	7f 91       	pop	r23
    5768:	6f 91       	pop	r22
    576a:	5f 91       	pop	r21
    576c:	4f 91       	pop	r20
    576e:	3f 91       	pop	r19
    5770:	2f 91       	pop	r18
    5772:	0f 90       	pop	r0
    5774:	0b be       	out	0x3b, r0	; 59
    5776:	0f 90       	pop	r0
    5778:	0f be       	out	0x3f, r0	; 63
    577a:	0f 90       	pop	r0
    577c:	1f 90       	pop	r1
    577e:	18 95       	reti

00005780 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    5780:	1f 92       	push	r1
    5782:	0f 92       	push	r0
    5784:	0f b6       	in	r0, 0x3f	; 63
    5786:	0f 92       	push	r0
    5788:	11 24       	eor	r1, r1
    578a:	0b b6       	in	r0, 0x3b	; 59
    578c:	0f 92       	push	r0
    578e:	2f 93       	push	r18
    5790:	3f 93       	push	r19
    5792:	4f 93       	push	r20
    5794:	5f 93       	push	r21
    5796:	6f 93       	push	r22
    5798:	7f 93       	push	r23
    579a:	8f 93       	push	r24
    579c:	9f 93       	push	r25
    579e:	af 93       	push	r26
    57a0:	bf 93       	push	r27
    57a2:	ef 93       	push	r30
    57a4:	ff 93       	push	r31
    57a6:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <InterruptFuncTable+0x9c>
    57aa:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <InterruptFuncTable+0x9d>
    57ae:	30 97       	sbiw	r30, 0x00	; 0
    57b0:	29 f0       	breq	.+10     	; 0x57bc <__vector_78+0x3c>
    57b2:	80 91 58 24 	lds	r24, 0x2458	; 0x802458 <InterruptSenderTable+0x9c>
    57b6:	90 91 59 24 	lds	r25, 0x2459	; 0x802459 <InterruptSenderTable+0x9d>
    57ba:	19 95       	eicall
    57bc:	ff 91       	pop	r31
    57be:	ef 91       	pop	r30
    57c0:	bf 91       	pop	r27
    57c2:	af 91       	pop	r26
    57c4:	9f 91       	pop	r25
    57c6:	8f 91       	pop	r24
    57c8:	7f 91       	pop	r23
    57ca:	6f 91       	pop	r22
    57cc:	5f 91       	pop	r21
    57ce:	4f 91       	pop	r20
    57d0:	3f 91       	pop	r19
    57d2:	2f 91       	pop	r18
    57d4:	0f 90       	pop	r0
    57d6:	0b be       	out	0x3b, r0	; 59
    57d8:	0f 90       	pop	r0
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	0f 90       	pop	r0
    57de:	1f 90       	pop	r1
    57e0:	18 95       	reti

000057e2 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    57e2:	1f 92       	push	r1
    57e4:	0f 92       	push	r0
    57e6:	0f b6       	in	r0, 0x3f	; 63
    57e8:	0f 92       	push	r0
    57ea:	11 24       	eor	r1, r1
    57ec:	0b b6       	in	r0, 0x3b	; 59
    57ee:	0f 92       	push	r0
    57f0:	2f 93       	push	r18
    57f2:	3f 93       	push	r19
    57f4:	4f 93       	push	r20
    57f6:	5f 93       	push	r21
    57f8:	6f 93       	push	r22
    57fa:	7f 93       	push	r23
    57fc:	8f 93       	push	r24
    57fe:	9f 93       	push	r25
    5800:	af 93       	push	r26
    5802:	bf 93       	push	r27
    5804:	ef 93       	push	r30
    5806:	ff 93       	push	r31
    5808:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <InterruptFuncTable+0x9e>
    580c:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <InterruptFuncTable+0x9f>
    5810:	30 97       	sbiw	r30, 0x00	; 0
    5812:	29 f0       	breq	.+10     	; 0x581e <__vector_79+0x3c>
    5814:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <InterruptSenderTable+0x9e>
    5818:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <InterruptSenderTable+0x9f>
    581c:	19 95       	eicall
    581e:	ff 91       	pop	r31
    5820:	ef 91       	pop	r30
    5822:	bf 91       	pop	r27
    5824:	af 91       	pop	r26
    5826:	9f 91       	pop	r25
    5828:	8f 91       	pop	r24
    582a:	7f 91       	pop	r23
    582c:	6f 91       	pop	r22
    582e:	5f 91       	pop	r21
    5830:	4f 91       	pop	r20
    5832:	3f 91       	pop	r19
    5834:	2f 91       	pop	r18
    5836:	0f 90       	pop	r0
    5838:	0b be       	out	0x3b, r0	; 59
    583a:	0f 90       	pop	r0
    583c:	0f be       	out	0x3f, r0	; 63
    583e:	0f 90       	pop	r0
    5840:	1f 90       	pop	r1
    5842:	18 95       	reti

00005844 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    5844:	1f 92       	push	r1
    5846:	0f 92       	push	r0
    5848:	0f b6       	in	r0, 0x3f	; 63
    584a:	0f 92       	push	r0
    584c:	11 24       	eor	r1, r1
    584e:	0b b6       	in	r0, 0x3b	; 59
    5850:	0f 92       	push	r0
    5852:	2f 93       	push	r18
    5854:	3f 93       	push	r19
    5856:	4f 93       	push	r20
    5858:	5f 93       	push	r21
    585a:	6f 93       	push	r22
    585c:	7f 93       	push	r23
    585e:	8f 93       	push	r24
    5860:	9f 93       	push	r25
    5862:	af 93       	push	r26
    5864:	bf 93       	push	r27
    5866:	ef 93       	push	r30
    5868:	ff 93       	push	r31
    586a:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <InterruptFuncTable+0xa0>
    586e:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <InterruptFuncTable+0xa1>
    5872:	30 97       	sbiw	r30, 0x00	; 0
    5874:	29 f0       	breq	.+10     	; 0x5880 <__vector_80+0x3c>
    5876:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <InterruptSenderTable+0xa0>
    587a:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <InterruptSenderTable+0xa1>
    587e:	19 95       	eicall
    5880:	ff 91       	pop	r31
    5882:	ef 91       	pop	r30
    5884:	bf 91       	pop	r27
    5886:	af 91       	pop	r26
    5888:	9f 91       	pop	r25
    588a:	8f 91       	pop	r24
    588c:	7f 91       	pop	r23
    588e:	6f 91       	pop	r22
    5890:	5f 91       	pop	r21
    5892:	4f 91       	pop	r20
    5894:	3f 91       	pop	r19
    5896:	2f 91       	pop	r18
    5898:	0f 90       	pop	r0
    589a:	0b be       	out	0x3b, r0	; 59
    589c:	0f 90       	pop	r0
    589e:	0f be       	out	0x3f, r0	; 63
    58a0:	0f 90       	pop	r0
    58a2:	1f 90       	pop	r1
    58a4:	18 95       	reti

000058a6 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    58a6:	1f 92       	push	r1
    58a8:	0f 92       	push	r0
    58aa:	0f b6       	in	r0, 0x3f	; 63
    58ac:	0f 92       	push	r0
    58ae:	11 24       	eor	r1, r1
    58b0:	0b b6       	in	r0, 0x3b	; 59
    58b2:	0f 92       	push	r0
    58b4:	2f 93       	push	r18
    58b6:	3f 93       	push	r19
    58b8:	4f 93       	push	r20
    58ba:	5f 93       	push	r21
    58bc:	6f 93       	push	r22
    58be:	7f 93       	push	r23
    58c0:	8f 93       	push	r24
    58c2:	9f 93       	push	r25
    58c4:	af 93       	push	r26
    58c6:	bf 93       	push	r27
    58c8:	ef 93       	push	r30
    58ca:	ff 93       	push	r31
    58cc:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <InterruptFuncTable+0xa2>
    58d0:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <InterruptFuncTable+0xa3>
    58d4:	30 97       	sbiw	r30, 0x00	; 0
    58d6:	29 f0       	breq	.+10     	; 0x58e2 <__vector_81+0x3c>
    58d8:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <InterruptSenderTable+0xa2>
    58dc:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <InterruptSenderTable+0xa3>
    58e0:	19 95       	eicall
    58e2:	ff 91       	pop	r31
    58e4:	ef 91       	pop	r30
    58e6:	bf 91       	pop	r27
    58e8:	af 91       	pop	r26
    58ea:	9f 91       	pop	r25
    58ec:	8f 91       	pop	r24
    58ee:	7f 91       	pop	r23
    58f0:	6f 91       	pop	r22
    58f2:	5f 91       	pop	r21
    58f4:	4f 91       	pop	r20
    58f6:	3f 91       	pop	r19
    58f8:	2f 91       	pop	r18
    58fa:	0f 90       	pop	r0
    58fc:	0b be       	out	0x3b, r0	; 59
    58fe:	0f 90       	pop	r0
    5900:	0f be       	out	0x3f, r0	; 63
    5902:	0f 90       	pop	r0
    5904:	1f 90       	pop	r1
    5906:	18 95       	reti

00005908 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    5908:	1f 92       	push	r1
    590a:	0f 92       	push	r0
    590c:	0f b6       	in	r0, 0x3f	; 63
    590e:	0f 92       	push	r0
    5910:	11 24       	eor	r1, r1
    5912:	0b b6       	in	r0, 0x3b	; 59
    5914:	0f 92       	push	r0
    5916:	2f 93       	push	r18
    5918:	3f 93       	push	r19
    591a:	4f 93       	push	r20
    591c:	5f 93       	push	r21
    591e:	6f 93       	push	r22
    5920:	7f 93       	push	r23
    5922:	8f 93       	push	r24
    5924:	9f 93       	push	r25
    5926:	af 93       	push	r26
    5928:	bf 93       	push	r27
    592a:	ef 93       	push	r30
    592c:	ff 93       	push	r31
    592e:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <InterruptFuncTable+0xa4>
    5932:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <InterruptFuncTable+0xa5>
    5936:	30 97       	sbiw	r30, 0x00	; 0
    5938:	29 f0       	breq	.+10     	; 0x5944 <__vector_82+0x3c>
    593a:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <InterruptSenderTable+0xa4>
    593e:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <InterruptSenderTable+0xa5>
    5942:	19 95       	eicall
    5944:	ff 91       	pop	r31
    5946:	ef 91       	pop	r30
    5948:	bf 91       	pop	r27
    594a:	af 91       	pop	r26
    594c:	9f 91       	pop	r25
    594e:	8f 91       	pop	r24
    5950:	7f 91       	pop	r23
    5952:	6f 91       	pop	r22
    5954:	5f 91       	pop	r21
    5956:	4f 91       	pop	r20
    5958:	3f 91       	pop	r19
    595a:	2f 91       	pop	r18
    595c:	0f 90       	pop	r0
    595e:	0b be       	out	0x3b, r0	; 59
    5960:	0f 90       	pop	r0
    5962:	0f be       	out	0x3f, r0	; 63
    5964:	0f 90       	pop	r0
    5966:	1f 90       	pop	r1
    5968:	18 95       	reti

0000596a <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    596a:	1f 92       	push	r1
    596c:	0f 92       	push	r0
    596e:	0f b6       	in	r0, 0x3f	; 63
    5970:	0f 92       	push	r0
    5972:	11 24       	eor	r1, r1
    5974:	0b b6       	in	r0, 0x3b	; 59
    5976:	0f 92       	push	r0
    5978:	2f 93       	push	r18
    597a:	3f 93       	push	r19
    597c:	4f 93       	push	r20
    597e:	5f 93       	push	r21
    5980:	6f 93       	push	r22
    5982:	7f 93       	push	r23
    5984:	8f 93       	push	r24
    5986:	9f 93       	push	r25
    5988:	af 93       	push	r26
    598a:	bf 93       	push	r27
    598c:	ef 93       	push	r30
    598e:	ff 93       	push	r31
    5990:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <InterruptFuncTable+0xa6>
    5994:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <InterruptFuncTable+0xa7>
    5998:	30 97       	sbiw	r30, 0x00	; 0
    599a:	29 f0       	breq	.+10     	; 0x59a6 <__vector_83+0x3c>
    599c:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <InterruptSenderTable+0xa6>
    59a0:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <InterruptSenderTable+0xa7>
    59a4:	19 95       	eicall
    59a6:	ff 91       	pop	r31
    59a8:	ef 91       	pop	r30
    59aa:	bf 91       	pop	r27
    59ac:	af 91       	pop	r26
    59ae:	9f 91       	pop	r25
    59b0:	8f 91       	pop	r24
    59b2:	7f 91       	pop	r23
    59b4:	6f 91       	pop	r22
    59b6:	5f 91       	pop	r21
    59b8:	4f 91       	pop	r20
    59ba:	3f 91       	pop	r19
    59bc:	2f 91       	pop	r18
    59be:	0f 90       	pop	r0
    59c0:	0b be       	out	0x3b, r0	; 59
    59c2:	0f 90       	pop	r0
    59c4:	0f be       	out	0x3f, r0	; 63
    59c6:	0f 90       	pop	r0
    59c8:	1f 90       	pop	r1
    59ca:	18 95       	reti

000059cc <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    59cc:	1f 92       	push	r1
    59ce:	0f 92       	push	r0
    59d0:	0f b6       	in	r0, 0x3f	; 63
    59d2:	0f 92       	push	r0
    59d4:	11 24       	eor	r1, r1
    59d6:	0b b6       	in	r0, 0x3b	; 59
    59d8:	0f 92       	push	r0
    59da:	2f 93       	push	r18
    59dc:	3f 93       	push	r19
    59de:	4f 93       	push	r20
    59e0:	5f 93       	push	r21
    59e2:	6f 93       	push	r22
    59e4:	7f 93       	push	r23
    59e6:	8f 93       	push	r24
    59e8:	9f 93       	push	r25
    59ea:	af 93       	push	r26
    59ec:	bf 93       	push	r27
    59ee:	ef 93       	push	r30
    59f0:	ff 93       	push	r31
    59f2:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <InterruptFuncTable+0xa8>
    59f6:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <InterruptFuncTable+0xa9>
    59fa:	30 97       	sbiw	r30, 0x00	; 0
    59fc:	29 f0       	breq	.+10     	; 0x5a08 <__vector_84+0x3c>
    59fe:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <InterruptSenderTable+0xa8>
    5a02:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <InterruptSenderTable+0xa9>
    5a06:	19 95       	eicall
    5a08:	ff 91       	pop	r31
    5a0a:	ef 91       	pop	r30
    5a0c:	bf 91       	pop	r27
    5a0e:	af 91       	pop	r26
    5a10:	9f 91       	pop	r25
    5a12:	8f 91       	pop	r24
    5a14:	7f 91       	pop	r23
    5a16:	6f 91       	pop	r22
    5a18:	5f 91       	pop	r21
    5a1a:	4f 91       	pop	r20
    5a1c:	3f 91       	pop	r19
    5a1e:	2f 91       	pop	r18
    5a20:	0f 90       	pop	r0
    5a22:	0b be       	out	0x3b, r0	; 59
    5a24:	0f 90       	pop	r0
    5a26:	0f be       	out	0x3f, r0	; 63
    5a28:	0f 90       	pop	r0
    5a2a:	1f 90       	pop	r1
    5a2c:	18 95       	reti

00005a2e <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    5a2e:	1f 92       	push	r1
    5a30:	0f 92       	push	r0
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	0f 92       	push	r0
    5a36:	11 24       	eor	r1, r1
    5a38:	0b b6       	in	r0, 0x3b	; 59
    5a3a:	0f 92       	push	r0
    5a3c:	2f 93       	push	r18
    5a3e:	3f 93       	push	r19
    5a40:	4f 93       	push	r20
    5a42:	5f 93       	push	r21
    5a44:	6f 93       	push	r22
    5a46:	7f 93       	push	r23
    5a48:	8f 93       	push	r24
    5a4a:	9f 93       	push	r25
    5a4c:	af 93       	push	r26
    5a4e:	bf 93       	push	r27
    5a50:	ef 93       	push	r30
    5a52:	ff 93       	push	r31
    5a54:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <InterruptFuncTable+0xaa>
    5a58:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <InterruptFuncTable+0xab>
    5a5c:	30 97       	sbiw	r30, 0x00	; 0
    5a5e:	29 f0       	breq	.+10     	; 0x5a6a <__vector_85+0x3c>
    5a60:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <InterruptSenderTable+0xaa>
    5a64:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <InterruptSenderTable+0xab>
    5a68:	19 95       	eicall
    5a6a:	ff 91       	pop	r31
    5a6c:	ef 91       	pop	r30
    5a6e:	bf 91       	pop	r27
    5a70:	af 91       	pop	r26
    5a72:	9f 91       	pop	r25
    5a74:	8f 91       	pop	r24
    5a76:	7f 91       	pop	r23
    5a78:	6f 91       	pop	r22
    5a7a:	5f 91       	pop	r21
    5a7c:	4f 91       	pop	r20
    5a7e:	3f 91       	pop	r19
    5a80:	2f 91       	pop	r18
    5a82:	0f 90       	pop	r0
    5a84:	0b be       	out	0x3b, r0	; 59
    5a86:	0f 90       	pop	r0
    5a88:	0f be       	out	0x3f, r0	; 63
    5a8a:	0f 90       	pop	r0
    5a8c:	1f 90       	pop	r1
    5a8e:	18 95       	reti

00005a90 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    5a90:	1f 92       	push	r1
    5a92:	0f 92       	push	r0
    5a94:	0f b6       	in	r0, 0x3f	; 63
    5a96:	0f 92       	push	r0
    5a98:	11 24       	eor	r1, r1
    5a9a:	0b b6       	in	r0, 0x3b	; 59
    5a9c:	0f 92       	push	r0
    5a9e:	2f 93       	push	r18
    5aa0:	3f 93       	push	r19
    5aa2:	4f 93       	push	r20
    5aa4:	5f 93       	push	r21
    5aa6:	6f 93       	push	r22
    5aa8:	7f 93       	push	r23
    5aaa:	8f 93       	push	r24
    5aac:	9f 93       	push	r25
    5aae:	af 93       	push	r26
    5ab0:	bf 93       	push	r27
    5ab2:	ef 93       	push	r30
    5ab4:	ff 93       	push	r31
    5ab6:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <InterruptFuncTable+0xac>
    5aba:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <InterruptFuncTable+0xad>
    5abe:	30 97       	sbiw	r30, 0x00	; 0
    5ac0:	29 f0       	breq	.+10     	; 0x5acc <__vector_86+0x3c>
    5ac2:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <InterruptSenderTable+0xac>
    5ac6:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <InterruptSenderTable+0xad>
    5aca:	19 95       	eicall
    5acc:	ff 91       	pop	r31
    5ace:	ef 91       	pop	r30
    5ad0:	bf 91       	pop	r27
    5ad2:	af 91       	pop	r26
    5ad4:	9f 91       	pop	r25
    5ad6:	8f 91       	pop	r24
    5ad8:	7f 91       	pop	r23
    5ada:	6f 91       	pop	r22
    5adc:	5f 91       	pop	r21
    5ade:	4f 91       	pop	r20
    5ae0:	3f 91       	pop	r19
    5ae2:	2f 91       	pop	r18
    5ae4:	0f 90       	pop	r0
    5ae6:	0b be       	out	0x3b, r0	; 59
    5ae8:	0f 90       	pop	r0
    5aea:	0f be       	out	0x3f, r0	; 63
    5aec:	0f 90       	pop	r0
    5aee:	1f 90       	pop	r1
    5af0:	18 95       	reti

00005af2 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    5af2:	1f 92       	push	r1
    5af4:	0f 92       	push	r0
    5af6:	0f b6       	in	r0, 0x3f	; 63
    5af8:	0f 92       	push	r0
    5afa:	11 24       	eor	r1, r1
    5afc:	0b b6       	in	r0, 0x3b	; 59
    5afe:	0f 92       	push	r0
    5b00:	2f 93       	push	r18
    5b02:	3f 93       	push	r19
    5b04:	4f 93       	push	r20
    5b06:	5f 93       	push	r21
    5b08:	6f 93       	push	r22
    5b0a:	7f 93       	push	r23
    5b0c:	8f 93       	push	r24
    5b0e:	9f 93       	push	r25
    5b10:	af 93       	push	r26
    5b12:	bf 93       	push	r27
    5b14:	ef 93       	push	r30
    5b16:	ff 93       	push	r31
    5b18:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <InterruptFuncTable+0xae>
    5b1c:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <InterruptFuncTable+0xaf>
    5b20:	30 97       	sbiw	r30, 0x00	; 0
    5b22:	29 f0       	breq	.+10     	; 0x5b2e <__vector_87+0x3c>
    5b24:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <InterruptSenderTable+0xae>
    5b28:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <InterruptSenderTable+0xaf>
    5b2c:	19 95       	eicall
    5b2e:	ff 91       	pop	r31
    5b30:	ef 91       	pop	r30
    5b32:	bf 91       	pop	r27
    5b34:	af 91       	pop	r26
    5b36:	9f 91       	pop	r25
    5b38:	8f 91       	pop	r24
    5b3a:	7f 91       	pop	r23
    5b3c:	6f 91       	pop	r22
    5b3e:	5f 91       	pop	r21
    5b40:	4f 91       	pop	r20
    5b42:	3f 91       	pop	r19
    5b44:	2f 91       	pop	r18
    5b46:	0f 90       	pop	r0
    5b48:	0b be       	out	0x3b, r0	; 59
    5b4a:	0f 90       	pop	r0
    5b4c:	0f be       	out	0x3f, r0	; 63
    5b4e:	0f 90       	pop	r0
    5b50:	1f 90       	pop	r1
    5b52:	18 95       	reti

00005b54 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    5b54:	1f 92       	push	r1
    5b56:	0f 92       	push	r0
    5b58:	0f b6       	in	r0, 0x3f	; 63
    5b5a:	0f 92       	push	r0
    5b5c:	11 24       	eor	r1, r1
    5b5e:	0b b6       	in	r0, 0x3b	; 59
    5b60:	0f 92       	push	r0
    5b62:	2f 93       	push	r18
    5b64:	3f 93       	push	r19
    5b66:	4f 93       	push	r20
    5b68:	5f 93       	push	r21
    5b6a:	6f 93       	push	r22
    5b6c:	7f 93       	push	r23
    5b6e:	8f 93       	push	r24
    5b70:	9f 93       	push	r25
    5b72:	af 93       	push	r26
    5b74:	bf 93       	push	r27
    5b76:	ef 93       	push	r30
    5b78:	ff 93       	push	r31
    5b7a:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <InterruptFuncTable+0xb0>
    5b7e:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <InterruptFuncTable+0xb1>
    5b82:	30 97       	sbiw	r30, 0x00	; 0
    5b84:	29 f0       	breq	.+10     	; 0x5b90 <__vector_88+0x3c>
    5b86:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <InterruptSenderTable+0xb0>
    5b8a:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <InterruptSenderTable+0xb1>
    5b8e:	19 95       	eicall
    5b90:	ff 91       	pop	r31
    5b92:	ef 91       	pop	r30
    5b94:	bf 91       	pop	r27
    5b96:	af 91       	pop	r26
    5b98:	9f 91       	pop	r25
    5b9a:	8f 91       	pop	r24
    5b9c:	7f 91       	pop	r23
    5b9e:	6f 91       	pop	r22
    5ba0:	5f 91       	pop	r21
    5ba2:	4f 91       	pop	r20
    5ba4:	3f 91       	pop	r19
    5ba6:	2f 91       	pop	r18
    5ba8:	0f 90       	pop	r0
    5baa:	0b be       	out	0x3b, r0	; 59
    5bac:	0f 90       	pop	r0
    5bae:	0f be       	out	0x3f, r0	; 63
    5bb0:	0f 90       	pop	r0
    5bb2:	1f 90       	pop	r1
    5bb4:	18 95       	reti

00005bb6 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    5bb6:	1f 92       	push	r1
    5bb8:	0f 92       	push	r0
    5bba:	0f b6       	in	r0, 0x3f	; 63
    5bbc:	0f 92       	push	r0
    5bbe:	11 24       	eor	r1, r1
    5bc0:	0b b6       	in	r0, 0x3b	; 59
    5bc2:	0f 92       	push	r0
    5bc4:	2f 93       	push	r18
    5bc6:	3f 93       	push	r19
    5bc8:	4f 93       	push	r20
    5bca:	5f 93       	push	r21
    5bcc:	6f 93       	push	r22
    5bce:	7f 93       	push	r23
    5bd0:	8f 93       	push	r24
    5bd2:	9f 93       	push	r25
    5bd4:	af 93       	push	r26
    5bd6:	bf 93       	push	r27
    5bd8:	ef 93       	push	r30
    5bda:	ff 93       	push	r31
    5bdc:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <InterruptFuncTable+0xb2>
    5be0:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <InterruptFuncTable+0xb3>
    5be4:	30 97       	sbiw	r30, 0x00	; 0
    5be6:	29 f0       	breq	.+10     	; 0x5bf2 <__vector_89+0x3c>
    5be8:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <InterruptSenderTable+0xb2>
    5bec:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <InterruptSenderTable+0xb3>
    5bf0:	19 95       	eicall
    5bf2:	ff 91       	pop	r31
    5bf4:	ef 91       	pop	r30
    5bf6:	bf 91       	pop	r27
    5bf8:	af 91       	pop	r26
    5bfa:	9f 91       	pop	r25
    5bfc:	8f 91       	pop	r24
    5bfe:	7f 91       	pop	r23
    5c00:	6f 91       	pop	r22
    5c02:	5f 91       	pop	r21
    5c04:	4f 91       	pop	r20
    5c06:	3f 91       	pop	r19
    5c08:	2f 91       	pop	r18
    5c0a:	0f 90       	pop	r0
    5c0c:	0b be       	out	0x3b, r0	; 59
    5c0e:	0f 90       	pop	r0
    5c10:	0f be       	out	0x3f, r0	; 63
    5c12:	0f 90       	pop	r0
    5c14:	1f 90       	pop	r1
    5c16:	18 95       	reti

00005c18 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    5c18:	1f 92       	push	r1
    5c1a:	0f 92       	push	r0
    5c1c:	0f b6       	in	r0, 0x3f	; 63
    5c1e:	0f 92       	push	r0
    5c20:	11 24       	eor	r1, r1
    5c22:	0b b6       	in	r0, 0x3b	; 59
    5c24:	0f 92       	push	r0
    5c26:	2f 93       	push	r18
    5c28:	3f 93       	push	r19
    5c2a:	4f 93       	push	r20
    5c2c:	5f 93       	push	r21
    5c2e:	6f 93       	push	r22
    5c30:	7f 93       	push	r23
    5c32:	8f 93       	push	r24
    5c34:	9f 93       	push	r25
    5c36:	af 93       	push	r26
    5c38:	bf 93       	push	r27
    5c3a:	ef 93       	push	r30
    5c3c:	ff 93       	push	r31
    5c3e:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <InterruptFuncTable+0xb4>
    5c42:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <InterruptFuncTable+0xb5>
    5c46:	30 97       	sbiw	r30, 0x00	; 0
    5c48:	29 f0       	breq	.+10     	; 0x5c54 <__vector_90+0x3c>
    5c4a:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <InterruptSenderTable+0xb4>
    5c4e:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <InterruptSenderTable+0xb5>
    5c52:	19 95       	eicall
    5c54:	ff 91       	pop	r31
    5c56:	ef 91       	pop	r30
    5c58:	bf 91       	pop	r27
    5c5a:	af 91       	pop	r26
    5c5c:	9f 91       	pop	r25
    5c5e:	8f 91       	pop	r24
    5c60:	7f 91       	pop	r23
    5c62:	6f 91       	pop	r22
    5c64:	5f 91       	pop	r21
    5c66:	4f 91       	pop	r20
    5c68:	3f 91       	pop	r19
    5c6a:	2f 91       	pop	r18
    5c6c:	0f 90       	pop	r0
    5c6e:	0b be       	out	0x3b, r0	; 59
    5c70:	0f 90       	pop	r0
    5c72:	0f be       	out	0x3f, r0	; 63
    5c74:	0f 90       	pop	r0
    5c76:	1f 90       	pop	r1
    5c78:	18 95       	reti

00005c7a <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    5c7a:	1f 92       	push	r1
    5c7c:	0f 92       	push	r0
    5c7e:	0f b6       	in	r0, 0x3f	; 63
    5c80:	0f 92       	push	r0
    5c82:	11 24       	eor	r1, r1
    5c84:	0b b6       	in	r0, 0x3b	; 59
    5c86:	0f 92       	push	r0
    5c88:	2f 93       	push	r18
    5c8a:	3f 93       	push	r19
    5c8c:	4f 93       	push	r20
    5c8e:	5f 93       	push	r21
    5c90:	6f 93       	push	r22
    5c92:	7f 93       	push	r23
    5c94:	8f 93       	push	r24
    5c96:	9f 93       	push	r25
    5c98:	af 93       	push	r26
    5c9a:	bf 93       	push	r27
    5c9c:	ef 93       	push	r30
    5c9e:	ff 93       	push	r31
    5ca0:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <InterruptFuncTable+0xb6>
    5ca4:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <InterruptFuncTable+0xb7>
    5ca8:	30 97       	sbiw	r30, 0x00	; 0
    5caa:	29 f0       	breq	.+10     	; 0x5cb6 <__vector_91+0x3c>
    5cac:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <InterruptSenderTable+0xb6>
    5cb0:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <InterruptSenderTable+0xb7>
    5cb4:	19 95       	eicall
    5cb6:	ff 91       	pop	r31
    5cb8:	ef 91       	pop	r30
    5cba:	bf 91       	pop	r27
    5cbc:	af 91       	pop	r26
    5cbe:	9f 91       	pop	r25
    5cc0:	8f 91       	pop	r24
    5cc2:	7f 91       	pop	r23
    5cc4:	6f 91       	pop	r22
    5cc6:	5f 91       	pop	r21
    5cc8:	4f 91       	pop	r20
    5cca:	3f 91       	pop	r19
    5ccc:	2f 91       	pop	r18
    5cce:	0f 90       	pop	r0
    5cd0:	0b be       	out	0x3b, r0	; 59
    5cd2:	0f 90       	pop	r0
    5cd4:	0f be       	out	0x3f, r0	; 63
    5cd6:	0f 90       	pop	r0
    5cd8:	1f 90       	pop	r1
    5cda:	18 95       	reti

00005cdc <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    5cdc:	1f 92       	push	r1
    5cde:	0f 92       	push	r0
    5ce0:	0f b6       	in	r0, 0x3f	; 63
    5ce2:	0f 92       	push	r0
    5ce4:	11 24       	eor	r1, r1
    5ce6:	0b b6       	in	r0, 0x3b	; 59
    5ce8:	0f 92       	push	r0
    5cea:	2f 93       	push	r18
    5cec:	3f 93       	push	r19
    5cee:	4f 93       	push	r20
    5cf0:	5f 93       	push	r21
    5cf2:	6f 93       	push	r22
    5cf4:	7f 93       	push	r23
    5cf6:	8f 93       	push	r24
    5cf8:	9f 93       	push	r25
    5cfa:	af 93       	push	r26
    5cfc:	bf 93       	push	r27
    5cfe:	ef 93       	push	r30
    5d00:	ff 93       	push	r31
    5d02:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <InterruptFuncTable+0xb8>
    5d06:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <InterruptFuncTable+0xb9>
    5d0a:	30 97       	sbiw	r30, 0x00	; 0
    5d0c:	29 f0       	breq	.+10     	; 0x5d18 <__vector_92+0x3c>
    5d0e:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <InterruptSenderTable+0xb8>
    5d12:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <InterruptSenderTable+0xb9>
    5d16:	19 95       	eicall
    5d18:	ff 91       	pop	r31
    5d1a:	ef 91       	pop	r30
    5d1c:	bf 91       	pop	r27
    5d1e:	af 91       	pop	r26
    5d20:	9f 91       	pop	r25
    5d22:	8f 91       	pop	r24
    5d24:	7f 91       	pop	r23
    5d26:	6f 91       	pop	r22
    5d28:	5f 91       	pop	r21
    5d2a:	4f 91       	pop	r20
    5d2c:	3f 91       	pop	r19
    5d2e:	2f 91       	pop	r18
    5d30:	0f 90       	pop	r0
    5d32:	0b be       	out	0x3b, r0	; 59
    5d34:	0f 90       	pop	r0
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	0f 90       	pop	r0
    5d3a:	1f 90       	pop	r1
    5d3c:	18 95       	reti

00005d3e <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    5d3e:	1f 92       	push	r1
    5d40:	0f 92       	push	r0
    5d42:	0f b6       	in	r0, 0x3f	; 63
    5d44:	0f 92       	push	r0
    5d46:	11 24       	eor	r1, r1
    5d48:	0b b6       	in	r0, 0x3b	; 59
    5d4a:	0f 92       	push	r0
    5d4c:	2f 93       	push	r18
    5d4e:	3f 93       	push	r19
    5d50:	4f 93       	push	r20
    5d52:	5f 93       	push	r21
    5d54:	6f 93       	push	r22
    5d56:	7f 93       	push	r23
    5d58:	8f 93       	push	r24
    5d5a:	9f 93       	push	r25
    5d5c:	af 93       	push	r26
    5d5e:	bf 93       	push	r27
    5d60:	ef 93       	push	r30
    5d62:	ff 93       	push	r31
    5d64:	e0 91 80 23 	lds	r30, 0x2380	; 0x802380 <InterruptFuncTable+0xba>
    5d68:	f0 91 81 23 	lds	r31, 0x2381	; 0x802381 <InterruptFuncTable+0xbb>
    5d6c:	30 97       	sbiw	r30, 0x00	; 0
    5d6e:	29 f0       	breq	.+10     	; 0x5d7a <__vector_93+0x3c>
    5d70:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <InterruptSenderTable+0xba>
    5d74:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <InterruptSenderTable+0xbb>
    5d78:	19 95       	eicall
    5d7a:	ff 91       	pop	r31
    5d7c:	ef 91       	pop	r30
    5d7e:	bf 91       	pop	r27
    5d80:	af 91       	pop	r26
    5d82:	9f 91       	pop	r25
    5d84:	8f 91       	pop	r24
    5d86:	7f 91       	pop	r23
    5d88:	6f 91       	pop	r22
    5d8a:	5f 91       	pop	r21
    5d8c:	4f 91       	pop	r20
    5d8e:	3f 91       	pop	r19
    5d90:	2f 91       	pop	r18
    5d92:	0f 90       	pop	r0
    5d94:	0b be       	out	0x3b, r0	; 59
    5d96:	0f 90       	pop	r0
    5d98:	0f be       	out	0x3f, r0	; 63
    5d9a:	0f 90       	pop	r0
    5d9c:	1f 90       	pop	r1
    5d9e:	18 95       	reti

00005da0 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    5da0:	1f 92       	push	r1
    5da2:	0f 92       	push	r0
    5da4:	0f b6       	in	r0, 0x3f	; 63
    5da6:	0f 92       	push	r0
    5da8:	11 24       	eor	r1, r1
    5daa:	0b b6       	in	r0, 0x3b	; 59
    5dac:	0f 92       	push	r0
    5dae:	2f 93       	push	r18
    5db0:	3f 93       	push	r19
    5db2:	4f 93       	push	r20
    5db4:	5f 93       	push	r21
    5db6:	6f 93       	push	r22
    5db8:	7f 93       	push	r23
    5dba:	8f 93       	push	r24
    5dbc:	9f 93       	push	r25
    5dbe:	af 93       	push	r26
    5dc0:	bf 93       	push	r27
    5dc2:	ef 93       	push	r30
    5dc4:	ff 93       	push	r31
    5dc6:	e0 91 96 23 	lds	r30, 0x2396	; 0x802396 <InterruptFuncTable+0xd0>
    5dca:	f0 91 97 23 	lds	r31, 0x2397	; 0x802397 <InterruptFuncTable+0xd1>
    5dce:	30 97       	sbiw	r30, 0x00	; 0
    5dd0:	29 f0       	breq	.+10     	; 0x5ddc <__vector_104+0x3c>
    5dd2:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <InterruptSenderTable+0xd0>
    5dd6:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <InterruptSenderTable+0xd1>
    5dda:	19 95       	eicall
    5ddc:	ff 91       	pop	r31
    5dde:	ef 91       	pop	r30
    5de0:	bf 91       	pop	r27
    5de2:	af 91       	pop	r26
    5de4:	9f 91       	pop	r25
    5de6:	8f 91       	pop	r24
    5de8:	7f 91       	pop	r23
    5dea:	6f 91       	pop	r22
    5dec:	5f 91       	pop	r21
    5dee:	4f 91       	pop	r20
    5df0:	3f 91       	pop	r19
    5df2:	2f 91       	pop	r18
    5df4:	0f 90       	pop	r0
    5df6:	0b be       	out	0x3b, r0	; 59
    5df8:	0f 90       	pop	r0
    5dfa:	0f be       	out	0x3f, r0	; 63
    5dfc:	0f 90       	pop	r0
    5dfe:	1f 90       	pop	r1
    5e00:	18 95       	reti

00005e02 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    5e02:	1f 92       	push	r1
    5e04:	0f 92       	push	r0
    5e06:	0f b6       	in	r0, 0x3f	; 63
    5e08:	0f 92       	push	r0
    5e0a:	11 24       	eor	r1, r1
    5e0c:	0b b6       	in	r0, 0x3b	; 59
    5e0e:	0f 92       	push	r0
    5e10:	2f 93       	push	r18
    5e12:	3f 93       	push	r19
    5e14:	4f 93       	push	r20
    5e16:	5f 93       	push	r21
    5e18:	6f 93       	push	r22
    5e1a:	7f 93       	push	r23
    5e1c:	8f 93       	push	r24
    5e1e:	9f 93       	push	r25
    5e20:	af 93       	push	r26
    5e22:	bf 93       	push	r27
    5e24:	ef 93       	push	r30
    5e26:	ff 93       	push	r31
    5e28:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <InterruptFuncTable+0xd2>
    5e2c:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <InterruptFuncTable+0xd3>
    5e30:	30 97       	sbiw	r30, 0x00	; 0
    5e32:	29 f0       	breq	.+10     	; 0x5e3e <__vector_105+0x3c>
    5e34:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <InterruptSenderTable+0xd2>
    5e38:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <InterruptSenderTable+0xd3>
    5e3c:	19 95       	eicall
    5e3e:	ff 91       	pop	r31
    5e40:	ef 91       	pop	r30
    5e42:	bf 91       	pop	r27
    5e44:	af 91       	pop	r26
    5e46:	9f 91       	pop	r25
    5e48:	8f 91       	pop	r24
    5e4a:	7f 91       	pop	r23
    5e4c:	6f 91       	pop	r22
    5e4e:	5f 91       	pop	r21
    5e50:	4f 91       	pop	r20
    5e52:	3f 91       	pop	r19
    5e54:	2f 91       	pop	r18
    5e56:	0f 90       	pop	r0
    5e58:	0b be       	out	0x3b, r0	; 59
    5e5a:	0f 90       	pop	r0
    5e5c:	0f be       	out	0x3f, r0	; 63
    5e5e:	0f 90       	pop	r0
    5e60:	1f 90       	pop	r1
    5e62:	18 95       	reti

00005e64 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    5e64:	1f 92       	push	r1
    5e66:	0f 92       	push	r0
    5e68:	0f b6       	in	r0, 0x3f	; 63
    5e6a:	0f 92       	push	r0
    5e6c:	11 24       	eor	r1, r1
    5e6e:	0b b6       	in	r0, 0x3b	; 59
    5e70:	0f 92       	push	r0
    5e72:	2f 93       	push	r18
    5e74:	3f 93       	push	r19
    5e76:	4f 93       	push	r20
    5e78:	5f 93       	push	r21
    5e7a:	6f 93       	push	r22
    5e7c:	7f 93       	push	r23
    5e7e:	8f 93       	push	r24
    5e80:	9f 93       	push	r25
    5e82:	af 93       	push	r26
    5e84:	bf 93       	push	r27
    5e86:	ef 93       	push	r30
    5e88:	ff 93       	push	r31
    5e8a:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <InterruptFuncTable+0xd8>
    5e8e:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <InterruptFuncTable+0xd9>
    5e92:	30 97       	sbiw	r30, 0x00	; 0
    5e94:	29 f0       	breq	.+10     	; 0x5ea0 <__vector_108+0x3c>
    5e96:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <InterruptSenderTable+0xd8>
    5e9a:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <InterruptSenderTable+0xd9>
    5e9e:	19 95       	eicall
    5ea0:	ff 91       	pop	r31
    5ea2:	ef 91       	pop	r30
    5ea4:	bf 91       	pop	r27
    5ea6:	af 91       	pop	r26
    5ea8:	9f 91       	pop	r25
    5eaa:	8f 91       	pop	r24
    5eac:	7f 91       	pop	r23
    5eae:	6f 91       	pop	r22
    5eb0:	5f 91       	pop	r21
    5eb2:	4f 91       	pop	r20
    5eb4:	3f 91       	pop	r19
    5eb6:	2f 91       	pop	r18
    5eb8:	0f 90       	pop	r0
    5eba:	0b be       	out	0x3b, r0	; 59
    5ebc:	0f 90       	pop	r0
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	0f 90       	pop	r0
    5ec2:	1f 90       	pop	r1
    5ec4:	18 95       	reti

00005ec6 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    5ec6:	1f 92       	push	r1
    5ec8:	0f 92       	push	r0
    5eca:	0f b6       	in	r0, 0x3f	; 63
    5ecc:	0f 92       	push	r0
    5ece:	11 24       	eor	r1, r1
    5ed0:	0b b6       	in	r0, 0x3b	; 59
    5ed2:	0f 92       	push	r0
    5ed4:	2f 93       	push	r18
    5ed6:	3f 93       	push	r19
    5ed8:	4f 93       	push	r20
    5eda:	5f 93       	push	r21
    5edc:	6f 93       	push	r22
    5ede:	7f 93       	push	r23
    5ee0:	8f 93       	push	r24
    5ee2:	9f 93       	push	r25
    5ee4:	af 93       	push	r26
    5ee6:	bf 93       	push	r27
    5ee8:	ef 93       	push	r30
    5eea:	ff 93       	push	r31
    5eec:	e0 91 a0 23 	lds	r30, 0x23A0	; 0x8023a0 <InterruptFuncTable+0xda>
    5ef0:	f0 91 a1 23 	lds	r31, 0x23A1	; 0x8023a1 <InterruptFuncTable+0xdb>
    5ef4:	30 97       	sbiw	r30, 0x00	; 0
    5ef6:	29 f0       	breq	.+10     	; 0x5f02 <__vector_109+0x3c>
    5ef8:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <InterruptSenderTable+0xda>
    5efc:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <InterruptSenderTable+0xdb>
    5f00:	19 95       	eicall
    5f02:	ff 91       	pop	r31
    5f04:	ef 91       	pop	r30
    5f06:	bf 91       	pop	r27
    5f08:	af 91       	pop	r26
    5f0a:	9f 91       	pop	r25
    5f0c:	8f 91       	pop	r24
    5f0e:	7f 91       	pop	r23
    5f10:	6f 91       	pop	r22
    5f12:	5f 91       	pop	r21
    5f14:	4f 91       	pop	r20
    5f16:	3f 91       	pop	r19
    5f18:	2f 91       	pop	r18
    5f1a:	0f 90       	pop	r0
    5f1c:	0b be       	out	0x3b, r0	; 59
    5f1e:	0f 90       	pop	r0
    5f20:	0f be       	out	0x3f, r0	; 63
    5f22:	0f 90       	pop	r0
    5f24:	1f 90       	pop	r1
    5f26:	18 95       	reti

00005f28 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    5f28:	1f 92       	push	r1
    5f2a:	0f 92       	push	r0
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	0f 92       	push	r0
    5f30:	11 24       	eor	r1, r1
    5f32:	0b b6       	in	r0, 0x3b	; 59
    5f34:	0f 92       	push	r0
    5f36:	2f 93       	push	r18
    5f38:	3f 93       	push	r19
    5f3a:	4f 93       	push	r20
    5f3c:	5f 93       	push	r21
    5f3e:	6f 93       	push	r22
    5f40:	7f 93       	push	r23
    5f42:	8f 93       	push	r24
    5f44:	9f 93       	push	r25
    5f46:	af 93       	push	r26
    5f48:	bf 93       	push	r27
    5f4a:	ef 93       	push	r30
    5f4c:	ff 93       	push	r31
    5f4e:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <InterruptFuncTable+0xdc>
    5f52:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <InterruptFuncTable+0xdd>
    5f56:	30 97       	sbiw	r30, 0x00	; 0
    5f58:	29 f0       	breq	.+10     	; 0x5f64 <__vector_110+0x3c>
    5f5a:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <InterruptSenderTable+0xdc>
    5f5e:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <InterruptSenderTable+0xdd>
    5f62:	19 95       	eicall
    5f64:	ff 91       	pop	r31
    5f66:	ef 91       	pop	r30
    5f68:	bf 91       	pop	r27
    5f6a:	af 91       	pop	r26
    5f6c:	9f 91       	pop	r25
    5f6e:	8f 91       	pop	r24
    5f70:	7f 91       	pop	r23
    5f72:	6f 91       	pop	r22
    5f74:	5f 91       	pop	r21
    5f76:	4f 91       	pop	r20
    5f78:	3f 91       	pop	r19
    5f7a:	2f 91       	pop	r18
    5f7c:	0f 90       	pop	r0
    5f7e:	0b be       	out	0x3b, r0	; 59
    5f80:	0f 90       	pop	r0
    5f82:	0f be       	out	0x3f, r0	; 63
    5f84:	0f 90       	pop	r0
    5f86:	1f 90       	pop	r1
    5f88:	18 95       	reti

00005f8a <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    5f8a:	1f 92       	push	r1
    5f8c:	0f 92       	push	r0
    5f8e:	0f b6       	in	r0, 0x3f	; 63
    5f90:	0f 92       	push	r0
    5f92:	11 24       	eor	r1, r1
    5f94:	0b b6       	in	r0, 0x3b	; 59
    5f96:	0f 92       	push	r0
    5f98:	2f 93       	push	r18
    5f9a:	3f 93       	push	r19
    5f9c:	4f 93       	push	r20
    5f9e:	5f 93       	push	r21
    5fa0:	6f 93       	push	r22
    5fa2:	7f 93       	push	r23
    5fa4:	8f 93       	push	r24
    5fa6:	9f 93       	push	r25
    5fa8:	af 93       	push	r26
    5faa:	bf 93       	push	r27
    5fac:	ef 93       	push	r30
    5fae:	ff 93       	push	r31
    5fb0:	e0 91 a4 23 	lds	r30, 0x23A4	; 0x8023a4 <InterruptFuncTable+0xde>
    5fb4:	f0 91 a5 23 	lds	r31, 0x23A5	; 0x8023a5 <InterruptFuncTable+0xdf>
    5fb8:	30 97       	sbiw	r30, 0x00	; 0
    5fba:	29 f0       	breq	.+10     	; 0x5fc6 <__vector_111+0x3c>
    5fbc:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <InterruptSenderTable+0xde>
    5fc0:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <InterruptSenderTable+0xdf>
    5fc4:	19 95       	eicall
    5fc6:	ff 91       	pop	r31
    5fc8:	ef 91       	pop	r30
    5fca:	bf 91       	pop	r27
    5fcc:	af 91       	pop	r26
    5fce:	9f 91       	pop	r25
    5fd0:	8f 91       	pop	r24
    5fd2:	7f 91       	pop	r23
    5fd4:	6f 91       	pop	r22
    5fd6:	5f 91       	pop	r21
    5fd8:	4f 91       	pop	r20
    5fda:	3f 91       	pop	r19
    5fdc:	2f 91       	pop	r18
    5fde:	0f 90       	pop	r0
    5fe0:	0b be       	out	0x3b, r0	; 59
    5fe2:	0f 90       	pop	r0
    5fe4:	0f be       	out	0x3f, r0	; 63
    5fe6:	0f 90       	pop	r0
    5fe8:	1f 90       	pop	r1
    5fea:	18 95       	reti

00005fec <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    5fec:	1f 92       	push	r1
    5fee:	0f 92       	push	r0
    5ff0:	0f b6       	in	r0, 0x3f	; 63
    5ff2:	0f 92       	push	r0
    5ff4:	11 24       	eor	r1, r1
    5ff6:	0b b6       	in	r0, 0x3b	; 59
    5ff8:	0f 92       	push	r0
    5ffa:	2f 93       	push	r18
    5ffc:	3f 93       	push	r19
    5ffe:	4f 93       	push	r20
    6000:	5f 93       	push	r21
    6002:	6f 93       	push	r22
    6004:	7f 93       	push	r23
    6006:	8f 93       	push	r24
    6008:	9f 93       	push	r25
    600a:	af 93       	push	r26
    600c:	bf 93       	push	r27
    600e:	ef 93       	push	r30
    6010:	ff 93       	push	r31
    6012:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <InterruptFuncTable+0xe0>
    6016:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <InterruptFuncTable+0xe1>
    601a:	30 97       	sbiw	r30, 0x00	; 0
    601c:	29 f0       	breq	.+10     	; 0x6028 <__vector_112+0x3c>
    601e:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <InterruptSenderTable+0xe0>
    6022:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <InterruptSenderTable+0xe1>
    6026:	19 95       	eicall
    6028:	ff 91       	pop	r31
    602a:	ef 91       	pop	r30
    602c:	bf 91       	pop	r27
    602e:	af 91       	pop	r26
    6030:	9f 91       	pop	r25
    6032:	8f 91       	pop	r24
    6034:	7f 91       	pop	r23
    6036:	6f 91       	pop	r22
    6038:	5f 91       	pop	r21
    603a:	4f 91       	pop	r20
    603c:	3f 91       	pop	r19
    603e:	2f 91       	pop	r18
    6040:	0f 90       	pop	r0
    6042:	0b be       	out	0x3b, r0	; 59
    6044:	0f 90       	pop	r0
    6046:	0f be       	out	0x3f, r0	; 63
    6048:	0f 90       	pop	r0
    604a:	1f 90       	pop	r1
    604c:	18 95       	reti

0000604e <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    604e:	1f 92       	push	r1
    6050:	0f 92       	push	r0
    6052:	0f b6       	in	r0, 0x3f	; 63
    6054:	0f 92       	push	r0
    6056:	11 24       	eor	r1, r1
    6058:	0b b6       	in	r0, 0x3b	; 59
    605a:	0f 92       	push	r0
    605c:	2f 93       	push	r18
    605e:	3f 93       	push	r19
    6060:	4f 93       	push	r20
    6062:	5f 93       	push	r21
    6064:	6f 93       	push	r22
    6066:	7f 93       	push	r23
    6068:	8f 93       	push	r24
    606a:	9f 93       	push	r25
    606c:	af 93       	push	r26
    606e:	bf 93       	push	r27
    6070:	ef 93       	push	r30
    6072:	ff 93       	push	r31
    6074:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <InterruptFuncTable+0xe2>
    6078:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <InterruptFuncTable+0xe3>
    607c:	30 97       	sbiw	r30, 0x00	; 0
    607e:	29 f0       	breq	.+10     	; 0x608a <__vector_113+0x3c>
    6080:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <InterruptSenderTable+0xe2>
    6084:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <InterruptSenderTable+0xe3>
    6088:	19 95       	eicall
    608a:	ff 91       	pop	r31
    608c:	ef 91       	pop	r30
    608e:	bf 91       	pop	r27
    6090:	af 91       	pop	r26
    6092:	9f 91       	pop	r25
    6094:	8f 91       	pop	r24
    6096:	7f 91       	pop	r23
    6098:	6f 91       	pop	r22
    609a:	5f 91       	pop	r21
    609c:	4f 91       	pop	r20
    609e:	3f 91       	pop	r19
    60a0:	2f 91       	pop	r18
    60a2:	0f 90       	pop	r0
    60a4:	0b be       	out	0x3b, r0	; 59
    60a6:	0f 90       	pop	r0
    60a8:	0f be       	out	0x3f, r0	; 63
    60aa:	0f 90       	pop	r0
    60ac:	1f 90       	pop	r1
    60ae:	18 95       	reti

000060b0 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    60b0:	1f 92       	push	r1
    60b2:	0f 92       	push	r0
    60b4:	0f b6       	in	r0, 0x3f	; 63
    60b6:	0f 92       	push	r0
    60b8:	11 24       	eor	r1, r1
    60ba:	0b b6       	in	r0, 0x3b	; 59
    60bc:	0f 92       	push	r0
    60be:	2f 93       	push	r18
    60c0:	3f 93       	push	r19
    60c2:	4f 93       	push	r20
    60c4:	5f 93       	push	r21
    60c6:	6f 93       	push	r22
    60c8:	7f 93       	push	r23
    60ca:	8f 93       	push	r24
    60cc:	9f 93       	push	r25
    60ce:	af 93       	push	r26
    60d0:	bf 93       	push	r27
    60d2:	ef 93       	push	r30
    60d4:	ff 93       	push	r31
    60d6:	e0 91 b4 23 	lds	r30, 0x23B4	; 0x8023b4 <InterruptFuncTable+0xee>
    60da:	f0 91 b5 23 	lds	r31, 0x23B5	; 0x8023b5 <InterruptFuncTable+0xef>
    60de:	30 97       	sbiw	r30, 0x00	; 0
    60e0:	29 f0       	breq	.+10     	; 0x60ec <__vector_119+0x3c>
    60e2:	80 91 aa 24 	lds	r24, 0x24AA	; 0x8024aa <InterruptSenderTable+0xee>
    60e6:	90 91 ab 24 	lds	r25, 0x24AB	; 0x8024ab <InterruptSenderTable+0xef>
    60ea:	19 95       	eicall
    60ec:	ff 91       	pop	r31
    60ee:	ef 91       	pop	r30
    60f0:	bf 91       	pop	r27
    60f2:	af 91       	pop	r26
    60f4:	9f 91       	pop	r25
    60f6:	8f 91       	pop	r24
    60f8:	7f 91       	pop	r23
    60fa:	6f 91       	pop	r22
    60fc:	5f 91       	pop	r21
    60fe:	4f 91       	pop	r20
    6100:	3f 91       	pop	r19
    6102:	2f 91       	pop	r18
    6104:	0f 90       	pop	r0
    6106:	0b be       	out	0x3b, r0	; 59
    6108:	0f 90       	pop	r0
    610a:	0f be       	out	0x3f, r0	; 63
    610c:	0f 90       	pop	r0
    610e:	1f 90       	pop	r1
    6110:	18 95       	reti

00006112 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    6112:	1f 92       	push	r1
    6114:	0f 92       	push	r0
    6116:	0f b6       	in	r0, 0x3f	; 63
    6118:	0f 92       	push	r0
    611a:	11 24       	eor	r1, r1
    611c:	0b b6       	in	r0, 0x3b	; 59
    611e:	0f 92       	push	r0
    6120:	2f 93       	push	r18
    6122:	3f 93       	push	r19
    6124:	4f 93       	push	r20
    6126:	5f 93       	push	r21
    6128:	6f 93       	push	r22
    612a:	7f 93       	push	r23
    612c:	8f 93       	push	r24
    612e:	9f 93       	push	r25
    6130:	af 93       	push	r26
    6132:	bf 93       	push	r27
    6134:	ef 93       	push	r30
    6136:	ff 93       	push	r31
    6138:	e0 91 b6 23 	lds	r30, 0x23B6	; 0x8023b6 <InterruptFuncTable+0xf0>
    613c:	f0 91 b7 23 	lds	r31, 0x23B7	; 0x8023b7 <InterruptFuncTable+0xf1>
    6140:	30 97       	sbiw	r30, 0x00	; 0
    6142:	29 f0       	breq	.+10     	; 0x614e <__vector_120+0x3c>
    6144:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <InterruptSenderTable+0xf0>
    6148:	90 91 ad 24 	lds	r25, 0x24AD	; 0x8024ad <InterruptSenderTable+0xf1>
    614c:	19 95       	eicall
    614e:	ff 91       	pop	r31
    6150:	ef 91       	pop	r30
    6152:	bf 91       	pop	r27
    6154:	af 91       	pop	r26
    6156:	9f 91       	pop	r25
    6158:	8f 91       	pop	r24
    615a:	7f 91       	pop	r23
    615c:	6f 91       	pop	r22
    615e:	5f 91       	pop	r21
    6160:	4f 91       	pop	r20
    6162:	3f 91       	pop	r19
    6164:	2f 91       	pop	r18
    6166:	0f 90       	pop	r0
    6168:	0b be       	out	0x3b, r0	; 59
    616a:	0f 90       	pop	r0
    616c:	0f be       	out	0x3f, r0	; 63
    616e:	0f 90       	pop	r0
    6170:	1f 90       	pop	r1
    6172:	18 95       	reti

00006174 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    6174:	1f 92       	push	r1
    6176:	0f 92       	push	r0
    6178:	0f b6       	in	r0, 0x3f	; 63
    617a:	0f 92       	push	r0
    617c:	11 24       	eor	r1, r1
    617e:	0b b6       	in	r0, 0x3b	; 59
    6180:	0f 92       	push	r0
    6182:	2f 93       	push	r18
    6184:	3f 93       	push	r19
    6186:	4f 93       	push	r20
    6188:	5f 93       	push	r21
    618a:	6f 93       	push	r22
    618c:	7f 93       	push	r23
    618e:	8f 93       	push	r24
    6190:	9f 93       	push	r25
    6192:	af 93       	push	r26
    6194:	bf 93       	push	r27
    6196:	ef 93       	push	r30
    6198:	ff 93       	push	r31
    619a:	e0 91 b8 23 	lds	r30, 0x23B8	; 0x8023b8 <InterruptFuncTable+0xf2>
    619e:	f0 91 b9 23 	lds	r31, 0x23B9	; 0x8023b9 <InterruptFuncTable+0xf3>
    61a2:	30 97       	sbiw	r30, 0x00	; 0
    61a4:	29 f0       	breq	.+10     	; 0x61b0 <__vector_121+0x3c>
    61a6:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <InterruptSenderTable+0xf2>
    61aa:	90 91 af 24 	lds	r25, 0x24AF	; 0x8024af <InterruptSenderTable+0xf3>
    61ae:	19 95       	eicall
    61b0:	ff 91       	pop	r31
    61b2:	ef 91       	pop	r30
    61b4:	bf 91       	pop	r27
    61b6:	af 91       	pop	r26
    61b8:	9f 91       	pop	r25
    61ba:	8f 91       	pop	r24
    61bc:	7f 91       	pop	r23
    61be:	6f 91       	pop	r22
    61c0:	5f 91       	pop	r21
    61c2:	4f 91       	pop	r20
    61c4:	3f 91       	pop	r19
    61c6:	2f 91       	pop	r18
    61c8:	0f 90       	pop	r0
    61ca:	0b be       	out	0x3b, r0	; 59
    61cc:	0f 90       	pop	r0
    61ce:	0f be       	out	0x3f, r0	; 63
    61d0:	0f 90       	pop	r0
    61d2:	1f 90       	pop	r1
    61d4:	18 95       	reti

000061d6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    61d6:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    61da:	fd cf       	rjmp	.-6      	; 0x61d6 <__cxa_pure_virtual>

000061dc <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    61dc:	85 e2       	ldi	r24, 0x25	; 37
    61de:	96 e2       	ldi	r25, 0x26	; 38
    61e0:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_ZN4CSPIC1Ev>
CTimerC timer;
    61e4:	82 e2       	ldi	r24, 0x22	; 34
    61e6:	96 e2       	ldi	r25, 0x26	; 38
    61e8:	0e 94 56 3b 	call	0x76ac	; 0x76ac <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    61ec:	8f e1       	ldi	r24, 0x1F	; 31
    61ee:	96 e2       	ldi	r25, 0x26	; 38
    61f0:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    61f4:	8c e1       	ldi	r24, 0x1C	; 28
    61f6:	96 e2       	ldi	r25, 0x26	; 38
    61f8:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    61fc:	89 e1       	ldi	r24, 0x19	; 25
    61fe:	96 e2       	ldi	r25, 0x26	; 38
    6200:	0e 94 05 3c 	call	0x780a	; 0x780a <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    6204:	86 e1       	ldi	r24, 0x16	; 22
    6206:	96 e2       	ldi	r25, 0x26	; 38
    6208:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    620c:	84 e1       	ldi	r24, 0x14	; 20
    620e:	96 e2       	ldi	r25, 0x26	; 38
    6210:	0e 94 dd 37 	call	0x6fba	; 0x6fba <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    6214:	8c e0       	ldi	r24, 0x0C	; 12
    6216:	96 e2       	ldi	r25, 0x26	; 38
    6218:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    621c:	8f ee       	ldi	r24, 0xEF	; 239
    621e:	95 e2       	ldi	r25, 0x25	; 37
    6220:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    6224:	85 ee       	ldi	r24, 0xE5	; 229
    6226:	95 e2       	ldi	r25, 0x25	; 37
    6228:	0e 94 0e 39 	call	0x721c	; 0x721c <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    622c:	84 ee       	ldi	r24, 0xE4	; 228
    622e:	95 e2       	ldi	r25, 0x25	; 37
    6230:	0e 94 1d 3a 	call	0x743a	; 0x743a <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    6234:	8a eb       	ldi	r24, 0xBA	; 186
    6236:	94 e2       	ldi	r25, 0x24	; 36
    6238:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    623c:	86 eb       	ldi	r24, 0xB6	; 182
    623e:	94 e2       	ldi	r25, 0x24	; 36
    6240:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <_ZN8CDS18B20C1Ev>
    6244:	08 95       	ret

00006246 <_GLOBAL__sub_D_dacSPI>:
    6246:	86 eb       	ldi	r24, 0xB6	; 182
    6248:	94 e2       	ldi	r25, 0x24	; 36
    624a:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    624e:	8a eb       	ldi	r24, 0xBA	; 186
    6250:	94 e2       	ldi	r25, 0x24	; 36
    6252:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    6256:	84 ee       	ldi	r24, 0xE4	; 228
    6258:	95 e2       	ldi	r25, 0x25	; 37
    625a:	0e 94 1e 3a 	call	0x743c	; 0x743c <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    625e:	85 ee       	ldi	r24, 0xE5	; 229
    6260:	95 e2       	ldi	r25, 0x25	; 37
    6262:	0e 94 0f 39 	call	0x721e	; 0x721e <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    6266:	8f ee       	ldi	r24, 0xEF	; 239
    6268:	95 e2       	ldi	r25, 0x25	; 37
    626a:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    626e:	8c e0       	ldi	r24, 0x0C	; 12
    6270:	96 e2       	ldi	r25, 0x26	; 38
    6272:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    6276:	84 e1       	ldi	r24, 0x14	; 20
    6278:	96 e2       	ldi	r25, 0x26	; 38
    627a:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    627e:	86 e1       	ldi	r24, 0x16	; 22
    6280:	96 e2       	ldi	r25, 0x26	; 38
    6282:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    6286:	89 e1       	ldi	r24, 0x19	; 25
    6288:	96 e2       	ldi	r25, 0x26	; 38
    628a:	0e 94 11 3c 	call	0x7822	; 0x7822 <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    628e:	8c e1       	ldi	r24, 0x1C	; 28
    6290:	96 e2       	ldi	r25, 0x26	; 38
    6292:	0e 94 6e 3e 	call	0x7cdc	; 0x7cdc <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    6296:	8f e1       	ldi	r24, 0x1F	; 31
    6298:	96 e2       	ldi	r25, 0x26	; 38
    629a:	0e 94 8d 3d 	call	0x7b1a	; 0x7b1a <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    629e:	82 e2       	ldi	r24, 0x22	; 34
    62a0:	96 e2       	ldi	r25, 0x26	; 38
    62a2:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    62a6:	85 e2       	ldi	r24, 0x25	; 37
    62a8:	96 e2       	ldi	r25, 0x26	; 38
    62aa:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <_ZN4CSPID1Ev>
    62ae:	08 95       	ret

000062b0 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    62b0:	cf 92       	push	r12
    62b2:	df 92       	push	r13
    62b4:	ef 92       	push	r14
    62b6:	ff 92       	push	r15
    62b8:	0f 93       	push	r16
    62ba:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    62bc:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    62be:	84 e6       	ldi	r24, 0x64	; 100
    62c0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize modules
	laserBoard.InitializeIO();
    62c4:	85 ee       	ldi	r24, 0xE5	; 229
    62c6:	95 e2       	ldi	r25, 0x25	; 37
    62c8:	0e 94 10 39 	call	0x7220	; 0x7220 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    62cc:	86 eb       	ldi	r24, 0xB6	; 182
    62ce:	94 e2       	ldi	r25, 0x24	; 36
    62d0:	0e 94 ff 38 	call	0x71fe	; 0x71fe <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    62d4:	84 ee       	ldi	r24, 0xE4	; 228
    62d6:	95 e2       	ldi	r25, 0x25	; 37
    62d8:	0e 94 8e 3a 	call	0x751c	; 0x751c <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    62dc:	46 e0       	ldi	r20, 0x06	; 6
    62de:	60 e0       	ldi	r22, 0x00	; 0
    62e0:	82 e2       	ldi	r24, 0x22	; 34
    62e2:	96 e2       	ldi	r25, 0x26	; 38
    62e4:	0e 94 99 3a 	call	0x7532	; 0x7532 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    62e8:	68 ea       	ldi	r22, 0xA8	; 168
    62ea:	71 e6       	ldi	r23, 0x61	; 97
    62ec:	82 e2       	ldi	r24, 0x22	; 34
    62ee:	96 e2       	ldi	r25, 0x26	; 38
    62f0:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    62f4:	21 e0       	ldi	r18, 0x01	; 1
    62f6:	4a eb       	ldi	r20, 0xBA	; 186
    62f8:	54 e2       	ldi	r21, 0x24	; 36
    62fa:	6b ea       	ldi	r22, 0xAB	; 171
    62fc:	73 e1       	ldi	r23, 0x13	; 19
    62fe:	82 e2       	ldi	r24, 0x22	; 34
    6300:	96 e2       	ldi	r25, 0x26	; 38
    6302:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    6306:	47 e0       	ldi	r20, 0x07	; 7
    6308:	60 e0       	ldi	r22, 0x00	; 0
    630a:	8f e1       	ldi	r24, 0x1F	; 31
    630c:	96 e2       	ldi	r25, 0x26	; 38
    630e:	0e 94 ea 3c 	call	0x79d4	; 0x79d4 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    6312:	62 e1       	ldi	r22, 0x12	; 18
    6314:	7a e7       	ldi	r23, 0x7A	; 122
    6316:	8f e1       	ldi	r24, 0x1F	; 31
    6318:	96 e2       	ldi	r25, 0x26	; 38
    631a:	0e 94 2e 3d 	call	0x7a5c	; 0x7a5c <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    631e:	48 e0       	ldi	r20, 0x08	; 8
    6320:	60 e0       	ldi	r22, 0x00	; 0
    6322:	89 e1       	ldi	r24, 0x19	; 25
    6324:	96 e2       	ldi	r25, 0x26	; 38
    6326:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    632a:	6f ef       	ldi	r22, 0xFF	; 255
    632c:	7f ef       	ldi	r23, 0xFF	; 255
    632e:	89 e1       	ldi	r24, 0x19	; 25
    6330:	96 e2       	ldi	r25, 0x26	; 38
    6332:	0e 94 ae 3b 	call	0x775c	; 0x775c <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    6336:	6f ef       	ldi	r22, 0xFF	; 255
    6338:	7f ef       	ldi	r23, 0xFF	; 255
    633a:	89 e1       	ldi	r24, 0x19	; 25
    633c:	96 e2       	ldi	r25, 0x26	; 38
    633e:	0e 94 81 3b 	call	0x7702	; 0x7702 <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    6342:	45 e0       	ldi	r20, 0x05	; 5
    6344:	63 e0       	ldi	r22, 0x03	; 3
    6346:	86 e1       	ldi	r24, 0x16	; 22
    6348:	96 e2       	ldi	r25, 0x26	; 38
    634a:	0e 94 19 3c 	call	0x7832	; 0x7832 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    634e:	60 e0       	ldi	r22, 0x00	; 0
    6350:	72 e0       	ldi	r23, 0x02	; 2
    6352:	86 e1       	ldi	r24, 0x16	; 22
    6354:	96 e2       	ldi	r25, 0x26	; 38
    6356:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    635a:	85 ee       	ldi	r24, 0xE5	; 229
    635c:	95 e2       	ldi	r25, 0x25	; 37
    635e:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    6362:	85 ee       	ldi	r24, 0xE5	; 229
    6364:	95 e2       	ldi	r25, 0x25	; 37
    6366:	0e 94 b2 39 	call	0x7364	; 0x7364 <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    636a:	85 ee       	ldi	r24, 0xE5	; 229
    636c:	95 e2       	ldi	r25, 0x25	; 37
    636e:	0e 94 b6 39 	call	0x736c	; 0x736c <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    6372:	85 ee       	ldi	r24, 0xE5	; 229
    6374:	95 e2       	ldi	r25, 0x25	; 37
    6376:	0e 94 ba 39 	call	0x7374	; 0x7374 <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    637a:	21 e0       	ldi	r18, 0x01	; 1
    637c:	4a eb       	ldi	r20, 0xBA	; 186
    637e:	54 e2       	ldi	r21, 0x24	; 36
    6380:	6c e1       	ldi	r22, 0x1C	; 28
    6382:	76 e0       	ldi	r23, 0x06	; 6
    6384:	86 e1       	ldi	r24, 0x16	; 22
    6386:	96 e2       	ldi	r25, 0x26	; 38
    6388:	0e 94 70 3c 	call	0x78e0	; 0x78e0 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    638c:	21 e0       	ldi	r18, 0x01	; 1
    638e:	4a eb       	ldi	r20, 0xBA	; 186
    6390:	54 e2       	ldi	r21, 0x24	; 36
    6392:	6f e1       	ldi	r22, 0x1F	; 31
    6394:	76 e0       	ldi	r23, 0x06	; 6
    6396:	86 e1       	ldi	r24, 0x16	; 22
    6398:	96 e2       	ldi	r25, 0x26	; 38
    639a:	0e 94 92 3c 	call	0x7924	; 0x7924 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    639e:	60 e0       	ldi	r22, 0x00	; 0
    63a0:	71 e0       	ldi	r23, 0x01	; 1
    63a2:	86 e1       	ldi	r24, 0x16	; 22
    63a4:	96 e2       	ldi	r25, 0x26	; 38
    63a6:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    63aa:	60 e0       	ldi	r22, 0x00	; 0
    63ac:	72 e0       	ldi	r23, 0x02	; 2
    63ae:	86 e1       	ldi	r24, 0x16	; 22
    63b0:	96 e2       	ldi	r25, 0x26	; 38
    63b2:	0e 94 66 3c 	call	0x78cc	; 0x78cc <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    63b6:	60 e0       	ldi	r22, 0x00	; 0
    63b8:	73 e0       	ldi	r23, 0x03	; 3
    63ba:	86 e1       	ldi	r24, 0x16	; 22
    63bc:	96 e2       	ldi	r25, 0x26	; 38
    63be:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    63c2:	2c e0       	ldi	r18, 0x0C	; 12
    63c4:	4a eb       	ldi	r20, 0xBA	; 186
    63c6:	54 e2       	ldi	r21, 0x24	; 36
    63c8:	62 e2       	ldi	r22, 0x22	; 34
    63ca:	76 e0       	ldi	r23, 0x06	; 6
    63cc:	86 e1       	ldi	r24, 0x16	; 22
    63ce:	96 e2       	ldi	r25, 0x26	; 38
    63d0:	0e 94 a3 3c 	call	0x7946	; 0x7946 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    63d4:	20 e3       	ldi	r18, 0x30	; 48
    63d6:	4a eb       	ldi	r20, 0xBA	; 186
    63d8:	54 e2       	ldi	r21, 0x24	; 36
    63da:	63 e2       	ldi	r22, 0x23	; 35
    63dc:	76 e0       	ldi	r23, 0x06	; 6
    63de:	86 e1       	ldi	r24, 0x16	; 22
    63e0:	96 e2       	ldi	r25, 0x26	; 38
    63e2:	0e 94 b4 3c 	call	0x7968	; 0x7968 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    63e6:	20 ec       	ldi	r18, 0xC0	; 192
    63e8:	4a eb       	ldi	r20, 0xBA	; 186
    63ea:	54 e2       	ldi	r21, 0x24	; 36
    63ec:	64 e2       	ldi	r22, 0x24	; 36
    63ee:	76 e0       	ldi	r23, 0x06	; 6
    63f0:	86 e1       	ldi	r24, 0x16	; 22
    63f2:	96 e2       	ldi	r25, 0x26	; 38
    63f4:	0e 94 c5 3c 	call	0x798a	; 0x798a <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    63f8:	60 e0       	ldi	r22, 0x00	; 0
    63fa:	74 e0       	ldi	r23, 0x04	; 4
    63fc:	86 e1       	ldi	r24, 0x16	; 22
    63fe:	96 e2       	ldi	r25, 0x26	; 38
    6400:	0e 94 34 3c 	call	0x7868	; 0x7868 <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    6404:	0f 2e       	mov	r0, r31
    6406:	f3 e0       	ldi	r31, 0x03	; 3
    6408:	ef 2e       	mov	r14, r31
    640a:	f0 2d       	mov	r31, r0
    640c:	00 e0       	ldi	r16, 0x00	; 0
    640e:	23 e0       	ldi	r18, 0x03	; 3
    6410:	40 e0       	ldi	r20, 0x00	; 0
    6412:	61 e0       	ldi	r22, 0x01	; 1
    6414:	85 e2       	ldi	r24, 0x25	; 37
    6416:	96 e2       	ldi	r25, 0x26	; 38
    6418:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    641c:	01 e0       	ldi	r16, 0x01	; 1
    641e:	20 e0       	ldi	r18, 0x00	; 0
    6420:	40 e0       	ldi	r20, 0x00	; 0
    6422:	6d e0       	ldi	r22, 0x0D	; 13
    6424:	84 e1       	ldi	r24, 0x14	; 20
    6426:	96 e2       	ldi	r25, 0x26	; 38
    6428:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    642c:	0f 2e       	mov	r0, r31
    642e:	f2 e1       	ldi	r31, 0x12	; 18
    6430:	cf 2e       	mov	r12, r31
    6432:	fa e7       	ldi	r31, 0x7A	; 122
    6434:	df 2e       	mov	r13, r31
    6436:	f0 2d       	mov	r31, r0
    6438:	e1 2c       	mov	r14, r1
    643a:	ff 24       	eor	r15, r15
    643c:	f3 94       	inc	r15
    643e:	00 e0       	ldi	r16, 0x00	; 0
    6440:	11 e0       	ldi	r17, 0x01	; 1
    6442:	2a eb       	ldi	r18, 0xBA	; 186
    6444:	34 e2       	ldi	r19, 0x24	; 36
    6446:	44 e1       	ldi	r20, 0x14	; 20
    6448:	56 e2       	ldi	r21, 0x26	; 38
    644a:	6f e1       	ldi	r22, 0x1F	; 31
    644c:	76 e2       	ldi	r23, 0x26	; 38
    644e:	8f ee       	ldi	r24, 0xEF	; 239
    6450:	95 e2       	ldi	r25, 0x25	; 37
    6452:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    6456:	40 e0       	ldi	r20, 0x00	; 0
    6458:	51 e0       	ldi	r21, 0x01	; 1
    645a:	6f ee       	ldi	r22, 0xEF	; 239
    645c:	75 e2       	ldi	r23, 0x25	; 37
    645e:	8c e0       	ldi	r24, 0x0C	; 12
    6460:	96 e2       	ldi	r25, 0x26	; 38
    6462:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    6466:	6f ee       	ldi	r22, 0xEF	; 239
    6468:	75 e2       	ldi	r23, 0x25	; 37
    646a:	8a eb       	ldi	r24, 0xBA	; 186
    646c:	94 e2       	ldi	r25, 0x24	; 36
    646e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    6472:	85 ee       	ldi	r24, 0xE5	; 229
    6474:	95 e2       	ldi	r25, 0x25	; 37
    6476:	0e 94 75 39 	call	0x72ea	; 0x72ea <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    647a:	8a eb       	ldi	r24, 0xBA	; 186
    647c:	94 e2       	ldi	r25, 0x24	; 36
    647e:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <InterruptSenderTable+0x4>
    6482:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <InterruptSenderTable+0x5>
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    6486:	81 e9       	ldi	r24, 0x91	; 145
    6488:	9c e1       	ldi	r25, 0x1C	; 28
    648a:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <InterruptFuncTable+0x4>
    648e:	90 93 cb 22 	sts	0x22CB, r25	; 0x8022cb <InterruptFuncTable+0x5>
	
	sei();	/* Enable global interrupts */
    6492:	78 94       	sei
}
    6494:	1f 91       	pop	r17
    6496:	0f 91       	pop	r16
    6498:	ff 90       	pop	r15
    649a:	ef 90       	pop	r14
    649c:	df 90       	pop	r13
    649e:	cf 90       	pop	r12
    64a0:	08 95       	ret

000064a2 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
    64a6:	1f 92       	push	r1
    64a8:	1f 92       	push	r1
    64aa:	cd b7       	in	r28, 0x3d	; 61
    64ac:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    64ae:	0e 94 58 31 	call	0x62b0	; 0x62b0 <_Z16SystemInitializev>
    64b2:	2a ea       	ldi	r18, 0xAA	; 170
    64b4:	36 ee       	ldi	r19, 0xE6	; 230
    64b6:	86 e9       	ldi	r24, 0x96	; 150
    64b8:	91 e0       	ldi	r25, 0x01	; 1
    64ba:	21 50       	subi	r18, 0x01	; 1
    64bc:	30 40       	sbci	r19, 0x00	; 0
    64be:	80 40       	sbci	r24, 0x00	; 0
    64c0:	90 40       	sbci	r25, 0x00	; 0
    64c2:	d9 f7       	brne	.-10     	; 0x64ba <main+0x18>
    64c4:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    64c6:	85 ee       	ldi	r24, 0xE5	; 229
    64c8:	95 e2       	ldi	r25, 0x25	; 37
    64ca:	0e 94 be 39 	call	0x737c	; 0x737c <_ZN11CLaserBoard8Relay1OnEv>
    64ce:	2f ef       	ldi	r18, 0xFF	; 255
    64d0:	33 ec       	ldi	r19, 0xC3	; 195
    64d2:	89 e0       	ldi	r24, 0x09	; 9
    64d4:	21 50       	subi	r18, 0x01	; 1
    64d6:	30 40       	sbci	r19, 0x00	; 0
    64d8:	80 40       	sbci	r24, 0x00	; 0
    64da:	e1 f7       	brne	.-8      	; 0x64d4 <main+0x32>
    64dc:	00 c0       	rjmp	.+0      	; 0x64de <main+0x3c>
    64de:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    64e0:	19 82       	std	Y+1, r1	; 0x01
    64e2:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    64e4:	42 e0       	ldi	r20, 0x02	; 2
    64e6:	50 e0       	ldi	r21, 0x00	; 0
    64e8:	be 01       	movw	r22, r28
    64ea:	6f 5f       	subi	r22, 0xFF	; 255
    64ec:	7f 4f       	sbci	r23, 0xFF	; 255
    64ee:	85 e2       	ldi	r24, 0x25	; 37
    64f0:	96 e2       	ldi	r25, 0x26	; 38
    64f2:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    64f6:	8a eb       	ldi	r24, 0xBA	; 186
    64f8:	94 e2       	ldi	r25, 0x24	; 36
    64fa:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    64fe:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    6500:	85 ee       	ldi	r24, 0xE5	; 229
    6502:	95 e2       	ldi	r25, 0x25	; 37
    6504:	0e 94 14 3a 	call	0x7428	; 0x7428 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    6508:	8a eb       	ldi	r24, 0xBA	; 186
    650a:	94 e2       	ldi	r25, 0x24	; 36
    650c:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    6510:	40 91 b2 24 	lds	r20, 0x24B2	; 0x8024b2 <_ZZ4mainE3prs>
    6514:	50 91 b3 24 	lds	r21, 0x24B3	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    6518:	ca 01       	movw	r24, r20
    651a:	01 96       	adiw	r24, 0x01	; 1
    651c:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <_ZZ4mainE3prs>
    6520:	90 93 b3 24 	sts	0x24B3, r25	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    6524:	9a 01       	movw	r18, r20
    6526:	a9 e8       	ldi	r26, 0x89	; 137
    6528:	b8 e8       	ldi	r27, 0x88	; 136
    652a:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    652e:	96 95       	lsr	r25
    6530:	87 95       	ror	r24
    6532:	96 95       	lsr	r25
    6534:	87 95       	ror	r24
    6536:	96 95       	lsr	r25
    6538:	87 95       	ror	r24
    653a:	18 9f       	mul	r17, r24
    653c:	90 01       	movw	r18, r0
    653e:	19 9f       	mul	r17, r25
    6540:	30 0d       	add	r19, r0
    6542:	11 24       	eor	r1, r1
    6544:	42 17       	cp	r20, r18
    6546:	53 07       	cpc	r21, r19
    6548:	41 f4       	brne	.+16     	; 0x655a <main+0xb8>
				temperature = D18B20.temp_18b20();
    654a:	86 eb       	ldi	r24, 0xB6	; 182
    654c:	94 e2       	ldi	r25, 0x24	; 36
    654e:	0e 94 88 38 	call	0x7110	; 0x7110 <_ZN8CDS18B2010temp_18b20Ev>
    6552:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <temperature>
    6556:	90 93 b5 24 	sts	0x24B5, r25	; 0x8024b5 <temperature+0x1>
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    655a:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    655e:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    6562:	8a 30       	cpi	r24, 0x0A	; 10
    6564:	91 40       	sbci	r25, 0x01	; 1
    6566:	24 f0       	brlt	.+8      	; 0x6570 <main+0xce>
				laserBoard.Relay2On();
    6568:	85 ee       	ldi	r24, 0xE5	; 229
    656a:	95 e2       	ldi	r25, 0x25	; 37
    656c:	0e 94 c2 39 	call	0x7384	; 0x7384 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    6570:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    6574:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    6578:	8f 3f       	cpi	r24, 0xFF	; 255
    657a:	91 05       	cpc	r25, r1
    657c:	0c f6       	brge	.-126    	; 0x6500 <main+0x5e>
				laserBoard.Relay2Off();			
    657e:	85 ee       	ldi	r24, 0xE5	; 229
    6580:	95 e2       	ldi	r25, 0x25	; 37
    6582:	0e 94 c6 39 	call	0x738c	; 0x738c <_ZN11CLaserBoard9Relay2OffEv>
    6586:	bc cf       	rjmp	.-136    	; 0x6500 <main+0x5e>

00006588 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	index = crch ^ data;	
	crch  = crcl ^ CRCTABH[index];
	crcl  = CRCTABL[index];

	return (crch << 8) | crcl;
}
    6588:	ef 92       	push	r14
    658a:	ff 92       	push	r15
    658c:	0f 93       	push	r16
    658e:	1f 93       	push	r17
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
    6594:	8c 01       	movw	r16, r24
    6596:	dc 01       	movw	r26, r24
    6598:	14 96       	adiw	r26, 0x04	; 4
    659a:	ed 91       	ld	r30, X+
    659c:	fc 91       	ld	r31, X
    659e:	15 97       	sbiw	r26, 0x05	; 5
    65a0:	8a ea       	ldi	r24, 0xAA	; 170
    65a2:	80 83       	st	Z, r24
    65a4:	14 96       	adiw	r26, 0x04	; 4
    65a6:	ed 91       	ld	r30, X+
    65a8:	fc 91       	ld	r31, X
    65aa:	15 97       	sbiw	r26, 0x05	; 5
    65ac:	8c ec       	ldi	r24, 0xCC	; 204
    65ae:	81 83       	std	Z+1, r24	; 0x01
    65b0:	14 96       	adiw	r26, 0x04	; 4
    65b2:	ed 91       	ld	r30, X+
    65b4:	fc 91       	ld	r31, X
    65b6:	15 97       	sbiw	r26, 0x05	; 5
    65b8:	85 e0       	ldi	r24, 0x05	; 5
    65ba:	82 0f       	add	r24, r18
    65bc:	82 83       	std	Z+2, r24	; 0x02
    65be:	14 96       	adiw	r26, 0x04	; 4
    65c0:	ed 91       	ld	r30, X+
    65c2:	fc 91       	ld	r31, X
    65c4:	15 97       	sbiw	r26, 0x05	; 5
    65c6:	82 e8       	ldi	r24, 0x82	; 130
    65c8:	83 83       	std	Z+3, r24	; 0x03
    65ca:	14 96       	adiw	r26, 0x04	; 4
    65cc:	ed 91       	ld	r30, X+
    65ce:	fc 91       	ld	r31, X
    65d0:	15 97       	sbiw	r26, 0x05	; 5
    65d2:	74 83       	std	Z+4, r23	; 0x04
    65d4:	14 96       	adiw	r26, 0x04	; 4
    65d6:	ed 91       	ld	r30, X+
    65d8:	fc 91       	ld	r31, X
    65da:	15 97       	sbiw	r26, 0x05	; 5
    65dc:	65 83       	std	Z+5, r22	; 0x05
    65de:	86 e0       	ldi	r24, 0x06	; 6
    65e0:	82 0f       	add	r24, r18
    65e2:	19 96       	adiw	r26, 0x09	; 9
    65e4:	8c 93       	st	X, r24
    65e6:	c9 01       	movw	r24, r18
    65e8:	96 95       	lsr	r25
    65ea:	87 95       	ror	r24
    65ec:	00 97       	sbiw	r24, 0x00	; 0
    65ee:	d9 f0       	breq	.+54     	; 0x6626 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x9e>
    65f0:	e4 2f       	mov	r30, r20
    65f2:	f5 2f       	mov	r31, r21
    65f4:	03 96       	adiw	r24, 0x03	; 3
    65f6:	88 0f       	add	r24, r24
    65f8:	99 1f       	adc	r25, r25
    65fa:	46 e0       	ldi	r20, 0x06	; 6
    65fc:	50 e0       	ldi	r21, 0x00	; 0
    65fe:	e8 01       	movw	r28, r16
    6600:	ac 81       	ldd	r26, Y+4	; 0x04
    6602:	bd 81       	ldd	r27, Y+5	; 0x05
    6604:	a4 0f       	add	r26, r20
    6606:	b5 1f       	adc	r27, r21
    6608:	61 81       	ldd	r22, Z+1	; 0x01
    660a:	6c 93       	st	X, r22
    660c:	ac 81       	ldd	r26, Y+4	; 0x04
    660e:	bd 81       	ldd	r27, Y+5	; 0x05
    6610:	a4 0f       	add	r26, r20
    6612:	b5 1f       	adc	r27, r21
    6614:	60 81       	ld	r22, Z
    6616:	32 96       	adiw	r30, 0x02	; 2
    6618:	11 96       	adiw	r26, 0x01	; 1
    661a:	6c 93       	st	X, r22
    661c:	4e 5f       	subi	r20, 0xFE	; 254
    661e:	5f 4f       	sbci	r21, 0xFF	; 255
    6620:	48 17       	cp	r20, r24
    6622:	59 07       	cpc	r21, r25
    6624:	61 f7       	brne	.-40     	; 0x65fe <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x76>
    6626:	f8 01       	movw	r30, r16
    6628:	81 85       	ldd	r24, Z+9	; 0x09
    662a:	a8 2f       	mov	r26, r24
    662c:	b0 e0       	ldi	r27, 0x00	; 0
    662e:	a4 30       	cpi	r26, 0x04	; 4
    6630:	b1 05       	cpc	r27, r1
    6632:	34 f1       	brlt	.+76     	; 0x6680 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xf8>
    6634:	04 80       	ldd	r0, Z+4	; 0x04
    6636:	f5 81       	ldd	r31, Z+5	; 0x05
    6638:	e0 2d       	mov	r30, r0
    663a:	33 96       	adiw	r30, 0x03	; 3
    663c:	63 e0       	ldi	r22, 0x03	; 3
    663e:	70 e0       	ldi	r23, 0x00	; 0
    6640:	4f ef       	ldi	r20, 0xFF	; 255
    6642:	5f ef       	ldi	r21, 0xFF	; 255
    6644:	91 91       	ld	r25, Z+
    6646:	49 27       	eor	r20, r25
    6648:	94 2f       	mov	r25, r20
    664a:	92 95       	swap	r25
    664c:	94 27       	eor	r25, r20
    664e:	09 2e       	mov	r0, r25
    6650:	96 95       	lsr	r25
    6652:	96 95       	lsr	r25
    6654:	90 25       	eor	r25, r0
    6656:	09 2e       	mov	r0, r25
    6658:	96 95       	lsr	r25
    665a:	90 25       	eor	r25, r0
    665c:	97 70       	andi	r25, 0x07	; 7
    665e:	04 2e       	mov	r0, r20
    6660:	45 2f       	mov	r20, r21
    6662:	96 95       	lsr	r25
    6664:	07 94       	ror	r0
    6666:	97 95       	ror	r25
    6668:	50 2d       	mov	r21, r0
    666a:	49 27       	eor	r20, r25
    666c:	06 94       	lsr	r0
    666e:	97 95       	ror	r25
    6670:	50 25       	eor	r21, r0
    6672:	49 27       	eor	r20, r25
    6674:	6f 5f       	subi	r22, 0xFF	; 255
    6676:	7f 4f       	sbci	r23, 0xFF	; 255
    6678:	6a 17       	cp	r22, r26
    667a:	7b 07       	cpc	r23, r27
    667c:	1c f3       	brlt	.-58     	; 0x6644 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xbc>
    667e:	02 c0       	rjmp	.+4      	; 0x6684 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xfc>
    6680:	4f ef       	ldi	r20, 0xFF	; 255
    6682:	5f ef       	ldi	r21, 0xFF	; 255
    6684:	d8 01       	movw	r26, r16
    6686:	14 96       	adiw	r26, 0x04	; 4
    6688:	ed 91       	ld	r30, X+
    668a:	fc 91       	ld	r31, X
    668c:	15 97       	sbiw	r26, 0x05	; 5
    668e:	e8 0f       	add	r30, r24
    6690:	f1 1d       	adc	r31, r1
    6692:	51 83       	std	Z+1, r21	; 0x01
    6694:	19 96       	adiw	r26, 0x09	; 9
    6696:	8c 91       	ld	r24, X
    6698:	19 97       	sbiw	r26, 0x09	; 9
    669a:	14 96       	adiw	r26, 0x04	; 4
    669c:	ed 91       	ld	r30, X+
    669e:	fc 91       	ld	r31, X
    66a0:	15 97       	sbiw	r26, 0x05	; 5
    66a2:	e8 0f       	add	r30, r24
    66a4:	f1 1d       	adc	r31, r1
    66a6:	40 83       	st	Z, r20
    66a8:	28 5f       	subi	r18, 0xF8	; 248
    66aa:	19 96       	adiw	r26, 0x09	; 9
    66ac:	2c 93       	st	X, r18
    66ae:	df 91       	pop	r29
    66b0:	cf 91       	pop	r28
    66b2:	1f 91       	pop	r17
    66b4:	0f 91       	pop	r16
    66b6:	ff 90       	pop	r15
    66b8:	ef 90       	pop	r14
    66ba:	08 95       	ret

000066bc <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
    66bc:	0f 93       	push	r16
    66be:	1f 93       	push	r17
    66c0:	cf 93       	push	r28
    66c2:	df 93       	push	r29
    66c4:	ec 01       	movw	r28, r24
    66c6:	cb 01       	movw	r24, r22
    66c8:	8a 01       	movw	r16, r20
    66ca:	6f 83       	std	Y+7, r22	; 0x07
    66cc:	78 87       	std	Y+8, r23	; 0x08
    66ce:	4a 87       	std	Y+10, r20	; 0x0a
    66d0:	5b 87       	std	Y+11, r21	; 0x0b
    66d2:	0e 94 32 40 	call	0x8064	; 0x8064 <malloc>
    66d6:	8a 83       	std	Y+2, r24	; 0x02
    66d8:	9b 83       	std	Y+3, r25	; 0x03
    66da:	c8 01       	movw	r24, r16
    66dc:	0e 94 32 40 	call	0x8064	; 0x8064 <malloc>
    66e0:	8c 83       	std	Y+4, r24	; 0x04
    66e2:	9d 83       	std	Y+5, r25	; 0x05
    66e4:	19 86       	std	Y+9, r1	; 0x09
    66e6:	1e 82       	std	Y+6, r1	; 0x06
    66e8:	df 91       	pop	r29
    66ea:	cf 91       	pop	r28
    66ec:	1f 91       	pop	r17
    66ee:	0f 91       	pop	r16
    66f0:	08 95       	ret

000066f2 <_ZN16CMBEventsHandler11FreeBuffersEv>:
    66f2:	cf 93       	push	r28
    66f4:	df 93       	push	r29
    66f6:	ec 01       	movw	r28, r24
    66f8:	8a 81       	ldd	r24, Y+2	; 0x02
    66fa:	9b 81       	ldd	r25, Y+3	; 0x03
    66fc:	0e 94 c7 40 	call	0x818e	; 0x818e <free>
    6700:	8c 81       	ldd	r24, Y+4	; 0x04
    6702:	9d 81       	ldd	r25, Y+5	; 0x05
    6704:	0e 94 c7 40 	call	0x818e	; 0x818e <free>
    6708:	df 91       	pop	r29
    670a:	cf 91       	pop	r28
    670c:	08 95       	ret

0000670e <_ZN16CMBEventsHandler13FillRegDataRqEhh>:
    670e:	cf 93       	push	r28
    6710:	df 93       	push	r29
    6712:	dc 01       	movw	r26, r24
    6714:	14 96       	adiw	r26, 0x04	; 4
    6716:	ed 91       	ld	r30, X+
    6718:	fc 91       	ld	r31, X
    671a:	15 97       	sbiw	r26, 0x05	; 5
    671c:	8a ea       	ldi	r24, 0xAA	; 170
    671e:	80 83       	st	Z, r24
    6720:	14 96       	adiw	r26, 0x04	; 4
    6722:	ed 91       	ld	r30, X+
    6724:	fc 91       	ld	r31, X
    6726:	15 97       	sbiw	r26, 0x05	; 5
    6728:	8c ec       	ldi	r24, 0xCC	; 204
    672a:	81 83       	std	Z+1, r24	; 0x01
    672c:	14 96       	adiw	r26, 0x04	; 4
    672e:	ed 91       	ld	r30, X+
    6730:	fc 91       	ld	r31, X
    6732:	15 97       	sbiw	r26, 0x05	; 5
    6734:	85 e0       	ldi	r24, 0x05	; 5
    6736:	82 83       	std	Z+2, r24	; 0x02
    6738:	14 96       	adiw	r26, 0x04	; 4
    673a:	ed 91       	ld	r30, X+
    673c:	fc 91       	ld	r31, X
    673e:	15 97       	sbiw	r26, 0x05	; 5
    6740:	81 e8       	ldi	r24, 0x81	; 129
    6742:	83 83       	std	Z+3, r24	; 0x03
    6744:	14 96       	adiw	r26, 0x04	; 4
    6746:	ed 91       	ld	r30, X+
    6748:	fc 91       	ld	r31, X
    674a:	15 97       	sbiw	r26, 0x05	; 5
    674c:	64 83       	std	Z+4, r22	; 0x04
    674e:	14 96       	adiw	r26, 0x04	; 4
    6750:	ed 91       	ld	r30, X+
    6752:	fc 91       	ld	r31, X
    6754:	15 97       	sbiw	r26, 0x05	; 5
    6756:	45 83       	std	Z+5, r20	; 0x05
    6758:	86 e0       	ldi	r24, 0x06	; 6
    675a:	19 96       	adiw	r26, 0x09	; 9
    675c:	8c 93       	st	X, r24
    675e:	19 97       	sbiw	r26, 0x09	; 9
    6760:	14 96       	adiw	r26, 0x04	; 4
    6762:	cd 91       	ld	r28, X+
    6764:	dc 91       	ld	r29, X
    6766:	15 97       	sbiw	r26, 0x05	; 5
    6768:	fe 01       	movw	r30, r28
    676a:	33 96       	adiw	r30, 0x03	; 3
    676c:	be 01       	movw	r22, r28
    676e:	6a 5f       	subi	r22, 0xFA	; 250
    6770:	7f 4f       	sbci	r23, 0xFF	; 255
    6772:	2f ef       	ldi	r18, 0xFF	; 255
    6774:	3f ef       	ldi	r19, 0xFF	; 255
    6776:	91 91       	ld	r25, Z+
    6778:	29 27       	eor	r18, r25
    677a:	92 2f       	mov	r25, r18
    677c:	92 95       	swap	r25
    677e:	92 27       	eor	r25, r18
    6780:	09 2e       	mov	r0, r25
    6782:	96 95       	lsr	r25
    6784:	96 95       	lsr	r25
    6786:	90 25       	eor	r25, r0
    6788:	09 2e       	mov	r0, r25
    678a:	96 95       	lsr	r25
    678c:	90 25       	eor	r25, r0
    678e:	97 70       	andi	r25, 0x07	; 7
    6790:	02 2e       	mov	r0, r18
    6792:	23 2f       	mov	r18, r19
    6794:	96 95       	lsr	r25
    6796:	07 94       	ror	r0
    6798:	97 95       	ror	r25
    679a:	30 2d       	mov	r19, r0
    679c:	29 27       	eor	r18, r25
    679e:	06 94       	lsr	r0
    67a0:	97 95       	ror	r25
    67a2:	30 25       	eor	r19, r0
    67a4:	29 27       	eor	r18, r25
    67a6:	e6 17       	cp	r30, r22
    67a8:	f7 07       	cpc	r31, r23
    67aa:	29 f7       	brne	.-54     	; 0x6776 <_ZN16CMBEventsHandler13FillRegDataRqEhh+0x68>
    67ac:	3f 83       	std	Y+7, r19	; 0x07
    67ae:	19 96       	adiw	r26, 0x09	; 9
    67b0:	8c 91       	ld	r24, X
    67b2:	19 97       	sbiw	r26, 0x09	; 9
    67b4:	14 96       	adiw	r26, 0x04	; 4
    67b6:	ed 91       	ld	r30, X+
    67b8:	fc 91       	ld	r31, X
    67ba:	15 97       	sbiw	r26, 0x05	; 5
    67bc:	e8 0f       	add	r30, r24
    67be:	f1 1d       	adc	r31, r1
    67c0:	20 83       	st	Z, r18
    67c2:	48 5f       	subi	r20, 0xF8	; 248
    67c4:	19 96       	adiw	r26, 0x09	; 9
    67c6:	4c 93       	st	X, r20
    67c8:	df 91       	pop	r29
    67ca:	cf 91       	pop	r28
    67cc:	08 95       	ret

000067ce <_ZN16CMBEventsHandler13FillVarDataRqEjj>:
    67ce:	cf 93       	push	r28
    67d0:	df 93       	push	r29
    67d2:	dc 01       	movw	r26, r24
    67d4:	14 96       	adiw	r26, 0x04	; 4
    67d6:	ed 91       	ld	r30, X+
    67d8:	fc 91       	ld	r31, X
    67da:	15 97       	sbiw	r26, 0x05	; 5
    67dc:	8a ea       	ldi	r24, 0xAA	; 170
    67de:	80 83       	st	Z, r24
    67e0:	14 96       	adiw	r26, 0x04	; 4
    67e2:	ed 91       	ld	r30, X+
    67e4:	fc 91       	ld	r31, X
    67e6:	15 97       	sbiw	r26, 0x05	; 5
    67e8:	8c ec       	ldi	r24, 0xCC	; 204
    67ea:	81 83       	std	Z+1, r24	; 0x01
    67ec:	14 96       	adiw	r26, 0x04	; 4
    67ee:	ed 91       	ld	r30, X+
    67f0:	fc 91       	ld	r31, X
    67f2:	15 97       	sbiw	r26, 0x05	; 5
    67f4:	86 e0       	ldi	r24, 0x06	; 6
    67f6:	82 83       	std	Z+2, r24	; 0x02
    67f8:	14 96       	adiw	r26, 0x04	; 4
    67fa:	ed 91       	ld	r30, X+
    67fc:	fc 91       	ld	r31, X
    67fe:	15 97       	sbiw	r26, 0x05	; 5
    6800:	83 e8       	ldi	r24, 0x83	; 131
    6802:	83 83       	std	Z+3, r24	; 0x03
    6804:	14 96       	adiw	r26, 0x04	; 4
    6806:	ed 91       	ld	r30, X+
    6808:	fc 91       	ld	r31, X
    680a:	15 97       	sbiw	r26, 0x05	; 5
    680c:	74 83       	std	Z+4, r23	; 0x04
    680e:	14 96       	adiw	r26, 0x04	; 4
    6810:	ed 91       	ld	r30, X+
    6812:	fc 91       	ld	r31, X
    6814:	15 97       	sbiw	r26, 0x05	; 5
    6816:	65 83       	std	Z+5, r22	; 0x05
    6818:	14 96       	adiw	r26, 0x04	; 4
    681a:	ed 91       	ld	r30, X+
    681c:	fc 91       	ld	r31, X
    681e:	15 97       	sbiw	r26, 0x05	; 5
    6820:	46 83       	std	Z+6, r20	; 0x06
    6822:	87 e0       	ldi	r24, 0x07	; 7
    6824:	19 96       	adiw	r26, 0x09	; 9
    6826:	8c 93       	st	X, r24
    6828:	19 97       	sbiw	r26, 0x09	; 9
    682a:	14 96       	adiw	r26, 0x04	; 4
    682c:	cd 91       	ld	r28, X+
    682e:	dc 91       	ld	r29, X
    6830:	15 97       	sbiw	r26, 0x05	; 5
    6832:	fe 01       	movw	r30, r28
    6834:	33 96       	adiw	r30, 0x03	; 3
    6836:	ae 01       	movw	r20, r28
    6838:	49 5f       	subi	r20, 0xF9	; 249
    683a:	5f 4f       	sbci	r21, 0xFF	; 255
    683c:	2f ef       	ldi	r18, 0xFF	; 255
    683e:	3f ef       	ldi	r19, 0xFF	; 255
    6840:	91 91       	ld	r25, Z+
    6842:	29 27       	eor	r18, r25
    6844:	92 2f       	mov	r25, r18
    6846:	92 95       	swap	r25
    6848:	92 27       	eor	r25, r18
    684a:	09 2e       	mov	r0, r25
    684c:	96 95       	lsr	r25
    684e:	96 95       	lsr	r25
    6850:	90 25       	eor	r25, r0
    6852:	09 2e       	mov	r0, r25
    6854:	96 95       	lsr	r25
    6856:	90 25       	eor	r25, r0
    6858:	97 70       	andi	r25, 0x07	; 7
    685a:	02 2e       	mov	r0, r18
    685c:	23 2f       	mov	r18, r19
    685e:	96 95       	lsr	r25
    6860:	07 94       	ror	r0
    6862:	97 95       	ror	r25
    6864:	30 2d       	mov	r19, r0
    6866:	29 27       	eor	r18, r25
    6868:	06 94       	lsr	r0
    686a:	97 95       	ror	r25
    686c:	30 25       	eor	r19, r0
    686e:	29 27       	eor	r18, r25
    6870:	e4 17       	cp	r30, r20
    6872:	f5 07       	cpc	r31, r21
    6874:	29 f7       	brne	.-54     	; 0x6840 <_ZN16CMBEventsHandler13FillVarDataRqEjj+0x72>
    6876:	38 87       	std	Y+8, r19	; 0x08
    6878:	19 96       	adiw	r26, 0x09	; 9
    687a:	8c 91       	ld	r24, X
    687c:	19 97       	sbiw	r26, 0x09	; 9
    687e:	14 96       	adiw	r26, 0x04	; 4
    6880:	ed 91       	ld	r30, X+
    6882:	fc 91       	ld	r31, X
    6884:	15 97       	sbiw	r26, 0x05	; 5
    6886:	e8 0f       	add	r30, r24
    6888:	f1 1d       	adc	r31, r1
    688a:	20 83       	st	Z, r18
    688c:	89 e0       	ldi	r24, 0x09	; 9
    688e:	19 96       	adiw	r26, 0x09	; 9
    6890:	8c 93       	st	X, r24
    6892:	df 91       	pop	r29
    6894:	cf 91       	pop	r28
    6896:	08 95       	ret

00006898 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
    6898:	cf 93       	push	r28
    689a:	df 93       	push	r29
    689c:	ec 01       	movw	r28, r24
    689e:	ec 81       	ldd	r30, Y+4	; 0x04
    68a0:	fd 81       	ldd	r31, Y+5	; 0x05
    68a2:	8a ea       	ldi	r24, 0xAA	; 170
    68a4:	80 83       	st	Z, r24
    68a6:	ec 81       	ldd	r30, Y+4	; 0x04
    68a8:	fd 81       	ldd	r31, Y+5	; 0x05
    68aa:	8c ec       	ldi	r24, 0xCC	; 204
    68ac:	81 83       	std	Z+1, r24	; 0x01
    68ae:	ec 81       	ldd	r30, Y+4	; 0x04
    68b0:	fd 81       	ldd	r31, Y+5	; 0x05
    68b2:	84 e0       	ldi	r24, 0x04	; 4
    68b4:	82 0f       	add	r24, r18
    68b6:	82 83       	std	Z+2, r24	; 0x02
    68b8:	ec 81       	ldd	r30, Y+4	; 0x04
    68ba:	fd 81       	ldd	r31, Y+5	; 0x05
    68bc:	80 e8       	ldi	r24, 0x80	; 128
    68be:	83 83       	std	Z+3, r24	; 0x03
    68c0:	ec 81       	ldd	r30, Y+4	; 0x04
    68c2:	fd 81       	ldd	r31, Y+5	; 0x05
    68c4:	64 83       	std	Z+4, r22	; 0x04
    68c6:	85 e0       	ldi	r24, 0x05	; 5
    68c8:	82 0f       	add	r24, r18
    68ca:	89 87       	std	Y+9, r24	; 0x09
    68cc:	82 2f       	mov	r24, r18
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	00 97       	sbiw	r24, 0x00	; 0
    68d2:	81 f0       	breq	.+32     	; 0x68f4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    68d4:	da 01       	movw	r26, r20
    68d6:	48 0f       	add	r20, r24
    68d8:	59 1f       	adc	r21, r25
    68da:	65 e0       	ldi	r22, 0x05	; 5
    68dc:	70 e0       	ldi	r23, 0x00	; 0
    68de:	8d 91       	ld	r24, X+
    68e0:	ec 81       	ldd	r30, Y+4	; 0x04
    68e2:	fd 81       	ldd	r31, Y+5	; 0x05
    68e4:	e6 0f       	add	r30, r22
    68e6:	f7 1f       	adc	r31, r23
    68e8:	80 83       	st	Z, r24
    68ea:	6f 5f       	subi	r22, 0xFF	; 255
    68ec:	7f 4f       	sbci	r23, 0xFF	; 255
    68ee:	a4 17       	cp	r26, r20
    68f0:	b5 07       	cpc	r27, r21
    68f2:	a9 f7       	brne	.-22     	; 0x68de <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
    68f4:	a9 85       	ldd	r26, Y+9	; 0x09
    68f6:	b0 e0       	ldi	r27, 0x00	; 0
    68f8:	a4 30       	cpi	r26, 0x04	; 4
    68fa:	b1 05       	cpc	r27, r1
    68fc:	28 f1       	brcs	.+74     	; 0x6948 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb0>
    68fe:	ec 81       	ldd	r30, Y+4	; 0x04
    6900:	fd 81       	ldd	r31, Y+5	; 0x05
    6902:	33 96       	adiw	r30, 0x03	; 3
    6904:	63 e0       	ldi	r22, 0x03	; 3
    6906:	70 e0       	ldi	r23, 0x00	; 0
    6908:	4f ef       	ldi	r20, 0xFF	; 255
    690a:	5f ef       	ldi	r21, 0xFF	; 255
    690c:	91 91       	ld	r25, Z+
    690e:	49 27       	eor	r20, r25
    6910:	94 2f       	mov	r25, r20
    6912:	92 95       	swap	r25
    6914:	94 27       	eor	r25, r20
    6916:	09 2e       	mov	r0, r25
    6918:	96 95       	lsr	r25
    691a:	96 95       	lsr	r25
    691c:	90 25       	eor	r25, r0
    691e:	09 2e       	mov	r0, r25
    6920:	96 95       	lsr	r25
    6922:	90 25       	eor	r25, r0
    6924:	97 70       	andi	r25, 0x07	; 7
    6926:	04 2e       	mov	r0, r20
    6928:	45 2f       	mov	r20, r21
    692a:	96 95       	lsr	r25
    692c:	07 94       	ror	r0
    692e:	97 95       	ror	r25
    6930:	50 2d       	mov	r21, r0
    6932:	49 27       	eor	r20, r25
    6934:	06 94       	lsr	r0
    6936:	97 95       	ror	r25
    6938:	50 25       	eor	r21, r0
    693a:	49 27       	eor	r20, r25
    693c:	6f 5f       	subi	r22, 0xFF	; 255
    693e:	7f 4f       	sbci	r23, 0xFF	; 255
    6940:	6a 17       	cp	r22, r26
    6942:	7b 07       	cpc	r23, r27
    6944:	18 f3       	brcs	.-58     	; 0x690c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x74>
    6946:	02 c0       	rjmp	.+4      	; 0x694c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb4>
    6948:	4f ef       	ldi	r20, 0xFF	; 255
    694a:	5f ef       	ldi	r21, 0xFF	; 255
    694c:	8c 81       	ldd	r24, Y+4	; 0x04
    694e:	9d 81       	ldd	r25, Y+5	; 0x05
    6950:	a8 0f       	add	r26, r24
    6952:	b9 1f       	adc	r27, r25
    6954:	11 96       	adiw	r26, 0x01	; 1
    6956:	5c 93       	st	X, r21
    6958:	89 85       	ldd	r24, Y+9	; 0x09
    695a:	ec 81       	ldd	r30, Y+4	; 0x04
    695c:	fd 81       	ldd	r31, Y+5	; 0x05
    695e:	e8 0f       	add	r30, r24
    6960:	f1 1d       	adc	r31, r1
    6962:	40 83       	st	Z, r20
    6964:	29 5f       	subi	r18, 0xF9	; 249
    6966:	29 87       	std	Y+9, r18	; 0x09
    6968:	df 91       	pop	r29
    696a:	cf 91       	pop	r28
    696c:	08 95       	ret

0000696e <_ZN16CMBEventsHandlerD1Ev>:

CMBEventsHandler::~CMBEventsHandler()
    696e:	08 95       	ret

00006970 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    6970:	dc 01       	movw	r26, r24
    6972:	5b 96       	adiw	r26, 0x1b	; 27
    6974:	8d 91       	ld	r24, X+
    6976:	9c 91       	ld	r25, X
    6978:	5c 97       	sbiw	r26, 0x1c	; 28
    697a:	00 97       	sbiw	r24, 0x00	; 0
    697c:	39 f0       	breq	.+14     	; 0x698c <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    697e:	dc 01       	movw	r26, r24
    6980:	ed 91       	ld	r30, X+
    6982:	fc 91       	ld	r31, X
    6984:	02 80       	ldd	r0, Z+2	; 0x02
    6986:	f3 81       	ldd	r31, Z+3	; 0x03
    6988:	e0 2d       	mov	r30, r0
    698a:	19 95       	eicall
    698c:	08 95       	ret

0000698e <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    698e:	dc 01       	movw	r26, r24
    6990:	5b 96       	adiw	r26, 0x1b	; 27
    6992:	8d 91       	ld	r24, X+
    6994:	9c 91       	ld	r25, X
    6996:	5c 97       	sbiw	r26, 0x1c	; 28
    6998:	00 97       	sbiw	r24, 0x00	; 0
    699a:	39 f0       	breq	.+14     	; 0x69aa <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    699c:	dc 01       	movw	r26, r24
    699e:	ed 91       	ld	r30, X+
    69a0:	fc 91       	ld	r31, X
    69a2:	04 80       	ldd	r0, Z+4	; 0x04
    69a4:	f5 81       	ldd	r31, Z+5	; 0x05
    69a6:	e0 2d       	mov	r30, r0
    69a8:	19 95       	eicall
    69aa:	08 95       	ret

000069ac <_ZN9CMBSenderC1Ev>:
    69ac:	2e ee       	ldi	r18, 0xEE	; 238
    69ae:	31 e2       	ldi	r19, 0x21	; 33
    69b0:	fc 01       	movw	r30, r24
    69b2:	20 83       	st	Z, r18
    69b4:	31 83       	std	Z+1, r19	; 0x01
    69b6:	08 95       	ret

000069b8 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    69b8:	6f 92       	push	r6
    69ba:	7f 92       	push	r7
    69bc:	8f 92       	push	r8
    69be:	9f 92       	push	r9
    69c0:	af 92       	push	r10
    69c2:	bf 92       	push	r11
    69c4:	cf 92       	push	r12
    69c6:	df 92       	push	r13
    69c8:	ef 92       	push	r14
    69ca:	ff 92       	push	r15
    69cc:	0f 93       	push	r16
    69ce:	1f 93       	push	r17
    69d0:	cf 93       	push	r28
    69d2:	df 93       	push	r29
    69d4:	ec 01       	movw	r28, r24
    69d6:	4b 01       	movw	r8, r22
    69d8:	5a 01       	movw	r10, r20
    69da:	39 01       	movw	r6, r18
    69dc:	c8 01       	movw	r24, r16
    69de:	0f 83       	std	Y+7, r16	; 0x07
    69e0:	18 87       	std	Y+8, r17	; 0x08
    69e2:	ea 86       	std	Y+10, r14	; 0x0a
    69e4:	fb 86       	std	Y+11, r15	; 0x0b
    69e6:	0e 94 32 40 	call	0x8064	; 0x8064 <malloc>
    69ea:	8a 83       	std	Y+2, r24	; 0x02
    69ec:	9b 83       	std	Y+3, r25	; 0x03
    69ee:	c7 01       	movw	r24, r14
    69f0:	0e 94 32 40 	call	0x8064	; 0x8064 <malloc>
    69f4:	8c 83       	std	Y+4, r24	; 0x04
    69f6:	9d 83       	std	Y+5, r25	; 0x05
    69f8:	19 8e       	std	Y+25, r1	; 0x19
    69fa:	19 86       	std	Y+9, r1	; 0x09
    69fc:	19 8a       	std	Y+17, r1	; 0x11
    69fe:	1e 82       	std	Y+6, r1	; 0x06
    6a00:	1c 8a       	std	Y+20, r1	; 0x14
    6a02:	1d 8a       	std	Y+21, r1	; 0x15
    6a04:	8f ef       	ldi	r24, 0xFF	; 255
    6a06:	9f ef       	ldi	r25, 0xFF	; 255
    6a08:	8e 8b       	std	Y+22, r24	; 0x16
    6a0a:	9f 8b       	std	Y+23, r25	; 0x17
    6a0c:	87 e0       	ldi	r24, 0x07	; 7
    6a0e:	88 8b       	std	Y+16, r24	; 0x10
    6a10:	82 e0       	ldi	r24, 0x02	; 2
    6a12:	88 8f       	std	Y+24, r24	; 0x18
    6a14:	1a 8e       	std	Y+26, r1	; 0x1a
    6a16:	ca 8a       	std	Y+18, r12	; 0x12
    6a18:	db 8a       	std	Y+19, r13	; 0x13
    6a1a:	ac 86       	std	Y+12, r10	; 0x0c
    6a1c:	bd 86       	std	Y+13, r11	; 0x0d
    6a1e:	d5 01       	movw	r26, r10
    6a20:	ed 91       	ld	r30, X+
    6a22:	fc 91       	ld	r31, X
    6a24:	04 84       	ldd	r0, Z+12	; 0x0c
    6a26:	f5 85       	ldd	r31, Z+13	; 0x0d
    6a28:	e0 2d       	mov	r30, r0
    6a2a:	4e e1       	ldi	r20, 0x1E	; 30
    6a2c:	56 e3       	ldi	r21, 0x36	; 54
    6a2e:	be 01       	movw	r22, r28
    6a30:	c5 01       	movw	r24, r10
    6a32:	19 95       	eicall
    6a34:	d5 01       	movw	r26, r10
    6a36:	ed 91       	ld	r30, X+
    6a38:	fc 91       	ld	r31, X
    6a3a:	06 84       	ldd	r0, Z+14	; 0x0e
    6a3c:	f7 85       	ldd	r31, Z+15	; 0x0f
    6a3e:	e0 2d       	mov	r30, r0
    6a40:	4a ea       	ldi	r20, 0xAA	; 170
    6a42:	56 e3       	ldi	r21, 0x36	; 54
    6a44:	be 01       	movw	r22, r28
    6a46:	c5 01       	movw	r24, r10
    6a48:	19 95       	eicall
    6a4a:	61 14       	cp	r6, r1
    6a4c:	71 04       	cpc	r7, r1
    6a4e:	19 f0       	breq	.+6      	; 0x6a56 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    6a50:	6b 8e       	std	Y+27, r6	; 0x1b
    6a52:	7c 8e       	std	Y+28, r7	; 0x1c
    6a54:	02 c0       	rjmp	.+4      	; 0x6a5a <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xa2>
    6a56:	cb 8f       	std	Y+27, r28	; 0x1b
    6a58:	dc 8f       	std	Y+28, r29	; 0x1c
    6a5a:	8e 86       	std	Y+14, r8	; 0x0e
    6a5c:	9f 86       	std	Y+15, r9	; 0x0f
    6a5e:	81 14       	cp	r8, r1
    6a60:	91 04       	cpc	r9, r1
    6a62:	61 f0       	breq	.+24     	; 0x6a7c <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc4>
    6a64:	d4 01       	movw	r26, r8
    6a66:	ed 91       	ld	r30, X+
    6a68:	fc 91       	ld	r31, X
    6a6a:	02 88       	ldd	r0, Z+18	; 0x12
    6a6c:	f3 89       	ldd	r31, Z+19	; 0x13
    6a6e:	e0 2d       	mov	r30, r0
    6a70:	21 e0       	ldi	r18, 0x01	; 1
    6a72:	ae 01       	movw	r20, r28
    6a74:	65 e4       	ldi	r22, 0x45	; 69
    6a76:	76 e3       	ldi	r23, 0x36	; 54
    6a78:	c4 01       	movw	r24, r8
    6a7a:	19 95       	eicall
    6a7c:	df 91       	pop	r29
    6a7e:	cf 91       	pop	r28
    6a80:	1f 91       	pop	r17
    6a82:	0f 91       	pop	r16
    6a84:	ff 90       	pop	r15
    6a86:	ef 90       	pop	r14
    6a88:	df 90       	pop	r13
    6a8a:	cf 90       	pop	r12
    6a8c:	bf 90       	pop	r11
    6a8e:	af 90       	pop	r10
    6a90:	9f 90       	pop	r9
    6a92:	8f 90       	pop	r8
    6a94:	7f 90       	pop	r7
    6a96:	6f 90       	pop	r6
    6a98:	08 95       	ret

00006a9a <_ZN9CMBSenderD1Ev>:
    6a9a:	2e ee       	ldi	r18, 0xEE	; 238
    6a9c:	31 e2       	ldi	r19, 0x21	; 33
    6a9e:	fc 01       	movw	r30, r24
    6aa0:	20 83       	st	Z, r18
    6aa2:	31 83       	std	Z+1, r19	; 0x01
    6aa4:	0e 94 b7 34 	call	0x696e	; 0x696e <_ZN16CMBEventsHandlerD1Ev>
    6aa8:	08 95       	ret

00006aaa <_ZN9CMBSender13OnReceiveByteEh>:
    6aaa:	cf 93       	push	r28
    6aac:	df 93       	push	r29
    6aae:	dc 01       	movw	r26, r24
    6ab0:	96 2f       	mov	r25, r22
    6ab2:	50 96       	adiw	r26, 0x10	; 16
    6ab4:	4c 91       	ld	r20, X
    6ab6:	50 97       	sbiw	r26, 0x10	; 16
    6ab8:	50 e0       	ldi	r21, 0x00	; 0
    6aba:	4b 30       	cpi	r20, 0x0B	; 11
    6abc:	51 05       	cpc	r21, r1
    6abe:	08 f0       	brcs	.+2      	; 0x6ac2 <_ZN9CMBSender13OnReceiveByteEh+0x18>
    6ac0:	ba c0       	rjmp	.+372    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6ac2:	fa 01       	movw	r30, r20
    6ac4:	88 27       	eor	r24, r24
    6ac6:	e0 5c       	subi	r30, 0xC0	; 192
    6ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    6aca:	8f 4f       	sbci	r24, 0xFF	; 255
    6acc:	0c 94 10 40 	jmp	0x8020	; 0x8020 <__tablejump2__>
    6ad0:	9a 3a       	cpi	r25, 0xAA	; 170
    6ad2:	21 f4       	brne	.+8      	; 0x6adc <_ZN9CMBSender13OnReceiveByteEh+0x32>
    6ad4:	82 e0       	ldi	r24, 0x02	; 2
    6ad6:	50 96       	adiw	r26, 0x10	; 16
    6ad8:	8c 93       	st	X, r24
    6ada:	ad c0       	rjmp	.+346    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6adc:	81 e0       	ldi	r24, 0x01	; 1
    6ade:	50 96       	adiw	r26, 0x10	; 16
    6ae0:	8c 93       	st	X, r24
    6ae2:	a9 c0       	rjmp	.+338    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6ae4:	9c 3c       	cpi	r25, 0xCC	; 204
    6ae6:	21 f4       	brne	.+8      	; 0x6af0 <_ZN9CMBSender13OnReceiveByteEh+0x46>
    6ae8:	83 e0       	ldi	r24, 0x03	; 3
    6aea:	50 96       	adiw	r26, 0x10	; 16
    6aec:	8c 93       	st	X, r24
    6aee:	a3 c0       	rjmp	.+326    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6af0:	81 e0       	ldi	r24, 0x01	; 1
    6af2:	50 96       	adiw	r26, 0x10	; 16
    6af4:	8c 93       	st	X, r24
    6af6:	9f c0       	rjmp	.+318    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6af8:	16 96       	adiw	r26, 0x06	; 6
    6afa:	9c 93       	st	X, r25
    6afc:	16 97       	sbiw	r26, 0x06	; 6
    6afe:	51 96       	adiw	r26, 0x11	; 17
    6b00:	1c 92       	st	X, r1
    6b02:	51 97       	sbiw	r26, 0x11	; 17
    6b04:	8f ef       	ldi	r24, 0xFF	; 255
    6b06:	9f ef       	ldi	r25, 0xFF	; 255
    6b08:	56 96       	adiw	r26, 0x16	; 22
    6b0a:	8d 93       	st	X+, r24
    6b0c:	9c 93       	st	X, r25
    6b0e:	57 97       	sbiw	r26, 0x17	; 23
    6b10:	84 e0       	ldi	r24, 0x04	; 4
    6b12:	50 96       	adiw	r26, 0x10	; 16
    6b14:	8c 93       	st	X, r24
    6b16:	8f c0       	rjmp	.+286    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6b18:	51 96       	adiw	r26, 0x11	; 17
    6b1a:	8c 91       	ld	r24, X
    6b1c:	51 97       	sbiw	r26, 0x11	; 17
    6b1e:	12 96       	adiw	r26, 0x02	; 2
    6b20:	ed 91       	ld	r30, X+
    6b22:	fc 91       	ld	r31, X
    6b24:	13 97       	sbiw	r26, 0x03	; 3
    6b26:	e8 0f       	add	r30, r24
    6b28:	f1 1d       	adc	r31, r1
    6b2a:	90 83       	st	Z, r25
    6b2c:	51 96       	adiw	r26, 0x11	; 17
    6b2e:	2c 91       	ld	r18, X
    6b30:	51 97       	sbiw	r26, 0x11	; 17
    6b32:	30 e0       	ldi	r19, 0x00	; 0
    6b34:	17 96       	adiw	r26, 0x07	; 7
    6b36:	4d 91       	ld	r20, X+
    6b38:	5c 91       	ld	r21, X
    6b3a:	18 97       	sbiw	r26, 0x08	; 8
    6b3c:	42 17       	cp	r20, r18
    6b3e:	53 07       	cpc	r21, r19
    6b40:	20 f4       	brcc	.+8      	; 0x6b4a <_ZN9CMBSender13OnReceiveByteEh+0xa0>
    6b42:	89 e0       	ldi	r24, 0x09	; 9
    6b44:	50 96       	adiw	r26, 0x10	; 16
    6b46:	8c 93       	st	X, r24
    6b48:	76 c0       	rjmp	.+236    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6b4a:	56 96       	adiw	r26, 0x16	; 22
    6b4c:	2d 91       	ld	r18, X+
    6b4e:	3c 91       	ld	r19, X
    6b50:	57 97       	sbiw	r26, 0x17	; 23
    6b52:	29 27       	eor	r18, r25
    6b54:	62 2f       	mov	r22, r18
    6b56:	62 95       	swap	r22
    6b58:	62 27       	eor	r22, r18
    6b5a:	06 2e       	mov	r0, r22
    6b5c:	66 95       	lsr	r22
    6b5e:	66 95       	lsr	r22
    6b60:	60 25       	eor	r22, r0
    6b62:	06 2e       	mov	r0, r22
    6b64:	66 95       	lsr	r22
    6b66:	60 25       	eor	r22, r0
    6b68:	67 70       	andi	r22, 0x07	; 7
    6b6a:	02 2e       	mov	r0, r18
    6b6c:	23 2f       	mov	r18, r19
    6b6e:	66 95       	lsr	r22
    6b70:	07 94       	ror	r0
    6b72:	67 95       	ror	r22
    6b74:	30 2d       	mov	r19, r0
    6b76:	26 27       	eor	r18, r22
    6b78:	06 94       	lsr	r0
    6b7a:	67 95       	ror	r22
    6b7c:	30 25       	eor	r19, r0
    6b7e:	26 27       	eor	r18, r22
    6b80:	56 96       	adiw	r26, 0x16	; 22
    6b82:	2d 93       	st	X+, r18
    6b84:	3c 93       	st	X, r19
    6b86:	57 97       	sbiw	r26, 0x17	; 23
    6b88:	51 96       	adiw	r26, 0x11	; 17
    6b8a:	8c 91       	ld	r24, X
    6b8c:	51 97       	sbiw	r26, 0x11	; 17
    6b8e:	8f 5f       	subi	r24, 0xFF	; 255
    6b90:	51 96       	adiw	r26, 0x11	; 17
    6b92:	8c 93       	st	X, r24
    6b94:	51 97       	sbiw	r26, 0x11	; 17
    6b96:	51 96       	adiw	r26, 0x11	; 17
    6b98:	2c 91       	ld	r18, X
    6b9a:	51 97       	sbiw	r26, 0x11	; 17
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
    6b9e:	16 96       	adiw	r26, 0x06	; 6
    6ba0:	8c 91       	ld	r24, X
    6ba2:	16 97       	sbiw	r26, 0x06	; 6
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	02 97       	sbiw	r24, 0x02	; 2
    6ba8:	28 17       	cp	r18, r24
    6baa:	39 07       	cpc	r19, r25
    6bac:	09 f0       	breq	.+2      	; 0x6bb0 <_ZN9CMBSender13OnReceiveByteEh+0x106>
    6bae:	43 c0       	rjmp	.+134    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6bb0:	85 e0       	ldi	r24, 0x05	; 5
    6bb2:	50 96       	adiw	r26, 0x10	; 16
    6bb4:	8c 93       	st	X, r24
    6bb6:	3f c0       	rjmp	.+126    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6bb8:	69 2f       	mov	r22, r25
    6bba:	70 e0       	ldi	r23, 0x00	; 0
    6bbc:	54 96       	adiw	r26, 0x14	; 20
    6bbe:	6d 93       	st	X+, r22
    6bc0:	7c 93       	st	X, r23
    6bc2:	55 97       	sbiw	r26, 0x15	; 21
    6bc4:	86 e0       	ldi	r24, 0x06	; 6
    6bc6:	50 96       	adiw	r26, 0x10	; 16
    6bc8:	8c 93       	st	X, r24
    6bca:	35 c0       	rjmp	.+106    	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6bcc:	54 96       	adiw	r26, 0x14	; 20
    6bce:	2d 91       	ld	r18, X+
    6bd0:	3c 91       	ld	r19, X
    6bd2:	55 97       	sbiw	r26, 0x15	; 21
    6bd4:	a9 01       	movw	r20, r18
    6bd6:	59 2b       	or	r21, r25
    6bd8:	54 96       	adiw	r26, 0x14	; 20
    6bda:	4d 93       	st	X+, r20
    6bdc:	5c 93       	st	X, r21
    6bde:	55 97       	sbiw	r26, 0x15	; 21
    6be0:	56 96       	adiw	r26, 0x16	; 22
    6be2:	2d 91       	ld	r18, X+
    6be4:	3c 91       	ld	r19, X
    6be6:	57 97       	sbiw	r26, 0x17	; 23
    6be8:	42 17       	cp	r20, r18
    6bea:	53 07       	cpc	r21, r19
    6bec:	f1 f4       	brne	.+60     	; 0x6c2a <_ZN9CMBSender13OnReceiveByteEh+0x180>
    6bee:	ed 01       	movw	r28, r26
    6bf0:	88 e0       	ldi	r24, 0x08	; 8
    6bf2:	88 8b       	std	Y+16, r24	; 0x10
    6bf4:	e8 81       	ld	r30, Y
    6bf6:	f9 81       	ldd	r31, Y+1	; 0x01
    6bf8:	4e 81       	ldd	r20, Y+6	; 0x06
    6bfa:	50 e0       	ldi	r21, 0x00	; 0
    6bfc:	6a 81       	ldd	r22, Y+2	; 0x02
    6bfe:	7b 81       	ldd	r23, Y+3	; 0x03
    6c00:	01 90       	ld	r0, Z+
    6c02:	f0 81       	ld	r31, Z
    6c04:	e0 2d       	mov	r30, r0
    6c06:	cd 01       	movw	r24, r26
    6c08:	19 95       	eicall
    6c0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c0e:	00 97       	sbiw	r24, 0x00	; 0
    6c10:	91 f0       	breq	.+36     	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6c12:	dc 01       	movw	r26, r24
    6c14:	ed 91       	ld	r30, X+
    6c16:	fc 91       	ld	r31, X
    6c18:	4e 81       	ldd	r20, Y+6	; 0x06
    6c1a:	50 e0       	ldi	r21, 0x00	; 0
    6c1c:	6a 81       	ldd	r22, Y+2	; 0x02
    6c1e:	7b 81       	ldd	r23, Y+3	; 0x03
    6c20:	01 90       	ld	r0, Z+
    6c22:	f0 81       	ld	r31, Z
    6c24:	e0 2d       	mov	r30, r0
    6c26:	19 95       	eicall
    6c28:	06 c0       	rjmp	.+12     	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6c2a:	89 e0       	ldi	r24, 0x09	; 9
    6c2c:	50 96       	adiw	r26, 0x10	; 16
    6c2e:	8c 93       	st	X, r24
    6c30:	02 c0       	rjmp	.+4      	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6c32:	5a 96       	adiw	r26, 0x1a	; 26
    6c34:	1c 92       	st	X, r1
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	08 95       	ret

00006c3c <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    6c3c:	cf 93       	push	r28
    6c3e:	df 93       	push	r29
    6c40:	ec 01       	movw	r28, r24
    6c42:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c44:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c46:	dc 01       	movw	r26, r24
    6c48:	ed 91       	ld	r30, X+
    6c4a:	fc 91       	ld	r31, X
    6c4c:	02 80       	ldd	r0, Z+2	; 0x02
    6c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    6c50:	e0 2d       	mov	r30, r0
    6c52:	19 95       	eicall
    6c54:	68 2f       	mov	r22, r24
    6c56:	ce 01       	movw	r24, r28
    6c58:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <_ZN9CMBSender13OnReceiveByteEh>
    6c5c:	df 91       	pop	r29
    6c5e:	cf 91       	pop	r28
    6c60:	08 95       	ret

00006c62 <_ZN9CMBSender9OnTimeoutEv>:
    6c62:	cf 93       	push	r28
    6c64:	df 93       	push	r29
    6c66:	ec 01       	movw	r28, r24
    6c68:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c6c:	dc 01       	movw	r26, r24
    6c6e:	ed 91       	ld	r30, X+
    6c70:	fc 91       	ld	r31, X
    6c72:	04 80       	ldd	r0, Z+4	; 0x04
    6c74:	f5 81       	ldd	r31, Z+5	; 0x05
    6c76:	e0 2d       	mov	r30, r0
    6c78:	19 95       	eicall
    6c7a:	88 89       	ldd	r24, Y+16	; 0x10
    6c7c:	88 30       	cpi	r24, 0x08	; 8
    6c7e:	11 f0       	breq	.+4      	; 0x6c84 <_ZN9CMBSender9OnTimeoutEv+0x22>
    6c80:	8a e0       	ldi	r24, 0x0A	; 10
    6c82:	88 8b       	std	Y+16, r24	; 0x10
    6c84:	df 91       	pop	r29
    6c86:	cf 91       	pop	r28
    6c88:	08 95       	ret

00006c8a <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    6c8a:	0e 94 31 36 	call	0x6c62	; 0x6c62 <_ZN9CMBSender9OnTimeoutEv>
    6c8e:	08 95       	ret

00006c90 <_ZN9CMBSender19StartMODBUSListenerEv>:
    6c90:	cf 93       	push	r28
    6c92:	df 93       	push	r29
    6c94:	fc 01       	movw	r30, r24
    6c96:	11 8a       	std	Z+17, r1	; 0x11
    6c98:	16 82       	std	Z+6, r1	; 0x06
    6c9a:	14 8a       	std	Z+20, r1	; 0x14
    6c9c:	15 8a       	std	Z+21, r1	; 0x15
    6c9e:	16 8a       	std	Z+22, r1	; 0x16
    6ca0:	17 8a       	std	Z+23, r1	; 0x17
    6ca2:	10 8a       	std	Z+16, r1	; 0x10
    6ca4:	86 85       	ldd	r24, Z+14	; 0x0e
    6ca6:	97 85       	ldd	r25, Z+15	; 0x0f
    6ca8:	ec 01       	movw	r28, r24
    6caa:	a8 81       	ld	r26, Y
    6cac:	b9 81       	ldd	r27, Y+1	; 0x01
    6cae:	62 89       	ldd	r22, Z+18	; 0x12
    6cb0:	73 89       	ldd	r23, Z+19	; 0x13
    6cb2:	12 96       	adiw	r26, 0x02	; 2
    6cb4:	ed 91       	ld	r30, X+
    6cb6:	fc 91       	ld	r31, X
    6cb8:	13 97       	sbiw	r26, 0x03	; 3
    6cba:	19 95       	eicall
    6cbc:	df 91       	pop	r29
    6cbe:	cf 91       	pop	r28
    6cc0:	08 95       	ret

00006cc2 <_ZN9CMBSender14OnTransmitByteEv>:
    6cc2:	cf 93       	push	r28
    6cc4:	df 93       	push	r29
    6cc6:	ec 01       	movw	r28, r24
    6cc8:	88 8d       	ldd	r24, Y+24	; 0x18
    6cca:	84 30       	cpi	r24, 0x04	; 4
    6ccc:	38 f4       	brcc	.+14     	; 0x6cdc <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    6cce:	82 30       	cpi	r24, 0x02	; 2
    6cd0:	b8 f5       	brcc	.+110    	; 0x6d40 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    6cd2:	88 23       	and	r24, r24
    6cd4:	31 f0       	breq	.+12     	; 0x6ce2 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    6cd6:	81 30       	cpi	r24, 0x01	; 1
    6cd8:	d1 f0       	breq	.+52     	; 0x6d0e <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    6cda:	39 c0       	rjmp	.+114    	; 0x6d4e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6cdc:	85 30       	cpi	r24, 0x05	; 5
    6cde:	81 f1       	breq	.+96     	; 0x6d40 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    6ce0:	36 c0       	rjmp	.+108    	; 0x6d4e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6ce2:	81 e0       	ldi	r24, 0x01	; 1
    6ce4:	88 8f       	std	Y+24, r24	; 0x18
    6ce6:	19 8e       	std	Y+25, r1	; 0x19
    6ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
    6cea:	9d 85       	ldd	r25, Y+13	; 0x0d
    6cec:	29 8d       	ldd	r18, Y+25	; 0x19
    6cee:	dc 01       	movw	r26, r24
    6cf0:	ed 91       	ld	r30, X+
    6cf2:	fc 91       	ld	r31, X
    6cf4:	ac 81       	ldd	r26, Y+4	; 0x04
    6cf6:	bd 81       	ldd	r27, Y+5	; 0x05
    6cf8:	a2 0f       	add	r26, r18
    6cfa:	b1 1d       	adc	r27, r1
    6cfc:	04 80       	ldd	r0, Z+4	; 0x04
    6cfe:	f5 81       	ldd	r31, Z+5	; 0x05
    6d00:	e0 2d       	mov	r30, r0
    6d02:	6c 91       	ld	r22, X
    6d04:	19 95       	eicall
    6d06:	89 8d       	ldd	r24, Y+25	; 0x19
    6d08:	8f 5f       	subi	r24, 0xFF	; 255
    6d0a:	89 8f       	std	Y+25, r24	; 0x19
    6d0c:	20 c0       	rjmp	.+64     	; 0x6d4e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d10:	9d 85       	ldd	r25, Y+13	; 0x0d
    6d12:	29 8d       	ldd	r18, Y+25	; 0x19
    6d14:	dc 01       	movw	r26, r24
    6d16:	ed 91       	ld	r30, X+
    6d18:	fc 91       	ld	r31, X
    6d1a:	ac 81       	ldd	r26, Y+4	; 0x04
    6d1c:	bd 81       	ldd	r27, Y+5	; 0x05
    6d1e:	a2 0f       	add	r26, r18
    6d20:	b1 1d       	adc	r27, r1
    6d22:	04 80       	ldd	r0, Z+4	; 0x04
    6d24:	f5 81       	ldd	r31, Z+5	; 0x05
    6d26:	e0 2d       	mov	r30, r0
    6d28:	6c 91       	ld	r22, X
    6d2a:	19 95       	eicall
    6d2c:	89 8d       	ldd	r24, Y+25	; 0x19
    6d2e:	8f 5f       	subi	r24, 0xFF	; 255
    6d30:	89 8f       	std	Y+25, r24	; 0x19
    6d32:	99 8d       	ldd	r25, Y+25	; 0x19
    6d34:	89 85       	ldd	r24, Y+9	; 0x09
    6d36:	98 13       	cpse	r25, r24
    6d38:	0a c0       	rjmp	.+20     	; 0x6d4e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6d3a:	83 e0       	ldi	r24, 0x03	; 3
    6d3c:	88 8f       	std	Y+24, r24	; 0x18
    6d3e:	07 c0       	rjmp	.+14     	; 0x6d4e <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6d40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6d42:	88 23       	and	r24, r24
    6d44:	19 f0       	breq	.+6      	; 0x6d4c <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    6d46:	ce 01       	movw	r24, r28
    6d48:	0e 94 48 36 	call	0x6c90	; 0x6c90 <_ZN9CMBSender19StartMODBUSListenerEv>
    6d4c:	1a 8e       	std	Y+26, r1	; 0x1a
    6d4e:	df 91       	pop	r29
    6d50:	cf 91       	pop	r28
    6d52:	08 95       	ret

00006d54 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    6d54:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <_ZN9CMBSender14OnTransmitByteEv>
    6d58:	08 95       	ret

00006d5a <_ZN9CMBSender18WaitMODBUSListenerEv>:
    6d5a:	fc 01       	movw	r30, r24
    6d5c:	06 c0       	rjmp	.+12     	; 0x6d6a <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    6d5e:	80 89       	ldd	r24, Z+16	; 0x10
    6d60:	89 30       	cpi	r24, 0x09	; 9
    6d62:	41 f0       	breq	.+16     	; 0x6d74 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    6d64:	80 89       	ldd	r24, Z+16	; 0x10
    6d66:	8a 30       	cpi	r24, 0x0A	; 10
    6d68:	39 f0       	breq	.+14     	; 0x6d78 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    6d6a:	80 89       	ldd	r24, Z+16	; 0x10
    6d6c:	88 30       	cpi	r24, 0x08	; 8
    6d6e:	b9 f7       	brne	.-18     	; 0x6d5e <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    6d70:	81 e0       	ldi	r24, 0x01	; 1
    6d72:	08 95       	ret
    6d74:	82 e0       	ldi	r24, 0x02	; 2
    6d76:	08 95       	ret
    6d78:	83 e0       	ldi	r24, 0x03	; 3
    6d7a:	08 95       	ret

00006d7c <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    6d7c:	cf 93       	push	r28
    6d7e:	df 93       	push	r29
    6d80:	ec 01       	movw	r28, r24
    6d82:	19 8e       	std	Y+25, r1	; 0x19
    6d84:	18 8e       	std	Y+24, r1	; 0x18
    6d86:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <_ZN9CMBSender14OnTransmitByteEv>
    6d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    6d8e:	dc 01       	movw	r26, r24
    6d90:	ed 91       	ld	r30, X+
    6d92:	fc 91       	ld	r31, X
    6d94:	6a 89       	ldd	r22, Y+18	; 0x12
    6d96:	7b 89       	ldd	r23, Y+19	; 0x13
    6d98:	02 80       	ldd	r0, Z+2	; 0x02
    6d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    6d9c:	e0 2d       	mov	r30, r0
    6d9e:	19 95       	eicall
    6da0:	df 91       	pop	r29
    6da2:	cf 91       	pop	r28
    6da4:	08 95       	ret

00006da6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    6da6:	cf 93       	push	r28
    6da8:	df 93       	push	r29
    6daa:	ec 01       	movw	r28, r24
    6dac:	e8 81       	ld	r30, Y
    6dae:	f9 81       	ldd	r31, Y+1	; 0x01
    6db0:	02 84       	ldd	r0, Z+10	; 0x0a
    6db2:	f3 85       	ldd	r31, Z+11	; 0x0b
    6db4:	e0 2d       	mov	r30, r0
    6db6:	19 95       	eicall
    6db8:	ce 01       	movw	r24, r28
    6dba:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6dbe:	df 91       	pop	r29
    6dc0:	cf 91       	pop	r28
    6dc2:	08 95       	ret

00006dc4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    6dc4:	cf 93       	push	r28
    6dc6:	df 93       	push	r29
    6dc8:	ec 01       	movw	r28, r24
    6dca:	e8 81       	ld	r30, Y
    6dcc:	f9 81       	ldd	r31, Y+1	; 0x01
    6dce:	06 84       	ldd	r0, Z+14	; 0x0e
    6dd0:	f7 85       	ldd	r31, Z+15	; 0x0f
    6dd2:	e0 2d       	mov	r30, r0
    6dd4:	19 95       	eicall
    6dd6:	ce 01       	movw	r24, r28
    6dd8:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6ddc:	df 91       	pop	r29
    6dde:	cf 91       	pop	r28
    6de0:	08 95       	ret

00006de2 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    6de2:	cf 93       	push	r28
    6de4:	df 93       	push	r29
    6de6:	ec 01       	movw	r28, r24
    6de8:	e8 81       	ld	r30, Y
    6dea:	f9 81       	ldd	r31, Y+1	; 0x01
    6dec:	04 84       	ldd	r0, Z+12	; 0x0c
    6dee:	f5 85       	ldd	r31, Z+13	; 0x0d
    6df0:	e0 2d       	mov	r30, r0
    6df2:	19 95       	eicall
    6df4:	ce 01       	movw	r24, r28
    6df6:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6dfa:	df 91       	pop	r29
    6dfc:	cf 91       	pop	r28
    6dfe:	08 95       	ret

00006e00 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    6e00:	cf 93       	push	r28
    6e02:	df 93       	push	r29
    6e04:	ec 01       	movw	r28, r24
    6e06:	e8 81       	ld	r30, Y
    6e08:	f9 81       	ldd	r31, Y+1	; 0x01
    6e0a:	50 e0       	ldi	r21, 0x00	; 0
    6e0c:	00 88       	ldd	r0, Z+16	; 0x10
    6e0e:	f1 89       	ldd	r31, Z+17	; 0x11
    6e10:	e0 2d       	mov	r30, r0
    6e12:	19 95       	eicall
    6e14:	ce 01       	movw	r24, r28
    6e16:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6e1a:	df 91       	pop	r29
    6e1c:	cf 91       	pop	r28
    6e1e:	08 95       	ret

00006e20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    6e20:	fc 01       	movw	r30, r24
    6e22:	06 c0       	rjmp	.+12     	; 0x6e30 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    6e24:	80 8d       	ldd	r24, Z+24	; 0x18
    6e26:	84 30       	cpi	r24, 0x04	; 4
    6e28:	41 f0       	breq	.+16     	; 0x6e3a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    6e2a:	80 8d       	ldd	r24, Z+24	; 0x18
    6e2c:	85 30       	cpi	r24, 0x05	; 5
    6e2e:	39 f0       	breq	.+14     	; 0x6e3e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    6e30:	80 8d       	ldd	r24, Z+24	; 0x18
    6e32:	83 30       	cpi	r24, 0x03	; 3
    6e34:	b9 f7       	brne	.-18     	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    6e36:	81 e0       	ldi	r24, 0x01	; 1
    6e38:	08 95       	ret
    6e3a:	82 e0       	ldi	r24, 0x02	; 2
    6e3c:	08 95       	ret
    6e3e:	83 e0       	ldi	r24, 0x03	; 3
    6e40:	08 95       	ret

00006e42 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    6e42:	21 e0       	ldi	r18, 0x01	; 1
    6e44:	fc 01       	movw	r30, r24
    6e46:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    6e48:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    6e4c:	08 95       	ret

00006e4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    6e4e:	21 e0       	ldi	r18, 0x01	; 1
    6e50:	fc 01       	movw	r30, r24
    6e52:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    6e54:	0e 94 00 37 	call	0x6e00	; 0x6e00 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    6e58:	08 95       	ret

00006e5a <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    6e5a:	0f 93       	push	r16
    6e5c:	1f 93       	push	r17
    6e5e:	cf 93       	push	r28
    6e60:	df 93       	push	r29
    6e62:	8c 01       	movw	r16, r24
    6e64:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    6e66:	98 81       	ld	r25, Y
    6e68:	91 38       	cpi	r25, 0x81	; 129
    6e6a:	69 f4       	brne	.+26     	; 0x6e86 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    6e6c:	d8 01       	movw	r26, r16
    6e6e:	ed 91       	ld	r30, X+
    6e70:	fc 91       	ld	r31, X
    6e72:	04 80       	ldd	r0, Z+4	; 0x04
    6e74:	f5 81       	ldd	r31, Z+5	; 0x05
    6e76:	e0 2d       	mov	r30, r0
    6e78:	2a 81       	ldd	r18, Y+2	; 0x02
    6e7a:	ab 01       	movw	r20, r22
    6e7c:	4d 5f       	subi	r20, 0xFD	; 253
    6e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6e80:	69 81       	ldd	r22, Y+1	; 0x01
    6e82:	c8 01       	movw	r24, r16
    6e84:	19 95       	eicall
	}
	if (data[0] == 0x83)
    6e86:	98 81       	ld	r25, Y
    6e88:	93 38       	cpi	r25, 0x83	; 131
    6e8a:	99 f4       	brne	.+38     	; 0x6eb2 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    6e8c:	d8 01       	movw	r26, r16
    6e8e:	ed 91       	ld	r30, X+
    6e90:	fc 91       	ld	r31, X
    6e92:	2b 81       	ldd	r18, Y+3	; 0x03
    6e94:	30 e0       	ldi	r19, 0x00	; 0
    6e96:	ae 01       	movw	r20, r28
    6e98:	4c 5f       	subi	r20, 0xFC	; 252
    6e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    6e9c:	69 81       	ldd	r22, Y+1	; 0x01
    6e9e:	70 e0       	ldi	r23, 0x00	; 0
    6ea0:	76 2f       	mov	r23, r22
    6ea2:	66 27       	eor	r22, r22
    6ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ea6:	68 2b       	or	r22, r24
    6ea8:	02 80       	ldd	r0, Z+2	; 0x02
    6eaa:	f3 81       	ldd	r31, Z+3	; 0x03
    6eac:	e0 2d       	mov	r30, r0
    6eae:	c8 01       	movw	r24, r16
    6eb0:	19 95       	eicall
	}
}
    6eb2:	df 91       	pop	r29
    6eb4:	cf 91       	pop	r28
    6eb6:	1f 91       	pop	r17
    6eb8:	0f 91       	pop	r16
    6eba:	08 95       	ret

00006ebc <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    6ebc:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN9CMBSender18ProcessTransactionEPhj>
    6ec0:	08 95       	ret

00006ec2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    6ec2:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    6ec4:	e0 e6       	ldi	r30, 0x60	; 96
    6ec6:	f6 e0       	ldi	r31, 0x06	; 6
    6ec8:	88 e0       	ldi	r24, 0x08	; 8
    6eca:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    6ecc:	84 e0       	ldi	r24, 0x04	; 4
    6ece:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    6ed0:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    6ed2:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    6ed4:	e0 ea       	ldi	r30, 0xA0	; 160
    6ed6:	f9 e0       	ldi	r31, 0x09	; 9
    6ed8:	84 e1       	ldi	r24, 0x14	; 20
    6eda:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    6edc:	88 e1       	ldi	r24, 0x18	; 24
    6ede:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    6ee0:	84 81       	ldd	r24, Z+4	; 0x04
    6ee2:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    6ee4:	41 30       	cpi	r20, 0x01	; 1
    6ee6:	19 f0       	breq	.+6      	; 0x6eee <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    6ee8:	42 30       	cpi	r20, 0x02	; 2
    6eea:	19 f0       	breq	.+6      	; 0x6ef2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    6eec:	04 c0       	rjmp	.+8      	; 0x6ef6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    6eee:	80 e2       	ldi	r24, 0x20	; 32
    6ef0:	03 c0       	rjmp	.+6      	; 0x6ef8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    6ef2:	80 e3       	ldi	r24, 0x30	; 48
		break;
    6ef4:	01 c0       	rjmp	.+2      	; 0x6ef8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    6ef8:	22 23       	and	r18, r18
    6efa:	19 f0       	breq	.+6      	; 0x6f02 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    6efc:	21 30       	cpi	r18, 0x01	; 1
    6efe:	19 f0       	breq	.+6      	; 0x6f06 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    6f00:	03 c0       	rjmp	.+6      	; 0x6f08 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    6f02:	87 7f       	andi	r24, 0xF7	; 247
		break;
    6f04:	01 c0       	rjmp	.+2      	; 0x6f08 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    6f06:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    6f08:	01 11       	cpse	r16, r1
    6f0a:	02 c0       	rjmp	.+4      	; 0x6f10 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    6f0c:	93 e4       	ldi	r25, 0x43	; 67
    6f0e:	01 c0       	rjmp	.+2      	; 0x6f12 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    6f10:	93 e0       	ldi	r25, 0x03	; 3
    6f12:	89 2b       	or	r24, r25
    6f14:	e0 ea       	ldi	r30, 0xA0	; 160
    6f16:	f9 e0       	ldi	r31, 0x09	; 9
    6f18:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    6f1a:	70 e0       	ldi	r23, 0x00	; 0
    6f1c:	db 01       	movw	r26, r22
    6f1e:	a6 5a       	subi	r26, 0xA6	; 166
    6f20:	be 4d       	sbci	r27, 0xDE	; 222
    6f22:	8c 91       	ld	r24, X
    6f24:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    6f26:	db 01       	movw	r26, r22
    6f28:	a6 5c       	subi	r26, 0xC6	; 198
    6f2a:	be 4d       	sbci	r27, 0xDE	; 222
    6f2c:	8c 91       	ld	r24, X
    6f2e:	82 95       	swap	r24
    6f30:	80 7f       	andi	r24, 0xF0	; 240
    6f32:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    6f34:	0f 91       	pop	r16
    6f36:	08 95       	ret

00006f38 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    6f38:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
    6f3c:	08 95       	ret

00006f3e <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    6f3e:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    6f42:	08 95       	ret

00006f44 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    6f44:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6f48:	86 fb       	bst	r24, 6
    6f4a:	88 27       	eor	r24, r24
    6f4c:	80 f9       	bld	r24, 0
}
    6f4e:	91 e0       	ldi	r25, 0x01	; 1
    6f50:	89 27       	eor	r24, r25
    6f52:	08 95       	ret

00006f54 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    6f54:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6f58:	80 95       	com	r24
}
    6f5a:	88 1f       	adc	r24, r24
    6f5c:	88 27       	eor	r24, r24
    6f5e:	88 1f       	adc	r24, r24
    6f60:	08 95       	ret

00006f62 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    6f62:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6f66:	85 fb       	bst	r24, 5
    6f68:	88 27       	eor	r24, r24
    6f6a:	80 f9       	bld	r24, 0
}
    6f6c:	91 e0       	ldi	r25, 0x01	; 1
    6f6e:	89 27       	eor	r24, r25
    6f70:	08 95       	ret

00006f72 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    6f72:	60 93 6c 24 	sts	0x246C, r22	; 0x80246c <InterruptSenderTable+0xb0>
    6f76:	70 93 6d 24 	sts	0x246D, r23	; 0x80246d <InterruptSenderTable+0xb1>
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    6f7a:	40 93 76 23 	sts	0x2376, r20	; 0x802376 <InterruptFuncTable+0xb0>
    6f7e:	50 93 77 23 	sts	0x2377, r21	; 0x802377 <InterruptFuncTable+0xb1>
    6f82:	08 95       	ret

00006f84 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    6f84:	60 93 70 24 	sts	0x2470, r22	; 0x802470 <InterruptSenderTable+0xb4>
    6f88:	70 93 71 24 	sts	0x2471, r23	; 0x802471 <InterruptSenderTable+0xb5>
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    6f8c:	40 93 7a 23 	sts	0x237A, r20	; 0x80237a <InterruptFuncTable+0xb4>
    6f90:	50 93 7b 23 	sts	0x237B, r21	; 0x80237b <InterruptFuncTable+0xb5>
    6f94:	08 95       	ret

00006f96 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    6f96:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    6f98:	8b e6       	ldi	r24, 0x6B	; 107
    6f9a:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    6f9c:	80 ea       	ldi	r24, 0xA0	; 160
    6f9e:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    6fa0:	89 e0       	ldi	r24, 0x09	; 9
    6fa2:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    6fa4:	12 86       	std	Z+10, r1	; 0x0a
    6fa6:	08 95       	ret

00006fa8 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    6fa8:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    6faa:	8c e6       	ldi	r24, 0x6C	; 108
    6fac:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    6fae:	80 ea       	ldi	r24, 0xA0	; 160
    6fb0:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    6fb2:	89 e0       	ldi	r24, 0x09	; 9
    6fb4:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    6fb6:	16 86       	std	Z+14, r1	; 0x0e
    6fb8:	08 95       	ret

00006fba <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    6fba:	cf 93       	push	r28
    6fbc:	df 93       	push	r29
    6fbe:	ec 01       	movw	r28, r24
    6fc0:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <_ZN6CUSARTC1Ev>
    6fc4:	84 e0       	ldi	r24, 0x04	; 4
    6fc6:	92 e2       	ldi	r25, 0x22	; 34
    6fc8:	88 83       	st	Y, r24
    6fca:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    6fcc:	df 91       	pop	r29
    6fce:	cf 91       	pop	r28
    6fd0:	08 95       	ret

00006fd2 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    6fd2:	24 e0       	ldi	r18, 0x04	; 4
    6fd4:	32 e2       	ldi	r19, 0x22	; 34
    6fd6:	fc 01       	movw	r30, r24
    6fd8:	20 83       	st	Z, r18
    6fda:	31 83       	std	Z+1, r19	; 0x01
    6fdc:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <_ZN6CUSARTD1Ev>
    6fe0:	08 95       	ret

00006fe2 <_Z18onewire_crc_updatehh>:

#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
    6fe2:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t p = 8; p; p--) {
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
    6fe4:	3c e8       	ldi	r19, 0x8C	; 140
    6fe6:	26 2f       	mov	r18, r22
    6fe8:	28 27       	eor	r18, r24
    6fea:	20 ff       	sbrs	r18, 0
    6fec:	03 c0       	rjmp	.+6      	; 0x6ff4 <_Z18onewire_crc_updatehh+0x12>
    6fee:	86 95       	lsr	r24
    6ff0:	83 27       	eor	r24, r19
    6ff2:	01 c0       	rjmp	.+2      	; 0x6ff6 <_Z18onewire_crc_updatehh+0x14>
    6ff4:	86 95       	lsr	r24
		b >>= 1;
    6ff6:	66 95       	lsr	r22
    6ff8:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
	for (uint8_t p = 8; p; p--) {
    6ffa:	a9 f7       	brne	.-22     	; 0x6fe6 <_Z18onewire_crc_updatehh+0x4>
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
		b >>= 1;
	}
	return crc;
}
    6ffc:	08 95       	ret

00006ffe <_ZN8CDS18B20C1Ev>:

// default constructor
CDS18B20::CDS18B20()
    6ffe:	08 95       	ret

00007000 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    7000:	08 95       	ret

00007002 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    7002:	e0 e6       	ldi	r30, 0x60	; 96
    7004:	f6 e0       	ldi	r31, 0x06	; 6
    7006:	80 e8       	ldi	r24, 0x80	; 128
    7008:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    700a:	a7 e2       	ldi	r26, 0x27	; 39
    700c:	bf e0       	ldi	r27, 0x0F	; 15
    700e:	11 97       	sbiw	r26, 0x01	; 1
    7010:	f1 f7       	brne	.-4      	; 0x700e <_ZN8CDS18B207w1_findEv+0xc>
    7012:	00 c0       	rjmp	.+0      	; 0x7014 <_ZN8CDS18B207w1_findEv+0x12>
    7014:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    7016:	82 83       	std	Z+2, r24	; 0x02
    7018:	87 e0       	ldi	r24, 0x07	; 7
    701a:	92 e0       	ldi	r25, 0x02	; 2
    701c:	01 97       	sbiw	r24, 0x01	; 1
    701e:	f1 f7       	brne	.-4      	; 0x701c <_ZN8CDS18B207w1_findEv+0x1a>
    7020:	00 c0       	rjmp	.+0      	; 0x7022 <_ZN8CDS18B207w1_findEv+0x20>
    7022:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    7024:	80 85       	ldd	r24, Z+8	; 0x08
    7026:	af e1       	ldi	r26, 0x1F	; 31
    7028:	bd e0       	ldi	r27, 0x0D	; 13
    702a:	11 97       	sbiw	r26, 0x01	; 1
    702c:	f1 f7       	brne	.-4      	; 0x702a <_ZN8CDS18B207w1_findEv+0x28>
    702e:	00 c0       	rjmp	.+0      	; 0x7030 <_ZN8CDS18B207w1_findEv+0x2e>
    7030:	00 00       	nop
    7032:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    7034:	88 1f       	adc	r24, r24
    7036:	88 27       	eor	r24, r24
    7038:	88 1f       	adc	r24, r24
    703a:	08 95       	ret

0000703c <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    703c:	cf 93       	push	r28
    703e:	df 93       	push	r29
    7040:	80 e0       	ldi	r24, 0x00	; 0
    7042:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    7044:	c1 e0       	ldi	r28, 0x01	; 1
    7046:	d0 e0       	ldi	r29, 0x00	; 0
    7048:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    704a:	e0 e6       	ldi	r30, 0x60	; 96
    704c:	f6 e0       	ldi	r31, 0x06	; 6
    704e:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    7050:	9e 01       	movw	r18, r28
    7052:	08 2e       	mov	r0, r24
    7054:	02 c0       	rjmp	.+4      	; 0x705a <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    7056:	22 0f       	add	r18, r18
    7058:	33 1f       	adc	r19, r19
    705a:	0a 94       	dec	r0
    705c:	e2 f7       	brpl	.-8      	; 0x7056 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    705e:	d9 01       	movw	r26, r18
    7060:	a6 23       	and	r26, r22
    7062:	b7 23       	and	r27, r23
    7064:	2a 17       	cp	r18, r26
    7066:	3b 07       	cpc	r19, r27
    7068:	69 f4       	brne	.+26     	; 0x7084 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    706a:	41 83       	std	Z+1, r20	; 0x01
    706c:	25 e1       	ldi	r18, 0x15	; 21
    706e:	2a 95       	dec	r18
    7070:	f1 f7       	brne	.-4      	; 0x706e <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    7072:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    7074:	42 83       	std	Z+2, r20	; 0x02
    7076:	a7 e0       	ldi	r26, 0x07	; 7
    7078:	b2 e0       	ldi	r27, 0x02	; 2
    707a:	11 97       	sbiw	r26, 0x01	; 1
    707c:	f1 f7       	brne	.-4      	; 0x707a <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    707e:	00 c0       	rjmp	.+0      	; 0x7080 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    7080:	00 00       	nop
    7082:	0c c0       	rjmp	.+24     	; 0x709c <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    7084:	41 83       	std	Z+1, r20	; 0x01
    7086:	a7 e0       	ldi	r26, 0x07	; 7
    7088:	b2 e0       	ldi	r27, 0x02	; 2
    708a:	11 97       	sbiw	r26, 0x01	; 1
    708c:	f1 f7       	brne	.-4      	; 0x708a <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    708e:	00 c0       	rjmp	.+0      	; 0x7090 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    7090:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    7092:	42 83       	std	Z+2, r20	; 0x02
    7094:	b5 e3       	ldi	r27, 0x35	; 53
    7096:	ba 95       	dec	r27
    7098:	f1 f7       	brne	.-4      	; 0x7096 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    709a:	00 00       	nop
    709c:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    709e:	88 30       	cpi	r24, 0x08	; 8
    70a0:	91 05       	cpc	r25, r1
    70a2:	b1 f6       	brne	.-84     	; 0x7050 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	08 95       	ret

000070aa <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    70aa:	20 e0       	ldi	r18, 0x00	; 0
    70ac:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    70ae:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    70b0:	e0 e6       	ldi	r30, 0x60	; 96
    70b2:	f6 e0       	ldi	r31, 0x06	; 6
    70b4:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    70b6:	61 e0       	ldi	r22, 0x01	; 1
    70b8:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    70ba:	91 83       	std	Z+1, r25	; 0x01
    70bc:	45 e1       	ldi	r20, 0x15	; 21
    70be:	4a 95       	dec	r20
    70c0:	f1 f7       	brne	.-4      	; 0x70be <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    70c2:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    70c4:	92 83       	std	Z+2, r25	; 0x02
    70c6:	aa e6       	ldi	r26, 0x6A	; 106
    70c8:	aa 95       	dec	r26
    70ca:	f1 f7       	brne	.-4      	; 0x70c8 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    70cc:	00 c0       	rjmp	.+0      	; 0x70ce <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    70ce:	40 85       	ldd	r20, Z+8	; 0x08
    70d0:	44 23       	and	r20, r20
    70d2:	54 f0       	brlt	.+20     	; 0x70e8 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    70d4:	ab 01       	movw	r20, r22
    70d6:	02 2e       	mov	r0, r18
    70d8:	02 c0       	rjmp	.+4      	; 0x70de <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    70da:	44 0f       	add	r20, r20
    70dc:	55 1f       	adc	r21, r21
    70de:	0a 94       	dec	r0
    70e0:	e2 f7       	brpl	.-8      	; 0x70da <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    70e2:	40 95       	com	r20
    70e4:	84 23       	and	r24, r20
    70e6:	08 c0       	rjmp	.+16     	; 0x70f8 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    70e8:	ab 01       	movw	r20, r22
    70ea:	02 2e       	mov	r0, r18
    70ec:	02 c0       	rjmp	.+4      	; 0x70f2 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    70ee:	44 0f       	add	r20, r20
    70f0:	55 1f       	adc	r21, r21
    70f2:	0a 94       	dec	r0
    70f4:	e2 f7       	brpl	.-8      	; 0x70ee <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    70f6:	84 2b       	or	r24, r20
    70f8:	af e8       	ldi	r26, 0x8F	; 143
    70fa:	b1 e0       	ldi	r27, 0x01	; 1
    70fc:	11 97       	sbiw	r26, 0x01	; 1
    70fe:	f1 f7       	brne	.-4      	; 0x70fc <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    7100:	00 c0       	rjmp	.+0      	; 0x7102 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    7102:	00 00       	nop
    7104:	2f 5f       	subi	r18, 0xFF	; 255
    7106:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    7108:	28 30       	cpi	r18, 0x08	; 8
    710a:	31 05       	cpc	r19, r1
    710c:	b1 f6       	brne	.-84     	; 0x70ba <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    710e:	08 95       	ret

00007110 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    7110:	af 92       	push	r10
    7112:	bf 92       	push	r11
    7114:	df 92       	push	r13
    7116:	ef 92       	push	r14
    7118:	ff 92       	push	r15
    711a:	0f 93       	push	r16
    711c:	1f 93       	push	r17
    711e:	cf 93       	push	r28
    7120:	df 93       	push	r29
    7122:	cd b7       	in	r28, 0x3d	; 61
    7124:	de b7       	in	r29, 0x3e	; 62
    7126:	29 97       	sbiw	r28, 0x09	; 9
    7128:	cd bf       	out	0x3d, r28	; 61
    712a:	de bf       	out	0x3e, r29	; 62
    712c:	8c 01       	movw	r16, r24
	unsigned char data[9];
	int temp = 0;
	
	if (req)
    712e:	fc 01       	movw	r30, r24
    7130:	82 81       	ldd	r24, Z+2	; 0x02
    7132:	88 23       	and	r24, r24
    7134:	a1 f0       	breq	.+40     	; 0x715e <_ZN8CDS18B2010temp_18b20Ev+0x4e>
	{
		if(w1_find())
    7136:	c8 01       	movw	r24, r16
    7138:	0e 94 01 38 	call	0x7002	; 0x7002 <_ZN8CDS18B207w1_findEv>
    713c:	88 23       	and	r24, r24
    713e:	61 f0       	breq	.+24     	; 0x7158 <_ZN8CDS18B2010temp_18b20Ev+0x48>
		{
			w1_sendcmd(0xcc);	//skip ROM
    7140:	6c ec       	ldi	r22, 0xCC	; 204
    7142:	c8 01       	movw	r24, r16
    7144:	0e 94 1e 38 	call	0x703c	; 0x703c <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    7148:	64 e4       	ldi	r22, 0x44	; 68
    714a:	c8 01       	movw	r24, r16
    714c:	0e 94 1e 38 	call	0x703c	; 0x703c <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    7150:	81 e0       	ldi	r24, 0x01	; 1
    7152:	f8 01       	movw	r30, r16
    7154:	83 83       	std	Z+3, r24	; 0x03
    7156:	3f c0       	rjmp	.+126    	; 0x71d6 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		}
		else
			find = false;
    7158:	f8 01       	movw	r30, r16
    715a:	13 82       	std	Z+3, r1	; 0x03
    715c:	3c c0       	rjmp	.+120    	; 0x71d6 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
	}
	else
	{
		if (find)
    715e:	f8 01       	movw	r30, r16
    7160:	83 81       	ldd	r24, Z+3	; 0x03
    7162:	88 23       	and	r24, r24
    7164:	c1 f1       	breq	.+112    	; 0x71d6 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		{
			w1_find();
    7166:	c8 01       	movw	r24, r16
    7168:	0e 94 01 38 	call	0x7002	; 0x7002 <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    716c:	6c ec       	ldi	r22, 0xCC	; 204
    716e:	c8 01       	movw	r24, r16
    7170:	0e 94 1e 38 	call	0x703c	; 0x703c <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    7174:	6e eb       	ldi	r22, 0xBE	; 190
    7176:	c8 01       	movw	r24, r16
    7178:	0e 94 1e 38 	call	0x703c	; 0x703c <_ZN8CDS18B2010w1_sendcmdEh>
    717c:	ce 01       	movw	r24, r28
    717e:	01 96       	adiw	r24, 0x01	; 1
    7180:	7c 01       	movw	r14, r24
    7182:	5e 01       	movw	r10, r28
    7184:	9a e0       	ldi	r25, 0x0A	; 10
    7186:	a9 0e       	add	r10, r25
    7188:	b1 1c       	adc	r11, r1
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
    718a:	d1 2c       	mov	r13, r1
			for (int i = 0; i < 9; i++)
			{
				data[i] = w1_receive_byte();
    718c:	c8 01       	movw	r24, r16
    718e:	0e 94 55 38 	call	0x70aa	; 0x70aa <_ZN8CDS18B2015w1_receive_byteEv>
    7192:	68 2f       	mov	r22, r24
    7194:	f7 01       	movw	r30, r14
    7196:	81 93       	st	Z+, r24
    7198:	7f 01       	movw	r14, r30
				crc = onewire_crc_update(crc, data[i]);
    719a:	8d 2d       	mov	r24, r13
    719c:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <_Z18onewire_crc_updatehh>
    71a0:	d8 2e       	mov	r13, r24
			w1_sendcmd(0xcc);
			w1_sendcmd(0xbe);	//read temperature
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
			for (int i = 0; i < 9; i++)
    71a2:	ea 14       	cp	r14, r10
    71a4:	fb 04       	cpc	r15, r11
    71a6:	91 f7       	brne	.-28     	; 0x718c <_ZN8CDS18B2010temp_18b20Ev+0x7c>
			{
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
    71a8:	8a 81       	ldd	r24, Y+2	; 0x02
			temp = temp<<8;
			temp |= data[0];
    71aa:	69 81       	ldd	r22, Y+1	; 0x01
			
			temp *= 0.625;
			
			if (crc == 0)
    71ac:	d1 10       	cpse	r13, r1
    71ae:	13 c0       	rjmp	.+38     	; 0x71d6 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
			temp = temp<<8;
    71b0:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    71b2:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    71b4:	07 2e       	mov	r0, r23
    71b6:	00 0c       	add	r0, r0
    71b8:	88 0b       	sbc	r24, r24
    71ba:	99 0b       	sbc	r25, r25
    71bc:	0e 94 ae 3e 	call	0x7d5c	; 0x7d5c <__floatsisf>
    71c0:	20 e0       	ldi	r18, 0x00	; 0
    71c2:	30 e0       	ldi	r19, 0x00	; 0
    71c4:	40 e2       	ldi	r20, 0x20	; 32
    71c6:	5f e3       	ldi	r21, 0x3F	; 63
    71c8:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <__mulsf3>
    71cc:	0e 94 76 3e 	call	0x7cec	; 0x7cec <__fixsfsi>
    71d0:	f8 01       	movw	r30, r16
    71d2:	60 83       	st	Z, r22
    71d4:	71 83       	std	Z+1, r23	; 0x01
			if (crc == 0)
				temperature = temp;
		}
	}
	
	req = !req;
    71d6:	f8 01       	movw	r30, r16
    71d8:	92 81       	ldd	r25, Z+2	; 0x02
    71da:	81 e0       	ldi	r24, 0x01	; 1
    71dc:	89 27       	eor	r24, r25
    71de:	82 83       	std	Z+2, r24	; 0x02
	
	return temperature;
}
    71e0:	80 81       	ld	r24, Z
    71e2:	91 81       	ldd	r25, Z+1	; 0x01
    71e4:	29 96       	adiw	r28, 0x09	; 9
    71e6:	cd bf       	out	0x3d, r28	; 61
    71e8:	de bf       	out	0x3e, r29	; 62
    71ea:	df 91       	pop	r29
    71ec:	cf 91       	pop	r28
    71ee:	1f 91       	pop	r17
    71f0:	0f 91       	pop	r16
    71f2:	ff 90       	pop	r15
    71f4:	ef 90       	pop	r14
    71f6:	df 90       	pop	r13
    71f8:	bf 90       	pop	r11
    71fa:	af 90       	pop	r10
    71fc:	08 95       	ret

000071fe <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    71fe:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    7200:	a0 e6       	ldi	r26, 0x60	; 96
    7202:	b6 e0       	ldi	r27, 0x06	; 6
    7204:	80 e8       	ldi	r24, 0x80	; 128
    7206:	16 96       	adiw	r26, 0x06	; 6
    7208:	8c 93       	st	X, r24
    720a:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    720c:	57 96       	adiw	r26, 0x17	; 23
    720e:	1c 92       	st	X, r1
	
	temperature = 0;
    7210:	10 82       	st	Z, r1
    7212:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    7214:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    7216:	81 e0       	ldi	r24, 0x01	; 1
    7218:	82 83       	std	Z+2, r24	; 0x02
    721a:	08 95       	ret

0000721c <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    721c:	08 95       	ret

0000721e <_ZN11CLaserBoardD1Ev>:
    721e:	08 95       	ret

00007220 <_ZN11CLaserBoard12InitializeIOEv>:
    7220:	cf 93       	push	r28
    7222:	df 93       	push	r29
    7224:	ec 01       	movw	r28, r24
    7226:	e0 e4       	ldi	r30, 0x40	; 64
    7228:	f6 e0       	ldi	r31, 0x06	; 6
    722a:	11 82       	std	Z+1, r1	; 0x01
    722c:	98 ea       	ldi	r25, 0xA8	; 168
    722e:	90 8b       	std	Z+16, r25	; 0x10
    7230:	91 8b       	std	Z+17, r25	; 0x11
    7232:	92 8b       	std	Z+18, r25	; 0x12
    7234:	93 8b       	std	Z+19, r25	; 0x13
    7236:	94 8b       	std	Z+20, r25	; 0x14
    7238:	95 8b       	std	Z+21, r25	; 0x15
    723a:	96 8b       	std	Z+22, r25	; 0x16
    723c:	97 8b       	std	Z+23, r25	; 0x17
    723e:	8f ef       	ldi	r24, 0xFF	; 255
    7240:	84 83       	std	Z+4, r24	; 0x04
    7242:	a0 e8       	ldi	r26, 0x80	; 128
    7244:	b6 e0       	ldi	r27, 0x06	; 6
    7246:	98 e0       	ldi	r25, 0x08	; 8
    7248:	11 96       	adiw	r26, 0x01	; 1
    724a:	9c 93       	st	X, r25
    724c:	11 97       	sbiw	r26, 0x01	; 1
    724e:	53 96       	adiw	r26, 0x13	; 19
    7250:	1c 92       	st	X, r1
    7252:	53 97       	sbiw	r26, 0x13	; 19
    7254:	14 96       	adiw	r26, 0x04	; 4
    7256:	1c 92       	st	X, r1
    7258:	14 97       	sbiw	r26, 0x04	; 4
    725a:	e0 ea       	ldi	r30, 0xA0	; 160
    725c:	f6 e0       	ldi	r31, 0x06	; 6
    725e:	90 ec       	ldi	r25, 0xC0	; 192
    7260:	90 8b       	std	Z+16, r25	; 0x10
    7262:	20 e8       	ldi	r18, 0x80	; 128
    7264:	21 8b       	std	Z+17, r18	; 0x11
    7266:	22 8b       	std	Z+18, r18	; 0x12
    7268:	23 8b       	std	Z+19, r18	; 0x13
    726a:	94 8b       	std	Z+20, r25	; 0x14
    726c:	95 8b       	std	Z+21, r25	; 0x15
    726e:	96 8b       	std	Z+22, r25	; 0x16
    7270:	97 8b       	std	Z+23, r25	; 0x17
    7272:	14 82       	std	Z+4, r1	; 0x04
    7274:	81 83       	std	Z+1, r24	; 0x01
    7276:	e0 e6       	ldi	r30, 0x60	; 96
    7278:	f6 e0       	ldi	r31, 0x06	; 6
    727a:	81 e1       	ldi	r24, 0x11	; 17
    727c:	81 83       	std	Z+1, r24	; 0x01
    727e:	90 8b       	std	Z+16, r25	; 0x10
    7280:	94 8b       	std	Z+20, r25	; 0x14
    7282:	15 8a       	std	Z+21, r1	; 0x15
    7284:	14 82       	std	Z+4, r1	; 0x04
    7286:	87 e0       	ldi	r24, 0x07	; 7
    7288:	11 96       	adiw	r26, 0x01	; 1
    728a:	8c 93       	st	X, r24
    728c:	11 97       	sbiw	r26, 0x01	; 1
    728e:	50 96       	adiw	r26, 0x10	; 16
    7290:	2c 93       	st	X, r18
    7292:	50 97       	sbiw	r26, 0x10	; 16
    7294:	51 96       	adiw	r26, 0x11	; 17
    7296:	2c 93       	st	X, r18
    7298:	51 97       	sbiw	r26, 0x11	; 17
    729a:	52 96       	adiw	r26, 0x12	; 18
    729c:	2c 93       	st	X, r18
    729e:	52 97       	sbiw	r26, 0x12	; 18
    72a0:	14 96       	adiw	r26, 0x04	; 4
    72a2:	1c 92       	st	X, r1
    72a4:	e0 ea       	ldi	r30, 0xA0	; 160
    72a6:	f0 e0       	ldi	r31, 0x00	; 0
    72a8:	82 81       	ldd	r24, Z+2	; 0x02
    72aa:	81 60       	ori	r24, 0x01	; 1
    72ac:	82 83       	std	Z+2, r24	; 0x02
    72ae:	82 81       	ldd	r24, Z+2	; 0x02
    72b0:	82 60       	ori	r24, 0x02	; 2
    72b2:	82 83       	std	Z+2, r24	; 0x02
    72b4:	82 81       	ldd	r24, Z+2	; 0x02
    72b6:	84 60       	ori	r24, 0x04	; 4
    72b8:	82 83       	std	Z+2, r24	; 0x02
    72ba:	fe 01       	movw	r30, r28
    72bc:	9e 01       	movw	r18, r28
    72be:	28 5f       	subi	r18, 0xF8	; 248
    72c0:	3f 4f       	sbci	r19, 0xFF	; 255
    72c2:	91 e0       	ldi	r25, 0x01	; 1
    72c4:	91 93       	st	Z+, r25
    72c6:	e2 17       	cp	r30, r18
    72c8:	f3 07       	cpc	r31, r19
    72ca:	e1 f7       	brne	.-8      	; 0x72c4 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    72cc:	83 e0       	ldi	r24, 0x03	; 3
    72ce:	88 87       	std	Y+8, r24	; 0x08
    72d0:	e0 e4       	ldi	r30, 0x40	; 64
    72d2:	f6 e0       	ldi	r31, 0x06	; 6
    72d4:	81 e0       	ldi	r24, 0x01	; 1
    72d6:	82 87       	std	Z+10, r24	; 0x0a
    72d8:	81 87       	std	Z+9, r24	; 0x09
    72da:	e0 ea       	ldi	r30, 0xA0	; 160
    72dc:	f6 e0       	ldi	r31, 0x06	; 6
    72de:	85 83       	std	Z+5, r24	; 0x05
    72e0:	82 e0       	ldi	r24, 0x02	; 2
    72e2:	85 83       	std	Z+5, r24	; 0x05
    72e4:	df 91       	pop	r29
    72e6:	cf 91       	pop	r28
    72e8:	08 95       	ret

000072ea <_ZN11CLaserBoard15InitializeClockEv>:
    72ea:	e0 e5       	ldi	r30, 0x50	; 80
    72ec:	f0 e0       	ldi	r31, 0x00	; 0
    72ee:	8b ec       	ldi	r24, 0xCB	; 203
    72f0:	82 83       	std	Z+2, r24	; 0x02
    72f2:	80 81       	ld	r24, Z
    72f4:	88 60       	ori	r24, 0x08	; 8
    72f6:	80 83       	st	Z, r24
    72f8:	81 81       	ldd	r24, Z+1	; 0x01
    72fa:	83 ff       	sbrs	r24, 3
    72fc:	fd cf       	rjmp	.-6      	; 0x72f8 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    72fe:	e0 e5       	ldi	r30, 0x50	; 80
    7300:	f0 e0       	ldi	r31, 0x00	; 0
    7302:	85 81       	ldd	r24, Z+5	; 0x05
    7304:	98 ed       	ldi	r25, 0xD8	; 216
    7306:	94 bf       	out	0x34, r25	; 52
    7308:	84 ec       	ldi	r24, 0xC4	; 196
    730a:	85 83       	std	Z+5, r24	; 0x05
    730c:	80 81       	ld	r24, Z
    730e:	80 61       	ori	r24, 0x10	; 16
    7310:	80 83       	st	Z, r24
    7312:	e0 e4       	ldi	r30, 0x40	; 64
    7314:	f0 e0       	ldi	r31, 0x00	; 0
    7316:	81 81       	ldd	r24, Z+1	; 0x01
    7318:	94 bf       	out	0x34, r25	; 52
    731a:	11 82       	std	Z+1, r1	; 0x01
    731c:	e0 e5       	ldi	r30, 0x50	; 80
    731e:	f0 e0       	ldi	r31, 0x00	; 0
    7320:	81 81       	ldd	r24, Z+1	; 0x01
    7322:	84 ff       	sbrs	r24, 4
    7324:	fd cf       	rjmp	.-6      	; 0x7320 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    7326:	e0 e4       	ldi	r30, 0x40	; 64
    7328:	f0 e0       	ldi	r31, 0x00	; 0
    732a:	80 81       	ld	r24, Z
    732c:	88 7f       	andi	r24, 0xF8	; 248
    732e:	84 60       	ori	r24, 0x04	; 4
    7330:	98 ed       	ldi	r25, 0xD8	; 216
    7332:	94 bf       	out	0x34, r25	; 52
    7334:	80 83       	st	Z, r24
    7336:	a0 e5       	ldi	r26, 0x50	; 80
    7338:	b0 e0       	ldi	r27, 0x00	; 0
    733a:	8c 91       	ld	r24, X
    733c:	88 7f       	andi	r24, 0xF8	; 248
    733e:	8c 93       	st	X, r24
    7340:	82 81       	ldd	r24, Z+2	; 0x02
    7342:	94 bf       	out	0x34, r25	; 52
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	82 83       	std	Z+2, r24	; 0x02
    7348:	e0 eb       	ldi	r30, 0xB0	; 176
    734a:	f0 e0       	ldi	r31, 0x00	; 0
    734c:	84 81       	ldd	r24, Z+4	; 0x04
    734e:	8c 7f       	andi	r24, 0xFC	; 252
    7350:	84 83       	std	Z+4, r24	; 0x04
    7352:	08 95       	ret

00007354 <_ZN11CLaserBoard5PWMOnEv>:
    7354:	84 e0       	ldi	r24, 0x04	; 4
    7356:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    735a:	08 95       	ret

0000735c <_ZN11CLaserBoard6PWMOffEv>:
    735c:	84 e0       	ldi	r24, 0x04	; 4
    735e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    7362:	08 95       	ret

00007364 <_ZN11CLaserBoard5REDOnEv>:
    7364:	82 e0       	ldi	r24, 0x02	; 2
    7366:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    736a:	08 95       	ret

0000736c <_ZN11CLaserBoard5GRNOnEv>:
    736c:	84 e0       	ldi	r24, 0x04	; 4
    736e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    7372:	08 95       	ret

00007374 <_ZN11CLaserBoard5BLUOnEv>:
    7374:	88 e0       	ldi	r24, 0x08	; 8
    7376:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    737a:	08 95       	ret

0000737c <_ZN11CLaserBoard8Relay1OnEv>:
    737c:	81 e0       	ldi	r24, 0x01	; 1
    737e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    7382:	08 95       	ret

00007384 <_ZN11CLaserBoard8Relay2OnEv>:
    7384:	80 e1       	ldi	r24, 0x10	; 16
    7386:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    738a:	08 95       	ret

0000738c <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    738c:	80 e1       	ldi	r24, 0x10	; 16
    738e:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    7392:	08 95       	ret

00007394 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    7394:	82 e0       	ldi	r24, 0x02	; 2
    7396:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    739a:	08 95       	ret

0000739c <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    739c:	82 e0       	ldi	r24, 0x02	; 2
    739e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    73a2:	08 95       	ret

000073a4 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    73a4:	f8 94       	cli
    73a6:	84 e6       	ldi	r24, 0x64	; 100
    73a8:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    73aa:	e0 e8       	ldi	r30, 0x80	; 128
    73ac:	f6 e0       	ldi	r31, 0x06	; 6
    73ae:	28 e0       	ldi	r18, 0x08	; 8
    73b0:	25 83       	std	Z+5, r18	; 0x05
    73b2:	af e9       	ldi	r26, 0x9F	; 159
    73b4:	bf e0       	ldi	r27, 0x0F	; 15
    73b6:	11 97       	sbiw	r26, 0x01	; 1
    73b8:	f1 f7       	brne	.-4      	; 0x73b6 <_ZN11CLaserBoard4BeepEv+0x12>
    73ba:	00 c0       	rjmp	.+0      	; 0x73bc <_ZN11CLaserBoard4BeepEv+0x18>
    73bc:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    73be:	26 83       	std	Z+6, r18	; 0x06
    73c0:	af e9       	ldi	r26, 0x9F	; 159
    73c2:	bf e0       	ldi	r27, 0x0F	; 15
    73c4:	11 97       	sbiw	r26, 0x01	; 1
    73c6:	f1 f7       	brne	.-4      	; 0x73c4 <_ZN11CLaserBoard4BeepEv+0x20>
    73c8:	00 c0       	rjmp	.+0      	; 0x73ca <_ZN11CLaserBoard4BeepEv+0x26>
    73ca:	00 00       	nop
    73cc:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    73ce:	81 f7       	brne	.-32     	; 0x73b0 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    73d0:	78 94       	sei
    73d2:	08 95       	ret

000073d4 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    73d4:	f8 94       	cli
    73d6:	45 e0       	ldi	r20, 0x05	; 5
    73d8:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    73da:	64 e6       	ldi	r22, 0x64	; 100
    73dc:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    73de:	e0 e8       	ldi	r30, 0x80	; 128
    73e0:	f6 e0       	ldi	r31, 0x06	; 6
    73e2:	28 e0       	ldi	r18, 0x08	; 8
    73e4:	1c c0       	rjmp	.+56     	; 0x741e <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    73e6:	25 83       	std	Z+5, r18	; 0x05
    73e8:	af e9       	ldi	r26, 0x9F	; 159
    73ea:	bf e0       	ldi	r27, 0x0F	; 15
    73ec:	11 97       	sbiw	r26, 0x01	; 1
    73ee:	f1 f7       	brne	.-4      	; 0x73ec <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    73f0:	00 c0       	rjmp	.+0      	; 0x73f2 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    73f2:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    73f4:	26 83       	std	Z+6, r18	; 0x06
    73f6:	af e9       	ldi	r26, 0x9F	; 159
    73f8:	bf e0       	ldi	r27, 0x0F	; 15
    73fa:	11 97       	sbiw	r26, 0x01	; 1
    73fc:	f1 f7       	brne	.-4      	; 0x73fa <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    73fe:	00 c0       	rjmp	.+0      	; 0x7400 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    7400:	00 00       	nop
    7402:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    7404:	81 f7       	brne	.-32     	; 0x73e6 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7406:	bf ef       	ldi	r27, 0xFF	; 255
    7408:	73 ec       	ldi	r23, 0xC3	; 195
    740a:	89 e0       	ldi	r24, 0x09	; 9
    740c:	b1 50       	subi	r27, 0x01	; 1
    740e:	70 40       	sbci	r23, 0x00	; 0
    7410:	80 40       	sbci	r24, 0x00	; 0
    7412:	e1 f7       	brne	.-8      	; 0x740c <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    7414:	00 c0       	rjmp	.+0      	; 0x7416 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    7416:	00 00       	nop
    7418:	41 50       	subi	r20, 0x01	; 1
    741a:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    741c:	19 f0       	breq	.+6      	; 0x7424 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    741e:	86 2f       	mov	r24, r22
    7420:	93 2f       	mov	r25, r19
    7422:	e1 cf       	rjmp	.-62     	; 0x73e6 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    7424:	78 94       	sei
    7426:	08 95       	ret

00007428 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    7428:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    742c:	fc 01       	movw	r30, r24
    742e:	21 87       	std	Z+9, r18	; 0x09
    7430:	08 95       	ret

00007432 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    7432:	fc 01       	movw	r30, r24
    7434:	81 85       	ldd	r24, Z+9	; 0x09
    7436:	81 70       	andi	r24, 0x01	; 1
    7438:	08 95       	ret

0000743a <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    743a:	08 95       	ret

0000743c <_ZN12CSoundPlayerD1Ev>:
    743c:	08 95       	ret

0000743e <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    743e:	e0 e0       	ldi	r30, 0x00	; 0
    7440:	fa e0       	ldi	r31, 0x0A	; 10
    7442:	10 82       	st	Z, r1
    7444:	87 e8       	ldi	r24, 0x87	; 135
    7446:	81 83       	std	Z+1, r24	; 0x01
    7448:	13 82       	std	Z+3, r1	; 0x03
    744a:	84 e2       	ldi	r24, 0x24	; 36
    744c:	94 ef       	ldi	r25, 0xF4	; 244
    744e:	86 a3       	std	Z+38, r24	; 0x26
    7450:	97 a3       	std	Z+39, r25	; 0x27
    7452:	82 e1       	ldi	r24, 0x12	; 18
    7454:	9a e7       	ldi	r25, 0x7A	; 122
    7456:	86 a7       	std	Z+46, r24	; 0x2e
    7458:	97 a7       	std	Z+47, r25	; 0x2f
    745a:	16 82       	std	Z+6, r1	; 0x06
    745c:	17 82       	std	Z+7, r1	; 0x07
    745e:	08 95       	ret

00007460 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    7460:	e0 e4       	ldi	r30, 0x40	; 64
    7462:	fa e0       	ldi	r31, 0x0A	; 10
    7464:	10 82       	st	Z, r1
    7466:	11 82       	std	Z+1, r1	; 0x01
    7468:	13 82       	std	Z+3, r1	; 0x03
    746a:	84 e2       	ldi	r24, 0x24	; 36
    746c:	94 ef       	ldi	r25, 0xF4	; 244
    746e:	86 a3       	std	Z+38, r24	; 0x26
    7470:	97 a3       	std	Z+39, r25	; 0x27
    7472:	16 82       	std	Z+6, r1	; 0x06
    7474:	17 82       	std	Z+7, r1	; 0x07
    7476:	08 95       	ret

00007478 <_ZN12CSoundPlayer10SoundStartEjjh>:
    7478:	0f 93       	push	r16
    747a:	1f 93       	push	r17
    747c:	cf 93       	push	r28
    747e:	8a 01       	movw	r16, r20
    7480:	c2 2f       	mov	r28, r18
    7482:	9b 01       	movw	r18, r22
    7484:	40 e0       	ldi	r20, 0x00	; 0
    7486:	50 e0       	ldi	r21, 0x00	; 0
    7488:	64 e2       	ldi	r22, 0x24	; 36
    748a:	74 ef       	ldi	r23, 0xF4	; 244
    748c:	80 e0       	ldi	r24, 0x00	; 0
    748e:	90 e0       	ldi	r25, 0x00	; 0
    7490:	0e 94 f1 3f 	call	0x7fe2	; 0x7fe2 <__divmodsi4>
    7494:	b8 01       	movw	r22, r16
    7496:	76 95       	lsr	r23
    7498:	67 95       	ror	r22
    749a:	ee e3       	ldi	r30, 0x3E	; 62
    749c:	e0 9f       	mul	r30, r16
    749e:	c0 01       	movw	r24, r0
    74a0:	e1 9f       	mul	r30, r17
    74a2:	90 0d       	add	r25, r0
    74a4:	11 24       	eor	r1, r1
    74a6:	86 0f       	add	r24, r22
    74a8:	97 1f       	adc	r25, r23
    74aa:	cf 5f       	subi	r28, 0xFF	; 255
    74ac:	b9 01       	movw	r22, r18
    74ae:	02 c0       	rjmp	.+4      	; 0x74b4 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    74b0:	76 95       	lsr	r23
    74b2:	67 95       	ror	r22
    74b4:	ca 95       	dec	r28
    74b6:	e2 f7       	brpl	.-8      	; 0x74b0 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    74b8:	e0 e0       	ldi	r30, 0x00	; 0
    74ba:	fa e0       	ldi	r31, 0x0A	; 10
    74bc:	66 a7       	std	Z+46, r22	; 0x2e
    74be:	77 a7       	std	Z+47, r23	; 0x2f
    74c0:	26 a3       	std	Z+38, r18	; 0x26
    74c2:	37 a3       	std	Z+39, r19	; 0x27
    74c4:	a0 e4       	ldi	r26, 0x40	; 64
    74c6:	ba e0       	ldi	r27, 0x0A	; 10
    74c8:	96 96       	adiw	r26, 0x26	; 38
    74ca:	8d 93       	st	X+, r24
    74cc:	9c 93       	st	X, r25
    74ce:	97 97       	sbiw	r26, 0x27	; 39
    74d0:	86 e0       	ldi	r24, 0x06	; 6
    74d2:	80 83       	st	Z, r24
    74d4:	87 e0       	ldi	r24, 0x07	; 7
    74d6:	8c 93       	st	X, r24
    74d8:	cf 91       	pop	r28
    74da:	1f 91       	pop	r17
    74dc:	0f 91       	pop	r16
    74de:	08 95       	ret

000074e0 <_ZN12CSoundPlayer9SoundStopEv>:
    74e0:	e0 e4       	ldi	r30, 0x40	; 64
    74e2:	fa e0       	ldi	r31, 0x0A	; 10
    74e4:	84 85       	ldd	r24, Z+12	; 0x0c
    74e6:	80 ff       	sbrs	r24, 0
    74e8:	fd cf       	rjmp	.-6      	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    74ea:	e0 e4       	ldi	r30, 0x40	; 64
    74ec:	fa e0       	ldi	r31, 0x0A	; 10
    74ee:	84 85       	ldd	r24, Z+12	; 0x0c
    74f0:	81 70       	andi	r24, 0x01	; 1
    74f2:	84 87       	std	Z+12, r24	; 0x0c
    74f4:	a0 e0       	ldi	r26, 0x00	; 0
    74f6:	ba e0       	ldi	r27, 0x0A	; 10
    74f8:	1c 92       	st	X, r1
    74fa:	10 82       	st	Z, r1
    74fc:	10 a2       	std	Z+32, r1	; 0x20
    74fe:	11 a2       	std	Z+33, r1	; 0x21
    7500:	90 96       	adiw	r26, 0x20	; 32
    7502:	1d 92       	st	X+, r1
    7504:	1c 92       	st	X, r1
    7506:	91 97       	sbiw	r26, 0x21	; 33
    7508:	2f ef       	ldi	r18, 0xFF	; 255
    750a:	83 ef       	ldi	r24, 0xF3	; 243
    750c:	91 e0       	ldi	r25, 0x01	; 1
    750e:	21 50       	subi	r18, 0x01	; 1
    7510:	80 40       	sbci	r24, 0x00	; 0
    7512:	90 40       	sbci	r25, 0x00	; 0
    7514:	e1 f7       	brne	.-8      	; 0x750e <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    7516:	00 c0       	rjmp	.+0      	; 0x7518 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    7518:	00 00       	nop
    751a:	08 95       	ret

0000751c <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    751c:	cf 93       	push	r28
    751e:	df 93       	push	r29
    7520:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    7522:	0e 94 1f 3a 	call	0x743e	; 0x743e <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    7526:	ce 01       	movw	r24, r28
    7528:	0e 94 30 3a 	call	0x7460	; 0x7460 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    752c:	df 91       	pop	r29
    752e:	cf 91       	pop	r28
    7530:	08 95       	ret

00007532 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    7532:	fc 01       	movw	r30, r24
    7534:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7536:	e0 e0       	ldi	r30, 0x00	; 0
    7538:	f8 e0       	ldi	r31, 0x08	; 8
    753a:	80 81       	ld	r24, Z
    753c:	80 7f       	andi	r24, 0xF0	; 240
    753e:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7540:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    7542:	10 a2       	std	Z+32, r1	; 0x20
    7544:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    7546:	10 a6       	std	Z+40, r1	; 0x28
    7548:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    754a:	12 a6       	std	Z+42, r1	; 0x2a
    754c:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    754e:	14 a6       	std	Z+44, r1	; 0x2c
    7550:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    7552:	16 a6       	std	Z+46, r1	; 0x2e
    7554:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    7556:	16 a2       	std	Z+38, r1	; 0x26
    7558:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    755a:	81 81       	ldd	r24, Z+1	; 0x01
    755c:	88 7f       	andi	r24, 0xF8	; 248
    755e:	68 2b       	or	r22, r24
    7560:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7562:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7564:	17 82       	std	Z+7, r1	; 0x07
    7566:	08 95       	ret

00007568 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    7568:	e0 e0       	ldi	r30, 0x00	; 0
    756a:	f8 e0       	ldi	r31, 0x08	; 8
    756c:	66 a3       	std	Z+38, r22	; 0x26
    756e:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    7570:	20 81       	ld	r18, Z
    7572:	20 7f       	andi	r18, 0xF0	; 240
    7574:	dc 01       	movw	r26, r24
    7576:	12 96       	adiw	r26, 0x02	; 2
    7578:	9c 91       	ld	r25, X
    757a:	82 2f       	mov	r24, r18
    757c:	89 2b       	or	r24, r25
    757e:	80 83       	st	Z, r24
    7580:	08 95       	ret

00007582 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7582:	e0 e0       	ldi	r30, 0x00	; 0
    7584:	f8 e0       	ldi	r31, 0x08	; 8
    7586:	80 81       	ld	r24, Z
    7588:	80 7f       	andi	r24, 0xF0	; 240
    758a:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    758c:	10 a2       	std	Z+32, r1	; 0x20
    758e:	11 a2       	std	Z+33, r1	; 0x21
    7590:	08 95       	ret

00007592 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    7592:	e0 e0       	ldi	r30, 0x00	; 0
    7594:	f8 e0       	ldi	r31, 0x08	; 8
    7596:	81 81       	ldd	r24, Z+1	; 0x01
    7598:	8f 70       	andi	r24, 0x0F	; 15
    759a:	68 2b       	or	r22, r24
    759c:	61 83       	std	Z+1, r22	; 0x01
    759e:	08 95       	ret

000075a0 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    75a0:	e0 e0       	ldi	r30, 0x00	; 0
    75a2:	f8 e0       	ldi	r31, 0x08	; 8
    75a4:	81 81       	ldd	r24, Z+1	; 0x01
    75a6:	60 95       	com	r22
    75a8:	68 23       	and	r22, r24
    75aa:	61 83       	std	Z+1, r22	; 0x01
    75ac:	08 95       	ret

000075ae <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    75ae:	60 93 26 08 	sts	0x0826, r22	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    75b2:	70 93 27 08 	sts	0x0827, r23	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    75b6:	08 95       	ret

000075b8 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    75b8:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    75bc:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    75c0:	08 95       	ret

000075c2 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    75c2:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    75c6:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    75ca:	08 95       	ret

000075cc <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    75cc:	60 93 2c 08 	sts	0x082C, r22	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
    75d0:	70 93 2d 08 	sts	0x082D, r23	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
    75d4:	08 95       	ret

000075d6 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    75d6:	60 93 2e 08 	sts	0x082E, r22	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
    75da:	70 93 2f 08 	sts	0x082F, r23	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
    75de:	08 95       	ret

000075e0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    75e0:	61 15       	cp	r22, r1
    75e2:	71 05       	cpc	r23, r1
    75e4:	29 f0       	breq	.+10     	; 0x75f0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    75e6:	e0 e0       	ldi	r30, 0x00	; 0
    75e8:	f8 e0       	ldi	r31, 0x08	; 8
    75ea:	86 81       	ldd	r24, Z+6	; 0x06
    75ec:	28 2b       	or	r18, r24
    75ee:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    75f0:	60 93 e2 22 	sts	0x22E2, r22	; 0x8022e2 <InterruptFuncTable+0x1c>
    75f4:	70 93 e3 22 	sts	0x22E3, r23	; 0x8022e3 <InterruptFuncTable+0x1d>
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    75f8:	40 93 d8 23 	sts	0x23D8, r20	; 0x8023d8 <InterruptSenderTable+0x1c>
    75fc:	50 93 d9 23 	sts	0x23D9, r21	; 0x8023d9 <InterruptSenderTable+0x1d>
    7600:	08 95       	ret

00007602 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7602:	61 15       	cp	r22, r1
    7604:	71 05       	cpc	r23, r1
    7606:	29 f0       	breq	.+10     	; 0x7612 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7608:	e0 e0       	ldi	r30, 0x00	; 0
    760a:	f8 e0       	ldi	r31, 0x08	; 8
    760c:	86 81       	ldd	r24, Z+6	; 0x06
    760e:	28 2b       	or	r18, r24
    7610:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    7612:	60 93 e4 22 	sts	0x22E4, r22	; 0x8022e4 <InterruptFuncTable+0x1e>
    7616:	70 93 e5 22 	sts	0x22E5, r23	; 0x8022e5 <InterruptFuncTable+0x1f>
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    761a:	40 93 da 23 	sts	0x23DA, r20	; 0x8023da <InterruptSenderTable+0x1e>
    761e:	50 93 db 23 	sts	0x23DB, r21	; 0x8023db <InterruptSenderTable+0x1f>
    7622:	08 95       	ret

00007624 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7624:	61 15       	cp	r22, r1
    7626:	71 05       	cpc	r23, r1
    7628:	29 f0       	breq	.+10     	; 0x7634 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    762a:	e0 e0       	ldi	r30, 0x00	; 0
    762c:	f8 e0       	ldi	r31, 0x08	; 8
    762e:	87 81       	ldd	r24, Z+7	; 0x07
    7630:	28 2b       	or	r18, r24
    7632:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    7634:	60 93 e6 22 	sts	0x22E6, r22	; 0x8022e6 <InterruptFuncTable+0x20>
    7638:	70 93 e7 22 	sts	0x22E7, r23	; 0x8022e7 <InterruptFuncTable+0x21>
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    763c:	40 93 dc 23 	sts	0x23DC, r20	; 0x8023dc <InterruptSenderTable+0x20>
    7640:	50 93 dd 23 	sts	0x23DD, r21	; 0x8023dd <InterruptSenderTable+0x21>
    7644:	08 95       	ret

00007646 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7646:	61 15       	cp	r22, r1
    7648:	71 05       	cpc	r23, r1
    764a:	29 f0       	breq	.+10     	; 0x7656 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    764c:	e0 e0       	ldi	r30, 0x00	; 0
    764e:	f8 e0       	ldi	r31, 0x08	; 8
    7650:	87 81       	ldd	r24, Z+7	; 0x07
    7652:	28 2b       	or	r18, r24
    7654:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    7656:	60 93 e8 22 	sts	0x22E8, r22	; 0x8022e8 <InterruptFuncTable+0x22>
    765a:	70 93 e9 22 	sts	0x22E9, r23	; 0x8022e9 <InterruptFuncTable+0x23>
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    765e:	40 93 de 23 	sts	0x23DE, r20	; 0x8023de <InterruptSenderTable+0x22>
    7662:	50 93 df 23 	sts	0x23DF, r21	; 0x8023df <InterruptSenderTable+0x23>
    7666:	08 95       	ret

00007668 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    7668:	61 15       	cp	r22, r1
    766a:	71 05       	cpc	r23, r1
    766c:	29 f0       	breq	.+10     	; 0x7678 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    766e:	e0 e0       	ldi	r30, 0x00	; 0
    7670:	f8 e0       	ldi	r31, 0x08	; 8
    7672:	87 81       	ldd	r24, Z+7	; 0x07
    7674:	28 2b       	or	r18, r24
    7676:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    7678:	60 93 ea 22 	sts	0x22EA, r22	; 0x8022ea <InterruptFuncTable+0x24>
    767c:	70 93 eb 22 	sts	0x22EB, r23	; 0x8022eb <InterruptFuncTable+0x25>
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    7680:	40 93 e0 23 	sts	0x23E0, r20	; 0x8023e0 <InterruptSenderTable+0x24>
    7684:	50 93 e1 23 	sts	0x23E1, r21	; 0x8023e1 <InterruptSenderTable+0x25>
    7688:	08 95       	ret

0000768a <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    768a:	61 15       	cp	r22, r1
    768c:	71 05       	cpc	r23, r1
    768e:	29 f0       	breq	.+10     	; 0x769a <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7690:	e0 e0       	ldi	r30, 0x00	; 0
    7692:	f8 e0       	ldi	r31, 0x08	; 8
    7694:	87 81       	ldd	r24, Z+7	; 0x07
    7696:	28 2b       	or	r18, r24
    7698:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    769a:	60 93 ec 22 	sts	0x22EC, r22	; 0x8022ec <InterruptFuncTable+0x26>
    769e:	70 93 ed 22 	sts	0x22ED, r23	; 0x8022ed <InterruptFuncTable+0x27>
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    76a2:	40 93 e2 23 	sts	0x23E2, r20	; 0x8023e2 <InterruptSenderTable+0x26>
    76a6:	50 93 e3 23 	sts	0x23E3, r21	; 0x8023e3 <InterruptSenderTable+0x27>
    76aa:	08 95       	ret

000076ac <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    76ac:	cf 93       	push	r28
    76ae:	df 93       	push	r29
    76b0:	ec 01       	movw	r28, r24
    76b2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN6CTimerC1Ev>
    76b6:	8c e1       	ldi	r24, 0x1C	; 28
    76b8:	92 e2       	ldi	r25, 0x22	; 34
    76ba:	88 83       	st	Y, r24
    76bc:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    76be:	df 91       	pop	r29
    76c0:	cf 91       	pop	r28
    76c2:	08 95       	ret

000076c4 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    76c4:	2c e1       	ldi	r18, 0x1C	; 28
    76c6:	32 e2       	ldi	r19, 0x22	; 34
    76c8:	fc 01       	movw	r30, r24
    76ca:	20 83       	st	Z, r18
    76cc:	31 83       	std	Z+1, r19	; 0x01
    76ce:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN6CTimerD1Ev>
    76d2:	08 95       	ret

000076d4 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    76d4:	fc 01       	movw	r30, r24
    76d6:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    76d8:	e0 e4       	ldi	r30, 0x40	; 64
    76da:	f8 e0       	ldi	r31, 0x08	; 8
    76dc:	80 81       	ld	r24, Z
    76de:	80 7f       	andi	r24, 0xF0	; 240
    76e0:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    76e2:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    76e4:	10 a2       	std	Z+32, r1	; 0x20
    76e6:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    76e8:	10 a6       	std	Z+40, r1	; 0x28
    76ea:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    76ec:	12 a6       	std	Z+42, r1	; 0x2a
    76ee:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    76f0:	16 a2       	std	Z+38, r1	; 0x26
    76f2:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    76f4:	81 81       	ldd	r24, Z+1	; 0x01
    76f6:	88 7f       	andi	r24, 0xF8	; 248
    76f8:	68 2b       	or	r22, r24
    76fa:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    76fc:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    76fe:	17 82       	std	Z+7, r1	; 0x07
    7700:	08 95       	ret

00007702 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    7702:	e0 e4       	ldi	r30, 0x40	; 64
    7704:	f8 e0       	ldi	r31, 0x08	; 8
    7706:	66 a3       	std	Z+38, r22	; 0x26
    7708:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    770a:	20 81       	ld	r18, Z
    770c:	20 7f       	andi	r18, 0xF0	; 240
    770e:	dc 01       	movw	r26, r24
    7710:	12 96       	adiw	r26, 0x02	; 2
    7712:	9c 91       	ld	r25, X
    7714:	82 2f       	mov	r24, r18
    7716:	89 2b       	or	r24, r25
    7718:	80 83       	st	Z, r24
    771a:	08 95       	ret

0000771c <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    771c:	e0 e4       	ldi	r30, 0x40	; 64
    771e:	f8 e0       	ldi	r31, 0x08	; 8
    7720:	80 81       	ld	r24, Z
    7722:	80 7f       	andi	r24, 0xF0	; 240
    7724:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    7726:	10 a2       	std	Z+32, r1	; 0x20
    7728:	11 a2       	std	Z+33, r1	; 0x21
    772a:	08 95       	ret

0000772c <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    772c:	e0 e4       	ldi	r30, 0x40	; 64
    772e:	f8 e0       	ldi	r31, 0x08	; 8
    7730:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7732:	80 81       	ld	r24, Z
    7734:	80 7f       	andi	r24, 0xF0	; 240
    7736:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    7738:	10 a2       	std	Z+32, r1	; 0x20
    773a:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    773c:	90 83       	st	Z, r25
    773e:	08 95       	ret

00007740 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    7740:	e0 e4       	ldi	r30, 0x40	; 64
    7742:	f8 e0       	ldi	r31, 0x08	; 8
    7744:	81 81       	ldd	r24, Z+1	; 0x01
    7746:	8f 70       	andi	r24, 0x0F	; 15
    7748:	68 2b       	or	r22, r24
    774a:	61 83       	std	Z+1, r22	; 0x01
    774c:	08 95       	ret

0000774e <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    774e:	e0 e4       	ldi	r30, 0x40	; 64
    7750:	f8 e0       	ldi	r31, 0x08	; 8
    7752:	81 81       	ldd	r24, Z+1	; 0x01
    7754:	60 95       	com	r22
    7756:	68 23       	and	r22, r24
    7758:	61 83       	std	Z+1, r22	; 0x01
    775a:	08 95       	ret

0000775c <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    775c:	60 93 66 08 	sts	0x0866, r22	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    7760:	70 93 67 08 	sts	0x0867, r23	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    7764:	08 95       	ret

00007766 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    7766:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    776a:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    776e:	08 95       	ret

00007770 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    7770:	60 93 6a 08 	sts	0x086A, r22	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    7774:	70 93 6b 08 	sts	0x086B, r23	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    7778:	08 95       	ret

0000777a <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    777a:	61 15       	cp	r22, r1
    777c:	71 05       	cpc	r23, r1
    777e:	31 f0       	breq	.+12     	; 0x778c <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    7780:	e0 e4       	ldi	r30, 0x40	; 64
    7782:	f8 e0       	ldi	r31, 0x08	; 8
    7784:	86 81       	ldd	r24, Z+6	; 0x06
    7786:	83 70       	andi	r24, 0x03	; 3
    7788:	28 2b       	or	r18, r24
    778a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    778c:	60 93 ee 22 	sts	0x22EE, r22	; 0x8022ee <InterruptFuncTable+0x28>
    7790:	70 93 ef 22 	sts	0x22EF, r23	; 0x8022ef <InterruptFuncTable+0x29>
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    7794:	40 93 e4 23 	sts	0x23E4, r20	; 0x8023e4 <InterruptSenderTable+0x28>
    7798:	50 93 e5 23 	sts	0x23E5, r21	; 0x8023e5 <InterruptSenderTable+0x29>
    779c:	08 95       	ret

0000779e <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    779e:	61 15       	cp	r22, r1
    77a0:	71 05       	cpc	r23, r1
    77a2:	31 f0       	breq	.+12     	; 0x77b0 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    77a4:	e0 e4       	ldi	r30, 0x40	; 64
    77a6:	f8 e0       	ldi	r31, 0x08	; 8
    77a8:	86 81       	ldd	r24, Z+6	; 0x06
    77aa:	8c 70       	andi	r24, 0x0C	; 12
    77ac:	28 2b       	or	r18, r24
    77ae:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    77b0:	60 93 f0 22 	sts	0x22F0, r22	; 0x8022f0 <InterruptFuncTable+0x2a>
    77b4:	70 93 f1 22 	sts	0x22F1, r23	; 0x8022f1 <InterruptFuncTable+0x2b>
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    77b8:	40 93 e6 23 	sts	0x23E6, r20	; 0x8023e6 <InterruptSenderTable+0x2a>
    77bc:	50 93 e7 23 	sts	0x23E7, r21	; 0x8023e7 <InterruptSenderTable+0x2b>
    77c0:	08 95       	ret

000077c2 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    77c2:	61 15       	cp	r22, r1
    77c4:	71 05       	cpc	r23, r1
    77c6:	31 f0       	breq	.+12     	; 0x77d4 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    77c8:	e0 e4       	ldi	r30, 0x40	; 64
    77ca:	f8 e0       	ldi	r31, 0x08	; 8
    77cc:	87 81       	ldd	r24, Z+7	; 0x07
    77ce:	83 70       	andi	r24, 0x03	; 3
    77d0:	28 2b       	or	r18, r24
    77d2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    77d4:	60 93 f2 22 	sts	0x22F2, r22	; 0x8022f2 <InterruptFuncTable+0x2c>
    77d8:	70 93 f3 22 	sts	0x22F3, r23	; 0x8022f3 <InterruptFuncTable+0x2d>
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    77dc:	40 93 e8 23 	sts	0x23E8, r20	; 0x8023e8 <InterruptSenderTable+0x2c>
    77e0:	50 93 e9 23 	sts	0x23E9, r21	; 0x8023e9 <InterruptSenderTable+0x2d>
    77e4:	08 95       	ret

000077e6 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    77e6:	61 15       	cp	r22, r1
    77e8:	71 05       	cpc	r23, r1
    77ea:	31 f0       	breq	.+12     	; 0x77f8 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    77ec:	e0 e4       	ldi	r30, 0x40	; 64
    77ee:	f8 e0       	ldi	r31, 0x08	; 8
    77f0:	87 81       	ldd	r24, Z+7	; 0x07
    77f2:	8c 70       	andi	r24, 0x0C	; 12
    77f4:	28 2b       	or	r18, r24
    77f6:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    77f8:	60 93 f4 22 	sts	0x22F4, r22	; 0x8022f4 <InterruptFuncTable+0x2e>
    77fc:	70 93 f5 22 	sts	0x22F5, r23	; 0x8022f5 <InterruptFuncTable+0x2f>
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    7800:	40 93 ea 23 	sts	0x23EA, r20	; 0x8023ea <InterruptSenderTable+0x2e>
    7804:	50 93 eb 23 	sts	0x23EB, r21	; 0x8023eb <InterruptSenderTable+0x2f>
    7808:	08 95       	ret

0000780a <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    780a:	cf 93       	push	r28
    780c:	df 93       	push	r29
    780e:	ec 01       	movw	r28, r24
    7810:	0e 94 57 1d 	call	0x3aae	; 0x3aae <_ZN7CTimer1C1Ev>
    7814:	80 e4       	ldi	r24, 0x40	; 64
    7816:	92 e2       	ldi	r25, 0x22	; 34
    7818:	88 83       	st	Y, r24
    781a:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    781c:	df 91       	pop	r29
    781e:	cf 91       	pop	r28
    7820:	08 95       	ret

00007822 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    7822:	20 e4       	ldi	r18, 0x40	; 64
    7824:	32 e2       	ldi	r19, 0x22	; 34
    7826:	fc 01       	movw	r30, r24
    7828:	20 83       	st	Z, r18
    782a:	31 83       	std	Z+1, r19	; 0x01
    782c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN7CTimer1D1Ev>
    7830:	08 95       	ret

00007832 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    7832:	fc 01       	movw	r30, r24
    7834:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7836:	e0 e0       	ldi	r30, 0x00	; 0
    7838:	f9 e0       	ldi	r31, 0x09	; 9
    783a:	80 81       	ld	r24, Z
    783c:	80 7f       	andi	r24, 0xF0	; 240
    783e:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7840:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    7842:	10 a2       	std	Z+32, r1	; 0x20
    7844:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    7846:	10 a6       	std	Z+40, r1	; 0x28
    7848:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    784a:	12 a6       	std	Z+42, r1	; 0x2a
    784c:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    784e:	14 a6       	std	Z+44, r1	; 0x2c
    7850:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    7852:	16 a6       	std	Z+46, r1	; 0x2e
    7854:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    7856:	16 a2       	std	Z+38, r1	; 0x26
    7858:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    785a:	81 81       	ldd	r24, Z+1	; 0x01
    785c:	88 7f       	andi	r24, 0xF8	; 248
    785e:	68 2b       	or	r22, r24
    7860:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7862:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7864:	17 82       	std	Z+7, r1	; 0x07
    7866:	08 95       	ret

00007868 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    7868:	e0 e0       	ldi	r30, 0x00	; 0
    786a:	f9 e0       	ldi	r31, 0x09	; 9
    786c:	66 a3       	std	Z+38, r22	; 0x26
    786e:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    7870:	20 81       	ld	r18, Z
    7872:	20 7f       	andi	r18, 0xF0	; 240
    7874:	dc 01       	movw	r26, r24
    7876:	12 96       	adiw	r26, 0x02	; 2
    7878:	9c 91       	ld	r25, X
    787a:	82 2f       	mov	r24, r18
    787c:	89 2b       	or	r24, r25
    787e:	80 83       	st	Z, r24
    7880:	08 95       	ret

00007882 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7882:	e0 e0       	ldi	r30, 0x00	; 0
    7884:	f9 e0       	ldi	r31, 0x09	; 9
    7886:	80 81       	ld	r24, Z
    7888:	80 7f       	andi	r24, 0xF0	; 240
    788a:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    788c:	10 a2       	std	Z+32, r1	; 0x20
    788e:	11 a2       	std	Z+33, r1	; 0x21
    7890:	08 95       	ret

00007892 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    7892:	e0 e0       	ldi	r30, 0x00	; 0
    7894:	f9 e0       	ldi	r31, 0x09	; 9
    7896:	81 81       	ldd	r24, Z+1	; 0x01
    7898:	8f 70       	andi	r24, 0x0F	; 15
    789a:	68 2b       	or	r22, r24
    789c:	61 83       	std	Z+1, r22	; 0x01
    789e:	08 95       	ret

000078a0 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    78a0:	e0 e0       	ldi	r30, 0x00	; 0
    78a2:	f9 e0       	ldi	r31, 0x09	; 9
    78a4:	81 81       	ldd	r24, Z+1	; 0x01
    78a6:	60 95       	com	r22
    78a8:	68 23       	and	r22, r24
    78aa:	61 83       	std	Z+1, r22	; 0x01
    78ac:	08 95       	ret

000078ae <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    78ae:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    78b2:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    78b6:	08 95       	ret

000078b8 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    78b8:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    78bc:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    78c0:	08 95       	ret

000078c2 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    78c2:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    78c6:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    78ca:	08 95       	ret

000078cc <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    78cc:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
    78d0:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
    78d4:	08 95       	ret

000078d6 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    78d6:	60 93 2e 09 	sts	0x092E, r22	; 0x80092e <__TEXT_REGION_LENGTH__+0x70092e>
    78da:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <__TEXT_REGION_LENGTH__+0x70092f>
    78de:	08 95       	ret

000078e0 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    78e0:	61 15       	cp	r22, r1
    78e2:	71 05       	cpc	r23, r1
    78e4:	29 f0       	breq	.+10     	; 0x78f0 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    78e6:	e0 e0       	ldi	r30, 0x00	; 0
    78e8:	f9 e0       	ldi	r31, 0x09	; 9
    78ea:	86 81       	ldd	r24, Z+6	; 0x06
    78ec:	28 2b       	or	r18, r24
    78ee:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    78f0:	60 93 60 23 	sts	0x2360, r22	; 0x802360 <InterruptFuncTable+0x9a>
    78f4:	70 93 61 23 	sts	0x2361, r23	; 0x802361 <InterruptFuncTable+0x9b>
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    78f8:	40 93 56 24 	sts	0x2456, r20	; 0x802456 <InterruptSenderTable+0x9a>
    78fc:	50 93 57 24 	sts	0x2457, r21	; 0x802457 <InterruptSenderTable+0x9b>
    7900:	08 95       	ret

00007902 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7902:	61 15       	cp	r22, r1
    7904:	71 05       	cpc	r23, r1
    7906:	29 f0       	breq	.+10     	; 0x7912 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7908:	e0 e0       	ldi	r30, 0x00	; 0
    790a:	f9 e0       	ldi	r31, 0x09	; 9
    790c:	86 81       	ldd	r24, Z+6	; 0x06
    790e:	28 2b       	or	r18, r24
    7910:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    7912:	60 93 62 23 	sts	0x2362, r22	; 0x802362 <InterruptFuncTable+0x9c>
    7916:	70 93 63 23 	sts	0x2363, r23	; 0x802363 <InterruptFuncTable+0x9d>
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    791a:	40 93 58 24 	sts	0x2458, r20	; 0x802458 <InterruptSenderTable+0x9c>
    791e:	50 93 59 24 	sts	0x2459, r21	; 0x802459 <InterruptSenderTable+0x9d>
    7922:	08 95       	ret

00007924 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7924:	61 15       	cp	r22, r1
    7926:	71 05       	cpc	r23, r1
    7928:	29 f0       	breq	.+10     	; 0x7934 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    792a:	e0 e0       	ldi	r30, 0x00	; 0
    792c:	f9 e0       	ldi	r31, 0x09	; 9
    792e:	87 81       	ldd	r24, Z+7	; 0x07
    7930:	28 2b       	or	r18, r24
    7932:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    7934:	60 93 64 23 	sts	0x2364, r22	; 0x802364 <InterruptFuncTable+0x9e>
    7938:	70 93 65 23 	sts	0x2365, r23	; 0x802365 <InterruptFuncTable+0x9f>
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    793c:	40 93 5a 24 	sts	0x245A, r20	; 0x80245a <InterruptSenderTable+0x9e>
    7940:	50 93 5b 24 	sts	0x245B, r21	; 0x80245b <InterruptSenderTable+0x9f>
    7944:	08 95       	ret

00007946 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7946:	61 15       	cp	r22, r1
    7948:	71 05       	cpc	r23, r1
    794a:	29 f0       	breq	.+10     	; 0x7956 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    794c:	e0 e0       	ldi	r30, 0x00	; 0
    794e:	f9 e0       	ldi	r31, 0x09	; 9
    7950:	87 81       	ldd	r24, Z+7	; 0x07
    7952:	28 2b       	or	r18, r24
    7954:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    7956:	60 93 66 23 	sts	0x2366, r22	; 0x802366 <InterruptFuncTable+0xa0>
    795a:	70 93 67 23 	sts	0x2367, r23	; 0x802367 <InterruptFuncTable+0xa1>
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    795e:	40 93 5c 24 	sts	0x245C, r20	; 0x80245c <InterruptSenderTable+0xa0>
    7962:	50 93 5d 24 	sts	0x245D, r21	; 0x80245d <InterruptSenderTable+0xa1>
    7966:	08 95       	ret

00007968 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    7968:	61 15       	cp	r22, r1
    796a:	71 05       	cpc	r23, r1
    796c:	29 f0       	breq	.+10     	; 0x7978 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    796e:	e0 e0       	ldi	r30, 0x00	; 0
    7970:	f9 e0       	ldi	r31, 0x09	; 9
    7972:	87 81       	ldd	r24, Z+7	; 0x07
    7974:	28 2b       	or	r18, r24
    7976:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    7978:	60 93 68 23 	sts	0x2368, r22	; 0x802368 <InterruptFuncTable+0xa2>
    797c:	70 93 69 23 	sts	0x2369, r23	; 0x802369 <InterruptFuncTable+0xa3>
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    7980:	40 93 5e 24 	sts	0x245E, r20	; 0x80245e <InterruptSenderTable+0xa2>
    7984:	50 93 5f 24 	sts	0x245F, r21	; 0x80245f <InterruptSenderTable+0xa3>
    7988:	08 95       	ret

0000798a <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    798a:	61 15       	cp	r22, r1
    798c:	71 05       	cpc	r23, r1
    798e:	29 f0       	breq	.+10     	; 0x799a <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7990:	e0 e0       	ldi	r30, 0x00	; 0
    7992:	f9 e0       	ldi	r31, 0x09	; 9
    7994:	87 81       	ldd	r24, Z+7	; 0x07
    7996:	28 2b       	or	r18, r24
    7998:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    799a:	60 93 6a 23 	sts	0x236A, r22	; 0x80236a <InterruptFuncTable+0xa4>
    799e:	70 93 6b 23 	sts	0x236B, r23	; 0x80236b <InterruptFuncTable+0xa5>
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    79a2:	40 93 60 24 	sts	0x2460, r20	; 0x802460 <InterruptSenderTable+0xa4>
    79a6:	50 93 61 24 	sts	0x2461, r21	; 0x802461 <InterruptSenderTable+0xa5>
    79aa:	08 95       	ret

000079ac <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    79ac:	cf 93       	push	r28
    79ae:	df 93       	push	r29
    79b0:	ec 01       	movw	r28, r24
    79b2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN6CTimerC1Ev>
    79b6:	8e e5       	ldi	r24, 0x5E	; 94
    79b8:	92 e2       	ldi	r25, 0x22	; 34
    79ba:	88 83       	st	Y, r24
    79bc:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    79be:	df 91       	pop	r29
    79c0:	cf 91       	pop	r28
    79c2:	08 95       	ret

000079c4 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    79c4:	2e e5       	ldi	r18, 0x5E	; 94
    79c6:	32 e2       	ldi	r19, 0x22	; 34
    79c8:	fc 01       	movw	r30, r24
    79ca:	20 83       	st	Z, r18
    79cc:	31 83       	std	Z+1, r19	; 0x01
    79ce:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN6CTimerD1Ev>
    79d2:	08 95       	ret

000079d4 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    79d4:	fc 01       	movw	r30, r24
    79d6:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    79d8:	e0 e4       	ldi	r30, 0x40	; 64
    79da:	f9 e0       	ldi	r31, 0x09	; 9
    79dc:	80 81       	ld	r24, Z
    79de:	80 7f       	andi	r24, 0xF0	; 240
    79e0:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    79e2:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    79e4:	10 a2       	std	Z+32, r1	; 0x20
    79e6:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    79e8:	10 a6       	std	Z+40, r1	; 0x28
    79ea:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    79ec:	12 a6       	std	Z+42, r1	; 0x2a
    79ee:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    79f0:	16 a2       	std	Z+38, r1	; 0x26
    79f2:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    79f4:	81 81       	ldd	r24, Z+1	; 0x01
    79f6:	88 7f       	andi	r24, 0xF8	; 248
    79f8:	68 2b       	or	r22, r24
    79fa:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    79fc:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    79fe:	17 82       	std	Z+7, r1	; 0x07
    7a00:	08 95       	ret

00007a02 <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    7a02:	e0 e4       	ldi	r30, 0x40	; 64
    7a04:	f9 e0       	ldi	r31, 0x09	; 9
    7a06:	66 a3       	std	Z+38, r22	; 0x26
    7a08:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    7a0a:	20 81       	ld	r18, Z
    7a0c:	20 7f       	andi	r18, 0xF0	; 240
    7a0e:	dc 01       	movw	r26, r24
    7a10:	12 96       	adiw	r26, 0x02	; 2
    7a12:	9c 91       	ld	r25, X
    7a14:	82 2f       	mov	r24, r18
    7a16:	89 2b       	or	r24, r25
    7a18:	80 83       	st	Z, r24
    7a1a:	08 95       	ret

00007a1c <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7a1c:	e0 e4       	ldi	r30, 0x40	; 64
    7a1e:	f9 e0       	ldi	r31, 0x09	; 9
    7a20:	80 81       	ld	r24, Z
    7a22:	80 7f       	andi	r24, 0xF0	; 240
    7a24:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    7a26:	10 a2       	std	Z+32, r1	; 0x20
    7a28:	11 a2       	std	Z+33, r1	; 0x21
    7a2a:	08 95       	ret

00007a2c <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    7a2c:	e0 e4       	ldi	r30, 0x40	; 64
    7a2e:	f9 e0       	ldi	r31, 0x09	; 9
    7a30:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7a32:	80 81       	ld	r24, Z
    7a34:	80 7f       	andi	r24, 0xF0	; 240
    7a36:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    7a38:	10 a2       	std	Z+32, r1	; 0x20
    7a3a:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    7a3c:	90 83       	st	Z, r25
    7a3e:	08 95       	ret

00007a40 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    7a40:	e0 e4       	ldi	r30, 0x40	; 64
    7a42:	f9 e0       	ldi	r31, 0x09	; 9
    7a44:	81 81       	ldd	r24, Z+1	; 0x01
    7a46:	8f 70       	andi	r24, 0x0F	; 15
    7a48:	68 2b       	or	r22, r24
    7a4a:	61 83       	std	Z+1, r22	; 0x01
    7a4c:	08 95       	ret

00007a4e <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    7a4e:	e0 e4       	ldi	r30, 0x40	; 64
    7a50:	f9 e0       	ldi	r31, 0x09	; 9
    7a52:	81 81       	ldd	r24, Z+1	; 0x01
    7a54:	60 95       	com	r22
    7a56:	68 23       	and	r22, r24
    7a58:	61 83       	std	Z+1, r22	; 0x01
    7a5a:	08 95       	ret

00007a5c <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    7a5c:	60 93 66 09 	sts	0x0966, r22	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    7a60:	70 93 67 09 	sts	0x0967, r23	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    7a64:	08 95       	ret

00007a66 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    7a66:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    7a6a:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    7a6e:	08 95       	ret

00007a70 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    7a70:	60 93 6a 09 	sts	0x096A, r22	; 0x80096a <__TEXT_REGION_LENGTH__+0x70096a>
    7a74:	70 93 6b 09 	sts	0x096B, r23	; 0x80096b <__TEXT_REGION_LENGTH__+0x70096b>
    7a78:	08 95       	ret

00007a7a <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7a7a:	61 15       	cp	r22, r1
    7a7c:	71 05       	cpc	r23, r1
    7a7e:	29 f0       	breq	.+10     	; 0x7a8a <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    7a80:	e0 e4       	ldi	r30, 0x40	; 64
    7a82:	f9 e0       	ldi	r31, 0x09	; 9
    7a84:	86 81       	ldd	r24, Z+6	; 0x06
    7a86:	28 2b       	or	r18, r24
    7a88:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    7a8a:	60 93 6c 23 	sts	0x236C, r22	; 0x80236c <InterruptFuncTable+0xa6>
    7a8e:	70 93 6d 23 	sts	0x236D, r23	; 0x80236d <InterruptFuncTable+0xa7>
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    7a92:	40 93 62 24 	sts	0x2462, r20	; 0x802462 <InterruptSenderTable+0xa6>
    7a96:	50 93 63 24 	sts	0x2463, r21	; 0x802463 <InterruptSenderTable+0xa7>
    7a9a:	08 95       	ret

00007a9c <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7a9c:	61 15       	cp	r22, r1
    7a9e:	71 05       	cpc	r23, r1
    7aa0:	29 f0       	breq	.+10     	; 0x7aac <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    7aa2:	e0 e4       	ldi	r30, 0x40	; 64
    7aa4:	f9 e0       	ldi	r31, 0x09	; 9
    7aa6:	86 81       	ldd	r24, Z+6	; 0x06
    7aa8:	28 2b       	or	r18, r24
    7aaa:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    7aac:	60 93 6e 23 	sts	0x236E, r22	; 0x80236e <InterruptFuncTable+0xa8>
    7ab0:	70 93 6f 23 	sts	0x236F, r23	; 0x80236f <InterruptFuncTable+0xa9>
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    7ab4:	40 93 64 24 	sts	0x2464, r20	; 0x802464 <InterruptSenderTable+0xa8>
    7ab8:	50 93 65 24 	sts	0x2465, r21	; 0x802465 <InterruptSenderTable+0xa9>
    7abc:	08 95       	ret

00007abe <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7abe:	61 15       	cp	r22, r1
    7ac0:	71 05       	cpc	r23, r1
    7ac2:	29 f0       	breq	.+10     	; 0x7ace <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    7ac4:	e0 e4       	ldi	r30, 0x40	; 64
    7ac6:	f9 e0       	ldi	r31, 0x09	; 9
    7ac8:	87 81       	ldd	r24, Z+7	; 0x07
    7aca:	28 2b       	or	r18, r24
    7acc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    7ace:	60 93 70 23 	sts	0x2370, r22	; 0x802370 <InterruptFuncTable+0xaa>
    7ad2:	70 93 71 23 	sts	0x2371, r23	; 0x802371 <InterruptFuncTable+0xab>
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    7ad6:	40 93 66 24 	sts	0x2466, r20	; 0x802466 <InterruptSenderTable+0xaa>
    7ada:	50 93 67 24 	sts	0x2467, r21	; 0x802467 <InterruptSenderTable+0xab>
    7ade:	08 95       	ret

00007ae0 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7ae0:	61 15       	cp	r22, r1
    7ae2:	71 05       	cpc	r23, r1
    7ae4:	29 f0       	breq	.+10     	; 0x7af0 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    7ae6:	e0 e4       	ldi	r30, 0x40	; 64
    7ae8:	f9 e0       	ldi	r31, 0x09	; 9
    7aea:	87 81       	ldd	r24, Z+7	; 0x07
    7aec:	28 2b       	or	r18, r24
    7aee:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    7af0:	60 93 72 23 	sts	0x2372, r22	; 0x802372 <InterruptFuncTable+0xac>
    7af4:	70 93 73 23 	sts	0x2373, r23	; 0x802373 <InterruptFuncTable+0xad>
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    7af8:	40 93 68 24 	sts	0x2468, r20	; 0x802468 <InterruptSenderTable+0xac>
    7afc:	50 93 69 24 	sts	0x2469, r21	; 0x802469 <InterruptSenderTable+0xad>
    7b00:	08 95       	ret

00007b02 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    7b02:	cf 93       	push	r28
    7b04:	df 93       	push	r29
    7b06:	ec 01       	movw	r28, r24
    7b08:	0e 94 57 1d 	call	0x3aae	; 0x3aae <_ZN7CTimer1C1Ev>
    7b0c:	82 e8       	ldi	r24, 0x82	; 130
    7b0e:	92 e2       	ldi	r25, 0x22	; 34
    7b10:	88 83       	st	Y, r24
    7b12:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    7b14:	df 91       	pop	r29
    7b16:	cf 91       	pop	r28
    7b18:	08 95       	ret

00007b1a <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    7b1a:	22 e8       	ldi	r18, 0x82	; 130
    7b1c:	32 e2       	ldi	r19, 0x22	; 34
    7b1e:	fc 01       	movw	r30, r24
    7b20:	20 83       	st	Z, r18
    7b22:	31 83       	std	Z+1, r19	; 0x01
    7b24:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN7CTimer1D1Ev>
    7b28:	08 95       	ret

00007b2a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    7b2a:	fc 01       	movw	r30, r24
    7b2c:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7b2e:	e0 e0       	ldi	r30, 0x00	; 0
    7b30:	fb e0       	ldi	r31, 0x0B	; 11
    7b32:	80 81       	ld	r24, Z
    7b34:	80 7f       	andi	r24, 0xF0	; 240
    7b36:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7b38:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    7b3a:	10 a2       	std	Z+32, r1	; 0x20
    7b3c:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    7b3e:	10 a6       	std	Z+40, r1	; 0x28
    7b40:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    7b42:	12 a6       	std	Z+42, r1	; 0x2a
    7b44:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    7b46:	14 a6       	std	Z+44, r1	; 0x2c
    7b48:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    7b4a:	16 a6       	std	Z+46, r1	; 0x2e
    7b4c:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    7b4e:	16 a2       	std	Z+38, r1	; 0x26
    7b50:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    7b52:	81 81       	ldd	r24, Z+1	; 0x01
    7b54:	88 7f       	andi	r24, 0xF8	; 248
    7b56:	68 2b       	or	r22, r24
    7b58:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7b5a:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7b5c:	17 82       	std	Z+7, r1	; 0x07
    7b5e:	08 95       	ret

00007b60 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    7b60:	e0 e0       	ldi	r30, 0x00	; 0
    7b62:	fb e0       	ldi	r31, 0x0B	; 11
    7b64:	66 a3       	std	Z+38, r22	; 0x26
    7b66:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    7b68:	20 81       	ld	r18, Z
    7b6a:	20 7f       	andi	r18, 0xF0	; 240
    7b6c:	dc 01       	movw	r26, r24
    7b6e:	12 96       	adiw	r26, 0x02	; 2
    7b70:	9c 91       	ld	r25, X
    7b72:	82 2f       	mov	r24, r18
    7b74:	89 2b       	or	r24, r25
    7b76:	80 83       	st	Z, r24
    7b78:	08 95       	ret

00007b7a <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7b7a:	e0 e0       	ldi	r30, 0x00	; 0
    7b7c:	fb e0       	ldi	r31, 0x0B	; 11
    7b7e:	80 81       	ld	r24, Z
    7b80:	80 7f       	andi	r24, 0xF0	; 240
    7b82:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    7b84:	10 a2       	std	Z+32, r1	; 0x20
    7b86:	11 a2       	std	Z+33, r1	; 0x21
    7b88:	08 95       	ret

00007b8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    7b8a:	e0 e0       	ldi	r30, 0x00	; 0
    7b8c:	fb e0       	ldi	r31, 0x0B	; 11
    7b8e:	81 81       	ldd	r24, Z+1	; 0x01
    7b90:	68 2b       	or	r22, r24
    7b92:	61 83       	std	Z+1, r22	; 0x01
    7b94:	08 95       	ret

00007b96 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    7b96:	e0 e0       	ldi	r30, 0x00	; 0
    7b98:	fb e0       	ldi	r31, 0x0B	; 11
    7b9a:	81 81       	ldd	r24, Z+1	; 0x01
    7b9c:	60 95       	com	r22
    7b9e:	68 23       	and	r22, r24
    7ba0:	61 83       	std	Z+1, r22	; 0x01
    7ba2:	08 95       	ret

00007ba4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    7ba4:	e0 e0       	ldi	r30, 0x00	; 0
    7ba6:	fb e0       	ldi	r31, 0x0B	; 11
    7ba8:	82 81       	ldd	r24, Z+2	; 0x02
    7baa:	62 95       	swap	r22
    7bac:	6f 70       	andi	r22, 0x0F	; 15
    7bae:	68 2b       	or	r22, r24
    7bb0:	62 83       	std	Z+2, r22	; 0x02
    7bb2:	08 95       	ret

00007bb4 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    7bb4:	e0 e0       	ldi	r30, 0x00	; 0
    7bb6:	fb e0       	ldi	r31, 0x0B	; 11
    7bb8:	82 81       	ldd	r24, Z+2	; 0x02
    7bba:	62 95       	swap	r22
    7bbc:	6f 70       	andi	r22, 0x0F	; 15
    7bbe:	60 95       	com	r22
    7bc0:	68 23       	and	r22, r24
    7bc2:	62 83       	std	Z+2, r22	; 0x02
    7bc4:	08 95       	ret

00007bc6 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PERBUF = value;
    7bc6:	60 93 36 0b 	sts	0x0B36, r22	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    7bca:	70 93 37 0b 	sts	0x0B37, r23	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
    7bce:	08 95       	ret

00007bd0 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    7bd0:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
    7bd4:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
    7bd8:	08 95       	ret

00007bda <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    7bda:	60 93 2a 0b 	sts	0x0B2A, r22	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
    7bde:	70 93 2b 0b 	sts	0x0B2B, r23	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
    7be2:	08 95       	ret

00007be4 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    7be4:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
    7be8:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
    7bec:	08 95       	ret

00007bee <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    7bee:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
    7bf2:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
    7bf6:	08 95       	ret

00007bf8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7bf8:	61 15       	cp	r22, r1
    7bfa:	71 05       	cpc	r23, r1
    7bfc:	29 f0       	breq	.+10     	; 0x7c08 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    7bfe:	e0 e0       	ldi	r30, 0x00	; 0
    7c00:	fb e0       	ldi	r31, 0x0B	; 11
    7c02:	86 81       	ldd	r24, Z+6	; 0x06
    7c04:	28 2b       	or	r18, r24
    7c06:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    7c08:	60 93 9e 23 	sts	0x239E, r22	; 0x80239e <InterruptFuncTable+0xd8>
    7c0c:	70 93 9f 23 	sts	0x239F, r23	; 0x80239f <InterruptFuncTable+0xd9>
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    7c10:	40 93 94 24 	sts	0x2494, r20	; 0x802494 <InterruptSenderTable+0xd8>
    7c14:	50 93 95 24 	sts	0x2495, r21	; 0x802495 <InterruptSenderTable+0xd9>
    7c18:	08 95       	ret

00007c1a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7c1a:	61 15       	cp	r22, r1
    7c1c:	71 05       	cpc	r23, r1
    7c1e:	29 f0       	breq	.+10     	; 0x7c2a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7c20:	e0 e0       	ldi	r30, 0x00	; 0
    7c22:	fb e0       	ldi	r31, 0x0B	; 11
    7c24:	86 81       	ldd	r24, Z+6	; 0x06
    7c26:	28 2b       	or	r18, r24
    7c28:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    7c2a:	60 93 a0 23 	sts	0x23A0, r22	; 0x8023a0 <InterruptFuncTable+0xda>
    7c2e:	70 93 a1 23 	sts	0x23A1, r23	; 0x8023a1 <InterruptFuncTable+0xdb>
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    7c32:	40 93 96 24 	sts	0x2496, r20	; 0x802496 <InterruptSenderTable+0xda>
    7c36:	50 93 97 24 	sts	0x2497, r21	; 0x802497 <InterruptSenderTable+0xdb>
    7c3a:	08 95       	ret

00007c3c <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7c3c:	61 15       	cp	r22, r1
    7c3e:	71 05       	cpc	r23, r1
    7c40:	29 f0       	breq	.+10     	; 0x7c4c <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    7c42:	e0 e0       	ldi	r30, 0x00	; 0
    7c44:	fb e0       	ldi	r31, 0x0B	; 11
    7c46:	87 81       	ldd	r24, Z+7	; 0x07
    7c48:	28 2b       	or	r18, r24
    7c4a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    7c4c:	60 93 a2 23 	sts	0x23A2, r22	; 0x8023a2 <InterruptFuncTable+0xdc>
    7c50:	70 93 a3 23 	sts	0x23A3, r23	; 0x8023a3 <InterruptFuncTable+0xdd>
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    7c54:	40 93 98 24 	sts	0x2498, r20	; 0x802498 <InterruptSenderTable+0xdc>
    7c58:	50 93 99 24 	sts	0x2499, r21	; 0x802499 <InterruptSenderTable+0xdd>
    7c5c:	08 95       	ret

00007c5e <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7c5e:	61 15       	cp	r22, r1
    7c60:	71 05       	cpc	r23, r1
    7c62:	29 f0       	breq	.+10     	; 0x7c6e <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    7c64:	e0 e0       	ldi	r30, 0x00	; 0
    7c66:	fb e0       	ldi	r31, 0x0B	; 11
    7c68:	87 81       	ldd	r24, Z+7	; 0x07
    7c6a:	28 2b       	or	r18, r24
    7c6c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    7c6e:	60 93 a4 23 	sts	0x23A4, r22	; 0x8023a4 <InterruptFuncTable+0xde>
    7c72:	70 93 a5 23 	sts	0x23A5, r23	; 0x8023a5 <InterruptFuncTable+0xdf>
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    7c76:	40 93 9a 24 	sts	0x249A, r20	; 0x80249a <InterruptSenderTable+0xde>
    7c7a:	50 93 9b 24 	sts	0x249B, r21	; 0x80249b <InterruptSenderTable+0xdf>
    7c7e:	08 95       	ret

00007c80 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    7c80:	61 15       	cp	r22, r1
    7c82:	71 05       	cpc	r23, r1
    7c84:	29 f0       	breq	.+10     	; 0x7c90 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    7c86:	e0 e0       	ldi	r30, 0x00	; 0
    7c88:	fb e0       	ldi	r31, 0x0B	; 11
    7c8a:	87 81       	ldd	r24, Z+7	; 0x07
    7c8c:	28 2b       	or	r18, r24
    7c8e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    7c90:	60 93 a6 23 	sts	0x23A6, r22	; 0x8023a6 <InterruptFuncTable+0xe0>
    7c94:	70 93 a7 23 	sts	0x23A7, r23	; 0x8023a7 <InterruptFuncTable+0xe1>
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    7c98:	40 93 9c 24 	sts	0x249C, r20	; 0x80249c <InterruptSenderTable+0xe0>
    7c9c:	50 93 9d 24 	sts	0x249D, r21	; 0x80249d <InterruptSenderTable+0xe1>
    7ca0:	08 95       	ret

00007ca2 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    7ca2:	61 15       	cp	r22, r1
    7ca4:	71 05       	cpc	r23, r1
    7ca6:	29 f0       	breq	.+10     	; 0x7cb2 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7ca8:	e0 e0       	ldi	r30, 0x00	; 0
    7caa:	fb e0       	ldi	r31, 0x0B	; 11
    7cac:	87 81       	ldd	r24, Z+7	; 0x07
    7cae:	28 2b       	or	r18, r24
    7cb0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    7cb2:	60 93 a8 23 	sts	0x23A8, r22	; 0x8023a8 <InterruptFuncTable+0xe2>
    7cb6:	70 93 a9 23 	sts	0x23A9, r23	; 0x8023a9 <InterruptFuncTable+0xe3>
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    7cba:	40 93 9e 24 	sts	0x249E, r20	; 0x80249e <InterruptSenderTable+0xe2>
    7cbe:	50 93 9f 24 	sts	0x249F, r21	; 0x80249f <InterruptSenderTable+0xe3>
    7cc2:	08 95       	ret

00007cc4 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    7cc4:	cf 93       	push	r28
    7cc6:	df 93       	push	r29
    7cc8:	ec 01       	movw	r28, r24
    7cca:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN6CTimerC1Ev>
    7cce:	80 ea       	ldi	r24, 0xA0	; 160
    7cd0:	92 e2       	ldi	r25, 0x22	; 34
    7cd2:	88 83       	st	Y, r24
    7cd4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    7cd6:	df 91       	pop	r29
    7cd8:	cf 91       	pop	r28
    7cda:	08 95       	ret

00007cdc <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    7cdc:	20 ea       	ldi	r18, 0xA0	; 160
    7cde:	32 e2       	ldi	r19, 0x22	; 34
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	20 83       	st	Z, r18
    7ce4:	31 83       	std	Z+1, r19	; 0x01
    7ce6:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN6CTimerD1Ev>
    7cea:	08 95       	ret

00007cec <__fixsfsi>:
    7cec:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__fixunssfsi>
    7cf0:	68 94       	set
    7cf2:	b1 11       	cpse	r27, r1
    7cf4:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <__fp_szero>
    7cf8:	08 95       	ret

00007cfa <__fixunssfsi>:
    7cfa:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__fp_splitA>
    7cfe:	88 f0       	brcs	.+34     	; 0x7d22 <__fixunssfsi+0x28>
    7d00:	9f 57       	subi	r25, 0x7F	; 127
    7d02:	98 f0       	brcs	.+38     	; 0x7d2a <__fixunssfsi+0x30>
    7d04:	b9 2f       	mov	r27, r25
    7d06:	99 27       	eor	r25, r25
    7d08:	b7 51       	subi	r27, 0x17	; 23
    7d0a:	b0 f0       	brcs	.+44     	; 0x7d38 <__fixunssfsi+0x3e>
    7d0c:	e1 f0       	breq	.+56     	; 0x7d46 <__fixunssfsi+0x4c>
    7d0e:	66 0f       	add	r22, r22
    7d10:	77 1f       	adc	r23, r23
    7d12:	88 1f       	adc	r24, r24
    7d14:	99 1f       	adc	r25, r25
    7d16:	1a f0       	brmi	.+6      	; 0x7d1e <__fixunssfsi+0x24>
    7d18:	ba 95       	dec	r27
    7d1a:	c9 f7       	brne	.-14     	; 0x7d0e <__fixunssfsi+0x14>
    7d1c:	14 c0       	rjmp	.+40     	; 0x7d46 <__fixunssfsi+0x4c>
    7d1e:	b1 30       	cpi	r27, 0x01	; 1
    7d20:	91 f0       	breq	.+36     	; 0x7d46 <__fixunssfsi+0x4c>
    7d22:	0e 94 0b 3f 	call	0x7e16	; 0x7e16 <__fp_zero>
    7d26:	b1 e0       	ldi	r27, 0x01	; 1
    7d28:	08 95       	ret
    7d2a:	0c 94 0b 3f 	jmp	0x7e16	; 0x7e16 <__fp_zero>
    7d2e:	67 2f       	mov	r22, r23
    7d30:	78 2f       	mov	r23, r24
    7d32:	88 27       	eor	r24, r24
    7d34:	b8 5f       	subi	r27, 0xF8	; 248
    7d36:	39 f0       	breq	.+14     	; 0x7d46 <__fixunssfsi+0x4c>
    7d38:	b9 3f       	cpi	r27, 0xF9	; 249
    7d3a:	cc f3       	brlt	.-14     	; 0x7d2e <__fixunssfsi+0x34>
    7d3c:	86 95       	lsr	r24
    7d3e:	77 95       	ror	r23
    7d40:	67 95       	ror	r22
    7d42:	b3 95       	inc	r27
    7d44:	d9 f7       	brne	.-10     	; 0x7d3c <__fixunssfsi+0x42>
    7d46:	3e f4       	brtc	.+14     	; 0x7d56 <__fixunssfsi+0x5c>
    7d48:	90 95       	com	r25
    7d4a:	80 95       	com	r24
    7d4c:	70 95       	com	r23
    7d4e:	61 95       	neg	r22
    7d50:	7f 4f       	sbci	r23, 0xFF	; 255
    7d52:	8f 4f       	sbci	r24, 0xFF	; 255
    7d54:	9f 4f       	sbci	r25, 0xFF	; 255
    7d56:	08 95       	ret

00007d58 <__floatunsisf>:
    7d58:	e8 94       	clt
    7d5a:	09 c0       	rjmp	.+18     	; 0x7d6e <__floatsisf+0x12>

00007d5c <__floatsisf>:
    7d5c:	97 fb       	bst	r25, 7
    7d5e:	3e f4       	brtc	.+14     	; 0x7d6e <__floatsisf+0x12>
    7d60:	90 95       	com	r25
    7d62:	80 95       	com	r24
    7d64:	70 95       	com	r23
    7d66:	61 95       	neg	r22
    7d68:	7f 4f       	sbci	r23, 0xFF	; 255
    7d6a:	8f 4f       	sbci	r24, 0xFF	; 255
    7d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6e:	99 23       	and	r25, r25
    7d70:	a9 f0       	breq	.+42     	; 0x7d9c <__floatsisf+0x40>
    7d72:	f9 2f       	mov	r31, r25
    7d74:	96 e9       	ldi	r25, 0x96	; 150
    7d76:	bb 27       	eor	r27, r27
    7d78:	93 95       	inc	r25
    7d7a:	f6 95       	lsr	r31
    7d7c:	87 95       	ror	r24
    7d7e:	77 95       	ror	r23
    7d80:	67 95       	ror	r22
    7d82:	b7 95       	ror	r27
    7d84:	f1 11       	cpse	r31, r1
    7d86:	f8 cf       	rjmp	.-16     	; 0x7d78 <__floatsisf+0x1c>
    7d88:	fa f4       	brpl	.+62     	; 0x7dc8 <__floatsisf+0x6c>
    7d8a:	bb 0f       	add	r27, r27
    7d8c:	11 f4       	brne	.+4      	; 0x7d92 <__floatsisf+0x36>
    7d8e:	60 ff       	sbrs	r22, 0
    7d90:	1b c0       	rjmp	.+54     	; 0x7dc8 <__floatsisf+0x6c>
    7d92:	6f 5f       	subi	r22, 0xFF	; 255
    7d94:	7f 4f       	sbci	r23, 0xFF	; 255
    7d96:	8f 4f       	sbci	r24, 0xFF	; 255
    7d98:	9f 4f       	sbci	r25, 0xFF	; 255
    7d9a:	16 c0       	rjmp	.+44     	; 0x7dc8 <__floatsisf+0x6c>
    7d9c:	88 23       	and	r24, r24
    7d9e:	11 f0       	breq	.+4      	; 0x7da4 <__floatsisf+0x48>
    7da0:	96 e9       	ldi	r25, 0x96	; 150
    7da2:	11 c0       	rjmp	.+34     	; 0x7dc6 <__floatsisf+0x6a>
    7da4:	77 23       	and	r23, r23
    7da6:	21 f0       	breq	.+8      	; 0x7db0 <__floatsisf+0x54>
    7da8:	9e e8       	ldi	r25, 0x8E	; 142
    7daa:	87 2f       	mov	r24, r23
    7dac:	76 2f       	mov	r23, r22
    7dae:	05 c0       	rjmp	.+10     	; 0x7dba <__floatsisf+0x5e>
    7db0:	66 23       	and	r22, r22
    7db2:	71 f0       	breq	.+28     	; 0x7dd0 <__floatsisf+0x74>
    7db4:	96 e8       	ldi	r25, 0x86	; 134
    7db6:	86 2f       	mov	r24, r22
    7db8:	70 e0       	ldi	r23, 0x00	; 0
    7dba:	60 e0       	ldi	r22, 0x00	; 0
    7dbc:	2a f0       	brmi	.+10     	; 0x7dc8 <__floatsisf+0x6c>
    7dbe:	9a 95       	dec	r25
    7dc0:	66 0f       	add	r22, r22
    7dc2:	77 1f       	adc	r23, r23
    7dc4:	88 1f       	adc	r24, r24
    7dc6:	da f7       	brpl	.-10     	; 0x7dbe <__floatsisf+0x62>
    7dc8:	88 0f       	add	r24, r24
    7dca:	96 95       	lsr	r25
    7dcc:	87 95       	ror	r24
    7dce:	97 f9       	bld	r25, 7
    7dd0:	08 95       	ret

00007dd2 <__fp_split3>:
    7dd2:	57 fd       	sbrc	r21, 7
    7dd4:	90 58       	subi	r25, 0x80	; 128
    7dd6:	44 0f       	add	r20, r20
    7dd8:	55 1f       	adc	r21, r21
    7dda:	59 f0       	breq	.+22     	; 0x7df2 <__fp_splitA+0x10>
    7ddc:	5f 3f       	cpi	r21, 0xFF	; 255
    7dde:	71 f0       	breq	.+28     	; 0x7dfc <__fp_splitA+0x1a>
    7de0:	47 95       	ror	r20

00007de2 <__fp_splitA>:
    7de2:	88 0f       	add	r24, r24
    7de4:	97 fb       	bst	r25, 7
    7de6:	99 1f       	adc	r25, r25
    7de8:	61 f0       	breq	.+24     	; 0x7e02 <__fp_splitA+0x20>
    7dea:	9f 3f       	cpi	r25, 0xFF	; 255
    7dec:	79 f0       	breq	.+30     	; 0x7e0c <__fp_splitA+0x2a>
    7dee:	87 95       	ror	r24
    7df0:	08 95       	ret
    7df2:	12 16       	cp	r1, r18
    7df4:	13 06       	cpc	r1, r19
    7df6:	14 06       	cpc	r1, r20
    7df8:	55 1f       	adc	r21, r21
    7dfa:	f2 cf       	rjmp	.-28     	; 0x7de0 <__fp_split3+0xe>
    7dfc:	46 95       	lsr	r20
    7dfe:	f1 df       	rcall	.-30     	; 0x7de2 <__fp_splitA>
    7e00:	08 c0       	rjmp	.+16     	; 0x7e12 <__fp_splitA+0x30>
    7e02:	16 16       	cp	r1, r22
    7e04:	17 06       	cpc	r1, r23
    7e06:	18 06       	cpc	r1, r24
    7e08:	99 1f       	adc	r25, r25
    7e0a:	f1 cf       	rjmp	.-30     	; 0x7dee <__fp_splitA+0xc>
    7e0c:	86 95       	lsr	r24
    7e0e:	71 05       	cpc	r23, r1
    7e10:	61 05       	cpc	r22, r1
    7e12:	08 94       	sec
    7e14:	08 95       	ret

00007e16 <__fp_zero>:
    7e16:	e8 94       	clt

00007e18 <__fp_szero>:
    7e18:	bb 27       	eor	r27, r27
    7e1a:	66 27       	eor	r22, r22
    7e1c:	77 27       	eor	r23, r23
    7e1e:	cb 01       	movw	r24, r22
    7e20:	97 f9       	bld	r25, 7
    7e22:	08 95       	ret

00007e24 <__mulsf3>:
    7e24:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <__mulsf3x>
    7e28:	0c 94 96 3f 	jmp	0x7f2c	; 0x7f2c <__fp_round>
    7e2c:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <__fp_pscA>
    7e30:	38 f0       	brcs	.+14     	; 0x7e40 <__mulsf3+0x1c>
    7e32:	0e 94 8f 3f 	call	0x7f1e	; 0x7f1e <__fp_pscB>
    7e36:	20 f0       	brcs	.+8      	; 0x7e40 <__mulsf3+0x1c>
    7e38:	95 23       	and	r25, r21
    7e3a:	11 f0       	breq	.+4      	; 0x7e40 <__mulsf3+0x1c>
    7e3c:	0c 94 7f 3f 	jmp	0x7efe	; 0x7efe <__fp_inf>
    7e40:	0c 94 85 3f 	jmp	0x7f0a	; 0x7f0a <__fp_nan>
    7e44:	11 24       	eor	r1, r1
    7e46:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <__fp_szero>

00007e4a <__mulsf3x>:
    7e4a:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <__fp_split3>
    7e4e:	70 f3       	brcs	.-36     	; 0x7e2c <__mulsf3+0x8>

00007e50 <__mulsf3_pse>:
    7e50:	95 9f       	mul	r25, r21
    7e52:	c1 f3       	breq	.-16     	; 0x7e44 <__mulsf3+0x20>
    7e54:	95 0f       	add	r25, r21
    7e56:	50 e0       	ldi	r21, 0x00	; 0
    7e58:	55 1f       	adc	r21, r21
    7e5a:	62 9f       	mul	r22, r18
    7e5c:	f0 01       	movw	r30, r0
    7e5e:	72 9f       	mul	r23, r18
    7e60:	bb 27       	eor	r27, r27
    7e62:	f0 0d       	add	r31, r0
    7e64:	b1 1d       	adc	r27, r1
    7e66:	63 9f       	mul	r22, r19
    7e68:	aa 27       	eor	r26, r26
    7e6a:	f0 0d       	add	r31, r0
    7e6c:	b1 1d       	adc	r27, r1
    7e6e:	aa 1f       	adc	r26, r26
    7e70:	64 9f       	mul	r22, r20
    7e72:	66 27       	eor	r22, r22
    7e74:	b0 0d       	add	r27, r0
    7e76:	a1 1d       	adc	r26, r1
    7e78:	66 1f       	adc	r22, r22
    7e7a:	82 9f       	mul	r24, r18
    7e7c:	22 27       	eor	r18, r18
    7e7e:	b0 0d       	add	r27, r0
    7e80:	a1 1d       	adc	r26, r1
    7e82:	62 1f       	adc	r22, r18
    7e84:	73 9f       	mul	r23, r19
    7e86:	b0 0d       	add	r27, r0
    7e88:	a1 1d       	adc	r26, r1
    7e8a:	62 1f       	adc	r22, r18
    7e8c:	83 9f       	mul	r24, r19
    7e8e:	a0 0d       	add	r26, r0
    7e90:	61 1d       	adc	r22, r1
    7e92:	22 1f       	adc	r18, r18
    7e94:	74 9f       	mul	r23, r20
    7e96:	33 27       	eor	r19, r19
    7e98:	a0 0d       	add	r26, r0
    7e9a:	61 1d       	adc	r22, r1
    7e9c:	23 1f       	adc	r18, r19
    7e9e:	84 9f       	mul	r24, r20
    7ea0:	60 0d       	add	r22, r0
    7ea2:	21 1d       	adc	r18, r1
    7ea4:	82 2f       	mov	r24, r18
    7ea6:	76 2f       	mov	r23, r22
    7ea8:	6a 2f       	mov	r22, r26
    7eaa:	11 24       	eor	r1, r1
    7eac:	9f 57       	subi	r25, 0x7F	; 127
    7eae:	50 40       	sbci	r21, 0x00	; 0
    7eb0:	9a f0       	brmi	.+38     	; 0x7ed8 <__mulsf3_pse+0x88>
    7eb2:	f1 f0       	breq	.+60     	; 0x7ef0 <__mulsf3_pse+0xa0>
    7eb4:	88 23       	and	r24, r24
    7eb6:	4a f0       	brmi	.+18     	; 0x7eca <__mulsf3_pse+0x7a>
    7eb8:	ee 0f       	add	r30, r30
    7eba:	ff 1f       	adc	r31, r31
    7ebc:	bb 1f       	adc	r27, r27
    7ebe:	66 1f       	adc	r22, r22
    7ec0:	77 1f       	adc	r23, r23
    7ec2:	88 1f       	adc	r24, r24
    7ec4:	91 50       	subi	r25, 0x01	; 1
    7ec6:	50 40       	sbci	r21, 0x00	; 0
    7ec8:	a9 f7       	brne	.-22     	; 0x7eb4 <__mulsf3_pse+0x64>
    7eca:	9e 3f       	cpi	r25, 0xFE	; 254
    7ecc:	51 05       	cpc	r21, r1
    7ece:	80 f0       	brcs	.+32     	; 0x7ef0 <__mulsf3_pse+0xa0>
    7ed0:	0c 94 7f 3f 	jmp	0x7efe	; 0x7efe <__fp_inf>
    7ed4:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <__fp_szero>
    7ed8:	5f 3f       	cpi	r21, 0xFF	; 255
    7eda:	e4 f3       	brlt	.-8      	; 0x7ed4 <__mulsf3_pse+0x84>
    7edc:	98 3e       	cpi	r25, 0xE8	; 232
    7ede:	d4 f3       	brlt	.-12     	; 0x7ed4 <__mulsf3_pse+0x84>
    7ee0:	86 95       	lsr	r24
    7ee2:	77 95       	ror	r23
    7ee4:	67 95       	ror	r22
    7ee6:	b7 95       	ror	r27
    7ee8:	f7 95       	ror	r31
    7eea:	e7 95       	ror	r30
    7eec:	9f 5f       	subi	r25, 0xFF	; 255
    7eee:	c1 f7       	brne	.-16     	; 0x7ee0 <__mulsf3_pse+0x90>
    7ef0:	fe 2b       	or	r31, r30
    7ef2:	88 0f       	add	r24, r24
    7ef4:	91 1d       	adc	r25, r1
    7ef6:	96 95       	lsr	r25
    7ef8:	87 95       	ror	r24
    7efa:	97 f9       	bld	r25, 7
    7efc:	08 95       	ret

00007efe <__fp_inf>:
    7efe:	97 f9       	bld	r25, 7
    7f00:	9f 67       	ori	r25, 0x7F	; 127
    7f02:	80 e8       	ldi	r24, 0x80	; 128
    7f04:	70 e0       	ldi	r23, 0x00	; 0
    7f06:	60 e0       	ldi	r22, 0x00	; 0
    7f08:	08 95       	ret

00007f0a <__fp_nan>:
    7f0a:	9f ef       	ldi	r25, 0xFF	; 255
    7f0c:	80 ec       	ldi	r24, 0xC0	; 192
    7f0e:	08 95       	ret

00007f10 <__fp_pscA>:
    7f10:	00 24       	eor	r0, r0
    7f12:	0a 94       	dec	r0
    7f14:	16 16       	cp	r1, r22
    7f16:	17 06       	cpc	r1, r23
    7f18:	18 06       	cpc	r1, r24
    7f1a:	09 06       	cpc	r0, r25
    7f1c:	08 95       	ret

00007f1e <__fp_pscB>:
    7f1e:	00 24       	eor	r0, r0
    7f20:	0a 94       	dec	r0
    7f22:	12 16       	cp	r1, r18
    7f24:	13 06       	cpc	r1, r19
    7f26:	14 06       	cpc	r1, r20
    7f28:	05 06       	cpc	r0, r21
    7f2a:	08 95       	ret

00007f2c <__fp_round>:
    7f2c:	09 2e       	mov	r0, r25
    7f2e:	03 94       	inc	r0
    7f30:	00 0c       	add	r0, r0
    7f32:	11 f4       	brne	.+4      	; 0x7f38 <__fp_round+0xc>
    7f34:	88 23       	and	r24, r24
    7f36:	52 f0       	brmi	.+20     	; 0x7f4c <__fp_round+0x20>
    7f38:	bb 0f       	add	r27, r27
    7f3a:	40 f4       	brcc	.+16     	; 0x7f4c <__fp_round+0x20>
    7f3c:	bf 2b       	or	r27, r31
    7f3e:	11 f4       	brne	.+4      	; 0x7f44 <__fp_round+0x18>
    7f40:	60 ff       	sbrs	r22, 0
    7f42:	04 c0       	rjmp	.+8      	; 0x7f4c <__fp_round+0x20>
    7f44:	6f 5f       	subi	r22, 0xFF	; 255
    7f46:	7f 4f       	sbci	r23, 0xFF	; 255
    7f48:	8f 4f       	sbci	r24, 0xFF	; 255
    7f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    7f4c:	08 95       	ret

00007f4e <__udivmodhi4>:
    7f4e:	aa 1b       	sub	r26, r26
    7f50:	bb 1b       	sub	r27, r27
    7f52:	51 e1       	ldi	r21, 0x11	; 17
    7f54:	07 c0       	rjmp	.+14     	; 0x7f64 <__udivmodhi4_ep>

00007f56 <__udivmodhi4_loop>:
    7f56:	aa 1f       	adc	r26, r26
    7f58:	bb 1f       	adc	r27, r27
    7f5a:	a6 17       	cp	r26, r22
    7f5c:	b7 07       	cpc	r27, r23
    7f5e:	10 f0       	brcs	.+4      	; 0x7f64 <__udivmodhi4_ep>
    7f60:	a6 1b       	sub	r26, r22
    7f62:	b7 0b       	sbc	r27, r23

00007f64 <__udivmodhi4_ep>:
    7f64:	88 1f       	adc	r24, r24
    7f66:	99 1f       	adc	r25, r25
    7f68:	5a 95       	dec	r21
    7f6a:	a9 f7       	brne	.-22     	; 0x7f56 <__udivmodhi4_loop>
    7f6c:	80 95       	com	r24
    7f6e:	90 95       	com	r25
    7f70:	bc 01       	movw	r22, r24
    7f72:	cd 01       	movw	r24, r26
    7f74:	08 95       	ret

00007f76 <__divmodhi4>:
    7f76:	97 fb       	bst	r25, 7
    7f78:	07 2e       	mov	r0, r23
    7f7a:	16 f4       	brtc	.+4      	; 0x7f80 <__divmodhi4+0xa>
    7f7c:	00 94       	com	r0
    7f7e:	07 d0       	rcall	.+14     	; 0x7f8e <__divmodhi4_neg1>
    7f80:	77 fd       	sbrc	r23, 7
    7f82:	09 d0       	rcall	.+18     	; 0x7f96 <__divmodhi4_neg2>
    7f84:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <__udivmodhi4>
    7f88:	07 fc       	sbrc	r0, 7
    7f8a:	05 d0       	rcall	.+10     	; 0x7f96 <__divmodhi4_neg2>
    7f8c:	3e f4       	brtc	.+14     	; 0x7f9c <__divmodhi4_exit>

00007f8e <__divmodhi4_neg1>:
    7f8e:	90 95       	com	r25
    7f90:	81 95       	neg	r24
    7f92:	9f 4f       	sbci	r25, 0xFF	; 255
    7f94:	08 95       	ret

00007f96 <__divmodhi4_neg2>:
    7f96:	70 95       	com	r23
    7f98:	61 95       	neg	r22
    7f9a:	7f 4f       	sbci	r23, 0xFF	; 255

00007f9c <__divmodhi4_exit>:
    7f9c:	08 95       	ret

00007f9e <__udivmodsi4>:
    7f9e:	a1 e2       	ldi	r26, 0x21	; 33
    7fa0:	1a 2e       	mov	r1, r26
    7fa2:	aa 1b       	sub	r26, r26
    7fa4:	bb 1b       	sub	r27, r27
    7fa6:	fd 01       	movw	r30, r26
    7fa8:	0d c0       	rjmp	.+26     	; 0x7fc4 <__udivmodsi4_ep>

00007faa <__udivmodsi4_loop>:
    7faa:	aa 1f       	adc	r26, r26
    7fac:	bb 1f       	adc	r27, r27
    7fae:	ee 1f       	adc	r30, r30
    7fb0:	ff 1f       	adc	r31, r31
    7fb2:	a2 17       	cp	r26, r18
    7fb4:	b3 07       	cpc	r27, r19
    7fb6:	e4 07       	cpc	r30, r20
    7fb8:	f5 07       	cpc	r31, r21
    7fba:	20 f0       	brcs	.+8      	; 0x7fc4 <__udivmodsi4_ep>
    7fbc:	a2 1b       	sub	r26, r18
    7fbe:	b3 0b       	sbc	r27, r19
    7fc0:	e4 0b       	sbc	r30, r20
    7fc2:	f5 0b       	sbc	r31, r21

00007fc4 <__udivmodsi4_ep>:
    7fc4:	66 1f       	adc	r22, r22
    7fc6:	77 1f       	adc	r23, r23
    7fc8:	88 1f       	adc	r24, r24
    7fca:	99 1f       	adc	r25, r25
    7fcc:	1a 94       	dec	r1
    7fce:	69 f7       	brne	.-38     	; 0x7faa <__udivmodsi4_loop>
    7fd0:	60 95       	com	r22
    7fd2:	70 95       	com	r23
    7fd4:	80 95       	com	r24
    7fd6:	90 95       	com	r25
    7fd8:	9b 01       	movw	r18, r22
    7fda:	ac 01       	movw	r20, r24
    7fdc:	bd 01       	movw	r22, r26
    7fde:	cf 01       	movw	r24, r30
    7fe0:	08 95       	ret

00007fe2 <__divmodsi4>:
    7fe2:	05 2e       	mov	r0, r21
    7fe4:	97 fb       	bst	r25, 7
    7fe6:	1e f4       	brtc	.+6      	; 0x7fee <__divmodsi4+0xc>
    7fe8:	00 94       	com	r0
    7fea:	0e 94 08 40 	call	0x8010	; 0x8010 <__negsi2>
    7fee:	57 fd       	sbrc	r21, 7
    7ff0:	07 d0       	rcall	.+14     	; 0x8000 <__divmodsi4_neg2>
    7ff2:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__udivmodsi4>
    7ff6:	07 fc       	sbrc	r0, 7
    7ff8:	03 d0       	rcall	.+6      	; 0x8000 <__divmodsi4_neg2>
    7ffa:	4e f4       	brtc	.+18     	; 0x800e <__divmodsi4_exit>
    7ffc:	0c 94 08 40 	jmp	0x8010	; 0x8010 <__negsi2>

00008000 <__divmodsi4_neg2>:
    8000:	50 95       	com	r21
    8002:	40 95       	com	r20
    8004:	30 95       	com	r19
    8006:	21 95       	neg	r18
    8008:	3f 4f       	sbci	r19, 0xFF	; 255
    800a:	4f 4f       	sbci	r20, 0xFF	; 255
    800c:	5f 4f       	sbci	r21, 0xFF	; 255

0000800e <__divmodsi4_exit>:
    800e:	08 95       	ret

00008010 <__negsi2>:
    8010:	90 95       	com	r25
    8012:	80 95       	com	r24
    8014:	70 95       	com	r23
    8016:	61 95       	neg	r22
    8018:	7f 4f       	sbci	r23, 0xFF	; 255
    801a:	8f 4f       	sbci	r24, 0xFF	; 255
    801c:	9f 4f       	sbci	r25, 0xFF	; 255
    801e:	08 95       	ret

00008020 <__tablejump2__>:
    8020:	ee 0f       	add	r30, r30
    8022:	ff 1f       	adc	r31, r31
    8024:	88 1f       	adc	r24, r24
    8026:	8b bf       	out	0x3b, r24	; 59
    8028:	07 90       	elpm	r0, Z+
    802a:	f6 91       	elpm	r31, Z
    802c:	e0 2d       	mov	r30, r0
    802e:	19 94       	eijmp

00008030 <__umulhisi3>:
    8030:	a2 9f       	mul	r26, r18
    8032:	b0 01       	movw	r22, r0
    8034:	b3 9f       	mul	r27, r19
    8036:	c0 01       	movw	r24, r0
    8038:	a3 9f       	mul	r26, r19
    803a:	70 0d       	add	r23, r0
    803c:	81 1d       	adc	r24, r1
    803e:	11 24       	eor	r1, r1
    8040:	91 1d       	adc	r25, r1
    8042:	b2 9f       	mul	r27, r18
    8044:	70 0d       	add	r23, r0
    8046:	81 1d       	adc	r24, r1
    8048:	11 24       	eor	r1, r1
    804a:	91 1d       	adc	r25, r1
    804c:	08 95       	ret

0000804e <__muluhisi3>:
    804e:	0e 94 18 40 	call	0x8030	; 0x8030 <__umulhisi3>
    8052:	a5 9f       	mul	r26, r21
    8054:	90 0d       	add	r25, r0
    8056:	b4 9f       	mul	r27, r20
    8058:	90 0d       	add	r25, r0
    805a:	a4 9f       	mul	r26, r20
    805c:	80 0d       	add	r24, r0
    805e:	91 1d       	adc	r25, r1
    8060:	11 24       	eor	r1, r1
    8062:	08 95       	ret

00008064 <malloc>:
    8064:	cf 93       	push	r28
    8066:	df 93       	push	r29
    8068:	82 30       	cpi	r24, 0x02	; 2
    806a:	91 05       	cpc	r25, r1
    806c:	10 f4       	brcc	.+4      	; 0x8072 <malloc+0xe>
    806e:	82 e0       	ldi	r24, 0x02	; 2
    8070:	90 e0       	ldi	r25, 0x00	; 0
    8072:	e0 91 2d 26 	lds	r30, 0x262D	; 0x80262d <__flp>
    8076:	f0 91 2e 26 	lds	r31, 0x262E	; 0x80262e <__flp+0x1>
    807a:	20 e0       	ldi	r18, 0x00	; 0
    807c:	30 e0       	ldi	r19, 0x00	; 0
    807e:	c0 e0       	ldi	r28, 0x00	; 0
    8080:	d0 e0       	ldi	r29, 0x00	; 0
    8082:	30 97       	sbiw	r30, 0x00	; 0
    8084:	11 f1       	breq	.+68     	; 0x80ca <malloc+0x66>
    8086:	40 81       	ld	r20, Z
    8088:	51 81       	ldd	r21, Z+1	; 0x01
    808a:	48 17       	cp	r20, r24
    808c:	59 07       	cpc	r21, r25
    808e:	c0 f0       	brcs	.+48     	; 0x80c0 <malloc+0x5c>
    8090:	48 17       	cp	r20, r24
    8092:	59 07       	cpc	r21, r25
    8094:	61 f4       	brne	.+24     	; 0x80ae <malloc+0x4a>
    8096:	82 81       	ldd	r24, Z+2	; 0x02
    8098:	93 81       	ldd	r25, Z+3	; 0x03
    809a:	20 97       	sbiw	r28, 0x00	; 0
    809c:	19 f0       	breq	.+6      	; 0x80a4 <malloc+0x40>
    809e:	8a 83       	std	Y+2, r24	; 0x02
    80a0:	9b 83       	std	Y+3, r25	; 0x03
    80a2:	2b c0       	rjmp	.+86     	; 0x80fa <malloc+0x96>
    80a4:	80 93 2d 26 	sts	0x262D, r24	; 0x80262d <__flp>
    80a8:	90 93 2e 26 	sts	0x262E, r25	; 0x80262e <__flp+0x1>
    80ac:	26 c0       	rjmp	.+76     	; 0x80fa <malloc+0x96>
    80ae:	21 15       	cp	r18, r1
    80b0:	31 05       	cpc	r19, r1
    80b2:	19 f0       	breq	.+6      	; 0x80ba <malloc+0x56>
    80b4:	42 17       	cp	r20, r18
    80b6:	53 07       	cpc	r21, r19
    80b8:	18 f4       	brcc	.+6      	; 0x80c0 <malloc+0x5c>
    80ba:	9a 01       	movw	r18, r20
    80bc:	be 01       	movw	r22, r28
    80be:	df 01       	movw	r26, r30
    80c0:	ef 01       	movw	r28, r30
    80c2:	02 80       	ldd	r0, Z+2	; 0x02
    80c4:	f3 81       	ldd	r31, Z+3	; 0x03
    80c6:	e0 2d       	mov	r30, r0
    80c8:	dc cf       	rjmp	.-72     	; 0x8082 <malloc+0x1e>
    80ca:	21 15       	cp	r18, r1
    80cc:	31 05       	cpc	r19, r1
    80ce:	09 f1       	breq	.+66     	; 0x8112 <malloc+0xae>
    80d0:	28 1b       	sub	r18, r24
    80d2:	39 0b       	sbc	r19, r25
    80d4:	24 30       	cpi	r18, 0x04	; 4
    80d6:	31 05       	cpc	r19, r1
    80d8:	90 f4       	brcc	.+36     	; 0x80fe <malloc+0x9a>
    80da:	12 96       	adiw	r26, 0x02	; 2
    80dc:	8d 91       	ld	r24, X+
    80de:	9c 91       	ld	r25, X
    80e0:	13 97       	sbiw	r26, 0x03	; 3
    80e2:	61 15       	cp	r22, r1
    80e4:	71 05       	cpc	r23, r1
    80e6:	21 f0       	breq	.+8      	; 0x80f0 <malloc+0x8c>
    80e8:	fb 01       	movw	r30, r22
    80ea:	82 83       	std	Z+2, r24	; 0x02
    80ec:	93 83       	std	Z+3, r25	; 0x03
    80ee:	04 c0       	rjmp	.+8      	; 0x80f8 <malloc+0x94>
    80f0:	80 93 2d 26 	sts	0x262D, r24	; 0x80262d <__flp>
    80f4:	90 93 2e 26 	sts	0x262E, r25	; 0x80262e <__flp+0x1>
    80f8:	fd 01       	movw	r30, r26
    80fa:	32 96       	adiw	r30, 0x02	; 2
    80fc:	44 c0       	rjmp	.+136    	; 0x8186 <malloc+0x122>
    80fe:	fd 01       	movw	r30, r26
    8100:	e2 0f       	add	r30, r18
    8102:	f3 1f       	adc	r31, r19
    8104:	81 93       	st	Z+, r24
    8106:	91 93       	st	Z+, r25
    8108:	22 50       	subi	r18, 0x02	; 2
    810a:	31 09       	sbc	r19, r1
    810c:	2d 93       	st	X+, r18
    810e:	3c 93       	st	X, r19
    8110:	3a c0       	rjmp	.+116    	; 0x8186 <malloc+0x122>
    8112:	20 91 2b 26 	lds	r18, 0x262B	; 0x80262b <__brkval>
    8116:	30 91 2c 26 	lds	r19, 0x262C	; 0x80262c <__brkval+0x1>
    811a:	23 2b       	or	r18, r19
    811c:	41 f4       	brne	.+16     	; 0x812e <malloc+0xca>
    811e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    8122:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    8126:	20 93 2b 26 	sts	0x262B, r18	; 0x80262b <__brkval>
    812a:	30 93 2c 26 	sts	0x262C, r19	; 0x80262c <__brkval+0x1>
    812e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    8132:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    8136:	21 15       	cp	r18, r1
    8138:	31 05       	cpc	r19, r1
    813a:	41 f4       	brne	.+16     	; 0x814c <malloc+0xe8>
    813c:	2d b7       	in	r18, 0x3d	; 61
    813e:	3e b7       	in	r19, 0x3e	; 62
    8140:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    8144:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    8148:	24 1b       	sub	r18, r20
    814a:	35 0b       	sbc	r19, r21
    814c:	e0 91 2b 26 	lds	r30, 0x262B	; 0x80262b <__brkval>
    8150:	f0 91 2c 26 	lds	r31, 0x262C	; 0x80262c <__brkval+0x1>
    8154:	e2 17       	cp	r30, r18
    8156:	f3 07       	cpc	r31, r19
    8158:	a0 f4       	brcc	.+40     	; 0x8182 <malloc+0x11e>
    815a:	2e 1b       	sub	r18, r30
    815c:	3f 0b       	sbc	r19, r31
    815e:	28 17       	cp	r18, r24
    8160:	39 07       	cpc	r19, r25
    8162:	78 f0       	brcs	.+30     	; 0x8182 <malloc+0x11e>
    8164:	ac 01       	movw	r20, r24
    8166:	4e 5f       	subi	r20, 0xFE	; 254
    8168:	5f 4f       	sbci	r21, 0xFF	; 255
    816a:	24 17       	cp	r18, r20
    816c:	35 07       	cpc	r19, r21
    816e:	48 f0       	brcs	.+18     	; 0x8182 <malloc+0x11e>
    8170:	4e 0f       	add	r20, r30
    8172:	5f 1f       	adc	r21, r31
    8174:	40 93 2b 26 	sts	0x262B, r20	; 0x80262b <__brkval>
    8178:	50 93 2c 26 	sts	0x262C, r21	; 0x80262c <__brkval+0x1>
    817c:	81 93       	st	Z+, r24
    817e:	91 93       	st	Z+, r25
    8180:	02 c0       	rjmp	.+4      	; 0x8186 <malloc+0x122>
    8182:	e0 e0       	ldi	r30, 0x00	; 0
    8184:	f0 e0       	ldi	r31, 0x00	; 0
    8186:	cf 01       	movw	r24, r30
    8188:	df 91       	pop	r29
    818a:	cf 91       	pop	r28
    818c:	08 95       	ret

0000818e <free>:
    818e:	0f 93       	push	r16
    8190:	1f 93       	push	r17
    8192:	cf 93       	push	r28
    8194:	df 93       	push	r29
    8196:	00 97       	sbiw	r24, 0x00	; 0
    8198:	09 f4       	brne	.+2      	; 0x819c <free+0xe>
    819a:	8c c0       	rjmp	.+280    	; 0x82b4 <free+0x126>
    819c:	fc 01       	movw	r30, r24
    819e:	32 97       	sbiw	r30, 0x02	; 2
    81a0:	12 82       	std	Z+2, r1	; 0x02
    81a2:	13 82       	std	Z+3, r1	; 0x03
    81a4:	00 91 2d 26 	lds	r16, 0x262D	; 0x80262d <__flp>
    81a8:	10 91 2e 26 	lds	r17, 0x262E	; 0x80262e <__flp+0x1>
    81ac:	01 15       	cp	r16, r1
    81ae:	11 05       	cpc	r17, r1
    81b0:	81 f4       	brne	.+32     	; 0x81d2 <free+0x44>
    81b2:	20 81       	ld	r18, Z
    81b4:	31 81       	ldd	r19, Z+1	; 0x01
    81b6:	82 0f       	add	r24, r18
    81b8:	93 1f       	adc	r25, r19
    81ba:	20 91 2b 26 	lds	r18, 0x262B	; 0x80262b <__brkval>
    81be:	30 91 2c 26 	lds	r19, 0x262C	; 0x80262c <__brkval+0x1>
    81c2:	28 17       	cp	r18, r24
    81c4:	39 07       	cpc	r19, r25
    81c6:	79 f5       	brne	.+94     	; 0x8226 <free+0x98>
    81c8:	e0 93 2b 26 	sts	0x262B, r30	; 0x80262b <__brkval>
    81cc:	f0 93 2c 26 	sts	0x262C, r31	; 0x80262c <__brkval+0x1>
    81d0:	71 c0       	rjmp	.+226    	; 0x82b4 <free+0x126>
    81d2:	d8 01       	movw	r26, r16
    81d4:	40 e0       	ldi	r20, 0x00	; 0
    81d6:	50 e0       	ldi	r21, 0x00	; 0
    81d8:	ae 17       	cp	r26, r30
    81da:	bf 07       	cpc	r27, r31
    81dc:	50 f4       	brcc	.+20     	; 0x81f2 <free+0x64>
    81de:	12 96       	adiw	r26, 0x02	; 2
    81e0:	2d 91       	ld	r18, X+
    81e2:	3c 91       	ld	r19, X
    81e4:	13 97       	sbiw	r26, 0x03	; 3
    81e6:	ad 01       	movw	r20, r26
    81e8:	21 15       	cp	r18, r1
    81ea:	31 05       	cpc	r19, r1
    81ec:	09 f1       	breq	.+66     	; 0x8230 <free+0xa2>
    81ee:	d9 01       	movw	r26, r18
    81f0:	f3 cf       	rjmp	.-26     	; 0x81d8 <free+0x4a>
    81f2:	9d 01       	movw	r18, r26
    81f4:	da 01       	movw	r26, r20
    81f6:	22 83       	std	Z+2, r18	; 0x02
    81f8:	33 83       	std	Z+3, r19	; 0x03
    81fa:	60 81       	ld	r22, Z
    81fc:	71 81       	ldd	r23, Z+1	; 0x01
    81fe:	86 0f       	add	r24, r22
    8200:	97 1f       	adc	r25, r23
    8202:	82 17       	cp	r24, r18
    8204:	93 07       	cpc	r25, r19
    8206:	69 f4       	brne	.+26     	; 0x8222 <free+0x94>
    8208:	ec 01       	movw	r28, r24
    820a:	28 81       	ld	r18, Y
    820c:	39 81       	ldd	r19, Y+1	; 0x01
    820e:	26 0f       	add	r18, r22
    8210:	37 1f       	adc	r19, r23
    8212:	2e 5f       	subi	r18, 0xFE	; 254
    8214:	3f 4f       	sbci	r19, 0xFF	; 255
    8216:	20 83       	st	Z, r18
    8218:	31 83       	std	Z+1, r19	; 0x01
    821a:	8a 81       	ldd	r24, Y+2	; 0x02
    821c:	9b 81       	ldd	r25, Y+3	; 0x03
    821e:	82 83       	std	Z+2, r24	; 0x02
    8220:	93 83       	std	Z+3, r25	; 0x03
    8222:	45 2b       	or	r20, r21
    8224:	29 f4       	brne	.+10     	; 0x8230 <free+0xa2>
    8226:	e0 93 2d 26 	sts	0x262D, r30	; 0x80262d <__flp>
    822a:	f0 93 2e 26 	sts	0x262E, r31	; 0x80262e <__flp+0x1>
    822e:	42 c0       	rjmp	.+132    	; 0x82b4 <free+0x126>
    8230:	12 96       	adiw	r26, 0x02	; 2
    8232:	ed 93       	st	X+, r30
    8234:	fc 93       	st	X, r31
    8236:	13 97       	sbiw	r26, 0x03	; 3
    8238:	ed 01       	movw	r28, r26
    823a:	49 91       	ld	r20, Y+
    823c:	59 91       	ld	r21, Y+
    823e:	9e 01       	movw	r18, r28
    8240:	24 0f       	add	r18, r20
    8242:	35 1f       	adc	r19, r21
    8244:	e2 17       	cp	r30, r18
    8246:	f3 07       	cpc	r31, r19
    8248:	71 f4       	brne	.+28     	; 0x8266 <free+0xd8>
    824a:	80 81       	ld	r24, Z
    824c:	91 81       	ldd	r25, Z+1	; 0x01
    824e:	84 0f       	add	r24, r20
    8250:	95 1f       	adc	r25, r21
    8252:	02 96       	adiw	r24, 0x02	; 2
    8254:	8d 93       	st	X+, r24
    8256:	9c 93       	st	X, r25
    8258:	11 97       	sbiw	r26, 0x01	; 1
    825a:	82 81       	ldd	r24, Z+2	; 0x02
    825c:	93 81       	ldd	r25, Z+3	; 0x03
    825e:	12 96       	adiw	r26, 0x02	; 2
    8260:	8d 93       	st	X+, r24
    8262:	9c 93       	st	X, r25
    8264:	13 97       	sbiw	r26, 0x03	; 3
    8266:	e0 e0       	ldi	r30, 0x00	; 0
    8268:	f0 e0       	ldi	r31, 0x00	; 0
    826a:	d8 01       	movw	r26, r16
    826c:	12 96       	adiw	r26, 0x02	; 2
    826e:	8d 91       	ld	r24, X+
    8270:	9c 91       	ld	r25, X
    8272:	13 97       	sbiw	r26, 0x03	; 3
    8274:	00 97       	sbiw	r24, 0x00	; 0
    8276:	19 f0       	breq	.+6      	; 0x827e <free+0xf0>
    8278:	f8 01       	movw	r30, r16
    827a:	8c 01       	movw	r16, r24
    827c:	f6 cf       	rjmp	.-20     	; 0x826a <free+0xdc>
    827e:	8d 91       	ld	r24, X+
    8280:	9c 91       	ld	r25, X
    8282:	98 01       	movw	r18, r16
    8284:	2e 5f       	subi	r18, 0xFE	; 254
    8286:	3f 4f       	sbci	r19, 0xFF	; 255
    8288:	82 0f       	add	r24, r18
    828a:	93 1f       	adc	r25, r19
    828c:	20 91 2b 26 	lds	r18, 0x262B	; 0x80262b <__brkval>
    8290:	30 91 2c 26 	lds	r19, 0x262C	; 0x80262c <__brkval+0x1>
    8294:	28 17       	cp	r18, r24
    8296:	39 07       	cpc	r19, r25
    8298:	69 f4       	brne	.+26     	; 0x82b4 <free+0x126>
    829a:	30 97       	sbiw	r30, 0x00	; 0
    829c:	29 f4       	brne	.+10     	; 0x82a8 <free+0x11a>
    829e:	10 92 2d 26 	sts	0x262D, r1	; 0x80262d <__flp>
    82a2:	10 92 2e 26 	sts	0x262E, r1	; 0x80262e <__flp+0x1>
    82a6:	02 c0       	rjmp	.+4      	; 0x82ac <free+0x11e>
    82a8:	12 82       	std	Z+2, r1	; 0x02
    82aa:	13 82       	std	Z+3, r1	; 0x03
    82ac:	00 93 2b 26 	sts	0x262B, r16	; 0x80262b <__brkval>
    82b0:	10 93 2c 26 	sts	0x262C, r17	; 0x80262c <__brkval+0x1>
    82b4:	df 91       	pop	r29
    82b6:	cf 91       	pop	r28
    82b8:	1f 91       	pop	r17
    82ba:	0f 91       	pop	r16
    82bc:	08 95       	ret

000082be <memcpy>:
    82be:	fb 01       	movw	r30, r22
    82c0:	dc 01       	movw	r26, r24
    82c2:	02 c0       	rjmp	.+4      	; 0x82c8 <memcpy+0xa>
    82c4:	01 90       	ld	r0, Z+
    82c6:	0d 92       	st	X+, r0
    82c8:	41 50       	subi	r20, 0x01	; 1
    82ca:	50 40       	sbci	r21, 0x00	; 0
    82cc:	d8 f7       	brcc	.-10     	; 0x82c4 <memcpy+0x6>
    82ce:	08 95       	ret

000082d0 <eeprom_read_dword>:
    82d0:	0e 94 80 41 	call	0x8300	; 0x8300 <eeprom_mapen>
    82d4:	60 81       	ld	r22, Z
    82d6:	71 81       	ldd	r23, Z+1	; 0x01
    82d8:	82 81       	ldd	r24, Z+2	; 0x02
    82da:	93 81       	ldd	r25, Z+3	; 0x03
    82dc:	08 95       	ret

000082de <eeprom_write_dword>:
    82de:	24 2f       	mov	r18, r20
    82e0:	0e 94 8d 41 	call	0x831a	; 0x831a <eeprom_write_r18>
    82e4:	25 2f       	mov	r18, r21
    82e6:	0e 94 8d 41 	call	0x831a	; 0x831a <eeprom_write_r18>
    82ea:	0c 94 77 41 	jmp	0x82ee	; 0x82ee <eeprom_write_word>

000082ee <eeprom_write_word>:
    82ee:	0e 94 8c 41 	call	0x8318	; 0x8318 <eeprom_write_byte>
    82f2:	27 2f       	mov	r18, r23
    82f4:	0c 94 8d 41 	jmp	0x831a	; 0x831a <eeprom_write_r18>

000082f8 <eeprom_read_byte>:
    82f8:	03 d0       	rcall	.+6      	; 0x8300 <eeprom_mapen>
    82fa:	80 81       	ld	r24, Z
    82fc:	99 27       	eor	r25, r25
    82fe:	08 95       	ret

00008300 <eeprom_mapen>:
    8300:	e0 ec       	ldi	r30, 0xC0	; 192
    8302:	f1 e0       	ldi	r31, 0x01	; 1
    8304:	37 85       	ldd	r19, Z+15	; 0x0f
    8306:	37 fd       	sbrc	r19, 7
    8308:	fd cf       	rjmp	.-6      	; 0x8304 <eeprom_mapen+0x4>
    830a:	34 85       	ldd	r19, Z+12	; 0x0c
    830c:	38 60       	ori	r19, 0x08	; 8
    830e:	34 87       	std	Z+12, r19	; 0x0c
    8310:	fc 01       	movw	r30, r24
    8312:	e0 50       	subi	r30, 0x00	; 0
    8314:	f0 4f       	sbci	r31, 0xF0	; 240
    8316:	08 95       	ret

00008318 <eeprom_write_byte>:
    8318:	26 2f       	mov	r18, r22

0000831a <eeprom_write_r18>:
    831a:	e0 ec       	ldi	r30, 0xC0	; 192
    831c:	f1 e0       	ldi	r31, 0x01	; 1
    831e:	37 85       	ldd	r19, Z+15	; 0x0f
    8320:	37 fd       	sbrc	r19, 7
    8322:	fd cf       	rjmp	.-6      	; 0x831e <eeprom_write_r18+0x4>
    8324:	34 85       	ldd	r19, Z+12	; 0x0c
    8326:	37 7f       	andi	r19, 0xF7	; 247
    8328:	34 87       	std	Z+12, r19	; 0x0c
    832a:	37 85       	ldd	r19, Z+15	; 0x0f
    832c:	31 ff       	sbrs	r19, 1
    832e:	09 c0       	rjmp	.+18     	; 0x8342 <eeprom_write_r18+0x28>
    8330:	36 e3       	ldi	r19, 0x36	; 54
    8332:	32 87       	std	Z+10, r19	; 0x0a
    8334:	38 ed       	ldi	r19, 0xD8	; 216
    8336:	34 bf       	out	0x34, r19	; 52
    8338:	31 e0       	ldi	r19, 0x01	; 1
    833a:	33 87       	std	Z+11, r19	; 0x0b
    833c:	37 85       	ldd	r19, Z+15	; 0x0f
    833e:	37 fd       	sbrc	r19, 7
    8340:	fd cf       	rjmp	.-6      	; 0x833c <eeprom_write_r18+0x22>
    8342:	33 e3       	ldi	r19, 0x33	; 51
    8344:	32 87       	std	Z+10, r19	; 0x0a
    8346:	80 83       	st	Z, r24
    8348:	91 83       	std	Z+1, r25	; 0x01
    834a:	12 82       	std	Z+2, r1	; 0x02
    834c:	24 83       	std	Z+4, r18	; 0x04
    834e:	25 e3       	ldi	r18, 0x35	; 53
    8350:	22 87       	std	Z+10, r18	; 0x0a
    8352:	28 ed       	ldi	r18, 0xD8	; 216
    8354:	31 e0       	ldi	r19, 0x01	; 1
    8356:	24 bf       	out	0x34, r18	; 52
    8358:	33 87       	std	Z+11, r19	; 0x0b
    835a:	01 96       	adiw	r24, 0x01	; 1
    835c:	08 95       	ret

0000835e <__do_global_dtors>:
    835e:	12 e0       	ldi	r17, 0x02	; 2
    8360:	cc e8       	ldi	r28, 0x8C	; 140
    8362:	d2 e0       	ldi	r29, 0x02	; 2
    8364:	00 e0       	ldi	r16, 0x00	; 0
    8366:	06 c0       	rjmp	.+12     	; 0x8374 <__do_global_dtors+0x16>
    8368:	80 2f       	mov	r24, r16
    836a:	fe 01       	movw	r30, r28
    836c:	0e 94 10 40 	call	0x8020	; 0x8020 <__tablejump2__>
    8370:	21 96       	adiw	r28, 0x01	; 1
    8372:	01 1d       	adc	r16, r1
    8374:	cd 38       	cpi	r28, 0x8D	; 141
    8376:	d1 07       	cpc	r29, r17
    8378:	80 e0       	ldi	r24, 0x00	; 0
    837a:	08 07       	cpc	r16, r24
    837c:	a9 f7       	brne	.-22     	; 0x8368 <__do_global_dtors+0xa>
    837e:	f8 94       	cli

00008380 <__stop_program>:
    8380:	ff cf       	rjmp	.-2      	; 0x8380 <__stop_program>
