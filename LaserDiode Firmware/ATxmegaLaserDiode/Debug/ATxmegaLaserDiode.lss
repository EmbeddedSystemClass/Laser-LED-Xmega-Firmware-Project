
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00802000  000053f6  0000548a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000271  00802154  00802154  000055de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000055de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  00005650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c7e6  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022e0  00000000  00000000  00012716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028ca  00000000  00000000  000149f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f6c  00000000  00000000  000172c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004c6a  00000000  00000000  0001a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007eb9  00000000  00000000  0001ee96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  00026d4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 02 	jmp	0x432	; 0x432 <__dtors_end>
       4:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_1>
       8:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__vector_2>
       c:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_3>
      10:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_4>
      14:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_5>
      18:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_6>
      1c:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__vector_7>
      20:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_8>
      24:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_9>
      28:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__vector_10>
      2c:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__vector_11>
      30:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_12>
      34:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__vector_13>
      38:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__vector_14>
      3c:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_15>
      40:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_16>
      44:	0c 94 df 13 	jmp	0x27be	; 0x27be <__vector_17>
      48:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__vector_18>
      4c:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__vector_19>
      50:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__vector_20>
      54:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_21>
      58:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_22>
      5c:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__vector_23>
      60:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__vector_24>
      64:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__vector_25>
      68:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__vector_26>
      6c:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_27>
      70:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_28>
      74:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__vector_29>
      78:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_30>
      7c:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__vector_31>
      80:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_32>
      84:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_33>
      88:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_34>
      8c:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__vector_35>
      90:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_36>
      94:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_37>
      98:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__vector_38>
      9c:	0c 94 15 18 	jmp	0x302a	; 0x302a <__vector_39>
      a0:	0c 94 46 18 	jmp	0x308c	; 0x308c <__vector_40>
      a4:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__vector_41>
      a8:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__vector_42>
      ac:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__vector_43>
      b0:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__vector_44>
      b4:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__vector_45>
      b8:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__vector_46>
      bc:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__vector_47>
      c0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__vector_48>
      c4:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_49>
      c8:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__vector_50>
      cc:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__vector_51>
      d0:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__vector_52>
      d4:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__vector_53>
      d8:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_54>
      dc:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_55>
      e0:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__vector_56>
      e4:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__vector_57>
      e8:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__vector_58>
      ec:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_59>
      f0:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__vector_60>
      f4:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__vector_61>
      f8:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__vector_62>
      fc:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__vector_63>
     100:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__vector_64>
     104:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_65>
     108:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__vector_66>
     10c:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_67>
     110:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__vector_68>
     114:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__vector_69>
     118:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_70>
     11c:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__vector_71>
     120:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__vector_72>
     124:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__vector_73>
     128:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__vector_74>
     12c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     130:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     134:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__vector_77>
     138:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__vector_78>
     13c:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__vector_79>
     140:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__vector_80>
     144:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__vector_81>
     148:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__vector_82>
     14c:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__vector_83>
     150:	0c 94 50 20 	jmp	0x40a0	; 0x40a0 <__vector_84>
     154:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__vector_85>
     158:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <__vector_86>
     15c:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__vector_87>
     160:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__vector_88>
     164:	0c 94 45 21 	jmp	0x428a	; 0x428a <__vector_89>
     168:	0c 94 76 21 	jmp	0x42ec	; 0x42ec <__vector_90>
     16c:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__vector_91>
     170:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__vector_92>
     174:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__vector_93>
     178:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     17c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     180:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     184:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     188:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     18c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     190:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     194:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     198:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     19c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1a0:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__vector_104>
     1a4:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__vector_105>
     1a8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1ac:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1b0:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__vector_108>
     1b4:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__vector_109>
     1b8:	0c 94 fe 22 	jmp	0x45fc	; 0x45fc <__vector_110>
     1bc:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__vector_111>
     1c0:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_112>
     1c4:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__vector_113>
     1c8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1cc:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1d0:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1d4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1d8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1dc:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <__vector_119>
     1e0:	0c 94 f3 23 	jmp	0x47e6	; 0x47e6 <__vector_120>
     1e4:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__vector_121>
     1e8:	19 04       	cpc	r1, r9
     1ea:	1c 04       	cpc	r1, r12
     1ec:	2d 04       	cpc	r2, r13
     1ee:	3e 04       	cpc	r3, r14
     1f0:	80 04       	cpc	r8, r0
     1f2:	80 04       	cpc	r8, r0
     1f4:	80 04       	cpc	r8, r0
     1f6:	50 04       	cpc	r5, r0
     1f8:	54 04       	cpc	r5, r4
     1fa:	58 04       	cpc	r5, r8
     1fc:	5c 04       	cpc	r5, r12
     1fe:	60 04       	cpc	r6, r0
     200:	64 04       	cpc	r6, r4
     202:	80 04       	cpc	r8, r0
     204:	68 04       	cpc	r6, r8
     206:	6c 04       	cpc	r6, r12
     208:	70 04       	cpc	r7, r0
     20a:	74 04       	cpc	r7, r4
     20c:	78 04       	cpc	r7, r8
     20e:	7c 04       	cpc	r7, r12
     210:	79 07       	cpc	r23, r25
     212:	95 0b       	sbc	r25, r21
     214:	95 0b       	sbc	r25, r21
     216:	95 0b       	sbc	r25, r21
     218:	95 0b       	sbc	r25, r21
     21a:	92 07       	cpc	r25, r18
     21c:	c1 07       	cpc	r28, r17
     21e:	e2 07       	cpc	r30, r18
     220:	2f 08       	sbc	r2, r15
     222:	95 0b       	sbc	r25, r21
     224:	95 0b       	sbc	r25, r21
     226:	95 0b       	sbc	r25, r21
     228:	95 0b       	sbc	r25, r21
     22a:	95 0b       	sbc	r25, r21
     22c:	95 0b       	sbc	r25, r21
     22e:	95 0b       	sbc	r25, r21
     230:	a3 08       	sbc	r10, r3
     232:	89 08       	sbc	r8, r9
     234:	d0 09       	sbc	r29, r0
     236:	df 09       	sbc	r29, r15
     238:	ee 09       	sbc	r30, r14
     23a:	fd 09       	sbc	r31, r13
     23c:	0c 0a       	sbc	r0, r28
     23e:	1b 0a       	sbc	r1, r27
     240:	2a 0a       	sbc	r2, r26
     242:	39 0a       	sbc	r3, r25
     244:	48 0a       	sbc	r4, r24
     246:	57 0a       	sbc	r5, r23
     248:	66 0a       	sbc	r6, r22
     24a:	75 0a       	sbc	r7, r21
     24c:	84 0a       	sbc	r8, r20
     24e:	93 0a       	sbc	r9, r19
     250:	91 26       	eor	r9, r17
     252:	91 26       	eor	r9, r17
     254:	99 26       	eor	r9, r25
     256:	a1 26       	eor	r10, r17
     258:	ac 26       	eor	r10, r28
     25a:	04 27       	eor	r16, r20
     25c:	0b 27       	eor	r16, r27
     25e:	37 27       	eor	r19, r23
     260:	37 27       	eor	r19, r23
     262:	36 27       	eor	r19, r22
     264:	36 27       	eor	r19, r22

00000266 <__trampolines_start>:
     266:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     26a:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_ZN16CLaserControlApp3RunEv+0x696>
     26e:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <_ZN16CLaserControlApp3RunEv+0x18e>
     272:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9c>
     276:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     27a:	0c 94 44 28 	jmp	0x5088	; 0x5088 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     27e:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     282:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     286:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <_ZN7CTimerC5StartEj>
     28a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__cxa_pure_virtual>
     28e:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <_ZN16CLaserControlApp3RunEv+0x6b4>
     292:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <_ZN16CLaserControlApp3RunEv+0x5c4>
     296:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     29a:	0c 94 70 25 	jmp	0x4ae0	; 0x4ae0 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     29e:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <_ZN7CTimerC9SetPeriodEj>
     2a2:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <_ZN16CMBEventsHandler11FreeBuffersEv>
     2a6:	0c 94 20 25 	jmp	0x4a40	; 0x4a40 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2aa:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2ae:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <_ZN16CLaserControlApp3RunEv+0x5a6>
     2b2:	0c 94 1c 04 	jmp	0x838	; 0x838 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     2b6:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xbc>
     2ba:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xdc>
     2be:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     2c2:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     2c6:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2ca:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2ce:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_ZN7CTimerC4StopEv>
     2d2:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     2d6:	0c 94 01 04 	jmp	0x802	; 0x802 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     2da:	0c 94 2f 08 	jmp	0x105e	; 0x105e <_ZN16CLaserControlApp3RunEv+0x228>
     2de:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <_ZN7CTimerF8SetCOMPDEj>
     2e2:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe4>
     2e6:	0c 94 89 08 	jmp	0x1112	; 0x1112 <_ZN16CLaserControlApp3RunEv+0x2dc>
     2ea:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd4>
     2ee:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2f2:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <_ZN7CTimerF8SetCOMPAEj>
     2f6:	0c 94 a4 02 	jmp	0x548	; 0x548 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2fa:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xcc>
     2fe:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     302:	0c 94 4c 02 	jmp	0x498	; 0x498 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     306:	0c 94 be 10 	jmp	0x217c	; 0x217c <_ZN4CSPI16StaticOnTransmitEPv>
     30a:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     30e:	0c 94 80 04 	jmp	0x900	; 0x900 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     312:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <_ZN16CLaserControlApp3RunEv+0x678>
     316:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xec>
     31a:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf4>
     31e:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     322:	0c 94 0b 27 	jmp	0x4e16	; 0x4e16 <_ZN9CMBSender13OnReceiveByteEh+0x116>
     326:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <_ZN7CTimerC8SetCOMPCEj>
     32a:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <_ZN16CLaserControlApp3RunEv+0x600>
     32e:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <_ZN7CTimerC8SetCOMPAEj>
     332:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
     336:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     33a:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     33e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     342:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     346:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <_ZN16CLaserControlApp3RunEv+0x56a>
     34a:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <_ZN7CTimerC8SetCOMPBEj>
     34e:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     352:	0c 94 87 02 	jmp	0x50e	; 0x50e <_ZN10CDGUSUSART15GetReceivedByteEv>
     356:	0c 94 92 07 	jmp	0xf24	; 0xf24 <_ZN16CLaserControlApp3RunEv+0xee>
     35a:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <_GLOBAL__sub_D_dacSPI>
     35e:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <_GLOBAL__sub_I_dacSPI>
     362:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <_GLOBAL__sub_I_timer>
     366:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_ZN10CDGUSUSART14IsTransmittingEv>
     36a:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     36e:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb4>
     372:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_ZN16CLaserControlApp3RunEv+0x65a>
     376:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <_ZN7CTimerC8SetCOMPDEj>
     37a:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     37e:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <_ZN16CLaserControlApp3RunEv+0x6d2>
     382:	0c 94 3a 27 	jmp	0x4e74	; 0x4e74 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     386:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     38a:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_ZN7CTimerF4StopEv>
     38e:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     392:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     396:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     39a:	0c 94 9f 27 	jmp	0x4f3e	; 0x4f3e <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     39e:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     3a2:	0c 94 05 26 	jmp	0x4c0a	; 0x4c0a <_ZN9CMBSender18OnVariableReceivedEjPjj>
     3a6:	0c 94 02 04 	jmp	0x804	; 0x804 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     3aa:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     3ae:	0c 94 bf 02 	jmp	0x57e	; 0x57e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     3b2:	0c 94 95 02 	jmp	0x52a	; 0x52a <_ZN10CDGUSUSART11IsReceivingEv>
     3b6:	0c 94 ac 26 	jmp	0x4d58	; 0x4d58 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     3ba:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <_ZN16CLaserControlApp3RunEv+0x310>
     3be:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3c2:	0c 94 df 09 	jmp	0x13be	; 0x13be <_ZN16CLaserControlApp3RunEv+0x588>
     3c6:	0c 94 95 0b 	jmp	0x172a	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
     3ca:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <_ZN16CLaserControlApp3RunEv+0x14c>
     3ce:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa4>
     3d2:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     3d6:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3da:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <_ZN7CTimerF9SetPeriodEj>
     3de:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <_ZN16CLaserControlApp3RunEv+0x6f0>
     3e2:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     3e6:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_ZN16CLaserControlApp3RunEv+0x63c>
     3ea:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ee:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <_ZN7CTimerF8SetCOMPBEj>
     3f2:	0c 94 08 10 	jmp	0x2010	; 0x2010 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3f6:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <_ZN7CTimerF5StartEj>
     3fa:	0c 94 79 07 	jmp	0xef2	; 0xef2 <_ZN16CLaserControlApp3RunEv+0xbc>
     3fe:	0c 94 b8 25 	jmp	0x4b70	; 0x4b70 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     402:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     406:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <_ZN7CTimerF8SetCOMPCEj>
     40a:	0c 94 04 27 	jmp	0x4e08	; 0x4e08 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     40e:	0c 94 5d 05 	jmp	0xaba	; 0xaba <_GLOBAL__sub_D_timer>
     412:	0c 94 9c 02 	jmp	0x538	; 0x538 <_ZN10CDGUSUSART11IsDataEmptyEv>
     416:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     41a:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <_ZN16CLaserControlApp3RunEv+0x61e>
     41e:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     422:	0c 94 8a 02 	jmp	0x514	; 0x514 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     426:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <_ZN16CLaserControlApp3RunEv+0x5e2>

0000042a <__ctors_start>:
     42a:	54 05       	cpc	r21, r4
     42c:	58 24       	eor	r5, r8

0000042e <__ctors_end>:
     42e:	5d 05       	cpc	r21, r13
     430:	71 24       	eor	r7, r1

00000432 <__dtors_end>:
     432:	11 24       	eor	r1, r1
     434:	1f be       	out	0x3f, r1	; 63
     436:	cf ef       	ldi	r28, 0xFF	; 255
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df e3       	ldi	r29, 0x3F	; 63
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	0c bf       	out	0x3c, r16	; 60

00000442 <__do_copy_data>:
     442:	11 e2       	ldi	r17, 0x21	; 33
     444:	a0 e0       	ldi	r26, 0x00	; 0
     446:	b0 e2       	ldi	r27, 0x20	; 32
     448:	e6 ef       	ldi	r30, 0xF6	; 246
     44a:	f3 e5       	ldi	r31, 0x53	; 83
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	0b bf       	out	0x3b, r16	; 59
     450:	02 c0       	rjmp	.+4      	; 0x456 <__do_copy_data+0x14>
     452:	07 90       	elpm	r0, Z+
     454:	0d 92       	st	X+, r0
     456:	a4 35       	cpi	r26, 0x54	; 84
     458:	b1 07       	cpc	r27, r17
     45a:	d9 f7       	brne	.-10     	; 0x452 <__do_copy_data+0x10>

0000045c <__do_clear_bss>:
     45c:	23 e2       	ldi	r18, 0x23	; 35
     45e:	a4 e5       	ldi	r26, 0x54	; 84
     460:	b1 e2       	ldi	r27, 0x21	; 33
     462:	01 c0       	rjmp	.+2      	; 0x466 <.do_clear_bss_start>

00000464 <.do_clear_bss_loop>:
     464:	1d 92       	st	X+, r1

00000466 <.do_clear_bss_start>:
     466:	a5 3c       	cpi	r26, 0xC5	; 197
     468:	b2 07       	cpc	r27, r18
     46a:	e1 f7       	brne	.-8      	; 0x464 <.do_clear_bss_loop>

0000046c <__do_global_ctors>:
     46c:	12 e0       	ldi	r17, 0x02	; 2
     46e:	c7 e1       	ldi	r28, 0x17	; 23
     470:	d2 e0       	ldi	r29, 0x02	; 2
     472:	00 e0       	ldi	r16, 0x00	; 0
     474:	06 c0       	rjmp	.+12     	; 0x482 <__do_global_ctors+0x16>
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	01 09       	sbc	r16, r1
     47a:	80 2f       	mov	r24, r16
     47c:	fe 01       	movw	r30, r28
     47e:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__tablejump2__>
     482:	c5 31       	cpi	r28, 0x15	; 21
     484:	d1 07       	cpc	r29, r17
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 07       	cpc	r16, r24
     48a:	a9 f7       	brne	.-22     	; 0x476 <__do_global_ctors+0xa>
     48c:	0e 94 c5 24 	call	0x498a	; 0x498a <main>
     490:	0c 94 e9 29 	jmp	0x53d2	; 0x53d2 <__do_global_dtors>

00000494 <__bad_interrupt>:
     494:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000498 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     498:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     49a:	e0 e6       	ldi	r30, 0x60	; 96
     49c:	f6 e0       	ldi	r31, 0x06	; 6
     49e:	88 e0       	ldi	r24, 0x08	; 8
     4a0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     4a6:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     4a8:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     4aa:	e0 ea       	ldi	r30, 0xA0	; 160
     4ac:	f9 e0       	ldi	r31, 0x09	; 9
     4ae:	84 e1       	ldi	r24, 0x14	; 20
     4b0:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     4b2:	88 e1       	ldi	r24, 0x18	; 24
     4b4:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     4b6:	84 81       	ldd	r24, Z+4	; 0x04
     4b8:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     4ba:	41 30       	cpi	r20, 0x01	; 1
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     4be:	42 30       	cpi	r20, 0x02	; 2
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     4c4:	80 e2       	ldi	r24, 0x20	; 32
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     4c8:	80 e3       	ldi	r24, 0x30	; 48
		break;
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     4ce:	22 23       	and	r18, r18
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     4d2:	21 30       	cpi	r18, 0x01	; 1
     4d4:	19 f0       	breq	.+6      	; 0x4dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     4d8:	87 7f       	andi	r24, 0xF7	; 247
		break;
     4da:	01 c0       	rjmp	.+2      	; 0x4de <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     4dc:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     4de:	01 11       	cpse	r16, r1
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     4e2:	93 e4       	ldi	r25, 0x43	; 67
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	89 2b       	or	r24, r25
     4ea:	e0 ea       	ldi	r30, 0xA0	; 160
     4ec:	f9 e0       	ldi	r31, 0x09	; 9
     4ee:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	db 01       	movw	r26, r22
     4f4:	aa 5d       	subi	r26, 0xDA	; 218
     4f6:	bf 4d       	sbci	r27, 0xDF	; 223
     4f8:	8c 91       	ld	r24, X
     4fa:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     4fc:	db 01       	movw	r26, r22
     4fe:	aa 5f       	subi	r26, 0xFA	; 250
     500:	bf 4d       	sbci	r27, 0xDF	; 223
     502:	8c 91       	ld	r24, X
     504:	82 95       	swap	r24
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     50e:	80 91 a0 09 	lds	r24, 0x09A0
}
     512:	08 95       	ret

00000514 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     514:	60 93 a0 09 	sts	0x09A0, r22
     518:	08 95       	ret

0000051a <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     51a:	80 91 a1 09 	lds	r24, 0x09A1
     51e:	86 fb       	bst	r24, 6
     520:	88 27       	eor	r24, r24
     522:	80 f9       	bld	r24, 0
}
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	89 27       	eor	r24, r25
     528:	08 95       	ret

0000052a <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     52a:	80 91 a1 09 	lds	r24, 0x09A1
     52e:	80 95       	com	r24
}
     530:	88 1f       	adc	r24, r24
     532:	88 27       	eor	r24, r24
     534:	88 1f       	adc	r24, r24
     536:	08 95       	ret

00000538 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     538:	80 91 a1 09 	lds	r24, 0x09A1
     53c:	85 fb       	bst	r24, 5
     53e:	88 27       	eor	r24, r24
     540:	80 f9       	bld	r24, 0
}
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	89 27       	eor	r24, r25
     546:	08 95       	ret

00000548 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     548:	60 93 2f 23 	sts	0x232F, r22
     54c:	70 93 30 23 	sts	0x2330, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     550:	40 93 39 22 	sts	0x2239, r20
     554:	50 93 3a 22 	sts	0x223A, r21
     558:	08 95       	ret

0000055a <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     55a:	60 93 33 23 	sts	0x2333, r22
     55e:	70 93 34 23 	sts	0x2334, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     562:	40 93 3d 22 	sts	0x223D, r20
     566:	50 93 3e 22 	sts	0x223E, r21
     56a:	08 95       	ret

0000056c <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     56c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     56e:	8b e6       	ldi	r24, 0x6B	; 107
     570:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     572:	80 ea       	ldi	r24, 0xA0	; 160
     574:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     576:	89 e0       	ldi	r24, 0x09	; 9
     578:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     57a:	12 86       	std	Z+10, r1	; 0x0a
     57c:	08 95       	ret

0000057e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     57e:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     580:	8c e6       	ldi	r24, 0x6C	; 108
     582:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     584:	80 ea       	ldi	r24, 0xA0	; 160
     586:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     588:	89 e0       	ldi	r24, 0x09	; 9
     58a:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     58c:	16 86       	std	Z+14, r1	; 0x0e
     58e:	08 95       	ret

00000590 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN6CUSARTC1Ev>
     59a:	8a e4       	ldi	r24, 0x4A	; 74
     59c:	90 e2       	ldi	r25, 0x20	; 32
     59e:	88 83       	st	Y, r24
     5a0:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     5a8:	2a e4       	ldi	r18, 0x4A	; 74
     5aa:	30 e2       	ldi	r19, 0x20	; 32
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
     5b0:	31 83       	std	Z+1, r19	; 0x01
     5b2:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN6CUSARTD1Ev>
     5b6:	08 95       	ret

000005b8 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     5b8:	08 95       	ret

000005ba <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     5ba:	08 95       	ret

000005bc <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
     5c2:	e0 e4       	ldi	r30, 0x40	; 64
     5c4:	f6 e0       	ldi	r31, 0x06	; 6
     5c6:	2f ef       	ldi	r18, 0xFF	; 255
     5c8:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5ca:	98 ea       	ldi	r25, 0xA8	; 168
     5cc:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5ce:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d0:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d2:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d4:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d6:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d8:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5da:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
     5dc:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     5de:	a0 e8       	ldi	r26, 0x80	; 128
     5e0:	b6 e0       	ldi	r27, 0x06	; 6
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	8c 93       	st	X, r24
     5e8:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     5ea:	53 96       	adiw	r26, 0x13	; 19
     5ec:	1c 92       	st	X, r1
     5ee:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
     5f0:	14 96       	adiw	r26, 0x04	; 4
     5f2:	1c 92       	st	X, r1
     5f4:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5f6:	e0 ea       	ldi	r30, 0xA0	; 160
     5f8:	f6 e0       	ldi	r31, 0x06	; 6
     5fa:	90 ec       	ldi	r25, 0xC0	; 192
     5fc:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     602:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     604:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     606:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     608:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     60a:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     60c:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     60e:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     610:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     612:	e0 e6       	ldi	r30, 0x60	; 96
     614:	f6 e0       	ldi	r31, 0x06	; 6
     616:	21 e1       	ldi	r18, 0x11	; 17
     618:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     61a:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     61c:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     61e:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	9c 93       	st	X, r25
     626:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     628:	50 96       	adiw	r26, 0x10	; 16
     62a:	8c 93       	st	X, r24
     62c:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     62e:	51 96       	adiw	r26, 0x11	; 17
     630:	8c 93       	st	X, r24
     632:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
     634:	14 96       	adiw	r26, 0x04	; 4
     636:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     638:	e0 ea       	ldi	r30, 0xA0	; 160
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	82 60       	ori	r24, 0x02	; 2
     646:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	84 60       	ori	r24, 0x04	; 4
     64c:	82 83       	std	Z+2, r24	; 0x02
     64e:	fe 01       	movw	r30, r28
     650:	9e 01       	movw	r18, r28
     652:	28 5f       	subi	r18, 0xF8	; 248
     654:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
     65a:	e2 17       	cp	r30, r18
     65c:	f3 07       	cpc	r31, r19
     65e:	e1 f7       	brne	.-8      	; 0x658 <_ZN11CLaserBoard12InitializeIOEv+0x9c>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	88 87       	std	Y+8, r24	; 0x08
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     66a:	e0 e5       	ldi	r30, 0x50	; 80
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	8b ec       	ldi	r24, 0xCB	; 203
     670:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     672:	80 81       	ld	r24, Z
     674:	88 60       	ori	r24, 0x08	; 8
     676:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     678:	81 81       	ldd	r24, Z+1	; 0x01
     67a:	83 ff       	sbrs	r24, 3
     67c:	fd cf       	rjmp	.-6      	; 0x678 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     67e:	e0 e5       	ldi	r30, 0x50	; 80
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     684:	98 ed       	ldi	r25, 0xD8	; 216
     686:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     688:	84 ec       	ldi	r24, 0xC4	; 196
     68a:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     68c:	80 81       	ld	r24, Z
     68e:	80 61       	ori	r24, 0x10	; 16
     690:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     692:	e0 e4       	ldi	r30, 0x40	; 64
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     698:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     69a:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     69c:	e0 e5       	ldi	r30, 0x50	; 80
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
     6a2:	84 ff       	sbrs	r24, 4
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     6a6:	e0 e4       	ldi	r30, 0x40	; 64
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 7f       	andi	r24, 0xF8	; 248
     6ae:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     6b0:	98 ed       	ldi	r25, 0xD8	; 216
     6b2:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     6b4:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     6b6:	a0 e5       	ldi	r26, 0x50	; 80
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8c 91       	ld	r24, X
     6bc:	88 7f       	andi	r24, 0xF8	; 248
     6be:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     6c0:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     6c2:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     6c8:	e0 eb       	ldi	r30, 0xB0	; 176
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	84 81       	ldd	r24, Z+4	; 0x04
     6ce:	8c 7f       	andi	r24, 0xFC	; 252
     6d0:	84 83       	std	Z+4, r24	; 0x04
     6d2:	08 95       	ret

000006d4 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 62 06 	sts	0x0662, r24
     6da:	08 95       	ret

000006dc <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     6dc:	80 e1       	ldi	r24, 0x10	; 16
     6de:	80 93 62 06 	sts	0x0662, r24
     6e2:	08 95       	ret

000006e4 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 61 06 	sts	0x0661, r24
     6ea:	08 95       	ret

000006ec <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     6ec:	80 e1       	ldi	r24, 0x10	; 16
     6ee:	80 93 61 06 	sts	0x0661, r24
     6f2:	08 95       	ret

000006f4 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	80 93 85 06 	sts	0x0685, r24
     6fa:	08 95       	ret

000006fc <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	80 93 86 06 	sts	0x0686, r24
     702:	08 95       	ret

00000704 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     704:	f8 94       	cli
     706:	84 e6       	ldi	r24, 0x64	; 100
     708:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     70a:	e0 e8       	ldi	r30, 0x80	; 128
     70c:	f6 e0       	ldi	r31, 0x06	; 6
     70e:	28 e0       	ldi	r18, 0x08	; 8
     710:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     712:	af e9       	ldi	r26, 0x9F	; 159
     714:	bf e0       	ldi	r27, 0x0F	; 15
     716:	11 97       	sbiw	r26, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <_ZN11CLaserBoard4BeepEv+0x12>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <_ZN11CLaserBoard4BeepEv+0x18>
     71c:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     71e:	26 83       	std	Z+6, r18	; 0x06
     720:	af e9       	ldi	r26, 0x9F	; 159
     722:	bf e0       	ldi	r27, 0x0F	; 15
     724:	11 97       	sbiw	r26, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <_ZN11CLaserBoard4BeepEv+0x20>
     728:	00 c0       	rjmp	.+0      	; 0x72a <_ZN11CLaserBoard4BeepEv+0x26>
     72a:	00 00       	nop
     72c:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     72e:	81 f7       	brne	.-32     	; 0x710 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     730:	78 94       	sei
     732:	08 95       	ret

00000734 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     734:	f8 94       	cli
     736:	45 e0       	ldi	r20, 0x05	; 5
     738:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     73a:	64 e6       	ldi	r22, 0x64	; 100
     73c:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     73e:	e0 e8       	ldi	r30, 0x80	; 128
     740:	f6 e0       	ldi	r31, 0x06	; 6
     742:	28 e0       	ldi	r18, 0x08	; 8
     744:	1c c0       	rjmp	.+56     	; 0x77e <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     746:	25 83       	std	Z+5, r18	; 0x05
     748:	af e9       	ldi	r26, 0x9F	; 159
     74a:	bf e0       	ldi	r27, 0x0F	; 15
     74c:	11 97       	sbiw	r26, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     750:	00 c0       	rjmp	.+0      	; 0x752 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     752:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     754:	26 83       	std	Z+6, r18	; 0x06
     756:	af e9       	ldi	r26, 0x9F	; 159
     758:	bf e0       	ldi	r27, 0x0F	; 15
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     760:	00 00       	nop
     762:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     764:	81 f7       	brne	.-32     	; 0x746 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     766:	bf ef       	ldi	r27, 0xFF	; 255
     768:	73 ec       	ldi	r23, 0xC3	; 195
     76a:	89 e0       	ldi	r24, 0x09	; 9
     76c:	b1 50       	subi	r27, 0x01	; 1
     76e:	70 40       	sbci	r23, 0x00	; 0
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	e1 f7       	brne	.-8      	; 0x76c <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     774:	00 c0       	rjmp	.+0      	; 0x776 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     776:	00 00       	nop
     778:	41 50       	subi	r20, 0x01	; 1
     77a:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     77c:	19 f0       	breq	.+6      	; 0x784 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     77e:	86 2f       	mov	r24, r22
     780:	93 2f       	mov	r25, r19
     782:	e1 cf       	rjmp	.-62     	; 0x746 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     784:	78 94       	sei
     786:	08 95       	ret

00000788 <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
     788:	cf 93       	push	r28
     78a:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
     78c:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     790:	18 96       	adiw	r26, 0x08	; 8
     792:	3c 91       	ld	r19, X
     794:	18 97       	sbiw	r26, 0x08	; 8
     796:	fc 01       	movw	r30, r24
     798:	ac 01       	movw	r20, r24
     79a:	48 5f       	subi	r20, 0xF8	; 248
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
     79e:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     7a0:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     7a2:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
     7a4:	89 2f       	mov	r24, r25
     7a6:	86 23       	and	r24, r22
     7a8:	41 f0       	breq	.+16     	; 0x7ba <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
     7ae:	81 38       	cpi	r24, 0x81	; 129
     7b0:	10 f4       	brcc	.+4      	; 0x7b6 <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
     7b2:	80 83       	st	Z, r24
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     7b6:	70 83       	st	Z, r23
     7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
     7ba:	80 81       	ld	r24, Z
     7bc:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
     7be:	11 f0       	breq	.+4      	; 0x7c4 <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
     7c0:	80 83       	st	Z, r24
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     7c4:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     7c6:	81 91       	ld	r24, Z+
     7c8:	38 17       	cp	r19, r24
     7ca:	40 f4       	brcc	.+16     	; 0x7dc <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
     7cc:	19 96       	adiw	r26, 0x09	; 9
     7ce:	8c 91       	ld	r24, X
     7d0:	19 97       	sbiw	r26, 0x09	; 9
     7d2:	89 2b       	or	r24, r25
     7d4:	19 96       	adiw	r26, 0x09	; 9
     7d6:	8c 93       	st	X, r24
     7d8:	19 97       	sbiw	r26, 0x09	; 9
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
     7dc:	19 96       	adiw	r26, 0x09	; 9
     7de:	8c 91       	ld	r24, X
     7e0:	19 97       	sbiw	r26, 0x09	; 9
     7e2:	29 2f       	mov	r18, r25
     7e4:	20 95       	com	r18
     7e6:	28 23       	and	r18, r24
     7e8:	19 96       	adiw	r26, 0x09	; 9
     7ea:	2c 93       	st	X, r18
     7ec:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
     7ee:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
     7f0:	e4 17       	cp	r30, r20
     7f2:	f5 07       	cpc	r31, r21
     7f4:	b9 f6       	brne	.-82     	; 0x7a4 <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
     7fa:	fc 01       	movw	r30, r24
     7fc:	81 85       	ldd	r24, Z+9	; 0x09
     7fe:	81 70       	andi	r24, 0x01	; 1
     800:	08 95       	ret

00000802 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     802:	08 95       	ret

00000804 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
		}
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     804:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     806:	63 30       	cpi	r22, 0x03	; 3
     808:	29 f4       	brne	.+10     	; 0x814 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     80a:	fa 01       	movw	r30, r20
     80c:	81 81       	ldd	r24, Z+1	; 0x01
     80e:	1e 96       	adiw	r26, 0x0e	; 14
     810:	8c 93       	st	X, r24
     812:	1e 97       	sbiw	r26, 0x0e	; 14
	
	switch (PIC_ID)
     814:	1e 96       	adiw	r26, 0x0e	; 14
     816:	4c 91       	ld	r20, X
     818:	1e 97       	sbiw	r26, 0x0e	; 14
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	44 31       	cpi	r20, 0x14	; 20
     81e:	51 05       	cpc	r21, r1
     820:	08 f0       	brcs	.+2      	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     822:	6e c0       	rjmp	.+220    	; 0x900 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     824:	fa 01       	movw	r30, r20
     826:	88 27       	eor	r24, r24
     828:	ec 50       	subi	r30, 0x0C	; 12
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	8f 4f       	sbci	r24, 0xFF	; 255
     82e:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     832:	1c 96       	adiw	r26, 0x0c	; 12
     834:	1c 92       	st	X, r1
		break;
     836:	08 95       	ret
		case PICID_WORKFAST:
			state = APP_WORKFAST;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	1c 96       	adiw	r26, 0x0c	; 12
     83c:	8c 93       	st	X, r24
     83e:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkFast)
     840:	1d 96       	adiw	r26, 0x0d	; 13
     842:	8c 91       	ld	r24, X
     844:	1d 97       	sbiw	r26, 0x0d	; 13
     846:	88 23       	and	r24, r24
     848:	09 f4       	brne	.+2      	; 0x84c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     84a:	72 c0       	rjmp	.+228    	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				profile = WorkFast;
     84c:	1d 96       	adiw	r26, 0x0d	; 13
     84e:	1c 92       	st	X, r1
     850:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	1f 96       	adiw	r26, 0x0f	; 15
     856:	8c 93       	st	X, r24
     858:	08 95       	ret
			}
		break;
		case PICID_WORKMEDIUM:
			state = APP_WORKMEDIUM;
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	1c 96       	adiw	r26, 0x0c	; 12
     85e:	8c 93       	st	X, r24
     860:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkMedium)
     862:	1d 96       	adiw	r26, 0x0d	; 13
     864:	8c 91       	ld	r24, X
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f4       	brne	.+2      	; 0x86e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     86c:	61 c0       	rjmp	.+194    	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				profile = WorkMedium;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	1d 96       	adiw	r26, 0x0d	; 13
     872:	8c 93       	st	X, r24
     874:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     876:	1f 96       	adiw	r26, 0x0f	; 15
     878:	8c 93       	st	X, r24
     87a:	08 95       	ret
			}
		break;
		case PICID_WORKSLOW:
			state = APP_WORKSLOW;
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	1c 96       	adiw	r26, 0x0c	; 12
     880:	8c 93       	st	X, r24
     882:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkSlow)
     884:	1d 96       	adiw	r26, 0x0d	; 13
     886:	8c 91       	ld	r24, X
     888:	1d 97       	sbiw	r26, 0x0d	; 13
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	09 f4       	brne	.+2      	; 0x890 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     88e:	50 c0       	rjmp	.+160    	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				profile = WorkSlow;
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	1d 96       	adiw	r26, 0x0d	; 13
     894:	8c 93       	st	X, r24
     896:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	1f 96       	adiw	r26, 0x0f	; 15
     89c:	8c 93       	st	X, r24
     89e:	08 95       	ret
			}
		break;
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	1c 96       	adiw	r26, 0x0c	; 12
     8a4:	8c 93       	st	X, r24
		break;
     8a6:	08 95       	ret
		case PICID_WORKOnStart:
			state = APP_WORKOnStart;
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	1c 96       	adiw	r26, 0x0c	; 12
     8ac:	8c 93       	st	X, r24
		break;
     8ae:	08 95       	ret
		case PICID_WORKOnStop:
			state = APP_WORKOnStop;
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	1c 96       	adiw	r26, 0x0c	; 12
     8b4:	8c 93       	st	X, r24
		break;
     8b6:	08 95       	ret
		case PICID_WORKSTART:
			state = APP_WORKSTART;
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	1c 96       	adiw	r26, 0x0c	; 12
     8bc:	8c 93       	st	X, r24
		break;
     8be:	08 95       	ret
		case PICID_WORKSTARTED:
			state = APP_WORKSTARTED;
     8c0:	85 e0       	ldi	r24, 0x05	; 5
     8c2:	1c 96       	adiw	r26, 0x0c	; 12
     8c4:	8c 93       	st	X, r24
		break;
     8c6:	08 95       	ret
		case PICID_PHOTOTYPESELECT:
			state = APP_PHOTOTYPESELECT;
     8c8:	89 e0       	ldi	r24, 0x09	; 9
     8ca:	1c 96       	adiw	r26, 0x0c	; 12
     8cc:	8c 93       	st	X, r24
		break;
     8ce:	08 95       	ret
		case PICID_PHOTOTYPE1:
			state = APP_PHOTOTYPE1;
     8d0:	8a e0       	ldi	r24, 0x0A	; 10
     8d2:	1c 96       	adiw	r26, 0x0c	; 12
     8d4:	8c 93       	st	X, r24
		break;
     8d6:	08 95       	ret
		case PICID_PHOTOTYPE2:
			state = APP_PHOTOTYPE2;
     8d8:	8b e0       	ldi	r24, 0x0B	; 11
     8da:	1c 96       	adiw	r26, 0x0c	; 12
     8dc:	8c 93       	st	X, r24
		break;
     8de:	08 95       	ret
		case PICID_PHOTOTYPE3:
			state = APP_PHOTOTYPE3;
     8e0:	8c e0       	ldi	r24, 0x0C	; 12
     8e2:	1c 96       	adiw	r26, 0x0c	; 12
     8e4:	8c 93       	st	X, r24
		break;
     8e6:	08 95       	ret
		case PICID_PHOTOTYPE4:
			state = APP_PHOTOTYPE4;
     8e8:	8d e0       	ldi	r24, 0x0D	; 13
     8ea:	1c 96       	adiw	r26, 0x0c	; 12
     8ec:	8c 93       	st	X, r24
		break;
     8ee:	08 95       	ret
		case PICID_PHOTOTYPE5:
			state = APP_PHOTOTYPE5;
     8f0:	8e e0       	ldi	r24, 0x0E	; 14
     8f2:	1c 96       	adiw	r26, 0x0c	; 12
     8f4:	8c 93       	st	X, r24
		break;
     8f6:	08 95       	ret
		case PICID_PHOTOTYPE6:
			state = APP_PHOTOTYPE6;
     8f8:	8f e0       	ldi	r24, 0x0F	; 15
     8fa:	1c 96       	adiw	r26, 0x0c	; 12
     8fc:	8c 93       	st	X, r24
		break;
     8fe:	08 95       	ret
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID < PICID_DATABASE_MAX)
     900:	1e 96       	adiw	r26, 0x0e	; 14
     902:	8c 91       	ld	r24, X
     904:	1e 97       	sbiw	r26, 0x0e	; 14
     906:	88 31       	cpi	r24, 0x18	; 24
     908:	28 f0       	brcs	.+10     	; 0x914 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x110>
     90a:	1e 96       	adiw	r26, 0x0e	; 14
     90c:	8c 91       	ld	r24, X
     90e:	1e 97       	sbiw	r26, 0x0e	; 14
     910:	89 32       	cpi	r24, 0x29	; 41
     912:	48 f0       	brcs	.+18     	; 0x926 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x122>
			{
				state = APP_DATABASE;
			}
			if (PIC_ID == PICID_DATABASE_MAX)
     914:	1e 96       	adiw	r26, 0x0e	; 14
     916:	8c 91       	ld	r24, X
     918:	1e 97       	sbiw	r26, 0x0e	; 14
     91a:	89 32       	cpi	r24, 0x29	; 41
     91c:	49 f4       	brne	.+18     	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				state = APP_DATABASE_START;
     91e:	81 e1       	ldi	r24, 0x11	; 17
     920:	1c 96       	adiw	r26, 0x0c	; 12
     922:	8c 93       	st	X, r24
     924:	08 95       	ret
		break;
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID < PICID_DATABASE_MAX)
			{
				state = APP_DATABASE;
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	1c 96       	adiw	r26, 0x0c	; 12
     92a:	8c 93       	st	X, r24
     92c:	1c 97       	sbiw	r26, 0x0c	; 12
     92e:	f2 cf       	rjmp	.-28     	; 0x914 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x110>
     930:	08 95       	ret

00000932 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     932:	08 95       	ret

00000934 <_Z11ConvertDataPvS_jj>:
{
	return (data >> 8) | (data << 8);
}

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	7c 01       	movw	r14, r24
     946:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     948:	41 15       	cp	r20, r1
     94a:	51 05       	cpc	r21, r1
     94c:	b1 f0       	breq	.+44     	; 0x97a <_Z11ConvertDataPvS_jj+0x46>
     94e:	6b 01       	movw	r12, r22
     950:	c4 0e       	add	r12, r20
     952:	d5 1e       	adc	r13, r21
     954:	eb 01       	movw	r28, r22
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	c9 01       	movw	r24, r18
     95c:	8c 0f       	add	r24, r28
     95e:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     960:	b8 01       	movw	r22, r16
     962:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
     966:	fc 01       	movw	r30, r24
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	e4 27       	eor	r30, r20
     96c:	ee 0d       	add	r30, r14
     96e:	ff 1d       	adc	r31, r15
     970:	89 91       	ld	r24, Y+
     972:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     974:	cc 15       	cp	r28, r12
     976:	dd 05       	cpc	r29, r13
     978:	81 f7       	brne	.-32     	; 0x95a <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	if (addr == VARIABLE_ADDR_PROFINDEX)
     98c:	67 30       	cpi	r22, 0x07	; 7
     98e:	71 05       	cpc	r23, r1
     990:	51 f4       	brne	.+20     	; 0x9a6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1a>
volatile DGUS_DATA m_structDGUSDATA_Medium;
volatile DGUS_DATA m_structDGUSDATA_Slow;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     992:	fa 01       	movw	r30, r20
     994:	20 81       	ld	r18, Z
     996:	31 81       	ldd	r19, Z+1	; 0x01
     998:	32 27       	eor	r19, r18
     99a:	23 27       	eor	r18, r19
     99c:	32 27       	eor	r19, r18
{
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	if (addr == VARIABLE_ADDR_PROFINDEX)
	{
		profileIndex = swap(*((uint16_t*)data));
     99e:	fc 01       	movw	r30, r24
     9a0:	20 8f       	std	Z+24, r18	; 0x18
     9a2:	31 8f       	std	Z+25, r19	; 0x19
     9a4:	08 95       	ret
	}
	
	if (addr == STRUCT_ADDR_DATA)
     9a6:	61 30       	cpi	r22, 0x01	; 1
     9a8:	71 05       	cpc	r23, r1
     9aa:	29 f5       	brne	.+74     	; 0x9f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     9ac:	f9 01       	movw	r30, r18
     9ae:	ba 01       	movw	r22, r20
     9b0:	dc 01       	movw	r26, r24
	{
		//memcpy((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		switch (profile)
     9b2:	1d 96       	adiw	r26, 0x0d	; 13
     9b4:	8c 91       	ld	r24, X
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	a1 f0       	breq	.+40     	; 0x9e2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x56>
     9ba:	18 f0       	brcs	.+6      	; 0x9c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x36>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	49 f0       	breq	.+18     	; 0x9d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     9c0:	18 c0       	rjmp	.+48     	; 0x9f2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x66>
		{
			case WorkFast:
				ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	af 01       	movw	r20, r30
     9c8:	85 e7       	ldi	r24, 0x75	; 117
     9ca:	91 e2       	ldi	r25, 0x21	; 33
     9cc:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
			break;
     9d0:	08 95       	ret
			case WorkSlow:
				ConvertData((void*)&m_structDGUSDATA_Slow, (void*)data, length);
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	af 01       	movw	r20, r30
     9d8:	89 e5       	ldi	r24, 0x59	; 89
     9da:	91 e2       	ldi	r25, 0x21	; 33
     9dc:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
			break;
     9e0:	08 95       	ret
			case WorkMedium:
				ConvertData((void*)&m_structDGUSDATA_Medium, (void*)data, length);
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	af 01       	movw	r20, r30
     9e8:	87 e6       	ldi	r24, 0x67	; 103
     9ea:	91 e2       	ldi	r25, 0x21	; 33
     9ec:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
			break;
     9f0:	08 95       	ret
			default:
				// Error
				CLaserBoard::Beep();
     9f2:	0e 94 82 03 	call	0x704	; 0x704 <_ZN11CLaserBoard4BeepEv>
     9f6:	08 95       	ret

000009f8 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     9f8:	24 ea       	ldi	r18, 0xA4	; 164
     9fa:	30 e2       	ldi	r19, 0x20	; 32
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
     a00:	31 83       	std	Z+1, r19	; 0x01
     a02:	08 95       	ret

00000a04 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     a04:	24 ea       	ldi	r18, 0xA4	; 164
     a06:	30 e2       	ldi	r19, 0x20	; 32
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
     a0c:	31 83       	std	Z+1, r19	; 0x01
     a0e:	0e 94 04 26 	call	0x4c08	; 0x4c08 <_ZN16CMBEventsHandlerD1Ev>
     a12:	08 95       	ret

00000a14 <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = WorkFast;
}

void CLaserControlApp::Start()
{	
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	94 e1       	ldi	r25, 0x14	; 20
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a2e:	22 e0       	ldi	r18, 0x02	; 2
     a30:	ae 01       	movw	r20, r28
     a32:	4f 5f       	subi	r20, 0xFF	; 255
     a34:	5f 4f       	sbci	r21, 0xFF	; 255
     a36:	63 e0       	ldi	r22, 0x03	; 3
     a38:	f8 01       	movw	r30, r16
     a3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a3c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a3e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     a42:	f8 01       	movw	r30, r16
     a44:	82 8d       	ldd	r24, Z+26	; 0x1a
     a46:	93 8d       	ldd	r25, Z+27	; 0x1b
     a48:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(m_structDGUSDATA_Fast));
     a4c:	2e e0       	ldi	r18, 0x0E	; 14
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	45 e7       	ldi	r20, 0x75	; 117
     a52:	51 e2       	ldi	r21, 0x21	; 33
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	f8 01       	movw	r30, r16
     a5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a5c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a5e:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     a62:	f8 01       	movw	r30, r16
     a64:	82 8d       	ldd	r24, Z+26	; 0x1a
     a66:	93 8d       	ldd	r25, Z+27	; 0x1b
     a68:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	f8 01       	movw	r30, r16
     a70:	84 87       	std	Z+12, r24	; 0x0c
}
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     a80:	fc 01       	movw	r30, r24
     a82:	44 89       	ldd	r20, Z+20	; 0x14
     a84:	55 89       	ldd	r21, Z+21	; 0x15
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	68 ee       	ldi	r22, 0xE8	; 232
     a8e:	73 e0       	ldi	r23, 0x03	; 3
     a90:	83 e9       	ldi	r24, 0x93	; 147
     a92:	93 e2       	ldi	r25, 0x23	; 35
     a94:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     a98:	83 e9       	ldi	r24, 0x93	; 147
     a9a:	93 e2       	ldi	r25, 0x23	; 35
     a9c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN12CSoundPlayer9SoundStopEv>
     aa0:	08 95       	ret

00000aa2 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     aa2:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN16CLaserControlApp12OnLaserTimerEv>
     aa6:	08 95       	ret

00000aa8 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     aa8:	86 e8       	ldi	r24, 0x86	; 134
     aaa:	91 e2       	ldi	r25, 0x21	; 33
     aac:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     ab0:	83 e8       	ldi	r24, 0x83	; 131
     ab2:	91 e2       	ldi	r25, 0x21	; 33
     ab4:	0e 94 2c 10 	call	0x2058	; 0x2058 <_ZN7CTimerFC1Ev>
     ab8:	08 95       	ret

00000aba <_GLOBAL__sub_D_timer>:
     aba:	83 e8       	ldi	r24, 0x83	; 131
     abc:	91 e2       	ldi	r25, 0x21	; 33
     abe:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     ac2:	86 e8       	ldi	r24, 0x86	; 134
     ac4:	91 e2       	ldi	r25, 0x21	; 33
     ac6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN7CTimerCD1Ev>
     aca:	08 95       	ret

00000acc <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	8c 01       	movw	r16, r24
	// GUI class initialization
	m_cpSender = sender;
     ae6:	dc 01       	movw	r26, r24
     ae8:	5a 96       	adiw	r26, 0x1a	; 26
     aea:	6d 93       	st	X+, r22
     aec:	7c 93       	st	X, r23
     aee:	5b 97       	sbiw	r26, 0x1b	; 27
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     af0:	46 e0       	ldi	r20, 0x06	; 6
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	86 e8       	ldi	r24, 0x86	; 134
     af6:	91 e2       	ldi	r25, 0x21	; 33
     af8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     afc:	68 ea       	ldi	r22, 0xA8	; 168
     afe:	71 e6       	ldi	r23, 0x61	; 97
     b00:	86 e8       	ldi	r24, 0x86	; 134
     b02:	91 e2       	ldi	r25, 0x21	; 33
     b04:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	a8 01       	movw	r20, r16
     b0c:	69 e9       	ldi	r22, 0x99	; 153
     b0e:	74 e0       	ldi	r23, 0x04	; 4
     b10:	86 e8       	ldi	r24, 0x86	; 134
     b12:	91 e2       	ldi	r25, 0x21	; 33
     b14:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     b18:	f8 01       	movw	r30, r16
     b1a:	16 86       	std	Z+14, r1	; 0x0e
	update = false;
     b1c:	17 86       	std	Z+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA_Fast.Frequency = 10; // 10 Hz
     b1e:	e5 e7       	ldi	r30, 0x75	; 117
     b20:	f1 e2       	ldi	r31, 0x21	; 33
     b22:	8a e0       	ldi	r24, 0x0A	; 10
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	80 83       	st	Z, r24
     b28:	91 83       	std	Z+1, r25	; 0x01
	m_structDGUSDATA_Fast.DutyCycle = 50; // 50%
     b2a:	0f 2e       	mov	r0, r31
     b2c:	f2 e3       	ldi	r31, 0x32	; 50
     b2e:	af 2e       	mov	r10, r31
     b30:	b1 2c       	mov	r11, r1
     b32:	f0 2d       	mov	r31, r0
     b34:	a2 86       	std	Z+10, r10	; 0x0a
     b36:	b3 86       	std	Z+11, r11	; 0x0b
	m_structDGUSDATA_Fast.Duration  = ((1000 / m_structDGUSDATA_Fast.Frequency) * m_structDGUSDATA_Fast.DutyCycle) / 100; // ms
     b38:	60 81       	ld	r22, Z
     b3a:	71 81       	ldd	r23, Z+1	; 0x01
     b3c:	c2 85       	ldd	r28, Z+10	; 0x0a
     b3e:	d3 85       	ldd	r29, Z+11	; 0x0b
     b40:	0f 2e       	mov	r0, r31
     b42:	f8 ee       	ldi	r31, 0xE8	; 232
     b44:	cf 2e       	mov	r12, r31
     b46:	f3 e0       	ldi	r31, 0x03	; 3
     b48:	df 2e       	mov	r13, r31
     b4a:	f0 2d       	mov	r31, r0
     b4c:	c6 01       	movw	r24, r12
     b4e:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
     b52:	6c 9f       	mul	r22, r28
     b54:	90 01       	movw	r18, r0
     b56:	6d 9f       	mul	r22, r29
     b58:	30 0d       	add	r19, r0
     b5a:	7c 9f       	mul	r23, r28
     b5c:	30 0d       	add	r19, r0
     b5e:	11 24       	eor	r1, r1
     b60:	36 95       	lsr	r19
     b62:	27 95       	ror	r18
     b64:	36 95       	lsr	r19
     b66:	27 95       	ror	r18
     b68:	ab e7       	ldi	r26, 0x7B	; 123
     b6a:	b4 e1       	ldi	r27, 0x14	; 20
     b6c:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     b70:	96 95       	lsr	r25
     b72:	87 95       	ror	r24
     b74:	82 83       	std	Z+2, r24	; 0x02
     b76:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Fast.Intensity = 200; // W
     b78:	0f 2e       	mov	r0, r31
     b7a:	f8 ec       	ldi	r31, 0xC8	; 200
     b7c:	ef 2e       	mov	r14, r31
     b7e:	f1 2c       	mov	r15, r1
     b80:	f0 2d       	mov	r31, r0
     b82:	e4 82       	std	Z+4, r14	; 0x04
     b84:	f5 82       	std	Z+5, r15	; 0x05
	m_structDGUSDATA_Fast.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100; // W
     b86:	84 81       	ldd	r24, Z+4	; 0x04
     b88:	95 81       	ldd	r25, Z+5	; 0x05
     b8a:	42 85       	ldd	r20, Z+10	; 0x0a
     b8c:	53 85       	ldd	r21, Z+11	; 0x0b
     b8e:	48 9f       	mul	r20, r24
     b90:	90 01       	movw	r18, r0
     b92:	49 9f       	mul	r20, r25
     b94:	30 0d       	add	r19, r0
     b96:	58 9f       	mul	r21, r24
     b98:	30 0d       	add	r19, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	36 95       	lsr	r19
     b9e:	27 95       	ror	r18
     ba0:	36 95       	lsr	r19
     ba2:	27 95       	ror	r18
     ba4:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     ba8:	96 95       	lsr	r25
     baa:	87 95       	ror	r24
     bac:	86 83       	std	Z+6, r24	; 0x06
     bae:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Fast.Energy    = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration) / 1000; // J
     bb0:	84 81       	ldd	r24, Z+4	; 0x04
     bb2:	95 81       	ldd	r25, Z+5	; 0x05
     bb4:	42 81       	ldd	r20, Z+2	; 0x02
     bb6:	53 81       	ldd	r21, Z+3	; 0x03
     bb8:	48 9f       	mul	r20, r24
     bba:	90 01       	movw	r18, r0
     bbc:	49 9f       	mul	r20, r25
     bbe:	30 0d       	add	r19, r0
     bc0:	58 9f       	mul	r21, r24
     bc2:	30 0d       	add	r19, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	36 95       	lsr	r19
     bc8:	27 95       	ror	r18
     bca:	36 95       	lsr	r19
     bcc:	27 95       	ror	r18
     bce:	36 95       	lsr	r19
     bd0:	27 95       	ror	r18
     bd2:	a5 ec       	ldi	r26, 0xC5	; 197
     bd4:	b0 e2       	ldi	r27, 0x20	; 32
     bd6:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     bda:	92 95       	swap	r25
     bdc:	82 95       	swap	r24
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	89 27       	eor	r24, r25
     be2:	9f 70       	andi	r25, 0x0F	; 15
     be4:	89 27       	eor	r24, r25
     be6:	80 87       	std	Z+8, r24	; 0x08
     be8:	91 87       	std	Z+9, r25	; 0x09
	
	// Slow profile
	m_structDGUSDATA_Slow.Frequency = 1; // 10 Hz
     bea:	c9 e5       	ldi	r28, 0x59	; 89
     bec:	d1 e2       	ldi	r29, 0x21	; 33
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 83       	st	Y, r24
     bf4:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Slow.DutyCycle = 50; // 50%
     bf6:	aa 86       	std	Y+10, r10	; 0x0a
     bf8:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Slow.Duration  = ((1000 / m_structDGUSDATA_Slow.Frequency) * m_structDGUSDATA_Slow.DutyCycle) / 100; // ms
     bfa:	68 81       	ld	r22, Y
     bfc:	79 81       	ldd	r23, Y+1	; 0x01
     bfe:	8a 84       	ldd	r8, Y+10	; 0x0a
     c00:	9b 84       	ldd	r9, Y+11	; 0x0b
     c02:	c6 01       	movw	r24, r12
     c04:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
     c08:	68 9d       	mul	r22, r8
     c0a:	90 01       	movw	r18, r0
     c0c:	69 9d       	mul	r22, r9
     c0e:	30 0d       	add	r19, r0
     c10:	78 9d       	mul	r23, r8
     c12:	30 0d       	add	r19, r0
     c14:	11 24       	eor	r1, r1
     c16:	36 95       	lsr	r19
     c18:	27 95       	ror	r18
     c1a:	36 95       	lsr	r19
     c1c:	27 95       	ror	r18
     c1e:	ab e7       	ldi	r26, 0x7B	; 123
     c20:	b4 e1       	ldi	r27, 0x14	; 20
     c22:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     c26:	96 95       	lsr	r25
     c28:	87 95       	ror	r24
     c2a:	8a 83       	std	Y+2, r24	; 0x02
     c2c:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Slow.Intensity = 200; // W
     c2e:	ec 82       	std	Y+4, r14	; 0x04
     c30:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Slow.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100; // W
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	9d 81       	ldd	r25, Y+5	; 0x05
     c36:	4a 85       	ldd	r20, Y+10	; 0x0a
     c38:	5b 85       	ldd	r21, Y+11	; 0x0b
     c3a:	48 9f       	mul	r20, r24
     c3c:	90 01       	movw	r18, r0
     c3e:	49 9f       	mul	r20, r25
     c40:	30 0d       	add	r19, r0
     c42:	58 9f       	mul	r21, r24
     c44:	30 0d       	add	r19, r0
     c46:	11 24       	eor	r1, r1
     c48:	36 95       	lsr	r19
     c4a:	27 95       	ror	r18
     c4c:	36 95       	lsr	r19
     c4e:	27 95       	ror	r18
     c50:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	8e 83       	std	Y+6, r24	; 0x06
     c5a:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Slow.Energy    = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration) / 1000; // J
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	4a 81       	ldd	r20, Y+2	; 0x02
     c62:	5b 81       	ldd	r21, Y+3	; 0x03
     c64:	48 9f       	mul	r20, r24
     c66:	90 01       	movw	r18, r0
     c68:	49 9f       	mul	r20, r25
     c6a:	30 0d       	add	r19, r0
     c6c:	58 9f       	mul	r21, r24
     c6e:	30 0d       	add	r19, r0
     c70:	11 24       	eor	r1, r1
     c72:	36 95       	lsr	r19
     c74:	27 95       	ror	r18
     c76:	36 95       	lsr	r19
     c78:	27 95       	ror	r18
     c7a:	36 95       	lsr	r19
     c7c:	27 95       	ror	r18
     c7e:	a5 ec       	ldi	r26, 0xC5	; 197
     c80:	b0 e2       	ldi	r27, 0x20	; 32
     c82:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     c86:	92 95       	swap	r25
     c88:	82 95       	swap	r24
     c8a:	8f 70       	andi	r24, 0x0F	; 15
     c8c:	89 27       	eor	r24, r25
     c8e:	9f 70       	andi	r25, 0x0F	; 15
     c90:	89 27       	eor	r24, r25
     c92:	88 87       	std	Y+8, r24	; 0x08
     c94:	99 87       	std	Y+9, r25	; 0x09
	
	// Medium profile
	m_structDGUSDATA_Medium.Frequency = 5; // 10 Hz
     c96:	c7 e6       	ldi	r28, 0x67	; 103
     c98:	d1 e2       	ldi	r29, 0x21	; 33
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	88 83       	st	Y, r24
     ca0:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Medium.DutyCycle = 50; // 50%
     ca2:	aa 86       	std	Y+10, r10	; 0x0a
     ca4:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Medium.Duration  = ((1000 / m_structDGUSDATA_Medium.Frequency) * m_structDGUSDATA_Medium.DutyCycle) / 100; // ms
     ca6:	68 81       	ld	r22, Y
     ca8:	79 81       	ldd	r23, Y+1	; 0x01
     caa:	aa 84       	ldd	r10, Y+10	; 0x0a
     cac:	bb 84       	ldd	r11, Y+11	; 0x0b
     cae:	c6 01       	movw	r24, r12
     cb0:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
     cb4:	6a 9d       	mul	r22, r10
     cb6:	90 01       	movw	r18, r0
     cb8:	6b 9d       	mul	r22, r11
     cba:	30 0d       	add	r19, r0
     cbc:	7a 9d       	mul	r23, r10
     cbe:	30 0d       	add	r19, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	36 95       	lsr	r19
     cc4:	27 95       	ror	r18
     cc6:	36 95       	lsr	r19
     cc8:	27 95       	ror	r18
     cca:	ab e7       	ldi	r26, 0x7B	; 123
     ccc:	b4 e1       	ldi	r27, 0x14	; 20
     cce:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	8a 83       	std	Y+2, r24	; 0x02
     cd8:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Medium.Intensity = 200; // W
     cda:	ec 82       	std	Y+4, r14	; 0x04
     cdc:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Medium.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100; // W
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	9d 81       	ldd	r25, Y+5	; 0x05
     ce2:	4a 85       	ldd	r20, Y+10	; 0x0a
     ce4:	5b 85       	ldd	r21, Y+11	; 0x0b
     ce6:	48 9f       	mul	r20, r24
     ce8:	90 01       	movw	r18, r0
     cea:	49 9f       	mul	r20, r25
     cec:	30 0d       	add	r19, r0
     cee:	58 9f       	mul	r21, r24
     cf0:	30 0d       	add	r19, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	36 95       	lsr	r19
     cf6:	27 95       	ror	r18
     cf8:	36 95       	lsr	r19
     cfa:	27 95       	ror	r18
     cfc:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	8e 83       	std	Y+6, r24	; 0x06
     d06:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Medium.Energy    = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration) / 1000; // J
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	4a 81       	ldd	r20, Y+2	; 0x02
     d0e:	5b 81       	ldd	r21, Y+3	; 0x03
     d10:	48 9f       	mul	r20, r24
     d12:	90 01       	movw	r18, r0
     d14:	49 9f       	mul	r20, r25
     d16:	30 0d       	add	r19, r0
     d18:	58 9f       	mul	r21, r24
     d1a:	30 0d       	add	r19, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	36 95       	lsr	r19
     d20:	27 95       	ror	r18
     d22:	36 95       	lsr	r19
     d24:	27 95       	ror	r18
     d26:	36 95       	lsr	r19
     d28:	27 95       	ror	r18
     d2a:	a5 ec       	ldi	r26, 0xC5	; 197
     d2c:	b0 e2       	ldi	r27, 0x20	; 32
     d2e:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     d32:	92 95       	swap	r25
     d34:	82 95       	swap	r24
     d36:	8f 70       	andi	r24, 0x0F	; 15
     d38:	89 27       	eor	r24, r25
     d3a:	9f 70       	andi	r25, 0x0F	; 15
     d3c:	89 27       	eor	r24, r25
     d3e:	88 87       	std	Y+8, r24	; 0x08
     d40:	99 87       	std	Y+9, r25	; 0x09
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
     d42:	60 81       	ld	r22, Z
     d44:	71 81       	ldd	r23, Z+1	; 0x01
     d46:	8a e6       	ldi	r24, 0x6A	; 106
     d48:	98 e1       	ldi	r25, 0x18	; 24
     d4a:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
     d4e:	ab 01       	movw	r20, r22
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	66 0f       	add	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	46 0f       	add	r20, r22
     d62:	57 1f       	adc	r21, r23
     d64:	d8 01       	movw	r26, r16
     d66:	50 96       	adiw	r26, 0x10	; 16
     d68:	4d 93       	st	X+, r20
     d6a:	5c 93       	st	X, r21
     d6c:	51 97       	sbiw	r26, 0x11	; 17
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA_Fast.DutyCycle);
     d6e:	02 84       	ldd	r0, Z+10	; 0x0a
     d70:	f3 85       	ldd	r31, Z+11	; 0x0b
     d72:	e0 2d       	mov	r30, r0
     d74:	9a 01       	movw	r18, r20
     d76:	36 95       	lsr	r19
     d78:	27 95       	ror	r18
     d7a:	36 95       	lsr	r19
     d7c:	27 95       	ror	r18
     d7e:	ab e7       	ldi	r26, 0x7B	; 123
     d80:	b4 e1       	ldi	r27, 0x14	; 20
     d82:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     d86:	96 95       	lsr	r25
     d88:	87 95       	ror	r24
     d8a:	8e 9f       	mul	r24, r30
     d8c:	90 01       	movw	r18, r0
     d8e:	8f 9f       	mul	r24, r31
     d90:	30 0d       	add	r19, r0
     d92:	9e 9f       	mul	r25, r30
     d94:	30 0d       	add	r19, r0
     d96:	11 24       	eor	r1, r1
     d98:	42 1b       	sub	r20, r18
     d9a:	53 0b       	sbc	r21, r19
     d9c:	f8 01       	movw	r30, r16
     d9e:	42 8b       	std	Z+18, r20	; 0x12
     da0:	53 8b       	std	Z+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     da2:	47 e0       	ldi	r20, 0x07	; 7
     da4:	63 e0       	ldi	r22, 0x03	; 3
     da6:	83 e8       	ldi	r24, 0x83	; 131
     da8:	91 e2       	ldi	r25, 0x21	; 33
     daa:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     dae:	d8 01       	movw	r26, r16
     db0:	50 96       	adiw	r26, 0x10	; 16
     db2:	6d 91       	ld	r22, X+
     db4:	7c 91       	ld	r23, X
     db6:	51 97       	sbiw	r26, 0x11	; 17
     db8:	83 e8       	ldi	r24, 0x83	; 131
     dba:	91 e2       	ldi	r25, 0x21	; 33
     dbc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     dc0:	f8 01       	movw	r30, r16
     dc2:	62 89       	ldd	r22, Z+18	; 0x12
     dc4:	73 89       	ldd	r23, Z+19	; 0x13
     dc6:	83 e8       	ldi	r24, 0x83	; 131
     dc8:	91 e2       	ldi	r25, 0x21	; 33
     dca:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     dce:	d8 01       	movw	r26, r16
     dd0:	52 96       	adiw	r26, 0x12	; 18
     dd2:	6d 91       	ld	r22, X+
     dd4:	7c 91       	ld	r23, X
     dd6:	53 97       	sbiw	r26, 0x13	; 19
     dd8:	83 e8       	ldi	r24, 0x83	; 131
     dda:	91 e2       	ldi	r25, 0x21	; 33
     ddc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	a8 01       	movw	r20, r16
     de4:	61 e5       	ldi	r22, 0x51	; 81
     de6:	75 e0       	ldi	r23, 0x05	; 5
     de8:	83 e8       	ldi	r24, 0x83	; 131
     dea:	91 e2       	ldi	r25, 0x21	; 33
     dec:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     df0:	60 e1       	ldi	r22, 0x10	; 16
     df2:	83 e8       	ldi	r24, 0x83	; 131
     df4:	91 e2       	ldi	r25, 0x21	; 33
     df6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     dfa:	60 e2       	ldi	r22, 0x20	; 32
     dfc:	83 e8       	ldi	r24, 0x83	; 131
     dfe:	91 e2       	ldi	r25, 0x21	; 33
     e00:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     e04:	60 e1       	ldi	r22, 0x10	; 16
     e06:	83 e8       	ldi	r24, 0x83	; 131
     e08:	91 e2       	ldi	r25, 0x21	; 33
     e0a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     e0e:	60 e2       	ldi	r22, 0x20	; 32
     e10:	83 e8       	ldi	r24, 0x83	; 131
     e12:	91 e2       	ldi	r25, 0x21	; 33
     e14:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = WorkFast;
     e18:	f8 01       	movw	r30, r16
     e1a:	15 86       	std	Z+13, r1	; 0x0d
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	08 95       	ret

00000e36 <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKFAST;
}

// Process GUI
void CLaserControlApp::Run()
{
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	c2 5c       	subi	r28, 0xC2	; 194
     e48:	d3 40       	sbci	r29, 0x03	; 3
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	8c 01       	movw	r16, r24
	static uint8_t DatabaseSelectedProfile = 0;
	
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     e50:	42 e0       	ldi	r20, 0x02	; 2
     e52:	63 e0       	ldi	r22, 0x03	; 3
     e54:	dc 01       	movw	r26, r24
     e56:	5a 96       	adiw	r26, 0x1a	; 26
     e58:	8d 91       	ld	r24, X+
     e5a:	9c 91       	ld	r25, X
     e5c:	5b 97       	sbiw	r26, 0x1b	; 27
     e5e:	0e 94 07 28 	call	0x500e	; 0x500e <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     e62:	f8 01       	movw	r30, r16
     e64:	82 8d       	ldd	r24, Z+26	; 0x1a
     e66:	93 8d       	ldd	r25, Z+27	; 0x1b
     e68:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     e6c:	d8 01       	movw	r26, r16
     e6e:	5a 96       	adiw	r26, 0x1a	; 26
     e70:	8d 91       	ld	r24, X+
     e72:	9c 91       	ld	r25, X
     e74:	5b 97       	sbiw	r26, 0x1b	; 27
     e76:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <_ZN9CMBSender18WaitMODBUSListenerEv>
     e7a:	bf ef       	ldi	r27, 0xFF	; 255
     e7c:	e1 ee       	ldi	r30, 0xE1	; 225
     e7e:	f4 e0       	ldi	r31, 0x04	; 4
     e80:	b1 50       	subi	r27, 0x01	; 1
     e82:	e0 40       	sbci	r30, 0x00	; 0
     e84:	f0 40       	sbci	r31, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <_ZN16CLaserControlApp3RunEv+0x4a>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <_ZN16CLaserControlApp3RunEv+0x54>
     e8a:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     e8c:	d8 01       	movw	r26, r16
     e8e:	1f 96       	adiw	r26, 0x0f	; 15
     e90:	8c 91       	ld	r24, X
     e92:	1f 97       	sbiw	r26, 0x0f	; 15
     e94:	81 11       	cpse	r24, r1
     e96:	1e c0       	rjmp	.+60     	; 0xed4 <_ZN16CLaserControlApp3RunEv+0x9e>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     e98:	4e e0       	ldi	r20, 0x0E	; 14
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	5a 96       	adiw	r26, 0x1a	; 26
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	5b 97       	sbiw	r26, 0x1b	; 27
     ea6:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     eaa:	f8 01       	movw	r30, r16
     eac:	82 8d       	ldd	r24, Z+26	; 0x1a
     eae:	93 8d       	ldd	r25, Z+27	; 0x1b
     eb0:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     eb4:	d8 01       	movw	r26, r16
     eb6:	5a 96       	adiw	r26, 0x1a	; 26
     eb8:	8d 91       	ld	r24, X+
     eba:	9c 91       	ld	r25, X
     ebc:	5b 97       	sbiw	r26, 0x1b	; 27
     ebe:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <_ZN9CMBSender18WaitMODBUSListenerEv>
     ec2:	bf ef       	ldi	r27, 0xFF	; 255
     ec4:	e1 ee       	ldi	r30, 0xE1	; 225
     ec6:	f4 e0       	ldi	r31, 0x04	; 4
     ec8:	b1 50       	subi	r27, 0x01	; 1
     eca:	e0 40       	sbci	r30, 0x00	; 0
     ecc:	f0 40       	sbci	r31, 0x00	; 0
     ece:	e1 f7       	brne	.-8      	; 0xec8 <_ZN16CLaserControlApp3RunEv+0x92>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <_ZN16CLaserControlApp3RunEv+0x9c>
     ed2:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     ed4:	d8 01       	movw	r26, r16
     ed6:	1c 96       	adiw	r26, 0x0c	; 12
     ed8:	8c 91       	ld	r24, X
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	82 31       	cpi	r24, 0x12	; 18
     ede:	91 05       	cpc	r25, r1
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <_ZN16CLaserControlApp3RunEv+0xae>
     ee2:	23 c4       	rjmp	.+2118   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
     ee4:	fc 01       	movw	r30, r24
     ee6:	88 27       	eor	r24, r24
     ee8:	e8 5f       	subi	r30, 0xF8	; 248
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <__tablejump2__>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_MAINMENU);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	94 e1       	ldi	r25, 0x14	; 20
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     efa:	22 e0       	ldi	r18, 0x02	; 2
     efc:	ae 01       	movw	r20, r28
     efe:	4f 5f       	subi	r20, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	63 e0       	ldi	r22, 0x03	; 3
     f04:	f8 01       	movw	r30, r16
     f06:	82 8d       	ldd	r24, Z+26	; 0x1a
     f08:	93 8d       	ldd	r25, Z+27	; 0x1b
     f0a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     f0e:	d8 01       	movw	r26, r16
     f10:	5a 96       	adiw	r26, 0x1a	; 26
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	5b 97       	sbiw	r26, 0x1b	; 27
     f18:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKFAST;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	f8 01       	movw	r30, r16
     f20:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     f22:	03 c4       	rjmp	.+2054   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
			//state = APP_WORKFAST;
		break;
		case APP_WORKSTARTED:
			//state = APP_WORKFAST;
			
			if (!laserBoard.Footswitch())
     f24:	84 e9       	ldi	r24, 0x94	; 148
     f26:	93 e2       	ldi	r25, 0x23	; 35
     f28:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN11CLaserBoard10FootswitchEv>
     f2c:	81 11       	cpse	r24, r1
     f2e:	1a c0       	rjmp	.+52     	; 0xf64 <_ZN16CLaserControlApp3RunEv+0x12e>
			{
				laserTimer.SetCOMPA(laserTimerDutyCycle);
     f30:	d8 01       	movw	r26, r16
     f32:	52 96       	adiw	r26, 0x12	; 18
     f34:	6d 91       	ld	r22, X+
     f36:	7c 91       	ld	r23, X
     f38:	53 97       	sbiw	r26, 0x13	; 19
     f3a:	83 e8       	ldi	r24, 0x83	; 131
     f3c:	91 e2       	ldi	r25, 0x21	; 33
     f3e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
     f42:	f8 01       	movw	r30, r16
     f44:	62 89       	ldd	r22, Z+18	; 0x12
     f46:	73 89       	ldd	r23, Z+19	; 0x13
     f48:	83 e8       	ldi	r24, 0x83	; 131
     f4a:	91 e2       	ldi	r25, 0x21	; 33
     f4c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_ZN7CTimerF8SetCOMPBEj>
				//laserTimer.SetPeriod(laserTimerPeriod);
				laserTimer.Start(laserTimerPeriod);
     f50:	d8 01       	movw	r26, r16
     f52:	50 96       	adiw	r26, 0x10	; 16
     f54:	6d 91       	ld	r22, X+
     f56:	7c 91       	ld	r23, X
     f58:	51 97       	sbiw	r26, 0x11	; 17
     f5a:	83 e8       	ldi	r24, 0x83	; 131
     f5c:	91 e2       	ldi	r25, 0x21	; 33
     f5e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN7CTimerF5StartEj>
     f62:	e3 c3       	rjmp	.+1990   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
			}
			else
			{
				laserTimer.Stop();
     f64:	83 e8       	ldi	r24, 0x83	; 131
     f66:	91 e2       	ldi	r25, 0x21	; 33
     f68:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     f6c:	60 e1       	ldi	r22, 0x10	; 16
     f6e:	83 e8       	ldi	r24, 0x83	; 131
     f70:	91 e2       	ldi	r25, 0x21	; 33
     f72:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     f76:	60 e2       	ldi	r22, 0x20	; 32
     f78:	83 e8       	ldi	r24, 0x83	; 131
     f7a:	91 e2       	ldi	r25, 0x21	; 33
     f7c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     f80:	d4 c3       	rjmp	.+1960   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     f82:	84 e9       	ldi	r24, 0x94	; 148
     f84:	93 e2       	ldi	r25, 0x23	; 35
     f86:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     f8a:	84 e9       	ldi	r24, 0x94	; 148
     f8c:	93 e2       	ldi	r25, 0x23	; 35
     f8e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORKSTART);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	9a e0       	ldi	r25, 0x0A	; 10
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f9a:	22 e0       	ldi	r18, 0x02	; 2
     f9c:	ae 01       	movw	r20, r28
     f9e:	4f 5f       	subi	r20, 0xFF	; 255
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	63 e0       	ldi	r22, 0x03	; 3
     fa4:	f8 01       	movw	r30, r16
     fa6:	82 8d       	ldd	r24, Z+26	; 0x1a
     fa8:	93 8d       	ldd	r25, Z+27	; 0x1b
     faa:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     fae:	d8 01       	movw	r26, r16
     fb0:	5a 96       	adiw	r26, 0x1a	; 26
     fb2:	8d 91       	ld	r24, X+
     fb4:	9c 91       	ld	r25, X
     fb6:	5b 97       	sbiw	r26, 0x1b	; 27
     fb8:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTART;
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	f8 01       	movw	r30, r16
     fc0:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     fc2:	b3 c3       	rjmp	.+1894   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_WORKOnStart:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     fc4:	d8 01       	movw	r26, r16
     fc6:	56 96       	adiw	r26, 0x16	; 22
     fc8:	4d 91       	ld	r20, X+
     fca:	5c 91       	ld	r21, X
     fcc:	57 97       	sbiw	r26, 0x17	; 23
     fce:	00 24       	eor	r0, r0
     fd0:	56 95       	lsr	r21
     fd2:	47 95       	ror	r20
     fd4:	07 94       	ror	r0
     fd6:	56 95       	lsr	r21
     fd8:	47 95       	ror	r20
     fda:	07 94       	ror	r0
     fdc:	54 2f       	mov	r21, r20
     fde:	40 2d       	mov	r20, r0
     fe0:	9a 01       	movw	r18, r20
     fe2:	a1 e1       	ldi	r26, 0x11	; 17
     fe4:	b4 e0       	ldi	r27, 0x04	; 4
     fe6:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
     fea:	48 1b       	sub	r20, r24
     fec:	59 0b       	sbc	r21, r25
     fee:	56 95       	lsr	r21
     ff0:	47 95       	ror	r20
     ff2:	84 0f       	add	r24, r20
     ff4:	95 1f       	adc	r25, r21
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	92 95       	swap	r25
     ffc:	82 95       	swap	r24
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	89 27       	eor	r24, r25
    1002:	9f 70       	andi	r25, 0x0F	; 15
    1004:	89 27       	eor	r24, r25
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	cf 51       	subi	r28, 0x1F	; 31
    1010:	df 4f       	sbci	r29, 0xFF	; 255
    1012:	88 83       	st	Y, r24
    1014:	99 83       	std	Y+1, r25	; 0x01
    1016:	c1 5e       	subi	r28, 0xE1	; 225
    1018:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    101a:	42 e0       	ldi	r20, 0x02	; 2
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	be 01       	movw	r22, r28
    1020:	6f 51       	subi	r22, 0x1F	; 31
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	89 eb       	ldi	r24, 0xB9	; 185
    1026:	93 e2       	ldi	r25, 0x23	; 35
    1028:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORKSTARTED);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	9b e0       	ldi	r25, 0x0B	; 11
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1034:	22 e0       	ldi	r18, 0x02	; 2
    1036:	ae 01       	movw	r20, r28
    1038:	4f 5f       	subi	r20, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	63 e0       	ldi	r22, 0x03	; 3
    103e:	f8 01       	movw	r30, r16
    1040:	82 8d       	ldd	r24, Z+26	; 0x1a
    1042:	93 8d       	ldd	r25, Z+27	; 0x1b
    1044:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    1048:	d8 01       	movw	r26, r16
    104a:	5a 96       	adiw	r26, 0x1a	; 26
    104c:	8d 91       	ld	r24, X+
    104e:	9c 91       	ld	r25, X
    1050:	5b 97       	sbiw	r26, 0x1b	; 27
    1052:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTARTED;
    1056:	85 e0       	ldi	r24, 0x05	; 5
    1058:	f8 01       	movw	r30, r16
    105a:	84 87       	std	Z+12, r24	; 0x0c

				//laserTimer.Start(12500);
			}
		break;
    105c:	66 c3       	rjmp	.+1740   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_WORKOnStop:
			{
				uint16_t data = 0;
    105e:	cf 51       	subi	r28, 0x1F	; 31
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	18 82       	st	Y, r1
    1064:	19 82       	std	Y+1, r1	; 0x01
    1066:	c1 5e       	subi	r28, 0xE1	; 225
    1068:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    106a:	42 e0       	ldi	r20, 0x02	; 2
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	be 01       	movw	r22, r28
    1070:	6f 51       	subi	r22, 0x1F	; 31
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	89 eb       	ldi	r24, 0xB9	; 185
    1076:	93 e2       	ldi	r25, 0x23	; 35
    1078:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN4CSPI4SendEPhj>
				
				laserTimer.Stop();
    107c:	83 e8       	ldi	r24, 0x83	; 131
    107e:	91 e2       	ldi	r25, 0x21	; 33
    1080:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1084:	60 e1       	ldi	r22, 0x10	; 16
    1086:	83 e8       	ldi	r24, 0x83	; 131
    1088:	91 e2       	ldi	r25, 0x21	; 33
    108a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    108e:	60 e2       	ldi	r22, 0x20	; 32
    1090:	83 e8       	ldi	r24, 0x83	; 131
    1092:	91 e2       	ldi	r25, 0x21	; 33
    1094:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1098:	84 e9       	ldi	r24, 0x94	; 148
    109a:	93 e2       	ldi	r25, 0x23	; 35
    109c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
    10a0:	84 e9       	ldi	r24, 0x94	; 148
    10a2:	93 e2       	ldi	r25, 0x23	; 35
    10a4:	0e 94 76 03 	call	0x6ec	; 0x6ec <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t pic_id = 0;
    10a8:	19 82       	std	Y+1, r1	; 0x01
    10aa:	1a 82       	std	Y+2, r1	; 0x02
				switch (profile)
    10ac:	d8 01       	movw	r26, r16
    10ae:	1d 96       	adiw	r26, 0x0d	; 13
    10b0:	8c 91       	ld	r24, X
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	a9 f0       	breq	.+42     	; 0x10e0 <_ZN16CLaserControlApp3RunEv+0x2aa>
    10b6:	18 f0       	brcs	.+6      	; 0x10be <_ZN16CLaserControlApp3RunEv+0x288>
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	49 f0       	breq	.+18     	; 0x10ce <_ZN16CLaserControlApp3RunEv+0x298>
    10bc:	18 c0       	rjmp	.+48     	; 0x10ee <_ZN16CLaserControlApp3RunEv+0x2b8>
				{
					case WorkFast: 
						pic_id = swap(PICID_WORKFAST); 
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKFAST;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	f8 01       	movw	r30, r16
    10ca:	84 87       	std	Z+12, r24	; 0x0c
						break;
    10cc:	10 c0       	rjmp	.+32     	; 0x10ee <_ZN16CLaserControlApp3RunEv+0x2b8>
					case WorkSlow: 
						pic_id = swap(PICID_WORKSLOW); 
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKSLOW;
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	d8 01       	movw	r26, r16
    10da:	1c 96       	adiw	r26, 0x0c	; 12
    10dc:	8c 93       	st	X, r24
						break;
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <_ZN16CLaserControlApp3RunEv+0x2b8>
					case WorkMedium: 
						pic_id = swap(PICID_WORKMEDIUM); 
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	92 e0       	ldi	r25, 0x02	; 2
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKMEDIUM;
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	f8 01       	movw	r30, r16
    10ec:	84 87       	std	Z+12, r24	; 0x0c
						break;
				}
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    10ee:	22 e0       	ldi	r18, 0x02	; 2
    10f0:	ae 01       	movw	r20, r28
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	63 e0       	ldi	r22, 0x03	; 3
    10f8:	d8 01       	movw	r26, r16
    10fa:	5a 96       	adiw	r26, 0x1a	; 26
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	5b 97       	sbiw	r26, 0x1b	; 27
    1102:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    1106:	f8 01       	movw	r30, r16
    1108:	82 8d       	ldd	r24, Z+26	; 0x1a
    110a:	93 8d       	ldd	r25, Z+27	; 0x1b
    110c:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			}
		break;
    1110:	0c c3       	rjmp	.+1560   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_PHOTOTYPE6:
			//state = APP_WORKFAST;
		break;
		case APP_DATABASE_START:
			{
				uint16_t pic_id = swap(27 + 14 - 3);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	96 e2       	ldi	r25, 0x26	; 38
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    111a:	22 e0       	ldi	r18, 0x02	; 2
    111c:	ae 01       	movw	r20, r28
    111e:	4f 5f       	subi	r20, 0xFF	; 255
    1120:	5f 4f       	sbci	r21, 0xFF	; 255
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	d8 01       	movw	r26, r16
    1126:	5a 96       	adiw	r26, 0x1a	; 26
    1128:	8d 91       	ld	r24, X+
    112a:	9c 91       	ld	r25, X
    112c:	5b 97       	sbiw	r26, 0x1b	; 27
    112e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    1132:	f8 01       	movw	r30, r16
    1134:	82 8d       	ldd	r24, Z+26	; 0x1a
    1136:	93 8d       	ldd	r25, Z+27	; 0x1b
    1138:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_DATABASE;
    113c:	80 e1       	ldi	r24, 0x10	; 16
    113e:	d8 01       	movw	r26, r16
    1140:	1c 96       	adiw	r26, 0x0c	; 12
    1142:	8c 93       	st	X, r24
			}
		break;
    1144:	f2 c2       	rjmp	.+1508   	; 0x172a <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_DATABASE:
			{
				//VARIABLE_ADDR_PROFINDEX
				m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PROFINDEX, 2);
    1146:	42 e0       	ldi	r20, 0x02	; 2
    1148:	67 e0       	ldi	r22, 0x07	; 7
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	f8 01       	movw	r30, r16
    114e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1150:	93 8d       	ldd	r25, Z+27	; 0x1b
    1152:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
				m_cpSender->WaitMODBUSTransmitter();
    1156:	d8 01       	movw	r26, r16
    1158:	5a 96       	adiw	r26, 0x1a	; 26
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	5b 97       	sbiw	r26, 0x1b	; 27
    1160:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WaitMODBUSListener();
    1164:	f8 01       	movw	r30, r16
    1166:	82 8d       	ldd	r24, Z+26	; 0x1a
    1168:	93 8d       	ldd	r25, Z+27	; 0x1b
    116a:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <_ZN9CMBSender18WaitMODBUSListenerEv>
    116e:	ff ef       	ldi	r31, 0xFF	; 255
    1170:	21 ee       	ldi	r18, 0xE1	; 225
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	f1 50       	subi	r31, 0x01	; 1
    1176:	20 40       	sbci	r18, 0x00	; 0
    1178:	80 40       	sbci	r24, 0x00	; 0
    117a:	e1 f7       	brne	.-8      	; 0x1174 <_ZN16CLaserControlApp3RunEv+0x33e>
    117c:	00 c0       	rjmp	.+0      	; 0x117e <_ZN16CLaserControlApp3RunEv+0x348>
    117e:	00 00       	nop
				_delay_ms(50);
				
				DGUS_LINESDATA1 lines1 = {0};
    1180:	fe 01       	movw	r30, r28
    1182:	ef 55       	subi	r30, 0x5F	; 95
    1184:	fd 4f       	sbci	r31, 0xFD	; 253
    1186:	80 ee       	ldi	r24, 0xE0	; 224
    1188:	df 01       	movw	r26, r30
    118a:	28 2f       	mov	r18, r24
    118c:	1d 92       	st	X+, r1
    118e:	2a 95       	dec	r18
    1190:	e9 f7       	brne	.-6      	; 0x118c <_ZN16CLaserControlApp3RunEv+0x356>
				DGUS_LINESDATA2 lines2 = {0};
    1192:	e0 5e       	subi	r30, 0xE0	; 224
    1194:	f1 09       	sbc	r31, r1
    1196:	df 01       	movw	r26, r30
    1198:	28 2f       	mov	r18, r24
    119a:	1d 92       	st	X+, r1
    119c:	2a 95       	dec	r18
    119e:	e9 f7       	brne	.-6      	; 0x119a <_ZN16CLaserControlApp3RunEv+0x364>
				DGUS_VALUESDATA value1 = {0};
    11a0:	e0 5e       	subi	r30, 0xE0	; 224
    11a2:	f1 09       	sbc	r31, r1
    11a4:	df 01       	movw	r26, r30
    11a6:	28 2f       	mov	r18, r24
    11a8:	1d 92       	st	X+, r1
    11aa:	2a 95       	dec	r18
    11ac:	e9 f7       	brne	.-6      	; 0x11a8 <_ZN16CLaserControlApp3RunEv+0x372>
				DGUS_VALUESDATA value2 = {0};
    11ae:	e0 5e       	subi	r30, 0xE0	; 224
    11b0:	f1 09       	sbc	r31, r1
    11b2:	df 01       	movw	r26, r30
    11b4:	1d 92       	st	X+, r1
    11b6:	8a 95       	dec	r24
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <_ZN16CLaserControlApp3RunEv+0x37e>
				char empty[33] = "Hello world!                    ";
    11ba:	81 e2       	ldi	r24, 0x21	; 33
    11bc:	ee e5       	ldi	r30, 0x5E	; 94
    11be:	f0 e2       	ldi	r31, 0x20	; 32
    11c0:	de 01       	movw	r26, r28
    11c2:	ae 55       	subi	r26, 0x5E	; 94
    11c4:	bc 4f       	sbci	r27, 0xFC	; 252
    11c6:	01 90       	ld	r0, Z+
    11c8:	0d 92       	st	X+, r0
    11ca:	8a 95       	dec	r24
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <_ZN16CLaserControlApp3RunEv+0x390>
				
				                //-------|-------|-------|-------|
				char value[33] = "  4321    1234    1234    1234  ";
    11ce:	81 e2       	ldi	r24, 0x21	; 33
    11d0:	ef e7       	ldi	r30, 0x7F	; 127
    11d2:	f0 e2       	ldi	r31, 0x20	; 32
    11d4:	de 01       	movw	r26, r28
    11d6:	af 57       	subi	r26, 0x7F	; 127
    11d8:	bc 4f       	sbci	r27, 0xFC	; 252
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <_ZN16CLaserControlApp3RunEv+0x3a4>
				
				static int cnt = 0;
				static int lastprofile = 0;
				cnt+=1;
    11e2:	80 91 57 21 	lds	r24, 0x2157
    11e6:	90 91 58 21 	lds	r25, 0x2158
    11ea:	01 96       	adiw	r24, 0x01	; 1
				if (cnt >= 32) cnt = 0;
    11ec:	80 32       	cpi	r24, 0x20	; 32
    11ee:	91 05       	cpc	r25, r1
    11f0:	2c f4       	brge	.+10     	; 0x11fc <_ZN16CLaserControlApp3RunEv+0x3c6>
				                //-------|-------|-------|-------|
				char value[33] = "  4321    1234    1234    1234  ";
				
				static int cnt = 0;
				static int lastprofile = 0;
				cnt+=1;
    11f2:	80 93 57 21 	sts	0x2157, r24
    11f6:	90 93 58 21 	sts	0x2158, r25
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <_ZN16CLaserControlApp3RunEv+0x3ce>
				if (cnt >= 32) cnt = 0;
    11fc:	10 92 57 21 	sts	0x2157, r1
    1200:	10 92 58 21 	sts	0x2158, r1
				
				if (profileIndex != lastprofile) cnt = 0;
    1204:	f8 01       	movw	r30, r16
    1206:	80 8d       	ldd	r24, Z+24	; 0x18
    1208:	91 8d       	ldd	r25, Z+25	; 0x19
    120a:	20 91 55 21 	lds	r18, 0x2155
    120e:	30 91 56 21 	lds	r19, 0x2156
    1212:	82 17       	cp	r24, r18
    1214:	93 07       	cpc	r25, r19
    1216:	21 f0       	breq	.+8      	; 0x1220 <_ZN16CLaserControlApp3RunEv+0x3ea>
    1218:	10 92 57 21 	sts	0x2157, r1
    121c:	10 92 58 21 	sts	0x2158, r1
				
				lastprofile = profileIndex;
    1220:	80 93 55 21 	sts	0x2155, r24
    1224:	90 93 56 21 	sts	0x2156, r25
				
				// Names
				ConvertData((void*) lines1.line1 , (void*)empty, 32);
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e2       	ldi	r20, 0x20	; 32
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	be 01       	movw	r22, r28
    1232:	6e 55       	subi	r22, 0x5E	; 94
    1234:	7c 4f       	sbci	r23, 0xFC	; 252
    1236:	ce 01       	movw	r24, r28
    1238:	8f 55       	subi	r24, 0x5F	; 95
    123a:	9d 4f       	sbci	r25, 0xFD	; 253
    123c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line2 , (void*)empty, 32);
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e2       	ldi	r20, 0x20	; 32
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	be 01       	movw	r22, r28
    124a:	6e 55       	subi	r22, 0x5E	; 94
    124c:	7c 4f       	sbci	r23, 0xFC	; 252
    124e:	81 ea       	ldi	r24, 0xA1	; 161
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	8c 0f       	add	r24, r28
    1254:	9d 1f       	adc	r25, r29
    1256:	80 96       	adiw	r24, 0x20	; 32
    1258:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line3 , (void*)empty, 32);
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	be 01       	movw	r22, r28
    1266:	6e 55       	subi	r22, 0x5E	; 94
    1268:	7c 4f       	sbci	r23, 0xFC	; 252
    126a:	ce 01       	movw	r24, r28
    126c:	8f 51       	subi	r24, 0x1F	; 31
    126e:	9d 4f       	sbci	r25, 0xFD	; 253
    1270:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line4 , (void*)empty, 32);
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	be 01       	movw	r22, r28
    127e:	6e 55       	subi	r22, 0x5E	; 94
    1280:	7c 4f       	sbci	r23, 0xFC	; 252
    1282:	ce 01       	movw	r24, r28
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	9c 4f       	sbci	r25, 0xFC	; 252
    1288:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line5 , (void*)empty, 32);
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	be 01       	movw	r22, r28
    1296:	6e 55       	subi	r22, 0x5E	; 94
    1298:	7c 4f       	sbci	r23, 0xFC	; 252
    129a:	ce 01       	movw	r24, r28
    129c:	8f 5d       	subi	r24, 0xDF	; 223
    129e:	9c 4f       	sbci	r25, 0xFC	; 252
    12a0:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line6 , (void*)empty, 32);
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	be 01       	movw	r22, r28
    12ae:	6e 55       	subi	r22, 0x5E	; 94
    12b0:	7c 4f       	sbci	r23, 0xFC	; 252
    12b2:	ce 01       	movw	r24, r28
    12b4:	8f 5b       	subi	r24, 0xBF	; 191
    12b6:	9c 4f       	sbci	r25, 0xFC	; 252
    12b8:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line7 , (void*)empty, 32);
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	be 01       	movw	r22, r28
    12c6:	6e 55       	subi	r22, 0x5E	; 94
    12c8:	7c 4f       	sbci	r23, 0xFC	; 252
    12ca:	ce 01       	movw	r24, r28
    12cc:	8f 59       	subi	r24, 0x9F	; 159
    12ce:	9c 4f       	sbci	r25, 0xFC	; 252
    12d0:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line8 , (void*)empty, 32);
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	be 01       	movw	r22, r28
    12de:	6e 55       	subi	r22, 0x5E	; 94
    12e0:	7c 4f       	sbci	r23, 0xFC	; 252
    12e2:	ce 01       	movw	r24, r28
    12e4:	8f 53       	subi	r24, 0x3F	; 63
    12e6:	9e 4f       	sbci	r25, 0xFE	; 254
    12e8:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line9 , (void*)empty, 32);
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	be 01       	movw	r22, r28
    12f6:	6e 55       	subi	r22, 0x5E	; 94
    12f8:	7c 4f       	sbci	r23, 0xFC	; 252
    12fa:	81 ec       	ldi	r24, 0xC1	; 193
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	8c 0f       	add	r24, r28
    1300:	9d 1f       	adc	r25, r29
    1302:	80 96       	adiw	r24, 0x20	; 32
    1304:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line10, (void*)empty, 32);
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	be 01       	movw	r22, r28
    1312:	6e 55       	subi	r22, 0x5E	; 94
    1314:	7c 4f       	sbci	r23, 0xFC	; 252
    1316:	ce 01       	movw	r24, r28
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	9d 4f       	sbci	r25, 0xFD	; 253
    131c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line11, (void*)empty, 32);
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	be 01       	movw	r22, r28
    132a:	6e 55       	subi	r22, 0x5E	; 94
    132c:	7c 4f       	sbci	r23, 0xFC	; 252
    132e:	ce 01       	movw	r24, r28
    1330:	8f 5d       	subi	r24, 0xDF	; 223
    1332:	9d 4f       	sbci	r25, 0xFD	; 253
    1334:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line12, (void*)empty, 32);
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	be 01       	movw	r22, r28
    1342:	6e 55       	subi	r22, 0x5E	; 94
    1344:	7c 4f       	sbci	r23, 0xFC	; 252
    1346:	ce 01       	movw	r24, r28
    1348:	8f 5b       	subi	r24, 0xBF	; 191
    134a:	9d 4f       	sbci	r25, 0xFD	; 253
    134c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line13, (void*)empty, 32);
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	be 01       	movw	r22, r28
    135a:	6e 55       	subi	r22, 0x5E	; 94
    135c:	7c 4f       	sbci	r23, 0xFC	; 252
    135e:	ce 01       	movw	r24, r28
    1360:	8f 59       	subi	r24, 0x9F	; 159
    1362:	9d 4f       	sbci	r25, 0xFD	; 253
    1364:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line14, (void*)empty, 32);
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	be 01       	movw	r22, r28
    1372:	6e 55       	subi	r22, 0x5E	; 94
    1374:	7c 4f       	sbci	r23, 0xFC	; 252
    1376:	ce 01       	movw	r24, r28
    1378:	8f 57       	subi	r24, 0x7F	; 127
    137a:	9d 4f       	sbci	r25, 0xFD	; 253
    137c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				
				switch (profileIndex)
    1380:	d8 01       	movw	r26, r16
    1382:	58 96       	adiw	r26, 0x18	; 24
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	59 97       	sbiw	r26, 0x19	; 25
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	ee 30       	cpi	r30, 0x0E	; 14
    138e:	f1 05       	cpc	r31, r1
    1390:	08 f0       	brcs	.+2      	; 0x1394 <_ZN16CLaserControlApp3RunEv+0x55e>
    1392:	d7 c0       	rjmp	.+430    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
    1394:	88 27       	eor	r24, r24
    1396:	e6 5e       	subi	r30, 0xE6	; 230
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <__tablejump2__>
				{
					case 1 : ConvertData((void*) lines1.line1 , (void*)empty, 32, cnt); break;
    13a0:	20 91 57 21 	lds	r18, 0x2157
    13a4:	30 91 58 21 	lds	r19, 0x2158
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	be 01       	movw	r22, r28
    13ae:	6e 55       	subi	r22, 0x5E	; 94
    13b0:	7c 4f       	sbci	r23, 0xFC	; 252
    13b2:	ce 01       	movw	r24, r28
    13b4:	8f 55       	subi	r24, 0x5F	; 95
    13b6:	9d 4f       	sbci	r25, 0xFD	; 253
    13b8:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    13bc:	c2 c0       	rjmp	.+388    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 2 : ConvertData((void*) lines1.line2 , (void*)empty, 32, cnt); break;
    13be:	20 91 57 21 	lds	r18, 0x2157
    13c2:	30 91 58 21 	lds	r19, 0x2158
    13c6:	40 e2       	ldi	r20, 0x20	; 32
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	be 01       	movw	r22, r28
    13cc:	6e 55       	subi	r22, 0x5E	; 94
    13ce:	7c 4f       	sbci	r23, 0xFC	; 252
    13d0:	ce 01       	movw	r24, r28
    13d2:	8f 53       	subi	r24, 0x3F	; 63
    13d4:	9d 4f       	sbci	r25, 0xFD	; 253
    13d6:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    13da:	b3 c0       	rjmp	.+358    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 3 : ConvertData((void*) lines1.line3 , (void*)empty, 32, cnt); break;
    13dc:	20 91 57 21 	lds	r18, 0x2157
    13e0:	30 91 58 21 	lds	r19, 0x2158
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	be 01       	movw	r22, r28
    13ea:	6e 55       	subi	r22, 0x5E	; 94
    13ec:	7c 4f       	sbci	r23, 0xFC	; 252
    13ee:	ce 01       	movw	r24, r28
    13f0:	8f 51       	subi	r24, 0x1F	; 31
    13f2:	9d 4f       	sbci	r25, 0xFD	; 253
    13f4:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    13f8:	a4 c0       	rjmp	.+328    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 4 : ConvertData((void*) lines1.line4 , (void*)empty, 32, cnt); break;
    13fa:	20 91 57 21 	lds	r18, 0x2157
    13fe:	30 91 58 21 	lds	r19, 0x2158
    1402:	40 e2       	ldi	r20, 0x20	; 32
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	be 01       	movw	r22, r28
    1408:	6e 55       	subi	r22, 0x5E	; 94
    140a:	7c 4f       	sbci	r23, 0xFC	; 252
    140c:	ce 01       	movw	r24, r28
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	9c 4f       	sbci	r25, 0xFC	; 252
    1412:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1416:	95 c0       	rjmp	.+298    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 5 : ConvertData((void*) lines1.line5 , (void*)empty, 32, cnt); break;
    1418:	20 91 57 21 	lds	r18, 0x2157
    141c:	30 91 58 21 	lds	r19, 0x2158
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	be 01       	movw	r22, r28
    1426:	6e 55       	subi	r22, 0x5E	; 94
    1428:	7c 4f       	sbci	r23, 0xFC	; 252
    142a:	ce 01       	movw	r24, r28
    142c:	8f 5d       	subi	r24, 0xDF	; 223
    142e:	9c 4f       	sbci	r25, 0xFC	; 252
    1430:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1434:	86 c0       	rjmp	.+268    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 6 : ConvertData((void*) lines1.line6 , (void*)empty, 32, cnt); break;
    1436:	20 91 57 21 	lds	r18, 0x2157
    143a:	30 91 58 21 	lds	r19, 0x2158
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	be 01       	movw	r22, r28
    1444:	6e 55       	subi	r22, 0x5E	; 94
    1446:	7c 4f       	sbci	r23, 0xFC	; 252
    1448:	ce 01       	movw	r24, r28
    144a:	8f 5b       	subi	r24, 0xBF	; 191
    144c:	9c 4f       	sbci	r25, 0xFC	; 252
    144e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1452:	77 c0       	rjmp	.+238    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 7 : ConvertData((void*) lines1.line7 , (void*)empty, 32, cnt); break;
    1454:	20 91 57 21 	lds	r18, 0x2157
    1458:	30 91 58 21 	lds	r19, 0x2158
    145c:	40 e2       	ldi	r20, 0x20	; 32
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	be 01       	movw	r22, r28
    1462:	6e 55       	subi	r22, 0x5E	; 94
    1464:	7c 4f       	sbci	r23, 0xFC	; 252
    1466:	ce 01       	movw	r24, r28
    1468:	8f 59       	subi	r24, 0x9F	; 159
    146a:	9c 4f       	sbci	r25, 0xFC	; 252
    146c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1470:	68 c0       	rjmp	.+208    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 8 : ConvertData((void*) lines2.line8 , (void*)empty, 32, cnt); break;
    1472:	20 91 57 21 	lds	r18, 0x2157
    1476:	30 91 58 21 	lds	r19, 0x2158
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	be 01       	movw	r22, r28
    1480:	6e 55       	subi	r22, 0x5E	; 94
    1482:	7c 4f       	sbci	r23, 0xFC	; 252
    1484:	ce 01       	movw	r24, r28
    1486:	8f 53       	subi	r24, 0x3F	; 63
    1488:	9e 4f       	sbci	r25, 0xFE	; 254
    148a:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    148e:	59 c0       	rjmp	.+178    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 9 : ConvertData((void*) lines2.line9 , (void*)empty, 32, cnt); break;
    1490:	20 91 57 21 	lds	r18, 0x2157
    1494:	30 91 58 21 	lds	r19, 0x2158
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	be 01       	movw	r22, r28
    149e:	6e 55       	subi	r22, 0x5E	; 94
    14a0:	7c 4f       	sbci	r23, 0xFC	; 252
    14a2:	ce 01       	movw	r24, r28
    14a4:	8f 51       	subi	r24, 0x1F	; 31
    14a6:	9e 4f       	sbci	r25, 0xFE	; 254
    14a8:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    14ac:	4a c0       	rjmp	.+148    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 10: ConvertData((void*) lines2.line10, (void*)empty, 32, cnt); break;
    14ae:	20 91 57 21 	lds	r18, 0x2157
    14b2:	30 91 58 21 	lds	r19, 0x2158
    14b6:	40 e2       	ldi	r20, 0x20	; 32
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	be 01       	movw	r22, r28
    14bc:	6e 55       	subi	r22, 0x5E	; 94
    14be:	7c 4f       	sbci	r23, 0xFC	; 252
    14c0:	ce 01       	movw	r24, r28
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	9d 4f       	sbci	r25, 0xFD	; 253
    14c6:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    14ca:	3b c0       	rjmp	.+118    	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 11: ConvertData((void*) lines2.line11, (void*)empty, 32, cnt); break;
    14cc:	20 91 57 21 	lds	r18, 0x2157
    14d0:	30 91 58 21 	lds	r19, 0x2158
    14d4:	40 e2       	ldi	r20, 0x20	; 32
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	be 01       	movw	r22, r28
    14da:	6e 55       	subi	r22, 0x5E	; 94
    14dc:	7c 4f       	sbci	r23, 0xFC	; 252
    14de:	ce 01       	movw	r24, r28
    14e0:	8f 5d       	subi	r24, 0xDF	; 223
    14e2:	9d 4f       	sbci	r25, 0xFD	; 253
    14e4:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    14e8:	2c c0       	rjmp	.+88     	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 12: ConvertData((void*) lines2.line12, (void*)empty, 32, cnt); break;
    14ea:	20 91 57 21 	lds	r18, 0x2157
    14ee:	30 91 58 21 	lds	r19, 0x2158
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	be 01       	movw	r22, r28
    14f8:	6e 55       	subi	r22, 0x5E	; 94
    14fa:	7c 4f       	sbci	r23, 0xFC	; 252
    14fc:	ce 01       	movw	r24, r28
    14fe:	8f 5b       	subi	r24, 0xBF	; 191
    1500:	9d 4f       	sbci	r25, 0xFD	; 253
    1502:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1506:	1d c0       	rjmp	.+58     	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 13: ConvertData((void*) lines2.line13, (void*)empty, 32, cnt); break;
    1508:	20 91 57 21 	lds	r18, 0x2157
    150c:	30 91 58 21 	lds	r19, 0x2158
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	be 01       	movw	r22, r28
    1516:	6e 55       	subi	r22, 0x5E	; 94
    1518:	7c 4f       	sbci	r23, 0xFC	; 252
    151a:	ce 01       	movw	r24, r28
    151c:	8f 59       	subi	r24, 0x9F	; 159
    151e:	9d 4f       	sbci	r25, 0xFD	; 253
    1520:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1524:	0e c0       	rjmp	.+28     	; 0x1542 <_ZN16CLaserControlApp3RunEv+0x70c>
					case 14: ConvertData((void*) lines2.line14, (void*)empty, 32, cnt); break;
    1526:	20 91 57 21 	lds	r18, 0x2157
    152a:	30 91 58 21 	lds	r19, 0x2158
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	be 01       	movw	r22, r28
    1534:	6e 55       	subi	r22, 0x5E	; 94
    1536:	7c 4f       	sbci	r23, 0xFC	; 252
    1538:	ce 01       	movw	r24, r28
    153a:	8f 57       	subi	r24, 0x7F	; 127
    153c:	9d 4f       	sbci	r25, 0xFD	; 253
    153e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				}
				
				// Parameters
				ConvertData((void*)&value1.value1, (void*)value, 32);
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	be 01       	movw	r22, r28
    154c:	6f 57       	subi	r22, 0x7F	; 127
    154e:	7c 4f       	sbci	r23, 0xFC	; 252
    1550:	ce 01       	movw	r24, r28
    1552:	8f 51       	subi	r24, 0x1F	; 31
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value2, (void*)value, 32);
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	be 01       	movw	r22, r28
    1564:	6f 57       	subi	r22, 0x7F	; 127
    1566:	7c 4f       	sbci	r23, 0xFC	; 252
    1568:	81 ee       	ldi	r24, 0xE1	; 225
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	8c 0f       	add	r24, r28
    156e:	9d 1f       	adc	r25, r29
    1570:	80 96       	adiw	r24, 0x20	; 32
    1572:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value3, (void*)value, 32);
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	be 01       	movw	r22, r28
    1580:	6f 57       	subi	r22, 0x7F	; 127
    1582:	7c 4f       	sbci	r23, 0xFC	; 252
    1584:	ce 01       	movw	r24, r28
    1586:	8f 5d       	subi	r24, 0xDF	; 223
    1588:	9e 4f       	sbci	r25, 0xFE	; 254
    158a:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value4, (void*)value, 32);
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	be 01       	movw	r22, r28
    1598:	6f 57       	subi	r22, 0x7F	; 127
    159a:	7c 4f       	sbci	r23, 0xFC	; 252
    159c:	ce 01       	movw	r24, r28
    159e:	8f 5b       	subi	r24, 0xBF	; 191
    15a0:	9e 4f       	sbci	r25, 0xFE	; 254
    15a2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value5, (void*)value, 32);
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	be 01       	movw	r22, r28
    15b0:	6f 57       	subi	r22, 0x7F	; 127
    15b2:	7c 4f       	sbci	r23, 0xFC	; 252
    15b4:	ce 01       	movw	r24, r28
    15b6:	8f 59       	subi	r24, 0x9F	; 159
    15b8:	9e 4f       	sbci	r25, 0xFE	; 254
    15ba:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value6, (void*)value, 32);
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e2       	ldi	r20, 0x20	; 32
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	be 01       	movw	r22, r28
    15c8:	6f 57       	subi	r22, 0x7F	; 127
    15ca:	7c 4f       	sbci	r23, 0xFC	; 252
    15cc:	ce 01       	movw	r24, r28
    15ce:	8f 57       	subi	r24, 0x7F	; 127
    15d0:	9e 4f       	sbci	r25, 0xFE	; 254
    15d2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value7, (void*)value, 32);
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	be 01       	movw	r22, r28
    15e0:	6f 57       	subi	r22, 0x7F	; 127
    15e2:	7c 4f       	sbci	r23, 0xFC	; 252
    15e4:	ce 01       	movw	r24, r28
    15e6:	8f 55       	subi	r24, 0x5F	; 95
    15e8:	9e 4f       	sbci	r25, 0xFE	; 254
    15ea:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value1, (void*)value, 32);
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	be 01       	movw	r22, r28
    15f8:	6f 57       	subi	r22, 0x7F	; 127
    15fa:	7c 4f       	sbci	r23, 0xFC	; 252
    15fc:	ce 01       	movw	r24, r28
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value2, (void*)value, 32);
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	be 01       	movw	r22, r28
    160e:	6f 57       	subi	r22, 0x7F	; 127
    1610:	7c 4f       	sbci	r23, 0xFC	; 252
    1612:	ce 01       	movw	r24, r28
    1614:	81 96       	adiw	r24, 0x21	; 33
    1616:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value3, (void*)value, 32);
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	be 01       	movw	r22, r28
    1624:	6f 57       	subi	r22, 0x7F	; 127
    1626:	7c 4f       	sbci	r23, 0xFC	; 252
    1628:	ce 01       	movw	r24, r28
    162a:	8f 5b       	subi	r24, 0xBF	; 191
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value4, (void*)value, 32);
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	be 01       	movw	r22, r28
    163c:	6f 57       	subi	r22, 0x7F	; 127
    163e:	7c 4f       	sbci	r23, 0xFC	; 252
    1640:	ce 01       	movw	r24, r28
    1642:	8f 59       	subi	r24, 0x9F	; 159
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value5, (void*)value, 32);
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	be 01       	movw	r22, r28
    1654:	6f 57       	subi	r22, 0x7F	; 127
    1656:	7c 4f       	sbci	r23, 0xFC	; 252
    1658:	ce 01       	movw	r24, r28
    165a:	8f 57       	subi	r24, 0x7F	; 127
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value6, (void*)value, 32);
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	be 01       	movw	r22, r28
    166c:	6f 57       	subi	r22, 0x7F	; 127
    166e:	7c 4f       	sbci	r23, 0xFC	; 252
    1670:	ce 01       	movw	r24, r28
    1672:	8f 55       	subi	r24, 0x5F	; 95
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value7, (void*)value, 32);
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	be 01       	movw	r22, r28
    1684:	6f 57       	subi	r22, 0x7F	; 127
    1686:	7c 4f       	sbci	r23, 0xFC	; 252
    1688:	ce 01       	movw	r24, r28
    168a:	8f 53       	subi	r24, 0x3F	; 63
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				
				// Param transfer
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA1 , (uint16_t*)&lines1, sizeof(lines1));
    1692:	20 ee       	ldi	r18, 0xE0	; 224
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	ae 01       	movw	r20, r28
    1698:	4f 55       	subi	r20, 0x5F	; 95
    169a:	5d 4f       	sbci	r21, 0xFD	; 253
    169c:	60 e1       	ldi	r22, 0x10	; 16
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	f8 01       	movw	r30, r16
    16a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    16a6:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    16aa:	d8 01       	movw	r26, r16
    16ac:	5a 96       	adiw	r26, 0x1a	; 26
    16ae:	8d 91       	ld	r24, X+
    16b0:	9c 91       	ld	r25, X
    16b2:	5b 97       	sbiw	r26, 0x1b	; 27
    16b4:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA2 , (uint16_t*)&lines2, sizeof(lines2));
    16b8:	20 ee       	ldi	r18, 0xE0	; 224
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	ae 01       	movw	r20, r28
    16be:	4f 53       	subi	r20, 0x3F	; 63
    16c0:	5e 4f       	sbci	r21, 0xFE	; 254
    16c2:	60 e8       	ldi	r22, 0x80	; 128
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	f8 01       	movw	r30, r16
    16c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ca:	93 8d       	ldd	r25, Z+27	; 0x1b
    16cc:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    16d0:	d8 01       	movw	r26, r16
    16d2:	5a 96       	adiw	r26, 0x1a	; 26
    16d4:	8d 91       	ld	r24, X+
    16d6:	9c 91       	ld	r25, X
    16d8:	5b 97       	sbiw	r26, 0x1b	; 27
    16da:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_VALUESDATA1, (uint16_t*)&value1, sizeof(value1));
    16de:	20 ee       	ldi	r18, 0xE0	; 224
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	ae 01       	movw	r20, r28
    16e4:	4f 51       	subi	r20, 0x1F	; 31
    16e6:	5f 4f       	sbci	r21, 0xFF	; 255
    16e8:	60 e1       	ldi	r22, 0x10	; 16
    16ea:	73 e0       	ldi	r23, 0x03	; 3
    16ec:	f8 01       	movw	r30, r16
    16ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    16f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    16f2:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    16f6:	d8 01       	movw	r26, r16
    16f8:	5a 96       	adiw	r26, 0x1a	; 26
    16fa:	8d 91       	ld	r24, X+
    16fc:	9c 91       	ld	r25, X
    16fe:	5b 97       	sbiw	r26, 0x1b	; 27
    1700:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_VALUESDATA2, (uint16_t*)&value2, sizeof(value2));
    1704:	20 ee       	ldi	r18, 0xE0	; 224
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	ae 01       	movw	r20, r28
    170a:	4f 5f       	subi	r20, 0xFF	; 255
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	60 e8       	ldi	r22, 0x80	; 128
    1710:	73 e0       	ldi	r23, 0x03	; 3
    1712:	f8 01       	movw	r30, r16
    1714:	82 8d       	ldd	r24, Z+26	; 0x1a
    1716:	93 8d       	ldd	r25, Z+27	; 0x1b
    1718:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    171c:	d8 01       	movw	r26, r16
    171e:	5a 96       	adiw	r26, 0x1a	; 26
    1720:	8d 91       	ld	r24, X+
    1722:	9c 91       	ld	r25, X
    1724:	5b 97       	sbiw	r26, 0x1b	; 27
    1726:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
    172a:	f8 01       	movw	r30, r16
    172c:	87 85       	ldd	r24, Z+15	; 0x0f
    172e:	88 23       	and	r24, r24
    1730:	89 f1       	breq	.+98     	; 0x1794 <_ZN16CLaserControlApp3RunEv+0x95e>
	{
		switch (profile)
    1732:	85 85       	ldd	r24, Z+13	; 0x0d
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	d9 f0       	breq	.+54     	; 0x176e <_ZN16CLaserControlApp3RunEv+0x938>
    1738:	18 f0       	brcs	.+6      	; 0x1740 <_ZN16CLaserControlApp3RunEv+0x90a>
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	61 f0       	breq	.+24     	; 0x1756 <_ZN16CLaserControlApp3RunEv+0x920>
    173e:	21 c0       	rjmp	.+66     	; 0x1782 <_ZN16CLaserControlApp3RunEv+0x94c>
		{
			case WorkFast:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(DGUS_DATA));
    1740:	2e e0       	ldi	r18, 0x0E	; 14
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	45 e7       	ldi	r20, 0x75	; 117
    1746:	51 e2       	ldi	r21, 0x21	; 33
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	82 8d       	ldd	r24, Z+26	; 0x1a
    174e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1750:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1754:	16 c0       	rjmp	.+44     	; 0x1782 <_ZN16CLaserControlApp3RunEv+0x94c>
			case WorkSlow:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Slow, sizeof(DGUS_DATA));
    1756:	2e e0       	ldi	r18, 0x0E	; 14
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	49 e5       	ldi	r20, 0x59	; 89
    175c:	51 e2       	ldi	r21, 0x21	; 33
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	f8 01       	movw	r30, r16
    1764:	82 8d       	ldd	r24, Z+26	; 0x1a
    1766:	93 8d       	ldd	r25, Z+27	; 0x1b
    1768:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    176c:	0a c0       	rjmp	.+20     	; 0x1782 <_ZN16CLaserControlApp3RunEv+0x94c>
			case WorkMedium:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Medium, sizeof(DGUS_DATA));
    176e:	2e e0       	ldi	r18, 0x0E	; 14
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	47 e6       	ldi	r20, 0x67	; 103
    1774:	51 e2       	ldi	r21, 0x21	; 33
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	82 8d       	ldd	r24, Z+26	; 0x1a
    177c:	93 8d       	ldd	r25, Z+27	; 0x1b
    177e:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    1782:	f8 01       	movw	r30, r16
    1784:	82 8d       	ldd	r24, Z+26	; 0x1a
    1786:	93 8d       	ldd	r25, Z+27	; 0x1b
    1788:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
    178c:	d8 01       	movw	r26, r16
    178e:	1f 96       	adiw	r26, 0x0f	; 15
    1790:	1c 92       	st	X, r1
    1792:	d6 c1       	rjmp	.+940    	; 0x1b40 <_ZN16CLaserControlApp3RunEv+0xd0a>
	}
	else
	{
		switch (profile)
    1794:	f8 01       	movw	r30, r16
    1796:	85 85       	ldd	r24, Z+13	; 0x0d
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	09 f4       	brne	.+2      	; 0x179e <_ZN16CLaserControlApp3RunEv+0x968>
    179c:	35 c1       	rjmp	.+618    	; 0x1a08 <_ZN16CLaserControlApp3RunEv+0xbd2>
    179e:	20 f0       	brcs	.+8      	; 0x17a8 <_ZN16CLaserControlApp3RunEv+0x972>
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <_ZN16CLaserControlApp3RunEv+0x970>
    17a4:	99 c0       	rjmp	.+306    	; 0x18d8 <_ZN16CLaserControlApp3RunEv+0xaa2>
    17a6:	c7 c1       	rjmp	.+910    	; 0x1b36 <_ZN16CLaserControlApp3RunEv+0xd00>
		{
			case WorkFast:
				// Fast profile			
				DGUSDATA.DutyCycle = m_structDGUSDATA_Fast.Duration * m_structDGUSDATA_Fast.Frequency / 10;
    17a8:	e5 e7       	ldi	r30, 0x75	; 117
    17aa:	f1 e2       	ldi	r31, 0x21	; 33
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	40 81       	ld	r20, Z
    17b2:	51 81       	ldd	r21, Z+1	; 0x01
    17b4:	48 9f       	mul	r20, r24
    17b6:	90 01       	movw	r18, r0
    17b8:	49 9f       	mul	r20, r25
    17ba:	30 0d       	add	r19, r0
    17bc:	58 9f       	mul	r21, r24
    17be:	30 0d       	add	r19, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	ad ec       	ldi	r26, 0xCD	; 205
    17c4:	bc ec       	ldi	r27, 0xCC	; 204
    17c6:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    17ca:	7c 01       	movw	r14, r24
    17cc:	f6 94       	lsr	r15
    17ce:	e7 94       	ror	r14
    17d0:	f6 94       	lsr	r15
    17d2:	e7 94       	ror	r14
    17d4:	f6 94       	lsr	r15
    17d6:	e7 94       	ror	r14
    17d8:	eb 86       	std	Y+11, r14	; 0x0b
    17da:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100;
    17dc:	84 81       	ldd	r24, Z+4	; 0x04
    17de:	95 81       	ldd	r25, Z+5	; 0x05
    17e0:	42 85       	ldd	r20, Z+10	; 0x0a
    17e2:	53 85       	ldd	r21, Z+11	; 0x0b
    17e4:	48 9f       	mul	r20, r24
    17e6:	90 01       	movw	r18, r0
    17e8:	49 9f       	mul	r20, r25
    17ea:	30 0d       	add	r19, r0
    17ec:	58 9f       	mul	r21, r24
    17ee:	30 0d       	add	r19, r0
    17f0:	11 24       	eor	r1, r1
    17f2:	36 95       	lsr	r19
    17f4:	27 95       	ror	r18
    17f6:	36 95       	lsr	r19
    17f8:	27 95       	ror	r18
    17fa:	ab e7       	ldi	r26, 0x7B	; 123
    17fc:	b4 e1       	ldi	r27, 0x14	; 20
    17fe:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1802:	96 95       	lsr	r25
    1804:	87 95       	ror	r24
    1806:	8f 83       	std	Y+7, r24	; 0x07
    1808:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration / 1000;
    180a:	84 81       	ldd	r24, Z+4	; 0x04
    180c:	95 81       	ldd	r25, Z+5	; 0x05
    180e:	42 81       	ldd	r20, Z+2	; 0x02
    1810:	53 81       	ldd	r21, Z+3	; 0x03
    1812:	48 9f       	mul	r20, r24
    1814:	90 01       	movw	r18, r0
    1816:	49 9f       	mul	r20, r25
    1818:	30 0d       	add	r19, r0
    181a:	58 9f       	mul	r21, r24
    181c:	30 0d       	add	r19, r0
    181e:	11 24       	eor	r1, r1
    1820:	36 95       	lsr	r19
    1822:	27 95       	ror	r18
    1824:	36 95       	lsr	r19
    1826:	27 95       	ror	r18
    1828:	36 95       	lsr	r19
    182a:	27 95       	ror	r18
    182c:	a5 ec       	ldi	r26, 0xC5	; 197
    182e:	b0 e2       	ldi	r27, 0x20	; 32
    1830:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1834:	92 95       	swap	r25
    1836:	82 95       	swap	r24
    1838:	8f 70       	andi	r24, 0x0F	; 15
    183a:	89 27       	eor	r24, r25
    183c:	9f 70       	andi	r25, 0x0F	; 15
    183e:	89 27       	eor	r24, r25
    1840:	89 87       	std	Y+9, r24	; 0x09
    1842:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	8a e6       	ldi	r24, 0x6A	; 106
    184a:	98 e1       	ldi	r25, 0x18	; 24
    184c:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
    1850:	ab 01       	movw	r20, r22
    1852:	44 0f       	add	r20, r20
    1854:	55 1f       	adc	r21, r21
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	66 0f       	add	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	46 0f       	add	r20, r22
    1864:	57 1f       	adc	r21, r23
    1866:	d8 01       	movw	r26, r16
    1868:	50 96       	adiw	r26, 0x10	; 16
    186a:	4d 93       	st	X+, r20
    186c:	5c 93       	st	X, r21
    186e:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1870:	9a 01       	movw	r18, r20
    1872:	36 95       	lsr	r19
    1874:	27 95       	ror	r18
    1876:	36 95       	lsr	r19
    1878:	27 95       	ror	r18
    187a:	ab e7       	ldi	r26, 0x7B	; 123
    187c:	b4 e1       	ldi	r27, 0x14	; 20
    187e:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1882:	96 95       	lsr	r25
    1884:	87 95       	ror	r24
    1886:	8e 9d       	mul	r24, r14
    1888:	90 01       	movw	r18, r0
    188a:	8f 9d       	mul	r24, r15
    188c:	30 0d       	add	r19, r0
    188e:	9e 9d       	mul	r25, r14
    1890:	30 0d       	add	r19, r0
    1892:	11 24       	eor	r1, r1
    1894:	42 1b       	sub	r20, r18
    1896:	53 0b       	sbc	r21, r19
    1898:	d8 01       	movw	r26, r16
    189a:	52 96       	adiw	r26, 0x12	; 18
    189c:	4d 93       	st	X+, r20
    189e:	5c 93       	st	X, r21
    18a0:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    18a2:	54 96       	adiw	r26, 0x14	; 20
    18a4:	ed 92       	st	X+, r14
    18a6:	fc 92       	st	X, r15
    18a8:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Fast.Intensity;
    18aa:	84 81       	ldd	r24, Z+4	; 0x04
    18ac:	95 81       	ldd	r25, Z+5	; 0x05
    18ae:	56 96       	adiw	r26, 0x16	; 22
    18b0:	8d 93       	st	X+, r24
    18b2:	9c 93       	st	X, r25
    18b4:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	80 93 54 21 	sts	0x2154, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    18bc:	26 e0       	ldi	r18, 0x06	; 6
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	ae 01       	movw	r20, r28
    18c2:	49 5f       	subi	r20, 0xF9	; 249
    18c4:	5f 4f       	sbci	r21, 0xFF	; 255
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	5a 96       	adiw	r26, 0x1a	; 26
    18cc:	8d 91       	ld	r24, X+
    18ce:	9c 91       	ld	r25, X
    18d0:	5b 97       	sbiw	r26, 0x1b	; 27
    18d2:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    18d6:	2f c1       	rjmp	.+606    	; 0x1b36 <_ZN16CLaserControlApp3RunEv+0xd00>
			case WorkSlow:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Slow.Duration * m_structDGUSDATA_Slow.Frequency / 10;
    18d8:	e9 e5       	ldi	r30, 0x59	; 89
    18da:	f1 e2       	ldi	r31, 0x21	; 33
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	40 81       	ld	r20, Z
    18e2:	51 81       	ldd	r21, Z+1	; 0x01
    18e4:	48 9f       	mul	r20, r24
    18e6:	90 01       	movw	r18, r0
    18e8:	49 9f       	mul	r20, r25
    18ea:	30 0d       	add	r19, r0
    18ec:	58 9f       	mul	r21, r24
    18ee:	30 0d       	add	r19, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	ad ec       	ldi	r26, 0xCD	; 205
    18f4:	bc ec       	ldi	r27, 0xCC	; 204
    18f6:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    18fa:	7c 01       	movw	r14, r24
    18fc:	f6 94       	lsr	r15
    18fe:	e7 94       	ror	r14
    1900:	f6 94       	lsr	r15
    1902:	e7 94       	ror	r14
    1904:	f6 94       	lsr	r15
    1906:	e7 94       	ror	r14
    1908:	eb 86       	std	Y+11, r14	; 0x0b
    190a:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100;
    190c:	84 81       	ldd	r24, Z+4	; 0x04
    190e:	95 81       	ldd	r25, Z+5	; 0x05
    1910:	42 85       	ldd	r20, Z+10	; 0x0a
    1912:	53 85       	ldd	r21, Z+11	; 0x0b
    1914:	48 9f       	mul	r20, r24
    1916:	90 01       	movw	r18, r0
    1918:	49 9f       	mul	r20, r25
    191a:	30 0d       	add	r19, r0
    191c:	58 9f       	mul	r21, r24
    191e:	30 0d       	add	r19, r0
    1920:	11 24       	eor	r1, r1
    1922:	36 95       	lsr	r19
    1924:	27 95       	ror	r18
    1926:	36 95       	lsr	r19
    1928:	27 95       	ror	r18
    192a:	ab e7       	ldi	r26, 0x7B	; 123
    192c:	b4 e1       	ldi	r27, 0x14	; 20
    192e:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1932:	96 95       	lsr	r25
    1934:	87 95       	ror	r24
    1936:	8f 83       	std	Y+7, r24	; 0x07
    1938:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration / 1000;
    193a:	84 81       	ldd	r24, Z+4	; 0x04
    193c:	95 81       	ldd	r25, Z+5	; 0x05
    193e:	42 81       	ldd	r20, Z+2	; 0x02
    1940:	53 81       	ldd	r21, Z+3	; 0x03
    1942:	48 9f       	mul	r20, r24
    1944:	90 01       	movw	r18, r0
    1946:	49 9f       	mul	r20, r25
    1948:	30 0d       	add	r19, r0
    194a:	58 9f       	mul	r21, r24
    194c:	30 0d       	add	r19, r0
    194e:	11 24       	eor	r1, r1
    1950:	36 95       	lsr	r19
    1952:	27 95       	ror	r18
    1954:	36 95       	lsr	r19
    1956:	27 95       	ror	r18
    1958:	36 95       	lsr	r19
    195a:	27 95       	ror	r18
    195c:	a5 ec       	ldi	r26, 0xC5	; 197
    195e:	b0 e2       	ldi	r27, 0x20	; 32
    1960:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1964:	92 95       	swap	r25
    1966:	82 95       	swap	r24
    1968:	8f 70       	andi	r24, 0x0F	; 15
    196a:	89 27       	eor	r24, r25
    196c:	9f 70       	andi	r25, 0x0F	; 15
    196e:	89 27       	eor	r24, r25
    1970:	89 87       	std	Y+9, r24	; 0x09
    1972:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Slow.Frequency) * 10;
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	8a e6       	ldi	r24, 0x6A	; 106
    197a:	98 e1       	ldi	r25, 0x18	; 24
    197c:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
    1980:	ab 01       	movw	r20, r22
    1982:	44 0f       	add	r20, r20
    1984:	55 1f       	adc	r21, r21
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	66 0f       	add	r22, r22
    1990:	77 1f       	adc	r23, r23
    1992:	46 0f       	add	r20, r22
    1994:	57 1f       	adc	r21, r23
    1996:	d8 01       	movw	r26, r16
    1998:	50 96       	adiw	r26, 0x10	; 16
    199a:	4d 93       	st	X+, r20
    199c:	5c 93       	st	X, r21
    199e:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    19a0:	9a 01       	movw	r18, r20
    19a2:	36 95       	lsr	r19
    19a4:	27 95       	ror	r18
    19a6:	36 95       	lsr	r19
    19a8:	27 95       	ror	r18
    19aa:	ab e7       	ldi	r26, 0x7B	; 123
    19ac:	b4 e1       	ldi	r27, 0x14	; 20
    19ae:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    19b2:	96 95       	lsr	r25
    19b4:	87 95       	ror	r24
    19b6:	8e 9d       	mul	r24, r14
    19b8:	90 01       	movw	r18, r0
    19ba:	8f 9d       	mul	r24, r15
    19bc:	30 0d       	add	r19, r0
    19be:	9e 9d       	mul	r25, r14
    19c0:	30 0d       	add	r19, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	42 1b       	sub	r20, r18
    19c6:	53 0b       	sbc	r21, r19
    19c8:	d8 01       	movw	r26, r16
    19ca:	52 96       	adiw	r26, 0x12	; 18
    19cc:	4d 93       	st	X+, r20
    19ce:	5c 93       	st	X, r21
    19d0:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    19d2:	54 96       	adiw	r26, 0x14	; 20
    19d4:	ed 92       	st	X+, r14
    19d6:	fc 92       	st	X, r15
    19d8:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Slow.Intensity;
    19da:	84 81       	ldd	r24, Z+4	; 0x04
    19dc:	95 81       	ldd	r25, Z+5	; 0x05
    19de:	56 96       	adiw	r26, 0x16	; 22
    19e0:	8d 93       	st	X+, r24
    19e2:	9c 93       	st	X, r25
    19e4:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	80 93 54 21 	sts	0x2154, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    19ec:	26 e0       	ldi	r18, 0x06	; 6
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	ae 01       	movw	r20, r28
    19f2:	49 5f       	subi	r20, 0xF9	; 249
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	64 e0       	ldi	r22, 0x04	; 4
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	5a 96       	adiw	r26, 0x1a	; 26
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	5b 97       	sbiw	r26, 0x1b	; 27
    1a02:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1a06:	97 c0       	rjmp	.+302    	; 0x1b36 <_ZN16CLaserControlApp3RunEv+0xd00>
			case WorkMedium:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Medium.Duration * m_structDGUSDATA_Medium.Frequency / 10;
    1a08:	e7 e6       	ldi	r30, 0x67	; 103
    1a0a:	f1 e2       	ldi	r31, 0x21	; 33
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	40 81       	ld	r20, Z
    1a12:	51 81       	ldd	r21, Z+1	; 0x01
    1a14:	48 9f       	mul	r20, r24
    1a16:	90 01       	movw	r18, r0
    1a18:	49 9f       	mul	r20, r25
    1a1a:	30 0d       	add	r19, r0
    1a1c:	58 9f       	mul	r21, r24
    1a1e:	30 0d       	add	r19, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	ad ec       	ldi	r26, 0xCD	; 205
    1a24:	bc ec       	ldi	r27, 0xCC	; 204
    1a26:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1a2a:	7c 01       	movw	r14, r24
    1a2c:	f6 94       	lsr	r15
    1a2e:	e7 94       	ror	r14
    1a30:	f6 94       	lsr	r15
    1a32:	e7 94       	ror	r14
    1a34:	f6 94       	lsr	r15
    1a36:	e7 94       	ror	r14
    1a38:	eb 86       	std	Y+11, r14	; 0x0b
    1a3a:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100;
    1a3c:	84 81       	ldd	r24, Z+4	; 0x04
    1a3e:	95 81       	ldd	r25, Z+5	; 0x05
    1a40:	42 85       	ldd	r20, Z+10	; 0x0a
    1a42:	53 85       	ldd	r21, Z+11	; 0x0b
    1a44:	48 9f       	mul	r20, r24
    1a46:	90 01       	movw	r18, r0
    1a48:	49 9f       	mul	r20, r25
    1a4a:	30 0d       	add	r19, r0
    1a4c:	58 9f       	mul	r21, r24
    1a4e:	30 0d       	add	r19, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	36 95       	lsr	r19
    1a54:	27 95       	ror	r18
    1a56:	36 95       	lsr	r19
    1a58:	27 95       	ror	r18
    1a5a:	ab e7       	ldi	r26, 0x7B	; 123
    1a5c:	b4 e1       	ldi	r27, 0x14	; 20
    1a5e:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1a62:	96 95       	lsr	r25
    1a64:	87 95       	ror	r24
    1a66:	8f 83       	std	Y+7, r24	; 0x07
    1a68:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration / 1000;
    1a6a:	84 81       	ldd	r24, Z+4	; 0x04
    1a6c:	95 81       	ldd	r25, Z+5	; 0x05
    1a6e:	42 81       	ldd	r20, Z+2	; 0x02
    1a70:	53 81       	ldd	r21, Z+3	; 0x03
    1a72:	48 9f       	mul	r20, r24
    1a74:	90 01       	movw	r18, r0
    1a76:	49 9f       	mul	r20, r25
    1a78:	30 0d       	add	r19, r0
    1a7a:	58 9f       	mul	r21, r24
    1a7c:	30 0d       	add	r19, r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	36 95       	lsr	r19
    1a82:	27 95       	ror	r18
    1a84:	36 95       	lsr	r19
    1a86:	27 95       	ror	r18
    1a88:	36 95       	lsr	r19
    1a8a:	27 95       	ror	r18
    1a8c:	a5 ec       	ldi	r26, 0xC5	; 197
    1a8e:	b0 e2       	ldi	r27, 0x20	; 32
    1a90:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1a94:	92 95       	swap	r25
    1a96:	82 95       	swap	r24
    1a98:	8f 70       	andi	r24, 0x0F	; 15
    1a9a:	89 27       	eor	r24, r25
    1a9c:	9f 70       	andi	r25, 0x0F	; 15
    1a9e:	89 27       	eor	r24, r25
    1aa0:	89 87       	std	Y+9, r24	; 0x09
    1aa2:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Medium.Frequency) * 10;
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	8a e6       	ldi	r24, 0x6A	; 106
    1aaa:	98 e1       	ldi	r25, 0x18	; 24
    1aac:	0e 94 47 28 	call	0x508e	; 0x508e <__udivmodhi4>
    1ab0:	ab 01       	movw	r20, r22
    1ab2:	44 0f       	add	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	66 0f       	add	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	46 0f       	add	r20, r22
    1ac4:	57 1f       	adc	r21, r23
    1ac6:	d8 01       	movw	r26, r16
    1ac8:	50 96       	adiw	r26, 0x10	; 16
    1aca:	4d 93       	st	X+, r20
    1acc:	5c 93       	st	X, r21
    1ace:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1ad0:	9a 01       	movw	r18, r20
    1ad2:	36 95       	lsr	r19
    1ad4:	27 95       	ror	r18
    1ad6:	36 95       	lsr	r19
    1ad8:	27 95       	ror	r18
    1ada:	ab e7       	ldi	r26, 0x7B	; 123
    1adc:	b4 e1       	ldi	r27, 0x14	; 20
    1ade:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    1ae2:	96 95       	lsr	r25
    1ae4:	87 95       	ror	r24
    1ae6:	8e 9d       	mul	r24, r14
    1ae8:	90 01       	movw	r18, r0
    1aea:	8f 9d       	mul	r24, r15
    1aec:	30 0d       	add	r19, r0
    1aee:	9e 9d       	mul	r25, r14
    1af0:	30 0d       	add	r19, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	42 1b       	sub	r20, r18
    1af6:	53 0b       	sbc	r21, r19
    1af8:	d8 01       	movw	r26, r16
    1afa:	52 96       	adiw	r26, 0x12	; 18
    1afc:	4d 93       	st	X+, r20
    1afe:	5c 93       	st	X, r21
    1b00:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    1b02:	54 96       	adiw	r26, 0x14	; 20
    1b04:	ed 92       	st	X+, r14
    1b06:	fc 92       	st	X, r15
    1b08:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Medium.Intensity;
    1b0a:	84 81       	ldd	r24, Z+4	; 0x04
    1b0c:	95 81       	ldd	r25, Z+5	; 0x05
    1b0e:	56 96       	adiw	r26, 0x16	; 22
    1b10:	8d 93       	st	X+, r24
    1b12:	9c 93       	st	X, r25
    1b14:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    1b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b18:	80 93 54 21 	sts	0x2154, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    1b1c:	26 e0       	ldi	r18, 0x06	; 6
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	ae 01       	movw	r20, r28
    1b22:	49 5f       	subi	r20, 0xF9	; 249
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	64 e0       	ldi	r22, 0x04	; 4
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	5a 96       	adiw	r26, 0x1a	; 26
    1b2c:	8d 91       	ld	r24, X+
    1b2e:	9c 91       	ld	r25, X
    1b30:	5b 97       	sbiw	r26, 0x1b	; 27
    1b32:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    1b36:	f8 01       	movw	r30, r16
    1b38:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b3a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b3c:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
    1b40:	ce 53       	subi	r28, 0x3E	; 62
    1b42:	dc 4f       	sbci	r29, 0xFC	; 252
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	08 95       	ret

00001b56 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    1b56:	08 95       	ret

00001b58 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    1b58:	08 95       	ret

00001b5a <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    1b5a:	e0 e0       	ldi	r30, 0x00	; 0
    1b5c:	fa e0       	ldi	r31, 0x0A	; 10
    1b5e:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    1b60:	87 e8       	ldi	r24, 0x87	; 135
    1b62:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1b64:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    1b66:	84 e2       	ldi	r24, 0x24	; 36
    1b68:	94 ef       	ldi	r25, 0xF4	; 244
    1b6a:	86 a3       	std	Z+38, r24	; 0x26
    1b6c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    1b6e:	82 e1       	ldi	r24, 0x12	; 18
    1b70:	9a e7       	ldi	r25, 0x7A	; 122
    1b72:	86 a7       	std	Z+46, r24	; 0x2e
    1b74:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1b76:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1b78:	17 82       	std	Z+7, r1	; 0x07
    1b7a:	08 95       	ret

00001b7c <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    1b7c:	e0 e4       	ldi	r30, 0x40	; 64
    1b7e:	fa e0       	ldi	r31, 0x0A	; 10
    1b80:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    1b82:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1b84:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    1b86:	84 e2       	ldi	r24, 0x24	; 36
    1b88:	94 ef       	ldi	r25, 0xF4	; 244
    1b8a:	86 a3       	std	Z+38, r24	; 0x26
    1b8c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1b8e:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1b90:	17 82       	std	Z+7, r1	; 0x07
    1b92:	08 95       	ret

00001b94 <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	8a 01       	movw	r16, r20
    1b9c:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	64 e2       	ldi	r22, 0x24	; 36
    1ba6:	74 ef       	ldi	r23, 0xF4	; 244
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    1bb0:	b8 01       	movw	r22, r16
    1bb2:	76 95       	lsr	r23
    1bb4:	67 95       	ror	r22
    1bb6:	ee e3       	ldi	r30, 0x3E	; 62
    1bb8:	e0 9f       	mul	r30, r16
    1bba:	c0 01       	movw	r24, r0
    1bbc:	e1 9f       	mul	r30, r17
    1bbe:	90 0d       	add	r25, r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	86 0f       	add	r24, r22
    1bc4:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1bc6:	cf 5f       	subi	r28, 0xFF	; 255
    1bc8:	b9 01       	movw	r22, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    1bcc:	76 95       	lsr	r23
    1bce:	67 95       	ror	r22
    1bd0:	ca 95       	dec	r28
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    1bd4:	e0 e0       	ldi	r30, 0x00	; 0
    1bd6:	fa e0       	ldi	r31, 0x0A	; 10
    1bd8:	66 a7       	std	Z+46, r22	; 0x2e
    1bda:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    1bdc:	26 a3       	std	Z+38, r18	; 0x26
    1bde:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    1be0:	a0 e4       	ldi	r26, 0x40	; 64
    1be2:	ba e0       	ldi	r27, 0x0A	; 10
    1be4:	96 96       	adiw	r26, 0x26	; 38
    1be6:	8d 93       	st	X+, r24
    1be8:	9c 93       	st	X, r25
    1bea:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    1bec:	86 e0       	ldi	r24, 0x06	; 6
    1bee:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    1bf0:	87 e0       	ldi	r24, 0x07	; 7
    1bf2:	8c 93       	st	X, r24
}
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    1bfc:	e0 e4       	ldi	r30, 0x40	; 64
    1bfe:	fa e0       	ldi	r31, 0x0A	; 10
    1c00:	84 85       	ldd	r24, Z+12	; 0x0c
    1c02:	80 ff       	sbrs	r24, 0
    1c04:	fd cf       	rjmp	.-6      	; 0x1c00 <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    1c06:	e0 e4       	ldi	r30, 0x40	; 64
    1c08:	fa e0       	ldi	r31, 0x0A	; 10
    1c0a:	84 85       	ldd	r24, Z+12	; 0x0c
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	ba e0       	ldi	r27, 0x0A	; 10
    1c14:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    1c16:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    1c18:	10 a2       	std	Z+32, r1	; 0x20
    1c1a:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    1c1c:	90 96       	adiw	r26, 0x20	; 32
    1c1e:	1d 92       	st	X+, r1
    1c20:	1c 92       	st	X, r1
    1c22:	91 97       	sbiw	r26, 0x21	; 33
    1c24:	2f ef       	ldi	r18, 0xFF	; 255
    1c26:	83 ef       	ldi	r24, 0xF3	; 243
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	21 50       	subi	r18, 0x01	; 1
    1c2c:	80 40       	sbci	r24, 0x00	; 0
    1c2e:	90 40       	sbci	r25, 0x00	; 0
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    1c34:	00 00       	nop
    1c36:	08 95       	ret

00001c38 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    1c3e:	23 e0       	ldi	r18, 0x03	; 3
    1c40:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    1c44:	ce 01       	movw	r24, r28
    1c46:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN12CSoundPlayer9SoundStopEv>
}
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    1c56:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
	cli();
    1c6c:	f8 94       	cli

	beep(a, 500);
    1c6e:	44 ef       	ldi	r20, 0xF4	; 244
    1c70:	51 e0       	ldi	r21, 0x01	; 1
    1c72:	68 eb       	ldi	r22, 0xB8	; 184
    1c74:	71 e0       	ldi	r23, 0x01	; 1
    1c76:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1c7a:	44 ef       	ldi	r20, 0xF4	; 244
    1c7c:	51 e0       	ldi	r21, 0x01	; 1
    1c7e:	68 eb       	ldi	r22, 0xB8	; 184
    1c80:	71 e0       	ldi	r23, 0x01	; 1
    1c82:	ce 01       	movw	r24, r28
    1c84:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1c88:	44 ef       	ldi	r20, 0xF4	; 244
    1c8a:	51 e0       	ldi	r21, 0x01	; 1
    1c8c:	68 eb       	ldi	r22, 0xB8	; 184
    1c8e:	71 e0       	ldi	r23, 0x01	; 1
    1c90:	ce 01       	movw	r24, r28
    1c92:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    1c96:	4e e5       	ldi	r20, 0x5E	; 94
    1c98:	51 e0       	ldi	r21, 0x01	; 1
    1c9a:	6d e5       	ldi	r22, 0x5D	; 93
    1c9c:	71 e0       	ldi	r23, 0x01	; 1
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1ca4:	46 e9       	ldi	r20, 0x96	; 150
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	6b e0       	ldi	r22, 0x0B	; 11
    1caa:	72 e0       	ldi	r23, 0x02	; 2
    1cac:	ce 01       	movw	r24, r28
    1cae:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1cb2:	44 ef       	ldi	r20, 0xF4	; 244
    1cb4:	51 e0       	ldi	r21, 0x01	; 1
    1cb6:	68 eb       	ldi	r22, 0xB8	; 184
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    1cc0:	4e e5       	ldi	r20, 0x5E	; 94
    1cc2:	51 e0       	ldi	r21, 0x01	; 1
    1cc4:	6d e5       	ldi	r22, 0x5D	; 93
    1cc6:	71 e0       	ldi	r23, 0x01	; 1
    1cc8:	ce 01       	movw	r24, r28
    1cca:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1cce:	46 e9       	ldi	r20, 0x96	; 150
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	6b e0       	ldi	r22, 0x0B	; 11
    1cd4:	72 e0       	ldi	r23, 0x02	; 2
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    1cdc:	4a e8       	ldi	r20, 0x8A	; 138
    1cde:	52 e0       	ldi	r21, 0x02	; 2
    1ce0:	68 eb       	ldi	r22, 0xB8	; 184
    1ce2:	71 e0       	ldi	r23, 0x01	; 1
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12CSoundPlayer4beepEjj>
    1cea:	2f ef       	ldi	r18, 0xFF	; 255
    1cec:	85 ea       	ldi	r24, 0xA5	; 165
    1cee:	9e e0       	ldi	r25, 0x0E	; 14
    1cf0:	21 50       	subi	r18, 0x01	; 1
    1cf2:	80 40       	sbci	r24, 0x00	; 0
    1cf4:	90 40       	sbci	r25, 0x00	; 0
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <_ZN12CSoundPlayer4PlayEv+0x8a>
    1cf8:	00 c0       	rjmp	.+0      	; 0x1cfa <_ZN12CSoundPlayer4PlayEv+0x94>
    1cfa:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    1cfc:	78 94       	sei
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    1d04:	fc 01       	movw	r30, r24
    1d06:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1d08:	e0 e0       	ldi	r30, 0x00	; 0
    1d0a:	f8 e0       	ldi	r31, 0x08	; 8
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 7f       	andi	r24, 0xF0	; 240
    1d10:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1d12:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    1d14:	10 a2       	std	Z+32, r1	; 0x20
    1d16:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    1d18:	10 a6       	std	Z+40, r1	; 0x28
    1d1a:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    1d1c:	12 a6       	std	Z+42, r1	; 0x2a
    1d1e:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1d20:	14 a6       	std	Z+44, r1	; 0x2c
    1d22:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    1d24:	16 a6       	std	Z+46, r1	; 0x2e
    1d26:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    1d28:	16 a2       	std	Z+38, r1	; 0x26
    1d2a:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1d2c:	81 81       	ldd	r24, Z+1	; 0x01
    1d2e:	88 7f       	andi	r24, 0xF8	; 248
    1d30:	68 2b       	or	r22, r24
    1d32:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1d34:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1d36:	17 82       	std	Z+7, r1	; 0x07
    1d38:	08 95       	ret

00001d3a <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    1d3a:	e0 e0       	ldi	r30, 0x00	; 0
    1d3c:	f8 e0       	ldi	r31, 0x08	; 8
    1d3e:	66 a3       	std	Z+38, r22	; 0x26
    1d40:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1d42:	20 81       	ld	r18, Z
    1d44:	20 7f       	andi	r18, 0xF0	; 240
    1d46:	dc 01       	movw	r26, r24
    1d48:	12 96       	adiw	r26, 0x02	; 2
    1d4a:	9c 91       	ld	r25, X
    1d4c:	82 2f       	mov	r24, r18
    1d4e:	89 2b       	or	r24, r25
    1d50:	80 83       	st	Z, r24
    1d52:	08 95       	ret

00001d54 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1d54:	e0 e0       	ldi	r30, 0x00	; 0
    1d56:	f8 e0       	ldi	r31, 0x08	; 8
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 7f       	andi	r24, 0xF0	; 240
    1d5c:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1d5e:	10 a2       	std	Z+32, r1	; 0x20
    1d60:	11 a2       	std	Z+33, r1	; 0x21
    1d62:	08 95       	ret

00001d64 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    1d64:	e0 e0       	ldi	r30, 0x00	; 0
    1d66:	f8 e0       	ldi	r31, 0x08	; 8
    1d68:	81 81       	ldd	r24, Z+1	; 0x01
    1d6a:	8f 70       	andi	r24, 0x0F	; 15
    1d6c:	68 2b       	or	r22, r24
    1d6e:	61 83       	std	Z+1, r22	; 0x01
    1d70:	08 95       	ret

00001d72 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    1d72:	e0 e0       	ldi	r30, 0x00	; 0
    1d74:	f8 e0       	ldi	r31, 0x08	; 8
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	60 95       	com	r22
    1d7a:	68 23       	and	r22, r24
    1d7c:	61 83       	std	Z+1, r22	; 0x01
    1d7e:	08 95       	ret

00001d80 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    1d80:	60 93 26 08 	sts	0x0826, r22
    1d84:	70 93 27 08 	sts	0x0827, r23
    1d88:	08 95       	ret

00001d8a <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    1d8a:	60 93 28 08 	sts	0x0828, r22
    1d8e:	70 93 29 08 	sts	0x0829, r23
    1d92:	08 95       	ret

00001d94 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    1d94:	60 93 2a 08 	sts	0x082A, r22
    1d98:	70 93 2b 08 	sts	0x082B, r23
    1d9c:	08 95       	ret

00001d9e <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1d9e:	60 93 2c 08 	sts	0x082C, r22
    1da2:	70 93 2d 08 	sts	0x082D, r23
    1da6:	08 95       	ret

00001da8 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1da8:	60 93 2e 08 	sts	0x082E, r22
    1dac:	70 93 2f 08 	sts	0x082F, r23
    1db0:	08 95       	ret

00001db2 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1db2:	61 15       	cp	r22, r1
    1db4:	71 05       	cpc	r23, r1
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1db8:	e0 e0       	ldi	r30, 0x00	; 0
    1dba:	f8 e0       	ldi	r31, 0x08	; 8
    1dbc:	86 81       	ldd	r24, Z+6	; 0x06
    1dbe:	83 70       	andi	r24, 0x03	; 3
    1dc0:	28 2b       	or	r18, r24
    1dc2:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    1dc4:	60 93 a5 21 	sts	0x21A5, r22
    1dc8:	70 93 a6 21 	sts	0x21A6, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    1dcc:	40 93 9b 22 	sts	0x229B, r20
    1dd0:	50 93 9c 22 	sts	0x229C, r21
    1dd4:	08 95       	ret

00001dd6 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1dd6:	61 15       	cp	r22, r1
    1dd8:	71 05       	cpc	r23, r1
    1dda:	31 f0       	breq	.+12     	; 0x1de8 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1ddc:	e0 e0       	ldi	r30, 0x00	; 0
    1dde:	f8 e0       	ldi	r31, 0x08	; 8
    1de0:	86 81       	ldd	r24, Z+6	; 0x06
    1de2:	8c 70       	andi	r24, 0x0C	; 12
    1de4:	28 2b       	or	r18, r24
    1de6:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    1de8:	60 93 a7 21 	sts	0x21A7, r22
    1dec:	70 93 a8 21 	sts	0x21A8, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    1df0:	40 93 9d 22 	sts	0x229D, r20
    1df4:	50 93 9e 22 	sts	0x229E, r21
    1df8:	08 95       	ret

00001dfa <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1dfa:	61 15       	cp	r22, r1
    1dfc:	71 05       	cpc	r23, r1
    1dfe:	31 f0       	breq	.+12     	; 0x1e0c <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1e00:	e0 e0       	ldi	r30, 0x00	; 0
    1e02:	f8 e0       	ldi	r31, 0x08	; 8
    1e04:	87 81       	ldd	r24, Z+7	; 0x07
    1e06:	83 70       	andi	r24, 0x03	; 3
    1e08:	28 2b       	or	r18, r24
    1e0a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    1e0c:	60 93 a9 21 	sts	0x21A9, r22
    1e10:	70 93 aa 21 	sts	0x21AA, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    1e14:	40 93 9f 22 	sts	0x229F, r20
    1e18:	50 93 a0 22 	sts	0x22A0, r21
    1e1c:	08 95       	ret

00001e1e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1e1e:	61 15       	cp	r22, r1
    1e20:	71 05       	cpc	r23, r1
    1e22:	31 f0       	breq	.+12     	; 0x1e30 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1e24:	e0 e0       	ldi	r30, 0x00	; 0
    1e26:	f8 e0       	ldi	r31, 0x08	; 8
    1e28:	87 81       	ldd	r24, Z+7	; 0x07
    1e2a:	8c 70       	andi	r24, 0x0C	; 12
    1e2c:	28 2b       	or	r18, r24
    1e2e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1e30:	60 93 ab 21 	sts	0x21AB, r22
    1e34:	70 93 ac 21 	sts	0x21AC, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    1e38:	40 93 a1 22 	sts	0x22A1, r20
    1e3c:	50 93 a2 22 	sts	0x22A2, r21
    1e40:	08 95       	ret

00001e42 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1e42:	61 15       	cp	r22, r1
    1e44:	71 05       	cpc	r23, r1
    1e46:	31 f0       	breq	.+12     	; 0x1e54 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    1e48:	e0 e0       	ldi	r30, 0x00	; 0
    1e4a:	f8 e0       	ldi	r31, 0x08	; 8
    1e4c:	87 81       	ldd	r24, Z+7	; 0x07
    1e4e:	80 73       	andi	r24, 0x30	; 48
    1e50:	28 2b       	or	r18, r24
    1e52:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    1e54:	60 93 ad 21 	sts	0x21AD, r22
    1e58:	70 93 ae 21 	sts	0x21AE, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    1e5c:	40 93 a3 22 	sts	0x22A3, r20
    1e60:	50 93 a4 22 	sts	0x22A4, r21
    1e64:	08 95       	ret

00001e66 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    1e66:	61 15       	cp	r22, r1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1e6c:	e0 e0       	ldi	r30, 0x00	; 0
    1e6e:	f8 e0       	ldi	r31, 0x08	; 8
    1e70:	87 81       	ldd	r24, Z+7	; 0x07
    1e72:	80 7c       	andi	r24, 0xC0	; 192
    1e74:	28 2b       	or	r18, r24
    1e76:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    1e78:	60 93 af 21 	sts	0x21AF, r22
    1e7c:	70 93 b0 21 	sts	0x21B0, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    1e80:	40 93 a5 22 	sts	0x22A5, r20
    1e84:	50 93 a6 22 	sts	0x22A6, r21
    1e88:	08 95       	ret

00001e8a <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	ec 01       	movw	r28, r24
    1e90:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZN6CTimerC1Ev>
    1e94:	8a eb       	ldi	r24, 0xBA	; 186
    1e96:	90 e2       	ldi	r25, 0x20	; 32
    1e98:	88 83       	st	Y, r24
    1e9a:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    1ea2:	2a eb       	ldi	r18, 0xBA	; 186
    1ea4:	30 e2       	ldi	r19, 0x20	; 32
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	20 83       	st	Z, r18
    1eaa:	31 83       	std	Z+1, r19	; 0x01
    1eac:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6CTimerD1Ev>
    1eb0:	08 95       	ret

00001eb2 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1eb6:	e0 e0       	ldi	r30, 0x00	; 0
    1eb8:	fb e0       	ldi	r31, 0x0B	; 11
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 7f       	andi	r24, 0xF0	; 240
    1ebe:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1ec0:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    1ec2:	10 a2       	std	Z+32, r1	; 0x20
    1ec4:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    1ec6:	10 a6       	std	Z+40, r1	; 0x28
    1ec8:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    1eca:	12 a6       	std	Z+42, r1	; 0x2a
    1ecc:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    1ece:	14 a6       	std	Z+44, r1	; 0x2c
    1ed0:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    1ed2:	16 a6       	std	Z+46, r1	; 0x2e
    1ed4:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    1ed6:	16 a2       	std	Z+38, r1	; 0x26
    1ed8:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1eda:	81 81       	ldd	r24, Z+1	; 0x01
    1edc:	88 7f       	andi	r24, 0xF8	; 248
    1ede:	68 2b       	or	r22, r24
    1ee0:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1ee2:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1ee4:	17 82       	std	Z+7, r1	; 0x07
    1ee6:	08 95       	ret

00001ee8 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	fb e0       	ldi	r31, 0x0B	; 11
    1eec:	66 a3       	std	Z+38, r22	; 0x26
    1eee:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1ef0:	20 81       	ld	r18, Z
    1ef2:	20 7f       	andi	r18, 0xF0	; 240
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	12 96       	adiw	r26, 0x02	; 2
    1ef8:	9c 91       	ld	r25, X
    1efa:	82 2f       	mov	r24, r18
    1efc:	89 2b       	or	r24, r25
    1efe:	80 83       	st	Z, r24
    1f00:	08 95       	ret

00001f02 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1f02:	e0 e0       	ldi	r30, 0x00	; 0
    1f04:	fb e0       	ldi	r31, 0x0B	; 11
    1f06:	80 81       	ld	r24, Z
    1f08:	80 7f       	andi	r24, 0xF0	; 240
    1f0a:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    1f0c:	10 a2       	std	Z+32, r1	; 0x20
    1f0e:	11 a2       	std	Z+33, r1	; 0x21
    1f10:	08 95       	ret

00001f12 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    1f12:	e0 e0       	ldi	r30, 0x00	; 0
    1f14:	fb e0       	ldi	r31, 0x0B	; 11
    1f16:	81 81       	ldd	r24, Z+1	; 0x01
    1f18:	68 2b       	or	r22, r24
    1f1a:	61 83       	std	Z+1, r22	; 0x01
    1f1c:	08 95       	ret

00001f1e <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    1f1e:	e0 e0       	ldi	r30, 0x00	; 0
    1f20:	fb e0       	ldi	r31, 0x0B	; 11
    1f22:	81 81       	ldd	r24, Z+1	; 0x01
    1f24:	60 95       	com	r22
    1f26:	68 23       	and	r22, r24
    1f28:	61 83       	std	Z+1, r22	; 0x01
    1f2a:	08 95       	ret

00001f2c <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    1f2c:	e0 e0       	ldi	r30, 0x00	; 0
    1f2e:	fb e0       	ldi	r31, 0x0B	; 11
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	62 95       	swap	r22
    1f34:	6f 70       	andi	r22, 0x0F	; 15
    1f36:	68 2b       	or	r22, r24
    1f38:	62 83       	std	Z+2, r22	; 0x02
    1f3a:	08 95       	ret

00001f3c <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    1f3c:	e0 e0       	ldi	r30, 0x00	; 0
    1f3e:	fb e0       	ldi	r31, 0x0B	; 11
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	62 95       	swap	r22
    1f44:	6f 70       	andi	r22, 0x0F	; 15
    1f46:	60 95       	com	r22
    1f48:	68 23       	and	r22, r24
    1f4a:	62 83       	std	Z+2, r22	; 0x02
    1f4c:	08 95       	ret

00001f4e <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    1f4e:	60 93 26 0b 	sts	0x0B26, r22
    1f52:	70 93 27 0b 	sts	0x0B27, r23
    1f56:	08 95       	ret

00001f58 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    1f58:	60 93 28 0b 	sts	0x0B28, r22
    1f5c:	70 93 29 0b 	sts	0x0B29, r23
    1f60:	08 95       	ret

00001f62 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    1f62:	60 93 2a 0b 	sts	0x0B2A, r22
    1f66:	70 93 2b 0b 	sts	0x0B2B, r23
    1f6a:	08 95       	ret

00001f6c <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    1f6c:	60 93 2c 0b 	sts	0x0B2C, r22
    1f70:	70 93 2d 0b 	sts	0x0B2D, r23
    1f74:	08 95       	ret

00001f76 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    1f76:	60 93 2e 0b 	sts	0x0B2E, r22
    1f7a:	70 93 2f 0b 	sts	0x0B2F, r23
    1f7e:	08 95       	ret

00001f80 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1f80:	61 15       	cp	r22, r1
    1f82:	71 05       	cpc	r23, r1
    1f84:	31 f0       	breq	.+12     	; 0x1f92 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1f86:	e0 e0       	ldi	r30, 0x00	; 0
    1f88:	fb e0       	ldi	r31, 0x0B	; 11
    1f8a:	86 81       	ldd	r24, Z+6	; 0x06
    1f8c:	83 70       	andi	r24, 0x03	; 3
    1f8e:	28 2b       	or	r18, r24
    1f90:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    1f92:	60 93 61 22 	sts	0x2261, r22
    1f96:	70 93 62 22 	sts	0x2262, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    1f9a:	40 93 57 23 	sts	0x2357, r20
    1f9e:	50 93 58 23 	sts	0x2358, r21
    1fa2:	08 95       	ret

00001fa4 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1fa4:	61 15       	cp	r22, r1
    1fa6:	71 05       	cpc	r23, r1
    1fa8:	31 f0       	breq	.+12     	; 0x1fb6 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1faa:	e0 e0       	ldi	r30, 0x00	; 0
    1fac:	fb e0       	ldi	r31, 0x0B	; 11
    1fae:	86 81       	ldd	r24, Z+6	; 0x06
    1fb0:	8c 70       	andi	r24, 0x0C	; 12
    1fb2:	28 2b       	or	r18, r24
    1fb4:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    1fb6:	60 93 63 22 	sts	0x2263, r22
    1fba:	70 93 64 22 	sts	0x2264, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    1fbe:	40 93 59 23 	sts	0x2359, r20
    1fc2:	50 93 5a 23 	sts	0x235A, r21
    1fc6:	08 95       	ret

00001fc8 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1fc8:	61 15       	cp	r22, r1
    1fca:	71 05       	cpc	r23, r1
    1fcc:	31 f0       	breq	.+12     	; 0x1fda <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1fce:	e0 e0       	ldi	r30, 0x00	; 0
    1fd0:	fb e0       	ldi	r31, 0x0B	; 11
    1fd2:	87 81       	ldd	r24, Z+7	; 0x07
    1fd4:	83 70       	andi	r24, 0x03	; 3
    1fd6:	28 2b       	or	r18, r24
    1fd8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    1fda:	60 93 65 22 	sts	0x2265, r22
    1fde:	70 93 66 22 	sts	0x2266, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    1fe2:	40 93 5b 23 	sts	0x235B, r20
    1fe6:	50 93 5c 23 	sts	0x235C, r21
    1fea:	08 95       	ret

00001fec <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1fec:	61 15       	cp	r22, r1
    1fee:	71 05       	cpc	r23, r1
    1ff0:	31 f0       	breq	.+12     	; 0x1ffe <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1ff2:	e0 e0       	ldi	r30, 0x00	; 0
    1ff4:	fb e0       	ldi	r31, 0x0B	; 11
    1ff6:	87 81       	ldd	r24, Z+7	; 0x07
    1ff8:	8c 70       	andi	r24, 0x0C	; 12
    1ffa:	28 2b       	or	r18, r24
    1ffc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    1ffe:	60 93 67 22 	sts	0x2267, r22
    2002:	70 93 68 22 	sts	0x2268, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    2006:	40 93 5d 23 	sts	0x235D, r20
    200a:	50 93 5e 23 	sts	0x235E, r21
    200e:	08 95       	ret

00002010 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    2010:	61 15       	cp	r22, r1
    2012:	71 05       	cpc	r23, r1
    2014:	31 f0       	breq	.+12     	; 0x2022 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    2016:	e0 e0       	ldi	r30, 0x00	; 0
    2018:	fb e0       	ldi	r31, 0x0B	; 11
    201a:	87 81       	ldd	r24, Z+7	; 0x07
    201c:	80 73       	andi	r24, 0x30	; 48
    201e:	28 2b       	or	r18, r24
    2020:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    2022:	60 93 69 22 	sts	0x2269, r22
    2026:	70 93 6a 22 	sts	0x226A, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    202a:	40 93 5f 23 	sts	0x235F, r20
    202e:	50 93 60 23 	sts	0x2360, r21
    2032:	08 95       	ret

00002034 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    2034:	61 15       	cp	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	31 f0       	breq	.+12     	; 0x2046 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    203a:	e0 e0       	ldi	r30, 0x00	; 0
    203c:	fb e0       	ldi	r31, 0x0B	; 11
    203e:	87 81       	ldd	r24, Z+7	; 0x07
    2040:	80 7c       	andi	r24, 0xC0	; 192
    2042:	28 2b       	or	r18, r24
    2044:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    2046:	60 93 6b 22 	sts	0x226B, r22
    204a:	70 93 6c 22 	sts	0x226C, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    204e:	40 93 61 23 	sts	0x2361, r20
    2052:	50 93 62 23 	sts	0x2362, r21
    2056:	08 95       	ret

00002058 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ec 01       	movw	r28, r24
    205e:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZN6CTimerC1Ev>
    2062:	8e ed       	ldi	r24, 0xDE	; 222
    2064:	90 e2       	ldi	r25, 0x20	; 32
    2066:	88 83       	st	Y, r24
    2068:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	08 95       	ret

00002070 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    2070:	2e ed       	ldi	r18, 0xDE	; 222
    2072:	30 e2       	ldi	r19, 0x20	; 32
    2074:	fc 01       	movw	r30, r24
    2076:	20 83       	st	Z, r18
    2078:	31 83       	std	Z+1, r19	; 0x01
    207a:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6CTimerD1Ev>
    207e:	08 95       	ret

00002080 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    2080:	08 95       	ret

00002082 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    2082:	08 95       	ret

00002084 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    2084:	ef 92       	push	r14
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    2090:	e0 e8       	ldi	r30, 0x80	; 128
    2092:	f6 e0       	ldi	r31, 0x06	; 6
    2094:	80 eb       	ldi	r24, 0xB0	; 176
    2096:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    2098:	90 e4       	ldi	r25, 0x40	; 64
    209a:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    209c:	90 ec       	ldi	r25, 0xC0	; 192
    209e:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20a0:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20a2:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20a4:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    20a6:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    20a8:	61 11       	cpse	r22, r1
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    20ac:	80 e4       	ldi	r24, 0x40	; 64
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    20b0:	80 e5       	ldi	r24, 0x50	; 80
    20b2:	01 11       	cpse	r16, r1
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    20ba:	30 e8       	ldi	r19, 0x80	; 128
    20bc:	41 11       	cpse	r20, r1
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    20c4:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    20c6:	22 0f       	add	r18, r18
    20c8:	22 0f       	add	r18, r18
    20ca:	e2 2a       	or	r14, r18
    20cc:	e8 2a       	or	r14, r24
    20ce:	e3 2a       	or	r14, r19
		prescaler;
    20d0:	e9 2a       	or	r14, r25
    20d2:	00 ec       	ldi	r16, 0xC0	; 192
    20d4:	1a e0       	ldi	r17, 0x0A	; 10
    20d6:	f8 01       	movw	r30, r16
    20d8:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	0e 94 b3 28 	call	0x5166	; 0x5166 <malloc>
    20e2:	88 83       	st	Y, r24
    20e4:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	f8 01       	movw	r30, r16
    20ea:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    20ec:	8e eb       	ldi	r24, 0xBE	; 190
    20ee:	90 e1       	ldi	r25, 0x10	; 16
    20f0:	80 93 fb 21 	sts	0x21FB, r24
    20f4:	90 93 fc 21 	sts	0x21FC, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    20f8:	c0 93 f1 22 	sts	0x22F1, r28
    20fc:	d0 93 f2 22 	sts	0x22F2, r29
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ef 90       	pop	r14
    210a:	08 95       	ret

0000210c <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	ec 01       	movw	r28, r24
	rx_pos = length;
    2112:	4a 83       	std	Y+2, r20	; 0x02
    2114:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
    2116:	4c 83       	std	Y+4, r20	; 0x04
    2118:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
    211a:	88 81       	ld	r24, Y
    211c:	99 81       	ldd	r25, Y+1	; 0x01
    211e:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
    2122:	80 e1       	ldi	r24, 0x10	; 16
    2124:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
    2128:	88 81       	ld	r24, Y
    212a:	99 81       	ldd	r25, Y+1	; 0x01
    212c:	4a 81       	ldd	r20, Y+2	; 0x02
    212e:	5b 81       	ldd	r21, Y+3	; 0x03
    2130:	9a 01       	movw	r18, r20
    2132:	21 50       	subi	r18, 0x01	; 1
    2134:	31 09       	sbc	r19, r1
    2136:	2a 83       	std	Y+2, r18	; 0x02
    2138:	3b 83       	std	Y+3, r19	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	80 81       	ld	r24, Z
    2142:	80 93 c3 0a 	sts	0x0AC3, r24
}
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	08 95       	ret

0000214c <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    214c:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	89 2b       	or	r24, r25
    2154:	79 f0       	breq	.+30     	; 0x2174 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2156:	40 81       	ld	r20, Z
    2158:	51 81       	ldd	r21, Z+1	; 0x01
    215a:	22 81       	ldd	r18, Z+2	; 0x02
    215c:	33 81       	ldd	r19, Z+3	; 0x03
    215e:	c9 01       	movw	r24, r18
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	82 83       	std	Z+2, r24	; 0x02
    2164:	93 83       	std	Z+3, r25	; 0x03
    2166:	fa 01       	movw	r30, r20
    2168:	e8 0f       	add	r30, r24
    216a:	f9 1f       	adc	r31, r25
    216c:	80 81       	ld	r24, Z
    216e:	80 93 c3 0a 	sts	0x0AC3, r24
    2172:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    2174:	80 e1       	ldi	r24, 0x10	; 16
    2176:	80 93 85 06 	sts	0x0685, r24
    217a:	08 95       	ret

0000217c <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    217c:	0e 94 a6 10 	call	0x214c	; 0x214c <_ZN4CSPI10OnTransmitEv>
    2180:	08 95       	ret

00002182 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    2182:	26 e0       	ldi	r18, 0x06	; 6
    2184:	31 e2       	ldi	r19, 0x21	; 33
    2186:	fc 01       	movw	r30, r24
    2188:	20 83       	st	Z, r18
    218a:	31 83       	std	Z+1, r19	; 0x01
    218c:	08 95       	ret

0000218e <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    218e:	08 95       	ret

00002190 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    2190:	2a e2       	ldi	r18, 0x2A	; 42
    2192:	31 e2       	ldi	r19, 0x21	; 33
    2194:	fc 01       	movw	r30, r24
    2196:	20 83       	st	Z, r18
    2198:	31 83       	std	Z+1, r19	; 0x01
    219a:	08 95       	ret

0000219c <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    219c:	08 95       	ret

0000219e <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	0b b6       	in	r0, 0x3b	; 59
    21aa:	0f 92       	push	r0
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
    21c4:	e0 91 8b 21 	lds	r30, 0x218B
    21c8:	f0 91 8c 21 	lds	r31, 0x218C
    21cc:	30 97       	sbiw	r30, 0x00	; 0
    21ce:	29 f0       	breq	.+10     	; 0x21da <__vector_1+0x3c>
    21d0:	80 91 81 22 	lds	r24, 0x2281
    21d4:	90 91 82 22 	lds	r25, 0x2282
    21d8:	19 95       	eicall
    21da:	ff 91       	pop	r31
    21dc:	ef 91       	pop	r30
    21de:	bf 91       	pop	r27
    21e0:	af 91       	pop	r26
    21e2:	9f 91       	pop	r25
    21e4:	8f 91       	pop	r24
    21e6:	7f 91       	pop	r23
    21e8:	6f 91       	pop	r22
    21ea:	5f 91       	pop	r21
    21ec:	4f 91       	pop	r20
    21ee:	3f 91       	pop	r19
    21f0:	2f 91       	pop	r18
    21f2:	0f 90       	pop	r0
    21f4:	0b be       	out	0x3b, r0	; 59
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	0f 90       	pop	r0
    21fc:	1f 90       	pop	r1
    21fe:	18 95       	reti

00002200 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    2200:	1f 92       	push	r1
    2202:	0f 92       	push	r0
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	0f 92       	push	r0
    2208:	11 24       	eor	r1, r1
    220a:	0b b6       	in	r0, 0x3b	; 59
    220c:	0f 92       	push	r0
    220e:	2f 93       	push	r18
    2210:	3f 93       	push	r19
    2212:	4f 93       	push	r20
    2214:	5f 93       	push	r21
    2216:	6f 93       	push	r22
    2218:	7f 93       	push	r23
    221a:	8f 93       	push	r24
    221c:	9f 93       	push	r25
    221e:	af 93       	push	r26
    2220:	bf 93       	push	r27
    2222:	ef 93       	push	r30
    2224:	ff 93       	push	r31
    2226:	e0 91 8d 21 	lds	r30, 0x218D
    222a:	f0 91 8e 21 	lds	r31, 0x218E
    222e:	30 97       	sbiw	r30, 0x00	; 0
    2230:	29 f0       	breq	.+10     	; 0x223c <__vector_2+0x3c>
    2232:	80 91 83 22 	lds	r24, 0x2283
    2236:	90 91 84 22 	lds	r25, 0x2284
    223a:	19 95       	eicall
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	bf 91       	pop	r27
    2242:	af 91       	pop	r26
    2244:	9f 91       	pop	r25
    2246:	8f 91       	pop	r24
    2248:	7f 91       	pop	r23
    224a:	6f 91       	pop	r22
    224c:	5f 91       	pop	r21
    224e:	4f 91       	pop	r20
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	0f 90       	pop	r0
    2256:	0b be       	out	0x3b, r0	; 59
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	0f 90       	pop	r0
    225e:	1f 90       	pop	r1
    2260:	18 95       	reti

00002262 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
    226c:	0b b6       	in	r0, 0x3b	; 59
    226e:	0f 92       	push	r0
    2270:	2f 93       	push	r18
    2272:	3f 93       	push	r19
    2274:	4f 93       	push	r20
    2276:	5f 93       	push	r21
    2278:	6f 93       	push	r22
    227a:	7f 93       	push	r23
    227c:	8f 93       	push	r24
    227e:	9f 93       	push	r25
    2280:	af 93       	push	r26
    2282:	bf 93       	push	r27
    2284:	ef 93       	push	r30
    2286:	ff 93       	push	r31
    2288:	e0 91 8f 21 	lds	r30, 0x218F
    228c:	f0 91 90 21 	lds	r31, 0x2190
    2290:	30 97       	sbiw	r30, 0x00	; 0
    2292:	29 f0       	breq	.+10     	; 0x229e <__vector_3+0x3c>
    2294:	80 91 85 22 	lds	r24, 0x2285
    2298:	90 91 86 22 	lds	r25, 0x2286
    229c:	19 95       	eicall
    229e:	ff 91       	pop	r31
    22a0:	ef 91       	pop	r30
    22a2:	bf 91       	pop	r27
    22a4:	af 91       	pop	r26
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	7f 91       	pop	r23
    22ac:	6f 91       	pop	r22
    22ae:	5f 91       	pop	r21
    22b0:	4f 91       	pop	r20
    22b2:	3f 91       	pop	r19
    22b4:	2f 91       	pop	r18
    22b6:	0f 90       	pop	r0
    22b8:	0b be       	out	0x3b, r0	; 59
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	0f 90       	pop	r0
    22c0:	1f 90       	pop	r1
    22c2:	18 95       	reti

000022c4 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	0b b6       	in	r0, 0x3b	; 59
    22d0:	0f 92       	push	r0
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
    22ea:	e0 91 91 21 	lds	r30, 0x2191
    22ee:	f0 91 92 21 	lds	r31, 0x2192
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	29 f0       	breq	.+10     	; 0x2300 <__vector_4+0x3c>
    22f6:	80 91 87 22 	lds	r24, 0x2287
    22fa:	90 91 88 22 	lds	r25, 0x2288
    22fe:	19 95       	eicall
    2300:	ff 91       	pop	r31
    2302:	ef 91       	pop	r30
    2304:	bf 91       	pop	r27
    2306:	af 91       	pop	r26
    2308:	9f 91       	pop	r25
    230a:	8f 91       	pop	r24
    230c:	7f 91       	pop	r23
    230e:	6f 91       	pop	r22
    2310:	5f 91       	pop	r21
    2312:	4f 91       	pop	r20
    2314:	3f 91       	pop	r19
    2316:	2f 91       	pop	r18
    2318:	0f 90       	pop	r0
    231a:	0b be       	out	0x3b, r0	; 59
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	0b b6       	in	r0, 0x3b	; 59
    2332:	0f 92       	push	r0
    2334:	2f 93       	push	r18
    2336:	3f 93       	push	r19
    2338:	4f 93       	push	r20
    233a:	5f 93       	push	r21
    233c:	6f 93       	push	r22
    233e:	7f 93       	push	r23
    2340:	8f 93       	push	r24
    2342:	9f 93       	push	r25
    2344:	af 93       	push	r26
    2346:	bf 93       	push	r27
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	e0 91 93 21 	lds	r30, 0x2193
    2350:	f0 91 94 21 	lds	r31, 0x2194
    2354:	30 97       	sbiw	r30, 0x00	; 0
    2356:	29 f0       	breq	.+10     	; 0x2362 <__vector_5+0x3c>
    2358:	80 91 89 22 	lds	r24, 0x2289
    235c:	90 91 8a 22 	lds	r25, 0x228A
    2360:	19 95       	eicall
    2362:	ff 91       	pop	r31
    2364:	ef 91       	pop	r30
    2366:	bf 91       	pop	r27
    2368:	af 91       	pop	r26
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	7f 91       	pop	r23
    2370:	6f 91       	pop	r22
    2372:	5f 91       	pop	r21
    2374:	4f 91       	pop	r20
    2376:	3f 91       	pop	r19
    2378:	2f 91       	pop	r18
    237a:	0f 90       	pop	r0
    237c:	0b be       	out	0x3b, r0	; 59
    237e:	0f 90       	pop	r0
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	0f 90       	pop	r0
    2384:	1f 90       	pop	r1
    2386:	18 95       	reti

00002388 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	0b b6       	in	r0, 0x3b	; 59
    2394:	0f 92       	push	r0
    2396:	2f 93       	push	r18
    2398:	3f 93       	push	r19
    239a:	4f 93       	push	r20
    239c:	5f 93       	push	r21
    239e:	6f 93       	push	r22
    23a0:	7f 93       	push	r23
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
    23ae:	e0 91 95 21 	lds	r30, 0x2195
    23b2:	f0 91 96 21 	lds	r31, 0x2196
    23b6:	30 97       	sbiw	r30, 0x00	; 0
    23b8:	29 f0       	breq	.+10     	; 0x23c4 <__vector_6+0x3c>
    23ba:	80 91 8b 22 	lds	r24, 0x228B
    23be:	90 91 8c 22 	lds	r25, 0x228C
    23c2:	19 95       	eicall
    23c4:	ff 91       	pop	r31
    23c6:	ef 91       	pop	r30
    23c8:	bf 91       	pop	r27
    23ca:	af 91       	pop	r26
    23cc:	9f 91       	pop	r25
    23ce:	8f 91       	pop	r24
    23d0:	7f 91       	pop	r23
    23d2:	6f 91       	pop	r22
    23d4:	5f 91       	pop	r21
    23d6:	4f 91       	pop	r20
    23d8:	3f 91       	pop	r19
    23da:	2f 91       	pop	r18
    23dc:	0f 90       	pop	r0
    23de:	0b be       	out	0x3b, r0	; 59
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    23ea:	1f 92       	push	r1
    23ec:	0f 92       	push	r0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	0f 92       	push	r0
    23f2:	11 24       	eor	r1, r1
    23f4:	0b b6       	in	r0, 0x3b	; 59
    23f6:	0f 92       	push	r0
    23f8:	2f 93       	push	r18
    23fa:	3f 93       	push	r19
    23fc:	4f 93       	push	r20
    23fe:	5f 93       	push	r21
    2400:	6f 93       	push	r22
    2402:	7f 93       	push	r23
    2404:	8f 93       	push	r24
    2406:	9f 93       	push	r25
    2408:	af 93       	push	r26
    240a:	bf 93       	push	r27
    240c:	ef 93       	push	r30
    240e:	ff 93       	push	r31
    2410:	e0 91 97 21 	lds	r30, 0x2197
    2414:	f0 91 98 21 	lds	r31, 0x2198
    2418:	30 97       	sbiw	r30, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_7+0x3c>
    241c:	80 91 8d 22 	lds	r24, 0x228D
    2420:	90 91 8e 22 	lds	r25, 0x228E
    2424:	19 95       	eicall
    2426:	ff 91       	pop	r31
    2428:	ef 91       	pop	r30
    242a:	bf 91       	pop	r27
    242c:	af 91       	pop	r26
    242e:	9f 91       	pop	r25
    2430:	8f 91       	pop	r24
    2432:	7f 91       	pop	r23
    2434:	6f 91       	pop	r22
    2436:	5f 91       	pop	r21
    2438:	4f 91       	pop	r20
    243a:	3f 91       	pop	r19
    243c:	2f 91       	pop	r18
    243e:	0f 90       	pop	r0
    2440:	0b be       	out	0x3b, r0	; 59
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	0b b6       	in	r0, 0x3b	; 59
    2458:	0f 92       	push	r0
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
    2472:	e0 91 99 21 	lds	r30, 0x2199
    2476:	f0 91 9a 21 	lds	r31, 0x219A
    247a:	30 97       	sbiw	r30, 0x00	; 0
    247c:	29 f0       	breq	.+10     	; 0x2488 <__vector_8+0x3c>
    247e:	80 91 8f 22 	lds	r24, 0x228F
    2482:	90 91 90 22 	lds	r25, 0x2290
    2486:	19 95       	eicall
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0b be       	out	0x3b, r0	; 59
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	0b b6       	in	r0, 0x3b	; 59
    24ba:	0f 92       	push	r0
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
    24d4:	e0 91 9b 21 	lds	r30, 0x219B
    24d8:	f0 91 9c 21 	lds	r31, 0x219C
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	29 f0       	breq	.+10     	; 0x24ea <__vector_9+0x3c>
    24e0:	80 91 91 22 	lds	r24, 0x2291
    24e4:	90 91 92 22 	lds	r25, 0x2292
    24e8:	19 95       	eicall
    24ea:	ff 91       	pop	r31
    24ec:	ef 91       	pop	r30
    24ee:	bf 91       	pop	r27
    24f0:	af 91       	pop	r26
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	7f 91       	pop	r23
    24f8:	6f 91       	pop	r22
    24fa:	5f 91       	pop	r21
    24fc:	4f 91       	pop	r20
    24fe:	3f 91       	pop	r19
    2500:	2f 91       	pop	r18
    2502:	0f 90       	pop	r0
    2504:	0b be       	out	0x3b, r0	; 59
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    2510:	1f 92       	push	r1
    2512:	0f 92       	push	r0
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	0f 92       	push	r0
    2518:	11 24       	eor	r1, r1
    251a:	0b b6       	in	r0, 0x3b	; 59
    251c:	0f 92       	push	r0
    251e:	2f 93       	push	r18
    2520:	3f 93       	push	r19
    2522:	4f 93       	push	r20
    2524:	5f 93       	push	r21
    2526:	6f 93       	push	r22
    2528:	7f 93       	push	r23
    252a:	8f 93       	push	r24
    252c:	9f 93       	push	r25
    252e:	af 93       	push	r26
    2530:	bf 93       	push	r27
    2532:	ef 93       	push	r30
    2534:	ff 93       	push	r31
    2536:	e0 91 9d 21 	lds	r30, 0x219D
    253a:	f0 91 9e 21 	lds	r31, 0x219E
    253e:	30 97       	sbiw	r30, 0x00	; 0
    2540:	29 f0       	breq	.+10     	; 0x254c <__vector_10+0x3c>
    2542:	80 91 93 22 	lds	r24, 0x2293
    2546:	90 91 94 22 	lds	r25, 0x2294
    254a:	19 95       	eicall
    254c:	ff 91       	pop	r31
    254e:	ef 91       	pop	r30
    2550:	bf 91       	pop	r27
    2552:	af 91       	pop	r26
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	7f 91       	pop	r23
    255a:	6f 91       	pop	r22
    255c:	5f 91       	pop	r21
    255e:	4f 91       	pop	r20
    2560:	3f 91       	pop	r19
    2562:	2f 91       	pop	r18
    2564:	0f 90       	pop	r0
    2566:	0b be       	out	0x3b, r0	; 59
    2568:	0f 90       	pop	r0
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	0f 90       	pop	r0
    256e:	1f 90       	pop	r1
    2570:	18 95       	reti

00002572 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2572:	1f 92       	push	r1
    2574:	0f 92       	push	r0
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	0f 92       	push	r0
    257a:	11 24       	eor	r1, r1
    257c:	0b b6       	in	r0, 0x3b	; 59
    257e:	0f 92       	push	r0
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
    2598:	e0 91 9f 21 	lds	r30, 0x219F
    259c:	f0 91 a0 21 	lds	r31, 0x21A0
    25a0:	30 97       	sbiw	r30, 0x00	; 0
    25a2:	29 f0       	breq	.+10     	; 0x25ae <__vector_11+0x3c>
    25a4:	80 91 95 22 	lds	r24, 0x2295
    25a8:	90 91 96 22 	lds	r25, 0x2296
    25ac:	19 95       	eicall
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	bf 91       	pop	r27
    25b4:	af 91       	pop	r26
    25b6:	9f 91       	pop	r25
    25b8:	8f 91       	pop	r24
    25ba:	7f 91       	pop	r23
    25bc:	6f 91       	pop	r22
    25be:	5f 91       	pop	r21
    25c0:	4f 91       	pop	r20
    25c2:	3f 91       	pop	r19
    25c4:	2f 91       	pop	r18
    25c6:	0f 90       	pop	r0
    25c8:	0b be       	out	0x3b, r0	; 59
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0
    25d0:	1f 90       	pop	r1
    25d2:	18 95       	reti

000025d4 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	0b b6       	in	r0, 0x3b	; 59
    25e0:	0f 92       	push	r0
    25e2:	2f 93       	push	r18
    25e4:	3f 93       	push	r19
    25e6:	4f 93       	push	r20
    25e8:	5f 93       	push	r21
    25ea:	6f 93       	push	r22
    25ec:	7f 93       	push	r23
    25ee:	8f 93       	push	r24
    25f0:	9f 93       	push	r25
    25f2:	af 93       	push	r26
    25f4:	bf 93       	push	r27
    25f6:	ef 93       	push	r30
    25f8:	ff 93       	push	r31
    25fa:	e0 91 a1 21 	lds	r30, 0x21A1
    25fe:	f0 91 a2 21 	lds	r31, 0x21A2
    2602:	30 97       	sbiw	r30, 0x00	; 0
    2604:	29 f0       	breq	.+10     	; 0x2610 <__vector_12+0x3c>
    2606:	80 91 97 22 	lds	r24, 0x2297
    260a:	90 91 98 22 	lds	r25, 0x2298
    260e:	19 95       	eicall
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	7f 91       	pop	r23
    261e:	6f 91       	pop	r22
    2620:	5f 91       	pop	r21
    2622:	4f 91       	pop	r20
    2624:	3f 91       	pop	r19
    2626:	2f 91       	pop	r18
    2628:	0f 90       	pop	r0
    262a:	0b be       	out	0x3b, r0	; 59
    262c:	0f 90       	pop	r0
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	0f 90       	pop	r0
    2632:	1f 90       	pop	r1
    2634:	18 95       	reti

00002636 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2636:	1f 92       	push	r1
    2638:	0f 92       	push	r0
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	0b b6       	in	r0, 0x3b	; 59
    2642:	0f 92       	push	r0
    2644:	2f 93       	push	r18
    2646:	3f 93       	push	r19
    2648:	4f 93       	push	r20
    264a:	5f 93       	push	r21
    264c:	6f 93       	push	r22
    264e:	7f 93       	push	r23
    2650:	8f 93       	push	r24
    2652:	9f 93       	push	r25
    2654:	af 93       	push	r26
    2656:	bf 93       	push	r27
    2658:	ef 93       	push	r30
    265a:	ff 93       	push	r31
    265c:	e0 91 a3 21 	lds	r30, 0x21A3
    2660:	f0 91 a4 21 	lds	r31, 0x21A4
    2664:	30 97       	sbiw	r30, 0x00	; 0
    2666:	29 f0       	breq	.+10     	; 0x2672 <__vector_13+0x3c>
    2668:	80 91 99 22 	lds	r24, 0x2299
    266c:	90 91 9a 22 	lds	r25, 0x229A
    2670:	19 95       	eicall
    2672:	ff 91       	pop	r31
    2674:	ef 91       	pop	r30
    2676:	bf 91       	pop	r27
    2678:	af 91       	pop	r26
    267a:	9f 91       	pop	r25
    267c:	8f 91       	pop	r24
    267e:	7f 91       	pop	r23
    2680:	6f 91       	pop	r22
    2682:	5f 91       	pop	r21
    2684:	4f 91       	pop	r20
    2686:	3f 91       	pop	r19
    2688:	2f 91       	pop	r18
    268a:	0f 90       	pop	r0
    268c:	0b be       	out	0x3b, r0	; 59
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    2698:	1f 92       	push	r1
    269a:	0f 92       	push	r0
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	0f 92       	push	r0
    26a0:	11 24       	eor	r1, r1
    26a2:	0b b6       	in	r0, 0x3b	; 59
    26a4:	0f 92       	push	r0
    26a6:	2f 93       	push	r18
    26a8:	3f 93       	push	r19
    26aa:	4f 93       	push	r20
    26ac:	5f 93       	push	r21
    26ae:	6f 93       	push	r22
    26b0:	7f 93       	push	r23
    26b2:	8f 93       	push	r24
    26b4:	9f 93       	push	r25
    26b6:	af 93       	push	r26
    26b8:	bf 93       	push	r27
    26ba:	ef 93       	push	r30
    26bc:	ff 93       	push	r31
    26be:	e0 91 a5 21 	lds	r30, 0x21A5
    26c2:	f0 91 a6 21 	lds	r31, 0x21A6
    26c6:	30 97       	sbiw	r30, 0x00	; 0
    26c8:	29 f0       	breq	.+10     	; 0x26d4 <__vector_14+0x3c>
    26ca:	80 91 9b 22 	lds	r24, 0x229B
    26ce:	90 91 9c 22 	lds	r25, 0x229C
    26d2:	19 95       	eicall
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0b be       	out	0x3b, r0	; 59
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	0b b6       	in	r0, 0x3b	; 59
    2706:	0f 92       	push	r0
    2708:	2f 93       	push	r18
    270a:	3f 93       	push	r19
    270c:	4f 93       	push	r20
    270e:	5f 93       	push	r21
    2710:	6f 93       	push	r22
    2712:	7f 93       	push	r23
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	af 93       	push	r26
    271a:	bf 93       	push	r27
    271c:	ef 93       	push	r30
    271e:	ff 93       	push	r31
    2720:	e0 91 a7 21 	lds	r30, 0x21A7
    2724:	f0 91 a8 21 	lds	r31, 0x21A8
    2728:	30 97       	sbiw	r30, 0x00	; 0
    272a:	29 f0       	breq	.+10     	; 0x2736 <__vector_15+0x3c>
    272c:	80 91 9d 22 	lds	r24, 0x229D
    2730:	90 91 9e 22 	lds	r25, 0x229E
    2734:	19 95       	eicall
    2736:	ff 91       	pop	r31
    2738:	ef 91       	pop	r30
    273a:	bf 91       	pop	r27
    273c:	af 91       	pop	r26
    273e:	9f 91       	pop	r25
    2740:	8f 91       	pop	r24
    2742:	7f 91       	pop	r23
    2744:	6f 91       	pop	r22
    2746:	5f 91       	pop	r21
    2748:	4f 91       	pop	r20
    274a:	3f 91       	pop	r19
    274c:	2f 91       	pop	r18
    274e:	0f 90       	pop	r0
    2750:	0b be       	out	0x3b, r0	; 59
    2752:	0f 90       	pop	r0
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	0f 90       	pop	r0
    2758:	1f 90       	pop	r1
    275a:	18 95       	reti

0000275c <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	0b b6       	in	r0, 0x3b	; 59
    2768:	0f 92       	push	r0
    276a:	2f 93       	push	r18
    276c:	3f 93       	push	r19
    276e:	4f 93       	push	r20
    2770:	5f 93       	push	r21
    2772:	6f 93       	push	r22
    2774:	7f 93       	push	r23
    2776:	8f 93       	push	r24
    2778:	9f 93       	push	r25
    277a:	af 93       	push	r26
    277c:	bf 93       	push	r27
    277e:	ef 93       	push	r30
    2780:	ff 93       	push	r31
    2782:	e0 91 a9 21 	lds	r30, 0x21A9
    2786:	f0 91 aa 21 	lds	r31, 0x21AA
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	29 f0       	breq	.+10     	; 0x2798 <__vector_16+0x3c>
    278e:	80 91 9f 22 	lds	r24, 0x229F
    2792:	90 91 a0 22 	lds	r25, 0x22A0
    2796:	19 95       	eicall
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	bf 91       	pop	r27
    279e:	af 91       	pop	r26
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	7f 91       	pop	r23
    27a6:	6f 91       	pop	r22
    27a8:	5f 91       	pop	r21
    27aa:	4f 91       	pop	r20
    27ac:	3f 91       	pop	r19
    27ae:	2f 91       	pop	r18
    27b0:	0f 90       	pop	r0
    27b2:	0b be       	out	0x3b, r0	; 59
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	0f 90       	pop	r0
    27ba:	1f 90       	pop	r1
    27bc:	18 95       	reti

000027be <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    27be:	1f 92       	push	r1
    27c0:	0f 92       	push	r0
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	0f 92       	push	r0
    27c6:	11 24       	eor	r1, r1
    27c8:	0b b6       	in	r0, 0x3b	; 59
    27ca:	0f 92       	push	r0
    27cc:	2f 93       	push	r18
    27ce:	3f 93       	push	r19
    27d0:	4f 93       	push	r20
    27d2:	5f 93       	push	r21
    27d4:	6f 93       	push	r22
    27d6:	7f 93       	push	r23
    27d8:	8f 93       	push	r24
    27da:	9f 93       	push	r25
    27dc:	af 93       	push	r26
    27de:	bf 93       	push	r27
    27e0:	ef 93       	push	r30
    27e2:	ff 93       	push	r31
    27e4:	e0 91 ab 21 	lds	r30, 0x21AB
    27e8:	f0 91 ac 21 	lds	r31, 0x21AC
    27ec:	30 97       	sbiw	r30, 0x00	; 0
    27ee:	29 f0       	breq	.+10     	; 0x27fa <__vector_17+0x3c>
    27f0:	80 91 a1 22 	lds	r24, 0x22A1
    27f4:	90 91 a2 22 	lds	r25, 0x22A2
    27f8:	19 95       	eicall
    27fa:	ff 91       	pop	r31
    27fc:	ef 91       	pop	r30
    27fe:	bf 91       	pop	r27
    2800:	af 91       	pop	r26
    2802:	9f 91       	pop	r25
    2804:	8f 91       	pop	r24
    2806:	7f 91       	pop	r23
    2808:	6f 91       	pop	r22
    280a:	5f 91       	pop	r21
    280c:	4f 91       	pop	r20
    280e:	3f 91       	pop	r19
    2810:	2f 91       	pop	r18
    2812:	0f 90       	pop	r0
    2814:	0b be       	out	0x3b, r0	; 59
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	0f 90       	pop	r0
    281c:	1f 90       	pop	r1
    281e:	18 95       	reti

00002820 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2820:	1f 92       	push	r1
    2822:	0f 92       	push	r0
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	0f 92       	push	r0
    2828:	11 24       	eor	r1, r1
    282a:	0b b6       	in	r0, 0x3b	; 59
    282c:	0f 92       	push	r0
    282e:	2f 93       	push	r18
    2830:	3f 93       	push	r19
    2832:	4f 93       	push	r20
    2834:	5f 93       	push	r21
    2836:	6f 93       	push	r22
    2838:	7f 93       	push	r23
    283a:	8f 93       	push	r24
    283c:	9f 93       	push	r25
    283e:	af 93       	push	r26
    2840:	bf 93       	push	r27
    2842:	ef 93       	push	r30
    2844:	ff 93       	push	r31
    2846:	e0 91 ad 21 	lds	r30, 0x21AD
    284a:	f0 91 ae 21 	lds	r31, 0x21AE
    284e:	30 97       	sbiw	r30, 0x00	; 0
    2850:	29 f0       	breq	.+10     	; 0x285c <__vector_18+0x3c>
    2852:	80 91 a3 22 	lds	r24, 0x22A3
    2856:	90 91 a4 22 	lds	r25, 0x22A4
    285a:	19 95       	eicall
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	bf 91       	pop	r27
    2862:	af 91       	pop	r26
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	5f 91       	pop	r21
    286e:	4f 91       	pop	r20
    2870:	3f 91       	pop	r19
    2872:	2f 91       	pop	r18
    2874:	0f 90       	pop	r0
    2876:	0b be       	out	0x3b, r0	; 59
    2878:	0f 90       	pop	r0
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	0f 90       	pop	r0
    287e:	1f 90       	pop	r1
    2880:	18 95       	reti

00002882 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2882:	1f 92       	push	r1
    2884:	0f 92       	push	r0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	11 24       	eor	r1, r1
    288c:	0b b6       	in	r0, 0x3b	; 59
    288e:	0f 92       	push	r0
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	ef 93       	push	r30
    28a6:	ff 93       	push	r31
    28a8:	e0 91 af 21 	lds	r30, 0x21AF
    28ac:	f0 91 b0 21 	lds	r31, 0x21B0
    28b0:	30 97       	sbiw	r30, 0x00	; 0
    28b2:	29 f0       	breq	.+10     	; 0x28be <__vector_19+0x3c>
    28b4:	80 91 a5 22 	lds	r24, 0x22A5
    28b8:	90 91 a6 22 	lds	r25, 0x22A6
    28bc:	19 95       	eicall
    28be:	ff 91       	pop	r31
    28c0:	ef 91       	pop	r30
    28c2:	bf 91       	pop	r27
    28c4:	af 91       	pop	r26
    28c6:	9f 91       	pop	r25
    28c8:	8f 91       	pop	r24
    28ca:	7f 91       	pop	r23
    28cc:	6f 91       	pop	r22
    28ce:	5f 91       	pop	r21
    28d0:	4f 91       	pop	r20
    28d2:	3f 91       	pop	r19
    28d4:	2f 91       	pop	r18
    28d6:	0f 90       	pop	r0
    28d8:	0b be       	out	0x3b, r0	; 59
    28da:	0f 90       	pop	r0
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	0f 90       	pop	r0
    28e0:	1f 90       	pop	r1
    28e2:	18 95       	reti

000028e4 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    28e4:	1f 92       	push	r1
    28e6:	0f 92       	push	r0
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	0f 92       	push	r0
    28ec:	11 24       	eor	r1, r1
    28ee:	0b b6       	in	r0, 0x3b	; 59
    28f0:	0f 92       	push	r0
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	4f 93       	push	r20
    28f8:	5f 93       	push	r21
    28fa:	6f 93       	push	r22
    28fc:	7f 93       	push	r23
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	af 93       	push	r26
    2904:	bf 93       	push	r27
    2906:	ef 93       	push	r30
    2908:	ff 93       	push	r31
    290a:	e0 91 b1 21 	lds	r30, 0x21B1
    290e:	f0 91 b2 21 	lds	r31, 0x21B2
    2912:	30 97       	sbiw	r30, 0x00	; 0
    2914:	29 f0       	breq	.+10     	; 0x2920 <__vector_20+0x3c>
    2916:	80 91 a7 22 	lds	r24, 0x22A7
    291a:	90 91 a8 22 	lds	r25, 0x22A8
    291e:	19 95       	eicall
    2920:	ff 91       	pop	r31
    2922:	ef 91       	pop	r30
    2924:	bf 91       	pop	r27
    2926:	af 91       	pop	r26
    2928:	9f 91       	pop	r25
    292a:	8f 91       	pop	r24
    292c:	7f 91       	pop	r23
    292e:	6f 91       	pop	r22
    2930:	5f 91       	pop	r21
    2932:	4f 91       	pop	r20
    2934:	3f 91       	pop	r19
    2936:	2f 91       	pop	r18
    2938:	0f 90       	pop	r0
    293a:	0b be       	out	0x3b, r0	; 59
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0
    2942:	1f 90       	pop	r1
    2944:	18 95       	reti

00002946 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	0b b6       	in	r0, 0x3b	; 59
    2952:	0f 92       	push	r0
    2954:	2f 93       	push	r18
    2956:	3f 93       	push	r19
    2958:	4f 93       	push	r20
    295a:	5f 93       	push	r21
    295c:	6f 93       	push	r22
    295e:	7f 93       	push	r23
    2960:	8f 93       	push	r24
    2962:	9f 93       	push	r25
    2964:	af 93       	push	r26
    2966:	bf 93       	push	r27
    2968:	ef 93       	push	r30
    296a:	ff 93       	push	r31
    296c:	e0 91 b3 21 	lds	r30, 0x21B3
    2970:	f0 91 b4 21 	lds	r31, 0x21B4
    2974:	30 97       	sbiw	r30, 0x00	; 0
    2976:	29 f0       	breq	.+10     	; 0x2982 <__vector_21+0x3c>
    2978:	80 91 a9 22 	lds	r24, 0x22A9
    297c:	90 91 aa 22 	lds	r25, 0x22AA
    2980:	19 95       	eicall
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	bf 91       	pop	r27
    2988:	af 91       	pop	r26
    298a:	9f 91       	pop	r25
    298c:	8f 91       	pop	r24
    298e:	7f 91       	pop	r23
    2990:	6f 91       	pop	r22
    2992:	5f 91       	pop	r21
    2994:	4f 91       	pop	r20
    2996:	3f 91       	pop	r19
    2998:	2f 91       	pop	r18
    299a:	0f 90       	pop	r0
    299c:	0b be       	out	0x3b, r0	; 59
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	0b b6       	in	r0, 0x3b	; 59
    29b4:	0f 92       	push	r0
    29b6:	2f 93       	push	r18
    29b8:	3f 93       	push	r19
    29ba:	4f 93       	push	r20
    29bc:	5f 93       	push	r21
    29be:	6f 93       	push	r22
    29c0:	7f 93       	push	r23
    29c2:	8f 93       	push	r24
    29c4:	9f 93       	push	r25
    29c6:	af 93       	push	r26
    29c8:	bf 93       	push	r27
    29ca:	ef 93       	push	r30
    29cc:	ff 93       	push	r31
    29ce:	e0 91 b5 21 	lds	r30, 0x21B5
    29d2:	f0 91 b6 21 	lds	r31, 0x21B6
    29d6:	30 97       	sbiw	r30, 0x00	; 0
    29d8:	29 f0       	breq	.+10     	; 0x29e4 <__vector_22+0x3c>
    29da:	80 91 ab 22 	lds	r24, 0x22AB
    29de:	90 91 ac 22 	lds	r25, 0x22AC
    29e2:	19 95       	eicall
    29e4:	ff 91       	pop	r31
    29e6:	ef 91       	pop	r30
    29e8:	bf 91       	pop	r27
    29ea:	af 91       	pop	r26
    29ec:	9f 91       	pop	r25
    29ee:	8f 91       	pop	r24
    29f0:	7f 91       	pop	r23
    29f2:	6f 91       	pop	r22
    29f4:	5f 91       	pop	r21
    29f6:	4f 91       	pop	r20
    29f8:	3f 91       	pop	r19
    29fa:	2f 91       	pop	r18
    29fc:	0f 90       	pop	r0
    29fe:	0b be       	out	0x3b, r0	; 59
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	0f 90       	pop	r0
    2a06:	1f 90       	pop	r1
    2a08:	18 95       	reti

00002a0a <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2a0a:	1f 92       	push	r1
    2a0c:	0f 92       	push	r0
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	0f 92       	push	r0
    2a12:	11 24       	eor	r1, r1
    2a14:	0b b6       	in	r0, 0x3b	; 59
    2a16:	0f 92       	push	r0
    2a18:	2f 93       	push	r18
    2a1a:	3f 93       	push	r19
    2a1c:	4f 93       	push	r20
    2a1e:	5f 93       	push	r21
    2a20:	6f 93       	push	r22
    2a22:	7f 93       	push	r23
    2a24:	8f 93       	push	r24
    2a26:	9f 93       	push	r25
    2a28:	af 93       	push	r26
    2a2a:	bf 93       	push	r27
    2a2c:	ef 93       	push	r30
    2a2e:	ff 93       	push	r31
    2a30:	e0 91 b7 21 	lds	r30, 0x21B7
    2a34:	f0 91 b8 21 	lds	r31, 0x21B8
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	29 f0       	breq	.+10     	; 0x2a46 <__vector_23+0x3c>
    2a3c:	80 91 ad 22 	lds	r24, 0x22AD
    2a40:	90 91 ae 22 	lds	r25, 0x22AE
    2a44:	19 95       	eicall
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0b be       	out	0x3b, r0	; 59
    2a62:	0f 90       	pop	r0
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	0f 90       	pop	r0
    2a68:	1f 90       	pop	r1
    2a6a:	18 95       	reti

00002a6c <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2a6c:	1f 92       	push	r1
    2a6e:	0f 92       	push	r0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	0f 92       	push	r0
    2a74:	11 24       	eor	r1, r1
    2a76:	0b b6       	in	r0, 0x3b	; 59
    2a78:	0f 92       	push	r0
    2a7a:	2f 93       	push	r18
    2a7c:	3f 93       	push	r19
    2a7e:	4f 93       	push	r20
    2a80:	5f 93       	push	r21
    2a82:	6f 93       	push	r22
    2a84:	7f 93       	push	r23
    2a86:	8f 93       	push	r24
    2a88:	9f 93       	push	r25
    2a8a:	af 93       	push	r26
    2a8c:	bf 93       	push	r27
    2a8e:	ef 93       	push	r30
    2a90:	ff 93       	push	r31
    2a92:	e0 91 b9 21 	lds	r30, 0x21B9
    2a96:	f0 91 ba 21 	lds	r31, 0x21BA
    2a9a:	30 97       	sbiw	r30, 0x00	; 0
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <__vector_24+0x3c>
    2a9e:	80 91 af 22 	lds	r24, 0x22AF
    2aa2:	90 91 b0 22 	lds	r25, 0x22B0
    2aa6:	19 95       	eicall
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	0f 90       	pop	r0
    2ac2:	0b be       	out	0x3b, r0	; 59
    2ac4:	0f 90       	pop	r0
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	0f 90       	pop	r0
    2aca:	1f 90       	pop	r1
    2acc:	18 95       	reti

00002ace <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2ace:	1f 92       	push	r1
    2ad0:	0f 92       	push	r0
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	0f 92       	push	r0
    2ad6:	11 24       	eor	r1, r1
    2ad8:	0b b6       	in	r0, 0x3b	; 59
    2ada:	0f 92       	push	r0
    2adc:	2f 93       	push	r18
    2ade:	3f 93       	push	r19
    2ae0:	4f 93       	push	r20
    2ae2:	5f 93       	push	r21
    2ae4:	6f 93       	push	r22
    2ae6:	7f 93       	push	r23
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
    2aec:	af 93       	push	r26
    2aee:	bf 93       	push	r27
    2af0:	ef 93       	push	r30
    2af2:	ff 93       	push	r31
    2af4:	e0 91 bb 21 	lds	r30, 0x21BB
    2af8:	f0 91 bc 21 	lds	r31, 0x21BC
    2afc:	30 97       	sbiw	r30, 0x00	; 0
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <__vector_25+0x3c>
    2b00:	80 91 b1 22 	lds	r24, 0x22B1
    2b04:	90 91 b2 22 	lds	r25, 0x22B2
    2b08:	19 95       	eicall
    2b0a:	ff 91       	pop	r31
    2b0c:	ef 91       	pop	r30
    2b0e:	bf 91       	pop	r27
    2b10:	af 91       	pop	r26
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	7f 91       	pop	r23
    2b18:	6f 91       	pop	r22
    2b1a:	5f 91       	pop	r21
    2b1c:	4f 91       	pop	r20
    2b1e:	3f 91       	pop	r19
    2b20:	2f 91       	pop	r18
    2b22:	0f 90       	pop	r0
    2b24:	0b be       	out	0x3b, r0	; 59
    2b26:	0f 90       	pop	r0
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	0f 90       	pop	r0
    2b2c:	1f 90       	pop	r1
    2b2e:	18 95       	reti

00002b30 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2b30:	1f 92       	push	r1
    2b32:	0f 92       	push	r0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	0f 92       	push	r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	0b b6       	in	r0, 0x3b	; 59
    2b3c:	0f 92       	push	r0
    2b3e:	2f 93       	push	r18
    2b40:	3f 93       	push	r19
    2b42:	4f 93       	push	r20
    2b44:	5f 93       	push	r21
    2b46:	6f 93       	push	r22
    2b48:	7f 93       	push	r23
    2b4a:	8f 93       	push	r24
    2b4c:	9f 93       	push	r25
    2b4e:	af 93       	push	r26
    2b50:	bf 93       	push	r27
    2b52:	ef 93       	push	r30
    2b54:	ff 93       	push	r31
    2b56:	e0 91 bd 21 	lds	r30, 0x21BD
    2b5a:	f0 91 be 21 	lds	r31, 0x21BE
    2b5e:	30 97       	sbiw	r30, 0x00	; 0
    2b60:	29 f0       	breq	.+10     	; 0x2b6c <__vector_26+0x3c>
    2b62:	80 91 b3 22 	lds	r24, 0x22B3
    2b66:	90 91 b4 22 	lds	r25, 0x22B4
    2b6a:	19 95       	eicall
    2b6c:	ff 91       	pop	r31
    2b6e:	ef 91       	pop	r30
    2b70:	bf 91       	pop	r27
    2b72:	af 91       	pop	r26
    2b74:	9f 91       	pop	r25
    2b76:	8f 91       	pop	r24
    2b78:	7f 91       	pop	r23
    2b7a:	6f 91       	pop	r22
    2b7c:	5f 91       	pop	r21
    2b7e:	4f 91       	pop	r20
    2b80:	3f 91       	pop	r19
    2b82:	2f 91       	pop	r18
    2b84:	0f 90       	pop	r0
    2b86:	0b be       	out	0x3b, r0	; 59
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	0b b6       	in	r0, 0x3b	; 59
    2b9e:	0f 92       	push	r0
    2ba0:	2f 93       	push	r18
    2ba2:	3f 93       	push	r19
    2ba4:	4f 93       	push	r20
    2ba6:	5f 93       	push	r21
    2ba8:	6f 93       	push	r22
    2baa:	7f 93       	push	r23
    2bac:	8f 93       	push	r24
    2bae:	9f 93       	push	r25
    2bb0:	af 93       	push	r26
    2bb2:	bf 93       	push	r27
    2bb4:	ef 93       	push	r30
    2bb6:	ff 93       	push	r31
    2bb8:	e0 91 bf 21 	lds	r30, 0x21BF
    2bbc:	f0 91 c0 21 	lds	r31, 0x21C0
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
    2bc2:	29 f0       	breq	.+10     	; 0x2bce <__vector_27+0x3c>
    2bc4:	80 91 b5 22 	lds	r24, 0x22B5
    2bc8:	90 91 b6 22 	lds	r25, 0x22B6
    2bcc:	19 95       	eicall
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	bf 91       	pop	r27
    2bd4:	af 91       	pop	r26
    2bd6:	9f 91       	pop	r25
    2bd8:	8f 91       	pop	r24
    2bda:	7f 91       	pop	r23
    2bdc:	6f 91       	pop	r22
    2bde:	5f 91       	pop	r21
    2be0:	4f 91       	pop	r20
    2be2:	3f 91       	pop	r19
    2be4:	2f 91       	pop	r18
    2be6:	0f 90       	pop	r0
    2be8:	0b be       	out	0x3b, r0	; 59
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	0f 92       	push	r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	0b b6       	in	r0, 0x3b	; 59
    2c00:	0f 92       	push	r0
    2c02:	2f 93       	push	r18
    2c04:	3f 93       	push	r19
    2c06:	4f 93       	push	r20
    2c08:	5f 93       	push	r21
    2c0a:	6f 93       	push	r22
    2c0c:	7f 93       	push	r23
    2c0e:	8f 93       	push	r24
    2c10:	9f 93       	push	r25
    2c12:	af 93       	push	r26
    2c14:	bf 93       	push	r27
    2c16:	ef 93       	push	r30
    2c18:	ff 93       	push	r31
    2c1a:	e0 91 c1 21 	lds	r30, 0x21C1
    2c1e:	f0 91 c2 21 	lds	r31, 0x21C2
    2c22:	30 97       	sbiw	r30, 0x00	; 0
    2c24:	29 f0       	breq	.+10     	; 0x2c30 <__vector_28+0x3c>
    2c26:	80 91 b7 22 	lds	r24, 0x22B7
    2c2a:	90 91 b8 22 	lds	r25, 0x22B8
    2c2e:	19 95       	eicall
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0b be       	out	0x3b, r0	; 59
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2c56:	1f 92       	push	r1
    2c58:	0f 92       	push	r0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	0f 92       	push	r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	0b b6       	in	r0, 0x3b	; 59
    2c62:	0f 92       	push	r0
    2c64:	2f 93       	push	r18
    2c66:	3f 93       	push	r19
    2c68:	4f 93       	push	r20
    2c6a:	5f 93       	push	r21
    2c6c:	6f 93       	push	r22
    2c6e:	7f 93       	push	r23
    2c70:	8f 93       	push	r24
    2c72:	9f 93       	push	r25
    2c74:	af 93       	push	r26
    2c76:	bf 93       	push	r27
    2c78:	ef 93       	push	r30
    2c7a:	ff 93       	push	r31
    2c7c:	e0 91 c3 21 	lds	r30, 0x21C3
    2c80:	f0 91 c4 21 	lds	r31, 0x21C4
    2c84:	30 97       	sbiw	r30, 0x00	; 0
    2c86:	29 f0       	breq	.+10     	; 0x2c92 <__vector_29+0x3c>
    2c88:	80 91 b9 22 	lds	r24, 0x22B9
    2c8c:	90 91 ba 22 	lds	r25, 0x22BA
    2c90:	19 95       	eicall
    2c92:	ff 91       	pop	r31
    2c94:	ef 91       	pop	r30
    2c96:	bf 91       	pop	r27
    2c98:	af 91       	pop	r26
    2c9a:	9f 91       	pop	r25
    2c9c:	8f 91       	pop	r24
    2c9e:	7f 91       	pop	r23
    2ca0:	6f 91       	pop	r22
    2ca2:	5f 91       	pop	r21
    2ca4:	4f 91       	pop	r20
    2ca6:	3f 91       	pop	r19
    2ca8:	2f 91       	pop	r18
    2caa:	0f 90       	pop	r0
    2cac:	0b be       	out	0x3b, r0	; 59
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	0b b6       	in	r0, 0x3b	; 59
    2cc4:	0f 92       	push	r0
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	4f 93       	push	r20
    2ccc:	5f 93       	push	r21
    2cce:	6f 93       	push	r22
    2cd0:	7f 93       	push	r23
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	af 93       	push	r26
    2cd8:	bf 93       	push	r27
    2cda:	ef 93       	push	r30
    2cdc:	ff 93       	push	r31
    2cde:	e0 91 c5 21 	lds	r30, 0x21C5
    2ce2:	f0 91 c6 21 	lds	r31, 0x21C6
    2ce6:	30 97       	sbiw	r30, 0x00	; 0
    2ce8:	29 f0       	breq	.+10     	; 0x2cf4 <__vector_30+0x3c>
    2cea:	80 91 bb 22 	lds	r24, 0x22BB
    2cee:	90 91 bc 22 	lds	r25, 0x22BC
    2cf2:	19 95       	eicall
    2cf4:	ff 91       	pop	r31
    2cf6:	ef 91       	pop	r30
    2cf8:	bf 91       	pop	r27
    2cfa:	af 91       	pop	r26
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	7f 91       	pop	r23
    2d02:	6f 91       	pop	r22
    2d04:	5f 91       	pop	r21
    2d06:	4f 91       	pop	r20
    2d08:	3f 91       	pop	r19
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0b be       	out	0x3b, r0	; 59
    2d10:	0f 90       	pop	r0
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	0f 90       	pop	r0
    2d16:	1f 90       	pop	r1
    2d18:	18 95       	reti

00002d1a <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2d1a:	1f 92       	push	r1
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	0f 92       	push	r0
    2d22:	11 24       	eor	r1, r1
    2d24:	0b b6       	in	r0, 0x3b	; 59
    2d26:	0f 92       	push	r0
    2d28:	2f 93       	push	r18
    2d2a:	3f 93       	push	r19
    2d2c:	4f 93       	push	r20
    2d2e:	5f 93       	push	r21
    2d30:	6f 93       	push	r22
    2d32:	7f 93       	push	r23
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
    2d40:	e0 91 c7 21 	lds	r30, 0x21C7
    2d44:	f0 91 c8 21 	lds	r31, 0x21C8
    2d48:	30 97       	sbiw	r30, 0x00	; 0
    2d4a:	29 f0       	breq	.+10     	; 0x2d56 <__vector_31+0x3c>
    2d4c:	80 91 bd 22 	lds	r24, 0x22BD
    2d50:	90 91 be 22 	lds	r25, 0x22BE
    2d54:	19 95       	eicall
    2d56:	ff 91       	pop	r31
    2d58:	ef 91       	pop	r30
    2d5a:	bf 91       	pop	r27
    2d5c:	af 91       	pop	r26
    2d5e:	9f 91       	pop	r25
    2d60:	8f 91       	pop	r24
    2d62:	7f 91       	pop	r23
    2d64:	6f 91       	pop	r22
    2d66:	5f 91       	pop	r21
    2d68:	4f 91       	pop	r20
    2d6a:	3f 91       	pop	r19
    2d6c:	2f 91       	pop	r18
    2d6e:	0f 90       	pop	r0
    2d70:	0b be       	out	0x3b, r0	; 59
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	0f 90       	pop	r0
    2d78:	1f 90       	pop	r1
    2d7a:	18 95       	reti

00002d7c <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	0f 92       	push	r0
    2d84:	11 24       	eor	r1, r1
    2d86:	0b b6       	in	r0, 0x3b	; 59
    2d88:	0f 92       	push	r0
    2d8a:	2f 93       	push	r18
    2d8c:	3f 93       	push	r19
    2d8e:	4f 93       	push	r20
    2d90:	5f 93       	push	r21
    2d92:	6f 93       	push	r22
    2d94:	7f 93       	push	r23
    2d96:	8f 93       	push	r24
    2d98:	9f 93       	push	r25
    2d9a:	af 93       	push	r26
    2d9c:	bf 93       	push	r27
    2d9e:	ef 93       	push	r30
    2da0:	ff 93       	push	r31
    2da2:	e0 91 c9 21 	lds	r30, 0x21C9
    2da6:	f0 91 ca 21 	lds	r31, 0x21CA
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	29 f0       	breq	.+10     	; 0x2db8 <__vector_32+0x3c>
    2dae:	80 91 bf 22 	lds	r24, 0x22BF
    2db2:	90 91 c0 22 	lds	r25, 0x22C0
    2db6:	19 95       	eicall
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0b be       	out	0x3b, r0	; 59
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

00002dde <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2dde:	1f 92       	push	r1
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	0f 92       	push	r0
    2de6:	11 24       	eor	r1, r1
    2de8:	0b b6       	in	r0, 0x3b	; 59
    2dea:	0f 92       	push	r0
    2dec:	2f 93       	push	r18
    2dee:	3f 93       	push	r19
    2df0:	4f 93       	push	r20
    2df2:	5f 93       	push	r21
    2df4:	6f 93       	push	r22
    2df6:	7f 93       	push	r23
    2df8:	8f 93       	push	r24
    2dfa:	9f 93       	push	r25
    2dfc:	af 93       	push	r26
    2dfe:	bf 93       	push	r27
    2e00:	ef 93       	push	r30
    2e02:	ff 93       	push	r31
    2e04:	e0 91 cb 21 	lds	r30, 0x21CB
    2e08:	f0 91 cc 21 	lds	r31, 0x21CC
    2e0c:	30 97       	sbiw	r30, 0x00	; 0
    2e0e:	29 f0       	breq	.+10     	; 0x2e1a <__vector_33+0x3c>
    2e10:	80 91 c1 22 	lds	r24, 0x22C1
    2e14:	90 91 c2 22 	lds	r25, 0x22C2
    2e18:	19 95       	eicall
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0b be       	out	0x3b, r0	; 59
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	0b b6       	in	r0, 0x3b	; 59
    2e4c:	0f 92       	push	r0
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	7f 93       	push	r23
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	af 93       	push	r26
    2e60:	bf 93       	push	r27
    2e62:	ef 93       	push	r30
    2e64:	ff 93       	push	r31
    2e66:	e0 91 cd 21 	lds	r30, 0x21CD
    2e6a:	f0 91 ce 21 	lds	r31, 0x21CE
    2e6e:	30 97       	sbiw	r30, 0x00	; 0
    2e70:	29 f0       	breq	.+10     	; 0x2e7c <__vector_34+0x3c>
    2e72:	80 91 c3 22 	lds	r24, 0x22C3
    2e76:	90 91 c4 22 	lds	r25, 0x22C4
    2e7a:	19 95       	eicall
    2e7c:	ff 91       	pop	r31
    2e7e:	ef 91       	pop	r30
    2e80:	bf 91       	pop	r27
    2e82:	af 91       	pop	r26
    2e84:	9f 91       	pop	r25
    2e86:	8f 91       	pop	r24
    2e88:	7f 91       	pop	r23
    2e8a:	6f 91       	pop	r22
    2e8c:	5f 91       	pop	r21
    2e8e:	4f 91       	pop	r20
    2e90:	3f 91       	pop	r19
    2e92:	2f 91       	pop	r18
    2e94:	0f 90       	pop	r0
    2e96:	0b be       	out	0x3b, r0	; 59
    2e98:	0f 90       	pop	r0
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	0f 90       	pop	r0
    2e9e:	1f 90       	pop	r1
    2ea0:	18 95       	reti

00002ea2 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2ea2:	1f 92       	push	r1
    2ea4:	0f 92       	push	r0
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	0f 92       	push	r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	0b b6       	in	r0, 0x3b	; 59
    2eae:	0f 92       	push	r0
    2eb0:	2f 93       	push	r18
    2eb2:	3f 93       	push	r19
    2eb4:	4f 93       	push	r20
    2eb6:	5f 93       	push	r21
    2eb8:	6f 93       	push	r22
    2eba:	7f 93       	push	r23
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	af 93       	push	r26
    2ec2:	bf 93       	push	r27
    2ec4:	ef 93       	push	r30
    2ec6:	ff 93       	push	r31
    2ec8:	e0 91 cf 21 	lds	r30, 0x21CF
    2ecc:	f0 91 d0 21 	lds	r31, 0x21D0
    2ed0:	30 97       	sbiw	r30, 0x00	; 0
    2ed2:	29 f0       	breq	.+10     	; 0x2ede <__vector_35+0x3c>
    2ed4:	80 91 c5 22 	lds	r24, 0x22C5
    2ed8:	90 91 c6 22 	lds	r25, 0x22C6
    2edc:	19 95       	eicall
    2ede:	ff 91       	pop	r31
    2ee0:	ef 91       	pop	r30
    2ee2:	bf 91       	pop	r27
    2ee4:	af 91       	pop	r26
    2ee6:	9f 91       	pop	r25
    2ee8:	8f 91       	pop	r24
    2eea:	7f 91       	pop	r23
    2eec:	6f 91       	pop	r22
    2eee:	5f 91       	pop	r21
    2ef0:	4f 91       	pop	r20
    2ef2:	3f 91       	pop	r19
    2ef4:	2f 91       	pop	r18
    2ef6:	0f 90       	pop	r0
    2ef8:	0b be       	out	0x3b, r0	; 59
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	0b b6       	in	r0, 0x3b	; 59
    2f10:	0f 92       	push	r0
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
    2f2a:	e0 91 d1 21 	lds	r30, 0x21D1
    2f2e:	f0 91 d2 21 	lds	r31, 0x21D2
    2f32:	30 97       	sbiw	r30, 0x00	; 0
    2f34:	29 f0       	breq	.+10     	; 0x2f40 <__vector_36+0x3c>
    2f36:	80 91 c7 22 	lds	r24, 0x22C7
    2f3a:	90 91 c8 22 	lds	r25, 0x22C8
    2f3e:	19 95       	eicall
    2f40:	ff 91       	pop	r31
    2f42:	ef 91       	pop	r30
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	0f 90       	pop	r0
    2f5a:	0b be       	out	0x3b, r0	; 59
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	0f 92       	push	r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	0b b6       	in	r0, 0x3b	; 59
    2f72:	0f 92       	push	r0
    2f74:	2f 93       	push	r18
    2f76:	3f 93       	push	r19
    2f78:	4f 93       	push	r20
    2f7a:	5f 93       	push	r21
    2f7c:	6f 93       	push	r22
    2f7e:	7f 93       	push	r23
    2f80:	8f 93       	push	r24
    2f82:	9f 93       	push	r25
    2f84:	af 93       	push	r26
    2f86:	bf 93       	push	r27
    2f88:	ef 93       	push	r30
    2f8a:	ff 93       	push	r31
    2f8c:	e0 91 d3 21 	lds	r30, 0x21D3
    2f90:	f0 91 d4 21 	lds	r31, 0x21D4
    2f94:	30 97       	sbiw	r30, 0x00	; 0
    2f96:	29 f0       	breq	.+10     	; 0x2fa2 <__vector_37+0x3c>
    2f98:	80 91 c9 22 	lds	r24, 0x22C9
    2f9c:	90 91 ca 22 	lds	r25, 0x22CA
    2fa0:	19 95       	eicall
    2fa2:	ff 91       	pop	r31
    2fa4:	ef 91       	pop	r30
    2fa6:	bf 91       	pop	r27
    2fa8:	af 91       	pop	r26
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	7f 91       	pop	r23
    2fb0:	6f 91       	pop	r22
    2fb2:	5f 91       	pop	r21
    2fb4:	4f 91       	pop	r20
    2fb6:	3f 91       	pop	r19
    2fb8:	2f 91       	pop	r18
    2fba:	0f 90       	pop	r0
    2fbc:	0b be       	out	0x3b, r0	; 59
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	0f 90       	pop	r0
    2fc4:	1f 90       	pop	r1
    2fc6:	18 95       	reti

00002fc8 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2fc8:	1f 92       	push	r1
    2fca:	0f 92       	push	r0
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	0b b6       	in	r0, 0x3b	; 59
    2fd4:	0f 92       	push	r0
    2fd6:	2f 93       	push	r18
    2fd8:	3f 93       	push	r19
    2fda:	4f 93       	push	r20
    2fdc:	5f 93       	push	r21
    2fde:	6f 93       	push	r22
    2fe0:	7f 93       	push	r23
    2fe2:	8f 93       	push	r24
    2fe4:	9f 93       	push	r25
    2fe6:	af 93       	push	r26
    2fe8:	bf 93       	push	r27
    2fea:	ef 93       	push	r30
    2fec:	ff 93       	push	r31
    2fee:	e0 91 d5 21 	lds	r30, 0x21D5
    2ff2:	f0 91 d6 21 	lds	r31, 0x21D6
    2ff6:	30 97       	sbiw	r30, 0x00	; 0
    2ff8:	29 f0       	breq	.+10     	; 0x3004 <__vector_38+0x3c>
    2ffa:	80 91 cb 22 	lds	r24, 0x22CB
    2ffe:	90 91 cc 22 	lds	r25, 0x22CC
    3002:	19 95       	eicall
    3004:	ff 91       	pop	r31
    3006:	ef 91       	pop	r30
    3008:	bf 91       	pop	r27
    300a:	af 91       	pop	r26
    300c:	9f 91       	pop	r25
    300e:	8f 91       	pop	r24
    3010:	7f 91       	pop	r23
    3012:	6f 91       	pop	r22
    3014:	5f 91       	pop	r21
    3016:	4f 91       	pop	r20
    3018:	3f 91       	pop	r19
    301a:	2f 91       	pop	r18
    301c:	0f 90       	pop	r0
    301e:	0b be       	out	0x3b, r0	; 59
    3020:	0f 90       	pop	r0
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	0f 90       	pop	r0
    3026:	1f 90       	pop	r1
    3028:	18 95       	reti

0000302a <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    302a:	1f 92       	push	r1
    302c:	0f 92       	push	r0
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	0f 92       	push	r0
    3032:	11 24       	eor	r1, r1
    3034:	0b b6       	in	r0, 0x3b	; 59
    3036:	0f 92       	push	r0
    3038:	2f 93       	push	r18
    303a:	3f 93       	push	r19
    303c:	4f 93       	push	r20
    303e:	5f 93       	push	r21
    3040:	6f 93       	push	r22
    3042:	7f 93       	push	r23
    3044:	8f 93       	push	r24
    3046:	9f 93       	push	r25
    3048:	af 93       	push	r26
    304a:	bf 93       	push	r27
    304c:	ef 93       	push	r30
    304e:	ff 93       	push	r31
    3050:	e0 91 d7 21 	lds	r30, 0x21D7
    3054:	f0 91 d8 21 	lds	r31, 0x21D8
    3058:	30 97       	sbiw	r30, 0x00	; 0
    305a:	29 f0       	breq	.+10     	; 0x3066 <__vector_39+0x3c>
    305c:	80 91 cd 22 	lds	r24, 0x22CD
    3060:	90 91 ce 22 	lds	r25, 0x22CE
    3064:	19 95       	eicall
    3066:	ff 91       	pop	r31
    3068:	ef 91       	pop	r30
    306a:	bf 91       	pop	r27
    306c:	af 91       	pop	r26
    306e:	9f 91       	pop	r25
    3070:	8f 91       	pop	r24
    3072:	7f 91       	pop	r23
    3074:	6f 91       	pop	r22
    3076:	5f 91       	pop	r21
    3078:	4f 91       	pop	r20
    307a:	3f 91       	pop	r19
    307c:	2f 91       	pop	r18
    307e:	0f 90       	pop	r0
    3080:	0b be       	out	0x3b, r0	; 59
    3082:	0f 90       	pop	r0
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	0f 90       	pop	r0
    3088:	1f 90       	pop	r1
    308a:	18 95       	reti

0000308c <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    308c:	1f 92       	push	r1
    308e:	0f 92       	push	r0
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	0f 92       	push	r0
    3094:	11 24       	eor	r1, r1
    3096:	0b b6       	in	r0, 0x3b	; 59
    3098:	0f 92       	push	r0
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	e0 91 d9 21 	lds	r30, 0x21D9
    30b6:	f0 91 da 21 	lds	r31, 0x21DA
    30ba:	30 97       	sbiw	r30, 0x00	; 0
    30bc:	29 f0       	breq	.+10     	; 0x30c8 <__vector_40+0x3c>
    30be:	80 91 cf 22 	lds	r24, 0x22CF
    30c2:	90 91 d0 22 	lds	r25, 0x22D0
    30c6:	19 95       	eicall
    30c8:	ff 91       	pop	r31
    30ca:	ef 91       	pop	r30
    30cc:	bf 91       	pop	r27
    30ce:	af 91       	pop	r26
    30d0:	9f 91       	pop	r25
    30d2:	8f 91       	pop	r24
    30d4:	7f 91       	pop	r23
    30d6:	6f 91       	pop	r22
    30d8:	5f 91       	pop	r21
    30da:	4f 91       	pop	r20
    30dc:	3f 91       	pop	r19
    30de:	2f 91       	pop	r18
    30e0:	0f 90       	pop	r0
    30e2:	0b be       	out	0x3b, r0	; 59
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    30ee:	1f 92       	push	r1
    30f0:	0f 92       	push	r0
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	0f 92       	push	r0
    30f6:	11 24       	eor	r1, r1
    30f8:	0b b6       	in	r0, 0x3b	; 59
    30fa:	0f 92       	push	r0
    30fc:	2f 93       	push	r18
    30fe:	3f 93       	push	r19
    3100:	4f 93       	push	r20
    3102:	5f 93       	push	r21
    3104:	6f 93       	push	r22
    3106:	7f 93       	push	r23
    3108:	8f 93       	push	r24
    310a:	9f 93       	push	r25
    310c:	af 93       	push	r26
    310e:	bf 93       	push	r27
    3110:	ef 93       	push	r30
    3112:	ff 93       	push	r31
    3114:	e0 91 db 21 	lds	r30, 0x21DB
    3118:	f0 91 dc 21 	lds	r31, 0x21DC
    311c:	30 97       	sbiw	r30, 0x00	; 0
    311e:	29 f0       	breq	.+10     	; 0x312a <__vector_41+0x3c>
    3120:	80 91 d1 22 	lds	r24, 0x22D1
    3124:	90 91 d2 22 	lds	r25, 0x22D2
    3128:	19 95       	eicall
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	bf 91       	pop	r27
    3130:	af 91       	pop	r26
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	7f 91       	pop	r23
    3138:	6f 91       	pop	r22
    313a:	5f 91       	pop	r21
    313c:	4f 91       	pop	r20
    313e:	3f 91       	pop	r19
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0b be       	out	0x3b, r0	; 59
    3146:	0f 90       	pop	r0
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	0f 90       	pop	r0
    314c:	1f 90       	pop	r1
    314e:	18 95       	reti

00003150 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    3150:	1f 92       	push	r1
    3152:	0f 92       	push	r0
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	0f 92       	push	r0
    3158:	11 24       	eor	r1, r1
    315a:	0b b6       	in	r0, 0x3b	; 59
    315c:	0f 92       	push	r0
    315e:	2f 93       	push	r18
    3160:	3f 93       	push	r19
    3162:	4f 93       	push	r20
    3164:	5f 93       	push	r21
    3166:	6f 93       	push	r22
    3168:	7f 93       	push	r23
    316a:	8f 93       	push	r24
    316c:	9f 93       	push	r25
    316e:	af 93       	push	r26
    3170:	bf 93       	push	r27
    3172:	ef 93       	push	r30
    3174:	ff 93       	push	r31
    3176:	e0 91 dd 21 	lds	r30, 0x21DD
    317a:	f0 91 de 21 	lds	r31, 0x21DE
    317e:	30 97       	sbiw	r30, 0x00	; 0
    3180:	29 f0       	breq	.+10     	; 0x318c <__vector_42+0x3c>
    3182:	80 91 d3 22 	lds	r24, 0x22D3
    3186:	90 91 d4 22 	lds	r25, 0x22D4
    318a:	19 95       	eicall
    318c:	ff 91       	pop	r31
    318e:	ef 91       	pop	r30
    3190:	bf 91       	pop	r27
    3192:	af 91       	pop	r26
    3194:	9f 91       	pop	r25
    3196:	8f 91       	pop	r24
    3198:	7f 91       	pop	r23
    319a:	6f 91       	pop	r22
    319c:	5f 91       	pop	r21
    319e:	4f 91       	pop	r20
    31a0:	3f 91       	pop	r19
    31a2:	2f 91       	pop	r18
    31a4:	0f 90       	pop	r0
    31a6:	0b be       	out	0x3b, r0	; 59
    31a8:	0f 90       	pop	r0
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	0f 90       	pop	r0
    31ae:	1f 90       	pop	r1
    31b0:	18 95       	reti

000031b2 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    31b2:	1f 92       	push	r1
    31b4:	0f 92       	push	r0
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	0f 92       	push	r0
    31ba:	11 24       	eor	r1, r1
    31bc:	0b b6       	in	r0, 0x3b	; 59
    31be:	0f 92       	push	r0
    31c0:	2f 93       	push	r18
    31c2:	3f 93       	push	r19
    31c4:	4f 93       	push	r20
    31c6:	5f 93       	push	r21
    31c8:	6f 93       	push	r22
    31ca:	7f 93       	push	r23
    31cc:	8f 93       	push	r24
    31ce:	9f 93       	push	r25
    31d0:	af 93       	push	r26
    31d2:	bf 93       	push	r27
    31d4:	ef 93       	push	r30
    31d6:	ff 93       	push	r31
    31d8:	e0 91 df 21 	lds	r30, 0x21DF
    31dc:	f0 91 e0 21 	lds	r31, 0x21E0
    31e0:	30 97       	sbiw	r30, 0x00	; 0
    31e2:	29 f0       	breq	.+10     	; 0x31ee <__vector_43+0x3c>
    31e4:	80 91 d5 22 	lds	r24, 0x22D5
    31e8:	90 91 d6 22 	lds	r25, 0x22D6
    31ec:	19 95       	eicall
    31ee:	ff 91       	pop	r31
    31f0:	ef 91       	pop	r30
    31f2:	bf 91       	pop	r27
    31f4:	af 91       	pop	r26
    31f6:	9f 91       	pop	r25
    31f8:	8f 91       	pop	r24
    31fa:	7f 91       	pop	r23
    31fc:	6f 91       	pop	r22
    31fe:	5f 91       	pop	r21
    3200:	4f 91       	pop	r20
    3202:	3f 91       	pop	r19
    3204:	2f 91       	pop	r18
    3206:	0f 90       	pop	r0
    3208:	0b be       	out	0x3b, r0	; 59
    320a:	0f 90       	pop	r0
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	0f 90       	pop	r0
    3210:	1f 90       	pop	r1
    3212:	18 95       	reti

00003214 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    3214:	1f 92       	push	r1
    3216:	0f 92       	push	r0
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	0f 92       	push	r0
    321c:	11 24       	eor	r1, r1
    321e:	0b b6       	in	r0, 0x3b	; 59
    3220:	0f 92       	push	r0
    3222:	2f 93       	push	r18
    3224:	3f 93       	push	r19
    3226:	4f 93       	push	r20
    3228:	5f 93       	push	r21
    322a:	6f 93       	push	r22
    322c:	7f 93       	push	r23
    322e:	8f 93       	push	r24
    3230:	9f 93       	push	r25
    3232:	af 93       	push	r26
    3234:	bf 93       	push	r27
    3236:	ef 93       	push	r30
    3238:	ff 93       	push	r31
    323a:	e0 91 e1 21 	lds	r30, 0x21E1
    323e:	f0 91 e2 21 	lds	r31, 0x21E2
    3242:	30 97       	sbiw	r30, 0x00	; 0
    3244:	29 f0       	breq	.+10     	; 0x3250 <__vector_44+0x3c>
    3246:	80 91 d7 22 	lds	r24, 0x22D7
    324a:	90 91 d8 22 	lds	r25, 0x22D8
    324e:	19 95       	eicall
    3250:	ff 91       	pop	r31
    3252:	ef 91       	pop	r30
    3254:	bf 91       	pop	r27
    3256:	af 91       	pop	r26
    3258:	9f 91       	pop	r25
    325a:	8f 91       	pop	r24
    325c:	7f 91       	pop	r23
    325e:	6f 91       	pop	r22
    3260:	5f 91       	pop	r21
    3262:	4f 91       	pop	r20
    3264:	3f 91       	pop	r19
    3266:	2f 91       	pop	r18
    3268:	0f 90       	pop	r0
    326a:	0b be       	out	0x3b, r0	; 59
    326c:	0f 90       	pop	r0
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	0f 90       	pop	r0
    3272:	1f 90       	pop	r1
    3274:	18 95       	reti

00003276 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3276:	1f 92       	push	r1
    3278:	0f 92       	push	r0
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	0f 92       	push	r0
    327e:	11 24       	eor	r1, r1
    3280:	0b b6       	in	r0, 0x3b	; 59
    3282:	0f 92       	push	r0
    3284:	2f 93       	push	r18
    3286:	3f 93       	push	r19
    3288:	4f 93       	push	r20
    328a:	5f 93       	push	r21
    328c:	6f 93       	push	r22
    328e:	7f 93       	push	r23
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	af 93       	push	r26
    3296:	bf 93       	push	r27
    3298:	ef 93       	push	r30
    329a:	ff 93       	push	r31
    329c:	e0 91 e3 21 	lds	r30, 0x21E3
    32a0:	f0 91 e4 21 	lds	r31, 0x21E4
    32a4:	30 97       	sbiw	r30, 0x00	; 0
    32a6:	29 f0       	breq	.+10     	; 0x32b2 <__vector_45+0x3c>
    32a8:	80 91 d9 22 	lds	r24, 0x22D9
    32ac:	90 91 da 22 	lds	r25, 0x22DA
    32b0:	19 95       	eicall
    32b2:	ff 91       	pop	r31
    32b4:	ef 91       	pop	r30
    32b6:	bf 91       	pop	r27
    32b8:	af 91       	pop	r26
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	7f 91       	pop	r23
    32c0:	6f 91       	pop	r22
    32c2:	5f 91       	pop	r21
    32c4:	4f 91       	pop	r20
    32c6:	3f 91       	pop	r19
    32c8:	2f 91       	pop	r18
    32ca:	0f 90       	pop	r0
    32cc:	0b be       	out	0x3b, r0	; 59
    32ce:	0f 90       	pop	r0
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	0f 90       	pop	r0
    32d4:	1f 90       	pop	r1
    32d6:	18 95       	reti

000032d8 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    32d8:	1f 92       	push	r1
    32da:	0f 92       	push	r0
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	0f 92       	push	r0
    32e0:	11 24       	eor	r1, r1
    32e2:	0b b6       	in	r0, 0x3b	; 59
    32e4:	0f 92       	push	r0
    32e6:	2f 93       	push	r18
    32e8:	3f 93       	push	r19
    32ea:	4f 93       	push	r20
    32ec:	5f 93       	push	r21
    32ee:	6f 93       	push	r22
    32f0:	7f 93       	push	r23
    32f2:	8f 93       	push	r24
    32f4:	9f 93       	push	r25
    32f6:	af 93       	push	r26
    32f8:	bf 93       	push	r27
    32fa:	ef 93       	push	r30
    32fc:	ff 93       	push	r31
    32fe:	e0 91 e5 21 	lds	r30, 0x21E5
    3302:	f0 91 e6 21 	lds	r31, 0x21E6
    3306:	30 97       	sbiw	r30, 0x00	; 0
    3308:	29 f0       	breq	.+10     	; 0x3314 <__vector_46+0x3c>
    330a:	80 91 db 22 	lds	r24, 0x22DB
    330e:	90 91 dc 22 	lds	r25, 0x22DC
    3312:	19 95       	eicall
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0b be       	out	0x3b, r0	; 59
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

0000333a <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    333a:	1f 92       	push	r1
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	0f 92       	push	r0
    3342:	11 24       	eor	r1, r1
    3344:	0b b6       	in	r0, 0x3b	; 59
    3346:	0f 92       	push	r0
    3348:	2f 93       	push	r18
    334a:	3f 93       	push	r19
    334c:	4f 93       	push	r20
    334e:	5f 93       	push	r21
    3350:	6f 93       	push	r22
    3352:	7f 93       	push	r23
    3354:	8f 93       	push	r24
    3356:	9f 93       	push	r25
    3358:	af 93       	push	r26
    335a:	bf 93       	push	r27
    335c:	ef 93       	push	r30
    335e:	ff 93       	push	r31
    3360:	e0 91 e7 21 	lds	r30, 0x21E7
    3364:	f0 91 e8 21 	lds	r31, 0x21E8
    3368:	30 97       	sbiw	r30, 0x00	; 0
    336a:	29 f0       	breq	.+10     	; 0x3376 <__vector_47+0x3c>
    336c:	80 91 dd 22 	lds	r24, 0x22DD
    3370:	90 91 de 22 	lds	r25, 0x22DE
    3374:	19 95       	eicall
    3376:	ff 91       	pop	r31
    3378:	ef 91       	pop	r30
    337a:	bf 91       	pop	r27
    337c:	af 91       	pop	r26
    337e:	9f 91       	pop	r25
    3380:	8f 91       	pop	r24
    3382:	7f 91       	pop	r23
    3384:	6f 91       	pop	r22
    3386:	5f 91       	pop	r21
    3388:	4f 91       	pop	r20
    338a:	3f 91       	pop	r19
    338c:	2f 91       	pop	r18
    338e:	0f 90       	pop	r0
    3390:	0b be       	out	0x3b, r0	; 59
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	0f 90       	pop	r0
    3398:	1f 90       	pop	r1
    339a:	18 95       	reti

0000339c <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    339c:	1f 92       	push	r1
    339e:	0f 92       	push	r0
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	0f 92       	push	r0
    33a4:	11 24       	eor	r1, r1
    33a6:	0b b6       	in	r0, 0x3b	; 59
    33a8:	0f 92       	push	r0
    33aa:	2f 93       	push	r18
    33ac:	3f 93       	push	r19
    33ae:	4f 93       	push	r20
    33b0:	5f 93       	push	r21
    33b2:	6f 93       	push	r22
    33b4:	7f 93       	push	r23
    33b6:	8f 93       	push	r24
    33b8:	9f 93       	push	r25
    33ba:	af 93       	push	r26
    33bc:	bf 93       	push	r27
    33be:	ef 93       	push	r30
    33c0:	ff 93       	push	r31
    33c2:	e0 91 e9 21 	lds	r30, 0x21E9
    33c6:	f0 91 ea 21 	lds	r31, 0x21EA
    33ca:	30 97       	sbiw	r30, 0x00	; 0
    33cc:	29 f0       	breq	.+10     	; 0x33d8 <__vector_48+0x3c>
    33ce:	80 91 df 22 	lds	r24, 0x22DF
    33d2:	90 91 e0 22 	lds	r25, 0x22E0
    33d6:	19 95       	eicall
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	bf 91       	pop	r27
    33de:	af 91       	pop	r26
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	7f 91       	pop	r23
    33e6:	6f 91       	pop	r22
    33e8:	5f 91       	pop	r21
    33ea:	4f 91       	pop	r20
    33ec:	3f 91       	pop	r19
    33ee:	2f 91       	pop	r18
    33f0:	0f 90       	pop	r0
    33f2:	0b be       	out	0x3b, r0	; 59
    33f4:	0f 90       	pop	r0
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	0f 90       	pop	r0
    33fa:	1f 90       	pop	r1
    33fc:	18 95       	reti

000033fe <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	0b b6       	in	r0, 0x3b	; 59
    340a:	0f 92       	push	r0
    340c:	2f 93       	push	r18
    340e:	3f 93       	push	r19
    3410:	4f 93       	push	r20
    3412:	5f 93       	push	r21
    3414:	6f 93       	push	r22
    3416:	7f 93       	push	r23
    3418:	8f 93       	push	r24
    341a:	9f 93       	push	r25
    341c:	af 93       	push	r26
    341e:	bf 93       	push	r27
    3420:	ef 93       	push	r30
    3422:	ff 93       	push	r31
    3424:	e0 91 eb 21 	lds	r30, 0x21EB
    3428:	f0 91 ec 21 	lds	r31, 0x21EC
    342c:	30 97       	sbiw	r30, 0x00	; 0
    342e:	29 f0       	breq	.+10     	; 0x343a <__vector_49+0x3c>
    3430:	80 91 e1 22 	lds	r24, 0x22E1
    3434:	90 91 e2 22 	lds	r25, 0x22E2
    3438:	19 95       	eicall
    343a:	ff 91       	pop	r31
    343c:	ef 91       	pop	r30
    343e:	bf 91       	pop	r27
    3440:	af 91       	pop	r26
    3442:	9f 91       	pop	r25
    3444:	8f 91       	pop	r24
    3446:	7f 91       	pop	r23
    3448:	6f 91       	pop	r22
    344a:	5f 91       	pop	r21
    344c:	4f 91       	pop	r20
    344e:	3f 91       	pop	r19
    3450:	2f 91       	pop	r18
    3452:	0f 90       	pop	r0
    3454:	0b be       	out	0x3b, r0	; 59
    3456:	0f 90       	pop	r0
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	0f 90       	pop	r0
    345c:	1f 90       	pop	r1
    345e:	18 95       	reti

00003460 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    3460:	1f 92       	push	r1
    3462:	0f 92       	push	r0
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	0f 92       	push	r0
    3468:	11 24       	eor	r1, r1
    346a:	0b b6       	in	r0, 0x3b	; 59
    346c:	0f 92       	push	r0
    346e:	2f 93       	push	r18
    3470:	3f 93       	push	r19
    3472:	4f 93       	push	r20
    3474:	5f 93       	push	r21
    3476:	6f 93       	push	r22
    3478:	7f 93       	push	r23
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
    3486:	e0 91 ed 21 	lds	r30, 0x21ED
    348a:	f0 91 ee 21 	lds	r31, 0x21EE
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	29 f0       	breq	.+10     	; 0x349c <__vector_50+0x3c>
    3492:	80 91 e3 22 	lds	r24, 0x22E3
    3496:	90 91 e4 22 	lds	r25, 0x22E4
    349a:	19 95       	eicall
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	7f 91       	pop	r23
    34aa:	6f 91       	pop	r22
    34ac:	5f 91       	pop	r21
    34ae:	4f 91       	pop	r20
    34b0:	3f 91       	pop	r19
    34b2:	2f 91       	pop	r18
    34b4:	0f 90       	pop	r0
    34b6:	0b be       	out	0x3b, r0	; 59
    34b8:	0f 90       	pop	r0
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	0f 90       	pop	r0
    34be:	1f 90       	pop	r1
    34c0:	18 95       	reti

000034c2 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    34c2:	1f 92       	push	r1
    34c4:	0f 92       	push	r0
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	0f 92       	push	r0
    34ca:	11 24       	eor	r1, r1
    34cc:	0b b6       	in	r0, 0x3b	; 59
    34ce:	0f 92       	push	r0
    34d0:	2f 93       	push	r18
    34d2:	3f 93       	push	r19
    34d4:	4f 93       	push	r20
    34d6:	5f 93       	push	r21
    34d8:	6f 93       	push	r22
    34da:	7f 93       	push	r23
    34dc:	8f 93       	push	r24
    34de:	9f 93       	push	r25
    34e0:	af 93       	push	r26
    34e2:	bf 93       	push	r27
    34e4:	ef 93       	push	r30
    34e6:	ff 93       	push	r31
    34e8:	e0 91 ef 21 	lds	r30, 0x21EF
    34ec:	f0 91 f0 21 	lds	r31, 0x21F0
    34f0:	30 97       	sbiw	r30, 0x00	; 0
    34f2:	29 f0       	breq	.+10     	; 0x34fe <__vector_51+0x3c>
    34f4:	80 91 e5 22 	lds	r24, 0x22E5
    34f8:	90 91 e6 22 	lds	r25, 0x22E6
    34fc:	19 95       	eicall
    34fe:	ff 91       	pop	r31
    3500:	ef 91       	pop	r30
    3502:	bf 91       	pop	r27
    3504:	af 91       	pop	r26
    3506:	9f 91       	pop	r25
    3508:	8f 91       	pop	r24
    350a:	7f 91       	pop	r23
    350c:	6f 91       	pop	r22
    350e:	5f 91       	pop	r21
    3510:	4f 91       	pop	r20
    3512:	3f 91       	pop	r19
    3514:	2f 91       	pop	r18
    3516:	0f 90       	pop	r0
    3518:	0b be       	out	0x3b, r0	; 59
    351a:	0f 90       	pop	r0
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	0f 90       	pop	r0
    3520:	1f 90       	pop	r1
    3522:	18 95       	reti

00003524 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    3524:	1f 92       	push	r1
    3526:	0f 92       	push	r0
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	0f 92       	push	r0
    352c:	11 24       	eor	r1, r1
    352e:	0b b6       	in	r0, 0x3b	; 59
    3530:	0f 92       	push	r0
    3532:	2f 93       	push	r18
    3534:	3f 93       	push	r19
    3536:	4f 93       	push	r20
    3538:	5f 93       	push	r21
    353a:	6f 93       	push	r22
    353c:	7f 93       	push	r23
    353e:	8f 93       	push	r24
    3540:	9f 93       	push	r25
    3542:	af 93       	push	r26
    3544:	bf 93       	push	r27
    3546:	ef 93       	push	r30
    3548:	ff 93       	push	r31
    354a:	e0 91 f1 21 	lds	r30, 0x21F1
    354e:	f0 91 f2 21 	lds	r31, 0x21F2
    3552:	30 97       	sbiw	r30, 0x00	; 0
    3554:	29 f0       	breq	.+10     	; 0x3560 <__vector_52+0x3c>
    3556:	80 91 e7 22 	lds	r24, 0x22E7
    355a:	90 91 e8 22 	lds	r25, 0x22E8
    355e:	19 95       	eicall
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0b be       	out	0x3b, r0	; 59
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    3586:	1f 92       	push	r1
    3588:	0f 92       	push	r0
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	0b b6       	in	r0, 0x3b	; 59
    3592:	0f 92       	push	r0
    3594:	2f 93       	push	r18
    3596:	3f 93       	push	r19
    3598:	4f 93       	push	r20
    359a:	5f 93       	push	r21
    359c:	6f 93       	push	r22
    359e:	7f 93       	push	r23
    35a0:	8f 93       	push	r24
    35a2:	9f 93       	push	r25
    35a4:	af 93       	push	r26
    35a6:	bf 93       	push	r27
    35a8:	ef 93       	push	r30
    35aa:	ff 93       	push	r31
    35ac:	e0 91 f3 21 	lds	r30, 0x21F3
    35b0:	f0 91 f4 21 	lds	r31, 0x21F4
    35b4:	30 97       	sbiw	r30, 0x00	; 0
    35b6:	29 f0       	breq	.+10     	; 0x35c2 <__vector_53+0x3c>
    35b8:	80 91 e9 22 	lds	r24, 0x22E9
    35bc:	90 91 ea 22 	lds	r25, 0x22EA
    35c0:	19 95       	eicall
    35c2:	ff 91       	pop	r31
    35c4:	ef 91       	pop	r30
    35c6:	bf 91       	pop	r27
    35c8:	af 91       	pop	r26
    35ca:	9f 91       	pop	r25
    35cc:	8f 91       	pop	r24
    35ce:	7f 91       	pop	r23
    35d0:	6f 91       	pop	r22
    35d2:	5f 91       	pop	r21
    35d4:	4f 91       	pop	r20
    35d6:	3f 91       	pop	r19
    35d8:	2f 91       	pop	r18
    35da:	0f 90       	pop	r0
    35dc:	0b be       	out	0x3b, r0	; 59
    35de:	0f 90       	pop	r0
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	0f 90       	pop	r0
    35e4:	1f 90       	pop	r1
    35e6:	18 95       	reti

000035e8 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	0b b6       	in	r0, 0x3b	; 59
    35f4:	0f 92       	push	r0
    35f6:	2f 93       	push	r18
    35f8:	3f 93       	push	r19
    35fa:	4f 93       	push	r20
    35fc:	5f 93       	push	r21
    35fe:	6f 93       	push	r22
    3600:	7f 93       	push	r23
    3602:	8f 93       	push	r24
    3604:	9f 93       	push	r25
    3606:	af 93       	push	r26
    3608:	bf 93       	push	r27
    360a:	ef 93       	push	r30
    360c:	ff 93       	push	r31
    360e:	e0 91 f5 21 	lds	r30, 0x21F5
    3612:	f0 91 f6 21 	lds	r31, 0x21F6
    3616:	30 97       	sbiw	r30, 0x00	; 0
    3618:	29 f0       	breq	.+10     	; 0x3624 <__vector_54+0x3c>
    361a:	80 91 eb 22 	lds	r24, 0x22EB
    361e:	90 91 ec 22 	lds	r25, 0x22EC
    3622:	19 95       	eicall
    3624:	ff 91       	pop	r31
    3626:	ef 91       	pop	r30
    3628:	bf 91       	pop	r27
    362a:	af 91       	pop	r26
    362c:	9f 91       	pop	r25
    362e:	8f 91       	pop	r24
    3630:	7f 91       	pop	r23
    3632:	6f 91       	pop	r22
    3634:	5f 91       	pop	r21
    3636:	4f 91       	pop	r20
    3638:	3f 91       	pop	r19
    363a:	2f 91       	pop	r18
    363c:	0f 90       	pop	r0
    363e:	0b be       	out	0x3b, r0	; 59
    3640:	0f 90       	pop	r0
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	0f 90       	pop	r0
    3646:	1f 90       	pop	r1
    3648:	18 95       	reti

0000364a <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	11 24       	eor	r1, r1
    3654:	0b b6       	in	r0, 0x3b	; 59
    3656:	0f 92       	push	r0
    3658:	2f 93       	push	r18
    365a:	3f 93       	push	r19
    365c:	4f 93       	push	r20
    365e:	5f 93       	push	r21
    3660:	6f 93       	push	r22
    3662:	7f 93       	push	r23
    3664:	8f 93       	push	r24
    3666:	9f 93       	push	r25
    3668:	af 93       	push	r26
    366a:	bf 93       	push	r27
    366c:	ef 93       	push	r30
    366e:	ff 93       	push	r31
    3670:	e0 91 f7 21 	lds	r30, 0x21F7
    3674:	f0 91 f8 21 	lds	r31, 0x21F8
    3678:	30 97       	sbiw	r30, 0x00	; 0
    367a:	29 f0       	breq	.+10     	; 0x3686 <__vector_55+0x3c>
    367c:	80 91 ed 22 	lds	r24, 0x22ED
    3680:	90 91 ee 22 	lds	r25, 0x22EE
    3684:	19 95       	eicall
    3686:	ff 91       	pop	r31
    3688:	ef 91       	pop	r30
    368a:	bf 91       	pop	r27
    368c:	af 91       	pop	r26
    368e:	9f 91       	pop	r25
    3690:	8f 91       	pop	r24
    3692:	7f 91       	pop	r23
    3694:	6f 91       	pop	r22
    3696:	5f 91       	pop	r21
    3698:	4f 91       	pop	r20
    369a:	3f 91       	pop	r19
    369c:	2f 91       	pop	r18
    369e:	0f 90       	pop	r0
    36a0:	0b be       	out	0x3b, r0	; 59
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	0f 90       	pop	r0
    36a8:	1f 90       	pop	r1
    36aa:	18 95       	reti

000036ac <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    36ac:	1f 92       	push	r1
    36ae:	0f 92       	push	r0
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	0f 92       	push	r0
    36b4:	11 24       	eor	r1, r1
    36b6:	0b b6       	in	r0, 0x3b	; 59
    36b8:	0f 92       	push	r0
    36ba:	2f 93       	push	r18
    36bc:	3f 93       	push	r19
    36be:	4f 93       	push	r20
    36c0:	5f 93       	push	r21
    36c2:	6f 93       	push	r22
    36c4:	7f 93       	push	r23
    36c6:	8f 93       	push	r24
    36c8:	9f 93       	push	r25
    36ca:	af 93       	push	r26
    36cc:	bf 93       	push	r27
    36ce:	ef 93       	push	r30
    36d0:	ff 93       	push	r31
    36d2:	e0 91 f9 21 	lds	r30, 0x21F9
    36d6:	f0 91 fa 21 	lds	r31, 0x21FA
    36da:	30 97       	sbiw	r30, 0x00	; 0
    36dc:	29 f0       	breq	.+10     	; 0x36e8 <__vector_56+0x3c>
    36de:	80 91 ef 22 	lds	r24, 0x22EF
    36e2:	90 91 f0 22 	lds	r25, 0x22F0
    36e6:	19 95       	eicall
    36e8:	ff 91       	pop	r31
    36ea:	ef 91       	pop	r30
    36ec:	bf 91       	pop	r27
    36ee:	af 91       	pop	r26
    36f0:	9f 91       	pop	r25
    36f2:	8f 91       	pop	r24
    36f4:	7f 91       	pop	r23
    36f6:	6f 91       	pop	r22
    36f8:	5f 91       	pop	r21
    36fa:	4f 91       	pop	r20
    36fc:	3f 91       	pop	r19
    36fe:	2f 91       	pop	r18
    3700:	0f 90       	pop	r0
    3702:	0b be       	out	0x3b, r0	; 59
    3704:	0f 90       	pop	r0
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	0f 90       	pop	r0
    370a:	1f 90       	pop	r1
    370c:	18 95       	reti

0000370e <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    370e:	1f 92       	push	r1
    3710:	0f 92       	push	r0
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	0f 92       	push	r0
    3716:	11 24       	eor	r1, r1
    3718:	0b b6       	in	r0, 0x3b	; 59
    371a:	0f 92       	push	r0
    371c:	2f 93       	push	r18
    371e:	3f 93       	push	r19
    3720:	4f 93       	push	r20
    3722:	5f 93       	push	r21
    3724:	6f 93       	push	r22
    3726:	7f 93       	push	r23
    3728:	8f 93       	push	r24
    372a:	9f 93       	push	r25
    372c:	af 93       	push	r26
    372e:	bf 93       	push	r27
    3730:	ef 93       	push	r30
    3732:	ff 93       	push	r31
    3734:	e0 91 fb 21 	lds	r30, 0x21FB
    3738:	f0 91 fc 21 	lds	r31, 0x21FC
    373c:	30 97       	sbiw	r30, 0x00	; 0
    373e:	29 f0       	breq	.+10     	; 0x374a <__vector_57+0x3c>
    3740:	80 91 f1 22 	lds	r24, 0x22F1
    3744:	90 91 f2 22 	lds	r25, 0x22F2
    3748:	19 95       	eicall
    374a:	ff 91       	pop	r31
    374c:	ef 91       	pop	r30
    374e:	bf 91       	pop	r27
    3750:	af 91       	pop	r26
    3752:	9f 91       	pop	r25
    3754:	8f 91       	pop	r24
    3756:	7f 91       	pop	r23
    3758:	6f 91       	pop	r22
    375a:	5f 91       	pop	r21
    375c:	4f 91       	pop	r20
    375e:	3f 91       	pop	r19
    3760:	2f 91       	pop	r18
    3762:	0f 90       	pop	r0
    3764:	0b be       	out	0x3b, r0	; 59
    3766:	0f 90       	pop	r0
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	0f 90       	pop	r0
    376c:	1f 90       	pop	r1
    376e:	18 95       	reti

00003770 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3770:	1f 92       	push	r1
    3772:	0f 92       	push	r0
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	0f 92       	push	r0
    3778:	11 24       	eor	r1, r1
    377a:	0b b6       	in	r0, 0x3b	; 59
    377c:	0f 92       	push	r0
    377e:	2f 93       	push	r18
    3780:	3f 93       	push	r19
    3782:	4f 93       	push	r20
    3784:	5f 93       	push	r21
    3786:	6f 93       	push	r22
    3788:	7f 93       	push	r23
    378a:	8f 93       	push	r24
    378c:	9f 93       	push	r25
    378e:	af 93       	push	r26
    3790:	bf 93       	push	r27
    3792:	ef 93       	push	r30
    3794:	ff 93       	push	r31
    3796:	e0 91 fd 21 	lds	r30, 0x21FD
    379a:	f0 91 fe 21 	lds	r31, 0x21FE
    379e:	30 97       	sbiw	r30, 0x00	; 0
    37a0:	29 f0       	breq	.+10     	; 0x37ac <__vector_58+0x3c>
    37a2:	80 91 f3 22 	lds	r24, 0x22F3
    37a6:	90 91 f4 22 	lds	r25, 0x22F4
    37aa:	19 95       	eicall
    37ac:	ff 91       	pop	r31
    37ae:	ef 91       	pop	r30
    37b0:	bf 91       	pop	r27
    37b2:	af 91       	pop	r26
    37b4:	9f 91       	pop	r25
    37b6:	8f 91       	pop	r24
    37b8:	7f 91       	pop	r23
    37ba:	6f 91       	pop	r22
    37bc:	5f 91       	pop	r21
    37be:	4f 91       	pop	r20
    37c0:	3f 91       	pop	r19
    37c2:	2f 91       	pop	r18
    37c4:	0f 90       	pop	r0
    37c6:	0b be       	out	0x3b, r0	; 59
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	11 24       	eor	r1, r1
    37dc:	0b b6       	in	r0, 0x3b	; 59
    37de:	0f 92       	push	r0
    37e0:	2f 93       	push	r18
    37e2:	3f 93       	push	r19
    37e4:	4f 93       	push	r20
    37e6:	5f 93       	push	r21
    37e8:	6f 93       	push	r22
    37ea:	7f 93       	push	r23
    37ec:	8f 93       	push	r24
    37ee:	9f 93       	push	r25
    37f0:	af 93       	push	r26
    37f2:	bf 93       	push	r27
    37f4:	ef 93       	push	r30
    37f6:	ff 93       	push	r31
    37f8:	e0 91 ff 21 	lds	r30, 0x21FF
    37fc:	f0 91 00 22 	lds	r31, 0x2200
    3800:	30 97       	sbiw	r30, 0x00	; 0
    3802:	29 f0       	breq	.+10     	; 0x380e <__vector_59+0x3c>
    3804:	80 91 f5 22 	lds	r24, 0x22F5
    3808:	90 91 f6 22 	lds	r25, 0x22F6
    380c:	19 95       	eicall
    380e:	ff 91       	pop	r31
    3810:	ef 91       	pop	r30
    3812:	bf 91       	pop	r27
    3814:	af 91       	pop	r26
    3816:	9f 91       	pop	r25
    3818:	8f 91       	pop	r24
    381a:	7f 91       	pop	r23
    381c:	6f 91       	pop	r22
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	0f 90       	pop	r0
    3830:	1f 90       	pop	r1
    3832:	18 95       	reti

00003834 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3834:	1f 92       	push	r1
    3836:	0f 92       	push	r0
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	0f 92       	push	r0
    383c:	11 24       	eor	r1, r1
    383e:	0b b6       	in	r0, 0x3b	; 59
    3840:	0f 92       	push	r0
    3842:	2f 93       	push	r18
    3844:	3f 93       	push	r19
    3846:	4f 93       	push	r20
    3848:	5f 93       	push	r21
    384a:	6f 93       	push	r22
    384c:	7f 93       	push	r23
    384e:	8f 93       	push	r24
    3850:	9f 93       	push	r25
    3852:	af 93       	push	r26
    3854:	bf 93       	push	r27
    3856:	ef 93       	push	r30
    3858:	ff 93       	push	r31
    385a:	e0 91 01 22 	lds	r30, 0x2201
    385e:	f0 91 02 22 	lds	r31, 0x2202
    3862:	30 97       	sbiw	r30, 0x00	; 0
    3864:	29 f0       	breq	.+10     	; 0x3870 <__vector_60+0x3c>
    3866:	80 91 f7 22 	lds	r24, 0x22F7
    386a:	90 91 f8 22 	lds	r25, 0x22F8
    386e:	19 95       	eicall
    3870:	ff 91       	pop	r31
    3872:	ef 91       	pop	r30
    3874:	bf 91       	pop	r27
    3876:	af 91       	pop	r26
    3878:	9f 91       	pop	r25
    387a:	8f 91       	pop	r24
    387c:	7f 91       	pop	r23
    387e:	6f 91       	pop	r22
    3880:	5f 91       	pop	r21
    3882:	4f 91       	pop	r20
    3884:	3f 91       	pop	r19
    3886:	2f 91       	pop	r18
    3888:	0f 90       	pop	r0
    388a:	0b be       	out	0x3b, r0	; 59
    388c:	0f 90       	pop	r0
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	0f 90       	pop	r0
    3892:	1f 90       	pop	r1
    3894:	18 95       	reti

00003896 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3896:	1f 92       	push	r1
    3898:	0f 92       	push	r0
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	0f 92       	push	r0
    389e:	11 24       	eor	r1, r1
    38a0:	0b b6       	in	r0, 0x3b	; 59
    38a2:	0f 92       	push	r0
    38a4:	2f 93       	push	r18
    38a6:	3f 93       	push	r19
    38a8:	4f 93       	push	r20
    38aa:	5f 93       	push	r21
    38ac:	6f 93       	push	r22
    38ae:	7f 93       	push	r23
    38b0:	8f 93       	push	r24
    38b2:	9f 93       	push	r25
    38b4:	af 93       	push	r26
    38b6:	bf 93       	push	r27
    38b8:	ef 93       	push	r30
    38ba:	ff 93       	push	r31
    38bc:	e0 91 03 22 	lds	r30, 0x2203
    38c0:	f0 91 04 22 	lds	r31, 0x2204
    38c4:	30 97       	sbiw	r30, 0x00	; 0
    38c6:	29 f0       	breq	.+10     	; 0x38d2 <__vector_61+0x3c>
    38c8:	80 91 f9 22 	lds	r24, 0x22F9
    38cc:	90 91 fa 22 	lds	r25, 0x22FA
    38d0:	19 95       	eicall
    38d2:	ff 91       	pop	r31
    38d4:	ef 91       	pop	r30
    38d6:	bf 91       	pop	r27
    38d8:	af 91       	pop	r26
    38da:	9f 91       	pop	r25
    38dc:	8f 91       	pop	r24
    38de:	7f 91       	pop	r23
    38e0:	6f 91       	pop	r22
    38e2:	5f 91       	pop	r21
    38e4:	4f 91       	pop	r20
    38e6:	3f 91       	pop	r19
    38e8:	2f 91       	pop	r18
    38ea:	0f 90       	pop	r0
    38ec:	0b be       	out	0x3b, r0	; 59
    38ee:	0f 90       	pop	r0
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	0f 90       	pop	r0
    38f4:	1f 90       	pop	r1
    38f6:	18 95       	reti

000038f8 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    38f8:	1f 92       	push	r1
    38fa:	0f 92       	push	r0
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	0f 92       	push	r0
    3900:	11 24       	eor	r1, r1
    3902:	0b b6       	in	r0, 0x3b	; 59
    3904:	0f 92       	push	r0
    3906:	2f 93       	push	r18
    3908:	3f 93       	push	r19
    390a:	4f 93       	push	r20
    390c:	5f 93       	push	r21
    390e:	6f 93       	push	r22
    3910:	7f 93       	push	r23
    3912:	8f 93       	push	r24
    3914:	9f 93       	push	r25
    3916:	af 93       	push	r26
    3918:	bf 93       	push	r27
    391a:	ef 93       	push	r30
    391c:	ff 93       	push	r31
    391e:	e0 91 05 22 	lds	r30, 0x2205
    3922:	f0 91 06 22 	lds	r31, 0x2206
    3926:	30 97       	sbiw	r30, 0x00	; 0
    3928:	29 f0       	breq	.+10     	; 0x3934 <__vector_62+0x3c>
    392a:	80 91 fb 22 	lds	r24, 0x22FB
    392e:	90 91 fc 22 	lds	r25, 0x22FC
    3932:	19 95       	eicall
    3934:	ff 91       	pop	r31
    3936:	ef 91       	pop	r30
    3938:	bf 91       	pop	r27
    393a:	af 91       	pop	r26
    393c:	9f 91       	pop	r25
    393e:	8f 91       	pop	r24
    3940:	7f 91       	pop	r23
    3942:	6f 91       	pop	r22
    3944:	5f 91       	pop	r21
    3946:	4f 91       	pop	r20
    3948:	3f 91       	pop	r19
    394a:	2f 91       	pop	r18
    394c:	0f 90       	pop	r0
    394e:	0b be       	out	0x3b, r0	; 59
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    395a:	1f 92       	push	r1
    395c:	0f 92       	push	r0
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	0f 92       	push	r0
    3962:	11 24       	eor	r1, r1
    3964:	0b b6       	in	r0, 0x3b	; 59
    3966:	0f 92       	push	r0
    3968:	2f 93       	push	r18
    396a:	3f 93       	push	r19
    396c:	4f 93       	push	r20
    396e:	5f 93       	push	r21
    3970:	6f 93       	push	r22
    3972:	7f 93       	push	r23
    3974:	8f 93       	push	r24
    3976:	9f 93       	push	r25
    3978:	af 93       	push	r26
    397a:	bf 93       	push	r27
    397c:	ef 93       	push	r30
    397e:	ff 93       	push	r31
    3980:	e0 91 07 22 	lds	r30, 0x2207
    3984:	f0 91 08 22 	lds	r31, 0x2208
    3988:	30 97       	sbiw	r30, 0x00	; 0
    398a:	29 f0       	breq	.+10     	; 0x3996 <__vector_63+0x3c>
    398c:	80 91 fd 22 	lds	r24, 0x22FD
    3990:	90 91 fe 22 	lds	r25, 0x22FE
    3994:	19 95       	eicall
    3996:	ff 91       	pop	r31
    3998:	ef 91       	pop	r30
    399a:	bf 91       	pop	r27
    399c:	af 91       	pop	r26
    399e:	9f 91       	pop	r25
    39a0:	8f 91       	pop	r24
    39a2:	7f 91       	pop	r23
    39a4:	6f 91       	pop	r22
    39a6:	5f 91       	pop	r21
    39a8:	4f 91       	pop	r20
    39aa:	3f 91       	pop	r19
    39ac:	2f 91       	pop	r18
    39ae:	0f 90       	pop	r0
    39b0:	0b be       	out	0x3b, r0	; 59
    39b2:	0f 90       	pop	r0
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	0f 90       	pop	r0
    39b8:	1f 90       	pop	r1
    39ba:	18 95       	reti

000039bc <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    39bc:	1f 92       	push	r1
    39be:	0f 92       	push	r0
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	0f 92       	push	r0
    39c4:	11 24       	eor	r1, r1
    39c6:	0b b6       	in	r0, 0x3b	; 59
    39c8:	0f 92       	push	r0
    39ca:	2f 93       	push	r18
    39cc:	3f 93       	push	r19
    39ce:	4f 93       	push	r20
    39d0:	5f 93       	push	r21
    39d2:	6f 93       	push	r22
    39d4:	7f 93       	push	r23
    39d6:	8f 93       	push	r24
    39d8:	9f 93       	push	r25
    39da:	af 93       	push	r26
    39dc:	bf 93       	push	r27
    39de:	ef 93       	push	r30
    39e0:	ff 93       	push	r31
    39e2:	e0 91 09 22 	lds	r30, 0x2209
    39e6:	f0 91 0a 22 	lds	r31, 0x220A
    39ea:	30 97       	sbiw	r30, 0x00	; 0
    39ec:	29 f0       	breq	.+10     	; 0x39f8 <__vector_64+0x3c>
    39ee:	80 91 ff 22 	lds	r24, 0x22FF
    39f2:	90 91 00 23 	lds	r25, 0x2300
    39f6:	19 95       	eicall
    39f8:	ff 91       	pop	r31
    39fa:	ef 91       	pop	r30
    39fc:	bf 91       	pop	r27
    39fe:	af 91       	pop	r26
    3a00:	9f 91       	pop	r25
    3a02:	8f 91       	pop	r24
    3a04:	7f 91       	pop	r23
    3a06:	6f 91       	pop	r22
    3a08:	5f 91       	pop	r21
    3a0a:	4f 91       	pop	r20
    3a0c:	3f 91       	pop	r19
    3a0e:	2f 91       	pop	r18
    3a10:	0f 90       	pop	r0
    3a12:	0b be       	out	0x3b, r0	; 59
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti

00003a1e <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	0b b6       	in	r0, 0x3b	; 59
    3a2a:	0f 92       	push	r0
    3a2c:	2f 93       	push	r18
    3a2e:	3f 93       	push	r19
    3a30:	4f 93       	push	r20
    3a32:	5f 93       	push	r21
    3a34:	6f 93       	push	r22
    3a36:	7f 93       	push	r23
    3a38:	8f 93       	push	r24
    3a3a:	9f 93       	push	r25
    3a3c:	af 93       	push	r26
    3a3e:	bf 93       	push	r27
    3a40:	ef 93       	push	r30
    3a42:	ff 93       	push	r31
    3a44:	e0 91 0b 22 	lds	r30, 0x220B
    3a48:	f0 91 0c 22 	lds	r31, 0x220C
    3a4c:	30 97       	sbiw	r30, 0x00	; 0
    3a4e:	29 f0       	breq	.+10     	; 0x3a5a <__vector_65+0x3c>
    3a50:	80 91 01 23 	lds	r24, 0x2301
    3a54:	90 91 02 23 	lds	r25, 0x2302
    3a58:	19 95       	eicall
    3a5a:	ff 91       	pop	r31
    3a5c:	ef 91       	pop	r30
    3a5e:	bf 91       	pop	r27
    3a60:	af 91       	pop	r26
    3a62:	9f 91       	pop	r25
    3a64:	8f 91       	pop	r24
    3a66:	7f 91       	pop	r23
    3a68:	6f 91       	pop	r22
    3a6a:	5f 91       	pop	r21
    3a6c:	4f 91       	pop	r20
    3a6e:	3f 91       	pop	r19
    3a70:	2f 91       	pop	r18
    3a72:	0f 90       	pop	r0
    3a74:	0b be       	out	0x3b, r0	; 59
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	0f 90       	pop	r0
    3a7c:	1f 90       	pop	r1
    3a7e:	18 95       	reti

00003a80 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3a80:	1f 92       	push	r1
    3a82:	0f 92       	push	r0
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	0f 92       	push	r0
    3a88:	11 24       	eor	r1, r1
    3a8a:	0b b6       	in	r0, 0x3b	; 59
    3a8c:	0f 92       	push	r0
    3a8e:	2f 93       	push	r18
    3a90:	3f 93       	push	r19
    3a92:	4f 93       	push	r20
    3a94:	5f 93       	push	r21
    3a96:	6f 93       	push	r22
    3a98:	7f 93       	push	r23
    3a9a:	8f 93       	push	r24
    3a9c:	9f 93       	push	r25
    3a9e:	af 93       	push	r26
    3aa0:	bf 93       	push	r27
    3aa2:	ef 93       	push	r30
    3aa4:	ff 93       	push	r31
    3aa6:	e0 91 0d 22 	lds	r30, 0x220D
    3aaa:	f0 91 0e 22 	lds	r31, 0x220E
    3aae:	30 97       	sbiw	r30, 0x00	; 0
    3ab0:	29 f0       	breq	.+10     	; 0x3abc <__vector_66+0x3c>
    3ab2:	80 91 03 23 	lds	r24, 0x2303
    3ab6:	90 91 04 23 	lds	r25, 0x2304
    3aba:	19 95       	eicall
    3abc:	ff 91       	pop	r31
    3abe:	ef 91       	pop	r30
    3ac0:	bf 91       	pop	r27
    3ac2:	af 91       	pop	r26
    3ac4:	9f 91       	pop	r25
    3ac6:	8f 91       	pop	r24
    3ac8:	7f 91       	pop	r23
    3aca:	6f 91       	pop	r22
    3acc:	5f 91       	pop	r21
    3ace:	4f 91       	pop	r20
    3ad0:	3f 91       	pop	r19
    3ad2:	2f 91       	pop	r18
    3ad4:	0f 90       	pop	r0
    3ad6:	0b be       	out	0x3b, r0	; 59
    3ad8:	0f 90       	pop	r0
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	0f 90       	pop	r0
    3ade:	1f 90       	pop	r1
    3ae0:	18 95       	reti

00003ae2 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	0b b6       	in	r0, 0x3b	; 59
    3aee:	0f 92       	push	r0
    3af0:	2f 93       	push	r18
    3af2:	3f 93       	push	r19
    3af4:	4f 93       	push	r20
    3af6:	5f 93       	push	r21
    3af8:	6f 93       	push	r22
    3afa:	7f 93       	push	r23
    3afc:	8f 93       	push	r24
    3afe:	9f 93       	push	r25
    3b00:	af 93       	push	r26
    3b02:	bf 93       	push	r27
    3b04:	ef 93       	push	r30
    3b06:	ff 93       	push	r31
    3b08:	e0 91 0f 22 	lds	r30, 0x220F
    3b0c:	f0 91 10 22 	lds	r31, 0x2210
    3b10:	30 97       	sbiw	r30, 0x00	; 0
    3b12:	29 f0       	breq	.+10     	; 0x3b1e <__vector_67+0x3c>
    3b14:	80 91 05 23 	lds	r24, 0x2305
    3b18:	90 91 06 23 	lds	r25, 0x2306
    3b1c:	19 95       	eicall
    3b1e:	ff 91       	pop	r31
    3b20:	ef 91       	pop	r30
    3b22:	bf 91       	pop	r27
    3b24:	af 91       	pop	r26
    3b26:	9f 91       	pop	r25
    3b28:	8f 91       	pop	r24
    3b2a:	7f 91       	pop	r23
    3b2c:	6f 91       	pop	r22
    3b2e:	5f 91       	pop	r21
    3b30:	4f 91       	pop	r20
    3b32:	3f 91       	pop	r19
    3b34:	2f 91       	pop	r18
    3b36:	0f 90       	pop	r0
    3b38:	0b be       	out	0x3b, r0	; 59
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	0f 90       	pop	r0
    3b40:	1f 90       	pop	r1
    3b42:	18 95       	reti

00003b44 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3b44:	1f 92       	push	r1
    3b46:	0f 92       	push	r0
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	0f 92       	push	r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	0b b6       	in	r0, 0x3b	; 59
    3b50:	0f 92       	push	r0
    3b52:	2f 93       	push	r18
    3b54:	3f 93       	push	r19
    3b56:	4f 93       	push	r20
    3b58:	5f 93       	push	r21
    3b5a:	6f 93       	push	r22
    3b5c:	7f 93       	push	r23
    3b5e:	8f 93       	push	r24
    3b60:	9f 93       	push	r25
    3b62:	af 93       	push	r26
    3b64:	bf 93       	push	r27
    3b66:	ef 93       	push	r30
    3b68:	ff 93       	push	r31
    3b6a:	e0 91 11 22 	lds	r30, 0x2211
    3b6e:	f0 91 12 22 	lds	r31, 0x2212
    3b72:	30 97       	sbiw	r30, 0x00	; 0
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <__vector_68+0x3c>
    3b76:	80 91 07 23 	lds	r24, 0x2307
    3b7a:	90 91 08 23 	lds	r25, 0x2308
    3b7e:	19 95       	eicall
    3b80:	ff 91       	pop	r31
    3b82:	ef 91       	pop	r30
    3b84:	bf 91       	pop	r27
    3b86:	af 91       	pop	r26
    3b88:	9f 91       	pop	r25
    3b8a:	8f 91       	pop	r24
    3b8c:	7f 91       	pop	r23
    3b8e:	6f 91       	pop	r22
    3b90:	5f 91       	pop	r21
    3b92:	4f 91       	pop	r20
    3b94:	3f 91       	pop	r19
    3b96:	2f 91       	pop	r18
    3b98:	0f 90       	pop	r0
    3b9a:	0b be       	out	0x3b, r0	; 59
    3b9c:	0f 90       	pop	r0
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	0f 90       	pop	r0
    3ba2:	1f 90       	pop	r1
    3ba4:	18 95       	reti

00003ba6 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3ba6:	1f 92       	push	r1
    3ba8:	0f 92       	push	r0
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	0f 92       	push	r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	0b b6       	in	r0, 0x3b	; 59
    3bb2:	0f 92       	push	r0
    3bb4:	2f 93       	push	r18
    3bb6:	3f 93       	push	r19
    3bb8:	4f 93       	push	r20
    3bba:	5f 93       	push	r21
    3bbc:	6f 93       	push	r22
    3bbe:	7f 93       	push	r23
    3bc0:	8f 93       	push	r24
    3bc2:	9f 93       	push	r25
    3bc4:	af 93       	push	r26
    3bc6:	bf 93       	push	r27
    3bc8:	ef 93       	push	r30
    3bca:	ff 93       	push	r31
    3bcc:	e0 91 13 22 	lds	r30, 0x2213
    3bd0:	f0 91 14 22 	lds	r31, 0x2214
    3bd4:	30 97       	sbiw	r30, 0x00	; 0
    3bd6:	29 f0       	breq	.+10     	; 0x3be2 <__vector_69+0x3c>
    3bd8:	80 91 09 23 	lds	r24, 0x2309
    3bdc:	90 91 0a 23 	lds	r25, 0x230A
    3be0:	19 95       	eicall
    3be2:	ff 91       	pop	r31
    3be4:	ef 91       	pop	r30
    3be6:	bf 91       	pop	r27
    3be8:	af 91       	pop	r26
    3bea:	9f 91       	pop	r25
    3bec:	8f 91       	pop	r24
    3bee:	7f 91       	pop	r23
    3bf0:	6f 91       	pop	r22
    3bf2:	5f 91       	pop	r21
    3bf4:	4f 91       	pop	r20
    3bf6:	3f 91       	pop	r19
    3bf8:	2f 91       	pop	r18
    3bfa:	0f 90       	pop	r0
    3bfc:	0b be       	out	0x3b, r0	; 59
    3bfe:	0f 90       	pop	r0
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	0f 90       	pop	r0
    3c04:	1f 90       	pop	r1
    3c06:	18 95       	reti

00003c08 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3c08:	1f 92       	push	r1
    3c0a:	0f 92       	push	r0
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	0f 92       	push	r0
    3c10:	11 24       	eor	r1, r1
    3c12:	0b b6       	in	r0, 0x3b	; 59
    3c14:	0f 92       	push	r0
    3c16:	2f 93       	push	r18
    3c18:	3f 93       	push	r19
    3c1a:	4f 93       	push	r20
    3c1c:	5f 93       	push	r21
    3c1e:	6f 93       	push	r22
    3c20:	7f 93       	push	r23
    3c22:	8f 93       	push	r24
    3c24:	9f 93       	push	r25
    3c26:	af 93       	push	r26
    3c28:	bf 93       	push	r27
    3c2a:	ef 93       	push	r30
    3c2c:	ff 93       	push	r31
    3c2e:	e0 91 15 22 	lds	r30, 0x2215
    3c32:	f0 91 16 22 	lds	r31, 0x2216
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	29 f0       	breq	.+10     	; 0x3c44 <__vector_70+0x3c>
    3c3a:	80 91 0b 23 	lds	r24, 0x230B
    3c3e:	90 91 0c 23 	lds	r25, 0x230C
    3c42:	19 95       	eicall
    3c44:	ff 91       	pop	r31
    3c46:	ef 91       	pop	r30
    3c48:	bf 91       	pop	r27
    3c4a:	af 91       	pop	r26
    3c4c:	9f 91       	pop	r25
    3c4e:	8f 91       	pop	r24
    3c50:	7f 91       	pop	r23
    3c52:	6f 91       	pop	r22
    3c54:	5f 91       	pop	r21
    3c56:	4f 91       	pop	r20
    3c58:	3f 91       	pop	r19
    3c5a:	2f 91       	pop	r18
    3c5c:	0f 90       	pop	r0
    3c5e:	0b be       	out	0x3b, r0	; 59
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f 90       	pop	r0
    3c66:	1f 90       	pop	r1
    3c68:	18 95       	reti

00003c6a <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3c6a:	1f 92       	push	r1
    3c6c:	0f 92       	push	r0
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	0f 92       	push	r0
    3c72:	11 24       	eor	r1, r1
    3c74:	0b b6       	in	r0, 0x3b	; 59
    3c76:	0f 92       	push	r0
    3c78:	2f 93       	push	r18
    3c7a:	3f 93       	push	r19
    3c7c:	4f 93       	push	r20
    3c7e:	5f 93       	push	r21
    3c80:	6f 93       	push	r22
    3c82:	7f 93       	push	r23
    3c84:	8f 93       	push	r24
    3c86:	9f 93       	push	r25
    3c88:	af 93       	push	r26
    3c8a:	bf 93       	push	r27
    3c8c:	ef 93       	push	r30
    3c8e:	ff 93       	push	r31
    3c90:	e0 91 17 22 	lds	r30, 0x2217
    3c94:	f0 91 18 22 	lds	r31, 0x2218
    3c98:	30 97       	sbiw	r30, 0x00	; 0
    3c9a:	29 f0       	breq	.+10     	; 0x3ca6 <__vector_71+0x3c>
    3c9c:	80 91 0d 23 	lds	r24, 0x230D
    3ca0:	90 91 0e 23 	lds	r25, 0x230E
    3ca4:	19 95       	eicall
    3ca6:	ff 91       	pop	r31
    3ca8:	ef 91       	pop	r30
    3caa:	bf 91       	pop	r27
    3cac:	af 91       	pop	r26
    3cae:	9f 91       	pop	r25
    3cb0:	8f 91       	pop	r24
    3cb2:	7f 91       	pop	r23
    3cb4:	6f 91       	pop	r22
    3cb6:	5f 91       	pop	r21
    3cb8:	4f 91       	pop	r20
    3cba:	3f 91       	pop	r19
    3cbc:	2f 91       	pop	r18
    3cbe:	0f 90       	pop	r0
    3cc0:	0b be       	out	0x3b, r0	; 59
    3cc2:	0f 90       	pop	r0
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	0f 90       	pop	r0
    3cc8:	1f 90       	pop	r1
    3cca:	18 95       	reti

00003ccc <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3ccc:	1f 92       	push	r1
    3cce:	0f 92       	push	r0
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	0f 92       	push	r0
    3cd4:	11 24       	eor	r1, r1
    3cd6:	0b b6       	in	r0, 0x3b	; 59
    3cd8:	0f 92       	push	r0
    3cda:	2f 93       	push	r18
    3cdc:	3f 93       	push	r19
    3cde:	4f 93       	push	r20
    3ce0:	5f 93       	push	r21
    3ce2:	6f 93       	push	r22
    3ce4:	7f 93       	push	r23
    3ce6:	8f 93       	push	r24
    3ce8:	9f 93       	push	r25
    3cea:	af 93       	push	r26
    3cec:	bf 93       	push	r27
    3cee:	ef 93       	push	r30
    3cf0:	ff 93       	push	r31
    3cf2:	e0 91 19 22 	lds	r30, 0x2219
    3cf6:	f0 91 1a 22 	lds	r31, 0x221A
    3cfa:	30 97       	sbiw	r30, 0x00	; 0
    3cfc:	29 f0       	breq	.+10     	; 0x3d08 <__vector_72+0x3c>
    3cfe:	80 91 0f 23 	lds	r24, 0x230F
    3d02:	90 91 10 23 	lds	r25, 0x2310
    3d06:	19 95       	eicall
    3d08:	ff 91       	pop	r31
    3d0a:	ef 91       	pop	r30
    3d0c:	bf 91       	pop	r27
    3d0e:	af 91       	pop	r26
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	0f 90       	pop	r0
    3d22:	0b be       	out	0x3b, r0	; 59
    3d24:	0f 90       	pop	r0
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	0f 90       	pop	r0
    3d2a:	1f 90       	pop	r1
    3d2c:	18 95       	reti

00003d2e <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3d2e:	1f 92       	push	r1
    3d30:	0f 92       	push	r0
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	0f 92       	push	r0
    3d36:	11 24       	eor	r1, r1
    3d38:	0b b6       	in	r0, 0x3b	; 59
    3d3a:	0f 92       	push	r0
    3d3c:	2f 93       	push	r18
    3d3e:	3f 93       	push	r19
    3d40:	4f 93       	push	r20
    3d42:	5f 93       	push	r21
    3d44:	6f 93       	push	r22
    3d46:	7f 93       	push	r23
    3d48:	8f 93       	push	r24
    3d4a:	9f 93       	push	r25
    3d4c:	af 93       	push	r26
    3d4e:	bf 93       	push	r27
    3d50:	ef 93       	push	r30
    3d52:	ff 93       	push	r31
    3d54:	e0 91 1b 22 	lds	r30, 0x221B
    3d58:	f0 91 1c 22 	lds	r31, 0x221C
    3d5c:	30 97       	sbiw	r30, 0x00	; 0
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <__vector_73+0x3c>
    3d60:	80 91 11 23 	lds	r24, 0x2311
    3d64:	90 91 12 23 	lds	r25, 0x2312
    3d68:	19 95       	eicall
    3d6a:	ff 91       	pop	r31
    3d6c:	ef 91       	pop	r30
    3d6e:	bf 91       	pop	r27
    3d70:	af 91       	pop	r26
    3d72:	9f 91       	pop	r25
    3d74:	8f 91       	pop	r24
    3d76:	7f 91       	pop	r23
    3d78:	6f 91       	pop	r22
    3d7a:	5f 91       	pop	r21
    3d7c:	4f 91       	pop	r20
    3d7e:	3f 91       	pop	r19
    3d80:	2f 91       	pop	r18
    3d82:	0f 90       	pop	r0
    3d84:	0b be       	out	0x3b, r0	; 59
    3d86:	0f 90       	pop	r0
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	0f 90       	pop	r0
    3d8c:	1f 90       	pop	r1
    3d8e:	18 95       	reti

00003d90 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3d90:	1f 92       	push	r1
    3d92:	0f 92       	push	r0
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	0f 92       	push	r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	0b b6       	in	r0, 0x3b	; 59
    3d9c:	0f 92       	push	r0
    3d9e:	2f 93       	push	r18
    3da0:	3f 93       	push	r19
    3da2:	4f 93       	push	r20
    3da4:	5f 93       	push	r21
    3da6:	6f 93       	push	r22
    3da8:	7f 93       	push	r23
    3daa:	8f 93       	push	r24
    3dac:	9f 93       	push	r25
    3dae:	af 93       	push	r26
    3db0:	bf 93       	push	r27
    3db2:	ef 93       	push	r30
    3db4:	ff 93       	push	r31
    3db6:	e0 91 1d 22 	lds	r30, 0x221D
    3dba:	f0 91 1e 22 	lds	r31, 0x221E
    3dbe:	30 97       	sbiw	r30, 0x00	; 0
    3dc0:	29 f0       	breq	.+10     	; 0x3dcc <__vector_74+0x3c>
    3dc2:	80 91 13 23 	lds	r24, 0x2313
    3dc6:	90 91 14 23 	lds	r25, 0x2314
    3dca:	19 95       	eicall
    3dcc:	ff 91       	pop	r31
    3dce:	ef 91       	pop	r30
    3dd0:	bf 91       	pop	r27
    3dd2:	af 91       	pop	r26
    3dd4:	9f 91       	pop	r25
    3dd6:	8f 91       	pop	r24
    3dd8:	7f 91       	pop	r23
    3dda:	6f 91       	pop	r22
    3ddc:	5f 91       	pop	r21
    3dde:	4f 91       	pop	r20
    3de0:	3f 91       	pop	r19
    3de2:	2f 91       	pop	r18
    3de4:	0f 90       	pop	r0
    3de6:	0b be       	out	0x3b, r0	; 59
    3de8:	0f 90       	pop	r0
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	0f 90       	pop	r0
    3dee:	1f 90       	pop	r1
    3df0:	18 95       	reti

00003df2 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3df2:	1f 92       	push	r1
    3df4:	0f 92       	push	r0
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	0f 92       	push	r0
    3dfa:	11 24       	eor	r1, r1
    3dfc:	0b b6       	in	r0, 0x3b	; 59
    3dfe:	0f 92       	push	r0
    3e00:	2f 93       	push	r18
    3e02:	3f 93       	push	r19
    3e04:	4f 93       	push	r20
    3e06:	5f 93       	push	r21
    3e08:	6f 93       	push	r22
    3e0a:	7f 93       	push	r23
    3e0c:	8f 93       	push	r24
    3e0e:	9f 93       	push	r25
    3e10:	af 93       	push	r26
    3e12:	bf 93       	push	r27
    3e14:	ef 93       	push	r30
    3e16:	ff 93       	push	r31
    3e18:	e0 91 23 22 	lds	r30, 0x2223
    3e1c:	f0 91 24 22 	lds	r31, 0x2224
    3e20:	30 97       	sbiw	r30, 0x00	; 0
    3e22:	29 f0       	breq	.+10     	; 0x3e2e <__vector_77+0x3c>
    3e24:	80 91 19 23 	lds	r24, 0x2319
    3e28:	90 91 1a 23 	lds	r25, 0x231A
    3e2c:	19 95       	eicall
    3e2e:	ff 91       	pop	r31
    3e30:	ef 91       	pop	r30
    3e32:	bf 91       	pop	r27
    3e34:	af 91       	pop	r26
    3e36:	9f 91       	pop	r25
    3e38:	8f 91       	pop	r24
    3e3a:	7f 91       	pop	r23
    3e3c:	6f 91       	pop	r22
    3e3e:	5f 91       	pop	r21
    3e40:	4f 91       	pop	r20
    3e42:	3f 91       	pop	r19
    3e44:	2f 91       	pop	r18
    3e46:	0f 90       	pop	r0
    3e48:	0b be       	out	0x3b, r0	; 59
    3e4a:	0f 90       	pop	r0
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	0f 90       	pop	r0
    3e50:	1f 90       	pop	r1
    3e52:	18 95       	reti

00003e54 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3e54:	1f 92       	push	r1
    3e56:	0f 92       	push	r0
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	0f 92       	push	r0
    3e5c:	11 24       	eor	r1, r1
    3e5e:	0b b6       	in	r0, 0x3b	; 59
    3e60:	0f 92       	push	r0
    3e62:	2f 93       	push	r18
    3e64:	3f 93       	push	r19
    3e66:	4f 93       	push	r20
    3e68:	5f 93       	push	r21
    3e6a:	6f 93       	push	r22
    3e6c:	7f 93       	push	r23
    3e6e:	8f 93       	push	r24
    3e70:	9f 93       	push	r25
    3e72:	af 93       	push	r26
    3e74:	bf 93       	push	r27
    3e76:	ef 93       	push	r30
    3e78:	ff 93       	push	r31
    3e7a:	e0 91 25 22 	lds	r30, 0x2225
    3e7e:	f0 91 26 22 	lds	r31, 0x2226
    3e82:	30 97       	sbiw	r30, 0x00	; 0
    3e84:	29 f0       	breq	.+10     	; 0x3e90 <__vector_78+0x3c>
    3e86:	80 91 1b 23 	lds	r24, 0x231B
    3e8a:	90 91 1c 23 	lds	r25, 0x231C
    3e8e:	19 95       	eicall
    3e90:	ff 91       	pop	r31
    3e92:	ef 91       	pop	r30
    3e94:	bf 91       	pop	r27
    3e96:	af 91       	pop	r26
    3e98:	9f 91       	pop	r25
    3e9a:	8f 91       	pop	r24
    3e9c:	7f 91       	pop	r23
    3e9e:	6f 91       	pop	r22
    3ea0:	5f 91       	pop	r21
    3ea2:	4f 91       	pop	r20
    3ea4:	3f 91       	pop	r19
    3ea6:	2f 91       	pop	r18
    3ea8:	0f 90       	pop	r0
    3eaa:	0b be       	out	0x3b, r0	; 59
    3eac:	0f 90       	pop	r0
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	0f 90       	pop	r0
    3eb2:	1f 90       	pop	r1
    3eb4:	18 95       	reti

00003eb6 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3eb6:	1f 92       	push	r1
    3eb8:	0f 92       	push	r0
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	0f 92       	push	r0
    3ebe:	11 24       	eor	r1, r1
    3ec0:	0b b6       	in	r0, 0x3b	; 59
    3ec2:	0f 92       	push	r0
    3ec4:	2f 93       	push	r18
    3ec6:	3f 93       	push	r19
    3ec8:	4f 93       	push	r20
    3eca:	5f 93       	push	r21
    3ecc:	6f 93       	push	r22
    3ece:	7f 93       	push	r23
    3ed0:	8f 93       	push	r24
    3ed2:	9f 93       	push	r25
    3ed4:	af 93       	push	r26
    3ed6:	bf 93       	push	r27
    3ed8:	ef 93       	push	r30
    3eda:	ff 93       	push	r31
    3edc:	e0 91 27 22 	lds	r30, 0x2227
    3ee0:	f0 91 28 22 	lds	r31, 0x2228
    3ee4:	30 97       	sbiw	r30, 0x00	; 0
    3ee6:	29 f0       	breq	.+10     	; 0x3ef2 <__vector_79+0x3c>
    3ee8:	80 91 1d 23 	lds	r24, 0x231D
    3eec:	90 91 1e 23 	lds	r25, 0x231E
    3ef0:	19 95       	eicall
    3ef2:	ff 91       	pop	r31
    3ef4:	ef 91       	pop	r30
    3ef6:	bf 91       	pop	r27
    3ef8:	af 91       	pop	r26
    3efa:	9f 91       	pop	r25
    3efc:	8f 91       	pop	r24
    3efe:	7f 91       	pop	r23
    3f00:	6f 91       	pop	r22
    3f02:	5f 91       	pop	r21
    3f04:	4f 91       	pop	r20
    3f06:	3f 91       	pop	r19
    3f08:	2f 91       	pop	r18
    3f0a:	0f 90       	pop	r0
    3f0c:	0b be       	out	0x3b, r0	; 59
    3f0e:	0f 90       	pop	r0
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	0f 90       	pop	r0
    3f14:	1f 90       	pop	r1
    3f16:	18 95       	reti

00003f18 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    3f18:	1f 92       	push	r1
    3f1a:	0f 92       	push	r0
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	0f 92       	push	r0
    3f20:	11 24       	eor	r1, r1
    3f22:	0b b6       	in	r0, 0x3b	; 59
    3f24:	0f 92       	push	r0
    3f26:	2f 93       	push	r18
    3f28:	3f 93       	push	r19
    3f2a:	4f 93       	push	r20
    3f2c:	5f 93       	push	r21
    3f2e:	6f 93       	push	r22
    3f30:	7f 93       	push	r23
    3f32:	8f 93       	push	r24
    3f34:	9f 93       	push	r25
    3f36:	af 93       	push	r26
    3f38:	bf 93       	push	r27
    3f3a:	ef 93       	push	r30
    3f3c:	ff 93       	push	r31
    3f3e:	e0 91 29 22 	lds	r30, 0x2229
    3f42:	f0 91 2a 22 	lds	r31, 0x222A
    3f46:	30 97       	sbiw	r30, 0x00	; 0
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <__vector_80+0x3c>
    3f4a:	80 91 1f 23 	lds	r24, 0x231F
    3f4e:	90 91 20 23 	lds	r25, 0x2320
    3f52:	19 95       	eicall
    3f54:	ff 91       	pop	r31
    3f56:	ef 91       	pop	r30
    3f58:	bf 91       	pop	r27
    3f5a:	af 91       	pop	r26
    3f5c:	9f 91       	pop	r25
    3f5e:	8f 91       	pop	r24
    3f60:	7f 91       	pop	r23
    3f62:	6f 91       	pop	r22
    3f64:	5f 91       	pop	r21
    3f66:	4f 91       	pop	r20
    3f68:	3f 91       	pop	r19
    3f6a:	2f 91       	pop	r18
    3f6c:	0f 90       	pop	r0
    3f6e:	0b be       	out	0x3b, r0	; 59
    3f70:	0f 90       	pop	r0
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	0f 90       	pop	r0
    3f76:	1f 90       	pop	r1
    3f78:	18 95       	reti

00003f7a <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3f7a:	1f 92       	push	r1
    3f7c:	0f 92       	push	r0
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	0f 92       	push	r0
    3f82:	11 24       	eor	r1, r1
    3f84:	0b b6       	in	r0, 0x3b	; 59
    3f86:	0f 92       	push	r0
    3f88:	2f 93       	push	r18
    3f8a:	3f 93       	push	r19
    3f8c:	4f 93       	push	r20
    3f8e:	5f 93       	push	r21
    3f90:	6f 93       	push	r22
    3f92:	7f 93       	push	r23
    3f94:	8f 93       	push	r24
    3f96:	9f 93       	push	r25
    3f98:	af 93       	push	r26
    3f9a:	bf 93       	push	r27
    3f9c:	ef 93       	push	r30
    3f9e:	ff 93       	push	r31
    3fa0:	e0 91 2b 22 	lds	r30, 0x222B
    3fa4:	f0 91 2c 22 	lds	r31, 0x222C
    3fa8:	30 97       	sbiw	r30, 0x00	; 0
    3faa:	29 f0       	breq	.+10     	; 0x3fb6 <__vector_81+0x3c>
    3fac:	80 91 21 23 	lds	r24, 0x2321
    3fb0:	90 91 22 23 	lds	r25, 0x2322
    3fb4:	19 95       	eicall
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	9f 91       	pop	r25
    3fc0:	8f 91       	pop	r24
    3fc2:	7f 91       	pop	r23
    3fc4:	6f 91       	pop	r22
    3fc6:	5f 91       	pop	r21
    3fc8:	4f 91       	pop	r20
    3fca:	3f 91       	pop	r19
    3fcc:	2f 91       	pop	r18
    3fce:	0f 90       	pop	r0
    3fd0:	0b be       	out	0x3b, r0	; 59
    3fd2:	0f 90       	pop	r0
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	0f 90       	pop	r0
    3fd8:	1f 90       	pop	r1
    3fda:	18 95       	reti

00003fdc <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3fdc:	1f 92       	push	r1
    3fde:	0f 92       	push	r0
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	0f 92       	push	r0
    3fe4:	11 24       	eor	r1, r1
    3fe6:	0b b6       	in	r0, 0x3b	; 59
    3fe8:	0f 92       	push	r0
    3fea:	2f 93       	push	r18
    3fec:	3f 93       	push	r19
    3fee:	4f 93       	push	r20
    3ff0:	5f 93       	push	r21
    3ff2:	6f 93       	push	r22
    3ff4:	7f 93       	push	r23
    3ff6:	8f 93       	push	r24
    3ff8:	9f 93       	push	r25
    3ffa:	af 93       	push	r26
    3ffc:	bf 93       	push	r27
    3ffe:	ef 93       	push	r30
    4000:	ff 93       	push	r31
    4002:	e0 91 2d 22 	lds	r30, 0x222D
    4006:	f0 91 2e 22 	lds	r31, 0x222E
    400a:	30 97       	sbiw	r30, 0x00	; 0
    400c:	29 f0       	breq	.+10     	; 0x4018 <__stack+0x19>
    400e:	80 91 23 23 	lds	r24, 0x2323
    4012:	90 91 24 23 	lds	r25, 0x2324
    4016:	19 95       	eicall
    4018:	ff 91       	pop	r31
    401a:	ef 91       	pop	r30
    401c:	bf 91       	pop	r27
    401e:	af 91       	pop	r26
    4020:	9f 91       	pop	r25
    4022:	8f 91       	pop	r24
    4024:	7f 91       	pop	r23
    4026:	6f 91       	pop	r22
    4028:	5f 91       	pop	r21
    402a:	4f 91       	pop	r20
    402c:	3f 91       	pop	r19
    402e:	2f 91       	pop	r18
    4030:	0f 90       	pop	r0
    4032:	0b be       	out	0x3b, r0	; 59
    4034:	0f 90       	pop	r0
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	0f 90       	pop	r0
    403a:	1f 90       	pop	r1
    403c:	18 95       	reti

0000403e <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    403e:	1f 92       	push	r1
    4040:	0f 92       	push	r0
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	0f 92       	push	r0
    4046:	11 24       	eor	r1, r1
    4048:	0b b6       	in	r0, 0x3b	; 59
    404a:	0f 92       	push	r0
    404c:	2f 93       	push	r18
    404e:	3f 93       	push	r19
    4050:	4f 93       	push	r20
    4052:	5f 93       	push	r21
    4054:	6f 93       	push	r22
    4056:	7f 93       	push	r23
    4058:	8f 93       	push	r24
    405a:	9f 93       	push	r25
    405c:	af 93       	push	r26
    405e:	bf 93       	push	r27
    4060:	ef 93       	push	r30
    4062:	ff 93       	push	r31
    4064:	e0 91 2f 22 	lds	r30, 0x222F
    4068:	f0 91 30 22 	lds	r31, 0x2230
    406c:	30 97       	sbiw	r30, 0x00	; 0
    406e:	29 f0       	breq	.+10     	; 0x407a <__vector_83+0x3c>
    4070:	80 91 25 23 	lds	r24, 0x2325
    4074:	90 91 26 23 	lds	r25, 0x2326
    4078:	19 95       	eicall
    407a:	ff 91       	pop	r31
    407c:	ef 91       	pop	r30
    407e:	bf 91       	pop	r27
    4080:	af 91       	pop	r26
    4082:	9f 91       	pop	r25
    4084:	8f 91       	pop	r24
    4086:	7f 91       	pop	r23
    4088:	6f 91       	pop	r22
    408a:	5f 91       	pop	r21
    408c:	4f 91       	pop	r20
    408e:	3f 91       	pop	r19
    4090:	2f 91       	pop	r18
    4092:	0f 90       	pop	r0
    4094:	0b be       	out	0x3b, r0	; 59
    4096:	0f 90       	pop	r0
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	0f 90       	pop	r0
    409c:	1f 90       	pop	r1
    409e:	18 95       	reti

000040a0 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    40a0:	1f 92       	push	r1
    40a2:	0f 92       	push	r0
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	0f 92       	push	r0
    40a8:	11 24       	eor	r1, r1
    40aa:	0b b6       	in	r0, 0x3b	; 59
    40ac:	0f 92       	push	r0
    40ae:	2f 93       	push	r18
    40b0:	3f 93       	push	r19
    40b2:	4f 93       	push	r20
    40b4:	5f 93       	push	r21
    40b6:	6f 93       	push	r22
    40b8:	7f 93       	push	r23
    40ba:	8f 93       	push	r24
    40bc:	9f 93       	push	r25
    40be:	af 93       	push	r26
    40c0:	bf 93       	push	r27
    40c2:	ef 93       	push	r30
    40c4:	ff 93       	push	r31
    40c6:	e0 91 31 22 	lds	r30, 0x2231
    40ca:	f0 91 32 22 	lds	r31, 0x2232
    40ce:	30 97       	sbiw	r30, 0x00	; 0
    40d0:	29 f0       	breq	.+10     	; 0x40dc <__vector_84+0x3c>
    40d2:	80 91 27 23 	lds	r24, 0x2327
    40d6:	90 91 28 23 	lds	r25, 0x2328
    40da:	19 95       	eicall
    40dc:	ff 91       	pop	r31
    40de:	ef 91       	pop	r30
    40e0:	bf 91       	pop	r27
    40e2:	af 91       	pop	r26
    40e4:	9f 91       	pop	r25
    40e6:	8f 91       	pop	r24
    40e8:	7f 91       	pop	r23
    40ea:	6f 91       	pop	r22
    40ec:	5f 91       	pop	r21
    40ee:	4f 91       	pop	r20
    40f0:	3f 91       	pop	r19
    40f2:	2f 91       	pop	r18
    40f4:	0f 90       	pop	r0
    40f6:	0b be       	out	0x3b, r0	; 59
    40f8:	0f 90       	pop	r0
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	0f 90       	pop	r0
    40fe:	1f 90       	pop	r1
    4100:	18 95       	reti

00004102 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    4102:	1f 92       	push	r1
    4104:	0f 92       	push	r0
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	0f 92       	push	r0
    410a:	11 24       	eor	r1, r1
    410c:	0b b6       	in	r0, 0x3b	; 59
    410e:	0f 92       	push	r0
    4110:	2f 93       	push	r18
    4112:	3f 93       	push	r19
    4114:	4f 93       	push	r20
    4116:	5f 93       	push	r21
    4118:	6f 93       	push	r22
    411a:	7f 93       	push	r23
    411c:	8f 93       	push	r24
    411e:	9f 93       	push	r25
    4120:	af 93       	push	r26
    4122:	bf 93       	push	r27
    4124:	ef 93       	push	r30
    4126:	ff 93       	push	r31
    4128:	e0 91 33 22 	lds	r30, 0x2233
    412c:	f0 91 34 22 	lds	r31, 0x2234
    4130:	30 97       	sbiw	r30, 0x00	; 0
    4132:	29 f0       	breq	.+10     	; 0x413e <__vector_85+0x3c>
    4134:	80 91 29 23 	lds	r24, 0x2329
    4138:	90 91 2a 23 	lds	r25, 0x232A
    413c:	19 95       	eicall
    413e:	ff 91       	pop	r31
    4140:	ef 91       	pop	r30
    4142:	bf 91       	pop	r27
    4144:	af 91       	pop	r26
    4146:	9f 91       	pop	r25
    4148:	8f 91       	pop	r24
    414a:	7f 91       	pop	r23
    414c:	6f 91       	pop	r22
    414e:	5f 91       	pop	r21
    4150:	4f 91       	pop	r20
    4152:	3f 91       	pop	r19
    4154:	2f 91       	pop	r18
    4156:	0f 90       	pop	r0
    4158:	0b be       	out	0x3b, r0	; 59
    415a:	0f 90       	pop	r0
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	0f 90       	pop	r0
    4160:	1f 90       	pop	r1
    4162:	18 95       	reti

00004164 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    4164:	1f 92       	push	r1
    4166:	0f 92       	push	r0
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	0f 92       	push	r0
    416c:	11 24       	eor	r1, r1
    416e:	0b b6       	in	r0, 0x3b	; 59
    4170:	0f 92       	push	r0
    4172:	2f 93       	push	r18
    4174:	3f 93       	push	r19
    4176:	4f 93       	push	r20
    4178:	5f 93       	push	r21
    417a:	6f 93       	push	r22
    417c:	7f 93       	push	r23
    417e:	8f 93       	push	r24
    4180:	9f 93       	push	r25
    4182:	af 93       	push	r26
    4184:	bf 93       	push	r27
    4186:	ef 93       	push	r30
    4188:	ff 93       	push	r31
    418a:	e0 91 35 22 	lds	r30, 0x2235
    418e:	f0 91 36 22 	lds	r31, 0x2236
    4192:	30 97       	sbiw	r30, 0x00	; 0
    4194:	29 f0       	breq	.+10     	; 0x41a0 <__vector_86+0x3c>
    4196:	80 91 2b 23 	lds	r24, 0x232B
    419a:	90 91 2c 23 	lds	r25, 0x232C
    419e:	19 95       	eicall
    41a0:	ff 91       	pop	r31
    41a2:	ef 91       	pop	r30
    41a4:	bf 91       	pop	r27
    41a6:	af 91       	pop	r26
    41a8:	9f 91       	pop	r25
    41aa:	8f 91       	pop	r24
    41ac:	7f 91       	pop	r23
    41ae:	6f 91       	pop	r22
    41b0:	5f 91       	pop	r21
    41b2:	4f 91       	pop	r20
    41b4:	3f 91       	pop	r19
    41b6:	2f 91       	pop	r18
    41b8:	0f 90       	pop	r0
    41ba:	0b be       	out	0x3b, r0	; 59
    41bc:	0f 90       	pop	r0
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	0f 90       	pop	r0
    41c2:	1f 90       	pop	r1
    41c4:	18 95       	reti

000041c6 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    41c6:	1f 92       	push	r1
    41c8:	0f 92       	push	r0
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	0f 92       	push	r0
    41ce:	11 24       	eor	r1, r1
    41d0:	0b b6       	in	r0, 0x3b	; 59
    41d2:	0f 92       	push	r0
    41d4:	2f 93       	push	r18
    41d6:	3f 93       	push	r19
    41d8:	4f 93       	push	r20
    41da:	5f 93       	push	r21
    41dc:	6f 93       	push	r22
    41de:	7f 93       	push	r23
    41e0:	8f 93       	push	r24
    41e2:	9f 93       	push	r25
    41e4:	af 93       	push	r26
    41e6:	bf 93       	push	r27
    41e8:	ef 93       	push	r30
    41ea:	ff 93       	push	r31
    41ec:	e0 91 37 22 	lds	r30, 0x2237
    41f0:	f0 91 38 22 	lds	r31, 0x2238
    41f4:	30 97       	sbiw	r30, 0x00	; 0
    41f6:	29 f0       	breq	.+10     	; 0x4202 <__vector_87+0x3c>
    41f8:	80 91 2d 23 	lds	r24, 0x232D
    41fc:	90 91 2e 23 	lds	r25, 0x232E
    4200:	19 95       	eicall
    4202:	ff 91       	pop	r31
    4204:	ef 91       	pop	r30
    4206:	bf 91       	pop	r27
    4208:	af 91       	pop	r26
    420a:	9f 91       	pop	r25
    420c:	8f 91       	pop	r24
    420e:	7f 91       	pop	r23
    4210:	6f 91       	pop	r22
    4212:	5f 91       	pop	r21
    4214:	4f 91       	pop	r20
    4216:	3f 91       	pop	r19
    4218:	2f 91       	pop	r18
    421a:	0f 90       	pop	r0
    421c:	0b be       	out	0x3b, r0	; 59
    421e:	0f 90       	pop	r0
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	0f 90       	pop	r0
    4224:	1f 90       	pop	r1
    4226:	18 95       	reti

00004228 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4228:	1f 92       	push	r1
    422a:	0f 92       	push	r0
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	0f 92       	push	r0
    4230:	11 24       	eor	r1, r1
    4232:	0b b6       	in	r0, 0x3b	; 59
    4234:	0f 92       	push	r0
    4236:	2f 93       	push	r18
    4238:	3f 93       	push	r19
    423a:	4f 93       	push	r20
    423c:	5f 93       	push	r21
    423e:	6f 93       	push	r22
    4240:	7f 93       	push	r23
    4242:	8f 93       	push	r24
    4244:	9f 93       	push	r25
    4246:	af 93       	push	r26
    4248:	bf 93       	push	r27
    424a:	ef 93       	push	r30
    424c:	ff 93       	push	r31
    424e:	e0 91 39 22 	lds	r30, 0x2239
    4252:	f0 91 3a 22 	lds	r31, 0x223A
    4256:	30 97       	sbiw	r30, 0x00	; 0
    4258:	29 f0       	breq	.+10     	; 0x4264 <__vector_88+0x3c>
    425a:	80 91 2f 23 	lds	r24, 0x232F
    425e:	90 91 30 23 	lds	r25, 0x2330
    4262:	19 95       	eicall
    4264:	ff 91       	pop	r31
    4266:	ef 91       	pop	r30
    4268:	bf 91       	pop	r27
    426a:	af 91       	pop	r26
    426c:	9f 91       	pop	r25
    426e:	8f 91       	pop	r24
    4270:	7f 91       	pop	r23
    4272:	6f 91       	pop	r22
    4274:	5f 91       	pop	r21
    4276:	4f 91       	pop	r20
    4278:	3f 91       	pop	r19
    427a:	2f 91       	pop	r18
    427c:	0f 90       	pop	r0
    427e:	0b be       	out	0x3b, r0	; 59
    4280:	0f 90       	pop	r0
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	0f 90       	pop	r0
    4286:	1f 90       	pop	r1
    4288:	18 95       	reti

0000428a <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    428a:	1f 92       	push	r1
    428c:	0f 92       	push	r0
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	0f 92       	push	r0
    4292:	11 24       	eor	r1, r1
    4294:	0b b6       	in	r0, 0x3b	; 59
    4296:	0f 92       	push	r0
    4298:	2f 93       	push	r18
    429a:	3f 93       	push	r19
    429c:	4f 93       	push	r20
    429e:	5f 93       	push	r21
    42a0:	6f 93       	push	r22
    42a2:	7f 93       	push	r23
    42a4:	8f 93       	push	r24
    42a6:	9f 93       	push	r25
    42a8:	af 93       	push	r26
    42aa:	bf 93       	push	r27
    42ac:	ef 93       	push	r30
    42ae:	ff 93       	push	r31
    42b0:	e0 91 3b 22 	lds	r30, 0x223B
    42b4:	f0 91 3c 22 	lds	r31, 0x223C
    42b8:	30 97       	sbiw	r30, 0x00	; 0
    42ba:	29 f0       	breq	.+10     	; 0x42c6 <__vector_89+0x3c>
    42bc:	80 91 31 23 	lds	r24, 0x2331
    42c0:	90 91 32 23 	lds	r25, 0x2332
    42c4:	19 95       	eicall
    42c6:	ff 91       	pop	r31
    42c8:	ef 91       	pop	r30
    42ca:	bf 91       	pop	r27
    42cc:	af 91       	pop	r26
    42ce:	9f 91       	pop	r25
    42d0:	8f 91       	pop	r24
    42d2:	7f 91       	pop	r23
    42d4:	6f 91       	pop	r22
    42d6:	5f 91       	pop	r21
    42d8:	4f 91       	pop	r20
    42da:	3f 91       	pop	r19
    42dc:	2f 91       	pop	r18
    42de:	0f 90       	pop	r0
    42e0:	0b be       	out	0x3b, r0	; 59
    42e2:	0f 90       	pop	r0
    42e4:	0f be       	out	0x3f, r0	; 63
    42e6:	0f 90       	pop	r0
    42e8:	1f 90       	pop	r1
    42ea:	18 95       	reti

000042ec <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    42ec:	1f 92       	push	r1
    42ee:	0f 92       	push	r0
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	0f 92       	push	r0
    42f4:	11 24       	eor	r1, r1
    42f6:	0b b6       	in	r0, 0x3b	; 59
    42f8:	0f 92       	push	r0
    42fa:	2f 93       	push	r18
    42fc:	3f 93       	push	r19
    42fe:	4f 93       	push	r20
    4300:	5f 93       	push	r21
    4302:	6f 93       	push	r22
    4304:	7f 93       	push	r23
    4306:	8f 93       	push	r24
    4308:	9f 93       	push	r25
    430a:	af 93       	push	r26
    430c:	bf 93       	push	r27
    430e:	ef 93       	push	r30
    4310:	ff 93       	push	r31
    4312:	e0 91 3d 22 	lds	r30, 0x223D
    4316:	f0 91 3e 22 	lds	r31, 0x223E
    431a:	30 97       	sbiw	r30, 0x00	; 0
    431c:	29 f0       	breq	.+10     	; 0x4328 <__vector_90+0x3c>
    431e:	80 91 33 23 	lds	r24, 0x2333
    4322:	90 91 34 23 	lds	r25, 0x2334
    4326:	19 95       	eicall
    4328:	ff 91       	pop	r31
    432a:	ef 91       	pop	r30
    432c:	bf 91       	pop	r27
    432e:	af 91       	pop	r26
    4330:	9f 91       	pop	r25
    4332:	8f 91       	pop	r24
    4334:	7f 91       	pop	r23
    4336:	6f 91       	pop	r22
    4338:	5f 91       	pop	r21
    433a:	4f 91       	pop	r20
    433c:	3f 91       	pop	r19
    433e:	2f 91       	pop	r18
    4340:	0f 90       	pop	r0
    4342:	0b be       	out	0x3b, r0	; 59
    4344:	0f 90       	pop	r0
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	0f 90       	pop	r0
    434a:	1f 90       	pop	r1
    434c:	18 95       	reti

0000434e <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    434e:	1f 92       	push	r1
    4350:	0f 92       	push	r0
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	0f 92       	push	r0
    4356:	11 24       	eor	r1, r1
    4358:	0b b6       	in	r0, 0x3b	; 59
    435a:	0f 92       	push	r0
    435c:	2f 93       	push	r18
    435e:	3f 93       	push	r19
    4360:	4f 93       	push	r20
    4362:	5f 93       	push	r21
    4364:	6f 93       	push	r22
    4366:	7f 93       	push	r23
    4368:	8f 93       	push	r24
    436a:	9f 93       	push	r25
    436c:	af 93       	push	r26
    436e:	bf 93       	push	r27
    4370:	ef 93       	push	r30
    4372:	ff 93       	push	r31
    4374:	e0 91 3f 22 	lds	r30, 0x223F
    4378:	f0 91 40 22 	lds	r31, 0x2240
    437c:	30 97       	sbiw	r30, 0x00	; 0
    437e:	29 f0       	breq	.+10     	; 0x438a <__vector_91+0x3c>
    4380:	80 91 35 23 	lds	r24, 0x2335
    4384:	90 91 36 23 	lds	r25, 0x2336
    4388:	19 95       	eicall
    438a:	ff 91       	pop	r31
    438c:	ef 91       	pop	r30
    438e:	bf 91       	pop	r27
    4390:	af 91       	pop	r26
    4392:	9f 91       	pop	r25
    4394:	8f 91       	pop	r24
    4396:	7f 91       	pop	r23
    4398:	6f 91       	pop	r22
    439a:	5f 91       	pop	r21
    439c:	4f 91       	pop	r20
    439e:	3f 91       	pop	r19
    43a0:	2f 91       	pop	r18
    43a2:	0f 90       	pop	r0
    43a4:	0b be       	out	0x3b, r0	; 59
    43a6:	0f 90       	pop	r0
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	0f 90       	pop	r0
    43ac:	1f 90       	pop	r1
    43ae:	18 95       	reti

000043b0 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    43b0:	1f 92       	push	r1
    43b2:	0f 92       	push	r0
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	0f 92       	push	r0
    43b8:	11 24       	eor	r1, r1
    43ba:	0b b6       	in	r0, 0x3b	; 59
    43bc:	0f 92       	push	r0
    43be:	2f 93       	push	r18
    43c0:	3f 93       	push	r19
    43c2:	4f 93       	push	r20
    43c4:	5f 93       	push	r21
    43c6:	6f 93       	push	r22
    43c8:	7f 93       	push	r23
    43ca:	8f 93       	push	r24
    43cc:	9f 93       	push	r25
    43ce:	af 93       	push	r26
    43d0:	bf 93       	push	r27
    43d2:	ef 93       	push	r30
    43d4:	ff 93       	push	r31
    43d6:	e0 91 41 22 	lds	r30, 0x2241
    43da:	f0 91 42 22 	lds	r31, 0x2242
    43de:	30 97       	sbiw	r30, 0x00	; 0
    43e0:	29 f0       	breq	.+10     	; 0x43ec <__vector_92+0x3c>
    43e2:	80 91 37 23 	lds	r24, 0x2337
    43e6:	90 91 38 23 	lds	r25, 0x2338
    43ea:	19 95       	eicall
    43ec:	ff 91       	pop	r31
    43ee:	ef 91       	pop	r30
    43f0:	bf 91       	pop	r27
    43f2:	af 91       	pop	r26
    43f4:	9f 91       	pop	r25
    43f6:	8f 91       	pop	r24
    43f8:	7f 91       	pop	r23
    43fa:	6f 91       	pop	r22
    43fc:	5f 91       	pop	r21
    43fe:	4f 91       	pop	r20
    4400:	3f 91       	pop	r19
    4402:	2f 91       	pop	r18
    4404:	0f 90       	pop	r0
    4406:	0b be       	out	0x3b, r0	; 59
    4408:	0f 90       	pop	r0
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	0f 90       	pop	r0
    440e:	1f 90       	pop	r1
    4410:	18 95       	reti

00004412 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    4412:	1f 92       	push	r1
    4414:	0f 92       	push	r0
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	0f 92       	push	r0
    441a:	11 24       	eor	r1, r1
    441c:	0b b6       	in	r0, 0x3b	; 59
    441e:	0f 92       	push	r0
    4420:	2f 93       	push	r18
    4422:	3f 93       	push	r19
    4424:	4f 93       	push	r20
    4426:	5f 93       	push	r21
    4428:	6f 93       	push	r22
    442a:	7f 93       	push	r23
    442c:	8f 93       	push	r24
    442e:	9f 93       	push	r25
    4430:	af 93       	push	r26
    4432:	bf 93       	push	r27
    4434:	ef 93       	push	r30
    4436:	ff 93       	push	r31
    4438:	e0 91 43 22 	lds	r30, 0x2243
    443c:	f0 91 44 22 	lds	r31, 0x2244
    4440:	30 97       	sbiw	r30, 0x00	; 0
    4442:	29 f0       	breq	.+10     	; 0x444e <__vector_93+0x3c>
    4444:	80 91 39 23 	lds	r24, 0x2339
    4448:	90 91 3a 23 	lds	r25, 0x233A
    444c:	19 95       	eicall
    444e:	ff 91       	pop	r31
    4450:	ef 91       	pop	r30
    4452:	bf 91       	pop	r27
    4454:	af 91       	pop	r26
    4456:	9f 91       	pop	r25
    4458:	8f 91       	pop	r24
    445a:	7f 91       	pop	r23
    445c:	6f 91       	pop	r22
    445e:	5f 91       	pop	r21
    4460:	4f 91       	pop	r20
    4462:	3f 91       	pop	r19
    4464:	2f 91       	pop	r18
    4466:	0f 90       	pop	r0
    4468:	0b be       	out	0x3b, r0	; 59
    446a:	0f 90       	pop	r0
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	0f 90       	pop	r0
    4470:	1f 90       	pop	r1
    4472:	18 95       	reti

00004474 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    4474:	1f 92       	push	r1
    4476:	0f 92       	push	r0
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	0f 92       	push	r0
    447c:	11 24       	eor	r1, r1
    447e:	0b b6       	in	r0, 0x3b	; 59
    4480:	0f 92       	push	r0
    4482:	2f 93       	push	r18
    4484:	3f 93       	push	r19
    4486:	4f 93       	push	r20
    4488:	5f 93       	push	r21
    448a:	6f 93       	push	r22
    448c:	7f 93       	push	r23
    448e:	8f 93       	push	r24
    4490:	9f 93       	push	r25
    4492:	af 93       	push	r26
    4494:	bf 93       	push	r27
    4496:	ef 93       	push	r30
    4498:	ff 93       	push	r31
    449a:	e0 91 59 22 	lds	r30, 0x2259
    449e:	f0 91 5a 22 	lds	r31, 0x225A
    44a2:	30 97       	sbiw	r30, 0x00	; 0
    44a4:	29 f0       	breq	.+10     	; 0x44b0 <__vector_104+0x3c>
    44a6:	80 91 4f 23 	lds	r24, 0x234F
    44aa:	90 91 50 23 	lds	r25, 0x2350
    44ae:	19 95       	eicall
    44b0:	ff 91       	pop	r31
    44b2:	ef 91       	pop	r30
    44b4:	bf 91       	pop	r27
    44b6:	af 91       	pop	r26
    44b8:	9f 91       	pop	r25
    44ba:	8f 91       	pop	r24
    44bc:	7f 91       	pop	r23
    44be:	6f 91       	pop	r22
    44c0:	5f 91       	pop	r21
    44c2:	4f 91       	pop	r20
    44c4:	3f 91       	pop	r19
    44c6:	2f 91       	pop	r18
    44c8:	0f 90       	pop	r0
    44ca:	0b be       	out	0x3b, r0	; 59
    44cc:	0f 90       	pop	r0
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	0f 90       	pop	r0
    44d2:	1f 90       	pop	r1
    44d4:	18 95       	reti

000044d6 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    44d6:	1f 92       	push	r1
    44d8:	0f 92       	push	r0
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	0f 92       	push	r0
    44de:	11 24       	eor	r1, r1
    44e0:	0b b6       	in	r0, 0x3b	; 59
    44e2:	0f 92       	push	r0
    44e4:	2f 93       	push	r18
    44e6:	3f 93       	push	r19
    44e8:	4f 93       	push	r20
    44ea:	5f 93       	push	r21
    44ec:	6f 93       	push	r22
    44ee:	7f 93       	push	r23
    44f0:	8f 93       	push	r24
    44f2:	9f 93       	push	r25
    44f4:	af 93       	push	r26
    44f6:	bf 93       	push	r27
    44f8:	ef 93       	push	r30
    44fa:	ff 93       	push	r31
    44fc:	e0 91 5b 22 	lds	r30, 0x225B
    4500:	f0 91 5c 22 	lds	r31, 0x225C
    4504:	30 97       	sbiw	r30, 0x00	; 0
    4506:	29 f0       	breq	.+10     	; 0x4512 <__vector_105+0x3c>
    4508:	80 91 51 23 	lds	r24, 0x2351
    450c:	90 91 52 23 	lds	r25, 0x2352
    4510:	19 95       	eicall
    4512:	ff 91       	pop	r31
    4514:	ef 91       	pop	r30
    4516:	bf 91       	pop	r27
    4518:	af 91       	pop	r26
    451a:	9f 91       	pop	r25
    451c:	8f 91       	pop	r24
    451e:	7f 91       	pop	r23
    4520:	6f 91       	pop	r22
    4522:	5f 91       	pop	r21
    4524:	4f 91       	pop	r20
    4526:	3f 91       	pop	r19
    4528:	2f 91       	pop	r18
    452a:	0f 90       	pop	r0
    452c:	0b be       	out	0x3b, r0	; 59
    452e:	0f 90       	pop	r0
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	0f 90       	pop	r0
    4534:	1f 90       	pop	r1
    4536:	18 95       	reti

00004538 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4538:	1f 92       	push	r1
    453a:	0f 92       	push	r0
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	0f 92       	push	r0
    4540:	11 24       	eor	r1, r1
    4542:	0b b6       	in	r0, 0x3b	; 59
    4544:	0f 92       	push	r0
    4546:	2f 93       	push	r18
    4548:	3f 93       	push	r19
    454a:	4f 93       	push	r20
    454c:	5f 93       	push	r21
    454e:	6f 93       	push	r22
    4550:	7f 93       	push	r23
    4552:	8f 93       	push	r24
    4554:	9f 93       	push	r25
    4556:	af 93       	push	r26
    4558:	bf 93       	push	r27
    455a:	ef 93       	push	r30
    455c:	ff 93       	push	r31
    455e:	e0 91 61 22 	lds	r30, 0x2261
    4562:	f0 91 62 22 	lds	r31, 0x2262
    4566:	30 97       	sbiw	r30, 0x00	; 0
    4568:	29 f0       	breq	.+10     	; 0x4574 <__vector_108+0x3c>
    456a:	80 91 57 23 	lds	r24, 0x2357
    456e:	90 91 58 23 	lds	r25, 0x2358
    4572:	19 95       	eicall
    4574:	ff 91       	pop	r31
    4576:	ef 91       	pop	r30
    4578:	bf 91       	pop	r27
    457a:	af 91       	pop	r26
    457c:	9f 91       	pop	r25
    457e:	8f 91       	pop	r24
    4580:	7f 91       	pop	r23
    4582:	6f 91       	pop	r22
    4584:	5f 91       	pop	r21
    4586:	4f 91       	pop	r20
    4588:	3f 91       	pop	r19
    458a:	2f 91       	pop	r18
    458c:	0f 90       	pop	r0
    458e:	0b be       	out	0x3b, r0	; 59
    4590:	0f 90       	pop	r0
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	0f 90       	pop	r0
    4596:	1f 90       	pop	r1
    4598:	18 95       	reti

0000459a <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    459a:	1f 92       	push	r1
    459c:	0f 92       	push	r0
    459e:	0f b6       	in	r0, 0x3f	; 63
    45a0:	0f 92       	push	r0
    45a2:	11 24       	eor	r1, r1
    45a4:	0b b6       	in	r0, 0x3b	; 59
    45a6:	0f 92       	push	r0
    45a8:	2f 93       	push	r18
    45aa:	3f 93       	push	r19
    45ac:	4f 93       	push	r20
    45ae:	5f 93       	push	r21
    45b0:	6f 93       	push	r22
    45b2:	7f 93       	push	r23
    45b4:	8f 93       	push	r24
    45b6:	9f 93       	push	r25
    45b8:	af 93       	push	r26
    45ba:	bf 93       	push	r27
    45bc:	ef 93       	push	r30
    45be:	ff 93       	push	r31
    45c0:	e0 91 63 22 	lds	r30, 0x2263
    45c4:	f0 91 64 22 	lds	r31, 0x2264
    45c8:	30 97       	sbiw	r30, 0x00	; 0
    45ca:	29 f0       	breq	.+10     	; 0x45d6 <__vector_109+0x3c>
    45cc:	80 91 59 23 	lds	r24, 0x2359
    45d0:	90 91 5a 23 	lds	r25, 0x235A
    45d4:	19 95       	eicall
    45d6:	ff 91       	pop	r31
    45d8:	ef 91       	pop	r30
    45da:	bf 91       	pop	r27
    45dc:	af 91       	pop	r26
    45de:	9f 91       	pop	r25
    45e0:	8f 91       	pop	r24
    45e2:	7f 91       	pop	r23
    45e4:	6f 91       	pop	r22
    45e6:	5f 91       	pop	r21
    45e8:	4f 91       	pop	r20
    45ea:	3f 91       	pop	r19
    45ec:	2f 91       	pop	r18
    45ee:	0f 90       	pop	r0
    45f0:	0b be       	out	0x3b, r0	; 59
    45f2:	0f 90       	pop	r0
    45f4:	0f be       	out	0x3f, r0	; 63
    45f6:	0f 90       	pop	r0
    45f8:	1f 90       	pop	r1
    45fa:	18 95       	reti

000045fc <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    45fc:	1f 92       	push	r1
    45fe:	0f 92       	push	r0
    4600:	0f b6       	in	r0, 0x3f	; 63
    4602:	0f 92       	push	r0
    4604:	11 24       	eor	r1, r1
    4606:	0b b6       	in	r0, 0x3b	; 59
    4608:	0f 92       	push	r0
    460a:	2f 93       	push	r18
    460c:	3f 93       	push	r19
    460e:	4f 93       	push	r20
    4610:	5f 93       	push	r21
    4612:	6f 93       	push	r22
    4614:	7f 93       	push	r23
    4616:	8f 93       	push	r24
    4618:	9f 93       	push	r25
    461a:	af 93       	push	r26
    461c:	bf 93       	push	r27
    461e:	ef 93       	push	r30
    4620:	ff 93       	push	r31
    4622:	e0 91 65 22 	lds	r30, 0x2265
    4626:	f0 91 66 22 	lds	r31, 0x2266
    462a:	30 97       	sbiw	r30, 0x00	; 0
    462c:	29 f0       	breq	.+10     	; 0x4638 <__vector_110+0x3c>
    462e:	80 91 5b 23 	lds	r24, 0x235B
    4632:	90 91 5c 23 	lds	r25, 0x235C
    4636:	19 95       	eicall
    4638:	ff 91       	pop	r31
    463a:	ef 91       	pop	r30
    463c:	bf 91       	pop	r27
    463e:	af 91       	pop	r26
    4640:	9f 91       	pop	r25
    4642:	8f 91       	pop	r24
    4644:	7f 91       	pop	r23
    4646:	6f 91       	pop	r22
    4648:	5f 91       	pop	r21
    464a:	4f 91       	pop	r20
    464c:	3f 91       	pop	r19
    464e:	2f 91       	pop	r18
    4650:	0f 90       	pop	r0
    4652:	0b be       	out	0x3b, r0	; 59
    4654:	0f 90       	pop	r0
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	0f 90       	pop	r0
    465a:	1f 90       	pop	r1
    465c:	18 95       	reti

0000465e <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    465e:	1f 92       	push	r1
    4660:	0f 92       	push	r0
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	0f 92       	push	r0
    4666:	11 24       	eor	r1, r1
    4668:	0b b6       	in	r0, 0x3b	; 59
    466a:	0f 92       	push	r0
    466c:	2f 93       	push	r18
    466e:	3f 93       	push	r19
    4670:	4f 93       	push	r20
    4672:	5f 93       	push	r21
    4674:	6f 93       	push	r22
    4676:	7f 93       	push	r23
    4678:	8f 93       	push	r24
    467a:	9f 93       	push	r25
    467c:	af 93       	push	r26
    467e:	bf 93       	push	r27
    4680:	ef 93       	push	r30
    4682:	ff 93       	push	r31
    4684:	e0 91 67 22 	lds	r30, 0x2267
    4688:	f0 91 68 22 	lds	r31, 0x2268
    468c:	30 97       	sbiw	r30, 0x00	; 0
    468e:	29 f0       	breq	.+10     	; 0x469a <__vector_111+0x3c>
    4690:	80 91 5d 23 	lds	r24, 0x235D
    4694:	90 91 5e 23 	lds	r25, 0x235E
    4698:	19 95       	eicall
    469a:	ff 91       	pop	r31
    469c:	ef 91       	pop	r30
    469e:	bf 91       	pop	r27
    46a0:	af 91       	pop	r26
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	7f 91       	pop	r23
    46a8:	6f 91       	pop	r22
    46aa:	5f 91       	pop	r21
    46ac:	4f 91       	pop	r20
    46ae:	3f 91       	pop	r19
    46b0:	2f 91       	pop	r18
    46b2:	0f 90       	pop	r0
    46b4:	0b be       	out	0x3b, r0	; 59
    46b6:	0f 90       	pop	r0
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	0f 90       	pop	r0
    46bc:	1f 90       	pop	r1
    46be:	18 95       	reti

000046c0 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	0f 92       	push	r0
    46c8:	11 24       	eor	r1, r1
    46ca:	0b b6       	in	r0, 0x3b	; 59
    46cc:	0f 92       	push	r0
    46ce:	2f 93       	push	r18
    46d0:	3f 93       	push	r19
    46d2:	4f 93       	push	r20
    46d4:	5f 93       	push	r21
    46d6:	6f 93       	push	r22
    46d8:	7f 93       	push	r23
    46da:	8f 93       	push	r24
    46dc:	9f 93       	push	r25
    46de:	af 93       	push	r26
    46e0:	bf 93       	push	r27
    46e2:	ef 93       	push	r30
    46e4:	ff 93       	push	r31
    46e6:	e0 91 69 22 	lds	r30, 0x2269
    46ea:	f0 91 6a 22 	lds	r31, 0x226A
    46ee:	30 97       	sbiw	r30, 0x00	; 0
    46f0:	29 f0       	breq	.+10     	; 0x46fc <__vector_112+0x3c>
    46f2:	80 91 5f 23 	lds	r24, 0x235F
    46f6:	90 91 60 23 	lds	r25, 0x2360
    46fa:	19 95       	eicall
    46fc:	ff 91       	pop	r31
    46fe:	ef 91       	pop	r30
    4700:	bf 91       	pop	r27
    4702:	af 91       	pop	r26
    4704:	9f 91       	pop	r25
    4706:	8f 91       	pop	r24
    4708:	7f 91       	pop	r23
    470a:	6f 91       	pop	r22
    470c:	5f 91       	pop	r21
    470e:	4f 91       	pop	r20
    4710:	3f 91       	pop	r19
    4712:	2f 91       	pop	r18
    4714:	0f 90       	pop	r0
    4716:	0b be       	out	0x3b, r0	; 59
    4718:	0f 90       	pop	r0
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	0f 90       	pop	r0
    471e:	1f 90       	pop	r1
    4720:	18 95       	reti

00004722 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    4722:	1f 92       	push	r1
    4724:	0f 92       	push	r0
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	0f 92       	push	r0
    472a:	11 24       	eor	r1, r1
    472c:	0b b6       	in	r0, 0x3b	; 59
    472e:	0f 92       	push	r0
    4730:	2f 93       	push	r18
    4732:	3f 93       	push	r19
    4734:	4f 93       	push	r20
    4736:	5f 93       	push	r21
    4738:	6f 93       	push	r22
    473a:	7f 93       	push	r23
    473c:	8f 93       	push	r24
    473e:	9f 93       	push	r25
    4740:	af 93       	push	r26
    4742:	bf 93       	push	r27
    4744:	ef 93       	push	r30
    4746:	ff 93       	push	r31
    4748:	e0 91 6b 22 	lds	r30, 0x226B
    474c:	f0 91 6c 22 	lds	r31, 0x226C
    4750:	30 97       	sbiw	r30, 0x00	; 0
    4752:	29 f0       	breq	.+10     	; 0x475e <__vector_113+0x3c>
    4754:	80 91 61 23 	lds	r24, 0x2361
    4758:	90 91 62 23 	lds	r25, 0x2362
    475c:	19 95       	eicall
    475e:	ff 91       	pop	r31
    4760:	ef 91       	pop	r30
    4762:	bf 91       	pop	r27
    4764:	af 91       	pop	r26
    4766:	9f 91       	pop	r25
    4768:	8f 91       	pop	r24
    476a:	7f 91       	pop	r23
    476c:	6f 91       	pop	r22
    476e:	5f 91       	pop	r21
    4770:	4f 91       	pop	r20
    4772:	3f 91       	pop	r19
    4774:	2f 91       	pop	r18
    4776:	0f 90       	pop	r0
    4778:	0b be       	out	0x3b, r0	; 59
    477a:	0f 90       	pop	r0
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	0f 90       	pop	r0
    4780:	1f 90       	pop	r1
    4782:	18 95       	reti

00004784 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4784:	1f 92       	push	r1
    4786:	0f 92       	push	r0
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	0f 92       	push	r0
    478c:	11 24       	eor	r1, r1
    478e:	0b b6       	in	r0, 0x3b	; 59
    4790:	0f 92       	push	r0
    4792:	2f 93       	push	r18
    4794:	3f 93       	push	r19
    4796:	4f 93       	push	r20
    4798:	5f 93       	push	r21
    479a:	6f 93       	push	r22
    479c:	7f 93       	push	r23
    479e:	8f 93       	push	r24
    47a0:	9f 93       	push	r25
    47a2:	af 93       	push	r26
    47a4:	bf 93       	push	r27
    47a6:	ef 93       	push	r30
    47a8:	ff 93       	push	r31
    47aa:	e0 91 77 22 	lds	r30, 0x2277
    47ae:	f0 91 78 22 	lds	r31, 0x2278
    47b2:	30 97       	sbiw	r30, 0x00	; 0
    47b4:	29 f0       	breq	.+10     	; 0x47c0 <__vector_119+0x3c>
    47b6:	80 91 6d 23 	lds	r24, 0x236D
    47ba:	90 91 6e 23 	lds	r25, 0x236E
    47be:	19 95       	eicall
    47c0:	ff 91       	pop	r31
    47c2:	ef 91       	pop	r30
    47c4:	bf 91       	pop	r27
    47c6:	af 91       	pop	r26
    47c8:	9f 91       	pop	r25
    47ca:	8f 91       	pop	r24
    47cc:	7f 91       	pop	r23
    47ce:	6f 91       	pop	r22
    47d0:	5f 91       	pop	r21
    47d2:	4f 91       	pop	r20
    47d4:	3f 91       	pop	r19
    47d6:	2f 91       	pop	r18
    47d8:	0f 90       	pop	r0
    47da:	0b be       	out	0x3b, r0	; 59
    47dc:	0f 90       	pop	r0
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	0f 90       	pop	r0
    47e2:	1f 90       	pop	r1
    47e4:	18 95       	reti

000047e6 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    47e6:	1f 92       	push	r1
    47e8:	0f 92       	push	r0
    47ea:	0f b6       	in	r0, 0x3f	; 63
    47ec:	0f 92       	push	r0
    47ee:	11 24       	eor	r1, r1
    47f0:	0b b6       	in	r0, 0x3b	; 59
    47f2:	0f 92       	push	r0
    47f4:	2f 93       	push	r18
    47f6:	3f 93       	push	r19
    47f8:	4f 93       	push	r20
    47fa:	5f 93       	push	r21
    47fc:	6f 93       	push	r22
    47fe:	7f 93       	push	r23
    4800:	8f 93       	push	r24
    4802:	9f 93       	push	r25
    4804:	af 93       	push	r26
    4806:	bf 93       	push	r27
    4808:	ef 93       	push	r30
    480a:	ff 93       	push	r31
    480c:	e0 91 79 22 	lds	r30, 0x2279
    4810:	f0 91 7a 22 	lds	r31, 0x227A
    4814:	30 97       	sbiw	r30, 0x00	; 0
    4816:	29 f0       	breq	.+10     	; 0x4822 <__vector_120+0x3c>
    4818:	80 91 6f 23 	lds	r24, 0x236F
    481c:	90 91 70 23 	lds	r25, 0x2370
    4820:	19 95       	eicall
    4822:	ff 91       	pop	r31
    4824:	ef 91       	pop	r30
    4826:	bf 91       	pop	r27
    4828:	af 91       	pop	r26
    482a:	9f 91       	pop	r25
    482c:	8f 91       	pop	r24
    482e:	7f 91       	pop	r23
    4830:	6f 91       	pop	r22
    4832:	5f 91       	pop	r21
    4834:	4f 91       	pop	r20
    4836:	3f 91       	pop	r19
    4838:	2f 91       	pop	r18
    483a:	0f 90       	pop	r0
    483c:	0b be       	out	0x3b, r0	; 59
    483e:	0f 90       	pop	r0
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	0f 90       	pop	r0
    4844:	1f 90       	pop	r1
    4846:	18 95       	reti

00004848 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4848:	1f 92       	push	r1
    484a:	0f 92       	push	r0
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	0f 92       	push	r0
    4850:	11 24       	eor	r1, r1
    4852:	0b b6       	in	r0, 0x3b	; 59
    4854:	0f 92       	push	r0
    4856:	2f 93       	push	r18
    4858:	3f 93       	push	r19
    485a:	4f 93       	push	r20
    485c:	5f 93       	push	r21
    485e:	6f 93       	push	r22
    4860:	7f 93       	push	r23
    4862:	8f 93       	push	r24
    4864:	9f 93       	push	r25
    4866:	af 93       	push	r26
    4868:	bf 93       	push	r27
    486a:	ef 93       	push	r30
    486c:	ff 93       	push	r31
    486e:	e0 91 7b 22 	lds	r30, 0x227B
    4872:	f0 91 7c 22 	lds	r31, 0x227C
    4876:	30 97       	sbiw	r30, 0x00	; 0
    4878:	29 f0       	breq	.+10     	; 0x4884 <__vector_121+0x3c>
    487a:	80 91 71 23 	lds	r24, 0x2371
    487e:	90 91 72 23 	lds	r25, 0x2372
    4882:	19 95       	eicall
    4884:	ff 91       	pop	r31
    4886:	ef 91       	pop	r30
    4888:	bf 91       	pop	r27
    488a:	af 91       	pop	r26
    488c:	9f 91       	pop	r25
    488e:	8f 91       	pop	r24
    4890:	7f 91       	pop	r23
    4892:	6f 91       	pop	r22
    4894:	5f 91       	pop	r21
    4896:	4f 91       	pop	r20
    4898:	3f 91       	pop	r19
    489a:	2f 91       	pop	r18
    489c:	0f 90       	pop	r0
    489e:	0b be       	out	0x3b, r0	; 59
    48a0:	0f 90       	pop	r0
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	0f 90       	pop	r0
    48a6:	1f 90       	pop	r1
    48a8:	18 95       	reti

000048aa <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    48aa:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    48ae:	fd cf       	rjmp	.-6      	; 0x48aa <__cxa_pure_virtual>

000048b0 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    48b0:	89 eb       	ldi	r24, 0xB9	; 185
    48b2:	93 e2       	ldi	r25, 0x23	; 35
    48b4:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    48b8:	87 eb       	ldi	r24, 0xB7	; 183
    48ba:	93 e2       	ldi	r25, 0x23	; 35
    48bc:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    48c0:	8e e9       	ldi	r24, 0x9E	; 158
    48c2:	93 e2       	ldi	r25, 0x23	; 35
    48c4:	0e 94 23 26 	call	0x4c46	; 0x4c46 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    48c8:	84 e9       	ldi	r24, 0x94	; 148
    48ca:	93 e2       	ldi	r25, 0x23	; 35
    48cc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    48d0:	83 e9       	ldi	r24, 0x93	; 147
    48d2:	93 e2       	ldi	r25, 0x23	; 35
    48d4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    48d8:	87 e7       	ldi	r24, 0x77	; 119
    48da:	93 e2       	ldi	r25, 0x23	; 35
    48dc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN16CLaserControlAppC1Ev>
    48e0:	08 95       	ret

000048e2 <_GLOBAL__sub_D_dacSPI>:
    48e2:	87 e7       	ldi	r24, 0x77	; 119
    48e4:	93 e2       	ldi	r25, 0x23	; 35
    48e6:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    48ea:	83 e9       	ldi	r24, 0x93	; 147
    48ec:	93 e2       	ldi	r25, 0x23	; 35
    48ee:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    48f2:	84 e9       	ldi	r24, 0x94	; 148
    48f4:	93 e2       	ldi	r25, 0x23	; 35
    48f6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    48fa:	8e e9       	ldi	r24, 0x9E	; 158
    48fc:	93 e2       	ldi	r25, 0x23	; 35
    48fe:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    4902:	87 eb       	ldi	r24, 0xB7	; 183
    4904:	93 e2       	ldi	r25, 0x23	; 35
    4906:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    490a:	89 eb       	ldi	r24, 0xB9	; 185
    490c:	93 e2       	ldi	r25, 0x23	; 35
    490e:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN4CSPID1Ev>
    4912:	08 95       	ret

00004914 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4914:	ef 92       	push	r14
    4916:	0f 93       	push	r16
    4918:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    491a:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    491c:	84 e9       	ldi	r24, 0x94	; 148
    491e:	93 e2       	ldi	r25, 0x23	; 35
    4920:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    4924:	83 e9       	ldi	r24, 0x93	; 147
    4926:	93 e2       	ldi	r25, 0x23	; 35
    4928:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    492c:	0f 2e       	mov	r0, r31
    492e:	f3 e0       	ldi	r31, 0x03	; 3
    4930:	ef 2e       	mov	r14, r31
    4932:	f0 2d       	mov	r31, r0
    4934:	00 e0       	ldi	r16, 0x00	; 0
    4936:	23 e0       	ldi	r18, 0x03	; 3
    4938:	40 e0       	ldi	r20, 0x00	; 0
    493a:	61 e0       	ldi	r22, 0x01	; 1
    493c:	89 eb       	ldi	r24, 0xB9	; 185
    493e:	93 e2       	ldi	r25, 0x23	; 35
    4940:	0e 94 42 10 	call	0x2084	; 0x2084 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4944:	01 e0       	ldi	r16, 0x01	; 1
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	40 e0       	ldi	r20, 0x00	; 0
    494a:	6d e0       	ldi	r22, 0x0D	; 13
    494c:	87 eb       	ldi	r24, 0xB7	; 183
    494e:	93 e2       	ldi	r25, 0x23	; 35
    4950:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    4954:	00 e0       	ldi	r16, 0x00	; 0
    4956:	11 e0       	ldi	r17, 0x01	; 1
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	31 e0       	ldi	r19, 0x01	; 1
    495c:	47 e7       	ldi	r20, 0x77	; 119
    495e:	53 e2       	ldi	r21, 0x23	; 35
    4960:	67 eb       	ldi	r22, 0xB7	; 183
    4962:	73 e2       	ldi	r23, 0x23	; 35
    4964:	8e e9       	ldi	r24, 0x9E	; 158
    4966:	93 e2       	ldi	r25, 0x23	; 35
    4968:	0e 94 29 26 	call	0x4c52	; 0x4c52 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    496c:	6e e9       	ldi	r22, 0x9E	; 158
    496e:	73 e2       	ldi	r23, 0x23	; 35
    4970:	87 e7       	ldi	r24, 0x77	; 119
    4972:	93 e2       	ldi	r25, 0x23	; 35
    4974:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4978:	84 e9       	ldi	r24, 0x94	; 148
    497a:	93 e2       	ldi	r25, 0x23	; 35
    497c:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    4980:	78 94       	sei
}
    4982:	1f 91       	pop	r17
    4984:	0f 91       	pop	r16
    4986:	ef 90       	pop	r14
    4988:	08 95       	ret

0000498a <main>:
	 
int main(void)
{
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	1f 92       	push	r1
    4990:	1f 92       	push	r1
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    4996:	0e 94 8a 24 	call	0x4914	; 0x4914 <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    499a:	83 e9       	ldi	r24, 0x93	; 147
    499c:	93 e2       	ldi	r25, 0x23	; 35
    499e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <_ZN12CSoundPlayer4PlayEv>
	laserBoard.Relay1On();
    49a2:	84 e9       	ldi	r24, 0x94	; 148
    49a4:	93 e2       	ldi	r25, 0x23	; 35
    49a6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN11CLaserBoard8Relay1OnEv>
    49aa:	2f ef       	ldi	r18, 0xFF	; 255
    49ac:	83 ec       	ldi	r24, 0xC3	; 195
    49ae:	99 e0       	ldi	r25, 0x09	; 9
    49b0:	21 50       	subi	r18, 0x01	; 1
    49b2:	80 40       	sbci	r24, 0x00	; 0
    49b4:	90 40       	sbci	r25, 0x00	; 0
    49b6:	e1 f7       	brne	.-8      	; 0x49b0 <main+0x26>
    49b8:	00 c0       	rjmp	.+0      	; 0x49ba <main+0x30>
    49ba:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    49bc:	84 e9       	ldi	r24, 0x94	; 148
    49be:	93 e2       	ldi	r25, 0x23	; 35
    49c0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    49c4:	19 82       	std	Y+1, r1	; 0x01
    49c6:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    49c8:	42 e0       	ldi	r20, 0x02	; 2
    49ca:	50 e0       	ldi	r21, 0x00	; 0
    49cc:	be 01       	movw	r22, r28
    49ce:	6f 5f       	subi	r22, 0xFF	; 255
    49d0:	7f 4f       	sbci	r23, 0xFF	; 255
    49d2:	89 eb       	ldi	r24, 0xB9	; 185
    49d4:	93 e2       	ldi	r25, 0x23	; 35
    49d6:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    49da:	87 e7       	ldi	r24, 0x77	; 119
    49dc:	93 e2       	ldi	r25, 0x23	; 35
    49de:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    49e2:	18 ec       	ldi	r17, 0xC8	; 200
    49e4:	8f e3       	ldi	r24, 0x3F	; 63
    49e6:	9f e1       	ldi	r25, 0x1F	; 31
    49e8:	01 97       	sbiw	r24, 0x01	; 1
    49ea:	f1 f7       	brne	.-4      	; 0x49e8 <main+0x5e>
    49ec:	00 c0       	rjmp	.+0      	; 0x49ee <main+0x64>
    49ee:	00 00       	nop
    49f0:	40 91 75 23 	lds	r20, 0x2375
    49f4:	50 91 76 23 	lds	r21, 0x2376
    49f8:	ca 01       	movw	r24, r20
    49fa:	01 96       	adiw	r24, 0x01	; 1
    49fc:	80 93 75 23 	sts	0x2375, r24
    4a00:	90 93 76 23 	sts	0x2376, r25
    4a04:	9a 01       	movw	r18, r20
    4a06:	36 95       	lsr	r19
    4a08:	27 95       	ror	r18
    4a0a:	36 95       	lsr	r19
    4a0c:	27 95       	ror	r18
    4a0e:	36 95       	lsr	r19
    4a10:	27 95       	ror	r18
    4a12:	ab e7       	ldi	r26, 0x7B	; 123
    4a14:	b4 e1       	ldi	r27, 0x14	; 20
    4a16:	0e 94 82 28 	call	0x5104	; 0x5104 <__umulhisi3>
    4a1a:	96 95       	lsr	r25
    4a1c:	87 95       	ror	r24
    4a1e:	18 9f       	mul	r17, r24
    4a20:	90 01       	movw	r18, r0
    4a22:	19 9f       	mul	r17, r25
    4a24:	30 0d       	add	r19, r0
    4a26:	11 24       	eor	r1, r1
    4a28:	42 17       	cp	r20, r18
    4a2a:	53 07       	cpc	r21, r19
    4a2c:	21 f4       	brne	.+8      	; 0x4a36 <main+0xac>
			App.Run();
    4a2e:	87 e7       	ldi	r24, 0x77	; 119
    4a30:	93 e2       	ldi	r25, 0x23	; 35
    4a32:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN16CLaserControlApp3RunEv>
			
		laserBoard.PortCheck();
    4a36:	84 e9       	ldi	r24, 0x94	; 148
    4a38:	93 e2       	ldi	r25, 0x23	; 35
    4a3a:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN11CLaserBoard9PortCheckEv>
		float y = 1023.0f * (1.0f + sinf(x)) * 0.5f;
		uint16_t data = ((uint16_t)y) << 2;
	
		// Send to DAC	
		dacSPI.Send((uint8_t*)&data, sizeof(data));*/
    }
    4a3e:	d2 cf       	rjmp	.-92     	; 0x49e4 <main+0x5a>

00004a40 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4a40:	cf 93       	push	r28
    4a42:	df 93       	push	r29
    4a44:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4a46:	ec 81       	ldd	r30, Y+4	; 0x04
    4a48:	fd 81       	ldd	r31, Y+5	; 0x05
    4a4a:	8a ea       	ldi	r24, 0xAA	; 170
    4a4c:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4a4e:	ec 81       	ldd	r30, Y+4	; 0x04
    4a50:	fd 81       	ldd	r31, Y+5	; 0x05
    4a52:	8c ec       	ldi	r24, 0xCC	; 204
    4a54:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4a56:	ec 81       	ldd	r30, Y+4	; 0x04
    4a58:	fd 81       	ldd	r31, Y+5	; 0x05
    4a5a:	82 e0       	ldi	r24, 0x02	; 2
    4a5c:	82 0f       	add	r24, r18
    4a5e:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4a60:	ec 81       	ldd	r30, Y+4	; 0x04
    4a62:	fd 81       	ldd	r31, Y+5	; 0x05
    4a64:	80 e8       	ldi	r24, 0x80	; 128
    4a66:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4a68:	ec 81       	ldd	r30, Y+4	; 0x04
    4a6a:	fd 81       	ldd	r31, Y+5	; 0x05
    4a6c:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4a6e:	85 e0       	ldi	r24, 0x05	; 5
    4a70:	82 0f       	add	r24, r18
    4a72:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	21 15       	cp	r18, r1
    4a78:	31 05       	cpc	r19, r1
    4a7a:	81 f0       	breq	.+32     	; 0x4a9c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4a7c:	da 01       	movw	r26, r20
    4a7e:	42 0f       	add	r20, r18
    4a80:	53 1f       	adc	r21, r19
    4a82:	65 e0       	ldi	r22, 0x05	; 5
    4a84:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4a86:	9d 91       	ld	r25, X+
    4a88:	ec 81       	ldd	r30, Y+4	; 0x04
    4a8a:	fd 81       	ldd	r31, Y+5	; 0x05
    4a8c:	e6 0f       	add	r30, r22
    4a8e:	f7 1f       	adc	r31, r23
    4a90:	90 83       	st	Z, r25
    4a92:	6f 5f       	subi	r22, 0xFF	; 255
    4a94:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4a96:	a4 17       	cp	r26, r20
    4a98:	b5 07       	cpc	r27, r21
    4a9a:	a9 f7       	brne	.-22     	; 0x4a86 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	08 95       	ret

00004aa2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4aa2:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4aa4:	a4 81       	ldd	r26, Z+4	; 0x04
    4aa6:	b5 81       	ldd	r27, Z+5	; 0x05
    4aa8:	8a ea       	ldi	r24, 0xAA	; 170
    4aaa:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4aac:	a4 81       	ldd	r26, Z+4	; 0x04
    4aae:	b5 81       	ldd	r27, Z+5	; 0x05
    4ab0:	8c ec       	ldi	r24, 0xCC	; 204
    4ab2:	11 96       	adiw	r26, 0x01	; 1
    4ab4:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4ab6:	a4 81       	ldd	r26, Z+4	; 0x04
    4ab8:	b5 81       	ldd	r27, Z+5	; 0x05
    4aba:	83 e0       	ldi	r24, 0x03	; 3
    4abc:	12 96       	adiw	r26, 0x02	; 2
    4abe:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4ac0:	a4 81       	ldd	r26, Z+4	; 0x04
    4ac2:	b5 81       	ldd	r27, Z+5	; 0x05
    4ac4:	81 e8       	ldi	r24, 0x81	; 129
    4ac6:	13 96       	adiw	r26, 0x03	; 3
    4ac8:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4aca:	a4 81       	ldd	r26, Z+4	; 0x04
    4acc:	b5 81       	ldd	r27, Z+5	; 0x05
    4ace:	14 96       	adiw	r26, 0x04	; 4
    4ad0:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4ad2:	a4 81       	ldd	r26, Z+4	; 0x04
    4ad4:	b5 81       	ldd	r27, Z+5	; 0x05
    4ad6:	15 96       	adiw	r26, 0x05	; 5
    4ad8:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4ada:	86 e0       	ldi	r24, 0x06	; 6
    4adc:	81 87       	std	Z+9, r24	; 0x09
    4ade:	08 95       	ret

00004ae0 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4ae0:	0f 93       	push	r16
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4ae8:	dc 01       	movw	r26, r24
    4aea:	14 96       	adiw	r26, 0x04	; 4
    4aec:	ed 91       	ld	r30, X+
    4aee:	fc 91       	ld	r31, X
    4af0:	15 97       	sbiw	r26, 0x05	; 5
    4af2:	aa ea       	ldi	r26, 0xAA	; 170
    4af4:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4af6:	ec 01       	movw	r28, r24
    4af8:	ec 81       	ldd	r30, Y+4	; 0x04
    4afa:	fd 81       	ldd	r31, Y+5	; 0x05
    4afc:	ac ec       	ldi	r26, 0xCC	; 204
    4afe:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4b00:	ec 81       	ldd	r30, Y+4	; 0x04
    4b02:	fd 81       	ldd	r31, Y+5	; 0x05
    4b04:	a3 e0       	ldi	r26, 0x03	; 3
    4b06:	a2 0f       	add	r26, r18
    4b08:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    4b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    4b0e:	a2 e8       	ldi	r26, 0x82	; 130
    4b10:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4b12:	ec 81       	ldd	r30, Y+4	; 0x04
    4b14:	fd 81       	ldd	r31, Y+5	; 0x05
    4b16:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4b18:	ec 81       	ldd	r30, Y+4	; 0x04
    4b1a:	fd 81       	ldd	r31, Y+5	; 0x05
    4b1c:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4b1e:	66 e0       	ldi	r22, 0x06	; 6
    4b20:	62 0f       	add	r22, r18
    4b22:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4b24:	36 95       	lsr	r19
    4b26:	27 95       	ror	r18
    4b28:	21 15       	cp	r18, r1
    4b2a:	31 05       	cpc	r19, r1
    4b2c:	e1 f0       	breq	.+56     	; 0x4b66 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4b2e:	e4 2f       	mov	r30, r20
    4b30:	f5 2f       	mov	r31, r21
    4b32:	2d 5f       	subi	r18, 0xFD	; 253
    4b34:	3f 4f       	sbci	r19, 0xFF	; 255
    4b36:	22 0f       	add	r18, r18
    4b38:	33 1f       	adc	r19, r19
    4b3a:	46 e0       	ldi	r20, 0x06	; 6
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4b3e:	ec 01       	movw	r28, r24
    4b40:	ac 81       	ldd	r26, Y+4	; 0x04
    4b42:	bd 81       	ldd	r27, Y+5	; 0x05
    4b44:	a4 0f       	add	r26, r20
    4b46:	b5 1f       	adc	r27, r21
    4b48:	61 81       	ldd	r22, Z+1	; 0x01
    4b4a:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4b4c:	ac 81       	ldd	r26, Y+4	; 0x04
    4b4e:	bd 81       	ldd	r27, Y+5	; 0x05
    4b50:	a4 0f       	add	r26, r20
    4b52:	b5 1f       	adc	r27, r21
    4b54:	60 81       	ld	r22, Z
    4b56:	32 96       	adiw	r30, 0x02	; 2
    4b58:	11 96       	adiw	r26, 0x01	; 1
    4b5a:	6c 93       	st	X, r22
    4b5c:	4e 5f       	subi	r20, 0xFE	; 254
    4b5e:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4b60:	42 17       	cp	r20, r18
    4b62:	53 07       	cpc	r21, r19
    4b64:	61 f7       	brne	.-40     	; 0x4b3e <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	1f 91       	pop	r17
    4b6c:	0f 91       	pop	r16
    4b6e:	08 95       	ret

00004b70 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4b70:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4b72:	a4 81       	ldd	r26, Z+4	; 0x04
    4b74:	b5 81       	ldd	r27, Z+5	; 0x05
    4b76:	8a ea       	ldi	r24, 0xAA	; 170
    4b78:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4b7a:	a4 81       	ldd	r26, Z+4	; 0x04
    4b7c:	b5 81       	ldd	r27, Z+5	; 0x05
    4b7e:	8c ec       	ldi	r24, 0xCC	; 204
    4b80:	11 96       	adiw	r26, 0x01	; 1
    4b82:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4b84:	a4 81       	ldd	r26, Z+4	; 0x04
    4b86:	b5 81       	ldd	r27, Z+5	; 0x05
    4b88:	84 e0       	ldi	r24, 0x04	; 4
    4b8a:	12 96       	adiw	r26, 0x02	; 2
    4b8c:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4b8e:	a4 81       	ldd	r26, Z+4	; 0x04
    4b90:	b5 81       	ldd	r27, Z+5	; 0x05
    4b92:	83 e8       	ldi	r24, 0x83	; 131
    4b94:	13 96       	adiw	r26, 0x03	; 3
    4b96:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4b98:	a4 81       	ldd	r26, Z+4	; 0x04
    4b9a:	b5 81       	ldd	r27, Z+5	; 0x05
    4b9c:	14 96       	adiw	r26, 0x04	; 4
    4b9e:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4ba0:	a4 81       	ldd	r26, Z+4	; 0x04
    4ba2:	b5 81       	ldd	r27, Z+5	; 0x05
    4ba4:	15 96       	adiw	r26, 0x05	; 5
    4ba6:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4ba8:	a4 81       	ldd	r26, Z+4	; 0x04
    4baa:	b5 81       	ldd	r27, Z+5	; 0x05
    4bac:	16 96       	adiw	r26, 0x06	; 6
    4bae:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4bb0:	87 e0       	ldi	r24, 0x07	; 7
    4bb2:	81 87       	std	Z+9, r24	; 0x09
    4bb4:	08 95       	ret

00004bb6 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4bb6:	0f 93       	push	r16
    4bb8:	1f 93       	push	r17
    4bba:	cf 93       	push	r28
    4bbc:	df 93       	push	r29
    4bbe:	ec 01       	movw	r28, r24
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4bc4:	6f 83       	std	Y+7, r22	; 0x07
    4bc6:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4bc8:	4a 87       	std	Y+10, r20	; 0x0a
    4bca:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4bcc:	0e 94 b3 28 	call	0x5166	; 0x5166 <malloc>
    4bd0:	8a 83       	std	Y+2, r24	; 0x02
    4bd2:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4bd4:	c8 01       	movw	r24, r16
    4bd6:	0e 94 b3 28 	call	0x5166	; 0x5166 <malloc>
    4bda:	8c 83       	std	Y+4, r24	; 0x04
    4bdc:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4bde:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4be0:	1e 82       	std	Y+6, r1	; 0x06
}
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	08 95       	ret

00004bec <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4bec:	cf 93       	push	r28
    4bee:	df 93       	push	r29
    4bf0:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf6:	0e 94 48 29 	call	0x5290	; 0x5290 <free>
	free(tx_buffer);
    4bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    4bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    4bfe:	0e 94 48 29 	call	0x5290	; 0x5290 <free>
}
    4c02:	df 91       	pop	r29
    4c04:	cf 91       	pop	r28
    4c06:	08 95       	ret

00004c08 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    4c08:	08 95       	ret

00004c0a <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	57 96       	adiw	r26, 0x17	; 23
    4c0e:	8d 91       	ld	r24, X+
    4c10:	9c 91       	ld	r25, X
    4c12:	58 97       	sbiw	r26, 0x18	; 24
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	39 f0       	breq	.+14     	; 0x4c26 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    4c18:	dc 01       	movw	r26, r24
    4c1a:	ed 91       	ld	r30, X+
    4c1c:	fc 91       	ld	r31, X
    4c1e:	02 80       	ldd	r0, Z+2	; 0x02
    4c20:	f3 81       	ldd	r31, Z+3	; 0x03
    4c22:	e0 2d       	mov	r30, r0
    4c24:	19 95       	eicall
    4c26:	08 95       	ret

00004c28 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    4c28:	dc 01       	movw	r26, r24
    4c2a:	57 96       	adiw	r26, 0x17	; 23
    4c2c:	8d 91       	ld	r24, X+
    4c2e:	9c 91       	ld	r25, X
    4c30:	58 97       	sbiw	r26, 0x18	; 24
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	39 f0       	breq	.+14     	; 0x4c44 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    4c36:	dc 01       	movw	r26, r24
    4c38:	ed 91       	ld	r30, X+
    4c3a:	fc 91       	ld	r31, X
    4c3c:	04 80       	ldd	r0, Z+4	; 0x04
    4c3e:	f5 81       	ldd	r31, Z+5	; 0x05
    4c40:	e0 2d       	mov	r30, r0
    4c42:	19 95       	eicall
    4c44:	08 95       	ret

00004c46 <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    4c46:	22 e4       	ldi	r18, 0x42	; 66
    4c48:	31 e2       	ldi	r19, 0x21	; 33
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	20 83       	st	Z, r18
    4c4e:	31 83       	std	Z+1, r19	; 0x01
    4c50:	08 95       	ret

00004c52 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4c52:	cf 92       	push	r12
    4c54:	df 92       	push	r13
    4c56:	ef 92       	push	r14
    4c58:	ff 92       	push	r15
    4c5a:	0f 93       	push	r16
    4c5c:	1f 93       	push	r17
    4c5e:	cf 93       	push	r28
    4c60:	df 93       	push	r29
    4c62:	ec 01       	movw	r28, r24
    4c64:	7b 01       	movw	r14, r22
    4c66:	6a 01       	movw	r12, r20
    4c68:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4c6a:	2f 83       	std	Y+7, r18	; 0x07
    4c6c:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4c6e:	0a 87       	std	Y+10, r16	; 0x0a
    4c70:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4c72:	0e 94 b3 28 	call	0x5166	; 0x5166 <malloc>
    4c76:	8a 83       	std	Y+2, r24	; 0x02
    4c78:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	0e 94 b3 28 	call	0x5166	; 0x5166 <malloc>
    4c80:	8c 83       	std	Y+4, r24	; 0x04
    4c82:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    4c84:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    4c86:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    4c88:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4c8a:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4c8c:	18 8a       	std	Y+16, r1	; 0x10
    4c8e:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4c90:	1a 8a       	std	Y+18, r1	; 0x12
    4c92:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    4c94:	87 e0       	ldi	r24, 0x07	; 7
    4c96:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4c9c:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4c9e:	ec 86       	std	Y+12, r14	; 0x0c
    4ca0:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    4ca2:	d7 01       	movw	r26, r14
    4ca4:	ed 91       	ld	r30, X+
    4ca6:	fc 91       	ld	r31, X
    4ca8:	04 84       	ldd	r0, Z+12	; 0x0c
    4caa:	f5 85       	ldd	r31, Z+13	; 0x0d
    4cac:	e0 2d       	mov	r30, r0
    4cae:	4a e3       	ldi	r20, 0x3A	; 58
    4cb0:	57 e2       	ldi	r21, 0x27	; 39
    4cb2:	be 01       	movw	r22, r28
    4cb4:	c7 01       	movw	r24, r14
    4cb6:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    4cb8:	d7 01       	movw	r26, r14
    4cba:	ed 91       	ld	r30, X+
    4cbc:	fc 91       	ld	r31, X
    4cbe:	06 84       	ldd	r0, Z+14	; 0x0e
    4cc0:	f7 85       	ldd	r31, Z+15	; 0x0f
    4cc2:	e0 2d       	mov	r30, r0
    4cc4:	4f e9       	ldi	r20, 0x9F	; 159
    4cc6:	57 e2       	ldi	r21, 0x27	; 39
    4cc8:	be 01       	movw	r22, r28
    4cca:	c7 01       	movw	r24, r14
    4ccc:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4cce:	c1 14       	cp	r12, r1
    4cd0:	d1 04       	cpc	r13, r1
    4cd2:	19 f0       	breq	.+6      	; 0x4cda <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    4cd4:	cf 8a       	std	Y+23, r12	; 0x17
    4cd6:	d8 8e       	std	Y+24, r13	; 0x18
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    4cda:	cf 8b       	std	Y+23, r28	; 0x17
    4cdc:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	1f 91       	pop	r17
    4ce4:	0f 91       	pop	r16
    4ce6:	ff 90       	pop	r15
    4ce8:	ef 90       	pop	r14
    4cea:	df 90       	pop	r13
    4cec:	cf 90       	pop	r12
    4cee:	08 95       	ret

00004cf0 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    4cf0:	22 e4       	ldi	r18, 0x42	; 66
    4cf2:	31 e2       	ldi	r19, 0x21	; 33
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	20 83       	st	Z, r18
    4cf8:	31 83       	std	Z+1, r19	; 0x01
    4cfa:	0e 94 04 26 	call	0x4c08	; 0x4c08 <_ZN16CMBEventsHandlerD1Ev>
    4cfe:	08 95       	ret

00004d00 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    4d00:	cf 93       	push	r28
    4d02:	df 93       	push	r29
    4d04:	ec 01       	movw	r28, r24
    4d06:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    4d08:	4e 85       	ldd	r20, Y+14	; 0x0e
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	4b 30       	cpi	r20, 0x0B	; 11
    4d0e:	51 05       	cpc	r21, r1
    4d10:	08 f0       	brcs	.+2      	; 0x4d14 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4d12:	ad c0       	rjmp	.+346    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    4d14:	fa 01       	movw	r30, r20
    4d16:	88 27       	eor	r24, r24
    4d18:	e8 5d       	subi	r30, 0xD8	; 216
    4d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d1e:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    4d22:	9a 3a       	cpi	r25, 0xAA	; 170
    4d24:	19 f4       	brne	.+6      	; 0x4d2c <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	8e 87       	std	Y+14, r24	; 0x0e
    4d2a:	a1 c0       	rjmp	.+322    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	8e 87       	std	Y+14, r24	; 0x0e
    4d30:	9e c0       	rjmp	.+316    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    4d32:	9c 3c       	cpi	r25, 0xCC	; 204
    4d34:	19 f4       	brne	.+6      	; 0x4d3c <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    4d36:	83 e0       	ldi	r24, 0x03	; 3
    4d38:	8e 87       	std	Y+14, r24	; 0x0e
    4d3a:	99 c0       	rjmp	.+306    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	8e 87       	std	Y+14, r24	; 0x0e
    4d40:	96 c0       	rjmp	.+300    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    4d42:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    4d44:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    4d46:	1a 8a       	std	Y+18, r1	; 0x12
    4d48:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    4d4a:	10 92 bf 23 	sts	0x23BF, r1
    4d4e:	10 92 c0 23 	sts	0x23C0, r1
			modbus_receiver_state = rx_FrameReceive;
    4d52:	84 e0       	ldi	r24, 0x04	; 4
    4d54:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4d56:	8b c0       	rjmp	.+278    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    4d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d5a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d5c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d5e:	e8 0f       	add	r30, r24
    4d60:	f1 1d       	adc	r31, r1
    4d62:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    4d64:	2f 85       	ldd	r18, Y+15	; 0x0f
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	4f 81       	ldd	r20, Y+7	; 0x07
    4d6a:	58 85       	ldd	r21, Y+8	; 0x08
    4d6c:	42 17       	cp	r20, r18
    4d6e:	53 07       	cpc	r21, r19
    4d70:	18 f4       	brcc	.+6      	; 0x4d78 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    4d72:	89 e0       	ldi	r24, 0x09	; 9
    4d74:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    4d76:	7b c0       	rjmp	.+246    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4d78:	2a 89       	ldd	r18, Y+18	; 0x12
    4d7a:	3b 89       	ldd	r19, Y+19	; 0x13
    4d7c:	29 27       	eor	r18, r25
    4d7e:	92 2f       	mov	r25, r18
    4d80:	92 95       	swap	r25
    4d82:	92 27       	eor	r25, r18
    4d84:	09 2e       	mov	r0, r25
    4d86:	96 95       	lsr	r25
    4d88:	96 95       	lsr	r25
    4d8a:	90 25       	eor	r25, r0
    4d8c:	09 2e       	mov	r0, r25
    4d8e:	96 95       	lsr	r25
    4d90:	90 25       	eor	r25, r0
    4d92:	97 70       	andi	r25, 0x07	; 7
    4d94:	02 2e       	mov	r0, r18
    4d96:	23 2f       	mov	r18, r19
    4d98:	96 95       	lsr	r25
    4d9a:	07 94       	ror	r0
    4d9c:	97 95       	ror	r25
    4d9e:	30 2d       	mov	r19, r0
    4da0:	29 27       	eor	r18, r25
    4da2:	06 94       	lsr	r0
    4da4:	97 95       	ror	r25
    4da6:	30 25       	eor	r19, r0
    4da8:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    4daa:	2a 8b       	std	Y+18, r18	; 0x12
    4dac:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    4dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    4db0:	8f 5f       	subi	r24, 0xFF	; 255
    4db2:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    4db4:	80 91 bf 23 	lds	r24, 0x23BF
    4db8:	90 91 c0 23 	lds	r25, 0x23C0
    4dbc:	01 96       	adiw	r24, 0x01	; 1
    4dbe:	80 93 bf 23 	sts	0x23BF, r24
    4dc2:	90 93 c0 23 	sts	0x23C0, r25
			if (rx_buffer_pos == rx_frame_length)
    4dc6:	4f 85       	ldd	r20, Y+15	; 0x0f
    4dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    4dca:	48 13       	cpse	r20, r24
    4dcc:	50 c0       	rjmp	.+160    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    4dce:	88 e0       	ldi	r24, 0x08	; 8
    4dd0:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4dd2:	e8 81       	ld	r30, Y
    4dd4:	f9 81       	ldd	r31, Y+1	; 0x01
    4dd6:	50 e0       	ldi	r21, 0x00	; 0
    4dd8:	6a 81       	ldd	r22, Y+2	; 0x02
    4dda:	7b 81       	ldd	r23, Y+3	; 0x03
    4ddc:	01 90       	ld	r0, Z+
    4dde:	f0 81       	ld	r31, Z
    4de0:	e0 2d       	mov	r30, r0
    4de2:	ce 01       	movw	r24, r28
    4de4:	19 95       	eicall
				if (CallbackHandler != 0)
    4de6:	8f 89       	ldd	r24, Y+23	; 0x17
    4de8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    4dee:	3f c0       	rjmp	.+126    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4df0:	dc 01       	movw	r26, r24
    4df2:	ed 91       	ld	r30, X+
    4df4:	fc 91       	ld	r31, X
    4df6:	4e 81       	ldd	r20, Y+6	; 0x06
    4df8:	50 e0       	ldi	r21, 0x00	; 0
    4dfa:	6a 81       	ldd	r22, Y+2	; 0x02
    4dfc:	7b 81       	ldd	r23, Y+3	; 0x03
    4dfe:	01 90       	ld	r0, Z+
    4e00:	f0 81       	ld	r31, Z
    4e02:	e0 2d       	mov	r30, r0
    4e04:	19 95       	eicall
    4e06:	33 c0       	rjmp	.+102    	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    4e08:	69 2f       	mov	r22, r25
    4e0a:	70 e0       	ldi	r23, 0x00	; 0
    4e0c:	68 8b       	std	Y+16, r22	; 0x10
    4e0e:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    4e10:	86 e0       	ldi	r24, 0x06	; 6
    4e12:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4e14:	2c c0       	rjmp	.+88     	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    4e16:	28 89       	ldd	r18, Y+16	; 0x10
    4e18:	39 89       	ldd	r19, Y+17	; 0x11
    4e1a:	a9 01       	movw	r20, r18
    4e1c:	59 2b       	or	r21, r25
    4e1e:	48 8b       	std	Y+16, r20	; 0x10
    4e20:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    4e22:	2a 89       	ldd	r18, Y+18	; 0x12
    4e24:	3b 89       	ldd	r19, Y+19	; 0x13
    4e26:	42 17       	cp	r20, r18
    4e28:	53 07       	cpc	r21, r19
    4e2a:	e9 f4       	brne	.+58     	; 0x4e66 <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    4e2c:	88 e0       	ldi	r24, 0x08	; 8
    4e2e:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4e30:	e8 81       	ld	r30, Y
    4e32:	f9 81       	ldd	r31, Y+1	; 0x01
    4e34:	4e 81       	ldd	r20, Y+6	; 0x06
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	6a 81       	ldd	r22, Y+2	; 0x02
    4e3a:	7b 81       	ldd	r23, Y+3	; 0x03
    4e3c:	01 90       	ld	r0, Z+
    4e3e:	f0 81       	ld	r31, Z
    4e40:	e0 2d       	mov	r30, r0
    4e42:	ce 01       	movw	r24, r28
    4e44:	19 95       	eicall
				if (CallbackHandler != 0)
    4e46:	8f 89       	ldd	r24, Y+23	; 0x17
    4e48:	98 8d       	ldd	r25, Y+24	; 0x18
    4e4a:	00 97       	sbiw	r24, 0x00	; 0
    4e4c:	81 f0       	breq	.+32     	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4e4e:	dc 01       	movw	r26, r24
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	4e 81       	ldd	r20, Y+6	; 0x06
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	6a 81       	ldd	r22, Y+2	; 0x02
    4e5a:	7b 81       	ldd	r23, Y+3	; 0x03
    4e5c:	01 90       	ld	r0, Z+
    4e5e:	f0 81       	ld	r31, Z
    4e60:	e0 2d       	mov	r30, r0
    4e62:	19 95       	eicall
    4e64:	04 c0       	rjmp	.+8      	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    4e66:	89 e0       	ldi	r24, 0x09	; 9
    4e68:	8e 87       	std	Y+14, r24	; 0x0e
    4e6a:	01 c0       	rjmp	.+2      	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    4e6c:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	08 95       	ret

00004e74 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e7e:	dc 01       	movw	r26, r24
    4e80:	ed 91       	ld	r30, X+
    4e82:	fc 91       	ld	r31, X
    4e84:	02 80       	ldd	r0, Z+2	; 0x02
    4e86:	f3 81       	ldd	r31, Z+3	; 0x03
    4e88:	e0 2d       	mov	r30, r0
    4e8a:	19 95       	eicall
	owner->OnReceiveByte(data);
    4e8c:	68 2f       	mov	r22, r24
    4e8e:	ce 01       	movw	r24, r28
    4e90:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_ZN9CMBSender13OnReceiveByteEh>
}
    4e94:	df 91       	pop	r29
    4e96:	cf 91       	pop	r28
    4e98:	08 95       	ret

00004e9a <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4e9a:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4e9c:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4e9e:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4ea0:	10 8a       	std	Z+16, r1	; 0x10
    4ea2:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4ea4:	12 8a       	std	Z+18, r1	; 0x12
    4ea6:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    4ea8:	16 86       	std	Z+14, r1	; 0x0e
    4eaa:	08 95       	ret

00004eac <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    4eb2:	8c 89       	ldd	r24, Y+20	; 0x14
    4eb4:	84 30       	cpi	r24, 0x04	; 4
    4eb6:	38 f4       	brcc	.+14     	; 0x4ec6 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    4eb8:	82 30       	cpi	r24, 0x02	; 2
    4eba:	b8 f5       	brcc	.+110    	; 0x4f2a <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4ebc:	88 23       	and	r24, r24
    4ebe:	31 f0       	breq	.+12     	; 0x4ecc <_ZN9CMBSender14OnTransmitByteEv+0x20>
    4ec0:	81 30       	cpi	r24, 0x01	; 1
    4ec2:	d1 f0       	breq	.+52     	; 0x4ef8 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    4ec4:	39 c0       	rjmp	.+114    	; 0x4f38 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    4ec6:	85 30       	cpi	r24, 0x05	; 5
    4ec8:	81 f1       	breq	.+96     	; 0x4f2a <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4eca:	36 c0       	rjmp	.+108    	; 0x4f38 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    4ed0:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ed4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ed6:	2d 89       	ldd	r18, Y+21	; 0x15
    4ed8:	dc 01       	movw	r26, r24
    4eda:	ed 91       	ld	r30, X+
    4edc:	fc 91       	ld	r31, X
    4ede:	ac 81       	ldd	r26, Y+4	; 0x04
    4ee0:	bd 81       	ldd	r27, Y+5	; 0x05
    4ee2:	a2 0f       	add	r26, r18
    4ee4:	b1 1d       	adc	r27, r1
    4ee6:	04 80       	ldd	r0, Z+4	; 0x04
    4ee8:	f5 81       	ldd	r31, Z+5	; 0x05
    4eea:	e0 2d       	mov	r30, r0
    4eec:	6c 91       	ld	r22, X
    4eee:	19 95       	eicall
			tx_buffer_pos++;
    4ef0:	8d 89       	ldd	r24, Y+21	; 0x15
    4ef2:	8f 5f       	subi	r24, 0xFF	; 255
    4ef4:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    4ef6:	20 c0       	rjmp	.+64     	; 0x4f38 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4ef8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4efa:	9d 85       	ldd	r25, Y+13	; 0x0d
    4efc:	2d 89       	ldd	r18, Y+21	; 0x15
    4efe:	dc 01       	movw	r26, r24
    4f00:	ed 91       	ld	r30, X+
    4f02:	fc 91       	ld	r31, X
    4f04:	ac 81       	ldd	r26, Y+4	; 0x04
    4f06:	bd 81       	ldd	r27, Y+5	; 0x05
    4f08:	a2 0f       	add	r26, r18
    4f0a:	b1 1d       	adc	r27, r1
    4f0c:	04 80       	ldd	r0, Z+4	; 0x04
    4f0e:	f5 81       	ldd	r31, Z+5	; 0x05
    4f10:	e0 2d       	mov	r30, r0
    4f12:	6c 91       	ld	r22, X
    4f14:	19 95       	eicall
			tx_buffer_pos++;
    4f16:	8d 89       	ldd	r24, Y+21	; 0x15
    4f18:	8f 5f       	subi	r24, 0xFF	; 255
    4f1a:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    4f1c:	9d 89       	ldd	r25, Y+21	; 0x15
    4f1e:	89 85       	ldd	r24, Y+9	; 0x09
    4f20:	98 13       	cpse	r25, r24
    4f22:	0a c0       	rjmp	.+20     	; 0x4f38 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    4f24:	83 e0       	ldi	r24, 0x03	; 3
    4f26:	8c 8b       	std	Y+20, r24	; 0x14
    4f28:	07 c0       	rjmp	.+14     	; 0x4f38 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    4f2a:	8e 89       	ldd	r24, Y+22	; 0x16
    4f2c:	88 23       	and	r24, r24
    4f2e:	19 f0       	breq	.+6      	; 0x4f36 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    4f30:	ce 01       	movw	r24, r28
    4f32:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    4f36:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	08 95       	ret

00004f3e <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    4f3e:	0e 94 56 27 	call	0x4eac	; 0x4eac <_ZN9CMBSender14OnTransmitByteEv>
    4f42:	08 95       	ret

00004f44 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    4f44:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    4f46:	06 c0       	rjmp	.+12     	; 0x4f54 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4f48:	86 85       	ldd	r24, Z+14	; 0x0e
    4f4a:	89 30       	cpi	r24, 0x09	; 9
    4f4c:	41 f0       	breq	.+16     	; 0x4f5e <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    4f4e:	86 85       	ldd	r24, Z+14	; 0x0e
    4f50:	8a 30       	cpi	r24, 0x0A	; 10
    4f52:	39 f0       	breq	.+14     	; 0x4f62 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    4f54:	86 85       	ldd	r24, Z+14	; 0x0e
    4f56:	88 30       	cpi	r24, 0x08	; 8
    4f58:	b9 f7       	brne	.-18     	; 0x4f48 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    4f5e:	82 e0       	ldi	r24, 0x02	; 2
    4f60:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    4f62:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4f64:	08 95       	ret

00004f66 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    4f66:	fc 01       	movw	r30, r24
    4f68:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4f6a:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    4f6c:	0e 94 56 27 	call	0x4eac	; 0x4eac <_ZN9CMBSender14OnTransmitByteEv>
    4f70:	08 95       	ret

00004f72 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    4f72:	cf 93       	push	r28
    4f74:	df 93       	push	r29
    4f76:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4f78:	e8 81       	ld	r30, Y
    4f7a:	f9 81       	ldd	r31, Y+1	; 0x01
    4f7c:	02 84       	ldd	r0, Z+10	; 0x0a
    4f7e:	f3 85       	ldd	r31, Z+11	; 0x0b
    4f80:	e0 2d       	mov	r30, r0
    4f82:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4f84:	ce 01       	movw	r24, r28
    4f86:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	08 95       	ret

00004f90 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    4f90:	cf 93       	push	r28
    4f92:	df 93       	push	r29
    4f94:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    4f96:	e8 81       	ld	r30, Y
    4f98:	f9 81       	ldd	r31, Y+1	; 0x01
    4f9a:	06 84       	ldd	r0, Z+14	; 0x0e
    4f9c:	f7 85       	ldd	r31, Z+15	; 0x0f
    4f9e:	e0 2d       	mov	r30, r0
    4fa0:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4fa8:	df 91       	pop	r29
    4faa:	cf 91       	pop	r28
    4fac:	08 95       	ret

00004fae <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    4fae:	cf 93       	push	r28
    4fb0:	df 93       	push	r29
    4fb2:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    4fb4:	e8 81       	ld	r30, Y
    4fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    4fb8:	04 84       	ldd	r0, Z+12	; 0x0c
    4fba:	f5 85       	ldd	r31, Z+13	; 0x0d
    4fbc:	e0 2d       	mov	r30, r0
    4fbe:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4fc6:	df 91       	pop	r29
    4fc8:	cf 91       	pop	r28
    4fca:	08 95       	ret

00004fcc <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    4fcc:	cf 93       	push	r28
    4fce:	df 93       	push	r29
    4fd0:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    4fd2:	e8 81       	ld	r30, Y
    4fd4:	f9 81       	ldd	r31, Y+1	; 0x01
    4fd6:	50 e0       	ldi	r21, 0x00	; 0
    4fd8:	00 88       	ldd	r0, Z+16	; 0x10
    4fda:	f1 89       	ldd	r31, Z+17	; 0x11
    4fdc:	e0 2d       	mov	r30, r0
    4fde:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4fe0:	ce 01       	movw	r24, r28
    4fe2:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4fe6:	df 91       	pop	r29
    4fe8:	cf 91       	pop	r28
    4fea:	08 95       	ret

00004fec <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    4fec:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    4fee:	06 c0       	rjmp	.+12     	; 0x4ffc <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    4ff0:	84 89       	ldd	r24, Z+20	; 0x14
    4ff2:	84 30       	cpi	r24, 0x04	; 4
    4ff4:	41 f0       	breq	.+16     	; 0x5006 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    4ff6:	84 89       	ldd	r24, Z+20	; 0x14
    4ff8:	85 30       	cpi	r24, 0x05	; 5
    4ffa:	39 f0       	breq	.+14     	; 0x500a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    4ffc:	84 89       	ldd	r24, Z+20	; 0x14
    4ffe:	83 30       	cpi	r24, 0x03	; 3
    5000:	b9 f7       	brne	.-18     	; 0x4ff0 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    5006:	82 e0       	ldi	r24, 0x02	; 2
    5008:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    500a:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    500c:	08 95       	ret

0000500e <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    500e:	21 e0       	ldi	r18, 0x01	; 1
    5010:	fc 01       	movw	r30, r24
    5012:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    5014:	0e 94 d7 27 	call	0x4fae	; 0x4fae <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    5018:	08 95       	ret

0000501a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    501a:	21 e0       	ldi	r18, 0x01	; 1
    501c:	fc 01       	movw	r30, r24
    501e:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    5020:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    5024:	08 95       	ret

00005026 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    5026:	0f 93       	push	r16
    5028:	1f 93       	push	r17
    502a:	cf 93       	push	r28
    502c:	df 93       	push	r29
    502e:	8c 01       	movw	r16, r24
    5030:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    5032:	98 81       	ld	r25, Y
    5034:	91 38       	cpi	r25, 0x81	; 129
    5036:	69 f4       	brne	.+26     	; 0x5052 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    5038:	d8 01       	movw	r26, r16
    503a:	ed 91       	ld	r30, X+
    503c:	fc 91       	ld	r31, X
    503e:	04 80       	ldd	r0, Z+4	; 0x04
    5040:	f5 81       	ldd	r31, Z+5	; 0x05
    5042:	e0 2d       	mov	r30, r0
    5044:	2a 81       	ldd	r18, Y+2	; 0x02
    5046:	ab 01       	movw	r20, r22
    5048:	4d 5f       	subi	r20, 0xFD	; 253
    504a:	5f 4f       	sbci	r21, 0xFF	; 255
    504c:	69 81       	ldd	r22, Y+1	; 0x01
    504e:	c8 01       	movw	r24, r16
    5050:	19 95       	eicall
	}
	if (data[0] == 0x83)
    5052:	98 81       	ld	r25, Y
    5054:	93 38       	cpi	r25, 0x83	; 131
    5056:	99 f4       	brne	.+38     	; 0x507e <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5058:	d8 01       	movw	r26, r16
    505a:	ed 91       	ld	r30, X+
    505c:	fc 91       	ld	r31, X
    505e:	2b 81       	ldd	r18, Y+3	; 0x03
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	ae 01       	movw	r20, r28
    5064:	4c 5f       	subi	r20, 0xFC	; 252
    5066:	5f 4f       	sbci	r21, 0xFF	; 255
    5068:	69 81       	ldd	r22, Y+1	; 0x01
    506a:	70 e0       	ldi	r23, 0x00	; 0
    506c:	76 2f       	mov	r23, r22
    506e:	66 27       	eor	r22, r22
    5070:	8a 81       	ldd	r24, Y+2	; 0x02
    5072:	68 2b       	or	r22, r24
    5074:	02 80       	ldd	r0, Z+2	; 0x02
    5076:	f3 81       	ldd	r31, Z+3	; 0x03
    5078:	e0 2d       	mov	r30, r0
    507a:	c8 01       	movw	r24, r16
    507c:	19 95       	eicall
	}
}
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	1f 91       	pop	r17
    5084:	0f 91       	pop	r16
    5086:	08 95       	ret

00005088 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    5088:	0e 94 13 28 	call	0x5026	; 0x5026 <_ZN9CMBSender18ProcessTransactionEPhj>
    508c:	08 95       	ret

0000508e <__udivmodhi4>:
    508e:	aa 1b       	sub	r26, r26
    5090:	bb 1b       	sub	r27, r27
    5092:	51 e1       	ldi	r21, 0x11	; 17
    5094:	07 c0       	rjmp	.+14     	; 0x50a4 <__udivmodhi4_ep>

00005096 <__udivmodhi4_loop>:
    5096:	aa 1f       	adc	r26, r26
    5098:	bb 1f       	adc	r27, r27
    509a:	a6 17       	cp	r26, r22
    509c:	b7 07       	cpc	r27, r23
    509e:	10 f0       	brcs	.+4      	; 0x50a4 <__udivmodhi4_ep>
    50a0:	a6 1b       	sub	r26, r22
    50a2:	b7 0b       	sbc	r27, r23

000050a4 <__udivmodhi4_ep>:
    50a4:	88 1f       	adc	r24, r24
    50a6:	99 1f       	adc	r25, r25
    50a8:	5a 95       	dec	r21
    50aa:	a9 f7       	brne	.-22     	; 0x5096 <__udivmodhi4_loop>
    50ac:	80 95       	com	r24
    50ae:	90 95       	com	r25
    50b0:	bc 01       	movw	r22, r24
    50b2:	cd 01       	movw	r24, r26
    50b4:	08 95       	ret

000050b6 <__divmodsi4>:
    50b6:	05 2e       	mov	r0, r21
    50b8:	97 fb       	bst	r25, 7
    50ba:	1e f4       	brtc	.+6      	; 0x50c2 <__divmodsi4+0xc>
    50bc:	00 94       	com	r0
    50be:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__negsi2>
    50c2:	57 fd       	sbrc	r21, 7
    50c4:	07 d0       	rcall	.+14     	; 0x50d4 <__divmodsi4_neg2>
    50c6:	0e 94 91 28 	call	0x5122	; 0x5122 <__udivmodsi4>
    50ca:	07 fc       	sbrc	r0, 7
    50cc:	03 d0       	rcall	.+6      	; 0x50d4 <__divmodsi4_neg2>
    50ce:	4e f4       	brtc	.+18     	; 0x50e2 <__divmodsi4_exit>
    50d0:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__negsi2>

000050d4 <__divmodsi4_neg2>:
    50d4:	50 95       	com	r21
    50d6:	40 95       	com	r20
    50d8:	30 95       	com	r19
    50da:	21 95       	neg	r18
    50dc:	3f 4f       	sbci	r19, 0xFF	; 255
    50de:	4f 4f       	sbci	r20, 0xFF	; 255
    50e0:	5f 4f       	sbci	r21, 0xFF	; 255

000050e2 <__divmodsi4_exit>:
    50e2:	08 95       	ret

000050e4 <__negsi2>:
    50e4:	90 95       	com	r25
    50e6:	80 95       	com	r24
    50e8:	70 95       	com	r23
    50ea:	61 95       	neg	r22
    50ec:	7f 4f       	sbci	r23, 0xFF	; 255
    50ee:	8f 4f       	sbci	r24, 0xFF	; 255
    50f0:	9f 4f       	sbci	r25, 0xFF	; 255
    50f2:	08 95       	ret

000050f4 <__tablejump2__>:
    50f4:	ee 0f       	add	r30, r30
    50f6:	ff 1f       	adc	r31, r31
    50f8:	88 1f       	adc	r24, r24
    50fa:	8b bf       	out	0x3b, r24	; 59
    50fc:	07 90       	elpm	r0, Z+
    50fe:	f6 91       	elpm	r31, Z
    5100:	e0 2d       	mov	r30, r0
    5102:	19 94       	eijmp

00005104 <__umulhisi3>:
    5104:	a2 9f       	mul	r26, r18
    5106:	b0 01       	movw	r22, r0
    5108:	b3 9f       	mul	r27, r19
    510a:	c0 01       	movw	r24, r0
    510c:	a3 9f       	mul	r26, r19
    510e:	70 0d       	add	r23, r0
    5110:	81 1d       	adc	r24, r1
    5112:	11 24       	eor	r1, r1
    5114:	91 1d       	adc	r25, r1
    5116:	b2 9f       	mul	r27, r18
    5118:	70 0d       	add	r23, r0
    511a:	81 1d       	adc	r24, r1
    511c:	11 24       	eor	r1, r1
    511e:	91 1d       	adc	r25, r1
    5120:	08 95       	ret

00005122 <__udivmodsi4>:
    5122:	a1 e2       	ldi	r26, 0x21	; 33
    5124:	1a 2e       	mov	r1, r26
    5126:	aa 1b       	sub	r26, r26
    5128:	bb 1b       	sub	r27, r27
    512a:	fd 01       	movw	r30, r26
    512c:	0d c0       	rjmp	.+26     	; 0x5148 <__udivmodsi4_ep>

0000512e <__udivmodsi4_loop>:
    512e:	aa 1f       	adc	r26, r26
    5130:	bb 1f       	adc	r27, r27
    5132:	ee 1f       	adc	r30, r30
    5134:	ff 1f       	adc	r31, r31
    5136:	a2 17       	cp	r26, r18
    5138:	b3 07       	cpc	r27, r19
    513a:	e4 07       	cpc	r30, r20
    513c:	f5 07       	cpc	r31, r21
    513e:	20 f0       	brcs	.+8      	; 0x5148 <__udivmodsi4_ep>
    5140:	a2 1b       	sub	r26, r18
    5142:	b3 0b       	sbc	r27, r19
    5144:	e4 0b       	sbc	r30, r20
    5146:	f5 0b       	sbc	r31, r21

00005148 <__udivmodsi4_ep>:
    5148:	66 1f       	adc	r22, r22
    514a:	77 1f       	adc	r23, r23
    514c:	88 1f       	adc	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	1a 94       	dec	r1
    5152:	69 f7       	brne	.-38     	; 0x512e <__udivmodsi4_loop>
    5154:	60 95       	com	r22
    5156:	70 95       	com	r23
    5158:	80 95       	com	r24
    515a:	90 95       	com	r25
    515c:	9b 01       	movw	r18, r22
    515e:	ac 01       	movw	r20, r24
    5160:	bd 01       	movw	r22, r26
    5162:	cf 01       	movw	r24, r30
    5164:	08 95       	ret

00005166 <malloc>:
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	82 30       	cpi	r24, 0x02	; 2
    516c:	91 05       	cpc	r25, r1
    516e:	10 f4       	brcc	.+4      	; 0x5174 <malloc+0xe>
    5170:	82 e0       	ldi	r24, 0x02	; 2
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	e0 91 c3 23 	lds	r30, 0x23C3
    5178:	f0 91 c4 23 	lds	r31, 0x23C4
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	c0 e0       	ldi	r28, 0x00	; 0
    5182:	d0 e0       	ldi	r29, 0x00	; 0
    5184:	30 97       	sbiw	r30, 0x00	; 0
    5186:	11 f1       	breq	.+68     	; 0x51cc <malloc+0x66>
    5188:	40 81       	ld	r20, Z
    518a:	51 81       	ldd	r21, Z+1	; 0x01
    518c:	48 17       	cp	r20, r24
    518e:	59 07       	cpc	r21, r25
    5190:	c0 f0       	brcs	.+48     	; 0x51c2 <malloc+0x5c>
    5192:	48 17       	cp	r20, r24
    5194:	59 07       	cpc	r21, r25
    5196:	61 f4       	brne	.+24     	; 0x51b0 <malloc+0x4a>
    5198:	82 81       	ldd	r24, Z+2	; 0x02
    519a:	93 81       	ldd	r25, Z+3	; 0x03
    519c:	20 97       	sbiw	r28, 0x00	; 0
    519e:	19 f0       	breq	.+6      	; 0x51a6 <malloc+0x40>
    51a0:	8a 83       	std	Y+2, r24	; 0x02
    51a2:	9b 83       	std	Y+3, r25	; 0x03
    51a4:	2b c0       	rjmp	.+86     	; 0x51fc <malloc+0x96>
    51a6:	80 93 c3 23 	sts	0x23C3, r24
    51aa:	90 93 c4 23 	sts	0x23C4, r25
    51ae:	26 c0       	rjmp	.+76     	; 0x51fc <malloc+0x96>
    51b0:	21 15       	cp	r18, r1
    51b2:	31 05       	cpc	r19, r1
    51b4:	19 f0       	breq	.+6      	; 0x51bc <malloc+0x56>
    51b6:	42 17       	cp	r20, r18
    51b8:	53 07       	cpc	r21, r19
    51ba:	18 f4       	brcc	.+6      	; 0x51c2 <malloc+0x5c>
    51bc:	9a 01       	movw	r18, r20
    51be:	be 01       	movw	r22, r28
    51c0:	df 01       	movw	r26, r30
    51c2:	ef 01       	movw	r28, r30
    51c4:	02 80       	ldd	r0, Z+2	; 0x02
    51c6:	f3 81       	ldd	r31, Z+3	; 0x03
    51c8:	e0 2d       	mov	r30, r0
    51ca:	dc cf       	rjmp	.-72     	; 0x5184 <malloc+0x1e>
    51cc:	21 15       	cp	r18, r1
    51ce:	31 05       	cpc	r19, r1
    51d0:	09 f1       	breq	.+66     	; 0x5214 <malloc+0xae>
    51d2:	28 1b       	sub	r18, r24
    51d4:	39 0b       	sbc	r19, r25
    51d6:	24 30       	cpi	r18, 0x04	; 4
    51d8:	31 05       	cpc	r19, r1
    51da:	90 f4       	brcc	.+36     	; 0x5200 <malloc+0x9a>
    51dc:	12 96       	adiw	r26, 0x02	; 2
    51de:	8d 91       	ld	r24, X+
    51e0:	9c 91       	ld	r25, X
    51e2:	13 97       	sbiw	r26, 0x03	; 3
    51e4:	61 15       	cp	r22, r1
    51e6:	71 05       	cpc	r23, r1
    51e8:	21 f0       	breq	.+8      	; 0x51f2 <malloc+0x8c>
    51ea:	fb 01       	movw	r30, r22
    51ec:	82 83       	std	Z+2, r24	; 0x02
    51ee:	93 83       	std	Z+3, r25	; 0x03
    51f0:	04 c0       	rjmp	.+8      	; 0x51fa <malloc+0x94>
    51f2:	80 93 c3 23 	sts	0x23C3, r24
    51f6:	90 93 c4 23 	sts	0x23C4, r25
    51fa:	fd 01       	movw	r30, r26
    51fc:	32 96       	adiw	r30, 0x02	; 2
    51fe:	44 c0       	rjmp	.+136    	; 0x5288 <malloc+0x122>
    5200:	fd 01       	movw	r30, r26
    5202:	e2 0f       	add	r30, r18
    5204:	f3 1f       	adc	r31, r19
    5206:	81 93       	st	Z+, r24
    5208:	91 93       	st	Z+, r25
    520a:	22 50       	subi	r18, 0x02	; 2
    520c:	31 09       	sbc	r19, r1
    520e:	2d 93       	st	X+, r18
    5210:	3c 93       	st	X, r19
    5212:	3a c0       	rjmp	.+116    	; 0x5288 <malloc+0x122>
    5214:	20 91 c1 23 	lds	r18, 0x23C1
    5218:	30 91 c2 23 	lds	r19, 0x23C2
    521c:	23 2b       	or	r18, r19
    521e:	41 f4       	brne	.+16     	; 0x5230 <malloc+0xca>
    5220:	20 91 02 20 	lds	r18, 0x2002
    5224:	30 91 03 20 	lds	r19, 0x2003
    5228:	20 93 c1 23 	sts	0x23C1, r18
    522c:	30 93 c2 23 	sts	0x23C2, r19
    5230:	20 91 00 20 	lds	r18, 0x2000
    5234:	30 91 01 20 	lds	r19, 0x2001
    5238:	21 15       	cp	r18, r1
    523a:	31 05       	cpc	r19, r1
    523c:	41 f4       	brne	.+16     	; 0x524e <malloc+0xe8>
    523e:	2d b7       	in	r18, 0x3d	; 61
    5240:	3e b7       	in	r19, 0x3e	; 62
    5242:	40 91 04 20 	lds	r20, 0x2004
    5246:	50 91 05 20 	lds	r21, 0x2005
    524a:	24 1b       	sub	r18, r20
    524c:	35 0b       	sbc	r19, r21
    524e:	e0 91 c1 23 	lds	r30, 0x23C1
    5252:	f0 91 c2 23 	lds	r31, 0x23C2
    5256:	e2 17       	cp	r30, r18
    5258:	f3 07       	cpc	r31, r19
    525a:	a0 f4       	brcc	.+40     	; 0x5284 <malloc+0x11e>
    525c:	2e 1b       	sub	r18, r30
    525e:	3f 0b       	sbc	r19, r31
    5260:	28 17       	cp	r18, r24
    5262:	39 07       	cpc	r19, r25
    5264:	78 f0       	brcs	.+30     	; 0x5284 <malloc+0x11e>
    5266:	ac 01       	movw	r20, r24
    5268:	4e 5f       	subi	r20, 0xFE	; 254
    526a:	5f 4f       	sbci	r21, 0xFF	; 255
    526c:	24 17       	cp	r18, r20
    526e:	35 07       	cpc	r19, r21
    5270:	48 f0       	brcs	.+18     	; 0x5284 <malloc+0x11e>
    5272:	4e 0f       	add	r20, r30
    5274:	5f 1f       	adc	r21, r31
    5276:	40 93 c1 23 	sts	0x23C1, r20
    527a:	50 93 c2 23 	sts	0x23C2, r21
    527e:	81 93       	st	Z+, r24
    5280:	91 93       	st	Z+, r25
    5282:	02 c0       	rjmp	.+4      	; 0x5288 <malloc+0x122>
    5284:	e0 e0       	ldi	r30, 0x00	; 0
    5286:	f0 e0       	ldi	r31, 0x00	; 0
    5288:	cf 01       	movw	r24, r30
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	08 95       	ret

00005290 <free>:
    5290:	0f 93       	push	r16
    5292:	1f 93       	push	r17
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
    5298:	00 97       	sbiw	r24, 0x00	; 0
    529a:	09 f4       	brne	.+2      	; 0x529e <free+0xe>
    529c:	8c c0       	rjmp	.+280    	; 0x53b6 <free+0x126>
    529e:	fc 01       	movw	r30, r24
    52a0:	32 97       	sbiw	r30, 0x02	; 2
    52a2:	12 82       	std	Z+2, r1	; 0x02
    52a4:	13 82       	std	Z+3, r1	; 0x03
    52a6:	00 91 c3 23 	lds	r16, 0x23C3
    52aa:	10 91 c4 23 	lds	r17, 0x23C4
    52ae:	01 15       	cp	r16, r1
    52b0:	11 05       	cpc	r17, r1
    52b2:	81 f4       	brne	.+32     	; 0x52d4 <free+0x44>
    52b4:	20 81       	ld	r18, Z
    52b6:	31 81       	ldd	r19, Z+1	; 0x01
    52b8:	82 0f       	add	r24, r18
    52ba:	93 1f       	adc	r25, r19
    52bc:	20 91 c1 23 	lds	r18, 0x23C1
    52c0:	30 91 c2 23 	lds	r19, 0x23C2
    52c4:	28 17       	cp	r18, r24
    52c6:	39 07       	cpc	r19, r25
    52c8:	79 f5       	brne	.+94     	; 0x5328 <free+0x98>
    52ca:	e0 93 c1 23 	sts	0x23C1, r30
    52ce:	f0 93 c2 23 	sts	0x23C2, r31
    52d2:	71 c0       	rjmp	.+226    	; 0x53b6 <free+0x126>
    52d4:	d8 01       	movw	r26, r16
    52d6:	40 e0       	ldi	r20, 0x00	; 0
    52d8:	50 e0       	ldi	r21, 0x00	; 0
    52da:	ae 17       	cp	r26, r30
    52dc:	bf 07       	cpc	r27, r31
    52de:	50 f4       	brcc	.+20     	; 0x52f4 <free+0x64>
    52e0:	12 96       	adiw	r26, 0x02	; 2
    52e2:	2d 91       	ld	r18, X+
    52e4:	3c 91       	ld	r19, X
    52e6:	13 97       	sbiw	r26, 0x03	; 3
    52e8:	ad 01       	movw	r20, r26
    52ea:	21 15       	cp	r18, r1
    52ec:	31 05       	cpc	r19, r1
    52ee:	09 f1       	breq	.+66     	; 0x5332 <free+0xa2>
    52f0:	d9 01       	movw	r26, r18
    52f2:	f3 cf       	rjmp	.-26     	; 0x52da <free+0x4a>
    52f4:	9d 01       	movw	r18, r26
    52f6:	da 01       	movw	r26, r20
    52f8:	22 83       	std	Z+2, r18	; 0x02
    52fa:	33 83       	std	Z+3, r19	; 0x03
    52fc:	60 81       	ld	r22, Z
    52fe:	71 81       	ldd	r23, Z+1	; 0x01
    5300:	86 0f       	add	r24, r22
    5302:	97 1f       	adc	r25, r23
    5304:	82 17       	cp	r24, r18
    5306:	93 07       	cpc	r25, r19
    5308:	69 f4       	brne	.+26     	; 0x5324 <free+0x94>
    530a:	ec 01       	movw	r28, r24
    530c:	28 81       	ld	r18, Y
    530e:	39 81       	ldd	r19, Y+1	; 0x01
    5310:	26 0f       	add	r18, r22
    5312:	37 1f       	adc	r19, r23
    5314:	2e 5f       	subi	r18, 0xFE	; 254
    5316:	3f 4f       	sbci	r19, 0xFF	; 255
    5318:	20 83       	st	Z, r18
    531a:	31 83       	std	Z+1, r19	; 0x01
    531c:	8a 81       	ldd	r24, Y+2	; 0x02
    531e:	9b 81       	ldd	r25, Y+3	; 0x03
    5320:	82 83       	std	Z+2, r24	; 0x02
    5322:	93 83       	std	Z+3, r25	; 0x03
    5324:	45 2b       	or	r20, r21
    5326:	29 f4       	brne	.+10     	; 0x5332 <free+0xa2>
    5328:	e0 93 c3 23 	sts	0x23C3, r30
    532c:	f0 93 c4 23 	sts	0x23C4, r31
    5330:	42 c0       	rjmp	.+132    	; 0x53b6 <free+0x126>
    5332:	12 96       	adiw	r26, 0x02	; 2
    5334:	ed 93       	st	X+, r30
    5336:	fc 93       	st	X, r31
    5338:	13 97       	sbiw	r26, 0x03	; 3
    533a:	ed 01       	movw	r28, r26
    533c:	49 91       	ld	r20, Y+
    533e:	59 91       	ld	r21, Y+
    5340:	9e 01       	movw	r18, r28
    5342:	24 0f       	add	r18, r20
    5344:	35 1f       	adc	r19, r21
    5346:	e2 17       	cp	r30, r18
    5348:	f3 07       	cpc	r31, r19
    534a:	71 f4       	brne	.+28     	; 0x5368 <free+0xd8>
    534c:	80 81       	ld	r24, Z
    534e:	91 81       	ldd	r25, Z+1	; 0x01
    5350:	84 0f       	add	r24, r20
    5352:	95 1f       	adc	r25, r21
    5354:	02 96       	adiw	r24, 0x02	; 2
    5356:	8d 93       	st	X+, r24
    5358:	9c 93       	st	X, r25
    535a:	11 97       	sbiw	r26, 0x01	; 1
    535c:	82 81       	ldd	r24, Z+2	; 0x02
    535e:	93 81       	ldd	r25, Z+3	; 0x03
    5360:	12 96       	adiw	r26, 0x02	; 2
    5362:	8d 93       	st	X+, r24
    5364:	9c 93       	st	X, r25
    5366:	13 97       	sbiw	r26, 0x03	; 3
    5368:	e0 e0       	ldi	r30, 0x00	; 0
    536a:	f0 e0       	ldi	r31, 0x00	; 0
    536c:	d8 01       	movw	r26, r16
    536e:	12 96       	adiw	r26, 0x02	; 2
    5370:	8d 91       	ld	r24, X+
    5372:	9c 91       	ld	r25, X
    5374:	13 97       	sbiw	r26, 0x03	; 3
    5376:	00 97       	sbiw	r24, 0x00	; 0
    5378:	19 f0       	breq	.+6      	; 0x5380 <free+0xf0>
    537a:	f8 01       	movw	r30, r16
    537c:	8c 01       	movw	r16, r24
    537e:	f6 cf       	rjmp	.-20     	; 0x536c <free+0xdc>
    5380:	8d 91       	ld	r24, X+
    5382:	9c 91       	ld	r25, X
    5384:	98 01       	movw	r18, r16
    5386:	2e 5f       	subi	r18, 0xFE	; 254
    5388:	3f 4f       	sbci	r19, 0xFF	; 255
    538a:	82 0f       	add	r24, r18
    538c:	93 1f       	adc	r25, r19
    538e:	20 91 c1 23 	lds	r18, 0x23C1
    5392:	30 91 c2 23 	lds	r19, 0x23C2
    5396:	28 17       	cp	r18, r24
    5398:	39 07       	cpc	r19, r25
    539a:	69 f4       	brne	.+26     	; 0x53b6 <free+0x126>
    539c:	30 97       	sbiw	r30, 0x00	; 0
    539e:	29 f4       	brne	.+10     	; 0x53aa <free+0x11a>
    53a0:	10 92 c3 23 	sts	0x23C3, r1
    53a4:	10 92 c4 23 	sts	0x23C4, r1
    53a8:	02 c0       	rjmp	.+4      	; 0x53ae <free+0x11e>
    53aa:	12 82       	std	Z+2, r1	; 0x02
    53ac:	13 82       	std	Z+3, r1	; 0x03
    53ae:	00 93 c1 23 	sts	0x23C1, r16
    53b2:	10 93 c2 23 	sts	0x23C2, r17
    53b6:	df 91       	pop	r29
    53b8:	cf 91       	pop	r28
    53ba:	1f 91       	pop	r17
    53bc:	0f 91       	pop	r16
    53be:	08 95       	ret

000053c0 <memcpy>:
    53c0:	fb 01       	movw	r30, r22
    53c2:	dc 01       	movw	r26, r24
    53c4:	02 c0       	rjmp	.+4      	; 0x53ca <memcpy+0xa>
    53c6:	01 90       	ld	r0, Z+
    53c8:	0d 92       	st	X+, r0
    53ca:	41 50       	subi	r20, 0x01	; 1
    53cc:	50 40       	sbci	r21, 0x00	; 0
    53ce:	d8 f7       	brcc	.-10     	; 0x53c6 <memcpy+0x6>
    53d0:	08 95       	ret

000053d2 <__do_global_dtors>:
    53d2:	12 e0       	ldi	r17, 0x02	; 2
    53d4:	c7 e1       	ldi	r28, 0x17	; 23
    53d6:	d2 e0       	ldi	r29, 0x02	; 2
    53d8:	00 e0       	ldi	r16, 0x00	; 0
    53da:	06 c0       	rjmp	.+12     	; 0x53e8 <__do_global_dtors+0x16>
    53dc:	80 2f       	mov	r24, r16
    53de:	fe 01       	movw	r30, r28
    53e0:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__tablejump2__>
    53e4:	21 96       	adiw	r28, 0x01	; 1
    53e6:	01 1d       	adc	r16, r1
    53e8:	c9 31       	cpi	r28, 0x19	; 25
    53ea:	d1 07       	cpc	r29, r17
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	08 07       	cpc	r16, r24
    53f0:	a9 f7       	brne	.-22     	; 0x53dc <__do_global_dtors+0xa>
    53f2:	f8 94       	cli

000053f4 <__stop_program>:
    53f4:	ff cf       	rjmp	.-2      	; 0x53f4 <__stop_program>
