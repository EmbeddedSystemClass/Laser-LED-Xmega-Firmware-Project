
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c4  00802000  00008386  0000841a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000036b  008022c4  008022c4  000086de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000086de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d10  00000000  00000000  00008750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000195f8  00000000  00000000  00009460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006681  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000699b  00000000  00000000  000290d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003d24  00000000  00000000  0002fa74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009899  00000000  00000000  00033798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c239  00000000  00000000  0003d031  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  0004926a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__vector_1>
       8:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__vector_2>
       c:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__vector_3>
      10:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <__vector_4>
      14:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__vector_5>
      18:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__vector_6>
      1c:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__vector_7>
      20:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <__vector_8>
      24:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__vector_9>
      28:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__vector_10>
      2c:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__vector_11>
      30:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__vector_12>
      34:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <__vector_13>
      38:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__vector_14>
      3c:	0c 94 15 20 	jmp	0x402a	; 0x402a <__vector_15>
      40:	0c 94 46 20 	jmp	0x408c	; 0x408c <__vector_16>
      44:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__vector_17>
      48:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__vector_18>
      4c:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <__vector_19>
      50:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <__vector_20>
      54:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <__vector_21>
      58:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__vector_22>
      5c:	0c 94 9d 21 	jmp	0x433a	; 0x433a <__vector_23>
      60:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__vector_24>
      64:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__vector_25>
      68:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__vector_26>
      6c:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__vector_27>
      70:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__vector_28>
      74:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__vector_29>
      78:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <__vector_30>
      7c:	0c 94 25 23 	jmp	0x464a	; 0x464a <__vector_31>
      80:	0c 94 56 23 	jmp	0x46ac	; 0x46ac <__vector_32>
      84:	0c 94 87 23 	jmp	0x470e	; 0x470e <__vector_33>
      88:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__vector_34>
      8c:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <__vector_35>
      90:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__vector_36>
      94:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <__vector_37>
      98:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__vector_38>
      9c:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__vector_39>
      a0:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__vector_40>
      a4:	0c 94 0f 25 	jmp	0x4a1e	; 0x4a1e <__vector_41>
      a8:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__vector_42>
      ac:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__vector_43>
      b0:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__vector_44>
      b4:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__vector_45>
      b8:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__vector_46>
      bc:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__vector_47>
      c0:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__vector_48>
      c4:	0c 94 97 26 	jmp	0x4d2e	; 0x4d2e <__vector_49>
      c8:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__vector_50>
      cc:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__vector_51>
      d0:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <__vector_52>
      d4:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_53>
      d8:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__vector_54>
      dc:	0c 94 bd 27 	jmp	0x4f7a	; 0x4f7a <__vector_55>
      e0:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__vector_56>
      e4:	0c 94 1f 28 	jmp	0x503e	; 0x503e <__vector_57>
      e8:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <__vector_58>
      ec:	0c 94 81 28 	jmp	0x5102	; 0x5102 <__vector_59>
      f0:	0c 94 b2 28 	jmp	0x5164	; 0x5164 <__vector_60>
      f4:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__vector_61>
      f8:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__vector_62>
      fc:	0c 94 45 29 	jmp	0x528a	; 0x528a <__vector_63>
     100:	0c 94 76 29 	jmp	0x52ec	; 0x52ec <__vector_64>
     104:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__vector_65>
     108:	0c 94 d8 29 	jmp	0x53b0	; 0x53b0 <__vector_66>
     10c:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <__vector_67>
     110:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <__vector_68>
     114:	0c 94 6b 2a 	jmp	0x54d6	; 0x54d6 <__vector_69>
     118:	0c 94 9c 2a 	jmp	0x5538	; 0x5538 <__vector_70>
     11c:	0c 94 cd 2a 	jmp	0x559a	; 0x559a <__vector_71>
     120:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__vector_72>
     124:	0c 94 2f 2b 	jmp	0x565e	; 0x565e <__vector_73>
     128:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 91 2b 	jmp	0x5722	; 0x5722 <__vector_77>
     138:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <__vector_78>
     13c:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__vector_79>
     140:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__vector_80>
     144:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <__vector_81>
     148:	0c 94 86 2c 	jmp	0x590c	; 0x590c <__vector_82>
     14c:	0c 94 b7 2c 	jmp	0x596e	; 0x596e <__vector_83>
     150:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__vector_84>
     154:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__vector_85>
     158:	0c 94 4a 2d 	jmp	0x5a94	; 0x5a94 <__vector_86>
     15c:	0c 94 7b 2d 	jmp	0x5af6	; 0x5af6 <__vector_87>
     160:	0c 94 ac 2d 	jmp	0x5b58	; 0x5b58 <__vector_88>
     164:	0c 94 dd 2d 	jmp	0x5bba	; 0x5bba <__vector_89>
     168:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__vector_90>
     16c:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__vector_91>
     170:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__vector_92>
     174:	0c 94 a1 2e 	jmp	0x5d42	; 0x5d42 <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <__vector_104>
     1a4:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__vector_108>
     1b4:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__vector_109>
     1b8:	0c 94 96 2f 	jmp	0x5f2c	; 0x5f2c <__vector_110>
     1bc:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <__vector_111>
     1c0:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <__vector_112>
     1c4:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 5a 30 	jmp	0x60b4	; 0x60b4 <__vector_119>
     1e0:	0c 94 8b 30 	jmp	0x6116	; 0x6116 <__vector_120>
     1e4:	0c 94 bc 30 	jmp	0x6178	; 0x6178 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	dc 03       	fmulsu	r21, r20
     1fe:	5e 04       	cpc	r5, r14
     200:	5e 04       	cpc	r5, r14
     202:	d5 03       	fmuls	r21, r21
     204:	5e 04       	cpc	r5, r14
     206:	5e 04       	cpc	r5, r14
     208:	5e 04       	cpc	r5, r14
     20a:	e1 03       	fmuls	r22, r17
     20c:	3c 04       	cpc	r3, r12
     20e:	5e 04       	cpc	r5, r14
     210:	e8 03       	fmulsu	r22, r16
     212:	5e 04       	cpc	r5, r14
     214:	ef 03       	fmulsu	r22, r23
     216:	5e 04       	cpc	r5, r14
     218:	f6 03       	fmuls	r23, r22
     21a:	5e 04       	cpc	r5, r14
     21c:	fd 03       	fmulsu	r23, r21
     21e:	5e 04       	cpc	r5, r14
     220:	5e 04       	cpc	r5, r14
     222:	5e 04       	cpc	r5, r14
     224:	5e 04       	cpc	r5, r14
     226:	5e 04       	cpc	r5, r14
     228:	04 04       	cpc	r0, r4
     22a:	0b 04       	cpc	r0, r11
     22c:	12 04       	cpc	r1, r2
     22e:	19 04       	cpc	r1, r9
     230:	2e 04       	cpc	r2, r14
     232:	5e 04       	cpc	r5, r14
     234:	20 04       	cpc	r2, r0
     236:	5e 04       	cpc	r5, r14
     238:	35 04       	cpc	r3, r5
     23a:	5e 04       	cpc	r5, r14
     23c:	5e 04       	cpc	r5, r14
     23e:	5e 04       	cpc	r5, r14
     240:	5e 04       	cpc	r5, r14
     242:	5e 04       	cpc	r5, r14
     244:	5e 04       	cpc	r5, r14
     246:	27 04       	cpc	r2, r7
     248:	5e 04       	cpc	r5, r14
     24a:	51 04       	cpc	r5, r1
     24c:	43 04       	cpc	r4, r3
     24e:	4a 04       	cpc	r4, r10
     250:	5e 04       	cpc	r5, r14
     252:	5e 04       	cpc	r5, r14
     254:	5e 04       	cpc	r5, r14
     256:	5e 04       	cpc	r5, r14
     258:	5e 04       	cpc	r5, r14
     25a:	58 04       	cpc	r5, r8
     25c:	8a 04       	cpc	r8, r10
     25e:	90 04       	cpc	r9, r0
     260:	96 04       	cpc	r9, r6
     262:	9c 04       	cpc	r9, r12
     264:	a2 04       	cpc	r10, r2
     266:	1f 05       	cpc	r17, r15
     268:	a8 04       	cpc	r10, r8
     26a:	ae 04       	cpc	r10, r14
     26c:	1f 05       	cpc	r17, r15
     26e:	bd 04       	cpc	r11, r13
     270:	c3 04       	cpc	r12, r3
     272:	c9 04       	cpc	r12, r9
     274:	cf 04       	cpc	r12, r15
     276:	d5 04       	cpc	r13, r5
     278:	db 04       	cpc	r13, r11
     27a:	e1 04       	cpc	r14, r1
     27c:	e7 04       	cpc	r14, r7
     27e:	ed 04       	cpc	r14, r13
     280:	6a 35       	cpi	r22, 0x5A	; 90
     282:	6a 35       	cpi	r22, 0x5A	; 90
     284:	74 35       	cpi	r23, 0x54	; 84
     286:	7e 35       	cpi	r23, 0x5E	; 94
     288:	8e 35       	cpi	r24, 0x5E	; 94
     28a:	de 35       	cpi	r29, 0x5E	; 94
     28c:	e8 35       	cpi	r30, 0x58	; 88
     28e:	1d 36       	cpi	r17, 0x6D	; 109
     290:	1d 36       	cpi	r17, 0x6D	; 109
     292:	1b 36       	cpi	r17, 0x6B	; 107
     294:	1b 36       	cpi	r17, 0x6B	; 107

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 74 35 	jmp	0x6ae8	; 0x6ae8 <_ZN9CMBSender13OnReceiveByteEh+0x3a>
     2a2:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2a6:	0c 94 de 35 	jmp	0x6bbc	; 0x6bbc <_ZN9CMBSender13OnReceiveByteEh+0x10e>
     2aa:	0c 94 c4 37 	jmp	0x6f88	; 0x6f88 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2ae:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     2b2:	0c 94 ba 3b 	jmp	0x7774	; 0x7774 <_ZN8CTimerC18SetCOMPBEj>
     2b6:	0c 94 a2 3b 	jmp	0x7744	; 0x7744 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     2ba:	0c 94 47 3b 	jmp	0x768e	; 0x768e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2be:	0c 94 59 3c 	jmp	0x78b2	; 0x78b2 <_ZN7CTimerD9SetPeriodEj>
     2c2:	0c 94 72 3d 	jmp	0x7ae4	; 0x7ae4 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2c6:	0c 94 ac 37 	jmp	0x6f58	; 0x6f58 <_ZN10CDGUSUSART11IsReceivingEv>
     2ca:	0c 94 61 3d 	jmp	0x7ac2	; 0x7ac2 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2ce:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2d2:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xea>
     2d6:	0c 94 53 3e 	jmp	0x7ca6	; 0x7ca6 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2da:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <_ZN7CTimerD8SetCOMPBEj>
     2de:	0c 94 20 36 	jmp	0x6c40	; 0x6c40 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2e2:	0c 94 4e 34 	jmp	0x689c	; 0x689c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2e6:	0c 94 b0 3b 	jmp	0x7760	; 0x7760 <_ZN8CTimerC19SetPeriodEj>
     2ea:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2ee:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     2f2:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <_ZN7CTimerF8SetCOMPBEj>
     2f6:	0c 94 e8 3a 	jmp	0x75d0	; 0x75d0 <_ZN7CTimerC8SetCOMPCEj>
     2fa:	0c 94 5e 3c 	jmp	0x78bc	; 0x78bc <_ZN7CTimerD8SetCOMPAEj>
     2fe:	0c 94 8a 04 	jmp	0x914	; 0x914 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x54>
     302:	0c 94 f5 3b 	jmp	0x77ea	; 0x77ea <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     306:	0c 94 ed 3a 	jmp	0x75da	; 0x75da <_ZN7CTimerC8SetCOMPDEj>
     30a:	0c 94 b2 3d 	jmp	0x7b64	; 0x7b64 <_ZN7CTimerF5StartEj>
     30e:	0c 94 3a 3d 	jmp	0x7a74	; 0x7a74 <_ZN8CTimerD18SetCOMPBEj>
     312:	0c 94 83 3b 	jmp	0x7706	; 0x7706 <_ZN8CTimerC15StartEj>
     316:	0c 94 ae 04 	jmp	0x95c	; 0x95c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9c>
     31a:	0c 94 50 3d 	jmp	0x7aa0	; 0x7aa0 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     31e:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <_ZN4CSPI16StaticOnTransmitEPv>
     322:	0c 94 d1 3b 	jmp	0x77a2	; 0x77a2 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     326:	0c 94 bf 3b 	jmp	0x777e	; 0x777e <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     32a:	0c 94 c9 04 	jmp	0x992	; 0x992 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xd2>
     32e:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <_ZN8CTimerD15StartEj>
     332:	0c 94 89 33 	jmp	0x6712	; 0x6712 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     336:	0c 94 a9 3b 	jmp	0x7752	; 0x7752 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     33a:	0c 94 b3 37 	jmp	0x6f66	; 0x6f66 <_ZN10CDGUSUSART11IsDataEmptyEv>
     33e:	0c 94 d4 3d 	jmp	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     342:	0c 94 a4 37 	jmp	0x6f48	; 0x6f48 <_ZN10CDGUSUSART14IsTransmittingEv>
     346:	0c 94 b6 3c 	jmp	0x796c	; 0x796c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     34a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     34e:	0c 94 f4 3d 	jmp	0x7be8	; 0x7be8 <_ZN7CTimerF8SetCOMPCEj>
     352:	0c 94 83 3c 	jmp	0x7906	; 0x7906 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     356:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     35a:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x11a>
     35e:	0c 94 96 04 	jmp	0x92c	; 0x92c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6c>
     362:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     366:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     36a:	0c 94 1d 36 	jmp	0x6c3a	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
     36e:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     372:	0c 94 cd 37 	jmp	0x6f9a	; 0x6f9a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     376:	0c 94 ec 3c 	jmp	0x79d8	; 0x79d8 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     37a:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     37e:	0c 94 cb 3a 	jmp	0x7596	; 0x7596 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     382:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     386:	0c 94 68 3c 	jmp	0x78d0	; 0x78d0 <_ZN7CTimerD8SetCOMPCEj>
     38a:	0c 94 20 3e 	jmp	0x7c40	; 0x7c40 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     38e:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xde>
     392:	0c 94 c3 04 	jmp	0x986	; 0x986 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc6>
     396:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     39a:	0c 94 ba 34 	jmp	0x6974	; 0x6974 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     39e:	0c 94 ad 13 	jmp	0x275a	; 0x275a <_ZN16CLaserControlApp13OnTimerStaticEPv>
     3a2:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <_ZN7CTimerC4StopEv>
     3a6:	0c 94 42 3e 	jmp	0x7c84	; 0x7c84 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3aa:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_ZN7CTimerC5StartEj>
     3ae:	0c 94 e3 3b 	jmp	0x77c6	; 0x77c6 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3b2:	0c 94 52 3c 	jmp	0x78a4	; 0x78a4 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     3b6:	0c 94 b5 3b 	jmp	0x776a	; 0x776a <_ZN8CTimerC18SetCOMPAEj>
     3ba:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__cxa_pure_virtual>
     3be:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3c2:	0c 94 d9 3a 	jmp	0x75b2	; 0x75b2 <_ZN7CTimerC9SetPeriodEj>
     3c6:	0c 94 93 1c 	jmp	0x3926	; 0x3926 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     3ca:	0c 94 30 3d 	jmp	0x7a60	; 0x7a60 <_ZN8CTimerD19SetPeriodEj>
     3ce:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3d2:	0c 94 a8 04 	jmp	0x950	; 0x950 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x90>
     3d6:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xba>
     3da:	0c 94 25 31 	jmp	0x624a	; 0x624a <_GLOBAL__sub_D_dacSPI>
     3de:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3e2:	0c 94 dc 3d 	jmp	0x7bb8	; 0x7bb8 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     3e6:	0c 94 36 3c 	jmp	0x786c	; 0x786c <_ZN7CTimerD5StartEj>
     3ea:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     3ee:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <_ZN7CTimerF8SetCOMPDEj>
     3f2:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <_ZN16CMBEventsHandler11FreeBuffersEv>
     3f6:	0c 94 31 3e 	jmp	0x7c62	; 0x7c62 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3fa:	0c 94 23 06 	jmp	0xc46	; 0xc46 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     3fe:	0c 94 29 3d 	jmp	0x7a52	; 0x7a52 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     402:	0c 94 10 3d 	jmp	0x7a20	; 0x7a20 <_ZN8CTimerD14StopEv>
     406:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     40a:	0c 94 8e 35 	jmp	0x6b1c	; 0x6b1c <_ZN9CMBSender13OnReceiveByteEh+0x6e>
     40e:	0c 94 90 3b 	jmp	0x7720	; 0x7720 <_ZN8CTimerC14StopEv>
     412:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     416:	0c 94 43 3c 	jmp	0x7886	; 0x7886 <_ZN7CTimerD4StopEv>
     41a:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x142>
     41e:	0c 94 6d 3c 	jmp	0x78da	; 0x78da <_ZN7CTimerD8SetCOMPDEj>
     422:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x14e>
     426:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     42a:	0c 94 a5 3c 	jmp	0x794a	; 0x794a <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     42e:	0c 94 bb 37 	jmp	0x6f76	; 0x6f76 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     432:	0c 94 a2 04 	jmp	0x944	; 0x944 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x84>
     436:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     43a:	0c 94 25 3b 	jmp	0x764a	; 0x764a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     43e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     442:	0c 94 18 3d 	jmp	0x7a30	; 0x7a30 <_ZN8CTimerD15ResetEv>
     446:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <_ZN9CMBSender13OnReceiveByteEh+0x188>
     44a:	0c 94 f2 3a 	jmp	0x75e4	; 0x75e4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44e:	0c 94 72 3c 	jmp	0x78e4	; 0x78e4 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     452:	0c 94 f0 30 	jmp	0x61e0	; 0x61e0 <_GLOBAL__sub_I_dacSPI>
     456:	0c 94 ea 3d 	jmp	0x7bd4	; 0x7bd4 <_ZN7CTimerF8SetCOMPAEj>
     45a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     45e:	0c 94 e8 35 	jmp	0x6bd0	; 0x6bd0 <_ZN9CMBSender13OnReceiveByteEh+0x122>
     462:	0c 94 36 3b 	jmp	0x766c	; 0x766c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     466:	0c 94 47 36 	jmp	0x6c8e	; 0x6c8e <_ZN9CMBSender18OnTimeoutInterruptEPv>
     46a:	0c 94 6a 35 	jmp	0x6ad4	; 0x6ad4 <_ZN9CMBSender13OnReceiveByteEh+0x26>
     46e:	0c 94 ac 36 	jmp	0x6d58	; 0x6d58 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     472:	0c 94 c6 32 	jmp	0x658c	; 0x658c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     476:	0c 94 63 37 	jmp	0x6ec6	; 0x6ec6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     47a:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     47e:	0c 94 9e 37 	jmp	0x6f3c	; 0x6f3c <_ZN10CDGUSUSART15GetReceivedByteEv>
     482:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     486:	0c 94 22 06 	jmp	0xc44	; 0xc44 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     48a:	0c 94 a1 37 	jmp	0x6f42	; 0x6f42 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     48e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     492:	0c 94 94 3c 	jmp	0x7928	; 0x7928 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     496:	0c 94 d6 37 	jmp	0x6fac	; 0x6fac <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     49a:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <_ZN7CTimerF4StopEv>
     49e:	0c 94 35 3d 	jmp	0x7a6a	; 0x7a6a <_ZN8CTimerD18SetCOMPAEj>
     4a2:	0c 94 6c 3b 	jmp	0x76d8	; 0x76d8 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4a6:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4aa:	0c 94 fe 3d 	jmp	0x7bfc	; 0x7bfc <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4ae:	0c 94 e3 3a 	jmp	0x75c6	; 0x75c6 <_ZN7CTimerC8SetCOMPBEj>
     4b2:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     4b6:	0c 94 97 3d 	jmp	0x7b2e	; 0x7b2e <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4ba:	0c 94 14 3b 	jmp	0x7628	; 0x7628 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4be:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <_ZN8CTimerC15ResetEv>
     4c2:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4c6:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4ca:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     4ce:	0c 94 de 3a 	jmp	0x75bc	; 0x75bc <_ZN7CTimerC8SetCOMPAEj>
     4d2:	0c 94 e5 3d 	jmp	0x7bca	; 0x7bca <_ZN7CTimerF9SetPeriodEj>
     4d6:	0c 94 90 04 	jmp	0x920	; 0x920 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x60>
     4da:	0c 94 9c 04 	jmp	0x938	; 0x938 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x78>
     4de:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4e2:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     4e6:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4ea:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf6>
     4ee:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     4f2:	0c 94 0f 3e 	jmp	0x7c1e	; 0x7c1e <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4f6:	0c 94 7e 35 	jmp	0x6afc	; 0x6afc <_ZN9CMBSender13OnReceiveByteEh+0x4e>
     4fa:	0c 94 c7 3c 	jmp	0x798e	; 0x798e <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     4fe:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10e>
     502:	0c 94 22 3d 	jmp	0x7a44	; 0x7a44 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     506:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     50a:	0c 94 4b 3c 	jmp	0x7896	; 0x7896 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     50e:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     512:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>

00000516 <__ctors_start>:
     516:	f0 30       	cpi	r31, 0x00	; 0

00000518 <__ctors_end>:
     518:	25 31       	cpi	r18, 0x15	; 21

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	e6 e8       	ldi	r30, 0x86	; 134
     532:	f3 e8       	ldi	r31, 0x83	; 131
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 3c       	cpi	r26, 0xC4	; 196
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	26 e2       	ldi	r18, 0x26	; 38
     546:	a4 ec       	ldi	r26, 0xC4	; 196
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	af 32       	cpi	r26, 0x2F	; 47
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 12 40 	call	0x8024	; 0x8024 <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 53 32 	call	0x64a6	; 0x64a6 <main>
     578:	0c 94 b1 41 	jmp	0x8362	; 0x8362 <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 d5 36 	call	0x6daa	; 0x6daa <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 d5 36 	call	0x6daa	; 0x6daa <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 d5 36 	call	0x6daa	; 0x6daa <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <DatabaseStatusRegister>
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	90 c0       	rjmp	.+288    	; 0x8bc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x14e>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 12 40 	jmp	0x8024	; 0x8024 <__tablejump2__>
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	1c 96       	adiw	r26, 0x0c	; 12
     7b0:	8d 93       	st	X+, r24
     7b2:	9c 93       	st	X, r25
     7b4:	1d 97       	sbiw	r26, 0x0d	; 13
     7b6:	08 95       	ret
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	1d 92       	st	X+, r1
     7bc:	1c 92       	st	X, r1
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e2       	ldi	r25, 0x20	; 32
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e3       	ldi	r25, 0x30	; 48
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e1       	ldi	r25, 0x10	; 16
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e4       	ldi	r25, 0x40	; 64
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	95 e0       	ldi	r25, 0x05	; 5
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	96 e0       	ldi	r25, 0x06	; 6
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	97 e0       	ldi	r25, 0x07	; 7
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e4       	ldi	r24, 0x40	; 64
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	1c 96       	adiw	r26, 0x0c	; 12
     8b6:	8d 93       	st	X+, r24
     8b8:	9c 93       	st	X, r25
     8ba:	1d 97       	sbiw	r26, 0x0d	; 13
     8bc:	08 95       	ret

000008be <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
     8be:	08 95       	ret

000008c0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	8b 01       	movw	r16, r22
     8d8:	7a 01       	movw	r14, r20
     8da:	69 01       	movw	r12, r18
     8dc:	fa 01       	movw	r30, r20
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_Z4swapj>
     8e6:	9c 01       	movw	r18, r24
     8e8:	fe 01       	movw	r30, r28
     8ea:	e4 50       	subi	r30, 0x04	; 4
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	a0 80       	ld	r10, Z
     8f0:	b1 80       	ldd	r11, Z+1	; 0x01
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	cf 16       	cp	r12, r31
     8f6:	d1 04       	cpc	r13, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3c>
     8fa:	75 c0       	rjmp	.+234    	; 0x9e6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x126>
     8fc:	f8 01       	movw	r30, r16
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	e2 31       	cpi	r30, 0x12	; 18
     902:	f1 05       	cpc	r31, r1
     904:	08 f0       	brcs	.+2      	; 0x908 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x48>
     906:	9b c0       	rjmp	.+310    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     908:	88 27       	eor	r24, r24
     90a:	e2 5d       	subi	r30, 0xD2	; 210
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	8f 4f       	sbci	r24, 0xFF	; 255
     910:	0c 94 12 40 	jmp	0x8024	; 0x8024 <__tablejump2__>
     914:	fe 01       	movw	r30, r28
     916:	e0 51       	subi	r30, 0x10	; 16
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	20 83       	st	Z, r18
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	8f c0       	rjmp	.+286    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     920:	fe 01       	movw	r30, r28
     922:	ee 50       	subi	r30, 0x0E	; 14
     924:	ff 4f       	sbci	r31, 0xFF	; 255
     926:	20 83       	st	Z, r18
     928:	31 83       	std	Z+1, r19	; 0x01
     92a:	89 c0       	rjmp	.+274    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     92c:	fe 01       	movw	r30, r28
     92e:	ec 50       	subi	r30, 0x0C	; 12
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	20 83       	st	Z, r18
     934:	31 83       	std	Z+1, r19	; 0x01
     936:	83 c0       	rjmp	.+262    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     938:	fe 01       	movw	r30, r28
     93a:	ea 50       	subi	r30, 0x0A	; 10
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	20 83       	st	Z, r18
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	7d c0       	rjmp	.+250    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     944:	fe 01       	movw	r30, r28
     946:	e8 50       	subi	r30, 0x08	; 8
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	20 83       	st	Z, r18
     94c:	31 83       	std	Z+1, r19	; 0x01
     94e:	77 c0       	rjmp	.+238    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     950:	fe 01       	movw	r30, r28
     952:	e6 50       	subi	r30, 0x06	; 6
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	20 83       	st	Z, r18
     958:	31 83       	std	Z+1, r19	; 0x01
     95a:	71 c0       	rjmp	.+226    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     95c:	f7 01       	movw	r30, r14
     95e:	60 81       	ld	r22, Z
     960:	71 81       	ldd	r23, Z+1	; 0x01
     962:	82 81       	ldd	r24, Z+2	; 0x02
     964:	93 81       	ldd	r25, Z+3	; 0x03
     966:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z6swap32m>
     96a:	fe 01       	movw	r30, r28
     96c:	e6 52       	subi	r30, 0x26	; 38
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	60 83       	st	Z, r22
     972:	71 83       	std	Z+1, r23	; 0x01
     974:	82 83       	std	Z+2, r24	; 0x02
     976:	93 83       	std	Z+3, r25	; 0x03
     978:	62 c0       	rjmp	.+196    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     97a:	fe 01       	movw	r30, r28
     97c:	ee 5f       	subi	r30, 0xFE	; 254
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	20 83       	st	Z, r18
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	5c c0       	rjmp	.+184    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     986:	fe 01       	movw	r30, r28
     988:	ec 5f       	subi	r30, 0xFC	; 252
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	20 83       	st	Z, r18
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	56 c0       	rjmp	.+172    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     992:	fe 01       	movw	r30, r28
     994:	ea 5f       	subi	r30, 0xFA	; 250
     996:	fe 4f       	sbci	r31, 0xFE	; 254
     998:	20 83       	st	Z, r18
     99a:	31 83       	std	Z+1, r19	; 0x01
     99c:	50 c0       	rjmp	.+160    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     99e:	fe 01       	movw	r30, r28
     9a0:	e8 5f       	subi	r30, 0xF8	; 248
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	20 83       	st	Z, r18
     9a6:	31 83       	std	Z+1, r19	; 0x01
     9a8:	4a c0       	rjmp	.+148    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9aa:	fe 01       	movw	r30, r28
     9ac:	e6 5f       	subi	r30, 0xF6	; 246
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	20 83       	st	Z, r18
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	44 c0       	rjmp	.+136    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9b6:	fe 01       	movw	r30, r28
     9b8:	e4 5f       	subi	r30, 0xF4	; 244
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	20 83       	st	Z, r18
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	3e c0       	rjmp	.+124    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9c2:	fe 01       	movw	r30, r28
     9c4:	e2 5f       	subi	r30, 0xF2	; 242
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	20 83       	st	Z, r18
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	38 c0       	rjmp	.+112    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9ce:	fe 01       	movw	r30, r28
     9d0:	e0 5f       	subi	r30, 0xF0	; 240
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	20 83       	st	Z, r18
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	32 c0       	rjmp	.+100    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9da:	fe 01       	movw	r30, r28
     9dc:	ee 5e       	subi	r30, 0xEE	; 238
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	20 83       	st	Z, r18
     9e2:	31 83       	std	Z+1, r19	; 0x01
     9e4:	2c c0       	rjmp	.+88     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     9e6:	01 30       	cpi	r16, 0x01	; 1
     9e8:	11 05       	cpc	r17, r1
     9ea:	51 f4       	brne	.+20     	; 0xa00 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x140>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	a6 01       	movw	r20, r12
     9f2:	b7 01       	movw	r22, r14
     9f4:	ce 01       	movw	r24, r28
     9f6:	80 51       	subi	r24, 0x10	; 16
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
     9fa:	0e 94 96 1c 	call	0x392c	; 0x392c <_Z11ConvertDataPvS_jj>
     9fe:	1f c0       	rjmp	.+62     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a00:	05 30       	cpi	r16, 0x05	; 5
     a02:	11 05       	cpc	r17, r1
     a04:	51 f4       	brne	.+20     	; 0xa1a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x15a>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a6 01       	movw	r20, r12
     a0c:	b7 01       	movw	r22, r14
     a0e:	ce 01       	movw	r24, r28
     a10:	88 50       	subi	r24, 0x08	; 8
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	0e 94 96 1c 	call	0x392c	; 0x392c <_Z11ConvertDataPvS_jj>
     a18:	12 c0       	rjmp	.+36     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a1a:	02 30       	cpi	r16, 0x02	; 2
     a1c:	11 05       	cpc	r17, r1
     a1e:	79 f4       	brne	.+30     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a20:	8e 85       	ldd	r24, Y+14	; 0x0e
     a22:	86 30       	cpi	r24, 0x06	; 6
     a24:	50 f4       	brcc	.+20     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	a6 01       	movw	r20, r12
     a2c:	b7 01       	movw	r22, r14
     a2e:	ce 01       	movw	r24, r28
     a30:	8e 50       	subi	r24, 0x0E	; 14
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	0e 94 96 1c 	call	0x392c	; 0x392c <_Z11ConvertDataPvS_jj>
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17e>
     a3a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <_ZN11CLaserBoard4BeepEv>
     a3e:	c4 50       	subi	r28, 0x04	; 4
     a40:	df 4f       	sbci	r29, 0xFF	; 255
     a42:	a8 82       	st	Y, r10
     a44:	b9 82       	std	Y+1, r11	; 0x01
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	08 95       	ret

00000a5c <_Z13NormalizeStepRjS_S_jPj>:
     a5c:	8f 92       	push	r8
     a5e:	9f 92       	push	r9
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	6c 01       	movw	r12, r24
     a76:	fb 01       	movw	r30, r22
     a78:	7a 01       	movw	r14, r20
     a7a:	dc 01       	movw	r26, r24
     a7c:	8d 90       	ld	r8, X+
     a7e:	9c 90       	ld	r9, X
     a80:	da 01       	movw	r26, r20
     a82:	cd 91       	ld	r28, X+
     a84:	dc 91       	ld	r29, X
     a86:	c4 01       	movw	r24, r8
     a88:	be 01       	movw	r22, r28
     a8a:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
     a8e:	6c 9f       	mul	r22, r28
     a90:	50 01       	movw	r10, r0
     a92:	6d 9f       	mul	r22, r29
     a94:	b0 0c       	add	r11, r0
     a96:	7c 9f       	mul	r23, r28
     a98:	b0 0c       	add	r11, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	c0 81       	ld	r28, Z
     a9e:	d1 81       	ldd	r29, Z+1	; 0x01
     aa0:	c8 19       	sub	r28, r8
     aa2:	d9 09       	sbc	r29, r9
     aa4:	f8 01       	movw	r30, r16
     aa6:	60 81       	ld	r22, Z
     aa8:	71 81       	ldd	r23, Z+1	; 0x01
     aaa:	d7 01       	movw	r26, r14
     aac:	6d 93       	st	X+, r22
     aae:	7c 93       	st	X, r23
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
     ab6:	26 17       	cp	r18, r22
     ab8:	37 07       	cpc	r19, r23
     aba:	60 f4       	brcc	.+24     	; 0xad4 <_Z13NormalizeStepRjS_S_jPj+0x78>
     abc:	32 96       	adiw	r30, 0x02	; 2
     abe:	61 91       	ld	r22, Z+
     ac0:	71 91       	ld	r23, Z+
     ac2:	d7 01       	movw	r26, r14
     ac4:	6d 93       	st	X+, r22
     ac6:	7c 93       	st	X, r23
     ac8:	ce 01       	movw	r24, r28
     aca:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
     ace:	26 17       	cp	r18, r22
     ad0:	37 07       	cpc	r19, r23
     ad2:	a8 f3       	brcs	.-22     	; 0xabe <_Z13NormalizeStepRjS_S_jPj+0x62>
     ad4:	f6 01       	movw	r30, r12
     ad6:	a0 82       	st	Z, r10
     ad8:	b1 82       	std	Z+1, r11	; 0x01
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <_ZN16CLaserControlAppC1Ev>:
     af4:	2e e7       	ldi	r18, 0x7E	; 126
     af6:	31 e2       	ldi	r19, 0x21	; 33
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	31 83       	std	Z+1, r19	; 0x01
     afe:	08 95       	ret

00000b00 <_ZN16CLaserControlAppD1Ev>:
     b00:	2e e7       	ldi	r18, 0x7E	; 126
     b02:	31 e2       	ldi	r19, 0x21	; 33
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
     b08:	31 83       	std	Z+1, r19	; 0x01
     b0a:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN16CMBEventsHandlerD1Ev>
     b0e:	08 95       	ret

00000b10 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>:
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	fc 01       	movw	r30, r24
     b1e:	e8 52       	subi	r30, 0x28	; 40
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	60 81       	ld	r22, Z
     b24:	71 81       	ldd	r23, Z+1	; 0x01
     b26:	cb 01       	movw	r24, r22
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	05 2e       	mov	r0, r21
     b32:	5a e0       	ldi	r21, 0x0A	; 10
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	88 1f       	adc	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	5a 95       	dec	r21
     b3e:	d1 f7       	brne	.-12     	; 0xb34 <_ZN16CLaserControlApp18SetLaserDiodePowerEv+0x24>
     b40:	50 2d       	mov	r21, r0
     b42:	24 ef       	ldi	r18, 0xF4	; 244
     b44:	31 e0       	ldi	r19, 0x01	; 1
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
     b4e:	c9 01       	movw	r24, r18
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	6f ef       	ldi	r22, 0xFF	; 255
     b5a:	7f e0       	ldi	r23, 0x0F	; 15
     b5c:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_Z3minjj>
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	42 e0       	ldi	r20, 0x02	; 2
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	85 e2       	ldi	r24, 0x25	; 37
     b70:	96 e2       	ldi	r25, 0x26	; 38
     b72:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN4CSPI4SendEPhj>
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <_ZN16CLaserControlApp11GetVariableEjj>:
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ec 01       	movw	r28, r24
     b86:	c8 5d       	subi	r28, 0xD8	; 216
     b88:	de 4f       	sbci	r29, 0xFE	; 254
     b8a:	88 81       	ld	r24, Y
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	0e 94 29 37 	call	0x6e52	; 0x6e52 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     b92:	88 81       	ld	r24, Y
     b94:	99 81       	ldd	r25, Y+1	; 0x01
     b96:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     b9a:	88 81       	ld	r24, Y
     b9c:	99 81       	ldd	r25, Y+1	; 0x01
     b9e:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <_ZN9CMBSender18WaitMODBUSListenerEv>
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
     bae:	c8 5d       	subi	r28, 0xD8	; 216
     bb0:	de 4f       	sbci	r29, 0xFE	; 254
     bb2:	88 81       	ld	r24, Y
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	1f 92       	push	r1
     bd2:	1f 92       	push	r1
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	8c 01       	movw	r16, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_Z4swapj>
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	9a 83       	std	Y+2, r25	; 0x02
     be4:	08 5d       	subi	r16, 0xD8	; 216
     be6:	1e 4f       	sbci	r17, 0xFE	; 254
     be8:	22 e0       	ldi	r18, 0x02	; 2
     bea:	ae 01       	movw	r20, r28
     bec:	4f 5f       	subi	r20, 0xFF	; 255
     bee:	5f 4f       	sbci	r21, 0xFF	; 255
     bf0:	63 e0       	ldi	r22, 0x03	; 3
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	0e 94 d5 36 	call	0x6daa	; 0x6daa <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     bfc:	f8 01       	movw	r30, r16
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     c14:	fc 01       	movw	r30, r24
     c16:	83 89       	ldd	r24, Z+19	; 0x13
     c18:	88 23       	and	r24, r24
     c1a:	21 f0       	breq	.+8      	; 0xc24 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     c1c:	85 ee       	ldi	r24, 0xE5	; 229
     c1e:	95 e2       	ldi	r25, 0x25	; 37
     c20:	0e 94 b0 39 	call	0x7360	; 0x7360 <_ZN11CLaserBoard6PWMOffEv>
     c24:	08 95       	ret

00000c26 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     c26:	fc 01       	movw	r30, r24
     c28:	83 89       	ldd	r24, Z+19	; 0x13
     c2a:	88 23       	and	r24, r24
     c2c:	21 f0       	breq	.+8      	; 0xc36 <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     c2e:	85 ee       	ldi	r24, 0xE5	; 229
     c30:	95 e2       	ldi	r25, 0x25	; 37
     c32:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN11CLaserBoard5PWMOnEv>
     c36:	08 95       	ret

00000c38 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     c38:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     c3c:	08 95       	ret

00000c3e <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     c3e:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     c44:	08 95       	ret

00000c46 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     c46:	08 95       	ret

00000c48 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     c48:	08 95       	ret

00000c4a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>:
	update = true;	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
}

void CLaserControlApp::UpdateLimits(uint16_t freq, uint16_t duration, uint16_t energy, APP_PROFILE mode)
{
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	6b 01       	movw	r12, r22
     c64:	7a 01       	movw	r14, r20
	bool UpdateFreq = false;
	switch (mode)
     c66:	02 30       	cpi	r16, 0x02	; 2
     c68:	81 f0       	breq	.+32     	; 0xc8a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x40>
     c6a:	18 f4       	brcc	.+6      	; 0xc72 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x28>
     c6c:	01 30       	cpi	r16, 0x01	; 1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x32>
     c70:	33 c0       	rjmp	.+102    	; 0xcd8 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
     c72:	03 30       	cpi	r16, 0x03	; 3
     c74:	b9 f0       	breq	.+46     	; 0xca4 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x5a>
     c76:	04 30       	cpi	r16, 0x04	; 4
     c78:	11 f1       	breq	.+68     	; 0xcbe <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x74>
     c7a:	2e c0       	rjmp	.+92     	; 0xcd8 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:		
			pstGUI[mode].m_wMinFreq = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	88 af       	std	Y+56, r24	; 0x38
     c82:	99 af       	std	Y+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     c84:	8e ab       	std	Y+54, r24	; 0x36
     c86:	9f ab       	std	Y+55, r25	; 0x37
     c88:	44 c0       	rjmp	.+136    	; 0xd12 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc8>
			UpdateFreq = true;
			break;
		case PROFILE_SLOW:			
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	fe 01       	movw	r30, r28
     c90:	ee 5a       	subi	r30, 0xAE	; 174
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	80 83       	st	Z, r24
     c96:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	32 97       	sbiw	r30, 0x02	; 2
     c9e:	80 83       	st	Z, r24
     ca0:	91 83       	std	Z+1, r25	; 0x01
			break;
     ca2:	1d c0       	rjmp	.+58     	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
		case PROFILE_MEDIUM:		
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	fe 01       	movw	r30, r28
     caa:	e4 59       	subi	r30, 0x94	; 148
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 83       	st	Z, r24
     cb0:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	32 97       	sbiw	r30, 0x02	; 2
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
			break;
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     cbe:	86 e0       	ldi	r24, 0x06	; 6
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	fe 01       	movw	r30, r28
     cc4:	ea 57       	subi	r30, 0x7A	; 122
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 83       	st	Z, r24
     cca:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     ccc:	8a e0       	ldi	r24, 0x0A	; 10
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	32 97       	sbiw	r30, 0x02	; 2
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
			break;
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
	}
	if (mode != PROFILE_SINGLE)	
     cd8:	01 30       	cpi	r16, 0x01	; 1
     cda:	09 f4       	brne	.+2      	; 0xcde <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
     cdc:	b2 c0       	rjmp	.+356    	; 0xe42 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x1f8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
     cde:	80 2f       	mov	r24, r16
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fe 01       	movw	r30, r28
     ce4:	2a e1       	ldi	r18, 0x1A	; 26
     ce6:	02 9f       	mul	r16, r18
     ce8:	e0 0d       	add	r30, r0
     cea:	f1 1d       	adc	r31, r1
     cec:	11 24       	eor	r1, r1
     cee:	26 8d       	ldd	r18, Z+30	; 0x1e
     cf0:	37 8d       	ldd	r19, Z+31	; 0x1f
     cf2:	c2 16       	cp	r12, r18
     cf4:	d3 06       	cpc	r13, r19
     cf6:	68 f0       	brcs	.+26     	; 0xd12 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc8>
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
     cf8:	2a e1       	ldi	r18, 0x1A	; 26
     cfa:	28 9f       	mul	r18, r24
     cfc:	f0 01       	movw	r30, r0
     cfe:	29 9f       	mul	r18, r25
     d00:	f0 0d       	add	r31, r0
     d02:	11 24       	eor	r1, r1
     d04:	ec 0f       	add	r30, r28
     d06:	fd 1f       	adc	r31, r29
     d08:	84 8d       	ldd	r24, Z+28	; 0x1c
     d0a:	95 8d       	ldd	r25, Z+29	; 0x1d
     d0c:	8c 15       	cp	r24, r12
     d0e:	9d 05       	cpc	r25, r13
     d10:	28 f4       	brcc	.+10     	; 0xd1c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xd2>
	}
	
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
     d12:	fe 01       	movw	r30, r28
     d14:	ee 50       	subi	r30, 0x0E	; 14
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	c0 82       	st	Z, r12
     d1a:	d1 82       	std	Z+1, r13	; 0x01
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     d1c:	c6 01       	movw	r24, r12
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	fc 01       	movw	r30, r24
     d24:	ec 5d       	subi	r30, 0xDC	; 220
     d26:	fe 4d       	sbci	r31, 0xDE	; 222
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 5f       	subi	r30, 0xF2	; 242
     d30:	fe 4d       	sbci	r31, 0xDE	; 222
     d32:	01 90       	ld	r0, Z+
     d34:	f0 81       	ld	r31, Z
     d36:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     d38:	dc 01       	movw	r26, r24
     d3a:	a8 50       	subi	r26, 0x08	; 8
     d3c:	bf 4d       	sbci	r27, 0xDF	; 223
     d3e:	ad 90       	ld	r10, X+
     d40:	bc 90       	ld	r11, X
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	a4 1a       	sub	r10, r20
     d46:	b1 08       	sbc	r11, r1
     d48:	cf 01       	movw	r24, r30
     d4a:	82 1b       	sub	r24, r18
     d4c:	93 0b       	sbc	r25, r19
     d4e:	b5 01       	movw	r22, r10
     d50:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
	
	if (mode == PROFILE_MEDIUM)
     d54:	03 30       	cpi	r16, 0x03	; 3
     d56:	21 f4       	brne	.+8      	; 0xd60 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
	{
		MinD = 10;
		MaxD = 100;
     d58:	e4 e6       	ldi	r30, 0x64	; 100
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t MaxD = MaxDurationTable[freq];
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
	
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	52 2f       	mov	r21, r18
     d62:	43 2f       	mov	r20, r19
     d64:	2e 15       	cp	r18, r14
     d66:	3f 05       	cpc	r19, r15
     d68:	10 f4       	brcc	.+4      	; 0xd6e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x124>
     d6a:	5e 2d       	mov	r21, r14
     d6c:	4f 2d       	mov	r20, r15
     d6e:	85 2f       	mov	r24, r21
     d70:	94 2f       	mov	r25, r20
     d72:	e8 17       	cp	r30, r24
     d74:	f9 07       	cpc	r31, r25
     d76:	08 f4       	brcc	.+2      	; 0xd7a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x130>
     d78:	cf 01       	movw	r24, r30
     d7a:	e0 2e       	mov	r14, r16
     d7c:	f1 2c       	mov	r15, r1
     d7e:	4e 01       	movw	r8, r28
     d80:	aa e1       	ldi	r26, 0x1A	; 26
     d82:	0a 9f       	mul	r16, r26
     d84:	80 0c       	add	r8, r0
     d86:	91 1c       	adc	r9, r1
     d88:	11 24       	eor	r1, r1
	
	// Update duration helpers
	if (duration < MinD)	duration = MinD;
	if (duration > MaxD)	duration = MaxD;
		
	if ((pstGUI[mode].m_wMinDuration != MinD) || (pstGUI[mode].m_wMaxDuration != MaxD))
     d8a:	d4 01       	movw	r26, r8
     d8c:	5a 96       	adiw	r26, 0x1a	; 26
     d8e:	4d 91       	ld	r20, X+
     d90:	5c 91       	ld	r21, X
     d92:	5b 97       	sbiw	r26, 0x1b	; 27
     d94:	42 17       	cp	r20, r18
     d96:	53 07       	cpc	r21, r19
     d98:	81 f4       	brne	.+32     	; 0xdba <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x170>
     d9a:	0a e1       	ldi	r16, 0x1A	; 26
     d9c:	0e 9d       	mul	r16, r14
     d9e:	a0 01       	movw	r20, r0
     da0:	0f 9d       	mul	r16, r15
     da2:	50 0d       	add	r21, r0
     da4:	11 24       	eor	r1, r1
     da6:	4c 0f       	add	r20, r28
     da8:	5d 1f       	adc	r21, r29
     daa:	da 01       	movw	r26, r20
     dac:	58 96       	adiw	r26, 0x18	; 24
     dae:	4d 91       	ld	r20, X+
     db0:	5c 91       	ld	r21, X
     db2:	59 97       	sbiw	r26, 0x19	; 25
     db4:	4e 17       	cp	r20, r30
     db6:	5f 07       	cpc	r21, r31
     db8:	a1 f0       	breq	.+40     	; 0xde2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x198>
	{
		pstGUI[mode].m_wMinDuration = MinD;
     dba:	d4 01       	movw	r26, r8
     dbc:	5a 96       	adiw	r26, 0x1a	; 26
     dbe:	2d 93       	st	X+, r18
     dc0:	3c 93       	st	X, r19
     dc2:	5b 97       	sbiw	r26, 0x1b	; 27
		pstGUI[mode].m_wMaxDuration = MaxD;	
     dc4:	4a e1       	ldi	r20, 0x1A	; 26
     dc6:	4e 9d       	mul	r20, r14
     dc8:	d0 01       	movw	r26, r0
     dca:	4f 9d       	mul	r20, r15
     dcc:	b0 0d       	add	r27, r0
     dce:	11 24       	eor	r1, r1
     dd0:	ac 0f       	add	r26, r28
     dd2:	bd 1f       	adc	r27, r29
     dd4:	58 96       	adiw	r26, 0x18	; 24
     dd6:	ed 93       	st	X+, r30
     dd8:	fc 93       	st	X, r31
     dda:	59 97       	sbiw	r26, 0x19	; 25
		pstGUI[mode].updateDuration = true;
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	9c 96       	adiw	r26, 0x2c	; 44
     de0:	4c 93       	st	X, r20
	}

	uint16_t index = (duration - MinD) / Delta;
     de2:	82 1b       	sub	r24, r18
     de4:	93 0b       	sbc	r25, r19
     de6:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 c7 1c 	call	0x398e	; 0x398e <_Z3maxjj>
     df2:	b5 01       	movw	r22, r10
     df4:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
     df8:	4b e0       	ldi	r20, 0x0B	; 11
     dfa:	4c 9d       	mul	r20, r12
     dfc:	90 01       	movw	r18, r0
     dfe:	4d 9d       	mul	r20, r13
     e00:	30 0d       	add	r19, r0
     e02:	11 24       	eor	r1, r1
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ea 5f       	subi	r30, 0xFA	; 250
     e10:	ff 4d       	sbci	r31, 0xDF	; 223
     e12:	20 81       	ld	r18, Z
     e14:	31 81       	ldd	r19, Z+1	; 0x01
     e16:	8a e1       	ldi	r24, 0x1A	; 26
     e18:	8e 9d       	mul	r24, r14
     e1a:	f0 01       	movw	r30, r0
     e1c:	8f 9d       	mul	r24, r15
     e1e:	f0 0d       	add	r31, r0
     e20:	11 24       	eor	r1, r1
     e22:	ec 0f       	add	r30, r28
     e24:	fd 1f       	adc	r31, r29
     e26:	24 8b       	std	Z+20, r18	; 0x14
     e28:	35 8b       	std	Z+21, r19	; 0x15
		
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
     e2a:	40 a1       	ldd	r20, Z+32	; 0x20
     e2c:	51 a1       	ldd	r21, Z+33	; 0x21
		
	if ((pstGUI[mode].m_wMinEnergy_ != Offset) || (pstGUI[mode].m_wMaxEnergy_ != MaxEnergy))
     e2e:	86 89       	ldd	r24, Z+22	; 0x16
     e30:	97 89       	ldd	r25, Z+23	; 0x17
     e32:	84 17       	cp	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	11 f1       	breq	.+68     	; 0xe7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x232>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
     e38:	46 8b       	std	Z+22, r20	; 0x16
     e3a:	57 8b       	std	Z+23, r21	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	85 a7       	std	Z+45, r24	; 0x2d
     e40:	1d c0       	rjmp	.+58     	; 0xe7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x232>
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     e42:	c6 01       	movw	r24, r12
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	fc 01       	movw	r30, r24
     e4a:	ec 5d       	subi	r30, 0xDC	; 220
     e4c:	fe 4d       	sbci	r31, 0xDE	; 222
     e4e:	20 81       	ld	r18, Z
     e50:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     e52:	fc 01       	movw	r30, r24
     e54:	e2 5f       	subi	r30, 0xF2	; 242
     e56:	fe 4d       	sbci	r31, 0xDE	; 222
     e58:	01 90       	ld	r0, Z+
     e5a:	f0 81       	ld	r31, Z
     e5c:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     e5e:	dc 01       	movw	r26, r24
     e60:	a8 50       	subi	r26, 0x08	; 8
     e62:	bf 4d       	sbci	r27, 0xDF	; 223
     e64:	ad 90       	ld	r10, X+
     e66:	bc 90       	ld	r11, X
     e68:	b1 e0       	ldi	r27, 0x01	; 1
     e6a:	ab 1a       	sub	r10, r27
     e6c:	b1 08       	sbc	r11, r1
     e6e:	cf 01       	movw	r24, r30
     e70:	82 1b       	sub	r24, r18
     e72:	93 0b       	sbc	r25, r19
     e74:	b5 01       	movw	r22, r10
     e76:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
     e7a:	72 cf       	rjmp	.-284    	; 0xd60 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
	}
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	08 95       	ret

00000e94 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
     e94:	3f 92       	push	r3
     e96:	4f 92       	push	r4
     e98:	5f 92       	push	r5
     e9a:	6f 92       	push	r6
     e9c:	7f 92       	push	r7
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	2a 97       	sbiw	r28, 0x0a	; 10
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	7c 01       	movw	r14, r24
     ec2:	6b 01       	movw	r12, r22
     ec4:	5a 01       	movw	r10, r20
     ec6:	49 01       	movw	r8, r18
     ec8:	30 2e       	mov	r3, r16
	bool UpdateFreq = false;
	switch (mode)
     eca:	22 e0       	ldi	r18, 0x02	; 2
     ecc:	02 17       	cp	r16, r18
     ece:	01 f1       	breq	.+64     	; 0xf10 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x7c>
     ed0:	20 17       	cp	r18, r16
     ed2:	20 f0       	brcs	.+8      	; 0xedc <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x48>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	04 17       	cp	r16, r20
     ed8:	41 f0       	breq	.+16     	; 0xeea <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x56>
     eda:	41 c0       	rjmp	.+130    	; 0xf5e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	08 17       	cp	r16, r24
     ee0:	21 f1       	breq	.+72     	; 0xf2a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x96>
     ee2:	a4 e0       	ldi	r26, 0x04	; 4
     ee4:	0a 17       	cp	r16, r26
     ee6:	71 f1       	breq	.+92     	; 0xf44 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xb0>
     ee8:	3a c0       	rjmp	.+116    	; 0xf5e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	f7 01       	movw	r30, r14
     ef0:	80 af       	std	Z+56, r24	; 0x38
     ef2:	91 af       	std	Z+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     ef4:	86 ab       	std	Z+54, r24	; 0x36
     ef6:	97 ab       	std	Z+55, r25	; 0x37
			if (freq != 1)
     ef8:	db 01       	movw	r26, r22
     efa:	8d 91       	ld	r24, X+
     efc:	9c 91       	ld	r25, X
     efe:	11 97       	sbiw	r26, 0x01	; 1
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	09 f4       	brne	.+2      	; 0xf06 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x72>
     f04:	9b c1       	rjmp	.+822    	; 0x123c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a8>
			{
				freq = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	8d 93       	st	X+, r24
     f0c:	9c 93       	st	X, r25
     f0e:	97 c1       	rjmp	.+814    	; 0x123e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3aa>
				UpdateFreq = true;
			}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	f7 01       	movw	r30, r14
     f16:	ee 5a       	subi	r30, 0xAE	; 174
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 83       	st	Z, r24
     f1c:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	32 97       	sbiw	r30, 0x02	; 2
     f24:	80 83       	st	Z, r24
     f26:	91 83       	std	Z+1, r25	; 0x01
		break;
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	f7 01       	movw	r30, r14
     f30:	e4 59       	subi	r30, 0x94	; 148
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	32 97       	sbiw	r30, 0x02	; 2
     f3e:	80 83       	st	Z, r24
     f40:	91 83       	std	Z+1, r25	; 0x01
		break;
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	f7 01       	movw	r30, r14
     f4a:	ea 57       	subi	r30, 0x7A	; 122
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 83       	st	Z, r24
     f50:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	32 97       	sbiw	r30, 0x02	; 2
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
		break;
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
	}
	
	if (mode != PROFILE_SINGLE)
     f5e:	b1 e0       	ldi	r27, 0x01	; 1
     f60:	3b 16       	cp	r3, r27
     f62:	09 f4       	brne	.+2      	; 0xf66 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
     f64:	6f c1       	rjmp	.+734    	; 0x1244 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3b0>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
     f66:	f6 01       	movw	r30, r12
     f68:	20 81       	ld	r18, Z
     f6a:	31 81       	ldd	r19, Z+1	; 0x01
     f6c:	83 2d       	mov	r24, r3
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	f7 01       	movw	r30, r14
     f72:	4a e1       	ldi	r20, 0x1A	; 26
     f74:	34 9e       	mul	r3, r20
     f76:	e0 0d       	add	r30, r0
     f78:	f1 1d       	adc	r31, r1
     f7a:	11 24       	eor	r1, r1
     f7c:	46 8d       	ldd	r20, Z+30	; 0x1e
     f7e:	57 8d       	ldd	r21, Z+31	; 0x1f
     f80:	24 17       	cp	r18, r20
     f82:	35 07       	cpc	r19, r21
     f84:	88 f4       	brcc	.+34     	; 0xfa8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x114>
     f86:	d6 01       	movw	r26, r12
     f88:	4d 93       	st	X+, r20
     f8a:	5c 93       	st	X, r21
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
     f8c:	2a e1       	ldi	r18, 0x1A	; 26
     f8e:	28 9f       	mul	r18, r24
     f90:	f0 01       	movw	r30, r0
     f92:	29 9f       	mul	r18, r25
     f94:	f0 0d       	add	r31, r0
     f96:	11 24       	eor	r1, r1
     f98:	ee 0d       	add	r30, r14
     f9a:	ff 1d       	adc	r31, r15
     f9c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f9e:	95 8d       	ldd	r25, Z+29	; 0x1d
     fa0:	84 17       	cp	r24, r20
     fa2:	95 07       	cpc	r25, r21
     fa4:	70 f0       	brcs	.+28     	; 0xfc2 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x12e>
     fa6:	10 c0       	rjmp	.+32     	; 0xfc8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x134>
     fa8:	4a e1       	ldi	r20, 0x1A	; 26
     faa:	48 9f       	mul	r20, r24
     fac:	f0 01       	movw	r30, r0
     fae:	49 9f       	mul	r20, r25
     fb0:	f0 0d       	add	r31, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	ee 0d       	add	r30, r14
     fb6:	ff 1d       	adc	r31, r15
     fb8:	84 8d       	ldd	r24, Z+28	; 0x1c
     fba:	95 8d       	ldd	r25, Z+29	; 0x1d
     fbc:	82 17       	cp	r24, r18
     fbe:	93 07       	cpc	r25, r19
     fc0:	70 f4       	brcc	.+28     	; 0xfde <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x14a>
     fc2:	f6 01       	movw	r30, r12
     fc4:	80 83       	st	Z, r24
     fc6:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (UpdateFreq)
	{
		// Update Frequency
		laserDiodeData.laserprofile.Frequency = freq;
     fc8:	d6 01       	movw	r26, r12
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	f7 01       	movw	r30, r14
     fd0:	ee 50       	subi	r30, 0x0E	; 14
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
		update = true;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	f7 01       	movw	r30, r14
     fdc:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     fde:	d6 01       	movw	r26, r12
     fe0:	2d 91       	ld	r18, X+
     fe2:	3c 91       	ld	r19, X
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	f9 01       	movw	r30, r18
     fea:	ec 5d       	subi	r30, 0xDC	; 220
     fec:	fe 4d       	sbci	r31, 0xDE	; 222
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	49 87       	std	Y+9, r20	; 0x09
     ff4:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
     ff6:	f9 01       	movw	r30, r18
     ff8:	e2 5f       	subi	r30, 0xF2	; 242
     ffa:	fe 4d       	sbci	r31, 0xDE	; 222
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	8f 83       	std	Y+7, r24	; 0x07
    1002:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1004:	84 1b       	sub	r24, r20
    1006:	95 0b       	sbc	r25, r21
    1008:	f9 01       	movw	r30, r18
    100a:	e8 50       	subi	r30, 0x08	; 8
    100c:	ff 4d       	sbci	r31, 0xDF	; 223
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	61 50       	subi	r22, 0x01	; 1
    1014:	71 09       	sbc	r23, r1
    1016:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    101a:	3b 01       	movw	r6, r22
	uint16_t step ;
	
	if (mode == PROFILE_MEDIUM)
    101c:	b3 e0       	ldi	r27, 0x03	; 3
    101e:	3b 12       	cpse	r3, r27
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
	{
		MinD = 10;
    1022:	8a e0       	ldi	r24, 0x0A	; 10
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	89 87       	std	Y+9, r24	; 0x09
    1028:	9a 87       	std	Y+10, r25	; 0x0a
		MaxD = 100;	
    102a:	84 e6       	ldi	r24, 0x64	; 100
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	8f 83       	std	Y+7, r24	; 0x07
    1030:	98 87       	std	Y+8, r25	; 0x08
	}
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
    1032:	f5 01       	movw	r30, r10
    1034:	40 81       	ld	r20, Z
    1036:	51 81       	ldd	r21, Z+1	; 0x01
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	48 17       	cp	r20, r24
    103e:	59 07       	cpc	r21, r25
    1040:	08 f0       	brcs	.+2      	; 0x1044 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1b0>
    1042:	20 c1       	rjmp	.+576    	; 0x1284 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3f0>
    1044:	80 83       	st	Z, r24
    1046:	91 83       	std	Z+1, r25	; 0x01
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    1048:	2f 81       	ldd	r18, Y+7	; 0x07
    104a:	38 85       	ldd	r19, Y+8	; 0x08
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	18 f4       	brcc	.+6      	; 0x1058 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1c4>
    1052:	d5 01       	movw	r26, r10
    1054:	2d 93       	st	X+, r18
    1056:	3c 93       	st	X, r19
	
	if (UpdateDuration)
	{			
		// Update duration helpers	
		step = 1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	9e 83       	std	Y+6, r25	; 0x06
		NormalizeStep(MinD, MaxD, step, 20, step_table);
    1060:	08 e0       	ldi	r16, 0x08	; 8
    1062:	10 e2       	ldi	r17, 0x20	; 32
    1064:	24 e1       	ldi	r18, 0x14	; 20
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	ae 01       	movw	r20, r28
    106a:	4b 5f       	subi	r20, 0xFB	; 251
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	be 01       	movw	r22, r28
    1070:	69 5f       	subi	r22, 0xF9	; 249
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	ce 01       	movw	r24, r28
    1076:	09 96       	adiw	r24, 0x09	; 9
    1078:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wDurationStep = step;
    107c:	6d 81       	ldd	r22, Y+5	; 0x05
    107e:	7e 81       	ldd	r23, Y+6	; 0x06
    1080:	4a e1       	ldi	r20, 0x1A	; 26
    1082:	03 2d       	mov	r16, r3
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	f7 01       	movw	r30, r14
    1088:	43 9d       	mul	r20, r3
    108a:	e0 0d       	add	r30, r0
    108c:	f1 1d       	adc	r31, r1
    108e:	11 24       	eor	r1, r1
    1090:	60 a7       	std	Z+40, r22	; 0x28
    1092:	71 a7       	std	Z+41, r23	; 0x29
		pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    1094:	4f 80       	ldd	r4, Y+7	; 0x07
    1096:	58 84       	ldd	r5, Y+8	; 0x08
    1098:	29 85       	ldd	r18, Y+9	; 0x09
    109a:	3a 85       	ldd	r19, Y+10	; 0x0a
    109c:	c2 01       	movw	r24, r4
    109e:	82 1b       	sub	r24, r18
    10a0:	93 0b       	sbc	r25, r19
    10a2:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    10a6:	62 a7       	std	Z+42, r22	; 0x2a
    10a8:	73 a7       	std	Z+43, r23	; 0x2b
		pstGUI[mode].m_wDurationOffset = MinD;
    10aa:	26 a3       	std	Z+38, r18	; 0x26
    10ac:	37 a3       	std	Z+39, r19	; 0x27
		pstGUI[mode].m_wMinDuration = MinD;
    10ae:	0f 5f       	subi	r16, 0xFF	; 255
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	40 9f       	mul	r20, r16
    10b4:	d0 01       	movw	r26, r0
    10b6:	41 9f       	mul	r20, r17
    10b8:	b0 0d       	add	r27, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	ae 0d       	add	r26, r14
    10be:	bf 1d       	adc	r27, r15
    10c0:	2d 93       	st	X+, r18
    10c2:	3c 93       	st	X, r19
		pstGUI[mode].m_wMaxDuration = MaxD;
    10c4:	40 8e       	std	Z+24, r4	; 0x18
    10c6:	51 8e       	std	Z+25, r5	; 0x19
		
		// Update Duration
		laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    10c8:	97 01       	movw	r18, r14
    10ca:	2c 50       	subi	r18, 0x0C	; 12
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	d5 01       	movw	r26, r10
    10d0:	8d 91       	ld	r24, X+
    10d2:	9c 91       	ld	r25, X
    10d4:	46 a1       	ldd	r20, Z+38	; 0x26
    10d6:	57 a1       	ldd	r21, Z+39	; 0x27
    10d8:	84 1b       	sub	r24, r20
    10da:	95 0b       	sbc	r25, r21
    10dc:	60 a5       	ldd	r22, Z+40	; 0x28
    10de:	71 a5       	ldd	r23, Z+41	; 0x29
    10e0:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    10e4:	f9 01       	movw	r30, r18
    10e6:	60 83       	st	Z, r22
    10e8:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Duration = duration;
    10ea:	d5 01       	movw	r26, r10
    10ec:	8d 91       	ld	r24, X+
    10ee:	9c 91       	ld	r25, X
    10f0:	36 96       	adiw	r30, 0x06	; 6
    10f2:	80 83       	st	Z, r24
    10f4:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	f7 01       	movw	r30, r14
    10fa:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    10fc:	d6 01       	movw	r26, r12
    10fe:	ed 91       	ld	r30, X+
    1100:	fc 91       	ld	r31, X
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e8 50       	subi	r30, 0x08	; 8
    1108:	ff 4d       	sbci	r31, 0xDF	; 223
    110a:	40 80       	ld	r4, Z
    110c:	51 80       	ldd	r5, Z+1	; 0x01
    110e:	b1 e0       	ldi	r27, 0x01	; 1
    1110:	4b 1a       	sub	r4, r27
    1112:	51 08       	sbc	r5, r1
		laserDiodeData.lasersettings.Duration = duration;
		
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    1114:	f5 01       	movw	r30, r10
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	29 85       	ldd	r18, Y+9	; 0x09
    111c:	3a 85       	ldd	r19, Y+10	; 0x0a
    111e:	82 1b       	sub	r24, r18
    1120:	93 0b       	sbc	r25, r19
    1122:	b3 01       	movw	r22, r6
    1124:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 c7 1c 	call	0x398e	; 0x398e <_Z3maxjj>
    1130:	b2 01       	movw	r22, r4
    1132:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    1136:	d6 01       	movw	r26, r12
    1138:	4d 91       	ld	r20, X+
    113a:	5c 91       	ld	r21, X
    113c:	6b e0       	ldi	r22, 0x0B	; 11
    113e:	64 9f       	mul	r22, r20
    1140:	90 01       	movw	r18, r0
    1142:	65 9f       	mul	r22, r21
    1144:	30 0d       	add	r19, r0
    1146:	11 24       	eor	r1, r1
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	fc 01       	movw	r30, r24
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	ea 5f       	subi	r30, 0xFA	; 250
    1154:	ff 4d       	sbci	r31, 0xDF	; 223
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	43 2d       	mov	r20, r3
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	f7 01       	movw	r30, r14
    1160:	ba e1       	ldi	r27, 0x1A	; 26
    1162:	3b 9e       	mul	r3, r27
    1164:	e0 0d       	add	r30, r0
    1166:	f1 1d       	adc	r31, r1
    1168:	11 24       	eor	r1, r1
    116a:	84 8b       	std	Z+20, r24	; 0x14
    116c:	95 8b       	std	Z+21, r25	; 0x15
	
	if (energy > pstGUI[mode].m_wMaxEnergy_)
    116e:	f4 01       	movw	r30, r8
    1170:	20 81       	ld	r18, Z
    1172:	31 81       	ldd	r19, Z+1	; 0x01
    1174:	82 17       	cp	r24, r18
    1176:	93 07       	cpc	r25, r19
    1178:	08 f0       	brcs	.+2      	; 0x117c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x2e8>
    117a:	5d c0       	rjmp	.+186    	; 0x1236 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a2>
	{
		energy = pstGUI[mode].m_wMaxEnergy_;
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
		
		// Update energy helpers
		step = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	9e 83       	std	Y+6, r25	; 0x06
		uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    1188:	8a e1       	ldi	r24, 0x1A	; 26
    118a:	84 9f       	mul	r24, r20
    118c:	60 01       	movw	r12, r0
    118e:	85 9f       	mul	r24, r21
    1190:	d0 0c       	add	r13, r0
    1192:	11 24       	eor	r1, r1
    1194:	ce 0c       	add	r12, r14
    1196:	df 1c       	adc	r13, r15
    1198:	d6 01       	movw	r26, r12
    119a:	54 96       	adiw	r26, 0x14	; 20
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	55 97       	sbiw	r26, 0x15	; 21
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    11a6:	90 96       	adiw	r26, 0x20	; 32
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	91 97       	sbiw	r26, 0x21	; 33
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	9a 83       	std	Y+2, r25	; 0x02
		NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    11b2:	08 e0       	ldi	r16, 0x08	; 8
    11b4:	10 e2       	ldi	r17, 0x20	; 32
    11b6:	24 e1       	ldi	r18, 0x14	; 20
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	ae 01       	movw	r20, r28
    11bc:	4b 5f       	subi	r20, 0xFB	; 251
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	be 01       	movw	r22, r28
    11c2:	6d 5f       	subi	r22, 0xFD	; 253
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	ce 01       	movw	r24, r28
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wEnergyOffset = Offset;
    11ce:	29 81       	ldd	r18, Y+1	; 0x01
    11d0:	3a 81       	ldd	r19, Y+2	; 0x02
    11d2:	f6 01       	movw	r30, r12
    11d4:	20 a3       	std	Z+32, r18	; 0x20
    11d6:	31 a3       	std	Z+33, r19	; 0x21
		pstGUI[mode].m_wEnergyStep = step;
    11d8:	6d 81       	ldd	r22, Y+5	; 0x05
    11da:	7e 81       	ldd	r23, Y+6	; 0x06
    11dc:	62 a3       	std	Z+34, r22	; 0x22
    11de:	73 a3       	std	Z+35, r23	; 0x23
		pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    11e0:	84 89       	ldd	r24, Z+20	; 0x14
    11e2:	95 89       	ldd	r25, Z+21	; 0x15
    11e4:	82 1b       	sub	r24, r18
    11e6:	93 0b       	sbc	r25, r19
    11e8:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    11ec:	64 a3       	std	Z+36, r22	; 0x24
    11ee:	75 a3       	std	Z+37, r23	; 0x25
		pstGUI[mode].m_wMinEnergy_ = Offset;
    11f0:	26 8b       	std	Z+22, r18	; 0x16
    11f2:	37 8b       	std	Z+23, r19	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	84 8b       	std	Z+20, r24	; 0x14
    11fa:	95 8b       	std	Z+21, r25	; 0x15
		
		// Update Energy
		laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    11fc:	f7 01       	movw	r30, r14
    11fe:	ea 50       	subi	r30, 0x0A	; 10
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	d4 01       	movw	r26, r8
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	d6 01       	movw	r26, r12
    120a:	82 1b       	sub	r24, r18
    120c:	93 0b       	sbc	r25, r19
    120e:	92 96       	adiw	r26, 0x22	; 34
    1210:	6d 91       	ld	r22, X+
    1212:	7c 91       	ld	r23, X
    1214:	93 97       	sbiw	r26, 0x23	; 35
    1216:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    121a:	60 83       	st	Z, r22
    121c:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Energy = energy;
    121e:	f4 01       	movw	r30, r8
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	f7 01       	movw	r30, r14
    1226:	e4 50       	subi	r30, 0x04	; 4
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 83       	st	Z, r24
    122c:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	d7 01       	movw	r26, r14
    1232:	51 96       	adiw	r26, 0x11	; 17
    1234:	8c 93       	st	X, r24
	}
	
	return update;
    1236:	f7 01       	movw	r30, r14
    1238:	81 89       	ldd	r24, Z+17	; 0x11
    123a:	4b c0       	rjmp	.+150    	; 0x12d2 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x43e>
	}
}

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    123c:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
	}
	
	if (UpdateFreq)
    123e:	81 11       	cpse	r24, r1
    1240:	c3 ce       	rjmp	.-634    	; 0xfc8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x134>
    1242:	27 c0       	rjmp	.+78     	; 0x1292 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3fe>
		laserDiodeData.laserprofile.Frequency = freq;
		update = true;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1244:	d6 01       	movw	r26, r12
    1246:	2d 91       	ld	r18, X+
    1248:	3c 91       	ld	r19, X
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	f9 01       	movw	r30, r18
    1250:	ec 5d       	subi	r30, 0xDC	; 220
    1252:	fe 4d       	sbci	r31, 0xDE	; 222
    1254:	40 81       	ld	r20, Z
    1256:	51 81       	ldd	r21, Z+1	; 0x01
    1258:	49 87       	std	Y+9, r20	; 0x09
    125a:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    125c:	f9 01       	movw	r30, r18
    125e:	e2 5f       	subi	r30, 0xF2	; 242
    1260:	fe 4d       	sbci	r31, 0xDE	; 222
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	8f 83       	std	Y+7, r24	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    126a:	84 1b       	sub	r24, r20
    126c:	95 0b       	sbc	r25, r21
    126e:	f9 01       	movw	r30, r18
    1270:	e8 50       	subi	r30, 0x08	; 8
    1272:	ff 4d       	sbci	r31, 0xDF	; 223
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	61 50       	subi	r22, 0x01	; 1
    127a:	71 09       	sbc	r23, r1
    127c:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    1280:	3b 01       	movw	r6, r22
    1282:	d7 ce       	rjmp	.-594    	; 0x1032 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
		MaxD = 100;	
	}
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    1284:	2f 81       	ldd	r18, Y+7	; 0x07
    1286:	38 85       	ldd	r19, Y+8	; 0x08
    1288:	24 17       	cp	r18, r20
    128a:	35 07       	cpc	r19, r21
    128c:	08 f4       	brcc	.+2      	; 0x1290 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3fc>
    128e:	e1 ce       	rjmp	.-574    	; 0x1052 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1be>
    1290:	35 cf       	rjmp	.-406    	; 0x10fc <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x268>
		laserDiodeData.laserprofile.Frequency = freq;
		update = true;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1292:	f6 01       	movw	r30, r12
    1294:	20 81       	ld	r18, Z
    1296:	31 81       	ldd	r19, Z+1	; 0x01
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	f9 01       	movw	r30, r18
    129e:	ec 5d       	subi	r30, 0xDC	; 220
    12a0:	fe 4d       	sbci	r31, 0xDE	; 222
    12a2:	40 81       	ld	r20, Z
    12a4:	51 81       	ldd	r21, Z+1	; 0x01
    12a6:	49 87       	std	Y+9, r20	; 0x09
    12a8:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    12aa:	f9 01       	movw	r30, r18
    12ac:	e2 5f       	subi	r30, 0xF2	; 242
    12ae:	fe 4d       	sbci	r31, 0xDE	; 222
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	8f 83       	std	Y+7, r24	; 0x07
    12b6:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    12b8:	84 1b       	sub	r24, r20
    12ba:	95 0b       	sbc	r25, r21
    12bc:	f9 01       	movw	r30, r18
    12be:	e8 50       	subi	r30, 0x08	; 8
    12c0:	ff 4d       	sbci	r31, 0xDF	; 223
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	61 50       	subi	r22, 0x01	; 1
    12c8:	71 09       	sbc	r23, r1
    12ca:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    12ce:	3b 01       	movw	r6, r22
    12d0:	b0 ce       	rjmp	.-672    	; 0x1032 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
		
		update = true;
	}
	
	return update;
}
    12d2:	2a 96       	adiw	r28, 0x0a	; 10
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	5f 90       	pop	r5
    12f6:	4f 90       	pop	r4
    12f8:	3f 90       	pop	r3
    12fa:	08 95       	ret

000012fc <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>:

void CLaserControlApp::CalculateDurationSteps(uint16_t &freq, uint16_t &duration)
{
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	00 d0       	rcall	.+0      	; 0x1310 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x14>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x16>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	7c 01       	movw	r14, r24
    1318:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MinD = pstGUI[Profile].m_wMinDuration;
    1322:	d7 01       	movw	r26, r14
    1324:	1e 96       	adiw	r26, 0x0e	; 14
    1326:	8c 91       	ld	r24, X
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 01       	movw	r18, r24
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	0f 2e       	mov	r0, r31
    1332:	fa e1       	ldi	r31, 0x1A	; 26
    1334:	bf 2e       	mov	r11, r31
    1336:	f0 2d       	mov	r31, r0
    1338:	b2 9e       	mul	r11, r18
    133a:	f0 01       	movw	r30, r0
    133c:	b3 9e       	mul	r11, r19
    133e:	f0 0d       	add	r31, r0
    1340:	11 24       	eor	r1, r1
    1342:	ee 0d       	add	r30, r14
    1344:	ff 1d       	adc	r31, r15
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	3c 83       	std	Y+4, r19	; 0x04
	uint16_t MaxD = pstGUI[Profile].m_wMaxDuration;
    134e:	b8 9e       	mul	r11, r24
    1350:	f0 01       	movw	r30, r0
    1352:	b9 9e       	mul	r11, r25
    1354:	f0 0d       	add	r31, r0
    1356:	11 24       	eor	r1, r1
    1358:	ee 0d       	add	r30, r14
    135a:	ff 1d       	adc	r31, r15
    135c:	80 8d       	ldd	r24, Z+24	; 0x18
    135e:	91 8d       	ldd	r25, Z+25	; 0x19
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    1364:	08 e0       	ldi	r16, 0x08	; 8
    1366:	10 e2       	ldi	r17, 0x20	; 32
    1368:	24 e1       	ldi	r18, 0x14	; 20
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	ae 01       	movw	r20, r28
    136e:	4b 5f       	subi	r20, 0xFB	; 251
    1370:	5f 4f       	sbci	r21, 0xFF	; 255
    1372:	be 01       	movw	r22, r28
    1374:	6f 5f       	subi	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	ce 01       	movw	r24, r28
    137a:	03 96       	adiw	r24, 0x03	; 3
    137c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wDurationStep = step;
    1380:	f7 01       	movw	r30, r14
    1382:	86 85       	ldd	r24, Z+14	; 0x0e
    1384:	6d 81       	ldd	r22, Y+5	; 0x05
    1386:	7e 81       	ldd	r23, Y+6	; 0x06
    1388:	b8 9e       	mul	r11, r24
    138a:	e0 0d       	add	r30, r0
    138c:	f1 1d       	adc	r31, r1
    138e:	11 24       	eor	r1, r1
    1390:	60 a7       	std	Z+40, r22	; 0x28
    1392:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[Profile].m_wDurationNumSteps = (MaxD - MinD)/step;
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	82 1b       	sub	r24, r18
    139e:	93 0b       	sbc	r25, r19
    13a0:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    13a4:	62 a7       	std	Z+42, r22	; 0x2a
    13a6:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[Profile].m_wDurationOffset = MinD;
    13a8:	26 a3       	std	Z+38, r18	; 0x26
    13aa:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[Profile].updateDuration = false;
    13ac:	14 a6       	std	Z+44, r1	; 0x2c
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[Profile].m_wDurationOffset) / pstGUI[Profile].m_wDurationStep;
    13ae:	97 01       	movw	r18, r14
    13b0:	2c 50       	subi	r18, 0x0C	; 12
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	d6 01       	movw	r26, r12
    13b6:	8d 91       	ld	r24, X+
    13b8:	9c 91       	ld	r25, X
    13ba:	46 a1       	ldd	r20, Z+38	; 0x26
    13bc:	57 a1       	ldd	r21, Z+39	; 0x27
    13be:	84 1b       	sub	r24, r20
    13c0:	95 0b       	sbc	r25, r21
    13c2:	60 a5       	ldd	r22, Z+40	; 0x28
    13c4:	71 a5       	ldd	r23, Z+41	; 0x29
    13c6:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    13ca:	f9 01       	movw	r30, r18
    13cc:	60 83       	st	Z, r22
    13ce:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Duration = duration;
    13d0:	d6 01       	movw	r26, r12
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	36 96       	adiw	r30, 0x06	; 6
    13d8:	80 83       	st	Z, r24
    13da:	91 83       	std	Z+1, r25	; 0x01
}
    13dc:	26 96       	adiw	r28, 0x06	; 6
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	08 95       	ret

000013f6 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>:

void CLaserControlApp::CalculateEnergySteps(uint16_t &freq, uint16_t &energy)
{
    13f6:	bf 92       	push	r11
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	00 d0       	rcall	.+0      	; 0x140a <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x14>
    140a:	00 d0       	rcall	.+0      	; 0x140c <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x16>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	7c 01       	movw	r14, r24
    1412:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MaxEnergy = pstGUI[Profile].m_wMaxEnergy_;
    141c:	d7 01       	movw	r26, r14
    141e:	1e 96       	adiw	r26, 0x0e	; 14
    1420:	8c 91       	ld	r24, X
    1422:	0f 2e       	mov	r0, r31
    1424:	fa e1       	ldi	r31, 0x1A	; 26
    1426:	bf 2e       	mov	r11, r31
    1428:	f0 2d       	mov	r31, r0
    142a:	f7 01       	movw	r30, r14
    142c:	b8 9e       	mul	r11, r24
    142e:	e0 0d       	add	r30, r0
    1430:	f1 1d       	adc	r31, r1
    1432:	11 24       	eor	r1, r1
    1434:	84 89       	ldd	r24, Z+20	; 0x14
    1436:	95 89       	ldd	r25, Z+21	; 0x15
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t MinEnergy = pstGUI[Profile].m_wMinEnergy_;
    143c:	86 89       	ldd	r24, Z+22	; 0x16
    143e:	97 89       	ldd	r25, Z+23	; 0x17
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinEnergy, MaxEnergy, step, 20, step_table);
    1444:	08 e0       	ldi	r16, 0x08	; 8
    1446:	10 e2       	ldi	r17, 0x20	; 32
    1448:	24 e1       	ldi	r18, 0x14	; 20
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	ae 01       	movw	r20, r28
    144e:	4b 5f       	subi	r20, 0xFB	; 251
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	be 01       	movw	r22, r28
    1454:	6d 5f       	subi	r22, 0xFD	; 253
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	ce 01       	movw	r24, r28
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wEnergyStep = step;
    1460:	f7 01       	movw	r30, r14
    1462:	86 85       	ldd	r24, Z+14	; 0x0e
    1464:	6d 81       	ldd	r22, Y+5	; 0x05
    1466:	7e 81       	ldd	r23, Y+6	; 0x06
    1468:	b8 9e       	mul	r11, r24
    146a:	e0 0d       	add	r30, r0
    146c:	f1 1d       	adc	r31, r1
    146e:	11 24       	eor	r1, r1
    1470:	62 a3       	std	Z+34, r22	; 0x22
    1472:	73 a3       	std	Z+35, r23	; 0x23
	pstGUI[Profile].m_wEnergyNumSteps = (pstGUI[Profile].m_wMaxEnergy_ - MinEnergy)/step;
    1474:	29 81       	ldd	r18, Y+1	; 0x01
    1476:	3a 81       	ldd	r19, Y+2	; 0x02
    1478:	84 89       	ldd	r24, Z+20	; 0x14
    147a:	95 89       	ldd	r25, Z+21	; 0x15
    147c:	82 1b       	sub	r24, r18
    147e:	93 0b       	sbc	r25, r19
    1480:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    1484:	64 a3       	std	Z+36, r22	; 0x24
    1486:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[Profile].m_wEnergyOffset = MinEnergy;
    1488:	20 a3       	std	Z+32, r18	; 0x20
    148a:	31 a3       	std	Z+33, r19	; 0x21
	pstGUI[Profile].updateEnergy = false;
    148c:	15 a6       	std	Z+45, r1	; 0x2d
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[Profile].m_wEnergyOffset) / pstGUI[Profile].m_wEnergyStep;
    148e:	97 01       	movw	r18, r14
    1490:	2a 50       	subi	r18, 0x0A	; 10
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	d6 01       	movw	r26, r12
    1496:	8d 91       	ld	r24, X+
    1498:	9c 91       	ld	r25, X
    149a:	40 a1       	ldd	r20, Z+32	; 0x20
    149c:	51 a1       	ldd	r21, Z+33	; 0x21
    149e:	84 1b       	sub	r24, r20
    14a0:	95 0b       	sbc	r25, r21
    14a2:	62 a1       	ldd	r22, Z+34	; 0x22
    14a4:	73 a1       	ldd	r23, Z+35	; 0x23
    14a6:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    14aa:	f9 01       	movw	r30, r18
    14ac:	60 83       	st	Z, r22
    14ae:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Energy = energy;
    14b0:	d6 01       	movw	r26, r12
    14b2:	8d 91       	ld	r24, X+
    14b4:	9c 91       	ld	r25, X
    14b6:	36 96       	adiw	r30, 0x06	; 6
    14b8:	80 83       	st	Z, r24
    14ba:	91 83       	std	Z+1, r25	; 0x01
}
    14bc:	26 96       	adiw	r28, 0x06	; 6
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	08 95       	ret

000014d6 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>:

void CLaserControlApp::CalculateAllSteps(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	2a 97       	sbiw	r28, 0x0a	; 10
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	7c 01       	movw	r14, r24
    14fc:	8b 01       	movw	r16, r22
    14fe:	6a 01       	movw	r12, r20
	uint16_t MinD = MinDurationTable[freq];
    1500:	db 01       	movw	r26, r22
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	cf 01       	movw	r24, r30
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	dc 01       	movw	r26, r24
    150e:	ac 5d       	subi	r26, 0xDC	; 220
    1510:	be 4d       	sbci	r27, 0xDE	; 222
    1512:	4d 91       	ld	r20, X+
    1514:	5c 91       	ld	r21, X
    1516:	49 87       	std	Y+9, r20	; 0x09
    1518:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    151a:	dc 01       	movw	r26, r24
    151c:	a2 5f       	subi	r26, 0xF2	; 242
    151e:	be 4d       	sbci	r27, 0xDE	; 222
    1520:	8d 91       	ld	r24, X+
    1522:	9c 91       	ld	r25, X
    1524:	8f 83       	std	Y+7, r24	; 0x07
    1526:	98 87       	std	Y+8, r25	; 0x08
	if (mode == PROFILE_MEDIUM)
    1528:	23 30       	cpi	r18, 0x03	; 3
    152a:	d1 f4       	brne	.+52     	; 0x1560 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x8a>
	{
		MinD = 10;
    152c:	8a e0       	ldi	r24, 0x0A	; 10
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	89 87       	std	Y+9, r24	; 0x09
    1532:	9a 87       	std	Y+10, r25	; 0x0a
		MaxD = 100;
    1534:	84 e6       	ldi	r24, 0x64	; 100
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	8f 83       	std	Y+7, r24	; 0x07
    153a:	98 87       	std	Y+8, r25	; 0x08
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	e8 50       	subi	r30, 0x08	; 8
    1542:	ff 4d       	sbci	r31, 0xDF	; 223
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	61 50       	subi	r22, 0x01	; 1
    154a:	71 09       	sbc	r23, r1
    154c:	8a e5       	ldi	r24, 0x5A	; 90
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    1554:	5b 01       	movw	r10, r22
	uint16_t step = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	44 c0       	rjmp	.+136    	; 0x15e8 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x112>
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
		MaxD = 100;
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1560:	49 85       	ldd	r20, Y+9	; 0x09
    1562:	5a 85       	ldd	r21, Y+10	; 0x0a
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e8 50       	subi	r30, 0x08	; 8
    156a:	ff 4d       	sbci	r31, 0xDF	; 223
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
	uint16_t step = 1;
    1570:	e1 e0       	ldi	r30, 0x01	; 1
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	ed 83       	std	Y+5, r30	; 0x05
    1576:	fe 83       	std	Y+6, r31	; 0x06
	
	if (mode == PROFILE_FAST)
    1578:	24 30       	cpi	r18, 0x04	; 4
    157a:	79 f5       	brne	.+94     	; 0x15da <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x104>
	{
		// Update energy helpers
		pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    157c:	f7 01       	movw	r30, r14
    157e:	e8 57       	subi	r30, 0x78	; 120
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    158a:	32 96       	adiw	r30, 0x02	; 2
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	20 83       	st	Z, r18
    1592:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    1594:	32 96       	adiw	r30, 0x02	; 2
    1596:	47 e0       	ldi	r20, 0x07	; 7
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	40 83       	st	Z, r20
    159c:	51 83       	std	Z+1, r21	; 0x01
		pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    159e:	3e 97       	sbiw	r30, 0x0e	; 14
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 12;
    15a4:	32 97       	sbiw	r30, 0x02	; 2
    15a6:	8c e0       	ldi	r24, 0x0C	; 12
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
		
		// Update duration helpers
		pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    15ae:	72 96       	adiw	r30, 0x12	; 18
    15b0:	82 e1       	ldi	r24, 0x12	; 18
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 83       	st	Z, r24
    15b6:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    15b8:	32 96       	adiw	r30, 0x02	; 2
    15ba:	20 83       	st	Z, r18
    15bc:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    15be:	32 96       	adiw	r30, 0x02	; 2
    15c0:	21 e1       	ldi	r18, 0x11	; 17
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	20 83       	st	Z, r18
    15c6:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    15c8:	70 97       	sbiw	r30, 0x10	; 16
    15ca:	80 83       	st	Z, r24
    15cc:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    15ce:	32 97       	sbiw	r30, 0x02	; 2
    15d0:	83 e2       	ldi	r24, 0x23	; 35
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	8e c0       	rjmp	.+284    	; 0x16f6 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x220>
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
		MaxD = 100;
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    15da:	84 1b       	sub	r24, r20
    15dc:	95 0b       	sbc	r25, r21
    15de:	61 50       	subi	r22, 0x01	; 1
    15e0:	71 09       	sbc	r23, r1
    15e2:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    15e6:	5b 01       	movw	r10, r22
    15e8:	72 2e       	mov	r7, r18
    15ea:	48 01       	movw	r8, r16
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
		return;
	}
	
	// Update duration helpers
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    15ec:	08 e0       	ldi	r16, 0x08	; 8
    15ee:	10 e2       	ldi	r17, 0x20	; 32
    15f0:	24 e1       	ldi	r18, 0x14	; 20
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	ae 01       	movw	r20, r28
    15f6:	4b 5f       	subi	r20, 0xFB	; 251
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	be 01       	movw	r22, r28
    15fc:	69 5f       	subi	r22, 0xF9	; 249
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	ce 01       	movw	r24, r28
    1602:	09 96       	adiw	r24, 0x09	; 9
    1604:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wDurationStep = step;
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	ba e1       	ldi	r27, 0x1A	; 26
    160e:	7b 9e       	mul	r7, r27
    1610:	e0 0c       	add	r14, r0
    1612:	f1 1c       	adc	r15, r1
    1614:	11 24       	eor	r1, r1
    1616:	f7 01       	movw	r30, r14
    1618:	60 a7       	std	Z+40, r22	; 0x28
    161a:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    161c:	29 85       	ldd	r18, Y+9	; 0x09
    161e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1620:	8f 81       	ldd	r24, Y+7	; 0x07
    1622:	98 85       	ldd	r25, Y+8	; 0x08
    1624:	82 1b       	sub	r24, r18
    1626:	93 0b       	sbc	r25, r19
    1628:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    162c:	62 a7       	std	Z+42, r22	; 0x2a
    162e:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[mode].m_wDurationOffset = MinD;
    1630:	26 a3       	std	Z+38, r18	; 0x26
    1632:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[mode].updateDuration = false;
    1634:	14 a6       	std	Z+44, r1	; 0x2c
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1636:	d4 01       	movw	r26, r8
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	e8 50       	subi	r30, 0x08	; 8
    1642:	ff 4d       	sbci	r31, 0xDF	; 223
    1644:	00 81       	ld	r16, Z
    1646:	11 81       	ldd	r17, Z+1	; 0x01
    1648:	01 50       	subi	r16, 0x01	; 1
    164a:	11 09       	sbc	r17, r1
	pstGUI[mode].m_wDurationStep = step;
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
	pstGUI[mode].m_wDurationOffset = MinD;
	pstGUI[mode].updateDuration = false;
	
	uint16_t index = (duration - MinD) / Delta;
    164c:	f6 01       	movw	r30, r12
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	82 1b       	sub	r24, r18
    1654:	93 0b       	sbc	r25, r19
    1656:	b5 01       	movw	r22, r10
    1658:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 c7 1c 	call	0x398e	; 0x398e <_Z3maxjj>
    1664:	b8 01       	movw	r22, r16
    1666:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_Z3minjj>
	
	//pstGUI[mode].m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    166a:	d4 01       	movw	r26, r8
    166c:	4d 91       	ld	r20, X+
    166e:	5c 91       	ld	r21, X
    1670:	6b e0       	ldi	r22, 0x0B	; 11
    1672:	64 9f       	mul	r22, r20
    1674:	90 01       	movw	r18, r0
    1676:	65 9f       	mul	r22, r21
    1678:	30 0d       	add	r19, r0
    167a:	11 24       	eor	r1, r1
    167c:	82 0f       	add	r24, r18
    167e:	93 1f       	adc	r25, r19
    1680:	fc 01       	movw	r30, r24
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	ea 5f       	subi	r30, 0xFA	; 250
    1688:	ff 4d       	sbci	r31, 0xDF	; 223
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	f7 01       	movw	r30, r14
    1690:	84 8b       	std	Z+20, r24	; 0x14
    1692:	95 8b       	std	Z+21, r25	; 0x15
	
	// Update energy helpers
	step = 1;
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	2d 83       	std	Y+5, r18	; 0x05
    169a:	3e 83       	std	Y+6, r19	; 0x06
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    169c:	8b 83       	std	Y+3, r24	; 0x03
    169e:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    16a0:	80 a1       	ldd	r24, Z+32	; 0x20
    16a2:	91 a1       	ldd	r25, Z+33	; 0x21
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    16a8:	08 e0       	ldi	r16, 0x08	; 8
    16aa:	10 e2       	ldi	r17, 0x20	; 32
    16ac:	24 e1       	ldi	r18, 0x14	; 20
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	ae 01       	movw	r20, r28
    16b2:	4b 5f       	subi	r20, 0xFB	; 251
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	be 01       	movw	r22, r28
    16b8:	6d 5f       	subi	r22, 0xFD	; 253
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wEnergyOffset = Offset;
    16c4:	29 81       	ldd	r18, Y+1	; 0x01
    16c6:	3a 81       	ldd	r19, Y+2	; 0x02
    16c8:	d7 01       	movw	r26, r14
    16ca:	90 96       	adiw	r26, 0x20	; 32
    16cc:	2d 93       	st	X+, r18
    16ce:	3c 93       	st	X, r19
    16d0:	91 97       	sbiw	r26, 0x21	; 33
	pstGUI[mode].m_wEnergyStep = step;
    16d2:	6d 81       	ldd	r22, Y+5	; 0x05
    16d4:	7e 81       	ldd	r23, Y+6	; 0x06
    16d6:	92 96       	adiw	r26, 0x22	; 34
    16d8:	6d 93       	st	X+, r22
    16da:	7c 93       	st	X, r23
    16dc:	93 97       	sbiw	r26, 0x23	; 35
	pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    16de:	54 96       	adiw	r26, 0x14	; 20
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	55 97       	sbiw	r26, 0x15	; 21
    16e6:	82 1b       	sub	r24, r18
    16e8:	93 0b       	sbc	r25, r19
    16ea:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    16ee:	f7 01       	movw	r30, r14
    16f0:	64 a3       	std	Z+36, r22	; 0x24
    16f2:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[mode].updateEnergy = false;
    16f4:	15 a6       	std	Z+45, r1	; 0x2d
}
    16f6:	2a 96       	adiw	r28, 0x0a	; 10
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	9f 90       	pop	r9
    1712:	8f 90       	pop	r8
    1714:	7f 90       	pop	r7
    1716:	08 95       	ret

00001718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>:
	
	return result;
}

void CLaserControlApp::LaserPreset(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	7c 01       	movw	r14, r24
    1732:	6b 01       	movw	r12, r22
    1734:	ea 01       	movw	r28, r20
    1736:	59 01       	movw	r10, r18
    1738:	10 2f       	mov	r17, r16
	UpdateLimits(freq, duration, energy, mode);
    173a:	d9 01       	movw	r26, r18
    173c:	2d 91       	ld	r18, X+
    173e:	3c 91       	ld	r19, X
    1740:	48 81       	ld	r20, Y
    1742:	59 81       	ldd	r21, Y+1	; 0x01
    1744:	fb 01       	movw	r30, r22
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
	CalculateAllSteps(freq, duration, mode);
    174e:	21 2f       	mov	r18, r17
    1750:	ae 01       	movw	r20, r28
    1752:	b6 01       	movw	r22, r12
    1754:	c7 01       	movw	r24, r14
    1756:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>
	
	m_structLaserProfile[mode].Frequency = freq;
    175a:	81 2e       	mov	r8, r17
    175c:	91 2c       	mov	r9, r1
    175e:	d6 01       	movw	r26, r12
    1760:	2d 91       	ld	r18, X+
    1762:	3c 91       	ld	r19, X
    1764:	f4 01       	movw	r30, r8
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	e8 0d       	add	r30, r8
    176c:	f9 1d       	adc	r31, r9
    176e:	cf 01       	movw	r24, r30
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	f7 01       	movw	r30, r14
    1776:	e8 0f       	add	r30, r24
    1778:	f9 1f       	adc	r31, r25
    177a:	df 01       	movw	r26, r30
    177c:	aa 56       	subi	r26, 0x6A	; 106
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	2d 93       	st	X+, r18
    1782:	3c 93       	st	X, r19
	m_structLaserProfile[mode].EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    1784:	8a e1       	ldi	r24, 0x1A	; 26
    1786:	88 9d       	mul	r24, r8
    1788:	90 01       	movw	r18, r0
    178a:	89 9d       	mul	r24, r9
    178c:	30 0d       	add	r19, r0
    178e:	11 24       	eor	r1, r1
    1790:	2e 0d       	add	r18, r14
    1792:	3f 1d       	adc	r19, r15
    1794:	d5 01       	movw	r26, r10
    1796:	8d 91       	ld	r24, X+
    1798:	9c 91       	ld	r25, X
    179a:	d9 01       	movw	r26, r18
    179c:	90 96       	adiw	r26, 0x20	; 32
    179e:	4d 91       	ld	r20, X+
    17a0:	5c 91       	ld	r21, X
    17a2:	91 97       	sbiw	r26, 0x21	; 33
    17a4:	84 1b       	sub	r24, r20
    17a6:	95 0b       	sbc	r25, r21
    17a8:	92 96       	adiw	r26, 0x22	; 34
    17aa:	6d 91       	ld	r22, X+
    17ac:	7c 91       	ld	r23, X
    17ae:	93 97       	sbiw	r26, 0x23	; 35
    17b0:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    17b4:	df 01       	movw	r26, r30
    17b6:	a6 56       	subi	r26, 0x66	; 102
    17b8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ba:	6d 93       	st	X+, r22
    17bc:	7c 93       	st	X, r23
	m_structLaserProfile[mode].DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    17be:	88 81       	ld	r24, Y
    17c0:	99 81       	ldd	r25, Y+1	; 0x01
    17c2:	d9 01       	movw	r26, r18
    17c4:	96 96       	adiw	r26, 0x26	; 38
    17c6:	4d 91       	ld	r20, X+
    17c8:	5c 91       	ld	r21, X
    17ca:	97 97       	sbiw	r26, 0x27	; 39
    17cc:	84 1b       	sub	r24, r20
    17ce:	95 0b       	sbc	r25, r21
    17d0:	98 96       	adiw	r26, 0x28	; 40
    17d2:	6d 91       	ld	r22, X+
    17d4:	7c 91       	ld	r23, X
    17d6:	99 97       	sbiw	r26, 0x29	; 41
    17d8:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    17dc:	df 01       	movw	r26, r30
    17de:	a8 56       	subi	r26, 0x68	; 104
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	6d 93       	st	X+, r22
    17e4:	7c 93       	st	X, r23
    17e6:	11 97       	sbiw	r26, 0x01	; 1
	m_structLaserSettings[mode].Duration = duration;
    17e8:	88 81       	ld	r24, Y
    17ea:	99 81       	ldd	r25, Y+1	; 0x01
    17ec:	5e 96       	adiw	r26, 0x1e	; 30
    17ee:	8d 93       	st	X+, r24
    17f0:	9c 93       	st	X, r25
	m_structLaserSettings[mode].Energy = energy;
    17f2:	d5 01       	movw	r26, r10
    17f4:	8d 91       	ld	r24, X+
    17f6:	9c 91       	ld	r25, X
    17f8:	df 01       	movw	r26, r30
    17fa:	a8 54       	subi	r26, 0x48	; 72
    17fc:	bf 4f       	sbci	r27, 0xFF	; 255
    17fe:	8d 93       	st	X+, r24
    1800:	9c 93       	st	X, r25
	m_structLaserSettings[mode].FlushesLimit = 4; // deprecated
    1802:	ec 54       	subi	r30, 0x4C	; 76
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
	
	if (mode == PROFILE_FAST)
    180e:	14 30       	cpi	r17, 0x04	; 4
    1810:	69 f4       	brne	.+26     	; 0x182c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM+0x114>
	{
		m_structLaserSettings[mode].FlushesLimit = 0;
    1812:	f4 01       	movw	r30, r8
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	e8 0d       	add	r30, r8
    181a:	f9 1d       	adc	r31, r9
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0d       	add	r30, r14
    1822:	ff 1d       	adc	r31, r15
    1824:	ec 54       	subi	r30, 0x4C	; 76
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	10 82       	st	Z, r1
    182a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	// Set settings to hardware
	uint16_t period = 1000 / freq;											//  period [ms]
    182c:	f6 01       	movw	r30, r12
    182e:	a0 80       	ld	r10, Z
    1830:	b1 80       	ldd	r11, Z+1	; 0x01
    1832:	88 ee       	ldi	r24, 0xE8	; 232
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	b5 01       	movw	r22, r10
    1838:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    183c:	6b 01       	movw	r12, r22
	uint32_t dutycycle = uint32_t(duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    183e:	28 81       	ld	r18, Y
    1840:	39 81       	ldd	r19, Y+1	; 0x01
    1842:	a8 ee       	ldi	r26, 0xE8	; 232
    1844:	b3 e0       	ldi	r27, 0x03	; 3
    1846:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    184a:	96 01       	movw	r18, r12
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    1854:	89 01       	movw	r16, r18
    1856:	9a 01       	movw	r18, r20
	// calculate timer settings
	laserTimerPeriod = (6250 / freq) * 10;
    1858:	8a e6       	ldi	r24, 0x6A	; 106
    185a:	98 e1       	ldi	r25, 0x18	; 24
    185c:	b5 01       	movw	r22, r10
    185e:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    1862:	eb 01       	movw	r28, r22
    1864:	cc 0f       	add	r28, r28
    1866:	dd 1f       	adc	r29, r29
    1868:	66 0f       	add	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	66 0f       	add	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	66 0f       	add	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	c6 0f       	add	r28, r22
    1876:	d7 1f       	adc	r29, r23
    1878:	f7 01       	movw	r30, r14
    187a:	ee 52       	subi	r30, 0x2E	; 46
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	c0 83       	st	Z, r28
    1880:	d1 83       	std	Z+1, r29	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1882:	57 01       	movw	r10, r14
    1884:	f4 ed       	ldi	r31, 0xD4	; 212
    1886:	af 0e       	add	r10, r31
    1888:	b1 1c       	adc	r11, r1
    188a:	de 01       	movw	r26, r28
    188c:	a9 01       	movw	r20, r18
    188e:	98 01       	movw	r18, r16
    1890:	0e 94 29 40 	call	0x8052	; 0x8052 <__muluhisi3>
    1894:	28 ee       	ldi	r18, 0xE8	; 232
    1896:	33 e0       	ldi	r19, 0x03	; 3
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    18a0:	c2 1b       	sub	r28, r18
    18a2:	d3 0b       	sbc	r29, r19
    18a4:	d5 01       	movw	r26, r10
    18a6:	cd 93       	st	X+, r28
    18a8:	dc 93       	st	X, r29
	laserTimerDutyCyclems = period;
    18aa:	f7 01       	movw	r30, r14
    18ac:	ea 52       	subi	r30, 0x2A	; 42
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	c0 82       	st	Z, r12
    18b2:	d1 82       	std	Z+1, r13	; 0x01
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	08 95       	ret

000018ce <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>:
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
	switch (mode)
    18ce:	42 30       	cpi	r20, 0x02	; 2
    18d0:	d9 f0       	breq	.+54     	; 0x1908 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x3a>
    18d2:	18 f4       	brcc	.+6      	; 0x18da <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc>
    18d4:	41 30       	cpi	r20, 0x01	; 1
    18d6:	31 f0       	breq	.+12     	; 0x18e4 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x16>
    18d8:	3e c0       	rjmp	.+124    	; 0x1956 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
    18da:	43 30       	cpi	r20, 0x03	; 3
    18dc:	11 f1       	breq	.+68     	; 0x1922 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x54>
    18de:	44 30       	cpi	r20, 0x04	; 4
    18e0:	69 f1       	breq	.+90     	; 0x193c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x6e>
    18e2:	39 c0       	rjmp	.+114    	; 0x1956 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 af       	std	Z+56, r18	; 0x38
    18ec:	31 af       	std	Z+57, r19	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
    18ee:	26 ab       	std	Z+54, r18	; 0x36
    18f0:	37 ab       	std	Z+55, r19	; 0x37
			if (freq != 1)
    18f2:	fb 01       	movw	r30, r22
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x30>
    18fc:	48 c0       	rjmp	.+144    	; 0x198e <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc0>
			{
				freq = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	08 95       	ret
				UpdateFreq = true;
				}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
    1908:	21 e0       	ldi	r18, 0x01	; 1
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	fc 01       	movw	r30, r24
    190e:	ee 5a       	subi	r30, 0xAE	; 174
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	20 83       	st	Z, r18
    1914:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
    1916:	26 e0       	ldi	r18, 0x06	; 6
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	32 97       	sbiw	r30, 0x02	; 2
    191c:	20 83       	st	Z, r18
    191e:	31 83       	std	Z+1, r19	; 0x01
		break;
    1920:	1c c0       	rjmp	.+56     	; 0x195a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	fc 01       	movw	r30, r24
    1928:	e4 59       	subi	r30, 0x94	; 148
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	20 83       	st	Z, r18
    192e:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
    1930:	23 e0       	ldi	r18, 0x03	; 3
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	32 97       	sbiw	r30, 0x02	; 2
    1936:	20 83       	st	Z, r18
    1938:	31 83       	std	Z+1, r19	; 0x01
		break;
    193a:	0f c0       	rjmp	.+30     	; 0x195a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    193c:	26 e0       	ldi	r18, 0x06	; 6
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	fc 01       	movw	r30, r24
    1942:	ea 57       	subi	r30, 0x7A	; 122
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	20 83       	st	Z, r18
    1948:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    194a:	2a e0       	ldi	r18, 0x0A	; 10
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	32 97       	sbiw	r30, 0x02	; 2
    1950:	20 83       	st	Z, r18
    1952:	31 83       	std	Z+1, r19	; 0x01
		break;
    1954:	02 c0       	rjmp	.+4      	; 0x195a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
	}
	if (mode != PROFILE_SINGLE)
    1956:	41 30       	cpi	r20, 0x01	; 1
    1958:	b1 f0       	breq	.+44     	; 0x1986 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xb8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    195a:	fb 01       	movw	r30, r22
    195c:	20 81       	ld	r18, Z
    195e:	31 81       	ldd	r19, Z+1	; 0x01
    1960:	fc 01       	movw	r30, r24
    1962:	5a e1       	ldi	r21, 0x1A	; 26
    1964:	45 9f       	mul	r20, r21
    1966:	e0 0d       	add	r30, r0
    1968:	f1 1d       	adc	r31, r1
    196a:	11 24       	eor	r1, r1
    196c:	46 8d       	ldd	r20, Z+30	; 0x1e
    196e:	57 8d       	ldd	r21, Z+31	; 0x1f
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    1970:	84 8d       	ldd	r24, Z+28	; 0x1c
    1972:	95 8d       	ldd	r25, Z+29	; 0x1d
    1974:	82 17       	cp	r24, r18
    1976:	93 07       	cpc	r25, r19
    1978:	40 f0       	brcs	.+16     	; 0x198a <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xbc>
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	24 17       	cp	r18, r20
    197e:	35 07       	cpc	r19, r21
    1980:	38 f0       	brcs	.+14     	; 0x1990 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc2>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	08 95       	ret
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    198e:	80 e0       	ldi	r24, 0x00	; 0
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
	}
	
	return UpdateFreq;
}
    1990:	08 95       	ret

00001992 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>:

bool CLaserControlApp::CheckLimitsFastMode(uint16_t &freq, uint16_t &duration, uint16_t &energy)
{
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	fc 01       	movw	r30, r24
    199c:	d9 01       	movw	r26, r18
	pstGUI[PROFILE_FAST].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    199e:	8a 57       	subi	r24, 0x7A	; 122
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	26 e0       	ldi	r18, 0x06	; 6
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	ec 01       	movw	r28, r24
    19a8:	28 83       	st	Y, r18
    19aa:	39 83       	std	Y+1, r19	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    19ac:	02 97       	sbiw	r24, 0x02	; 2
    19ae:	2a e0       	ldi	r18, 0x0A	; 10
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	ec 01       	movw	r28, r24
    19b4:	28 83       	st	Y, r18
    19b6:	39 83       	std	Y+1, r19	; 0x01
	
	if (freq < pstGUI[PROFILE_FAST].m_wMinFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMinFreq;	}
    19b8:	eb 01       	movw	r28, r22
    19ba:	88 81       	ld	r24, Y
    19bc:	99 81       	ldd	r25, Y+1	; 0x01
    19be:	06 97       	sbiw	r24, 0x06	; 6
    19c0:	20 f4       	brcc	.+8      	; 0x19ca <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x38>
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	88 83       	st	Y, r24
    19c8:	99 83       	std	Y+1, r25	; 0x01
	if (freq > pstGUI[PROFILE_FAST].m_wMaxFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMaxFreq;	}
    19ca:	cf 01       	movw	r24, r30
    19cc:	8c 57       	subi	r24, 0x7C	; 124
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	ec 01       	movw	r28, r24
    19d2:	88 81       	ld	r24, Y
    19d4:	99 81       	ldd	r25, Y+1	; 0x01
    19d6:	eb 01       	movw	r28, r22
    19d8:	28 81       	ld	r18, Y
    19da:	39 81       	ldd	r19, Y+1	; 0x01
    19dc:	82 17       	cp	r24, r18
    19de:	93 07       	cpc	r25, r19
    19e0:	10 f4       	brcc	.+4      	; 0x19e6 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x54>
    19e2:	88 83       	st	Y, r24
    19e4:	99 83       	std	Y+1, r25	; 0x01
	
	laserDiodeData.laserprofile.Frequency = freq;
    19e6:	eb 01       	movw	r28, r22
    19e8:	88 81       	ld	r24, Y
    19ea:	99 81       	ldd	r25, Y+1	; 0x01
    19ec:	ef 01       	movw	r28, r30
    19ee:	ce 50       	subi	r28, 0x0E	; 14
    19f0:	df 4f       	sbci	r29, 0xFF	; 255
    19f2:	88 83       	st	Y, r24
    19f4:	99 83       	std	Y+1, r25	; 0x01
	
	if (energy > 13) { energy = 13;  }
    19f6:	8d 91       	ld	r24, X+
    19f8:	9c 91       	ld	r25, X
    19fa:	11 97       	sbiw	r26, 0x01	; 1
    19fc:	8e 30       	cpi	r24, 0x0E	; 14
    19fe:	91 05       	cpc	r25, r1
    1a00:	30 f0       	brcs	.+12     	; 0x1a0e <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x7c>
    1a02:	8d e0       	ldi	r24, 0x0D	; 13
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	8d 93       	st	X+, r24
    1a08:	9c 93       	st	X, r25
    1a0a:	11 97       	sbiw	r26, 0x01	; 1
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
	if (energy <  6) { energy = 6; }
    1a0e:	06 97       	sbiw	r24, 0x06	; 6
    1a10:	28 f4       	brcc	.+10     	; 0x1a1c <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
    1a12:	86 e0       	ldi	r24, 0x06	; 6
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	8d 93       	st	X+, r24
    1a18:	9c 93       	st	X, r25
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update energy helpers
	pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    1a1c:	ef 01       	movw	r28, r30
    1a1e:	c8 57       	subi	r28, 0x78	; 120
    1a20:	df 4f       	sbci	r29, 0xFF	; 255
    1a22:	86 e0       	ldi	r24, 0x06	; 6
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	88 83       	st	Y, r24
    1a28:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    1a2a:	9f 01       	movw	r18, r30
    1a2c:	26 57       	subi	r18, 0x76	; 118
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	01 e0       	ldi	r16, 0x01	; 1
    1a32:	10 e0       	ldi	r17, 0x00	; 0
    1a34:	e9 01       	movw	r28, r18
    1a36:	08 83       	st	Y, r16
    1a38:	19 83       	std	Y+1, r17	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    1a3a:	2e 5f       	subi	r18, 0xFE	; 254
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	67 e0       	ldi	r22, 0x07	; 7
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	e9 01       	movw	r28, r18
    1a44:	68 83       	st	Y, r22
    1a46:	79 83       	std	Y+1, r23	; 0x01
	pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    1a48:	2e 50       	subi	r18, 0x0E	; 14
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	e9 01       	movw	r28, r18
    1a4e:	88 83       	st	Y, r24
    1a50:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 13;
    1a52:	cf 01       	movw	r24, r30
    1a54:	84 58       	subi	r24, 0x84	; 132
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	2d e0       	ldi	r18, 0x0D	; 13
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	ec 01       	movw	r28, r24
    1a5e:	28 83       	st	Y, r18
    1a60:	39 83       	std	Y+1, r19	; 0x01
	
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[PROFILE_FAST].m_wEnergyOffset) / pstGUI[PROFILE_FAST].m_wEnergyStep;
    1a62:	9f 01       	movw	r18, r30
    1a64:	2a 50       	subi	r18, 0x0A	; 10
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	8d 91       	ld	r24, X+
    1a6a:	9c 91       	ld	r25, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	06 97       	sbiw	r24, 0x06	; 6
    1a70:	e9 01       	movw	r28, r18
    1a72:	88 83       	st	Y, r24
    1a74:	99 83       	std	Y+1, r25	; 0x01
	laserDiodeData.lasersettings.Energy = energy;	
    1a76:	2d 91       	ld	r18, X+
    1a78:	3c 91       	ld	r19, X
    1a7a:	11 97       	sbiw	r26, 0x01	; 1
    1a7c:	cf 01       	movw	r24, r30
    1a7e:	84 50       	subi	r24, 0x04	; 4
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	ec 01       	movw	r28, r24
    1a84:	28 83       	st	Y, r18
    1a86:	39 83       	std	Y+1, r19	; 0x01
	
	duration = (energy * 1440) / 500; // Calculate max duration
    1a88:	6d 91       	ld	r22, X+
    1a8a:	7c 91       	ld	r23, X
    1a8c:	80 ea       	ldi	r24, 0xA0	; 160
    1a8e:	95 e0       	ldi	r25, 0x05	; 5
    1a90:	68 9f       	mul	r22, r24
    1a92:	90 01       	movw	r18, r0
    1a94:	69 9f       	mul	r22, r25
    1a96:	30 0d       	add	r19, r0
    1a98:	78 9f       	mul	r23, r24
    1a9a:	30 0d       	add	r19, r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	36 95       	lsr	r19
    1aa0:	27 95       	ror	r18
    1aa2:	36 95       	lsr	r19
    1aa4:	27 95       	ror	r18
    1aa6:	a5 ec       	ldi	r26, 0xC5	; 197
    1aa8:	b0 e2       	ldi	r27, 0x20	; 32
    1aaa:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    1aae:	92 95       	swap	r25
    1ab0:	82 95       	swap	r24
    1ab2:	8f 70       	andi	r24, 0x0F	; 15
    1ab4:	89 27       	eor	r24, r25
    1ab6:	9f 70       	andi	r25, 0x0F	; 15
    1ab8:	89 27       	eor	r24, r25
    1aba:	da 01       	movw	r26, r20
    1abc:	8d 93       	st	X+, r24
    1abe:	9c 93       	st	X, r25
	/*if (duration >= 35) duration = 35;	else
	if (duration >= 24) duration = 24;	else
	if (duration >= 18) duration = 18;*/
	
	// Update duration helpers
	pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    1ac0:	df 01       	movw	r26, r30
    1ac2:	a2 57       	subi	r26, 0x72	; 114
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	82 e1       	ldi	r24, 0x12	; 18
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	8d 93       	st	X+, r24
    1acc:	9c 93       	st	X, r25
    1ace:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	0d 93       	st	X+, r16
    1ad4:	1c 93       	st	X, r17
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    1ad8:	12 96       	adiw	r26, 0x02	; 2
    1ada:	21 e1       	ldi	r18, 0x11	; 17
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	2d 93       	st	X+, r18
    1ae0:	3c 93       	st	X, r19
    1ae2:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    1ae4:	50 97       	sbiw	r26, 0x10	; 16
    1ae6:	8d 93       	st	X+, r24
    1ae8:	9c 93       	st	X, r25
    1aea:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    1aec:	12 97       	sbiw	r26, 0x02	; 2
    1aee:	83 e2       	ldi	r24, 0x23	; 35
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	8d 93       	st	X+, r24
    1af4:	9c 93       	st	X, r25
    1af6:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[PROFILE_FAST].m_wDurationOffset) / pstGUI[PROFILE_FAST].m_wDurationStep;
    1af8:	ac 58       	subi	r26, 0x8C	; 140
    1afa:	bf 4f       	sbci	r27, 0xFF	; 255
    1afc:	ea 01       	movw	r28, r20
    1afe:	88 81       	ld	r24, Y
    1b00:	99 81       	ldd	r25, Y+1	; 0x01
    1b02:	42 97       	sbiw	r24, 0x12	; 18
    1b04:	8d 93       	st	X+, r24
    1b06:	9c 93       	st	X, r25
	laserDiodeData.lasersettings.Duration = duration;
    1b08:	88 81       	ld	r24, Y
    1b0a:	99 81       	ldd	r25, Y+1	; 0x01
    1b0c:	e6 50       	subi	r30, 0x06	; 6
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
	
	return true;
}
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
		update = false;
	}
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    1b20:	4f 92       	push	r4
    1b22:	5f 92       	push	r5
    1b24:	6f 92       	push	r6
    1b26:	7f 92       	push	r7
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	2c 97       	sbiw	r28, 0x0c	; 12
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	6c 01       	movw	r12, r24
    1b48:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    1b4a:	db 01       	movw	r26, r22
    1b4c:	0d 91       	ld	r16, X+
    1b4e:	1c 91       	ld	r17, X
    1b50:	88 ee       	ldi	r24, 0xE8	; 232
    1b52:	93 e0       	ldi	r25, 0x03	; 3
    1b54:	b8 01       	movw	r22, r16
    1b56:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    1b5a:	7b 01       	movw	r14, r22
	uint32_t dutycycle = uint32_t(settings->Duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    1b5c:	22 81       	ldd	r18, Z+2	; 0x02
    1b5e:	33 81       	ldd	r19, Z+3	; 0x03
    1b60:	a8 ee       	ldi	r26, 0xE8	; 232
    1b62:	b3 e0       	ldi	r27, 0x03	; 3
    1b64:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    1b68:	97 01       	movw	r18, r14
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    1b72:	29 01       	movw	r4, r18
    1b74:	3a 01       	movw	r6, r20
	
	// calculate timer settings
	laserTimerPeriod = (6250 / profile->Frequency) * 10;
    1b76:	8a e6       	ldi	r24, 0x6A	; 106
    1b78:	98 e1       	ldi	r25, 0x18	; 24
    1b7a:	b8 01       	movw	r22, r16
    1b7c:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    1b80:	8b 01       	movw	r16, r22
    1b82:	00 0f       	add	r16, r16
    1b84:	11 1f       	adc	r17, r17
    1b86:	ab 01       	movw	r20, r22
    1b88:	44 0f       	add	r20, r20
    1b8a:	55 1f       	adc	r21, r21
    1b8c:	44 0f       	add	r20, r20
    1b8e:	55 1f       	adc	r21, r21
    1b90:	44 0f       	add	r20, r20
    1b92:	55 1f       	adc	r21, r21
    1b94:	04 0f       	add	r16, r20
    1b96:	15 1f       	adc	r17, r21
    1b98:	f6 01       	movw	r30, r12
    1b9a:	ee 52       	subi	r30, 0x2E	; 46
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	00 83       	st	Z, r16
    1ba0:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1ba2:	56 01       	movw	r10, r12
    1ba4:	b4 ed       	ldi	r27, 0xD4	; 212
    1ba6:	ab 0e       	add	r10, r27
    1ba8:	b1 1c       	adc	r11, r1
    1baa:	d8 01       	movw	r26, r16
    1bac:	a3 01       	movw	r20, r6
    1bae:	92 01       	movw	r18, r4
    1bb0:	0e 94 29 40 	call	0x8052	; 0x8052 <__muluhisi3>
    1bb4:	28 ee       	ldi	r18, 0xE8	; 232
    1bb6:	33 e0       	ldi	r19, 0x03	; 3
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    1bc0:	02 1b       	sub	r16, r18
    1bc2:	13 0b       	sbc	r17, r19
    1bc4:	f5 01       	movw	r30, r10
    1bc6:	00 83       	st	Z, r16
    1bc8:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCyclems = period;
    1bca:	32 96       	adiw	r30, 0x02	; 2
    1bcc:	e0 82       	st	Z, r14
    1bce:	f1 82       	std	Z+1, r15	; 0x01
	
	laserTimer.EnableChannel(TIMER_CHANNEL_A);
    1bd0:	60 e1       	ldi	r22, 0x10	; 16
    1bd2:	8c e1       	ldi	r24, 0x1C	; 28
    1bd4:	96 e2       	ldi	r25, 0x26	; 38
    1bd6:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);
    1bda:	60 e2       	ldi	r22, 0x20	; 32
    1bdc:	8c e1       	ldi	r24, 0x1C	; 28
    1bde:	96 e2       	ldi	r25, 0x26	; 38
    1be0:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1be4:	60 e1       	ldi	r22, 0x10	; 16
    1be6:	8c e1       	ldi	r24, 0x1C	; 28
    1be8:	96 e2       	ldi	r25, 0x26	; 38
    1bea:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1bee:	60 e2       	ldi	r22, 0x20	; 32
    1bf0:	8c e1       	ldi	r24, 0x1C	; 28
    1bf2:	96 e2       	ldi	r25, 0x26	; 38
    1bf4:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	return result;
    1bf8:	86 e0       	ldi	r24, 0x06	; 6
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	37 96       	adiw	r30, 0x07	; 7
    1bfe:	de 01       	movw	r26, r28
    1c00:	11 96       	adiw	r26, 0x01	; 1
    1c02:	01 90       	ld	r0, Z+
    1c04:	0d 92       	st	X+, r0
    1c06:	8a 95       	dec	r24
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0xe2>
    1c0a:	29 81       	ldd	r18, Y+1	; 0x01
    1c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0e:	4b 81       	ldd	r20, Y+3	; 0x03
    1c10:	5c 81       	ldd	r21, Y+4	; 0x04
    1c12:	6d 81       	ldd	r22, Y+5	; 0x05
    1c14:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	2c 96       	adiw	r28, 0x0c	; 12
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	cf 90       	pop	r12
    1c30:	bf 90       	pop	r11
    1c32:	af 90       	pop	r10
    1c34:	7f 90       	pop	r7
    1c36:	6f 90       	pop	r6
    1c38:	5f 90       	pop	r5
    1c3a:	4f 90       	pop	r4
    1c3c:	08 95       	ret

00001c3e <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <_ZN16CLaserControlApp13MelaninPresetEj+0xe>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <_ZN16CLaserControlApp13MelaninPresetEj+0x10>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	7c 01       	movw	r14, r24
	uint16_t freq = 3;
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t duration = 65;
    1c5c:	81 e4       	ldi	r24, 0x41	; 65
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	8b 83       	std	Y+3, r24	; 0x03
    1c62:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t energy = 22;
    1c64:	86 e1       	ldi	r24, 0x16	; 22
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
	
	Profile = PROFILE_SLOW;
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	f7 01       	movw	r30, r14
    1c70:	86 87       	std	Z+14, r24	; 0x0e
	laserDiodeData.mode = Profile;
    1c72:	e0 51       	subi	r30, 0x10	; 16
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	80 83       	st	Z, r24
    1c7c:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
    1c7e:	6a 30       	cpi	r22, 0x0A	; 10
    1c80:	71 05       	cpc	r23, r1
    1c82:	70 f4       	brcc	.+28     	; 0x1ca0 <_ZN16CLaserControlApp13MelaninPresetEj+0x62>
	{
		laserDiodeData.phototype = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	74 96       	adiw	r30, 0x14	; 20
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 75; energy = 21;
    1c8e:	8b e4       	ldi	r24, 0x4B	; 75
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	85 e1       	ldi	r24, 0x15	; 21
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	57 c0       	rjmp	.+174    	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 20)
    1ca0:	64 31       	cpi	r22, 0x14	; 20
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	80 f4       	brcc	.+32     	; 0x1cc6 <_ZN16CLaserControlApp13MelaninPresetEj+0x88>
	{
		laserDiodeData.phototype = 2;
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	f7 01       	movw	r30, r14
    1cac:	ec 5f       	subi	r30, 0xFC	; 252
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	80 83       	st	Z, r24
    1cb2:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 70; energy = 23;
    1cb4:	86 e4       	ldi	r24, 0x46	; 70
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	87 e1       	ldi	r24, 0x17	; 23
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	44 c0       	rjmp	.+136    	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 35)
    1cc6:	63 32       	cpi	r22, 0x23	; 35
    1cc8:	71 05       	cpc	r23, r1
    1cca:	80 f4       	brcc	.+32     	; 0x1cec <_ZN16CLaserControlApp13MelaninPresetEj+0xae>
	{
		laserDiodeData.phototype = 3;
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	f7 01       	movw	r30, r14
    1cd2:	ec 5f       	subi	r30, 0xFC	; 252
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 70; energy = 23;
    1cda:	86 e4       	ldi	r24, 0x46	; 70
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	87 e1       	ldi	r24, 0x17	; 23
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	31 c0       	rjmp	.+98     	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 49)
    1cec:	61 33       	cpi	r22, 0x31	; 49
    1cee:	71 05       	cpc	r23, r1
    1cf0:	60 f4       	brcc	.+24     	; 0x1d0a <_ZN16CLaserControlApp13MelaninPresetEj+0xcc>
	{
		laserDiodeData.phototype = 4;
    1cf2:	84 e0       	ldi	r24, 0x04	; 4
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	ec 5f       	subi	r30, 0xFC	; 252
    1cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfc:	80 83       	st	Z, r24
    1cfe:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 65; energy = 21;
    1d00:	85 e1       	ldi	r24, 0x15	; 21
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	22 c0       	rjmp	.+68     	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	if (melanin < 72)
    1d0a:	68 34       	cpi	r22, 0x48	; 72
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	60 f4       	brcc	.+24     	; 0x1d28 <_ZN16CLaserControlApp13MelaninPresetEj+0xea>
	{
		laserDiodeData.phototype = 5;
    1d10:	85 e0       	ldi	r24, 0x05	; 5
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	f7 01       	movw	r30, r14
    1d16:	ec 5f       	subi	r30, 0xFC	; 252
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 100; energy = 22;
    1d1e:	84 e6       	ldi	r24, 0x64	; 100
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	8b 83       	std	Y+3, r24	; 0x03
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <_ZN16CLaserControlApp13MelaninPresetEj+0x110>
	}
	else
	{
		laserDiodeData.phototype = 6;
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	ec 5f       	subi	r30, 0xFC	; 252
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	80 83       	st	Z, r24
    1d34:	91 83       	std	Z+1, r25	; 0x01
		freq = 1; duration = 200; energy = 32;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	8b 83       	std	Y+3, r24	; 0x03
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	LaserPreset(freq, duration, energy, Profile);
    1d4e:	f7 01       	movw	r30, r14
    1d50:	06 85       	ldd	r16, Z+14	; 0x0e
    1d52:	9e 01       	movw	r18, r28
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	ae 01       	movw	r20, r28
    1d5a:	4d 5f       	subi	r20, 0xFD	; 253
    1d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5e:	be 01       	movw	r22, r28
    1d60:	6b 5f       	subi	r22, 0xFB	; 251
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	c7 01       	movw	r24, r14
    1d66:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	update = true;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	81 8b       	std	Z+17, r24	; 0x11
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1d70:	26 85       	ldd	r18, Z+14	; 0x0e
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	87 01       	movw	r16, r14
    1d76:	08 50       	subi	r16, 0x08	; 8
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	b9 01       	movw	r22, r18
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	ab 01       	movw	r20, r22
    1d82:	42 0f       	add	r20, r18
    1d84:	53 1f       	adc	r21, r19
    1d86:	44 0f       	add	r20, r20
    1d88:	55 1f       	adc	r21, r21
    1d8a:	4c 54       	subi	r20, 0x4C	; 76
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8e:	4e 0d       	add	r20, r14
    1d90:	5f 1d       	adc	r21, r15
    1d92:	62 0f       	add	r22, r18
    1d94:	73 1f       	adc	r23, r19
    1d96:	66 0f       	add	r22, r22
    1d98:	77 1f       	adc	r23, r23
    1d9a:	6a 56       	subi	r22, 0x6A	; 106
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	6e 0d       	add	r22, r14
    1da0:	7f 1d       	adc	r23, r15
    1da2:	c7 01       	movw	r24, r14
    1da4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1da8:	f8 01       	movw	r30, r16
    1daa:	20 83       	st	Z, r18
    1dac:	31 83       	std	Z+1, r19	; 0x01
    1dae:	42 83       	std	Z+2, r20	; 0x02
    1db0:	53 83       	std	Z+3, r21	; 0x03
    1db2:	64 83       	std	Z+4, r22	; 0x04
    1db4:	75 83       	std	Z+5, r23	; 0x05
}
    1db6:	26 96       	adiw	r28, 0x06	; 6
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	08 95       	ret

00001dca <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <_ZN16CLaserControlApp15PhototypePresetEj+0xe>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <_ZN16CLaserControlApp15PhototypePresetEj+0x10>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	7c 01       	movw	r14, r24
	uint16_t freq = 3;
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t duration = 65;
    1de8:	81 e4       	ldi	r24, 0x41	; 65
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t energy = 22;
    1df0:	86 e1       	ldi	r24, 0x16	; 22
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	9a 83       	std	Y+2, r25	; 0x02
	
	Profile = PROFILE_SLOW;
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	f7 01       	movw	r30, r14
    1dfc:	86 87       	std	Z+14, r24	; 0x0e
	laserDiodeData.mode = Profile;
    1dfe:	e0 51       	subi	r30, 0x10	; 16
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
    1e0a:	74 96       	adiw	r30, 0x14	; 20
    1e0c:	60 83       	st	Z, r22
    1e0e:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
    1e10:	63 30       	cpi	r22, 0x03	; 3
    1e12:	71 05       	cpc	r23, r1
    1e14:	91 f1       	breq	.+100    	; 0x1e7a <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
    1e16:	38 f4       	brcc	.+14     	; 0x1e26 <_ZN16CLaserControlApp15PhototypePresetEj+0x5c>
    1e18:	61 30       	cpi	r22, 0x01	; 1
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
    1e1e:	62 30       	cpi	r22, 0x02	; 2
    1e20:	71 05       	cpc	r23, r1
    1e22:	d9 f0       	breq	.+54     	; 0x1e5a <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
    1e24:	65 c0       	rjmp	.+202    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
    1e26:	65 30       	cpi	r22, 0x05	; 5
    1e28:	71 05       	cpc	r23, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <_ZN16CLaserControlApp15PhototypePresetEj+0x64>
    1e2c:	42 c0       	rjmp	.+132    	; 0x1eb2 <_ZN16CLaserControlApp15PhototypePresetEj+0xe8>
    1e2e:	a8 f1       	brcs	.+106    	; 0x1e9a <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
    1e30:	66 30       	cpi	r22, 0x06	; 6
    1e32:	71 05       	cpc	r23, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <_ZN16CLaserControlApp15PhototypePresetEj+0x6e>
    1e36:	49 c0       	rjmp	.+146    	; 0x1eca <_ZN16CLaserControlApp15PhototypePresetEj+0x100>
    1e38:	5b c0       	rjmp	.+182    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
    1e3a:	85 e0       	ldi	r24, 0x05	; 5
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	f7 01       	movw	r30, r14
    1e40:	ee 5f       	subi	r30, 0xFE	; 254
    1e42:	fe 4f       	sbci	r31, 0xFE	; 254
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 75; energy = 21;
    1e48:	8b e4       	ldi	r24, 0x4B	; 75
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	85 e1       	ldi	r24, 0x15	; 21
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e58:	4b c0       	rjmp	.+150    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 2:
		{
			laserDiodeData.melanin = 14;
    1e5a:	8e e0       	ldi	r24, 0x0E	; 14
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	f7 01       	movw	r30, r14
    1e60:	ee 5f       	subi	r30, 0xFE	; 254
    1e62:	fe 4f       	sbci	r31, 0xFE	; 254
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 70; energy = 23;
    1e68:	86 e4       	ldi	r24, 0x46	; 70
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	87 e1       	ldi	r24, 0x17	; 23
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e78:	3b c0       	rjmp	.+118    	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 3:
		{
			laserDiodeData.melanin = 27;
    1e7a:	8b e1       	ldi	r24, 0x1B	; 27
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	f7 01       	movw	r30, r14
    1e80:	ee 5f       	subi	r30, 0xFE	; 254
    1e82:	fe 4f       	sbci	r31, 0xFE	; 254
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 70; energy = 23;
    1e88:	86 e4       	ldi	r24, 0x46	; 70
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	87 e1       	ldi	r24, 0x17	; 23
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e98:	2b c0       	rjmp	.+86     	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 4:
		{
			laserDiodeData.melanin = 41;
    1e9a:	89 e2       	ldi	r24, 0x29	; 41
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	ee 5f       	subi	r30, 0xFE	; 254
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	80 83       	st	Z, r24
    1ea6:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 65; energy = 21;
    1ea8:	85 e1       	ldi	r24, 0x15	; 21
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 5:
		{
			laserDiodeData.melanin = 61;
    1eb2:	8d e3       	ldi	r24, 0x3D	; 61
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	ee 5f       	subi	r30, 0xFE	; 254
    1eba:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebc:	80 83       	st	Z, r24
    1ebe:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 100; energy = 22;
    1ec0:	84 e6       	ldi	r24, 0x64	; 100
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
		}
		break;
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <_ZN16CLaserControlApp15PhototypePresetEj+0x126>
		case 6:
		{
			laserDiodeData.melanin = 85;
    1eca:	85 e5       	ldi	r24, 0x55	; 85
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	f7 01       	movw	r30, r14
    1ed0:	ee 5f       	subi	r30, 0xFE	; 254
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed4:	80 83       	st	Z, r24
    1ed6:	91 83       	std	Z+1, r25	; 0x01
			freq = 1; duration = 200; energy = 32;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	9a 83       	std	Y+2, r25	; 0x02
		}
	}
	
	LaserPreset(freq, duration, energy, Profile);
    1ef0:	02 e0       	ldi	r16, 0x02	; 2
    1ef2:	9e 01       	movw	r18, r28
    1ef4:	2f 5f       	subi	r18, 0xFF	; 255
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	ae 01       	movw	r20, r28
    1efa:	4d 5f       	subi	r20, 0xFD	; 253
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	be 01       	movw	r22, r28
    1f00:	6b 5f       	subi	r22, 0xFB	; 251
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	c7 01       	movw	r24, r14
    1f06:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	update = true;	
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	81 8b       	std	Z+17, r24	; 0x11
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1f10:	26 85       	ldd	r18, Z+14	; 0x0e
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	87 01       	movw	r16, r14
    1f16:	08 50       	subi	r16, 0x08	; 8
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	66 0f       	add	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	ab 01       	movw	r20, r22
    1f22:	42 0f       	add	r20, r18
    1f24:	53 1f       	adc	r21, r19
    1f26:	44 0f       	add	r20, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	4c 54       	subi	r20, 0x4C	; 76
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	4e 0d       	add	r20, r14
    1f30:	5f 1d       	adc	r21, r15
    1f32:	62 0f       	add	r22, r18
    1f34:	73 1f       	adc	r23, r19
    1f36:	66 0f       	add	r22, r22
    1f38:	77 1f       	adc	r23, r23
    1f3a:	6a 56       	subi	r22, 0x6A	; 106
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	6e 0d       	add	r22, r14
    1f40:	7f 1d       	adc	r23, r15
    1f42:	c7 01       	movw	r24, r14
    1f44:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1f48:	f8 01       	movw	r30, r16
    1f4a:	20 83       	st	Z, r18
    1f4c:	31 83       	std	Z+1, r19	; 0x01
    1f4e:	42 83       	std	Z+2, r20	; 0x02
    1f50:	53 83       	std	Z+3, r21	; 0x03
    1f52:	64 83       	std	Z+4, r22	; 0x04
    1f54:	75 83       	std	Z+5, r23	; 0x05
}
    1f56:	26 96       	adiw	r28, 0x06	; 6
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	08 95       	ret

00001f6a <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x24>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x26>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	7c 01       	movw	r14, r24
	// GUI class initialization
	m_cpSender = sender;
    1f96:	fc 01       	movw	r30, r24
    1f98:	e8 5d       	subi	r30, 0xD8	; 216
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	60 83       	st	Z, r22
    1f9e:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	17 86       	std	Z+15, r1	; 0x0f
	update = false;
    1fa4:	11 8a       	std	Z+17, r1	; 0x11
	prepare = false;
    1fa6:	12 8a       	std	Z+18, r1	; 0x12
	peltier_en = false;
    1fa8:	13 8a       	std	Z+19, r1	; 0x13
	//isstarted = false;
	m_wSetMin = 2;
    1faa:	4c 01       	movw	r8, r24
    1fac:	f0 ee       	ldi	r31, 0xE0	; 224
    1fae:	8f 1a       	sub	r8, r31
    1fb0:	fe ef       	ldi	r31, 0xFE	; 254
    1fb2:	9f 0a       	sbc	r9, r31
    1fb4:	68 94       	set
    1fb6:	66 24       	eor	r6, r6
    1fb8:	61 f8       	bld	r6, 1
    1fba:	71 2c       	mov	r7, r1
    1fbc:	f4 01       	movw	r30, r8
    1fbe:	60 82       	st	Z, r6
    1fc0:	71 82       	std	Z+1, r7	; 0x01
	m_wSetSec = 10;
    1fc2:	5c 01       	movw	r10, r24
    1fc4:	fe ed       	ldi	r31, 0xDE	; 222
    1fc6:	af 1a       	sub	r10, r31
    1fc8:	fe ef       	ldi	r31, 0xFE	; 254
    1fca:	bf 0a       	sbc	r11, r31
    1fcc:	0f 2e       	mov	r0, r31
    1fce:	fa e0       	ldi	r31, 0x0A	; 10
    1fd0:	cf 2e       	mov	r12, r31
    1fd2:	d1 2c       	mov	r13, r1
    1fd4:	f0 2d       	mov	r31, r0
    1fd6:	f5 01       	movw	r30, r10
    1fd8:	c0 82       	st	Z, r12
    1fda:	d1 82       	std	Z+1, r13	; 0x01
	m_wMillSec = 0;
    1fdc:	34 97       	sbiw	r30, 0x04	; 4
    1fde:	10 82       	st	Z, r1
    1fe0:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    1fe2:	f4 01       	movw	r30, r8
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	36 97       	sbiw	r30, 0x06	; 6
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
	m_wSeconds = m_wSetSec;
    1fee:	f5 01       	movw	r30, r10
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	36 97       	sbiw	r30, 0x06	; 6
    1ff6:	80 83       	st	Z, r24
    1ff8:	91 83       	std	Z+1, r25	; 0x01
	m_wDeadTime = 0;
    1ffa:	3a 96       	adiw	r30, 0x0a	; 10
    1ffc:	10 82       	st	Z, r1
    1ffe:	11 82       	std	Z+1, r1	; 0x01
	
	uint16_t freq = 10;
    2000:	cd 82       	std	Y+5, r12	; 0x05
    2002:	de 82       	std	Y+6, r13	; 0x06
	uint16_t duration = 40;
    2004:	0f 2e       	mov	r0, r31
    2006:	f8 e2       	ldi	r31, 0x28	; 40
    2008:	4f 2e       	mov	r4, r31
    200a:	51 2c       	mov	r5, r1
    200c:	f0 2d       	mov	r31, r0
    200e:	4b 82       	std	Y+3, r4	; 0x03
    2010:	5c 82       	std	Y+4, r5	; 0x04
	uint16_t energy = 14;
    2012:	0f 2e       	mov	r0, r31
    2014:	fe e0       	ldi	r31, 0x0E	; 14
    2016:	2f 2e       	mov	r2, r31
    2018:	31 2c       	mov	r3, r1
    201a:	f0 2d       	mov	r31, r0
    201c:	29 82       	std	Y+1, r2	; 0x01
    201e:	3a 82       	std	Y+2, r3	; 0x02
	
	// Fast profile
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    2020:	04 e0       	ldi	r16, 0x04	; 4
    2022:	9e 01       	movw	r18, r28
    2024:	2f 5f       	subi	r18, 0xFF	; 255
    2026:	3f 4f       	sbci	r19, 0xFF	; 255
    2028:	ae 01       	movw	r20, r28
    202a:	4d 5f       	subi	r20, 0xFD	; 253
    202c:	5f 4f       	sbci	r21, 0xFF	; 255
    202e:	be 01       	movw	r22, r28
    2030:	6b 5f       	subi	r22, 0xFB	; 251
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	c7 01       	movw	r24, r14
    2036:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Medium profile
	freq = 5; duration = 80; energy = 26;
    203a:	85 e0       	ldi	r24, 0x05	; 5
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	80 e5       	ldi	r24, 0x50	; 80
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8a e1       	ldi	r24, 0x1A	; 26
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_MEDIUM);
    2052:	03 e0       	ldi	r16, 0x03	; 3
    2054:	9e 01       	movw	r18, r28
    2056:	2f 5f       	subi	r18, 0xFF	; 255
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	ae 01       	movw	r20, r28
    205c:	4d 5f       	subi	r20, 0xFD	; 253
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	be 01       	movw	r22, r28
    2062:	6b 5f       	subi	r22, 0xFB	; 251
    2064:	7f 4f       	sbci	r23, 0xFF	; 255
    2066:	c7 01       	movw	r24, r14
    2068:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Slow profile
	freq = 2; duration = 120; energy = 36;
    206c:	6d 82       	std	Y+5, r6	; 0x05
    206e:	7e 82       	std	Y+6, r7	; 0x06
    2070:	88 e7       	ldi	r24, 0x78	; 120
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	84 e2       	ldi	r24, 0x24	; 36
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SLOW);
    2080:	02 e0       	ldi	r16, 0x02	; 2
    2082:	9e 01       	movw	r18, r28
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	ae 01       	movw	r20, r28
    208a:	4d 5f       	subi	r20, 0xFD	; 253
    208c:	5f 4f       	sbci	r21, 0xFF	; 255
    208e:	be 01       	movw	r22, r28
    2090:	6b 5f       	subi	r22, 0xFB	; 251
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	c7 01       	movw	r24, r14
    2096:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Single profile
	freq = 1; duration = 100; energy = 38;
    209a:	66 24       	eor	r6, r6
    209c:	63 94       	inc	r6
    209e:	71 2c       	mov	r7, r1
    20a0:	6d 82       	std	Y+5, r6	; 0x05
    20a2:	7e 82       	std	Y+6, r7	; 0x06
    20a4:	84 e6       	ldi	r24, 0x64	; 100
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	86 e2       	ldi	r24, 0x26	; 38
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SINGLE);
    20b4:	01 e0       	ldi	r16, 0x01	; 1
    20b6:	9e 01       	movw	r18, r28
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	ae 01       	movw	r20, r28
    20be:	4d 5f       	subi	r20, 0xFD	; 253
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	be 01       	movw	r22, r28
    20c4:	6b 5f       	subi	r22, 0xFB	; 251
    20c6:	7f 4f       	sbci	r23, 0xFF	; 255
    20c8:	c7 01       	movw	r24, r14
    20ca:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Current profile
	Profile = PROFILE_FAST;
    20ce:	84 e0       	ldi	r24, 0x04	; 4
    20d0:	f7 01       	movw	r30, r14
    20d2:	86 87       	std	Z+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 6a 41 	call	0x82d4	; 0x82d4 <eeprom_read_dword>
    20dc:	f7 01       	movw	r30, r14
    20de:	e6 52       	subi	r30, 0x26	; 38
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 83       	st	Z, r22
    20e4:	71 83       	std	Z+1, r23	; 0x01
    20e6:	82 83       	std	Z+2, r24	; 0x02
    20e8:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    20ea:	76 96       	adiw	r30, 0x16	; 22
    20ec:	24 e0       	ldi	r18, 0x04	; 4
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	20 83       	st	Z, r18
    20f2:	31 83       	std	Z+1, r19	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    20f4:	d7 01       	movw	r26, r14
    20f6:	ae 50       	subi	r26, 0x0E	; 14
    20f8:	bf 4f       	sbci	r27, 0xFF	; 255
    20fa:	e2 54       	subi	r30, 0x42	; 66
    20fc:	f1 09       	sbc	r31, r1
    20fe:	26 e0       	ldi	r18, 0x06	; 6
    2100:	01 90       	ld	r0, Z+
    2102:	0d 92       	st	X+, r0
    2104:	2a 95       	dec	r18
    2106:	e1 f7       	brne	.-8      	; 0x2100 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x196>
	memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[PROFILE_FAST], sizeof(DGUS_LASERSETTINGS));
    2108:	d7 01       	movw	r26, r14
    210a:	a8 50       	subi	r26, 0x08	; 8
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	f7 01       	movw	r30, r14
    2110:	e4 53       	subi	r30, 0x34	; 52
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	26 e0       	ldi	r18, 0x06	; 6
    2116:	01 90       	ld	r0, Z+
    2118:	0d 92       	st	X+, r0
    211a:	2a 95       	dec	r18
    211c:	e1 f7       	brne	.-8      	; 0x2116 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x1ac>
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    211e:	f4 01       	movw	r30, r8
    2120:	20 81       	ld	r18, Z
    2122:	31 81       	ldd	r19, Z+1	; 0x01
    2124:	74 97       	sbiw	r30, 0x14	; 20
    2126:	20 83       	st	Z, r18
    2128:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    212a:	f5 01       	movw	r30, r10
    212c:	20 81       	ld	r18, Z
    212e:	31 81       	ldd	r19, Z+1	; 0x01
    2130:	74 97       	sbiw	r30, 0x14	; 20
    2132:	20 83       	st	Z, r18
    2134:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    2136:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z6swap32m>
    213a:	f7 01       	movw	r30, r14
    213c:	e2 50       	subi	r30, 0x02	; 2
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 83       	st	Z, r22
    2142:	71 83       	std	Z+1, r23	; 0x01
    2144:	82 83       	std	Z+2, r24	; 0x02
    2146:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    2148:	34 96       	adiw	r30, 0x04	; 4
    214a:	10 82       	st	Z, r1
    214c:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    214e:	32 96       	adiw	r30, 0x02	; 2
    2150:	60 82       	st	Z, r6
    2152:	71 82       	std	Z+1, r7	; 0x01
	laserDiodeData.temperature = temperature;
    2154:	32 96       	adiw	r30, 0x02	; 2
    2156:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    215a:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    2162:	32 96       	adiw	r30, 0x02	; 2
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	80 83       	st	Z, r24
    216a:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    216c:	32 96       	adiw	r30, 0x02	; 2
    216e:	10 82       	st	Z, r1
    2170:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    2172:	36 96       	adiw	r30, 0x06	; 6
    2174:	10 82       	st	Z, r1
    2176:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    2178:	32 96       	adiw	r30, 0x02	; 2
    217a:	8d e0       	ldi	r24, 0x0D	; 13
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	80 83       	st	Z, r24
    2180:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    2182:	34 96       	adiw	r30, 0x04	; 4
    2184:	10 82       	st	Z, r1
    2186:	11 82       	std	Z+1, r1	; 0x01
    2188:	12 82       	std	Z+2, r1	; 0x02
    218a:	13 82       	std	Z+3, r1	; 0x03
	
	// Preset hardware to FAST mode
	freq = 10;
    218c:	cd 82       	std	Y+5, r12	; 0x05
    218e:	de 82       	std	Y+6, r13	; 0x06
	duration = 40;
    2190:	4b 82       	std	Y+3, r4	; 0x03
    2192:	5c 82       	std	Y+4, r5	; 0x04
	energy = 14;
    2194:	29 82       	std	Y+1, r2	; 0x01
    2196:	3a 82       	std	Y+2, r3	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    2198:	04 e0       	ldi	r16, 0x04	; 4
    219a:	9e 01       	movw	r18, r28
    219c:	2f 5f       	subi	r18, 0xFF	; 255
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	ae 01       	movw	r20, r28
    21a2:	4d 5f       	subi	r20, 0xFD	; 253
    21a4:	5f 4f       	sbci	r21, 0xFF	; 255
    21a6:	be 01       	movw	r22, r28
    21a8:	6b 5f       	subi	r22, 0xFB	; 251
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	c7 01       	movw	r24, r14
    21ae:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    21b2:	47 e0       	ldi	r20, 0x07	; 7
    21b4:	63 e0       	ldi	r22, 0x03	; 3
    21b6:	8c e1       	ldi	r24, 0x1C	; 28
    21b8:	96 e2       	ldi	r25, 0x26	; 38
    21ba:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    21be:	f7 01       	movw	r30, r14
    21c0:	ee 52       	subi	r30, 0x2E	; 46
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	60 81       	ld	r22, Z
    21c6:	71 81       	ldd	r23, Z+1	; 0x01
    21c8:	8c e1       	ldi	r24, 0x1C	; 28
    21ca:	96 e2       	ldi	r25, 0x26	; 38
    21cc:	0e 94 e5 3d 	call	0x7bca	; 0x7bca <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    21d0:	67 01       	movw	r12, r14
    21d2:	f4 ed       	ldi	r31, 0xD4	; 212
    21d4:	cf 0e       	add	r12, r31
    21d6:	d1 1c       	adc	r13, r1
    21d8:	f6 01       	movw	r30, r12
    21da:	60 81       	ld	r22, Z
    21dc:	71 81       	ldd	r23, Z+1	; 0x01
    21de:	8c e1       	ldi	r24, 0x1C	; 28
    21e0:	96 e2       	ldi	r25, 0x26	; 38
    21e2:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	a7 01       	movw	r20, r14
    21ea:	63 ea       	ldi	r22, 0xA3	; 163
    21ec:	7b e1       	ldi	r23, 0x1B	; 27
    21ee:	8c e1       	ldi	r24, 0x1C	; 28
    21f0:	96 e2       	ldi	r25, 0x26	; 38
    21f2:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    21f6:	21 e0       	ldi	r18, 0x01	; 1
    21f8:	a7 01       	movw	r20, r14
    21fa:	6f e5       	ldi	r22, 0x5F	; 95
    21fc:	74 e0       	ldi	r23, 0x04	; 4
    21fe:	8c e1       	ldi	r24, 0x1C	; 28
    2200:	96 e2       	ldi	r25, 0x26	; 38
    2202:	0e 94 20 3e 	call	0x7c40	; 0x7c40 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    2206:	60 e1       	ldi	r22, 0x10	; 16
    2208:	8c e1       	ldi	r24, 0x1C	; 28
    220a:	96 e2       	ldi	r25, 0x26	; 38
    220c:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    2210:	60 e1       	ldi	r22, 0x10	; 16
    2212:	8c e1       	ldi	r24, 0x1C	; 28
    2214:	96 e2       	ldi	r25, 0x26	; 38
    2216:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    221a:	f6 01       	movw	r30, r12
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	8c e1       	ldi	r24, 0x1C	; 28
    2222:	96 e2       	ldi	r25, 0x26	; 38
    2224:	0e 94 ef 3d 	call	0x7bde	; 0x7bde <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    2228:	60 e2       	ldi	r22, 0x20	; 32
    222a:	8c e1       	ldi	r24, 0x1C	; 28
    222c:	96 e2       	ldi	r25, 0x26	; 38
    222e:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    2232:	60 e2       	ldi	r22, 0x20	; 32
    2234:	8c e1       	ldi	r24, 0x1C	; 28
    2236:	96 e2       	ldi	r25, 0x26	; 38
    2238:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    223c:	26 96       	adiw	r28, 0x06	; 6
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	bf 90       	pop	r11
    2252:	af 90       	pop	r10
    2254:	9f 90       	pop	r9
    2256:	8f 90       	pop	r8
    2258:	7f 90       	pop	r7
    225a:	6f 90       	pop	r6
    225c:	5f 90       	pop	r5
    225e:	4f 90       	pop	r4
    2260:	3f 90       	pop	r3
    2262:	2f 90       	pop	r2
    2264:	08 95       	ret

00002266 <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	ac 97       	sbiw	r28, 0x2c	; 44
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    227e:	83 e0       	ldi	r24, 0x03	; 3
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_Z4swapj>
    2286:	8b a7       	std	Y+43, r24	; 0x2b
    2288:	9c a7       	std	Y+44, r25	; 0x2c
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    228a:	78 01       	movw	r14, r16
    228c:	88 ed       	ldi	r24, 0xD8	; 216
    228e:	e8 1a       	sub	r14, r24
    2290:	8e ef       	ldi	r24, 0xFE	; 254
    2292:	f8 0a       	sbc	r15, r24
    2294:	22 e0       	ldi	r18, 0x02	; 2
    2296:	ae 01       	movw	r20, r28
    2298:	45 5d       	subi	r20, 0xD5	; 213
    229a:	5f 4f       	sbci	r21, 0xFF	; 255
    229c:	63 e0       	ldi	r22, 0x03	; 3
    229e:	f7 01       	movw	r30, r14
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	0e 94 d5 36 	call	0x6daa	; 0x6daa <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    22a8:	f7 01       	movw	r30, r14
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	DGUS_LASERDIODE data;
	memcpy(&data, &laserDiodeData, sizeof(data));
    22b2:	f8 01       	movw	r30, r16
    22b4:	e0 51       	subi	r30, 0x10	; 16
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	8a e2       	ldi	r24, 0x2A	; 42
    22ba:	de 01       	movw	r26, r28
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	01 90       	ld	r0, Z+
    22c0:	0d 92       	st	X+, r0
    22c2:	8a 95       	dec	r24
    22c4:	e1 f7       	brne	.-8      	; 0x22be <_ZN16CLaserControlApp5StartEv+0x58>
	data.lasersettings.Energy = laserDiodeData.lasersettings.Energy + laserDiodeData.lasersettings.Energy / 5;
    22c6:	f8 01       	movw	r30, r16
    22c8:	e4 50       	subi	r30, 0x04	; 4
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	40 81       	ld	r20, Z
    22ce:	51 81       	ldd	r21, Z+1	; 0x01
    22d0:	9a 01       	movw	r18, r20
    22d2:	ad ec       	ldi	r26, 0xCD	; 205
    22d4:	bc ec       	ldi	r27, 0xCC	; 204
    22d6:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    22da:	96 95       	lsr	r25
    22dc:	87 95       	ror	r24
    22de:	96 95       	lsr	r25
    22e0:	87 95       	ror	r24
    22e2:	48 0f       	add	r20, r24
    22e4:	59 1f       	adc	r21, r25
    22e6:	4d 87       	std	Y+13, r20	; 0x0d
    22e8:	5e 87       	std	Y+14, r21	; 0x0e
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&data, sizeof(DGUS_LASERDIODE));
    22ea:	2a e2       	ldi	r18, 0x2A	; 42
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	ae 01       	movw	r20, r28
    22f0:	4f 5f       	subi	r20, 0xFF	; 255
    22f2:	5f 4f       	sbci	r21, 0xFF	; 255
    22f4:	61 e0       	ldi	r22, 0x01	; 1
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	f7 01       	movw	r30, r14
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    2302:	f7 01       	movw	r30, r14
    2304:	80 81       	ld	r24, Z
    2306:	91 81       	ldd	r25, Z+1	; 0x01
    2308:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    230c:	68 ea       	ldi	r22, 0xA8	; 168
    230e:	71 e6       	ldi	r23, 0x61	; 97
    2310:	82 e2       	ldi	r24, 0x22	; 34
    2312:	96 e2       	ldi	r25, 0x26	; 38
    2314:	0e 94 b6 3a 	call	0x756c	; 0x756c <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    2318:	84 e0       	ldi	r24, 0x04	; 4
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	f8 01       	movw	r30, r16
    231e:	84 87       	std	Z+12, r24	; 0x0c
    2320:	95 87       	std	Z+13, r25	; 0x0d
}
    2322:	ac 96       	adiw	r28, 0x2c	; 44
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	ff 90       	pop	r15
    2332:	ef 90       	pop	r14
    2334:	08 95       	ret

00002336 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
	
	return result;
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateMultiPulseLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    2336:	4f 92       	push	r4
    2338:	5f 92       	push	r5
    233a:	6f 92       	push	r6
    233c:	7f 92       	push	r7
    233e:	8f 92       	push	r8
    2340:	9f 92       	push	r9
    2342:	af 92       	push	r10
    2344:	bf 92       	push	r11
    2346:	cf 92       	push	r12
    2348:	df 92       	push	r13
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	2c 97       	sbiw	r28, 0x0c	; 12
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	8c 01       	movw	r16, r24
    2362:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    2364:	db 01       	movw	r26, r22
    2366:	2d 91       	ld	r18, X+
    2368:	3c 91       	ld	r19, X
    236a:	88 ee       	ldi	r24, 0xE8	; 232
    236c:	93 e0       	ldi	r25, 0x03	; 3
    236e:	b9 01       	movw	r22, r18
    2370:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
	uint16_t duration1 = settings->Duration / 2;
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	6c 01       	movw	r12, r24
    237a:	d6 94       	lsr	r13
    237c:	c7 94       	ror	r12
	uint16_t period1;
	uint16_t period2;
	uint16_t period3;
	uint16_t period4;
	
	if (profile->Frequency >= 2)
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	48 f0       	brcs	.+18     	; 0x2396 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x60>
	{
		period3 = period - (settings->Duration - 5);
    2384:	7b 01       	movw	r14, r22
    2386:	e8 1a       	sub	r14, r24
    2388:	f9 0a       	sbc	r15, r25
    238a:	b5 e0       	ldi	r27, 0x05	; 5
    238c:	eb 0e       	add	r14, r27
    238e:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 5;
    2390:	25 e0       	ldi	r18, 0x05	; 5
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	08 c0       	rjmp	.+16     	; 0x23a6 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x70>
		period2 = duration2;
	}
	else
	{
		period3 = period - (settings->Duration - 10);
    2396:	7b 01       	movw	r14, r22
    2398:	e8 1a       	sub	r14, r24
    239a:	f9 0a       	sbc	r15, r25
    239c:	ea e0       	ldi	r30, 0x0A	; 10
    239e:	ee 0e       	add	r14, r30
    23a0:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 10;
    23a2:	2a e0       	ldi	r18, 0x0A	; 10
    23a4:	30 e0       	ldi	r19, 0x00	; 0
		period2 = duration2;
	}
	
	// calculate multi pulse
	laserMultiPulsePeriod[0] = uint32_t(625ul * (uint32_t)period1) / 10ul;
    23a6:	58 01       	movw	r10, r16
    23a8:	f4 ee       	ldi	r31, 0xE4	; 228
    23aa:	af 0e       	add	r10, r31
    23ac:	b1 1c       	adc	r11, r1
    23ae:	a1 e7       	ldi	r26, 0x71	; 113
    23b0:	b2 e0       	ldi	r27, 0x02	; 2
    23b2:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    23b6:	0f 2e       	mov	r0, r31
    23b8:	fa e0       	ldi	r31, 0x0A	; 10
    23ba:	4f 2e       	mov	r4, r31
    23bc:	51 2c       	mov	r5, r1
    23be:	61 2c       	mov	r6, r1
    23c0:	71 2c       	mov	r7, r1
    23c2:	f0 2d       	mov	r31, r0
    23c4:	a3 01       	movw	r20, r6
    23c6:	92 01       	movw	r18, r4
    23c8:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    23cc:	d5 01       	movw	r26, r10
    23ce:	2d 93       	st	X+, r18
    23d0:	3c 93       	st	X, r19
	laserMultiPulsePeriod[1] = uint32_t(625ul * (uint32_t)period2) / 10ul;
    23d2:	96 01       	movw	r18, r12
    23d4:	a1 e7       	ldi	r26, 0x71	; 113
    23d6:	b2 e0       	ldi	r27, 0x02	; 2
    23d8:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    23dc:	a3 01       	movw	r20, r6
    23de:	92 01       	movw	r18, r4
    23e0:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    23e4:	49 01       	movw	r8, r18
    23e6:	5a 01       	movw	r10, r20
    23e8:	f8 01       	movw	r30, r16
    23ea:	ea 51       	subi	r30, 0x1A	; 26
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	20 83       	st	Z, r18
    23f0:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[2] = uint32_t(625ul * (uint32_t)period3) / 10ul;
    23f2:	68 01       	movw	r12, r16
    23f4:	b8 ee       	ldi	r27, 0xE8	; 232
    23f6:	cb 0e       	add	r12, r27
    23f8:	d1 1c       	adc	r13, r1
    23fa:	97 01       	movw	r18, r14
    23fc:	a1 e7       	ldi	r26, 0x71	; 113
    23fe:	b2 e0       	ldi	r27, 0x02	; 2
    2400:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    2404:	a3 01       	movw	r20, r6
    2406:	92 01       	movw	r18, r4
    2408:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    240c:	f6 01       	movw	r30, r12
    240e:	20 83       	st	Z, r18
    2410:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[3] = uint32_t(625ul * (uint32_t)period4) / 10ul;
    2412:	32 96       	adiw	r30, 0x02	; 2
    2414:	80 82       	st	Z, r8
    2416:	91 82       	std	Z+1, r9	; 0x01
	
	laserTimer.DisableChannel(TIMER_CHANNEL_A);
    2418:	60 e1       	ldi	r22, 0x10	; 16
    241a:	8c e1       	ldi	r24, 0x1C	; 28
    241c:	96 e2       	ldi	r25, 0x26	; 38
    241e:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.DisableChannel(TIMER_CHANNEL_B);
    2422:	60 e2       	ldi	r22, 0x20	; 32
    2424:	8c e1       	ldi	r24, 0x1C	; 28
    2426:	96 e2       	ldi	r25, 0x26	; 38
    2428:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	
	return result;
    242c:	86 e0       	ldi	r24, 0x06	; 6
    242e:	fe 01       	movw	r30, r28
    2430:	37 96       	adiw	r30, 0x07	; 7
    2432:	de 01       	movw	r26, r28
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	01 90       	ld	r0, Z+
    2438:	0d 92       	st	X+, r0
    243a:	8a 95       	dec	r24
    243c:	e1 f7       	brne	.-8      	; 0x2436 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x100>
    243e:	29 81       	ldd	r18, Y+1	; 0x01
    2440:	3a 81       	ldd	r19, Y+2	; 0x02
    2442:	4b 81       	ldd	r20, Y+3	; 0x03
    2444:	5c 81       	ldd	r21, Y+4	; 0x04
    2446:	6d 81       	ldd	r22, Y+5	; 0x05
    2448:	7e 81       	ldd	r23, Y+6	; 0x06
}
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	2c 96       	adiw	r28, 0x0c	; 12
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	ff 90       	pop	r15
    245e:	ef 90       	pop	r14
    2460:	df 90       	pop	r13
    2462:	cf 90       	pop	r12
    2464:	bf 90       	pop	r11
    2466:	af 90       	pop	r10
    2468:	9f 90       	pop	r9
    246a:	8f 90       	pop	r8
    246c:	7f 90       	pop	r7
    246e:	6f 90       	pop	r6
    2470:	5f 90       	pop	r5
    2472:	4f 90       	pop	r4
    2474:	08 95       	ret

00002476 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    247c:	fc 01       	movw	r30, r24
    247e:	ea 5d       	subi	r30, 0xDA	; 218
    2480:	fe 4f       	sbci	r31, 0xFE	; 254
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	89 2b       	or	r24, r25
    2488:	29 f0       	breq	.+10     	; 0x2494 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	80 83       	st	Z, r24
    2492:	91 83       	std	Z+1, r25	; 0x01
		
	if (m_wMillSec > 100) m_wMillSec = 0;
    2494:	fe 01       	movw	r30, r28
    2496:	e2 5e       	subi	r30, 0xE2	; 226
    2498:	fe 4f       	sbci	r31, 0xFE	; 254
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	85 36       	cpi	r24, 0x65	; 101
    24a0:	91 05       	cpc	r25, r1
    24a2:	10 f0       	brcs	.+4      	; 0x24a8 <_ZN16CLaserControlApp7OnTimerEv+0x32>
    24a4:	10 82       	st	Z, r1
    24a6:	11 82       	std	Z+1, r1	; 0x01
		
	if (prepare)
    24a8:	8a 89       	ldd	r24, Y+18	; 0x12
    24aa:	88 23       	and	r24, r24
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <_ZN16CLaserControlApp7OnTimerEv+0x3a>
    24ae:	89 c0       	rjmp	.+274    	; 0x25c2 <_ZN16CLaserControlApp7OnTimerEv+0x14c>
	{
		if (m_wMillSec == 0)
    24b0:	fe 01       	movw	r30, r28
    24b2:	e2 5e       	subi	r30, 0xE2	; 226
    24b4:	fe 4f       	sbci	r31, 0xFE	; 254
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	89 2b       	or	r24, r25
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <_ZN16CLaserControlApp7OnTimerEv+0x4a>
    24be:	79 c0       	rjmp	.+242    	; 0x25b2 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
		{			
			if (m_wSeconds == 0)
    24c0:	32 97       	sbiw	r30, 0x02	; 2
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	89 2b       	or	r24, r25
    24c8:	09 f0       	breq	.+2      	; 0x24cc <_ZN16CLaserControlApp7OnTimerEv+0x56>
    24ca:	4c c0       	rjmp	.+152    	; 0x2564 <_ZN16CLaserControlApp7OnTimerEv+0xee>
			{
				if (m_wMinutes == 0)
    24cc:	32 97       	sbiw	r30, 0x02	; 2
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	89 2b       	or	r24, r25
    24d4:	d1 f5       	brne	.+116    	; 0x254a <_ZN16CLaserControlApp7OnTimerEv+0xd4>
				{
					if (state == APP_WORKPREPARE)
    24d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    24d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    24da:	02 97       	sbiw	r24, 0x02	; 2
    24dc:	a1 f5       	brne	.+104    	; 0x2546 <_ZN16CLaserControlApp7OnTimerEv+0xd0>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    24de:	22 e0       	ldi	r18, 0x02	; 2
    24e0:	44 e6       	ldi	r20, 0x64	; 100
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	65 e0       	ldi	r22, 0x05	; 5
    24e6:	71 e0       	ldi	r23, 0x01	; 1
    24e8:	84 ee       	ldi	r24, 0xE4	; 228
    24ea:	95 e2       	ldi	r25, 0x25	; 37
    24ec:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    24f0:	84 ee       	ldi	r24, 0xE4	; 228
    24f2:	95 e2       	ldi	r25, 0x25	; 37
    24f4:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    24f8:	22 e0       	ldi	r18, 0x02	; 2
    24fa:	44 e6       	ldi	r20, 0x64	; 100
    24fc:	50 e0       	ldi	r21, 0x00	; 0
    24fe:	66 e2       	ldi	r22, 0x26	; 38
    2500:	71 e0       	ldi	r23, 0x01	; 1
    2502:	84 ee       	ldi	r24, 0xE4	; 228
    2504:	95 e2       	ldi	r25, 0x25	; 37
    2506:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    250a:	84 ee       	ldi	r24, 0xE4	; 228
    250c:	95 e2       	ldi	r25, 0x25	; 37
    250e:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    2512:	22 e0       	ldi	r18, 0x02	; 2
    2514:	44 e6       	ldi	r20, 0x64	; 100
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	69 e4       	ldi	r22, 0x49	; 73
    251a:	71 e0       	ldi	r23, 0x01	; 1
    251c:	84 ee       	ldi	r24, 0xE4	; 228
    251e:	95 e2       	ldi	r25, 0x25	; 37
    2520:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2524:	84 ee       	ldi	r24, 0xE4	; 228
    2526:	95 e2       	ldi	r25, 0x25	; 37
    2528:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    252c:	22 e0       	ldi	r18, 0x02	; 2
    252e:	44 e6       	ldi	r20, 0x64	; 100
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	6d e5       	ldi	r22, 0x5D	; 93
    2534:	71 e0       	ldi	r23, 0x01	; 1
    2536:	84 ee       	ldi	r24, 0xE4	; 228
    2538:	95 e2       	ldi	r25, 0x25	; 37
    253a:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    253e:	84 ee       	ldi	r24, 0xE4	; 228
    2540:	95 e2       	ldi	r25, 0x25	; 37
    2542:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    2546:	1a 8a       	std	Y+18, r1	; 0x12
    2548:	05 c1       	rjmp	.+522    	; 0x2754 <_ZN16CLaserControlApp7OnTimerEv+0x2de>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    254a:	8c e3       	ldi	r24, 0x3C	; 60
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	fe 01       	movw	r30, r28
    2550:	e4 5e       	subi	r30, 0xE4	; 228
    2552:	fe 4f       	sbci	r31, 0xFE	; 254
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    2558:	32 97       	sbiw	r30, 0x02	; 2
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    2564:	84 e6       	ldi	r24, 0x64	; 100
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	fe 01       	movw	r30, r28
    256a:	e2 5e       	subi	r30, 0xE2	; 226
    256c:	fe 4f       	sbci	r31, 0xFE	; 254
    256e:	80 83       	st	Z, r24
    2570:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    2572:	32 97       	sbiw	r30, 0x02	; 2
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	80 83       	st	Z, r24
    257c:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
    257e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2580:	9d 85       	ldd	r25, Y+13	; 0x0d
    2582:	02 97       	sbiw	r24, 0x02	; 2
    2584:	b1 f4       	brne	.+44     	; 0x25b2 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    2586:	32 97       	sbiw	r30, 0x02	; 2
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	89 2b       	or	r24, r25
    258e:	09 f0       	breq	.+2      	; 0x2592 <_ZN16CLaserControlApp7OnTimerEv+0x11c>
    2590:	9c c0       	rjmp	.+312    	; 0x26ca <_ZN16CLaserControlApp7OnTimerEv+0x254>
    2592:	32 96       	adiw	r30, 0x02	; 2
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	0a 97       	sbiw	r24, 0x0a	; 10
    259a:	08 f4       	brcc	.+2      	; 0x259e <_ZN16CLaserControlApp7OnTimerEv+0x128>
    259c:	a4 c0       	rjmp	.+328    	; 0x26e6 <_ZN16CLaserControlApp7OnTimerEv+0x270>
    259e:	95 c0       	rjmp	.+298    	; 0x26ca <_ZN16CLaserControlApp7OnTimerEv+0x254>
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    25a0:	fe 01       	movw	r30, r28
    25a2:	e4 5e       	subi	r30, 0xE4	; 228
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	05 97       	sbiw	r24, 0x05	; 5
    25ac:	08 f4       	brcc	.+2      	; 0x25b0 <_ZN16CLaserControlApp7OnTimerEv+0x13a>
    25ae:	a4 c0       	rjmp	.+328    	; 0x26f8 <_ZN16CLaserControlApp7OnTimerEv+0x282>
    25b0:	b1 c0       	rjmp	.+354    	; 0x2714 <_ZN16CLaserControlApp7OnTimerEv+0x29e>
					//player.beep(1000, 25);
					}
			}
			// ************************************
		}
		m_wMillSec-=10;
    25b2:	fe 01       	movw	r30, r28
    25b4:	e2 5e       	subi	r30, 0xE2	; 226
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	80 81       	ld	r24, Z
    25ba:	91 81       	ldd	r25, Z+1	; 0x01
    25bc:	0a 97       	sbiw	r24, 0x0a	; 10
    25be:	80 83       	st	Z, r24
    25c0:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (!peltier_en)
    25c2:	8b 89       	ldd	r24, Y+19	; 0x13
    25c4:	81 11       	cpse	r24, r1
    25c6:	4d c0       	rjmp	.+154    	; 0x2662 <_ZN16CLaserControlApp7OnTimerEv+0x1ec>
	{
		if (m_wMillSec >= 70)
    25c8:	fe 01       	movw	r30, r28
    25ca:	e2 5e       	subi	r30, 0xE2	; 226
    25cc:	fe 4f       	sbci	r31, 0xFE	; 254
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	86 34       	cpi	r24, 0x46	; 70
    25d4:	91 05       	cpc	r25, r1
    25d6:	e8 f1       	brcs	.+122    	; 0x2652 <_ZN16CLaserControlApp7OnTimerEv+0x1dc>
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
    25d8:	32 97       	sbiw	r30, 0x02	; 2
    25da:	20 81       	ld	r18, Z
    25dc:	31 81       	ldd	r19, Z+1	; 0x01
    25de:	36 96       	adiw	r30, 0x06	; 6
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	28 17       	cp	r18, r24
    25e6:	39 07       	cpc	r19, r25
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <_ZN16CLaserControlApp7OnTimerEv+0x176>
    25ea:	a2 c0       	rjmp	.+324    	; 0x2730 <_ZN16CLaserControlApp7OnTimerEv+0x2ba>
    25ec:	38 97       	sbiw	r30, 0x08	; 8
    25ee:	20 81       	ld	r18, Z
    25f0:	31 81       	ldd	r19, Z+1	; 0x01
    25f2:	36 96       	adiw	r30, 0x06	; 6
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	28 17       	cp	r18, r24
    25fa:	39 07       	cpc	r19, r25
    25fc:	08 f0       	brcs	.+2      	; 0x2600 <_ZN16CLaserControlApp7OnTimerEv+0x18a>
    25fe:	a1 c0       	rjmp	.+322    	; 0x2742 <_ZN16CLaserControlApp7OnTimerEv+0x2cc>
    2600:	97 c0       	rjmp	.+302    	; 0x2730 <_ZN16CLaserControlApp7OnTimerEv+0x2ba>
				m_wSeconds = m_wSetSec;
			else
			{
				if (m_wSeconds == 60)
				{
					if (m_wMinutes >= m_wSetMin)
    2602:	fe 01       	movw	r30, r28
    2604:	e6 5e       	subi	r30, 0xE6	; 230
    2606:	fe 4f       	sbci	r31, 0xFE	; 254
    2608:	20 81       	ld	r18, Z
    260a:	31 81       	ldd	r19, Z+1	; 0x01
    260c:	36 96       	adiw	r30, 0x06	; 6
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	28 17       	cp	r18, r24
    2614:	39 07       	cpc	r19, r25
    2616:	28 f0       	brcs	.+10     	; 0x2622 <_ZN16CLaserControlApp7OnTimerEv+0x1ac>
						m_wMinutes = m_wSetMin;
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	36 97       	sbiw	r30, 0x06	; 6
    261e:	80 83       	st	Z, r24
    2620:	91 83       	std	Z+1, r25	; 0x01
					m_wSeconds = 0;
    2622:	fe 01       	movw	r30, r28
    2624:	e4 5e       	subi	r30, 0xE4	; 228
    2626:	fe 4f       	sbci	r31, 0xFE	; 254
    2628:	10 82       	st	Z, r1
    262a:	11 82       	std	Z+1, r1	; 0x01
					m_wMinutes++;
    262c:	32 97       	sbiw	r30, 0x02	; 2
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	80 83       	st	Z, r24
    2636:	91 83       	std	Z+1, r25	; 0x01
				}
				m_wSeconds++;
    2638:	fe 01       	movw	r30, r28
    263a:	e4 5e       	subi	r30, 0xE4	; 228
    263c:	fe 4f       	sbci	r31, 0xFE	; 254
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 0; // Every 10 ms
    2648:	fe 01       	movw	r30, r28
    264a:	e2 5e       	subi	r30, 0xE2	; 226
    264c:	fe 4f       	sbci	r31, 0xFE	; 254
    264e:	10 82       	st	Z, r1
    2650:	11 82       	std	Z+1, r1	; 0x01
		}
		m_wMillSec += 10;
    2652:	fe 01       	movw	r30, r28
    2654:	e2 5e       	subi	r30, 0xE2	; 226
    2656:	fe 4f       	sbci	r31, 0xFE	; 254
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	0a 96       	adiw	r24, 0x0a	; 10
    265e:	80 83       	st	Z, r24
    2660:	91 83       	std	Z+1, r25	; 0x01
	}
	
	// Flow sensor
	{
		static uint16_t millsec = 100;
		if (millsec == 0)
    2662:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    2666:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    266a:	89 2b       	or	r24, r25
    266c:	21 f5       	brne	.+72     	; 0x26b6 <_ZN16CLaserControlApp7OnTimerEv+0x240>
		{
			millsec = 100;
    266e:	84 e6       	ldi	r24, 0x64	; 100
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    2676:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
			
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    267a:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    267e:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    2682:	49 e4       	ldi	r20, 0x49	; 73
    2684:	48 9f       	mul	r20, r24
    2686:	90 01       	movw	r18, r0
    2688:	49 9f       	mul	r20, r25
    268a:	30 0d       	add	r19, r0
    268c:	11 24       	eor	r1, r1
    268e:	a5 ec       	ldi	r26, 0xC5	; 197
    2690:	be e4       	ldi	r27, 0x4E	; 78
    2692:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    2696:	96 95       	lsr	r25
    2698:	87 95       	ror	r24
    269a:	92 95       	swap	r25
    269c:	82 95       	swap	r24
    269e:	8f 70       	andi	r24, 0x0F	; 15
    26a0:	89 27       	eor	r24, r25
    26a2:	9f 70       	andi	r25, 0x0F	; 15
    26a4:	89 27       	eor	r24, r25
    26a6:	cc 5d       	subi	r28, 0xDC	; 220
    26a8:	de 4f       	sbci	r29, 0xFE	; 254
    26aa:	88 83       	st	Y, r24
    26ac:	99 83       	std	Y+1, r25	; 0x01
			flowtimer.Reset();
    26ae:	89 e1       	ldi	r24, 0x19	; 25
    26b0:	96 e2       	ldi	r25, 0x26	; 38
    26b2:	0e 94 98 3b 	call	0x7730	; 0x7730 <_ZN8CTimerC15ResetEv>
		}
		millsec-=10;
    26b6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    26ba:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    26be:	0a 97       	sbiw	r24, 0x0a	; 10
    26c0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    26c4:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    26c8:	45 c0       	rjmp	.+138    	; 0x2754 <_ZN16CLaserControlApp7OnTimerEv+0x2de>
						//player.beep(1000, 50);
					}
				}
				else
				{
					player.SoundStart(1000, 25, 2);
    26ca:	22 e0       	ldi	r18, 0x02	; 2
    26cc:	49 e1       	ldi	r20, 0x19	; 25
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	68 ee       	ldi	r22, 0xE8	; 232
    26d2:	73 e0       	ldi	r23, 0x03	; 3
    26d4:	84 ee       	ldi	r24, 0xE4	; 228
    26d6:	95 e2       	ldi	r25, 0x25	; 37
    26d8:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    26dc:	84 ee       	ldi	r24, 0xE4	; 228
    26de:	95 e2       	ldi	r25, 0x25	; 37
    26e0:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
    26e4:	66 cf       	rjmp	.-308    	; 0x25b2 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    26e6:	fe 01       	movw	r30, r28
    26e8:	e6 5e       	subi	r30, 0xE6	; 230
    26ea:	fe 4f       	sbci	r31, 0xFE	; 254
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	89 2b       	or	r24, r25
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <_ZN16CLaserControlApp7OnTimerEv+0x280>
    26f4:	55 cf       	rjmp	.-342    	; 0x25a0 <_ZN16CLaserControlApp7OnTimerEv+0x12a>
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <_ZN16CLaserControlApp7OnTimerEv+0x29e>
					{
						player.SoundStart(1000, 100, 2);
    26f8:	22 e0       	ldi	r18, 0x02	; 2
    26fa:	44 e6       	ldi	r20, 0x64	; 100
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	68 ee       	ldi	r22, 0xE8	; 232
    2700:	73 e0       	ldi	r23, 0x03	; 3
    2702:	84 ee       	ldi	r24, 0xE4	; 228
    2704:	95 e2       	ldi	r25, 0x25	; 37
    2706:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    270a:	84 ee       	ldi	r24, 0xE4	; 228
    270c:	95 e2       	ldi	r25, 0x25	; 37
    270e:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
    2712:	4f cf       	rjmp	.-354    	; 0x25b2 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
						//player.beep(1000, 100);
					}
					else
					{
						player.SoundStart(1000, 50, 2);
    2714:	22 e0       	ldi	r18, 0x02	; 2
    2716:	42 e3       	ldi	r20, 0x32	; 50
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	68 ee       	ldi	r22, 0xE8	; 232
    271c:	73 e0       	ldi	r23, 0x03	; 3
    271e:	84 ee       	ldi	r24, 0xE4	; 228
    2720:	95 e2       	ldi	r25, 0x25	; 37
    2722:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2726:	84 ee       	ldi	r24, 0xE4	; 228
    2728:	95 e2       	ldi	r25, 0x25	; 37
    272a:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
    272e:	41 cf       	rjmp	.-382    	; 0x25b2 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
				m_wSeconds = m_wSetSec;
			else
			{
				if (m_wSeconds == 60)
    2730:	fe 01       	movw	r30, r28
    2732:	e4 5e       	subi	r30, 0xE4	; 228
    2734:	fe 4f       	sbci	r31, 0xFE	; 254
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	cc 97       	sbiw	r24, 0x3c	; 60
    273c:	09 f0       	breq	.+2      	; 0x2740 <_ZN16CLaserControlApp7OnTimerEv+0x2ca>
    273e:	7c cf       	rjmp	.-264    	; 0x2638 <_ZN16CLaserControlApp7OnTimerEv+0x1c2>
    2740:	60 cf       	rjmp	.-320    	; 0x2602 <_ZN16CLaserControlApp7OnTimerEv+0x18c>
	if (!peltier_en)
	{
		if (m_wMillSec >= 70)
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
				m_wSeconds = m_wSetSec;
    2742:	fe 01       	movw	r30, r28
    2744:	ee 5d       	subi	r30, 0xDE	; 222
    2746:	fe 4f       	sbci	r31, 0xFE	; 254
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	36 97       	sbiw	r30, 0x06	; 6
    274e:	80 83       	st	Z, r24
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	7a cf       	rjmp	.-268    	; 0x2648 <_ZN16CLaserControlApp7OnTimerEv+0x1d2>
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
			flowtimer.Reset();
		}
		millsec-=10;
	}
}
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	08 95       	ret

0000275a <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    275a:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN16CLaserControlApp7OnTimerEv>
    275e:	08 95       	ret

00002760 <_ZN16CLaserControlApp9StopLaserEv>:
	}
}

void CLaserControlApp::StopLaser()
{
	laserTimer.Stop();
    2760:	8c e1       	ldi	r24, 0x1C	; 28
    2762:	96 e2       	ldi	r25, 0x26	; 38
    2764:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN7CTimerF4StopEv>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    2768:	60 e1       	ldi	r22, 0x10	; 16
    276a:	8c e1       	ldi	r24, 0x1C	; 28
    276c:	96 e2       	ldi	r25, 0x26	; 38
    276e:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    2772:	60 e2       	ldi	r22, 0x20	; 32
    2774:	8c e1       	ldi	r24, 0x1C	; 28
    2776:	96 e2       	ldi	r25, 0x26	; 38
    2778:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	PORTF.OUTSET = PIN0_bm;
    277c:	e0 ea       	ldi	r30, 0xA0	; 160
    277e:	f6 e0       	ldi	r31, 0x06	; 6
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	85 83       	std	Z+5, r24	; 0x05
	PORTF.OUTSET = PIN1_bm;
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	85 83       	std	Z+5, r24	; 0x05
    2788:	08 95       	ret

0000278a <_ZN16CLaserControlApp3RunEv>:
	uint16_t data = min(uint16_t((uint32_t(laserPower) * 1024ul) / MAX_LASER_POWER) << 2, 4095);  // (laserPower * 640) / 63)
	dacSPI.Send((uint8_t*)&data, sizeof(data));
}

void CLaserControlApp::Run()
{	
    278a:	4f 92       	push	r4
    278c:	5f 92       	push	r5
    278e:	6f 92       	push	r6
    2790:	7f 92       	push	r7
    2792:	8f 92       	push	r8
    2794:	9f 92       	push	r9
    2796:	af 92       	push	r10
    2798:	bf 92       	push	r11
    279a:	cf 92       	push	r12
    279c:	df 92       	push	r13
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	ea 97       	sbiw	r28, 0x3a	; 58
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    27b6:	8c 01       	movw	r16, r24
    27b8:	08 5d       	subi	r16, 0xD8	; 216
    27ba:	1e 4f       	sbci	r17, 0xFE	; 254
    27bc:	42 e0       	ldi	r20, 0x02	; 2
    27be:	63 e0       	ldi	r22, 0x03	; 3
    27c0:	d8 01       	movw	r26, r16
    27c2:	8d 91       	ld	r24, X+
    27c4:	9c 91       	ld	r25, X
    27c6:	0e 94 23 37 	call	0x6e46	; 0x6e46 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    27ca:	f8 01       	movw	r30, r16
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    27d4:	d8 01       	movw	r26, r16
    27d6:	8d 91       	ld	r24, X+
    27d8:	9c 91       	ld	r25, X
    27da:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27de:	bf ef       	ldi	r27, 0xFF	; 255
    27e0:	e9 ef       	ldi	r30, 0xF9	; 249
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	b1 50       	subi	r27, 0x01	; 1
    27e6:	e0 40       	sbci	r30, 0x00	; 0
    27e8:	f0 40       	sbci	r31, 0x00	; 0
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <_ZN16CLaserControlApp3RunEv+0x5a>
    27ec:	00 c0       	rjmp	.+0      	; 0x27ee <_ZN16CLaserControlApp3RunEv+0x64>
    27ee:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    27f0:	d7 01       	movw	r26, r14
    27f2:	1c 96       	adiw	r26, 0x0c	; 12
    27f4:	8d 91       	ld	r24, X+
    27f6:	9c 91       	ld	r25, X
    27f8:	1d 97       	sbiw	r26, 0x0d	; 13
    27fa:	9f 70       	andi	r25, 0x0F	; 15
    27fc:	89 2b       	or	r24, r25
    27fe:	09 f4       	brne	.+2      	; 0x2802 <_ZN16CLaserControlApp3RunEv+0x78>
    2800:	41 c0       	rjmp	.+130    	; 0x2884 <_ZN16CLaserControlApp3RunEv+0xfa>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    2802:	22 e0       	ldi	r18, 0x02	; 2
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	44 eb       	ldi	r20, 0xB4	; 180
    2808:	54 e2       	ldi	r21, 0x24	; 36
    280a:	6c e0       	ldi	r22, 0x0C	; 12
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	c7 01       	movw	r24, r14
    2810:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    2814:	f7 01       	movw	r30, r14
    2816:	ec 5d       	subi	r30, 0xDC	; 220
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	44 97       	sbiw	r24, 0x14	; 20
    2820:	28 f4       	brcc	.+10     	; 0x282c <_ZN16CLaserControlApp3RunEv+0xa2>
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	70 97       	sbiw	r30, 0x10	; 16
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    282c:	f7 01       	movw	r30, r14
    282e:	ec 5d       	subi	r30, 0xDC	; 220
    2830:	fe 4f       	sbci	r31, 0xFE	; 254
    2832:	80 81       	ld	r24, Z
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	44 97       	sbiw	r24, 0x14	; 20
    2838:	28 f0       	brcs	.+10     	; 0x2844 <_ZN16CLaserControlApp3RunEv+0xba>
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	89 97       	sbiw	r24, 0x29	; 41
    2840:	08 f4       	brcc	.+2      	; 0x2844 <_ZN16CLaserControlApp3RunEv+0xba>
    2842:	03 c6       	rjmp	.+3078   	; 0x344a <_ZN16CLaserControlApp3RunEv+0xcc0>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    2844:	f7 01       	movw	r30, r14
    2846:	ec 5d       	subi	r30, 0xDC	; 220
    2848:	fe 4f       	sbci	r31, 0xFE	; 254
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	89 97       	sbiw	r24, 0x29	; 41
    2850:	28 f0       	brcs	.+10     	; 0x285c <_ZN16CLaserControlApp3RunEv+0xd2>
    2852:	83 e0       	ldi	r24, 0x03	; 3
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	70 97       	sbiw	r30, 0x10	; 16
    2858:	80 83       	st	Z, r24
    285a:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    285c:	22 e0       	ldi	r18, 0x02	; 2
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	a7 01       	movw	r20, r14
    2862:	4c 5e       	subi	r20, 0xEC	; 236
    2864:	5e 4f       	sbci	r21, 0xFE	; 254
    2866:	63 e1       	ldi	r22, 0x13	; 19
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	c7 01       	movw	r24, r14
    286c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    2870:	22 e0       	ldi	r18, 0x02	; 2
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	a7 01       	movw	r20, r14
    2876:	4c 5d       	subi	r20, 0xDC	; 220
    2878:	5e 4f       	sbci	r21, 0xFE	; 254
    287a:	6e e0       	ldi	r22, 0x0E	; 14
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	c7 01       	movw	r24, r14
    2880:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    2884:	f7 01       	movw	r30, r14
    2886:	84 85       	ldd	r24, Z+12	; 0x0c
    2888:	95 85       	ldd	r25, Z+13	; 0x0d
    288a:	88 73       	andi	r24, 0x38	; 56
    288c:	99 27       	eor	r25, r25
    288e:	89 2b       	or	r24, r25
    2890:	e1 f0       	breq	.+56     	; 0x28ca <_ZN16CLaserControlApp3RunEv+0x140>
	{
		if (temperature > 300)
    2892:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2896:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    289a:	8d 32       	cpi	r24, 0x2D	; 45
    289c:	91 40       	sbci	r25, 0x01	; 1
    289e:	ac f0       	brlt	.+42     	; 0x28ca <_ZN16CLaserControlApp3RunEv+0x140>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    28a0:	69 e2       	ldi	r22, 0x29	; 41
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	c7 01       	movw	r24, r14
    28a6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    28aa:	d7 01       	movw	r26, r14
    28ac:	1f 96       	adiw	r26, 0x0f	; 15
    28ae:	8c 91       	ld	r24, X
    28b0:	1f 97       	sbiw	r26, 0x0f	; 15
    28b2:	50 96       	adiw	r26, 0x10	; 16
    28b4:	8c 93       	st	X, r24
			
			//if (isstarted)
			{
				StopLaser();
    28b6:	c7 01       	movw	r24, r14
    28b8:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    28bc:	85 ee       	ldi	r24, 0xE5	; 229
    28be:	95 e2       	ldi	r25, 0x25	; 37
    28c0:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_ZN11CLaserBoard13LaserPowerOffEv>
				PIC_ID_last = PICID_WORK_PREPARE;
    28c4:	87 e0       	ldi	r24, 0x07	; 7
    28c6:	f7 01       	movw	r30, r14
    28c8:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	/*if ((state & (APP_WORKPOWERON | APP_WORKLIGHT)) == 0)
		isstarted = false;*/
	
	switch (state)
    28ca:	d7 01       	movw	r26, r14
    28cc:	1c 96       	adiw	r26, 0x0c	; 12
    28ce:	8d 91       	ld	r24, X+
    28d0:	9c 91       	ld	r25, X
    28d2:	1d 97       	sbiw	r26, 0x0d	; 13
    28d4:	81 15       	cp	r24, r1
    28d6:	b2 e0       	ldi	r27, 0x02	; 2
    28d8:	9b 07       	cpc	r25, r27
    28da:	09 f4       	brne	.+2      	; 0x28de <_ZN16CLaserControlApp3RunEv+0x154>
    28dc:	c5 c4       	rjmp	.+2442   	; 0x3268 <_ZN16CLaserControlApp3RunEv+0xade>
    28de:	44 f5       	brge	.+80     	; 0x2930 <_ZN16CLaserControlApp3RunEv+0x1a6>
    28e0:	80 31       	cpi	r24, 0x10	; 16
    28e2:	91 05       	cpc	r25, r1
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <_ZN16CLaserControlApp3RunEv+0x15e>
    28e6:	f6 c3       	rjmp	.+2028   	; 0x30d4 <_ZN16CLaserControlApp3RunEv+0x94a>
    28e8:	8c f4       	brge	.+34     	; 0x290c <_ZN16CLaserControlApp3RunEv+0x182>
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	91 05       	cpc	r25, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <_ZN16CLaserControlApp3RunEv+0x168>
    28f0:	7d c3       	rjmp	.+1786   	; 0x2fec <_ZN16CLaserControlApp3RunEv+0x862>
    28f2:	24 f4       	brge	.+8      	; 0x28fc <_ZN16CLaserControlApp3RunEv+0x172>
    28f4:	89 2b       	or	r24, r25
    28f6:	09 f4       	brne	.+2      	; 0x28fa <_ZN16CLaserControlApp3RunEv+0x170>
    28f8:	4b c0       	rjmp	.+150    	; 0x2990 <_ZN16CLaserControlApp3RunEv+0x206>
    28fa:	75 c5       	rjmp	.+2794   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    28fc:	84 30       	cpi	r24, 0x04	; 4
    28fe:	91 05       	cpc	r25, r1
    2900:	09 f4       	brne	.+2      	; 0x2904 <_ZN16CLaserControlApp3RunEv+0x17a>
    2902:	64 c0       	rjmp	.+200    	; 0x29cc <_ZN16CLaserControlApp3RunEv+0x242>
    2904:	08 97       	sbiw	r24, 0x08	; 8
    2906:	09 f4       	brne	.+2      	; 0x290a <_ZN16CLaserControlApp3RunEv+0x180>
    2908:	d1 c3       	rjmp	.+1954   	; 0x30ac <_ZN16CLaserControlApp3RunEv+0x922>
    290a:	6d c5       	rjmp	.+2778   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    290c:	80 34       	cpi	r24, 0x40	; 64
    290e:	91 05       	cpc	r25, r1
    2910:	09 f4       	brne	.+2      	; 0x2914 <_ZN16CLaserControlApp3RunEv+0x18a>
    2912:	a4 c3       	rjmp	.+1864   	; 0x305c <_ZN16CLaserControlApp3RunEv+0x8d2>
    2914:	24 f4       	brge	.+8      	; 0x291e <_ZN16CLaserControlApp3RunEv+0x194>
    2916:	80 97       	sbiw	r24, 0x20	; 32
    2918:	09 f4       	brne	.+2      	; 0x291c <_ZN16CLaserControlApp3RunEv+0x192>
    291a:	dc c3       	rjmp	.+1976   	; 0x30d4 <_ZN16CLaserControlApp3RunEv+0x94a>
    291c:	64 c5       	rjmp	.+2760   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    291e:	80 38       	cpi	r24, 0x80	; 128
    2920:	91 05       	cpc	r25, r1
    2922:	09 f4       	brne	.+2      	; 0x2926 <_ZN16CLaserControlApp3RunEv+0x19c>
    2924:	42 c0       	rjmp	.+132    	; 0x29aa <_ZN16CLaserControlApp3RunEv+0x220>
    2926:	81 15       	cp	r24, r1
    2928:	91 40       	sbci	r25, 0x01	; 1
    292a:	09 f4       	brne	.+2      	; 0x292e <_ZN16CLaserControlApp3RunEv+0x1a4>
    292c:	69 c4       	rjmp	.+2258   	; 0x3200 <_ZN16CLaserControlApp3RunEv+0xa76>
    292e:	5b c5       	rjmp	.+2742   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    2930:	81 15       	cp	r24, r1
    2932:	27 e0       	ldi	r18, 0x07	; 7
    2934:	92 07       	cpc	r25, r18
    2936:	09 f4       	brne	.+2      	; 0x293a <_ZN16CLaserControlApp3RunEv+0x1b0>
    2938:	3a c4       	rjmp	.+2164   	; 0x31ae <_ZN16CLaserControlApp3RunEv+0xa24>
    293a:	ac f4       	brge	.+42     	; 0x2966 <_ZN16CLaserControlApp3RunEv+0x1dc>
    293c:	81 15       	cp	r24, r1
    293e:	a4 e0       	ldi	r26, 0x04	; 4
    2940:	9a 07       	cpc	r25, r26
    2942:	09 f4       	brne	.+2      	; 0x2946 <_ZN16CLaserControlApp3RunEv+0x1bc>
    2944:	c3 c4       	rjmp	.+2438   	; 0x32cc <_ZN16CLaserControlApp3RunEv+0xb42>
    2946:	2c f4       	brge	.+10     	; 0x2952 <_ZN16CLaserControlApp3RunEv+0x1c8>
    2948:	81 15       	cp	r24, r1
    294a:	93 40       	sbci	r25, 0x03	; 3
    294c:	09 f4       	brne	.+2      	; 0x2950 <_ZN16CLaserControlApp3RunEv+0x1c6>
    294e:	95 c4       	rjmp	.+2346   	; 0x327a <_ZN16CLaserControlApp3RunEv+0xaf0>
    2950:	4a c5       	rjmp	.+2708   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    2952:	81 15       	cp	r24, r1
    2954:	f5 e0       	ldi	r31, 0x05	; 5
    2956:	9f 07       	cpc	r25, r31
    2958:	09 f4       	brne	.+2      	; 0x295c <_ZN16CLaserControlApp3RunEv+0x1d2>
    295a:	43 c4       	rjmp	.+2182   	; 0x31e2 <_ZN16CLaserControlApp3RunEv+0xa58>
    295c:	81 15       	cp	r24, r1
    295e:	96 40       	sbci	r25, 0x06	; 6
    2960:	09 f4       	brne	.+2      	; 0x2964 <_ZN16CLaserControlApp3RunEv+0x1da>
    2962:	13 c4       	rjmp	.+2086   	; 0x318a <_ZN16CLaserControlApp3RunEv+0xa00>
    2964:	40 c5       	rjmp	.+2688   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    2966:	81 15       	cp	r24, r1
    2968:	30 e2       	ldi	r19, 0x20	; 32
    296a:	93 07       	cpc	r25, r19
    296c:	09 f4       	brne	.+2      	; 0x2970 <_ZN16CLaserControlApp3RunEv+0x1e6>
    296e:	ec c4       	rjmp	.+2520   	; 0x3348 <_ZN16CLaserControlApp3RunEv+0xbbe>
    2970:	2c f4       	brge	.+10     	; 0x297c <_ZN16CLaserControlApp3RunEv+0x1f2>
    2972:	81 15       	cp	r24, r1
    2974:	90 41       	sbci	r25, 0x10	; 16
    2976:	09 f4       	brne	.+2      	; 0x297a <_ZN16CLaserControlApp3RunEv+0x1f0>
    2978:	af c4       	rjmp	.+2398   	; 0x32d8 <_ZN16CLaserControlApp3RunEv+0xb4e>
    297a:	35 c5       	rjmp	.+2666   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
    297c:	81 15       	cp	r24, r1
    297e:	e0 e3       	ldi	r30, 0x30	; 48
    2980:	9e 07       	cpc	r25, r30
    2982:	09 f4       	brne	.+2      	; 0x2986 <_ZN16CLaserControlApp3RunEv+0x1fc>
    2984:	0e c5       	rjmp	.+2588   	; 0x33a2 <_ZN16CLaserControlApp3RunEv+0xc18>
    2986:	81 15       	cp	r24, r1
    2988:	90 44       	sbci	r25, 0x40	; 64
    298a:	09 f4       	brne	.+2      	; 0x298e <_ZN16CLaserControlApp3RunEv+0x204>
    298c:	27 c5       	rjmp	.+2638   	; 0x33dc <_ZN16CLaserControlApp3RunEv+0xc52>
    298e:	2b c5       	rjmp	.+2646   	; 0x33e6 <_ZN16CLaserControlApp3RunEv+0xc5c>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    2990:	63 e0       	ldi	r22, 0x03	; 3
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	c7 01       	movw	r24, r14
    2996:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	d7 01       	movw	r26, r14
    29a0:	1c 96       	adiw	r26, 0x0c	; 12
    29a2:	8d 93       	st	X+, r24
    29a4:	9c 93       	st	X, r25
    29a6:	1d 97       	sbiw	r26, 0x0d	; 13
			}
		break;
    29a8:	22 c5       	rjmp	.+2628   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_MENU:
			{
				prepare = false;
    29aa:	f7 01       	movw	r30, r14
    29ac:	12 8a       	std	Z+18, r1	; 0x12
				StopLaser();
    29ae:	c7 01       	movw	r24, r14
    29b0:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    29b4:	85 ee       	ldi	r24, 0xE5	; 229
    29b6:	95 e2       	ldi	r25, 0x25	; 37
    29b8:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    29bc:	d7 01       	movw	r26, r14
    29be:	53 96       	adiw	r26, 0x13	; 19
    29c0:	1c 92       	st	X, r1
				laserBoard.PWMOn(); // Cooling off
    29c2:	85 ee       	ldi	r24, 0xE5	; 229
    29c4:	95 e2       	ldi	r25, 0x25	; 37
    29c6:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN11CLaserBoard5PWMOnEv>
			}
		break;
    29ca:	11 c5       	rjmp	.+2594   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKSETUP:
			{
				prepare = false;
    29cc:	f7 01       	movw	r30, r14
    29ce:	12 8a       	std	Z+18, r1	; 0x12
				StopLaser();
    29d0:	c7 01       	movw	r24, r14
    29d2:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
				//pwmtimer.Stop();
				peltier_en = false;
    29d6:	d7 01       	movw	r26, r14
    29d8:	53 96       	adiw	r26, 0x13	; 19
    29da:	1c 92       	st	X, r1
				laserBoard.PWMOn(); // Cooling off
    29dc:	85 ee       	ldi	r24, 0xE5	; 229
    29de:	95 e2       	ldi	r25, 0x25	; 37
    29e0:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN11CLaserBoard5PWMOnEv>
				
				uint16_t melanin     = laserDiodeData.melanin;
    29e4:	f7 01       	movw	r30, r14
    29e6:	ee 5f       	subi	r30, 0xFE	; 254
    29e8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ea:	80 80       	ld	r8, Z
    29ec:	91 80       	ldd	r9, Z+1	; 0x01
				uint16_t phototype   = laserDiodeData.phototype;
    29ee:	32 96       	adiw	r30, 0x02	; 2
    29f0:	a0 80       	ld	r10, Z
    29f2:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t freq        = laserDiodeData.laserprofile.Frequency;
    29f4:	72 97       	sbiw	r30, 0x12	; 18
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	89 af       	std	Y+57, r24	; 0x39
    29fc:	9a af       	std	Y+58, r25	; 0x3a
				uint16_t durationCnt = laserDiodeData.laserprofile.DurationCnt;
    29fe:	32 96       	adiw	r30, 0x02	; 2
    2a00:	60 80       	ld	r6, Z
    2a02:	71 80       	ldd	r7, Z+1	; 0x01
				uint16_t energyCnt   = laserDiodeData.laserprofile.EnergyCnt;
    2a04:	32 96       	adiw	r30, 0x02	; 2
    2a06:	40 80       	ld	r4, Z
    2a08:	51 80       	ldd	r5, Z+1	; 0x01
				uint16_t flushesLimit	= laserDiodeData.lasersettings.FlushesLimit;
    2a0a:	87 01       	movw	r16, r14
    2a0c:	08 50       	subi	r16, 0x08	; 8
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	f8 01       	movw	r30, r16
    2a12:	c0 80       	ld	r12, Z
    2a14:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    2a16:	46 e0       	ldi	r20, 0x06	; 6
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	62 e0       	ldi	r22, 0x02	; 2
    2a1c:	70 e0       	ldi	r23, 0x00	; 0
    2a1e:	c7 01       	movw	r24, r14
    2a20:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a24:	ff ef       	ldi	r31, 0xFF	; 255
    2a26:	29 ef       	ldi	r18, 0xF9	; 249
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	f1 50       	subi	r31, 0x01	; 1
    2a2c:	20 40       	sbci	r18, 0x00	; 0
    2a2e:	30 40       	sbci	r19, 0x00	; 0
    2a30:	e1 f7       	brne	.-8      	; 0x2a2a <_ZN16CLaserControlApp3RunEv+0x2a0>
    2a32:	00 c0       	rjmp	.+0      	; 0x2a34 <_ZN16CLaserControlApp3RunEv+0x2aa>
    2a34:	00 00       	nop
				_delay_ms(10);
				GetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, sizeof(DGUS_LASERSETTINGS));
    2a36:	46 e0       	ldi	r20, 0x06	; 6
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	65 e0       	ldi	r22, 0x05	; 5
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	c7 01       	movw	r24, r14
    2a40:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a44:	8f ef       	ldi	r24, 0xFF	; 255
    2a46:	99 ef       	ldi	r25, 0xF9	; 249
    2a48:	a0 e0       	ldi	r26, 0x00	; 0
    2a4a:	81 50       	subi	r24, 0x01	; 1
    2a4c:	90 40       	sbci	r25, 0x00	; 0
    2a4e:	a0 40       	sbci	r26, 0x00	; 0
    2a50:	e1 f7       	brne	.-8      	; 0x2a4a <_ZN16CLaserControlApp3RunEv+0x2c0>
    2a52:	00 c0       	rjmp	.+0      	; 0x2a54 <_ZN16CLaserControlApp3RunEv+0x2ca>
    2a54:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    2a56:	42 e0       	ldi	r20, 0x02	; 2
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	6d e0       	ldi	r22, 0x0D	; 13
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	c7 01       	movw	r24, r14
    2a60:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a64:	bf ef       	ldi	r27, 0xFF	; 255
    2a66:	e9 ef       	ldi	r30, 0xF9	; 249
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	b1 50       	subi	r27, 0x01	; 1
    2a6c:	e0 40       	sbci	r30, 0x00	; 0
    2a6e:	f0 40       	sbci	r31, 0x00	; 0
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <_ZN16CLaserControlApp3RunEv+0x2e0>
    2a72:	00 c0       	rjmp	.+0      	; 0x2a74 <_ZN16CLaserControlApp3RunEv+0x2ea>
    2a74:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    2a76:	42 e0       	ldi	r20, 0x02	; 2
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	c7 01       	movw	r24, r14
    2a80:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2a84:	2f ef       	ldi	r18, 0xFF	; 255
    2a86:	39 ef       	ldi	r19, 0xF9	; 249
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	21 50       	subi	r18, 0x01	; 1
    2a8c:	30 40       	sbci	r19, 0x00	; 0
    2a8e:	80 40       	sbci	r24, 0x00	; 0
    2a90:	e1 f7       	brne	.-8      	; 0x2a8a <_ZN16CLaserControlApp3RunEv+0x300>
    2a92:	00 c0       	rjmp	.+0      	; 0x2a94 <_ZN16CLaserControlApp3RunEv+0x30a>
    2a94:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    2a96:	42 e0       	ldi	r20, 0x02	; 2
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	6a e0       	ldi	r22, 0x0A	; 10
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	c7 01       	movw	r24, r14
    2aa0:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2aa4:	9f ef       	ldi	r25, 0xFF	; 255
    2aa6:	a9 ef       	ldi	r26, 0xF9	; 249
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	91 50       	subi	r25, 0x01	; 1
    2aac:	a0 40       	sbci	r26, 0x00	; 0
    2aae:	b0 40       	sbci	r27, 0x00	; 0
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <_ZN16CLaserControlApp3RunEv+0x320>
    2ab2:	00 c0       	rjmp	.+0      	; 0x2ab4 <_ZN16CLaserControlApp3RunEv+0x32a>
    2ab4:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    2ab6:	42 e0       	ldi	r20, 0x02	; 2
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	6b e0       	ldi	r22, 0x0B	; 11
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	c7 01       	movw	r24, r14
    2ac0:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    2ac4:	ef ef       	ldi	r30, 0xFF	; 255
    2ac6:	f9 ef       	ldi	r31, 0xF9	; 249
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	e1 50       	subi	r30, 0x01	; 1
    2acc:	f0 40       	sbci	r31, 0x00	; 0
    2ace:	20 40       	sbci	r18, 0x00	; 0
    2ad0:	e1 f7       	brne	.-8      	; 0x2aca <_ZN16CLaserControlApp3RunEv+0x340>
    2ad2:	00 c0       	rjmp	.+0      	; 0x2ad4 <_ZN16CLaserControlApp3RunEv+0x34a>
    2ad4:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    2ad6:	f7 01       	movw	r30, r14
    2ad8:	e6 52       	subi	r30, 0x26	; 38
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z6swap32m>
    2ae8:	f7 01       	movw	r30, r14
    2aea:	e2 50       	subi	r30, 0x02	; 2
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 83       	st	Z, r22
    2af0:	71 83       	std	Z+1, r23	; 0x01
    2af2:	82 83       	std	Z+2, r24	; 0x02
    2af4:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature  = temperature;
    2af6:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2afa:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2afe:	38 96       	adiw	r30, 0x08	; 8
    2b00:	80 83       	st	Z, r24
    2b02:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow         = m_wFlow;
    2b04:	7e 96       	adiw	r30, 0x1e	; 30
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	7a 97       	sbiw	r30, 0x1a	; 26
    2b0c:	80 83       	st	Z, r24
    2b0e:	91 83       	std	Z+1, r25	; 0x01
				
				if (flushesLimit != laserDiodeData.lasersettings.FlushesLimit)
    2b10:	d8 01       	movw	r26, r16
    2b12:	8d 91       	ld	r24, X+
    2b14:	9c 91       	ld	r25, X
    2b16:	8c 15       	cp	r24, r12
    2b18:	9d 05       	cpc	r25, r13
    2b1a:	21 f1       	breq	.+72     	; 0x2b64 <_ZN16CLaserControlApp3RunEv+0x3da>
				{	
					if ((laserDiodeData.lasersettings.FlushesLimit != 4) && (Profile != PROFILE_FAST))
    2b1c:	84 30       	cpi	r24, 0x04	; 4
    2b1e:	91 05       	cpc	r25, r1
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <_ZN16CLaserControlApp3RunEv+0x39a>
    2b22:	9f c4       	rjmp	.+2366   	; 0x3462 <_ZN16CLaserControlApp3RunEv+0xcd8>
    2b24:	f7 01       	movw	r30, r14
    2b26:	26 85       	ldd	r18, Z+14	; 0x0e
    2b28:	24 30       	cpi	r18, 0x04	; 4
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <_ZN16CLaserControlApp3RunEv+0x3a4>
    2b2c:	96 c4       	rjmp	.+2348   	; 0x345a <_ZN16CLaserControlApp3RunEv+0xcd0>
					{
						laserDiodeData.lasersettings.FlushesLimit = 4;
    2b2e:	84 e0       	ldi	r24, 0x04	; 4
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	f8 01       	movw	r30, r16
    2b34:	80 83       	st	Z, r24
    2b36:	91 83       	std	Z+1, r25	; 0x01
						update = true;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	d7 01       	movw	r26, r14
    2b3c:	51 96       	adiw	r26, 0x11	; 17
    2b3e:	8c 93       	st	X, r24
						break;
    2b40:	56 c4       	rjmp	.+2220   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
					}
					
					if (Profile == PROFILE_FAST)
					{
						if (laserDiodeData.lasersettings.FlushesLimit == 3) laserDiodeData.lasersettings.FlushesLimit = 0;
    2b42:	f7 01       	movw	r30, r14
    2b44:	e8 50       	subi	r30, 0x08	; 8
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	10 82       	st	Z, r1
    2b4a:	11 82       	std	Z+1, r1	; 0x01
						laserLimitMode = laserDiodeData.lasersettings.FlushesLimit;
    2b4c:	f7 01       	movw	r30, r14
    2b4e:	e8 50       	subi	r30, 0x08	; 8
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	3c 97       	sbiw	r30, 0x0c	; 12
    2b58:	80 83       	st	Z, r24
    2b5a:	91 83       	std	Z+1, r25	; 0x01
						update = true;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	f7 01       	movw	r30, r14
    2b60:	81 8b       	std	Z+17, r24	; 0x11
						break;
    2b62:	45 c4       	rjmp	.+2186   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
					}
				}
				
				if (phototype != laserDiodeData.phototype)
    2b64:	f7 01       	movw	r30, r14
    2b66:	ec 5f       	subi	r30, 0xFC	; 252
    2b68:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6a:	60 81       	ld	r22, Z
    2b6c:	71 81       	ldd	r23, Z+1	; 0x01
    2b6e:	6a 15       	cp	r22, r10
    2b70:	7b 05       	cpc	r23, r11
    2b72:	89 f1       	breq	.+98     	; 0x2bd6 <_ZN16CLaserControlApp3RunEv+0x44c>
				{
					PhototypePreset(laserDiodeData.phototype);
    2b74:	c7 01       	movw	r24, r14
    2b76:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN16CLaserControlApp15PhototypePresetEj>
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2b7a:	d7 01       	movw	r26, r14
    2b7c:	1e 96       	adiw	r26, 0x0e	; 14
    2b7e:	8c 91       	ld	r24, X
    2b80:	1e 97       	sbiw	r26, 0x0e	; 14
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	ac 01       	movw	r20, r24
    2b86:	44 0f       	add	r20, r20
    2b88:	55 1f       	adc	r21, r21
    2b8a:	9a 01       	movw	r18, r20
    2b8c:	28 0f       	add	r18, r24
    2b8e:	39 1f       	adc	r19, r25
    2b90:	22 0f       	add	r18, r18
    2b92:	33 1f       	adc	r19, r19
    2b94:	f9 01       	movw	r30, r18
    2b96:	ea 56       	subi	r30, 0x6A	; 106
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	ee 0d       	add	r30, r14
    2b9c:	ff 1d       	adc	r31, r15
    2b9e:	26 e0       	ldi	r18, 0x06	; 6
    2ba0:	ae 50       	subi	r26, 0x0E	; 14
    2ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba4:	01 90       	ld	r0, Z+
    2ba6:	0d 92       	st	X+, r0
    2ba8:	2a 95       	dec	r18
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <_ZN16CLaserControlApp3RunEv+0x41a>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2bac:	84 0f       	add	r24, r20
    2bae:	95 1f       	adc	r25, r21
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	ec 54       	subi	r30, 0x4C	; 76
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	ee 0d       	add	r30, r14
    2bbc:	ff 1d       	adc	r31, r15
    2bbe:	86 e0       	ldi	r24, 0x06	; 6
    2bc0:	d7 01       	movw	r26, r14
    2bc2:	a8 50       	subi	r26, 0x08	; 8
    2bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc6:	01 90       	ld	r0, Z+
    2bc8:	0d 92       	st	X+, r0
    2bca:	8a 95       	dec	r24
    2bcc:	e1 f7       	brne	.-8      	; 0x2bc6 <_ZN16CLaserControlApp3RunEv+0x43c>
					update = true;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2bd4:	0c c4       	rjmp	.+2072   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
				if (melanin != laserDiodeData.melanin)
    2bd6:	f7 01       	movw	r30, r14
    2bd8:	ee 5f       	subi	r30, 0xFE	; 254
    2bda:	fe 4f       	sbci	r31, 0xFE	; 254
    2bdc:	60 81       	ld	r22, Z
    2bde:	71 81       	ldd	r23, Z+1	; 0x01
    2be0:	68 15       	cp	r22, r8
    2be2:	79 05       	cpc	r23, r9
    2be4:	89 f1       	breq	.+98     	; 0x2c48 <_ZN16CLaserControlApp3RunEv+0x4be>
				{
					MelaninPreset(laserDiodeData.melanin);
    2be6:	c7 01       	movw	r24, r14
    2be8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN16CLaserControlApp13MelaninPresetEj>
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2bec:	d7 01       	movw	r26, r14
    2bee:	1e 96       	adiw	r26, 0x0e	; 14
    2bf0:	8c 91       	ld	r24, X
    2bf2:	1e 97       	sbiw	r26, 0x0e	; 14
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	ac 01       	movw	r20, r24
    2bf8:	44 0f       	add	r20, r20
    2bfa:	55 1f       	adc	r21, r21
    2bfc:	9a 01       	movw	r18, r20
    2bfe:	28 0f       	add	r18, r24
    2c00:	39 1f       	adc	r19, r25
    2c02:	22 0f       	add	r18, r18
    2c04:	33 1f       	adc	r19, r19
    2c06:	f9 01       	movw	r30, r18
    2c08:	ea 56       	subi	r30, 0x6A	; 106
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	ee 0d       	add	r30, r14
    2c0e:	ff 1d       	adc	r31, r15
    2c10:	26 e0       	ldi	r18, 0x06	; 6
    2c12:	ae 50       	subi	r26, 0x0E	; 14
    2c14:	bf 4f       	sbci	r27, 0xFF	; 255
    2c16:	01 90       	ld	r0, Z+
    2c18:	0d 92       	st	X+, r0
    2c1a:	2a 95       	dec	r18
    2c1c:	e1 f7       	brne	.-8      	; 0x2c16 <_ZN16CLaserControlApp3RunEv+0x48c>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2c1e:	84 0f       	add	r24, r20
    2c20:	95 1f       	adc	r25, r21
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	fc 01       	movw	r30, r24
    2c28:	ec 54       	subi	r30, 0x4C	; 76
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	ee 0d       	add	r30, r14
    2c2e:	ff 1d       	adc	r31, r15
    2c30:	86 e0       	ldi	r24, 0x06	; 6
    2c32:	d7 01       	movw	r26, r14
    2c34:	a8 50       	subi	r26, 0x08	; 8
    2c36:	bf 4f       	sbci	r27, 0xFF	; 255
    2c38:	01 90       	ld	r0, Z+
    2c3a:	0d 92       	st	X+, r0
    2c3c:	8a 95       	dec	r24
    2c3e:	e1 f7       	brne	.-8      	; 0x2c38 <_ZN16CLaserControlApp3RunEv+0x4ae>
					update = true;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	f7 01       	movw	r30, r14
    2c44:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2c46:	d3 c3       	rjmp	.+1958   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
				if (Profile != (APP_PROFILE)laserDiodeData.mode)
    2c48:	d7 01       	movw	r26, r14
    2c4a:	1e 96       	adiw	r26, 0x0e	; 14
    2c4c:	4c 91       	ld	r20, X
    2c4e:	1e 97       	sbiw	r26, 0x0e	; 14
    2c50:	f7 01       	movw	r30, r14
    2c52:	e0 51       	subi	r30, 0x10	; 16
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	01 90       	ld	r0, Z+
    2c58:	f0 81       	ld	r31, Z
    2c5a:	e0 2d       	mov	r30, r0
    2c5c:	4e 17       	cp	r20, r30
    2c5e:	71 f1       	breq	.+92     	; 0x2cbc <_ZN16CLaserControlApp3RunEv+0x532>
				{
					Profile = (APP_PROFILE)laserDiodeData.mode;
    2c60:	1e 96       	adiw	r26, 0x0e	; 14
    2c62:	ec 93       	st	X, r30
    2c64:	1e 97       	sbiw	r26, 0x0e	; 14
    2c66:	9f 01       	movw	r18, r30
    2c68:	33 27       	eor	r19, r19
					// Update profile
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2c6a:	a9 01       	movw	r20, r18
    2c6c:	44 0f       	add	r20, r20
    2c6e:	55 1f       	adc	r21, r21
    2c70:	ca 01       	movw	r24, r20
    2c72:	82 0f       	add	r24, r18
    2c74:	93 1f       	adc	r25, r19
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	8a 56       	subi	r24, 0x6A	; 106
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	f7 01       	movw	r30, r14
    2c80:	e8 0f       	add	r30, r24
    2c82:	f9 1f       	adc	r31, r25
    2c84:	66 e0       	ldi	r22, 0x06	; 6
    2c86:	ae 50       	subi	r26, 0x0E	; 14
    2c88:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8a:	01 90       	ld	r0, Z+
    2c8c:	0d 92       	st	X+, r0
    2c8e:	6a 95       	dec	r22
    2c90:	e1 f7       	brne	.-8      	; 0x2c8a <_ZN16CLaserControlApp3RunEv+0x500>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2c92:	fa 01       	movw	r30, r20
    2c94:	e2 0f       	add	r30, r18
    2c96:	f3 1f       	adc	r31, r19
    2c98:	ee 0f       	add	r30, r30
    2c9a:	ff 1f       	adc	r31, r31
    2c9c:	ec 54       	subi	r30, 0x4C	; 76
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	ee 0d       	add	r30, r14
    2ca2:	ff 1d       	adc	r31, r15
    2ca4:	86 e0       	ldi	r24, 0x06	; 6
    2ca6:	d7 01       	movw	r26, r14
    2ca8:	a8 50       	subi	r26, 0x08	; 8
    2caa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cac:	01 90       	ld	r0, Z+
    2cae:	0d 92       	st	X+, r0
    2cb0:	8a 95       	dec	r24
    2cb2:	e1 f7       	brne	.-8      	; 0x2cac <_ZN16CLaserControlApp3RunEv+0x522>
					
					update = true;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	f7 01       	movw	r30, r14
    2cb8:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2cba:	99 c3       	rjmp	.+1842   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				
				uint16_t duration = durationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    2cbc:	f7 01       	movw	r30, r14
    2cbe:	2a e1       	ldi	r18, 0x1A	; 26
    2cc0:	42 9f       	mul	r20, r18
    2cc2:	e0 0d       	add	r30, r0
    2cc4:	f1 1d       	adc	r31, r1
    2cc6:	11 24       	eor	r1, r1
    2cc8:	80 a5       	ldd	r24, Z+40	; 0x28
    2cca:	91 a5       	ldd	r25, Z+41	; 0x29
    2ccc:	68 9e       	mul	r6, r24
    2cce:	90 01       	movw	r18, r0
    2cd0:	69 9e       	mul	r6, r25
    2cd2:	30 0d       	add	r19, r0
    2cd4:	78 9e       	mul	r7, r24
    2cd6:	30 0d       	add	r19, r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	86 a1       	ldd	r24, Z+38	; 0x26
    2cdc:	97 a1       	ldd	r25, Z+39	; 0x27
    2cde:	82 0f       	add	r24, r18
    2ce0:	93 1f       	adc	r25, r19
    2ce2:	8f ab       	std	Y+55, r24	; 0x37
    2ce4:	98 af       	std	Y+56, r25	; 0x38
				uint16_t energy   = energyCnt   * pstGUI[Profile].m_wEnergyStep   + pstGUI[Profile].m_wEnergyOffset;
    2ce6:	82 a1       	ldd	r24, Z+34	; 0x22
    2ce8:	93 a1       	ldd	r25, Z+35	; 0x23
    2cea:	48 9e       	mul	r4, r24
    2cec:	90 01       	movw	r18, r0
    2cee:	49 9e       	mul	r4, r25
    2cf0:	30 0d       	add	r19, r0
    2cf2:	58 9e       	mul	r5, r24
    2cf4:	30 0d       	add	r19, r0
    2cf6:	11 24       	eor	r1, r1
    2cf8:	80 a1       	ldd	r24, Z+32	; 0x20
    2cfa:	91 a1       	ldd	r25, Z+33	; 0x21
    2cfc:	82 0f       	add	r24, r18
    2cfe:	93 1f       	adc	r25, r19
    2d00:	8d 87       	std	Y+13, r24	; 0x0d
    2d02:	9e 87       	std	Y+14, r25	; 0x0e
				
				if (freq != laserDiodeData.laserprofile.Frequency)
    2d04:	f7 01       	movw	r30, r14
    2d06:	ee 50       	subi	r30, 0x0E	; 14
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	29 ad       	ldd	r18, Y+57	; 0x39
    2d10:	3a ad       	ldd	r19, Y+58	; 0x3a
    2d12:	82 17       	cp	r24, r18
    2d14:	93 07       	cpc	r25, r19
    2d16:	61 f0       	breq	.+24     	; 0x2d30 <_ZN16CLaserControlApp3RunEv+0x5a6>
				{
					freq = laserDiodeData.laserprofile.Frequency;
    2d18:	89 af       	std	Y+57, r24	; 0x39
    2d1a:	9a af       	std	Y+58, r25	; 0x3a
					
					if (!FreqLimits(freq, (APP_PROFILE)laserDiodeData.mode))
    2d1c:	be 01       	movw	r22, r28
    2d1e:	67 5c       	subi	r22, 0xC7	; 199
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255
    2d22:	c7 01       	movw	r24, r14
    2d24:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>
					{
						//laserDiodeData.laserprofile.Frequency = freq;
						//update = true;
					}
					
					update = true;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	d7 01       	movw	r26, r14
    2d2c:	51 96       	adiw	r26, 0x11	; 17
    2d2e:	8c 93       	st	X, r24
				}
				
				UpdateLimits(freq, duration, energy, Profile);
    2d30:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d32:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d34:	4f a9       	ldd	r20, Y+55	; 0x37
    2d36:	58 ad       	ldd	r21, Y+56	; 0x38
    2d38:	69 ad       	ldd	r22, Y+57	; 0x39
    2d3a:	7a ad       	ldd	r23, Y+58	; 0x3a
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	06 85       	ldd	r16, Z+14	; 0x0e
    2d40:	c7 01       	movw	r24, r14
    2d42:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
				
				if (durationCnt != laserDiodeData.laserprofile.DurationCnt)
    2d46:	f7 01       	movw	r30, r14
    2d48:	ec 50       	subi	r30, 0x0C	; 12
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	86 15       	cp	r24, r6
    2d52:	97 05       	cpc	r25, r7
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <_ZN16CLaserControlApp3RunEv+0x5ce>
    2d56:	58 c0       	rjmp	.+176    	; 0x2e08 <_ZN16CLaserControlApp3RunEv+0x67e>
				{					
					if (Profile == PROFILE_FAST)
    2d58:	d7 01       	movw	r26, r14
    2d5a:	1e 96       	adiw	r26, 0x0e	; 14
    2d5c:	2c 91       	ld	r18, X
    2d5e:	24 30       	cpi	r18, 0x04	; 4
    2d60:	19 f4       	brne	.+6      	; 0x2d68 <_ZN16CLaserControlApp3RunEv+0x5de>
						laserDiodeData.laserprofile.DurationCnt = durationCnt; // Disable duration when FAST mode
    2d62:	60 82       	st	Z, r6
    2d64:	71 82       	std	Z+1, r7	; 0x01
    2d66:	4d c0       	rjmp	.+154    	; 0x2e02 <_ZN16CLaserControlApp3RunEv+0x678>
					else
					{
						duration = laserDiodeData.laserprofile.DurationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    2d68:	42 2f       	mov	r20, r18
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	f7 01       	movw	r30, r14
    2d6e:	ba e1       	ldi	r27, 0x1A	; 26
    2d70:	2b 9f       	mul	r18, r27
    2d72:	e0 0d       	add	r30, r0
    2d74:	f1 1d       	adc	r31, r1
    2d76:	11 24       	eor	r1, r1
    2d78:	60 a5       	ldd	r22, Z+40	; 0x28
    2d7a:	71 a5       	ldd	r23, Z+41	; 0x29
    2d7c:	86 9f       	mul	r24, r22
    2d7e:	90 01       	movw	r18, r0
    2d80:	87 9f       	mul	r24, r23
    2d82:	30 0d       	add	r19, r0
    2d84:	96 9f       	mul	r25, r22
    2d86:	30 0d       	add	r19, r0
    2d88:	11 24       	eor	r1, r1
    2d8a:	86 a1       	ldd	r24, Z+38	; 0x26
    2d8c:	97 a1       	ldd	r25, Z+39	; 0x27
    2d8e:	82 0f       	add	r24, r18
    2d90:	93 1f       	adc	r25, r19
    2d92:	8f ab       	std	Y+55, r24	; 0x37
    2d94:	98 af       	std	Y+56, r25	; 0x38
						
						// Check limit
						if ((duration <= pstGUI[Profile].m_wMaxDuration) && (duration >= pstGUI[Profile].m_wMinDuration))
    2d96:	20 8d       	ldd	r18, Z+24	; 0x18
    2d98:	31 8d       	ldd	r19, Z+25	; 0x19
    2d9a:	28 17       	cp	r18, r24
    2d9c:	39 07       	cpc	r19, r25
    2d9e:	60 f1       	brcs	.+88     	; 0x2df8 <_ZN16CLaserControlApp3RunEv+0x66e>
    2da0:	9a 01       	movw	r18, r20
    2da2:	2f 5f       	subi	r18, 0xFF	; 255
    2da4:	3f 4f       	sbci	r19, 0xFF	; 255
    2da6:	6a e1       	ldi	r22, 0x1A	; 26
    2da8:	62 9f       	mul	r22, r18
    2daa:	f0 01       	movw	r30, r0
    2dac:	63 9f       	mul	r22, r19
    2dae:	f0 0d       	add	r31, r0
    2db0:	11 24       	eor	r1, r1
    2db2:	ee 0d       	add	r30, r14
    2db4:	ff 1d       	adc	r31, r15
    2db6:	20 81       	ld	r18, Z
    2db8:	31 81       	ldd	r19, Z+1	; 0x01
    2dba:	82 17       	cp	r24, r18
    2dbc:	93 07       	cpc	r25, r19
    2dbe:	e0 f0       	brcs	.+56     	; 0x2df8 <_ZN16CLaserControlApp3RunEv+0x66e>
						{
							if (pstGUI[Profile].updateDuration)
    2dc0:	8a e1       	ldi	r24, 0x1A	; 26
    2dc2:	84 9f       	mul	r24, r20
    2dc4:	f0 01       	movw	r30, r0
    2dc6:	85 9f       	mul	r24, r21
    2dc8:	f0 0d       	add	r31, r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	ee 0d       	add	r30, r14
    2dce:	ff 1d       	adc	r31, r15
    2dd0:	84 a5       	ldd	r24, Z+44	; 0x2c
    2dd2:	88 23       	and	r24, r24
    2dd4:	49 f0       	breq	.+18     	; 0x2de8 <_ZN16CLaserControlApp3RunEv+0x65e>
								CalculateDurationSteps(freq, duration);
    2dd6:	ae 01       	movw	r20, r28
    2dd8:	49 5c       	subi	r20, 0xC9	; 201
    2dda:	5f 4f       	sbci	r21, 0xFF	; 255
    2ddc:	be 01       	movw	r22, r28
    2dde:	67 5c       	subi	r22, 0xC7	; 199
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	c7 01       	movw	r24, r14
    2de4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>
							laserDiodeData.lasersettings.Duration = duration;
    2de8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dea:	98 ad       	ldd	r25, Y+56	; 0x38
    2dec:	f7 01       	movw	r30, r14
    2dee:	e6 50       	subi	r30, 0x06	; 6
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 83       	st	Z, r24
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <_ZN16CLaserControlApp3RunEv+0x678>
						}
						else
							laserDiodeData.laserprofile.DurationCnt = durationCnt; // Cancel change if out
    2df8:	f7 01       	movw	r30, r14
    2dfa:	ec 50       	subi	r30, 0x0C	; 12
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 82       	st	Z, r6
    2e00:	71 82       	std	Z+1, r7	; 0x01
					}
					update = true;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	f7 01       	movw	r30, r14
    2e06:	81 8b       	std	Z+17, r24	; 0x11
				}
				if (energyCnt != laserDiodeData.laserprofile.EnergyCnt)
    2e08:	f7 01       	movw	r30, r14
    2e0a:	ea 50       	subi	r30, 0x0A	; 10
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	40 81       	ld	r20, Z
    2e10:	51 81       	ldd	r21, Z+1	; 0x01
    2e12:	44 15       	cp	r20, r4
    2e14:	55 05       	cpc	r21, r5
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <_ZN16CLaserControlApp3RunEv+0x690>
    2e18:	67 c0       	rjmp	.+206    	; 0x2ee8 <_ZN16CLaserControlApp3RunEv+0x75e>
				{
					energy = laserDiodeData.laserprofile.EnergyCnt * pstGUI[Profile].m_wEnergyStep + pstGUI[Profile].m_wEnergyOffset;
    2e1a:	d7 01       	movw	r26, r14
    2e1c:	1e 96       	adiw	r26, 0x0e	; 14
    2e1e:	2c 91       	ld	r18, X
    2e20:	62 2f       	mov	r22, r18
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	f7 01       	movw	r30, r14
    2e26:	ba e1       	ldi	r27, 0x1A	; 26
    2e28:	2b 9f       	mul	r18, r27
    2e2a:	e0 0d       	add	r30, r0
    2e2c:	f1 1d       	adc	r31, r1
    2e2e:	11 24       	eor	r1, r1
    2e30:	82 a1       	ldd	r24, Z+34	; 0x22
    2e32:	93 a1       	ldd	r25, Z+35	; 0x23
    2e34:	48 9f       	mul	r20, r24
    2e36:	d0 01       	movw	r26, r0
    2e38:	49 9f       	mul	r20, r25
    2e3a:	b0 0d       	add	r27, r0
    2e3c:	58 9f       	mul	r21, r24
    2e3e:	b0 0d       	add	r27, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	80 a1       	ldd	r24, Z+32	; 0x20
    2e44:	91 a1       	ldd	r25, Z+33	; 0x21
    2e46:	8a 0f       	add	r24, r26
    2e48:	9b 1f       	adc	r25, r27
    2e4a:	8d 87       	std	Y+13, r24	; 0x0d
    2e4c:	9e 87       	std	Y+14, r25	; 0x0e
					
					if (Profile == PROFILE_FAST)
    2e4e:	24 30       	cpi	r18, 0x04	; 4
    2e50:	69 f4       	brne	.+26     	; 0x2e6c <_ZN16CLaserControlApp3RunEv+0x6e2>
						CheckLimitsFastMode(freq, duration, energy);
    2e52:	9e 01       	movw	r18, r28
    2e54:	23 5f       	subi	r18, 0xF3	; 243
    2e56:	3f 4f       	sbci	r19, 0xFF	; 255
    2e58:	ae 01       	movw	r20, r28
    2e5a:	49 5c       	subi	r20, 0xC9	; 201
    2e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5e:	be 01       	movw	r22, r28
    2e60:	67 5c       	subi	r22, 0xC7	; 199
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	c7 01       	movw	r24, r14
    2e66:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
    2e6a:	3b c0       	rjmp	.+118    	; 0x2ee2 <_ZN16CLaserControlApp3RunEv+0x758>
					else
					{
						// Check limit
						if ((energy <= pstGUI[Profile].m_wMaxEnergy_) && (energy >= pstGUI[Profile].m_wMinEnergy_))
    2e6c:	2a e1       	ldi	r18, 0x1A	; 26
    2e6e:	26 9f       	mul	r18, r22
    2e70:	f0 01       	movw	r30, r0
    2e72:	27 9f       	mul	r18, r23
    2e74:	f0 0d       	add	r31, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	ee 0d       	add	r30, r14
    2e7a:	ff 1d       	adc	r31, r15
    2e7c:	24 89       	ldd	r18, Z+20	; 0x14
    2e7e:	35 89       	ldd	r19, Z+21	; 0x15
    2e80:	28 17       	cp	r18, r24
    2e82:	39 07       	cpc	r19, r25
    2e84:	48 f1       	brcs	.+82     	; 0x2ed8 <_ZN16CLaserControlApp3RunEv+0x74e>
    2e86:	2a e1       	ldi	r18, 0x1A	; 26
    2e88:	26 9f       	mul	r18, r22
    2e8a:	f0 01       	movw	r30, r0
    2e8c:	27 9f       	mul	r18, r23
    2e8e:	f0 0d       	add	r31, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	ee 0d       	add	r30, r14
    2e94:	ff 1d       	adc	r31, r15
    2e96:	26 89       	ldd	r18, Z+22	; 0x16
    2e98:	37 89       	ldd	r19, Z+23	; 0x17
    2e9a:	82 17       	cp	r24, r18
    2e9c:	93 07       	cpc	r25, r19
    2e9e:	e0 f0       	brcs	.+56     	; 0x2ed8 <_ZN16CLaserControlApp3RunEv+0x74e>
						{
							if (pstGUI[Profile].updateEnergy)
    2ea0:	8a e1       	ldi	r24, 0x1A	; 26
    2ea2:	86 9f       	mul	r24, r22
    2ea4:	f0 01       	movw	r30, r0
    2ea6:	87 9f       	mul	r24, r23
    2ea8:	f0 0d       	add	r31, r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	ee 0d       	add	r30, r14
    2eae:	ff 1d       	adc	r31, r15
    2eb0:	85 a5       	ldd	r24, Z+45	; 0x2d
    2eb2:	88 23       	and	r24, r24
    2eb4:	49 f0       	breq	.+18     	; 0x2ec8 <_ZN16CLaserControlApp3RunEv+0x73e>
								CalculateEnergySteps(freq, energy);
    2eb6:	ae 01       	movw	r20, r28
    2eb8:	43 5f       	subi	r20, 0xF3	; 243
    2eba:	5f 4f       	sbci	r21, 0xFF	; 255
    2ebc:	be 01       	movw	r22, r28
    2ebe:	67 5c       	subi	r22, 0xC7	; 199
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	c7 01       	movw	r24, r14
    2ec4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>
							laserDiodeData.lasersettings.Energy = energy;
    2ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ecc:	f7 01       	movw	r30, r14
    2ece:	e4 50       	subi	r30, 0x04	; 4
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 83       	st	Z, r24
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <_ZN16CLaserControlApp3RunEv+0x758>
						}
						else
							laserDiodeData.laserprofile.EnergyCnt = energyCnt; // Cancel change if out
    2ed8:	f7 01       	movw	r30, r14
    2eda:	ea 50       	subi	r30, 0x0A	; 10
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	40 82       	st	Z, r4
    2ee0:	51 82       	std	Z+1, r5	; 0x01
					}
					update = true;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	f7 01       	movw	r30, r14
    2ee6:	81 8b       	std	Z+17, r24	; 0x11
				}
				
				if (Profile != PROFILE_FAST)
    2ee8:	d7 01       	movw	r26, r14
    2eea:	1e 96       	adiw	r26, 0x0e	; 14
    2eec:	0c 91       	ld	r16, X
    2eee:	04 30       	cpi	r16, 0x04	; 4
    2ef0:	69 f0       	breq	.+26     	; 0x2f0c <_ZN16CLaserControlApp3RunEv+0x782>
					CheckLimits(freq, duration, energy, Profile);
    2ef2:	9e 01       	movw	r18, r28
    2ef4:	23 5f       	subi	r18, 0xF3	; 243
    2ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef8:	ae 01       	movw	r20, r28
    2efa:	49 5c       	subi	r20, 0xC9	; 201
    2efc:	5f 4f       	sbci	r21, 0xFF	; 255
    2efe:	be 01       	movw	r22, r28
    2f00:	67 5c       	subi	r22, 0xC7	; 199
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255
    2f04:	c7 01       	movw	r24, r14
    2f06:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>
    2f0a:	0c c0       	rjmp	.+24     	; 0x2f24 <_ZN16CLaserControlApp3RunEv+0x79a>
				else
					CheckLimitsFastMode(freq, duration, energy);
    2f0c:	9e 01       	movw	r18, r28
    2f0e:	23 5f       	subi	r18, 0xF3	; 243
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	ae 01       	movw	r20, r28
    2f14:	49 5c       	subi	r20, 0xC9	; 201
    2f16:	5f 4f       	sbci	r21, 0xFF	; 255
    2f18:	be 01       	movw	r22, r28
    2f1a:	67 5c       	subi	r22, 0xC7	; 199
    2f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1e:	c7 01       	movw	r24, r14
    2f20:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
				
				if (Profile == PROFILE_MEDIUM)
    2f24:	f7 01       	movw	r30, r14
    2f26:	86 85       	ldd	r24, Z+14	; 0x0e
    2f28:	83 30       	cpi	r24, 0x03	; 3
    2f2a:	81 f4       	brne	.+32     	; 0x2f4c <_ZN16CLaserControlApp3RunEv+0x7c2>
					CalculateMultiPulseLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2f2c:	a7 01       	movw	r20, r14
    2f2e:	48 50       	subi	r20, 0x08	; 8
    2f30:	5f 4f       	sbci	r21, 0xFF	; 255
    2f32:	b7 01       	movw	r22, r14
    2f34:	6e 50       	subi	r22, 0x0E	; 14
    2f36:	7f 4f       	sbci	r23, 0xFF	; 255
    2f38:	c7 01       	movw	r24, r14
    2f3a:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2f3e:	2f 83       	std	Y+7, r18	; 0x07
    2f40:	38 87       	std	Y+8, r19	; 0x08
    2f42:	49 87       	std	Y+9, r20	; 0x09
    2f44:	5a 87       	std	Y+10, r21	; 0x0a
    2f46:	6b 87       	std	Y+11, r22	; 0x0b
    2f48:	7c 87       	std	Y+12, r23	; 0x0c
    2f4a:	0f c0       	rjmp	.+30     	; 0x2f6a <_ZN16CLaserControlApp3RunEv+0x7e0>
				else
					CalculateLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2f4c:	a7 01       	movw	r20, r14
    2f4e:	48 50       	subi	r20, 0x08	; 8
    2f50:	5f 4f       	sbci	r21, 0xFF	; 255
    2f52:	b7 01       	movw	r22, r14
    2f54:	6e 50       	subi	r22, 0x0E	; 14
    2f56:	7f 4f       	sbci	r23, 0xFF	; 255
    2f58:	c7 01       	movw	r24, r14
    2f5a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2f5e:	29 83       	std	Y+1, r18	; 0x01
    2f60:	3a 83       	std	Y+2, r19	; 0x02
    2f62:	4b 83       	std	Y+3, r20	; 0x03
    2f64:	5c 83       	std	Y+4, r21	; 0x04
    2f66:	6d 83       	std	Y+5, r22	; 0x05
    2f68:	7e 83       	std	Y+6, r23	; 0x06
					
				laserPower = min((uint32_t)(laserDiodeData.lasersettings.Energy * 1440ul) / (uint32_t)laserDiodeData.lasersettings.Duration, MAX_LASER_POWER); // Convert Energy J/cm2 to Power in Watts
    2f6a:	f7 01       	movw	r30, r14
    2f6c:	e4 50       	subi	r30, 0x04	; 4
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	20 81       	ld	r18, Z
    2f72:	31 81       	ldd	r19, Z+1	; 0x01
    2f74:	a0 ea       	ldi	r26, 0xA0	; 160
    2f76:	b5 e0       	ldi	r27, 0x05	; 5
    2f78:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    2f7c:	32 97       	sbiw	r30, 0x02	; 2
    2f7e:	20 81       	ld	r18, Z
    2f80:	31 81       	ldd	r19, Z+1	; 0x01
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    2f8a:	64 ef       	ldi	r22, 0xF4	; 244
    2f8c:	71 e0       	ldi	r23, 0x01	; 1
    2f8e:	c9 01       	movw	r24, r18
    2f90:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_Z3minjj>
    2f94:	f7 01       	movw	r30, r14
    2f96:	e8 52       	subi	r30, 0x28	; 40
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 83       	st	Z, r24
    2f9c:	91 83       	std	Z+1, r25	; 0x01
				
				// Copy data to profiles
				if (update)
    2f9e:	d7 01       	movw	r26, r14
    2fa0:	51 96       	adiw	r26, 0x11	; 17
    2fa2:	8c 91       	ld	r24, X
    2fa4:	51 97       	sbiw	r26, 0x11	; 17
    2fa6:	88 23       	and	r24, r24
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <_ZN16CLaserControlApp3RunEv+0x822>
    2faa:	21 c2       	rjmp	.+1090   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				{
					memcpy((void*)&m_structLaserProfile [Profile], (void*)&laserDiodeData.laserprofile , sizeof(laserDiodeData.laserprofile));
    2fac:	1e 96       	adiw	r26, 0x0e	; 14
    2fae:	9c 91       	ld	r25, X
    2fb0:	1e 97       	sbiw	r26, 0x0e	; 14
    2fb2:	86 e0       	ldi	r24, 0x06	; 6
    2fb4:	89 9f       	mul	r24, r25
    2fb6:	a0 0d       	add	r26, r0
    2fb8:	b1 1d       	adc	r27, r1
    2fba:	11 24       	eor	r1, r1
    2fbc:	aa 56       	subi	r26, 0x6A	; 106
    2fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc0:	96 e0       	ldi	r25, 0x06	; 6
    2fc2:	7a 96       	adiw	r30, 0x1a	; 26
    2fc4:	01 90       	ld	r0, Z+
    2fc6:	0d 92       	st	X+, r0
    2fc8:	9a 95       	dec	r25
    2fca:	e1 f7       	brne	.-8      	; 0x2fc4 <_ZN16CLaserControlApp3RunEv+0x83a>
					memcpy((void*)&m_structLaserSettings[Profile], (void*)&laserDiodeData.lasersettings, sizeof(laserDiodeData.lasersettings));
    2fcc:	f7 01       	movw	r30, r14
    2fce:	96 85       	ldd	r25, Z+14	; 0x0e
    2fd0:	d7 01       	movw	r26, r14
    2fd2:	89 9f       	mul	r24, r25
    2fd4:	a0 0d       	add	r26, r0
    2fd6:	b1 1d       	adc	r27, r1
    2fd8:	11 24       	eor	r1, r1
    2fda:	ac 54       	subi	r26, 0x4C	; 76
    2fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2fde:	e8 50       	subi	r30, 0x08	; 8
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	01 90       	ld	r0, Z+
    2fe4:	0d 92       	st	X+, r0
    2fe6:	8a 95       	dec	r24
    2fe8:	e1 f7       	brne	.-8      	; 0x2fe2 <_ZN16CLaserControlApp3RunEv+0x858>
				}
			}
		break;
    2fea:	01 c2       	rjmp	.+1026   	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    2fec:	d7 01       	movw	r26, r14
    2fee:	52 96       	adiw	r26, 0x12	; 18
    2ff0:	8c 91       	ld	r24, X
    2ff2:	88 23       	and	r24, r24
    2ff4:	b9 f0       	breq	.+46     	; 0x3024 <_ZN16CLaserControlApp3RunEv+0x89a>
				{
					timervar.timer_minutes = m_wMinutes;
    2ff6:	f7 01       	movw	r30, r14
    2ff8:	e6 5e       	subi	r30, 0xE6	; 230
    2ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	8d 87       	std	Y+13, r24	; 0x0d
    3002:	9e 87       	std	Y+14, r25	; 0x0e
					timervar.timer_seconds = m_wSeconds;
    3004:	32 96       	adiw	r30, 0x02	; 2
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	8f 87       	std	Y+15, r24	; 0x0f
    300c:	98 8b       	std	Y+16, r25	; 0x10
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    300e:	24 e0       	ldi	r18, 0x04	; 4
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	ae 01       	movw	r20, r28
    3014:	43 5f       	subi	r20, 0xF3	; 243
    3016:	5f 4f       	sbci	r21, 0xFF	; 255
    3018:	6f e0       	ldi	r22, 0x0F	; 15
    301a:	70 e0       	ldi	r23, 0x00	; 0
    301c:	c7 01       	movw	r24, r14
    301e:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    3022:	e5 c1       	rjmp	.+970    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    3024:	f7 01       	movw	r30, r14
    3026:	86 85       	ldd	r24, Z+14	; 0x0e
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	ac 01       	movw	r20, r24
    302c:	44 0f       	add	r20, r20
    302e:	55 1f       	adc	r21, r21
    3030:	84 0f       	add	r24, r20
    3032:	95 1f       	adc	r25, r21
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	ac 01       	movw	r20, r24
    303a:	4a 56       	subi	r20, 0x6A	; 106
    303c:	5f 4f       	sbci	r21, 0xFF	; 255
    303e:	4e 0d       	add	r20, r14
    3040:	5f 1d       	adc	r21, r15
    3042:	26 e0       	ldi	r18, 0x06	; 6
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	c7 01       	movw	r24, r14
    304c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    3050:	6c e0       	ldi	r22, 0x0C	; 12
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	c7 01       	movw	r24, r14
    3056:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    305a:	c9 c1       	rjmp	.+914    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    305c:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    3060:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    3064:	6a e0       	ldi	r22, 0x0A	; 10
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <__divmodhi4>
    306c:	6d 87       	std	Y+13, r22	; 0x0d
    306e:	7e 87       	std	Y+14, r23	; 0x0e
				timervar.timer_seconds = temperature % 10;
    3070:	8f 87       	std	Y+15, r24	; 0x0f
    3072:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    3074:	24 e0       	ldi	r18, 0x04	; 4
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	ae 01       	movw	r20, r28
    307a:	43 5f       	subi	r20, 0xF3	; 243
    307c:	5f 4f       	sbci	r21, 0xFF	; 255
    307e:	6f e0       	ldi	r22, 0x0F	; 15
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	c7 01       	movw	r24, r14
    3084:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				/*m_wMinutes = m_wSetMin;
				m_wSeconds = m_wSetSec;*/
				prepare = true;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	d7 01       	movw	r26, r14
    308c:	52 96       	adiw	r26, 0x12	; 18
    308e:	8c 93       	st	X, r24
				
				if (temperature < 290)
    3090:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    3094:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    3098:	82 32       	cpi	r24, 0x22	; 34
    309a:	91 40       	sbci	r25, 0x01	; 1
    309c:	0c f0       	brlt	.+2      	; 0x30a0 <_ZN16CLaserControlApp3RunEv+0x916>
    309e:	a7 c1       	rjmp	.+846    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
					SetPictureId(PICID_WORK_PREPARE);
    30a0:	67 e0       	ldi	r22, 0x07	; 7
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	c7 01       	movw	r24, r14
    30a6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    30aa:	a1 c1       	rjmp	.+834    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    30ac:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    30b0:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    30b4:	8d 32       	cpi	r24, 0x2D	; 45
    30b6:	91 40       	sbci	r25, 0x01	; 1
    30b8:	0c f4       	brge	.+2      	; 0x30bc <_ZN16CLaserControlApp3RunEv+0x932>
    30ba:	99 c1       	rjmp	.+818    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    30bc:	69 e2       	ldi	r22, 0x29	; 41
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	c7 01       	movw	r24, r14
    30c2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    30c6:	d7 01       	movw	r26, r14
    30c8:	1f 96       	adiw	r26, 0x0f	; 15
    30ca:	8c 91       	ld	r24, X
    30cc:	1f 97       	sbiw	r26, 0x0f	; 15
    30ce:	50 96       	adiw	r26, 0x10	; 16
    30d0:	8c 93       	st	X, r24
    30d2:	8d c1       	rjmp	.+794    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				SetLaserDiodePower();
    30d4:	c7 01       	movw	r24, r14
    30d6:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
							
				if (!laserBoard.Footswitch())
    30da:	85 ee       	ldi	r24, 0xE5	; 229
    30dc:	95 e2       	ldi	r25, 0x25	; 37
    30de:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_ZN11CLaserBoard10FootswitchEv>
    30e2:	81 11       	cpse	r24, r1
    30e4:	12 c0       	rjmp	.+36     	; 0x310a <_ZN16CLaserControlApp3RunEv+0x980>
				{
					//isstarted = true;
					if (state != APP_WORKLIGHT)
    30e6:	f7 01       	movw	r30, r14
    30e8:	84 85       	ldd	r24, Z+12	; 0x0c
    30ea:	95 85       	ldd	r25, Z+13	; 0x0d
    30ec:	80 97       	sbiw	r24, 0x20	; 32
    30ee:	f1 f0       	breq	.+60     	; 0x312c <_ZN16CLaserControlApp3RunEv+0x9a2>
					{
						SetPictureId(PICID_WORK_STARTED);
    30f0:	60 e1       	ldi	r22, 0x10	; 16
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	c7 01       	movw	r24, r14
    30f6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    30fa:	80 e2       	ldi	r24, 0x20	; 32
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	d7 01       	movw	r26, r14
    3100:	1c 96       	adiw	r26, 0x0c	; 12
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	1d 97       	sbiw	r26, 0x0d	; 13
    3108:	11 c0       	rjmp	.+34     	; 0x312c <_ZN16CLaserControlApp3RunEv+0x9a2>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    310a:	f7 01       	movw	r30, r14
    310c:	84 85       	ldd	r24, Z+12	; 0x0c
    310e:	95 85       	ldd	r25, Z+13	; 0x0d
    3110:	40 97       	sbiw	r24, 0x10	; 16
    3112:	61 f0       	breq	.+24     	; 0x312c <_ZN16CLaserControlApp3RunEv+0x9a2>
					{
						SetPictureId(PICID_WORK_POWERON);
    3114:	6e e0       	ldi	r22, 0x0E	; 14
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	c7 01       	movw	r24, r14
    311a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    311e:	80 e1       	ldi	r24, 0x10	; 16
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	d7 01       	movw	r26, r14
    3124:	1c 96       	adiw	r26, 0x0c	; 12
    3126:	8d 93       	st	X+, r24
    3128:	9c 93       	st	X, r25
    312a:	1d 97       	sbiw	r26, 0x0d	; 13
					}
					//StopLaser();
				}
			
				uint32_t cnt = swap32(laserCounter);
    312c:	f7 01       	movw	r30, r14
    312e:	e6 52       	subi	r30, 0x26	; 38
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	60 81       	ld	r22, Z
    3134:	71 81       	ldd	r23, Z+1	; 0x01
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z6swap32m>
    313e:	6d 87       	std	Y+13, r22	; 0x0d
    3140:	7e 87       	std	Y+14, r23	; 0x0e
    3142:	8f 87       	std	Y+15, r24	; 0x0f
    3144:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    3146:	24 e0       	ldi	r18, 0x04	; 4
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	ae 01       	movw	r20, r28
    314c:	43 5f       	subi	r20, 0xF3	; 243
    314e:	5f 4f       	sbci	r21, 0xFF	; 255
    3150:	68 e0       	ldi	r22, 0x08	; 8
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	c7 01       	movw	r24, r14
    3156:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    315a:	f7 01       	movw	r30, r14
    315c:	e2 52       	subi	r30, 0x22	; 34
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z6swap32m>
    316c:	6d 87       	std	Y+13, r22	; 0x0d
    316e:	7e 87       	std	Y+14, r23	; 0x0e
    3170:	8f 87       	std	Y+15, r24	; 0x0f
    3172:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    3174:	24 e0       	ldi	r18, 0x04	; 4
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	ae 01       	movw	r20, r28
    317a:	43 5f       	subi	r20, 0xF3	; 243
    317c:	5f 4f       	sbci	r21, 0xFF	; 255
    317e:	64 e1       	ldi	r22, 0x14	; 20
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	c7 01       	movw	r24, r14
    3184:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    3188:	32 c1       	rjmp	.+612    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    318a:	85 ee       	ldi	r24, 0xE5	; 229
    318c:	95 e2       	ldi	r25, 0x25	; 37
    318e:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    3192:	f7 01       	movw	r30, r14
    3194:	ec 5d       	subi	r30, 0xDC	; 220
    3196:	fe 4f       	sbci	r31, 0xFE	; 254
    3198:	80 81       	ld	r24, Z
    319a:	91 81       	ldd	r25, Z+1	; 0x01
    319c:	cd 97       	sbiw	r24, 0x3d	; 61
    319e:	08 f4       	brcc	.+2      	; 0x31a2 <_ZN16CLaserControlApp3RunEv+0xa18>
    31a0:	26 c1       	rjmp	.+588    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				SetPictureId(PICID_WORKOnReady);
    31a2:	69 e1       	ldi	r22, 0x19	; 25
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	c7 01       	movw	r24, r14
    31a8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    31ac:	20 c1       	rjmp	.+576    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    31ae:	85 ee       	ldi	r24, 0xE5	; 229
    31b0:	95 e2       	ldi	r25, 0x25	; 37
    31b2:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    31b6:	f7 01       	movw	r30, r14
    31b8:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    31ba:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    31be:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    31c2:	82 32       	cpi	r24, 0x22	; 34
    31c4:	91 40       	sbci	r25, 0x01	; 1
    31c6:	0c f0       	brlt	.+2      	; 0x31ca <_ZN16CLaserControlApp3RunEv+0xa40>
    31c8:	12 c1       	rjmp	.+548    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
			{
				prepare = true;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	d7 01       	movw	r26, r14
    31ce:	52 96       	adiw	r26, 0x12	; 18
    31d0:	8c 93       	st	X, r24
    31d2:	52 97       	sbiw	r26, 0x12	; 18
				SetPictureId(PIC_ID_last);
    31d4:	50 96       	adiw	r26, 0x10	; 16
    31d6:	6c 91       	ld	r22, X
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	c7 01       	movw	r24, r14
    31dc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    31e0:	06 c1       	rjmp	.+524    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    31e2:	85 ee       	ldi	r24, 0xE5	; 229
    31e4:	95 e2       	ldi	r25, 0x25	; 37
    31e6:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    31ea:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    31ee:	85 ff       	sbrs	r24, 5
    31f0:	fe c0       	rjmp	.+508    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				SetPictureId(PIC_ID_last);
    31f2:	f7 01       	movw	r30, r14
    31f4:	60 89       	ldd	r22, Z+16	; 0x10
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	c7 01       	movw	r24, r14
    31fa:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    31fe:	f7 c0       	rjmp	.+494    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    3200:	f7 01       	movw	r30, r14
    3202:	e2 52       	subi	r30, 0x22	; 34
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	10 82       	st	Z, r1
    3208:	11 82       	std	Z+1, r1	; 0x01
    320a:	12 82       	std	Z+2, r1	; 0x02
    320c:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    320e:	85 ee       	ldi	r24, 0xE5	; 229
    3210:	95 e2       	ldi	r25, 0x25	; 37
    3212:	0e 94 cc 39 	call	0x7398	; 0x7398 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    3216:	f7 01       	movw	r30, r14
    3218:	e8 5f       	subi	r30, 0xF8	; 248
    321a:	fe 4f       	sbci	r31, 0xFE	; 254
    321c:	80 81       	ld	r24, Z
    321e:	91 81       	ldd	r25, Z+1	; 0x01
    3220:	2c ec       	ldi	r18, 0xCC	; 204
    3222:	28 9f       	mul	r18, r24
    3224:	b0 01       	movw	r22, r0
    3226:	29 9f       	mul	r18, r25
    3228:	70 0d       	add	r23, r0
    322a:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    322c:	86 e1       	ldi	r24, 0x16	; 22
    322e:	96 e2       	ldi	r25, 0x26	; 38
    3230:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	d7 01       	movw	r26, r14
    3238:	53 96       	adiw	r26, 0x13	; 19
    323a:	8c 93       	st	X, r24
    323c:	53 97       	sbiw	r26, 0x13	; 19
				
				prepare = true;
    323e:	52 96       	adiw	r26, 0x12	; 18
    3240:	8c 93       	st	X, r24
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    3242:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    3246:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    324a:	83 32       	cpi	r24, 0x23	; 35
    324c:	91 40       	sbci	r25, 0x01	; 1
    324e:	34 f0       	brlt	.+12     	; 0x325c <_ZN16CLaserControlApp3RunEv+0xad2>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    3250:	67 e2       	ldi	r22, 0x27	; 39
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	c7 01       	movw	r24, r14
    3256:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    325a:	c9 c0       	rjmp	.+402    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    325c:	67 e0       	ldi	r22, 0x07	; 7
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	c7 01       	movw	r24, r14
    3262:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
    3266:	c3 c0       	rjmp	.+390    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				SetLaserDiodePower();
    3268:	c7 01       	movw	r24, r14
    326a:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
				
				SetPictureId(PICID_WORK_POWERON);
    326e:	6e e0       	ldi	r22, 0x0E	; 14
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	c7 01       	movw	r24, r14
    3274:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    3278:	ba c0       	rjmp	.+372    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    327a:	6a e0       	ldi	r22, 0x0A	; 10
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	c7 01       	movw	r24, r14
    3280:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				StopLaser();
    3284:	c7 01       	movw	r24, r14
    3286:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    328a:	85 ee       	ldi	r24, 0xE5	; 229
    328c:	95 e2       	ldi	r25, 0x25	; 37
    328e:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    3292:	f7 01       	movw	r30, r14
    3294:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    3296:	85 ee       	ldi	r24, 0xE5	; 229
    3298:	95 e2       	ldi	r25, 0x25	; 37
    329a:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    329e:	f7 01       	movw	r30, r14
    32a0:	e6 52       	subi	r30, 0x26	; 38
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	40 81       	ld	r20, Z
    32a6:	51 81       	ldd	r21, Z+1	; 0x01
    32a8:	62 81       	ldd	r22, Z+2	; 0x02
    32aa:	73 81       	ldd	r23, Z+3	; 0x03
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	0e 94 71 41 	call	0x82e2	; 0x82e2 <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    32b4:	1d 86       	std	Y+13, r1	; 0x0d
    32b6:	1e 86       	std	Y+14, r1	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    32b8:	42 e0       	ldi	r20, 0x02	; 2
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	be 01       	movw	r22, r28
    32be:	63 5f       	subi	r22, 0xF3	; 243
    32c0:	7f 4f       	sbci	r23, 0xFF	; 255
    32c2:	85 e2       	ldi	r24, 0x25	; 37
    32c4:	96 e2       	ldi	r25, 0x26	; 38
    32c6:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN4CSPI4SendEPhj>
			}
		break;
    32ca:	91 c0       	rjmp	.+290    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    32cc:	6a e0       	ldi	r22, 0x0A	; 10
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	c7 01       	movw	r24, r14
    32d2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    32d6:	8b c0       	rjmp	.+278    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    32d8:	42 e0       	ldi	r20, 0x02	; 2
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	61 e1       	ldi	r22, 0x11	; 17
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	c7 01       	movw	r24, r14
    32e2:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    32e6:	ff ef       	ldi	r31, 0xFF	; 255
    32e8:	21 ee       	ldi	r18, 0xE1	; 225
    32ea:	34 e0       	ldi	r19, 0x04	; 4
    32ec:	f1 50       	subi	r31, 0x01	; 1
    32ee:	20 40       	sbci	r18, 0x00	; 0
    32f0:	30 40       	sbci	r19, 0x00	; 0
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <_ZN16CLaserControlApp3RunEv+0xb62>
    32f4:	00 c0       	rjmp	.+0      	; 0x32f6 <_ZN16CLaserControlApp3RunEv+0xb6c>
    32f6:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    32f8:	42 e0       	ldi	r20, 0x02	; 2
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	62 e1       	ldi	r22, 0x12	; 18
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	c7 01       	movw	r24, r14
    3302:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
    3306:	8f ef       	ldi	r24, 0xFF	; 255
    3308:	91 ee       	ldi	r25, 0xE1	; 225
    330a:	a4 e0       	ldi	r26, 0x04	; 4
    330c:	81 50       	subi	r24, 0x01	; 1
    330e:	90 40       	sbci	r25, 0x00	; 0
    3310:	a0 40       	sbci	r26, 0x00	; 0
    3312:	e1 f7       	brne	.-8      	; 0x330c <_ZN16CLaserControlApp3RunEv+0xb82>
    3314:	00 c0       	rjmp	.+0      	; 0x3316 <_ZN16CLaserControlApp3RunEv+0xb8c>
    3316:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    3318:	f7 01       	movw	r30, r14
    331a:	e0 5f       	subi	r30, 0xF0	; 240
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	20 81       	ld	r18, Z
    3320:	31 81       	ldd	r19, Z+1	; 0x01
    3322:	c9 01       	movw	r24, r18
    3324:	a0 e0       	ldi	r26, 0x00	; 0
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	90 51       	subi	r25, 0x10	; 16
    332a:	af 4f       	sbci	r26, 0xFF	; 255
    332c:	bf 4f       	sbci	r27, 0xFF	; 255
    332e:	22 27       	eor	r18, r18
    3330:	38 2f       	mov	r19, r24
    3332:	49 2f       	mov	r20, r25
    3334:	5a 2f       	mov	r21, r26
    3336:	00 e0       	ldi	r16, 0x00	; 0
    3338:	1c e0       	ldi	r17, 0x0C	; 12
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	71 e0       	ldi	r23, 0x01	; 1
    333e:	8c e0       	ldi	r24, 0x0C	; 12
    3340:	96 e2       	ldi	r25, 0x26	; 38
    3342:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    3346:	53 c0       	rjmp	.+166    	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
    3348:	bf ef       	ldi	r27, 0xFF	; 255
    334a:	e7 ea       	ldi	r30, 0xA7	; 167
    334c:	f1 e6       	ldi	r31, 0x61	; 97
    334e:	b1 50       	subi	r27, 0x01	; 1
    3350:	e0 40       	sbci	r30, 0x00	; 0
    3352:	f0 40       	sbci	r31, 0x00	; 0
    3354:	e1 f7       	brne	.-8      	; 0x334e <_ZN16CLaserControlApp3RunEv+0xbc4>
    3356:	00 c0       	rjmp	.+0      	; 0x3358 <_ZN16CLaserControlApp3RunEv+0xbce>
    3358:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    335a:	42 e0       	ldi	r20, 0x02	; 2
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	62 e1       	ldi	r22, 0x12	; 18
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	c7 01       	movw	r24, r14
    3364:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    3368:	f7 01       	movw	r30, r14
    336a:	ee 5e       	subi	r30, 0xEE	; 238
    336c:	fe 4f       	sbci	r31, 0xFE	; 254
    336e:	20 81       	ld	r18, Z
    3370:	31 81       	ldd	r19, Z+1	; 0x01
    3372:	32 97       	sbiw	r30, 0x02	; 2
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	28 0f       	add	r18, r24
    337a:	39 1f       	adc	r19, r25
    337c:	c9 01       	movw	r24, r18
    337e:	a0 e0       	ldi	r26, 0x00	; 0
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	90 51       	subi	r25, 0x10	; 16
    3384:	af 4f       	sbci	r26, 0xFF	; 255
    3386:	bf 4f       	sbci	r27, 0xFF	; 255
    3388:	22 27       	eor	r18, r18
    338a:	38 2f       	mov	r19, r24
    338c:	49 2f       	mov	r20, r25
    338e:	5a 2f       	mov	r21, r26
    3390:	00 e0       	ldi	r16, 0x00	; 0
    3392:	11 e0       	ldi	r17, 0x01	; 1
    3394:	60 e0       	ldi	r22, 0x00	; 0
    3396:	7d e0       	ldi	r23, 0x0D	; 13
    3398:	8c e0       	ldi	r24, 0x0C	; 12
    339a:	96 e2       	ldi	r25, 0x26	; 38
    339c:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    33a0:	26 c0       	rjmp	.+76     	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    33a2:	f7 01       	movw	r30, r14
    33a4:	ee 5e       	subi	r30, 0xEE	; 238
    33a6:	fe 4f       	sbci	r31, 0xFE	; 254
    33a8:	20 81       	ld	r18, Z
    33aa:	31 81       	ldd	r19, Z+1	; 0x01
    33ac:	32 97       	sbiw	r30, 0x02	; 2
    33ae:	80 81       	ld	r24, Z
    33b0:	91 81       	ldd	r25, Z+1	; 0x01
    33b2:	28 0f       	add	r18, r24
    33b4:	39 1f       	adc	r19, r25
    33b6:	c9 01       	movw	r24, r18
    33b8:	a0 e0       	ldi	r26, 0x00	; 0
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	90 51       	subi	r25, 0x10	; 16
    33be:	af 4f       	sbci	r26, 0xFF	; 255
    33c0:	bf 4f       	sbci	r27, 0xFF	; 255
    33c2:	22 27       	eor	r18, r18
    33c4:	38 2f       	mov	r19, r24
    33c6:	49 2f       	mov	r20, r25
    33c8:	5a 2f       	mov	r21, r26
    33ca:	00 e0       	ldi	r16, 0x00	; 0
    33cc:	11 e0       	ldi	r17, 0x01	; 1
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	7d e0       	ldi	r23, 0x0D	; 13
    33d2:	8c e0       	ldi	r24, 0x0C	; 12
    33d4:	96 e2       	ldi	r25, 0x26	; 38
    33d6:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    33da:	09 c0       	rjmp	.+18     	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    33dc:	8c e0       	ldi	r24, 0x0C	; 12
    33de:	96 e2       	ldi	r25, 0x26	; 38
    33e0:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <_ZN16CLaserControlApp3RunEv+0xc64>
		default:
			Database.UnMap();
    33e6:	8c e0       	ldi	r24, 0x0C	; 12
    33e8:	96 e2       	ldi	r25, 0x26	; 38
    33ea:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
			PIC_ID_last = PIC_ID;
			SetPictureId(PICID_WORK_ERROR1);
		}
#endif
	
	if (update)
    33ee:	d7 01       	movw	r26, r14
    33f0:	51 96       	adiw	r26, 0x11	; 17
    33f2:	8c 91       	ld	r24, X
    33f4:	88 23       	and	r24, r24
    33f6:	e1 f1       	breq	.+120    	; 0x3470 <_ZN16CLaserControlApp3RunEv+0xce6>
	{		
		DGUS_LASERDIODE data;
		memcpy(&data, &laserDiodeData, sizeof(data));
    33f8:	f7 01       	movw	r30, r14
    33fa:	e0 51       	subi	r30, 0x10	; 16
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	8a e2       	ldi	r24, 0x2A	; 42
    3400:	de 01       	movw	r26, r28
    3402:	1d 96       	adiw	r26, 0x0d	; 13
    3404:	01 90       	ld	r0, Z+
    3406:	0d 92       	st	X+, r0
    3408:	8a 95       	dec	r24
    340a:	e1 f7       	brne	.-8      	; 0x3404 <_ZN16CLaserControlApp3RunEv+0xc7a>
		data.lasersettings.Energy = laserDiodeData.lasersettings.Energy + laserDiodeData.lasersettings.Energy / 5;
    340c:	f7 01       	movw	r30, r14
    340e:	e4 50       	subi	r30, 0x04	; 4
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	40 81       	ld	r20, Z
    3414:	51 81       	ldd	r21, Z+1	; 0x01
    3416:	9a 01       	movw	r18, r20
    3418:	ad ec       	ldi	r26, 0xCD	; 205
    341a:	bc ec       	ldi	r27, 0xCC	; 204
    341c:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    3420:	96 95       	lsr	r25
    3422:	87 95       	ror	r24
    3424:	96 95       	lsr	r25
    3426:	87 95       	ror	r24
    3428:	48 0f       	add	r20, r24
    342a:	59 1f       	adc	r21, r25
    342c:	49 8f       	std	Y+25, r20	; 0x19
    342e:	5a 8f       	std	Y+26, r21	; 0x1a
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&data, sizeof(DGUS_LASERDIODE));
    3430:	2a e2       	ldi	r18, 0x2A	; 42
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	ae 01       	movw	r20, r28
    3436:	43 5f       	subi	r20, 0xF3	; 243
    3438:	5f 4f       	sbci	r21, 0xFF	; 255
    343a:	61 e0       	ldi	r22, 0x01	; 1
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	c7 01       	movw	r24, r14
    3440:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    3444:	f7 01       	movw	r30, r14
    3446:	11 8a       	std	Z+17, r1	; 0x11
    3448:	13 c0       	rjmp	.+38     	; 0x3470 <_ZN16CLaserControlApp3RunEv+0xce6>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	f7 01       	movw	r30, r14
    3450:	ec 5e       	subi	r30, 0xEC	; 236
    3452:	fe 4f       	sbci	r31, 0xFE	; 254
    3454:	80 83       	st	Z, r24
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	f5 c9       	rjmp	.-3094   	; 0x2844 <_ZN16CLaserControlApp3RunEv+0xba>
						break;
					}
					
					if (Profile == PROFILE_FAST)
					{
						if (laserDiodeData.lasersettings.FlushesLimit == 3) laserDiodeData.lasersettings.FlushesLimit = 0;
    345a:	03 97       	sbiw	r24, 0x03	; 3
    345c:	09 f0       	breq	.+2      	; 0x3460 <_ZN16CLaserControlApp3RunEv+0xcd6>
    345e:	76 cb       	rjmp	.-2324   	; 0x2b4c <_ZN16CLaserControlApp3RunEv+0x3c2>
    3460:	70 cb       	rjmp	.-2336   	; 0x2b42 <_ZN16CLaserControlApp3RunEv+0x3b8>
						laserDiodeData.lasersettings.FlushesLimit = 4;
						update = true;
						break;
					}
					
					if (Profile == PROFILE_FAST)
    3462:	d7 01       	movw	r26, r14
    3464:	1e 96       	adiw	r26, 0x0e	; 14
    3466:	8c 91       	ld	r24, X
    3468:	84 30       	cpi	r24, 0x04	; 4
    346a:	09 f0       	breq	.+2      	; 0x346e <_ZN16CLaserControlApp3RunEv+0xce4>
    346c:	7b cb       	rjmp	.-2314   	; 0x2b64 <_ZN16CLaserControlApp3RunEv+0x3da>
    346e:	6e cb       	rjmp	.-2340   	; 0x2b4c <_ZN16CLaserControlApp3RunEv+0x3c2>
		memcpy(&data, &laserDiodeData, sizeof(data));
		data.lasersettings.Energy = laserDiodeData.lasersettings.Energy + laserDiodeData.lasersettings.Energy / 5;
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&data, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    3470:	ea 96       	adiw	r28, 0x3a	; 58
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	df 90       	pop	r13
    3484:	cf 90       	pop	r12
    3486:	bf 90       	pop	r11
    3488:	af 90       	pop	r10
    348a:	9f 90       	pop	r9
    348c:	8f 90       	pop	r8
    348e:	7f 90       	pop	r7
    3490:	6f 90       	pop	r6
    3492:	5f 90       	pop	r5
    3494:	4f 90       	pop	r4
    3496:	08 95       	ret

00003498 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
void CLaserControlApp::OnLaserTimer()
{
}

void CLaserControlApp::OnLaserTimerStop()
{			
    3498:	cf 92       	push	r12
    349a:	df 92       	push	r13
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	ec 01       	movw	r28, r24
	if (Profile == PROFILE_SINGLE)
    34a6:	2e 85       	ldd	r18, Y+14	; 0x0e
    34a8:	21 30       	cpi	r18, 0x01	; 1
    34aa:	09 f5       	brne	.+66     	; 0x34ee <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x56>
	{
		StopLaser();
    34ac:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
		
		if (laserTimerDutyCyclems > 100)
    34b0:	ca 52       	subi	r28, 0x2A	; 42
    34b2:	df 4f       	sbci	r29, 0xFF	; 255
    34b4:	48 81       	ld	r20, Y
    34b6:	59 81       	ldd	r21, Y+1	; 0x01
    34b8:	45 36       	cpi	r20, 0x65	; 101
    34ba:	51 05       	cpc	r21, r1
    34bc:	50 f0       	brcs	.+20     	; 0x34d2 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x3a>
			player.SoundStart(500, 50, 0);
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	42 e3       	ldi	r20, 0x32	; 50
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	64 ef       	ldi	r22, 0xF4	; 244
    34c6:	71 e0       	ldi	r23, 0x01	; 1
    34c8:	84 ee       	ldi	r24, 0xE4	; 228
    34ca:	95 e2       	ldi	r25, 0x25	; 37
    34cc:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
    34d0:	09 c0       	rjmp	.+18     	; 0x34e4 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x4c>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    34d2:	56 95       	lsr	r21
    34d4:	47 95       	ror	r20
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	64 ef       	ldi	r22, 0xF4	; 244
    34da:	71 e0       	ldi	r23, 0x01	; 1
    34dc:	84 ee       	ldi	r24, 0xE4	; 228
    34de:	95 e2       	ldi	r25, 0x25	; 37
    34e0:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    34e4:	84 ee       	ldi	r24, 0xE4	; 228
    34e6:	95 e2       	ldi	r25, 0x25	; 37
    34e8:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
		return;
    34ec:	25 c1       	rjmp	.+586    	; 0x3738 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x2a0>
	}
	
	laserCounter++;
    34ee:	fc 01       	movw	r30, r24
    34f0:	e6 52       	subi	r30, 0x26	; 38
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	91 81       	ldd	r25, Z+1	; 0x01
    34f8:	a2 81       	ldd	r26, Z+2	; 0x02
    34fa:	b3 81       	ldd	r27, Z+3	; 0x03
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	a1 1d       	adc	r26, r1
    3500:	b1 1d       	adc	r27, r1
    3502:	80 83       	st	Z, r24
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	a2 83       	std	Z+2, r26	; 0x02
    3508:	b3 83       	std	Z+3, r27	; 0x03
	laserCounterSession++;
    350a:	34 96       	adiw	r30, 0x04	; 4
    350c:	c0 80       	ld	r12, Z
    350e:	d1 80       	ldd	r13, Z+1	; 0x01
    3510:	e2 80       	ldd	r14, Z+2	; 0x02
    3512:	f3 80       	ldd	r15, Z+3	; 0x03
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	c8 1a       	sub	r12, r24
    3518:	d8 0a       	sbc	r13, r24
    351a:	e8 0a       	sbc	r14, r24
    351c:	f8 0a       	sbc	r15, r24
    351e:	c0 82       	st	Z, r12
    3520:	d1 82       	std	Z+1, r13	; 0x01
    3522:	e2 82       	std	Z+2, r14	; 0x02
    3524:	f3 82       	std	Z+3, r15	; 0x03
	
	if (Profile == PROFILE_FAST)
    3526:	24 30       	cpi	r18, 0x04	; 4
    3528:	09 f0       	breq	.+2      	; 0x352c <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x94>
    352a:	96 c0       	rjmp	.+300    	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
	{
		laserLimitCnt ++;
    352c:	70 96       	adiw	r30, 0x10	; 16
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	01 96       	adiw	r24, 0x01	; 1
    3534:	80 83       	st	Z, r24
    3536:	91 83       	std	Z+1, r25	; 0x01
		if ((laserLimitMode == 0) && ((laserCounterSession%300) == 0) && (laserCounterSession != 0))
    3538:	32 97       	sbiw	r30, 0x02	; 2
    353a:	80 81       	ld	r24, Z
    353c:	91 81       	ldd	r25, Z+1	; 0x01
    353e:	89 2b       	or	r24, r25
    3540:	39 f5       	brne	.+78     	; 0x3590 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xf8>
    3542:	c7 01       	movw	r24, r14
    3544:	b6 01       	movw	r22, r12
    3546:	2c e2       	ldi	r18, 0x2C	; 44
    3548:	31 e0       	ldi	r19, 0x01	; 1
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    3552:	67 2b       	or	r22, r23
    3554:	68 2b       	or	r22, r24
    3556:	69 2b       	or	r22, r25
    3558:	09 f0       	breq	.+2      	; 0x355c <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xc4>
    355a:	7e c0       	rjmp	.+252    	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    355c:	cd 28       	or	r12, r13
    355e:	ce 28       	or	r12, r14
    3560:	cf 28       	or	r12, r15
    3562:	09 f4       	brne	.+2      	; 0x3566 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xce>
    3564:	79 c0       	rjmp	.+242    	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
		{
			laserLimitCnt = 0;
    3566:	fe 01       	movw	r30, r28
    3568:	e2 51       	subi	r30, 0x12	; 18
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	10 82       	st	Z, r1
    356e:	11 82       	std	Z+1, r1	; 0x01
			StopLaser();
    3570:	ce 01       	movw	r24, r28
    3572:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
			player.SoundStart(500, 1000, 0);
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	48 ee       	ldi	r20, 0xE8	; 232
    357a:	53 e0       	ldi	r21, 0x03	; 3
    357c:	64 ef       	ldi	r22, 0xF4	; 244
    357e:	71 e0       	ldi	r23, 0x01	; 1
    3580:	84 ee       	ldi	r24, 0xE4	; 228
    3582:	95 e2       	ldi	r25, 0x25	; 37
    3584:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    3588:	84 ee       	ldi	r24, 0xE4	; 228
    358a:	95 e2       	ldi	r25, 0x25	; 37
    358c:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
			//StartLaser();
		}
		
		if ((laserLimitMode == 1) && ((laserCounterSession%400) == 0) && (laserCounterSession != 0))
    3590:	fe 01       	movw	r30, r28
    3592:	e4 51       	subi	r30, 0x14	; 20
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	61 f5       	brne	.+88     	; 0x35f6 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x15e>
    359e:	3e 97       	sbiw	r30, 0x0e	; 14
    35a0:	c0 80       	ld	r12, Z
    35a2:	d1 80       	ldd	r13, Z+1	; 0x01
    35a4:	e2 80       	ldd	r14, Z+2	; 0x02
    35a6:	f3 80       	ldd	r15, Z+3	; 0x03
    35a8:	c7 01       	movw	r24, r14
    35aa:	b6 01       	movw	r22, r12
    35ac:	20 e9       	ldi	r18, 0x90	; 144
    35ae:	31 e0       	ldi	r19, 0x01	; 1
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    35b8:	67 2b       	or	r22, r23
    35ba:	68 2b       	or	r22, r24
    35bc:	69 2b       	or	r22, r25
    35be:	09 f0       	breq	.+2      	; 0x35c2 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x12a>
    35c0:	4b c0       	rjmp	.+150    	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    35c2:	cd 28       	or	r12, r13
    35c4:	ce 28       	or	r12, r14
    35c6:	cf 28       	or	r12, r15
    35c8:	09 f4       	brne	.+2      	; 0x35cc <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x134>
    35ca:	46 c0       	rjmp	.+140    	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
		{
			laserLimitCnt = 0;
    35cc:	fe 01       	movw	r30, r28
    35ce:	e2 51       	subi	r30, 0x12	; 18
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	10 82       	st	Z, r1
    35d4:	11 82       	std	Z+1, r1	; 0x01
			StopLaser();
    35d6:	ce 01       	movw	r24, r28
    35d8:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
			player.SoundStart(500, 1000, 0);
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	48 ee       	ldi	r20, 0xE8	; 232
    35e0:	53 e0       	ldi	r21, 0x03	; 3
    35e2:	64 ef       	ldi	r22, 0xF4	; 244
    35e4:	71 e0       	ldi	r23, 0x01	; 1
    35e6:	84 ee       	ldi	r24, 0xE4	; 228
    35e8:	95 e2       	ldi	r25, 0x25	; 37
    35ea:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    35ee:	84 ee       	ldi	r24, 0xE4	; 228
    35f0:	95 e2       	ldi	r25, 0x25	; 37
    35f2:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
			//StartLaser();
		}
		
		if ((laserLimitMode == 2) && ((laserCounterSession%500) == 0) && (laserCounterSession != 0))
    35f6:	fe 01       	movw	r30, r28
    35f8:	e4 51       	subi	r30, 0x14	; 20
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	02 97       	sbiw	r24, 0x02	; 2
    3602:	51 f5       	brne	.+84     	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    3604:	3e 97       	sbiw	r30, 0x0e	; 14
    3606:	c0 80       	ld	r12, Z
    3608:	d1 80       	ldd	r13, Z+1	; 0x01
    360a:	e2 80       	ldd	r14, Z+2	; 0x02
    360c:	f3 80       	ldd	r15, Z+3	; 0x03
    360e:	c7 01       	movw	r24, r14
    3610:	b6 01       	movw	r22, r12
    3612:	24 ef       	ldi	r18, 0xF4	; 244
    3614:	31 e0       	ldi	r19, 0x01	; 1
    3616:	40 e0       	ldi	r20, 0x00	; 0
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    361e:	67 2b       	or	r22, r23
    3620:	68 2b       	or	r22, r24
    3622:	69 2b       	or	r22, r25
    3624:	c9 f4       	brne	.+50     	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
    3626:	cd 28       	or	r12, r13
    3628:	ce 28       	or	r12, r14
    362a:	cf 28       	or	r12, r15
    362c:	a9 f0       	breq	.+42     	; 0x3658 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c0>
		{
			laserLimitCnt = 0;
    362e:	fe 01       	movw	r30, r28
    3630:	e2 51       	subi	r30, 0x12	; 18
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	10 82       	st	Z, r1
    3636:	11 82       	std	Z+1, r1	; 0x01
			StopLaser();
    3638:	ce 01       	movw	r24, r28
    363a:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
			player.SoundStart(500, 1000, 0);
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	48 ee       	ldi	r20, 0xE8	; 232
    3642:	53 e0       	ldi	r21, 0x03	; 3
    3644:	64 ef       	ldi	r22, 0xF4	; 244
    3646:	71 e0       	ldi	r23, 0x01	; 1
    3648:	84 ee       	ldi	r24, 0xE4	; 228
    364a:	95 e2       	ldi	r25, 0x25	; 37
    364c:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    3650:	84 ee       	ldi	r24, 0xE4	; 228
    3652:	95 e2       	ldi	r25, 0x25	; 37
    3654:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
			//StartLaser();
		}
	}
	
	if (Profile == PROFILE_MEDIUM)
    3658:	8e 85       	ldd	r24, Y+14	; 0x0e
    365a:	83 30       	cpi	r24, 0x03	; 3
    365c:	09 f0       	breq	.+2      	; 0x3660 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1c8>
    365e:	4e c0       	rjmp	.+156    	; 0x36fc <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x264>
	{	
		if 	((laserMultiPulseState%2) == 0)
    3660:	fe 01       	movw	r30, r28
    3662:	ee 51       	subi	r30, 0x1E	; 30
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 81       	ld	r24, Z
    3668:	80 fd       	sbrc	r24, 0
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1dc>
			PORTF.OUTCLR = PIN0_bm;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    3672:	03 c0       	rjmp	.+6      	; 0x367a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1e2>
		else
			PORTF.OUTSET = PIN0_bm;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if 	((laserMultiPulseState%2) == 0)
    367a:	fe 01       	movw	r30, r28
    367c:	ee 51       	subi	r30, 0x1E	; 30
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	80 fd       	sbrc	r24, 0
    3684:	04 c0       	rjmp	.+8      	; 0x368e <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1f6>
			PORTF.OUTCLR = PIN1_bm;
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    368c:	03 c0       	rjmp	.+6      	; 0x3694 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x1fc>
		else
			PORTF.OUTSET = PIN1_bm;
    368e:	82 e0       	ldi	r24, 0x02	; 2
    3690:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if (laserMultiPulseState > NUM_PULSES * 2) laserMultiPulseState = 0;
    3694:	fe 01       	movw	r30, r28
    3696:	ee 51       	subi	r30, 0x1E	; 30
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	05 97       	sbiw	r24, 0x05	; 5
    36a0:	10 f0       	brcs	.+4      	; 0x36a6 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x20e>
    36a2:	10 82       	st	Z, r1
    36a4:	11 82       	std	Z+1, r1	; 0x01
		TCF0.PERBUF = laserMultiPulsePeriod[laserMultiPulseState];
    36a6:	de 01       	movw	r26, r28
    36a8:	ae 51       	subi	r26, 0x1E	; 30
    36aa:	bf 4f       	sbci	r27, 0xFF	; 255
    36ac:	ed 91       	ld	r30, X+
    36ae:	fc 91       	ld	r31, X
    36b0:	11 97       	sbiw	r26, 0x01	; 1
    36b2:	ee 58       	subi	r30, 0x8E	; 142
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	ee 0f       	add	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	ec 0f       	add	r30, r28
    36bc:	fd 1f       	adc	r31, r29
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    36c6:	90 93 37 0b 	sts	0x0B37, r25	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
		
		if (laserMultiPulseState == 3)
    36ca:	8d 91       	ld	r24, X+
    36cc:	9c 91       	ld	r25, X
    36ce:	03 97       	sbiw	r24, 0x03	; 3
    36d0:	69 f4       	brne	.+26     	; 0x36ec <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x254>
		{
			player.SoundStart(500, 100, 0);
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	44 e6       	ldi	r20, 0x64	; 100
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	64 ef       	ldi	r22, 0xF4	; 244
    36da:	71 e0       	ldi	r23, 0x01	; 1
    36dc:	84 ee       	ldi	r24, 0xE4	; 228
    36de:	95 e2       	ldi	r25, 0x25	; 37
    36e0:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    36e4:	84 ee       	ldi	r24, 0xE4	; 228
    36e6:	95 e2       	ldi	r25, 0x25	; 37
    36e8:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
		}
		
		laserMultiPulseState++;
    36ec:	ce 51       	subi	r28, 0x1E	; 30
    36ee:	df 4f       	sbci	r29, 0xFF	; 255
    36f0:	88 81       	ld	r24, Y
    36f2:	99 81       	ldd	r25, Y+1	; 0x01
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	88 83       	st	Y, r24
    36f8:	99 83       	std	Y+1, r25	; 0x01
    36fa:	1e c0       	rjmp	.+60     	; 0x3738 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x2a0>
	}
	else
	{
		if (laserTimerDutyCyclems > 100)
    36fc:	ca 52       	subi	r28, 0x2A	; 42
    36fe:	df 4f       	sbci	r29, 0xFF	; 255
    3700:	48 81       	ld	r20, Y
    3702:	59 81       	ldd	r21, Y+1	; 0x01
    3704:	45 36       	cpi	r20, 0x65	; 101
    3706:	51 05       	cpc	r21, r1
    3708:	50 f0       	brcs	.+20     	; 0x371e <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x286>
			player.SoundStart(500, 50, 0);
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	42 e3       	ldi	r20, 0x32	; 50
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	64 ef       	ldi	r22, 0xF4	; 244
    3712:	71 e0       	ldi	r23, 0x01	; 1
    3714:	84 ee       	ldi	r24, 0xE4	; 228
    3716:	95 e2       	ldi	r25, 0x25	; 37
    3718:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
    371c:	09 c0       	rjmp	.+18     	; 0x3730 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x298>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    371e:	56 95       	lsr	r21
    3720:	47 95       	ror	r20
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	64 ef       	ldi	r22, 0xF4	; 244
    3726:	71 e0       	ldi	r23, 0x01	; 1
    3728:	84 ee       	ldi	r24, 0xE4	; 228
    372a:	95 e2       	ldi	r25, 0x25	; 37
    372c:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    3730:	84 ee       	ldi	r24, 0xE4	; 228
    3732:	95 e2       	ldi	r25, 0x25	; 37
    3734:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <_ZN12CSoundPlayer9SoundStopEv>
	}
}
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	ff 90       	pop	r15
    373e:	ef 90       	pop	r14
    3740:	df 90       	pop	r13
    3742:	cf 90       	pop	r12
    3744:	08 95       	ret

00003746 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStopStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    3746:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    374a:	08 95       	ret

0000374c <_ZN16CLaserControlApp10StartLaserEv>:
	
	return true;
}

void CLaserControlApp::StartLaser()
{
    374c:	0f 93       	push	r16
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	ec 01       	movw	r28, r24
	laserLimitCnt = 0;
    3756:	fc 01       	movw	r30, r24
    3758:	e2 51       	subi	r30, 0x12	; 18
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	10 82       	st	Z, r1
    375e:	11 82       	std	Z+1, r1	; 0x01
	if (Profile == PROFILE_MEDIUM)
    3760:	8e 85       	ldd	r24, Y+14	; 0x0e
    3762:	83 30       	cpi	r24, 0x03	; 3
    3764:	09 f0       	breq	.+2      	; 0x3768 <_ZN16CLaserControlApp10StartLaserEv+0x1c>
    3766:	44 c0       	rjmp	.+136    	; 0x37f0 <_ZN16CLaserControlApp10StartLaserEv+0xa4>
	{
		laserTimer.Stop();
    3768:	8c e1       	ldi	r24, 0x1C	; 28
    376a:	96 e2       	ldi	r25, 0x26	; 38
    376c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN7CTimerF4StopEv>
		laserMultiPulseState = 2;
    3770:	fe 01       	movw	r30, r28
    3772:	ee 51       	subi	r30, 0x1E	; 30
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	80 83       	st	Z, r24
    377c:	91 83       	std	Z+1, r25	; 0x01
		PORTF.OUTSET = PIN0_bm;
    377e:	e0 ea       	ldi	r30, 0xA0	; 160
    3780:	f6 e0       	ldi	r31, 0x06	; 6
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	85 83       	std	Z+5, r24	; 0x05
		PORTF.OUTSET = PIN1_bm;
    3786:	82 e0       	ldi	r24, 0x02	; 2
    3788:	85 83       	std	Z+5, r24	; 0x05
		laserTimer.SetCOMPA(laserMultiPulsePeriod[0]/2);
    378a:	8e 01       	movw	r16, r28
    378c:	0c 51       	subi	r16, 0x1C	; 28
    378e:	1f 4f       	sbci	r17, 0xFF	; 255
    3790:	f8 01       	movw	r30, r16
    3792:	60 81       	ld	r22, Z
    3794:	71 81       	ldd	r23, Z+1	; 0x01
    3796:	76 95       	lsr	r23
    3798:	67 95       	ror	r22
    379a:	8c e1       	ldi	r24, 0x1C	; 28
    379c:	96 e2       	ldi	r25, 0x26	; 38
    379e:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserMultiPulsePeriod[0]/2);
    37a2:	f8 01       	movw	r30, r16
    37a4:	60 81       	ld	r22, Z
    37a6:	71 81       	ldd	r23, Z+1	; 0x01
    37a8:	76 95       	lsr	r23
    37aa:	67 95       	ror	r22
    37ac:	8c e1       	ldi	r24, 0x1C	; 28
    37ae:	96 e2       	ldi	r25, 0x26	; 38
    37b0:	0e 94 ef 3d 	call	0x7bde	; 0x7bde <_ZN7CTimerF8SetCOMPBEj>
		TCF0.PERBUF = laserMultiPulsePeriod[1];
    37b4:	ca 51       	subi	r28, 0x1A	; 26
    37b6:	df 4f       	sbci	r29, 0xFF	; 255
    37b8:	88 81       	ld	r24, Y
    37ba:	99 81       	ldd	r25, Y+1	; 0x01
    37bc:	e0 e0       	ldi	r30, 0x00	; 0
    37be:	fb e0       	ldi	r31, 0x0B	; 11
    37c0:	86 ab       	std	Z+54, r24	; 0x36
    37c2:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserMultiPulsePeriod[1]/2;
    37c4:	88 81       	ld	r24, Y
    37c6:	99 81       	ldd	r25, Y+1	; 0x01
    37c8:	96 95       	lsr	r25
    37ca:	87 95       	ror	r24
    37cc:	80 af       	std	Z+56, r24	; 0x38
    37ce:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserMultiPulsePeriod[1]/2;
    37d0:	88 81       	ld	r24, Y
    37d2:	99 81       	ldd	r25, Y+1	; 0x01
    37d4:	96 95       	lsr	r25
    37d6:	87 95       	ror	r24
    37d8:	82 af       	std	Z+58, r24	; 0x3a
    37da:	93 af       	std	Z+59, r25	; 0x3b
		TCF0.CNT = 0;
    37dc:	10 a2       	std	Z+32, r1	; 0x20
    37de:	11 a2       	std	Z+33, r1	; 0x21
		laserTimer.Start(laserMultiPulsePeriod[0]);
    37e0:	f8 01       	movw	r30, r16
    37e2:	60 81       	ld	r22, Z
    37e4:	71 81       	ldd	r23, Z+1	; 0x01
    37e6:	8c e1       	ldi	r24, 0x1C	; 28
    37e8:	96 e2       	ldi	r25, 0x26	; 38
    37ea:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <_ZN7CTimerF5StartEj>
    37ee:	27 c0       	rjmp	.+78     	; 0x383e <_ZN16CLaserControlApp10StartLaserEv+0xf2>
	} else
	{
		TCF0.PERBUF = laserTimerPeriod;
    37f0:	8e 01       	movw	r16, r28
    37f2:	0e 52       	subi	r16, 0x2E	; 46
    37f4:	1f 4f       	sbci	r17, 0xFF	; 255
    37f6:	f8 01       	movw	r30, r16
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	e0 e0       	ldi	r30, 0x00	; 0
    37fe:	fb e0       	ldi	r31, 0x0B	; 11
    3800:	86 ab       	std	Z+54, r24	; 0x36
    3802:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserTimerDutyCycle;
    3804:	cc 52       	subi	r28, 0x2C	; 44
    3806:	df 4f       	sbci	r29, 0xFF	; 255
    3808:	88 81       	ld	r24, Y
    380a:	99 81       	ldd	r25, Y+1	; 0x01
    380c:	80 af       	std	Z+56, r24	; 0x38
    380e:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserTimerDutyCycle;
    3810:	88 81       	ld	r24, Y
    3812:	99 81       	ldd	r25, Y+1	; 0x01
    3814:	82 af       	std	Z+58, r24	; 0x3a
    3816:	93 af       	std	Z+59, r25	; 0x3b
		laserTimer.SetCOMPA(laserTimerDutyCycle);
    3818:	68 81       	ld	r22, Y
    381a:	79 81       	ldd	r23, Y+1	; 0x01
    381c:	8c e1       	ldi	r24, 0x1C	; 28
    381e:	96 e2       	ldi	r25, 0x26	; 38
    3820:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserTimerDutyCycle);
    3824:	68 81       	ld	r22, Y
    3826:	79 81       	ldd	r23, Y+1	; 0x01
    3828:	8c e1       	ldi	r24, 0x1C	; 28
    382a:	96 e2       	ldi	r25, 0x26	; 38
    382c:	0e 94 ef 3d 	call	0x7bde	; 0x7bde <_ZN7CTimerF8SetCOMPBEj>
		//TCF0.CNT = 0;
		//laserTimer.ChannelReset(TIMER_CHANNEL_A);
		//laserTimer.ChannelReset(TIMER_CHANNEL_B);
		laserTimer.Start(laserTimerPeriod);
    3830:	f8 01       	movw	r30, r16
    3832:	60 81       	ld	r22, Z
    3834:	71 81       	ldd	r23, Z+1	; 0x01
    3836:	8c e1       	ldi	r24, 0x1C	; 28
    3838:	96 e2       	ldi	r25, 0x26	; 38
    383a:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <_ZN7CTimerF5StartEj>
	}
}
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	08 95       	ret

00003848 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    384c:	fc 01       	movw	r30, r24
    384e:	24 85       	ldd	r18, Z+12	; 0x0c
    3850:	35 85       	ldd	r19, Z+13	; 0x0d
    3852:	20 31       	cpi	r18, 0x10	; 16
    3854:	31 05       	cpc	r19, r1
    3856:	21 f0       	breq	.+8      	; 0x3860 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    3858:	20 32       	cpi	r18, 0x20	; 32
    385a:	31 05       	cpc	r19, r1
    385c:	09 f0       	breq	.+2      	; 0x3860 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    385e:	60 c0       	rjmp	.+192    	; 0x3920 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    3860:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    3862:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    3866:	80 fd       	sbrc	r24, 0
    3868:	51 c0       	rjmp	.+162    	; 0x390c <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    386a:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <__data_end>
    386e:	81 11       	cpse	r24, r1
    3870:	57 c0       	rjmp	.+174    	; 0x3920 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    3872:	fe 01       	movw	r30, r28
    3874:	ea 5d       	subi	r30, 0xDA	; 218
    3876:	fe 4f       	sbci	r31, 0xFE	; 254
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	89 2b       	or	r24, r25
    387e:	09 f4       	brne	.+2      	; 0x3882 <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    3880:	4b c0       	rjmp	.+150    	; 0x3918 <_ZN16CLaserControlApp6OnINT0Ev+0xd0>
    3882:	4e c0       	rjmp	.+156    	; 0x3920 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    3884:	8a e0       	ldi	r24, 0x0A	; 10
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	fe 01       	movw	r30, r28
    388a:	ea 5d       	subi	r30, 0xDA	; 218
    388c:	fe 4f       	sbci	r31, 0xFE	; 254
    388e:	80 83       	st	Z, r24
    3890:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    3892:	ec 54       	subi	r30, 0x4C	; 76
    3894:	f1 09       	sbc	r31, r1
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	a2 81       	ldd	r26, Z+2	; 0x02
    389c:	b3 81       	ldd	r27, Z+3	; 0x03
    389e:	01 96       	adiw	r24, 0x01	; 1
    38a0:	a1 1d       	adc	r26, r1
    38a2:	b1 1d       	adc	r27, r1
    38a4:	80 83       	st	Z, r24
    38a6:	91 83       	std	Z+1, r25	; 0x01
    38a8:	a2 83       	std	Z+2, r26	; 0x02
    38aa:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    38ac:	34 96       	adiw	r30, 0x04	; 4
    38ae:	80 81       	ld	r24, Z
    38b0:	91 81       	ldd	r25, Z+1	; 0x01
    38b2:	a2 81       	ldd	r26, Z+2	; 0x02
    38b4:	b3 81       	ldd	r27, Z+3	; 0x03
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	a1 1d       	adc	r26, r1
    38ba:	b1 1d       	adc	r27, r1
    38bc:	80 83       	st	Z, r24
    38be:	91 83       	std	Z+1, r25	; 0x01
    38c0:	a2 83       	std	Z+2, r26	; 0x02
    38c2:	b3 83       	std	Z+3, r27	; 0x03
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
						player.SoundStop();*/
					}
						
					if (laserTimerDutyCycle != 0)
    38c4:	fe 01       	movw	r30, r28
    38c6:	ec 52       	subi	r30, 0x2C	; 44
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	29 f0       	breq	.+10     	; 0x38dc <_ZN16CLaserControlApp6OnINT0Ev+0x94>
						TCF0.CNT = laserTimerDutyCycle - 1;
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    38d8:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
						
					StartLaser();
    38dc:	ce 01       	movw	r24, r28
    38de:	0e 94 a6 1b 	call	0x374c	; 0x374c <_ZN16CLaserControlApp10StartLaserEv>
					
					if (Profile == PROFILE_SINGLE)
    38e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    38e4:	81 30       	cpi	r24, 0x01	; 1
    38e6:	49 f4       	brne	.+18     	; 0x38fa <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    38e8:	ff ef       	ldi	r31, 0xFF	; 255
    38ea:	27 e8       	ldi	r18, 0x87	; 135
    38ec:	83 e1       	ldi	r24, 0x13	; 19
    38ee:	f1 50       	subi	r31, 0x01	; 1
    38f0:	20 40       	sbci	r18, 0x00	; 0
    38f2:	80 40       	sbci	r24, 0x00	; 0
    38f4:	e1 f7       	brne	.-8      	; 0x38ee <_ZN16CLaserControlApp6OnINT0Ev+0xa6>
    38f6:	00 c0       	rjmp	.+0      	; 0x38f8 <_ZN16CLaserControlApp6OnINT0Ev+0xb0>
    38f8:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    38fa:	e0 e4       	ldi	r30, 0x40	; 64
    38fc:	f6 e0       	ldi	r31, 0x06	; 6
    38fe:	84 85       	ldd	r24, Z+12	; 0x0c
    3900:	8e 7f       	andi	r24, 0xFE	; 254
    3902:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <__data_end>
    390a:	0a c0       	rjmp	.+20     	; 0x3920 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    390c:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <__data_end>
				
				StopLaser();
    3910:	ce 01       	movw	r24, r28
    3912:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN16CLaserControlApp9StopLaserEv>
    3916:	04 c0       	rjmp	.+8      	; 0x3920 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    3918:	8e 85       	ldd	r24, Y+14	; 0x0e
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	99 f6       	brne	.-90     	; 0x38c4 <_ZN16CLaserControlApp6OnINT0Ev+0x7c>
    391e:	b2 cf       	rjmp	.-156    	; 0x3884 <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    3926:	0e 94 24 1c 	call	0x3848	; 0x3848 <_ZN16CLaserControlApp6OnINT0Ev>
    392a:	08 95       	ret

0000392c <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	7c 01       	movw	r14, r24
    393e:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    3940:	41 15       	cp	r20, r1
    3942:	51 05       	cpc	r21, r1
    3944:	b1 f0       	breq	.+44     	; 0x3972 <_Z11ConvertDataPvS_jj+0x46>
    3946:	6b 01       	movw	r12, r22
    3948:	c4 0e       	add	r12, r20
    394a:	d5 1e       	adc	r13, r21
    394c:	eb 01       	movw	r28, r22
    394e:	26 1b       	sub	r18, r22
    3950:	37 0b       	sbc	r19, r23
    3952:	c9 01       	movw	r24, r18
    3954:	8c 0f       	add	r24, r28
    3956:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    3958:	b8 01       	movw	r22, r16
    395a:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    395e:	fc 01       	movw	r30, r24
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	e4 27       	eor	r30, r20
    3964:	ee 0d       	add	r30, r14
    3966:	ff 1d       	adc	r31, r15
    3968:	89 91       	ld	r24, Y+
    396a:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    396c:	cc 15       	cp	r28, r12
    396e:	dd 05       	cpc	r29, r13
    3970:	81 f7       	brne	.-32     	; 0x3952 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	1f 91       	pop	r17
    3978:	0f 91       	pop	r16
    397a:	ff 90       	pop	r15
    397c:	ef 90       	pop	r14
    397e:	df 90       	pop	r13
    3980:	cf 90       	pop	r12
    3982:	08 95       	ret

00003984 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    3984:	68 17       	cp	r22, r24
    3986:	79 07       	cpc	r23, r25
    3988:	08 f4       	brcc	.+2      	; 0x398c <_Z3minjj+0x8>
    398a:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    398c:	08 95       	ret

0000398e <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    398e:	86 17       	cp	r24, r22
    3990:	97 07       	cpc	r25, r23
    3992:	08 f4       	brcc	.+2      	; 0x3996 <_Z3maxjj+0x8>
    3994:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    3996:	08 95       	ret

00003998 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    3998:	98 27       	eor	r25, r24
    399a:	89 27       	eor	r24, r25
    399c:	98 27       	eor	r25, r24
    399e:	08 95       	ret

000039a0 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    39a0:	9b 01       	movw	r18, r22
    39a2:	bc 01       	movw	r22, r24
    39a4:	c9 01       	movw	r24, r18
}
    39a6:	08 95       	ret

000039a8 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    39a8:	08 95       	ret

000039aa <_ZN4CSPID1Ev>:
    39aa:	08 95       	ret

000039ac <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    39ac:	ef 92       	push	r14
    39ae:	0f 93       	push	r16
    39b0:	1f 93       	push	r17
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	ec 01       	movw	r28, r24
    39b8:	e0 e8       	ldi	r30, 0x80	; 128
    39ba:	f6 e0       	ldi	r31, 0x06	; 6
    39bc:	90 eb       	ldi	r25, 0xB0	; 176
    39be:	91 83       	std	Z+1, r25	; 0x01
    39c0:	80 ec       	ldi	r24, 0xC0	; 192
    39c2:	84 8b       	std	Z+20, r24	; 0x14
    39c4:	85 8b       	std	Z+21, r24	; 0x15
    39c6:	87 8b       	std	Z+23, r24	; 0x17
    39c8:	95 83       	std	Z+5, r25	; 0x05
    39ca:	61 11       	cpse	r22, r1
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    39ce:	80 e4       	ldi	r24, 0x40	; 64
    39d0:	01 c0       	rjmp	.+2      	; 0x39d4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    39d2:	80 e5       	ldi	r24, 0x50	; 80
    39d4:	01 11       	cpse	r16, r1
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	01 c0       	rjmp	.+2      	; 0x39de <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    39dc:	30 e8       	ldi	r19, 0x80	; 128
    39de:	41 11       	cpse	r20, r1
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	01 c0       	rjmp	.+2      	; 0x39e8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    39e6:	90 e2       	ldi	r25, 0x20	; 32
    39e8:	22 0f       	add	r18, r18
    39ea:	22 0f       	add	r18, r18
    39ec:	e2 2a       	or	r14, r18
    39ee:	e8 2a       	or	r14, r24
    39f0:	e3 2a       	or	r14, r19
    39f2:	e9 2a       	or	r14, r25
    39f4:	00 ec       	ldi	r16, 0xC0	; 192
    39f6:	1a e0       	ldi	r17, 0x0A	; 10
    39f8:	f8 01       	movw	r30, r16
    39fa:	e0 82       	st	Z, r14
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	0e 94 34 40 	call	0x8068	; 0x8068 <malloc>
    3a04:	88 83       	st	Y, r24
    3a06:	99 83       	std	Y+1, r25	; 0x01
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	81 83       	std	Z+1, r24	; 0x01
    3a0e:	8f e4       	ldi	r24, 0x4F	; 79
    3a10:	9d e1       	ldi	r25, 0x1D	; 29
    3a12:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <InterruptFuncTable+0x72>
    3a16:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <InterruptFuncTable+0x73>
    3a1a:	c0 93 2e 24 	sts	0x242E, r28	; 0x80242e <InterruptSenderTable+0x72>
    3a1e:	d0 93 2f 24 	sts	0x242F, r29	; 0x80242f <InterruptSenderTable+0x73>
    3a22:	df 91       	pop	r29
    3a24:	cf 91       	pop	r28
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	ef 90       	pop	r14
    3a2c:	08 95       	ret

00003a2e <_ZN4CSPI4SendEPhj>:
    3a2e:	cf 93       	push	r28
    3a30:	df 93       	push	r29
    3a32:	ec 01       	movw	r28, r24
    3a34:	4a 83       	std	Y+2, r20	; 0x02
    3a36:	5b 83       	std	Y+3, r21	; 0x03
    3a38:	4c 83       	std	Y+4, r20	; 0x04
    3a3a:	5d 83       	std	Y+5, r21	; 0x05
    3a3c:	88 81       	ld	r24, Y
    3a3e:	99 81       	ldd	r25, Y+1	; 0x01
    3a40:	0e 94 61 41 	call	0x82c2	; 0x82c2 <memcpy>
    3a44:	80 e1       	ldi	r24, 0x10	; 16
    3a46:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3a4a:	88 81       	ld	r24, Y
    3a4c:	99 81       	ldd	r25, Y+1	; 0x01
    3a4e:	4a 81       	ldd	r20, Y+2	; 0x02
    3a50:	5b 81       	ldd	r21, Y+3	; 0x03
    3a52:	9a 01       	movw	r18, r20
    3a54:	21 50       	subi	r18, 0x01	; 1
    3a56:	31 09       	sbc	r19, r1
    3a58:	2a 83       	std	Y+2, r18	; 0x02
    3a5a:	3b 83       	std	Y+3, r19	; 0x03
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e2 0f       	add	r30, r18
    3a60:	f3 1f       	adc	r31, r19
    3a62:	80 81       	ld	r24, Z
    3a64:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    3a6e:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	89 2b       	or	r24, r25
    3a76:	79 f0       	breq	.+30     	; 0x3a96 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    3a78:	40 81       	ld	r20, Z
    3a7a:	51 81       	ldd	r21, Z+1	; 0x01
    3a7c:	22 81       	ldd	r18, Z+2	; 0x02
    3a7e:	33 81       	ldd	r19, Z+3	; 0x03
    3a80:	c9 01       	movw	r24, r18
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	82 83       	std	Z+2, r24	; 0x02
    3a86:	93 83       	std	Z+3, r25	; 0x03
    3a88:	fa 01       	movw	r30, r20
    3a8a:	e8 0f       	add	r30, r24
    3a8c:	f9 1f       	adc	r31, r25
    3a8e:	80 81       	ld	r24, Z
    3a90:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    3a94:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    3a96:	80 e1       	ldi	r24, 0x10	; 16
    3a98:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3a9c:	08 95       	ret

00003a9e <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    3a9e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_ZN4CSPI10OnTransmitEv>
    3aa2:	08 95       	ret

00003aa4 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    3aa4:	24 e9       	ldi	r18, 0x94	; 148
    3aa6:	31 e2       	ldi	r19, 0x21	; 33
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	20 83       	st	Z, r18
    3aac:	31 83       	std	Z+1, r19	; 0x01
    3aae:	08 95       	ret

00003ab0 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    3ab0:	08 95       	ret

00003ab2 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    3ab2:	28 eb       	ldi	r18, 0xB8	; 184
    3ab4:	31 e2       	ldi	r19, 0x21	; 33
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	20 83       	st	Z, r18
    3aba:	31 83       	std	Z+1, r19	; 0x01
    3abc:	08 95       	ret

00003abe <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    3abe:	08 95       	ret

00003ac0 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    3ac0:	26 ed       	ldi	r18, 0xD6	; 214
    3ac2:	31 e2       	ldi	r19, 0x21	; 33
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	20 83       	st	Z, r18
    3ac8:	31 83       	std	Z+1, r19	; 0x01
    3aca:	08 95       	ret

00003acc <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    3acc:	08 95       	ret

00003ace <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    3ace:	1f 92       	push	r1
    3ad0:	0f 92       	push	r0
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	0f 92       	push	r0
    3ad6:	11 24       	eor	r1, r1
    3ad8:	0b b6       	in	r0, 0x3b	; 59
    3ada:	0f 92       	push	r0
    3adc:	2f 93       	push	r18
    3ade:	3f 93       	push	r19
    3ae0:	4f 93       	push	r20
    3ae2:	5f 93       	push	r21
    3ae4:	6f 93       	push	r22
    3ae6:	7f 93       	push	r23
    3ae8:	8f 93       	push	r24
    3aea:	9f 93       	push	r25
    3aec:	af 93       	push	r26
    3aee:	bf 93       	push	r27
    3af0:	ef 93       	push	r30
    3af2:	ff 93       	push	r31
    3af4:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <InterruptFuncTable+0x2>
    3af8:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <InterruptFuncTable+0x3>
    3afc:	30 97       	sbiw	r30, 0x00	; 0
    3afe:	29 f0       	breq	.+10     	; 0x3b0a <__vector_1+0x3c>
    3b00:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <InterruptSenderTable+0x2>
    3b04:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <InterruptSenderTable+0x3>
    3b08:	19 95       	eicall
    3b0a:	ff 91       	pop	r31
    3b0c:	ef 91       	pop	r30
    3b0e:	bf 91       	pop	r27
    3b10:	af 91       	pop	r26
    3b12:	9f 91       	pop	r25
    3b14:	8f 91       	pop	r24
    3b16:	7f 91       	pop	r23
    3b18:	6f 91       	pop	r22
    3b1a:	5f 91       	pop	r21
    3b1c:	4f 91       	pop	r20
    3b1e:	3f 91       	pop	r19
    3b20:	2f 91       	pop	r18
    3b22:	0f 90       	pop	r0
    3b24:	0b be       	out	0x3b, r0	; 59
    3b26:	0f 90       	pop	r0
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	0f 90       	pop	r0
    3b2c:	1f 90       	pop	r1
    3b2e:	18 95       	reti

00003b30 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    3b30:	1f 92       	push	r1
    3b32:	0f 92       	push	r0
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	0f 92       	push	r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	0b b6       	in	r0, 0x3b	; 59
    3b3c:	0f 92       	push	r0
    3b3e:	2f 93       	push	r18
    3b40:	3f 93       	push	r19
    3b42:	4f 93       	push	r20
    3b44:	5f 93       	push	r21
    3b46:	6f 93       	push	r22
    3b48:	7f 93       	push	r23
    3b4a:	8f 93       	push	r24
    3b4c:	9f 93       	push	r25
    3b4e:	af 93       	push	r26
    3b50:	bf 93       	push	r27
    3b52:	ef 93       	push	r30
    3b54:	ff 93       	push	r31
    3b56:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <InterruptFuncTable+0x4>
    3b5a:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <InterruptFuncTable+0x5>
    3b5e:	30 97       	sbiw	r30, 0x00	; 0
    3b60:	29 f0       	breq	.+10     	; 0x3b6c <__vector_2+0x3c>
    3b62:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <InterruptSenderTable+0x4>
    3b66:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <InterruptSenderTable+0x5>
    3b6a:	19 95       	eicall
    3b6c:	ff 91       	pop	r31
    3b6e:	ef 91       	pop	r30
    3b70:	bf 91       	pop	r27
    3b72:	af 91       	pop	r26
    3b74:	9f 91       	pop	r25
    3b76:	8f 91       	pop	r24
    3b78:	7f 91       	pop	r23
    3b7a:	6f 91       	pop	r22
    3b7c:	5f 91       	pop	r21
    3b7e:	4f 91       	pop	r20
    3b80:	3f 91       	pop	r19
    3b82:	2f 91       	pop	r18
    3b84:	0f 90       	pop	r0
    3b86:	0b be       	out	0x3b, r0	; 59
    3b88:	0f 90       	pop	r0
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	0f 90       	pop	r0
    3b8e:	1f 90       	pop	r1
    3b90:	18 95       	reti

00003b92 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    3b92:	1f 92       	push	r1
    3b94:	0f 92       	push	r0
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	0f 92       	push	r0
    3b9a:	11 24       	eor	r1, r1
    3b9c:	0b b6       	in	r0, 0x3b	; 59
    3b9e:	0f 92       	push	r0
    3ba0:	2f 93       	push	r18
    3ba2:	3f 93       	push	r19
    3ba4:	4f 93       	push	r20
    3ba6:	5f 93       	push	r21
    3ba8:	6f 93       	push	r22
    3baa:	7f 93       	push	r23
    3bac:	8f 93       	push	r24
    3bae:	9f 93       	push	r25
    3bb0:	af 93       	push	r26
    3bb2:	bf 93       	push	r27
    3bb4:	ef 93       	push	r30
    3bb6:	ff 93       	push	r31
    3bb8:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <InterruptFuncTable+0x6>
    3bbc:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <InterruptFuncTable+0x7>
    3bc0:	30 97       	sbiw	r30, 0x00	; 0
    3bc2:	29 f0       	breq	.+10     	; 0x3bce <__vector_3+0x3c>
    3bc4:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <InterruptSenderTable+0x6>
    3bc8:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <InterruptSenderTable+0x7>
    3bcc:	19 95       	eicall
    3bce:	ff 91       	pop	r31
    3bd0:	ef 91       	pop	r30
    3bd2:	bf 91       	pop	r27
    3bd4:	af 91       	pop	r26
    3bd6:	9f 91       	pop	r25
    3bd8:	8f 91       	pop	r24
    3bda:	7f 91       	pop	r23
    3bdc:	6f 91       	pop	r22
    3bde:	5f 91       	pop	r21
    3be0:	4f 91       	pop	r20
    3be2:	3f 91       	pop	r19
    3be4:	2f 91       	pop	r18
    3be6:	0f 90       	pop	r0
    3be8:	0b be       	out	0x3b, r0	; 59
    3bea:	0f 90       	pop	r0
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	0f 90       	pop	r0
    3bf0:	1f 90       	pop	r1
    3bf2:	18 95       	reti

00003bf4 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    3bf4:	1f 92       	push	r1
    3bf6:	0f 92       	push	r0
    3bf8:	0f b6       	in	r0, 0x3f	; 63
    3bfa:	0f 92       	push	r0
    3bfc:	11 24       	eor	r1, r1
    3bfe:	0b b6       	in	r0, 0x3b	; 59
    3c00:	0f 92       	push	r0
    3c02:	2f 93       	push	r18
    3c04:	3f 93       	push	r19
    3c06:	4f 93       	push	r20
    3c08:	5f 93       	push	r21
    3c0a:	6f 93       	push	r22
    3c0c:	7f 93       	push	r23
    3c0e:	8f 93       	push	r24
    3c10:	9f 93       	push	r25
    3c12:	af 93       	push	r26
    3c14:	bf 93       	push	r27
    3c16:	ef 93       	push	r30
    3c18:	ff 93       	push	r31
    3c1a:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <InterruptFuncTable+0x8>
    3c1e:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <InterruptFuncTable+0x9>
    3c22:	30 97       	sbiw	r30, 0x00	; 0
    3c24:	29 f0       	breq	.+10     	; 0x3c30 <__vector_4+0x3c>
    3c26:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <InterruptSenderTable+0x8>
    3c2a:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <InterruptSenderTable+0x9>
    3c2e:	19 95       	eicall
    3c30:	ff 91       	pop	r31
    3c32:	ef 91       	pop	r30
    3c34:	bf 91       	pop	r27
    3c36:	af 91       	pop	r26
    3c38:	9f 91       	pop	r25
    3c3a:	8f 91       	pop	r24
    3c3c:	7f 91       	pop	r23
    3c3e:	6f 91       	pop	r22
    3c40:	5f 91       	pop	r21
    3c42:	4f 91       	pop	r20
    3c44:	3f 91       	pop	r19
    3c46:	2f 91       	pop	r18
    3c48:	0f 90       	pop	r0
    3c4a:	0b be       	out	0x3b, r0	; 59
    3c4c:	0f 90       	pop	r0
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	0f 90       	pop	r0
    3c52:	1f 90       	pop	r1
    3c54:	18 95       	reti

00003c56 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    3c56:	1f 92       	push	r1
    3c58:	0f 92       	push	r0
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	0f 92       	push	r0
    3c5e:	11 24       	eor	r1, r1
    3c60:	0b b6       	in	r0, 0x3b	; 59
    3c62:	0f 92       	push	r0
    3c64:	2f 93       	push	r18
    3c66:	3f 93       	push	r19
    3c68:	4f 93       	push	r20
    3c6a:	5f 93       	push	r21
    3c6c:	6f 93       	push	r22
    3c6e:	7f 93       	push	r23
    3c70:	8f 93       	push	r24
    3c72:	9f 93       	push	r25
    3c74:	af 93       	push	r26
    3c76:	bf 93       	push	r27
    3c78:	ef 93       	push	r30
    3c7a:	ff 93       	push	r31
    3c7c:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <InterruptFuncTable+0xa>
    3c80:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <InterruptFuncTable+0xb>
    3c84:	30 97       	sbiw	r30, 0x00	; 0
    3c86:	29 f0       	breq	.+10     	; 0x3c92 <__vector_5+0x3c>
    3c88:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <InterruptSenderTable+0xa>
    3c8c:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <InterruptSenderTable+0xb>
    3c90:	19 95       	eicall
    3c92:	ff 91       	pop	r31
    3c94:	ef 91       	pop	r30
    3c96:	bf 91       	pop	r27
    3c98:	af 91       	pop	r26
    3c9a:	9f 91       	pop	r25
    3c9c:	8f 91       	pop	r24
    3c9e:	7f 91       	pop	r23
    3ca0:	6f 91       	pop	r22
    3ca2:	5f 91       	pop	r21
    3ca4:	4f 91       	pop	r20
    3ca6:	3f 91       	pop	r19
    3ca8:	2f 91       	pop	r18
    3caa:	0f 90       	pop	r0
    3cac:	0b be       	out	0x3b, r0	; 59
    3cae:	0f 90       	pop	r0
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	0f 90       	pop	r0
    3cb4:	1f 90       	pop	r1
    3cb6:	18 95       	reti

00003cb8 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    3cb8:	1f 92       	push	r1
    3cba:	0f 92       	push	r0
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	0f 92       	push	r0
    3cc0:	11 24       	eor	r1, r1
    3cc2:	0b b6       	in	r0, 0x3b	; 59
    3cc4:	0f 92       	push	r0
    3cc6:	2f 93       	push	r18
    3cc8:	3f 93       	push	r19
    3cca:	4f 93       	push	r20
    3ccc:	5f 93       	push	r21
    3cce:	6f 93       	push	r22
    3cd0:	7f 93       	push	r23
    3cd2:	8f 93       	push	r24
    3cd4:	9f 93       	push	r25
    3cd6:	af 93       	push	r26
    3cd8:	bf 93       	push	r27
    3cda:	ef 93       	push	r30
    3cdc:	ff 93       	push	r31
    3cde:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <InterruptFuncTable+0xc>
    3ce2:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <InterruptFuncTable+0xd>
    3ce6:	30 97       	sbiw	r30, 0x00	; 0
    3ce8:	29 f0       	breq	.+10     	; 0x3cf4 <__vector_6+0x3c>
    3cea:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <InterruptSenderTable+0xc>
    3cee:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <InterruptSenderTable+0xd>
    3cf2:	19 95       	eicall
    3cf4:	ff 91       	pop	r31
    3cf6:	ef 91       	pop	r30
    3cf8:	bf 91       	pop	r27
    3cfa:	af 91       	pop	r26
    3cfc:	9f 91       	pop	r25
    3cfe:	8f 91       	pop	r24
    3d00:	7f 91       	pop	r23
    3d02:	6f 91       	pop	r22
    3d04:	5f 91       	pop	r21
    3d06:	4f 91       	pop	r20
    3d08:	3f 91       	pop	r19
    3d0a:	2f 91       	pop	r18
    3d0c:	0f 90       	pop	r0
    3d0e:	0b be       	out	0x3b, r0	; 59
    3d10:	0f 90       	pop	r0
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	0f 90       	pop	r0
    3d16:	1f 90       	pop	r1
    3d18:	18 95       	reti

00003d1a <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    3d1a:	1f 92       	push	r1
    3d1c:	0f 92       	push	r0
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	0f 92       	push	r0
    3d22:	11 24       	eor	r1, r1
    3d24:	0b b6       	in	r0, 0x3b	; 59
    3d26:	0f 92       	push	r0
    3d28:	2f 93       	push	r18
    3d2a:	3f 93       	push	r19
    3d2c:	4f 93       	push	r20
    3d2e:	5f 93       	push	r21
    3d30:	6f 93       	push	r22
    3d32:	7f 93       	push	r23
    3d34:	8f 93       	push	r24
    3d36:	9f 93       	push	r25
    3d38:	af 93       	push	r26
    3d3a:	bf 93       	push	r27
    3d3c:	ef 93       	push	r30
    3d3e:	ff 93       	push	r31
    3d40:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <InterruptFuncTable+0xe>
    3d44:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <InterruptFuncTable+0xf>
    3d48:	30 97       	sbiw	r30, 0x00	; 0
    3d4a:	29 f0       	breq	.+10     	; 0x3d56 <__vector_7+0x3c>
    3d4c:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <InterruptSenderTable+0xe>
    3d50:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <InterruptSenderTable+0xf>
    3d54:	19 95       	eicall
    3d56:	ff 91       	pop	r31
    3d58:	ef 91       	pop	r30
    3d5a:	bf 91       	pop	r27
    3d5c:	af 91       	pop	r26
    3d5e:	9f 91       	pop	r25
    3d60:	8f 91       	pop	r24
    3d62:	7f 91       	pop	r23
    3d64:	6f 91       	pop	r22
    3d66:	5f 91       	pop	r21
    3d68:	4f 91       	pop	r20
    3d6a:	3f 91       	pop	r19
    3d6c:	2f 91       	pop	r18
    3d6e:	0f 90       	pop	r0
    3d70:	0b be       	out	0x3b, r0	; 59
    3d72:	0f 90       	pop	r0
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	0f 90       	pop	r0
    3d78:	1f 90       	pop	r1
    3d7a:	18 95       	reti

00003d7c <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    3d7c:	1f 92       	push	r1
    3d7e:	0f 92       	push	r0
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	0f 92       	push	r0
    3d84:	11 24       	eor	r1, r1
    3d86:	0b b6       	in	r0, 0x3b	; 59
    3d88:	0f 92       	push	r0
    3d8a:	2f 93       	push	r18
    3d8c:	3f 93       	push	r19
    3d8e:	4f 93       	push	r20
    3d90:	5f 93       	push	r21
    3d92:	6f 93       	push	r22
    3d94:	7f 93       	push	r23
    3d96:	8f 93       	push	r24
    3d98:	9f 93       	push	r25
    3d9a:	af 93       	push	r26
    3d9c:	bf 93       	push	r27
    3d9e:	ef 93       	push	r30
    3da0:	ff 93       	push	r31
    3da2:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <InterruptFuncTable+0x10>
    3da6:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <InterruptFuncTable+0x11>
    3daa:	30 97       	sbiw	r30, 0x00	; 0
    3dac:	29 f0       	breq	.+10     	; 0x3db8 <__vector_8+0x3c>
    3dae:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <InterruptSenderTable+0x10>
    3db2:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <InterruptSenderTable+0x11>
    3db6:	19 95       	eicall
    3db8:	ff 91       	pop	r31
    3dba:	ef 91       	pop	r30
    3dbc:	bf 91       	pop	r27
    3dbe:	af 91       	pop	r26
    3dc0:	9f 91       	pop	r25
    3dc2:	8f 91       	pop	r24
    3dc4:	7f 91       	pop	r23
    3dc6:	6f 91       	pop	r22
    3dc8:	5f 91       	pop	r21
    3dca:	4f 91       	pop	r20
    3dcc:	3f 91       	pop	r19
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	0b be       	out	0x3b, r0	; 59
    3dd4:	0f 90       	pop	r0
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	0f 90       	pop	r0
    3dda:	1f 90       	pop	r1
    3ddc:	18 95       	reti

00003dde <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    3dde:	1f 92       	push	r1
    3de0:	0f 92       	push	r0
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	0f 92       	push	r0
    3de6:	11 24       	eor	r1, r1
    3de8:	0b b6       	in	r0, 0x3b	; 59
    3dea:	0f 92       	push	r0
    3dec:	2f 93       	push	r18
    3dee:	3f 93       	push	r19
    3df0:	4f 93       	push	r20
    3df2:	5f 93       	push	r21
    3df4:	6f 93       	push	r22
    3df6:	7f 93       	push	r23
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	ef 93       	push	r30
    3e02:	ff 93       	push	r31
    3e04:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <InterruptFuncTable+0x12>
    3e08:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <InterruptFuncTable+0x13>
    3e0c:	30 97       	sbiw	r30, 0x00	; 0
    3e0e:	29 f0       	breq	.+10     	; 0x3e1a <__vector_9+0x3c>
    3e10:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <InterruptSenderTable+0x12>
    3e14:	90 91 cf 23 	lds	r25, 0x23CF	; 0x8023cf <InterruptSenderTable+0x13>
    3e18:	19 95       	eicall
    3e1a:	ff 91       	pop	r31
    3e1c:	ef 91       	pop	r30
    3e1e:	bf 91       	pop	r27
    3e20:	af 91       	pop	r26
    3e22:	9f 91       	pop	r25
    3e24:	8f 91       	pop	r24
    3e26:	7f 91       	pop	r23
    3e28:	6f 91       	pop	r22
    3e2a:	5f 91       	pop	r21
    3e2c:	4f 91       	pop	r20
    3e2e:	3f 91       	pop	r19
    3e30:	2f 91       	pop	r18
    3e32:	0f 90       	pop	r0
    3e34:	0b be       	out	0x3b, r0	; 59
    3e36:	0f 90       	pop	r0
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	0f 90       	pop	r0
    3e3c:	1f 90       	pop	r1
    3e3e:	18 95       	reti

00003e40 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    3e40:	1f 92       	push	r1
    3e42:	0f 92       	push	r0
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	0f 92       	push	r0
    3e48:	11 24       	eor	r1, r1
    3e4a:	0b b6       	in	r0, 0x3b	; 59
    3e4c:	0f 92       	push	r0
    3e4e:	2f 93       	push	r18
    3e50:	3f 93       	push	r19
    3e52:	4f 93       	push	r20
    3e54:	5f 93       	push	r21
    3e56:	6f 93       	push	r22
    3e58:	7f 93       	push	r23
    3e5a:	8f 93       	push	r24
    3e5c:	9f 93       	push	r25
    3e5e:	af 93       	push	r26
    3e60:	bf 93       	push	r27
    3e62:	ef 93       	push	r30
    3e64:	ff 93       	push	r31
    3e66:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <InterruptFuncTable+0x14>
    3e6a:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <InterruptFuncTable+0x15>
    3e6e:	30 97       	sbiw	r30, 0x00	; 0
    3e70:	29 f0       	breq	.+10     	; 0x3e7c <__vector_10+0x3c>
    3e72:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <InterruptSenderTable+0x14>
    3e76:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <InterruptSenderTable+0x15>
    3e7a:	19 95       	eicall
    3e7c:	ff 91       	pop	r31
    3e7e:	ef 91       	pop	r30
    3e80:	bf 91       	pop	r27
    3e82:	af 91       	pop	r26
    3e84:	9f 91       	pop	r25
    3e86:	8f 91       	pop	r24
    3e88:	7f 91       	pop	r23
    3e8a:	6f 91       	pop	r22
    3e8c:	5f 91       	pop	r21
    3e8e:	4f 91       	pop	r20
    3e90:	3f 91       	pop	r19
    3e92:	2f 91       	pop	r18
    3e94:	0f 90       	pop	r0
    3e96:	0b be       	out	0x3b, r0	; 59
    3e98:	0f 90       	pop	r0
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	0f 90       	pop	r0
    3e9e:	1f 90       	pop	r1
    3ea0:	18 95       	reti

00003ea2 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    3ea2:	1f 92       	push	r1
    3ea4:	0f 92       	push	r0
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	0f 92       	push	r0
    3eaa:	11 24       	eor	r1, r1
    3eac:	0b b6       	in	r0, 0x3b	; 59
    3eae:	0f 92       	push	r0
    3eb0:	2f 93       	push	r18
    3eb2:	3f 93       	push	r19
    3eb4:	4f 93       	push	r20
    3eb6:	5f 93       	push	r21
    3eb8:	6f 93       	push	r22
    3eba:	7f 93       	push	r23
    3ebc:	8f 93       	push	r24
    3ebe:	9f 93       	push	r25
    3ec0:	af 93       	push	r26
    3ec2:	bf 93       	push	r27
    3ec4:	ef 93       	push	r30
    3ec6:	ff 93       	push	r31
    3ec8:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <InterruptFuncTable+0x16>
    3ecc:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <InterruptFuncTable+0x17>
    3ed0:	30 97       	sbiw	r30, 0x00	; 0
    3ed2:	29 f0       	breq	.+10     	; 0x3ede <__vector_11+0x3c>
    3ed4:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <InterruptSenderTable+0x16>
    3ed8:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <InterruptSenderTable+0x17>
    3edc:	19 95       	eicall
    3ede:	ff 91       	pop	r31
    3ee0:	ef 91       	pop	r30
    3ee2:	bf 91       	pop	r27
    3ee4:	af 91       	pop	r26
    3ee6:	9f 91       	pop	r25
    3ee8:	8f 91       	pop	r24
    3eea:	7f 91       	pop	r23
    3eec:	6f 91       	pop	r22
    3eee:	5f 91       	pop	r21
    3ef0:	4f 91       	pop	r20
    3ef2:	3f 91       	pop	r19
    3ef4:	2f 91       	pop	r18
    3ef6:	0f 90       	pop	r0
    3ef8:	0b be       	out	0x3b, r0	; 59
    3efa:	0f 90       	pop	r0
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	0f 90       	pop	r0
    3f00:	1f 90       	pop	r1
    3f02:	18 95       	reti

00003f04 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    3f04:	1f 92       	push	r1
    3f06:	0f 92       	push	r0
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	0f 92       	push	r0
    3f0c:	11 24       	eor	r1, r1
    3f0e:	0b b6       	in	r0, 0x3b	; 59
    3f10:	0f 92       	push	r0
    3f12:	2f 93       	push	r18
    3f14:	3f 93       	push	r19
    3f16:	4f 93       	push	r20
    3f18:	5f 93       	push	r21
    3f1a:	6f 93       	push	r22
    3f1c:	7f 93       	push	r23
    3f1e:	8f 93       	push	r24
    3f20:	9f 93       	push	r25
    3f22:	af 93       	push	r26
    3f24:	bf 93       	push	r27
    3f26:	ef 93       	push	r30
    3f28:	ff 93       	push	r31
    3f2a:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <InterruptFuncTable+0x18>
    3f2e:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <InterruptFuncTable+0x19>
    3f32:	30 97       	sbiw	r30, 0x00	; 0
    3f34:	29 f0       	breq	.+10     	; 0x3f40 <__vector_12+0x3c>
    3f36:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <InterruptSenderTable+0x18>
    3f3a:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <InterruptSenderTable+0x19>
    3f3e:	19 95       	eicall
    3f40:	ff 91       	pop	r31
    3f42:	ef 91       	pop	r30
    3f44:	bf 91       	pop	r27
    3f46:	af 91       	pop	r26
    3f48:	9f 91       	pop	r25
    3f4a:	8f 91       	pop	r24
    3f4c:	7f 91       	pop	r23
    3f4e:	6f 91       	pop	r22
    3f50:	5f 91       	pop	r21
    3f52:	4f 91       	pop	r20
    3f54:	3f 91       	pop	r19
    3f56:	2f 91       	pop	r18
    3f58:	0f 90       	pop	r0
    3f5a:	0b be       	out	0x3b, r0	; 59
    3f5c:	0f 90       	pop	r0
    3f5e:	0f be       	out	0x3f, r0	; 63
    3f60:	0f 90       	pop	r0
    3f62:	1f 90       	pop	r1
    3f64:	18 95       	reti

00003f66 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    3f66:	1f 92       	push	r1
    3f68:	0f 92       	push	r0
    3f6a:	0f b6       	in	r0, 0x3f	; 63
    3f6c:	0f 92       	push	r0
    3f6e:	11 24       	eor	r1, r1
    3f70:	0b b6       	in	r0, 0x3b	; 59
    3f72:	0f 92       	push	r0
    3f74:	2f 93       	push	r18
    3f76:	3f 93       	push	r19
    3f78:	4f 93       	push	r20
    3f7a:	5f 93       	push	r21
    3f7c:	6f 93       	push	r22
    3f7e:	7f 93       	push	r23
    3f80:	8f 93       	push	r24
    3f82:	9f 93       	push	r25
    3f84:	af 93       	push	r26
    3f86:	bf 93       	push	r27
    3f88:	ef 93       	push	r30
    3f8a:	ff 93       	push	r31
    3f8c:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <InterruptFuncTable+0x1a>
    3f90:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <InterruptFuncTable+0x1b>
    3f94:	30 97       	sbiw	r30, 0x00	; 0
    3f96:	29 f0       	breq	.+10     	; 0x3fa2 <__vector_13+0x3c>
    3f98:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <InterruptSenderTable+0x1a>
    3f9c:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <InterruptSenderTable+0x1b>
    3fa0:	19 95       	eicall
    3fa2:	ff 91       	pop	r31
    3fa4:	ef 91       	pop	r30
    3fa6:	bf 91       	pop	r27
    3fa8:	af 91       	pop	r26
    3faa:	9f 91       	pop	r25
    3fac:	8f 91       	pop	r24
    3fae:	7f 91       	pop	r23
    3fb0:	6f 91       	pop	r22
    3fb2:	5f 91       	pop	r21
    3fb4:	4f 91       	pop	r20
    3fb6:	3f 91       	pop	r19
    3fb8:	2f 91       	pop	r18
    3fba:	0f 90       	pop	r0
    3fbc:	0b be       	out	0x3b, r0	; 59
    3fbe:	0f 90       	pop	r0
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	0f 90       	pop	r0
    3fc4:	1f 90       	pop	r1
    3fc6:	18 95       	reti

00003fc8 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    3fc8:	1f 92       	push	r1
    3fca:	0f 92       	push	r0
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	0f 92       	push	r0
    3fd0:	11 24       	eor	r1, r1
    3fd2:	0b b6       	in	r0, 0x3b	; 59
    3fd4:	0f 92       	push	r0
    3fd6:	2f 93       	push	r18
    3fd8:	3f 93       	push	r19
    3fda:	4f 93       	push	r20
    3fdc:	5f 93       	push	r21
    3fde:	6f 93       	push	r22
    3fe0:	7f 93       	push	r23
    3fe2:	8f 93       	push	r24
    3fe4:	9f 93       	push	r25
    3fe6:	af 93       	push	r26
    3fe8:	bf 93       	push	r27
    3fea:	ef 93       	push	r30
    3fec:	ff 93       	push	r31
    3fee:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <InterruptFuncTable+0x1c>
    3ff2:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <InterruptFuncTable+0x1d>
    3ff6:	30 97       	sbiw	r30, 0x00	; 0
    3ff8:	29 f0       	breq	.+10     	; 0x4004 <__stack+0x5>
    3ffa:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <InterruptSenderTable+0x1c>
    3ffe:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <InterruptSenderTable+0x1d>
    4002:	19 95       	eicall
    4004:	ff 91       	pop	r31
    4006:	ef 91       	pop	r30
    4008:	bf 91       	pop	r27
    400a:	af 91       	pop	r26
    400c:	9f 91       	pop	r25
    400e:	8f 91       	pop	r24
    4010:	7f 91       	pop	r23
    4012:	6f 91       	pop	r22
    4014:	5f 91       	pop	r21
    4016:	4f 91       	pop	r20
    4018:	3f 91       	pop	r19
    401a:	2f 91       	pop	r18
    401c:	0f 90       	pop	r0
    401e:	0b be       	out	0x3b, r0	; 59
    4020:	0f 90       	pop	r0
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	0f 90       	pop	r0
    4026:	1f 90       	pop	r1
    4028:	18 95       	reti

0000402a <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    402a:	1f 92       	push	r1
    402c:	0f 92       	push	r0
    402e:	0f b6       	in	r0, 0x3f	; 63
    4030:	0f 92       	push	r0
    4032:	11 24       	eor	r1, r1
    4034:	0b b6       	in	r0, 0x3b	; 59
    4036:	0f 92       	push	r0
    4038:	2f 93       	push	r18
    403a:	3f 93       	push	r19
    403c:	4f 93       	push	r20
    403e:	5f 93       	push	r21
    4040:	6f 93       	push	r22
    4042:	7f 93       	push	r23
    4044:	8f 93       	push	r24
    4046:	9f 93       	push	r25
    4048:	af 93       	push	r26
    404a:	bf 93       	push	r27
    404c:	ef 93       	push	r30
    404e:	ff 93       	push	r31
    4050:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <InterruptFuncTable+0x1e>
    4054:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <InterruptFuncTable+0x1f>
    4058:	30 97       	sbiw	r30, 0x00	; 0
    405a:	29 f0       	breq	.+10     	; 0x4066 <__vector_15+0x3c>
    405c:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <InterruptSenderTable+0x1e>
    4060:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <InterruptSenderTable+0x1f>
    4064:	19 95       	eicall
    4066:	ff 91       	pop	r31
    4068:	ef 91       	pop	r30
    406a:	bf 91       	pop	r27
    406c:	af 91       	pop	r26
    406e:	9f 91       	pop	r25
    4070:	8f 91       	pop	r24
    4072:	7f 91       	pop	r23
    4074:	6f 91       	pop	r22
    4076:	5f 91       	pop	r21
    4078:	4f 91       	pop	r20
    407a:	3f 91       	pop	r19
    407c:	2f 91       	pop	r18
    407e:	0f 90       	pop	r0
    4080:	0b be       	out	0x3b, r0	; 59
    4082:	0f 90       	pop	r0
    4084:	0f be       	out	0x3f, r0	; 63
    4086:	0f 90       	pop	r0
    4088:	1f 90       	pop	r1
    408a:	18 95       	reti

0000408c <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    408c:	1f 92       	push	r1
    408e:	0f 92       	push	r0
    4090:	0f b6       	in	r0, 0x3f	; 63
    4092:	0f 92       	push	r0
    4094:	11 24       	eor	r1, r1
    4096:	0b b6       	in	r0, 0x3b	; 59
    4098:	0f 92       	push	r0
    409a:	2f 93       	push	r18
    409c:	3f 93       	push	r19
    409e:	4f 93       	push	r20
    40a0:	5f 93       	push	r21
    40a2:	6f 93       	push	r22
    40a4:	7f 93       	push	r23
    40a6:	8f 93       	push	r24
    40a8:	9f 93       	push	r25
    40aa:	af 93       	push	r26
    40ac:	bf 93       	push	r27
    40ae:	ef 93       	push	r30
    40b0:	ff 93       	push	r31
    40b2:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <InterruptFuncTable+0x20>
    40b6:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <InterruptFuncTable+0x21>
    40ba:	30 97       	sbiw	r30, 0x00	; 0
    40bc:	29 f0       	breq	.+10     	; 0x40c8 <__vector_16+0x3c>
    40be:	80 91 dc 23 	lds	r24, 0x23DC	; 0x8023dc <InterruptSenderTable+0x20>
    40c2:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <InterruptSenderTable+0x21>
    40c6:	19 95       	eicall
    40c8:	ff 91       	pop	r31
    40ca:	ef 91       	pop	r30
    40cc:	bf 91       	pop	r27
    40ce:	af 91       	pop	r26
    40d0:	9f 91       	pop	r25
    40d2:	8f 91       	pop	r24
    40d4:	7f 91       	pop	r23
    40d6:	6f 91       	pop	r22
    40d8:	5f 91       	pop	r21
    40da:	4f 91       	pop	r20
    40dc:	3f 91       	pop	r19
    40de:	2f 91       	pop	r18
    40e0:	0f 90       	pop	r0
    40e2:	0b be       	out	0x3b, r0	; 59
    40e4:	0f 90       	pop	r0
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	0f 90       	pop	r0
    40ea:	1f 90       	pop	r1
    40ec:	18 95       	reti

000040ee <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    40ee:	1f 92       	push	r1
    40f0:	0f 92       	push	r0
    40f2:	0f b6       	in	r0, 0x3f	; 63
    40f4:	0f 92       	push	r0
    40f6:	11 24       	eor	r1, r1
    40f8:	0b b6       	in	r0, 0x3b	; 59
    40fa:	0f 92       	push	r0
    40fc:	2f 93       	push	r18
    40fe:	3f 93       	push	r19
    4100:	4f 93       	push	r20
    4102:	5f 93       	push	r21
    4104:	6f 93       	push	r22
    4106:	7f 93       	push	r23
    4108:	8f 93       	push	r24
    410a:	9f 93       	push	r25
    410c:	af 93       	push	r26
    410e:	bf 93       	push	r27
    4110:	ef 93       	push	r30
    4112:	ff 93       	push	r31
    4114:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <InterruptFuncTable+0x22>
    4118:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <InterruptFuncTable+0x23>
    411c:	30 97       	sbiw	r30, 0x00	; 0
    411e:	29 f0       	breq	.+10     	; 0x412a <__vector_17+0x3c>
    4120:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <InterruptSenderTable+0x22>
    4124:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <InterruptSenderTable+0x23>
    4128:	19 95       	eicall
    412a:	ff 91       	pop	r31
    412c:	ef 91       	pop	r30
    412e:	bf 91       	pop	r27
    4130:	af 91       	pop	r26
    4132:	9f 91       	pop	r25
    4134:	8f 91       	pop	r24
    4136:	7f 91       	pop	r23
    4138:	6f 91       	pop	r22
    413a:	5f 91       	pop	r21
    413c:	4f 91       	pop	r20
    413e:	3f 91       	pop	r19
    4140:	2f 91       	pop	r18
    4142:	0f 90       	pop	r0
    4144:	0b be       	out	0x3b, r0	; 59
    4146:	0f 90       	pop	r0
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	0f 90       	pop	r0
    414c:	1f 90       	pop	r1
    414e:	18 95       	reti

00004150 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    4150:	1f 92       	push	r1
    4152:	0f 92       	push	r0
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	0f 92       	push	r0
    4158:	11 24       	eor	r1, r1
    415a:	0b b6       	in	r0, 0x3b	; 59
    415c:	0f 92       	push	r0
    415e:	2f 93       	push	r18
    4160:	3f 93       	push	r19
    4162:	4f 93       	push	r20
    4164:	5f 93       	push	r21
    4166:	6f 93       	push	r22
    4168:	7f 93       	push	r23
    416a:	8f 93       	push	r24
    416c:	9f 93       	push	r25
    416e:	af 93       	push	r26
    4170:	bf 93       	push	r27
    4172:	ef 93       	push	r30
    4174:	ff 93       	push	r31
    4176:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <InterruptFuncTable+0x24>
    417a:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <InterruptFuncTable+0x25>
    417e:	30 97       	sbiw	r30, 0x00	; 0
    4180:	29 f0       	breq	.+10     	; 0x418c <__vector_18+0x3c>
    4182:	80 91 e0 23 	lds	r24, 0x23E0	; 0x8023e0 <InterruptSenderTable+0x24>
    4186:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <InterruptSenderTable+0x25>
    418a:	19 95       	eicall
    418c:	ff 91       	pop	r31
    418e:	ef 91       	pop	r30
    4190:	bf 91       	pop	r27
    4192:	af 91       	pop	r26
    4194:	9f 91       	pop	r25
    4196:	8f 91       	pop	r24
    4198:	7f 91       	pop	r23
    419a:	6f 91       	pop	r22
    419c:	5f 91       	pop	r21
    419e:	4f 91       	pop	r20
    41a0:	3f 91       	pop	r19
    41a2:	2f 91       	pop	r18
    41a4:	0f 90       	pop	r0
    41a6:	0b be       	out	0x3b, r0	; 59
    41a8:	0f 90       	pop	r0
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	0f 90       	pop	r0
    41ae:	1f 90       	pop	r1
    41b0:	18 95       	reti

000041b2 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    41b2:	1f 92       	push	r1
    41b4:	0f 92       	push	r0
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	0f 92       	push	r0
    41ba:	11 24       	eor	r1, r1
    41bc:	0b b6       	in	r0, 0x3b	; 59
    41be:	0f 92       	push	r0
    41c0:	2f 93       	push	r18
    41c2:	3f 93       	push	r19
    41c4:	4f 93       	push	r20
    41c6:	5f 93       	push	r21
    41c8:	6f 93       	push	r22
    41ca:	7f 93       	push	r23
    41cc:	8f 93       	push	r24
    41ce:	9f 93       	push	r25
    41d0:	af 93       	push	r26
    41d2:	bf 93       	push	r27
    41d4:	ef 93       	push	r30
    41d6:	ff 93       	push	r31
    41d8:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <InterruptFuncTable+0x26>
    41dc:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <InterruptFuncTable+0x27>
    41e0:	30 97       	sbiw	r30, 0x00	; 0
    41e2:	29 f0       	breq	.+10     	; 0x41ee <__vector_19+0x3c>
    41e4:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <InterruptSenderTable+0x26>
    41e8:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <InterruptSenderTable+0x27>
    41ec:	19 95       	eicall
    41ee:	ff 91       	pop	r31
    41f0:	ef 91       	pop	r30
    41f2:	bf 91       	pop	r27
    41f4:	af 91       	pop	r26
    41f6:	9f 91       	pop	r25
    41f8:	8f 91       	pop	r24
    41fa:	7f 91       	pop	r23
    41fc:	6f 91       	pop	r22
    41fe:	5f 91       	pop	r21
    4200:	4f 91       	pop	r20
    4202:	3f 91       	pop	r19
    4204:	2f 91       	pop	r18
    4206:	0f 90       	pop	r0
    4208:	0b be       	out	0x3b, r0	; 59
    420a:	0f 90       	pop	r0
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	0f 90       	pop	r0
    4210:	1f 90       	pop	r1
    4212:	18 95       	reti

00004214 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    4214:	1f 92       	push	r1
    4216:	0f 92       	push	r0
    4218:	0f b6       	in	r0, 0x3f	; 63
    421a:	0f 92       	push	r0
    421c:	11 24       	eor	r1, r1
    421e:	0b b6       	in	r0, 0x3b	; 59
    4220:	0f 92       	push	r0
    4222:	2f 93       	push	r18
    4224:	3f 93       	push	r19
    4226:	4f 93       	push	r20
    4228:	5f 93       	push	r21
    422a:	6f 93       	push	r22
    422c:	7f 93       	push	r23
    422e:	8f 93       	push	r24
    4230:	9f 93       	push	r25
    4232:	af 93       	push	r26
    4234:	bf 93       	push	r27
    4236:	ef 93       	push	r30
    4238:	ff 93       	push	r31
    423a:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <InterruptFuncTable+0x28>
    423e:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <InterruptFuncTable+0x29>
    4242:	30 97       	sbiw	r30, 0x00	; 0
    4244:	29 f0       	breq	.+10     	; 0x4250 <__vector_20+0x3c>
    4246:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <InterruptSenderTable+0x28>
    424a:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <InterruptSenderTable+0x29>
    424e:	19 95       	eicall
    4250:	ff 91       	pop	r31
    4252:	ef 91       	pop	r30
    4254:	bf 91       	pop	r27
    4256:	af 91       	pop	r26
    4258:	9f 91       	pop	r25
    425a:	8f 91       	pop	r24
    425c:	7f 91       	pop	r23
    425e:	6f 91       	pop	r22
    4260:	5f 91       	pop	r21
    4262:	4f 91       	pop	r20
    4264:	3f 91       	pop	r19
    4266:	2f 91       	pop	r18
    4268:	0f 90       	pop	r0
    426a:	0b be       	out	0x3b, r0	; 59
    426c:	0f 90       	pop	r0
    426e:	0f be       	out	0x3f, r0	; 63
    4270:	0f 90       	pop	r0
    4272:	1f 90       	pop	r1
    4274:	18 95       	reti

00004276 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    4276:	1f 92       	push	r1
    4278:	0f 92       	push	r0
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	0f 92       	push	r0
    427e:	11 24       	eor	r1, r1
    4280:	0b b6       	in	r0, 0x3b	; 59
    4282:	0f 92       	push	r0
    4284:	2f 93       	push	r18
    4286:	3f 93       	push	r19
    4288:	4f 93       	push	r20
    428a:	5f 93       	push	r21
    428c:	6f 93       	push	r22
    428e:	7f 93       	push	r23
    4290:	8f 93       	push	r24
    4292:	9f 93       	push	r25
    4294:	af 93       	push	r26
    4296:	bf 93       	push	r27
    4298:	ef 93       	push	r30
    429a:	ff 93       	push	r31
    429c:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <InterruptFuncTable+0x2a>
    42a0:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <InterruptFuncTable+0x2b>
    42a4:	30 97       	sbiw	r30, 0x00	; 0
    42a6:	29 f0       	breq	.+10     	; 0x42b2 <__vector_21+0x3c>
    42a8:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <InterruptSenderTable+0x2a>
    42ac:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <InterruptSenderTable+0x2b>
    42b0:	19 95       	eicall
    42b2:	ff 91       	pop	r31
    42b4:	ef 91       	pop	r30
    42b6:	bf 91       	pop	r27
    42b8:	af 91       	pop	r26
    42ba:	9f 91       	pop	r25
    42bc:	8f 91       	pop	r24
    42be:	7f 91       	pop	r23
    42c0:	6f 91       	pop	r22
    42c2:	5f 91       	pop	r21
    42c4:	4f 91       	pop	r20
    42c6:	3f 91       	pop	r19
    42c8:	2f 91       	pop	r18
    42ca:	0f 90       	pop	r0
    42cc:	0b be       	out	0x3b, r0	; 59
    42ce:	0f 90       	pop	r0
    42d0:	0f be       	out	0x3f, r0	; 63
    42d2:	0f 90       	pop	r0
    42d4:	1f 90       	pop	r1
    42d6:	18 95       	reti

000042d8 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    42d8:	1f 92       	push	r1
    42da:	0f 92       	push	r0
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	0f 92       	push	r0
    42e0:	11 24       	eor	r1, r1
    42e2:	0b b6       	in	r0, 0x3b	; 59
    42e4:	0f 92       	push	r0
    42e6:	2f 93       	push	r18
    42e8:	3f 93       	push	r19
    42ea:	4f 93       	push	r20
    42ec:	5f 93       	push	r21
    42ee:	6f 93       	push	r22
    42f0:	7f 93       	push	r23
    42f2:	8f 93       	push	r24
    42f4:	9f 93       	push	r25
    42f6:	af 93       	push	r26
    42f8:	bf 93       	push	r27
    42fa:	ef 93       	push	r30
    42fc:	ff 93       	push	r31
    42fe:	e0 91 f2 22 	lds	r30, 0x22F2	; 0x8022f2 <InterruptFuncTable+0x2c>
    4302:	f0 91 f3 22 	lds	r31, 0x22F3	; 0x8022f3 <InterruptFuncTable+0x2d>
    4306:	30 97       	sbiw	r30, 0x00	; 0
    4308:	29 f0       	breq	.+10     	; 0x4314 <__vector_22+0x3c>
    430a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <InterruptSenderTable+0x2c>
    430e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <InterruptSenderTable+0x2d>
    4312:	19 95       	eicall
    4314:	ff 91       	pop	r31
    4316:	ef 91       	pop	r30
    4318:	bf 91       	pop	r27
    431a:	af 91       	pop	r26
    431c:	9f 91       	pop	r25
    431e:	8f 91       	pop	r24
    4320:	7f 91       	pop	r23
    4322:	6f 91       	pop	r22
    4324:	5f 91       	pop	r21
    4326:	4f 91       	pop	r20
    4328:	3f 91       	pop	r19
    432a:	2f 91       	pop	r18
    432c:	0f 90       	pop	r0
    432e:	0b be       	out	0x3b, r0	; 59
    4330:	0f 90       	pop	r0
    4332:	0f be       	out	0x3f, r0	; 63
    4334:	0f 90       	pop	r0
    4336:	1f 90       	pop	r1
    4338:	18 95       	reti

0000433a <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    433a:	1f 92       	push	r1
    433c:	0f 92       	push	r0
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	0f 92       	push	r0
    4342:	11 24       	eor	r1, r1
    4344:	0b b6       	in	r0, 0x3b	; 59
    4346:	0f 92       	push	r0
    4348:	2f 93       	push	r18
    434a:	3f 93       	push	r19
    434c:	4f 93       	push	r20
    434e:	5f 93       	push	r21
    4350:	6f 93       	push	r22
    4352:	7f 93       	push	r23
    4354:	8f 93       	push	r24
    4356:	9f 93       	push	r25
    4358:	af 93       	push	r26
    435a:	bf 93       	push	r27
    435c:	ef 93       	push	r30
    435e:	ff 93       	push	r31
    4360:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <InterruptFuncTable+0x2e>
    4364:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <InterruptFuncTable+0x2f>
    4368:	30 97       	sbiw	r30, 0x00	; 0
    436a:	29 f0       	breq	.+10     	; 0x4376 <__vector_23+0x3c>
    436c:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <InterruptSenderTable+0x2e>
    4370:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <InterruptSenderTable+0x2f>
    4374:	19 95       	eicall
    4376:	ff 91       	pop	r31
    4378:	ef 91       	pop	r30
    437a:	bf 91       	pop	r27
    437c:	af 91       	pop	r26
    437e:	9f 91       	pop	r25
    4380:	8f 91       	pop	r24
    4382:	7f 91       	pop	r23
    4384:	6f 91       	pop	r22
    4386:	5f 91       	pop	r21
    4388:	4f 91       	pop	r20
    438a:	3f 91       	pop	r19
    438c:	2f 91       	pop	r18
    438e:	0f 90       	pop	r0
    4390:	0b be       	out	0x3b, r0	; 59
    4392:	0f 90       	pop	r0
    4394:	0f be       	out	0x3f, r0	; 63
    4396:	0f 90       	pop	r0
    4398:	1f 90       	pop	r1
    439a:	18 95       	reti

0000439c <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    439c:	1f 92       	push	r1
    439e:	0f 92       	push	r0
    43a0:	0f b6       	in	r0, 0x3f	; 63
    43a2:	0f 92       	push	r0
    43a4:	11 24       	eor	r1, r1
    43a6:	0b b6       	in	r0, 0x3b	; 59
    43a8:	0f 92       	push	r0
    43aa:	2f 93       	push	r18
    43ac:	3f 93       	push	r19
    43ae:	4f 93       	push	r20
    43b0:	5f 93       	push	r21
    43b2:	6f 93       	push	r22
    43b4:	7f 93       	push	r23
    43b6:	8f 93       	push	r24
    43b8:	9f 93       	push	r25
    43ba:	af 93       	push	r26
    43bc:	bf 93       	push	r27
    43be:	ef 93       	push	r30
    43c0:	ff 93       	push	r31
    43c2:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <InterruptFuncTable+0x30>
    43c6:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <InterruptFuncTable+0x31>
    43ca:	30 97       	sbiw	r30, 0x00	; 0
    43cc:	29 f0       	breq	.+10     	; 0x43d8 <__vector_24+0x3c>
    43ce:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <InterruptSenderTable+0x30>
    43d2:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <InterruptSenderTable+0x31>
    43d6:	19 95       	eicall
    43d8:	ff 91       	pop	r31
    43da:	ef 91       	pop	r30
    43dc:	bf 91       	pop	r27
    43de:	af 91       	pop	r26
    43e0:	9f 91       	pop	r25
    43e2:	8f 91       	pop	r24
    43e4:	7f 91       	pop	r23
    43e6:	6f 91       	pop	r22
    43e8:	5f 91       	pop	r21
    43ea:	4f 91       	pop	r20
    43ec:	3f 91       	pop	r19
    43ee:	2f 91       	pop	r18
    43f0:	0f 90       	pop	r0
    43f2:	0b be       	out	0x3b, r0	; 59
    43f4:	0f 90       	pop	r0
    43f6:	0f be       	out	0x3f, r0	; 63
    43f8:	0f 90       	pop	r0
    43fa:	1f 90       	pop	r1
    43fc:	18 95       	reti

000043fe <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    43fe:	1f 92       	push	r1
    4400:	0f 92       	push	r0
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	0f 92       	push	r0
    4406:	11 24       	eor	r1, r1
    4408:	0b b6       	in	r0, 0x3b	; 59
    440a:	0f 92       	push	r0
    440c:	2f 93       	push	r18
    440e:	3f 93       	push	r19
    4410:	4f 93       	push	r20
    4412:	5f 93       	push	r21
    4414:	6f 93       	push	r22
    4416:	7f 93       	push	r23
    4418:	8f 93       	push	r24
    441a:	9f 93       	push	r25
    441c:	af 93       	push	r26
    441e:	bf 93       	push	r27
    4420:	ef 93       	push	r30
    4422:	ff 93       	push	r31
    4424:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <InterruptFuncTable+0x32>
    4428:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <InterruptFuncTable+0x33>
    442c:	30 97       	sbiw	r30, 0x00	; 0
    442e:	29 f0       	breq	.+10     	; 0x443a <__vector_25+0x3c>
    4430:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <InterruptSenderTable+0x32>
    4434:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <InterruptSenderTable+0x33>
    4438:	19 95       	eicall
    443a:	ff 91       	pop	r31
    443c:	ef 91       	pop	r30
    443e:	bf 91       	pop	r27
    4440:	af 91       	pop	r26
    4442:	9f 91       	pop	r25
    4444:	8f 91       	pop	r24
    4446:	7f 91       	pop	r23
    4448:	6f 91       	pop	r22
    444a:	5f 91       	pop	r21
    444c:	4f 91       	pop	r20
    444e:	3f 91       	pop	r19
    4450:	2f 91       	pop	r18
    4452:	0f 90       	pop	r0
    4454:	0b be       	out	0x3b, r0	; 59
    4456:	0f 90       	pop	r0
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	0f 90       	pop	r0
    445c:	1f 90       	pop	r1
    445e:	18 95       	reti

00004460 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    4460:	1f 92       	push	r1
    4462:	0f 92       	push	r0
    4464:	0f b6       	in	r0, 0x3f	; 63
    4466:	0f 92       	push	r0
    4468:	11 24       	eor	r1, r1
    446a:	0b b6       	in	r0, 0x3b	; 59
    446c:	0f 92       	push	r0
    446e:	2f 93       	push	r18
    4470:	3f 93       	push	r19
    4472:	4f 93       	push	r20
    4474:	5f 93       	push	r21
    4476:	6f 93       	push	r22
    4478:	7f 93       	push	r23
    447a:	8f 93       	push	r24
    447c:	9f 93       	push	r25
    447e:	af 93       	push	r26
    4480:	bf 93       	push	r27
    4482:	ef 93       	push	r30
    4484:	ff 93       	push	r31
    4486:	e0 91 fa 22 	lds	r30, 0x22FA	; 0x8022fa <InterruptFuncTable+0x34>
    448a:	f0 91 fb 22 	lds	r31, 0x22FB	; 0x8022fb <InterruptFuncTable+0x35>
    448e:	30 97       	sbiw	r30, 0x00	; 0
    4490:	29 f0       	breq	.+10     	; 0x449c <__vector_26+0x3c>
    4492:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <InterruptSenderTable+0x34>
    4496:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <InterruptSenderTable+0x35>
    449a:	19 95       	eicall
    449c:	ff 91       	pop	r31
    449e:	ef 91       	pop	r30
    44a0:	bf 91       	pop	r27
    44a2:	af 91       	pop	r26
    44a4:	9f 91       	pop	r25
    44a6:	8f 91       	pop	r24
    44a8:	7f 91       	pop	r23
    44aa:	6f 91       	pop	r22
    44ac:	5f 91       	pop	r21
    44ae:	4f 91       	pop	r20
    44b0:	3f 91       	pop	r19
    44b2:	2f 91       	pop	r18
    44b4:	0f 90       	pop	r0
    44b6:	0b be       	out	0x3b, r0	; 59
    44b8:	0f 90       	pop	r0
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	0f 90       	pop	r0
    44be:	1f 90       	pop	r1
    44c0:	18 95       	reti

000044c2 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    44c2:	1f 92       	push	r1
    44c4:	0f 92       	push	r0
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	0f 92       	push	r0
    44ca:	11 24       	eor	r1, r1
    44cc:	0b b6       	in	r0, 0x3b	; 59
    44ce:	0f 92       	push	r0
    44d0:	2f 93       	push	r18
    44d2:	3f 93       	push	r19
    44d4:	4f 93       	push	r20
    44d6:	5f 93       	push	r21
    44d8:	6f 93       	push	r22
    44da:	7f 93       	push	r23
    44dc:	8f 93       	push	r24
    44de:	9f 93       	push	r25
    44e0:	af 93       	push	r26
    44e2:	bf 93       	push	r27
    44e4:	ef 93       	push	r30
    44e6:	ff 93       	push	r31
    44e8:	e0 91 fc 22 	lds	r30, 0x22FC	; 0x8022fc <InterruptFuncTable+0x36>
    44ec:	f0 91 fd 22 	lds	r31, 0x22FD	; 0x8022fd <InterruptFuncTable+0x37>
    44f0:	30 97       	sbiw	r30, 0x00	; 0
    44f2:	29 f0       	breq	.+10     	; 0x44fe <__vector_27+0x3c>
    44f4:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <InterruptSenderTable+0x36>
    44f8:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <InterruptSenderTable+0x37>
    44fc:	19 95       	eicall
    44fe:	ff 91       	pop	r31
    4500:	ef 91       	pop	r30
    4502:	bf 91       	pop	r27
    4504:	af 91       	pop	r26
    4506:	9f 91       	pop	r25
    4508:	8f 91       	pop	r24
    450a:	7f 91       	pop	r23
    450c:	6f 91       	pop	r22
    450e:	5f 91       	pop	r21
    4510:	4f 91       	pop	r20
    4512:	3f 91       	pop	r19
    4514:	2f 91       	pop	r18
    4516:	0f 90       	pop	r0
    4518:	0b be       	out	0x3b, r0	; 59
    451a:	0f 90       	pop	r0
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	0f 90       	pop	r0
    4520:	1f 90       	pop	r1
    4522:	18 95       	reti

00004524 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    4524:	1f 92       	push	r1
    4526:	0f 92       	push	r0
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	0f 92       	push	r0
    452c:	11 24       	eor	r1, r1
    452e:	0b b6       	in	r0, 0x3b	; 59
    4530:	0f 92       	push	r0
    4532:	2f 93       	push	r18
    4534:	3f 93       	push	r19
    4536:	4f 93       	push	r20
    4538:	5f 93       	push	r21
    453a:	6f 93       	push	r22
    453c:	7f 93       	push	r23
    453e:	8f 93       	push	r24
    4540:	9f 93       	push	r25
    4542:	af 93       	push	r26
    4544:	bf 93       	push	r27
    4546:	ef 93       	push	r30
    4548:	ff 93       	push	r31
    454a:	e0 91 fe 22 	lds	r30, 0x22FE	; 0x8022fe <InterruptFuncTable+0x38>
    454e:	f0 91 ff 22 	lds	r31, 0x22FF	; 0x8022ff <InterruptFuncTable+0x39>
    4552:	30 97       	sbiw	r30, 0x00	; 0
    4554:	29 f0       	breq	.+10     	; 0x4560 <__vector_28+0x3c>
    4556:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <InterruptSenderTable+0x38>
    455a:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <InterruptSenderTable+0x39>
    455e:	19 95       	eicall
    4560:	ff 91       	pop	r31
    4562:	ef 91       	pop	r30
    4564:	bf 91       	pop	r27
    4566:	af 91       	pop	r26
    4568:	9f 91       	pop	r25
    456a:	8f 91       	pop	r24
    456c:	7f 91       	pop	r23
    456e:	6f 91       	pop	r22
    4570:	5f 91       	pop	r21
    4572:	4f 91       	pop	r20
    4574:	3f 91       	pop	r19
    4576:	2f 91       	pop	r18
    4578:	0f 90       	pop	r0
    457a:	0b be       	out	0x3b, r0	; 59
    457c:	0f 90       	pop	r0
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	0f 90       	pop	r0
    4582:	1f 90       	pop	r1
    4584:	18 95       	reti

00004586 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    4586:	1f 92       	push	r1
    4588:	0f 92       	push	r0
    458a:	0f b6       	in	r0, 0x3f	; 63
    458c:	0f 92       	push	r0
    458e:	11 24       	eor	r1, r1
    4590:	0b b6       	in	r0, 0x3b	; 59
    4592:	0f 92       	push	r0
    4594:	2f 93       	push	r18
    4596:	3f 93       	push	r19
    4598:	4f 93       	push	r20
    459a:	5f 93       	push	r21
    459c:	6f 93       	push	r22
    459e:	7f 93       	push	r23
    45a0:	8f 93       	push	r24
    45a2:	9f 93       	push	r25
    45a4:	af 93       	push	r26
    45a6:	bf 93       	push	r27
    45a8:	ef 93       	push	r30
    45aa:	ff 93       	push	r31
    45ac:	e0 91 00 23 	lds	r30, 0x2300	; 0x802300 <InterruptFuncTable+0x3a>
    45b0:	f0 91 01 23 	lds	r31, 0x2301	; 0x802301 <InterruptFuncTable+0x3b>
    45b4:	30 97       	sbiw	r30, 0x00	; 0
    45b6:	29 f0       	breq	.+10     	; 0x45c2 <__vector_29+0x3c>
    45b8:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <InterruptSenderTable+0x3a>
    45bc:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <InterruptSenderTable+0x3b>
    45c0:	19 95       	eicall
    45c2:	ff 91       	pop	r31
    45c4:	ef 91       	pop	r30
    45c6:	bf 91       	pop	r27
    45c8:	af 91       	pop	r26
    45ca:	9f 91       	pop	r25
    45cc:	8f 91       	pop	r24
    45ce:	7f 91       	pop	r23
    45d0:	6f 91       	pop	r22
    45d2:	5f 91       	pop	r21
    45d4:	4f 91       	pop	r20
    45d6:	3f 91       	pop	r19
    45d8:	2f 91       	pop	r18
    45da:	0f 90       	pop	r0
    45dc:	0b be       	out	0x3b, r0	; 59
    45de:	0f 90       	pop	r0
    45e0:	0f be       	out	0x3f, r0	; 63
    45e2:	0f 90       	pop	r0
    45e4:	1f 90       	pop	r1
    45e6:	18 95       	reti

000045e8 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    45e8:	1f 92       	push	r1
    45ea:	0f 92       	push	r0
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	0f 92       	push	r0
    45f0:	11 24       	eor	r1, r1
    45f2:	0b b6       	in	r0, 0x3b	; 59
    45f4:	0f 92       	push	r0
    45f6:	2f 93       	push	r18
    45f8:	3f 93       	push	r19
    45fa:	4f 93       	push	r20
    45fc:	5f 93       	push	r21
    45fe:	6f 93       	push	r22
    4600:	7f 93       	push	r23
    4602:	8f 93       	push	r24
    4604:	9f 93       	push	r25
    4606:	af 93       	push	r26
    4608:	bf 93       	push	r27
    460a:	ef 93       	push	r30
    460c:	ff 93       	push	r31
    460e:	e0 91 02 23 	lds	r30, 0x2302	; 0x802302 <InterruptFuncTable+0x3c>
    4612:	f0 91 03 23 	lds	r31, 0x2303	; 0x802303 <InterruptFuncTable+0x3d>
    4616:	30 97       	sbiw	r30, 0x00	; 0
    4618:	29 f0       	breq	.+10     	; 0x4624 <__vector_30+0x3c>
    461a:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <InterruptSenderTable+0x3c>
    461e:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <InterruptSenderTable+0x3d>
    4622:	19 95       	eicall
    4624:	ff 91       	pop	r31
    4626:	ef 91       	pop	r30
    4628:	bf 91       	pop	r27
    462a:	af 91       	pop	r26
    462c:	9f 91       	pop	r25
    462e:	8f 91       	pop	r24
    4630:	7f 91       	pop	r23
    4632:	6f 91       	pop	r22
    4634:	5f 91       	pop	r21
    4636:	4f 91       	pop	r20
    4638:	3f 91       	pop	r19
    463a:	2f 91       	pop	r18
    463c:	0f 90       	pop	r0
    463e:	0b be       	out	0x3b, r0	; 59
    4640:	0f 90       	pop	r0
    4642:	0f be       	out	0x3f, r0	; 63
    4644:	0f 90       	pop	r0
    4646:	1f 90       	pop	r1
    4648:	18 95       	reti

0000464a <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    464a:	1f 92       	push	r1
    464c:	0f 92       	push	r0
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	0f 92       	push	r0
    4652:	11 24       	eor	r1, r1
    4654:	0b b6       	in	r0, 0x3b	; 59
    4656:	0f 92       	push	r0
    4658:	2f 93       	push	r18
    465a:	3f 93       	push	r19
    465c:	4f 93       	push	r20
    465e:	5f 93       	push	r21
    4660:	6f 93       	push	r22
    4662:	7f 93       	push	r23
    4664:	8f 93       	push	r24
    4666:	9f 93       	push	r25
    4668:	af 93       	push	r26
    466a:	bf 93       	push	r27
    466c:	ef 93       	push	r30
    466e:	ff 93       	push	r31
    4670:	e0 91 04 23 	lds	r30, 0x2304	; 0x802304 <InterruptFuncTable+0x3e>
    4674:	f0 91 05 23 	lds	r31, 0x2305	; 0x802305 <InterruptFuncTable+0x3f>
    4678:	30 97       	sbiw	r30, 0x00	; 0
    467a:	29 f0       	breq	.+10     	; 0x4686 <__vector_31+0x3c>
    467c:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <InterruptSenderTable+0x3e>
    4680:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <InterruptSenderTable+0x3f>
    4684:	19 95       	eicall
    4686:	ff 91       	pop	r31
    4688:	ef 91       	pop	r30
    468a:	bf 91       	pop	r27
    468c:	af 91       	pop	r26
    468e:	9f 91       	pop	r25
    4690:	8f 91       	pop	r24
    4692:	7f 91       	pop	r23
    4694:	6f 91       	pop	r22
    4696:	5f 91       	pop	r21
    4698:	4f 91       	pop	r20
    469a:	3f 91       	pop	r19
    469c:	2f 91       	pop	r18
    469e:	0f 90       	pop	r0
    46a0:	0b be       	out	0x3b, r0	; 59
    46a2:	0f 90       	pop	r0
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	0f 90       	pop	r0
    46a8:	1f 90       	pop	r1
    46aa:	18 95       	reti

000046ac <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    46ac:	1f 92       	push	r1
    46ae:	0f 92       	push	r0
    46b0:	0f b6       	in	r0, 0x3f	; 63
    46b2:	0f 92       	push	r0
    46b4:	11 24       	eor	r1, r1
    46b6:	0b b6       	in	r0, 0x3b	; 59
    46b8:	0f 92       	push	r0
    46ba:	2f 93       	push	r18
    46bc:	3f 93       	push	r19
    46be:	4f 93       	push	r20
    46c0:	5f 93       	push	r21
    46c2:	6f 93       	push	r22
    46c4:	7f 93       	push	r23
    46c6:	8f 93       	push	r24
    46c8:	9f 93       	push	r25
    46ca:	af 93       	push	r26
    46cc:	bf 93       	push	r27
    46ce:	ef 93       	push	r30
    46d0:	ff 93       	push	r31
    46d2:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <InterruptFuncTable+0x40>
    46d6:	f0 91 07 23 	lds	r31, 0x2307	; 0x802307 <InterruptFuncTable+0x41>
    46da:	30 97       	sbiw	r30, 0x00	; 0
    46dc:	29 f0       	breq	.+10     	; 0x46e8 <__vector_32+0x3c>
    46de:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <InterruptSenderTable+0x40>
    46e2:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <InterruptSenderTable+0x41>
    46e6:	19 95       	eicall
    46e8:	ff 91       	pop	r31
    46ea:	ef 91       	pop	r30
    46ec:	bf 91       	pop	r27
    46ee:	af 91       	pop	r26
    46f0:	9f 91       	pop	r25
    46f2:	8f 91       	pop	r24
    46f4:	7f 91       	pop	r23
    46f6:	6f 91       	pop	r22
    46f8:	5f 91       	pop	r21
    46fa:	4f 91       	pop	r20
    46fc:	3f 91       	pop	r19
    46fe:	2f 91       	pop	r18
    4700:	0f 90       	pop	r0
    4702:	0b be       	out	0x3b, r0	; 59
    4704:	0f 90       	pop	r0
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	0f 90       	pop	r0
    470a:	1f 90       	pop	r1
    470c:	18 95       	reti

0000470e <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    470e:	1f 92       	push	r1
    4710:	0f 92       	push	r0
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	0f 92       	push	r0
    4716:	11 24       	eor	r1, r1
    4718:	0b b6       	in	r0, 0x3b	; 59
    471a:	0f 92       	push	r0
    471c:	2f 93       	push	r18
    471e:	3f 93       	push	r19
    4720:	4f 93       	push	r20
    4722:	5f 93       	push	r21
    4724:	6f 93       	push	r22
    4726:	7f 93       	push	r23
    4728:	8f 93       	push	r24
    472a:	9f 93       	push	r25
    472c:	af 93       	push	r26
    472e:	bf 93       	push	r27
    4730:	ef 93       	push	r30
    4732:	ff 93       	push	r31
    4734:	e0 91 08 23 	lds	r30, 0x2308	; 0x802308 <InterruptFuncTable+0x42>
    4738:	f0 91 09 23 	lds	r31, 0x2309	; 0x802309 <InterruptFuncTable+0x43>
    473c:	30 97       	sbiw	r30, 0x00	; 0
    473e:	29 f0       	breq	.+10     	; 0x474a <__vector_33+0x3c>
    4740:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <InterruptSenderTable+0x42>
    4744:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <InterruptSenderTable+0x43>
    4748:	19 95       	eicall
    474a:	ff 91       	pop	r31
    474c:	ef 91       	pop	r30
    474e:	bf 91       	pop	r27
    4750:	af 91       	pop	r26
    4752:	9f 91       	pop	r25
    4754:	8f 91       	pop	r24
    4756:	7f 91       	pop	r23
    4758:	6f 91       	pop	r22
    475a:	5f 91       	pop	r21
    475c:	4f 91       	pop	r20
    475e:	3f 91       	pop	r19
    4760:	2f 91       	pop	r18
    4762:	0f 90       	pop	r0
    4764:	0b be       	out	0x3b, r0	; 59
    4766:	0f 90       	pop	r0
    4768:	0f be       	out	0x3f, r0	; 63
    476a:	0f 90       	pop	r0
    476c:	1f 90       	pop	r1
    476e:	18 95       	reti

00004770 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    4770:	1f 92       	push	r1
    4772:	0f 92       	push	r0
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	0f 92       	push	r0
    4778:	11 24       	eor	r1, r1
    477a:	0b b6       	in	r0, 0x3b	; 59
    477c:	0f 92       	push	r0
    477e:	2f 93       	push	r18
    4780:	3f 93       	push	r19
    4782:	4f 93       	push	r20
    4784:	5f 93       	push	r21
    4786:	6f 93       	push	r22
    4788:	7f 93       	push	r23
    478a:	8f 93       	push	r24
    478c:	9f 93       	push	r25
    478e:	af 93       	push	r26
    4790:	bf 93       	push	r27
    4792:	ef 93       	push	r30
    4794:	ff 93       	push	r31
    4796:	e0 91 0a 23 	lds	r30, 0x230A	; 0x80230a <InterruptFuncTable+0x44>
    479a:	f0 91 0b 23 	lds	r31, 0x230B	; 0x80230b <InterruptFuncTable+0x45>
    479e:	30 97       	sbiw	r30, 0x00	; 0
    47a0:	29 f0       	breq	.+10     	; 0x47ac <__vector_34+0x3c>
    47a2:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <InterruptSenderTable+0x44>
    47a6:	90 91 01 24 	lds	r25, 0x2401	; 0x802401 <InterruptSenderTable+0x45>
    47aa:	19 95       	eicall
    47ac:	ff 91       	pop	r31
    47ae:	ef 91       	pop	r30
    47b0:	bf 91       	pop	r27
    47b2:	af 91       	pop	r26
    47b4:	9f 91       	pop	r25
    47b6:	8f 91       	pop	r24
    47b8:	7f 91       	pop	r23
    47ba:	6f 91       	pop	r22
    47bc:	5f 91       	pop	r21
    47be:	4f 91       	pop	r20
    47c0:	3f 91       	pop	r19
    47c2:	2f 91       	pop	r18
    47c4:	0f 90       	pop	r0
    47c6:	0b be       	out	0x3b, r0	; 59
    47c8:	0f 90       	pop	r0
    47ca:	0f be       	out	0x3f, r0	; 63
    47cc:	0f 90       	pop	r0
    47ce:	1f 90       	pop	r1
    47d0:	18 95       	reti

000047d2 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    47d2:	1f 92       	push	r1
    47d4:	0f 92       	push	r0
    47d6:	0f b6       	in	r0, 0x3f	; 63
    47d8:	0f 92       	push	r0
    47da:	11 24       	eor	r1, r1
    47dc:	0b b6       	in	r0, 0x3b	; 59
    47de:	0f 92       	push	r0
    47e0:	2f 93       	push	r18
    47e2:	3f 93       	push	r19
    47e4:	4f 93       	push	r20
    47e6:	5f 93       	push	r21
    47e8:	6f 93       	push	r22
    47ea:	7f 93       	push	r23
    47ec:	8f 93       	push	r24
    47ee:	9f 93       	push	r25
    47f0:	af 93       	push	r26
    47f2:	bf 93       	push	r27
    47f4:	ef 93       	push	r30
    47f6:	ff 93       	push	r31
    47f8:	e0 91 0c 23 	lds	r30, 0x230C	; 0x80230c <InterruptFuncTable+0x46>
    47fc:	f0 91 0d 23 	lds	r31, 0x230D	; 0x80230d <InterruptFuncTable+0x47>
    4800:	30 97       	sbiw	r30, 0x00	; 0
    4802:	29 f0       	breq	.+10     	; 0x480e <__vector_35+0x3c>
    4804:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <InterruptSenderTable+0x46>
    4808:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <InterruptSenderTable+0x47>
    480c:	19 95       	eicall
    480e:	ff 91       	pop	r31
    4810:	ef 91       	pop	r30
    4812:	bf 91       	pop	r27
    4814:	af 91       	pop	r26
    4816:	9f 91       	pop	r25
    4818:	8f 91       	pop	r24
    481a:	7f 91       	pop	r23
    481c:	6f 91       	pop	r22
    481e:	5f 91       	pop	r21
    4820:	4f 91       	pop	r20
    4822:	3f 91       	pop	r19
    4824:	2f 91       	pop	r18
    4826:	0f 90       	pop	r0
    4828:	0b be       	out	0x3b, r0	; 59
    482a:	0f 90       	pop	r0
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	0f 90       	pop	r0
    4830:	1f 90       	pop	r1
    4832:	18 95       	reti

00004834 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    4834:	1f 92       	push	r1
    4836:	0f 92       	push	r0
    4838:	0f b6       	in	r0, 0x3f	; 63
    483a:	0f 92       	push	r0
    483c:	11 24       	eor	r1, r1
    483e:	0b b6       	in	r0, 0x3b	; 59
    4840:	0f 92       	push	r0
    4842:	2f 93       	push	r18
    4844:	3f 93       	push	r19
    4846:	4f 93       	push	r20
    4848:	5f 93       	push	r21
    484a:	6f 93       	push	r22
    484c:	7f 93       	push	r23
    484e:	8f 93       	push	r24
    4850:	9f 93       	push	r25
    4852:	af 93       	push	r26
    4854:	bf 93       	push	r27
    4856:	ef 93       	push	r30
    4858:	ff 93       	push	r31
    485a:	e0 91 0e 23 	lds	r30, 0x230E	; 0x80230e <InterruptFuncTable+0x48>
    485e:	f0 91 0f 23 	lds	r31, 0x230F	; 0x80230f <InterruptFuncTable+0x49>
    4862:	30 97       	sbiw	r30, 0x00	; 0
    4864:	29 f0       	breq	.+10     	; 0x4870 <__vector_36+0x3c>
    4866:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <InterruptSenderTable+0x48>
    486a:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <InterruptSenderTable+0x49>
    486e:	19 95       	eicall
    4870:	ff 91       	pop	r31
    4872:	ef 91       	pop	r30
    4874:	bf 91       	pop	r27
    4876:	af 91       	pop	r26
    4878:	9f 91       	pop	r25
    487a:	8f 91       	pop	r24
    487c:	7f 91       	pop	r23
    487e:	6f 91       	pop	r22
    4880:	5f 91       	pop	r21
    4882:	4f 91       	pop	r20
    4884:	3f 91       	pop	r19
    4886:	2f 91       	pop	r18
    4888:	0f 90       	pop	r0
    488a:	0b be       	out	0x3b, r0	; 59
    488c:	0f 90       	pop	r0
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	0f 90       	pop	r0
    4892:	1f 90       	pop	r1
    4894:	18 95       	reti

00004896 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    4896:	1f 92       	push	r1
    4898:	0f 92       	push	r0
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	0f 92       	push	r0
    489e:	11 24       	eor	r1, r1
    48a0:	0b b6       	in	r0, 0x3b	; 59
    48a2:	0f 92       	push	r0
    48a4:	2f 93       	push	r18
    48a6:	3f 93       	push	r19
    48a8:	4f 93       	push	r20
    48aa:	5f 93       	push	r21
    48ac:	6f 93       	push	r22
    48ae:	7f 93       	push	r23
    48b0:	8f 93       	push	r24
    48b2:	9f 93       	push	r25
    48b4:	af 93       	push	r26
    48b6:	bf 93       	push	r27
    48b8:	ef 93       	push	r30
    48ba:	ff 93       	push	r31
    48bc:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <InterruptFuncTable+0x4a>
    48c0:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <InterruptFuncTable+0x4b>
    48c4:	30 97       	sbiw	r30, 0x00	; 0
    48c6:	29 f0       	breq	.+10     	; 0x48d2 <__vector_37+0x3c>
    48c8:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <InterruptSenderTable+0x4a>
    48cc:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <InterruptSenderTable+0x4b>
    48d0:	19 95       	eicall
    48d2:	ff 91       	pop	r31
    48d4:	ef 91       	pop	r30
    48d6:	bf 91       	pop	r27
    48d8:	af 91       	pop	r26
    48da:	9f 91       	pop	r25
    48dc:	8f 91       	pop	r24
    48de:	7f 91       	pop	r23
    48e0:	6f 91       	pop	r22
    48e2:	5f 91       	pop	r21
    48e4:	4f 91       	pop	r20
    48e6:	3f 91       	pop	r19
    48e8:	2f 91       	pop	r18
    48ea:	0f 90       	pop	r0
    48ec:	0b be       	out	0x3b, r0	; 59
    48ee:	0f 90       	pop	r0
    48f0:	0f be       	out	0x3f, r0	; 63
    48f2:	0f 90       	pop	r0
    48f4:	1f 90       	pop	r1
    48f6:	18 95       	reti

000048f8 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    48f8:	1f 92       	push	r1
    48fa:	0f 92       	push	r0
    48fc:	0f b6       	in	r0, 0x3f	; 63
    48fe:	0f 92       	push	r0
    4900:	11 24       	eor	r1, r1
    4902:	0b b6       	in	r0, 0x3b	; 59
    4904:	0f 92       	push	r0
    4906:	2f 93       	push	r18
    4908:	3f 93       	push	r19
    490a:	4f 93       	push	r20
    490c:	5f 93       	push	r21
    490e:	6f 93       	push	r22
    4910:	7f 93       	push	r23
    4912:	8f 93       	push	r24
    4914:	9f 93       	push	r25
    4916:	af 93       	push	r26
    4918:	bf 93       	push	r27
    491a:	ef 93       	push	r30
    491c:	ff 93       	push	r31
    491e:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <InterruptFuncTable+0x4c>
    4922:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <InterruptFuncTable+0x4d>
    4926:	30 97       	sbiw	r30, 0x00	; 0
    4928:	29 f0       	breq	.+10     	; 0x4934 <__vector_38+0x3c>
    492a:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <InterruptSenderTable+0x4c>
    492e:	90 91 09 24 	lds	r25, 0x2409	; 0x802409 <InterruptSenderTable+0x4d>
    4932:	19 95       	eicall
    4934:	ff 91       	pop	r31
    4936:	ef 91       	pop	r30
    4938:	bf 91       	pop	r27
    493a:	af 91       	pop	r26
    493c:	9f 91       	pop	r25
    493e:	8f 91       	pop	r24
    4940:	7f 91       	pop	r23
    4942:	6f 91       	pop	r22
    4944:	5f 91       	pop	r21
    4946:	4f 91       	pop	r20
    4948:	3f 91       	pop	r19
    494a:	2f 91       	pop	r18
    494c:	0f 90       	pop	r0
    494e:	0b be       	out	0x3b, r0	; 59
    4950:	0f 90       	pop	r0
    4952:	0f be       	out	0x3f, r0	; 63
    4954:	0f 90       	pop	r0
    4956:	1f 90       	pop	r1
    4958:	18 95       	reti

0000495a <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    495a:	1f 92       	push	r1
    495c:	0f 92       	push	r0
    495e:	0f b6       	in	r0, 0x3f	; 63
    4960:	0f 92       	push	r0
    4962:	11 24       	eor	r1, r1
    4964:	0b b6       	in	r0, 0x3b	; 59
    4966:	0f 92       	push	r0
    4968:	2f 93       	push	r18
    496a:	3f 93       	push	r19
    496c:	4f 93       	push	r20
    496e:	5f 93       	push	r21
    4970:	6f 93       	push	r22
    4972:	7f 93       	push	r23
    4974:	8f 93       	push	r24
    4976:	9f 93       	push	r25
    4978:	af 93       	push	r26
    497a:	bf 93       	push	r27
    497c:	ef 93       	push	r30
    497e:	ff 93       	push	r31
    4980:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <InterruptFuncTable+0x4e>
    4984:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <InterruptFuncTable+0x4f>
    4988:	30 97       	sbiw	r30, 0x00	; 0
    498a:	29 f0       	breq	.+10     	; 0x4996 <__vector_39+0x3c>
    498c:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <InterruptSenderTable+0x4e>
    4990:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <InterruptSenderTable+0x4f>
    4994:	19 95       	eicall
    4996:	ff 91       	pop	r31
    4998:	ef 91       	pop	r30
    499a:	bf 91       	pop	r27
    499c:	af 91       	pop	r26
    499e:	9f 91       	pop	r25
    49a0:	8f 91       	pop	r24
    49a2:	7f 91       	pop	r23
    49a4:	6f 91       	pop	r22
    49a6:	5f 91       	pop	r21
    49a8:	4f 91       	pop	r20
    49aa:	3f 91       	pop	r19
    49ac:	2f 91       	pop	r18
    49ae:	0f 90       	pop	r0
    49b0:	0b be       	out	0x3b, r0	; 59
    49b2:	0f 90       	pop	r0
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	0f 90       	pop	r0
    49b8:	1f 90       	pop	r1
    49ba:	18 95       	reti

000049bc <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    49bc:	1f 92       	push	r1
    49be:	0f 92       	push	r0
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	0f 92       	push	r0
    49c4:	11 24       	eor	r1, r1
    49c6:	0b b6       	in	r0, 0x3b	; 59
    49c8:	0f 92       	push	r0
    49ca:	2f 93       	push	r18
    49cc:	3f 93       	push	r19
    49ce:	4f 93       	push	r20
    49d0:	5f 93       	push	r21
    49d2:	6f 93       	push	r22
    49d4:	7f 93       	push	r23
    49d6:	8f 93       	push	r24
    49d8:	9f 93       	push	r25
    49da:	af 93       	push	r26
    49dc:	bf 93       	push	r27
    49de:	ef 93       	push	r30
    49e0:	ff 93       	push	r31
    49e2:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <InterruptFuncTable+0x50>
    49e6:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <InterruptFuncTable+0x51>
    49ea:	30 97       	sbiw	r30, 0x00	; 0
    49ec:	29 f0       	breq	.+10     	; 0x49f8 <__vector_40+0x3c>
    49ee:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <InterruptSenderTable+0x50>
    49f2:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <InterruptSenderTable+0x51>
    49f6:	19 95       	eicall
    49f8:	ff 91       	pop	r31
    49fa:	ef 91       	pop	r30
    49fc:	bf 91       	pop	r27
    49fe:	af 91       	pop	r26
    4a00:	9f 91       	pop	r25
    4a02:	8f 91       	pop	r24
    4a04:	7f 91       	pop	r23
    4a06:	6f 91       	pop	r22
    4a08:	5f 91       	pop	r21
    4a0a:	4f 91       	pop	r20
    4a0c:	3f 91       	pop	r19
    4a0e:	2f 91       	pop	r18
    4a10:	0f 90       	pop	r0
    4a12:	0b be       	out	0x3b, r0	; 59
    4a14:	0f 90       	pop	r0
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	0f 90       	pop	r0
    4a1a:	1f 90       	pop	r1
    4a1c:	18 95       	reti

00004a1e <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    4a1e:	1f 92       	push	r1
    4a20:	0f 92       	push	r0
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	0f 92       	push	r0
    4a26:	11 24       	eor	r1, r1
    4a28:	0b b6       	in	r0, 0x3b	; 59
    4a2a:	0f 92       	push	r0
    4a2c:	2f 93       	push	r18
    4a2e:	3f 93       	push	r19
    4a30:	4f 93       	push	r20
    4a32:	5f 93       	push	r21
    4a34:	6f 93       	push	r22
    4a36:	7f 93       	push	r23
    4a38:	8f 93       	push	r24
    4a3a:	9f 93       	push	r25
    4a3c:	af 93       	push	r26
    4a3e:	bf 93       	push	r27
    4a40:	ef 93       	push	r30
    4a42:	ff 93       	push	r31
    4a44:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <InterruptFuncTable+0x52>
    4a48:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <InterruptFuncTable+0x53>
    4a4c:	30 97       	sbiw	r30, 0x00	; 0
    4a4e:	29 f0       	breq	.+10     	; 0x4a5a <__vector_41+0x3c>
    4a50:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <InterruptSenderTable+0x52>
    4a54:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <InterruptSenderTable+0x53>
    4a58:	19 95       	eicall
    4a5a:	ff 91       	pop	r31
    4a5c:	ef 91       	pop	r30
    4a5e:	bf 91       	pop	r27
    4a60:	af 91       	pop	r26
    4a62:	9f 91       	pop	r25
    4a64:	8f 91       	pop	r24
    4a66:	7f 91       	pop	r23
    4a68:	6f 91       	pop	r22
    4a6a:	5f 91       	pop	r21
    4a6c:	4f 91       	pop	r20
    4a6e:	3f 91       	pop	r19
    4a70:	2f 91       	pop	r18
    4a72:	0f 90       	pop	r0
    4a74:	0b be       	out	0x3b, r0	; 59
    4a76:	0f 90       	pop	r0
    4a78:	0f be       	out	0x3f, r0	; 63
    4a7a:	0f 90       	pop	r0
    4a7c:	1f 90       	pop	r1
    4a7e:	18 95       	reti

00004a80 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    4a80:	1f 92       	push	r1
    4a82:	0f 92       	push	r0
    4a84:	0f b6       	in	r0, 0x3f	; 63
    4a86:	0f 92       	push	r0
    4a88:	11 24       	eor	r1, r1
    4a8a:	0b b6       	in	r0, 0x3b	; 59
    4a8c:	0f 92       	push	r0
    4a8e:	2f 93       	push	r18
    4a90:	3f 93       	push	r19
    4a92:	4f 93       	push	r20
    4a94:	5f 93       	push	r21
    4a96:	6f 93       	push	r22
    4a98:	7f 93       	push	r23
    4a9a:	8f 93       	push	r24
    4a9c:	9f 93       	push	r25
    4a9e:	af 93       	push	r26
    4aa0:	bf 93       	push	r27
    4aa2:	ef 93       	push	r30
    4aa4:	ff 93       	push	r31
    4aa6:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <InterruptFuncTable+0x54>
    4aaa:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <InterruptFuncTable+0x55>
    4aae:	30 97       	sbiw	r30, 0x00	; 0
    4ab0:	29 f0       	breq	.+10     	; 0x4abc <__vector_42+0x3c>
    4ab2:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <InterruptSenderTable+0x54>
    4ab6:	90 91 11 24 	lds	r25, 0x2411	; 0x802411 <InterruptSenderTable+0x55>
    4aba:	19 95       	eicall
    4abc:	ff 91       	pop	r31
    4abe:	ef 91       	pop	r30
    4ac0:	bf 91       	pop	r27
    4ac2:	af 91       	pop	r26
    4ac4:	9f 91       	pop	r25
    4ac6:	8f 91       	pop	r24
    4ac8:	7f 91       	pop	r23
    4aca:	6f 91       	pop	r22
    4acc:	5f 91       	pop	r21
    4ace:	4f 91       	pop	r20
    4ad0:	3f 91       	pop	r19
    4ad2:	2f 91       	pop	r18
    4ad4:	0f 90       	pop	r0
    4ad6:	0b be       	out	0x3b, r0	; 59
    4ad8:	0f 90       	pop	r0
    4ada:	0f be       	out	0x3f, r0	; 63
    4adc:	0f 90       	pop	r0
    4ade:	1f 90       	pop	r1
    4ae0:	18 95       	reti

00004ae2 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    4ae2:	1f 92       	push	r1
    4ae4:	0f 92       	push	r0
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	0f 92       	push	r0
    4aea:	11 24       	eor	r1, r1
    4aec:	0b b6       	in	r0, 0x3b	; 59
    4aee:	0f 92       	push	r0
    4af0:	2f 93       	push	r18
    4af2:	3f 93       	push	r19
    4af4:	4f 93       	push	r20
    4af6:	5f 93       	push	r21
    4af8:	6f 93       	push	r22
    4afa:	7f 93       	push	r23
    4afc:	8f 93       	push	r24
    4afe:	9f 93       	push	r25
    4b00:	af 93       	push	r26
    4b02:	bf 93       	push	r27
    4b04:	ef 93       	push	r30
    4b06:	ff 93       	push	r31
    4b08:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <InterruptFuncTable+0x56>
    4b0c:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <InterruptFuncTable+0x57>
    4b10:	30 97       	sbiw	r30, 0x00	; 0
    4b12:	29 f0       	breq	.+10     	; 0x4b1e <__vector_43+0x3c>
    4b14:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <InterruptSenderTable+0x56>
    4b18:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <InterruptSenderTable+0x57>
    4b1c:	19 95       	eicall
    4b1e:	ff 91       	pop	r31
    4b20:	ef 91       	pop	r30
    4b22:	bf 91       	pop	r27
    4b24:	af 91       	pop	r26
    4b26:	9f 91       	pop	r25
    4b28:	8f 91       	pop	r24
    4b2a:	7f 91       	pop	r23
    4b2c:	6f 91       	pop	r22
    4b2e:	5f 91       	pop	r21
    4b30:	4f 91       	pop	r20
    4b32:	3f 91       	pop	r19
    4b34:	2f 91       	pop	r18
    4b36:	0f 90       	pop	r0
    4b38:	0b be       	out	0x3b, r0	; 59
    4b3a:	0f 90       	pop	r0
    4b3c:	0f be       	out	0x3f, r0	; 63
    4b3e:	0f 90       	pop	r0
    4b40:	1f 90       	pop	r1
    4b42:	18 95       	reti

00004b44 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    4b44:	1f 92       	push	r1
    4b46:	0f 92       	push	r0
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	0f 92       	push	r0
    4b4c:	11 24       	eor	r1, r1
    4b4e:	0b b6       	in	r0, 0x3b	; 59
    4b50:	0f 92       	push	r0
    4b52:	2f 93       	push	r18
    4b54:	3f 93       	push	r19
    4b56:	4f 93       	push	r20
    4b58:	5f 93       	push	r21
    4b5a:	6f 93       	push	r22
    4b5c:	7f 93       	push	r23
    4b5e:	8f 93       	push	r24
    4b60:	9f 93       	push	r25
    4b62:	af 93       	push	r26
    4b64:	bf 93       	push	r27
    4b66:	ef 93       	push	r30
    4b68:	ff 93       	push	r31
    4b6a:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <InterruptFuncTable+0x58>
    4b6e:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <InterruptFuncTable+0x59>
    4b72:	30 97       	sbiw	r30, 0x00	; 0
    4b74:	29 f0       	breq	.+10     	; 0x4b80 <__vector_44+0x3c>
    4b76:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <InterruptSenderTable+0x58>
    4b7a:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <InterruptSenderTable+0x59>
    4b7e:	19 95       	eicall
    4b80:	ff 91       	pop	r31
    4b82:	ef 91       	pop	r30
    4b84:	bf 91       	pop	r27
    4b86:	af 91       	pop	r26
    4b88:	9f 91       	pop	r25
    4b8a:	8f 91       	pop	r24
    4b8c:	7f 91       	pop	r23
    4b8e:	6f 91       	pop	r22
    4b90:	5f 91       	pop	r21
    4b92:	4f 91       	pop	r20
    4b94:	3f 91       	pop	r19
    4b96:	2f 91       	pop	r18
    4b98:	0f 90       	pop	r0
    4b9a:	0b be       	out	0x3b, r0	; 59
    4b9c:	0f 90       	pop	r0
    4b9e:	0f be       	out	0x3f, r0	; 63
    4ba0:	0f 90       	pop	r0
    4ba2:	1f 90       	pop	r1
    4ba4:	18 95       	reti

00004ba6 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    4ba6:	1f 92       	push	r1
    4ba8:	0f 92       	push	r0
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	0f 92       	push	r0
    4bae:	11 24       	eor	r1, r1
    4bb0:	0b b6       	in	r0, 0x3b	; 59
    4bb2:	0f 92       	push	r0
    4bb4:	2f 93       	push	r18
    4bb6:	3f 93       	push	r19
    4bb8:	4f 93       	push	r20
    4bba:	5f 93       	push	r21
    4bbc:	6f 93       	push	r22
    4bbe:	7f 93       	push	r23
    4bc0:	8f 93       	push	r24
    4bc2:	9f 93       	push	r25
    4bc4:	af 93       	push	r26
    4bc6:	bf 93       	push	r27
    4bc8:	ef 93       	push	r30
    4bca:	ff 93       	push	r31
    4bcc:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <InterruptFuncTable+0x5a>
    4bd0:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <InterruptFuncTable+0x5b>
    4bd4:	30 97       	sbiw	r30, 0x00	; 0
    4bd6:	29 f0       	breq	.+10     	; 0x4be2 <__vector_45+0x3c>
    4bd8:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <InterruptSenderTable+0x5a>
    4bdc:	90 91 17 24 	lds	r25, 0x2417	; 0x802417 <InterruptSenderTable+0x5b>
    4be0:	19 95       	eicall
    4be2:	ff 91       	pop	r31
    4be4:	ef 91       	pop	r30
    4be6:	bf 91       	pop	r27
    4be8:	af 91       	pop	r26
    4bea:	9f 91       	pop	r25
    4bec:	8f 91       	pop	r24
    4bee:	7f 91       	pop	r23
    4bf0:	6f 91       	pop	r22
    4bf2:	5f 91       	pop	r21
    4bf4:	4f 91       	pop	r20
    4bf6:	3f 91       	pop	r19
    4bf8:	2f 91       	pop	r18
    4bfa:	0f 90       	pop	r0
    4bfc:	0b be       	out	0x3b, r0	; 59
    4bfe:	0f 90       	pop	r0
    4c00:	0f be       	out	0x3f, r0	; 63
    4c02:	0f 90       	pop	r0
    4c04:	1f 90       	pop	r1
    4c06:	18 95       	reti

00004c08 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    4c08:	1f 92       	push	r1
    4c0a:	0f 92       	push	r0
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	0f 92       	push	r0
    4c10:	11 24       	eor	r1, r1
    4c12:	0b b6       	in	r0, 0x3b	; 59
    4c14:	0f 92       	push	r0
    4c16:	2f 93       	push	r18
    4c18:	3f 93       	push	r19
    4c1a:	4f 93       	push	r20
    4c1c:	5f 93       	push	r21
    4c1e:	6f 93       	push	r22
    4c20:	7f 93       	push	r23
    4c22:	8f 93       	push	r24
    4c24:	9f 93       	push	r25
    4c26:	af 93       	push	r26
    4c28:	bf 93       	push	r27
    4c2a:	ef 93       	push	r30
    4c2c:	ff 93       	push	r31
    4c2e:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <InterruptFuncTable+0x5c>
    4c32:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <InterruptFuncTable+0x5d>
    4c36:	30 97       	sbiw	r30, 0x00	; 0
    4c38:	29 f0       	breq	.+10     	; 0x4c44 <__vector_46+0x3c>
    4c3a:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <InterruptSenderTable+0x5c>
    4c3e:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <InterruptSenderTable+0x5d>
    4c42:	19 95       	eicall
    4c44:	ff 91       	pop	r31
    4c46:	ef 91       	pop	r30
    4c48:	bf 91       	pop	r27
    4c4a:	af 91       	pop	r26
    4c4c:	9f 91       	pop	r25
    4c4e:	8f 91       	pop	r24
    4c50:	7f 91       	pop	r23
    4c52:	6f 91       	pop	r22
    4c54:	5f 91       	pop	r21
    4c56:	4f 91       	pop	r20
    4c58:	3f 91       	pop	r19
    4c5a:	2f 91       	pop	r18
    4c5c:	0f 90       	pop	r0
    4c5e:	0b be       	out	0x3b, r0	; 59
    4c60:	0f 90       	pop	r0
    4c62:	0f be       	out	0x3f, r0	; 63
    4c64:	0f 90       	pop	r0
    4c66:	1f 90       	pop	r1
    4c68:	18 95       	reti

00004c6a <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    4c6a:	1f 92       	push	r1
    4c6c:	0f 92       	push	r0
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	0f 92       	push	r0
    4c72:	11 24       	eor	r1, r1
    4c74:	0b b6       	in	r0, 0x3b	; 59
    4c76:	0f 92       	push	r0
    4c78:	2f 93       	push	r18
    4c7a:	3f 93       	push	r19
    4c7c:	4f 93       	push	r20
    4c7e:	5f 93       	push	r21
    4c80:	6f 93       	push	r22
    4c82:	7f 93       	push	r23
    4c84:	8f 93       	push	r24
    4c86:	9f 93       	push	r25
    4c88:	af 93       	push	r26
    4c8a:	bf 93       	push	r27
    4c8c:	ef 93       	push	r30
    4c8e:	ff 93       	push	r31
    4c90:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <InterruptFuncTable+0x5e>
    4c94:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <InterruptFuncTable+0x5f>
    4c98:	30 97       	sbiw	r30, 0x00	; 0
    4c9a:	29 f0       	breq	.+10     	; 0x4ca6 <__vector_47+0x3c>
    4c9c:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <InterruptSenderTable+0x5e>
    4ca0:	90 91 1b 24 	lds	r25, 0x241B	; 0x80241b <InterruptSenderTable+0x5f>
    4ca4:	19 95       	eicall
    4ca6:	ff 91       	pop	r31
    4ca8:	ef 91       	pop	r30
    4caa:	bf 91       	pop	r27
    4cac:	af 91       	pop	r26
    4cae:	9f 91       	pop	r25
    4cb0:	8f 91       	pop	r24
    4cb2:	7f 91       	pop	r23
    4cb4:	6f 91       	pop	r22
    4cb6:	5f 91       	pop	r21
    4cb8:	4f 91       	pop	r20
    4cba:	3f 91       	pop	r19
    4cbc:	2f 91       	pop	r18
    4cbe:	0f 90       	pop	r0
    4cc0:	0b be       	out	0x3b, r0	; 59
    4cc2:	0f 90       	pop	r0
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	0f 90       	pop	r0
    4cc8:	1f 90       	pop	r1
    4cca:	18 95       	reti

00004ccc <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    4ccc:	1f 92       	push	r1
    4cce:	0f 92       	push	r0
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	0f 92       	push	r0
    4cd4:	11 24       	eor	r1, r1
    4cd6:	0b b6       	in	r0, 0x3b	; 59
    4cd8:	0f 92       	push	r0
    4cda:	2f 93       	push	r18
    4cdc:	3f 93       	push	r19
    4cde:	4f 93       	push	r20
    4ce0:	5f 93       	push	r21
    4ce2:	6f 93       	push	r22
    4ce4:	7f 93       	push	r23
    4ce6:	8f 93       	push	r24
    4ce8:	9f 93       	push	r25
    4cea:	af 93       	push	r26
    4cec:	bf 93       	push	r27
    4cee:	ef 93       	push	r30
    4cf0:	ff 93       	push	r31
    4cf2:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <InterruptFuncTable+0x60>
    4cf6:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <InterruptFuncTable+0x61>
    4cfa:	30 97       	sbiw	r30, 0x00	; 0
    4cfc:	29 f0       	breq	.+10     	; 0x4d08 <__vector_48+0x3c>
    4cfe:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <InterruptSenderTable+0x60>
    4d02:	90 91 1d 24 	lds	r25, 0x241D	; 0x80241d <InterruptSenderTable+0x61>
    4d06:	19 95       	eicall
    4d08:	ff 91       	pop	r31
    4d0a:	ef 91       	pop	r30
    4d0c:	bf 91       	pop	r27
    4d0e:	af 91       	pop	r26
    4d10:	9f 91       	pop	r25
    4d12:	8f 91       	pop	r24
    4d14:	7f 91       	pop	r23
    4d16:	6f 91       	pop	r22
    4d18:	5f 91       	pop	r21
    4d1a:	4f 91       	pop	r20
    4d1c:	3f 91       	pop	r19
    4d1e:	2f 91       	pop	r18
    4d20:	0f 90       	pop	r0
    4d22:	0b be       	out	0x3b, r0	; 59
    4d24:	0f 90       	pop	r0
    4d26:	0f be       	out	0x3f, r0	; 63
    4d28:	0f 90       	pop	r0
    4d2a:	1f 90       	pop	r1
    4d2c:	18 95       	reti

00004d2e <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    4d2e:	1f 92       	push	r1
    4d30:	0f 92       	push	r0
    4d32:	0f b6       	in	r0, 0x3f	; 63
    4d34:	0f 92       	push	r0
    4d36:	11 24       	eor	r1, r1
    4d38:	0b b6       	in	r0, 0x3b	; 59
    4d3a:	0f 92       	push	r0
    4d3c:	2f 93       	push	r18
    4d3e:	3f 93       	push	r19
    4d40:	4f 93       	push	r20
    4d42:	5f 93       	push	r21
    4d44:	6f 93       	push	r22
    4d46:	7f 93       	push	r23
    4d48:	8f 93       	push	r24
    4d4a:	9f 93       	push	r25
    4d4c:	af 93       	push	r26
    4d4e:	bf 93       	push	r27
    4d50:	ef 93       	push	r30
    4d52:	ff 93       	push	r31
    4d54:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <InterruptFuncTable+0x62>
    4d58:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <InterruptFuncTable+0x63>
    4d5c:	30 97       	sbiw	r30, 0x00	; 0
    4d5e:	29 f0       	breq	.+10     	; 0x4d6a <__vector_49+0x3c>
    4d60:	80 91 1e 24 	lds	r24, 0x241E	; 0x80241e <InterruptSenderTable+0x62>
    4d64:	90 91 1f 24 	lds	r25, 0x241F	; 0x80241f <InterruptSenderTable+0x63>
    4d68:	19 95       	eicall
    4d6a:	ff 91       	pop	r31
    4d6c:	ef 91       	pop	r30
    4d6e:	bf 91       	pop	r27
    4d70:	af 91       	pop	r26
    4d72:	9f 91       	pop	r25
    4d74:	8f 91       	pop	r24
    4d76:	7f 91       	pop	r23
    4d78:	6f 91       	pop	r22
    4d7a:	5f 91       	pop	r21
    4d7c:	4f 91       	pop	r20
    4d7e:	3f 91       	pop	r19
    4d80:	2f 91       	pop	r18
    4d82:	0f 90       	pop	r0
    4d84:	0b be       	out	0x3b, r0	; 59
    4d86:	0f 90       	pop	r0
    4d88:	0f be       	out	0x3f, r0	; 63
    4d8a:	0f 90       	pop	r0
    4d8c:	1f 90       	pop	r1
    4d8e:	18 95       	reti

00004d90 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    4d90:	1f 92       	push	r1
    4d92:	0f 92       	push	r0
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	0f 92       	push	r0
    4d98:	11 24       	eor	r1, r1
    4d9a:	0b b6       	in	r0, 0x3b	; 59
    4d9c:	0f 92       	push	r0
    4d9e:	2f 93       	push	r18
    4da0:	3f 93       	push	r19
    4da2:	4f 93       	push	r20
    4da4:	5f 93       	push	r21
    4da6:	6f 93       	push	r22
    4da8:	7f 93       	push	r23
    4daa:	8f 93       	push	r24
    4dac:	9f 93       	push	r25
    4dae:	af 93       	push	r26
    4db0:	bf 93       	push	r27
    4db2:	ef 93       	push	r30
    4db4:	ff 93       	push	r31
    4db6:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <InterruptFuncTable+0x64>
    4dba:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <InterruptFuncTable+0x65>
    4dbe:	30 97       	sbiw	r30, 0x00	; 0
    4dc0:	29 f0       	breq	.+10     	; 0x4dcc <__vector_50+0x3c>
    4dc2:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <InterruptSenderTable+0x64>
    4dc6:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <InterruptSenderTable+0x65>
    4dca:	19 95       	eicall
    4dcc:	ff 91       	pop	r31
    4dce:	ef 91       	pop	r30
    4dd0:	bf 91       	pop	r27
    4dd2:	af 91       	pop	r26
    4dd4:	9f 91       	pop	r25
    4dd6:	8f 91       	pop	r24
    4dd8:	7f 91       	pop	r23
    4dda:	6f 91       	pop	r22
    4ddc:	5f 91       	pop	r21
    4dde:	4f 91       	pop	r20
    4de0:	3f 91       	pop	r19
    4de2:	2f 91       	pop	r18
    4de4:	0f 90       	pop	r0
    4de6:	0b be       	out	0x3b, r0	; 59
    4de8:	0f 90       	pop	r0
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	0f 90       	pop	r0
    4dee:	1f 90       	pop	r1
    4df0:	18 95       	reti

00004df2 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    4df2:	1f 92       	push	r1
    4df4:	0f 92       	push	r0
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	0f 92       	push	r0
    4dfa:	11 24       	eor	r1, r1
    4dfc:	0b b6       	in	r0, 0x3b	; 59
    4dfe:	0f 92       	push	r0
    4e00:	2f 93       	push	r18
    4e02:	3f 93       	push	r19
    4e04:	4f 93       	push	r20
    4e06:	5f 93       	push	r21
    4e08:	6f 93       	push	r22
    4e0a:	7f 93       	push	r23
    4e0c:	8f 93       	push	r24
    4e0e:	9f 93       	push	r25
    4e10:	af 93       	push	r26
    4e12:	bf 93       	push	r27
    4e14:	ef 93       	push	r30
    4e16:	ff 93       	push	r31
    4e18:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <InterruptFuncTable+0x66>
    4e1c:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <InterruptFuncTable+0x67>
    4e20:	30 97       	sbiw	r30, 0x00	; 0
    4e22:	29 f0       	breq	.+10     	; 0x4e2e <__vector_51+0x3c>
    4e24:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <InterruptSenderTable+0x66>
    4e28:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <InterruptSenderTable+0x67>
    4e2c:	19 95       	eicall
    4e2e:	ff 91       	pop	r31
    4e30:	ef 91       	pop	r30
    4e32:	bf 91       	pop	r27
    4e34:	af 91       	pop	r26
    4e36:	9f 91       	pop	r25
    4e38:	8f 91       	pop	r24
    4e3a:	7f 91       	pop	r23
    4e3c:	6f 91       	pop	r22
    4e3e:	5f 91       	pop	r21
    4e40:	4f 91       	pop	r20
    4e42:	3f 91       	pop	r19
    4e44:	2f 91       	pop	r18
    4e46:	0f 90       	pop	r0
    4e48:	0b be       	out	0x3b, r0	; 59
    4e4a:	0f 90       	pop	r0
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	0f 90       	pop	r0
    4e50:	1f 90       	pop	r1
    4e52:	18 95       	reti

00004e54 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    4e54:	1f 92       	push	r1
    4e56:	0f 92       	push	r0
    4e58:	0f b6       	in	r0, 0x3f	; 63
    4e5a:	0f 92       	push	r0
    4e5c:	11 24       	eor	r1, r1
    4e5e:	0b b6       	in	r0, 0x3b	; 59
    4e60:	0f 92       	push	r0
    4e62:	2f 93       	push	r18
    4e64:	3f 93       	push	r19
    4e66:	4f 93       	push	r20
    4e68:	5f 93       	push	r21
    4e6a:	6f 93       	push	r22
    4e6c:	7f 93       	push	r23
    4e6e:	8f 93       	push	r24
    4e70:	9f 93       	push	r25
    4e72:	af 93       	push	r26
    4e74:	bf 93       	push	r27
    4e76:	ef 93       	push	r30
    4e78:	ff 93       	push	r31
    4e7a:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <InterruptFuncTable+0x68>
    4e7e:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <InterruptFuncTable+0x69>
    4e82:	30 97       	sbiw	r30, 0x00	; 0
    4e84:	29 f0       	breq	.+10     	; 0x4e90 <__vector_52+0x3c>
    4e86:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <InterruptSenderTable+0x68>
    4e8a:	90 91 25 24 	lds	r25, 0x2425	; 0x802425 <InterruptSenderTable+0x69>
    4e8e:	19 95       	eicall
    4e90:	ff 91       	pop	r31
    4e92:	ef 91       	pop	r30
    4e94:	bf 91       	pop	r27
    4e96:	af 91       	pop	r26
    4e98:	9f 91       	pop	r25
    4e9a:	8f 91       	pop	r24
    4e9c:	7f 91       	pop	r23
    4e9e:	6f 91       	pop	r22
    4ea0:	5f 91       	pop	r21
    4ea2:	4f 91       	pop	r20
    4ea4:	3f 91       	pop	r19
    4ea6:	2f 91       	pop	r18
    4ea8:	0f 90       	pop	r0
    4eaa:	0b be       	out	0x3b, r0	; 59
    4eac:	0f 90       	pop	r0
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	0f 90       	pop	r0
    4eb2:	1f 90       	pop	r1
    4eb4:	18 95       	reti

00004eb6 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	0b b6       	in	r0, 0x3b	; 59
    4ec2:	0f 92       	push	r0
    4ec4:	2f 93       	push	r18
    4ec6:	3f 93       	push	r19
    4ec8:	4f 93       	push	r20
    4eca:	5f 93       	push	r21
    4ecc:	6f 93       	push	r22
    4ece:	7f 93       	push	r23
    4ed0:	8f 93       	push	r24
    4ed2:	9f 93       	push	r25
    4ed4:	af 93       	push	r26
    4ed6:	bf 93       	push	r27
    4ed8:	ef 93       	push	r30
    4eda:	ff 93       	push	r31
    4edc:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <InterruptFuncTable+0x6a>
    4ee0:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <InterruptFuncTable+0x6b>
    4ee4:	30 97       	sbiw	r30, 0x00	; 0
    4ee6:	29 f0       	breq	.+10     	; 0x4ef2 <__vector_53+0x3c>
    4ee8:	80 91 26 24 	lds	r24, 0x2426	; 0x802426 <InterruptSenderTable+0x6a>
    4eec:	90 91 27 24 	lds	r25, 0x2427	; 0x802427 <InterruptSenderTable+0x6b>
    4ef0:	19 95       	eicall
    4ef2:	ff 91       	pop	r31
    4ef4:	ef 91       	pop	r30
    4ef6:	bf 91       	pop	r27
    4ef8:	af 91       	pop	r26
    4efa:	9f 91       	pop	r25
    4efc:	8f 91       	pop	r24
    4efe:	7f 91       	pop	r23
    4f00:	6f 91       	pop	r22
    4f02:	5f 91       	pop	r21
    4f04:	4f 91       	pop	r20
    4f06:	3f 91       	pop	r19
    4f08:	2f 91       	pop	r18
    4f0a:	0f 90       	pop	r0
    4f0c:	0b be       	out	0x3b, r0	; 59
    4f0e:	0f 90       	pop	r0
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	0f 90       	pop	r0
    4f14:	1f 90       	pop	r1
    4f16:	18 95       	reti

00004f18 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    4f18:	1f 92       	push	r1
    4f1a:	0f 92       	push	r0
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	0f 92       	push	r0
    4f20:	11 24       	eor	r1, r1
    4f22:	0b b6       	in	r0, 0x3b	; 59
    4f24:	0f 92       	push	r0
    4f26:	2f 93       	push	r18
    4f28:	3f 93       	push	r19
    4f2a:	4f 93       	push	r20
    4f2c:	5f 93       	push	r21
    4f2e:	6f 93       	push	r22
    4f30:	7f 93       	push	r23
    4f32:	8f 93       	push	r24
    4f34:	9f 93       	push	r25
    4f36:	af 93       	push	r26
    4f38:	bf 93       	push	r27
    4f3a:	ef 93       	push	r30
    4f3c:	ff 93       	push	r31
    4f3e:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <InterruptFuncTable+0x6c>
    4f42:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <InterruptFuncTable+0x6d>
    4f46:	30 97       	sbiw	r30, 0x00	; 0
    4f48:	29 f0       	breq	.+10     	; 0x4f54 <__vector_54+0x3c>
    4f4a:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <InterruptSenderTable+0x6c>
    4f4e:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <InterruptSenderTable+0x6d>
    4f52:	19 95       	eicall
    4f54:	ff 91       	pop	r31
    4f56:	ef 91       	pop	r30
    4f58:	bf 91       	pop	r27
    4f5a:	af 91       	pop	r26
    4f5c:	9f 91       	pop	r25
    4f5e:	8f 91       	pop	r24
    4f60:	7f 91       	pop	r23
    4f62:	6f 91       	pop	r22
    4f64:	5f 91       	pop	r21
    4f66:	4f 91       	pop	r20
    4f68:	3f 91       	pop	r19
    4f6a:	2f 91       	pop	r18
    4f6c:	0f 90       	pop	r0
    4f6e:	0b be       	out	0x3b, r0	; 59
    4f70:	0f 90       	pop	r0
    4f72:	0f be       	out	0x3f, r0	; 63
    4f74:	0f 90       	pop	r0
    4f76:	1f 90       	pop	r1
    4f78:	18 95       	reti

00004f7a <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    4f7a:	1f 92       	push	r1
    4f7c:	0f 92       	push	r0
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	0f 92       	push	r0
    4f82:	11 24       	eor	r1, r1
    4f84:	0b b6       	in	r0, 0x3b	; 59
    4f86:	0f 92       	push	r0
    4f88:	2f 93       	push	r18
    4f8a:	3f 93       	push	r19
    4f8c:	4f 93       	push	r20
    4f8e:	5f 93       	push	r21
    4f90:	6f 93       	push	r22
    4f92:	7f 93       	push	r23
    4f94:	8f 93       	push	r24
    4f96:	9f 93       	push	r25
    4f98:	af 93       	push	r26
    4f9a:	bf 93       	push	r27
    4f9c:	ef 93       	push	r30
    4f9e:	ff 93       	push	r31
    4fa0:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <InterruptFuncTable+0x6e>
    4fa4:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <InterruptFuncTable+0x6f>
    4fa8:	30 97       	sbiw	r30, 0x00	; 0
    4faa:	29 f0       	breq	.+10     	; 0x4fb6 <__vector_55+0x3c>
    4fac:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <InterruptSenderTable+0x6e>
    4fb0:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <InterruptSenderTable+0x6f>
    4fb4:	19 95       	eicall
    4fb6:	ff 91       	pop	r31
    4fb8:	ef 91       	pop	r30
    4fba:	bf 91       	pop	r27
    4fbc:	af 91       	pop	r26
    4fbe:	9f 91       	pop	r25
    4fc0:	8f 91       	pop	r24
    4fc2:	7f 91       	pop	r23
    4fc4:	6f 91       	pop	r22
    4fc6:	5f 91       	pop	r21
    4fc8:	4f 91       	pop	r20
    4fca:	3f 91       	pop	r19
    4fcc:	2f 91       	pop	r18
    4fce:	0f 90       	pop	r0
    4fd0:	0b be       	out	0x3b, r0	; 59
    4fd2:	0f 90       	pop	r0
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	0f 90       	pop	r0
    4fd8:	1f 90       	pop	r1
    4fda:	18 95       	reti

00004fdc <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    4fdc:	1f 92       	push	r1
    4fde:	0f 92       	push	r0
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	0f 92       	push	r0
    4fe4:	11 24       	eor	r1, r1
    4fe6:	0b b6       	in	r0, 0x3b	; 59
    4fe8:	0f 92       	push	r0
    4fea:	2f 93       	push	r18
    4fec:	3f 93       	push	r19
    4fee:	4f 93       	push	r20
    4ff0:	5f 93       	push	r21
    4ff2:	6f 93       	push	r22
    4ff4:	7f 93       	push	r23
    4ff6:	8f 93       	push	r24
    4ff8:	9f 93       	push	r25
    4ffa:	af 93       	push	r26
    4ffc:	bf 93       	push	r27
    4ffe:	ef 93       	push	r30
    5000:	ff 93       	push	r31
    5002:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <InterruptFuncTable+0x70>
    5006:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <InterruptFuncTable+0x71>
    500a:	30 97       	sbiw	r30, 0x00	; 0
    500c:	29 f0       	breq	.+10     	; 0x5018 <__vector_56+0x3c>
    500e:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <InterruptSenderTable+0x70>
    5012:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <InterruptSenderTable+0x71>
    5016:	19 95       	eicall
    5018:	ff 91       	pop	r31
    501a:	ef 91       	pop	r30
    501c:	bf 91       	pop	r27
    501e:	af 91       	pop	r26
    5020:	9f 91       	pop	r25
    5022:	8f 91       	pop	r24
    5024:	7f 91       	pop	r23
    5026:	6f 91       	pop	r22
    5028:	5f 91       	pop	r21
    502a:	4f 91       	pop	r20
    502c:	3f 91       	pop	r19
    502e:	2f 91       	pop	r18
    5030:	0f 90       	pop	r0
    5032:	0b be       	out	0x3b, r0	; 59
    5034:	0f 90       	pop	r0
    5036:	0f be       	out	0x3f, r0	; 63
    5038:	0f 90       	pop	r0
    503a:	1f 90       	pop	r1
    503c:	18 95       	reti

0000503e <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    503e:	1f 92       	push	r1
    5040:	0f 92       	push	r0
    5042:	0f b6       	in	r0, 0x3f	; 63
    5044:	0f 92       	push	r0
    5046:	11 24       	eor	r1, r1
    5048:	0b b6       	in	r0, 0x3b	; 59
    504a:	0f 92       	push	r0
    504c:	2f 93       	push	r18
    504e:	3f 93       	push	r19
    5050:	4f 93       	push	r20
    5052:	5f 93       	push	r21
    5054:	6f 93       	push	r22
    5056:	7f 93       	push	r23
    5058:	8f 93       	push	r24
    505a:	9f 93       	push	r25
    505c:	af 93       	push	r26
    505e:	bf 93       	push	r27
    5060:	ef 93       	push	r30
    5062:	ff 93       	push	r31
    5064:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <InterruptFuncTable+0x72>
    5068:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <InterruptFuncTable+0x73>
    506c:	30 97       	sbiw	r30, 0x00	; 0
    506e:	29 f0       	breq	.+10     	; 0x507a <__vector_57+0x3c>
    5070:	80 91 2e 24 	lds	r24, 0x242E	; 0x80242e <InterruptSenderTable+0x72>
    5074:	90 91 2f 24 	lds	r25, 0x242F	; 0x80242f <InterruptSenderTable+0x73>
    5078:	19 95       	eicall
    507a:	ff 91       	pop	r31
    507c:	ef 91       	pop	r30
    507e:	bf 91       	pop	r27
    5080:	af 91       	pop	r26
    5082:	9f 91       	pop	r25
    5084:	8f 91       	pop	r24
    5086:	7f 91       	pop	r23
    5088:	6f 91       	pop	r22
    508a:	5f 91       	pop	r21
    508c:	4f 91       	pop	r20
    508e:	3f 91       	pop	r19
    5090:	2f 91       	pop	r18
    5092:	0f 90       	pop	r0
    5094:	0b be       	out	0x3b, r0	; 59
    5096:	0f 90       	pop	r0
    5098:	0f be       	out	0x3f, r0	; 63
    509a:	0f 90       	pop	r0
    509c:	1f 90       	pop	r1
    509e:	18 95       	reti

000050a0 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    50a0:	1f 92       	push	r1
    50a2:	0f 92       	push	r0
    50a4:	0f b6       	in	r0, 0x3f	; 63
    50a6:	0f 92       	push	r0
    50a8:	11 24       	eor	r1, r1
    50aa:	0b b6       	in	r0, 0x3b	; 59
    50ac:	0f 92       	push	r0
    50ae:	2f 93       	push	r18
    50b0:	3f 93       	push	r19
    50b2:	4f 93       	push	r20
    50b4:	5f 93       	push	r21
    50b6:	6f 93       	push	r22
    50b8:	7f 93       	push	r23
    50ba:	8f 93       	push	r24
    50bc:	9f 93       	push	r25
    50be:	af 93       	push	r26
    50c0:	bf 93       	push	r27
    50c2:	ef 93       	push	r30
    50c4:	ff 93       	push	r31
    50c6:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <InterruptFuncTable+0x74>
    50ca:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <InterruptFuncTable+0x75>
    50ce:	30 97       	sbiw	r30, 0x00	; 0
    50d0:	29 f0       	breq	.+10     	; 0x50dc <__vector_58+0x3c>
    50d2:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <InterruptSenderTable+0x74>
    50d6:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <InterruptSenderTable+0x75>
    50da:	19 95       	eicall
    50dc:	ff 91       	pop	r31
    50de:	ef 91       	pop	r30
    50e0:	bf 91       	pop	r27
    50e2:	af 91       	pop	r26
    50e4:	9f 91       	pop	r25
    50e6:	8f 91       	pop	r24
    50e8:	7f 91       	pop	r23
    50ea:	6f 91       	pop	r22
    50ec:	5f 91       	pop	r21
    50ee:	4f 91       	pop	r20
    50f0:	3f 91       	pop	r19
    50f2:	2f 91       	pop	r18
    50f4:	0f 90       	pop	r0
    50f6:	0b be       	out	0x3b, r0	; 59
    50f8:	0f 90       	pop	r0
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	0f 90       	pop	r0
    50fe:	1f 90       	pop	r1
    5100:	18 95       	reti

00005102 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    5102:	1f 92       	push	r1
    5104:	0f 92       	push	r0
    5106:	0f b6       	in	r0, 0x3f	; 63
    5108:	0f 92       	push	r0
    510a:	11 24       	eor	r1, r1
    510c:	0b b6       	in	r0, 0x3b	; 59
    510e:	0f 92       	push	r0
    5110:	2f 93       	push	r18
    5112:	3f 93       	push	r19
    5114:	4f 93       	push	r20
    5116:	5f 93       	push	r21
    5118:	6f 93       	push	r22
    511a:	7f 93       	push	r23
    511c:	8f 93       	push	r24
    511e:	9f 93       	push	r25
    5120:	af 93       	push	r26
    5122:	bf 93       	push	r27
    5124:	ef 93       	push	r30
    5126:	ff 93       	push	r31
    5128:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <InterruptFuncTable+0x76>
    512c:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <InterruptFuncTable+0x77>
    5130:	30 97       	sbiw	r30, 0x00	; 0
    5132:	29 f0       	breq	.+10     	; 0x513e <__vector_59+0x3c>
    5134:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <InterruptSenderTable+0x76>
    5138:	90 91 33 24 	lds	r25, 0x2433	; 0x802433 <InterruptSenderTable+0x77>
    513c:	19 95       	eicall
    513e:	ff 91       	pop	r31
    5140:	ef 91       	pop	r30
    5142:	bf 91       	pop	r27
    5144:	af 91       	pop	r26
    5146:	9f 91       	pop	r25
    5148:	8f 91       	pop	r24
    514a:	7f 91       	pop	r23
    514c:	6f 91       	pop	r22
    514e:	5f 91       	pop	r21
    5150:	4f 91       	pop	r20
    5152:	3f 91       	pop	r19
    5154:	2f 91       	pop	r18
    5156:	0f 90       	pop	r0
    5158:	0b be       	out	0x3b, r0	; 59
    515a:	0f 90       	pop	r0
    515c:	0f be       	out	0x3f, r0	; 63
    515e:	0f 90       	pop	r0
    5160:	1f 90       	pop	r1
    5162:	18 95       	reti

00005164 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    5164:	1f 92       	push	r1
    5166:	0f 92       	push	r0
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	0f 92       	push	r0
    516c:	11 24       	eor	r1, r1
    516e:	0b b6       	in	r0, 0x3b	; 59
    5170:	0f 92       	push	r0
    5172:	2f 93       	push	r18
    5174:	3f 93       	push	r19
    5176:	4f 93       	push	r20
    5178:	5f 93       	push	r21
    517a:	6f 93       	push	r22
    517c:	7f 93       	push	r23
    517e:	8f 93       	push	r24
    5180:	9f 93       	push	r25
    5182:	af 93       	push	r26
    5184:	bf 93       	push	r27
    5186:	ef 93       	push	r30
    5188:	ff 93       	push	r31
    518a:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <InterruptFuncTable+0x78>
    518e:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <InterruptFuncTable+0x79>
    5192:	30 97       	sbiw	r30, 0x00	; 0
    5194:	29 f0       	breq	.+10     	; 0x51a0 <__vector_60+0x3c>
    5196:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <InterruptSenderTable+0x78>
    519a:	90 91 35 24 	lds	r25, 0x2435	; 0x802435 <InterruptSenderTable+0x79>
    519e:	19 95       	eicall
    51a0:	ff 91       	pop	r31
    51a2:	ef 91       	pop	r30
    51a4:	bf 91       	pop	r27
    51a6:	af 91       	pop	r26
    51a8:	9f 91       	pop	r25
    51aa:	8f 91       	pop	r24
    51ac:	7f 91       	pop	r23
    51ae:	6f 91       	pop	r22
    51b0:	5f 91       	pop	r21
    51b2:	4f 91       	pop	r20
    51b4:	3f 91       	pop	r19
    51b6:	2f 91       	pop	r18
    51b8:	0f 90       	pop	r0
    51ba:	0b be       	out	0x3b, r0	; 59
    51bc:	0f 90       	pop	r0
    51be:	0f be       	out	0x3f, r0	; 63
    51c0:	0f 90       	pop	r0
    51c2:	1f 90       	pop	r1
    51c4:	18 95       	reti

000051c6 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    51c6:	1f 92       	push	r1
    51c8:	0f 92       	push	r0
    51ca:	0f b6       	in	r0, 0x3f	; 63
    51cc:	0f 92       	push	r0
    51ce:	11 24       	eor	r1, r1
    51d0:	0b b6       	in	r0, 0x3b	; 59
    51d2:	0f 92       	push	r0
    51d4:	2f 93       	push	r18
    51d6:	3f 93       	push	r19
    51d8:	4f 93       	push	r20
    51da:	5f 93       	push	r21
    51dc:	6f 93       	push	r22
    51de:	7f 93       	push	r23
    51e0:	8f 93       	push	r24
    51e2:	9f 93       	push	r25
    51e4:	af 93       	push	r26
    51e6:	bf 93       	push	r27
    51e8:	ef 93       	push	r30
    51ea:	ff 93       	push	r31
    51ec:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <InterruptFuncTable+0x7a>
    51f0:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <InterruptFuncTable+0x7b>
    51f4:	30 97       	sbiw	r30, 0x00	; 0
    51f6:	29 f0       	breq	.+10     	; 0x5202 <__vector_61+0x3c>
    51f8:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <InterruptSenderTable+0x7a>
    51fc:	90 91 37 24 	lds	r25, 0x2437	; 0x802437 <InterruptSenderTable+0x7b>
    5200:	19 95       	eicall
    5202:	ff 91       	pop	r31
    5204:	ef 91       	pop	r30
    5206:	bf 91       	pop	r27
    5208:	af 91       	pop	r26
    520a:	9f 91       	pop	r25
    520c:	8f 91       	pop	r24
    520e:	7f 91       	pop	r23
    5210:	6f 91       	pop	r22
    5212:	5f 91       	pop	r21
    5214:	4f 91       	pop	r20
    5216:	3f 91       	pop	r19
    5218:	2f 91       	pop	r18
    521a:	0f 90       	pop	r0
    521c:	0b be       	out	0x3b, r0	; 59
    521e:	0f 90       	pop	r0
    5220:	0f be       	out	0x3f, r0	; 63
    5222:	0f 90       	pop	r0
    5224:	1f 90       	pop	r1
    5226:	18 95       	reti

00005228 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    5228:	1f 92       	push	r1
    522a:	0f 92       	push	r0
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	0f 92       	push	r0
    5230:	11 24       	eor	r1, r1
    5232:	0b b6       	in	r0, 0x3b	; 59
    5234:	0f 92       	push	r0
    5236:	2f 93       	push	r18
    5238:	3f 93       	push	r19
    523a:	4f 93       	push	r20
    523c:	5f 93       	push	r21
    523e:	6f 93       	push	r22
    5240:	7f 93       	push	r23
    5242:	8f 93       	push	r24
    5244:	9f 93       	push	r25
    5246:	af 93       	push	r26
    5248:	bf 93       	push	r27
    524a:	ef 93       	push	r30
    524c:	ff 93       	push	r31
    524e:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <InterruptFuncTable+0x7c>
    5252:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <InterruptFuncTable+0x7d>
    5256:	30 97       	sbiw	r30, 0x00	; 0
    5258:	29 f0       	breq	.+10     	; 0x5264 <__vector_62+0x3c>
    525a:	80 91 38 24 	lds	r24, 0x2438	; 0x802438 <InterruptSenderTable+0x7c>
    525e:	90 91 39 24 	lds	r25, 0x2439	; 0x802439 <InterruptSenderTable+0x7d>
    5262:	19 95       	eicall
    5264:	ff 91       	pop	r31
    5266:	ef 91       	pop	r30
    5268:	bf 91       	pop	r27
    526a:	af 91       	pop	r26
    526c:	9f 91       	pop	r25
    526e:	8f 91       	pop	r24
    5270:	7f 91       	pop	r23
    5272:	6f 91       	pop	r22
    5274:	5f 91       	pop	r21
    5276:	4f 91       	pop	r20
    5278:	3f 91       	pop	r19
    527a:	2f 91       	pop	r18
    527c:	0f 90       	pop	r0
    527e:	0b be       	out	0x3b, r0	; 59
    5280:	0f 90       	pop	r0
    5282:	0f be       	out	0x3f, r0	; 63
    5284:	0f 90       	pop	r0
    5286:	1f 90       	pop	r1
    5288:	18 95       	reti

0000528a <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    528a:	1f 92       	push	r1
    528c:	0f 92       	push	r0
    528e:	0f b6       	in	r0, 0x3f	; 63
    5290:	0f 92       	push	r0
    5292:	11 24       	eor	r1, r1
    5294:	0b b6       	in	r0, 0x3b	; 59
    5296:	0f 92       	push	r0
    5298:	2f 93       	push	r18
    529a:	3f 93       	push	r19
    529c:	4f 93       	push	r20
    529e:	5f 93       	push	r21
    52a0:	6f 93       	push	r22
    52a2:	7f 93       	push	r23
    52a4:	8f 93       	push	r24
    52a6:	9f 93       	push	r25
    52a8:	af 93       	push	r26
    52aa:	bf 93       	push	r27
    52ac:	ef 93       	push	r30
    52ae:	ff 93       	push	r31
    52b0:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <InterruptFuncTable+0x7e>
    52b4:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <InterruptFuncTable+0x7f>
    52b8:	30 97       	sbiw	r30, 0x00	; 0
    52ba:	29 f0       	breq	.+10     	; 0x52c6 <__vector_63+0x3c>
    52bc:	80 91 3a 24 	lds	r24, 0x243A	; 0x80243a <InterruptSenderTable+0x7e>
    52c0:	90 91 3b 24 	lds	r25, 0x243B	; 0x80243b <InterruptSenderTable+0x7f>
    52c4:	19 95       	eicall
    52c6:	ff 91       	pop	r31
    52c8:	ef 91       	pop	r30
    52ca:	bf 91       	pop	r27
    52cc:	af 91       	pop	r26
    52ce:	9f 91       	pop	r25
    52d0:	8f 91       	pop	r24
    52d2:	7f 91       	pop	r23
    52d4:	6f 91       	pop	r22
    52d6:	5f 91       	pop	r21
    52d8:	4f 91       	pop	r20
    52da:	3f 91       	pop	r19
    52dc:	2f 91       	pop	r18
    52de:	0f 90       	pop	r0
    52e0:	0b be       	out	0x3b, r0	; 59
    52e2:	0f 90       	pop	r0
    52e4:	0f be       	out	0x3f, r0	; 63
    52e6:	0f 90       	pop	r0
    52e8:	1f 90       	pop	r1
    52ea:	18 95       	reti

000052ec <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    52ec:	1f 92       	push	r1
    52ee:	0f 92       	push	r0
    52f0:	0f b6       	in	r0, 0x3f	; 63
    52f2:	0f 92       	push	r0
    52f4:	11 24       	eor	r1, r1
    52f6:	0b b6       	in	r0, 0x3b	; 59
    52f8:	0f 92       	push	r0
    52fa:	2f 93       	push	r18
    52fc:	3f 93       	push	r19
    52fe:	4f 93       	push	r20
    5300:	5f 93       	push	r21
    5302:	6f 93       	push	r22
    5304:	7f 93       	push	r23
    5306:	8f 93       	push	r24
    5308:	9f 93       	push	r25
    530a:	af 93       	push	r26
    530c:	bf 93       	push	r27
    530e:	ef 93       	push	r30
    5310:	ff 93       	push	r31
    5312:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <InterruptFuncTable+0x80>
    5316:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <InterruptFuncTable+0x81>
    531a:	30 97       	sbiw	r30, 0x00	; 0
    531c:	29 f0       	breq	.+10     	; 0x5328 <__vector_64+0x3c>
    531e:	80 91 3c 24 	lds	r24, 0x243C	; 0x80243c <InterruptSenderTable+0x80>
    5322:	90 91 3d 24 	lds	r25, 0x243D	; 0x80243d <InterruptSenderTable+0x81>
    5326:	19 95       	eicall
    5328:	ff 91       	pop	r31
    532a:	ef 91       	pop	r30
    532c:	bf 91       	pop	r27
    532e:	af 91       	pop	r26
    5330:	9f 91       	pop	r25
    5332:	8f 91       	pop	r24
    5334:	7f 91       	pop	r23
    5336:	6f 91       	pop	r22
    5338:	5f 91       	pop	r21
    533a:	4f 91       	pop	r20
    533c:	3f 91       	pop	r19
    533e:	2f 91       	pop	r18
    5340:	0f 90       	pop	r0
    5342:	0b be       	out	0x3b, r0	; 59
    5344:	0f 90       	pop	r0
    5346:	0f be       	out	0x3f, r0	; 63
    5348:	0f 90       	pop	r0
    534a:	1f 90       	pop	r1
    534c:	18 95       	reti

0000534e <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    534e:	1f 92       	push	r1
    5350:	0f 92       	push	r0
    5352:	0f b6       	in	r0, 0x3f	; 63
    5354:	0f 92       	push	r0
    5356:	11 24       	eor	r1, r1
    5358:	0b b6       	in	r0, 0x3b	; 59
    535a:	0f 92       	push	r0
    535c:	2f 93       	push	r18
    535e:	3f 93       	push	r19
    5360:	4f 93       	push	r20
    5362:	5f 93       	push	r21
    5364:	6f 93       	push	r22
    5366:	7f 93       	push	r23
    5368:	8f 93       	push	r24
    536a:	9f 93       	push	r25
    536c:	af 93       	push	r26
    536e:	bf 93       	push	r27
    5370:	ef 93       	push	r30
    5372:	ff 93       	push	r31
    5374:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <InterruptFuncTable+0x82>
    5378:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <InterruptFuncTable+0x83>
    537c:	30 97       	sbiw	r30, 0x00	; 0
    537e:	29 f0       	breq	.+10     	; 0x538a <__vector_65+0x3c>
    5380:	80 91 3e 24 	lds	r24, 0x243E	; 0x80243e <InterruptSenderTable+0x82>
    5384:	90 91 3f 24 	lds	r25, 0x243F	; 0x80243f <InterruptSenderTable+0x83>
    5388:	19 95       	eicall
    538a:	ff 91       	pop	r31
    538c:	ef 91       	pop	r30
    538e:	bf 91       	pop	r27
    5390:	af 91       	pop	r26
    5392:	9f 91       	pop	r25
    5394:	8f 91       	pop	r24
    5396:	7f 91       	pop	r23
    5398:	6f 91       	pop	r22
    539a:	5f 91       	pop	r21
    539c:	4f 91       	pop	r20
    539e:	3f 91       	pop	r19
    53a0:	2f 91       	pop	r18
    53a2:	0f 90       	pop	r0
    53a4:	0b be       	out	0x3b, r0	; 59
    53a6:	0f 90       	pop	r0
    53a8:	0f be       	out	0x3f, r0	; 63
    53aa:	0f 90       	pop	r0
    53ac:	1f 90       	pop	r1
    53ae:	18 95       	reti

000053b0 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    53b0:	1f 92       	push	r1
    53b2:	0f 92       	push	r0
    53b4:	0f b6       	in	r0, 0x3f	; 63
    53b6:	0f 92       	push	r0
    53b8:	11 24       	eor	r1, r1
    53ba:	0b b6       	in	r0, 0x3b	; 59
    53bc:	0f 92       	push	r0
    53be:	2f 93       	push	r18
    53c0:	3f 93       	push	r19
    53c2:	4f 93       	push	r20
    53c4:	5f 93       	push	r21
    53c6:	6f 93       	push	r22
    53c8:	7f 93       	push	r23
    53ca:	8f 93       	push	r24
    53cc:	9f 93       	push	r25
    53ce:	af 93       	push	r26
    53d0:	bf 93       	push	r27
    53d2:	ef 93       	push	r30
    53d4:	ff 93       	push	r31
    53d6:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <InterruptFuncTable+0x84>
    53da:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <InterruptFuncTable+0x85>
    53de:	30 97       	sbiw	r30, 0x00	; 0
    53e0:	29 f0       	breq	.+10     	; 0x53ec <__vector_66+0x3c>
    53e2:	80 91 40 24 	lds	r24, 0x2440	; 0x802440 <InterruptSenderTable+0x84>
    53e6:	90 91 41 24 	lds	r25, 0x2441	; 0x802441 <InterruptSenderTable+0x85>
    53ea:	19 95       	eicall
    53ec:	ff 91       	pop	r31
    53ee:	ef 91       	pop	r30
    53f0:	bf 91       	pop	r27
    53f2:	af 91       	pop	r26
    53f4:	9f 91       	pop	r25
    53f6:	8f 91       	pop	r24
    53f8:	7f 91       	pop	r23
    53fa:	6f 91       	pop	r22
    53fc:	5f 91       	pop	r21
    53fe:	4f 91       	pop	r20
    5400:	3f 91       	pop	r19
    5402:	2f 91       	pop	r18
    5404:	0f 90       	pop	r0
    5406:	0b be       	out	0x3b, r0	; 59
    5408:	0f 90       	pop	r0
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	0f 90       	pop	r0
    540e:	1f 90       	pop	r1
    5410:	18 95       	reti

00005412 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    5412:	1f 92       	push	r1
    5414:	0f 92       	push	r0
    5416:	0f b6       	in	r0, 0x3f	; 63
    5418:	0f 92       	push	r0
    541a:	11 24       	eor	r1, r1
    541c:	0b b6       	in	r0, 0x3b	; 59
    541e:	0f 92       	push	r0
    5420:	2f 93       	push	r18
    5422:	3f 93       	push	r19
    5424:	4f 93       	push	r20
    5426:	5f 93       	push	r21
    5428:	6f 93       	push	r22
    542a:	7f 93       	push	r23
    542c:	8f 93       	push	r24
    542e:	9f 93       	push	r25
    5430:	af 93       	push	r26
    5432:	bf 93       	push	r27
    5434:	ef 93       	push	r30
    5436:	ff 93       	push	r31
    5438:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <InterruptFuncTable+0x86>
    543c:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <InterruptFuncTable+0x87>
    5440:	30 97       	sbiw	r30, 0x00	; 0
    5442:	29 f0       	breq	.+10     	; 0x544e <__vector_67+0x3c>
    5444:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <InterruptSenderTable+0x86>
    5448:	90 91 43 24 	lds	r25, 0x2443	; 0x802443 <InterruptSenderTable+0x87>
    544c:	19 95       	eicall
    544e:	ff 91       	pop	r31
    5450:	ef 91       	pop	r30
    5452:	bf 91       	pop	r27
    5454:	af 91       	pop	r26
    5456:	9f 91       	pop	r25
    5458:	8f 91       	pop	r24
    545a:	7f 91       	pop	r23
    545c:	6f 91       	pop	r22
    545e:	5f 91       	pop	r21
    5460:	4f 91       	pop	r20
    5462:	3f 91       	pop	r19
    5464:	2f 91       	pop	r18
    5466:	0f 90       	pop	r0
    5468:	0b be       	out	0x3b, r0	; 59
    546a:	0f 90       	pop	r0
    546c:	0f be       	out	0x3f, r0	; 63
    546e:	0f 90       	pop	r0
    5470:	1f 90       	pop	r1
    5472:	18 95       	reti

00005474 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    5474:	1f 92       	push	r1
    5476:	0f 92       	push	r0
    5478:	0f b6       	in	r0, 0x3f	; 63
    547a:	0f 92       	push	r0
    547c:	11 24       	eor	r1, r1
    547e:	0b b6       	in	r0, 0x3b	; 59
    5480:	0f 92       	push	r0
    5482:	2f 93       	push	r18
    5484:	3f 93       	push	r19
    5486:	4f 93       	push	r20
    5488:	5f 93       	push	r21
    548a:	6f 93       	push	r22
    548c:	7f 93       	push	r23
    548e:	8f 93       	push	r24
    5490:	9f 93       	push	r25
    5492:	af 93       	push	r26
    5494:	bf 93       	push	r27
    5496:	ef 93       	push	r30
    5498:	ff 93       	push	r31
    549a:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <InterruptFuncTable+0x88>
    549e:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <InterruptFuncTable+0x89>
    54a2:	30 97       	sbiw	r30, 0x00	; 0
    54a4:	29 f0       	breq	.+10     	; 0x54b0 <__vector_68+0x3c>
    54a6:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <InterruptSenderTable+0x88>
    54aa:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <InterruptSenderTable+0x89>
    54ae:	19 95       	eicall
    54b0:	ff 91       	pop	r31
    54b2:	ef 91       	pop	r30
    54b4:	bf 91       	pop	r27
    54b6:	af 91       	pop	r26
    54b8:	9f 91       	pop	r25
    54ba:	8f 91       	pop	r24
    54bc:	7f 91       	pop	r23
    54be:	6f 91       	pop	r22
    54c0:	5f 91       	pop	r21
    54c2:	4f 91       	pop	r20
    54c4:	3f 91       	pop	r19
    54c6:	2f 91       	pop	r18
    54c8:	0f 90       	pop	r0
    54ca:	0b be       	out	0x3b, r0	; 59
    54cc:	0f 90       	pop	r0
    54ce:	0f be       	out	0x3f, r0	; 63
    54d0:	0f 90       	pop	r0
    54d2:	1f 90       	pop	r1
    54d4:	18 95       	reti

000054d6 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    54d6:	1f 92       	push	r1
    54d8:	0f 92       	push	r0
    54da:	0f b6       	in	r0, 0x3f	; 63
    54dc:	0f 92       	push	r0
    54de:	11 24       	eor	r1, r1
    54e0:	0b b6       	in	r0, 0x3b	; 59
    54e2:	0f 92       	push	r0
    54e4:	2f 93       	push	r18
    54e6:	3f 93       	push	r19
    54e8:	4f 93       	push	r20
    54ea:	5f 93       	push	r21
    54ec:	6f 93       	push	r22
    54ee:	7f 93       	push	r23
    54f0:	8f 93       	push	r24
    54f2:	9f 93       	push	r25
    54f4:	af 93       	push	r26
    54f6:	bf 93       	push	r27
    54f8:	ef 93       	push	r30
    54fa:	ff 93       	push	r31
    54fc:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <InterruptFuncTable+0x8a>
    5500:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <InterruptFuncTable+0x8b>
    5504:	30 97       	sbiw	r30, 0x00	; 0
    5506:	29 f0       	breq	.+10     	; 0x5512 <__vector_69+0x3c>
    5508:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <InterruptSenderTable+0x8a>
    550c:	90 91 47 24 	lds	r25, 0x2447	; 0x802447 <InterruptSenderTable+0x8b>
    5510:	19 95       	eicall
    5512:	ff 91       	pop	r31
    5514:	ef 91       	pop	r30
    5516:	bf 91       	pop	r27
    5518:	af 91       	pop	r26
    551a:	9f 91       	pop	r25
    551c:	8f 91       	pop	r24
    551e:	7f 91       	pop	r23
    5520:	6f 91       	pop	r22
    5522:	5f 91       	pop	r21
    5524:	4f 91       	pop	r20
    5526:	3f 91       	pop	r19
    5528:	2f 91       	pop	r18
    552a:	0f 90       	pop	r0
    552c:	0b be       	out	0x3b, r0	; 59
    552e:	0f 90       	pop	r0
    5530:	0f be       	out	0x3f, r0	; 63
    5532:	0f 90       	pop	r0
    5534:	1f 90       	pop	r1
    5536:	18 95       	reti

00005538 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    5538:	1f 92       	push	r1
    553a:	0f 92       	push	r0
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	0f 92       	push	r0
    5540:	11 24       	eor	r1, r1
    5542:	0b b6       	in	r0, 0x3b	; 59
    5544:	0f 92       	push	r0
    5546:	2f 93       	push	r18
    5548:	3f 93       	push	r19
    554a:	4f 93       	push	r20
    554c:	5f 93       	push	r21
    554e:	6f 93       	push	r22
    5550:	7f 93       	push	r23
    5552:	8f 93       	push	r24
    5554:	9f 93       	push	r25
    5556:	af 93       	push	r26
    5558:	bf 93       	push	r27
    555a:	ef 93       	push	r30
    555c:	ff 93       	push	r31
    555e:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <InterruptFuncTable+0x8c>
    5562:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <InterruptFuncTable+0x8d>
    5566:	30 97       	sbiw	r30, 0x00	; 0
    5568:	29 f0       	breq	.+10     	; 0x5574 <__vector_70+0x3c>
    556a:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <InterruptSenderTable+0x8c>
    556e:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <InterruptSenderTable+0x8d>
    5572:	19 95       	eicall
    5574:	ff 91       	pop	r31
    5576:	ef 91       	pop	r30
    5578:	bf 91       	pop	r27
    557a:	af 91       	pop	r26
    557c:	9f 91       	pop	r25
    557e:	8f 91       	pop	r24
    5580:	7f 91       	pop	r23
    5582:	6f 91       	pop	r22
    5584:	5f 91       	pop	r21
    5586:	4f 91       	pop	r20
    5588:	3f 91       	pop	r19
    558a:	2f 91       	pop	r18
    558c:	0f 90       	pop	r0
    558e:	0b be       	out	0x3b, r0	; 59
    5590:	0f 90       	pop	r0
    5592:	0f be       	out	0x3f, r0	; 63
    5594:	0f 90       	pop	r0
    5596:	1f 90       	pop	r1
    5598:	18 95       	reti

0000559a <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    559a:	1f 92       	push	r1
    559c:	0f 92       	push	r0
    559e:	0f b6       	in	r0, 0x3f	; 63
    55a0:	0f 92       	push	r0
    55a2:	11 24       	eor	r1, r1
    55a4:	0b b6       	in	r0, 0x3b	; 59
    55a6:	0f 92       	push	r0
    55a8:	2f 93       	push	r18
    55aa:	3f 93       	push	r19
    55ac:	4f 93       	push	r20
    55ae:	5f 93       	push	r21
    55b0:	6f 93       	push	r22
    55b2:	7f 93       	push	r23
    55b4:	8f 93       	push	r24
    55b6:	9f 93       	push	r25
    55b8:	af 93       	push	r26
    55ba:	bf 93       	push	r27
    55bc:	ef 93       	push	r30
    55be:	ff 93       	push	r31
    55c0:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <InterruptFuncTable+0x8e>
    55c4:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <InterruptFuncTable+0x8f>
    55c8:	30 97       	sbiw	r30, 0x00	; 0
    55ca:	29 f0       	breq	.+10     	; 0x55d6 <__vector_71+0x3c>
    55cc:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <InterruptSenderTable+0x8e>
    55d0:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <InterruptSenderTable+0x8f>
    55d4:	19 95       	eicall
    55d6:	ff 91       	pop	r31
    55d8:	ef 91       	pop	r30
    55da:	bf 91       	pop	r27
    55dc:	af 91       	pop	r26
    55de:	9f 91       	pop	r25
    55e0:	8f 91       	pop	r24
    55e2:	7f 91       	pop	r23
    55e4:	6f 91       	pop	r22
    55e6:	5f 91       	pop	r21
    55e8:	4f 91       	pop	r20
    55ea:	3f 91       	pop	r19
    55ec:	2f 91       	pop	r18
    55ee:	0f 90       	pop	r0
    55f0:	0b be       	out	0x3b, r0	; 59
    55f2:	0f 90       	pop	r0
    55f4:	0f be       	out	0x3f, r0	; 63
    55f6:	0f 90       	pop	r0
    55f8:	1f 90       	pop	r1
    55fa:	18 95       	reti

000055fc <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    55fc:	1f 92       	push	r1
    55fe:	0f 92       	push	r0
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	0f 92       	push	r0
    5604:	11 24       	eor	r1, r1
    5606:	0b b6       	in	r0, 0x3b	; 59
    5608:	0f 92       	push	r0
    560a:	2f 93       	push	r18
    560c:	3f 93       	push	r19
    560e:	4f 93       	push	r20
    5610:	5f 93       	push	r21
    5612:	6f 93       	push	r22
    5614:	7f 93       	push	r23
    5616:	8f 93       	push	r24
    5618:	9f 93       	push	r25
    561a:	af 93       	push	r26
    561c:	bf 93       	push	r27
    561e:	ef 93       	push	r30
    5620:	ff 93       	push	r31
    5622:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <InterruptFuncTable+0x90>
    5626:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <InterruptFuncTable+0x91>
    562a:	30 97       	sbiw	r30, 0x00	; 0
    562c:	29 f0       	breq	.+10     	; 0x5638 <__vector_72+0x3c>
    562e:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <InterruptSenderTable+0x90>
    5632:	90 91 4d 24 	lds	r25, 0x244D	; 0x80244d <InterruptSenderTable+0x91>
    5636:	19 95       	eicall
    5638:	ff 91       	pop	r31
    563a:	ef 91       	pop	r30
    563c:	bf 91       	pop	r27
    563e:	af 91       	pop	r26
    5640:	9f 91       	pop	r25
    5642:	8f 91       	pop	r24
    5644:	7f 91       	pop	r23
    5646:	6f 91       	pop	r22
    5648:	5f 91       	pop	r21
    564a:	4f 91       	pop	r20
    564c:	3f 91       	pop	r19
    564e:	2f 91       	pop	r18
    5650:	0f 90       	pop	r0
    5652:	0b be       	out	0x3b, r0	; 59
    5654:	0f 90       	pop	r0
    5656:	0f be       	out	0x3f, r0	; 63
    5658:	0f 90       	pop	r0
    565a:	1f 90       	pop	r1
    565c:	18 95       	reti

0000565e <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    565e:	1f 92       	push	r1
    5660:	0f 92       	push	r0
    5662:	0f b6       	in	r0, 0x3f	; 63
    5664:	0f 92       	push	r0
    5666:	11 24       	eor	r1, r1
    5668:	0b b6       	in	r0, 0x3b	; 59
    566a:	0f 92       	push	r0
    566c:	2f 93       	push	r18
    566e:	3f 93       	push	r19
    5670:	4f 93       	push	r20
    5672:	5f 93       	push	r21
    5674:	6f 93       	push	r22
    5676:	7f 93       	push	r23
    5678:	8f 93       	push	r24
    567a:	9f 93       	push	r25
    567c:	af 93       	push	r26
    567e:	bf 93       	push	r27
    5680:	ef 93       	push	r30
    5682:	ff 93       	push	r31
    5684:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <InterruptFuncTable+0x92>
    5688:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <InterruptFuncTable+0x93>
    568c:	30 97       	sbiw	r30, 0x00	; 0
    568e:	29 f0       	breq	.+10     	; 0x569a <__vector_73+0x3c>
    5690:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <InterruptSenderTable+0x92>
    5694:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <InterruptSenderTable+0x93>
    5698:	19 95       	eicall
    569a:	ff 91       	pop	r31
    569c:	ef 91       	pop	r30
    569e:	bf 91       	pop	r27
    56a0:	af 91       	pop	r26
    56a2:	9f 91       	pop	r25
    56a4:	8f 91       	pop	r24
    56a6:	7f 91       	pop	r23
    56a8:	6f 91       	pop	r22
    56aa:	5f 91       	pop	r21
    56ac:	4f 91       	pop	r20
    56ae:	3f 91       	pop	r19
    56b0:	2f 91       	pop	r18
    56b2:	0f 90       	pop	r0
    56b4:	0b be       	out	0x3b, r0	; 59
    56b6:	0f 90       	pop	r0
    56b8:	0f be       	out	0x3f, r0	; 63
    56ba:	0f 90       	pop	r0
    56bc:	1f 90       	pop	r1
    56be:	18 95       	reti

000056c0 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    56c0:	1f 92       	push	r1
    56c2:	0f 92       	push	r0
    56c4:	0f b6       	in	r0, 0x3f	; 63
    56c6:	0f 92       	push	r0
    56c8:	11 24       	eor	r1, r1
    56ca:	0b b6       	in	r0, 0x3b	; 59
    56cc:	0f 92       	push	r0
    56ce:	2f 93       	push	r18
    56d0:	3f 93       	push	r19
    56d2:	4f 93       	push	r20
    56d4:	5f 93       	push	r21
    56d6:	6f 93       	push	r22
    56d8:	7f 93       	push	r23
    56da:	8f 93       	push	r24
    56dc:	9f 93       	push	r25
    56de:	af 93       	push	r26
    56e0:	bf 93       	push	r27
    56e2:	ef 93       	push	r30
    56e4:	ff 93       	push	r31
    56e6:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <InterruptFuncTable+0x94>
    56ea:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <InterruptFuncTable+0x95>
    56ee:	30 97       	sbiw	r30, 0x00	; 0
    56f0:	29 f0       	breq	.+10     	; 0x56fc <__vector_74+0x3c>
    56f2:	80 91 50 24 	lds	r24, 0x2450	; 0x802450 <InterruptSenderTable+0x94>
    56f6:	90 91 51 24 	lds	r25, 0x2451	; 0x802451 <InterruptSenderTable+0x95>
    56fa:	19 95       	eicall
    56fc:	ff 91       	pop	r31
    56fe:	ef 91       	pop	r30
    5700:	bf 91       	pop	r27
    5702:	af 91       	pop	r26
    5704:	9f 91       	pop	r25
    5706:	8f 91       	pop	r24
    5708:	7f 91       	pop	r23
    570a:	6f 91       	pop	r22
    570c:	5f 91       	pop	r21
    570e:	4f 91       	pop	r20
    5710:	3f 91       	pop	r19
    5712:	2f 91       	pop	r18
    5714:	0f 90       	pop	r0
    5716:	0b be       	out	0x3b, r0	; 59
    5718:	0f 90       	pop	r0
    571a:	0f be       	out	0x3f, r0	; 63
    571c:	0f 90       	pop	r0
    571e:	1f 90       	pop	r1
    5720:	18 95       	reti

00005722 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    5722:	1f 92       	push	r1
    5724:	0f 92       	push	r0
    5726:	0f b6       	in	r0, 0x3f	; 63
    5728:	0f 92       	push	r0
    572a:	11 24       	eor	r1, r1
    572c:	0b b6       	in	r0, 0x3b	; 59
    572e:	0f 92       	push	r0
    5730:	2f 93       	push	r18
    5732:	3f 93       	push	r19
    5734:	4f 93       	push	r20
    5736:	5f 93       	push	r21
    5738:	6f 93       	push	r22
    573a:	7f 93       	push	r23
    573c:	8f 93       	push	r24
    573e:	9f 93       	push	r25
    5740:	af 93       	push	r26
    5742:	bf 93       	push	r27
    5744:	ef 93       	push	r30
    5746:	ff 93       	push	r31
    5748:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <InterruptFuncTable+0x9a>
    574c:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <InterruptFuncTable+0x9b>
    5750:	30 97       	sbiw	r30, 0x00	; 0
    5752:	29 f0       	breq	.+10     	; 0x575e <__vector_77+0x3c>
    5754:	80 91 56 24 	lds	r24, 0x2456	; 0x802456 <InterruptSenderTable+0x9a>
    5758:	90 91 57 24 	lds	r25, 0x2457	; 0x802457 <InterruptSenderTable+0x9b>
    575c:	19 95       	eicall
    575e:	ff 91       	pop	r31
    5760:	ef 91       	pop	r30
    5762:	bf 91       	pop	r27
    5764:	af 91       	pop	r26
    5766:	9f 91       	pop	r25
    5768:	8f 91       	pop	r24
    576a:	7f 91       	pop	r23
    576c:	6f 91       	pop	r22
    576e:	5f 91       	pop	r21
    5770:	4f 91       	pop	r20
    5772:	3f 91       	pop	r19
    5774:	2f 91       	pop	r18
    5776:	0f 90       	pop	r0
    5778:	0b be       	out	0x3b, r0	; 59
    577a:	0f 90       	pop	r0
    577c:	0f be       	out	0x3f, r0	; 63
    577e:	0f 90       	pop	r0
    5780:	1f 90       	pop	r1
    5782:	18 95       	reti

00005784 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    5784:	1f 92       	push	r1
    5786:	0f 92       	push	r0
    5788:	0f b6       	in	r0, 0x3f	; 63
    578a:	0f 92       	push	r0
    578c:	11 24       	eor	r1, r1
    578e:	0b b6       	in	r0, 0x3b	; 59
    5790:	0f 92       	push	r0
    5792:	2f 93       	push	r18
    5794:	3f 93       	push	r19
    5796:	4f 93       	push	r20
    5798:	5f 93       	push	r21
    579a:	6f 93       	push	r22
    579c:	7f 93       	push	r23
    579e:	8f 93       	push	r24
    57a0:	9f 93       	push	r25
    57a2:	af 93       	push	r26
    57a4:	bf 93       	push	r27
    57a6:	ef 93       	push	r30
    57a8:	ff 93       	push	r31
    57aa:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <InterruptFuncTable+0x9c>
    57ae:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <InterruptFuncTable+0x9d>
    57b2:	30 97       	sbiw	r30, 0x00	; 0
    57b4:	29 f0       	breq	.+10     	; 0x57c0 <__vector_78+0x3c>
    57b6:	80 91 58 24 	lds	r24, 0x2458	; 0x802458 <InterruptSenderTable+0x9c>
    57ba:	90 91 59 24 	lds	r25, 0x2459	; 0x802459 <InterruptSenderTable+0x9d>
    57be:	19 95       	eicall
    57c0:	ff 91       	pop	r31
    57c2:	ef 91       	pop	r30
    57c4:	bf 91       	pop	r27
    57c6:	af 91       	pop	r26
    57c8:	9f 91       	pop	r25
    57ca:	8f 91       	pop	r24
    57cc:	7f 91       	pop	r23
    57ce:	6f 91       	pop	r22
    57d0:	5f 91       	pop	r21
    57d2:	4f 91       	pop	r20
    57d4:	3f 91       	pop	r19
    57d6:	2f 91       	pop	r18
    57d8:	0f 90       	pop	r0
    57da:	0b be       	out	0x3b, r0	; 59
    57dc:	0f 90       	pop	r0
    57de:	0f be       	out	0x3f, r0	; 63
    57e0:	0f 90       	pop	r0
    57e2:	1f 90       	pop	r1
    57e4:	18 95       	reti

000057e6 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    57e6:	1f 92       	push	r1
    57e8:	0f 92       	push	r0
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	0f 92       	push	r0
    57ee:	11 24       	eor	r1, r1
    57f0:	0b b6       	in	r0, 0x3b	; 59
    57f2:	0f 92       	push	r0
    57f4:	2f 93       	push	r18
    57f6:	3f 93       	push	r19
    57f8:	4f 93       	push	r20
    57fa:	5f 93       	push	r21
    57fc:	6f 93       	push	r22
    57fe:	7f 93       	push	r23
    5800:	8f 93       	push	r24
    5802:	9f 93       	push	r25
    5804:	af 93       	push	r26
    5806:	bf 93       	push	r27
    5808:	ef 93       	push	r30
    580a:	ff 93       	push	r31
    580c:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <InterruptFuncTable+0x9e>
    5810:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <InterruptFuncTable+0x9f>
    5814:	30 97       	sbiw	r30, 0x00	; 0
    5816:	29 f0       	breq	.+10     	; 0x5822 <__vector_79+0x3c>
    5818:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <InterruptSenderTable+0x9e>
    581c:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <InterruptSenderTable+0x9f>
    5820:	19 95       	eicall
    5822:	ff 91       	pop	r31
    5824:	ef 91       	pop	r30
    5826:	bf 91       	pop	r27
    5828:	af 91       	pop	r26
    582a:	9f 91       	pop	r25
    582c:	8f 91       	pop	r24
    582e:	7f 91       	pop	r23
    5830:	6f 91       	pop	r22
    5832:	5f 91       	pop	r21
    5834:	4f 91       	pop	r20
    5836:	3f 91       	pop	r19
    5838:	2f 91       	pop	r18
    583a:	0f 90       	pop	r0
    583c:	0b be       	out	0x3b, r0	; 59
    583e:	0f 90       	pop	r0
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	0f 90       	pop	r0
    5844:	1f 90       	pop	r1
    5846:	18 95       	reti

00005848 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    5848:	1f 92       	push	r1
    584a:	0f 92       	push	r0
    584c:	0f b6       	in	r0, 0x3f	; 63
    584e:	0f 92       	push	r0
    5850:	11 24       	eor	r1, r1
    5852:	0b b6       	in	r0, 0x3b	; 59
    5854:	0f 92       	push	r0
    5856:	2f 93       	push	r18
    5858:	3f 93       	push	r19
    585a:	4f 93       	push	r20
    585c:	5f 93       	push	r21
    585e:	6f 93       	push	r22
    5860:	7f 93       	push	r23
    5862:	8f 93       	push	r24
    5864:	9f 93       	push	r25
    5866:	af 93       	push	r26
    5868:	bf 93       	push	r27
    586a:	ef 93       	push	r30
    586c:	ff 93       	push	r31
    586e:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <InterruptFuncTable+0xa0>
    5872:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <InterruptFuncTable+0xa1>
    5876:	30 97       	sbiw	r30, 0x00	; 0
    5878:	29 f0       	breq	.+10     	; 0x5884 <__vector_80+0x3c>
    587a:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <InterruptSenderTable+0xa0>
    587e:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <InterruptSenderTable+0xa1>
    5882:	19 95       	eicall
    5884:	ff 91       	pop	r31
    5886:	ef 91       	pop	r30
    5888:	bf 91       	pop	r27
    588a:	af 91       	pop	r26
    588c:	9f 91       	pop	r25
    588e:	8f 91       	pop	r24
    5890:	7f 91       	pop	r23
    5892:	6f 91       	pop	r22
    5894:	5f 91       	pop	r21
    5896:	4f 91       	pop	r20
    5898:	3f 91       	pop	r19
    589a:	2f 91       	pop	r18
    589c:	0f 90       	pop	r0
    589e:	0b be       	out	0x3b, r0	; 59
    58a0:	0f 90       	pop	r0
    58a2:	0f be       	out	0x3f, r0	; 63
    58a4:	0f 90       	pop	r0
    58a6:	1f 90       	pop	r1
    58a8:	18 95       	reti

000058aa <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    58aa:	1f 92       	push	r1
    58ac:	0f 92       	push	r0
    58ae:	0f b6       	in	r0, 0x3f	; 63
    58b0:	0f 92       	push	r0
    58b2:	11 24       	eor	r1, r1
    58b4:	0b b6       	in	r0, 0x3b	; 59
    58b6:	0f 92       	push	r0
    58b8:	2f 93       	push	r18
    58ba:	3f 93       	push	r19
    58bc:	4f 93       	push	r20
    58be:	5f 93       	push	r21
    58c0:	6f 93       	push	r22
    58c2:	7f 93       	push	r23
    58c4:	8f 93       	push	r24
    58c6:	9f 93       	push	r25
    58c8:	af 93       	push	r26
    58ca:	bf 93       	push	r27
    58cc:	ef 93       	push	r30
    58ce:	ff 93       	push	r31
    58d0:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <InterruptFuncTable+0xa2>
    58d4:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <InterruptFuncTable+0xa3>
    58d8:	30 97       	sbiw	r30, 0x00	; 0
    58da:	29 f0       	breq	.+10     	; 0x58e6 <__vector_81+0x3c>
    58dc:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <InterruptSenderTable+0xa2>
    58e0:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <InterruptSenderTable+0xa3>
    58e4:	19 95       	eicall
    58e6:	ff 91       	pop	r31
    58e8:	ef 91       	pop	r30
    58ea:	bf 91       	pop	r27
    58ec:	af 91       	pop	r26
    58ee:	9f 91       	pop	r25
    58f0:	8f 91       	pop	r24
    58f2:	7f 91       	pop	r23
    58f4:	6f 91       	pop	r22
    58f6:	5f 91       	pop	r21
    58f8:	4f 91       	pop	r20
    58fa:	3f 91       	pop	r19
    58fc:	2f 91       	pop	r18
    58fe:	0f 90       	pop	r0
    5900:	0b be       	out	0x3b, r0	; 59
    5902:	0f 90       	pop	r0
    5904:	0f be       	out	0x3f, r0	; 63
    5906:	0f 90       	pop	r0
    5908:	1f 90       	pop	r1
    590a:	18 95       	reti

0000590c <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    590c:	1f 92       	push	r1
    590e:	0f 92       	push	r0
    5910:	0f b6       	in	r0, 0x3f	; 63
    5912:	0f 92       	push	r0
    5914:	11 24       	eor	r1, r1
    5916:	0b b6       	in	r0, 0x3b	; 59
    5918:	0f 92       	push	r0
    591a:	2f 93       	push	r18
    591c:	3f 93       	push	r19
    591e:	4f 93       	push	r20
    5920:	5f 93       	push	r21
    5922:	6f 93       	push	r22
    5924:	7f 93       	push	r23
    5926:	8f 93       	push	r24
    5928:	9f 93       	push	r25
    592a:	af 93       	push	r26
    592c:	bf 93       	push	r27
    592e:	ef 93       	push	r30
    5930:	ff 93       	push	r31
    5932:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <InterruptFuncTable+0xa4>
    5936:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <InterruptFuncTable+0xa5>
    593a:	30 97       	sbiw	r30, 0x00	; 0
    593c:	29 f0       	breq	.+10     	; 0x5948 <__vector_82+0x3c>
    593e:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <InterruptSenderTable+0xa4>
    5942:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <InterruptSenderTable+0xa5>
    5946:	19 95       	eicall
    5948:	ff 91       	pop	r31
    594a:	ef 91       	pop	r30
    594c:	bf 91       	pop	r27
    594e:	af 91       	pop	r26
    5950:	9f 91       	pop	r25
    5952:	8f 91       	pop	r24
    5954:	7f 91       	pop	r23
    5956:	6f 91       	pop	r22
    5958:	5f 91       	pop	r21
    595a:	4f 91       	pop	r20
    595c:	3f 91       	pop	r19
    595e:	2f 91       	pop	r18
    5960:	0f 90       	pop	r0
    5962:	0b be       	out	0x3b, r0	; 59
    5964:	0f 90       	pop	r0
    5966:	0f be       	out	0x3f, r0	; 63
    5968:	0f 90       	pop	r0
    596a:	1f 90       	pop	r1
    596c:	18 95       	reti

0000596e <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    596e:	1f 92       	push	r1
    5970:	0f 92       	push	r0
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	0f 92       	push	r0
    5976:	11 24       	eor	r1, r1
    5978:	0b b6       	in	r0, 0x3b	; 59
    597a:	0f 92       	push	r0
    597c:	2f 93       	push	r18
    597e:	3f 93       	push	r19
    5980:	4f 93       	push	r20
    5982:	5f 93       	push	r21
    5984:	6f 93       	push	r22
    5986:	7f 93       	push	r23
    5988:	8f 93       	push	r24
    598a:	9f 93       	push	r25
    598c:	af 93       	push	r26
    598e:	bf 93       	push	r27
    5990:	ef 93       	push	r30
    5992:	ff 93       	push	r31
    5994:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <InterruptFuncTable+0xa6>
    5998:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <InterruptFuncTable+0xa7>
    599c:	30 97       	sbiw	r30, 0x00	; 0
    599e:	29 f0       	breq	.+10     	; 0x59aa <__vector_83+0x3c>
    59a0:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <InterruptSenderTable+0xa6>
    59a4:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <InterruptSenderTable+0xa7>
    59a8:	19 95       	eicall
    59aa:	ff 91       	pop	r31
    59ac:	ef 91       	pop	r30
    59ae:	bf 91       	pop	r27
    59b0:	af 91       	pop	r26
    59b2:	9f 91       	pop	r25
    59b4:	8f 91       	pop	r24
    59b6:	7f 91       	pop	r23
    59b8:	6f 91       	pop	r22
    59ba:	5f 91       	pop	r21
    59bc:	4f 91       	pop	r20
    59be:	3f 91       	pop	r19
    59c0:	2f 91       	pop	r18
    59c2:	0f 90       	pop	r0
    59c4:	0b be       	out	0x3b, r0	; 59
    59c6:	0f 90       	pop	r0
    59c8:	0f be       	out	0x3f, r0	; 63
    59ca:	0f 90       	pop	r0
    59cc:	1f 90       	pop	r1
    59ce:	18 95       	reti

000059d0 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    59d0:	1f 92       	push	r1
    59d2:	0f 92       	push	r0
    59d4:	0f b6       	in	r0, 0x3f	; 63
    59d6:	0f 92       	push	r0
    59d8:	11 24       	eor	r1, r1
    59da:	0b b6       	in	r0, 0x3b	; 59
    59dc:	0f 92       	push	r0
    59de:	2f 93       	push	r18
    59e0:	3f 93       	push	r19
    59e2:	4f 93       	push	r20
    59e4:	5f 93       	push	r21
    59e6:	6f 93       	push	r22
    59e8:	7f 93       	push	r23
    59ea:	8f 93       	push	r24
    59ec:	9f 93       	push	r25
    59ee:	af 93       	push	r26
    59f0:	bf 93       	push	r27
    59f2:	ef 93       	push	r30
    59f4:	ff 93       	push	r31
    59f6:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <InterruptFuncTable+0xa8>
    59fa:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <InterruptFuncTable+0xa9>
    59fe:	30 97       	sbiw	r30, 0x00	; 0
    5a00:	29 f0       	breq	.+10     	; 0x5a0c <__vector_84+0x3c>
    5a02:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <InterruptSenderTable+0xa8>
    5a06:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <InterruptSenderTable+0xa9>
    5a0a:	19 95       	eicall
    5a0c:	ff 91       	pop	r31
    5a0e:	ef 91       	pop	r30
    5a10:	bf 91       	pop	r27
    5a12:	af 91       	pop	r26
    5a14:	9f 91       	pop	r25
    5a16:	8f 91       	pop	r24
    5a18:	7f 91       	pop	r23
    5a1a:	6f 91       	pop	r22
    5a1c:	5f 91       	pop	r21
    5a1e:	4f 91       	pop	r20
    5a20:	3f 91       	pop	r19
    5a22:	2f 91       	pop	r18
    5a24:	0f 90       	pop	r0
    5a26:	0b be       	out	0x3b, r0	; 59
    5a28:	0f 90       	pop	r0
    5a2a:	0f be       	out	0x3f, r0	; 63
    5a2c:	0f 90       	pop	r0
    5a2e:	1f 90       	pop	r1
    5a30:	18 95       	reti

00005a32 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    5a32:	1f 92       	push	r1
    5a34:	0f 92       	push	r0
    5a36:	0f b6       	in	r0, 0x3f	; 63
    5a38:	0f 92       	push	r0
    5a3a:	11 24       	eor	r1, r1
    5a3c:	0b b6       	in	r0, 0x3b	; 59
    5a3e:	0f 92       	push	r0
    5a40:	2f 93       	push	r18
    5a42:	3f 93       	push	r19
    5a44:	4f 93       	push	r20
    5a46:	5f 93       	push	r21
    5a48:	6f 93       	push	r22
    5a4a:	7f 93       	push	r23
    5a4c:	8f 93       	push	r24
    5a4e:	9f 93       	push	r25
    5a50:	af 93       	push	r26
    5a52:	bf 93       	push	r27
    5a54:	ef 93       	push	r30
    5a56:	ff 93       	push	r31
    5a58:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <InterruptFuncTable+0xaa>
    5a5c:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <InterruptFuncTable+0xab>
    5a60:	30 97       	sbiw	r30, 0x00	; 0
    5a62:	29 f0       	breq	.+10     	; 0x5a6e <__vector_85+0x3c>
    5a64:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <InterruptSenderTable+0xaa>
    5a68:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <InterruptSenderTable+0xab>
    5a6c:	19 95       	eicall
    5a6e:	ff 91       	pop	r31
    5a70:	ef 91       	pop	r30
    5a72:	bf 91       	pop	r27
    5a74:	af 91       	pop	r26
    5a76:	9f 91       	pop	r25
    5a78:	8f 91       	pop	r24
    5a7a:	7f 91       	pop	r23
    5a7c:	6f 91       	pop	r22
    5a7e:	5f 91       	pop	r21
    5a80:	4f 91       	pop	r20
    5a82:	3f 91       	pop	r19
    5a84:	2f 91       	pop	r18
    5a86:	0f 90       	pop	r0
    5a88:	0b be       	out	0x3b, r0	; 59
    5a8a:	0f 90       	pop	r0
    5a8c:	0f be       	out	0x3f, r0	; 63
    5a8e:	0f 90       	pop	r0
    5a90:	1f 90       	pop	r1
    5a92:	18 95       	reti

00005a94 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    5a94:	1f 92       	push	r1
    5a96:	0f 92       	push	r0
    5a98:	0f b6       	in	r0, 0x3f	; 63
    5a9a:	0f 92       	push	r0
    5a9c:	11 24       	eor	r1, r1
    5a9e:	0b b6       	in	r0, 0x3b	; 59
    5aa0:	0f 92       	push	r0
    5aa2:	2f 93       	push	r18
    5aa4:	3f 93       	push	r19
    5aa6:	4f 93       	push	r20
    5aa8:	5f 93       	push	r21
    5aaa:	6f 93       	push	r22
    5aac:	7f 93       	push	r23
    5aae:	8f 93       	push	r24
    5ab0:	9f 93       	push	r25
    5ab2:	af 93       	push	r26
    5ab4:	bf 93       	push	r27
    5ab6:	ef 93       	push	r30
    5ab8:	ff 93       	push	r31
    5aba:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <InterruptFuncTable+0xac>
    5abe:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <InterruptFuncTable+0xad>
    5ac2:	30 97       	sbiw	r30, 0x00	; 0
    5ac4:	29 f0       	breq	.+10     	; 0x5ad0 <__vector_86+0x3c>
    5ac6:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <InterruptSenderTable+0xac>
    5aca:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <InterruptSenderTable+0xad>
    5ace:	19 95       	eicall
    5ad0:	ff 91       	pop	r31
    5ad2:	ef 91       	pop	r30
    5ad4:	bf 91       	pop	r27
    5ad6:	af 91       	pop	r26
    5ad8:	9f 91       	pop	r25
    5ada:	8f 91       	pop	r24
    5adc:	7f 91       	pop	r23
    5ade:	6f 91       	pop	r22
    5ae0:	5f 91       	pop	r21
    5ae2:	4f 91       	pop	r20
    5ae4:	3f 91       	pop	r19
    5ae6:	2f 91       	pop	r18
    5ae8:	0f 90       	pop	r0
    5aea:	0b be       	out	0x3b, r0	; 59
    5aec:	0f 90       	pop	r0
    5aee:	0f be       	out	0x3f, r0	; 63
    5af0:	0f 90       	pop	r0
    5af2:	1f 90       	pop	r1
    5af4:	18 95       	reti

00005af6 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    5af6:	1f 92       	push	r1
    5af8:	0f 92       	push	r0
    5afa:	0f b6       	in	r0, 0x3f	; 63
    5afc:	0f 92       	push	r0
    5afe:	11 24       	eor	r1, r1
    5b00:	0b b6       	in	r0, 0x3b	; 59
    5b02:	0f 92       	push	r0
    5b04:	2f 93       	push	r18
    5b06:	3f 93       	push	r19
    5b08:	4f 93       	push	r20
    5b0a:	5f 93       	push	r21
    5b0c:	6f 93       	push	r22
    5b0e:	7f 93       	push	r23
    5b10:	8f 93       	push	r24
    5b12:	9f 93       	push	r25
    5b14:	af 93       	push	r26
    5b16:	bf 93       	push	r27
    5b18:	ef 93       	push	r30
    5b1a:	ff 93       	push	r31
    5b1c:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <InterruptFuncTable+0xae>
    5b20:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <InterruptFuncTable+0xaf>
    5b24:	30 97       	sbiw	r30, 0x00	; 0
    5b26:	29 f0       	breq	.+10     	; 0x5b32 <__vector_87+0x3c>
    5b28:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <InterruptSenderTable+0xae>
    5b2c:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <InterruptSenderTable+0xaf>
    5b30:	19 95       	eicall
    5b32:	ff 91       	pop	r31
    5b34:	ef 91       	pop	r30
    5b36:	bf 91       	pop	r27
    5b38:	af 91       	pop	r26
    5b3a:	9f 91       	pop	r25
    5b3c:	8f 91       	pop	r24
    5b3e:	7f 91       	pop	r23
    5b40:	6f 91       	pop	r22
    5b42:	5f 91       	pop	r21
    5b44:	4f 91       	pop	r20
    5b46:	3f 91       	pop	r19
    5b48:	2f 91       	pop	r18
    5b4a:	0f 90       	pop	r0
    5b4c:	0b be       	out	0x3b, r0	; 59
    5b4e:	0f 90       	pop	r0
    5b50:	0f be       	out	0x3f, r0	; 63
    5b52:	0f 90       	pop	r0
    5b54:	1f 90       	pop	r1
    5b56:	18 95       	reti

00005b58 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    5b58:	1f 92       	push	r1
    5b5a:	0f 92       	push	r0
    5b5c:	0f b6       	in	r0, 0x3f	; 63
    5b5e:	0f 92       	push	r0
    5b60:	11 24       	eor	r1, r1
    5b62:	0b b6       	in	r0, 0x3b	; 59
    5b64:	0f 92       	push	r0
    5b66:	2f 93       	push	r18
    5b68:	3f 93       	push	r19
    5b6a:	4f 93       	push	r20
    5b6c:	5f 93       	push	r21
    5b6e:	6f 93       	push	r22
    5b70:	7f 93       	push	r23
    5b72:	8f 93       	push	r24
    5b74:	9f 93       	push	r25
    5b76:	af 93       	push	r26
    5b78:	bf 93       	push	r27
    5b7a:	ef 93       	push	r30
    5b7c:	ff 93       	push	r31
    5b7e:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <InterruptFuncTable+0xb0>
    5b82:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <InterruptFuncTable+0xb1>
    5b86:	30 97       	sbiw	r30, 0x00	; 0
    5b88:	29 f0       	breq	.+10     	; 0x5b94 <__vector_88+0x3c>
    5b8a:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <InterruptSenderTable+0xb0>
    5b8e:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <InterruptSenderTable+0xb1>
    5b92:	19 95       	eicall
    5b94:	ff 91       	pop	r31
    5b96:	ef 91       	pop	r30
    5b98:	bf 91       	pop	r27
    5b9a:	af 91       	pop	r26
    5b9c:	9f 91       	pop	r25
    5b9e:	8f 91       	pop	r24
    5ba0:	7f 91       	pop	r23
    5ba2:	6f 91       	pop	r22
    5ba4:	5f 91       	pop	r21
    5ba6:	4f 91       	pop	r20
    5ba8:	3f 91       	pop	r19
    5baa:	2f 91       	pop	r18
    5bac:	0f 90       	pop	r0
    5bae:	0b be       	out	0x3b, r0	; 59
    5bb0:	0f 90       	pop	r0
    5bb2:	0f be       	out	0x3f, r0	; 63
    5bb4:	0f 90       	pop	r0
    5bb6:	1f 90       	pop	r1
    5bb8:	18 95       	reti

00005bba <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    5bba:	1f 92       	push	r1
    5bbc:	0f 92       	push	r0
    5bbe:	0f b6       	in	r0, 0x3f	; 63
    5bc0:	0f 92       	push	r0
    5bc2:	11 24       	eor	r1, r1
    5bc4:	0b b6       	in	r0, 0x3b	; 59
    5bc6:	0f 92       	push	r0
    5bc8:	2f 93       	push	r18
    5bca:	3f 93       	push	r19
    5bcc:	4f 93       	push	r20
    5bce:	5f 93       	push	r21
    5bd0:	6f 93       	push	r22
    5bd2:	7f 93       	push	r23
    5bd4:	8f 93       	push	r24
    5bd6:	9f 93       	push	r25
    5bd8:	af 93       	push	r26
    5bda:	bf 93       	push	r27
    5bdc:	ef 93       	push	r30
    5bde:	ff 93       	push	r31
    5be0:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <InterruptFuncTable+0xb2>
    5be4:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <InterruptFuncTable+0xb3>
    5be8:	30 97       	sbiw	r30, 0x00	; 0
    5bea:	29 f0       	breq	.+10     	; 0x5bf6 <__vector_89+0x3c>
    5bec:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <InterruptSenderTable+0xb2>
    5bf0:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <InterruptSenderTable+0xb3>
    5bf4:	19 95       	eicall
    5bf6:	ff 91       	pop	r31
    5bf8:	ef 91       	pop	r30
    5bfa:	bf 91       	pop	r27
    5bfc:	af 91       	pop	r26
    5bfe:	9f 91       	pop	r25
    5c00:	8f 91       	pop	r24
    5c02:	7f 91       	pop	r23
    5c04:	6f 91       	pop	r22
    5c06:	5f 91       	pop	r21
    5c08:	4f 91       	pop	r20
    5c0a:	3f 91       	pop	r19
    5c0c:	2f 91       	pop	r18
    5c0e:	0f 90       	pop	r0
    5c10:	0b be       	out	0x3b, r0	; 59
    5c12:	0f 90       	pop	r0
    5c14:	0f be       	out	0x3f, r0	; 63
    5c16:	0f 90       	pop	r0
    5c18:	1f 90       	pop	r1
    5c1a:	18 95       	reti

00005c1c <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    5c1c:	1f 92       	push	r1
    5c1e:	0f 92       	push	r0
    5c20:	0f b6       	in	r0, 0x3f	; 63
    5c22:	0f 92       	push	r0
    5c24:	11 24       	eor	r1, r1
    5c26:	0b b6       	in	r0, 0x3b	; 59
    5c28:	0f 92       	push	r0
    5c2a:	2f 93       	push	r18
    5c2c:	3f 93       	push	r19
    5c2e:	4f 93       	push	r20
    5c30:	5f 93       	push	r21
    5c32:	6f 93       	push	r22
    5c34:	7f 93       	push	r23
    5c36:	8f 93       	push	r24
    5c38:	9f 93       	push	r25
    5c3a:	af 93       	push	r26
    5c3c:	bf 93       	push	r27
    5c3e:	ef 93       	push	r30
    5c40:	ff 93       	push	r31
    5c42:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <InterruptFuncTable+0xb4>
    5c46:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <InterruptFuncTable+0xb5>
    5c4a:	30 97       	sbiw	r30, 0x00	; 0
    5c4c:	29 f0       	breq	.+10     	; 0x5c58 <__vector_90+0x3c>
    5c4e:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <InterruptSenderTable+0xb4>
    5c52:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <InterruptSenderTable+0xb5>
    5c56:	19 95       	eicall
    5c58:	ff 91       	pop	r31
    5c5a:	ef 91       	pop	r30
    5c5c:	bf 91       	pop	r27
    5c5e:	af 91       	pop	r26
    5c60:	9f 91       	pop	r25
    5c62:	8f 91       	pop	r24
    5c64:	7f 91       	pop	r23
    5c66:	6f 91       	pop	r22
    5c68:	5f 91       	pop	r21
    5c6a:	4f 91       	pop	r20
    5c6c:	3f 91       	pop	r19
    5c6e:	2f 91       	pop	r18
    5c70:	0f 90       	pop	r0
    5c72:	0b be       	out	0x3b, r0	; 59
    5c74:	0f 90       	pop	r0
    5c76:	0f be       	out	0x3f, r0	; 63
    5c78:	0f 90       	pop	r0
    5c7a:	1f 90       	pop	r1
    5c7c:	18 95       	reti

00005c7e <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    5c7e:	1f 92       	push	r1
    5c80:	0f 92       	push	r0
    5c82:	0f b6       	in	r0, 0x3f	; 63
    5c84:	0f 92       	push	r0
    5c86:	11 24       	eor	r1, r1
    5c88:	0b b6       	in	r0, 0x3b	; 59
    5c8a:	0f 92       	push	r0
    5c8c:	2f 93       	push	r18
    5c8e:	3f 93       	push	r19
    5c90:	4f 93       	push	r20
    5c92:	5f 93       	push	r21
    5c94:	6f 93       	push	r22
    5c96:	7f 93       	push	r23
    5c98:	8f 93       	push	r24
    5c9a:	9f 93       	push	r25
    5c9c:	af 93       	push	r26
    5c9e:	bf 93       	push	r27
    5ca0:	ef 93       	push	r30
    5ca2:	ff 93       	push	r31
    5ca4:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <InterruptFuncTable+0xb6>
    5ca8:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <InterruptFuncTable+0xb7>
    5cac:	30 97       	sbiw	r30, 0x00	; 0
    5cae:	29 f0       	breq	.+10     	; 0x5cba <__vector_91+0x3c>
    5cb0:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <InterruptSenderTable+0xb6>
    5cb4:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <InterruptSenderTable+0xb7>
    5cb8:	19 95       	eicall
    5cba:	ff 91       	pop	r31
    5cbc:	ef 91       	pop	r30
    5cbe:	bf 91       	pop	r27
    5cc0:	af 91       	pop	r26
    5cc2:	9f 91       	pop	r25
    5cc4:	8f 91       	pop	r24
    5cc6:	7f 91       	pop	r23
    5cc8:	6f 91       	pop	r22
    5cca:	5f 91       	pop	r21
    5ccc:	4f 91       	pop	r20
    5cce:	3f 91       	pop	r19
    5cd0:	2f 91       	pop	r18
    5cd2:	0f 90       	pop	r0
    5cd4:	0b be       	out	0x3b, r0	; 59
    5cd6:	0f 90       	pop	r0
    5cd8:	0f be       	out	0x3f, r0	; 63
    5cda:	0f 90       	pop	r0
    5cdc:	1f 90       	pop	r1
    5cde:	18 95       	reti

00005ce0 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    5ce0:	1f 92       	push	r1
    5ce2:	0f 92       	push	r0
    5ce4:	0f b6       	in	r0, 0x3f	; 63
    5ce6:	0f 92       	push	r0
    5ce8:	11 24       	eor	r1, r1
    5cea:	0b b6       	in	r0, 0x3b	; 59
    5cec:	0f 92       	push	r0
    5cee:	2f 93       	push	r18
    5cf0:	3f 93       	push	r19
    5cf2:	4f 93       	push	r20
    5cf4:	5f 93       	push	r21
    5cf6:	6f 93       	push	r22
    5cf8:	7f 93       	push	r23
    5cfa:	8f 93       	push	r24
    5cfc:	9f 93       	push	r25
    5cfe:	af 93       	push	r26
    5d00:	bf 93       	push	r27
    5d02:	ef 93       	push	r30
    5d04:	ff 93       	push	r31
    5d06:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <InterruptFuncTable+0xb8>
    5d0a:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <InterruptFuncTable+0xb9>
    5d0e:	30 97       	sbiw	r30, 0x00	; 0
    5d10:	29 f0       	breq	.+10     	; 0x5d1c <__vector_92+0x3c>
    5d12:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <InterruptSenderTable+0xb8>
    5d16:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <InterruptSenderTable+0xb9>
    5d1a:	19 95       	eicall
    5d1c:	ff 91       	pop	r31
    5d1e:	ef 91       	pop	r30
    5d20:	bf 91       	pop	r27
    5d22:	af 91       	pop	r26
    5d24:	9f 91       	pop	r25
    5d26:	8f 91       	pop	r24
    5d28:	7f 91       	pop	r23
    5d2a:	6f 91       	pop	r22
    5d2c:	5f 91       	pop	r21
    5d2e:	4f 91       	pop	r20
    5d30:	3f 91       	pop	r19
    5d32:	2f 91       	pop	r18
    5d34:	0f 90       	pop	r0
    5d36:	0b be       	out	0x3b, r0	; 59
    5d38:	0f 90       	pop	r0
    5d3a:	0f be       	out	0x3f, r0	; 63
    5d3c:	0f 90       	pop	r0
    5d3e:	1f 90       	pop	r1
    5d40:	18 95       	reti

00005d42 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    5d42:	1f 92       	push	r1
    5d44:	0f 92       	push	r0
    5d46:	0f b6       	in	r0, 0x3f	; 63
    5d48:	0f 92       	push	r0
    5d4a:	11 24       	eor	r1, r1
    5d4c:	0b b6       	in	r0, 0x3b	; 59
    5d4e:	0f 92       	push	r0
    5d50:	2f 93       	push	r18
    5d52:	3f 93       	push	r19
    5d54:	4f 93       	push	r20
    5d56:	5f 93       	push	r21
    5d58:	6f 93       	push	r22
    5d5a:	7f 93       	push	r23
    5d5c:	8f 93       	push	r24
    5d5e:	9f 93       	push	r25
    5d60:	af 93       	push	r26
    5d62:	bf 93       	push	r27
    5d64:	ef 93       	push	r30
    5d66:	ff 93       	push	r31
    5d68:	e0 91 80 23 	lds	r30, 0x2380	; 0x802380 <InterruptFuncTable+0xba>
    5d6c:	f0 91 81 23 	lds	r31, 0x2381	; 0x802381 <InterruptFuncTable+0xbb>
    5d70:	30 97       	sbiw	r30, 0x00	; 0
    5d72:	29 f0       	breq	.+10     	; 0x5d7e <__vector_93+0x3c>
    5d74:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <InterruptSenderTable+0xba>
    5d78:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <InterruptSenderTable+0xbb>
    5d7c:	19 95       	eicall
    5d7e:	ff 91       	pop	r31
    5d80:	ef 91       	pop	r30
    5d82:	bf 91       	pop	r27
    5d84:	af 91       	pop	r26
    5d86:	9f 91       	pop	r25
    5d88:	8f 91       	pop	r24
    5d8a:	7f 91       	pop	r23
    5d8c:	6f 91       	pop	r22
    5d8e:	5f 91       	pop	r21
    5d90:	4f 91       	pop	r20
    5d92:	3f 91       	pop	r19
    5d94:	2f 91       	pop	r18
    5d96:	0f 90       	pop	r0
    5d98:	0b be       	out	0x3b, r0	; 59
    5d9a:	0f 90       	pop	r0
    5d9c:	0f be       	out	0x3f, r0	; 63
    5d9e:	0f 90       	pop	r0
    5da0:	1f 90       	pop	r1
    5da2:	18 95       	reti

00005da4 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    5da4:	1f 92       	push	r1
    5da6:	0f 92       	push	r0
    5da8:	0f b6       	in	r0, 0x3f	; 63
    5daa:	0f 92       	push	r0
    5dac:	11 24       	eor	r1, r1
    5dae:	0b b6       	in	r0, 0x3b	; 59
    5db0:	0f 92       	push	r0
    5db2:	2f 93       	push	r18
    5db4:	3f 93       	push	r19
    5db6:	4f 93       	push	r20
    5db8:	5f 93       	push	r21
    5dba:	6f 93       	push	r22
    5dbc:	7f 93       	push	r23
    5dbe:	8f 93       	push	r24
    5dc0:	9f 93       	push	r25
    5dc2:	af 93       	push	r26
    5dc4:	bf 93       	push	r27
    5dc6:	ef 93       	push	r30
    5dc8:	ff 93       	push	r31
    5dca:	e0 91 96 23 	lds	r30, 0x2396	; 0x802396 <InterruptFuncTable+0xd0>
    5dce:	f0 91 97 23 	lds	r31, 0x2397	; 0x802397 <InterruptFuncTable+0xd1>
    5dd2:	30 97       	sbiw	r30, 0x00	; 0
    5dd4:	29 f0       	breq	.+10     	; 0x5de0 <__vector_104+0x3c>
    5dd6:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <InterruptSenderTable+0xd0>
    5dda:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <InterruptSenderTable+0xd1>
    5dde:	19 95       	eicall
    5de0:	ff 91       	pop	r31
    5de2:	ef 91       	pop	r30
    5de4:	bf 91       	pop	r27
    5de6:	af 91       	pop	r26
    5de8:	9f 91       	pop	r25
    5dea:	8f 91       	pop	r24
    5dec:	7f 91       	pop	r23
    5dee:	6f 91       	pop	r22
    5df0:	5f 91       	pop	r21
    5df2:	4f 91       	pop	r20
    5df4:	3f 91       	pop	r19
    5df6:	2f 91       	pop	r18
    5df8:	0f 90       	pop	r0
    5dfa:	0b be       	out	0x3b, r0	; 59
    5dfc:	0f 90       	pop	r0
    5dfe:	0f be       	out	0x3f, r0	; 63
    5e00:	0f 90       	pop	r0
    5e02:	1f 90       	pop	r1
    5e04:	18 95       	reti

00005e06 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    5e06:	1f 92       	push	r1
    5e08:	0f 92       	push	r0
    5e0a:	0f b6       	in	r0, 0x3f	; 63
    5e0c:	0f 92       	push	r0
    5e0e:	11 24       	eor	r1, r1
    5e10:	0b b6       	in	r0, 0x3b	; 59
    5e12:	0f 92       	push	r0
    5e14:	2f 93       	push	r18
    5e16:	3f 93       	push	r19
    5e18:	4f 93       	push	r20
    5e1a:	5f 93       	push	r21
    5e1c:	6f 93       	push	r22
    5e1e:	7f 93       	push	r23
    5e20:	8f 93       	push	r24
    5e22:	9f 93       	push	r25
    5e24:	af 93       	push	r26
    5e26:	bf 93       	push	r27
    5e28:	ef 93       	push	r30
    5e2a:	ff 93       	push	r31
    5e2c:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <InterruptFuncTable+0xd2>
    5e30:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <InterruptFuncTable+0xd3>
    5e34:	30 97       	sbiw	r30, 0x00	; 0
    5e36:	29 f0       	breq	.+10     	; 0x5e42 <__vector_105+0x3c>
    5e38:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <InterruptSenderTable+0xd2>
    5e3c:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <InterruptSenderTable+0xd3>
    5e40:	19 95       	eicall
    5e42:	ff 91       	pop	r31
    5e44:	ef 91       	pop	r30
    5e46:	bf 91       	pop	r27
    5e48:	af 91       	pop	r26
    5e4a:	9f 91       	pop	r25
    5e4c:	8f 91       	pop	r24
    5e4e:	7f 91       	pop	r23
    5e50:	6f 91       	pop	r22
    5e52:	5f 91       	pop	r21
    5e54:	4f 91       	pop	r20
    5e56:	3f 91       	pop	r19
    5e58:	2f 91       	pop	r18
    5e5a:	0f 90       	pop	r0
    5e5c:	0b be       	out	0x3b, r0	; 59
    5e5e:	0f 90       	pop	r0
    5e60:	0f be       	out	0x3f, r0	; 63
    5e62:	0f 90       	pop	r0
    5e64:	1f 90       	pop	r1
    5e66:	18 95       	reti

00005e68 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    5e68:	1f 92       	push	r1
    5e6a:	0f 92       	push	r0
    5e6c:	0f b6       	in	r0, 0x3f	; 63
    5e6e:	0f 92       	push	r0
    5e70:	11 24       	eor	r1, r1
    5e72:	0b b6       	in	r0, 0x3b	; 59
    5e74:	0f 92       	push	r0
    5e76:	2f 93       	push	r18
    5e78:	3f 93       	push	r19
    5e7a:	4f 93       	push	r20
    5e7c:	5f 93       	push	r21
    5e7e:	6f 93       	push	r22
    5e80:	7f 93       	push	r23
    5e82:	8f 93       	push	r24
    5e84:	9f 93       	push	r25
    5e86:	af 93       	push	r26
    5e88:	bf 93       	push	r27
    5e8a:	ef 93       	push	r30
    5e8c:	ff 93       	push	r31
    5e8e:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <InterruptFuncTable+0xd8>
    5e92:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <InterruptFuncTable+0xd9>
    5e96:	30 97       	sbiw	r30, 0x00	; 0
    5e98:	29 f0       	breq	.+10     	; 0x5ea4 <__vector_108+0x3c>
    5e9a:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <InterruptSenderTable+0xd8>
    5e9e:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <InterruptSenderTable+0xd9>
    5ea2:	19 95       	eicall
    5ea4:	ff 91       	pop	r31
    5ea6:	ef 91       	pop	r30
    5ea8:	bf 91       	pop	r27
    5eaa:	af 91       	pop	r26
    5eac:	9f 91       	pop	r25
    5eae:	8f 91       	pop	r24
    5eb0:	7f 91       	pop	r23
    5eb2:	6f 91       	pop	r22
    5eb4:	5f 91       	pop	r21
    5eb6:	4f 91       	pop	r20
    5eb8:	3f 91       	pop	r19
    5eba:	2f 91       	pop	r18
    5ebc:	0f 90       	pop	r0
    5ebe:	0b be       	out	0x3b, r0	; 59
    5ec0:	0f 90       	pop	r0
    5ec2:	0f be       	out	0x3f, r0	; 63
    5ec4:	0f 90       	pop	r0
    5ec6:	1f 90       	pop	r1
    5ec8:	18 95       	reti

00005eca <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    5eca:	1f 92       	push	r1
    5ecc:	0f 92       	push	r0
    5ece:	0f b6       	in	r0, 0x3f	; 63
    5ed0:	0f 92       	push	r0
    5ed2:	11 24       	eor	r1, r1
    5ed4:	0b b6       	in	r0, 0x3b	; 59
    5ed6:	0f 92       	push	r0
    5ed8:	2f 93       	push	r18
    5eda:	3f 93       	push	r19
    5edc:	4f 93       	push	r20
    5ede:	5f 93       	push	r21
    5ee0:	6f 93       	push	r22
    5ee2:	7f 93       	push	r23
    5ee4:	8f 93       	push	r24
    5ee6:	9f 93       	push	r25
    5ee8:	af 93       	push	r26
    5eea:	bf 93       	push	r27
    5eec:	ef 93       	push	r30
    5eee:	ff 93       	push	r31
    5ef0:	e0 91 a0 23 	lds	r30, 0x23A0	; 0x8023a0 <InterruptFuncTable+0xda>
    5ef4:	f0 91 a1 23 	lds	r31, 0x23A1	; 0x8023a1 <InterruptFuncTable+0xdb>
    5ef8:	30 97       	sbiw	r30, 0x00	; 0
    5efa:	29 f0       	breq	.+10     	; 0x5f06 <__vector_109+0x3c>
    5efc:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <InterruptSenderTable+0xda>
    5f00:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <InterruptSenderTable+0xdb>
    5f04:	19 95       	eicall
    5f06:	ff 91       	pop	r31
    5f08:	ef 91       	pop	r30
    5f0a:	bf 91       	pop	r27
    5f0c:	af 91       	pop	r26
    5f0e:	9f 91       	pop	r25
    5f10:	8f 91       	pop	r24
    5f12:	7f 91       	pop	r23
    5f14:	6f 91       	pop	r22
    5f16:	5f 91       	pop	r21
    5f18:	4f 91       	pop	r20
    5f1a:	3f 91       	pop	r19
    5f1c:	2f 91       	pop	r18
    5f1e:	0f 90       	pop	r0
    5f20:	0b be       	out	0x3b, r0	; 59
    5f22:	0f 90       	pop	r0
    5f24:	0f be       	out	0x3f, r0	; 63
    5f26:	0f 90       	pop	r0
    5f28:	1f 90       	pop	r1
    5f2a:	18 95       	reti

00005f2c <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    5f2c:	1f 92       	push	r1
    5f2e:	0f 92       	push	r0
    5f30:	0f b6       	in	r0, 0x3f	; 63
    5f32:	0f 92       	push	r0
    5f34:	11 24       	eor	r1, r1
    5f36:	0b b6       	in	r0, 0x3b	; 59
    5f38:	0f 92       	push	r0
    5f3a:	2f 93       	push	r18
    5f3c:	3f 93       	push	r19
    5f3e:	4f 93       	push	r20
    5f40:	5f 93       	push	r21
    5f42:	6f 93       	push	r22
    5f44:	7f 93       	push	r23
    5f46:	8f 93       	push	r24
    5f48:	9f 93       	push	r25
    5f4a:	af 93       	push	r26
    5f4c:	bf 93       	push	r27
    5f4e:	ef 93       	push	r30
    5f50:	ff 93       	push	r31
    5f52:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <InterruptFuncTable+0xdc>
    5f56:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <InterruptFuncTable+0xdd>
    5f5a:	30 97       	sbiw	r30, 0x00	; 0
    5f5c:	29 f0       	breq	.+10     	; 0x5f68 <__vector_110+0x3c>
    5f5e:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <InterruptSenderTable+0xdc>
    5f62:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <InterruptSenderTable+0xdd>
    5f66:	19 95       	eicall
    5f68:	ff 91       	pop	r31
    5f6a:	ef 91       	pop	r30
    5f6c:	bf 91       	pop	r27
    5f6e:	af 91       	pop	r26
    5f70:	9f 91       	pop	r25
    5f72:	8f 91       	pop	r24
    5f74:	7f 91       	pop	r23
    5f76:	6f 91       	pop	r22
    5f78:	5f 91       	pop	r21
    5f7a:	4f 91       	pop	r20
    5f7c:	3f 91       	pop	r19
    5f7e:	2f 91       	pop	r18
    5f80:	0f 90       	pop	r0
    5f82:	0b be       	out	0x3b, r0	; 59
    5f84:	0f 90       	pop	r0
    5f86:	0f be       	out	0x3f, r0	; 63
    5f88:	0f 90       	pop	r0
    5f8a:	1f 90       	pop	r1
    5f8c:	18 95       	reti

00005f8e <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    5f8e:	1f 92       	push	r1
    5f90:	0f 92       	push	r0
    5f92:	0f b6       	in	r0, 0x3f	; 63
    5f94:	0f 92       	push	r0
    5f96:	11 24       	eor	r1, r1
    5f98:	0b b6       	in	r0, 0x3b	; 59
    5f9a:	0f 92       	push	r0
    5f9c:	2f 93       	push	r18
    5f9e:	3f 93       	push	r19
    5fa0:	4f 93       	push	r20
    5fa2:	5f 93       	push	r21
    5fa4:	6f 93       	push	r22
    5fa6:	7f 93       	push	r23
    5fa8:	8f 93       	push	r24
    5faa:	9f 93       	push	r25
    5fac:	af 93       	push	r26
    5fae:	bf 93       	push	r27
    5fb0:	ef 93       	push	r30
    5fb2:	ff 93       	push	r31
    5fb4:	e0 91 a4 23 	lds	r30, 0x23A4	; 0x8023a4 <InterruptFuncTable+0xde>
    5fb8:	f0 91 a5 23 	lds	r31, 0x23A5	; 0x8023a5 <InterruptFuncTable+0xdf>
    5fbc:	30 97       	sbiw	r30, 0x00	; 0
    5fbe:	29 f0       	breq	.+10     	; 0x5fca <__vector_111+0x3c>
    5fc0:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <InterruptSenderTable+0xde>
    5fc4:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <InterruptSenderTable+0xdf>
    5fc8:	19 95       	eicall
    5fca:	ff 91       	pop	r31
    5fcc:	ef 91       	pop	r30
    5fce:	bf 91       	pop	r27
    5fd0:	af 91       	pop	r26
    5fd2:	9f 91       	pop	r25
    5fd4:	8f 91       	pop	r24
    5fd6:	7f 91       	pop	r23
    5fd8:	6f 91       	pop	r22
    5fda:	5f 91       	pop	r21
    5fdc:	4f 91       	pop	r20
    5fde:	3f 91       	pop	r19
    5fe0:	2f 91       	pop	r18
    5fe2:	0f 90       	pop	r0
    5fe4:	0b be       	out	0x3b, r0	; 59
    5fe6:	0f 90       	pop	r0
    5fe8:	0f be       	out	0x3f, r0	; 63
    5fea:	0f 90       	pop	r0
    5fec:	1f 90       	pop	r1
    5fee:	18 95       	reti

00005ff0 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    5ff0:	1f 92       	push	r1
    5ff2:	0f 92       	push	r0
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	0f 92       	push	r0
    5ff8:	11 24       	eor	r1, r1
    5ffa:	0b b6       	in	r0, 0x3b	; 59
    5ffc:	0f 92       	push	r0
    5ffe:	2f 93       	push	r18
    6000:	3f 93       	push	r19
    6002:	4f 93       	push	r20
    6004:	5f 93       	push	r21
    6006:	6f 93       	push	r22
    6008:	7f 93       	push	r23
    600a:	8f 93       	push	r24
    600c:	9f 93       	push	r25
    600e:	af 93       	push	r26
    6010:	bf 93       	push	r27
    6012:	ef 93       	push	r30
    6014:	ff 93       	push	r31
    6016:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <InterruptFuncTable+0xe0>
    601a:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <InterruptFuncTable+0xe1>
    601e:	30 97       	sbiw	r30, 0x00	; 0
    6020:	29 f0       	breq	.+10     	; 0x602c <__vector_112+0x3c>
    6022:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <InterruptSenderTable+0xe0>
    6026:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <InterruptSenderTable+0xe1>
    602a:	19 95       	eicall
    602c:	ff 91       	pop	r31
    602e:	ef 91       	pop	r30
    6030:	bf 91       	pop	r27
    6032:	af 91       	pop	r26
    6034:	9f 91       	pop	r25
    6036:	8f 91       	pop	r24
    6038:	7f 91       	pop	r23
    603a:	6f 91       	pop	r22
    603c:	5f 91       	pop	r21
    603e:	4f 91       	pop	r20
    6040:	3f 91       	pop	r19
    6042:	2f 91       	pop	r18
    6044:	0f 90       	pop	r0
    6046:	0b be       	out	0x3b, r0	; 59
    6048:	0f 90       	pop	r0
    604a:	0f be       	out	0x3f, r0	; 63
    604c:	0f 90       	pop	r0
    604e:	1f 90       	pop	r1
    6050:	18 95       	reti

00006052 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    6052:	1f 92       	push	r1
    6054:	0f 92       	push	r0
    6056:	0f b6       	in	r0, 0x3f	; 63
    6058:	0f 92       	push	r0
    605a:	11 24       	eor	r1, r1
    605c:	0b b6       	in	r0, 0x3b	; 59
    605e:	0f 92       	push	r0
    6060:	2f 93       	push	r18
    6062:	3f 93       	push	r19
    6064:	4f 93       	push	r20
    6066:	5f 93       	push	r21
    6068:	6f 93       	push	r22
    606a:	7f 93       	push	r23
    606c:	8f 93       	push	r24
    606e:	9f 93       	push	r25
    6070:	af 93       	push	r26
    6072:	bf 93       	push	r27
    6074:	ef 93       	push	r30
    6076:	ff 93       	push	r31
    6078:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <InterruptFuncTable+0xe2>
    607c:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <InterruptFuncTable+0xe3>
    6080:	30 97       	sbiw	r30, 0x00	; 0
    6082:	29 f0       	breq	.+10     	; 0x608e <__vector_113+0x3c>
    6084:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <InterruptSenderTable+0xe2>
    6088:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <InterruptSenderTable+0xe3>
    608c:	19 95       	eicall
    608e:	ff 91       	pop	r31
    6090:	ef 91       	pop	r30
    6092:	bf 91       	pop	r27
    6094:	af 91       	pop	r26
    6096:	9f 91       	pop	r25
    6098:	8f 91       	pop	r24
    609a:	7f 91       	pop	r23
    609c:	6f 91       	pop	r22
    609e:	5f 91       	pop	r21
    60a0:	4f 91       	pop	r20
    60a2:	3f 91       	pop	r19
    60a4:	2f 91       	pop	r18
    60a6:	0f 90       	pop	r0
    60a8:	0b be       	out	0x3b, r0	; 59
    60aa:	0f 90       	pop	r0
    60ac:	0f be       	out	0x3f, r0	; 63
    60ae:	0f 90       	pop	r0
    60b0:	1f 90       	pop	r1
    60b2:	18 95       	reti

000060b4 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    60b4:	1f 92       	push	r1
    60b6:	0f 92       	push	r0
    60b8:	0f b6       	in	r0, 0x3f	; 63
    60ba:	0f 92       	push	r0
    60bc:	11 24       	eor	r1, r1
    60be:	0b b6       	in	r0, 0x3b	; 59
    60c0:	0f 92       	push	r0
    60c2:	2f 93       	push	r18
    60c4:	3f 93       	push	r19
    60c6:	4f 93       	push	r20
    60c8:	5f 93       	push	r21
    60ca:	6f 93       	push	r22
    60cc:	7f 93       	push	r23
    60ce:	8f 93       	push	r24
    60d0:	9f 93       	push	r25
    60d2:	af 93       	push	r26
    60d4:	bf 93       	push	r27
    60d6:	ef 93       	push	r30
    60d8:	ff 93       	push	r31
    60da:	e0 91 b4 23 	lds	r30, 0x23B4	; 0x8023b4 <InterruptFuncTable+0xee>
    60de:	f0 91 b5 23 	lds	r31, 0x23B5	; 0x8023b5 <InterruptFuncTable+0xef>
    60e2:	30 97       	sbiw	r30, 0x00	; 0
    60e4:	29 f0       	breq	.+10     	; 0x60f0 <__vector_119+0x3c>
    60e6:	80 91 aa 24 	lds	r24, 0x24AA	; 0x8024aa <InterruptSenderTable+0xee>
    60ea:	90 91 ab 24 	lds	r25, 0x24AB	; 0x8024ab <InterruptSenderTable+0xef>
    60ee:	19 95       	eicall
    60f0:	ff 91       	pop	r31
    60f2:	ef 91       	pop	r30
    60f4:	bf 91       	pop	r27
    60f6:	af 91       	pop	r26
    60f8:	9f 91       	pop	r25
    60fa:	8f 91       	pop	r24
    60fc:	7f 91       	pop	r23
    60fe:	6f 91       	pop	r22
    6100:	5f 91       	pop	r21
    6102:	4f 91       	pop	r20
    6104:	3f 91       	pop	r19
    6106:	2f 91       	pop	r18
    6108:	0f 90       	pop	r0
    610a:	0b be       	out	0x3b, r0	; 59
    610c:	0f 90       	pop	r0
    610e:	0f be       	out	0x3f, r0	; 63
    6110:	0f 90       	pop	r0
    6112:	1f 90       	pop	r1
    6114:	18 95       	reti

00006116 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    6116:	1f 92       	push	r1
    6118:	0f 92       	push	r0
    611a:	0f b6       	in	r0, 0x3f	; 63
    611c:	0f 92       	push	r0
    611e:	11 24       	eor	r1, r1
    6120:	0b b6       	in	r0, 0x3b	; 59
    6122:	0f 92       	push	r0
    6124:	2f 93       	push	r18
    6126:	3f 93       	push	r19
    6128:	4f 93       	push	r20
    612a:	5f 93       	push	r21
    612c:	6f 93       	push	r22
    612e:	7f 93       	push	r23
    6130:	8f 93       	push	r24
    6132:	9f 93       	push	r25
    6134:	af 93       	push	r26
    6136:	bf 93       	push	r27
    6138:	ef 93       	push	r30
    613a:	ff 93       	push	r31
    613c:	e0 91 b6 23 	lds	r30, 0x23B6	; 0x8023b6 <InterruptFuncTable+0xf0>
    6140:	f0 91 b7 23 	lds	r31, 0x23B7	; 0x8023b7 <InterruptFuncTable+0xf1>
    6144:	30 97       	sbiw	r30, 0x00	; 0
    6146:	29 f0       	breq	.+10     	; 0x6152 <__vector_120+0x3c>
    6148:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <InterruptSenderTable+0xf0>
    614c:	90 91 ad 24 	lds	r25, 0x24AD	; 0x8024ad <InterruptSenderTable+0xf1>
    6150:	19 95       	eicall
    6152:	ff 91       	pop	r31
    6154:	ef 91       	pop	r30
    6156:	bf 91       	pop	r27
    6158:	af 91       	pop	r26
    615a:	9f 91       	pop	r25
    615c:	8f 91       	pop	r24
    615e:	7f 91       	pop	r23
    6160:	6f 91       	pop	r22
    6162:	5f 91       	pop	r21
    6164:	4f 91       	pop	r20
    6166:	3f 91       	pop	r19
    6168:	2f 91       	pop	r18
    616a:	0f 90       	pop	r0
    616c:	0b be       	out	0x3b, r0	; 59
    616e:	0f 90       	pop	r0
    6170:	0f be       	out	0x3f, r0	; 63
    6172:	0f 90       	pop	r0
    6174:	1f 90       	pop	r1
    6176:	18 95       	reti

00006178 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    6178:	1f 92       	push	r1
    617a:	0f 92       	push	r0
    617c:	0f b6       	in	r0, 0x3f	; 63
    617e:	0f 92       	push	r0
    6180:	11 24       	eor	r1, r1
    6182:	0b b6       	in	r0, 0x3b	; 59
    6184:	0f 92       	push	r0
    6186:	2f 93       	push	r18
    6188:	3f 93       	push	r19
    618a:	4f 93       	push	r20
    618c:	5f 93       	push	r21
    618e:	6f 93       	push	r22
    6190:	7f 93       	push	r23
    6192:	8f 93       	push	r24
    6194:	9f 93       	push	r25
    6196:	af 93       	push	r26
    6198:	bf 93       	push	r27
    619a:	ef 93       	push	r30
    619c:	ff 93       	push	r31
    619e:	e0 91 b8 23 	lds	r30, 0x23B8	; 0x8023b8 <InterruptFuncTable+0xf2>
    61a2:	f0 91 b9 23 	lds	r31, 0x23B9	; 0x8023b9 <InterruptFuncTable+0xf3>
    61a6:	30 97       	sbiw	r30, 0x00	; 0
    61a8:	29 f0       	breq	.+10     	; 0x61b4 <__vector_121+0x3c>
    61aa:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <InterruptSenderTable+0xf2>
    61ae:	90 91 af 24 	lds	r25, 0x24AF	; 0x8024af <InterruptSenderTable+0xf3>
    61b2:	19 95       	eicall
    61b4:	ff 91       	pop	r31
    61b6:	ef 91       	pop	r30
    61b8:	bf 91       	pop	r27
    61ba:	af 91       	pop	r26
    61bc:	9f 91       	pop	r25
    61be:	8f 91       	pop	r24
    61c0:	7f 91       	pop	r23
    61c2:	6f 91       	pop	r22
    61c4:	5f 91       	pop	r21
    61c6:	4f 91       	pop	r20
    61c8:	3f 91       	pop	r19
    61ca:	2f 91       	pop	r18
    61cc:	0f 90       	pop	r0
    61ce:	0b be       	out	0x3b, r0	; 59
    61d0:	0f 90       	pop	r0
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	0f 90       	pop	r0
    61d6:	1f 90       	pop	r1
    61d8:	18 95       	reti

000061da <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    61da:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    61de:	fd cf       	rjmp	.-6      	; 0x61da <__cxa_pure_virtual>

000061e0 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    61e0:	85 e2       	ldi	r24, 0x25	; 37
    61e2:	96 e2       	ldi	r25, 0x26	; 38
    61e4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_ZN4CSPIC1Ev>
CTimerC timer;
    61e8:	82 e2       	ldi	r24, 0x22	; 34
    61ea:	96 e2       	ldi	r25, 0x26	; 38
    61ec:	0e 94 58 3b 	call	0x76b0	; 0x76b0 <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    61f0:	8f e1       	ldi	r24, 0x1F	; 31
    61f2:	96 e2       	ldi	r25, 0x26	; 38
    61f4:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    61f8:	8c e1       	ldi	r24, 0x1C	; 28
    61fa:	96 e2       	ldi	r25, 0x26	; 38
    61fc:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    6200:	89 e1       	ldi	r24, 0x19	; 25
    6202:	96 e2       	ldi	r25, 0x26	; 38
    6204:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    6208:	86 e1       	ldi	r24, 0x16	; 22
    620a:	96 e2       	ldi	r25, 0x26	; 38
    620c:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    6210:	84 e1       	ldi	r24, 0x14	; 20
    6212:	96 e2       	ldi	r25, 0x26	; 38
    6214:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    6218:	8c e0       	ldi	r24, 0x0C	; 12
    621a:	96 e2       	ldi	r25, 0x26	; 38
    621c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    6220:	8f ee       	ldi	r24, 0xEF	; 239
    6222:	95 e2       	ldi	r25, 0x25	; 37
    6224:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    6228:	85 ee       	ldi	r24, 0xE5	; 229
    622a:	95 e2       	ldi	r25, 0x25	; 37
    622c:	0e 94 10 39 	call	0x7220	; 0x7220 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    6230:	84 ee       	ldi	r24, 0xE4	; 228
    6232:	95 e2       	ldi	r25, 0x25	; 37
    6234:	0e 94 1f 3a 	call	0x743e	; 0x743e <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    6238:	8a eb       	ldi	r24, 0xBA	; 186
    623a:	94 e2       	ldi	r25, 0x24	; 36
    623c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    6240:	86 eb       	ldi	r24, 0xB6	; 182
    6242:	94 e2       	ldi	r25, 0x24	; 36
    6244:	0e 94 01 38 	call	0x7002	; 0x7002 <_ZN8CDS18B20C1Ev>
    6248:	08 95       	ret

0000624a <_GLOBAL__sub_D_dacSPI>:
    624a:	86 eb       	ldi	r24, 0xB6	; 182
    624c:	94 e2       	ldi	r25, 0x24	; 36
    624e:	0e 94 02 38 	call	0x7004	; 0x7004 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    6252:	8a eb       	ldi	r24, 0xBA	; 186
    6254:	94 e2       	ldi	r25, 0x24	; 36
    6256:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    625a:	84 ee       	ldi	r24, 0xE4	; 228
    625c:	95 e2       	ldi	r25, 0x25	; 37
    625e:	0e 94 20 3a 	call	0x7440	; 0x7440 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    6262:	85 ee       	ldi	r24, 0xE5	; 229
    6264:	95 e2       	ldi	r25, 0x25	; 37
    6266:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    626a:	8f ee       	ldi	r24, 0xEF	; 239
    626c:	95 e2       	ldi	r25, 0x25	; 37
    626e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    6272:	8c e0       	ldi	r24, 0x0C	; 12
    6274:	96 e2       	ldi	r25, 0x26	; 38
    6276:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    627a:	84 e1       	ldi	r24, 0x14	; 20
    627c:	96 e2       	ldi	r25, 0x26	; 38
    627e:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    6282:	86 e1       	ldi	r24, 0x16	; 22
    6284:	96 e2       	ldi	r25, 0x26	; 38
    6286:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    628a:	89 e1       	ldi	r24, 0x19	; 25
    628c:	96 e2       	ldi	r25, 0x26	; 38
    628e:	0e 94 13 3c 	call	0x7826	; 0x7826 <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    6292:	8c e1       	ldi	r24, 0x1C	; 28
    6294:	96 e2       	ldi	r25, 0x26	; 38
    6296:	0e 94 70 3e 	call	0x7ce0	; 0x7ce0 <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    629a:	8f e1       	ldi	r24, 0x1F	; 31
    629c:	96 e2       	ldi	r25, 0x26	; 38
    629e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    62a2:	82 e2       	ldi	r24, 0x22	; 34
    62a4:	96 e2       	ldi	r25, 0x26	; 38
    62a6:	0e 94 64 3b 	call	0x76c8	; 0x76c8 <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    62aa:	85 e2       	ldi	r24, 0x25	; 37
    62ac:	96 e2       	ldi	r25, 0x26	; 38
    62ae:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <_ZN4CSPID1Ev>
    62b2:	08 95       	ret

000062b4 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    62b4:	cf 92       	push	r12
    62b6:	df 92       	push	r13
    62b8:	ef 92       	push	r14
    62ba:	ff 92       	push	r15
    62bc:	0f 93       	push	r16
    62be:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    62c0:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    62c2:	84 e6       	ldi	r24, 0x64	; 100
    62c4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize modules
	laserBoard.InitializeIO();
    62c8:	85 ee       	ldi	r24, 0xE5	; 229
    62ca:	95 e2       	ldi	r25, 0x25	; 37
    62cc:	0e 94 12 39 	call	0x7224	; 0x7224 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    62d0:	86 eb       	ldi	r24, 0xB6	; 182
    62d2:	94 e2       	ldi	r25, 0x24	; 36
    62d4:	0e 94 01 39 	call	0x7202	; 0x7202 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    62d8:	84 ee       	ldi	r24, 0xE4	; 228
    62da:	95 e2       	ldi	r25, 0x25	; 37
    62dc:	0e 94 90 3a 	call	0x7520	; 0x7520 <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    62e0:	46 e0       	ldi	r20, 0x06	; 6
    62e2:	60 e0       	ldi	r22, 0x00	; 0
    62e4:	82 e2       	ldi	r24, 0x22	; 34
    62e6:	96 e2       	ldi	r25, 0x26	; 38
    62e8:	0e 94 9b 3a 	call	0x7536	; 0x7536 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    62ec:	68 ea       	ldi	r22, 0xA8	; 168
    62ee:	71 e6       	ldi	r23, 0x61	; 97
    62f0:	82 e2       	ldi	r24, 0x22	; 34
    62f2:	96 e2       	ldi	r25, 0x26	; 38
    62f4:	0e 94 d9 3a 	call	0x75b2	; 0x75b2 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    62f8:	21 e0       	ldi	r18, 0x01	; 1
    62fa:	4a eb       	ldi	r20, 0xBA	; 186
    62fc:	54 e2       	ldi	r21, 0x24	; 36
    62fe:	6d ea       	ldi	r22, 0xAD	; 173
    6300:	73 e1       	ldi	r23, 0x13	; 19
    6302:	82 e2       	ldi	r24, 0x22	; 34
    6304:	96 e2       	ldi	r25, 0x26	; 38
    6306:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    630a:	47 e0       	ldi	r20, 0x07	; 7
    630c:	60 e0       	ldi	r22, 0x00	; 0
    630e:	8f e1       	ldi	r24, 0x1F	; 31
    6310:	96 e2       	ldi	r25, 0x26	; 38
    6312:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    6316:	62 e1       	ldi	r22, 0x12	; 18
    6318:	7a e7       	ldi	r23, 0x7A	; 122
    631a:	8f e1       	ldi	r24, 0x1F	; 31
    631c:	96 e2       	ldi	r25, 0x26	; 38
    631e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    6322:	48 e0       	ldi	r20, 0x08	; 8
    6324:	60 e0       	ldi	r22, 0x00	; 0
    6326:	89 e1       	ldi	r24, 0x19	; 25
    6328:	96 e2       	ldi	r25, 0x26	; 38
    632a:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    632e:	6f ef       	ldi	r22, 0xFF	; 255
    6330:	7f ef       	ldi	r23, 0xFF	; 255
    6332:	89 e1       	ldi	r24, 0x19	; 25
    6334:	96 e2       	ldi	r25, 0x26	; 38
    6336:	0e 94 b0 3b 	call	0x7760	; 0x7760 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    633a:	6f ef       	ldi	r22, 0xFF	; 255
    633c:	7f ef       	ldi	r23, 0xFF	; 255
    633e:	89 e1       	ldi	r24, 0x19	; 25
    6340:	96 e2       	ldi	r25, 0x26	; 38
    6342:	0e 94 83 3b 	call	0x7706	; 0x7706 <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    6346:	45 e0       	ldi	r20, 0x05	; 5
    6348:	63 e0       	ldi	r22, 0x03	; 3
    634a:	86 e1       	ldi	r24, 0x16	; 22
    634c:	96 e2       	ldi	r25, 0x26	; 38
    634e:	0e 94 1b 3c 	call	0x7836	; 0x7836 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    6352:	60 e0       	ldi	r22, 0x00	; 0
    6354:	72 e0       	ldi	r23, 0x02	; 2
    6356:	86 e1       	ldi	r24, 0x16	; 22
    6358:	96 e2       	ldi	r25, 0x26	; 38
    635a:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    635e:	85 ee       	ldi	r24, 0xE5	; 229
    6360:	95 e2       	ldi	r25, 0x25	; 37
    6362:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    6366:	85 ee       	ldi	r24, 0xE5	; 229
    6368:	95 e2       	ldi	r25, 0x25	; 37
    636a:	0e 94 b4 39 	call	0x7368	; 0x7368 <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    636e:	85 ee       	ldi	r24, 0xE5	; 229
    6370:	95 e2       	ldi	r25, 0x25	; 37
    6372:	0e 94 b8 39 	call	0x7370	; 0x7370 <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    6376:	85 ee       	ldi	r24, 0xE5	; 229
    6378:	95 e2       	ldi	r25, 0x25	; 37
    637a:	0e 94 bc 39 	call	0x7378	; 0x7378 <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    637e:	21 e0       	ldi	r18, 0x01	; 1
    6380:	4a eb       	ldi	r20, 0xBA	; 186
    6382:	54 e2       	ldi	r21, 0x24	; 36
    6384:	6c e1       	ldi	r22, 0x1C	; 28
    6386:	76 e0       	ldi	r23, 0x06	; 6
    6388:	86 e1       	ldi	r24, 0x16	; 22
    638a:	96 e2       	ldi	r25, 0x26	; 38
    638c:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    6390:	21 e0       	ldi	r18, 0x01	; 1
    6392:	4a eb       	ldi	r20, 0xBA	; 186
    6394:	54 e2       	ldi	r21, 0x24	; 36
    6396:	6f e1       	ldi	r22, 0x1F	; 31
    6398:	76 e0       	ldi	r23, 0x06	; 6
    639a:	86 e1       	ldi	r24, 0x16	; 22
    639c:	96 e2       	ldi	r25, 0x26	; 38
    639e:	0e 94 94 3c 	call	0x7928	; 0x7928 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    63a2:	60 e0       	ldi	r22, 0x00	; 0
    63a4:	71 e0       	ldi	r23, 0x01	; 1
    63a6:	86 e1       	ldi	r24, 0x16	; 22
    63a8:	96 e2       	ldi	r25, 0x26	; 38
    63aa:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    63ae:	60 e0       	ldi	r22, 0x00	; 0
    63b0:	72 e0       	ldi	r23, 0x02	; 2
    63b2:	86 e1       	ldi	r24, 0x16	; 22
    63b4:	96 e2       	ldi	r25, 0x26	; 38
    63b6:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    63ba:	60 e0       	ldi	r22, 0x00	; 0
    63bc:	73 e0       	ldi	r23, 0x03	; 3
    63be:	86 e1       	ldi	r24, 0x16	; 22
    63c0:	96 e2       	ldi	r25, 0x26	; 38
    63c2:	0e 94 6d 3c 	call	0x78da	; 0x78da <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    63c6:	2c e0       	ldi	r18, 0x0C	; 12
    63c8:	4a eb       	ldi	r20, 0xBA	; 186
    63ca:	54 e2       	ldi	r21, 0x24	; 36
    63cc:	62 e2       	ldi	r22, 0x22	; 34
    63ce:	76 e0       	ldi	r23, 0x06	; 6
    63d0:	86 e1       	ldi	r24, 0x16	; 22
    63d2:	96 e2       	ldi	r25, 0x26	; 38
    63d4:	0e 94 a5 3c 	call	0x794a	; 0x794a <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    63d8:	20 e3       	ldi	r18, 0x30	; 48
    63da:	4a eb       	ldi	r20, 0xBA	; 186
    63dc:	54 e2       	ldi	r21, 0x24	; 36
    63de:	63 e2       	ldi	r22, 0x23	; 35
    63e0:	76 e0       	ldi	r23, 0x06	; 6
    63e2:	86 e1       	ldi	r24, 0x16	; 22
    63e4:	96 e2       	ldi	r25, 0x26	; 38
    63e6:	0e 94 b6 3c 	call	0x796c	; 0x796c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    63ea:	20 ec       	ldi	r18, 0xC0	; 192
    63ec:	4a eb       	ldi	r20, 0xBA	; 186
    63ee:	54 e2       	ldi	r21, 0x24	; 36
    63f0:	64 e2       	ldi	r22, 0x24	; 36
    63f2:	76 e0       	ldi	r23, 0x06	; 6
    63f4:	86 e1       	ldi	r24, 0x16	; 22
    63f6:	96 e2       	ldi	r25, 0x26	; 38
    63f8:	0e 94 c7 3c 	call	0x798e	; 0x798e <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    63fc:	60 e0       	ldi	r22, 0x00	; 0
    63fe:	74 e0       	ldi	r23, 0x04	; 4
    6400:	86 e1       	ldi	r24, 0x16	; 22
    6402:	96 e2       	ldi	r25, 0x26	; 38
    6404:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    6408:	0f 2e       	mov	r0, r31
    640a:	f3 e0       	ldi	r31, 0x03	; 3
    640c:	ef 2e       	mov	r14, r31
    640e:	f0 2d       	mov	r31, r0
    6410:	00 e0       	ldi	r16, 0x00	; 0
    6412:	23 e0       	ldi	r18, 0x03	; 3
    6414:	40 e0       	ldi	r20, 0x00	; 0
    6416:	61 e0       	ldi	r22, 0x01	; 1
    6418:	85 e2       	ldi	r24, 0x25	; 37
    641a:	96 e2       	ldi	r25, 0x26	; 38
    641c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    6420:	01 e0       	ldi	r16, 0x01	; 1
    6422:	20 e0       	ldi	r18, 0x00	; 0
    6424:	40 e0       	ldi	r20, 0x00	; 0
    6426:	6d e0       	ldi	r22, 0x0D	; 13
    6428:	84 e1       	ldi	r24, 0x14	; 20
    642a:	96 e2       	ldi	r25, 0x26	; 38
    642c:	0e 94 63 37 	call	0x6ec6	; 0x6ec6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    6430:	0f 2e       	mov	r0, r31
    6432:	f2 e1       	ldi	r31, 0x12	; 18
    6434:	cf 2e       	mov	r12, r31
    6436:	fa e7       	ldi	r31, 0x7A	; 122
    6438:	df 2e       	mov	r13, r31
    643a:	f0 2d       	mov	r31, r0
    643c:	e1 2c       	mov	r14, r1
    643e:	ff 24       	eor	r15, r15
    6440:	f3 94       	inc	r15
    6442:	00 e0       	ldi	r16, 0x00	; 0
    6444:	11 e0       	ldi	r17, 0x01	; 1
    6446:	2a eb       	ldi	r18, 0xBA	; 186
    6448:	34 e2       	ldi	r19, 0x24	; 36
    644a:	44 e1       	ldi	r20, 0x14	; 20
    644c:	56 e2       	ldi	r21, 0x26	; 38
    644e:	6f e1       	ldi	r22, 0x1F	; 31
    6450:	76 e2       	ldi	r23, 0x26	; 38
    6452:	8f ee       	ldi	r24, 0xEF	; 239
    6454:	95 e2       	ldi	r25, 0x25	; 37
    6456:	0e 94 de 34 	call	0x69bc	; 0x69bc <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    645a:	40 e0       	ldi	r20, 0x00	; 0
    645c:	51 e0       	ldi	r21, 0x01	; 1
    645e:	6f ee       	ldi	r22, 0xEF	; 239
    6460:	75 e2       	ldi	r23, 0x25	; 37
    6462:	8c e0       	ldi	r24, 0x0C	; 12
    6464:	96 e2       	ldi	r25, 0x26	; 38
    6466:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    646a:	6f ee       	ldi	r22, 0xEF	; 239
    646c:	75 e2       	ldi	r23, 0x25	; 37
    646e:	8a eb       	ldi	r24, 0xBA	; 186
    6470:	94 e2       	ldi	r25, 0x24	; 36
    6472:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    6476:	85 ee       	ldi	r24, 0xE5	; 229
    6478:	95 e2       	ldi	r25, 0x25	; 37
    647a:	0e 94 77 39 	call	0x72ee	; 0x72ee <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    647e:	8a eb       	ldi	r24, 0xBA	; 186
    6480:	94 e2       	ldi	r25, 0x24	; 36
    6482:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <InterruptSenderTable+0x4>
    6486:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <InterruptSenderTable+0x5>
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    648a:	83 e9       	ldi	r24, 0x93	; 147
    648c:	9c e1       	ldi	r25, 0x1C	; 28
    648e:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <InterruptFuncTable+0x4>
    6492:	90 93 cb 22 	sts	0x22CB, r25	; 0x8022cb <InterruptFuncTable+0x5>
	
	sei();	/* Enable global interrupts */
    6496:	78 94       	sei
}
    6498:	1f 91       	pop	r17
    649a:	0f 91       	pop	r16
    649c:	ff 90       	pop	r15
    649e:	ef 90       	pop	r14
    64a0:	df 90       	pop	r13
    64a2:	cf 90       	pop	r12
    64a4:	08 95       	ret

000064a6 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    64a6:	cf 93       	push	r28
    64a8:	df 93       	push	r29
    64aa:	1f 92       	push	r1
    64ac:	1f 92       	push	r1
    64ae:	cd b7       	in	r28, 0x3d	; 61
    64b0:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    64b2:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <_Z16SystemInitializev>
    64b6:	2a ea       	ldi	r18, 0xAA	; 170
    64b8:	36 ee       	ldi	r19, 0xE6	; 230
    64ba:	86 e9       	ldi	r24, 0x96	; 150
    64bc:	91 e0       	ldi	r25, 0x01	; 1
    64be:	21 50       	subi	r18, 0x01	; 1
    64c0:	30 40       	sbci	r19, 0x00	; 0
    64c2:	80 40       	sbci	r24, 0x00	; 0
    64c4:	90 40       	sbci	r25, 0x00	; 0
    64c6:	d9 f7       	brne	.-10     	; 0x64be <main+0x18>
    64c8:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    64ca:	85 ee       	ldi	r24, 0xE5	; 229
    64cc:	95 e2       	ldi	r25, 0x25	; 37
    64ce:	0e 94 c0 39 	call	0x7380	; 0x7380 <_ZN11CLaserBoard8Relay1OnEv>
    64d2:	2f ef       	ldi	r18, 0xFF	; 255
    64d4:	33 ec       	ldi	r19, 0xC3	; 195
    64d6:	89 e0       	ldi	r24, 0x09	; 9
    64d8:	21 50       	subi	r18, 0x01	; 1
    64da:	30 40       	sbci	r19, 0x00	; 0
    64dc:	80 40       	sbci	r24, 0x00	; 0
    64de:	e1 f7       	brne	.-8      	; 0x64d8 <main+0x32>
    64e0:	00 c0       	rjmp	.+0      	; 0x64e2 <main+0x3c>
    64e2:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    64e4:	19 82       	std	Y+1, r1	; 0x01
    64e6:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    64e8:	42 e0       	ldi	r20, 0x02	; 2
    64ea:	50 e0       	ldi	r21, 0x00	; 0
    64ec:	be 01       	movw	r22, r28
    64ee:	6f 5f       	subi	r22, 0xFF	; 255
    64f0:	7f 4f       	sbci	r23, 0xFF	; 255
    64f2:	85 e2       	ldi	r24, 0x25	; 37
    64f4:	96 e2       	ldi	r25, 0x26	; 38
    64f6:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    64fa:	8a eb       	ldi	r24, 0xBA	; 186
    64fc:	94 e2       	ldi	r25, 0x24	; 36
    64fe:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    6502:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    6504:	85 ee       	ldi	r24, 0xE5	; 229
    6506:	95 e2       	ldi	r25, 0x25	; 37
    6508:	0e 94 16 3a 	call	0x742c	; 0x742c <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    650c:	8a eb       	ldi	r24, 0xBA	; 186
    650e:	94 e2       	ldi	r25, 0x24	; 36
    6510:	0e 94 c5 13 	call	0x278a	; 0x278a <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    6514:	40 91 b2 24 	lds	r20, 0x24B2	; 0x8024b2 <_ZZ4mainE3prs>
    6518:	50 91 b3 24 	lds	r21, 0x24B3	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    651c:	ca 01       	movw	r24, r20
    651e:	01 96       	adiw	r24, 0x01	; 1
    6520:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <_ZZ4mainE3prs>
    6524:	90 93 b3 24 	sts	0x24B3, r25	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    6528:	9a 01       	movw	r18, r20
    652a:	a9 e8       	ldi	r26, 0x89	; 137
    652c:	b8 e8       	ldi	r27, 0x88	; 136
    652e:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    6532:	96 95       	lsr	r25
    6534:	87 95       	ror	r24
    6536:	96 95       	lsr	r25
    6538:	87 95       	ror	r24
    653a:	96 95       	lsr	r25
    653c:	87 95       	ror	r24
    653e:	18 9f       	mul	r17, r24
    6540:	90 01       	movw	r18, r0
    6542:	19 9f       	mul	r17, r25
    6544:	30 0d       	add	r19, r0
    6546:	11 24       	eor	r1, r1
    6548:	42 17       	cp	r20, r18
    654a:	53 07       	cpc	r21, r19
    654c:	41 f4       	brne	.+16     	; 0x655e <main+0xb8>
				temperature = D18B20.temp_18b20();
    654e:	86 eb       	ldi	r24, 0xB6	; 182
    6550:	94 e2       	ldi	r25, 0x24	; 36
    6552:	0e 94 8a 38 	call	0x7114	; 0x7114 <_ZN8CDS18B2010temp_18b20Ev>
    6556:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <temperature>
    655a:	90 93 b5 24 	sts	0x24B5, r25	; 0x8024b5 <temperature+0x1>
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    655e:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    6562:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    6566:	8a 30       	cpi	r24, 0x0A	; 10
    6568:	91 40       	sbci	r25, 0x01	; 1
    656a:	24 f0       	brlt	.+8      	; 0x6574 <main+0xce>
				laserBoard.Relay2On();
    656c:	85 ee       	ldi	r24, 0xE5	; 229
    656e:	95 e2       	ldi	r25, 0x25	; 37
    6570:	0e 94 c4 39 	call	0x7388	; 0x7388 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    6574:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    6578:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    657c:	8f 3f       	cpi	r24, 0xFF	; 255
    657e:	91 05       	cpc	r25, r1
    6580:	0c f6       	brge	.-126    	; 0x6504 <main+0x5e>
				laserBoard.Relay2Off();			
    6582:	85 ee       	ldi	r24, 0xE5	; 229
    6584:	95 e2       	ldi	r25, 0x25	; 37
    6586:	0e 94 c8 39 	call	0x7390	; 0x7390 <_ZN11CLaserBoard9Relay2OffEv>
    658a:	bc cf       	rjmp	.-136    	; 0x6504 <main+0x5e>

0000658c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	index = crch ^ data;	
	crch  = crcl ^ CRCTABH[index];
	crcl  = CRCTABL[index];

	return (crch << 8) | crcl;
}
    658c:	ef 92       	push	r14
    658e:	ff 92       	push	r15
    6590:	0f 93       	push	r16
    6592:	1f 93       	push	r17
    6594:	cf 93       	push	r28
    6596:	df 93       	push	r29
    6598:	8c 01       	movw	r16, r24
    659a:	dc 01       	movw	r26, r24
    659c:	14 96       	adiw	r26, 0x04	; 4
    659e:	ed 91       	ld	r30, X+
    65a0:	fc 91       	ld	r31, X
    65a2:	15 97       	sbiw	r26, 0x05	; 5
    65a4:	8a ea       	ldi	r24, 0xAA	; 170
    65a6:	80 83       	st	Z, r24
    65a8:	14 96       	adiw	r26, 0x04	; 4
    65aa:	ed 91       	ld	r30, X+
    65ac:	fc 91       	ld	r31, X
    65ae:	15 97       	sbiw	r26, 0x05	; 5
    65b0:	8c ec       	ldi	r24, 0xCC	; 204
    65b2:	81 83       	std	Z+1, r24	; 0x01
    65b4:	14 96       	adiw	r26, 0x04	; 4
    65b6:	ed 91       	ld	r30, X+
    65b8:	fc 91       	ld	r31, X
    65ba:	15 97       	sbiw	r26, 0x05	; 5
    65bc:	85 e0       	ldi	r24, 0x05	; 5
    65be:	82 0f       	add	r24, r18
    65c0:	82 83       	std	Z+2, r24	; 0x02
    65c2:	14 96       	adiw	r26, 0x04	; 4
    65c4:	ed 91       	ld	r30, X+
    65c6:	fc 91       	ld	r31, X
    65c8:	15 97       	sbiw	r26, 0x05	; 5
    65ca:	82 e8       	ldi	r24, 0x82	; 130
    65cc:	83 83       	std	Z+3, r24	; 0x03
    65ce:	14 96       	adiw	r26, 0x04	; 4
    65d0:	ed 91       	ld	r30, X+
    65d2:	fc 91       	ld	r31, X
    65d4:	15 97       	sbiw	r26, 0x05	; 5
    65d6:	74 83       	std	Z+4, r23	; 0x04
    65d8:	14 96       	adiw	r26, 0x04	; 4
    65da:	ed 91       	ld	r30, X+
    65dc:	fc 91       	ld	r31, X
    65de:	15 97       	sbiw	r26, 0x05	; 5
    65e0:	65 83       	std	Z+5, r22	; 0x05
    65e2:	86 e0       	ldi	r24, 0x06	; 6
    65e4:	82 0f       	add	r24, r18
    65e6:	19 96       	adiw	r26, 0x09	; 9
    65e8:	8c 93       	st	X, r24
    65ea:	c9 01       	movw	r24, r18
    65ec:	96 95       	lsr	r25
    65ee:	87 95       	ror	r24
    65f0:	00 97       	sbiw	r24, 0x00	; 0
    65f2:	d9 f0       	breq	.+54     	; 0x662a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x9e>
    65f4:	e4 2f       	mov	r30, r20
    65f6:	f5 2f       	mov	r31, r21
    65f8:	03 96       	adiw	r24, 0x03	; 3
    65fa:	88 0f       	add	r24, r24
    65fc:	99 1f       	adc	r25, r25
    65fe:	46 e0       	ldi	r20, 0x06	; 6
    6600:	50 e0       	ldi	r21, 0x00	; 0
    6602:	e8 01       	movw	r28, r16
    6604:	ac 81       	ldd	r26, Y+4	; 0x04
    6606:	bd 81       	ldd	r27, Y+5	; 0x05
    6608:	a4 0f       	add	r26, r20
    660a:	b5 1f       	adc	r27, r21
    660c:	61 81       	ldd	r22, Z+1	; 0x01
    660e:	6c 93       	st	X, r22
    6610:	ac 81       	ldd	r26, Y+4	; 0x04
    6612:	bd 81       	ldd	r27, Y+5	; 0x05
    6614:	a4 0f       	add	r26, r20
    6616:	b5 1f       	adc	r27, r21
    6618:	60 81       	ld	r22, Z
    661a:	32 96       	adiw	r30, 0x02	; 2
    661c:	11 96       	adiw	r26, 0x01	; 1
    661e:	6c 93       	st	X, r22
    6620:	4e 5f       	subi	r20, 0xFE	; 254
    6622:	5f 4f       	sbci	r21, 0xFF	; 255
    6624:	48 17       	cp	r20, r24
    6626:	59 07       	cpc	r21, r25
    6628:	61 f7       	brne	.-40     	; 0x6602 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x76>
    662a:	f8 01       	movw	r30, r16
    662c:	81 85       	ldd	r24, Z+9	; 0x09
    662e:	a8 2f       	mov	r26, r24
    6630:	b0 e0       	ldi	r27, 0x00	; 0
    6632:	a4 30       	cpi	r26, 0x04	; 4
    6634:	b1 05       	cpc	r27, r1
    6636:	34 f1       	brlt	.+76     	; 0x6684 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xf8>
    6638:	04 80       	ldd	r0, Z+4	; 0x04
    663a:	f5 81       	ldd	r31, Z+5	; 0x05
    663c:	e0 2d       	mov	r30, r0
    663e:	33 96       	adiw	r30, 0x03	; 3
    6640:	63 e0       	ldi	r22, 0x03	; 3
    6642:	70 e0       	ldi	r23, 0x00	; 0
    6644:	4f ef       	ldi	r20, 0xFF	; 255
    6646:	5f ef       	ldi	r21, 0xFF	; 255
    6648:	91 91       	ld	r25, Z+
    664a:	49 27       	eor	r20, r25
    664c:	94 2f       	mov	r25, r20
    664e:	92 95       	swap	r25
    6650:	94 27       	eor	r25, r20
    6652:	09 2e       	mov	r0, r25
    6654:	96 95       	lsr	r25
    6656:	96 95       	lsr	r25
    6658:	90 25       	eor	r25, r0
    665a:	09 2e       	mov	r0, r25
    665c:	96 95       	lsr	r25
    665e:	90 25       	eor	r25, r0
    6660:	97 70       	andi	r25, 0x07	; 7
    6662:	04 2e       	mov	r0, r20
    6664:	45 2f       	mov	r20, r21
    6666:	96 95       	lsr	r25
    6668:	07 94       	ror	r0
    666a:	97 95       	ror	r25
    666c:	50 2d       	mov	r21, r0
    666e:	49 27       	eor	r20, r25
    6670:	06 94       	lsr	r0
    6672:	97 95       	ror	r25
    6674:	50 25       	eor	r21, r0
    6676:	49 27       	eor	r20, r25
    6678:	6f 5f       	subi	r22, 0xFF	; 255
    667a:	7f 4f       	sbci	r23, 0xFF	; 255
    667c:	6a 17       	cp	r22, r26
    667e:	7b 07       	cpc	r23, r27
    6680:	1c f3       	brlt	.-58     	; 0x6648 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xbc>
    6682:	02 c0       	rjmp	.+4      	; 0x6688 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xfc>
    6684:	4f ef       	ldi	r20, 0xFF	; 255
    6686:	5f ef       	ldi	r21, 0xFF	; 255
    6688:	d8 01       	movw	r26, r16
    668a:	14 96       	adiw	r26, 0x04	; 4
    668c:	ed 91       	ld	r30, X+
    668e:	fc 91       	ld	r31, X
    6690:	15 97       	sbiw	r26, 0x05	; 5
    6692:	e8 0f       	add	r30, r24
    6694:	f1 1d       	adc	r31, r1
    6696:	51 83       	std	Z+1, r21	; 0x01
    6698:	19 96       	adiw	r26, 0x09	; 9
    669a:	8c 91       	ld	r24, X
    669c:	19 97       	sbiw	r26, 0x09	; 9
    669e:	14 96       	adiw	r26, 0x04	; 4
    66a0:	ed 91       	ld	r30, X+
    66a2:	fc 91       	ld	r31, X
    66a4:	15 97       	sbiw	r26, 0x05	; 5
    66a6:	e8 0f       	add	r30, r24
    66a8:	f1 1d       	adc	r31, r1
    66aa:	40 83       	st	Z, r20
    66ac:	28 5f       	subi	r18, 0xF8	; 248
    66ae:	19 96       	adiw	r26, 0x09	; 9
    66b0:	2c 93       	st	X, r18
    66b2:	df 91       	pop	r29
    66b4:	cf 91       	pop	r28
    66b6:	1f 91       	pop	r17
    66b8:	0f 91       	pop	r16
    66ba:	ff 90       	pop	r15
    66bc:	ef 90       	pop	r14
    66be:	08 95       	ret

000066c0 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
    66c0:	0f 93       	push	r16
    66c2:	1f 93       	push	r17
    66c4:	cf 93       	push	r28
    66c6:	df 93       	push	r29
    66c8:	ec 01       	movw	r28, r24
    66ca:	cb 01       	movw	r24, r22
    66cc:	8a 01       	movw	r16, r20
    66ce:	6f 83       	std	Y+7, r22	; 0x07
    66d0:	78 87       	std	Y+8, r23	; 0x08
    66d2:	4a 87       	std	Y+10, r20	; 0x0a
    66d4:	5b 87       	std	Y+11, r21	; 0x0b
    66d6:	0e 94 34 40 	call	0x8068	; 0x8068 <malloc>
    66da:	8a 83       	std	Y+2, r24	; 0x02
    66dc:	9b 83       	std	Y+3, r25	; 0x03
    66de:	c8 01       	movw	r24, r16
    66e0:	0e 94 34 40 	call	0x8068	; 0x8068 <malloc>
    66e4:	8c 83       	std	Y+4, r24	; 0x04
    66e6:	9d 83       	std	Y+5, r25	; 0x05
    66e8:	19 86       	std	Y+9, r1	; 0x09
    66ea:	1e 82       	std	Y+6, r1	; 0x06
    66ec:	df 91       	pop	r29
    66ee:	cf 91       	pop	r28
    66f0:	1f 91       	pop	r17
    66f2:	0f 91       	pop	r16
    66f4:	08 95       	ret

000066f6 <_ZN16CMBEventsHandler11FreeBuffersEv>:
    66f6:	cf 93       	push	r28
    66f8:	df 93       	push	r29
    66fa:	ec 01       	movw	r28, r24
    66fc:	8a 81       	ldd	r24, Y+2	; 0x02
    66fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6700:	0e 94 c9 40 	call	0x8192	; 0x8192 <free>
    6704:	8c 81       	ldd	r24, Y+4	; 0x04
    6706:	9d 81       	ldd	r25, Y+5	; 0x05
    6708:	0e 94 c9 40 	call	0x8192	; 0x8192 <free>
    670c:	df 91       	pop	r29
    670e:	cf 91       	pop	r28
    6710:	08 95       	ret

00006712 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:
    6712:	cf 93       	push	r28
    6714:	df 93       	push	r29
    6716:	dc 01       	movw	r26, r24
    6718:	14 96       	adiw	r26, 0x04	; 4
    671a:	ed 91       	ld	r30, X+
    671c:	fc 91       	ld	r31, X
    671e:	15 97       	sbiw	r26, 0x05	; 5
    6720:	8a ea       	ldi	r24, 0xAA	; 170
    6722:	80 83       	st	Z, r24
    6724:	14 96       	adiw	r26, 0x04	; 4
    6726:	ed 91       	ld	r30, X+
    6728:	fc 91       	ld	r31, X
    672a:	15 97       	sbiw	r26, 0x05	; 5
    672c:	8c ec       	ldi	r24, 0xCC	; 204
    672e:	81 83       	std	Z+1, r24	; 0x01
    6730:	14 96       	adiw	r26, 0x04	; 4
    6732:	ed 91       	ld	r30, X+
    6734:	fc 91       	ld	r31, X
    6736:	15 97       	sbiw	r26, 0x05	; 5
    6738:	85 e0       	ldi	r24, 0x05	; 5
    673a:	82 83       	std	Z+2, r24	; 0x02
    673c:	14 96       	adiw	r26, 0x04	; 4
    673e:	ed 91       	ld	r30, X+
    6740:	fc 91       	ld	r31, X
    6742:	15 97       	sbiw	r26, 0x05	; 5
    6744:	81 e8       	ldi	r24, 0x81	; 129
    6746:	83 83       	std	Z+3, r24	; 0x03
    6748:	14 96       	adiw	r26, 0x04	; 4
    674a:	ed 91       	ld	r30, X+
    674c:	fc 91       	ld	r31, X
    674e:	15 97       	sbiw	r26, 0x05	; 5
    6750:	64 83       	std	Z+4, r22	; 0x04
    6752:	14 96       	adiw	r26, 0x04	; 4
    6754:	ed 91       	ld	r30, X+
    6756:	fc 91       	ld	r31, X
    6758:	15 97       	sbiw	r26, 0x05	; 5
    675a:	45 83       	std	Z+5, r20	; 0x05
    675c:	86 e0       	ldi	r24, 0x06	; 6
    675e:	19 96       	adiw	r26, 0x09	; 9
    6760:	8c 93       	st	X, r24
    6762:	19 97       	sbiw	r26, 0x09	; 9
    6764:	14 96       	adiw	r26, 0x04	; 4
    6766:	cd 91       	ld	r28, X+
    6768:	dc 91       	ld	r29, X
    676a:	15 97       	sbiw	r26, 0x05	; 5
    676c:	fe 01       	movw	r30, r28
    676e:	33 96       	adiw	r30, 0x03	; 3
    6770:	be 01       	movw	r22, r28
    6772:	6a 5f       	subi	r22, 0xFA	; 250
    6774:	7f 4f       	sbci	r23, 0xFF	; 255
    6776:	2f ef       	ldi	r18, 0xFF	; 255
    6778:	3f ef       	ldi	r19, 0xFF	; 255
    677a:	91 91       	ld	r25, Z+
    677c:	29 27       	eor	r18, r25
    677e:	92 2f       	mov	r25, r18
    6780:	92 95       	swap	r25
    6782:	92 27       	eor	r25, r18
    6784:	09 2e       	mov	r0, r25
    6786:	96 95       	lsr	r25
    6788:	96 95       	lsr	r25
    678a:	90 25       	eor	r25, r0
    678c:	09 2e       	mov	r0, r25
    678e:	96 95       	lsr	r25
    6790:	90 25       	eor	r25, r0
    6792:	97 70       	andi	r25, 0x07	; 7
    6794:	02 2e       	mov	r0, r18
    6796:	23 2f       	mov	r18, r19
    6798:	96 95       	lsr	r25
    679a:	07 94       	ror	r0
    679c:	97 95       	ror	r25
    679e:	30 2d       	mov	r19, r0
    67a0:	29 27       	eor	r18, r25
    67a2:	06 94       	lsr	r0
    67a4:	97 95       	ror	r25
    67a6:	30 25       	eor	r19, r0
    67a8:	29 27       	eor	r18, r25
    67aa:	e6 17       	cp	r30, r22
    67ac:	f7 07       	cpc	r31, r23
    67ae:	29 f7       	brne	.-54     	; 0x677a <_ZN16CMBEventsHandler13FillRegDataRqEhh+0x68>
    67b0:	3f 83       	std	Y+7, r19	; 0x07
    67b2:	19 96       	adiw	r26, 0x09	; 9
    67b4:	8c 91       	ld	r24, X
    67b6:	19 97       	sbiw	r26, 0x09	; 9
    67b8:	14 96       	adiw	r26, 0x04	; 4
    67ba:	ed 91       	ld	r30, X+
    67bc:	fc 91       	ld	r31, X
    67be:	15 97       	sbiw	r26, 0x05	; 5
    67c0:	e8 0f       	add	r30, r24
    67c2:	f1 1d       	adc	r31, r1
    67c4:	20 83       	st	Z, r18
    67c6:	48 5f       	subi	r20, 0xF8	; 248
    67c8:	19 96       	adiw	r26, 0x09	; 9
    67ca:	4c 93       	st	X, r20
    67cc:	df 91       	pop	r29
    67ce:	cf 91       	pop	r28
    67d0:	08 95       	ret

000067d2 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:
    67d2:	cf 93       	push	r28
    67d4:	df 93       	push	r29
    67d6:	dc 01       	movw	r26, r24
    67d8:	14 96       	adiw	r26, 0x04	; 4
    67da:	ed 91       	ld	r30, X+
    67dc:	fc 91       	ld	r31, X
    67de:	15 97       	sbiw	r26, 0x05	; 5
    67e0:	8a ea       	ldi	r24, 0xAA	; 170
    67e2:	80 83       	st	Z, r24
    67e4:	14 96       	adiw	r26, 0x04	; 4
    67e6:	ed 91       	ld	r30, X+
    67e8:	fc 91       	ld	r31, X
    67ea:	15 97       	sbiw	r26, 0x05	; 5
    67ec:	8c ec       	ldi	r24, 0xCC	; 204
    67ee:	81 83       	std	Z+1, r24	; 0x01
    67f0:	14 96       	adiw	r26, 0x04	; 4
    67f2:	ed 91       	ld	r30, X+
    67f4:	fc 91       	ld	r31, X
    67f6:	15 97       	sbiw	r26, 0x05	; 5
    67f8:	86 e0       	ldi	r24, 0x06	; 6
    67fa:	82 83       	std	Z+2, r24	; 0x02
    67fc:	14 96       	adiw	r26, 0x04	; 4
    67fe:	ed 91       	ld	r30, X+
    6800:	fc 91       	ld	r31, X
    6802:	15 97       	sbiw	r26, 0x05	; 5
    6804:	83 e8       	ldi	r24, 0x83	; 131
    6806:	83 83       	std	Z+3, r24	; 0x03
    6808:	14 96       	adiw	r26, 0x04	; 4
    680a:	ed 91       	ld	r30, X+
    680c:	fc 91       	ld	r31, X
    680e:	15 97       	sbiw	r26, 0x05	; 5
    6810:	74 83       	std	Z+4, r23	; 0x04
    6812:	14 96       	adiw	r26, 0x04	; 4
    6814:	ed 91       	ld	r30, X+
    6816:	fc 91       	ld	r31, X
    6818:	15 97       	sbiw	r26, 0x05	; 5
    681a:	65 83       	std	Z+5, r22	; 0x05
    681c:	14 96       	adiw	r26, 0x04	; 4
    681e:	ed 91       	ld	r30, X+
    6820:	fc 91       	ld	r31, X
    6822:	15 97       	sbiw	r26, 0x05	; 5
    6824:	46 83       	std	Z+6, r20	; 0x06
    6826:	87 e0       	ldi	r24, 0x07	; 7
    6828:	19 96       	adiw	r26, 0x09	; 9
    682a:	8c 93       	st	X, r24
    682c:	19 97       	sbiw	r26, 0x09	; 9
    682e:	14 96       	adiw	r26, 0x04	; 4
    6830:	cd 91       	ld	r28, X+
    6832:	dc 91       	ld	r29, X
    6834:	15 97       	sbiw	r26, 0x05	; 5
    6836:	fe 01       	movw	r30, r28
    6838:	33 96       	adiw	r30, 0x03	; 3
    683a:	ae 01       	movw	r20, r28
    683c:	49 5f       	subi	r20, 0xF9	; 249
    683e:	5f 4f       	sbci	r21, 0xFF	; 255
    6840:	2f ef       	ldi	r18, 0xFF	; 255
    6842:	3f ef       	ldi	r19, 0xFF	; 255
    6844:	91 91       	ld	r25, Z+
    6846:	29 27       	eor	r18, r25
    6848:	92 2f       	mov	r25, r18
    684a:	92 95       	swap	r25
    684c:	92 27       	eor	r25, r18
    684e:	09 2e       	mov	r0, r25
    6850:	96 95       	lsr	r25
    6852:	96 95       	lsr	r25
    6854:	90 25       	eor	r25, r0
    6856:	09 2e       	mov	r0, r25
    6858:	96 95       	lsr	r25
    685a:	90 25       	eor	r25, r0
    685c:	97 70       	andi	r25, 0x07	; 7
    685e:	02 2e       	mov	r0, r18
    6860:	23 2f       	mov	r18, r19
    6862:	96 95       	lsr	r25
    6864:	07 94       	ror	r0
    6866:	97 95       	ror	r25
    6868:	30 2d       	mov	r19, r0
    686a:	29 27       	eor	r18, r25
    686c:	06 94       	lsr	r0
    686e:	97 95       	ror	r25
    6870:	30 25       	eor	r19, r0
    6872:	29 27       	eor	r18, r25
    6874:	e4 17       	cp	r30, r20
    6876:	f5 07       	cpc	r31, r21
    6878:	29 f7       	brne	.-54     	; 0x6844 <_ZN16CMBEventsHandler13FillVarDataRqEjj+0x72>
    687a:	38 87       	std	Y+8, r19	; 0x08
    687c:	19 96       	adiw	r26, 0x09	; 9
    687e:	8c 91       	ld	r24, X
    6880:	19 97       	sbiw	r26, 0x09	; 9
    6882:	14 96       	adiw	r26, 0x04	; 4
    6884:	ed 91       	ld	r30, X+
    6886:	fc 91       	ld	r31, X
    6888:	15 97       	sbiw	r26, 0x05	; 5
    688a:	e8 0f       	add	r30, r24
    688c:	f1 1d       	adc	r31, r1
    688e:	20 83       	st	Z, r18
    6890:	89 e0       	ldi	r24, 0x09	; 9
    6892:	19 96       	adiw	r26, 0x09	; 9
    6894:	8c 93       	st	X, r24
    6896:	df 91       	pop	r29
    6898:	cf 91       	pop	r28
    689a:	08 95       	ret

0000689c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
    689c:	cf 93       	push	r28
    689e:	df 93       	push	r29
    68a0:	ec 01       	movw	r28, r24
    68a2:	ec 81       	ldd	r30, Y+4	; 0x04
    68a4:	fd 81       	ldd	r31, Y+5	; 0x05
    68a6:	8a ea       	ldi	r24, 0xAA	; 170
    68a8:	80 83       	st	Z, r24
    68aa:	ec 81       	ldd	r30, Y+4	; 0x04
    68ac:	fd 81       	ldd	r31, Y+5	; 0x05
    68ae:	8c ec       	ldi	r24, 0xCC	; 204
    68b0:	81 83       	std	Z+1, r24	; 0x01
    68b2:	ec 81       	ldd	r30, Y+4	; 0x04
    68b4:	fd 81       	ldd	r31, Y+5	; 0x05
    68b6:	84 e0       	ldi	r24, 0x04	; 4
    68b8:	82 0f       	add	r24, r18
    68ba:	82 83       	std	Z+2, r24	; 0x02
    68bc:	ec 81       	ldd	r30, Y+4	; 0x04
    68be:	fd 81       	ldd	r31, Y+5	; 0x05
    68c0:	80 e8       	ldi	r24, 0x80	; 128
    68c2:	83 83       	std	Z+3, r24	; 0x03
    68c4:	ec 81       	ldd	r30, Y+4	; 0x04
    68c6:	fd 81       	ldd	r31, Y+5	; 0x05
    68c8:	64 83       	std	Z+4, r22	; 0x04
    68ca:	85 e0       	ldi	r24, 0x05	; 5
    68cc:	82 0f       	add	r24, r18
    68ce:	89 87       	std	Y+9, r24	; 0x09
    68d0:	82 2f       	mov	r24, r18
    68d2:	90 e0       	ldi	r25, 0x00	; 0
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	81 f0       	breq	.+32     	; 0x68f8 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    68d8:	da 01       	movw	r26, r20
    68da:	48 0f       	add	r20, r24
    68dc:	59 1f       	adc	r21, r25
    68de:	65 e0       	ldi	r22, 0x05	; 5
    68e0:	70 e0       	ldi	r23, 0x00	; 0
    68e2:	8d 91       	ld	r24, X+
    68e4:	ec 81       	ldd	r30, Y+4	; 0x04
    68e6:	fd 81       	ldd	r31, Y+5	; 0x05
    68e8:	e6 0f       	add	r30, r22
    68ea:	f7 1f       	adc	r31, r23
    68ec:	80 83       	st	Z, r24
    68ee:	6f 5f       	subi	r22, 0xFF	; 255
    68f0:	7f 4f       	sbci	r23, 0xFF	; 255
    68f2:	a4 17       	cp	r26, r20
    68f4:	b5 07       	cpc	r27, r21
    68f6:	a9 f7       	brne	.-22     	; 0x68e2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
    68f8:	a9 85       	ldd	r26, Y+9	; 0x09
    68fa:	b0 e0       	ldi	r27, 0x00	; 0
    68fc:	a4 30       	cpi	r26, 0x04	; 4
    68fe:	b1 05       	cpc	r27, r1
    6900:	28 f1       	brcs	.+74     	; 0x694c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb0>
    6902:	ec 81       	ldd	r30, Y+4	; 0x04
    6904:	fd 81       	ldd	r31, Y+5	; 0x05
    6906:	33 96       	adiw	r30, 0x03	; 3
    6908:	63 e0       	ldi	r22, 0x03	; 3
    690a:	70 e0       	ldi	r23, 0x00	; 0
    690c:	4f ef       	ldi	r20, 0xFF	; 255
    690e:	5f ef       	ldi	r21, 0xFF	; 255
    6910:	91 91       	ld	r25, Z+
    6912:	49 27       	eor	r20, r25
    6914:	94 2f       	mov	r25, r20
    6916:	92 95       	swap	r25
    6918:	94 27       	eor	r25, r20
    691a:	09 2e       	mov	r0, r25
    691c:	96 95       	lsr	r25
    691e:	96 95       	lsr	r25
    6920:	90 25       	eor	r25, r0
    6922:	09 2e       	mov	r0, r25
    6924:	96 95       	lsr	r25
    6926:	90 25       	eor	r25, r0
    6928:	97 70       	andi	r25, 0x07	; 7
    692a:	04 2e       	mov	r0, r20
    692c:	45 2f       	mov	r20, r21
    692e:	96 95       	lsr	r25
    6930:	07 94       	ror	r0
    6932:	97 95       	ror	r25
    6934:	50 2d       	mov	r21, r0
    6936:	49 27       	eor	r20, r25
    6938:	06 94       	lsr	r0
    693a:	97 95       	ror	r25
    693c:	50 25       	eor	r21, r0
    693e:	49 27       	eor	r20, r25
    6940:	6f 5f       	subi	r22, 0xFF	; 255
    6942:	7f 4f       	sbci	r23, 0xFF	; 255
    6944:	6a 17       	cp	r22, r26
    6946:	7b 07       	cpc	r23, r27
    6948:	18 f3       	brcs	.-58     	; 0x6910 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x74>
    694a:	02 c0       	rjmp	.+4      	; 0x6950 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb4>
    694c:	4f ef       	ldi	r20, 0xFF	; 255
    694e:	5f ef       	ldi	r21, 0xFF	; 255
    6950:	8c 81       	ldd	r24, Y+4	; 0x04
    6952:	9d 81       	ldd	r25, Y+5	; 0x05
    6954:	a8 0f       	add	r26, r24
    6956:	b9 1f       	adc	r27, r25
    6958:	11 96       	adiw	r26, 0x01	; 1
    695a:	5c 93       	st	X, r21
    695c:	89 85       	ldd	r24, Y+9	; 0x09
    695e:	ec 81       	ldd	r30, Y+4	; 0x04
    6960:	fd 81       	ldd	r31, Y+5	; 0x05
    6962:	e8 0f       	add	r30, r24
    6964:	f1 1d       	adc	r31, r1
    6966:	40 83       	st	Z, r20
    6968:	29 5f       	subi	r18, 0xF9	; 249
    696a:	29 87       	std	Y+9, r18	; 0x09
    696c:	df 91       	pop	r29
    696e:	cf 91       	pop	r28
    6970:	08 95       	ret

00006972 <_ZN16CMBEventsHandlerD1Ev>:

CMBEventsHandler::~CMBEventsHandler()
    6972:	08 95       	ret

00006974 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    6974:	dc 01       	movw	r26, r24
    6976:	5b 96       	adiw	r26, 0x1b	; 27
    6978:	8d 91       	ld	r24, X+
    697a:	9c 91       	ld	r25, X
    697c:	5c 97       	sbiw	r26, 0x1c	; 28
    697e:	00 97       	sbiw	r24, 0x00	; 0
    6980:	39 f0       	breq	.+14     	; 0x6990 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    6982:	dc 01       	movw	r26, r24
    6984:	ed 91       	ld	r30, X+
    6986:	fc 91       	ld	r31, X
    6988:	02 80       	ldd	r0, Z+2	; 0x02
    698a:	f3 81       	ldd	r31, Z+3	; 0x03
    698c:	e0 2d       	mov	r30, r0
    698e:	19 95       	eicall
    6990:	08 95       	ret

00006992 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    6992:	dc 01       	movw	r26, r24
    6994:	5b 96       	adiw	r26, 0x1b	; 27
    6996:	8d 91       	ld	r24, X+
    6998:	9c 91       	ld	r25, X
    699a:	5c 97       	sbiw	r26, 0x1c	; 28
    699c:	00 97       	sbiw	r24, 0x00	; 0
    699e:	39 f0       	breq	.+14     	; 0x69ae <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    69a0:	dc 01       	movw	r26, r24
    69a2:	ed 91       	ld	r30, X+
    69a4:	fc 91       	ld	r31, X
    69a6:	04 80       	ldd	r0, Z+4	; 0x04
    69a8:	f5 81       	ldd	r31, Z+5	; 0x05
    69aa:	e0 2d       	mov	r30, r0
    69ac:	19 95       	eicall
    69ae:	08 95       	ret

000069b0 <_ZN9CMBSenderC1Ev>:
    69b0:	2e ee       	ldi	r18, 0xEE	; 238
    69b2:	31 e2       	ldi	r19, 0x21	; 33
    69b4:	fc 01       	movw	r30, r24
    69b6:	20 83       	st	Z, r18
    69b8:	31 83       	std	Z+1, r19	; 0x01
    69ba:	08 95       	ret

000069bc <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    69bc:	6f 92       	push	r6
    69be:	7f 92       	push	r7
    69c0:	8f 92       	push	r8
    69c2:	9f 92       	push	r9
    69c4:	af 92       	push	r10
    69c6:	bf 92       	push	r11
    69c8:	cf 92       	push	r12
    69ca:	df 92       	push	r13
    69cc:	ef 92       	push	r14
    69ce:	ff 92       	push	r15
    69d0:	0f 93       	push	r16
    69d2:	1f 93       	push	r17
    69d4:	cf 93       	push	r28
    69d6:	df 93       	push	r29
    69d8:	ec 01       	movw	r28, r24
    69da:	4b 01       	movw	r8, r22
    69dc:	5a 01       	movw	r10, r20
    69de:	39 01       	movw	r6, r18
    69e0:	c8 01       	movw	r24, r16
    69e2:	0f 83       	std	Y+7, r16	; 0x07
    69e4:	18 87       	std	Y+8, r17	; 0x08
    69e6:	ea 86       	std	Y+10, r14	; 0x0a
    69e8:	fb 86       	std	Y+11, r15	; 0x0b
    69ea:	0e 94 34 40 	call	0x8068	; 0x8068 <malloc>
    69ee:	8a 83       	std	Y+2, r24	; 0x02
    69f0:	9b 83       	std	Y+3, r25	; 0x03
    69f2:	c7 01       	movw	r24, r14
    69f4:	0e 94 34 40 	call	0x8068	; 0x8068 <malloc>
    69f8:	8c 83       	std	Y+4, r24	; 0x04
    69fa:	9d 83       	std	Y+5, r25	; 0x05
    69fc:	19 8e       	std	Y+25, r1	; 0x19
    69fe:	19 86       	std	Y+9, r1	; 0x09
    6a00:	19 8a       	std	Y+17, r1	; 0x11
    6a02:	1e 82       	std	Y+6, r1	; 0x06
    6a04:	1c 8a       	std	Y+20, r1	; 0x14
    6a06:	1d 8a       	std	Y+21, r1	; 0x15
    6a08:	8f ef       	ldi	r24, 0xFF	; 255
    6a0a:	9f ef       	ldi	r25, 0xFF	; 255
    6a0c:	8e 8b       	std	Y+22, r24	; 0x16
    6a0e:	9f 8b       	std	Y+23, r25	; 0x17
    6a10:	87 e0       	ldi	r24, 0x07	; 7
    6a12:	88 8b       	std	Y+16, r24	; 0x10
    6a14:	82 e0       	ldi	r24, 0x02	; 2
    6a16:	88 8f       	std	Y+24, r24	; 0x18
    6a18:	1a 8e       	std	Y+26, r1	; 0x1a
    6a1a:	ca 8a       	std	Y+18, r12	; 0x12
    6a1c:	db 8a       	std	Y+19, r13	; 0x13
    6a1e:	ac 86       	std	Y+12, r10	; 0x0c
    6a20:	bd 86       	std	Y+13, r11	; 0x0d
    6a22:	d5 01       	movw	r26, r10
    6a24:	ed 91       	ld	r30, X+
    6a26:	fc 91       	ld	r31, X
    6a28:	04 84       	ldd	r0, Z+12	; 0x0c
    6a2a:	f5 85       	ldd	r31, Z+13	; 0x0d
    6a2c:	e0 2d       	mov	r30, r0
    6a2e:	40 e2       	ldi	r20, 0x20	; 32
    6a30:	56 e3       	ldi	r21, 0x36	; 54
    6a32:	be 01       	movw	r22, r28
    6a34:	c5 01       	movw	r24, r10
    6a36:	19 95       	eicall
    6a38:	d5 01       	movw	r26, r10
    6a3a:	ed 91       	ld	r30, X+
    6a3c:	fc 91       	ld	r31, X
    6a3e:	06 84       	ldd	r0, Z+14	; 0x0e
    6a40:	f7 85       	ldd	r31, Z+15	; 0x0f
    6a42:	e0 2d       	mov	r30, r0
    6a44:	4c ea       	ldi	r20, 0xAC	; 172
    6a46:	56 e3       	ldi	r21, 0x36	; 54
    6a48:	be 01       	movw	r22, r28
    6a4a:	c5 01       	movw	r24, r10
    6a4c:	19 95       	eicall
    6a4e:	61 14       	cp	r6, r1
    6a50:	71 04       	cpc	r7, r1
    6a52:	19 f0       	breq	.+6      	; 0x6a5a <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    6a54:	6b 8e       	std	Y+27, r6	; 0x1b
    6a56:	7c 8e       	std	Y+28, r7	; 0x1c
    6a58:	02 c0       	rjmp	.+4      	; 0x6a5e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xa2>
    6a5a:	cb 8f       	std	Y+27, r28	; 0x1b
    6a5c:	dc 8f       	std	Y+28, r29	; 0x1c
    6a5e:	8e 86       	std	Y+14, r8	; 0x0e
    6a60:	9f 86       	std	Y+15, r9	; 0x0f
    6a62:	81 14       	cp	r8, r1
    6a64:	91 04       	cpc	r9, r1
    6a66:	61 f0       	breq	.+24     	; 0x6a80 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc4>
    6a68:	d4 01       	movw	r26, r8
    6a6a:	ed 91       	ld	r30, X+
    6a6c:	fc 91       	ld	r31, X
    6a6e:	02 88       	ldd	r0, Z+18	; 0x12
    6a70:	f3 89       	ldd	r31, Z+19	; 0x13
    6a72:	e0 2d       	mov	r30, r0
    6a74:	21 e0       	ldi	r18, 0x01	; 1
    6a76:	ae 01       	movw	r20, r28
    6a78:	67 e4       	ldi	r22, 0x47	; 71
    6a7a:	76 e3       	ldi	r23, 0x36	; 54
    6a7c:	c4 01       	movw	r24, r8
    6a7e:	19 95       	eicall
    6a80:	df 91       	pop	r29
    6a82:	cf 91       	pop	r28
    6a84:	1f 91       	pop	r17
    6a86:	0f 91       	pop	r16
    6a88:	ff 90       	pop	r15
    6a8a:	ef 90       	pop	r14
    6a8c:	df 90       	pop	r13
    6a8e:	cf 90       	pop	r12
    6a90:	bf 90       	pop	r11
    6a92:	af 90       	pop	r10
    6a94:	9f 90       	pop	r9
    6a96:	8f 90       	pop	r8
    6a98:	7f 90       	pop	r7
    6a9a:	6f 90       	pop	r6
    6a9c:	08 95       	ret

00006a9e <_ZN9CMBSenderD1Ev>:
    6a9e:	2e ee       	ldi	r18, 0xEE	; 238
    6aa0:	31 e2       	ldi	r19, 0x21	; 33
    6aa2:	fc 01       	movw	r30, r24
    6aa4:	20 83       	st	Z, r18
    6aa6:	31 83       	std	Z+1, r19	; 0x01
    6aa8:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN16CMBEventsHandlerD1Ev>
    6aac:	08 95       	ret

00006aae <_ZN9CMBSender13OnReceiveByteEh>:
    6aae:	cf 93       	push	r28
    6ab0:	df 93       	push	r29
    6ab2:	dc 01       	movw	r26, r24
    6ab4:	96 2f       	mov	r25, r22
    6ab6:	50 96       	adiw	r26, 0x10	; 16
    6ab8:	4c 91       	ld	r20, X
    6aba:	50 97       	sbiw	r26, 0x10	; 16
    6abc:	50 e0       	ldi	r21, 0x00	; 0
    6abe:	4b 30       	cpi	r20, 0x0B	; 11
    6ac0:	51 05       	cpc	r21, r1
    6ac2:	08 f0       	brcs	.+2      	; 0x6ac6 <_ZN9CMBSender13OnReceiveByteEh+0x18>
    6ac4:	ba c0       	rjmp	.+372    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6ac6:	fa 01       	movw	r30, r20
    6ac8:	88 27       	eor	r24, r24
    6aca:	e0 5c       	subi	r30, 0xC0	; 192
    6acc:	fe 4f       	sbci	r31, 0xFE	; 254
    6ace:	8f 4f       	sbci	r24, 0xFF	; 255
    6ad0:	0c 94 12 40 	jmp	0x8024	; 0x8024 <__tablejump2__>
    6ad4:	9a 3a       	cpi	r25, 0xAA	; 170
    6ad6:	21 f4       	brne	.+8      	; 0x6ae0 <_ZN9CMBSender13OnReceiveByteEh+0x32>
    6ad8:	82 e0       	ldi	r24, 0x02	; 2
    6ada:	50 96       	adiw	r26, 0x10	; 16
    6adc:	8c 93       	st	X, r24
    6ade:	ad c0       	rjmp	.+346    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	50 96       	adiw	r26, 0x10	; 16
    6ae4:	8c 93       	st	X, r24
    6ae6:	a9 c0       	rjmp	.+338    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6ae8:	9c 3c       	cpi	r25, 0xCC	; 204
    6aea:	21 f4       	brne	.+8      	; 0x6af4 <_ZN9CMBSender13OnReceiveByteEh+0x46>
    6aec:	83 e0       	ldi	r24, 0x03	; 3
    6aee:	50 96       	adiw	r26, 0x10	; 16
    6af0:	8c 93       	st	X, r24
    6af2:	a3 c0       	rjmp	.+326    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6af4:	81 e0       	ldi	r24, 0x01	; 1
    6af6:	50 96       	adiw	r26, 0x10	; 16
    6af8:	8c 93       	st	X, r24
    6afa:	9f c0       	rjmp	.+318    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6afc:	16 96       	adiw	r26, 0x06	; 6
    6afe:	9c 93       	st	X, r25
    6b00:	16 97       	sbiw	r26, 0x06	; 6
    6b02:	51 96       	adiw	r26, 0x11	; 17
    6b04:	1c 92       	st	X, r1
    6b06:	51 97       	sbiw	r26, 0x11	; 17
    6b08:	8f ef       	ldi	r24, 0xFF	; 255
    6b0a:	9f ef       	ldi	r25, 0xFF	; 255
    6b0c:	56 96       	adiw	r26, 0x16	; 22
    6b0e:	8d 93       	st	X+, r24
    6b10:	9c 93       	st	X, r25
    6b12:	57 97       	sbiw	r26, 0x17	; 23
    6b14:	84 e0       	ldi	r24, 0x04	; 4
    6b16:	50 96       	adiw	r26, 0x10	; 16
    6b18:	8c 93       	st	X, r24
    6b1a:	8f c0       	rjmp	.+286    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6b1c:	51 96       	adiw	r26, 0x11	; 17
    6b1e:	8c 91       	ld	r24, X
    6b20:	51 97       	sbiw	r26, 0x11	; 17
    6b22:	12 96       	adiw	r26, 0x02	; 2
    6b24:	ed 91       	ld	r30, X+
    6b26:	fc 91       	ld	r31, X
    6b28:	13 97       	sbiw	r26, 0x03	; 3
    6b2a:	e8 0f       	add	r30, r24
    6b2c:	f1 1d       	adc	r31, r1
    6b2e:	90 83       	st	Z, r25
    6b30:	51 96       	adiw	r26, 0x11	; 17
    6b32:	2c 91       	ld	r18, X
    6b34:	51 97       	sbiw	r26, 0x11	; 17
    6b36:	30 e0       	ldi	r19, 0x00	; 0
    6b38:	17 96       	adiw	r26, 0x07	; 7
    6b3a:	4d 91       	ld	r20, X+
    6b3c:	5c 91       	ld	r21, X
    6b3e:	18 97       	sbiw	r26, 0x08	; 8
    6b40:	42 17       	cp	r20, r18
    6b42:	53 07       	cpc	r21, r19
    6b44:	20 f4       	brcc	.+8      	; 0x6b4e <_ZN9CMBSender13OnReceiveByteEh+0xa0>
    6b46:	89 e0       	ldi	r24, 0x09	; 9
    6b48:	50 96       	adiw	r26, 0x10	; 16
    6b4a:	8c 93       	st	X, r24
    6b4c:	76 c0       	rjmp	.+236    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6b4e:	56 96       	adiw	r26, 0x16	; 22
    6b50:	2d 91       	ld	r18, X+
    6b52:	3c 91       	ld	r19, X
    6b54:	57 97       	sbiw	r26, 0x17	; 23
    6b56:	29 27       	eor	r18, r25
    6b58:	62 2f       	mov	r22, r18
    6b5a:	62 95       	swap	r22
    6b5c:	62 27       	eor	r22, r18
    6b5e:	06 2e       	mov	r0, r22
    6b60:	66 95       	lsr	r22
    6b62:	66 95       	lsr	r22
    6b64:	60 25       	eor	r22, r0
    6b66:	06 2e       	mov	r0, r22
    6b68:	66 95       	lsr	r22
    6b6a:	60 25       	eor	r22, r0
    6b6c:	67 70       	andi	r22, 0x07	; 7
    6b6e:	02 2e       	mov	r0, r18
    6b70:	23 2f       	mov	r18, r19
    6b72:	66 95       	lsr	r22
    6b74:	07 94       	ror	r0
    6b76:	67 95       	ror	r22
    6b78:	30 2d       	mov	r19, r0
    6b7a:	26 27       	eor	r18, r22
    6b7c:	06 94       	lsr	r0
    6b7e:	67 95       	ror	r22
    6b80:	30 25       	eor	r19, r0
    6b82:	26 27       	eor	r18, r22
    6b84:	56 96       	adiw	r26, 0x16	; 22
    6b86:	2d 93       	st	X+, r18
    6b88:	3c 93       	st	X, r19
    6b8a:	57 97       	sbiw	r26, 0x17	; 23
    6b8c:	51 96       	adiw	r26, 0x11	; 17
    6b8e:	8c 91       	ld	r24, X
    6b90:	51 97       	sbiw	r26, 0x11	; 17
    6b92:	8f 5f       	subi	r24, 0xFF	; 255
    6b94:	51 96       	adiw	r26, 0x11	; 17
    6b96:	8c 93       	st	X, r24
    6b98:	51 97       	sbiw	r26, 0x11	; 17
    6b9a:	51 96       	adiw	r26, 0x11	; 17
    6b9c:	2c 91       	ld	r18, X
    6b9e:	51 97       	sbiw	r26, 0x11	; 17
    6ba0:	30 e0       	ldi	r19, 0x00	; 0
    6ba2:	16 96       	adiw	r26, 0x06	; 6
    6ba4:	8c 91       	ld	r24, X
    6ba6:	16 97       	sbiw	r26, 0x06	; 6
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	02 97       	sbiw	r24, 0x02	; 2
    6bac:	28 17       	cp	r18, r24
    6bae:	39 07       	cpc	r19, r25
    6bb0:	09 f0       	breq	.+2      	; 0x6bb4 <_ZN9CMBSender13OnReceiveByteEh+0x106>
    6bb2:	43 c0       	rjmp	.+134    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6bb4:	85 e0       	ldi	r24, 0x05	; 5
    6bb6:	50 96       	adiw	r26, 0x10	; 16
    6bb8:	8c 93       	st	X, r24
    6bba:	3f c0       	rjmp	.+126    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6bbc:	69 2f       	mov	r22, r25
    6bbe:	70 e0       	ldi	r23, 0x00	; 0
    6bc0:	54 96       	adiw	r26, 0x14	; 20
    6bc2:	6d 93       	st	X+, r22
    6bc4:	7c 93       	st	X, r23
    6bc6:	55 97       	sbiw	r26, 0x15	; 21
    6bc8:	86 e0       	ldi	r24, 0x06	; 6
    6bca:	50 96       	adiw	r26, 0x10	; 16
    6bcc:	8c 93       	st	X, r24
    6bce:	35 c0       	rjmp	.+106    	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6bd0:	54 96       	adiw	r26, 0x14	; 20
    6bd2:	2d 91       	ld	r18, X+
    6bd4:	3c 91       	ld	r19, X
    6bd6:	55 97       	sbiw	r26, 0x15	; 21
    6bd8:	a9 01       	movw	r20, r18
    6bda:	59 2b       	or	r21, r25
    6bdc:	54 96       	adiw	r26, 0x14	; 20
    6bde:	4d 93       	st	X+, r20
    6be0:	5c 93       	st	X, r21
    6be2:	55 97       	sbiw	r26, 0x15	; 21
    6be4:	56 96       	adiw	r26, 0x16	; 22
    6be6:	2d 91       	ld	r18, X+
    6be8:	3c 91       	ld	r19, X
    6bea:	57 97       	sbiw	r26, 0x17	; 23
    6bec:	42 17       	cp	r20, r18
    6bee:	53 07       	cpc	r21, r19
    6bf0:	f1 f4       	brne	.+60     	; 0x6c2e <_ZN9CMBSender13OnReceiveByteEh+0x180>
    6bf2:	ed 01       	movw	r28, r26
    6bf4:	88 e0       	ldi	r24, 0x08	; 8
    6bf6:	88 8b       	std	Y+16, r24	; 0x10
    6bf8:	e8 81       	ld	r30, Y
    6bfa:	f9 81       	ldd	r31, Y+1	; 0x01
    6bfc:	4e 81       	ldd	r20, Y+6	; 0x06
    6bfe:	50 e0       	ldi	r21, 0x00	; 0
    6c00:	6a 81       	ldd	r22, Y+2	; 0x02
    6c02:	7b 81       	ldd	r23, Y+3	; 0x03
    6c04:	01 90       	ld	r0, Z+
    6c06:	f0 81       	ld	r31, Z
    6c08:	e0 2d       	mov	r30, r0
    6c0a:	cd 01       	movw	r24, r26
    6c0c:	19 95       	eicall
    6c0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c12:	00 97       	sbiw	r24, 0x00	; 0
    6c14:	91 f0       	breq	.+36     	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6c16:	dc 01       	movw	r26, r24
    6c18:	ed 91       	ld	r30, X+
    6c1a:	fc 91       	ld	r31, X
    6c1c:	4e 81       	ldd	r20, Y+6	; 0x06
    6c1e:	50 e0       	ldi	r21, 0x00	; 0
    6c20:	6a 81       	ldd	r22, Y+2	; 0x02
    6c22:	7b 81       	ldd	r23, Y+3	; 0x03
    6c24:	01 90       	ld	r0, Z+
    6c26:	f0 81       	ld	r31, Z
    6c28:	e0 2d       	mov	r30, r0
    6c2a:	19 95       	eicall
    6c2c:	06 c0       	rjmp	.+12     	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6c2e:	89 e0       	ldi	r24, 0x09	; 9
    6c30:	50 96       	adiw	r26, 0x10	; 16
    6c32:	8c 93       	st	X, r24
    6c34:	02 c0       	rjmp	.+4      	; 0x6c3a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6c36:	5a 96       	adiw	r26, 0x1a	; 26
    6c38:	1c 92       	st	X, r1
    6c3a:	df 91       	pop	r29
    6c3c:	cf 91       	pop	r28
    6c3e:	08 95       	ret

00006c40 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    6c40:	cf 93       	push	r28
    6c42:	df 93       	push	r29
    6c44:	ec 01       	movw	r28, r24
    6c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c48:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c4a:	dc 01       	movw	r26, r24
    6c4c:	ed 91       	ld	r30, X+
    6c4e:	fc 91       	ld	r31, X
    6c50:	02 80       	ldd	r0, Z+2	; 0x02
    6c52:	f3 81       	ldd	r31, Z+3	; 0x03
    6c54:	e0 2d       	mov	r30, r0
    6c56:	19 95       	eicall
    6c58:	68 2f       	mov	r22, r24
    6c5a:	ce 01       	movw	r24, r28
    6c5c:	0e 94 57 35 	call	0x6aae	; 0x6aae <_ZN9CMBSender13OnReceiveByteEh>
    6c60:	df 91       	pop	r29
    6c62:	cf 91       	pop	r28
    6c64:	08 95       	ret

00006c66 <_ZN9CMBSender9OnTimeoutEv>:
    6c66:	cf 93       	push	r28
    6c68:	df 93       	push	r29
    6c6a:	ec 01       	movw	r28, r24
    6c6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c70:	dc 01       	movw	r26, r24
    6c72:	ed 91       	ld	r30, X+
    6c74:	fc 91       	ld	r31, X
    6c76:	04 80       	ldd	r0, Z+4	; 0x04
    6c78:	f5 81       	ldd	r31, Z+5	; 0x05
    6c7a:	e0 2d       	mov	r30, r0
    6c7c:	19 95       	eicall
    6c7e:	88 89       	ldd	r24, Y+16	; 0x10
    6c80:	88 30       	cpi	r24, 0x08	; 8
    6c82:	11 f0       	breq	.+4      	; 0x6c88 <_ZN9CMBSender9OnTimeoutEv+0x22>
    6c84:	8a e0       	ldi	r24, 0x0A	; 10
    6c86:	88 8b       	std	Y+16, r24	; 0x10
    6c88:	df 91       	pop	r29
    6c8a:	cf 91       	pop	r28
    6c8c:	08 95       	ret

00006c8e <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    6c8e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <_ZN9CMBSender9OnTimeoutEv>
    6c92:	08 95       	ret

00006c94 <_ZN9CMBSender19StartMODBUSListenerEv>:
    6c94:	cf 93       	push	r28
    6c96:	df 93       	push	r29
    6c98:	fc 01       	movw	r30, r24
    6c9a:	11 8a       	std	Z+17, r1	; 0x11
    6c9c:	16 82       	std	Z+6, r1	; 0x06
    6c9e:	14 8a       	std	Z+20, r1	; 0x14
    6ca0:	15 8a       	std	Z+21, r1	; 0x15
    6ca2:	16 8a       	std	Z+22, r1	; 0x16
    6ca4:	17 8a       	std	Z+23, r1	; 0x17
    6ca6:	10 8a       	std	Z+16, r1	; 0x10
    6ca8:	86 85       	ldd	r24, Z+14	; 0x0e
    6caa:	97 85       	ldd	r25, Z+15	; 0x0f
    6cac:	ec 01       	movw	r28, r24
    6cae:	a8 81       	ld	r26, Y
    6cb0:	b9 81       	ldd	r27, Y+1	; 0x01
    6cb2:	62 89       	ldd	r22, Z+18	; 0x12
    6cb4:	73 89       	ldd	r23, Z+19	; 0x13
    6cb6:	12 96       	adiw	r26, 0x02	; 2
    6cb8:	ed 91       	ld	r30, X+
    6cba:	fc 91       	ld	r31, X
    6cbc:	13 97       	sbiw	r26, 0x03	; 3
    6cbe:	19 95       	eicall
    6cc0:	df 91       	pop	r29
    6cc2:	cf 91       	pop	r28
    6cc4:	08 95       	ret

00006cc6 <_ZN9CMBSender14OnTransmitByteEv>:
    6cc6:	cf 93       	push	r28
    6cc8:	df 93       	push	r29
    6cca:	ec 01       	movw	r28, r24
    6ccc:	88 8d       	ldd	r24, Y+24	; 0x18
    6cce:	84 30       	cpi	r24, 0x04	; 4
    6cd0:	38 f4       	brcc	.+14     	; 0x6ce0 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    6cd2:	82 30       	cpi	r24, 0x02	; 2
    6cd4:	b8 f5       	brcc	.+110    	; 0x6d44 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    6cd6:	88 23       	and	r24, r24
    6cd8:	31 f0       	breq	.+12     	; 0x6ce6 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    6cda:	81 30       	cpi	r24, 0x01	; 1
    6cdc:	d1 f0       	breq	.+52     	; 0x6d12 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    6cde:	39 c0       	rjmp	.+114    	; 0x6d52 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6ce0:	85 30       	cpi	r24, 0x05	; 5
    6ce2:	81 f1       	breq	.+96     	; 0x6d44 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    6ce4:	36 c0       	rjmp	.+108    	; 0x6d52 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6ce6:	81 e0       	ldi	r24, 0x01	; 1
    6ce8:	88 8f       	std	Y+24, r24	; 0x18
    6cea:	19 8e       	std	Y+25, r1	; 0x19
    6cec:	8c 85       	ldd	r24, Y+12	; 0x0c
    6cee:	9d 85       	ldd	r25, Y+13	; 0x0d
    6cf0:	29 8d       	ldd	r18, Y+25	; 0x19
    6cf2:	dc 01       	movw	r26, r24
    6cf4:	ed 91       	ld	r30, X+
    6cf6:	fc 91       	ld	r31, X
    6cf8:	ac 81       	ldd	r26, Y+4	; 0x04
    6cfa:	bd 81       	ldd	r27, Y+5	; 0x05
    6cfc:	a2 0f       	add	r26, r18
    6cfe:	b1 1d       	adc	r27, r1
    6d00:	04 80       	ldd	r0, Z+4	; 0x04
    6d02:	f5 81       	ldd	r31, Z+5	; 0x05
    6d04:	e0 2d       	mov	r30, r0
    6d06:	6c 91       	ld	r22, X
    6d08:	19 95       	eicall
    6d0a:	89 8d       	ldd	r24, Y+25	; 0x19
    6d0c:	8f 5f       	subi	r24, 0xFF	; 255
    6d0e:	89 8f       	std	Y+25, r24	; 0x19
    6d10:	20 c0       	rjmp	.+64     	; 0x6d52 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6d12:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d14:	9d 85       	ldd	r25, Y+13	; 0x0d
    6d16:	29 8d       	ldd	r18, Y+25	; 0x19
    6d18:	dc 01       	movw	r26, r24
    6d1a:	ed 91       	ld	r30, X+
    6d1c:	fc 91       	ld	r31, X
    6d1e:	ac 81       	ldd	r26, Y+4	; 0x04
    6d20:	bd 81       	ldd	r27, Y+5	; 0x05
    6d22:	a2 0f       	add	r26, r18
    6d24:	b1 1d       	adc	r27, r1
    6d26:	04 80       	ldd	r0, Z+4	; 0x04
    6d28:	f5 81       	ldd	r31, Z+5	; 0x05
    6d2a:	e0 2d       	mov	r30, r0
    6d2c:	6c 91       	ld	r22, X
    6d2e:	19 95       	eicall
    6d30:	89 8d       	ldd	r24, Y+25	; 0x19
    6d32:	8f 5f       	subi	r24, 0xFF	; 255
    6d34:	89 8f       	std	Y+25, r24	; 0x19
    6d36:	99 8d       	ldd	r25, Y+25	; 0x19
    6d38:	89 85       	ldd	r24, Y+9	; 0x09
    6d3a:	98 13       	cpse	r25, r24
    6d3c:	0a c0       	rjmp	.+20     	; 0x6d52 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6d3e:	83 e0       	ldi	r24, 0x03	; 3
    6d40:	88 8f       	std	Y+24, r24	; 0x18
    6d42:	07 c0       	rjmp	.+14     	; 0x6d52 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6d44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6d46:	88 23       	and	r24, r24
    6d48:	19 f0       	breq	.+6      	; 0x6d50 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    6d4a:	ce 01       	movw	r24, r28
    6d4c:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <_ZN9CMBSender19StartMODBUSListenerEv>
    6d50:	1a 8e       	std	Y+26, r1	; 0x1a
    6d52:	df 91       	pop	r29
    6d54:	cf 91       	pop	r28
    6d56:	08 95       	ret

00006d58 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    6d58:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN9CMBSender14OnTransmitByteEv>
    6d5c:	08 95       	ret

00006d5e <_ZN9CMBSender18WaitMODBUSListenerEv>:
    6d5e:	fc 01       	movw	r30, r24
    6d60:	06 c0       	rjmp	.+12     	; 0x6d6e <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    6d62:	80 89       	ldd	r24, Z+16	; 0x10
    6d64:	89 30       	cpi	r24, 0x09	; 9
    6d66:	41 f0       	breq	.+16     	; 0x6d78 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    6d68:	80 89       	ldd	r24, Z+16	; 0x10
    6d6a:	8a 30       	cpi	r24, 0x0A	; 10
    6d6c:	39 f0       	breq	.+14     	; 0x6d7c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    6d6e:	80 89       	ldd	r24, Z+16	; 0x10
    6d70:	88 30       	cpi	r24, 0x08	; 8
    6d72:	b9 f7       	brne	.-18     	; 0x6d62 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    6d74:	81 e0       	ldi	r24, 0x01	; 1
    6d76:	08 95       	ret
    6d78:	82 e0       	ldi	r24, 0x02	; 2
    6d7a:	08 95       	ret
    6d7c:	83 e0       	ldi	r24, 0x03	; 3
    6d7e:	08 95       	ret

00006d80 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    6d80:	cf 93       	push	r28
    6d82:	df 93       	push	r29
    6d84:	ec 01       	movw	r28, r24
    6d86:	19 8e       	std	Y+25, r1	; 0x19
    6d88:	18 8e       	std	Y+24, r1	; 0x18
    6d8a:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN9CMBSender14OnTransmitByteEv>
    6d8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d90:	9f 85       	ldd	r25, Y+15	; 0x0f
    6d92:	dc 01       	movw	r26, r24
    6d94:	ed 91       	ld	r30, X+
    6d96:	fc 91       	ld	r31, X
    6d98:	6a 89       	ldd	r22, Y+18	; 0x12
    6d9a:	7b 89       	ldd	r23, Y+19	; 0x13
    6d9c:	02 80       	ldd	r0, Z+2	; 0x02
    6d9e:	f3 81       	ldd	r31, Z+3	; 0x03
    6da0:	e0 2d       	mov	r30, r0
    6da2:	19 95       	eicall
    6da4:	df 91       	pop	r29
    6da6:	cf 91       	pop	r28
    6da8:	08 95       	ret

00006daa <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    6daa:	cf 93       	push	r28
    6dac:	df 93       	push	r29
    6dae:	ec 01       	movw	r28, r24
    6db0:	e8 81       	ld	r30, Y
    6db2:	f9 81       	ldd	r31, Y+1	; 0x01
    6db4:	02 84       	ldd	r0, Z+10	; 0x0a
    6db6:	f3 85       	ldd	r31, Z+11	; 0x0b
    6db8:	e0 2d       	mov	r30, r0
    6dba:	19 95       	eicall
    6dbc:	ce 01       	movw	r24, r28
    6dbe:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6dc2:	df 91       	pop	r29
    6dc4:	cf 91       	pop	r28
    6dc6:	08 95       	ret

00006dc8 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    6dc8:	cf 93       	push	r28
    6dca:	df 93       	push	r29
    6dcc:	ec 01       	movw	r28, r24
    6dce:	e8 81       	ld	r30, Y
    6dd0:	f9 81       	ldd	r31, Y+1	; 0x01
    6dd2:	06 84       	ldd	r0, Z+14	; 0x0e
    6dd4:	f7 85       	ldd	r31, Z+15	; 0x0f
    6dd6:	e0 2d       	mov	r30, r0
    6dd8:	19 95       	eicall
    6dda:	ce 01       	movw	r24, r28
    6ddc:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6de0:	df 91       	pop	r29
    6de2:	cf 91       	pop	r28
    6de4:	08 95       	ret

00006de6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    6de6:	cf 93       	push	r28
    6de8:	df 93       	push	r29
    6dea:	ec 01       	movw	r28, r24
    6dec:	e8 81       	ld	r30, Y
    6dee:	f9 81       	ldd	r31, Y+1	; 0x01
    6df0:	04 84       	ldd	r0, Z+12	; 0x0c
    6df2:	f5 85       	ldd	r31, Z+13	; 0x0d
    6df4:	e0 2d       	mov	r30, r0
    6df6:	19 95       	eicall
    6df8:	ce 01       	movw	r24, r28
    6dfa:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6dfe:	df 91       	pop	r29
    6e00:	cf 91       	pop	r28
    6e02:	08 95       	ret

00006e04 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    6e04:	cf 93       	push	r28
    6e06:	df 93       	push	r29
    6e08:	ec 01       	movw	r28, r24
    6e0a:	e8 81       	ld	r30, Y
    6e0c:	f9 81       	ldd	r31, Y+1	; 0x01
    6e0e:	50 e0       	ldi	r21, 0x00	; 0
    6e10:	00 88       	ldd	r0, Z+16	; 0x10
    6e12:	f1 89       	ldd	r31, Z+17	; 0x11
    6e14:	e0 2d       	mov	r30, r0
    6e16:	19 95       	eicall
    6e18:	ce 01       	movw	r24, r28
    6e1a:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6e1e:	df 91       	pop	r29
    6e20:	cf 91       	pop	r28
    6e22:	08 95       	ret

00006e24 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    6e24:	fc 01       	movw	r30, r24
    6e26:	06 c0       	rjmp	.+12     	; 0x6e34 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    6e28:	80 8d       	ldd	r24, Z+24	; 0x18
    6e2a:	84 30       	cpi	r24, 0x04	; 4
    6e2c:	41 f0       	breq	.+16     	; 0x6e3e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    6e2e:	80 8d       	ldd	r24, Z+24	; 0x18
    6e30:	85 30       	cpi	r24, 0x05	; 5
    6e32:	39 f0       	breq	.+14     	; 0x6e42 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    6e34:	80 8d       	ldd	r24, Z+24	; 0x18
    6e36:	83 30       	cpi	r24, 0x03	; 3
    6e38:	b9 f7       	brne	.-18     	; 0x6e28 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    6e3a:	81 e0       	ldi	r24, 0x01	; 1
    6e3c:	08 95       	ret
    6e3e:	82 e0       	ldi	r24, 0x02	; 2
    6e40:	08 95       	ret
    6e42:	83 e0       	ldi	r24, 0x03	; 3
    6e44:	08 95       	ret

00006e46 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    6e46:	21 e0       	ldi	r18, 0x01	; 1
    6e48:	fc 01       	movw	r30, r24
    6e4a:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    6e4c:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    6e50:	08 95       	ret

00006e52 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    6e52:	21 e0       	ldi	r18, 0x01	; 1
    6e54:	fc 01       	movw	r30, r24
    6e56:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    6e58:	0e 94 02 37 	call	0x6e04	; 0x6e04 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    6e5c:	08 95       	ret

00006e5e <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    6e5e:	0f 93       	push	r16
    6e60:	1f 93       	push	r17
    6e62:	cf 93       	push	r28
    6e64:	df 93       	push	r29
    6e66:	8c 01       	movw	r16, r24
    6e68:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    6e6a:	98 81       	ld	r25, Y
    6e6c:	91 38       	cpi	r25, 0x81	; 129
    6e6e:	69 f4       	brne	.+26     	; 0x6e8a <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    6e70:	d8 01       	movw	r26, r16
    6e72:	ed 91       	ld	r30, X+
    6e74:	fc 91       	ld	r31, X
    6e76:	04 80       	ldd	r0, Z+4	; 0x04
    6e78:	f5 81       	ldd	r31, Z+5	; 0x05
    6e7a:	e0 2d       	mov	r30, r0
    6e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    6e7e:	ab 01       	movw	r20, r22
    6e80:	4d 5f       	subi	r20, 0xFD	; 253
    6e82:	5f 4f       	sbci	r21, 0xFF	; 255
    6e84:	69 81       	ldd	r22, Y+1	; 0x01
    6e86:	c8 01       	movw	r24, r16
    6e88:	19 95       	eicall
	}
	if (data[0] == 0x83)
    6e8a:	98 81       	ld	r25, Y
    6e8c:	93 38       	cpi	r25, 0x83	; 131
    6e8e:	99 f4       	brne	.+38     	; 0x6eb6 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    6e90:	d8 01       	movw	r26, r16
    6e92:	ed 91       	ld	r30, X+
    6e94:	fc 91       	ld	r31, X
    6e96:	2b 81       	ldd	r18, Y+3	; 0x03
    6e98:	30 e0       	ldi	r19, 0x00	; 0
    6e9a:	ae 01       	movw	r20, r28
    6e9c:	4c 5f       	subi	r20, 0xFC	; 252
    6e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea0:	69 81       	ldd	r22, Y+1	; 0x01
    6ea2:	70 e0       	ldi	r23, 0x00	; 0
    6ea4:	76 2f       	mov	r23, r22
    6ea6:	66 27       	eor	r22, r22
    6ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    6eaa:	68 2b       	or	r22, r24
    6eac:	02 80       	ldd	r0, Z+2	; 0x02
    6eae:	f3 81       	ldd	r31, Z+3	; 0x03
    6eb0:	e0 2d       	mov	r30, r0
    6eb2:	c8 01       	movw	r24, r16
    6eb4:	19 95       	eicall
	}
}
    6eb6:	df 91       	pop	r29
    6eb8:	cf 91       	pop	r28
    6eba:	1f 91       	pop	r17
    6ebc:	0f 91       	pop	r16
    6ebe:	08 95       	ret

00006ec0 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    6ec0:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <_ZN9CMBSender18ProcessTransactionEPhj>
    6ec4:	08 95       	ret

00006ec6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    6ec6:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    6ec8:	e0 e6       	ldi	r30, 0x60	; 96
    6eca:	f6 e0       	ldi	r31, 0x06	; 6
    6ecc:	88 e0       	ldi	r24, 0x08	; 8
    6ece:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    6ed0:	84 e0       	ldi	r24, 0x04	; 4
    6ed2:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    6ed4:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    6ed6:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    6ed8:	e0 ea       	ldi	r30, 0xA0	; 160
    6eda:	f9 e0       	ldi	r31, 0x09	; 9
    6edc:	84 e1       	ldi	r24, 0x14	; 20
    6ede:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    6ee0:	88 e1       	ldi	r24, 0x18	; 24
    6ee2:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    6ee4:	84 81       	ldd	r24, Z+4	; 0x04
    6ee6:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    6ee8:	41 30       	cpi	r20, 0x01	; 1
    6eea:	19 f0       	breq	.+6      	; 0x6ef2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    6eec:	42 30       	cpi	r20, 0x02	; 2
    6eee:	19 f0       	breq	.+6      	; 0x6ef6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    6ef0:	04 c0       	rjmp	.+8      	; 0x6efa <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    6ef2:	80 e2       	ldi	r24, 0x20	; 32
    6ef4:	03 c0       	rjmp	.+6      	; 0x6efc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    6ef6:	80 e3       	ldi	r24, 0x30	; 48
		break;
    6ef8:	01 c0       	rjmp	.+2      	; 0x6efc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    6efa:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    6efc:	22 23       	and	r18, r18
    6efe:	19 f0       	breq	.+6      	; 0x6f06 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    6f00:	21 30       	cpi	r18, 0x01	; 1
    6f02:	19 f0       	breq	.+6      	; 0x6f0a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    6f04:	03 c0       	rjmp	.+6      	; 0x6f0c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    6f06:	87 7f       	andi	r24, 0xF7	; 247
		break;
    6f08:	01 c0       	rjmp	.+2      	; 0x6f0c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    6f0a:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    6f0c:	01 11       	cpse	r16, r1
    6f0e:	02 c0       	rjmp	.+4      	; 0x6f14 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    6f10:	93 e4       	ldi	r25, 0x43	; 67
    6f12:	01 c0       	rjmp	.+2      	; 0x6f16 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    6f14:	93 e0       	ldi	r25, 0x03	; 3
    6f16:	89 2b       	or	r24, r25
    6f18:	e0 ea       	ldi	r30, 0xA0	; 160
    6f1a:	f9 e0       	ldi	r31, 0x09	; 9
    6f1c:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    6f1e:	70 e0       	ldi	r23, 0x00	; 0
    6f20:	db 01       	movw	r26, r22
    6f22:	a6 5a       	subi	r26, 0xA6	; 166
    6f24:	be 4d       	sbci	r27, 0xDE	; 222
    6f26:	8c 91       	ld	r24, X
    6f28:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    6f2a:	db 01       	movw	r26, r22
    6f2c:	a6 5c       	subi	r26, 0xC6	; 198
    6f2e:	be 4d       	sbci	r27, 0xDE	; 222
    6f30:	8c 91       	ld	r24, X
    6f32:	82 95       	swap	r24
    6f34:	80 7f       	andi	r24, 0xF0	; 240
    6f36:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    6f38:	0f 91       	pop	r16
    6f3a:	08 95       	ret

00006f3c <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    6f3c:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
    6f40:	08 95       	ret

00006f42 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    6f42:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    6f46:	08 95       	ret

00006f48 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    6f48:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6f4c:	86 fb       	bst	r24, 6
    6f4e:	88 27       	eor	r24, r24
    6f50:	80 f9       	bld	r24, 0
}
    6f52:	91 e0       	ldi	r25, 0x01	; 1
    6f54:	89 27       	eor	r24, r25
    6f56:	08 95       	ret

00006f58 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    6f58:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6f5c:	80 95       	com	r24
}
    6f5e:	88 1f       	adc	r24, r24
    6f60:	88 27       	eor	r24, r24
    6f62:	88 1f       	adc	r24, r24
    6f64:	08 95       	ret

00006f66 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    6f66:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6f6a:	85 fb       	bst	r24, 5
    6f6c:	88 27       	eor	r24, r24
    6f6e:	80 f9       	bld	r24, 0
}
    6f70:	91 e0       	ldi	r25, 0x01	; 1
    6f72:	89 27       	eor	r24, r25
    6f74:	08 95       	ret

00006f76 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    6f76:	60 93 6c 24 	sts	0x246C, r22	; 0x80246c <InterruptSenderTable+0xb0>
    6f7a:	70 93 6d 24 	sts	0x246D, r23	; 0x80246d <InterruptSenderTable+0xb1>
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    6f7e:	40 93 76 23 	sts	0x2376, r20	; 0x802376 <InterruptFuncTable+0xb0>
    6f82:	50 93 77 23 	sts	0x2377, r21	; 0x802377 <InterruptFuncTable+0xb1>
    6f86:	08 95       	ret

00006f88 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    6f88:	60 93 70 24 	sts	0x2470, r22	; 0x802470 <InterruptSenderTable+0xb4>
    6f8c:	70 93 71 24 	sts	0x2471, r23	; 0x802471 <InterruptSenderTable+0xb5>
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    6f90:	40 93 7a 23 	sts	0x237A, r20	; 0x80237a <InterruptFuncTable+0xb4>
    6f94:	50 93 7b 23 	sts	0x237B, r21	; 0x80237b <InterruptFuncTable+0xb5>
    6f98:	08 95       	ret

00006f9a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    6f9a:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    6f9c:	8b e6       	ldi	r24, 0x6B	; 107
    6f9e:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    6fa0:	80 ea       	ldi	r24, 0xA0	; 160
    6fa2:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    6fa4:	89 e0       	ldi	r24, 0x09	; 9
    6fa6:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    6fa8:	12 86       	std	Z+10, r1	; 0x0a
    6faa:	08 95       	ret

00006fac <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    6fac:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    6fae:	8c e6       	ldi	r24, 0x6C	; 108
    6fb0:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    6fb2:	80 ea       	ldi	r24, 0xA0	; 160
    6fb4:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    6fb6:	89 e0       	ldi	r24, 0x09	; 9
    6fb8:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    6fba:	16 86       	std	Z+14, r1	; 0x0e
    6fbc:	08 95       	ret

00006fbe <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    6fbe:	cf 93       	push	r28
    6fc0:	df 93       	push	r29
    6fc2:	ec 01       	movw	r28, r24
    6fc4:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_ZN6CUSARTC1Ev>
    6fc8:	84 e0       	ldi	r24, 0x04	; 4
    6fca:	92 e2       	ldi	r25, 0x22	; 34
    6fcc:	88 83       	st	Y, r24
    6fce:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    6fd0:	df 91       	pop	r29
    6fd2:	cf 91       	pop	r28
    6fd4:	08 95       	ret

00006fd6 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    6fd6:	24 e0       	ldi	r18, 0x04	; 4
    6fd8:	32 e2       	ldi	r19, 0x22	; 34
    6fda:	fc 01       	movw	r30, r24
    6fdc:	20 83       	st	Z, r18
    6fde:	31 83       	std	Z+1, r19	; 0x01
    6fe0:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_ZN6CUSARTD1Ev>
    6fe4:	08 95       	ret

00006fe6 <_Z18onewire_crc_updatehh>:

#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
    6fe6:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t p = 8; p; p--) {
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
    6fe8:	3c e8       	ldi	r19, 0x8C	; 140
    6fea:	26 2f       	mov	r18, r22
    6fec:	28 27       	eor	r18, r24
    6fee:	20 ff       	sbrs	r18, 0
    6ff0:	03 c0       	rjmp	.+6      	; 0x6ff8 <_Z18onewire_crc_updatehh+0x12>
    6ff2:	86 95       	lsr	r24
    6ff4:	83 27       	eor	r24, r19
    6ff6:	01 c0       	rjmp	.+2      	; 0x6ffa <_Z18onewire_crc_updatehh+0x14>
    6ff8:	86 95       	lsr	r24
		b >>= 1;
    6ffa:	66 95       	lsr	r22
    6ffc:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
	for (uint8_t p = 8; p; p--) {
    6ffe:	a9 f7       	brne	.-22     	; 0x6fea <_Z18onewire_crc_updatehh+0x4>
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
		b >>= 1;
	}
	return crc;
}
    7000:	08 95       	ret

00007002 <_ZN8CDS18B20C1Ev>:

// default constructor
CDS18B20::CDS18B20()
    7002:	08 95       	ret

00007004 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    7004:	08 95       	ret

00007006 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    7006:	e0 e6       	ldi	r30, 0x60	; 96
    7008:	f6 e0       	ldi	r31, 0x06	; 6
    700a:	80 e8       	ldi	r24, 0x80	; 128
    700c:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    700e:	a7 e2       	ldi	r26, 0x27	; 39
    7010:	bf e0       	ldi	r27, 0x0F	; 15
    7012:	11 97       	sbiw	r26, 0x01	; 1
    7014:	f1 f7       	brne	.-4      	; 0x7012 <_ZN8CDS18B207w1_findEv+0xc>
    7016:	00 c0       	rjmp	.+0      	; 0x7018 <_ZN8CDS18B207w1_findEv+0x12>
    7018:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    701a:	82 83       	std	Z+2, r24	; 0x02
    701c:	87 e0       	ldi	r24, 0x07	; 7
    701e:	92 e0       	ldi	r25, 0x02	; 2
    7020:	01 97       	sbiw	r24, 0x01	; 1
    7022:	f1 f7       	brne	.-4      	; 0x7020 <_ZN8CDS18B207w1_findEv+0x1a>
    7024:	00 c0       	rjmp	.+0      	; 0x7026 <_ZN8CDS18B207w1_findEv+0x20>
    7026:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    7028:	80 85       	ldd	r24, Z+8	; 0x08
    702a:	af e1       	ldi	r26, 0x1F	; 31
    702c:	bd e0       	ldi	r27, 0x0D	; 13
    702e:	11 97       	sbiw	r26, 0x01	; 1
    7030:	f1 f7       	brne	.-4      	; 0x702e <_ZN8CDS18B207w1_findEv+0x28>
    7032:	00 c0       	rjmp	.+0      	; 0x7034 <_ZN8CDS18B207w1_findEv+0x2e>
    7034:	00 00       	nop
    7036:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    7038:	88 1f       	adc	r24, r24
    703a:	88 27       	eor	r24, r24
    703c:	88 1f       	adc	r24, r24
    703e:	08 95       	ret

00007040 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    7040:	cf 93       	push	r28
    7042:	df 93       	push	r29
    7044:	80 e0       	ldi	r24, 0x00	; 0
    7046:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    7048:	c1 e0       	ldi	r28, 0x01	; 1
    704a:	d0 e0       	ldi	r29, 0x00	; 0
    704c:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    704e:	e0 e6       	ldi	r30, 0x60	; 96
    7050:	f6 e0       	ldi	r31, 0x06	; 6
    7052:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    7054:	9e 01       	movw	r18, r28
    7056:	08 2e       	mov	r0, r24
    7058:	02 c0       	rjmp	.+4      	; 0x705e <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    705a:	22 0f       	add	r18, r18
    705c:	33 1f       	adc	r19, r19
    705e:	0a 94       	dec	r0
    7060:	e2 f7       	brpl	.-8      	; 0x705a <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    7062:	d9 01       	movw	r26, r18
    7064:	a6 23       	and	r26, r22
    7066:	b7 23       	and	r27, r23
    7068:	2a 17       	cp	r18, r26
    706a:	3b 07       	cpc	r19, r27
    706c:	69 f4       	brne	.+26     	; 0x7088 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    706e:	41 83       	std	Z+1, r20	; 0x01
    7070:	25 e1       	ldi	r18, 0x15	; 21
    7072:	2a 95       	dec	r18
    7074:	f1 f7       	brne	.-4      	; 0x7072 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    7076:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    7078:	42 83       	std	Z+2, r20	; 0x02
    707a:	a7 e0       	ldi	r26, 0x07	; 7
    707c:	b2 e0       	ldi	r27, 0x02	; 2
    707e:	11 97       	sbiw	r26, 0x01	; 1
    7080:	f1 f7       	brne	.-4      	; 0x707e <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    7082:	00 c0       	rjmp	.+0      	; 0x7084 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    7084:	00 00       	nop
    7086:	0c c0       	rjmp	.+24     	; 0x70a0 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    7088:	41 83       	std	Z+1, r20	; 0x01
    708a:	a7 e0       	ldi	r26, 0x07	; 7
    708c:	b2 e0       	ldi	r27, 0x02	; 2
    708e:	11 97       	sbiw	r26, 0x01	; 1
    7090:	f1 f7       	brne	.-4      	; 0x708e <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    7092:	00 c0       	rjmp	.+0      	; 0x7094 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    7094:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    7096:	42 83       	std	Z+2, r20	; 0x02
    7098:	b5 e3       	ldi	r27, 0x35	; 53
    709a:	ba 95       	dec	r27
    709c:	f1 f7       	brne	.-4      	; 0x709a <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    709e:	00 00       	nop
    70a0:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    70a2:	88 30       	cpi	r24, 0x08	; 8
    70a4:	91 05       	cpc	r25, r1
    70a6:	b1 f6       	brne	.-84     	; 0x7054 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    70a8:	df 91       	pop	r29
    70aa:	cf 91       	pop	r28
    70ac:	08 95       	ret

000070ae <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    70ae:	20 e0       	ldi	r18, 0x00	; 0
    70b0:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    70b2:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    70b4:	e0 e6       	ldi	r30, 0x60	; 96
    70b6:	f6 e0       	ldi	r31, 0x06	; 6
    70b8:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    70ba:	61 e0       	ldi	r22, 0x01	; 1
    70bc:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    70be:	91 83       	std	Z+1, r25	; 0x01
    70c0:	45 e1       	ldi	r20, 0x15	; 21
    70c2:	4a 95       	dec	r20
    70c4:	f1 f7       	brne	.-4      	; 0x70c2 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    70c6:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    70c8:	92 83       	std	Z+2, r25	; 0x02
    70ca:	aa e6       	ldi	r26, 0x6A	; 106
    70cc:	aa 95       	dec	r26
    70ce:	f1 f7       	brne	.-4      	; 0x70cc <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    70d0:	00 c0       	rjmp	.+0      	; 0x70d2 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    70d2:	40 85       	ldd	r20, Z+8	; 0x08
    70d4:	44 23       	and	r20, r20
    70d6:	54 f0       	brlt	.+20     	; 0x70ec <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    70d8:	ab 01       	movw	r20, r22
    70da:	02 2e       	mov	r0, r18
    70dc:	02 c0       	rjmp	.+4      	; 0x70e2 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    70de:	44 0f       	add	r20, r20
    70e0:	55 1f       	adc	r21, r21
    70e2:	0a 94       	dec	r0
    70e4:	e2 f7       	brpl	.-8      	; 0x70de <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    70e6:	40 95       	com	r20
    70e8:	84 23       	and	r24, r20
    70ea:	08 c0       	rjmp	.+16     	; 0x70fc <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    70ec:	ab 01       	movw	r20, r22
    70ee:	02 2e       	mov	r0, r18
    70f0:	02 c0       	rjmp	.+4      	; 0x70f6 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    70f2:	44 0f       	add	r20, r20
    70f4:	55 1f       	adc	r21, r21
    70f6:	0a 94       	dec	r0
    70f8:	e2 f7       	brpl	.-8      	; 0x70f2 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    70fa:	84 2b       	or	r24, r20
    70fc:	af e8       	ldi	r26, 0x8F	; 143
    70fe:	b1 e0       	ldi	r27, 0x01	; 1
    7100:	11 97       	sbiw	r26, 0x01	; 1
    7102:	f1 f7       	brne	.-4      	; 0x7100 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    7104:	00 c0       	rjmp	.+0      	; 0x7106 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    7106:	00 00       	nop
    7108:	2f 5f       	subi	r18, 0xFF	; 255
    710a:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    710c:	28 30       	cpi	r18, 0x08	; 8
    710e:	31 05       	cpc	r19, r1
    7110:	b1 f6       	brne	.-84     	; 0x70be <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    7112:	08 95       	ret

00007114 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    7114:	af 92       	push	r10
    7116:	bf 92       	push	r11
    7118:	df 92       	push	r13
    711a:	ef 92       	push	r14
    711c:	ff 92       	push	r15
    711e:	0f 93       	push	r16
    7120:	1f 93       	push	r17
    7122:	cf 93       	push	r28
    7124:	df 93       	push	r29
    7126:	cd b7       	in	r28, 0x3d	; 61
    7128:	de b7       	in	r29, 0x3e	; 62
    712a:	29 97       	sbiw	r28, 0x09	; 9
    712c:	cd bf       	out	0x3d, r28	; 61
    712e:	de bf       	out	0x3e, r29	; 62
    7130:	8c 01       	movw	r16, r24
	unsigned char data[9];
	int temp = 0;
	
	if (req)
    7132:	fc 01       	movw	r30, r24
    7134:	82 81       	ldd	r24, Z+2	; 0x02
    7136:	88 23       	and	r24, r24
    7138:	a1 f0       	breq	.+40     	; 0x7162 <_ZN8CDS18B2010temp_18b20Ev+0x4e>
	{
		if(w1_find())
    713a:	c8 01       	movw	r24, r16
    713c:	0e 94 03 38 	call	0x7006	; 0x7006 <_ZN8CDS18B207w1_findEv>
    7140:	88 23       	and	r24, r24
    7142:	61 f0       	breq	.+24     	; 0x715c <_ZN8CDS18B2010temp_18b20Ev+0x48>
		{
			w1_sendcmd(0xcc);	//skip ROM
    7144:	6c ec       	ldi	r22, 0xCC	; 204
    7146:	c8 01       	movw	r24, r16
    7148:	0e 94 20 38 	call	0x7040	; 0x7040 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    714c:	64 e4       	ldi	r22, 0x44	; 68
    714e:	c8 01       	movw	r24, r16
    7150:	0e 94 20 38 	call	0x7040	; 0x7040 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    7154:	81 e0       	ldi	r24, 0x01	; 1
    7156:	f8 01       	movw	r30, r16
    7158:	83 83       	std	Z+3, r24	; 0x03
    715a:	3f c0       	rjmp	.+126    	; 0x71da <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		}
		else
			find = false;
    715c:	f8 01       	movw	r30, r16
    715e:	13 82       	std	Z+3, r1	; 0x03
    7160:	3c c0       	rjmp	.+120    	; 0x71da <_ZN8CDS18B2010temp_18b20Ev+0xc6>
	}
	else
	{
		if (find)
    7162:	f8 01       	movw	r30, r16
    7164:	83 81       	ldd	r24, Z+3	; 0x03
    7166:	88 23       	and	r24, r24
    7168:	c1 f1       	breq	.+112    	; 0x71da <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		{
			w1_find();
    716a:	c8 01       	movw	r24, r16
    716c:	0e 94 03 38 	call	0x7006	; 0x7006 <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    7170:	6c ec       	ldi	r22, 0xCC	; 204
    7172:	c8 01       	movw	r24, r16
    7174:	0e 94 20 38 	call	0x7040	; 0x7040 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    7178:	6e eb       	ldi	r22, 0xBE	; 190
    717a:	c8 01       	movw	r24, r16
    717c:	0e 94 20 38 	call	0x7040	; 0x7040 <_ZN8CDS18B2010w1_sendcmdEh>
    7180:	ce 01       	movw	r24, r28
    7182:	01 96       	adiw	r24, 0x01	; 1
    7184:	7c 01       	movw	r14, r24
    7186:	5e 01       	movw	r10, r28
    7188:	9a e0       	ldi	r25, 0x0A	; 10
    718a:	a9 0e       	add	r10, r25
    718c:	b1 1c       	adc	r11, r1
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
    718e:	d1 2c       	mov	r13, r1
			for (int i = 0; i < 9; i++)
			{
				data[i] = w1_receive_byte();
    7190:	c8 01       	movw	r24, r16
    7192:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN8CDS18B2015w1_receive_byteEv>
    7196:	68 2f       	mov	r22, r24
    7198:	f7 01       	movw	r30, r14
    719a:	81 93       	st	Z+, r24
    719c:	7f 01       	movw	r14, r30
				crc = onewire_crc_update(crc, data[i]);
    719e:	8d 2d       	mov	r24, r13
    71a0:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_Z18onewire_crc_updatehh>
    71a4:	d8 2e       	mov	r13, r24
			w1_sendcmd(0xcc);
			w1_sendcmd(0xbe);	//read temperature
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
			for (int i = 0; i < 9; i++)
    71a6:	ea 14       	cp	r14, r10
    71a8:	fb 04       	cpc	r15, r11
    71aa:	91 f7       	brne	.-28     	; 0x7190 <_ZN8CDS18B2010temp_18b20Ev+0x7c>
			{
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
    71ac:	8a 81       	ldd	r24, Y+2	; 0x02
			temp = temp<<8;
			temp |= data[0];
    71ae:	69 81       	ldd	r22, Y+1	; 0x01
			
			temp *= 0.625;
			
			if (crc == 0)
    71b0:	d1 10       	cpse	r13, r1
    71b2:	13 c0       	rjmp	.+38     	; 0x71da <_ZN8CDS18B2010temp_18b20Ev+0xc6>
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
			temp = temp<<8;
    71b4:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    71b6:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    71b8:	07 2e       	mov	r0, r23
    71ba:	00 0c       	add	r0, r0
    71bc:	88 0b       	sbc	r24, r24
    71be:	99 0b       	sbc	r25, r25
    71c0:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__floatsisf>
    71c4:	20 e0       	ldi	r18, 0x00	; 0
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	40 e2       	ldi	r20, 0x20	; 32
    71ca:	5f e3       	ldi	r21, 0x3F	; 63
    71cc:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <__mulsf3>
    71d0:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <__fixsfsi>
    71d4:	f8 01       	movw	r30, r16
    71d6:	60 83       	st	Z, r22
    71d8:	71 83       	std	Z+1, r23	; 0x01
			if (crc == 0)
				temperature = temp;
		}
	}
	
	req = !req;
    71da:	f8 01       	movw	r30, r16
    71dc:	92 81       	ldd	r25, Z+2	; 0x02
    71de:	81 e0       	ldi	r24, 0x01	; 1
    71e0:	89 27       	eor	r24, r25
    71e2:	82 83       	std	Z+2, r24	; 0x02
	
	return temperature;
}
    71e4:	80 81       	ld	r24, Z
    71e6:	91 81       	ldd	r25, Z+1	; 0x01
    71e8:	29 96       	adiw	r28, 0x09	; 9
    71ea:	cd bf       	out	0x3d, r28	; 61
    71ec:	de bf       	out	0x3e, r29	; 62
    71ee:	df 91       	pop	r29
    71f0:	cf 91       	pop	r28
    71f2:	1f 91       	pop	r17
    71f4:	0f 91       	pop	r16
    71f6:	ff 90       	pop	r15
    71f8:	ef 90       	pop	r14
    71fa:	df 90       	pop	r13
    71fc:	bf 90       	pop	r11
    71fe:	af 90       	pop	r10
    7200:	08 95       	ret

00007202 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    7202:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    7204:	a0 e6       	ldi	r26, 0x60	; 96
    7206:	b6 e0       	ldi	r27, 0x06	; 6
    7208:	80 e8       	ldi	r24, 0x80	; 128
    720a:	16 96       	adiw	r26, 0x06	; 6
    720c:	8c 93       	st	X, r24
    720e:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    7210:	57 96       	adiw	r26, 0x17	; 23
    7212:	1c 92       	st	X, r1
	
	temperature = 0;
    7214:	10 82       	st	Z, r1
    7216:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    7218:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    721a:	81 e0       	ldi	r24, 0x01	; 1
    721c:	82 83       	std	Z+2, r24	; 0x02
    721e:	08 95       	ret

00007220 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    7220:	08 95       	ret

00007222 <_ZN11CLaserBoardD1Ev>:
    7222:	08 95       	ret

00007224 <_ZN11CLaserBoard12InitializeIOEv>:
    7224:	cf 93       	push	r28
    7226:	df 93       	push	r29
    7228:	ec 01       	movw	r28, r24
    722a:	e0 e4       	ldi	r30, 0x40	; 64
    722c:	f6 e0       	ldi	r31, 0x06	; 6
    722e:	11 82       	std	Z+1, r1	; 0x01
    7230:	98 ea       	ldi	r25, 0xA8	; 168
    7232:	90 8b       	std	Z+16, r25	; 0x10
    7234:	91 8b       	std	Z+17, r25	; 0x11
    7236:	92 8b       	std	Z+18, r25	; 0x12
    7238:	93 8b       	std	Z+19, r25	; 0x13
    723a:	94 8b       	std	Z+20, r25	; 0x14
    723c:	95 8b       	std	Z+21, r25	; 0x15
    723e:	96 8b       	std	Z+22, r25	; 0x16
    7240:	97 8b       	std	Z+23, r25	; 0x17
    7242:	8f ef       	ldi	r24, 0xFF	; 255
    7244:	84 83       	std	Z+4, r24	; 0x04
    7246:	a0 e8       	ldi	r26, 0x80	; 128
    7248:	b6 e0       	ldi	r27, 0x06	; 6
    724a:	98 e0       	ldi	r25, 0x08	; 8
    724c:	11 96       	adiw	r26, 0x01	; 1
    724e:	9c 93       	st	X, r25
    7250:	11 97       	sbiw	r26, 0x01	; 1
    7252:	53 96       	adiw	r26, 0x13	; 19
    7254:	1c 92       	st	X, r1
    7256:	53 97       	sbiw	r26, 0x13	; 19
    7258:	14 96       	adiw	r26, 0x04	; 4
    725a:	1c 92       	st	X, r1
    725c:	14 97       	sbiw	r26, 0x04	; 4
    725e:	e0 ea       	ldi	r30, 0xA0	; 160
    7260:	f6 e0       	ldi	r31, 0x06	; 6
    7262:	90 ec       	ldi	r25, 0xC0	; 192
    7264:	90 8b       	std	Z+16, r25	; 0x10
    7266:	20 e8       	ldi	r18, 0x80	; 128
    7268:	21 8b       	std	Z+17, r18	; 0x11
    726a:	22 8b       	std	Z+18, r18	; 0x12
    726c:	23 8b       	std	Z+19, r18	; 0x13
    726e:	94 8b       	std	Z+20, r25	; 0x14
    7270:	95 8b       	std	Z+21, r25	; 0x15
    7272:	96 8b       	std	Z+22, r25	; 0x16
    7274:	97 8b       	std	Z+23, r25	; 0x17
    7276:	14 82       	std	Z+4, r1	; 0x04
    7278:	81 83       	std	Z+1, r24	; 0x01
    727a:	e0 e6       	ldi	r30, 0x60	; 96
    727c:	f6 e0       	ldi	r31, 0x06	; 6
    727e:	81 e1       	ldi	r24, 0x11	; 17
    7280:	81 83       	std	Z+1, r24	; 0x01
    7282:	90 8b       	std	Z+16, r25	; 0x10
    7284:	94 8b       	std	Z+20, r25	; 0x14
    7286:	15 8a       	std	Z+21, r1	; 0x15
    7288:	14 82       	std	Z+4, r1	; 0x04
    728a:	87 e0       	ldi	r24, 0x07	; 7
    728c:	11 96       	adiw	r26, 0x01	; 1
    728e:	8c 93       	st	X, r24
    7290:	11 97       	sbiw	r26, 0x01	; 1
    7292:	50 96       	adiw	r26, 0x10	; 16
    7294:	2c 93       	st	X, r18
    7296:	50 97       	sbiw	r26, 0x10	; 16
    7298:	51 96       	adiw	r26, 0x11	; 17
    729a:	2c 93       	st	X, r18
    729c:	51 97       	sbiw	r26, 0x11	; 17
    729e:	52 96       	adiw	r26, 0x12	; 18
    72a0:	2c 93       	st	X, r18
    72a2:	52 97       	sbiw	r26, 0x12	; 18
    72a4:	14 96       	adiw	r26, 0x04	; 4
    72a6:	1c 92       	st	X, r1
    72a8:	e0 ea       	ldi	r30, 0xA0	; 160
    72aa:	f0 e0       	ldi	r31, 0x00	; 0
    72ac:	82 81       	ldd	r24, Z+2	; 0x02
    72ae:	81 60       	ori	r24, 0x01	; 1
    72b0:	82 83       	std	Z+2, r24	; 0x02
    72b2:	82 81       	ldd	r24, Z+2	; 0x02
    72b4:	82 60       	ori	r24, 0x02	; 2
    72b6:	82 83       	std	Z+2, r24	; 0x02
    72b8:	82 81       	ldd	r24, Z+2	; 0x02
    72ba:	84 60       	ori	r24, 0x04	; 4
    72bc:	82 83       	std	Z+2, r24	; 0x02
    72be:	fe 01       	movw	r30, r28
    72c0:	9e 01       	movw	r18, r28
    72c2:	28 5f       	subi	r18, 0xF8	; 248
    72c4:	3f 4f       	sbci	r19, 0xFF	; 255
    72c6:	91 e0       	ldi	r25, 0x01	; 1
    72c8:	91 93       	st	Z+, r25
    72ca:	e2 17       	cp	r30, r18
    72cc:	f3 07       	cpc	r31, r19
    72ce:	e1 f7       	brne	.-8      	; 0x72c8 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    72d0:	83 e0       	ldi	r24, 0x03	; 3
    72d2:	88 87       	std	Y+8, r24	; 0x08
    72d4:	e0 e4       	ldi	r30, 0x40	; 64
    72d6:	f6 e0       	ldi	r31, 0x06	; 6
    72d8:	81 e0       	ldi	r24, 0x01	; 1
    72da:	82 87       	std	Z+10, r24	; 0x0a
    72dc:	81 87       	std	Z+9, r24	; 0x09
    72de:	e0 ea       	ldi	r30, 0xA0	; 160
    72e0:	f6 e0       	ldi	r31, 0x06	; 6
    72e2:	85 83       	std	Z+5, r24	; 0x05
    72e4:	82 e0       	ldi	r24, 0x02	; 2
    72e6:	85 83       	std	Z+5, r24	; 0x05
    72e8:	df 91       	pop	r29
    72ea:	cf 91       	pop	r28
    72ec:	08 95       	ret

000072ee <_ZN11CLaserBoard15InitializeClockEv>:
    72ee:	e0 e5       	ldi	r30, 0x50	; 80
    72f0:	f0 e0       	ldi	r31, 0x00	; 0
    72f2:	8b ec       	ldi	r24, 0xCB	; 203
    72f4:	82 83       	std	Z+2, r24	; 0x02
    72f6:	80 81       	ld	r24, Z
    72f8:	88 60       	ori	r24, 0x08	; 8
    72fa:	80 83       	st	Z, r24
    72fc:	81 81       	ldd	r24, Z+1	; 0x01
    72fe:	83 ff       	sbrs	r24, 3
    7300:	fd cf       	rjmp	.-6      	; 0x72fc <_ZN11CLaserBoard15InitializeClockEv+0xe>
    7302:	e0 e5       	ldi	r30, 0x50	; 80
    7304:	f0 e0       	ldi	r31, 0x00	; 0
    7306:	85 81       	ldd	r24, Z+5	; 0x05
    7308:	98 ed       	ldi	r25, 0xD8	; 216
    730a:	94 bf       	out	0x34, r25	; 52
    730c:	84 ec       	ldi	r24, 0xC4	; 196
    730e:	85 83       	std	Z+5, r24	; 0x05
    7310:	80 81       	ld	r24, Z
    7312:	80 61       	ori	r24, 0x10	; 16
    7314:	80 83       	st	Z, r24
    7316:	e0 e4       	ldi	r30, 0x40	; 64
    7318:	f0 e0       	ldi	r31, 0x00	; 0
    731a:	81 81       	ldd	r24, Z+1	; 0x01
    731c:	94 bf       	out	0x34, r25	; 52
    731e:	11 82       	std	Z+1, r1	; 0x01
    7320:	e0 e5       	ldi	r30, 0x50	; 80
    7322:	f0 e0       	ldi	r31, 0x00	; 0
    7324:	81 81       	ldd	r24, Z+1	; 0x01
    7326:	84 ff       	sbrs	r24, 4
    7328:	fd cf       	rjmp	.-6      	; 0x7324 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    732a:	e0 e4       	ldi	r30, 0x40	; 64
    732c:	f0 e0       	ldi	r31, 0x00	; 0
    732e:	80 81       	ld	r24, Z
    7330:	88 7f       	andi	r24, 0xF8	; 248
    7332:	84 60       	ori	r24, 0x04	; 4
    7334:	98 ed       	ldi	r25, 0xD8	; 216
    7336:	94 bf       	out	0x34, r25	; 52
    7338:	80 83       	st	Z, r24
    733a:	a0 e5       	ldi	r26, 0x50	; 80
    733c:	b0 e0       	ldi	r27, 0x00	; 0
    733e:	8c 91       	ld	r24, X
    7340:	88 7f       	andi	r24, 0xF8	; 248
    7342:	8c 93       	st	X, r24
    7344:	82 81       	ldd	r24, Z+2	; 0x02
    7346:	94 bf       	out	0x34, r25	; 52
    7348:	81 e0       	ldi	r24, 0x01	; 1
    734a:	82 83       	std	Z+2, r24	; 0x02
    734c:	e0 eb       	ldi	r30, 0xB0	; 176
    734e:	f0 e0       	ldi	r31, 0x00	; 0
    7350:	84 81       	ldd	r24, Z+4	; 0x04
    7352:	8c 7f       	andi	r24, 0xFC	; 252
    7354:	84 83       	std	Z+4, r24	; 0x04
    7356:	08 95       	ret

00007358 <_ZN11CLaserBoard5PWMOnEv>:
    7358:	84 e0       	ldi	r24, 0x04	; 4
    735a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    735e:	08 95       	ret

00007360 <_ZN11CLaserBoard6PWMOffEv>:
    7360:	84 e0       	ldi	r24, 0x04	; 4
    7362:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    7366:	08 95       	ret

00007368 <_ZN11CLaserBoard5REDOnEv>:
    7368:	82 e0       	ldi	r24, 0x02	; 2
    736a:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    736e:	08 95       	ret

00007370 <_ZN11CLaserBoard5GRNOnEv>:
    7370:	84 e0       	ldi	r24, 0x04	; 4
    7372:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    7376:	08 95       	ret

00007378 <_ZN11CLaserBoard5BLUOnEv>:
    7378:	88 e0       	ldi	r24, 0x08	; 8
    737a:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    737e:	08 95       	ret

00007380 <_ZN11CLaserBoard8Relay1OnEv>:
    7380:	81 e0       	ldi	r24, 0x01	; 1
    7382:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    7386:	08 95       	ret

00007388 <_ZN11CLaserBoard8Relay2OnEv>:
    7388:	80 e1       	ldi	r24, 0x10	; 16
    738a:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    738e:	08 95       	ret

00007390 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    7390:	80 e1       	ldi	r24, 0x10	; 16
    7392:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    7396:	08 95       	ret

00007398 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    7398:	82 e0       	ldi	r24, 0x02	; 2
    739a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    739e:	08 95       	ret

000073a0 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    73a0:	82 e0       	ldi	r24, 0x02	; 2
    73a2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    73a6:	08 95       	ret

000073a8 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    73a8:	f8 94       	cli
    73aa:	84 e6       	ldi	r24, 0x64	; 100
    73ac:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    73ae:	e0 e8       	ldi	r30, 0x80	; 128
    73b0:	f6 e0       	ldi	r31, 0x06	; 6
    73b2:	28 e0       	ldi	r18, 0x08	; 8
    73b4:	25 83       	std	Z+5, r18	; 0x05
    73b6:	af e9       	ldi	r26, 0x9F	; 159
    73b8:	bf e0       	ldi	r27, 0x0F	; 15
    73ba:	11 97       	sbiw	r26, 0x01	; 1
    73bc:	f1 f7       	brne	.-4      	; 0x73ba <_ZN11CLaserBoard4BeepEv+0x12>
    73be:	00 c0       	rjmp	.+0      	; 0x73c0 <_ZN11CLaserBoard4BeepEv+0x18>
    73c0:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    73c2:	26 83       	std	Z+6, r18	; 0x06
    73c4:	af e9       	ldi	r26, 0x9F	; 159
    73c6:	bf e0       	ldi	r27, 0x0F	; 15
    73c8:	11 97       	sbiw	r26, 0x01	; 1
    73ca:	f1 f7       	brne	.-4      	; 0x73c8 <_ZN11CLaserBoard4BeepEv+0x20>
    73cc:	00 c0       	rjmp	.+0      	; 0x73ce <_ZN11CLaserBoard4BeepEv+0x26>
    73ce:	00 00       	nop
    73d0:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    73d2:	81 f7       	brne	.-32     	; 0x73b4 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    73d4:	78 94       	sei
    73d6:	08 95       	ret

000073d8 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    73d8:	f8 94       	cli
    73da:	45 e0       	ldi	r20, 0x05	; 5
    73dc:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    73de:	64 e6       	ldi	r22, 0x64	; 100
    73e0:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    73e2:	e0 e8       	ldi	r30, 0x80	; 128
    73e4:	f6 e0       	ldi	r31, 0x06	; 6
    73e6:	28 e0       	ldi	r18, 0x08	; 8
    73e8:	1c c0       	rjmp	.+56     	; 0x7422 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    73ea:	25 83       	std	Z+5, r18	; 0x05
    73ec:	af e9       	ldi	r26, 0x9F	; 159
    73ee:	bf e0       	ldi	r27, 0x0F	; 15
    73f0:	11 97       	sbiw	r26, 0x01	; 1
    73f2:	f1 f7       	brne	.-4      	; 0x73f0 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    73f4:	00 c0       	rjmp	.+0      	; 0x73f6 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    73f6:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    73f8:	26 83       	std	Z+6, r18	; 0x06
    73fa:	af e9       	ldi	r26, 0x9F	; 159
    73fc:	bf e0       	ldi	r27, 0x0F	; 15
    73fe:	11 97       	sbiw	r26, 0x01	; 1
    7400:	f1 f7       	brne	.-4      	; 0x73fe <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    7402:	00 c0       	rjmp	.+0      	; 0x7404 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    7404:	00 00       	nop
    7406:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    7408:	81 f7       	brne	.-32     	; 0x73ea <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    740a:	bf ef       	ldi	r27, 0xFF	; 255
    740c:	73 ec       	ldi	r23, 0xC3	; 195
    740e:	89 e0       	ldi	r24, 0x09	; 9
    7410:	b1 50       	subi	r27, 0x01	; 1
    7412:	70 40       	sbci	r23, 0x00	; 0
    7414:	80 40       	sbci	r24, 0x00	; 0
    7416:	e1 f7       	brne	.-8      	; 0x7410 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    7418:	00 c0       	rjmp	.+0      	; 0x741a <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    741a:	00 00       	nop
    741c:	41 50       	subi	r20, 0x01	; 1
    741e:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    7420:	19 f0       	breq	.+6      	; 0x7428 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    7422:	86 2f       	mov	r24, r22
    7424:	93 2f       	mov	r25, r19
    7426:	e1 cf       	rjmp	.-62     	; 0x73ea <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    7428:	78 94       	sei
    742a:	08 95       	ret

0000742c <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    742c:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    7430:	fc 01       	movw	r30, r24
    7432:	21 87       	std	Z+9, r18	; 0x09
    7434:	08 95       	ret

00007436 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    7436:	fc 01       	movw	r30, r24
    7438:	81 85       	ldd	r24, Z+9	; 0x09
    743a:	81 70       	andi	r24, 0x01	; 1
    743c:	08 95       	ret

0000743e <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    743e:	08 95       	ret

00007440 <_ZN12CSoundPlayerD1Ev>:
    7440:	08 95       	ret

00007442 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    7442:	e0 e0       	ldi	r30, 0x00	; 0
    7444:	fa e0       	ldi	r31, 0x0A	; 10
    7446:	10 82       	st	Z, r1
    7448:	87 e8       	ldi	r24, 0x87	; 135
    744a:	81 83       	std	Z+1, r24	; 0x01
    744c:	13 82       	std	Z+3, r1	; 0x03
    744e:	84 e2       	ldi	r24, 0x24	; 36
    7450:	94 ef       	ldi	r25, 0xF4	; 244
    7452:	86 a3       	std	Z+38, r24	; 0x26
    7454:	97 a3       	std	Z+39, r25	; 0x27
    7456:	82 e1       	ldi	r24, 0x12	; 18
    7458:	9a e7       	ldi	r25, 0x7A	; 122
    745a:	86 a7       	std	Z+46, r24	; 0x2e
    745c:	97 a7       	std	Z+47, r25	; 0x2f
    745e:	16 82       	std	Z+6, r1	; 0x06
    7460:	17 82       	std	Z+7, r1	; 0x07
    7462:	08 95       	ret

00007464 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    7464:	e0 e4       	ldi	r30, 0x40	; 64
    7466:	fa e0       	ldi	r31, 0x0A	; 10
    7468:	10 82       	st	Z, r1
    746a:	11 82       	std	Z+1, r1	; 0x01
    746c:	13 82       	std	Z+3, r1	; 0x03
    746e:	84 e2       	ldi	r24, 0x24	; 36
    7470:	94 ef       	ldi	r25, 0xF4	; 244
    7472:	86 a3       	std	Z+38, r24	; 0x26
    7474:	97 a3       	std	Z+39, r25	; 0x27
    7476:	16 82       	std	Z+6, r1	; 0x06
    7478:	17 82       	std	Z+7, r1	; 0x07
    747a:	08 95       	ret

0000747c <_ZN12CSoundPlayer10SoundStartEjjh>:
    747c:	0f 93       	push	r16
    747e:	1f 93       	push	r17
    7480:	cf 93       	push	r28
    7482:	8a 01       	movw	r16, r20
    7484:	c2 2f       	mov	r28, r18
    7486:	9b 01       	movw	r18, r22
    7488:	40 e0       	ldi	r20, 0x00	; 0
    748a:	50 e0       	ldi	r21, 0x00	; 0
    748c:	64 e2       	ldi	r22, 0x24	; 36
    748e:	74 ef       	ldi	r23, 0xF4	; 244
    7490:	80 e0       	ldi	r24, 0x00	; 0
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <__divmodsi4>
    7498:	b8 01       	movw	r22, r16
    749a:	76 95       	lsr	r23
    749c:	67 95       	ror	r22
    749e:	ee e3       	ldi	r30, 0x3E	; 62
    74a0:	e0 9f       	mul	r30, r16
    74a2:	c0 01       	movw	r24, r0
    74a4:	e1 9f       	mul	r30, r17
    74a6:	90 0d       	add	r25, r0
    74a8:	11 24       	eor	r1, r1
    74aa:	86 0f       	add	r24, r22
    74ac:	97 1f       	adc	r25, r23
    74ae:	cf 5f       	subi	r28, 0xFF	; 255
    74b0:	b9 01       	movw	r22, r18
    74b2:	02 c0       	rjmp	.+4      	; 0x74b8 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    74b4:	76 95       	lsr	r23
    74b6:	67 95       	ror	r22
    74b8:	ca 95       	dec	r28
    74ba:	e2 f7       	brpl	.-8      	; 0x74b4 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    74bc:	e0 e0       	ldi	r30, 0x00	; 0
    74be:	fa e0       	ldi	r31, 0x0A	; 10
    74c0:	66 a7       	std	Z+46, r22	; 0x2e
    74c2:	77 a7       	std	Z+47, r23	; 0x2f
    74c4:	26 a3       	std	Z+38, r18	; 0x26
    74c6:	37 a3       	std	Z+39, r19	; 0x27
    74c8:	a0 e4       	ldi	r26, 0x40	; 64
    74ca:	ba e0       	ldi	r27, 0x0A	; 10
    74cc:	96 96       	adiw	r26, 0x26	; 38
    74ce:	8d 93       	st	X+, r24
    74d0:	9c 93       	st	X, r25
    74d2:	97 97       	sbiw	r26, 0x27	; 39
    74d4:	86 e0       	ldi	r24, 0x06	; 6
    74d6:	80 83       	st	Z, r24
    74d8:	87 e0       	ldi	r24, 0x07	; 7
    74da:	8c 93       	st	X, r24
    74dc:	cf 91       	pop	r28
    74de:	1f 91       	pop	r17
    74e0:	0f 91       	pop	r16
    74e2:	08 95       	ret

000074e4 <_ZN12CSoundPlayer9SoundStopEv>:
    74e4:	e0 e4       	ldi	r30, 0x40	; 64
    74e6:	fa e0       	ldi	r31, 0x0A	; 10
    74e8:	84 85       	ldd	r24, Z+12	; 0x0c
    74ea:	80 ff       	sbrs	r24, 0
    74ec:	fd cf       	rjmp	.-6      	; 0x74e8 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    74ee:	e0 e4       	ldi	r30, 0x40	; 64
    74f0:	fa e0       	ldi	r31, 0x0A	; 10
    74f2:	84 85       	ldd	r24, Z+12	; 0x0c
    74f4:	81 70       	andi	r24, 0x01	; 1
    74f6:	84 87       	std	Z+12, r24	; 0x0c
    74f8:	a0 e0       	ldi	r26, 0x00	; 0
    74fa:	ba e0       	ldi	r27, 0x0A	; 10
    74fc:	1c 92       	st	X, r1
    74fe:	10 82       	st	Z, r1
    7500:	10 a2       	std	Z+32, r1	; 0x20
    7502:	11 a2       	std	Z+33, r1	; 0x21
    7504:	90 96       	adiw	r26, 0x20	; 32
    7506:	1d 92       	st	X+, r1
    7508:	1c 92       	st	X, r1
    750a:	91 97       	sbiw	r26, 0x21	; 33
    750c:	2f ef       	ldi	r18, 0xFF	; 255
    750e:	83 ef       	ldi	r24, 0xF3	; 243
    7510:	91 e0       	ldi	r25, 0x01	; 1
    7512:	21 50       	subi	r18, 0x01	; 1
    7514:	80 40       	sbci	r24, 0x00	; 0
    7516:	90 40       	sbci	r25, 0x00	; 0
    7518:	e1 f7       	brne	.-8      	; 0x7512 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    751a:	00 c0       	rjmp	.+0      	; 0x751c <_ZN12CSoundPlayer9SoundStopEv+0x38>
    751c:	00 00       	nop
    751e:	08 95       	ret

00007520 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    7520:	cf 93       	push	r28
    7522:	df 93       	push	r29
    7524:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    7526:	0e 94 21 3a 	call	0x7442	; 0x7442 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    752a:	ce 01       	movw	r24, r28
    752c:	0e 94 32 3a 	call	0x7464	; 0x7464 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    7530:	df 91       	pop	r29
    7532:	cf 91       	pop	r28
    7534:	08 95       	ret

00007536 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    7536:	fc 01       	movw	r30, r24
    7538:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    753a:	e0 e0       	ldi	r30, 0x00	; 0
    753c:	f8 e0       	ldi	r31, 0x08	; 8
    753e:	80 81       	ld	r24, Z
    7540:	80 7f       	andi	r24, 0xF0	; 240
    7542:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7544:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    7546:	10 a2       	std	Z+32, r1	; 0x20
    7548:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    754a:	10 a6       	std	Z+40, r1	; 0x28
    754c:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    754e:	12 a6       	std	Z+42, r1	; 0x2a
    7550:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    7552:	14 a6       	std	Z+44, r1	; 0x2c
    7554:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    7556:	16 a6       	std	Z+46, r1	; 0x2e
    7558:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    755a:	16 a2       	std	Z+38, r1	; 0x26
    755c:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    755e:	81 81       	ldd	r24, Z+1	; 0x01
    7560:	88 7f       	andi	r24, 0xF8	; 248
    7562:	68 2b       	or	r22, r24
    7564:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7566:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7568:	17 82       	std	Z+7, r1	; 0x07
    756a:	08 95       	ret

0000756c <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    756c:	e0 e0       	ldi	r30, 0x00	; 0
    756e:	f8 e0       	ldi	r31, 0x08	; 8
    7570:	66 a3       	std	Z+38, r22	; 0x26
    7572:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    7574:	20 81       	ld	r18, Z
    7576:	20 7f       	andi	r18, 0xF0	; 240
    7578:	dc 01       	movw	r26, r24
    757a:	12 96       	adiw	r26, 0x02	; 2
    757c:	9c 91       	ld	r25, X
    757e:	82 2f       	mov	r24, r18
    7580:	89 2b       	or	r24, r25
    7582:	80 83       	st	Z, r24
    7584:	08 95       	ret

00007586 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7586:	e0 e0       	ldi	r30, 0x00	; 0
    7588:	f8 e0       	ldi	r31, 0x08	; 8
    758a:	80 81       	ld	r24, Z
    758c:	80 7f       	andi	r24, 0xF0	; 240
    758e:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    7590:	10 a2       	std	Z+32, r1	; 0x20
    7592:	11 a2       	std	Z+33, r1	; 0x21
    7594:	08 95       	ret

00007596 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    7596:	e0 e0       	ldi	r30, 0x00	; 0
    7598:	f8 e0       	ldi	r31, 0x08	; 8
    759a:	81 81       	ldd	r24, Z+1	; 0x01
    759c:	8f 70       	andi	r24, 0x0F	; 15
    759e:	68 2b       	or	r22, r24
    75a0:	61 83       	std	Z+1, r22	; 0x01
    75a2:	08 95       	ret

000075a4 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    75a4:	e0 e0       	ldi	r30, 0x00	; 0
    75a6:	f8 e0       	ldi	r31, 0x08	; 8
    75a8:	81 81       	ldd	r24, Z+1	; 0x01
    75aa:	60 95       	com	r22
    75ac:	68 23       	and	r22, r24
    75ae:	61 83       	std	Z+1, r22	; 0x01
    75b0:	08 95       	ret

000075b2 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    75b2:	60 93 26 08 	sts	0x0826, r22	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    75b6:	70 93 27 08 	sts	0x0827, r23	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    75ba:	08 95       	ret

000075bc <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    75bc:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    75c0:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    75c4:	08 95       	ret

000075c6 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    75c6:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    75ca:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    75ce:	08 95       	ret

000075d0 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    75d0:	60 93 2c 08 	sts	0x082C, r22	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
    75d4:	70 93 2d 08 	sts	0x082D, r23	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
    75d8:	08 95       	ret

000075da <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    75da:	60 93 2e 08 	sts	0x082E, r22	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
    75de:	70 93 2f 08 	sts	0x082F, r23	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
    75e2:	08 95       	ret

000075e4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    75e4:	61 15       	cp	r22, r1
    75e6:	71 05       	cpc	r23, r1
    75e8:	29 f0       	breq	.+10     	; 0x75f4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    75ea:	e0 e0       	ldi	r30, 0x00	; 0
    75ec:	f8 e0       	ldi	r31, 0x08	; 8
    75ee:	86 81       	ldd	r24, Z+6	; 0x06
    75f0:	28 2b       	or	r18, r24
    75f2:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    75f4:	60 93 e2 22 	sts	0x22E2, r22	; 0x8022e2 <InterruptFuncTable+0x1c>
    75f8:	70 93 e3 22 	sts	0x22E3, r23	; 0x8022e3 <InterruptFuncTable+0x1d>
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    75fc:	40 93 d8 23 	sts	0x23D8, r20	; 0x8023d8 <InterruptSenderTable+0x1c>
    7600:	50 93 d9 23 	sts	0x23D9, r21	; 0x8023d9 <InterruptSenderTable+0x1d>
    7604:	08 95       	ret

00007606 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7606:	61 15       	cp	r22, r1
    7608:	71 05       	cpc	r23, r1
    760a:	29 f0       	breq	.+10     	; 0x7616 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    760c:	e0 e0       	ldi	r30, 0x00	; 0
    760e:	f8 e0       	ldi	r31, 0x08	; 8
    7610:	86 81       	ldd	r24, Z+6	; 0x06
    7612:	28 2b       	or	r18, r24
    7614:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    7616:	60 93 e4 22 	sts	0x22E4, r22	; 0x8022e4 <InterruptFuncTable+0x1e>
    761a:	70 93 e5 22 	sts	0x22E5, r23	; 0x8022e5 <InterruptFuncTable+0x1f>
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    761e:	40 93 da 23 	sts	0x23DA, r20	; 0x8023da <InterruptSenderTable+0x1e>
    7622:	50 93 db 23 	sts	0x23DB, r21	; 0x8023db <InterruptSenderTable+0x1f>
    7626:	08 95       	ret

00007628 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7628:	61 15       	cp	r22, r1
    762a:	71 05       	cpc	r23, r1
    762c:	29 f0       	breq	.+10     	; 0x7638 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    762e:	e0 e0       	ldi	r30, 0x00	; 0
    7630:	f8 e0       	ldi	r31, 0x08	; 8
    7632:	87 81       	ldd	r24, Z+7	; 0x07
    7634:	28 2b       	or	r18, r24
    7636:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    7638:	60 93 e6 22 	sts	0x22E6, r22	; 0x8022e6 <InterruptFuncTable+0x20>
    763c:	70 93 e7 22 	sts	0x22E7, r23	; 0x8022e7 <InterruptFuncTable+0x21>
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    7640:	40 93 dc 23 	sts	0x23DC, r20	; 0x8023dc <InterruptSenderTable+0x20>
    7644:	50 93 dd 23 	sts	0x23DD, r21	; 0x8023dd <InterruptSenderTable+0x21>
    7648:	08 95       	ret

0000764a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    764a:	61 15       	cp	r22, r1
    764c:	71 05       	cpc	r23, r1
    764e:	29 f0       	breq	.+10     	; 0x765a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    7650:	e0 e0       	ldi	r30, 0x00	; 0
    7652:	f8 e0       	ldi	r31, 0x08	; 8
    7654:	87 81       	ldd	r24, Z+7	; 0x07
    7656:	28 2b       	or	r18, r24
    7658:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    765a:	60 93 e8 22 	sts	0x22E8, r22	; 0x8022e8 <InterruptFuncTable+0x22>
    765e:	70 93 e9 22 	sts	0x22E9, r23	; 0x8022e9 <InterruptFuncTable+0x23>
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    7662:	40 93 de 23 	sts	0x23DE, r20	; 0x8023de <InterruptSenderTable+0x22>
    7666:	50 93 df 23 	sts	0x23DF, r21	; 0x8023df <InterruptSenderTable+0x23>
    766a:	08 95       	ret

0000766c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    766c:	61 15       	cp	r22, r1
    766e:	71 05       	cpc	r23, r1
    7670:	29 f0       	breq	.+10     	; 0x767c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    7672:	e0 e0       	ldi	r30, 0x00	; 0
    7674:	f8 e0       	ldi	r31, 0x08	; 8
    7676:	87 81       	ldd	r24, Z+7	; 0x07
    7678:	28 2b       	or	r18, r24
    767a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    767c:	60 93 ea 22 	sts	0x22EA, r22	; 0x8022ea <InterruptFuncTable+0x24>
    7680:	70 93 eb 22 	sts	0x22EB, r23	; 0x8022eb <InterruptFuncTable+0x25>
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    7684:	40 93 e0 23 	sts	0x23E0, r20	; 0x8023e0 <InterruptSenderTable+0x24>
    7688:	50 93 e1 23 	sts	0x23E1, r21	; 0x8023e1 <InterruptSenderTable+0x25>
    768c:	08 95       	ret

0000768e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    768e:	61 15       	cp	r22, r1
    7690:	71 05       	cpc	r23, r1
    7692:	29 f0       	breq	.+10     	; 0x769e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7694:	e0 e0       	ldi	r30, 0x00	; 0
    7696:	f8 e0       	ldi	r31, 0x08	; 8
    7698:	87 81       	ldd	r24, Z+7	; 0x07
    769a:	28 2b       	or	r18, r24
    769c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    769e:	60 93 ec 22 	sts	0x22EC, r22	; 0x8022ec <InterruptFuncTable+0x26>
    76a2:	70 93 ed 22 	sts	0x22ED, r23	; 0x8022ed <InterruptFuncTable+0x27>
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    76a6:	40 93 e2 23 	sts	0x23E2, r20	; 0x8023e2 <InterruptSenderTable+0x26>
    76aa:	50 93 e3 23 	sts	0x23E3, r21	; 0x8023e3 <InterruptSenderTable+0x27>
    76ae:	08 95       	ret

000076b0 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    76b0:	cf 93       	push	r28
    76b2:	df 93       	push	r29
    76b4:	ec 01       	movw	r28, r24
    76b6:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN6CTimerC1Ev>
    76ba:	8c e1       	ldi	r24, 0x1C	; 28
    76bc:	92 e2       	ldi	r25, 0x22	; 34
    76be:	88 83       	st	Y, r24
    76c0:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    76c2:	df 91       	pop	r29
    76c4:	cf 91       	pop	r28
    76c6:	08 95       	ret

000076c8 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    76c8:	2c e1       	ldi	r18, 0x1C	; 28
    76ca:	32 e2       	ldi	r19, 0x22	; 34
    76cc:	fc 01       	movw	r30, r24
    76ce:	20 83       	st	Z, r18
    76d0:	31 83       	std	Z+1, r19	; 0x01
    76d2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN6CTimerD1Ev>
    76d6:	08 95       	ret

000076d8 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    76d8:	fc 01       	movw	r30, r24
    76da:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    76dc:	e0 e4       	ldi	r30, 0x40	; 64
    76de:	f8 e0       	ldi	r31, 0x08	; 8
    76e0:	80 81       	ld	r24, Z
    76e2:	80 7f       	andi	r24, 0xF0	; 240
    76e4:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    76e6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    76e8:	10 a2       	std	Z+32, r1	; 0x20
    76ea:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    76ec:	10 a6       	std	Z+40, r1	; 0x28
    76ee:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    76f0:	12 a6       	std	Z+42, r1	; 0x2a
    76f2:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    76f4:	16 a2       	std	Z+38, r1	; 0x26
    76f6:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    76f8:	81 81       	ldd	r24, Z+1	; 0x01
    76fa:	88 7f       	andi	r24, 0xF8	; 248
    76fc:	68 2b       	or	r22, r24
    76fe:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7700:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7702:	17 82       	std	Z+7, r1	; 0x07
    7704:	08 95       	ret

00007706 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    7706:	e0 e4       	ldi	r30, 0x40	; 64
    7708:	f8 e0       	ldi	r31, 0x08	; 8
    770a:	66 a3       	std	Z+38, r22	; 0x26
    770c:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    770e:	20 81       	ld	r18, Z
    7710:	20 7f       	andi	r18, 0xF0	; 240
    7712:	dc 01       	movw	r26, r24
    7714:	12 96       	adiw	r26, 0x02	; 2
    7716:	9c 91       	ld	r25, X
    7718:	82 2f       	mov	r24, r18
    771a:	89 2b       	or	r24, r25
    771c:	80 83       	st	Z, r24
    771e:	08 95       	ret

00007720 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7720:	e0 e4       	ldi	r30, 0x40	; 64
    7722:	f8 e0       	ldi	r31, 0x08	; 8
    7724:	80 81       	ld	r24, Z
    7726:	80 7f       	andi	r24, 0xF0	; 240
    7728:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    772a:	10 a2       	std	Z+32, r1	; 0x20
    772c:	11 a2       	std	Z+33, r1	; 0x21
    772e:	08 95       	ret

00007730 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    7730:	e0 e4       	ldi	r30, 0x40	; 64
    7732:	f8 e0       	ldi	r31, 0x08	; 8
    7734:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7736:	80 81       	ld	r24, Z
    7738:	80 7f       	andi	r24, 0xF0	; 240
    773a:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    773c:	10 a2       	std	Z+32, r1	; 0x20
    773e:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    7740:	90 83       	st	Z, r25
    7742:	08 95       	ret

00007744 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    7744:	e0 e4       	ldi	r30, 0x40	; 64
    7746:	f8 e0       	ldi	r31, 0x08	; 8
    7748:	81 81       	ldd	r24, Z+1	; 0x01
    774a:	8f 70       	andi	r24, 0x0F	; 15
    774c:	68 2b       	or	r22, r24
    774e:	61 83       	std	Z+1, r22	; 0x01
    7750:	08 95       	ret

00007752 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    7752:	e0 e4       	ldi	r30, 0x40	; 64
    7754:	f8 e0       	ldi	r31, 0x08	; 8
    7756:	81 81       	ldd	r24, Z+1	; 0x01
    7758:	60 95       	com	r22
    775a:	68 23       	and	r22, r24
    775c:	61 83       	std	Z+1, r22	; 0x01
    775e:	08 95       	ret

00007760 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    7760:	60 93 66 08 	sts	0x0866, r22	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    7764:	70 93 67 08 	sts	0x0867, r23	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    7768:	08 95       	ret

0000776a <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    776a:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    776e:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    7772:	08 95       	ret

00007774 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    7774:	60 93 6a 08 	sts	0x086A, r22	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    7778:	70 93 6b 08 	sts	0x086B, r23	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    777c:	08 95       	ret

0000777e <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    777e:	61 15       	cp	r22, r1
    7780:	71 05       	cpc	r23, r1
    7782:	31 f0       	breq	.+12     	; 0x7790 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    7784:	e0 e4       	ldi	r30, 0x40	; 64
    7786:	f8 e0       	ldi	r31, 0x08	; 8
    7788:	86 81       	ldd	r24, Z+6	; 0x06
    778a:	83 70       	andi	r24, 0x03	; 3
    778c:	28 2b       	or	r18, r24
    778e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    7790:	60 93 ee 22 	sts	0x22EE, r22	; 0x8022ee <InterruptFuncTable+0x28>
    7794:	70 93 ef 22 	sts	0x22EF, r23	; 0x8022ef <InterruptFuncTable+0x29>
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    7798:	40 93 e4 23 	sts	0x23E4, r20	; 0x8023e4 <InterruptSenderTable+0x28>
    779c:	50 93 e5 23 	sts	0x23E5, r21	; 0x8023e5 <InterruptSenderTable+0x29>
    77a0:	08 95       	ret

000077a2 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    77a2:	61 15       	cp	r22, r1
    77a4:	71 05       	cpc	r23, r1
    77a6:	31 f0       	breq	.+12     	; 0x77b4 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    77a8:	e0 e4       	ldi	r30, 0x40	; 64
    77aa:	f8 e0       	ldi	r31, 0x08	; 8
    77ac:	86 81       	ldd	r24, Z+6	; 0x06
    77ae:	8c 70       	andi	r24, 0x0C	; 12
    77b0:	28 2b       	or	r18, r24
    77b2:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    77b4:	60 93 f0 22 	sts	0x22F0, r22	; 0x8022f0 <InterruptFuncTable+0x2a>
    77b8:	70 93 f1 22 	sts	0x22F1, r23	; 0x8022f1 <InterruptFuncTable+0x2b>
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    77bc:	40 93 e6 23 	sts	0x23E6, r20	; 0x8023e6 <InterruptSenderTable+0x2a>
    77c0:	50 93 e7 23 	sts	0x23E7, r21	; 0x8023e7 <InterruptSenderTable+0x2b>
    77c4:	08 95       	ret

000077c6 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    77c6:	61 15       	cp	r22, r1
    77c8:	71 05       	cpc	r23, r1
    77ca:	31 f0       	breq	.+12     	; 0x77d8 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    77cc:	e0 e4       	ldi	r30, 0x40	; 64
    77ce:	f8 e0       	ldi	r31, 0x08	; 8
    77d0:	87 81       	ldd	r24, Z+7	; 0x07
    77d2:	83 70       	andi	r24, 0x03	; 3
    77d4:	28 2b       	or	r18, r24
    77d6:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    77d8:	60 93 f2 22 	sts	0x22F2, r22	; 0x8022f2 <InterruptFuncTable+0x2c>
    77dc:	70 93 f3 22 	sts	0x22F3, r23	; 0x8022f3 <InterruptFuncTable+0x2d>
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    77e0:	40 93 e8 23 	sts	0x23E8, r20	; 0x8023e8 <InterruptSenderTable+0x2c>
    77e4:	50 93 e9 23 	sts	0x23E9, r21	; 0x8023e9 <InterruptSenderTable+0x2d>
    77e8:	08 95       	ret

000077ea <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    77ea:	61 15       	cp	r22, r1
    77ec:	71 05       	cpc	r23, r1
    77ee:	31 f0       	breq	.+12     	; 0x77fc <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    77f0:	e0 e4       	ldi	r30, 0x40	; 64
    77f2:	f8 e0       	ldi	r31, 0x08	; 8
    77f4:	87 81       	ldd	r24, Z+7	; 0x07
    77f6:	8c 70       	andi	r24, 0x0C	; 12
    77f8:	28 2b       	or	r18, r24
    77fa:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    77fc:	60 93 f4 22 	sts	0x22F4, r22	; 0x8022f4 <InterruptFuncTable+0x2e>
    7800:	70 93 f5 22 	sts	0x22F5, r23	; 0x8022f5 <InterruptFuncTable+0x2f>
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    7804:	40 93 ea 23 	sts	0x23EA, r20	; 0x8023ea <InterruptSenderTable+0x2e>
    7808:	50 93 eb 23 	sts	0x23EB, r21	; 0x8023eb <InterruptSenderTable+0x2f>
    780c:	08 95       	ret

0000780e <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    780e:	cf 93       	push	r28
    7810:	df 93       	push	r29
    7812:	ec 01       	movw	r28, r24
    7814:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <_ZN7CTimer1C1Ev>
    7818:	80 e4       	ldi	r24, 0x40	; 64
    781a:	92 e2       	ldi	r25, 0x22	; 34
    781c:	88 83       	st	Y, r24
    781e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    7820:	df 91       	pop	r29
    7822:	cf 91       	pop	r28
    7824:	08 95       	ret

00007826 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    7826:	20 e4       	ldi	r18, 0x40	; 64
    7828:	32 e2       	ldi	r19, 0x22	; 34
    782a:	fc 01       	movw	r30, r24
    782c:	20 83       	st	Z, r18
    782e:	31 83       	std	Z+1, r19	; 0x01
    7830:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN7CTimer1D1Ev>
    7834:	08 95       	ret

00007836 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    7836:	fc 01       	movw	r30, r24
    7838:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    783a:	e0 e0       	ldi	r30, 0x00	; 0
    783c:	f9 e0       	ldi	r31, 0x09	; 9
    783e:	80 81       	ld	r24, Z
    7840:	80 7f       	andi	r24, 0xF0	; 240
    7842:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7844:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    7846:	10 a2       	std	Z+32, r1	; 0x20
    7848:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    784a:	10 a6       	std	Z+40, r1	; 0x28
    784c:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    784e:	12 a6       	std	Z+42, r1	; 0x2a
    7850:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    7852:	14 a6       	std	Z+44, r1	; 0x2c
    7854:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    7856:	16 a6       	std	Z+46, r1	; 0x2e
    7858:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    785a:	16 a2       	std	Z+38, r1	; 0x26
    785c:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    785e:	81 81       	ldd	r24, Z+1	; 0x01
    7860:	88 7f       	andi	r24, 0xF8	; 248
    7862:	68 2b       	or	r22, r24
    7864:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7866:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7868:	17 82       	std	Z+7, r1	; 0x07
    786a:	08 95       	ret

0000786c <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    786c:	e0 e0       	ldi	r30, 0x00	; 0
    786e:	f9 e0       	ldi	r31, 0x09	; 9
    7870:	66 a3       	std	Z+38, r22	; 0x26
    7872:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    7874:	20 81       	ld	r18, Z
    7876:	20 7f       	andi	r18, 0xF0	; 240
    7878:	dc 01       	movw	r26, r24
    787a:	12 96       	adiw	r26, 0x02	; 2
    787c:	9c 91       	ld	r25, X
    787e:	82 2f       	mov	r24, r18
    7880:	89 2b       	or	r24, r25
    7882:	80 83       	st	Z, r24
    7884:	08 95       	ret

00007886 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7886:	e0 e0       	ldi	r30, 0x00	; 0
    7888:	f9 e0       	ldi	r31, 0x09	; 9
    788a:	80 81       	ld	r24, Z
    788c:	80 7f       	andi	r24, 0xF0	; 240
    788e:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    7890:	10 a2       	std	Z+32, r1	; 0x20
    7892:	11 a2       	std	Z+33, r1	; 0x21
    7894:	08 95       	ret

00007896 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    7896:	e0 e0       	ldi	r30, 0x00	; 0
    7898:	f9 e0       	ldi	r31, 0x09	; 9
    789a:	81 81       	ldd	r24, Z+1	; 0x01
    789c:	8f 70       	andi	r24, 0x0F	; 15
    789e:	68 2b       	or	r22, r24
    78a0:	61 83       	std	Z+1, r22	; 0x01
    78a2:	08 95       	ret

000078a4 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    78a4:	e0 e0       	ldi	r30, 0x00	; 0
    78a6:	f9 e0       	ldi	r31, 0x09	; 9
    78a8:	81 81       	ldd	r24, Z+1	; 0x01
    78aa:	60 95       	com	r22
    78ac:	68 23       	and	r22, r24
    78ae:	61 83       	std	Z+1, r22	; 0x01
    78b0:	08 95       	ret

000078b2 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    78b2:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    78b6:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    78ba:	08 95       	ret

000078bc <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    78bc:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    78c0:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    78c4:	08 95       	ret

000078c6 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    78c6:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    78ca:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    78ce:	08 95       	ret

000078d0 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    78d0:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
    78d4:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
    78d8:	08 95       	ret

000078da <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    78da:	60 93 2e 09 	sts	0x092E, r22	; 0x80092e <__TEXT_REGION_LENGTH__+0x70092e>
    78de:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <__TEXT_REGION_LENGTH__+0x70092f>
    78e2:	08 95       	ret

000078e4 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    78e4:	61 15       	cp	r22, r1
    78e6:	71 05       	cpc	r23, r1
    78e8:	29 f0       	breq	.+10     	; 0x78f4 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    78ea:	e0 e0       	ldi	r30, 0x00	; 0
    78ec:	f9 e0       	ldi	r31, 0x09	; 9
    78ee:	86 81       	ldd	r24, Z+6	; 0x06
    78f0:	28 2b       	or	r18, r24
    78f2:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    78f4:	60 93 60 23 	sts	0x2360, r22	; 0x802360 <InterruptFuncTable+0x9a>
    78f8:	70 93 61 23 	sts	0x2361, r23	; 0x802361 <InterruptFuncTable+0x9b>
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    78fc:	40 93 56 24 	sts	0x2456, r20	; 0x802456 <InterruptSenderTable+0x9a>
    7900:	50 93 57 24 	sts	0x2457, r21	; 0x802457 <InterruptSenderTable+0x9b>
    7904:	08 95       	ret

00007906 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7906:	61 15       	cp	r22, r1
    7908:	71 05       	cpc	r23, r1
    790a:	29 f0       	breq	.+10     	; 0x7916 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    790c:	e0 e0       	ldi	r30, 0x00	; 0
    790e:	f9 e0       	ldi	r31, 0x09	; 9
    7910:	86 81       	ldd	r24, Z+6	; 0x06
    7912:	28 2b       	or	r18, r24
    7914:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    7916:	60 93 62 23 	sts	0x2362, r22	; 0x802362 <InterruptFuncTable+0x9c>
    791a:	70 93 63 23 	sts	0x2363, r23	; 0x802363 <InterruptFuncTable+0x9d>
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    791e:	40 93 58 24 	sts	0x2458, r20	; 0x802458 <InterruptSenderTable+0x9c>
    7922:	50 93 59 24 	sts	0x2459, r21	; 0x802459 <InterruptSenderTable+0x9d>
    7926:	08 95       	ret

00007928 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7928:	61 15       	cp	r22, r1
    792a:	71 05       	cpc	r23, r1
    792c:	29 f0       	breq	.+10     	; 0x7938 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    792e:	e0 e0       	ldi	r30, 0x00	; 0
    7930:	f9 e0       	ldi	r31, 0x09	; 9
    7932:	87 81       	ldd	r24, Z+7	; 0x07
    7934:	28 2b       	or	r18, r24
    7936:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    7938:	60 93 64 23 	sts	0x2364, r22	; 0x802364 <InterruptFuncTable+0x9e>
    793c:	70 93 65 23 	sts	0x2365, r23	; 0x802365 <InterruptFuncTable+0x9f>
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    7940:	40 93 5a 24 	sts	0x245A, r20	; 0x80245a <InterruptSenderTable+0x9e>
    7944:	50 93 5b 24 	sts	0x245B, r21	; 0x80245b <InterruptSenderTable+0x9f>
    7948:	08 95       	ret

0000794a <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    794a:	61 15       	cp	r22, r1
    794c:	71 05       	cpc	r23, r1
    794e:	29 f0       	breq	.+10     	; 0x795a <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    7950:	e0 e0       	ldi	r30, 0x00	; 0
    7952:	f9 e0       	ldi	r31, 0x09	; 9
    7954:	87 81       	ldd	r24, Z+7	; 0x07
    7956:	28 2b       	or	r18, r24
    7958:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    795a:	60 93 66 23 	sts	0x2366, r22	; 0x802366 <InterruptFuncTable+0xa0>
    795e:	70 93 67 23 	sts	0x2367, r23	; 0x802367 <InterruptFuncTable+0xa1>
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    7962:	40 93 5c 24 	sts	0x245C, r20	; 0x80245c <InterruptSenderTable+0xa0>
    7966:	50 93 5d 24 	sts	0x245D, r21	; 0x80245d <InterruptSenderTable+0xa1>
    796a:	08 95       	ret

0000796c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    796c:	61 15       	cp	r22, r1
    796e:	71 05       	cpc	r23, r1
    7970:	29 f0       	breq	.+10     	; 0x797c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    7972:	e0 e0       	ldi	r30, 0x00	; 0
    7974:	f9 e0       	ldi	r31, 0x09	; 9
    7976:	87 81       	ldd	r24, Z+7	; 0x07
    7978:	28 2b       	or	r18, r24
    797a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    797c:	60 93 68 23 	sts	0x2368, r22	; 0x802368 <InterruptFuncTable+0xa2>
    7980:	70 93 69 23 	sts	0x2369, r23	; 0x802369 <InterruptFuncTable+0xa3>
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    7984:	40 93 5e 24 	sts	0x245E, r20	; 0x80245e <InterruptSenderTable+0xa2>
    7988:	50 93 5f 24 	sts	0x245F, r21	; 0x80245f <InterruptSenderTable+0xa3>
    798c:	08 95       	ret

0000798e <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    798e:	61 15       	cp	r22, r1
    7990:	71 05       	cpc	r23, r1
    7992:	29 f0       	breq	.+10     	; 0x799e <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7994:	e0 e0       	ldi	r30, 0x00	; 0
    7996:	f9 e0       	ldi	r31, 0x09	; 9
    7998:	87 81       	ldd	r24, Z+7	; 0x07
    799a:	28 2b       	or	r18, r24
    799c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    799e:	60 93 6a 23 	sts	0x236A, r22	; 0x80236a <InterruptFuncTable+0xa4>
    79a2:	70 93 6b 23 	sts	0x236B, r23	; 0x80236b <InterruptFuncTable+0xa5>
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    79a6:	40 93 60 24 	sts	0x2460, r20	; 0x802460 <InterruptSenderTable+0xa4>
    79aa:	50 93 61 24 	sts	0x2461, r21	; 0x802461 <InterruptSenderTable+0xa5>
    79ae:	08 95       	ret

000079b0 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    79b0:	cf 93       	push	r28
    79b2:	df 93       	push	r29
    79b4:	ec 01       	movw	r28, r24
    79b6:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN6CTimerC1Ev>
    79ba:	8e e5       	ldi	r24, 0x5E	; 94
    79bc:	92 e2       	ldi	r25, 0x22	; 34
    79be:	88 83       	st	Y, r24
    79c0:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    79c2:	df 91       	pop	r29
    79c4:	cf 91       	pop	r28
    79c6:	08 95       	ret

000079c8 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    79c8:	2e e5       	ldi	r18, 0x5E	; 94
    79ca:	32 e2       	ldi	r19, 0x22	; 34
    79cc:	fc 01       	movw	r30, r24
    79ce:	20 83       	st	Z, r18
    79d0:	31 83       	std	Z+1, r19	; 0x01
    79d2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN6CTimerD1Ev>
    79d6:	08 95       	ret

000079d8 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    79d8:	fc 01       	movw	r30, r24
    79da:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    79dc:	e0 e4       	ldi	r30, 0x40	; 64
    79de:	f9 e0       	ldi	r31, 0x09	; 9
    79e0:	80 81       	ld	r24, Z
    79e2:	80 7f       	andi	r24, 0xF0	; 240
    79e4:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    79e6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    79e8:	10 a2       	std	Z+32, r1	; 0x20
    79ea:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    79ec:	10 a6       	std	Z+40, r1	; 0x28
    79ee:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    79f0:	12 a6       	std	Z+42, r1	; 0x2a
    79f2:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    79f4:	16 a2       	std	Z+38, r1	; 0x26
    79f6:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    79f8:	81 81       	ldd	r24, Z+1	; 0x01
    79fa:	88 7f       	andi	r24, 0xF8	; 248
    79fc:	68 2b       	or	r22, r24
    79fe:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7a00:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7a02:	17 82       	std	Z+7, r1	; 0x07
    7a04:	08 95       	ret

00007a06 <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    7a06:	e0 e4       	ldi	r30, 0x40	; 64
    7a08:	f9 e0       	ldi	r31, 0x09	; 9
    7a0a:	66 a3       	std	Z+38, r22	; 0x26
    7a0c:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    7a0e:	20 81       	ld	r18, Z
    7a10:	20 7f       	andi	r18, 0xF0	; 240
    7a12:	dc 01       	movw	r26, r24
    7a14:	12 96       	adiw	r26, 0x02	; 2
    7a16:	9c 91       	ld	r25, X
    7a18:	82 2f       	mov	r24, r18
    7a1a:	89 2b       	or	r24, r25
    7a1c:	80 83       	st	Z, r24
    7a1e:	08 95       	ret

00007a20 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7a20:	e0 e4       	ldi	r30, 0x40	; 64
    7a22:	f9 e0       	ldi	r31, 0x09	; 9
    7a24:	80 81       	ld	r24, Z
    7a26:	80 7f       	andi	r24, 0xF0	; 240
    7a28:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    7a2a:	10 a2       	std	Z+32, r1	; 0x20
    7a2c:	11 a2       	std	Z+33, r1	; 0x21
    7a2e:	08 95       	ret

00007a30 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    7a30:	e0 e4       	ldi	r30, 0x40	; 64
    7a32:	f9 e0       	ldi	r31, 0x09	; 9
    7a34:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7a36:	80 81       	ld	r24, Z
    7a38:	80 7f       	andi	r24, 0xF0	; 240
    7a3a:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    7a3c:	10 a2       	std	Z+32, r1	; 0x20
    7a3e:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    7a40:	90 83       	st	Z, r25
    7a42:	08 95       	ret

00007a44 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    7a44:	e0 e4       	ldi	r30, 0x40	; 64
    7a46:	f9 e0       	ldi	r31, 0x09	; 9
    7a48:	81 81       	ldd	r24, Z+1	; 0x01
    7a4a:	8f 70       	andi	r24, 0x0F	; 15
    7a4c:	68 2b       	or	r22, r24
    7a4e:	61 83       	std	Z+1, r22	; 0x01
    7a50:	08 95       	ret

00007a52 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    7a52:	e0 e4       	ldi	r30, 0x40	; 64
    7a54:	f9 e0       	ldi	r31, 0x09	; 9
    7a56:	81 81       	ldd	r24, Z+1	; 0x01
    7a58:	60 95       	com	r22
    7a5a:	68 23       	and	r22, r24
    7a5c:	61 83       	std	Z+1, r22	; 0x01
    7a5e:	08 95       	ret

00007a60 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    7a60:	60 93 66 09 	sts	0x0966, r22	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    7a64:	70 93 67 09 	sts	0x0967, r23	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    7a68:	08 95       	ret

00007a6a <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    7a6a:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    7a6e:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    7a72:	08 95       	ret

00007a74 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    7a74:	60 93 6a 09 	sts	0x096A, r22	; 0x80096a <__TEXT_REGION_LENGTH__+0x70096a>
    7a78:	70 93 6b 09 	sts	0x096B, r23	; 0x80096b <__TEXT_REGION_LENGTH__+0x70096b>
    7a7c:	08 95       	ret

00007a7e <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7a7e:	61 15       	cp	r22, r1
    7a80:	71 05       	cpc	r23, r1
    7a82:	29 f0       	breq	.+10     	; 0x7a8e <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    7a84:	e0 e4       	ldi	r30, 0x40	; 64
    7a86:	f9 e0       	ldi	r31, 0x09	; 9
    7a88:	86 81       	ldd	r24, Z+6	; 0x06
    7a8a:	28 2b       	or	r18, r24
    7a8c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    7a8e:	60 93 6c 23 	sts	0x236C, r22	; 0x80236c <InterruptFuncTable+0xa6>
    7a92:	70 93 6d 23 	sts	0x236D, r23	; 0x80236d <InterruptFuncTable+0xa7>
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    7a96:	40 93 62 24 	sts	0x2462, r20	; 0x802462 <InterruptSenderTable+0xa6>
    7a9a:	50 93 63 24 	sts	0x2463, r21	; 0x802463 <InterruptSenderTable+0xa7>
    7a9e:	08 95       	ret

00007aa0 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7aa0:	61 15       	cp	r22, r1
    7aa2:	71 05       	cpc	r23, r1
    7aa4:	29 f0       	breq	.+10     	; 0x7ab0 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    7aa6:	e0 e4       	ldi	r30, 0x40	; 64
    7aa8:	f9 e0       	ldi	r31, 0x09	; 9
    7aaa:	86 81       	ldd	r24, Z+6	; 0x06
    7aac:	28 2b       	or	r18, r24
    7aae:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    7ab0:	60 93 6e 23 	sts	0x236E, r22	; 0x80236e <InterruptFuncTable+0xa8>
    7ab4:	70 93 6f 23 	sts	0x236F, r23	; 0x80236f <InterruptFuncTable+0xa9>
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    7ab8:	40 93 64 24 	sts	0x2464, r20	; 0x802464 <InterruptSenderTable+0xa8>
    7abc:	50 93 65 24 	sts	0x2465, r21	; 0x802465 <InterruptSenderTable+0xa9>
    7ac0:	08 95       	ret

00007ac2 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7ac2:	61 15       	cp	r22, r1
    7ac4:	71 05       	cpc	r23, r1
    7ac6:	29 f0       	breq	.+10     	; 0x7ad2 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    7ac8:	e0 e4       	ldi	r30, 0x40	; 64
    7aca:	f9 e0       	ldi	r31, 0x09	; 9
    7acc:	87 81       	ldd	r24, Z+7	; 0x07
    7ace:	28 2b       	or	r18, r24
    7ad0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    7ad2:	60 93 70 23 	sts	0x2370, r22	; 0x802370 <InterruptFuncTable+0xaa>
    7ad6:	70 93 71 23 	sts	0x2371, r23	; 0x802371 <InterruptFuncTable+0xab>
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    7ada:	40 93 66 24 	sts	0x2466, r20	; 0x802466 <InterruptSenderTable+0xaa>
    7ade:	50 93 67 24 	sts	0x2467, r21	; 0x802467 <InterruptSenderTable+0xab>
    7ae2:	08 95       	ret

00007ae4 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7ae4:	61 15       	cp	r22, r1
    7ae6:	71 05       	cpc	r23, r1
    7ae8:	29 f0       	breq	.+10     	; 0x7af4 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    7aea:	e0 e4       	ldi	r30, 0x40	; 64
    7aec:	f9 e0       	ldi	r31, 0x09	; 9
    7aee:	87 81       	ldd	r24, Z+7	; 0x07
    7af0:	28 2b       	or	r18, r24
    7af2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    7af4:	60 93 72 23 	sts	0x2372, r22	; 0x802372 <InterruptFuncTable+0xac>
    7af8:	70 93 73 23 	sts	0x2373, r23	; 0x802373 <InterruptFuncTable+0xad>
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    7afc:	40 93 68 24 	sts	0x2468, r20	; 0x802468 <InterruptSenderTable+0xac>
    7b00:	50 93 69 24 	sts	0x2469, r21	; 0x802469 <InterruptSenderTable+0xad>
    7b04:	08 95       	ret

00007b06 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    7b06:	cf 93       	push	r28
    7b08:	df 93       	push	r29
    7b0a:	ec 01       	movw	r28, r24
    7b0c:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <_ZN7CTimer1C1Ev>
    7b10:	82 e8       	ldi	r24, 0x82	; 130
    7b12:	92 e2       	ldi	r25, 0x22	; 34
    7b14:	88 83       	st	Y, r24
    7b16:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    7b18:	df 91       	pop	r29
    7b1a:	cf 91       	pop	r28
    7b1c:	08 95       	ret

00007b1e <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    7b1e:	22 e8       	ldi	r18, 0x82	; 130
    7b20:	32 e2       	ldi	r19, 0x22	; 34
    7b22:	fc 01       	movw	r30, r24
    7b24:	20 83       	st	Z, r18
    7b26:	31 83       	std	Z+1, r19	; 0x01
    7b28:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN7CTimer1D1Ev>
    7b2c:	08 95       	ret

00007b2e <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    7b2e:	fc 01       	movw	r30, r24
    7b30:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7b32:	e0 e0       	ldi	r30, 0x00	; 0
    7b34:	fb e0       	ldi	r31, 0x0B	; 11
    7b36:	80 81       	ld	r24, Z
    7b38:	80 7f       	andi	r24, 0xF0	; 240
    7b3a:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7b3c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    7b3e:	10 a2       	std	Z+32, r1	; 0x20
    7b40:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    7b42:	10 a6       	std	Z+40, r1	; 0x28
    7b44:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    7b46:	12 a6       	std	Z+42, r1	; 0x2a
    7b48:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    7b4a:	14 a6       	std	Z+44, r1	; 0x2c
    7b4c:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    7b4e:	16 a6       	std	Z+46, r1	; 0x2e
    7b50:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    7b52:	16 a2       	std	Z+38, r1	; 0x26
    7b54:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    7b56:	81 81       	ldd	r24, Z+1	; 0x01
    7b58:	88 7f       	andi	r24, 0xF8	; 248
    7b5a:	68 2b       	or	r22, r24
    7b5c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7b5e:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7b60:	17 82       	std	Z+7, r1	; 0x07
    7b62:	08 95       	ret

00007b64 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    7b64:	e0 e0       	ldi	r30, 0x00	; 0
    7b66:	fb e0       	ldi	r31, 0x0B	; 11
    7b68:	66 a3       	std	Z+38, r22	; 0x26
    7b6a:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    7b6c:	20 81       	ld	r18, Z
    7b6e:	20 7f       	andi	r18, 0xF0	; 240
    7b70:	dc 01       	movw	r26, r24
    7b72:	12 96       	adiw	r26, 0x02	; 2
    7b74:	9c 91       	ld	r25, X
    7b76:	82 2f       	mov	r24, r18
    7b78:	89 2b       	or	r24, r25
    7b7a:	80 83       	st	Z, r24
    7b7c:	08 95       	ret

00007b7e <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7b7e:	e0 e0       	ldi	r30, 0x00	; 0
    7b80:	fb e0       	ldi	r31, 0x0B	; 11
    7b82:	80 81       	ld	r24, Z
    7b84:	80 7f       	andi	r24, 0xF0	; 240
    7b86:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    7b88:	10 a2       	std	Z+32, r1	; 0x20
    7b8a:	11 a2       	std	Z+33, r1	; 0x21
    7b8c:	08 95       	ret

00007b8e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    7b8e:	e0 e0       	ldi	r30, 0x00	; 0
    7b90:	fb e0       	ldi	r31, 0x0B	; 11
    7b92:	81 81       	ldd	r24, Z+1	; 0x01
    7b94:	68 2b       	or	r22, r24
    7b96:	61 83       	std	Z+1, r22	; 0x01
    7b98:	08 95       	ret

00007b9a <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    7b9a:	e0 e0       	ldi	r30, 0x00	; 0
    7b9c:	fb e0       	ldi	r31, 0x0B	; 11
    7b9e:	81 81       	ldd	r24, Z+1	; 0x01
    7ba0:	60 95       	com	r22
    7ba2:	68 23       	and	r22, r24
    7ba4:	61 83       	std	Z+1, r22	; 0x01
    7ba6:	08 95       	ret

00007ba8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    7ba8:	e0 e0       	ldi	r30, 0x00	; 0
    7baa:	fb e0       	ldi	r31, 0x0B	; 11
    7bac:	82 81       	ldd	r24, Z+2	; 0x02
    7bae:	62 95       	swap	r22
    7bb0:	6f 70       	andi	r22, 0x0F	; 15
    7bb2:	68 2b       	or	r22, r24
    7bb4:	62 83       	std	Z+2, r22	; 0x02
    7bb6:	08 95       	ret

00007bb8 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    7bb8:	e0 e0       	ldi	r30, 0x00	; 0
    7bba:	fb e0       	ldi	r31, 0x0B	; 11
    7bbc:	82 81       	ldd	r24, Z+2	; 0x02
    7bbe:	62 95       	swap	r22
    7bc0:	6f 70       	andi	r22, 0x0F	; 15
    7bc2:	60 95       	com	r22
    7bc4:	68 23       	and	r22, r24
    7bc6:	62 83       	std	Z+2, r22	; 0x02
    7bc8:	08 95       	ret

00007bca <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PERBUF = value;
    7bca:	60 93 36 0b 	sts	0x0B36, r22	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    7bce:	70 93 37 0b 	sts	0x0B37, r23	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
    7bd2:	08 95       	ret

00007bd4 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    7bd4:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
    7bd8:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
    7bdc:	08 95       	ret

00007bde <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    7bde:	60 93 2a 0b 	sts	0x0B2A, r22	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
    7be2:	70 93 2b 0b 	sts	0x0B2B, r23	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
    7be6:	08 95       	ret

00007be8 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    7be8:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
    7bec:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
    7bf0:	08 95       	ret

00007bf2 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    7bf2:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
    7bf6:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
    7bfa:	08 95       	ret

00007bfc <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7bfc:	61 15       	cp	r22, r1
    7bfe:	71 05       	cpc	r23, r1
    7c00:	29 f0       	breq	.+10     	; 0x7c0c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    7c02:	e0 e0       	ldi	r30, 0x00	; 0
    7c04:	fb e0       	ldi	r31, 0x0B	; 11
    7c06:	86 81       	ldd	r24, Z+6	; 0x06
    7c08:	28 2b       	or	r18, r24
    7c0a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    7c0c:	60 93 9e 23 	sts	0x239E, r22	; 0x80239e <InterruptFuncTable+0xd8>
    7c10:	70 93 9f 23 	sts	0x239F, r23	; 0x80239f <InterruptFuncTable+0xd9>
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    7c14:	40 93 94 24 	sts	0x2494, r20	; 0x802494 <InterruptSenderTable+0xd8>
    7c18:	50 93 95 24 	sts	0x2495, r21	; 0x802495 <InterruptSenderTable+0xd9>
    7c1c:	08 95       	ret

00007c1e <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7c1e:	61 15       	cp	r22, r1
    7c20:	71 05       	cpc	r23, r1
    7c22:	29 f0       	breq	.+10     	; 0x7c2e <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7c24:	e0 e0       	ldi	r30, 0x00	; 0
    7c26:	fb e0       	ldi	r31, 0x0B	; 11
    7c28:	86 81       	ldd	r24, Z+6	; 0x06
    7c2a:	28 2b       	or	r18, r24
    7c2c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    7c2e:	60 93 a0 23 	sts	0x23A0, r22	; 0x8023a0 <InterruptFuncTable+0xda>
    7c32:	70 93 a1 23 	sts	0x23A1, r23	; 0x8023a1 <InterruptFuncTable+0xdb>
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    7c36:	40 93 96 24 	sts	0x2496, r20	; 0x802496 <InterruptSenderTable+0xda>
    7c3a:	50 93 97 24 	sts	0x2497, r21	; 0x802497 <InterruptSenderTable+0xdb>
    7c3e:	08 95       	ret

00007c40 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7c40:	61 15       	cp	r22, r1
    7c42:	71 05       	cpc	r23, r1
    7c44:	29 f0       	breq	.+10     	; 0x7c50 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    7c46:	e0 e0       	ldi	r30, 0x00	; 0
    7c48:	fb e0       	ldi	r31, 0x0B	; 11
    7c4a:	87 81       	ldd	r24, Z+7	; 0x07
    7c4c:	28 2b       	or	r18, r24
    7c4e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    7c50:	60 93 a2 23 	sts	0x23A2, r22	; 0x8023a2 <InterruptFuncTable+0xdc>
    7c54:	70 93 a3 23 	sts	0x23A3, r23	; 0x8023a3 <InterruptFuncTable+0xdd>
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    7c58:	40 93 98 24 	sts	0x2498, r20	; 0x802498 <InterruptSenderTable+0xdc>
    7c5c:	50 93 99 24 	sts	0x2499, r21	; 0x802499 <InterruptSenderTable+0xdd>
    7c60:	08 95       	ret

00007c62 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7c62:	61 15       	cp	r22, r1
    7c64:	71 05       	cpc	r23, r1
    7c66:	29 f0       	breq	.+10     	; 0x7c72 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    7c68:	e0 e0       	ldi	r30, 0x00	; 0
    7c6a:	fb e0       	ldi	r31, 0x0B	; 11
    7c6c:	87 81       	ldd	r24, Z+7	; 0x07
    7c6e:	28 2b       	or	r18, r24
    7c70:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    7c72:	60 93 a4 23 	sts	0x23A4, r22	; 0x8023a4 <InterruptFuncTable+0xde>
    7c76:	70 93 a5 23 	sts	0x23A5, r23	; 0x8023a5 <InterruptFuncTable+0xdf>
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    7c7a:	40 93 9a 24 	sts	0x249A, r20	; 0x80249a <InterruptSenderTable+0xde>
    7c7e:	50 93 9b 24 	sts	0x249B, r21	; 0x80249b <InterruptSenderTable+0xdf>
    7c82:	08 95       	ret

00007c84 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    7c84:	61 15       	cp	r22, r1
    7c86:	71 05       	cpc	r23, r1
    7c88:	29 f0       	breq	.+10     	; 0x7c94 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    7c8a:	e0 e0       	ldi	r30, 0x00	; 0
    7c8c:	fb e0       	ldi	r31, 0x0B	; 11
    7c8e:	87 81       	ldd	r24, Z+7	; 0x07
    7c90:	28 2b       	or	r18, r24
    7c92:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    7c94:	60 93 a6 23 	sts	0x23A6, r22	; 0x8023a6 <InterruptFuncTable+0xe0>
    7c98:	70 93 a7 23 	sts	0x23A7, r23	; 0x8023a7 <InterruptFuncTable+0xe1>
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    7c9c:	40 93 9c 24 	sts	0x249C, r20	; 0x80249c <InterruptSenderTable+0xe0>
    7ca0:	50 93 9d 24 	sts	0x249D, r21	; 0x80249d <InterruptSenderTable+0xe1>
    7ca4:	08 95       	ret

00007ca6 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    7ca6:	61 15       	cp	r22, r1
    7ca8:	71 05       	cpc	r23, r1
    7caa:	29 f0       	breq	.+10     	; 0x7cb6 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7cac:	e0 e0       	ldi	r30, 0x00	; 0
    7cae:	fb e0       	ldi	r31, 0x0B	; 11
    7cb0:	87 81       	ldd	r24, Z+7	; 0x07
    7cb2:	28 2b       	or	r18, r24
    7cb4:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    7cb6:	60 93 a8 23 	sts	0x23A8, r22	; 0x8023a8 <InterruptFuncTable+0xe2>
    7cba:	70 93 a9 23 	sts	0x23A9, r23	; 0x8023a9 <InterruptFuncTable+0xe3>
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    7cbe:	40 93 9e 24 	sts	0x249E, r20	; 0x80249e <InterruptSenderTable+0xe2>
    7cc2:	50 93 9f 24 	sts	0x249F, r21	; 0x80249f <InterruptSenderTable+0xe3>
    7cc6:	08 95       	ret

00007cc8 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    7cc8:	cf 93       	push	r28
    7cca:	df 93       	push	r29
    7ccc:	ec 01       	movw	r28, r24
    7cce:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN6CTimerC1Ev>
    7cd2:	80 ea       	ldi	r24, 0xA0	; 160
    7cd4:	92 e2       	ldi	r25, 0x22	; 34
    7cd6:	88 83       	st	Y, r24
    7cd8:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    7cda:	df 91       	pop	r29
    7cdc:	cf 91       	pop	r28
    7cde:	08 95       	ret

00007ce0 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    7ce0:	20 ea       	ldi	r18, 0xA0	; 160
    7ce2:	32 e2       	ldi	r19, 0x22	; 34
    7ce4:	fc 01       	movw	r30, r24
    7ce6:	20 83       	st	Z, r18
    7ce8:	31 83       	std	Z+1, r19	; 0x01
    7cea:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN6CTimerD1Ev>
    7cee:	08 95       	ret

00007cf0 <__fixsfsi>:
    7cf0:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
    7cf4:	68 94       	set
    7cf6:	b1 11       	cpse	r27, r1
    7cf8:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_szero>
    7cfc:	08 95       	ret

00007cfe <__fixunssfsi>:
    7cfe:	0e 94 f3 3e 	call	0x7de6	; 0x7de6 <__fp_splitA>
    7d02:	88 f0       	brcs	.+34     	; 0x7d26 <__fixunssfsi+0x28>
    7d04:	9f 57       	subi	r25, 0x7F	; 127
    7d06:	98 f0       	brcs	.+38     	; 0x7d2e <__fixunssfsi+0x30>
    7d08:	b9 2f       	mov	r27, r25
    7d0a:	99 27       	eor	r25, r25
    7d0c:	b7 51       	subi	r27, 0x17	; 23
    7d0e:	b0 f0       	brcs	.+44     	; 0x7d3c <__fixunssfsi+0x3e>
    7d10:	e1 f0       	breq	.+56     	; 0x7d4a <__fixunssfsi+0x4c>
    7d12:	66 0f       	add	r22, r22
    7d14:	77 1f       	adc	r23, r23
    7d16:	88 1f       	adc	r24, r24
    7d18:	99 1f       	adc	r25, r25
    7d1a:	1a f0       	brmi	.+6      	; 0x7d22 <__fixunssfsi+0x24>
    7d1c:	ba 95       	dec	r27
    7d1e:	c9 f7       	brne	.-14     	; 0x7d12 <__fixunssfsi+0x14>
    7d20:	14 c0       	rjmp	.+40     	; 0x7d4a <__fixunssfsi+0x4c>
    7d22:	b1 30       	cpi	r27, 0x01	; 1
    7d24:	91 f0       	breq	.+36     	; 0x7d4a <__fixunssfsi+0x4c>
    7d26:	0e 94 0d 3f 	call	0x7e1a	; 0x7e1a <__fp_zero>
    7d2a:	b1 e0       	ldi	r27, 0x01	; 1
    7d2c:	08 95       	ret
    7d2e:	0c 94 0d 3f 	jmp	0x7e1a	; 0x7e1a <__fp_zero>
    7d32:	67 2f       	mov	r22, r23
    7d34:	78 2f       	mov	r23, r24
    7d36:	88 27       	eor	r24, r24
    7d38:	b8 5f       	subi	r27, 0xF8	; 248
    7d3a:	39 f0       	breq	.+14     	; 0x7d4a <__fixunssfsi+0x4c>
    7d3c:	b9 3f       	cpi	r27, 0xF9	; 249
    7d3e:	cc f3       	brlt	.-14     	; 0x7d32 <__fixunssfsi+0x34>
    7d40:	86 95       	lsr	r24
    7d42:	77 95       	ror	r23
    7d44:	67 95       	ror	r22
    7d46:	b3 95       	inc	r27
    7d48:	d9 f7       	brne	.-10     	; 0x7d40 <__fixunssfsi+0x42>
    7d4a:	3e f4       	brtc	.+14     	; 0x7d5a <__fixunssfsi+0x5c>
    7d4c:	90 95       	com	r25
    7d4e:	80 95       	com	r24
    7d50:	70 95       	com	r23
    7d52:	61 95       	neg	r22
    7d54:	7f 4f       	sbci	r23, 0xFF	; 255
    7d56:	8f 4f       	sbci	r24, 0xFF	; 255
    7d58:	9f 4f       	sbci	r25, 0xFF	; 255
    7d5a:	08 95       	ret

00007d5c <__floatunsisf>:
    7d5c:	e8 94       	clt
    7d5e:	09 c0       	rjmp	.+18     	; 0x7d72 <__floatsisf+0x12>

00007d60 <__floatsisf>:
    7d60:	97 fb       	bst	r25, 7
    7d62:	3e f4       	brtc	.+14     	; 0x7d72 <__floatsisf+0x12>
    7d64:	90 95       	com	r25
    7d66:	80 95       	com	r24
    7d68:	70 95       	com	r23
    7d6a:	61 95       	neg	r22
    7d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    7d70:	9f 4f       	sbci	r25, 0xFF	; 255
    7d72:	99 23       	and	r25, r25
    7d74:	a9 f0       	breq	.+42     	; 0x7da0 <__floatsisf+0x40>
    7d76:	f9 2f       	mov	r31, r25
    7d78:	96 e9       	ldi	r25, 0x96	; 150
    7d7a:	bb 27       	eor	r27, r27
    7d7c:	93 95       	inc	r25
    7d7e:	f6 95       	lsr	r31
    7d80:	87 95       	ror	r24
    7d82:	77 95       	ror	r23
    7d84:	67 95       	ror	r22
    7d86:	b7 95       	ror	r27
    7d88:	f1 11       	cpse	r31, r1
    7d8a:	f8 cf       	rjmp	.-16     	; 0x7d7c <__floatsisf+0x1c>
    7d8c:	fa f4       	brpl	.+62     	; 0x7dcc <__floatsisf+0x6c>
    7d8e:	bb 0f       	add	r27, r27
    7d90:	11 f4       	brne	.+4      	; 0x7d96 <__floatsisf+0x36>
    7d92:	60 ff       	sbrs	r22, 0
    7d94:	1b c0       	rjmp	.+54     	; 0x7dcc <__floatsisf+0x6c>
    7d96:	6f 5f       	subi	r22, 0xFF	; 255
    7d98:	7f 4f       	sbci	r23, 0xFF	; 255
    7d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    7d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d9e:	16 c0       	rjmp	.+44     	; 0x7dcc <__floatsisf+0x6c>
    7da0:	88 23       	and	r24, r24
    7da2:	11 f0       	breq	.+4      	; 0x7da8 <__floatsisf+0x48>
    7da4:	96 e9       	ldi	r25, 0x96	; 150
    7da6:	11 c0       	rjmp	.+34     	; 0x7dca <__floatsisf+0x6a>
    7da8:	77 23       	and	r23, r23
    7daa:	21 f0       	breq	.+8      	; 0x7db4 <__floatsisf+0x54>
    7dac:	9e e8       	ldi	r25, 0x8E	; 142
    7dae:	87 2f       	mov	r24, r23
    7db0:	76 2f       	mov	r23, r22
    7db2:	05 c0       	rjmp	.+10     	; 0x7dbe <__floatsisf+0x5e>
    7db4:	66 23       	and	r22, r22
    7db6:	71 f0       	breq	.+28     	; 0x7dd4 <__floatsisf+0x74>
    7db8:	96 e8       	ldi	r25, 0x86	; 134
    7dba:	86 2f       	mov	r24, r22
    7dbc:	70 e0       	ldi	r23, 0x00	; 0
    7dbe:	60 e0       	ldi	r22, 0x00	; 0
    7dc0:	2a f0       	brmi	.+10     	; 0x7dcc <__floatsisf+0x6c>
    7dc2:	9a 95       	dec	r25
    7dc4:	66 0f       	add	r22, r22
    7dc6:	77 1f       	adc	r23, r23
    7dc8:	88 1f       	adc	r24, r24
    7dca:	da f7       	brpl	.-10     	; 0x7dc2 <__floatsisf+0x62>
    7dcc:	88 0f       	add	r24, r24
    7dce:	96 95       	lsr	r25
    7dd0:	87 95       	ror	r24
    7dd2:	97 f9       	bld	r25, 7
    7dd4:	08 95       	ret

00007dd6 <__fp_split3>:
    7dd6:	57 fd       	sbrc	r21, 7
    7dd8:	90 58       	subi	r25, 0x80	; 128
    7dda:	44 0f       	add	r20, r20
    7ddc:	55 1f       	adc	r21, r21
    7dde:	59 f0       	breq	.+22     	; 0x7df6 <__fp_splitA+0x10>
    7de0:	5f 3f       	cpi	r21, 0xFF	; 255
    7de2:	71 f0       	breq	.+28     	; 0x7e00 <__fp_splitA+0x1a>
    7de4:	47 95       	ror	r20

00007de6 <__fp_splitA>:
    7de6:	88 0f       	add	r24, r24
    7de8:	97 fb       	bst	r25, 7
    7dea:	99 1f       	adc	r25, r25
    7dec:	61 f0       	breq	.+24     	; 0x7e06 <__fp_splitA+0x20>
    7dee:	9f 3f       	cpi	r25, 0xFF	; 255
    7df0:	79 f0       	breq	.+30     	; 0x7e10 <__fp_splitA+0x2a>
    7df2:	87 95       	ror	r24
    7df4:	08 95       	ret
    7df6:	12 16       	cp	r1, r18
    7df8:	13 06       	cpc	r1, r19
    7dfa:	14 06       	cpc	r1, r20
    7dfc:	55 1f       	adc	r21, r21
    7dfe:	f2 cf       	rjmp	.-28     	; 0x7de4 <__fp_split3+0xe>
    7e00:	46 95       	lsr	r20
    7e02:	f1 df       	rcall	.-30     	; 0x7de6 <__fp_splitA>
    7e04:	08 c0       	rjmp	.+16     	; 0x7e16 <__fp_splitA+0x30>
    7e06:	16 16       	cp	r1, r22
    7e08:	17 06       	cpc	r1, r23
    7e0a:	18 06       	cpc	r1, r24
    7e0c:	99 1f       	adc	r25, r25
    7e0e:	f1 cf       	rjmp	.-30     	; 0x7df2 <__fp_splitA+0xc>
    7e10:	86 95       	lsr	r24
    7e12:	71 05       	cpc	r23, r1
    7e14:	61 05       	cpc	r22, r1
    7e16:	08 94       	sec
    7e18:	08 95       	ret

00007e1a <__fp_zero>:
    7e1a:	e8 94       	clt

00007e1c <__fp_szero>:
    7e1c:	bb 27       	eor	r27, r27
    7e1e:	66 27       	eor	r22, r22
    7e20:	77 27       	eor	r23, r23
    7e22:	cb 01       	movw	r24, r22
    7e24:	97 f9       	bld	r25, 7
    7e26:	08 95       	ret

00007e28 <__mulsf3>:
    7e28:	0e 94 27 3f 	call	0x7e4e	; 0x7e4e <__mulsf3x>
    7e2c:	0c 94 98 3f 	jmp	0x7f30	; 0x7f30 <__fp_round>
    7e30:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <__fp_pscA>
    7e34:	38 f0       	brcs	.+14     	; 0x7e44 <__mulsf3+0x1c>
    7e36:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <__fp_pscB>
    7e3a:	20 f0       	brcs	.+8      	; 0x7e44 <__mulsf3+0x1c>
    7e3c:	95 23       	and	r25, r21
    7e3e:	11 f0       	breq	.+4      	; 0x7e44 <__mulsf3+0x1c>
    7e40:	0c 94 81 3f 	jmp	0x7f02	; 0x7f02 <__fp_inf>
    7e44:	0c 94 87 3f 	jmp	0x7f0e	; 0x7f0e <__fp_nan>
    7e48:	11 24       	eor	r1, r1
    7e4a:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_szero>

00007e4e <__mulsf3x>:
    7e4e:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <__fp_split3>
    7e52:	70 f3       	brcs	.-36     	; 0x7e30 <__mulsf3+0x8>

00007e54 <__mulsf3_pse>:
    7e54:	95 9f       	mul	r25, r21
    7e56:	c1 f3       	breq	.-16     	; 0x7e48 <__mulsf3+0x20>
    7e58:	95 0f       	add	r25, r21
    7e5a:	50 e0       	ldi	r21, 0x00	; 0
    7e5c:	55 1f       	adc	r21, r21
    7e5e:	62 9f       	mul	r22, r18
    7e60:	f0 01       	movw	r30, r0
    7e62:	72 9f       	mul	r23, r18
    7e64:	bb 27       	eor	r27, r27
    7e66:	f0 0d       	add	r31, r0
    7e68:	b1 1d       	adc	r27, r1
    7e6a:	63 9f       	mul	r22, r19
    7e6c:	aa 27       	eor	r26, r26
    7e6e:	f0 0d       	add	r31, r0
    7e70:	b1 1d       	adc	r27, r1
    7e72:	aa 1f       	adc	r26, r26
    7e74:	64 9f       	mul	r22, r20
    7e76:	66 27       	eor	r22, r22
    7e78:	b0 0d       	add	r27, r0
    7e7a:	a1 1d       	adc	r26, r1
    7e7c:	66 1f       	adc	r22, r22
    7e7e:	82 9f       	mul	r24, r18
    7e80:	22 27       	eor	r18, r18
    7e82:	b0 0d       	add	r27, r0
    7e84:	a1 1d       	adc	r26, r1
    7e86:	62 1f       	adc	r22, r18
    7e88:	73 9f       	mul	r23, r19
    7e8a:	b0 0d       	add	r27, r0
    7e8c:	a1 1d       	adc	r26, r1
    7e8e:	62 1f       	adc	r22, r18
    7e90:	83 9f       	mul	r24, r19
    7e92:	a0 0d       	add	r26, r0
    7e94:	61 1d       	adc	r22, r1
    7e96:	22 1f       	adc	r18, r18
    7e98:	74 9f       	mul	r23, r20
    7e9a:	33 27       	eor	r19, r19
    7e9c:	a0 0d       	add	r26, r0
    7e9e:	61 1d       	adc	r22, r1
    7ea0:	23 1f       	adc	r18, r19
    7ea2:	84 9f       	mul	r24, r20
    7ea4:	60 0d       	add	r22, r0
    7ea6:	21 1d       	adc	r18, r1
    7ea8:	82 2f       	mov	r24, r18
    7eaa:	76 2f       	mov	r23, r22
    7eac:	6a 2f       	mov	r22, r26
    7eae:	11 24       	eor	r1, r1
    7eb0:	9f 57       	subi	r25, 0x7F	; 127
    7eb2:	50 40       	sbci	r21, 0x00	; 0
    7eb4:	9a f0       	brmi	.+38     	; 0x7edc <__mulsf3_pse+0x88>
    7eb6:	f1 f0       	breq	.+60     	; 0x7ef4 <__mulsf3_pse+0xa0>
    7eb8:	88 23       	and	r24, r24
    7eba:	4a f0       	brmi	.+18     	; 0x7ece <__mulsf3_pse+0x7a>
    7ebc:	ee 0f       	add	r30, r30
    7ebe:	ff 1f       	adc	r31, r31
    7ec0:	bb 1f       	adc	r27, r27
    7ec2:	66 1f       	adc	r22, r22
    7ec4:	77 1f       	adc	r23, r23
    7ec6:	88 1f       	adc	r24, r24
    7ec8:	91 50       	subi	r25, 0x01	; 1
    7eca:	50 40       	sbci	r21, 0x00	; 0
    7ecc:	a9 f7       	brne	.-22     	; 0x7eb8 <__mulsf3_pse+0x64>
    7ece:	9e 3f       	cpi	r25, 0xFE	; 254
    7ed0:	51 05       	cpc	r21, r1
    7ed2:	80 f0       	brcs	.+32     	; 0x7ef4 <__mulsf3_pse+0xa0>
    7ed4:	0c 94 81 3f 	jmp	0x7f02	; 0x7f02 <__fp_inf>
    7ed8:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_szero>
    7edc:	5f 3f       	cpi	r21, 0xFF	; 255
    7ede:	e4 f3       	brlt	.-8      	; 0x7ed8 <__mulsf3_pse+0x84>
    7ee0:	98 3e       	cpi	r25, 0xE8	; 232
    7ee2:	d4 f3       	brlt	.-12     	; 0x7ed8 <__mulsf3_pse+0x84>
    7ee4:	86 95       	lsr	r24
    7ee6:	77 95       	ror	r23
    7ee8:	67 95       	ror	r22
    7eea:	b7 95       	ror	r27
    7eec:	f7 95       	ror	r31
    7eee:	e7 95       	ror	r30
    7ef0:	9f 5f       	subi	r25, 0xFF	; 255
    7ef2:	c1 f7       	brne	.-16     	; 0x7ee4 <__mulsf3_pse+0x90>
    7ef4:	fe 2b       	or	r31, r30
    7ef6:	88 0f       	add	r24, r24
    7ef8:	91 1d       	adc	r25, r1
    7efa:	96 95       	lsr	r25
    7efc:	87 95       	ror	r24
    7efe:	97 f9       	bld	r25, 7
    7f00:	08 95       	ret

00007f02 <__fp_inf>:
    7f02:	97 f9       	bld	r25, 7
    7f04:	9f 67       	ori	r25, 0x7F	; 127
    7f06:	80 e8       	ldi	r24, 0x80	; 128
    7f08:	70 e0       	ldi	r23, 0x00	; 0
    7f0a:	60 e0       	ldi	r22, 0x00	; 0
    7f0c:	08 95       	ret

00007f0e <__fp_nan>:
    7f0e:	9f ef       	ldi	r25, 0xFF	; 255
    7f10:	80 ec       	ldi	r24, 0xC0	; 192
    7f12:	08 95       	ret

00007f14 <__fp_pscA>:
    7f14:	00 24       	eor	r0, r0
    7f16:	0a 94       	dec	r0
    7f18:	16 16       	cp	r1, r22
    7f1a:	17 06       	cpc	r1, r23
    7f1c:	18 06       	cpc	r1, r24
    7f1e:	09 06       	cpc	r0, r25
    7f20:	08 95       	ret

00007f22 <__fp_pscB>:
    7f22:	00 24       	eor	r0, r0
    7f24:	0a 94       	dec	r0
    7f26:	12 16       	cp	r1, r18
    7f28:	13 06       	cpc	r1, r19
    7f2a:	14 06       	cpc	r1, r20
    7f2c:	05 06       	cpc	r0, r21
    7f2e:	08 95       	ret

00007f30 <__fp_round>:
    7f30:	09 2e       	mov	r0, r25
    7f32:	03 94       	inc	r0
    7f34:	00 0c       	add	r0, r0
    7f36:	11 f4       	brne	.+4      	; 0x7f3c <__fp_round+0xc>
    7f38:	88 23       	and	r24, r24
    7f3a:	52 f0       	brmi	.+20     	; 0x7f50 <__fp_round+0x20>
    7f3c:	bb 0f       	add	r27, r27
    7f3e:	40 f4       	brcc	.+16     	; 0x7f50 <__fp_round+0x20>
    7f40:	bf 2b       	or	r27, r31
    7f42:	11 f4       	brne	.+4      	; 0x7f48 <__fp_round+0x18>
    7f44:	60 ff       	sbrs	r22, 0
    7f46:	04 c0       	rjmp	.+8      	; 0x7f50 <__fp_round+0x20>
    7f48:	6f 5f       	subi	r22, 0xFF	; 255
    7f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    7f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f50:	08 95       	ret

00007f52 <__udivmodhi4>:
    7f52:	aa 1b       	sub	r26, r26
    7f54:	bb 1b       	sub	r27, r27
    7f56:	51 e1       	ldi	r21, 0x11	; 17
    7f58:	07 c0       	rjmp	.+14     	; 0x7f68 <__udivmodhi4_ep>

00007f5a <__udivmodhi4_loop>:
    7f5a:	aa 1f       	adc	r26, r26
    7f5c:	bb 1f       	adc	r27, r27
    7f5e:	a6 17       	cp	r26, r22
    7f60:	b7 07       	cpc	r27, r23
    7f62:	10 f0       	brcs	.+4      	; 0x7f68 <__udivmodhi4_ep>
    7f64:	a6 1b       	sub	r26, r22
    7f66:	b7 0b       	sbc	r27, r23

00007f68 <__udivmodhi4_ep>:
    7f68:	88 1f       	adc	r24, r24
    7f6a:	99 1f       	adc	r25, r25
    7f6c:	5a 95       	dec	r21
    7f6e:	a9 f7       	brne	.-22     	; 0x7f5a <__udivmodhi4_loop>
    7f70:	80 95       	com	r24
    7f72:	90 95       	com	r25
    7f74:	bc 01       	movw	r22, r24
    7f76:	cd 01       	movw	r24, r26
    7f78:	08 95       	ret

00007f7a <__divmodhi4>:
    7f7a:	97 fb       	bst	r25, 7
    7f7c:	07 2e       	mov	r0, r23
    7f7e:	16 f4       	brtc	.+4      	; 0x7f84 <__divmodhi4+0xa>
    7f80:	00 94       	com	r0
    7f82:	07 d0       	rcall	.+14     	; 0x7f92 <__divmodhi4_neg1>
    7f84:	77 fd       	sbrc	r23, 7
    7f86:	09 d0       	rcall	.+18     	; 0x7f9a <__divmodhi4_neg2>
    7f88:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__udivmodhi4>
    7f8c:	07 fc       	sbrc	r0, 7
    7f8e:	05 d0       	rcall	.+10     	; 0x7f9a <__divmodhi4_neg2>
    7f90:	3e f4       	brtc	.+14     	; 0x7fa0 <__divmodhi4_exit>

00007f92 <__divmodhi4_neg1>:
    7f92:	90 95       	com	r25
    7f94:	81 95       	neg	r24
    7f96:	9f 4f       	sbci	r25, 0xFF	; 255
    7f98:	08 95       	ret

00007f9a <__divmodhi4_neg2>:
    7f9a:	70 95       	com	r23
    7f9c:	61 95       	neg	r22
    7f9e:	7f 4f       	sbci	r23, 0xFF	; 255

00007fa0 <__divmodhi4_exit>:
    7fa0:	08 95       	ret

00007fa2 <__udivmodsi4>:
    7fa2:	a1 e2       	ldi	r26, 0x21	; 33
    7fa4:	1a 2e       	mov	r1, r26
    7fa6:	aa 1b       	sub	r26, r26
    7fa8:	bb 1b       	sub	r27, r27
    7faa:	fd 01       	movw	r30, r26
    7fac:	0d c0       	rjmp	.+26     	; 0x7fc8 <__udivmodsi4_ep>

00007fae <__udivmodsi4_loop>:
    7fae:	aa 1f       	adc	r26, r26
    7fb0:	bb 1f       	adc	r27, r27
    7fb2:	ee 1f       	adc	r30, r30
    7fb4:	ff 1f       	adc	r31, r31
    7fb6:	a2 17       	cp	r26, r18
    7fb8:	b3 07       	cpc	r27, r19
    7fba:	e4 07       	cpc	r30, r20
    7fbc:	f5 07       	cpc	r31, r21
    7fbe:	20 f0       	brcs	.+8      	; 0x7fc8 <__udivmodsi4_ep>
    7fc0:	a2 1b       	sub	r26, r18
    7fc2:	b3 0b       	sbc	r27, r19
    7fc4:	e4 0b       	sbc	r30, r20
    7fc6:	f5 0b       	sbc	r31, r21

00007fc8 <__udivmodsi4_ep>:
    7fc8:	66 1f       	adc	r22, r22
    7fca:	77 1f       	adc	r23, r23
    7fcc:	88 1f       	adc	r24, r24
    7fce:	99 1f       	adc	r25, r25
    7fd0:	1a 94       	dec	r1
    7fd2:	69 f7       	brne	.-38     	; 0x7fae <__udivmodsi4_loop>
    7fd4:	60 95       	com	r22
    7fd6:	70 95       	com	r23
    7fd8:	80 95       	com	r24
    7fda:	90 95       	com	r25
    7fdc:	9b 01       	movw	r18, r22
    7fde:	ac 01       	movw	r20, r24
    7fe0:	bd 01       	movw	r22, r26
    7fe2:	cf 01       	movw	r24, r30
    7fe4:	08 95       	ret

00007fe6 <__divmodsi4>:
    7fe6:	05 2e       	mov	r0, r21
    7fe8:	97 fb       	bst	r25, 7
    7fea:	1e f4       	brtc	.+6      	; 0x7ff2 <__divmodsi4+0xc>
    7fec:	00 94       	com	r0
    7fee:	0e 94 0a 40 	call	0x8014	; 0x8014 <__negsi2>
    7ff2:	57 fd       	sbrc	r21, 7
    7ff4:	07 d0       	rcall	.+14     	; 0x8004 <__divmodsi4_neg2>
    7ff6:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__udivmodsi4>
    7ffa:	07 fc       	sbrc	r0, 7
    7ffc:	03 d0       	rcall	.+6      	; 0x8004 <__divmodsi4_neg2>
    7ffe:	4e f4       	brtc	.+18     	; 0x8012 <__divmodsi4_exit>
    8000:	0c 94 0a 40 	jmp	0x8014	; 0x8014 <__negsi2>

00008004 <__divmodsi4_neg2>:
    8004:	50 95       	com	r21
    8006:	40 95       	com	r20
    8008:	30 95       	com	r19
    800a:	21 95       	neg	r18
    800c:	3f 4f       	sbci	r19, 0xFF	; 255
    800e:	4f 4f       	sbci	r20, 0xFF	; 255
    8010:	5f 4f       	sbci	r21, 0xFF	; 255

00008012 <__divmodsi4_exit>:
    8012:	08 95       	ret

00008014 <__negsi2>:
    8014:	90 95       	com	r25
    8016:	80 95       	com	r24
    8018:	70 95       	com	r23
    801a:	61 95       	neg	r22
    801c:	7f 4f       	sbci	r23, 0xFF	; 255
    801e:	8f 4f       	sbci	r24, 0xFF	; 255
    8020:	9f 4f       	sbci	r25, 0xFF	; 255
    8022:	08 95       	ret

00008024 <__tablejump2__>:
    8024:	ee 0f       	add	r30, r30
    8026:	ff 1f       	adc	r31, r31
    8028:	88 1f       	adc	r24, r24
    802a:	8b bf       	out	0x3b, r24	; 59
    802c:	07 90       	elpm	r0, Z+
    802e:	f6 91       	elpm	r31, Z
    8030:	e0 2d       	mov	r30, r0
    8032:	19 94       	eijmp

00008034 <__umulhisi3>:
    8034:	a2 9f       	mul	r26, r18
    8036:	b0 01       	movw	r22, r0
    8038:	b3 9f       	mul	r27, r19
    803a:	c0 01       	movw	r24, r0
    803c:	a3 9f       	mul	r26, r19
    803e:	70 0d       	add	r23, r0
    8040:	81 1d       	adc	r24, r1
    8042:	11 24       	eor	r1, r1
    8044:	91 1d       	adc	r25, r1
    8046:	b2 9f       	mul	r27, r18
    8048:	70 0d       	add	r23, r0
    804a:	81 1d       	adc	r24, r1
    804c:	11 24       	eor	r1, r1
    804e:	91 1d       	adc	r25, r1
    8050:	08 95       	ret

00008052 <__muluhisi3>:
    8052:	0e 94 1a 40 	call	0x8034	; 0x8034 <__umulhisi3>
    8056:	a5 9f       	mul	r26, r21
    8058:	90 0d       	add	r25, r0
    805a:	b4 9f       	mul	r27, r20
    805c:	90 0d       	add	r25, r0
    805e:	a4 9f       	mul	r26, r20
    8060:	80 0d       	add	r24, r0
    8062:	91 1d       	adc	r25, r1
    8064:	11 24       	eor	r1, r1
    8066:	08 95       	ret

00008068 <malloc>:
    8068:	cf 93       	push	r28
    806a:	df 93       	push	r29
    806c:	82 30       	cpi	r24, 0x02	; 2
    806e:	91 05       	cpc	r25, r1
    8070:	10 f4       	brcc	.+4      	; 0x8076 <malloc+0xe>
    8072:	82 e0       	ldi	r24, 0x02	; 2
    8074:	90 e0       	ldi	r25, 0x00	; 0
    8076:	e0 91 2d 26 	lds	r30, 0x262D	; 0x80262d <__flp>
    807a:	f0 91 2e 26 	lds	r31, 0x262E	; 0x80262e <__flp+0x1>
    807e:	20 e0       	ldi	r18, 0x00	; 0
    8080:	30 e0       	ldi	r19, 0x00	; 0
    8082:	c0 e0       	ldi	r28, 0x00	; 0
    8084:	d0 e0       	ldi	r29, 0x00	; 0
    8086:	30 97       	sbiw	r30, 0x00	; 0
    8088:	11 f1       	breq	.+68     	; 0x80ce <malloc+0x66>
    808a:	40 81       	ld	r20, Z
    808c:	51 81       	ldd	r21, Z+1	; 0x01
    808e:	48 17       	cp	r20, r24
    8090:	59 07       	cpc	r21, r25
    8092:	c0 f0       	brcs	.+48     	; 0x80c4 <malloc+0x5c>
    8094:	48 17       	cp	r20, r24
    8096:	59 07       	cpc	r21, r25
    8098:	61 f4       	brne	.+24     	; 0x80b2 <malloc+0x4a>
    809a:	82 81       	ldd	r24, Z+2	; 0x02
    809c:	93 81       	ldd	r25, Z+3	; 0x03
    809e:	20 97       	sbiw	r28, 0x00	; 0
    80a0:	19 f0       	breq	.+6      	; 0x80a8 <malloc+0x40>
    80a2:	8a 83       	std	Y+2, r24	; 0x02
    80a4:	9b 83       	std	Y+3, r25	; 0x03
    80a6:	2b c0       	rjmp	.+86     	; 0x80fe <malloc+0x96>
    80a8:	80 93 2d 26 	sts	0x262D, r24	; 0x80262d <__flp>
    80ac:	90 93 2e 26 	sts	0x262E, r25	; 0x80262e <__flp+0x1>
    80b0:	26 c0       	rjmp	.+76     	; 0x80fe <malloc+0x96>
    80b2:	21 15       	cp	r18, r1
    80b4:	31 05       	cpc	r19, r1
    80b6:	19 f0       	breq	.+6      	; 0x80be <malloc+0x56>
    80b8:	42 17       	cp	r20, r18
    80ba:	53 07       	cpc	r21, r19
    80bc:	18 f4       	brcc	.+6      	; 0x80c4 <malloc+0x5c>
    80be:	9a 01       	movw	r18, r20
    80c0:	be 01       	movw	r22, r28
    80c2:	df 01       	movw	r26, r30
    80c4:	ef 01       	movw	r28, r30
    80c6:	02 80       	ldd	r0, Z+2	; 0x02
    80c8:	f3 81       	ldd	r31, Z+3	; 0x03
    80ca:	e0 2d       	mov	r30, r0
    80cc:	dc cf       	rjmp	.-72     	; 0x8086 <malloc+0x1e>
    80ce:	21 15       	cp	r18, r1
    80d0:	31 05       	cpc	r19, r1
    80d2:	09 f1       	breq	.+66     	; 0x8116 <malloc+0xae>
    80d4:	28 1b       	sub	r18, r24
    80d6:	39 0b       	sbc	r19, r25
    80d8:	24 30       	cpi	r18, 0x04	; 4
    80da:	31 05       	cpc	r19, r1
    80dc:	90 f4       	brcc	.+36     	; 0x8102 <malloc+0x9a>
    80de:	12 96       	adiw	r26, 0x02	; 2
    80e0:	8d 91       	ld	r24, X+
    80e2:	9c 91       	ld	r25, X
    80e4:	13 97       	sbiw	r26, 0x03	; 3
    80e6:	61 15       	cp	r22, r1
    80e8:	71 05       	cpc	r23, r1
    80ea:	21 f0       	breq	.+8      	; 0x80f4 <malloc+0x8c>
    80ec:	fb 01       	movw	r30, r22
    80ee:	82 83       	std	Z+2, r24	; 0x02
    80f0:	93 83       	std	Z+3, r25	; 0x03
    80f2:	04 c0       	rjmp	.+8      	; 0x80fc <malloc+0x94>
    80f4:	80 93 2d 26 	sts	0x262D, r24	; 0x80262d <__flp>
    80f8:	90 93 2e 26 	sts	0x262E, r25	; 0x80262e <__flp+0x1>
    80fc:	fd 01       	movw	r30, r26
    80fe:	32 96       	adiw	r30, 0x02	; 2
    8100:	44 c0       	rjmp	.+136    	; 0x818a <malloc+0x122>
    8102:	fd 01       	movw	r30, r26
    8104:	e2 0f       	add	r30, r18
    8106:	f3 1f       	adc	r31, r19
    8108:	81 93       	st	Z+, r24
    810a:	91 93       	st	Z+, r25
    810c:	22 50       	subi	r18, 0x02	; 2
    810e:	31 09       	sbc	r19, r1
    8110:	2d 93       	st	X+, r18
    8112:	3c 93       	st	X, r19
    8114:	3a c0       	rjmp	.+116    	; 0x818a <malloc+0x122>
    8116:	20 91 2b 26 	lds	r18, 0x262B	; 0x80262b <__brkval>
    811a:	30 91 2c 26 	lds	r19, 0x262C	; 0x80262c <__brkval+0x1>
    811e:	23 2b       	or	r18, r19
    8120:	41 f4       	brne	.+16     	; 0x8132 <malloc+0xca>
    8122:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    8126:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    812a:	20 93 2b 26 	sts	0x262B, r18	; 0x80262b <__brkval>
    812e:	30 93 2c 26 	sts	0x262C, r19	; 0x80262c <__brkval+0x1>
    8132:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    8136:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    813a:	21 15       	cp	r18, r1
    813c:	31 05       	cpc	r19, r1
    813e:	41 f4       	brne	.+16     	; 0x8150 <malloc+0xe8>
    8140:	2d b7       	in	r18, 0x3d	; 61
    8142:	3e b7       	in	r19, 0x3e	; 62
    8144:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    8148:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    814c:	24 1b       	sub	r18, r20
    814e:	35 0b       	sbc	r19, r21
    8150:	e0 91 2b 26 	lds	r30, 0x262B	; 0x80262b <__brkval>
    8154:	f0 91 2c 26 	lds	r31, 0x262C	; 0x80262c <__brkval+0x1>
    8158:	e2 17       	cp	r30, r18
    815a:	f3 07       	cpc	r31, r19
    815c:	a0 f4       	brcc	.+40     	; 0x8186 <malloc+0x11e>
    815e:	2e 1b       	sub	r18, r30
    8160:	3f 0b       	sbc	r19, r31
    8162:	28 17       	cp	r18, r24
    8164:	39 07       	cpc	r19, r25
    8166:	78 f0       	brcs	.+30     	; 0x8186 <malloc+0x11e>
    8168:	ac 01       	movw	r20, r24
    816a:	4e 5f       	subi	r20, 0xFE	; 254
    816c:	5f 4f       	sbci	r21, 0xFF	; 255
    816e:	24 17       	cp	r18, r20
    8170:	35 07       	cpc	r19, r21
    8172:	48 f0       	brcs	.+18     	; 0x8186 <malloc+0x11e>
    8174:	4e 0f       	add	r20, r30
    8176:	5f 1f       	adc	r21, r31
    8178:	40 93 2b 26 	sts	0x262B, r20	; 0x80262b <__brkval>
    817c:	50 93 2c 26 	sts	0x262C, r21	; 0x80262c <__brkval+0x1>
    8180:	81 93       	st	Z+, r24
    8182:	91 93       	st	Z+, r25
    8184:	02 c0       	rjmp	.+4      	; 0x818a <malloc+0x122>
    8186:	e0 e0       	ldi	r30, 0x00	; 0
    8188:	f0 e0       	ldi	r31, 0x00	; 0
    818a:	cf 01       	movw	r24, r30
    818c:	df 91       	pop	r29
    818e:	cf 91       	pop	r28
    8190:	08 95       	ret

00008192 <free>:
    8192:	0f 93       	push	r16
    8194:	1f 93       	push	r17
    8196:	cf 93       	push	r28
    8198:	df 93       	push	r29
    819a:	00 97       	sbiw	r24, 0x00	; 0
    819c:	09 f4       	brne	.+2      	; 0x81a0 <free+0xe>
    819e:	8c c0       	rjmp	.+280    	; 0x82b8 <free+0x126>
    81a0:	fc 01       	movw	r30, r24
    81a2:	32 97       	sbiw	r30, 0x02	; 2
    81a4:	12 82       	std	Z+2, r1	; 0x02
    81a6:	13 82       	std	Z+3, r1	; 0x03
    81a8:	00 91 2d 26 	lds	r16, 0x262D	; 0x80262d <__flp>
    81ac:	10 91 2e 26 	lds	r17, 0x262E	; 0x80262e <__flp+0x1>
    81b0:	01 15       	cp	r16, r1
    81b2:	11 05       	cpc	r17, r1
    81b4:	81 f4       	brne	.+32     	; 0x81d6 <free+0x44>
    81b6:	20 81       	ld	r18, Z
    81b8:	31 81       	ldd	r19, Z+1	; 0x01
    81ba:	82 0f       	add	r24, r18
    81bc:	93 1f       	adc	r25, r19
    81be:	20 91 2b 26 	lds	r18, 0x262B	; 0x80262b <__brkval>
    81c2:	30 91 2c 26 	lds	r19, 0x262C	; 0x80262c <__brkval+0x1>
    81c6:	28 17       	cp	r18, r24
    81c8:	39 07       	cpc	r19, r25
    81ca:	79 f5       	brne	.+94     	; 0x822a <free+0x98>
    81cc:	e0 93 2b 26 	sts	0x262B, r30	; 0x80262b <__brkval>
    81d0:	f0 93 2c 26 	sts	0x262C, r31	; 0x80262c <__brkval+0x1>
    81d4:	71 c0       	rjmp	.+226    	; 0x82b8 <free+0x126>
    81d6:	d8 01       	movw	r26, r16
    81d8:	40 e0       	ldi	r20, 0x00	; 0
    81da:	50 e0       	ldi	r21, 0x00	; 0
    81dc:	ae 17       	cp	r26, r30
    81de:	bf 07       	cpc	r27, r31
    81e0:	50 f4       	brcc	.+20     	; 0x81f6 <free+0x64>
    81e2:	12 96       	adiw	r26, 0x02	; 2
    81e4:	2d 91       	ld	r18, X+
    81e6:	3c 91       	ld	r19, X
    81e8:	13 97       	sbiw	r26, 0x03	; 3
    81ea:	ad 01       	movw	r20, r26
    81ec:	21 15       	cp	r18, r1
    81ee:	31 05       	cpc	r19, r1
    81f0:	09 f1       	breq	.+66     	; 0x8234 <free+0xa2>
    81f2:	d9 01       	movw	r26, r18
    81f4:	f3 cf       	rjmp	.-26     	; 0x81dc <free+0x4a>
    81f6:	9d 01       	movw	r18, r26
    81f8:	da 01       	movw	r26, r20
    81fa:	22 83       	std	Z+2, r18	; 0x02
    81fc:	33 83       	std	Z+3, r19	; 0x03
    81fe:	60 81       	ld	r22, Z
    8200:	71 81       	ldd	r23, Z+1	; 0x01
    8202:	86 0f       	add	r24, r22
    8204:	97 1f       	adc	r25, r23
    8206:	82 17       	cp	r24, r18
    8208:	93 07       	cpc	r25, r19
    820a:	69 f4       	brne	.+26     	; 0x8226 <free+0x94>
    820c:	ec 01       	movw	r28, r24
    820e:	28 81       	ld	r18, Y
    8210:	39 81       	ldd	r19, Y+1	; 0x01
    8212:	26 0f       	add	r18, r22
    8214:	37 1f       	adc	r19, r23
    8216:	2e 5f       	subi	r18, 0xFE	; 254
    8218:	3f 4f       	sbci	r19, 0xFF	; 255
    821a:	20 83       	st	Z, r18
    821c:	31 83       	std	Z+1, r19	; 0x01
    821e:	8a 81       	ldd	r24, Y+2	; 0x02
    8220:	9b 81       	ldd	r25, Y+3	; 0x03
    8222:	82 83       	std	Z+2, r24	; 0x02
    8224:	93 83       	std	Z+3, r25	; 0x03
    8226:	45 2b       	or	r20, r21
    8228:	29 f4       	brne	.+10     	; 0x8234 <free+0xa2>
    822a:	e0 93 2d 26 	sts	0x262D, r30	; 0x80262d <__flp>
    822e:	f0 93 2e 26 	sts	0x262E, r31	; 0x80262e <__flp+0x1>
    8232:	42 c0       	rjmp	.+132    	; 0x82b8 <free+0x126>
    8234:	12 96       	adiw	r26, 0x02	; 2
    8236:	ed 93       	st	X+, r30
    8238:	fc 93       	st	X, r31
    823a:	13 97       	sbiw	r26, 0x03	; 3
    823c:	ed 01       	movw	r28, r26
    823e:	49 91       	ld	r20, Y+
    8240:	59 91       	ld	r21, Y+
    8242:	9e 01       	movw	r18, r28
    8244:	24 0f       	add	r18, r20
    8246:	35 1f       	adc	r19, r21
    8248:	e2 17       	cp	r30, r18
    824a:	f3 07       	cpc	r31, r19
    824c:	71 f4       	brne	.+28     	; 0x826a <free+0xd8>
    824e:	80 81       	ld	r24, Z
    8250:	91 81       	ldd	r25, Z+1	; 0x01
    8252:	84 0f       	add	r24, r20
    8254:	95 1f       	adc	r25, r21
    8256:	02 96       	adiw	r24, 0x02	; 2
    8258:	8d 93       	st	X+, r24
    825a:	9c 93       	st	X, r25
    825c:	11 97       	sbiw	r26, 0x01	; 1
    825e:	82 81       	ldd	r24, Z+2	; 0x02
    8260:	93 81       	ldd	r25, Z+3	; 0x03
    8262:	12 96       	adiw	r26, 0x02	; 2
    8264:	8d 93       	st	X+, r24
    8266:	9c 93       	st	X, r25
    8268:	13 97       	sbiw	r26, 0x03	; 3
    826a:	e0 e0       	ldi	r30, 0x00	; 0
    826c:	f0 e0       	ldi	r31, 0x00	; 0
    826e:	d8 01       	movw	r26, r16
    8270:	12 96       	adiw	r26, 0x02	; 2
    8272:	8d 91       	ld	r24, X+
    8274:	9c 91       	ld	r25, X
    8276:	13 97       	sbiw	r26, 0x03	; 3
    8278:	00 97       	sbiw	r24, 0x00	; 0
    827a:	19 f0       	breq	.+6      	; 0x8282 <free+0xf0>
    827c:	f8 01       	movw	r30, r16
    827e:	8c 01       	movw	r16, r24
    8280:	f6 cf       	rjmp	.-20     	; 0x826e <free+0xdc>
    8282:	8d 91       	ld	r24, X+
    8284:	9c 91       	ld	r25, X
    8286:	98 01       	movw	r18, r16
    8288:	2e 5f       	subi	r18, 0xFE	; 254
    828a:	3f 4f       	sbci	r19, 0xFF	; 255
    828c:	82 0f       	add	r24, r18
    828e:	93 1f       	adc	r25, r19
    8290:	20 91 2b 26 	lds	r18, 0x262B	; 0x80262b <__brkval>
    8294:	30 91 2c 26 	lds	r19, 0x262C	; 0x80262c <__brkval+0x1>
    8298:	28 17       	cp	r18, r24
    829a:	39 07       	cpc	r19, r25
    829c:	69 f4       	brne	.+26     	; 0x82b8 <free+0x126>
    829e:	30 97       	sbiw	r30, 0x00	; 0
    82a0:	29 f4       	brne	.+10     	; 0x82ac <free+0x11a>
    82a2:	10 92 2d 26 	sts	0x262D, r1	; 0x80262d <__flp>
    82a6:	10 92 2e 26 	sts	0x262E, r1	; 0x80262e <__flp+0x1>
    82aa:	02 c0       	rjmp	.+4      	; 0x82b0 <free+0x11e>
    82ac:	12 82       	std	Z+2, r1	; 0x02
    82ae:	13 82       	std	Z+3, r1	; 0x03
    82b0:	00 93 2b 26 	sts	0x262B, r16	; 0x80262b <__brkval>
    82b4:	10 93 2c 26 	sts	0x262C, r17	; 0x80262c <__brkval+0x1>
    82b8:	df 91       	pop	r29
    82ba:	cf 91       	pop	r28
    82bc:	1f 91       	pop	r17
    82be:	0f 91       	pop	r16
    82c0:	08 95       	ret

000082c2 <memcpy>:
    82c2:	fb 01       	movw	r30, r22
    82c4:	dc 01       	movw	r26, r24
    82c6:	02 c0       	rjmp	.+4      	; 0x82cc <memcpy+0xa>
    82c8:	01 90       	ld	r0, Z+
    82ca:	0d 92       	st	X+, r0
    82cc:	41 50       	subi	r20, 0x01	; 1
    82ce:	50 40       	sbci	r21, 0x00	; 0
    82d0:	d8 f7       	brcc	.-10     	; 0x82c8 <memcpy+0x6>
    82d2:	08 95       	ret

000082d4 <eeprom_read_dword>:
    82d4:	0e 94 82 41 	call	0x8304	; 0x8304 <eeprom_mapen>
    82d8:	60 81       	ld	r22, Z
    82da:	71 81       	ldd	r23, Z+1	; 0x01
    82dc:	82 81       	ldd	r24, Z+2	; 0x02
    82de:	93 81       	ldd	r25, Z+3	; 0x03
    82e0:	08 95       	ret

000082e2 <eeprom_write_dword>:
    82e2:	24 2f       	mov	r18, r20
    82e4:	0e 94 8f 41 	call	0x831e	; 0x831e <eeprom_write_r18>
    82e8:	25 2f       	mov	r18, r21
    82ea:	0e 94 8f 41 	call	0x831e	; 0x831e <eeprom_write_r18>
    82ee:	0c 94 79 41 	jmp	0x82f2	; 0x82f2 <eeprom_write_word>

000082f2 <eeprom_write_word>:
    82f2:	0e 94 8e 41 	call	0x831c	; 0x831c <eeprom_write_byte>
    82f6:	27 2f       	mov	r18, r23
    82f8:	0c 94 8f 41 	jmp	0x831e	; 0x831e <eeprom_write_r18>

000082fc <eeprom_read_byte>:
    82fc:	03 d0       	rcall	.+6      	; 0x8304 <eeprom_mapen>
    82fe:	80 81       	ld	r24, Z
    8300:	99 27       	eor	r25, r25
    8302:	08 95       	ret

00008304 <eeprom_mapen>:
    8304:	e0 ec       	ldi	r30, 0xC0	; 192
    8306:	f1 e0       	ldi	r31, 0x01	; 1
    8308:	37 85       	ldd	r19, Z+15	; 0x0f
    830a:	37 fd       	sbrc	r19, 7
    830c:	fd cf       	rjmp	.-6      	; 0x8308 <eeprom_mapen+0x4>
    830e:	34 85       	ldd	r19, Z+12	; 0x0c
    8310:	38 60       	ori	r19, 0x08	; 8
    8312:	34 87       	std	Z+12, r19	; 0x0c
    8314:	fc 01       	movw	r30, r24
    8316:	e0 50       	subi	r30, 0x00	; 0
    8318:	f0 4f       	sbci	r31, 0xF0	; 240
    831a:	08 95       	ret

0000831c <eeprom_write_byte>:
    831c:	26 2f       	mov	r18, r22

0000831e <eeprom_write_r18>:
    831e:	e0 ec       	ldi	r30, 0xC0	; 192
    8320:	f1 e0       	ldi	r31, 0x01	; 1
    8322:	37 85       	ldd	r19, Z+15	; 0x0f
    8324:	37 fd       	sbrc	r19, 7
    8326:	fd cf       	rjmp	.-6      	; 0x8322 <eeprom_write_r18+0x4>
    8328:	34 85       	ldd	r19, Z+12	; 0x0c
    832a:	37 7f       	andi	r19, 0xF7	; 247
    832c:	34 87       	std	Z+12, r19	; 0x0c
    832e:	37 85       	ldd	r19, Z+15	; 0x0f
    8330:	31 ff       	sbrs	r19, 1
    8332:	09 c0       	rjmp	.+18     	; 0x8346 <eeprom_write_r18+0x28>
    8334:	36 e3       	ldi	r19, 0x36	; 54
    8336:	32 87       	std	Z+10, r19	; 0x0a
    8338:	38 ed       	ldi	r19, 0xD8	; 216
    833a:	34 bf       	out	0x34, r19	; 52
    833c:	31 e0       	ldi	r19, 0x01	; 1
    833e:	33 87       	std	Z+11, r19	; 0x0b
    8340:	37 85       	ldd	r19, Z+15	; 0x0f
    8342:	37 fd       	sbrc	r19, 7
    8344:	fd cf       	rjmp	.-6      	; 0x8340 <eeprom_write_r18+0x22>
    8346:	33 e3       	ldi	r19, 0x33	; 51
    8348:	32 87       	std	Z+10, r19	; 0x0a
    834a:	80 83       	st	Z, r24
    834c:	91 83       	std	Z+1, r25	; 0x01
    834e:	12 82       	std	Z+2, r1	; 0x02
    8350:	24 83       	std	Z+4, r18	; 0x04
    8352:	25 e3       	ldi	r18, 0x35	; 53
    8354:	22 87       	std	Z+10, r18	; 0x0a
    8356:	28 ed       	ldi	r18, 0xD8	; 216
    8358:	31 e0       	ldi	r19, 0x01	; 1
    835a:	24 bf       	out	0x34, r18	; 52
    835c:	33 87       	std	Z+11, r19	; 0x0b
    835e:	01 96       	adiw	r24, 0x01	; 1
    8360:	08 95       	ret

00008362 <__do_global_dtors>:
    8362:	12 e0       	ldi	r17, 0x02	; 2
    8364:	cc e8       	ldi	r28, 0x8C	; 140
    8366:	d2 e0       	ldi	r29, 0x02	; 2
    8368:	00 e0       	ldi	r16, 0x00	; 0
    836a:	06 c0       	rjmp	.+12     	; 0x8378 <__do_global_dtors+0x16>
    836c:	80 2f       	mov	r24, r16
    836e:	fe 01       	movw	r30, r28
    8370:	0e 94 12 40 	call	0x8024	; 0x8024 <__tablejump2__>
    8374:	21 96       	adiw	r28, 0x01	; 1
    8376:	01 1d       	adc	r16, r1
    8378:	cd 38       	cpi	r28, 0x8D	; 141
    837a:	d1 07       	cpc	r29, r17
    837c:	80 e0       	ldi	r24, 0x00	; 0
    837e:	08 07       	cpc	r16, r24
    8380:	a9 f7       	brne	.-22     	; 0x836c <__do_global_dtors+0xa>
    8382:	f8 94       	cli

00008384 <__stop_program>:
    8384:	ff cf       	rjmp	.-2      	; 0x8384 <__stop_program>
