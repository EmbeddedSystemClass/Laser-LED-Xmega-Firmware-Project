
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ae  00802000  000067ae  00006842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b8  008022ae  008022ae  00006af0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c50  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000179eb  00000000  00000000  000077b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006570  00000000  00000000  0001f19b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c78  00000000  00000000  0002570b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000038bc  00000000  00000000  0002b384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009084  00000000  00000000  0002ec40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a3ee  00000000  00000000  00037cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  000420b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_1>
       8:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_2>
       c:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_3>
      10:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_4>
      14:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__vector_5>
      18:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_6>
      1c:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_7>
      20:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__vector_8>
      24:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__vector_9>
      28:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_10>
      2c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__vector_11>
      30:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__vector_12>
      34:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_13>
      38:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_14>
      3c:	0c 94 df 13 	jmp	0x27be	; 0x27be <__vector_15>
      40:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__vector_16>
      44:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__vector_17>
      48:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__vector_18>
      4c:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_19>
      50:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_20>
      54:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__vector_21>
      58:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__vector_22>
      5c:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__vector_23>
      60:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__vector_24>
      64:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_25>
      68:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_26>
      6c:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__vector_27>
      70:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_28>
      74:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__vector_29>
      78:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_30>
      7c:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_31>
      80:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_32>
      84:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__vector_33>
      88:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_34>
      8c:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_35>
      90:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__vector_36>
      94:	0c 94 15 18 	jmp	0x302a	; 0x302a <__vector_37>
      98:	0c 94 46 18 	jmp	0x308c	; 0x308c <__vector_38>
      9c:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__vector_39>
      a0:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__vector_40>
      a4:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__vector_41>
      a8:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__vector_42>
      ac:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__vector_43>
      b0:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__vector_44>
      b4:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__vector_45>
      b8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__vector_46>
      bc:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_47>
      c0:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__vector_48>
      c4:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__vector_49>
      c8:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__vector_50>
      cc:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__vector_51>
      d0:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_52>
      d4:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_53>
      d8:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__vector_54>
      dc:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__vector_55>
      e0:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__vector_56>
      e4:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_57>
      e8:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__vector_58>
      ec:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__vector_59>
      f0:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__vector_60>
      f4:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__vector_61>
      f8:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__vector_62>
      fc:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_63>
     100:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__vector_64>
     104:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_65>
     108:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__vector_66>
     10c:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__vector_67>
     110:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_68>
     114:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__vector_69>
     118:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__vector_70>
     11c:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__vector_71>
     120:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__vector_72>
     124:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__vector_73>
     128:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__vector_77>
     138:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__vector_78>
     13c:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__vector_79>
     140:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__vector_80>
     144:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__vector_81>
     148:	0c 94 50 20 	jmp	0x40a0	; 0x40a0 <__vector_82>
     14c:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__vector_83>
     150:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <__vector_84>
     154:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__vector_85>
     158:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__vector_86>
     15c:	0c 94 45 21 	jmp	0x428a	; 0x428a <__vector_87>
     160:	0c 94 76 21 	jmp	0x42ec	; 0x42ec <__vector_88>
     164:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__vector_89>
     168:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__vector_90>
     16c:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__vector_91>
     170:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__vector_92>
     174:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__vector_104>
     1a4:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 fe 22 	jmp	0x45fc	; 0x45fc <__vector_108>
     1b4:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__vector_109>
     1b8:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_110>
     1bc:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__vector_111>
     1c0:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <__vector_112>
     1c4:	0c 94 f3 23 	jmp	0x47e6	; 0x47e6 <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__vector_119>
     1e0:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__vector_120>
     1e4:	0c 94 86 24 	jmp	0x490c	; 0x490c <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7b 04       	cpc	r7, r11
     25e:	81 04       	cpc	r8, r1
     260:	87 04       	cpc	r8, r7
     262:	8d 04       	cpc	r8, r13
     264:	93 04       	cpc	r9, r3
     266:	99 04       	cpc	r9, r9
     268:	9f 04       	cpc	r9, r15
     26a:	a5 04       	cpc	r10, r5
     26c:	1c 05       	cpc	r17, r12
     26e:	b3 04       	cpc	r11, r3
     270:	b9 04       	cpc	r11, r9
     272:	bf 04       	cpc	r11, r15
     274:	c5 04       	cpc	r12, r5
     276:	cb 04       	cpc	r12, r11
     278:	d1 04       	cpc	r13, r1
     27a:	d7 04       	cpc	r13, r7
     27c:	dd 04       	cpc	r13, r13
     27e:	e3 04       	cpc	r14, r3
     280:	bd 27       	eor	r27, r29
     282:	bd 27       	eor	r27, r29
     284:	c5 27       	eor	r28, r21
     286:	cd 27       	eor	r28, r29
     288:	d4 27       	eor	r29, r20
     28a:	23 28       	or	r2, r3
     28c:	2a 28       	or	r2, r10
     28e:	56 28       	or	r5, r6
     290:	56 28       	or	r5, r6
     292:	55 28       	or	r5, r5
     294:	55 28       	or	r5, r5

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2a2:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <_ZN10CDGUSUSART11IsReceivingEv>
     2a6:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <_ZN7CTimerD8SetCOMPBEj>
     2aa:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     2ae:	0c 94 d7 2d 	jmp	0x5bae	; 0x5bae <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2b2:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <_ZN8CTimerD15StartEj>
     2b6:	0c 94 f7 2f 	jmp	0x5fee	; 0x5fee <_ZN7CTimerF8SetCOMPDEj>
     2ba:	0c 94 c0 2e 	jmp	0x5d80	; 0x5d80 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2be:	0c 94 cd 27 	jmp	0x4f9a	; 0x4f9a <_ZN9CMBSender13OnReceiveByteEh+0x42>
     2c2:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <_ZN7CTimerF8SetCOMPCEj>
     2c6:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2ca:	0c 94 06 2a 	jmp	0x540c	; 0x540c <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2ce:	0c 94 d6 2c 	jmp	0x59ac	; 0x59ac <_ZN7CTimerC8SetCOMPCEj>
     2d2:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2d6:	0c 94 80 28 	jmp	0x5100	; 0x5100 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     2da:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2de:	0c 94 5d 26 	jmp	0x4cba	; 0x4cba <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     2e2:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2e6:	0c 94 12 2f 	jmp	0x5e24	; 0x5e24 <_ZN8CTimerD15ResetEv>
     2ea:	0c 94 99 29 	jmp	0x5332	; 0x5332 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     2ee:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     2f2:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <_ZN7CTimerD9SetPeriodEj>
     2f6:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2fa:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     2fe:	0c 94 96 2d 	jmp	0x5b2c	; 0x5b2c <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     302:	0c 94 0a 2f 	jmp	0x5e14	; 0x5e14 <_ZN8CTimerD14StopEv>
     306:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     30a:	0c 94 9d 2d 	jmp	0x5b3a	; 0x5b3a <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     30e:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     312:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     316:	0c 94 44 30 	jmp	0x6088	; 0x6088 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     31a:	0c 94 ec 29 	jmp	0x53d8	; 0x53d8 <_ZN10CDGUSUSART11IsDataEmptyEv>
     31e:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     322:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     326:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     32a:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     32e:	0c 94 e3 2f 	jmp	0x5fc6	; 0x5fc6 <_ZN7CTimerF9SetPeriodEj>
     332:	0c 94 0f 2e 	jmp	0x5c1e	; 0x5c1e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     336:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <_ZN16CMBEventsHandler11FreeBuffersEv>
     33a:	0c 94 ed 2f 	jmp	0x5fda	; 0x5fda <_ZN7CTimerF8SetCOMPBEj>
     33e:	0c 94 9c 2e 	jmp	0x5d38	; 0x5d38 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     342:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <_ZN7CTimerD8SetCOMPDEj>
     346:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <_ZN7CTimerD8SetCOMPCEj>
     34a:	0c 94 95 2f 	jmp	0x5f2a	; 0x5f2a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     34e:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     352:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     356:	0c 94 46 2e 	jmp	0x5c8c	; 0x5c8c <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     35a:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     35e:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     362:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     366:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     36a:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     36e:	0c 94 2f 2f 	jmp	0x5e5e	; 0x5e5e <_ZN8CTimerD18SetCOMPAEj>
     372:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     376:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     37a:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     37e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <_ZN7CTimerC8SetCOMPAEj>
     382:	0c 94 c5 27 	jmp	0x4f8a	; 0x4f8a <_ZN9CMBSender13OnReceiveByteEh+0x32>
     386:	0c 94 a7 08 	jmp	0x114e	; 0x114e <_GLOBAL__sub_I_timer>
     38a:	0c 94 60 2d 	jmp	0x5ac0	; 0x5ac0 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     38e:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     392:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     396:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <_GLOBAL__sub_I_dacSPI>
     39a:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <_ZN16CLaserControlApp12OnINT0StaticEPv>
     39e:	0c 94 1c 2f 	jmp	0x5e38	; 0x5e38 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     3a2:	0c 94 c7 2c 	jmp	0x598e	; 0x598e <_ZN7CTimerC9SetPeriodEj>
     3a6:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     3aa:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     3ae:	0c 94 32 30 	jmp	0x6064	; 0x6064 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3b2:	0c 94 66 2e 	jmp	0x5ccc	; 0x5ccc <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3b6:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ba:	0c 94 0e 30 	jmp	0x601c	; 0x601c <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3be:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <_ZN9CMBSender13OnReceiveByteEh+0x50>
     3c2:	0c 94 52 2e 	jmp	0x5ca4	; 0x5ca4 <_ZN7CTimerD8SetCOMPAEj>
     3c6:	0c 94 89 2c 	jmp	0x5912	; 0x5912 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ca:	0c 94 28 2d 	jmp	0x5a50	; 0x5a50 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3ce:	0c 94 56 30 	jmp	0x60ac	; 0x60ac <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3d2:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <_ZN9CMBSender13OnReceiveByteEh+0x152>
     3d6:	0c 94 77 2d 	jmp	0x5aee	; 0x5aee <_ZN8CTimerC15StartEj>
     3da:	0c 94 a4 2c 	jmp	0x5948	; 0x5948 <_ZN7CTimerC5StartEj>
     3de:	0c 94 d2 2f 	jmp	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     3e2:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     3e6:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     3ea:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3ee:	0c 94 bd 27 	jmp	0x4f7a	; 0x4f7a <_ZN9CMBSender13OnReceiveByteEh+0x22>
     3f2:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3f6:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3fa:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3fe:	0c 94 20 30 	jmp	0x6040	; 0x6040 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     402:	0c 94 6f 2f 	jmp	0x5ede	; 0x5ede <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     406:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     40a:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     40e:	0c 94 3a 2d 	jmp	0x5a74	; 0x5a74 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     412:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <_GLOBAL__sub_D_timer>
     416:	0c 94 cb 2f 	jmp	0x5f96	; 0x5f96 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     41a:	0c 94 b0 2f 	jmp	0x5f60	; 0x5f60 <_ZN7CTimerF5StartEj>
     41e:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     422:	0c 94 2a 2e 	jmp	0x5c54	; 0x5c54 <_ZN7CTimerD5StartEj>
     426:	0c 94 e8 2f 	jmp	0x5fd0	; 0x5fd0 <_ZN7CTimerF8SetCOMPAEj>
     42a:	0c 94 8a 2e 	jmp	0x5d14	; 0x5d14 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     42e:	0c 94 0f 2a 	jmp	0x541e	; 0x541e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     432:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     436:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     43a:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     43e:	0c 94 b7 24 	jmp	0x496e	; 0x496e <__cxa_pure_virtual>
     442:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     446:	0c 94 7c 26 	jmp	0x4cf8	; 0x4cf8 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     44a:	0c 94 b3 2d 	jmp	0x5b66	; 0x5b66 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44e:	0c 94 bd 2f 	jmp	0x5f7a	; 0x5f7a <_ZN7CTimerF4StopEv>
     452:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <_ZN8CTimerC19SetPeriodEj>
     456:	0c 94 2a 2f 	jmp	0x5e54	; 0x5e54 <_ZN8CTimerD19SetPeriodEj>
     45a:	0c 94 db 2c 	jmp	0x59b6	; 0x59b6 <_ZN7CTimerC8SetCOMPDEj>
     45e:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     462:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     466:	0c 94 b1 2c 	jmp	0x5962	; 0x5962 <_ZN7CTimerC4StopEv>
     46a:	0c 94 56 06 	jmp	0xcac	; 0xcac <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     46e:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     472:	0c 94 e5 28 	jmp	0x51ca	; 0x51ca <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     476:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
     47a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     47e:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     482:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     486:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <_ZN10CDGUSUSART15GetReceivedByteEv>
     48a:	0c 94 c5 2d 	jmp	0x5b8a	; 0x5b8a <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     48e:	0c 94 19 11 	jmp	0x2232	; 0x2232 <_ZN4CSPI16StaticOnTransmitEPv>
     492:	0c 94 23 28 	jmp	0x5046	; 0x5046 <_ZN9CMBSender13OnReceiveByteEh+0xee>
     496:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     49a:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     49e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     4a2:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4a6:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <_ZN8CTimerD18SetCOMPBEj>
     4aa:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     4ae:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <_ZN7CTimerC8SetCOMPBEj>
     4b2:	0c 94 a9 2d 	jmp	0x5b52	; 0x5b52 <_ZN8CTimerC18SetCOMPAEj>
     4b6:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     4ba:	0c 94 8c 2d 	jmp	0x5b18	; 0x5b18 <_ZN8CTimerC15ResetEv>
     4be:	0c 94 2a 28 	jmp	0x5054	; 0x5054 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     4c2:	0c 94 f2 2c 	jmp	0x59e4	; 0x59e4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4c6:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     4ca:	0c 94 cb 04 	jmp	0x996	; 0x996 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     4ce:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <_ZN8CTimerC18SetCOMPBEj>
     4d2:	0c 94 37 2e 	jmp	0x5c6e	; 0x5c6e <_ZN7CTimerD4StopEv>
     4d6:	0c 94 16 2d 	jmp	0x5a2c	; 0x5a2c <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     4da:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4de:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <_ZN8CTimerC14StopEv>
     4e2:	0c 94 e0 2c 	jmp	0x59c0	; 0x59c0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4e6:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4ea:	0c 94 dd 29 	jmp	0x53ba	; 0x53ba <_ZN10CDGUSUSART14IsTransmittingEv>
     4ee:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <_GLOBAL__sub_D_dacSPI>
     4f2:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4f6:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc2>
     4fa:	0c 94 5d 2f 	jmp	0x5eba	; 0x5eba <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4fe:	0c 94 c5 2f 	jmp	0x5f8a	; 0x5f8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     502:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     506:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     50a:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     50e:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>

00000512 <__ctors_start>:
     512:	a7 08       	sbc	r10, r7
     514:	ba 24       	eor	r11, r10

00000516 <__ctors_end>:
     516:	b0 08       	sbc	r11, r0
     518:	e7 24       	eor	r14, r7

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	ee ea       	ldi	r30, 0xAE	; 174
     532:	f7 e6       	ldi	r31, 0x67	; 103
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	ae 3a       	cpi	r26, 0xAE	; 174
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	25 e2       	ldi	r18, 0x25	; 37
     546:	ae ea       	ldi	r26, 0xAE	; 174
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a6 36       	cpi	r26, 0x66	; 102
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cb e8       	ldi	r28, 0x8B	; 139
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 26 32 	call	0x644c	; 0x644c <__tablejump2__>
     56a:	c9 38       	cpi	r28, 0x89	; 137
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <main>
     578:	0c 94 c5 33 	jmp	0x678a	; 0x678a <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
	laserBoard.PWMOff();
}

void CLaserControlApp::OnPWMTimerCMP()
{
	laserBoard.PWMOn();
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 af 22 	sts	0x22AF, r24
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 26 32 	jmp	0x644c	; 0x644c <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	eb 01       	movw	r28, r22
     8c4:	7a 01       	movw	r14, r20
     8c6:	69 01       	movw	r12, r18
     8c8:	fa 01       	movw	r30, r20
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	0e 94 96 10 	call	0x212c	; 0x212c <_Z4swapj>
     8d2:	9c 01       	movw	r18, r24
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8dc:	7a c0       	rjmp	.+244    	; 0x9d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8de:	fe 01       	movw	r30, r28
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	e2 31       	cpi	r30, 0x12	; 18
     8e4:	f1 05       	cpc	r31, r1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e8:	a7 c0       	rjmp	.+334    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     8ea:	88 27       	eor	r24, r24
     8ec:	e2 5d       	subi	r30, 0xD2	; 210
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	0c 94 26 32 	jmp	0x644c	; 0x644c <__tablejump2__>
     8f6:	f8 01       	movw	r30, r16
     8f8:	ef 5b       	subi	r30, 0xBF	; 191
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	20 83       	st	Z, r18
     8fe:	31 83       	std	Z+1, r19	; 0x01
     900:	9b c0       	rjmp	.+310    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     902:	f8 01       	movw	r30, r16
     904:	ed 5b       	subi	r30, 0xBD	; 189
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	20 83       	st	Z, r18
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	95 c0       	rjmp	.+298    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     90e:	f8 01       	movw	r30, r16
     910:	eb 5b       	subi	r30, 0xBB	; 187
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	8f c0       	rjmp	.+286    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     91a:	f8 01       	movw	r30, r16
     91c:	e9 5b       	subi	r30, 0xB9	; 185
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	89 c0       	rjmp	.+274    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     926:	f8 01       	movw	r30, r16
     928:	e7 5b       	subi	r30, 0xB7	; 183
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	83 c0       	rjmp	.+262    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     932:	f8 01       	movw	r30, r16
     934:	e5 5b       	subi	r30, 0xB5	; 181
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	20 83       	st	Z, r18
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	7d c0       	rjmp	.+250    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     93e:	f8 01       	movw	r30, r16
     940:	e3 5b       	subi	r30, 0xB3	; 179
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	77 c0       	rjmp	.+238    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     94a:	f7 01       	movw	r30, r14
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	0e 94 9a 10 	call	0x2134	; 0x2134 <_Z6swap32m>
     958:	f8 01       	movw	r30, r16
     95a:	fd 96       	adiw	r30, 0x3d	; 61
     95c:	60 83       	st	Z, r22
     95e:	71 83       	std	Z+1, r23	; 0x01
     960:	82 83       	std	Z+2, r24	; 0x02
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	69 c0       	rjmp	.+210    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     966:	f8 01       	movw	r30, r16
     968:	ed 5a       	subi	r30, 0xAD	; 173
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	63 c0       	rjmp	.+198    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     972:	f8 01       	movw	r30, r16
     974:	eb 5a       	subi	r30, 0xAB	; 171
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	20 83       	st	Z, r18
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	5d c0       	rjmp	.+186    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     97e:	f8 01       	movw	r30, r16
     980:	e9 5a       	subi	r30, 0xA9	; 169
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	20 83       	st	Z, r18
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	57 c0       	rjmp	.+174    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     98a:	f8 01       	movw	r30, r16
     98c:	e7 5a       	subi	r30, 0xA7	; 167
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	20 83       	st	Z, r18
     992:	31 83       	std	Z+1, r19	; 0x01
     994:	51 c0       	rjmp	.+162    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     996:	f8 01       	movw	r30, r16
     998:	e5 5a       	subi	r30, 0xA5	; 165
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	4b c0       	rjmp	.+150    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9a2:	f8 01       	movw	r30, r16
     9a4:	e3 5a       	subi	r30, 0xA3	; 163
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	20 83       	st	Z, r18
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ae:	f8 01       	movw	r30, r16
     9b0:	e1 5a       	subi	r30, 0xA1	; 161
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	20 83       	st	Z, r18
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ba:	f8 01       	movw	r30, r16
     9bc:	ef 59       	subi	r30, 0x9F	; 159
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	20 83       	st	Z, r18
     9c2:	31 83       	std	Z+1, r19	; 0x01
     9c4:	39 c0       	rjmp	.+114    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9c6:	f8 01       	movw	r30, r16
     9c8:	ed 59       	subi	r30, 0x9D	; 157
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	20 83       	st	Z, r18
     9ce:	31 83       	std	Z+1, r19	; 0x01
     9d0:	33 c0       	rjmp	.+102    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9d2:	c1 30       	cpi	r28, 0x01	; 1
     9d4:	d1 05       	cpc	r29, r1
     9d6:	51 f4       	brne	.+20     	; 0x9ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a6 01       	movw	r20, r12
     9de:	b7 01       	movw	r22, r14
     9e0:	c8 01       	movw	r24, r16
     9e2:	8f 5b       	subi	r24, 0xBF	; 191
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_Z11ConvertDataPvS_jj>
     9ea:	26 c0       	rjmp	.+76     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ec:	c5 30       	cpi	r28, 0x05	; 5
     9ee:	d1 05       	cpc	r29, r1
     9f0:	49 f4       	brne	.+18     	; 0xa04 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x154>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	a6 01       	movw	r20, r12
     9f8:	b7 01       	movw	r22, r14
     9fa:	c8 01       	movw	r24, r16
     9fc:	8f 96       	adiw	r24, 0x2f	; 47
     9fe:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_Z11ConvertDataPvS_jj>
     a02:	1a c0       	rjmp	.+52     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a04:	22 97       	sbiw	r28, 0x02	; 2
     a06:	c1 f4       	brne	.+48     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a08:	f8 01       	movw	r30, r16
     a0a:	86 85       	ldd	r24, Z+14	; 0x0e
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	90 f4       	brcc	.+36     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x184>
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	47 96       	adiw	r24, 0x17	; 23
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a6 01       	movw	r20, r12
     a28:	b7 01       	movw	r22, r14
     a2a:	80 0f       	add	r24, r16
     a2c:	91 1f       	adc	r25, r17
     a2e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_Z11ConvertDataPvS_jj>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a34:	0e 94 c2 2b 	call	0x5784	; 0x5784 <_ZN11CLaserBoard4BeepEv>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN16CLaserControlAppC1Ev>:
     a4a:	28 e6       	ldi	r18, 0x68	; 104
     a4c:	31 e2       	ldi	r19, 0x21	; 33
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	08 95       	ret

00000a56 <_ZN16CLaserControlAppD1Ev>:
     a56:	28 e6       	ldi	r18, 0x68	; 104
     a58:	31 e2       	ldi	r19, 0x21	; 33
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
     a5e:	31 83       	std	Z+1, r19	; 0x01
     a60:	0e 94 10 27 	call	0x4e20	; 0x4e20 <_ZN16CMBEventsHandlerD1Ev>
     a64:	08 95       	ret

00000a66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	7c 01       	movw	r14, r24
     a90:	8b 01       	movw	r16, r22
     a92:	fb 01       	movw	r30, r22
     a94:	80 80       	ld	r8, Z
     a96:	91 80       	ldd	r9, Z+1	; 0x01
     a98:	88 ee       	ldi	r24, 0xE8	; 232
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 bd 31 	call	0x637a	; 0x637a <__udivmodhi4>
     aa2:	5b 01       	movw	r10, r22
     aa4:	22 81       	ldd	r18, Z+2	; 0x02
     aa6:	33 81       	ldd	r19, Z+3	; 0x03
     aa8:	a8 ee       	ldi	r26, 0xE8	; 232
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
     ab0:	95 01       	movw	r18, r10
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	0e 94 e5 31 	call	0x63ca	; 0x63ca <__udivmodsi4>
     aba:	29 01       	movw	r4, r18
     abc:	3a 01       	movw	r6, r20
     abe:	f8 01       	movw	r30, r16
     ac0:	c4 80       	ldd	r12, Z+4	; 0x04
     ac2:	d5 80       	ldd	r13, Z+5	; 0x05
     ac4:	8a e6       	ldi	r24, 0x6A	; 106
     ac6:	98 e1       	ldi	r25, 0x18	; 24
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 bd 31 	call	0x637a	; 0x637a <__udivmodhi4>
     ace:	8b 01       	movw	r16, r22
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	06 0f       	add	r16, r22
     ae2:	17 1f       	adc	r17, r23
     ae4:	f7 01       	movw	r30, r14
     ae6:	05 ab       	std	Z+53, r16	; 0x35
     ae8:	16 ab       	std	Z+54, r17	; 0x36
     aea:	d8 01       	movw	r26, r16
     aec:	a3 01       	movw	r20, r6
     aee:	92 01       	movw	r18, r4
     af0:	0e 94 3d 32 	call	0x647a	; 0x647a <__muluhisi3>
     af4:	28 ee       	ldi	r18, 0xE8	; 232
     af6:	33 e0       	ldi	r19, 0x03	; 3
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 e5 31 	call	0x63ca	; 0x63ca <__udivmodsi4>
     b00:	02 1b       	sub	r16, r18
     b02:	13 0b       	sbc	r17, r19
     b04:	f7 01       	movw	r30, r14
     b06:	07 ab       	std	Z+55, r16	; 0x37
     b08:	10 af       	std	Z+56, r17	; 0x38
     b0a:	a1 ae       	std	Z+57, r10	; 0x39
     b0c:	b2 ae       	std	Z+58, r11	; 0x3a
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	8c 9d       	mul	r24, r12
     b12:	90 01       	movw	r18, r0
     b14:	8d 9d       	mul	r24, r13
     b16:	30 0d       	add	r19, r0
     b18:	11 24       	eor	r1, r1
     b1a:	36 95       	lsr	r19
     b1c:	27 95       	ror	r18
     b1e:	36 95       	lsr	r19
     b20:	27 95       	ror	r18
     b22:	ab e7       	ldi	r26, 0x7B	; 123
     b24:	b4 e1       	ldi	r27, 0x14	; 20
     b26:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
     b2a:	8c 01       	movw	r16, r24
     b2c:	16 95       	lsr	r17
     b2e:	07 95       	ror	r16
     b30:	09 83       	std	Y+1, r16	; 0x01
     b32:	1a 83       	std	Y+2, r17	; 0x02
     b34:	96 01       	movw	r18, r12
     b36:	a8 ec       	ldi	r26, 0xC8	; 200
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	0e 94 ad 31 	call	0x635a	; 0x635a <__mulsi3>
     b4a:	20 ea       	ldi	r18, 0xA0	; 160
     b4c:	36 e8       	ldi	r19, 0x86	; 134
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 e5 31 	call	0x63ca	; 0x63ca <__udivmodsi4>
     b56:	12 2f       	mov	r17, r18
     b58:	82 2f       	mov	r24, r18
     b5a:	93 2f       	mov	r25, r19
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	2a e0       	ldi	r18, 0x0A	; 10
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	0e 94 e5 31 	call	0x63ca	; 0x63ca <__udivmodsi4>
     b70:	62 2f       	mov	r22, r18
     b72:	82 2f       	mov	r24, r18
     b74:	93 2f       	mov	r25, r19
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	20 2f       	mov	r18, r16
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	41 2f       	mov	r20, r17
     b80:	5c 81       	ldd	r21, Y+4	; 0x04
     b82:	7e 81       	ldd	r23, Y+6	; 0x06
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	08 95       	ret

00000bb0 <_ZN16CLaserControlApp11GetVariableEjj>:
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	cb 58       	subi	r28, 0x8B	; 139
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <_ZN9CMBSender18WaitMODBUSListenerEv>
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	cb 58       	subi	r28, 0x8B	; 139
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	0e 94 1d 29 	call	0x523a	; 0x523a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8c 01       	movw	r16, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	0e 94 96 10 	call	0x212c	; 0x212c <_Z4swapj>
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	0b 58       	subi	r16, 0x8B	; 139
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	ae 01       	movw	r20, r28
     c1c:	4f 5f       	subi	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	63 e0       	ldi	r22, 0x03	; 3
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     c44:	fc 01       	movw	r30, r24
     c46:	fd 96       	adiw	r30, 0x3d	; 61
     c48:	40 81       	ld	r20, Z
     c4a:	51 81       	ldd	r21, Z+1	; 0x01
     c4c:	62 81       	ldd	r22, Z+2	; 0x02
     c4e:	73 81       	ldd	r23, Z+3	; 0x03
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	6f 4f       	sbci	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	40 83       	st	Z, r20
     c5a:	51 83       	std	Z+1, r21	; 0x01
     c5c:	62 83       	std	Z+2, r22	; 0x02
     c5e:	73 83       	std	Z+3, r23	; 0x03
     c60:	fc 01       	movw	r30, r24
     c62:	41 ad       	ldd	r20, Z+57	; 0x39
     c64:	52 ad       	ldd	r21, Z+58	; 0x3a
     c66:	45 36       	cpi	r20, 0x65	; 101
     c68:	51 05       	cpc	r21, r1
     c6a:	50 f0       	brcs	.+20     	; 0xc80 <_ZN16CLaserControlApp12OnLaserTimerEv+0x3c>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	42 e3       	ldi	r20, 0x32	; 50
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	64 ef       	ldi	r22, 0xF4	; 244
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	81 e2       	ldi	r24, 0x21	; 33
     c78:	95 e2       	ldi	r25, 0x25	; 37
     c7a:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <_ZN16CLaserControlApp12OnLaserTimerEv+0x4e>
     c80:	56 95       	lsr	r21
     c82:	47 95       	ror	r20
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	64 ef       	ldi	r22, 0xF4	; 244
     c88:	71 e0       	ldi	r23, 0x01	; 1
     c8a:	81 e2       	ldi	r24, 0x21	; 33
     c8c:	95 e2       	ldi	r25, 0x25	; 37
     c8e:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
     c92:	81 e2       	ldi	r24, 0x21	; 33
     c94:	95 e2       	ldi	r25, 0x25	; 37
     c96:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
     c9a:	08 95       	ret

00000c9c <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     c9c:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN16CLaserControlApp12OnLaserTimerEv>
     ca0:	08 95       	ret

00000ca2 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
	//laserBoard.Relay1Off();
}

void CLaserControlApp::OnPWMTimerOVF()
{
	laserBoard.PWMOff();
     ca2:	82 e2       	ldi	r24, 0x22	; 34
     ca4:	95 e2       	ldi	r25, 0x25	; 37
     ca6:	0e 94 aa 2b 	call	0x5754	; 0x5754 <_ZN11CLaserBoard6PWMOffEv>
     caa:	08 95       	ret

00000cac <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMP()
{
	laserBoard.PWMOn();
     cac:	82 e2       	ldi	r24, 0x22	; 34
     cae:	95 e2       	ldi	r25, 0x25	; 37
     cb0:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN11CLaserBoard5PWMOnEv>
     cb4:	08 95       	ret

00000cb6 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     cc0:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     cc2:	fc 01       	movw	r30, r24
     cc4:	ef 5b       	subi	r30, 0xBF	; 191
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	10 82       	st	Z, r1
     cca:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     ccc:	32 96       	adiw	r30, 0x02	; 2
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     cd6:	6a 30       	cpi	r22, 0x0A	; 10
     cd8:	71 05       	cpc	r23, r1
     cda:	70 f4       	brcc	.+28     	; 0xcf8 <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	72 96       	adiw	r30, 0x12	; 18
     ce2:	80 83       	st	Z, r24
     ce4:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     ce6:	8c e3       	ldi	r24, 0x3C	; 60
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	8d 8b       	std	Y+21, r24	; 0x15
     cec:	9e 8b       	std	Y+22, r25	; 0x16
		m_wMaxEnergy = 97;
     cee:	81 e6       	ldi	r24, 0x61	; 97
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	8b 8b       	std	Y+19, r24	; 0x13
     cf4:	9c 8b       	std	Y+20, r25	; 0x14
     cf6:	5b c0       	rjmp	.+182    	; 0xdae <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     cf8:	64 31       	cpi	r22, 0x14	; 20
     cfa:	71 05       	cpc	r23, r1
     cfc:	80 f4       	brcc	.+32     	; 0xd1e <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fe 01       	movw	r30, r28
     d04:	eb 5a       	subi	r30, 0xAB	; 171
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	80 83       	st	Z, r24
     d0a:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d0c:	8c e3       	ldi	r24, 0x3C	; 60
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	8d 8b       	std	Y+21, r24	; 0x15
     d12:	9e 8b       	std	Y+22, r25	; 0x16
		m_wMaxEnergy = 97;
     d14:	81 e6       	ldi	r24, 0x61	; 97
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	8b 8b       	std	Y+19, r24	; 0x13
     d1a:	9c 8b       	std	Y+20, r25	; 0x14
     d1c:	48 c0       	rjmp	.+144    	; 0xdae <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     d1e:	63 32       	cpi	r22, 0x23	; 35
     d20:	71 05       	cpc	r23, r1
     d22:	80 f4       	brcc	.+32     	; 0xd44 <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	fe 01       	movw	r30, r28
     d2a:	eb 5a       	subi	r30, 0xAB	; 171
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	80 83       	st	Z, r24
     d30:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d32:	8c e3       	ldi	r24, 0x3C	; 60
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	8d 8b       	std	Y+21, r24	; 0x15
     d38:	9e 8b       	std	Y+22, r25	; 0x16
		m_wMaxEnergy = 97;
     d3a:	81 e6       	ldi	r24, 0x61	; 97
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	8b 8b       	std	Y+19, r24	; 0x13
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	35 c0       	rjmp	.+106    	; 0xdae <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     d44:	61 33       	cpi	r22, 0x31	; 49
     d46:	71 05       	cpc	r23, r1
     d48:	80 f4       	brcc	.+32     	; 0xd6a <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	fe 01       	movw	r30, r28
     d50:	eb 5a       	subi	r30, 0xAB	; 171
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	80 83       	st	Z, r24
     d56:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d58:	84 e6       	ldi	r24, 0x64	; 100
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	8d 8b       	std	Y+21, r24	; 0x15
     d5e:	9e 8b       	std	Y+22, r25	; 0x16
		m_wMaxEnergy = 97;
     d60:	81 e6       	ldi	r24, 0x61	; 97
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	8b 8b       	std	Y+19, r24	; 0x13
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	22 c0       	rjmp	.+68     	; 0xdae <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     d6a:	68 34       	cpi	r22, 0x48	; 72
     d6c:	71 05       	cpc	r23, r1
     d6e:	80 f4       	brcc	.+32     	; 0xd90 <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     d70:	85 e0       	ldi	r24, 0x05	; 5
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	fe 01       	movw	r30, r28
     d76:	eb 5a       	subi	r30, 0xAB	; 171
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	80 83       	st	Z, r24
     d7c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d7e:	84 e6       	ldi	r24, 0x64	; 100
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	8d 8b       	std	Y+21, r24	; 0x15
     d84:	9e 8b       	std	Y+22, r25	; 0x16
		m_wMaxEnergy = 90;
     d86:	8a e5       	ldi	r24, 0x5A	; 90
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	8b 8b       	std	Y+19, r24	; 0x13
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     d90:	86 e0       	ldi	r24, 0x06	; 6
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	fe 01       	movw	r30, r28
     d96:	eb 5a       	subi	r30, 0xAB	; 171
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 83       	st	Z, r24
     d9c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d9e:	84 e6       	ldi	r24, 0x64	; 100
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	8d 8b       	std	Y+21, r24	; 0x15
     da4:	9e 8b       	std	Y+22, r25	; 0x16
		m_wMaxEnergy = 87;
     da6:	87 e5       	ldi	r24, 0x57	; 87
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	9c 8b       	std	Y+20, r25	; 0x14
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     dae:	fe 01       	movw	r30, r28
     db0:	e9 5b       	subi	r30, 0xB9	; 185
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	84 e6       	ldi	r24, 0x64	; 100
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	80 83       	st	Z, r24
     dba:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     dbc:	8d 89       	ldd	r24, Y+21	; 0x15
     dbe:	9e 89       	ldd	r25, Y+22	; 0x16
     dc0:	32 97       	sbiw	r30, 0x02	; 2
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     dc6:	8e 01       	movw	r16, r28
     dc8:	07 5b       	subi	r16, 0xB7	; 183
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	bc 01       	movw	r22, r24
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	68 0f       	add	r22, r24
     dd8:	79 1f       	adc	r23, r25
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	69 5e       	subi	r22, 0xE9	; 233
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	6c 0f       	add	r22, r28
     de4:	7d 1f       	adc	r23, r29
     de6:	ce 01       	movw	r24, r28
     de8:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     dec:	f8 01       	movw	r30, r16
     dee:	20 83       	st	Z, r18
     df0:	31 83       	std	Z+1, r19	; 0x01
     df2:	42 83       	std	Z+2, r20	; 0x02
     df4:	53 83       	std	Z+3, r21	; 0x03
     df6:	64 83       	std	Z+4, r22	; 0x04
     df8:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     dfa:	8e 85       	ldd	r24, Y+14	; 0x0e
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	ec 0f       	add	r30, r28
     e0e:	fd 1f       	adc	r31, r29
     e10:	83 8d       	ldd	r24, Z+27	; 0x1b
     e12:	94 8d       	ldd	r25, Z+28	; 0x1c
     e14:	8b af       	std	Y+59, r24	; 0x3b
     e16:	9c af       	std	Y+60, r25	; 0x3c
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     e2c:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     e2e:	fc 01       	movw	r30, r24
     e30:	ef 5b       	subi	r30, 0xBF	; 191
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	10 82       	st	Z, r1
     e36:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     e38:	32 96       	adiw	r30, 0x02	; 2
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	80 83       	st	Z, r24
     e40:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     e42:	72 96       	adiw	r30, 0x12	; 18
     e44:	60 83       	st	Z, r22
     e46:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     e48:	63 30       	cpi	r22, 0x03	; 3
     e4a:	71 05       	cpc	r23, r1
     e4c:	91 f1       	breq	.+100    	; 0xeb2 <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     e4e:	38 f4       	brcc	.+14     	; 0xe5e <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     e50:	61 30       	cpi	r22, 0x01	; 1
     e52:	71 05       	cpc	r23, r1
     e54:	71 f0       	breq	.+28     	; 0xe72 <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     e56:	62 30       	cpi	r22, 0x02	; 2
     e58:	71 05       	cpc	r23, r1
     e5a:	d9 f0       	breq	.+54     	; 0xe92 <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     e5c:	69 c0       	rjmp	.+210    	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     e5e:	65 30       	cpi	r22, 0x05	; 5
     e60:	71 05       	cpc	r23, r1
     e62:	09 f4       	brne	.+2      	; 0xe66 <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     e64:	46 c0       	rjmp	.+140    	; 0xef2 <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     e66:	a8 f1       	brcs	.+106    	; 0xed2 <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     e68:	66 30       	cpi	r22, 0x06	; 6
     e6a:	71 05       	cpc	r23, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     e6e:	51 c0       	rjmp	.+162    	; 0xf12 <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     e70:	5f c0       	rjmp	.+190    	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     e72:	85 e0       	ldi	r24, 0x05	; 5
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fe 01       	movw	r30, r28
     e78:	ed 5a       	subi	r30, 0xAD	; 173
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	80 83       	st	Z, r24
     e7e:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     e80:	8c e3       	ldi	r24, 0x3C	; 60
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	8d 8b       	std	Y+21, r24	; 0x15
     e86:	9e 8b       	std	Y+22, r25	; 0x16
			m_wMaxEnergy = 97;
     e88:	81 e6       	ldi	r24, 0x61	; 97
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	9c 8b       	std	Y+20, r25	; 0x14
		}
		break;
     e90:	4f c0       	rjmp	.+158    	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     e92:	8e e0       	ldi	r24, 0x0E	; 14
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fe 01       	movw	r30, r28
     e98:	ed 5a       	subi	r30, 0xAD	; 173
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	80 83       	st	Z, r24
     e9e:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ea0:	8c e3       	ldi	r24, 0x3C	; 60
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	8d 8b       	std	Y+21, r24	; 0x15
     ea6:	9e 8b       	std	Y+22, r25	; 0x16
			m_wMaxEnergy = 97;
     ea8:	81 e6       	ldi	r24, 0x61	; 97
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	8b 8b       	std	Y+19, r24	; 0x13
     eae:	9c 8b       	std	Y+20, r25	; 0x14
		}
		break;
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     eb2:	8b e1       	ldi	r24, 0x1B	; 27
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	fe 01       	movw	r30, r28
     eb8:	ed 5a       	subi	r30, 0xAD	; 173
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	80 83       	st	Z, r24
     ebe:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ec0:	8c e3       	ldi	r24, 0x3C	; 60
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	8d 8b       	std	Y+21, r24	; 0x15
     ec6:	9e 8b       	std	Y+22, r25	; 0x16
			m_wMaxEnergy = 97;
     ec8:	81 e6       	ldi	r24, 0x61	; 97
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	8b 8b       	std	Y+19, r24	; 0x13
     ece:	9c 8b       	std	Y+20, r25	; 0x14
		}
		break;
     ed0:	2f c0       	rjmp	.+94     	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     ed2:	89 e2       	ldi	r24, 0x29	; 41
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fe 01       	movw	r30, r28
     ed8:	ed 5a       	subi	r30, 0xAD	; 173
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 83       	st	Z, r24
     ede:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     ee0:	84 e6       	ldi	r24, 0x64	; 100
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	8d 8b       	std	Y+21, r24	; 0x15
     ee6:	9e 8b       	std	Y+22, r25	; 0x16
			m_wMaxEnergy = 97;
     ee8:	81 e6       	ldi	r24, 0x61	; 97
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	8b 8b       	std	Y+19, r24	; 0x13
     eee:	9c 8b       	std	Y+20, r25	; 0x14
		}
		break;
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     ef2:	8d e3       	ldi	r24, 0x3D	; 61
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fe 01       	movw	r30, r28
     ef8:	ed 5a       	subi	r30, 0xAD	; 173
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	80 83       	st	Z, r24
     efe:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f00:	84 e6       	ldi	r24, 0x64	; 100
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	8d 8b       	std	Y+21, r24	; 0x15
     f06:	9e 8b       	std	Y+22, r25	; 0x16
			m_wMaxEnergy = 90;
     f08:	8a e5       	ldi	r24, 0x5A	; 90
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	8b 8b       	std	Y+19, r24	; 0x13
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
		}
		break;
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     f12:	85 e5       	ldi	r24, 0x55	; 85
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	fe 01       	movw	r30, r28
     f18:	ed 5a       	subi	r30, 0xAD	; 173
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 83       	st	Z, r24
     f1e:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f20:	84 e6       	ldi	r24, 0x64	; 100
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	8d 8b       	std	Y+21, r24	; 0x15
     f26:	9e 8b       	std	Y+22, r25	; 0x16
			m_wMaxEnergy = 87;
     f28:	87 e5       	ldi	r24, 0x57	; 87
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	8b 8b       	std	Y+19, r24	; 0x13
     f2e:	9c 8b       	std	Y+20, r25	; 0x14
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     f30:	fe 01       	movw	r30, r28
     f32:	e9 5b       	subi	r30, 0xB9	; 185
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	84 e6       	ldi	r24, 0x64	; 100
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	80 83       	st	Z, r24
     f3c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     f3e:	8d 89       	ldd	r24, Y+21	; 0x15
     f40:	9e 89       	ldd	r25, Y+22	; 0x16
     f42:	32 97       	sbiw	r30, 0x02	; 2
     f44:	80 83       	st	Z, r24
     f46:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     f48:	8e 01       	movw	r16, r28
     f4a:	07 5b       	subi	r16, 0xB7	; 183
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	be 01       	movw	r22, r28
     f50:	69 5e       	subi	r22, 0xE9	; 233
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	ce 01       	movw	r24, r28
     f56:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     f5a:	f8 01       	movw	r30, r16
     f5c:	20 83       	st	Z, r18
     f5e:	31 83       	std	Z+1, r19	; 0x01
     f60:	42 83       	std	Z+2, r20	; 0x02
     f62:	53 83       	std	Z+3, r21	; 0x03
     f64:	64 83       	std	Z+4, r22	; 0x04
     f66:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     f68:	8e 85       	ldd	r24, Y+14	; 0x0e
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	fc 01       	movw	r30, r24
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	e8 0f       	add	r30, r24
     f74:	f9 1f       	adc	r31, r25
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	ec 0f       	add	r30, r28
     f7c:	fd 1f       	adc	r31, r29
     f7e:	83 8d       	ldd	r24, Z+27	; 0x1b
     f80:	94 8d       	ldd	r25, Z+28	; 0x1c
     f82:	8b af       	std	Y+59, r24	; 0x3b
     f84:	9c af       	std	Y+60, r25	; 0x3c
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
     f90:	af 92       	push	r10
     f92:	bf 92       	push	r11
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
     fa6:	8b 01       	movw	r16, r22
     fa8:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	b1 f0       	breq	.+44     	; 0xfda <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
     fae:	18 f4       	brcc	.+6      	; 0xfb6 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
     fb4:	58 c0       	rjmp	.+176    	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
     fb6:	23 30       	cpi	r18, 0x03	; 3
     fb8:	39 f1       	breq	.+78     	; 0x1008 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
     fba:	24 30       	cpi	r18, 0x04	; 4
     fbc:	e9 f1       	breq	.+122    	; 0x1038 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
     fbe:	53 c0       	rjmp	.+166    	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
     fc0:	db 01       	movw	r26, r22
     fc2:	8d 91       	ld	r24, X+
     fc4:	9c 91       	ld	r25, X
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	09 f4       	brne	.+2      	; 0xfce <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
     fcc:	4c c0       	rjmp	.+152    	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	8d 93       	st	X+, r24
     fd4:	9c 93       	st	X, r25
				update = true;
     fd6:	89 8b       	std	Y+17, r24	; 0x11
     fd8:	46 c0       	rjmp	.+140    	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
     fda:	fb 01       	movw	r30, r22
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	04 97       	sbiw	r24, 0x04	; 4
     fe2:	30 f0       	brcs	.+12     	; 0xff0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
				update = true;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 1)
     ff0:	d8 01       	movw	r26, r16
     ff2:	8d 91       	ld	r24, X+
     ff4:	9c 91       	ld	r25, X
     ff6:	11 97       	sbiw	r26, 0x01	; 1
     ff8:	89 2b       	or	r24, r25
     ffa:	a9 f5       	brne	.+106    	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	8d 93       	st	X+, r24
    1002:	9c 93       	st	X, r25
				update = true;
    1004:	89 8b       	std	Y+17, r24	; 0x11
    1006:	2f c0       	rjmp	.+94     	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
    1008:	fb 01       	movw	r30, r22
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	07 97       	sbiw	r24, 0x07	; 7
    1010:	30 f0       	brcs	.+12     	; 0x101e <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    1012:	86 e0       	ldi	r24, 0x06	; 6
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 4)
    101e:	d8 01       	movw	r26, r16
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	11 97       	sbiw	r26, 0x01	; 1
    1026:	04 97       	sbiw	r24, 0x04	; 4
    1028:	f0 f4       	brcc	.+60     	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	8d 93       	st	X+, r24
    1030:	9c 93       	st	X, r25
				update = true;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 8b       	std	Y+17, r24	; 0x11
    1036:	17 c0       	rjmp	.+46     	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    1038:	fb 01       	movw	r30, r22
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	0b 97       	sbiw	r24, 0x0b	; 11
    1040:	30 f0       	brcs	.+12     	; 0x104e <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    1042:	8a e0       	ldi	r24, 0x0A	; 10
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	80 83       	st	Z, r24
    1048:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 7)
    104e:	d8 01       	movw	r26, r16
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	11 97       	sbiw	r26, 0x01	; 1
    1056:	07 97       	sbiw	r24, 0x07	; 7
    1058:	30 f4       	brcc	.+12     	; 0x1066 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    105a:	87 e0       	ldi	r24, 0x07	; 7
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	8d 93       	st	X+, r24
    1060:	9c 93       	st	X, r25
				update = true;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 8b       	std	Y+17, r24	; 0x11
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1066:	f8 01       	movw	r30, r16
    1068:	20 81       	ld	r18, Z
    106a:	31 81       	ldd	r19, Z+1	; 0x01
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	f9 01       	movw	r30, r18
    1072:	e2 5f       	subi	r30, 0xF2	; 242
    1074:	fe 4d       	sbci	r31, 0xDE	; 222
    1076:	c0 80       	ld	r12, Z
    1078:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    107a:	f9 01       	movw	r30, r18
    107c:	e8 50       	subi	r30, 0x08	; 8
    107e:	ff 4d       	sbci	r31, 0xDF	; 223
    1080:	01 90       	ld	r0, Z+
    1082:	f0 81       	ld	r31, Z
    1084:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    1086:	cf 01       	movw	r24, r30
    1088:	8c 19       	sub	r24, r12
    108a:	9d 09       	sbc	r25, r13
    108c:	d9 01       	movw	r26, r18
    108e:	ae 51       	subi	r26, 0x1E	; 30
    1090:	bf 4d       	sbci	r27, 0xDF	; 223
    1092:	6d 91       	ld	r22, X+
    1094:	7c 91       	ld	r23, X
    1096:	61 50       	subi	r22, 0x01	; 1
    1098:	71 09       	sbc	r23, r1
    109a:	0e 94 bd 31 	call	0x637a	; 0x637a <__udivmodhi4>
	
	if (duration < MinD)
    109e:	d7 01       	movw	r26, r14
    10a0:	8d 91       	ld	r24, X+
    10a2:	9c 91       	ld	r25, X
    10a4:	11 97       	sbiw	r26, 0x01	; 1
    10a6:	8c 15       	cp	r24, r12
    10a8:	9d 05       	cpc	r25, r13
    10aa:	20 f4       	brcc	.+8      	; 0x10b4 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    10ac:	cd 92       	st	X+, r12
    10ae:	dc 92       	st	X, r13
		update = true;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	if (duration > MaxD)
    10b4:	d7 01       	movw	r26, r14
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	11 97       	sbiw	r26, 0x01	; 1
    10bc:	e8 17       	cp	r30, r24
    10be:	f9 07       	cpc	r31, r25
    10c0:	20 f4       	brcc	.+8      	; 0x10ca <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    10c2:	ed 93       	st	X+, r30
    10c4:	fc 93       	st	X, r31
		update = true;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    10ca:	d8 01       	movw	r26, r16
    10cc:	ed 91       	ld	r30, X+
    10ce:	fc 91       	ld	r31, X
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 51       	subi	r30, 0x1E	; 30
    10d6:	ff 4d       	sbci	r31, 0xDF	; 223
    10d8:	a0 80       	ld	r10, Z
    10da:	b1 80       	ldd	r11, Z+1	; 0x01
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	ab 1a       	sub	r10, r27
    10e0:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    10e2:	f7 01       	movw	r30, r14
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	8c 19       	sub	r24, r12
    10ea:	9d 09       	sbc	r25, r13
    10ec:	0e 94 bd 31 	call	0x637a	; 0x637a <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 91 10 	call	0x2122	; 0x2122 <_Z3maxjj>
    10f8:	b5 01       	movw	r22, r10
    10fa:	0e 94 8c 10 	call	0x2118	; 0x2118 <_Z3minjj>
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    10fe:	d8 01       	movw	r26, r16
    1100:	4d 91       	ld	r20, X+
    1102:	5c 91       	ld	r21, X
    1104:	6b e0       	ldi	r22, 0x0B	; 11
    1106:	64 9f       	mul	r22, r20
    1108:	90 01       	movw	r18, r0
    110a:	65 9f       	mul	r22, r21
    110c:	30 0d       	add	r19, r0
    110e:	11 24       	eor	r1, r1
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	e0 51       	subi	r30, 0x10	; 16
    111c:	f0 4e       	sbci	r31, 0xE0	; 224
    111e:	20 81       	ld	r18, Z
    1120:	31 81       	ldd	r19, Z+1	; 0x01
    1122:	ad ec       	ldi	r26, 0xCD	; 205
    1124:	bc ec       	ldi	r27, 0xCC	; 204
    1126:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	8b 8b       	std	Y+19, r24	; 0x13
    1134:	9c 8b       	std	Y+20, r25	; 0x14
	
	return update;
    1136:	89 89       	ldd	r24, Y+17	; 0x11
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	08 95       	ret

0000114e <_GLOBAL__sub_I_timer>:
#include "CDGUSDatabase.h"
#include <string.h>
#include <util/delay.h>
#include <avr/eeprom.h>

CTimerC timer;
    114e:	83 eb       	ldi	r24, 0xB3	; 179
    1150:	92 e2       	ldi	r25, 0x22	; 34
    1152:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
    1156:	80 eb       	ldi	r24, 0xB0	; 176
    1158:	92 e2       	ldi	r25, 0x22	; 34
    115a:	0e 94 68 30 	call	0x60d0	; 0x60d0 <_ZN7CTimerFC1Ev>
    115e:	08 95       	ret

00001160 <_GLOBAL__sub_D_timer>:
    1160:	80 eb       	ldi	r24, 0xB0	; 176
    1162:	92 e2       	ldi	r25, 0x22	; 34
    1164:	0e 94 74 30 	call	0x60e8	; 0x60e8 <_ZN7CTimerFD1Ev>
#include "CDGUSDatabase.h"
#include <string.h>
#include <util/delay.h>
#include <avr/eeprom.h>

CTimerC timer;
    1168:	83 eb       	ldi	r24, 0xB3	; 179
    116a:	92 e2       	ldi	r25, 0x22	; 34
    116c:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <_ZN7CTimerCD1Ev>
    1170:	08 95       	ret

00001172 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    1188:	fc 01       	movw	r30, r24
    118a:	eb 58       	subi	r30, 0x8B	; 139
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	60 83       	st	Z, r22
    1190:	71 83       	std	Z+1, r23	; 0x01
	
	// Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    1192:	46 e0       	ldi	r20, 0x06	; 6
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	83 eb       	ldi	r24, 0xB3	; 179
    1198:	92 e2       	ldi	r25, 0x22	; 34
    119a:	0e 94 89 2c 	call	0x5912	; 0x5912 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    119e:	68 ea       	ldi	r22, 0xA8	; 168
    11a0:	71 e6       	ldi	r23, 0x61	; 97
    11a2:	83 eb       	ldi	r24, 0xB3	; 179
    11a4:	92 e2       	ldi	r25, 0x22	; 34
    11a6:	0e 94 c7 2c 	call	0x598e	; 0x598e <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	ae 01       	movw	r20, r28
    11ae:	64 ec       	ldi	r22, 0xC4	; 196
    11b0:	7f e0       	ldi	r23, 0x0F	; 15
    11b2:	83 eb       	ldi	r24, 0xB3	; 179
    11b4:	92 e2       	ldi	r25, 0x22	; 34
    11b6:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	//timer.Start(25000);
	
	// Set global variables
	PIC_ID = 0;
    11ba:	1f 86       	std	Y+15, r1	; 0x0f
	update = false;
    11bc:	19 8a       	std	Y+17, r1	; 0x11
	prepare = false;
    11be:	1a 8a       	std	Y+18, r1	; 0x12
	m_wSetMin = 0;
    11c0:	6e 01       	movw	r12, r28
    11c2:	2d e6       	ldi	r18, 0x6D	; 109
    11c4:	c2 0e       	add	r12, r18
    11c6:	d1 1c       	adc	r13, r1
    11c8:	f6 01       	movw	r30, r12
    11ca:	10 82       	st	Z, r1
    11cc:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 10;
    11ce:	7e 01       	movw	r14, r28
    11d0:	ff e6       	ldi	r31, 0x6F	; 111
    11d2:	ef 0e       	add	r14, r31
    11d4:	f1 1c       	adc	r15, r1
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	f7 01       	movw	r30, r14
    11dc:	80 83       	st	Z, r24
    11de:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    11e0:	34 97       	sbiw	r30, 0x04	; 4
    11e2:	10 82       	st	Z, r1
    11e4:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    11e6:	f6 01       	movw	r30, r12
    11e8:	20 81       	ld	r18, Z
    11ea:	31 81       	ldd	r19, Z+1	; 0x01
    11ec:	36 97       	sbiw	r30, 0x06	; 6
    11ee:	20 83       	st	Z, r18
    11f0:	31 83       	std	Z+1, r19	; 0x01
	m_wSeconds = m_wSetSec;
    11f2:	f7 01       	movw	r30, r14
    11f4:	20 81       	ld	r18, Z
    11f6:	31 81       	ldd	r19, Z+1	; 0x01
    11f8:	36 97       	sbiw	r30, 0x06	; 6
    11fa:	20 83       	st	Z, r18
    11fc:	31 83       	std	Z+1, r19	; 0x01
	m_wDeadTime = 0;
    11fe:	3a 96       	adiw	r30, 0x0a	; 10
    1200:	10 82       	st	Z, r1
    1202:	11 82       	std	Z+1, r1	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    1204:	8f a7       	std	Y+47, r24	; 0x2f
    1206:	98 ab       	std	Y+48, r25	; 0x30
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    1208:	88 e2       	ldi	r24, 0x28	; 40
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	89 ab       	std	Y+49, r24	; 0x31
    120e:	9a ab       	std	Y+50, r25	; 0x32
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
    1210:	84 e6       	ldi	r24, 0x64	; 100
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	8b ab       	std	Y+51, r24	; 0x33
    1216:	9c ab       	std	Y+52, r25	; 0x34
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    1218:	25 e0       	ldi	r18, 0x05	; 5
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	29 a7       	std	Y+41, r18	; 0x29
    121e:	3a a7       	std	Y+42, r19	; 0x2a
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    1220:	20 e5       	ldi	r18, 0x50	; 80
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	2b a7       	std	Y+43, r18	; 0x2b
    1226:	3c a7       	std	Y+44, r19	; 0x2c
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
    1228:	8d a7       	std	Y+45, r24	; 0x2d
    122a:	9e a7       	std	Y+46, r25	; 0x2e
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    122c:	22 e0       	ldi	r18, 0x02	; 2
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	2b a3       	std	Y+35, r18	; 0x23
    1232:	3c a3       	std	Y+36, r19	; 0x24
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    1234:	28 e7       	ldi	r18, 0x78	; 120
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	2d a3       	std	Y+37, r18	; 0x25
    123a:	3e a3       	std	Y+38, r19	; 0x26
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
    123c:	8f a3       	std	Y+39, r24	; 0x27
    123e:	98 a7       	std	Y+40, r25	; 0x28
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	2d 8f       	std	Y+29, r18	; 0x1d
    1246:	3e 8f       	std	Y+30, r19	; 0x1e
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    1248:	8f 8f       	std	Y+31, r24	; 0x1f
    124a:	98 a3       	std	Y+32, r25	; 0x20
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
    124c:	89 a3       	std	Y+33, r24	; 0x21
    124e:	9a a3       	std	Y+34, r25	; 0x22
	
	// Current profile
	Profile = PROFILE_FAST;
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 7e 33 	call	0x66fc	; 0x66fc <eeprom_read_dword>
    125c:	5e 01       	movw	r10, r28
    125e:	fd e3       	ldi	r31, 0x3D	; 61
    1260:	af 0e       	add	r10, r31
    1262:	b1 1c       	adc	r11, r1
    1264:	f5 01       	movw	r30, r10
    1266:	60 83       	st	Z, r22
    1268:	71 83       	std	Z+1, r23	; 0x01
    126a:	82 83       	std	Z+2, r24	; 0x02
    126c:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    126e:	34 96       	adiw	r30, 0x04	; 4
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	80 83       	st	Z, r24
    1276:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1278:	be 01       	movw	r22, r28
    127a:	61 5d       	subi	r22, 0xD1	; 209
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	de 01       	movw	r26, r28
    1280:	ad 5b       	subi	r26, 0xBD	; 189
    1282:	bf 4f       	sbci	r27, 0xFF	; 255
    1284:	86 e0       	ldi	r24, 0x06	; 6
    1286:	fb 01       	movw	r30, r22
    1288:	01 90       	ld	r0, Z+
    128a:	0d 92       	st	X+, r0
    128c:	8a 95       	dec	r24
    128e:	e1 f7       	brne	.-8      	; 0x1288 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x116>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    1290:	8e 01       	movw	r16, r28
    1292:	07 5b       	subi	r16, 0xB7	; 183
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	ce 01       	movw	r24, r28
    1298:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    129c:	f8 01       	movw	r30, r16
    129e:	20 83       	st	Z, r18
    12a0:	31 83       	std	Z+1, r19	; 0x01
    12a2:	42 83       	std	Z+2, r20	; 0x02
    12a4:	53 83       	std	Z+3, r21	; 0x03
    12a6:	64 83       	std	Z+4, r22	; 0x04
    12a8:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    12aa:	f6 01       	movw	r30, r12
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	70 97       	sbiw	r30, 0x10	; 16
    12b2:	80 83       	st	Z, r24
    12b4:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    12b6:	f7 01       	movw	r30, r14
    12b8:	80 81       	ld	r24, Z
    12ba:	91 81       	ldd	r25, Z+1	; 0x01
    12bc:	70 97       	sbiw	r30, 0x10	; 16
    12be:	80 83       	st	Z, r24
    12c0:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    12c2:	f5 01       	movw	r30, r10
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	0e 94 9a 10 	call	0x2134	; 0x2134 <_Z6swap32m>
    12d0:	fe 01       	movw	r30, r28
    12d2:	e1 5b       	subi	r30, 0xB1	; 177
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	60 83       	st	Z, r22
    12d8:	71 83       	std	Z+1, r23	; 0x01
    12da:	82 83       	std	Z+2, r24	; 0x02
    12dc:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    12de:	34 96       	adiw	r30, 0x04	; 4
    12e0:	10 82       	st	Z, r1
    12e2:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 0;
    12e4:	32 96       	adiw	r30, 0x02	; 2
    12e6:	10 82       	st	Z, r1
    12e8:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.temperature = temperature;
    12ea:	32 96       	adiw	r30, 0x02	; 2
    12ec:	80 91 a4 24 	lds	r24, 0x24A4
    12f0:	90 91 a5 24 	lds	r25, 0x24A5
    12f4:	80 83       	st	Z, r24
    12f6:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    12f8:	32 96       	adiw	r30, 0x02	; 2
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    1302:	32 96       	adiw	r30, 0x02	; 2
    1304:	10 82       	st	Z, r1
    1306:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    1308:	36 96       	adiw	r30, 0x06	; 6
    130a:	10 82       	st	Z, r1
    130c:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    130e:	32 96       	adiw	r30, 0x02	; 2
    1310:	8d e0       	ldi	r24, 0x0D	; 13
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    1318:	47 e0       	ldi	r20, 0x07	; 7
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	80 eb       	ldi	r24, 0xB0	; 176
    131e:	92 e2       	ldi	r25, 0x22	; 34
    1320:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    1324:	6d a9       	ldd	r22, Y+53	; 0x35
    1326:	7e a9       	ldd	r23, Y+54	; 0x36
    1328:	80 eb       	ldi	r24, 0xB0	; 176
    132a:	92 e2       	ldi	r25, 0x22	; 34
    132c:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1330:	6f a9       	ldd	r22, Y+55	; 0x37
    1332:	78 ad       	ldd	r23, Y+56	; 0x38
    1334:	80 eb       	ldi	r24, 0xB0	; 176
    1336:	92 e2       	ldi	r25, 0x22	; 34
    1338:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    133c:	6f a9       	ldd	r22, Y+55	; 0x37
    133e:	78 ad       	ldd	r23, Y+56	; 0x38
    1340:	80 eb       	ldi	r24, 0xB0	; 176
    1342:	92 e2       	ldi	r25, 0x22	; 34
    1344:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	ae 01       	movw	r20, r28
    134c:	6e e4       	ldi	r22, 0x4E	; 78
    134e:	76 e0       	ldi	r23, 0x06	; 6
    1350:	80 eb       	ldi	r24, 0xB0	; 176
    1352:	92 e2       	ldi	r25, 0x22	; 34
    1354:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	ae 01       	movw	r20, r28
    135c:	6e e2       	ldi	r22, 0x2E	; 46
    135e:	7a e0       	ldi	r23, 0x0A	; 10
    1360:	80 eb       	ldi	r24, 0xB0	; 176
    1362:	92 e2       	ldi	r25, 0x22	; 34
    1364:	0e 94 20 30 	call	0x6040	; 0x6040 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    1368:	60 e1       	ldi	r22, 0x10	; 16
    136a:	80 eb       	ldi	r24, 0xB0	; 176
    136c:	92 e2       	ldi	r25, 0x22	; 34
    136e:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    1372:	60 e2       	ldi	r22, 0x20	; 32
    1374:	80 eb       	ldi	r24, 0xB0	; 176
    1376:	92 e2       	ldi	r25, 0x22	; 34
    1378:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    137c:	60 e1       	ldi	r22, 0x10	; 16
    137e:	80 eb       	ldi	r24, 0xB0	; 176
    1380:	92 e2       	ldi	r25, 0x22	; 34
    1382:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1386:	60 e2       	ldi	r22, 0x20	; 32
    1388:	80 eb       	ldi	r24, 0xB0	; 176
    138a:	92 e2       	ldi	r25, 0x22	; 34
    138c:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
}
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	08 95       	ret

000013a6 <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	1f 92       	push	r1
    13b4:	1f 92       	push	r1
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 96 10 	call	0x212c	; 0x212c <_Z4swapj>
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    13c8:	87 01       	movw	r16, r14
    13ca:	0b 58       	subi	r16, 0x8B	; 139
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	22 e0       	ldi	r18, 0x02	; 2
    13d0:	ae 01       	movw	r20, r28
    13d2:	4f 5f       	subi	r20, 0xFF	; 255
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	63 e0       	ldi	r22, 0x03	; 3
    13d8:	f8 01       	movw	r30, r16
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    13e2:	f8 01       	movw	r30, r16
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    13ec:	a7 01       	movw	r20, r14
    13ee:	4f 5b       	subi	r20, 0xBF	; 191
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	26 e2       	ldi	r18, 0x26	; 38
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	f8 01       	movw	r30, r16
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	0e 94 1d 29 	call	0x523a	; 0x523a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    1404:	f8 01       	movw	r30, r16
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    140e:	68 ea       	ldi	r22, 0xA8	; 168
    1410:	71 e6       	ldi	r23, 0x61	; 97
    1412:	83 eb       	ldi	r24, 0xB3	; 179
    1414:	92 e2       	ldi	r25, 0x22	; 34
    1416:	0e 94 a4 2c 	call	0x5948	; 0x5948 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    141a:	84 e0       	ldi	r24, 0x04	; 4
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	f7 01       	movw	r30, r14
    1420:	84 87       	std	Z+12, r24	; 0x0c
    1422:	95 87       	std	Z+13, r25	; 0x0d
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	08 95       	ret

00001436 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    1436:	fc 01       	movw	r30, r24
    1438:	86 85       	ldd	r24, Z+14	; 0x0e
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	71 f4       	brne	.+28     	; 0x145a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    143e:	80 eb       	ldi	r24, 0xB0	; 176
    1440:	92 e2       	ldi	r25, 0x22	; 34
    1442:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1446:	60 e1       	ldi	r22, 0x10	; 16
    1448:	80 eb       	ldi	r24, 0xB0	; 176
    144a:	92 e2       	ldi	r25, 0x22	; 34
    144c:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1450:	60 e2       	ldi	r22, 0x20	; 32
    1452:	80 eb       	ldi	r24, 0xB0	; 176
    1454:	92 e2       	ldi	r25, 0x22	; 34
    1456:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    145a:	08 95       	ret

0000145c <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    145c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1460:	08 95       	ret

00001462 <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
    1462:	af 92       	push	r10
    1464:	bf 92       	push	r11
    1466:	cf 92       	push	r12
    1468:	df 92       	push	r13
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <_ZN16CLaserControlApp3RunEv+0x16>
    1478:	00 d0       	rcall	.+0      	; 0x147a <_ZN16CLaserControlApp3RunEv+0x18>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    1480:	8c 01       	movw	r16, r24
    1482:	0b 58       	subi	r16, 0x8B	; 139
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	42 e0       	ldi	r20, 0x02	; 2
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	f8 01       	movw	r30, r16
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    1494:	f8 01       	movw	r30, r16
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    149e:	f8 01       	movw	r30, r16
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14a8:	ff ef       	ldi	r31, 0xFF	; 255
    14aa:	29 ef       	ldi	r18, 0xF9	; 249
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	f1 50       	subi	r31, 0x01	; 1
    14b0:	20 40       	sbci	r18, 0x00	; 0
    14b2:	80 40       	sbci	r24, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <_ZN16CLaserControlApp3RunEv+0x4c>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <_ZN16CLaserControlApp3RunEv+0x56>
    14b8:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    14ba:	f7 01       	movw	r30, r14
    14bc:	84 85       	ldd	r24, Z+12	; 0x0c
    14be:	95 85       	ldd	r25, Z+13	; 0x0d
    14c0:	9f 70       	andi	r25, 0x0F	; 15
    14c2:	89 2b       	or	r24, r25
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <_ZN16CLaserControlApp3RunEv+0x66>
    14c6:	41 c0       	rjmp	.+130    	; 0x154a <_ZN16CLaserControlApp3RunEv+0xe8>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    14c8:	22 e0       	ldi	r18, 0x02	; 2
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	44 ea       	ldi	r20, 0xA4	; 164
    14ce:	54 e2       	ldi	r21, 0x24	; 36
    14d0:	6c e0       	ldi	r22, 0x0C	; 12
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	c7 01       	movw	r24, r14
    14d6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    14da:	f7 01       	movw	r30, r14
    14dc:	ef 58       	subi	r30, 0x8F	; 143
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	44 97       	sbiw	r24, 0x14	; 20
    14e6:	28 f4       	brcc	.+10     	; 0x14f2 <_ZN16CLaserControlApp3RunEv+0x90>
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	3c 97       	sbiw	r30, 0x0c	; 12
    14ee:	80 83       	st	Z, r24
    14f0:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    14f2:	f7 01       	movw	r30, r14
    14f4:	ef 58       	subi	r30, 0x8F	; 143
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	44 97       	sbiw	r24, 0x14	; 20
    14fe:	28 f0       	brcs	.+10     	; 0x150a <_ZN16CLaserControlApp3RunEv+0xa8>
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	89 97       	sbiw	r24, 0x29	; 41
    1506:	08 f4       	brcc	.+2      	; 0x150a <_ZN16CLaserControlApp3RunEv+0xa8>
    1508:	09 c4       	rjmp	.+2066   	; 0x1d1c <_ZN16CLaserControlApp3RunEv+0x8ba>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    150a:	f7 01       	movw	r30, r14
    150c:	ef 58       	subi	r30, 0x8F	; 143
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	89 97       	sbiw	r24, 0x29	; 41
    1516:	28 f0       	brcs	.+10     	; 0x1522 <_ZN16CLaserControlApp3RunEv+0xc0>
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	3c 97       	sbiw	r30, 0x0c	; 12
    151e:	80 83       	st	Z, r24
    1520:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1522:	22 e0       	ldi	r18, 0x02	; 2
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	a7 01       	movw	r20, r14
    1528:	4b 59       	subi	r20, 0x9B	; 155
    152a:	5f 4f       	sbci	r21, 0xFF	; 255
    152c:	63 e1       	ldi	r22, 0x13	; 19
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	c7 01       	movw	r24, r14
    1532:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1536:	22 e0       	ldi	r18, 0x02	; 2
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	a7 01       	movw	r20, r14
    153c:	4f 58       	subi	r20, 0x8F	; 143
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	6e e0       	ldi	r22, 0x0E	; 14
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	c7 01       	movw	r24, r14
    1546:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    154a:	f7 01       	movw	r30, r14
    154c:	84 85       	ldd	r24, Z+12	; 0x0c
    154e:	95 85       	ldd	r25, Z+13	; 0x0d
    1550:	88 73       	andi	r24, 0x38	; 56
    1552:	99 27       	eor	r25, r25
    1554:	89 2b       	or	r24, r25
    1556:	79 f0       	breq	.+30     	; 0x1576 <_ZN16CLaserControlApp3RunEv+0x114>
	{
		if (temperature > 300)
    1558:	80 91 a4 24 	lds	r24, 0x24A4
    155c:	90 91 a5 24 	lds	r25, 0x24A5
    1560:	8d 32       	cpi	r24, 0x2D	; 45
    1562:	91 40       	sbci	r25, 0x01	; 1
    1564:	44 f0       	brlt	.+16     	; 0x1576 <_ZN16CLaserControlApp3RunEv+0x114>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    1566:	69 e2       	ldi	r22, 0x29	; 41
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	c7 01       	movw	r24, r14
    156c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    1570:	f7 01       	movw	r30, r14
    1572:	87 85       	ldd	r24, Z+15	; 0x0f
    1574:	80 8b       	std	Z+16, r24	; 0x10
		}
	}
	
	switch (state)
    1576:	f7 01       	movw	r30, r14
    1578:	84 85       	ldd	r24, Z+12	; 0x0c
    157a:	95 85       	ldd	r25, Z+13	; 0x0d
    157c:	81 15       	cp	r24, r1
    157e:	f2 e0       	ldi	r31, 0x02	; 2
    1580:	9f 07       	cpc	r25, r31
    1582:	09 f4       	brne	.+2      	; 0x1586 <_ZN16CLaserControlApp3RunEv+0x124>
    1584:	b2 c2       	rjmp	.+1380   	; 0x1aea <_ZN16CLaserControlApp3RunEv+0x688>
    1586:	1c f5       	brge	.+70     	; 0x15ce <_ZN16CLaserControlApp3RunEv+0x16c>
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <_ZN16CLaserControlApp3RunEv+0x12e>
    158e:	bc c1       	rjmp	.+888    	; 0x1908 <_ZN16CLaserControlApp3RunEv+0x4a6>
    1590:	64 f4       	brge	.+24     	; 0x15aa <_ZN16CLaserControlApp3RunEv+0x148>
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <_ZN16CLaserControlApp3RunEv+0x138>
    1598:	4d c1       	rjmp	.+666    	; 0x1834 <_ZN16CLaserControlApp3RunEv+0x3d2>
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <_ZN16CLaserControlApp3RunEv+0x140>
    15a0:	51 c0       	rjmp	.+162    	; 0x1644 <_ZN16CLaserControlApp3RunEv+0x1e2>
    15a2:	89 2b       	or	r24, r25
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <_ZN16CLaserControlApp3RunEv+0x146>
    15a6:	99 c3       	rjmp	.+1842   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
    15a8:	42 c0       	rjmp	.+132    	; 0x162e <_ZN16CLaserControlApp3RunEv+0x1cc>
    15aa:	80 32       	cpi	r24, 0x20	; 32
    15ac:	91 05       	cpc	r25, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_ZN16CLaserControlApp3RunEv+0x150>
    15b0:	bc c1       	rjmp	.+888    	; 0x192a <_ZN16CLaserControlApp3RunEv+0x4c8>
    15b2:	24 f4       	brge	.+8      	; 0x15bc <_ZN16CLaserControlApp3RunEv+0x15a>
    15b4:	40 97       	sbiw	r24, 0x10	; 16
    15b6:	09 f4       	brne	.+2      	; 0x15ba <_ZN16CLaserControlApp3RunEv+0x158>
    15b8:	b8 c1       	rjmp	.+880    	; 0x192a <_ZN16CLaserControlApp3RunEv+0x4c8>
    15ba:	8f c3       	rjmp	.+1822   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
    15bc:	80 34       	cpi	r24, 0x40	; 64
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <_ZN16CLaserControlApp3RunEv+0x162>
    15c2:	6d c1       	rjmp	.+730    	; 0x189e <_ZN16CLaserControlApp3RunEv+0x43c>
    15c4:	81 15       	cp	r24, r1
    15c6:	91 40       	sbci	r25, 0x01	; 1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <_ZN16CLaserControlApp3RunEv+0x16a>
    15ca:	53 c2       	rjmp	.+1190   	; 0x1a72 <_ZN16CLaserControlApp3RunEv+0x610>
    15cc:	86 c3       	rjmp	.+1804   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
    15ce:	81 15       	cp	r24, r1
    15d0:	f7 e0       	ldi	r31, 0x07	; 7
    15d2:	9f 07       	cpc	r25, r31
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <_ZN16CLaserControlApp3RunEv+0x176>
    15d6:	27 c2       	rjmp	.+1102   	; 0x1a26 <_ZN16CLaserControlApp3RunEv+0x5c4>
    15d8:	ac f4       	brge	.+42     	; 0x1604 <_ZN16CLaserControlApp3RunEv+0x1a2>
    15da:	81 15       	cp	r24, r1
    15dc:	e4 e0       	ldi	r30, 0x04	; 4
    15de:	9e 07       	cpc	r25, r30
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <_ZN16CLaserControlApp3RunEv+0x182>
    15e2:	ee c2       	rjmp	.+1500   	; 0x1bc0 <_ZN16CLaserControlApp3RunEv+0x75e>
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <_ZN16CLaserControlApp3RunEv+0x18e>
    15e6:	81 15       	cp	r24, r1
    15e8:	93 40       	sbci	r25, 0x03	; 3
    15ea:	09 f4       	brne	.+2      	; 0x15ee <_ZN16CLaserControlApp3RunEv+0x18c>
    15ec:	b4 c2       	rjmp	.+1384   	; 0x1b56 <_ZN16CLaserControlApp3RunEv+0x6f4>
    15ee:	75 c3       	rjmp	.+1770   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
    15f0:	81 15       	cp	r24, r1
    15f2:	e5 e0       	ldi	r30, 0x05	; 5
    15f4:	9e 07       	cpc	r25, r30
    15f6:	09 f4       	brne	.+2      	; 0x15fa <_ZN16CLaserControlApp3RunEv+0x198>
    15f8:	2d c2       	rjmp	.+1114   	; 0x1a54 <_ZN16CLaserControlApp3RunEv+0x5f2>
    15fa:	81 15       	cp	r24, r1
    15fc:	96 40       	sbci	r25, 0x06	; 6
    15fe:	09 f4       	brne	.+2      	; 0x1602 <_ZN16CLaserControlApp3RunEv+0x1a0>
    1600:	00 c2       	rjmp	.+1024   	; 0x1a02 <_ZN16CLaserControlApp3RunEv+0x5a0>
    1602:	6b c3       	rjmp	.+1750   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
    1604:	81 15       	cp	r24, r1
    1606:	20 e2       	ldi	r18, 0x20	; 32
    1608:	92 07       	cpc	r25, r18
    160a:	09 f4       	brne	.+2      	; 0x160e <_ZN16CLaserControlApp3RunEv+0x1ac>
    160c:	17 c3       	rjmp	.+1582   	; 0x1c3c <_ZN16CLaserControlApp3RunEv+0x7da>
    160e:	2c f4       	brge	.+10     	; 0x161a <_ZN16CLaserControlApp3RunEv+0x1b8>
    1610:	81 15       	cp	r24, r1
    1612:	90 41       	sbci	r25, 0x10	; 16
    1614:	09 f4       	brne	.+2      	; 0x1618 <_ZN16CLaserControlApp3RunEv+0x1b6>
    1616:	da c2       	rjmp	.+1460   	; 0x1bcc <_ZN16CLaserControlApp3RunEv+0x76a>
    1618:	60 c3       	rjmp	.+1728   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
    161a:	81 15       	cp	r24, r1
    161c:	20 e3       	ldi	r18, 0x30	; 48
    161e:	92 07       	cpc	r25, r18
    1620:	09 f4       	brne	.+2      	; 0x1624 <_ZN16CLaserControlApp3RunEv+0x1c2>
    1622:	39 c3       	rjmp	.+1650   	; 0x1c96 <_ZN16CLaserControlApp3RunEv+0x834>
    1624:	81 15       	cp	r24, r1
    1626:	90 44       	sbci	r25, 0x40	; 64
    1628:	09 f4       	brne	.+2      	; 0x162c <_ZN16CLaserControlApp3RunEv+0x1ca>
    162a:	52 c3       	rjmp	.+1700   	; 0x1cd0 <_ZN16CLaserControlApp3RunEv+0x86e>
    162c:	56 c3       	rjmp	.+1708   	; 0x1cda <_ZN16CLaserControlApp3RunEv+0x878>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    162e:	63 e0       	ldi	r22, 0x03	; 3
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	c7 01       	movw	r24, r14
    1634:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	f7 01       	movw	r30, r14
    163e:	84 87       	std	Z+12, r24	; 0x0c
    1640:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    1642:	4f c3       	rjmp	.+1694   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    1644:	f7 01       	movw	r30, r14
    1646:	ed 5a       	subi	r30, 0xAD	; 173
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	a0 80       	ld	r10, Z
    164c:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    164e:	87 01       	movw	r16, r14
    1650:	0b 5a       	subi	r16, 0xAB	; 171
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	f8 01       	movw	r30, r16
    1656:	c0 80       	ld	r12, Z
    1658:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    165a:	46 e0       	ldi	r20, 0x06	; 6
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	c7 01       	movw	r24, r14
    1664:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1668:	ff ef       	ldi	r31, 0xFF	; 255
    166a:	29 ef       	ldi	r18, 0xF9	; 249
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	f1 50       	subi	r31, 0x01	; 1
    1670:	20 40       	sbci	r18, 0x00	; 0
    1672:	80 40       	sbci	r24, 0x00	; 0
    1674:	e1 f7       	brne	.-8      	; 0x166e <_ZN16CLaserControlApp3RunEv+0x20c>
    1676:	00 c0       	rjmp	.+0      	; 0x1678 <_ZN16CLaserControlApp3RunEv+0x216>
    1678:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    167a:	42 e0       	ldi	r20, 0x02	; 2
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	6d e0       	ldi	r22, 0x0D	; 13
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	c7 01       	movw	r24, r14
    1684:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1688:	9f ef       	ldi	r25, 0xFF	; 255
    168a:	e9 ef       	ldi	r30, 0xF9	; 249
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	91 50       	subi	r25, 0x01	; 1
    1690:	e0 40       	sbci	r30, 0x00	; 0
    1692:	f0 40       	sbci	r31, 0x00	; 0
    1694:	e1 f7       	brne	.-8      	; 0x168e <_ZN16CLaserControlApp3RunEv+0x22c>
    1696:	00 c0       	rjmp	.+0      	; 0x1698 <_ZN16CLaserControlApp3RunEv+0x236>
    1698:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    169a:	42 e0       	ldi	r20, 0x02	; 2
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	c7 01       	movw	r24, r14
    16a4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16a8:	2f ef       	ldi	r18, 0xFF	; 255
    16aa:	89 ef       	ldi	r24, 0xF9	; 249
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	21 50       	subi	r18, 0x01	; 1
    16b0:	80 40       	sbci	r24, 0x00	; 0
    16b2:	90 40       	sbci	r25, 0x00	; 0
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <_ZN16CLaserControlApp3RunEv+0x24c>
    16b6:	00 c0       	rjmp	.+0      	; 0x16b8 <_ZN16CLaserControlApp3RunEv+0x256>
    16b8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    16ba:	42 e0       	ldi	r20, 0x02	; 2
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	6a e0       	ldi	r22, 0x0A	; 10
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	c7 01       	movw	r24, r14
    16c4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16c8:	ef ef       	ldi	r30, 0xFF	; 255
    16ca:	f9 ef       	ldi	r31, 0xF9	; 249
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	e1 50       	subi	r30, 0x01	; 1
    16d0:	f0 40       	sbci	r31, 0x00	; 0
    16d2:	20 40       	sbci	r18, 0x00	; 0
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <_ZN16CLaserControlApp3RunEv+0x26c>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <_ZN16CLaserControlApp3RunEv+0x276>
    16d8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    16da:	42 e0       	ldi	r20, 0x02	; 2
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	6b e0       	ldi	r22, 0x0B	; 11
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	c7 01       	movw	r24, r14
    16e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	99 ef       	ldi	r25, 0xF9	; 249
    16ec:	e0 e0       	ldi	r30, 0x00	; 0
    16ee:	81 50       	subi	r24, 0x01	; 1
    16f0:	90 40       	sbci	r25, 0x00	; 0
    16f2:	e0 40       	sbci	r30, 0x00	; 0
    16f4:	e1 f7       	brne	.-8      	; 0x16ee <_ZN16CLaserControlApp3RunEv+0x28c>
    16f6:	00 c0       	rjmp	.+0      	; 0x16f8 <_ZN16CLaserControlApp3RunEv+0x296>
    16f8:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    16fa:	f7 01       	movw	r30, r14
    16fc:	fd 96       	adiw	r30, 0x3d	; 61
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	0e 94 9a 10 	call	0x2134	; 0x2134 <_Z6swap32m>
    170a:	f7 01       	movw	r30, r14
    170c:	e1 5b       	subi	r30, 0xB1	; 177
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 83       	st	Z, r22
    1712:	71 83       	std	Z+1, r23	; 0x01
    1714:	82 83       	std	Z+2, r24	; 0x02
    1716:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature = temperature;
    1718:	80 91 a4 24 	lds	r24, 0x24A4
    171c:	90 91 a5 24 	lds	r25, 0x24A5
    1720:	38 96       	adiw	r30, 0x08	; 8
    1722:	80 83       	st	Z, r24
    1724:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    1726:	7a 96       	adiw	r30, 0x1a	; 26
    1728:	80 81       	ld	r24, Z
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	76 97       	sbiw	r30, 0x16	; 22
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    1732:	f8 01       	movw	r30, r16
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	6c 15       	cp	r22, r12
    173a:	7d 05       	cpc	r23, r13
    173c:	39 f0       	breq	.+14     	; 0x174c <_ZN16CLaserControlApp3RunEv+0x2ea>
				{
					PhototypePreset(laserDiodeData.phototype);
    173e:	c7 01       	movw	r24, r14
    1740:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	f7 01       	movw	r30, r14
    1748:	81 8b       	std	Z+17, r24	; 0x11
    174a:	4f c0       	rjmp	.+158    	; 0x17ea <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				if (melanin != laserDiodeData.melanin)
    174c:	f7 01       	movw	r30, r14
    174e:	ed 5a       	subi	r30, 0xAD	; 173
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	6a 15       	cp	r22, r10
    1758:	7b 05       	cpc	r23, r11
    175a:	39 f0       	breq	.+14     	; 0x176a <_ZN16CLaserControlApp3RunEv+0x308>
				{
					MelaninPreset(laserDiodeData.melanin);
    175c:	c7 01       	movw	r24, r14
    175e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	f7 01       	movw	r30, r14
    1766:	81 8b       	std	Z+17, r24	; 0x11
    1768:	40 c0       	rjmp	.+128    	; 0x17ea <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    176a:	f7 01       	movw	r30, r14
    176c:	ef 5b       	subi	r30, 0xBF	; 191
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    1772:	f7 01       	movw	r30, r14
    1774:	96 85       	ldd	r25, Z+14	; 0x0e
    1776:	98 17       	cp	r25, r24
    1778:	19 f0       	breq	.+6      	; 0x1780 <_ZN16CLaserControlApp3RunEv+0x31e>
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	91 8b       	std	Z+17, r25	; 0x11
    177e:	86 87       	std	Z+14, r24	; 0x0e
				
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    1780:	f7 01       	movw	r30, r14
    1782:	86 85       	ldd	r24, Z+14	; 0x0e
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	bc 01       	movw	r22, r24
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	68 0f       	add	r22, r24
    178e:	79 1f       	adc	r23, r25
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	69 5e       	subi	r22, 0xE9	; 233
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	6e 0d       	add	r22, r14
    179a:	7f 1d       	adc	r23, r15
    179c:	86 e0       	ldi	r24, 0x06	; 6
    179e:	fb 01       	movw	r30, r22
    17a0:	d7 01       	movw	r26, r14
    17a2:	ad 5b       	subi	r26, 0xBD	; 189
    17a4:	bf 4f       	sbci	r27, 0xFF	; 255
    17a6:	01 90       	ld	r0, Z+
    17a8:	0d 92       	st	X+, r0
    17aa:	8a 95       	dec	r24
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <_ZN16CLaserControlApp3RunEv+0x344>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    17ae:	87 01       	movw	r16, r14
    17b0:	07 5b       	subi	r16, 0xB7	; 183
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	c7 01       	movw	r24, r14
    17b6:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    17ba:	f8 01       	movw	r30, r16
    17bc:	20 83       	st	Z, r18
    17be:	31 83       	std	Z+1, r19	; 0x01
    17c0:	42 83       	std	Z+2, r20	; 0x02
    17c2:	53 83       	std	Z+3, r21	; 0x03
    17c4:	64 83       	std	Z+4, r22	; 0x04
    17c6:	75 83       	std	Z+5, r23	; 0x05
					laserPower = m_structLaserProfile[Profile].EnergyPercent;
    17c8:	f7 01       	movw	r30, r14
    17ca:	86 85       	ldd	r24, Z+14	; 0x0e
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	fc 01       	movw	r30, r24
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	e8 0f       	add	r30, r24
    17d6:	f9 1f       	adc	r31, r25
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	ee 0d       	add	r30, r14
    17de:	ff 1d       	adc	r31, r15
    17e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    17e2:	94 8d       	ldd	r25, Z+28	; 0x1c
    17e4:	f7 01       	movw	r30, r14
    17e6:	83 af       	std	Z+59, r24	; 0x3b
    17e8:	94 af       	std	Z+60, r25	; 0x3c
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    17ea:	f7 01       	movw	r30, r14
    17ec:	26 85       	ldd	r18, Z+14	; 0x0e
    17ee:	a7 01       	movw	r20, r14
    17f0:	4b 5b       	subi	r20, 0xBB	; 187
    17f2:	5f 4f       	sbci	r21, 0xFF	; 255
    17f4:	b7 01       	movw	r22, r14
    17f6:	6d 5b       	subi	r22, 0xBD	; 189
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	c7 01       	movw	r24, r14
    17fc:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    1800:	f7 01       	movw	r30, r14
    1802:	81 8b       	std	Z+17, r24	; 0x11
				
				laserPower = m_wMaxEnergy * laserPower / 100;
    1804:	43 89       	ldd	r20, Z+19	; 0x13
    1806:	54 89       	ldd	r21, Z+20	; 0x14
    1808:	83 ad       	ldd	r24, Z+59	; 0x3b
    180a:	94 ad       	ldd	r25, Z+60	; 0x3c
    180c:	48 9f       	mul	r20, r24
    180e:	90 01       	movw	r18, r0
    1810:	49 9f       	mul	r20, r25
    1812:	30 0d       	add	r19, r0
    1814:	58 9f       	mul	r21, r24
    1816:	30 0d       	add	r19, r0
    1818:	11 24       	eor	r1, r1
    181a:	36 95       	lsr	r19
    181c:	27 95       	ror	r18
    181e:	36 95       	lsr	r19
    1820:	27 95       	ror	r18
    1822:	ab e7       	ldi	r26, 0x7B	; 123
    1824:	b4 e1       	ldi	r27, 0x14	; 20
    1826:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
    182e:	83 af       	std	Z+59, r24	; 0x3b
    1830:	94 af       	std	Z+60, r25	; 0x3c
					laserDiodeData.laserprofile.EnergyPercent = m_wMaxEnergy;
					laserPower = m_wMaxEnergy;
					update = true;
				}*/
			}
		break;
    1832:	57 c2       	rjmp	.+1198   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    1834:	f7 01       	movw	r30, r14
    1836:	82 89       	ldd	r24, Z+18	; 0x12
    1838:	88 23       	and	r24, r24
    183a:	b1 f0       	breq	.+44     	; 0x1868 <_ZN16CLaserControlApp3RunEv+0x406>
				{
					timervar.timer_minutes = m_wMinutes;
    183c:	e9 59       	subi	r30, 0x99	; 153
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    1848:	32 96       	adiw	r30, 0x02	; 2
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	8b 83       	std	Y+3, r24	; 0x03
    1850:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1852:	24 e0       	ldi	r18, 0x04	; 4
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	ae 01       	movw	r20, r28
    1858:	4f 5f       	subi	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	6f e0       	ldi	r22, 0x0F	; 15
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	c7 01       	movw	r24, r14
    1862:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    1866:	3d c2       	rjmp	.+1146   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    1868:	f7 01       	movw	r30, r14
    186a:	86 85       	ldd	r24, Z+14	; 0x0e
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	ac 01       	movw	r20, r24
    1870:	44 0f       	add	r20, r20
    1872:	55 1f       	adc	r21, r21
    1874:	48 0f       	add	r20, r24
    1876:	59 1f       	adc	r21, r25
    1878:	44 0f       	add	r20, r20
    187a:	55 1f       	adc	r21, r21
    187c:	49 5e       	subi	r20, 0xE9	; 233
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	4e 0d       	add	r20, r14
    1882:	5f 1d       	adc	r21, r15
    1884:	26 e0       	ldi	r18, 0x06	; 6
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	62 e0       	ldi	r22, 0x02	; 2
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	c7 01       	movw	r24, r14
    188e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    1892:	6c e0       	ldi	r22, 0x0C	; 12
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	c7 01       	movw	r24, r14
    1898:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    189c:	22 c2       	rjmp	.+1092   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    189e:	80 91 a4 24 	lds	r24, 0x24A4
    18a2:	90 91 a5 24 	lds	r25, 0x24A5
    18a6:	6a e0       	ldi	r22, 0x0A	; 10
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <__divmodhi4>
    18ae:	69 83       	std	Y+1, r22	; 0x01
    18b0:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    18b6:	24 e0       	ldi	r18, 0x04	; 4
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	ae 01       	movw	r20, r28
    18bc:	4f 5f       	subi	r20, 0xFF	; 255
    18be:	5f 4f       	sbci	r21, 0xFF	; 255
    18c0:	6f e0       	ldi	r22, 0x0F	; 15
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	c7 01       	movw	r24, r14
    18c6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    18ca:	f7 01       	movw	r30, r14
    18cc:	e3 59       	subi	r30, 0x93	; 147
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	36 97       	sbiw	r30, 0x06	; 6
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    18da:	38 96       	adiw	r30, 0x08	; 8
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	36 97       	sbiw	r30, 0x06	; 6
    18e2:	80 83       	st	Z, r24
    18e4:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	f7 01       	movw	r30, r14
    18ea:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    18ec:	80 91 a4 24 	lds	r24, 0x24A4
    18f0:	90 91 a5 24 	lds	r25, 0x24A5
    18f4:	82 32       	cpi	r24, 0x22	; 34
    18f6:	91 40       	sbci	r25, 0x01	; 1
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <_ZN16CLaserControlApp3RunEv+0x49a>
    18fa:	f3 c1       	rjmp	.+998    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
					SetPictureId(PICID_WORK_PREPARE);
    18fc:	67 e0       	ldi	r22, 0x07	; 7
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	c7 01       	movw	r24, r14
    1902:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1906:	ed c1       	rjmp	.+986    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    1908:	80 91 a4 24 	lds	r24, 0x24A4
    190c:	90 91 a5 24 	lds	r25, 0x24A5
    1910:	8d 32       	cpi	r24, 0x2D	; 45
    1912:	91 40       	sbci	r25, 0x01	; 1
    1914:	0c f4       	brge	.+2      	; 0x1918 <_ZN16CLaserControlApp3RunEv+0x4b6>
    1916:	e5 c1       	rjmp	.+970    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    1918:	69 e2       	ldi	r22, 0x29	; 41
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	c7 01       	movw	r24, r14
    191e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    1922:	f7 01       	movw	r30, r14
    1924:	87 85       	ldd	r24, Z+15	; 0x0f
    1926:	80 8b       	std	Z+16, r24	; 0x10
    1928:	dc c1       	rjmp	.+952    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    192a:	f7 01       	movw	r30, r14
    192c:	83 ad       	ldd	r24, Z+59	; 0x3b
    192e:	94 ad       	ldd	r25, Z+60	; 0x3c
    1930:	ac 01       	movw	r20, r24
    1932:	56 95       	lsr	r21
    1934:	54 2f       	mov	r21, r20
    1936:	44 27       	eor	r20, r20
    1938:	57 95       	ror	r21
    193a:	47 95       	ror	r20
    193c:	98 2f       	mov	r25, r24
    193e:	88 27       	eor	r24, r24
    1940:	99 0f       	add	r25, r25
    1942:	48 0f       	add	r20, r24
    1944:	59 1f       	adc	r21, r25
    1946:	9a 01       	movw	r18, r20
    1948:	a1 e1       	ldi	r26, 0x11	; 17
    194a:	b4 e0       	ldi	r27, 0x04	; 4
    194c:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
    1950:	48 1b       	sub	r20, r24
    1952:	59 0b       	sbc	r21, r25
    1954:	56 95       	lsr	r21
    1956:	47 95       	ror	r20
    1958:	84 0f       	add	r24, r20
    195a:	95 1f       	adc	r25, r21
    195c:	96 95       	lsr	r25
    195e:	87 95       	ror	r24
    1960:	92 95       	swap	r25
    1962:	82 95       	swap	r24
    1964:	8f 70       	andi	r24, 0x0F	; 15
    1966:	89 27       	eor	r24, r25
    1968:	9f 70       	andi	r25, 0x0F	; 15
    196a:	89 27       	eor	r24, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	9e 83       	std	Y+6, r25	; 0x06
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1978:	42 e0       	ldi	r20, 0x02	; 2
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	be 01       	movw	r22, r28
    197e:	6b 5f       	subi	r22, 0xFB	; 251
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8c e5       	ldi	r24, 0x5C	; 92
    1984:	95 e2       	ldi	r25, 0x25	; 37
    1986:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN4CSPI4SendEPhj>
							
				if (!laserBoard.Footswitch())
    198a:	82 e2       	ldi	r24, 0x22	; 34
    198c:	95 e2       	ldi	r25, 0x25	; 37
    198e:	0e 94 09 2c 	call	0x5812	; 0x5812 <_ZN11CLaserBoard10FootswitchEv>
    1992:	81 11       	cpse	r24, r1
    1994:	10 c0       	rjmp	.+32     	; 0x19b6 <_ZN16CLaserControlApp3RunEv+0x554>
				{
					if (state != APP_WORKLIGHT)
    1996:	f7 01       	movw	r30, r14
    1998:	84 85       	ldd	r24, Z+12	; 0x0c
    199a:	95 85       	ldd	r25, Z+13	; 0x0d
    199c:	80 97       	sbiw	r24, 0x20	; 32
    199e:	d1 f0       	breq	.+52     	; 0x19d4 <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_STARTED);
    19a0:	60 e1       	ldi	r22, 0x10	; 16
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	c7 01       	movw	r24, r14
    19a6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	f7 01       	movw	r30, r14
    19b0:	84 87       	std	Z+12, r24	; 0x0c
    19b2:	95 87       	std	Z+13, r25	; 0x0d
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <_ZN16CLaserControlApp3RunEv+0x572>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    19b6:	f7 01       	movw	r30, r14
    19b8:	84 85       	ldd	r24, Z+12	; 0x0c
    19ba:	95 85       	ldd	r25, Z+13	; 0x0d
    19bc:	40 97       	sbiw	r24, 0x10	; 16
    19be:	51 f0       	breq	.+20     	; 0x19d4 <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_POWERON);
    19c0:	6e e0       	ldi	r22, 0x0E	; 14
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	c7 01       	movw	r24, r14
    19c6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    19ca:	80 e1       	ldi	r24, 0x10	; 16
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	f7 01       	movw	r30, r14
    19d0:	84 87       	std	Z+12, r24	; 0x0c
    19d2:	95 87       	std	Z+13, r25	; 0x0d
					}
				}
			
				uint32_t cnt = swap32(laserCounter);
    19d4:	f7 01       	movw	r30, r14
    19d6:	fd 96       	adiw	r30, 0x3d	; 61
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	0e 94 9a 10 	call	0x2134	; 0x2134 <_Z6swap32m>
    19e4:	69 83       	std	Y+1, r22	; 0x01
    19e6:	7a 83       	std	Y+2, r23	; 0x02
    19e8:	8b 83       	std	Y+3, r24	; 0x03
    19ea:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    19ec:	24 e0       	ldi	r18, 0x04	; 4
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	ae 01       	movw	r20, r28
    19f2:	4f 5f       	subi	r20, 0xFF	; 255
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	68 e0       	ldi	r22, 0x08	; 8
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	c7 01       	movw	r24, r14
    19fc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    1a00:	70 c1       	rjmp	.+736    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    1a02:	82 e2       	ldi	r24, 0x22	; 34
    1a04:	95 e2       	ldi	r25, 0x25	; 37
    1a06:	0e 94 be 2b 	call	0x577c	; 0x577c <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	ef 58       	subi	r30, 0x8F	; 143
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	cd 97       	sbiw	r24, 0x3d	; 61
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <_ZN16CLaserControlApp3RunEv+0x5b8>
    1a18:	64 c1       	rjmp	.+712    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
				SetPictureId(PICID_WORKOnReady);
    1a1a:	69 e1       	ldi	r22, 0x19	; 25
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	c7 01       	movw	r24, r14
    1a20:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a24:	5e c1       	rjmp	.+700    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    1a26:	82 e2       	ldi	r24, 0x22	; 34
    1a28:	95 e2       	ldi	r25, 0x25	; 37
    1a2a:	0e 94 be 2b 	call	0x577c	; 0x577c <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    1a2e:	f7 01       	movw	r30, r14
    1a30:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    1a32:	80 91 a4 24 	lds	r24, 0x24A4
    1a36:	90 91 a5 24 	lds	r25, 0x24A5
    1a3a:	82 32       	cpi	r24, 0x22	; 34
    1a3c:	91 40       	sbci	r25, 0x01	; 1
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <_ZN16CLaserControlApp3RunEv+0x5e0>
    1a40:	50 c1       	rjmp	.+672    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
			{
				prepare = true;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	f7 01       	movw	r30, r14
    1a46:	82 8b       	std	Z+18, r24	; 0x12
				SetPictureId(PIC_ID_last);
    1a48:	60 89       	ldd	r22, Z+16	; 0x10
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a52:	47 c1       	rjmp	.+654    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    1a54:	82 e2       	ldi	r24, 0x22	; 34
    1a56:	95 e2       	ldi	r25, 0x25	; 37
    1a58:	0e 94 be 2b 	call	0x577c	; 0x577c <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    1a5c:	80 91 68 06 	lds	r24, 0x0668
    1a60:	85 ff       	sbrs	r24, 5
    1a62:	3f c1       	rjmp	.+638    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
				SetPictureId(PIC_ID_last);
    1a64:	f7 01       	movw	r30, r14
    1a66:	60 89       	ldd	r22, Z+16	; 0x10
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a70:	38 c1       	rjmp	.+624    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		
		// Commands
		case APP_WORKOnReady:
			{
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    1a72:	82 e2       	ldi	r24, 0x22	; 34
    1a74:	95 e2       	ldi	r25, 0x25	; 37
    1a76:	0e 94 ba 2b 	call	0x5774	; 0x5774 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	e7 5a       	subi	r30, 0xA7	; 167
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	2c ec       	ldi	r18, 0xCC	; 204
    1a86:	28 9f       	mul	r18, r24
    1a88:	b0 01       	movw	r22, r0
    1a8a:	29 9f       	mul	r18, r25
    1a8c:	70 0d       	add	r23, r0
    1a8e:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1a90:	83 e5       	ldi	r24, 0x53	; 83
    1a92:	95 e2       	ldi	r25, 0x25	; 37
    1a94:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <_ZN8CTimerD18SetCOMPAEj>
				pwmtimer.Start(1024);
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	74 e0       	ldi	r23, 0x04	; 4
    1a9c:	83 e5       	ldi	r24, 0x53	; 83
    1a9e:	95 e2       	ldi	r25, 0x25	; 37
    1aa0:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <_ZN8CTimerD15StartEj>
				
				prepare = true;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	82 8b       	std	Z+18, r24	; 0x12
				m_wMinutes = m_wSetMin;
    1aaa:	e3 59       	subi	r30, 0x93	; 147
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	36 97       	sbiw	r30, 0x06	; 6
    1ab4:	80 83       	st	Z, r24
    1ab6:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1ab8:	38 96       	adiw	r30, 0x08	; 8
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	36 97       	sbiw	r30, 0x06	; 6
    1ac0:	80 83       	st	Z, r24
    1ac2:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    1ac4:	80 91 a4 24 	lds	r24, 0x24A4
    1ac8:	90 91 a5 24 	lds	r25, 0x24A5
    1acc:	83 32       	cpi	r24, 0x23	; 35
    1ace:	91 40       	sbci	r25, 0x01	; 1
    1ad0:	34 f0       	brlt	.+12     	; 0x1ade <_ZN16CLaserControlApp3RunEv+0x67c>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1ad2:	67 e2       	ldi	r22, 0x27	; 39
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1adc:	02 c1       	rjmp	.+516    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1ade:	67 e0       	ldi	r22, 0x07	; 7
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ae8:	fc c0       	rjmp	.+504    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1aea:	f7 01       	movw	r30, r14
    1aec:	83 ad       	ldd	r24, Z+59	; 0x3b
    1aee:	94 ad       	ldd	r25, Z+60	; 0x3c
    1af0:	ac 01       	movw	r20, r24
    1af2:	56 95       	lsr	r21
    1af4:	54 2f       	mov	r21, r20
    1af6:	44 27       	eor	r20, r20
    1af8:	57 95       	ror	r21
    1afa:	47 95       	ror	r20
    1afc:	98 2f       	mov	r25, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	99 0f       	add	r25, r25
    1b02:	48 0f       	add	r20, r24
    1b04:	59 1f       	adc	r21, r25
    1b06:	9a 01       	movw	r18, r20
    1b08:	a1 e1       	ldi	r26, 0x11	; 17
    1b0a:	b4 e0       	ldi	r27, 0x04	; 4
    1b0c:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
    1b10:	48 1b       	sub	r20, r24
    1b12:	59 0b       	sbc	r21, r25
    1b14:	56 95       	lsr	r21
    1b16:	47 95       	ror	r20
    1b18:	84 0f       	add	r24, r20
    1b1a:	95 1f       	adc	r25, r21
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	92 95       	swap	r25
    1b22:	82 95       	swap	r24
    1b24:	8f 70       	andi	r24, 0x0F	; 15
    1b26:	89 27       	eor	r24, r25
    1b28:	9f 70       	andi	r25, 0x0F	; 15
    1b2a:	89 27       	eor	r24, r25
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1b38:	42 e0       	ldi	r20, 0x02	; 2
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	be 01       	movw	r22, r28
    1b3e:	6f 5f       	subi	r22, 0xFF	; 255
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8c e5       	ldi	r24, 0x5C	; 92
    1b44:	95 e2       	ldi	r25, 0x25	; 37
    1b46:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    1b4a:	6e e0       	ldi	r22, 0x0E	; 14
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	c7 01       	movw	r24, r14
    1b50:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1b54:	c6 c0       	rjmp	.+396    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1b56:	6a e0       	ldi	r22, 0x0A	; 10
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	c7 01       	movw	r24, r14
    1b5c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1b60:	80 eb       	ldi	r24, 0xB0	; 176
    1b62:	92 e2       	ldi	r25, 0x22	; 34
    1b64:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1b68:	60 e1       	ldi	r22, 0x10	; 16
    1b6a:	80 eb       	ldi	r24, 0xB0	; 176
    1b6c:	92 e2       	ldi	r25, 0x22	; 34
    1b6e:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1b72:	60 e2       	ldi	r22, 0x20	; 32
    1b74:	80 eb       	ldi	r24, 0xB0	; 176
    1b76:	92 e2       	ldi	r25, 0x22	; 34
    1b78:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1b7c:	82 e2       	ldi	r24, 0x22	; 34
    1b7e:	95 e2       	ldi	r25, 0x25	; 37
    1b80:	0e 94 be 2b 	call	0x577c	; 0x577c <_ZN11CLaserBoard13LaserPowerOffEv>
				pwmtimer.Stop();
    1b84:	83 e5       	ldi	r24, 0x53	; 83
    1b86:	95 e2       	ldi	r25, 0x25	; 37
    1b88:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <_ZN8CTimerD14StopEv>
				laserBoard.PWMOn(); // Cooling off
    1b8c:	82 e2       	ldi	r24, 0x22	; 34
    1b8e:	95 e2       	ldi	r25, 0x25	; 37
    1b90:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1b94:	f7 01       	movw	r30, r14
    1b96:	fd 96       	adiw	r30, 0x3d	; 61
    1b98:	40 81       	ld	r20, Z
    1b9a:	51 81       	ldd	r21, Z+1	; 0x01
    1b9c:	62 81       	ldd	r22, Z+2	; 0x02
    1b9e:	73 81       	ldd	r23, Z+3	; 0x03
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 85 33 	call	0x670a	; 0x670a <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    1baa:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1bac:	42 e0       	ldi	r20, 0x02	; 2
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	be 01       	movw	r22, r28
    1bb2:	6f 5f       	subi	r22, 0xFF	; 255
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8c e5       	ldi	r24, 0x5C	; 92
    1bb8:	95 e2       	ldi	r25, 0x25	; 37
    1bba:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN4CSPI4SendEPhj>
			}
		break;
    1bbe:	91 c0       	rjmp	.+290    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1bc0:	6a e0       	ldi	r22, 0x0A	; 10
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1bca:	8b c0       	rjmp	.+278    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1bcc:	42 e0       	ldi	r20, 0x02	; 2
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	61 e1       	ldi	r22, 0x11	; 17
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1bda:	ff ef       	ldi	r31, 0xFF	; 255
    1bdc:	21 ee       	ldi	r18, 0xE1	; 225
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	f1 50       	subi	r31, 0x01	; 1
    1be2:	20 40       	sbci	r18, 0x00	; 0
    1be4:	80 40       	sbci	r24, 0x00	; 0
    1be6:	e1 f7       	brne	.-8      	; 0x1be0 <_ZN16CLaserControlApp3RunEv+0x77e>
    1be8:	00 c0       	rjmp	.+0      	; 0x1bea <_ZN16CLaserControlApp3RunEv+0x788>
    1bea:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1bec:	42 e0       	ldi	r20, 0x02	; 2
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	62 e1       	ldi	r22, 0x12	; 18
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1bfa:	9f ef       	ldi	r25, 0xFF	; 255
    1bfc:	e1 ee       	ldi	r30, 0xE1	; 225
    1bfe:	f4 e0       	ldi	r31, 0x04	; 4
    1c00:	91 50       	subi	r25, 0x01	; 1
    1c02:	e0 40       	sbci	r30, 0x00	; 0
    1c04:	f0 40       	sbci	r31, 0x00	; 0
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <_ZN16CLaserControlApp3RunEv+0x79e>
    1c08:	00 c0       	rjmp	.+0      	; 0x1c0a <_ZN16CLaserControlApp3RunEv+0x7a8>
    1c0a:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	ef 59       	subi	r30, 0x9F	; 159
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	20 81       	ld	r18, Z
    1c14:	31 81       	ldd	r19, Z+1	; 0x01
    1c16:	c9 01       	movw	r24, r18
    1c18:	a0 e0       	ldi	r26, 0x00	; 0
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	90 51       	subi	r25, 0x10	; 16
    1c1e:	af 4f       	sbci	r26, 0xFF	; 255
    1c20:	bf 4f       	sbci	r27, 0xFF	; 255
    1c22:	22 27       	eor	r18, r18
    1c24:	38 2f       	mov	r19, r24
    1c26:	49 2f       	mov	r20, r25
    1c28:	5a 2f       	mov	r21, r26
    1c2a:	00 e0       	ldi	r16, 0x00	; 0
    1c2c:	1c e0       	ldi	r17, 0x0C	; 12
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	71 e0       	ldi	r23, 0x01	; 1
    1c32:	89 e4       	ldi	r24, 0x49	; 73
    1c34:	95 e2       	ldi	r25, 0x25	; 37
    1c36:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1c3a:	53 c0       	rjmp	.+166    	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
    1c3c:	2f ef       	ldi	r18, 0xFF	; 255
    1c3e:	87 ea       	ldi	r24, 0xA7	; 167
    1c40:	91 e6       	ldi	r25, 0x61	; 97
    1c42:	21 50       	subi	r18, 0x01	; 1
    1c44:	80 40       	sbci	r24, 0x00	; 0
    1c46:	90 40       	sbci	r25, 0x00	; 0
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <_ZN16CLaserControlApp3RunEv+0x7e0>
    1c4a:	00 c0       	rjmp	.+0      	; 0x1c4c <_ZN16CLaserControlApp3RunEv+0x7ea>
    1c4c:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1c4e:	42 e0       	ldi	r20, 0x02	; 2
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	62 e1       	ldi	r22, 0x12	; 18
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	c7 01       	movw	r24, r14
    1c58:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c5c:	f7 01       	movw	r30, r14
    1c5e:	ed 59       	subi	r30, 0x9D	; 157
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	20 81       	ld	r18, Z
    1c64:	31 81       	ldd	r19, Z+1	; 0x01
    1c66:	32 97       	sbiw	r30, 0x02	; 2
    1c68:	80 81       	ld	r24, Z
    1c6a:	91 81       	ldd	r25, Z+1	; 0x01
    1c6c:	28 0f       	add	r18, r24
    1c6e:	39 1f       	adc	r19, r25
    1c70:	c9 01       	movw	r24, r18
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	90 51       	subi	r25, 0x10	; 16
    1c78:	af 4f       	sbci	r26, 0xFF	; 255
    1c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7c:	22 27       	eor	r18, r18
    1c7e:	38 2f       	mov	r19, r24
    1c80:	49 2f       	mov	r20, r25
    1c82:	5a 2f       	mov	r21, r26
    1c84:	00 e0       	ldi	r16, 0x00	; 0
    1c86:	11 e0       	ldi	r17, 0x01	; 1
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	7d e0       	ldi	r23, 0x0D	; 13
    1c8c:	89 e4       	ldi	r24, 0x49	; 73
    1c8e:	95 e2       	ldi	r25, 0x25	; 37
    1c90:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1c94:	26 c0       	rjmp	.+76     	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c96:	f7 01       	movw	r30, r14
    1c98:	ed 59       	subi	r30, 0x9D	; 157
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	20 81       	ld	r18, Z
    1c9e:	31 81       	ldd	r19, Z+1	; 0x01
    1ca0:	32 97       	sbiw	r30, 0x02	; 2
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	28 0f       	add	r18, r24
    1ca8:	39 1f       	adc	r19, r25
    1caa:	c9 01       	movw	r24, r18
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	90 51       	subi	r25, 0x10	; 16
    1cb2:	af 4f       	sbci	r26, 0xFF	; 255
    1cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb6:	22 27       	eor	r18, r18
    1cb8:	38 2f       	mov	r19, r24
    1cba:	49 2f       	mov	r20, r25
    1cbc:	5a 2f       	mov	r21, r26
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	11 e0       	ldi	r17, 0x01	; 1
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	7d e0       	ldi	r23, 0x0D	; 13
    1cc6:	89 e4       	ldi	r24, 0x49	; 73
    1cc8:	95 e2       	ldi	r25, 0x25	; 37
    1cca:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1cd0:	89 e4       	ldi	r24, 0x49	; 73
    1cd2:	95 e2       	ldi	r25, 0x25	; 37
    1cd4:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x880>
		default:
			Database.UnMap();
    1cda:	89 e4       	ldi	r24, 0x49	; 73
    1cdc:	95 e2       	ldi	r25, 0x25	; 37
    1cde:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
	}
	
	if ((PORTD.IN & PIN6_bm) == 0)
    1ce2:	80 91 68 06 	lds	r24, 0x0668
    1ce6:	86 fd       	sbrc	r24, 6
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <_ZN16CLaserControlApp3RunEv+0x898>
		{
			PIC_ID_last = PIC_ID;
    1cea:	f7 01       	movw	r30, r14
    1cec:	87 85       	ldd	r24, Z+15	; 0x0f
    1cee:	80 8b       	std	Z+16, r24	; 0x10
			SetPictureId(PICID_WORK_ERROR1);
    1cf0:	68 e0       	ldi	r22, 0x08	; 8
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	c7 01       	movw	r24, r14
    1cf6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
		}
	
	if (update)
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	81 89       	ldd	r24, Z+17	; 0x11
    1cfe:	88 23       	and	r24, r24
    1d00:	a9 f0       	breq	.+42     	; 0x1d2c <_ZN16CLaserControlApp3RunEv+0x8ca>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1d02:	a7 01       	movw	r20, r14
    1d04:	4f 5b       	subi	r20, 0xBF	; 191
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	26 e2       	ldi	r18, 0x26	; 38
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	c7 01       	movw	r24, r14
    1d12:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1d16:	f7 01       	movw	r30, r14
    1d18:	11 8a       	std	Z+17, r1	; 0x11
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <_ZN16CLaserControlApp3RunEv+0x8ca>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	f7 01       	movw	r30, r14
    1d22:	eb 59       	subi	r30, 0x9B	; 155
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 83       	st	Z, r24
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	ef cb       	rjmp	.-2082   	; 0x150a <_ZN16CLaserControlApp3RunEv+0xa8>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    1d2c:	26 96       	adiw	r28, 0x06	; 6
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	bf 90       	pop	r11
    1d44:	af 90       	pop	r10
    1d46:	08 95       	ret

00001d48 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    1d4e:	fc 01       	movw	r30, r24
    1d50:	ed 58       	subi	r30, 0x8D	; 141
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	89 2b       	or	r24, r25
    1d5a:	29 f0       	breq	.+10     	; 0x1d66 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    1d66:	8a 89       	ldd	r24, Y+18	; 0x12
    1d68:	88 23       	and	r24, r24
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <_ZN16CLaserControlApp7OnTimerEv+0x26>
    1d6c:	a8 c0       	rjmp	.+336    	; 0x1ebe <_ZN16CLaserControlApp7OnTimerEv+0x176>
	{
		if (m_wMillSec == 0)
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e5 59       	subi	r30, 0x95	; 149
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	89 2b       	or	r24, r25
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <_ZN16CLaserControlApp7OnTimerEv+0x36>
    1d7c:	98 c0       	rjmp	.+304    	; 0x1eae <_ZN16CLaserControlApp7OnTimerEv+0x166>
		{
			m_wFlow = (TCC1.CNT * 10) / 8;
    1d7e:	80 91 60 08 	lds	r24, 0x0860
    1d82:	90 91 61 08 	lds	r25, 0x0861
    1d86:	9c 01       	movw	r18, r24
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	82 0f       	add	r24, r18
    1d9a:	93 1f       	adc	r25, r19
    1d9c:	96 95       	lsr	r25
    1d9e:	87 95       	ror	r24
    1da0:	96 95       	lsr	r25
    1da2:	87 95       	ror	r24
    1da4:	96 95       	lsr	r25
    1da6:	87 95       	ror	r24
    1da8:	36 96       	adiw	r30, 0x06	; 6
    1daa:	80 83       	st	Z, r24
    1dac:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1dae:	86 e5       	ldi	r24, 0x56	; 86
    1db0:	95 e2       	ldi	r25, 0x25	; 37
    1db2:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <_ZN8CTimerC15ResetEv>
			
			if (m_wSeconds == 0)
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 59       	subi	r30, 0x97	; 151
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	89 2b       	or	r24, r25
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <_ZN16CLaserControlApp7OnTimerEv+0x7e>
    1dc4:	4c c0       	rjmp	.+152    	; 0x1e5e <_ZN16CLaserControlApp7OnTimerEv+0x116>
			{
				if (m_wMinutes == 0)
    1dc6:	32 97       	sbiw	r30, 0x02	; 2
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	89 2b       	or	r24, r25
    1dce:	d1 f5       	brne	.+116    	; 0x1e44 <_ZN16CLaserControlApp7OnTimerEv+0xfc>
				{
					if (state == APP_WORKPREPARE)
    1dd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dd4:	02 97       	sbiw	r24, 0x02	; 2
    1dd6:	a1 f5       	brne	.+104    	; 0x1e40 <_ZN16CLaserControlApp7OnTimerEv+0xf8>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    1dd8:	22 e0       	ldi	r18, 0x02	; 2
    1dda:	44 e6       	ldi	r20, 0x64	; 100
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	65 e0       	ldi	r22, 0x05	; 5
    1de0:	71 e0       	ldi	r23, 0x01	; 1
    1de2:	81 e2       	ldi	r24, 0x21	; 33
    1de4:	95 e2       	ldi	r25, 0x25	; 37
    1de6:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1dea:	81 e2       	ldi	r24, 0x21	; 33
    1dec:	95 e2       	ldi	r25, 0x25	; 37
    1dee:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    1df2:	22 e0       	ldi	r18, 0x02	; 2
    1df4:	44 e6       	ldi	r20, 0x64	; 100
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	66 e2       	ldi	r22, 0x26	; 38
    1dfa:	71 e0       	ldi	r23, 0x01	; 1
    1dfc:	81 e2       	ldi	r24, 0x21	; 33
    1dfe:	95 e2       	ldi	r25, 0x25	; 37
    1e00:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e04:	81 e2       	ldi	r24, 0x21	; 33
    1e06:	95 e2       	ldi	r25, 0x25	; 37
    1e08:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    1e0c:	22 e0       	ldi	r18, 0x02	; 2
    1e0e:	44 e6       	ldi	r20, 0x64	; 100
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	69 e4       	ldi	r22, 0x49	; 73
    1e14:	71 e0       	ldi	r23, 0x01	; 1
    1e16:	81 e2       	ldi	r24, 0x21	; 33
    1e18:	95 e2       	ldi	r25, 0x25	; 37
    1e1a:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e1e:	81 e2       	ldi	r24, 0x21	; 33
    1e20:	95 e2       	ldi	r25, 0x25	; 37
    1e22:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    1e26:	22 e0       	ldi	r18, 0x02	; 2
    1e28:	44 e6       	ldi	r20, 0x64	; 100
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	6d e5       	ldi	r22, 0x5D	; 93
    1e2e:	71 e0       	ldi	r23, 0x01	; 1
    1e30:	81 e2       	ldi	r24, 0x21	; 33
    1e32:	95 e2       	ldi	r25, 0x25	; 37
    1e34:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e38:	81 e2       	ldi	r24, 0x21	; 33
    1e3a:	95 e2       	ldi	r25, 0x25	; 37
    1e3c:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1e40:	1a 8a       	std	Y+18, r1	; 0x12
    1e42:	9f c0       	rjmp	.+318    	; 0x1f82 <_ZN16CLaserControlApp7OnTimerEv+0x23a>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    1e44:	8c e3       	ldi	r24, 0x3C	; 60
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e7 59       	subi	r30, 0x97	; 151
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    1e52:	32 97       	sbiw	r30, 0x02	; 2
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    1e5e:	84 e6       	ldi	r24, 0x64	; 100
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 59       	subi	r30, 0x95	; 149
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 83       	st	Z, r24
    1e6a:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    1e6c:	32 97       	sbiw	r30, 0x02	; 2
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	80 83       	st	Z, r24
    1e76:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    1e78:	32 97       	sbiw	r30, 0x02	; 2
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	89 2b       	or	r24, r25
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
    1e82:	4c c0       	rjmp	.+152    	; 0x1f1c <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1e84:	32 96       	adiw	r30, 0x02	; 2
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	0a 97       	sbiw	r24, 0x0a	; 10
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <_ZN16CLaserControlApp7OnTimerEv+0x148>
    1e8e:	46 c0       	rjmp	.+140    	; 0x1f1c <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1e90:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e92:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e94:	02 97       	sbiw	r24, 0x02	; 2
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <_ZN16CLaserControlApp7OnTimerEv+0x152>
    1e98:	41 c0       	rjmp	.+130    	; 0x1f1c <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1e9a:	4e c0       	rjmp	.+156    	; 0x1f38 <_ZN16CLaserControlApp7OnTimerEv+0x1f0>
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e7 59       	subi	r30, 0x97	; 151
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	05 97       	sbiw	r24, 0x05	; 5
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <_ZN16CLaserControlApp7OnTimerEv+0x164>
    1eaa:	4f c0       	rjmp	.+158    	; 0x1f4a <_ZN16CLaserControlApp7OnTimerEv+0x202>
    1eac:	5c c0       	rjmp	.+184    	; 0x1f66 <_ZN16CLaserControlApp7OnTimerEv+0x21e>
				player.SoundStop();
				//player.beep(1000, 25);
			}
			// ************************************
		}
		m_wMillSec-=10;
    1eae:	c5 59       	subi	r28, 0x95	; 149
    1eb0:	df 4f       	sbci	r29, 0xFF	; 255
    1eb2:	88 81       	ld	r24, Y
    1eb4:	99 81       	ldd	r25, Y+1	; 0x01
    1eb6:	0a 97       	sbiw	r24, 0x0a	; 10
    1eb8:	88 83       	st	Y, r24
    1eba:	99 83       	std	Y+1, r25	; 0x01
    1ebc:	62 c0       	rjmp	.+196    	; 0x1f82 <_ZN16CLaserControlApp7OnTimerEv+0x23a>
	}
	else
	{
		if (m_wMillSec == 0)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 59       	subi	r30, 0x95	; 149
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	89 2b       	or	r24, r25
    1eca:	01 f5       	brne	.+64     	; 0x1f0c <_ZN16CLaserControlApp7OnTimerEv+0x1c4>
		{
			m_wMillSec = 100;
    1ecc:	84 e6       	ldi	r24, 0x64	; 100
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	80 83       	st	Z, r24
    1ed2:	91 83       	std	Z+1, r25	; 0x01
			
			m_wFlow = (TCC1.CNT * 10) / 8;
    1ed4:	80 91 60 08 	lds	r24, 0x0860
    1ed8:	90 91 61 08 	lds	r25, 0x0861
    1edc:	9c 01       	movw	r18, r24
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	96 95       	lsr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	96 95       	lsr	r25
    1ef8:	87 95       	ror	r24
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	36 96       	adiw	r30, 0x06	; 6
    1f00:	80 83       	st	Z, r24
    1f02:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1f04:	86 e5       	ldi	r24, 0x56	; 86
    1f06:	95 e2       	ldi	r25, 0x25	; 37
    1f08:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <_ZN8CTimerC15ResetEv>
		}
		m_wMillSec-=10;
    1f0c:	c5 59       	subi	r28, 0x95	; 149
    1f0e:	df 4f       	sbci	r29, 0xFF	; 255
    1f10:	88 81       	ld	r24, Y
    1f12:	99 81       	ldd	r25, Y+1	; 0x01
    1f14:	0a 97       	sbiw	r24, 0x0a	; 10
    1f16:	88 83       	st	Y, r24
    1f18:	99 83       	std	Y+1, r25	; 0x01
    1f1a:	33 c0       	rjmp	.+102    	; 0x1f82 <_ZN16CLaserControlApp7OnTimerEv+0x23a>
					//player.beep(1000, 50);
				}
			}
			else
			{
				player.SoundStart(1000, 25, 2);
    1f1c:	22 e0       	ldi	r18, 0x02	; 2
    1f1e:	49 e1       	ldi	r20, 0x19	; 25
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	68 ee       	ldi	r22, 0xE8	; 232
    1f24:	73 e0       	ldi	r23, 0x03	; 3
    1f26:	81 e2       	ldi	r24, 0x21	; 33
    1f28:	95 e2       	ldi	r25, 0x25	; 37
    1f2a:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    1f2e:	81 e2       	ldi	r24, 0x21	; 33
    1f30:	95 e2       	ldi	r25, 0x25	; 37
    1f32:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
    1f36:	bb cf       	rjmp	.-138    	; 0x1eae <_ZN16CLaserControlApp7OnTimerEv+0x166>
			m_wSeconds--;
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e9 59       	subi	r30, 0x99	; 153
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	89 2b       	or	r24, r25
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <_ZN16CLaserControlApp7OnTimerEv+0x200>
    1f46:	aa cf       	rjmp	.-172    	; 0x1e9c <_ZN16CLaserControlApp7OnTimerEv+0x154>
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <_ZN16CLaserControlApp7OnTimerEv+0x21e>
				{
					player.SoundStart(1000, 100, 2);
    1f4a:	22 e0       	ldi	r18, 0x02	; 2
    1f4c:	44 e6       	ldi	r20, 0x64	; 100
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	68 ee       	ldi	r22, 0xE8	; 232
    1f52:	73 e0       	ldi	r23, 0x03	; 3
    1f54:	81 e2       	ldi	r24, 0x21	; 33
    1f56:	95 e2       	ldi	r25, 0x25	; 37
    1f58:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f5c:	81 e2       	ldi	r24, 0x21	; 33
    1f5e:	95 e2       	ldi	r25, 0x25	; 37
    1f60:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
    1f64:	a4 cf       	rjmp	.-184    	; 0x1eae <_ZN16CLaserControlApp7OnTimerEv+0x166>
					//player.beep(1000, 100);
				}
				else
				{
					player.SoundStart(1000, 50, 2);
    1f66:	22 e0       	ldi	r18, 0x02	; 2
    1f68:	42 e3       	ldi	r20, 0x32	; 50
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	68 ee       	ldi	r22, 0xE8	; 232
    1f6e:	73 e0       	ldi	r23, 0x03	; 3
    1f70:	81 e2       	ldi	r24, 0x21	; 33
    1f72:	95 e2       	ldi	r25, 0x25	; 37
    1f74:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f78:	81 e2       	ldi	r24, 0x21	; 33
    1f7a:	95 e2       	ldi	r25, 0x25	; 37
    1f7c:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
    1f80:	96 cf       	rjmp	.-212    	; 0x1eae <_ZN16CLaserControlApp7OnTimerEv+0x166>
			m_wFlow = (TCC1.CNT * 10) / 8;
			flowtimer.Reset();
		}
		m_wMillSec-=10;
	}
}
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	08 95       	ret

00001f88 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1f88:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN16CLaserControlApp7OnTimerEv>
    1f8c:	08 95       	ret

00001f8e <_ZN16CLaserControlApp6OnINT0Ev>:
{
	laserBoard.PWMOn();
}

void CLaserControlApp::OnINT0()
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    1f92:	fc 01       	movw	r30, r24
    1f94:	24 85       	ldd	r18, Z+12	; 0x0c
    1f96:	35 85       	ldd	r19, Z+13	; 0x0d
    1f98:	20 31       	cpi	r18, 0x10	; 16
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	21 f0       	breq	.+8      	; 0x1fa6 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1f9e:	20 32       	cpi	r18, 0x20	; 32
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fa4:	87 c0       	rjmp	.+270    	; 0x20b4 <_ZN16CLaserControlApp6OnINT0Ev+0x126>
    1fa6:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    1fa8:	80 91 48 06 	lds	r24, 0x0648
    1fac:	80 fd       	sbrc	r24, 0
    1fae:	6c c0       	rjmp	.+216    	; 0x2088 <_ZN16CLaserControlApp6OnINT0Ev+0xfa>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    1fb0:	80 91 ae 22 	lds	r24, 0x22AE
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	7e c0       	rjmp	.+252    	; 0x20b4 <_ZN16CLaserControlApp6OnINT0Ev+0x126>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ed 58       	subi	r30, 0x8D	; 141
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	89 2b       	or	r24, r25
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    1fc6:	71 c0       	rjmp	.+226    	; 0x20aa <_ZN16CLaserControlApp6OnINT0Ev+0x11c>
    1fc8:	75 c0       	rjmp	.+234    	; 0x20b4 <_ZN16CLaserControlApp6OnINT0Ev+0x126>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    1fca:	8a e0       	ldi	r24, 0x0A	; 10
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ed 58       	subi	r30, 0x8D	; 141
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 83       	st	Z, r24
    1fd6:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    1fd8:	f6 97       	sbiw	r30, 0x36	; 54
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	b1 1d       	adc	r27, r1
    1fe8:	80 83       	st	Z, r24
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	a2 83       	std	Z+2, r26	; 0x02
    1fee:	b3 83       	std	Z+3, r27	; 0x03
						
						if (laserTimerDutyCyclems > 100)
    1ff0:	49 ad       	ldd	r20, Y+57	; 0x39
    1ff2:	5a ad       	ldd	r21, Y+58	; 0x3a
    1ff4:	45 36       	cpi	r20, 0x65	; 101
    1ff6:	51 05       	cpc	r21, r1
    1ff8:	50 f0       	brcs	.+20     	; 0x200e <_ZN16CLaserControlApp6OnINT0Ev+0x80>
							player.SoundStart(500, 50, 0);
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	42 e3       	ldi	r20, 0x32	; 50
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	64 ef       	ldi	r22, 0xF4	; 244
    2002:	71 e0       	ldi	r23, 0x01	; 1
    2004:	81 e2       	ldi	r24, 0x21	; 33
    2006:	95 e2       	ldi	r25, 0x25	; 37
    2008:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <_ZN16CLaserControlApp6OnINT0Ev+0x92>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    200e:	56 95       	lsr	r21
    2010:	47 95       	ror	r20
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	64 ef       	ldi	r22, 0xF4	; 244
    2016:	71 e0       	ldi	r23, 0x01	; 1
    2018:	81 e2       	ldi	r24, 0x21	; 33
    201a:	95 e2       	ldi	r25, 0x25	; 37
    201c:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2020:	81 e2       	ldi	r24, 0x21	; 33
    2022:	95 e2       	ldi	r25, 0x25	; 37
    2024:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    2028:	8f a9       	ldd	r24, Y+55	; 0x37
    202a:	98 ad       	ldd	r25, Y+56	; 0x38
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	29 f0       	breq	.+10     	; 0x203a <_ZN16CLaserControlApp6OnINT0Ev+0xac>
						TCF0.CNT = laserTimerDutyCycle - 1;
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	80 93 20 0b 	sts	0x0B20, r24
    2036:	90 93 21 0b 	sts	0x0B21, r25
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    203a:	6f a9       	ldd	r22, Y+55	; 0x37
    203c:	78 ad       	ldd	r23, Y+56	; 0x38
    203e:	80 eb       	ldi	r24, 0xB0	; 176
    2040:	92 e2       	ldi	r25, 0x22	; 34
    2042:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    2046:	6f a9       	ldd	r22, Y+55	; 0x37
    2048:	78 ad       	ldd	r23, Y+56	; 0x38
    204a:	80 eb       	ldi	r24, 0xB0	; 176
    204c:	92 e2       	ldi	r25, 0x22	; 34
    204e:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    2052:	6d a9       	ldd	r22, Y+53	; 0x35
    2054:	7e a9       	ldd	r23, Y+54	; 0x36
    2056:	80 eb       	ldi	r24, 0xB0	; 176
    2058:	92 e2       	ldi	r25, 0x22	; 34
    205a:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    205e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	49 f4       	brne	.+18     	; 0x2076 <_ZN16CLaserControlApp6OnINT0Ev+0xe8>
    2064:	ff ef       	ldi	r31, 0xFF	; 255
    2066:	27 e8       	ldi	r18, 0x87	; 135
    2068:	83 e1       	ldi	r24, 0x13	; 19
    206a:	f1 50       	subi	r31, 0x01	; 1
    206c:	20 40       	sbci	r18, 0x00	; 0
    206e:	80 40       	sbci	r24, 0x00	; 0
    2070:	e1 f7       	brne	.-8      	; 0x206a <_ZN16CLaserControlApp6OnINT0Ev+0xdc>
    2072:	00 c0       	rjmp	.+0      	; 0x2074 <_ZN16CLaserControlApp6OnINT0Ev+0xe6>
    2074:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    2076:	e0 e4       	ldi	r30, 0x40	; 64
    2078:	f6 e0       	ldi	r31, 0x06	; 6
    207a:	84 85       	ldd	r24, Z+12	; 0x0c
    207c:	8e 7f       	andi	r24, 0xFE	; 254
    207e:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	80 93 ae 22 	sts	0x22AE, r24
    2086:	16 c0       	rjmp	.+44     	; 0x20b4 <_ZN16CLaserControlApp6OnINT0Ev+0x126>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    2088:	10 92 ae 22 	sts	0x22AE, r1
				
				laserTimer.Stop();
    208c:	80 eb       	ldi	r24, 0xB0	; 176
    208e:	92 e2       	ldi	r25, 0x22	; 34
    2090:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    2094:	60 e1       	ldi	r22, 0x10	; 16
    2096:	80 eb       	ldi	r24, 0xB0	; 176
    2098:	92 e2       	ldi	r25, 0x22	; 34
    209a:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    209e:	60 e2       	ldi	r22, 0x20	; 32
    20a0:	80 eb       	ldi	r24, 0xB0	; 176
    20a2:	92 e2       	ldi	r25, 0x22	; 34
    20a4:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <_ZN16CLaserControlApp6OnINT0Ev+0x126>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    20aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <_ZN16CLaserControlApp6OnINT0Ev+0x124>
    20b0:	bb cf       	rjmp	.-138    	; 0x2028 <_ZN16CLaserControlApp6OnINT0Ev+0x9a>
    20b2:	8b cf       	rjmp	.-234    	; 0x1fca <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    20ba:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_ZN16CLaserControlApp6OnINT0Ev>
    20be:	08 95       	ret

000020c0 <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	7c 01       	movw	r14, r24
    20d2:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    20d4:	41 15       	cp	r20, r1
    20d6:	51 05       	cpc	r21, r1
    20d8:	b1 f0       	breq	.+44     	; 0x2106 <_Z11ConvertDataPvS_jj+0x46>
    20da:	6b 01       	movw	r12, r22
    20dc:	c4 0e       	add	r12, r20
    20de:	d5 1e       	adc	r13, r21
    20e0:	eb 01       	movw	r28, r22
    20e2:	26 1b       	sub	r18, r22
    20e4:	37 0b       	sbc	r19, r23
    20e6:	c9 01       	movw	r24, r18
    20e8:	8c 0f       	add	r24, r28
    20ea:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    20ec:	b8 01       	movw	r22, r16
    20ee:	0e 94 bd 31 	call	0x637a	; 0x637a <__udivmodhi4>
    20f2:	fc 01       	movw	r30, r24
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	e4 27       	eor	r30, r20
    20f8:	ee 0d       	add	r30, r14
    20fa:	ff 1d       	adc	r31, r15
    20fc:	89 91       	ld	r24, Y+
    20fe:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    2100:	cc 15       	cp	r28, r12
    2102:	dd 05       	cpc	r29, r13
    2104:	81 f7       	brne	.-32     	; 0x20e6 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	08 95       	ret

00002118 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    2118:	68 17       	cp	r22, r24
    211a:	79 07       	cpc	r23, r25
    211c:	08 f4       	brcc	.+2      	; 0x2120 <_Z3minjj+0x8>
    211e:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    2120:	08 95       	ret

00002122 <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    2122:	86 17       	cp	r24, r22
    2124:	97 07       	cpc	r25, r23
    2126:	08 f4       	brcc	.+2      	; 0x212a <_Z3maxjj+0x8>
    2128:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    212a:	08 95       	ret

0000212c <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    212c:	98 27       	eor	r25, r24
    212e:	89 27       	eor	r24, r25
    2130:	98 27       	eor	r25, r24
    2132:	08 95       	ret

00002134 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    2134:	9b 01       	movw	r18, r22
    2136:	bc 01       	movw	r22, r24
    2138:	c9 01       	movw	r24, r18
}
    213a:	08 95       	ret

0000213c <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    213c:	08 95       	ret

0000213e <_ZN4CSPID1Ev>:
    213e:	08 95       	ret

00002140 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    2140:	ef 92       	push	r14
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
    214c:	e0 e8       	ldi	r30, 0x80	; 128
    214e:	f6 e0       	ldi	r31, 0x06	; 6
    2150:	90 eb       	ldi	r25, 0xB0	; 176
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 ec       	ldi	r24, 0xC0	; 192
    2156:	84 8b       	std	Z+20, r24	; 0x14
    2158:	85 8b       	std	Z+21, r24	; 0x15
    215a:	87 8b       	std	Z+23, r24	; 0x17
    215c:	95 83       	std	Z+5, r25	; 0x05
    215e:	61 11       	cpse	r22, r1
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    2162:	80 e4       	ldi	r24, 0x40	; 64
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    2166:	80 e5       	ldi	r24, 0x50	; 80
    2168:	01 11       	cpse	r16, r1
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    2170:	30 e8       	ldi	r19, 0x80	; 128
    2172:	41 11       	cpse	r20, r1
    2174:	02 c0       	rjmp	.+4      	; 0x217a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	01 c0       	rjmp	.+2      	; 0x217c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    217a:	90 e2       	ldi	r25, 0x20	; 32
    217c:	22 0f       	add	r18, r18
    217e:	22 0f       	add	r18, r18
    2180:	e2 2a       	or	r14, r18
    2182:	e8 2a       	or	r14, r24
    2184:	e3 2a       	or	r14, r19
    2186:	e9 2a       	or	r14, r25
    2188:	00 ec       	ldi	r16, 0xC0	; 192
    218a:	1a e0       	ldi	r17, 0x0A	; 10
    218c:	f8 01       	movw	r30, r16
    218e:	e0 82       	st	Z, r14
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	91 e0       	ldi	r25, 0x01	; 1
    2194:	0e 94 48 32 	call	0x6490	; 0x6490 <malloc>
    2198:	88 83       	st	Y, r24
    219a:	99 83       	std	Y+1, r25	; 0x01
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	f8 01       	movw	r30, r16
    21a0:	81 83       	std	Z+1, r24	; 0x01
    21a2:	89 e1       	ldi	r24, 0x19	; 25
    21a4:	91 e1       	ldi	r25, 0x11	; 17
    21a6:	80 93 28 23 	sts	0x2328, r24
    21aa:	90 93 29 23 	sts	0x2329, r25
    21ae:	c0 93 1e 24 	sts	0x241E, r28
    21b2:	d0 93 1f 24 	sts	0x241F, r29
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ef 90       	pop	r14
    21c0:	08 95       	ret

000021c2 <_ZN4CSPI4SendEPhj>:
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	ec 01       	movw	r28, r24
    21c8:	4a 83       	std	Y+2, r20	; 0x02
    21ca:	5b 83       	std	Y+3, r21	; 0x03
    21cc:	4c 83       	std	Y+4, r20	; 0x04
    21ce:	5d 83       	std	Y+5, r21	; 0x05
    21d0:	88 81       	ld	r24, Y
    21d2:	99 81       	ldd	r25, Y+1	; 0x01
    21d4:	0e 94 75 33 	call	0x66ea	; 0x66ea <memcpy>
    21d8:	80 e1       	ldi	r24, 0x10	; 16
    21da:	80 93 86 06 	sts	0x0686, r24
    21de:	88 81       	ld	r24, Y
    21e0:	99 81       	ldd	r25, Y+1	; 0x01
    21e2:	4a 81       	ldd	r20, Y+2	; 0x02
    21e4:	5b 81       	ldd	r21, Y+3	; 0x03
    21e6:	9a 01       	movw	r18, r20
    21e8:	21 50       	subi	r18, 0x01	; 1
    21ea:	31 09       	sbc	r19, r1
    21ec:	2a 83       	std	Y+2, r18	; 0x02
    21ee:	3b 83       	std	Y+3, r19	; 0x03
    21f0:	fc 01       	movw	r30, r24
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	80 81       	ld	r24, Z
    21f8:	80 93 c3 0a 	sts	0x0AC3, r24
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

00002202 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    2202:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	89 2b       	or	r24, r25
    220a:	79 f0       	breq	.+30     	; 0x222a <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    220c:	40 81       	ld	r20, Z
    220e:	51 81       	ldd	r21, Z+1	; 0x01
    2210:	22 81       	ldd	r18, Z+2	; 0x02
    2212:	33 81       	ldd	r19, Z+3	; 0x03
    2214:	c9 01       	movw	r24, r18
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	82 83       	std	Z+2, r24	; 0x02
    221a:	93 83       	std	Z+3, r25	; 0x03
    221c:	fa 01       	movw	r30, r20
    221e:	e8 0f       	add	r30, r24
    2220:	f9 1f       	adc	r31, r25
    2222:	80 81       	ld	r24, Z
    2224:	80 93 c3 0a 	sts	0x0AC3, r24
    2228:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    222a:	80 e1       	ldi	r24, 0x10	; 16
    222c:	80 93 85 06 	sts	0x0685, r24
    2230:	08 95       	ret

00002232 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    2232:	0e 94 01 11 	call	0x2202	; 0x2202 <_ZN4CSPI10OnTransmitEv>
    2236:	08 95       	ret

00002238 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    2238:	2e e7       	ldi	r18, 0x7E	; 126
    223a:	31 e2       	ldi	r19, 0x21	; 33
    223c:	fc 01       	movw	r30, r24
    223e:	20 83       	st	Z, r18
    2240:	31 83       	std	Z+1, r19	; 0x01
    2242:	08 95       	ret

00002244 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    2244:	08 95       	ret

00002246 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    2246:	22 ea       	ldi	r18, 0xA2	; 162
    2248:	31 e2       	ldi	r19, 0x21	; 33
    224a:	fc 01       	movw	r30, r24
    224c:	20 83       	st	Z, r18
    224e:	31 83       	std	Z+1, r19	; 0x01
    2250:	08 95       	ret

00002252 <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    2252:	08 95       	ret

00002254 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    2254:	20 ec       	ldi	r18, 0xC0	; 192
    2256:	31 e2       	ldi	r19, 0x21	; 33
    2258:	fc 01       	movw	r30, r24
    225a:	20 83       	st	Z, r18
    225c:	31 83       	std	Z+1, r19	; 0x01
    225e:	08 95       	ret

00002260 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    2260:	08 95       	ret

00002262 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
    226c:	0b b6       	in	r0, 0x3b	; 59
    226e:	0f 92       	push	r0
    2270:	2f 93       	push	r18
    2272:	3f 93       	push	r19
    2274:	4f 93       	push	r20
    2276:	5f 93       	push	r21
    2278:	6f 93       	push	r22
    227a:	7f 93       	push	r23
    227c:	8f 93       	push	r24
    227e:	9f 93       	push	r25
    2280:	af 93       	push	r26
    2282:	bf 93       	push	r27
    2284:	ef 93       	push	r30
    2286:	ff 93       	push	r31
    2288:	e0 91 b8 22 	lds	r30, 0x22B8
    228c:	f0 91 b9 22 	lds	r31, 0x22B9
    2290:	30 97       	sbiw	r30, 0x00	; 0
    2292:	29 f0       	breq	.+10     	; 0x229e <__vector_1+0x3c>
    2294:	80 91 ae 23 	lds	r24, 0x23AE
    2298:	90 91 af 23 	lds	r25, 0x23AF
    229c:	19 95       	eicall
    229e:	ff 91       	pop	r31
    22a0:	ef 91       	pop	r30
    22a2:	bf 91       	pop	r27
    22a4:	af 91       	pop	r26
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	7f 91       	pop	r23
    22ac:	6f 91       	pop	r22
    22ae:	5f 91       	pop	r21
    22b0:	4f 91       	pop	r20
    22b2:	3f 91       	pop	r19
    22b4:	2f 91       	pop	r18
    22b6:	0f 90       	pop	r0
    22b8:	0b be       	out	0x3b, r0	; 59
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	0f 90       	pop	r0
    22c0:	1f 90       	pop	r1
    22c2:	18 95       	reti

000022c4 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	0b b6       	in	r0, 0x3b	; 59
    22d0:	0f 92       	push	r0
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
    22ea:	e0 91 ba 22 	lds	r30, 0x22BA
    22ee:	f0 91 bb 22 	lds	r31, 0x22BB
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	29 f0       	breq	.+10     	; 0x2300 <__vector_2+0x3c>
    22f6:	80 91 b0 23 	lds	r24, 0x23B0
    22fa:	90 91 b1 23 	lds	r25, 0x23B1
    22fe:	19 95       	eicall
    2300:	ff 91       	pop	r31
    2302:	ef 91       	pop	r30
    2304:	bf 91       	pop	r27
    2306:	af 91       	pop	r26
    2308:	9f 91       	pop	r25
    230a:	8f 91       	pop	r24
    230c:	7f 91       	pop	r23
    230e:	6f 91       	pop	r22
    2310:	5f 91       	pop	r21
    2312:	4f 91       	pop	r20
    2314:	3f 91       	pop	r19
    2316:	2f 91       	pop	r18
    2318:	0f 90       	pop	r0
    231a:	0b be       	out	0x3b, r0	; 59
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	0b b6       	in	r0, 0x3b	; 59
    2332:	0f 92       	push	r0
    2334:	2f 93       	push	r18
    2336:	3f 93       	push	r19
    2338:	4f 93       	push	r20
    233a:	5f 93       	push	r21
    233c:	6f 93       	push	r22
    233e:	7f 93       	push	r23
    2340:	8f 93       	push	r24
    2342:	9f 93       	push	r25
    2344:	af 93       	push	r26
    2346:	bf 93       	push	r27
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	e0 91 bc 22 	lds	r30, 0x22BC
    2350:	f0 91 bd 22 	lds	r31, 0x22BD
    2354:	30 97       	sbiw	r30, 0x00	; 0
    2356:	29 f0       	breq	.+10     	; 0x2362 <__vector_3+0x3c>
    2358:	80 91 b2 23 	lds	r24, 0x23B2
    235c:	90 91 b3 23 	lds	r25, 0x23B3
    2360:	19 95       	eicall
    2362:	ff 91       	pop	r31
    2364:	ef 91       	pop	r30
    2366:	bf 91       	pop	r27
    2368:	af 91       	pop	r26
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	7f 91       	pop	r23
    2370:	6f 91       	pop	r22
    2372:	5f 91       	pop	r21
    2374:	4f 91       	pop	r20
    2376:	3f 91       	pop	r19
    2378:	2f 91       	pop	r18
    237a:	0f 90       	pop	r0
    237c:	0b be       	out	0x3b, r0	; 59
    237e:	0f 90       	pop	r0
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	0f 90       	pop	r0
    2384:	1f 90       	pop	r1
    2386:	18 95       	reti

00002388 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	0b b6       	in	r0, 0x3b	; 59
    2394:	0f 92       	push	r0
    2396:	2f 93       	push	r18
    2398:	3f 93       	push	r19
    239a:	4f 93       	push	r20
    239c:	5f 93       	push	r21
    239e:	6f 93       	push	r22
    23a0:	7f 93       	push	r23
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
    23ae:	e0 91 be 22 	lds	r30, 0x22BE
    23b2:	f0 91 bf 22 	lds	r31, 0x22BF
    23b6:	30 97       	sbiw	r30, 0x00	; 0
    23b8:	29 f0       	breq	.+10     	; 0x23c4 <__vector_4+0x3c>
    23ba:	80 91 b4 23 	lds	r24, 0x23B4
    23be:	90 91 b5 23 	lds	r25, 0x23B5
    23c2:	19 95       	eicall
    23c4:	ff 91       	pop	r31
    23c6:	ef 91       	pop	r30
    23c8:	bf 91       	pop	r27
    23ca:	af 91       	pop	r26
    23cc:	9f 91       	pop	r25
    23ce:	8f 91       	pop	r24
    23d0:	7f 91       	pop	r23
    23d2:	6f 91       	pop	r22
    23d4:	5f 91       	pop	r21
    23d6:	4f 91       	pop	r20
    23d8:	3f 91       	pop	r19
    23da:	2f 91       	pop	r18
    23dc:	0f 90       	pop	r0
    23de:	0b be       	out	0x3b, r0	; 59
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    23ea:	1f 92       	push	r1
    23ec:	0f 92       	push	r0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	0f 92       	push	r0
    23f2:	11 24       	eor	r1, r1
    23f4:	0b b6       	in	r0, 0x3b	; 59
    23f6:	0f 92       	push	r0
    23f8:	2f 93       	push	r18
    23fa:	3f 93       	push	r19
    23fc:	4f 93       	push	r20
    23fe:	5f 93       	push	r21
    2400:	6f 93       	push	r22
    2402:	7f 93       	push	r23
    2404:	8f 93       	push	r24
    2406:	9f 93       	push	r25
    2408:	af 93       	push	r26
    240a:	bf 93       	push	r27
    240c:	ef 93       	push	r30
    240e:	ff 93       	push	r31
    2410:	e0 91 c0 22 	lds	r30, 0x22C0
    2414:	f0 91 c1 22 	lds	r31, 0x22C1
    2418:	30 97       	sbiw	r30, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_5+0x3c>
    241c:	80 91 b6 23 	lds	r24, 0x23B6
    2420:	90 91 b7 23 	lds	r25, 0x23B7
    2424:	19 95       	eicall
    2426:	ff 91       	pop	r31
    2428:	ef 91       	pop	r30
    242a:	bf 91       	pop	r27
    242c:	af 91       	pop	r26
    242e:	9f 91       	pop	r25
    2430:	8f 91       	pop	r24
    2432:	7f 91       	pop	r23
    2434:	6f 91       	pop	r22
    2436:	5f 91       	pop	r21
    2438:	4f 91       	pop	r20
    243a:	3f 91       	pop	r19
    243c:	2f 91       	pop	r18
    243e:	0f 90       	pop	r0
    2440:	0b be       	out	0x3b, r0	; 59
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	0b b6       	in	r0, 0x3b	; 59
    2458:	0f 92       	push	r0
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
    2472:	e0 91 c2 22 	lds	r30, 0x22C2
    2476:	f0 91 c3 22 	lds	r31, 0x22C3
    247a:	30 97       	sbiw	r30, 0x00	; 0
    247c:	29 f0       	breq	.+10     	; 0x2488 <__vector_6+0x3c>
    247e:	80 91 b8 23 	lds	r24, 0x23B8
    2482:	90 91 b9 23 	lds	r25, 0x23B9
    2486:	19 95       	eicall
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0b be       	out	0x3b, r0	; 59
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	0b b6       	in	r0, 0x3b	; 59
    24ba:	0f 92       	push	r0
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
    24d4:	e0 91 c4 22 	lds	r30, 0x22C4
    24d8:	f0 91 c5 22 	lds	r31, 0x22C5
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	29 f0       	breq	.+10     	; 0x24ea <__vector_7+0x3c>
    24e0:	80 91 ba 23 	lds	r24, 0x23BA
    24e4:	90 91 bb 23 	lds	r25, 0x23BB
    24e8:	19 95       	eicall
    24ea:	ff 91       	pop	r31
    24ec:	ef 91       	pop	r30
    24ee:	bf 91       	pop	r27
    24f0:	af 91       	pop	r26
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	7f 91       	pop	r23
    24f8:	6f 91       	pop	r22
    24fa:	5f 91       	pop	r21
    24fc:	4f 91       	pop	r20
    24fe:	3f 91       	pop	r19
    2500:	2f 91       	pop	r18
    2502:	0f 90       	pop	r0
    2504:	0b be       	out	0x3b, r0	; 59
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    2510:	1f 92       	push	r1
    2512:	0f 92       	push	r0
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	0f 92       	push	r0
    2518:	11 24       	eor	r1, r1
    251a:	0b b6       	in	r0, 0x3b	; 59
    251c:	0f 92       	push	r0
    251e:	2f 93       	push	r18
    2520:	3f 93       	push	r19
    2522:	4f 93       	push	r20
    2524:	5f 93       	push	r21
    2526:	6f 93       	push	r22
    2528:	7f 93       	push	r23
    252a:	8f 93       	push	r24
    252c:	9f 93       	push	r25
    252e:	af 93       	push	r26
    2530:	bf 93       	push	r27
    2532:	ef 93       	push	r30
    2534:	ff 93       	push	r31
    2536:	e0 91 c6 22 	lds	r30, 0x22C6
    253a:	f0 91 c7 22 	lds	r31, 0x22C7
    253e:	30 97       	sbiw	r30, 0x00	; 0
    2540:	29 f0       	breq	.+10     	; 0x254c <__vector_8+0x3c>
    2542:	80 91 bc 23 	lds	r24, 0x23BC
    2546:	90 91 bd 23 	lds	r25, 0x23BD
    254a:	19 95       	eicall
    254c:	ff 91       	pop	r31
    254e:	ef 91       	pop	r30
    2550:	bf 91       	pop	r27
    2552:	af 91       	pop	r26
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	7f 91       	pop	r23
    255a:	6f 91       	pop	r22
    255c:	5f 91       	pop	r21
    255e:	4f 91       	pop	r20
    2560:	3f 91       	pop	r19
    2562:	2f 91       	pop	r18
    2564:	0f 90       	pop	r0
    2566:	0b be       	out	0x3b, r0	; 59
    2568:	0f 90       	pop	r0
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	0f 90       	pop	r0
    256e:	1f 90       	pop	r1
    2570:	18 95       	reti

00002572 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    2572:	1f 92       	push	r1
    2574:	0f 92       	push	r0
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	0f 92       	push	r0
    257a:	11 24       	eor	r1, r1
    257c:	0b b6       	in	r0, 0x3b	; 59
    257e:	0f 92       	push	r0
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
    2598:	e0 91 c8 22 	lds	r30, 0x22C8
    259c:	f0 91 c9 22 	lds	r31, 0x22C9
    25a0:	30 97       	sbiw	r30, 0x00	; 0
    25a2:	29 f0       	breq	.+10     	; 0x25ae <__vector_9+0x3c>
    25a4:	80 91 be 23 	lds	r24, 0x23BE
    25a8:	90 91 bf 23 	lds	r25, 0x23BF
    25ac:	19 95       	eicall
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	bf 91       	pop	r27
    25b4:	af 91       	pop	r26
    25b6:	9f 91       	pop	r25
    25b8:	8f 91       	pop	r24
    25ba:	7f 91       	pop	r23
    25bc:	6f 91       	pop	r22
    25be:	5f 91       	pop	r21
    25c0:	4f 91       	pop	r20
    25c2:	3f 91       	pop	r19
    25c4:	2f 91       	pop	r18
    25c6:	0f 90       	pop	r0
    25c8:	0b be       	out	0x3b, r0	; 59
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0
    25d0:	1f 90       	pop	r1
    25d2:	18 95       	reti

000025d4 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	0b b6       	in	r0, 0x3b	; 59
    25e0:	0f 92       	push	r0
    25e2:	2f 93       	push	r18
    25e4:	3f 93       	push	r19
    25e6:	4f 93       	push	r20
    25e8:	5f 93       	push	r21
    25ea:	6f 93       	push	r22
    25ec:	7f 93       	push	r23
    25ee:	8f 93       	push	r24
    25f0:	9f 93       	push	r25
    25f2:	af 93       	push	r26
    25f4:	bf 93       	push	r27
    25f6:	ef 93       	push	r30
    25f8:	ff 93       	push	r31
    25fa:	e0 91 ca 22 	lds	r30, 0x22CA
    25fe:	f0 91 cb 22 	lds	r31, 0x22CB
    2602:	30 97       	sbiw	r30, 0x00	; 0
    2604:	29 f0       	breq	.+10     	; 0x2610 <__vector_10+0x3c>
    2606:	80 91 c0 23 	lds	r24, 0x23C0
    260a:	90 91 c1 23 	lds	r25, 0x23C1
    260e:	19 95       	eicall
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	7f 91       	pop	r23
    261e:	6f 91       	pop	r22
    2620:	5f 91       	pop	r21
    2622:	4f 91       	pop	r20
    2624:	3f 91       	pop	r19
    2626:	2f 91       	pop	r18
    2628:	0f 90       	pop	r0
    262a:	0b be       	out	0x3b, r0	; 59
    262c:	0f 90       	pop	r0
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	0f 90       	pop	r0
    2632:	1f 90       	pop	r1
    2634:	18 95       	reti

00002636 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2636:	1f 92       	push	r1
    2638:	0f 92       	push	r0
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	0b b6       	in	r0, 0x3b	; 59
    2642:	0f 92       	push	r0
    2644:	2f 93       	push	r18
    2646:	3f 93       	push	r19
    2648:	4f 93       	push	r20
    264a:	5f 93       	push	r21
    264c:	6f 93       	push	r22
    264e:	7f 93       	push	r23
    2650:	8f 93       	push	r24
    2652:	9f 93       	push	r25
    2654:	af 93       	push	r26
    2656:	bf 93       	push	r27
    2658:	ef 93       	push	r30
    265a:	ff 93       	push	r31
    265c:	e0 91 cc 22 	lds	r30, 0x22CC
    2660:	f0 91 cd 22 	lds	r31, 0x22CD
    2664:	30 97       	sbiw	r30, 0x00	; 0
    2666:	29 f0       	breq	.+10     	; 0x2672 <__vector_11+0x3c>
    2668:	80 91 c2 23 	lds	r24, 0x23C2
    266c:	90 91 c3 23 	lds	r25, 0x23C3
    2670:	19 95       	eicall
    2672:	ff 91       	pop	r31
    2674:	ef 91       	pop	r30
    2676:	bf 91       	pop	r27
    2678:	af 91       	pop	r26
    267a:	9f 91       	pop	r25
    267c:	8f 91       	pop	r24
    267e:	7f 91       	pop	r23
    2680:	6f 91       	pop	r22
    2682:	5f 91       	pop	r21
    2684:	4f 91       	pop	r20
    2686:	3f 91       	pop	r19
    2688:	2f 91       	pop	r18
    268a:	0f 90       	pop	r0
    268c:	0b be       	out	0x3b, r0	; 59
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    2698:	1f 92       	push	r1
    269a:	0f 92       	push	r0
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	0f 92       	push	r0
    26a0:	11 24       	eor	r1, r1
    26a2:	0b b6       	in	r0, 0x3b	; 59
    26a4:	0f 92       	push	r0
    26a6:	2f 93       	push	r18
    26a8:	3f 93       	push	r19
    26aa:	4f 93       	push	r20
    26ac:	5f 93       	push	r21
    26ae:	6f 93       	push	r22
    26b0:	7f 93       	push	r23
    26b2:	8f 93       	push	r24
    26b4:	9f 93       	push	r25
    26b6:	af 93       	push	r26
    26b8:	bf 93       	push	r27
    26ba:	ef 93       	push	r30
    26bc:	ff 93       	push	r31
    26be:	e0 91 ce 22 	lds	r30, 0x22CE
    26c2:	f0 91 cf 22 	lds	r31, 0x22CF
    26c6:	30 97       	sbiw	r30, 0x00	; 0
    26c8:	29 f0       	breq	.+10     	; 0x26d4 <__vector_12+0x3c>
    26ca:	80 91 c4 23 	lds	r24, 0x23C4
    26ce:	90 91 c5 23 	lds	r25, 0x23C5
    26d2:	19 95       	eicall
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0b be       	out	0x3b, r0	; 59
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	0b b6       	in	r0, 0x3b	; 59
    2706:	0f 92       	push	r0
    2708:	2f 93       	push	r18
    270a:	3f 93       	push	r19
    270c:	4f 93       	push	r20
    270e:	5f 93       	push	r21
    2710:	6f 93       	push	r22
    2712:	7f 93       	push	r23
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	af 93       	push	r26
    271a:	bf 93       	push	r27
    271c:	ef 93       	push	r30
    271e:	ff 93       	push	r31
    2720:	e0 91 d0 22 	lds	r30, 0x22D0
    2724:	f0 91 d1 22 	lds	r31, 0x22D1
    2728:	30 97       	sbiw	r30, 0x00	; 0
    272a:	29 f0       	breq	.+10     	; 0x2736 <__vector_13+0x3c>
    272c:	80 91 c6 23 	lds	r24, 0x23C6
    2730:	90 91 c7 23 	lds	r25, 0x23C7
    2734:	19 95       	eicall
    2736:	ff 91       	pop	r31
    2738:	ef 91       	pop	r30
    273a:	bf 91       	pop	r27
    273c:	af 91       	pop	r26
    273e:	9f 91       	pop	r25
    2740:	8f 91       	pop	r24
    2742:	7f 91       	pop	r23
    2744:	6f 91       	pop	r22
    2746:	5f 91       	pop	r21
    2748:	4f 91       	pop	r20
    274a:	3f 91       	pop	r19
    274c:	2f 91       	pop	r18
    274e:	0f 90       	pop	r0
    2750:	0b be       	out	0x3b, r0	; 59
    2752:	0f 90       	pop	r0
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	0f 90       	pop	r0
    2758:	1f 90       	pop	r1
    275a:	18 95       	reti

0000275c <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	0b b6       	in	r0, 0x3b	; 59
    2768:	0f 92       	push	r0
    276a:	2f 93       	push	r18
    276c:	3f 93       	push	r19
    276e:	4f 93       	push	r20
    2770:	5f 93       	push	r21
    2772:	6f 93       	push	r22
    2774:	7f 93       	push	r23
    2776:	8f 93       	push	r24
    2778:	9f 93       	push	r25
    277a:	af 93       	push	r26
    277c:	bf 93       	push	r27
    277e:	ef 93       	push	r30
    2780:	ff 93       	push	r31
    2782:	e0 91 d2 22 	lds	r30, 0x22D2
    2786:	f0 91 d3 22 	lds	r31, 0x22D3
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	29 f0       	breq	.+10     	; 0x2798 <__vector_14+0x3c>
    278e:	80 91 c8 23 	lds	r24, 0x23C8
    2792:	90 91 c9 23 	lds	r25, 0x23C9
    2796:	19 95       	eicall
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	bf 91       	pop	r27
    279e:	af 91       	pop	r26
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	7f 91       	pop	r23
    27a6:	6f 91       	pop	r22
    27a8:	5f 91       	pop	r21
    27aa:	4f 91       	pop	r20
    27ac:	3f 91       	pop	r19
    27ae:	2f 91       	pop	r18
    27b0:	0f 90       	pop	r0
    27b2:	0b be       	out	0x3b, r0	; 59
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	0f 90       	pop	r0
    27ba:	1f 90       	pop	r1
    27bc:	18 95       	reti

000027be <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    27be:	1f 92       	push	r1
    27c0:	0f 92       	push	r0
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	0f 92       	push	r0
    27c6:	11 24       	eor	r1, r1
    27c8:	0b b6       	in	r0, 0x3b	; 59
    27ca:	0f 92       	push	r0
    27cc:	2f 93       	push	r18
    27ce:	3f 93       	push	r19
    27d0:	4f 93       	push	r20
    27d2:	5f 93       	push	r21
    27d4:	6f 93       	push	r22
    27d6:	7f 93       	push	r23
    27d8:	8f 93       	push	r24
    27da:	9f 93       	push	r25
    27dc:	af 93       	push	r26
    27de:	bf 93       	push	r27
    27e0:	ef 93       	push	r30
    27e2:	ff 93       	push	r31
    27e4:	e0 91 d4 22 	lds	r30, 0x22D4
    27e8:	f0 91 d5 22 	lds	r31, 0x22D5
    27ec:	30 97       	sbiw	r30, 0x00	; 0
    27ee:	29 f0       	breq	.+10     	; 0x27fa <__vector_15+0x3c>
    27f0:	80 91 ca 23 	lds	r24, 0x23CA
    27f4:	90 91 cb 23 	lds	r25, 0x23CB
    27f8:	19 95       	eicall
    27fa:	ff 91       	pop	r31
    27fc:	ef 91       	pop	r30
    27fe:	bf 91       	pop	r27
    2800:	af 91       	pop	r26
    2802:	9f 91       	pop	r25
    2804:	8f 91       	pop	r24
    2806:	7f 91       	pop	r23
    2808:	6f 91       	pop	r22
    280a:	5f 91       	pop	r21
    280c:	4f 91       	pop	r20
    280e:	3f 91       	pop	r19
    2810:	2f 91       	pop	r18
    2812:	0f 90       	pop	r0
    2814:	0b be       	out	0x3b, r0	; 59
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	0f 90       	pop	r0
    281c:	1f 90       	pop	r1
    281e:	18 95       	reti

00002820 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2820:	1f 92       	push	r1
    2822:	0f 92       	push	r0
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	0f 92       	push	r0
    2828:	11 24       	eor	r1, r1
    282a:	0b b6       	in	r0, 0x3b	; 59
    282c:	0f 92       	push	r0
    282e:	2f 93       	push	r18
    2830:	3f 93       	push	r19
    2832:	4f 93       	push	r20
    2834:	5f 93       	push	r21
    2836:	6f 93       	push	r22
    2838:	7f 93       	push	r23
    283a:	8f 93       	push	r24
    283c:	9f 93       	push	r25
    283e:	af 93       	push	r26
    2840:	bf 93       	push	r27
    2842:	ef 93       	push	r30
    2844:	ff 93       	push	r31
    2846:	e0 91 d6 22 	lds	r30, 0x22D6
    284a:	f0 91 d7 22 	lds	r31, 0x22D7
    284e:	30 97       	sbiw	r30, 0x00	; 0
    2850:	29 f0       	breq	.+10     	; 0x285c <__vector_16+0x3c>
    2852:	80 91 cc 23 	lds	r24, 0x23CC
    2856:	90 91 cd 23 	lds	r25, 0x23CD
    285a:	19 95       	eicall
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	bf 91       	pop	r27
    2862:	af 91       	pop	r26
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	5f 91       	pop	r21
    286e:	4f 91       	pop	r20
    2870:	3f 91       	pop	r19
    2872:	2f 91       	pop	r18
    2874:	0f 90       	pop	r0
    2876:	0b be       	out	0x3b, r0	; 59
    2878:	0f 90       	pop	r0
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	0f 90       	pop	r0
    287e:	1f 90       	pop	r1
    2880:	18 95       	reti

00002882 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    2882:	1f 92       	push	r1
    2884:	0f 92       	push	r0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	11 24       	eor	r1, r1
    288c:	0b b6       	in	r0, 0x3b	; 59
    288e:	0f 92       	push	r0
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	ef 93       	push	r30
    28a6:	ff 93       	push	r31
    28a8:	e0 91 d8 22 	lds	r30, 0x22D8
    28ac:	f0 91 d9 22 	lds	r31, 0x22D9
    28b0:	30 97       	sbiw	r30, 0x00	; 0
    28b2:	29 f0       	breq	.+10     	; 0x28be <__vector_17+0x3c>
    28b4:	80 91 ce 23 	lds	r24, 0x23CE
    28b8:	90 91 cf 23 	lds	r25, 0x23CF
    28bc:	19 95       	eicall
    28be:	ff 91       	pop	r31
    28c0:	ef 91       	pop	r30
    28c2:	bf 91       	pop	r27
    28c4:	af 91       	pop	r26
    28c6:	9f 91       	pop	r25
    28c8:	8f 91       	pop	r24
    28ca:	7f 91       	pop	r23
    28cc:	6f 91       	pop	r22
    28ce:	5f 91       	pop	r21
    28d0:	4f 91       	pop	r20
    28d2:	3f 91       	pop	r19
    28d4:	2f 91       	pop	r18
    28d6:	0f 90       	pop	r0
    28d8:	0b be       	out	0x3b, r0	; 59
    28da:	0f 90       	pop	r0
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	0f 90       	pop	r0
    28e0:	1f 90       	pop	r1
    28e2:	18 95       	reti

000028e4 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    28e4:	1f 92       	push	r1
    28e6:	0f 92       	push	r0
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	0f 92       	push	r0
    28ec:	11 24       	eor	r1, r1
    28ee:	0b b6       	in	r0, 0x3b	; 59
    28f0:	0f 92       	push	r0
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	4f 93       	push	r20
    28f8:	5f 93       	push	r21
    28fa:	6f 93       	push	r22
    28fc:	7f 93       	push	r23
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	af 93       	push	r26
    2904:	bf 93       	push	r27
    2906:	ef 93       	push	r30
    2908:	ff 93       	push	r31
    290a:	e0 91 da 22 	lds	r30, 0x22DA
    290e:	f0 91 db 22 	lds	r31, 0x22DB
    2912:	30 97       	sbiw	r30, 0x00	; 0
    2914:	29 f0       	breq	.+10     	; 0x2920 <__vector_18+0x3c>
    2916:	80 91 d0 23 	lds	r24, 0x23D0
    291a:	90 91 d1 23 	lds	r25, 0x23D1
    291e:	19 95       	eicall
    2920:	ff 91       	pop	r31
    2922:	ef 91       	pop	r30
    2924:	bf 91       	pop	r27
    2926:	af 91       	pop	r26
    2928:	9f 91       	pop	r25
    292a:	8f 91       	pop	r24
    292c:	7f 91       	pop	r23
    292e:	6f 91       	pop	r22
    2930:	5f 91       	pop	r21
    2932:	4f 91       	pop	r20
    2934:	3f 91       	pop	r19
    2936:	2f 91       	pop	r18
    2938:	0f 90       	pop	r0
    293a:	0b be       	out	0x3b, r0	; 59
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0
    2942:	1f 90       	pop	r1
    2944:	18 95       	reti

00002946 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	0b b6       	in	r0, 0x3b	; 59
    2952:	0f 92       	push	r0
    2954:	2f 93       	push	r18
    2956:	3f 93       	push	r19
    2958:	4f 93       	push	r20
    295a:	5f 93       	push	r21
    295c:	6f 93       	push	r22
    295e:	7f 93       	push	r23
    2960:	8f 93       	push	r24
    2962:	9f 93       	push	r25
    2964:	af 93       	push	r26
    2966:	bf 93       	push	r27
    2968:	ef 93       	push	r30
    296a:	ff 93       	push	r31
    296c:	e0 91 dc 22 	lds	r30, 0x22DC
    2970:	f0 91 dd 22 	lds	r31, 0x22DD
    2974:	30 97       	sbiw	r30, 0x00	; 0
    2976:	29 f0       	breq	.+10     	; 0x2982 <__vector_19+0x3c>
    2978:	80 91 d2 23 	lds	r24, 0x23D2
    297c:	90 91 d3 23 	lds	r25, 0x23D3
    2980:	19 95       	eicall
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	bf 91       	pop	r27
    2988:	af 91       	pop	r26
    298a:	9f 91       	pop	r25
    298c:	8f 91       	pop	r24
    298e:	7f 91       	pop	r23
    2990:	6f 91       	pop	r22
    2992:	5f 91       	pop	r21
    2994:	4f 91       	pop	r20
    2996:	3f 91       	pop	r19
    2998:	2f 91       	pop	r18
    299a:	0f 90       	pop	r0
    299c:	0b be       	out	0x3b, r0	; 59
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	0b b6       	in	r0, 0x3b	; 59
    29b4:	0f 92       	push	r0
    29b6:	2f 93       	push	r18
    29b8:	3f 93       	push	r19
    29ba:	4f 93       	push	r20
    29bc:	5f 93       	push	r21
    29be:	6f 93       	push	r22
    29c0:	7f 93       	push	r23
    29c2:	8f 93       	push	r24
    29c4:	9f 93       	push	r25
    29c6:	af 93       	push	r26
    29c8:	bf 93       	push	r27
    29ca:	ef 93       	push	r30
    29cc:	ff 93       	push	r31
    29ce:	e0 91 de 22 	lds	r30, 0x22DE
    29d2:	f0 91 df 22 	lds	r31, 0x22DF
    29d6:	30 97       	sbiw	r30, 0x00	; 0
    29d8:	29 f0       	breq	.+10     	; 0x29e4 <__vector_20+0x3c>
    29da:	80 91 d4 23 	lds	r24, 0x23D4
    29de:	90 91 d5 23 	lds	r25, 0x23D5
    29e2:	19 95       	eicall
    29e4:	ff 91       	pop	r31
    29e6:	ef 91       	pop	r30
    29e8:	bf 91       	pop	r27
    29ea:	af 91       	pop	r26
    29ec:	9f 91       	pop	r25
    29ee:	8f 91       	pop	r24
    29f0:	7f 91       	pop	r23
    29f2:	6f 91       	pop	r22
    29f4:	5f 91       	pop	r21
    29f6:	4f 91       	pop	r20
    29f8:	3f 91       	pop	r19
    29fa:	2f 91       	pop	r18
    29fc:	0f 90       	pop	r0
    29fe:	0b be       	out	0x3b, r0	; 59
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	0f 90       	pop	r0
    2a06:	1f 90       	pop	r1
    2a08:	18 95       	reti

00002a0a <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2a0a:	1f 92       	push	r1
    2a0c:	0f 92       	push	r0
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	0f 92       	push	r0
    2a12:	11 24       	eor	r1, r1
    2a14:	0b b6       	in	r0, 0x3b	; 59
    2a16:	0f 92       	push	r0
    2a18:	2f 93       	push	r18
    2a1a:	3f 93       	push	r19
    2a1c:	4f 93       	push	r20
    2a1e:	5f 93       	push	r21
    2a20:	6f 93       	push	r22
    2a22:	7f 93       	push	r23
    2a24:	8f 93       	push	r24
    2a26:	9f 93       	push	r25
    2a28:	af 93       	push	r26
    2a2a:	bf 93       	push	r27
    2a2c:	ef 93       	push	r30
    2a2e:	ff 93       	push	r31
    2a30:	e0 91 e0 22 	lds	r30, 0x22E0
    2a34:	f0 91 e1 22 	lds	r31, 0x22E1
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	29 f0       	breq	.+10     	; 0x2a46 <__vector_21+0x3c>
    2a3c:	80 91 d6 23 	lds	r24, 0x23D6
    2a40:	90 91 d7 23 	lds	r25, 0x23D7
    2a44:	19 95       	eicall
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0b be       	out	0x3b, r0	; 59
    2a62:	0f 90       	pop	r0
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	0f 90       	pop	r0
    2a68:	1f 90       	pop	r1
    2a6a:	18 95       	reti

00002a6c <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2a6c:	1f 92       	push	r1
    2a6e:	0f 92       	push	r0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	0f 92       	push	r0
    2a74:	11 24       	eor	r1, r1
    2a76:	0b b6       	in	r0, 0x3b	; 59
    2a78:	0f 92       	push	r0
    2a7a:	2f 93       	push	r18
    2a7c:	3f 93       	push	r19
    2a7e:	4f 93       	push	r20
    2a80:	5f 93       	push	r21
    2a82:	6f 93       	push	r22
    2a84:	7f 93       	push	r23
    2a86:	8f 93       	push	r24
    2a88:	9f 93       	push	r25
    2a8a:	af 93       	push	r26
    2a8c:	bf 93       	push	r27
    2a8e:	ef 93       	push	r30
    2a90:	ff 93       	push	r31
    2a92:	e0 91 e2 22 	lds	r30, 0x22E2
    2a96:	f0 91 e3 22 	lds	r31, 0x22E3
    2a9a:	30 97       	sbiw	r30, 0x00	; 0
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <__vector_22+0x3c>
    2a9e:	80 91 d8 23 	lds	r24, 0x23D8
    2aa2:	90 91 d9 23 	lds	r25, 0x23D9
    2aa6:	19 95       	eicall
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	0f 90       	pop	r0
    2ac2:	0b be       	out	0x3b, r0	; 59
    2ac4:	0f 90       	pop	r0
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	0f 90       	pop	r0
    2aca:	1f 90       	pop	r1
    2acc:	18 95       	reti

00002ace <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2ace:	1f 92       	push	r1
    2ad0:	0f 92       	push	r0
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	0f 92       	push	r0
    2ad6:	11 24       	eor	r1, r1
    2ad8:	0b b6       	in	r0, 0x3b	; 59
    2ada:	0f 92       	push	r0
    2adc:	2f 93       	push	r18
    2ade:	3f 93       	push	r19
    2ae0:	4f 93       	push	r20
    2ae2:	5f 93       	push	r21
    2ae4:	6f 93       	push	r22
    2ae6:	7f 93       	push	r23
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
    2aec:	af 93       	push	r26
    2aee:	bf 93       	push	r27
    2af0:	ef 93       	push	r30
    2af2:	ff 93       	push	r31
    2af4:	e0 91 e4 22 	lds	r30, 0x22E4
    2af8:	f0 91 e5 22 	lds	r31, 0x22E5
    2afc:	30 97       	sbiw	r30, 0x00	; 0
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <__vector_23+0x3c>
    2b00:	80 91 da 23 	lds	r24, 0x23DA
    2b04:	90 91 db 23 	lds	r25, 0x23DB
    2b08:	19 95       	eicall
    2b0a:	ff 91       	pop	r31
    2b0c:	ef 91       	pop	r30
    2b0e:	bf 91       	pop	r27
    2b10:	af 91       	pop	r26
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	7f 91       	pop	r23
    2b18:	6f 91       	pop	r22
    2b1a:	5f 91       	pop	r21
    2b1c:	4f 91       	pop	r20
    2b1e:	3f 91       	pop	r19
    2b20:	2f 91       	pop	r18
    2b22:	0f 90       	pop	r0
    2b24:	0b be       	out	0x3b, r0	; 59
    2b26:	0f 90       	pop	r0
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	0f 90       	pop	r0
    2b2c:	1f 90       	pop	r1
    2b2e:	18 95       	reti

00002b30 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2b30:	1f 92       	push	r1
    2b32:	0f 92       	push	r0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	0f 92       	push	r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	0b b6       	in	r0, 0x3b	; 59
    2b3c:	0f 92       	push	r0
    2b3e:	2f 93       	push	r18
    2b40:	3f 93       	push	r19
    2b42:	4f 93       	push	r20
    2b44:	5f 93       	push	r21
    2b46:	6f 93       	push	r22
    2b48:	7f 93       	push	r23
    2b4a:	8f 93       	push	r24
    2b4c:	9f 93       	push	r25
    2b4e:	af 93       	push	r26
    2b50:	bf 93       	push	r27
    2b52:	ef 93       	push	r30
    2b54:	ff 93       	push	r31
    2b56:	e0 91 e6 22 	lds	r30, 0x22E6
    2b5a:	f0 91 e7 22 	lds	r31, 0x22E7
    2b5e:	30 97       	sbiw	r30, 0x00	; 0
    2b60:	29 f0       	breq	.+10     	; 0x2b6c <__vector_24+0x3c>
    2b62:	80 91 dc 23 	lds	r24, 0x23DC
    2b66:	90 91 dd 23 	lds	r25, 0x23DD
    2b6a:	19 95       	eicall
    2b6c:	ff 91       	pop	r31
    2b6e:	ef 91       	pop	r30
    2b70:	bf 91       	pop	r27
    2b72:	af 91       	pop	r26
    2b74:	9f 91       	pop	r25
    2b76:	8f 91       	pop	r24
    2b78:	7f 91       	pop	r23
    2b7a:	6f 91       	pop	r22
    2b7c:	5f 91       	pop	r21
    2b7e:	4f 91       	pop	r20
    2b80:	3f 91       	pop	r19
    2b82:	2f 91       	pop	r18
    2b84:	0f 90       	pop	r0
    2b86:	0b be       	out	0x3b, r0	; 59
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	0b b6       	in	r0, 0x3b	; 59
    2b9e:	0f 92       	push	r0
    2ba0:	2f 93       	push	r18
    2ba2:	3f 93       	push	r19
    2ba4:	4f 93       	push	r20
    2ba6:	5f 93       	push	r21
    2ba8:	6f 93       	push	r22
    2baa:	7f 93       	push	r23
    2bac:	8f 93       	push	r24
    2bae:	9f 93       	push	r25
    2bb0:	af 93       	push	r26
    2bb2:	bf 93       	push	r27
    2bb4:	ef 93       	push	r30
    2bb6:	ff 93       	push	r31
    2bb8:	e0 91 e8 22 	lds	r30, 0x22E8
    2bbc:	f0 91 e9 22 	lds	r31, 0x22E9
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
    2bc2:	29 f0       	breq	.+10     	; 0x2bce <__vector_25+0x3c>
    2bc4:	80 91 de 23 	lds	r24, 0x23DE
    2bc8:	90 91 df 23 	lds	r25, 0x23DF
    2bcc:	19 95       	eicall
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	bf 91       	pop	r27
    2bd4:	af 91       	pop	r26
    2bd6:	9f 91       	pop	r25
    2bd8:	8f 91       	pop	r24
    2bda:	7f 91       	pop	r23
    2bdc:	6f 91       	pop	r22
    2bde:	5f 91       	pop	r21
    2be0:	4f 91       	pop	r20
    2be2:	3f 91       	pop	r19
    2be4:	2f 91       	pop	r18
    2be6:	0f 90       	pop	r0
    2be8:	0b be       	out	0x3b, r0	; 59
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	0f 92       	push	r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	0b b6       	in	r0, 0x3b	; 59
    2c00:	0f 92       	push	r0
    2c02:	2f 93       	push	r18
    2c04:	3f 93       	push	r19
    2c06:	4f 93       	push	r20
    2c08:	5f 93       	push	r21
    2c0a:	6f 93       	push	r22
    2c0c:	7f 93       	push	r23
    2c0e:	8f 93       	push	r24
    2c10:	9f 93       	push	r25
    2c12:	af 93       	push	r26
    2c14:	bf 93       	push	r27
    2c16:	ef 93       	push	r30
    2c18:	ff 93       	push	r31
    2c1a:	e0 91 ea 22 	lds	r30, 0x22EA
    2c1e:	f0 91 eb 22 	lds	r31, 0x22EB
    2c22:	30 97       	sbiw	r30, 0x00	; 0
    2c24:	29 f0       	breq	.+10     	; 0x2c30 <__vector_26+0x3c>
    2c26:	80 91 e0 23 	lds	r24, 0x23E0
    2c2a:	90 91 e1 23 	lds	r25, 0x23E1
    2c2e:	19 95       	eicall
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0b be       	out	0x3b, r0	; 59
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2c56:	1f 92       	push	r1
    2c58:	0f 92       	push	r0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	0f 92       	push	r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	0b b6       	in	r0, 0x3b	; 59
    2c62:	0f 92       	push	r0
    2c64:	2f 93       	push	r18
    2c66:	3f 93       	push	r19
    2c68:	4f 93       	push	r20
    2c6a:	5f 93       	push	r21
    2c6c:	6f 93       	push	r22
    2c6e:	7f 93       	push	r23
    2c70:	8f 93       	push	r24
    2c72:	9f 93       	push	r25
    2c74:	af 93       	push	r26
    2c76:	bf 93       	push	r27
    2c78:	ef 93       	push	r30
    2c7a:	ff 93       	push	r31
    2c7c:	e0 91 ec 22 	lds	r30, 0x22EC
    2c80:	f0 91 ed 22 	lds	r31, 0x22ED
    2c84:	30 97       	sbiw	r30, 0x00	; 0
    2c86:	29 f0       	breq	.+10     	; 0x2c92 <__vector_27+0x3c>
    2c88:	80 91 e2 23 	lds	r24, 0x23E2
    2c8c:	90 91 e3 23 	lds	r25, 0x23E3
    2c90:	19 95       	eicall
    2c92:	ff 91       	pop	r31
    2c94:	ef 91       	pop	r30
    2c96:	bf 91       	pop	r27
    2c98:	af 91       	pop	r26
    2c9a:	9f 91       	pop	r25
    2c9c:	8f 91       	pop	r24
    2c9e:	7f 91       	pop	r23
    2ca0:	6f 91       	pop	r22
    2ca2:	5f 91       	pop	r21
    2ca4:	4f 91       	pop	r20
    2ca6:	3f 91       	pop	r19
    2ca8:	2f 91       	pop	r18
    2caa:	0f 90       	pop	r0
    2cac:	0b be       	out	0x3b, r0	; 59
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	0b b6       	in	r0, 0x3b	; 59
    2cc4:	0f 92       	push	r0
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	4f 93       	push	r20
    2ccc:	5f 93       	push	r21
    2cce:	6f 93       	push	r22
    2cd0:	7f 93       	push	r23
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	af 93       	push	r26
    2cd8:	bf 93       	push	r27
    2cda:	ef 93       	push	r30
    2cdc:	ff 93       	push	r31
    2cde:	e0 91 ee 22 	lds	r30, 0x22EE
    2ce2:	f0 91 ef 22 	lds	r31, 0x22EF
    2ce6:	30 97       	sbiw	r30, 0x00	; 0
    2ce8:	29 f0       	breq	.+10     	; 0x2cf4 <__vector_28+0x3c>
    2cea:	80 91 e4 23 	lds	r24, 0x23E4
    2cee:	90 91 e5 23 	lds	r25, 0x23E5
    2cf2:	19 95       	eicall
    2cf4:	ff 91       	pop	r31
    2cf6:	ef 91       	pop	r30
    2cf8:	bf 91       	pop	r27
    2cfa:	af 91       	pop	r26
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	7f 91       	pop	r23
    2d02:	6f 91       	pop	r22
    2d04:	5f 91       	pop	r21
    2d06:	4f 91       	pop	r20
    2d08:	3f 91       	pop	r19
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0b be       	out	0x3b, r0	; 59
    2d10:	0f 90       	pop	r0
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	0f 90       	pop	r0
    2d16:	1f 90       	pop	r1
    2d18:	18 95       	reti

00002d1a <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2d1a:	1f 92       	push	r1
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	0f 92       	push	r0
    2d22:	11 24       	eor	r1, r1
    2d24:	0b b6       	in	r0, 0x3b	; 59
    2d26:	0f 92       	push	r0
    2d28:	2f 93       	push	r18
    2d2a:	3f 93       	push	r19
    2d2c:	4f 93       	push	r20
    2d2e:	5f 93       	push	r21
    2d30:	6f 93       	push	r22
    2d32:	7f 93       	push	r23
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
    2d40:	e0 91 f0 22 	lds	r30, 0x22F0
    2d44:	f0 91 f1 22 	lds	r31, 0x22F1
    2d48:	30 97       	sbiw	r30, 0x00	; 0
    2d4a:	29 f0       	breq	.+10     	; 0x2d56 <__vector_29+0x3c>
    2d4c:	80 91 e6 23 	lds	r24, 0x23E6
    2d50:	90 91 e7 23 	lds	r25, 0x23E7
    2d54:	19 95       	eicall
    2d56:	ff 91       	pop	r31
    2d58:	ef 91       	pop	r30
    2d5a:	bf 91       	pop	r27
    2d5c:	af 91       	pop	r26
    2d5e:	9f 91       	pop	r25
    2d60:	8f 91       	pop	r24
    2d62:	7f 91       	pop	r23
    2d64:	6f 91       	pop	r22
    2d66:	5f 91       	pop	r21
    2d68:	4f 91       	pop	r20
    2d6a:	3f 91       	pop	r19
    2d6c:	2f 91       	pop	r18
    2d6e:	0f 90       	pop	r0
    2d70:	0b be       	out	0x3b, r0	; 59
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	0f 90       	pop	r0
    2d78:	1f 90       	pop	r1
    2d7a:	18 95       	reti

00002d7c <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	0f 92       	push	r0
    2d84:	11 24       	eor	r1, r1
    2d86:	0b b6       	in	r0, 0x3b	; 59
    2d88:	0f 92       	push	r0
    2d8a:	2f 93       	push	r18
    2d8c:	3f 93       	push	r19
    2d8e:	4f 93       	push	r20
    2d90:	5f 93       	push	r21
    2d92:	6f 93       	push	r22
    2d94:	7f 93       	push	r23
    2d96:	8f 93       	push	r24
    2d98:	9f 93       	push	r25
    2d9a:	af 93       	push	r26
    2d9c:	bf 93       	push	r27
    2d9e:	ef 93       	push	r30
    2da0:	ff 93       	push	r31
    2da2:	e0 91 f2 22 	lds	r30, 0x22F2
    2da6:	f0 91 f3 22 	lds	r31, 0x22F3
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	29 f0       	breq	.+10     	; 0x2db8 <__vector_30+0x3c>
    2dae:	80 91 e8 23 	lds	r24, 0x23E8
    2db2:	90 91 e9 23 	lds	r25, 0x23E9
    2db6:	19 95       	eicall
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0b be       	out	0x3b, r0	; 59
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

00002dde <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2dde:	1f 92       	push	r1
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	0f 92       	push	r0
    2de6:	11 24       	eor	r1, r1
    2de8:	0b b6       	in	r0, 0x3b	; 59
    2dea:	0f 92       	push	r0
    2dec:	2f 93       	push	r18
    2dee:	3f 93       	push	r19
    2df0:	4f 93       	push	r20
    2df2:	5f 93       	push	r21
    2df4:	6f 93       	push	r22
    2df6:	7f 93       	push	r23
    2df8:	8f 93       	push	r24
    2dfa:	9f 93       	push	r25
    2dfc:	af 93       	push	r26
    2dfe:	bf 93       	push	r27
    2e00:	ef 93       	push	r30
    2e02:	ff 93       	push	r31
    2e04:	e0 91 f4 22 	lds	r30, 0x22F4
    2e08:	f0 91 f5 22 	lds	r31, 0x22F5
    2e0c:	30 97       	sbiw	r30, 0x00	; 0
    2e0e:	29 f0       	breq	.+10     	; 0x2e1a <__vector_31+0x3c>
    2e10:	80 91 ea 23 	lds	r24, 0x23EA
    2e14:	90 91 eb 23 	lds	r25, 0x23EB
    2e18:	19 95       	eicall
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0b be       	out	0x3b, r0	; 59
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	0b b6       	in	r0, 0x3b	; 59
    2e4c:	0f 92       	push	r0
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	7f 93       	push	r23
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	af 93       	push	r26
    2e60:	bf 93       	push	r27
    2e62:	ef 93       	push	r30
    2e64:	ff 93       	push	r31
    2e66:	e0 91 f6 22 	lds	r30, 0x22F6
    2e6a:	f0 91 f7 22 	lds	r31, 0x22F7
    2e6e:	30 97       	sbiw	r30, 0x00	; 0
    2e70:	29 f0       	breq	.+10     	; 0x2e7c <__vector_32+0x3c>
    2e72:	80 91 ec 23 	lds	r24, 0x23EC
    2e76:	90 91 ed 23 	lds	r25, 0x23ED
    2e7a:	19 95       	eicall
    2e7c:	ff 91       	pop	r31
    2e7e:	ef 91       	pop	r30
    2e80:	bf 91       	pop	r27
    2e82:	af 91       	pop	r26
    2e84:	9f 91       	pop	r25
    2e86:	8f 91       	pop	r24
    2e88:	7f 91       	pop	r23
    2e8a:	6f 91       	pop	r22
    2e8c:	5f 91       	pop	r21
    2e8e:	4f 91       	pop	r20
    2e90:	3f 91       	pop	r19
    2e92:	2f 91       	pop	r18
    2e94:	0f 90       	pop	r0
    2e96:	0b be       	out	0x3b, r0	; 59
    2e98:	0f 90       	pop	r0
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	0f 90       	pop	r0
    2e9e:	1f 90       	pop	r1
    2ea0:	18 95       	reti

00002ea2 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2ea2:	1f 92       	push	r1
    2ea4:	0f 92       	push	r0
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	0f 92       	push	r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	0b b6       	in	r0, 0x3b	; 59
    2eae:	0f 92       	push	r0
    2eb0:	2f 93       	push	r18
    2eb2:	3f 93       	push	r19
    2eb4:	4f 93       	push	r20
    2eb6:	5f 93       	push	r21
    2eb8:	6f 93       	push	r22
    2eba:	7f 93       	push	r23
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	af 93       	push	r26
    2ec2:	bf 93       	push	r27
    2ec4:	ef 93       	push	r30
    2ec6:	ff 93       	push	r31
    2ec8:	e0 91 f8 22 	lds	r30, 0x22F8
    2ecc:	f0 91 f9 22 	lds	r31, 0x22F9
    2ed0:	30 97       	sbiw	r30, 0x00	; 0
    2ed2:	29 f0       	breq	.+10     	; 0x2ede <__vector_33+0x3c>
    2ed4:	80 91 ee 23 	lds	r24, 0x23EE
    2ed8:	90 91 ef 23 	lds	r25, 0x23EF
    2edc:	19 95       	eicall
    2ede:	ff 91       	pop	r31
    2ee0:	ef 91       	pop	r30
    2ee2:	bf 91       	pop	r27
    2ee4:	af 91       	pop	r26
    2ee6:	9f 91       	pop	r25
    2ee8:	8f 91       	pop	r24
    2eea:	7f 91       	pop	r23
    2eec:	6f 91       	pop	r22
    2eee:	5f 91       	pop	r21
    2ef0:	4f 91       	pop	r20
    2ef2:	3f 91       	pop	r19
    2ef4:	2f 91       	pop	r18
    2ef6:	0f 90       	pop	r0
    2ef8:	0b be       	out	0x3b, r0	; 59
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	0b b6       	in	r0, 0x3b	; 59
    2f10:	0f 92       	push	r0
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
    2f2a:	e0 91 fa 22 	lds	r30, 0x22FA
    2f2e:	f0 91 fb 22 	lds	r31, 0x22FB
    2f32:	30 97       	sbiw	r30, 0x00	; 0
    2f34:	29 f0       	breq	.+10     	; 0x2f40 <__vector_34+0x3c>
    2f36:	80 91 f0 23 	lds	r24, 0x23F0
    2f3a:	90 91 f1 23 	lds	r25, 0x23F1
    2f3e:	19 95       	eicall
    2f40:	ff 91       	pop	r31
    2f42:	ef 91       	pop	r30
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	0f 90       	pop	r0
    2f5a:	0b be       	out	0x3b, r0	; 59
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	0f 92       	push	r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	0b b6       	in	r0, 0x3b	; 59
    2f72:	0f 92       	push	r0
    2f74:	2f 93       	push	r18
    2f76:	3f 93       	push	r19
    2f78:	4f 93       	push	r20
    2f7a:	5f 93       	push	r21
    2f7c:	6f 93       	push	r22
    2f7e:	7f 93       	push	r23
    2f80:	8f 93       	push	r24
    2f82:	9f 93       	push	r25
    2f84:	af 93       	push	r26
    2f86:	bf 93       	push	r27
    2f88:	ef 93       	push	r30
    2f8a:	ff 93       	push	r31
    2f8c:	e0 91 fc 22 	lds	r30, 0x22FC
    2f90:	f0 91 fd 22 	lds	r31, 0x22FD
    2f94:	30 97       	sbiw	r30, 0x00	; 0
    2f96:	29 f0       	breq	.+10     	; 0x2fa2 <__vector_35+0x3c>
    2f98:	80 91 f2 23 	lds	r24, 0x23F2
    2f9c:	90 91 f3 23 	lds	r25, 0x23F3
    2fa0:	19 95       	eicall
    2fa2:	ff 91       	pop	r31
    2fa4:	ef 91       	pop	r30
    2fa6:	bf 91       	pop	r27
    2fa8:	af 91       	pop	r26
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	7f 91       	pop	r23
    2fb0:	6f 91       	pop	r22
    2fb2:	5f 91       	pop	r21
    2fb4:	4f 91       	pop	r20
    2fb6:	3f 91       	pop	r19
    2fb8:	2f 91       	pop	r18
    2fba:	0f 90       	pop	r0
    2fbc:	0b be       	out	0x3b, r0	; 59
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	0f 90       	pop	r0
    2fc4:	1f 90       	pop	r1
    2fc6:	18 95       	reti

00002fc8 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    2fc8:	1f 92       	push	r1
    2fca:	0f 92       	push	r0
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	0b b6       	in	r0, 0x3b	; 59
    2fd4:	0f 92       	push	r0
    2fd6:	2f 93       	push	r18
    2fd8:	3f 93       	push	r19
    2fda:	4f 93       	push	r20
    2fdc:	5f 93       	push	r21
    2fde:	6f 93       	push	r22
    2fe0:	7f 93       	push	r23
    2fe2:	8f 93       	push	r24
    2fe4:	9f 93       	push	r25
    2fe6:	af 93       	push	r26
    2fe8:	bf 93       	push	r27
    2fea:	ef 93       	push	r30
    2fec:	ff 93       	push	r31
    2fee:	e0 91 fe 22 	lds	r30, 0x22FE
    2ff2:	f0 91 ff 22 	lds	r31, 0x22FF
    2ff6:	30 97       	sbiw	r30, 0x00	; 0
    2ff8:	29 f0       	breq	.+10     	; 0x3004 <__vector_36+0x3c>
    2ffa:	80 91 f4 23 	lds	r24, 0x23F4
    2ffe:	90 91 f5 23 	lds	r25, 0x23F5
    3002:	19 95       	eicall
    3004:	ff 91       	pop	r31
    3006:	ef 91       	pop	r30
    3008:	bf 91       	pop	r27
    300a:	af 91       	pop	r26
    300c:	9f 91       	pop	r25
    300e:	8f 91       	pop	r24
    3010:	7f 91       	pop	r23
    3012:	6f 91       	pop	r22
    3014:	5f 91       	pop	r21
    3016:	4f 91       	pop	r20
    3018:	3f 91       	pop	r19
    301a:	2f 91       	pop	r18
    301c:	0f 90       	pop	r0
    301e:	0b be       	out	0x3b, r0	; 59
    3020:	0f 90       	pop	r0
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	0f 90       	pop	r0
    3026:	1f 90       	pop	r1
    3028:	18 95       	reti

0000302a <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    302a:	1f 92       	push	r1
    302c:	0f 92       	push	r0
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	0f 92       	push	r0
    3032:	11 24       	eor	r1, r1
    3034:	0b b6       	in	r0, 0x3b	; 59
    3036:	0f 92       	push	r0
    3038:	2f 93       	push	r18
    303a:	3f 93       	push	r19
    303c:	4f 93       	push	r20
    303e:	5f 93       	push	r21
    3040:	6f 93       	push	r22
    3042:	7f 93       	push	r23
    3044:	8f 93       	push	r24
    3046:	9f 93       	push	r25
    3048:	af 93       	push	r26
    304a:	bf 93       	push	r27
    304c:	ef 93       	push	r30
    304e:	ff 93       	push	r31
    3050:	e0 91 00 23 	lds	r30, 0x2300
    3054:	f0 91 01 23 	lds	r31, 0x2301
    3058:	30 97       	sbiw	r30, 0x00	; 0
    305a:	29 f0       	breq	.+10     	; 0x3066 <__vector_37+0x3c>
    305c:	80 91 f6 23 	lds	r24, 0x23F6
    3060:	90 91 f7 23 	lds	r25, 0x23F7
    3064:	19 95       	eicall
    3066:	ff 91       	pop	r31
    3068:	ef 91       	pop	r30
    306a:	bf 91       	pop	r27
    306c:	af 91       	pop	r26
    306e:	9f 91       	pop	r25
    3070:	8f 91       	pop	r24
    3072:	7f 91       	pop	r23
    3074:	6f 91       	pop	r22
    3076:	5f 91       	pop	r21
    3078:	4f 91       	pop	r20
    307a:	3f 91       	pop	r19
    307c:	2f 91       	pop	r18
    307e:	0f 90       	pop	r0
    3080:	0b be       	out	0x3b, r0	; 59
    3082:	0f 90       	pop	r0
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	0f 90       	pop	r0
    3088:	1f 90       	pop	r1
    308a:	18 95       	reti

0000308c <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    308c:	1f 92       	push	r1
    308e:	0f 92       	push	r0
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	0f 92       	push	r0
    3094:	11 24       	eor	r1, r1
    3096:	0b b6       	in	r0, 0x3b	; 59
    3098:	0f 92       	push	r0
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	e0 91 02 23 	lds	r30, 0x2302
    30b6:	f0 91 03 23 	lds	r31, 0x2303
    30ba:	30 97       	sbiw	r30, 0x00	; 0
    30bc:	29 f0       	breq	.+10     	; 0x30c8 <__vector_38+0x3c>
    30be:	80 91 f8 23 	lds	r24, 0x23F8
    30c2:	90 91 f9 23 	lds	r25, 0x23F9
    30c6:	19 95       	eicall
    30c8:	ff 91       	pop	r31
    30ca:	ef 91       	pop	r30
    30cc:	bf 91       	pop	r27
    30ce:	af 91       	pop	r26
    30d0:	9f 91       	pop	r25
    30d2:	8f 91       	pop	r24
    30d4:	7f 91       	pop	r23
    30d6:	6f 91       	pop	r22
    30d8:	5f 91       	pop	r21
    30da:	4f 91       	pop	r20
    30dc:	3f 91       	pop	r19
    30de:	2f 91       	pop	r18
    30e0:	0f 90       	pop	r0
    30e2:	0b be       	out	0x3b, r0	; 59
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    30ee:	1f 92       	push	r1
    30f0:	0f 92       	push	r0
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	0f 92       	push	r0
    30f6:	11 24       	eor	r1, r1
    30f8:	0b b6       	in	r0, 0x3b	; 59
    30fa:	0f 92       	push	r0
    30fc:	2f 93       	push	r18
    30fe:	3f 93       	push	r19
    3100:	4f 93       	push	r20
    3102:	5f 93       	push	r21
    3104:	6f 93       	push	r22
    3106:	7f 93       	push	r23
    3108:	8f 93       	push	r24
    310a:	9f 93       	push	r25
    310c:	af 93       	push	r26
    310e:	bf 93       	push	r27
    3110:	ef 93       	push	r30
    3112:	ff 93       	push	r31
    3114:	e0 91 04 23 	lds	r30, 0x2304
    3118:	f0 91 05 23 	lds	r31, 0x2305
    311c:	30 97       	sbiw	r30, 0x00	; 0
    311e:	29 f0       	breq	.+10     	; 0x312a <__vector_39+0x3c>
    3120:	80 91 fa 23 	lds	r24, 0x23FA
    3124:	90 91 fb 23 	lds	r25, 0x23FB
    3128:	19 95       	eicall
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	bf 91       	pop	r27
    3130:	af 91       	pop	r26
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	7f 91       	pop	r23
    3138:	6f 91       	pop	r22
    313a:	5f 91       	pop	r21
    313c:	4f 91       	pop	r20
    313e:	3f 91       	pop	r19
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0b be       	out	0x3b, r0	; 59
    3146:	0f 90       	pop	r0
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	0f 90       	pop	r0
    314c:	1f 90       	pop	r1
    314e:	18 95       	reti

00003150 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    3150:	1f 92       	push	r1
    3152:	0f 92       	push	r0
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	0f 92       	push	r0
    3158:	11 24       	eor	r1, r1
    315a:	0b b6       	in	r0, 0x3b	; 59
    315c:	0f 92       	push	r0
    315e:	2f 93       	push	r18
    3160:	3f 93       	push	r19
    3162:	4f 93       	push	r20
    3164:	5f 93       	push	r21
    3166:	6f 93       	push	r22
    3168:	7f 93       	push	r23
    316a:	8f 93       	push	r24
    316c:	9f 93       	push	r25
    316e:	af 93       	push	r26
    3170:	bf 93       	push	r27
    3172:	ef 93       	push	r30
    3174:	ff 93       	push	r31
    3176:	e0 91 06 23 	lds	r30, 0x2306
    317a:	f0 91 07 23 	lds	r31, 0x2307
    317e:	30 97       	sbiw	r30, 0x00	; 0
    3180:	29 f0       	breq	.+10     	; 0x318c <__vector_40+0x3c>
    3182:	80 91 fc 23 	lds	r24, 0x23FC
    3186:	90 91 fd 23 	lds	r25, 0x23FD
    318a:	19 95       	eicall
    318c:	ff 91       	pop	r31
    318e:	ef 91       	pop	r30
    3190:	bf 91       	pop	r27
    3192:	af 91       	pop	r26
    3194:	9f 91       	pop	r25
    3196:	8f 91       	pop	r24
    3198:	7f 91       	pop	r23
    319a:	6f 91       	pop	r22
    319c:	5f 91       	pop	r21
    319e:	4f 91       	pop	r20
    31a0:	3f 91       	pop	r19
    31a2:	2f 91       	pop	r18
    31a4:	0f 90       	pop	r0
    31a6:	0b be       	out	0x3b, r0	; 59
    31a8:	0f 90       	pop	r0
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	0f 90       	pop	r0
    31ae:	1f 90       	pop	r1
    31b0:	18 95       	reti

000031b2 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    31b2:	1f 92       	push	r1
    31b4:	0f 92       	push	r0
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	0f 92       	push	r0
    31ba:	11 24       	eor	r1, r1
    31bc:	0b b6       	in	r0, 0x3b	; 59
    31be:	0f 92       	push	r0
    31c0:	2f 93       	push	r18
    31c2:	3f 93       	push	r19
    31c4:	4f 93       	push	r20
    31c6:	5f 93       	push	r21
    31c8:	6f 93       	push	r22
    31ca:	7f 93       	push	r23
    31cc:	8f 93       	push	r24
    31ce:	9f 93       	push	r25
    31d0:	af 93       	push	r26
    31d2:	bf 93       	push	r27
    31d4:	ef 93       	push	r30
    31d6:	ff 93       	push	r31
    31d8:	e0 91 08 23 	lds	r30, 0x2308
    31dc:	f0 91 09 23 	lds	r31, 0x2309
    31e0:	30 97       	sbiw	r30, 0x00	; 0
    31e2:	29 f0       	breq	.+10     	; 0x31ee <__vector_41+0x3c>
    31e4:	80 91 fe 23 	lds	r24, 0x23FE
    31e8:	90 91 ff 23 	lds	r25, 0x23FF
    31ec:	19 95       	eicall
    31ee:	ff 91       	pop	r31
    31f0:	ef 91       	pop	r30
    31f2:	bf 91       	pop	r27
    31f4:	af 91       	pop	r26
    31f6:	9f 91       	pop	r25
    31f8:	8f 91       	pop	r24
    31fa:	7f 91       	pop	r23
    31fc:	6f 91       	pop	r22
    31fe:	5f 91       	pop	r21
    3200:	4f 91       	pop	r20
    3202:	3f 91       	pop	r19
    3204:	2f 91       	pop	r18
    3206:	0f 90       	pop	r0
    3208:	0b be       	out	0x3b, r0	; 59
    320a:	0f 90       	pop	r0
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	0f 90       	pop	r0
    3210:	1f 90       	pop	r1
    3212:	18 95       	reti

00003214 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    3214:	1f 92       	push	r1
    3216:	0f 92       	push	r0
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	0f 92       	push	r0
    321c:	11 24       	eor	r1, r1
    321e:	0b b6       	in	r0, 0x3b	; 59
    3220:	0f 92       	push	r0
    3222:	2f 93       	push	r18
    3224:	3f 93       	push	r19
    3226:	4f 93       	push	r20
    3228:	5f 93       	push	r21
    322a:	6f 93       	push	r22
    322c:	7f 93       	push	r23
    322e:	8f 93       	push	r24
    3230:	9f 93       	push	r25
    3232:	af 93       	push	r26
    3234:	bf 93       	push	r27
    3236:	ef 93       	push	r30
    3238:	ff 93       	push	r31
    323a:	e0 91 0a 23 	lds	r30, 0x230A
    323e:	f0 91 0b 23 	lds	r31, 0x230B
    3242:	30 97       	sbiw	r30, 0x00	; 0
    3244:	29 f0       	breq	.+10     	; 0x3250 <__vector_42+0x3c>
    3246:	80 91 00 24 	lds	r24, 0x2400
    324a:	90 91 01 24 	lds	r25, 0x2401
    324e:	19 95       	eicall
    3250:	ff 91       	pop	r31
    3252:	ef 91       	pop	r30
    3254:	bf 91       	pop	r27
    3256:	af 91       	pop	r26
    3258:	9f 91       	pop	r25
    325a:	8f 91       	pop	r24
    325c:	7f 91       	pop	r23
    325e:	6f 91       	pop	r22
    3260:	5f 91       	pop	r21
    3262:	4f 91       	pop	r20
    3264:	3f 91       	pop	r19
    3266:	2f 91       	pop	r18
    3268:	0f 90       	pop	r0
    326a:	0b be       	out	0x3b, r0	; 59
    326c:	0f 90       	pop	r0
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	0f 90       	pop	r0
    3272:	1f 90       	pop	r1
    3274:	18 95       	reti

00003276 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    3276:	1f 92       	push	r1
    3278:	0f 92       	push	r0
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	0f 92       	push	r0
    327e:	11 24       	eor	r1, r1
    3280:	0b b6       	in	r0, 0x3b	; 59
    3282:	0f 92       	push	r0
    3284:	2f 93       	push	r18
    3286:	3f 93       	push	r19
    3288:	4f 93       	push	r20
    328a:	5f 93       	push	r21
    328c:	6f 93       	push	r22
    328e:	7f 93       	push	r23
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	af 93       	push	r26
    3296:	bf 93       	push	r27
    3298:	ef 93       	push	r30
    329a:	ff 93       	push	r31
    329c:	e0 91 0c 23 	lds	r30, 0x230C
    32a0:	f0 91 0d 23 	lds	r31, 0x230D
    32a4:	30 97       	sbiw	r30, 0x00	; 0
    32a6:	29 f0       	breq	.+10     	; 0x32b2 <__vector_43+0x3c>
    32a8:	80 91 02 24 	lds	r24, 0x2402
    32ac:	90 91 03 24 	lds	r25, 0x2403
    32b0:	19 95       	eicall
    32b2:	ff 91       	pop	r31
    32b4:	ef 91       	pop	r30
    32b6:	bf 91       	pop	r27
    32b8:	af 91       	pop	r26
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	7f 91       	pop	r23
    32c0:	6f 91       	pop	r22
    32c2:	5f 91       	pop	r21
    32c4:	4f 91       	pop	r20
    32c6:	3f 91       	pop	r19
    32c8:	2f 91       	pop	r18
    32ca:	0f 90       	pop	r0
    32cc:	0b be       	out	0x3b, r0	; 59
    32ce:	0f 90       	pop	r0
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	0f 90       	pop	r0
    32d4:	1f 90       	pop	r1
    32d6:	18 95       	reti

000032d8 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    32d8:	1f 92       	push	r1
    32da:	0f 92       	push	r0
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	0f 92       	push	r0
    32e0:	11 24       	eor	r1, r1
    32e2:	0b b6       	in	r0, 0x3b	; 59
    32e4:	0f 92       	push	r0
    32e6:	2f 93       	push	r18
    32e8:	3f 93       	push	r19
    32ea:	4f 93       	push	r20
    32ec:	5f 93       	push	r21
    32ee:	6f 93       	push	r22
    32f0:	7f 93       	push	r23
    32f2:	8f 93       	push	r24
    32f4:	9f 93       	push	r25
    32f6:	af 93       	push	r26
    32f8:	bf 93       	push	r27
    32fa:	ef 93       	push	r30
    32fc:	ff 93       	push	r31
    32fe:	e0 91 0e 23 	lds	r30, 0x230E
    3302:	f0 91 0f 23 	lds	r31, 0x230F
    3306:	30 97       	sbiw	r30, 0x00	; 0
    3308:	29 f0       	breq	.+10     	; 0x3314 <__vector_44+0x3c>
    330a:	80 91 04 24 	lds	r24, 0x2404
    330e:	90 91 05 24 	lds	r25, 0x2405
    3312:	19 95       	eicall
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0b be       	out	0x3b, r0	; 59
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

0000333a <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    333a:	1f 92       	push	r1
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	0f 92       	push	r0
    3342:	11 24       	eor	r1, r1
    3344:	0b b6       	in	r0, 0x3b	; 59
    3346:	0f 92       	push	r0
    3348:	2f 93       	push	r18
    334a:	3f 93       	push	r19
    334c:	4f 93       	push	r20
    334e:	5f 93       	push	r21
    3350:	6f 93       	push	r22
    3352:	7f 93       	push	r23
    3354:	8f 93       	push	r24
    3356:	9f 93       	push	r25
    3358:	af 93       	push	r26
    335a:	bf 93       	push	r27
    335c:	ef 93       	push	r30
    335e:	ff 93       	push	r31
    3360:	e0 91 10 23 	lds	r30, 0x2310
    3364:	f0 91 11 23 	lds	r31, 0x2311
    3368:	30 97       	sbiw	r30, 0x00	; 0
    336a:	29 f0       	breq	.+10     	; 0x3376 <__vector_45+0x3c>
    336c:	80 91 06 24 	lds	r24, 0x2406
    3370:	90 91 07 24 	lds	r25, 0x2407
    3374:	19 95       	eicall
    3376:	ff 91       	pop	r31
    3378:	ef 91       	pop	r30
    337a:	bf 91       	pop	r27
    337c:	af 91       	pop	r26
    337e:	9f 91       	pop	r25
    3380:	8f 91       	pop	r24
    3382:	7f 91       	pop	r23
    3384:	6f 91       	pop	r22
    3386:	5f 91       	pop	r21
    3388:	4f 91       	pop	r20
    338a:	3f 91       	pop	r19
    338c:	2f 91       	pop	r18
    338e:	0f 90       	pop	r0
    3390:	0b be       	out	0x3b, r0	; 59
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	0f 90       	pop	r0
    3398:	1f 90       	pop	r1
    339a:	18 95       	reti

0000339c <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    339c:	1f 92       	push	r1
    339e:	0f 92       	push	r0
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	0f 92       	push	r0
    33a4:	11 24       	eor	r1, r1
    33a6:	0b b6       	in	r0, 0x3b	; 59
    33a8:	0f 92       	push	r0
    33aa:	2f 93       	push	r18
    33ac:	3f 93       	push	r19
    33ae:	4f 93       	push	r20
    33b0:	5f 93       	push	r21
    33b2:	6f 93       	push	r22
    33b4:	7f 93       	push	r23
    33b6:	8f 93       	push	r24
    33b8:	9f 93       	push	r25
    33ba:	af 93       	push	r26
    33bc:	bf 93       	push	r27
    33be:	ef 93       	push	r30
    33c0:	ff 93       	push	r31
    33c2:	e0 91 12 23 	lds	r30, 0x2312
    33c6:	f0 91 13 23 	lds	r31, 0x2313
    33ca:	30 97       	sbiw	r30, 0x00	; 0
    33cc:	29 f0       	breq	.+10     	; 0x33d8 <__vector_46+0x3c>
    33ce:	80 91 08 24 	lds	r24, 0x2408
    33d2:	90 91 09 24 	lds	r25, 0x2409
    33d6:	19 95       	eicall
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	bf 91       	pop	r27
    33de:	af 91       	pop	r26
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	7f 91       	pop	r23
    33e6:	6f 91       	pop	r22
    33e8:	5f 91       	pop	r21
    33ea:	4f 91       	pop	r20
    33ec:	3f 91       	pop	r19
    33ee:	2f 91       	pop	r18
    33f0:	0f 90       	pop	r0
    33f2:	0b be       	out	0x3b, r0	; 59
    33f4:	0f 90       	pop	r0
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	0f 90       	pop	r0
    33fa:	1f 90       	pop	r1
    33fc:	18 95       	reti

000033fe <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	0b b6       	in	r0, 0x3b	; 59
    340a:	0f 92       	push	r0
    340c:	2f 93       	push	r18
    340e:	3f 93       	push	r19
    3410:	4f 93       	push	r20
    3412:	5f 93       	push	r21
    3414:	6f 93       	push	r22
    3416:	7f 93       	push	r23
    3418:	8f 93       	push	r24
    341a:	9f 93       	push	r25
    341c:	af 93       	push	r26
    341e:	bf 93       	push	r27
    3420:	ef 93       	push	r30
    3422:	ff 93       	push	r31
    3424:	e0 91 14 23 	lds	r30, 0x2314
    3428:	f0 91 15 23 	lds	r31, 0x2315
    342c:	30 97       	sbiw	r30, 0x00	; 0
    342e:	29 f0       	breq	.+10     	; 0x343a <__vector_47+0x3c>
    3430:	80 91 0a 24 	lds	r24, 0x240A
    3434:	90 91 0b 24 	lds	r25, 0x240B
    3438:	19 95       	eicall
    343a:	ff 91       	pop	r31
    343c:	ef 91       	pop	r30
    343e:	bf 91       	pop	r27
    3440:	af 91       	pop	r26
    3442:	9f 91       	pop	r25
    3444:	8f 91       	pop	r24
    3446:	7f 91       	pop	r23
    3448:	6f 91       	pop	r22
    344a:	5f 91       	pop	r21
    344c:	4f 91       	pop	r20
    344e:	3f 91       	pop	r19
    3450:	2f 91       	pop	r18
    3452:	0f 90       	pop	r0
    3454:	0b be       	out	0x3b, r0	; 59
    3456:	0f 90       	pop	r0
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	0f 90       	pop	r0
    345c:	1f 90       	pop	r1
    345e:	18 95       	reti

00003460 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    3460:	1f 92       	push	r1
    3462:	0f 92       	push	r0
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	0f 92       	push	r0
    3468:	11 24       	eor	r1, r1
    346a:	0b b6       	in	r0, 0x3b	; 59
    346c:	0f 92       	push	r0
    346e:	2f 93       	push	r18
    3470:	3f 93       	push	r19
    3472:	4f 93       	push	r20
    3474:	5f 93       	push	r21
    3476:	6f 93       	push	r22
    3478:	7f 93       	push	r23
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
    3486:	e0 91 16 23 	lds	r30, 0x2316
    348a:	f0 91 17 23 	lds	r31, 0x2317
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	29 f0       	breq	.+10     	; 0x349c <__vector_48+0x3c>
    3492:	80 91 0c 24 	lds	r24, 0x240C
    3496:	90 91 0d 24 	lds	r25, 0x240D
    349a:	19 95       	eicall
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	7f 91       	pop	r23
    34aa:	6f 91       	pop	r22
    34ac:	5f 91       	pop	r21
    34ae:	4f 91       	pop	r20
    34b0:	3f 91       	pop	r19
    34b2:	2f 91       	pop	r18
    34b4:	0f 90       	pop	r0
    34b6:	0b be       	out	0x3b, r0	; 59
    34b8:	0f 90       	pop	r0
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	0f 90       	pop	r0
    34be:	1f 90       	pop	r1
    34c0:	18 95       	reti

000034c2 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    34c2:	1f 92       	push	r1
    34c4:	0f 92       	push	r0
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	0f 92       	push	r0
    34ca:	11 24       	eor	r1, r1
    34cc:	0b b6       	in	r0, 0x3b	; 59
    34ce:	0f 92       	push	r0
    34d0:	2f 93       	push	r18
    34d2:	3f 93       	push	r19
    34d4:	4f 93       	push	r20
    34d6:	5f 93       	push	r21
    34d8:	6f 93       	push	r22
    34da:	7f 93       	push	r23
    34dc:	8f 93       	push	r24
    34de:	9f 93       	push	r25
    34e0:	af 93       	push	r26
    34e2:	bf 93       	push	r27
    34e4:	ef 93       	push	r30
    34e6:	ff 93       	push	r31
    34e8:	e0 91 18 23 	lds	r30, 0x2318
    34ec:	f0 91 19 23 	lds	r31, 0x2319
    34f0:	30 97       	sbiw	r30, 0x00	; 0
    34f2:	29 f0       	breq	.+10     	; 0x34fe <__vector_49+0x3c>
    34f4:	80 91 0e 24 	lds	r24, 0x240E
    34f8:	90 91 0f 24 	lds	r25, 0x240F
    34fc:	19 95       	eicall
    34fe:	ff 91       	pop	r31
    3500:	ef 91       	pop	r30
    3502:	bf 91       	pop	r27
    3504:	af 91       	pop	r26
    3506:	9f 91       	pop	r25
    3508:	8f 91       	pop	r24
    350a:	7f 91       	pop	r23
    350c:	6f 91       	pop	r22
    350e:	5f 91       	pop	r21
    3510:	4f 91       	pop	r20
    3512:	3f 91       	pop	r19
    3514:	2f 91       	pop	r18
    3516:	0f 90       	pop	r0
    3518:	0b be       	out	0x3b, r0	; 59
    351a:	0f 90       	pop	r0
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	0f 90       	pop	r0
    3520:	1f 90       	pop	r1
    3522:	18 95       	reti

00003524 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    3524:	1f 92       	push	r1
    3526:	0f 92       	push	r0
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	0f 92       	push	r0
    352c:	11 24       	eor	r1, r1
    352e:	0b b6       	in	r0, 0x3b	; 59
    3530:	0f 92       	push	r0
    3532:	2f 93       	push	r18
    3534:	3f 93       	push	r19
    3536:	4f 93       	push	r20
    3538:	5f 93       	push	r21
    353a:	6f 93       	push	r22
    353c:	7f 93       	push	r23
    353e:	8f 93       	push	r24
    3540:	9f 93       	push	r25
    3542:	af 93       	push	r26
    3544:	bf 93       	push	r27
    3546:	ef 93       	push	r30
    3548:	ff 93       	push	r31
    354a:	e0 91 1a 23 	lds	r30, 0x231A
    354e:	f0 91 1b 23 	lds	r31, 0x231B
    3552:	30 97       	sbiw	r30, 0x00	; 0
    3554:	29 f0       	breq	.+10     	; 0x3560 <__vector_50+0x3c>
    3556:	80 91 10 24 	lds	r24, 0x2410
    355a:	90 91 11 24 	lds	r25, 0x2411
    355e:	19 95       	eicall
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0b be       	out	0x3b, r0	; 59
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    3586:	1f 92       	push	r1
    3588:	0f 92       	push	r0
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	0b b6       	in	r0, 0x3b	; 59
    3592:	0f 92       	push	r0
    3594:	2f 93       	push	r18
    3596:	3f 93       	push	r19
    3598:	4f 93       	push	r20
    359a:	5f 93       	push	r21
    359c:	6f 93       	push	r22
    359e:	7f 93       	push	r23
    35a0:	8f 93       	push	r24
    35a2:	9f 93       	push	r25
    35a4:	af 93       	push	r26
    35a6:	bf 93       	push	r27
    35a8:	ef 93       	push	r30
    35aa:	ff 93       	push	r31
    35ac:	e0 91 1c 23 	lds	r30, 0x231C
    35b0:	f0 91 1d 23 	lds	r31, 0x231D
    35b4:	30 97       	sbiw	r30, 0x00	; 0
    35b6:	29 f0       	breq	.+10     	; 0x35c2 <__vector_51+0x3c>
    35b8:	80 91 12 24 	lds	r24, 0x2412
    35bc:	90 91 13 24 	lds	r25, 0x2413
    35c0:	19 95       	eicall
    35c2:	ff 91       	pop	r31
    35c4:	ef 91       	pop	r30
    35c6:	bf 91       	pop	r27
    35c8:	af 91       	pop	r26
    35ca:	9f 91       	pop	r25
    35cc:	8f 91       	pop	r24
    35ce:	7f 91       	pop	r23
    35d0:	6f 91       	pop	r22
    35d2:	5f 91       	pop	r21
    35d4:	4f 91       	pop	r20
    35d6:	3f 91       	pop	r19
    35d8:	2f 91       	pop	r18
    35da:	0f 90       	pop	r0
    35dc:	0b be       	out	0x3b, r0	; 59
    35de:	0f 90       	pop	r0
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	0f 90       	pop	r0
    35e4:	1f 90       	pop	r1
    35e6:	18 95       	reti

000035e8 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	0b b6       	in	r0, 0x3b	; 59
    35f4:	0f 92       	push	r0
    35f6:	2f 93       	push	r18
    35f8:	3f 93       	push	r19
    35fa:	4f 93       	push	r20
    35fc:	5f 93       	push	r21
    35fe:	6f 93       	push	r22
    3600:	7f 93       	push	r23
    3602:	8f 93       	push	r24
    3604:	9f 93       	push	r25
    3606:	af 93       	push	r26
    3608:	bf 93       	push	r27
    360a:	ef 93       	push	r30
    360c:	ff 93       	push	r31
    360e:	e0 91 1e 23 	lds	r30, 0x231E
    3612:	f0 91 1f 23 	lds	r31, 0x231F
    3616:	30 97       	sbiw	r30, 0x00	; 0
    3618:	29 f0       	breq	.+10     	; 0x3624 <__vector_52+0x3c>
    361a:	80 91 14 24 	lds	r24, 0x2414
    361e:	90 91 15 24 	lds	r25, 0x2415
    3622:	19 95       	eicall
    3624:	ff 91       	pop	r31
    3626:	ef 91       	pop	r30
    3628:	bf 91       	pop	r27
    362a:	af 91       	pop	r26
    362c:	9f 91       	pop	r25
    362e:	8f 91       	pop	r24
    3630:	7f 91       	pop	r23
    3632:	6f 91       	pop	r22
    3634:	5f 91       	pop	r21
    3636:	4f 91       	pop	r20
    3638:	3f 91       	pop	r19
    363a:	2f 91       	pop	r18
    363c:	0f 90       	pop	r0
    363e:	0b be       	out	0x3b, r0	; 59
    3640:	0f 90       	pop	r0
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	0f 90       	pop	r0
    3646:	1f 90       	pop	r1
    3648:	18 95       	reti

0000364a <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	11 24       	eor	r1, r1
    3654:	0b b6       	in	r0, 0x3b	; 59
    3656:	0f 92       	push	r0
    3658:	2f 93       	push	r18
    365a:	3f 93       	push	r19
    365c:	4f 93       	push	r20
    365e:	5f 93       	push	r21
    3660:	6f 93       	push	r22
    3662:	7f 93       	push	r23
    3664:	8f 93       	push	r24
    3666:	9f 93       	push	r25
    3668:	af 93       	push	r26
    366a:	bf 93       	push	r27
    366c:	ef 93       	push	r30
    366e:	ff 93       	push	r31
    3670:	e0 91 20 23 	lds	r30, 0x2320
    3674:	f0 91 21 23 	lds	r31, 0x2321
    3678:	30 97       	sbiw	r30, 0x00	; 0
    367a:	29 f0       	breq	.+10     	; 0x3686 <__vector_53+0x3c>
    367c:	80 91 16 24 	lds	r24, 0x2416
    3680:	90 91 17 24 	lds	r25, 0x2417
    3684:	19 95       	eicall
    3686:	ff 91       	pop	r31
    3688:	ef 91       	pop	r30
    368a:	bf 91       	pop	r27
    368c:	af 91       	pop	r26
    368e:	9f 91       	pop	r25
    3690:	8f 91       	pop	r24
    3692:	7f 91       	pop	r23
    3694:	6f 91       	pop	r22
    3696:	5f 91       	pop	r21
    3698:	4f 91       	pop	r20
    369a:	3f 91       	pop	r19
    369c:	2f 91       	pop	r18
    369e:	0f 90       	pop	r0
    36a0:	0b be       	out	0x3b, r0	; 59
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	0f 90       	pop	r0
    36a8:	1f 90       	pop	r1
    36aa:	18 95       	reti

000036ac <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    36ac:	1f 92       	push	r1
    36ae:	0f 92       	push	r0
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	0f 92       	push	r0
    36b4:	11 24       	eor	r1, r1
    36b6:	0b b6       	in	r0, 0x3b	; 59
    36b8:	0f 92       	push	r0
    36ba:	2f 93       	push	r18
    36bc:	3f 93       	push	r19
    36be:	4f 93       	push	r20
    36c0:	5f 93       	push	r21
    36c2:	6f 93       	push	r22
    36c4:	7f 93       	push	r23
    36c6:	8f 93       	push	r24
    36c8:	9f 93       	push	r25
    36ca:	af 93       	push	r26
    36cc:	bf 93       	push	r27
    36ce:	ef 93       	push	r30
    36d0:	ff 93       	push	r31
    36d2:	e0 91 22 23 	lds	r30, 0x2322
    36d6:	f0 91 23 23 	lds	r31, 0x2323
    36da:	30 97       	sbiw	r30, 0x00	; 0
    36dc:	29 f0       	breq	.+10     	; 0x36e8 <__vector_54+0x3c>
    36de:	80 91 18 24 	lds	r24, 0x2418
    36e2:	90 91 19 24 	lds	r25, 0x2419
    36e6:	19 95       	eicall
    36e8:	ff 91       	pop	r31
    36ea:	ef 91       	pop	r30
    36ec:	bf 91       	pop	r27
    36ee:	af 91       	pop	r26
    36f0:	9f 91       	pop	r25
    36f2:	8f 91       	pop	r24
    36f4:	7f 91       	pop	r23
    36f6:	6f 91       	pop	r22
    36f8:	5f 91       	pop	r21
    36fa:	4f 91       	pop	r20
    36fc:	3f 91       	pop	r19
    36fe:	2f 91       	pop	r18
    3700:	0f 90       	pop	r0
    3702:	0b be       	out	0x3b, r0	; 59
    3704:	0f 90       	pop	r0
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	0f 90       	pop	r0
    370a:	1f 90       	pop	r1
    370c:	18 95       	reti

0000370e <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    370e:	1f 92       	push	r1
    3710:	0f 92       	push	r0
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	0f 92       	push	r0
    3716:	11 24       	eor	r1, r1
    3718:	0b b6       	in	r0, 0x3b	; 59
    371a:	0f 92       	push	r0
    371c:	2f 93       	push	r18
    371e:	3f 93       	push	r19
    3720:	4f 93       	push	r20
    3722:	5f 93       	push	r21
    3724:	6f 93       	push	r22
    3726:	7f 93       	push	r23
    3728:	8f 93       	push	r24
    372a:	9f 93       	push	r25
    372c:	af 93       	push	r26
    372e:	bf 93       	push	r27
    3730:	ef 93       	push	r30
    3732:	ff 93       	push	r31
    3734:	e0 91 24 23 	lds	r30, 0x2324
    3738:	f0 91 25 23 	lds	r31, 0x2325
    373c:	30 97       	sbiw	r30, 0x00	; 0
    373e:	29 f0       	breq	.+10     	; 0x374a <__vector_55+0x3c>
    3740:	80 91 1a 24 	lds	r24, 0x241A
    3744:	90 91 1b 24 	lds	r25, 0x241B
    3748:	19 95       	eicall
    374a:	ff 91       	pop	r31
    374c:	ef 91       	pop	r30
    374e:	bf 91       	pop	r27
    3750:	af 91       	pop	r26
    3752:	9f 91       	pop	r25
    3754:	8f 91       	pop	r24
    3756:	7f 91       	pop	r23
    3758:	6f 91       	pop	r22
    375a:	5f 91       	pop	r21
    375c:	4f 91       	pop	r20
    375e:	3f 91       	pop	r19
    3760:	2f 91       	pop	r18
    3762:	0f 90       	pop	r0
    3764:	0b be       	out	0x3b, r0	; 59
    3766:	0f 90       	pop	r0
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	0f 90       	pop	r0
    376c:	1f 90       	pop	r1
    376e:	18 95       	reti

00003770 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    3770:	1f 92       	push	r1
    3772:	0f 92       	push	r0
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	0f 92       	push	r0
    3778:	11 24       	eor	r1, r1
    377a:	0b b6       	in	r0, 0x3b	; 59
    377c:	0f 92       	push	r0
    377e:	2f 93       	push	r18
    3780:	3f 93       	push	r19
    3782:	4f 93       	push	r20
    3784:	5f 93       	push	r21
    3786:	6f 93       	push	r22
    3788:	7f 93       	push	r23
    378a:	8f 93       	push	r24
    378c:	9f 93       	push	r25
    378e:	af 93       	push	r26
    3790:	bf 93       	push	r27
    3792:	ef 93       	push	r30
    3794:	ff 93       	push	r31
    3796:	e0 91 26 23 	lds	r30, 0x2326
    379a:	f0 91 27 23 	lds	r31, 0x2327
    379e:	30 97       	sbiw	r30, 0x00	; 0
    37a0:	29 f0       	breq	.+10     	; 0x37ac <__vector_56+0x3c>
    37a2:	80 91 1c 24 	lds	r24, 0x241C
    37a6:	90 91 1d 24 	lds	r25, 0x241D
    37aa:	19 95       	eicall
    37ac:	ff 91       	pop	r31
    37ae:	ef 91       	pop	r30
    37b0:	bf 91       	pop	r27
    37b2:	af 91       	pop	r26
    37b4:	9f 91       	pop	r25
    37b6:	8f 91       	pop	r24
    37b8:	7f 91       	pop	r23
    37ba:	6f 91       	pop	r22
    37bc:	5f 91       	pop	r21
    37be:	4f 91       	pop	r20
    37c0:	3f 91       	pop	r19
    37c2:	2f 91       	pop	r18
    37c4:	0f 90       	pop	r0
    37c6:	0b be       	out	0x3b, r0	; 59
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	11 24       	eor	r1, r1
    37dc:	0b b6       	in	r0, 0x3b	; 59
    37de:	0f 92       	push	r0
    37e0:	2f 93       	push	r18
    37e2:	3f 93       	push	r19
    37e4:	4f 93       	push	r20
    37e6:	5f 93       	push	r21
    37e8:	6f 93       	push	r22
    37ea:	7f 93       	push	r23
    37ec:	8f 93       	push	r24
    37ee:	9f 93       	push	r25
    37f0:	af 93       	push	r26
    37f2:	bf 93       	push	r27
    37f4:	ef 93       	push	r30
    37f6:	ff 93       	push	r31
    37f8:	e0 91 28 23 	lds	r30, 0x2328
    37fc:	f0 91 29 23 	lds	r31, 0x2329
    3800:	30 97       	sbiw	r30, 0x00	; 0
    3802:	29 f0       	breq	.+10     	; 0x380e <__vector_57+0x3c>
    3804:	80 91 1e 24 	lds	r24, 0x241E
    3808:	90 91 1f 24 	lds	r25, 0x241F
    380c:	19 95       	eicall
    380e:	ff 91       	pop	r31
    3810:	ef 91       	pop	r30
    3812:	bf 91       	pop	r27
    3814:	af 91       	pop	r26
    3816:	9f 91       	pop	r25
    3818:	8f 91       	pop	r24
    381a:	7f 91       	pop	r23
    381c:	6f 91       	pop	r22
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	0f 90       	pop	r0
    3830:	1f 90       	pop	r1
    3832:	18 95       	reti

00003834 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3834:	1f 92       	push	r1
    3836:	0f 92       	push	r0
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	0f 92       	push	r0
    383c:	11 24       	eor	r1, r1
    383e:	0b b6       	in	r0, 0x3b	; 59
    3840:	0f 92       	push	r0
    3842:	2f 93       	push	r18
    3844:	3f 93       	push	r19
    3846:	4f 93       	push	r20
    3848:	5f 93       	push	r21
    384a:	6f 93       	push	r22
    384c:	7f 93       	push	r23
    384e:	8f 93       	push	r24
    3850:	9f 93       	push	r25
    3852:	af 93       	push	r26
    3854:	bf 93       	push	r27
    3856:	ef 93       	push	r30
    3858:	ff 93       	push	r31
    385a:	e0 91 2a 23 	lds	r30, 0x232A
    385e:	f0 91 2b 23 	lds	r31, 0x232B
    3862:	30 97       	sbiw	r30, 0x00	; 0
    3864:	29 f0       	breq	.+10     	; 0x3870 <__vector_58+0x3c>
    3866:	80 91 20 24 	lds	r24, 0x2420
    386a:	90 91 21 24 	lds	r25, 0x2421
    386e:	19 95       	eicall
    3870:	ff 91       	pop	r31
    3872:	ef 91       	pop	r30
    3874:	bf 91       	pop	r27
    3876:	af 91       	pop	r26
    3878:	9f 91       	pop	r25
    387a:	8f 91       	pop	r24
    387c:	7f 91       	pop	r23
    387e:	6f 91       	pop	r22
    3880:	5f 91       	pop	r21
    3882:	4f 91       	pop	r20
    3884:	3f 91       	pop	r19
    3886:	2f 91       	pop	r18
    3888:	0f 90       	pop	r0
    388a:	0b be       	out	0x3b, r0	; 59
    388c:	0f 90       	pop	r0
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	0f 90       	pop	r0
    3892:	1f 90       	pop	r1
    3894:	18 95       	reti

00003896 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    3896:	1f 92       	push	r1
    3898:	0f 92       	push	r0
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	0f 92       	push	r0
    389e:	11 24       	eor	r1, r1
    38a0:	0b b6       	in	r0, 0x3b	; 59
    38a2:	0f 92       	push	r0
    38a4:	2f 93       	push	r18
    38a6:	3f 93       	push	r19
    38a8:	4f 93       	push	r20
    38aa:	5f 93       	push	r21
    38ac:	6f 93       	push	r22
    38ae:	7f 93       	push	r23
    38b0:	8f 93       	push	r24
    38b2:	9f 93       	push	r25
    38b4:	af 93       	push	r26
    38b6:	bf 93       	push	r27
    38b8:	ef 93       	push	r30
    38ba:	ff 93       	push	r31
    38bc:	e0 91 2c 23 	lds	r30, 0x232C
    38c0:	f0 91 2d 23 	lds	r31, 0x232D
    38c4:	30 97       	sbiw	r30, 0x00	; 0
    38c6:	29 f0       	breq	.+10     	; 0x38d2 <__vector_59+0x3c>
    38c8:	80 91 22 24 	lds	r24, 0x2422
    38cc:	90 91 23 24 	lds	r25, 0x2423
    38d0:	19 95       	eicall
    38d2:	ff 91       	pop	r31
    38d4:	ef 91       	pop	r30
    38d6:	bf 91       	pop	r27
    38d8:	af 91       	pop	r26
    38da:	9f 91       	pop	r25
    38dc:	8f 91       	pop	r24
    38de:	7f 91       	pop	r23
    38e0:	6f 91       	pop	r22
    38e2:	5f 91       	pop	r21
    38e4:	4f 91       	pop	r20
    38e6:	3f 91       	pop	r19
    38e8:	2f 91       	pop	r18
    38ea:	0f 90       	pop	r0
    38ec:	0b be       	out	0x3b, r0	; 59
    38ee:	0f 90       	pop	r0
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	0f 90       	pop	r0
    38f4:	1f 90       	pop	r1
    38f6:	18 95       	reti

000038f8 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    38f8:	1f 92       	push	r1
    38fa:	0f 92       	push	r0
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	0f 92       	push	r0
    3900:	11 24       	eor	r1, r1
    3902:	0b b6       	in	r0, 0x3b	; 59
    3904:	0f 92       	push	r0
    3906:	2f 93       	push	r18
    3908:	3f 93       	push	r19
    390a:	4f 93       	push	r20
    390c:	5f 93       	push	r21
    390e:	6f 93       	push	r22
    3910:	7f 93       	push	r23
    3912:	8f 93       	push	r24
    3914:	9f 93       	push	r25
    3916:	af 93       	push	r26
    3918:	bf 93       	push	r27
    391a:	ef 93       	push	r30
    391c:	ff 93       	push	r31
    391e:	e0 91 2e 23 	lds	r30, 0x232E
    3922:	f0 91 2f 23 	lds	r31, 0x232F
    3926:	30 97       	sbiw	r30, 0x00	; 0
    3928:	29 f0       	breq	.+10     	; 0x3934 <__vector_60+0x3c>
    392a:	80 91 24 24 	lds	r24, 0x2424
    392e:	90 91 25 24 	lds	r25, 0x2425
    3932:	19 95       	eicall
    3934:	ff 91       	pop	r31
    3936:	ef 91       	pop	r30
    3938:	bf 91       	pop	r27
    393a:	af 91       	pop	r26
    393c:	9f 91       	pop	r25
    393e:	8f 91       	pop	r24
    3940:	7f 91       	pop	r23
    3942:	6f 91       	pop	r22
    3944:	5f 91       	pop	r21
    3946:	4f 91       	pop	r20
    3948:	3f 91       	pop	r19
    394a:	2f 91       	pop	r18
    394c:	0f 90       	pop	r0
    394e:	0b be       	out	0x3b, r0	; 59
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    395a:	1f 92       	push	r1
    395c:	0f 92       	push	r0
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	0f 92       	push	r0
    3962:	11 24       	eor	r1, r1
    3964:	0b b6       	in	r0, 0x3b	; 59
    3966:	0f 92       	push	r0
    3968:	2f 93       	push	r18
    396a:	3f 93       	push	r19
    396c:	4f 93       	push	r20
    396e:	5f 93       	push	r21
    3970:	6f 93       	push	r22
    3972:	7f 93       	push	r23
    3974:	8f 93       	push	r24
    3976:	9f 93       	push	r25
    3978:	af 93       	push	r26
    397a:	bf 93       	push	r27
    397c:	ef 93       	push	r30
    397e:	ff 93       	push	r31
    3980:	e0 91 30 23 	lds	r30, 0x2330
    3984:	f0 91 31 23 	lds	r31, 0x2331
    3988:	30 97       	sbiw	r30, 0x00	; 0
    398a:	29 f0       	breq	.+10     	; 0x3996 <__vector_61+0x3c>
    398c:	80 91 26 24 	lds	r24, 0x2426
    3990:	90 91 27 24 	lds	r25, 0x2427
    3994:	19 95       	eicall
    3996:	ff 91       	pop	r31
    3998:	ef 91       	pop	r30
    399a:	bf 91       	pop	r27
    399c:	af 91       	pop	r26
    399e:	9f 91       	pop	r25
    39a0:	8f 91       	pop	r24
    39a2:	7f 91       	pop	r23
    39a4:	6f 91       	pop	r22
    39a6:	5f 91       	pop	r21
    39a8:	4f 91       	pop	r20
    39aa:	3f 91       	pop	r19
    39ac:	2f 91       	pop	r18
    39ae:	0f 90       	pop	r0
    39b0:	0b be       	out	0x3b, r0	; 59
    39b2:	0f 90       	pop	r0
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	0f 90       	pop	r0
    39b8:	1f 90       	pop	r1
    39ba:	18 95       	reti

000039bc <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    39bc:	1f 92       	push	r1
    39be:	0f 92       	push	r0
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	0f 92       	push	r0
    39c4:	11 24       	eor	r1, r1
    39c6:	0b b6       	in	r0, 0x3b	; 59
    39c8:	0f 92       	push	r0
    39ca:	2f 93       	push	r18
    39cc:	3f 93       	push	r19
    39ce:	4f 93       	push	r20
    39d0:	5f 93       	push	r21
    39d2:	6f 93       	push	r22
    39d4:	7f 93       	push	r23
    39d6:	8f 93       	push	r24
    39d8:	9f 93       	push	r25
    39da:	af 93       	push	r26
    39dc:	bf 93       	push	r27
    39de:	ef 93       	push	r30
    39e0:	ff 93       	push	r31
    39e2:	e0 91 32 23 	lds	r30, 0x2332
    39e6:	f0 91 33 23 	lds	r31, 0x2333
    39ea:	30 97       	sbiw	r30, 0x00	; 0
    39ec:	29 f0       	breq	.+10     	; 0x39f8 <__vector_62+0x3c>
    39ee:	80 91 28 24 	lds	r24, 0x2428
    39f2:	90 91 29 24 	lds	r25, 0x2429
    39f6:	19 95       	eicall
    39f8:	ff 91       	pop	r31
    39fa:	ef 91       	pop	r30
    39fc:	bf 91       	pop	r27
    39fe:	af 91       	pop	r26
    3a00:	9f 91       	pop	r25
    3a02:	8f 91       	pop	r24
    3a04:	7f 91       	pop	r23
    3a06:	6f 91       	pop	r22
    3a08:	5f 91       	pop	r21
    3a0a:	4f 91       	pop	r20
    3a0c:	3f 91       	pop	r19
    3a0e:	2f 91       	pop	r18
    3a10:	0f 90       	pop	r0
    3a12:	0b be       	out	0x3b, r0	; 59
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti

00003a1e <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	0b b6       	in	r0, 0x3b	; 59
    3a2a:	0f 92       	push	r0
    3a2c:	2f 93       	push	r18
    3a2e:	3f 93       	push	r19
    3a30:	4f 93       	push	r20
    3a32:	5f 93       	push	r21
    3a34:	6f 93       	push	r22
    3a36:	7f 93       	push	r23
    3a38:	8f 93       	push	r24
    3a3a:	9f 93       	push	r25
    3a3c:	af 93       	push	r26
    3a3e:	bf 93       	push	r27
    3a40:	ef 93       	push	r30
    3a42:	ff 93       	push	r31
    3a44:	e0 91 34 23 	lds	r30, 0x2334
    3a48:	f0 91 35 23 	lds	r31, 0x2335
    3a4c:	30 97       	sbiw	r30, 0x00	; 0
    3a4e:	29 f0       	breq	.+10     	; 0x3a5a <__vector_63+0x3c>
    3a50:	80 91 2a 24 	lds	r24, 0x242A
    3a54:	90 91 2b 24 	lds	r25, 0x242B
    3a58:	19 95       	eicall
    3a5a:	ff 91       	pop	r31
    3a5c:	ef 91       	pop	r30
    3a5e:	bf 91       	pop	r27
    3a60:	af 91       	pop	r26
    3a62:	9f 91       	pop	r25
    3a64:	8f 91       	pop	r24
    3a66:	7f 91       	pop	r23
    3a68:	6f 91       	pop	r22
    3a6a:	5f 91       	pop	r21
    3a6c:	4f 91       	pop	r20
    3a6e:	3f 91       	pop	r19
    3a70:	2f 91       	pop	r18
    3a72:	0f 90       	pop	r0
    3a74:	0b be       	out	0x3b, r0	; 59
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	0f 90       	pop	r0
    3a7c:	1f 90       	pop	r1
    3a7e:	18 95       	reti

00003a80 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3a80:	1f 92       	push	r1
    3a82:	0f 92       	push	r0
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	0f 92       	push	r0
    3a88:	11 24       	eor	r1, r1
    3a8a:	0b b6       	in	r0, 0x3b	; 59
    3a8c:	0f 92       	push	r0
    3a8e:	2f 93       	push	r18
    3a90:	3f 93       	push	r19
    3a92:	4f 93       	push	r20
    3a94:	5f 93       	push	r21
    3a96:	6f 93       	push	r22
    3a98:	7f 93       	push	r23
    3a9a:	8f 93       	push	r24
    3a9c:	9f 93       	push	r25
    3a9e:	af 93       	push	r26
    3aa0:	bf 93       	push	r27
    3aa2:	ef 93       	push	r30
    3aa4:	ff 93       	push	r31
    3aa6:	e0 91 36 23 	lds	r30, 0x2336
    3aaa:	f0 91 37 23 	lds	r31, 0x2337
    3aae:	30 97       	sbiw	r30, 0x00	; 0
    3ab0:	29 f0       	breq	.+10     	; 0x3abc <__vector_64+0x3c>
    3ab2:	80 91 2c 24 	lds	r24, 0x242C
    3ab6:	90 91 2d 24 	lds	r25, 0x242D
    3aba:	19 95       	eicall
    3abc:	ff 91       	pop	r31
    3abe:	ef 91       	pop	r30
    3ac0:	bf 91       	pop	r27
    3ac2:	af 91       	pop	r26
    3ac4:	9f 91       	pop	r25
    3ac6:	8f 91       	pop	r24
    3ac8:	7f 91       	pop	r23
    3aca:	6f 91       	pop	r22
    3acc:	5f 91       	pop	r21
    3ace:	4f 91       	pop	r20
    3ad0:	3f 91       	pop	r19
    3ad2:	2f 91       	pop	r18
    3ad4:	0f 90       	pop	r0
    3ad6:	0b be       	out	0x3b, r0	; 59
    3ad8:	0f 90       	pop	r0
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	0f 90       	pop	r0
    3ade:	1f 90       	pop	r1
    3ae0:	18 95       	reti

00003ae2 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	0b b6       	in	r0, 0x3b	; 59
    3aee:	0f 92       	push	r0
    3af0:	2f 93       	push	r18
    3af2:	3f 93       	push	r19
    3af4:	4f 93       	push	r20
    3af6:	5f 93       	push	r21
    3af8:	6f 93       	push	r22
    3afa:	7f 93       	push	r23
    3afc:	8f 93       	push	r24
    3afe:	9f 93       	push	r25
    3b00:	af 93       	push	r26
    3b02:	bf 93       	push	r27
    3b04:	ef 93       	push	r30
    3b06:	ff 93       	push	r31
    3b08:	e0 91 38 23 	lds	r30, 0x2338
    3b0c:	f0 91 39 23 	lds	r31, 0x2339
    3b10:	30 97       	sbiw	r30, 0x00	; 0
    3b12:	29 f0       	breq	.+10     	; 0x3b1e <__vector_65+0x3c>
    3b14:	80 91 2e 24 	lds	r24, 0x242E
    3b18:	90 91 2f 24 	lds	r25, 0x242F
    3b1c:	19 95       	eicall
    3b1e:	ff 91       	pop	r31
    3b20:	ef 91       	pop	r30
    3b22:	bf 91       	pop	r27
    3b24:	af 91       	pop	r26
    3b26:	9f 91       	pop	r25
    3b28:	8f 91       	pop	r24
    3b2a:	7f 91       	pop	r23
    3b2c:	6f 91       	pop	r22
    3b2e:	5f 91       	pop	r21
    3b30:	4f 91       	pop	r20
    3b32:	3f 91       	pop	r19
    3b34:	2f 91       	pop	r18
    3b36:	0f 90       	pop	r0
    3b38:	0b be       	out	0x3b, r0	; 59
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	0f 90       	pop	r0
    3b40:	1f 90       	pop	r1
    3b42:	18 95       	reti

00003b44 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3b44:	1f 92       	push	r1
    3b46:	0f 92       	push	r0
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	0f 92       	push	r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	0b b6       	in	r0, 0x3b	; 59
    3b50:	0f 92       	push	r0
    3b52:	2f 93       	push	r18
    3b54:	3f 93       	push	r19
    3b56:	4f 93       	push	r20
    3b58:	5f 93       	push	r21
    3b5a:	6f 93       	push	r22
    3b5c:	7f 93       	push	r23
    3b5e:	8f 93       	push	r24
    3b60:	9f 93       	push	r25
    3b62:	af 93       	push	r26
    3b64:	bf 93       	push	r27
    3b66:	ef 93       	push	r30
    3b68:	ff 93       	push	r31
    3b6a:	e0 91 3a 23 	lds	r30, 0x233A
    3b6e:	f0 91 3b 23 	lds	r31, 0x233B
    3b72:	30 97       	sbiw	r30, 0x00	; 0
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <__vector_66+0x3c>
    3b76:	80 91 30 24 	lds	r24, 0x2430
    3b7a:	90 91 31 24 	lds	r25, 0x2431
    3b7e:	19 95       	eicall
    3b80:	ff 91       	pop	r31
    3b82:	ef 91       	pop	r30
    3b84:	bf 91       	pop	r27
    3b86:	af 91       	pop	r26
    3b88:	9f 91       	pop	r25
    3b8a:	8f 91       	pop	r24
    3b8c:	7f 91       	pop	r23
    3b8e:	6f 91       	pop	r22
    3b90:	5f 91       	pop	r21
    3b92:	4f 91       	pop	r20
    3b94:	3f 91       	pop	r19
    3b96:	2f 91       	pop	r18
    3b98:	0f 90       	pop	r0
    3b9a:	0b be       	out	0x3b, r0	; 59
    3b9c:	0f 90       	pop	r0
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	0f 90       	pop	r0
    3ba2:	1f 90       	pop	r1
    3ba4:	18 95       	reti

00003ba6 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3ba6:	1f 92       	push	r1
    3ba8:	0f 92       	push	r0
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	0f 92       	push	r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	0b b6       	in	r0, 0x3b	; 59
    3bb2:	0f 92       	push	r0
    3bb4:	2f 93       	push	r18
    3bb6:	3f 93       	push	r19
    3bb8:	4f 93       	push	r20
    3bba:	5f 93       	push	r21
    3bbc:	6f 93       	push	r22
    3bbe:	7f 93       	push	r23
    3bc0:	8f 93       	push	r24
    3bc2:	9f 93       	push	r25
    3bc4:	af 93       	push	r26
    3bc6:	bf 93       	push	r27
    3bc8:	ef 93       	push	r30
    3bca:	ff 93       	push	r31
    3bcc:	e0 91 3c 23 	lds	r30, 0x233C
    3bd0:	f0 91 3d 23 	lds	r31, 0x233D
    3bd4:	30 97       	sbiw	r30, 0x00	; 0
    3bd6:	29 f0       	breq	.+10     	; 0x3be2 <__vector_67+0x3c>
    3bd8:	80 91 32 24 	lds	r24, 0x2432
    3bdc:	90 91 33 24 	lds	r25, 0x2433
    3be0:	19 95       	eicall
    3be2:	ff 91       	pop	r31
    3be4:	ef 91       	pop	r30
    3be6:	bf 91       	pop	r27
    3be8:	af 91       	pop	r26
    3bea:	9f 91       	pop	r25
    3bec:	8f 91       	pop	r24
    3bee:	7f 91       	pop	r23
    3bf0:	6f 91       	pop	r22
    3bf2:	5f 91       	pop	r21
    3bf4:	4f 91       	pop	r20
    3bf6:	3f 91       	pop	r19
    3bf8:	2f 91       	pop	r18
    3bfa:	0f 90       	pop	r0
    3bfc:	0b be       	out	0x3b, r0	; 59
    3bfe:	0f 90       	pop	r0
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	0f 90       	pop	r0
    3c04:	1f 90       	pop	r1
    3c06:	18 95       	reti

00003c08 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3c08:	1f 92       	push	r1
    3c0a:	0f 92       	push	r0
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	0f 92       	push	r0
    3c10:	11 24       	eor	r1, r1
    3c12:	0b b6       	in	r0, 0x3b	; 59
    3c14:	0f 92       	push	r0
    3c16:	2f 93       	push	r18
    3c18:	3f 93       	push	r19
    3c1a:	4f 93       	push	r20
    3c1c:	5f 93       	push	r21
    3c1e:	6f 93       	push	r22
    3c20:	7f 93       	push	r23
    3c22:	8f 93       	push	r24
    3c24:	9f 93       	push	r25
    3c26:	af 93       	push	r26
    3c28:	bf 93       	push	r27
    3c2a:	ef 93       	push	r30
    3c2c:	ff 93       	push	r31
    3c2e:	e0 91 3e 23 	lds	r30, 0x233E
    3c32:	f0 91 3f 23 	lds	r31, 0x233F
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	29 f0       	breq	.+10     	; 0x3c44 <__vector_68+0x3c>
    3c3a:	80 91 34 24 	lds	r24, 0x2434
    3c3e:	90 91 35 24 	lds	r25, 0x2435
    3c42:	19 95       	eicall
    3c44:	ff 91       	pop	r31
    3c46:	ef 91       	pop	r30
    3c48:	bf 91       	pop	r27
    3c4a:	af 91       	pop	r26
    3c4c:	9f 91       	pop	r25
    3c4e:	8f 91       	pop	r24
    3c50:	7f 91       	pop	r23
    3c52:	6f 91       	pop	r22
    3c54:	5f 91       	pop	r21
    3c56:	4f 91       	pop	r20
    3c58:	3f 91       	pop	r19
    3c5a:	2f 91       	pop	r18
    3c5c:	0f 90       	pop	r0
    3c5e:	0b be       	out	0x3b, r0	; 59
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f 90       	pop	r0
    3c66:	1f 90       	pop	r1
    3c68:	18 95       	reti

00003c6a <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3c6a:	1f 92       	push	r1
    3c6c:	0f 92       	push	r0
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	0f 92       	push	r0
    3c72:	11 24       	eor	r1, r1
    3c74:	0b b6       	in	r0, 0x3b	; 59
    3c76:	0f 92       	push	r0
    3c78:	2f 93       	push	r18
    3c7a:	3f 93       	push	r19
    3c7c:	4f 93       	push	r20
    3c7e:	5f 93       	push	r21
    3c80:	6f 93       	push	r22
    3c82:	7f 93       	push	r23
    3c84:	8f 93       	push	r24
    3c86:	9f 93       	push	r25
    3c88:	af 93       	push	r26
    3c8a:	bf 93       	push	r27
    3c8c:	ef 93       	push	r30
    3c8e:	ff 93       	push	r31
    3c90:	e0 91 40 23 	lds	r30, 0x2340
    3c94:	f0 91 41 23 	lds	r31, 0x2341
    3c98:	30 97       	sbiw	r30, 0x00	; 0
    3c9a:	29 f0       	breq	.+10     	; 0x3ca6 <__vector_69+0x3c>
    3c9c:	80 91 36 24 	lds	r24, 0x2436
    3ca0:	90 91 37 24 	lds	r25, 0x2437
    3ca4:	19 95       	eicall
    3ca6:	ff 91       	pop	r31
    3ca8:	ef 91       	pop	r30
    3caa:	bf 91       	pop	r27
    3cac:	af 91       	pop	r26
    3cae:	9f 91       	pop	r25
    3cb0:	8f 91       	pop	r24
    3cb2:	7f 91       	pop	r23
    3cb4:	6f 91       	pop	r22
    3cb6:	5f 91       	pop	r21
    3cb8:	4f 91       	pop	r20
    3cba:	3f 91       	pop	r19
    3cbc:	2f 91       	pop	r18
    3cbe:	0f 90       	pop	r0
    3cc0:	0b be       	out	0x3b, r0	; 59
    3cc2:	0f 90       	pop	r0
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	0f 90       	pop	r0
    3cc8:	1f 90       	pop	r1
    3cca:	18 95       	reti

00003ccc <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3ccc:	1f 92       	push	r1
    3cce:	0f 92       	push	r0
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	0f 92       	push	r0
    3cd4:	11 24       	eor	r1, r1
    3cd6:	0b b6       	in	r0, 0x3b	; 59
    3cd8:	0f 92       	push	r0
    3cda:	2f 93       	push	r18
    3cdc:	3f 93       	push	r19
    3cde:	4f 93       	push	r20
    3ce0:	5f 93       	push	r21
    3ce2:	6f 93       	push	r22
    3ce4:	7f 93       	push	r23
    3ce6:	8f 93       	push	r24
    3ce8:	9f 93       	push	r25
    3cea:	af 93       	push	r26
    3cec:	bf 93       	push	r27
    3cee:	ef 93       	push	r30
    3cf0:	ff 93       	push	r31
    3cf2:	e0 91 42 23 	lds	r30, 0x2342
    3cf6:	f0 91 43 23 	lds	r31, 0x2343
    3cfa:	30 97       	sbiw	r30, 0x00	; 0
    3cfc:	29 f0       	breq	.+10     	; 0x3d08 <__vector_70+0x3c>
    3cfe:	80 91 38 24 	lds	r24, 0x2438
    3d02:	90 91 39 24 	lds	r25, 0x2439
    3d06:	19 95       	eicall
    3d08:	ff 91       	pop	r31
    3d0a:	ef 91       	pop	r30
    3d0c:	bf 91       	pop	r27
    3d0e:	af 91       	pop	r26
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	0f 90       	pop	r0
    3d22:	0b be       	out	0x3b, r0	; 59
    3d24:	0f 90       	pop	r0
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	0f 90       	pop	r0
    3d2a:	1f 90       	pop	r1
    3d2c:	18 95       	reti

00003d2e <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3d2e:	1f 92       	push	r1
    3d30:	0f 92       	push	r0
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	0f 92       	push	r0
    3d36:	11 24       	eor	r1, r1
    3d38:	0b b6       	in	r0, 0x3b	; 59
    3d3a:	0f 92       	push	r0
    3d3c:	2f 93       	push	r18
    3d3e:	3f 93       	push	r19
    3d40:	4f 93       	push	r20
    3d42:	5f 93       	push	r21
    3d44:	6f 93       	push	r22
    3d46:	7f 93       	push	r23
    3d48:	8f 93       	push	r24
    3d4a:	9f 93       	push	r25
    3d4c:	af 93       	push	r26
    3d4e:	bf 93       	push	r27
    3d50:	ef 93       	push	r30
    3d52:	ff 93       	push	r31
    3d54:	e0 91 44 23 	lds	r30, 0x2344
    3d58:	f0 91 45 23 	lds	r31, 0x2345
    3d5c:	30 97       	sbiw	r30, 0x00	; 0
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <__vector_71+0x3c>
    3d60:	80 91 3a 24 	lds	r24, 0x243A
    3d64:	90 91 3b 24 	lds	r25, 0x243B
    3d68:	19 95       	eicall
    3d6a:	ff 91       	pop	r31
    3d6c:	ef 91       	pop	r30
    3d6e:	bf 91       	pop	r27
    3d70:	af 91       	pop	r26
    3d72:	9f 91       	pop	r25
    3d74:	8f 91       	pop	r24
    3d76:	7f 91       	pop	r23
    3d78:	6f 91       	pop	r22
    3d7a:	5f 91       	pop	r21
    3d7c:	4f 91       	pop	r20
    3d7e:	3f 91       	pop	r19
    3d80:	2f 91       	pop	r18
    3d82:	0f 90       	pop	r0
    3d84:	0b be       	out	0x3b, r0	; 59
    3d86:	0f 90       	pop	r0
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	0f 90       	pop	r0
    3d8c:	1f 90       	pop	r1
    3d8e:	18 95       	reti

00003d90 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3d90:	1f 92       	push	r1
    3d92:	0f 92       	push	r0
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	0f 92       	push	r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	0b b6       	in	r0, 0x3b	; 59
    3d9c:	0f 92       	push	r0
    3d9e:	2f 93       	push	r18
    3da0:	3f 93       	push	r19
    3da2:	4f 93       	push	r20
    3da4:	5f 93       	push	r21
    3da6:	6f 93       	push	r22
    3da8:	7f 93       	push	r23
    3daa:	8f 93       	push	r24
    3dac:	9f 93       	push	r25
    3dae:	af 93       	push	r26
    3db0:	bf 93       	push	r27
    3db2:	ef 93       	push	r30
    3db4:	ff 93       	push	r31
    3db6:	e0 91 46 23 	lds	r30, 0x2346
    3dba:	f0 91 47 23 	lds	r31, 0x2347
    3dbe:	30 97       	sbiw	r30, 0x00	; 0
    3dc0:	29 f0       	breq	.+10     	; 0x3dcc <__vector_72+0x3c>
    3dc2:	80 91 3c 24 	lds	r24, 0x243C
    3dc6:	90 91 3d 24 	lds	r25, 0x243D
    3dca:	19 95       	eicall
    3dcc:	ff 91       	pop	r31
    3dce:	ef 91       	pop	r30
    3dd0:	bf 91       	pop	r27
    3dd2:	af 91       	pop	r26
    3dd4:	9f 91       	pop	r25
    3dd6:	8f 91       	pop	r24
    3dd8:	7f 91       	pop	r23
    3dda:	6f 91       	pop	r22
    3ddc:	5f 91       	pop	r21
    3dde:	4f 91       	pop	r20
    3de0:	3f 91       	pop	r19
    3de2:	2f 91       	pop	r18
    3de4:	0f 90       	pop	r0
    3de6:	0b be       	out	0x3b, r0	; 59
    3de8:	0f 90       	pop	r0
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	0f 90       	pop	r0
    3dee:	1f 90       	pop	r1
    3df0:	18 95       	reti

00003df2 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3df2:	1f 92       	push	r1
    3df4:	0f 92       	push	r0
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	0f 92       	push	r0
    3dfa:	11 24       	eor	r1, r1
    3dfc:	0b b6       	in	r0, 0x3b	; 59
    3dfe:	0f 92       	push	r0
    3e00:	2f 93       	push	r18
    3e02:	3f 93       	push	r19
    3e04:	4f 93       	push	r20
    3e06:	5f 93       	push	r21
    3e08:	6f 93       	push	r22
    3e0a:	7f 93       	push	r23
    3e0c:	8f 93       	push	r24
    3e0e:	9f 93       	push	r25
    3e10:	af 93       	push	r26
    3e12:	bf 93       	push	r27
    3e14:	ef 93       	push	r30
    3e16:	ff 93       	push	r31
    3e18:	e0 91 48 23 	lds	r30, 0x2348
    3e1c:	f0 91 49 23 	lds	r31, 0x2349
    3e20:	30 97       	sbiw	r30, 0x00	; 0
    3e22:	29 f0       	breq	.+10     	; 0x3e2e <__vector_73+0x3c>
    3e24:	80 91 3e 24 	lds	r24, 0x243E
    3e28:	90 91 3f 24 	lds	r25, 0x243F
    3e2c:	19 95       	eicall
    3e2e:	ff 91       	pop	r31
    3e30:	ef 91       	pop	r30
    3e32:	bf 91       	pop	r27
    3e34:	af 91       	pop	r26
    3e36:	9f 91       	pop	r25
    3e38:	8f 91       	pop	r24
    3e3a:	7f 91       	pop	r23
    3e3c:	6f 91       	pop	r22
    3e3e:	5f 91       	pop	r21
    3e40:	4f 91       	pop	r20
    3e42:	3f 91       	pop	r19
    3e44:	2f 91       	pop	r18
    3e46:	0f 90       	pop	r0
    3e48:	0b be       	out	0x3b, r0	; 59
    3e4a:	0f 90       	pop	r0
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	0f 90       	pop	r0
    3e50:	1f 90       	pop	r1
    3e52:	18 95       	reti

00003e54 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3e54:	1f 92       	push	r1
    3e56:	0f 92       	push	r0
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	0f 92       	push	r0
    3e5c:	11 24       	eor	r1, r1
    3e5e:	0b b6       	in	r0, 0x3b	; 59
    3e60:	0f 92       	push	r0
    3e62:	2f 93       	push	r18
    3e64:	3f 93       	push	r19
    3e66:	4f 93       	push	r20
    3e68:	5f 93       	push	r21
    3e6a:	6f 93       	push	r22
    3e6c:	7f 93       	push	r23
    3e6e:	8f 93       	push	r24
    3e70:	9f 93       	push	r25
    3e72:	af 93       	push	r26
    3e74:	bf 93       	push	r27
    3e76:	ef 93       	push	r30
    3e78:	ff 93       	push	r31
    3e7a:	e0 91 4a 23 	lds	r30, 0x234A
    3e7e:	f0 91 4b 23 	lds	r31, 0x234B
    3e82:	30 97       	sbiw	r30, 0x00	; 0
    3e84:	29 f0       	breq	.+10     	; 0x3e90 <__vector_74+0x3c>
    3e86:	80 91 40 24 	lds	r24, 0x2440
    3e8a:	90 91 41 24 	lds	r25, 0x2441
    3e8e:	19 95       	eicall
    3e90:	ff 91       	pop	r31
    3e92:	ef 91       	pop	r30
    3e94:	bf 91       	pop	r27
    3e96:	af 91       	pop	r26
    3e98:	9f 91       	pop	r25
    3e9a:	8f 91       	pop	r24
    3e9c:	7f 91       	pop	r23
    3e9e:	6f 91       	pop	r22
    3ea0:	5f 91       	pop	r21
    3ea2:	4f 91       	pop	r20
    3ea4:	3f 91       	pop	r19
    3ea6:	2f 91       	pop	r18
    3ea8:	0f 90       	pop	r0
    3eaa:	0b be       	out	0x3b, r0	; 59
    3eac:	0f 90       	pop	r0
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	0f 90       	pop	r0
    3eb2:	1f 90       	pop	r1
    3eb4:	18 95       	reti

00003eb6 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3eb6:	1f 92       	push	r1
    3eb8:	0f 92       	push	r0
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	0f 92       	push	r0
    3ebe:	11 24       	eor	r1, r1
    3ec0:	0b b6       	in	r0, 0x3b	; 59
    3ec2:	0f 92       	push	r0
    3ec4:	2f 93       	push	r18
    3ec6:	3f 93       	push	r19
    3ec8:	4f 93       	push	r20
    3eca:	5f 93       	push	r21
    3ecc:	6f 93       	push	r22
    3ece:	7f 93       	push	r23
    3ed0:	8f 93       	push	r24
    3ed2:	9f 93       	push	r25
    3ed4:	af 93       	push	r26
    3ed6:	bf 93       	push	r27
    3ed8:	ef 93       	push	r30
    3eda:	ff 93       	push	r31
    3edc:	e0 91 50 23 	lds	r30, 0x2350
    3ee0:	f0 91 51 23 	lds	r31, 0x2351
    3ee4:	30 97       	sbiw	r30, 0x00	; 0
    3ee6:	29 f0       	breq	.+10     	; 0x3ef2 <__vector_77+0x3c>
    3ee8:	80 91 46 24 	lds	r24, 0x2446
    3eec:	90 91 47 24 	lds	r25, 0x2447
    3ef0:	19 95       	eicall
    3ef2:	ff 91       	pop	r31
    3ef4:	ef 91       	pop	r30
    3ef6:	bf 91       	pop	r27
    3ef8:	af 91       	pop	r26
    3efa:	9f 91       	pop	r25
    3efc:	8f 91       	pop	r24
    3efe:	7f 91       	pop	r23
    3f00:	6f 91       	pop	r22
    3f02:	5f 91       	pop	r21
    3f04:	4f 91       	pop	r20
    3f06:	3f 91       	pop	r19
    3f08:	2f 91       	pop	r18
    3f0a:	0f 90       	pop	r0
    3f0c:	0b be       	out	0x3b, r0	; 59
    3f0e:	0f 90       	pop	r0
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	0f 90       	pop	r0
    3f14:	1f 90       	pop	r1
    3f16:	18 95       	reti

00003f18 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3f18:	1f 92       	push	r1
    3f1a:	0f 92       	push	r0
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	0f 92       	push	r0
    3f20:	11 24       	eor	r1, r1
    3f22:	0b b6       	in	r0, 0x3b	; 59
    3f24:	0f 92       	push	r0
    3f26:	2f 93       	push	r18
    3f28:	3f 93       	push	r19
    3f2a:	4f 93       	push	r20
    3f2c:	5f 93       	push	r21
    3f2e:	6f 93       	push	r22
    3f30:	7f 93       	push	r23
    3f32:	8f 93       	push	r24
    3f34:	9f 93       	push	r25
    3f36:	af 93       	push	r26
    3f38:	bf 93       	push	r27
    3f3a:	ef 93       	push	r30
    3f3c:	ff 93       	push	r31
    3f3e:	e0 91 52 23 	lds	r30, 0x2352
    3f42:	f0 91 53 23 	lds	r31, 0x2353
    3f46:	30 97       	sbiw	r30, 0x00	; 0
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <__vector_78+0x3c>
    3f4a:	80 91 48 24 	lds	r24, 0x2448
    3f4e:	90 91 49 24 	lds	r25, 0x2449
    3f52:	19 95       	eicall
    3f54:	ff 91       	pop	r31
    3f56:	ef 91       	pop	r30
    3f58:	bf 91       	pop	r27
    3f5a:	af 91       	pop	r26
    3f5c:	9f 91       	pop	r25
    3f5e:	8f 91       	pop	r24
    3f60:	7f 91       	pop	r23
    3f62:	6f 91       	pop	r22
    3f64:	5f 91       	pop	r21
    3f66:	4f 91       	pop	r20
    3f68:	3f 91       	pop	r19
    3f6a:	2f 91       	pop	r18
    3f6c:	0f 90       	pop	r0
    3f6e:	0b be       	out	0x3b, r0	; 59
    3f70:	0f 90       	pop	r0
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	0f 90       	pop	r0
    3f76:	1f 90       	pop	r1
    3f78:	18 95       	reti

00003f7a <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3f7a:	1f 92       	push	r1
    3f7c:	0f 92       	push	r0
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	0f 92       	push	r0
    3f82:	11 24       	eor	r1, r1
    3f84:	0b b6       	in	r0, 0x3b	; 59
    3f86:	0f 92       	push	r0
    3f88:	2f 93       	push	r18
    3f8a:	3f 93       	push	r19
    3f8c:	4f 93       	push	r20
    3f8e:	5f 93       	push	r21
    3f90:	6f 93       	push	r22
    3f92:	7f 93       	push	r23
    3f94:	8f 93       	push	r24
    3f96:	9f 93       	push	r25
    3f98:	af 93       	push	r26
    3f9a:	bf 93       	push	r27
    3f9c:	ef 93       	push	r30
    3f9e:	ff 93       	push	r31
    3fa0:	e0 91 54 23 	lds	r30, 0x2354
    3fa4:	f0 91 55 23 	lds	r31, 0x2355
    3fa8:	30 97       	sbiw	r30, 0x00	; 0
    3faa:	29 f0       	breq	.+10     	; 0x3fb6 <__vector_79+0x3c>
    3fac:	80 91 4a 24 	lds	r24, 0x244A
    3fb0:	90 91 4b 24 	lds	r25, 0x244B
    3fb4:	19 95       	eicall
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	9f 91       	pop	r25
    3fc0:	8f 91       	pop	r24
    3fc2:	7f 91       	pop	r23
    3fc4:	6f 91       	pop	r22
    3fc6:	5f 91       	pop	r21
    3fc8:	4f 91       	pop	r20
    3fca:	3f 91       	pop	r19
    3fcc:	2f 91       	pop	r18
    3fce:	0f 90       	pop	r0
    3fd0:	0b be       	out	0x3b, r0	; 59
    3fd2:	0f 90       	pop	r0
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	0f 90       	pop	r0
    3fd8:	1f 90       	pop	r1
    3fda:	18 95       	reti

00003fdc <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    3fdc:	1f 92       	push	r1
    3fde:	0f 92       	push	r0
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	0f 92       	push	r0
    3fe4:	11 24       	eor	r1, r1
    3fe6:	0b b6       	in	r0, 0x3b	; 59
    3fe8:	0f 92       	push	r0
    3fea:	2f 93       	push	r18
    3fec:	3f 93       	push	r19
    3fee:	4f 93       	push	r20
    3ff0:	5f 93       	push	r21
    3ff2:	6f 93       	push	r22
    3ff4:	7f 93       	push	r23
    3ff6:	8f 93       	push	r24
    3ff8:	9f 93       	push	r25
    3ffa:	af 93       	push	r26
    3ffc:	bf 93       	push	r27
    3ffe:	ef 93       	push	r30
    4000:	ff 93       	push	r31
    4002:	e0 91 56 23 	lds	r30, 0x2356
    4006:	f0 91 57 23 	lds	r31, 0x2357
    400a:	30 97       	sbiw	r30, 0x00	; 0
    400c:	29 f0       	breq	.+10     	; 0x4018 <__stack+0x19>
    400e:	80 91 4c 24 	lds	r24, 0x244C
    4012:	90 91 4d 24 	lds	r25, 0x244D
    4016:	19 95       	eicall
    4018:	ff 91       	pop	r31
    401a:	ef 91       	pop	r30
    401c:	bf 91       	pop	r27
    401e:	af 91       	pop	r26
    4020:	9f 91       	pop	r25
    4022:	8f 91       	pop	r24
    4024:	7f 91       	pop	r23
    4026:	6f 91       	pop	r22
    4028:	5f 91       	pop	r21
    402a:	4f 91       	pop	r20
    402c:	3f 91       	pop	r19
    402e:	2f 91       	pop	r18
    4030:	0f 90       	pop	r0
    4032:	0b be       	out	0x3b, r0	; 59
    4034:	0f 90       	pop	r0
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	0f 90       	pop	r0
    403a:	1f 90       	pop	r1
    403c:	18 95       	reti

0000403e <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    403e:	1f 92       	push	r1
    4040:	0f 92       	push	r0
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	0f 92       	push	r0
    4046:	11 24       	eor	r1, r1
    4048:	0b b6       	in	r0, 0x3b	; 59
    404a:	0f 92       	push	r0
    404c:	2f 93       	push	r18
    404e:	3f 93       	push	r19
    4050:	4f 93       	push	r20
    4052:	5f 93       	push	r21
    4054:	6f 93       	push	r22
    4056:	7f 93       	push	r23
    4058:	8f 93       	push	r24
    405a:	9f 93       	push	r25
    405c:	af 93       	push	r26
    405e:	bf 93       	push	r27
    4060:	ef 93       	push	r30
    4062:	ff 93       	push	r31
    4064:	e0 91 58 23 	lds	r30, 0x2358
    4068:	f0 91 59 23 	lds	r31, 0x2359
    406c:	30 97       	sbiw	r30, 0x00	; 0
    406e:	29 f0       	breq	.+10     	; 0x407a <__vector_81+0x3c>
    4070:	80 91 4e 24 	lds	r24, 0x244E
    4074:	90 91 4f 24 	lds	r25, 0x244F
    4078:	19 95       	eicall
    407a:	ff 91       	pop	r31
    407c:	ef 91       	pop	r30
    407e:	bf 91       	pop	r27
    4080:	af 91       	pop	r26
    4082:	9f 91       	pop	r25
    4084:	8f 91       	pop	r24
    4086:	7f 91       	pop	r23
    4088:	6f 91       	pop	r22
    408a:	5f 91       	pop	r21
    408c:	4f 91       	pop	r20
    408e:	3f 91       	pop	r19
    4090:	2f 91       	pop	r18
    4092:	0f 90       	pop	r0
    4094:	0b be       	out	0x3b, r0	; 59
    4096:	0f 90       	pop	r0
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	0f 90       	pop	r0
    409c:	1f 90       	pop	r1
    409e:	18 95       	reti

000040a0 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    40a0:	1f 92       	push	r1
    40a2:	0f 92       	push	r0
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	0f 92       	push	r0
    40a8:	11 24       	eor	r1, r1
    40aa:	0b b6       	in	r0, 0x3b	; 59
    40ac:	0f 92       	push	r0
    40ae:	2f 93       	push	r18
    40b0:	3f 93       	push	r19
    40b2:	4f 93       	push	r20
    40b4:	5f 93       	push	r21
    40b6:	6f 93       	push	r22
    40b8:	7f 93       	push	r23
    40ba:	8f 93       	push	r24
    40bc:	9f 93       	push	r25
    40be:	af 93       	push	r26
    40c0:	bf 93       	push	r27
    40c2:	ef 93       	push	r30
    40c4:	ff 93       	push	r31
    40c6:	e0 91 5a 23 	lds	r30, 0x235A
    40ca:	f0 91 5b 23 	lds	r31, 0x235B
    40ce:	30 97       	sbiw	r30, 0x00	; 0
    40d0:	29 f0       	breq	.+10     	; 0x40dc <__vector_82+0x3c>
    40d2:	80 91 50 24 	lds	r24, 0x2450
    40d6:	90 91 51 24 	lds	r25, 0x2451
    40da:	19 95       	eicall
    40dc:	ff 91       	pop	r31
    40de:	ef 91       	pop	r30
    40e0:	bf 91       	pop	r27
    40e2:	af 91       	pop	r26
    40e4:	9f 91       	pop	r25
    40e6:	8f 91       	pop	r24
    40e8:	7f 91       	pop	r23
    40ea:	6f 91       	pop	r22
    40ec:	5f 91       	pop	r21
    40ee:	4f 91       	pop	r20
    40f0:	3f 91       	pop	r19
    40f2:	2f 91       	pop	r18
    40f4:	0f 90       	pop	r0
    40f6:	0b be       	out	0x3b, r0	; 59
    40f8:	0f 90       	pop	r0
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	0f 90       	pop	r0
    40fe:	1f 90       	pop	r1
    4100:	18 95       	reti

00004102 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    4102:	1f 92       	push	r1
    4104:	0f 92       	push	r0
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	0f 92       	push	r0
    410a:	11 24       	eor	r1, r1
    410c:	0b b6       	in	r0, 0x3b	; 59
    410e:	0f 92       	push	r0
    4110:	2f 93       	push	r18
    4112:	3f 93       	push	r19
    4114:	4f 93       	push	r20
    4116:	5f 93       	push	r21
    4118:	6f 93       	push	r22
    411a:	7f 93       	push	r23
    411c:	8f 93       	push	r24
    411e:	9f 93       	push	r25
    4120:	af 93       	push	r26
    4122:	bf 93       	push	r27
    4124:	ef 93       	push	r30
    4126:	ff 93       	push	r31
    4128:	e0 91 5c 23 	lds	r30, 0x235C
    412c:	f0 91 5d 23 	lds	r31, 0x235D
    4130:	30 97       	sbiw	r30, 0x00	; 0
    4132:	29 f0       	breq	.+10     	; 0x413e <__vector_83+0x3c>
    4134:	80 91 52 24 	lds	r24, 0x2452
    4138:	90 91 53 24 	lds	r25, 0x2453
    413c:	19 95       	eicall
    413e:	ff 91       	pop	r31
    4140:	ef 91       	pop	r30
    4142:	bf 91       	pop	r27
    4144:	af 91       	pop	r26
    4146:	9f 91       	pop	r25
    4148:	8f 91       	pop	r24
    414a:	7f 91       	pop	r23
    414c:	6f 91       	pop	r22
    414e:	5f 91       	pop	r21
    4150:	4f 91       	pop	r20
    4152:	3f 91       	pop	r19
    4154:	2f 91       	pop	r18
    4156:	0f 90       	pop	r0
    4158:	0b be       	out	0x3b, r0	; 59
    415a:	0f 90       	pop	r0
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	0f 90       	pop	r0
    4160:	1f 90       	pop	r1
    4162:	18 95       	reti

00004164 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    4164:	1f 92       	push	r1
    4166:	0f 92       	push	r0
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	0f 92       	push	r0
    416c:	11 24       	eor	r1, r1
    416e:	0b b6       	in	r0, 0x3b	; 59
    4170:	0f 92       	push	r0
    4172:	2f 93       	push	r18
    4174:	3f 93       	push	r19
    4176:	4f 93       	push	r20
    4178:	5f 93       	push	r21
    417a:	6f 93       	push	r22
    417c:	7f 93       	push	r23
    417e:	8f 93       	push	r24
    4180:	9f 93       	push	r25
    4182:	af 93       	push	r26
    4184:	bf 93       	push	r27
    4186:	ef 93       	push	r30
    4188:	ff 93       	push	r31
    418a:	e0 91 5e 23 	lds	r30, 0x235E
    418e:	f0 91 5f 23 	lds	r31, 0x235F
    4192:	30 97       	sbiw	r30, 0x00	; 0
    4194:	29 f0       	breq	.+10     	; 0x41a0 <__vector_84+0x3c>
    4196:	80 91 54 24 	lds	r24, 0x2454
    419a:	90 91 55 24 	lds	r25, 0x2455
    419e:	19 95       	eicall
    41a0:	ff 91       	pop	r31
    41a2:	ef 91       	pop	r30
    41a4:	bf 91       	pop	r27
    41a6:	af 91       	pop	r26
    41a8:	9f 91       	pop	r25
    41aa:	8f 91       	pop	r24
    41ac:	7f 91       	pop	r23
    41ae:	6f 91       	pop	r22
    41b0:	5f 91       	pop	r21
    41b2:	4f 91       	pop	r20
    41b4:	3f 91       	pop	r19
    41b6:	2f 91       	pop	r18
    41b8:	0f 90       	pop	r0
    41ba:	0b be       	out	0x3b, r0	; 59
    41bc:	0f 90       	pop	r0
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	0f 90       	pop	r0
    41c2:	1f 90       	pop	r1
    41c4:	18 95       	reti

000041c6 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    41c6:	1f 92       	push	r1
    41c8:	0f 92       	push	r0
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	0f 92       	push	r0
    41ce:	11 24       	eor	r1, r1
    41d0:	0b b6       	in	r0, 0x3b	; 59
    41d2:	0f 92       	push	r0
    41d4:	2f 93       	push	r18
    41d6:	3f 93       	push	r19
    41d8:	4f 93       	push	r20
    41da:	5f 93       	push	r21
    41dc:	6f 93       	push	r22
    41de:	7f 93       	push	r23
    41e0:	8f 93       	push	r24
    41e2:	9f 93       	push	r25
    41e4:	af 93       	push	r26
    41e6:	bf 93       	push	r27
    41e8:	ef 93       	push	r30
    41ea:	ff 93       	push	r31
    41ec:	e0 91 60 23 	lds	r30, 0x2360
    41f0:	f0 91 61 23 	lds	r31, 0x2361
    41f4:	30 97       	sbiw	r30, 0x00	; 0
    41f6:	29 f0       	breq	.+10     	; 0x4202 <__vector_85+0x3c>
    41f8:	80 91 56 24 	lds	r24, 0x2456
    41fc:	90 91 57 24 	lds	r25, 0x2457
    4200:	19 95       	eicall
    4202:	ff 91       	pop	r31
    4204:	ef 91       	pop	r30
    4206:	bf 91       	pop	r27
    4208:	af 91       	pop	r26
    420a:	9f 91       	pop	r25
    420c:	8f 91       	pop	r24
    420e:	7f 91       	pop	r23
    4210:	6f 91       	pop	r22
    4212:	5f 91       	pop	r21
    4214:	4f 91       	pop	r20
    4216:	3f 91       	pop	r19
    4218:	2f 91       	pop	r18
    421a:	0f 90       	pop	r0
    421c:	0b be       	out	0x3b, r0	; 59
    421e:	0f 90       	pop	r0
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	0f 90       	pop	r0
    4224:	1f 90       	pop	r1
    4226:	18 95       	reti

00004228 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    4228:	1f 92       	push	r1
    422a:	0f 92       	push	r0
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	0f 92       	push	r0
    4230:	11 24       	eor	r1, r1
    4232:	0b b6       	in	r0, 0x3b	; 59
    4234:	0f 92       	push	r0
    4236:	2f 93       	push	r18
    4238:	3f 93       	push	r19
    423a:	4f 93       	push	r20
    423c:	5f 93       	push	r21
    423e:	6f 93       	push	r22
    4240:	7f 93       	push	r23
    4242:	8f 93       	push	r24
    4244:	9f 93       	push	r25
    4246:	af 93       	push	r26
    4248:	bf 93       	push	r27
    424a:	ef 93       	push	r30
    424c:	ff 93       	push	r31
    424e:	e0 91 62 23 	lds	r30, 0x2362
    4252:	f0 91 63 23 	lds	r31, 0x2363
    4256:	30 97       	sbiw	r30, 0x00	; 0
    4258:	29 f0       	breq	.+10     	; 0x4264 <__vector_86+0x3c>
    425a:	80 91 58 24 	lds	r24, 0x2458
    425e:	90 91 59 24 	lds	r25, 0x2459
    4262:	19 95       	eicall
    4264:	ff 91       	pop	r31
    4266:	ef 91       	pop	r30
    4268:	bf 91       	pop	r27
    426a:	af 91       	pop	r26
    426c:	9f 91       	pop	r25
    426e:	8f 91       	pop	r24
    4270:	7f 91       	pop	r23
    4272:	6f 91       	pop	r22
    4274:	5f 91       	pop	r21
    4276:	4f 91       	pop	r20
    4278:	3f 91       	pop	r19
    427a:	2f 91       	pop	r18
    427c:	0f 90       	pop	r0
    427e:	0b be       	out	0x3b, r0	; 59
    4280:	0f 90       	pop	r0
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	0f 90       	pop	r0
    4286:	1f 90       	pop	r1
    4288:	18 95       	reti

0000428a <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    428a:	1f 92       	push	r1
    428c:	0f 92       	push	r0
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	0f 92       	push	r0
    4292:	11 24       	eor	r1, r1
    4294:	0b b6       	in	r0, 0x3b	; 59
    4296:	0f 92       	push	r0
    4298:	2f 93       	push	r18
    429a:	3f 93       	push	r19
    429c:	4f 93       	push	r20
    429e:	5f 93       	push	r21
    42a0:	6f 93       	push	r22
    42a2:	7f 93       	push	r23
    42a4:	8f 93       	push	r24
    42a6:	9f 93       	push	r25
    42a8:	af 93       	push	r26
    42aa:	bf 93       	push	r27
    42ac:	ef 93       	push	r30
    42ae:	ff 93       	push	r31
    42b0:	e0 91 64 23 	lds	r30, 0x2364
    42b4:	f0 91 65 23 	lds	r31, 0x2365
    42b8:	30 97       	sbiw	r30, 0x00	; 0
    42ba:	29 f0       	breq	.+10     	; 0x42c6 <__vector_87+0x3c>
    42bc:	80 91 5a 24 	lds	r24, 0x245A
    42c0:	90 91 5b 24 	lds	r25, 0x245B
    42c4:	19 95       	eicall
    42c6:	ff 91       	pop	r31
    42c8:	ef 91       	pop	r30
    42ca:	bf 91       	pop	r27
    42cc:	af 91       	pop	r26
    42ce:	9f 91       	pop	r25
    42d0:	8f 91       	pop	r24
    42d2:	7f 91       	pop	r23
    42d4:	6f 91       	pop	r22
    42d6:	5f 91       	pop	r21
    42d8:	4f 91       	pop	r20
    42da:	3f 91       	pop	r19
    42dc:	2f 91       	pop	r18
    42de:	0f 90       	pop	r0
    42e0:	0b be       	out	0x3b, r0	; 59
    42e2:	0f 90       	pop	r0
    42e4:	0f be       	out	0x3f, r0	; 63
    42e6:	0f 90       	pop	r0
    42e8:	1f 90       	pop	r1
    42ea:	18 95       	reti

000042ec <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    42ec:	1f 92       	push	r1
    42ee:	0f 92       	push	r0
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	0f 92       	push	r0
    42f4:	11 24       	eor	r1, r1
    42f6:	0b b6       	in	r0, 0x3b	; 59
    42f8:	0f 92       	push	r0
    42fa:	2f 93       	push	r18
    42fc:	3f 93       	push	r19
    42fe:	4f 93       	push	r20
    4300:	5f 93       	push	r21
    4302:	6f 93       	push	r22
    4304:	7f 93       	push	r23
    4306:	8f 93       	push	r24
    4308:	9f 93       	push	r25
    430a:	af 93       	push	r26
    430c:	bf 93       	push	r27
    430e:	ef 93       	push	r30
    4310:	ff 93       	push	r31
    4312:	e0 91 66 23 	lds	r30, 0x2366
    4316:	f0 91 67 23 	lds	r31, 0x2367
    431a:	30 97       	sbiw	r30, 0x00	; 0
    431c:	29 f0       	breq	.+10     	; 0x4328 <__vector_88+0x3c>
    431e:	80 91 5c 24 	lds	r24, 0x245C
    4322:	90 91 5d 24 	lds	r25, 0x245D
    4326:	19 95       	eicall
    4328:	ff 91       	pop	r31
    432a:	ef 91       	pop	r30
    432c:	bf 91       	pop	r27
    432e:	af 91       	pop	r26
    4330:	9f 91       	pop	r25
    4332:	8f 91       	pop	r24
    4334:	7f 91       	pop	r23
    4336:	6f 91       	pop	r22
    4338:	5f 91       	pop	r21
    433a:	4f 91       	pop	r20
    433c:	3f 91       	pop	r19
    433e:	2f 91       	pop	r18
    4340:	0f 90       	pop	r0
    4342:	0b be       	out	0x3b, r0	; 59
    4344:	0f 90       	pop	r0
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	0f 90       	pop	r0
    434a:	1f 90       	pop	r1
    434c:	18 95       	reti

0000434e <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    434e:	1f 92       	push	r1
    4350:	0f 92       	push	r0
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	0f 92       	push	r0
    4356:	11 24       	eor	r1, r1
    4358:	0b b6       	in	r0, 0x3b	; 59
    435a:	0f 92       	push	r0
    435c:	2f 93       	push	r18
    435e:	3f 93       	push	r19
    4360:	4f 93       	push	r20
    4362:	5f 93       	push	r21
    4364:	6f 93       	push	r22
    4366:	7f 93       	push	r23
    4368:	8f 93       	push	r24
    436a:	9f 93       	push	r25
    436c:	af 93       	push	r26
    436e:	bf 93       	push	r27
    4370:	ef 93       	push	r30
    4372:	ff 93       	push	r31
    4374:	e0 91 68 23 	lds	r30, 0x2368
    4378:	f0 91 69 23 	lds	r31, 0x2369
    437c:	30 97       	sbiw	r30, 0x00	; 0
    437e:	29 f0       	breq	.+10     	; 0x438a <__vector_89+0x3c>
    4380:	80 91 5e 24 	lds	r24, 0x245E
    4384:	90 91 5f 24 	lds	r25, 0x245F
    4388:	19 95       	eicall
    438a:	ff 91       	pop	r31
    438c:	ef 91       	pop	r30
    438e:	bf 91       	pop	r27
    4390:	af 91       	pop	r26
    4392:	9f 91       	pop	r25
    4394:	8f 91       	pop	r24
    4396:	7f 91       	pop	r23
    4398:	6f 91       	pop	r22
    439a:	5f 91       	pop	r21
    439c:	4f 91       	pop	r20
    439e:	3f 91       	pop	r19
    43a0:	2f 91       	pop	r18
    43a2:	0f 90       	pop	r0
    43a4:	0b be       	out	0x3b, r0	; 59
    43a6:	0f 90       	pop	r0
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	0f 90       	pop	r0
    43ac:	1f 90       	pop	r1
    43ae:	18 95       	reti

000043b0 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    43b0:	1f 92       	push	r1
    43b2:	0f 92       	push	r0
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	0f 92       	push	r0
    43b8:	11 24       	eor	r1, r1
    43ba:	0b b6       	in	r0, 0x3b	; 59
    43bc:	0f 92       	push	r0
    43be:	2f 93       	push	r18
    43c0:	3f 93       	push	r19
    43c2:	4f 93       	push	r20
    43c4:	5f 93       	push	r21
    43c6:	6f 93       	push	r22
    43c8:	7f 93       	push	r23
    43ca:	8f 93       	push	r24
    43cc:	9f 93       	push	r25
    43ce:	af 93       	push	r26
    43d0:	bf 93       	push	r27
    43d2:	ef 93       	push	r30
    43d4:	ff 93       	push	r31
    43d6:	e0 91 6a 23 	lds	r30, 0x236A
    43da:	f0 91 6b 23 	lds	r31, 0x236B
    43de:	30 97       	sbiw	r30, 0x00	; 0
    43e0:	29 f0       	breq	.+10     	; 0x43ec <__vector_90+0x3c>
    43e2:	80 91 60 24 	lds	r24, 0x2460
    43e6:	90 91 61 24 	lds	r25, 0x2461
    43ea:	19 95       	eicall
    43ec:	ff 91       	pop	r31
    43ee:	ef 91       	pop	r30
    43f0:	bf 91       	pop	r27
    43f2:	af 91       	pop	r26
    43f4:	9f 91       	pop	r25
    43f6:	8f 91       	pop	r24
    43f8:	7f 91       	pop	r23
    43fa:	6f 91       	pop	r22
    43fc:	5f 91       	pop	r21
    43fe:	4f 91       	pop	r20
    4400:	3f 91       	pop	r19
    4402:	2f 91       	pop	r18
    4404:	0f 90       	pop	r0
    4406:	0b be       	out	0x3b, r0	; 59
    4408:	0f 90       	pop	r0
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	0f 90       	pop	r0
    440e:	1f 90       	pop	r1
    4410:	18 95       	reti

00004412 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    4412:	1f 92       	push	r1
    4414:	0f 92       	push	r0
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	0f 92       	push	r0
    441a:	11 24       	eor	r1, r1
    441c:	0b b6       	in	r0, 0x3b	; 59
    441e:	0f 92       	push	r0
    4420:	2f 93       	push	r18
    4422:	3f 93       	push	r19
    4424:	4f 93       	push	r20
    4426:	5f 93       	push	r21
    4428:	6f 93       	push	r22
    442a:	7f 93       	push	r23
    442c:	8f 93       	push	r24
    442e:	9f 93       	push	r25
    4430:	af 93       	push	r26
    4432:	bf 93       	push	r27
    4434:	ef 93       	push	r30
    4436:	ff 93       	push	r31
    4438:	e0 91 6c 23 	lds	r30, 0x236C
    443c:	f0 91 6d 23 	lds	r31, 0x236D
    4440:	30 97       	sbiw	r30, 0x00	; 0
    4442:	29 f0       	breq	.+10     	; 0x444e <__vector_91+0x3c>
    4444:	80 91 62 24 	lds	r24, 0x2462
    4448:	90 91 63 24 	lds	r25, 0x2463
    444c:	19 95       	eicall
    444e:	ff 91       	pop	r31
    4450:	ef 91       	pop	r30
    4452:	bf 91       	pop	r27
    4454:	af 91       	pop	r26
    4456:	9f 91       	pop	r25
    4458:	8f 91       	pop	r24
    445a:	7f 91       	pop	r23
    445c:	6f 91       	pop	r22
    445e:	5f 91       	pop	r21
    4460:	4f 91       	pop	r20
    4462:	3f 91       	pop	r19
    4464:	2f 91       	pop	r18
    4466:	0f 90       	pop	r0
    4468:	0b be       	out	0x3b, r0	; 59
    446a:	0f 90       	pop	r0
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	0f 90       	pop	r0
    4470:	1f 90       	pop	r1
    4472:	18 95       	reti

00004474 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    4474:	1f 92       	push	r1
    4476:	0f 92       	push	r0
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	0f 92       	push	r0
    447c:	11 24       	eor	r1, r1
    447e:	0b b6       	in	r0, 0x3b	; 59
    4480:	0f 92       	push	r0
    4482:	2f 93       	push	r18
    4484:	3f 93       	push	r19
    4486:	4f 93       	push	r20
    4488:	5f 93       	push	r21
    448a:	6f 93       	push	r22
    448c:	7f 93       	push	r23
    448e:	8f 93       	push	r24
    4490:	9f 93       	push	r25
    4492:	af 93       	push	r26
    4494:	bf 93       	push	r27
    4496:	ef 93       	push	r30
    4498:	ff 93       	push	r31
    449a:	e0 91 6e 23 	lds	r30, 0x236E
    449e:	f0 91 6f 23 	lds	r31, 0x236F
    44a2:	30 97       	sbiw	r30, 0x00	; 0
    44a4:	29 f0       	breq	.+10     	; 0x44b0 <__vector_92+0x3c>
    44a6:	80 91 64 24 	lds	r24, 0x2464
    44aa:	90 91 65 24 	lds	r25, 0x2465
    44ae:	19 95       	eicall
    44b0:	ff 91       	pop	r31
    44b2:	ef 91       	pop	r30
    44b4:	bf 91       	pop	r27
    44b6:	af 91       	pop	r26
    44b8:	9f 91       	pop	r25
    44ba:	8f 91       	pop	r24
    44bc:	7f 91       	pop	r23
    44be:	6f 91       	pop	r22
    44c0:	5f 91       	pop	r21
    44c2:	4f 91       	pop	r20
    44c4:	3f 91       	pop	r19
    44c6:	2f 91       	pop	r18
    44c8:	0f 90       	pop	r0
    44ca:	0b be       	out	0x3b, r0	; 59
    44cc:	0f 90       	pop	r0
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	0f 90       	pop	r0
    44d2:	1f 90       	pop	r1
    44d4:	18 95       	reti

000044d6 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    44d6:	1f 92       	push	r1
    44d8:	0f 92       	push	r0
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	0f 92       	push	r0
    44de:	11 24       	eor	r1, r1
    44e0:	0b b6       	in	r0, 0x3b	; 59
    44e2:	0f 92       	push	r0
    44e4:	2f 93       	push	r18
    44e6:	3f 93       	push	r19
    44e8:	4f 93       	push	r20
    44ea:	5f 93       	push	r21
    44ec:	6f 93       	push	r22
    44ee:	7f 93       	push	r23
    44f0:	8f 93       	push	r24
    44f2:	9f 93       	push	r25
    44f4:	af 93       	push	r26
    44f6:	bf 93       	push	r27
    44f8:	ef 93       	push	r30
    44fa:	ff 93       	push	r31
    44fc:	e0 91 70 23 	lds	r30, 0x2370
    4500:	f0 91 71 23 	lds	r31, 0x2371
    4504:	30 97       	sbiw	r30, 0x00	; 0
    4506:	29 f0       	breq	.+10     	; 0x4512 <__vector_93+0x3c>
    4508:	80 91 66 24 	lds	r24, 0x2466
    450c:	90 91 67 24 	lds	r25, 0x2467
    4510:	19 95       	eicall
    4512:	ff 91       	pop	r31
    4514:	ef 91       	pop	r30
    4516:	bf 91       	pop	r27
    4518:	af 91       	pop	r26
    451a:	9f 91       	pop	r25
    451c:	8f 91       	pop	r24
    451e:	7f 91       	pop	r23
    4520:	6f 91       	pop	r22
    4522:	5f 91       	pop	r21
    4524:	4f 91       	pop	r20
    4526:	3f 91       	pop	r19
    4528:	2f 91       	pop	r18
    452a:	0f 90       	pop	r0
    452c:	0b be       	out	0x3b, r0	; 59
    452e:	0f 90       	pop	r0
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	0f 90       	pop	r0
    4534:	1f 90       	pop	r1
    4536:	18 95       	reti

00004538 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    4538:	1f 92       	push	r1
    453a:	0f 92       	push	r0
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	0f 92       	push	r0
    4540:	11 24       	eor	r1, r1
    4542:	0b b6       	in	r0, 0x3b	; 59
    4544:	0f 92       	push	r0
    4546:	2f 93       	push	r18
    4548:	3f 93       	push	r19
    454a:	4f 93       	push	r20
    454c:	5f 93       	push	r21
    454e:	6f 93       	push	r22
    4550:	7f 93       	push	r23
    4552:	8f 93       	push	r24
    4554:	9f 93       	push	r25
    4556:	af 93       	push	r26
    4558:	bf 93       	push	r27
    455a:	ef 93       	push	r30
    455c:	ff 93       	push	r31
    455e:	e0 91 86 23 	lds	r30, 0x2386
    4562:	f0 91 87 23 	lds	r31, 0x2387
    4566:	30 97       	sbiw	r30, 0x00	; 0
    4568:	29 f0       	breq	.+10     	; 0x4574 <__vector_104+0x3c>
    456a:	80 91 7c 24 	lds	r24, 0x247C
    456e:	90 91 7d 24 	lds	r25, 0x247D
    4572:	19 95       	eicall
    4574:	ff 91       	pop	r31
    4576:	ef 91       	pop	r30
    4578:	bf 91       	pop	r27
    457a:	af 91       	pop	r26
    457c:	9f 91       	pop	r25
    457e:	8f 91       	pop	r24
    4580:	7f 91       	pop	r23
    4582:	6f 91       	pop	r22
    4584:	5f 91       	pop	r21
    4586:	4f 91       	pop	r20
    4588:	3f 91       	pop	r19
    458a:	2f 91       	pop	r18
    458c:	0f 90       	pop	r0
    458e:	0b be       	out	0x3b, r0	; 59
    4590:	0f 90       	pop	r0
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	0f 90       	pop	r0
    4596:	1f 90       	pop	r1
    4598:	18 95       	reti

0000459a <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    459a:	1f 92       	push	r1
    459c:	0f 92       	push	r0
    459e:	0f b6       	in	r0, 0x3f	; 63
    45a0:	0f 92       	push	r0
    45a2:	11 24       	eor	r1, r1
    45a4:	0b b6       	in	r0, 0x3b	; 59
    45a6:	0f 92       	push	r0
    45a8:	2f 93       	push	r18
    45aa:	3f 93       	push	r19
    45ac:	4f 93       	push	r20
    45ae:	5f 93       	push	r21
    45b0:	6f 93       	push	r22
    45b2:	7f 93       	push	r23
    45b4:	8f 93       	push	r24
    45b6:	9f 93       	push	r25
    45b8:	af 93       	push	r26
    45ba:	bf 93       	push	r27
    45bc:	ef 93       	push	r30
    45be:	ff 93       	push	r31
    45c0:	e0 91 88 23 	lds	r30, 0x2388
    45c4:	f0 91 89 23 	lds	r31, 0x2389
    45c8:	30 97       	sbiw	r30, 0x00	; 0
    45ca:	29 f0       	breq	.+10     	; 0x45d6 <__vector_105+0x3c>
    45cc:	80 91 7e 24 	lds	r24, 0x247E
    45d0:	90 91 7f 24 	lds	r25, 0x247F
    45d4:	19 95       	eicall
    45d6:	ff 91       	pop	r31
    45d8:	ef 91       	pop	r30
    45da:	bf 91       	pop	r27
    45dc:	af 91       	pop	r26
    45de:	9f 91       	pop	r25
    45e0:	8f 91       	pop	r24
    45e2:	7f 91       	pop	r23
    45e4:	6f 91       	pop	r22
    45e6:	5f 91       	pop	r21
    45e8:	4f 91       	pop	r20
    45ea:	3f 91       	pop	r19
    45ec:	2f 91       	pop	r18
    45ee:	0f 90       	pop	r0
    45f0:	0b be       	out	0x3b, r0	; 59
    45f2:	0f 90       	pop	r0
    45f4:	0f be       	out	0x3f, r0	; 63
    45f6:	0f 90       	pop	r0
    45f8:	1f 90       	pop	r1
    45fa:	18 95       	reti

000045fc <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    45fc:	1f 92       	push	r1
    45fe:	0f 92       	push	r0
    4600:	0f b6       	in	r0, 0x3f	; 63
    4602:	0f 92       	push	r0
    4604:	11 24       	eor	r1, r1
    4606:	0b b6       	in	r0, 0x3b	; 59
    4608:	0f 92       	push	r0
    460a:	2f 93       	push	r18
    460c:	3f 93       	push	r19
    460e:	4f 93       	push	r20
    4610:	5f 93       	push	r21
    4612:	6f 93       	push	r22
    4614:	7f 93       	push	r23
    4616:	8f 93       	push	r24
    4618:	9f 93       	push	r25
    461a:	af 93       	push	r26
    461c:	bf 93       	push	r27
    461e:	ef 93       	push	r30
    4620:	ff 93       	push	r31
    4622:	e0 91 8e 23 	lds	r30, 0x238E
    4626:	f0 91 8f 23 	lds	r31, 0x238F
    462a:	30 97       	sbiw	r30, 0x00	; 0
    462c:	29 f0       	breq	.+10     	; 0x4638 <__vector_108+0x3c>
    462e:	80 91 84 24 	lds	r24, 0x2484
    4632:	90 91 85 24 	lds	r25, 0x2485
    4636:	19 95       	eicall
    4638:	ff 91       	pop	r31
    463a:	ef 91       	pop	r30
    463c:	bf 91       	pop	r27
    463e:	af 91       	pop	r26
    4640:	9f 91       	pop	r25
    4642:	8f 91       	pop	r24
    4644:	7f 91       	pop	r23
    4646:	6f 91       	pop	r22
    4648:	5f 91       	pop	r21
    464a:	4f 91       	pop	r20
    464c:	3f 91       	pop	r19
    464e:	2f 91       	pop	r18
    4650:	0f 90       	pop	r0
    4652:	0b be       	out	0x3b, r0	; 59
    4654:	0f 90       	pop	r0
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	0f 90       	pop	r0
    465a:	1f 90       	pop	r1
    465c:	18 95       	reti

0000465e <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    465e:	1f 92       	push	r1
    4660:	0f 92       	push	r0
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	0f 92       	push	r0
    4666:	11 24       	eor	r1, r1
    4668:	0b b6       	in	r0, 0x3b	; 59
    466a:	0f 92       	push	r0
    466c:	2f 93       	push	r18
    466e:	3f 93       	push	r19
    4670:	4f 93       	push	r20
    4672:	5f 93       	push	r21
    4674:	6f 93       	push	r22
    4676:	7f 93       	push	r23
    4678:	8f 93       	push	r24
    467a:	9f 93       	push	r25
    467c:	af 93       	push	r26
    467e:	bf 93       	push	r27
    4680:	ef 93       	push	r30
    4682:	ff 93       	push	r31
    4684:	e0 91 90 23 	lds	r30, 0x2390
    4688:	f0 91 91 23 	lds	r31, 0x2391
    468c:	30 97       	sbiw	r30, 0x00	; 0
    468e:	29 f0       	breq	.+10     	; 0x469a <__vector_109+0x3c>
    4690:	80 91 86 24 	lds	r24, 0x2486
    4694:	90 91 87 24 	lds	r25, 0x2487
    4698:	19 95       	eicall
    469a:	ff 91       	pop	r31
    469c:	ef 91       	pop	r30
    469e:	bf 91       	pop	r27
    46a0:	af 91       	pop	r26
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	7f 91       	pop	r23
    46a8:	6f 91       	pop	r22
    46aa:	5f 91       	pop	r21
    46ac:	4f 91       	pop	r20
    46ae:	3f 91       	pop	r19
    46b0:	2f 91       	pop	r18
    46b2:	0f 90       	pop	r0
    46b4:	0b be       	out	0x3b, r0	; 59
    46b6:	0f 90       	pop	r0
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	0f 90       	pop	r0
    46bc:	1f 90       	pop	r1
    46be:	18 95       	reti

000046c0 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	0f 92       	push	r0
    46c8:	11 24       	eor	r1, r1
    46ca:	0b b6       	in	r0, 0x3b	; 59
    46cc:	0f 92       	push	r0
    46ce:	2f 93       	push	r18
    46d0:	3f 93       	push	r19
    46d2:	4f 93       	push	r20
    46d4:	5f 93       	push	r21
    46d6:	6f 93       	push	r22
    46d8:	7f 93       	push	r23
    46da:	8f 93       	push	r24
    46dc:	9f 93       	push	r25
    46de:	af 93       	push	r26
    46e0:	bf 93       	push	r27
    46e2:	ef 93       	push	r30
    46e4:	ff 93       	push	r31
    46e6:	e0 91 92 23 	lds	r30, 0x2392
    46ea:	f0 91 93 23 	lds	r31, 0x2393
    46ee:	30 97       	sbiw	r30, 0x00	; 0
    46f0:	29 f0       	breq	.+10     	; 0x46fc <__vector_110+0x3c>
    46f2:	80 91 88 24 	lds	r24, 0x2488
    46f6:	90 91 89 24 	lds	r25, 0x2489
    46fa:	19 95       	eicall
    46fc:	ff 91       	pop	r31
    46fe:	ef 91       	pop	r30
    4700:	bf 91       	pop	r27
    4702:	af 91       	pop	r26
    4704:	9f 91       	pop	r25
    4706:	8f 91       	pop	r24
    4708:	7f 91       	pop	r23
    470a:	6f 91       	pop	r22
    470c:	5f 91       	pop	r21
    470e:	4f 91       	pop	r20
    4710:	3f 91       	pop	r19
    4712:	2f 91       	pop	r18
    4714:	0f 90       	pop	r0
    4716:	0b be       	out	0x3b, r0	; 59
    4718:	0f 90       	pop	r0
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	0f 90       	pop	r0
    471e:	1f 90       	pop	r1
    4720:	18 95       	reti

00004722 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    4722:	1f 92       	push	r1
    4724:	0f 92       	push	r0
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	0f 92       	push	r0
    472a:	11 24       	eor	r1, r1
    472c:	0b b6       	in	r0, 0x3b	; 59
    472e:	0f 92       	push	r0
    4730:	2f 93       	push	r18
    4732:	3f 93       	push	r19
    4734:	4f 93       	push	r20
    4736:	5f 93       	push	r21
    4738:	6f 93       	push	r22
    473a:	7f 93       	push	r23
    473c:	8f 93       	push	r24
    473e:	9f 93       	push	r25
    4740:	af 93       	push	r26
    4742:	bf 93       	push	r27
    4744:	ef 93       	push	r30
    4746:	ff 93       	push	r31
    4748:	e0 91 94 23 	lds	r30, 0x2394
    474c:	f0 91 95 23 	lds	r31, 0x2395
    4750:	30 97       	sbiw	r30, 0x00	; 0
    4752:	29 f0       	breq	.+10     	; 0x475e <__vector_111+0x3c>
    4754:	80 91 8a 24 	lds	r24, 0x248A
    4758:	90 91 8b 24 	lds	r25, 0x248B
    475c:	19 95       	eicall
    475e:	ff 91       	pop	r31
    4760:	ef 91       	pop	r30
    4762:	bf 91       	pop	r27
    4764:	af 91       	pop	r26
    4766:	9f 91       	pop	r25
    4768:	8f 91       	pop	r24
    476a:	7f 91       	pop	r23
    476c:	6f 91       	pop	r22
    476e:	5f 91       	pop	r21
    4770:	4f 91       	pop	r20
    4772:	3f 91       	pop	r19
    4774:	2f 91       	pop	r18
    4776:	0f 90       	pop	r0
    4778:	0b be       	out	0x3b, r0	; 59
    477a:	0f 90       	pop	r0
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	0f 90       	pop	r0
    4780:	1f 90       	pop	r1
    4782:	18 95       	reti

00004784 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    4784:	1f 92       	push	r1
    4786:	0f 92       	push	r0
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	0f 92       	push	r0
    478c:	11 24       	eor	r1, r1
    478e:	0b b6       	in	r0, 0x3b	; 59
    4790:	0f 92       	push	r0
    4792:	2f 93       	push	r18
    4794:	3f 93       	push	r19
    4796:	4f 93       	push	r20
    4798:	5f 93       	push	r21
    479a:	6f 93       	push	r22
    479c:	7f 93       	push	r23
    479e:	8f 93       	push	r24
    47a0:	9f 93       	push	r25
    47a2:	af 93       	push	r26
    47a4:	bf 93       	push	r27
    47a6:	ef 93       	push	r30
    47a8:	ff 93       	push	r31
    47aa:	e0 91 96 23 	lds	r30, 0x2396
    47ae:	f0 91 97 23 	lds	r31, 0x2397
    47b2:	30 97       	sbiw	r30, 0x00	; 0
    47b4:	29 f0       	breq	.+10     	; 0x47c0 <__vector_112+0x3c>
    47b6:	80 91 8c 24 	lds	r24, 0x248C
    47ba:	90 91 8d 24 	lds	r25, 0x248D
    47be:	19 95       	eicall
    47c0:	ff 91       	pop	r31
    47c2:	ef 91       	pop	r30
    47c4:	bf 91       	pop	r27
    47c6:	af 91       	pop	r26
    47c8:	9f 91       	pop	r25
    47ca:	8f 91       	pop	r24
    47cc:	7f 91       	pop	r23
    47ce:	6f 91       	pop	r22
    47d0:	5f 91       	pop	r21
    47d2:	4f 91       	pop	r20
    47d4:	3f 91       	pop	r19
    47d6:	2f 91       	pop	r18
    47d8:	0f 90       	pop	r0
    47da:	0b be       	out	0x3b, r0	; 59
    47dc:	0f 90       	pop	r0
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	0f 90       	pop	r0
    47e2:	1f 90       	pop	r1
    47e4:	18 95       	reti

000047e6 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    47e6:	1f 92       	push	r1
    47e8:	0f 92       	push	r0
    47ea:	0f b6       	in	r0, 0x3f	; 63
    47ec:	0f 92       	push	r0
    47ee:	11 24       	eor	r1, r1
    47f0:	0b b6       	in	r0, 0x3b	; 59
    47f2:	0f 92       	push	r0
    47f4:	2f 93       	push	r18
    47f6:	3f 93       	push	r19
    47f8:	4f 93       	push	r20
    47fa:	5f 93       	push	r21
    47fc:	6f 93       	push	r22
    47fe:	7f 93       	push	r23
    4800:	8f 93       	push	r24
    4802:	9f 93       	push	r25
    4804:	af 93       	push	r26
    4806:	bf 93       	push	r27
    4808:	ef 93       	push	r30
    480a:	ff 93       	push	r31
    480c:	e0 91 98 23 	lds	r30, 0x2398
    4810:	f0 91 99 23 	lds	r31, 0x2399
    4814:	30 97       	sbiw	r30, 0x00	; 0
    4816:	29 f0       	breq	.+10     	; 0x4822 <__vector_113+0x3c>
    4818:	80 91 8e 24 	lds	r24, 0x248E
    481c:	90 91 8f 24 	lds	r25, 0x248F
    4820:	19 95       	eicall
    4822:	ff 91       	pop	r31
    4824:	ef 91       	pop	r30
    4826:	bf 91       	pop	r27
    4828:	af 91       	pop	r26
    482a:	9f 91       	pop	r25
    482c:	8f 91       	pop	r24
    482e:	7f 91       	pop	r23
    4830:	6f 91       	pop	r22
    4832:	5f 91       	pop	r21
    4834:	4f 91       	pop	r20
    4836:	3f 91       	pop	r19
    4838:	2f 91       	pop	r18
    483a:	0f 90       	pop	r0
    483c:	0b be       	out	0x3b, r0	; 59
    483e:	0f 90       	pop	r0
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	0f 90       	pop	r0
    4844:	1f 90       	pop	r1
    4846:	18 95       	reti

00004848 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4848:	1f 92       	push	r1
    484a:	0f 92       	push	r0
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	0f 92       	push	r0
    4850:	11 24       	eor	r1, r1
    4852:	0b b6       	in	r0, 0x3b	; 59
    4854:	0f 92       	push	r0
    4856:	2f 93       	push	r18
    4858:	3f 93       	push	r19
    485a:	4f 93       	push	r20
    485c:	5f 93       	push	r21
    485e:	6f 93       	push	r22
    4860:	7f 93       	push	r23
    4862:	8f 93       	push	r24
    4864:	9f 93       	push	r25
    4866:	af 93       	push	r26
    4868:	bf 93       	push	r27
    486a:	ef 93       	push	r30
    486c:	ff 93       	push	r31
    486e:	e0 91 a4 23 	lds	r30, 0x23A4
    4872:	f0 91 a5 23 	lds	r31, 0x23A5
    4876:	30 97       	sbiw	r30, 0x00	; 0
    4878:	29 f0       	breq	.+10     	; 0x4884 <__vector_119+0x3c>
    487a:	80 91 9a 24 	lds	r24, 0x249A
    487e:	90 91 9b 24 	lds	r25, 0x249B
    4882:	19 95       	eicall
    4884:	ff 91       	pop	r31
    4886:	ef 91       	pop	r30
    4888:	bf 91       	pop	r27
    488a:	af 91       	pop	r26
    488c:	9f 91       	pop	r25
    488e:	8f 91       	pop	r24
    4890:	7f 91       	pop	r23
    4892:	6f 91       	pop	r22
    4894:	5f 91       	pop	r21
    4896:	4f 91       	pop	r20
    4898:	3f 91       	pop	r19
    489a:	2f 91       	pop	r18
    489c:	0f 90       	pop	r0
    489e:	0b be       	out	0x3b, r0	; 59
    48a0:	0f 90       	pop	r0
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	0f 90       	pop	r0
    48a6:	1f 90       	pop	r1
    48a8:	18 95       	reti

000048aa <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    48aa:	1f 92       	push	r1
    48ac:	0f 92       	push	r0
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	0f 92       	push	r0
    48b2:	11 24       	eor	r1, r1
    48b4:	0b b6       	in	r0, 0x3b	; 59
    48b6:	0f 92       	push	r0
    48b8:	2f 93       	push	r18
    48ba:	3f 93       	push	r19
    48bc:	4f 93       	push	r20
    48be:	5f 93       	push	r21
    48c0:	6f 93       	push	r22
    48c2:	7f 93       	push	r23
    48c4:	8f 93       	push	r24
    48c6:	9f 93       	push	r25
    48c8:	af 93       	push	r26
    48ca:	bf 93       	push	r27
    48cc:	ef 93       	push	r30
    48ce:	ff 93       	push	r31
    48d0:	e0 91 a6 23 	lds	r30, 0x23A6
    48d4:	f0 91 a7 23 	lds	r31, 0x23A7
    48d8:	30 97       	sbiw	r30, 0x00	; 0
    48da:	29 f0       	breq	.+10     	; 0x48e6 <__vector_120+0x3c>
    48dc:	80 91 9c 24 	lds	r24, 0x249C
    48e0:	90 91 9d 24 	lds	r25, 0x249D
    48e4:	19 95       	eicall
    48e6:	ff 91       	pop	r31
    48e8:	ef 91       	pop	r30
    48ea:	bf 91       	pop	r27
    48ec:	af 91       	pop	r26
    48ee:	9f 91       	pop	r25
    48f0:	8f 91       	pop	r24
    48f2:	7f 91       	pop	r23
    48f4:	6f 91       	pop	r22
    48f6:	5f 91       	pop	r21
    48f8:	4f 91       	pop	r20
    48fa:	3f 91       	pop	r19
    48fc:	2f 91       	pop	r18
    48fe:	0f 90       	pop	r0
    4900:	0b be       	out	0x3b, r0	; 59
    4902:	0f 90       	pop	r0
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	0f 90       	pop	r0
    4908:	1f 90       	pop	r1
    490a:	18 95       	reti

0000490c <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    490c:	1f 92       	push	r1
    490e:	0f 92       	push	r0
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	0f 92       	push	r0
    4914:	11 24       	eor	r1, r1
    4916:	0b b6       	in	r0, 0x3b	; 59
    4918:	0f 92       	push	r0
    491a:	2f 93       	push	r18
    491c:	3f 93       	push	r19
    491e:	4f 93       	push	r20
    4920:	5f 93       	push	r21
    4922:	6f 93       	push	r22
    4924:	7f 93       	push	r23
    4926:	8f 93       	push	r24
    4928:	9f 93       	push	r25
    492a:	af 93       	push	r26
    492c:	bf 93       	push	r27
    492e:	ef 93       	push	r30
    4930:	ff 93       	push	r31
    4932:	e0 91 a8 23 	lds	r30, 0x23A8
    4936:	f0 91 a9 23 	lds	r31, 0x23A9
    493a:	30 97       	sbiw	r30, 0x00	; 0
    493c:	29 f0       	breq	.+10     	; 0x4948 <__vector_121+0x3c>
    493e:	80 91 9e 24 	lds	r24, 0x249E
    4942:	90 91 9f 24 	lds	r25, 0x249F
    4946:	19 95       	eicall
    4948:	ff 91       	pop	r31
    494a:	ef 91       	pop	r30
    494c:	bf 91       	pop	r27
    494e:	af 91       	pop	r26
    4950:	9f 91       	pop	r25
    4952:	8f 91       	pop	r24
    4954:	7f 91       	pop	r23
    4956:	6f 91       	pop	r22
    4958:	5f 91       	pop	r21
    495a:	4f 91       	pop	r20
    495c:	3f 91       	pop	r19
    495e:	2f 91       	pop	r18
    4960:	0f 90       	pop	r0
    4962:	0b be       	out	0x3b, r0	; 59
    4964:	0f 90       	pop	r0
    4966:	0f be       	out	0x3f, r0	; 63
    4968:	0f 90       	pop	r0
    496a:	1f 90       	pop	r1
    496c:	18 95       	reti

0000496e <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    496e:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    4972:	fd cf       	rjmp	.-6      	; 0x496e <__cxa_pure_virtual>

00004974 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4974:	8c e5       	ldi	r24, 0x5C	; 92
    4976:	95 e2       	ldi	r25, 0x25	; 37
    4978:	0e 94 9e 10 	call	0x213c	; 0x213c <_ZN4CSPIC1Ev>
CTimerD timeout;
    497c:	89 e5       	ldi	r24, 0x59	; 89
    497e:	95 e2       	ldi	r25, 0x25	; 37
    4980:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN7CTimerDC1Ev>
CTimerC1 flowtimer;
    4984:	86 e5       	ldi	r24, 0x56	; 86
    4986:	95 e2       	ldi	r25, 0x25	; 37
    4988:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN8CTimerC1C1Ev>
CTimerD1 pwmtimer;
    498c:	83 e5       	ldi	r24, 0x53	; 83
    498e:	95 e2       	ldi	r25, 0x25	; 37
    4990:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <_ZN8CTimerD1C1Ev>
CDGUSUSART usart;
    4994:	81 e5       	ldi	r24, 0x51	; 81
    4996:	95 e2       	ldi	r25, 0x25	; 37
    4998:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    499c:	89 e4       	ldi	r24, 0x49	; 73
    499e:	95 e2       	ldi	r25, 0x25	; 37
    49a0:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    49a4:	8c e2       	ldi	r24, 0x2C	; 44
    49a6:	95 e2       	ldi	r25, 0x25	; 37
    49a8:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    49ac:	82 e2       	ldi	r24, 0x22	; 34
    49ae:	95 e2       	ldi	r25, 0x25	; 37
    49b0:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    49b4:	81 e2       	ldi	r24, 0x21	; 33
    49b6:	95 e2       	ldi	r25, 0x25	; 37
    49b8:	0e 94 0d 2c 	call	0x581a	; 0x581a <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    49bc:	8a ea       	ldi	r24, 0xAA	; 170
    49be:	94 e2       	ldi	r25, 0x24	; 36
    49c0:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    49c4:	86 ea       	ldi	r24, 0xA6	; 166
    49c6:	94 e2       	ldi	r25, 0x24	; 36
    49c8:	0e 94 2c 2a 	call	0x5458	; 0x5458 <_ZN8CDS18B20C1Ev>
    49cc:	08 95       	ret

000049ce <_GLOBAL__sub_D_dacSPI>:
    49ce:	86 ea       	ldi	r24, 0xA6	; 166
    49d0:	94 e2       	ldi	r25, 0x24	; 36
    49d2:	0e 94 2d 2a 	call	0x545a	; 0x545a <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    49d6:	8a ea       	ldi	r24, 0xAA	; 170
    49d8:	94 e2       	ldi	r25, 0x24	; 36
    49da:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN16CLaserControlAppD1Ev>
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    49de:	81 e2       	ldi	r24, 0x21	; 33
    49e0:	95 e2       	ldi	r25, 0x25	; 37
    49e2:	0e 94 0e 2c 	call	0x581c	; 0x581c <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    49e6:	82 e2       	ldi	r24, 0x22	; 34
    49e8:	95 e2       	ldi	r25, 0x25	; 37
    49ea:	0e 94 10 2b 	call	0x5620	; 0x5620 <_ZN11CLaserBoardD1Ev>
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    49ee:	8c e2       	ldi	r24, 0x2C	; 44
    49f0:	95 e2       	ldi	r25, 0x25	; 37
    49f2:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <_ZN9CMBSenderD1Ev>
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
    49f6:	89 e4       	ldi	r24, 0x49	; 73
    49f8:	95 e2       	ldi	r25, 0x25	; 37
    49fa:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
    49fe:	81 e5       	ldi	r24, 0x51	; 81
    4a00:	95 e2       	ldi	r25, 0x25	; 37
    4a02:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN10CDGUSUSARTD1Ev>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
    4a06:	83 e5       	ldi	r24, 0x53	; 83
    4a08:	95 e2       	ldi	r25, 0x25	; 37
    4a0a:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <_ZN8CTimerD1D1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
    4a0e:	86 e5       	ldi	r24, 0x56	; 86
    4a10:	95 e2       	ldi	r25, 0x25	; 37
    4a12:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <_ZN8CTimerC1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
    4a16:	89 e5       	ldi	r24, 0x59	; 89
    4a18:	95 e2       	ldi	r25, 0x25	; 37
    4a1a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <_ZN7CTimerDD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4a1e:	8c e5       	ldi	r24, 0x5C	; 92
    4a20:	95 e2       	ldi	r25, 0x25	; 37
    4a22:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN4CSPID1Ev>
    4a26:	08 95       	ret

00004a28 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4a28:	cf 92       	push	r12
    4a2a:	df 92       	push	r13
    4a2c:	ef 92       	push	r14
    4a2e:	ff 92       	push	r15
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4a34:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4a36:	84 e6       	ldi	r24, 0x64	; 100
    4a38:	80 93 80 01 	sts	0x0180, r24
	
	// Initialize modules
	laserBoard.InitializeIO();
    4a3c:	82 e2       	ldi	r24, 0x22	; 34
    4a3e:	95 e2       	ldi	r25, 0x25	; 37
    4a40:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4a44:	86 ea       	ldi	r24, 0xA6	; 166
    4a46:	94 e2       	ldi	r25, 0x24	; 36
    4a48:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4a4c:	81 e2       	ldi	r24, 0x21	; 33
    4a4e:	95 e2       	ldi	r25, 0x25	; 37
    4a50:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_ZN12CSoundPlayer10InitializeEv>
	// TimerD0
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4a54:	47 e0       	ldi	r20, 0x07	; 7
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	89 e5       	ldi	r24, 0x59	; 89
    4a5a:	95 e2       	ldi	r25, 0x25	; 37
    4a5c:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4a60:	62 e1       	ldi	r22, 0x12	; 18
    4a62:	7a e7       	ldi	r23, 0x7A	; 122
    4a64:	89 e5       	ldi	r24, 0x59	; 89
    4a66:	95 e2       	ldi	r25, 0x25	; 37
    4a68:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <_ZN7CTimerD9SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4a6c:	48 e0       	ldi	r20, 0x08	; 8
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	86 e5       	ldi	r24, 0x56	; 86
    4a72:	95 e2       	ldi	r25, 0x25	; 37
    4a74:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4a78:	6f ef       	ldi	r22, 0xFF	; 255
    4a7a:	7f ef       	ldi	r23, 0xFF	; 255
    4a7c:	86 e5       	ldi	r24, 0x56	; 86
    4a7e:	95 e2       	ldi	r25, 0x25	; 37
    4a80:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4a84:	6f ef       	ldi	r22, 0xFF	; 255
    4a86:	7f ef       	ldi	r23, 0xFF	; 255
    4a88:	86 e5       	ldi	r24, 0x56	; 86
    4a8a:	95 e2       	ldi	r25, 0x25	; 37
    4a8c:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN8CTimerC15StartEj>
	// TimerD1
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV256);
    4a90:	46 e0       	ldi	r20, 0x06	; 6
    4a92:	63 e0       	ldi	r22, 0x03	; 3
    4a94:	83 e5       	ldi	r24, 0x53	; 83
    4a96:	95 e2       	ldi	r25, 0x25	; 37
    4a98:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	//pwmtimer.Start(1024);
	pwmtimer.SetCOMPA(512);
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	72 e0       	ldi	r23, 0x02	; 2
    4aa0:	83 e5       	ldi	r24, 0x53	; 83
    4aa2:	95 e2       	ldi	r25, 0x25	; 37
    4aa4:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <_ZN8CTimerD18SetCOMPAEj>
	laserBoard.PWMOn();
    4aa8:	82 e2       	ldi	r24, 0x22	; 34
    4aaa:	95 e2       	ldi	r25, 0x25	; 37
    4aac:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN11CLaserBoard5PWMOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4ab0:	21 e0       	ldi	r18, 0x01	; 1
    4ab2:	4a ea       	ldi	r20, 0xAA	; 170
    4ab4:	54 e2       	ldi	r21, 0x24	; 36
    4ab6:	61 e5       	ldi	r22, 0x51	; 81
    4ab8:	76 e0       	ldi	r23, 0x06	; 6
    4aba:	83 e5       	ldi	r24, 0x53	; 83
    4abc:	95 e2       	ldi	r25, 0x25	; 37
    4abe:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4ac2:	21 e0       	ldi	r18, 0x01	; 1
    4ac4:	4a ea       	ldi	r20, 0xAA	; 170
    4ac6:	54 e2       	ldi	r21, 0x24	; 36
    4ac8:	66 e5       	ldi	r22, 0x56	; 86
    4aca:	76 e0       	ldi	r23, 0x06	; 6
    4acc:	83 e5       	ldi	r24, 0x53	; 83
    4ace:	95 e2       	ldi	r25, 0x25	; 37
    4ad0:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4ad4:	0f 2e       	mov	r0, r31
    4ad6:	f3 e0       	ldi	r31, 0x03	; 3
    4ad8:	ef 2e       	mov	r14, r31
    4ada:	f0 2d       	mov	r31, r0
    4adc:	00 e0       	ldi	r16, 0x00	; 0
    4ade:	23 e0       	ldi	r18, 0x03	; 3
    4ae0:	40 e0       	ldi	r20, 0x00	; 0
    4ae2:	61 e0       	ldi	r22, 0x01	; 1
    4ae4:	8c e5       	ldi	r24, 0x5C	; 92
    4ae6:	95 e2       	ldi	r25, 0x25	; 37
    4ae8:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4aec:	01 e0       	ldi	r16, 0x01	; 1
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	40 e0       	ldi	r20, 0x00	; 0
    4af2:	6d e0       	ldi	r22, 0x0D	; 13
    4af4:	81 e5       	ldi	r24, 0x51	; 81
    4af6:	95 e2       	ldi	r25, 0x25	; 37
    4af8:	0e 94 9c 29 	call	0x5338	; 0x5338 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4afc:	0f 2e       	mov	r0, r31
    4afe:	f2 e1       	ldi	r31, 0x12	; 18
    4b00:	cf 2e       	mov	r12, r31
    4b02:	fa e7       	ldi	r31, 0x7A	; 122
    4b04:	df 2e       	mov	r13, r31
    4b06:	f0 2d       	mov	r31, r0
    4b08:	e1 2c       	mov	r14, r1
    4b0a:	ff 24       	eor	r15, r15
    4b0c:	f3 94       	inc	r15
    4b0e:	00 e0       	ldi	r16, 0x00	; 0
    4b10:	11 e0       	ldi	r17, 0x01	; 1
    4b12:	2a ea       	ldi	r18, 0xAA	; 170
    4b14:	34 e2       	ldi	r19, 0x24	; 36
    4b16:	41 e5       	ldi	r20, 0x51	; 81
    4b18:	55 e2       	ldi	r21, 0x25	; 37
    4b1a:	69 e5       	ldi	r22, 0x59	; 89
    4b1c:	75 e2       	ldi	r23, 0x25	; 37
    4b1e:	8c e2       	ldi	r24, 0x2C	; 44
    4b20:	95 e2       	ldi	r25, 0x25	; 37
    4b22:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4b26:	40 e0       	ldi	r20, 0x00	; 0
    4b28:	51 e0       	ldi	r21, 0x01	; 1
    4b2a:	6c e2       	ldi	r22, 0x2C	; 44
    4b2c:	75 e2       	ldi	r23, 0x25	; 37
    4b2e:	89 e4       	ldi	r24, 0x49	; 73
    4b30:	95 e2       	ldi	r25, 0x25	; 37
    4b32:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4b36:	6c e2       	ldi	r22, 0x2C	; 44
    4b38:	75 e2       	ldi	r23, 0x25	; 37
    4b3a:	8a ea       	ldi	r24, 0xAA	; 170
    4b3c:	94 e2       	ldi	r25, 0x24	; 36
    4b3e:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4b42:	82 e2       	ldi	r24, 0x22	; 34
    4b44:	95 e2       	ldi	r25, 0x25	; 37
    4b46:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4b4a:	8a ea       	ldi	r24, 0xAA	; 170
    4b4c:	94 e2       	ldi	r25, 0x24	; 36
    4b4e:	80 93 b0 23 	sts	0x23B0, r24
    4b52:	90 93 b1 23 	sts	0x23B1, r25
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4b56:	8d e5       	ldi	r24, 0x5D	; 93
    4b58:	90 e1       	ldi	r25, 0x10	; 16
    4b5a:	80 93 ba 22 	sts	0x22BA, r24
    4b5e:	90 93 bb 22 	sts	0x22BB, r25
	
	sei();	/* Enable global interrupts */
    4b62:	78 94       	sei
}
    4b64:	1f 91       	pop	r17
    4b66:	0f 91       	pop	r16
    4b68:	ff 90       	pop	r15
    4b6a:	ef 90       	pop	r14
    4b6c:	df 90       	pop	r13
    4b6e:	cf 90       	pop	r12
    4b70:	08 95       	ret

00004b72 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4b72:	cf 93       	push	r28
    4b74:	df 93       	push	r29
    4b76:	1f 92       	push	r1
    4b78:	1f 92       	push	r1
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4b7e:	0e 94 14 25 	call	0x4a28	; 0x4a28 <_Z16SystemInitializev>
    4b82:	2a ea       	ldi	r18, 0xAA	; 170
    4b84:	36 ee       	ldi	r19, 0xE6	; 230
    4b86:	86 e9       	ldi	r24, 0x96	; 150
    4b88:	91 e0       	ldi	r25, 0x01	; 1
    4b8a:	21 50       	subi	r18, 0x01	; 1
    4b8c:	30 40       	sbci	r19, 0x00	; 0
    4b8e:	80 40       	sbci	r24, 0x00	; 0
    4b90:	90 40       	sbci	r25, 0x00	; 0
    4b92:	d9 f7       	brne	.-10     	; 0x4b8a <main+0x18>
    4b94:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4b96:	82 e2       	ldi	r24, 0x22	; 34
    4b98:	95 e2       	ldi	r25, 0x25	; 37
    4b9a:	0e 94 ae 2b 	call	0x575c	; 0x575c <_ZN11CLaserBoard8Relay1OnEv>
    4b9e:	2f ef       	ldi	r18, 0xFF	; 255
    4ba0:	33 ec       	ldi	r19, 0xC3	; 195
    4ba2:	89 e0       	ldi	r24, 0x09	; 9
    4ba4:	21 50       	subi	r18, 0x01	; 1
    4ba6:	30 40       	sbci	r19, 0x00	; 0
    4ba8:	80 40       	sbci	r24, 0x00	; 0
    4baa:	e1 f7       	brne	.-8      	; 0x4ba4 <main+0x32>
    4bac:	00 c0       	rjmp	.+0      	; 0x4bae <main+0x3c>
    4bae:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4bb0:	19 82       	std	Y+1, r1	; 0x01
    4bb2:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4bb4:	42 e0       	ldi	r20, 0x02	; 2
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	be 01       	movw	r22, r28
    4bba:	6f 5f       	subi	r22, 0xFF	; 255
    4bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bbe:	8c e5       	ldi	r24, 0x5C	; 92
    4bc0:	95 e2       	ldi	r25, 0x25	; 37
    4bc2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4bc6:	8a ea       	ldi	r24, 0xAA	; 170
    4bc8:	94 e2       	ldi	r25, 0x24	; 36
    4bca:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4bce:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4bd0:	82 e2       	ldi	r24, 0x22	; 34
    4bd2:	95 e2       	ldi	r25, 0x25	; 37
    4bd4:	0e 94 04 2c 	call	0x5808	; 0x5808 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4bd8:	8a ea       	ldi	r24, 0xAA	; 170
    4bda:	94 e2       	ldi	r25, 0x24	; 36
    4bdc:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4be0:	40 91 a2 24 	lds	r20, 0x24A2
    4be4:	50 91 a3 24 	lds	r21, 0x24A3
    4be8:	ca 01       	movw	r24, r20
    4bea:	01 96       	adiw	r24, 0x01	; 1
    4bec:	80 93 a2 24 	sts	0x24A2, r24
    4bf0:	90 93 a3 24 	sts	0x24A3, r25
    4bf4:	9a 01       	movw	r18, r20
    4bf6:	a9 e8       	ldi	r26, 0x89	; 137
    4bf8:	b8 e8       	ldi	r27, 0x88	; 136
    4bfa:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
    4bfe:	96 95       	lsr	r25
    4c00:	87 95       	ror	r24
    4c02:	96 95       	lsr	r25
    4c04:	87 95       	ror	r24
    4c06:	96 95       	lsr	r25
    4c08:	87 95       	ror	r24
    4c0a:	18 9f       	mul	r17, r24
    4c0c:	90 01       	movw	r18, r0
    4c0e:	19 9f       	mul	r17, r25
    4c10:	30 0d       	add	r19, r0
    4c12:	11 24       	eor	r1, r1
    4c14:	42 17       	cp	r20, r18
    4c16:	53 07       	cpc	r21, r19
    4c18:	41 f4       	brne	.+16     	; 0x4c2a <main+0xb8>
				temperature = D18B20.temp_18b20();
    4c1a:	86 ea       	ldi	r24, 0xA6	; 166
    4c1c:	94 e2       	ldi	r25, 0x24	; 36
    4c1e:	0e 94 b5 2a 	call	0x556a	; 0x556a <_ZN8CDS18B2010temp_18b20Ev>
    4c22:	80 93 a4 24 	sts	0x24A4, r24
    4c26:	90 93 a5 24 	sts	0x24A5, r25
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4c2a:	80 91 a4 24 	lds	r24, 0x24A4
    4c2e:	90 91 a5 24 	lds	r25, 0x24A5
    4c32:	8a 30       	cpi	r24, 0x0A	; 10
    4c34:	91 40       	sbci	r25, 0x01	; 1
    4c36:	24 f0       	brlt	.+8      	; 0x4c40 <main+0xce>
				laserBoard.Relay2On();
    4c38:	82 e2       	ldi	r24, 0x22	; 34
    4c3a:	95 e2       	ldi	r25, 0x25	; 37
    4c3c:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4c40:	80 91 a4 24 	lds	r24, 0x24A4
    4c44:	90 91 a5 24 	lds	r25, 0x24A5
    4c48:	8f 3f       	cpi	r24, 0xFF	; 255
    4c4a:	91 05       	cpc	r25, r1
    4c4c:	0c f6       	brge	.-126    	; 0x4bd0 <main+0x5e>
				laserBoard.Relay2Off();			
    4c4e:	82 e2       	ldi	r24, 0x22	; 34
    4c50:	95 e2       	ldi	r25, 0x25	; 37
    4c52:	0e 94 b6 2b 	call	0x576c	; 0x576c <_ZN11CLaserBoard9Relay2OffEv>
    4c56:	bc cf       	rjmp	.-136    	; 0x4bd0 <main+0x5e>

00004c58 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4c5e:	ec 81       	ldd	r30, Y+4	; 0x04
    4c60:	fd 81       	ldd	r31, Y+5	; 0x05
    4c62:	8a ea       	ldi	r24, 0xAA	; 170
    4c64:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4c66:	ec 81       	ldd	r30, Y+4	; 0x04
    4c68:	fd 81       	ldd	r31, Y+5	; 0x05
    4c6a:	8c ec       	ldi	r24, 0xCC	; 204
    4c6c:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4c6e:	ec 81       	ldd	r30, Y+4	; 0x04
    4c70:	fd 81       	ldd	r31, Y+5	; 0x05
    4c72:	82 e0       	ldi	r24, 0x02	; 2
    4c74:	82 0f       	add	r24, r18
    4c76:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4c78:	ec 81       	ldd	r30, Y+4	; 0x04
    4c7a:	fd 81       	ldd	r31, Y+5	; 0x05
    4c7c:	80 e8       	ldi	r24, 0x80	; 128
    4c7e:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4c80:	ec 81       	ldd	r30, Y+4	; 0x04
    4c82:	fd 81       	ldd	r31, Y+5	; 0x05
    4c84:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4c86:	85 e0       	ldi	r24, 0x05	; 5
    4c88:	82 0f       	add	r24, r18
    4c8a:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	21 15       	cp	r18, r1
    4c90:	31 05       	cpc	r19, r1
    4c92:	81 f0       	breq	.+32     	; 0x4cb4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4c94:	da 01       	movw	r26, r20
    4c96:	42 0f       	add	r20, r18
    4c98:	53 1f       	adc	r21, r19
    4c9a:	65 e0       	ldi	r22, 0x05	; 5
    4c9c:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4c9e:	9d 91       	ld	r25, X+
    4ca0:	ec 81       	ldd	r30, Y+4	; 0x04
    4ca2:	fd 81       	ldd	r31, Y+5	; 0x05
    4ca4:	e6 0f       	add	r30, r22
    4ca6:	f7 1f       	adc	r31, r23
    4ca8:	90 83       	st	Z, r25
    4caa:	6f 5f       	subi	r22, 0xFF	; 255
    4cac:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4cae:	a4 17       	cp	r26, r20
    4cb0:	b5 07       	cpc	r27, r21
    4cb2:	a9 f7       	brne	.-22     	; 0x4c9e <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4cb4:	df 91       	pop	r29
    4cb6:	cf 91       	pop	r28
    4cb8:	08 95       	ret

00004cba <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4cba:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4cbc:	a4 81       	ldd	r26, Z+4	; 0x04
    4cbe:	b5 81       	ldd	r27, Z+5	; 0x05
    4cc0:	8a ea       	ldi	r24, 0xAA	; 170
    4cc2:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4cc4:	a4 81       	ldd	r26, Z+4	; 0x04
    4cc6:	b5 81       	ldd	r27, Z+5	; 0x05
    4cc8:	8c ec       	ldi	r24, 0xCC	; 204
    4cca:	11 96       	adiw	r26, 0x01	; 1
    4ccc:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4cce:	a4 81       	ldd	r26, Z+4	; 0x04
    4cd0:	b5 81       	ldd	r27, Z+5	; 0x05
    4cd2:	83 e0       	ldi	r24, 0x03	; 3
    4cd4:	12 96       	adiw	r26, 0x02	; 2
    4cd6:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4cd8:	a4 81       	ldd	r26, Z+4	; 0x04
    4cda:	b5 81       	ldd	r27, Z+5	; 0x05
    4cdc:	81 e8       	ldi	r24, 0x81	; 129
    4cde:	13 96       	adiw	r26, 0x03	; 3
    4ce0:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4ce2:	a4 81       	ldd	r26, Z+4	; 0x04
    4ce4:	b5 81       	ldd	r27, Z+5	; 0x05
    4ce6:	14 96       	adiw	r26, 0x04	; 4
    4ce8:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4cea:	a4 81       	ldd	r26, Z+4	; 0x04
    4cec:	b5 81       	ldd	r27, Z+5	; 0x05
    4cee:	15 96       	adiw	r26, 0x05	; 5
    4cf0:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4cf2:	86 e0       	ldi	r24, 0x06	; 6
    4cf4:	81 87       	std	Z+9, r24	; 0x09
    4cf6:	08 95       	ret

00004cf8 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4cf8:	0f 93       	push	r16
    4cfa:	1f 93       	push	r17
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4d00:	dc 01       	movw	r26, r24
    4d02:	14 96       	adiw	r26, 0x04	; 4
    4d04:	ed 91       	ld	r30, X+
    4d06:	fc 91       	ld	r31, X
    4d08:	15 97       	sbiw	r26, 0x05	; 5
    4d0a:	aa ea       	ldi	r26, 0xAA	; 170
    4d0c:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4d0e:	ec 01       	movw	r28, r24
    4d10:	ec 81       	ldd	r30, Y+4	; 0x04
    4d12:	fd 81       	ldd	r31, Y+5	; 0x05
    4d14:	ac ec       	ldi	r26, 0xCC	; 204
    4d16:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4d18:	ec 81       	ldd	r30, Y+4	; 0x04
    4d1a:	fd 81       	ldd	r31, Y+5	; 0x05
    4d1c:	a3 e0       	ldi	r26, 0x03	; 3
    4d1e:	a2 0f       	add	r26, r18
    4d20:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4d22:	ec 81       	ldd	r30, Y+4	; 0x04
    4d24:	fd 81       	ldd	r31, Y+5	; 0x05
    4d26:	a2 e8       	ldi	r26, 0x82	; 130
    4d28:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4d2a:	ec 81       	ldd	r30, Y+4	; 0x04
    4d2c:	fd 81       	ldd	r31, Y+5	; 0x05
    4d2e:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4d30:	ec 81       	ldd	r30, Y+4	; 0x04
    4d32:	fd 81       	ldd	r31, Y+5	; 0x05
    4d34:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4d36:	66 e0       	ldi	r22, 0x06	; 6
    4d38:	62 0f       	add	r22, r18
    4d3a:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4d3c:	36 95       	lsr	r19
    4d3e:	27 95       	ror	r18
    4d40:	21 15       	cp	r18, r1
    4d42:	31 05       	cpc	r19, r1
    4d44:	e1 f0       	breq	.+56     	; 0x4d7e <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4d46:	e4 2f       	mov	r30, r20
    4d48:	f5 2f       	mov	r31, r21
    4d4a:	2d 5f       	subi	r18, 0xFD	; 253
    4d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4e:	22 0f       	add	r18, r18
    4d50:	33 1f       	adc	r19, r19
    4d52:	46 e0       	ldi	r20, 0x06	; 6
    4d54:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4d56:	ec 01       	movw	r28, r24
    4d58:	ac 81       	ldd	r26, Y+4	; 0x04
    4d5a:	bd 81       	ldd	r27, Y+5	; 0x05
    4d5c:	a4 0f       	add	r26, r20
    4d5e:	b5 1f       	adc	r27, r21
    4d60:	61 81       	ldd	r22, Z+1	; 0x01
    4d62:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4d64:	ac 81       	ldd	r26, Y+4	; 0x04
    4d66:	bd 81       	ldd	r27, Y+5	; 0x05
    4d68:	a4 0f       	add	r26, r20
    4d6a:	b5 1f       	adc	r27, r21
    4d6c:	60 81       	ld	r22, Z
    4d6e:	32 96       	adiw	r30, 0x02	; 2
    4d70:	11 96       	adiw	r26, 0x01	; 1
    4d72:	6c 93       	st	X, r22
    4d74:	4e 5f       	subi	r20, 0xFE	; 254
    4d76:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4d78:	42 17       	cp	r20, r18
    4d7a:	53 07       	cpc	r21, r19
    4d7c:	61 f7       	brne	.-40     	; 0x4d56 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    4d7e:	df 91       	pop	r29
    4d80:	cf 91       	pop	r28
    4d82:	1f 91       	pop	r17
    4d84:	0f 91       	pop	r16
    4d86:	08 95       	ret

00004d88 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4d88:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4d8a:	a4 81       	ldd	r26, Z+4	; 0x04
    4d8c:	b5 81       	ldd	r27, Z+5	; 0x05
    4d8e:	8a ea       	ldi	r24, 0xAA	; 170
    4d90:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4d92:	a4 81       	ldd	r26, Z+4	; 0x04
    4d94:	b5 81       	ldd	r27, Z+5	; 0x05
    4d96:	8c ec       	ldi	r24, 0xCC	; 204
    4d98:	11 96       	adiw	r26, 0x01	; 1
    4d9a:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4d9c:	a4 81       	ldd	r26, Z+4	; 0x04
    4d9e:	b5 81       	ldd	r27, Z+5	; 0x05
    4da0:	84 e0       	ldi	r24, 0x04	; 4
    4da2:	12 96       	adiw	r26, 0x02	; 2
    4da4:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4da6:	a4 81       	ldd	r26, Z+4	; 0x04
    4da8:	b5 81       	ldd	r27, Z+5	; 0x05
    4daa:	83 e8       	ldi	r24, 0x83	; 131
    4dac:	13 96       	adiw	r26, 0x03	; 3
    4dae:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4db0:	a4 81       	ldd	r26, Z+4	; 0x04
    4db2:	b5 81       	ldd	r27, Z+5	; 0x05
    4db4:	14 96       	adiw	r26, 0x04	; 4
    4db6:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4db8:	a4 81       	ldd	r26, Z+4	; 0x04
    4dba:	b5 81       	ldd	r27, Z+5	; 0x05
    4dbc:	15 96       	adiw	r26, 0x05	; 5
    4dbe:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4dc0:	a4 81       	ldd	r26, Z+4	; 0x04
    4dc2:	b5 81       	ldd	r27, Z+5	; 0x05
    4dc4:	16 96       	adiw	r26, 0x06	; 6
    4dc6:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4dc8:	87 e0       	ldi	r24, 0x07	; 7
    4dca:	81 87       	std	Z+9, r24	; 0x09
    4dcc:	08 95       	ret

00004dce <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4dce:	0f 93       	push	r16
    4dd0:	1f 93       	push	r17
    4dd2:	cf 93       	push	r28
    4dd4:	df 93       	push	r29
    4dd6:	ec 01       	movw	r28, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4ddc:	6f 83       	std	Y+7, r22	; 0x07
    4dde:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4de0:	4a 87       	std	Y+10, r20	; 0x0a
    4de2:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4de4:	0e 94 48 32 	call	0x6490	; 0x6490 <malloc>
    4de8:	8a 83       	std	Y+2, r24	; 0x02
    4dea:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4dec:	c8 01       	movw	r24, r16
    4dee:	0e 94 48 32 	call	0x6490	; 0x6490 <malloc>
    4df2:	8c 83       	std	Y+4, r24	; 0x04
    4df4:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4df6:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4df8:	1e 82       	std	Y+6, r1	; 0x06
}
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	1f 91       	pop	r17
    4e00:	0f 91       	pop	r16
    4e02:	08 95       	ret

00004e04 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0e:	0e 94 dd 32 	call	0x65ba	; 0x65ba <free>
	free(tx_buffer);
    4e12:	8c 81       	ldd	r24, Y+4	; 0x04
    4e14:	9d 81       	ldd	r25, Y+5	; 0x05
    4e16:	0e 94 dd 32 	call	0x65ba	; 0x65ba <free>
}
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	08 95       	ret

00004e20 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    4e20:	08 95       	ret

00004e22 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    4e22:	dc 01       	movw	r26, r24
    4e24:	5b 96       	adiw	r26, 0x1b	; 27
    4e26:	8d 91       	ld	r24, X+
    4e28:	9c 91       	ld	r25, X
    4e2a:	5c 97       	sbiw	r26, 0x1c	; 28
    4e2c:	00 97       	sbiw	r24, 0x00	; 0
    4e2e:	39 f0       	breq	.+14     	; 0x4e3e <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    4e30:	dc 01       	movw	r26, r24
    4e32:	ed 91       	ld	r30, X+
    4e34:	fc 91       	ld	r31, X
    4e36:	02 80       	ldd	r0, Z+2	; 0x02
    4e38:	f3 81       	ldd	r31, Z+3	; 0x03
    4e3a:	e0 2d       	mov	r30, r0
    4e3c:	19 95       	eicall
    4e3e:	08 95       	ret

00004e40 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    4e40:	dc 01       	movw	r26, r24
    4e42:	5b 96       	adiw	r26, 0x1b	; 27
    4e44:	8d 91       	ld	r24, X+
    4e46:	9c 91       	ld	r25, X
    4e48:	5c 97       	sbiw	r26, 0x1c	; 28
    4e4a:	00 97       	sbiw	r24, 0x00	; 0
    4e4c:	39 f0       	breq	.+14     	; 0x4e5c <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	04 80       	ldd	r0, Z+4	; 0x04
    4e56:	f5 81       	ldd	r31, Z+5	; 0x05
    4e58:	e0 2d       	mov	r30, r0
    4e5a:	19 95       	eicall
    4e5c:	08 95       	ret

00004e5e <_ZN9CMBSenderC1Ev>:
    4e5e:	28 ed       	ldi	r18, 0xD8	; 216
    4e60:	31 e2       	ldi	r19, 0x21	; 33
    4e62:	fc 01       	movw	r30, r24
    4e64:	20 83       	st	Z, r18
    4e66:	31 83       	std	Z+1, r19	; 0x01
    4e68:	08 95       	ret

00004e6a <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>:
    4e6a:	6f 92       	push	r6
    4e6c:	7f 92       	push	r7
    4e6e:	8f 92       	push	r8
    4e70:	9f 92       	push	r9
    4e72:	af 92       	push	r10
    4e74:	bf 92       	push	r11
    4e76:	cf 92       	push	r12
    4e78:	df 92       	push	r13
    4e7a:	ef 92       	push	r14
    4e7c:	ff 92       	push	r15
    4e7e:	0f 93       	push	r16
    4e80:	1f 93       	push	r17
    4e82:	cf 93       	push	r28
    4e84:	df 93       	push	r29
    4e86:	ec 01       	movw	r28, r24
    4e88:	4b 01       	movw	r8, r22
    4e8a:	5a 01       	movw	r10, r20
    4e8c:	39 01       	movw	r6, r18
    4e8e:	c8 01       	movw	r24, r16
    4e90:	0f 83       	std	Y+7, r16	; 0x07
    4e92:	18 87       	std	Y+8, r17	; 0x08
    4e94:	ea 86       	std	Y+10, r14	; 0x0a
    4e96:	fb 86       	std	Y+11, r15	; 0x0b
    4e98:	0e 94 48 32 	call	0x6490	; 0x6490 <malloc>
    4e9c:	8a 83       	std	Y+2, r24	; 0x02
    4e9e:	9b 83       	std	Y+3, r25	; 0x03
    4ea0:	c7 01       	movw	r24, r14
    4ea2:	0e 94 48 32 	call	0x6490	; 0x6490 <malloc>
    4ea6:	8c 83       	std	Y+4, r24	; 0x04
    4ea8:	9d 83       	std	Y+5, r25	; 0x05
    4eaa:	19 8e       	std	Y+25, r1	; 0x19
    4eac:	19 86       	std	Y+9, r1	; 0x09
    4eae:	19 8a       	std	Y+17, r1	; 0x11
    4eb0:	1e 82       	std	Y+6, r1	; 0x06
    4eb2:	1c 8a       	std	Y+20, r1	; 0x14
    4eb4:	1d 8a       	std	Y+21, r1	; 0x15
    4eb6:	1e 8a       	std	Y+22, r1	; 0x16
    4eb8:	1f 8a       	std	Y+23, r1	; 0x17
    4eba:	87 e0       	ldi	r24, 0x07	; 7
    4ebc:	88 8b       	std	Y+16, r24	; 0x10
    4ebe:	82 e0       	ldi	r24, 0x02	; 2
    4ec0:	88 8f       	std	Y+24, r24	; 0x18
    4ec2:	1a 8e       	std	Y+26, r1	; 0x1a
    4ec4:	ca 8a       	std	Y+18, r12	; 0x12
    4ec6:	db 8a       	std	Y+19, r13	; 0x13
    4ec8:	ac 86       	std	Y+12, r10	; 0x0c
    4eca:	bd 86       	std	Y+13, r11	; 0x0d
    4ecc:	d5 01       	movw	r26, r10
    4ece:	ed 91       	ld	r30, X+
    4ed0:	fc 91       	ld	r31, X
    4ed2:	04 84       	ldd	r0, Z+12	; 0x0c
    4ed4:	f5 85       	ldd	r31, Z+13	; 0x0d
    4ed6:	e0 2d       	mov	r30, r0
    4ed8:	49 e5       	ldi	r20, 0x59	; 89
    4eda:	58 e2       	ldi	r21, 0x28	; 40
    4edc:	be 01       	movw	r22, r28
    4ede:	c5 01       	movw	r24, r10
    4ee0:	19 95       	eicall
    4ee2:	d5 01       	movw	r26, r10
    4ee4:	ed 91       	ld	r30, X+
    4ee6:	fc 91       	ld	r31, X
    4ee8:	06 84       	ldd	r0, Z+14	; 0x0e
    4eea:	f7 85       	ldd	r31, Z+15	; 0x0f
    4eec:	e0 2d       	mov	r30, r0
    4eee:	45 ee       	ldi	r20, 0xE5	; 229
    4ef0:	58 e2       	ldi	r21, 0x28	; 40
    4ef2:	be 01       	movw	r22, r28
    4ef4:	c5 01       	movw	r24, r10
    4ef6:	19 95       	eicall
    4ef8:	61 14       	cp	r6, r1
    4efa:	71 04       	cpc	r7, r1
    4efc:	19 f0       	breq	.+6      	; 0x4f04 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9a>
    4efe:	6b 8e       	std	Y+27, r6	; 0x1b
    4f00:	7c 8e       	std	Y+28, r7	; 0x1c
    4f02:	02 c0       	rjmp	.+4      	; 0x4f08 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9e>
    4f04:	cb 8f       	std	Y+27, r28	; 0x1b
    4f06:	dc 8f       	std	Y+28, r29	; 0x1c
    4f08:	8e 86       	std	Y+14, r8	; 0x0e
    4f0a:	9f 86       	std	Y+15, r9	; 0x0f
    4f0c:	81 14       	cp	r8, r1
    4f0e:	91 04       	cpc	r9, r1
    4f10:	61 f0       	breq	.+24     	; 0x4f2a <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0xc0>
    4f12:	d4 01       	movw	r26, r8
    4f14:	ed 91       	ld	r30, X+
    4f16:	fc 91       	ld	r31, X
    4f18:	04 88       	ldd	r0, Z+20	; 0x14
    4f1a:	f5 89       	ldd	r31, Z+21	; 0x15
    4f1c:	e0 2d       	mov	r30, r0
    4f1e:	21 e0       	ldi	r18, 0x01	; 1
    4f20:	ae 01       	movw	r20, r28
    4f22:	60 e8       	ldi	r22, 0x80	; 128
    4f24:	78 e2       	ldi	r23, 0x28	; 40
    4f26:	c4 01       	movw	r24, r8
    4f28:	19 95       	eicall
    4f2a:	df 91       	pop	r29
    4f2c:	cf 91       	pop	r28
    4f2e:	1f 91       	pop	r17
    4f30:	0f 91       	pop	r16
    4f32:	ff 90       	pop	r15
    4f34:	ef 90       	pop	r14
    4f36:	df 90       	pop	r13
    4f38:	cf 90       	pop	r12
    4f3a:	bf 90       	pop	r11
    4f3c:	af 90       	pop	r10
    4f3e:	9f 90       	pop	r9
    4f40:	8f 90       	pop	r8
    4f42:	7f 90       	pop	r7
    4f44:	6f 90       	pop	r6
    4f46:	08 95       	ret

00004f48 <_ZN9CMBSenderD1Ev>:
    4f48:	28 ed       	ldi	r18, 0xD8	; 216
    4f4a:	31 e2       	ldi	r19, 0x21	; 33
    4f4c:	fc 01       	movw	r30, r24
    4f4e:	20 83       	st	Z, r18
    4f50:	31 83       	std	Z+1, r19	; 0x01
    4f52:	0e 94 10 27 	call	0x4e20	; 0x4e20 <_ZN16CMBEventsHandlerD1Ev>
    4f56:	08 95       	ret

00004f58 <_ZN9CMBSender13OnReceiveByteEh>:
    4f58:	cf 93       	push	r28
    4f5a:	df 93       	push	r29
    4f5c:	ec 01       	movw	r28, r24
    4f5e:	96 2f       	mov	r25, r22
    4f60:	48 89       	ldd	r20, Y+16	; 0x10
    4f62:	50 e0       	ldi	r21, 0x00	; 0
    4f64:	4b 30       	cpi	r20, 0x0B	; 11
    4f66:	51 05       	cpc	r21, r1
    4f68:	08 f0       	brcs	.+2      	; 0x4f6c <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4f6a:	a0 c0       	rjmp	.+320    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4f6c:	fa 01       	movw	r30, r20
    4f6e:	88 27       	eor	r24, r24
    4f70:	e0 5c       	subi	r30, 0xC0	; 192
    4f72:	fe 4f       	sbci	r31, 0xFE	; 254
    4f74:	8f 4f       	sbci	r24, 0xFF	; 255
    4f76:	0c 94 26 32 	jmp	0x644c	; 0x644c <__tablejump2__>
    4f7a:	9a 3a       	cpi	r25, 0xAA	; 170
    4f7c:	19 f4       	brne	.+6      	; 0x4f84 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
    4f7e:	82 e0       	ldi	r24, 0x02	; 2
    4f80:	88 8b       	std	Y+16, r24	; 0x10
    4f82:	94 c0       	rjmp	.+296    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	88 8b       	std	Y+16, r24	; 0x10
    4f88:	91 c0       	rjmp	.+290    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4f8a:	9c 3c       	cpi	r25, 0xCC	; 204
    4f8c:	19 f4       	brne	.+6      	; 0x4f94 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
    4f8e:	83 e0       	ldi	r24, 0x03	; 3
    4f90:	88 8b       	std	Y+16, r24	; 0x10
    4f92:	8c c0       	rjmp	.+280    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	88 8b       	std	Y+16, r24	; 0x10
    4f98:	89 c0       	rjmp	.+274    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4f9a:	9e 83       	std	Y+6, r25	; 0x06
    4f9c:	19 8a       	std	Y+17, r1	; 0x11
    4f9e:	1e 8a       	std	Y+22, r1	; 0x16
    4fa0:	1f 8a       	std	Y+23, r1	; 0x17
    4fa2:	84 e0       	ldi	r24, 0x04	; 4
    4fa4:	88 8b       	std	Y+16, r24	; 0x10
    4fa6:	82 c0       	rjmp	.+260    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4fa8:	89 89       	ldd	r24, Y+17	; 0x11
    4faa:	ea 81       	ldd	r30, Y+2	; 0x02
    4fac:	fb 81       	ldd	r31, Y+3	; 0x03
    4fae:	e8 0f       	add	r30, r24
    4fb0:	f1 1d       	adc	r31, r1
    4fb2:	90 83       	st	Z, r25
    4fb4:	29 89       	ldd	r18, Y+17	; 0x11
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	4f 81       	ldd	r20, Y+7	; 0x07
    4fba:	58 85       	ldd	r21, Y+8	; 0x08
    4fbc:	42 17       	cp	r20, r18
    4fbe:	53 07       	cpc	r21, r19
    4fc0:	18 f4       	brcc	.+6      	; 0x4fc8 <_ZN9CMBSender13OnReceiveByteEh+0x70>
    4fc2:	89 e0       	ldi	r24, 0x09	; 9
    4fc4:	88 8b       	std	Y+16, r24	; 0x10
    4fc6:	72 c0       	rjmp	.+228    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    4fc8:	2e 89       	ldd	r18, Y+22	; 0x16
    4fca:	3f 89       	ldd	r19, Y+23	; 0x17
    4fcc:	29 27       	eor	r18, r25
    4fce:	92 2f       	mov	r25, r18
    4fd0:	92 95       	swap	r25
    4fd2:	92 27       	eor	r25, r18
    4fd4:	09 2e       	mov	r0, r25
    4fd6:	96 95       	lsr	r25
    4fd8:	96 95       	lsr	r25
    4fda:	90 25       	eor	r25, r0
    4fdc:	09 2e       	mov	r0, r25
    4fde:	96 95       	lsr	r25
    4fe0:	90 25       	eor	r25, r0
    4fe2:	97 70       	andi	r25, 0x07	; 7
    4fe4:	02 2e       	mov	r0, r18
    4fe6:	23 2f       	mov	r18, r19
    4fe8:	96 95       	lsr	r25
    4fea:	07 94       	ror	r0
    4fec:	97 95       	ror	r25
    4fee:	30 2d       	mov	r19, r0
    4ff0:	29 27       	eor	r18, r25
    4ff2:	06 94       	lsr	r0
    4ff4:	97 95       	ror	r25
    4ff6:	30 25       	eor	r19, r0
    4ff8:	29 27       	eor	r18, r25
    4ffa:	2e 8b       	std	Y+22, r18	; 0x16
    4ffc:	3f 8b       	std	Y+23, r19	; 0x17
    4ffe:	89 89       	ldd	r24, Y+17	; 0x11
    5000:	8f 5f       	subi	r24, 0xFF	; 255
    5002:	89 8b       	std	Y+17, r24	; 0x11
    5004:	49 89       	ldd	r20, Y+17	; 0x11
    5006:	8e 81       	ldd	r24, Y+6	; 0x06
    5008:	48 13       	cpse	r20, r24
    500a:	50 c0       	rjmp	.+160    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    500c:	88 e0       	ldi	r24, 0x08	; 8
    500e:	88 8b       	std	Y+16, r24	; 0x10
    5010:	e8 81       	ld	r30, Y
    5012:	f9 81       	ldd	r31, Y+1	; 0x01
    5014:	50 e0       	ldi	r21, 0x00	; 0
    5016:	6a 81       	ldd	r22, Y+2	; 0x02
    5018:	7b 81       	ldd	r23, Y+3	; 0x03
    501a:	01 90       	ld	r0, Z+
    501c:	f0 81       	ld	r31, Z
    501e:	e0 2d       	mov	r30, r0
    5020:	ce 01       	movw	r24, r28
    5022:	19 95       	eicall
    5024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5028:	00 97       	sbiw	r24, 0x00	; 0
    502a:	09 f4       	brne	.+2      	; 0x502e <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    502c:	3f c0       	rjmp	.+126    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    502e:	dc 01       	movw	r26, r24
    5030:	ed 91       	ld	r30, X+
    5032:	fc 91       	ld	r31, X
    5034:	4e 81       	ldd	r20, Y+6	; 0x06
    5036:	50 e0       	ldi	r21, 0x00	; 0
    5038:	6a 81       	ldd	r22, Y+2	; 0x02
    503a:	7b 81       	ldd	r23, Y+3	; 0x03
    503c:	01 90       	ld	r0, Z+
    503e:	f0 81       	ld	r31, Z
    5040:	e0 2d       	mov	r30, r0
    5042:	19 95       	eicall
    5044:	33 c0       	rjmp	.+102    	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5046:	69 2f       	mov	r22, r25
    5048:	70 e0       	ldi	r23, 0x00	; 0
    504a:	6c 8b       	std	Y+20, r22	; 0x14
    504c:	7d 8b       	std	Y+21, r23	; 0x15
    504e:	86 e0       	ldi	r24, 0x06	; 6
    5050:	88 8b       	std	Y+16, r24	; 0x10
    5052:	2c c0       	rjmp	.+88     	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5054:	2c 89       	ldd	r18, Y+20	; 0x14
    5056:	3d 89       	ldd	r19, Y+21	; 0x15
    5058:	a9 01       	movw	r20, r18
    505a:	59 2b       	or	r21, r25
    505c:	4c 8b       	std	Y+20, r20	; 0x14
    505e:	5d 8b       	std	Y+21, r21	; 0x15
    5060:	2e 89       	ldd	r18, Y+22	; 0x16
    5062:	3f 89       	ldd	r19, Y+23	; 0x17
    5064:	42 17       	cp	r20, r18
    5066:	53 07       	cpc	r21, r19
    5068:	e9 f4       	brne	.+58     	; 0x50a4 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
    506a:	88 e0       	ldi	r24, 0x08	; 8
    506c:	88 8b       	std	Y+16, r24	; 0x10
    506e:	e8 81       	ld	r30, Y
    5070:	f9 81       	ldd	r31, Y+1	; 0x01
    5072:	4e 81       	ldd	r20, Y+6	; 0x06
    5074:	50 e0       	ldi	r21, 0x00	; 0
    5076:	6a 81       	ldd	r22, Y+2	; 0x02
    5078:	7b 81       	ldd	r23, Y+3	; 0x03
    507a:	01 90       	ld	r0, Z+
    507c:	f0 81       	ld	r31, Z
    507e:	e0 2d       	mov	r30, r0
    5080:	ce 01       	movw	r24, r28
    5082:	19 95       	eicall
    5084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5088:	00 97       	sbiw	r24, 0x00	; 0
    508a:	81 f0       	breq	.+32     	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    508c:	dc 01       	movw	r26, r24
    508e:	ed 91       	ld	r30, X+
    5090:	fc 91       	ld	r31, X
    5092:	4e 81       	ldd	r20, Y+6	; 0x06
    5094:	50 e0       	ldi	r21, 0x00	; 0
    5096:	6a 81       	ldd	r22, Y+2	; 0x02
    5098:	7b 81       	ldd	r23, Y+3	; 0x03
    509a:	01 90       	ld	r0, Z+
    509c:	f0 81       	ld	r31, Z
    509e:	e0 2d       	mov	r30, r0
    50a0:	19 95       	eicall
    50a2:	04 c0       	rjmp	.+8      	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    50a4:	89 e0       	ldi	r24, 0x09	; 9
    50a6:	88 8b       	std	Y+16, r24	; 0x10
    50a8:	01 c0       	rjmp	.+2      	; 0x50ac <_ZN9CMBSender13OnReceiveByteEh+0x154>
    50aa:	1a 8e       	std	Y+26, r1	; 0x1a
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	08 95       	ret

000050b2 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	ec 01       	movw	r28, r24
    50b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    50ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    50bc:	dc 01       	movw	r26, r24
    50be:	ed 91       	ld	r30, X+
    50c0:	fc 91       	ld	r31, X
    50c2:	02 80       	ldd	r0, Z+2	; 0x02
    50c4:	f3 81       	ldd	r31, Z+3	; 0x03
    50c6:	e0 2d       	mov	r30, r0
    50c8:	19 95       	eicall
    50ca:	68 2f       	mov	r22, r24
    50cc:	ce 01       	movw	r24, r28
    50ce:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN9CMBSender13OnReceiveByteEh>
    50d2:	df 91       	pop	r29
    50d4:	cf 91       	pop	r28
    50d6:	08 95       	ret

000050d8 <_ZN9CMBSender9OnTimeoutEv>:
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	ec 01       	movw	r28, r24
    50de:	8e 85       	ldd	r24, Y+14	; 0x0e
    50e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    50e2:	dc 01       	movw	r26, r24
    50e4:	ed 91       	ld	r30, X+
    50e6:	fc 91       	ld	r31, X
    50e8:	04 80       	ldd	r0, Z+4	; 0x04
    50ea:	f5 81       	ldd	r31, Z+5	; 0x05
    50ec:	e0 2d       	mov	r30, r0
    50ee:	19 95       	eicall
    50f0:	88 89       	ldd	r24, Y+16	; 0x10
    50f2:	88 30       	cpi	r24, 0x08	; 8
    50f4:	11 f0       	breq	.+4      	; 0x50fa <_ZN9CMBSender9OnTimeoutEv+0x22>
    50f6:	8a e0       	ldi	r24, 0x0A	; 10
    50f8:	88 8b       	std	Y+16, r24	; 0x10
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	08 95       	ret

00005100 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    5100:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <_ZN9CMBSender9OnTimeoutEv>
    5104:	08 95       	ret

00005106 <_ZN9CMBSender19StartMODBUSListenerEv>:
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	fc 01       	movw	r30, r24
    510c:	11 8a       	std	Z+17, r1	; 0x11
    510e:	16 82       	std	Z+6, r1	; 0x06
    5110:	14 8a       	std	Z+20, r1	; 0x14
    5112:	15 8a       	std	Z+21, r1	; 0x15
    5114:	16 8a       	std	Z+22, r1	; 0x16
    5116:	17 8a       	std	Z+23, r1	; 0x17
    5118:	10 8a       	std	Z+16, r1	; 0x10
    511a:	86 85       	ldd	r24, Z+14	; 0x0e
    511c:	97 85       	ldd	r25, Z+15	; 0x0f
    511e:	ec 01       	movw	r28, r24
    5120:	a8 81       	ld	r26, Y
    5122:	b9 81       	ldd	r27, Y+1	; 0x01
    5124:	62 89       	ldd	r22, Z+18	; 0x12
    5126:	73 89       	ldd	r23, Z+19	; 0x13
    5128:	12 96       	adiw	r26, 0x02	; 2
    512a:	ed 91       	ld	r30, X+
    512c:	fc 91       	ld	r31, X
    512e:	13 97       	sbiw	r26, 0x03	; 3
    5130:	19 95       	eicall
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	08 95       	ret

00005138 <_ZN9CMBSender14OnTransmitByteEv>:
    5138:	cf 93       	push	r28
    513a:	df 93       	push	r29
    513c:	ec 01       	movw	r28, r24
    513e:	88 8d       	ldd	r24, Y+24	; 0x18
    5140:	84 30       	cpi	r24, 0x04	; 4
    5142:	38 f4       	brcc	.+14     	; 0x5152 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    5144:	82 30       	cpi	r24, 0x02	; 2
    5146:	b8 f5       	brcc	.+110    	; 0x51b6 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    5148:	88 23       	and	r24, r24
    514a:	31 f0       	breq	.+12     	; 0x5158 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    514c:	81 30       	cpi	r24, 0x01	; 1
    514e:	d1 f0       	breq	.+52     	; 0x5184 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    5150:	39 c0       	rjmp	.+114    	; 0x51c4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5152:	85 30       	cpi	r24, 0x05	; 5
    5154:	81 f1       	breq	.+96     	; 0x51b6 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    5156:	36 c0       	rjmp	.+108    	; 0x51c4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	88 8f       	std	Y+24, r24	; 0x18
    515c:	19 8e       	std	Y+25, r1	; 0x19
    515e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5160:	9d 85       	ldd	r25, Y+13	; 0x0d
    5162:	29 8d       	ldd	r18, Y+25	; 0x19
    5164:	dc 01       	movw	r26, r24
    5166:	ed 91       	ld	r30, X+
    5168:	fc 91       	ld	r31, X
    516a:	ac 81       	ldd	r26, Y+4	; 0x04
    516c:	bd 81       	ldd	r27, Y+5	; 0x05
    516e:	a2 0f       	add	r26, r18
    5170:	b1 1d       	adc	r27, r1
    5172:	04 80       	ldd	r0, Z+4	; 0x04
    5174:	f5 81       	ldd	r31, Z+5	; 0x05
    5176:	e0 2d       	mov	r30, r0
    5178:	6c 91       	ld	r22, X
    517a:	19 95       	eicall
    517c:	89 8d       	ldd	r24, Y+25	; 0x19
    517e:	8f 5f       	subi	r24, 0xFF	; 255
    5180:	89 8f       	std	Y+25, r24	; 0x19
    5182:	20 c0       	rjmp	.+64     	; 0x51c4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5184:	8c 85       	ldd	r24, Y+12	; 0x0c
    5186:	9d 85       	ldd	r25, Y+13	; 0x0d
    5188:	29 8d       	ldd	r18, Y+25	; 0x19
    518a:	dc 01       	movw	r26, r24
    518c:	ed 91       	ld	r30, X+
    518e:	fc 91       	ld	r31, X
    5190:	ac 81       	ldd	r26, Y+4	; 0x04
    5192:	bd 81       	ldd	r27, Y+5	; 0x05
    5194:	a2 0f       	add	r26, r18
    5196:	b1 1d       	adc	r27, r1
    5198:	04 80       	ldd	r0, Z+4	; 0x04
    519a:	f5 81       	ldd	r31, Z+5	; 0x05
    519c:	e0 2d       	mov	r30, r0
    519e:	6c 91       	ld	r22, X
    51a0:	19 95       	eicall
    51a2:	89 8d       	ldd	r24, Y+25	; 0x19
    51a4:	8f 5f       	subi	r24, 0xFF	; 255
    51a6:	89 8f       	std	Y+25, r24	; 0x19
    51a8:	99 8d       	ldd	r25, Y+25	; 0x19
    51aa:	89 85       	ldd	r24, Y+9	; 0x09
    51ac:	98 13       	cpse	r25, r24
    51ae:	0a c0       	rjmp	.+20     	; 0x51c4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    51b0:	83 e0       	ldi	r24, 0x03	; 3
    51b2:	88 8f       	std	Y+24, r24	; 0x18
    51b4:	07 c0       	rjmp	.+14     	; 0x51c4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    51b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    51b8:	88 23       	and	r24, r24
    51ba:	19 f0       	breq	.+6      	; 0x51c2 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    51bc:	ce 01       	movw	r24, r28
    51be:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN9CMBSender19StartMODBUSListenerEv>
    51c2:	1a 8e       	std	Y+26, r1	; 0x1a
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	08 95       	ret

000051ca <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    51ca:	0e 94 9c 28 	call	0x5138	; 0x5138 <_ZN9CMBSender14OnTransmitByteEv>
    51ce:	08 95       	ret

000051d0 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    51d0:	fc 01       	movw	r30, r24
    51d2:	06 c0       	rjmp	.+12     	; 0x51e0 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    51d4:	80 89       	ldd	r24, Z+16	; 0x10
    51d6:	89 30       	cpi	r24, 0x09	; 9
    51d8:	41 f0       	breq	.+16     	; 0x51ea <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    51da:	80 89       	ldd	r24, Z+16	; 0x10
    51dc:	8a 30       	cpi	r24, 0x0A	; 10
    51de:	39 f0       	breq	.+14     	; 0x51ee <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    51e0:	80 89       	ldd	r24, Z+16	; 0x10
    51e2:	88 30       	cpi	r24, 0x08	; 8
    51e4:	b9 f7       	brne	.-18     	; 0x51d4 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	08 95       	ret
    51ea:	82 e0       	ldi	r24, 0x02	; 2
    51ec:	08 95       	ret
    51ee:	83 e0       	ldi	r24, 0x03	; 3
    51f0:	08 95       	ret

000051f2 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    51f2:	cf 93       	push	r28
    51f4:	df 93       	push	r29
    51f6:	ec 01       	movw	r28, r24
    51f8:	19 8e       	std	Y+25, r1	; 0x19
    51fa:	18 8e       	std	Y+24, r1	; 0x18
    51fc:	0e 94 9c 28 	call	0x5138	; 0x5138 <_ZN9CMBSender14OnTransmitByteEv>
    5200:	8e 85       	ldd	r24, Y+14	; 0x0e
    5202:	9f 85       	ldd	r25, Y+15	; 0x0f
    5204:	dc 01       	movw	r26, r24
    5206:	ed 91       	ld	r30, X+
    5208:	fc 91       	ld	r31, X
    520a:	6a 89       	ldd	r22, Y+18	; 0x12
    520c:	7b 89       	ldd	r23, Y+19	; 0x13
    520e:	02 80       	ldd	r0, Z+2	; 0x02
    5210:	f3 81       	ldd	r31, Z+3	; 0x03
    5212:	e0 2d       	mov	r30, r0
    5214:	19 95       	eicall
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	08 95       	ret

0000521c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    521c:	cf 93       	push	r28
    521e:	df 93       	push	r29
    5220:	ec 01       	movw	r28, r24
    5222:	e8 81       	ld	r30, Y
    5224:	f9 81       	ldd	r31, Y+1	; 0x01
    5226:	02 84       	ldd	r0, Z+10	; 0x0a
    5228:	f3 85       	ldd	r31, Z+11	; 0x0b
    522a:	e0 2d       	mov	r30, r0
    522c:	19 95       	eicall
    522e:	ce 01       	movw	r24, r28
    5230:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	08 95       	ret

0000523a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	ec 01       	movw	r28, r24
    5240:	e8 81       	ld	r30, Y
    5242:	f9 81       	ldd	r31, Y+1	; 0x01
    5244:	06 84       	ldd	r0, Z+14	; 0x0e
    5246:	f7 85       	ldd	r31, Z+15	; 0x0f
    5248:	e0 2d       	mov	r30, r0
    524a:	19 95       	eicall
    524c:	ce 01       	movw	r24, r28
    524e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5252:	df 91       	pop	r29
    5254:	cf 91       	pop	r28
    5256:	08 95       	ret

00005258 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	ec 01       	movw	r28, r24
    525e:	e8 81       	ld	r30, Y
    5260:	f9 81       	ldd	r31, Y+1	; 0x01
    5262:	04 84       	ldd	r0, Z+12	; 0x0c
    5264:	f5 85       	ldd	r31, Z+13	; 0x0d
    5266:	e0 2d       	mov	r30, r0
    5268:	19 95       	eicall
    526a:	ce 01       	movw	r24, r28
    526c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5270:	df 91       	pop	r29
    5272:	cf 91       	pop	r28
    5274:	08 95       	ret

00005276 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	ec 01       	movw	r28, r24
    527c:	e8 81       	ld	r30, Y
    527e:	f9 81       	ldd	r31, Y+1	; 0x01
    5280:	50 e0       	ldi	r21, 0x00	; 0
    5282:	00 88       	ldd	r0, Z+16	; 0x10
    5284:	f1 89       	ldd	r31, Z+17	; 0x11
    5286:	e0 2d       	mov	r30, r0
    5288:	19 95       	eicall
    528a:	ce 01       	movw	r24, r28
    528c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5290:	df 91       	pop	r29
    5292:	cf 91       	pop	r28
    5294:	08 95       	ret

00005296 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    5296:	fc 01       	movw	r30, r24
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    529a:	80 8d       	ldd	r24, Z+24	; 0x18
    529c:	84 30       	cpi	r24, 0x04	; 4
    529e:	41 f0       	breq	.+16     	; 0x52b0 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    52a0:	80 8d       	ldd	r24, Z+24	; 0x18
    52a2:	85 30       	cpi	r24, 0x05	; 5
    52a4:	39 f0       	breq	.+14     	; 0x52b4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    52a6:	80 8d       	ldd	r24, Z+24	; 0x18
    52a8:	83 30       	cpi	r24, 0x03	; 3
    52aa:	b9 f7       	brne	.-18     	; 0x529a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	08 95       	ret
    52b0:	82 e0       	ldi	r24, 0x02	; 2
    52b2:	08 95       	ret
    52b4:	83 e0       	ldi	r24, 0x03	; 3
    52b6:	08 95       	ret

000052b8 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    52b8:	21 e0       	ldi	r18, 0x01	; 1
    52ba:	fc 01       	movw	r30, r24
    52bc:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    52be:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    52c2:	08 95       	ret

000052c4 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    52c4:	21 e0       	ldi	r18, 0x01	; 1
    52c6:	fc 01       	movw	r30, r24
    52c8:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    52ca:	0e 94 3b 29 	call	0x5276	; 0x5276 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    52ce:	08 95       	ret

000052d0 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    52d0:	0f 93       	push	r16
    52d2:	1f 93       	push	r17
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	8c 01       	movw	r16, r24
    52da:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    52dc:	98 81       	ld	r25, Y
    52de:	91 38       	cpi	r25, 0x81	; 129
    52e0:	69 f4       	brne	.+26     	; 0x52fc <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    52e2:	d8 01       	movw	r26, r16
    52e4:	ed 91       	ld	r30, X+
    52e6:	fc 91       	ld	r31, X
    52e8:	04 80       	ldd	r0, Z+4	; 0x04
    52ea:	f5 81       	ldd	r31, Z+5	; 0x05
    52ec:	e0 2d       	mov	r30, r0
    52ee:	2a 81       	ldd	r18, Y+2	; 0x02
    52f0:	ab 01       	movw	r20, r22
    52f2:	4d 5f       	subi	r20, 0xFD	; 253
    52f4:	5f 4f       	sbci	r21, 0xFF	; 255
    52f6:	69 81       	ldd	r22, Y+1	; 0x01
    52f8:	c8 01       	movw	r24, r16
    52fa:	19 95       	eicall
	}
	if (data[0] == 0x83)
    52fc:	98 81       	ld	r25, Y
    52fe:	93 38       	cpi	r25, 0x83	; 131
    5300:	99 f4       	brne	.+38     	; 0x5328 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5302:	d8 01       	movw	r26, r16
    5304:	ed 91       	ld	r30, X+
    5306:	fc 91       	ld	r31, X
    5308:	2b 81       	ldd	r18, Y+3	; 0x03
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	ae 01       	movw	r20, r28
    530e:	4c 5f       	subi	r20, 0xFC	; 252
    5310:	5f 4f       	sbci	r21, 0xFF	; 255
    5312:	69 81       	ldd	r22, Y+1	; 0x01
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	76 2f       	mov	r23, r22
    5318:	66 27       	eor	r22, r22
    531a:	8a 81       	ldd	r24, Y+2	; 0x02
    531c:	68 2b       	or	r22, r24
    531e:	02 80       	ldd	r0, Z+2	; 0x02
    5320:	f3 81       	ldd	r31, Z+3	; 0x03
    5322:	e0 2d       	mov	r30, r0
    5324:	c8 01       	movw	r24, r16
    5326:	19 95       	eicall
	}
}
    5328:	df 91       	pop	r29
    532a:	cf 91       	pop	r28
    532c:	1f 91       	pop	r17
    532e:	0f 91       	pop	r16
    5330:	08 95       	ret

00005332 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    5332:	0e 94 68 29 	call	0x52d0	; 0x52d0 <_ZN9CMBSender18ProcessTransactionEPhj>
    5336:	08 95       	ret

00005338 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    5338:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    533a:	e0 e6       	ldi	r30, 0x60	; 96
    533c:	f6 e0       	ldi	r31, 0x06	; 6
    533e:	88 e0       	ldi	r24, 0x08	; 8
    5340:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    5342:	84 e0       	ldi	r24, 0x04	; 4
    5344:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    5346:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    5348:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    534a:	e0 ea       	ldi	r30, 0xA0	; 160
    534c:	f9 e0       	ldi	r31, 0x09	; 9
    534e:	84 e1       	ldi	r24, 0x14	; 20
    5350:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    5352:	88 e1       	ldi	r24, 0x18	; 24
    5354:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    5356:	84 81       	ldd	r24, Z+4	; 0x04
    5358:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    535a:	41 30       	cpi	r20, 0x01	; 1
    535c:	19 f0       	breq	.+6      	; 0x5364 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    535e:	42 30       	cpi	r20, 0x02	; 2
    5360:	19 f0       	breq	.+6      	; 0x5368 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    5362:	04 c0       	rjmp	.+8      	; 0x536c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    5364:	80 e2       	ldi	r24, 0x20	; 32
    5366:	03 c0       	rjmp	.+6      	; 0x536e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    5368:	80 e3       	ldi	r24, 0x30	; 48
		break;
    536a:	01 c0       	rjmp	.+2      	; 0x536e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    536c:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    536e:	22 23       	and	r18, r18
    5370:	19 f0       	breq	.+6      	; 0x5378 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    5372:	21 30       	cpi	r18, 0x01	; 1
    5374:	19 f0       	breq	.+6      	; 0x537c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    5376:	03 c0       	rjmp	.+6      	; 0x537e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    5378:	87 7f       	andi	r24, 0xF7	; 247
		break;
    537a:	01 c0       	rjmp	.+2      	; 0x537e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    537c:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    537e:	01 11       	cpse	r16, r1
    5380:	02 c0       	rjmp	.+4      	; 0x5386 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    5382:	93 e4       	ldi	r25, 0x43	; 67
    5384:	01 c0       	rjmp	.+2      	; 0x5388 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    5386:	93 e0       	ldi	r25, 0x03	; 3
    5388:	89 2b       	or	r24, r25
    538a:	e0 ea       	ldi	r30, 0xA0	; 160
    538c:	f9 e0       	ldi	r31, 0x09	; 9
    538e:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	db 01       	movw	r26, r22
    5394:	ac 5b       	subi	r26, 0xBC	; 188
    5396:	be 4d       	sbci	r27, 0xDE	; 222
    5398:	8c 91       	ld	r24, X
    539a:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    539c:	db 01       	movw	r26, r22
    539e:	ac 5d       	subi	r26, 0xDC	; 220
    53a0:	be 4d       	sbci	r27, 0xDE	; 222
    53a2:	8c 91       	ld	r24, X
    53a4:	82 95       	swap	r24
    53a6:	80 7f       	andi	r24, 0xF0	; 240
    53a8:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    53aa:	0f 91       	pop	r16
    53ac:	08 95       	ret

000053ae <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    53ae:	80 91 a0 09 	lds	r24, 0x09A0
}
    53b2:	08 95       	ret

000053b4 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    53b4:	60 93 a0 09 	sts	0x09A0, r22
    53b8:	08 95       	ret

000053ba <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    53ba:	80 91 a1 09 	lds	r24, 0x09A1
    53be:	86 fb       	bst	r24, 6
    53c0:	88 27       	eor	r24, r24
    53c2:	80 f9       	bld	r24, 0
}
    53c4:	91 e0       	ldi	r25, 0x01	; 1
    53c6:	89 27       	eor	r24, r25
    53c8:	08 95       	ret

000053ca <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    53ca:	80 91 a1 09 	lds	r24, 0x09A1
    53ce:	80 95       	com	r24
}
    53d0:	88 1f       	adc	r24, r24
    53d2:	88 27       	eor	r24, r24
    53d4:	88 1f       	adc	r24, r24
    53d6:	08 95       	ret

000053d8 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    53d8:	80 91 a1 09 	lds	r24, 0x09A1
    53dc:	85 fb       	bst	r24, 5
    53de:	88 27       	eor	r24, r24
    53e0:	80 f9       	bld	r24, 0
}
    53e2:	91 e0       	ldi	r25, 0x01	; 1
    53e4:	89 27       	eor	r24, r25
    53e6:	08 95       	ret

000053e8 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    53e8:	60 93 5c 24 	sts	0x245C, r22
    53ec:	70 93 5d 24 	sts	0x245D, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    53f0:	40 93 66 23 	sts	0x2366, r20
    53f4:	50 93 67 23 	sts	0x2367, r21
    53f8:	08 95       	ret

000053fa <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    53fa:	60 93 60 24 	sts	0x2460, r22
    53fe:	70 93 61 24 	sts	0x2461, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    5402:	40 93 6a 23 	sts	0x236A, r20
    5406:	50 93 6b 23 	sts	0x236B, r21
    540a:	08 95       	ret

0000540c <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    540c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    540e:	8b e6       	ldi	r24, 0x6B	; 107
    5410:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    5412:	80 ea       	ldi	r24, 0xA0	; 160
    5414:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    5416:	89 e0       	ldi	r24, 0x09	; 9
    5418:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    541a:	12 86       	std	Z+10, r1	; 0x0a
    541c:	08 95       	ret

0000541e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    541e:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    5420:	8c e6       	ldi	r24, 0x6C	; 108
    5422:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    5424:	80 ea       	ldi	r24, 0xA0	; 160
    5426:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    5428:	89 e0       	ldi	r24, 0x09	; 9
    542a:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    542c:	16 86       	std	Z+14, r1	; 0x0e
    542e:	08 95       	ret

00005430 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	ec 01       	movw	r28, r24
    5436:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN6CUSARTC1Ev>
    543a:	8e ee       	ldi	r24, 0xEE	; 238
    543c:	91 e2       	ldi	r25, 0x21	; 33
    543e:	88 83       	st	Y, r24
    5440:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	08 95       	ret

00005448 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    5448:	2e ee       	ldi	r18, 0xEE	; 238
    544a:	31 e2       	ldi	r19, 0x21	; 33
    544c:	fc 01       	movw	r30, r24
    544e:	20 83       	st	Z, r18
    5450:	31 83       	std	Z+1, r19	; 0x01
    5452:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN6CUSARTD1Ev>
    5456:	08 95       	ret

00005458 <_ZN8CDS18B20C1Ev>:
#define F_CPU	32000000

#include <util/delay.h>

// default constructor
CDS18B20::CDS18B20()
    5458:	08 95       	ret

0000545a <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    545a:	08 95       	ret

0000545c <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    545c:	e0 e6       	ldi	r30, 0x60	; 96
    545e:	f6 e0       	ldi	r31, 0x06	; 6
    5460:	80 e8       	ldi	r24, 0x80	; 128
    5462:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5464:	a7 e2       	ldi	r26, 0x27	; 39
    5466:	bf e0       	ldi	r27, 0x0F	; 15
    5468:	11 97       	sbiw	r26, 0x01	; 1
    546a:	f1 f7       	brne	.-4      	; 0x5468 <_ZN8CDS18B207w1_findEv+0xc>
    546c:	00 c0       	rjmp	.+0      	; 0x546e <_ZN8CDS18B207w1_findEv+0x12>
    546e:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    5470:	82 83       	std	Z+2, r24	; 0x02
    5472:	87 e0       	ldi	r24, 0x07	; 7
    5474:	92 e0       	ldi	r25, 0x02	; 2
    5476:	01 97       	sbiw	r24, 0x01	; 1
    5478:	f1 f7       	brne	.-4      	; 0x5476 <_ZN8CDS18B207w1_findEv+0x1a>
    547a:	00 c0       	rjmp	.+0      	; 0x547c <_ZN8CDS18B207w1_findEv+0x20>
    547c:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    547e:	80 85       	ldd	r24, Z+8	; 0x08
    5480:	af e1       	ldi	r26, 0x1F	; 31
    5482:	bd e0       	ldi	r27, 0x0D	; 13
    5484:	11 97       	sbiw	r26, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <_ZN8CDS18B207w1_findEv+0x28>
    5488:	00 c0       	rjmp	.+0      	; 0x548a <_ZN8CDS18B207w1_findEv+0x2e>
    548a:	00 00       	nop
    548c:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    548e:	88 1f       	adc	r24, r24
    5490:	88 27       	eor	r24, r24
    5492:	88 1f       	adc	r24, r24
    5494:	08 95       	ret

00005496 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    5496:	cf 93       	push	r28
    5498:	df 93       	push	r29
    549a:	80 e0       	ldi	r24, 0x00	; 0
    549c:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    549e:	c1 e0       	ldi	r28, 0x01	; 1
    54a0:	d0 e0       	ldi	r29, 0x00	; 0
    54a2:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    54a4:	e0 e6       	ldi	r30, 0x60	; 96
    54a6:	f6 e0       	ldi	r31, 0x06	; 6
    54a8:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    54aa:	9e 01       	movw	r18, r28
    54ac:	08 2e       	mov	r0, r24
    54ae:	02 c0       	rjmp	.+4      	; 0x54b4 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    54b0:	22 0f       	add	r18, r18
    54b2:	33 1f       	adc	r19, r19
    54b4:	0a 94       	dec	r0
    54b6:	e2 f7       	brpl	.-8      	; 0x54b0 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    54b8:	d9 01       	movw	r26, r18
    54ba:	a6 23       	and	r26, r22
    54bc:	b7 23       	and	r27, r23
    54be:	2a 17       	cp	r18, r26
    54c0:	3b 07       	cpc	r19, r27
    54c2:	69 f4       	brne	.+26     	; 0x54de <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    54c4:	41 83       	std	Z+1, r20	; 0x01
    54c6:	25 e1       	ldi	r18, 0x15	; 21
    54c8:	2a 95       	dec	r18
    54ca:	f1 f7       	brne	.-4      	; 0x54c8 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    54cc:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    54ce:	42 83       	std	Z+2, r20	; 0x02
    54d0:	a7 e0       	ldi	r26, 0x07	; 7
    54d2:	b2 e0       	ldi	r27, 0x02	; 2
    54d4:	11 97       	sbiw	r26, 0x01	; 1
    54d6:	f1 f7       	brne	.-4      	; 0x54d4 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    54d8:	00 c0       	rjmp	.+0      	; 0x54da <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    54da:	00 00       	nop
    54dc:	0c c0       	rjmp	.+24     	; 0x54f6 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    54de:	41 83       	std	Z+1, r20	; 0x01
    54e0:	a7 e0       	ldi	r26, 0x07	; 7
    54e2:	b2 e0       	ldi	r27, 0x02	; 2
    54e4:	11 97       	sbiw	r26, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    54e8:	00 c0       	rjmp	.+0      	; 0x54ea <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    54ea:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    54ec:	42 83       	std	Z+2, r20	; 0x02
    54ee:	b5 e3       	ldi	r27, 0x35	; 53
    54f0:	ba 95       	dec	r27
    54f2:	f1 f7       	brne	.-4      	; 0x54f0 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    54f4:	00 00       	nop
    54f6:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    54f8:	88 30       	cpi	r24, 0x08	; 8
    54fa:	91 05       	cpc	r25, r1
    54fc:	b1 f6       	brne	.-84     	; 0x54aa <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    54fe:	df 91       	pop	r29
    5500:	cf 91       	pop	r28
    5502:	08 95       	ret

00005504 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    5508:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    550a:	e0 e6       	ldi	r30, 0x60	; 96
    550c:	f6 e0       	ldi	r31, 0x06	; 6
    550e:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    5510:	61 e0       	ldi	r22, 0x01	; 1
    5512:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    5514:	91 83       	std	Z+1, r25	; 0x01
    5516:	45 e1       	ldi	r20, 0x15	; 21
    5518:	4a 95       	dec	r20
    551a:	f1 f7       	brne	.-4      	; 0x5518 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    551c:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    551e:	92 83       	std	Z+2, r25	; 0x02
    5520:	aa e6       	ldi	r26, 0x6A	; 106
    5522:	aa 95       	dec	r26
    5524:	f1 f7       	brne	.-4      	; 0x5522 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    5526:	00 c0       	rjmp	.+0      	; 0x5528 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    5528:	40 85       	ldd	r20, Z+8	; 0x08
    552a:	44 23       	and	r20, r20
    552c:	54 f0       	brlt	.+20     	; 0x5542 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    552e:	ab 01       	movw	r20, r22
    5530:	02 2e       	mov	r0, r18
    5532:	02 c0       	rjmp	.+4      	; 0x5538 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    5534:	44 0f       	add	r20, r20
    5536:	55 1f       	adc	r21, r21
    5538:	0a 94       	dec	r0
    553a:	e2 f7       	brpl	.-8      	; 0x5534 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    553c:	40 95       	com	r20
    553e:	84 23       	and	r24, r20
    5540:	08 c0       	rjmp	.+16     	; 0x5552 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    5542:	ab 01       	movw	r20, r22
    5544:	02 2e       	mov	r0, r18
    5546:	02 c0       	rjmp	.+4      	; 0x554c <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    5548:	44 0f       	add	r20, r20
    554a:	55 1f       	adc	r21, r21
    554c:	0a 94       	dec	r0
    554e:	e2 f7       	brpl	.-8      	; 0x5548 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    5550:	84 2b       	or	r24, r20
    5552:	af e8       	ldi	r26, 0x8F	; 143
    5554:	b1 e0       	ldi	r27, 0x01	; 1
    5556:	11 97       	sbiw	r26, 0x01	; 1
    5558:	f1 f7       	brne	.-4      	; 0x5556 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    555a:	00 c0       	rjmp	.+0      	; 0x555c <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    555c:	00 00       	nop
    555e:	2f 5f       	subi	r18, 0xFF	; 255
    5560:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    5562:	28 30       	cpi	r18, 0x08	; 8
    5564:	31 05       	cpc	r19, r1
    5566:	b1 f6       	brne	.-84     	; 0x5514 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    5568:	08 95       	ret

0000556a <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    556a:	1f 93       	push	r17
    556c:	cf 93       	push	r28
    556e:	df 93       	push	r29
    5570:	ec 01       	movw	r28, r24
	unsigned char data[2];
	int temp = 0;
	
	if (req)
    5572:	8a 81       	ldd	r24, Y+2	; 0x02
    5574:	88 23       	and	r24, r24
    5576:	91 f0       	breq	.+36     	; 0x559c <_ZN8CDS18B2010temp_18b20Ev+0x32>
	{
		if(w1_find())
    5578:	ce 01       	movw	r24, r28
    557a:	0e 94 2e 2a 	call	0x545c	; 0x545c <_ZN8CDS18B207w1_findEv>
    557e:	88 23       	and	r24, r24
    5580:	59 f0       	breq	.+22     	; 0x5598 <_ZN8CDS18B2010temp_18b20Ev+0x2e>
		{
			w1_sendcmd(0xcc);	//skip ROM
    5582:	6c ec       	ldi	r22, 0xCC	; 204
    5584:	ce 01       	movw	r24, r28
    5586:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    558a:	64 e4       	ldi	r22, 0x44	; 68
    558c:	ce 01       	movw	r24, r28
    558e:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	8b 83       	std	Y+3, r24	; 0x03
    5596:	2a c0       	rjmp	.+84     	; 0x55ec <_ZN8CDS18B2010temp_18b20Ev+0x82>
		}
		else
			find = false;
    5598:	1b 82       	std	Y+3, r1	; 0x03
    559a:	28 c0       	rjmp	.+80     	; 0x55ec <_ZN8CDS18B2010temp_18b20Ev+0x82>
	}
	else
	{
		if (find)
    559c:	8b 81       	ldd	r24, Y+3	; 0x03
    559e:	88 23       	and	r24, r24
    55a0:	29 f1       	breq	.+74     	; 0x55ec <_ZN8CDS18B2010temp_18b20Ev+0x82>
		{
			w1_find();
    55a2:	ce 01       	movw	r24, r28
    55a4:	0e 94 2e 2a 	call	0x545c	; 0x545c <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    55a8:	6c ec       	ldi	r22, 0xCC	; 204
    55aa:	ce 01       	movw	r24, r28
    55ac:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    55b0:	6e eb       	ldi	r22, 0xBE	; 190
    55b2:	ce 01       	movw	r24, r28
    55b4:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN8CDS18B2010w1_sendcmdEh>
			data[0] = w1_receive_byte();
    55b8:	ce 01       	movw	r24, r28
    55ba:	0e 94 82 2a 	call	0x5504	; 0x5504 <_ZN8CDS18B2015w1_receive_byteEv>
    55be:	18 2f       	mov	r17, r24
			data[1] = w1_receive_byte();
    55c0:	ce 01       	movw	r24, r28
    55c2:	0e 94 82 2a 	call	0x5504	; 0x5504 <_ZN8CDS18B2015w1_receive_byteEv>
			
			temp = data[1];
			temp = temp<<8;
    55c6:	61 2f       	mov	r22, r17
    55c8:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    55ca:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    55cc:	07 2e       	mov	r0, r23
    55ce:	00 0c       	add	r0, r0
    55d0:	88 0b       	sbc	r24, r24
    55d2:	99 0b       	sbc	r25, r25
    55d4:	0e 94 b4 30 	call	0x6168	; 0x6168 <__floatsisf>
    55d8:	20 e0       	ldi	r18, 0x00	; 0
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	40 e2       	ldi	r20, 0x20	; 32
    55de:	5f e3       	ldi	r21, 0x3F	; 63
    55e0:	0e 94 18 31 	call	0x6230	; 0x6230 <__mulsf3>
    55e4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__fixsfsi>
    55e8:	68 83       	st	Y, r22
    55ea:	79 83       	std	Y+1, r23	; 0x01
			
			temperature = temp;
		}
	}
	
	req = !req;
    55ec:	9a 81       	ldd	r25, Y+2	; 0x02
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	89 27       	eor	r24, r25
    55f2:	8a 83       	std	Y+2, r24	; 0x02
	
	return temperature;
}
    55f4:	88 81       	ld	r24, Y
    55f6:	99 81       	ldd	r25, Y+1	; 0x01
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	1f 91       	pop	r17
    55fe:	08 95       	ret

00005600 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    5600:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    5602:	a0 e6       	ldi	r26, 0x60	; 96
    5604:	b6 e0       	ldi	r27, 0x06	; 6
    5606:	80 e8       	ldi	r24, 0x80	; 128
    5608:	16 96       	adiw	r26, 0x06	; 6
    560a:	8c 93       	st	X, r24
    560c:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    560e:	57 96       	adiw	r26, 0x17	; 23
    5610:	1c 92       	st	X, r1
	
	temperature = 0;
    5612:	10 82       	st	Z, r1
    5614:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    5616:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	82 83       	std	Z+2, r24	; 0x02
    561c:	08 95       	ret

0000561e <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    561e:	08 95       	ret

00005620 <_ZN11CLaserBoardD1Ev>:
    5620:	08 95       	ret

00005622 <_ZN11CLaserBoard12InitializeIOEv>:
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	ec 01       	movw	r28, r24
    5628:	e0 e4       	ldi	r30, 0x40	; 64
    562a:	f6 e0       	ldi	r31, 0x06	; 6
    562c:	11 82       	std	Z+1, r1	; 0x01
    562e:	98 ea       	ldi	r25, 0xA8	; 168
    5630:	90 8b       	std	Z+16, r25	; 0x10
    5632:	91 8b       	std	Z+17, r25	; 0x11
    5634:	92 8b       	std	Z+18, r25	; 0x12
    5636:	93 8b       	std	Z+19, r25	; 0x13
    5638:	94 8b       	std	Z+20, r25	; 0x14
    563a:	95 8b       	std	Z+21, r25	; 0x15
    563c:	96 8b       	std	Z+22, r25	; 0x16
    563e:	97 8b       	std	Z+23, r25	; 0x17
    5640:	2f ef       	ldi	r18, 0xFF	; 255
    5642:	24 83       	std	Z+4, r18	; 0x04
    5644:	a0 e8       	ldi	r26, 0x80	; 128
    5646:	b6 e0       	ldi	r27, 0x06	; 6
    5648:	88 e0       	ldi	r24, 0x08	; 8
    564a:	11 96       	adiw	r26, 0x01	; 1
    564c:	8c 93       	st	X, r24
    564e:	11 97       	sbiw	r26, 0x01	; 1
    5650:	53 96       	adiw	r26, 0x13	; 19
    5652:	1c 92       	st	X, r1
    5654:	53 97       	sbiw	r26, 0x13	; 19
    5656:	14 96       	adiw	r26, 0x04	; 4
    5658:	1c 92       	st	X, r1
    565a:	14 97       	sbiw	r26, 0x04	; 4
    565c:	e0 ea       	ldi	r30, 0xA0	; 160
    565e:	f6 e0       	ldi	r31, 0x06	; 6
    5660:	90 ec       	ldi	r25, 0xC0	; 192
    5662:	90 8b       	std	Z+16, r25	; 0x10
    5664:	80 e8       	ldi	r24, 0x80	; 128
    5666:	81 8b       	std	Z+17, r24	; 0x11
    5668:	92 8b       	std	Z+18, r25	; 0x12
    566a:	93 8b       	std	Z+19, r25	; 0x13
    566c:	94 8b       	std	Z+20, r25	; 0x14
    566e:	95 8b       	std	Z+21, r25	; 0x15
    5670:	96 8b       	std	Z+22, r25	; 0x16
    5672:	97 8b       	std	Z+23, r25	; 0x17
    5674:	14 82       	std	Z+4, r1	; 0x04
    5676:	21 83       	std	Z+1, r18	; 0x01
    5678:	e0 e6       	ldi	r30, 0x60	; 96
    567a:	f6 e0       	ldi	r31, 0x06	; 6
    567c:	21 e1       	ldi	r18, 0x11	; 17
    567e:	21 83       	std	Z+1, r18	; 0x01
    5680:	90 8b       	std	Z+16, r25	; 0x10
    5682:	94 8b       	std	Z+20, r25	; 0x14
    5684:	15 8a       	std	Z+21, r1	; 0x15
    5686:	14 82       	std	Z+4, r1	; 0x04
    5688:	97 e0       	ldi	r25, 0x07	; 7
    568a:	11 96       	adiw	r26, 0x01	; 1
    568c:	9c 93       	st	X, r25
    568e:	11 97       	sbiw	r26, 0x01	; 1
    5690:	50 96       	adiw	r26, 0x10	; 16
    5692:	8c 93       	st	X, r24
    5694:	50 97       	sbiw	r26, 0x10	; 16
    5696:	51 96       	adiw	r26, 0x11	; 17
    5698:	8c 93       	st	X, r24
    569a:	51 97       	sbiw	r26, 0x11	; 17
    569c:	52 96       	adiw	r26, 0x12	; 18
    569e:	8c 93       	st	X, r24
    56a0:	52 97       	sbiw	r26, 0x12	; 18
    56a2:	14 96       	adiw	r26, 0x04	; 4
    56a4:	1c 92       	st	X, r1
    56a6:	e0 ea       	ldi	r30, 0xA0	; 160
    56a8:	f0 e0       	ldi	r31, 0x00	; 0
    56aa:	82 81       	ldd	r24, Z+2	; 0x02
    56ac:	81 60       	ori	r24, 0x01	; 1
    56ae:	82 83       	std	Z+2, r24	; 0x02
    56b0:	82 81       	ldd	r24, Z+2	; 0x02
    56b2:	82 60       	ori	r24, 0x02	; 2
    56b4:	82 83       	std	Z+2, r24	; 0x02
    56b6:	82 81       	ldd	r24, Z+2	; 0x02
    56b8:	84 60       	ori	r24, 0x04	; 4
    56ba:	82 83       	std	Z+2, r24	; 0x02
    56bc:	fe 01       	movw	r30, r28
    56be:	9e 01       	movw	r18, r28
    56c0:	28 5f       	subi	r18, 0xF8	; 248
    56c2:	3f 4f       	sbci	r19, 0xFF	; 255
    56c4:	91 e0       	ldi	r25, 0x01	; 1
    56c6:	91 93       	st	Z+, r25
    56c8:	e2 17       	cp	r30, r18
    56ca:	f3 07       	cpc	r31, r19
    56cc:	e1 f7       	brne	.-8      	; 0x56c6 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    56ce:	83 e0       	ldi	r24, 0x03	; 3
    56d0:	88 87       	std	Y+8, r24	; 0x08
    56d2:	e0 e4       	ldi	r30, 0x40	; 64
    56d4:	f6 e0       	ldi	r31, 0x06	; 6
    56d6:	81 e0       	ldi	r24, 0x01	; 1
    56d8:	82 87       	std	Z+10, r24	; 0x0a
    56da:	81 87       	std	Z+9, r24	; 0x09
    56dc:	df 91       	pop	r29
    56de:	cf 91       	pop	r28
    56e0:	08 95       	ret

000056e2 <_ZN11CLaserBoard15InitializeClockEv>:
    56e2:	e0 e5       	ldi	r30, 0x50	; 80
    56e4:	f0 e0       	ldi	r31, 0x00	; 0
    56e6:	8b ec       	ldi	r24, 0xCB	; 203
    56e8:	82 83       	std	Z+2, r24	; 0x02
    56ea:	80 81       	ld	r24, Z
    56ec:	88 60       	ori	r24, 0x08	; 8
    56ee:	80 83       	st	Z, r24
    56f0:	81 81       	ldd	r24, Z+1	; 0x01
    56f2:	83 ff       	sbrs	r24, 3
    56f4:	fd cf       	rjmp	.-6      	; 0x56f0 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    56f6:	e0 e5       	ldi	r30, 0x50	; 80
    56f8:	f0 e0       	ldi	r31, 0x00	; 0
    56fa:	85 81       	ldd	r24, Z+5	; 0x05
    56fc:	98 ed       	ldi	r25, 0xD8	; 216
    56fe:	94 bf       	out	0x34, r25	; 52
    5700:	84 ec       	ldi	r24, 0xC4	; 196
    5702:	85 83       	std	Z+5, r24	; 0x05
    5704:	80 81       	ld	r24, Z
    5706:	80 61       	ori	r24, 0x10	; 16
    5708:	80 83       	st	Z, r24
    570a:	e0 e4       	ldi	r30, 0x40	; 64
    570c:	f0 e0       	ldi	r31, 0x00	; 0
    570e:	81 81       	ldd	r24, Z+1	; 0x01
    5710:	94 bf       	out	0x34, r25	; 52
    5712:	11 82       	std	Z+1, r1	; 0x01
    5714:	e0 e5       	ldi	r30, 0x50	; 80
    5716:	f0 e0       	ldi	r31, 0x00	; 0
    5718:	81 81       	ldd	r24, Z+1	; 0x01
    571a:	84 ff       	sbrs	r24, 4
    571c:	fd cf       	rjmp	.-6      	; 0x5718 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    571e:	e0 e4       	ldi	r30, 0x40	; 64
    5720:	f0 e0       	ldi	r31, 0x00	; 0
    5722:	80 81       	ld	r24, Z
    5724:	88 7f       	andi	r24, 0xF8	; 248
    5726:	84 60       	ori	r24, 0x04	; 4
    5728:	98 ed       	ldi	r25, 0xD8	; 216
    572a:	94 bf       	out	0x34, r25	; 52
    572c:	80 83       	st	Z, r24
    572e:	a0 e5       	ldi	r26, 0x50	; 80
    5730:	b0 e0       	ldi	r27, 0x00	; 0
    5732:	8c 91       	ld	r24, X
    5734:	88 7f       	andi	r24, 0xF8	; 248
    5736:	8c 93       	st	X, r24
    5738:	82 81       	ldd	r24, Z+2	; 0x02
    573a:	94 bf       	out	0x34, r25	; 52
    573c:	81 e0       	ldi	r24, 0x01	; 1
    573e:	82 83       	std	Z+2, r24	; 0x02
    5740:	e0 eb       	ldi	r30, 0xB0	; 176
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	84 81       	ldd	r24, Z+4	; 0x04
    5746:	8c 7f       	andi	r24, 0xFC	; 252
    5748:	84 83       	std	Z+4, r24	; 0x04
    574a:	08 95       	ret

0000574c <_ZN11CLaserBoard5PWMOnEv>:
    574c:	84 e0       	ldi	r24, 0x04	; 4
    574e:	80 93 85 06 	sts	0x0685, r24
    5752:	08 95       	ret

00005754 <_ZN11CLaserBoard6PWMOffEv>:
    5754:	84 e0       	ldi	r24, 0x04	; 4
    5756:	80 93 86 06 	sts	0x0686, r24
    575a:	08 95       	ret

0000575c <_ZN11CLaserBoard8Relay1OnEv>:
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	80 93 62 06 	sts	0x0662, r24
    5762:	08 95       	ret

00005764 <_ZN11CLaserBoard8Relay2OnEv>:
    5764:	80 e1       	ldi	r24, 0x10	; 16
    5766:	80 93 62 06 	sts	0x0662, r24
    576a:	08 95       	ret

0000576c <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    576c:	80 e1       	ldi	r24, 0x10	; 16
    576e:	80 93 61 06 	sts	0x0661, r24
    5772:	08 95       	ret

00005774 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    5774:	82 e0       	ldi	r24, 0x02	; 2
    5776:	80 93 85 06 	sts	0x0685, r24
    577a:	08 95       	ret

0000577c <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    577c:	82 e0       	ldi	r24, 0x02	; 2
    577e:	80 93 86 06 	sts	0x0686, r24
    5782:	08 95       	ret

00005784 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    5784:	f8 94       	cli
    5786:	84 e6       	ldi	r24, 0x64	; 100
    5788:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    578a:	e0 e8       	ldi	r30, 0x80	; 128
    578c:	f6 e0       	ldi	r31, 0x06	; 6
    578e:	28 e0       	ldi	r18, 0x08	; 8
    5790:	25 83       	std	Z+5, r18	; 0x05
    5792:	af e9       	ldi	r26, 0x9F	; 159
    5794:	bf e0       	ldi	r27, 0x0F	; 15
    5796:	11 97       	sbiw	r26, 0x01	; 1
    5798:	f1 f7       	brne	.-4      	; 0x5796 <_ZN11CLaserBoard4BeepEv+0x12>
    579a:	00 c0       	rjmp	.+0      	; 0x579c <_ZN11CLaserBoard4BeepEv+0x18>
    579c:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    579e:	26 83       	std	Z+6, r18	; 0x06
    57a0:	af e9       	ldi	r26, 0x9F	; 159
    57a2:	bf e0       	ldi	r27, 0x0F	; 15
    57a4:	11 97       	sbiw	r26, 0x01	; 1
    57a6:	f1 f7       	brne	.-4      	; 0x57a4 <_ZN11CLaserBoard4BeepEv+0x20>
    57a8:	00 c0       	rjmp	.+0      	; 0x57aa <_ZN11CLaserBoard4BeepEv+0x26>
    57aa:	00 00       	nop
    57ac:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    57ae:	81 f7       	brne	.-32     	; 0x5790 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    57b0:	78 94       	sei
    57b2:	08 95       	ret

000057b4 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    57b4:	f8 94       	cli
    57b6:	45 e0       	ldi	r20, 0x05	; 5
    57b8:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    57ba:	64 e6       	ldi	r22, 0x64	; 100
    57bc:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    57be:	e0 e8       	ldi	r30, 0x80	; 128
    57c0:	f6 e0       	ldi	r31, 0x06	; 6
    57c2:	28 e0       	ldi	r18, 0x08	; 8
    57c4:	1c c0       	rjmp	.+56     	; 0x57fe <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    57c6:	25 83       	std	Z+5, r18	; 0x05
    57c8:	af e9       	ldi	r26, 0x9F	; 159
    57ca:	bf e0       	ldi	r27, 0x0F	; 15
    57cc:	11 97       	sbiw	r26, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    57d0:	00 c0       	rjmp	.+0      	; 0x57d2 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    57d2:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    57d4:	26 83       	std	Z+6, r18	; 0x06
    57d6:	af e9       	ldi	r26, 0x9F	; 159
    57d8:	bf e0       	ldi	r27, 0x0F	; 15
    57da:	11 97       	sbiw	r26, 0x01	; 1
    57dc:	f1 f7       	brne	.-4      	; 0x57da <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    57de:	00 c0       	rjmp	.+0      	; 0x57e0 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    57e0:	00 00       	nop
    57e2:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    57e4:	81 f7       	brne	.-32     	; 0x57c6 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    57e6:	bf ef       	ldi	r27, 0xFF	; 255
    57e8:	73 ec       	ldi	r23, 0xC3	; 195
    57ea:	89 e0       	ldi	r24, 0x09	; 9
    57ec:	b1 50       	subi	r27, 0x01	; 1
    57ee:	70 40       	sbci	r23, 0x00	; 0
    57f0:	80 40       	sbci	r24, 0x00	; 0
    57f2:	e1 f7       	brne	.-8      	; 0x57ec <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    57f4:	00 c0       	rjmp	.+0      	; 0x57f6 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    57f6:	00 00       	nop
    57f8:	41 50       	subi	r20, 0x01	; 1
    57fa:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    57fc:	19 f0       	breq	.+6      	; 0x5804 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    57fe:	86 2f       	mov	r24, r22
    5800:	93 2f       	mov	r25, r19
    5802:	e1 cf       	rjmp	.-62     	; 0x57c6 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5804:	78 94       	sei
    5806:	08 95       	ret

00005808 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5808:	20 91 48 06 	lds	r18, 0x0648
    580c:	fc 01       	movw	r30, r24
    580e:	21 87       	std	Z+9, r18	; 0x09
    5810:	08 95       	ret

00005812 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    5812:	fc 01       	movw	r30, r24
    5814:	81 85       	ldd	r24, Z+9	; 0x09
    5816:	81 70       	andi	r24, 0x01	; 1
    5818:	08 95       	ret

0000581a <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    581a:	08 95       	ret

0000581c <_ZN12CSoundPlayerD1Ev>:
    581c:	08 95       	ret

0000581e <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    581e:	e0 e0       	ldi	r30, 0x00	; 0
    5820:	fa e0       	ldi	r31, 0x0A	; 10
    5822:	10 82       	st	Z, r1
    5824:	87 e8       	ldi	r24, 0x87	; 135
    5826:	81 83       	std	Z+1, r24	; 0x01
    5828:	13 82       	std	Z+3, r1	; 0x03
    582a:	84 e2       	ldi	r24, 0x24	; 36
    582c:	94 ef       	ldi	r25, 0xF4	; 244
    582e:	86 a3       	std	Z+38, r24	; 0x26
    5830:	97 a3       	std	Z+39, r25	; 0x27
    5832:	82 e1       	ldi	r24, 0x12	; 18
    5834:	9a e7       	ldi	r25, 0x7A	; 122
    5836:	86 a7       	std	Z+46, r24	; 0x2e
    5838:	97 a7       	std	Z+47, r25	; 0x2f
    583a:	16 82       	std	Z+6, r1	; 0x06
    583c:	17 82       	std	Z+7, r1	; 0x07
    583e:	08 95       	ret

00005840 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    5840:	e0 e4       	ldi	r30, 0x40	; 64
    5842:	fa e0       	ldi	r31, 0x0A	; 10
    5844:	10 82       	st	Z, r1
    5846:	11 82       	std	Z+1, r1	; 0x01
    5848:	13 82       	std	Z+3, r1	; 0x03
    584a:	84 e2       	ldi	r24, 0x24	; 36
    584c:	94 ef       	ldi	r25, 0xF4	; 244
    584e:	86 a3       	std	Z+38, r24	; 0x26
    5850:	97 a3       	std	Z+39, r25	; 0x27
    5852:	16 82       	std	Z+6, r1	; 0x06
    5854:	17 82       	std	Z+7, r1	; 0x07
    5856:	08 95       	ret

00005858 <_ZN12CSoundPlayer10SoundStartEjjh>:
    5858:	0f 93       	push	r16
    585a:	1f 93       	push	r17
    585c:	cf 93       	push	r28
    585e:	8a 01       	movw	r16, r20
    5860:	c2 2f       	mov	r28, r18
    5862:	9b 01       	movw	r18, r22
    5864:	40 e0       	ldi	r20, 0x00	; 0
    5866:	50 e0       	ldi	r21, 0x00	; 0
    5868:	64 e2       	ldi	r22, 0x24	; 36
    586a:	74 ef       	ldi	r23, 0xF4	; 244
    586c:	80 e0       	ldi	r24, 0x00	; 0
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	0e 94 07 32 	call	0x640e	; 0x640e <__divmodsi4>
    5874:	b8 01       	movw	r22, r16
    5876:	76 95       	lsr	r23
    5878:	67 95       	ror	r22
    587a:	ee e3       	ldi	r30, 0x3E	; 62
    587c:	e0 9f       	mul	r30, r16
    587e:	c0 01       	movw	r24, r0
    5880:	e1 9f       	mul	r30, r17
    5882:	90 0d       	add	r25, r0
    5884:	11 24       	eor	r1, r1
    5886:	86 0f       	add	r24, r22
    5888:	97 1f       	adc	r25, r23
    588a:	cf 5f       	subi	r28, 0xFF	; 255
    588c:	b9 01       	movw	r22, r18
    588e:	02 c0       	rjmp	.+4      	; 0x5894 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    5890:	76 95       	lsr	r23
    5892:	67 95       	ror	r22
    5894:	ca 95       	dec	r28
    5896:	e2 f7       	brpl	.-8      	; 0x5890 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    5898:	e0 e0       	ldi	r30, 0x00	; 0
    589a:	fa e0       	ldi	r31, 0x0A	; 10
    589c:	66 a7       	std	Z+46, r22	; 0x2e
    589e:	77 a7       	std	Z+47, r23	; 0x2f
    58a0:	26 a3       	std	Z+38, r18	; 0x26
    58a2:	37 a3       	std	Z+39, r19	; 0x27
    58a4:	a0 e4       	ldi	r26, 0x40	; 64
    58a6:	ba e0       	ldi	r27, 0x0A	; 10
    58a8:	96 96       	adiw	r26, 0x26	; 38
    58aa:	8d 93       	st	X+, r24
    58ac:	9c 93       	st	X, r25
    58ae:	97 97       	sbiw	r26, 0x27	; 39
    58b0:	86 e0       	ldi	r24, 0x06	; 6
    58b2:	80 83       	st	Z, r24
    58b4:	87 e0       	ldi	r24, 0x07	; 7
    58b6:	8c 93       	st	X, r24
    58b8:	cf 91       	pop	r28
    58ba:	1f 91       	pop	r17
    58bc:	0f 91       	pop	r16
    58be:	08 95       	ret

000058c0 <_ZN12CSoundPlayer9SoundStopEv>:
    58c0:	e0 e4       	ldi	r30, 0x40	; 64
    58c2:	fa e0       	ldi	r31, 0x0A	; 10
    58c4:	84 85       	ldd	r24, Z+12	; 0x0c
    58c6:	80 ff       	sbrs	r24, 0
    58c8:	fd cf       	rjmp	.-6      	; 0x58c4 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    58ca:	e0 e4       	ldi	r30, 0x40	; 64
    58cc:	fa e0       	ldi	r31, 0x0A	; 10
    58ce:	84 85       	ldd	r24, Z+12	; 0x0c
    58d0:	81 70       	andi	r24, 0x01	; 1
    58d2:	84 87       	std	Z+12, r24	; 0x0c
    58d4:	a0 e0       	ldi	r26, 0x00	; 0
    58d6:	ba e0       	ldi	r27, 0x0A	; 10
    58d8:	1c 92       	st	X, r1
    58da:	10 82       	st	Z, r1
    58dc:	10 a2       	std	Z+32, r1	; 0x20
    58de:	11 a2       	std	Z+33, r1	; 0x21
    58e0:	90 96       	adiw	r26, 0x20	; 32
    58e2:	1d 92       	st	X+, r1
    58e4:	1c 92       	st	X, r1
    58e6:	91 97       	sbiw	r26, 0x21	; 33
    58e8:	2f ef       	ldi	r18, 0xFF	; 255
    58ea:	83 ef       	ldi	r24, 0xF3	; 243
    58ec:	91 e0       	ldi	r25, 0x01	; 1
    58ee:	21 50       	subi	r18, 0x01	; 1
    58f0:	80 40       	sbci	r24, 0x00	; 0
    58f2:	90 40       	sbci	r25, 0x00	; 0
    58f4:	e1 f7       	brne	.-8      	; 0x58ee <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    58f6:	00 c0       	rjmp	.+0      	; 0x58f8 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    58f8:	00 00       	nop
    58fa:	08 95       	ret

000058fc <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    58fc:	cf 93       	push	r28
    58fe:	df 93       	push	r29
    5900:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5902:	0e 94 0f 2c 	call	0x581e	; 0x581e <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5906:	ce 01       	movw	r24, r28
    5908:	0e 94 20 2c 	call	0x5840	; 0x5840 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    590c:	df 91       	pop	r29
    590e:	cf 91       	pop	r28
    5910:	08 95       	ret

00005912 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5912:	fc 01       	movw	r30, r24
    5914:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5916:	e0 e0       	ldi	r30, 0x00	; 0
    5918:	f8 e0       	ldi	r31, 0x08	; 8
    591a:	80 81       	ld	r24, Z
    591c:	80 7f       	andi	r24, 0xF0	; 240
    591e:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5920:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5922:	10 a2       	std	Z+32, r1	; 0x20
    5924:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5926:	10 a6       	std	Z+40, r1	; 0x28
    5928:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    592a:	12 a6       	std	Z+42, r1	; 0x2a
    592c:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    592e:	14 a6       	std	Z+44, r1	; 0x2c
    5930:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5932:	16 a6       	std	Z+46, r1	; 0x2e
    5934:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5936:	16 a2       	std	Z+38, r1	; 0x26
    5938:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    593a:	81 81       	ldd	r24, Z+1	; 0x01
    593c:	88 7f       	andi	r24, 0xF8	; 248
    593e:	68 2b       	or	r22, r24
    5940:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5942:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5944:	17 82       	std	Z+7, r1	; 0x07
    5946:	08 95       	ret

00005948 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5948:	e0 e0       	ldi	r30, 0x00	; 0
    594a:	f8 e0       	ldi	r31, 0x08	; 8
    594c:	66 a3       	std	Z+38, r22	; 0x26
    594e:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5950:	20 81       	ld	r18, Z
    5952:	20 7f       	andi	r18, 0xF0	; 240
    5954:	dc 01       	movw	r26, r24
    5956:	12 96       	adiw	r26, 0x02	; 2
    5958:	9c 91       	ld	r25, X
    595a:	82 2f       	mov	r24, r18
    595c:	89 2b       	or	r24, r25
    595e:	80 83       	st	Z, r24
    5960:	08 95       	ret

00005962 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5962:	e0 e0       	ldi	r30, 0x00	; 0
    5964:	f8 e0       	ldi	r31, 0x08	; 8
    5966:	80 81       	ld	r24, Z
    5968:	80 7f       	andi	r24, 0xF0	; 240
    596a:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    596c:	10 a2       	std	Z+32, r1	; 0x20
    596e:	11 a2       	std	Z+33, r1	; 0x21
    5970:	08 95       	ret

00005972 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5972:	e0 e0       	ldi	r30, 0x00	; 0
    5974:	f8 e0       	ldi	r31, 0x08	; 8
    5976:	81 81       	ldd	r24, Z+1	; 0x01
    5978:	8f 70       	andi	r24, 0x0F	; 15
    597a:	68 2b       	or	r22, r24
    597c:	61 83       	std	Z+1, r22	; 0x01
    597e:	08 95       	ret

00005980 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5980:	e0 e0       	ldi	r30, 0x00	; 0
    5982:	f8 e0       	ldi	r31, 0x08	; 8
    5984:	81 81       	ldd	r24, Z+1	; 0x01
    5986:	60 95       	com	r22
    5988:	68 23       	and	r22, r24
    598a:	61 83       	std	Z+1, r22	; 0x01
    598c:	08 95       	ret

0000598e <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    598e:	60 93 26 08 	sts	0x0826, r22
    5992:	70 93 27 08 	sts	0x0827, r23
    5996:	08 95       	ret

00005998 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5998:	60 93 28 08 	sts	0x0828, r22
    599c:	70 93 29 08 	sts	0x0829, r23
    59a0:	08 95       	ret

000059a2 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    59a2:	60 93 2a 08 	sts	0x082A, r22
    59a6:	70 93 2b 08 	sts	0x082B, r23
    59aa:	08 95       	ret

000059ac <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    59ac:	60 93 2c 08 	sts	0x082C, r22
    59b0:	70 93 2d 08 	sts	0x082D, r23
    59b4:	08 95       	ret

000059b6 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    59b6:	60 93 2e 08 	sts	0x082E, r22
    59ba:	70 93 2f 08 	sts	0x082F, r23
    59be:	08 95       	ret

000059c0 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    59c0:	61 15       	cp	r22, r1
    59c2:	71 05       	cpc	r23, r1
    59c4:	31 f0       	breq	.+12     	; 0x59d2 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    59c6:	e0 e0       	ldi	r30, 0x00	; 0
    59c8:	f8 e0       	ldi	r31, 0x08	; 8
    59ca:	86 81       	ldd	r24, Z+6	; 0x06
    59cc:	83 70       	andi	r24, 0x03	; 3
    59ce:	28 2b       	or	r18, r24
    59d0:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    59d2:	60 93 d2 22 	sts	0x22D2, r22
    59d6:	70 93 d3 22 	sts	0x22D3, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    59da:	40 93 c8 23 	sts	0x23C8, r20
    59de:	50 93 c9 23 	sts	0x23C9, r21
    59e2:	08 95       	ret

000059e4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    59e4:	61 15       	cp	r22, r1
    59e6:	71 05       	cpc	r23, r1
    59e8:	31 f0       	breq	.+12     	; 0x59f6 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    59ea:	e0 e0       	ldi	r30, 0x00	; 0
    59ec:	f8 e0       	ldi	r31, 0x08	; 8
    59ee:	86 81       	ldd	r24, Z+6	; 0x06
    59f0:	8c 70       	andi	r24, 0x0C	; 12
    59f2:	28 2b       	or	r18, r24
    59f4:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    59f6:	60 93 d4 22 	sts	0x22D4, r22
    59fa:	70 93 d5 22 	sts	0x22D5, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    59fe:	40 93 ca 23 	sts	0x23CA, r20
    5a02:	50 93 cb 23 	sts	0x23CB, r21
    5a06:	08 95       	ret

00005a08 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5a08:	61 15       	cp	r22, r1
    5a0a:	71 05       	cpc	r23, r1
    5a0c:	31 f0       	breq	.+12     	; 0x5a1a <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5a0e:	e0 e0       	ldi	r30, 0x00	; 0
    5a10:	f8 e0       	ldi	r31, 0x08	; 8
    5a12:	87 81       	ldd	r24, Z+7	; 0x07
    5a14:	83 70       	andi	r24, 0x03	; 3
    5a16:	28 2b       	or	r18, r24
    5a18:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5a1a:	60 93 d6 22 	sts	0x22D6, r22
    5a1e:	70 93 d7 22 	sts	0x22D7, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5a22:	40 93 cc 23 	sts	0x23CC, r20
    5a26:	50 93 cd 23 	sts	0x23CD, r21
    5a2a:	08 95       	ret

00005a2c <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5a2c:	61 15       	cp	r22, r1
    5a2e:	71 05       	cpc	r23, r1
    5a30:	31 f0       	breq	.+12     	; 0x5a3e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5a32:	e0 e0       	ldi	r30, 0x00	; 0
    5a34:	f8 e0       	ldi	r31, 0x08	; 8
    5a36:	87 81       	ldd	r24, Z+7	; 0x07
    5a38:	8c 70       	andi	r24, 0x0C	; 12
    5a3a:	28 2b       	or	r18, r24
    5a3c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5a3e:	60 93 d8 22 	sts	0x22D8, r22
    5a42:	70 93 d9 22 	sts	0x22D9, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5a46:	40 93 ce 23 	sts	0x23CE, r20
    5a4a:	50 93 cf 23 	sts	0x23CF, r21
    5a4e:	08 95       	ret

00005a50 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5a50:	61 15       	cp	r22, r1
    5a52:	71 05       	cpc	r23, r1
    5a54:	31 f0       	breq	.+12     	; 0x5a62 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5a56:	e0 e0       	ldi	r30, 0x00	; 0
    5a58:	f8 e0       	ldi	r31, 0x08	; 8
    5a5a:	87 81       	ldd	r24, Z+7	; 0x07
    5a5c:	80 73       	andi	r24, 0x30	; 48
    5a5e:	28 2b       	or	r18, r24
    5a60:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5a62:	60 93 da 22 	sts	0x22DA, r22
    5a66:	70 93 db 22 	sts	0x22DB, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5a6a:	40 93 d0 23 	sts	0x23D0, r20
    5a6e:	50 93 d1 23 	sts	0x23D1, r21
    5a72:	08 95       	ret

00005a74 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5a74:	61 15       	cp	r22, r1
    5a76:	71 05       	cpc	r23, r1
    5a78:	31 f0       	breq	.+12     	; 0x5a86 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5a7a:	e0 e0       	ldi	r30, 0x00	; 0
    5a7c:	f8 e0       	ldi	r31, 0x08	; 8
    5a7e:	87 81       	ldd	r24, Z+7	; 0x07
    5a80:	80 7c       	andi	r24, 0xC0	; 192
    5a82:	28 2b       	or	r18, r24
    5a84:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5a86:	60 93 dc 22 	sts	0x22DC, r22
    5a8a:	70 93 dd 22 	sts	0x22DD, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5a8e:	40 93 d2 23 	sts	0x23D2, r20
    5a92:	50 93 d3 23 	sts	0x23D3, r21
    5a96:	08 95       	ret

00005a98 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5a98:	cf 93       	push	r28
    5a9a:	df 93       	push	r29
    5a9c:	ec 01       	movw	r28, r24
    5a9e:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZN6CTimerC1Ev>
    5aa2:	86 e0       	ldi	r24, 0x06	; 6
    5aa4:	92 e2       	ldi	r25, 0x22	; 34
    5aa6:	88 83       	st	Y, r24
    5aa8:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	08 95       	ret

00005ab0 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5ab0:	26 e0       	ldi	r18, 0x06	; 6
    5ab2:	32 e2       	ldi	r19, 0x22	; 34
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	20 83       	st	Z, r18
    5ab8:	31 83       	std	Z+1, r19	; 0x01
    5aba:	0e 94 22 11 	call	0x2244	; 0x2244 <_ZN6CTimerD1Ev>
    5abe:	08 95       	ret

00005ac0 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5ac0:	fc 01       	movw	r30, r24
    5ac2:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ac4:	e0 e4       	ldi	r30, 0x40	; 64
    5ac6:	f8 e0       	ldi	r31, 0x08	; 8
    5ac8:	80 81       	ld	r24, Z
    5aca:	80 7f       	andi	r24, 0xF0	; 240
    5acc:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5ace:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5ad0:	10 a2       	std	Z+32, r1	; 0x20
    5ad2:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5ad4:	10 a6       	std	Z+40, r1	; 0x28
    5ad6:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5ad8:	12 a6       	std	Z+42, r1	; 0x2a
    5ada:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5adc:	16 a2       	std	Z+38, r1	; 0x26
    5ade:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5ae0:	81 81       	ldd	r24, Z+1	; 0x01
    5ae2:	88 7f       	andi	r24, 0xF8	; 248
    5ae4:	68 2b       	or	r22, r24
    5ae6:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5ae8:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5aea:	17 82       	std	Z+7, r1	; 0x07
    5aec:	08 95       	ret

00005aee <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5aee:	e0 e4       	ldi	r30, 0x40	; 64
    5af0:	f8 e0       	ldi	r31, 0x08	; 8
    5af2:	66 a3       	std	Z+38, r22	; 0x26
    5af4:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5af6:	20 81       	ld	r18, Z
    5af8:	20 7f       	andi	r18, 0xF0	; 240
    5afa:	dc 01       	movw	r26, r24
    5afc:	12 96       	adiw	r26, 0x02	; 2
    5afe:	9c 91       	ld	r25, X
    5b00:	82 2f       	mov	r24, r18
    5b02:	89 2b       	or	r24, r25
    5b04:	80 83       	st	Z, r24
    5b06:	08 95       	ret

00005b08 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5b08:	e0 e4       	ldi	r30, 0x40	; 64
    5b0a:	f8 e0       	ldi	r31, 0x08	; 8
    5b0c:	80 81       	ld	r24, Z
    5b0e:	80 7f       	andi	r24, 0xF0	; 240
    5b10:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5b12:	10 a2       	std	Z+32, r1	; 0x20
    5b14:	11 a2       	std	Z+33, r1	; 0x21
    5b16:	08 95       	ret

00005b18 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5b18:	e0 e4       	ldi	r30, 0x40	; 64
    5b1a:	f8 e0       	ldi	r31, 0x08	; 8
    5b1c:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5b1e:	80 81       	ld	r24, Z
    5b20:	80 7f       	andi	r24, 0xF0	; 240
    5b22:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5b24:	10 a2       	std	Z+32, r1	; 0x20
    5b26:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5b28:	90 83       	st	Z, r25
    5b2a:	08 95       	ret

00005b2c <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5b2c:	e0 e4       	ldi	r30, 0x40	; 64
    5b2e:	f8 e0       	ldi	r31, 0x08	; 8
    5b30:	81 81       	ldd	r24, Z+1	; 0x01
    5b32:	8f 70       	andi	r24, 0x0F	; 15
    5b34:	68 2b       	or	r22, r24
    5b36:	61 83       	std	Z+1, r22	; 0x01
    5b38:	08 95       	ret

00005b3a <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5b3a:	e0 e4       	ldi	r30, 0x40	; 64
    5b3c:	f8 e0       	ldi	r31, 0x08	; 8
    5b3e:	81 81       	ldd	r24, Z+1	; 0x01
    5b40:	60 95       	com	r22
    5b42:	68 23       	and	r22, r24
    5b44:	61 83       	std	Z+1, r22	; 0x01
    5b46:	08 95       	ret

00005b48 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5b48:	60 93 66 08 	sts	0x0866, r22
    5b4c:	70 93 67 08 	sts	0x0867, r23
    5b50:	08 95       	ret

00005b52 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5b52:	60 93 68 08 	sts	0x0868, r22
    5b56:	70 93 69 08 	sts	0x0869, r23
    5b5a:	08 95       	ret

00005b5c <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5b5c:	60 93 6a 08 	sts	0x086A, r22
    5b60:	70 93 6b 08 	sts	0x086B, r23
    5b64:	08 95       	ret

00005b66 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5b66:	61 15       	cp	r22, r1
    5b68:	71 05       	cpc	r23, r1
    5b6a:	31 f0       	breq	.+12     	; 0x5b78 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5b6c:	e0 e4       	ldi	r30, 0x40	; 64
    5b6e:	f8 e0       	ldi	r31, 0x08	; 8
    5b70:	86 81       	ldd	r24, Z+6	; 0x06
    5b72:	83 70       	andi	r24, 0x03	; 3
    5b74:	28 2b       	or	r18, r24
    5b76:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5b78:	60 93 de 22 	sts	0x22DE, r22
    5b7c:	70 93 df 22 	sts	0x22DF, r23
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5b80:	40 93 d4 23 	sts	0x23D4, r20
    5b84:	50 93 d5 23 	sts	0x23D5, r21
    5b88:	08 95       	ret

00005b8a <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5b8a:	61 15       	cp	r22, r1
    5b8c:	71 05       	cpc	r23, r1
    5b8e:	31 f0       	breq	.+12     	; 0x5b9c <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5b90:	e0 e4       	ldi	r30, 0x40	; 64
    5b92:	f8 e0       	ldi	r31, 0x08	; 8
    5b94:	86 81       	ldd	r24, Z+6	; 0x06
    5b96:	8c 70       	andi	r24, 0x0C	; 12
    5b98:	28 2b       	or	r18, r24
    5b9a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5b9c:	60 93 e0 22 	sts	0x22E0, r22
    5ba0:	70 93 e1 22 	sts	0x22E1, r23
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5ba4:	40 93 d6 23 	sts	0x23D6, r20
    5ba8:	50 93 d7 23 	sts	0x23D7, r21
    5bac:	08 95       	ret

00005bae <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5bae:	61 15       	cp	r22, r1
    5bb0:	71 05       	cpc	r23, r1
    5bb2:	31 f0       	breq	.+12     	; 0x5bc0 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5bb4:	e0 e4       	ldi	r30, 0x40	; 64
    5bb6:	f8 e0       	ldi	r31, 0x08	; 8
    5bb8:	87 81       	ldd	r24, Z+7	; 0x07
    5bba:	83 70       	andi	r24, 0x03	; 3
    5bbc:	28 2b       	or	r18, r24
    5bbe:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5bc0:	60 93 e2 22 	sts	0x22E2, r22
    5bc4:	70 93 e3 22 	sts	0x22E3, r23
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5bc8:	40 93 d8 23 	sts	0x23D8, r20
    5bcc:	50 93 d9 23 	sts	0x23D9, r21
    5bd0:	08 95       	ret

00005bd2 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5bd2:	61 15       	cp	r22, r1
    5bd4:	71 05       	cpc	r23, r1
    5bd6:	31 f0       	breq	.+12     	; 0x5be4 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5bd8:	e0 e4       	ldi	r30, 0x40	; 64
    5bda:	f8 e0       	ldi	r31, 0x08	; 8
    5bdc:	87 81       	ldd	r24, Z+7	; 0x07
    5bde:	8c 70       	andi	r24, 0x0C	; 12
    5be0:	28 2b       	or	r18, r24
    5be2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5be4:	60 93 e4 22 	sts	0x22E4, r22
    5be8:	70 93 e5 22 	sts	0x22E5, r23
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5bec:	40 93 da 23 	sts	0x23DA, r20
    5bf0:	50 93 db 23 	sts	0x23DB, r21
    5bf4:	08 95       	ret

00005bf6 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5bf6:	cf 93       	push	r28
    5bf8:	df 93       	push	r29
    5bfa:	ec 01       	movw	r28, r24
    5bfc:	0e 94 23 11 	call	0x2246	; 0x2246 <_ZN7CTimer1C1Ev>
    5c00:	8a e2       	ldi	r24, 0x2A	; 42
    5c02:	92 e2       	ldi	r25, 0x22	; 34
    5c04:	88 83       	st	Y, r24
    5c06:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5c08:	df 91       	pop	r29
    5c0a:	cf 91       	pop	r28
    5c0c:	08 95       	ret

00005c0e <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5c0e:	2a e2       	ldi	r18, 0x2A	; 42
    5c10:	32 e2       	ldi	r19, 0x22	; 34
    5c12:	fc 01       	movw	r30, r24
    5c14:	20 83       	st	Z, r18
    5c16:	31 83       	std	Z+1, r19	; 0x01
    5c18:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7CTimer1D1Ev>
    5c1c:	08 95       	ret

00005c1e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5c1e:	fc 01       	movw	r30, r24
    5c20:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5c22:	e0 e0       	ldi	r30, 0x00	; 0
    5c24:	f9 e0       	ldi	r31, 0x09	; 9
    5c26:	80 81       	ld	r24, Z
    5c28:	80 7f       	andi	r24, 0xF0	; 240
    5c2a:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5c2c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5c2e:	10 a2       	std	Z+32, r1	; 0x20
    5c30:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    5c32:	10 a6       	std	Z+40, r1	; 0x28
    5c34:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    5c36:	12 a6       	std	Z+42, r1	; 0x2a
    5c38:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    5c3a:	14 a6       	std	Z+44, r1	; 0x2c
    5c3c:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    5c3e:	16 a6       	std	Z+46, r1	; 0x2e
    5c40:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    5c42:	16 a2       	std	Z+38, r1	; 0x26
    5c44:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5c46:	81 81       	ldd	r24, Z+1	; 0x01
    5c48:	88 7f       	andi	r24, 0xF8	; 248
    5c4a:	68 2b       	or	r22, r24
    5c4c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5c4e:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5c50:	17 82       	std	Z+7, r1	; 0x07
    5c52:	08 95       	ret

00005c54 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    5c54:	e0 e0       	ldi	r30, 0x00	; 0
    5c56:	f9 e0       	ldi	r31, 0x09	; 9
    5c58:	66 a3       	std	Z+38, r22	; 0x26
    5c5a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5c5c:	20 81       	ld	r18, Z
    5c5e:	20 7f       	andi	r18, 0xF0	; 240
    5c60:	dc 01       	movw	r26, r24
    5c62:	12 96       	adiw	r26, 0x02	; 2
    5c64:	9c 91       	ld	r25, X
    5c66:	82 2f       	mov	r24, r18
    5c68:	89 2b       	or	r24, r25
    5c6a:	80 83       	st	Z, r24
    5c6c:	08 95       	ret

00005c6e <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5c6e:	e0 e0       	ldi	r30, 0x00	; 0
    5c70:	f9 e0       	ldi	r31, 0x09	; 9
    5c72:	80 81       	ld	r24, Z
    5c74:	80 7f       	andi	r24, 0xF0	; 240
    5c76:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    5c78:	10 a2       	std	Z+32, r1	; 0x20
    5c7a:	11 a2       	std	Z+33, r1	; 0x21
    5c7c:	08 95       	ret

00005c7e <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    5c7e:	e0 e0       	ldi	r30, 0x00	; 0
    5c80:	f9 e0       	ldi	r31, 0x09	; 9
    5c82:	81 81       	ldd	r24, Z+1	; 0x01
    5c84:	8f 70       	andi	r24, 0x0F	; 15
    5c86:	68 2b       	or	r22, r24
    5c88:	61 83       	std	Z+1, r22	; 0x01
    5c8a:	08 95       	ret

00005c8c <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    5c8c:	e0 e0       	ldi	r30, 0x00	; 0
    5c8e:	f9 e0       	ldi	r31, 0x09	; 9
    5c90:	81 81       	ldd	r24, Z+1	; 0x01
    5c92:	60 95       	com	r22
    5c94:	68 23       	and	r22, r24
    5c96:	61 83       	std	Z+1, r22	; 0x01
    5c98:	08 95       	ret

00005c9a <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    5c9a:	60 93 26 09 	sts	0x0926, r22
    5c9e:	70 93 27 09 	sts	0x0927, r23
    5ca2:	08 95       	ret

00005ca4 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    5ca4:	60 93 28 09 	sts	0x0928, r22
    5ca8:	70 93 29 09 	sts	0x0929, r23
    5cac:	08 95       	ret

00005cae <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    5cae:	60 93 2a 09 	sts	0x092A, r22
    5cb2:	70 93 2b 09 	sts	0x092B, r23
    5cb6:	08 95       	ret

00005cb8 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    5cb8:	60 93 2c 09 	sts	0x092C, r22
    5cbc:	70 93 2d 09 	sts	0x092D, r23
    5cc0:	08 95       	ret

00005cc2 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    5cc2:	60 93 2e 09 	sts	0x092E, r22
    5cc6:	70 93 2f 09 	sts	0x092F, r23
    5cca:	08 95       	ret

00005ccc <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5ccc:	61 15       	cp	r22, r1
    5cce:	71 05       	cpc	r23, r1
    5cd0:	31 f0       	breq	.+12     	; 0x5cde <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5cd2:	e0 e0       	ldi	r30, 0x00	; 0
    5cd4:	f9 e0       	ldi	r31, 0x09	; 9
    5cd6:	86 81       	ldd	r24, Z+6	; 0x06
    5cd8:	83 70       	andi	r24, 0x03	; 3
    5cda:	28 2b       	or	r18, r24
    5cdc:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    5cde:	60 93 50 23 	sts	0x2350, r22
    5ce2:	70 93 51 23 	sts	0x2351, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    5ce6:	40 93 46 24 	sts	0x2446, r20
    5cea:	50 93 47 24 	sts	0x2447, r21
    5cee:	08 95       	ret

00005cf0 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5cf0:	61 15       	cp	r22, r1
    5cf2:	71 05       	cpc	r23, r1
    5cf4:	31 f0       	breq	.+12     	; 0x5d02 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5cf6:	e0 e0       	ldi	r30, 0x00	; 0
    5cf8:	f9 e0       	ldi	r31, 0x09	; 9
    5cfa:	86 81       	ldd	r24, Z+6	; 0x06
    5cfc:	8c 70       	andi	r24, 0x0C	; 12
    5cfe:	28 2b       	or	r18, r24
    5d00:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    5d02:	60 93 52 23 	sts	0x2352, r22
    5d06:	70 93 53 23 	sts	0x2353, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    5d0a:	40 93 48 24 	sts	0x2448, r20
    5d0e:	50 93 49 24 	sts	0x2449, r21
    5d12:	08 95       	ret

00005d14 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5d14:	61 15       	cp	r22, r1
    5d16:	71 05       	cpc	r23, r1
    5d18:	31 f0       	breq	.+12     	; 0x5d26 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5d1a:	e0 e0       	ldi	r30, 0x00	; 0
    5d1c:	f9 e0       	ldi	r31, 0x09	; 9
    5d1e:	87 81       	ldd	r24, Z+7	; 0x07
    5d20:	83 70       	andi	r24, 0x03	; 3
    5d22:	28 2b       	or	r18, r24
    5d24:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    5d26:	60 93 54 23 	sts	0x2354, r22
    5d2a:	70 93 55 23 	sts	0x2355, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    5d2e:	40 93 4a 24 	sts	0x244A, r20
    5d32:	50 93 4b 24 	sts	0x244B, r21
    5d36:	08 95       	ret

00005d38 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5d38:	61 15       	cp	r22, r1
    5d3a:	71 05       	cpc	r23, r1
    5d3c:	31 f0       	breq	.+12     	; 0x5d4a <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5d3e:	e0 e0       	ldi	r30, 0x00	; 0
    5d40:	f9 e0       	ldi	r31, 0x09	; 9
    5d42:	87 81       	ldd	r24, Z+7	; 0x07
    5d44:	8c 70       	andi	r24, 0x0C	; 12
    5d46:	28 2b       	or	r18, r24
    5d48:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    5d4a:	60 93 56 23 	sts	0x2356, r22
    5d4e:	70 93 57 23 	sts	0x2357, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    5d52:	40 93 4c 24 	sts	0x244C, r20
    5d56:	50 93 4d 24 	sts	0x244D, r21
    5d5a:	08 95       	ret

00005d5c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5d5c:	61 15       	cp	r22, r1
    5d5e:	71 05       	cpc	r23, r1
    5d60:	31 f0       	breq	.+12     	; 0x5d6e <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5d62:	e0 e0       	ldi	r30, 0x00	; 0
    5d64:	f9 e0       	ldi	r31, 0x09	; 9
    5d66:	87 81       	ldd	r24, Z+7	; 0x07
    5d68:	80 73       	andi	r24, 0x30	; 48
    5d6a:	28 2b       	or	r18, r24
    5d6c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    5d6e:	60 93 58 23 	sts	0x2358, r22
    5d72:	70 93 59 23 	sts	0x2359, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    5d76:	40 93 4e 24 	sts	0x244E, r20
    5d7a:	50 93 4f 24 	sts	0x244F, r21
    5d7e:	08 95       	ret

00005d80 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5d80:	61 15       	cp	r22, r1
    5d82:	71 05       	cpc	r23, r1
    5d84:	31 f0       	breq	.+12     	; 0x5d92 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5d86:	e0 e0       	ldi	r30, 0x00	; 0
    5d88:	f9 e0       	ldi	r31, 0x09	; 9
    5d8a:	87 81       	ldd	r24, Z+7	; 0x07
    5d8c:	80 7c       	andi	r24, 0xC0	; 192
    5d8e:	28 2b       	or	r18, r24
    5d90:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    5d92:	60 93 5a 23 	sts	0x235A, r22
    5d96:	70 93 5b 23 	sts	0x235B, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    5d9a:	40 93 50 24 	sts	0x2450, r20
    5d9e:	50 93 51 24 	sts	0x2451, r21
    5da2:	08 95       	ret

00005da4 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    5da4:	cf 93       	push	r28
    5da6:	df 93       	push	r29
    5da8:	ec 01       	movw	r28, r24
    5daa:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZN6CTimerC1Ev>
    5dae:	88 e4       	ldi	r24, 0x48	; 72
    5db0:	92 e2       	ldi	r25, 0x22	; 34
    5db2:	88 83       	st	Y, r24
    5db4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	08 95       	ret

00005dbc <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    5dbc:	28 e4       	ldi	r18, 0x48	; 72
    5dbe:	32 e2       	ldi	r19, 0x22	; 34
    5dc0:	fc 01       	movw	r30, r24
    5dc2:	20 83       	st	Z, r18
    5dc4:	31 83       	std	Z+1, r19	; 0x01
    5dc6:	0e 94 22 11 	call	0x2244	; 0x2244 <_ZN6CTimerD1Ev>
    5dca:	08 95       	ret

00005dcc <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5dcc:	fc 01       	movw	r30, r24
    5dce:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5dd0:	e0 e4       	ldi	r30, 0x40	; 64
    5dd2:	f9 e0       	ldi	r31, 0x09	; 9
    5dd4:	80 81       	ld	r24, Z
    5dd6:	80 7f       	andi	r24, 0xF0	; 240
    5dd8:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5dda:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    5ddc:	10 a2       	std	Z+32, r1	; 0x20
    5dde:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    5de0:	10 a6       	std	Z+40, r1	; 0x28
    5de2:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    5de4:	12 a6       	std	Z+42, r1	; 0x2a
    5de6:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    5de8:	16 a2       	std	Z+38, r1	; 0x26
    5dea:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5dec:	81 81       	ldd	r24, Z+1	; 0x01
    5dee:	88 7f       	andi	r24, 0xF8	; 248
    5df0:	68 2b       	or	r22, r24
    5df2:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5df4:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5df6:	17 82       	std	Z+7, r1	; 0x07
    5df8:	08 95       	ret

00005dfa <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    5dfa:	e0 e4       	ldi	r30, 0x40	; 64
    5dfc:	f9 e0       	ldi	r31, 0x09	; 9
    5dfe:	66 a3       	std	Z+38, r22	; 0x26
    5e00:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5e02:	20 81       	ld	r18, Z
    5e04:	20 7f       	andi	r18, 0xF0	; 240
    5e06:	dc 01       	movw	r26, r24
    5e08:	12 96       	adiw	r26, 0x02	; 2
    5e0a:	9c 91       	ld	r25, X
    5e0c:	82 2f       	mov	r24, r18
    5e0e:	89 2b       	or	r24, r25
    5e10:	80 83       	st	Z, r24
    5e12:	08 95       	ret

00005e14 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5e14:	e0 e4       	ldi	r30, 0x40	; 64
    5e16:	f9 e0       	ldi	r31, 0x09	; 9
    5e18:	80 81       	ld	r24, Z
    5e1a:	80 7f       	andi	r24, 0xF0	; 240
    5e1c:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    5e1e:	10 a2       	std	Z+32, r1	; 0x20
    5e20:	11 a2       	std	Z+33, r1	; 0x21
    5e22:	08 95       	ret

00005e24 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    5e24:	e0 e4       	ldi	r30, 0x40	; 64
    5e26:	f9 e0       	ldi	r31, 0x09	; 9
    5e28:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5e2a:	80 81       	ld	r24, Z
    5e2c:	80 7f       	andi	r24, 0xF0	; 240
    5e2e:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    5e30:	10 a2       	std	Z+32, r1	; 0x20
    5e32:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    5e34:	90 83       	st	Z, r25
    5e36:	08 95       	ret

00005e38 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    5e38:	e0 e4       	ldi	r30, 0x40	; 64
    5e3a:	f9 e0       	ldi	r31, 0x09	; 9
    5e3c:	81 81       	ldd	r24, Z+1	; 0x01
    5e3e:	8f 70       	andi	r24, 0x0F	; 15
    5e40:	68 2b       	or	r22, r24
    5e42:	61 83       	std	Z+1, r22	; 0x01
    5e44:	08 95       	ret

00005e46 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    5e46:	e0 e4       	ldi	r30, 0x40	; 64
    5e48:	f9 e0       	ldi	r31, 0x09	; 9
    5e4a:	81 81       	ldd	r24, Z+1	; 0x01
    5e4c:	60 95       	com	r22
    5e4e:	68 23       	and	r22, r24
    5e50:	61 83       	std	Z+1, r22	; 0x01
    5e52:	08 95       	ret

00005e54 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    5e54:	60 93 66 09 	sts	0x0966, r22
    5e58:	70 93 67 09 	sts	0x0967, r23
    5e5c:	08 95       	ret

00005e5e <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    5e5e:	60 93 68 09 	sts	0x0968, r22
    5e62:	70 93 69 09 	sts	0x0969, r23
    5e66:	08 95       	ret

00005e68 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    5e68:	60 93 6a 09 	sts	0x096A, r22
    5e6c:	70 93 6b 09 	sts	0x096B, r23
    5e70:	08 95       	ret

00005e72 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5e72:	61 15       	cp	r22, r1
    5e74:	71 05       	cpc	r23, r1
    5e76:	31 f0       	breq	.+12     	; 0x5e84 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCD1.INTCTRLA = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5e78:	e0 e4       	ldi	r30, 0x40	; 64
    5e7a:	f9 e0       	ldi	r31, 0x09	; 9
    5e7c:	86 81       	ldd	r24, Z+6	; 0x06
    5e7e:	83 70       	andi	r24, 0x03	; 3
    5e80:	28 2b       	or	r18, r24
    5e82:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    5e84:	60 93 5c 23 	sts	0x235C, r22
    5e88:	70 93 5d 23 	sts	0x235D, r23
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    5e8c:	40 93 52 24 	sts	0x2452, r20
    5e90:	50 93 53 24 	sts	0x2453, r21
    5e94:	08 95       	ret

00005e96 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5e96:	61 15       	cp	r22, r1
    5e98:	71 05       	cpc	r23, r1
    5e9a:	31 f0       	breq	.+12     	; 0x5ea8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCD1.INTCTRLA = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5e9c:	e0 e4       	ldi	r30, 0x40	; 64
    5e9e:	f9 e0       	ldi	r31, 0x09	; 9
    5ea0:	86 81       	ldd	r24, Z+6	; 0x06
    5ea2:	8c 70       	andi	r24, 0x0C	; 12
    5ea4:	28 2b       	or	r18, r24
    5ea6:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    5ea8:	60 93 5e 23 	sts	0x235E, r22
    5eac:	70 93 5f 23 	sts	0x235F, r23
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    5eb0:	40 93 54 24 	sts	0x2454, r20
    5eb4:	50 93 55 24 	sts	0x2455, r21
    5eb8:	08 95       	ret

00005eba <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5eba:	61 15       	cp	r22, r1
    5ebc:	71 05       	cpc	r23, r1
    5ebe:	31 f0       	breq	.+12     	; 0x5ecc <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCD1.INTCTRLB = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5ec0:	e0 e4       	ldi	r30, 0x40	; 64
    5ec2:	f9 e0       	ldi	r31, 0x09	; 9
    5ec4:	87 81       	ldd	r24, Z+7	; 0x07
    5ec6:	83 70       	andi	r24, 0x03	; 3
    5ec8:	28 2b       	or	r18, r24
    5eca:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    5ecc:	60 93 60 23 	sts	0x2360, r22
    5ed0:	70 93 61 23 	sts	0x2361, r23
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    5ed4:	40 93 56 24 	sts	0x2456, r20
    5ed8:	50 93 57 24 	sts	0x2457, r21
    5edc:	08 95       	ret

00005ede <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5ede:	61 15       	cp	r22, r1
    5ee0:	71 05       	cpc	r23, r1
    5ee2:	31 f0       	breq	.+12     	; 0x5ef0 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCD1.INTCTRLB = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5ee4:	e0 e4       	ldi	r30, 0x40	; 64
    5ee6:	f9 e0       	ldi	r31, 0x09	; 9
    5ee8:	87 81       	ldd	r24, Z+7	; 0x07
    5eea:	8c 70       	andi	r24, 0x0C	; 12
    5eec:	28 2b       	or	r18, r24
    5eee:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    5ef0:	60 93 62 23 	sts	0x2362, r22
    5ef4:	70 93 63 23 	sts	0x2363, r23
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    5ef8:	40 93 58 24 	sts	0x2458, r20
    5efc:	50 93 59 24 	sts	0x2459, r21
    5f00:	08 95       	ret

00005f02 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    5f02:	cf 93       	push	r28
    5f04:	df 93       	push	r29
    5f06:	ec 01       	movw	r28, r24
    5f08:	0e 94 23 11 	call	0x2246	; 0x2246 <_ZN7CTimer1C1Ev>
    5f0c:	8c e6       	ldi	r24, 0x6C	; 108
    5f0e:	92 e2       	ldi	r25, 0x22	; 34
    5f10:	88 83       	st	Y, r24
    5f12:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    5f14:	df 91       	pop	r29
    5f16:	cf 91       	pop	r28
    5f18:	08 95       	ret

00005f1a <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    5f1a:	2c e6       	ldi	r18, 0x6C	; 108
    5f1c:	32 e2       	ldi	r19, 0x22	; 34
    5f1e:	fc 01       	movw	r30, r24
    5f20:	20 83       	st	Z, r18
    5f22:	31 83       	std	Z+1, r19	; 0x01
    5f24:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7CTimer1D1Ev>
    5f28:	08 95       	ret

00005f2a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5f2a:	fc 01       	movw	r30, r24
    5f2c:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5f2e:	e0 e0       	ldi	r30, 0x00	; 0
    5f30:	fb e0       	ldi	r31, 0x0B	; 11
    5f32:	80 81       	ld	r24, Z
    5f34:	80 7f       	andi	r24, 0xF0	; 240
    5f36:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5f38:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    5f3a:	10 a2       	std	Z+32, r1	; 0x20
    5f3c:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    5f3e:	10 a6       	std	Z+40, r1	; 0x28
    5f40:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    5f42:	12 a6       	std	Z+42, r1	; 0x2a
    5f44:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    5f46:	14 a6       	std	Z+44, r1	; 0x2c
    5f48:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    5f4a:	16 a6       	std	Z+46, r1	; 0x2e
    5f4c:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    5f4e:	16 a2       	std	Z+38, r1	; 0x26
    5f50:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5f52:	81 81       	ldd	r24, Z+1	; 0x01
    5f54:	88 7f       	andi	r24, 0xF8	; 248
    5f56:	68 2b       	or	r22, r24
    5f58:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5f5a:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5f5c:	17 82       	std	Z+7, r1	; 0x07
    5f5e:	08 95       	ret

00005f60 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    5f60:	e0 e0       	ldi	r30, 0x00	; 0
    5f62:	fb e0       	ldi	r31, 0x0B	; 11
    5f64:	66 a3       	std	Z+38, r22	; 0x26
    5f66:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5f68:	20 81       	ld	r18, Z
    5f6a:	20 7f       	andi	r18, 0xF0	; 240
    5f6c:	dc 01       	movw	r26, r24
    5f6e:	12 96       	adiw	r26, 0x02	; 2
    5f70:	9c 91       	ld	r25, X
    5f72:	82 2f       	mov	r24, r18
    5f74:	89 2b       	or	r24, r25
    5f76:	80 83       	st	Z, r24
    5f78:	08 95       	ret

00005f7a <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5f7a:	e0 e0       	ldi	r30, 0x00	; 0
    5f7c:	fb e0       	ldi	r31, 0x0B	; 11
    5f7e:	80 81       	ld	r24, Z
    5f80:	80 7f       	andi	r24, 0xF0	; 240
    5f82:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    5f84:	10 a2       	std	Z+32, r1	; 0x20
    5f86:	11 a2       	std	Z+33, r1	; 0x21
    5f88:	08 95       	ret

00005f8a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    5f8a:	e0 e0       	ldi	r30, 0x00	; 0
    5f8c:	fb e0       	ldi	r31, 0x0B	; 11
    5f8e:	81 81       	ldd	r24, Z+1	; 0x01
    5f90:	68 2b       	or	r22, r24
    5f92:	61 83       	std	Z+1, r22	; 0x01
    5f94:	08 95       	ret

00005f96 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    5f96:	e0 e0       	ldi	r30, 0x00	; 0
    5f98:	fb e0       	ldi	r31, 0x0B	; 11
    5f9a:	81 81       	ldd	r24, Z+1	; 0x01
    5f9c:	60 95       	com	r22
    5f9e:	68 23       	and	r22, r24
    5fa0:	61 83       	std	Z+1, r22	; 0x01
    5fa2:	08 95       	ret

00005fa4 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    5fa4:	e0 e0       	ldi	r30, 0x00	; 0
    5fa6:	fb e0       	ldi	r31, 0x0B	; 11
    5fa8:	82 81       	ldd	r24, Z+2	; 0x02
    5faa:	62 95       	swap	r22
    5fac:	6f 70       	andi	r22, 0x0F	; 15
    5fae:	68 2b       	or	r22, r24
    5fb0:	62 83       	std	Z+2, r22	; 0x02
    5fb2:	08 95       	ret

00005fb4 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    5fb4:	e0 e0       	ldi	r30, 0x00	; 0
    5fb6:	fb e0       	ldi	r31, 0x0B	; 11
    5fb8:	82 81       	ldd	r24, Z+2	; 0x02
    5fba:	62 95       	swap	r22
    5fbc:	6f 70       	andi	r22, 0x0F	; 15
    5fbe:	60 95       	com	r22
    5fc0:	68 23       	and	r22, r24
    5fc2:	62 83       	std	Z+2, r22	; 0x02
    5fc4:	08 95       	ret

00005fc6 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    5fc6:	60 93 26 0b 	sts	0x0B26, r22
    5fca:	70 93 27 0b 	sts	0x0B27, r23
    5fce:	08 95       	ret

00005fd0 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    5fd0:	60 93 28 0b 	sts	0x0B28, r22
    5fd4:	70 93 29 0b 	sts	0x0B29, r23
    5fd8:	08 95       	ret

00005fda <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    5fda:	60 93 2a 0b 	sts	0x0B2A, r22
    5fde:	70 93 2b 0b 	sts	0x0B2B, r23
    5fe2:	08 95       	ret

00005fe4 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    5fe4:	60 93 2c 0b 	sts	0x0B2C, r22
    5fe8:	70 93 2d 0b 	sts	0x0B2D, r23
    5fec:	08 95       	ret

00005fee <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    5fee:	60 93 2e 0b 	sts	0x0B2E, r22
    5ff2:	70 93 2f 0b 	sts	0x0B2F, r23
    5ff6:	08 95       	ret

00005ff8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5ff8:	61 15       	cp	r22, r1
    5ffa:	71 05       	cpc	r23, r1
    5ffc:	31 f0       	breq	.+12     	; 0x600a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5ffe:	e0 e0       	ldi	r30, 0x00	; 0
    6000:	fb e0       	ldi	r31, 0x0B	; 11
    6002:	86 81       	ldd	r24, Z+6	; 0x06
    6004:	83 70       	andi	r24, 0x03	; 3
    6006:	28 2b       	or	r18, r24
    6008:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    600a:	60 93 8e 23 	sts	0x238E, r22
    600e:	70 93 8f 23 	sts	0x238F, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    6012:	40 93 84 24 	sts	0x2484, r20
    6016:	50 93 85 24 	sts	0x2485, r21
    601a:	08 95       	ret

0000601c <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    601c:	61 15       	cp	r22, r1
    601e:	71 05       	cpc	r23, r1
    6020:	31 f0       	breq	.+12     	; 0x602e <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    6022:	e0 e0       	ldi	r30, 0x00	; 0
    6024:	fb e0       	ldi	r31, 0x0B	; 11
    6026:	86 81       	ldd	r24, Z+6	; 0x06
    6028:	8c 70       	andi	r24, 0x0C	; 12
    602a:	28 2b       	or	r18, r24
    602c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    602e:	60 93 90 23 	sts	0x2390, r22
    6032:	70 93 91 23 	sts	0x2391, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    6036:	40 93 86 24 	sts	0x2486, r20
    603a:	50 93 87 24 	sts	0x2487, r21
    603e:	08 95       	ret

00006040 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    6040:	61 15       	cp	r22, r1
    6042:	71 05       	cpc	r23, r1
    6044:	31 f0       	breq	.+12     	; 0x6052 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    6046:	e0 e0       	ldi	r30, 0x00	; 0
    6048:	fb e0       	ldi	r31, 0x0B	; 11
    604a:	87 81       	ldd	r24, Z+7	; 0x07
    604c:	83 70       	andi	r24, 0x03	; 3
    604e:	28 2b       	or	r18, r24
    6050:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    6052:	60 93 92 23 	sts	0x2392, r22
    6056:	70 93 93 23 	sts	0x2393, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    605a:	40 93 88 24 	sts	0x2488, r20
    605e:	50 93 89 24 	sts	0x2489, r21
    6062:	08 95       	ret

00006064 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6064:	61 15       	cp	r22, r1
    6066:	71 05       	cpc	r23, r1
    6068:	31 f0       	breq	.+12     	; 0x6076 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    606a:	e0 e0       	ldi	r30, 0x00	; 0
    606c:	fb e0       	ldi	r31, 0x0B	; 11
    606e:	87 81       	ldd	r24, Z+7	; 0x07
    6070:	8c 70       	andi	r24, 0x0C	; 12
    6072:	28 2b       	or	r18, r24
    6074:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    6076:	60 93 94 23 	sts	0x2394, r22
    607a:	70 93 95 23 	sts	0x2395, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    607e:	40 93 8a 24 	sts	0x248A, r20
    6082:	50 93 8b 24 	sts	0x248B, r21
    6086:	08 95       	ret

00006088 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    6088:	61 15       	cp	r22, r1
    608a:	71 05       	cpc	r23, r1
    608c:	31 f0       	breq	.+12     	; 0x609a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    608e:	e0 e0       	ldi	r30, 0x00	; 0
    6090:	fb e0       	ldi	r31, 0x0B	; 11
    6092:	87 81       	ldd	r24, Z+7	; 0x07
    6094:	80 73       	andi	r24, 0x30	; 48
    6096:	28 2b       	or	r18, r24
    6098:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    609a:	60 93 96 23 	sts	0x2396, r22
    609e:	70 93 97 23 	sts	0x2397, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    60a2:	40 93 8c 24 	sts	0x248C, r20
    60a6:	50 93 8d 24 	sts	0x248D, r21
    60aa:	08 95       	ret

000060ac <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    60ac:	61 15       	cp	r22, r1
    60ae:	71 05       	cpc	r23, r1
    60b0:	31 f0       	breq	.+12     	; 0x60be <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    60b2:	e0 e0       	ldi	r30, 0x00	; 0
    60b4:	fb e0       	ldi	r31, 0x0B	; 11
    60b6:	87 81       	ldd	r24, Z+7	; 0x07
    60b8:	80 7c       	andi	r24, 0xC0	; 192
    60ba:	28 2b       	or	r18, r24
    60bc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    60be:	60 93 98 23 	sts	0x2398, r22
    60c2:	70 93 99 23 	sts	0x2399, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    60c6:	40 93 8e 24 	sts	0x248E, r20
    60ca:	50 93 8f 24 	sts	0x248F, r21
    60ce:	08 95       	ret

000060d0 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	ec 01       	movw	r28, r24
    60d6:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZN6CTimerC1Ev>
    60da:	8a e8       	ldi	r24, 0x8A	; 138
    60dc:	92 e2       	ldi	r25, 0x22	; 34
    60de:	88 83       	st	Y, r24
    60e0:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

000060e8 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    60e8:	2a e8       	ldi	r18, 0x8A	; 138
    60ea:	32 e2       	ldi	r19, 0x22	; 34
    60ec:	fc 01       	movw	r30, r24
    60ee:	20 83       	st	Z, r18
    60f0:	31 83       	std	Z+1, r19	; 0x01
    60f2:	0e 94 22 11 	call	0x2244	; 0x2244 <_ZN6CTimerD1Ev>
    60f6:	08 95       	ret

000060f8 <__fixsfsi>:
    60f8:	0e 94 83 30 	call	0x6106	; 0x6106 <__fixunssfsi>
    60fc:	68 94       	set
    60fe:	b1 11       	cpse	r27, r1
    6100:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_szero>
    6104:	08 95       	ret

00006106 <__fixunssfsi>:
    6106:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fp_splitA>
    610a:	88 f0       	brcs	.+34     	; 0x612e <__fixunssfsi+0x28>
    610c:	9f 57       	subi	r25, 0x7F	; 127
    610e:	98 f0       	brcs	.+38     	; 0x6136 <__fixunssfsi+0x30>
    6110:	b9 2f       	mov	r27, r25
    6112:	99 27       	eor	r25, r25
    6114:	b7 51       	subi	r27, 0x17	; 23
    6116:	b0 f0       	brcs	.+44     	; 0x6144 <__fixunssfsi+0x3e>
    6118:	e1 f0       	breq	.+56     	; 0x6152 <__fixunssfsi+0x4c>
    611a:	66 0f       	add	r22, r22
    611c:	77 1f       	adc	r23, r23
    611e:	88 1f       	adc	r24, r24
    6120:	99 1f       	adc	r25, r25
    6122:	1a f0       	brmi	.+6      	; 0x612a <__fixunssfsi+0x24>
    6124:	ba 95       	dec	r27
    6126:	c9 f7       	brne	.-14     	; 0x611a <__fixunssfsi+0x14>
    6128:	14 c0       	rjmp	.+40     	; 0x6152 <__fixunssfsi+0x4c>
    612a:	b1 30       	cpi	r27, 0x01	; 1
    612c:	91 f0       	breq	.+36     	; 0x6152 <__fixunssfsi+0x4c>
    612e:	0e 94 11 31 	call	0x6222	; 0x6222 <__fp_zero>
    6132:	b1 e0       	ldi	r27, 0x01	; 1
    6134:	08 95       	ret
    6136:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__fp_zero>
    613a:	67 2f       	mov	r22, r23
    613c:	78 2f       	mov	r23, r24
    613e:	88 27       	eor	r24, r24
    6140:	b8 5f       	subi	r27, 0xF8	; 248
    6142:	39 f0       	breq	.+14     	; 0x6152 <__fixunssfsi+0x4c>
    6144:	b9 3f       	cpi	r27, 0xF9	; 249
    6146:	cc f3       	brlt	.-14     	; 0x613a <__fixunssfsi+0x34>
    6148:	86 95       	lsr	r24
    614a:	77 95       	ror	r23
    614c:	67 95       	ror	r22
    614e:	b3 95       	inc	r27
    6150:	d9 f7       	brne	.-10     	; 0x6148 <__fixunssfsi+0x42>
    6152:	3e f4       	brtc	.+14     	; 0x6162 <__fixunssfsi+0x5c>
    6154:	90 95       	com	r25
    6156:	80 95       	com	r24
    6158:	70 95       	com	r23
    615a:	61 95       	neg	r22
    615c:	7f 4f       	sbci	r23, 0xFF	; 255
    615e:	8f 4f       	sbci	r24, 0xFF	; 255
    6160:	9f 4f       	sbci	r25, 0xFF	; 255
    6162:	08 95       	ret

00006164 <__floatunsisf>:
    6164:	e8 94       	clt
    6166:	09 c0       	rjmp	.+18     	; 0x617a <__floatsisf+0x12>

00006168 <__floatsisf>:
    6168:	97 fb       	bst	r25, 7
    616a:	3e f4       	brtc	.+14     	; 0x617a <__floatsisf+0x12>
    616c:	90 95       	com	r25
    616e:	80 95       	com	r24
    6170:	70 95       	com	r23
    6172:	61 95       	neg	r22
    6174:	7f 4f       	sbci	r23, 0xFF	; 255
    6176:	8f 4f       	sbci	r24, 0xFF	; 255
    6178:	9f 4f       	sbci	r25, 0xFF	; 255
    617a:	99 23       	and	r25, r25
    617c:	a9 f0       	breq	.+42     	; 0x61a8 <__floatsisf+0x40>
    617e:	f9 2f       	mov	r31, r25
    6180:	96 e9       	ldi	r25, 0x96	; 150
    6182:	bb 27       	eor	r27, r27
    6184:	93 95       	inc	r25
    6186:	f6 95       	lsr	r31
    6188:	87 95       	ror	r24
    618a:	77 95       	ror	r23
    618c:	67 95       	ror	r22
    618e:	b7 95       	ror	r27
    6190:	f1 11       	cpse	r31, r1
    6192:	f8 cf       	rjmp	.-16     	; 0x6184 <__floatsisf+0x1c>
    6194:	fa f4       	brpl	.+62     	; 0x61d4 <__floatsisf+0x6c>
    6196:	bb 0f       	add	r27, r27
    6198:	11 f4       	brne	.+4      	; 0x619e <__floatsisf+0x36>
    619a:	60 ff       	sbrs	r22, 0
    619c:	1b c0       	rjmp	.+54     	; 0x61d4 <__floatsisf+0x6c>
    619e:	6f 5f       	subi	r22, 0xFF	; 255
    61a0:	7f 4f       	sbci	r23, 0xFF	; 255
    61a2:	8f 4f       	sbci	r24, 0xFF	; 255
    61a4:	9f 4f       	sbci	r25, 0xFF	; 255
    61a6:	16 c0       	rjmp	.+44     	; 0x61d4 <__floatsisf+0x6c>
    61a8:	88 23       	and	r24, r24
    61aa:	11 f0       	breq	.+4      	; 0x61b0 <__floatsisf+0x48>
    61ac:	96 e9       	ldi	r25, 0x96	; 150
    61ae:	11 c0       	rjmp	.+34     	; 0x61d2 <__floatsisf+0x6a>
    61b0:	77 23       	and	r23, r23
    61b2:	21 f0       	breq	.+8      	; 0x61bc <__floatsisf+0x54>
    61b4:	9e e8       	ldi	r25, 0x8E	; 142
    61b6:	87 2f       	mov	r24, r23
    61b8:	76 2f       	mov	r23, r22
    61ba:	05 c0       	rjmp	.+10     	; 0x61c6 <__floatsisf+0x5e>
    61bc:	66 23       	and	r22, r22
    61be:	71 f0       	breq	.+28     	; 0x61dc <__floatsisf+0x74>
    61c0:	96 e8       	ldi	r25, 0x86	; 134
    61c2:	86 2f       	mov	r24, r22
    61c4:	70 e0       	ldi	r23, 0x00	; 0
    61c6:	60 e0       	ldi	r22, 0x00	; 0
    61c8:	2a f0       	brmi	.+10     	; 0x61d4 <__floatsisf+0x6c>
    61ca:	9a 95       	dec	r25
    61cc:	66 0f       	add	r22, r22
    61ce:	77 1f       	adc	r23, r23
    61d0:	88 1f       	adc	r24, r24
    61d2:	da f7       	brpl	.-10     	; 0x61ca <__floatsisf+0x62>
    61d4:	88 0f       	add	r24, r24
    61d6:	96 95       	lsr	r25
    61d8:	87 95       	ror	r24
    61da:	97 f9       	bld	r25, 7
    61dc:	08 95       	ret

000061de <__fp_split3>:
    61de:	57 fd       	sbrc	r21, 7
    61e0:	90 58       	subi	r25, 0x80	; 128
    61e2:	44 0f       	add	r20, r20
    61e4:	55 1f       	adc	r21, r21
    61e6:	59 f0       	breq	.+22     	; 0x61fe <__fp_splitA+0x10>
    61e8:	5f 3f       	cpi	r21, 0xFF	; 255
    61ea:	71 f0       	breq	.+28     	; 0x6208 <__fp_splitA+0x1a>
    61ec:	47 95       	ror	r20

000061ee <__fp_splitA>:
    61ee:	88 0f       	add	r24, r24
    61f0:	97 fb       	bst	r25, 7
    61f2:	99 1f       	adc	r25, r25
    61f4:	61 f0       	breq	.+24     	; 0x620e <__fp_splitA+0x20>
    61f6:	9f 3f       	cpi	r25, 0xFF	; 255
    61f8:	79 f0       	breq	.+30     	; 0x6218 <__fp_splitA+0x2a>
    61fa:	87 95       	ror	r24
    61fc:	08 95       	ret
    61fe:	12 16       	cp	r1, r18
    6200:	13 06       	cpc	r1, r19
    6202:	14 06       	cpc	r1, r20
    6204:	55 1f       	adc	r21, r21
    6206:	f2 cf       	rjmp	.-28     	; 0x61ec <__fp_split3+0xe>
    6208:	46 95       	lsr	r20
    620a:	f1 df       	rcall	.-30     	; 0x61ee <__fp_splitA>
    620c:	08 c0       	rjmp	.+16     	; 0x621e <__fp_splitA+0x30>
    620e:	16 16       	cp	r1, r22
    6210:	17 06       	cpc	r1, r23
    6212:	18 06       	cpc	r1, r24
    6214:	99 1f       	adc	r25, r25
    6216:	f1 cf       	rjmp	.-30     	; 0x61fa <__fp_splitA+0xc>
    6218:	86 95       	lsr	r24
    621a:	71 05       	cpc	r23, r1
    621c:	61 05       	cpc	r22, r1
    621e:	08 94       	sec
    6220:	08 95       	ret

00006222 <__fp_zero>:
    6222:	e8 94       	clt

00006224 <__fp_szero>:
    6224:	bb 27       	eor	r27, r27
    6226:	66 27       	eor	r22, r22
    6228:	77 27       	eor	r23, r23
    622a:	cb 01       	movw	r24, r22
    622c:	97 f9       	bld	r25, 7
    622e:	08 95       	ret

00006230 <__mulsf3>:
    6230:	0e 94 2b 31 	call	0x6256	; 0x6256 <__mulsf3x>
    6234:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__fp_round>
    6238:	0e 94 8e 31 	call	0x631c	; 0x631c <__fp_pscA>
    623c:	38 f0       	brcs	.+14     	; 0x624c <__mulsf3+0x1c>
    623e:	0e 94 95 31 	call	0x632a	; 0x632a <__fp_pscB>
    6242:	20 f0       	brcs	.+8      	; 0x624c <__mulsf3+0x1c>
    6244:	95 23       	and	r25, r21
    6246:	11 f0       	breq	.+4      	; 0x624c <__mulsf3+0x1c>
    6248:	0c 94 85 31 	jmp	0x630a	; 0x630a <__fp_inf>
    624c:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__fp_nan>
    6250:	11 24       	eor	r1, r1
    6252:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_szero>

00006256 <__mulsf3x>:
    6256:	0e 94 ef 30 	call	0x61de	; 0x61de <__fp_split3>
    625a:	70 f3       	brcs	.-36     	; 0x6238 <__mulsf3+0x8>

0000625c <__mulsf3_pse>:
    625c:	95 9f       	mul	r25, r21
    625e:	c1 f3       	breq	.-16     	; 0x6250 <__mulsf3+0x20>
    6260:	95 0f       	add	r25, r21
    6262:	50 e0       	ldi	r21, 0x00	; 0
    6264:	55 1f       	adc	r21, r21
    6266:	62 9f       	mul	r22, r18
    6268:	f0 01       	movw	r30, r0
    626a:	72 9f       	mul	r23, r18
    626c:	bb 27       	eor	r27, r27
    626e:	f0 0d       	add	r31, r0
    6270:	b1 1d       	adc	r27, r1
    6272:	63 9f       	mul	r22, r19
    6274:	aa 27       	eor	r26, r26
    6276:	f0 0d       	add	r31, r0
    6278:	b1 1d       	adc	r27, r1
    627a:	aa 1f       	adc	r26, r26
    627c:	64 9f       	mul	r22, r20
    627e:	66 27       	eor	r22, r22
    6280:	b0 0d       	add	r27, r0
    6282:	a1 1d       	adc	r26, r1
    6284:	66 1f       	adc	r22, r22
    6286:	82 9f       	mul	r24, r18
    6288:	22 27       	eor	r18, r18
    628a:	b0 0d       	add	r27, r0
    628c:	a1 1d       	adc	r26, r1
    628e:	62 1f       	adc	r22, r18
    6290:	73 9f       	mul	r23, r19
    6292:	b0 0d       	add	r27, r0
    6294:	a1 1d       	adc	r26, r1
    6296:	62 1f       	adc	r22, r18
    6298:	83 9f       	mul	r24, r19
    629a:	a0 0d       	add	r26, r0
    629c:	61 1d       	adc	r22, r1
    629e:	22 1f       	adc	r18, r18
    62a0:	74 9f       	mul	r23, r20
    62a2:	33 27       	eor	r19, r19
    62a4:	a0 0d       	add	r26, r0
    62a6:	61 1d       	adc	r22, r1
    62a8:	23 1f       	adc	r18, r19
    62aa:	84 9f       	mul	r24, r20
    62ac:	60 0d       	add	r22, r0
    62ae:	21 1d       	adc	r18, r1
    62b0:	82 2f       	mov	r24, r18
    62b2:	76 2f       	mov	r23, r22
    62b4:	6a 2f       	mov	r22, r26
    62b6:	11 24       	eor	r1, r1
    62b8:	9f 57       	subi	r25, 0x7F	; 127
    62ba:	50 40       	sbci	r21, 0x00	; 0
    62bc:	9a f0       	brmi	.+38     	; 0x62e4 <__mulsf3_pse+0x88>
    62be:	f1 f0       	breq	.+60     	; 0x62fc <__mulsf3_pse+0xa0>
    62c0:	88 23       	and	r24, r24
    62c2:	4a f0       	brmi	.+18     	; 0x62d6 <__mulsf3_pse+0x7a>
    62c4:	ee 0f       	add	r30, r30
    62c6:	ff 1f       	adc	r31, r31
    62c8:	bb 1f       	adc	r27, r27
    62ca:	66 1f       	adc	r22, r22
    62cc:	77 1f       	adc	r23, r23
    62ce:	88 1f       	adc	r24, r24
    62d0:	91 50       	subi	r25, 0x01	; 1
    62d2:	50 40       	sbci	r21, 0x00	; 0
    62d4:	a9 f7       	brne	.-22     	; 0x62c0 <__mulsf3_pse+0x64>
    62d6:	9e 3f       	cpi	r25, 0xFE	; 254
    62d8:	51 05       	cpc	r21, r1
    62da:	80 f0       	brcs	.+32     	; 0x62fc <__mulsf3_pse+0xa0>
    62dc:	0c 94 85 31 	jmp	0x630a	; 0x630a <__fp_inf>
    62e0:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_szero>
    62e4:	5f 3f       	cpi	r21, 0xFF	; 255
    62e6:	e4 f3       	brlt	.-8      	; 0x62e0 <__mulsf3_pse+0x84>
    62e8:	98 3e       	cpi	r25, 0xE8	; 232
    62ea:	d4 f3       	brlt	.-12     	; 0x62e0 <__mulsf3_pse+0x84>
    62ec:	86 95       	lsr	r24
    62ee:	77 95       	ror	r23
    62f0:	67 95       	ror	r22
    62f2:	b7 95       	ror	r27
    62f4:	f7 95       	ror	r31
    62f6:	e7 95       	ror	r30
    62f8:	9f 5f       	subi	r25, 0xFF	; 255
    62fa:	c1 f7       	brne	.-16     	; 0x62ec <__mulsf3_pse+0x90>
    62fc:	fe 2b       	or	r31, r30
    62fe:	88 0f       	add	r24, r24
    6300:	91 1d       	adc	r25, r1
    6302:	96 95       	lsr	r25
    6304:	87 95       	ror	r24
    6306:	97 f9       	bld	r25, 7
    6308:	08 95       	ret

0000630a <__fp_inf>:
    630a:	97 f9       	bld	r25, 7
    630c:	9f 67       	ori	r25, 0x7F	; 127
    630e:	80 e8       	ldi	r24, 0x80	; 128
    6310:	70 e0       	ldi	r23, 0x00	; 0
    6312:	60 e0       	ldi	r22, 0x00	; 0
    6314:	08 95       	ret

00006316 <__fp_nan>:
    6316:	9f ef       	ldi	r25, 0xFF	; 255
    6318:	80 ec       	ldi	r24, 0xC0	; 192
    631a:	08 95       	ret

0000631c <__fp_pscA>:
    631c:	00 24       	eor	r0, r0
    631e:	0a 94       	dec	r0
    6320:	16 16       	cp	r1, r22
    6322:	17 06       	cpc	r1, r23
    6324:	18 06       	cpc	r1, r24
    6326:	09 06       	cpc	r0, r25
    6328:	08 95       	ret

0000632a <__fp_pscB>:
    632a:	00 24       	eor	r0, r0
    632c:	0a 94       	dec	r0
    632e:	12 16       	cp	r1, r18
    6330:	13 06       	cpc	r1, r19
    6332:	14 06       	cpc	r1, r20
    6334:	05 06       	cpc	r0, r21
    6336:	08 95       	ret

00006338 <__fp_round>:
    6338:	09 2e       	mov	r0, r25
    633a:	03 94       	inc	r0
    633c:	00 0c       	add	r0, r0
    633e:	11 f4       	brne	.+4      	; 0x6344 <__fp_round+0xc>
    6340:	88 23       	and	r24, r24
    6342:	52 f0       	brmi	.+20     	; 0x6358 <__fp_round+0x20>
    6344:	bb 0f       	add	r27, r27
    6346:	40 f4       	brcc	.+16     	; 0x6358 <__fp_round+0x20>
    6348:	bf 2b       	or	r27, r31
    634a:	11 f4       	brne	.+4      	; 0x6350 <__fp_round+0x18>
    634c:	60 ff       	sbrs	r22, 0
    634e:	04 c0       	rjmp	.+8      	; 0x6358 <__fp_round+0x20>
    6350:	6f 5f       	subi	r22, 0xFF	; 255
    6352:	7f 4f       	sbci	r23, 0xFF	; 255
    6354:	8f 4f       	sbci	r24, 0xFF	; 255
    6356:	9f 4f       	sbci	r25, 0xFF	; 255
    6358:	08 95       	ret

0000635a <__mulsi3>:
    635a:	db 01       	movw	r26, r22
    635c:	8f 93       	push	r24
    635e:	9f 93       	push	r25
    6360:	0e 94 3d 32 	call	0x647a	; 0x647a <__muluhisi3>
    6364:	bf 91       	pop	r27
    6366:	af 91       	pop	r26
    6368:	a2 9f       	mul	r26, r18
    636a:	80 0d       	add	r24, r0
    636c:	91 1d       	adc	r25, r1
    636e:	a3 9f       	mul	r26, r19
    6370:	90 0d       	add	r25, r0
    6372:	b2 9f       	mul	r27, r18
    6374:	90 0d       	add	r25, r0
    6376:	11 24       	eor	r1, r1
    6378:	08 95       	ret

0000637a <__udivmodhi4>:
    637a:	aa 1b       	sub	r26, r26
    637c:	bb 1b       	sub	r27, r27
    637e:	51 e1       	ldi	r21, 0x11	; 17
    6380:	07 c0       	rjmp	.+14     	; 0x6390 <__udivmodhi4_ep>

00006382 <__udivmodhi4_loop>:
    6382:	aa 1f       	adc	r26, r26
    6384:	bb 1f       	adc	r27, r27
    6386:	a6 17       	cp	r26, r22
    6388:	b7 07       	cpc	r27, r23
    638a:	10 f0       	brcs	.+4      	; 0x6390 <__udivmodhi4_ep>
    638c:	a6 1b       	sub	r26, r22
    638e:	b7 0b       	sbc	r27, r23

00006390 <__udivmodhi4_ep>:
    6390:	88 1f       	adc	r24, r24
    6392:	99 1f       	adc	r25, r25
    6394:	5a 95       	dec	r21
    6396:	a9 f7       	brne	.-22     	; 0x6382 <__udivmodhi4_loop>
    6398:	80 95       	com	r24
    639a:	90 95       	com	r25
    639c:	bc 01       	movw	r22, r24
    639e:	cd 01       	movw	r24, r26
    63a0:	08 95       	ret

000063a2 <__divmodhi4>:
    63a2:	97 fb       	bst	r25, 7
    63a4:	07 2e       	mov	r0, r23
    63a6:	16 f4       	brtc	.+4      	; 0x63ac <__divmodhi4+0xa>
    63a8:	00 94       	com	r0
    63aa:	07 d0       	rcall	.+14     	; 0x63ba <__divmodhi4_neg1>
    63ac:	77 fd       	sbrc	r23, 7
    63ae:	09 d0       	rcall	.+18     	; 0x63c2 <__divmodhi4_neg2>
    63b0:	0e 94 bd 31 	call	0x637a	; 0x637a <__udivmodhi4>
    63b4:	07 fc       	sbrc	r0, 7
    63b6:	05 d0       	rcall	.+10     	; 0x63c2 <__divmodhi4_neg2>
    63b8:	3e f4       	brtc	.+14     	; 0x63c8 <__divmodhi4_exit>

000063ba <__divmodhi4_neg1>:
    63ba:	90 95       	com	r25
    63bc:	81 95       	neg	r24
    63be:	9f 4f       	sbci	r25, 0xFF	; 255
    63c0:	08 95       	ret

000063c2 <__divmodhi4_neg2>:
    63c2:	70 95       	com	r23
    63c4:	61 95       	neg	r22
    63c6:	7f 4f       	sbci	r23, 0xFF	; 255

000063c8 <__divmodhi4_exit>:
    63c8:	08 95       	ret

000063ca <__udivmodsi4>:
    63ca:	a1 e2       	ldi	r26, 0x21	; 33
    63cc:	1a 2e       	mov	r1, r26
    63ce:	aa 1b       	sub	r26, r26
    63d0:	bb 1b       	sub	r27, r27
    63d2:	fd 01       	movw	r30, r26
    63d4:	0d c0       	rjmp	.+26     	; 0x63f0 <__udivmodsi4_ep>

000063d6 <__udivmodsi4_loop>:
    63d6:	aa 1f       	adc	r26, r26
    63d8:	bb 1f       	adc	r27, r27
    63da:	ee 1f       	adc	r30, r30
    63dc:	ff 1f       	adc	r31, r31
    63de:	a2 17       	cp	r26, r18
    63e0:	b3 07       	cpc	r27, r19
    63e2:	e4 07       	cpc	r30, r20
    63e4:	f5 07       	cpc	r31, r21
    63e6:	20 f0       	brcs	.+8      	; 0x63f0 <__udivmodsi4_ep>
    63e8:	a2 1b       	sub	r26, r18
    63ea:	b3 0b       	sbc	r27, r19
    63ec:	e4 0b       	sbc	r30, r20
    63ee:	f5 0b       	sbc	r31, r21

000063f0 <__udivmodsi4_ep>:
    63f0:	66 1f       	adc	r22, r22
    63f2:	77 1f       	adc	r23, r23
    63f4:	88 1f       	adc	r24, r24
    63f6:	99 1f       	adc	r25, r25
    63f8:	1a 94       	dec	r1
    63fa:	69 f7       	brne	.-38     	; 0x63d6 <__udivmodsi4_loop>
    63fc:	60 95       	com	r22
    63fe:	70 95       	com	r23
    6400:	80 95       	com	r24
    6402:	90 95       	com	r25
    6404:	9b 01       	movw	r18, r22
    6406:	ac 01       	movw	r20, r24
    6408:	bd 01       	movw	r22, r26
    640a:	cf 01       	movw	r24, r30
    640c:	08 95       	ret

0000640e <__divmodsi4>:
    640e:	05 2e       	mov	r0, r21
    6410:	97 fb       	bst	r25, 7
    6412:	1e f4       	brtc	.+6      	; 0x641a <__divmodsi4+0xc>
    6414:	00 94       	com	r0
    6416:	0e 94 1e 32 	call	0x643c	; 0x643c <__negsi2>
    641a:	57 fd       	sbrc	r21, 7
    641c:	07 d0       	rcall	.+14     	; 0x642c <__divmodsi4_neg2>
    641e:	0e 94 e5 31 	call	0x63ca	; 0x63ca <__udivmodsi4>
    6422:	07 fc       	sbrc	r0, 7
    6424:	03 d0       	rcall	.+6      	; 0x642c <__divmodsi4_neg2>
    6426:	4e f4       	brtc	.+18     	; 0x643a <__divmodsi4_exit>
    6428:	0c 94 1e 32 	jmp	0x643c	; 0x643c <__negsi2>

0000642c <__divmodsi4_neg2>:
    642c:	50 95       	com	r21
    642e:	40 95       	com	r20
    6430:	30 95       	com	r19
    6432:	21 95       	neg	r18
    6434:	3f 4f       	sbci	r19, 0xFF	; 255
    6436:	4f 4f       	sbci	r20, 0xFF	; 255
    6438:	5f 4f       	sbci	r21, 0xFF	; 255

0000643a <__divmodsi4_exit>:
    643a:	08 95       	ret

0000643c <__negsi2>:
    643c:	90 95       	com	r25
    643e:	80 95       	com	r24
    6440:	70 95       	com	r23
    6442:	61 95       	neg	r22
    6444:	7f 4f       	sbci	r23, 0xFF	; 255
    6446:	8f 4f       	sbci	r24, 0xFF	; 255
    6448:	9f 4f       	sbci	r25, 0xFF	; 255
    644a:	08 95       	ret

0000644c <__tablejump2__>:
    644c:	ee 0f       	add	r30, r30
    644e:	ff 1f       	adc	r31, r31
    6450:	88 1f       	adc	r24, r24
    6452:	8b bf       	out	0x3b, r24	; 59
    6454:	07 90       	elpm	r0, Z+
    6456:	f6 91       	elpm	r31, Z
    6458:	e0 2d       	mov	r30, r0
    645a:	19 94       	eijmp

0000645c <__umulhisi3>:
    645c:	a2 9f       	mul	r26, r18
    645e:	b0 01       	movw	r22, r0
    6460:	b3 9f       	mul	r27, r19
    6462:	c0 01       	movw	r24, r0
    6464:	a3 9f       	mul	r26, r19
    6466:	70 0d       	add	r23, r0
    6468:	81 1d       	adc	r24, r1
    646a:	11 24       	eor	r1, r1
    646c:	91 1d       	adc	r25, r1
    646e:	b2 9f       	mul	r27, r18
    6470:	70 0d       	add	r23, r0
    6472:	81 1d       	adc	r24, r1
    6474:	11 24       	eor	r1, r1
    6476:	91 1d       	adc	r25, r1
    6478:	08 95       	ret

0000647a <__muluhisi3>:
    647a:	0e 94 2e 32 	call	0x645c	; 0x645c <__umulhisi3>
    647e:	a5 9f       	mul	r26, r21
    6480:	90 0d       	add	r25, r0
    6482:	b4 9f       	mul	r27, r20
    6484:	90 0d       	add	r25, r0
    6486:	a4 9f       	mul	r26, r20
    6488:	80 0d       	add	r24, r0
    648a:	91 1d       	adc	r25, r1
    648c:	11 24       	eor	r1, r1
    648e:	08 95       	ret

00006490 <malloc>:
    6490:	cf 93       	push	r28
    6492:	df 93       	push	r29
    6494:	82 30       	cpi	r24, 0x02	; 2
    6496:	91 05       	cpc	r25, r1
    6498:	10 f4       	brcc	.+4      	; 0x649e <malloc+0xe>
    649a:	82 e0       	ldi	r24, 0x02	; 2
    649c:	90 e0       	ldi	r25, 0x00	; 0
    649e:	e0 91 64 25 	lds	r30, 0x2564
    64a2:	f0 91 65 25 	lds	r31, 0x2565
    64a6:	20 e0       	ldi	r18, 0x00	; 0
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	c0 e0       	ldi	r28, 0x00	; 0
    64ac:	d0 e0       	ldi	r29, 0x00	; 0
    64ae:	30 97       	sbiw	r30, 0x00	; 0
    64b0:	11 f1       	breq	.+68     	; 0x64f6 <malloc+0x66>
    64b2:	40 81       	ld	r20, Z
    64b4:	51 81       	ldd	r21, Z+1	; 0x01
    64b6:	48 17       	cp	r20, r24
    64b8:	59 07       	cpc	r21, r25
    64ba:	c0 f0       	brcs	.+48     	; 0x64ec <malloc+0x5c>
    64bc:	48 17       	cp	r20, r24
    64be:	59 07       	cpc	r21, r25
    64c0:	61 f4       	brne	.+24     	; 0x64da <malloc+0x4a>
    64c2:	82 81       	ldd	r24, Z+2	; 0x02
    64c4:	93 81       	ldd	r25, Z+3	; 0x03
    64c6:	20 97       	sbiw	r28, 0x00	; 0
    64c8:	19 f0       	breq	.+6      	; 0x64d0 <malloc+0x40>
    64ca:	8a 83       	std	Y+2, r24	; 0x02
    64cc:	9b 83       	std	Y+3, r25	; 0x03
    64ce:	2b c0       	rjmp	.+86     	; 0x6526 <malloc+0x96>
    64d0:	80 93 64 25 	sts	0x2564, r24
    64d4:	90 93 65 25 	sts	0x2565, r25
    64d8:	26 c0       	rjmp	.+76     	; 0x6526 <malloc+0x96>
    64da:	21 15       	cp	r18, r1
    64dc:	31 05       	cpc	r19, r1
    64de:	19 f0       	breq	.+6      	; 0x64e6 <malloc+0x56>
    64e0:	42 17       	cp	r20, r18
    64e2:	53 07       	cpc	r21, r19
    64e4:	18 f4       	brcc	.+6      	; 0x64ec <malloc+0x5c>
    64e6:	9a 01       	movw	r18, r20
    64e8:	be 01       	movw	r22, r28
    64ea:	df 01       	movw	r26, r30
    64ec:	ef 01       	movw	r28, r30
    64ee:	02 80       	ldd	r0, Z+2	; 0x02
    64f0:	f3 81       	ldd	r31, Z+3	; 0x03
    64f2:	e0 2d       	mov	r30, r0
    64f4:	dc cf       	rjmp	.-72     	; 0x64ae <malloc+0x1e>
    64f6:	21 15       	cp	r18, r1
    64f8:	31 05       	cpc	r19, r1
    64fa:	09 f1       	breq	.+66     	; 0x653e <malloc+0xae>
    64fc:	28 1b       	sub	r18, r24
    64fe:	39 0b       	sbc	r19, r25
    6500:	24 30       	cpi	r18, 0x04	; 4
    6502:	31 05       	cpc	r19, r1
    6504:	90 f4       	brcc	.+36     	; 0x652a <malloc+0x9a>
    6506:	12 96       	adiw	r26, 0x02	; 2
    6508:	8d 91       	ld	r24, X+
    650a:	9c 91       	ld	r25, X
    650c:	13 97       	sbiw	r26, 0x03	; 3
    650e:	61 15       	cp	r22, r1
    6510:	71 05       	cpc	r23, r1
    6512:	21 f0       	breq	.+8      	; 0x651c <malloc+0x8c>
    6514:	fb 01       	movw	r30, r22
    6516:	82 83       	std	Z+2, r24	; 0x02
    6518:	93 83       	std	Z+3, r25	; 0x03
    651a:	04 c0       	rjmp	.+8      	; 0x6524 <malloc+0x94>
    651c:	80 93 64 25 	sts	0x2564, r24
    6520:	90 93 65 25 	sts	0x2565, r25
    6524:	fd 01       	movw	r30, r26
    6526:	32 96       	adiw	r30, 0x02	; 2
    6528:	44 c0       	rjmp	.+136    	; 0x65b2 <malloc+0x122>
    652a:	fd 01       	movw	r30, r26
    652c:	e2 0f       	add	r30, r18
    652e:	f3 1f       	adc	r31, r19
    6530:	81 93       	st	Z+, r24
    6532:	91 93       	st	Z+, r25
    6534:	22 50       	subi	r18, 0x02	; 2
    6536:	31 09       	sbc	r19, r1
    6538:	2d 93       	st	X+, r18
    653a:	3c 93       	st	X, r19
    653c:	3a c0       	rjmp	.+116    	; 0x65b2 <malloc+0x122>
    653e:	20 91 62 25 	lds	r18, 0x2562
    6542:	30 91 63 25 	lds	r19, 0x2563
    6546:	23 2b       	or	r18, r19
    6548:	41 f4       	brne	.+16     	; 0x655a <malloc+0xca>
    654a:	20 91 02 20 	lds	r18, 0x2002
    654e:	30 91 03 20 	lds	r19, 0x2003
    6552:	20 93 62 25 	sts	0x2562, r18
    6556:	30 93 63 25 	sts	0x2563, r19
    655a:	20 91 00 20 	lds	r18, 0x2000
    655e:	30 91 01 20 	lds	r19, 0x2001
    6562:	21 15       	cp	r18, r1
    6564:	31 05       	cpc	r19, r1
    6566:	41 f4       	brne	.+16     	; 0x6578 <malloc+0xe8>
    6568:	2d b7       	in	r18, 0x3d	; 61
    656a:	3e b7       	in	r19, 0x3e	; 62
    656c:	40 91 04 20 	lds	r20, 0x2004
    6570:	50 91 05 20 	lds	r21, 0x2005
    6574:	24 1b       	sub	r18, r20
    6576:	35 0b       	sbc	r19, r21
    6578:	e0 91 62 25 	lds	r30, 0x2562
    657c:	f0 91 63 25 	lds	r31, 0x2563
    6580:	e2 17       	cp	r30, r18
    6582:	f3 07       	cpc	r31, r19
    6584:	a0 f4       	brcc	.+40     	; 0x65ae <malloc+0x11e>
    6586:	2e 1b       	sub	r18, r30
    6588:	3f 0b       	sbc	r19, r31
    658a:	28 17       	cp	r18, r24
    658c:	39 07       	cpc	r19, r25
    658e:	78 f0       	brcs	.+30     	; 0x65ae <malloc+0x11e>
    6590:	ac 01       	movw	r20, r24
    6592:	4e 5f       	subi	r20, 0xFE	; 254
    6594:	5f 4f       	sbci	r21, 0xFF	; 255
    6596:	24 17       	cp	r18, r20
    6598:	35 07       	cpc	r19, r21
    659a:	48 f0       	brcs	.+18     	; 0x65ae <malloc+0x11e>
    659c:	4e 0f       	add	r20, r30
    659e:	5f 1f       	adc	r21, r31
    65a0:	40 93 62 25 	sts	0x2562, r20
    65a4:	50 93 63 25 	sts	0x2563, r21
    65a8:	81 93       	st	Z+, r24
    65aa:	91 93       	st	Z+, r25
    65ac:	02 c0       	rjmp	.+4      	; 0x65b2 <malloc+0x122>
    65ae:	e0 e0       	ldi	r30, 0x00	; 0
    65b0:	f0 e0       	ldi	r31, 0x00	; 0
    65b2:	cf 01       	movw	r24, r30
    65b4:	df 91       	pop	r29
    65b6:	cf 91       	pop	r28
    65b8:	08 95       	ret

000065ba <free>:
    65ba:	0f 93       	push	r16
    65bc:	1f 93       	push	r17
    65be:	cf 93       	push	r28
    65c0:	df 93       	push	r29
    65c2:	00 97       	sbiw	r24, 0x00	; 0
    65c4:	09 f4       	brne	.+2      	; 0x65c8 <free+0xe>
    65c6:	8c c0       	rjmp	.+280    	; 0x66e0 <free+0x126>
    65c8:	fc 01       	movw	r30, r24
    65ca:	32 97       	sbiw	r30, 0x02	; 2
    65cc:	12 82       	std	Z+2, r1	; 0x02
    65ce:	13 82       	std	Z+3, r1	; 0x03
    65d0:	00 91 64 25 	lds	r16, 0x2564
    65d4:	10 91 65 25 	lds	r17, 0x2565
    65d8:	01 15       	cp	r16, r1
    65da:	11 05       	cpc	r17, r1
    65dc:	81 f4       	brne	.+32     	; 0x65fe <free+0x44>
    65de:	20 81       	ld	r18, Z
    65e0:	31 81       	ldd	r19, Z+1	; 0x01
    65e2:	82 0f       	add	r24, r18
    65e4:	93 1f       	adc	r25, r19
    65e6:	20 91 62 25 	lds	r18, 0x2562
    65ea:	30 91 63 25 	lds	r19, 0x2563
    65ee:	28 17       	cp	r18, r24
    65f0:	39 07       	cpc	r19, r25
    65f2:	79 f5       	brne	.+94     	; 0x6652 <free+0x98>
    65f4:	e0 93 62 25 	sts	0x2562, r30
    65f8:	f0 93 63 25 	sts	0x2563, r31
    65fc:	71 c0       	rjmp	.+226    	; 0x66e0 <free+0x126>
    65fe:	d8 01       	movw	r26, r16
    6600:	40 e0       	ldi	r20, 0x00	; 0
    6602:	50 e0       	ldi	r21, 0x00	; 0
    6604:	ae 17       	cp	r26, r30
    6606:	bf 07       	cpc	r27, r31
    6608:	50 f4       	brcc	.+20     	; 0x661e <free+0x64>
    660a:	12 96       	adiw	r26, 0x02	; 2
    660c:	2d 91       	ld	r18, X+
    660e:	3c 91       	ld	r19, X
    6610:	13 97       	sbiw	r26, 0x03	; 3
    6612:	ad 01       	movw	r20, r26
    6614:	21 15       	cp	r18, r1
    6616:	31 05       	cpc	r19, r1
    6618:	09 f1       	breq	.+66     	; 0x665c <free+0xa2>
    661a:	d9 01       	movw	r26, r18
    661c:	f3 cf       	rjmp	.-26     	; 0x6604 <free+0x4a>
    661e:	9d 01       	movw	r18, r26
    6620:	da 01       	movw	r26, r20
    6622:	22 83       	std	Z+2, r18	; 0x02
    6624:	33 83       	std	Z+3, r19	; 0x03
    6626:	60 81       	ld	r22, Z
    6628:	71 81       	ldd	r23, Z+1	; 0x01
    662a:	86 0f       	add	r24, r22
    662c:	97 1f       	adc	r25, r23
    662e:	82 17       	cp	r24, r18
    6630:	93 07       	cpc	r25, r19
    6632:	69 f4       	brne	.+26     	; 0x664e <free+0x94>
    6634:	ec 01       	movw	r28, r24
    6636:	28 81       	ld	r18, Y
    6638:	39 81       	ldd	r19, Y+1	; 0x01
    663a:	26 0f       	add	r18, r22
    663c:	37 1f       	adc	r19, r23
    663e:	2e 5f       	subi	r18, 0xFE	; 254
    6640:	3f 4f       	sbci	r19, 0xFF	; 255
    6642:	20 83       	st	Z, r18
    6644:	31 83       	std	Z+1, r19	; 0x01
    6646:	8a 81       	ldd	r24, Y+2	; 0x02
    6648:	9b 81       	ldd	r25, Y+3	; 0x03
    664a:	82 83       	std	Z+2, r24	; 0x02
    664c:	93 83       	std	Z+3, r25	; 0x03
    664e:	45 2b       	or	r20, r21
    6650:	29 f4       	brne	.+10     	; 0x665c <free+0xa2>
    6652:	e0 93 64 25 	sts	0x2564, r30
    6656:	f0 93 65 25 	sts	0x2565, r31
    665a:	42 c0       	rjmp	.+132    	; 0x66e0 <free+0x126>
    665c:	12 96       	adiw	r26, 0x02	; 2
    665e:	ed 93       	st	X+, r30
    6660:	fc 93       	st	X, r31
    6662:	13 97       	sbiw	r26, 0x03	; 3
    6664:	ed 01       	movw	r28, r26
    6666:	49 91       	ld	r20, Y+
    6668:	59 91       	ld	r21, Y+
    666a:	9e 01       	movw	r18, r28
    666c:	24 0f       	add	r18, r20
    666e:	35 1f       	adc	r19, r21
    6670:	e2 17       	cp	r30, r18
    6672:	f3 07       	cpc	r31, r19
    6674:	71 f4       	brne	.+28     	; 0x6692 <free+0xd8>
    6676:	80 81       	ld	r24, Z
    6678:	91 81       	ldd	r25, Z+1	; 0x01
    667a:	84 0f       	add	r24, r20
    667c:	95 1f       	adc	r25, r21
    667e:	02 96       	adiw	r24, 0x02	; 2
    6680:	8d 93       	st	X+, r24
    6682:	9c 93       	st	X, r25
    6684:	11 97       	sbiw	r26, 0x01	; 1
    6686:	82 81       	ldd	r24, Z+2	; 0x02
    6688:	93 81       	ldd	r25, Z+3	; 0x03
    668a:	12 96       	adiw	r26, 0x02	; 2
    668c:	8d 93       	st	X+, r24
    668e:	9c 93       	st	X, r25
    6690:	13 97       	sbiw	r26, 0x03	; 3
    6692:	e0 e0       	ldi	r30, 0x00	; 0
    6694:	f0 e0       	ldi	r31, 0x00	; 0
    6696:	d8 01       	movw	r26, r16
    6698:	12 96       	adiw	r26, 0x02	; 2
    669a:	8d 91       	ld	r24, X+
    669c:	9c 91       	ld	r25, X
    669e:	13 97       	sbiw	r26, 0x03	; 3
    66a0:	00 97       	sbiw	r24, 0x00	; 0
    66a2:	19 f0       	breq	.+6      	; 0x66aa <free+0xf0>
    66a4:	f8 01       	movw	r30, r16
    66a6:	8c 01       	movw	r16, r24
    66a8:	f6 cf       	rjmp	.-20     	; 0x6696 <free+0xdc>
    66aa:	8d 91       	ld	r24, X+
    66ac:	9c 91       	ld	r25, X
    66ae:	98 01       	movw	r18, r16
    66b0:	2e 5f       	subi	r18, 0xFE	; 254
    66b2:	3f 4f       	sbci	r19, 0xFF	; 255
    66b4:	82 0f       	add	r24, r18
    66b6:	93 1f       	adc	r25, r19
    66b8:	20 91 62 25 	lds	r18, 0x2562
    66bc:	30 91 63 25 	lds	r19, 0x2563
    66c0:	28 17       	cp	r18, r24
    66c2:	39 07       	cpc	r19, r25
    66c4:	69 f4       	brne	.+26     	; 0x66e0 <free+0x126>
    66c6:	30 97       	sbiw	r30, 0x00	; 0
    66c8:	29 f4       	brne	.+10     	; 0x66d4 <free+0x11a>
    66ca:	10 92 64 25 	sts	0x2564, r1
    66ce:	10 92 65 25 	sts	0x2565, r1
    66d2:	02 c0       	rjmp	.+4      	; 0x66d8 <free+0x11e>
    66d4:	12 82       	std	Z+2, r1	; 0x02
    66d6:	13 82       	std	Z+3, r1	; 0x03
    66d8:	00 93 62 25 	sts	0x2562, r16
    66dc:	10 93 63 25 	sts	0x2563, r17
    66e0:	df 91       	pop	r29
    66e2:	cf 91       	pop	r28
    66e4:	1f 91       	pop	r17
    66e6:	0f 91       	pop	r16
    66e8:	08 95       	ret

000066ea <memcpy>:
    66ea:	fb 01       	movw	r30, r22
    66ec:	dc 01       	movw	r26, r24
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <memcpy+0xa>
    66f0:	01 90       	ld	r0, Z+
    66f2:	0d 92       	st	X+, r0
    66f4:	41 50       	subi	r20, 0x01	; 1
    66f6:	50 40       	sbci	r21, 0x00	; 0
    66f8:	d8 f7       	brcc	.-10     	; 0x66f0 <memcpy+0x6>
    66fa:	08 95       	ret

000066fc <eeprom_read_dword>:
    66fc:	0e 94 96 33 	call	0x672c	; 0x672c <eeprom_mapen>
    6700:	60 81       	ld	r22, Z
    6702:	71 81       	ldd	r23, Z+1	; 0x01
    6704:	82 81       	ldd	r24, Z+2	; 0x02
    6706:	93 81       	ldd	r25, Z+3	; 0x03
    6708:	08 95       	ret

0000670a <eeprom_write_dword>:
    670a:	24 2f       	mov	r18, r20
    670c:	0e 94 a3 33 	call	0x6746	; 0x6746 <eeprom_write_r18>
    6710:	25 2f       	mov	r18, r21
    6712:	0e 94 a3 33 	call	0x6746	; 0x6746 <eeprom_write_r18>
    6716:	0c 94 8d 33 	jmp	0x671a	; 0x671a <eeprom_write_word>

0000671a <eeprom_write_word>:
    671a:	0e 94 a2 33 	call	0x6744	; 0x6744 <eeprom_write_byte>
    671e:	27 2f       	mov	r18, r23
    6720:	0c 94 a3 33 	jmp	0x6746	; 0x6746 <eeprom_write_r18>

00006724 <eeprom_read_byte>:
    6724:	03 d0       	rcall	.+6      	; 0x672c <eeprom_mapen>
    6726:	80 81       	ld	r24, Z
    6728:	99 27       	eor	r25, r25
    672a:	08 95       	ret

0000672c <eeprom_mapen>:
    672c:	e0 ec       	ldi	r30, 0xC0	; 192
    672e:	f1 e0       	ldi	r31, 0x01	; 1
    6730:	37 85       	ldd	r19, Z+15	; 0x0f
    6732:	37 fd       	sbrc	r19, 7
    6734:	fd cf       	rjmp	.-6      	; 0x6730 <eeprom_mapen+0x4>
    6736:	34 85       	ldd	r19, Z+12	; 0x0c
    6738:	38 60       	ori	r19, 0x08	; 8
    673a:	34 87       	std	Z+12, r19	; 0x0c
    673c:	fc 01       	movw	r30, r24
    673e:	e0 50       	subi	r30, 0x00	; 0
    6740:	f0 4f       	sbci	r31, 0xF0	; 240
    6742:	08 95       	ret

00006744 <eeprom_write_byte>:
    6744:	26 2f       	mov	r18, r22

00006746 <eeprom_write_r18>:
    6746:	e0 ec       	ldi	r30, 0xC0	; 192
    6748:	f1 e0       	ldi	r31, 0x01	; 1
    674a:	37 85       	ldd	r19, Z+15	; 0x0f
    674c:	37 fd       	sbrc	r19, 7
    674e:	fd cf       	rjmp	.-6      	; 0x674a <eeprom_write_r18+0x4>
    6750:	34 85       	ldd	r19, Z+12	; 0x0c
    6752:	37 7f       	andi	r19, 0xF7	; 247
    6754:	34 87       	std	Z+12, r19	; 0x0c
    6756:	37 85       	ldd	r19, Z+15	; 0x0f
    6758:	31 ff       	sbrs	r19, 1
    675a:	09 c0       	rjmp	.+18     	; 0x676e <eeprom_write_r18+0x28>
    675c:	36 e3       	ldi	r19, 0x36	; 54
    675e:	32 87       	std	Z+10, r19	; 0x0a
    6760:	38 ed       	ldi	r19, 0xD8	; 216
    6762:	34 bf       	out	0x34, r19	; 52
    6764:	31 e0       	ldi	r19, 0x01	; 1
    6766:	33 87       	std	Z+11, r19	; 0x0b
    6768:	37 85       	ldd	r19, Z+15	; 0x0f
    676a:	37 fd       	sbrc	r19, 7
    676c:	fd cf       	rjmp	.-6      	; 0x6768 <eeprom_write_r18+0x22>
    676e:	33 e3       	ldi	r19, 0x33	; 51
    6770:	32 87       	std	Z+10, r19	; 0x0a
    6772:	80 83       	st	Z, r24
    6774:	91 83       	std	Z+1, r25	; 0x01
    6776:	12 82       	std	Z+2, r1	; 0x02
    6778:	24 83       	std	Z+4, r18	; 0x04
    677a:	25 e3       	ldi	r18, 0x35	; 53
    677c:	22 87       	std	Z+10, r18	; 0x0a
    677e:	28 ed       	ldi	r18, 0xD8	; 216
    6780:	31 e0       	ldi	r19, 0x01	; 1
    6782:	24 bf       	out	0x34, r18	; 52
    6784:	33 87       	std	Z+11, r19	; 0x0b
    6786:	01 96       	adiw	r24, 0x01	; 1
    6788:	08 95       	ret

0000678a <__do_global_dtors>:
    678a:	12 e0       	ldi	r17, 0x02	; 2
    678c:	cb e8       	ldi	r28, 0x8B	; 139
    678e:	d2 e0       	ldi	r29, 0x02	; 2
    6790:	00 e0       	ldi	r16, 0x00	; 0
    6792:	06 c0       	rjmp	.+12     	; 0x67a0 <__do_global_dtors+0x16>
    6794:	80 2f       	mov	r24, r16
    6796:	fe 01       	movw	r30, r28
    6798:	0e 94 26 32 	call	0x644c	; 0x644c <__tablejump2__>
    679c:	21 96       	adiw	r28, 0x01	; 1
    679e:	01 1d       	adc	r16, r1
    67a0:	cd 38       	cpi	r28, 0x8D	; 141
    67a2:	d1 07       	cpc	r29, r17
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	08 07       	cpc	r16, r24
    67a8:	a9 f7       	brne	.-22     	; 0x6794 <__do_global_dtors+0xa>
    67aa:	f8 94       	cli

000067ac <__stop_program>:
    67ac:	ff cf       	rjmp	.-2      	; 0x67ac <__stop_program>
