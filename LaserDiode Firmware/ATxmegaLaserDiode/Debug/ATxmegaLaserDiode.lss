
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000176  00802000  000054f2  00005586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a72  00802176  00802176  000056fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000056fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000572c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  0000576c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cc8d  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002355  00000000  00000000  00012cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029b0  00000000  00000000  0001502e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f78  00000000  00000000  000179e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004d58  00000000  00000000  0001a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f7a  00000000  00000000  0001f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  0002762a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 23 02 	jmp	0x446	; 0x446 <__dtors_end>
       4:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__vector_1>
       8:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_2>
       c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_3>
      10:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_4>
      14:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_5>
      18:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_6>
      1c:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__vector_7>
      20:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__vector_8>
      24:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__vector_9>
      28:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_10>
      2c:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__vector_11>
      30:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__vector_12>
      34:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_13>
      38:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_14>
      3c:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_15>
      40:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_16>
      44:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_17>
      48:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__vector_18>
      4c:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_19>
      50:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__vector_20>
      54:	0c 94 86 10 	jmp	0x210c	; 0x210c <__vector_21>
      58:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__vector_22>
      5c:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__vector_23>
      60:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_24>
      64:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__vector_25>
      68:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__vector_26>
      6c:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_27>
      70:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_28>
      74:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_29>
      78:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_30>
      7c:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__vector_31>
      80:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__vector_32>
      84:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__vector_33>
      88:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__vector_34>
      8c:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__vector_35>
      90:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__vector_36>
      94:	0c 94 96 13 	jmp	0x272c	; 0x272c <__vector_37>
      98:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__vector_38>
      9c:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__vector_39>
      a0:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__vector_40>
      a4:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_41>
      a8:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__vector_42>
      ac:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__vector_43>
      b0:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__vector_44>
      b4:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__vector_45>
      b8:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__vector_46>
      bc:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__vector_47>
      c0:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__vector_48>
      c4:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__vector_49>
      c8:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__vector_50>
      cc:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__vector_51>
      d0:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__vector_52>
      d4:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__vector_53>
      d8:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__vector_54>
      dc:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__vector_55>
      e0:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__vector_56>
      e4:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__vector_57>
      e8:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__vector_58>
      ec:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__vector_59>
      f0:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__vector_60>
      f4:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__vector_61>
      f8:	0c 94 5f 18 	jmp	0x30be	; 0x30be <__vector_62>
      fc:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__vector_63>
     100:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__vector_64>
     104:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__vector_65>
     108:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__vector_66>
     10c:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__vector_67>
     110:	0c 94 85 19 	jmp	0x330a	; 0x330a <__vector_68>
     114:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__vector_69>
     118:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__vector_70>
     11c:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__vector_71>
     120:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__vector_72>
     124:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__vector_73>
     128:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_74>
     12c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     130:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     134:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__vector_77>
     138:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__vector_78>
     13c:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__vector_79>
     140:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__vector_80>
     144:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__vector_81>
     148:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__vector_82>
     14c:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__vector_83>
     150:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__vector_84>
     154:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__vector_85>
     158:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__vector_86>
     15c:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__vector_87>
     160:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__vector_88>
     164:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__vector_89>
     168:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__vector_90>
     16c:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__vector_91>
     170:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__vector_92>
     174:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__vector_93>
     178:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     17c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     180:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     184:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     188:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     18c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     190:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     194:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     198:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     19c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1a0:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__vector_104>
     1a4:	0c 94 4e 1e 	jmp	0x3c9c	; 0x3c9c <__vector_105>
     1a8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1ac:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1b0:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__vector_108>
     1b4:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__vector_109>
     1b8:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__vector_110>
     1bc:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__vector_111>
     1c0:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__vector_112>
     1c4:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <__vector_113>
     1c8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1cc:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1d0:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1d4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1d8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1dc:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__vector_119>
     1e0:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__vector_120>
     1e4:	0c 94 07 20 	jmp	0x400e	; 0x400e <__vector_121>
     1e8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1ec:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1f0:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1f4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1f8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
     1fc:	75 02       	muls	r23, r21
     1fe:	78 02       	muls	r23, r24
     200:	89 02       	muls	r24, r25
     202:	9a 02       	muls	r25, r26
     204:	dc 02       	muls	r29, r28
     206:	dc 02       	muls	r29, r28
     208:	dc 02       	muls	r29, r28
     20a:	ac 02       	muls	r26, r28
     20c:	b0 02       	muls	r27, r16
     20e:	b4 02       	muls	r27, r20
     210:	b8 02       	muls	r27, r24
     212:	bc 02       	muls	r27, r28
     214:	c0 02       	muls	r28, r16
     216:	dc 02       	muls	r29, r28
     218:	c4 02       	muls	r28, r20
     21a:	c8 02       	muls	r28, r24
     21c:	cc 02       	muls	r28, r28
     21e:	d0 02       	muls	r29, r16
     220:	d4 02       	muls	r29, r20
     222:	d8 02       	muls	r29, r24
     224:	e3 05       	cpc	r30, r3
     226:	0d 0a       	sbc	r0, r29
     228:	0d 0a       	sbc	r0, r29
     22a:	0d 0a       	sbc	r0, r29
     22c:	0d 0a       	sbc	r0, r29
     22e:	fe 05       	cpc	r31, r14
     230:	2d 06       	cpc	r2, r29
     232:	50 06       	cpc	r5, r16
     234:	9f 06       	cpc	r9, r31
     236:	0d 0a       	sbc	r0, r29
     238:	0d 0a       	sbc	r0, r29
     23a:	0d 0a       	sbc	r0, r29
     23c:	0d 0a       	sbc	r0, r29
     23e:	0d 0a       	sbc	r0, r29
     240:	0d 0a       	sbc	r0, r29
     242:	0d 0a       	sbc	r0, r29
     244:	1b 07       	cpc	r17, r27
     246:	ff 06       	cpc	r15, r31
     248:	48 08       	sbc	r4, r8
     24a:	57 08       	sbc	r5, r7
     24c:	66 08       	sbc	r6, r6
     24e:	75 08       	sbc	r7, r5
     250:	84 08       	sbc	r8, r4
     252:	93 08       	sbc	r9, r3
     254:	a2 08       	sbc	r10, r2
     256:	b1 08       	sbc	r11, r1
     258:	c0 08       	sbc	r12, r0
     25a:	cf 08       	sbc	r12, r15
     25c:	de 08       	sbc	r13, r14
     25e:	ed 08       	sbc	r14, r13
     260:	fc 08       	sbc	r15, r12
     262:	0b 09       	sbc	r16, r11
     264:	20 23       	and	r18, r16
     266:	20 23       	and	r18, r16
     268:	28 23       	and	r18, r24
     26a:	30 23       	and	r19, r16
     26c:	3b 23       	and	r19, r27
     26e:	93 23       	and	r25, r19
     270:	9a 23       	and	r25, r26
     272:	c6 23       	and	r28, r22
     274:	c6 23       	and	r28, r22
     276:	c5 23       	and	r28, r21
     278:	c5 23       	and	r28, r21

0000027a <__trampolines_start>:
     27a:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     27e:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     282:	0c 94 8d 28 	jmp	0x511a	; 0x511a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     286:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     28a:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     28e:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
     292:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     296:	0c 94 2e 24 	jmp	0x485c	; 0x485c <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     29a:	0c 94 12 22 	jmp	0x4424	; 0x4424 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     29e:	0c 94 1f 25 	jmp	0x4a3e	; 0x4a3e <_ZN10CDGUSUSART11IsReceivingEv>
     2a2:	0c 94 06 28 	jmp	0x500c	; 0x500c <_ZN7CTimerF4StopEv>
     2a6:	0c 94 4f 27 	jmp	0x4e9e	; 0x4e9e <_ZN7CTimerC8SetCOMPBEj>
     2aa:	0c 94 be 03 	jmp	0x77c	; 0x77c <_GLOBAL__sub_I_timer>
     2ae:	0c 94 28 23 	jmp	0x4650	; 0x4650 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     2b2:	0c 94 23 28 	jmp	0x5046	; 0x5046 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     2b6:	0c 94 36 28 	jmp	0x506c	; 0x506c <_ZN7CTimerF8SetCOMPBEj>
     2ba:	0c 94 c8 02 	jmp	0x590	; 0x590 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe2>
     2be:	0c 94 9a 02 	jmp	0x534	; 0x534 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x86>
     2c2:	0c 94 b0 02 	jmp	0x560	; 0x560 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb2>
     2c6:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2ca:	0c 94 30 23 	jmp	0x4660	; 0x4660 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     2ce:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     2d2:	0c 94 c4 02 	jmp	0x588	; 0x588 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xda>
     2d6:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_ZN16CLaserControlApp3RunEv+0x5fe>
     2da:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <_ZN7CTimerC5StartEj>
     2de:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <_ZN7CTimerF8SetCOMPCEj>
     2e2:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     2e6:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2ea:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <_GLOBAL__sub_D_dacSPI>
     2ee:	0c 94 c5 23 	jmp	0x478a	; 0x478a <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     2f2:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfa>
     2f6:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <_ZN16CLaserControlApp3RunEv+0x5c2>
     2fa:	0c 94 9f 28 	jmp	0x513e	; 0x513e <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2fe:	0c 94 cf 08 	jmp	0x119e	; 0x119e <_ZN16CLaserControlApp3RunEv+0x694>
     302:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     306:	0c 94 c6 23 	jmp	0x478c	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     30a:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x102>
     30e:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     312:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_ZN16CLaserControlApp3RunEv+0xbc>
     316:	0c 94 4a 27 	jmp	0x4e94	; 0x4e94 <_ZN7CTimerC8SetCOMPAEj>
     31a:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <_ZN10CDGUSUSART11IsDataEmptyEv>
     31e:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <_ZN16CLaserControlApp3RunEv+0x70c>
     322:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     326:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     32a:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_ZN16CLaserControlApp3RunEv+0x658>
     32e:	0c 94 14 28 	jmp	0x5028	; 0x5028 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     332:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <_ZN7CTimerC8SetCOMPDEj>
     336:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     33a:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <_ZN16CLaserControlApp3RunEv+0x5a4>
     33e:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <_ZN16CLaserControlApp3RunEv+0x234>
     342:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     346:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <_ZN16CLaserControlApp3RunEv+0x676>
     34a:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     34e:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     352:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <_ZN7CTimerF9SetPeriodEj>
     356:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     35a:	0c 94 48 08 	jmp	0x1090	; 0x1090 <_ZN16CLaserControlApp3RunEv+0x586>
     35e:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <_ZN16CLaserControlApp3RunEv+0x32c>
     362:	0c 94 31 28 	jmp	0x5062	; 0x5062 <_ZN7CTimerF8SetCOMPAEj>
     366:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <_ZN16CLaserControlApp3RunEv+0x6b2>
     36a:	0c 94 35 22 	jmp	0x446a	; 0x446a <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     36e:	0c 94 3f 20 	jmp	0x407e	; 0x407e <_GLOBAL__sub_I_dacSPI>
     372:	0c 94 93 23 	jmp	0x4726	; 0x4726 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     376:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <_ZN9CMBSender13OnReceiveByteEh+0x116>
     37a:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     37e:	0c 94 50 06 	jmp	0xca0	; 0xca0 <_ZN16CLaserControlApp3RunEv+0x196>
     382:	0c 94 bb 03 	jmp	0x776	; 0x776 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     386:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_ZN16CLaserControlApp3RunEv+0x150>
     38a:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <_ZN4CSPI16StaticOnTransmitEPv>
     38e:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_ZN16CLaserControlApp3RunEv+0x5e0>
     392:	0c 94 7b 28 	jmp	0x50f6	; 0x50f6 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     396:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     39a:	0c 94 0e 28 	jmp	0x501c	; 0x501c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     39e:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <_ZN7CTimerC8SetCOMPCEj>
     3a2:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_ZN16CLaserControlApp13OnTimerStaticEPv>
     3a6:	0c 94 b4 02 	jmp	0x568	; 0x568 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xba>
     3aa:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3ae:	0c 94 20 23 	jmp	0x4640	; 0x4640 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     3b2:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <_ZN16CLaserControlApp3RunEv+0x63a>
     3b6:	0c 94 40 28 	jmp	0x5080	; 0x5080 <_ZN7CTimerF8SetCOMPDEj>
     3ba:	0c 94 ed 08 	jmp	0x11da	; 0x11da <_ZN16CLaserControlApp3RunEv+0x6d0>
     3be:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf2>
     3c2:	0c 94 89 02 	jmp	0x512	; 0x512 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x64>
     3c6:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3ca:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     3ce:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <_ZN16CLaserControlApp3RunEv+0x6ee>
     3d2:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     3d6:	0c 94 b8 02 	jmp	0x570	; 0x570 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc2>
     3da:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3de:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_ZN16CLaserControlApp3RunEv+0xf2>
     3e2:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3e6:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_ZN16CLaserControlApp3RunEv+0x2f4>
     3ea:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ee:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <_ZN10CDGUSUSART15GetReceivedByteEv>
     3f2:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <_ZN7CTimerF5StartEj>
     3f6:	0c 94 5f 22 	jmp	0x44be	; 0x44be <_ZN9CMBSender18OnVariableReceivedEjPjj>
     3fa:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     3fe:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <_ZN16CMBEventsHandler11FreeBuffersEv>
     402:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <_ZN10CDGUSUSART14IsTransmittingEv>
     406:	0c 94 45 28 	jmp	0x508a	; 0x508a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     40a:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <_ZN7CTimerC9SetPeriodEj>
     40e:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x42>
     412:	0c 94 38 20 	jmp	0x4070	; 0x4070 <__cxa_pure_virtual>
     416:	0c 94 cc 02 	jmp	0x598	; 0x598 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xea>
     41a:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     41e:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <_ZN7CTimerC4StopEv>
     422:	0c 94 bc 02 	jmp	0x578	; 0x578 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xca>
     426:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     42a:	0c 94 22 03 	jmp	0x644	; 0x644 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     42e:	0c 94 5e 27 	jmp	0x4ebc	; 0x4ebc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     432:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_GLOBAL__sub_D_timer>
     436:	0c 94 93 08 	jmp	0x1126	; 0x1126 <_ZN16CLaserControlApp3RunEv+0x61c>
     43a:	0c 94 ac 02 	jmp	0x558	; 0x558 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xaa>

0000043e <__ctors_start>:
     43e:	be 03       	fmulsu	r19, r22
     440:	3f 20       	and	r3, r15

00000442 <__ctors_end>:
     442:	c7 03       	fmuls	r20, r23
     444:	58 20       	and	r5, r8

00000446 <__dtors_end>:
     446:	11 24       	eor	r1, r1
     448:	1f be       	out	0x3f, r1	; 63
     44a:	cf ef       	ldi	r28, 0xFF	; 255
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df e3       	ldi	r29, 0x3F	; 63
     450:	de bf       	out	0x3e, r29	; 62
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	0c bf       	out	0x3c, r16	; 60

00000456 <__do_copy_data>:
     456:	11 e2       	ldi	r17, 0x21	; 33
     458:	a0 e0       	ldi	r26, 0x00	; 0
     45a:	b0 e2       	ldi	r27, 0x20	; 32
     45c:	e2 ef       	ldi	r30, 0xF2	; 242
     45e:	f4 e5       	ldi	r31, 0x54	; 84
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	0b bf       	out	0x3b, r16	; 59
     464:	02 c0       	rjmp	.+4      	; 0x46a <__do_copy_data+0x14>
     466:	07 90       	elpm	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	a6 37       	cpi	r26, 0x76	; 118
     46c:	b1 07       	cpc	r27, r17
     46e:	d9 f7       	brne	.-10     	; 0x466 <__do_copy_data+0x10>

00000470 <__do_clear_bss>:
     470:	2b e2       	ldi	r18, 0x2B	; 43
     472:	a6 e7       	ldi	r26, 0x76	; 118
     474:	b1 e2       	ldi	r27, 0x21	; 33
     476:	01 c0       	rjmp	.+2      	; 0x47a <.do_clear_bss_start>

00000478 <.do_clear_bss_loop>:
     478:	1d 92       	st	X+, r1

0000047a <.do_clear_bss_start>:
     47a:	a8 3e       	cpi	r26, 0xE8	; 232
     47c:	b2 07       	cpc	r27, r18
     47e:	e1 f7       	brne	.-8      	; 0x478 <.do_clear_bss_loop>

00000480 <__do_global_ctors>:
     480:	12 e0       	ldi	r17, 0x02	; 2
     482:	c1 e2       	ldi	r28, 0x21	; 33
     484:	d2 e0       	ldi	r29, 0x02	; 2
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	06 c0       	rjmp	.+12     	; 0x496 <__do_global_ctors+0x16>
     48a:	21 97       	sbiw	r28, 0x01	; 1
     48c:	01 09       	sbc	r16, r1
     48e:	80 2f       	mov	r24, r16
     490:	fe 01       	movw	r30, r28
     492:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__tablejump2__>
     496:	cf 31       	cpi	r28, 0x1F	; 31
     498:	d1 07       	cpc	r29, r17
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	08 07       	cpc	r16, r24
     49e:	a9 f7       	brne	.-22     	; 0x48a <__do_global_ctors+0xa>
     4a0:	0e 94 ac 20 	call	0x4158	; 0x4158 <main>
     4a4:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__do_global_dtors>

000004a8 <__bad_interrupt>:
     4a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004ac <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     4ac:	08 95       	ret

000004ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
}

volatile uint8_t DatabaseStatusRegister;

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     4ae:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     4b0:	63 30       	cpi	r22, 0x03	; 3
     4b2:	31 f4       	brne	.+12     	; 0x4c0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     4b4:	fa 01       	movw	r30, r20
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
     4b8:	1e 96       	adiw	r26, 0x0e	; 14
     4ba:	8c 93       	st	X, r24
     4bc:	1e 97       	sbiw	r26, 0x0e	; 14
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
	
	if (addr == REGISTER_DATABASE_EN)
     4c0:	66 35       	cpi	r22, 0x56	; 86
     4c2:	21 f4       	brne	.+8      	; 0x4cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
	{ 
		DatabaseStatusRegister = data[0];
     4c4:	fa 01       	movw	r30, r20
     4c6:	80 81       	ld	r24, Z
     4c8:	80 93 7b 21 	sts	0x217B, r24
	}
	
	switch (PIC_ID)
     4cc:	1e 96       	adiw	r26, 0x0e	; 14
     4ce:	4c 91       	ld	r20, X
     4d0:	1e 97       	sbiw	r26, 0x0e	; 14
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	44 31       	cpi	r20, 0x14	; 20
     4d6:	51 05       	cpc	r21, r1
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     4da:	6e c0       	rjmp	.+220    	; 0x5b8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     4dc:	fa 01       	movw	r30, r20
     4de:	88 27       	eor	r24, r24
     4e0:	e2 50       	subi	r30, 0x02	; 2
     4e2:	ff 4f       	sbci	r31, 0xFF	; 255
     4e4:	8f 4f       	sbci	r24, 0xFF	; 255
     4e6:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     4ea:	1c 96       	adiw	r26, 0x0c	; 12
     4ec:	1c 92       	st	X, r1
		break;
     4ee:	08 95       	ret
		case PICID_WORKFAST:
			state = APP_WORKFAST;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	1c 96       	adiw	r26, 0x0c	; 12
     4f4:	8c 93       	st	X, r24
     4f6:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkFast)
     4f8:	1d 96       	adiw	r26, 0x0d	; 13
     4fa:	8c 91       	ld	r24, X
     4fc:	1d 97       	sbiw	r26, 0x0d	; 13
     4fe:	88 23       	and	r24, r24
     500:	09 f4       	brne	.+2      	; 0x504 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
     502:	72 c0       	rjmp	.+228    	; 0x5e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x13a>
			{
				profile = WorkFast;
     504:	1d 96       	adiw	r26, 0x0d	; 13
     506:	1c 92       	st	X, r1
     508:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	1f 96       	adiw	r26, 0x0f	; 15
     50e:	8c 93       	st	X, r24
     510:	08 95       	ret
			}
		break;
		case PICID_WORKMEDIUM:
			state = APP_WORKMEDIUM;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	1c 96       	adiw	r26, 0x0c	; 12
     516:	8c 93       	st	X, r24
     518:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkMedium)
     51a:	1d 96       	adiw	r26, 0x0d	; 13
     51c:	8c 91       	ld	r24, X
     51e:	1d 97       	sbiw	r26, 0x0d	; 13
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	09 f4       	brne	.+2      	; 0x526 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     524:	61 c0       	rjmp	.+194    	; 0x5e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x13a>
			{
				profile = WorkMedium;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	1d 96       	adiw	r26, 0x0d	; 13
     52a:	8c 93       	st	X, r24
     52c:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     52e:	1f 96       	adiw	r26, 0x0f	; 15
     530:	8c 93       	st	X, r24
     532:	08 95       	ret
			}
		break;
		case PICID_WORKSLOW:
			state = APP_WORKSLOW;
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	1c 96       	adiw	r26, 0x0c	; 12
     538:	8c 93       	st	X, r24
     53a:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkSlow)
     53c:	1d 96       	adiw	r26, 0x0d	; 13
     53e:	8c 91       	ld	r24, X
     540:	1d 97       	sbiw	r26, 0x0d	; 13
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	09 f4       	brne	.+2      	; 0x548 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     546:	50 c0       	rjmp	.+160    	; 0x5e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x13a>
			{
				profile = WorkSlow;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	1d 96       	adiw	r26, 0x0d	; 13
     54c:	8c 93       	st	X, r24
     54e:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	1f 96       	adiw	r26, 0x0f	; 15
     554:	8c 93       	st	X, r24
     556:	08 95       	ret
			}
		break;
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     558:	86 e0       	ldi	r24, 0x06	; 6
     55a:	1c 96       	adiw	r26, 0x0c	; 12
     55c:	8c 93       	st	X, r24
		break;
     55e:	08 95       	ret
		case PICID_WORKOnStart:
			state = APP_WORKOnStart;
     560:	87 e0       	ldi	r24, 0x07	; 7
     562:	1c 96       	adiw	r26, 0x0c	; 12
     564:	8c 93       	st	X, r24
		break;
     566:	08 95       	ret
		case PICID_WORKOnStop:
			state = APP_WORKOnStop;
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	1c 96       	adiw	r26, 0x0c	; 12
     56c:	8c 93       	st	X, r24
		break;
     56e:	08 95       	ret
		case PICID_WORKSTART:
			state = APP_WORKSTART;
     570:	84 e0       	ldi	r24, 0x04	; 4
     572:	1c 96       	adiw	r26, 0x0c	; 12
     574:	8c 93       	st	X, r24
		break;
     576:	08 95       	ret
		case PICID_WORKSTARTED:
			state = APP_WORKSTARTED;
     578:	85 e0       	ldi	r24, 0x05	; 5
     57a:	1c 96       	adiw	r26, 0x0c	; 12
     57c:	8c 93       	st	X, r24
		break;
     57e:	08 95       	ret
		case PICID_PHOTOTYPESELECT:
			state = APP_PHOTOTYPESELECT;
     580:	89 e0       	ldi	r24, 0x09	; 9
     582:	1c 96       	adiw	r26, 0x0c	; 12
     584:	8c 93       	st	X, r24
		break;
     586:	08 95       	ret
		case PICID_PHOTOTYPE1:
			state = APP_PHOTOTYPE1;
     588:	8a e0       	ldi	r24, 0x0A	; 10
     58a:	1c 96       	adiw	r26, 0x0c	; 12
     58c:	8c 93       	st	X, r24
		break;
     58e:	08 95       	ret
		case PICID_PHOTOTYPE2:
			state = APP_PHOTOTYPE2;
     590:	8b e0       	ldi	r24, 0x0B	; 11
     592:	1c 96       	adiw	r26, 0x0c	; 12
     594:	8c 93       	st	X, r24
		break;
     596:	08 95       	ret
		case PICID_PHOTOTYPE3:
			state = APP_PHOTOTYPE3;
     598:	8c e0       	ldi	r24, 0x0C	; 12
     59a:	1c 96       	adiw	r26, 0x0c	; 12
     59c:	8c 93       	st	X, r24
		break;
     59e:	08 95       	ret
		case PICID_PHOTOTYPE4:
			state = APP_PHOTOTYPE4;
     5a0:	8d e0       	ldi	r24, 0x0D	; 13
     5a2:	1c 96       	adiw	r26, 0x0c	; 12
     5a4:	8c 93       	st	X, r24
		break;
     5a6:	08 95       	ret
		case PICID_PHOTOTYPE5:
			state = APP_PHOTOTYPE5;
     5a8:	8e e0       	ldi	r24, 0x0E	; 14
     5aa:	1c 96       	adiw	r26, 0x0c	; 12
     5ac:	8c 93       	st	X, r24
		break;
     5ae:	08 95       	ret
		case PICID_PHOTOTYPE6:
			state = APP_PHOTOTYPE6;
     5b0:	8f e0       	ldi	r24, 0x0F	; 15
     5b2:	1c 96       	adiw	r26, 0x0c	; 12
     5b4:	8c 93       	st	X, r24
		break;
     5b6:	08 95       	ret
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID < PICID_DATABASE_MAX)
     5b8:	1e 96       	adiw	r26, 0x0e	; 14
     5ba:	8c 91       	ld	r24, X
     5bc:	1e 97       	sbiw	r26, 0x0e	; 14
     5be:	88 31       	cpi	r24, 0x18	; 24
     5c0:	28 f0       	brcs	.+10     	; 0x5cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x11e>
     5c2:	1e 96       	adiw	r26, 0x0e	; 14
     5c4:	8c 91       	ld	r24, X
     5c6:	1e 97       	sbiw	r26, 0x0e	; 14
     5c8:	89 32       	cpi	r24, 0x29	; 41
     5ca:	48 f0       	brcs	.+18     	; 0x5de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x130>
			{
				state = APP_DATABASE;
			}
			if (PIC_ID == PICID_DATABASE_MAX)
     5cc:	1e 96       	adiw	r26, 0x0e	; 14
     5ce:	8c 91       	ld	r24, X
     5d0:	1e 97       	sbiw	r26, 0x0e	; 14
     5d2:	89 32       	cpi	r24, 0x29	; 41
     5d4:	49 f4       	brne	.+18     	; 0x5e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x13a>
			{
				state = APP_DATABASE_START;
     5d6:	81 e1       	ldi	r24, 0x11	; 17
     5d8:	1c 96       	adiw	r26, 0x0c	; 12
     5da:	8c 93       	st	X, r24
     5dc:	08 95       	ret
		break;
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID < PICID_DATABASE_MAX)
			{
				state = APP_DATABASE;
     5de:	80 e1       	ldi	r24, 0x10	; 16
     5e0:	1c 96       	adiw	r26, 0x0c	; 12
     5e2:	8c 93       	st	X, r24
     5e4:	1c 97       	sbiw	r26, 0x0c	; 12
     5e6:	f2 cf       	rjmp	.-28     	; 0x5cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x11e>
     5e8:	08 95       	ret

000005ea <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     5ea:	08 95       	ret

000005ec <_Z11ConvertDataPvS_jj>:
volatile DGUS_DATA m_structDGUSDATA_Slow;

extern uint16_t swap(uint16_t data);

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	7c 01       	movw	r14, r24
     5fe:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     600:	41 15       	cp	r20, r1
     602:	51 05       	cpc	r21, r1
     604:	b1 f0       	breq	.+44     	; 0x632 <_Z11ConvertDataPvS_jj+0x46>
     606:	6b 01       	movw	r12, r22
     608:	c4 0e       	add	r12, r20
     60a:	d5 1e       	adc	r13, r21
     60c:	eb 01       	movw	r28, r22
     60e:	26 1b       	sub	r18, r22
     610:	37 0b       	sbc	r19, r23
     612:	c9 01       	movw	r24, r18
     614:	8c 0f       	add	r24, r28
     616:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     618:	b8 01       	movw	r22, r16
     61a:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
     61e:	fc 01       	movw	r30, r24
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	e4 27       	eor	r30, r20
     624:	ee 0d       	add	r30, r14
     626:	ff 1d       	adc	r31, r15
     628:	89 91       	ld	r24, Y+
     62a:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     62c:	cc 15       	cp	r28, r12
     62e:	dd 05       	cpc	r29, r13
     630:	81 f7       	brne	.-32     	; 0x612 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	08 95       	ret

00000644 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
{
	//no code
}

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
     64a:	fa 01       	movw	r30, r20
     64c:	a9 01       	movw	r20, r18
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	if (addr == 0x0400)
     64e:	61 15       	cp	r22, r1
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	78 07       	cpc	r23, r24
     654:	41 f4       	brne	.+16     	; 0x666 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x22>
	{
		ConvertData((void*)&DATA, (void*)data, length);
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	bf 01       	movw	r22, r30
     65c:	8a e9       	ldi	r24, 0x9A	; 154
     65e:	93 e2       	ldi	r25, 0x23	; 35
     660:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
     664:	2e c0       	rjmp	.+92     	; 0x6c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7e>
	}
	
	if (addr == VARIABLE_ADDR_PROFINDEX)
     666:	67 30       	cpi	r22, 0x07	; 7
     668:	71 05       	cpc	r23, r1
     66a:	39 f4       	brne	.+14     	; 0x67a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x36>
	{
		profileIndex = swap(*((uint16_t*)data));
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     674:	88 8f       	std	Y+24, r24	; 0x18
     676:	99 8f       	std	Y+25, r25	; 0x19
     678:	24 c0       	rjmp	.+72     	; 0x6c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7e>
	}
	
	if (addr == STRUCT_ADDR_DATA)
     67a:	61 30       	cpi	r22, 0x01	; 1
     67c:	71 05       	cpc	r23, r1
     67e:	09 f5       	brne	.+66     	; 0x6c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7e>
	{
		//memcpy((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		switch (profile)
     680:	8d 85       	ldd	r24, Y+13	; 0x0d
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	a1 f0       	breq	.+40     	; 0x6ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     686:	18 f0       	brcs	.+6      	; 0x68e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x4a>
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	49 f0       	breq	.+18     	; 0x69e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5a>
     68c:	18 c0       	rjmp	.+48     	; 0x6be <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7a>
		{
			case WorkFast:
				ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	bf 01       	movw	r22, r30
     694:	88 e9       	ldi	r24, 0x98	; 152
     696:	91 e2       	ldi	r25, 0x21	; 33
     698:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
			break;
     69c:	12 c0       	rjmp	.+36     	; 0x6c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7e>
			case WorkSlow:
				ConvertData((void*)&m_structDGUSDATA_Slow, (void*)data, length);
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	bf 01       	movw	r22, r30
     6a4:	8c e7       	ldi	r24, 0x7C	; 124
     6a6:	91 e2       	ldi	r25, 0x21	; 33
     6a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
			break;
     6ac:	0a c0       	rjmp	.+20     	; 0x6c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7e>
			case WorkMedium:
				ConvertData((void*)&m_structDGUSDATA_Medium, (void*)data, length);
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	bf 01       	movw	r22, r30
     6b4:	8a e8       	ldi	r24, 0x8A	; 138
     6b6:	91 e2       	ldi	r25, 0x21	; 33
     6b8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
			break;
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x7e>
			default:
				// Error
				CLaserBoard::Beep();
     6be:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN11CLaserBoard4BeepEv>
			break;
		}
	}
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     6c8:	2c e8       	ldi	r18, 0x8C	; 140
     6ca:	30 e2       	ldi	r19, 0x20	; 32
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
     6d0:	31 83       	std	Z+1, r19	; 0x01
     6d2:	08 95       	ret

000006d4 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     6d4:	2c e8       	ldi	r18, 0x8C	; 140
     6d6:	30 e2       	ldi	r19, 0x20	; 32
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
     6dc:	31 83       	std	Z+1, r19	; 0x01
     6de:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN16CMBEventsHandlerD1Ev>
     6e2:	08 95       	ret

000006e4 <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = WorkFast;
}

void CLaserControlApp::Start()
{	
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	1f 92       	push	r1
     6ee:	1f 92       	push	r1
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
     6f6:	84 e1       	ldi	r24, 0x14	; 20
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     702:	22 e0       	ldi	r18, 0x02	; 2
     704:	ae 01       	movw	r20, r28
     706:	4f 5f       	subi	r20, 0xFF	; 255
     708:	5f 4f       	sbci	r21, 0xFF	; 255
     70a:	63 e0       	ldi	r22, 0x03	; 3
     70c:	f8 01       	movw	r30, r16
     70e:	82 8d       	ldd	r24, Z+26	; 0x1a
     710:	93 8d       	ldd	r25, Z+27	; 0x1b
     712:	0e 94 48 24 	call	0x4890	; 0x4890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     716:	f8 01       	movw	r30, r16
     718:	82 8d       	ldd	r24, Z+26	; 0x1a
     71a:	93 8d       	ldd	r25, Z+27	; 0x1b
     71c:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(m_structDGUSDATA_Fast));
     720:	2e e0       	ldi	r18, 0x0E	; 14
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	48 e9       	ldi	r20, 0x98	; 152
     726:	51 e2       	ldi	r21, 0x21	; 33
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	f8 01       	movw	r30, r16
     72e:	82 8d       	ldd	r24, Z+26	; 0x1a
     730:	93 8d       	ldd	r25, Z+27	; 0x1b
     732:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     736:	f8 01       	movw	r30, r16
     738:	82 8d       	ldd	r24, Z+26	; 0x1a
     73a:	93 8d       	ldd	r25, Z+27	; 0x1b
     73c:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	f8 01       	movw	r30, r16
     744:	84 87       	std	Z+12, r24	; 0x0c
}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     754:	fc 01       	movw	r30, r24
     756:	44 89       	ldd	r20, Z+20	; 0x14
     758:	55 89       	ldd	r21, Z+21	; 0x15
     75a:	56 95       	lsr	r21
     75c:	47 95       	ror	r20
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	68 ee       	ldi	r22, 0xE8	; 232
     762:	73 e0       	ldi	r23, 0x03	; 3
     764:	86 eb       	ldi	r24, 0xB6	; 182
     766:	9b e2       	ldi	r25, 0x2B	; 43
     768:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     76c:	86 eb       	ldi	r24, 0xB6	; 182
     76e:	9b e2       	ldi	r25, 0x2B	; 43
     770:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <_ZN12CSoundPlayer9SoundStopEv>
     774:	08 95       	ret

00000776 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     776:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN16CLaserControlApp12OnLaserTimerEv>
     77a:	08 95       	ret

0000077c <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "Periphery/CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     77c:	89 ea       	ldi	r24, 0xA9	; 169
     77e:	91 e2       	ldi	r25, 0x21	; 33
     780:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     784:	86 ea       	ldi	r24, 0xA6	; 166
     786:	91 e2       	ldi	r25, 0x21	; 33
     788:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN7CTimerFC1Ev>
     78c:	08 95       	ret

0000078e <_GLOBAL__sub_D_timer>:
     78e:	86 ea       	ldi	r24, 0xA6	; 166
     790:	91 e2       	ldi	r25, 0x21	; 33
     792:	0e 94 bd 28 	call	0x517a	; 0x517a <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "Periphery/CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     796:	89 ea       	ldi	r24, 0xA9	; 169
     798:	91 e2       	ldi	r25, 0x21	; 33
     79a:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_ZN7CTimerCD1Ev>
     79e:	08 95       	ret

000007a0 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	8c 01       	movw	r16, r24
	// GUI class initialization
	m_cpSender = sender;
     7ba:	dc 01       	movw	r26, r24
     7bc:	5a 96       	adiw	r26, 0x1a	; 26
     7be:	6d 93       	st	X+, r22
     7c0:	7c 93       	st	X, r23
     7c2:	5b 97       	sbiw	r26, 0x1b	; 27
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     7c4:	46 e0       	ldi	r20, 0x06	; 6
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	89 ea       	ldi	r24, 0xA9	; 169
     7ca:	91 e2       	ldi	r25, 0x21	; 33
     7cc:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     7d0:	68 ea       	ldi	r22, 0xA8	; 168
     7d2:	71 e6       	ldi	r23, 0x61	; 97
     7d4:	89 ea       	ldi	r24, 0xA9	; 169
     7d6:	91 e2       	ldi	r25, 0x21	; 33
     7d8:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	a8 01       	movw	r20, r16
     7e0:	65 ef       	ldi	r22, 0xF5	; 245
     7e2:	72 e0       	ldi	r23, 0x02	; 2
     7e4:	89 ea       	ldi	r24, 0xA9	; 169
     7e6:	91 e2       	ldi	r25, 0x21	; 33
     7e8:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     7ec:	f8 01       	movw	r30, r16
     7ee:	16 86       	std	Z+14, r1	; 0x0e
	update = false;
     7f0:	17 86       	std	Z+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA_Fast.Frequency = 10; // 10 Hz
     7f2:	e8 e9       	ldi	r30, 0x98	; 152
     7f4:	f1 e2       	ldi	r31, 0x21	; 33
     7f6:	8a e0       	ldi	r24, 0x0A	; 10
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
	m_structDGUSDATA_Fast.DutyCycle = 50; // 50%
     7fe:	0f 2e       	mov	r0, r31
     800:	f2 e3       	ldi	r31, 0x32	; 50
     802:	af 2e       	mov	r10, r31
     804:	b1 2c       	mov	r11, r1
     806:	f0 2d       	mov	r31, r0
     808:	a2 86       	std	Z+10, r10	; 0x0a
     80a:	b3 86       	std	Z+11, r11	; 0x0b
	m_structDGUSDATA_Fast.Duration  = ((1000 / m_structDGUSDATA_Fast.Frequency) * m_structDGUSDATA_Fast.DutyCycle) / 100; // ms
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	c2 85       	ldd	r28, Z+10	; 0x0a
     812:	d3 85       	ldd	r29, Z+11	; 0x0b
     814:	0f 2e       	mov	r0, r31
     816:	f8 ee       	ldi	r31, 0xE8	; 232
     818:	cf 2e       	mov	r12, r31
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	df 2e       	mov	r13, r31
     81e:	f0 2d       	mov	r31, r0
     820:	c6 01       	movw	r24, r12
     822:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
     826:	6c 9f       	mul	r22, r28
     828:	90 01       	movw	r18, r0
     82a:	6d 9f       	mul	r22, r29
     82c:	30 0d       	add	r19, r0
     82e:	7c 9f       	mul	r23, r28
     830:	30 0d       	add	r19, r0
     832:	11 24       	eor	r1, r1
     834:	36 95       	lsr	r19
     836:	27 95       	ror	r18
     838:	36 95       	lsr	r19
     83a:	27 95       	ror	r18
     83c:	ab e7       	ldi	r26, 0x7B	; 123
     83e:	b4 e1       	ldi	r27, 0x14	; 20
     840:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     844:	96 95       	lsr	r25
     846:	87 95       	ror	r24
     848:	82 83       	std	Z+2, r24	; 0x02
     84a:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Fast.Intensity = 200; // W
     84c:	0f 2e       	mov	r0, r31
     84e:	f8 ec       	ldi	r31, 0xC8	; 200
     850:	ef 2e       	mov	r14, r31
     852:	f1 2c       	mov	r15, r1
     854:	f0 2d       	mov	r31, r0
     856:	e4 82       	std	Z+4, r14	; 0x04
     858:	f5 82       	std	Z+5, r15	; 0x05
	m_structDGUSDATA_Fast.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100; // W
     85a:	84 81       	ldd	r24, Z+4	; 0x04
     85c:	95 81       	ldd	r25, Z+5	; 0x05
     85e:	42 85       	ldd	r20, Z+10	; 0x0a
     860:	53 85       	ldd	r21, Z+11	; 0x0b
     862:	48 9f       	mul	r20, r24
     864:	90 01       	movw	r18, r0
     866:	49 9f       	mul	r20, r25
     868:	30 0d       	add	r19, r0
     86a:	58 9f       	mul	r21, r24
     86c:	30 0d       	add	r19, r0
     86e:	11 24       	eor	r1, r1
     870:	36 95       	lsr	r19
     872:	27 95       	ror	r18
     874:	36 95       	lsr	r19
     876:	27 95       	ror	r18
     878:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     87c:	96 95       	lsr	r25
     87e:	87 95       	ror	r24
     880:	86 83       	std	Z+6, r24	; 0x06
     882:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Fast.Energy    = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration) / 1000; // J
     884:	84 81       	ldd	r24, Z+4	; 0x04
     886:	95 81       	ldd	r25, Z+5	; 0x05
     888:	42 81       	ldd	r20, Z+2	; 0x02
     88a:	53 81       	ldd	r21, Z+3	; 0x03
     88c:	48 9f       	mul	r20, r24
     88e:	90 01       	movw	r18, r0
     890:	49 9f       	mul	r20, r25
     892:	30 0d       	add	r19, r0
     894:	58 9f       	mul	r21, r24
     896:	30 0d       	add	r19, r0
     898:	11 24       	eor	r1, r1
     89a:	36 95       	lsr	r19
     89c:	27 95       	ror	r18
     89e:	36 95       	lsr	r19
     8a0:	27 95       	ror	r18
     8a2:	36 95       	lsr	r19
     8a4:	27 95       	ror	r18
     8a6:	a5 ec       	ldi	r26, 0xC5	; 197
     8a8:	b0 e2       	ldi	r27, 0x20	; 32
     8aa:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     8ae:	92 95       	swap	r25
     8b0:	82 95       	swap	r24
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	89 27       	eor	r24, r25
     8b6:	9f 70       	andi	r25, 0x0F	; 15
     8b8:	89 27       	eor	r24, r25
     8ba:	80 87       	std	Z+8, r24	; 0x08
     8bc:	91 87       	std	Z+9, r25	; 0x09
	
	// Slow profile
	m_structDGUSDATA_Slow.Frequency = 1; // 10 Hz
     8be:	cc e7       	ldi	r28, 0x7C	; 124
     8c0:	d1 e2       	ldi	r29, 0x21	; 33
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	88 83       	st	Y, r24
     8c8:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Slow.DutyCycle = 50; // 50%
     8ca:	aa 86       	std	Y+10, r10	; 0x0a
     8cc:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Slow.Duration  = ((1000 / m_structDGUSDATA_Slow.Frequency) * m_structDGUSDATA_Slow.DutyCycle) / 100; // ms
     8ce:	68 81       	ld	r22, Y
     8d0:	79 81       	ldd	r23, Y+1	; 0x01
     8d2:	8a 84       	ldd	r8, Y+10	; 0x0a
     8d4:	9b 84       	ldd	r9, Y+11	; 0x0b
     8d6:	c6 01       	movw	r24, r12
     8d8:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
     8dc:	68 9d       	mul	r22, r8
     8de:	90 01       	movw	r18, r0
     8e0:	69 9d       	mul	r22, r9
     8e2:	30 0d       	add	r19, r0
     8e4:	78 9d       	mul	r23, r8
     8e6:	30 0d       	add	r19, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	36 95       	lsr	r19
     8ec:	27 95       	ror	r18
     8ee:	36 95       	lsr	r19
     8f0:	27 95       	ror	r18
     8f2:	ab e7       	ldi	r26, 0x7B	; 123
     8f4:	b4 e1       	ldi	r27, 0x14	; 20
     8f6:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     8fa:	96 95       	lsr	r25
     8fc:	87 95       	ror	r24
     8fe:	8a 83       	std	Y+2, r24	; 0x02
     900:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Slow.Intensity = 200; // W
     902:	ec 82       	std	Y+4, r14	; 0x04
     904:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Slow.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100; // W
     906:	8c 81       	ldd	r24, Y+4	; 0x04
     908:	9d 81       	ldd	r25, Y+5	; 0x05
     90a:	4a 85       	ldd	r20, Y+10	; 0x0a
     90c:	5b 85       	ldd	r21, Y+11	; 0x0b
     90e:	48 9f       	mul	r20, r24
     910:	90 01       	movw	r18, r0
     912:	49 9f       	mul	r20, r25
     914:	30 0d       	add	r19, r0
     916:	58 9f       	mul	r21, r24
     918:	30 0d       	add	r19, r0
     91a:	11 24       	eor	r1, r1
     91c:	36 95       	lsr	r19
     91e:	27 95       	ror	r18
     920:	36 95       	lsr	r19
     922:	27 95       	ror	r18
     924:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     928:	96 95       	lsr	r25
     92a:	87 95       	ror	r24
     92c:	8e 83       	std	Y+6, r24	; 0x06
     92e:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Slow.Energy    = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration) / 1000; // J
     930:	8c 81       	ldd	r24, Y+4	; 0x04
     932:	9d 81       	ldd	r25, Y+5	; 0x05
     934:	4a 81       	ldd	r20, Y+2	; 0x02
     936:	5b 81       	ldd	r21, Y+3	; 0x03
     938:	48 9f       	mul	r20, r24
     93a:	90 01       	movw	r18, r0
     93c:	49 9f       	mul	r20, r25
     93e:	30 0d       	add	r19, r0
     940:	58 9f       	mul	r21, r24
     942:	30 0d       	add	r19, r0
     944:	11 24       	eor	r1, r1
     946:	36 95       	lsr	r19
     948:	27 95       	ror	r18
     94a:	36 95       	lsr	r19
     94c:	27 95       	ror	r18
     94e:	36 95       	lsr	r19
     950:	27 95       	ror	r18
     952:	a5 ec       	ldi	r26, 0xC5	; 197
     954:	b0 e2       	ldi	r27, 0x20	; 32
     956:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     95a:	92 95       	swap	r25
     95c:	82 95       	swap	r24
     95e:	8f 70       	andi	r24, 0x0F	; 15
     960:	89 27       	eor	r24, r25
     962:	9f 70       	andi	r25, 0x0F	; 15
     964:	89 27       	eor	r24, r25
     966:	88 87       	std	Y+8, r24	; 0x08
     968:	99 87       	std	Y+9, r25	; 0x09
	
	// Medium profile
	m_structDGUSDATA_Medium.Frequency = 5; // 10 Hz
     96a:	ca e8       	ldi	r28, 0x8A	; 138
     96c:	d1 e2       	ldi	r29, 0x21	; 33
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 83       	st	Y, r24
     974:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Medium.DutyCycle = 50; // 50%
     976:	aa 86       	std	Y+10, r10	; 0x0a
     978:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Medium.Duration  = ((1000 / m_structDGUSDATA_Medium.Frequency) * m_structDGUSDATA_Medium.DutyCycle) / 100; // ms
     97a:	68 81       	ld	r22, Y
     97c:	79 81       	ldd	r23, Y+1	; 0x01
     97e:	aa 84       	ldd	r10, Y+10	; 0x0a
     980:	bb 84       	ldd	r11, Y+11	; 0x0b
     982:	c6 01       	movw	r24, r12
     984:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
     988:	6a 9d       	mul	r22, r10
     98a:	90 01       	movw	r18, r0
     98c:	6b 9d       	mul	r22, r11
     98e:	30 0d       	add	r19, r0
     990:	7a 9d       	mul	r23, r10
     992:	30 0d       	add	r19, r0
     994:	11 24       	eor	r1, r1
     996:	36 95       	lsr	r19
     998:	27 95       	ror	r18
     99a:	36 95       	lsr	r19
     99c:	27 95       	ror	r18
     99e:	ab e7       	ldi	r26, 0x7B	; 123
     9a0:	b4 e1       	ldi	r27, 0x14	; 20
     9a2:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     9a6:	96 95       	lsr	r25
     9a8:	87 95       	ror	r24
     9aa:	8a 83       	std	Y+2, r24	; 0x02
     9ac:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Medium.Intensity = 200; // W
     9ae:	ec 82       	std	Y+4, r14	; 0x04
     9b0:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Medium.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100; // W
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	9d 81       	ldd	r25, Y+5	; 0x05
     9b6:	4a 85       	ldd	r20, Y+10	; 0x0a
     9b8:	5b 85       	ldd	r21, Y+11	; 0x0b
     9ba:	48 9f       	mul	r20, r24
     9bc:	90 01       	movw	r18, r0
     9be:	49 9f       	mul	r20, r25
     9c0:	30 0d       	add	r19, r0
     9c2:	58 9f       	mul	r21, r24
     9c4:	30 0d       	add	r19, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	36 95       	lsr	r19
     9ca:	27 95       	ror	r18
     9cc:	36 95       	lsr	r19
     9ce:	27 95       	ror	r18
     9d0:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	8e 83       	std	Y+6, r24	; 0x06
     9da:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Medium.Energy    = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration) / 1000; // J
     9dc:	8c 81       	ldd	r24, Y+4	; 0x04
     9de:	9d 81       	ldd	r25, Y+5	; 0x05
     9e0:	4a 81       	ldd	r20, Y+2	; 0x02
     9e2:	5b 81       	ldd	r21, Y+3	; 0x03
     9e4:	48 9f       	mul	r20, r24
     9e6:	90 01       	movw	r18, r0
     9e8:	49 9f       	mul	r20, r25
     9ea:	30 0d       	add	r19, r0
     9ec:	58 9f       	mul	r21, r24
     9ee:	30 0d       	add	r19, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	36 95       	lsr	r19
     9f4:	27 95       	ror	r18
     9f6:	36 95       	lsr	r19
     9f8:	27 95       	ror	r18
     9fa:	36 95       	lsr	r19
     9fc:	27 95       	ror	r18
     9fe:	a5 ec       	ldi	r26, 0xC5	; 197
     a00:	b0 e2       	ldi	r27, 0x20	; 32
     a02:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     a06:	92 95       	swap	r25
     a08:	82 95       	swap	r24
     a0a:	8f 70       	andi	r24, 0x0F	; 15
     a0c:	89 27       	eor	r24, r25
     a0e:	9f 70       	andi	r25, 0x0F	; 15
     a10:	89 27       	eor	r24, r25
     a12:	88 87       	std	Y+8, r24	; 0x08
     a14:	99 87       	std	Y+9, r25	; 0x09
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
     a16:	60 81       	ld	r22, Z
     a18:	71 81       	ldd	r23, Z+1	; 0x01
     a1a:	8a e6       	ldi	r24, 0x6A	; 106
     a1c:	98 e1       	ldi	r25, 0x18	; 24
     a1e:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
     a22:	ab 01       	movw	r20, r22
     a24:	44 0f       	add	r20, r20
     a26:	55 1f       	adc	r21, r21
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	66 0f       	add	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	66 0f       	add	r22, r22
     a32:	77 1f       	adc	r23, r23
     a34:	46 0f       	add	r20, r22
     a36:	57 1f       	adc	r21, r23
     a38:	d8 01       	movw	r26, r16
     a3a:	50 96       	adiw	r26, 0x10	; 16
     a3c:	4d 93       	st	X+, r20
     a3e:	5c 93       	st	X, r21
     a40:	51 97       	sbiw	r26, 0x11	; 17
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA_Fast.DutyCycle);
     a42:	02 84       	ldd	r0, Z+10	; 0x0a
     a44:	f3 85       	ldd	r31, Z+11	; 0x0b
     a46:	e0 2d       	mov	r30, r0
     a48:	9a 01       	movw	r18, r20
     a4a:	36 95       	lsr	r19
     a4c:	27 95       	ror	r18
     a4e:	36 95       	lsr	r19
     a50:	27 95       	ror	r18
     a52:	ab e7       	ldi	r26, 0x7B	; 123
     a54:	b4 e1       	ldi	r27, 0x14	; 20
     a56:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     a5a:	96 95       	lsr	r25
     a5c:	87 95       	ror	r24
     a5e:	8e 9f       	mul	r24, r30
     a60:	90 01       	movw	r18, r0
     a62:	8f 9f       	mul	r24, r31
     a64:	30 0d       	add	r19, r0
     a66:	9e 9f       	mul	r25, r30
     a68:	30 0d       	add	r19, r0
     a6a:	11 24       	eor	r1, r1
     a6c:	42 1b       	sub	r20, r18
     a6e:	53 0b       	sbc	r21, r19
     a70:	f8 01       	movw	r30, r16
     a72:	42 8b       	std	Z+18, r20	; 0x12
     a74:	53 8b       	std	Z+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     a76:	47 e0       	ldi	r20, 0x07	; 7
     a78:	63 e0       	ldi	r22, 0x03	; 3
     a7a:	86 ea       	ldi	r24, 0xA6	; 166
     a7c:	91 e2       	ldi	r25, 0x21	; 33
     a7e:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     a82:	d8 01       	movw	r26, r16
     a84:	50 96       	adiw	r26, 0x10	; 16
     a86:	6d 91       	ld	r22, X+
     a88:	7c 91       	ld	r23, X
     a8a:	51 97       	sbiw	r26, 0x11	; 17
     a8c:	86 ea       	ldi	r24, 0xA6	; 166
     a8e:	91 e2       	ldi	r25, 0x21	; 33
     a90:	0e 94 2c 28 	call	0x5058	; 0x5058 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     a94:	f8 01       	movw	r30, r16
     a96:	62 89       	ldd	r22, Z+18	; 0x12
     a98:	73 89       	ldd	r23, Z+19	; 0x13
     a9a:	86 ea       	ldi	r24, 0xA6	; 166
     a9c:	91 e2       	ldi	r25, 0x21	; 33
     a9e:	0e 94 31 28 	call	0x5062	; 0x5062 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     aa2:	d8 01       	movw	r26, r16
     aa4:	52 96       	adiw	r26, 0x12	; 18
     aa6:	6d 91       	ld	r22, X+
     aa8:	7c 91       	ld	r23, X
     aaa:	53 97       	sbiw	r26, 0x13	; 19
     aac:	86 ea       	ldi	r24, 0xA6	; 166
     aae:	91 e2       	ldi	r25, 0x21	; 33
     ab0:	0e 94 36 28 	call	0x506c	; 0x506c <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	a8 01       	movw	r20, r16
     ab8:	6b eb       	ldi	r22, 0xBB	; 187
     aba:	73 e0       	ldi	r23, 0x03	; 3
     abc:	86 ea       	ldi	r24, 0xA6	; 166
     abe:	91 e2       	ldi	r25, 0x21	; 33
     ac0:	0e 94 45 28 	call	0x508a	; 0x508a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     ac4:	60 e1       	ldi	r22, 0x10	; 16
     ac6:	86 ea       	ldi	r24, 0xA6	; 166
     ac8:	91 e2       	ldi	r25, 0x21	; 33
     aca:	0e 94 0e 28 	call	0x501c	; 0x501c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     ace:	60 e2       	ldi	r22, 0x20	; 32
     ad0:	86 ea       	ldi	r24, 0xA6	; 166
     ad2:	91 e2       	ldi	r25, 0x21	; 33
     ad4:	0e 94 0e 28 	call	0x501c	; 0x501c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     ad8:	60 e1       	ldi	r22, 0x10	; 16
     ada:	86 ea       	ldi	r24, 0xA6	; 166
     adc:	91 e2       	ldi	r25, 0x21	; 33
     ade:	0e 94 1b 28 	call	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     ae2:	60 e2       	ldi	r22, 0x20	; 32
     ae4:	86 ea       	ldi	r24, 0xA6	; 166
     ae6:	91 e2       	ldi	r25, 0x21	; 33
     ae8:	0e 94 1b 28 	call	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = WorkFast;
     aec:	f8 01       	movw	r30, r16
     aee:	15 86       	std	Z+13, r1	; 0x0d
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	08 95       	ret

00000b0a <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKFAST;
}

// Process GUI
void CLaserControlApp::Run()
{
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	c2 5c       	subi	r28, 0xC2	; 194
     b1c:	d3 40       	sbci	r29, 0x03	; 3
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	8c 01       	movw	r16, r24
	static uint8_t DatabaseSelectedProfile = 0;
	
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     b24:	42 e0       	ldi	r20, 0x02	; 2
     b26:	63 e0       	ldi	r22, 0x03	; 3
     b28:	dc 01       	movw	r26, r24
     b2a:	5a 96       	adiw	r26, 0x1a	; 26
     b2c:	8d 91       	ld	r24, X+
     b2e:	9c 91       	ld	r25, X
     b30:	5b 97       	sbiw	r26, 0x1b	; 27
     b32:	0e 94 96 24 	call	0x492c	; 0x492c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     b36:	f8 01       	movw	r30, r16
     b38:	82 8d       	ldd	r24, Z+26	; 0x1a
     b3a:	93 8d       	ldd	r25, Z+27	; 0x1b
     b3c:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     b40:	d8 01       	movw	r26, r16
     b42:	5a 96       	adiw	r26, 0x1a	; 26
     b44:	8d 91       	ld	r24, X+
     b46:	9c 91       	ld	r25, X
     b48:	5b 97       	sbiw	r26, 0x1b	; 27
     b4a:	0e 94 31 24 	call	0x4862	; 0x4862 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b4e:	bf ef       	ldi	r27, 0xFF	; 255
     b50:	e1 ee       	ldi	r30, 0xE1	; 225
     b52:	f4 e0       	ldi	r31, 0x04	; 4
     b54:	b1 50       	subi	r27, 0x01	; 1
     b56:	e0 40       	sbci	r30, 0x00	; 0
     b58:	f0 40       	sbci	r31, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <_ZN16CLaserControlApp3RunEv+0x4a>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <_ZN16CLaserControlApp3RunEv+0x54>
     b5e:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     b60:	d8 01       	movw	r26, r16
     b62:	1f 96       	adiw	r26, 0x0f	; 15
     b64:	8c 91       	ld	r24, X
     b66:	1f 97       	sbiw	r26, 0x0f	; 15
     b68:	81 11       	cpse	r24, r1
     b6a:	1e c0       	rjmp	.+60     	; 0xba8 <_ZN16CLaserControlApp3RunEv+0x9e>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     b6c:	4e e0       	ldi	r20, 0x0E	; 14
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	5a 96       	adiw	r26, 0x1a	; 26
     b74:	8d 91       	ld	r24, X+
     b76:	9c 91       	ld	r25, X
     b78:	5b 97       	sbiw	r26, 0x1b	; 27
     b7a:	0e 94 9c 24 	call	0x4938	; 0x4938 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     b7e:	f8 01       	movw	r30, r16
     b80:	82 8d       	ldd	r24, Z+26	; 0x1a
     b82:	93 8d       	ldd	r25, Z+27	; 0x1b
     b84:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     b88:	d8 01       	movw	r26, r16
     b8a:	5a 96       	adiw	r26, 0x1a	; 26
     b8c:	8d 91       	ld	r24, X+
     b8e:	9c 91       	ld	r25, X
     b90:	5b 97       	sbiw	r26, 0x1b	; 27
     b92:	0e 94 31 24 	call	0x4862	; 0x4862 <_ZN9CMBSender18WaitMODBUSListenerEv>
     b96:	bf ef       	ldi	r27, 0xFF	; 255
     b98:	e1 ee       	ldi	r30, 0xE1	; 225
     b9a:	f4 e0       	ldi	r31, 0x04	; 4
     b9c:	b1 50       	subi	r27, 0x01	; 1
     b9e:	e0 40       	sbci	r30, 0x00	; 0
     ba0:	f0 40       	sbci	r31, 0x00	; 0
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <_ZN16CLaserControlApp3RunEv+0x92>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <_ZN16CLaserControlApp3RunEv+0x9c>
     ba6:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     ba8:	d8 01       	movw	r26, r16
     baa:	1c 96       	adiw	r26, 0x0c	; 12
     bac:	8c 91       	ld	r24, X
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	82 31       	cpi	r24, 0x12	; 18
     bb2:	91 05       	cpc	r25, r1
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <_ZN16CLaserControlApp3RunEv+0xae>
     bb6:	31 c4       	rjmp	.+2146   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
     bb8:	fc 01       	movw	r30, r24
     bba:	88 27       	eor	r24, r24
     bbc:	ee 5e       	subi	r30, 0xEE	; 238
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	8f 4f       	sbci	r24, 0xFF	; 255
     bc2:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__tablejump2__>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_MAINMENU);
     bc6:	84 e1       	ldi	r24, 0x14	; 20
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     bd2:	22 e0       	ldi	r18, 0x02	; 2
     bd4:	ae 01       	movw	r20, r28
     bd6:	4f 5f       	subi	r20, 0xFF	; 255
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	63 e0       	ldi	r22, 0x03	; 3
     bdc:	f8 01       	movw	r30, r16
     bde:	82 8d       	ldd	r24, Z+26	; 0x1a
     be0:	93 8d       	ldd	r25, Z+27	; 0x1b
     be2:	0e 94 48 24 	call	0x4890	; 0x4890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     be6:	d8 01       	movw	r26, r16
     be8:	5a 96       	adiw	r26, 0x1a	; 26
     bea:	8d 91       	ld	r24, X+
     bec:	9c 91       	ld	r25, X
     bee:	5b 97       	sbiw	r26, 0x1b	; 27
     bf0:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKFAST;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	f8 01       	movw	r30, r16
     bf8:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     bfa:	0f c4       	rjmp	.+2078   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
			//state = APP_WORKFAST;
		break;
		case APP_WORKSTARTED:
			//state = APP_WORKFAST;
			
			if (!laserBoard.Footswitch())
     bfc:	87 eb       	ldi	r24, 0xB7	; 183
     bfe:	9b e2       	ldi	r25, 0x2B	; 43
     c00:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <_ZN11CLaserBoard10FootswitchEv>
     c04:	81 11       	cpse	r24, r1
     c06:	1a c0       	rjmp	.+52     	; 0xc3c <_ZN16CLaserControlApp3RunEv+0x132>
			{
				laserTimer.SetCOMPA(laserTimerDutyCycle);
     c08:	d8 01       	movw	r26, r16
     c0a:	52 96       	adiw	r26, 0x12	; 18
     c0c:	6d 91       	ld	r22, X+
     c0e:	7c 91       	ld	r23, X
     c10:	53 97       	sbiw	r26, 0x13	; 19
     c12:	86 ea       	ldi	r24, 0xA6	; 166
     c14:	91 e2       	ldi	r25, 0x21	; 33
     c16:	0e 94 31 28 	call	0x5062	; 0x5062 <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
     c1a:	f8 01       	movw	r30, r16
     c1c:	62 89       	ldd	r22, Z+18	; 0x12
     c1e:	73 89       	ldd	r23, Z+19	; 0x13
     c20:	86 ea       	ldi	r24, 0xA6	; 166
     c22:	91 e2       	ldi	r25, 0x21	; 33
     c24:	0e 94 36 28 	call	0x506c	; 0x506c <_ZN7CTimerF8SetCOMPBEj>
				//laserTimer.SetPeriod(laserTimerPeriod);
				laserTimer.Start(laserTimerPeriod);
     c28:	d8 01       	movw	r26, r16
     c2a:	50 96       	adiw	r26, 0x10	; 16
     c2c:	6d 91       	ld	r22, X+
     c2e:	7c 91       	ld	r23, X
     c30:	51 97       	sbiw	r26, 0x11	; 17
     c32:	86 ea       	ldi	r24, 0xA6	; 166
     c34:	91 e2       	ldi	r25, 0x21	; 33
     c36:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <_ZN7CTimerF5StartEj>
     c3a:	ef c3       	rjmp	.+2014   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
			}
			else
			{
				laserTimer.Stop();
     c3c:	86 ea       	ldi	r24, 0xA6	; 166
     c3e:	91 e2       	ldi	r25, 0x21	; 33
     c40:	0e 94 06 28 	call	0x500c	; 0x500c <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     c44:	60 e1       	ldi	r22, 0x10	; 16
     c46:	86 ea       	ldi	r24, 0xA6	; 166
     c48:	91 e2       	ldi	r25, 0x21	; 33
     c4a:	0e 94 1b 28 	call	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     c4e:	60 e2       	ldi	r22, 0x20	; 32
     c50:	86 ea       	ldi	r24, 0xA6	; 166
     c52:	91 e2       	ldi	r25, 0x21	; 33
     c54:	0e 94 1b 28 	call	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     c58:	e0 c3       	rjmp	.+1984   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     c5a:	87 eb       	ldi	r24, 0xB7	; 183
     c5c:	9b e2       	ldi	r25, 0x2B	; 43
     c5e:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     c62:	87 eb       	ldi	r24, 0xB7	; 183
     c64:	9b e2       	ldi	r25, 0x2B	; 43
     c66:	0e 94 04 26 	call	0x4c08	; 0x4c08 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORKSTART);
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     c76:	22 e0       	ldi	r18, 0x02	; 2
     c78:	ae 01       	movw	r20, r28
     c7a:	4f 5f       	subi	r20, 0xFF	; 255
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	63 e0       	ldi	r22, 0x03	; 3
     c80:	f8 01       	movw	r30, r16
     c82:	82 8d       	ldd	r24, Z+26	; 0x1a
     c84:	93 8d       	ldd	r25, Z+27	; 0x1b
     c86:	0e 94 48 24 	call	0x4890	; 0x4890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     c8a:	d8 01       	movw	r26, r16
     c8c:	5a 96       	adiw	r26, 0x1a	; 26
     c8e:	8d 91       	ld	r24, X+
     c90:	9c 91       	ld	r25, X
     c92:	5b 97       	sbiw	r26, 0x1b	; 27
     c94:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTART;
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	f8 01       	movw	r30, r16
     c9c:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     c9e:	bd c3       	rjmp	.+1914   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
		case APP_WORKOnStart:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     ca0:	d8 01       	movw	r26, r16
     ca2:	56 96       	adiw	r26, 0x16	; 22
     ca4:	4d 91       	ld	r20, X+
     ca6:	5c 91       	ld	r21, X
     ca8:	57 97       	sbiw	r26, 0x17	; 23
     caa:	00 24       	eor	r0, r0
     cac:	56 95       	lsr	r21
     cae:	47 95       	ror	r20
     cb0:	07 94       	ror	r0
     cb2:	56 95       	lsr	r21
     cb4:	47 95       	ror	r20
     cb6:	07 94       	ror	r0
     cb8:	54 2f       	mov	r21, r20
     cba:	40 2d       	mov	r20, r0
     cbc:	9a 01       	movw	r18, r20
     cbe:	a1 e1       	ldi	r26, 0x11	; 17
     cc0:	b4 e0       	ldi	r27, 0x04	; 4
     cc2:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
     cc6:	48 1b       	sub	r20, r24
     cc8:	59 0b       	sbc	r21, r25
     cca:	56 95       	lsr	r21
     ccc:	47 95       	ror	r20
     cce:	84 0f       	add	r24, r20
     cd0:	95 1f       	adc	r25, r21
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	92 95       	swap	r25
     cd8:	82 95       	swap	r24
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	89 27       	eor	r24, r25
     cde:	9f 70       	andi	r25, 0x0F	; 15
     ce0:	89 27       	eor	r24, r25
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	cf 51       	subi	r28, 0x1F	; 31
     cec:	df 4f       	sbci	r29, 0xFF	; 255
     cee:	88 83       	st	Y, r24
     cf0:	99 83       	std	Y+1, r25	; 0x01
     cf2:	c1 5e       	subi	r28, 0xE1	; 225
     cf4:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     cf6:	42 e0       	ldi	r20, 0x02	; 2
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	be 01       	movw	r22, r28
     cfc:	6f 51       	subi	r22, 0x1F	; 31
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	8c ed       	ldi	r24, 0xDC	; 220
     d02:	9b e2       	ldi	r25, 0x2B	; 43
     d04:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORKSTARTED);
     d08:	8b e0       	ldi	r24, 0x0B	; 11
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     d14:	22 e0       	ldi	r18, 0x02	; 2
     d16:	ae 01       	movw	r20, r28
     d18:	4f 5f       	subi	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	f8 01       	movw	r30, r16
     d20:	82 8d       	ldd	r24, Z+26	; 0x1a
     d22:	93 8d       	ldd	r25, Z+27	; 0x1b
     d24:	0e 94 48 24 	call	0x4890	; 0x4890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     d28:	d8 01       	movw	r26, r16
     d2a:	5a 96       	adiw	r26, 0x1a	; 26
     d2c:	8d 91       	ld	r24, X+
     d2e:	9c 91       	ld	r25, X
     d30:	5b 97       	sbiw	r26, 0x1b	; 27
     d32:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTARTED;
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	f8 01       	movw	r30, r16
     d3a:	84 87       	std	Z+12, r24	; 0x0c

				//laserTimer.Start(12500);
			}
		break;
     d3c:	6e c3       	rjmp	.+1756   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
		case APP_WORKOnStop:
			{
				uint16_t data = 0;
     d3e:	cf 51       	subi	r28, 0x1F	; 31
     d40:	df 4f       	sbci	r29, 0xFF	; 255
     d42:	18 82       	st	Y, r1
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	c1 5e       	subi	r28, 0xE1	; 225
     d48:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     d4a:	42 e0       	ldi	r20, 0x02	; 2
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	be 01       	movw	r22, r28
     d50:	6f 51       	subi	r22, 0x1F	; 31
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8c ed       	ldi	r24, 0xDC	; 220
     d56:	9b e2       	ldi	r25, 0x2B	; 43
     d58:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN4CSPI4SendEPhj>
				
				laserTimer.Stop();
     d5c:	86 ea       	ldi	r24, 0xA6	; 166
     d5e:	91 e2       	ldi	r25, 0x21	; 33
     d60:	0e 94 06 28 	call	0x500c	; 0x500c <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     d64:	60 e1       	ldi	r22, 0x10	; 16
     d66:	86 ea       	ldi	r24, 0xA6	; 166
     d68:	91 e2       	ldi	r25, 0x21	; 33
     d6a:	0e 94 1b 28 	call	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     d6e:	60 e2       	ldi	r22, 0x20	; 32
     d70:	86 ea       	ldi	r24, 0xA6	; 166
     d72:	91 e2       	ldi	r25, 0x21	; 33
     d74:	0e 94 1b 28 	call	0x5036	; 0x5036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
     d78:	87 eb       	ldi	r24, 0xB7	; 183
     d7a:	9b e2       	ldi	r25, 0x2B	; 43
     d7c:	0e 94 08 26 	call	0x4c10	; 0x4c10 <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
     d80:	87 eb       	ldi	r24, 0xB7	; 183
     d82:	9b e2       	ldi	r25, 0x2B	; 43
     d84:	0e 94 00 26 	call	0x4c00	; 0x4c00 <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t pic_id = 0;
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	1a 82       	std	Y+2, r1	; 0x02
				switch (profile)
     d8c:	d8 01       	movw	r26, r16
     d8e:	1d 96       	adiw	r26, 0x0d	; 13
     d90:	8c 91       	ld	r24, X
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	c9 f0       	breq	.+50     	; 0xdc8 <_ZN16CLaserControlApp3RunEv+0x2be>
     d96:	18 f0       	brcs	.+6      	; 0xd9e <_ZN16CLaserControlApp3RunEv+0x294>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	59 f0       	breq	.+22     	; 0xdb2 <_ZN16CLaserControlApp3RunEv+0x2a8>
     d9c:	1e c0       	rjmp	.+60     	; 0xdda <_ZN16CLaserControlApp3RunEv+0x2d0>
				{
					case WorkFast: 
						pic_id = swap(PICID_WORKFAST); 
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKFAST;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	f8 01       	movw	r30, r16
     dae:	84 87       	std	Z+12, r24	; 0x0c
						break;
     db0:	14 c0       	rjmp	.+40     	; 0xdda <_ZN16CLaserControlApp3RunEv+0x2d0>
					case WorkSlow: 
						pic_id = swap(PICID_WORKSLOW); 
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKSLOW;
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	d8 01       	movw	r26, r16
     dc2:	1c 96       	adiw	r26, 0x0c	; 12
     dc4:	8c 93       	st	X, r24
						break;
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <_ZN16CLaserControlApp3RunEv+0x2d0>
					case WorkMedium: 
						pic_id = swap(PICID_WORKMEDIUM); 
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKMEDIUM;
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	f8 01       	movw	r30, r16
     dd8:	84 87       	std	Z+12, r24	; 0x0c
						break;
				}
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     dda:	22 e0       	ldi	r18, 0x02	; 2
     ddc:	ae 01       	movw	r20, r28
     dde:	4f 5f       	subi	r20, 0xFF	; 255
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	63 e0       	ldi	r22, 0x03	; 3
     de4:	d8 01       	movw	r26, r16
     de6:	5a 96       	adiw	r26, 0x1a	; 26
     de8:	8d 91       	ld	r24, X+
     dea:	9c 91       	ld	r25, X
     dec:	5b 97       	sbiw	r26, 0x1b	; 27
     dee:	0e 94 48 24 	call	0x4890	; 0x4890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     df2:	f8 01       	movw	r30, r16
     df4:	82 8d       	ldd	r24, Z+26	; 0x1a
     df6:	93 8d       	ldd	r25, Z+27	; 0x1b
     df8:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			}
		break;
     dfc:	0e c3       	rjmp	.+1564   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
		case APP_PHOTOTYPE6:
			//state = APP_WORKFAST;
		break;
		case APP_DATABASE_START:
			{
				uint16_t pic_id = swap(27 + 14 - 3);
     dfe:	86 e2       	ldi	r24, 0x26	; 38
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z4swapj>
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     e0a:	22 e0       	ldi	r18, 0x02	; 2
     e0c:	ae 01       	movw	r20, r28
     e0e:	4f 5f       	subi	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	d8 01       	movw	r26, r16
     e16:	5a 96       	adiw	r26, 0x1a	; 26
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	5b 97       	sbiw	r26, 0x1b	; 27
     e1e:	0e 94 48 24 	call	0x4890	; 0x4890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     e22:	f8 01       	movw	r30, r16
     e24:	82 8d       	ldd	r24, Z+26	; 0x1a
     e26:	93 8d       	ldd	r25, Z+27	; 0x1b
     e28:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_DATABASE;
     e2c:	80 e1       	ldi	r24, 0x10	; 16
     e2e:	d8 01       	movw	r26, r16
     e30:	1c 96       	adiw	r26, 0x0c	; 12
     e32:	8c 93       	st	X, r24
			}
		break;
     e34:	f2 c2       	rjmp	.+1508   	; 0x141a <_ZN16CLaserControlApp3RunEv+0x910>
		case APP_DATABASE:
			{
				//VARIABLE_ADDR_PROFINDEX
				m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PROFINDEX, 2);
     e36:	42 e0       	ldi	r20, 0x02	; 2
     e38:	67 e0       	ldi	r22, 0x07	; 7
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	f8 01       	movw	r30, r16
     e3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     e40:	93 8d       	ldd	r25, Z+27	; 0x1b
     e42:	0e 94 9c 24 	call	0x4938	; 0x4938 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
				m_cpSender->WaitMODBUSTransmitter();
     e46:	d8 01       	movw	r26, r16
     e48:	5a 96       	adiw	r26, 0x1a	; 26
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	5b 97       	sbiw	r26, 0x1b	; 27
     e50:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WaitMODBUSListener();
     e54:	f8 01       	movw	r30, r16
     e56:	82 8d       	ldd	r24, Z+26	; 0x1a
     e58:	93 8d       	ldd	r25, Z+27	; 0x1b
     e5a:	0e 94 31 24 	call	0x4862	; 0x4862 <_ZN9CMBSender18WaitMODBUSListenerEv>
     e5e:	ff ef       	ldi	r31, 0xFF	; 255
     e60:	21 ee       	ldi	r18, 0xE1	; 225
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	f1 50       	subi	r31, 0x01	; 1
     e66:	20 40       	sbci	r18, 0x00	; 0
     e68:	80 40       	sbci	r24, 0x00	; 0
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <_ZN16CLaserControlApp3RunEv+0x35a>
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <_ZN16CLaserControlApp3RunEv+0x364>
     e6e:	00 00       	nop
				_delay_ms(50);
				
				DGUS_LINESDATA1 lines1 = {0};
     e70:	fe 01       	movw	r30, r28
     e72:	ef 55       	subi	r30, 0x5F	; 95
     e74:	fd 4f       	sbci	r31, 0xFD	; 253
     e76:	80 ee       	ldi	r24, 0xE0	; 224
     e78:	df 01       	movw	r26, r30
     e7a:	28 2f       	mov	r18, r24
     e7c:	1d 92       	st	X+, r1
     e7e:	2a 95       	dec	r18
     e80:	e9 f7       	brne	.-6      	; 0xe7c <_ZN16CLaserControlApp3RunEv+0x372>
				DGUS_LINESDATA2 lines2 = {0};
     e82:	e0 5e       	subi	r30, 0xE0	; 224
     e84:	f1 09       	sbc	r31, r1
     e86:	df 01       	movw	r26, r30
     e88:	28 2f       	mov	r18, r24
     e8a:	1d 92       	st	X+, r1
     e8c:	2a 95       	dec	r18
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <_ZN16CLaserControlApp3RunEv+0x380>
				DGUS_VALUESDATA value1 = {0};
     e90:	e0 5e       	subi	r30, 0xE0	; 224
     e92:	f1 09       	sbc	r31, r1
     e94:	df 01       	movw	r26, r30
     e96:	28 2f       	mov	r18, r24
     e98:	1d 92       	st	X+, r1
     e9a:	2a 95       	dec	r18
     e9c:	e9 f7       	brne	.-6      	; 0xe98 <_ZN16CLaserControlApp3RunEv+0x38e>
				DGUS_VALUESDATA value2 = {0};
     e9e:	e0 5e       	subi	r30, 0xE0	; 224
     ea0:	f1 09       	sbc	r31, r1
     ea2:	df 01       	movw	r26, r30
     ea4:	1d 92       	st	X+, r1
     ea6:	8a 95       	dec	r24
     ea8:	e9 f7       	brne	.-6      	; 0xea4 <_ZN16CLaserControlApp3RunEv+0x39a>
				char empty[33] = "Hello world!                    ";
     eaa:	81 e2       	ldi	r24, 0x21	; 33
     eac:	e6 e4       	ldi	r30, 0x46	; 70
     eae:	f0 e2       	ldi	r31, 0x20	; 32
     eb0:	de 01       	movw	r26, r28
     eb2:	ae 55       	subi	r26, 0x5E	; 94
     eb4:	bc 4f       	sbci	r27, 0xFC	; 252
     eb6:	01 90       	ld	r0, Z+
     eb8:	0d 92       	st	X+, r0
     eba:	8a 95       	dec	r24
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <_ZN16CLaserControlApp3RunEv+0x3ac>
				
				                //-------|-------|-------|-------|
				char value[33] = "  4321    1234    1234    1234  ";
     ebe:	81 e2       	ldi	r24, 0x21	; 33
     ec0:	e7 e6       	ldi	r30, 0x67	; 103
     ec2:	f0 e2       	ldi	r31, 0x20	; 32
     ec4:	de 01       	movw	r26, r28
     ec6:	af 57       	subi	r26, 0x7F	; 127
     ec8:	bc 4f       	sbci	r27, 0xFC	; 252
     eca:	01 90       	ld	r0, Z+
     ecc:	0d 92       	st	X+, r0
     ece:	8a 95       	dec	r24
     ed0:	e1 f7       	brne	.-8      	; 0xeca <_ZN16CLaserControlApp3RunEv+0x3c0>
				
				static int cnt = 0;
				static int lastprofile = 0;
				cnt+=1;
     ed2:	80 91 79 21 	lds	r24, 0x2179
     ed6:	90 91 7a 21 	lds	r25, 0x217A
     eda:	01 96       	adiw	r24, 0x01	; 1
				if (cnt >= 32) cnt = 0;
     edc:	80 32       	cpi	r24, 0x20	; 32
     ede:	91 05       	cpc	r25, r1
     ee0:	2c f4       	brge	.+10     	; 0xeec <_ZN16CLaserControlApp3RunEv+0x3e2>
				                //-------|-------|-------|-------|
				char value[33] = "  4321    1234    1234    1234  ";
				
				static int cnt = 0;
				static int lastprofile = 0;
				cnt+=1;
     ee2:	80 93 79 21 	sts	0x2179, r24
     ee6:	90 93 7a 21 	sts	0x217A, r25
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <_ZN16CLaserControlApp3RunEv+0x3ea>
				if (cnt >= 32) cnt = 0;
     eec:	10 92 79 21 	sts	0x2179, r1
     ef0:	10 92 7a 21 	sts	0x217A, r1
				
				if (profileIndex != lastprofile) cnt = 0;
     ef4:	f8 01       	movw	r30, r16
     ef6:	80 8d       	ldd	r24, Z+24	; 0x18
     ef8:	91 8d       	ldd	r25, Z+25	; 0x19
     efa:	20 91 77 21 	lds	r18, 0x2177
     efe:	30 91 78 21 	lds	r19, 0x2178
     f02:	82 17       	cp	r24, r18
     f04:	93 07       	cpc	r25, r19
     f06:	21 f0       	breq	.+8      	; 0xf10 <_ZN16CLaserControlApp3RunEv+0x406>
     f08:	10 92 79 21 	sts	0x2179, r1
     f0c:	10 92 7a 21 	sts	0x217A, r1
				
				lastprofile = profileIndex;
     f10:	80 93 77 21 	sts	0x2177, r24
     f14:	90 93 78 21 	sts	0x2178, r25
				
				// Names
				ConvertData((void*) lines1.line1 , (void*)empty, 32);
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e2       	ldi	r20, 0x20	; 32
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	be 01       	movw	r22, r28
     f22:	6e 55       	subi	r22, 0x5E	; 94
     f24:	7c 4f       	sbci	r23, 0xFC	; 252
     f26:	ce 01       	movw	r24, r28
     f28:	8f 55       	subi	r24, 0x5F	; 95
     f2a:	9d 4f       	sbci	r25, 0xFD	; 253
     f2c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line2 , (void*)empty, 32);
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	be 01       	movw	r22, r28
     f3a:	6e 55       	subi	r22, 0x5E	; 94
     f3c:	7c 4f       	sbci	r23, 0xFC	; 252
     f3e:	81 ea       	ldi	r24, 0xA1	; 161
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	8c 0f       	add	r24, r28
     f44:	9d 1f       	adc	r25, r29
     f46:	80 96       	adiw	r24, 0x20	; 32
     f48:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line3 , (void*)empty, 32);
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	be 01       	movw	r22, r28
     f56:	6e 55       	subi	r22, 0x5E	; 94
     f58:	7c 4f       	sbci	r23, 0xFC	; 252
     f5a:	ce 01       	movw	r24, r28
     f5c:	8f 51       	subi	r24, 0x1F	; 31
     f5e:	9d 4f       	sbci	r25, 0xFD	; 253
     f60:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line4 , (void*)empty, 32);
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	be 01       	movw	r22, r28
     f6e:	6e 55       	subi	r22, 0x5E	; 94
     f70:	7c 4f       	sbci	r23, 0xFC	; 252
     f72:	ce 01       	movw	r24, r28
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	9c 4f       	sbci	r25, 0xFC	; 252
     f78:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line5 , (void*)empty, 32);
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	be 01       	movw	r22, r28
     f86:	6e 55       	subi	r22, 0x5E	; 94
     f88:	7c 4f       	sbci	r23, 0xFC	; 252
     f8a:	ce 01       	movw	r24, r28
     f8c:	8f 5d       	subi	r24, 0xDF	; 223
     f8e:	9c 4f       	sbci	r25, 0xFC	; 252
     f90:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line6 , (void*)empty, 32);
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e2       	ldi	r20, 0x20	; 32
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	be 01       	movw	r22, r28
     f9e:	6e 55       	subi	r22, 0x5E	; 94
     fa0:	7c 4f       	sbci	r23, 0xFC	; 252
     fa2:	ce 01       	movw	r24, r28
     fa4:	8f 5b       	subi	r24, 0xBF	; 191
     fa6:	9c 4f       	sbci	r25, 0xFC	; 252
     fa8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line7 , (void*)empty, 32);
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e2       	ldi	r20, 0x20	; 32
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	be 01       	movw	r22, r28
     fb6:	6e 55       	subi	r22, 0x5E	; 94
     fb8:	7c 4f       	sbci	r23, 0xFC	; 252
     fba:	ce 01       	movw	r24, r28
     fbc:	8f 59       	subi	r24, 0x9F	; 159
     fbe:	9c 4f       	sbci	r25, 0xFC	; 252
     fc0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line8 , (void*)empty, 32);
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e2       	ldi	r20, 0x20	; 32
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	be 01       	movw	r22, r28
     fce:	6e 55       	subi	r22, 0x5E	; 94
     fd0:	7c 4f       	sbci	r23, 0xFC	; 252
     fd2:	ce 01       	movw	r24, r28
     fd4:	8f 53       	subi	r24, 0x3F	; 63
     fd6:	9e 4f       	sbci	r25, 0xFE	; 254
     fd8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line9 , (void*)empty, 32);
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e2       	ldi	r20, 0x20	; 32
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	be 01       	movw	r22, r28
     fe6:	6e 55       	subi	r22, 0x5E	; 94
     fe8:	7c 4f       	sbci	r23, 0xFC	; 252
     fea:	81 ec       	ldi	r24, 0xC1	; 193
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	8c 0f       	add	r24, r28
     ff0:	9d 1f       	adc	r25, r29
     ff2:	80 96       	adiw	r24, 0x20	; 32
     ff4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line10, (void*)empty, 32);
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e2       	ldi	r20, 0x20	; 32
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	be 01       	movw	r22, r28
    1002:	6e 55       	subi	r22, 0x5E	; 94
    1004:	7c 4f       	sbci	r23, 0xFC	; 252
    1006:	ce 01       	movw	r24, r28
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	9d 4f       	sbci	r25, 0xFD	; 253
    100c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line11, (void*)empty, 32);
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	be 01       	movw	r22, r28
    101a:	6e 55       	subi	r22, 0x5E	; 94
    101c:	7c 4f       	sbci	r23, 0xFC	; 252
    101e:	ce 01       	movw	r24, r28
    1020:	8f 5d       	subi	r24, 0xDF	; 223
    1022:	9d 4f       	sbci	r25, 0xFD	; 253
    1024:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line12, (void*)empty, 32);
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	be 01       	movw	r22, r28
    1032:	6e 55       	subi	r22, 0x5E	; 94
    1034:	7c 4f       	sbci	r23, 0xFC	; 252
    1036:	ce 01       	movw	r24, r28
    1038:	8f 5b       	subi	r24, 0xBF	; 191
    103a:	9d 4f       	sbci	r25, 0xFD	; 253
    103c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line13, (void*)empty, 32);
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	be 01       	movw	r22, r28
    104a:	6e 55       	subi	r22, 0x5E	; 94
    104c:	7c 4f       	sbci	r23, 0xFC	; 252
    104e:	ce 01       	movw	r24, r28
    1050:	8f 59       	subi	r24, 0x9F	; 159
    1052:	9d 4f       	sbci	r25, 0xFD	; 253
    1054:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line14, (void*)empty, 32);
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	be 01       	movw	r22, r28
    1062:	6e 55       	subi	r22, 0x5E	; 94
    1064:	7c 4f       	sbci	r23, 0xFC	; 252
    1066:	ce 01       	movw	r24, r28
    1068:	8f 57       	subi	r24, 0x7F	; 127
    106a:	9d 4f       	sbci	r25, 0xFD	; 253
    106c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				
				switch (profileIndex)
    1070:	d8 01       	movw	r26, r16
    1072:	58 96       	adiw	r26, 0x18	; 24
    1074:	ed 91       	ld	r30, X+
    1076:	fc 91       	ld	r31, X
    1078:	59 97       	sbiw	r26, 0x19	; 25
    107a:	31 97       	sbiw	r30, 0x01	; 1
    107c:	ee 30       	cpi	r30, 0x0E	; 14
    107e:	f1 05       	cpc	r31, r1
    1080:	08 f0       	brcs	.+2      	; 0x1084 <_ZN16CLaserControlApp3RunEv+0x57a>
    1082:	d7 c0       	rjmp	.+430    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
    1084:	88 27       	eor	r24, r24
    1086:	ec 5d       	subi	r30, 0xDC	; 220
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__tablejump2__>
				{
					case 1 : ConvertData((void*) lines1.line1 , (void*)empty, 32, cnt); break;
    1090:	20 91 79 21 	lds	r18, 0x2179
    1094:	30 91 7a 21 	lds	r19, 0x217A
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	be 01       	movw	r22, r28
    109e:	6e 55       	subi	r22, 0x5E	; 94
    10a0:	7c 4f       	sbci	r23, 0xFC	; 252
    10a2:	ce 01       	movw	r24, r28
    10a4:	8f 55       	subi	r24, 0x5F	; 95
    10a6:	9d 4f       	sbci	r25, 0xFD	; 253
    10a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    10ac:	c2 c0       	rjmp	.+388    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 2 : ConvertData((void*) lines1.line2 , (void*)empty, 32, cnt); break;
    10ae:	20 91 79 21 	lds	r18, 0x2179
    10b2:	30 91 7a 21 	lds	r19, 0x217A
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	be 01       	movw	r22, r28
    10bc:	6e 55       	subi	r22, 0x5E	; 94
    10be:	7c 4f       	sbci	r23, 0xFC	; 252
    10c0:	ce 01       	movw	r24, r28
    10c2:	8f 53       	subi	r24, 0x3F	; 63
    10c4:	9d 4f       	sbci	r25, 0xFD	; 253
    10c6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    10ca:	b3 c0       	rjmp	.+358    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 3 : ConvertData((void*) lines1.line3 , (void*)empty, 32, cnt); break;
    10cc:	20 91 79 21 	lds	r18, 0x2179
    10d0:	30 91 7a 21 	lds	r19, 0x217A
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	be 01       	movw	r22, r28
    10da:	6e 55       	subi	r22, 0x5E	; 94
    10dc:	7c 4f       	sbci	r23, 0xFC	; 252
    10de:	ce 01       	movw	r24, r28
    10e0:	8f 51       	subi	r24, 0x1F	; 31
    10e2:	9d 4f       	sbci	r25, 0xFD	; 253
    10e4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    10e8:	a4 c0       	rjmp	.+328    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 4 : ConvertData((void*) lines1.line4 , (void*)empty, 32, cnt); break;
    10ea:	20 91 79 21 	lds	r18, 0x2179
    10ee:	30 91 7a 21 	lds	r19, 0x217A
    10f2:	40 e2       	ldi	r20, 0x20	; 32
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	be 01       	movw	r22, r28
    10f8:	6e 55       	subi	r22, 0x5E	; 94
    10fa:	7c 4f       	sbci	r23, 0xFC	; 252
    10fc:	ce 01       	movw	r24, r28
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	9c 4f       	sbci	r25, 0xFC	; 252
    1102:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    1106:	95 c0       	rjmp	.+298    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 5 : ConvertData((void*) lines1.line5 , (void*)empty, 32, cnt); break;
    1108:	20 91 79 21 	lds	r18, 0x2179
    110c:	30 91 7a 21 	lds	r19, 0x217A
    1110:	40 e2       	ldi	r20, 0x20	; 32
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	be 01       	movw	r22, r28
    1116:	6e 55       	subi	r22, 0x5E	; 94
    1118:	7c 4f       	sbci	r23, 0xFC	; 252
    111a:	ce 01       	movw	r24, r28
    111c:	8f 5d       	subi	r24, 0xDF	; 223
    111e:	9c 4f       	sbci	r25, 0xFC	; 252
    1120:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    1124:	86 c0       	rjmp	.+268    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 6 : ConvertData((void*) lines1.line6 , (void*)empty, 32, cnt); break;
    1126:	20 91 79 21 	lds	r18, 0x2179
    112a:	30 91 7a 21 	lds	r19, 0x217A
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	be 01       	movw	r22, r28
    1134:	6e 55       	subi	r22, 0x5E	; 94
    1136:	7c 4f       	sbci	r23, 0xFC	; 252
    1138:	ce 01       	movw	r24, r28
    113a:	8f 5b       	subi	r24, 0xBF	; 191
    113c:	9c 4f       	sbci	r25, 0xFC	; 252
    113e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    1142:	77 c0       	rjmp	.+238    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 7 : ConvertData((void*) lines1.line7 , (void*)empty, 32, cnt); break;
    1144:	20 91 79 21 	lds	r18, 0x2179
    1148:	30 91 7a 21 	lds	r19, 0x217A
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	be 01       	movw	r22, r28
    1152:	6e 55       	subi	r22, 0x5E	; 94
    1154:	7c 4f       	sbci	r23, 0xFC	; 252
    1156:	ce 01       	movw	r24, r28
    1158:	8f 59       	subi	r24, 0x9F	; 159
    115a:	9c 4f       	sbci	r25, 0xFC	; 252
    115c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    1160:	68 c0       	rjmp	.+208    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 8 : ConvertData((void*) lines2.line8 , (void*)empty, 32, cnt); break;
    1162:	20 91 79 21 	lds	r18, 0x2179
    1166:	30 91 7a 21 	lds	r19, 0x217A
    116a:	40 e2       	ldi	r20, 0x20	; 32
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	be 01       	movw	r22, r28
    1170:	6e 55       	subi	r22, 0x5E	; 94
    1172:	7c 4f       	sbci	r23, 0xFC	; 252
    1174:	ce 01       	movw	r24, r28
    1176:	8f 53       	subi	r24, 0x3F	; 63
    1178:	9e 4f       	sbci	r25, 0xFE	; 254
    117a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    117e:	59 c0       	rjmp	.+178    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 9 : ConvertData((void*) lines2.line9 , (void*)empty, 32, cnt); break;
    1180:	20 91 79 21 	lds	r18, 0x2179
    1184:	30 91 7a 21 	lds	r19, 0x217A
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	be 01       	movw	r22, r28
    118e:	6e 55       	subi	r22, 0x5E	; 94
    1190:	7c 4f       	sbci	r23, 0xFC	; 252
    1192:	ce 01       	movw	r24, r28
    1194:	8f 51       	subi	r24, 0x1F	; 31
    1196:	9e 4f       	sbci	r25, 0xFE	; 254
    1198:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    119c:	4a c0       	rjmp	.+148    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 10: ConvertData((void*) lines2.line10, (void*)empty, 32, cnt); break;
    119e:	20 91 79 21 	lds	r18, 0x2179
    11a2:	30 91 7a 21 	lds	r19, 0x217A
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	be 01       	movw	r22, r28
    11ac:	6e 55       	subi	r22, 0x5E	; 94
    11ae:	7c 4f       	sbci	r23, 0xFC	; 252
    11b0:	ce 01       	movw	r24, r28
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	9d 4f       	sbci	r25, 0xFD	; 253
    11b6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    11ba:	3b c0       	rjmp	.+118    	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 11: ConvertData((void*) lines2.line11, (void*)empty, 32, cnt); break;
    11bc:	20 91 79 21 	lds	r18, 0x2179
    11c0:	30 91 7a 21 	lds	r19, 0x217A
    11c4:	40 e2       	ldi	r20, 0x20	; 32
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	be 01       	movw	r22, r28
    11ca:	6e 55       	subi	r22, 0x5E	; 94
    11cc:	7c 4f       	sbci	r23, 0xFC	; 252
    11ce:	ce 01       	movw	r24, r28
    11d0:	8f 5d       	subi	r24, 0xDF	; 223
    11d2:	9d 4f       	sbci	r25, 0xFD	; 253
    11d4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    11d8:	2c c0       	rjmp	.+88     	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 12: ConvertData((void*) lines2.line12, (void*)empty, 32, cnt); break;
    11da:	20 91 79 21 	lds	r18, 0x2179
    11de:	30 91 7a 21 	lds	r19, 0x217A
    11e2:	40 e2       	ldi	r20, 0x20	; 32
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	be 01       	movw	r22, r28
    11e8:	6e 55       	subi	r22, 0x5E	; 94
    11ea:	7c 4f       	sbci	r23, 0xFC	; 252
    11ec:	ce 01       	movw	r24, r28
    11ee:	8f 5b       	subi	r24, 0xBF	; 191
    11f0:	9d 4f       	sbci	r25, 0xFD	; 253
    11f2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    11f6:	1d c0       	rjmp	.+58     	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 13: ConvertData((void*) lines2.line13, (void*)empty, 32, cnt); break;
    11f8:	20 91 79 21 	lds	r18, 0x2179
    11fc:	30 91 7a 21 	lds	r19, 0x217A
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	be 01       	movw	r22, r28
    1206:	6e 55       	subi	r22, 0x5E	; 94
    1208:	7c 4f       	sbci	r23, 0xFC	; 252
    120a:	ce 01       	movw	r24, r28
    120c:	8f 59       	subi	r24, 0x9F	; 159
    120e:	9d 4f       	sbci	r25, 0xFD	; 253
    1210:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <_ZN16CLaserControlApp3RunEv+0x728>
					case 14: ConvertData((void*) lines2.line14, (void*)empty, 32, cnt); break;
    1216:	20 91 79 21 	lds	r18, 0x2179
    121a:	30 91 7a 21 	lds	r19, 0x217A
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	be 01       	movw	r22, r28
    1224:	6e 55       	subi	r22, 0x5E	; 94
    1226:	7c 4f       	sbci	r23, 0xFC	; 252
    1228:	ce 01       	movw	r24, r28
    122a:	8f 57       	subi	r24, 0x7F	; 127
    122c:	9d 4f       	sbci	r25, 0xFD	; 253
    122e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				}
				
				// Parameters
				ConvertData((void*)&value1.value1, (void*)value, 32);
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	be 01       	movw	r22, r28
    123c:	6f 57       	subi	r22, 0x7F	; 127
    123e:	7c 4f       	sbci	r23, 0xFC	; 252
    1240:	ce 01       	movw	r24, r28
    1242:	8f 51       	subi	r24, 0x1F	; 31
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value2, (void*)value, 32);
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	be 01       	movw	r22, r28
    1254:	6f 57       	subi	r22, 0x7F	; 127
    1256:	7c 4f       	sbci	r23, 0xFC	; 252
    1258:	81 ee       	ldi	r24, 0xE1	; 225
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	8c 0f       	add	r24, r28
    125e:	9d 1f       	adc	r25, r29
    1260:	80 96       	adiw	r24, 0x20	; 32
    1262:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value3, (void*)value, 32);
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	be 01       	movw	r22, r28
    1270:	6f 57       	subi	r22, 0x7F	; 127
    1272:	7c 4f       	sbci	r23, 0xFC	; 252
    1274:	ce 01       	movw	r24, r28
    1276:	8f 5d       	subi	r24, 0xDF	; 223
    1278:	9e 4f       	sbci	r25, 0xFE	; 254
    127a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value4, (void*)value, 32);
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e2       	ldi	r20, 0x20	; 32
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	be 01       	movw	r22, r28
    1288:	6f 57       	subi	r22, 0x7F	; 127
    128a:	7c 4f       	sbci	r23, 0xFC	; 252
    128c:	ce 01       	movw	r24, r28
    128e:	8f 5b       	subi	r24, 0xBF	; 191
    1290:	9e 4f       	sbci	r25, 0xFE	; 254
    1292:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value5, (void*)value, 32);
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	be 01       	movw	r22, r28
    12a0:	6f 57       	subi	r22, 0x7F	; 127
    12a2:	7c 4f       	sbci	r23, 0xFC	; 252
    12a4:	ce 01       	movw	r24, r28
    12a6:	8f 59       	subi	r24, 0x9F	; 159
    12a8:	9e 4f       	sbci	r25, 0xFE	; 254
    12aa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value6, (void*)value, 32);
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	be 01       	movw	r22, r28
    12b8:	6f 57       	subi	r22, 0x7F	; 127
    12ba:	7c 4f       	sbci	r23, 0xFC	; 252
    12bc:	ce 01       	movw	r24, r28
    12be:	8f 57       	subi	r24, 0x7F	; 127
    12c0:	9e 4f       	sbci	r25, 0xFE	; 254
    12c2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value7, (void*)value, 32);
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e2       	ldi	r20, 0x20	; 32
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	be 01       	movw	r22, r28
    12d0:	6f 57       	subi	r22, 0x7F	; 127
    12d2:	7c 4f       	sbci	r23, 0xFC	; 252
    12d4:	ce 01       	movw	r24, r28
    12d6:	8f 55       	subi	r24, 0x5F	; 95
    12d8:	9e 4f       	sbci	r25, 0xFE	; 254
    12da:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value1, (void*)value, 32);
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	be 01       	movw	r22, r28
    12e8:	6f 57       	subi	r22, 0x7F	; 127
    12ea:	7c 4f       	sbci	r23, 0xFC	; 252
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value2, (void*)value, 32);
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	be 01       	movw	r22, r28
    12fe:	6f 57       	subi	r22, 0x7F	; 127
    1300:	7c 4f       	sbci	r23, 0xFC	; 252
    1302:	ce 01       	movw	r24, r28
    1304:	81 96       	adiw	r24, 0x21	; 33
    1306:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value3, (void*)value, 32);
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	be 01       	movw	r22, r28
    1314:	6f 57       	subi	r22, 0x7F	; 127
    1316:	7c 4f       	sbci	r23, 0xFC	; 252
    1318:	ce 01       	movw	r24, r28
    131a:	8f 5b       	subi	r24, 0xBF	; 191
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value4, (void*)value, 32);
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	be 01       	movw	r22, r28
    132c:	6f 57       	subi	r22, 0x7F	; 127
    132e:	7c 4f       	sbci	r23, 0xFC	; 252
    1330:	ce 01       	movw	r24, r28
    1332:	8f 59       	subi	r24, 0x9F	; 159
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value5, (void*)value, 32);
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	be 01       	movw	r22, r28
    1344:	6f 57       	subi	r22, 0x7F	; 127
    1346:	7c 4f       	sbci	r23, 0xFC	; 252
    1348:	ce 01       	movw	r24, r28
    134a:	8f 57       	subi	r24, 0x7F	; 127
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value6, (void*)value, 32);
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	be 01       	movw	r22, r28
    135c:	6f 57       	subi	r22, 0x7F	; 127
    135e:	7c 4f       	sbci	r23, 0xFC	; 252
    1360:	ce 01       	movw	r24, r28
    1362:	8f 55       	subi	r24, 0x5F	; 95
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value7, (void*)value, 32);
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	be 01       	movw	r22, r28
    1374:	6f 57       	subi	r22, 0x7F	; 127
    1376:	7c 4f       	sbci	r23, 0xFC	; 252
    1378:	ce 01       	movw	r24, r28
    137a:	8f 53       	subi	r24, 0x3F	; 63
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
				
				// Param transfer
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA1 , (uint16_t*)&lines1, sizeof(lines1));
    1382:	20 ee       	ldi	r18, 0xE0	; 224
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	ae 01       	movw	r20, r28
    1388:	4f 55       	subi	r20, 0x5F	; 95
    138a:	5d 4f       	sbci	r21, 0xFD	; 253
    138c:	60 e1       	ldi	r22, 0x10	; 16
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	f8 01       	movw	r30, r16
    1392:	82 8d       	ldd	r24, Z+26	; 0x1a
    1394:	93 8d       	ldd	r25, Z+27	; 0x1b
    1396:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    139a:	d8 01       	movw	r26, r16
    139c:	5a 96       	adiw	r26, 0x1a	; 26
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	5b 97       	sbiw	r26, 0x1b	; 27
    13a4:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA2 , (uint16_t*)&lines2, sizeof(lines2));
    13a8:	20 ee       	ldi	r18, 0xE0	; 224
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	ae 01       	movw	r20, r28
    13ae:	4f 53       	subi	r20, 0x3F	; 63
    13b0:	5e 4f       	sbci	r21, 0xFE	; 254
    13b2:	60 e8       	ldi	r22, 0x80	; 128
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	f8 01       	movw	r30, r16
    13b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    13ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    13bc:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    13c0:	d8 01       	movw	r26, r16
    13c2:	5a 96       	adiw	r26, 0x1a	; 26
    13c4:	8d 91       	ld	r24, X+
    13c6:	9c 91       	ld	r25, X
    13c8:	5b 97       	sbiw	r26, 0x1b	; 27
    13ca:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_VALUESDATA1, (uint16_t*)&value1, sizeof(value1));
    13ce:	20 ee       	ldi	r18, 0xE0	; 224
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	ae 01       	movw	r20, r28
    13d4:	4f 51       	subi	r20, 0x1F	; 31
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	60 e1       	ldi	r22, 0x10	; 16
    13da:	73 e0       	ldi	r23, 0x03	; 3
    13dc:	f8 01       	movw	r30, r16
    13de:	82 8d       	ldd	r24, Z+26	; 0x1a
    13e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    13e2:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    13e6:	d8 01       	movw	r26, r16
    13e8:	5a 96       	adiw	r26, 0x1a	; 26
    13ea:	8d 91       	ld	r24, X+
    13ec:	9c 91       	ld	r25, X
    13ee:	5b 97       	sbiw	r26, 0x1b	; 27
    13f0:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_VALUESDATA2, (uint16_t*)&value2, sizeof(value2));
    13f4:	20 ee       	ldi	r18, 0xE0	; 224
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	ae 01       	movw	r20, r28
    13fa:	4f 5f       	subi	r20, 0xFF	; 255
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	60 e8       	ldi	r22, 0x80	; 128
    1400:	73 e0       	ldi	r23, 0x03	; 3
    1402:	f8 01       	movw	r30, r16
    1404:	82 8d       	ldd	r24, Z+26	; 0x1a
    1406:	93 8d       	ldd	r25, Z+27	; 0x1b
    1408:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    140c:	d8 01       	movw	r26, r16
    140e:	5a 96       	adiw	r26, 0x1a	; 26
    1410:	8d 91       	ld	r24, X+
    1412:	9c 91       	ld	r25, X
    1414:	5b 97       	sbiw	r26, 0x1b	; 27
    1416:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
    141a:	f8 01       	movw	r30, r16
    141c:	87 85       	ldd	r24, Z+15	; 0x0f
    141e:	88 23       	and	r24, r24
    1420:	89 f1       	breq	.+98     	; 0x1484 <_ZN16CLaserControlApp3RunEv+0x97a>
	{
		switch (profile)
    1422:	85 85       	ldd	r24, Z+13	; 0x0d
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	d9 f0       	breq	.+54     	; 0x145e <_ZN16CLaserControlApp3RunEv+0x954>
    1428:	18 f0       	brcs	.+6      	; 0x1430 <_ZN16CLaserControlApp3RunEv+0x926>
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	61 f0       	breq	.+24     	; 0x1446 <_ZN16CLaserControlApp3RunEv+0x93c>
    142e:	21 c0       	rjmp	.+66     	; 0x1472 <_ZN16CLaserControlApp3RunEv+0x968>
		{
			case WorkFast:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(DGUS_DATA));
    1430:	2e e0       	ldi	r18, 0x0E	; 14
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	48 e9       	ldi	r20, 0x98	; 152
    1436:	51 e2       	ldi	r21, 0x21	; 33
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	82 8d       	ldd	r24, Z+26	; 0x1a
    143e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1440:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1444:	16 c0       	rjmp	.+44     	; 0x1472 <_ZN16CLaserControlApp3RunEv+0x968>
			case WorkSlow:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Slow, sizeof(DGUS_DATA));
    1446:	2e e0       	ldi	r18, 0x0E	; 14
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4c e7       	ldi	r20, 0x7C	; 124
    144c:	51 e2       	ldi	r21, 0x21	; 33
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	f8 01       	movw	r30, r16
    1454:	82 8d       	ldd	r24, Z+26	; 0x1a
    1456:	93 8d       	ldd	r25, Z+27	; 0x1b
    1458:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <_ZN16CLaserControlApp3RunEv+0x968>
			case WorkMedium:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Medium, sizeof(DGUS_DATA));
    145e:	2e e0       	ldi	r18, 0x0E	; 14
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a e8       	ldi	r20, 0x8A	; 138
    1464:	51 e2       	ldi	r21, 0x21	; 33
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	82 8d       	ldd	r24, Z+26	; 0x1a
    146c:	93 8d       	ldd	r25, Z+27	; 0x1b
    146e:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    1472:	f8 01       	movw	r30, r16
    1474:	82 8d       	ldd	r24, Z+26	; 0x1a
    1476:	93 8d       	ldd	r25, Z+27	; 0x1b
    1478:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
    147c:	d8 01       	movw	r26, r16
    147e:	1f 96       	adiw	r26, 0x0f	; 15
    1480:	1c 92       	st	X, r1
    1482:	d6 c1       	rjmp	.+940    	; 0x1830 <_ZN16CLaserControlApp3RunEv+0xd26>
	}
	else
	{
		switch (profile)
    1484:	f8 01       	movw	r30, r16
    1486:	85 85       	ldd	r24, Z+13	; 0x0d
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	09 f4       	brne	.+2      	; 0x148e <_ZN16CLaserControlApp3RunEv+0x984>
    148c:	35 c1       	rjmp	.+618    	; 0x16f8 <_ZN16CLaserControlApp3RunEv+0xbee>
    148e:	20 f0       	brcs	.+8      	; 0x1498 <_ZN16CLaserControlApp3RunEv+0x98e>
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	09 f4       	brne	.+2      	; 0x1496 <_ZN16CLaserControlApp3RunEv+0x98c>
    1494:	99 c0       	rjmp	.+306    	; 0x15c8 <_ZN16CLaserControlApp3RunEv+0xabe>
    1496:	c7 c1       	rjmp	.+910    	; 0x1826 <_ZN16CLaserControlApp3RunEv+0xd1c>
		{
			case WorkFast:
				// Fast profile			
				DGUSDATA.DutyCycle = m_structDGUSDATA_Fast.Duration * m_structDGUSDATA_Fast.Frequency / 10;
    1498:	e8 e9       	ldi	r30, 0x98	; 152
    149a:	f1 e2       	ldi	r31, 0x21	; 33
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	40 81       	ld	r20, Z
    14a2:	51 81       	ldd	r21, Z+1	; 0x01
    14a4:	48 9f       	mul	r20, r24
    14a6:	90 01       	movw	r18, r0
    14a8:	49 9f       	mul	r20, r25
    14aa:	30 0d       	add	r19, r0
    14ac:	58 9f       	mul	r21, r24
    14ae:	30 0d       	add	r19, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	ad ec       	ldi	r26, 0xCD	; 205
    14b4:	bc ec       	ldi	r27, 0xCC	; 204
    14b6:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    14ba:	7c 01       	movw	r14, r24
    14bc:	f6 94       	lsr	r15
    14be:	e7 94       	ror	r14
    14c0:	f6 94       	lsr	r15
    14c2:	e7 94       	ror	r14
    14c4:	f6 94       	lsr	r15
    14c6:	e7 94       	ror	r14
    14c8:	eb 86       	std	Y+11, r14	; 0x0b
    14ca:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100;
    14cc:	84 81       	ldd	r24, Z+4	; 0x04
    14ce:	95 81       	ldd	r25, Z+5	; 0x05
    14d0:	42 85       	ldd	r20, Z+10	; 0x0a
    14d2:	53 85       	ldd	r21, Z+11	; 0x0b
    14d4:	48 9f       	mul	r20, r24
    14d6:	90 01       	movw	r18, r0
    14d8:	49 9f       	mul	r20, r25
    14da:	30 0d       	add	r19, r0
    14dc:	58 9f       	mul	r21, r24
    14de:	30 0d       	add	r19, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	36 95       	lsr	r19
    14e4:	27 95       	ror	r18
    14e6:	36 95       	lsr	r19
    14e8:	27 95       	ror	r18
    14ea:	ab e7       	ldi	r26, 0x7B	; 123
    14ec:	b4 e1       	ldi	r27, 0x14	; 20
    14ee:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    14f2:	96 95       	lsr	r25
    14f4:	87 95       	ror	r24
    14f6:	8f 83       	std	Y+7, r24	; 0x07
    14f8:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration / 1000;
    14fa:	84 81       	ldd	r24, Z+4	; 0x04
    14fc:	95 81       	ldd	r25, Z+5	; 0x05
    14fe:	42 81       	ldd	r20, Z+2	; 0x02
    1500:	53 81       	ldd	r21, Z+3	; 0x03
    1502:	48 9f       	mul	r20, r24
    1504:	90 01       	movw	r18, r0
    1506:	49 9f       	mul	r20, r25
    1508:	30 0d       	add	r19, r0
    150a:	58 9f       	mul	r21, r24
    150c:	30 0d       	add	r19, r0
    150e:	11 24       	eor	r1, r1
    1510:	36 95       	lsr	r19
    1512:	27 95       	ror	r18
    1514:	36 95       	lsr	r19
    1516:	27 95       	ror	r18
    1518:	36 95       	lsr	r19
    151a:	27 95       	ror	r18
    151c:	a5 ec       	ldi	r26, 0xC5	; 197
    151e:	b0 e2       	ldi	r27, 0x20	; 32
    1520:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    1524:	92 95       	swap	r25
    1526:	82 95       	swap	r24
    1528:	8f 70       	andi	r24, 0x0F	; 15
    152a:	89 27       	eor	r24, r25
    152c:	9f 70       	andi	r25, 0x0F	; 15
    152e:	89 27       	eor	r24, r25
    1530:	89 87       	std	Y+9, r24	; 0x09
    1532:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	8a e6       	ldi	r24, 0x6A	; 106
    153a:	98 e1       	ldi	r25, 0x18	; 24
    153c:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
    1540:	ab 01       	movw	r20, r22
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	46 0f       	add	r20, r22
    1554:	57 1f       	adc	r21, r23
    1556:	d8 01       	movw	r26, r16
    1558:	50 96       	adiw	r26, 0x10	; 16
    155a:	4d 93       	st	X+, r20
    155c:	5c 93       	st	X, r21
    155e:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1560:	9a 01       	movw	r18, r20
    1562:	36 95       	lsr	r19
    1564:	27 95       	ror	r18
    1566:	36 95       	lsr	r19
    1568:	27 95       	ror	r18
    156a:	ab e7       	ldi	r26, 0x7B	; 123
    156c:	b4 e1       	ldi	r27, 0x14	; 20
    156e:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    1572:	96 95       	lsr	r25
    1574:	87 95       	ror	r24
    1576:	8e 9d       	mul	r24, r14
    1578:	90 01       	movw	r18, r0
    157a:	8f 9d       	mul	r24, r15
    157c:	30 0d       	add	r19, r0
    157e:	9e 9d       	mul	r25, r14
    1580:	30 0d       	add	r19, r0
    1582:	11 24       	eor	r1, r1
    1584:	42 1b       	sub	r20, r18
    1586:	53 0b       	sbc	r21, r19
    1588:	d8 01       	movw	r26, r16
    158a:	52 96       	adiw	r26, 0x12	; 18
    158c:	4d 93       	st	X+, r20
    158e:	5c 93       	st	X, r21
    1590:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    1592:	54 96       	adiw	r26, 0x14	; 20
    1594:	ed 92       	st	X+, r14
    1596:	fc 92       	st	X, r15
    1598:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Fast.Intensity;
    159a:	84 81       	ldd	r24, Z+4	; 0x04
    159c:	95 81       	ldd	r25, Z+5	; 0x05
    159e:	56 96       	adiw	r26, 0x16	; 22
    15a0:	8d 93       	st	X+, r24
    15a2:	9c 93       	st	X, r25
    15a4:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	80 93 76 21 	sts	0x2176, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    15ac:	26 e0       	ldi	r18, 0x06	; 6
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	ae 01       	movw	r20, r28
    15b2:	49 5f       	subi	r20, 0xF9	; 249
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	64 e0       	ldi	r22, 0x04	; 4
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	5a 96       	adiw	r26, 0x1a	; 26
    15bc:	8d 91       	ld	r24, X+
    15be:	9c 91       	ld	r25, X
    15c0:	5b 97       	sbiw	r26, 0x1b	; 27
    15c2:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    15c6:	2f c1       	rjmp	.+606    	; 0x1826 <_ZN16CLaserControlApp3RunEv+0xd1c>
			case WorkSlow:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Slow.Duration * m_structDGUSDATA_Slow.Frequency / 10;
    15c8:	ec e7       	ldi	r30, 0x7C	; 124
    15ca:	f1 e2       	ldi	r31, 0x21	; 33
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	40 81       	ld	r20, Z
    15d2:	51 81       	ldd	r21, Z+1	; 0x01
    15d4:	48 9f       	mul	r20, r24
    15d6:	90 01       	movw	r18, r0
    15d8:	49 9f       	mul	r20, r25
    15da:	30 0d       	add	r19, r0
    15dc:	58 9f       	mul	r21, r24
    15de:	30 0d       	add	r19, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	ad ec       	ldi	r26, 0xCD	; 205
    15e4:	bc ec       	ldi	r27, 0xCC	; 204
    15e6:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    15ea:	7c 01       	movw	r14, r24
    15ec:	f6 94       	lsr	r15
    15ee:	e7 94       	ror	r14
    15f0:	f6 94       	lsr	r15
    15f2:	e7 94       	ror	r14
    15f4:	f6 94       	lsr	r15
    15f6:	e7 94       	ror	r14
    15f8:	eb 86       	std	Y+11, r14	; 0x0b
    15fa:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100;
    15fc:	84 81       	ldd	r24, Z+4	; 0x04
    15fe:	95 81       	ldd	r25, Z+5	; 0x05
    1600:	42 85       	ldd	r20, Z+10	; 0x0a
    1602:	53 85       	ldd	r21, Z+11	; 0x0b
    1604:	48 9f       	mul	r20, r24
    1606:	90 01       	movw	r18, r0
    1608:	49 9f       	mul	r20, r25
    160a:	30 0d       	add	r19, r0
    160c:	58 9f       	mul	r21, r24
    160e:	30 0d       	add	r19, r0
    1610:	11 24       	eor	r1, r1
    1612:	36 95       	lsr	r19
    1614:	27 95       	ror	r18
    1616:	36 95       	lsr	r19
    1618:	27 95       	ror	r18
    161a:	ab e7       	ldi	r26, 0x7B	; 123
    161c:	b4 e1       	ldi	r27, 0x14	; 20
    161e:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    1622:	96 95       	lsr	r25
    1624:	87 95       	ror	r24
    1626:	8f 83       	std	Y+7, r24	; 0x07
    1628:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration / 1000;
    162a:	84 81       	ldd	r24, Z+4	; 0x04
    162c:	95 81       	ldd	r25, Z+5	; 0x05
    162e:	42 81       	ldd	r20, Z+2	; 0x02
    1630:	53 81       	ldd	r21, Z+3	; 0x03
    1632:	48 9f       	mul	r20, r24
    1634:	90 01       	movw	r18, r0
    1636:	49 9f       	mul	r20, r25
    1638:	30 0d       	add	r19, r0
    163a:	58 9f       	mul	r21, r24
    163c:	30 0d       	add	r19, r0
    163e:	11 24       	eor	r1, r1
    1640:	36 95       	lsr	r19
    1642:	27 95       	ror	r18
    1644:	36 95       	lsr	r19
    1646:	27 95       	ror	r18
    1648:	36 95       	lsr	r19
    164a:	27 95       	ror	r18
    164c:	a5 ec       	ldi	r26, 0xC5	; 197
    164e:	b0 e2       	ldi	r27, 0x20	; 32
    1650:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    1654:	92 95       	swap	r25
    1656:	82 95       	swap	r24
    1658:	8f 70       	andi	r24, 0x0F	; 15
    165a:	89 27       	eor	r24, r25
    165c:	9f 70       	andi	r25, 0x0F	; 15
    165e:	89 27       	eor	r24, r25
    1660:	89 87       	std	Y+9, r24	; 0x09
    1662:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Slow.Frequency) * 10;
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	8a e6       	ldi	r24, 0x6A	; 106
    166a:	98 e1       	ldi	r25, 0x18	; 24
    166c:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
    1670:	ab 01       	movw	r20, r22
    1672:	44 0f       	add	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	46 0f       	add	r20, r22
    1684:	57 1f       	adc	r21, r23
    1686:	d8 01       	movw	r26, r16
    1688:	50 96       	adiw	r26, 0x10	; 16
    168a:	4d 93       	st	X+, r20
    168c:	5c 93       	st	X, r21
    168e:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1690:	9a 01       	movw	r18, r20
    1692:	36 95       	lsr	r19
    1694:	27 95       	ror	r18
    1696:	36 95       	lsr	r19
    1698:	27 95       	ror	r18
    169a:	ab e7       	ldi	r26, 0x7B	; 123
    169c:	b4 e1       	ldi	r27, 0x14	; 20
    169e:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    16a2:	96 95       	lsr	r25
    16a4:	87 95       	ror	r24
    16a6:	8e 9d       	mul	r24, r14
    16a8:	90 01       	movw	r18, r0
    16aa:	8f 9d       	mul	r24, r15
    16ac:	30 0d       	add	r19, r0
    16ae:	9e 9d       	mul	r25, r14
    16b0:	30 0d       	add	r19, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	42 1b       	sub	r20, r18
    16b6:	53 0b       	sbc	r21, r19
    16b8:	d8 01       	movw	r26, r16
    16ba:	52 96       	adiw	r26, 0x12	; 18
    16bc:	4d 93       	st	X+, r20
    16be:	5c 93       	st	X, r21
    16c0:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    16c2:	54 96       	adiw	r26, 0x14	; 20
    16c4:	ed 92       	st	X+, r14
    16c6:	fc 92       	st	X, r15
    16c8:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Slow.Intensity;
    16ca:	84 81       	ldd	r24, Z+4	; 0x04
    16cc:	95 81       	ldd	r25, Z+5	; 0x05
    16ce:	56 96       	adiw	r26, 0x16	; 22
    16d0:	8d 93       	st	X+, r24
    16d2:	9c 93       	st	X, r25
    16d4:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	80 93 76 21 	sts	0x2176, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    16dc:	26 e0       	ldi	r18, 0x06	; 6
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	ae 01       	movw	r20, r28
    16e2:	49 5f       	subi	r20, 0xF9	; 249
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	64 e0       	ldi	r22, 0x04	; 4
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	5a 96       	adiw	r26, 0x1a	; 26
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	5b 97       	sbiw	r26, 0x1b	; 27
    16f2:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    16f6:	97 c0       	rjmp	.+302    	; 0x1826 <_ZN16CLaserControlApp3RunEv+0xd1c>
			case WorkMedium:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Medium.Duration * m_structDGUSDATA_Medium.Frequency / 10;
    16f8:	ea e8       	ldi	r30, 0x8A	; 138
    16fa:	f1 e2       	ldi	r31, 0x21	; 33
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	40 81       	ld	r20, Z
    1702:	51 81       	ldd	r21, Z+1	; 0x01
    1704:	48 9f       	mul	r20, r24
    1706:	90 01       	movw	r18, r0
    1708:	49 9f       	mul	r20, r25
    170a:	30 0d       	add	r19, r0
    170c:	58 9f       	mul	r21, r24
    170e:	30 0d       	add	r19, r0
    1710:	11 24       	eor	r1, r1
    1712:	ad ec       	ldi	r26, 0xCD	; 205
    1714:	bc ec       	ldi	r27, 0xCC	; 204
    1716:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    171a:	7c 01       	movw	r14, r24
    171c:	f6 94       	lsr	r15
    171e:	e7 94       	ror	r14
    1720:	f6 94       	lsr	r15
    1722:	e7 94       	ror	r14
    1724:	f6 94       	lsr	r15
    1726:	e7 94       	ror	r14
    1728:	eb 86       	std	Y+11, r14	; 0x0b
    172a:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100;
    172c:	84 81       	ldd	r24, Z+4	; 0x04
    172e:	95 81       	ldd	r25, Z+5	; 0x05
    1730:	42 85       	ldd	r20, Z+10	; 0x0a
    1732:	53 85       	ldd	r21, Z+11	; 0x0b
    1734:	48 9f       	mul	r20, r24
    1736:	90 01       	movw	r18, r0
    1738:	49 9f       	mul	r20, r25
    173a:	30 0d       	add	r19, r0
    173c:	58 9f       	mul	r21, r24
    173e:	30 0d       	add	r19, r0
    1740:	11 24       	eor	r1, r1
    1742:	36 95       	lsr	r19
    1744:	27 95       	ror	r18
    1746:	36 95       	lsr	r19
    1748:	27 95       	ror	r18
    174a:	ab e7       	ldi	r26, 0x7B	; 123
    174c:	b4 e1       	ldi	r27, 0x14	; 20
    174e:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	8f 83       	std	Y+7, r24	; 0x07
    1758:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration / 1000;
    175a:	84 81       	ldd	r24, Z+4	; 0x04
    175c:	95 81       	ldd	r25, Z+5	; 0x05
    175e:	42 81       	ldd	r20, Z+2	; 0x02
    1760:	53 81       	ldd	r21, Z+3	; 0x03
    1762:	48 9f       	mul	r20, r24
    1764:	90 01       	movw	r18, r0
    1766:	49 9f       	mul	r20, r25
    1768:	30 0d       	add	r19, r0
    176a:	58 9f       	mul	r21, r24
    176c:	30 0d       	add	r19, r0
    176e:	11 24       	eor	r1, r1
    1770:	36 95       	lsr	r19
    1772:	27 95       	ror	r18
    1774:	36 95       	lsr	r19
    1776:	27 95       	ror	r18
    1778:	36 95       	lsr	r19
    177a:	27 95       	ror	r18
    177c:	a5 ec       	ldi	r26, 0xC5	; 197
    177e:	b0 e2       	ldi	r27, 0x20	; 32
    1780:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    1784:	92 95       	swap	r25
    1786:	82 95       	swap	r24
    1788:	8f 70       	andi	r24, 0x0F	; 15
    178a:	89 27       	eor	r24, r25
    178c:	9f 70       	andi	r25, 0x0F	; 15
    178e:	89 27       	eor	r24, r25
    1790:	89 87       	std	Y+9, r24	; 0x09
    1792:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Medium.Frequency) * 10;
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	8a e6       	ldi	r24, 0x6A	; 106
    179a:	98 e1       	ldi	r25, 0x18	; 24
    179c:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodhi4>
    17a0:	ab 01       	movw	r20, r22
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	66 0f       	add	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	66 0f       	add	r22, r22
    17ac:	77 1f       	adc	r23, r23
    17ae:	66 0f       	add	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	46 0f       	add	r20, r22
    17b4:	57 1f       	adc	r21, r23
    17b6:	d8 01       	movw	r26, r16
    17b8:	50 96       	adiw	r26, 0x10	; 16
    17ba:	4d 93       	st	X+, r20
    17bc:	5c 93       	st	X, r21
    17be:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    17c0:	9a 01       	movw	r18, r20
    17c2:	36 95       	lsr	r19
    17c4:	27 95       	ror	r18
    17c6:	36 95       	lsr	r19
    17c8:	27 95       	ror	r18
    17ca:	ab e7       	ldi	r26, 0x7B	; 123
    17cc:	b4 e1       	ldi	r27, 0x14	; 20
    17ce:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	8e 9d       	mul	r24, r14
    17d8:	90 01       	movw	r18, r0
    17da:	8f 9d       	mul	r24, r15
    17dc:	30 0d       	add	r19, r0
    17de:	9e 9d       	mul	r25, r14
    17e0:	30 0d       	add	r19, r0
    17e2:	11 24       	eor	r1, r1
    17e4:	42 1b       	sub	r20, r18
    17e6:	53 0b       	sbc	r21, r19
    17e8:	d8 01       	movw	r26, r16
    17ea:	52 96       	adiw	r26, 0x12	; 18
    17ec:	4d 93       	st	X+, r20
    17ee:	5c 93       	st	X, r21
    17f0:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    17f2:	54 96       	adiw	r26, 0x14	; 20
    17f4:	ed 92       	st	X+, r14
    17f6:	fc 92       	st	X, r15
    17f8:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Medium.Intensity;
    17fa:	84 81       	ldd	r24, Z+4	; 0x04
    17fc:	95 81       	ldd	r25, Z+5	; 0x05
    17fe:	56 96       	adiw	r26, 0x16	; 22
    1800:	8d 93       	st	X+, r24
    1802:	9c 93       	st	X, r25
    1804:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	80 93 76 21 	sts	0x2176, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    180c:	26 e0       	ldi	r18, 0x06	; 6
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	ae 01       	movw	r20, r28
    1812:	49 5f       	subi	r20, 0xF9	; 249
    1814:	5f 4f       	sbci	r21, 0xFF	; 255
    1816:	64 e0       	ldi	r22, 0x04	; 4
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	5a 96       	adiw	r26, 0x1a	; 26
    181c:	8d 91       	ld	r24, X+
    181e:	9c 91       	ld	r25, X
    1820:	5b 97       	sbiw	r26, 0x1b	; 27
    1822:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    1826:	f8 01       	movw	r30, r16
    1828:	82 8d       	ldd	r24, Z+26	; 0x1a
    182a:	93 8d       	ldd	r25, Z+27	; 0x1b
    182c:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
    1830:	ce 53       	subi	r28, 0x3E	; 62
    1832:	dc 4f       	sbci	r29, 0xFC	; 252
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	08 95       	ret

00001846 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    1846:	08 95       	ret

00001848 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    1848:	08 95       	ret

0000184a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    184a:	ef 92       	push	r14
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    1856:	e0 e8       	ldi	r30, 0x80	; 128
    1858:	f6 e0       	ldi	r31, 0x06	; 6
    185a:	80 eb       	ldi	r24, 0xB0	; 176
    185c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    185e:	90 e4       	ldi	r25, 0x40	; 64
    1860:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1862:	90 ec       	ldi	r25, 0xC0	; 192
    1864:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1866:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1868:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    186a:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    186c:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    186e:	61 11       	cpse	r22, r1
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1872:	80 e4       	ldi	r24, 0x40	; 64
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    1876:	80 e5       	ldi	r24, 0x50	; 80
    1878:	01 11       	cpse	r16, r1
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1880:	30 e8       	ldi	r19, 0x80	; 128
    1882:	41 11       	cpse	r20, r1
    1884:	02 c0       	rjmp	.+4      	; 0x188a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	01 c0       	rjmp	.+2      	; 0x188c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    188a:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    188c:	22 0f       	add	r18, r18
    188e:	22 0f       	add	r18, r18
    1890:	e2 2a       	or	r14, r18
    1892:	e8 2a       	or	r14, r24
    1894:	e3 2a       	or	r14, r19
		prescaler;
    1896:	e9 2a       	or	r14, r25
    1898:	00 ec       	ldi	r16, 0xC0	; 192
    189a:	1a e0       	ldi	r17, 0x0A	; 10
    189c:	f8 01       	movw	r30, r16
    189e:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 31 29 	call	0x5262	; 0x5262 <malloc>
    18a8:	88 83       	st	Y, r24
    18aa:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	f8 01       	movw	r30, r16
    18b0:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    18b2:	81 ea       	ldi	r24, 0xA1	; 161
    18b4:	9c e0       	ldi	r25, 0x0C	; 12
    18b6:	80 93 1e 22 	sts	0x221E, r24
    18ba:	90 93 1f 22 	sts	0x221F, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    18be:	c0 93 14 23 	sts	0x2314, r28
    18c2:	d0 93 15 23 	sts	0x2315, r29
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	ef 90       	pop	r14
    18d0:	08 95       	ret

000018d2 <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
	rx_pos = length;
    18d8:	4a 83       	std	Y+2, r20	; 0x02
    18da:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
    18dc:	4c 83       	std	Y+4, r20	; 0x04
    18de:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
    18e0:	88 81       	ld	r24, Y
    18e2:	99 81       	ldd	r25, Y+1	; 0x01
    18e4:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
    18e8:	80 e1       	ldi	r24, 0x10	; 16
    18ea:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
    18ee:	88 81       	ld	r24, Y
    18f0:	99 81       	ldd	r25, Y+1	; 0x01
    18f2:	4a 81       	ldd	r20, Y+2	; 0x02
    18f4:	5b 81       	ldd	r21, Y+3	; 0x03
    18f6:	9a 01       	movw	r18, r20
    18f8:	21 50       	subi	r18, 0x01	; 1
    18fa:	31 09       	sbc	r19, r1
    18fc:	2a 83       	std	Y+2, r18	; 0x02
    18fe:	3b 83       	std	Y+3, r19	; 0x03
    1900:	fc 01       	movw	r30, r24
    1902:	e2 0f       	add	r30, r18
    1904:	f3 1f       	adc	r31, r19
    1906:	80 81       	ld	r24, Z
    1908:	80 93 c3 0a 	sts	0x0AC3, r24
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1912:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	89 2b       	or	r24, r25
    191a:	79 f0       	breq	.+30     	; 0x193a <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    191c:	40 81       	ld	r20, Z
    191e:	51 81       	ldd	r21, Z+1	; 0x01
    1920:	22 81       	ldd	r18, Z+2	; 0x02
    1922:	33 81       	ldd	r19, Z+3	; 0x03
    1924:	c9 01       	movw	r24, r18
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	82 83       	std	Z+2, r24	; 0x02
    192a:	93 83       	std	Z+3, r25	; 0x03
    192c:	fa 01       	movw	r30, r20
    192e:	e8 0f       	add	r30, r24
    1930:	f9 1f       	adc	r31, r25
    1932:	80 81       	ld	r24, Z
    1934:	80 93 c3 0a 	sts	0x0AC3, r24
    1938:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    193a:	80 e1       	ldi	r24, 0x10	; 16
    193c:	80 93 85 06 	sts	0x0685, r24
    1940:	08 95       	ret

00001942 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    1942:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN4CSPI10OnTransmitEv>
    1946:	08 95       	ret

00001948 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    1948:	22 ea       	ldi	r18, 0xA2	; 162
    194a:	30 e2       	ldi	r19, 0x20	; 32
    194c:	fc 01       	movw	r30, r24
    194e:	20 83       	st	Z, r18
    1950:	31 83       	std	Z+1, r19	; 0x01
    1952:	08 95       	ret

00001954 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    1954:	08 95       	ret

00001956 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    1956:	26 ec       	ldi	r18, 0xC6	; 198
    1958:	30 e2       	ldi	r19, 0x20	; 32
    195a:	fc 01       	movw	r30, r24
    195c:	20 83       	st	Z, r18
    195e:	31 83       	std	Z+1, r19	; 0x01
    1960:	08 95       	ret

00001962 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1962:	08 95       	ret

00001964 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    1964:	1f 92       	push	r1
    1966:	0f 92       	push	r0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	0f 92       	push	r0
    196c:	11 24       	eor	r1, r1
    196e:	0b b6       	in	r0, 0x3b	; 59
    1970:	0f 92       	push	r0
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	e0 91 ae 21 	lds	r30, 0x21AE
    198e:	f0 91 af 21 	lds	r31, 0x21AF
    1992:	30 97       	sbiw	r30, 0x00	; 0
    1994:	29 f0       	breq	.+10     	; 0x19a0 <__vector_1+0x3c>
    1996:	80 91 a4 22 	lds	r24, 0x22A4
    199a:	90 91 a5 22 	lds	r25, 0x22A5
    199e:	19 95       	eicall
    19a0:	ff 91       	pop	r31
    19a2:	ef 91       	pop	r30
    19a4:	bf 91       	pop	r27
    19a6:	af 91       	pop	r26
    19a8:	9f 91       	pop	r25
    19aa:	8f 91       	pop	r24
    19ac:	7f 91       	pop	r23
    19ae:	6f 91       	pop	r22
    19b0:	5f 91       	pop	r21
    19b2:	4f 91       	pop	r20
    19b4:	3f 91       	pop	r19
    19b6:	2f 91       	pop	r18
    19b8:	0f 90       	pop	r0
    19ba:	0b be       	out	0x3b, r0	; 59
    19bc:	0f 90       	pop	r0
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	0f 90       	pop	r0
    19c2:	1f 90       	pop	r1
    19c4:	18 95       	reti

000019c6 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	0b b6       	in	r0, 0x3b	; 59
    19d2:	0f 92       	push	r0
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	e0 91 b0 21 	lds	r30, 0x21B0
    19f0:	f0 91 b1 21 	lds	r31, 0x21B1
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	29 f0       	breq	.+10     	; 0x1a02 <__vector_2+0x3c>
    19f8:	80 91 a6 22 	lds	r24, 0x22A6
    19fc:	90 91 a7 22 	lds	r25, 0x22A7
    1a00:	19 95       	eicall
    1a02:	ff 91       	pop	r31
    1a04:	ef 91       	pop	r30
    1a06:	bf 91       	pop	r27
    1a08:	af 91       	pop	r26
    1a0a:	9f 91       	pop	r25
    1a0c:	8f 91       	pop	r24
    1a0e:	7f 91       	pop	r23
    1a10:	6f 91       	pop	r22
    1a12:	5f 91       	pop	r21
    1a14:	4f 91       	pop	r20
    1a16:	3f 91       	pop	r19
    1a18:	2f 91       	pop	r18
    1a1a:	0f 90       	pop	r0
    1a1c:	0b be       	out	0x3b, r0	; 59
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	0b b6       	in	r0, 0x3b	; 59
    1a34:	0f 92       	push	r0
    1a36:	2f 93       	push	r18
    1a38:	3f 93       	push	r19
    1a3a:	4f 93       	push	r20
    1a3c:	5f 93       	push	r21
    1a3e:	6f 93       	push	r22
    1a40:	7f 93       	push	r23
    1a42:	8f 93       	push	r24
    1a44:	9f 93       	push	r25
    1a46:	af 93       	push	r26
    1a48:	bf 93       	push	r27
    1a4a:	ef 93       	push	r30
    1a4c:	ff 93       	push	r31
    1a4e:	e0 91 b2 21 	lds	r30, 0x21B2
    1a52:	f0 91 b3 21 	lds	r31, 0x21B3
    1a56:	30 97       	sbiw	r30, 0x00	; 0
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <__vector_3+0x3c>
    1a5a:	80 91 a8 22 	lds	r24, 0x22A8
    1a5e:	90 91 a9 22 	lds	r25, 0x22A9
    1a62:	19 95       	eicall
    1a64:	ff 91       	pop	r31
    1a66:	ef 91       	pop	r30
    1a68:	bf 91       	pop	r27
    1a6a:	af 91       	pop	r26
    1a6c:	9f 91       	pop	r25
    1a6e:	8f 91       	pop	r24
    1a70:	7f 91       	pop	r23
    1a72:	6f 91       	pop	r22
    1a74:	5f 91       	pop	r21
    1a76:	4f 91       	pop	r20
    1a78:	3f 91       	pop	r19
    1a7a:	2f 91       	pop	r18
    1a7c:	0f 90       	pop	r0
    1a7e:	0b be       	out	0x3b, r0	; 59
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	0b b6       	in	r0, 0x3b	; 59
    1a96:	0f 92       	push	r0
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
    1ab0:	e0 91 b4 21 	lds	r30, 0x21B4
    1ab4:	f0 91 b5 21 	lds	r31, 0x21B5
    1ab8:	30 97       	sbiw	r30, 0x00	; 0
    1aba:	29 f0       	breq	.+10     	; 0x1ac6 <__vector_4+0x3c>
    1abc:	80 91 aa 22 	lds	r24, 0x22AA
    1ac0:	90 91 ab 22 	lds	r25, 0x22AB
    1ac4:	19 95       	eicall
    1ac6:	ff 91       	pop	r31
    1ac8:	ef 91       	pop	r30
    1aca:	bf 91       	pop	r27
    1acc:	af 91       	pop	r26
    1ace:	9f 91       	pop	r25
    1ad0:	8f 91       	pop	r24
    1ad2:	7f 91       	pop	r23
    1ad4:	6f 91       	pop	r22
    1ad6:	5f 91       	pop	r21
    1ad8:	4f 91       	pop	r20
    1ada:	3f 91       	pop	r19
    1adc:	2f 91       	pop	r18
    1ade:	0f 90       	pop	r0
    1ae0:	0b be       	out	0x3b, r0	; 59
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	0f 90       	pop	r0
    1ae8:	1f 90       	pop	r1
    1aea:	18 95       	reti

00001aec <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	0f 92       	push	r0
    1af4:	11 24       	eor	r1, r1
    1af6:	0b b6       	in	r0, 0x3b	; 59
    1af8:	0f 92       	push	r0
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
    1b12:	e0 91 b6 21 	lds	r30, 0x21B6
    1b16:	f0 91 b7 21 	lds	r31, 0x21B7
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <__vector_5+0x3c>
    1b1e:	80 91 ac 22 	lds	r24, 0x22AC
    1b22:	90 91 ad 22 	lds	r25, 0x22AD
    1b26:	19 95       	eicall
    1b28:	ff 91       	pop	r31
    1b2a:	ef 91       	pop	r30
    1b2c:	bf 91       	pop	r27
    1b2e:	af 91       	pop	r26
    1b30:	9f 91       	pop	r25
    1b32:	8f 91       	pop	r24
    1b34:	7f 91       	pop	r23
    1b36:	6f 91       	pop	r22
    1b38:	5f 91       	pop	r21
    1b3a:	4f 91       	pop	r20
    1b3c:	3f 91       	pop	r19
    1b3e:	2f 91       	pop	r18
    1b40:	0f 90       	pop	r0
    1b42:	0b be       	out	0x3b, r0	; 59
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	0b b6       	in	r0, 0x3b	; 59
    1b5a:	0f 92       	push	r0
    1b5c:	2f 93       	push	r18
    1b5e:	3f 93       	push	r19
    1b60:	4f 93       	push	r20
    1b62:	5f 93       	push	r21
    1b64:	6f 93       	push	r22
    1b66:	7f 93       	push	r23
    1b68:	8f 93       	push	r24
    1b6a:	9f 93       	push	r25
    1b6c:	af 93       	push	r26
    1b6e:	bf 93       	push	r27
    1b70:	ef 93       	push	r30
    1b72:	ff 93       	push	r31
    1b74:	e0 91 b8 21 	lds	r30, 0x21B8
    1b78:	f0 91 b9 21 	lds	r31, 0x21B9
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	29 f0       	breq	.+10     	; 0x1b8a <__vector_6+0x3c>
    1b80:	80 91 ae 22 	lds	r24, 0x22AE
    1b84:	90 91 af 22 	lds	r25, 0x22AF
    1b88:	19 95       	eicall
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	0b be       	out	0x3b, r0	; 59
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1bb0:	1f 92       	push	r1
    1bb2:	0f 92       	push	r0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	0b b6       	in	r0, 0x3b	; 59
    1bbc:	0f 92       	push	r0
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
    1bd6:	e0 91 ba 21 	lds	r30, 0x21BA
    1bda:	f0 91 bb 21 	lds	r31, 0x21BB
    1bde:	30 97       	sbiw	r30, 0x00	; 0
    1be0:	29 f0       	breq	.+10     	; 0x1bec <__vector_7+0x3c>
    1be2:	80 91 b0 22 	lds	r24, 0x22B0
    1be6:	90 91 b1 22 	lds	r25, 0x22B1
    1bea:	19 95       	eicall
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	7f 91       	pop	r23
    1bfa:	6f 91       	pop	r22
    1bfc:	5f 91       	pop	r21
    1bfe:	4f 91       	pop	r20
    1c00:	3f 91       	pop	r19
    1c02:	2f 91       	pop	r18
    1c04:	0f 90       	pop	r0
    1c06:	0b be       	out	0x3b, r0	; 59
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti

00001c12 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1c12:	1f 92       	push	r1
    1c14:	0f 92       	push	r0
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	0f 92       	push	r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	0b b6       	in	r0, 0x3b	; 59
    1c1e:	0f 92       	push	r0
    1c20:	2f 93       	push	r18
    1c22:	3f 93       	push	r19
    1c24:	4f 93       	push	r20
    1c26:	5f 93       	push	r21
    1c28:	6f 93       	push	r22
    1c2a:	7f 93       	push	r23
    1c2c:	8f 93       	push	r24
    1c2e:	9f 93       	push	r25
    1c30:	af 93       	push	r26
    1c32:	bf 93       	push	r27
    1c34:	ef 93       	push	r30
    1c36:	ff 93       	push	r31
    1c38:	e0 91 bc 21 	lds	r30, 0x21BC
    1c3c:	f0 91 bd 21 	lds	r31, 0x21BD
    1c40:	30 97       	sbiw	r30, 0x00	; 0
    1c42:	29 f0       	breq	.+10     	; 0x1c4e <__vector_8+0x3c>
    1c44:	80 91 b2 22 	lds	r24, 0x22B2
    1c48:	90 91 b3 22 	lds	r25, 0x22B3
    1c4c:	19 95       	eicall
    1c4e:	ff 91       	pop	r31
    1c50:	ef 91       	pop	r30
    1c52:	bf 91       	pop	r27
    1c54:	af 91       	pop	r26
    1c56:	9f 91       	pop	r25
    1c58:	8f 91       	pop	r24
    1c5a:	7f 91       	pop	r23
    1c5c:	6f 91       	pop	r22
    1c5e:	5f 91       	pop	r21
    1c60:	4f 91       	pop	r20
    1c62:	3f 91       	pop	r19
    1c64:	2f 91       	pop	r18
    1c66:	0f 90       	pop	r0
    1c68:	0b be       	out	0x3b, r0	; 59
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1c74:	1f 92       	push	r1
    1c76:	0f 92       	push	r0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	0b b6       	in	r0, 0x3b	; 59
    1c80:	0f 92       	push	r0
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	e0 91 be 21 	lds	r30, 0x21BE
    1c9e:	f0 91 bf 21 	lds	r31, 0x21BF
    1ca2:	30 97       	sbiw	r30, 0x00	; 0
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <__vector_9+0x3c>
    1ca6:	80 91 b4 22 	lds	r24, 0x22B4
    1caa:	90 91 b5 22 	lds	r25, 0x22B5
    1cae:	19 95       	eicall
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	7f 91       	pop	r23
    1cbe:	6f 91       	pop	r22
    1cc0:	5f 91       	pop	r21
    1cc2:	4f 91       	pop	r20
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	0b be       	out	0x3b, r0	; 59
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	0b b6       	in	r0, 0x3b	; 59
    1ce2:	0f 92       	push	r0
    1ce4:	2f 93       	push	r18
    1ce6:	3f 93       	push	r19
    1ce8:	4f 93       	push	r20
    1cea:	5f 93       	push	r21
    1cec:	6f 93       	push	r22
    1cee:	7f 93       	push	r23
    1cf0:	8f 93       	push	r24
    1cf2:	9f 93       	push	r25
    1cf4:	af 93       	push	r26
    1cf6:	bf 93       	push	r27
    1cf8:	ef 93       	push	r30
    1cfa:	ff 93       	push	r31
    1cfc:	e0 91 c0 21 	lds	r30, 0x21C0
    1d00:	f0 91 c1 21 	lds	r31, 0x21C1
    1d04:	30 97       	sbiw	r30, 0x00	; 0
    1d06:	29 f0       	breq	.+10     	; 0x1d12 <__vector_10+0x3c>
    1d08:	80 91 b6 22 	lds	r24, 0x22B6
    1d0c:	90 91 b7 22 	lds	r25, 0x22B7
    1d10:	19 95       	eicall
    1d12:	ff 91       	pop	r31
    1d14:	ef 91       	pop	r30
    1d16:	bf 91       	pop	r27
    1d18:	af 91       	pop	r26
    1d1a:	9f 91       	pop	r25
    1d1c:	8f 91       	pop	r24
    1d1e:	7f 91       	pop	r23
    1d20:	6f 91       	pop	r22
    1d22:	5f 91       	pop	r21
    1d24:	4f 91       	pop	r20
    1d26:	3f 91       	pop	r19
    1d28:	2f 91       	pop	r18
    1d2a:	0f 90       	pop	r0
    1d2c:	0b be       	out	0x3b, r0	; 59
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	0f 90       	pop	r0
    1d34:	1f 90       	pop	r1
    1d36:	18 95       	reti

00001d38 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1d38:	1f 92       	push	r1
    1d3a:	0f 92       	push	r0
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	0f 92       	push	r0
    1d40:	11 24       	eor	r1, r1
    1d42:	0b b6       	in	r0, 0x3b	; 59
    1d44:	0f 92       	push	r0
    1d46:	2f 93       	push	r18
    1d48:	3f 93       	push	r19
    1d4a:	4f 93       	push	r20
    1d4c:	5f 93       	push	r21
    1d4e:	6f 93       	push	r22
    1d50:	7f 93       	push	r23
    1d52:	8f 93       	push	r24
    1d54:	9f 93       	push	r25
    1d56:	af 93       	push	r26
    1d58:	bf 93       	push	r27
    1d5a:	ef 93       	push	r30
    1d5c:	ff 93       	push	r31
    1d5e:	e0 91 c2 21 	lds	r30, 0x21C2
    1d62:	f0 91 c3 21 	lds	r31, 0x21C3
    1d66:	30 97       	sbiw	r30, 0x00	; 0
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <__vector_11+0x3c>
    1d6a:	80 91 b8 22 	lds	r24, 0x22B8
    1d6e:	90 91 b9 22 	lds	r25, 0x22B9
    1d72:	19 95       	eicall
    1d74:	ff 91       	pop	r31
    1d76:	ef 91       	pop	r30
    1d78:	bf 91       	pop	r27
    1d7a:	af 91       	pop	r26
    1d7c:	9f 91       	pop	r25
    1d7e:	8f 91       	pop	r24
    1d80:	7f 91       	pop	r23
    1d82:	6f 91       	pop	r22
    1d84:	5f 91       	pop	r21
    1d86:	4f 91       	pop	r20
    1d88:	3f 91       	pop	r19
    1d8a:	2f 91       	pop	r18
    1d8c:	0f 90       	pop	r0
    1d8e:	0b be       	out	0x3b, r0	; 59
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	0f 90       	pop	r0
    1d96:	1f 90       	pop	r1
    1d98:	18 95       	reti

00001d9a <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1d9a:	1f 92       	push	r1
    1d9c:	0f 92       	push	r0
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	0f 92       	push	r0
    1da2:	11 24       	eor	r1, r1
    1da4:	0b b6       	in	r0, 0x3b	; 59
    1da6:	0f 92       	push	r0
    1da8:	2f 93       	push	r18
    1daa:	3f 93       	push	r19
    1dac:	4f 93       	push	r20
    1dae:	5f 93       	push	r21
    1db0:	6f 93       	push	r22
    1db2:	7f 93       	push	r23
    1db4:	8f 93       	push	r24
    1db6:	9f 93       	push	r25
    1db8:	af 93       	push	r26
    1dba:	bf 93       	push	r27
    1dbc:	ef 93       	push	r30
    1dbe:	ff 93       	push	r31
    1dc0:	e0 91 c4 21 	lds	r30, 0x21C4
    1dc4:	f0 91 c5 21 	lds	r31, 0x21C5
    1dc8:	30 97       	sbiw	r30, 0x00	; 0
    1dca:	29 f0       	breq	.+10     	; 0x1dd6 <__vector_12+0x3c>
    1dcc:	80 91 ba 22 	lds	r24, 0x22BA
    1dd0:	90 91 bb 22 	lds	r25, 0x22BB
    1dd4:	19 95       	eicall
    1dd6:	ff 91       	pop	r31
    1dd8:	ef 91       	pop	r30
    1dda:	bf 91       	pop	r27
    1ddc:	af 91       	pop	r26
    1dde:	9f 91       	pop	r25
    1de0:	8f 91       	pop	r24
    1de2:	7f 91       	pop	r23
    1de4:	6f 91       	pop	r22
    1de6:	5f 91       	pop	r21
    1de8:	4f 91       	pop	r20
    1dea:	3f 91       	pop	r19
    1dec:	2f 91       	pop	r18
    1dee:	0f 90       	pop	r0
    1df0:	0b be       	out	0x3b, r0	; 59
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti

00001dfc <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1dfc:	1f 92       	push	r1
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	0f 92       	push	r0
    1e04:	11 24       	eor	r1, r1
    1e06:	0b b6       	in	r0, 0x3b	; 59
    1e08:	0f 92       	push	r0
    1e0a:	2f 93       	push	r18
    1e0c:	3f 93       	push	r19
    1e0e:	4f 93       	push	r20
    1e10:	5f 93       	push	r21
    1e12:	6f 93       	push	r22
    1e14:	7f 93       	push	r23
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	af 93       	push	r26
    1e1c:	bf 93       	push	r27
    1e1e:	ef 93       	push	r30
    1e20:	ff 93       	push	r31
    1e22:	e0 91 c6 21 	lds	r30, 0x21C6
    1e26:	f0 91 c7 21 	lds	r31, 0x21C7
    1e2a:	30 97       	sbiw	r30, 0x00	; 0
    1e2c:	29 f0       	breq	.+10     	; 0x1e38 <__vector_13+0x3c>
    1e2e:	80 91 bc 22 	lds	r24, 0x22BC
    1e32:	90 91 bd 22 	lds	r25, 0x22BD
    1e36:	19 95       	eicall
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0b be       	out	0x3b, r0	; 59
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	0b b6       	in	r0, 0x3b	; 59
    1e6a:	0f 92       	push	r0
    1e6c:	2f 93       	push	r18
    1e6e:	3f 93       	push	r19
    1e70:	4f 93       	push	r20
    1e72:	5f 93       	push	r21
    1e74:	6f 93       	push	r22
    1e76:	7f 93       	push	r23
    1e78:	8f 93       	push	r24
    1e7a:	9f 93       	push	r25
    1e7c:	af 93       	push	r26
    1e7e:	bf 93       	push	r27
    1e80:	ef 93       	push	r30
    1e82:	ff 93       	push	r31
    1e84:	e0 91 c8 21 	lds	r30, 0x21C8
    1e88:	f0 91 c9 21 	lds	r31, 0x21C9
    1e8c:	30 97       	sbiw	r30, 0x00	; 0
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <__vector_14+0x3c>
    1e90:	80 91 be 22 	lds	r24, 0x22BE
    1e94:	90 91 bf 22 	lds	r25, 0x22BF
    1e98:	19 95       	eicall
    1e9a:	ff 91       	pop	r31
    1e9c:	ef 91       	pop	r30
    1e9e:	bf 91       	pop	r27
    1ea0:	af 91       	pop	r26
    1ea2:	9f 91       	pop	r25
    1ea4:	8f 91       	pop	r24
    1ea6:	7f 91       	pop	r23
    1ea8:	6f 91       	pop	r22
    1eaa:	5f 91       	pop	r21
    1eac:	4f 91       	pop	r20
    1eae:	3f 91       	pop	r19
    1eb0:	2f 91       	pop	r18
    1eb2:	0f 90       	pop	r0
    1eb4:	0b be       	out	0x3b, r0	; 59
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	0b b6       	in	r0, 0x3b	; 59
    1ecc:	0f 92       	push	r0
    1ece:	2f 93       	push	r18
    1ed0:	3f 93       	push	r19
    1ed2:	4f 93       	push	r20
    1ed4:	5f 93       	push	r21
    1ed6:	6f 93       	push	r22
    1ed8:	7f 93       	push	r23
    1eda:	8f 93       	push	r24
    1edc:	9f 93       	push	r25
    1ede:	af 93       	push	r26
    1ee0:	bf 93       	push	r27
    1ee2:	ef 93       	push	r30
    1ee4:	ff 93       	push	r31
    1ee6:	e0 91 ca 21 	lds	r30, 0x21CA
    1eea:	f0 91 cb 21 	lds	r31, 0x21CB
    1eee:	30 97       	sbiw	r30, 0x00	; 0
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <__vector_15+0x3c>
    1ef2:	80 91 c0 22 	lds	r24, 0x22C0
    1ef6:	90 91 c1 22 	lds	r25, 0x22C1
    1efa:	19 95       	eicall
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0b be       	out	0x3b, r0	; 59
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	0b b6       	in	r0, 0x3b	; 59
    1f2e:	0f 92       	push	r0
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	e0 91 cc 21 	lds	r30, 0x21CC
    1f4c:	f0 91 cd 21 	lds	r31, 0x21CD
    1f50:	30 97       	sbiw	r30, 0x00	; 0
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <__vector_16+0x3c>
    1f54:	80 91 c2 22 	lds	r24, 0x22C2
    1f58:	90 91 c3 22 	lds	r25, 0x22C3
    1f5c:	19 95       	eicall
    1f5e:	ff 91       	pop	r31
    1f60:	ef 91       	pop	r30
    1f62:	bf 91       	pop	r27
    1f64:	af 91       	pop	r26
    1f66:	9f 91       	pop	r25
    1f68:	8f 91       	pop	r24
    1f6a:	7f 91       	pop	r23
    1f6c:	6f 91       	pop	r22
    1f6e:	5f 91       	pop	r21
    1f70:	4f 91       	pop	r20
    1f72:	3f 91       	pop	r19
    1f74:	2f 91       	pop	r18
    1f76:	0f 90       	pop	r0
    1f78:	0b be       	out	0x3b, r0	; 59
    1f7a:	0f 90       	pop	r0
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	0f 90       	pop	r0
    1f80:	1f 90       	pop	r1
    1f82:	18 95       	reti

00001f84 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	0b b6       	in	r0, 0x3b	; 59
    1f90:	0f 92       	push	r0
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
    1faa:	e0 91 ce 21 	lds	r30, 0x21CE
    1fae:	f0 91 cf 21 	lds	r31, 0x21CF
    1fb2:	30 97       	sbiw	r30, 0x00	; 0
    1fb4:	29 f0       	breq	.+10     	; 0x1fc0 <__vector_17+0x3c>
    1fb6:	80 91 c4 22 	lds	r24, 0x22C4
    1fba:	90 91 c5 22 	lds	r25, 0x22C5
    1fbe:	19 95       	eicall
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	0f 90       	pop	r0
    1fda:	0b be       	out	0x3b, r0	; 59
    1fdc:	0f 90       	pop	r0
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	0f 90       	pop	r0
    1fe2:	1f 90       	pop	r1
    1fe4:	18 95       	reti

00001fe6 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1fe6:	1f 92       	push	r1
    1fe8:	0f 92       	push	r0
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	0f 92       	push	r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	0b b6       	in	r0, 0x3b	; 59
    1ff2:	0f 92       	push	r0
    1ff4:	2f 93       	push	r18
    1ff6:	3f 93       	push	r19
    1ff8:	4f 93       	push	r20
    1ffa:	5f 93       	push	r21
    1ffc:	6f 93       	push	r22
    1ffe:	7f 93       	push	r23
    2000:	8f 93       	push	r24
    2002:	9f 93       	push	r25
    2004:	af 93       	push	r26
    2006:	bf 93       	push	r27
    2008:	ef 93       	push	r30
    200a:	ff 93       	push	r31
    200c:	e0 91 d0 21 	lds	r30, 0x21D0
    2010:	f0 91 d1 21 	lds	r31, 0x21D1
    2014:	30 97       	sbiw	r30, 0x00	; 0
    2016:	29 f0       	breq	.+10     	; 0x2022 <__vector_18+0x3c>
    2018:	80 91 c6 22 	lds	r24, 0x22C6
    201c:	90 91 c7 22 	lds	r25, 0x22C7
    2020:	19 95       	eicall
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0b be       	out	0x3b, r0	; 59
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	0b b6       	in	r0, 0x3b	; 59
    2054:	0f 92       	push	r0
    2056:	2f 93       	push	r18
    2058:	3f 93       	push	r19
    205a:	4f 93       	push	r20
    205c:	5f 93       	push	r21
    205e:	6f 93       	push	r22
    2060:	7f 93       	push	r23
    2062:	8f 93       	push	r24
    2064:	9f 93       	push	r25
    2066:	af 93       	push	r26
    2068:	bf 93       	push	r27
    206a:	ef 93       	push	r30
    206c:	ff 93       	push	r31
    206e:	e0 91 d2 21 	lds	r30, 0x21D2
    2072:	f0 91 d3 21 	lds	r31, 0x21D3
    2076:	30 97       	sbiw	r30, 0x00	; 0
    2078:	29 f0       	breq	.+10     	; 0x2084 <__vector_19+0x3c>
    207a:	80 91 c8 22 	lds	r24, 0x22C8
    207e:	90 91 c9 22 	lds	r25, 0x22C9
    2082:	19 95       	eicall
    2084:	ff 91       	pop	r31
    2086:	ef 91       	pop	r30
    2088:	bf 91       	pop	r27
    208a:	af 91       	pop	r26
    208c:	9f 91       	pop	r25
    208e:	8f 91       	pop	r24
    2090:	7f 91       	pop	r23
    2092:	6f 91       	pop	r22
    2094:	5f 91       	pop	r21
    2096:	4f 91       	pop	r20
    2098:	3f 91       	pop	r19
    209a:	2f 91       	pop	r18
    209c:	0f 90       	pop	r0
    209e:	0b be       	out	0x3b, r0	; 59
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    20aa:	1f 92       	push	r1
    20ac:	0f 92       	push	r0
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	0f 92       	push	r0
    20b2:	11 24       	eor	r1, r1
    20b4:	0b b6       	in	r0, 0x3b	; 59
    20b6:	0f 92       	push	r0
    20b8:	2f 93       	push	r18
    20ba:	3f 93       	push	r19
    20bc:	4f 93       	push	r20
    20be:	5f 93       	push	r21
    20c0:	6f 93       	push	r22
    20c2:	7f 93       	push	r23
    20c4:	8f 93       	push	r24
    20c6:	9f 93       	push	r25
    20c8:	af 93       	push	r26
    20ca:	bf 93       	push	r27
    20cc:	ef 93       	push	r30
    20ce:	ff 93       	push	r31
    20d0:	e0 91 d4 21 	lds	r30, 0x21D4
    20d4:	f0 91 d5 21 	lds	r31, 0x21D5
    20d8:	30 97       	sbiw	r30, 0x00	; 0
    20da:	29 f0       	breq	.+10     	; 0x20e6 <__vector_20+0x3c>
    20dc:	80 91 ca 22 	lds	r24, 0x22CA
    20e0:	90 91 cb 22 	lds	r25, 0x22CB
    20e4:	19 95       	eicall
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0b be       	out	0x3b, r0	; 59
    2102:	0f 90       	pop	r0
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	0f 90       	pop	r0
    2108:	1f 90       	pop	r1
    210a:	18 95       	reti

0000210c <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    210c:	1f 92       	push	r1
    210e:	0f 92       	push	r0
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	0f 92       	push	r0
    2114:	11 24       	eor	r1, r1
    2116:	0b b6       	in	r0, 0x3b	; 59
    2118:	0f 92       	push	r0
    211a:	2f 93       	push	r18
    211c:	3f 93       	push	r19
    211e:	4f 93       	push	r20
    2120:	5f 93       	push	r21
    2122:	6f 93       	push	r22
    2124:	7f 93       	push	r23
    2126:	8f 93       	push	r24
    2128:	9f 93       	push	r25
    212a:	af 93       	push	r26
    212c:	bf 93       	push	r27
    212e:	ef 93       	push	r30
    2130:	ff 93       	push	r31
    2132:	e0 91 d6 21 	lds	r30, 0x21D6
    2136:	f0 91 d7 21 	lds	r31, 0x21D7
    213a:	30 97       	sbiw	r30, 0x00	; 0
    213c:	29 f0       	breq	.+10     	; 0x2148 <__vector_21+0x3c>
    213e:	80 91 cc 22 	lds	r24, 0x22CC
    2142:	90 91 cd 22 	lds	r25, 0x22CD
    2146:	19 95       	eicall
    2148:	ff 91       	pop	r31
    214a:	ef 91       	pop	r30
    214c:	bf 91       	pop	r27
    214e:	af 91       	pop	r26
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	7f 91       	pop	r23
    2156:	6f 91       	pop	r22
    2158:	5f 91       	pop	r21
    215a:	4f 91       	pop	r20
    215c:	3f 91       	pop	r19
    215e:	2f 91       	pop	r18
    2160:	0f 90       	pop	r0
    2162:	0b be       	out	0x3b, r0	; 59
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    216e:	1f 92       	push	r1
    2170:	0f 92       	push	r0
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	0f 92       	push	r0
    2176:	11 24       	eor	r1, r1
    2178:	0b b6       	in	r0, 0x3b	; 59
    217a:	0f 92       	push	r0
    217c:	2f 93       	push	r18
    217e:	3f 93       	push	r19
    2180:	4f 93       	push	r20
    2182:	5f 93       	push	r21
    2184:	6f 93       	push	r22
    2186:	7f 93       	push	r23
    2188:	8f 93       	push	r24
    218a:	9f 93       	push	r25
    218c:	af 93       	push	r26
    218e:	bf 93       	push	r27
    2190:	ef 93       	push	r30
    2192:	ff 93       	push	r31
    2194:	e0 91 d8 21 	lds	r30, 0x21D8
    2198:	f0 91 d9 21 	lds	r31, 0x21D9
    219c:	30 97       	sbiw	r30, 0x00	; 0
    219e:	29 f0       	breq	.+10     	; 0x21aa <__vector_22+0x3c>
    21a0:	80 91 ce 22 	lds	r24, 0x22CE
    21a4:	90 91 cf 22 	lds	r25, 0x22CF
    21a8:	19 95       	eicall
    21aa:	ff 91       	pop	r31
    21ac:	ef 91       	pop	r30
    21ae:	bf 91       	pop	r27
    21b0:	af 91       	pop	r26
    21b2:	9f 91       	pop	r25
    21b4:	8f 91       	pop	r24
    21b6:	7f 91       	pop	r23
    21b8:	6f 91       	pop	r22
    21ba:	5f 91       	pop	r21
    21bc:	4f 91       	pop	r20
    21be:	3f 91       	pop	r19
    21c0:	2f 91       	pop	r18
    21c2:	0f 90       	pop	r0
    21c4:	0b be       	out	0x3b, r0	; 59
    21c6:	0f 90       	pop	r0
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	0f 90       	pop	r0
    21cc:	1f 90       	pop	r1
    21ce:	18 95       	reti

000021d0 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    21d0:	1f 92       	push	r1
    21d2:	0f 92       	push	r0
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	0f 92       	push	r0
    21d8:	11 24       	eor	r1, r1
    21da:	0b b6       	in	r0, 0x3b	; 59
    21dc:	0f 92       	push	r0
    21de:	2f 93       	push	r18
    21e0:	3f 93       	push	r19
    21e2:	4f 93       	push	r20
    21e4:	5f 93       	push	r21
    21e6:	6f 93       	push	r22
    21e8:	7f 93       	push	r23
    21ea:	8f 93       	push	r24
    21ec:	9f 93       	push	r25
    21ee:	af 93       	push	r26
    21f0:	bf 93       	push	r27
    21f2:	ef 93       	push	r30
    21f4:	ff 93       	push	r31
    21f6:	e0 91 da 21 	lds	r30, 0x21DA
    21fa:	f0 91 db 21 	lds	r31, 0x21DB
    21fe:	30 97       	sbiw	r30, 0x00	; 0
    2200:	29 f0       	breq	.+10     	; 0x220c <__vector_23+0x3c>
    2202:	80 91 d0 22 	lds	r24, 0x22D0
    2206:	90 91 d1 22 	lds	r25, 0x22D1
    220a:	19 95       	eicall
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0b be       	out	0x3b, r0	; 59
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	11 24       	eor	r1, r1
    223c:	0b b6       	in	r0, 0x3b	; 59
    223e:	0f 92       	push	r0
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
    2258:	e0 91 dc 21 	lds	r30, 0x21DC
    225c:	f0 91 dd 21 	lds	r31, 0x21DD
    2260:	30 97       	sbiw	r30, 0x00	; 0
    2262:	29 f0       	breq	.+10     	; 0x226e <__vector_24+0x3c>
    2264:	80 91 d2 22 	lds	r24, 0x22D2
    2268:	90 91 d3 22 	lds	r25, 0x22D3
    226c:	19 95       	eicall
    226e:	ff 91       	pop	r31
    2270:	ef 91       	pop	r30
    2272:	bf 91       	pop	r27
    2274:	af 91       	pop	r26
    2276:	9f 91       	pop	r25
    2278:	8f 91       	pop	r24
    227a:	7f 91       	pop	r23
    227c:	6f 91       	pop	r22
    227e:	5f 91       	pop	r21
    2280:	4f 91       	pop	r20
    2282:	3f 91       	pop	r19
    2284:	2f 91       	pop	r18
    2286:	0f 90       	pop	r0
    2288:	0b be       	out	0x3b, r0	; 59
    228a:	0f 90       	pop	r0
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	0f 90       	pop	r0
    2290:	1f 90       	pop	r1
    2292:	18 95       	reti

00002294 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2294:	1f 92       	push	r1
    2296:	0f 92       	push	r0
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	0f 92       	push	r0
    229c:	11 24       	eor	r1, r1
    229e:	0b b6       	in	r0, 0x3b	; 59
    22a0:	0f 92       	push	r0
    22a2:	2f 93       	push	r18
    22a4:	3f 93       	push	r19
    22a6:	4f 93       	push	r20
    22a8:	5f 93       	push	r21
    22aa:	6f 93       	push	r22
    22ac:	7f 93       	push	r23
    22ae:	8f 93       	push	r24
    22b0:	9f 93       	push	r25
    22b2:	af 93       	push	r26
    22b4:	bf 93       	push	r27
    22b6:	ef 93       	push	r30
    22b8:	ff 93       	push	r31
    22ba:	e0 91 de 21 	lds	r30, 0x21DE
    22be:	f0 91 df 21 	lds	r31, 0x21DF
    22c2:	30 97       	sbiw	r30, 0x00	; 0
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <__vector_25+0x3c>
    22c6:	80 91 d4 22 	lds	r24, 0x22D4
    22ca:	90 91 d5 22 	lds	r25, 0x22D5
    22ce:	19 95       	eicall
    22d0:	ff 91       	pop	r31
    22d2:	ef 91       	pop	r30
    22d4:	bf 91       	pop	r27
    22d6:	af 91       	pop	r26
    22d8:	9f 91       	pop	r25
    22da:	8f 91       	pop	r24
    22dc:	7f 91       	pop	r23
    22de:	6f 91       	pop	r22
    22e0:	5f 91       	pop	r21
    22e2:	4f 91       	pop	r20
    22e4:	3f 91       	pop	r19
    22e6:	2f 91       	pop	r18
    22e8:	0f 90       	pop	r0
    22ea:	0b be       	out	0x3b, r0	; 59
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    22f6:	1f 92       	push	r1
    22f8:	0f 92       	push	r0
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	0f 92       	push	r0
    22fe:	11 24       	eor	r1, r1
    2300:	0b b6       	in	r0, 0x3b	; 59
    2302:	0f 92       	push	r0
    2304:	2f 93       	push	r18
    2306:	3f 93       	push	r19
    2308:	4f 93       	push	r20
    230a:	5f 93       	push	r21
    230c:	6f 93       	push	r22
    230e:	7f 93       	push	r23
    2310:	8f 93       	push	r24
    2312:	9f 93       	push	r25
    2314:	af 93       	push	r26
    2316:	bf 93       	push	r27
    2318:	ef 93       	push	r30
    231a:	ff 93       	push	r31
    231c:	e0 91 e0 21 	lds	r30, 0x21E0
    2320:	f0 91 e1 21 	lds	r31, 0x21E1
    2324:	30 97       	sbiw	r30, 0x00	; 0
    2326:	29 f0       	breq	.+10     	; 0x2332 <__vector_26+0x3c>
    2328:	80 91 d6 22 	lds	r24, 0x22D6
    232c:	90 91 d7 22 	lds	r25, 0x22D7
    2330:	19 95       	eicall
    2332:	ff 91       	pop	r31
    2334:	ef 91       	pop	r30
    2336:	bf 91       	pop	r27
    2338:	af 91       	pop	r26
    233a:	9f 91       	pop	r25
    233c:	8f 91       	pop	r24
    233e:	7f 91       	pop	r23
    2340:	6f 91       	pop	r22
    2342:	5f 91       	pop	r21
    2344:	4f 91       	pop	r20
    2346:	3f 91       	pop	r19
    2348:	2f 91       	pop	r18
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	0b b6       	in	r0, 0x3b	; 59
    2364:	0f 92       	push	r0
    2366:	2f 93       	push	r18
    2368:	3f 93       	push	r19
    236a:	4f 93       	push	r20
    236c:	5f 93       	push	r21
    236e:	6f 93       	push	r22
    2370:	7f 93       	push	r23
    2372:	8f 93       	push	r24
    2374:	9f 93       	push	r25
    2376:	af 93       	push	r26
    2378:	bf 93       	push	r27
    237a:	ef 93       	push	r30
    237c:	ff 93       	push	r31
    237e:	e0 91 e2 21 	lds	r30, 0x21E2
    2382:	f0 91 e3 21 	lds	r31, 0x21E3
    2386:	30 97       	sbiw	r30, 0x00	; 0
    2388:	29 f0       	breq	.+10     	; 0x2394 <__vector_27+0x3c>
    238a:	80 91 d8 22 	lds	r24, 0x22D8
    238e:	90 91 d9 22 	lds	r25, 0x22D9
    2392:	19 95       	eicall
    2394:	ff 91       	pop	r31
    2396:	ef 91       	pop	r30
    2398:	bf 91       	pop	r27
    239a:	af 91       	pop	r26
    239c:	9f 91       	pop	r25
    239e:	8f 91       	pop	r24
    23a0:	7f 91       	pop	r23
    23a2:	6f 91       	pop	r22
    23a4:	5f 91       	pop	r21
    23a6:	4f 91       	pop	r20
    23a8:	3f 91       	pop	r19
    23aa:	2f 91       	pop	r18
    23ac:	0f 90       	pop	r0
    23ae:	0b be       	out	0x3b, r0	; 59
    23b0:	0f 90       	pop	r0
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	0f 90       	pop	r0
    23b6:	1f 90       	pop	r1
    23b8:	18 95       	reti

000023ba <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	0b b6       	in	r0, 0x3b	; 59
    23c6:	0f 92       	push	r0
    23c8:	2f 93       	push	r18
    23ca:	3f 93       	push	r19
    23cc:	4f 93       	push	r20
    23ce:	5f 93       	push	r21
    23d0:	6f 93       	push	r22
    23d2:	7f 93       	push	r23
    23d4:	8f 93       	push	r24
    23d6:	9f 93       	push	r25
    23d8:	af 93       	push	r26
    23da:	bf 93       	push	r27
    23dc:	ef 93       	push	r30
    23de:	ff 93       	push	r31
    23e0:	e0 91 e4 21 	lds	r30, 0x21E4
    23e4:	f0 91 e5 21 	lds	r31, 0x21E5
    23e8:	30 97       	sbiw	r30, 0x00	; 0
    23ea:	29 f0       	breq	.+10     	; 0x23f6 <__vector_28+0x3c>
    23ec:	80 91 da 22 	lds	r24, 0x22DA
    23f0:	90 91 db 22 	lds	r25, 0x22DB
    23f4:	19 95       	eicall
    23f6:	ff 91       	pop	r31
    23f8:	ef 91       	pop	r30
    23fa:	bf 91       	pop	r27
    23fc:	af 91       	pop	r26
    23fe:	9f 91       	pop	r25
    2400:	8f 91       	pop	r24
    2402:	7f 91       	pop	r23
    2404:	6f 91       	pop	r22
    2406:	5f 91       	pop	r21
    2408:	4f 91       	pop	r20
    240a:	3f 91       	pop	r19
    240c:	2f 91       	pop	r18
    240e:	0f 90       	pop	r0
    2410:	0b be       	out	0x3b, r0	; 59
    2412:	0f 90       	pop	r0
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	0f 90       	pop	r0
    2418:	1f 90       	pop	r1
    241a:	18 95       	reti

0000241c <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    241c:	1f 92       	push	r1
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	0b b6       	in	r0, 0x3b	; 59
    2428:	0f 92       	push	r0
    242a:	2f 93       	push	r18
    242c:	3f 93       	push	r19
    242e:	4f 93       	push	r20
    2430:	5f 93       	push	r21
    2432:	6f 93       	push	r22
    2434:	7f 93       	push	r23
    2436:	8f 93       	push	r24
    2438:	9f 93       	push	r25
    243a:	af 93       	push	r26
    243c:	bf 93       	push	r27
    243e:	ef 93       	push	r30
    2440:	ff 93       	push	r31
    2442:	e0 91 e6 21 	lds	r30, 0x21E6
    2446:	f0 91 e7 21 	lds	r31, 0x21E7
    244a:	30 97       	sbiw	r30, 0x00	; 0
    244c:	29 f0       	breq	.+10     	; 0x2458 <__vector_29+0x3c>
    244e:	80 91 dc 22 	lds	r24, 0x22DC
    2452:	90 91 dd 22 	lds	r25, 0x22DD
    2456:	19 95       	eicall
    2458:	ff 91       	pop	r31
    245a:	ef 91       	pop	r30
    245c:	bf 91       	pop	r27
    245e:	af 91       	pop	r26
    2460:	9f 91       	pop	r25
    2462:	8f 91       	pop	r24
    2464:	7f 91       	pop	r23
    2466:	6f 91       	pop	r22
    2468:	5f 91       	pop	r21
    246a:	4f 91       	pop	r20
    246c:	3f 91       	pop	r19
    246e:	2f 91       	pop	r18
    2470:	0f 90       	pop	r0
    2472:	0b be       	out	0x3b, r0	; 59
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	0f 90       	pop	r0
    247a:	1f 90       	pop	r1
    247c:	18 95       	reti

0000247e <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	0b b6       	in	r0, 0x3b	; 59
    248a:	0f 92       	push	r0
    248c:	2f 93       	push	r18
    248e:	3f 93       	push	r19
    2490:	4f 93       	push	r20
    2492:	5f 93       	push	r21
    2494:	6f 93       	push	r22
    2496:	7f 93       	push	r23
    2498:	8f 93       	push	r24
    249a:	9f 93       	push	r25
    249c:	af 93       	push	r26
    249e:	bf 93       	push	r27
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
    24a4:	e0 91 e8 21 	lds	r30, 0x21E8
    24a8:	f0 91 e9 21 	lds	r31, 0x21E9
    24ac:	30 97       	sbiw	r30, 0x00	; 0
    24ae:	29 f0       	breq	.+10     	; 0x24ba <__vector_30+0x3c>
    24b0:	80 91 de 22 	lds	r24, 0x22DE
    24b4:	90 91 df 22 	lds	r25, 0x22DF
    24b8:	19 95       	eicall
    24ba:	ff 91       	pop	r31
    24bc:	ef 91       	pop	r30
    24be:	bf 91       	pop	r27
    24c0:	af 91       	pop	r26
    24c2:	9f 91       	pop	r25
    24c4:	8f 91       	pop	r24
    24c6:	7f 91       	pop	r23
    24c8:	6f 91       	pop	r22
    24ca:	5f 91       	pop	r21
    24cc:	4f 91       	pop	r20
    24ce:	3f 91       	pop	r19
    24d0:	2f 91       	pop	r18
    24d2:	0f 90       	pop	r0
    24d4:	0b be       	out	0x3b, r0	; 59
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	0f 90       	pop	r0
    24dc:	1f 90       	pop	r1
    24de:	18 95       	reti

000024e0 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    24e0:	1f 92       	push	r1
    24e2:	0f 92       	push	r0
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	0f 92       	push	r0
    24e8:	11 24       	eor	r1, r1
    24ea:	0b b6       	in	r0, 0x3b	; 59
    24ec:	0f 92       	push	r0
    24ee:	2f 93       	push	r18
    24f0:	3f 93       	push	r19
    24f2:	4f 93       	push	r20
    24f4:	5f 93       	push	r21
    24f6:	6f 93       	push	r22
    24f8:	7f 93       	push	r23
    24fa:	8f 93       	push	r24
    24fc:	9f 93       	push	r25
    24fe:	af 93       	push	r26
    2500:	bf 93       	push	r27
    2502:	ef 93       	push	r30
    2504:	ff 93       	push	r31
    2506:	e0 91 ea 21 	lds	r30, 0x21EA
    250a:	f0 91 eb 21 	lds	r31, 0x21EB
    250e:	30 97       	sbiw	r30, 0x00	; 0
    2510:	29 f0       	breq	.+10     	; 0x251c <__vector_31+0x3c>
    2512:	80 91 e0 22 	lds	r24, 0x22E0
    2516:	90 91 e1 22 	lds	r25, 0x22E1
    251a:	19 95       	eicall
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0b be       	out	0x3b, r0	; 59
    2538:	0f 90       	pop	r0
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	0f 90       	pop	r0
    253e:	1f 90       	pop	r1
    2540:	18 95       	reti

00002542 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2542:	1f 92       	push	r1
    2544:	0f 92       	push	r0
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	0f 92       	push	r0
    254a:	11 24       	eor	r1, r1
    254c:	0b b6       	in	r0, 0x3b	; 59
    254e:	0f 92       	push	r0
    2550:	2f 93       	push	r18
    2552:	3f 93       	push	r19
    2554:	4f 93       	push	r20
    2556:	5f 93       	push	r21
    2558:	6f 93       	push	r22
    255a:	7f 93       	push	r23
    255c:	8f 93       	push	r24
    255e:	9f 93       	push	r25
    2560:	af 93       	push	r26
    2562:	bf 93       	push	r27
    2564:	ef 93       	push	r30
    2566:	ff 93       	push	r31
    2568:	e0 91 ec 21 	lds	r30, 0x21EC
    256c:	f0 91 ed 21 	lds	r31, 0x21ED
    2570:	30 97       	sbiw	r30, 0x00	; 0
    2572:	29 f0       	breq	.+10     	; 0x257e <__vector_32+0x3c>
    2574:	80 91 e2 22 	lds	r24, 0x22E2
    2578:	90 91 e3 22 	lds	r25, 0x22E3
    257c:	19 95       	eicall
    257e:	ff 91       	pop	r31
    2580:	ef 91       	pop	r30
    2582:	bf 91       	pop	r27
    2584:	af 91       	pop	r26
    2586:	9f 91       	pop	r25
    2588:	8f 91       	pop	r24
    258a:	7f 91       	pop	r23
    258c:	6f 91       	pop	r22
    258e:	5f 91       	pop	r21
    2590:	4f 91       	pop	r20
    2592:	3f 91       	pop	r19
    2594:	2f 91       	pop	r18
    2596:	0f 90       	pop	r0
    2598:	0b be       	out	0x3b, r0	; 59
    259a:	0f 90       	pop	r0
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	0f 90       	pop	r0
    25a0:	1f 90       	pop	r1
    25a2:	18 95       	reti

000025a4 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    25a4:	1f 92       	push	r1
    25a6:	0f 92       	push	r0
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	0f 92       	push	r0
    25ac:	11 24       	eor	r1, r1
    25ae:	0b b6       	in	r0, 0x3b	; 59
    25b0:	0f 92       	push	r0
    25b2:	2f 93       	push	r18
    25b4:	3f 93       	push	r19
    25b6:	4f 93       	push	r20
    25b8:	5f 93       	push	r21
    25ba:	6f 93       	push	r22
    25bc:	7f 93       	push	r23
    25be:	8f 93       	push	r24
    25c0:	9f 93       	push	r25
    25c2:	af 93       	push	r26
    25c4:	bf 93       	push	r27
    25c6:	ef 93       	push	r30
    25c8:	ff 93       	push	r31
    25ca:	e0 91 ee 21 	lds	r30, 0x21EE
    25ce:	f0 91 ef 21 	lds	r31, 0x21EF
    25d2:	30 97       	sbiw	r30, 0x00	; 0
    25d4:	29 f0       	breq	.+10     	; 0x25e0 <__vector_33+0x3c>
    25d6:	80 91 e4 22 	lds	r24, 0x22E4
    25da:	90 91 e5 22 	lds	r25, 0x22E5
    25de:	19 95       	eicall
    25e0:	ff 91       	pop	r31
    25e2:	ef 91       	pop	r30
    25e4:	bf 91       	pop	r27
    25e6:	af 91       	pop	r26
    25e8:	9f 91       	pop	r25
    25ea:	8f 91       	pop	r24
    25ec:	7f 91       	pop	r23
    25ee:	6f 91       	pop	r22
    25f0:	5f 91       	pop	r21
    25f2:	4f 91       	pop	r20
    25f4:	3f 91       	pop	r19
    25f6:	2f 91       	pop	r18
    25f8:	0f 90       	pop	r0
    25fa:	0b be       	out	0x3b, r0	; 59
    25fc:	0f 90       	pop	r0
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	0f 90       	pop	r0
    2602:	1f 90       	pop	r1
    2604:	18 95       	reti

00002606 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2606:	1f 92       	push	r1
    2608:	0f 92       	push	r0
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	0f 92       	push	r0
    260e:	11 24       	eor	r1, r1
    2610:	0b b6       	in	r0, 0x3b	; 59
    2612:	0f 92       	push	r0
    2614:	2f 93       	push	r18
    2616:	3f 93       	push	r19
    2618:	4f 93       	push	r20
    261a:	5f 93       	push	r21
    261c:	6f 93       	push	r22
    261e:	7f 93       	push	r23
    2620:	8f 93       	push	r24
    2622:	9f 93       	push	r25
    2624:	af 93       	push	r26
    2626:	bf 93       	push	r27
    2628:	ef 93       	push	r30
    262a:	ff 93       	push	r31
    262c:	e0 91 f0 21 	lds	r30, 0x21F0
    2630:	f0 91 f1 21 	lds	r31, 0x21F1
    2634:	30 97       	sbiw	r30, 0x00	; 0
    2636:	29 f0       	breq	.+10     	; 0x2642 <__vector_34+0x3c>
    2638:	80 91 e6 22 	lds	r24, 0x22E6
    263c:	90 91 e7 22 	lds	r25, 0x22E7
    2640:	19 95       	eicall
    2642:	ff 91       	pop	r31
    2644:	ef 91       	pop	r30
    2646:	bf 91       	pop	r27
    2648:	af 91       	pop	r26
    264a:	9f 91       	pop	r25
    264c:	8f 91       	pop	r24
    264e:	7f 91       	pop	r23
    2650:	6f 91       	pop	r22
    2652:	5f 91       	pop	r21
    2654:	4f 91       	pop	r20
    2656:	3f 91       	pop	r19
    2658:	2f 91       	pop	r18
    265a:	0f 90       	pop	r0
    265c:	0b be       	out	0x3b, r0	; 59
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti

00002668 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2668:	1f 92       	push	r1
    266a:	0f 92       	push	r0
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	0f 92       	push	r0
    2670:	11 24       	eor	r1, r1
    2672:	0b b6       	in	r0, 0x3b	; 59
    2674:	0f 92       	push	r0
    2676:	2f 93       	push	r18
    2678:	3f 93       	push	r19
    267a:	4f 93       	push	r20
    267c:	5f 93       	push	r21
    267e:	6f 93       	push	r22
    2680:	7f 93       	push	r23
    2682:	8f 93       	push	r24
    2684:	9f 93       	push	r25
    2686:	af 93       	push	r26
    2688:	bf 93       	push	r27
    268a:	ef 93       	push	r30
    268c:	ff 93       	push	r31
    268e:	e0 91 f2 21 	lds	r30, 0x21F2
    2692:	f0 91 f3 21 	lds	r31, 0x21F3
    2696:	30 97       	sbiw	r30, 0x00	; 0
    2698:	29 f0       	breq	.+10     	; 0x26a4 <__vector_35+0x3c>
    269a:	80 91 e8 22 	lds	r24, 0x22E8
    269e:	90 91 e9 22 	lds	r25, 0x22E9
    26a2:	19 95       	eicall
    26a4:	ff 91       	pop	r31
    26a6:	ef 91       	pop	r30
    26a8:	bf 91       	pop	r27
    26aa:	af 91       	pop	r26
    26ac:	9f 91       	pop	r25
    26ae:	8f 91       	pop	r24
    26b0:	7f 91       	pop	r23
    26b2:	6f 91       	pop	r22
    26b4:	5f 91       	pop	r21
    26b6:	4f 91       	pop	r20
    26b8:	3f 91       	pop	r19
    26ba:	2f 91       	pop	r18
    26bc:	0f 90       	pop	r0
    26be:	0b be       	out	0x3b, r0	; 59
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	0f 90       	pop	r0
    26c6:	1f 90       	pop	r1
    26c8:	18 95       	reti

000026ca <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    26ca:	1f 92       	push	r1
    26cc:	0f 92       	push	r0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	0f 92       	push	r0
    26d2:	11 24       	eor	r1, r1
    26d4:	0b b6       	in	r0, 0x3b	; 59
    26d6:	0f 92       	push	r0
    26d8:	2f 93       	push	r18
    26da:	3f 93       	push	r19
    26dc:	4f 93       	push	r20
    26de:	5f 93       	push	r21
    26e0:	6f 93       	push	r22
    26e2:	7f 93       	push	r23
    26e4:	8f 93       	push	r24
    26e6:	9f 93       	push	r25
    26e8:	af 93       	push	r26
    26ea:	bf 93       	push	r27
    26ec:	ef 93       	push	r30
    26ee:	ff 93       	push	r31
    26f0:	e0 91 f4 21 	lds	r30, 0x21F4
    26f4:	f0 91 f5 21 	lds	r31, 0x21F5
    26f8:	30 97       	sbiw	r30, 0x00	; 0
    26fa:	29 f0       	breq	.+10     	; 0x2706 <__vector_36+0x3c>
    26fc:	80 91 ea 22 	lds	r24, 0x22EA
    2700:	90 91 eb 22 	lds	r25, 0x22EB
    2704:	19 95       	eicall
    2706:	ff 91       	pop	r31
    2708:	ef 91       	pop	r30
    270a:	bf 91       	pop	r27
    270c:	af 91       	pop	r26
    270e:	9f 91       	pop	r25
    2710:	8f 91       	pop	r24
    2712:	7f 91       	pop	r23
    2714:	6f 91       	pop	r22
    2716:	5f 91       	pop	r21
    2718:	4f 91       	pop	r20
    271a:	3f 91       	pop	r19
    271c:	2f 91       	pop	r18
    271e:	0f 90       	pop	r0
    2720:	0b be       	out	0x3b, r0	; 59
    2722:	0f 90       	pop	r0
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	0f 90       	pop	r0
    2728:	1f 90       	pop	r1
    272a:	18 95       	reti

0000272c <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    272c:	1f 92       	push	r1
    272e:	0f 92       	push	r0
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	0f 92       	push	r0
    2734:	11 24       	eor	r1, r1
    2736:	0b b6       	in	r0, 0x3b	; 59
    2738:	0f 92       	push	r0
    273a:	2f 93       	push	r18
    273c:	3f 93       	push	r19
    273e:	4f 93       	push	r20
    2740:	5f 93       	push	r21
    2742:	6f 93       	push	r22
    2744:	7f 93       	push	r23
    2746:	8f 93       	push	r24
    2748:	9f 93       	push	r25
    274a:	af 93       	push	r26
    274c:	bf 93       	push	r27
    274e:	ef 93       	push	r30
    2750:	ff 93       	push	r31
    2752:	e0 91 f6 21 	lds	r30, 0x21F6
    2756:	f0 91 f7 21 	lds	r31, 0x21F7
    275a:	30 97       	sbiw	r30, 0x00	; 0
    275c:	29 f0       	breq	.+10     	; 0x2768 <__vector_37+0x3c>
    275e:	80 91 ec 22 	lds	r24, 0x22EC
    2762:	90 91 ed 22 	lds	r25, 0x22ED
    2766:	19 95       	eicall
    2768:	ff 91       	pop	r31
    276a:	ef 91       	pop	r30
    276c:	bf 91       	pop	r27
    276e:	af 91       	pop	r26
    2770:	9f 91       	pop	r25
    2772:	8f 91       	pop	r24
    2774:	7f 91       	pop	r23
    2776:	6f 91       	pop	r22
    2778:	5f 91       	pop	r21
    277a:	4f 91       	pop	r20
    277c:	3f 91       	pop	r19
    277e:	2f 91       	pop	r18
    2780:	0f 90       	pop	r0
    2782:	0b be       	out	0x3b, r0	; 59
    2784:	0f 90       	pop	r0
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	0f 90       	pop	r0
    278a:	1f 90       	pop	r1
    278c:	18 95       	reti

0000278e <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    278e:	1f 92       	push	r1
    2790:	0f 92       	push	r0
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	0f 92       	push	r0
    2796:	11 24       	eor	r1, r1
    2798:	0b b6       	in	r0, 0x3b	; 59
    279a:	0f 92       	push	r0
    279c:	2f 93       	push	r18
    279e:	3f 93       	push	r19
    27a0:	4f 93       	push	r20
    27a2:	5f 93       	push	r21
    27a4:	6f 93       	push	r22
    27a6:	7f 93       	push	r23
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	af 93       	push	r26
    27ae:	bf 93       	push	r27
    27b0:	ef 93       	push	r30
    27b2:	ff 93       	push	r31
    27b4:	e0 91 f8 21 	lds	r30, 0x21F8
    27b8:	f0 91 f9 21 	lds	r31, 0x21F9
    27bc:	30 97       	sbiw	r30, 0x00	; 0
    27be:	29 f0       	breq	.+10     	; 0x27ca <__vector_38+0x3c>
    27c0:	80 91 ee 22 	lds	r24, 0x22EE
    27c4:	90 91 ef 22 	lds	r25, 0x22EF
    27c8:	19 95       	eicall
    27ca:	ff 91       	pop	r31
    27cc:	ef 91       	pop	r30
    27ce:	bf 91       	pop	r27
    27d0:	af 91       	pop	r26
    27d2:	9f 91       	pop	r25
    27d4:	8f 91       	pop	r24
    27d6:	7f 91       	pop	r23
    27d8:	6f 91       	pop	r22
    27da:	5f 91       	pop	r21
    27dc:	4f 91       	pop	r20
    27de:	3f 91       	pop	r19
    27e0:	2f 91       	pop	r18
    27e2:	0f 90       	pop	r0
    27e4:	0b be       	out	0x3b, r0	; 59
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	0f 90       	pop	r0
    27ec:	1f 90       	pop	r1
    27ee:	18 95       	reti

000027f0 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    27f0:	1f 92       	push	r1
    27f2:	0f 92       	push	r0
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	0f 92       	push	r0
    27f8:	11 24       	eor	r1, r1
    27fa:	0b b6       	in	r0, 0x3b	; 59
    27fc:	0f 92       	push	r0
    27fe:	2f 93       	push	r18
    2800:	3f 93       	push	r19
    2802:	4f 93       	push	r20
    2804:	5f 93       	push	r21
    2806:	6f 93       	push	r22
    2808:	7f 93       	push	r23
    280a:	8f 93       	push	r24
    280c:	9f 93       	push	r25
    280e:	af 93       	push	r26
    2810:	bf 93       	push	r27
    2812:	ef 93       	push	r30
    2814:	ff 93       	push	r31
    2816:	e0 91 fa 21 	lds	r30, 0x21FA
    281a:	f0 91 fb 21 	lds	r31, 0x21FB
    281e:	30 97       	sbiw	r30, 0x00	; 0
    2820:	29 f0       	breq	.+10     	; 0x282c <__vector_39+0x3c>
    2822:	80 91 f0 22 	lds	r24, 0x22F0
    2826:	90 91 f1 22 	lds	r25, 0x22F1
    282a:	19 95       	eicall
    282c:	ff 91       	pop	r31
    282e:	ef 91       	pop	r30
    2830:	bf 91       	pop	r27
    2832:	af 91       	pop	r26
    2834:	9f 91       	pop	r25
    2836:	8f 91       	pop	r24
    2838:	7f 91       	pop	r23
    283a:	6f 91       	pop	r22
    283c:	5f 91       	pop	r21
    283e:	4f 91       	pop	r20
    2840:	3f 91       	pop	r19
    2842:	2f 91       	pop	r18
    2844:	0f 90       	pop	r0
    2846:	0b be       	out	0x3b, r0	; 59
    2848:	0f 90       	pop	r0
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	0f 90       	pop	r0
    284e:	1f 90       	pop	r1
    2850:	18 95       	reti

00002852 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2852:	1f 92       	push	r1
    2854:	0f 92       	push	r0
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	0f 92       	push	r0
    285a:	11 24       	eor	r1, r1
    285c:	0b b6       	in	r0, 0x3b	; 59
    285e:	0f 92       	push	r0
    2860:	2f 93       	push	r18
    2862:	3f 93       	push	r19
    2864:	4f 93       	push	r20
    2866:	5f 93       	push	r21
    2868:	6f 93       	push	r22
    286a:	7f 93       	push	r23
    286c:	8f 93       	push	r24
    286e:	9f 93       	push	r25
    2870:	af 93       	push	r26
    2872:	bf 93       	push	r27
    2874:	ef 93       	push	r30
    2876:	ff 93       	push	r31
    2878:	e0 91 fc 21 	lds	r30, 0x21FC
    287c:	f0 91 fd 21 	lds	r31, 0x21FD
    2880:	30 97       	sbiw	r30, 0x00	; 0
    2882:	29 f0       	breq	.+10     	; 0x288e <__vector_40+0x3c>
    2884:	80 91 f2 22 	lds	r24, 0x22F2
    2888:	90 91 f3 22 	lds	r25, 0x22F3
    288c:	19 95       	eicall
    288e:	ff 91       	pop	r31
    2890:	ef 91       	pop	r30
    2892:	bf 91       	pop	r27
    2894:	af 91       	pop	r26
    2896:	9f 91       	pop	r25
    2898:	8f 91       	pop	r24
    289a:	7f 91       	pop	r23
    289c:	6f 91       	pop	r22
    289e:	5f 91       	pop	r21
    28a0:	4f 91       	pop	r20
    28a2:	3f 91       	pop	r19
    28a4:	2f 91       	pop	r18
    28a6:	0f 90       	pop	r0
    28a8:	0b be       	out	0x3b, r0	; 59
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	0f 90       	pop	r0
    28b0:	1f 90       	pop	r1
    28b2:	18 95       	reti

000028b4 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    28b4:	1f 92       	push	r1
    28b6:	0f 92       	push	r0
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	0b b6       	in	r0, 0x3b	; 59
    28c0:	0f 92       	push	r0
    28c2:	2f 93       	push	r18
    28c4:	3f 93       	push	r19
    28c6:	4f 93       	push	r20
    28c8:	5f 93       	push	r21
    28ca:	6f 93       	push	r22
    28cc:	7f 93       	push	r23
    28ce:	8f 93       	push	r24
    28d0:	9f 93       	push	r25
    28d2:	af 93       	push	r26
    28d4:	bf 93       	push	r27
    28d6:	ef 93       	push	r30
    28d8:	ff 93       	push	r31
    28da:	e0 91 fe 21 	lds	r30, 0x21FE
    28de:	f0 91 ff 21 	lds	r31, 0x21FF
    28e2:	30 97       	sbiw	r30, 0x00	; 0
    28e4:	29 f0       	breq	.+10     	; 0x28f0 <__vector_41+0x3c>
    28e6:	80 91 f4 22 	lds	r24, 0x22F4
    28ea:	90 91 f5 22 	lds	r25, 0x22F5
    28ee:	19 95       	eicall
    28f0:	ff 91       	pop	r31
    28f2:	ef 91       	pop	r30
    28f4:	bf 91       	pop	r27
    28f6:	af 91       	pop	r26
    28f8:	9f 91       	pop	r25
    28fa:	8f 91       	pop	r24
    28fc:	7f 91       	pop	r23
    28fe:	6f 91       	pop	r22
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0b be       	out	0x3b, r0	; 59
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	0f 90       	pop	r0
    2912:	1f 90       	pop	r1
    2914:	18 95       	reti

00002916 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    2916:	1f 92       	push	r1
    2918:	0f 92       	push	r0
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	0f 92       	push	r0
    291e:	11 24       	eor	r1, r1
    2920:	0b b6       	in	r0, 0x3b	; 59
    2922:	0f 92       	push	r0
    2924:	2f 93       	push	r18
    2926:	3f 93       	push	r19
    2928:	4f 93       	push	r20
    292a:	5f 93       	push	r21
    292c:	6f 93       	push	r22
    292e:	7f 93       	push	r23
    2930:	8f 93       	push	r24
    2932:	9f 93       	push	r25
    2934:	af 93       	push	r26
    2936:	bf 93       	push	r27
    2938:	ef 93       	push	r30
    293a:	ff 93       	push	r31
    293c:	e0 91 00 22 	lds	r30, 0x2200
    2940:	f0 91 01 22 	lds	r31, 0x2201
    2944:	30 97       	sbiw	r30, 0x00	; 0
    2946:	29 f0       	breq	.+10     	; 0x2952 <__vector_42+0x3c>
    2948:	80 91 f6 22 	lds	r24, 0x22F6
    294c:	90 91 f7 22 	lds	r25, 0x22F7
    2950:	19 95       	eicall
    2952:	ff 91       	pop	r31
    2954:	ef 91       	pop	r30
    2956:	bf 91       	pop	r27
    2958:	af 91       	pop	r26
    295a:	9f 91       	pop	r25
    295c:	8f 91       	pop	r24
    295e:	7f 91       	pop	r23
    2960:	6f 91       	pop	r22
    2962:	5f 91       	pop	r21
    2964:	4f 91       	pop	r20
    2966:	3f 91       	pop	r19
    2968:	2f 91       	pop	r18
    296a:	0f 90       	pop	r0
    296c:	0b be       	out	0x3b, r0	; 59
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	0f 90       	pop	r0
    2974:	1f 90       	pop	r1
    2976:	18 95       	reti

00002978 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    2978:	1f 92       	push	r1
    297a:	0f 92       	push	r0
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	0f 92       	push	r0
    2980:	11 24       	eor	r1, r1
    2982:	0b b6       	in	r0, 0x3b	; 59
    2984:	0f 92       	push	r0
    2986:	2f 93       	push	r18
    2988:	3f 93       	push	r19
    298a:	4f 93       	push	r20
    298c:	5f 93       	push	r21
    298e:	6f 93       	push	r22
    2990:	7f 93       	push	r23
    2992:	8f 93       	push	r24
    2994:	9f 93       	push	r25
    2996:	af 93       	push	r26
    2998:	bf 93       	push	r27
    299a:	ef 93       	push	r30
    299c:	ff 93       	push	r31
    299e:	e0 91 02 22 	lds	r30, 0x2202
    29a2:	f0 91 03 22 	lds	r31, 0x2203
    29a6:	30 97       	sbiw	r30, 0x00	; 0
    29a8:	29 f0       	breq	.+10     	; 0x29b4 <__vector_43+0x3c>
    29aa:	80 91 f8 22 	lds	r24, 0x22F8
    29ae:	90 91 f9 22 	lds	r25, 0x22F9
    29b2:	19 95       	eicall
    29b4:	ff 91       	pop	r31
    29b6:	ef 91       	pop	r30
    29b8:	bf 91       	pop	r27
    29ba:	af 91       	pop	r26
    29bc:	9f 91       	pop	r25
    29be:	8f 91       	pop	r24
    29c0:	7f 91       	pop	r23
    29c2:	6f 91       	pop	r22
    29c4:	5f 91       	pop	r21
    29c6:	4f 91       	pop	r20
    29c8:	3f 91       	pop	r19
    29ca:	2f 91       	pop	r18
    29cc:	0f 90       	pop	r0
    29ce:	0b be       	out	0x3b, r0	; 59
    29d0:	0f 90       	pop	r0
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	0f 90       	pop	r0
    29d6:	1f 90       	pop	r1
    29d8:	18 95       	reti

000029da <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    29da:	1f 92       	push	r1
    29dc:	0f 92       	push	r0
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	0f 92       	push	r0
    29e2:	11 24       	eor	r1, r1
    29e4:	0b b6       	in	r0, 0x3b	; 59
    29e6:	0f 92       	push	r0
    29e8:	2f 93       	push	r18
    29ea:	3f 93       	push	r19
    29ec:	4f 93       	push	r20
    29ee:	5f 93       	push	r21
    29f0:	6f 93       	push	r22
    29f2:	7f 93       	push	r23
    29f4:	8f 93       	push	r24
    29f6:	9f 93       	push	r25
    29f8:	af 93       	push	r26
    29fa:	bf 93       	push	r27
    29fc:	ef 93       	push	r30
    29fe:	ff 93       	push	r31
    2a00:	e0 91 04 22 	lds	r30, 0x2204
    2a04:	f0 91 05 22 	lds	r31, 0x2205
    2a08:	30 97       	sbiw	r30, 0x00	; 0
    2a0a:	29 f0       	breq	.+10     	; 0x2a16 <__vector_44+0x3c>
    2a0c:	80 91 fa 22 	lds	r24, 0x22FA
    2a10:	90 91 fb 22 	lds	r25, 0x22FB
    2a14:	19 95       	eicall
    2a16:	ff 91       	pop	r31
    2a18:	ef 91       	pop	r30
    2a1a:	bf 91       	pop	r27
    2a1c:	af 91       	pop	r26
    2a1e:	9f 91       	pop	r25
    2a20:	8f 91       	pop	r24
    2a22:	7f 91       	pop	r23
    2a24:	6f 91       	pop	r22
    2a26:	5f 91       	pop	r21
    2a28:	4f 91       	pop	r20
    2a2a:	3f 91       	pop	r19
    2a2c:	2f 91       	pop	r18
    2a2e:	0f 90       	pop	r0
    2a30:	0b be       	out	0x3b, r0	; 59
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    2a3c:	1f 92       	push	r1
    2a3e:	0f 92       	push	r0
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	0f 92       	push	r0
    2a44:	11 24       	eor	r1, r1
    2a46:	0b b6       	in	r0, 0x3b	; 59
    2a48:	0f 92       	push	r0
    2a4a:	2f 93       	push	r18
    2a4c:	3f 93       	push	r19
    2a4e:	4f 93       	push	r20
    2a50:	5f 93       	push	r21
    2a52:	6f 93       	push	r22
    2a54:	7f 93       	push	r23
    2a56:	8f 93       	push	r24
    2a58:	9f 93       	push	r25
    2a5a:	af 93       	push	r26
    2a5c:	bf 93       	push	r27
    2a5e:	ef 93       	push	r30
    2a60:	ff 93       	push	r31
    2a62:	e0 91 06 22 	lds	r30, 0x2206
    2a66:	f0 91 07 22 	lds	r31, 0x2207
    2a6a:	30 97       	sbiw	r30, 0x00	; 0
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <__vector_45+0x3c>
    2a6e:	80 91 fc 22 	lds	r24, 0x22FC
    2a72:	90 91 fd 22 	lds	r25, 0x22FD
    2a76:	19 95       	eicall
    2a78:	ff 91       	pop	r31
    2a7a:	ef 91       	pop	r30
    2a7c:	bf 91       	pop	r27
    2a7e:	af 91       	pop	r26
    2a80:	9f 91       	pop	r25
    2a82:	8f 91       	pop	r24
    2a84:	7f 91       	pop	r23
    2a86:	6f 91       	pop	r22
    2a88:	5f 91       	pop	r21
    2a8a:	4f 91       	pop	r20
    2a8c:	3f 91       	pop	r19
    2a8e:	2f 91       	pop	r18
    2a90:	0f 90       	pop	r0
    2a92:	0b be       	out	0x3b, r0	; 59
    2a94:	0f 90       	pop	r0
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	0f 90       	pop	r0
    2a9a:	1f 90       	pop	r1
    2a9c:	18 95       	reti

00002a9e <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    2a9e:	1f 92       	push	r1
    2aa0:	0f 92       	push	r0
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	0f 92       	push	r0
    2aa6:	11 24       	eor	r1, r1
    2aa8:	0b b6       	in	r0, 0x3b	; 59
    2aaa:	0f 92       	push	r0
    2aac:	2f 93       	push	r18
    2aae:	3f 93       	push	r19
    2ab0:	4f 93       	push	r20
    2ab2:	5f 93       	push	r21
    2ab4:	6f 93       	push	r22
    2ab6:	7f 93       	push	r23
    2ab8:	8f 93       	push	r24
    2aba:	9f 93       	push	r25
    2abc:	af 93       	push	r26
    2abe:	bf 93       	push	r27
    2ac0:	ef 93       	push	r30
    2ac2:	ff 93       	push	r31
    2ac4:	e0 91 08 22 	lds	r30, 0x2208
    2ac8:	f0 91 09 22 	lds	r31, 0x2209
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	29 f0       	breq	.+10     	; 0x2ada <__vector_46+0x3c>
    2ad0:	80 91 fe 22 	lds	r24, 0x22FE
    2ad4:	90 91 ff 22 	lds	r25, 0x22FF
    2ad8:	19 95       	eicall
    2ada:	ff 91       	pop	r31
    2adc:	ef 91       	pop	r30
    2ade:	bf 91       	pop	r27
    2ae0:	af 91       	pop	r26
    2ae2:	9f 91       	pop	r25
    2ae4:	8f 91       	pop	r24
    2ae6:	7f 91       	pop	r23
    2ae8:	6f 91       	pop	r22
    2aea:	5f 91       	pop	r21
    2aec:	4f 91       	pop	r20
    2aee:	3f 91       	pop	r19
    2af0:	2f 91       	pop	r18
    2af2:	0f 90       	pop	r0
    2af4:	0b be       	out	0x3b, r0	; 59
    2af6:	0f 90       	pop	r0
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	0f 90       	pop	r0
    2afc:	1f 90       	pop	r1
    2afe:	18 95       	reti

00002b00 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2b00:	1f 92       	push	r1
    2b02:	0f 92       	push	r0
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	0f 92       	push	r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	0b b6       	in	r0, 0x3b	; 59
    2b0c:	0f 92       	push	r0
    2b0e:	2f 93       	push	r18
    2b10:	3f 93       	push	r19
    2b12:	4f 93       	push	r20
    2b14:	5f 93       	push	r21
    2b16:	6f 93       	push	r22
    2b18:	7f 93       	push	r23
    2b1a:	8f 93       	push	r24
    2b1c:	9f 93       	push	r25
    2b1e:	af 93       	push	r26
    2b20:	bf 93       	push	r27
    2b22:	ef 93       	push	r30
    2b24:	ff 93       	push	r31
    2b26:	e0 91 0a 22 	lds	r30, 0x220A
    2b2a:	f0 91 0b 22 	lds	r31, 0x220B
    2b2e:	30 97       	sbiw	r30, 0x00	; 0
    2b30:	29 f0       	breq	.+10     	; 0x2b3c <__vector_47+0x3c>
    2b32:	80 91 00 23 	lds	r24, 0x2300
    2b36:	90 91 01 23 	lds	r25, 0x2301
    2b3a:	19 95       	eicall
    2b3c:	ff 91       	pop	r31
    2b3e:	ef 91       	pop	r30
    2b40:	bf 91       	pop	r27
    2b42:	af 91       	pop	r26
    2b44:	9f 91       	pop	r25
    2b46:	8f 91       	pop	r24
    2b48:	7f 91       	pop	r23
    2b4a:	6f 91       	pop	r22
    2b4c:	5f 91       	pop	r21
    2b4e:	4f 91       	pop	r20
    2b50:	3f 91       	pop	r19
    2b52:	2f 91       	pop	r18
    2b54:	0f 90       	pop	r0
    2b56:	0b be       	out	0x3b, r0	; 59
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2b62:	1f 92       	push	r1
    2b64:	0f 92       	push	r0
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	0f 92       	push	r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	0b b6       	in	r0, 0x3b	; 59
    2b6e:	0f 92       	push	r0
    2b70:	2f 93       	push	r18
    2b72:	3f 93       	push	r19
    2b74:	4f 93       	push	r20
    2b76:	5f 93       	push	r21
    2b78:	6f 93       	push	r22
    2b7a:	7f 93       	push	r23
    2b7c:	8f 93       	push	r24
    2b7e:	9f 93       	push	r25
    2b80:	af 93       	push	r26
    2b82:	bf 93       	push	r27
    2b84:	ef 93       	push	r30
    2b86:	ff 93       	push	r31
    2b88:	e0 91 0c 22 	lds	r30, 0x220C
    2b8c:	f0 91 0d 22 	lds	r31, 0x220D
    2b90:	30 97       	sbiw	r30, 0x00	; 0
    2b92:	29 f0       	breq	.+10     	; 0x2b9e <__vector_48+0x3c>
    2b94:	80 91 02 23 	lds	r24, 0x2302
    2b98:	90 91 03 23 	lds	r25, 0x2303
    2b9c:	19 95       	eicall
    2b9e:	ff 91       	pop	r31
    2ba0:	ef 91       	pop	r30
    2ba2:	bf 91       	pop	r27
    2ba4:	af 91       	pop	r26
    2ba6:	9f 91       	pop	r25
    2ba8:	8f 91       	pop	r24
    2baa:	7f 91       	pop	r23
    2bac:	6f 91       	pop	r22
    2bae:	5f 91       	pop	r21
    2bb0:	4f 91       	pop	r20
    2bb2:	3f 91       	pop	r19
    2bb4:	2f 91       	pop	r18
    2bb6:	0f 90       	pop	r0
    2bb8:	0b be       	out	0x3b, r0	; 59
    2bba:	0f 90       	pop	r0
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	0f 90       	pop	r0
    2bc0:	1f 90       	pop	r1
    2bc2:	18 95       	reti

00002bc4 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2bc4:	1f 92       	push	r1
    2bc6:	0f 92       	push	r0
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	0f 92       	push	r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	0b b6       	in	r0, 0x3b	; 59
    2bd0:	0f 92       	push	r0
    2bd2:	2f 93       	push	r18
    2bd4:	3f 93       	push	r19
    2bd6:	4f 93       	push	r20
    2bd8:	5f 93       	push	r21
    2bda:	6f 93       	push	r22
    2bdc:	7f 93       	push	r23
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	af 93       	push	r26
    2be4:	bf 93       	push	r27
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
    2bea:	e0 91 0e 22 	lds	r30, 0x220E
    2bee:	f0 91 0f 22 	lds	r31, 0x220F
    2bf2:	30 97       	sbiw	r30, 0x00	; 0
    2bf4:	29 f0       	breq	.+10     	; 0x2c00 <__vector_49+0x3c>
    2bf6:	80 91 04 23 	lds	r24, 0x2304
    2bfa:	90 91 05 23 	lds	r25, 0x2305
    2bfe:	19 95       	eicall
    2c00:	ff 91       	pop	r31
    2c02:	ef 91       	pop	r30
    2c04:	bf 91       	pop	r27
    2c06:	af 91       	pop	r26
    2c08:	9f 91       	pop	r25
    2c0a:	8f 91       	pop	r24
    2c0c:	7f 91       	pop	r23
    2c0e:	6f 91       	pop	r22
    2c10:	5f 91       	pop	r21
    2c12:	4f 91       	pop	r20
    2c14:	3f 91       	pop	r19
    2c16:	2f 91       	pop	r18
    2c18:	0f 90       	pop	r0
    2c1a:	0b be       	out	0x3b, r0	; 59
    2c1c:	0f 90       	pop	r0
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	0f 90       	pop	r0
    2c22:	1f 90       	pop	r1
    2c24:	18 95       	reti

00002c26 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2c26:	1f 92       	push	r1
    2c28:	0f 92       	push	r0
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	0f 92       	push	r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	0b b6       	in	r0, 0x3b	; 59
    2c32:	0f 92       	push	r0
    2c34:	2f 93       	push	r18
    2c36:	3f 93       	push	r19
    2c38:	4f 93       	push	r20
    2c3a:	5f 93       	push	r21
    2c3c:	6f 93       	push	r22
    2c3e:	7f 93       	push	r23
    2c40:	8f 93       	push	r24
    2c42:	9f 93       	push	r25
    2c44:	af 93       	push	r26
    2c46:	bf 93       	push	r27
    2c48:	ef 93       	push	r30
    2c4a:	ff 93       	push	r31
    2c4c:	e0 91 10 22 	lds	r30, 0x2210
    2c50:	f0 91 11 22 	lds	r31, 0x2211
    2c54:	30 97       	sbiw	r30, 0x00	; 0
    2c56:	29 f0       	breq	.+10     	; 0x2c62 <__vector_50+0x3c>
    2c58:	80 91 06 23 	lds	r24, 0x2306
    2c5c:	90 91 07 23 	lds	r25, 0x2307
    2c60:	19 95       	eicall
    2c62:	ff 91       	pop	r31
    2c64:	ef 91       	pop	r30
    2c66:	bf 91       	pop	r27
    2c68:	af 91       	pop	r26
    2c6a:	9f 91       	pop	r25
    2c6c:	8f 91       	pop	r24
    2c6e:	7f 91       	pop	r23
    2c70:	6f 91       	pop	r22
    2c72:	5f 91       	pop	r21
    2c74:	4f 91       	pop	r20
    2c76:	3f 91       	pop	r19
    2c78:	2f 91       	pop	r18
    2c7a:	0f 90       	pop	r0
    2c7c:	0b be       	out	0x3b, r0	; 59
    2c7e:	0f 90       	pop	r0
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	0f 90       	pop	r0
    2c84:	1f 90       	pop	r1
    2c86:	18 95       	reti

00002c88 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2c88:	1f 92       	push	r1
    2c8a:	0f 92       	push	r0
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	0f 92       	push	r0
    2c90:	11 24       	eor	r1, r1
    2c92:	0b b6       	in	r0, 0x3b	; 59
    2c94:	0f 92       	push	r0
    2c96:	2f 93       	push	r18
    2c98:	3f 93       	push	r19
    2c9a:	4f 93       	push	r20
    2c9c:	5f 93       	push	r21
    2c9e:	6f 93       	push	r22
    2ca0:	7f 93       	push	r23
    2ca2:	8f 93       	push	r24
    2ca4:	9f 93       	push	r25
    2ca6:	af 93       	push	r26
    2ca8:	bf 93       	push	r27
    2caa:	ef 93       	push	r30
    2cac:	ff 93       	push	r31
    2cae:	e0 91 12 22 	lds	r30, 0x2212
    2cb2:	f0 91 13 22 	lds	r31, 0x2213
    2cb6:	30 97       	sbiw	r30, 0x00	; 0
    2cb8:	29 f0       	breq	.+10     	; 0x2cc4 <__vector_51+0x3c>
    2cba:	80 91 08 23 	lds	r24, 0x2308
    2cbe:	90 91 09 23 	lds	r25, 0x2309
    2cc2:	19 95       	eicall
    2cc4:	ff 91       	pop	r31
    2cc6:	ef 91       	pop	r30
    2cc8:	bf 91       	pop	r27
    2cca:	af 91       	pop	r26
    2ccc:	9f 91       	pop	r25
    2cce:	8f 91       	pop	r24
    2cd0:	7f 91       	pop	r23
    2cd2:	6f 91       	pop	r22
    2cd4:	5f 91       	pop	r21
    2cd6:	4f 91       	pop	r20
    2cd8:	3f 91       	pop	r19
    2cda:	2f 91       	pop	r18
    2cdc:	0f 90       	pop	r0
    2cde:	0b be       	out	0x3b, r0	; 59
    2ce0:	0f 90       	pop	r0
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	0f 90       	pop	r0
    2ce6:	1f 90       	pop	r1
    2ce8:	18 95       	reti

00002cea <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2cea:	1f 92       	push	r1
    2cec:	0f 92       	push	r0
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	0f 92       	push	r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	0b b6       	in	r0, 0x3b	; 59
    2cf6:	0f 92       	push	r0
    2cf8:	2f 93       	push	r18
    2cfa:	3f 93       	push	r19
    2cfc:	4f 93       	push	r20
    2cfe:	5f 93       	push	r21
    2d00:	6f 93       	push	r22
    2d02:	7f 93       	push	r23
    2d04:	8f 93       	push	r24
    2d06:	9f 93       	push	r25
    2d08:	af 93       	push	r26
    2d0a:	bf 93       	push	r27
    2d0c:	ef 93       	push	r30
    2d0e:	ff 93       	push	r31
    2d10:	e0 91 14 22 	lds	r30, 0x2214
    2d14:	f0 91 15 22 	lds	r31, 0x2215
    2d18:	30 97       	sbiw	r30, 0x00	; 0
    2d1a:	29 f0       	breq	.+10     	; 0x2d26 <__vector_52+0x3c>
    2d1c:	80 91 0a 23 	lds	r24, 0x230A
    2d20:	90 91 0b 23 	lds	r25, 0x230B
    2d24:	19 95       	eicall
    2d26:	ff 91       	pop	r31
    2d28:	ef 91       	pop	r30
    2d2a:	bf 91       	pop	r27
    2d2c:	af 91       	pop	r26
    2d2e:	9f 91       	pop	r25
    2d30:	8f 91       	pop	r24
    2d32:	7f 91       	pop	r23
    2d34:	6f 91       	pop	r22
    2d36:	5f 91       	pop	r21
    2d38:	4f 91       	pop	r20
    2d3a:	3f 91       	pop	r19
    2d3c:	2f 91       	pop	r18
    2d3e:	0f 90       	pop	r0
    2d40:	0b be       	out	0x3b, r0	; 59
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	0f 90       	pop	r0
    2d48:	1f 90       	pop	r1
    2d4a:	18 95       	reti

00002d4c <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2d4c:	1f 92       	push	r1
    2d4e:	0f 92       	push	r0
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	0f 92       	push	r0
    2d54:	11 24       	eor	r1, r1
    2d56:	0b b6       	in	r0, 0x3b	; 59
    2d58:	0f 92       	push	r0
    2d5a:	2f 93       	push	r18
    2d5c:	3f 93       	push	r19
    2d5e:	4f 93       	push	r20
    2d60:	5f 93       	push	r21
    2d62:	6f 93       	push	r22
    2d64:	7f 93       	push	r23
    2d66:	8f 93       	push	r24
    2d68:	9f 93       	push	r25
    2d6a:	af 93       	push	r26
    2d6c:	bf 93       	push	r27
    2d6e:	ef 93       	push	r30
    2d70:	ff 93       	push	r31
    2d72:	e0 91 16 22 	lds	r30, 0x2216
    2d76:	f0 91 17 22 	lds	r31, 0x2217
    2d7a:	30 97       	sbiw	r30, 0x00	; 0
    2d7c:	29 f0       	breq	.+10     	; 0x2d88 <__vector_53+0x3c>
    2d7e:	80 91 0c 23 	lds	r24, 0x230C
    2d82:	90 91 0d 23 	lds	r25, 0x230D
    2d86:	19 95       	eicall
    2d88:	ff 91       	pop	r31
    2d8a:	ef 91       	pop	r30
    2d8c:	bf 91       	pop	r27
    2d8e:	af 91       	pop	r26
    2d90:	9f 91       	pop	r25
    2d92:	8f 91       	pop	r24
    2d94:	7f 91       	pop	r23
    2d96:	6f 91       	pop	r22
    2d98:	5f 91       	pop	r21
    2d9a:	4f 91       	pop	r20
    2d9c:	3f 91       	pop	r19
    2d9e:	2f 91       	pop	r18
    2da0:	0f 90       	pop	r0
    2da2:	0b be       	out	0x3b, r0	; 59
    2da4:	0f 90       	pop	r0
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	0f 90       	pop	r0
    2daa:	1f 90       	pop	r1
    2dac:	18 95       	reti

00002dae <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2dae:	1f 92       	push	r1
    2db0:	0f 92       	push	r0
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	0f 92       	push	r0
    2db6:	11 24       	eor	r1, r1
    2db8:	0b b6       	in	r0, 0x3b	; 59
    2dba:	0f 92       	push	r0
    2dbc:	2f 93       	push	r18
    2dbe:	3f 93       	push	r19
    2dc0:	4f 93       	push	r20
    2dc2:	5f 93       	push	r21
    2dc4:	6f 93       	push	r22
    2dc6:	7f 93       	push	r23
    2dc8:	8f 93       	push	r24
    2dca:	9f 93       	push	r25
    2dcc:	af 93       	push	r26
    2dce:	bf 93       	push	r27
    2dd0:	ef 93       	push	r30
    2dd2:	ff 93       	push	r31
    2dd4:	e0 91 18 22 	lds	r30, 0x2218
    2dd8:	f0 91 19 22 	lds	r31, 0x2219
    2ddc:	30 97       	sbiw	r30, 0x00	; 0
    2dde:	29 f0       	breq	.+10     	; 0x2dea <__vector_54+0x3c>
    2de0:	80 91 0e 23 	lds	r24, 0x230E
    2de4:	90 91 0f 23 	lds	r25, 0x230F
    2de8:	19 95       	eicall
    2dea:	ff 91       	pop	r31
    2dec:	ef 91       	pop	r30
    2dee:	bf 91       	pop	r27
    2df0:	af 91       	pop	r26
    2df2:	9f 91       	pop	r25
    2df4:	8f 91       	pop	r24
    2df6:	7f 91       	pop	r23
    2df8:	6f 91       	pop	r22
    2dfa:	5f 91       	pop	r21
    2dfc:	4f 91       	pop	r20
    2dfe:	3f 91       	pop	r19
    2e00:	2f 91       	pop	r18
    2e02:	0f 90       	pop	r0
    2e04:	0b be       	out	0x3b, r0	; 59
    2e06:	0f 90       	pop	r0
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	0f 90       	pop	r0
    2e0c:	1f 90       	pop	r1
    2e0e:	18 95       	reti

00002e10 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2e10:	1f 92       	push	r1
    2e12:	0f 92       	push	r0
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	0f 92       	push	r0
    2e18:	11 24       	eor	r1, r1
    2e1a:	0b b6       	in	r0, 0x3b	; 59
    2e1c:	0f 92       	push	r0
    2e1e:	2f 93       	push	r18
    2e20:	3f 93       	push	r19
    2e22:	4f 93       	push	r20
    2e24:	5f 93       	push	r21
    2e26:	6f 93       	push	r22
    2e28:	7f 93       	push	r23
    2e2a:	8f 93       	push	r24
    2e2c:	9f 93       	push	r25
    2e2e:	af 93       	push	r26
    2e30:	bf 93       	push	r27
    2e32:	ef 93       	push	r30
    2e34:	ff 93       	push	r31
    2e36:	e0 91 1a 22 	lds	r30, 0x221A
    2e3a:	f0 91 1b 22 	lds	r31, 0x221B
    2e3e:	30 97       	sbiw	r30, 0x00	; 0
    2e40:	29 f0       	breq	.+10     	; 0x2e4c <__vector_55+0x3c>
    2e42:	80 91 10 23 	lds	r24, 0x2310
    2e46:	90 91 11 23 	lds	r25, 0x2311
    2e4a:	19 95       	eicall
    2e4c:	ff 91       	pop	r31
    2e4e:	ef 91       	pop	r30
    2e50:	bf 91       	pop	r27
    2e52:	af 91       	pop	r26
    2e54:	9f 91       	pop	r25
    2e56:	8f 91       	pop	r24
    2e58:	7f 91       	pop	r23
    2e5a:	6f 91       	pop	r22
    2e5c:	5f 91       	pop	r21
    2e5e:	4f 91       	pop	r20
    2e60:	3f 91       	pop	r19
    2e62:	2f 91       	pop	r18
    2e64:	0f 90       	pop	r0
    2e66:	0b be       	out	0x3b, r0	; 59
    2e68:	0f 90       	pop	r0
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	0f 90       	pop	r0
    2e6e:	1f 90       	pop	r1
    2e70:	18 95       	reti

00002e72 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2e72:	1f 92       	push	r1
    2e74:	0f 92       	push	r0
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	0f 92       	push	r0
    2e7a:	11 24       	eor	r1, r1
    2e7c:	0b b6       	in	r0, 0x3b	; 59
    2e7e:	0f 92       	push	r0
    2e80:	2f 93       	push	r18
    2e82:	3f 93       	push	r19
    2e84:	4f 93       	push	r20
    2e86:	5f 93       	push	r21
    2e88:	6f 93       	push	r22
    2e8a:	7f 93       	push	r23
    2e8c:	8f 93       	push	r24
    2e8e:	9f 93       	push	r25
    2e90:	af 93       	push	r26
    2e92:	bf 93       	push	r27
    2e94:	ef 93       	push	r30
    2e96:	ff 93       	push	r31
    2e98:	e0 91 1c 22 	lds	r30, 0x221C
    2e9c:	f0 91 1d 22 	lds	r31, 0x221D
    2ea0:	30 97       	sbiw	r30, 0x00	; 0
    2ea2:	29 f0       	breq	.+10     	; 0x2eae <__vector_56+0x3c>
    2ea4:	80 91 12 23 	lds	r24, 0x2312
    2ea8:	90 91 13 23 	lds	r25, 0x2313
    2eac:	19 95       	eicall
    2eae:	ff 91       	pop	r31
    2eb0:	ef 91       	pop	r30
    2eb2:	bf 91       	pop	r27
    2eb4:	af 91       	pop	r26
    2eb6:	9f 91       	pop	r25
    2eb8:	8f 91       	pop	r24
    2eba:	7f 91       	pop	r23
    2ebc:	6f 91       	pop	r22
    2ebe:	5f 91       	pop	r21
    2ec0:	4f 91       	pop	r20
    2ec2:	3f 91       	pop	r19
    2ec4:	2f 91       	pop	r18
    2ec6:	0f 90       	pop	r0
    2ec8:	0b be       	out	0x3b, r0	; 59
    2eca:	0f 90       	pop	r0
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	0f 90       	pop	r0
    2ed0:	1f 90       	pop	r1
    2ed2:	18 95       	reti

00002ed4 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2ed4:	1f 92       	push	r1
    2ed6:	0f 92       	push	r0
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	0f 92       	push	r0
    2edc:	11 24       	eor	r1, r1
    2ede:	0b b6       	in	r0, 0x3b	; 59
    2ee0:	0f 92       	push	r0
    2ee2:	2f 93       	push	r18
    2ee4:	3f 93       	push	r19
    2ee6:	4f 93       	push	r20
    2ee8:	5f 93       	push	r21
    2eea:	6f 93       	push	r22
    2eec:	7f 93       	push	r23
    2eee:	8f 93       	push	r24
    2ef0:	9f 93       	push	r25
    2ef2:	af 93       	push	r26
    2ef4:	bf 93       	push	r27
    2ef6:	ef 93       	push	r30
    2ef8:	ff 93       	push	r31
    2efa:	e0 91 1e 22 	lds	r30, 0x221E
    2efe:	f0 91 1f 22 	lds	r31, 0x221F
    2f02:	30 97       	sbiw	r30, 0x00	; 0
    2f04:	29 f0       	breq	.+10     	; 0x2f10 <__vector_57+0x3c>
    2f06:	80 91 14 23 	lds	r24, 0x2314
    2f0a:	90 91 15 23 	lds	r25, 0x2315
    2f0e:	19 95       	eicall
    2f10:	ff 91       	pop	r31
    2f12:	ef 91       	pop	r30
    2f14:	bf 91       	pop	r27
    2f16:	af 91       	pop	r26
    2f18:	9f 91       	pop	r25
    2f1a:	8f 91       	pop	r24
    2f1c:	7f 91       	pop	r23
    2f1e:	6f 91       	pop	r22
    2f20:	5f 91       	pop	r21
    2f22:	4f 91       	pop	r20
    2f24:	3f 91       	pop	r19
    2f26:	2f 91       	pop	r18
    2f28:	0f 90       	pop	r0
    2f2a:	0b be       	out	0x3b, r0	; 59
    2f2c:	0f 90       	pop	r0
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	0f 90       	pop	r0
    2f32:	1f 90       	pop	r1
    2f34:	18 95       	reti

00002f36 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2f36:	1f 92       	push	r1
    2f38:	0f 92       	push	r0
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	0f 92       	push	r0
    2f3e:	11 24       	eor	r1, r1
    2f40:	0b b6       	in	r0, 0x3b	; 59
    2f42:	0f 92       	push	r0
    2f44:	2f 93       	push	r18
    2f46:	3f 93       	push	r19
    2f48:	4f 93       	push	r20
    2f4a:	5f 93       	push	r21
    2f4c:	6f 93       	push	r22
    2f4e:	7f 93       	push	r23
    2f50:	8f 93       	push	r24
    2f52:	9f 93       	push	r25
    2f54:	af 93       	push	r26
    2f56:	bf 93       	push	r27
    2f58:	ef 93       	push	r30
    2f5a:	ff 93       	push	r31
    2f5c:	e0 91 20 22 	lds	r30, 0x2220
    2f60:	f0 91 21 22 	lds	r31, 0x2221
    2f64:	30 97       	sbiw	r30, 0x00	; 0
    2f66:	29 f0       	breq	.+10     	; 0x2f72 <__vector_58+0x3c>
    2f68:	80 91 16 23 	lds	r24, 0x2316
    2f6c:	90 91 17 23 	lds	r25, 0x2317
    2f70:	19 95       	eicall
    2f72:	ff 91       	pop	r31
    2f74:	ef 91       	pop	r30
    2f76:	bf 91       	pop	r27
    2f78:	af 91       	pop	r26
    2f7a:	9f 91       	pop	r25
    2f7c:	8f 91       	pop	r24
    2f7e:	7f 91       	pop	r23
    2f80:	6f 91       	pop	r22
    2f82:	5f 91       	pop	r21
    2f84:	4f 91       	pop	r20
    2f86:	3f 91       	pop	r19
    2f88:	2f 91       	pop	r18
    2f8a:	0f 90       	pop	r0
    2f8c:	0b be       	out	0x3b, r0	; 59
    2f8e:	0f 90       	pop	r0
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	0f 90       	pop	r0
    2f94:	1f 90       	pop	r1
    2f96:	18 95       	reti

00002f98 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2f98:	1f 92       	push	r1
    2f9a:	0f 92       	push	r0
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	0f 92       	push	r0
    2fa0:	11 24       	eor	r1, r1
    2fa2:	0b b6       	in	r0, 0x3b	; 59
    2fa4:	0f 92       	push	r0
    2fa6:	2f 93       	push	r18
    2fa8:	3f 93       	push	r19
    2faa:	4f 93       	push	r20
    2fac:	5f 93       	push	r21
    2fae:	6f 93       	push	r22
    2fb0:	7f 93       	push	r23
    2fb2:	8f 93       	push	r24
    2fb4:	9f 93       	push	r25
    2fb6:	af 93       	push	r26
    2fb8:	bf 93       	push	r27
    2fba:	ef 93       	push	r30
    2fbc:	ff 93       	push	r31
    2fbe:	e0 91 22 22 	lds	r30, 0x2222
    2fc2:	f0 91 23 22 	lds	r31, 0x2223
    2fc6:	30 97       	sbiw	r30, 0x00	; 0
    2fc8:	29 f0       	breq	.+10     	; 0x2fd4 <__vector_59+0x3c>
    2fca:	80 91 18 23 	lds	r24, 0x2318
    2fce:	90 91 19 23 	lds	r25, 0x2319
    2fd2:	19 95       	eicall
    2fd4:	ff 91       	pop	r31
    2fd6:	ef 91       	pop	r30
    2fd8:	bf 91       	pop	r27
    2fda:	af 91       	pop	r26
    2fdc:	9f 91       	pop	r25
    2fde:	8f 91       	pop	r24
    2fe0:	7f 91       	pop	r23
    2fe2:	6f 91       	pop	r22
    2fe4:	5f 91       	pop	r21
    2fe6:	4f 91       	pop	r20
    2fe8:	3f 91       	pop	r19
    2fea:	2f 91       	pop	r18
    2fec:	0f 90       	pop	r0
    2fee:	0b be       	out	0x3b, r0	; 59
    2ff0:	0f 90       	pop	r0
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	0f 90       	pop	r0
    2ff6:	1f 90       	pop	r1
    2ff8:	18 95       	reti

00002ffa <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2ffa:	1f 92       	push	r1
    2ffc:	0f 92       	push	r0
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	0f 92       	push	r0
    3002:	11 24       	eor	r1, r1
    3004:	0b b6       	in	r0, 0x3b	; 59
    3006:	0f 92       	push	r0
    3008:	2f 93       	push	r18
    300a:	3f 93       	push	r19
    300c:	4f 93       	push	r20
    300e:	5f 93       	push	r21
    3010:	6f 93       	push	r22
    3012:	7f 93       	push	r23
    3014:	8f 93       	push	r24
    3016:	9f 93       	push	r25
    3018:	af 93       	push	r26
    301a:	bf 93       	push	r27
    301c:	ef 93       	push	r30
    301e:	ff 93       	push	r31
    3020:	e0 91 24 22 	lds	r30, 0x2224
    3024:	f0 91 25 22 	lds	r31, 0x2225
    3028:	30 97       	sbiw	r30, 0x00	; 0
    302a:	29 f0       	breq	.+10     	; 0x3036 <__vector_60+0x3c>
    302c:	80 91 1a 23 	lds	r24, 0x231A
    3030:	90 91 1b 23 	lds	r25, 0x231B
    3034:	19 95       	eicall
    3036:	ff 91       	pop	r31
    3038:	ef 91       	pop	r30
    303a:	bf 91       	pop	r27
    303c:	af 91       	pop	r26
    303e:	9f 91       	pop	r25
    3040:	8f 91       	pop	r24
    3042:	7f 91       	pop	r23
    3044:	6f 91       	pop	r22
    3046:	5f 91       	pop	r21
    3048:	4f 91       	pop	r20
    304a:	3f 91       	pop	r19
    304c:	2f 91       	pop	r18
    304e:	0f 90       	pop	r0
    3050:	0b be       	out	0x3b, r0	; 59
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f 90       	pop	r0
    3058:	1f 90       	pop	r1
    305a:	18 95       	reti

0000305c <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    305c:	1f 92       	push	r1
    305e:	0f 92       	push	r0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	0b b6       	in	r0, 0x3b	; 59
    3068:	0f 92       	push	r0
    306a:	2f 93       	push	r18
    306c:	3f 93       	push	r19
    306e:	4f 93       	push	r20
    3070:	5f 93       	push	r21
    3072:	6f 93       	push	r22
    3074:	7f 93       	push	r23
    3076:	8f 93       	push	r24
    3078:	9f 93       	push	r25
    307a:	af 93       	push	r26
    307c:	bf 93       	push	r27
    307e:	ef 93       	push	r30
    3080:	ff 93       	push	r31
    3082:	e0 91 26 22 	lds	r30, 0x2226
    3086:	f0 91 27 22 	lds	r31, 0x2227
    308a:	30 97       	sbiw	r30, 0x00	; 0
    308c:	29 f0       	breq	.+10     	; 0x3098 <__vector_61+0x3c>
    308e:	80 91 1c 23 	lds	r24, 0x231C
    3092:	90 91 1d 23 	lds	r25, 0x231D
    3096:	19 95       	eicall
    3098:	ff 91       	pop	r31
    309a:	ef 91       	pop	r30
    309c:	bf 91       	pop	r27
    309e:	af 91       	pop	r26
    30a0:	9f 91       	pop	r25
    30a2:	8f 91       	pop	r24
    30a4:	7f 91       	pop	r23
    30a6:	6f 91       	pop	r22
    30a8:	5f 91       	pop	r21
    30aa:	4f 91       	pop	r20
    30ac:	3f 91       	pop	r19
    30ae:	2f 91       	pop	r18
    30b0:	0f 90       	pop	r0
    30b2:	0b be       	out	0x3b, r0	; 59
    30b4:	0f 90       	pop	r0
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	0f 90       	pop	r0
    30ba:	1f 90       	pop	r1
    30bc:	18 95       	reti

000030be <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    30be:	1f 92       	push	r1
    30c0:	0f 92       	push	r0
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	0f 92       	push	r0
    30c6:	11 24       	eor	r1, r1
    30c8:	0b b6       	in	r0, 0x3b	; 59
    30ca:	0f 92       	push	r0
    30cc:	2f 93       	push	r18
    30ce:	3f 93       	push	r19
    30d0:	4f 93       	push	r20
    30d2:	5f 93       	push	r21
    30d4:	6f 93       	push	r22
    30d6:	7f 93       	push	r23
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	af 93       	push	r26
    30de:	bf 93       	push	r27
    30e0:	ef 93       	push	r30
    30e2:	ff 93       	push	r31
    30e4:	e0 91 28 22 	lds	r30, 0x2228
    30e8:	f0 91 29 22 	lds	r31, 0x2229
    30ec:	30 97       	sbiw	r30, 0x00	; 0
    30ee:	29 f0       	breq	.+10     	; 0x30fa <__vector_62+0x3c>
    30f0:	80 91 1e 23 	lds	r24, 0x231E
    30f4:	90 91 1f 23 	lds	r25, 0x231F
    30f8:	19 95       	eicall
    30fa:	ff 91       	pop	r31
    30fc:	ef 91       	pop	r30
    30fe:	bf 91       	pop	r27
    3100:	af 91       	pop	r26
    3102:	9f 91       	pop	r25
    3104:	8f 91       	pop	r24
    3106:	7f 91       	pop	r23
    3108:	6f 91       	pop	r22
    310a:	5f 91       	pop	r21
    310c:	4f 91       	pop	r20
    310e:	3f 91       	pop	r19
    3110:	2f 91       	pop	r18
    3112:	0f 90       	pop	r0
    3114:	0b be       	out	0x3b, r0	; 59
    3116:	0f 90       	pop	r0
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	0f 90       	pop	r0
    311c:	1f 90       	pop	r1
    311e:	18 95       	reti

00003120 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3120:	1f 92       	push	r1
    3122:	0f 92       	push	r0
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	0f 92       	push	r0
    3128:	11 24       	eor	r1, r1
    312a:	0b b6       	in	r0, 0x3b	; 59
    312c:	0f 92       	push	r0
    312e:	2f 93       	push	r18
    3130:	3f 93       	push	r19
    3132:	4f 93       	push	r20
    3134:	5f 93       	push	r21
    3136:	6f 93       	push	r22
    3138:	7f 93       	push	r23
    313a:	8f 93       	push	r24
    313c:	9f 93       	push	r25
    313e:	af 93       	push	r26
    3140:	bf 93       	push	r27
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
    3146:	e0 91 2a 22 	lds	r30, 0x222A
    314a:	f0 91 2b 22 	lds	r31, 0x222B
    314e:	30 97       	sbiw	r30, 0x00	; 0
    3150:	29 f0       	breq	.+10     	; 0x315c <__vector_63+0x3c>
    3152:	80 91 20 23 	lds	r24, 0x2320
    3156:	90 91 21 23 	lds	r25, 0x2321
    315a:	19 95       	eicall
    315c:	ff 91       	pop	r31
    315e:	ef 91       	pop	r30
    3160:	bf 91       	pop	r27
    3162:	af 91       	pop	r26
    3164:	9f 91       	pop	r25
    3166:	8f 91       	pop	r24
    3168:	7f 91       	pop	r23
    316a:	6f 91       	pop	r22
    316c:	5f 91       	pop	r21
    316e:	4f 91       	pop	r20
    3170:	3f 91       	pop	r19
    3172:	2f 91       	pop	r18
    3174:	0f 90       	pop	r0
    3176:	0b be       	out	0x3b, r0	; 59
    3178:	0f 90       	pop	r0
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	0f 90       	pop	r0
    317e:	1f 90       	pop	r1
    3180:	18 95       	reti

00003182 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3182:	1f 92       	push	r1
    3184:	0f 92       	push	r0
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	0f 92       	push	r0
    318a:	11 24       	eor	r1, r1
    318c:	0b b6       	in	r0, 0x3b	; 59
    318e:	0f 92       	push	r0
    3190:	2f 93       	push	r18
    3192:	3f 93       	push	r19
    3194:	4f 93       	push	r20
    3196:	5f 93       	push	r21
    3198:	6f 93       	push	r22
    319a:	7f 93       	push	r23
    319c:	8f 93       	push	r24
    319e:	9f 93       	push	r25
    31a0:	af 93       	push	r26
    31a2:	bf 93       	push	r27
    31a4:	ef 93       	push	r30
    31a6:	ff 93       	push	r31
    31a8:	e0 91 2c 22 	lds	r30, 0x222C
    31ac:	f0 91 2d 22 	lds	r31, 0x222D
    31b0:	30 97       	sbiw	r30, 0x00	; 0
    31b2:	29 f0       	breq	.+10     	; 0x31be <__vector_64+0x3c>
    31b4:	80 91 22 23 	lds	r24, 0x2322
    31b8:	90 91 23 23 	lds	r25, 0x2323
    31bc:	19 95       	eicall
    31be:	ff 91       	pop	r31
    31c0:	ef 91       	pop	r30
    31c2:	bf 91       	pop	r27
    31c4:	af 91       	pop	r26
    31c6:	9f 91       	pop	r25
    31c8:	8f 91       	pop	r24
    31ca:	7f 91       	pop	r23
    31cc:	6f 91       	pop	r22
    31ce:	5f 91       	pop	r21
    31d0:	4f 91       	pop	r20
    31d2:	3f 91       	pop	r19
    31d4:	2f 91       	pop	r18
    31d6:	0f 90       	pop	r0
    31d8:	0b be       	out	0x3b, r0	; 59
    31da:	0f 90       	pop	r0
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	0f 90       	pop	r0
    31e0:	1f 90       	pop	r1
    31e2:	18 95       	reti

000031e4 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    31e4:	1f 92       	push	r1
    31e6:	0f 92       	push	r0
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	0f 92       	push	r0
    31ec:	11 24       	eor	r1, r1
    31ee:	0b b6       	in	r0, 0x3b	; 59
    31f0:	0f 92       	push	r0
    31f2:	2f 93       	push	r18
    31f4:	3f 93       	push	r19
    31f6:	4f 93       	push	r20
    31f8:	5f 93       	push	r21
    31fa:	6f 93       	push	r22
    31fc:	7f 93       	push	r23
    31fe:	8f 93       	push	r24
    3200:	9f 93       	push	r25
    3202:	af 93       	push	r26
    3204:	bf 93       	push	r27
    3206:	ef 93       	push	r30
    3208:	ff 93       	push	r31
    320a:	e0 91 2e 22 	lds	r30, 0x222E
    320e:	f0 91 2f 22 	lds	r31, 0x222F
    3212:	30 97       	sbiw	r30, 0x00	; 0
    3214:	29 f0       	breq	.+10     	; 0x3220 <__vector_65+0x3c>
    3216:	80 91 24 23 	lds	r24, 0x2324
    321a:	90 91 25 23 	lds	r25, 0x2325
    321e:	19 95       	eicall
    3220:	ff 91       	pop	r31
    3222:	ef 91       	pop	r30
    3224:	bf 91       	pop	r27
    3226:	af 91       	pop	r26
    3228:	9f 91       	pop	r25
    322a:	8f 91       	pop	r24
    322c:	7f 91       	pop	r23
    322e:	6f 91       	pop	r22
    3230:	5f 91       	pop	r21
    3232:	4f 91       	pop	r20
    3234:	3f 91       	pop	r19
    3236:	2f 91       	pop	r18
    3238:	0f 90       	pop	r0
    323a:	0b be       	out	0x3b, r0	; 59
    323c:	0f 90       	pop	r0
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	0f 90       	pop	r0
    3242:	1f 90       	pop	r1
    3244:	18 95       	reti

00003246 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3246:	1f 92       	push	r1
    3248:	0f 92       	push	r0
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	0f 92       	push	r0
    324e:	11 24       	eor	r1, r1
    3250:	0b b6       	in	r0, 0x3b	; 59
    3252:	0f 92       	push	r0
    3254:	2f 93       	push	r18
    3256:	3f 93       	push	r19
    3258:	4f 93       	push	r20
    325a:	5f 93       	push	r21
    325c:	6f 93       	push	r22
    325e:	7f 93       	push	r23
    3260:	8f 93       	push	r24
    3262:	9f 93       	push	r25
    3264:	af 93       	push	r26
    3266:	bf 93       	push	r27
    3268:	ef 93       	push	r30
    326a:	ff 93       	push	r31
    326c:	e0 91 30 22 	lds	r30, 0x2230
    3270:	f0 91 31 22 	lds	r31, 0x2231
    3274:	30 97       	sbiw	r30, 0x00	; 0
    3276:	29 f0       	breq	.+10     	; 0x3282 <__vector_66+0x3c>
    3278:	80 91 26 23 	lds	r24, 0x2326
    327c:	90 91 27 23 	lds	r25, 0x2327
    3280:	19 95       	eicall
    3282:	ff 91       	pop	r31
    3284:	ef 91       	pop	r30
    3286:	bf 91       	pop	r27
    3288:	af 91       	pop	r26
    328a:	9f 91       	pop	r25
    328c:	8f 91       	pop	r24
    328e:	7f 91       	pop	r23
    3290:	6f 91       	pop	r22
    3292:	5f 91       	pop	r21
    3294:	4f 91       	pop	r20
    3296:	3f 91       	pop	r19
    3298:	2f 91       	pop	r18
    329a:	0f 90       	pop	r0
    329c:	0b be       	out	0x3b, r0	; 59
    329e:	0f 90       	pop	r0
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	0f 90       	pop	r0
    32a4:	1f 90       	pop	r1
    32a6:	18 95       	reti

000032a8 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    32a8:	1f 92       	push	r1
    32aa:	0f 92       	push	r0
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	0f 92       	push	r0
    32b0:	11 24       	eor	r1, r1
    32b2:	0b b6       	in	r0, 0x3b	; 59
    32b4:	0f 92       	push	r0
    32b6:	2f 93       	push	r18
    32b8:	3f 93       	push	r19
    32ba:	4f 93       	push	r20
    32bc:	5f 93       	push	r21
    32be:	6f 93       	push	r22
    32c0:	7f 93       	push	r23
    32c2:	8f 93       	push	r24
    32c4:	9f 93       	push	r25
    32c6:	af 93       	push	r26
    32c8:	bf 93       	push	r27
    32ca:	ef 93       	push	r30
    32cc:	ff 93       	push	r31
    32ce:	e0 91 32 22 	lds	r30, 0x2232
    32d2:	f0 91 33 22 	lds	r31, 0x2233
    32d6:	30 97       	sbiw	r30, 0x00	; 0
    32d8:	29 f0       	breq	.+10     	; 0x32e4 <__vector_67+0x3c>
    32da:	80 91 28 23 	lds	r24, 0x2328
    32de:	90 91 29 23 	lds	r25, 0x2329
    32e2:	19 95       	eicall
    32e4:	ff 91       	pop	r31
    32e6:	ef 91       	pop	r30
    32e8:	bf 91       	pop	r27
    32ea:	af 91       	pop	r26
    32ec:	9f 91       	pop	r25
    32ee:	8f 91       	pop	r24
    32f0:	7f 91       	pop	r23
    32f2:	6f 91       	pop	r22
    32f4:	5f 91       	pop	r21
    32f6:	4f 91       	pop	r20
    32f8:	3f 91       	pop	r19
    32fa:	2f 91       	pop	r18
    32fc:	0f 90       	pop	r0
    32fe:	0b be       	out	0x3b, r0	; 59
    3300:	0f 90       	pop	r0
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	0f 90       	pop	r0
    3306:	1f 90       	pop	r1
    3308:	18 95       	reti

0000330a <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    330a:	1f 92       	push	r1
    330c:	0f 92       	push	r0
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	0f 92       	push	r0
    3312:	11 24       	eor	r1, r1
    3314:	0b b6       	in	r0, 0x3b	; 59
    3316:	0f 92       	push	r0
    3318:	2f 93       	push	r18
    331a:	3f 93       	push	r19
    331c:	4f 93       	push	r20
    331e:	5f 93       	push	r21
    3320:	6f 93       	push	r22
    3322:	7f 93       	push	r23
    3324:	8f 93       	push	r24
    3326:	9f 93       	push	r25
    3328:	af 93       	push	r26
    332a:	bf 93       	push	r27
    332c:	ef 93       	push	r30
    332e:	ff 93       	push	r31
    3330:	e0 91 34 22 	lds	r30, 0x2234
    3334:	f0 91 35 22 	lds	r31, 0x2235
    3338:	30 97       	sbiw	r30, 0x00	; 0
    333a:	29 f0       	breq	.+10     	; 0x3346 <__vector_68+0x3c>
    333c:	80 91 2a 23 	lds	r24, 0x232A
    3340:	90 91 2b 23 	lds	r25, 0x232B
    3344:	19 95       	eicall
    3346:	ff 91       	pop	r31
    3348:	ef 91       	pop	r30
    334a:	bf 91       	pop	r27
    334c:	af 91       	pop	r26
    334e:	9f 91       	pop	r25
    3350:	8f 91       	pop	r24
    3352:	7f 91       	pop	r23
    3354:	6f 91       	pop	r22
    3356:	5f 91       	pop	r21
    3358:	4f 91       	pop	r20
    335a:	3f 91       	pop	r19
    335c:	2f 91       	pop	r18
    335e:	0f 90       	pop	r0
    3360:	0b be       	out	0x3b, r0	; 59
    3362:	0f 90       	pop	r0
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	0f 90       	pop	r0
    3368:	1f 90       	pop	r1
    336a:	18 95       	reti

0000336c <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    336c:	1f 92       	push	r1
    336e:	0f 92       	push	r0
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	0f 92       	push	r0
    3374:	11 24       	eor	r1, r1
    3376:	0b b6       	in	r0, 0x3b	; 59
    3378:	0f 92       	push	r0
    337a:	2f 93       	push	r18
    337c:	3f 93       	push	r19
    337e:	4f 93       	push	r20
    3380:	5f 93       	push	r21
    3382:	6f 93       	push	r22
    3384:	7f 93       	push	r23
    3386:	8f 93       	push	r24
    3388:	9f 93       	push	r25
    338a:	af 93       	push	r26
    338c:	bf 93       	push	r27
    338e:	ef 93       	push	r30
    3390:	ff 93       	push	r31
    3392:	e0 91 36 22 	lds	r30, 0x2236
    3396:	f0 91 37 22 	lds	r31, 0x2237
    339a:	30 97       	sbiw	r30, 0x00	; 0
    339c:	29 f0       	breq	.+10     	; 0x33a8 <__vector_69+0x3c>
    339e:	80 91 2c 23 	lds	r24, 0x232C
    33a2:	90 91 2d 23 	lds	r25, 0x232D
    33a6:	19 95       	eicall
    33a8:	ff 91       	pop	r31
    33aa:	ef 91       	pop	r30
    33ac:	bf 91       	pop	r27
    33ae:	af 91       	pop	r26
    33b0:	9f 91       	pop	r25
    33b2:	8f 91       	pop	r24
    33b4:	7f 91       	pop	r23
    33b6:	6f 91       	pop	r22
    33b8:	5f 91       	pop	r21
    33ba:	4f 91       	pop	r20
    33bc:	3f 91       	pop	r19
    33be:	2f 91       	pop	r18
    33c0:	0f 90       	pop	r0
    33c2:	0b be       	out	0x3b, r0	; 59
    33c4:	0f 90       	pop	r0
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	0f 90       	pop	r0
    33ca:	1f 90       	pop	r1
    33cc:	18 95       	reti

000033ce <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    33ce:	1f 92       	push	r1
    33d0:	0f 92       	push	r0
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	0f 92       	push	r0
    33d6:	11 24       	eor	r1, r1
    33d8:	0b b6       	in	r0, 0x3b	; 59
    33da:	0f 92       	push	r0
    33dc:	2f 93       	push	r18
    33de:	3f 93       	push	r19
    33e0:	4f 93       	push	r20
    33e2:	5f 93       	push	r21
    33e4:	6f 93       	push	r22
    33e6:	7f 93       	push	r23
    33e8:	8f 93       	push	r24
    33ea:	9f 93       	push	r25
    33ec:	af 93       	push	r26
    33ee:	bf 93       	push	r27
    33f0:	ef 93       	push	r30
    33f2:	ff 93       	push	r31
    33f4:	e0 91 38 22 	lds	r30, 0x2238
    33f8:	f0 91 39 22 	lds	r31, 0x2239
    33fc:	30 97       	sbiw	r30, 0x00	; 0
    33fe:	29 f0       	breq	.+10     	; 0x340a <__vector_70+0x3c>
    3400:	80 91 2e 23 	lds	r24, 0x232E
    3404:	90 91 2f 23 	lds	r25, 0x232F
    3408:	19 95       	eicall
    340a:	ff 91       	pop	r31
    340c:	ef 91       	pop	r30
    340e:	bf 91       	pop	r27
    3410:	af 91       	pop	r26
    3412:	9f 91       	pop	r25
    3414:	8f 91       	pop	r24
    3416:	7f 91       	pop	r23
    3418:	6f 91       	pop	r22
    341a:	5f 91       	pop	r21
    341c:	4f 91       	pop	r20
    341e:	3f 91       	pop	r19
    3420:	2f 91       	pop	r18
    3422:	0f 90       	pop	r0
    3424:	0b be       	out	0x3b, r0	; 59
    3426:	0f 90       	pop	r0
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	0f 90       	pop	r0
    342c:	1f 90       	pop	r1
    342e:	18 95       	reti

00003430 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3430:	1f 92       	push	r1
    3432:	0f 92       	push	r0
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	0f 92       	push	r0
    3438:	11 24       	eor	r1, r1
    343a:	0b b6       	in	r0, 0x3b	; 59
    343c:	0f 92       	push	r0
    343e:	2f 93       	push	r18
    3440:	3f 93       	push	r19
    3442:	4f 93       	push	r20
    3444:	5f 93       	push	r21
    3446:	6f 93       	push	r22
    3448:	7f 93       	push	r23
    344a:	8f 93       	push	r24
    344c:	9f 93       	push	r25
    344e:	af 93       	push	r26
    3450:	bf 93       	push	r27
    3452:	ef 93       	push	r30
    3454:	ff 93       	push	r31
    3456:	e0 91 3a 22 	lds	r30, 0x223A
    345a:	f0 91 3b 22 	lds	r31, 0x223B
    345e:	30 97       	sbiw	r30, 0x00	; 0
    3460:	29 f0       	breq	.+10     	; 0x346c <__vector_71+0x3c>
    3462:	80 91 30 23 	lds	r24, 0x2330
    3466:	90 91 31 23 	lds	r25, 0x2331
    346a:	19 95       	eicall
    346c:	ff 91       	pop	r31
    346e:	ef 91       	pop	r30
    3470:	bf 91       	pop	r27
    3472:	af 91       	pop	r26
    3474:	9f 91       	pop	r25
    3476:	8f 91       	pop	r24
    3478:	7f 91       	pop	r23
    347a:	6f 91       	pop	r22
    347c:	5f 91       	pop	r21
    347e:	4f 91       	pop	r20
    3480:	3f 91       	pop	r19
    3482:	2f 91       	pop	r18
    3484:	0f 90       	pop	r0
    3486:	0b be       	out	0x3b, r0	; 59
    3488:	0f 90       	pop	r0
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	0f 90       	pop	r0
    348e:	1f 90       	pop	r1
    3490:	18 95       	reti

00003492 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3492:	1f 92       	push	r1
    3494:	0f 92       	push	r0
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	0f 92       	push	r0
    349a:	11 24       	eor	r1, r1
    349c:	0b b6       	in	r0, 0x3b	; 59
    349e:	0f 92       	push	r0
    34a0:	2f 93       	push	r18
    34a2:	3f 93       	push	r19
    34a4:	4f 93       	push	r20
    34a6:	5f 93       	push	r21
    34a8:	6f 93       	push	r22
    34aa:	7f 93       	push	r23
    34ac:	8f 93       	push	r24
    34ae:	9f 93       	push	r25
    34b0:	af 93       	push	r26
    34b2:	bf 93       	push	r27
    34b4:	ef 93       	push	r30
    34b6:	ff 93       	push	r31
    34b8:	e0 91 3c 22 	lds	r30, 0x223C
    34bc:	f0 91 3d 22 	lds	r31, 0x223D
    34c0:	30 97       	sbiw	r30, 0x00	; 0
    34c2:	29 f0       	breq	.+10     	; 0x34ce <__vector_72+0x3c>
    34c4:	80 91 32 23 	lds	r24, 0x2332
    34c8:	90 91 33 23 	lds	r25, 0x2333
    34cc:	19 95       	eicall
    34ce:	ff 91       	pop	r31
    34d0:	ef 91       	pop	r30
    34d2:	bf 91       	pop	r27
    34d4:	af 91       	pop	r26
    34d6:	9f 91       	pop	r25
    34d8:	8f 91       	pop	r24
    34da:	7f 91       	pop	r23
    34dc:	6f 91       	pop	r22
    34de:	5f 91       	pop	r21
    34e0:	4f 91       	pop	r20
    34e2:	3f 91       	pop	r19
    34e4:	2f 91       	pop	r18
    34e6:	0f 90       	pop	r0
    34e8:	0b be       	out	0x3b, r0	; 59
    34ea:	0f 90       	pop	r0
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	0f 90       	pop	r0
    34f0:	1f 90       	pop	r1
    34f2:	18 95       	reti

000034f4 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    34f4:	1f 92       	push	r1
    34f6:	0f 92       	push	r0
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	0f 92       	push	r0
    34fc:	11 24       	eor	r1, r1
    34fe:	0b b6       	in	r0, 0x3b	; 59
    3500:	0f 92       	push	r0
    3502:	2f 93       	push	r18
    3504:	3f 93       	push	r19
    3506:	4f 93       	push	r20
    3508:	5f 93       	push	r21
    350a:	6f 93       	push	r22
    350c:	7f 93       	push	r23
    350e:	8f 93       	push	r24
    3510:	9f 93       	push	r25
    3512:	af 93       	push	r26
    3514:	bf 93       	push	r27
    3516:	ef 93       	push	r30
    3518:	ff 93       	push	r31
    351a:	e0 91 3e 22 	lds	r30, 0x223E
    351e:	f0 91 3f 22 	lds	r31, 0x223F
    3522:	30 97       	sbiw	r30, 0x00	; 0
    3524:	29 f0       	breq	.+10     	; 0x3530 <__vector_73+0x3c>
    3526:	80 91 34 23 	lds	r24, 0x2334
    352a:	90 91 35 23 	lds	r25, 0x2335
    352e:	19 95       	eicall
    3530:	ff 91       	pop	r31
    3532:	ef 91       	pop	r30
    3534:	bf 91       	pop	r27
    3536:	af 91       	pop	r26
    3538:	9f 91       	pop	r25
    353a:	8f 91       	pop	r24
    353c:	7f 91       	pop	r23
    353e:	6f 91       	pop	r22
    3540:	5f 91       	pop	r21
    3542:	4f 91       	pop	r20
    3544:	3f 91       	pop	r19
    3546:	2f 91       	pop	r18
    3548:	0f 90       	pop	r0
    354a:	0b be       	out	0x3b, r0	; 59
    354c:	0f 90       	pop	r0
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	0f 90       	pop	r0
    3552:	1f 90       	pop	r1
    3554:	18 95       	reti

00003556 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3556:	1f 92       	push	r1
    3558:	0f 92       	push	r0
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	0f 92       	push	r0
    355e:	11 24       	eor	r1, r1
    3560:	0b b6       	in	r0, 0x3b	; 59
    3562:	0f 92       	push	r0
    3564:	2f 93       	push	r18
    3566:	3f 93       	push	r19
    3568:	4f 93       	push	r20
    356a:	5f 93       	push	r21
    356c:	6f 93       	push	r22
    356e:	7f 93       	push	r23
    3570:	8f 93       	push	r24
    3572:	9f 93       	push	r25
    3574:	af 93       	push	r26
    3576:	bf 93       	push	r27
    3578:	ef 93       	push	r30
    357a:	ff 93       	push	r31
    357c:	e0 91 40 22 	lds	r30, 0x2240
    3580:	f0 91 41 22 	lds	r31, 0x2241
    3584:	30 97       	sbiw	r30, 0x00	; 0
    3586:	29 f0       	breq	.+10     	; 0x3592 <__vector_74+0x3c>
    3588:	80 91 36 23 	lds	r24, 0x2336
    358c:	90 91 37 23 	lds	r25, 0x2337
    3590:	19 95       	eicall
    3592:	ff 91       	pop	r31
    3594:	ef 91       	pop	r30
    3596:	bf 91       	pop	r27
    3598:	af 91       	pop	r26
    359a:	9f 91       	pop	r25
    359c:	8f 91       	pop	r24
    359e:	7f 91       	pop	r23
    35a0:	6f 91       	pop	r22
    35a2:	5f 91       	pop	r21
    35a4:	4f 91       	pop	r20
    35a6:	3f 91       	pop	r19
    35a8:	2f 91       	pop	r18
    35aa:	0f 90       	pop	r0
    35ac:	0b be       	out	0x3b, r0	; 59
    35ae:	0f 90       	pop	r0
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	0f 90       	pop	r0
    35b4:	1f 90       	pop	r1
    35b6:	18 95       	reti

000035b8 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    35b8:	1f 92       	push	r1
    35ba:	0f 92       	push	r0
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	0f 92       	push	r0
    35c0:	11 24       	eor	r1, r1
    35c2:	0b b6       	in	r0, 0x3b	; 59
    35c4:	0f 92       	push	r0
    35c6:	2f 93       	push	r18
    35c8:	3f 93       	push	r19
    35ca:	4f 93       	push	r20
    35cc:	5f 93       	push	r21
    35ce:	6f 93       	push	r22
    35d0:	7f 93       	push	r23
    35d2:	8f 93       	push	r24
    35d4:	9f 93       	push	r25
    35d6:	af 93       	push	r26
    35d8:	bf 93       	push	r27
    35da:	ef 93       	push	r30
    35dc:	ff 93       	push	r31
    35de:	e0 91 46 22 	lds	r30, 0x2246
    35e2:	f0 91 47 22 	lds	r31, 0x2247
    35e6:	30 97       	sbiw	r30, 0x00	; 0
    35e8:	29 f0       	breq	.+10     	; 0x35f4 <__vector_77+0x3c>
    35ea:	80 91 3c 23 	lds	r24, 0x233C
    35ee:	90 91 3d 23 	lds	r25, 0x233D
    35f2:	19 95       	eicall
    35f4:	ff 91       	pop	r31
    35f6:	ef 91       	pop	r30
    35f8:	bf 91       	pop	r27
    35fa:	af 91       	pop	r26
    35fc:	9f 91       	pop	r25
    35fe:	8f 91       	pop	r24
    3600:	7f 91       	pop	r23
    3602:	6f 91       	pop	r22
    3604:	5f 91       	pop	r21
    3606:	4f 91       	pop	r20
    3608:	3f 91       	pop	r19
    360a:	2f 91       	pop	r18
    360c:	0f 90       	pop	r0
    360e:	0b be       	out	0x3b, r0	; 59
    3610:	0f 90       	pop	r0
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	0f 90       	pop	r0
    3616:	1f 90       	pop	r1
    3618:	18 95       	reti

0000361a <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    361a:	1f 92       	push	r1
    361c:	0f 92       	push	r0
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	0f 92       	push	r0
    3622:	11 24       	eor	r1, r1
    3624:	0b b6       	in	r0, 0x3b	; 59
    3626:	0f 92       	push	r0
    3628:	2f 93       	push	r18
    362a:	3f 93       	push	r19
    362c:	4f 93       	push	r20
    362e:	5f 93       	push	r21
    3630:	6f 93       	push	r22
    3632:	7f 93       	push	r23
    3634:	8f 93       	push	r24
    3636:	9f 93       	push	r25
    3638:	af 93       	push	r26
    363a:	bf 93       	push	r27
    363c:	ef 93       	push	r30
    363e:	ff 93       	push	r31
    3640:	e0 91 48 22 	lds	r30, 0x2248
    3644:	f0 91 49 22 	lds	r31, 0x2249
    3648:	30 97       	sbiw	r30, 0x00	; 0
    364a:	29 f0       	breq	.+10     	; 0x3656 <__vector_78+0x3c>
    364c:	80 91 3e 23 	lds	r24, 0x233E
    3650:	90 91 3f 23 	lds	r25, 0x233F
    3654:	19 95       	eicall
    3656:	ff 91       	pop	r31
    3658:	ef 91       	pop	r30
    365a:	bf 91       	pop	r27
    365c:	af 91       	pop	r26
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	7f 91       	pop	r23
    3664:	6f 91       	pop	r22
    3666:	5f 91       	pop	r21
    3668:	4f 91       	pop	r20
    366a:	3f 91       	pop	r19
    366c:	2f 91       	pop	r18
    366e:	0f 90       	pop	r0
    3670:	0b be       	out	0x3b, r0	; 59
    3672:	0f 90       	pop	r0
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	0f 90       	pop	r0
    3678:	1f 90       	pop	r1
    367a:	18 95       	reti

0000367c <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    367c:	1f 92       	push	r1
    367e:	0f 92       	push	r0
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	0f 92       	push	r0
    3684:	11 24       	eor	r1, r1
    3686:	0b b6       	in	r0, 0x3b	; 59
    3688:	0f 92       	push	r0
    368a:	2f 93       	push	r18
    368c:	3f 93       	push	r19
    368e:	4f 93       	push	r20
    3690:	5f 93       	push	r21
    3692:	6f 93       	push	r22
    3694:	7f 93       	push	r23
    3696:	8f 93       	push	r24
    3698:	9f 93       	push	r25
    369a:	af 93       	push	r26
    369c:	bf 93       	push	r27
    369e:	ef 93       	push	r30
    36a0:	ff 93       	push	r31
    36a2:	e0 91 4a 22 	lds	r30, 0x224A
    36a6:	f0 91 4b 22 	lds	r31, 0x224B
    36aa:	30 97       	sbiw	r30, 0x00	; 0
    36ac:	29 f0       	breq	.+10     	; 0x36b8 <__vector_79+0x3c>
    36ae:	80 91 40 23 	lds	r24, 0x2340
    36b2:	90 91 41 23 	lds	r25, 0x2341
    36b6:	19 95       	eicall
    36b8:	ff 91       	pop	r31
    36ba:	ef 91       	pop	r30
    36bc:	bf 91       	pop	r27
    36be:	af 91       	pop	r26
    36c0:	9f 91       	pop	r25
    36c2:	8f 91       	pop	r24
    36c4:	7f 91       	pop	r23
    36c6:	6f 91       	pop	r22
    36c8:	5f 91       	pop	r21
    36ca:	4f 91       	pop	r20
    36cc:	3f 91       	pop	r19
    36ce:	2f 91       	pop	r18
    36d0:	0f 90       	pop	r0
    36d2:	0b be       	out	0x3b, r0	; 59
    36d4:	0f 90       	pop	r0
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	0f 90       	pop	r0
    36da:	1f 90       	pop	r1
    36dc:	18 95       	reti

000036de <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    36de:	1f 92       	push	r1
    36e0:	0f 92       	push	r0
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	0f 92       	push	r0
    36e6:	11 24       	eor	r1, r1
    36e8:	0b b6       	in	r0, 0x3b	; 59
    36ea:	0f 92       	push	r0
    36ec:	2f 93       	push	r18
    36ee:	3f 93       	push	r19
    36f0:	4f 93       	push	r20
    36f2:	5f 93       	push	r21
    36f4:	6f 93       	push	r22
    36f6:	7f 93       	push	r23
    36f8:	8f 93       	push	r24
    36fa:	9f 93       	push	r25
    36fc:	af 93       	push	r26
    36fe:	bf 93       	push	r27
    3700:	ef 93       	push	r30
    3702:	ff 93       	push	r31
    3704:	e0 91 4c 22 	lds	r30, 0x224C
    3708:	f0 91 4d 22 	lds	r31, 0x224D
    370c:	30 97       	sbiw	r30, 0x00	; 0
    370e:	29 f0       	breq	.+10     	; 0x371a <__vector_80+0x3c>
    3710:	80 91 42 23 	lds	r24, 0x2342
    3714:	90 91 43 23 	lds	r25, 0x2343
    3718:	19 95       	eicall
    371a:	ff 91       	pop	r31
    371c:	ef 91       	pop	r30
    371e:	bf 91       	pop	r27
    3720:	af 91       	pop	r26
    3722:	9f 91       	pop	r25
    3724:	8f 91       	pop	r24
    3726:	7f 91       	pop	r23
    3728:	6f 91       	pop	r22
    372a:	5f 91       	pop	r21
    372c:	4f 91       	pop	r20
    372e:	3f 91       	pop	r19
    3730:	2f 91       	pop	r18
    3732:	0f 90       	pop	r0
    3734:	0b be       	out	0x3b, r0	; 59
    3736:	0f 90       	pop	r0
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	0f 90       	pop	r0
    373c:	1f 90       	pop	r1
    373e:	18 95       	reti

00003740 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3740:	1f 92       	push	r1
    3742:	0f 92       	push	r0
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	0f 92       	push	r0
    3748:	11 24       	eor	r1, r1
    374a:	0b b6       	in	r0, 0x3b	; 59
    374c:	0f 92       	push	r0
    374e:	2f 93       	push	r18
    3750:	3f 93       	push	r19
    3752:	4f 93       	push	r20
    3754:	5f 93       	push	r21
    3756:	6f 93       	push	r22
    3758:	7f 93       	push	r23
    375a:	8f 93       	push	r24
    375c:	9f 93       	push	r25
    375e:	af 93       	push	r26
    3760:	bf 93       	push	r27
    3762:	ef 93       	push	r30
    3764:	ff 93       	push	r31
    3766:	e0 91 4e 22 	lds	r30, 0x224E
    376a:	f0 91 4f 22 	lds	r31, 0x224F
    376e:	30 97       	sbiw	r30, 0x00	; 0
    3770:	29 f0       	breq	.+10     	; 0x377c <__vector_81+0x3c>
    3772:	80 91 44 23 	lds	r24, 0x2344
    3776:	90 91 45 23 	lds	r25, 0x2345
    377a:	19 95       	eicall
    377c:	ff 91       	pop	r31
    377e:	ef 91       	pop	r30
    3780:	bf 91       	pop	r27
    3782:	af 91       	pop	r26
    3784:	9f 91       	pop	r25
    3786:	8f 91       	pop	r24
    3788:	7f 91       	pop	r23
    378a:	6f 91       	pop	r22
    378c:	5f 91       	pop	r21
    378e:	4f 91       	pop	r20
    3790:	3f 91       	pop	r19
    3792:	2f 91       	pop	r18
    3794:	0f 90       	pop	r0
    3796:	0b be       	out	0x3b, r0	; 59
    3798:	0f 90       	pop	r0
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	0f 90       	pop	r0
    379e:	1f 90       	pop	r1
    37a0:	18 95       	reti

000037a2 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    37a2:	1f 92       	push	r1
    37a4:	0f 92       	push	r0
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	0f 92       	push	r0
    37aa:	11 24       	eor	r1, r1
    37ac:	0b b6       	in	r0, 0x3b	; 59
    37ae:	0f 92       	push	r0
    37b0:	2f 93       	push	r18
    37b2:	3f 93       	push	r19
    37b4:	4f 93       	push	r20
    37b6:	5f 93       	push	r21
    37b8:	6f 93       	push	r22
    37ba:	7f 93       	push	r23
    37bc:	8f 93       	push	r24
    37be:	9f 93       	push	r25
    37c0:	af 93       	push	r26
    37c2:	bf 93       	push	r27
    37c4:	ef 93       	push	r30
    37c6:	ff 93       	push	r31
    37c8:	e0 91 50 22 	lds	r30, 0x2250
    37cc:	f0 91 51 22 	lds	r31, 0x2251
    37d0:	30 97       	sbiw	r30, 0x00	; 0
    37d2:	29 f0       	breq	.+10     	; 0x37de <__vector_82+0x3c>
    37d4:	80 91 46 23 	lds	r24, 0x2346
    37d8:	90 91 47 23 	lds	r25, 0x2347
    37dc:	19 95       	eicall
    37de:	ff 91       	pop	r31
    37e0:	ef 91       	pop	r30
    37e2:	bf 91       	pop	r27
    37e4:	af 91       	pop	r26
    37e6:	9f 91       	pop	r25
    37e8:	8f 91       	pop	r24
    37ea:	7f 91       	pop	r23
    37ec:	6f 91       	pop	r22
    37ee:	5f 91       	pop	r21
    37f0:	4f 91       	pop	r20
    37f2:	3f 91       	pop	r19
    37f4:	2f 91       	pop	r18
    37f6:	0f 90       	pop	r0
    37f8:	0b be       	out	0x3b, r0	; 59
    37fa:	0f 90       	pop	r0
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	0f 90       	pop	r0
    3800:	1f 90       	pop	r1
    3802:	18 95       	reti

00003804 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3804:	1f 92       	push	r1
    3806:	0f 92       	push	r0
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	0f 92       	push	r0
    380c:	11 24       	eor	r1, r1
    380e:	0b b6       	in	r0, 0x3b	; 59
    3810:	0f 92       	push	r0
    3812:	2f 93       	push	r18
    3814:	3f 93       	push	r19
    3816:	4f 93       	push	r20
    3818:	5f 93       	push	r21
    381a:	6f 93       	push	r22
    381c:	7f 93       	push	r23
    381e:	8f 93       	push	r24
    3820:	9f 93       	push	r25
    3822:	af 93       	push	r26
    3824:	bf 93       	push	r27
    3826:	ef 93       	push	r30
    3828:	ff 93       	push	r31
    382a:	e0 91 52 22 	lds	r30, 0x2252
    382e:	f0 91 53 22 	lds	r31, 0x2253
    3832:	30 97       	sbiw	r30, 0x00	; 0
    3834:	29 f0       	breq	.+10     	; 0x3840 <__vector_83+0x3c>
    3836:	80 91 48 23 	lds	r24, 0x2348
    383a:	90 91 49 23 	lds	r25, 0x2349
    383e:	19 95       	eicall
    3840:	ff 91       	pop	r31
    3842:	ef 91       	pop	r30
    3844:	bf 91       	pop	r27
    3846:	af 91       	pop	r26
    3848:	9f 91       	pop	r25
    384a:	8f 91       	pop	r24
    384c:	7f 91       	pop	r23
    384e:	6f 91       	pop	r22
    3850:	5f 91       	pop	r21
    3852:	4f 91       	pop	r20
    3854:	3f 91       	pop	r19
    3856:	2f 91       	pop	r18
    3858:	0f 90       	pop	r0
    385a:	0b be       	out	0x3b, r0	; 59
    385c:	0f 90       	pop	r0
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	0f 90       	pop	r0
    3862:	1f 90       	pop	r1
    3864:	18 95       	reti

00003866 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    3866:	1f 92       	push	r1
    3868:	0f 92       	push	r0
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	0f 92       	push	r0
    386e:	11 24       	eor	r1, r1
    3870:	0b b6       	in	r0, 0x3b	; 59
    3872:	0f 92       	push	r0
    3874:	2f 93       	push	r18
    3876:	3f 93       	push	r19
    3878:	4f 93       	push	r20
    387a:	5f 93       	push	r21
    387c:	6f 93       	push	r22
    387e:	7f 93       	push	r23
    3880:	8f 93       	push	r24
    3882:	9f 93       	push	r25
    3884:	af 93       	push	r26
    3886:	bf 93       	push	r27
    3888:	ef 93       	push	r30
    388a:	ff 93       	push	r31
    388c:	e0 91 54 22 	lds	r30, 0x2254
    3890:	f0 91 55 22 	lds	r31, 0x2255
    3894:	30 97       	sbiw	r30, 0x00	; 0
    3896:	29 f0       	breq	.+10     	; 0x38a2 <__vector_84+0x3c>
    3898:	80 91 4a 23 	lds	r24, 0x234A
    389c:	90 91 4b 23 	lds	r25, 0x234B
    38a0:	19 95       	eicall
    38a2:	ff 91       	pop	r31
    38a4:	ef 91       	pop	r30
    38a6:	bf 91       	pop	r27
    38a8:	af 91       	pop	r26
    38aa:	9f 91       	pop	r25
    38ac:	8f 91       	pop	r24
    38ae:	7f 91       	pop	r23
    38b0:	6f 91       	pop	r22
    38b2:	5f 91       	pop	r21
    38b4:	4f 91       	pop	r20
    38b6:	3f 91       	pop	r19
    38b8:	2f 91       	pop	r18
    38ba:	0f 90       	pop	r0
    38bc:	0b be       	out	0x3b, r0	; 59
    38be:	0f 90       	pop	r0
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	0f 90       	pop	r0
    38c4:	1f 90       	pop	r1
    38c6:	18 95       	reti

000038c8 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    38c8:	1f 92       	push	r1
    38ca:	0f 92       	push	r0
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	0f 92       	push	r0
    38d0:	11 24       	eor	r1, r1
    38d2:	0b b6       	in	r0, 0x3b	; 59
    38d4:	0f 92       	push	r0
    38d6:	2f 93       	push	r18
    38d8:	3f 93       	push	r19
    38da:	4f 93       	push	r20
    38dc:	5f 93       	push	r21
    38de:	6f 93       	push	r22
    38e0:	7f 93       	push	r23
    38e2:	8f 93       	push	r24
    38e4:	9f 93       	push	r25
    38e6:	af 93       	push	r26
    38e8:	bf 93       	push	r27
    38ea:	ef 93       	push	r30
    38ec:	ff 93       	push	r31
    38ee:	e0 91 56 22 	lds	r30, 0x2256
    38f2:	f0 91 57 22 	lds	r31, 0x2257
    38f6:	30 97       	sbiw	r30, 0x00	; 0
    38f8:	29 f0       	breq	.+10     	; 0x3904 <__vector_85+0x3c>
    38fa:	80 91 4c 23 	lds	r24, 0x234C
    38fe:	90 91 4d 23 	lds	r25, 0x234D
    3902:	19 95       	eicall
    3904:	ff 91       	pop	r31
    3906:	ef 91       	pop	r30
    3908:	bf 91       	pop	r27
    390a:	af 91       	pop	r26
    390c:	9f 91       	pop	r25
    390e:	8f 91       	pop	r24
    3910:	7f 91       	pop	r23
    3912:	6f 91       	pop	r22
    3914:	5f 91       	pop	r21
    3916:	4f 91       	pop	r20
    3918:	3f 91       	pop	r19
    391a:	2f 91       	pop	r18
    391c:	0f 90       	pop	r0
    391e:	0b be       	out	0x3b, r0	; 59
    3920:	0f 90       	pop	r0
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	0f 90       	pop	r0
    3926:	1f 90       	pop	r1
    3928:	18 95       	reti

0000392a <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    392a:	1f 92       	push	r1
    392c:	0f 92       	push	r0
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	0f 92       	push	r0
    3932:	11 24       	eor	r1, r1
    3934:	0b b6       	in	r0, 0x3b	; 59
    3936:	0f 92       	push	r0
    3938:	2f 93       	push	r18
    393a:	3f 93       	push	r19
    393c:	4f 93       	push	r20
    393e:	5f 93       	push	r21
    3940:	6f 93       	push	r22
    3942:	7f 93       	push	r23
    3944:	8f 93       	push	r24
    3946:	9f 93       	push	r25
    3948:	af 93       	push	r26
    394a:	bf 93       	push	r27
    394c:	ef 93       	push	r30
    394e:	ff 93       	push	r31
    3950:	e0 91 58 22 	lds	r30, 0x2258
    3954:	f0 91 59 22 	lds	r31, 0x2259
    3958:	30 97       	sbiw	r30, 0x00	; 0
    395a:	29 f0       	breq	.+10     	; 0x3966 <__vector_86+0x3c>
    395c:	80 91 4e 23 	lds	r24, 0x234E
    3960:	90 91 4f 23 	lds	r25, 0x234F
    3964:	19 95       	eicall
    3966:	ff 91       	pop	r31
    3968:	ef 91       	pop	r30
    396a:	bf 91       	pop	r27
    396c:	af 91       	pop	r26
    396e:	9f 91       	pop	r25
    3970:	8f 91       	pop	r24
    3972:	7f 91       	pop	r23
    3974:	6f 91       	pop	r22
    3976:	5f 91       	pop	r21
    3978:	4f 91       	pop	r20
    397a:	3f 91       	pop	r19
    397c:	2f 91       	pop	r18
    397e:	0f 90       	pop	r0
    3980:	0b be       	out	0x3b, r0	; 59
    3982:	0f 90       	pop	r0
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	0f 90       	pop	r0
    3988:	1f 90       	pop	r1
    398a:	18 95       	reti

0000398c <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    398c:	1f 92       	push	r1
    398e:	0f 92       	push	r0
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	0f 92       	push	r0
    3994:	11 24       	eor	r1, r1
    3996:	0b b6       	in	r0, 0x3b	; 59
    3998:	0f 92       	push	r0
    399a:	2f 93       	push	r18
    399c:	3f 93       	push	r19
    399e:	4f 93       	push	r20
    39a0:	5f 93       	push	r21
    39a2:	6f 93       	push	r22
    39a4:	7f 93       	push	r23
    39a6:	8f 93       	push	r24
    39a8:	9f 93       	push	r25
    39aa:	af 93       	push	r26
    39ac:	bf 93       	push	r27
    39ae:	ef 93       	push	r30
    39b0:	ff 93       	push	r31
    39b2:	e0 91 5a 22 	lds	r30, 0x225A
    39b6:	f0 91 5b 22 	lds	r31, 0x225B
    39ba:	30 97       	sbiw	r30, 0x00	; 0
    39bc:	29 f0       	breq	.+10     	; 0x39c8 <__vector_87+0x3c>
    39be:	80 91 50 23 	lds	r24, 0x2350
    39c2:	90 91 51 23 	lds	r25, 0x2351
    39c6:	19 95       	eicall
    39c8:	ff 91       	pop	r31
    39ca:	ef 91       	pop	r30
    39cc:	bf 91       	pop	r27
    39ce:	af 91       	pop	r26
    39d0:	9f 91       	pop	r25
    39d2:	8f 91       	pop	r24
    39d4:	7f 91       	pop	r23
    39d6:	6f 91       	pop	r22
    39d8:	5f 91       	pop	r21
    39da:	4f 91       	pop	r20
    39dc:	3f 91       	pop	r19
    39de:	2f 91       	pop	r18
    39e0:	0f 90       	pop	r0
    39e2:	0b be       	out	0x3b, r0	; 59
    39e4:	0f 90       	pop	r0
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	0f 90       	pop	r0
    39ea:	1f 90       	pop	r1
    39ec:	18 95       	reti

000039ee <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    39ee:	1f 92       	push	r1
    39f0:	0f 92       	push	r0
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	0f 92       	push	r0
    39f6:	11 24       	eor	r1, r1
    39f8:	0b b6       	in	r0, 0x3b	; 59
    39fa:	0f 92       	push	r0
    39fc:	2f 93       	push	r18
    39fe:	3f 93       	push	r19
    3a00:	4f 93       	push	r20
    3a02:	5f 93       	push	r21
    3a04:	6f 93       	push	r22
    3a06:	7f 93       	push	r23
    3a08:	8f 93       	push	r24
    3a0a:	9f 93       	push	r25
    3a0c:	af 93       	push	r26
    3a0e:	bf 93       	push	r27
    3a10:	ef 93       	push	r30
    3a12:	ff 93       	push	r31
    3a14:	e0 91 5c 22 	lds	r30, 0x225C
    3a18:	f0 91 5d 22 	lds	r31, 0x225D
    3a1c:	30 97       	sbiw	r30, 0x00	; 0
    3a1e:	29 f0       	breq	.+10     	; 0x3a2a <__vector_88+0x3c>
    3a20:	80 91 52 23 	lds	r24, 0x2352
    3a24:	90 91 53 23 	lds	r25, 0x2353
    3a28:	19 95       	eicall
    3a2a:	ff 91       	pop	r31
    3a2c:	ef 91       	pop	r30
    3a2e:	bf 91       	pop	r27
    3a30:	af 91       	pop	r26
    3a32:	9f 91       	pop	r25
    3a34:	8f 91       	pop	r24
    3a36:	7f 91       	pop	r23
    3a38:	6f 91       	pop	r22
    3a3a:	5f 91       	pop	r21
    3a3c:	4f 91       	pop	r20
    3a3e:	3f 91       	pop	r19
    3a40:	2f 91       	pop	r18
    3a42:	0f 90       	pop	r0
    3a44:	0b be       	out	0x3b, r0	; 59
    3a46:	0f 90       	pop	r0
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	0f 90       	pop	r0
    3a4c:	1f 90       	pop	r1
    3a4e:	18 95       	reti

00003a50 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3a50:	1f 92       	push	r1
    3a52:	0f 92       	push	r0
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	0f 92       	push	r0
    3a58:	11 24       	eor	r1, r1
    3a5a:	0b b6       	in	r0, 0x3b	; 59
    3a5c:	0f 92       	push	r0
    3a5e:	2f 93       	push	r18
    3a60:	3f 93       	push	r19
    3a62:	4f 93       	push	r20
    3a64:	5f 93       	push	r21
    3a66:	6f 93       	push	r22
    3a68:	7f 93       	push	r23
    3a6a:	8f 93       	push	r24
    3a6c:	9f 93       	push	r25
    3a6e:	af 93       	push	r26
    3a70:	bf 93       	push	r27
    3a72:	ef 93       	push	r30
    3a74:	ff 93       	push	r31
    3a76:	e0 91 5e 22 	lds	r30, 0x225E
    3a7a:	f0 91 5f 22 	lds	r31, 0x225F
    3a7e:	30 97       	sbiw	r30, 0x00	; 0
    3a80:	29 f0       	breq	.+10     	; 0x3a8c <__vector_89+0x3c>
    3a82:	80 91 54 23 	lds	r24, 0x2354
    3a86:	90 91 55 23 	lds	r25, 0x2355
    3a8a:	19 95       	eicall
    3a8c:	ff 91       	pop	r31
    3a8e:	ef 91       	pop	r30
    3a90:	bf 91       	pop	r27
    3a92:	af 91       	pop	r26
    3a94:	9f 91       	pop	r25
    3a96:	8f 91       	pop	r24
    3a98:	7f 91       	pop	r23
    3a9a:	6f 91       	pop	r22
    3a9c:	5f 91       	pop	r21
    3a9e:	4f 91       	pop	r20
    3aa0:	3f 91       	pop	r19
    3aa2:	2f 91       	pop	r18
    3aa4:	0f 90       	pop	r0
    3aa6:	0b be       	out	0x3b, r0	; 59
    3aa8:	0f 90       	pop	r0
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	0f 90       	pop	r0
    3aae:	1f 90       	pop	r1
    3ab0:	18 95       	reti

00003ab2 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3ab2:	1f 92       	push	r1
    3ab4:	0f 92       	push	r0
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	0f 92       	push	r0
    3aba:	11 24       	eor	r1, r1
    3abc:	0b b6       	in	r0, 0x3b	; 59
    3abe:	0f 92       	push	r0
    3ac0:	2f 93       	push	r18
    3ac2:	3f 93       	push	r19
    3ac4:	4f 93       	push	r20
    3ac6:	5f 93       	push	r21
    3ac8:	6f 93       	push	r22
    3aca:	7f 93       	push	r23
    3acc:	8f 93       	push	r24
    3ace:	9f 93       	push	r25
    3ad0:	af 93       	push	r26
    3ad2:	bf 93       	push	r27
    3ad4:	ef 93       	push	r30
    3ad6:	ff 93       	push	r31
    3ad8:	e0 91 60 22 	lds	r30, 0x2260
    3adc:	f0 91 61 22 	lds	r31, 0x2261
    3ae0:	30 97       	sbiw	r30, 0x00	; 0
    3ae2:	29 f0       	breq	.+10     	; 0x3aee <__vector_90+0x3c>
    3ae4:	80 91 56 23 	lds	r24, 0x2356
    3ae8:	90 91 57 23 	lds	r25, 0x2357
    3aec:	19 95       	eicall
    3aee:	ff 91       	pop	r31
    3af0:	ef 91       	pop	r30
    3af2:	bf 91       	pop	r27
    3af4:	af 91       	pop	r26
    3af6:	9f 91       	pop	r25
    3af8:	8f 91       	pop	r24
    3afa:	7f 91       	pop	r23
    3afc:	6f 91       	pop	r22
    3afe:	5f 91       	pop	r21
    3b00:	4f 91       	pop	r20
    3b02:	3f 91       	pop	r19
    3b04:	2f 91       	pop	r18
    3b06:	0f 90       	pop	r0
    3b08:	0b be       	out	0x3b, r0	; 59
    3b0a:	0f 90       	pop	r0
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	0f 90       	pop	r0
    3b10:	1f 90       	pop	r1
    3b12:	18 95       	reti

00003b14 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3b14:	1f 92       	push	r1
    3b16:	0f 92       	push	r0
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	0f 92       	push	r0
    3b1c:	11 24       	eor	r1, r1
    3b1e:	0b b6       	in	r0, 0x3b	; 59
    3b20:	0f 92       	push	r0
    3b22:	2f 93       	push	r18
    3b24:	3f 93       	push	r19
    3b26:	4f 93       	push	r20
    3b28:	5f 93       	push	r21
    3b2a:	6f 93       	push	r22
    3b2c:	7f 93       	push	r23
    3b2e:	8f 93       	push	r24
    3b30:	9f 93       	push	r25
    3b32:	af 93       	push	r26
    3b34:	bf 93       	push	r27
    3b36:	ef 93       	push	r30
    3b38:	ff 93       	push	r31
    3b3a:	e0 91 62 22 	lds	r30, 0x2262
    3b3e:	f0 91 63 22 	lds	r31, 0x2263
    3b42:	30 97       	sbiw	r30, 0x00	; 0
    3b44:	29 f0       	breq	.+10     	; 0x3b50 <__vector_91+0x3c>
    3b46:	80 91 58 23 	lds	r24, 0x2358
    3b4a:	90 91 59 23 	lds	r25, 0x2359
    3b4e:	19 95       	eicall
    3b50:	ff 91       	pop	r31
    3b52:	ef 91       	pop	r30
    3b54:	bf 91       	pop	r27
    3b56:	af 91       	pop	r26
    3b58:	9f 91       	pop	r25
    3b5a:	8f 91       	pop	r24
    3b5c:	7f 91       	pop	r23
    3b5e:	6f 91       	pop	r22
    3b60:	5f 91       	pop	r21
    3b62:	4f 91       	pop	r20
    3b64:	3f 91       	pop	r19
    3b66:	2f 91       	pop	r18
    3b68:	0f 90       	pop	r0
    3b6a:	0b be       	out	0x3b, r0	; 59
    3b6c:	0f 90       	pop	r0
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	0f 90       	pop	r0
    3b72:	1f 90       	pop	r1
    3b74:	18 95       	reti

00003b76 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3b76:	1f 92       	push	r1
    3b78:	0f 92       	push	r0
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	0f 92       	push	r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	0b b6       	in	r0, 0x3b	; 59
    3b82:	0f 92       	push	r0
    3b84:	2f 93       	push	r18
    3b86:	3f 93       	push	r19
    3b88:	4f 93       	push	r20
    3b8a:	5f 93       	push	r21
    3b8c:	6f 93       	push	r22
    3b8e:	7f 93       	push	r23
    3b90:	8f 93       	push	r24
    3b92:	9f 93       	push	r25
    3b94:	af 93       	push	r26
    3b96:	bf 93       	push	r27
    3b98:	ef 93       	push	r30
    3b9a:	ff 93       	push	r31
    3b9c:	e0 91 64 22 	lds	r30, 0x2264
    3ba0:	f0 91 65 22 	lds	r31, 0x2265
    3ba4:	30 97       	sbiw	r30, 0x00	; 0
    3ba6:	29 f0       	breq	.+10     	; 0x3bb2 <__vector_92+0x3c>
    3ba8:	80 91 5a 23 	lds	r24, 0x235A
    3bac:	90 91 5b 23 	lds	r25, 0x235B
    3bb0:	19 95       	eicall
    3bb2:	ff 91       	pop	r31
    3bb4:	ef 91       	pop	r30
    3bb6:	bf 91       	pop	r27
    3bb8:	af 91       	pop	r26
    3bba:	9f 91       	pop	r25
    3bbc:	8f 91       	pop	r24
    3bbe:	7f 91       	pop	r23
    3bc0:	6f 91       	pop	r22
    3bc2:	5f 91       	pop	r21
    3bc4:	4f 91       	pop	r20
    3bc6:	3f 91       	pop	r19
    3bc8:	2f 91       	pop	r18
    3bca:	0f 90       	pop	r0
    3bcc:	0b be       	out	0x3b, r0	; 59
    3bce:	0f 90       	pop	r0
    3bd0:	0f be       	out	0x3f, r0	; 63
    3bd2:	0f 90       	pop	r0
    3bd4:	1f 90       	pop	r1
    3bd6:	18 95       	reti

00003bd8 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3bd8:	1f 92       	push	r1
    3bda:	0f 92       	push	r0
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	0f 92       	push	r0
    3be0:	11 24       	eor	r1, r1
    3be2:	0b b6       	in	r0, 0x3b	; 59
    3be4:	0f 92       	push	r0
    3be6:	2f 93       	push	r18
    3be8:	3f 93       	push	r19
    3bea:	4f 93       	push	r20
    3bec:	5f 93       	push	r21
    3bee:	6f 93       	push	r22
    3bf0:	7f 93       	push	r23
    3bf2:	8f 93       	push	r24
    3bf4:	9f 93       	push	r25
    3bf6:	af 93       	push	r26
    3bf8:	bf 93       	push	r27
    3bfa:	ef 93       	push	r30
    3bfc:	ff 93       	push	r31
    3bfe:	e0 91 66 22 	lds	r30, 0x2266
    3c02:	f0 91 67 22 	lds	r31, 0x2267
    3c06:	30 97       	sbiw	r30, 0x00	; 0
    3c08:	29 f0       	breq	.+10     	; 0x3c14 <__vector_93+0x3c>
    3c0a:	80 91 5c 23 	lds	r24, 0x235C
    3c0e:	90 91 5d 23 	lds	r25, 0x235D
    3c12:	19 95       	eicall
    3c14:	ff 91       	pop	r31
    3c16:	ef 91       	pop	r30
    3c18:	bf 91       	pop	r27
    3c1a:	af 91       	pop	r26
    3c1c:	9f 91       	pop	r25
    3c1e:	8f 91       	pop	r24
    3c20:	7f 91       	pop	r23
    3c22:	6f 91       	pop	r22
    3c24:	5f 91       	pop	r21
    3c26:	4f 91       	pop	r20
    3c28:	3f 91       	pop	r19
    3c2a:	2f 91       	pop	r18
    3c2c:	0f 90       	pop	r0
    3c2e:	0b be       	out	0x3b, r0	; 59
    3c30:	0f 90       	pop	r0
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	0f 90       	pop	r0
    3c36:	1f 90       	pop	r1
    3c38:	18 95       	reti

00003c3a <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3c3a:	1f 92       	push	r1
    3c3c:	0f 92       	push	r0
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	0f 92       	push	r0
    3c42:	11 24       	eor	r1, r1
    3c44:	0b b6       	in	r0, 0x3b	; 59
    3c46:	0f 92       	push	r0
    3c48:	2f 93       	push	r18
    3c4a:	3f 93       	push	r19
    3c4c:	4f 93       	push	r20
    3c4e:	5f 93       	push	r21
    3c50:	6f 93       	push	r22
    3c52:	7f 93       	push	r23
    3c54:	8f 93       	push	r24
    3c56:	9f 93       	push	r25
    3c58:	af 93       	push	r26
    3c5a:	bf 93       	push	r27
    3c5c:	ef 93       	push	r30
    3c5e:	ff 93       	push	r31
    3c60:	e0 91 7c 22 	lds	r30, 0x227C
    3c64:	f0 91 7d 22 	lds	r31, 0x227D
    3c68:	30 97       	sbiw	r30, 0x00	; 0
    3c6a:	29 f0       	breq	.+10     	; 0x3c76 <__vector_104+0x3c>
    3c6c:	80 91 72 23 	lds	r24, 0x2372
    3c70:	90 91 73 23 	lds	r25, 0x2373
    3c74:	19 95       	eicall
    3c76:	ff 91       	pop	r31
    3c78:	ef 91       	pop	r30
    3c7a:	bf 91       	pop	r27
    3c7c:	af 91       	pop	r26
    3c7e:	9f 91       	pop	r25
    3c80:	8f 91       	pop	r24
    3c82:	7f 91       	pop	r23
    3c84:	6f 91       	pop	r22
    3c86:	5f 91       	pop	r21
    3c88:	4f 91       	pop	r20
    3c8a:	3f 91       	pop	r19
    3c8c:	2f 91       	pop	r18
    3c8e:	0f 90       	pop	r0
    3c90:	0b be       	out	0x3b, r0	; 59
    3c92:	0f 90       	pop	r0
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	0f 90       	pop	r0
    3c98:	1f 90       	pop	r1
    3c9a:	18 95       	reti

00003c9c <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3c9c:	1f 92       	push	r1
    3c9e:	0f 92       	push	r0
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	0f 92       	push	r0
    3ca4:	11 24       	eor	r1, r1
    3ca6:	0b b6       	in	r0, 0x3b	; 59
    3ca8:	0f 92       	push	r0
    3caa:	2f 93       	push	r18
    3cac:	3f 93       	push	r19
    3cae:	4f 93       	push	r20
    3cb0:	5f 93       	push	r21
    3cb2:	6f 93       	push	r22
    3cb4:	7f 93       	push	r23
    3cb6:	8f 93       	push	r24
    3cb8:	9f 93       	push	r25
    3cba:	af 93       	push	r26
    3cbc:	bf 93       	push	r27
    3cbe:	ef 93       	push	r30
    3cc0:	ff 93       	push	r31
    3cc2:	e0 91 7e 22 	lds	r30, 0x227E
    3cc6:	f0 91 7f 22 	lds	r31, 0x227F
    3cca:	30 97       	sbiw	r30, 0x00	; 0
    3ccc:	29 f0       	breq	.+10     	; 0x3cd8 <__vector_105+0x3c>
    3cce:	80 91 74 23 	lds	r24, 0x2374
    3cd2:	90 91 75 23 	lds	r25, 0x2375
    3cd6:	19 95       	eicall
    3cd8:	ff 91       	pop	r31
    3cda:	ef 91       	pop	r30
    3cdc:	bf 91       	pop	r27
    3cde:	af 91       	pop	r26
    3ce0:	9f 91       	pop	r25
    3ce2:	8f 91       	pop	r24
    3ce4:	7f 91       	pop	r23
    3ce6:	6f 91       	pop	r22
    3ce8:	5f 91       	pop	r21
    3cea:	4f 91       	pop	r20
    3cec:	3f 91       	pop	r19
    3cee:	2f 91       	pop	r18
    3cf0:	0f 90       	pop	r0
    3cf2:	0b be       	out	0x3b, r0	; 59
    3cf4:	0f 90       	pop	r0
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	0f 90       	pop	r0
    3cfa:	1f 90       	pop	r1
    3cfc:	18 95       	reti

00003cfe <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3cfe:	1f 92       	push	r1
    3d00:	0f 92       	push	r0
    3d02:	0f b6       	in	r0, 0x3f	; 63
    3d04:	0f 92       	push	r0
    3d06:	11 24       	eor	r1, r1
    3d08:	0b b6       	in	r0, 0x3b	; 59
    3d0a:	0f 92       	push	r0
    3d0c:	2f 93       	push	r18
    3d0e:	3f 93       	push	r19
    3d10:	4f 93       	push	r20
    3d12:	5f 93       	push	r21
    3d14:	6f 93       	push	r22
    3d16:	7f 93       	push	r23
    3d18:	8f 93       	push	r24
    3d1a:	9f 93       	push	r25
    3d1c:	af 93       	push	r26
    3d1e:	bf 93       	push	r27
    3d20:	ef 93       	push	r30
    3d22:	ff 93       	push	r31
    3d24:	e0 91 84 22 	lds	r30, 0x2284
    3d28:	f0 91 85 22 	lds	r31, 0x2285
    3d2c:	30 97       	sbiw	r30, 0x00	; 0
    3d2e:	29 f0       	breq	.+10     	; 0x3d3a <__vector_108+0x3c>
    3d30:	80 91 7a 23 	lds	r24, 0x237A
    3d34:	90 91 7b 23 	lds	r25, 0x237B
    3d38:	19 95       	eicall
    3d3a:	ff 91       	pop	r31
    3d3c:	ef 91       	pop	r30
    3d3e:	bf 91       	pop	r27
    3d40:	af 91       	pop	r26
    3d42:	9f 91       	pop	r25
    3d44:	8f 91       	pop	r24
    3d46:	7f 91       	pop	r23
    3d48:	6f 91       	pop	r22
    3d4a:	5f 91       	pop	r21
    3d4c:	4f 91       	pop	r20
    3d4e:	3f 91       	pop	r19
    3d50:	2f 91       	pop	r18
    3d52:	0f 90       	pop	r0
    3d54:	0b be       	out	0x3b, r0	; 59
    3d56:	0f 90       	pop	r0
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	0f 90       	pop	r0
    3d5c:	1f 90       	pop	r1
    3d5e:	18 95       	reti

00003d60 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    3d60:	1f 92       	push	r1
    3d62:	0f 92       	push	r0
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	0f 92       	push	r0
    3d68:	11 24       	eor	r1, r1
    3d6a:	0b b6       	in	r0, 0x3b	; 59
    3d6c:	0f 92       	push	r0
    3d6e:	2f 93       	push	r18
    3d70:	3f 93       	push	r19
    3d72:	4f 93       	push	r20
    3d74:	5f 93       	push	r21
    3d76:	6f 93       	push	r22
    3d78:	7f 93       	push	r23
    3d7a:	8f 93       	push	r24
    3d7c:	9f 93       	push	r25
    3d7e:	af 93       	push	r26
    3d80:	bf 93       	push	r27
    3d82:	ef 93       	push	r30
    3d84:	ff 93       	push	r31
    3d86:	e0 91 86 22 	lds	r30, 0x2286
    3d8a:	f0 91 87 22 	lds	r31, 0x2287
    3d8e:	30 97       	sbiw	r30, 0x00	; 0
    3d90:	29 f0       	breq	.+10     	; 0x3d9c <__vector_109+0x3c>
    3d92:	80 91 7c 23 	lds	r24, 0x237C
    3d96:	90 91 7d 23 	lds	r25, 0x237D
    3d9a:	19 95       	eicall
    3d9c:	ff 91       	pop	r31
    3d9e:	ef 91       	pop	r30
    3da0:	bf 91       	pop	r27
    3da2:	af 91       	pop	r26
    3da4:	9f 91       	pop	r25
    3da6:	8f 91       	pop	r24
    3da8:	7f 91       	pop	r23
    3daa:	6f 91       	pop	r22
    3dac:	5f 91       	pop	r21
    3dae:	4f 91       	pop	r20
    3db0:	3f 91       	pop	r19
    3db2:	2f 91       	pop	r18
    3db4:	0f 90       	pop	r0
    3db6:	0b be       	out	0x3b, r0	; 59
    3db8:	0f 90       	pop	r0
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	0f 90       	pop	r0
    3dbe:	1f 90       	pop	r1
    3dc0:	18 95       	reti

00003dc2 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3dc2:	1f 92       	push	r1
    3dc4:	0f 92       	push	r0
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	0f 92       	push	r0
    3dca:	11 24       	eor	r1, r1
    3dcc:	0b b6       	in	r0, 0x3b	; 59
    3dce:	0f 92       	push	r0
    3dd0:	2f 93       	push	r18
    3dd2:	3f 93       	push	r19
    3dd4:	4f 93       	push	r20
    3dd6:	5f 93       	push	r21
    3dd8:	6f 93       	push	r22
    3dda:	7f 93       	push	r23
    3ddc:	8f 93       	push	r24
    3dde:	9f 93       	push	r25
    3de0:	af 93       	push	r26
    3de2:	bf 93       	push	r27
    3de4:	ef 93       	push	r30
    3de6:	ff 93       	push	r31
    3de8:	e0 91 88 22 	lds	r30, 0x2288
    3dec:	f0 91 89 22 	lds	r31, 0x2289
    3df0:	30 97       	sbiw	r30, 0x00	; 0
    3df2:	29 f0       	breq	.+10     	; 0x3dfe <__vector_110+0x3c>
    3df4:	80 91 7e 23 	lds	r24, 0x237E
    3df8:	90 91 7f 23 	lds	r25, 0x237F
    3dfc:	19 95       	eicall
    3dfe:	ff 91       	pop	r31
    3e00:	ef 91       	pop	r30
    3e02:	bf 91       	pop	r27
    3e04:	af 91       	pop	r26
    3e06:	9f 91       	pop	r25
    3e08:	8f 91       	pop	r24
    3e0a:	7f 91       	pop	r23
    3e0c:	6f 91       	pop	r22
    3e0e:	5f 91       	pop	r21
    3e10:	4f 91       	pop	r20
    3e12:	3f 91       	pop	r19
    3e14:	2f 91       	pop	r18
    3e16:	0f 90       	pop	r0
    3e18:	0b be       	out	0x3b, r0	; 59
    3e1a:	0f 90       	pop	r0
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	0f 90       	pop	r0
    3e20:	1f 90       	pop	r1
    3e22:	18 95       	reti

00003e24 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3e24:	1f 92       	push	r1
    3e26:	0f 92       	push	r0
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	0f 92       	push	r0
    3e2c:	11 24       	eor	r1, r1
    3e2e:	0b b6       	in	r0, 0x3b	; 59
    3e30:	0f 92       	push	r0
    3e32:	2f 93       	push	r18
    3e34:	3f 93       	push	r19
    3e36:	4f 93       	push	r20
    3e38:	5f 93       	push	r21
    3e3a:	6f 93       	push	r22
    3e3c:	7f 93       	push	r23
    3e3e:	8f 93       	push	r24
    3e40:	9f 93       	push	r25
    3e42:	af 93       	push	r26
    3e44:	bf 93       	push	r27
    3e46:	ef 93       	push	r30
    3e48:	ff 93       	push	r31
    3e4a:	e0 91 8a 22 	lds	r30, 0x228A
    3e4e:	f0 91 8b 22 	lds	r31, 0x228B
    3e52:	30 97       	sbiw	r30, 0x00	; 0
    3e54:	29 f0       	breq	.+10     	; 0x3e60 <__vector_111+0x3c>
    3e56:	80 91 80 23 	lds	r24, 0x2380
    3e5a:	90 91 81 23 	lds	r25, 0x2381
    3e5e:	19 95       	eicall
    3e60:	ff 91       	pop	r31
    3e62:	ef 91       	pop	r30
    3e64:	bf 91       	pop	r27
    3e66:	af 91       	pop	r26
    3e68:	9f 91       	pop	r25
    3e6a:	8f 91       	pop	r24
    3e6c:	7f 91       	pop	r23
    3e6e:	6f 91       	pop	r22
    3e70:	5f 91       	pop	r21
    3e72:	4f 91       	pop	r20
    3e74:	3f 91       	pop	r19
    3e76:	2f 91       	pop	r18
    3e78:	0f 90       	pop	r0
    3e7a:	0b be       	out	0x3b, r0	; 59
    3e7c:	0f 90       	pop	r0
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	0f 90       	pop	r0
    3e82:	1f 90       	pop	r1
    3e84:	18 95       	reti

00003e86 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3e86:	1f 92       	push	r1
    3e88:	0f 92       	push	r0
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	0f 92       	push	r0
    3e8e:	11 24       	eor	r1, r1
    3e90:	0b b6       	in	r0, 0x3b	; 59
    3e92:	0f 92       	push	r0
    3e94:	2f 93       	push	r18
    3e96:	3f 93       	push	r19
    3e98:	4f 93       	push	r20
    3e9a:	5f 93       	push	r21
    3e9c:	6f 93       	push	r22
    3e9e:	7f 93       	push	r23
    3ea0:	8f 93       	push	r24
    3ea2:	9f 93       	push	r25
    3ea4:	af 93       	push	r26
    3ea6:	bf 93       	push	r27
    3ea8:	ef 93       	push	r30
    3eaa:	ff 93       	push	r31
    3eac:	e0 91 8c 22 	lds	r30, 0x228C
    3eb0:	f0 91 8d 22 	lds	r31, 0x228D
    3eb4:	30 97       	sbiw	r30, 0x00	; 0
    3eb6:	29 f0       	breq	.+10     	; 0x3ec2 <__vector_112+0x3c>
    3eb8:	80 91 82 23 	lds	r24, 0x2382
    3ebc:	90 91 83 23 	lds	r25, 0x2383
    3ec0:	19 95       	eicall
    3ec2:	ff 91       	pop	r31
    3ec4:	ef 91       	pop	r30
    3ec6:	bf 91       	pop	r27
    3ec8:	af 91       	pop	r26
    3eca:	9f 91       	pop	r25
    3ecc:	8f 91       	pop	r24
    3ece:	7f 91       	pop	r23
    3ed0:	6f 91       	pop	r22
    3ed2:	5f 91       	pop	r21
    3ed4:	4f 91       	pop	r20
    3ed6:	3f 91       	pop	r19
    3ed8:	2f 91       	pop	r18
    3eda:	0f 90       	pop	r0
    3edc:	0b be       	out	0x3b, r0	; 59
    3ede:	0f 90       	pop	r0
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	0f 90       	pop	r0
    3ee4:	1f 90       	pop	r1
    3ee6:	18 95       	reti

00003ee8 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3ee8:	1f 92       	push	r1
    3eea:	0f 92       	push	r0
    3eec:	0f b6       	in	r0, 0x3f	; 63
    3eee:	0f 92       	push	r0
    3ef0:	11 24       	eor	r1, r1
    3ef2:	0b b6       	in	r0, 0x3b	; 59
    3ef4:	0f 92       	push	r0
    3ef6:	2f 93       	push	r18
    3ef8:	3f 93       	push	r19
    3efa:	4f 93       	push	r20
    3efc:	5f 93       	push	r21
    3efe:	6f 93       	push	r22
    3f00:	7f 93       	push	r23
    3f02:	8f 93       	push	r24
    3f04:	9f 93       	push	r25
    3f06:	af 93       	push	r26
    3f08:	bf 93       	push	r27
    3f0a:	ef 93       	push	r30
    3f0c:	ff 93       	push	r31
    3f0e:	e0 91 8e 22 	lds	r30, 0x228E
    3f12:	f0 91 8f 22 	lds	r31, 0x228F
    3f16:	30 97       	sbiw	r30, 0x00	; 0
    3f18:	29 f0       	breq	.+10     	; 0x3f24 <__vector_113+0x3c>
    3f1a:	80 91 84 23 	lds	r24, 0x2384
    3f1e:	90 91 85 23 	lds	r25, 0x2385
    3f22:	19 95       	eicall
    3f24:	ff 91       	pop	r31
    3f26:	ef 91       	pop	r30
    3f28:	bf 91       	pop	r27
    3f2a:	af 91       	pop	r26
    3f2c:	9f 91       	pop	r25
    3f2e:	8f 91       	pop	r24
    3f30:	7f 91       	pop	r23
    3f32:	6f 91       	pop	r22
    3f34:	5f 91       	pop	r21
    3f36:	4f 91       	pop	r20
    3f38:	3f 91       	pop	r19
    3f3a:	2f 91       	pop	r18
    3f3c:	0f 90       	pop	r0
    3f3e:	0b be       	out	0x3b, r0	; 59
    3f40:	0f 90       	pop	r0
    3f42:	0f be       	out	0x3f, r0	; 63
    3f44:	0f 90       	pop	r0
    3f46:	1f 90       	pop	r1
    3f48:	18 95       	reti

00003f4a <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3f4a:	1f 92       	push	r1
    3f4c:	0f 92       	push	r0
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	0f 92       	push	r0
    3f52:	11 24       	eor	r1, r1
    3f54:	0b b6       	in	r0, 0x3b	; 59
    3f56:	0f 92       	push	r0
    3f58:	2f 93       	push	r18
    3f5a:	3f 93       	push	r19
    3f5c:	4f 93       	push	r20
    3f5e:	5f 93       	push	r21
    3f60:	6f 93       	push	r22
    3f62:	7f 93       	push	r23
    3f64:	8f 93       	push	r24
    3f66:	9f 93       	push	r25
    3f68:	af 93       	push	r26
    3f6a:	bf 93       	push	r27
    3f6c:	ef 93       	push	r30
    3f6e:	ff 93       	push	r31
    3f70:	e0 91 9a 22 	lds	r30, 0x229A
    3f74:	f0 91 9b 22 	lds	r31, 0x229B
    3f78:	30 97       	sbiw	r30, 0x00	; 0
    3f7a:	29 f0       	breq	.+10     	; 0x3f86 <__vector_119+0x3c>
    3f7c:	80 91 90 23 	lds	r24, 0x2390
    3f80:	90 91 91 23 	lds	r25, 0x2391
    3f84:	19 95       	eicall
    3f86:	ff 91       	pop	r31
    3f88:	ef 91       	pop	r30
    3f8a:	bf 91       	pop	r27
    3f8c:	af 91       	pop	r26
    3f8e:	9f 91       	pop	r25
    3f90:	8f 91       	pop	r24
    3f92:	7f 91       	pop	r23
    3f94:	6f 91       	pop	r22
    3f96:	5f 91       	pop	r21
    3f98:	4f 91       	pop	r20
    3f9a:	3f 91       	pop	r19
    3f9c:	2f 91       	pop	r18
    3f9e:	0f 90       	pop	r0
    3fa0:	0b be       	out	0x3b, r0	; 59
    3fa2:	0f 90       	pop	r0
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	0f 90       	pop	r0
    3fa8:	1f 90       	pop	r1
    3faa:	18 95       	reti

00003fac <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3fac:	1f 92       	push	r1
    3fae:	0f 92       	push	r0
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	0f 92       	push	r0
    3fb4:	11 24       	eor	r1, r1
    3fb6:	0b b6       	in	r0, 0x3b	; 59
    3fb8:	0f 92       	push	r0
    3fba:	2f 93       	push	r18
    3fbc:	3f 93       	push	r19
    3fbe:	4f 93       	push	r20
    3fc0:	5f 93       	push	r21
    3fc2:	6f 93       	push	r22
    3fc4:	7f 93       	push	r23
    3fc6:	8f 93       	push	r24
    3fc8:	9f 93       	push	r25
    3fca:	af 93       	push	r26
    3fcc:	bf 93       	push	r27
    3fce:	ef 93       	push	r30
    3fd0:	ff 93       	push	r31
    3fd2:	e0 91 9c 22 	lds	r30, 0x229C
    3fd6:	f0 91 9d 22 	lds	r31, 0x229D
    3fda:	30 97       	sbiw	r30, 0x00	; 0
    3fdc:	29 f0       	breq	.+10     	; 0x3fe8 <__vector_120+0x3c>
    3fde:	80 91 92 23 	lds	r24, 0x2392
    3fe2:	90 91 93 23 	lds	r25, 0x2393
    3fe6:	19 95       	eicall
    3fe8:	ff 91       	pop	r31
    3fea:	ef 91       	pop	r30
    3fec:	bf 91       	pop	r27
    3fee:	af 91       	pop	r26
    3ff0:	9f 91       	pop	r25
    3ff2:	8f 91       	pop	r24
    3ff4:	7f 91       	pop	r23
    3ff6:	6f 91       	pop	r22
    3ff8:	5f 91       	pop	r21
    3ffa:	4f 91       	pop	r20
    3ffc:	3f 91       	pop	r19
    3ffe:	2f 91       	pop	r18
    4000:	0f 90       	pop	r0
    4002:	0b be       	out	0x3b, r0	; 59
    4004:	0f 90       	pop	r0
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	0f 90       	pop	r0
    400a:	1f 90       	pop	r1
    400c:	18 95       	reti

0000400e <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    400e:	1f 92       	push	r1
    4010:	0f 92       	push	r0
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	0f 92       	push	r0
    4016:	11 24       	eor	r1, r1
    4018:	0b b6       	in	r0, 0x3b	; 59
    401a:	0f 92       	push	r0
    401c:	2f 93       	push	r18
    401e:	3f 93       	push	r19
    4020:	4f 93       	push	r20
    4022:	5f 93       	push	r21
    4024:	6f 93       	push	r22
    4026:	7f 93       	push	r23
    4028:	8f 93       	push	r24
    402a:	9f 93       	push	r25
    402c:	af 93       	push	r26
    402e:	bf 93       	push	r27
    4030:	ef 93       	push	r30
    4032:	ff 93       	push	r31
    4034:	e0 91 9e 22 	lds	r30, 0x229E
    4038:	f0 91 9f 22 	lds	r31, 0x229F
    403c:	30 97       	sbiw	r30, 0x00	; 0
    403e:	29 f0       	breq	.+10     	; 0x404a <__vector_121+0x3c>
    4040:	80 91 94 23 	lds	r24, 0x2394
    4044:	90 91 95 23 	lds	r25, 0x2395
    4048:	19 95       	eicall
    404a:	ff 91       	pop	r31
    404c:	ef 91       	pop	r30
    404e:	bf 91       	pop	r27
    4050:	af 91       	pop	r26
    4052:	9f 91       	pop	r25
    4054:	8f 91       	pop	r24
    4056:	7f 91       	pop	r23
    4058:	6f 91       	pop	r22
    405a:	5f 91       	pop	r21
    405c:	4f 91       	pop	r20
    405e:	3f 91       	pop	r19
    4060:	2f 91       	pop	r18
    4062:	0f 90       	pop	r0
    4064:	0b be       	out	0x3b, r0	; 59
    4066:	0f 90       	pop	r0
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	0f 90       	pop	r0
    406c:	1f 90       	pop	r1
    406e:	18 95       	reti

00004070 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4070:	0e 94 24 26 	call	0x4c48	; 0x4c48 <_ZN11CLaserBoard14BeepClassErrorEv>
CSoundPlayer player;
CLaserControlApp App;

extern void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0);

extern "C" void __cxa_pure_virtual()
    4074:	fd cf       	rjmp	.-6      	; 0x4070 <__cxa_pure_virtual>

00004076 <_Z4swapj>:
uint16_t DATA[1024];

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    4076:	98 27       	eor	r25, r24
    4078:	89 27       	eor	r24, r25
    407a:	98 27       	eor	r25, r24
    407c:	08 95       	ret

0000407e <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    407e:	8c ed       	ldi	r24, 0xDC	; 220
    4080:	9b e2       	ldi	r25, 0x2B	; 43
    4082:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    4086:	8a ed       	ldi	r24, 0xDA	; 218
    4088:	9b e2       	ldi	r25, 0x2B	; 43
    408a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    408e:	81 ec       	ldi	r24, 0xC1	; 193
    4090:	9b e2       	ldi	r25, 0x2B	; 43
    4092:	0e 94 7d 22 	call	0x44fa	; 0x44fa <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    4096:	87 eb       	ldi	r24, 0xB7	; 183
    4098:	9b e2       	ldi	r25, 0x2B	; 43
    409a:	0e 94 66 25 	call	0x4acc	; 0x4acc <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    409e:	86 eb       	ldi	r24, 0xB6	; 182
    40a0:	9b e2       	ldi	r25, 0x2B	; 43
    40a2:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    40a6:	8a e9       	ldi	r24, 0x9A	; 154
    40a8:	9b e2       	ldi	r25, 0x2B	; 43
    40aa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN16CLaserControlAppC1Ev>
    40ae:	08 95       	ret

000040b0 <_GLOBAL__sub_D_dacSPI>:
    40b0:	8a e9       	ldi	r24, 0x9A	; 154
    40b2:	9b e2       	ldi	r25, 0x2B	; 43
    40b4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    40b8:	86 eb       	ldi	r24, 0xB6	; 182
    40ba:	9b e2       	ldi	r25, 0x2B	; 43
    40bc:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    40c0:	87 eb       	ldi	r24, 0xB7	; 183
    40c2:	9b e2       	ldi	r25, 0x2B	; 43
    40c4:	0e 94 67 25 	call	0x4ace	; 0x4ace <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    40c8:	81 ec       	ldi	r24, 0xC1	; 193
    40ca:	9b e2       	ldi	r25, 0x2B	; 43
    40cc:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    40d0:	8a ed       	ldi	r24, 0xDA	; 218
    40d2:	9b e2       	ldi	r25, 0x2B	; 43
    40d4:	0e 94 5e 25 	call	0x4abc	; 0x4abc <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    40d8:	8c ed       	ldi	r24, 0xDC	; 220
    40da:	9b e2       	ldi	r25, 0x2B	; 43
    40dc:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN4CSPID1Ev>
    40e0:	08 95       	ret

000040e2 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    40e2:	ef 92       	push	r14
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    40e8:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    40ea:	87 eb       	ldi	r24, 0xB7	; 183
    40ec:	9b e2       	ldi	r25, 0x2B	; 43
    40ee:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <_ZN11CLaserBoard12InitializeIOEv>
	// TimerE0, TimerE1
	player.Initialize();
    40f2:	86 eb       	ldi	r24, 0xB6	; 182
    40f4:	9b e2       	ldi	r25, 0x2B	; 43
    40f6:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    40fa:	0f 2e       	mov	r0, r31
    40fc:	f3 e0       	ldi	r31, 0x03	; 3
    40fe:	ef 2e       	mov	r14, r31
    4100:	f0 2d       	mov	r31, r0
    4102:	00 e0       	ldi	r16, 0x00	; 0
    4104:	23 e0       	ldi	r18, 0x03	; 3
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	61 e0       	ldi	r22, 0x01	; 1
    410a:	8c ed       	ldi	r24, 0xDC	; 220
    410c:	9b e2       	ldi	r25, 0x2B	; 43
    410e:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4112:	01 e0       	ldi	r16, 0x01	; 1
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	40 e0       	ldi	r20, 0x00	; 0
    4118:	6d e0       	ldi	r22, 0x0D	; 13
    411a:	8a ed       	ldi	r24, 0xDA	; 218
    411c:	9b e2       	ldi	r25, 0x2B	; 43
    411e:	0e 94 d6 24 	call	0x49ac	; 0x49ac <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    4122:	00 e0       	ldi	r16, 0x00	; 0
    4124:	11 e0       	ldi	r17, 0x01	; 1
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	31 e0       	ldi	r19, 0x01	; 1
    412a:	4a e9       	ldi	r20, 0x9A	; 154
    412c:	5b e2       	ldi	r21, 0x2B	; 43
    412e:	6a ed       	ldi	r22, 0xDA	; 218
    4130:	7b e2       	ldi	r23, 0x2B	; 43
    4132:	81 ec       	ldi	r24, 0xC1	; 193
    4134:	9b e2       	ldi	r25, 0x2B	; 43
    4136:	0e 94 83 22 	call	0x4506	; 0x4506 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    413a:	61 ec       	ldi	r22, 0xC1	; 193
    413c:	7b e2       	ldi	r23, 0x2B	; 43
    413e:	8a e9       	ldi	r24, 0x9A	; 154
    4140:	9b e2       	ldi	r25, 0x2B	; 43
    4142:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4146:	87 eb       	ldi	r24, 0xB7	; 183
    4148:	9b e2       	ldi	r25, 0x2B	; 43
    414a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    414e:	78 94       	sei
}
    4150:	1f 91       	pop	r17
    4152:	0f 91       	pop	r16
    4154:	ef 90       	pop	r14
    4156:	08 95       	ret

00004158 <main>:
{
	return (data >> 8) | (data << 8);
}
	 
int main(void)
{
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	ce 54       	subi	r28, 0x4E	; 78
    4162:	d1 09       	sbc	r29, r1
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	de bf       	out	0x3e, r29	; 62
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    4168:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_Z16SystemInitializev>
    416c:	2f ef       	ldi	r18, 0xFF	; 255
    416e:	87 ea       	ldi	r24, 0xA7	; 167
    4170:	91 e6       	ldi	r25, 0x61	; 97
    4172:	21 50       	subi	r18, 0x01	; 1
    4174:	80 40       	sbci	r24, 0x00	; 0
    4176:	90 40       	sbci	r25, 0x00	; 0
    4178:	e1 f7       	brne	.-8      	; 0x4172 <main+0x1a>
    417a:	00 c0       	rjmp	.+0      	; 0x417c <main+0x24>
    417c:	00 00       	nop
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(1000);
	laserBoard.Relay1On();
    417e:	87 eb       	ldi	r24, 0xB7	; 183
    4180:	9b e2       	ldi	r25, 0x2B	; 43
    4182:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <_ZN11CLaserBoard8Relay1OnEv>
    4186:	2f ef       	ldi	r18, 0xFF	; 255
    4188:	83 ec       	ldi	r24, 0xC3	; 195
    418a:	99 e0       	ldi	r25, 0x09	; 9
    418c:	21 50       	subi	r18, 0x01	; 1
    418e:	80 40       	sbci	r24, 0x00	; 0
    4190:	90 40       	sbci	r25, 0x00	; 0
    4192:	e1 f7       	brne	.-8      	; 0x418c <main+0x34>
    4194:	00 c0       	rjmp	.+0      	; 0x4196 <main+0x3e>
    4196:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    4198:	87 eb       	ldi	r24, 0xB7	; 183
    419a:	9b e2       	ldi	r25, 0x2B	; 43
    419c:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    41a0:	2f 96       	adiw	r28, 0x0f	; 15
    41a2:	1e ae       	std	Y+62, r1	; 0x3e
    41a4:	1f ae       	std	Y+63, r1	; 0x3f
    41a6:	2f 97       	sbiw	r28, 0x0f	; 15
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    41a8:	42 e0       	ldi	r20, 0x02	; 2
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	be 01       	movw	r22, r28
    41ae:	63 5b       	subi	r22, 0xB3	; 179
    41b0:	7f 4f       	sbci	r23, 0xFF	; 255
    41b2:	8c ed       	ldi	r24, 0xDC	; 220
    41b4:	9b e2       	ldi	r25, 0x2B	; 43
    41b6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    41ba:	8a e9       	ldi	r24, 0x9A	; 154
    41bc:	9b e2       	ldi	r25, 0x2B	; 43
    41be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN16CLaserControlApp5StartEv>
		
		laserBoard.PortCheck();
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    41c2:	18 ec       	ldi	r17, 0xC8	; 200
		{
			App.Run();
			
			DGUS_WRITETOFLASH flash_cmd;
			flash_cmd.en = 0x5A;
    41c4:	0f 2e       	mov	r0, r31
    41c6:	fa e5       	ldi	r31, 0x5A	; 90
    41c8:	6f 2e       	mov	r6, r31
    41ca:	f0 2d       	mov	r31, r0
			flash_cmd.op = 0x50;
    41cc:	0f 2e       	mov	r0, r31
    41ce:	f0 e5       	ldi	r31, 0x50	; 80
    41d0:	7f 2e       	mov	r7, r31
    41d2:	f0 2d       	mov	r31, r0
			flash_cmd.addr = 0x00009000; //400 Database.DAT
    41d4:	0f 2e       	mov	r0, r31
    41d6:	81 2c       	mov	r8, r1
    41d8:	f0 e9       	ldi	r31, 0x90	; 144
    41da:	9f 2e       	mov	r9, r31
    41dc:	a1 2c       	mov	r10, r1
    41de:	b1 2c       	mov	r11, r1
    41e0:	f0 2d       	mov	r31, r0
			flash_cmd.vp = swap(0x0400);
    41e2:	68 94       	set
    41e4:	cc 24       	eor	r12, r12
    41e6:	c2 f8       	bld	r12, 2
    41e8:	d1 2c       	mov	r13, r1
			flash_cmd.len = swap(32);
    41ea:	e1 2c       	mov	r14, r1
    41ec:	68 94       	set
    41ee:	ff 24       	eor	r15, r15
    41f0:	f5 f8       	bld	r15, 5
			
			              //                                *
			char str[33] = "Hello world! Vlad!Maya! 1234567!";
    41f2:	01 e2       	ldi	r16, 0x21	; 33
    41f4:	8f e3       	ldi	r24, 0x3F	; 63
    41f6:	9f e1       	ldi	r25, 0x1F	; 31
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <main+0xa0>
    41fc:	00 c0       	rjmp	.+0      	; 0x41fe <main+0xa6>
    41fe:	00 00       	nop
    while (1) 
    {
		// Loop delay
		_delay_ms(1);
		
		laserBoard.PortCheck();
    4200:	87 eb       	ldi	r24, 0xB7	; 183
    4202:	9b e2       	ldi	r25, 0x2B	; 43
    4204:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    4208:	40 91 98 23 	lds	r20, 0x2398
    420c:	50 91 99 23 	lds	r21, 0x2399
    4210:	ca 01       	movw	r24, r20
    4212:	01 96       	adiw	r24, 0x01	; 1
    4214:	80 93 98 23 	sts	0x2398, r24
    4218:	90 93 99 23 	sts	0x2399, r25
    421c:	9a 01       	movw	r18, r20
    421e:	36 95       	lsr	r19
    4220:	27 95       	ror	r18
    4222:	36 95       	lsr	r19
    4224:	27 95       	ror	r18
    4226:	36 95       	lsr	r19
    4228:	27 95       	ror	r18
    422a:	ab e7       	ldi	r26, 0x7B	; 123
    422c:	b4 e1       	ldi	r27, 0x14	; 20
    422e:	0e 94 00 29 	call	0x5200	; 0x5200 <__umulhisi3>
    4232:	96 95       	lsr	r25
    4234:	87 95       	ror	r24
    4236:	18 9f       	mul	r17, r24
    4238:	90 01       	movw	r18, r0
    423a:	19 9f       	mul	r17, r25
    423c:	30 0d       	add	r19, r0
    423e:	11 24       	eor	r1, r1
    4240:	42 17       	cp	r20, r18
    4242:	53 07       	cpc	r21, r19
    4244:	b9 f6       	brne	.-82     	; 0x41f4 <main+0x9c>
		{
			App.Run();
    4246:	8a e9       	ldi	r24, 0x9A	; 154
    4248:	9b e2       	ldi	r25, 0x2B	; 43
    424a:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN16CLaserControlApp3RunEv>
			
			DGUS_WRITETOFLASH flash_cmd;
			flash_cmd.en = 0x5A;
    424e:	24 96       	adiw	r28, 0x04	; 4
    4250:	6f ae       	std	Y+63, r6	; 0x3f
    4252:	24 97       	sbiw	r28, 0x04	; 4
			flash_cmd.op = 0x50;
    4254:	25 96       	adiw	r28, 0x05	; 5
    4256:	7f ae       	std	Y+63, r7	; 0x3f
    4258:	25 97       	sbiw	r28, 0x05	; 5
			flash_cmd.addr = 0x00009000; //400 Database.DAT
    425a:	29 96       	adiw	r28, 0x09	; 9
    425c:	8c ae       	std	Y+60, r8	; 0x3c
    425e:	9d ae       	std	Y+61, r9	; 0x3d
    4260:	ae ae       	std	Y+62, r10	; 0x3e
    4262:	bf ae       	std	Y+63, r11	; 0x3f
    4264:	29 97       	sbiw	r28, 0x09	; 9
			flash_cmd.vp = swap(0x0400);
    4266:	2b 96       	adiw	r28, 0x0b	; 11
    4268:	ce ae       	std	Y+62, r12	; 0x3e
    426a:	df ae       	std	Y+63, r13	; 0x3f
    426c:	2b 97       	sbiw	r28, 0x0b	; 11
			flash_cmd.len = swap(32);
    426e:	2d 96       	adiw	r28, 0x0d	; 13
    4270:	ee ae       	std	Y+62, r14	; 0x3e
    4272:	ff ae       	std	Y+63, r15	; 0x3f
    4274:	2d 97       	sbiw	r28, 0x0d	; 13
			
			              //                                *
			char str[33] = "Hello world! Vlad!Maya! 1234567!";
    4276:	ea ed       	ldi	r30, 0xDA	; 218
    4278:	f0 e2       	ldi	r31, 0x20	; 32
    427a:	de 01       	movw	r26, r28
    427c:	92 96       	adiw	r26, 0x22	; 34
    427e:	80 2f       	mov	r24, r16
    4280:	01 90       	ld	r0, Z+
    4282:	0d 92       	st	X+, r0
    4284:	8a 95       	dec	r24
    4286:	e1 f7       	brne	.-8      	; 0x4280 <main+0x128>
			char dst[33];
			
			ConvertData(dst, str, 33);
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	41 e2       	ldi	r20, 0x21	; 33
    428e:	50 e0       	ldi	r21, 0x00	; 0
    4290:	be 01       	movw	r22, r28
    4292:	6e 5d       	subi	r22, 0xDE	; 222
    4294:	7f 4f       	sbci	r23, 0xFF	; 255
    4296:	ce 01       	movw	r24, r28
    4298:	01 96       	adiw	r24, 0x01	; 1
    429a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z11ConvertDataPvS_jj>
			
			sender.WriteDataToRegister(STRUCT_ADDR_WRITETOFLASH,  (uint8_t*)&flash_cmd, sizeof(flash_cmd));
    429e:	2a e0       	ldi	r18, 0x0A	; 10
    42a0:	ae 01       	movw	r20, r28
    42a2:	4d 5b       	subi	r20, 0xBD	; 189
    42a4:	5f 4f       	sbci	r21, 0xFF	; 255
    42a6:	66 e5       	ldi	r22, 0x56	; 86
    42a8:	81 ec       	ldi	r24, 0xC1	; 193
    42aa:	9b e2       	ldi	r25, 0x2B	; 43
    42ac:	0e 94 da 22 	call	0x45b4	; 0x45b4 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
			sender.WaitMODBUSTransmitter();
    42b0:	81 ec       	ldi	r24, 0xC1	; 193
    42b2:	9b e2       	ldi	r25, 0x2B	; 43
    42b4:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			sender.WriteDataToSRAMAsync(0x0400, (uint16_t*)dst, 32);
    42b8:	20 e2       	ldi	r18, 0x20	; 32
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	ae 01       	movw	r20, r28
    42be:	4f 5f       	subi	r20, 0xFF	; 255
    42c0:	5f 4f       	sbci	r21, 0xFF	; 255
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	74 e0       	ldi	r23, 0x04	; 4
    42c6:	81 ec       	ldi	r24, 0xC1	; 193
    42c8:	9b e2       	ldi	r25, 0x2B	; 43
    42ca:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			sender.WaitMODBUSTransmitter();
    42ce:	81 ec       	ldi	r24, 0xC1	; 193
    42d0:	9b e2       	ldi	r25, 0x2B	; 43
    42d2:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			/*flash_cmd.en = 0;
			sender.WriteDataToRegister(STRUCT_ADDR_WRITETOFLASH,  (uint8_t*)&flash_cmd, 1);
			sender.WaitMODBUSTransmitter();*/
					
			sender.StartMODBUSRegisterTransaction(STRUCT_ADDR_WRITETOFLASH,  1);
    42d6:	41 e0       	ldi	r20, 0x01	; 1
    42d8:	66 e5       	ldi	r22, 0x56	; 86
    42da:	81 ec       	ldi	r24, 0xC1	; 193
    42dc:	9b e2       	ldi	r25, 0x2B	; 43
    42de:	0e 94 96 24 	call	0x492c	; 0x492c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
			sender.WaitMODBUSTransmitter();
    42e2:	81 ec       	ldi	r24, 0xC1	; 193
    42e4:	9b e2       	ldi	r25, 0x2B	; 43
    42e6:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			sender.WaitMODBUSListener();
    42ea:	81 ec       	ldi	r24, 0xC1	; 193
    42ec:	9b e2       	ldi	r25, 0x2B	; 43
    42ee:	0e 94 31 24 	call	0x4862	; 0x4862 <_ZN9CMBSender18WaitMODBUSListenerEv>
    42f2:	80 cf       	rjmp	.-256    	; 0x41f4 <main+0x9c>

000042f4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    42f4:	cf 93       	push	r28
    42f6:	df 93       	push	r29
    42f8:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    42fa:	ec 81       	ldd	r30, Y+4	; 0x04
    42fc:	fd 81       	ldd	r31, Y+5	; 0x05
    42fe:	8a ea       	ldi	r24, 0xAA	; 170
    4300:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4302:	ec 81       	ldd	r30, Y+4	; 0x04
    4304:	fd 81       	ldd	r31, Y+5	; 0x05
    4306:	8c ec       	ldi	r24, 0xCC	; 204
    4308:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    430a:	ec 81       	ldd	r30, Y+4	; 0x04
    430c:	fd 81       	ldd	r31, Y+5	; 0x05
    430e:	82 e0       	ldi	r24, 0x02	; 2
    4310:	82 0f       	add	r24, r18
    4312:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4314:	ec 81       	ldd	r30, Y+4	; 0x04
    4316:	fd 81       	ldd	r31, Y+5	; 0x05
    4318:	80 e8       	ldi	r24, 0x80	; 128
    431a:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    431c:	ec 81       	ldd	r30, Y+4	; 0x04
    431e:	fd 81       	ldd	r31, Y+5	; 0x05
    4320:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4322:	85 e0       	ldi	r24, 0x05	; 5
    4324:	82 0f       	add	r24, r18
    4326:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	21 15       	cp	r18, r1
    432c:	31 05       	cpc	r19, r1
    432e:	81 f0       	breq	.+32     	; 0x4350 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4330:	da 01       	movw	r26, r20
    4332:	42 0f       	add	r20, r18
    4334:	53 1f       	adc	r21, r19
    4336:	65 e0       	ldi	r22, 0x05	; 5
    4338:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    433a:	9d 91       	ld	r25, X+
    433c:	ec 81       	ldd	r30, Y+4	; 0x04
    433e:	fd 81       	ldd	r31, Y+5	; 0x05
    4340:	e6 0f       	add	r30, r22
    4342:	f7 1f       	adc	r31, r23
    4344:	90 83       	st	Z, r25
    4346:	6f 5f       	subi	r22, 0xFF	; 255
    4348:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    434a:	a4 17       	cp	r26, r20
    434c:	b5 07       	cpc	r27, r21
    434e:	a9 f7       	brne	.-22     	; 0x433a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	08 95       	ret

00004356 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4356:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4358:	a4 81       	ldd	r26, Z+4	; 0x04
    435a:	b5 81       	ldd	r27, Z+5	; 0x05
    435c:	8a ea       	ldi	r24, 0xAA	; 170
    435e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4360:	a4 81       	ldd	r26, Z+4	; 0x04
    4362:	b5 81       	ldd	r27, Z+5	; 0x05
    4364:	8c ec       	ldi	r24, 0xCC	; 204
    4366:	11 96       	adiw	r26, 0x01	; 1
    4368:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    436a:	a4 81       	ldd	r26, Z+4	; 0x04
    436c:	b5 81       	ldd	r27, Z+5	; 0x05
    436e:	83 e0       	ldi	r24, 0x03	; 3
    4370:	12 96       	adiw	r26, 0x02	; 2
    4372:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4374:	a4 81       	ldd	r26, Z+4	; 0x04
    4376:	b5 81       	ldd	r27, Z+5	; 0x05
    4378:	81 e8       	ldi	r24, 0x81	; 129
    437a:	13 96       	adiw	r26, 0x03	; 3
    437c:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    437e:	a4 81       	ldd	r26, Z+4	; 0x04
    4380:	b5 81       	ldd	r27, Z+5	; 0x05
    4382:	14 96       	adiw	r26, 0x04	; 4
    4384:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4386:	a4 81       	ldd	r26, Z+4	; 0x04
    4388:	b5 81       	ldd	r27, Z+5	; 0x05
    438a:	15 96       	adiw	r26, 0x05	; 5
    438c:	4c 93       	st	X, r20
	tx_frame_length = 6;
    438e:	86 e0       	ldi	r24, 0x06	; 6
    4390:	81 87       	std	Z+9, r24	; 0x09
    4392:	08 95       	ret

00004394 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4394:	0f 93       	push	r16
    4396:	1f 93       	push	r17
    4398:	cf 93       	push	r28
    439a:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    439c:	dc 01       	movw	r26, r24
    439e:	14 96       	adiw	r26, 0x04	; 4
    43a0:	ed 91       	ld	r30, X+
    43a2:	fc 91       	ld	r31, X
    43a4:	15 97       	sbiw	r26, 0x05	; 5
    43a6:	aa ea       	ldi	r26, 0xAA	; 170
    43a8:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    43aa:	ec 01       	movw	r28, r24
    43ac:	ec 81       	ldd	r30, Y+4	; 0x04
    43ae:	fd 81       	ldd	r31, Y+5	; 0x05
    43b0:	ac ec       	ldi	r26, 0xCC	; 204
    43b2:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    43b4:	ec 81       	ldd	r30, Y+4	; 0x04
    43b6:	fd 81       	ldd	r31, Y+5	; 0x05
    43b8:	a3 e0       	ldi	r26, 0x03	; 3
    43ba:	a2 0f       	add	r26, r18
    43bc:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    43be:	ec 81       	ldd	r30, Y+4	; 0x04
    43c0:	fd 81       	ldd	r31, Y+5	; 0x05
    43c2:	a2 e8       	ldi	r26, 0x82	; 130
    43c4:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    43c6:	ec 81       	ldd	r30, Y+4	; 0x04
    43c8:	fd 81       	ldd	r31, Y+5	; 0x05
    43ca:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    43cc:	ec 81       	ldd	r30, Y+4	; 0x04
    43ce:	fd 81       	ldd	r31, Y+5	; 0x05
    43d0:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    43d2:	66 e0       	ldi	r22, 0x06	; 6
    43d4:	62 0f       	add	r22, r18
    43d6:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    43d8:	36 95       	lsr	r19
    43da:	27 95       	ror	r18
    43dc:	21 15       	cp	r18, r1
    43de:	31 05       	cpc	r19, r1
    43e0:	e1 f0       	breq	.+56     	; 0x441a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    43e2:	e4 2f       	mov	r30, r20
    43e4:	f5 2f       	mov	r31, r21
    43e6:	2d 5f       	subi	r18, 0xFD	; 253
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ea:	22 0f       	add	r18, r18
    43ec:	33 1f       	adc	r19, r19
    43ee:	46 e0       	ldi	r20, 0x06	; 6
    43f0:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    43f2:	ec 01       	movw	r28, r24
    43f4:	ac 81       	ldd	r26, Y+4	; 0x04
    43f6:	bd 81       	ldd	r27, Y+5	; 0x05
    43f8:	a4 0f       	add	r26, r20
    43fa:	b5 1f       	adc	r27, r21
    43fc:	61 81       	ldd	r22, Z+1	; 0x01
    43fe:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4400:	ac 81       	ldd	r26, Y+4	; 0x04
    4402:	bd 81       	ldd	r27, Y+5	; 0x05
    4404:	a4 0f       	add	r26, r20
    4406:	b5 1f       	adc	r27, r21
    4408:	60 81       	ld	r22, Z
    440a:	32 96       	adiw	r30, 0x02	; 2
    440c:	11 96       	adiw	r26, 0x01	; 1
    440e:	6c 93       	st	X, r22
    4410:	4e 5f       	subi	r20, 0xFE	; 254
    4412:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4414:	42 17       	cp	r20, r18
    4416:	53 07       	cpc	r21, r19
    4418:	61 f7       	brne	.-40     	; 0x43f2 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    441a:	df 91       	pop	r29
    441c:	cf 91       	pop	r28
    441e:	1f 91       	pop	r17
    4420:	0f 91       	pop	r16
    4422:	08 95       	ret

00004424 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4424:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4426:	a4 81       	ldd	r26, Z+4	; 0x04
    4428:	b5 81       	ldd	r27, Z+5	; 0x05
    442a:	8a ea       	ldi	r24, 0xAA	; 170
    442c:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    442e:	a4 81       	ldd	r26, Z+4	; 0x04
    4430:	b5 81       	ldd	r27, Z+5	; 0x05
    4432:	8c ec       	ldi	r24, 0xCC	; 204
    4434:	11 96       	adiw	r26, 0x01	; 1
    4436:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4438:	a4 81       	ldd	r26, Z+4	; 0x04
    443a:	b5 81       	ldd	r27, Z+5	; 0x05
    443c:	84 e0       	ldi	r24, 0x04	; 4
    443e:	12 96       	adiw	r26, 0x02	; 2
    4440:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4442:	a4 81       	ldd	r26, Z+4	; 0x04
    4444:	b5 81       	ldd	r27, Z+5	; 0x05
    4446:	83 e8       	ldi	r24, 0x83	; 131
    4448:	13 96       	adiw	r26, 0x03	; 3
    444a:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    444c:	a4 81       	ldd	r26, Z+4	; 0x04
    444e:	b5 81       	ldd	r27, Z+5	; 0x05
    4450:	14 96       	adiw	r26, 0x04	; 4
    4452:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4454:	a4 81       	ldd	r26, Z+4	; 0x04
    4456:	b5 81       	ldd	r27, Z+5	; 0x05
    4458:	15 96       	adiw	r26, 0x05	; 5
    445a:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    445c:	a4 81       	ldd	r26, Z+4	; 0x04
    445e:	b5 81       	ldd	r27, Z+5	; 0x05
    4460:	16 96       	adiw	r26, 0x06	; 6
    4462:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4464:	87 e0       	ldi	r24, 0x07	; 7
    4466:	81 87       	std	Z+9, r24	; 0x09
    4468:	08 95       	ret

0000446a <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	ec 01       	movw	r28, r24
    4474:	cb 01       	movw	r24, r22
    4476:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4478:	6f 83       	std	Y+7, r22	; 0x07
    447a:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    447c:	4a 87       	std	Y+10, r20	; 0x0a
    447e:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4480:	0e 94 31 29 	call	0x5262	; 0x5262 <malloc>
    4484:	8a 83       	std	Y+2, r24	; 0x02
    4486:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4488:	c8 01       	movw	r24, r16
    448a:	0e 94 31 29 	call	0x5262	; 0x5262 <malloc>
    448e:	8c 83       	std	Y+4, r24	; 0x04
    4490:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4492:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4494:	1e 82       	std	Y+6, r1	; 0x06
}
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	08 95       	ret

000044a0 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    44a0:	cf 93       	push	r28
    44a2:	df 93       	push	r29
    44a4:	ec 01       	movw	r28, r24
	free(rx_buffer);
    44a6:	8a 81       	ldd	r24, Y+2	; 0x02
    44a8:	9b 81       	ldd	r25, Y+3	; 0x03
    44aa:	0e 94 c6 29 	call	0x538c	; 0x538c <free>
	free(tx_buffer);
    44ae:	8c 81       	ldd	r24, Y+4	; 0x04
    44b0:	9d 81       	ldd	r25, Y+5	; 0x05
    44b2:	0e 94 c6 29 	call	0x538c	; 0x538c <free>
}
    44b6:	df 91       	pop	r29
    44b8:	cf 91       	pop	r28
    44ba:	08 95       	ret

000044bc <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    44bc:	08 95       	ret

000044be <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    44be:	dc 01       	movw	r26, r24
    44c0:	57 96       	adiw	r26, 0x17	; 23
    44c2:	8d 91       	ld	r24, X+
    44c4:	9c 91       	ld	r25, X
    44c6:	58 97       	sbiw	r26, 0x18	; 24
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	39 f0       	breq	.+14     	; 0x44da <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    44cc:	dc 01       	movw	r26, r24
    44ce:	ed 91       	ld	r30, X+
    44d0:	fc 91       	ld	r31, X
    44d2:	02 80       	ldd	r0, Z+2	; 0x02
    44d4:	f3 81       	ldd	r31, Z+3	; 0x03
    44d6:	e0 2d       	mov	r30, r0
    44d8:	19 95       	eicall
    44da:	08 95       	ret

000044dc <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    44dc:	dc 01       	movw	r26, r24
    44de:	57 96       	adiw	r26, 0x17	; 23
    44e0:	8d 91       	ld	r24, X+
    44e2:	9c 91       	ld	r25, X
    44e4:	58 97       	sbiw	r26, 0x18	; 24
    44e6:	00 97       	sbiw	r24, 0x00	; 0
    44e8:	39 f0       	breq	.+14     	; 0x44f8 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    44ea:	dc 01       	movw	r26, r24
    44ec:	ed 91       	ld	r30, X+
    44ee:	fc 91       	ld	r31, X
    44f0:	04 80       	ldd	r0, Z+4	; 0x04
    44f2:	f5 81       	ldd	r31, Z+5	; 0x05
    44f4:	e0 2d       	mov	r30, r0
    44f6:	19 95       	eicall
    44f8:	08 95       	ret

000044fa <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    44fa:	2f ef       	ldi	r18, 0xFF	; 255
    44fc:	30 e2       	ldi	r19, 0x20	; 32
    44fe:	fc 01       	movw	r30, r24
    4500:	20 83       	st	Z, r18
    4502:	31 83       	std	Z+1, r19	; 0x01
    4504:	08 95       	ret

00004506 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4506:	cf 92       	push	r12
    4508:	df 92       	push	r13
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	0f 93       	push	r16
    4510:	1f 93       	push	r17
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	ec 01       	movw	r28, r24
    4518:	7b 01       	movw	r14, r22
    451a:	6a 01       	movw	r12, r20
    451c:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    451e:	2f 83       	std	Y+7, r18	; 0x07
    4520:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4522:	0a 87       	std	Y+10, r16	; 0x0a
    4524:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4526:	0e 94 31 29 	call	0x5262	; 0x5262 <malloc>
    452a:	8a 83       	std	Y+2, r24	; 0x02
    452c:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    452e:	c8 01       	movw	r24, r16
    4530:	0e 94 31 29 	call	0x5262	; 0x5262 <malloc>
    4534:	8c 83       	std	Y+4, r24	; 0x04
    4536:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    4538:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    453a:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    453c:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    453e:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4540:	18 8a       	std	Y+16, r1	; 0x10
    4542:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4544:	1a 8a       	std	Y+18, r1	; 0x12
    4546:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    4548:	87 e0       	ldi	r24, 0x07	; 7
    454a:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    454c:	82 e0       	ldi	r24, 0x02	; 2
    454e:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4550:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4552:	ec 86       	std	Y+12, r14	; 0x0c
    4554:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    4556:	d7 01       	movw	r26, r14
    4558:	ed 91       	ld	r30, X+
    455a:	fc 91       	ld	r31, X
    455c:	04 84       	ldd	r0, Z+12	; 0x0c
    455e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4560:	e0 2d       	mov	r30, r0
    4562:	49 ec       	ldi	r20, 0xC9	; 201
    4564:	53 e2       	ldi	r21, 0x23	; 35
    4566:	be 01       	movw	r22, r28
    4568:	c7 01       	movw	r24, r14
    456a:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    456c:	d7 01       	movw	r26, r14
    456e:	ed 91       	ld	r30, X+
    4570:	fc 91       	ld	r31, X
    4572:	06 84       	ldd	r0, Z+14	; 0x0e
    4574:	f7 85       	ldd	r31, Z+15	; 0x0f
    4576:	e0 2d       	mov	r30, r0
    4578:	4e e2       	ldi	r20, 0x2E	; 46
    457a:	54 e2       	ldi	r21, 0x24	; 36
    457c:	be 01       	movw	r22, r28
    457e:	c7 01       	movw	r24, r14
    4580:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4582:	c1 14       	cp	r12, r1
    4584:	d1 04       	cpc	r13, r1
    4586:	19 f0       	breq	.+6      	; 0x458e <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    4588:	cf 8a       	std	Y+23, r12	; 0x17
    458a:	d8 8e       	std	Y+24, r13	; 0x18
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    458e:	cf 8b       	std	Y+23, r28	; 0x17
    4590:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	1f 91       	pop	r17
    4598:	0f 91       	pop	r16
    459a:	ff 90       	pop	r15
    459c:	ef 90       	pop	r14
    459e:	df 90       	pop	r13
    45a0:	cf 90       	pop	r12
    45a2:	08 95       	ret

000045a4 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    45a4:	2f ef       	ldi	r18, 0xFF	; 255
    45a6:	30 e2       	ldi	r19, 0x20	; 32
    45a8:	fc 01       	movw	r30, r24
    45aa:	20 83       	st	Z, r18
    45ac:	31 83       	std	Z+1, r19	; 0x01
    45ae:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN16CMBEventsHandlerD1Ev>
    45b2:	08 95       	ret

000045b4 <_ZN9CMBSender19WriteDataToRegisterEhPhh>:
	StartMODBUSTransmitter();
}

// Send data methods synchronous
void CMBSender::WriteDataToRegister(uint8_t addr, uint8_t* data, uint8_t length)
{
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    45be:	e8 81       	ld	r30, Y
    45c0:	f9 81       	ldd	r31, Y+1	; 0x01
    45c2:	02 84       	ldd	r0, Z+10	; 0x0a
    45c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    45c6:	e0 2d       	mov	r30, r0
    45c8:	19 95       	eicall
	
	// Send data asynchronous
	for (uint16_t i = 0; i < tx_frame_length; i++)
    45ca:	89 85       	ldd	r24, Y+9	; 0x09
    45cc:	88 23       	and	r24, r24
    45ce:	11 f1       	breq	.+68     	; 0x4614 <_ZN9CMBSender19WriteDataToRegisterEhPhh+0x60>
    45d0:	00 e0       	ldi	r16, 0x00	; 0
    45d2:	10 e0       	ldi	r17, 0x00	; 0
	{
		while (pUSART->IsDataEmpty());
    45d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    45d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    45d8:	dc 01       	movw	r26, r24
    45da:	ed 91       	ld	r30, X+
    45dc:	fc 91       	ld	r31, X
    45de:	02 84       	ldd	r0, Z+10	; 0x0a
    45e0:	f3 85       	ldd	r31, Z+11	; 0x0b
    45e2:	e0 2d       	mov	r30, r0
    45e4:	19 95       	eicall
    45e6:	81 11       	cpse	r24, r1
    45e8:	f5 cf       	rjmp	.-22     	; 0x45d4 <_ZN9CMBSender19WriteDataToRegisterEhPhh+0x20>
		pUSART->SetTransmittingByte(tx_buffer[i]);
    45ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    45ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    45ee:	dc 01       	movw	r26, r24
    45f0:	ed 91       	ld	r30, X+
    45f2:	fc 91       	ld	r31, X
    45f4:	ac 81       	ldd	r26, Y+4	; 0x04
    45f6:	bd 81       	ldd	r27, Y+5	; 0x05
    45f8:	a0 0f       	add	r26, r16
    45fa:	b1 1f       	adc	r27, r17
    45fc:	04 80       	ldd	r0, Z+4	; 0x04
    45fe:	f5 81       	ldd	r31, Z+5	; 0x05
    4600:	e0 2d       	mov	r30, r0
    4602:	6c 91       	ld	r22, X
    4604:	19 95       	eicall
{
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
	
	// Send data asynchronous
	for (uint16_t i = 0; i < tx_frame_length; i++)
    4606:	0f 5f       	subi	r16, 0xFF	; 255
    4608:	1f 4f       	sbci	r17, 0xFF	; 255
    460a:	89 85       	ldd	r24, Y+9	; 0x09
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	08 17       	cp	r16, r24
    4610:	19 07       	cpc	r17, r25
    4612:	00 f3       	brcs	.-64     	; 0x45d4 <_ZN9CMBSender19WriteDataToRegisterEhPhh+0x20>
	{
		while (pUSART->IsDataEmpty());
		pUSART->SetTransmittingByte(tx_buffer[i]);
	}
}
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	08 95       	ret

0000461e <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
    4622:	ec 01       	movw	r28, r24
    4624:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    4626:	4e 85       	ldd	r20, Y+14	; 0x0e
    4628:	50 e0       	ldi	r21, 0x00	; 0
    462a:	4b 30       	cpi	r20, 0x0B	; 11
    462c:	51 05       	cpc	r21, r1
    462e:	08 f0       	brcs	.+2      	; 0x4632 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4630:	ad c0       	rjmp	.+346    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    4632:	fa 01       	movw	r30, r20
    4634:	88 27       	eor	r24, r24
    4636:	ee 5c       	subi	r30, 0xCE	; 206
    4638:	fe 4f       	sbci	r31, 0xFE	; 254
    463a:	8f 4f       	sbci	r24, 0xFF	; 255
    463c:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    4640:	9a 3a       	cpi	r25, 0xAA	; 170
    4642:	19 f4       	brne	.+6      	; 0x464a <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    4644:	82 e0       	ldi	r24, 0x02	; 2
    4646:	8e 87       	std	Y+14, r24	; 0x0e
    4648:	a1 c0       	rjmp	.+322    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	8e 87       	std	Y+14, r24	; 0x0e
    464e:	9e c0       	rjmp	.+316    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    4650:	9c 3c       	cpi	r25, 0xCC	; 204
    4652:	19 f4       	brne	.+6      	; 0x465a <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	8e 87       	std	Y+14, r24	; 0x0e
    4658:	99 c0       	rjmp	.+306    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	8e 87       	std	Y+14, r24	; 0x0e
    465e:	96 c0       	rjmp	.+300    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    4660:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    4662:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    4664:	1a 8a       	std	Y+18, r1	; 0x12
    4666:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    4668:	10 92 e2 2b 	sts	0x2BE2, r1
    466c:	10 92 e3 2b 	sts	0x2BE3, r1
			modbus_receiver_state = rx_FrameReceive;
    4670:	84 e0       	ldi	r24, 0x04	; 4
    4672:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4674:	8b c0       	rjmp	.+278    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    4676:	8f 85       	ldd	r24, Y+15	; 0x0f
    4678:	ea 81       	ldd	r30, Y+2	; 0x02
    467a:	fb 81       	ldd	r31, Y+3	; 0x03
    467c:	e8 0f       	add	r30, r24
    467e:	f1 1d       	adc	r31, r1
    4680:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    4682:	2f 85       	ldd	r18, Y+15	; 0x0f
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	4f 81       	ldd	r20, Y+7	; 0x07
    4688:	58 85       	ldd	r21, Y+8	; 0x08
    468a:	42 17       	cp	r20, r18
    468c:	53 07       	cpc	r21, r19
    468e:	18 f4       	brcc	.+6      	; 0x4696 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    4690:	89 e0       	ldi	r24, 0x09	; 9
    4692:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    4694:	7b c0       	rjmp	.+246    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4696:	2a 89       	ldd	r18, Y+18	; 0x12
    4698:	3b 89       	ldd	r19, Y+19	; 0x13
    469a:	29 27       	eor	r18, r25
    469c:	92 2f       	mov	r25, r18
    469e:	92 95       	swap	r25
    46a0:	92 27       	eor	r25, r18
    46a2:	09 2e       	mov	r0, r25
    46a4:	96 95       	lsr	r25
    46a6:	96 95       	lsr	r25
    46a8:	90 25       	eor	r25, r0
    46aa:	09 2e       	mov	r0, r25
    46ac:	96 95       	lsr	r25
    46ae:	90 25       	eor	r25, r0
    46b0:	97 70       	andi	r25, 0x07	; 7
    46b2:	02 2e       	mov	r0, r18
    46b4:	23 2f       	mov	r18, r19
    46b6:	96 95       	lsr	r25
    46b8:	07 94       	ror	r0
    46ba:	97 95       	ror	r25
    46bc:	30 2d       	mov	r19, r0
    46be:	29 27       	eor	r18, r25
    46c0:	06 94       	lsr	r0
    46c2:	97 95       	ror	r25
    46c4:	30 25       	eor	r19, r0
    46c6:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    46c8:	2a 8b       	std	Y+18, r18	; 0x12
    46ca:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    46cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    46ce:	8f 5f       	subi	r24, 0xFF	; 255
    46d0:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    46d2:	80 91 e2 2b 	lds	r24, 0x2BE2
    46d6:	90 91 e3 2b 	lds	r25, 0x2BE3
    46da:	01 96       	adiw	r24, 0x01	; 1
    46dc:	80 93 e2 2b 	sts	0x2BE2, r24
    46e0:	90 93 e3 2b 	sts	0x2BE3, r25
			if (rx_buffer_pos == rx_frame_length)
    46e4:	4f 85       	ldd	r20, Y+15	; 0x0f
    46e6:	8e 81       	ldd	r24, Y+6	; 0x06
    46e8:	48 13       	cpse	r20, r24
    46ea:	50 c0       	rjmp	.+160    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    46ec:	88 e0       	ldi	r24, 0x08	; 8
    46ee:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    46f0:	e8 81       	ld	r30, Y
    46f2:	f9 81       	ldd	r31, Y+1	; 0x01
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	6a 81       	ldd	r22, Y+2	; 0x02
    46f8:	7b 81       	ldd	r23, Y+3	; 0x03
    46fa:	01 90       	ld	r0, Z+
    46fc:	f0 81       	ld	r31, Z
    46fe:	e0 2d       	mov	r30, r0
    4700:	ce 01       	movw	r24, r28
    4702:	19 95       	eicall
				if (CallbackHandler != 0)
    4704:	8f 89       	ldd	r24, Y+23	; 0x17
    4706:	98 8d       	ldd	r25, Y+24	; 0x18
    4708:	00 97       	sbiw	r24, 0x00	; 0
    470a:	09 f4       	brne	.+2      	; 0x470e <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    470c:	3f c0       	rjmp	.+126    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    470e:	dc 01       	movw	r26, r24
    4710:	ed 91       	ld	r30, X+
    4712:	fc 91       	ld	r31, X
    4714:	4e 81       	ldd	r20, Y+6	; 0x06
    4716:	50 e0       	ldi	r21, 0x00	; 0
    4718:	6a 81       	ldd	r22, Y+2	; 0x02
    471a:	7b 81       	ldd	r23, Y+3	; 0x03
    471c:	01 90       	ld	r0, Z+
    471e:	f0 81       	ld	r31, Z
    4720:	e0 2d       	mov	r30, r0
    4722:	19 95       	eicall
    4724:	33 c0       	rjmp	.+102    	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    4726:	69 2f       	mov	r22, r25
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	68 8b       	std	Y+16, r22	; 0x10
    472c:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    472e:	86 e0       	ldi	r24, 0x06	; 6
    4730:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4732:	2c c0       	rjmp	.+88     	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    4734:	28 89       	ldd	r18, Y+16	; 0x10
    4736:	39 89       	ldd	r19, Y+17	; 0x11
    4738:	a9 01       	movw	r20, r18
    473a:	59 2b       	or	r21, r25
    473c:	48 8b       	std	Y+16, r20	; 0x10
    473e:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    4740:	2a 89       	ldd	r18, Y+18	; 0x12
    4742:	3b 89       	ldd	r19, Y+19	; 0x13
    4744:	42 17       	cp	r20, r18
    4746:	53 07       	cpc	r21, r19
    4748:	e9 f4       	brne	.+58     	; 0x4784 <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    474a:	88 e0       	ldi	r24, 0x08	; 8
    474c:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    474e:	e8 81       	ld	r30, Y
    4750:	f9 81       	ldd	r31, Y+1	; 0x01
    4752:	4e 81       	ldd	r20, Y+6	; 0x06
    4754:	50 e0       	ldi	r21, 0x00	; 0
    4756:	6a 81       	ldd	r22, Y+2	; 0x02
    4758:	7b 81       	ldd	r23, Y+3	; 0x03
    475a:	01 90       	ld	r0, Z+
    475c:	f0 81       	ld	r31, Z
    475e:	e0 2d       	mov	r30, r0
    4760:	ce 01       	movw	r24, r28
    4762:	19 95       	eicall
				if (CallbackHandler != 0)
    4764:	8f 89       	ldd	r24, Y+23	; 0x17
    4766:	98 8d       	ldd	r25, Y+24	; 0x18
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	81 f0       	breq	.+32     	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    476c:	dc 01       	movw	r26, r24
    476e:	ed 91       	ld	r30, X+
    4770:	fc 91       	ld	r31, X
    4772:	4e 81       	ldd	r20, Y+6	; 0x06
    4774:	50 e0       	ldi	r21, 0x00	; 0
    4776:	6a 81       	ldd	r22, Y+2	; 0x02
    4778:	7b 81       	ldd	r23, Y+3	; 0x03
    477a:	01 90       	ld	r0, Z+
    477c:	f0 81       	ld	r31, Z
    477e:	e0 2d       	mov	r30, r0
    4780:	19 95       	eicall
    4782:	04 c0       	rjmp	.+8      	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    4784:	89 e0       	ldi	r24, 0x09	; 9
    4786:	8e 87       	std	Y+14, r24	; 0x0e
    4788:	01 c0       	rjmp	.+2      	; 0x478c <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    478a:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    478c:	df 91       	pop	r29
    478e:	cf 91       	pop	r28
    4790:	08 95       	ret

00004792 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4798:	8c 85       	ldd	r24, Y+12	; 0x0c
    479a:	9d 85       	ldd	r25, Y+13	; 0x0d
    479c:	dc 01       	movw	r26, r24
    479e:	ed 91       	ld	r30, X+
    47a0:	fc 91       	ld	r31, X
    47a2:	02 80       	ldd	r0, Z+2	; 0x02
    47a4:	f3 81       	ldd	r31, Z+3	; 0x03
    47a6:	e0 2d       	mov	r30, r0
    47a8:	19 95       	eicall
	owner->OnReceiveByte(data);
    47aa:	68 2f       	mov	r22, r24
    47ac:	ce 01       	movw	r24, r28
    47ae:	0e 94 0f 23 	call	0x461e	; 0x461e <_ZN9CMBSender13OnReceiveByteEh>
}
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	08 95       	ret

000047b8 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    47b8:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    47ba:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    47bc:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    47be:	10 8a       	std	Z+16, r1	; 0x10
    47c0:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    47c2:	12 8a       	std	Z+18, r1	; 0x12
    47c4:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    47c6:	16 86       	std	Z+14, r1	; 0x0e
    47c8:	08 95       	ret

000047ca <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    47d0:	8c 89       	ldd	r24, Y+20	; 0x14
    47d2:	84 30       	cpi	r24, 0x04	; 4
    47d4:	38 f4       	brcc	.+14     	; 0x47e4 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    47d6:	82 30       	cpi	r24, 0x02	; 2
    47d8:	b8 f5       	brcc	.+110    	; 0x4848 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    47da:	88 23       	and	r24, r24
    47dc:	31 f0       	breq	.+12     	; 0x47ea <_ZN9CMBSender14OnTransmitByteEv+0x20>
    47de:	81 30       	cpi	r24, 0x01	; 1
    47e0:	d1 f0       	breq	.+52     	; 0x4816 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    47e2:	39 c0       	rjmp	.+114    	; 0x4856 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    47e4:	85 30       	cpi	r24, 0x05	; 5
    47e6:	81 f1       	breq	.+96     	; 0x4848 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    47e8:	36 c0       	rjmp	.+108    	; 0x4856 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    47ee:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    47f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    47f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    47f4:	2d 89       	ldd	r18, Y+21	; 0x15
    47f6:	dc 01       	movw	r26, r24
    47f8:	ed 91       	ld	r30, X+
    47fa:	fc 91       	ld	r31, X
    47fc:	ac 81       	ldd	r26, Y+4	; 0x04
    47fe:	bd 81       	ldd	r27, Y+5	; 0x05
    4800:	a2 0f       	add	r26, r18
    4802:	b1 1d       	adc	r27, r1
    4804:	04 80       	ldd	r0, Z+4	; 0x04
    4806:	f5 81       	ldd	r31, Z+5	; 0x05
    4808:	e0 2d       	mov	r30, r0
    480a:	6c 91       	ld	r22, X
    480c:	19 95       	eicall
			tx_buffer_pos++;
    480e:	8d 89       	ldd	r24, Y+21	; 0x15
    4810:	8f 5f       	subi	r24, 0xFF	; 255
    4812:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    4814:	20 c0       	rjmp	.+64     	; 0x4856 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4816:	8c 85       	ldd	r24, Y+12	; 0x0c
    4818:	9d 85       	ldd	r25, Y+13	; 0x0d
    481a:	2d 89       	ldd	r18, Y+21	; 0x15
    481c:	dc 01       	movw	r26, r24
    481e:	ed 91       	ld	r30, X+
    4820:	fc 91       	ld	r31, X
    4822:	ac 81       	ldd	r26, Y+4	; 0x04
    4824:	bd 81       	ldd	r27, Y+5	; 0x05
    4826:	a2 0f       	add	r26, r18
    4828:	b1 1d       	adc	r27, r1
    482a:	04 80       	ldd	r0, Z+4	; 0x04
    482c:	f5 81       	ldd	r31, Z+5	; 0x05
    482e:	e0 2d       	mov	r30, r0
    4830:	6c 91       	ld	r22, X
    4832:	19 95       	eicall
			tx_buffer_pos++;
    4834:	8d 89       	ldd	r24, Y+21	; 0x15
    4836:	8f 5f       	subi	r24, 0xFF	; 255
    4838:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    483a:	9d 89       	ldd	r25, Y+21	; 0x15
    483c:	89 85       	ldd	r24, Y+9	; 0x09
    483e:	98 13       	cpse	r25, r24
    4840:	0a c0       	rjmp	.+20     	; 0x4856 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    4842:	83 e0       	ldi	r24, 0x03	; 3
    4844:	8c 8b       	std	Y+20, r24	; 0x14
    4846:	07 c0       	rjmp	.+14     	; 0x4856 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    4848:	8e 89       	ldd	r24, Y+22	; 0x16
    484a:	88 23       	and	r24, r24
    484c:	19 f0       	breq	.+6      	; 0x4854 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    484e:	ce 01       	movw	r24, r28
    4850:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    4854:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret

0000485c <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    485c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_ZN9CMBSender14OnTransmitByteEv>
    4860:	08 95       	ret

00004862 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    4862:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    4864:	06 c0       	rjmp	.+12     	; 0x4872 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4866:	86 85       	ldd	r24, Z+14	; 0x0e
    4868:	89 30       	cpi	r24, 0x09	; 9
    486a:	41 f0       	breq	.+16     	; 0x487c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    486c:	86 85       	ldd	r24, Z+14	; 0x0e
    486e:	8a 30       	cpi	r24, 0x0A	; 10
    4870:	39 f0       	breq	.+14     	; 0x4880 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    4872:	86 85       	ldd	r24, Z+14	; 0x0e
    4874:	88 30       	cpi	r24, 0x08	; 8
    4876:	b9 f7       	brne	.-18     	; 0x4866 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    487c:	82 e0       	ldi	r24, 0x02	; 2
    487e:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    4880:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4882:	08 95       	ret

00004884 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    4884:	fc 01       	movw	r30, r24
    4886:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4888:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    488a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_ZN9CMBSender14OnTransmitByteEv>
    488e:	08 95       	ret

00004890 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4896:	e8 81       	ld	r30, Y
    4898:	f9 81       	ldd	r31, Y+1	; 0x01
    489a:	02 84       	ldd	r0, Z+10	; 0x0a
    489c:	f3 85       	ldd	r31, Z+11	; 0x0b
    489e:	e0 2d       	mov	r30, r0
    48a0:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    48a2:	ce 01       	movw	r24, r28
    48a4:	0e 94 42 24 	call	0x4884	; 0x4884 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	08 95       	ret

000048ae <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    48b4:	e8 81       	ld	r30, Y
    48b6:	f9 81       	ldd	r31, Y+1	; 0x01
    48b8:	06 84       	ldd	r0, Z+14	; 0x0e
    48ba:	f7 85       	ldd	r31, Z+15	; 0x0f
    48bc:	e0 2d       	mov	r30, r0
    48be:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    48c0:	ce 01       	movw	r24, r28
    48c2:	0e 94 42 24 	call	0x4884	; 0x4884 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    48c6:	df 91       	pop	r29
    48c8:	cf 91       	pop	r28
    48ca:	08 95       	ret

000048cc <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    48cc:	cf 93       	push	r28
    48ce:	df 93       	push	r29
    48d0:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    48d2:	e8 81       	ld	r30, Y
    48d4:	f9 81       	ldd	r31, Y+1	; 0x01
    48d6:	04 84       	ldd	r0, Z+12	; 0x0c
    48d8:	f5 85       	ldd	r31, Z+13	; 0x0d
    48da:	e0 2d       	mov	r30, r0
    48dc:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    48de:	ce 01       	movw	r24, r28
    48e0:	0e 94 42 24 	call	0x4884	; 0x4884 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    48e4:	df 91       	pop	r29
    48e6:	cf 91       	pop	r28
    48e8:	08 95       	ret

000048ea <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    48ea:	cf 93       	push	r28
    48ec:	df 93       	push	r29
    48ee:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    48f0:	e8 81       	ld	r30, Y
    48f2:	f9 81       	ldd	r31, Y+1	; 0x01
    48f4:	50 e0       	ldi	r21, 0x00	; 0
    48f6:	00 88       	ldd	r0, Z+16	; 0x10
    48f8:	f1 89       	ldd	r31, Z+17	; 0x11
    48fa:	e0 2d       	mov	r30, r0
    48fc:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    48fe:	ce 01       	movw	r24, r28
    4900:	0e 94 42 24 	call	0x4884	; 0x4884 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	08 95       	ret

0000490a <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    490a:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    490c:	06 c0       	rjmp	.+12     	; 0x491a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    490e:	84 89       	ldd	r24, Z+20	; 0x14
    4910:	84 30       	cpi	r24, 0x04	; 4
    4912:	41 f0       	breq	.+16     	; 0x4924 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    4914:	84 89       	ldd	r24, Z+20	; 0x14
    4916:	85 30       	cpi	r24, 0x05	; 5
    4918:	39 f0       	breq	.+14     	; 0x4928 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    491a:	84 89       	ldd	r24, Z+20	; 0x14
    491c:	83 30       	cpi	r24, 0x03	; 3
    491e:	b9 f7       	brne	.-18     	; 0x490e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    4924:	82 e0       	ldi	r24, 0x02	; 2
    4926:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    4928:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    492a:	08 95       	ret

0000492c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    492c:	21 e0       	ldi	r18, 0x01	; 1
    492e:	fc 01       	movw	r30, r24
    4930:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    4932:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    4936:	08 95       	ret

00004938 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    4938:	21 e0       	ldi	r18, 0x01	; 1
    493a:	fc 01       	movw	r30, r24
    493c:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    493e:	0e 94 75 24 	call	0x48ea	; 0x48ea <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    4942:	08 95       	ret

00004944 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    4944:	0f 93       	push	r16
    4946:	1f 93       	push	r17
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	8c 01       	movw	r16, r24
    494e:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    4950:	98 81       	ld	r25, Y
    4952:	91 38       	cpi	r25, 0x81	; 129
    4954:	69 f4       	brne	.+26     	; 0x4970 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    4956:	d8 01       	movw	r26, r16
    4958:	ed 91       	ld	r30, X+
    495a:	fc 91       	ld	r31, X
    495c:	04 80       	ldd	r0, Z+4	; 0x04
    495e:	f5 81       	ldd	r31, Z+5	; 0x05
    4960:	e0 2d       	mov	r30, r0
    4962:	2a 81       	ldd	r18, Y+2	; 0x02
    4964:	ab 01       	movw	r20, r22
    4966:	4d 5f       	subi	r20, 0xFD	; 253
    4968:	5f 4f       	sbci	r21, 0xFF	; 255
    496a:	69 81       	ldd	r22, Y+1	; 0x01
    496c:	c8 01       	movw	r24, r16
    496e:	19 95       	eicall
	}
	if (data[0] == 0x83)
    4970:	98 81       	ld	r25, Y
    4972:	93 38       	cpi	r25, 0x83	; 131
    4974:	99 f4       	brne	.+38     	; 0x499c <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4976:	d8 01       	movw	r26, r16
    4978:	ed 91       	ld	r30, X+
    497a:	fc 91       	ld	r31, X
    497c:	2b 81       	ldd	r18, Y+3	; 0x03
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	ae 01       	movw	r20, r28
    4982:	4c 5f       	subi	r20, 0xFC	; 252
    4984:	5f 4f       	sbci	r21, 0xFF	; 255
    4986:	69 81       	ldd	r22, Y+1	; 0x01
    4988:	70 e0       	ldi	r23, 0x00	; 0
    498a:	76 2f       	mov	r23, r22
    498c:	66 27       	eor	r22, r22
    498e:	8a 81       	ldd	r24, Y+2	; 0x02
    4990:	68 2b       	or	r22, r24
    4992:	02 80       	ldd	r0, Z+2	; 0x02
    4994:	f3 81       	ldd	r31, Z+3	; 0x03
    4996:	e0 2d       	mov	r30, r0
    4998:	c8 01       	movw	r24, r16
    499a:	19 95       	eicall
	}
}
    499c:	df 91       	pop	r29
    499e:	cf 91       	pop	r28
    49a0:	1f 91       	pop	r17
    49a2:	0f 91       	pop	r16
    49a4:	08 95       	ret

000049a6 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    49a6:	0e 94 a2 24 	call	0x4944	; 0x4944 <_ZN9CMBSender18ProcessTransactionEPhj>
    49aa:	08 95       	ret

000049ac <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    49ac:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    49ae:	e0 e6       	ldi	r30, 0x60	; 96
    49b0:	f6 e0       	ldi	r31, 0x06	; 6
    49b2:	88 e0       	ldi	r24, 0x08	; 8
    49b4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    49b6:	84 e0       	ldi	r24, 0x04	; 4
    49b8:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    49ba:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    49bc:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    49be:	e0 ea       	ldi	r30, 0xA0	; 160
    49c0:	f9 e0       	ldi	r31, 0x09	; 9
    49c2:	84 e1       	ldi	r24, 0x14	; 20
    49c4:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    49c6:	88 e1       	ldi	r24, 0x18	; 24
    49c8:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    49ca:	84 81       	ldd	r24, Z+4	; 0x04
    49cc:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    49ce:	41 30       	cpi	r20, 0x01	; 1
    49d0:	19 f0       	breq	.+6      	; 0x49d8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    49d2:	42 30       	cpi	r20, 0x02	; 2
    49d4:	19 f0       	breq	.+6      	; 0x49dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    49d6:	04 c0       	rjmp	.+8      	; 0x49e0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    49d8:	80 e2       	ldi	r24, 0x20	; 32
    49da:	03 c0       	rjmp	.+6      	; 0x49e2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    49dc:	80 e3       	ldi	r24, 0x30	; 48
		break;
    49de:	01 c0       	rjmp	.+2      	; 0x49e2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    49e0:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    49e2:	22 23       	and	r18, r18
    49e4:	19 f0       	breq	.+6      	; 0x49ec <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    49e6:	21 30       	cpi	r18, 0x01	; 1
    49e8:	19 f0       	breq	.+6      	; 0x49f0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    49ea:	03 c0       	rjmp	.+6      	; 0x49f2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    49ec:	87 7f       	andi	r24, 0xF7	; 247
		break;
    49ee:	01 c0       	rjmp	.+2      	; 0x49f2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    49f0:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    49f2:	01 11       	cpse	r16, r1
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    49f6:	93 e4       	ldi	r25, 0x43	; 67
    49f8:	01 c0       	rjmp	.+2      	; 0x49fc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    49fa:	93 e0       	ldi	r25, 0x03	; 3
    49fc:	89 2b       	or	r24, r25
    49fe:	e0 ea       	ldi	r30, 0xA0	; 160
    4a00:	f9 e0       	ldi	r31, 0x09	; 9
    4a02:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    4a04:	70 e0       	ldi	r23, 0x00	; 0
    4a06:	db 01       	movw	r26, r22
    4a08:	aa 5d       	subi	r26, 0xDA	; 218
    4a0a:	bf 4d       	sbci	r27, 0xDF	; 223
    4a0c:	8c 91       	ld	r24, X
    4a0e:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    4a10:	db 01       	movw	r26, r22
    4a12:	aa 5f       	subi	r26, 0xFA	; 250
    4a14:	bf 4d       	sbci	r27, 0xDF	; 223
    4a16:	8c 91       	ld	r24, X
    4a18:	82 95       	swap	r24
    4a1a:	80 7f       	andi	r24, 0xF0	; 240
    4a1c:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    4a1e:	0f 91       	pop	r16
    4a20:	08 95       	ret

00004a22 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    4a22:	80 91 a0 09 	lds	r24, 0x09A0
}
    4a26:	08 95       	ret

00004a28 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    4a28:	60 93 a0 09 	sts	0x09A0, r22
    4a2c:	08 95       	ret

00004a2e <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    4a2e:	80 91 a1 09 	lds	r24, 0x09A1
    4a32:	86 fb       	bst	r24, 6
    4a34:	88 27       	eor	r24, r24
    4a36:	80 f9       	bld	r24, 0
}
    4a38:	91 e0       	ldi	r25, 0x01	; 1
    4a3a:	89 27       	eor	r24, r25
    4a3c:	08 95       	ret

00004a3e <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    4a3e:	80 91 a1 09 	lds	r24, 0x09A1
    4a42:	80 95       	com	r24
}
    4a44:	88 1f       	adc	r24, r24
    4a46:	88 27       	eor	r24, r24
    4a48:	88 1f       	adc	r24, r24
    4a4a:	08 95       	ret

00004a4c <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    4a4c:	80 91 a1 09 	lds	r24, 0x09A1
    4a50:	85 fb       	bst	r24, 5
    4a52:	88 27       	eor	r24, r24
    4a54:	80 f9       	bld	r24, 0
}
    4a56:	91 e0       	ldi	r25, 0x01	; 1
    4a58:	89 27       	eor	r24, r25
    4a5a:	08 95       	ret

00004a5c <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    4a5c:	60 93 52 23 	sts	0x2352, r22
    4a60:	70 93 53 23 	sts	0x2353, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    4a64:	40 93 5c 22 	sts	0x225C, r20
    4a68:	50 93 5d 22 	sts	0x225D, r21
    4a6c:	08 95       	ret

00004a6e <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    4a6e:	60 93 56 23 	sts	0x2356, r22
    4a72:	70 93 57 23 	sts	0x2357, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    4a76:	40 93 60 22 	sts	0x2260, r20
    4a7a:	50 93 61 22 	sts	0x2261, r21
    4a7e:	08 95       	ret

00004a80 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    4a80:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    4a82:	8b e6       	ldi	r24, 0x6B	; 107
    4a84:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    4a86:	80 ea       	ldi	r24, 0xA0	; 160
    4a88:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    4a8a:	89 e0       	ldi	r24, 0x09	; 9
    4a8c:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    4a8e:	12 86       	std	Z+10, r1	; 0x0a
    4a90:	08 95       	ret

00004a92 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    4a92:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    4a94:	8c e6       	ldi	r24, 0x6C	; 108
    4a96:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    4a98:	80 ea       	ldi	r24, 0xA0	; 160
    4a9a:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    4a9c:	89 e0       	ldi	r24, 0x09	; 9
    4a9e:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    4aa0:	16 86       	std	Z+14, r1	; 0x0e
    4aa2:	08 95       	ret

00004aa4 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
    4aa8:	ec 01       	movw	r28, r24
    4aaa:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN6CUSARTC1Ev>
    4aae:	85 e1       	ldi	r24, 0x15	; 21
    4ab0:	91 e2       	ldi	r25, 0x21	; 33
    4ab2:	88 83       	st	Y, r24
    4ab4:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    4ab6:	df 91       	pop	r29
    4ab8:	cf 91       	pop	r28
    4aba:	08 95       	ret

00004abc <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    4abc:	25 e1       	ldi	r18, 0x15	; 21
    4abe:	31 e2       	ldi	r19, 0x21	; 33
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	20 83       	st	Z, r18
    4ac4:	31 83       	std	Z+1, r19	; 0x01
    4ac6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN6CUSARTD1Ev>
    4aca:	08 95       	ret

00004acc <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
    4acc:	08 95       	ret

00004ace <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
    4ace:	08 95       	ret

00004ad0 <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    4ad4:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
    4ad6:	e0 e4       	ldi	r30, 0x40	; 64
    4ad8:	f6 e0       	ldi	r31, 0x06	; 6
    4ada:	2f ef       	ldi	r18, 0xFF	; 255
    4adc:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4ade:	98 ea       	ldi	r25, 0xA8	; 168
    4ae0:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4ae2:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4ae4:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4ae6:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4ae8:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4aea:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4aec:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    4aee:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
    4af0:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
    4af2:	a0 e8       	ldi	r26, 0x80	; 128
    4af4:	b6 e0       	ldi	r27, 0x06	; 6
    4af6:	88 e0       	ldi	r24, 0x08	; 8
    4af8:	11 96       	adiw	r26, 0x01	; 1
    4afa:	8c 93       	st	X, r24
    4afc:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
    4afe:	53 96       	adiw	r26, 0x13	; 19
    4b00:	1c 92       	st	X, r1
    4b02:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
    4b04:	14 96       	adiw	r26, 0x04	; 4
    4b06:	1c 92       	st	X, r1
    4b08:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b0a:	e0 ea       	ldi	r30, 0xA0	; 160
    4b0c:	f6 e0       	ldi	r31, 0x06	; 6
    4b0e:	90 ec       	ldi	r25, 0xC0	; 192
    4b10:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b12:	80 e8       	ldi	r24, 0x80	; 128
    4b14:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b16:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b18:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b1a:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b1c:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b1e:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b20:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
    4b22:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
    4b24:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
    4b26:	e0 e6       	ldi	r30, 0x60	; 96
    4b28:	f6 e0       	ldi	r31, 0x06	; 6
    4b2a:	21 e1       	ldi	r18, 0x11	; 17
    4b2c:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b2e:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b30:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
    4b32:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
    4b34:	93 e0       	ldi	r25, 0x03	; 3
    4b36:	11 96       	adiw	r26, 0x01	; 1
    4b38:	9c 93       	st	X, r25
    4b3a:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b3c:	50 96       	adiw	r26, 0x10	; 16
    4b3e:	8c 93       	st	X, r24
    4b40:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4b42:	51 96       	adiw	r26, 0x11	; 17
    4b44:	8c 93       	st	X, r24
    4b46:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
    4b48:	14 96       	adiw	r26, 0x04	; 4
    4b4a:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    4b4c:	e0 ea       	ldi	r30, 0xA0	; 160
    4b4e:	f0 e0       	ldi	r31, 0x00	; 0
    4b50:	82 81       	ldd	r24, Z+2	; 0x02
    4b52:	81 60       	ori	r24, 0x01	; 1
    4b54:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
    4b56:	82 81       	ldd	r24, Z+2	; 0x02
    4b58:	82 60       	ori	r24, 0x02	; 2
    4b5a:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    4b5c:	82 81       	ldd	r24, Z+2	; 0x02
    4b5e:	84 60       	ori	r24, 0x04	; 4
    4b60:	82 83       	std	Z+2, r24	; 0x02
    4b62:	fe 01       	movw	r30, r28
    4b64:	9e 01       	movw	r18, r28
    4b66:	28 5f       	subi	r18, 0xF8	; 248
    4b68:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
    4b6a:	91 e0       	ldi	r25, 0x01	; 1
    4b6c:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
    4b6e:	e2 17       	cp	r30, r18
    4b70:	f3 07       	cpc	r31, r19
    4b72:	e1 f7       	brne	.-8      	; 0x4b6c <_ZN11CLaserBoard12InitializeIOEv+0x9c>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
    4b74:	8a e0       	ldi	r24, 0x0A	; 10
    4b76:	88 87       	std	Y+8, r24	; 0x08
}
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	08 95       	ret

00004b7e <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
    4b7e:	e0 e5       	ldi	r30, 0x50	; 80
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	8b ec       	ldi	r24, 0xCB	; 203
    4b84:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
    4b86:	80 81       	ld	r24, Z
    4b88:	88 60       	ori	r24, 0x08	; 8
    4b8a:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
    4b8c:	81 81       	ldd	r24, Z+1	; 0x01
    4b8e:	83 ff       	sbrs	r24, 3
    4b90:	fd cf       	rjmp	.-6      	; 0x4b8c <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
    4b92:	e0 e5       	ldi	r30, 0x50	; 80
    4b94:	f0 e0       	ldi	r31, 0x00	; 0
    4b96:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
    4b98:	98 ed       	ldi	r25, 0xD8	; 216
    4b9a:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
    4b9c:	84 ec       	ldi	r24, 0xC4	; 196
    4b9e:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
    4ba0:	80 81       	ld	r24, Z
    4ba2:	80 61       	ori	r24, 0x10	; 16
    4ba4:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    4ba6:	e0 e4       	ldi	r30, 0x40	; 64
    4ba8:	f0 e0       	ldi	r31, 0x00	; 0
    4baa:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
    4bac:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
    4bae:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
    4bb0:	e0 e5       	ldi	r30, 0x50	; 80
    4bb2:	f0 e0       	ldi	r31, 0x00	; 0
    4bb4:	81 81       	ldd	r24, Z+1	; 0x01
    4bb6:	84 ff       	sbrs	r24, 4
    4bb8:	fd cf       	rjmp	.-6      	; 0x4bb4 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
    4bba:	e0 e4       	ldi	r30, 0x40	; 64
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	80 81       	ld	r24, Z
    4bc0:	88 7f       	andi	r24, 0xF8	; 248
    4bc2:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
    4bc4:	98 ed       	ldi	r25, 0xD8	; 216
    4bc6:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
    4bc8:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
    4bca:	a0 e5       	ldi	r26, 0x50	; 80
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	8c 91       	ld	r24, X
    4bd0:	88 7f       	andi	r24, 0xF8	; 248
    4bd2:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
    4bd4:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
    4bd6:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
    4bdc:	e0 eb       	ldi	r30, 0xB0	; 176
    4bde:	f0 e0       	ldi	r31, 0x00	; 0
    4be0:	84 81       	ldd	r24, Z+4	; 0x04
    4be2:	8c 7f       	andi	r24, 0xFC	; 252
    4be4:	84 83       	std	Z+4, r24	; 0x04
    4be6:	08 95       	ret

00004be8 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	80 93 62 06 	sts	0x0662, r24
    4bee:	08 95       	ret

00004bf0 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
    4bf0:	80 e1       	ldi	r24, 0x10	; 16
    4bf2:	80 93 62 06 	sts	0x0662, r24
    4bf6:	08 95       	ret

00004bf8 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	80 93 61 06 	sts	0x0661, r24
    4bfe:	08 95       	ret

00004c00 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    4c00:	80 e1       	ldi	r24, 0x10	; 16
    4c02:	80 93 61 06 	sts	0x0661, r24
    4c06:	08 95       	ret

00004c08 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    4c08:	82 e0       	ldi	r24, 0x02	; 2
    4c0a:	80 93 85 06 	sts	0x0685, r24
    4c0e:	08 95       	ret

00004c10 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    4c10:	82 e0       	ldi	r24, 0x02	; 2
    4c12:	80 93 86 06 	sts	0x0686, r24
    4c16:	08 95       	ret

00004c18 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    4c18:	f8 94       	cli
    4c1a:	84 e6       	ldi	r24, 0x64	; 100
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    4c1e:	e0 e8       	ldi	r30, 0x80	; 128
    4c20:	f6 e0       	ldi	r31, 0x06	; 6
    4c22:	28 e0       	ldi	r18, 0x08	; 8
    4c24:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c26:	af e9       	ldi	r26, 0x9F	; 159
    4c28:	bf e0       	ldi	r27, 0x0F	; 15
    4c2a:	11 97       	sbiw	r26, 0x01	; 1
    4c2c:	f1 f7       	brne	.-4      	; 0x4c2a <_ZN11CLaserBoard4BeepEv+0x12>
    4c2e:	00 c0       	rjmp	.+0      	; 0x4c30 <_ZN11CLaserBoard4BeepEv+0x18>
    4c30:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    4c32:	26 83       	std	Z+6, r18	; 0x06
    4c34:	af e9       	ldi	r26, 0x9F	; 159
    4c36:	bf e0       	ldi	r27, 0x0F	; 15
    4c38:	11 97       	sbiw	r26, 0x01	; 1
    4c3a:	f1 f7       	brne	.-4      	; 0x4c38 <_ZN11CLaserBoard4BeepEv+0x20>
    4c3c:	00 c0       	rjmp	.+0      	; 0x4c3e <_ZN11CLaserBoard4BeepEv+0x26>
    4c3e:	00 00       	nop
    4c40:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    4c42:	81 f7       	brne	.-32     	; 0x4c24 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    4c44:	78 94       	sei
    4c46:	08 95       	ret

00004c48 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    4c48:	f8 94       	cli
    4c4a:	45 e0       	ldi	r20, 0x05	; 5
    4c4c:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    4c4e:	64 e6       	ldi	r22, 0x64	; 100
    4c50:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    4c52:	e0 e8       	ldi	r30, 0x80	; 128
    4c54:	f6 e0       	ldi	r31, 0x06	; 6
    4c56:	28 e0       	ldi	r18, 0x08	; 8
    4c58:	1c c0       	rjmp	.+56     	; 0x4c92 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    4c5a:	25 83       	std	Z+5, r18	; 0x05
    4c5c:	af e9       	ldi	r26, 0x9F	; 159
    4c5e:	bf e0       	ldi	r27, 0x0F	; 15
    4c60:	11 97       	sbiw	r26, 0x01	; 1
    4c62:	f1 f7       	brne	.-4      	; 0x4c60 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    4c64:	00 c0       	rjmp	.+0      	; 0x4c66 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    4c66:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    4c68:	26 83       	std	Z+6, r18	; 0x06
    4c6a:	af e9       	ldi	r26, 0x9F	; 159
    4c6c:	bf e0       	ldi	r27, 0x0F	; 15
    4c6e:	11 97       	sbiw	r26, 0x01	; 1
    4c70:	f1 f7       	brne	.-4      	; 0x4c6e <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    4c72:	00 c0       	rjmp	.+0      	; 0x4c74 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    4c74:	00 00       	nop
    4c76:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    4c78:	81 f7       	brne	.-32     	; 0x4c5a <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c7a:	bf ef       	ldi	r27, 0xFF	; 255
    4c7c:	73 ec       	ldi	r23, 0xC3	; 195
    4c7e:	89 e0       	ldi	r24, 0x09	; 9
    4c80:	b1 50       	subi	r27, 0x01	; 1
    4c82:	70 40       	sbci	r23, 0x00	; 0
    4c84:	80 40       	sbci	r24, 0x00	; 0
    4c86:	e1 f7       	brne	.-8      	; 0x4c80 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    4c88:	00 c0       	rjmp	.+0      	; 0x4c8a <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    4c8a:	00 00       	nop
    4c8c:	41 50       	subi	r20, 0x01	; 1
    4c8e:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    4c90:	19 f0       	breq	.+6      	; 0x4c98 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    4c92:	86 2f       	mov	r24, r22
    4c94:	93 2f       	mov	r25, r19
    4c96:	e1 cf       	rjmp	.-62     	; 0x4c5a <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    4c98:	78 94       	sei
    4c9a:	08 95       	ret

00004c9c <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
    4c9c:	cf 93       	push	r28
    4c9e:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
    4ca0:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
    4ca4:	18 96       	adiw	r26, 0x08	; 8
    4ca6:	3c 91       	ld	r19, X
    4ca8:	18 97       	sbiw	r26, 0x08	; 8
    4caa:	fc 01       	movw	r30, r24
    4cac:	ac 01       	movw	r20, r24
    4cae:	48 5f       	subi	r20, 0xF8	; 248
    4cb0:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
    4cb2:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
    4cb4:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
    4cb6:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
    4cb8:	89 2f       	mov	r24, r25
    4cba:	86 23       	and	r24, r22
    4cbc:	41 f0       	breq	.+16     	; 0x4cce <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
    4cbe:	80 81       	ld	r24, Z
    4cc0:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
    4cc2:	81 38       	cpi	r24, 0x81	; 129
    4cc4:	10 f4       	brcc	.+4      	; 0x4cca <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
    4cc6:	80 83       	st	Z, r24
    4cc8:	08 c0       	rjmp	.+16     	; 0x4cda <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
    4cca:	70 83       	st	Z, r23
    4ccc:	06 c0       	rjmp	.+12     	; 0x4cda <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
    4cce:	80 81       	ld	r24, Z
    4cd0:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
    4cd2:	11 f0       	breq	.+4      	; 0x4cd8 <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
    4cd4:	80 83       	st	Z, r24
    4cd6:	01 c0       	rjmp	.+2      	; 0x4cda <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
    4cd8:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
    4cda:	81 91       	ld	r24, Z+
    4cdc:	38 17       	cp	r19, r24
    4cde:	40 f4       	brcc	.+16     	; 0x4cf0 <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
    4ce0:	19 96       	adiw	r26, 0x09	; 9
    4ce2:	8c 91       	ld	r24, X
    4ce4:	19 97       	sbiw	r26, 0x09	; 9
    4ce6:	89 2b       	or	r24, r25
    4ce8:	19 96       	adiw	r26, 0x09	; 9
    4cea:	8c 93       	st	X, r24
    4cec:	19 97       	sbiw	r26, 0x09	; 9
    4cee:	09 c0       	rjmp	.+18     	; 0x4d02 <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
    4cf0:	19 96       	adiw	r26, 0x09	; 9
    4cf2:	8c 91       	ld	r24, X
    4cf4:	19 97       	sbiw	r26, 0x09	; 9
    4cf6:	29 2f       	mov	r18, r25
    4cf8:	20 95       	com	r18
    4cfa:	28 23       	and	r18, r24
    4cfc:	19 96       	adiw	r26, 0x09	; 9
    4cfe:	2c 93       	st	X, r18
    4d00:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
    4d02:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
    4d04:	e4 17       	cp	r30, r20
    4d06:	f5 07       	cpc	r31, r21
    4d08:	b9 f6       	brne	.-82     	; 0x4cb8 <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
    4d0a:	cf 91       	pop	r28
    4d0c:	08 95       	ret

00004d0e <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    4d0e:	fc 01       	movw	r30, r24
    4d10:	81 85       	ldd	r24, Z+9	; 0x09
    4d12:	81 70       	andi	r24, 0x01	; 1
    4d14:	08 95       	ret

00004d16 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    4d16:	08 95       	ret

00004d18 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    4d18:	08 95       	ret

00004d1a <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    4d1a:	e0 e0       	ldi	r30, 0x00	; 0
    4d1c:	fa e0       	ldi	r31, 0x0A	; 10
    4d1e:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    4d20:	87 e8       	ldi	r24, 0x87	; 135
    4d22:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    4d24:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    4d26:	84 e2       	ldi	r24, 0x24	; 36
    4d28:	94 ef       	ldi	r25, 0xF4	; 244
    4d2a:	86 a3       	std	Z+38, r24	; 0x26
    4d2c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    4d2e:	82 e1       	ldi	r24, 0x12	; 18
    4d30:	9a e7       	ldi	r25, 0x7A	; 122
    4d32:	86 a7       	std	Z+46, r24	; 0x2e
    4d34:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4d36:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4d38:	17 82       	std	Z+7, r1	; 0x07
    4d3a:	08 95       	ret

00004d3c <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    4d3c:	e0 e4       	ldi	r30, 0x40	; 64
    4d3e:	fa e0       	ldi	r31, 0x0A	; 10
    4d40:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    4d42:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    4d44:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    4d46:	84 e2       	ldi	r24, 0x24	; 36
    4d48:	94 ef       	ldi	r25, 0xF4	; 244
    4d4a:	86 a3       	std	Z+38, r24	; 0x26
    4d4c:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4d4e:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4d50:	17 82       	std	Z+7, r1	; 0x07
    4d52:	08 95       	ret

00004d54 <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    4d54:	0f 93       	push	r16
    4d56:	1f 93       	push	r17
    4d58:	cf 93       	push	r28
    4d5a:	8a 01       	movw	r16, r20
    4d5c:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    4d5e:	9b 01       	movw	r18, r22
    4d60:	40 e0       	ldi	r20, 0x00	; 0
    4d62:	50 e0       	ldi	r21, 0x00	; 0
    4d64:	64 e2       	ldi	r22, 0x24	; 36
    4d66:	74 ef       	ldi	r23, 0xF4	; 244
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    4d70:	b8 01       	movw	r22, r16
    4d72:	76 95       	lsr	r23
    4d74:	67 95       	ror	r22
    4d76:	ee e3       	ldi	r30, 0x3E	; 62
    4d78:	e0 9f       	mul	r30, r16
    4d7a:	c0 01       	movw	r24, r0
    4d7c:	e1 9f       	mul	r30, r17
    4d7e:	90 0d       	add	r25, r0
    4d80:	11 24       	eor	r1, r1
    4d82:	86 0f       	add	r24, r22
    4d84:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    4d86:	cf 5f       	subi	r28, 0xFF	; 255
    4d88:	b9 01       	movw	r22, r18
    4d8a:	02 c0       	rjmp	.+4      	; 0x4d90 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    4d8c:	76 95       	lsr	r23
    4d8e:	67 95       	ror	r22
    4d90:	ca 95       	dec	r28
    4d92:	e2 f7       	brpl	.-8      	; 0x4d8c <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    4d94:	e0 e0       	ldi	r30, 0x00	; 0
    4d96:	fa e0       	ldi	r31, 0x0A	; 10
    4d98:	66 a7       	std	Z+46, r22	; 0x2e
    4d9a:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    4d9c:	26 a3       	std	Z+38, r18	; 0x26
    4d9e:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    4da0:	a0 e4       	ldi	r26, 0x40	; 64
    4da2:	ba e0       	ldi	r27, 0x0A	; 10
    4da4:	96 96       	adiw	r26, 0x26	; 38
    4da6:	8d 93       	st	X+, r24
    4da8:	9c 93       	st	X, r25
    4daa:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    4dac:	86 e0       	ldi	r24, 0x06	; 6
    4dae:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    4db0:	87 e0       	ldi	r24, 0x07	; 7
    4db2:	8c 93       	st	X, r24
}
    4db4:	cf 91       	pop	r28
    4db6:	1f 91       	pop	r17
    4db8:	0f 91       	pop	r16
    4dba:	08 95       	ret

00004dbc <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    4dbc:	e0 e4       	ldi	r30, 0x40	; 64
    4dbe:	fa e0       	ldi	r31, 0x0A	; 10
    4dc0:	84 85       	ldd	r24, Z+12	; 0x0c
    4dc2:	80 ff       	sbrs	r24, 0
    4dc4:	fd cf       	rjmp	.-6      	; 0x4dc0 <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    4dc6:	e0 e4       	ldi	r30, 0x40	; 64
    4dc8:	fa e0       	ldi	r31, 0x0A	; 10
    4dca:	84 85       	ldd	r24, Z+12	; 0x0c
    4dcc:	81 70       	andi	r24, 0x01	; 1
    4dce:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    4dd0:	a0 e0       	ldi	r26, 0x00	; 0
    4dd2:	ba e0       	ldi	r27, 0x0A	; 10
    4dd4:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    4dd6:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    4dd8:	10 a2       	std	Z+32, r1	; 0x20
    4dda:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    4ddc:	90 96       	adiw	r26, 0x20	; 32
    4dde:	1d 92       	st	X+, r1
    4de0:	1c 92       	st	X, r1
    4de2:	91 97       	sbiw	r26, 0x21	; 33
    4de4:	2f ef       	ldi	r18, 0xFF	; 255
    4de6:	83 ef       	ldi	r24, 0xF3	; 243
    4de8:	91 e0       	ldi	r25, 0x01	; 1
    4dea:	21 50       	subi	r18, 0x01	; 1
    4dec:	80 40       	sbci	r24, 0x00	; 0
    4dee:	90 40       	sbci	r25, 0x00	; 0
    4df0:	e1 f7       	brne	.-8      	; 0x4dea <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    4df2:	00 c0       	rjmp	.+0      	; 0x4df4 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    4df4:	00 00       	nop
    4df6:	08 95       	ret

00004df8 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    4dfe:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    4e02:	ce 01       	movw	r24, r28
    4e04:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    4e08:	df 91       	pop	r29
    4e0a:	cf 91       	pop	r28
    4e0c:	08 95       	ret

00004e0e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    4e0e:	fc 01       	movw	r30, r24
    4e10:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4e12:	e0 e0       	ldi	r30, 0x00	; 0
    4e14:	f8 e0       	ldi	r31, 0x08	; 8
    4e16:	80 81       	ld	r24, Z
    4e18:	80 7f       	andi	r24, 0xF0	; 240
    4e1a:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    4e1c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    4e1e:	10 a2       	std	Z+32, r1	; 0x20
    4e20:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    4e22:	10 a6       	std	Z+40, r1	; 0x28
    4e24:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    4e26:	12 a6       	std	Z+42, r1	; 0x2a
    4e28:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    4e2a:	14 a6       	std	Z+44, r1	; 0x2c
    4e2c:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    4e2e:	16 a6       	std	Z+46, r1	; 0x2e
    4e30:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    4e32:	16 a2       	std	Z+38, r1	; 0x26
    4e34:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    4e36:	81 81       	ldd	r24, Z+1	; 0x01
    4e38:	88 7f       	andi	r24, 0xF8	; 248
    4e3a:	68 2b       	or	r22, r24
    4e3c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4e3e:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4e40:	17 82       	std	Z+7, r1	; 0x07
    4e42:	08 95       	ret

00004e44 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    4e44:	e0 e0       	ldi	r30, 0x00	; 0
    4e46:	f8 e0       	ldi	r31, 0x08	; 8
    4e48:	66 a3       	std	Z+38, r22	; 0x26
    4e4a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    4e4c:	20 81       	ld	r18, Z
    4e4e:	20 7f       	andi	r18, 0xF0	; 240
    4e50:	dc 01       	movw	r26, r24
    4e52:	12 96       	adiw	r26, 0x02	; 2
    4e54:	9c 91       	ld	r25, X
    4e56:	82 2f       	mov	r24, r18
    4e58:	89 2b       	or	r24, r25
    4e5a:	80 83       	st	Z, r24
    4e5c:	08 95       	ret

00004e5e <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4e5e:	e0 e0       	ldi	r30, 0x00	; 0
    4e60:	f8 e0       	ldi	r31, 0x08	; 8
    4e62:	80 81       	ld	r24, Z
    4e64:	80 7f       	andi	r24, 0xF0	; 240
    4e66:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    4e68:	10 a2       	std	Z+32, r1	; 0x20
    4e6a:	11 a2       	std	Z+33, r1	; 0x21
    4e6c:	08 95       	ret

00004e6e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    4e6e:	e0 e0       	ldi	r30, 0x00	; 0
    4e70:	f8 e0       	ldi	r31, 0x08	; 8
    4e72:	81 81       	ldd	r24, Z+1	; 0x01
    4e74:	8f 70       	andi	r24, 0x0F	; 15
    4e76:	68 2b       	or	r22, r24
    4e78:	61 83       	std	Z+1, r22	; 0x01
    4e7a:	08 95       	ret

00004e7c <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    4e7c:	e0 e0       	ldi	r30, 0x00	; 0
    4e7e:	f8 e0       	ldi	r31, 0x08	; 8
    4e80:	81 81       	ldd	r24, Z+1	; 0x01
    4e82:	60 95       	com	r22
    4e84:	68 23       	and	r22, r24
    4e86:	61 83       	std	Z+1, r22	; 0x01
    4e88:	08 95       	ret

00004e8a <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    4e8a:	60 93 26 08 	sts	0x0826, r22
    4e8e:	70 93 27 08 	sts	0x0827, r23
    4e92:	08 95       	ret

00004e94 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    4e94:	60 93 28 08 	sts	0x0828, r22
    4e98:	70 93 29 08 	sts	0x0829, r23
    4e9c:	08 95       	ret

00004e9e <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    4e9e:	60 93 2a 08 	sts	0x082A, r22
    4ea2:	70 93 2b 08 	sts	0x082B, r23
    4ea6:	08 95       	ret

00004ea8 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    4ea8:	60 93 2c 08 	sts	0x082C, r22
    4eac:	70 93 2d 08 	sts	0x082D, r23
    4eb0:	08 95       	ret

00004eb2 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    4eb2:	60 93 2e 08 	sts	0x082E, r22
    4eb6:	70 93 2f 08 	sts	0x082F, r23
    4eba:	08 95       	ret

00004ebc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    4ebc:	61 15       	cp	r22, r1
    4ebe:	71 05       	cpc	r23, r1
    4ec0:	31 f0       	breq	.+12     	; 0x4ece <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    4ec2:	e0 e0       	ldi	r30, 0x00	; 0
    4ec4:	f8 e0       	ldi	r31, 0x08	; 8
    4ec6:	86 81       	ldd	r24, Z+6	; 0x06
    4ec8:	83 70       	andi	r24, 0x03	; 3
    4eca:	28 2b       	or	r18, r24
    4ecc:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    4ece:	60 93 c8 21 	sts	0x21C8, r22
    4ed2:	70 93 c9 21 	sts	0x21C9, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    4ed6:	40 93 be 22 	sts	0x22BE, r20
    4eda:	50 93 bf 22 	sts	0x22BF, r21
    4ede:	08 95       	ret

00004ee0 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    4ee0:	61 15       	cp	r22, r1
    4ee2:	71 05       	cpc	r23, r1
    4ee4:	31 f0       	breq	.+12     	; 0x4ef2 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    4ee6:	e0 e0       	ldi	r30, 0x00	; 0
    4ee8:	f8 e0       	ldi	r31, 0x08	; 8
    4eea:	86 81       	ldd	r24, Z+6	; 0x06
    4eec:	8c 70       	andi	r24, 0x0C	; 12
    4eee:	28 2b       	or	r18, r24
    4ef0:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    4ef2:	60 93 ca 21 	sts	0x21CA, r22
    4ef6:	70 93 cb 21 	sts	0x21CB, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    4efa:	40 93 c0 22 	sts	0x22C0, r20
    4efe:	50 93 c1 22 	sts	0x22C1, r21
    4f02:	08 95       	ret

00004f04 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    4f04:	61 15       	cp	r22, r1
    4f06:	71 05       	cpc	r23, r1
    4f08:	31 f0       	breq	.+12     	; 0x4f16 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    4f0a:	e0 e0       	ldi	r30, 0x00	; 0
    4f0c:	f8 e0       	ldi	r31, 0x08	; 8
    4f0e:	87 81       	ldd	r24, Z+7	; 0x07
    4f10:	83 70       	andi	r24, 0x03	; 3
    4f12:	28 2b       	or	r18, r24
    4f14:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    4f16:	60 93 cc 21 	sts	0x21CC, r22
    4f1a:	70 93 cd 21 	sts	0x21CD, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    4f1e:	40 93 c2 22 	sts	0x22C2, r20
    4f22:	50 93 c3 22 	sts	0x22C3, r21
    4f26:	08 95       	ret

00004f28 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    4f28:	61 15       	cp	r22, r1
    4f2a:	71 05       	cpc	r23, r1
    4f2c:	31 f0       	breq	.+12     	; 0x4f3a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    4f2e:	e0 e0       	ldi	r30, 0x00	; 0
    4f30:	f8 e0       	ldi	r31, 0x08	; 8
    4f32:	87 81       	ldd	r24, Z+7	; 0x07
    4f34:	8c 70       	andi	r24, 0x0C	; 12
    4f36:	28 2b       	or	r18, r24
    4f38:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    4f3a:	60 93 ce 21 	sts	0x21CE, r22
    4f3e:	70 93 cf 21 	sts	0x21CF, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    4f42:	40 93 c4 22 	sts	0x22C4, r20
    4f46:	50 93 c5 22 	sts	0x22C5, r21
    4f4a:	08 95       	ret

00004f4c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    4f4c:	61 15       	cp	r22, r1
    4f4e:	71 05       	cpc	r23, r1
    4f50:	31 f0       	breq	.+12     	; 0x4f5e <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    4f52:	e0 e0       	ldi	r30, 0x00	; 0
    4f54:	f8 e0       	ldi	r31, 0x08	; 8
    4f56:	87 81       	ldd	r24, Z+7	; 0x07
    4f58:	80 73       	andi	r24, 0x30	; 48
    4f5a:	28 2b       	or	r18, r24
    4f5c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    4f5e:	60 93 d0 21 	sts	0x21D0, r22
    4f62:	70 93 d1 21 	sts	0x21D1, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    4f66:	40 93 c6 22 	sts	0x22C6, r20
    4f6a:	50 93 c7 22 	sts	0x22C7, r21
    4f6e:	08 95       	ret

00004f70 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    4f70:	61 15       	cp	r22, r1
    4f72:	71 05       	cpc	r23, r1
    4f74:	31 f0       	breq	.+12     	; 0x4f82 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    4f76:	e0 e0       	ldi	r30, 0x00	; 0
    4f78:	f8 e0       	ldi	r31, 0x08	; 8
    4f7a:	87 81       	ldd	r24, Z+7	; 0x07
    4f7c:	80 7c       	andi	r24, 0xC0	; 192
    4f7e:	28 2b       	or	r18, r24
    4f80:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    4f82:	60 93 d2 21 	sts	0x21D2, r22
    4f86:	70 93 d3 21 	sts	0x21D3, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    4f8a:	40 93 c8 22 	sts	0x22C8, r20
    4f8e:	50 93 c9 22 	sts	0x22C9, r21
    4f92:	08 95       	ret

00004f94 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    4f94:	cf 93       	push	r28
    4f96:	df 93       	push	r29
    4f98:	ec 01       	movw	r28, r24
    4f9a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN6CTimerC1Ev>
    4f9e:	8d e2       	ldi	r24, 0x2D	; 45
    4fa0:	91 e2       	ldi	r25, 0x21	; 33
    4fa2:	88 83       	st	Y, r24
    4fa4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	08 95       	ret

00004fac <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    4fac:	2d e2       	ldi	r18, 0x2D	; 45
    4fae:	31 e2       	ldi	r19, 0x21	; 33
    4fb0:	fc 01       	movw	r30, r24
    4fb2:	20 83       	st	Z, r18
    4fb4:	31 83       	std	Z+1, r19	; 0x01
    4fb6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN6CTimerD1Ev>
    4fba:	08 95       	ret

00004fbc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4fc0:	e0 e0       	ldi	r30, 0x00	; 0
    4fc2:	fb e0       	ldi	r31, 0x0B	; 11
    4fc4:	80 81       	ld	r24, Z
    4fc6:	80 7f       	andi	r24, 0xF0	; 240
    4fc8:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    4fca:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    4fcc:	10 a2       	std	Z+32, r1	; 0x20
    4fce:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    4fd0:	10 a6       	std	Z+40, r1	; 0x28
    4fd2:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    4fd4:	12 a6       	std	Z+42, r1	; 0x2a
    4fd6:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    4fd8:	14 a6       	std	Z+44, r1	; 0x2c
    4fda:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    4fdc:	16 a6       	std	Z+46, r1	; 0x2e
    4fde:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    4fe0:	16 a2       	std	Z+38, r1	; 0x26
    4fe2:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    4fe4:	81 81       	ldd	r24, Z+1	; 0x01
    4fe6:	88 7f       	andi	r24, 0xF8	; 248
    4fe8:	68 2b       	or	r22, r24
    4fea:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4fec:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4fee:	17 82       	std	Z+7, r1	; 0x07
    4ff0:	08 95       	ret

00004ff2 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    4ff2:	e0 e0       	ldi	r30, 0x00	; 0
    4ff4:	fb e0       	ldi	r31, 0x0B	; 11
    4ff6:	66 a3       	std	Z+38, r22	; 0x26
    4ff8:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    4ffa:	20 81       	ld	r18, Z
    4ffc:	20 7f       	andi	r18, 0xF0	; 240
    4ffe:	dc 01       	movw	r26, r24
    5000:	12 96       	adiw	r26, 0x02	; 2
    5002:	9c 91       	ld	r25, X
    5004:	82 2f       	mov	r24, r18
    5006:	89 2b       	or	r24, r25
    5008:	80 83       	st	Z, r24
    500a:	08 95       	ret

0000500c <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    500c:	e0 e0       	ldi	r30, 0x00	; 0
    500e:	fb e0       	ldi	r31, 0x0B	; 11
    5010:	80 81       	ld	r24, Z
    5012:	80 7f       	andi	r24, 0xF0	; 240
    5014:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    5016:	10 a2       	std	Z+32, r1	; 0x20
    5018:	11 a2       	std	Z+33, r1	; 0x21
    501a:	08 95       	ret

0000501c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    501c:	e0 e0       	ldi	r30, 0x00	; 0
    501e:	fb e0       	ldi	r31, 0x0B	; 11
    5020:	81 81       	ldd	r24, Z+1	; 0x01
    5022:	68 2b       	or	r22, r24
    5024:	61 83       	std	Z+1, r22	; 0x01
    5026:	08 95       	ret

00005028 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    5028:	e0 e0       	ldi	r30, 0x00	; 0
    502a:	fb e0       	ldi	r31, 0x0B	; 11
    502c:	81 81       	ldd	r24, Z+1	; 0x01
    502e:	60 95       	com	r22
    5030:	68 23       	and	r22, r24
    5032:	61 83       	std	Z+1, r22	; 0x01
    5034:	08 95       	ret

00005036 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    5036:	e0 e0       	ldi	r30, 0x00	; 0
    5038:	fb e0       	ldi	r31, 0x0B	; 11
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	62 95       	swap	r22
    503e:	6f 70       	andi	r22, 0x0F	; 15
    5040:	68 2b       	or	r22, r24
    5042:	62 83       	std	Z+2, r22	; 0x02
    5044:	08 95       	ret

00005046 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    5046:	e0 e0       	ldi	r30, 0x00	; 0
    5048:	fb e0       	ldi	r31, 0x0B	; 11
    504a:	82 81       	ldd	r24, Z+2	; 0x02
    504c:	62 95       	swap	r22
    504e:	6f 70       	andi	r22, 0x0F	; 15
    5050:	60 95       	com	r22
    5052:	68 23       	and	r22, r24
    5054:	62 83       	std	Z+2, r22	; 0x02
    5056:	08 95       	ret

00005058 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    5058:	60 93 26 0b 	sts	0x0B26, r22
    505c:	70 93 27 0b 	sts	0x0B27, r23
    5060:	08 95       	ret

00005062 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    5062:	60 93 28 0b 	sts	0x0B28, r22
    5066:	70 93 29 0b 	sts	0x0B29, r23
    506a:	08 95       	ret

0000506c <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    506c:	60 93 2a 0b 	sts	0x0B2A, r22
    5070:	70 93 2b 0b 	sts	0x0B2B, r23
    5074:	08 95       	ret

00005076 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    5076:	60 93 2c 0b 	sts	0x0B2C, r22
    507a:	70 93 2d 0b 	sts	0x0B2D, r23
    507e:	08 95       	ret

00005080 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    5080:	60 93 2e 0b 	sts	0x0B2E, r22
    5084:	70 93 2f 0b 	sts	0x0B2F, r23
    5088:	08 95       	ret

0000508a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    508a:	61 15       	cp	r22, r1
    508c:	71 05       	cpc	r23, r1
    508e:	31 f0       	breq	.+12     	; 0x509c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5090:	e0 e0       	ldi	r30, 0x00	; 0
    5092:	fb e0       	ldi	r31, 0x0B	; 11
    5094:	86 81       	ldd	r24, Z+6	; 0x06
    5096:	83 70       	andi	r24, 0x03	; 3
    5098:	28 2b       	or	r18, r24
    509a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    509c:	60 93 84 22 	sts	0x2284, r22
    50a0:	70 93 85 22 	sts	0x2285, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    50a4:	40 93 7a 23 	sts	0x237A, r20
    50a8:	50 93 7b 23 	sts	0x237B, r21
    50ac:	08 95       	ret

000050ae <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    50ae:	61 15       	cp	r22, r1
    50b0:	71 05       	cpc	r23, r1
    50b2:	31 f0       	breq	.+12     	; 0x50c0 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    50b4:	e0 e0       	ldi	r30, 0x00	; 0
    50b6:	fb e0       	ldi	r31, 0x0B	; 11
    50b8:	86 81       	ldd	r24, Z+6	; 0x06
    50ba:	8c 70       	andi	r24, 0x0C	; 12
    50bc:	28 2b       	or	r18, r24
    50be:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    50c0:	60 93 86 22 	sts	0x2286, r22
    50c4:	70 93 87 22 	sts	0x2287, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    50c8:	40 93 7c 23 	sts	0x237C, r20
    50cc:	50 93 7d 23 	sts	0x237D, r21
    50d0:	08 95       	ret

000050d2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    50d2:	61 15       	cp	r22, r1
    50d4:	71 05       	cpc	r23, r1
    50d6:	31 f0       	breq	.+12     	; 0x50e4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    50d8:	e0 e0       	ldi	r30, 0x00	; 0
    50da:	fb e0       	ldi	r31, 0x0B	; 11
    50dc:	87 81       	ldd	r24, Z+7	; 0x07
    50de:	83 70       	andi	r24, 0x03	; 3
    50e0:	28 2b       	or	r18, r24
    50e2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    50e4:	60 93 88 22 	sts	0x2288, r22
    50e8:	70 93 89 22 	sts	0x2289, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    50ec:	40 93 7e 23 	sts	0x237E, r20
    50f0:	50 93 7f 23 	sts	0x237F, r21
    50f4:	08 95       	ret

000050f6 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    50f6:	61 15       	cp	r22, r1
    50f8:	71 05       	cpc	r23, r1
    50fa:	31 f0       	breq	.+12     	; 0x5108 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    50fc:	e0 e0       	ldi	r30, 0x00	; 0
    50fe:	fb e0       	ldi	r31, 0x0B	; 11
    5100:	87 81       	ldd	r24, Z+7	; 0x07
    5102:	8c 70       	andi	r24, 0x0C	; 12
    5104:	28 2b       	or	r18, r24
    5106:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    5108:	60 93 8a 22 	sts	0x228A, r22
    510c:	70 93 8b 22 	sts	0x228B, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    5110:	40 93 80 23 	sts	0x2380, r20
    5114:	50 93 81 23 	sts	0x2381, r21
    5118:	08 95       	ret

0000511a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    511a:	61 15       	cp	r22, r1
    511c:	71 05       	cpc	r23, r1
    511e:	31 f0       	breq	.+12     	; 0x512c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5120:	e0 e0       	ldi	r30, 0x00	; 0
    5122:	fb e0       	ldi	r31, 0x0B	; 11
    5124:	87 81       	ldd	r24, Z+7	; 0x07
    5126:	80 73       	andi	r24, 0x30	; 48
    5128:	28 2b       	or	r18, r24
    512a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    512c:	60 93 8c 22 	sts	0x228C, r22
    5130:	70 93 8d 22 	sts	0x228D, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    5134:	40 93 82 23 	sts	0x2382, r20
    5138:	50 93 83 23 	sts	0x2383, r21
    513c:	08 95       	ret

0000513e <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    513e:	61 15       	cp	r22, r1
    5140:	71 05       	cpc	r23, r1
    5142:	31 f0       	breq	.+12     	; 0x5150 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5144:	e0 e0       	ldi	r30, 0x00	; 0
    5146:	fb e0       	ldi	r31, 0x0B	; 11
    5148:	87 81       	ldd	r24, Z+7	; 0x07
    514a:	80 7c       	andi	r24, 0xC0	; 192
    514c:	28 2b       	or	r18, r24
    514e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    5150:	60 93 8e 22 	sts	0x228E, r22
    5154:	70 93 8f 22 	sts	0x228F, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    5158:	40 93 84 23 	sts	0x2384, r20
    515c:	50 93 85 23 	sts	0x2385, r21
    5160:	08 95       	ret

00005162 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    5162:	cf 93       	push	r28
    5164:	df 93       	push	r29
    5166:	ec 01       	movw	r28, r24
    5168:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN6CTimerC1Ev>
    516c:	81 e5       	ldi	r24, 0x51	; 81
    516e:	91 e2       	ldi	r25, 0x21	; 33
    5170:	88 83       	st	Y, r24
    5172:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5174:	df 91       	pop	r29
    5176:	cf 91       	pop	r28
    5178:	08 95       	ret

0000517a <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    517a:	21 e5       	ldi	r18, 0x51	; 81
    517c:	31 e2       	ldi	r19, 0x21	; 33
    517e:	fc 01       	movw	r30, r24
    5180:	20 83       	st	Z, r18
    5182:	31 83       	std	Z+1, r19	; 0x01
    5184:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN6CTimerD1Ev>
    5188:	08 95       	ret

0000518a <__udivmodhi4>:
    518a:	aa 1b       	sub	r26, r26
    518c:	bb 1b       	sub	r27, r27
    518e:	51 e1       	ldi	r21, 0x11	; 17
    5190:	07 c0       	rjmp	.+14     	; 0x51a0 <__udivmodhi4_ep>

00005192 <__udivmodhi4_loop>:
    5192:	aa 1f       	adc	r26, r26
    5194:	bb 1f       	adc	r27, r27
    5196:	a6 17       	cp	r26, r22
    5198:	b7 07       	cpc	r27, r23
    519a:	10 f0       	brcs	.+4      	; 0x51a0 <__udivmodhi4_ep>
    519c:	a6 1b       	sub	r26, r22
    519e:	b7 0b       	sbc	r27, r23

000051a0 <__udivmodhi4_ep>:
    51a0:	88 1f       	adc	r24, r24
    51a2:	99 1f       	adc	r25, r25
    51a4:	5a 95       	dec	r21
    51a6:	a9 f7       	brne	.-22     	; 0x5192 <__udivmodhi4_loop>
    51a8:	80 95       	com	r24
    51aa:	90 95       	com	r25
    51ac:	bc 01       	movw	r22, r24
    51ae:	cd 01       	movw	r24, r26
    51b0:	08 95       	ret

000051b2 <__divmodsi4>:
    51b2:	05 2e       	mov	r0, r21
    51b4:	97 fb       	bst	r25, 7
    51b6:	1e f4       	brtc	.+6      	; 0x51be <__divmodsi4+0xc>
    51b8:	00 94       	com	r0
    51ba:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <__negsi2>
    51be:	57 fd       	sbrc	r21, 7
    51c0:	07 d0       	rcall	.+14     	; 0x51d0 <__divmodsi4_neg2>
    51c2:	0e 94 0f 29 	call	0x521e	; 0x521e <__udivmodsi4>
    51c6:	07 fc       	sbrc	r0, 7
    51c8:	03 d0       	rcall	.+6      	; 0x51d0 <__divmodsi4_neg2>
    51ca:	4e f4       	brtc	.+18     	; 0x51de <__divmodsi4_exit>
    51cc:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <__negsi2>

000051d0 <__divmodsi4_neg2>:
    51d0:	50 95       	com	r21
    51d2:	40 95       	com	r20
    51d4:	30 95       	com	r19
    51d6:	21 95       	neg	r18
    51d8:	3f 4f       	sbci	r19, 0xFF	; 255
    51da:	4f 4f       	sbci	r20, 0xFF	; 255
    51dc:	5f 4f       	sbci	r21, 0xFF	; 255

000051de <__divmodsi4_exit>:
    51de:	08 95       	ret

000051e0 <__negsi2>:
    51e0:	90 95       	com	r25
    51e2:	80 95       	com	r24
    51e4:	70 95       	com	r23
    51e6:	61 95       	neg	r22
    51e8:	7f 4f       	sbci	r23, 0xFF	; 255
    51ea:	8f 4f       	sbci	r24, 0xFF	; 255
    51ec:	9f 4f       	sbci	r25, 0xFF	; 255
    51ee:	08 95       	ret

000051f0 <__tablejump2__>:
    51f0:	ee 0f       	add	r30, r30
    51f2:	ff 1f       	adc	r31, r31
    51f4:	88 1f       	adc	r24, r24
    51f6:	8b bf       	out	0x3b, r24	; 59
    51f8:	07 90       	elpm	r0, Z+
    51fa:	f6 91       	elpm	r31, Z
    51fc:	e0 2d       	mov	r30, r0
    51fe:	19 94       	eijmp

00005200 <__umulhisi3>:
    5200:	a2 9f       	mul	r26, r18
    5202:	b0 01       	movw	r22, r0
    5204:	b3 9f       	mul	r27, r19
    5206:	c0 01       	movw	r24, r0
    5208:	a3 9f       	mul	r26, r19
    520a:	70 0d       	add	r23, r0
    520c:	81 1d       	adc	r24, r1
    520e:	11 24       	eor	r1, r1
    5210:	91 1d       	adc	r25, r1
    5212:	b2 9f       	mul	r27, r18
    5214:	70 0d       	add	r23, r0
    5216:	81 1d       	adc	r24, r1
    5218:	11 24       	eor	r1, r1
    521a:	91 1d       	adc	r25, r1
    521c:	08 95       	ret

0000521e <__udivmodsi4>:
    521e:	a1 e2       	ldi	r26, 0x21	; 33
    5220:	1a 2e       	mov	r1, r26
    5222:	aa 1b       	sub	r26, r26
    5224:	bb 1b       	sub	r27, r27
    5226:	fd 01       	movw	r30, r26
    5228:	0d c0       	rjmp	.+26     	; 0x5244 <__udivmodsi4_ep>

0000522a <__udivmodsi4_loop>:
    522a:	aa 1f       	adc	r26, r26
    522c:	bb 1f       	adc	r27, r27
    522e:	ee 1f       	adc	r30, r30
    5230:	ff 1f       	adc	r31, r31
    5232:	a2 17       	cp	r26, r18
    5234:	b3 07       	cpc	r27, r19
    5236:	e4 07       	cpc	r30, r20
    5238:	f5 07       	cpc	r31, r21
    523a:	20 f0       	brcs	.+8      	; 0x5244 <__udivmodsi4_ep>
    523c:	a2 1b       	sub	r26, r18
    523e:	b3 0b       	sbc	r27, r19
    5240:	e4 0b       	sbc	r30, r20
    5242:	f5 0b       	sbc	r31, r21

00005244 <__udivmodsi4_ep>:
    5244:	66 1f       	adc	r22, r22
    5246:	77 1f       	adc	r23, r23
    5248:	88 1f       	adc	r24, r24
    524a:	99 1f       	adc	r25, r25
    524c:	1a 94       	dec	r1
    524e:	69 f7       	brne	.-38     	; 0x522a <__udivmodsi4_loop>
    5250:	60 95       	com	r22
    5252:	70 95       	com	r23
    5254:	80 95       	com	r24
    5256:	90 95       	com	r25
    5258:	9b 01       	movw	r18, r22
    525a:	ac 01       	movw	r20, r24
    525c:	bd 01       	movw	r22, r26
    525e:	cf 01       	movw	r24, r30
    5260:	08 95       	ret

00005262 <malloc>:
    5262:	cf 93       	push	r28
    5264:	df 93       	push	r29
    5266:	82 30       	cpi	r24, 0x02	; 2
    5268:	91 05       	cpc	r25, r1
    526a:	10 f4       	brcc	.+4      	; 0x5270 <malloc+0xe>
    526c:	82 e0       	ldi	r24, 0x02	; 2
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	e0 91 e6 2b 	lds	r30, 0x2BE6
    5274:	f0 91 e7 2b 	lds	r31, 0x2BE7
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	c0 e0       	ldi	r28, 0x00	; 0
    527e:	d0 e0       	ldi	r29, 0x00	; 0
    5280:	30 97       	sbiw	r30, 0x00	; 0
    5282:	11 f1       	breq	.+68     	; 0x52c8 <malloc+0x66>
    5284:	40 81       	ld	r20, Z
    5286:	51 81       	ldd	r21, Z+1	; 0x01
    5288:	48 17       	cp	r20, r24
    528a:	59 07       	cpc	r21, r25
    528c:	c0 f0       	brcs	.+48     	; 0x52be <malloc+0x5c>
    528e:	48 17       	cp	r20, r24
    5290:	59 07       	cpc	r21, r25
    5292:	61 f4       	brne	.+24     	; 0x52ac <malloc+0x4a>
    5294:	82 81       	ldd	r24, Z+2	; 0x02
    5296:	93 81       	ldd	r25, Z+3	; 0x03
    5298:	20 97       	sbiw	r28, 0x00	; 0
    529a:	19 f0       	breq	.+6      	; 0x52a2 <malloc+0x40>
    529c:	8a 83       	std	Y+2, r24	; 0x02
    529e:	9b 83       	std	Y+3, r25	; 0x03
    52a0:	2b c0       	rjmp	.+86     	; 0x52f8 <malloc+0x96>
    52a2:	80 93 e6 2b 	sts	0x2BE6, r24
    52a6:	90 93 e7 2b 	sts	0x2BE7, r25
    52aa:	26 c0       	rjmp	.+76     	; 0x52f8 <malloc+0x96>
    52ac:	21 15       	cp	r18, r1
    52ae:	31 05       	cpc	r19, r1
    52b0:	19 f0       	breq	.+6      	; 0x52b8 <malloc+0x56>
    52b2:	42 17       	cp	r20, r18
    52b4:	53 07       	cpc	r21, r19
    52b6:	18 f4       	brcc	.+6      	; 0x52be <malloc+0x5c>
    52b8:	9a 01       	movw	r18, r20
    52ba:	be 01       	movw	r22, r28
    52bc:	df 01       	movw	r26, r30
    52be:	ef 01       	movw	r28, r30
    52c0:	02 80       	ldd	r0, Z+2	; 0x02
    52c2:	f3 81       	ldd	r31, Z+3	; 0x03
    52c4:	e0 2d       	mov	r30, r0
    52c6:	dc cf       	rjmp	.-72     	; 0x5280 <malloc+0x1e>
    52c8:	21 15       	cp	r18, r1
    52ca:	31 05       	cpc	r19, r1
    52cc:	09 f1       	breq	.+66     	; 0x5310 <malloc+0xae>
    52ce:	28 1b       	sub	r18, r24
    52d0:	39 0b       	sbc	r19, r25
    52d2:	24 30       	cpi	r18, 0x04	; 4
    52d4:	31 05       	cpc	r19, r1
    52d6:	90 f4       	brcc	.+36     	; 0x52fc <malloc+0x9a>
    52d8:	12 96       	adiw	r26, 0x02	; 2
    52da:	8d 91       	ld	r24, X+
    52dc:	9c 91       	ld	r25, X
    52de:	13 97       	sbiw	r26, 0x03	; 3
    52e0:	61 15       	cp	r22, r1
    52e2:	71 05       	cpc	r23, r1
    52e4:	21 f0       	breq	.+8      	; 0x52ee <malloc+0x8c>
    52e6:	fb 01       	movw	r30, r22
    52e8:	82 83       	std	Z+2, r24	; 0x02
    52ea:	93 83       	std	Z+3, r25	; 0x03
    52ec:	04 c0       	rjmp	.+8      	; 0x52f6 <malloc+0x94>
    52ee:	80 93 e6 2b 	sts	0x2BE6, r24
    52f2:	90 93 e7 2b 	sts	0x2BE7, r25
    52f6:	fd 01       	movw	r30, r26
    52f8:	32 96       	adiw	r30, 0x02	; 2
    52fa:	44 c0       	rjmp	.+136    	; 0x5384 <malloc+0x122>
    52fc:	fd 01       	movw	r30, r26
    52fe:	e2 0f       	add	r30, r18
    5300:	f3 1f       	adc	r31, r19
    5302:	81 93       	st	Z+, r24
    5304:	91 93       	st	Z+, r25
    5306:	22 50       	subi	r18, 0x02	; 2
    5308:	31 09       	sbc	r19, r1
    530a:	2d 93       	st	X+, r18
    530c:	3c 93       	st	X, r19
    530e:	3a c0       	rjmp	.+116    	; 0x5384 <malloc+0x122>
    5310:	20 91 e4 2b 	lds	r18, 0x2BE4
    5314:	30 91 e5 2b 	lds	r19, 0x2BE5
    5318:	23 2b       	or	r18, r19
    531a:	41 f4       	brne	.+16     	; 0x532c <malloc+0xca>
    531c:	20 91 02 20 	lds	r18, 0x2002
    5320:	30 91 03 20 	lds	r19, 0x2003
    5324:	20 93 e4 2b 	sts	0x2BE4, r18
    5328:	30 93 e5 2b 	sts	0x2BE5, r19
    532c:	20 91 00 20 	lds	r18, 0x2000
    5330:	30 91 01 20 	lds	r19, 0x2001
    5334:	21 15       	cp	r18, r1
    5336:	31 05       	cpc	r19, r1
    5338:	41 f4       	brne	.+16     	; 0x534a <malloc+0xe8>
    533a:	2d b7       	in	r18, 0x3d	; 61
    533c:	3e b7       	in	r19, 0x3e	; 62
    533e:	40 91 04 20 	lds	r20, 0x2004
    5342:	50 91 05 20 	lds	r21, 0x2005
    5346:	24 1b       	sub	r18, r20
    5348:	35 0b       	sbc	r19, r21
    534a:	e0 91 e4 2b 	lds	r30, 0x2BE4
    534e:	f0 91 e5 2b 	lds	r31, 0x2BE5
    5352:	e2 17       	cp	r30, r18
    5354:	f3 07       	cpc	r31, r19
    5356:	a0 f4       	brcc	.+40     	; 0x5380 <malloc+0x11e>
    5358:	2e 1b       	sub	r18, r30
    535a:	3f 0b       	sbc	r19, r31
    535c:	28 17       	cp	r18, r24
    535e:	39 07       	cpc	r19, r25
    5360:	78 f0       	brcs	.+30     	; 0x5380 <malloc+0x11e>
    5362:	ac 01       	movw	r20, r24
    5364:	4e 5f       	subi	r20, 0xFE	; 254
    5366:	5f 4f       	sbci	r21, 0xFF	; 255
    5368:	24 17       	cp	r18, r20
    536a:	35 07       	cpc	r19, r21
    536c:	48 f0       	brcs	.+18     	; 0x5380 <malloc+0x11e>
    536e:	4e 0f       	add	r20, r30
    5370:	5f 1f       	adc	r21, r31
    5372:	40 93 e4 2b 	sts	0x2BE4, r20
    5376:	50 93 e5 2b 	sts	0x2BE5, r21
    537a:	81 93       	st	Z+, r24
    537c:	91 93       	st	Z+, r25
    537e:	02 c0       	rjmp	.+4      	; 0x5384 <malloc+0x122>
    5380:	e0 e0       	ldi	r30, 0x00	; 0
    5382:	f0 e0       	ldi	r31, 0x00	; 0
    5384:	cf 01       	movw	r24, r30
    5386:	df 91       	pop	r29
    5388:	cf 91       	pop	r28
    538a:	08 95       	ret

0000538c <free>:
    538c:	0f 93       	push	r16
    538e:	1f 93       	push	r17
    5390:	cf 93       	push	r28
    5392:	df 93       	push	r29
    5394:	00 97       	sbiw	r24, 0x00	; 0
    5396:	09 f4       	brne	.+2      	; 0x539a <free+0xe>
    5398:	8c c0       	rjmp	.+280    	; 0x54b2 <free+0x126>
    539a:	fc 01       	movw	r30, r24
    539c:	32 97       	sbiw	r30, 0x02	; 2
    539e:	12 82       	std	Z+2, r1	; 0x02
    53a0:	13 82       	std	Z+3, r1	; 0x03
    53a2:	00 91 e6 2b 	lds	r16, 0x2BE6
    53a6:	10 91 e7 2b 	lds	r17, 0x2BE7
    53aa:	01 15       	cp	r16, r1
    53ac:	11 05       	cpc	r17, r1
    53ae:	81 f4       	brne	.+32     	; 0x53d0 <free+0x44>
    53b0:	20 81       	ld	r18, Z
    53b2:	31 81       	ldd	r19, Z+1	; 0x01
    53b4:	82 0f       	add	r24, r18
    53b6:	93 1f       	adc	r25, r19
    53b8:	20 91 e4 2b 	lds	r18, 0x2BE4
    53bc:	30 91 e5 2b 	lds	r19, 0x2BE5
    53c0:	28 17       	cp	r18, r24
    53c2:	39 07       	cpc	r19, r25
    53c4:	79 f5       	brne	.+94     	; 0x5424 <free+0x98>
    53c6:	e0 93 e4 2b 	sts	0x2BE4, r30
    53ca:	f0 93 e5 2b 	sts	0x2BE5, r31
    53ce:	71 c0       	rjmp	.+226    	; 0x54b2 <free+0x126>
    53d0:	d8 01       	movw	r26, r16
    53d2:	40 e0       	ldi	r20, 0x00	; 0
    53d4:	50 e0       	ldi	r21, 0x00	; 0
    53d6:	ae 17       	cp	r26, r30
    53d8:	bf 07       	cpc	r27, r31
    53da:	50 f4       	brcc	.+20     	; 0x53f0 <free+0x64>
    53dc:	12 96       	adiw	r26, 0x02	; 2
    53de:	2d 91       	ld	r18, X+
    53e0:	3c 91       	ld	r19, X
    53e2:	13 97       	sbiw	r26, 0x03	; 3
    53e4:	ad 01       	movw	r20, r26
    53e6:	21 15       	cp	r18, r1
    53e8:	31 05       	cpc	r19, r1
    53ea:	09 f1       	breq	.+66     	; 0x542e <free+0xa2>
    53ec:	d9 01       	movw	r26, r18
    53ee:	f3 cf       	rjmp	.-26     	; 0x53d6 <free+0x4a>
    53f0:	9d 01       	movw	r18, r26
    53f2:	da 01       	movw	r26, r20
    53f4:	22 83       	std	Z+2, r18	; 0x02
    53f6:	33 83       	std	Z+3, r19	; 0x03
    53f8:	60 81       	ld	r22, Z
    53fa:	71 81       	ldd	r23, Z+1	; 0x01
    53fc:	86 0f       	add	r24, r22
    53fe:	97 1f       	adc	r25, r23
    5400:	82 17       	cp	r24, r18
    5402:	93 07       	cpc	r25, r19
    5404:	69 f4       	brne	.+26     	; 0x5420 <free+0x94>
    5406:	ec 01       	movw	r28, r24
    5408:	28 81       	ld	r18, Y
    540a:	39 81       	ldd	r19, Y+1	; 0x01
    540c:	26 0f       	add	r18, r22
    540e:	37 1f       	adc	r19, r23
    5410:	2e 5f       	subi	r18, 0xFE	; 254
    5412:	3f 4f       	sbci	r19, 0xFF	; 255
    5414:	20 83       	st	Z, r18
    5416:	31 83       	std	Z+1, r19	; 0x01
    5418:	8a 81       	ldd	r24, Y+2	; 0x02
    541a:	9b 81       	ldd	r25, Y+3	; 0x03
    541c:	82 83       	std	Z+2, r24	; 0x02
    541e:	93 83       	std	Z+3, r25	; 0x03
    5420:	45 2b       	or	r20, r21
    5422:	29 f4       	brne	.+10     	; 0x542e <free+0xa2>
    5424:	e0 93 e6 2b 	sts	0x2BE6, r30
    5428:	f0 93 e7 2b 	sts	0x2BE7, r31
    542c:	42 c0       	rjmp	.+132    	; 0x54b2 <free+0x126>
    542e:	12 96       	adiw	r26, 0x02	; 2
    5430:	ed 93       	st	X+, r30
    5432:	fc 93       	st	X, r31
    5434:	13 97       	sbiw	r26, 0x03	; 3
    5436:	ed 01       	movw	r28, r26
    5438:	49 91       	ld	r20, Y+
    543a:	59 91       	ld	r21, Y+
    543c:	9e 01       	movw	r18, r28
    543e:	24 0f       	add	r18, r20
    5440:	35 1f       	adc	r19, r21
    5442:	e2 17       	cp	r30, r18
    5444:	f3 07       	cpc	r31, r19
    5446:	71 f4       	brne	.+28     	; 0x5464 <free+0xd8>
    5448:	80 81       	ld	r24, Z
    544a:	91 81       	ldd	r25, Z+1	; 0x01
    544c:	84 0f       	add	r24, r20
    544e:	95 1f       	adc	r25, r21
    5450:	02 96       	adiw	r24, 0x02	; 2
    5452:	8d 93       	st	X+, r24
    5454:	9c 93       	st	X, r25
    5456:	11 97       	sbiw	r26, 0x01	; 1
    5458:	82 81       	ldd	r24, Z+2	; 0x02
    545a:	93 81       	ldd	r25, Z+3	; 0x03
    545c:	12 96       	adiw	r26, 0x02	; 2
    545e:	8d 93       	st	X+, r24
    5460:	9c 93       	st	X, r25
    5462:	13 97       	sbiw	r26, 0x03	; 3
    5464:	e0 e0       	ldi	r30, 0x00	; 0
    5466:	f0 e0       	ldi	r31, 0x00	; 0
    5468:	d8 01       	movw	r26, r16
    546a:	12 96       	adiw	r26, 0x02	; 2
    546c:	8d 91       	ld	r24, X+
    546e:	9c 91       	ld	r25, X
    5470:	13 97       	sbiw	r26, 0x03	; 3
    5472:	00 97       	sbiw	r24, 0x00	; 0
    5474:	19 f0       	breq	.+6      	; 0x547c <free+0xf0>
    5476:	f8 01       	movw	r30, r16
    5478:	8c 01       	movw	r16, r24
    547a:	f6 cf       	rjmp	.-20     	; 0x5468 <free+0xdc>
    547c:	8d 91       	ld	r24, X+
    547e:	9c 91       	ld	r25, X
    5480:	98 01       	movw	r18, r16
    5482:	2e 5f       	subi	r18, 0xFE	; 254
    5484:	3f 4f       	sbci	r19, 0xFF	; 255
    5486:	82 0f       	add	r24, r18
    5488:	93 1f       	adc	r25, r19
    548a:	20 91 e4 2b 	lds	r18, 0x2BE4
    548e:	30 91 e5 2b 	lds	r19, 0x2BE5
    5492:	28 17       	cp	r18, r24
    5494:	39 07       	cpc	r19, r25
    5496:	69 f4       	brne	.+26     	; 0x54b2 <free+0x126>
    5498:	30 97       	sbiw	r30, 0x00	; 0
    549a:	29 f4       	brne	.+10     	; 0x54a6 <free+0x11a>
    549c:	10 92 e6 2b 	sts	0x2BE6, r1
    54a0:	10 92 e7 2b 	sts	0x2BE7, r1
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <free+0x11e>
    54a6:	12 82       	std	Z+2, r1	; 0x02
    54a8:	13 82       	std	Z+3, r1	; 0x03
    54aa:	00 93 e4 2b 	sts	0x2BE4, r16
    54ae:	10 93 e5 2b 	sts	0x2BE5, r17
    54b2:	df 91       	pop	r29
    54b4:	cf 91       	pop	r28
    54b6:	1f 91       	pop	r17
    54b8:	0f 91       	pop	r16
    54ba:	08 95       	ret

000054bc <memcpy>:
    54bc:	fb 01       	movw	r30, r22
    54be:	dc 01       	movw	r26, r24
    54c0:	02 c0       	rjmp	.+4      	; 0x54c6 <memcpy+0xa>
    54c2:	01 90       	ld	r0, Z+
    54c4:	0d 92       	st	X+, r0
    54c6:	41 50       	subi	r20, 0x01	; 1
    54c8:	50 40       	sbci	r21, 0x00	; 0
    54ca:	d8 f7       	brcc	.-10     	; 0x54c2 <memcpy+0x6>
    54cc:	08 95       	ret

000054ce <__do_global_dtors>:
    54ce:	12 e0       	ldi	r17, 0x02	; 2
    54d0:	c1 e2       	ldi	r28, 0x21	; 33
    54d2:	d2 e0       	ldi	r29, 0x02	; 2
    54d4:	00 e0       	ldi	r16, 0x00	; 0
    54d6:	06 c0       	rjmp	.+12     	; 0x54e4 <__do_global_dtors+0x16>
    54d8:	80 2f       	mov	r24, r16
    54da:	fe 01       	movw	r30, r28
    54dc:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__tablejump2__>
    54e0:	21 96       	adiw	r28, 0x01	; 1
    54e2:	01 1d       	adc	r16, r1
    54e4:	c3 32       	cpi	r28, 0x23	; 35
    54e6:	d1 07       	cpc	r29, r17
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	08 07       	cpc	r16, r24
    54ec:	a9 f7       	brne	.-22     	; 0x54d8 <__do_global_dtors+0xa>
    54ee:	f8 94       	cli

000054f0 <__stop_program>:
    54f0:	ff cf       	rjmp	.-2      	; 0x54f0 <__stop_program>
