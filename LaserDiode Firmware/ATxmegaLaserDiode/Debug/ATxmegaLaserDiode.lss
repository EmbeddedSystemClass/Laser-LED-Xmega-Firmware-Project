
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c4  00802000  00007dce  00007e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000367  008022c4  008022c4  00008126  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d10  00000000  00000000  00008198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019351  00000000  00000000  00008ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006678  00000000  00000000  000221f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000672c  00000000  00000000  00028871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003cec  00000000  00000000  0002efa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009859  00000000  00000000  00032c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000be8b  00000000  00000000  0003c4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c18  00000000  00000000  00048370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__vector_1>
       8:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__vector_2>
       c:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__vector_3>
      10:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__vector_4>
      14:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__vector_5>
      18:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__vector_6>
      1c:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <__vector_7>
      20:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__vector_8>
      24:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__vector_9>
      28:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__vector_10>
      2c:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__vector_11>
      30:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <__vector_12>
      34:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__vector_13>
      38:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__vector_14>
      3c:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__vector_15>
      40:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <__vector_16>
      44:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__vector_17>
      48:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <__vector_18>
      4c:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__vector_19>
      50:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__vector_20>
      54:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__vector_21>
      58:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__vector_22>
      5c:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__vector_23>
      60:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__vector_24>
      64:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__vector_25>
      68:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__vector_26>
      6c:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__vector_27>
      70:	0c 94 b6 1f 	jmp	0x3f6c	; 0x3f6c <__vector_28>
      74:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__vector_29>
      78:	0c 94 18 20 	jmp	0x4030	; 0x4030 <__vector_30>
      7c:	0c 94 49 20 	jmp	0x4092	; 0x4092 <__vector_31>
      80:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__vector_32>
      84:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__vector_33>
      88:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__vector_34>
      8c:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__vector_35>
      90:	0c 94 3e 21 	jmp	0x427c	; 0x427c <__vector_36>
      94:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__vector_37>
      98:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__vector_38>
      9c:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__vector_39>
      a0:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__vector_40>
      a4:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__vector_41>
      a8:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__vector_42>
      ac:	0c 94 95 22 	jmp	0x452a	; 0x452a <__vector_43>
      b0:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__vector_44>
      b4:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <__vector_45>
      b8:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__vector_46>
      bc:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <__vector_47>
      c0:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__vector_48>
      c4:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__vector_49>
      c8:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <__vector_50>
      cc:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__vector_51>
      d0:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__vector_52>
      d4:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__vector_53>
      d8:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__vector_54>
      dc:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <__vector_55>
      e0:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__vector_56>
      e4:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__vector_57>
      e8:	0c 94 74 25 	jmp	0x4ae8	; 0x4ae8 <__vector_58>
      ec:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__vector_59>
      f0:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__vector_60>
      f4:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__vector_61>
      f8:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__vector_62>
      fc:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <__vector_63>
     100:	0c 94 9a 26 	jmp	0x4d34	; 0x4d34 <__vector_64>
     104:	0c 94 cb 26 	jmp	0x4d96	; 0x4d96 <__vector_65>
     108:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__vector_66>
     10c:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__vector_67>
     110:	0c 94 5e 27 	jmp	0x4ebc	; 0x4ebc <__vector_68>
     114:	0c 94 8f 27 	jmp	0x4f1e	; 0x4f1e <__vector_69>
     118:	0c 94 c0 27 	jmp	0x4f80	; 0x4f80 <__vector_70>
     11c:	0c 94 f1 27 	jmp	0x4fe2	; 0x4fe2 <__vector_71>
     120:	0c 94 22 28 	jmp	0x5044	; 0x5044 <__vector_72>
     124:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__vector_73>
     128:	0c 94 84 28 	jmp	0x5108	; 0x5108 <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 b5 28 	jmp	0x516a	; 0x516a <__vector_77>
     138:	0c 94 e6 28 	jmp	0x51cc	; 0x51cc <__vector_78>
     13c:	0c 94 17 29 	jmp	0x522e	; 0x522e <__vector_79>
     140:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__vector_80>
     144:	0c 94 79 29 	jmp	0x52f2	; 0x52f2 <__vector_81>
     148:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__vector_82>
     14c:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <__vector_83>
     150:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__vector_84>
     154:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <__vector_85>
     158:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__vector_86>
     15c:	0c 94 9f 2a 	jmp	0x553e	; 0x553e <__vector_87>
     160:	0c 94 d0 2a 	jmp	0x55a0	; 0x55a0 <__vector_88>
     164:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__vector_89>
     168:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__vector_90>
     16c:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__vector_91>
     170:	0c 94 94 2b 	jmp	0x5728	; 0x5728 <__vector_92>
     174:	0c 94 c5 2b 	jmp	0x578a	; 0x578a <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 f6 2b 	jmp	0x57ec	; 0x57ec <__vector_104>
     1a4:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 58 2c 	jmp	0x58b0	; 0x58b0 <__vector_108>
     1b4:	0c 94 89 2c 	jmp	0x5912	; 0x5912 <__vector_109>
     1b8:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__vector_110>
     1bc:	0c 94 eb 2c 	jmp	0x59d6	; 0x59d6 <__vector_111>
     1c0:	0c 94 1c 2d 	jmp	0x5a38	; 0x5a38 <__vector_112>
     1c4:	0c 94 4d 2d 	jmp	0x5a9a	; 0x5a9a <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__vector_119>
     1e0:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__vector_120>
     1e4:	0c 94 e0 2d 	jmp	0x5bc0	; 0x5bc0 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7c 04       	cpc	r7, r12
     25e:	82 04       	cpc	r8, r2
     260:	88 04       	cpc	r8, r8
     262:	8e 04       	cpc	r8, r14
     264:	94 04       	cpc	r9, r4
     266:	9a 04       	cpc	r9, r10
     268:	a0 04       	cpc	r10, r0
     26a:	a6 04       	cpc	r10, r6
     26c:	16 05       	cpc	r17, r6
     26e:	b5 04       	cpc	r11, r5
     270:	bb 04       	cpc	r11, r11
     272:	c0 04       	cpc	r12, r0
     274:	c6 04       	cpc	r12, r6
     276:	cc 04       	cpc	r12, r12
     278:	d2 04       	cpc	r13, r2
     27a:	d8 04       	cpc	r13, r8
     27c:	de 04       	cpc	r13, r14
     27e:	e4 04       	cpc	r14, r4
     280:	8e 32       	cpi	r24, 0x2E	; 46
     282:	8e 32       	cpi	r24, 0x2E	; 46
     284:	98 32       	cpi	r25, 0x28	; 40
     286:	a2 32       	cpi	r26, 0x22	; 34
     288:	b2 32       	cpi	r27, 0x22	; 34
     28a:	02 33       	cpi	r16, 0x32	; 50
     28c:	0c 33       	cpi	r16, 0x3C	; 60
     28e:	41 33       	cpi	r20, 0x31	; 49
     290:	41 33       	cpi	r20, 0x31	; 49
     292:	3f 33       	cpi	r19, 0x3F	; 63
     294:	3f 33       	cpi	r19, 0x3F	; 63

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 98 32 	jmp	0x6530	; 0x6530 <_ZN9CMBSender13OnReceiveByteEh+0x3a>
     2a2:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     2a6:	0c 94 bf 37 	jmp	0x6f7e	; 0x6f7e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2aa:	0c 94 02 33 	jmp	0x6604	; 0x6604 <_ZN9CMBSender13OnReceiveByteEh+0x10e>
     2ae:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2b2:	0c 94 f1 3a 	jmp	0x75e2	; 0x75e2 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     2b6:	0c 94 de 38 	jmp	0x71bc	; 0x71bc <_ZN8CTimerC18SetCOMPBEj>
     2ba:	0c 94 c6 38 	jmp	0x718c	; 0x718c <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     2be:	0c 94 6b 38 	jmp	0x70d6	; 0x70d6 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2c2:	0c 94 7d 39 	jmp	0x72fa	; 0x72fa <_ZN7CTimerD9SetPeriodEj>
     2c6:	0c 94 96 3a 	jmp	0x752c	; 0x752c <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2ca:	0c 94 d0 34 	jmp	0x69a0	; 0x69a0 <_ZN10CDGUSUSART11IsReceivingEv>
     2ce:	0c 94 85 3a 	jmp	0x750a	; 0x750a <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2d2:	0c 94 ed 31 	jmp	0x63da	; 0x63da <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2d6:	0c 94 77 3b 	jmp	0x76ee	; 0x76ee <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2da:	0c 94 87 39 	jmp	0x730e	; 0x730e <_ZN7CTimerD8SetCOMPBEj>
     2de:	0c 94 44 33 	jmp	0x6688	; 0x6688 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2e2:	0c 94 72 31 	jmp	0x62e4	; 0x62e4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2e6:	0c 94 88 04 	jmp	0x910	; 0x910 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2ea:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <_ZN8CTimerC19SetPeriodEj>
     2ee:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2f2:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     2f6:	0c 94 94 04 	jmp	0x928	; 0x928 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     2fa:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <_ZN7CTimerF8SetCOMPBEj>
     2fe:	0c 94 0c 38 	jmp	0x7018	; 0x7018 <_ZN7CTimerC8SetCOMPCEj>
     302:	0c 94 82 39 	jmp	0x7304	; 0x7304 <_ZN7CTimerD8SetCOMPAEj>
     306:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     30a:	0c 94 19 39 	jmp	0x7232	; 0x7232 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     30e:	0c 94 11 38 	jmp	0x7022	; 0x7022 <_ZN7CTimerC8SetCOMPDEj>
     312:	0c 94 d6 3a 	jmp	0x75ac	; 0x75ac <_ZN7CTimerF5StartEj>
     316:	0c 94 5e 3a 	jmp	0x74bc	; 0x74bc <_ZN8CTimerD18SetCOMPBEj>
     31a:	0c 94 a7 38 	jmp	0x714e	; 0x714e <_ZN8CTimerC15StartEj>
     31e:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     322:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <_ZN4CSPI16StaticOnTransmitEPv>
     326:	0c 94 f5 38 	jmp	0x71ea	; 0x71ea <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     32a:	0c 94 e3 38 	jmp	0x71c6	; 0x71c6 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     32e:	0c 94 27 3a 	jmp	0x744e	; 0x744e <_ZN8CTimerD15StartEj>
     332:	0c 94 ad 30 	jmp	0x615a	; 0x615a <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     336:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     33a:	0c 94 82 04 	jmp	0x904	; 0x904 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     33e:	0c 94 cd 38 	jmp	0x719a	; 0x719a <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     342:	0c 94 d7 34 	jmp	0x69ae	; 0x69ae <_ZN10CDGUSUSART11IsDataEmptyEv>
     346:	0c 94 f8 3a 	jmp	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     34a:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     34e:	0c 94 c8 34 	jmp	0x6990	; 0x6990 <_ZN10CDGUSUSART14IsTransmittingEv>
     352:	0c 94 da 39 	jmp	0x73b4	; 0x73b4 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     356:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     35a:	0c 94 18 3b 	jmp	0x7630	; 0x7630 <_ZN7CTimerF8SetCOMPCEj>
     35e:	0c 94 a7 39 	jmp	0x734e	; 0x734e <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     362:	0c 94 bb 04 	jmp	0x976	; 0x976 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc4>
     366:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     36a:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     36e:	0c 94 f6 37 	jmp	0x6fec	; 0x6fec <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     372:	0c 94 41 33 	jmp	0x6682	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
     376:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     37a:	0c 94 f1 34 	jmp	0x69e2	; 0x69e2 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     37e:	0c 94 10 3a 	jmp	0x7420	; 0x7420 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     382:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     386:	0c 94 ef 37 	jmp	0x6fde	; 0x6fde <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     38a:	0c 94 eb 3a 	jmp	0x75d6	; 0x75d6 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     38e:	0c 94 8c 39 	jmp	0x7318	; 0x7318 <_ZN7CTimerD8SetCOMPCEj>
     392:	0c 94 44 3b 	jmp	0x7688	; 0x7688 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     396:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     39a:	0c 94 de 31 	jmp	0x63bc	; 0x63bc <_ZN9CMBSender18OnVariableReceivedEjPjj>
     39e:	0c 94 27 12 	jmp	0x244e	; 0x244e <_ZN16CLaserControlApp13OnTimerStaticEPv>
     3a2:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     3a6:	0c 94 e7 37 	jmp	0x6fce	; 0x6fce <_ZN7CTimerC4StopEv>
     3aa:	0c 94 66 3b 	jmp	0x76cc	; 0x76cc <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3ae:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3b2:	0c 94 da 37 	jmp	0x6fb4	; 0x6fb4 <_ZN7CTimerC5StartEj>
     3b6:	0c 94 07 39 	jmp	0x720e	; 0x720e <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3ba:	0c 94 76 39 	jmp	0x72ec	; 0x72ec <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     3be:	0c 94 d9 38 	jmp	0x71b2	; 0x71b2 <_ZN8CTimerC18SetCOMPAEj>
     3c2:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__cxa_pure_virtual>
     3c6:	0c 94 3f 39 	jmp	0x727e	; 0x727e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ca:	0c 94 fd 37 	jmp	0x6ffa	; 0x6ffa <_ZN7CTimerC9SetPeriodEj>
     3ce:	0c 94 b7 19 	jmp	0x336e	; 0x336e <_ZN16CLaserControlApp12OnINT0StaticEPv>
     3d2:	0c 94 54 3a 	jmp	0x74a8	; 0x74a8 <_ZN8CTimerD19SetPeriodEj>
     3d6:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3da:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3de:	0c 94 49 2e 	jmp	0x5c92	; 0x5c92 <_GLOBAL__sub_D_dacSPI>
     3e2:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3e6:	0c 94 00 3b 	jmp	0x7600	; 0x7600 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     3ea:	0c 94 5a 39 	jmp	0x72b4	; 0x72b4 <_ZN7CTimerD5StartEj>
     3ee:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     3f2:	0c 94 1d 3b 	jmp	0x763a	; 0x763a <_ZN7CTimerF8SetCOMPDEj>
     3f6:	0c 94 9f 30 	jmp	0x613e	; 0x613e <_ZN16CMBEventsHandler11FreeBuffersEv>
     3fa:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3fe:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     402:	0c 94 4d 3a 	jmp	0x749a	; 0x749a <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     406:	0c 94 34 3a 	jmp	0x7468	; 0x7468 <_ZN8CTimerD14StopEv>
     40a:	0c 94 0d 31 	jmp	0x621a	; 0x621a <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     40e:	0c 94 b2 32 	jmp	0x6564	; 0x6564 <_ZN9CMBSender13OnReceiveByteEh+0x6e>
     412:	0c 94 b4 38 	jmp	0x7168	; 0x7168 <_ZN8CTimerC14StopEv>
     416:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     41a:	0c 94 67 39 	jmp	0x72ce	; 0x72ce <_ZN7CTimerD4StopEv>
     41e:	0c 94 91 39 	jmp	0x7322	; 0x7322 <_ZN7CTimerD8SetCOMPDEj>
     422:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     426:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     42a:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     42e:	0c 94 df 34 	jmp	0x69be	; 0x69be <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     432:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     436:	0c 94 49 38 	jmp	0x7092	; 0x7092 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     43a:	0c 94 84 30 	jmp	0x6108	; 0x6108 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     43e:	0c 94 3c 3a 	jmp	0x7478	; 0x7478 <_ZN8CTimerD15ResetEv>
     442:	0c 94 3f 33 	jmp	0x667e	; 0x667e <_ZN9CMBSender13OnReceiveByteEh+0x188>
     446:	0c 94 16 38 	jmp	0x702c	; 0x702c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44a:	0c 94 96 39 	jmp	0x732c	; 0x732c <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44e:	0c 94 14 2e 	jmp	0x5c28	; 0x5c28 <_GLOBAL__sub_I_dacSPI>
     452:	0c 94 0e 3b 	jmp	0x761c	; 0x761c <_ZN7CTimerF8SetCOMPAEj>
     456:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     45a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     45e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     462:	0c 94 0c 33 	jmp	0x6618	; 0x6618 <_ZN9CMBSender13OnReceiveByteEh+0x122>
     466:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     46a:	0c 94 6b 33 	jmp	0x66d6	; 0x66d6 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     46e:	0c 94 8e 32 	jmp	0x651c	; 0x651c <_ZN9CMBSender13OnReceiveByteEh+0x26>
     472:	0c 94 a0 04 	jmp	0x940	; 0x940 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     476:	0c 94 d0 33 	jmp	0x67a0	; 0x67a0 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     47a:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     47e:	0c 94 ea 2f 	jmp	0x5fd4	; 0x5fd4 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     482:	0c 94 87 34 	jmp	0x690e	; 0x690e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     486:	0c 94 c2 34 	jmp	0x6984	; 0x6984 <_ZN10CDGUSUSART15GetReceivedByteEv>
     48a:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     48e:	0c 94 c5 34 	jmp	0x698a	; 0x698a <_ZN10CDGUSUSART19SetTransmittingByteEh>
     492:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     496:	0c 94 b8 39 	jmp	0x7370	; 0x7370 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     49a:	0c 94 fa 34 	jmp	0x69f4	; 0x69f4 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     49e:	0c 94 e3 3a 	jmp	0x75c6	; 0x75c6 <_ZN7CTimerF4StopEv>
     4a2:	0c 94 59 3a 	jmp	0x74b2	; 0x74b2 <_ZN8CTimerD18SetCOMPAEj>
     4a6:	0c 94 90 38 	jmp	0x7120	; 0x7120 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4aa:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     4ae:	0c 94 27 38 	jmp	0x704e	; 0x704e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4b2:	0c 94 22 3b 	jmp	0x7644	; 0x7644 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4b6:	0c 94 07 38 	jmp	0x700e	; 0x700e <_ZN7CTimerC8SetCOMPBEj>
     4ba:	0c 94 84 34 	jmp	0x6908	; 0x6908 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     4be:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4c2:	0c 94 38 38 	jmp	0x7070	; 0x7070 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4c6:	0c 94 bc 38 	jmp	0x7178	; 0x7178 <_ZN8CTimerC15ResetEv>
     4ca:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4ce:	0c 94 04 06 	jmp	0xc08	; 0xc08 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4d2:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     4d6:	0c 94 c0 04 	jmp	0x980	; 0x980 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     4da:	0c 94 02 38 	jmp	0x7004	; 0x7004 <_ZN7CTimerC8SetCOMPAEj>
     4de:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb8>
     4e2:	0c 94 09 3b 	jmp	0x7612	; 0x7612 <_ZN7CTimerF9SetPeriodEj>
     4e6:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4ea:	0c 94 9a 04 	jmp	0x934	; 0x934 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     4ee:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4f2:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     4f6:	0c 94 33 3b 	jmp	0x7666	; 0x7666 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4fa:	0c 94 a2 32 	jmp	0x6544	; 0x6544 <_ZN9CMBSender13OnReceiveByteEh+0x4e>
     4fe:	0c 94 eb 39 	jmp	0x73d6	; 0x73d6 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     502:	0c 94 46 3a 	jmp	0x748c	; 0x748c <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     506:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     50a:	0c 94 6f 39 	jmp	0x72de	; 0x72de <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     50e:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     512:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>

00000516 <__ctors_start>:
     516:	14 2e       	mov	r1, r20

00000518 <__ctors_end>:
     518:	49 2e       	mov	r4, r25

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	ee ec       	ldi	r30, 0xCE	; 206
     532:	fd e7       	ldi	r31, 0x7D	; 125
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 3c       	cpi	r26, 0xC4	; 196
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	26 e2       	ldi	r18, 0x26	; 38
     546:	a4 ec       	ldi	r26, 0xC4	; 196
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	ab 32       	cpi	r26, 0x2B	; 43
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 77 2f 	call	0x5eee	; 0x5eee <main>
     578:	0c 94 d5 3e 	jmp	0x7daa	; 0x7daa <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <DatabaseStatusRegister>
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 36 3d 	jmp	0x7a6c	; 0x7a6c <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
     8b0:	08 95       	ret

000008b2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	8c 01       	movw	r16, r24
     8c4:	eb 01       	movw	r28, r22
     8c6:	7a 01       	movw	r14, r20
     8c8:	69 01       	movw	r12, r18
     8ca:	fa 01       	movw	r30, r20
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_Z4swapj>
     8d4:	9c 01       	movw	r18, r24
     8d6:	f2 e0       	ldi	r31, 0x02	; 2
     8d8:	cf 16       	cp	r12, r31
     8da:	d1 04       	cpc	r13, r1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8de:	7a c0       	rjmp	.+244    	; 0x9d4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8e0:	fe 01       	movw	r30, r28
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	e2 31       	cpi	r30, 0x12	; 18
     8e6:	f1 05       	cpc	r31, r1
     8e8:	08 f0       	brcs	.+2      	; 0x8ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8ea:	a0 c0       	rjmp	.+320    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8ec:	88 27       	eor	r24, r24
     8ee:	e2 5d       	subi	r30, 0xD2	; 210
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	8f 4f       	sbci	r24, 0xFF	; 255
     8f4:	0c 94 36 3d 	jmp	0x7a6c	; 0x7a6c <__tablejump2__>
     8f8:	f8 01       	movw	r30, r16
     8fa:	e4 51       	subi	r30, 0x14	; 20
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	20 83       	st	Z, r18
     900:	31 83       	std	Z+1, r19	; 0x01
     902:	94 c0       	rjmp	.+296    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     904:	f8 01       	movw	r30, r16
     906:	e2 51       	subi	r30, 0x12	; 18
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	20 83       	st	Z, r18
     90c:	31 83       	std	Z+1, r19	; 0x01
     90e:	8e c0       	rjmp	.+284    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     910:	f8 01       	movw	r30, r16
     912:	e0 51       	subi	r30, 0x10	; 16
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	20 83       	st	Z, r18
     918:	31 83       	std	Z+1, r19	; 0x01
     91a:	88 c0       	rjmp	.+272    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     91c:	f8 01       	movw	r30, r16
     91e:	ee 50       	subi	r30, 0x0E	; 14
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	20 83       	st	Z, r18
     924:	31 83       	std	Z+1, r19	; 0x01
     926:	82 c0       	rjmp	.+260    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     928:	f8 01       	movw	r30, r16
     92a:	ec 50       	subi	r30, 0x0C	; 12
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	20 83       	st	Z, r18
     930:	31 83       	std	Z+1, r19	; 0x01
     932:	7c c0       	rjmp	.+248    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     934:	f8 01       	movw	r30, r16
     936:	e8 50       	subi	r30, 0x08	; 8
     938:	ff 4f       	sbci	r31, 0xFF	; 255
     93a:	20 83       	st	Z, r18
     93c:	31 83       	std	Z+1, r19	; 0x01
     93e:	76 c0       	rjmp	.+236    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     940:	f8 01       	movw	r30, r16
     942:	ea 50       	subi	r30, 0x0A	; 10
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	20 83       	st	Z, r18
     948:	31 83       	std	Z+1, r19	; 0x01
     94a:	70 c0       	rjmp	.+224    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     94c:	f7 01       	movw	r30, r14
     94e:	60 81       	ld	r22, Z
     950:	71 81       	ldd	r23, Z+1	; 0x01
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	93 81       	ldd	r25, Z+3	; 0x03
     956:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z6swap32m>
     95a:	f8 01       	movw	r30, r16
     95c:	e6 52       	subi	r30, 0x26	; 38
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	60 83       	st	Z, r22
     962:	71 83       	std	Z+1, r23	; 0x01
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	61 c0       	rjmp	.+194    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     96a:	f8 01       	movw	r30, r16
     96c:	e2 50       	subi	r30, 0x02	; 2
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	20 83       	st	Z, r18
     972:	31 83       	std	Z+1, r19	; 0x01
     974:	5b c0       	rjmp	.+182    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     976:	f8 01       	movw	r30, r16
     978:	f3 95       	inc	r31
     97a:	20 83       	st	Z, r18
     97c:	31 83       	std	Z+1, r19	; 0x01
     97e:	56 c0       	rjmp	.+172    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     980:	f8 01       	movw	r30, r16
     982:	ee 5f       	subi	r30, 0xFE	; 254
     984:	fe 4f       	sbci	r31, 0xFE	; 254
     986:	20 83       	st	Z, r18
     988:	31 83       	std	Z+1, r19	; 0x01
     98a:	50 c0       	rjmp	.+160    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     98c:	f8 01       	movw	r30, r16
     98e:	ec 5f       	subi	r30, 0xFC	; 252
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	20 83       	st	Z, r18
     994:	31 83       	std	Z+1, r19	; 0x01
     996:	4a c0       	rjmp	.+148    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     998:	f8 01       	movw	r30, r16
     99a:	ea 5f       	subi	r30, 0xFA	; 250
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	20 83       	st	Z, r18
     9a0:	31 83       	std	Z+1, r19	; 0x01
     9a2:	44 c0       	rjmp	.+136    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9a4:	f8 01       	movw	r30, r16
     9a6:	e8 5f       	subi	r30, 0xF8	; 248
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	20 83       	st	Z, r18
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	3e c0       	rjmp	.+124    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9b0:	f8 01       	movw	r30, r16
     9b2:	e6 5f       	subi	r30, 0xF6	; 246
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	20 83       	st	Z, r18
     9b8:	31 83       	std	Z+1, r19	; 0x01
     9ba:	38 c0       	rjmp	.+112    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9bc:	f8 01       	movw	r30, r16
     9be:	e4 5f       	subi	r30, 0xF4	; 244
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	20 83       	st	Z, r18
     9c4:	31 83       	std	Z+1, r19	; 0x01
     9c6:	32 c0       	rjmp	.+100    	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9c8:	f8 01       	movw	r30, r16
     9ca:	e2 5f       	subi	r30, 0xF2	; 242
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	20 83       	st	Z, r18
     9d0:	31 83       	std	Z+1, r19	; 0x01
     9d2:	2c c0       	rjmp	.+88     	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9d4:	c1 30       	cpi	r28, 0x01	; 1
     9d6:	d1 05       	cpc	r29, r1
     9d8:	51 f4       	brne	.+20     	; 0x9ee <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a6 01       	movw	r20, r12
     9e0:	b7 01       	movw	r22, r14
     9e2:	c8 01       	movw	r24, r16
     9e4:	84 51       	subi	r24, 0x14	; 20
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	0e 94 ba 19 	call	0x3374	; 0x3374 <_Z11ConvertDataPvS_jj>
     9ec:	1f c0       	rjmp	.+62     	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9ee:	c5 30       	cpi	r28, 0x05	; 5
     9f0:	d1 05       	cpc	r29, r1
     9f2:	51 f4       	brne	.+20     	; 0xa08 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x156>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	a6 01       	movw	r20, r12
     9fa:	b7 01       	movw	r22, r14
     9fc:	c8 01       	movw	r24, r16
     9fe:	8c 54       	subi	r24, 0x4C	; 76
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	0e 94 ba 19 	call	0x3374	; 0x3374 <_Z11ConvertDataPvS_jj>
     a06:	12 c0       	rjmp	.+36     	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a08:	22 97       	sbiw	r28, 0x02	; 2
     a0a:	81 f4       	brne	.+32     	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a0c:	f8 01       	movw	r30, r16
     a0e:	86 85       	ldd	r24, Z+14	; 0x0e
     a10:	86 30       	cpi	r24, 0x06	; 6
     a12:	50 f4       	brcc	.+20     	; 0xa28 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x176>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	a6 01       	movw	r20, r12
     a1a:	b7 01       	movw	r22, r14
     a1c:	c8 01       	movw	r24, r16
     a1e:	82 51       	subi	r24, 0x12	; 18
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	0e 94 ba 19 	call	0x3374	; 0x3374 <_Z11ConvertDataPvS_jj>
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a28:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <_ZN11CLaserBoard4BeepEv>
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	08 95       	ret

00000a3e <_Z13NormalizeStepRjS_S_jPj>:
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	6c 01       	movw	r12, r24
     a58:	fb 01       	movw	r30, r22
     a5a:	7a 01       	movw	r14, r20
     a5c:	dc 01       	movw	r26, r24
     a5e:	8d 90       	ld	r8, X+
     a60:	9c 90       	ld	r9, X
     a62:	da 01       	movw	r26, r20
     a64:	cd 91       	ld	r28, X+
     a66:	dc 91       	ld	r29, X
     a68:	c4 01       	movw	r24, r8
     a6a:	be 01       	movw	r22, r28
     a6c:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
     a70:	6c 9f       	mul	r22, r28
     a72:	50 01       	movw	r10, r0
     a74:	6d 9f       	mul	r22, r29
     a76:	b0 0c       	add	r11, r0
     a78:	7c 9f       	mul	r23, r28
     a7a:	b0 0c       	add	r11, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	c0 81       	ld	r28, Z
     a80:	d1 81       	ldd	r29, Z+1	; 0x01
     a82:	c8 19       	sub	r28, r8
     a84:	d9 09       	sbc	r29, r9
     a86:	f8 01       	movw	r30, r16
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	d7 01       	movw	r26, r14
     a8e:	6d 93       	st	X+, r22
     a90:	7c 93       	st	X, r23
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
     a98:	26 17       	cp	r18, r22
     a9a:	37 07       	cpc	r19, r23
     a9c:	60 f4       	brcc	.+24     	; 0xab6 <_Z13NormalizeStepRjS_S_jPj+0x78>
     a9e:	32 96       	adiw	r30, 0x02	; 2
     aa0:	61 91       	ld	r22, Z+
     aa2:	71 91       	ld	r23, Z+
     aa4:	d7 01       	movw	r26, r14
     aa6:	6d 93       	st	X+, r22
     aa8:	7c 93       	st	X, r23
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
     ab0:	26 17       	cp	r18, r22
     ab2:	37 07       	cpc	r19, r23
     ab4:	a8 f3       	brcs	.-22     	; 0xaa0 <_Z13NormalizeStepRjS_S_jPj+0x62>
     ab6:	f6 01       	movw	r30, r12
     ab8:	a0 82       	st	Z, r10
     aba:	b1 82       	std	Z+1, r11	; 0x01
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	08 95       	ret

00000ad6 <_ZN16CLaserControlAppC1Ev>:
     ad6:	2e e7       	ldi	r18, 0x7E	; 126
     ad8:	31 e2       	ldi	r19, 0x21	; 33
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	31 83       	std	Z+1, r19	; 0x01
     ae0:	08 95       	ret

00000ae2 <_ZN16CLaserControlAppD1Ev>:
     ae2:	2e e7       	ldi	r18, 0x7E	; 126
     ae4:	31 e2       	ldi	r19, 0x21	; 33
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	31 83       	std	Z+1, r19	; 0x01
     aec:	0e 94 dd 31 	call	0x63ba	; 0x63ba <_ZN16CMBEventsHandlerD1Ev>
     af0:	08 95       	ret

00000af2 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>:
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	1f 92       	push	r1
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	fc 01       	movw	r30, r24
     b00:	e8 52       	subi	r30, 0x28	; 40
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	80 81       	ld	r24, Z
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	38 2f       	mov	r19, r24
     b0c:	33 0f       	add	r19, r19
     b0e:	33 0f       	add	r19, r19
     b10:	36 95       	lsr	r19
     b12:	27 95       	ror	r18
     b14:	36 95       	lsr	r19
     b16:	27 95       	ror	r18
     b18:	36 95       	lsr	r19
     b1a:	27 95       	ror	r18
     b1c:	ab e7       	ldi	r26, 0x7B	; 123
     b1e:	b4 e1       	ldi	r27, 0x14	; 20
     b20:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
     b24:	96 95       	lsr	r25
     b26:	87 95       	ror	r24
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	42 e0       	ldi	r20, 0x02	; 2
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	81 e2       	ldi	r24, 0x21	; 33
     b40:	96 e2       	ldi	r25, 0x26	; 38
     b42:	0e 94 3b 1a 	call	0x3476	; 0x3476 <_ZN4CSPI4SendEPhj>
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <_ZN16CLaserControlApp11GetVariableEjj>:
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
     b56:	cc 5d       	subi	r28, 0xDC	; 220
     b58:	de 4f       	sbci	r29, 0xFE	; 254
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	0e 94 4d 34 	call	0x689a	; 0x689a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     b62:	88 81       	ld	r24, Y
     b64:	99 81       	ldd	r25, Y+1	; 0x01
     b66:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     b6a:	88 81       	ld	r24, Y
     b6c:	99 81       	ldd	r25, Y+1	; 0x01
     b6e:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <_ZN9CMBSender18WaitMODBUSListenerEv>
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	cc 5d       	subi	r28, 0xDC	; 220
     b80:	de 4f       	sbci	r29, 0xFE	; 254
     b82:	88 81       	ld	r24, Y
     b84:	99 81       	ldd	r25, Y+1	; 0x01
     b86:	0e 94 08 34 	call	0x6810	; 0x6810 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     b8a:	88 81       	ld	r24, Y
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <_ZN16CLaserControlApp12SetPictureIdEj>:
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	1f 92       	push	r1
     ba2:	1f 92       	push	r1
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	8c 01       	movw	r16, r24
     baa:	cb 01       	movw	r24, r22
     bac:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_Z4swapj>
     bb0:	89 83       	std	Y+1, r24	; 0x01
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	0c 5d       	subi	r16, 0xDC	; 220
     bb6:	1e 4f       	sbci	r17, 0xFE	; 254
     bb8:	22 e0       	ldi	r18, 0x02	; 2
     bba:	ae 01       	movw	r20, r28
     bbc:	4f 5f       	subi	r20, 0xFF	; 255
     bbe:	5f 4f       	sbci	r21, 0xFF	; 255
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     bcc:	f8 01       	movw	r30, r16
     bce:	80 81       	ld	r24, Z
     bd0:	91 81       	ldd	r25, Z+1	; 0x01
     bd2:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     be4:	fc 01       	movw	r30, r24
     be6:	83 89       	ldd	r24, Z+19	; 0x13
     be8:	88 23       	and	r24, r24
     bea:	21 f0       	breq	.+8      	; 0xbf4 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     bec:	81 ee       	ldi	r24, 0xE1	; 225
     bee:	95 e2       	ldi	r25, 0x25	; 37
     bf0:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <_ZN11CLaserBoard6PWMOffEv>
     bf4:	08 95       	ret

00000bf6 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	83 89       	ldd	r24, Z+19	; 0x13
     bfa:	88 23       	and	r24, r24
     bfc:	21 f0       	breq	.+8      	; 0xc06 <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     bfe:	81 ee       	ldi	r24, 0xE1	; 225
     c00:	95 e2       	ldi	r25, 0x25	; 37
     c02:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <_ZN11CLaserBoard5PWMOnEv>
     c06:	08 95       	ret

00000c08 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     c08:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     c0c:	08 95       	ret

00000c0e <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     c0e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     c12:	08 95       	ret

00000c14 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     c14:	08 95       	ret

00000c16 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     c16:	08 95       	ret

00000c18 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     c18:	08 95       	ret

00000c1a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>:
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
	laserPower = m_structLaserProfile[Profile].EnergyCnt;
}

void CLaserControlApp::UpdateLimits(uint16_t freq, uint16_t duration, uint16_t energy, APP_PROFILE mode)
{
     c1a:	8f 92       	push	r8
     c1c:	9f 92       	push	r9
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
     c32:	6b 01       	movw	r12, r22
     c34:	7a 01       	movw	r14, r20
	bool UpdateFreq = false;
	switch (mode)
     c36:	02 30       	cpi	r16, 0x02	; 2
     c38:	81 f0       	breq	.+32     	; 0xc5a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x40>
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x28>
     c3c:	01 30       	cpi	r16, 0x01	; 1
     c3e:	31 f0       	breq	.+12     	; 0xc4c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x32>
     c40:	33 c0       	rjmp	.+102    	; 0xca8 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
     c42:	03 30       	cpi	r16, 0x03	; 3
     c44:	b9 f0       	breq	.+46     	; 0xc74 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x5a>
     c46:	04 30       	cpi	r16, 0x04	; 4
     c48:	11 f1       	breq	.+68     	; 0xc8e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x74>
     c4a:	2e c0       	rjmp	.+92     	; 0xca8 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:		
			pstGUI[mode].m_wMinFreq = 1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	88 af       	std	Y+56, r24	; 0x38
     c52:	99 af       	std	Y+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     c54:	8e ab       	std	Y+54, r24	; 0x36
     c56:	9f ab       	std	Y+55, r25	; 0x37
     c58:	43 c0       	rjmp	.+134    	; 0xce0 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc6>
			UpdateFreq = true;
			break;
		case PROFILE_SLOW:			
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fe 01       	movw	r30, r28
     c60:	ee 5a       	subi	r30, 0xAE	; 174
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	80 83       	st	Z, r24
     c66:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	32 97       	sbiw	r30, 0x02	; 2
     c6e:	80 83       	st	Z, r24
     c70:	91 83       	std	Z+1, r25	; 0x01
			break;
     c72:	1c c0       	rjmp	.+56     	; 0xcac <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x92>
		case PROFILE_MEDIUM:		
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fe 01       	movw	r30, r28
     c7a:	e4 59       	subi	r30, 0x94	; 148
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	80 83       	st	Z, r24
     c80:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	32 97       	sbiw	r30, 0x02	; 2
     c88:	80 83       	st	Z, r24
     c8a:	91 83       	std	Z+1, r25	; 0x01
			break;
     c8c:	0f c0       	rjmp	.+30     	; 0xcac <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x92>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     c8e:	86 e0       	ldi	r24, 0x06	; 6
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fe 01       	movw	r30, r28
     c94:	ea 57       	subi	r30, 0x7A	; 122
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	80 83       	st	Z, r24
     c9a:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	32 97       	sbiw	r30, 0x02	; 2
     ca2:	80 83       	st	Z, r24
     ca4:	91 83       	std	Z+1, r25	; 0x01
			break;
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x92>
	}
	if (mode != PROFILE_SINGLE)	
     ca8:	01 30       	cpi	r16, 0x01	; 1
     caa:	f9 f0       	breq	.+62     	; 0xcea <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xd0>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
     cac:	80 2f       	mov	r24, r16
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	fe 01       	movw	r30, r28
     cb2:	2a e1       	ldi	r18, 0x1A	; 26
     cb4:	02 9f       	mul	r16, r18
     cb6:	e0 0d       	add	r30, r0
     cb8:	f1 1d       	adc	r31, r1
     cba:	11 24       	eor	r1, r1
     cbc:	26 8d       	ldd	r18, Z+30	; 0x1e
     cbe:	37 8d       	ldd	r19, Z+31	; 0x1f
     cc0:	c2 16       	cp	r12, r18
     cc2:	d3 06       	cpc	r13, r19
     cc4:	68 f0       	brcs	.+26     	; 0xce0 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc6>
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
     cc6:	2a e1       	ldi	r18, 0x1A	; 26
     cc8:	28 9f       	mul	r18, r24
     cca:	f0 01       	movw	r30, r0
     ccc:	29 9f       	mul	r18, r25
     cce:	f0 0d       	add	r31, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	ec 0f       	add	r30, r28
     cd4:	fd 1f       	adc	r31, r29
     cd6:	84 8d       	ldd	r24, Z+28	; 0x1c
     cd8:	95 8d       	ldd	r25, Z+29	; 0x1d
     cda:	8c 15       	cp	r24, r12
     cdc:	9d 05       	cpc	r25, r13
     cde:	28 f4       	brcc	.+10     	; 0xcea <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xd0>
	}
	
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
     ce0:	fe 01       	movw	r30, r28
     ce2:	e2 51       	subi	r30, 0x12	; 18
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	c0 82       	st	Z, r12
     ce8:	d1 82       	std	Z+1, r13	; 0x01
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     cea:	c6 01       	movw	r24, r12
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	fc 01       	movw	r30, r24
     cf2:	ec 5d       	subi	r30, 0xDC	; 220
     cf4:	fe 4d       	sbci	r31, 0xDE	; 222
     cf6:	20 81       	ld	r18, Z
     cf8:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 5f       	subi	r30, 0xF2	; 242
     cfe:	fe 4d       	sbci	r31, 0xDE	; 222
     d00:	01 90       	ld	r0, Z+
     d02:	f0 81       	ld	r31, Z
     d04:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     d06:	dc 01       	movw	r26, r24
     d08:	a8 50       	subi	r26, 0x08	; 8
     d0a:	bf 4d       	sbci	r27, 0xDF	; 223
     d0c:	ad 90       	ld	r10, X+
     d0e:	bc 90       	ld	r11, X
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	a4 1a       	sub	r10, r20
     d14:	b1 08       	sbc	r11, r1
     d16:	cf 01       	movw	r24, r30
     d18:	82 1b       	sub	r24, r18
     d1a:	93 0b       	sbc	r25, r19
     d1c:	b5 01       	movw	r22, r10
     d1e:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
     d22:	52 2f       	mov	r21, r18
     d24:	43 2f       	mov	r20, r19
     d26:	2e 15       	cp	r18, r14
     d28:	3f 05       	cpc	r19, r15
     d2a:	10 f4       	brcc	.+4      	; 0xd30 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
     d2c:	5e 2d       	mov	r21, r14
     d2e:	4f 2d       	mov	r20, r15
     d30:	85 2f       	mov	r24, r21
     d32:	94 2f       	mov	r25, r20
     d34:	e8 17       	cp	r30, r24
     d36:	f9 07       	cpc	r31, r25
     d38:	08 f4       	brcc	.+2      	; 0xd3c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x122>
     d3a:	cf 01       	movw	r24, r30
     d3c:	e0 2e       	mov	r14, r16
     d3e:	f1 2c       	mov	r15, r1
     d40:	4e 01       	movw	r8, r28
     d42:	aa e1       	ldi	r26, 0x1A	; 26
     d44:	0a 9f       	mul	r16, r26
     d46:	80 0c       	add	r8, r0
     d48:	91 1c       	adc	r9, r1
     d4a:	11 24       	eor	r1, r1
	
	// Update duration helpers
	if (duration < MinD)	duration = MinD;
	if (duration > MaxD)	duration = MaxD;
		
	if ((pstGUI[mode].m_wMinDuration != MinD) || (pstGUI[mode].m_wMaxDuration != MaxD))
     d4c:	d4 01       	movw	r26, r8
     d4e:	5a 96       	adiw	r26, 0x1a	; 26
     d50:	4d 91       	ld	r20, X+
     d52:	5c 91       	ld	r21, X
     d54:	5b 97       	sbiw	r26, 0x1b	; 27
     d56:	42 17       	cp	r20, r18
     d58:	53 07       	cpc	r21, r19
     d5a:	81 f4       	brne	.+32     	; 0xd7c <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x162>
     d5c:	0a e1       	ldi	r16, 0x1A	; 26
     d5e:	0e 9d       	mul	r16, r14
     d60:	a0 01       	movw	r20, r0
     d62:	0f 9d       	mul	r16, r15
     d64:	50 0d       	add	r21, r0
     d66:	11 24       	eor	r1, r1
     d68:	4c 0f       	add	r20, r28
     d6a:	5d 1f       	adc	r21, r29
     d6c:	da 01       	movw	r26, r20
     d6e:	58 96       	adiw	r26, 0x18	; 24
     d70:	4d 91       	ld	r20, X+
     d72:	5c 91       	ld	r21, X
     d74:	59 97       	sbiw	r26, 0x19	; 25
     d76:	4e 17       	cp	r20, r30
     d78:	5f 07       	cpc	r21, r31
     d7a:	a1 f0       	breq	.+40     	; 0xda4 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x18a>
	{
		pstGUI[mode].m_wMinDuration = MinD;
     d7c:	d4 01       	movw	r26, r8
     d7e:	5a 96       	adiw	r26, 0x1a	; 26
     d80:	2d 93       	st	X+, r18
     d82:	3c 93       	st	X, r19
     d84:	5b 97       	sbiw	r26, 0x1b	; 27
		pstGUI[mode].m_wMaxDuration = MaxD;	
     d86:	4a e1       	ldi	r20, 0x1A	; 26
     d88:	4e 9d       	mul	r20, r14
     d8a:	d0 01       	movw	r26, r0
     d8c:	4f 9d       	mul	r20, r15
     d8e:	b0 0d       	add	r27, r0
     d90:	11 24       	eor	r1, r1
     d92:	ac 0f       	add	r26, r28
     d94:	bd 1f       	adc	r27, r29
     d96:	58 96       	adiw	r26, 0x18	; 24
     d98:	ed 93       	st	X+, r30
     d9a:	fc 93       	st	X, r31
     d9c:	59 97       	sbiw	r26, 0x19	; 25
		pstGUI[mode].updateDuration = true;
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	9c 96       	adiw	r26, 0x2c	; 44
     da2:	4c 93       	st	X, r20
	}

	uint16_t index = (duration - MinD) / Delta;
     da4:	82 1b       	sub	r24, r18
     da6:	93 0b       	sbc	r25, r19
     da8:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_Z3maxjj>
     db4:	b5 01       	movw	r22, r10
     db6:	0e 94 e6 19 	call	0x33cc	; 0x33cc <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
     dba:	4b e0       	ldi	r20, 0x0B	; 11
     dbc:	4c 9d       	mul	r20, r12
     dbe:	90 01       	movw	r18, r0
     dc0:	4d 9d       	mul	r20, r13
     dc2:	30 0d       	add	r19, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	fc 01       	movw	r30, r24
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	ea 5f       	subi	r30, 0xFA	; 250
     dd2:	ff 4d       	sbci	r31, 0xDF	; 223
     dd4:	20 81       	ld	r18, Z
     dd6:	31 81       	ldd	r19, Z+1	; 0x01
     dd8:	8a e1       	ldi	r24, 0x1A	; 26
     dda:	8e 9d       	mul	r24, r14
     ddc:	f0 01       	movw	r30, r0
     dde:	8f 9d       	mul	r24, r15
     de0:	f0 0d       	add	r31, r0
     de2:	11 24       	eor	r1, r1
     de4:	ec 0f       	add	r30, r28
     de6:	fd 1f       	adc	r31, r29
     de8:	24 8b       	std	Z+20, r18	; 0x14
     dea:	35 8b       	std	Z+21, r19	; 0x15
		
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
     dec:	40 a1       	ldd	r20, Z+32	; 0x20
     dee:	51 a1       	ldd	r21, Z+33	; 0x21
		
	if ((pstGUI[mode].m_wMinEnergy_ != Offset) || (pstGUI[mode].m_wMaxEnergy_ != MaxEnergy))
     df0:	86 89       	ldd	r24, Z+22	; 0x16
     df2:	97 89       	ldd	r25, Z+23	; 0x17
     df4:	84 17       	cp	r24, r20
     df6:	95 07       	cpc	r25, r21
     df8:	21 f0       	breq	.+8      	; 0xe02 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x1e8>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
     dfa:	46 8b       	std	Z+22, r20	; 0x16
     dfc:	57 8b       	std	Z+23, r21	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	85 a7       	std	Z+45, r24	; 0x2d
	}
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	9f 90       	pop	r9
     e16:	8f 90       	pop	r8
     e18:	08 95       	ret

00000e1a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
     e1a:	3f 92       	push	r3
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	2a 97       	sbiw	r28, 0x0a	; 10
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	7c 01       	movw	r14, r24
     e48:	6b 01       	movw	r12, r22
     e4a:	5a 01       	movw	r10, r20
     e4c:	49 01       	movw	r8, r18
     e4e:	30 2e       	mov	r3, r16
	bool UpdateFreq = false;
	switch (mode)
     e50:	22 e0       	ldi	r18, 0x02	; 2
     e52:	02 17       	cp	r16, r18
     e54:	01 f1       	breq	.+64     	; 0xe96 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x7c>
     e56:	20 17       	cp	r18, r16
     e58:	20 f0       	brcs	.+8      	; 0xe62 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x48>
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	04 17       	cp	r16, r20
     e5e:	41 f0       	breq	.+16     	; 0xe70 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x56>
     e60:	41 c0       	rjmp	.+130    	; 0xee4 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	08 17       	cp	r16, r24
     e66:	21 f1       	breq	.+72     	; 0xeb0 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x96>
     e68:	a4 e0       	ldi	r26, 0x04	; 4
     e6a:	0a 17       	cp	r16, r26
     e6c:	71 f1       	breq	.+92     	; 0xeca <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xb0>
     e6e:	3a c0       	rjmp	.+116    	; 0xee4 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	f7 01       	movw	r30, r14
     e76:	80 af       	std	Z+56, r24	; 0x38
     e78:	91 af       	std	Z+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     e7a:	86 ab       	std	Z+54, r24	; 0x36
     e7c:	97 ab       	std	Z+55, r25	; 0x37
			if (freq != 1)
     e7e:	db 01       	movw	r26, r22
     e80:	8d 91       	ld	r24, X+
     e82:	9c 91       	ld	r25, X
     e84:	11 97       	sbiw	r26, 0x01	; 1
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	09 f4       	brne	.+2      	; 0xe8c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x72>
     e8a:	8e c1       	rjmp	.+796    	; 0x11a8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x38e>
			{
				freq = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	8d 93       	st	X+, r24
     e92:	9c 93       	st	X, r25
     e94:	8a c1       	rjmp	.+788    	; 0x11aa <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x390>
				UpdateFreq = true;
			}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	f7 01       	movw	r30, r14
     e9c:	ee 5a       	subi	r30, 0xAE	; 174
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	32 97       	sbiw	r30, 0x02	; 2
     eaa:	80 83       	st	Z, r24
     eac:	91 83       	std	Z+1, r25	; 0x01
		break;
     eae:	1d c0       	rjmp	.+58     	; 0xeea <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd0>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	f7 01       	movw	r30, r14
     eb6:	e4 59       	subi	r30, 0x94	; 148
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	32 97       	sbiw	r30, 0x02	; 2
     ec4:	80 83       	st	Z, r24
     ec6:	91 83       	std	Z+1, r25	; 0x01
		break;
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd0>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     eca:	86 e0       	ldi	r24, 0x06	; 6
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	f7 01       	movw	r30, r14
     ed0:	ea 57       	subi	r30, 0x7A	; 122
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	80 83       	st	Z, r24
     ed6:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	32 97       	sbiw	r30, 0x02	; 2
     ede:	80 83       	st	Z, r24
     ee0:	91 83       	std	Z+1, r25	; 0x01
		break;
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd0>
	}
	
	if (mode != PROFILE_SINGLE)
     ee4:	b1 e0       	ldi	r27, 0x01	; 1
     ee6:	3b 16       	cp	r3, r27
     ee8:	e1 f1       	breq	.+120    	; 0xf62 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x148>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
     eea:	f6 01       	movw	r30, r12
     eec:	20 81       	ld	r18, Z
     eee:	31 81       	ldd	r19, Z+1	; 0x01
     ef0:	83 2d       	mov	r24, r3
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	f7 01       	movw	r30, r14
     ef6:	4a e1       	ldi	r20, 0x1A	; 26
     ef8:	34 9e       	mul	r3, r20
     efa:	e0 0d       	add	r30, r0
     efc:	f1 1d       	adc	r31, r1
     efe:	11 24       	eor	r1, r1
     f00:	46 8d       	ldd	r20, Z+30	; 0x1e
     f02:	57 8d       	ldd	r21, Z+31	; 0x1f
     f04:	24 17       	cp	r18, r20
     f06:	35 07       	cpc	r19, r21
     f08:	88 f4       	brcc	.+34     	; 0xf2c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x112>
     f0a:	d6 01       	movw	r26, r12
     f0c:	4d 93       	st	X+, r20
     f0e:	5c 93       	st	X, r21
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
     f10:	2a e1       	ldi	r18, 0x1A	; 26
     f12:	28 9f       	mul	r18, r24
     f14:	f0 01       	movw	r30, r0
     f16:	29 9f       	mul	r18, r25
     f18:	f0 0d       	add	r31, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	ee 0d       	add	r30, r14
     f1e:	ff 1d       	adc	r31, r15
     f20:	84 8d       	ldd	r24, Z+28	; 0x1c
     f22:	95 8d       	ldd	r25, Z+29	; 0x1d
     f24:	84 17       	cp	r24, r20
     f26:	95 07       	cpc	r25, r21
     f28:	70 f0       	brcs	.+28     	; 0xf46 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x12c>
     f2a:	10 c0       	rjmp	.+32     	; 0xf4c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x132>
     f2c:	4a e1       	ldi	r20, 0x1A	; 26
     f2e:	48 9f       	mul	r20, r24
     f30:	f0 01       	movw	r30, r0
     f32:	49 9f       	mul	r20, r25
     f34:	f0 0d       	add	r31, r0
     f36:	11 24       	eor	r1, r1
     f38:	ee 0d       	add	r30, r14
     f3a:	ff 1d       	adc	r31, r15
     f3c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f3e:	95 8d       	ldd	r25, Z+29	; 0x1d
     f40:	82 17       	cp	r24, r18
     f42:	93 07       	cpc	r25, r19
     f44:	70 f4       	brcc	.+28     	; 0xf62 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x148>
     f46:	f6 01       	movw	r30, r12
     f48:	80 83       	st	Z, r24
     f4a:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (UpdateFreq)
	{
		// Update Frequency
		laserDiodeData.laserprofile.Frequency = freq;
     f4c:	d6 01       	movw	r26, r12
     f4e:	8d 91       	ld	r24, X+
     f50:	9c 91       	ld	r25, X
     f52:	f7 01       	movw	r30, r14
     f54:	e2 51       	subi	r30, 0x12	; 18
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
		update = true;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	f7 01       	movw	r30, r14
     f60:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     f62:	d6 01       	movw	r26, r12
     f64:	4d 91       	ld	r20, X+
     f66:	5c 91       	ld	r21, X
     f68:	44 0f       	add	r20, r20
     f6a:	55 1f       	adc	r21, r21
     f6c:	fa 01       	movw	r30, r20
     f6e:	ec 5d       	subi	r30, 0xDC	; 220
     f70:	fe 4d       	sbci	r31, 0xDE	; 222
     f72:	20 81       	ld	r18, Z
     f74:	31 81       	ldd	r19, Z+1	; 0x01
     f76:	29 87       	std	Y+9, r18	; 0x09
     f78:	3a 87       	std	Y+10, r19	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
     f7a:	fa 01       	movw	r30, r20
     f7c:	e2 5f       	subi	r30, 0xF2	; 242
     f7e:	fe 4d       	sbci	r31, 0xDE	; 222
     f80:	01 90       	ld	r0, Z+
     f82:	f0 81       	ld	r31, Z
     f84:	e0 2d       	mov	r30, r0
     f86:	ef 83       	std	Y+7, r30	; 0x07
     f88:	f8 87       	std	Y+8, r31	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     f8a:	cf 01       	movw	r24, r30
     f8c:	82 1b       	sub	r24, r18
     f8e:	93 0b       	sbc	r25, r19
     f90:	da 01       	movw	r26, r20
     f92:	a8 50       	subi	r26, 0x08	; 8
     f94:	bf 4d       	sbci	r27, 0xDF	; 223
     f96:	6d 91       	ld	r22, X+
     f98:	7c 91       	ld	r23, X
     f9a:	61 50       	subi	r22, 0x01	; 1
     f9c:	71 09       	sbc	r23, r1
     f9e:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
     fa2:	3b 01       	movw	r6, r22
	uint16_t step ;
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
     fa4:	d5 01       	movw	r26, r10
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	82 17       	cp	r24, r18
     fae:	93 07       	cpc	r25, r19
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19a>
     fb2:	fe c0       	rjmp	.+508    	; 0x11b0 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x396>
     fb4:	2d 93       	st	X+, r18
     fb6:	3c 93       	st	X, r19
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
     fb8:	e2 17       	cp	r30, r18
     fba:	f3 07       	cpc	r31, r19
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1aa>
     fbe:	d5 01       	movw	r26, r10
     fc0:	ed 93       	st	X+, r30
     fc2:	fc 93       	st	X, r31
	
	if (UpdateDuration)
	{			
		// Update duration helpers	
		step = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	9e 83       	std	Y+6, r25	; 0x06
		NormalizeStep(MinD, MaxD, step, 20, step_table);
     fcc:	08 e0       	ldi	r16, 0x08	; 8
     fce:	10 e2       	ldi	r17, 0x20	; 32
     fd0:	24 e1       	ldi	r18, 0x14	; 20
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	ae 01       	movw	r20, r28
     fd6:	4b 5f       	subi	r20, 0xFB	; 251
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	be 01       	movw	r22, r28
     fdc:	69 5f       	subi	r22, 0xF9	; 249
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	ce 01       	movw	r24, r28
     fe2:	09 96       	adiw	r24, 0x09	; 9
     fe4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wDurationStep = step;
     fe8:	6d 81       	ldd	r22, Y+5	; 0x05
     fea:	7e 81       	ldd	r23, Y+6	; 0x06
     fec:	4a e1       	ldi	r20, 0x1A	; 26
     fee:	03 2d       	mov	r16, r3
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	f7 01       	movw	r30, r14
     ff4:	43 9d       	mul	r20, r3
     ff6:	e0 0d       	add	r30, r0
     ff8:	f1 1d       	adc	r31, r1
     ffa:	11 24       	eor	r1, r1
     ffc:	60 a7       	std	Z+40, r22	; 0x28
     ffe:	71 a7       	std	Z+41, r23	; 0x29
		pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    1000:	4f 80       	ldd	r4, Y+7	; 0x07
    1002:	58 84       	ldd	r5, Y+8	; 0x08
    1004:	29 85       	ldd	r18, Y+9	; 0x09
    1006:	3a 85       	ldd	r19, Y+10	; 0x0a
    1008:	c2 01       	movw	r24, r4
    100a:	82 1b       	sub	r24, r18
    100c:	93 0b       	sbc	r25, r19
    100e:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1012:	62 a7       	std	Z+42, r22	; 0x2a
    1014:	73 a7       	std	Z+43, r23	; 0x2b
		pstGUI[mode].m_wDurationOffset = MinD;
    1016:	26 a3       	std	Z+38, r18	; 0x26
    1018:	37 a3       	std	Z+39, r19	; 0x27
		pstGUI[mode].m_wMinDuration = MinD;
    101a:	0f 5f       	subi	r16, 0xFF	; 255
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	40 9f       	mul	r20, r16
    1020:	d0 01       	movw	r26, r0
    1022:	41 9f       	mul	r20, r17
    1024:	b0 0d       	add	r27, r0
    1026:	11 24       	eor	r1, r1
    1028:	ae 0d       	add	r26, r14
    102a:	bf 1d       	adc	r27, r15
    102c:	2d 93       	st	X+, r18
    102e:	3c 93       	st	X, r19
		pstGUI[mode].m_wMaxDuration = MaxD;
    1030:	40 8e       	std	Z+24, r4	; 0x18
    1032:	51 8e       	std	Z+25, r5	; 0x19
		
		// Update Duration
		laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    1034:	97 01       	movw	r18, r14
    1036:	20 51       	subi	r18, 0x10	; 16
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	d5 01       	movw	r26, r10
    103c:	8d 91       	ld	r24, X+
    103e:	9c 91       	ld	r25, X
    1040:	46 a1       	ldd	r20, Z+38	; 0x26
    1042:	57 a1       	ldd	r21, Z+39	; 0x27
    1044:	84 1b       	sub	r24, r20
    1046:	95 0b       	sbc	r25, r21
    1048:	60 a5       	ldd	r22, Z+40	; 0x28
    104a:	71 a5       	ldd	r23, Z+41	; 0x29
    104c:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1050:	f9 01       	movw	r30, r18
    1052:	60 83       	st	Z, r22
    1054:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Duration = duration;
    1056:	d5 01       	movw	r26, r10
    1058:	8d 91       	ld	r24, X+
    105a:	9c 91       	ld	r25, X
    105c:	36 96       	adiw	r30, 0x06	; 6
    105e:	80 83       	st	Z, r24
    1060:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	f7 01       	movw	r30, r14
    1066:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1068:	d6 01       	movw	r26, r12
    106a:	ed 91       	ld	r30, X+
    106c:	fc 91       	ld	r31, X
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	e8 50       	subi	r30, 0x08	; 8
    1074:	ff 4d       	sbci	r31, 0xDF	; 223
    1076:	40 80       	ld	r4, Z
    1078:	51 80       	ldd	r5, Z+1	; 0x01
    107a:	b1 e0       	ldi	r27, 0x01	; 1
    107c:	4b 1a       	sub	r4, r27
    107e:	51 08       	sbc	r5, r1
		laserDiodeData.lasersettings.Duration = duration;
		
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    1080:	f5 01       	movw	r30, r10
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	29 85       	ldd	r18, Y+9	; 0x09
    1088:	3a 85       	ldd	r19, Y+10	; 0x0a
    108a:	82 1b       	sub	r24, r18
    108c:	93 0b       	sbc	r25, r19
    108e:	b3 01       	movw	r22, r6
    1090:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_Z3maxjj>
    109c:	b2 01       	movw	r22, r4
    109e:	0e 94 e6 19 	call	0x33cc	; 0x33cc <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    10a2:	d6 01       	movw	r26, r12
    10a4:	4d 91       	ld	r20, X+
    10a6:	5c 91       	ld	r21, X
    10a8:	6b e0       	ldi	r22, 0x0B	; 11
    10aa:	64 9f       	mul	r22, r20
    10ac:	90 01       	movw	r18, r0
    10ae:	65 9f       	mul	r22, r21
    10b0:	30 0d       	add	r19, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	fc 01       	movw	r30, r24
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	ea 5f       	subi	r30, 0xFA	; 250
    10c0:	ff 4d       	sbci	r31, 0xDF	; 223
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	43 2d       	mov	r20, r3
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	f7 01       	movw	r30, r14
    10cc:	ba e1       	ldi	r27, 0x1A	; 26
    10ce:	3b 9e       	mul	r3, r27
    10d0:	e0 0d       	add	r30, r0
    10d2:	f1 1d       	adc	r31, r1
    10d4:	11 24       	eor	r1, r1
    10d6:	84 8b       	std	Z+20, r24	; 0x14
    10d8:	95 8b       	std	Z+21, r25	; 0x15
	
	if (energy > pstGUI[mode].m_wMaxEnergy_)
    10da:	f4 01       	movw	r30, r8
    10dc:	20 81       	ld	r18, Z
    10de:	31 81       	ldd	r19, Z+1	; 0x01
    10e0:	82 17       	cp	r24, r18
    10e2:	93 07       	cpc	r25, r19
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x2ce>
    10e6:	5d c0       	rjmp	.+186    	; 0x11a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x388>
	{
		energy = pstGUI[mode].m_wMaxEnergy_;
    10e8:	80 83       	st	Z, r24
    10ea:	91 83       	std	Z+1, r25	; 0x01
		
		// Update energy helpers
		step = 1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	8d 83       	std	Y+5, r24	; 0x05
    10f2:	9e 83       	std	Y+6, r25	; 0x06
		uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    10f4:	8a e1       	ldi	r24, 0x1A	; 26
    10f6:	84 9f       	mul	r24, r20
    10f8:	60 01       	movw	r12, r0
    10fa:	85 9f       	mul	r24, r21
    10fc:	d0 0c       	add	r13, r0
    10fe:	11 24       	eor	r1, r1
    1100:	ce 0c       	add	r12, r14
    1102:	df 1c       	adc	r13, r15
    1104:	d6 01       	movw	r26, r12
    1106:	54 96       	adiw	r26, 0x14	; 20
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	55 97       	sbiw	r26, 0x15	; 21
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    1112:	90 96       	adiw	r26, 0x20	; 32
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	91 97       	sbiw	r26, 0x21	; 33
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
		NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    111e:	08 e0       	ldi	r16, 0x08	; 8
    1120:	10 e2       	ldi	r17, 0x20	; 32
    1122:	24 e1       	ldi	r18, 0x14	; 20
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	ae 01       	movw	r20, r28
    1128:	4b 5f       	subi	r20, 0xFB	; 251
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	be 01       	movw	r22, r28
    112e:	6d 5f       	subi	r22, 0xFD	; 253
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wEnergyOffset = Offset;
    113a:	29 81       	ldd	r18, Y+1	; 0x01
    113c:	3a 81       	ldd	r19, Y+2	; 0x02
    113e:	f6 01       	movw	r30, r12
    1140:	20 a3       	std	Z+32, r18	; 0x20
    1142:	31 a3       	std	Z+33, r19	; 0x21
		pstGUI[mode].m_wEnergyStep = step;
    1144:	6d 81       	ldd	r22, Y+5	; 0x05
    1146:	7e 81       	ldd	r23, Y+6	; 0x06
    1148:	62 a3       	std	Z+34, r22	; 0x22
    114a:	73 a3       	std	Z+35, r23	; 0x23
		pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    114c:	84 89       	ldd	r24, Z+20	; 0x14
    114e:	95 89       	ldd	r25, Z+21	; 0x15
    1150:	82 1b       	sub	r24, r18
    1152:	93 0b       	sbc	r25, r19
    1154:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1158:	64 a3       	std	Z+36, r22	; 0x24
    115a:	75 a3       	std	Z+37, r23	; 0x25
		pstGUI[mode].m_wMinEnergy_ = Offset;
    115c:	26 8b       	std	Z+22, r18	; 0x16
    115e:	37 8b       	std	Z+23, r19	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	84 8b       	std	Z+20, r24	; 0x14
    1166:	95 8b       	std	Z+21, r25	; 0x15
		
		// Update Energy
		laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    1168:	f7 01       	movw	r30, r14
    116a:	ee 50       	subi	r30, 0x0E	; 14
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	d4 01       	movw	r26, r8
    1170:	8d 91       	ld	r24, X+
    1172:	9c 91       	ld	r25, X
    1174:	d6 01       	movw	r26, r12
    1176:	82 1b       	sub	r24, r18
    1178:	93 0b       	sbc	r25, r19
    117a:	92 96       	adiw	r26, 0x22	; 34
    117c:	6d 91       	ld	r22, X+
    117e:	7c 91       	ld	r23, X
    1180:	93 97       	sbiw	r26, 0x23	; 35
    1182:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1186:	60 83       	st	Z, r22
    1188:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Energy = energy;
    118a:	f4 01       	movw	r30, r8
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	f7 01       	movw	r30, r14
    1192:	e8 50       	subi	r30, 0x08	; 8
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 83       	st	Z, r24
    1198:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	d7 01       	movw	r26, r14
    119e:	51 96       	adiw	r26, 0x11	; 17
    11a0:	8c 93       	st	X, r24
	}
	
	return update;
    11a2:	f7 01       	movw	r30, r14
    11a4:	81 89       	ldd	r24, Z+17	; 0x11
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a0>
	}
}

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    11a8:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
	}
	
	if (UpdateFreq)
    11aa:	81 11       	cpse	r24, r1
    11ac:	cf ce       	rjmp	.-610    	; 0xf4c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x132>
    11ae:	d9 ce       	rjmp	.-590    	; 0xf62 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x148>
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
	uint16_t step ;
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    11b0:	e8 17       	cp	r30, r24
    11b2:	f9 07       	cpc	r31, r25
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x39e>
    11b6:	03 cf       	rjmp	.-506    	; 0xfbe <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1a4>
    11b8:	57 cf       	rjmp	.-338    	; 0x1068 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x24e>
		
		update = true;
	}
	
	return update;
}
    11ba:	2a 96       	adiw	r28, 0x0a	; 10
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	5f 90       	pop	r5
    11de:	4f 90       	pop	r4
    11e0:	3f 90       	pop	r3
    11e2:	08 95       	ret

000011e4 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>:

void CLaserControlApp::CalculateDurationSteps(uint16_t &freq, uint16_t &duration)
{
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x14>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x16>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	7c 01       	movw	r14, r24
    1200:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MinD = pstGUI[Profile].m_wMinDuration;
    120a:	d7 01       	movw	r26, r14
    120c:	1e 96       	adiw	r26, 0x0e	; 14
    120e:	8c 91       	ld	r24, X
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 01       	movw	r18, r24
    1214:	2f 5f       	subi	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	0f 2e       	mov	r0, r31
    121a:	fa e1       	ldi	r31, 0x1A	; 26
    121c:	bf 2e       	mov	r11, r31
    121e:	f0 2d       	mov	r31, r0
    1220:	b2 9e       	mul	r11, r18
    1222:	f0 01       	movw	r30, r0
    1224:	b3 9e       	mul	r11, r19
    1226:	f0 0d       	add	r31, r0
    1228:	11 24       	eor	r1, r1
    122a:	ee 0d       	add	r30, r14
    122c:	ff 1d       	adc	r31, r15
    122e:	20 81       	ld	r18, Z
    1230:	31 81       	ldd	r19, Z+1	; 0x01
    1232:	2b 83       	std	Y+3, r18	; 0x03
    1234:	3c 83       	std	Y+4, r19	; 0x04
	uint16_t MaxD = pstGUI[Profile].m_wMaxDuration;
    1236:	b8 9e       	mul	r11, r24
    1238:	f0 01       	movw	r30, r0
    123a:	b9 9e       	mul	r11, r25
    123c:	f0 0d       	add	r31, r0
    123e:	11 24       	eor	r1, r1
    1240:	ee 0d       	add	r30, r14
    1242:	ff 1d       	adc	r31, r15
    1244:	80 8d       	ldd	r24, Z+24	; 0x18
    1246:	91 8d       	ldd	r25, Z+25	; 0x19
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    124c:	08 e0       	ldi	r16, 0x08	; 8
    124e:	10 e2       	ldi	r17, 0x20	; 32
    1250:	24 e1       	ldi	r18, 0x14	; 20
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	ae 01       	movw	r20, r28
    1256:	4b 5f       	subi	r20, 0xFB	; 251
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	be 01       	movw	r22, r28
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	ce 01       	movw	r24, r28
    1262:	03 96       	adiw	r24, 0x03	; 3
    1264:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wDurationStep = step;
    1268:	f7 01       	movw	r30, r14
    126a:	86 85       	ldd	r24, Z+14	; 0x0e
    126c:	6d 81       	ldd	r22, Y+5	; 0x05
    126e:	7e 81       	ldd	r23, Y+6	; 0x06
    1270:	b8 9e       	mul	r11, r24
    1272:	e0 0d       	add	r30, r0
    1274:	f1 1d       	adc	r31, r1
    1276:	11 24       	eor	r1, r1
    1278:	60 a7       	std	Z+40, r22	; 0x28
    127a:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[Profile].m_wDurationNumSteps = (MaxD - MinD)/step;
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	82 1b       	sub	r24, r18
    1286:	93 0b       	sbc	r25, r19
    1288:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    128c:	62 a7       	std	Z+42, r22	; 0x2a
    128e:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[Profile].m_wDurationOffset = MinD;
    1290:	26 a3       	std	Z+38, r18	; 0x26
    1292:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[Profile].updateDuration = false;
    1294:	14 a6       	std	Z+44, r1	; 0x2c
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[Profile].m_wDurationOffset) / pstGUI[Profile].m_wDurationStep;
    1296:	97 01       	movw	r18, r14
    1298:	20 51       	subi	r18, 0x10	; 16
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	d6 01       	movw	r26, r12
    129e:	8d 91       	ld	r24, X+
    12a0:	9c 91       	ld	r25, X
    12a2:	46 a1       	ldd	r20, Z+38	; 0x26
    12a4:	57 a1       	ldd	r21, Z+39	; 0x27
    12a6:	84 1b       	sub	r24, r20
    12a8:	95 0b       	sbc	r25, r21
    12aa:	60 a5       	ldd	r22, Z+40	; 0x28
    12ac:	71 a5       	ldd	r23, Z+41	; 0x29
    12ae:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    12b2:	f9 01       	movw	r30, r18
    12b4:	60 83       	st	Z, r22
    12b6:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Duration = duration;
    12b8:	d6 01       	movw	r26, r12
    12ba:	8d 91       	ld	r24, X+
    12bc:	9c 91       	ld	r25, X
    12be:	36 96       	adiw	r30, 0x06	; 6
    12c0:	80 83       	st	Z, r24
    12c2:	91 83       	std	Z+1, r25	; 0x01
}
    12c4:	26 96       	adiw	r28, 0x06	; 6
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	bf 90       	pop	r11
    12dc:	08 95       	ret

000012de <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>:

void CLaserControlApp::CalculateEnergySteps(uint16_t &freq, uint16_t &energy)
{
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x14>
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x16>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	7c 01       	movw	r14, r24
    12fa:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MaxEnergy = pstGUI[Profile].m_wMaxEnergy_;
    1304:	d7 01       	movw	r26, r14
    1306:	1e 96       	adiw	r26, 0x0e	; 14
    1308:	8c 91       	ld	r24, X
    130a:	0f 2e       	mov	r0, r31
    130c:	fa e1       	ldi	r31, 0x1A	; 26
    130e:	bf 2e       	mov	r11, r31
    1310:	f0 2d       	mov	r31, r0
    1312:	f7 01       	movw	r30, r14
    1314:	b8 9e       	mul	r11, r24
    1316:	e0 0d       	add	r30, r0
    1318:	f1 1d       	adc	r31, r1
    131a:	11 24       	eor	r1, r1
    131c:	84 89       	ldd	r24, Z+20	; 0x14
    131e:	95 89       	ldd	r25, Z+21	; 0x15
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t MinEnergy = pstGUI[Profile].m_wMinEnergy_;
    1324:	86 89       	ldd	r24, Z+22	; 0x16
    1326:	97 89       	ldd	r25, Z+23	; 0x17
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinEnergy, MaxEnergy, step, 20, step_table);
    132c:	08 e0       	ldi	r16, 0x08	; 8
    132e:	10 e2       	ldi	r17, 0x20	; 32
    1330:	24 e1       	ldi	r18, 0x14	; 20
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	ae 01       	movw	r20, r28
    1336:	4b 5f       	subi	r20, 0xFB	; 251
    1338:	5f 4f       	sbci	r21, 0xFF	; 255
    133a:	be 01       	movw	r22, r28
    133c:	6d 5f       	subi	r22, 0xFD	; 253
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wEnergyStep = step;
    1348:	f7 01       	movw	r30, r14
    134a:	86 85       	ldd	r24, Z+14	; 0x0e
    134c:	6d 81       	ldd	r22, Y+5	; 0x05
    134e:	7e 81       	ldd	r23, Y+6	; 0x06
    1350:	b8 9e       	mul	r11, r24
    1352:	e0 0d       	add	r30, r0
    1354:	f1 1d       	adc	r31, r1
    1356:	11 24       	eor	r1, r1
    1358:	62 a3       	std	Z+34, r22	; 0x22
    135a:	73 a3       	std	Z+35, r23	; 0x23
	pstGUI[Profile].m_wEnergyNumSteps = (pstGUI[Profile].m_wMaxEnergy_ - MinEnergy)/step;
    135c:	29 81       	ldd	r18, Y+1	; 0x01
    135e:	3a 81       	ldd	r19, Y+2	; 0x02
    1360:	84 89       	ldd	r24, Z+20	; 0x14
    1362:	95 89       	ldd	r25, Z+21	; 0x15
    1364:	82 1b       	sub	r24, r18
    1366:	93 0b       	sbc	r25, r19
    1368:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    136c:	64 a3       	std	Z+36, r22	; 0x24
    136e:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[Profile].m_wEnergyOffset = MinEnergy;
    1370:	20 a3       	std	Z+32, r18	; 0x20
    1372:	31 a3       	std	Z+33, r19	; 0x21
	pstGUI[Profile].updateEnergy = false;
    1374:	15 a6       	std	Z+45, r1	; 0x2d
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[Profile].m_wEnergyOffset) / pstGUI[Profile].m_wEnergyStep;
    1376:	97 01       	movw	r18, r14
    1378:	2e 50       	subi	r18, 0x0E	; 14
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	d6 01       	movw	r26, r12
    137e:	8d 91       	ld	r24, X+
    1380:	9c 91       	ld	r25, X
    1382:	40 a1       	ldd	r20, Z+32	; 0x20
    1384:	51 a1       	ldd	r21, Z+33	; 0x21
    1386:	84 1b       	sub	r24, r20
    1388:	95 0b       	sbc	r25, r21
    138a:	62 a1       	ldd	r22, Z+34	; 0x22
    138c:	73 a1       	ldd	r23, Z+35	; 0x23
    138e:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1392:	f9 01       	movw	r30, r18
    1394:	60 83       	st	Z, r22
    1396:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Energy = energy;
    1398:	d6 01       	movw	r26, r12
    139a:	8d 91       	ld	r24, X+
    139c:	9c 91       	ld	r25, X
    139e:	36 96       	adiw	r30, 0x06	; 6
    13a0:	80 83       	st	Z, r24
    13a2:	91 83       	std	Z+1, r25	; 0x01
}
    13a4:	26 96       	adiw	r28, 0x06	; 6
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	08 95       	ret

000013be <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>:

void CLaserControlApp::CalculateAllSteps(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
    13be:	3f 92       	push	r3
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	2a 97       	sbiw	r28, 0x0a	; 10
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	de bf       	out	0x3e, r29	; 62
	uint16_t MinD = MinDurationTable[freq];
    13ea:	db 01       	movw	r26, r22
    13ec:	ed 91       	ld	r30, X+
    13ee:	fc 91       	ld	r31, X
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	df 01       	movw	r26, r30
    13f6:	ac 5d       	subi	r26, 0xDC	; 220
    13f8:	be 4d       	sbci	r27, 0xDE	; 222
    13fa:	8d 90       	ld	r8, X+
    13fc:	9c 90       	ld	r9, X
    13fe:	89 86       	std	Y+9, r8	; 0x09
    1400:	9a 86       	std	Y+10, r9	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    1402:	df 01       	movw	r26, r30
    1404:	a2 5f       	subi	r26, 0xF2	; 242
    1406:	be 4d       	sbci	r27, 0xDE	; 222
    1408:	cd 90       	ld	r12, X+
    140a:	dc 90       	ld	r13, X
    140c:	cf 82       	std	Y+7, r12	; 0x07
    140e:	d8 86       	std	Y+8, r13	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1410:	e8 50       	subi	r30, 0x08	; 8
    1412:	ff 4d       	sbci	r31, 0xDF	; 223
    1414:	a0 80       	ld	r10, Z
    1416:	b1 80       	ldd	r11, Z+1	; 0x01
	uint16_t step = 1;
    1418:	e1 e0       	ldi	r30, 0x01	; 1
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	ed 83       	std	Y+5, r30	; 0x05
    141e:	fe 83       	std	Y+6, r31	; 0x06
	
	if (mode == PROFILE_FAST)
    1420:	24 30       	cpi	r18, 0x04	; 4
    1422:	79 f5       	brne	.+94     	; 0x1482 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0xc4>
	{
		// Update energy helpers
		pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    1424:	fc 01       	movw	r30, r24
    1426:	e8 57       	subi	r30, 0x78	; 120
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	26 e0       	ldi	r18, 0x06	; 6
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	20 83       	st	Z, r18
    1430:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    1432:	32 96       	adiw	r30, 0x02	; 2
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	40 83       	st	Z, r20
    143a:	51 83       	std	Z+1, r21	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    143c:	32 96       	adiw	r30, 0x02	; 2
    143e:	67 e0       	ldi	r22, 0x07	; 7
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	60 83       	st	Z, r22
    1444:	71 83       	std	Z+1, r23	; 0x01
		pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    1446:	3e 97       	sbiw	r30, 0x0e	; 14
    1448:	20 83       	st	Z, r18
    144a:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 12;
    144c:	32 97       	sbiw	r30, 0x02	; 2
    144e:	2c e0       	ldi	r18, 0x0C	; 12
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	20 83       	st	Z, r18
    1454:	31 83       	std	Z+1, r19	; 0x01
		
		// Update duration helpers
		pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    1456:	72 96       	adiw	r30, 0x12	; 18
    1458:	22 e1       	ldi	r18, 0x12	; 18
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	20 83       	st	Z, r18
    145e:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    1460:	32 96       	adiw	r30, 0x02	; 2
    1462:	40 83       	st	Z, r20
    1464:	51 83       	std	Z+1, r21	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    1466:	32 96       	adiw	r30, 0x02	; 2
    1468:	41 e1       	ldi	r20, 0x11	; 17
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	40 83       	st	Z, r20
    146e:	51 83       	std	Z+1, r21	; 0x01
		pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    1470:	70 97       	sbiw	r30, 0x10	; 16
    1472:	20 83       	st	Z, r18
    1474:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    1476:	32 97       	sbiw	r30, 0x02	; 2
    1478:	83 e2       	ldi	r24, 0x23	; 35
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 83       	st	Z, r24
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	93 c0       	rjmp	.+294    	; 0x15a8 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x1ea>
    1482:	32 2e       	mov	r3, r18
    1484:	2a 01       	movw	r4, r20
    1486:	3b 01       	movw	r6, r22
    1488:	7c 01       	movw	r14, r24
		return;
	}
	
	// Update duration helpers
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    148a:	08 e0       	ldi	r16, 0x08	; 8
    148c:	10 e2       	ldi	r17, 0x20	; 32
    148e:	24 e1       	ldi	r18, 0x14	; 20
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	ae 01       	movw	r20, r28
    1494:	4b 5f       	subi	r20, 0xFB	; 251
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	be 01       	movw	r22, r28
    149a:	69 5f       	subi	r22, 0xF9	; 249
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	ce 01       	movw	r24, r28
    14a0:	09 96       	adiw	r24, 0x09	; 9
    14a2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wDurationStep = step;
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	ba e1       	ldi	r27, 0x1A	; 26
    14ac:	3b 9e       	mul	r3, r27
    14ae:	e0 0c       	add	r14, r0
    14b0:	f1 1c       	adc	r15, r1
    14b2:	11 24       	eor	r1, r1
    14b4:	f7 01       	movw	r30, r14
    14b6:	60 a7       	std	Z+40, r22	; 0x28
    14b8:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    14ba:	29 85       	ldd	r18, Y+9	; 0x09
    14bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	82 1b       	sub	r24, r18
    14c4:	93 0b       	sbc	r25, r19
    14c6:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    14ca:	62 a7       	std	Z+42, r22	; 0x2a
    14cc:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[mode].m_wDurationOffset = MinD;
    14ce:	26 a3       	std	Z+38, r18	; 0x26
    14d0:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[mode].updateDuration = false;
    14d2:	14 a6       	std	Z+44, r1	; 0x2c
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    14d4:	d3 01       	movw	r26, r6
    14d6:	ed 91       	ld	r30, X+
    14d8:	fc 91       	ld	r31, X
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	e8 50       	subi	r30, 0x08	; 8
    14e0:	ff 4d       	sbci	r31, 0xDF	; 223
    14e2:	00 81       	ld	r16, Z
    14e4:	11 81       	ldd	r17, Z+1	; 0x01
    14e6:	01 50       	subi	r16, 0x01	; 1
    14e8:	11 09       	sbc	r17, r1
	pstGUI[mode].m_wDurationStep = step;
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
	pstGUI[mode].m_wDurationOffset = MinD;
	pstGUI[mode].updateDuration = false;
	
	uint16_t index = (duration - MinD) / Delta;
    14ea:	f2 01       	movw	r30, r4
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	ac 01       	movw	r20, r24
    14f2:	42 1b       	sub	r20, r18
    14f4:	53 0b       	sbc	r21, r19
    14f6:	9a 01       	movw	r18, r20

void CLaserControlApp::CalculateAllSteps(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
	uint16_t MinD = MinDurationTable[freq];
	uint16_t MaxD = MaxDurationTable[freq];
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    14f8:	c6 01       	movw	r24, r12
    14fa:	88 19       	sub	r24, r8
    14fc:	99 09       	sbc	r25, r9
    14fe:	b5 01       	movw	r22, r10
    1500:	61 50       	subi	r22, 0x01	; 1
    1502:	71 09       	sbc	r23, r1
    1504:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
	pstGUI[mode].m_wDurationStep = step;
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
	pstGUI[mode].m_wDurationOffset = MinD;
	pstGUI[mode].updateDuration = false;
	
	uint16_t index = (duration - MinD) / Delta;
    1508:	c9 01       	movw	r24, r18
    150a:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_Z3maxjj>
    1516:	b8 01       	movw	r22, r16
    1518:	0e 94 e6 19 	call	0x33cc	; 0x33cc <_Z3minjj>
	
	//pstGUI[mode].m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    151c:	d3 01       	movw	r26, r6
    151e:	4d 91       	ld	r20, X+
    1520:	5c 91       	ld	r21, X
    1522:	6b e0       	ldi	r22, 0x0B	; 11
    1524:	64 9f       	mul	r22, r20
    1526:	90 01       	movw	r18, r0
    1528:	65 9f       	mul	r22, r21
    152a:	30 0d       	add	r19, r0
    152c:	11 24       	eor	r1, r1
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	fc 01       	movw	r30, r24
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	ea 5f       	subi	r30, 0xFA	; 250
    153a:	ff 4d       	sbci	r31, 0xDF	; 223
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	f7 01       	movw	r30, r14
    1542:	84 8b       	std	Z+20, r24	; 0x14
    1544:	95 8b       	std	Z+21, r25	; 0x15
	
	// Update energy helpers
	step = 1;
    1546:	21 e0       	ldi	r18, 0x01	; 1
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	2d 83       	std	Y+5, r18	; 0x05
    154c:	3e 83       	std	Y+6, r19	; 0x06
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    1552:	80 a1       	ldd	r24, Z+32	; 0x20
    1554:	91 a1       	ldd	r25, Z+33	; 0x21
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    155a:	08 e0       	ldi	r16, 0x08	; 8
    155c:	10 e2       	ldi	r17, 0x20	; 32
    155e:	24 e1       	ldi	r18, 0x14	; 20
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	ae 01       	movw	r20, r28
    1564:	4b 5f       	subi	r20, 0xFB	; 251
    1566:	5f 4f       	sbci	r21, 0xFF	; 255
    1568:	be 01       	movw	r22, r28
    156a:	6d 5f       	subi	r22, 0xFD	; 253
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wEnergyOffset = Offset;
    1576:	29 81       	ldd	r18, Y+1	; 0x01
    1578:	3a 81       	ldd	r19, Y+2	; 0x02
    157a:	d7 01       	movw	r26, r14
    157c:	90 96       	adiw	r26, 0x20	; 32
    157e:	2d 93       	st	X+, r18
    1580:	3c 93       	st	X, r19
    1582:	91 97       	sbiw	r26, 0x21	; 33
	pstGUI[mode].m_wEnergyStep = step;
    1584:	6d 81       	ldd	r22, Y+5	; 0x05
    1586:	7e 81       	ldd	r23, Y+6	; 0x06
    1588:	92 96       	adiw	r26, 0x22	; 34
    158a:	6d 93       	st	X+, r22
    158c:	7c 93       	st	X, r23
    158e:	93 97       	sbiw	r26, 0x23	; 35
	pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    1590:	54 96       	adiw	r26, 0x14	; 20
    1592:	8d 91       	ld	r24, X+
    1594:	9c 91       	ld	r25, X
    1596:	55 97       	sbiw	r26, 0x15	; 21
    1598:	82 1b       	sub	r24, r18
    159a:	93 0b       	sbc	r25, r19
    159c:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    15a0:	f7 01       	movw	r30, r14
    15a2:	64 a3       	std	Z+36, r22	; 0x24
    15a4:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[mode].updateEnergy = false;
    15a6:	15 a6       	std	Z+45, r1	; 0x2d
}
    15a8:	2a 96       	adiw	r28, 0x0a	; 10
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	ff 90       	pop	r15
    15b8:	ef 90       	pop	r14
    15ba:	df 90       	pop	r13
    15bc:	cf 90       	pop	r12
    15be:	bf 90       	pop	r11
    15c0:	af 90       	pop	r10
    15c2:	9f 90       	pop	r9
    15c4:	8f 90       	pop	r8
    15c6:	7f 90       	pop	r7
    15c8:	6f 90       	pop	r6
    15ca:	5f 90       	pop	r5
    15cc:	4f 90       	pop	r4
    15ce:	3f 90       	pop	r3
    15d0:	08 95       	ret

000015d2 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>:
	
	return result;
}

void CLaserControlApp::LaserPreset(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
    15d2:	8f 92       	push	r8
    15d4:	9f 92       	push	r9
    15d6:	af 92       	push	r10
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	6c 01       	movw	r12, r24
    15ec:	7b 01       	movw	r14, r22
    15ee:	ea 01       	movw	r28, r20
    15f0:	49 01       	movw	r8, r18
    15f2:	10 2f       	mov	r17, r16
	UpdateLimits(freq, duration, energy, mode);
    15f4:	d9 01       	movw	r26, r18
    15f6:	2d 91       	ld	r18, X+
    15f8:	3c 91       	ld	r19, X
    15fa:	48 81       	ld	r20, Y
    15fc:	59 81       	ldd	r21, Y+1	; 0x01
    15fe:	fb 01       	movw	r30, r22
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
	CalculateAllSteps(freq, duration, mode);
    1608:	21 2f       	mov	r18, r17
    160a:	ae 01       	movw	r20, r28
    160c:	b7 01       	movw	r22, r14
    160e:	c6 01       	movw	r24, r12
    1610:	0e 94 df 09 	call	0x13be	; 0x13be <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>
	
	m_structLaserProfile[mode].Frequency = freq;
    1614:	01 2f       	mov	r16, r17
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	d7 01       	movw	r26, r14
    161a:	8d 91       	ld	r24, X+
    161c:	9c 91       	ld	r25, X
    161e:	f8 01       	movw	r30, r16
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	5f 01       	movw	r10, r30
    1626:	a0 0e       	add	r10, r16
    1628:	b1 1e       	adc	r11, r17
    162a:	aa 0c       	add	r10, r10
    162c:	bb 1c       	adc	r11, r11
    162e:	ac 0c       	add	r10, r12
    1630:	bd 1c       	adc	r11, r13
    1632:	d5 01       	movw	r26, r10
    1634:	aa 56       	subi	r26, 0x6A	; 106
    1636:	bf 4f       	sbci	r27, 0xFF	; 255
    1638:	8d 93       	st	X+, r24
    163a:	9c 93       	st	X, r25
	m_structLaserProfile[mode].EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    163c:	8a e1       	ldi	r24, 0x1A	; 26
    163e:	80 9f       	mul	r24, r16
    1640:	90 01       	movw	r18, r0
    1642:	81 9f       	mul	r24, r17
    1644:	30 0d       	add	r19, r0
    1646:	11 24       	eor	r1, r1
    1648:	2c 0d       	add	r18, r12
    164a:	3d 1d       	adc	r19, r13
    164c:	d4 01       	movw	r26, r8
    164e:	8d 91       	ld	r24, X+
    1650:	9c 91       	ld	r25, X
    1652:	d9 01       	movw	r26, r18
    1654:	90 96       	adiw	r26, 0x20	; 32
    1656:	4d 91       	ld	r20, X+
    1658:	5c 91       	ld	r21, X
    165a:	91 97       	sbiw	r26, 0x21	; 33
    165c:	84 1b       	sub	r24, r20
    165e:	95 0b       	sbc	r25, r21
    1660:	92 96       	adiw	r26, 0x22	; 34
    1662:	6d 91       	ld	r22, X+
    1664:	7c 91       	ld	r23, X
    1666:	93 97       	sbiw	r26, 0x23	; 35
    1668:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    166c:	d5 01       	movw	r26, r10
    166e:	a6 56       	subi	r26, 0x66	; 102
    1670:	bf 4f       	sbci	r27, 0xFF	; 255
    1672:	6d 93       	st	X+, r22
    1674:	7c 93       	st	X, r23
	m_structLaserProfile[mode].DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    1676:	88 81       	ld	r24, Y
    1678:	99 81       	ldd	r25, Y+1	; 0x01
    167a:	d9 01       	movw	r26, r18
    167c:	96 96       	adiw	r26, 0x26	; 38
    167e:	4d 91       	ld	r20, X+
    1680:	5c 91       	ld	r21, X
    1682:	97 97       	sbiw	r26, 0x27	; 39
    1684:	84 1b       	sub	r24, r20
    1686:	95 0b       	sbc	r25, r21
    1688:	98 96       	adiw	r26, 0x28	; 40
    168a:	6d 91       	ld	r22, X+
    168c:	7c 91       	ld	r23, X
    168e:	99 97       	sbiw	r26, 0x29	; 41
    1690:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1694:	d5 01       	movw	r26, r10
    1696:	a8 56       	subi	r26, 0x68	; 104
    1698:	bf 4f       	sbci	r27, 0xFF	; 255
    169a:	6d 93       	st	X+, r22
    169c:	7c 93       	st	X, r23
    169e:	11 97       	sbiw	r26, 0x01	; 1
	m_structLaserSettings[mode].Duration = duration;
    16a0:	88 81       	ld	r24, Y
    16a2:	99 81       	ldd	r25, Y+1	; 0x01
    16a4:	5e 96       	adiw	r26, 0x1e	; 30
    16a6:	8d 93       	st	X+, r24
    16a8:	9c 93       	st	X, r25
	m_structLaserSettings[mode].Energy = energy;
    16aa:	d4 01       	movw	r26, r8
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	d5 01       	movw	r26, r10
    16b2:	a8 54       	subi	r26, 0x48	; 72
    16b4:	bf 4f       	sbci	r27, 0xFF	; 255
    16b6:	8d 93       	st	X+, r24
    16b8:	9c 93       	st	X, r25
	m_structLaserSettings[mode].Power = 0; // deprecated
    16ba:	f5 01       	movw	r30, r10
    16bc:	ec 54       	subi	r30, 0x4C	; 76
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	10 82       	st	Z, r1
    16c2:	11 82       	std	Z+1, r1	; 0x01
	
	// Set settings to hardware
	uint16_t period = 1000 / freq;											//  period [ms]
    16c4:	f7 01       	movw	r30, r14
    16c6:	e0 80       	ld	r14, Z
    16c8:	f1 80       	ldd	r15, Z+1	; 0x01
    16ca:	88 ee       	ldi	r24, 0xE8	; 232
    16cc:	93 e0       	ldi	r25, 0x03	; 3
    16ce:	b7 01       	movw	r22, r14
    16d0:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    16d4:	8b 01       	movw	r16, r22
	uint32_t dutycycle = uint32_t(duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    16d6:	28 81       	ld	r18, Y
    16d8:	39 81       	ldd	r19, Y+1	; 0x01
    16da:	a8 ee       	ldi	r26, 0xE8	; 232
    16dc:	b3 e0       	ldi	r27, 0x03	; 3
    16de:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    16e2:	98 01       	movw	r18, r16
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    16ec:	49 01       	movw	r8, r18
    16ee:	5a 01       	movw	r10, r20
	// calculate timer settings
	laserTimerPeriod = (6250 / freq) * 10;
    16f0:	8a e6       	ldi	r24, 0x6A	; 106
    16f2:	98 e1       	ldi	r25, 0x18	; 24
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    16fa:	eb 01       	movw	r28, r22
    16fc:	cc 0f       	add	r28, r28
    16fe:	dd 1f       	adc	r29, r29
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	66 0f       	add	r22, r22
    170a:	77 1f       	adc	r23, r23
    170c:	c6 0f       	add	r28, r22
    170e:	d7 1f       	adc	r29, r23
    1710:	f6 01       	movw	r30, r12
    1712:	ee 52       	subi	r30, 0x2E	; 46
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	c0 83       	st	Z, r28
    1718:	d1 83       	std	Z+1, r29	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    171a:	76 01       	movw	r14, r12
    171c:	f4 ed       	ldi	r31, 0xD4	; 212
    171e:	ef 0e       	add	r14, r31
    1720:	f1 1c       	adc	r15, r1
    1722:	de 01       	movw	r26, r28
    1724:	a5 01       	movw	r20, r10
    1726:	94 01       	movw	r18, r8
    1728:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__muluhisi3>
    172c:	28 ee       	ldi	r18, 0xE8	; 232
    172e:	33 e0       	ldi	r19, 0x03	; 3
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    1738:	c2 1b       	sub	r28, r18
    173a:	d3 0b       	sbc	r29, r19
    173c:	d7 01       	movw	r26, r14
    173e:	cd 93       	st	X+, r28
    1740:	dc 93       	st	X, r29
	laserTimerDutyCyclems = period;
    1742:	f6 01       	movw	r30, r12
    1744:	ea 52       	subi	r30, 0x2A	; 42
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	00 83       	st	Z, r16
    174a:	11 83       	std	Z+1, r17	; 0x01
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	9f 90       	pop	r9
    1762:	8f 90       	pop	r8
    1764:	08 95       	ret

00001766 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>:
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
	switch (mode)
    1766:	42 30       	cpi	r20, 0x02	; 2
    1768:	d9 f0       	breq	.+54     	; 0x17a0 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x3a>
    176a:	18 f4       	brcc	.+6      	; 0x1772 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc>
    176c:	41 30       	cpi	r20, 0x01	; 1
    176e:	31 f0       	breq	.+12     	; 0x177c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x16>
    1770:	3e c0       	rjmp	.+124    	; 0x17ee <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
    1772:	43 30       	cpi	r20, 0x03	; 3
    1774:	11 f1       	breq	.+68     	; 0x17ba <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x54>
    1776:	44 30       	cpi	r20, 0x04	; 4
    1778:	69 f1       	breq	.+90     	; 0x17d4 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x6e>
    177a:	39 c0       	rjmp	.+114    	; 0x17ee <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
    177c:	21 e0       	ldi	r18, 0x01	; 1
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	fc 01       	movw	r30, r24
    1782:	20 af       	std	Z+56, r18	; 0x38
    1784:	31 af       	std	Z+57, r19	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
    1786:	26 ab       	std	Z+54, r18	; 0x36
    1788:	37 ab       	std	Z+55, r19	; 0x37
			if (freq != 1)
    178a:	fb 01       	movw	r30, r22
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	09 f4       	brne	.+2      	; 0x1796 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x30>
    1794:	48 c0       	rjmp	.+144    	; 0x1826 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc0>
			{
				freq = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	80 83       	st	Z, r24
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	08 95       	ret
				UpdateFreq = true;
				}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	fc 01       	movw	r30, r24
    17a6:	ee 5a       	subi	r30, 0xAE	; 174
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	20 83       	st	Z, r18
    17ac:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
    17ae:	26 e0       	ldi	r18, 0x06	; 6
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	32 97       	sbiw	r30, 0x02	; 2
    17b4:	20 83       	st	Z, r18
    17b6:	31 83       	std	Z+1, r19	; 0x01
		break;
    17b8:	1c c0       	rjmp	.+56     	; 0x17f2 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	fc 01       	movw	r30, r24
    17c0:	e4 59       	subi	r30, 0x94	; 148
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	20 83       	st	Z, r18
    17c6:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
    17c8:	23 e0       	ldi	r18, 0x03	; 3
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	32 97       	sbiw	r30, 0x02	; 2
    17ce:	20 83       	st	Z, r18
    17d0:	31 83       	std	Z+1, r19	; 0x01
		break;
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    17d4:	26 e0       	ldi	r18, 0x06	; 6
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	ea 57       	subi	r30, 0x7A	; 122
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	20 83       	st	Z, r18
    17e0:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	32 97       	sbiw	r30, 0x02	; 2
    17e8:	20 83       	st	Z, r18
    17ea:	31 83       	std	Z+1, r19	; 0x01
		break;
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
	}
	if (mode != PROFILE_SINGLE)
    17ee:	41 30       	cpi	r20, 0x01	; 1
    17f0:	b1 f0       	breq	.+44     	; 0x181e <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xb8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    17f2:	fb 01       	movw	r30, r22
    17f4:	20 81       	ld	r18, Z
    17f6:	31 81       	ldd	r19, Z+1	; 0x01
    17f8:	fc 01       	movw	r30, r24
    17fa:	5a e1       	ldi	r21, 0x1A	; 26
    17fc:	45 9f       	mul	r20, r21
    17fe:	e0 0d       	add	r30, r0
    1800:	f1 1d       	adc	r31, r1
    1802:	11 24       	eor	r1, r1
    1804:	46 8d       	ldd	r20, Z+30	; 0x1e
    1806:	57 8d       	ldd	r21, Z+31	; 0x1f
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    1808:	84 8d       	ldd	r24, Z+28	; 0x1c
    180a:	95 8d       	ldd	r25, Z+29	; 0x1d
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	40 f0       	brcs	.+16     	; 0x1822 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xbc>
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	24 17       	cp	r18, r20
    1816:	35 07       	cpc	r19, r21
    1818:	38 f0       	brcs	.+14     	; 0x1828 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc2>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	08 95       	ret
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    1826:	80 e0       	ldi	r24, 0x00	; 0
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
	}
	
	return UpdateFreq;
}
    1828:	08 95       	ret

0000182a <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>:

bool CLaserControlApp::CheckLimitsFastMode(uint16_t &freq, uint16_t &duration, uint16_t &energy)
{
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	fc 01       	movw	r30, r24
    1834:	d9 01       	movw	r26, r18
	pstGUI[PROFILE_FAST].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    1836:	8a 57       	subi	r24, 0x7A	; 122
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	26 e0       	ldi	r18, 0x06	; 6
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	ec 01       	movw	r28, r24
    1840:	28 83       	st	Y, r18
    1842:	39 83       	std	Y+1, r19	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    1844:	02 97       	sbiw	r24, 0x02	; 2
    1846:	2a e0       	ldi	r18, 0x0A	; 10
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	ec 01       	movw	r28, r24
    184c:	28 83       	st	Y, r18
    184e:	39 83       	std	Y+1, r19	; 0x01
	
	if (freq < pstGUI[PROFILE_FAST].m_wMinFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMinFreq;	}
    1850:	eb 01       	movw	r28, r22
    1852:	88 81       	ld	r24, Y
    1854:	99 81       	ldd	r25, Y+1	; 0x01
    1856:	06 97       	sbiw	r24, 0x06	; 6
    1858:	20 f4       	brcc	.+8      	; 0x1862 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x38>
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	88 83       	st	Y, r24
    1860:	99 83       	std	Y+1, r25	; 0x01
	if (freq > pstGUI[PROFILE_FAST].m_wMaxFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMaxFreq;	}
    1862:	cf 01       	movw	r24, r30
    1864:	8c 57       	subi	r24, 0x7C	; 124
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	ec 01       	movw	r28, r24
    186a:	88 81       	ld	r24, Y
    186c:	99 81       	ldd	r25, Y+1	; 0x01
    186e:	eb 01       	movw	r28, r22
    1870:	28 81       	ld	r18, Y
    1872:	39 81       	ldd	r19, Y+1	; 0x01
    1874:	82 17       	cp	r24, r18
    1876:	93 07       	cpc	r25, r19
    1878:	10 f4       	brcc	.+4      	; 0x187e <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x54>
    187a:	88 83       	st	Y, r24
    187c:	99 83       	std	Y+1, r25	; 0x01
	
	laserDiodeData.laserprofile.Frequency = freq;
    187e:	eb 01       	movw	r28, r22
    1880:	88 81       	ld	r24, Y
    1882:	99 81       	ldd	r25, Y+1	; 0x01
    1884:	ef 01       	movw	r28, r30
    1886:	c2 51       	subi	r28, 0x12	; 18
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	88 83       	st	Y, r24
    188c:	99 83       	std	Y+1, r25	; 0x01
	
	if (energy > 13) { energy = 13;  }
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	8e 30       	cpi	r24, 0x0E	; 14
    1896:	91 05       	cpc	r25, r1
    1898:	30 f0       	brcs	.+12     	; 0x18a6 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x7c>
    189a:	8d e0       	ldi	r24, 0x0D	; 13
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	8d 93       	st	X+, r24
    18a0:	9c 93       	st	X, r25
    18a2:	11 97       	sbiw	r26, 0x01	; 1
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
	if (energy <  6) { energy = 6; }
    18a6:	06 97       	sbiw	r24, 0x06	; 6
    18a8:	28 f4       	brcc	.+10     	; 0x18b4 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
    18aa:	86 e0       	ldi	r24, 0x06	; 6
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	8d 93       	st	X+, r24
    18b0:	9c 93       	st	X, r25
    18b2:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update energy helpers
	pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    18b4:	ef 01       	movw	r28, r30
    18b6:	c8 57       	subi	r28, 0x78	; 120
    18b8:	df 4f       	sbci	r29, 0xFF	; 255
    18ba:	86 e0       	ldi	r24, 0x06	; 6
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	88 83       	st	Y, r24
    18c0:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    18c2:	9f 01       	movw	r18, r30
    18c4:	26 57       	subi	r18, 0x76	; 118
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	01 e0       	ldi	r16, 0x01	; 1
    18ca:	10 e0       	ldi	r17, 0x00	; 0
    18cc:	e9 01       	movw	r28, r18
    18ce:	08 83       	st	Y, r16
    18d0:	19 83       	std	Y+1, r17	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    18d2:	2e 5f       	subi	r18, 0xFE	; 254
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	67 e0       	ldi	r22, 0x07	; 7
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	e9 01       	movw	r28, r18
    18dc:	68 83       	st	Y, r22
    18de:	79 83       	std	Y+1, r23	; 0x01
	pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    18e0:	2e 50       	subi	r18, 0x0E	; 14
    18e2:	31 09       	sbc	r19, r1
    18e4:	e9 01       	movw	r28, r18
    18e6:	88 83       	st	Y, r24
    18e8:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 13;
    18ea:	cf 01       	movw	r24, r30
    18ec:	84 58       	subi	r24, 0x84	; 132
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	2d e0       	ldi	r18, 0x0D	; 13
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	ec 01       	movw	r28, r24
    18f6:	28 83       	st	Y, r18
    18f8:	39 83       	std	Y+1, r19	; 0x01
	
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[PROFILE_FAST].m_wEnergyOffset) / pstGUI[PROFILE_FAST].m_wEnergyStep;
    18fa:	9f 01       	movw	r18, r30
    18fc:	2e 50       	subi	r18, 0x0E	; 14
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	8d 91       	ld	r24, X+
    1902:	9c 91       	ld	r25, X
    1904:	11 97       	sbiw	r26, 0x01	; 1
    1906:	06 97       	sbiw	r24, 0x06	; 6
    1908:	e9 01       	movw	r28, r18
    190a:	88 83       	st	Y, r24
    190c:	99 83       	std	Y+1, r25	; 0x01
	laserDiodeData.lasersettings.Energy = energy;	
    190e:	2d 91       	ld	r18, X+
    1910:	3c 91       	ld	r19, X
    1912:	11 97       	sbiw	r26, 0x01	; 1
    1914:	cf 01       	movw	r24, r30
    1916:	88 50       	subi	r24, 0x08	; 8
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	ec 01       	movw	r28, r24
    191c:	28 83       	st	Y, r18
    191e:	39 83       	std	Y+1, r19	; 0x01
	
	duration = (energy * 1440) / 500; // Calculate max duration
    1920:	6d 91       	ld	r22, X+
    1922:	7c 91       	ld	r23, X
    1924:	80 ea       	ldi	r24, 0xA0	; 160
    1926:	95 e0       	ldi	r25, 0x05	; 5
    1928:	68 9f       	mul	r22, r24
    192a:	90 01       	movw	r18, r0
    192c:	69 9f       	mul	r22, r25
    192e:	30 0d       	add	r19, r0
    1930:	78 9f       	mul	r23, r24
    1932:	30 0d       	add	r19, r0
    1934:	11 24       	eor	r1, r1
    1936:	36 95       	lsr	r19
    1938:	27 95       	ror	r18
    193a:	36 95       	lsr	r19
    193c:	27 95       	ror	r18
    193e:	a5 ec       	ldi	r26, 0xC5	; 197
    1940:	b0 e2       	ldi	r27, 0x20	; 32
    1942:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    1946:	92 95       	swap	r25
    1948:	82 95       	swap	r24
    194a:	8f 70       	andi	r24, 0x0F	; 15
    194c:	89 27       	eor	r24, r25
    194e:	9f 70       	andi	r25, 0x0F	; 15
    1950:	89 27       	eor	r24, r25
    1952:	da 01       	movw	r26, r20
    1954:	8d 93       	st	X+, r24
    1956:	9c 93       	st	X, r25
	/*if (duration >= 35) duration = 35;	else
	if (duration >= 24) duration = 24;	else
	if (duration >= 18) duration = 18;*/
	
	// Update duration helpers
	pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    1958:	df 01       	movw	r26, r30
    195a:	a2 57       	subi	r26, 0x72	; 114
    195c:	bf 4f       	sbci	r27, 0xFF	; 255
    195e:	82 e1       	ldi	r24, 0x12	; 18
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	8d 93       	st	X+, r24
    1964:	9c 93       	st	X, r25
    1966:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	0d 93       	st	X+, r16
    196c:	1c 93       	st	X, r17
    196e:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    1970:	12 96       	adiw	r26, 0x02	; 2
    1972:	21 e1       	ldi	r18, 0x11	; 17
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	2d 93       	st	X+, r18
    1978:	3c 93       	st	X, r19
    197a:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    197c:	50 97       	sbiw	r26, 0x10	; 16
    197e:	8d 93       	st	X+, r24
    1980:	9c 93       	st	X, r25
    1982:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    1984:	12 97       	sbiw	r26, 0x02	; 2
    1986:	83 e2       	ldi	r24, 0x23	; 35
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	8d 93       	st	X+, r24
    198c:	9c 93       	st	X, r25
    198e:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[PROFILE_FAST].m_wDurationOffset) / pstGUI[PROFILE_FAST].m_wDurationStep;
    1990:	a0 59       	subi	r26, 0x90	; 144
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	ea 01       	movw	r28, r20
    1996:	88 81       	ld	r24, Y
    1998:	99 81       	ldd	r25, Y+1	; 0x01
    199a:	42 97       	sbiw	r24, 0x12	; 18
    199c:	8d 93       	st	X+, r24
    199e:	9c 93       	st	X, r25
	laserDiodeData.lasersettings.Duration = duration;
    19a0:	88 81       	ld	r24, Y
    19a2:	99 81       	ldd	r25, Y+1	; 0x01
    19a4:	ea 50       	subi	r30, 0x0A	; 10
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 83       	st	Z, r24
    19aa:	91 83       	std	Z+1, r25	; 0x01
	
	return true;
}
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
		update = false;
	}
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	af 92       	push	r10
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	2c 97       	sbiw	r28, 0x0c	; 12
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	6c 01       	movw	r12, r24
    19e0:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    19e2:	db 01       	movw	r26, r22
    19e4:	0d 91       	ld	r16, X+
    19e6:	1c 91       	ld	r17, X
    19e8:	88 ee       	ldi	r24, 0xE8	; 232
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	b8 01       	movw	r22, r16
    19ee:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    19f2:	7b 01       	movw	r14, r22
	uint32_t dutycycle = uint32_t(settings->Duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    19f4:	22 81       	ldd	r18, Z+2	; 0x02
    19f6:	33 81       	ldd	r19, Z+3	; 0x03
    19f8:	a8 ee       	ldi	r26, 0xE8	; 232
    19fa:	b3 e0       	ldi	r27, 0x03	; 3
    19fc:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    1a00:	97 01       	movw	r18, r14
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    1a0a:	29 01       	movw	r4, r18
    1a0c:	3a 01       	movw	r6, r20
	
	// calculate timer settings
	laserTimerPeriod = (6250 / profile->Frequency) * 10;
    1a0e:	8a e6       	ldi	r24, 0x6A	; 106
    1a10:	98 e1       	ldi	r25, 0x18	; 24
    1a12:	b8 01       	movw	r22, r16
    1a14:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    1a18:	8b 01       	movw	r16, r22
    1a1a:	00 0f       	add	r16, r16
    1a1c:	11 1f       	adc	r17, r17
    1a1e:	ab 01       	movw	r20, r22
    1a20:	44 0f       	add	r20, r20
    1a22:	55 1f       	adc	r21, r21
    1a24:	44 0f       	add	r20, r20
    1a26:	55 1f       	adc	r21, r21
    1a28:	44 0f       	add	r20, r20
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	04 0f       	add	r16, r20
    1a2e:	15 1f       	adc	r17, r21
    1a30:	f6 01       	movw	r30, r12
    1a32:	ee 52       	subi	r30, 0x2E	; 46
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	00 83       	st	Z, r16
    1a38:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1a3a:	56 01       	movw	r10, r12
    1a3c:	b4 ed       	ldi	r27, 0xD4	; 212
    1a3e:	ab 0e       	add	r10, r27
    1a40:	b1 1c       	adc	r11, r1
    1a42:	d8 01       	movw	r26, r16
    1a44:	a3 01       	movw	r20, r6
    1a46:	92 01       	movw	r18, r4
    1a48:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__muluhisi3>
    1a4c:	28 ee       	ldi	r18, 0xE8	; 232
    1a4e:	33 e0       	ldi	r19, 0x03	; 3
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    1a58:	02 1b       	sub	r16, r18
    1a5a:	13 0b       	sbc	r17, r19
    1a5c:	f5 01       	movw	r30, r10
    1a5e:	00 83       	st	Z, r16
    1a60:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCyclems = period;
    1a62:	32 96       	adiw	r30, 0x02	; 2
    1a64:	e0 82       	st	Z, r14
    1a66:	f1 82       	std	Z+1, r15	; 0x01
	
	laserTimer.EnableChannel(TIMER_CHANNEL_A);
    1a68:	60 e1       	ldi	r22, 0x10	; 16
    1a6a:	88 e1       	ldi	r24, 0x18	; 24
    1a6c:	96 e2       	ldi	r25, 0x26	; 38
    1a6e:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);
    1a72:	60 e2       	ldi	r22, 0x20	; 32
    1a74:	88 e1       	ldi	r24, 0x18	; 24
    1a76:	96 e2       	ldi	r25, 0x26	; 38
    1a78:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1a7c:	60 e1       	ldi	r22, 0x10	; 16
    1a7e:	88 e1       	ldi	r24, 0x18	; 24
    1a80:	96 e2       	ldi	r25, 0x26	; 38
    1a82:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1a86:	60 e2       	ldi	r22, 0x20	; 32
    1a88:	88 e1       	ldi	r24, 0x18	; 24
    1a8a:	96 e2       	ldi	r25, 0x26	; 38
    1a8c:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	return result;
    1a90:	86 e0       	ldi	r24, 0x06	; 6
    1a92:	fe 01       	movw	r30, r28
    1a94:	37 96       	adiw	r30, 0x07	; 7
    1a96:	de 01       	movw	r26, r28
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	01 90       	ld	r0, Z+
    1a9c:	0d 92       	st	X+, r0
    1a9e:	8a 95       	dec	r24
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0xe2>
    1aa2:	29 81       	ldd	r18, Y+1	; 0x01
    1aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa6:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa8:	5c 81       	ldd	r21, Y+4	; 0x04
    1aaa:	6d 81       	ldd	r22, Y+5	; 0x05
    1aac:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	2c 96       	adiw	r28, 0x0c	; 12
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	bf 90       	pop	r11
    1aca:	af 90       	pop	r10
    1acc:	7f 90       	pop	r7
    1ace:	6f 90       	pop	r6
    1ad0:	5f 90       	pop	r5
    1ad2:	4f 90       	pop	r4
    1ad4:	08 95       	ret

00001ad6 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
    1ae0:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	e4 51       	subi	r30, 0x14	; 20
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	10 82       	st	Z, r1
    1aea:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
    1aec:	32 96       	adiw	r30, 0x02	; 2
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	80 83       	st	Z, r24
    1af4:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
    1af6:	6a 30       	cpi	r22, 0x0A	; 10
    1af8:	71 05       	cpc	r23, r1
    1afa:	50 f4       	brcc	.+20     	; 0x1b10 <_ZN16CLaserControlApp13MelaninPresetEj+0x3a>
	{
		laserDiodeData.phototype = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	72 96       	adiw	r30, 0x12	; 18
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[Profile].m_wMaxDuration = 60;
    1b06:	8c e3       	ldi	r24, 0x3C	; 60
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	88 8f       	std	Y+24, r24	; 0x18
    1b0c:	99 8f       	std	Y+25, r25	; 0x19
    1b0e:	42 c0       	rjmp	.+132    	; 0x1b94 <_ZN16CLaserControlApp13MelaninPresetEj+0xbe>
		//pstGUI[Profile].m_wMaxEnergy = 97;
	}
	else
	if (melanin < 20)
    1b10:	64 31       	cpi	r22, 0x14	; 20
    1b12:	71 05       	cpc	r23, r1
    1b14:	58 f4       	brcc	.+22     	; 0x1b2c <_ZN16CLaserControlApp13MelaninPresetEj+0x56>
	{
		laserDiodeData.phototype = 2;
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	f3 95       	inc	r31
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[Profile].m_wMaxDuration = 60;
    1b22:	8c e3       	ldi	r24, 0x3C	; 60
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	88 8f       	std	Y+24, r24	; 0x18
    1b28:	99 8f       	std	Y+25, r25	; 0x19
    1b2a:	34 c0       	rjmp	.+104    	; 0x1b94 <_ZN16CLaserControlApp13MelaninPresetEj+0xbe>
		//pstGUI[Profile].m_wMaxEnergy = 97;
	}
	else
	if (melanin < 35)
    1b2c:	63 32       	cpi	r22, 0x23	; 35
    1b2e:	71 05       	cpc	r23, r1
    1b30:	58 f4       	brcc	.+22     	; 0x1b48 <_ZN16CLaserControlApp13MelaninPresetEj+0x72>
	{
		laserDiodeData.phototype = 3;
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	fe 01       	movw	r30, r28
    1b38:	f3 95       	inc	r31
    1b3a:	80 83       	st	Z, r24
    1b3c:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[Profile].m_wMaxDuration = 60;
    1b3e:	8c e3       	ldi	r24, 0x3C	; 60
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	88 8f       	std	Y+24, r24	; 0x18
    1b44:	99 8f       	std	Y+25, r25	; 0x19
    1b46:	26 c0       	rjmp	.+76     	; 0x1b94 <_ZN16CLaserControlApp13MelaninPresetEj+0xbe>
		//pstGUI[Profile].m_wMaxEnergy = 97;
	}
	else
	if (melanin < 49)
    1b48:	61 33       	cpi	r22, 0x31	; 49
    1b4a:	71 05       	cpc	r23, r1
    1b4c:	58 f4       	brcc	.+22     	; 0x1b64 <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 4;
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	fe 01       	movw	r30, r28
    1b54:	f3 95       	inc	r31
    1b56:	80 83       	st	Z, r24
    1b58:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[Profile].m_wMaxDuration = 100;
    1b5a:	84 e6       	ldi	r24, 0x64	; 100
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	88 8f       	std	Y+24, r24	; 0x18
    1b60:	99 8f       	std	Y+25, r25	; 0x19
    1b62:	18 c0       	rjmp	.+48     	; 0x1b94 <_ZN16CLaserControlApp13MelaninPresetEj+0xbe>
		//pstGUI[Profile].m_wMaxEnergy = 97;
	}
	else
	if (melanin < 72)
    1b64:	68 34       	cpi	r22, 0x48	; 72
    1b66:	71 05       	cpc	r23, r1
    1b68:	58 f4       	brcc	.+22     	; 0x1b80 <_ZN16CLaserControlApp13MelaninPresetEj+0xaa>
	{
		laserDiodeData.phototype = 5;
    1b6a:	85 e0       	ldi	r24, 0x05	; 5
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	fe 01       	movw	r30, r28
    1b70:	f3 95       	inc	r31
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[Profile].m_wMaxDuration = 100;
    1b76:	84 e6       	ldi	r24, 0x64	; 100
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	88 8f       	std	Y+24, r24	; 0x18
    1b7c:	99 8f       	std	Y+25, r25	; 0x19
    1b7e:	0a c0       	rjmp	.+20     	; 0x1b94 <_ZN16CLaserControlApp13MelaninPresetEj+0xbe>
		//pstGUI[Profile].m_wMaxEnergy = 90;
	}
	else
	{
		laserDiodeData.phototype = 6;
    1b80:	86 e0       	ldi	r24, 0x06	; 6
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	fe 01       	movw	r30, r28
    1b86:	f3 95       	inc	r31
    1b88:	80 83       	st	Z, r24
    1b8a:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[Profile].m_wMaxDuration = 100;
    1b8c:	84 e6       	ldi	r24, 0x64	; 100
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	88 8f       	std	Y+24, r24	; 0x18
    1b92:	99 8f       	std	Y+25, r25	; 0x19
		//pstGUI[Profile].m_wMaxEnergy = 87;
	}
	
	laserDiodeData.laserprofile.EnergyCnt = 100;//m_wMaxEnergy;
    1b94:	fe 01       	movw	r30, r28
    1b96:	ee 50       	subi	r30, 0x0E	; 14
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	84 e6       	ldi	r24, 0x64	; 100
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	80 83       	st	Z, r24
    1ba0:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.DurationCnt = pstGUI[Profile].m_wMaxDuration;
    1ba2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ba4:	32 97       	sbiw	r30, 0x02	; 2
    1ba6:	82 2f       	mov	r24, r18
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	de 01       	movw	r26, r28
    1bac:	3a e1       	ldi	r19, 0x1A	; 26
    1bae:	23 9f       	mul	r18, r19
    1bb0:	a0 0d       	add	r26, r0
    1bb2:	b1 1d       	adc	r27, r1
    1bb4:	11 24       	eor	r1, r1
    1bb6:	58 96       	adiw	r26, 0x18	; 24
    1bb8:	2d 91       	ld	r18, X+
    1bba:	3c 91       	ld	r19, X
    1bbc:	59 97       	sbiw	r26, 0x19	; 25
    1bbe:	20 83       	st	Z, r18
    1bc0:	31 83       	std	Z+1, r19	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1bc2:	8e 01       	movw	r16, r28
    1bc4:	0c 50       	subi	r16, 0x0C	; 12
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	bc 01       	movw	r22, r24
    1bca:	66 0f       	add	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	ab 01       	movw	r20, r22
    1bd0:	48 0f       	add	r20, r24
    1bd2:	59 1f       	adc	r21, r25
    1bd4:	44 0f       	add	r20, r20
    1bd6:	55 1f       	adc	r21, r21
    1bd8:	4c 54       	subi	r20, 0x4C	; 76
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255
    1bdc:	4c 0f       	add	r20, r28
    1bde:	5d 1f       	adc	r21, r29
    1be0:	68 0f       	add	r22, r24
    1be2:	79 1f       	adc	r23, r25
    1be4:	66 0f       	add	r22, r22
    1be6:	77 1f       	adc	r23, r23
    1be8:	6a 56       	subi	r22, 0x6A	; 106
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	6c 0f       	add	r22, r28
    1bee:	7d 1f       	adc	r23, r29
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	20 83       	st	Z, r18
    1bfa:	31 83       	std	Z+1, r19	; 0x01
    1bfc:	42 83       	std	Z+2, r20	; 0x02
    1bfe:	53 83       	std	Z+3, r21	; 0x03
    1c00:	64 83       	std	Z+4, r22	; 0x04
    1c02:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyCnt;
    1c04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	fc 01       	movw	r30, r24
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	e8 0f       	add	r30, r24
    1c10:	f9 1f       	adc	r31, r25
    1c12:	ee 0f       	add	r30, r30
    1c14:	ff 1f       	adc	r31, r31
    1c16:	ec 0f       	add	r30, r28
    1c18:	fd 1f       	adc	r31, r29
    1c1a:	e6 56       	subi	r30, 0x66	; 102
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	c8 52       	subi	r28, 0x28	; 40
    1c24:	df 4f       	sbci	r29, 0xFF	; 255
    1c26:	88 83       	st	Y, r24
    1c28:	99 83       	std	Y+1, r25	; 0x01
}
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	08 95       	ret

00001c34 <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
    1c3e:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
    1c40:	fc 01       	movw	r30, r24
    1c42:	e4 51       	subi	r30, 0x14	; 20
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	10 82       	st	Z, r1
    1c48:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
    1c4a:	32 96       	adiw	r30, 0x02	; 2
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	80 83       	st	Z, r24
    1c52:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
    1c54:	72 96       	adiw	r30, 0x12	; 18
    1c56:	60 83       	st	Z, r22
    1c58:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
    1c5a:	63 30       	cpi	r22, 0x03	; 3
    1c5c:	71 05       	cpc	r23, r1
    1c5e:	41 f1       	breq	.+80     	; 0x1cb0 <_ZN16CLaserControlApp15PhototypePresetEj+0x7c>
    1c60:	38 f4       	brcc	.+14     	; 0x1c70 <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
    1c62:	61 30       	cpi	r22, 0x01	; 1
    1c64:	71 05       	cpc	r23, r1
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <_ZN16CLaserControlApp15PhototypePresetEj+0x4c>
    1c68:	62 30       	cpi	r22, 0x02	; 2
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	a9 f0       	breq	.+42     	; 0x1c98 <_ZN16CLaserControlApp15PhototypePresetEj+0x64>
    1c6e:	4f c0       	rjmp	.+158    	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
    1c70:	65 30       	cpi	r22, 0x05	; 5
    1c72:	71 05       	cpc	r23, r1
    1c74:	a9 f1       	breq	.+106    	; 0x1ce0 <_ZN16CLaserControlApp15PhototypePresetEj+0xac>
    1c76:	40 f1       	brcs	.+80     	; 0x1cc8 <_ZN16CLaserControlApp15PhototypePresetEj+0x94>
    1c78:	66 30       	cpi	r22, 0x06	; 6
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	e9 f1       	breq	.+122    	; 0x1cf8 <_ZN16CLaserControlApp15PhototypePresetEj+0xc4>
    1c7e:	47 c0       	rjmp	.+142    	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fe 01       	movw	r30, r28
    1c86:	e2 50       	subi	r30, 0x02	; 2
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[Profile].m_wMaxDuration = 60;
    1c8e:	8c e3       	ldi	r24, 0x3C	; 60
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	88 8f       	std	Y+24, r24	; 0x18
    1c94:	99 8f       	std	Y+25, r25	; 0x19
			//pstGUI[Profile].m_wMaxEnergy = 97;
		}
		break;
    1c96:	3b c0       	rjmp	.+118    	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
		case 2:
		{
			laserDiodeData.melanin = 14;
    1c98:	8e e0       	ldi	r24, 0x0E	; 14
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e2 50       	subi	r30, 0x02	; 2
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 83       	st	Z, r24
    1ca4:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[Profile].m_wMaxDuration = 60;
    1ca6:	8c e3       	ldi	r24, 0x3C	; 60
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	88 8f       	std	Y+24, r24	; 0x18
    1cac:	99 8f       	std	Y+25, r25	; 0x19
			//pstGUI[Profile].m_wMaxEnergy = 97;
		}
		break;
    1cae:	2f c0       	rjmp	.+94     	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
		case 3:
		{
			laserDiodeData.melanin = 27;
    1cb0:	8b e1       	ldi	r24, 0x1B	; 27
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e2 50       	subi	r30, 0x02	; 2
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 83       	st	Z, r24
    1cbc:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[Profile].m_wMaxDuration = 60;
    1cbe:	8c e3       	ldi	r24, 0x3C	; 60
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	88 8f       	std	Y+24, r24	; 0x18
    1cc4:	99 8f       	std	Y+25, r25	; 0x19
			//pstGUI[Profile].m_wMaxEnergy = 97;
		}
		break;
    1cc6:	23 c0       	rjmp	.+70     	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
		case 4:
		{
			laserDiodeData.melanin = 41;
    1cc8:	89 e2       	ldi	r24, 0x29	; 41
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e2 50       	subi	r30, 0x02	; 2
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 83       	st	Z, r24
    1cd4:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[Profile].m_wMaxDuration = 100;
    1cd6:	84 e6       	ldi	r24, 0x64	; 100
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 8f       	std	Y+24, r24	; 0x18
    1cdc:	99 8f       	std	Y+25, r25	; 0x19
			//pstGUI[Profile].m_wMaxEnergy = 97;
		}
		break;
    1cde:	17 c0       	rjmp	.+46     	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
		case 5:
		{
			laserDiodeData.melanin = 61;
    1ce0:	8d e3       	ldi	r24, 0x3D	; 61
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e2 50       	subi	r30, 0x02	; 2
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 83       	st	Z, r24
    1cec:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[Profile].m_wMaxDuration = 100;
    1cee:	84 e6       	ldi	r24, 0x64	; 100
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	88 8f       	std	Y+24, r24	; 0x18
    1cf4:	99 8f       	std	Y+25, r25	; 0x19
			//pstGUI[Profile].m_wMaxEnergy = 90;
		}
		break;
    1cf6:	0b c0       	rjmp	.+22     	; 0x1d0e <_ZN16CLaserControlApp15PhototypePresetEj+0xda>
		case 6:
		{
			laserDiodeData.melanin = 85;
    1cf8:	85 e5       	ldi	r24, 0x55	; 85
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e2 50       	subi	r30, 0x02	; 2
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[Profile].m_wMaxDuration = 100;
    1d06:	84 e6       	ldi	r24, 0x64	; 100
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	88 8f       	std	Y+24, r24	; 0x18
    1d0c:	99 8f       	std	Y+25, r25	; 0x19
			//pstGUI[Profile].m_wMaxEnergy = 87;
		}
	}
	
	laserDiodeData.laserprofile.EnergyCnt = 100;//m_wMaxEnergy;
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ee 50       	subi	r30, 0x0E	; 14
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	84 e6       	ldi	r24, 0x64	; 100
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	80 83       	st	Z, r24
    1d1a:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.DurationCnt = pstGUI[Profile].m_wMaxDuration;
    1d1c:	32 97       	sbiw	r30, 0x02	; 2
    1d1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d20:	99 8d       	ldd	r25, Y+25	; 0x19
    1d22:	80 83       	st	Z, r24
    1d24:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1d26:	8e 01       	movw	r16, r28
    1d28:	0c 50       	subi	r16, 0x0C	; 12
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	ae 01       	movw	r20, r28
    1d2e:	4c 54       	subi	r20, 0x4C	; 76
    1d30:	5f 4f       	sbci	r21, 0xFF	; 255
    1d32:	be 01       	movw	r22, r28
    1d34:	6a 56       	subi	r22, 0x6A	; 106
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	20 83       	st	Z, r18
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	42 83       	std	Z+2, r20	; 0x02
    1d46:	53 83       	std	Z+3, r21	; 0x03
    1d48:	64 83       	std	Z+4, r22	; 0x04
    1d4a:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyCnt;
    1d4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	fc 01       	movw	r30, r24
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	e8 0f       	add	r30, r24
    1d58:	f9 1f       	adc	r31, r25
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	ec 0f       	add	r30, r28
    1d60:	fd 1f       	adc	r31, r29
    1d62:	e6 56       	subi	r30, 0x66	; 102
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	c8 52       	subi	r28, 0x28	; 40
    1d6c:	df 4f       	sbci	r29, 0xFF	; 255
    1d6e:	88 83       	st	Y, r24
    1d70:	99 83       	std	Y+1, r25	; 0x01
}
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1d7c:	2f 92       	push	r2
    1d7e:	3f 92       	push	r3
    1d80:	4f 92       	push	r4
    1d82:	5f 92       	push	r5
    1d84:	6f 92       	push	r6
    1d86:	7f 92       	push	r7
    1d88:	8f 92       	push	r8
    1d8a:	9f 92       	push	r9
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x24>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x26>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	7c 01       	movw	r14, r24
	// GUI class initialization
	m_cpSender = sender;
    1da8:	fc 01       	movw	r30, r24
    1daa:	ec 5d       	subi	r30, 0xDC	; 220
    1dac:	fe 4f       	sbci	r31, 0xFE	; 254
    1dae:	60 83       	st	Z, r22
    1db0:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    1db2:	fc 01       	movw	r30, r24
    1db4:	17 86       	std	Z+15, r1	; 0x0f
	update = false;
    1db6:	11 8a       	std	Z+17, r1	; 0x11
	prepare = false;
    1db8:	12 8a       	std	Z+18, r1	; 0x12
	peltier_en = false;
    1dba:	13 8a       	std	Z+19, r1	; 0x13
	//isstarted = false;
	m_wSetMin = 0;
    1dbc:	5c 01       	movw	r10, r24
    1dbe:	f4 ee       	ldi	r31, 0xE4	; 228
    1dc0:	af 1a       	sub	r10, r31
    1dc2:	fe ef       	ldi	r31, 0xFE	; 254
    1dc4:	bf 0a       	sbc	r11, r31
    1dc6:	f5 01       	movw	r30, r10
    1dc8:	10 82       	st	Z, r1
    1dca:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 0;
    1dcc:	6c 01       	movw	r12, r24
    1dce:	f2 ee       	ldi	r31, 0xE2	; 226
    1dd0:	cf 1a       	sub	r12, r31
    1dd2:	fe ef       	ldi	r31, 0xFE	; 254
    1dd4:	df 0a       	sbc	r13, r31
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	10 82       	st	Z, r1
    1dda:	11 82       	std	Z+1, r1	; 0x01
	m_wMillSec = 0;
    1ddc:	34 97       	sbiw	r30, 0x04	; 4
    1dde:	10 82       	st	Z, r1
    1de0:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    1de2:	f5 01       	movw	r30, r10
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	36 97       	sbiw	r30, 0x06	; 6
    1dea:	80 83       	st	Z, r24
    1dec:	91 83       	std	Z+1, r25	; 0x01
	m_wSeconds = m_wSetSec;
    1dee:	f6 01       	movw	r30, r12
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	36 97       	sbiw	r30, 0x06	; 6
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
	m_wDeadTime = 0;
    1dfa:	3a 96       	adiw	r30, 0x0a	; 10
    1dfc:	10 82       	st	Z, r1
    1dfe:	11 82       	std	Z+1, r1	; 0x01
	
	uint16_t freq = 10;
    1e00:	0f 2e       	mov	r0, r31
    1e02:	fa e0       	ldi	r31, 0x0A	; 10
    1e04:	8f 2e       	mov	r8, r31
    1e06:	91 2c       	mov	r9, r1
    1e08:	f0 2d       	mov	r31, r0
    1e0a:	8d 82       	std	Y+5, r8	; 0x05
    1e0c:	9e 82       	std	Y+6, r9	; 0x06
	uint16_t duration = 40;
    1e0e:	0f 2e       	mov	r0, r31
    1e10:	f8 e2       	ldi	r31, 0x28	; 40
    1e12:	4f 2e       	mov	r4, r31
    1e14:	51 2c       	mov	r5, r1
    1e16:	f0 2d       	mov	r31, r0
    1e18:	4b 82       	std	Y+3, r4	; 0x03
    1e1a:	5c 82       	std	Y+4, r5	; 0x04
	uint16_t energy = 14;
    1e1c:	0f 2e       	mov	r0, r31
    1e1e:	fe e0       	ldi	r31, 0x0E	; 14
    1e20:	2f 2e       	mov	r2, r31
    1e22:	31 2c       	mov	r3, r1
    1e24:	f0 2d       	mov	r31, r0
    1e26:	29 82       	std	Y+1, r2	; 0x01
    1e28:	3a 82       	std	Y+2, r3	; 0x02
	
	// Fast profile
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    1e2a:	04 e0       	ldi	r16, 0x04	; 4
    1e2c:	9e 01       	movw	r18, r28
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	ae 01       	movw	r20, r28
    1e34:	4d 5f       	subi	r20, 0xFD	; 253
    1e36:	5f 4f       	sbci	r21, 0xFF	; 255
    1e38:	be 01       	movw	r22, r28
    1e3a:	6b 5f       	subi	r22, 0xFB	; 251
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	c7 01       	movw	r24, r14
    1e40:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Medium profile
	freq = 5; duration = 80; energy = 26;
    1e44:	85 e0       	ldi	r24, 0x05	; 5
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	80 e5       	ldi	r24, 0x50	; 80
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8a e1       	ldi	r24, 0x1A	; 26
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_MEDIUM);
    1e5c:	03 e0       	ldi	r16, 0x03	; 3
    1e5e:	9e 01       	movw	r18, r28
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	ae 01       	movw	r20, r28
    1e66:	4d 5f       	subi	r20, 0xFD	; 253
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	be 01       	movw	r22, r28
    1e6c:	6b 5f       	subi	r22, 0xFB	; 251
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	c7 01       	movw	r24, r14
    1e72:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Slow profile
	freq = 2; duration = 120; energy = 36;
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	88 e7       	ldi	r24, 0x78	; 120
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	8b 83       	std	Y+3, r24	; 0x03
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	84 e2       	ldi	r24, 0x24	; 36
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SLOW);
    1e8e:	02 e0       	ldi	r16, 0x02	; 2
    1e90:	9e 01       	movw	r18, r28
    1e92:	2f 5f       	subi	r18, 0xFF	; 255
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	ae 01       	movw	r20, r28
    1e98:	4d 5f       	subi	r20, 0xFD	; 253
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	be 01       	movw	r22, r28
    1e9e:	6b 5f       	subi	r22, 0xFB	; 251
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	c7 01       	movw	r24, r14
    1ea4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Single profile
	freq = 1; duration = 100; energy = 38;
    1ea8:	66 24       	eor	r6, r6
    1eaa:	63 94       	inc	r6
    1eac:	71 2c       	mov	r7, r1
    1eae:	6d 82       	std	Y+5, r6	; 0x05
    1eb0:	7e 82       	std	Y+6, r7	; 0x06
    1eb2:	84 e6       	ldi	r24, 0x64	; 100
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	86 e2       	ldi	r24, 0x26	; 38
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SINGLE);
    1ec2:	01 e0       	ldi	r16, 0x01	; 1
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	2f 5f       	subi	r18, 0xFF	; 255
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	ae 01       	movw	r20, r28
    1ecc:	4d 5f       	subi	r20, 0xFD	; 253
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	be 01       	movw	r22, r28
    1ed2:	6b 5f       	subi	r22, 0xFB	; 251
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Current profile
	Profile = PROFILE_FAST;
    1edc:	84 e0       	ldi	r24, 0x04	; 4
    1ede:	f7 01       	movw	r30, r14
    1ee0:	86 87       	std	Z+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <eeprom_read_dword>
    1eea:	f7 01       	movw	r30, r14
    1eec:	e6 52       	subi	r30, 0x26	; 38
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 83       	st	Z, r22
    1ef2:	71 83       	std	Z+1, r23	; 0x01
    1ef4:	82 83       	std	Z+2, r24	; 0x02
    1ef6:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    1ef8:	72 96       	adiw	r30, 0x12	; 18
    1efa:	24 e0       	ldi	r18, 0x04	; 4
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	20 83       	st	Z, r18
    1f00:	31 83       	std	Z+1, r19	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1f02:	d7 01       	movw	r26, r14
    1f04:	a2 51       	subi	r26, 0x12	; 18
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	fe 97       	sbiw	r30, 0x3e	; 62
    1f0a:	26 e0       	ldi	r18, 0x06	; 6
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	0d 92       	st	X+, r0
    1f10:	2a 95       	dec	r18
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x190>
	memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[PROFILE_FAST], sizeof(DGUS_LASERSETTINGS));
    1f14:	d7 01       	movw	r26, r14
    1f16:	ac 50       	subi	r26, 0x0C	; 12
    1f18:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1a:	f7 01       	movw	r30, r14
    1f1c:	e4 53       	subi	r30, 0x34	; 52
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	26 e0       	ldi	r18, 0x06	; 6
    1f22:	01 90       	ld	r0, Z+
    1f24:	0d 92       	st	X+, r0
    1f26:	2a 95       	dec	r18
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x1a6>
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    1f2a:	f5 01       	movw	r30, r10
    1f2c:	20 81       	ld	r18, Z
    1f2e:	31 81       	ldd	r19, Z+1	; 0x01
    1f30:	74 97       	sbiw	r30, 0x14	; 20
    1f32:	20 83       	st	Z, r18
    1f34:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    1f36:	f6 01       	movw	r30, r12
    1f38:	20 81       	ld	r18, Z
    1f3a:	31 81       	ldd	r19, Z+1	; 0x01
    1f3c:	74 97       	sbiw	r30, 0x14	; 20
    1f3e:	20 83       	st	Z, r18
    1f40:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    1f42:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z6swap32m>
    1f46:	f7 01       	movw	r30, r14
    1f48:	e6 50       	subi	r30, 0x06	; 6
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 83       	st	Z, r22
    1f4e:	71 83       	std	Z+1, r23	; 0x01
    1f50:	82 83       	std	Z+2, r24	; 0x02
    1f52:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    1f54:	34 96       	adiw	r30, 0x04	; 4
    1f56:	10 82       	st	Z, r1
    1f58:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    1f5a:	32 96       	adiw	r30, 0x02	; 2
    1f5c:	60 82       	st	Z, r6
    1f5e:	71 82       	std	Z+1, r7	; 0x01
	laserDiodeData.temperature = temperature;
    1f60:	32 96       	adiw	r30, 0x02	; 2
    1f62:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    1f66:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    1f6a:	80 83       	st	Z, r24
    1f6c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    1f6e:	32 96       	adiw	r30, 0x02	; 2
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	80 83       	st	Z, r24
    1f76:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    1f78:	32 96       	adiw	r30, 0x02	; 2
    1f7a:	10 82       	st	Z, r1
    1f7c:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    1f7e:	36 96       	adiw	r30, 0x06	; 6
    1f80:	10 82       	st	Z, r1
    1f82:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    1f84:	32 96       	adiw	r30, 0x02	; 2
    1f86:	8d e0       	ldi	r24, 0x0D	; 13
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    1f8e:	34 96       	adiw	r30, 0x04	; 4
    1f90:	10 82       	st	Z, r1
    1f92:	11 82       	std	Z+1, r1	; 0x01
    1f94:	12 82       	std	Z+2, r1	; 0x02
    1f96:	13 82       	std	Z+3, r1	; 0x03
	
	// Preset hardware to FAST mode
	freq = 10;
    1f98:	8d 82       	std	Y+5, r8	; 0x05
    1f9a:	9e 82       	std	Y+6, r9	; 0x06
	duration = 40;
    1f9c:	4b 82       	std	Y+3, r4	; 0x03
    1f9e:	5c 82       	std	Y+4, r5	; 0x04
	energy = 14;
    1fa0:	29 82       	std	Y+1, r2	; 0x01
    1fa2:	3a 82       	std	Y+2, r3	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    1fa4:	04 e0       	ldi	r16, 0x04	; 4
    1fa6:	9e 01       	movw	r18, r28
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	ae 01       	movw	r20, r28
    1fae:	4d 5f       	subi	r20, 0xFD	; 253
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	be 01       	movw	r22, r28
    1fb4:	6b 5f       	subi	r22, 0xFB	; 251
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	c7 01       	movw	r24, r14
    1fba:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    1fbe:	47 e0       	ldi	r20, 0x07	; 7
    1fc0:	63 e0       	ldi	r22, 0x03	; 3
    1fc2:	88 e1       	ldi	r24, 0x18	; 24
    1fc4:	96 e2       	ldi	r25, 0x26	; 38
    1fc6:	0e 94 bb 3a 	call	0x7576	; 0x7576 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    1fca:	f7 01       	movw	r30, r14
    1fcc:	ee 52       	subi	r30, 0x2E	; 46
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	88 e1       	ldi	r24, 0x18	; 24
    1fd6:	96 e2       	ldi	r25, 0x26	; 38
    1fd8:	0e 94 09 3b 	call	0x7612	; 0x7612 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1fdc:	67 01       	movw	r12, r14
    1fde:	f4 ed       	ldi	r31, 0xD4	; 212
    1fe0:	cf 0e       	add	r12, r31
    1fe2:	d1 1c       	adc	r13, r1
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	88 e1       	ldi	r24, 0x18	; 24
    1fec:	96 e2       	ldi	r25, 0x26	; 38
    1fee:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    1ff2:	21 e0       	ldi	r18, 0x01	; 1
    1ff4:	a7 01       	movw	r20, r14
    1ff6:	6c ec       	ldi	r22, 0xCC	; 204
    1ff8:	78 e1       	ldi	r23, 0x18	; 24
    1ffa:	88 e1       	ldi	r24, 0x18	; 24
    1ffc:	96 e2       	ldi	r25, 0x26	; 38
    1ffe:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    2002:	21 e0       	ldi	r18, 0x01	; 1
    2004:	a7 01       	movw	r20, r14
    2006:	68 e5       	ldi	r22, 0x58	; 88
    2008:	74 e0       	ldi	r23, 0x04	; 4
    200a:	88 e1       	ldi	r24, 0x18	; 24
    200c:	96 e2       	ldi	r25, 0x26	; 38
    200e:	0e 94 44 3b 	call	0x7688	; 0x7688 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    2012:	60 e1       	ldi	r22, 0x10	; 16
    2014:	88 e1       	ldi	r24, 0x18	; 24
    2016:	96 e2       	ldi	r25, 0x26	; 38
    2018:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    201c:	60 e1       	ldi	r22, 0x10	; 16
    201e:	88 e1       	ldi	r24, 0x18	; 24
    2020:	96 e2       	ldi	r25, 0x26	; 38
    2022:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    2026:	f6 01       	movw	r30, r12
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	88 e1       	ldi	r24, 0x18	; 24
    202e:	96 e2       	ldi	r25, 0x26	; 38
    2030:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    2034:	60 e2       	ldi	r22, 0x20	; 32
    2036:	88 e1       	ldi	r24, 0x18	; 24
    2038:	96 e2       	ldi	r25, 0x26	; 38
    203a:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    203e:	60 e2       	ldi	r22, 0x20	; 32
    2040:	88 e1       	ldi	r24, 0x18	; 24
    2042:	96 e2       	ldi	r25, 0x26	; 38
    2044:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    2048:	26 96       	adiw	r28, 0x06	; 6
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	6f 90       	pop	r6
    2068:	5f 90       	pop	r5
    206a:	4f 90       	pop	r4
    206c:	3f 90       	pop	r3
    206e:	2f 90       	pop	r2
    2070:	08 95       	ret

00002072 <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	1f 92       	push	r1
    2080:	1f 92       	push	r1
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_Z4swapj>
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    2094:	87 01       	movw	r16, r14
    2096:	0c 5d       	subi	r16, 0xDC	; 220
    2098:	1e 4f       	sbci	r17, 0xFE	; 254
    209a:	22 e0       	ldi	r18, 0x02	; 2
    209c:	ae 01       	movw	r20, r28
    209e:	4f 5f       	subi	r20, 0xFF	; 255
    20a0:	5f 4f       	sbci	r21, 0xFF	; 255
    20a2:	63 e0       	ldi	r22, 0x03	; 3
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    20ae:	f8 01       	movw	r30, r16
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    20b8:	a7 01       	movw	r20, r14
    20ba:	44 51       	subi	r20, 0x14	; 20
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	2a e2       	ldi	r18, 0x2A	; 42
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	f8 01       	movw	r30, r16
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	0e 94 08 34 	call	0x6810	; 0x6810 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    20d0:	f8 01       	movw	r30, r16
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    20da:	68 ea       	ldi	r22, 0xA8	; 168
    20dc:	71 e6       	ldi	r23, 0x61	; 97
    20de:	8e e1       	ldi	r24, 0x1E	; 30
    20e0:	96 e2       	ldi	r25, 0x26	; 38
    20e2:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    20e6:	84 e0       	ldi	r24, 0x04	; 4
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	f7 01       	movw	r30, r14
    20ec:	84 87       	std	Z+12, r24	; 0x0c
    20ee:	95 87       	std	Z+13, r25	; 0x0d
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	08 95       	ret

00002102 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
	
	return result;
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateMultiPulseLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    2102:	4f 92       	push	r4
    2104:	5f 92       	push	r5
    2106:	6f 92       	push	r6
    2108:	7f 92       	push	r7
    210a:	8f 92       	push	r8
    210c:	9f 92       	push	r9
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	2c 97       	sbiw	r28, 0x0c	; 12
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	8c 01       	movw	r16, r24
    212e:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    2130:	db 01       	movw	r26, r22
    2132:	2d 91       	ld	r18, X+
    2134:	3c 91       	ld	r19, X
    2136:	88 ee       	ldi	r24, 0xE8	; 232
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	b9 01       	movw	r22, r18
    213c:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
	uint16_t duration1 = settings->Duration / 2;
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	6c 01       	movw	r12, r24
    2146:	d6 94       	lsr	r13
    2148:	c7 94       	ror	r12
	uint16_t period1;
	uint16_t period2;
	uint16_t period3;
	uint16_t period4;
	
	if (profile->Frequency >= 2)
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	48 f0       	brcs	.+18     	; 0x2162 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x60>
	{
		period3 = period - (settings->Duration - 5);
    2150:	7b 01       	movw	r14, r22
    2152:	e8 1a       	sub	r14, r24
    2154:	f9 0a       	sbc	r15, r25
    2156:	b5 e0       	ldi	r27, 0x05	; 5
    2158:	eb 0e       	add	r14, r27
    215a:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 5;
    215c:	25 e0       	ldi	r18, 0x05	; 5
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	08 c0       	rjmp	.+16     	; 0x2172 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x70>
		period2 = duration2;
	}
	else
	{
		period3 = period - (settings->Duration - 10);
    2162:	7b 01       	movw	r14, r22
    2164:	e8 1a       	sub	r14, r24
    2166:	f9 0a       	sbc	r15, r25
    2168:	ea e0       	ldi	r30, 0x0A	; 10
    216a:	ee 0e       	add	r14, r30
    216c:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 10;
    216e:	2a e0       	ldi	r18, 0x0A	; 10
    2170:	30 e0       	ldi	r19, 0x00	; 0
		period2 = duration2;
	}
	
	// calculate multi pulse
	laserMultiPulsePeriod[0] = uint32_t(625ul * (uint32_t)period1) / 10ul;
    2172:	58 01       	movw	r10, r16
    2174:	f4 ee       	ldi	r31, 0xE4	; 228
    2176:	af 0e       	add	r10, r31
    2178:	b1 1c       	adc	r11, r1
    217a:	a1 e7       	ldi	r26, 0x71	; 113
    217c:	b2 e0       	ldi	r27, 0x02	; 2
    217e:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    2182:	0f 2e       	mov	r0, r31
    2184:	fa e0       	ldi	r31, 0x0A	; 10
    2186:	4f 2e       	mov	r4, r31
    2188:	51 2c       	mov	r5, r1
    218a:	61 2c       	mov	r6, r1
    218c:	71 2c       	mov	r7, r1
    218e:	f0 2d       	mov	r31, r0
    2190:	a3 01       	movw	r20, r6
    2192:	92 01       	movw	r18, r4
    2194:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    2198:	d5 01       	movw	r26, r10
    219a:	2d 93       	st	X+, r18
    219c:	3c 93       	st	X, r19
	laserMultiPulsePeriod[1] = uint32_t(625ul * (uint32_t)period2) / 10ul;
    219e:	96 01       	movw	r18, r12
    21a0:	a1 e7       	ldi	r26, 0x71	; 113
    21a2:	b2 e0       	ldi	r27, 0x02	; 2
    21a4:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    21a8:	a3 01       	movw	r20, r6
    21aa:	92 01       	movw	r18, r4
    21ac:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    21b0:	49 01       	movw	r8, r18
    21b2:	5a 01       	movw	r10, r20
    21b4:	f8 01       	movw	r30, r16
    21b6:	ea 51       	subi	r30, 0x1A	; 26
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	20 83       	st	Z, r18
    21bc:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[2] = uint32_t(625ul * (uint32_t)period3) / 10ul;
    21be:	68 01       	movw	r12, r16
    21c0:	b8 ee       	ldi	r27, 0xE8	; 232
    21c2:	cb 0e       	add	r12, r27
    21c4:	d1 1c       	adc	r13, r1
    21c6:	97 01       	movw	r18, r14
    21c8:	a1 e7       	ldi	r26, 0x71	; 113
    21ca:	b2 e0       	ldi	r27, 0x02	; 2
    21cc:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    21d0:	a3 01       	movw	r20, r6
    21d2:	92 01       	movw	r18, r4
    21d4:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    21d8:	f6 01       	movw	r30, r12
    21da:	20 83       	st	Z, r18
    21dc:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[3] = uint32_t(625ul * (uint32_t)period4) / 10ul;
    21de:	32 96       	adiw	r30, 0x02	; 2
    21e0:	80 82       	st	Z, r8
    21e2:	91 82       	std	Z+1, r9	; 0x01
	
	laserTimer.DisableChannel(TIMER_CHANNEL_A);
    21e4:	60 e1       	ldi	r22, 0x10	; 16
    21e6:	88 e1       	ldi	r24, 0x18	; 24
    21e8:	96 e2       	ldi	r25, 0x26	; 38
    21ea:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.DisableChannel(TIMER_CHANNEL_B);
    21ee:	60 e2       	ldi	r22, 0x20	; 32
    21f0:	88 e1       	ldi	r24, 0x18	; 24
    21f2:	96 e2       	ldi	r25, 0x26	; 38
    21f4:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	
	return result;
    21f8:	86 e0       	ldi	r24, 0x06	; 6
    21fa:	fe 01       	movw	r30, r28
    21fc:	37 96       	adiw	r30, 0x07	; 7
    21fe:	de 01       	movw	r26, r28
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	01 90       	ld	r0, Z+
    2204:	0d 92       	st	X+, r0
    2206:	8a 95       	dec	r24
    2208:	e1 f7       	brne	.-8      	; 0x2202 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x100>
    220a:	29 81       	ldd	r18, Y+1	; 0x01
    220c:	3a 81       	ldd	r19, Y+2	; 0x02
    220e:	4b 81       	ldd	r20, Y+3	; 0x03
    2210:	5c 81       	ldd	r21, Y+4	; 0x04
    2212:	6d 81       	ldd	r22, Y+5	; 0x05
    2214:	7e 81       	ldd	r23, Y+6	; 0x06
}
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	2c 96       	adiw	r28, 0x0c	; 12
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	bf 90       	pop	r11
    2232:	af 90       	pop	r10
    2234:	9f 90       	pop	r9
    2236:	8f 90       	pop	r8
    2238:	7f 90       	pop	r7
    223a:	6f 90       	pop	r6
    223c:	5f 90       	pop	r5
    223e:	4f 90       	pop	r4
    2240:	08 95       	ret

00002242 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    2248:	fc 01       	movw	r30, r24
    224a:	ee 5d       	subi	r30, 0xDE	; 222
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	89 2b       	or	r24, r25
    2254:	29 f0       	breq	.+10     	; 0x2260 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	80 83       	st	Z, r24
    225e:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    2260:	8a 89       	ldd	r24, Y+18	; 0x12
    2262:	88 23       	and	r24, r24
    2264:	09 f4       	brne	.+2      	; 0x2268 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    2266:	89 c0       	rjmp	.+274    	; 0x237a <_ZN16CLaserControlApp7OnTimerEv+0x138>
	{
		if (m_wMillSec == 0)
    2268:	fe 01       	movw	r30, r28
    226a:	e6 5e       	subi	r30, 0xE6	; 230
    226c:	fe 4f       	sbci	r31, 0xFE	; 254
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	89 2b       	or	r24, r25
    2274:	09 f0       	breq	.+2      	; 0x2278 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    2276:	79 c0       	rjmp	.+242    	; 0x236a <_ZN16CLaserControlApp7OnTimerEv+0x128>
		{			
			if (m_wSeconds == 0)
    2278:	32 97       	sbiw	r30, 0x02	; 2
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	89 2b       	or	r24, r25
    2280:	09 f0       	breq	.+2      	; 0x2284 <_ZN16CLaserControlApp7OnTimerEv+0x42>
    2282:	4c c0       	rjmp	.+152    	; 0x231c <_ZN16CLaserControlApp7OnTimerEv+0xda>
			{
				if (m_wMinutes == 0)
    2284:	32 97       	sbiw	r30, 0x02	; 2
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	89 2b       	or	r24, r25
    228c:	d1 f5       	brne	.+116    	; 0x2302 <_ZN16CLaserControlApp7OnTimerEv+0xc0>
				{
					if (state == APP_WORKPREPARE)
    228e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2290:	9d 85       	ldd	r25, Y+13	; 0x0d
    2292:	02 97       	sbiw	r24, 0x02	; 2
    2294:	a1 f5       	brne	.+104    	; 0x22fe <_ZN16CLaserControlApp7OnTimerEv+0xbc>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    2296:	22 e0       	ldi	r18, 0x02	; 2
    2298:	44 e6       	ldi	r20, 0x64	; 100
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	65 e0       	ldi	r22, 0x05	; 5
    229e:	71 e0       	ldi	r23, 0x01	; 1
    22a0:	80 ee       	ldi	r24, 0xE0	; 224
    22a2:	95 e2       	ldi	r25, 0x25	; 37
    22a4:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    22a8:	80 ee       	ldi	r24, 0xE0	; 224
    22aa:	95 e2       	ldi	r25, 0x25	; 37
    22ac:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    22b0:	22 e0       	ldi	r18, 0x02	; 2
    22b2:	44 e6       	ldi	r20, 0x64	; 100
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	66 e2       	ldi	r22, 0x26	; 38
    22b8:	71 e0       	ldi	r23, 0x01	; 1
    22ba:	80 ee       	ldi	r24, 0xE0	; 224
    22bc:	95 e2       	ldi	r25, 0x25	; 37
    22be:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    22c2:	80 ee       	ldi	r24, 0xE0	; 224
    22c4:	95 e2       	ldi	r25, 0x25	; 37
    22c6:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    22ca:	22 e0       	ldi	r18, 0x02	; 2
    22cc:	44 e6       	ldi	r20, 0x64	; 100
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	69 e4       	ldi	r22, 0x49	; 73
    22d2:	71 e0       	ldi	r23, 0x01	; 1
    22d4:	80 ee       	ldi	r24, 0xE0	; 224
    22d6:	95 e2       	ldi	r25, 0x25	; 37
    22d8:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    22dc:	80 ee       	ldi	r24, 0xE0	; 224
    22de:	95 e2       	ldi	r25, 0x25	; 37
    22e0:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    22e4:	22 e0       	ldi	r18, 0x02	; 2
    22e6:	44 e6       	ldi	r20, 0x64	; 100
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	6d e5       	ldi	r22, 0x5D	; 93
    22ec:	71 e0       	ldi	r23, 0x01	; 1
    22ee:	80 ee       	ldi	r24, 0xE0	; 224
    22f0:	95 e2       	ldi	r25, 0x25	; 37
    22f2:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    22f6:	80 ee       	ldi	r24, 0xE0	; 224
    22f8:	95 e2       	ldi	r25, 0x25	; 37
    22fa:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    22fe:	1a 8a       	std	Y+18, r1	; 0x12
    2300:	a3 c0       	rjmp	.+326    	; 0x2448 <_ZN16CLaserControlApp7OnTimerEv+0x206>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    2302:	8c e3       	ldi	r24, 0x3C	; 60
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	fe 01       	movw	r30, r28
    2308:	e8 5e       	subi	r30, 0xE8	; 232
    230a:	fe 4f       	sbci	r31, 0xFE	; 254
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    2310:	32 97       	sbiw	r30, 0x02	; 2
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	80 83       	st	Z, r24
    231a:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    231c:	84 e6       	ldi	r24, 0x64	; 100
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	fe 01       	movw	r30, r28
    2322:	e6 5e       	subi	r30, 0xE6	; 230
    2324:	fe 4f       	sbci	r31, 0xFE	; 254
    2326:	80 83       	st	Z, r24
    2328:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    232a:	32 97       	sbiw	r30, 0x02	; 2
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	80 83       	st	Z, r24
    2334:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
    2336:	8c 85       	ldd	r24, Y+12	; 0x0c
    2338:	9d 85       	ldd	r25, Y+13	; 0x0d
    233a:	02 97       	sbiw	r24, 0x02	; 2
    233c:	b1 f4       	brne	.+44     	; 0x236a <_ZN16CLaserControlApp7OnTimerEv+0x128>
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    233e:	32 97       	sbiw	r30, 0x02	; 2
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	89 2b       	or	r24, r25
    2346:	09 f0       	breq	.+2      	; 0x234a <_ZN16CLaserControlApp7OnTimerEv+0x108>
    2348:	4c c0       	rjmp	.+152    	; 0x23e2 <_ZN16CLaserControlApp7OnTimerEv+0x1a0>
    234a:	32 96       	adiw	r30, 0x02	; 2
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	0a 97       	sbiw	r24, 0x0a	; 10
    2352:	08 f4       	brcc	.+2      	; 0x2356 <_ZN16CLaserControlApp7OnTimerEv+0x114>
    2354:	54 c0       	rjmp	.+168    	; 0x23fe <_ZN16CLaserControlApp7OnTimerEv+0x1bc>
    2356:	45 c0       	rjmp	.+138    	; 0x23e2 <_ZN16CLaserControlApp7OnTimerEv+0x1a0>
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    2358:	fe 01       	movw	r30, r28
    235a:	e8 5e       	subi	r30, 0xE8	; 232
    235c:	fe 4f       	sbci	r31, 0xFE	; 254
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	05 97       	sbiw	r24, 0x05	; 5
    2364:	08 f4       	brcc	.+2      	; 0x2368 <_ZN16CLaserControlApp7OnTimerEv+0x126>
    2366:	54 c0       	rjmp	.+168    	; 0x2410 <_ZN16CLaserControlApp7OnTimerEv+0x1ce>
    2368:	61 c0       	rjmp	.+194    	; 0x242c <_ZN16CLaserControlApp7OnTimerEv+0x1ea>
					//player.beep(1000, 25);
					}
			}
			// ************************************
		}
		m_wMillSec-=10;
    236a:	fe 01       	movw	r30, r28
    236c:	e6 5e       	subi	r30, 0xE6	; 230
    236e:	fe 4f       	sbci	r31, 0xFE	; 254
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	0a 97       	sbiw	r24, 0x0a	; 10
    2376:	80 83       	st	Z, r24
    2378:	91 83       	std	Z+1, r25	; 0x01
	}
	
	// Flow sensor
	{
		static uint16_t millsec = 100;
		if (millsec == 0)
    237a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    237e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    2382:	89 2b       	or	r24, r25
    2384:	21 f5       	brne	.+72     	; 0x23ce <_ZN16CLaserControlApp7OnTimerEv+0x18c>
		{
			millsec = 100;
    2386:	84 e6       	ldi	r24, 0x64	; 100
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    238e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
			
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    2392:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    2396:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    239a:	49 e4       	ldi	r20, 0x49	; 73
    239c:	48 9f       	mul	r20, r24
    239e:	90 01       	movw	r18, r0
    23a0:	49 9f       	mul	r20, r25
    23a2:	30 0d       	add	r19, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	a5 ec       	ldi	r26, 0xC5	; 197
    23a8:	be e4       	ldi	r27, 0x4E	; 78
    23aa:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    23ae:	96 95       	lsr	r25
    23b0:	87 95       	ror	r24
    23b2:	92 95       	swap	r25
    23b4:	82 95       	swap	r24
    23b6:	8f 70       	andi	r24, 0x0F	; 15
    23b8:	89 27       	eor	r24, r25
    23ba:	9f 70       	andi	r25, 0x0F	; 15
    23bc:	89 27       	eor	r24, r25
    23be:	c0 5e       	subi	r28, 0xE0	; 224
    23c0:	de 4f       	sbci	r29, 0xFE	; 254
    23c2:	88 83       	st	Y, r24
    23c4:	99 83       	std	Y+1, r25	; 0x01
			flowtimer.Reset();
    23c6:	85 e1       	ldi	r24, 0x15	; 21
    23c8:	96 e2       	ldi	r25, 0x26	; 38
    23ca:	0e 94 bc 38 	call	0x7178	; 0x7178 <_ZN8CTimerC15ResetEv>
		}
		millsec-=10;
    23ce:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    23d2:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    23d6:	0a 97       	sbiw	r24, 0x0a	; 10
    23d8:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    23dc:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    23e0:	33 c0       	rjmp	.+102    	; 0x2448 <_ZN16CLaserControlApp7OnTimerEv+0x206>
						//player.beep(1000, 50);
					}
				}
				else
				{
					player.SoundStart(1000, 25, 2);
    23e2:	22 e0       	ldi	r18, 0x02	; 2
    23e4:	49 e1       	ldi	r20, 0x19	; 25
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	68 ee       	ldi	r22, 0xE8	; 232
    23ea:	73 e0       	ldi	r23, 0x03	; 3
    23ec:	80 ee       	ldi	r24, 0xE0	; 224
    23ee:	95 e2       	ldi	r25, 0x25	; 37
    23f0:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    23f4:	80 ee       	ldi	r24, 0xE0	; 224
    23f6:	95 e2       	ldi	r25, 0x25	; 37
    23f8:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
    23fc:	b6 cf       	rjmp	.-148    	; 0x236a <_ZN16CLaserControlApp7OnTimerEv+0x128>
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    23fe:	fe 01       	movw	r30, r28
    2400:	ea 5e       	subi	r30, 0xEA	; 234
    2402:	fe 4f       	sbci	r31, 0xFE	; 254
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	89 2b       	or	r24, r25
    240a:	09 f4       	brne	.+2      	; 0x240e <_ZN16CLaserControlApp7OnTimerEv+0x1cc>
    240c:	a5 cf       	rjmp	.-182    	; 0x2358 <_ZN16CLaserControlApp7OnTimerEv+0x116>
    240e:	0e c0       	rjmp	.+28     	; 0x242c <_ZN16CLaserControlApp7OnTimerEv+0x1ea>
					{
						player.SoundStart(1000, 100, 2);
    2410:	22 e0       	ldi	r18, 0x02	; 2
    2412:	44 e6       	ldi	r20, 0x64	; 100
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	68 ee       	ldi	r22, 0xE8	; 232
    2418:	73 e0       	ldi	r23, 0x03	; 3
    241a:	80 ee       	ldi	r24, 0xE0	; 224
    241c:	95 e2       	ldi	r25, 0x25	; 37
    241e:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2422:	80 ee       	ldi	r24, 0xE0	; 224
    2424:	95 e2       	ldi	r25, 0x25	; 37
    2426:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
    242a:	9f cf       	rjmp	.-194    	; 0x236a <_ZN16CLaserControlApp7OnTimerEv+0x128>
						//player.beep(1000, 100);
					}
					else
					{
						player.SoundStart(1000, 50, 2);
    242c:	22 e0       	ldi	r18, 0x02	; 2
    242e:	42 e3       	ldi	r20, 0x32	; 50
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	68 ee       	ldi	r22, 0xE8	; 232
    2434:	73 e0       	ldi	r23, 0x03	; 3
    2436:	80 ee       	ldi	r24, 0xE0	; 224
    2438:	95 e2       	ldi	r25, 0x25	; 37
    243a:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    243e:	80 ee       	ldi	r24, 0xE0	; 224
    2440:	95 e2       	ldi	r25, 0x25	; 37
    2442:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
    2446:	91 cf       	rjmp	.-222    	; 0x236a <_ZN16CLaserControlApp7OnTimerEv+0x128>
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
			flowtimer.Reset();
		}
		millsec-=10;
	}
}
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

0000244e <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    244e:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN16CLaserControlApp7OnTimerEv>
    2452:	08 95       	ret

00002454 <_ZN16CLaserControlApp9StopLaserEv>:
	}
}

void CLaserControlApp::StopLaser()
{
	laserTimer.Stop();
    2454:	88 e1       	ldi	r24, 0x18	; 24
    2456:	96 e2       	ldi	r25, 0x26	; 38
    2458:	0e 94 e3 3a 	call	0x75c6	; 0x75c6 <_ZN7CTimerF4StopEv>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    245c:	60 e1       	ldi	r22, 0x10	; 16
    245e:	88 e1       	ldi	r24, 0x18	; 24
    2460:	96 e2       	ldi	r25, 0x26	; 38
    2462:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    2466:	60 e2       	ldi	r22, 0x20	; 32
    2468:	88 e1       	ldi	r24, 0x18	; 24
    246a:	96 e2       	ldi	r25, 0x26	; 38
    246c:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	PORTF.OUTSET = PIN0_bm;
    2470:	e0 ea       	ldi	r30, 0xA0	; 160
    2472:	f6 e0       	ldi	r31, 0x06	; 6
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	85 83       	std	Z+5, r24	; 0x05
	PORTF.OUTSET = PIN1_bm;
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	85 83       	std	Z+5, r24	; 0x05
    247c:	08 95       	ret

0000247e <_ZN16CLaserControlApp3RunEv>:
	uint16_t data = ((uint16_t)((laserPower * 1024) / MAX_LASER_POWER)) << 2;  // (laserPower * 640) / 63)
	dacSPI.Send((uint8_t*)&data, sizeof(data));
}

void CLaserControlApp::Run()
{	
    247e:	6f 92       	push	r6
    2480:	7f 92       	push	r7
    2482:	8f 92       	push	r8
    2484:	9f 92       	push	r9
    2486:	af 92       	push	r10
    2488:	bf 92       	push	r11
    248a:	cf 92       	push	r12
    248c:	df 92       	push	r13
    248e:	ef 92       	push	r14
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	64 97       	sbiw	r28, 0x14	; 20
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    24a6:	8c 01       	movw	r16, r24
    24a8:	0c 5d       	subi	r16, 0xDC	; 220
    24aa:	1e 4f       	sbci	r17, 0xFE	; 254
    24ac:	42 e0       	ldi	r20, 0x02	; 2
    24ae:	63 e0       	ldi	r22, 0x03	; 3
    24b0:	d8 01       	movw	r26, r16
    24b2:	8d 91       	ld	r24, X+
    24b4:	9c 91       	ld	r25, X
    24b6:	0e 94 47 34 	call	0x688e	; 0x688e <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    24ba:	f8 01       	movw	r30, r16
    24bc:	80 81       	ld	r24, Z
    24be:	91 81       	ldd	r25, Z+1	; 0x01
    24c0:	0e 94 36 34 	call	0x686c	; 0x686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    24c4:	d8 01       	movw	r26, r16
    24c6:	8d 91       	ld	r24, X+
    24c8:	9c 91       	ld	r25, X
    24ca:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24ce:	bf ef       	ldi	r27, 0xFF	; 255
    24d0:	e9 ef       	ldi	r30, 0xF9	; 249
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	b1 50       	subi	r27, 0x01	; 1
    24d6:	e0 40       	sbci	r30, 0x00	; 0
    24d8:	f0 40       	sbci	r31, 0x00	; 0
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <_ZN16CLaserControlApp3RunEv+0x56>
    24dc:	00 c0       	rjmp	.+0      	; 0x24de <_ZN16CLaserControlApp3RunEv+0x60>
    24de:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    24e0:	d7 01       	movw	r26, r14
    24e2:	1c 96       	adiw	r26, 0x0c	; 12
    24e4:	8d 91       	ld	r24, X+
    24e6:	9c 91       	ld	r25, X
    24e8:	1d 97       	sbiw	r26, 0x0d	; 13
    24ea:	9f 70       	andi	r25, 0x0F	; 15
    24ec:	89 2b       	or	r24, r25
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <_ZN16CLaserControlApp3RunEv+0x74>
    24f0:	41 c0       	rjmp	.+130    	; 0x2574 <_ZN16CLaserControlApp3RunEv+0xf6>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    24f2:	22 e0       	ldi	r18, 0x02	; 2
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	44 eb       	ldi	r20, 0xB4	; 180
    24f8:	54 e2       	ldi	r21, 0x24	; 36
    24fa:	6c e0       	ldi	r22, 0x0C	; 12
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	c7 01       	movw	r24, r14
    2500:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    2504:	f7 01       	movw	r30, r14
    2506:	e0 5e       	subi	r30, 0xE0	; 224
    2508:	fe 4f       	sbci	r31, 0xFE	; 254
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	44 97       	sbiw	r24, 0x14	; 20
    2510:	28 f4       	brcc	.+10     	; 0x251c <_ZN16CLaserControlApp3RunEv+0x9e>
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	70 97       	sbiw	r30, 0x10	; 16
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    251c:	f7 01       	movw	r30, r14
    251e:	e0 5e       	subi	r30, 0xE0	; 224
    2520:	fe 4f       	sbci	r31, 0xFE	; 254
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	44 97       	sbiw	r24, 0x14	; 20
    2528:	28 f0       	brcs	.+10     	; 0x2534 <_ZN16CLaserControlApp3RunEv+0xb6>
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	89 97       	sbiw	r24, 0x29	; 41
    2530:	08 f4       	brcc	.+2      	; 0x2534 <_ZN16CLaserControlApp3RunEv+0xb6>
    2532:	67 c5       	rjmp	.+2766   	; 0x3002 <_ZN16CLaserControlApp3RunEv+0xb84>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    2534:	f7 01       	movw	r30, r14
    2536:	e0 5e       	subi	r30, 0xE0	; 224
    2538:	fe 4f       	sbci	r31, 0xFE	; 254
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	89 97       	sbiw	r24, 0x29	; 41
    2540:	28 f0       	brcs	.+10     	; 0x254c <_ZN16CLaserControlApp3RunEv+0xce>
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	70 97       	sbiw	r30, 0x10	; 16
    2548:	80 83       	st	Z, r24
    254a:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    254c:	22 e0       	ldi	r18, 0x02	; 2
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	a7 01       	movw	r20, r14
    2552:	40 5f       	subi	r20, 0xF0	; 240
    2554:	5e 4f       	sbci	r21, 0xFE	; 254
    2556:	63 e1       	ldi	r22, 0x13	; 19
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	c7 01       	movw	r24, r14
    255c:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    2560:	22 e0       	ldi	r18, 0x02	; 2
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	a7 01       	movw	r20, r14
    2566:	40 5e       	subi	r20, 0xE0	; 224
    2568:	5e 4f       	sbci	r21, 0xFE	; 254
    256a:	6e e0       	ldi	r22, 0x0E	; 14
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	c7 01       	movw	r24, r14
    2570:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    2574:	f7 01       	movw	r30, r14
    2576:	84 85       	ldd	r24, Z+12	; 0x0c
    2578:	95 85       	ldd	r25, Z+13	; 0x0d
    257a:	88 73       	andi	r24, 0x38	; 56
    257c:	99 27       	eor	r25, r25
    257e:	89 2b       	or	r24, r25
    2580:	e1 f0       	breq	.+56     	; 0x25ba <_ZN16CLaserControlApp3RunEv+0x13c>
	{
		if (temperature > 300)
    2582:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2586:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    258a:	8d 32       	cpi	r24, 0x2D	; 45
    258c:	91 40       	sbci	r25, 0x01	; 1
    258e:	ac f0       	brlt	.+42     	; 0x25ba <_ZN16CLaserControlApp3RunEv+0x13c>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    2590:	69 e2       	ldi	r22, 0x29	; 41
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	c7 01       	movw	r24, r14
    2596:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    259a:	d7 01       	movw	r26, r14
    259c:	1f 96       	adiw	r26, 0x0f	; 15
    259e:	8c 91       	ld	r24, X
    25a0:	1f 97       	sbiw	r26, 0x0f	; 15
    25a2:	50 96       	adiw	r26, 0x10	; 16
    25a4:	8c 93       	st	X, r24
			
			//if (isstarted)
			{
				StopLaser();
    25a6:	c7 01       	movw	r24, r14
    25a8:	0e 94 2a 12 	call	0x2454	; 0x2454 <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    25ac:	81 ee       	ldi	r24, 0xE1	; 225
    25ae:	95 e2       	ldi	r25, 0x25	; 37
    25b0:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <_ZN11CLaserBoard13LaserPowerOffEv>
				PIC_ID_last = PICID_WORK_PREPARE;
    25b4:	87 e0       	ldi	r24, 0x07	; 7
    25b6:	f7 01       	movw	r30, r14
    25b8:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	/*if ((state & (APP_WORKPOWERON | APP_WORKLIGHT)) == 0)
		isstarted = false;*/
	
	switch (state)
    25ba:	d7 01       	movw	r26, r14
    25bc:	1c 96       	adiw	r26, 0x0c	; 12
    25be:	8d 91       	ld	r24, X+
    25c0:	9c 91       	ld	r25, X
    25c2:	1d 97       	sbiw	r26, 0x0d	; 13
    25c4:	81 15       	cp	r24, r1
    25c6:	b2 e0       	ldi	r27, 0x02	; 2
    25c8:	9b 07       	cpc	r25, r27
    25ca:	09 f4       	brne	.+2      	; 0x25ce <_ZN16CLaserControlApp3RunEv+0x150>
    25cc:	45 c4       	rjmp	.+2186   	; 0x2e58 <_ZN16CLaserControlApp3RunEv+0x9da>
    25ce:	1c f5       	brge	.+70     	; 0x2616 <_ZN16CLaserControlApp3RunEv+0x198>
    25d0:	88 30       	cpi	r24, 0x08	; 8
    25d2:	91 05       	cpc	r25, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <_ZN16CLaserControlApp3RunEv+0x15a>
    25d6:	54 c3       	rjmp	.+1704   	; 0x2c80 <_ZN16CLaserControlApp3RunEv+0x802>
    25d8:	64 f4       	brge	.+24     	; 0x25f2 <_ZN16CLaserControlApp3RunEv+0x174>
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	91 05       	cpc	r25, r1
    25de:	09 f4       	brne	.+2      	; 0x25e2 <_ZN16CLaserControlApp3RunEv+0x164>
    25e0:	e5 c2       	rjmp	.+1482   	; 0x2bac <_ZN16CLaserControlApp3RunEv+0x72e>
    25e2:	84 30       	cpi	r24, 0x04	; 4
    25e4:	91 05       	cpc	r25, r1
    25e6:	09 f4       	brne	.+2      	; 0x25ea <_ZN16CLaserControlApp3RunEv+0x16c>
    25e8:	51 c0       	rjmp	.+162    	; 0x268c <_ZN16CLaserControlApp3RunEv+0x20e>
    25ea:	89 2b       	or	r24, r25
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <_ZN16CLaserControlApp3RunEv+0x172>
    25ee:	f3 c4       	rjmp	.+2534   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
    25f0:	42 c0       	rjmp	.+132    	; 0x2676 <_ZN16CLaserControlApp3RunEv+0x1f8>
    25f2:	80 32       	cpi	r24, 0x20	; 32
    25f4:	91 05       	cpc	r25, r1
    25f6:	09 f4       	brne	.+2      	; 0x25fa <_ZN16CLaserControlApp3RunEv+0x17c>
    25f8:	57 c3       	rjmp	.+1710   	; 0x2ca8 <_ZN16CLaserControlApp3RunEv+0x82a>
    25fa:	24 f4       	brge	.+8      	; 0x2604 <_ZN16CLaserControlApp3RunEv+0x186>
    25fc:	40 97       	sbiw	r24, 0x10	; 16
    25fe:	09 f4       	brne	.+2      	; 0x2602 <_ZN16CLaserControlApp3RunEv+0x184>
    2600:	53 c3       	rjmp	.+1702   	; 0x2ca8 <_ZN16CLaserControlApp3RunEv+0x82a>
    2602:	e9 c4       	rjmp	.+2514   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
    2604:	80 34       	cpi	r24, 0x40	; 64
    2606:	91 05       	cpc	r25, r1
    2608:	09 f4       	brne	.+2      	; 0x260c <_ZN16CLaserControlApp3RunEv+0x18e>
    260a:	05 c3       	rjmp	.+1546   	; 0x2c16 <_ZN16CLaserControlApp3RunEv+0x798>
    260c:	81 15       	cp	r24, r1
    260e:	91 40       	sbci	r25, 0x01	; 1
    2610:	09 f4       	brne	.+2      	; 0x2614 <_ZN16CLaserControlApp3RunEv+0x196>
    2612:	e0 c3       	rjmp	.+1984   	; 0x2dd4 <_ZN16CLaserControlApp3RunEv+0x956>
    2614:	e0 c4       	rjmp	.+2496   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
    2616:	81 15       	cp	r24, r1
    2618:	27 e0       	ldi	r18, 0x07	; 7
    261a:	92 07       	cpc	r25, r18
    261c:	09 f4       	brne	.+2      	; 0x2620 <_ZN16CLaserControlApp3RunEv+0x1a2>
    261e:	b1 c3       	rjmp	.+1890   	; 0x2d82 <_ZN16CLaserControlApp3RunEv+0x904>
    2620:	ac f4       	brge	.+42     	; 0x264c <_ZN16CLaserControlApp3RunEv+0x1ce>
    2622:	81 15       	cp	r24, r1
    2624:	b4 e0       	ldi	r27, 0x04	; 4
    2626:	9b 07       	cpc	r25, r27
    2628:	09 f4       	brne	.+2      	; 0x262c <_ZN16CLaserControlApp3RunEv+0x1ae>
    262a:	48 c4       	rjmp	.+2192   	; 0x2ebc <_ZN16CLaserControlApp3RunEv+0xa3e>
    262c:	2c f4       	brge	.+10     	; 0x2638 <_ZN16CLaserControlApp3RunEv+0x1ba>
    262e:	81 15       	cp	r24, r1
    2630:	93 40       	sbci	r25, 0x03	; 3
    2632:	09 f4       	brne	.+2      	; 0x2636 <_ZN16CLaserControlApp3RunEv+0x1b8>
    2634:	1a c4       	rjmp	.+2100   	; 0x2e6a <_ZN16CLaserControlApp3RunEv+0x9ec>
    2636:	cf c4       	rjmp	.+2462   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
    2638:	81 15       	cp	r24, r1
    263a:	25 e0       	ldi	r18, 0x05	; 5
    263c:	92 07       	cpc	r25, r18
    263e:	09 f4       	brne	.+2      	; 0x2642 <_ZN16CLaserControlApp3RunEv+0x1c4>
    2640:	ba c3       	rjmp	.+1908   	; 0x2db6 <_ZN16CLaserControlApp3RunEv+0x938>
    2642:	81 15       	cp	r24, r1
    2644:	96 40       	sbci	r25, 0x06	; 6
    2646:	09 f4       	brne	.+2      	; 0x264a <_ZN16CLaserControlApp3RunEv+0x1cc>
    2648:	8a c3       	rjmp	.+1812   	; 0x2d5e <_ZN16CLaserControlApp3RunEv+0x8e0>
    264a:	c5 c4       	rjmp	.+2442   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
    264c:	81 15       	cp	r24, r1
    264e:	b0 e2       	ldi	r27, 0x20	; 32
    2650:	9b 07       	cpc	r25, r27
    2652:	09 f4       	brne	.+2      	; 0x2656 <_ZN16CLaserControlApp3RunEv+0x1d8>
    2654:	71 c4       	rjmp	.+2274   	; 0x2f38 <_ZN16CLaserControlApp3RunEv+0xaba>
    2656:	2c f4       	brge	.+10     	; 0x2662 <_ZN16CLaserControlApp3RunEv+0x1e4>
    2658:	81 15       	cp	r24, r1
    265a:	90 41       	sbci	r25, 0x10	; 16
    265c:	09 f4       	brne	.+2      	; 0x2660 <_ZN16CLaserControlApp3RunEv+0x1e2>
    265e:	34 c4       	rjmp	.+2152   	; 0x2ec8 <_ZN16CLaserControlApp3RunEv+0xa4a>
    2660:	ba c4       	rjmp	.+2420   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
    2662:	81 15       	cp	r24, r1
    2664:	20 e3       	ldi	r18, 0x30	; 48
    2666:	92 07       	cpc	r25, r18
    2668:	09 f4       	brne	.+2      	; 0x266c <_ZN16CLaserControlApp3RunEv+0x1ee>
    266a:	93 c4       	rjmp	.+2342   	; 0x2f92 <_ZN16CLaserControlApp3RunEv+0xb14>
    266c:	81 15       	cp	r24, r1
    266e:	90 44       	sbci	r25, 0x40	; 64
    2670:	09 f4       	brne	.+2      	; 0x2674 <_ZN16CLaserControlApp3RunEv+0x1f6>
    2672:	ac c4       	rjmp	.+2392   	; 0x2fcc <_ZN16CLaserControlApp3RunEv+0xb4e>
    2674:	b0 c4       	rjmp	.+2400   	; 0x2fd6 <_ZN16CLaserControlApp3RunEv+0xb58>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    2676:	63 e0       	ldi	r22, 0x03	; 3
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	c7 01       	movw	r24, r14
    267c:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	f7 01       	movw	r30, r14
    2686:	84 87       	std	Z+12, r24	; 0x0c
    2688:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    268a:	a9 c4       	rjmp	.+2386   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_WORKSETUP:
			{
				uint16_t melanin     = laserDiodeData.melanin;
    268c:	f7 01       	movw	r30, r14
    268e:	e2 50       	subi	r30, 0x02	; 2
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 80       	ld	r6, Z
    2694:	71 80       	ldd	r7, Z+1	; 0x01
				uint16_t phototype   = laserDiodeData.phototype;
    2696:	87 01       	movw	r16, r14
    2698:	13 95       	inc	r17
    269a:	d8 01       	movw	r26, r16
    269c:	8d 90       	ld	r8, X+
    269e:	9c 90       	ld	r9, X
				uint16_t freq        = laserDiodeData.laserprofile.Frequency;
    26a0:	70 97       	sbiw	r30, 0x10	; 16
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	8b 8b       	std	Y+19, r24	; 0x13
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
				uint16_t durationCnt = laserDiodeData.laserprofile.DurationCnt;
    26aa:	32 96       	adiw	r30, 0x02	; 2
    26ac:	c0 80       	ld	r12, Z
    26ae:	d1 80       	ldd	r13, Z+1	; 0x01
				uint16_t energyCnt   = laserDiodeData.laserprofile.EnergyCnt;
    26b0:	32 96       	adiw	r30, 0x02	; 2
    26b2:	a0 80       	ld	r10, Z
    26b4:	b1 80       	ldd	r11, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    26b6:	46 e0       	ldi	r20, 0x06	; 6
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	62 e0       	ldi	r22, 0x02	; 2
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	c7 01       	movw	r24, r14
    26c0:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    26c4:	bf ef       	ldi	r27, 0xFF	; 255
    26c6:	e9 ef       	ldi	r30, 0xF9	; 249
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	b1 50       	subi	r27, 0x01	; 1
    26cc:	e0 40       	sbci	r30, 0x00	; 0
    26ce:	f0 40       	sbci	r31, 0x00	; 0
    26d0:	e1 f7       	brne	.-8      	; 0x26ca <_ZN16CLaserControlApp3RunEv+0x24c>
    26d2:	00 c0       	rjmp	.+0      	; 0x26d4 <_ZN16CLaserControlApp3RunEv+0x256>
    26d4:	00 00       	nop
				_delay_ms(10);
				GetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, sizeof(DGUS_LASERSETTINGS));
    26d6:	46 e0       	ldi	r20, 0x06	; 6
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	65 e0       	ldi	r22, 0x05	; 5
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	c7 01       	movw	r24, r14
    26e0:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    26e4:	2f ef       	ldi	r18, 0xFF	; 255
    26e6:	89 ef       	ldi	r24, 0xF9	; 249
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	21 50       	subi	r18, 0x01	; 1
    26ec:	80 40       	sbci	r24, 0x00	; 0
    26ee:	90 40       	sbci	r25, 0x00	; 0
    26f0:	e1 f7       	brne	.-8      	; 0x26ea <_ZN16CLaserControlApp3RunEv+0x26c>
    26f2:	00 c0       	rjmp	.+0      	; 0x26f4 <_ZN16CLaserControlApp3RunEv+0x276>
    26f4:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    26f6:	42 e0       	ldi	r20, 0x02	; 2
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	6d e0       	ldi	r22, 0x0D	; 13
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	c7 01       	movw	r24, r14
    2700:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    2704:	af ef       	ldi	r26, 0xFF	; 255
    2706:	b9 ef       	ldi	r27, 0xF9	; 249
    2708:	e0 e0       	ldi	r30, 0x00	; 0
    270a:	a1 50       	subi	r26, 0x01	; 1
    270c:	b0 40       	sbci	r27, 0x00	; 0
    270e:	e0 40       	sbci	r30, 0x00	; 0
    2710:	e1 f7       	brne	.-8      	; 0x270a <_ZN16CLaserControlApp3RunEv+0x28c>
    2712:	00 c0       	rjmp	.+0      	; 0x2714 <_ZN16CLaserControlApp3RunEv+0x296>
    2714:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    2716:	42 e0       	ldi	r20, 0x02	; 2
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	61 e0       	ldi	r22, 0x01	; 1
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	c7 01       	movw	r24, r14
    2720:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    2724:	ff ef       	ldi	r31, 0xFF	; 255
    2726:	29 ef       	ldi	r18, 0xF9	; 249
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	f1 50       	subi	r31, 0x01	; 1
    272c:	20 40       	sbci	r18, 0x00	; 0
    272e:	80 40       	sbci	r24, 0x00	; 0
    2730:	e1 f7       	brne	.-8      	; 0x272a <_ZN16CLaserControlApp3RunEv+0x2ac>
    2732:	00 c0       	rjmp	.+0      	; 0x2734 <_ZN16CLaserControlApp3RunEv+0x2b6>
    2734:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    2736:	42 e0       	ldi	r20, 0x02	; 2
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	6a e0       	ldi	r22, 0x0A	; 10
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	c7 01       	movw	r24, r14
    2740:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    2744:	9f ef       	ldi	r25, 0xFF	; 255
    2746:	a9 ef       	ldi	r26, 0xF9	; 249
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	91 50       	subi	r25, 0x01	; 1
    274c:	a0 40       	sbci	r26, 0x00	; 0
    274e:	b0 40       	sbci	r27, 0x00	; 0
    2750:	e1 f7       	brne	.-8      	; 0x274a <_ZN16CLaserControlApp3RunEv+0x2cc>
    2752:	00 c0       	rjmp	.+0      	; 0x2754 <_ZN16CLaserControlApp3RunEv+0x2d6>
    2754:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    2756:	42 e0       	ldi	r20, 0x02	; 2
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	6b e0       	ldi	r22, 0x0B	; 11
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	c7 01       	movw	r24, r14
    2760:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    2764:	ef ef       	ldi	r30, 0xFF	; 255
    2766:	f9 ef       	ldi	r31, 0xF9	; 249
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	e1 50       	subi	r30, 0x01	; 1
    276c:	f0 40       	sbci	r31, 0x00	; 0
    276e:	20 40       	sbci	r18, 0x00	; 0
    2770:	e1 f7       	brne	.-8      	; 0x276a <_ZN16CLaserControlApp3RunEv+0x2ec>
    2772:	00 c0       	rjmp	.+0      	; 0x2774 <_ZN16CLaserControlApp3RunEv+0x2f6>
    2774:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    2776:	f7 01       	movw	r30, r14
    2778:	e6 52       	subi	r30, 0x26	; 38
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z6swap32m>
    2788:	f7 01       	movw	r30, r14
    278a:	e6 50       	subi	r30, 0x06	; 6
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 83       	st	Z, r22
    2790:	71 83       	std	Z+1, r23	; 0x01
    2792:	82 83       	std	Z+2, r24	; 0x02
    2794:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature  = temperature;
    2796:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    279a:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    279e:	38 96       	adiw	r30, 0x08	; 8
    27a0:	80 83       	st	Z, r24
    27a2:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow         = m_wFlow;
    27a4:	7e 96       	adiw	r30, 0x1e	; 30
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	7a 97       	sbiw	r30, 0x1a	; 26
    27ac:	80 83       	st	Z, r24
    27ae:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    27b0:	d8 01       	movw	r26, r16
    27b2:	6d 91       	ld	r22, X+
    27b4:	7c 91       	ld	r23, X
    27b6:	68 15       	cp	r22, r8
    27b8:	79 05       	cpc	r23, r9
    27ba:	39 f0       	breq	.+14     	; 0x27ca <_ZN16CLaserControlApp3RunEv+0x34c>
				{
					PhototypePreset(laserDiodeData.phototype);
    27bc:	c7 01       	movw	r24, r14
    27be:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	f7 01       	movw	r30, r14
    27c6:	81 8b       	std	Z+17, r24	; 0x11
    27c8:	4a c0       	rjmp	.+148    	; 0x285e <_ZN16CLaserControlApp3RunEv+0x3e0>
				}
				else
				if (melanin != laserDiodeData.melanin)
    27ca:	f7 01       	movw	r30, r14
    27cc:	e2 50       	subi	r30, 0x02	; 2
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	66 15       	cp	r22, r6
    27d6:	77 05       	cpc	r23, r7
    27d8:	41 f0       	breq	.+16     	; 0x27ea <_ZN16CLaserControlApp3RunEv+0x36c>
				{
					MelaninPreset(laserDiodeData.melanin);
    27da:	c7 01       	movw	r24, r14
    27dc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	d7 01       	movw	r26, r14
    27e4:	51 96       	adiw	r26, 0x11	; 17
    27e6:	8c 93       	st	X, r24
    27e8:	3a c0       	rjmp	.+116    	; 0x285e <_ZN16CLaserControlApp3RunEv+0x3e0>
				}
				else
				if (Profile != (APP_PROFILE)laserDiodeData.mode)
    27ea:	f7 01       	movw	r30, r14
    27ec:	e4 51       	subi	r30, 0x14	; 20
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	01 90       	ld	r0, Z+
    27f2:	f0 81       	ld	r31, Z
    27f4:	e0 2d       	mov	r30, r0
    27f6:	d7 01       	movw	r26, r14
    27f8:	1e 96       	adiw	r26, 0x0e	; 14
    27fa:	8c 91       	ld	r24, X
    27fc:	1e 97       	sbiw	r26, 0x0e	; 14
    27fe:	8e 17       	cp	r24, r30
    2800:	71 f1       	breq	.+92     	; 0x285e <_ZN16CLaserControlApp3RunEv+0x3e0>
				{
					Profile = (APP_PROFILE)laserDiodeData.mode;
    2802:	1e 96       	adiw	r26, 0x0e	; 14
    2804:	ec 93       	st	X, r30
    2806:	1e 97       	sbiw	r26, 0x0e	; 14
    2808:	9f 01       	movw	r18, r30
    280a:	33 27       	eor	r19, r19
					// Update profile
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    280c:	a9 01       	movw	r20, r18
    280e:	44 0f       	add	r20, r20
    2810:	55 1f       	adc	r21, r21
    2812:	ca 01       	movw	r24, r20
    2814:	82 0f       	add	r24, r18
    2816:	93 1f       	adc	r25, r19
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	8a 56       	subi	r24, 0x6A	; 106
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	f7 01       	movw	r30, r14
    2822:	e8 0f       	add	r30, r24
    2824:	f9 1f       	adc	r31, r25
    2826:	66 e0       	ldi	r22, 0x06	; 6
    2828:	a2 51       	subi	r26, 0x12	; 18
    282a:	bf 4f       	sbci	r27, 0xFF	; 255
    282c:	01 90       	ld	r0, Z+
    282e:	0d 92       	st	X+, r0
    2830:	6a 95       	dec	r22
    2832:	e1 f7       	brne	.-8      	; 0x282c <_ZN16CLaserControlApp3RunEv+0x3ae>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2834:	fa 01       	movw	r30, r20
    2836:	e2 0f       	add	r30, r18
    2838:	f3 1f       	adc	r31, r19
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	ec 54       	subi	r30, 0x4C	; 76
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	ee 0d       	add	r30, r14
    2844:	ff 1d       	adc	r31, r15
    2846:	86 e0       	ldi	r24, 0x06	; 6
    2848:	d7 01       	movw	r26, r14
    284a:	ac 50       	subi	r26, 0x0C	; 12
    284c:	bf 4f       	sbci	r27, 0xFF	; 255
    284e:	01 90       	ld	r0, Z+
    2850:	0d 92       	st	X+, r0
    2852:	8a 95       	dec	r24
    2854:	e1 f7       	brne	.-8      	; 0x284e <_ZN16CLaserControlApp3RunEv+0x3d0>
					
					update = true;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	f7 01       	movw	r30, r14
    285a:	81 8b       	std	Z+17, r24	; 0x11
    285c:	c0 c3       	rjmp	.+1920   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
					break;
				}
				
				uint16_t duration = durationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    285e:	d7 01       	movw	r26, r14
    2860:	1e 96       	adiw	r26, 0x0e	; 14
    2862:	8c 91       	ld	r24, X
    2864:	f7 01       	movw	r30, r14
    2866:	ba e1       	ldi	r27, 0x1A	; 26
    2868:	8b 9f       	mul	r24, r27
    286a:	e0 0d       	add	r30, r0
    286c:	f1 1d       	adc	r31, r1
    286e:	11 24       	eor	r1, r1
    2870:	80 a5       	ldd	r24, Z+40	; 0x28
    2872:	91 a5       	ldd	r25, Z+41	; 0x29
    2874:	c8 9e       	mul	r12, r24
    2876:	90 01       	movw	r18, r0
    2878:	c9 9e       	mul	r12, r25
    287a:	30 0d       	add	r19, r0
    287c:	d8 9e       	mul	r13, r24
    287e:	30 0d       	add	r19, r0
    2880:	11 24       	eor	r1, r1
    2882:	86 a1       	ldd	r24, Z+38	; 0x26
    2884:	97 a1       	ldd	r25, Z+39	; 0x27
    2886:	82 0f       	add	r24, r18
    2888:	93 1f       	adc	r25, r19
    288a:	89 8b       	std	Y+17, r24	; 0x11
    288c:	9a 8b       	std	Y+18, r25	; 0x12
				uint16_t energy   = energyCnt   * pstGUI[Profile].m_wEnergyStep   + pstGUI[Profile].m_wEnergyOffset;
    288e:	82 a1       	ldd	r24, Z+34	; 0x22
    2890:	93 a1       	ldd	r25, Z+35	; 0x23
    2892:	a8 9e       	mul	r10, r24
    2894:	90 01       	movw	r18, r0
    2896:	a9 9e       	mul	r10, r25
    2898:	30 0d       	add	r19, r0
    289a:	b8 9e       	mul	r11, r24
    289c:	30 0d       	add	r19, r0
    289e:	11 24       	eor	r1, r1
    28a0:	80 a1       	ldd	r24, Z+32	; 0x20
    28a2:	91 a1       	ldd	r25, Z+33	; 0x21
    28a4:	82 0f       	add	r24, r18
    28a6:	93 1f       	adc	r25, r19
    28a8:	8d 87       	std	Y+13, r24	; 0x0d
    28aa:	9e 87       	std	Y+14, r25	; 0x0e
				
				if (freq != laserDiodeData.laserprofile.Frequency)
    28ac:	f7 01       	movw	r30, r14
    28ae:	e2 51       	subi	r30, 0x12	; 18
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	2b 89       	ldd	r18, Y+19	; 0x13
    28b8:	3c 89       	ldd	r19, Y+20	; 0x14
    28ba:	82 17       	cp	r24, r18
    28bc:	93 07       	cpc	r25, r19
    28be:	79 f0       	breq	.+30     	; 0x28de <_ZN16CLaserControlApp3RunEv+0x460>
				{
					freq = laserDiodeData.laserprofile.Frequency;
    28c0:	8b 8b       	std	Y+19, r24	; 0x13
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
					
					if (FreqLimits(freq, (APP_PROFILE)laserDiodeData.mode))
    28c4:	32 97       	sbiw	r30, 0x02	; 2
    28c6:	40 81       	ld	r20, Z
    28c8:	be 01       	movw	r22, r28
    28ca:	6d 5e       	subi	r22, 0xED	; 237
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	c7 01       	movw	r24, r14
    28d0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>
    28d4:	88 23       	and	r24, r24
    28d6:	19 f0       	breq	.+6      	; 0x28de <_ZN16CLaserControlApp3RunEv+0x460>
					{
						//laserDiodeData.laserprofile.Frequency = freq;
						update = true;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	f7 01       	movw	r30, r14
    28dc:	81 8b       	std	Z+17, r24	; 0x11
					}
				}
				
				UpdateLimits(freq, duration, energy, Profile);
    28de:	2d 85       	ldd	r18, Y+13	; 0x0d
    28e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    28e2:	49 89       	ldd	r20, Y+17	; 0x11
    28e4:	5a 89       	ldd	r21, Y+18	; 0x12
    28e6:	6b 89       	ldd	r22, Y+19	; 0x13
    28e8:	7c 89       	ldd	r23, Y+20	; 0x14
    28ea:	d7 01       	movw	r26, r14
    28ec:	1e 96       	adiw	r26, 0x0e	; 14
    28ee:	0c 91       	ld	r16, X
    28f0:	c7 01       	movw	r24, r14
    28f2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
				
				if (durationCnt != laserDiodeData.laserprofile.DurationCnt)
    28f6:	f7 01       	movw	r30, r14
    28f8:	e0 51       	subi	r30, 0x10	; 16
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	20 81       	ld	r18, Z
    28fe:	31 81       	ldd	r19, Z+1	; 0x01
    2900:	2c 15       	cp	r18, r12
    2902:	3d 05       	cpc	r19, r13
    2904:	09 f4       	brne	.+2      	; 0x2908 <_ZN16CLaserControlApp3RunEv+0x48a>
    2906:	5a c0       	rjmp	.+180    	; 0x29bc <_ZN16CLaserControlApp3RunEv+0x53e>
				{					
					if (Profile == PROFILE_FAST)
    2908:	f7 01       	movw	r30, r14
    290a:	86 85       	ldd	r24, Z+14	; 0x0e
    290c:	84 30       	cpi	r24, 0x04	; 4
    290e:	29 f4       	brne	.+10     	; 0x291a <_ZN16CLaserControlApp3RunEv+0x49c>
						laserDiodeData.laserprofile.DurationCnt = durationCnt; // Disable duration when FAST mode
    2910:	e0 51       	subi	r30, 0x10	; 16
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	c0 82       	st	Z, r12
    2916:	d1 82       	std	Z+1, r13	; 0x01
    2918:	4d c0       	rjmp	.+154    	; 0x29b4 <_ZN16CLaserControlApp3RunEv+0x536>
					else
					{
						duration = laserDiodeData.laserprofile.DurationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    291a:	48 2f       	mov	r20, r24
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	f7 01       	movw	r30, r14
    2920:	9a e1       	ldi	r25, 0x1A	; 26
    2922:	89 9f       	mul	r24, r25
    2924:	e0 0d       	add	r30, r0
    2926:	f1 1d       	adc	r31, r1
    2928:	11 24       	eor	r1, r1
    292a:	80 a5       	ldd	r24, Z+40	; 0x28
    292c:	91 a5       	ldd	r25, Z+41	; 0x29
    292e:	28 9f       	mul	r18, r24
    2930:	b0 01       	movw	r22, r0
    2932:	29 9f       	mul	r18, r25
    2934:	70 0d       	add	r23, r0
    2936:	38 9f       	mul	r19, r24
    2938:	70 0d       	add	r23, r0
    293a:	11 24       	eor	r1, r1
    293c:	86 a1       	ldd	r24, Z+38	; 0x26
    293e:	97 a1       	ldd	r25, Z+39	; 0x27
    2940:	86 0f       	add	r24, r22
    2942:	97 1f       	adc	r25, r23
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	9a 8b       	std	Y+18, r25	; 0x12
						
						// Check limit
						if ((duration <= pstGUI[Profile].m_wMaxDuration) && (duration >= pstGUI[Profile].m_wMinDuration))
    2948:	20 8d       	ldd	r18, Z+24	; 0x18
    294a:	31 8d       	ldd	r19, Z+25	; 0x19
    294c:	28 17       	cp	r18, r24
    294e:	39 07       	cpc	r19, r25
    2950:	60 f1       	brcs	.+88     	; 0x29aa <_ZN16CLaserControlApp3RunEv+0x52c>
    2952:	9a 01       	movw	r18, r20
    2954:	2f 5f       	subi	r18, 0xFF	; 255
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	6a e1       	ldi	r22, 0x1A	; 26
    295a:	62 9f       	mul	r22, r18
    295c:	f0 01       	movw	r30, r0
    295e:	63 9f       	mul	r22, r19
    2960:	f0 0d       	add	r31, r0
    2962:	11 24       	eor	r1, r1
    2964:	ee 0d       	add	r30, r14
    2966:	ff 1d       	adc	r31, r15
    2968:	20 81       	ld	r18, Z
    296a:	31 81       	ldd	r19, Z+1	; 0x01
    296c:	82 17       	cp	r24, r18
    296e:	93 07       	cpc	r25, r19
    2970:	e0 f0       	brcs	.+56     	; 0x29aa <_ZN16CLaserControlApp3RunEv+0x52c>
						{
							if (pstGUI[Profile].updateDuration)
    2972:	8a e1       	ldi	r24, 0x1A	; 26
    2974:	84 9f       	mul	r24, r20
    2976:	f0 01       	movw	r30, r0
    2978:	85 9f       	mul	r24, r21
    297a:	f0 0d       	add	r31, r0
    297c:	11 24       	eor	r1, r1
    297e:	ee 0d       	add	r30, r14
    2980:	ff 1d       	adc	r31, r15
    2982:	84 a5       	ldd	r24, Z+44	; 0x2c
    2984:	88 23       	and	r24, r24
    2986:	49 f0       	breq	.+18     	; 0x299a <_ZN16CLaserControlApp3RunEv+0x51c>
								CalculateDurationSteps(freq, duration);
    2988:	ae 01       	movw	r20, r28
    298a:	4f 5e       	subi	r20, 0xEF	; 239
    298c:	5f 4f       	sbci	r21, 0xFF	; 255
    298e:	be 01       	movw	r22, r28
    2990:	6d 5e       	subi	r22, 0xED	; 237
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	c7 01       	movw	r24, r14
    2996:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>
							laserDiodeData.lasersettings.Duration = duration;
    299a:	89 89       	ldd	r24, Y+17	; 0x11
    299c:	9a 89       	ldd	r25, Y+18	; 0x12
    299e:	f7 01       	movw	r30, r14
    29a0:	ea 50       	subi	r30, 0x0A	; 10
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 83       	st	Z, r24
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	05 c0       	rjmp	.+10     	; 0x29b4 <_ZN16CLaserControlApp3RunEv+0x536>
						}
						else
							laserDiodeData.laserprofile.DurationCnt = durationCnt; // Cancel change if out
    29aa:	f7 01       	movw	r30, r14
    29ac:	e0 51       	subi	r30, 0x10	; 16
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	c0 82       	st	Z, r12
    29b2:	d1 82       	std	Z+1, r13	; 0x01
					}
					update = true;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	d7 01       	movw	r26, r14
    29b8:	51 96       	adiw	r26, 0x11	; 17
    29ba:	8c 93       	st	X, r24
				}
				if (energyCnt != laserDiodeData.laserprofile.EnergyCnt)
    29bc:	f7 01       	movw	r30, r14
    29be:	ee 50       	subi	r30, 0x0E	; 14
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	40 81       	ld	r20, Z
    29c4:	51 81       	ldd	r21, Z+1	; 0x01
    29c6:	4a 15       	cp	r20, r10
    29c8:	5b 05       	cpc	r21, r11
    29ca:	09 f4       	brne	.+2      	; 0x29ce <_ZN16CLaserControlApp3RunEv+0x550>
    29cc:	66 c0       	rjmp	.+204    	; 0x2a9a <_ZN16CLaserControlApp3RunEv+0x61c>
				{
					energy = laserDiodeData.laserprofile.EnergyCnt * pstGUI[Profile].m_wEnergyStep + pstGUI[Profile].m_wEnergyOffset;
    29ce:	f7 01       	movw	r30, r14
    29d0:	26 85       	ldd	r18, Z+14	; 0x0e
    29d2:	62 2f       	mov	r22, r18
    29d4:	70 e0       	ldi	r23, 0x00	; 0
    29d6:	8a e1       	ldi	r24, 0x1A	; 26
    29d8:	28 9f       	mul	r18, r24
    29da:	e0 0d       	add	r30, r0
    29dc:	f1 1d       	adc	r31, r1
    29de:	11 24       	eor	r1, r1
    29e0:	82 a1       	ldd	r24, Z+34	; 0x22
    29e2:	93 a1       	ldd	r25, Z+35	; 0x23
    29e4:	48 9f       	mul	r20, r24
    29e6:	d0 01       	movw	r26, r0
    29e8:	49 9f       	mul	r20, r25
    29ea:	b0 0d       	add	r27, r0
    29ec:	58 9f       	mul	r21, r24
    29ee:	b0 0d       	add	r27, r0
    29f0:	11 24       	eor	r1, r1
    29f2:	80 a1       	ldd	r24, Z+32	; 0x20
    29f4:	91 a1       	ldd	r25, Z+33	; 0x21
    29f6:	8a 0f       	add	r24, r26
    29f8:	9b 1f       	adc	r25, r27
    29fa:	8d 87       	std	Y+13, r24	; 0x0d
    29fc:	9e 87       	std	Y+14, r25	; 0x0e
					
					if (Profile == PROFILE_FAST)
    29fe:	24 30       	cpi	r18, 0x04	; 4
    2a00:	69 f4       	brne	.+26     	; 0x2a1c <_ZN16CLaserControlApp3RunEv+0x59e>
						CheckLimitsFastMode(freq, duration, energy);
    2a02:	9e 01       	movw	r18, r28
    2a04:	23 5f       	subi	r18, 0xF3	; 243
    2a06:	3f 4f       	sbci	r19, 0xFF	; 255
    2a08:	ae 01       	movw	r20, r28
    2a0a:	4f 5e       	subi	r20, 0xEF	; 239
    2a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0e:	be 01       	movw	r22, r28
    2a10:	6d 5e       	subi	r22, 0xED	; 237
    2a12:	7f 4f       	sbci	r23, 0xFF	; 255
    2a14:	c7 01       	movw	r24, r14
    2a16:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
    2a1a:	3b c0       	rjmp	.+118    	; 0x2a92 <_ZN16CLaserControlApp3RunEv+0x614>
					else
					{
						// Check limit
						if ((energy <= pstGUI[Profile].m_wMaxEnergy_) && (energy >= pstGUI[Profile].m_wMinEnergy_))
    2a1c:	2a e1       	ldi	r18, 0x1A	; 26
    2a1e:	26 9f       	mul	r18, r22
    2a20:	f0 01       	movw	r30, r0
    2a22:	27 9f       	mul	r18, r23
    2a24:	f0 0d       	add	r31, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	ee 0d       	add	r30, r14
    2a2a:	ff 1d       	adc	r31, r15
    2a2c:	24 89       	ldd	r18, Z+20	; 0x14
    2a2e:	35 89       	ldd	r19, Z+21	; 0x15
    2a30:	28 17       	cp	r18, r24
    2a32:	39 07       	cpc	r19, r25
    2a34:	48 f1       	brcs	.+82     	; 0x2a88 <_ZN16CLaserControlApp3RunEv+0x60a>
    2a36:	2a e1       	ldi	r18, 0x1A	; 26
    2a38:	26 9f       	mul	r18, r22
    2a3a:	f0 01       	movw	r30, r0
    2a3c:	27 9f       	mul	r18, r23
    2a3e:	f0 0d       	add	r31, r0
    2a40:	11 24       	eor	r1, r1
    2a42:	ee 0d       	add	r30, r14
    2a44:	ff 1d       	adc	r31, r15
    2a46:	26 89       	ldd	r18, Z+22	; 0x16
    2a48:	37 89       	ldd	r19, Z+23	; 0x17
    2a4a:	82 17       	cp	r24, r18
    2a4c:	93 07       	cpc	r25, r19
    2a4e:	e0 f0       	brcs	.+56     	; 0x2a88 <_ZN16CLaserControlApp3RunEv+0x60a>
						{
							if (pstGUI[Profile].updateEnergy)
    2a50:	8a e1       	ldi	r24, 0x1A	; 26
    2a52:	86 9f       	mul	r24, r22
    2a54:	f0 01       	movw	r30, r0
    2a56:	87 9f       	mul	r24, r23
    2a58:	f0 0d       	add	r31, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	ee 0d       	add	r30, r14
    2a5e:	ff 1d       	adc	r31, r15
    2a60:	85 a5       	ldd	r24, Z+45	; 0x2d
    2a62:	88 23       	and	r24, r24
    2a64:	49 f0       	breq	.+18     	; 0x2a78 <_ZN16CLaserControlApp3RunEv+0x5fa>
								CalculateEnergySteps(freq, energy);
    2a66:	ae 01       	movw	r20, r28
    2a68:	43 5f       	subi	r20, 0xF3	; 243
    2a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6c:	be 01       	movw	r22, r28
    2a6e:	6d 5e       	subi	r22, 0xED	; 237
    2a70:	7f 4f       	sbci	r23, 0xFF	; 255
    2a72:	c7 01       	movw	r24, r14
    2a74:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>
							laserDiodeData.lasersettings.Energy = energy;
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	f7 01       	movw	r30, r14
    2a7e:	e8 50       	subi	r30, 0x08	; 8
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 83       	st	Z, r24
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	05 c0       	rjmp	.+10     	; 0x2a92 <_ZN16CLaserControlApp3RunEv+0x614>
						}
						else
							laserDiodeData.laserprofile.EnergyCnt = energyCnt; // Cancel change if out
    2a88:	f7 01       	movw	r30, r14
    2a8a:	ee 50       	subi	r30, 0x0E	; 14
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	a0 82       	st	Z, r10
    2a90:	b1 82       	std	Z+1, r11	; 0x01
					}
					update = true;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	d7 01       	movw	r26, r14
    2a96:	51 96       	adiw	r26, 0x11	; 17
    2a98:	8c 93       	st	X, r24
				}
				
				if (Profile != PROFILE_FAST)
    2a9a:	f7 01       	movw	r30, r14
    2a9c:	06 85       	ldd	r16, Z+14	; 0x0e
    2a9e:	04 30       	cpi	r16, 0x04	; 4
    2aa0:	69 f0       	breq	.+26     	; 0x2abc <_ZN16CLaserControlApp3RunEv+0x63e>
					CheckLimits(freq, duration, energy, Profile);
    2aa2:	9e 01       	movw	r18, r28
    2aa4:	23 5f       	subi	r18, 0xF3	; 243
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	ae 01       	movw	r20, r28
    2aaa:	4f 5e       	subi	r20, 0xEF	; 239
    2aac:	5f 4f       	sbci	r21, 0xFF	; 255
    2aae:	be 01       	movw	r22, r28
    2ab0:	6d 5e       	subi	r22, 0xED	; 237
    2ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab4:	c7 01       	movw	r24, r14
    2ab6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>
    2aba:	0c c0       	rjmp	.+24     	; 0x2ad4 <_ZN16CLaserControlApp3RunEv+0x656>
				else
					CheckLimitsFastMode(freq, duration, energy);
    2abc:	9e 01       	movw	r18, r28
    2abe:	23 5f       	subi	r18, 0xF3	; 243
    2ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac2:	ae 01       	movw	r20, r28
    2ac4:	4f 5e       	subi	r20, 0xEF	; 239
    2ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac8:	be 01       	movw	r22, r28
    2aca:	6d 5e       	subi	r22, 0xED	; 237
    2acc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ace:	c7 01       	movw	r24, r14
    2ad0:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
				
				if (Profile == PROFILE_MEDIUM)
    2ad4:	d7 01       	movw	r26, r14
    2ad6:	1e 96       	adiw	r26, 0x0e	; 14
    2ad8:	8c 91       	ld	r24, X
    2ada:	83 30       	cpi	r24, 0x03	; 3
    2adc:	81 f4       	brne	.+32     	; 0x2afe <_ZN16CLaserControlApp3RunEv+0x680>
					CalculateMultiPulseLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2ade:	a7 01       	movw	r20, r14
    2ae0:	4c 50       	subi	r20, 0x0C	; 12
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	b7 01       	movw	r22, r14
    2ae6:	62 51       	subi	r22, 0x12	; 18
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	c7 01       	movw	r24, r14
    2aec:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2af0:	2f 83       	std	Y+7, r18	; 0x07
    2af2:	38 87       	std	Y+8, r19	; 0x08
    2af4:	49 87       	std	Y+9, r20	; 0x09
    2af6:	5a 87       	std	Y+10, r21	; 0x0a
    2af8:	6b 87       	std	Y+11, r22	; 0x0b
    2afa:	7c 87       	std	Y+12, r23	; 0x0c
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <_ZN16CLaserControlApp3RunEv+0x69e>
				else
					CalculateLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2afe:	a7 01       	movw	r20, r14
    2b00:	4c 50       	subi	r20, 0x0C	; 12
    2b02:	5f 4f       	sbci	r21, 0xFF	; 255
    2b04:	b7 01       	movw	r22, r14
    2b06:	62 51       	subi	r22, 0x12	; 18
    2b08:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0a:	c7 01       	movw	r24, r14
    2b0c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2b10:	29 83       	std	Y+1, r18	; 0x01
    2b12:	3a 83       	std	Y+2, r19	; 0x02
    2b14:	4b 83       	std	Y+3, r20	; 0x03
    2b16:	5c 83       	std	Y+4, r21	; 0x04
    2b18:	6d 83       	std	Y+5, r22	; 0x05
    2b1a:	7e 83       	std	Y+6, r23	; 0x06
					
				laserPower = (uint32_t)(laserDiodeData.lasersettings.Energy * 1440ul) / (uint32_t)laserDiodeData.lasersettings.Duration; // Convert Energy J/cm2 to Power in Watts
    2b1c:	f7 01       	movw	r30, r14
    2b1e:	e8 50       	subi	r30, 0x08	; 8
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	20 81       	ld	r18, Z
    2b24:	31 81       	ldd	r19, Z+1	; 0x01
    2b26:	a0 ea       	ldi	r26, 0xA0	; 160
    2b28:	b5 e0       	ldi	r27, 0x05	; 5
    2b2a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    2b2e:	32 97       	sbiw	r30, 0x02	; 2
    2b30:	20 81       	ld	r18, Z
    2b32:	31 81       	ldd	r19, Z+1	; 0x01
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    2b3c:	f7 01       	movw	r30, r14
    2b3e:	e8 52       	subi	r30, 0x28	; 40
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	20 83       	st	Z, r18
    2b44:	31 83       	std	Z+1, r19	; 0x01
				
				// Copy data to profiles
				if (update)
    2b46:	f7 01       	movw	r30, r14
    2b48:	81 89       	ldd	r24, Z+17	; 0x11
    2b4a:	88 23       	and	r24, r24
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <_ZN16CLaserControlApp3RunEv+0x6d2>
    2b4e:	47 c2       	rjmp	.+1166   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
				{
					memcpy((void*)&m_structLaserProfile [Profile], (void*)&laserDiodeData.laserprofile , sizeof(laserDiodeData.laserprofile));
    2b50:	86 85       	ldd	r24, Z+14	; 0x0e
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	dc 01       	movw	r26, r24
    2b56:	aa 0f       	add	r26, r26
    2b58:	bb 1f       	adc	r27, r27
    2b5a:	8a 0f       	add	r24, r26
    2b5c:	9b 1f       	adc	r25, r27
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	dc 01       	movw	r26, r24
    2b64:	aa 56       	subi	r26, 0x6A	; 106
    2b66:	bf 4f       	sbci	r27, 0xFF	; 255
    2b68:	ae 0d       	add	r26, r14
    2b6a:	bf 1d       	adc	r27, r15
    2b6c:	86 e0       	ldi	r24, 0x06	; 6
    2b6e:	e2 51       	subi	r30, 0x12	; 18
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	01 90       	ld	r0, Z+
    2b74:	0d 92       	st	X+, r0
    2b76:	8a 95       	dec	r24
    2b78:	e1 f7       	brne	.-8      	; 0x2b72 <_ZN16CLaserControlApp3RunEv+0x6f4>
					memcpy((void*)&m_structLaserSettings[Profile], (void*)&laserDiodeData.lasersettings, sizeof(laserDiodeData.lasersettings));
    2b7a:	d7 01       	movw	r26, r14
    2b7c:	1e 96       	adiw	r26, 0x0e	; 14
    2b7e:	8c 91       	ld	r24, X
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	dc 01       	movw	r26, r24
    2b84:	aa 0f       	add	r26, r26
    2b86:	bb 1f       	adc	r27, r27
    2b88:	8a 0f       	add	r24, r26
    2b8a:	9b 1f       	adc	r25, r27
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	dc 01       	movw	r26, r24
    2b92:	ac 54       	subi	r26, 0x4C	; 76
    2b94:	bf 4f       	sbci	r27, 0xFF	; 255
    2b96:	ae 0d       	add	r26, r14
    2b98:	bf 1d       	adc	r27, r15
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	f7 01       	movw	r30, r14
    2b9e:	ec 50       	subi	r30, 0x0C	; 12
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	01 90       	ld	r0, Z+
    2ba4:	0d 92       	st	X+, r0
    2ba6:	8a 95       	dec	r24
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <_ZN16CLaserControlApp3RunEv+0x724>
				}
			}
		break;
    2baa:	19 c2       	rjmp	.+1074   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    2bac:	f7 01       	movw	r30, r14
    2bae:	82 89       	ldd	r24, Z+18	; 0x12
    2bb0:	88 23       	and	r24, r24
    2bb2:	b1 f0       	breq	.+44     	; 0x2be0 <_ZN16CLaserControlApp3RunEv+0x762>
				{
					timervar.timer_minutes = m_wMinutes;
    2bb4:	ea 5e       	subi	r30, 0xEA	; 234
    2bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	8d 87       	std	Y+13, r24	; 0x0d
    2bbe:	9e 87       	std	Y+14, r25	; 0x0e
					timervar.timer_seconds = m_wSeconds;
    2bc0:	32 96       	adiw	r30, 0x02	; 2
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	8f 87       	std	Y+15, r24	; 0x0f
    2bc8:	98 8b       	std	Y+16, r25	; 0x10
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    2bca:	24 e0       	ldi	r18, 0x04	; 4
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	ae 01       	movw	r20, r28
    2bd0:	43 5f       	subi	r20, 0xF3	; 243
    2bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd4:	6f e0       	ldi	r22, 0x0F	; 15
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	c7 01       	movw	r24, r14
    2bda:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
    2bde:	ff c1       	rjmp	.+1022   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    2be0:	86 85       	ldd	r24, Z+14	; 0x0e
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	ac 01       	movw	r20, r24
    2be6:	44 0f       	add	r20, r20
    2be8:	55 1f       	adc	r21, r21
    2bea:	84 0f       	add	r24, r20
    2bec:	95 1f       	adc	r25, r21
    2bee:	88 0f       	add	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	4a 56       	subi	r20, 0x6A	; 106
    2bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf8:	4e 0d       	add	r20, r14
    2bfa:	5f 1d       	adc	r21, r15
    2bfc:	26 e0       	ldi	r18, 0x06	; 6
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	62 e0       	ldi	r22, 0x02	; 2
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	c7 01       	movw	r24, r14
    2c06:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    2c0a:	6c e0       	ldi	r22, 0x0C	; 12
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	c7 01       	movw	r24, r14
    2c10:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    2c14:	e4 c1       	rjmp	.+968    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    2c16:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2c1a:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2c1e:	6a e0       	ldi	r22, 0x0A	; 10
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <__divmodhi4>
    2c26:	6d 87       	std	Y+13, r22	; 0x0d
    2c28:	7e 87       	std	Y+14, r23	; 0x0e
				timervar.timer_seconds = temperature % 10;
    2c2a:	8f 87       	std	Y+15, r24	; 0x0f
    2c2c:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    2c2e:	24 e0       	ldi	r18, 0x04	; 4
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	ae 01       	movw	r20, r28
    2c34:	43 5f       	subi	r20, 0xF3	; 243
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	6f e0       	ldi	r22, 0x0F	; 15
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	c7 01       	movw	r24, r14
    2c3e:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    2c42:	f7 01       	movw	r30, r14
    2c44:	e4 5e       	subi	r30, 0xE4	; 228
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	36 97       	sbiw	r30, 0x06	; 6
    2c4e:	80 83       	st	Z, r24
    2c50:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    2c52:	38 96       	adiw	r30, 0x08	; 8
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	36 97       	sbiw	r30, 0x06	; 6
    2c5a:	80 83       	st	Z, r24
    2c5c:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	f7 01       	movw	r30, r14
    2c62:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    2c64:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2c68:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2c6c:	82 32       	cpi	r24, 0x22	; 34
    2c6e:	91 40       	sbci	r25, 0x01	; 1
    2c70:	0c f0       	brlt	.+2      	; 0x2c74 <_ZN16CLaserControlApp3RunEv+0x7f6>
    2c72:	b5 c1       	rjmp	.+874    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
					SetPictureId(PICID_WORK_PREPARE);
    2c74:	67 e0       	ldi	r22, 0x07	; 7
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	c7 01       	movw	r24, r14
    2c7a:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    2c7e:	af c1       	rjmp	.+862    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    2c80:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2c84:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2c88:	8d 32       	cpi	r24, 0x2D	; 45
    2c8a:	91 40       	sbci	r25, 0x01	; 1
    2c8c:	0c f4       	brge	.+2      	; 0x2c90 <_ZN16CLaserControlApp3RunEv+0x812>
    2c8e:	a7 c1       	rjmp	.+846    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    2c90:	69 e2       	ldi	r22, 0x29	; 41
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	c7 01       	movw	r24, r14
    2c96:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    2c9a:	d7 01       	movw	r26, r14
    2c9c:	1f 96       	adiw	r26, 0x0f	; 15
    2c9e:	8c 91       	ld	r24, X
    2ca0:	1f 97       	sbiw	r26, 0x0f	; 15
    2ca2:	50 96       	adiw	r26, 0x10	; 16
    2ca4:	8c 93       	st	X, r24
    2ca6:	9b c1       	rjmp	.+822    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				SetLaserDiodePower();
    2ca8:	c7 01       	movw	r24, r14
    2caa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
							
				if (!laserBoard.Footswitch())
    2cae:	81 ee       	ldi	r24, 0xE1	; 225
    2cb0:	95 e2       	ldi	r25, 0x25	; 37
    2cb2:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <_ZN11CLaserBoard10FootswitchEv>
    2cb6:	81 11       	cpse	r24, r1
    2cb8:	12 c0       	rjmp	.+36     	; 0x2cde <_ZN16CLaserControlApp3RunEv+0x860>
				{
					//isstarted = true;
					if (state != APP_WORKLIGHT)
    2cba:	f7 01       	movw	r30, r14
    2cbc:	84 85       	ldd	r24, Z+12	; 0x0c
    2cbe:	95 85       	ldd	r25, Z+13	; 0x0d
    2cc0:	80 97       	sbiw	r24, 0x20	; 32
    2cc2:	f1 f0       	breq	.+60     	; 0x2d00 <_ZN16CLaserControlApp3RunEv+0x882>
					{
						SetPictureId(PICID_WORK_STARTED);
    2cc4:	60 e1       	ldi	r22, 0x10	; 16
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	c7 01       	movw	r24, r14
    2cca:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    2cce:	80 e2       	ldi	r24, 0x20	; 32
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	d7 01       	movw	r26, r14
    2cd4:	1c 96       	adiw	r26, 0x0c	; 12
    2cd6:	8d 93       	st	X+, r24
    2cd8:	9c 93       	st	X, r25
    2cda:	1d 97       	sbiw	r26, 0x0d	; 13
    2cdc:	11 c0       	rjmp	.+34     	; 0x2d00 <_ZN16CLaserControlApp3RunEv+0x882>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    2cde:	f7 01       	movw	r30, r14
    2ce0:	84 85       	ldd	r24, Z+12	; 0x0c
    2ce2:	95 85       	ldd	r25, Z+13	; 0x0d
    2ce4:	40 97       	sbiw	r24, 0x10	; 16
    2ce6:	61 f0       	breq	.+24     	; 0x2d00 <_ZN16CLaserControlApp3RunEv+0x882>
					{
						SetPictureId(PICID_WORK_POWERON);
    2ce8:	6e e0       	ldi	r22, 0x0E	; 14
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	c7 01       	movw	r24, r14
    2cee:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    2cf2:	80 e1       	ldi	r24, 0x10	; 16
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	d7 01       	movw	r26, r14
    2cf8:	1c 96       	adiw	r26, 0x0c	; 12
    2cfa:	8d 93       	st	X+, r24
    2cfc:	9c 93       	st	X, r25
    2cfe:	1d 97       	sbiw	r26, 0x0d	; 13
					}
					//StopLaser();
				}
			
				uint32_t cnt = swap32(laserCounter);
    2d00:	f7 01       	movw	r30, r14
    2d02:	e6 52       	subi	r30, 0x26	; 38
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z6swap32m>
    2d12:	6d 87       	std	Y+13, r22	; 0x0d
    2d14:	7e 87       	std	Y+14, r23	; 0x0e
    2d16:	8f 87       	std	Y+15, r24	; 0x0f
    2d18:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    2d1a:	24 e0       	ldi	r18, 0x04	; 4
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	ae 01       	movw	r20, r28
    2d20:	43 5f       	subi	r20, 0xF3	; 243
    2d22:	5f 4f       	sbci	r21, 0xFF	; 255
    2d24:	68 e0       	ldi	r22, 0x08	; 8
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	c7 01       	movw	r24, r14
    2d2a:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    2d2e:	f7 01       	movw	r30, r14
    2d30:	e2 52       	subi	r30, 0x22	; 34
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z6swap32m>
    2d40:	6d 87       	std	Y+13, r22	; 0x0d
    2d42:	7e 87       	std	Y+14, r23	; 0x0e
    2d44:	8f 87       	std	Y+15, r24	; 0x0f
    2d46:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    2d48:	24 e0       	ldi	r18, 0x04	; 4
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	ae 01       	movw	r20, r28
    2d4e:	43 5f       	subi	r20, 0xF3	; 243
    2d50:	5f 4f       	sbci	r21, 0xFF	; 255
    2d52:	64 e1       	ldi	r22, 0x14	; 20
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	c7 01       	movw	r24, r14
    2d58:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    2d5c:	40 c1       	rjmp	.+640    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    2d5e:	81 ee       	ldi	r24, 0xE1	; 225
    2d60:	95 e2       	ldi	r25, 0x25	; 37
    2d62:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    2d66:	f7 01       	movw	r30, r14
    2d68:	e0 5e       	subi	r30, 0xE0	; 224
    2d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	cd 97       	sbiw	r24, 0x3d	; 61
    2d72:	08 f4       	brcc	.+2      	; 0x2d76 <_ZN16CLaserControlApp3RunEv+0x8f8>
    2d74:	34 c1       	rjmp	.+616    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
				SetPictureId(PICID_WORKOnReady);
    2d76:	69 e1       	ldi	r22, 0x19	; 25
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	c7 01       	movw	r24, r14
    2d7c:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
    2d80:	2e c1       	rjmp	.+604    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    2d82:	81 ee       	ldi	r24, 0xE1	; 225
    2d84:	95 e2       	ldi	r25, 0x25	; 37
    2d86:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    2d8a:	f7 01       	movw	r30, r14
    2d8c:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    2d8e:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2d92:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2d96:	82 32       	cpi	r24, 0x22	; 34
    2d98:	91 40       	sbci	r25, 0x01	; 1
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <_ZN16CLaserControlApp3RunEv+0x920>
    2d9c:	20 c1       	rjmp	.+576    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
			{
				prepare = true;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	d7 01       	movw	r26, r14
    2da2:	52 96       	adiw	r26, 0x12	; 18
    2da4:	8c 93       	st	X, r24
    2da6:	52 97       	sbiw	r26, 0x12	; 18
				SetPictureId(PIC_ID_last);
    2da8:	50 96       	adiw	r26, 0x10	; 16
    2daa:	6c 91       	ld	r22, X
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	c7 01       	movw	r24, r14
    2db0:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
    2db4:	14 c1       	rjmp	.+552    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    2db6:	81 ee       	ldi	r24, 0xE1	; 225
    2db8:	95 e2       	ldi	r25, 0x25	; 37
    2dba:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    2dbe:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2dc2:	85 ff       	sbrs	r24, 5
    2dc4:	0c c1       	rjmp	.+536    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
				SetPictureId(PIC_ID_last);
    2dc6:	f7 01       	movw	r30, r14
    2dc8:	60 89       	ldd	r22, Z+16	; 0x10
    2dca:	70 e0       	ldi	r23, 0x00	; 0
    2dcc:	c7 01       	movw	r24, r14
    2dce:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
    2dd2:	05 c1       	rjmp	.+522    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	e2 52       	subi	r30, 0x22	; 34
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	10 82       	st	Z, r1
    2ddc:	11 82       	std	Z+1, r1	; 0x01
    2dde:	12 82       	std	Z+2, r1	; 0x02
    2de0:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    2de2:	81 ee       	ldi	r24, 0xE1	; 225
    2de4:	95 e2       	ldi	r25, 0x25	; 37
    2de6:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    2dea:	f7 01       	movw	r30, r14
    2dec:	ec 5f       	subi	r30, 0xFC	; 252
    2dee:	fe 4f       	sbci	r31, 0xFE	; 254
    2df0:	80 81       	ld	r24, Z
    2df2:	91 81       	ldd	r25, Z+1	; 0x01
    2df4:	2c ec       	ldi	r18, 0xCC	; 204
    2df6:	28 9f       	mul	r18, r24
    2df8:	b0 01       	movw	r22, r0
    2dfa:	29 9f       	mul	r18, r25
    2dfc:	70 0d       	add	r23, r0
    2dfe:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    2e00:	82 e1       	ldi	r24, 0x12	; 18
    2e02:	96 e2       	ldi	r25, 0x26	; 38
    2e04:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	d7 01       	movw	r26, r14
    2e0c:	53 96       	adiw	r26, 0x13	; 19
    2e0e:	8c 93       	st	X, r24
    2e10:	53 97       	sbiw	r26, 0x13	; 19
				
				prepare = true;
    2e12:	52 96       	adiw	r26, 0x12	; 18
    2e14:	8c 93       	st	X, r24
				m_wMinutes = m_wSetMin;
    2e16:	f7 01       	movw	r30, r14
    2e18:	e4 5e       	subi	r30, 0xE4	; 228
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	36 97       	sbiw	r30, 0x06	; 6
    2e22:	80 83       	st	Z, r24
    2e24:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    2e26:	38 96       	adiw	r30, 0x08	; 8
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	36 97       	sbiw	r30, 0x06	; 6
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    2e32:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2e36:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2e3a:	83 32       	cpi	r24, 0x23	; 35
    2e3c:	91 40       	sbci	r25, 0x01	; 1
    2e3e:	34 f0       	brlt	.+12     	; 0x2e4c <_ZN16CLaserControlApp3RunEv+0x9ce>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    2e40:	67 e2       	ldi	r22, 0x27	; 39
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	c7 01       	movw	r24, r14
    2e46:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
    2e4a:	c9 c0       	rjmp	.+402    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    2e4c:	67 e0       	ldi	r22, 0x07	; 7
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	c7 01       	movw	r24, r14
    2e52:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
    2e56:	c3 c0       	rjmp	.+390    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				SetLaserDiodePower();
    2e58:	c7 01       	movw	r24, r14
    2e5a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
				
				SetPictureId(PICID_WORK_POWERON);
    2e5e:	6e e0       	ldi	r22, 0x0E	; 14
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	c7 01       	movw	r24, r14
    2e64:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    2e68:	ba c0       	rjmp	.+372    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    2e6a:	6a e0       	ldi	r22, 0x0A	; 10
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	c7 01       	movw	r24, r14
    2e70:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				StopLaser();
    2e74:	c7 01       	movw	r24, r14
    2e76:	0e 94 2a 12 	call	0x2454	; 0x2454 <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    2e7a:	81 ee       	ldi	r24, 0xE1	; 225
    2e7c:	95 e2       	ldi	r25, 0x25	; 37
    2e7e:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    2e82:	f7 01       	movw	r30, r14
    2e84:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    2e86:	81 ee       	ldi	r24, 0xE1	; 225
    2e88:	95 e2       	ldi	r25, 0x25	; 37
    2e8a:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    2e8e:	f7 01       	movw	r30, r14
    2e90:	e6 52       	subi	r30, 0x26	; 38
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	40 81       	ld	r20, Z
    2e96:	51 81       	ldd	r21, Z+1	; 0x01
    2e98:	62 81       	ldd	r22, Z+2	; 0x02
    2e9a:	73 81       	ldd	r23, Z+3	; 0x03
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    2ea4:	1d 86       	std	Y+13, r1	; 0x0d
    2ea6:	1e 86       	std	Y+14, r1	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    2ea8:	42 e0       	ldi	r20, 0x02	; 2
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	be 01       	movw	r22, r28
    2eae:	63 5f       	subi	r22, 0xF3	; 243
    2eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb2:	81 e2       	ldi	r24, 0x21	; 33
    2eb4:	96 e2       	ldi	r25, 0x26	; 38
    2eb6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <_ZN4CSPI4SendEPhj>
			}
		break;
    2eba:	91 c0       	rjmp	.+290    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    2ebc:	6a e0       	ldi	r22, 0x0A	; 10
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	c7 01       	movw	r24, r14
    2ec2:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    2ec6:	8b c0       	rjmp	.+278    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    2ec8:	42 e0       	ldi	r20, 0x02	; 2
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	61 e1       	ldi	r22, 0x11	; 17
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	c7 01       	movw	r24, r14
    2ed2:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    2ed6:	ff ef       	ldi	r31, 0xFF	; 255
    2ed8:	21 ee       	ldi	r18, 0xE1	; 225
    2eda:	84 e0       	ldi	r24, 0x04	; 4
    2edc:	f1 50       	subi	r31, 0x01	; 1
    2ede:	20 40       	sbci	r18, 0x00	; 0
    2ee0:	80 40       	sbci	r24, 0x00	; 0
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <_ZN16CLaserControlApp3RunEv+0xa5e>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <_ZN16CLaserControlApp3RunEv+0xa68>
    2ee6:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    2ee8:	42 e0       	ldi	r20, 0x02	; 2
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	62 e1       	ldi	r22, 0x12	; 18
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	c7 01       	movw	r24, r14
    2ef2:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
    2ef6:	9f ef       	ldi	r25, 0xFF	; 255
    2ef8:	a1 ee       	ldi	r26, 0xE1	; 225
    2efa:	b4 e0       	ldi	r27, 0x04	; 4
    2efc:	91 50       	subi	r25, 0x01	; 1
    2efe:	a0 40       	sbci	r26, 0x00	; 0
    2f00:	b0 40       	sbci	r27, 0x00	; 0
    2f02:	e1 f7       	brne	.-8      	; 0x2efc <_ZN16CLaserControlApp3RunEv+0xa7e>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <_ZN16CLaserControlApp3RunEv+0xa88>
    2f06:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    2f08:	f7 01       	movw	r30, r14
    2f0a:	e4 5f       	subi	r30, 0xF4	; 244
    2f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0e:	20 81       	ld	r18, Z
    2f10:	31 81       	ldd	r19, Z+1	; 0x01
    2f12:	c9 01       	movw	r24, r18
    2f14:	a0 e0       	ldi	r26, 0x00	; 0
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	90 51       	subi	r25, 0x10	; 16
    2f1a:	af 4f       	sbci	r26, 0xFF	; 255
    2f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1e:	22 27       	eor	r18, r18
    2f20:	38 2f       	mov	r19, r24
    2f22:	49 2f       	mov	r20, r25
    2f24:	5a 2f       	mov	r21, r26
    2f26:	00 e0       	ldi	r16, 0x00	; 0
    2f28:	1c e0       	ldi	r17, 0x0C	; 12
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	71 e0       	ldi	r23, 0x01	; 1
    2f2e:	88 e0       	ldi	r24, 0x08	; 8
    2f30:	96 e2       	ldi	r25, 0x26	; 38
    2f32:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    2f36:	53 c0       	rjmp	.+166    	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
    2f38:	ef ef       	ldi	r30, 0xFF	; 255
    2f3a:	f7 ea       	ldi	r31, 0xA7	; 167
    2f3c:	21 e6       	ldi	r18, 0x61	; 97
    2f3e:	e1 50       	subi	r30, 0x01	; 1
    2f40:	f0 40       	sbci	r31, 0x00	; 0
    2f42:	20 40       	sbci	r18, 0x00	; 0
    2f44:	e1 f7       	brne	.-8      	; 0x2f3e <_ZN16CLaserControlApp3RunEv+0xac0>
    2f46:	00 c0       	rjmp	.+0      	; 0x2f48 <_ZN16CLaserControlApp3RunEv+0xaca>
    2f48:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    2f4a:	42 e0       	ldi	r20, 0x02	; 2
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	62 e1       	ldi	r22, 0x12	; 18
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	c7 01       	movw	r24, r14
    2f54:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    2f58:	f7 01       	movw	r30, r14
    2f5a:	e2 5f       	subi	r30, 0xF2	; 242
    2f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5e:	20 81       	ld	r18, Z
    2f60:	31 81       	ldd	r19, Z+1	; 0x01
    2f62:	32 97       	sbiw	r30, 0x02	; 2
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	28 0f       	add	r18, r24
    2f6a:	39 1f       	adc	r19, r25
    2f6c:	c9 01       	movw	r24, r18
    2f6e:	a0 e0       	ldi	r26, 0x00	; 0
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	90 51       	subi	r25, 0x10	; 16
    2f74:	af 4f       	sbci	r26, 0xFF	; 255
    2f76:	bf 4f       	sbci	r27, 0xFF	; 255
    2f78:	22 27       	eor	r18, r18
    2f7a:	38 2f       	mov	r19, r24
    2f7c:	49 2f       	mov	r20, r25
    2f7e:	5a 2f       	mov	r21, r26
    2f80:	00 e0       	ldi	r16, 0x00	; 0
    2f82:	11 e0       	ldi	r17, 0x01	; 1
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	7d e0       	ldi	r23, 0x0D	; 13
    2f88:	88 e0       	ldi	r24, 0x08	; 8
    2f8a:	96 e2       	ldi	r25, 0x26	; 38
    2f8c:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    2f90:	26 c0       	rjmp	.+76     	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    2f92:	f7 01       	movw	r30, r14
    2f94:	e2 5f       	subi	r30, 0xF2	; 242
    2f96:	fe 4f       	sbci	r31, 0xFE	; 254
    2f98:	20 81       	ld	r18, Z
    2f9a:	31 81       	ldd	r19, Z+1	; 0x01
    2f9c:	32 97       	sbiw	r30, 0x02	; 2
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	28 0f       	add	r18, r24
    2fa4:	39 1f       	adc	r19, r25
    2fa6:	c9 01       	movw	r24, r18
    2fa8:	a0 e0       	ldi	r26, 0x00	; 0
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	90 51       	subi	r25, 0x10	; 16
    2fae:	af 4f       	sbci	r26, 0xFF	; 255
    2fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb2:	22 27       	eor	r18, r18
    2fb4:	38 2f       	mov	r19, r24
    2fb6:	49 2f       	mov	r20, r25
    2fb8:	5a 2f       	mov	r21, r26
    2fba:	00 e0       	ldi	r16, 0x00	; 0
    2fbc:	11 e0       	ldi	r17, 0x01	; 1
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	7d e0       	ldi	r23, 0x0D	; 13
    2fc2:	88 e0       	ldi	r24, 0x08	; 8
    2fc4:	96 e2       	ldi	r25, 0x26	; 38
    2fc6:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    2fca:	09 c0       	rjmp	.+18     	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    2fcc:	88 e0       	ldi	r24, 0x08	; 8
    2fce:	96 e2       	ldi	r25, 0x26	; 38
    2fd0:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    2fd4:	04 c0       	rjmp	.+8      	; 0x2fde <_ZN16CLaserControlApp3RunEv+0xb60>
		default:
			Database.UnMap();
    2fd6:	88 e0       	ldi	r24, 0x08	; 8
    2fd8:	96 e2       	ldi	r25, 0x26	; 38
    2fda:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
			PIC_ID_last = PIC_ID;
			SetPictureId(PICID_WORK_ERROR1);
		}
#endif
	
	if (update)
    2fde:	d7 01       	movw	r26, r14
    2fe0:	51 96       	adiw	r26, 0x11	; 17
    2fe2:	8c 91       	ld	r24, X
    2fe4:	88 23       	and	r24, r24
    2fe6:	a9 f0       	breq	.+42     	; 0x3012 <_ZN16CLaserControlApp3RunEv+0xb94>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    2fe8:	a7 01       	movw	r20, r14
    2fea:	44 51       	subi	r20, 0x14	; 20
    2fec:	5f 4f       	sbci	r21, 0xFF	; 255
    2fee:	2a e2       	ldi	r18, 0x2A	; 42
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	c7 01       	movw	r24, r14
    2ff8:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    2ffc:	f7 01       	movw	r30, r14
    2ffe:	11 8a       	std	Z+17, r1	; 0x11
    3000:	08 c0       	rjmp	.+16     	; 0x3012 <_ZN16CLaserControlApp3RunEv+0xb94>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	f7 01       	movw	r30, r14
    3008:	e0 5f       	subi	r30, 0xF0	; 240
    300a:	fe 4f       	sbci	r31, 0xFE	; 254
    300c:	80 83       	st	Z, r24
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	91 ca       	rjmp	.-2782   	; 0x2534 <_ZN16CLaserControlApp3RunEv+0xb6>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    3012:	64 96       	adiw	r28, 0x14	; 20
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	bf 90       	pop	r11
    302a:	af 90       	pop	r10
    302c:	9f 90       	pop	r9
    302e:	8f 90       	pop	r8
    3030:	7f 90       	pop	r7
    3032:	6f 90       	pop	r6
    3034:	08 95       	ret

00003036 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
void CLaserControlApp::OnLaserTimer()
{
}

void CLaserControlApp::OnLaserTimerStop()
{			
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	ec 01       	movw	r28, r24
	if (Profile == PROFILE_SINGLE)
    303c:	2e 85       	ldd	r18, Y+14	; 0x0e
    303e:	21 30       	cpi	r18, 0x01	; 1
    3040:	09 f5       	brne	.+66     	; 0x3084 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x4e>
	{
		StopLaser();
    3042:	0e 94 2a 12 	call	0x2454	; 0x2454 <_ZN16CLaserControlApp9StopLaserEv>
		
		if (laserTimerDutyCyclems > 100)
    3046:	ca 52       	subi	r28, 0x2A	; 42
    3048:	df 4f       	sbci	r29, 0xFF	; 255
    304a:	48 81       	ld	r20, Y
    304c:	59 81       	ldd	r21, Y+1	; 0x01
    304e:	45 36       	cpi	r20, 0x65	; 101
    3050:	51 05       	cpc	r21, r1
    3052:	50 f0       	brcs	.+20     	; 0x3068 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x32>
			player.SoundStart(500, 50, 0);
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	42 e3       	ldi	r20, 0x32	; 50
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	64 ef       	ldi	r22, 0xF4	; 244
    305c:	71 e0       	ldi	r23, 0x01	; 1
    305e:	80 ee       	ldi	r24, 0xE0	; 224
    3060:	95 e2       	ldi	r25, 0x25	; 37
    3062:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
    3066:	09 c0       	rjmp	.+18     	; 0x307a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x44>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    3068:	56 95       	lsr	r21
    306a:	47 95       	ror	r20
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	64 ef       	ldi	r22, 0xF4	; 244
    3070:	71 e0       	ldi	r23, 0x01	; 1
    3072:	80 ee       	ldi	r24, 0xE0	; 224
    3074:	95 e2       	ldi	r25, 0x25	; 37
    3076:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    307a:	80 ee       	ldi	r24, 0xE0	; 224
    307c:	95 e2       	ldi	r25, 0x25	; 37
    307e:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
		return;
    3082:	87 c0       	rjmp	.+270    	; 0x3192 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x15c>
	}
	
	laserCounter++;
    3084:	fc 01       	movw	r30, r24
    3086:	e6 52       	subi	r30, 0x26	; 38
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	a2 81       	ldd	r26, Z+2	; 0x02
    3090:	b3 81       	ldd	r27, Z+3	; 0x03
    3092:	01 96       	adiw	r24, 0x01	; 1
    3094:	a1 1d       	adc	r26, r1
    3096:	b1 1d       	adc	r27, r1
    3098:	80 83       	st	Z, r24
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	a2 83       	std	Z+2, r26	; 0x02
    309e:	b3 83       	std	Z+3, r27	; 0x03
	laserCounterSession++;
    30a0:	34 96       	adiw	r30, 0x04	; 4
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	a2 81       	ldd	r26, Z+2	; 0x02
    30a8:	b3 81       	ldd	r27, Z+3	; 0x03
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	a1 1d       	adc	r26, r1
    30ae:	b1 1d       	adc	r27, r1
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
	
	if (Profile == PROFILE_MEDIUM)
    30b8:	23 30       	cpi	r18, 0x03	; 3
    30ba:	09 f0       	breq	.+2      	; 0x30be <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x88>
    30bc:	4c c0       	rjmp	.+152    	; 0x3156 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x120>
	{	
		if 	((laserMultiPulseState%2) == 0)
    30be:	34 96       	adiw	r30, 0x04	; 4
    30c0:	80 81       	ld	r24, Z
    30c2:	80 fd       	sbrc	r24, 0
    30c4:	04 c0       	rjmp	.+8      	; 0x30ce <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x98>
			PORTF.OUTCLR = PIN0_bm;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    30cc:	03 c0       	rjmp	.+6      	; 0x30d4 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x9e>
		else
			PORTF.OUTSET = PIN0_bm;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if 	((laserMultiPulseState%2) == 0)
    30d4:	fe 01       	movw	r30, r28
    30d6:	ee 51       	subi	r30, 0x1E	; 30
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 81       	ld	r24, Z
    30dc:	80 fd       	sbrc	r24, 0
    30de:	04 c0       	rjmp	.+8      	; 0x30e8 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xb2>
			PORTF.OUTCLR = PIN1_bm;
    30e0:	82 e0       	ldi	r24, 0x02	; 2
    30e2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    30e6:	03 c0       	rjmp	.+6      	; 0x30ee <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xb8>
		else
			PORTF.OUTSET = PIN1_bm;
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if (laserMultiPulseState > NUM_PULSES * 2) laserMultiPulseState = 0;
    30ee:	fe 01       	movw	r30, r28
    30f0:	ee 51       	subi	r30, 0x1E	; 30
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	05 97       	sbiw	r24, 0x05	; 5
    30fa:	10 f0       	brcs	.+4      	; 0x3100 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xca>
    30fc:	10 82       	st	Z, r1
    30fe:	11 82       	std	Z+1, r1	; 0x01
		TCF0.PERBUF = laserMultiPulsePeriod[laserMultiPulseState];
    3100:	de 01       	movw	r26, r28
    3102:	ae 51       	subi	r26, 0x1E	; 30
    3104:	bf 4f       	sbci	r27, 0xFF	; 255
    3106:	ed 91       	ld	r30, X+
    3108:	fc 91       	ld	r31, X
    310a:	11 97       	sbiw	r26, 0x01	; 1
    310c:	ee 58       	subi	r30, 0x8E	; 142
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	ee 0f       	add	r30, r30
    3112:	ff 1f       	adc	r31, r31
    3114:	ec 0f       	add	r30, r28
    3116:	fd 1f       	adc	r31, r29
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    3120:	90 93 37 0b 	sts	0x0B37, r25	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
		
		if (laserMultiPulseState == 3)
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	03 97       	sbiw	r24, 0x03	; 3
    312a:	69 f4       	brne	.+26     	; 0x3146 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x110>
		{
			player.SoundStart(500, 100, 0);
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	44 e6       	ldi	r20, 0x64	; 100
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	64 ef       	ldi	r22, 0xF4	; 244
    3134:	71 e0       	ldi	r23, 0x01	; 1
    3136:	80 ee       	ldi	r24, 0xE0	; 224
    3138:	95 e2       	ldi	r25, 0x25	; 37
    313a:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    313e:	80 ee       	ldi	r24, 0xE0	; 224
    3140:	95 e2       	ldi	r25, 0x25	; 37
    3142:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
		}
		
		laserMultiPulseState++;
    3146:	ce 51       	subi	r28, 0x1E	; 30
    3148:	df 4f       	sbci	r29, 0xFF	; 255
    314a:	88 81       	ld	r24, Y
    314c:	99 81       	ldd	r25, Y+1	; 0x01
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	88 83       	st	Y, r24
    3152:	99 83       	std	Y+1, r25	; 0x01
    3154:	1e c0       	rjmp	.+60     	; 0x3192 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x15c>
	}
	else
	{
		if (laserTimerDutyCyclems > 100)
    3156:	ca 52       	subi	r28, 0x2A	; 42
    3158:	df 4f       	sbci	r29, 0xFF	; 255
    315a:	48 81       	ld	r20, Y
    315c:	59 81       	ldd	r21, Y+1	; 0x01
    315e:	45 36       	cpi	r20, 0x65	; 101
    3160:	51 05       	cpc	r21, r1
    3162:	50 f0       	brcs	.+20     	; 0x3178 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x142>
			player.SoundStart(500, 50, 0);
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	42 e3       	ldi	r20, 0x32	; 50
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	64 ef       	ldi	r22, 0xF4	; 244
    316c:	71 e0       	ldi	r23, 0x01	; 1
    316e:	80 ee       	ldi	r24, 0xE0	; 224
    3170:	95 e2       	ldi	r25, 0x25	; 37
    3172:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
    3176:	09 c0       	rjmp	.+18     	; 0x318a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x154>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    3178:	56 95       	lsr	r21
    317a:	47 95       	ror	r20
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	64 ef       	ldi	r22, 0xF4	; 244
    3180:	71 e0       	ldi	r23, 0x01	; 1
    3182:	80 ee       	ldi	r24, 0xE0	; 224
    3184:	95 e2       	ldi	r25, 0x25	; 37
    3186:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    318a:	80 ee       	ldi	r24, 0xE0	; 224
    318c:	95 e2       	ldi	r25, 0x25	; 37
    318e:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <_ZN12CSoundPlayer9SoundStopEv>
	}
}
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	08 95       	ret

00003198 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStopStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    3198:	0e 94 1b 18 	call	0x3036	; 0x3036 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    319c:	08 95       	ret

0000319e <_ZN16CLaserControlApp10StartLaserEv>:
	
	return true;
}

void CLaserControlApp::StartLaser()
{
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	ec 01       	movw	r28, r24
	if (Profile == PROFILE_MEDIUM)
    31a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    31aa:	83 30       	cpi	r24, 0x03	; 3
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <_ZN16CLaserControlApp10StartLaserEv+0x12>
    31ae:	44 c0       	rjmp	.+136    	; 0x3238 <_ZN16CLaserControlApp10StartLaserEv+0x9a>
	{
		laserTimer.Stop();
    31b0:	88 e1       	ldi	r24, 0x18	; 24
    31b2:	96 e2       	ldi	r25, 0x26	; 38
    31b4:	0e 94 e3 3a 	call	0x75c6	; 0x75c6 <_ZN7CTimerF4StopEv>
		laserMultiPulseState = 2;
    31b8:	fe 01       	movw	r30, r28
    31ba:	ee 51       	subi	r30, 0x1E	; 30
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	82 e0       	ldi	r24, 0x02	; 2
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	80 83       	st	Z, r24
    31c4:	91 83       	std	Z+1, r25	; 0x01
		PORTF.OUTSET = PIN0_bm;
    31c6:	e0 ea       	ldi	r30, 0xA0	; 160
    31c8:	f6 e0       	ldi	r31, 0x06	; 6
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	85 83       	std	Z+5, r24	; 0x05
		PORTF.OUTSET = PIN1_bm;
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	85 83       	std	Z+5, r24	; 0x05
		laserTimer.SetCOMPA(laserMultiPulsePeriod[0]/2);
    31d2:	8e 01       	movw	r16, r28
    31d4:	0c 51       	subi	r16, 0x1C	; 28
    31d6:	1f 4f       	sbci	r17, 0xFF	; 255
    31d8:	f8 01       	movw	r30, r16
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	76 95       	lsr	r23
    31e0:	67 95       	ror	r22
    31e2:	88 e1       	ldi	r24, 0x18	; 24
    31e4:	96 e2       	ldi	r25, 0x26	; 38
    31e6:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserMultiPulsePeriod[0]/2);
    31ea:	f8 01       	movw	r30, r16
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	76 95       	lsr	r23
    31f2:	67 95       	ror	r22
    31f4:	88 e1       	ldi	r24, 0x18	; 24
    31f6:	96 e2       	ldi	r25, 0x26	; 38
    31f8:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN7CTimerF8SetCOMPBEj>
		TCF0.PERBUF = laserMultiPulsePeriod[1];
    31fc:	ca 51       	subi	r28, 0x1A	; 26
    31fe:	df 4f       	sbci	r29, 0xFF	; 255
    3200:	88 81       	ld	r24, Y
    3202:	99 81       	ldd	r25, Y+1	; 0x01
    3204:	e0 e0       	ldi	r30, 0x00	; 0
    3206:	fb e0       	ldi	r31, 0x0B	; 11
    3208:	86 ab       	std	Z+54, r24	; 0x36
    320a:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserMultiPulsePeriod[1]/2;
    320c:	88 81       	ld	r24, Y
    320e:	99 81       	ldd	r25, Y+1	; 0x01
    3210:	96 95       	lsr	r25
    3212:	87 95       	ror	r24
    3214:	80 af       	std	Z+56, r24	; 0x38
    3216:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserMultiPulsePeriod[1]/2;
    3218:	88 81       	ld	r24, Y
    321a:	99 81       	ldd	r25, Y+1	; 0x01
    321c:	96 95       	lsr	r25
    321e:	87 95       	ror	r24
    3220:	82 af       	std	Z+58, r24	; 0x3a
    3222:	93 af       	std	Z+59, r25	; 0x3b
		TCF0.CNT = 0;
    3224:	10 a2       	std	Z+32, r1	; 0x20
    3226:	11 a2       	std	Z+33, r1	; 0x21
		laserTimer.Start(laserMultiPulsePeriod[0]);
    3228:	f8 01       	movw	r30, r16
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	88 e1       	ldi	r24, 0x18	; 24
    3230:	96 e2       	ldi	r25, 0x26	; 38
    3232:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZN7CTimerF5StartEj>
    3236:	27 c0       	rjmp	.+78     	; 0x3286 <_ZN16CLaserControlApp10StartLaserEv+0xe8>
	} else
	{
		TCF0.PERBUF = laserTimerPeriod;
    3238:	8e 01       	movw	r16, r28
    323a:	0e 52       	subi	r16, 0x2E	; 46
    323c:	1f 4f       	sbci	r17, 0xFF	; 255
    323e:	f8 01       	movw	r30, r16
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	e0 e0       	ldi	r30, 0x00	; 0
    3246:	fb e0       	ldi	r31, 0x0B	; 11
    3248:	86 ab       	std	Z+54, r24	; 0x36
    324a:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserTimerDutyCycle;
    324c:	cc 52       	subi	r28, 0x2C	; 44
    324e:	df 4f       	sbci	r29, 0xFF	; 255
    3250:	88 81       	ld	r24, Y
    3252:	99 81       	ldd	r25, Y+1	; 0x01
    3254:	80 af       	std	Z+56, r24	; 0x38
    3256:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserTimerDutyCycle;
    3258:	88 81       	ld	r24, Y
    325a:	99 81       	ldd	r25, Y+1	; 0x01
    325c:	82 af       	std	Z+58, r24	; 0x3a
    325e:	93 af       	std	Z+59, r25	; 0x3b
		laserTimer.SetCOMPA(laserTimerDutyCycle);
    3260:	68 81       	ld	r22, Y
    3262:	79 81       	ldd	r23, Y+1	; 0x01
    3264:	88 e1       	ldi	r24, 0x18	; 24
    3266:	96 e2       	ldi	r25, 0x26	; 38
    3268:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserTimerDutyCycle);
    326c:	68 81       	ld	r22, Y
    326e:	79 81       	ldd	r23, Y+1	; 0x01
    3270:	88 e1       	ldi	r24, 0x18	; 24
    3272:	96 e2       	ldi	r25, 0x26	; 38
    3274:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN7CTimerF8SetCOMPBEj>
		laserTimer.Start(laserTimerPeriod);
    3278:	f8 01       	movw	r30, r16
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	88 e1       	ldi	r24, 0x18	; 24
    3280:	96 e2       	ldi	r25, 0x26	; 38
    3282:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZN7CTimerF5StartEj>
	}
}
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	08 95       	ret

00003290 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    3294:	fc 01       	movw	r30, r24
    3296:	24 85       	ldd	r18, Z+12	; 0x0c
    3298:	35 85       	ldd	r19, Z+13	; 0x0d
    329a:	20 31       	cpi	r18, 0x10	; 16
    329c:	31 05       	cpc	r19, r1
    329e:	21 f0       	breq	.+8      	; 0x32a8 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    32a0:	20 32       	cpi	r18, 0x20	; 32
    32a2:	31 05       	cpc	r19, r1
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    32a6:	60 c0       	rjmp	.+192    	; 0x3368 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    32a8:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    32aa:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    32ae:	80 fd       	sbrc	r24, 0
    32b0:	51 c0       	rjmp	.+162    	; 0x3354 <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    32b2:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <__data_end>
    32b6:	81 11       	cpse	r24, r1
    32b8:	57 c0       	rjmp	.+174    	; 0x3368 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    32ba:	fe 01       	movw	r30, r28
    32bc:	ee 5d       	subi	r30, 0xDE	; 222
    32be:	fe 4f       	sbci	r31, 0xFE	; 254
    32c0:	80 81       	ld	r24, Z
    32c2:	91 81       	ldd	r25, Z+1	; 0x01
    32c4:	89 2b       	or	r24, r25
    32c6:	09 f4       	brne	.+2      	; 0x32ca <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    32c8:	4b c0       	rjmp	.+150    	; 0x3360 <_ZN16CLaserControlApp6OnINT0Ev+0xd0>
    32ca:	4e c0       	rjmp	.+156    	; 0x3368 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    32cc:	8a e0       	ldi	r24, 0x0A	; 10
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	fe 01       	movw	r30, r28
    32d2:	ee 5d       	subi	r30, 0xDE	; 222
    32d4:	fe 4f       	sbci	r31, 0xFE	; 254
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    32da:	e8 54       	subi	r30, 0x48	; 72
    32dc:	f1 09       	sbc	r31, r1
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	a2 81       	ldd	r26, Z+2	; 0x02
    32e4:	b3 81       	ldd	r27, Z+3	; 0x03
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	a1 1d       	adc	r26, r1
    32ea:	b1 1d       	adc	r27, r1
    32ec:	80 83       	st	Z, r24
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	a2 83       	std	Z+2, r26	; 0x02
    32f2:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    32f4:	34 96       	adiw	r30, 0x04	; 4
    32f6:	80 81       	ld	r24, Z
    32f8:	91 81       	ldd	r25, Z+1	; 0x01
    32fa:	a2 81       	ldd	r26, Z+2	; 0x02
    32fc:	b3 81       	ldd	r27, Z+3	; 0x03
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	a1 1d       	adc	r26, r1
    3302:	b1 1d       	adc	r27, r1
    3304:	80 83       	st	Z, r24
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	a2 83       	std	Z+2, r26	; 0x02
    330a:	b3 83       	std	Z+3, r27	; 0x03
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
						player.SoundStop();*/
					}
						
					if (laserTimerDutyCycle != 0)
    330c:	fe 01       	movw	r30, r28
    330e:	ec 52       	subi	r30, 0x2C	; 44
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	29 f0       	breq	.+10     	; 0x3324 <_ZN16CLaserControlApp6OnINT0Ev+0x94>
						TCF0.CNT = laserTimerDutyCycle - 1;
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    3320:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
						
					StartLaser();
    3324:	ce 01       	movw	r24, r28
    3326:	0e 94 cf 18 	call	0x319e	; 0x319e <_ZN16CLaserControlApp10StartLaserEv>
					
					if (Profile == PROFILE_SINGLE)
    332a:	8e 85       	ldd	r24, Y+14	; 0x0e
    332c:	81 30       	cpi	r24, 0x01	; 1
    332e:	49 f4       	brne	.+18     	; 0x3342 <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    3330:	ff ef       	ldi	r31, 0xFF	; 255
    3332:	27 e8       	ldi	r18, 0x87	; 135
    3334:	83 e1       	ldi	r24, 0x13	; 19
    3336:	f1 50       	subi	r31, 0x01	; 1
    3338:	20 40       	sbci	r18, 0x00	; 0
    333a:	80 40       	sbci	r24, 0x00	; 0
    333c:	e1 f7       	brne	.-8      	; 0x3336 <_ZN16CLaserControlApp6OnINT0Ev+0xa6>
    333e:	00 c0       	rjmp	.+0      	; 0x3340 <_ZN16CLaserControlApp6OnINT0Ev+0xb0>
    3340:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    3342:	e0 e4       	ldi	r30, 0x40	; 64
    3344:	f6 e0       	ldi	r31, 0x06	; 6
    3346:	84 85       	ldd	r24, Z+12	; 0x0c
    3348:	8e 7f       	andi	r24, 0xFE	; 254
    334a:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <__data_end>
    3352:	0a c0       	rjmp	.+20     	; 0x3368 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    3354:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <__data_end>
				
				StopLaser();
    3358:	ce 01       	movw	r24, r28
    335a:	0e 94 2a 12 	call	0x2454	; 0x2454 <_ZN16CLaserControlApp9StopLaserEv>
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    3360:	8e 85       	ldd	r24, Y+14	; 0x0e
    3362:	81 30       	cpi	r24, 0x01	; 1
    3364:	99 f6       	brne	.-90     	; 0x330c <_ZN16CLaserControlApp6OnINT0Ev+0x7c>
    3366:	b2 cf       	rjmp	.-156    	; 0x32cc <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	08 95       	ret

0000336e <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    336e:	0e 94 48 19 	call	0x3290	; 0x3290 <_ZN16CLaserControlApp6OnINT0Ev>
    3372:	08 95       	ret

00003374 <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    3374:	cf 92       	push	r12
    3376:	df 92       	push	r13
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	7c 01       	movw	r14, r24
    3386:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    3388:	41 15       	cp	r20, r1
    338a:	51 05       	cpc	r21, r1
    338c:	b1 f0       	breq	.+44     	; 0x33ba <_Z11ConvertDataPvS_jj+0x46>
    338e:	6b 01       	movw	r12, r22
    3390:	c4 0e       	add	r12, r20
    3392:	d5 1e       	adc	r13, r21
    3394:	eb 01       	movw	r28, r22
    3396:	26 1b       	sub	r18, r22
    3398:	37 0b       	sbc	r19, r23
    339a:	c9 01       	movw	r24, r18
    339c:	8c 0f       	add	r24, r28
    339e:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    33a0:	b8 01       	movw	r22, r16
    33a2:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    33a6:	fc 01       	movw	r30, r24
    33a8:	41 e0       	ldi	r20, 0x01	; 1
    33aa:	e4 27       	eor	r30, r20
    33ac:	ee 0d       	add	r30, r14
    33ae:	ff 1d       	adc	r31, r15
    33b0:	89 91       	ld	r24, Y+
    33b2:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    33b4:	cc 15       	cp	r28, r12
    33b6:	dd 05       	cpc	r29, r13
    33b8:	81 f7       	brne	.-32     	; 0x339a <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	08 95       	ret

000033cc <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    33cc:	68 17       	cp	r22, r24
    33ce:	79 07       	cpc	r23, r25
    33d0:	08 f4       	brcc	.+2      	; 0x33d4 <_Z3minjj+0x8>
    33d2:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    33d4:	08 95       	ret

000033d6 <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    33d6:	86 17       	cp	r24, r22
    33d8:	97 07       	cpc	r25, r23
    33da:	08 f4       	brcc	.+2      	; 0x33de <_Z3maxjj+0x8>
    33dc:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    33de:	08 95       	ret

000033e0 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    33e0:	98 27       	eor	r25, r24
    33e2:	89 27       	eor	r24, r25
    33e4:	98 27       	eor	r25, r24
    33e6:	08 95       	ret

000033e8 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    33e8:	9b 01       	movw	r18, r22
    33ea:	bc 01       	movw	r22, r24
    33ec:	c9 01       	movw	r24, r18
}
    33ee:	08 95       	ret

000033f0 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    33f0:	08 95       	ret

000033f2 <_ZN4CSPID1Ev>:
    33f2:	08 95       	ret

000033f4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    33f4:	ef 92       	push	r14
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	ec 01       	movw	r28, r24
    3400:	e0 e8       	ldi	r30, 0x80	; 128
    3402:	f6 e0       	ldi	r31, 0x06	; 6
    3404:	90 eb       	ldi	r25, 0xB0	; 176
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	80 ec       	ldi	r24, 0xC0	; 192
    340a:	84 8b       	std	Z+20, r24	; 0x14
    340c:	85 8b       	std	Z+21, r24	; 0x15
    340e:	87 8b       	std	Z+23, r24	; 0x17
    3410:	95 83       	std	Z+5, r25	; 0x05
    3412:	61 11       	cpse	r22, r1
    3414:	02 c0       	rjmp	.+4      	; 0x341a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    3416:	80 e4       	ldi	r24, 0x40	; 64
    3418:	01 c0       	rjmp	.+2      	; 0x341c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    341a:	80 e5       	ldi	r24, 0x50	; 80
    341c:	01 11       	cpse	r16, r1
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    3424:	30 e8       	ldi	r19, 0x80	; 128
    3426:	41 11       	cpse	r20, r1
    3428:	02 c0       	rjmp	.+4      	; 0x342e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	01 c0       	rjmp	.+2      	; 0x3430 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    342e:	90 e2       	ldi	r25, 0x20	; 32
    3430:	22 0f       	add	r18, r18
    3432:	22 0f       	add	r18, r18
    3434:	e2 2a       	or	r14, r18
    3436:	e8 2a       	or	r14, r24
    3438:	e3 2a       	or	r14, r19
    343a:	e9 2a       	or	r14, r25
    343c:	00 ec       	ldi	r16, 0xC0	; 192
    343e:	1a e0       	ldi	r17, 0x0A	; 10
    3440:	f8 01       	movw	r30, r16
    3442:	e0 82       	st	Z, r14
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <malloc>
    344c:	88 83       	st	Y, r24
    344e:	99 83       	std	Y+1, r25	; 0x01
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	f8 01       	movw	r30, r16
    3454:	81 83       	std	Z+1, r24	; 0x01
    3456:	83 e7       	ldi	r24, 0x73	; 115
    3458:	9a e1       	ldi	r25, 0x1A	; 26
    345a:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <InterruptFuncTable+0x72>
    345e:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <InterruptFuncTable+0x73>
    3462:	c0 93 2e 24 	sts	0x242E, r28	; 0x80242e <InterruptSenderTable+0x72>
    3466:	d0 93 2f 24 	sts	0x242F, r29	; 0x80242f <InterruptSenderTable+0x73>
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	ef 90       	pop	r14
    3474:	08 95       	ret

00003476 <_ZN4CSPI4SendEPhj>:
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	ec 01       	movw	r28, r24
    347c:	4a 83       	std	Y+2, r20	; 0x02
    347e:	5b 83       	std	Y+3, r21	; 0x03
    3480:	4c 83       	std	Y+4, r20	; 0x04
    3482:	5d 83       	std	Y+5, r21	; 0x05
    3484:	88 81       	ld	r24, Y
    3486:	99 81       	ldd	r25, Y+1	; 0x01
    3488:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <memcpy>
    348c:	80 e1       	ldi	r24, 0x10	; 16
    348e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3492:	88 81       	ld	r24, Y
    3494:	99 81       	ldd	r25, Y+1	; 0x01
    3496:	4a 81       	ldd	r20, Y+2	; 0x02
    3498:	5b 81       	ldd	r21, Y+3	; 0x03
    349a:	9a 01       	movw	r18, r20
    349c:	21 50       	subi	r18, 0x01	; 1
    349e:	31 09       	sbc	r19, r1
    34a0:	2a 83       	std	Y+2, r18	; 0x02
    34a2:	3b 83       	std	Y+3, r19	; 0x03
    34a4:	fc 01       	movw	r30, r24
    34a6:	e2 0f       	add	r30, r18
    34a8:	f3 1f       	adc	r31, r19
    34aa:	80 81       	ld	r24, Z
    34ac:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	08 95       	ret

000034b6 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    34b6:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    34b8:	82 81       	ldd	r24, Z+2	; 0x02
    34ba:	93 81       	ldd	r25, Z+3	; 0x03
    34bc:	89 2b       	or	r24, r25
    34be:	79 f0       	breq	.+30     	; 0x34de <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    34c0:	40 81       	ld	r20, Z
    34c2:	51 81       	ldd	r21, Z+1	; 0x01
    34c4:	22 81       	ldd	r18, Z+2	; 0x02
    34c6:	33 81       	ldd	r19, Z+3	; 0x03
    34c8:	c9 01       	movw	r24, r18
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	82 83       	std	Z+2, r24	; 0x02
    34ce:	93 83       	std	Z+3, r25	; 0x03
    34d0:	fa 01       	movw	r30, r20
    34d2:	e8 0f       	add	r30, r24
    34d4:	f9 1f       	adc	r31, r25
    34d6:	80 81       	ld	r24, Z
    34d8:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    34dc:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    34de:	80 e1       	ldi	r24, 0x10	; 16
    34e0:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    34e4:	08 95       	ret

000034e6 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    34e6:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN4CSPI10OnTransmitEv>
    34ea:	08 95       	ret

000034ec <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    34ec:	24 e9       	ldi	r18, 0x94	; 148
    34ee:	31 e2       	ldi	r19, 0x21	; 33
    34f0:	fc 01       	movw	r30, r24
    34f2:	20 83       	st	Z, r18
    34f4:	31 83       	std	Z+1, r19	; 0x01
    34f6:	08 95       	ret

000034f8 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    34f8:	08 95       	ret

000034fa <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    34fa:	28 eb       	ldi	r18, 0xB8	; 184
    34fc:	31 e2       	ldi	r19, 0x21	; 33
    34fe:	fc 01       	movw	r30, r24
    3500:	20 83       	st	Z, r18
    3502:	31 83       	std	Z+1, r19	; 0x01
    3504:	08 95       	ret

00003506 <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    3506:	08 95       	ret

00003508 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    3508:	26 ed       	ldi	r18, 0xD6	; 214
    350a:	31 e2       	ldi	r19, 0x21	; 33
    350c:	fc 01       	movw	r30, r24
    350e:	20 83       	st	Z, r18
    3510:	31 83       	std	Z+1, r19	; 0x01
    3512:	08 95       	ret

00003514 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    3514:	08 95       	ret

00003516 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    3516:	1f 92       	push	r1
    3518:	0f 92       	push	r0
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	0f 92       	push	r0
    351e:	11 24       	eor	r1, r1
    3520:	0b b6       	in	r0, 0x3b	; 59
    3522:	0f 92       	push	r0
    3524:	2f 93       	push	r18
    3526:	3f 93       	push	r19
    3528:	4f 93       	push	r20
    352a:	5f 93       	push	r21
    352c:	6f 93       	push	r22
    352e:	7f 93       	push	r23
    3530:	8f 93       	push	r24
    3532:	9f 93       	push	r25
    3534:	af 93       	push	r26
    3536:	bf 93       	push	r27
    3538:	ef 93       	push	r30
    353a:	ff 93       	push	r31
    353c:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <InterruptFuncTable+0x2>
    3540:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <InterruptFuncTable+0x3>
    3544:	30 97       	sbiw	r30, 0x00	; 0
    3546:	29 f0       	breq	.+10     	; 0x3552 <__vector_1+0x3c>
    3548:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <InterruptSenderTable+0x2>
    354c:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <InterruptSenderTable+0x3>
    3550:	19 95       	eicall
    3552:	ff 91       	pop	r31
    3554:	ef 91       	pop	r30
    3556:	bf 91       	pop	r27
    3558:	af 91       	pop	r26
    355a:	9f 91       	pop	r25
    355c:	8f 91       	pop	r24
    355e:	7f 91       	pop	r23
    3560:	6f 91       	pop	r22
    3562:	5f 91       	pop	r21
    3564:	4f 91       	pop	r20
    3566:	3f 91       	pop	r19
    3568:	2f 91       	pop	r18
    356a:	0f 90       	pop	r0
    356c:	0b be       	out	0x3b, r0	; 59
    356e:	0f 90       	pop	r0
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	0f 90       	pop	r0
    3574:	1f 90       	pop	r1
    3576:	18 95       	reti

00003578 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    3578:	1f 92       	push	r1
    357a:	0f 92       	push	r0
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	0f 92       	push	r0
    3580:	11 24       	eor	r1, r1
    3582:	0b b6       	in	r0, 0x3b	; 59
    3584:	0f 92       	push	r0
    3586:	2f 93       	push	r18
    3588:	3f 93       	push	r19
    358a:	4f 93       	push	r20
    358c:	5f 93       	push	r21
    358e:	6f 93       	push	r22
    3590:	7f 93       	push	r23
    3592:	8f 93       	push	r24
    3594:	9f 93       	push	r25
    3596:	af 93       	push	r26
    3598:	bf 93       	push	r27
    359a:	ef 93       	push	r30
    359c:	ff 93       	push	r31
    359e:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <InterruptFuncTable+0x4>
    35a2:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <InterruptFuncTable+0x5>
    35a6:	30 97       	sbiw	r30, 0x00	; 0
    35a8:	29 f0       	breq	.+10     	; 0x35b4 <__vector_2+0x3c>
    35aa:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <InterruptSenderTable+0x4>
    35ae:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <InterruptSenderTable+0x5>
    35b2:	19 95       	eicall
    35b4:	ff 91       	pop	r31
    35b6:	ef 91       	pop	r30
    35b8:	bf 91       	pop	r27
    35ba:	af 91       	pop	r26
    35bc:	9f 91       	pop	r25
    35be:	8f 91       	pop	r24
    35c0:	7f 91       	pop	r23
    35c2:	6f 91       	pop	r22
    35c4:	5f 91       	pop	r21
    35c6:	4f 91       	pop	r20
    35c8:	3f 91       	pop	r19
    35ca:	2f 91       	pop	r18
    35cc:	0f 90       	pop	r0
    35ce:	0b be       	out	0x3b, r0	; 59
    35d0:	0f 90       	pop	r0
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	0f 90       	pop	r0
    35d6:	1f 90       	pop	r1
    35d8:	18 95       	reti

000035da <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    35da:	1f 92       	push	r1
    35dc:	0f 92       	push	r0
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	0f 92       	push	r0
    35e2:	11 24       	eor	r1, r1
    35e4:	0b b6       	in	r0, 0x3b	; 59
    35e6:	0f 92       	push	r0
    35e8:	2f 93       	push	r18
    35ea:	3f 93       	push	r19
    35ec:	4f 93       	push	r20
    35ee:	5f 93       	push	r21
    35f0:	6f 93       	push	r22
    35f2:	7f 93       	push	r23
    35f4:	8f 93       	push	r24
    35f6:	9f 93       	push	r25
    35f8:	af 93       	push	r26
    35fa:	bf 93       	push	r27
    35fc:	ef 93       	push	r30
    35fe:	ff 93       	push	r31
    3600:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <InterruptFuncTable+0x6>
    3604:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <InterruptFuncTable+0x7>
    3608:	30 97       	sbiw	r30, 0x00	; 0
    360a:	29 f0       	breq	.+10     	; 0x3616 <__vector_3+0x3c>
    360c:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <InterruptSenderTable+0x6>
    3610:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <InterruptSenderTable+0x7>
    3614:	19 95       	eicall
    3616:	ff 91       	pop	r31
    3618:	ef 91       	pop	r30
    361a:	bf 91       	pop	r27
    361c:	af 91       	pop	r26
    361e:	9f 91       	pop	r25
    3620:	8f 91       	pop	r24
    3622:	7f 91       	pop	r23
    3624:	6f 91       	pop	r22
    3626:	5f 91       	pop	r21
    3628:	4f 91       	pop	r20
    362a:	3f 91       	pop	r19
    362c:	2f 91       	pop	r18
    362e:	0f 90       	pop	r0
    3630:	0b be       	out	0x3b, r0	; 59
    3632:	0f 90       	pop	r0
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	0f 90       	pop	r0
    3638:	1f 90       	pop	r1
    363a:	18 95       	reti

0000363c <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    363c:	1f 92       	push	r1
    363e:	0f 92       	push	r0
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	0f 92       	push	r0
    3644:	11 24       	eor	r1, r1
    3646:	0b b6       	in	r0, 0x3b	; 59
    3648:	0f 92       	push	r0
    364a:	2f 93       	push	r18
    364c:	3f 93       	push	r19
    364e:	4f 93       	push	r20
    3650:	5f 93       	push	r21
    3652:	6f 93       	push	r22
    3654:	7f 93       	push	r23
    3656:	8f 93       	push	r24
    3658:	9f 93       	push	r25
    365a:	af 93       	push	r26
    365c:	bf 93       	push	r27
    365e:	ef 93       	push	r30
    3660:	ff 93       	push	r31
    3662:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <InterruptFuncTable+0x8>
    3666:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <InterruptFuncTable+0x9>
    366a:	30 97       	sbiw	r30, 0x00	; 0
    366c:	29 f0       	breq	.+10     	; 0x3678 <__vector_4+0x3c>
    366e:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <InterruptSenderTable+0x8>
    3672:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <InterruptSenderTable+0x9>
    3676:	19 95       	eicall
    3678:	ff 91       	pop	r31
    367a:	ef 91       	pop	r30
    367c:	bf 91       	pop	r27
    367e:	af 91       	pop	r26
    3680:	9f 91       	pop	r25
    3682:	8f 91       	pop	r24
    3684:	7f 91       	pop	r23
    3686:	6f 91       	pop	r22
    3688:	5f 91       	pop	r21
    368a:	4f 91       	pop	r20
    368c:	3f 91       	pop	r19
    368e:	2f 91       	pop	r18
    3690:	0f 90       	pop	r0
    3692:	0b be       	out	0x3b, r0	; 59
    3694:	0f 90       	pop	r0
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	0f 90       	pop	r0
    369a:	1f 90       	pop	r1
    369c:	18 95       	reti

0000369e <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    369e:	1f 92       	push	r1
    36a0:	0f 92       	push	r0
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	0f 92       	push	r0
    36a6:	11 24       	eor	r1, r1
    36a8:	0b b6       	in	r0, 0x3b	; 59
    36aa:	0f 92       	push	r0
    36ac:	2f 93       	push	r18
    36ae:	3f 93       	push	r19
    36b0:	4f 93       	push	r20
    36b2:	5f 93       	push	r21
    36b4:	6f 93       	push	r22
    36b6:	7f 93       	push	r23
    36b8:	8f 93       	push	r24
    36ba:	9f 93       	push	r25
    36bc:	af 93       	push	r26
    36be:	bf 93       	push	r27
    36c0:	ef 93       	push	r30
    36c2:	ff 93       	push	r31
    36c4:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <InterruptFuncTable+0xa>
    36c8:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <InterruptFuncTable+0xb>
    36cc:	30 97       	sbiw	r30, 0x00	; 0
    36ce:	29 f0       	breq	.+10     	; 0x36da <__vector_5+0x3c>
    36d0:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <InterruptSenderTable+0xa>
    36d4:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <InterruptSenderTable+0xb>
    36d8:	19 95       	eicall
    36da:	ff 91       	pop	r31
    36dc:	ef 91       	pop	r30
    36de:	bf 91       	pop	r27
    36e0:	af 91       	pop	r26
    36e2:	9f 91       	pop	r25
    36e4:	8f 91       	pop	r24
    36e6:	7f 91       	pop	r23
    36e8:	6f 91       	pop	r22
    36ea:	5f 91       	pop	r21
    36ec:	4f 91       	pop	r20
    36ee:	3f 91       	pop	r19
    36f0:	2f 91       	pop	r18
    36f2:	0f 90       	pop	r0
    36f4:	0b be       	out	0x3b, r0	; 59
    36f6:	0f 90       	pop	r0
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	0f 90       	pop	r0
    36fc:	1f 90       	pop	r1
    36fe:	18 95       	reti

00003700 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    3700:	1f 92       	push	r1
    3702:	0f 92       	push	r0
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	0f 92       	push	r0
    3708:	11 24       	eor	r1, r1
    370a:	0b b6       	in	r0, 0x3b	; 59
    370c:	0f 92       	push	r0
    370e:	2f 93       	push	r18
    3710:	3f 93       	push	r19
    3712:	4f 93       	push	r20
    3714:	5f 93       	push	r21
    3716:	6f 93       	push	r22
    3718:	7f 93       	push	r23
    371a:	8f 93       	push	r24
    371c:	9f 93       	push	r25
    371e:	af 93       	push	r26
    3720:	bf 93       	push	r27
    3722:	ef 93       	push	r30
    3724:	ff 93       	push	r31
    3726:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <InterruptFuncTable+0xc>
    372a:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <InterruptFuncTable+0xd>
    372e:	30 97       	sbiw	r30, 0x00	; 0
    3730:	29 f0       	breq	.+10     	; 0x373c <__vector_6+0x3c>
    3732:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <InterruptSenderTable+0xc>
    3736:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <InterruptSenderTable+0xd>
    373a:	19 95       	eicall
    373c:	ff 91       	pop	r31
    373e:	ef 91       	pop	r30
    3740:	bf 91       	pop	r27
    3742:	af 91       	pop	r26
    3744:	9f 91       	pop	r25
    3746:	8f 91       	pop	r24
    3748:	7f 91       	pop	r23
    374a:	6f 91       	pop	r22
    374c:	5f 91       	pop	r21
    374e:	4f 91       	pop	r20
    3750:	3f 91       	pop	r19
    3752:	2f 91       	pop	r18
    3754:	0f 90       	pop	r0
    3756:	0b be       	out	0x3b, r0	; 59
    3758:	0f 90       	pop	r0
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	0f 90       	pop	r0
    375e:	1f 90       	pop	r1
    3760:	18 95       	reti

00003762 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    3762:	1f 92       	push	r1
    3764:	0f 92       	push	r0
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	0f 92       	push	r0
    376a:	11 24       	eor	r1, r1
    376c:	0b b6       	in	r0, 0x3b	; 59
    376e:	0f 92       	push	r0
    3770:	2f 93       	push	r18
    3772:	3f 93       	push	r19
    3774:	4f 93       	push	r20
    3776:	5f 93       	push	r21
    3778:	6f 93       	push	r22
    377a:	7f 93       	push	r23
    377c:	8f 93       	push	r24
    377e:	9f 93       	push	r25
    3780:	af 93       	push	r26
    3782:	bf 93       	push	r27
    3784:	ef 93       	push	r30
    3786:	ff 93       	push	r31
    3788:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <InterruptFuncTable+0xe>
    378c:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <InterruptFuncTable+0xf>
    3790:	30 97       	sbiw	r30, 0x00	; 0
    3792:	29 f0       	breq	.+10     	; 0x379e <__vector_7+0x3c>
    3794:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <InterruptSenderTable+0xe>
    3798:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <InterruptSenderTable+0xf>
    379c:	19 95       	eicall
    379e:	ff 91       	pop	r31
    37a0:	ef 91       	pop	r30
    37a2:	bf 91       	pop	r27
    37a4:	af 91       	pop	r26
    37a6:	9f 91       	pop	r25
    37a8:	8f 91       	pop	r24
    37aa:	7f 91       	pop	r23
    37ac:	6f 91       	pop	r22
    37ae:	5f 91       	pop	r21
    37b0:	4f 91       	pop	r20
    37b2:	3f 91       	pop	r19
    37b4:	2f 91       	pop	r18
    37b6:	0f 90       	pop	r0
    37b8:	0b be       	out	0x3b, r0	; 59
    37ba:	0f 90       	pop	r0
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	0f 90       	pop	r0
    37c0:	1f 90       	pop	r1
    37c2:	18 95       	reti

000037c4 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    37c4:	1f 92       	push	r1
    37c6:	0f 92       	push	r0
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	0f 92       	push	r0
    37cc:	11 24       	eor	r1, r1
    37ce:	0b b6       	in	r0, 0x3b	; 59
    37d0:	0f 92       	push	r0
    37d2:	2f 93       	push	r18
    37d4:	3f 93       	push	r19
    37d6:	4f 93       	push	r20
    37d8:	5f 93       	push	r21
    37da:	6f 93       	push	r22
    37dc:	7f 93       	push	r23
    37de:	8f 93       	push	r24
    37e0:	9f 93       	push	r25
    37e2:	af 93       	push	r26
    37e4:	bf 93       	push	r27
    37e6:	ef 93       	push	r30
    37e8:	ff 93       	push	r31
    37ea:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <InterruptFuncTable+0x10>
    37ee:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <InterruptFuncTable+0x11>
    37f2:	30 97       	sbiw	r30, 0x00	; 0
    37f4:	29 f0       	breq	.+10     	; 0x3800 <__vector_8+0x3c>
    37f6:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <InterruptSenderTable+0x10>
    37fa:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <InterruptSenderTable+0x11>
    37fe:	19 95       	eicall
    3800:	ff 91       	pop	r31
    3802:	ef 91       	pop	r30
    3804:	bf 91       	pop	r27
    3806:	af 91       	pop	r26
    3808:	9f 91       	pop	r25
    380a:	8f 91       	pop	r24
    380c:	7f 91       	pop	r23
    380e:	6f 91       	pop	r22
    3810:	5f 91       	pop	r21
    3812:	4f 91       	pop	r20
    3814:	3f 91       	pop	r19
    3816:	2f 91       	pop	r18
    3818:	0f 90       	pop	r0
    381a:	0b be       	out	0x3b, r0	; 59
    381c:	0f 90       	pop	r0
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	0f 90       	pop	r0
    3822:	1f 90       	pop	r1
    3824:	18 95       	reti

00003826 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    3826:	1f 92       	push	r1
    3828:	0f 92       	push	r0
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	0f 92       	push	r0
    382e:	11 24       	eor	r1, r1
    3830:	0b b6       	in	r0, 0x3b	; 59
    3832:	0f 92       	push	r0
    3834:	2f 93       	push	r18
    3836:	3f 93       	push	r19
    3838:	4f 93       	push	r20
    383a:	5f 93       	push	r21
    383c:	6f 93       	push	r22
    383e:	7f 93       	push	r23
    3840:	8f 93       	push	r24
    3842:	9f 93       	push	r25
    3844:	af 93       	push	r26
    3846:	bf 93       	push	r27
    3848:	ef 93       	push	r30
    384a:	ff 93       	push	r31
    384c:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <InterruptFuncTable+0x12>
    3850:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <InterruptFuncTable+0x13>
    3854:	30 97       	sbiw	r30, 0x00	; 0
    3856:	29 f0       	breq	.+10     	; 0x3862 <__vector_9+0x3c>
    3858:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <InterruptSenderTable+0x12>
    385c:	90 91 cf 23 	lds	r25, 0x23CF	; 0x8023cf <InterruptSenderTable+0x13>
    3860:	19 95       	eicall
    3862:	ff 91       	pop	r31
    3864:	ef 91       	pop	r30
    3866:	bf 91       	pop	r27
    3868:	af 91       	pop	r26
    386a:	9f 91       	pop	r25
    386c:	8f 91       	pop	r24
    386e:	7f 91       	pop	r23
    3870:	6f 91       	pop	r22
    3872:	5f 91       	pop	r21
    3874:	4f 91       	pop	r20
    3876:	3f 91       	pop	r19
    3878:	2f 91       	pop	r18
    387a:	0f 90       	pop	r0
    387c:	0b be       	out	0x3b, r0	; 59
    387e:	0f 90       	pop	r0
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	0f 90       	pop	r0
    3884:	1f 90       	pop	r1
    3886:	18 95       	reti

00003888 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    3888:	1f 92       	push	r1
    388a:	0f 92       	push	r0
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	0f 92       	push	r0
    3890:	11 24       	eor	r1, r1
    3892:	0b b6       	in	r0, 0x3b	; 59
    3894:	0f 92       	push	r0
    3896:	2f 93       	push	r18
    3898:	3f 93       	push	r19
    389a:	4f 93       	push	r20
    389c:	5f 93       	push	r21
    389e:	6f 93       	push	r22
    38a0:	7f 93       	push	r23
    38a2:	8f 93       	push	r24
    38a4:	9f 93       	push	r25
    38a6:	af 93       	push	r26
    38a8:	bf 93       	push	r27
    38aa:	ef 93       	push	r30
    38ac:	ff 93       	push	r31
    38ae:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <InterruptFuncTable+0x14>
    38b2:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <InterruptFuncTable+0x15>
    38b6:	30 97       	sbiw	r30, 0x00	; 0
    38b8:	29 f0       	breq	.+10     	; 0x38c4 <__vector_10+0x3c>
    38ba:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <InterruptSenderTable+0x14>
    38be:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <InterruptSenderTable+0x15>
    38c2:	19 95       	eicall
    38c4:	ff 91       	pop	r31
    38c6:	ef 91       	pop	r30
    38c8:	bf 91       	pop	r27
    38ca:	af 91       	pop	r26
    38cc:	9f 91       	pop	r25
    38ce:	8f 91       	pop	r24
    38d0:	7f 91       	pop	r23
    38d2:	6f 91       	pop	r22
    38d4:	5f 91       	pop	r21
    38d6:	4f 91       	pop	r20
    38d8:	3f 91       	pop	r19
    38da:	2f 91       	pop	r18
    38dc:	0f 90       	pop	r0
    38de:	0b be       	out	0x3b, r0	; 59
    38e0:	0f 90       	pop	r0
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	0f 90       	pop	r0
    38e6:	1f 90       	pop	r1
    38e8:	18 95       	reti

000038ea <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    38ea:	1f 92       	push	r1
    38ec:	0f 92       	push	r0
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	0f 92       	push	r0
    38f2:	11 24       	eor	r1, r1
    38f4:	0b b6       	in	r0, 0x3b	; 59
    38f6:	0f 92       	push	r0
    38f8:	2f 93       	push	r18
    38fa:	3f 93       	push	r19
    38fc:	4f 93       	push	r20
    38fe:	5f 93       	push	r21
    3900:	6f 93       	push	r22
    3902:	7f 93       	push	r23
    3904:	8f 93       	push	r24
    3906:	9f 93       	push	r25
    3908:	af 93       	push	r26
    390a:	bf 93       	push	r27
    390c:	ef 93       	push	r30
    390e:	ff 93       	push	r31
    3910:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <InterruptFuncTable+0x16>
    3914:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <InterruptFuncTable+0x17>
    3918:	30 97       	sbiw	r30, 0x00	; 0
    391a:	29 f0       	breq	.+10     	; 0x3926 <__vector_11+0x3c>
    391c:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <InterruptSenderTable+0x16>
    3920:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <InterruptSenderTable+0x17>
    3924:	19 95       	eicall
    3926:	ff 91       	pop	r31
    3928:	ef 91       	pop	r30
    392a:	bf 91       	pop	r27
    392c:	af 91       	pop	r26
    392e:	9f 91       	pop	r25
    3930:	8f 91       	pop	r24
    3932:	7f 91       	pop	r23
    3934:	6f 91       	pop	r22
    3936:	5f 91       	pop	r21
    3938:	4f 91       	pop	r20
    393a:	3f 91       	pop	r19
    393c:	2f 91       	pop	r18
    393e:	0f 90       	pop	r0
    3940:	0b be       	out	0x3b, r0	; 59
    3942:	0f 90       	pop	r0
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	0f 90       	pop	r0
    3948:	1f 90       	pop	r1
    394a:	18 95       	reti

0000394c <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    394c:	1f 92       	push	r1
    394e:	0f 92       	push	r0
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	0f 92       	push	r0
    3954:	11 24       	eor	r1, r1
    3956:	0b b6       	in	r0, 0x3b	; 59
    3958:	0f 92       	push	r0
    395a:	2f 93       	push	r18
    395c:	3f 93       	push	r19
    395e:	4f 93       	push	r20
    3960:	5f 93       	push	r21
    3962:	6f 93       	push	r22
    3964:	7f 93       	push	r23
    3966:	8f 93       	push	r24
    3968:	9f 93       	push	r25
    396a:	af 93       	push	r26
    396c:	bf 93       	push	r27
    396e:	ef 93       	push	r30
    3970:	ff 93       	push	r31
    3972:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <InterruptFuncTable+0x18>
    3976:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <InterruptFuncTable+0x19>
    397a:	30 97       	sbiw	r30, 0x00	; 0
    397c:	29 f0       	breq	.+10     	; 0x3988 <__vector_12+0x3c>
    397e:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <InterruptSenderTable+0x18>
    3982:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <InterruptSenderTable+0x19>
    3986:	19 95       	eicall
    3988:	ff 91       	pop	r31
    398a:	ef 91       	pop	r30
    398c:	bf 91       	pop	r27
    398e:	af 91       	pop	r26
    3990:	9f 91       	pop	r25
    3992:	8f 91       	pop	r24
    3994:	7f 91       	pop	r23
    3996:	6f 91       	pop	r22
    3998:	5f 91       	pop	r21
    399a:	4f 91       	pop	r20
    399c:	3f 91       	pop	r19
    399e:	2f 91       	pop	r18
    39a0:	0f 90       	pop	r0
    39a2:	0b be       	out	0x3b, r0	; 59
    39a4:	0f 90       	pop	r0
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	0f 90       	pop	r0
    39aa:	1f 90       	pop	r1
    39ac:	18 95       	reti

000039ae <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    39ae:	1f 92       	push	r1
    39b0:	0f 92       	push	r0
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	0f 92       	push	r0
    39b6:	11 24       	eor	r1, r1
    39b8:	0b b6       	in	r0, 0x3b	; 59
    39ba:	0f 92       	push	r0
    39bc:	2f 93       	push	r18
    39be:	3f 93       	push	r19
    39c0:	4f 93       	push	r20
    39c2:	5f 93       	push	r21
    39c4:	6f 93       	push	r22
    39c6:	7f 93       	push	r23
    39c8:	8f 93       	push	r24
    39ca:	9f 93       	push	r25
    39cc:	af 93       	push	r26
    39ce:	bf 93       	push	r27
    39d0:	ef 93       	push	r30
    39d2:	ff 93       	push	r31
    39d4:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <InterruptFuncTable+0x1a>
    39d8:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <InterruptFuncTable+0x1b>
    39dc:	30 97       	sbiw	r30, 0x00	; 0
    39de:	29 f0       	breq	.+10     	; 0x39ea <__vector_13+0x3c>
    39e0:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <InterruptSenderTable+0x1a>
    39e4:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <InterruptSenderTable+0x1b>
    39e8:	19 95       	eicall
    39ea:	ff 91       	pop	r31
    39ec:	ef 91       	pop	r30
    39ee:	bf 91       	pop	r27
    39f0:	af 91       	pop	r26
    39f2:	9f 91       	pop	r25
    39f4:	8f 91       	pop	r24
    39f6:	7f 91       	pop	r23
    39f8:	6f 91       	pop	r22
    39fa:	5f 91       	pop	r21
    39fc:	4f 91       	pop	r20
    39fe:	3f 91       	pop	r19
    3a00:	2f 91       	pop	r18
    3a02:	0f 90       	pop	r0
    3a04:	0b be       	out	0x3b, r0	; 59
    3a06:	0f 90       	pop	r0
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	0f 90       	pop	r0
    3a0c:	1f 90       	pop	r1
    3a0e:	18 95       	reti

00003a10 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    3a10:	1f 92       	push	r1
    3a12:	0f 92       	push	r0
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	0f 92       	push	r0
    3a18:	11 24       	eor	r1, r1
    3a1a:	0b b6       	in	r0, 0x3b	; 59
    3a1c:	0f 92       	push	r0
    3a1e:	2f 93       	push	r18
    3a20:	3f 93       	push	r19
    3a22:	4f 93       	push	r20
    3a24:	5f 93       	push	r21
    3a26:	6f 93       	push	r22
    3a28:	7f 93       	push	r23
    3a2a:	8f 93       	push	r24
    3a2c:	9f 93       	push	r25
    3a2e:	af 93       	push	r26
    3a30:	bf 93       	push	r27
    3a32:	ef 93       	push	r30
    3a34:	ff 93       	push	r31
    3a36:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <InterruptFuncTable+0x1c>
    3a3a:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <InterruptFuncTable+0x1d>
    3a3e:	30 97       	sbiw	r30, 0x00	; 0
    3a40:	29 f0       	breq	.+10     	; 0x3a4c <__vector_14+0x3c>
    3a42:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <InterruptSenderTable+0x1c>
    3a46:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <InterruptSenderTable+0x1d>
    3a4a:	19 95       	eicall
    3a4c:	ff 91       	pop	r31
    3a4e:	ef 91       	pop	r30
    3a50:	bf 91       	pop	r27
    3a52:	af 91       	pop	r26
    3a54:	9f 91       	pop	r25
    3a56:	8f 91       	pop	r24
    3a58:	7f 91       	pop	r23
    3a5a:	6f 91       	pop	r22
    3a5c:	5f 91       	pop	r21
    3a5e:	4f 91       	pop	r20
    3a60:	3f 91       	pop	r19
    3a62:	2f 91       	pop	r18
    3a64:	0f 90       	pop	r0
    3a66:	0b be       	out	0x3b, r0	; 59
    3a68:	0f 90       	pop	r0
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	0f 90       	pop	r0
    3a6e:	1f 90       	pop	r1
    3a70:	18 95       	reti

00003a72 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    3a72:	1f 92       	push	r1
    3a74:	0f 92       	push	r0
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	0f 92       	push	r0
    3a7a:	11 24       	eor	r1, r1
    3a7c:	0b b6       	in	r0, 0x3b	; 59
    3a7e:	0f 92       	push	r0
    3a80:	2f 93       	push	r18
    3a82:	3f 93       	push	r19
    3a84:	4f 93       	push	r20
    3a86:	5f 93       	push	r21
    3a88:	6f 93       	push	r22
    3a8a:	7f 93       	push	r23
    3a8c:	8f 93       	push	r24
    3a8e:	9f 93       	push	r25
    3a90:	af 93       	push	r26
    3a92:	bf 93       	push	r27
    3a94:	ef 93       	push	r30
    3a96:	ff 93       	push	r31
    3a98:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <InterruptFuncTable+0x1e>
    3a9c:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <InterruptFuncTable+0x1f>
    3aa0:	30 97       	sbiw	r30, 0x00	; 0
    3aa2:	29 f0       	breq	.+10     	; 0x3aae <__vector_15+0x3c>
    3aa4:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <InterruptSenderTable+0x1e>
    3aa8:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <InterruptSenderTable+0x1f>
    3aac:	19 95       	eicall
    3aae:	ff 91       	pop	r31
    3ab0:	ef 91       	pop	r30
    3ab2:	bf 91       	pop	r27
    3ab4:	af 91       	pop	r26
    3ab6:	9f 91       	pop	r25
    3ab8:	8f 91       	pop	r24
    3aba:	7f 91       	pop	r23
    3abc:	6f 91       	pop	r22
    3abe:	5f 91       	pop	r21
    3ac0:	4f 91       	pop	r20
    3ac2:	3f 91       	pop	r19
    3ac4:	2f 91       	pop	r18
    3ac6:	0f 90       	pop	r0
    3ac8:	0b be       	out	0x3b, r0	; 59
    3aca:	0f 90       	pop	r0
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	0f 90       	pop	r0
    3ad0:	1f 90       	pop	r1
    3ad2:	18 95       	reti

00003ad4 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    3ad4:	1f 92       	push	r1
    3ad6:	0f 92       	push	r0
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	0f 92       	push	r0
    3adc:	11 24       	eor	r1, r1
    3ade:	0b b6       	in	r0, 0x3b	; 59
    3ae0:	0f 92       	push	r0
    3ae2:	2f 93       	push	r18
    3ae4:	3f 93       	push	r19
    3ae6:	4f 93       	push	r20
    3ae8:	5f 93       	push	r21
    3aea:	6f 93       	push	r22
    3aec:	7f 93       	push	r23
    3aee:	8f 93       	push	r24
    3af0:	9f 93       	push	r25
    3af2:	af 93       	push	r26
    3af4:	bf 93       	push	r27
    3af6:	ef 93       	push	r30
    3af8:	ff 93       	push	r31
    3afa:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <InterruptFuncTable+0x20>
    3afe:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <InterruptFuncTable+0x21>
    3b02:	30 97       	sbiw	r30, 0x00	; 0
    3b04:	29 f0       	breq	.+10     	; 0x3b10 <__vector_16+0x3c>
    3b06:	80 91 dc 23 	lds	r24, 0x23DC	; 0x8023dc <InterruptSenderTable+0x20>
    3b0a:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <InterruptSenderTable+0x21>
    3b0e:	19 95       	eicall
    3b10:	ff 91       	pop	r31
    3b12:	ef 91       	pop	r30
    3b14:	bf 91       	pop	r27
    3b16:	af 91       	pop	r26
    3b18:	9f 91       	pop	r25
    3b1a:	8f 91       	pop	r24
    3b1c:	7f 91       	pop	r23
    3b1e:	6f 91       	pop	r22
    3b20:	5f 91       	pop	r21
    3b22:	4f 91       	pop	r20
    3b24:	3f 91       	pop	r19
    3b26:	2f 91       	pop	r18
    3b28:	0f 90       	pop	r0
    3b2a:	0b be       	out	0x3b, r0	; 59
    3b2c:	0f 90       	pop	r0
    3b2e:	0f be       	out	0x3f, r0	; 63
    3b30:	0f 90       	pop	r0
    3b32:	1f 90       	pop	r1
    3b34:	18 95       	reti

00003b36 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    3b36:	1f 92       	push	r1
    3b38:	0f 92       	push	r0
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	0f 92       	push	r0
    3b3e:	11 24       	eor	r1, r1
    3b40:	0b b6       	in	r0, 0x3b	; 59
    3b42:	0f 92       	push	r0
    3b44:	2f 93       	push	r18
    3b46:	3f 93       	push	r19
    3b48:	4f 93       	push	r20
    3b4a:	5f 93       	push	r21
    3b4c:	6f 93       	push	r22
    3b4e:	7f 93       	push	r23
    3b50:	8f 93       	push	r24
    3b52:	9f 93       	push	r25
    3b54:	af 93       	push	r26
    3b56:	bf 93       	push	r27
    3b58:	ef 93       	push	r30
    3b5a:	ff 93       	push	r31
    3b5c:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <InterruptFuncTable+0x22>
    3b60:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <InterruptFuncTable+0x23>
    3b64:	30 97       	sbiw	r30, 0x00	; 0
    3b66:	29 f0       	breq	.+10     	; 0x3b72 <__vector_17+0x3c>
    3b68:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <InterruptSenderTable+0x22>
    3b6c:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <InterruptSenderTable+0x23>
    3b70:	19 95       	eicall
    3b72:	ff 91       	pop	r31
    3b74:	ef 91       	pop	r30
    3b76:	bf 91       	pop	r27
    3b78:	af 91       	pop	r26
    3b7a:	9f 91       	pop	r25
    3b7c:	8f 91       	pop	r24
    3b7e:	7f 91       	pop	r23
    3b80:	6f 91       	pop	r22
    3b82:	5f 91       	pop	r21
    3b84:	4f 91       	pop	r20
    3b86:	3f 91       	pop	r19
    3b88:	2f 91       	pop	r18
    3b8a:	0f 90       	pop	r0
    3b8c:	0b be       	out	0x3b, r0	; 59
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	0f 90       	pop	r0
    3b94:	1f 90       	pop	r1
    3b96:	18 95       	reti

00003b98 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    3b98:	1f 92       	push	r1
    3b9a:	0f 92       	push	r0
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	0f 92       	push	r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	0b b6       	in	r0, 0x3b	; 59
    3ba4:	0f 92       	push	r0
    3ba6:	2f 93       	push	r18
    3ba8:	3f 93       	push	r19
    3baa:	4f 93       	push	r20
    3bac:	5f 93       	push	r21
    3bae:	6f 93       	push	r22
    3bb0:	7f 93       	push	r23
    3bb2:	8f 93       	push	r24
    3bb4:	9f 93       	push	r25
    3bb6:	af 93       	push	r26
    3bb8:	bf 93       	push	r27
    3bba:	ef 93       	push	r30
    3bbc:	ff 93       	push	r31
    3bbe:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <InterruptFuncTable+0x24>
    3bc2:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <InterruptFuncTable+0x25>
    3bc6:	30 97       	sbiw	r30, 0x00	; 0
    3bc8:	29 f0       	breq	.+10     	; 0x3bd4 <__vector_18+0x3c>
    3bca:	80 91 e0 23 	lds	r24, 0x23E0	; 0x8023e0 <InterruptSenderTable+0x24>
    3bce:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <InterruptSenderTable+0x25>
    3bd2:	19 95       	eicall
    3bd4:	ff 91       	pop	r31
    3bd6:	ef 91       	pop	r30
    3bd8:	bf 91       	pop	r27
    3bda:	af 91       	pop	r26
    3bdc:	9f 91       	pop	r25
    3bde:	8f 91       	pop	r24
    3be0:	7f 91       	pop	r23
    3be2:	6f 91       	pop	r22
    3be4:	5f 91       	pop	r21
    3be6:	4f 91       	pop	r20
    3be8:	3f 91       	pop	r19
    3bea:	2f 91       	pop	r18
    3bec:	0f 90       	pop	r0
    3bee:	0b be       	out	0x3b, r0	; 59
    3bf0:	0f 90       	pop	r0
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	0f 90       	pop	r0
    3bf6:	1f 90       	pop	r1
    3bf8:	18 95       	reti

00003bfa <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    3bfa:	1f 92       	push	r1
    3bfc:	0f 92       	push	r0
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	0f 92       	push	r0
    3c02:	11 24       	eor	r1, r1
    3c04:	0b b6       	in	r0, 0x3b	; 59
    3c06:	0f 92       	push	r0
    3c08:	2f 93       	push	r18
    3c0a:	3f 93       	push	r19
    3c0c:	4f 93       	push	r20
    3c0e:	5f 93       	push	r21
    3c10:	6f 93       	push	r22
    3c12:	7f 93       	push	r23
    3c14:	8f 93       	push	r24
    3c16:	9f 93       	push	r25
    3c18:	af 93       	push	r26
    3c1a:	bf 93       	push	r27
    3c1c:	ef 93       	push	r30
    3c1e:	ff 93       	push	r31
    3c20:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <InterruptFuncTable+0x26>
    3c24:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <InterruptFuncTable+0x27>
    3c28:	30 97       	sbiw	r30, 0x00	; 0
    3c2a:	29 f0       	breq	.+10     	; 0x3c36 <__vector_19+0x3c>
    3c2c:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <InterruptSenderTable+0x26>
    3c30:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <InterruptSenderTable+0x27>
    3c34:	19 95       	eicall
    3c36:	ff 91       	pop	r31
    3c38:	ef 91       	pop	r30
    3c3a:	bf 91       	pop	r27
    3c3c:	af 91       	pop	r26
    3c3e:	9f 91       	pop	r25
    3c40:	8f 91       	pop	r24
    3c42:	7f 91       	pop	r23
    3c44:	6f 91       	pop	r22
    3c46:	5f 91       	pop	r21
    3c48:	4f 91       	pop	r20
    3c4a:	3f 91       	pop	r19
    3c4c:	2f 91       	pop	r18
    3c4e:	0f 90       	pop	r0
    3c50:	0b be       	out	0x3b, r0	; 59
    3c52:	0f 90       	pop	r0
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	0f 90       	pop	r0
    3c58:	1f 90       	pop	r1
    3c5a:	18 95       	reti

00003c5c <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    3c5c:	1f 92       	push	r1
    3c5e:	0f 92       	push	r0
    3c60:	0f b6       	in	r0, 0x3f	; 63
    3c62:	0f 92       	push	r0
    3c64:	11 24       	eor	r1, r1
    3c66:	0b b6       	in	r0, 0x3b	; 59
    3c68:	0f 92       	push	r0
    3c6a:	2f 93       	push	r18
    3c6c:	3f 93       	push	r19
    3c6e:	4f 93       	push	r20
    3c70:	5f 93       	push	r21
    3c72:	6f 93       	push	r22
    3c74:	7f 93       	push	r23
    3c76:	8f 93       	push	r24
    3c78:	9f 93       	push	r25
    3c7a:	af 93       	push	r26
    3c7c:	bf 93       	push	r27
    3c7e:	ef 93       	push	r30
    3c80:	ff 93       	push	r31
    3c82:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <InterruptFuncTable+0x28>
    3c86:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <InterruptFuncTable+0x29>
    3c8a:	30 97       	sbiw	r30, 0x00	; 0
    3c8c:	29 f0       	breq	.+10     	; 0x3c98 <__vector_20+0x3c>
    3c8e:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <InterruptSenderTable+0x28>
    3c92:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <InterruptSenderTable+0x29>
    3c96:	19 95       	eicall
    3c98:	ff 91       	pop	r31
    3c9a:	ef 91       	pop	r30
    3c9c:	bf 91       	pop	r27
    3c9e:	af 91       	pop	r26
    3ca0:	9f 91       	pop	r25
    3ca2:	8f 91       	pop	r24
    3ca4:	7f 91       	pop	r23
    3ca6:	6f 91       	pop	r22
    3ca8:	5f 91       	pop	r21
    3caa:	4f 91       	pop	r20
    3cac:	3f 91       	pop	r19
    3cae:	2f 91       	pop	r18
    3cb0:	0f 90       	pop	r0
    3cb2:	0b be       	out	0x3b, r0	; 59
    3cb4:	0f 90       	pop	r0
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	0f 90       	pop	r0
    3cba:	1f 90       	pop	r1
    3cbc:	18 95       	reti

00003cbe <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    3cbe:	1f 92       	push	r1
    3cc0:	0f 92       	push	r0
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	0f 92       	push	r0
    3cc6:	11 24       	eor	r1, r1
    3cc8:	0b b6       	in	r0, 0x3b	; 59
    3cca:	0f 92       	push	r0
    3ccc:	2f 93       	push	r18
    3cce:	3f 93       	push	r19
    3cd0:	4f 93       	push	r20
    3cd2:	5f 93       	push	r21
    3cd4:	6f 93       	push	r22
    3cd6:	7f 93       	push	r23
    3cd8:	8f 93       	push	r24
    3cda:	9f 93       	push	r25
    3cdc:	af 93       	push	r26
    3cde:	bf 93       	push	r27
    3ce0:	ef 93       	push	r30
    3ce2:	ff 93       	push	r31
    3ce4:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <InterruptFuncTable+0x2a>
    3ce8:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <InterruptFuncTable+0x2b>
    3cec:	30 97       	sbiw	r30, 0x00	; 0
    3cee:	29 f0       	breq	.+10     	; 0x3cfa <__vector_21+0x3c>
    3cf0:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <InterruptSenderTable+0x2a>
    3cf4:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <InterruptSenderTable+0x2b>
    3cf8:	19 95       	eicall
    3cfa:	ff 91       	pop	r31
    3cfc:	ef 91       	pop	r30
    3cfe:	bf 91       	pop	r27
    3d00:	af 91       	pop	r26
    3d02:	9f 91       	pop	r25
    3d04:	8f 91       	pop	r24
    3d06:	7f 91       	pop	r23
    3d08:	6f 91       	pop	r22
    3d0a:	5f 91       	pop	r21
    3d0c:	4f 91       	pop	r20
    3d0e:	3f 91       	pop	r19
    3d10:	2f 91       	pop	r18
    3d12:	0f 90       	pop	r0
    3d14:	0b be       	out	0x3b, r0	; 59
    3d16:	0f 90       	pop	r0
    3d18:	0f be       	out	0x3f, r0	; 63
    3d1a:	0f 90       	pop	r0
    3d1c:	1f 90       	pop	r1
    3d1e:	18 95       	reti

00003d20 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    3d20:	1f 92       	push	r1
    3d22:	0f 92       	push	r0
    3d24:	0f b6       	in	r0, 0x3f	; 63
    3d26:	0f 92       	push	r0
    3d28:	11 24       	eor	r1, r1
    3d2a:	0b b6       	in	r0, 0x3b	; 59
    3d2c:	0f 92       	push	r0
    3d2e:	2f 93       	push	r18
    3d30:	3f 93       	push	r19
    3d32:	4f 93       	push	r20
    3d34:	5f 93       	push	r21
    3d36:	6f 93       	push	r22
    3d38:	7f 93       	push	r23
    3d3a:	8f 93       	push	r24
    3d3c:	9f 93       	push	r25
    3d3e:	af 93       	push	r26
    3d40:	bf 93       	push	r27
    3d42:	ef 93       	push	r30
    3d44:	ff 93       	push	r31
    3d46:	e0 91 f2 22 	lds	r30, 0x22F2	; 0x8022f2 <InterruptFuncTable+0x2c>
    3d4a:	f0 91 f3 22 	lds	r31, 0x22F3	; 0x8022f3 <InterruptFuncTable+0x2d>
    3d4e:	30 97       	sbiw	r30, 0x00	; 0
    3d50:	29 f0       	breq	.+10     	; 0x3d5c <__vector_22+0x3c>
    3d52:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <InterruptSenderTable+0x2c>
    3d56:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <InterruptSenderTable+0x2d>
    3d5a:	19 95       	eicall
    3d5c:	ff 91       	pop	r31
    3d5e:	ef 91       	pop	r30
    3d60:	bf 91       	pop	r27
    3d62:	af 91       	pop	r26
    3d64:	9f 91       	pop	r25
    3d66:	8f 91       	pop	r24
    3d68:	7f 91       	pop	r23
    3d6a:	6f 91       	pop	r22
    3d6c:	5f 91       	pop	r21
    3d6e:	4f 91       	pop	r20
    3d70:	3f 91       	pop	r19
    3d72:	2f 91       	pop	r18
    3d74:	0f 90       	pop	r0
    3d76:	0b be       	out	0x3b, r0	; 59
    3d78:	0f 90       	pop	r0
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	0f 90       	pop	r0
    3d7e:	1f 90       	pop	r1
    3d80:	18 95       	reti

00003d82 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    3d82:	1f 92       	push	r1
    3d84:	0f 92       	push	r0
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	0f 92       	push	r0
    3d8a:	11 24       	eor	r1, r1
    3d8c:	0b b6       	in	r0, 0x3b	; 59
    3d8e:	0f 92       	push	r0
    3d90:	2f 93       	push	r18
    3d92:	3f 93       	push	r19
    3d94:	4f 93       	push	r20
    3d96:	5f 93       	push	r21
    3d98:	6f 93       	push	r22
    3d9a:	7f 93       	push	r23
    3d9c:	8f 93       	push	r24
    3d9e:	9f 93       	push	r25
    3da0:	af 93       	push	r26
    3da2:	bf 93       	push	r27
    3da4:	ef 93       	push	r30
    3da6:	ff 93       	push	r31
    3da8:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <InterruptFuncTable+0x2e>
    3dac:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <InterruptFuncTable+0x2f>
    3db0:	30 97       	sbiw	r30, 0x00	; 0
    3db2:	29 f0       	breq	.+10     	; 0x3dbe <__vector_23+0x3c>
    3db4:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <InterruptSenderTable+0x2e>
    3db8:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <InterruptSenderTable+0x2f>
    3dbc:	19 95       	eicall
    3dbe:	ff 91       	pop	r31
    3dc0:	ef 91       	pop	r30
    3dc2:	bf 91       	pop	r27
    3dc4:	af 91       	pop	r26
    3dc6:	9f 91       	pop	r25
    3dc8:	8f 91       	pop	r24
    3dca:	7f 91       	pop	r23
    3dcc:	6f 91       	pop	r22
    3dce:	5f 91       	pop	r21
    3dd0:	4f 91       	pop	r20
    3dd2:	3f 91       	pop	r19
    3dd4:	2f 91       	pop	r18
    3dd6:	0f 90       	pop	r0
    3dd8:	0b be       	out	0x3b, r0	; 59
    3dda:	0f 90       	pop	r0
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	0f 90       	pop	r0
    3de0:	1f 90       	pop	r1
    3de2:	18 95       	reti

00003de4 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    3de4:	1f 92       	push	r1
    3de6:	0f 92       	push	r0
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	0f 92       	push	r0
    3dec:	11 24       	eor	r1, r1
    3dee:	0b b6       	in	r0, 0x3b	; 59
    3df0:	0f 92       	push	r0
    3df2:	2f 93       	push	r18
    3df4:	3f 93       	push	r19
    3df6:	4f 93       	push	r20
    3df8:	5f 93       	push	r21
    3dfa:	6f 93       	push	r22
    3dfc:	7f 93       	push	r23
    3dfe:	8f 93       	push	r24
    3e00:	9f 93       	push	r25
    3e02:	af 93       	push	r26
    3e04:	bf 93       	push	r27
    3e06:	ef 93       	push	r30
    3e08:	ff 93       	push	r31
    3e0a:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <InterruptFuncTable+0x30>
    3e0e:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <InterruptFuncTable+0x31>
    3e12:	30 97       	sbiw	r30, 0x00	; 0
    3e14:	29 f0       	breq	.+10     	; 0x3e20 <__vector_24+0x3c>
    3e16:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <InterruptSenderTable+0x30>
    3e1a:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <InterruptSenderTable+0x31>
    3e1e:	19 95       	eicall
    3e20:	ff 91       	pop	r31
    3e22:	ef 91       	pop	r30
    3e24:	bf 91       	pop	r27
    3e26:	af 91       	pop	r26
    3e28:	9f 91       	pop	r25
    3e2a:	8f 91       	pop	r24
    3e2c:	7f 91       	pop	r23
    3e2e:	6f 91       	pop	r22
    3e30:	5f 91       	pop	r21
    3e32:	4f 91       	pop	r20
    3e34:	3f 91       	pop	r19
    3e36:	2f 91       	pop	r18
    3e38:	0f 90       	pop	r0
    3e3a:	0b be       	out	0x3b, r0	; 59
    3e3c:	0f 90       	pop	r0
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	0f 90       	pop	r0
    3e42:	1f 90       	pop	r1
    3e44:	18 95       	reti

00003e46 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    3e46:	1f 92       	push	r1
    3e48:	0f 92       	push	r0
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	0f 92       	push	r0
    3e4e:	11 24       	eor	r1, r1
    3e50:	0b b6       	in	r0, 0x3b	; 59
    3e52:	0f 92       	push	r0
    3e54:	2f 93       	push	r18
    3e56:	3f 93       	push	r19
    3e58:	4f 93       	push	r20
    3e5a:	5f 93       	push	r21
    3e5c:	6f 93       	push	r22
    3e5e:	7f 93       	push	r23
    3e60:	8f 93       	push	r24
    3e62:	9f 93       	push	r25
    3e64:	af 93       	push	r26
    3e66:	bf 93       	push	r27
    3e68:	ef 93       	push	r30
    3e6a:	ff 93       	push	r31
    3e6c:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <InterruptFuncTable+0x32>
    3e70:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <InterruptFuncTable+0x33>
    3e74:	30 97       	sbiw	r30, 0x00	; 0
    3e76:	29 f0       	breq	.+10     	; 0x3e82 <__vector_25+0x3c>
    3e78:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <InterruptSenderTable+0x32>
    3e7c:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <InterruptSenderTable+0x33>
    3e80:	19 95       	eicall
    3e82:	ff 91       	pop	r31
    3e84:	ef 91       	pop	r30
    3e86:	bf 91       	pop	r27
    3e88:	af 91       	pop	r26
    3e8a:	9f 91       	pop	r25
    3e8c:	8f 91       	pop	r24
    3e8e:	7f 91       	pop	r23
    3e90:	6f 91       	pop	r22
    3e92:	5f 91       	pop	r21
    3e94:	4f 91       	pop	r20
    3e96:	3f 91       	pop	r19
    3e98:	2f 91       	pop	r18
    3e9a:	0f 90       	pop	r0
    3e9c:	0b be       	out	0x3b, r0	; 59
    3e9e:	0f 90       	pop	r0
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	0f 90       	pop	r0
    3ea4:	1f 90       	pop	r1
    3ea6:	18 95       	reti

00003ea8 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    3ea8:	1f 92       	push	r1
    3eaa:	0f 92       	push	r0
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	0f 92       	push	r0
    3eb0:	11 24       	eor	r1, r1
    3eb2:	0b b6       	in	r0, 0x3b	; 59
    3eb4:	0f 92       	push	r0
    3eb6:	2f 93       	push	r18
    3eb8:	3f 93       	push	r19
    3eba:	4f 93       	push	r20
    3ebc:	5f 93       	push	r21
    3ebe:	6f 93       	push	r22
    3ec0:	7f 93       	push	r23
    3ec2:	8f 93       	push	r24
    3ec4:	9f 93       	push	r25
    3ec6:	af 93       	push	r26
    3ec8:	bf 93       	push	r27
    3eca:	ef 93       	push	r30
    3ecc:	ff 93       	push	r31
    3ece:	e0 91 fa 22 	lds	r30, 0x22FA	; 0x8022fa <InterruptFuncTable+0x34>
    3ed2:	f0 91 fb 22 	lds	r31, 0x22FB	; 0x8022fb <InterruptFuncTable+0x35>
    3ed6:	30 97       	sbiw	r30, 0x00	; 0
    3ed8:	29 f0       	breq	.+10     	; 0x3ee4 <__vector_26+0x3c>
    3eda:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <InterruptSenderTable+0x34>
    3ede:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <InterruptSenderTable+0x35>
    3ee2:	19 95       	eicall
    3ee4:	ff 91       	pop	r31
    3ee6:	ef 91       	pop	r30
    3ee8:	bf 91       	pop	r27
    3eea:	af 91       	pop	r26
    3eec:	9f 91       	pop	r25
    3eee:	8f 91       	pop	r24
    3ef0:	7f 91       	pop	r23
    3ef2:	6f 91       	pop	r22
    3ef4:	5f 91       	pop	r21
    3ef6:	4f 91       	pop	r20
    3ef8:	3f 91       	pop	r19
    3efa:	2f 91       	pop	r18
    3efc:	0f 90       	pop	r0
    3efe:	0b be       	out	0x3b, r0	; 59
    3f00:	0f 90       	pop	r0
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	0f 90       	pop	r0
    3f06:	1f 90       	pop	r1
    3f08:	18 95       	reti

00003f0a <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    3f0a:	1f 92       	push	r1
    3f0c:	0f 92       	push	r0
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	0f 92       	push	r0
    3f12:	11 24       	eor	r1, r1
    3f14:	0b b6       	in	r0, 0x3b	; 59
    3f16:	0f 92       	push	r0
    3f18:	2f 93       	push	r18
    3f1a:	3f 93       	push	r19
    3f1c:	4f 93       	push	r20
    3f1e:	5f 93       	push	r21
    3f20:	6f 93       	push	r22
    3f22:	7f 93       	push	r23
    3f24:	8f 93       	push	r24
    3f26:	9f 93       	push	r25
    3f28:	af 93       	push	r26
    3f2a:	bf 93       	push	r27
    3f2c:	ef 93       	push	r30
    3f2e:	ff 93       	push	r31
    3f30:	e0 91 fc 22 	lds	r30, 0x22FC	; 0x8022fc <InterruptFuncTable+0x36>
    3f34:	f0 91 fd 22 	lds	r31, 0x22FD	; 0x8022fd <InterruptFuncTable+0x37>
    3f38:	30 97       	sbiw	r30, 0x00	; 0
    3f3a:	29 f0       	breq	.+10     	; 0x3f46 <__vector_27+0x3c>
    3f3c:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <InterruptSenderTable+0x36>
    3f40:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <InterruptSenderTable+0x37>
    3f44:	19 95       	eicall
    3f46:	ff 91       	pop	r31
    3f48:	ef 91       	pop	r30
    3f4a:	bf 91       	pop	r27
    3f4c:	af 91       	pop	r26
    3f4e:	9f 91       	pop	r25
    3f50:	8f 91       	pop	r24
    3f52:	7f 91       	pop	r23
    3f54:	6f 91       	pop	r22
    3f56:	5f 91       	pop	r21
    3f58:	4f 91       	pop	r20
    3f5a:	3f 91       	pop	r19
    3f5c:	2f 91       	pop	r18
    3f5e:	0f 90       	pop	r0
    3f60:	0b be       	out	0x3b, r0	; 59
    3f62:	0f 90       	pop	r0
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	0f 90       	pop	r0
    3f68:	1f 90       	pop	r1
    3f6a:	18 95       	reti

00003f6c <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    3f6c:	1f 92       	push	r1
    3f6e:	0f 92       	push	r0
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	0f 92       	push	r0
    3f74:	11 24       	eor	r1, r1
    3f76:	0b b6       	in	r0, 0x3b	; 59
    3f78:	0f 92       	push	r0
    3f7a:	2f 93       	push	r18
    3f7c:	3f 93       	push	r19
    3f7e:	4f 93       	push	r20
    3f80:	5f 93       	push	r21
    3f82:	6f 93       	push	r22
    3f84:	7f 93       	push	r23
    3f86:	8f 93       	push	r24
    3f88:	9f 93       	push	r25
    3f8a:	af 93       	push	r26
    3f8c:	bf 93       	push	r27
    3f8e:	ef 93       	push	r30
    3f90:	ff 93       	push	r31
    3f92:	e0 91 fe 22 	lds	r30, 0x22FE	; 0x8022fe <InterruptFuncTable+0x38>
    3f96:	f0 91 ff 22 	lds	r31, 0x22FF	; 0x8022ff <InterruptFuncTable+0x39>
    3f9a:	30 97       	sbiw	r30, 0x00	; 0
    3f9c:	29 f0       	breq	.+10     	; 0x3fa8 <__vector_28+0x3c>
    3f9e:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <InterruptSenderTable+0x38>
    3fa2:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <InterruptSenderTable+0x39>
    3fa6:	19 95       	eicall
    3fa8:	ff 91       	pop	r31
    3faa:	ef 91       	pop	r30
    3fac:	bf 91       	pop	r27
    3fae:	af 91       	pop	r26
    3fb0:	9f 91       	pop	r25
    3fb2:	8f 91       	pop	r24
    3fb4:	7f 91       	pop	r23
    3fb6:	6f 91       	pop	r22
    3fb8:	5f 91       	pop	r21
    3fba:	4f 91       	pop	r20
    3fbc:	3f 91       	pop	r19
    3fbe:	2f 91       	pop	r18
    3fc0:	0f 90       	pop	r0
    3fc2:	0b be       	out	0x3b, r0	; 59
    3fc4:	0f 90       	pop	r0
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	0f 90       	pop	r0
    3fca:	1f 90       	pop	r1
    3fcc:	18 95       	reti

00003fce <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    3fce:	1f 92       	push	r1
    3fd0:	0f 92       	push	r0
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	0f 92       	push	r0
    3fd6:	11 24       	eor	r1, r1
    3fd8:	0b b6       	in	r0, 0x3b	; 59
    3fda:	0f 92       	push	r0
    3fdc:	2f 93       	push	r18
    3fde:	3f 93       	push	r19
    3fe0:	4f 93       	push	r20
    3fe2:	5f 93       	push	r21
    3fe4:	6f 93       	push	r22
    3fe6:	7f 93       	push	r23
    3fe8:	8f 93       	push	r24
    3fea:	9f 93       	push	r25
    3fec:	af 93       	push	r26
    3fee:	bf 93       	push	r27
    3ff0:	ef 93       	push	r30
    3ff2:	ff 93       	push	r31
    3ff4:	e0 91 00 23 	lds	r30, 0x2300	; 0x802300 <InterruptFuncTable+0x3a>
    3ff8:	f0 91 01 23 	lds	r31, 0x2301	; 0x802301 <InterruptFuncTable+0x3b>
    3ffc:	30 97       	sbiw	r30, 0x00	; 0
    3ffe:	29 f0       	breq	.+10     	; 0x400a <__stack+0xb>
    4000:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <InterruptSenderTable+0x3a>
    4004:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <InterruptSenderTable+0x3b>
    4008:	19 95       	eicall
    400a:	ff 91       	pop	r31
    400c:	ef 91       	pop	r30
    400e:	bf 91       	pop	r27
    4010:	af 91       	pop	r26
    4012:	9f 91       	pop	r25
    4014:	8f 91       	pop	r24
    4016:	7f 91       	pop	r23
    4018:	6f 91       	pop	r22
    401a:	5f 91       	pop	r21
    401c:	4f 91       	pop	r20
    401e:	3f 91       	pop	r19
    4020:	2f 91       	pop	r18
    4022:	0f 90       	pop	r0
    4024:	0b be       	out	0x3b, r0	; 59
    4026:	0f 90       	pop	r0
    4028:	0f be       	out	0x3f, r0	; 63
    402a:	0f 90       	pop	r0
    402c:	1f 90       	pop	r1
    402e:	18 95       	reti

00004030 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    4030:	1f 92       	push	r1
    4032:	0f 92       	push	r0
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	0f 92       	push	r0
    4038:	11 24       	eor	r1, r1
    403a:	0b b6       	in	r0, 0x3b	; 59
    403c:	0f 92       	push	r0
    403e:	2f 93       	push	r18
    4040:	3f 93       	push	r19
    4042:	4f 93       	push	r20
    4044:	5f 93       	push	r21
    4046:	6f 93       	push	r22
    4048:	7f 93       	push	r23
    404a:	8f 93       	push	r24
    404c:	9f 93       	push	r25
    404e:	af 93       	push	r26
    4050:	bf 93       	push	r27
    4052:	ef 93       	push	r30
    4054:	ff 93       	push	r31
    4056:	e0 91 02 23 	lds	r30, 0x2302	; 0x802302 <InterruptFuncTable+0x3c>
    405a:	f0 91 03 23 	lds	r31, 0x2303	; 0x802303 <InterruptFuncTable+0x3d>
    405e:	30 97       	sbiw	r30, 0x00	; 0
    4060:	29 f0       	breq	.+10     	; 0x406c <__vector_30+0x3c>
    4062:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <InterruptSenderTable+0x3c>
    4066:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <InterruptSenderTable+0x3d>
    406a:	19 95       	eicall
    406c:	ff 91       	pop	r31
    406e:	ef 91       	pop	r30
    4070:	bf 91       	pop	r27
    4072:	af 91       	pop	r26
    4074:	9f 91       	pop	r25
    4076:	8f 91       	pop	r24
    4078:	7f 91       	pop	r23
    407a:	6f 91       	pop	r22
    407c:	5f 91       	pop	r21
    407e:	4f 91       	pop	r20
    4080:	3f 91       	pop	r19
    4082:	2f 91       	pop	r18
    4084:	0f 90       	pop	r0
    4086:	0b be       	out	0x3b, r0	; 59
    4088:	0f 90       	pop	r0
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	0f 90       	pop	r0
    408e:	1f 90       	pop	r1
    4090:	18 95       	reti

00004092 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    4092:	1f 92       	push	r1
    4094:	0f 92       	push	r0
    4096:	0f b6       	in	r0, 0x3f	; 63
    4098:	0f 92       	push	r0
    409a:	11 24       	eor	r1, r1
    409c:	0b b6       	in	r0, 0x3b	; 59
    409e:	0f 92       	push	r0
    40a0:	2f 93       	push	r18
    40a2:	3f 93       	push	r19
    40a4:	4f 93       	push	r20
    40a6:	5f 93       	push	r21
    40a8:	6f 93       	push	r22
    40aa:	7f 93       	push	r23
    40ac:	8f 93       	push	r24
    40ae:	9f 93       	push	r25
    40b0:	af 93       	push	r26
    40b2:	bf 93       	push	r27
    40b4:	ef 93       	push	r30
    40b6:	ff 93       	push	r31
    40b8:	e0 91 04 23 	lds	r30, 0x2304	; 0x802304 <InterruptFuncTable+0x3e>
    40bc:	f0 91 05 23 	lds	r31, 0x2305	; 0x802305 <InterruptFuncTable+0x3f>
    40c0:	30 97       	sbiw	r30, 0x00	; 0
    40c2:	29 f0       	breq	.+10     	; 0x40ce <__vector_31+0x3c>
    40c4:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <InterruptSenderTable+0x3e>
    40c8:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <InterruptSenderTable+0x3f>
    40cc:	19 95       	eicall
    40ce:	ff 91       	pop	r31
    40d0:	ef 91       	pop	r30
    40d2:	bf 91       	pop	r27
    40d4:	af 91       	pop	r26
    40d6:	9f 91       	pop	r25
    40d8:	8f 91       	pop	r24
    40da:	7f 91       	pop	r23
    40dc:	6f 91       	pop	r22
    40de:	5f 91       	pop	r21
    40e0:	4f 91       	pop	r20
    40e2:	3f 91       	pop	r19
    40e4:	2f 91       	pop	r18
    40e6:	0f 90       	pop	r0
    40e8:	0b be       	out	0x3b, r0	; 59
    40ea:	0f 90       	pop	r0
    40ec:	0f be       	out	0x3f, r0	; 63
    40ee:	0f 90       	pop	r0
    40f0:	1f 90       	pop	r1
    40f2:	18 95       	reti

000040f4 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    40f4:	1f 92       	push	r1
    40f6:	0f 92       	push	r0
    40f8:	0f b6       	in	r0, 0x3f	; 63
    40fa:	0f 92       	push	r0
    40fc:	11 24       	eor	r1, r1
    40fe:	0b b6       	in	r0, 0x3b	; 59
    4100:	0f 92       	push	r0
    4102:	2f 93       	push	r18
    4104:	3f 93       	push	r19
    4106:	4f 93       	push	r20
    4108:	5f 93       	push	r21
    410a:	6f 93       	push	r22
    410c:	7f 93       	push	r23
    410e:	8f 93       	push	r24
    4110:	9f 93       	push	r25
    4112:	af 93       	push	r26
    4114:	bf 93       	push	r27
    4116:	ef 93       	push	r30
    4118:	ff 93       	push	r31
    411a:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <InterruptFuncTable+0x40>
    411e:	f0 91 07 23 	lds	r31, 0x2307	; 0x802307 <InterruptFuncTable+0x41>
    4122:	30 97       	sbiw	r30, 0x00	; 0
    4124:	29 f0       	breq	.+10     	; 0x4130 <__vector_32+0x3c>
    4126:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <InterruptSenderTable+0x40>
    412a:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <InterruptSenderTable+0x41>
    412e:	19 95       	eicall
    4130:	ff 91       	pop	r31
    4132:	ef 91       	pop	r30
    4134:	bf 91       	pop	r27
    4136:	af 91       	pop	r26
    4138:	9f 91       	pop	r25
    413a:	8f 91       	pop	r24
    413c:	7f 91       	pop	r23
    413e:	6f 91       	pop	r22
    4140:	5f 91       	pop	r21
    4142:	4f 91       	pop	r20
    4144:	3f 91       	pop	r19
    4146:	2f 91       	pop	r18
    4148:	0f 90       	pop	r0
    414a:	0b be       	out	0x3b, r0	; 59
    414c:	0f 90       	pop	r0
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	0f 90       	pop	r0
    4152:	1f 90       	pop	r1
    4154:	18 95       	reti

00004156 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    4156:	1f 92       	push	r1
    4158:	0f 92       	push	r0
    415a:	0f b6       	in	r0, 0x3f	; 63
    415c:	0f 92       	push	r0
    415e:	11 24       	eor	r1, r1
    4160:	0b b6       	in	r0, 0x3b	; 59
    4162:	0f 92       	push	r0
    4164:	2f 93       	push	r18
    4166:	3f 93       	push	r19
    4168:	4f 93       	push	r20
    416a:	5f 93       	push	r21
    416c:	6f 93       	push	r22
    416e:	7f 93       	push	r23
    4170:	8f 93       	push	r24
    4172:	9f 93       	push	r25
    4174:	af 93       	push	r26
    4176:	bf 93       	push	r27
    4178:	ef 93       	push	r30
    417a:	ff 93       	push	r31
    417c:	e0 91 08 23 	lds	r30, 0x2308	; 0x802308 <InterruptFuncTable+0x42>
    4180:	f0 91 09 23 	lds	r31, 0x2309	; 0x802309 <InterruptFuncTable+0x43>
    4184:	30 97       	sbiw	r30, 0x00	; 0
    4186:	29 f0       	breq	.+10     	; 0x4192 <__vector_33+0x3c>
    4188:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <InterruptSenderTable+0x42>
    418c:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <InterruptSenderTable+0x43>
    4190:	19 95       	eicall
    4192:	ff 91       	pop	r31
    4194:	ef 91       	pop	r30
    4196:	bf 91       	pop	r27
    4198:	af 91       	pop	r26
    419a:	9f 91       	pop	r25
    419c:	8f 91       	pop	r24
    419e:	7f 91       	pop	r23
    41a0:	6f 91       	pop	r22
    41a2:	5f 91       	pop	r21
    41a4:	4f 91       	pop	r20
    41a6:	3f 91       	pop	r19
    41a8:	2f 91       	pop	r18
    41aa:	0f 90       	pop	r0
    41ac:	0b be       	out	0x3b, r0	; 59
    41ae:	0f 90       	pop	r0
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	0f 90       	pop	r0
    41b4:	1f 90       	pop	r1
    41b6:	18 95       	reti

000041b8 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    41b8:	1f 92       	push	r1
    41ba:	0f 92       	push	r0
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	0f 92       	push	r0
    41c0:	11 24       	eor	r1, r1
    41c2:	0b b6       	in	r0, 0x3b	; 59
    41c4:	0f 92       	push	r0
    41c6:	2f 93       	push	r18
    41c8:	3f 93       	push	r19
    41ca:	4f 93       	push	r20
    41cc:	5f 93       	push	r21
    41ce:	6f 93       	push	r22
    41d0:	7f 93       	push	r23
    41d2:	8f 93       	push	r24
    41d4:	9f 93       	push	r25
    41d6:	af 93       	push	r26
    41d8:	bf 93       	push	r27
    41da:	ef 93       	push	r30
    41dc:	ff 93       	push	r31
    41de:	e0 91 0a 23 	lds	r30, 0x230A	; 0x80230a <InterruptFuncTable+0x44>
    41e2:	f0 91 0b 23 	lds	r31, 0x230B	; 0x80230b <InterruptFuncTable+0x45>
    41e6:	30 97       	sbiw	r30, 0x00	; 0
    41e8:	29 f0       	breq	.+10     	; 0x41f4 <__vector_34+0x3c>
    41ea:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <InterruptSenderTable+0x44>
    41ee:	90 91 01 24 	lds	r25, 0x2401	; 0x802401 <InterruptSenderTable+0x45>
    41f2:	19 95       	eicall
    41f4:	ff 91       	pop	r31
    41f6:	ef 91       	pop	r30
    41f8:	bf 91       	pop	r27
    41fa:	af 91       	pop	r26
    41fc:	9f 91       	pop	r25
    41fe:	8f 91       	pop	r24
    4200:	7f 91       	pop	r23
    4202:	6f 91       	pop	r22
    4204:	5f 91       	pop	r21
    4206:	4f 91       	pop	r20
    4208:	3f 91       	pop	r19
    420a:	2f 91       	pop	r18
    420c:	0f 90       	pop	r0
    420e:	0b be       	out	0x3b, r0	; 59
    4210:	0f 90       	pop	r0
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	0f 90       	pop	r0
    4216:	1f 90       	pop	r1
    4218:	18 95       	reti

0000421a <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    421a:	1f 92       	push	r1
    421c:	0f 92       	push	r0
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	0f 92       	push	r0
    4222:	11 24       	eor	r1, r1
    4224:	0b b6       	in	r0, 0x3b	; 59
    4226:	0f 92       	push	r0
    4228:	2f 93       	push	r18
    422a:	3f 93       	push	r19
    422c:	4f 93       	push	r20
    422e:	5f 93       	push	r21
    4230:	6f 93       	push	r22
    4232:	7f 93       	push	r23
    4234:	8f 93       	push	r24
    4236:	9f 93       	push	r25
    4238:	af 93       	push	r26
    423a:	bf 93       	push	r27
    423c:	ef 93       	push	r30
    423e:	ff 93       	push	r31
    4240:	e0 91 0c 23 	lds	r30, 0x230C	; 0x80230c <InterruptFuncTable+0x46>
    4244:	f0 91 0d 23 	lds	r31, 0x230D	; 0x80230d <InterruptFuncTable+0x47>
    4248:	30 97       	sbiw	r30, 0x00	; 0
    424a:	29 f0       	breq	.+10     	; 0x4256 <__vector_35+0x3c>
    424c:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <InterruptSenderTable+0x46>
    4250:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <InterruptSenderTable+0x47>
    4254:	19 95       	eicall
    4256:	ff 91       	pop	r31
    4258:	ef 91       	pop	r30
    425a:	bf 91       	pop	r27
    425c:	af 91       	pop	r26
    425e:	9f 91       	pop	r25
    4260:	8f 91       	pop	r24
    4262:	7f 91       	pop	r23
    4264:	6f 91       	pop	r22
    4266:	5f 91       	pop	r21
    4268:	4f 91       	pop	r20
    426a:	3f 91       	pop	r19
    426c:	2f 91       	pop	r18
    426e:	0f 90       	pop	r0
    4270:	0b be       	out	0x3b, r0	; 59
    4272:	0f 90       	pop	r0
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	0f 90       	pop	r0
    4278:	1f 90       	pop	r1
    427a:	18 95       	reti

0000427c <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    427c:	1f 92       	push	r1
    427e:	0f 92       	push	r0
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	0f 92       	push	r0
    4284:	11 24       	eor	r1, r1
    4286:	0b b6       	in	r0, 0x3b	; 59
    4288:	0f 92       	push	r0
    428a:	2f 93       	push	r18
    428c:	3f 93       	push	r19
    428e:	4f 93       	push	r20
    4290:	5f 93       	push	r21
    4292:	6f 93       	push	r22
    4294:	7f 93       	push	r23
    4296:	8f 93       	push	r24
    4298:	9f 93       	push	r25
    429a:	af 93       	push	r26
    429c:	bf 93       	push	r27
    429e:	ef 93       	push	r30
    42a0:	ff 93       	push	r31
    42a2:	e0 91 0e 23 	lds	r30, 0x230E	; 0x80230e <InterruptFuncTable+0x48>
    42a6:	f0 91 0f 23 	lds	r31, 0x230F	; 0x80230f <InterruptFuncTable+0x49>
    42aa:	30 97       	sbiw	r30, 0x00	; 0
    42ac:	29 f0       	breq	.+10     	; 0x42b8 <__vector_36+0x3c>
    42ae:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <InterruptSenderTable+0x48>
    42b2:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <InterruptSenderTable+0x49>
    42b6:	19 95       	eicall
    42b8:	ff 91       	pop	r31
    42ba:	ef 91       	pop	r30
    42bc:	bf 91       	pop	r27
    42be:	af 91       	pop	r26
    42c0:	9f 91       	pop	r25
    42c2:	8f 91       	pop	r24
    42c4:	7f 91       	pop	r23
    42c6:	6f 91       	pop	r22
    42c8:	5f 91       	pop	r21
    42ca:	4f 91       	pop	r20
    42cc:	3f 91       	pop	r19
    42ce:	2f 91       	pop	r18
    42d0:	0f 90       	pop	r0
    42d2:	0b be       	out	0x3b, r0	; 59
    42d4:	0f 90       	pop	r0
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	0f 90       	pop	r0
    42da:	1f 90       	pop	r1
    42dc:	18 95       	reti

000042de <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    42de:	1f 92       	push	r1
    42e0:	0f 92       	push	r0
    42e2:	0f b6       	in	r0, 0x3f	; 63
    42e4:	0f 92       	push	r0
    42e6:	11 24       	eor	r1, r1
    42e8:	0b b6       	in	r0, 0x3b	; 59
    42ea:	0f 92       	push	r0
    42ec:	2f 93       	push	r18
    42ee:	3f 93       	push	r19
    42f0:	4f 93       	push	r20
    42f2:	5f 93       	push	r21
    42f4:	6f 93       	push	r22
    42f6:	7f 93       	push	r23
    42f8:	8f 93       	push	r24
    42fa:	9f 93       	push	r25
    42fc:	af 93       	push	r26
    42fe:	bf 93       	push	r27
    4300:	ef 93       	push	r30
    4302:	ff 93       	push	r31
    4304:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <InterruptFuncTable+0x4a>
    4308:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <InterruptFuncTable+0x4b>
    430c:	30 97       	sbiw	r30, 0x00	; 0
    430e:	29 f0       	breq	.+10     	; 0x431a <__vector_37+0x3c>
    4310:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <InterruptSenderTable+0x4a>
    4314:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <InterruptSenderTable+0x4b>
    4318:	19 95       	eicall
    431a:	ff 91       	pop	r31
    431c:	ef 91       	pop	r30
    431e:	bf 91       	pop	r27
    4320:	af 91       	pop	r26
    4322:	9f 91       	pop	r25
    4324:	8f 91       	pop	r24
    4326:	7f 91       	pop	r23
    4328:	6f 91       	pop	r22
    432a:	5f 91       	pop	r21
    432c:	4f 91       	pop	r20
    432e:	3f 91       	pop	r19
    4330:	2f 91       	pop	r18
    4332:	0f 90       	pop	r0
    4334:	0b be       	out	0x3b, r0	; 59
    4336:	0f 90       	pop	r0
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	0f 90       	pop	r0
    433c:	1f 90       	pop	r1
    433e:	18 95       	reti

00004340 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    4340:	1f 92       	push	r1
    4342:	0f 92       	push	r0
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	0f 92       	push	r0
    4348:	11 24       	eor	r1, r1
    434a:	0b b6       	in	r0, 0x3b	; 59
    434c:	0f 92       	push	r0
    434e:	2f 93       	push	r18
    4350:	3f 93       	push	r19
    4352:	4f 93       	push	r20
    4354:	5f 93       	push	r21
    4356:	6f 93       	push	r22
    4358:	7f 93       	push	r23
    435a:	8f 93       	push	r24
    435c:	9f 93       	push	r25
    435e:	af 93       	push	r26
    4360:	bf 93       	push	r27
    4362:	ef 93       	push	r30
    4364:	ff 93       	push	r31
    4366:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <InterruptFuncTable+0x4c>
    436a:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <InterruptFuncTable+0x4d>
    436e:	30 97       	sbiw	r30, 0x00	; 0
    4370:	29 f0       	breq	.+10     	; 0x437c <__vector_38+0x3c>
    4372:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <InterruptSenderTable+0x4c>
    4376:	90 91 09 24 	lds	r25, 0x2409	; 0x802409 <InterruptSenderTable+0x4d>
    437a:	19 95       	eicall
    437c:	ff 91       	pop	r31
    437e:	ef 91       	pop	r30
    4380:	bf 91       	pop	r27
    4382:	af 91       	pop	r26
    4384:	9f 91       	pop	r25
    4386:	8f 91       	pop	r24
    4388:	7f 91       	pop	r23
    438a:	6f 91       	pop	r22
    438c:	5f 91       	pop	r21
    438e:	4f 91       	pop	r20
    4390:	3f 91       	pop	r19
    4392:	2f 91       	pop	r18
    4394:	0f 90       	pop	r0
    4396:	0b be       	out	0x3b, r0	; 59
    4398:	0f 90       	pop	r0
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	0f 90       	pop	r0
    439e:	1f 90       	pop	r1
    43a0:	18 95       	reti

000043a2 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    43a2:	1f 92       	push	r1
    43a4:	0f 92       	push	r0
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	0f 92       	push	r0
    43aa:	11 24       	eor	r1, r1
    43ac:	0b b6       	in	r0, 0x3b	; 59
    43ae:	0f 92       	push	r0
    43b0:	2f 93       	push	r18
    43b2:	3f 93       	push	r19
    43b4:	4f 93       	push	r20
    43b6:	5f 93       	push	r21
    43b8:	6f 93       	push	r22
    43ba:	7f 93       	push	r23
    43bc:	8f 93       	push	r24
    43be:	9f 93       	push	r25
    43c0:	af 93       	push	r26
    43c2:	bf 93       	push	r27
    43c4:	ef 93       	push	r30
    43c6:	ff 93       	push	r31
    43c8:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <InterruptFuncTable+0x4e>
    43cc:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <InterruptFuncTable+0x4f>
    43d0:	30 97       	sbiw	r30, 0x00	; 0
    43d2:	29 f0       	breq	.+10     	; 0x43de <__vector_39+0x3c>
    43d4:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <InterruptSenderTable+0x4e>
    43d8:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <InterruptSenderTable+0x4f>
    43dc:	19 95       	eicall
    43de:	ff 91       	pop	r31
    43e0:	ef 91       	pop	r30
    43e2:	bf 91       	pop	r27
    43e4:	af 91       	pop	r26
    43e6:	9f 91       	pop	r25
    43e8:	8f 91       	pop	r24
    43ea:	7f 91       	pop	r23
    43ec:	6f 91       	pop	r22
    43ee:	5f 91       	pop	r21
    43f0:	4f 91       	pop	r20
    43f2:	3f 91       	pop	r19
    43f4:	2f 91       	pop	r18
    43f6:	0f 90       	pop	r0
    43f8:	0b be       	out	0x3b, r0	; 59
    43fa:	0f 90       	pop	r0
    43fc:	0f be       	out	0x3f, r0	; 63
    43fe:	0f 90       	pop	r0
    4400:	1f 90       	pop	r1
    4402:	18 95       	reti

00004404 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    4404:	1f 92       	push	r1
    4406:	0f 92       	push	r0
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	0f 92       	push	r0
    440c:	11 24       	eor	r1, r1
    440e:	0b b6       	in	r0, 0x3b	; 59
    4410:	0f 92       	push	r0
    4412:	2f 93       	push	r18
    4414:	3f 93       	push	r19
    4416:	4f 93       	push	r20
    4418:	5f 93       	push	r21
    441a:	6f 93       	push	r22
    441c:	7f 93       	push	r23
    441e:	8f 93       	push	r24
    4420:	9f 93       	push	r25
    4422:	af 93       	push	r26
    4424:	bf 93       	push	r27
    4426:	ef 93       	push	r30
    4428:	ff 93       	push	r31
    442a:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <InterruptFuncTable+0x50>
    442e:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <InterruptFuncTable+0x51>
    4432:	30 97       	sbiw	r30, 0x00	; 0
    4434:	29 f0       	breq	.+10     	; 0x4440 <__vector_40+0x3c>
    4436:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <InterruptSenderTable+0x50>
    443a:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <InterruptSenderTable+0x51>
    443e:	19 95       	eicall
    4440:	ff 91       	pop	r31
    4442:	ef 91       	pop	r30
    4444:	bf 91       	pop	r27
    4446:	af 91       	pop	r26
    4448:	9f 91       	pop	r25
    444a:	8f 91       	pop	r24
    444c:	7f 91       	pop	r23
    444e:	6f 91       	pop	r22
    4450:	5f 91       	pop	r21
    4452:	4f 91       	pop	r20
    4454:	3f 91       	pop	r19
    4456:	2f 91       	pop	r18
    4458:	0f 90       	pop	r0
    445a:	0b be       	out	0x3b, r0	; 59
    445c:	0f 90       	pop	r0
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	0f 90       	pop	r0
    4462:	1f 90       	pop	r1
    4464:	18 95       	reti

00004466 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    4466:	1f 92       	push	r1
    4468:	0f 92       	push	r0
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	0f 92       	push	r0
    446e:	11 24       	eor	r1, r1
    4470:	0b b6       	in	r0, 0x3b	; 59
    4472:	0f 92       	push	r0
    4474:	2f 93       	push	r18
    4476:	3f 93       	push	r19
    4478:	4f 93       	push	r20
    447a:	5f 93       	push	r21
    447c:	6f 93       	push	r22
    447e:	7f 93       	push	r23
    4480:	8f 93       	push	r24
    4482:	9f 93       	push	r25
    4484:	af 93       	push	r26
    4486:	bf 93       	push	r27
    4488:	ef 93       	push	r30
    448a:	ff 93       	push	r31
    448c:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <InterruptFuncTable+0x52>
    4490:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <InterruptFuncTable+0x53>
    4494:	30 97       	sbiw	r30, 0x00	; 0
    4496:	29 f0       	breq	.+10     	; 0x44a2 <__vector_41+0x3c>
    4498:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <InterruptSenderTable+0x52>
    449c:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <InterruptSenderTable+0x53>
    44a0:	19 95       	eicall
    44a2:	ff 91       	pop	r31
    44a4:	ef 91       	pop	r30
    44a6:	bf 91       	pop	r27
    44a8:	af 91       	pop	r26
    44aa:	9f 91       	pop	r25
    44ac:	8f 91       	pop	r24
    44ae:	7f 91       	pop	r23
    44b0:	6f 91       	pop	r22
    44b2:	5f 91       	pop	r21
    44b4:	4f 91       	pop	r20
    44b6:	3f 91       	pop	r19
    44b8:	2f 91       	pop	r18
    44ba:	0f 90       	pop	r0
    44bc:	0b be       	out	0x3b, r0	; 59
    44be:	0f 90       	pop	r0
    44c0:	0f be       	out	0x3f, r0	; 63
    44c2:	0f 90       	pop	r0
    44c4:	1f 90       	pop	r1
    44c6:	18 95       	reti

000044c8 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    44c8:	1f 92       	push	r1
    44ca:	0f 92       	push	r0
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	0f 92       	push	r0
    44d0:	11 24       	eor	r1, r1
    44d2:	0b b6       	in	r0, 0x3b	; 59
    44d4:	0f 92       	push	r0
    44d6:	2f 93       	push	r18
    44d8:	3f 93       	push	r19
    44da:	4f 93       	push	r20
    44dc:	5f 93       	push	r21
    44de:	6f 93       	push	r22
    44e0:	7f 93       	push	r23
    44e2:	8f 93       	push	r24
    44e4:	9f 93       	push	r25
    44e6:	af 93       	push	r26
    44e8:	bf 93       	push	r27
    44ea:	ef 93       	push	r30
    44ec:	ff 93       	push	r31
    44ee:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <InterruptFuncTable+0x54>
    44f2:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <InterruptFuncTable+0x55>
    44f6:	30 97       	sbiw	r30, 0x00	; 0
    44f8:	29 f0       	breq	.+10     	; 0x4504 <__vector_42+0x3c>
    44fa:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <InterruptSenderTable+0x54>
    44fe:	90 91 11 24 	lds	r25, 0x2411	; 0x802411 <InterruptSenderTable+0x55>
    4502:	19 95       	eicall
    4504:	ff 91       	pop	r31
    4506:	ef 91       	pop	r30
    4508:	bf 91       	pop	r27
    450a:	af 91       	pop	r26
    450c:	9f 91       	pop	r25
    450e:	8f 91       	pop	r24
    4510:	7f 91       	pop	r23
    4512:	6f 91       	pop	r22
    4514:	5f 91       	pop	r21
    4516:	4f 91       	pop	r20
    4518:	3f 91       	pop	r19
    451a:	2f 91       	pop	r18
    451c:	0f 90       	pop	r0
    451e:	0b be       	out	0x3b, r0	; 59
    4520:	0f 90       	pop	r0
    4522:	0f be       	out	0x3f, r0	; 63
    4524:	0f 90       	pop	r0
    4526:	1f 90       	pop	r1
    4528:	18 95       	reti

0000452a <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    452a:	1f 92       	push	r1
    452c:	0f 92       	push	r0
    452e:	0f b6       	in	r0, 0x3f	; 63
    4530:	0f 92       	push	r0
    4532:	11 24       	eor	r1, r1
    4534:	0b b6       	in	r0, 0x3b	; 59
    4536:	0f 92       	push	r0
    4538:	2f 93       	push	r18
    453a:	3f 93       	push	r19
    453c:	4f 93       	push	r20
    453e:	5f 93       	push	r21
    4540:	6f 93       	push	r22
    4542:	7f 93       	push	r23
    4544:	8f 93       	push	r24
    4546:	9f 93       	push	r25
    4548:	af 93       	push	r26
    454a:	bf 93       	push	r27
    454c:	ef 93       	push	r30
    454e:	ff 93       	push	r31
    4550:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <InterruptFuncTable+0x56>
    4554:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <InterruptFuncTable+0x57>
    4558:	30 97       	sbiw	r30, 0x00	; 0
    455a:	29 f0       	breq	.+10     	; 0x4566 <__vector_43+0x3c>
    455c:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <InterruptSenderTable+0x56>
    4560:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <InterruptSenderTable+0x57>
    4564:	19 95       	eicall
    4566:	ff 91       	pop	r31
    4568:	ef 91       	pop	r30
    456a:	bf 91       	pop	r27
    456c:	af 91       	pop	r26
    456e:	9f 91       	pop	r25
    4570:	8f 91       	pop	r24
    4572:	7f 91       	pop	r23
    4574:	6f 91       	pop	r22
    4576:	5f 91       	pop	r21
    4578:	4f 91       	pop	r20
    457a:	3f 91       	pop	r19
    457c:	2f 91       	pop	r18
    457e:	0f 90       	pop	r0
    4580:	0b be       	out	0x3b, r0	; 59
    4582:	0f 90       	pop	r0
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	0f 90       	pop	r0
    4588:	1f 90       	pop	r1
    458a:	18 95       	reti

0000458c <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    458c:	1f 92       	push	r1
    458e:	0f 92       	push	r0
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	0f 92       	push	r0
    4594:	11 24       	eor	r1, r1
    4596:	0b b6       	in	r0, 0x3b	; 59
    4598:	0f 92       	push	r0
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	ef 93       	push	r30
    45b0:	ff 93       	push	r31
    45b2:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <InterruptFuncTable+0x58>
    45b6:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <InterruptFuncTable+0x59>
    45ba:	30 97       	sbiw	r30, 0x00	; 0
    45bc:	29 f0       	breq	.+10     	; 0x45c8 <__vector_44+0x3c>
    45be:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <InterruptSenderTable+0x58>
    45c2:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <InterruptSenderTable+0x59>
    45c6:	19 95       	eicall
    45c8:	ff 91       	pop	r31
    45ca:	ef 91       	pop	r30
    45cc:	bf 91       	pop	r27
    45ce:	af 91       	pop	r26
    45d0:	9f 91       	pop	r25
    45d2:	8f 91       	pop	r24
    45d4:	7f 91       	pop	r23
    45d6:	6f 91       	pop	r22
    45d8:	5f 91       	pop	r21
    45da:	4f 91       	pop	r20
    45dc:	3f 91       	pop	r19
    45de:	2f 91       	pop	r18
    45e0:	0f 90       	pop	r0
    45e2:	0b be       	out	0x3b, r0	; 59
    45e4:	0f 90       	pop	r0
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	0f 90       	pop	r0
    45ea:	1f 90       	pop	r1
    45ec:	18 95       	reti

000045ee <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    45ee:	1f 92       	push	r1
    45f0:	0f 92       	push	r0
    45f2:	0f b6       	in	r0, 0x3f	; 63
    45f4:	0f 92       	push	r0
    45f6:	11 24       	eor	r1, r1
    45f8:	0b b6       	in	r0, 0x3b	; 59
    45fa:	0f 92       	push	r0
    45fc:	2f 93       	push	r18
    45fe:	3f 93       	push	r19
    4600:	4f 93       	push	r20
    4602:	5f 93       	push	r21
    4604:	6f 93       	push	r22
    4606:	7f 93       	push	r23
    4608:	8f 93       	push	r24
    460a:	9f 93       	push	r25
    460c:	af 93       	push	r26
    460e:	bf 93       	push	r27
    4610:	ef 93       	push	r30
    4612:	ff 93       	push	r31
    4614:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <InterruptFuncTable+0x5a>
    4618:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <InterruptFuncTable+0x5b>
    461c:	30 97       	sbiw	r30, 0x00	; 0
    461e:	29 f0       	breq	.+10     	; 0x462a <__vector_45+0x3c>
    4620:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <InterruptSenderTable+0x5a>
    4624:	90 91 17 24 	lds	r25, 0x2417	; 0x802417 <InterruptSenderTable+0x5b>
    4628:	19 95       	eicall
    462a:	ff 91       	pop	r31
    462c:	ef 91       	pop	r30
    462e:	bf 91       	pop	r27
    4630:	af 91       	pop	r26
    4632:	9f 91       	pop	r25
    4634:	8f 91       	pop	r24
    4636:	7f 91       	pop	r23
    4638:	6f 91       	pop	r22
    463a:	5f 91       	pop	r21
    463c:	4f 91       	pop	r20
    463e:	3f 91       	pop	r19
    4640:	2f 91       	pop	r18
    4642:	0f 90       	pop	r0
    4644:	0b be       	out	0x3b, r0	; 59
    4646:	0f 90       	pop	r0
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	0f 90       	pop	r0
    464c:	1f 90       	pop	r1
    464e:	18 95       	reti

00004650 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    4650:	1f 92       	push	r1
    4652:	0f 92       	push	r0
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	0f 92       	push	r0
    4658:	11 24       	eor	r1, r1
    465a:	0b b6       	in	r0, 0x3b	; 59
    465c:	0f 92       	push	r0
    465e:	2f 93       	push	r18
    4660:	3f 93       	push	r19
    4662:	4f 93       	push	r20
    4664:	5f 93       	push	r21
    4666:	6f 93       	push	r22
    4668:	7f 93       	push	r23
    466a:	8f 93       	push	r24
    466c:	9f 93       	push	r25
    466e:	af 93       	push	r26
    4670:	bf 93       	push	r27
    4672:	ef 93       	push	r30
    4674:	ff 93       	push	r31
    4676:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <InterruptFuncTable+0x5c>
    467a:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <InterruptFuncTable+0x5d>
    467e:	30 97       	sbiw	r30, 0x00	; 0
    4680:	29 f0       	breq	.+10     	; 0x468c <__vector_46+0x3c>
    4682:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <InterruptSenderTable+0x5c>
    4686:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <InterruptSenderTable+0x5d>
    468a:	19 95       	eicall
    468c:	ff 91       	pop	r31
    468e:	ef 91       	pop	r30
    4690:	bf 91       	pop	r27
    4692:	af 91       	pop	r26
    4694:	9f 91       	pop	r25
    4696:	8f 91       	pop	r24
    4698:	7f 91       	pop	r23
    469a:	6f 91       	pop	r22
    469c:	5f 91       	pop	r21
    469e:	4f 91       	pop	r20
    46a0:	3f 91       	pop	r19
    46a2:	2f 91       	pop	r18
    46a4:	0f 90       	pop	r0
    46a6:	0b be       	out	0x3b, r0	; 59
    46a8:	0f 90       	pop	r0
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	0f 90       	pop	r0
    46ae:	1f 90       	pop	r1
    46b0:	18 95       	reti

000046b2 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    46b2:	1f 92       	push	r1
    46b4:	0f 92       	push	r0
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	0f 92       	push	r0
    46ba:	11 24       	eor	r1, r1
    46bc:	0b b6       	in	r0, 0x3b	; 59
    46be:	0f 92       	push	r0
    46c0:	2f 93       	push	r18
    46c2:	3f 93       	push	r19
    46c4:	4f 93       	push	r20
    46c6:	5f 93       	push	r21
    46c8:	6f 93       	push	r22
    46ca:	7f 93       	push	r23
    46cc:	8f 93       	push	r24
    46ce:	9f 93       	push	r25
    46d0:	af 93       	push	r26
    46d2:	bf 93       	push	r27
    46d4:	ef 93       	push	r30
    46d6:	ff 93       	push	r31
    46d8:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <InterruptFuncTable+0x5e>
    46dc:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <InterruptFuncTable+0x5f>
    46e0:	30 97       	sbiw	r30, 0x00	; 0
    46e2:	29 f0       	breq	.+10     	; 0x46ee <__vector_47+0x3c>
    46e4:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <InterruptSenderTable+0x5e>
    46e8:	90 91 1b 24 	lds	r25, 0x241B	; 0x80241b <InterruptSenderTable+0x5f>
    46ec:	19 95       	eicall
    46ee:	ff 91       	pop	r31
    46f0:	ef 91       	pop	r30
    46f2:	bf 91       	pop	r27
    46f4:	af 91       	pop	r26
    46f6:	9f 91       	pop	r25
    46f8:	8f 91       	pop	r24
    46fa:	7f 91       	pop	r23
    46fc:	6f 91       	pop	r22
    46fe:	5f 91       	pop	r21
    4700:	4f 91       	pop	r20
    4702:	3f 91       	pop	r19
    4704:	2f 91       	pop	r18
    4706:	0f 90       	pop	r0
    4708:	0b be       	out	0x3b, r0	; 59
    470a:	0f 90       	pop	r0
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	0f 90       	pop	r0
    4710:	1f 90       	pop	r1
    4712:	18 95       	reti

00004714 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    4714:	1f 92       	push	r1
    4716:	0f 92       	push	r0
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	0f 92       	push	r0
    471c:	11 24       	eor	r1, r1
    471e:	0b b6       	in	r0, 0x3b	; 59
    4720:	0f 92       	push	r0
    4722:	2f 93       	push	r18
    4724:	3f 93       	push	r19
    4726:	4f 93       	push	r20
    4728:	5f 93       	push	r21
    472a:	6f 93       	push	r22
    472c:	7f 93       	push	r23
    472e:	8f 93       	push	r24
    4730:	9f 93       	push	r25
    4732:	af 93       	push	r26
    4734:	bf 93       	push	r27
    4736:	ef 93       	push	r30
    4738:	ff 93       	push	r31
    473a:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <InterruptFuncTable+0x60>
    473e:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <InterruptFuncTable+0x61>
    4742:	30 97       	sbiw	r30, 0x00	; 0
    4744:	29 f0       	breq	.+10     	; 0x4750 <__vector_48+0x3c>
    4746:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <InterruptSenderTable+0x60>
    474a:	90 91 1d 24 	lds	r25, 0x241D	; 0x80241d <InterruptSenderTable+0x61>
    474e:	19 95       	eicall
    4750:	ff 91       	pop	r31
    4752:	ef 91       	pop	r30
    4754:	bf 91       	pop	r27
    4756:	af 91       	pop	r26
    4758:	9f 91       	pop	r25
    475a:	8f 91       	pop	r24
    475c:	7f 91       	pop	r23
    475e:	6f 91       	pop	r22
    4760:	5f 91       	pop	r21
    4762:	4f 91       	pop	r20
    4764:	3f 91       	pop	r19
    4766:	2f 91       	pop	r18
    4768:	0f 90       	pop	r0
    476a:	0b be       	out	0x3b, r0	; 59
    476c:	0f 90       	pop	r0
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	0f 90       	pop	r0
    4772:	1f 90       	pop	r1
    4774:	18 95       	reti

00004776 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    4776:	1f 92       	push	r1
    4778:	0f 92       	push	r0
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	0f 92       	push	r0
    477e:	11 24       	eor	r1, r1
    4780:	0b b6       	in	r0, 0x3b	; 59
    4782:	0f 92       	push	r0
    4784:	2f 93       	push	r18
    4786:	3f 93       	push	r19
    4788:	4f 93       	push	r20
    478a:	5f 93       	push	r21
    478c:	6f 93       	push	r22
    478e:	7f 93       	push	r23
    4790:	8f 93       	push	r24
    4792:	9f 93       	push	r25
    4794:	af 93       	push	r26
    4796:	bf 93       	push	r27
    4798:	ef 93       	push	r30
    479a:	ff 93       	push	r31
    479c:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <InterruptFuncTable+0x62>
    47a0:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <InterruptFuncTable+0x63>
    47a4:	30 97       	sbiw	r30, 0x00	; 0
    47a6:	29 f0       	breq	.+10     	; 0x47b2 <__vector_49+0x3c>
    47a8:	80 91 1e 24 	lds	r24, 0x241E	; 0x80241e <InterruptSenderTable+0x62>
    47ac:	90 91 1f 24 	lds	r25, 0x241F	; 0x80241f <InterruptSenderTable+0x63>
    47b0:	19 95       	eicall
    47b2:	ff 91       	pop	r31
    47b4:	ef 91       	pop	r30
    47b6:	bf 91       	pop	r27
    47b8:	af 91       	pop	r26
    47ba:	9f 91       	pop	r25
    47bc:	8f 91       	pop	r24
    47be:	7f 91       	pop	r23
    47c0:	6f 91       	pop	r22
    47c2:	5f 91       	pop	r21
    47c4:	4f 91       	pop	r20
    47c6:	3f 91       	pop	r19
    47c8:	2f 91       	pop	r18
    47ca:	0f 90       	pop	r0
    47cc:	0b be       	out	0x3b, r0	; 59
    47ce:	0f 90       	pop	r0
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	0f 90       	pop	r0
    47d4:	1f 90       	pop	r1
    47d6:	18 95       	reti

000047d8 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    47d8:	1f 92       	push	r1
    47da:	0f 92       	push	r0
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	0f 92       	push	r0
    47e0:	11 24       	eor	r1, r1
    47e2:	0b b6       	in	r0, 0x3b	; 59
    47e4:	0f 92       	push	r0
    47e6:	2f 93       	push	r18
    47e8:	3f 93       	push	r19
    47ea:	4f 93       	push	r20
    47ec:	5f 93       	push	r21
    47ee:	6f 93       	push	r22
    47f0:	7f 93       	push	r23
    47f2:	8f 93       	push	r24
    47f4:	9f 93       	push	r25
    47f6:	af 93       	push	r26
    47f8:	bf 93       	push	r27
    47fa:	ef 93       	push	r30
    47fc:	ff 93       	push	r31
    47fe:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <InterruptFuncTable+0x64>
    4802:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <InterruptFuncTable+0x65>
    4806:	30 97       	sbiw	r30, 0x00	; 0
    4808:	29 f0       	breq	.+10     	; 0x4814 <__vector_50+0x3c>
    480a:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <InterruptSenderTable+0x64>
    480e:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <InterruptSenderTable+0x65>
    4812:	19 95       	eicall
    4814:	ff 91       	pop	r31
    4816:	ef 91       	pop	r30
    4818:	bf 91       	pop	r27
    481a:	af 91       	pop	r26
    481c:	9f 91       	pop	r25
    481e:	8f 91       	pop	r24
    4820:	7f 91       	pop	r23
    4822:	6f 91       	pop	r22
    4824:	5f 91       	pop	r21
    4826:	4f 91       	pop	r20
    4828:	3f 91       	pop	r19
    482a:	2f 91       	pop	r18
    482c:	0f 90       	pop	r0
    482e:	0b be       	out	0x3b, r0	; 59
    4830:	0f 90       	pop	r0
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	0f 90       	pop	r0
    4836:	1f 90       	pop	r1
    4838:	18 95       	reti

0000483a <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    483a:	1f 92       	push	r1
    483c:	0f 92       	push	r0
    483e:	0f b6       	in	r0, 0x3f	; 63
    4840:	0f 92       	push	r0
    4842:	11 24       	eor	r1, r1
    4844:	0b b6       	in	r0, 0x3b	; 59
    4846:	0f 92       	push	r0
    4848:	2f 93       	push	r18
    484a:	3f 93       	push	r19
    484c:	4f 93       	push	r20
    484e:	5f 93       	push	r21
    4850:	6f 93       	push	r22
    4852:	7f 93       	push	r23
    4854:	8f 93       	push	r24
    4856:	9f 93       	push	r25
    4858:	af 93       	push	r26
    485a:	bf 93       	push	r27
    485c:	ef 93       	push	r30
    485e:	ff 93       	push	r31
    4860:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <InterruptFuncTable+0x66>
    4864:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <InterruptFuncTable+0x67>
    4868:	30 97       	sbiw	r30, 0x00	; 0
    486a:	29 f0       	breq	.+10     	; 0x4876 <__vector_51+0x3c>
    486c:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <InterruptSenderTable+0x66>
    4870:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <InterruptSenderTable+0x67>
    4874:	19 95       	eicall
    4876:	ff 91       	pop	r31
    4878:	ef 91       	pop	r30
    487a:	bf 91       	pop	r27
    487c:	af 91       	pop	r26
    487e:	9f 91       	pop	r25
    4880:	8f 91       	pop	r24
    4882:	7f 91       	pop	r23
    4884:	6f 91       	pop	r22
    4886:	5f 91       	pop	r21
    4888:	4f 91       	pop	r20
    488a:	3f 91       	pop	r19
    488c:	2f 91       	pop	r18
    488e:	0f 90       	pop	r0
    4890:	0b be       	out	0x3b, r0	; 59
    4892:	0f 90       	pop	r0
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	0f 90       	pop	r0
    4898:	1f 90       	pop	r1
    489a:	18 95       	reti

0000489c <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    489c:	1f 92       	push	r1
    489e:	0f 92       	push	r0
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	0f 92       	push	r0
    48a4:	11 24       	eor	r1, r1
    48a6:	0b b6       	in	r0, 0x3b	; 59
    48a8:	0f 92       	push	r0
    48aa:	2f 93       	push	r18
    48ac:	3f 93       	push	r19
    48ae:	4f 93       	push	r20
    48b0:	5f 93       	push	r21
    48b2:	6f 93       	push	r22
    48b4:	7f 93       	push	r23
    48b6:	8f 93       	push	r24
    48b8:	9f 93       	push	r25
    48ba:	af 93       	push	r26
    48bc:	bf 93       	push	r27
    48be:	ef 93       	push	r30
    48c0:	ff 93       	push	r31
    48c2:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <InterruptFuncTable+0x68>
    48c6:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <InterruptFuncTable+0x69>
    48ca:	30 97       	sbiw	r30, 0x00	; 0
    48cc:	29 f0       	breq	.+10     	; 0x48d8 <__vector_52+0x3c>
    48ce:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <InterruptSenderTable+0x68>
    48d2:	90 91 25 24 	lds	r25, 0x2425	; 0x802425 <InterruptSenderTable+0x69>
    48d6:	19 95       	eicall
    48d8:	ff 91       	pop	r31
    48da:	ef 91       	pop	r30
    48dc:	bf 91       	pop	r27
    48de:	af 91       	pop	r26
    48e0:	9f 91       	pop	r25
    48e2:	8f 91       	pop	r24
    48e4:	7f 91       	pop	r23
    48e6:	6f 91       	pop	r22
    48e8:	5f 91       	pop	r21
    48ea:	4f 91       	pop	r20
    48ec:	3f 91       	pop	r19
    48ee:	2f 91       	pop	r18
    48f0:	0f 90       	pop	r0
    48f2:	0b be       	out	0x3b, r0	; 59
    48f4:	0f 90       	pop	r0
    48f6:	0f be       	out	0x3f, r0	; 63
    48f8:	0f 90       	pop	r0
    48fa:	1f 90       	pop	r1
    48fc:	18 95       	reti

000048fe <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    48fe:	1f 92       	push	r1
    4900:	0f 92       	push	r0
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	0f 92       	push	r0
    4906:	11 24       	eor	r1, r1
    4908:	0b b6       	in	r0, 0x3b	; 59
    490a:	0f 92       	push	r0
    490c:	2f 93       	push	r18
    490e:	3f 93       	push	r19
    4910:	4f 93       	push	r20
    4912:	5f 93       	push	r21
    4914:	6f 93       	push	r22
    4916:	7f 93       	push	r23
    4918:	8f 93       	push	r24
    491a:	9f 93       	push	r25
    491c:	af 93       	push	r26
    491e:	bf 93       	push	r27
    4920:	ef 93       	push	r30
    4922:	ff 93       	push	r31
    4924:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <InterruptFuncTable+0x6a>
    4928:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <InterruptFuncTable+0x6b>
    492c:	30 97       	sbiw	r30, 0x00	; 0
    492e:	29 f0       	breq	.+10     	; 0x493a <__vector_53+0x3c>
    4930:	80 91 26 24 	lds	r24, 0x2426	; 0x802426 <InterruptSenderTable+0x6a>
    4934:	90 91 27 24 	lds	r25, 0x2427	; 0x802427 <InterruptSenderTable+0x6b>
    4938:	19 95       	eicall
    493a:	ff 91       	pop	r31
    493c:	ef 91       	pop	r30
    493e:	bf 91       	pop	r27
    4940:	af 91       	pop	r26
    4942:	9f 91       	pop	r25
    4944:	8f 91       	pop	r24
    4946:	7f 91       	pop	r23
    4948:	6f 91       	pop	r22
    494a:	5f 91       	pop	r21
    494c:	4f 91       	pop	r20
    494e:	3f 91       	pop	r19
    4950:	2f 91       	pop	r18
    4952:	0f 90       	pop	r0
    4954:	0b be       	out	0x3b, r0	; 59
    4956:	0f 90       	pop	r0
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	0f 90       	pop	r0
    495c:	1f 90       	pop	r1
    495e:	18 95       	reti

00004960 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    4960:	1f 92       	push	r1
    4962:	0f 92       	push	r0
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	0f 92       	push	r0
    4968:	11 24       	eor	r1, r1
    496a:	0b b6       	in	r0, 0x3b	; 59
    496c:	0f 92       	push	r0
    496e:	2f 93       	push	r18
    4970:	3f 93       	push	r19
    4972:	4f 93       	push	r20
    4974:	5f 93       	push	r21
    4976:	6f 93       	push	r22
    4978:	7f 93       	push	r23
    497a:	8f 93       	push	r24
    497c:	9f 93       	push	r25
    497e:	af 93       	push	r26
    4980:	bf 93       	push	r27
    4982:	ef 93       	push	r30
    4984:	ff 93       	push	r31
    4986:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <InterruptFuncTable+0x6c>
    498a:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <InterruptFuncTable+0x6d>
    498e:	30 97       	sbiw	r30, 0x00	; 0
    4990:	29 f0       	breq	.+10     	; 0x499c <__vector_54+0x3c>
    4992:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <InterruptSenderTable+0x6c>
    4996:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <InterruptSenderTable+0x6d>
    499a:	19 95       	eicall
    499c:	ff 91       	pop	r31
    499e:	ef 91       	pop	r30
    49a0:	bf 91       	pop	r27
    49a2:	af 91       	pop	r26
    49a4:	9f 91       	pop	r25
    49a6:	8f 91       	pop	r24
    49a8:	7f 91       	pop	r23
    49aa:	6f 91       	pop	r22
    49ac:	5f 91       	pop	r21
    49ae:	4f 91       	pop	r20
    49b0:	3f 91       	pop	r19
    49b2:	2f 91       	pop	r18
    49b4:	0f 90       	pop	r0
    49b6:	0b be       	out	0x3b, r0	; 59
    49b8:	0f 90       	pop	r0
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	0f 90       	pop	r0
    49be:	1f 90       	pop	r1
    49c0:	18 95       	reti

000049c2 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    49c2:	1f 92       	push	r1
    49c4:	0f 92       	push	r0
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	0f 92       	push	r0
    49ca:	11 24       	eor	r1, r1
    49cc:	0b b6       	in	r0, 0x3b	; 59
    49ce:	0f 92       	push	r0
    49d0:	2f 93       	push	r18
    49d2:	3f 93       	push	r19
    49d4:	4f 93       	push	r20
    49d6:	5f 93       	push	r21
    49d8:	6f 93       	push	r22
    49da:	7f 93       	push	r23
    49dc:	8f 93       	push	r24
    49de:	9f 93       	push	r25
    49e0:	af 93       	push	r26
    49e2:	bf 93       	push	r27
    49e4:	ef 93       	push	r30
    49e6:	ff 93       	push	r31
    49e8:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <InterruptFuncTable+0x6e>
    49ec:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <InterruptFuncTable+0x6f>
    49f0:	30 97       	sbiw	r30, 0x00	; 0
    49f2:	29 f0       	breq	.+10     	; 0x49fe <__vector_55+0x3c>
    49f4:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <InterruptSenderTable+0x6e>
    49f8:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <InterruptSenderTable+0x6f>
    49fc:	19 95       	eicall
    49fe:	ff 91       	pop	r31
    4a00:	ef 91       	pop	r30
    4a02:	bf 91       	pop	r27
    4a04:	af 91       	pop	r26
    4a06:	9f 91       	pop	r25
    4a08:	8f 91       	pop	r24
    4a0a:	7f 91       	pop	r23
    4a0c:	6f 91       	pop	r22
    4a0e:	5f 91       	pop	r21
    4a10:	4f 91       	pop	r20
    4a12:	3f 91       	pop	r19
    4a14:	2f 91       	pop	r18
    4a16:	0f 90       	pop	r0
    4a18:	0b be       	out	0x3b, r0	; 59
    4a1a:	0f 90       	pop	r0
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	0f 90       	pop	r0
    4a20:	1f 90       	pop	r1
    4a22:	18 95       	reti

00004a24 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    4a24:	1f 92       	push	r1
    4a26:	0f 92       	push	r0
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	0f 92       	push	r0
    4a2c:	11 24       	eor	r1, r1
    4a2e:	0b b6       	in	r0, 0x3b	; 59
    4a30:	0f 92       	push	r0
    4a32:	2f 93       	push	r18
    4a34:	3f 93       	push	r19
    4a36:	4f 93       	push	r20
    4a38:	5f 93       	push	r21
    4a3a:	6f 93       	push	r22
    4a3c:	7f 93       	push	r23
    4a3e:	8f 93       	push	r24
    4a40:	9f 93       	push	r25
    4a42:	af 93       	push	r26
    4a44:	bf 93       	push	r27
    4a46:	ef 93       	push	r30
    4a48:	ff 93       	push	r31
    4a4a:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <InterruptFuncTable+0x70>
    4a4e:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <InterruptFuncTable+0x71>
    4a52:	30 97       	sbiw	r30, 0x00	; 0
    4a54:	29 f0       	breq	.+10     	; 0x4a60 <__vector_56+0x3c>
    4a56:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <InterruptSenderTable+0x70>
    4a5a:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <InterruptSenderTable+0x71>
    4a5e:	19 95       	eicall
    4a60:	ff 91       	pop	r31
    4a62:	ef 91       	pop	r30
    4a64:	bf 91       	pop	r27
    4a66:	af 91       	pop	r26
    4a68:	9f 91       	pop	r25
    4a6a:	8f 91       	pop	r24
    4a6c:	7f 91       	pop	r23
    4a6e:	6f 91       	pop	r22
    4a70:	5f 91       	pop	r21
    4a72:	4f 91       	pop	r20
    4a74:	3f 91       	pop	r19
    4a76:	2f 91       	pop	r18
    4a78:	0f 90       	pop	r0
    4a7a:	0b be       	out	0x3b, r0	; 59
    4a7c:	0f 90       	pop	r0
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	0f 90       	pop	r0
    4a82:	1f 90       	pop	r1
    4a84:	18 95       	reti

00004a86 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    4a86:	1f 92       	push	r1
    4a88:	0f 92       	push	r0
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	0f 92       	push	r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	0b b6       	in	r0, 0x3b	; 59
    4a92:	0f 92       	push	r0
    4a94:	2f 93       	push	r18
    4a96:	3f 93       	push	r19
    4a98:	4f 93       	push	r20
    4a9a:	5f 93       	push	r21
    4a9c:	6f 93       	push	r22
    4a9e:	7f 93       	push	r23
    4aa0:	8f 93       	push	r24
    4aa2:	9f 93       	push	r25
    4aa4:	af 93       	push	r26
    4aa6:	bf 93       	push	r27
    4aa8:	ef 93       	push	r30
    4aaa:	ff 93       	push	r31
    4aac:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <InterruptFuncTable+0x72>
    4ab0:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <InterruptFuncTable+0x73>
    4ab4:	30 97       	sbiw	r30, 0x00	; 0
    4ab6:	29 f0       	breq	.+10     	; 0x4ac2 <__vector_57+0x3c>
    4ab8:	80 91 2e 24 	lds	r24, 0x242E	; 0x80242e <InterruptSenderTable+0x72>
    4abc:	90 91 2f 24 	lds	r25, 0x242F	; 0x80242f <InterruptSenderTable+0x73>
    4ac0:	19 95       	eicall
    4ac2:	ff 91       	pop	r31
    4ac4:	ef 91       	pop	r30
    4ac6:	bf 91       	pop	r27
    4ac8:	af 91       	pop	r26
    4aca:	9f 91       	pop	r25
    4acc:	8f 91       	pop	r24
    4ace:	7f 91       	pop	r23
    4ad0:	6f 91       	pop	r22
    4ad2:	5f 91       	pop	r21
    4ad4:	4f 91       	pop	r20
    4ad6:	3f 91       	pop	r19
    4ad8:	2f 91       	pop	r18
    4ada:	0f 90       	pop	r0
    4adc:	0b be       	out	0x3b, r0	; 59
    4ade:	0f 90       	pop	r0
    4ae0:	0f be       	out	0x3f, r0	; 63
    4ae2:	0f 90       	pop	r0
    4ae4:	1f 90       	pop	r1
    4ae6:	18 95       	reti

00004ae8 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    4ae8:	1f 92       	push	r1
    4aea:	0f 92       	push	r0
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	0f 92       	push	r0
    4af0:	11 24       	eor	r1, r1
    4af2:	0b b6       	in	r0, 0x3b	; 59
    4af4:	0f 92       	push	r0
    4af6:	2f 93       	push	r18
    4af8:	3f 93       	push	r19
    4afa:	4f 93       	push	r20
    4afc:	5f 93       	push	r21
    4afe:	6f 93       	push	r22
    4b00:	7f 93       	push	r23
    4b02:	8f 93       	push	r24
    4b04:	9f 93       	push	r25
    4b06:	af 93       	push	r26
    4b08:	bf 93       	push	r27
    4b0a:	ef 93       	push	r30
    4b0c:	ff 93       	push	r31
    4b0e:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <InterruptFuncTable+0x74>
    4b12:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <InterruptFuncTable+0x75>
    4b16:	30 97       	sbiw	r30, 0x00	; 0
    4b18:	29 f0       	breq	.+10     	; 0x4b24 <__vector_58+0x3c>
    4b1a:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <InterruptSenderTable+0x74>
    4b1e:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <InterruptSenderTable+0x75>
    4b22:	19 95       	eicall
    4b24:	ff 91       	pop	r31
    4b26:	ef 91       	pop	r30
    4b28:	bf 91       	pop	r27
    4b2a:	af 91       	pop	r26
    4b2c:	9f 91       	pop	r25
    4b2e:	8f 91       	pop	r24
    4b30:	7f 91       	pop	r23
    4b32:	6f 91       	pop	r22
    4b34:	5f 91       	pop	r21
    4b36:	4f 91       	pop	r20
    4b38:	3f 91       	pop	r19
    4b3a:	2f 91       	pop	r18
    4b3c:	0f 90       	pop	r0
    4b3e:	0b be       	out	0x3b, r0	; 59
    4b40:	0f 90       	pop	r0
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	0f 90       	pop	r0
    4b46:	1f 90       	pop	r1
    4b48:	18 95       	reti

00004b4a <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    4b4a:	1f 92       	push	r1
    4b4c:	0f 92       	push	r0
    4b4e:	0f b6       	in	r0, 0x3f	; 63
    4b50:	0f 92       	push	r0
    4b52:	11 24       	eor	r1, r1
    4b54:	0b b6       	in	r0, 0x3b	; 59
    4b56:	0f 92       	push	r0
    4b58:	2f 93       	push	r18
    4b5a:	3f 93       	push	r19
    4b5c:	4f 93       	push	r20
    4b5e:	5f 93       	push	r21
    4b60:	6f 93       	push	r22
    4b62:	7f 93       	push	r23
    4b64:	8f 93       	push	r24
    4b66:	9f 93       	push	r25
    4b68:	af 93       	push	r26
    4b6a:	bf 93       	push	r27
    4b6c:	ef 93       	push	r30
    4b6e:	ff 93       	push	r31
    4b70:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <InterruptFuncTable+0x76>
    4b74:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <InterruptFuncTable+0x77>
    4b78:	30 97       	sbiw	r30, 0x00	; 0
    4b7a:	29 f0       	breq	.+10     	; 0x4b86 <__vector_59+0x3c>
    4b7c:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <InterruptSenderTable+0x76>
    4b80:	90 91 33 24 	lds	r25, 0x2433	; 0x802433 <InterruptSenderTable+0x77>
    4b84:	19 95       	eicall
    4b86:	ff 91       	pop	r31
    4b88:	ef 91       	pop	r30
    4b8a:	bf 91       	pop	r27
    4b8c:	af 91       	pop	r26
    4b8e:	9f 91       	pop	r25
    4b90:	8f 91       	pop	r24
    4b92:	7f 91       	pop	r23
    4b94:	6f 91       	pop	r22
    4b96:	5f 91       	pop	r21
    4b98:	4f 91       	pop	r20
    4b9a:	3f 91       	pop	r19
    4b9c:	2f 91       	pop	r18
    4b9e:	0f 90       	pop	r0
    4ba0:	0b be       	out	0x3b, r0	; 59
    4ba2:	0f 90       	pop	r0
    4ba4:	0f be       	out	0x3f, r0	; 63
    4ba6:	0f 90       	pop	r0
    4ba8:	1f 90       	pop	r1
    4baa:	18 95       	reti

00004bac <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    4bac:	1f 92       	push	r1
    4bae:	0f 92       	push	r0
    4bb0:	0f b6       	in	r0, 0x3f	; 63
    4bb2:	0f 92       	push	r0
    4bb4:	11 24       	eor	r1, r1
    4bb6:	0b b6       	in	r0, 0x3b	; 59
    4bb8:	0f 92       	push	r0
    4bba:	2f 93       	push	r18
    4bbc:	3f 93       	push	r19
    4bbe:	4f 93       	push	r20
    4bc0:	5f 93       	push	r21
    4bc2:	6f 93       	push	r22
    4bc4:	7f 93       	push	r23
    4bc6:	8f 93       	push	r24
    4bc8:	9f 93       	push	r25
    4bca:	af 93       	push	r26
    4bcc:	bf 93       	push	r27
    4bce:	ef 93       	push	r30
    4bd0:	ff 93       	push	r31
    4bd2:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <InterruptFuncTable+0x78>
    4bd6:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <InterruptFuncTable+0x79>
    4bda:	30 97       	sbiw	r30, 0x00	; 0
    4bdc:	29 f0       	breq	.+10     	; 0x4be8 <__vector_60+0x3c>
    4bde:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <InterruptSenderTable+0x78>
    4be2:	90 91 35 24 	lds	r25, 0x2435	; 0x802435 <InterruptSenderTable+0x79>
    4be6:	19 95       	eicall
    4be8:	ff 91       	pop	r31
    4bea:	ef 91       	pop	r30
    4bec:	bf 91       	pop	r27
    4bee:	af 91       	pop	r26
    4bf0:	9f 91       	pop	r25
    4bf2:	8f 91       	pop	r24
    4bf4:	7f 91       	pop	r23
    4bf6:	6f 91       	pop	r22
    4bf8:	5f 91       	pop	r21
    4bfa:	4f 91       	pop	r20
    4bfc:	3f 91       	pop	r19
    4bfe:	2f 91       	pop	r18
    4c00:	0f 90       	pop	r0
    4c02:	0b be       	out	0x3b, r0	; 59
    4c04:	0f 90       	pop	r0
    4c06:	0f be       	out	0x3f, r0	; 63
    4c08:	0f 90       	pop	r0
    4c0a:	1f 90       	pop	r1
    4c0c:	18 95       	reti

00004c0e <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    4c0e:	1f 92       	push	r1
    4c10:	0f 92       	push	r0
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	0f 92       	push	r0
    4c16:	11 24       	eor	r1, r1
    4c18:	0b b6       	in	r0, 0x3b	; 59
    4c1a:	0f 92       	push	r0
    4c1c:	2f 93       	push	r18
    4c1e:	3f 93       	push	r19
    4c20:	4f 93       	push	r20
    4c22:	5f 93       	push	r21
    4c24:	6f 93       	push	r22
    4c26:	7f 93       	push	r23
    4c28:	8f 93       	push	r24
    4c2a:	9f 93       	push	r25
    4c2c:	af 93       	push	r26
    4c2e:	bf 93       	push	r27
    4c30:	ef 93       	push	r30
    4c32:	ff 93       	push	r31
    4c34:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <InterruptFuncTable+0x7a>
    4c38:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <InterruptFuncTable+0x7b>
    4c3c:	30 97       	sbiw	r30, 0x00	; 0
    4c3e:	29 f0       	breq	.+10     	; 0x4c4a <__vector_61+0x3c>
    4c40:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <InterruptSenderTable+0x7a>
    4c44:	90 91 37 24 	lds	r25, 0x2437	; 0x802437 <InterruptSenderTable+0x7b>
    4c48:	19 95       	eicall
    4c4a:	ff 91       	pop	r31
    4c4c:	ef 91       	pop	r30
    4c4e:	bf 91       	pop	r27
    4c50:	af 91       	pop	r26
    4c52:	9f 91       	pop	r25
    4c54:	8f 91       	pop	r24
    4c56:	7f 91       	pop	r23
    4c58:	6f 91       	pop	r22
    4c5a:	5f 91       	pop	r21
    4c5c:	4f 91       	pop	r20
    4c5e:	3f 91       	pop	r19
    4c60:	2f 91       	pop	r18
    4c62:	0f 90       	pop	r0
    4c64:	0b be       	out	0x3b, r0	; 59
    4c66:	0f 90       	pop	r0
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	0f 90       	pop	r0
    4c6c:	1f 90       	pop	r1
    4c6e:	18 95       	reti

00004c70 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    4c70:	1f 92       	push	r1
    4c72:	0f 92       	push	r0
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	0f 92       	push	r0
    4c78:	11 24       	eor	r1, r1
    4c7a:	0b b6       	in	r0, 0x3b	; 59
    4c7c:	0f 92       	push	r0
    4c7e:	2f 93       	push	r18
    4c80:	3f 93       	push	r19
    4c82:	4f 93       	push	r20
    4c84:	5f 93       	push	r21
    4c86:	6f 93       	push	r22
    4c88:	7f 93       	push	r23
    4c8a:	8f 93       	push	r24
    4c8c:	9f 93       	push	r25
    4c8e:	af 93       	push	r26
    4c90:	bf 93       	push	r27
    4c92:	ef 93       	push	r30
    4c94:	ff 93       	push	r31
    4c96:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <InterruptFuncTable+0x7c>
    4c9a:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <InterruptFuncTable+0x7d>
    4c9e:	30 97       	sbiw	r30, 0x00	; 0
    4ca0:	29 f0       	breq	.+10     	; 0x4cac <__vector_62+0x3c>
    4ca2:	80 91 38 24 	lds	r24, 0x2438	; 0x802438 <InterruptSenderTable+0x7c>
    4ca6:	90 91 39 24 	lds	r25, 0x2439	; 0x802439 <InterruptSenderTable+0x7d>
    4caa:	19 95       	eicall
    4cac:	ff 91       	pop	r31
    4cae:	ef 91       	pop	r30
    4cb0:	bf 91       	pop	r27
    4cb2:	af 91       	pop	r26
    4cb4:	9f 91       	pop	r25
    4cb6:	8f 91       	pop	r24
    4cb8:	7f 91       	pop	r23
    4cba:	6f 91       	pop	r22
    4cbc:	5f 91       	pop	r21
    4cbe:	4f 91       	pop	r20
    4cc0:	3f 91       	pop	r19
    4cc2:	2f 91       	pop	r18
    4cc4:	0f 90       	pop	r0
    4cc6:	0b be       	out	0x3b, r0	; 59
    4cc8:	0f 90       	pop	r0
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	0f 90       	pop	r0
    4cce:	1f 90       	pop	r1
    4cd0:	18 95       	reti

00004cd2 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    4cd2:	1f 92       	push	r1
    4cd4:	0f 92       	push	r0
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	0f 92       	push	r0
    4cda:	11 24       	eor	r1, r1
    4cdc:	0b b6       	in	r0, 0x3b	; 59
    4cde:	0f 92       	push	r0
    4ce0:	2f 93       	push	r18
    4ce2:	3f 93       	push	r19
    4ce4:	4f 93       	push	r20
    4ce6:	5f 93       	push	r21
    4ce8:	6f 93       	push	r22
    4cea:	7f 93       	push	r23
    4cec:	8f 93       	push	r24
    4cee:	9f 93       	push	r25
    4cf0:	af 93       	push	r26
    4cf2:	bf 93       	push	r27
    4cf4:	ef 93       	push	r30
    4cf6:	ff 93       	push	r31
    4cf8:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <InterruptFuncTable+0x7e>
    4cfc:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <InterruptFuncTable+0x7f>
    4d00:	30 97       	sbiw	r30, 0x00	; 0
    4d02:	29 f0       	breq	.+10     	; 0x4d0e <__vector_63+0x3c>
    4d04:	80 91 3a 24 	lds	r24, 0x243A	; 0x80243a <InterruptSenderTable+0x7e>
    4d08:	90 91 3b 24 	lds	r25, 0x243B	; 0x80243b <InterruptSenderTable+0x7f>
    4d0c:	19 95       	eicall
    4d0e:	ff 91       	pop	r31
    4d10:	ef 91       	pop	r30
    4d12:	bf 91       	pop	r27
    4d14:	af 91       	pop	r26
    4d16:	9f 91       	pop	r25
    4d18:	8f 91       	pop	r24
    4d1a:	7f 91       	pop	r23
    4d1c:	6f 91       	pop	r22
    4d1e:	5f 91       	pop	r21
    4d20:	4f 91       	pop	r20
    4d22:	3f 91       	pop	r19
    4d24:	2f 91       	pop	r18
    4d26:	0f 90       	pop	r0
    4d28:	0b be       	out	0x3b, r0	; 59
    4d2a:	0f 90       	pop	r0
    4d2c:	0f be       	out	0x3f, r0	; 63
    4d2e:	0f 90       	pop	r0
    4d30:	1f 90       	pop	r1
    4d32:	18 95       	reti

00004d34 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    4d34:	1f 92       	push	r1
    4d36:	0f 92       	push	r0
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	0f 92       	push	r0
    4d3c:	11 24       	eor	r1, r1
    4d3e:	0b b6       	in	r0, 0x3b	; 59
    4d40:	0f 92       	push	r0
    4d42:	2f 93       	push	r18
    4d44:	3f 93       	push	r19
    4d46:	4f 93       	push	r20
    4d48:	5f 93       	push	r21
    4d4a:	6f 93       	push	r22
    4d4c:	7f 93       	push	r23
    4d4e:	8f 93       	push	r24
    4d50:	9f 93       	push	r25
    4d52:	af 93       	push	r26
    4d54:	bf 93       	push	r27
    4d56:	ef 93       	push	r30
    4d58:	ff 93       	push	r31
    4d5a:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <InterruptFuncTable+0x80>
    4d5e:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <InterruptFuncTable+0x81>
    4d62:	30 97       	sbiw	r30, 0x00	; 0
    4d64:	29 f0       	breq	.+10     	; 0x4d70 <__vector_64+0x3c>
    4d66:	80 91 3c 24 	lds	r24, 0x243C	; 0x80243c <InterruptSenderTable+0x80>
    4d6a:	90 91 3d 24 	lds	r25, 0x243D	; 0x80243d <InterruptSenderTable+0x81>
    4d6e:	19 95       	eicall
    4d70:	ff 91       	pop	r31
    4d72:	ef 91       	pop	r30
    4d74:	bf 91       	pop	r27
    4d76:	af 91       	pop	r26
    4d78:	9f 91       	pop	r25
    4d7a:	8f 91       	pop	r24
    4d7c:	7f 91       	pop	r23
    4d7e:	6f 91       	pop	r22
    4d80:	5f 91       	pop	r21
    4d82:	4f 91       	pop	r20
    4d84:	3f 91       	pop	r19
    4d86:	2f 91       	pop	r18
    4d88:	0f 90       	pop	r0
    4d8a:	0b be       	out	0x3b, r0	; 59
    4d8c:	0f 90       	pop	r0
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	0f 90       	pop	r0
    4d92:	1f 90       	pop	r1
    4d94:	18 95       	reti

00004d96 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    4d96:	1f 92       	push	r1
    4d98:	0f 92       	push	r0
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	0f 92       	push	r0
    4d9e:	11 24       	eor	r1, r1
    4da0:	0b b6       	in	r0, 0x3b	; 59
    4da2:	0f 92       	push	r0
    4da4:	2f 93       	push	r18
    4da6:	3f 93       	push	r19
    4da8:	4f 93       	push	r20
    4daa:	5f 93       	push	r21
    4dac:	6f 93       	push	r22
    4dae:	7f 93       	push	r23
    4db0:	8f 93       	push	r24
    4db2:	9f 93       	push	r25
    4db4:	af 93       	push	r26
    4db6:	bf 93       	push	r27
    4db8:	ef 93       	push	r30
    4dba:	ff 93       	push	r31
    4dbc:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <InterruptFuncTable+0x82>
    4dc0:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <InterruptFuncTable+0x83>
    4dc4:	30 97       	sbiw	r30, 0x00	; 0
    4dc6:	29 f0       	breq	.+10     	; 0x4dd2 <__vector_65+0x3c>
    4dc8:	80 91 3e 24 	lds	r24, 0x243E	; 0x80243e <InterruptSenderTable+0x82>
    4dcc:	90 91 3f 24 	lds	r25, 0x243F	; 0x80243f <InterruptSenderTable+0x83>
    4dd0:	19 95       	eicall
    4dd2:	ff 91       	pop	r31
    4dd4:	ef 91       	pop	r30
    4dd6:	bf 91       	pop	r27
    4dd8:	af 91       	pop	r26
    4dda:	9f 91       	pop	r25
    4ddc:	8f 91       	pop	r24
    4dde:	7f 91       	pop	r23
    4de0:	6f 91       	pop	r22
    4de2:	5f 91       	pop	r21
    4de4:	4f 91       	pop	r20
    4de6:	3f 91       	pop	r19
    4de8:	2f 91       	pop	r18
    4dea:	0f 90       	pop	r0
    4dec:	0b be       	out	0x3b, r0	; 59
    4dee:	0f 90       	pop	r0
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	0f 90       	pop	r0
    4df4:	1f 90       	pop	r1
    4df6:	18 95       	reti

00004df8 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    4df8:	1f 92       	push	r1
    4dfa:	0f 92       	push	r0
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	0f 92       	push	r0
    4e00:	11 24       	eor	r1, r1
    4e02:	0b b6       	in	r0, 0x3b	; 59
    4e04:	0f 92       	push	r0
    4e06:	2f 93       	push	r18
    4e08:	3f 93       	push	r19
    4e0a:	4f 93       	push	r20
    4e0c:	5f 93       	push	r21
    4e0e:	6f 93       	push	r22
    4e10:	7f 93       	push	r23
    4e12:	8f 93       	push	r24
    4e14:	9f 93       	push	r25
    4e16:	af 93       	push	r26
    4e18:	bf 93       	push	r27
    4e1a:	ef 93       	push	r30
    4e1c:	ff 93       	push	r31
    4e1e:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <InterruptFuncTable+0x84>
    4e22:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <InterruptFuncTable+0x85>
    4e26:	30 97       	sbiw	r30, 0x00	; 0
    4e28:	29 f0       	breq	.+10     	; 0x4e34 <__vector_66+0x3c>
    4e2a:	80 91 40 24 	lds	r24, 0x2440	; 0x802440 <InterruptSenderTable+0x84>
    4e2e:	90 91 41 24 	lds	r25, 0x2441	; 0x802441 <InterruptSenderTable+0x85>
    4e32:	19 95       	eicall
    4e34:	ff 91       	pop	r31
    4e36:	ef 91       	pop	r30
    4e38:	bf 91       	pop	r27
    4e3a:	af 91       	pop	r26
    4e3c:	9f 91       	pop	r25
    4e3e:	8f 91       	pop	r24
    4e40:	7f 91       	pop	r23
    4e42:	6f 91       	pop	r22
    4e44:	5f 91       	pop	r21
    4e46:	4f 91       	pop	r20
    4e48:	3f 91       	pop	r19
    4e4a:	2f 91       	pop	r18
    4e4c:	0f 90       	pop	r0
    4e4e:	0b be       	out	0x3b, r0	; 59
    4e50:	0f 90       	pop	r0
    4e52:	0f be       	out	0x3f, r0	; 63
    4e54:	0f 90       	pop	r0
    4e56:	1f 90       	pop	r1
    4e58:	18 95       	reti

00004e5a <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    4e5a:	1f 92       	push	r1
    4e5c:	0f 92       	push	r0
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	0f 92       	push	r0
    4e62:	11 24       	eor	r1, r1
    4e64:	0b b6       	in	r0, 0x3b	; 59
    4e66:	0f 92       	push	r0
    4e68:	2f 93       	push	r18
    4e6a:	3f 93       	push	r19
    4e6c:	4f 93       	push	r20
    4e6e:	5f 93       	push	r21
    4e70:	6f 93       	push	r22
    4e72:	7f 93       	push	r23
    4e74:	8f 93       	push	r24
    4e76:	9f 93       	push	r25
    4e78:	af 93       	push	r26
    4e7a:	bf 93       	push	r27
    4e7c:	ef 93       	push	r30
    4e7e:	ff 93       	push	r31
    4e80:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <InterruptFuncTable+0x86>
    4e84:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <InterruptFuncTable+0x87>
    4e88:	30 97       	sbiw	r30, 0x00	; 0
    4e8a:	29 f0       	breq	.+10     	; 0x4e96 <__vector_67+0x3c>
    4e8c:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <InterruptSenderTable+0x86>
    4e90:	90 91 43 24 	lds	r25, 0x2443	; 0x802443 <InterruptSenderTable+0x87>
    4e94:	19 95       	eicall
    4e96:	ff 91       	pop	r31
    4e98:	ef 91       	pop	r30
    4e9a:	bf 91       	pop	r27
    4e9c:	af 91       	pop	r26
    4e9e:	9f 91       	pop	r25
    4ea0:	8f 91       	pop	r24
    4ea2:	7f 91       	pop	r23
    4ea4:	6f 91       	pop	r22
    4ea6:	5f 91       	pop	r21
    4ea8:	4f 91       	pop	r20
    4eaa:	3f 91       	pop	r19
    4eac:	2f 91       	pop	r18
    4eae:	0f 90       	pop	r0
    4eb0:	0b be       	out	0x3b, r0	; 59
    4eb2:	0f 90       	pop	r0
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	0f 90       	pop	r0
    4eb8:	1f 90       	pop	r1
    4eba:	18 95       	reti

00004ebc <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    4ebc:	1f 92       	push	r1
    4ebe:	0f 92       	push	r0
    4ec0:	0f b6       	in	r0, 0x3f	; 63
    4ec2:	0f 92       	push	r0
    4ec4:	11 24       	eor	r1, r1
    4ec6:	0b b6       	in	r0, 0x3b	; 59
    4ec8:	0f 92       	push	r0
    4eca:	2f 93       	push	r18
    4ecc:	3f 93       	push	r19
    4ece:	4f 93       	push	r20
    4ed0:	5f 93       	push	r21
    4ed2:	6f 93       	push	r22
    4ed4:	7f 93       	push	r23
    4ed6:	8f 93       	push	r24
    4ed8:	9f 93       	push	r25
    4eda:	af 93       	push	r26
    4edc:	bf 93       	push	r27
    4ede:	ef 93       	push	r30
    4ee0:	ff 93       	push	r31
    4ee2:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <InterruptFuncTable+0x88>
    4ee6:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <InterruptFuncTable+0x89>
    4eea:	30 97       	sbiw	r30, 0x00	; 0
    4eec:	29 f0       	breq	.+10     	; 0x4ef8 <__vector_68+0x3c>
    4eee:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <InterruptSenderTable+0x88>
    4ef2:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <InterruptSenderTable+0x89>
    4ef6:	19 95       	eicall
    4ef8:	ff 91       	pop	r31
    4efa:	ef 91       	pop	r30
    4efc:	bf 91       	pop	r27
    4efe:	af 91       	pop	r26
    4f00:	9f 91       	pop	r25
    4f02:	8f 91       	pop	r24
    4f04:	7f 91       	pop	r23
    4f06:	6f 91       	pop	r22
    4f08:	5f 91       	pop	r21
    4f0a:	4f 91       	pop	r20
    4f0c:	3f 91       	pop	r19
    4f0e:	2f 91       	pop	r18
    4f10:	0f 90       	pop	r0
    4f12:	0b be       	out	0x3b, r0	; 59
    4f14:	0f 90       	pop	r0
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	0f 90       	pop	r0
    4f1a:	1f 90       	pop	r1
    4f1c:	18 95       	reti

00004f1e <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    4f1e:	1f 92       	push	r1
    4f20:	0f 92       	push	r0
    4f22:	0f b6       	in	r0, 0x3f	; 63
    4f24:	0f 92       	push	r0
    4f26:	11 24       	eor	r1, r1
    4f28:	0b b6       	in	r0, 0x3b	; 59
    4f2a:	0f 92       	push	r0
    4f2c:	2f 93       	push	r18
    4f2e:	3f 93       	push	r19
    4f30:	4f 93       	push	r20
    4f32:	5f 93       	push	r21
    4f34:	6f 93       	push	r22
    4f36:	7f 93       	push	r23
    4f38:	8f 93       	push	r24
    4f3a:	9f 93       	push	r25
    4f3c:	af 93       	push	r26
    4f3e:	bf 93       	push	r27
    4f40:	ef 93       	push	r30
    4f42:	ff 93       	push	r31
    4f44:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <InterruptFuncTable+0x8a>
    4f48:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <InterruptFuncTable+0x8b>
    4f4c:	30 97       	sbiw	r30, 0x00	; 0
    4f4e:	29 f0       	breq	.+10     	; 0x4f5a <__vector_69+0x3c>
    4f50:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <InterruptSenderTable+0x8a>
    4f54:	90 91 47 24 	lds	r25, 0x2447	; 0x802447 <InterruptSenderTable+0x8b>
    4f58:	19 95       	eicall
    4f5a:	ff 91       	pop	r31
    4f5c:	ef 91       	pop	r30
    4f5e:	bf 91       	pop	r27
    4f60:	af 91       	pop	r26
    4f62:	9f 91       	pop	r25
    4f64:	8f 91       	pop	r24
    4f66:	7f 91       	pop	r23
    4f68:	6f 91       	pop	r22
    4f6a:	5f 91       	pop	r21
    4f6c:	4f 91       	pop	r20
    4f6e:	3f 91       	pop	r19
    4f70:	2f 91       	pop	r18
    4f72:	0f 90       	pop	r0
    4f74:	0b be       	out	0x3b, r0	; 59
    4f76:	0f 90       	pop	r0
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	0f 90       	pop	r0
    4f7c:	1f 90       	pop	r1
    4f7e:	18 95       	reti

00004f80 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    4f80:	1f 92       	push	r1
    4f82:	0f 92       	push	r0
    4f84:	0f b6       	in	r0, 0x3f	; 63
    4f86:	0f 92       	push	r0
    4f88:	11 24       	eor	r1, r1
    4f8a:	0b b6       	in	r0, 0x3b	; 59
    4f8c:	0f 92       	push	r0
    4f8e:	2f 93       	push	r18
    4f90:	3f 93       	push	r19
    4f92:	4f 93       	push	r20
    4f94:	5f 93       	push	r21
    4f96:	6f 93       	push	r22
    4f98:	7f 93       	push	r23
    4f9a:	8f 93       	push	r24
    4f9c:	9f 93       	push	r25
    4f9e:	af 93       	push	r26
    4fa0:	bf 93       	push	r27
    4fa2:	ef 93       	push	r30
    4fa4:	ff 93       	push	r31
    4fa6:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <InterruptFuncTable+0x8c>
    4faa:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <InterruptFuncTable+0x8d>
    4fae:	30 97       	sbiw	r30, 0x00	; 0
    4fb0:	29 f0       	breq	.+10     	; 0x4fbc <__vector_70+0x3c>
    4fb2:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <InterruptSenderTable+0x8c>
    4fb6:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <InterruptSenderTable+0x8d>
    4fba:	19 95       	eicall
    4fbc:	ff 91       	pop	r31
    4fbe:	ef 91       	pop	r30
    4fc0:	bf 91       	pop	r27
    4fc2:	af 91       	pop	r26
    4fc4:	9f 91       	pop	r25
    4fc6:	8f 91       	pop	r24
    4fc8:	7f 91       	pop	r23
    4fca:	6f 91       	pop	r22
    4fcc:	5f 91       	pop	r21
    4fce:	4f 91       	pop	r20
    4fd0:	3f 91       	pop	r19
    4fd2:	2f 91       	pop	r18
    4fd4:	0f 90       	pop	r0
    4fd6:	0b be       	out	0x3b, r0	; 59
    4fd8:	0f 90       	pop	r0
    4fda:	0f be       	out	0x3f, r0	; 63
    4fdc:	0f 90       	pop	r0
    4fde:	1f 90       	pop	r1
    4fe0:	18 95       	reti

00004fe2 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    4fe2:	1f 92       	push	r1
    4fe4:	0f 92       	push	r0
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	0f 92       	push	r0
    4fea:	11 24       	eor	r1, r1
    4fec:	0b b6       	in	r0, 0x3b	; 59
    4fee:	0f 92       	push	r0
    4ff0:	2f 93       	push	r18
    4ff2:	3f 93       	push	r19
    4ff4:	4f 93       	push	r20
    4ff6:	5f 93       	push	r21
    4ff8:	6f 93       	push	r22
    4ffa:	7f 93       	push	r23
    4ffc:	8f 93       	push	r24
    4ffe:	9f 93       	push	r25
    5000:	af 93       	push	r26
    5002:	bf 93       	push	r27
    5004:	ef 93       	push	r30
    5006:	ff 93       	push	r31
    5008:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <InterruptFuncTable+0x8e>
    500c:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <InterruptFuncTable+0x8f>
    5010:	30 97       	sbiw	r30, 0x00	; 0
    5012:	29 f0       	breq	.+10     	; 0x501e <__vector_71+0x3c>
    5014:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <InterruptSenderTable+0x8e>
    5018:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <InterruptSenderTable+0x8f>
    501c:	19 95       	eicall
    501e:	ff 91       	pop	r31
    5020:	ef 91       	pop	r30
    5022:	bf 91       	pop	r27
    5024:	af 91       	pop	r26
    5026:	9f 91       	pop	r25
    5028:	8f 91       	pop	r24
    502a:	7f 91       	pop	r23
    502c:	6f 91       	pop	r22
    502e:	5f 91       	pop	r21
    5030:	4f 91       	pop	r20
    5032:	3f 91       	pop	r19
    5034:	2f 91       	pop	r18
    5036:	0f 90       	pop	r0
    5038:	0b be       	out	0x3b, r0	; 59
    503a:	0f 90       	pop	r0
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	0f 90       	pop	r0
    5040:	1f 90       	pop	r1
    5042:	18 95       	reti

00005044 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    5044:	1f 92       	push	r1
    5046:	0f 92       	push	r0
    5048:	0f b6       	in	r0, 0x3f	; 63
    504a:	0f 92       	push	r0
    504c:	11 24       	eor	r1, r1
    504e:	0b b6       	in	r0, 0x3b	; 59
    5050:	0f 92       	push	r0
    5052:	2f 93       	push	r18
    5054:	3f 93       	push	r19
    5056:	4f 93       	push	r20
    5058:	5f 93       	push	r21
    505a:	6f 93       	push	r22
    505c:	7f 93       	push	r23
    505e:	8f 93       	push	r24
    5060:	9f 93       	push	r25
    5062:	af 93       	push	r26
    5064:	bf 93       	push	r27
    5066:	ef 93       	push	r30
    5068:	ff 93       	push	r31
    506a:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <InterruptFuncTable+0x90>
    506e:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <InterruptFuncTable+0x91>
    5072:	30 97       	sbiw	r30, 0x00	; 0
    5074:	29 f0       	breq	.+10     	; 0x5080 <__vector_72+0x3c>
    5076:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <InterruptSenderTable+0x90>
    507a:	90 91 4d 24 	lds	r25, 0x244D	; 0x80244d <InterruptSenderTable+0x91>
    507e:	19 95       	eicall
    5080:	ff 91       	pop	r31
    5082:	ef 91       	pop	r30
    5084:	bf 91       	pop	r27
    5086:	af 91       	pop	r26
    5088:	9f 91       	pop	r25
    508a:	8f 91       	pop	r24
    508c:	7f 91       	pop	r23
    508e:	6f 91       	pop	r22
    5090:	5f 91       	pop	r21
    5092:	4f 91       	pop	r20
    5094:	3f 91       	pop	r19
    5096:	2f 91       	pop	r18
    5098:	0f 90       	pop	r0
    509a:	0b be       	out	0x3b, r0	; 59
    509c:	0f 90       	pop	r0
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	0f 90       	pop	r0
    50a2:	1f 90       	pop	r1
    50a4:	18 95       	reti

000050a6 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    50a6:	1f 92       	push	r1
    50a8:	0f 92       	push	r0
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	0f 92       	push	r0
    50ae:	11 24       	eor	r1, r1
    50b0:	0b b6       	in	r0, 0x3b	; 59
    50b2:	0f 92       	push	r0
    50b4:	2f 93       	push	r18
    50b6:	3f 93       	push	r19
    50b8:	4f 93       	push	r20
    50ba:	5f 93       	push	r21
    50bc:	6f 93       	push	r22
    50be:	7f 93       	push	r23
    50c0:	8f 93       	push	r24
    50c2:	9f 93       	push	r25
    50c4:	af 93       	push	r26
    50c6:	bf 93       	push	r27
    50c8:	ef 93       	push	r30
    50ca:	ff 93       	push	r31
    50cc:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <InterruptFuncTable+0x92>
    50d0:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <InterruptFuncTable+0x93>
    50d4:	30 97       	sbiw	r30, 0x00	; 0
    50d6:	29 f0       	breq	.+10     	; 0x50e2 <__vector_73+0x3c>
    50d8:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <InterruptSenderTable+0x92>
    50dc:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <InterruptSenderTable+0x93>
    50e0:	19 95       	eicall
    50e2:	ff 91       	pop	r31
    50e4:	ef 91       	pop	r30
    50e6:	bf 91       	pop	r27
    50e8:	af 91       	pop	r26
    50ea:	9f 91       	pop	r25
    50ec:	8f 91       	pop	r24
    50ee:	7f 91       	pop	r23
    50f0:	6f 91       	pop	r22
    50f2:	5f 91       	pop	r21
    50f4:	4f 91       	pop	r20
    50f6:	3f 91       	pop	r19
    50f8:	2f 91       	pop	r18
    50fa:	0f 90       	pop	r0
    50fc:	0b be       	out	0x3b, r0	; 59
    50fe:	0f 90       	pop	r0
    5100:	0f be       	out	0x3f, r0	; 63
    5102:	0f 90       	pop	r0
    5104:	1f 90       	pop	r1
    5106:	18 95       	reti

00005108 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    5108:	1f 92       	push	r1
    510a:	0f 92       	push	r0
    510c:	0f b6       	in	r0, 0x3f	; 63
    510e:	0f 92       	push	r0
    5110:	11 24       	eor	r1, r1
    5112:	0b b6       	in	r0, 0x3b	; 59
    5114:	0f 92       	push	r0
    5116:	2f 93       	push	r18
    5118:	3f 93       	push	r19
    511a:	4f 93       	push	r20
    511c:	5f 93       	push	r21
    511e:	6f 93       	push	r22
    5120:	7f 93       	push	r23
    5122:	8f 93       	push	r24
    5124:	9f 93       	push	r25
    5126:	af 93       	push	r26
    5128:	bf 93       	push	r27
    512a:	ef 93       	push	r30
    512c:	ff 93       	push	r31
    512e:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <InterruptFuncTable+0x94>
    5132:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <InterruptFuncTable+0x95>
    5136:	30 97       	sbiw	r30, 0x00	; 0
    5138:	29 f0       	breq	.+10     	; 0x5144 <__vector_74+0x3c>
    513a:	80 91 50 24 	lds	r24, 0x2450	; 0x802450 <InterruptSenderTable+0x94>
    513e:	90 91 51 24 	lds	r25, 0x2451	; 0x802451 <InterruptSenderTable+0x95>
    5142:	19 95       	eicall
    5144:	ff 91       	pop	r31
    5146:	ef 91       	pop	r30
    5148:	bf 91       	pop	r27
    514a:	af 91       	pop	r26
    514c:	9f 91       	pop	r25
    514e:	8f 91       	pop	r24
    5150:	7f 91       	pop	r23
    5152:	6f 91       	pop	r22
    5154:	5f 91       	pop	r21
    5156:	4f 91       	pop	r20
    5158:	3f 91       	pop	r19
    515a:	2f 91       	pop	r18
    515c:	0f 90       	pop	r0
    515e:	0b be       	out	0x3b, r0	; 59
    5160:	0f 90       	pop	r0
    5162:	0f be       	out	0x3f, r0	; 63
    5164:	0f 90       	pop	r0
    5166:	1f 90       	pop	r1
    5168:	18 95       	reti

0000516a <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    516a:	1f 92       	push	r1
    516c:	0f 92       	push	r0
    516e:	0f b6       	in	r0, 0x3f	; 63
    5170:	0f 92       	push	r0
    5172:	11 24       	eor	r1, r1
    5174:	0b b6       	in	r0, 0x3b	; 59
    5176:	0f 92       	push	r0
    5178:	2f 93       	push	r18
    517a:	3f 93       	push	r19
    517c:	4f 93       	push	r20
    517e:	5f 93       	push	r21
    5180:	6f 93       	push	r22
    5182:	7f 93       	push	r23
    5184:	8f 93       	push	r24
    5186:	9f 93       	push	r25
    5188:	af 93       	push	r26
    518a:	bf 93       	push	r27
    518c:	ef 93       	push	r30
    518e:	ff 93       	push	r31
    5190:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <InterruptFuncTable+0x9a>
    5194:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <InterruptFuncTable+0x9b>
    5198:	30 97       	sbiw	r30, 0x00	; 0
    519a:	29 f0       	breq	.+10     	; 0x51a6 <__vector_77+0x3c>
    519c:	80 91 56 24 	lds	r24, 0x2456	; 0x802456 <InterruptSenderTable+0x9a>
    51a0:	90 91 57 24 	lds	r25, 0x2457	; 0x802457 <InterruptSenderTable+0x9b>
    51a4:	19 95       	eicall
    51a6:	ff 91       	pop	r31
    51a8:	ef 91       	pop	r30
    51aa:	bf 91       	pop	r27
    51ac:	af 91       	pop	r26
    51ae:	9f 91       	pop	r25
    51b0:	8f 91       	pop	r24
    51b2:	7f 91       	pop	r23
    51b4:	6f 91       	pop	r22
    51b6:	5f 91       	pop	r21
    51b8:	4f 91       	pop	r20
    51ba:	3f 91       	pop	r19
    51bc:	2f 91       	pop	r18
    51be:	0f 90       	pop	r0
    51c0:	0b be       	out	0x3b, r0	; 59
    51c2:	0f 90       	pop	r0
    51c4:	0f be       	out	0x3f, r0	; 63
    51c6:	0f 90       	pop	r0
    51c8:	1f 90       	pop	r1
    51ca:	18 95       	reti

000051cc <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    51cc:	1f 92       	push	r1
    51ce:	0f 92       	push	r0
    51d0:	0f b6       	in	r0, 0x3f	; 63
    51d2:	0f 92       	push	r0
    51d4:	11 24       	eor	r1, r1
    51d6:	0b b6       	in	r0, 0x3b	; 59
    51d8:	0f 92       	push	r0
    51da:	2f 93       	push	r18
    51dc:	3f 93       	push	r19
    51de:	4f 93       	push	r20
    51e0:	5f 93       	push	r21
    51e2:	6f 93       	push	r22
    51e4:	7f 93       	push	r23
    51e6:	8f 93       	push	r24
    51e8:	9f 93       	push	r25
    51ea:	af 93       	push	r26
    51ec:	bf 93       	push	r27
    51ee:	ef 93       	push	r30
    51f0:	ff 93       	push	r31
    51f2:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <InterruptFuncTable+0x9c>
    51f6:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <InterruptFuncTable+0x9d>
    51fa:	30 97       	sbiw	r30, 0x00	; 0
    51fc:	29 f0       	breq	.+10     	; 0x5208 <__vector_78+0x3c>
    51fe:	80 91 58 24 	lds	r24, 0x2458	; 0x802458 <InterruptSenderTable+0x9c>
    5202:	90 91 59 24 	lds	r25, 0x2459	; 0x802459 <InterruptSenderTable+0x9d>
    5206:	19 95       	eicall
    5208:	ff 91       	pop	r31
    520a:	ef 91       	pop	r30
    520c:	bf 91       	pop	r27
    520e:	af 91       	pop	r26
    5210:	9f 91       	pop	r25
    5212:	8f 91       	pop	r24
    5214:	7f 91       	pop	r23
    5216:	6f 91       	pop	r22
    5218:	5f 91       	pop	r21
    521a:	4f 91       	pop	r20
    521c:	3f 91       	pop	r19
    521e:	2f 91       	pop	r18
    5220:	0f 90       	pop	r0
    5222:	0b be       	out	0x3b, r0	; 59
    5224:	0f 90       	pop	r0
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	0f 90       	pop	r0
    522a:	1f 90       	pop	r1
    522c:	18 95       	reti

0000522e <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    522e:	1f 92       	push	r1
    5230:	0f 92       	push	r0
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	0f 92       	push	r0
    5236:	11 24       	eor	r1, r1
    5238:	0b b6       	in	r0, 0x3b	; 59
    523a:	0f 92       	push	r0
    523c:	2f 93       	push	r18
    523e:	3f 93       	push	r19
    5240:	4f 93       	push	r20
    5242:	5f 93       	push	r21
    5244:	6f 93       	push	r22
    5246:	7f 93       	push	r23
    5248:	8f 93       	push	r24
    524a:	9f 93       	push	r25
    524c:	af 93       	push	r26
    524e:	bf 93       	push	r27
    5250:	ef 93       	push	r30
    5252:	ff 93       	push	r31
    5254:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <InterruptFuncTable+0x9e>
    5258:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <InterruptFuncTable+0x9f>
    525c:	30 97       	sbiw	r30, 0x00	; 0
    525e:	29 f0       	breq	.+10     	; 0x526a <__vector_79+0x3c>
    5260:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <InterruptSenderTable+0x9e>
    5264:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <InterruptSenderTable+0x9f>
    5268:	19 95       	eicall
    526a:	ff 91       	pop	r31
    526c:	ef 91       	pop	r30
    526e:	bf 91       	pop	r27
    5270:	af 91       	pop	r26
    5272:	9f 91       	pop	r25
    5274:	8f 91       	pop	r24
    5276:	7f 91       	pop	r23
    5278:	6f 91       	pop	r22
    527a:	5f 91       	pop	r21
    527c:	4f 91       	pop	r20
    527e:	3f 91       	pop	r19
    5280:	2f 91       	pop	r18
    5282:	0f 90       	pop	r0
    5284:	0b be       	out	0x3b, r0	; 59
    5286:	0f 90       	pop	r0
    5288:	0f be       	out	0x3f, r0	; 63
    528a:	0f 90       	pop	r0
    528c:	1f 90       	pop	r1
    528e:	18 95       	reti

00005290 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    5290:	1f 92       	push	r1
    5292:	0f 92       	push	r0
    5294:	0f b6       	in	r0, 0x3f	; 63
    5296:	0f 92       	push	r0
    5298:	11 24       	eor	r1, r1
    529a:	0b b6       	in	r0, 0x3b	; 59
    529c:	0f 92       	push	r0
    529e:	2f 93       	push	r18
    52a0:	3f 93       	push	r19
    52a2:	4f 93       	push	r20
    52a4:	5f 93       	push	r21
    52a6:	6f 93       	push	r22
    52a8:	7f 93       	push	r23
    52aa:	8f 93       	push	r24
    52ac:	9f 93       	push	r25
    52ae:	af 93       	push	r26
    52b0:	bf 93       	push	r27
    52b2:	ef 93       	push	r30
    52b4:	ff 93       	push	r31
    52b6:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <InterruptFuncTable+0xa0>
    52ba:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <InterruptFuncTable+0xa1>
    52be:	30 97       	sbiw	r30, 0x00	; 0
    52c0:	29 f0       	breq	.+10     	; 0x52cc <__vector_80+0x3c>
    52c2:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <InterruptSenderTable+0xa0>
    52c6:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <InterruptSenderTable+0xa1>
    52ca:	19 95       	eicall
    52cc:	ff 91       	pop	r31
    52ce:	ef 91       	pop	r30
    52d0:	bf 91       	pop	r27
    52d2:	af 91       	pop	r26
    52d4:	9f 91       	pop	r25
    52d6:	8f 91       	pop	r24
    52d8:	7f 91       	pop	r23
    52da:	6f 91       	pop	r22
    52dc:	5f 91       	pop	r21
    52de:	4f 91       	pop	r20
    52e0:	3f 91       	pop	r19
    52e2:	2f 91       	pop	r18
    52e4:	0f 90       	pop	r0
    52e6:	0b be       	out	0x3b, r0	; 59
    52e8:	0f 90       	pop	r0
    52ea:	0f be       	out	0x3f, r0	; 63
    52ec:	0f 90       	pop	r0
    52ee:	1f 90       	pop	r1
    52f0:	18 95       	reti

000052f2 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    52f2:	1f 92       	push	r1
    52f4:	0f 92       	push	r0
    52f6:	0f b6       	in	r0, 0x3f	; 63
    52f8:	0f 92       	push	r0
    52fa:	11 24       	eor	r1, r1
    52fc:	0b b6       	in	r0, 0x3b	; 59
    52fe:	0f 92       	push	r0
    5300:	2f 93       	push	r18
    5302:	3f 93       	push	r19
    5304:	4f 93       	push	r20
    5306:	5f 93       	push	r21
    5308:	6f 93       	push	r22
    530a:	7f 93       	push	r23
    530c:	8f 93       	push	r24
    530e:	9f 93       	push	r25
    5310:	af 93       	push	r26
    5312:	bf 93       	push	r27
    5314:	ef 93       	push	r30
    5316:	ff 93       	push	r31
    5318:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <InterruptFuncTable+0xa2>
    531c:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <InterruptFuncTable+0xa3>
    5320:	30 97       	sbiw	r30, 0x00	; 0
    5322:	29 f0       	breq	.+10     	; 0x532e <__vector_81+0x3c>
    5324:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <InterruptSenderTable+0xa2>
    5328:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <InterruptSenderTable+0xa3>
    532c:	19 95       	eicall
    532e:	ff 91       	pop	r31
    5330:	ef 91       	pop	r30
    5332:	bf 91       	pop	r27
    5334:	af 91       	pop	r26
    5336:	9f 91       	pop	r25
    5338:	8f 91       	pop	r24
    533a:	7f 91       	pop	r23
    533c:	6f 91       	pop	r22
    533e:	5f 91       	pop	r21
    5340:	4f 91       	pop	r20
    5342:	3f 91       	pop	r19
    5344:	2f 91       	pop	r18
    5346:	0f 90       	pop	r0
    5348:	0b be       	out	0x3b, r0	; 59
    534a:	0f 90       	pop	r0
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	0f 90       	pop	r0
    5350:	1f 90       	pop	r1
    5352:	18 95       	reti

00005354 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    5354:	1f 92       	push	r1
    5356:	0f 92       	push	r0
    5358:	0f b6       	in	r0, 0x3f	; 63
    535a:	0f 92       	push	r0
    535c:	11 24       	eor	r1, r1
    535e:	0b b6       	in	r0, 0x3b	; 59
    5360:	0f 92       	push	r0
    5362:	2f 93       	push	r18
    5364:	3f 93       	push	r19
    5366:	4f 93       	push	r20
    5368:	5f 93       	push	r21
    536a:	6f 93       	push	r22
    536c:	7f 93       	push	r23
    536e:	8f 93       	push	r24
    5370:	9f 93       	push	r25
    5372:	af 93       	push	r26
    5374:	bf 93       	push	r27
    5376:	ef 93       	push	r30
    5378:	ff 93       	push	r31
    537a:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <InterruptFuncTable+0xa4>
    537e:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <InterruptFuncTable+0xa5>
    5382:	30 97       	sbiw	r30, 0x00	; 0
    5384:	29 f0       	breq	.+10     	; 0x5390 <__vector_82+0x3c>
    5386:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <InterruptSenderTable+0xa4>
    538a:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <InterruptSenderTable+0xa5>
    538e:	19 95       	eicall
    5390:	ff 91       	pop	r31
    5392:	ef 91       	pop	r30
    5394:	bf 91       	pop	r27
    5396:	af 91       	pop	r26
    5398:	9f 91       	pop	r25
    539a:	8f 91       	pop	r24
    539c:	7f 91       	pop	r23
    539e:	6f 91       	pop	r22
    53a0:	5f 91       	pop	r21
    53a2:	4f 91       	pop	r20
    53a4:	3f 91       	pop	r19
    53a6:	2f 91       	pop	r18
    53a8:	0f 90       	pop	r0
    53aa:	0b be       	out	0x3b, r0	; 59
    53ac:	0f 90       	pop	r0
    53ae:	0f be       	out	0x3f, r0	; 63
    53b0:	0f 90       	pop	r0
    53b2:	1f 90       	pop	r1
    53b4:	18 95       	reti

000053b6 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    53b6:	1f 92       	push	r1
    53b8:	0f 92       	push	r0
    53ba:	0f b6       	in	r0, 0x3f	; 63
    53bc:	0f 92       	push	r0
    53be:	11 24       	eor	r1, r1
    53c0:	0b b6       	in	r0, 0x3b	; 59
    53c2:	0f 92       	push	r0
    53c4:	2f 93       	push	r18
    53c6:	3f 93       	push	r19
    53c8:	4f 93       	push	r20
    53ca:	5f 93       	push	r21
    53cc:	6f 93       	push	r22
    53ce:	7f 93       	push	r23
    53d0:	8f 93       	push	r24
    53d2:	9f 93       	push	r25
    53d4:	af 93       	push	r26
    53d6:	bf 93       	push	r27
    53d8:	ef 93       	push	r30
    53da:	ff 93       	push	r31
    53dc:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <InterruptFuncTable+0xa6>
    53e0:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <InterruptFuncTable+0xa7>
    53e4:	30 97       	sbiw	r30, 0x00	; 0
    53e6:	29 f0       	breq	.+10     	; 0x53f2 <__vector_83+0x3c>
    53e8:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <InterruptSenderTable+0xa6>
    53ec:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <InterruptSenderTable+0xa7>
    53f0:	19 95       	eicall
    53f2:	ff 91       	pop	r31
    53f4:	ef 91       	pop	r30
    53f6:	bf 91       	pop	r27
    53f8:	af 91       	pop	r26
    53fa:	9f 91       	pop	r25
    53fc:	8f 91       	pop	r24
    53fe:	7f 91       	pop	r23
    5400:	6f 91       	pop	r22
    5402:	5f 91       	pop	r21
    5404:	4f 91       	pop	r20
    5406:	3f 91       	pop	r19
    5408:	2f 91       	pop	r18
    540a:	0f 90       	pop	r0
    540c:	0b be       	out	0x3b, r0	; 59
    540e:	0f 90       	pop	r0
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	0f 90       	pop	r0
    5414:	1f 90       	pop	r1
    5416:	18 95       	reti

00005418 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    5418:	1f 92       	push	r1
    541a:	0f 92       	push	r0
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	0f 92       	push	r0
    5420:	11 24       	eor	r1, r1
    5422:	0b b6       	in	r0, 0x3b	; 59
    5424:	0f 92       	push	r0
    5426:	2f 93       	push	r18
    5428:	3f 93       	push	r19
    542a:	4f 93       	push	r20
    542c:	5f 93       	push	r21
    542e:	6f 93       	push	r22
    5430:	7f 93       	push	r23
    5432:	8f 93       	push	r24
    5434:	9f 93       	push	r25
    5436:	af 93       	push	r26
    5438:	bf 93       	push	r27
    543a:	ef 93       	push	r30
    543c:	ff 93       	push	r31
    543e:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <InterruptFuncTable+0xa8>
    5442:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <InterruptFuncTable+0xa9>
    5446:	30 97       	sbiw	r30, 0x00	; 0
    5448:	29 f0       	breq	.+10     	; 0x5454 <__vector_84+0x3c>
    544a:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <InterruptSenderTable+0xa8>
    544e:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <InterruptSenderTable+0xa9>
    5452:	19 95       	eicall
    5454:	ff 91       	pop	r31
    5456:	ef 91       	pop	r30
    5458:	bf 91       	pop	r27
    545a:	af 91       	pop	r26
    545c:	9f 91       	pop	r25
    545e:	8f 91       	pop	r24
    5460:	7f 91       	pop	r23
    5462:	6f 91       	pop	r22
    5464:	5f 91       	pop	r21
    5466:	4f 91       	pop	r20
    5468:	3f 91       	pop	r19
    546a:	2f 91       	pop	r18
    546c:	0f 90       	pop	r0
    546e:	0b be       	out	0x3b, r0	; 59
    5470:	0f 90       	pop	r0
    5472:	0f be       	out	0x3f, r0	; 63
    5474:	0f 90       	pop	r0
    5476:	1f 90       	pop	r1
    5478:	18 95       	reti

0000547a <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    547a:	1f 92       	push	r1
    547c:	0f 92       	push	r0
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	0f 92       	push	r0
    5482:	11 24       	eor	r1, r1
    5484:	0b b6       	in	r0, 0x3b	; 59
    5486:	0f 92       	push	r0
    5488:	2f 93       	push	r18
    548a:	3f 93       	push	r19
    548c:	4f 93       	push	r20
    548e:	5f 93       	push	r21
    5490:	6f 93       	push	r22
    5492:	7f 93       	push	r23
    5494:	8f 93       	push	r24
    5496:	9f 93       	push	r25
    5498:	af 93       	push	r26
    549a:	bf 93       	push	r27
    549c:	ef 93       	push	r30
    549e:	ff 93       	push	r31
    54a0:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <InterruptFuncTable+0xaa>
    54a4:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <InterruptFuncTable+0xab>
    54a8:	30 97       	sbiw	r30, 0x00	; 0
    54aa:	29 f0       	breq	.+10     	; 0x54b6 <__vector_85+0x3c>
    54ac:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <InterruptSenderTable+0xaa>
    54b0:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <InterruptSenderTable+0xab>
    54b4:	19 95       	eicall
    54b6:	ff 91       	pop	r31
    54b8:	ef 91       	pop	r30
    54ba:	bf 91       	pop	r27
    54bc:	af 91       	pop	r26
    54be:	9f 91       	pop	r25
    54c0:	8f 91       	pop	r24
    54c2:	7f 91       	pop	r23
    54c4:	6f 91       	pop	r22
    54c6:	5f 91       	pop	r21
    54c8:	4f 91       	pop	r20
    54ca:	3f 91       	pop	r19
    54cc:	2f 91       	pop	r18
    54ce:	0f 90       	pop	r0
    54d0:	0b be       	out	0x3b, r0	; 59
    54d2:	0f 90       	pop	r0
    54d4:	0f be       	out	0x3f, r0	; 63
    54d6:	0f 90       	pop	r0
    54d8:	1f 90       	pop	r1
    54da:	18 95       	reti

000054dc <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    54dc:	1f 92       	push	r1
    54de:	0f 92       	push	r0
    54e0:	0f b6       	in	r0, 0x3f	; 63
    54e2:	0f 92       	push	r0
    54e4:	11 24       	eor	r1, r1
    54e6:	0b b6       	in	r0, 0x3b	; 59
    54e8:	0f 92       	push	r0
    54ea:	2f 93       	push	r18
    54ec:	3f 93       	push	r19
    54ee:	4f 93       	push	r20
    54f0:	5f 93       	push	r21
    54f2:	6f 93       	push	r22
    54f4:	7f 93       	push	r23
    54f6:	8f 93       	push	r24
    54f8:	9f 93       	push	r25
    54fa:	af 93       	push	r26
    54fc:	bf 93       	push	r27
    54fe:	ef 93       	push	r30
    5500:	ff 93       	push	r31
    5502:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <InterruptFuncTable+0xac>
    5506:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <InterruptFuncTable+0xad>
    550a:	30 97       	sbiw	r30, 0x00	; 0
    550c:	29 f0       	breq	.+10     	; 0x5518 <__vector_86+0x3c>
    550e:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <InterruptSenderTable+0xac>
    5512:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <InterruptSenderTable+0xad>
    5516:	19 95       	eicall
    5518:	ff 91       	pop	r31
    551a:	ef 91       	pop	r30
    551c:	bf 91       	pop	r27
    551e:	af 91       	pop	r26
    5520:	9f 91       	pop	r25
    5522:	8f 91       	pop	r24
    5524:	7f 91       	pop	r23
    5526:	6f 91       	pop	r22
    5528:	5f 91       	pop	r21
    552a:	4f 91       	pop	r20
    552c:	3f 91       	pop	r19
    552e:	2f 91       	pop	r18
    5530:	0f 90       	pop	r0
    5532:	0b be       	out	0x3b, r0	; 59
    5534:	0f 90       	pop	r0
    5536:	0f be       	out	0x3f, r0	; 63
    5538:	0f 90       	pop	r0
    553a:	1f 90       	pop	r1
    553c:	18 95       	reti

0000553e <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    553e:	1f 92       	push	r1
    5540:	0f 92       	push	r0
    5542:	0f b6       	in	r0, 0x3f	; 63
    5544:	0f 92       	push	r0
    5546:	11 24       	eor	r1, r1
    5548:	0b b6       	in	r0, 0x3b	; 59
    554a:	0f 92       	push	r0
    554c:	2f 93       	push	r18
    554e:	3f 93       	push	r19
    5550:	4f 93       	push	r20
    5552:	5f 93       	push	r21
    5554:	6f 93       	push	r22
    5556:	7f 93       	push	r23
    5558:	8f 93       	push	r24
    555a:	9f 93       	push	r25
    555c:	af 93       	push	r26
    555e:	bf 93       	push	r27
    5560:	ef 93       	push	r30
    5562:	ff 93       	push	r31
    5564:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <InterruptFuncTable+0xae>
    5568:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <InterruptFuncTable+0xaf>
    556c:	30 97       	sbiw	r30, 0x00	; 0
    556e:	29 f0       	breq	.+10     	; 0x557a <__vector_87+0x3c>
    5570:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <InterruptSenderTable+0xae>
    5574:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <InterruptSenderTable+0xaf>
    5578:	19 95       	eicall
    557a:	ff 91       	pop	r31
    557c:	ef 91       	pop	r30
    557e:	bf 91       	pop	r27
    5580:	af 91       	pop	r26
    5582:	9f 91       	pop	r25
    5584:	8f 91       	pop	r24
    5586:	7f 91       	pop	r23
    5588:	6f 91       	pop	r22
    558a:	5f 91       	pop	r21
    558c:	4f 91       	pop	r20
    558e:	3f 91       	pop	r19
    5590:	2f 91       	pop	r18
    5592:	0f 90       	pop	r0
    5594:	0b be       	out	0x3b, r0	; 59
    5596:	0f 90       	pop	r0
    5598:	0f be       	out	0x3f, r0	; 63
    559a:	0f 90       	pop	r0
    559c:	1f 90       	pop	r1
    559e:	18 95       	reti

000055a0 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    55a0:	1f 92       	push	r1
    55a2:	0f 92       	push	r0
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	0f 92       	push	r0
    55a8:	11 24       	eor	r1, r1
    55aa:	0b b6       	in	r0, 0x3b	; 59
    55ac:	0f 92       	push	r0
    55ae:	2f 93       	push	r18
    55b0:	3f 93       	push	r19
    55b2:	4f 93       	push	r20
    55b4:	5f 93       	push	r21
    55b6:	6f 93       	push	r22
    55b8:	7f 93       	push	r23
    55ba:	8f 93       	push	r24
    55bc:	9f 93       	push	r25
    55be:	af 93       	push	r26
    55c0:	bf 93       	push	r27
    55c2:	ef 93       	push	r30
    55c4:	ff 93       	push	r31
    55c6:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <InterruptFuncTable+0xb0>
    55ca:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <InterruptFuncTable+0xb1>
    55ce:	30 97       	sbiw	r30, 0x00	; 0
    55d0:	29 f0       	breq	.+10     	; 0x55dc <__vector_88+0x3c>
    55d2:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <InterruptSenderTable+0xb0>
    55d6:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <InterruptSenderTable+0xb1>
    55da:	19 95       	eicall
    55dc:	ff 91       	pop	r31
    55de:	ef 91       	pop	r30
    55e0:	bf 91       	pop	r27
    55e2:	af 91       	pop	r26
    55e4:	9f 91       	pop	r25
    55e6:	8f 91       	pop	r24
    55e8:	7f 91       	pop	r23
    55ea:	6f 91       	pop	r22
    55ec:	5f 91       	pop	r21
    55ee:	4f 91       	pop	r20
    55f0:	3f 91       	pop	r19
    55f2:	2f 91       	pop	r18
    55f4:	0f 90       	pop	r0
    55f6:	0b be       	out	0x3b, r0	; 59
    55f8:	0f 90       	pop	r0
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	0f 90       	pop	r0
    55fe:	1f 90       	pop	r1
    5600:	18 95       	reti

00005602 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    5602:	1f 92       	push	r1
    5604:	0f 92       	push	r0
    5606:	0f b6       	in	r0, 0x3f	; 63
    5608:	0f 92       	push	r0
    560a:	11 24       	eor	r1, r1
    560c:	0b b6       	in	r0, 0x3b	; 59
    560e:	0f 92       	push	r0
    5610:	2f 93       	push	r18
    5612:	3f 93       	push	r19
    5614:	4f 93       	push	r20
    5616:	5f 93       	push	r21
    5618:	6f 93       	push	r22
    561a:	7f 93       	push	r23
    561c:	8f 93       	push	r24
    561e:	9f 93       	push	r25
    5620:	af 93       	push	r26
    5622:	bf 93       	push	r27
    5624:	ef 93       	push	r30
    5626:	ff 93       	push	r31
    5628:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <InterruptFuncTable+0xb2>
    562c:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <InterruptFuncTable+0xb3>
    5630:	30 97       	sbiw	r30, 0x00	; 0
    5632:	29 f0       	breq	.+10     	; 0x563e <__vector_89+0x3c>
    5634:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <InterruptSenderTable+0xb2>
    5638:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <InterruptSenderTable+0xb3>
    563c:	19 95       	eicall
    563e:	ff 91       	pop	r31
    5640:	ef 91       	pop	r30
    5642:	bf 91       	pop	r27
    5644:	af 91       	pop	r26
    5646:	9f 91       	pop	r25
    5648:	8f 91       	pop	r24
    564a:	7f 91       	pop	r23
    564c:	6f 91       	pop	r22
    564e:	5f 91       	pop	r21
    5650:	4f 91       	pop	r20
    5652:	3f 91       	pop	r19
    5654:	2f 91       	pop	r18
    5656:	0f 90       	pop	r0
    5658:	0b be       	out	0x3b, r0	; 59
    565a:	0f 90       	pop	r0
    565c:	0f be       	out	0x3f, r0	; 63
    565e:	0f 90       	pop	r0
    5660:	1f 90       	pop	r1
    5662:	18 95       	reti

00005664 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    5664:	1f 92       	push	r1
    5666:	0f 92       	push	r0
    5668:	0f b6       	in	r0, 0x3f	; 63
    566a:	0f 92       	push	r0
    566c:	11 24       	eor	r1, r1
    566e:	0b b6       	in	r0, 0x3b	; 59
    5670:	0f 92       	push	r0
    5672:	2f 93       	push	r18
    5674:	3f 93       	push	r19
    5676:	4f 93       	push	r20
    5678:	5f 93       	push	r21
    567a:	6f 93       	push	r22
    567c:	7f 93       	push	r23
    567e:	8f 93       	push	r24
    5680:	9f 93       	push	r25
    5682:	af 93       	push	r26
    5684:	bf 93       	push	r27
    5686:	ef 93       	push	r30
    5688:	ff 93       	push	r31
    568a:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <InterruptFuncTable+0xb4>
    568e:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <InterruptFuncTable+0xb5>
    5692:	30 97       	sbiw	r30, 0x00	; 0
    5694:	29 f0       	breq	.+10     	; 0x56a0 <__vector_90+0x3c>
    5696:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <InterruptSenderTable+0xb4>
    569a:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <InterruptSenderTable+0xb5>
    569e:	19 95       	eicall
    56a0:	ff 91       	pop	r31
    56a2:	ef 91       	pop	r30
    56a4:	bf 91       	pop	r27
    56a6:	af 91       	pop	r26
    56a8:	9f 91       	pop	r25
    56aa:	8f 91       	pop	r24
    56ac:	7f 91       	pop	r23
    56ae:	6f 91       	pop	r22
    56b0:	5f 91       	pop	r21
    56b2:	4f 91       	pop	r20
    56b4:	3f 91       	pop	r19
    56b6:	2f 91       	pop	r18
    56b8:	0f 90       	pop	r0
    56ba:	0b be       	out	0x3b, r0	; 59
    56bc:	0f 90       	pop	r0
    56be:	0f be       	out	0x3f, r0	; 63
    56c0:	0f 90       	pop	r0
    56c2:	1f 90       	pop	r1
    56c4:	18 95       	reti

000056c6 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    56c6:	1f 92       	push	r1
    56c8:	0f 92       	push	r0
    56ca:	0f b6       	in	r0, 0x3f	; 63
    56cc:	0f 92       	push	r0
    56ce:	11 24       	eor	r1, r1
    56d0:	0b b6       	in	r0, 0x3b	; 59
    56d2:	0f 92       	push	r0
    56d4:	2f 93       	push	r18
    56d6:	3f 93       	push	r19
    56d8:	4f 93       	push	r20
    56da:	5f 93       	push	r21
    56dc:	6f 93       	push	r22
    56de:	7f 93       	push	r23
    56e0:	8f 93       	push	r24
    56e2:	9f 93       	push	r25
    56e4:	af 93       	push	r26
    56e6:	bf 93       	push	r27
    56e8:	ef 93       	push	r30
    56ea:	ff 93       	push	r31
    56ec:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <InterruptFuncTable+0xb6>
    56f0:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <InterruptFuncTable+0xb7>
    56f4:	30 97       	sbiw	r30, 0x00	; 0
    56f6:	29 f0       	breq	.+10     	; 0x5702 <__vector_91+0x3c>
    56f8:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <InterruptSenderTable+0xb6>
    56fc:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <InterruptSenderTable+0xb7>
    5700:	19 95       	eicall
    5702:	ff 91       	pop	r31
    5704:	ef 91       	pop	r30
    5706:	bf 91       	pop	r27
    5708:	af 91       	pop	r26
    570a:	9f 91       	pop	r25
    570c:	8f 91       	pop	r24
    570e:	7f 91       	pop	r23
    5710:	6f 91       	pop	r22
    5712:	5f 91       	pop	r21
    5714:	4f 91       	pop	r20
    5716:	3f 91       	pop	r19
    5718:	2f 91       	pop	r18
    571a:	0f 90       	pop	r0
    571c:	0b be       	out	0x3b, r0	; 59
    571e:	0f 90       	pop	r0
    5720:	0f be       	out	0x3f, r0	; 63
    5722:	0f 90       	pop	r0
    5724:	1f 90       	pop	r1
    5726:	18 95       	reti

00005728 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    5728:	1f 92       	push	r1
    572a:	0f 92       	push	r0
    572c:	0f b6       	in	r0, 0x3f	; 63
    572e:	0f 92       	push	r0
    5730:	11 24       	eor	r1, r1
    5732:	0b b6       	in	r0, 0x3b	; 59
    5734:	0f 92       	push	r0
    5736:	2f 93       	push	r18
    5738:	3f 93       	push	r19
    573a:	4f 93       	push	r20
    573c:	5f 93       	push	r21
    573e:	6f 93       	push	r22
    5740:	7f 93       	push	r23
    5742:	8f 93       	push	r24
    5744:	9f 93       	push	r25
    5746:	af 93       	push	r26
    5748:	bf 93       	push	r27
    574a:	ef 93       	push	r30
    574c:	ff 93       	push	r31
    574e:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <InterruptFuncTable+0xb8>
    5752:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <InterruptFuncTable+0xb9>
    5756:	30 97       	sbiw	r30, 0x00	; 0
    5758:	29 f0       	breq	.+10     	; 0x5764 <__vector_92+0x3c>
    575a:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <InterruptSenderTable+0xb8>
    575e:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <InterruptSenderTable+0xb9>
    5762:	19 95       	eicall
    5764:	ff 91       	pop	r31
    5766:	ef 91       	pop	r30
    5768:	bf 91       	pop	r27
    576a:	af 91       	pop	r26
    576c:	9f 91       	pop	r25
    576e:	8f 91       	pop	r24
    5770:	7f 91       	pop	r23
    5772:	6f 91       	pop	r22
    5774:	5f 91       	pop	r21
    5776:	4f 91       	pop	r20
    5778:	3f 91       	pop	r19
    577a:	2f 91       	pop	r18
    577c:	0f 90       	pop	r0
    577e:	0b be       	out	0x3b, r0	; 59
    5780:	0f 90       	pop	r0
    5782:	0f be       	out	0x3f, r0	; 63
    5784:	0f 90       	pop	r0
    5786:	1f 90       	pop	r1
    5788:	18 95       	reti

0000578a <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    578a:	1f 92       	push	r1
    578c:	0f 92       	push	r0
    578e:	0f b6       	in	r0, 0x3f	; 63
    5790:	0f 92       	push	r0
    5792:	11 24       	eor	r1, r1
    5794:	0b b6       	in	r0, 0x3b	; 59
    5796:	0f 92       	push	r0
    5798:	2f 93       	push	r18
    579a:	3f 93       	push	r19
    579c:	4f 93       	push	r20
    579e:	5f 93       	push	r21
    57a0:	6f 93       	push	r22
    57a2:	7f 93       	push	r23
    57a4:	8f 93       	push	r24
    57a6:	9f 93       	push	r25
    57a8:	af 93       	push	r26
    57aa:	bf 93       	push	r27
    57ac:	ef 93       	push	r30
    57ae:	ff 93       	push	r31
    57b0:	e0 91 80 23 	lds	r30, 0x2380	; 0x802380 <InterruptFuncTable+0xba>
    57b4:	f0 91 81 23 	lds	r31, 0x2381	; 0x802381 <InterruptFuncTable+0xbb>
    57b8:	30 97       	sbiw	r30, 0x00	; 0
    57ba:	29 f0       	breq	.+10     	; 0x57c6 <__vector_93+0x3c>
    57bc:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <InterruptSenderTable+0xba>
    57c0:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <InterruptSenderTable+0xbb>
    57c4:	19 95       	eicall
    57c6:	ff 91       	pop	r31
    57c8:	ef 91       	pop	r30
    57ca:	bf 91       	pop	r27
    57cc:	af 91       	pop	r26
    57ce:	9f 91       	pop	r25
    57d0:	8f 91       	pop	r24
    57d2:	7f 91       	pop	r23
    57d4:	6f 91       	pop	r22
    57d6:	5f 91       	pop	r21
    57d8:	4f 91       	pop	r20
    57da:	3f 91       	pop	r19
    57dc:	2f 91       	pop	r18
    57de:	0f 90       	pop	r0
    57e0:	0b be       	out	0x3b, r0	; 59
    57e2:	0f 90       	pop	r0
    57e4:	0f be       	out	0x3f, r0	; 63
    57e6:	0f 90       	pop	r0
    57e8:	1f 90       	pop	r1
    57ea:	18 95       	reti

000057ec <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    57ec:	1f 92       	push	r1
    57ee:	0f 92       	push	r0
    57f0:	0f b6       	in	r0, 0x3f	; 63
    57f2:	0f 92       	push	r0
    57f4:	11 24       	eor	r1, r1
    57f6:	0b b6       	in	r0, 0x3b	; 59
    57f8:	0f 92       	push	r0
    57fa:	2f 93       	push	r18
    57fc:	3f 93       	push	r19
    57fe:	4f 93       	push	r20
    5800:	5f 93       	push	r21
    5802:	6f 93       	push	r22
    5804:	7f 93       	push	r23
    5806:	8f 93       	push	r24
    5808:	9f 93       	push	r25
    580a:	af 93       	push	r26
    580c:	bf 93       	push	r27
    580e:	ef 93       	push	r30
    5810:	ff 93       	push	r31
    5812:	e0 91 96 23 	lds	r30, 0x2396	; 0x802396 <InterruptFuncTable+0xd0>
    5816:	f0 91 97 23 	lds	r31, 0x2397	; 0x802397 <InterruptFuncTable+0xd1>
    581a:	30 97       	sbiw	r30, 0x00	; 0
    581c:	29 f0       	breq	.+10     	; 0x5828 <__vector_104+0x3c>
    581e:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <InterruptSenderTable+0xd0>
    5822:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <InterruptSenderTable+0xd1>
    5826:	19 95       	eicall
    5828:	ff 91       	pop	r31
    582a:	ef 91       	pop	r30
    582c:	bf 91       	pop	r27
    582e:	af 91       	pop	r26
    5830:	9f 91       	pop	r25
    5832:	8f 91       	pop	r24
    5834:	7f 91       	pop	r23
    5836:	6f 91       	pop	r22
    5838:	5f 91       	pop	r21
    583a:	4f 91       	pop	r20
    583c:	3f 91       	pop	r19
    583e:	2f 91       	pop	r18
    5840:	0f 90       	pop	r0
    5842:	0b be       	out	0x3b, r0	; 59
    5844:	0f 90       	pop	r0
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	0f 90       	pop	r0
    584a:	1f 90       	pop	r1
    584c:	18 95       	reti

0000584e <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    584e:	1f 92       	push	r1
    5850:	0f 92       	push	r0
    5852:	0f b6       	in	r0, 0x3f	; 63
    5854:	0f 92       	push	r0
    5856:	11 24       	eor	r1, r1
    5858:	0b b6       	in	r0, 0x3b	; 59
    585a:	0f 92       	push	r0
    585c:	2f 93       	push	r18
    585e:	3f 93       	push	r19
    5860:	4f 93       	push	r20
    5862:	5f 93       	push	r21
    5864:	6f 93       	push	r22
    5866:	7f 93       	push	r23
    5868:	8f 93       	push	r24
    586a:	9f 93       	push	r25
    586c:	af 93       	push	r26
    586e:	bf 93       	push	r27
    5870:	ef 93       	push	r30
    5872:	ff 93       	push	r31
    5874:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <InterruptFuncTable+0xd2>
    5878:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <InterruptFuncTable+0xd3>
    587c:	30 97       	sbiw	r30, 0x00	; 0
    587e:	29 f0       	breq	.+10     	; 0x588a <__vector_105+0x3c>
    5880:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <InterruptSenderTable+0xd2>
    5884:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <InterruptSenderTable+0xd3>
    5888:	19 95       	eicall
    588a:	ff 91       	pop	r31
    588c:	ef 91       	pop	r30
    588e:	bf 91       	pop	r27
    5890:	af 91       	pop	r26
    5892:	9f 91       	pop	r25
    5894:	8f 91       	pop	r24
    5896:	7f 91       	pop	r23
    5898:	6f 91       	pop	r22
    589a:	5f 91       	pop	r21
    589c:	4f 91       	pop	r20
    589e:	3f 91       	pop	r19
    58a0:	2f 91       	pop	r18
    58a2:	0f 90       	pop	r0
    58a4:	0b be       	out	0x3b, r0	; 59
    58a6:	0f 90       	pop	r0
    58a8:	0f be       	out	0x3f, r0	; 63
    58aa:	0f 90       	pop	r0
    58ac:	1f 90       	pop	r1
    58ae:	18 95       	reti

000058b0 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    58b0:	1f 92       	push	r1
    58b2:	0f 92       	push	r0
    58b4:	0f b6       	in	r0, 0x3f	; 63
    58b6:	0f 92       	push	r0
    58b8:	11 24       	eor	r1, r1
    58ba:	0b b6       	in	r0, 0x3b	; 59
    58bc:	0f 92       	push	r0
    58be:	2f 93       	push	r18
    58c0:	3f 93       	push	r19
    58c2:	4f 93       	push	r20
    58c4:	5f 93       	push	r21
    58c6:	6f 93       	push	r22
    58c8:	7f 93       	push	r23
    58ca:	8f 93       	push	r24
    58cc:	9f 93       	push	r25
    58ce:	af 93       	push	r26
    58d0:	bf 93       	push	r27
    58d2:	ef 93       	push	r30
    58d4:	ff 93       	push	r31
    58d6:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <InterruptFuncTable+0xd8>
    58da:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <InterruptFuncTable+0xd9>
    58de:	30 97       	sbiw	r30, 0x00	; 0
    58e0:	29 f0       	breq	.+10     	; 0x58ec <__vector_108+0x3c>
    58e2:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <InterruptSenderTable+0xd8>
    58e6:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <InterruptSenderTable+0xd9>
    58ea:	19 95       	eicall
    58ec:	ff 91       	pop	r31
    58ee:	ef 91       	pop	r30
    58f0:	bf 91       	pop	r27
    58f2:	af 91       	pop	r26
    58f4:	9f 91       	pop	r25
    58f6:	8f 91       	pop	r24
    58f8:	7f 91       	pop	r23
    58fa:	6f 91       	pop	r22
    58fc:	5f 91       	pop	r21
    58fe:	4f 91       	pop	r20
    5900:	3f 91       	pop	r19
    5902:	2f 91       	pop	r18
    5904:	0f 90       	pop	r0
    5906:	0b be       	out	0x3b, r0	; 59
    5908:	0f 90       	pop	r0
    590a:	0f be       	out	0x3f, r0	; 63
    590c:	0f 90       	pop	r0
    590e:	1f 90       	pop	r1
    5910:	18 95       	reti

00005912 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    5912:	1f 92       	push	r1
    5914:	0f 92       	push	r0
    5916:	0f b6       	in	r0, 0x3f	; 63
    5918:	0f 92       	push	r0
    591a:	11 24       	eor	r1, r1
    591c:	0b b6       	in	r0, 0x3b	; 59
    591e:	0f 92       	push	r0
    5920:	2f 93       	push	r18
    5922:	3f 93       	push	r19
    5924:	4f 93       	push	r20
    5926:	5f 93       	push	r21
    5928:	6f 93       	push	r22
    592a:	7f 93       	push	r23
    592c:	8f 93       	push	r24
    592e:	9f 93       	push	r25
    5930:	af 93       	push	r26
    5932:	bf 93       	push	r27
    5934:	ef 93       	push	r30
    5936:	ff 93       	push	r31
    5938:	e0 91 a0 23 	lds	r30, 0x23A0	; 0x8023a0 <InterruptFuncTable+0xda>
    593c:	f0 91 a1 23 	lds	r31, 0x23A1	; 0x8023a1 <InterruptFuncTable+0xdb>
    5940:	30 97       	sbiw	r30, 0x00	; 0
    5942:	29 f0       	breq	.+10     	; 0x594e <__vector_109+0x3c>
    5944:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <InterruptSenderTable+0xda>
    5948:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <InterruptSenderTable+0xdb>
    594c:	19 95       	eicall
    594e:	ff 91       	pop	r31
    5950:	ef 91       	pop	r30
    5952:	bf 91       	pop	r27
    5954:	af 91       	pop	r26
    5956:	9f 91       	pop	r25
    5958:	8f 91       	pop	r24
    595a:	7f 91       	pop	r23
    595c:	6f 91       	pop	r22
    595e:	5f 91       	pop	r21
    5960:	4f 91       	pop	r20
    5962:	3f 91       	pop	r19
    5964:	2f 91       	pop	r18
    5966:	0f 90       	pop	r0
    5968:	0b be       	out	0x3b, r0	; 59
    596a:	0f 90       	pop	r0
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	0f 90       	pop	r0
    5970:	1f 90       	pop	r1
    5972:	18 95       	reti

00005974 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    5974:	1f 92       	push	r1
    5976:	0f 92       	push	r0
    5978:	0f b6       	in	r0, 0x3f	; 63
    597a:	0f 92       	push	r0
    597c:	11 24       	eor	r1, r1
    597e:	0b b6       	in	r0, 0x3b	; 59
    5980:	0f 92       	push	r0
    5982:	2f 93       	push	r18
    5984:	3f 93       	push	r19
    5986:	4f 93       	push	r20
    5988:	5f 93       	push	r21
    598a:	6f 93       	push	r22
    598c:	7f 93       	push	r23
    598e:	8f 93       	push	r24
    5990:	9f 93       	push	r25
    5992:	af 93       	push	r26
    5994:	bf 93       	push	r27
    5996:	ef 93       	push	r30
    5998:	ff 93       	push	r31
    599a:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <InterruptFuncTable+0xdc>
    599e:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <InterruptFuncTable+0xdd>
    59a2:	30 97       	sbiw	r30, 0x00	; 0
    59a4:	29 f0       	breq	.+10     	; 0x59b0 <__vector_110+0x3c>
    59a6:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <InterruptSenderTable+0xdc>
    59aa:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <InterruptSenderTable+0xdd>
    59ae:	19 95       	eicall
    59b0:	ff 91       	pop	r31
    59b2:	ef 91       	pop	r30
    59b4:	bf 91       	pop	r27
    59b6:	af 91       	pop	r26
    59b8:	9f 91       	pop	r25
    59ba:	8f 91       	pop	r24
    59bc:	7f 91       	pop	r23
    59be:	6f 91       	pop	r22
    59c0:	5f 91       	pop	r21
    59c2:	4f 91       	pop	r20
    59c4:	3f 91       	pop	r19
    59c6:	2f 91       	pop	r18
    59c8:	0f 90       	pop	r0
    59ca:	0b be       	out	0x3b, r0	; 59
    59cc:	0f 90       	pop	r0
    59ce:	0f be       	out	0x3f, r0	; 63
    59d0:	0f 90       	pop	r0
    59d2:	1f 90       	pop	r1
    59d4:	18 95       	reti

000059d6 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    59d6:	1f 92       	push	r1
    59d8:	0f 92       	push	r0
    59da:	0f b6       	in	r0, 0x3f	; 63
    59dc:	0f 92       	push	r0
    59de:	11 24       	eor	r1, r1
    59e0:	0b b6       	in	r0, 0x3b	; 59
    59e2:	0f 92       	push	r0
    59e4:	2f 93       	push	r18
    59e6:	3f 93       	push	r19
    59e8:	4f 93       	push	r20
    59ea:	5f 93       	push	r21
    59ec:	6f 93       	push	r22
    59ee:	7f 93       	push	r23
    59f0:	8f 93       	push	r24
    59f2:	9f 93       	push	r25
    59f4:	af 93       	push	r26
    59f6:	bf 93       	push	r27
    59f8:	ef 93       	push	r30
    59fa:	ff 93       	push	r31
    59fc:	e0 91 a4 23 	lds	r30, 0x23A4	; 0x8023a4 <InterruptFuncTable+0xde>
    5a00:	f0 91 a5 23 	lds	r31, 0x23A5	; 0x8023a5 <InterruptFuncTable+0xdf>
    5a04:	30 97       	sbiw	r30, 0x00	; 0
    5a06:	29 f0       	breq	.+10     	; 0x5a12 <__vector_111+0x3c>
    5a08:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <InterruptSenderTable+0xde>
    5a0c:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <InterruptSenderTable+0xdf>
    5a10:	19 95       	eicall
    5a12:	ff 91       	pop	r31
    5a14:	ef 91       	pop	r30
    5a16:	bf 91       	pop	r27
    5a18:	af 91       	pop	r26
    5a1a:	9f 91       	pop	r25
    5a1c:	8f 91       	pop	r24
    5a1e:	7f 91       	pop	r23
    5a20:	6f 91       	pop	r22
    5a22:	5f 91       	pop	r21
    5a24:	4f 91       	pop	r20
    5a26:	3f 91       	pop	r19
    5a28:	2f 91       	pop	r18
    5a2a:	0f 90       	pop	r0
    5a2c:	0b be       	out	0x3b, r0	; 59
    5a2e:	0f 90       	pop	r0
    5a30:	0f be       	out	0x3f, r0	; 63
    5a32:	0f 90       	pop	r0
    5a34:	1f 90       	pop	r1
    5a36:	18 95       	reti

00005a38 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    5a38:	1f 92       	push	r1
    5a3a:	0f 92       	push	r0
    5a3c:	0f b6       	in	r0, 0x3f	; 63
    5a3e:	0f 92       	push	r0
    5a40:	11 24       	eor	r1, r1
    5a42:	0b b6       	in	r0, 0x3b	; 59
    5a44:	0f 92       	push	r0
    5a46:	2f 93       	push	r18
    5a48:	3f 93       	push	r19
    5a4a:	4f 93       	push	r20
    5a4c:	5f 93       	push	r21
    5a4e:	6f 93       	push	r22
    5a50:	7f 93       	push	r23
    5a52:	8f 93       	push	r24
    5a54:	9f 93       	push	r25
    5a56:	af 93       	push	r26
    5a58:	bf 93       	push	r27
    5a5a:	ef 93       	push	r30
    5a5c:	ff 93       	push	r31
    5a5e:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <InterruptFuncTable+0xe0>
    5a62:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <InterruptFuncTable+0xe1>
    5a66:	30 97       	sbiw	r30, 0x00	; 0
    5a68:	29 f0       	breq	.+10     	; 0x5a74 <__vector_112+0x3c>
    5a6a:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <InterruptSenderTable+0xe0>
    5a6e:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <InterruptSenderTable+0xe1>
    5a72:	19 95       	eicall
    5a74:	ff 91       	pop	r31
    5a76:	ef 91       	pop	r30
    5a78:	bf 91       	pop	r27
    5a7a:	af 91       	pop	r26
    5a7c:	9f 91       	pop	r25
    5a7e:	8f 91       	pop	r24
    5a80:	7f 91       	pop	r23
    5a82:	6f 91       	pop	r22
    5a84:	5f 91       	pop	r21
    5a86:	4f 91       	pop	r20
    5a88:	3f 91       	pop	r19
    5a8a:	2f 91       	pop	r18
    5a8c:	0f 90       	pop	r0
    5a8e:	0b be       	out	0x3b, r0	; 59
    5a90:	0f 90       	pop	r0
    5a92:	0f be       	out	0x3f, r0	; 63
    5a94:	0f 90       	pop	r0
    5a96:	1f 90       	pop	r1
    5a98:	18 95       	reti

00005a9a <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    5a9a:	1f 92       	push	r1
    5a9c:	0f 92       	push	r0
    5a9e:	0f b6       	in	r0, 0x3f	; 63
    5aa0:	0f 92       	push	r0
    5aa2:	11 24       	eor	r1, r1
    5aa4:	0b b6       	in	r0, 0x3b	; 59
    5aa6:	0f 92       	push	r0
    5aa8:	2f 93       	push	r18
    5aaa:	3f 93       	push	r19
    5aac:	4f 93       	push	r20
    5aae:	5f 93       	push	r21
    5ab0:	6f 93       	push	r22
    5ab2:	7f 93       	push	r23
    5ab4:	8f 93       	push	r24
    5ab6:	9f 93       	push	r25
    5ab8:	af 93       	push	r26
    5aba:	bf 93       	push	r27
    5abc:	ef 93       	push	r30
    5abe:	ff 93       	push	r31
    5ac0:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <InterruptFuncTable+0xe2>
    5ac4:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <InterruptFuncTable+0xe3>
    5ac8:	30 97       	sbiw	r30, 0x00	; 0
    5aca:	29 f0       	breq	.+10     	; 0x5ad6 <__vector_113+0x3c>
    5acc:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <InterruptSenderTable+0xe2>
    5ad0:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <InterruptSenderTable+0xe3>
    5ad4:	19 95       	eicall
    5ad6:	ff 91       	pop	r31
    5ad8:	ef 91       	pop	r30
    5ada:	bf 91       	pop	r27
    5adc:	af 91       	pop	r26
    5ade:	9f 91       	pop	r25
    5ae0:	8f 91       	pop	r24
    5ae2:	7f 91       	pop	r23
    5ae4:	6f 91       	pop	r22
    5ae6:	5f 91       	pop	r21
    5ae8:	4f 91       	pop	r20
    5aea:	3f 91       	pop	r19
    5aec:	2f 91       	pop	r18
    5aee:	0f 90       	pop	r0
    5af0:	0b be       	out	0x3b, r0	; 59
    5af2:	0f 90       	pop	r0
    5af4:	0f be       	out	0x3f, r0	; 63
    5af6:	0f 90       	pop	r0
    5af8:	1f 90       	pop	r1
    5afa:	18 95       	reti

00005afc <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    5afc:	1f 92       	push	r1
    5afe:	0f 92       	push	r0
    5b00:	0f b6       	in	r0, 0x3f	; 63
    5b02:	0f 92       	push	r0
    5b04:	11 24       	eor	r1, r1
    5b06:	0b b6       	in	r0, 0x3b	; 59
    5b08:	0f 92       	push	r0
    5b0a:	2f 93       	push	r18
    5b0c:	3f 93       	push	r19
    5b0e:	4f 93       	push	r20
    5b10:	5f 93       	push	r21
    5b12:	6f 93       	push	r22
    5b14:	7f 93       	push	r23
    5b16:	8f 93       	push	r24
    5b18:	9f 93       	push	r25
    5b1a:	af 93       	push	r26
    5b1c:	bf 93       	push	r27
    5b1e:	ef 93       	push	r30
    5b20:	ff 93       	push	r31
    5b22:	e0 91 b4 23 	lds	r30, 0x23B4	; 0x8023b4 <InterruptFuncTable+0xee>
    5b26:	f0 91 b5 23 	lds	r31, 0x23B5	; 0x8023b5 <InterruptFuncTable+0xef>
    5b2a:	30 97       	sbiw	r30, 0x00	; 0
    5b2c:	29 f0       	breq	.+10     	; 0x5b38 <__vector_119+0x3c>
    5b2e:	80 91 aa 24 	lds	r24, 0x24AA	; 0x8024aa <InterruptSenderTable+0xee>
    5b32:	90 91 ab 24 	lds	r25, 0x24AB	; 0x8024ab <InterruptSenderTable+0xef>
    5b36:	19 95       	eicall
    5b38:	ff 91       	pop	r31
    5b3a:	ef 91       	pop	r30
    5b3c:	bf 91       	pop	r27
    5b3e:	af 91       	pop	r26
    5b40:	9f 91       	pop	r25
    5b42:	8f 91       	pop	r24
    5b44:	7f 91       	pop	r23
    5b46:	6f 91       	pop	r22
    5b48:	5f 91       	pop	r21
    5b4a:	4f 91       	pop	r20
    5b4c:	3f 91       	pop	r19
    5b4e:	2f 91       	pop	r18
    5b50:	0f 90       	pop	r0
    5b52:	0b be       	out	0x3b, r0	; 59
    5b54:	0f 90       	pop	r0
    5b56:	0f be       	out	0x3f, r0	; 63
    5b58:	0f 90       	pop	r0
    5b5a:	1f 90       	pop	r1
    5b5c:	18 95       	reti

00005b5e <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    5b5e:	1f 92       	push	r1
    5b60:	0f 92       	push	r0
    5b62:	0f b6       	in	r0, 0x3f	; 63
    5b64:	0f 92       	push	r0
    5b66:	11 24       	eor	r1, r1
    5b68:	0b b6       	in	r0, 0x3b	; 59
    5b6a:	0f 92       	push	r0
    5b6c:	2f 93       	push	r18
    5b6e:	3f 93       	push	r19
    5b70:	4f 93       	push	r20
    5b72:	5f 93       	push	r21
    5b74:	6f 93       	push	r22
    5b76:	7f 93       	push	r23
    5b78:	8f 93       	push	r24
    5b7a:	9f 93       	push	r25
    5b7c:	af 93       	push	r26
    5b7e:	bf 93       	push	r27
    5b80:	ef 93       	push	r30
    5b82:	ff 93       	push	r31
    5b84:	e0 91 b6 23 	lds	r30, 0x23B6	; 0x8023b6 <InterruptFuncTable+0xf0>
    5b88:	f0 91 b7 23 	lds	r31, 0x23B7	; 0x8023b7 <InterruptFuncTable+0xf1>
    5b8c:	30 97       	sbiw	r30, 0x00	; 0
    5b8e:	29 f0       	breq	.+10     	; 0x5b9a <__vector_120+0x3c>
    5b90:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <InterruptSenderTable+0xf0>
    5b94:	90 91 ad 24 	lds	r25, 0x24AD	; 0x8024ad <InterruptSenderTable+0xf1>
    5b98:	19 95       	eicall
    5b9a:	ff 91       	pop	r31
    5b9c:	ef 91       	pop	r30
    5b9e:	bf 91       	pop	r27
    5ba0:	af 91       	pop	r26
    5ba2:	9f 91       	pop	r25
    5ba4:	8f 91       	pop	r24
    5ba6:	7f 91       	pop	r23
    5ba8:	6f 91       	pop	r22
    5baa:	5f 91       	pop	r21
    5bac:	4f 91       	pop	r20
    5bae:	3f 91       	pop	r19
    5bb0:	2f 91       	pop	r18
    5bb2:	0f 90       	pop	r0
    5bb4:	0b be       	out	0x3b, r0	; 59
    5bb6:	0f 90       	pop	r0
    5bb8:	0f be       	out	0x3f, r0	; 63
    5bba:	0f 90       	pop	r0
    5bbc:	1f 90       	pop	r1
    5bbe:	18 95       	reti

00005bc0 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    5bc0:	1f 92       	push	r1
    5bc2:	0f 92       	push	r0
    5bc4:	0f b6       	in	r0, 0x3f	; 63
    5bc6:	0f 92       	push	r0
    5bc8:	11 24       	eor	r1, r1
    5bca:	0b b6       	in	r0, 0x3b	; 59
    5bcc:	0f 92       	push	r0
    5bce:	2f 93       	push	r18
    5bd0:	3f 93       	push	r19
    5bd2:	4f 93       	push	r20
    5bd4:	5f 93       	push	r21
    5bd6:	6f 93       	push	r22
    5bd8:	7f 93       	push	r23
    5bda:	8f 93       	push	r24
    5bdc:	9f 93       	push	r25
    5bde:	af 93       	push	r26
    5be0:	bf 93       	push	r27
    5be2:	ef 93       	push	r30
    5be4:	ff 93       	push	r31
    5be6:	e0 91 b8 23 	lds	r30, 0x23B8	; 0x8023b8 <InterruptFuncTable+0xf2>
    5bea:	f0 91 b9 23 	lds	r31, 0x23B9	; 0x8023b9 <InterruptFuncTable+0xf3>
    5bee:	30 97       	sbiw	r30, 0x00	; 0
    5bf0:	29 f0       	breq	.+10     	; 0x5bfc <__vector_121+0x3c>
    5bf2:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <InterruptSenderTable+0xf2>
    5bf6:	90 91 af 24 	lds	r25, 0x24AF	; 0x8024af <InterruptSenderTable+0xf3>
    5bfa:	19 95       	eicall
    5bfc:	ff 91       	pop	r31
    5bfe:	ef 91       	pop	r30
    5c00:	bf 91       	pop	r27
    5c02:	af 91       	pop	r26
    5c04:	9f 91       	pop	r25
    5c06:	8f 91       	pop	r24
    5c08:	7f 91       	pop	r23
    5c0a:	6f 91       	pop	r22
    5c0c:	5f 91       	pop	r21
    5c0e:	4f 91       	pop	r20
    5c10:	3f 91       	pop	r19
    5c12:	2f 91       	pop	r18
    5c14:	0f 90       	pop	r0
    5c16:	0b be       	out	0x3b, r0	; 59
    5c18:	0f 90       	pop	r0
    5c1a:	0f be       	out	0x3f, r0	; 63
    5c1c:	0f 90       	pop	r0
    5c1e:	1f 90       	pop	r1
    5c20:	18 95       	reti

00005c22 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    5c22:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    5c26:	fd cf       	rjmp	.-6      	; 0x5c22 <__cxa_pure_virtual>

00005c28 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    5c28:	81 e2       	ldi	r24, 0x21	; 33
    5c2a:	96 e2       	ldi	r25, 0x26	; 38
    5c2c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZN4CSPIC1Ev>
CTimerC timer;
    5c30:	8e e1       	ldi	r24, 0x1E	; 30
    5c32:	96 e2       	ldi	r25, 0x26	; 38
    5c34:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    5c38:	8b e1       	ldi	r24, 0x1B	; 27
    5c3a:	96 e2       	ldi	r25, 0x26	; 38
    5c3c:	0e 94 a7 3a 	call	0x754e	; 0x754e <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    5c40:	88 e1       	ldi	r24, 0x18	; 24
    5c42:	96 e2       	ldi	r25, 0x26	; 38
    5c44:	0e 94 88 3b 	call	0x7710	; 0x7710 <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    5c48:	85 e1       	ldi	r24, 0x15	; 21
    5c4a:	96 e2       	ldi	r25, 0x26	; 38
    5c4c:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    5c50:	82 e1       	ldi	r24, 0x12	; 18
    5c52:	96 e2       	ldi	r25, 0x26	; 38
    5c54:	0e 94 fc 39 	call	0x73f8	; 0x73f8 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    5c58:	80 e1       	ldi	r24, 0x10	; 16
    5c5a:	96 e2       	ldi	r25, 0x26	; 38
    5c5c:	0e 94 03 35 	call	0x6a06	; 0x6a06 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    5c60:	88 e0       	ldi	r24, 0x08	; 8
    5c62:	96 e2       	ldi	r25, 0x26	; 38
    5c64:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    5c68:	8b ee       	ldi	r24, 0xEB	; 235
    5c6a:	95 e2       	ldi	r25, 0x25	; 37
    5c6c:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    5c70:	81 ee       	ldi	r24, 0xE1	; 225
    5c72:	95 e2       	ldi	r25, 0x25	; 37
    5c74:	0e 94 34 36 	call	0x6c68	; 0x6c68 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    5c78:	80 ee       	ldi	r24, 0xE0	; 224
    5c7a:	95 e2       	ldi	r25, 0x25	; 37
    5c7c:	0e 94 43 37 	call	0x6e86	; 0x6e86 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    5c80:	8a eb       	ldi	r24, 0xBA	; 186
    5c82:	94 e2       	ldi	r25, 0x24	; 36
    5c84:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    5c88:	86 eb       	ldi	r24, 0xB6	; 182
    5c8a:	94 e2       	ldi	r25, 0x24	; 36
    5c8c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <_ZN8CDS18B20C1Ev>
    5c90:	08 95       	ret

00005c92 <_GLOBAL__sub_D_dacSPI>:
    5c92:	86 eb       	ldi	r24, 0xB6	; 182
    5c94:	94 e2       	ldi	r25, 0x24	; 36
    5c96:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    5c9a:	8a eb       	ldi	r24, 0xBA	; 186
    5c9c:	94 e2       	ldi	r25, 0x24	; 36
    5c9e:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    5ca2:	80 ee       	ldi	r24, 0xE0	; 224
    5ca4:	95 e2       	ldi	r25, 0x25	; 37
    5ca6:	0e 94 44 37 	call	0x6e88	; 0x6e88 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    5caa:	81 ee       	ldi	r24, 0xE1	; 225
    5cac:	95 e2       	ldi	r25, 0x25	; 37
    5cae:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    5cb2:	8b ee       	ldi	r24, 0xEB	; 235
    5cb4:	95 e2       	ldi	r25, 0x25	; 37
    5cb6:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    5cba:	88 e0       	ldi	r24, 0x08	; 8
    5cbc:	96 e2       	ldi	r25, 0x26	; 38
    5cbe:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    5cc2:	80 e1       	ldi	r24, 0x10	; 16
    5cc4:	96 e2       	ldi	r25, 0x26	; 38
    5cc6:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    5cca:	82 e1       	ldi	r24, 0x12	; 18
    5ccc:	96 e2       	ldi	r25, 0x26	; 38
    5cce:	0e 94 08 3a 	call	0x7410	; 0x7410 <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    5cd2:	85 e1       	ldi	r24, 0x15	; 21
    5cd4:	96 e2       	ldi	r25, 0x26	; 38
    5cd6:	0e 94 37 39 	call	0x726e	; 0x726e <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    5cda:	88 e1       	ldi	r24, 0x18	; 24
    5cdc:	96 e2       	ldi	r25, 0x26	; 38
    5cde:	0e 94 94 3b 	call	0x7728	; 0x7728 <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    5ce2:	8b e1       	ldi	r24, 0x1B	; 27
    5ce4:	96 e2       	ldi	r25, 0x26	; 38
    5ce6:	0e 94 b3 3a 	call	0x7566	; 0x7566 <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    5cea:	8e e1       	ldi	r24, 0x1E	; 30
    5cec:	96 e2       	ldi	r25, 0x26	; 38
    5cee:	0e 94 88 38 	call	0x7110	; 0x7110 <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    5cf2:	81 e2       	ldi	r24, 0x21	; 33
    5cf4:	96 e2       	ldi	r25, 0x26	; 38
    5cf6:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_ZN4CSPID1Ev>
    5cfa:	08 95       	ret

00005cfc <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    5cfc:	cf 92       	push	r12
    5cfe:	df 92       	push	r13
    5d00:	ef 92       	push	r14
    5d02:	ff 92       	push	r15
    5d04:	0f 93       	push	r16
    5d06:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    5d08:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    5d0a:	84 e6       	ldi	r24, 0x64	; 100
    5d0c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize modules
	laserBoard.InitializeIO();
    5d10:	81 ee       	ldi	r24, 0xE1	; 225
    5d12:	95 e2       	ldi	r25, 0x25	; 37
    5d14:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    5d18:	86 eb       	ldi	r24, 0xB6	; 182
    5d1a:	94 e2       	ldi	r25, 0x24	; 36
    5d1c:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    5d20:	80 ee       	ldi	r24, 0xE0	; 224
    5d22:	95 e2       	ldi	r25, 0x25	; 37
    5d24:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    5d28:	46 e0       	ldi	r20, 0x06	; 6
    5d2a:	60 e0       	ldi	r22, 0x00	; 0
    5d2c:	8e e1       	ldi	r24, 0x1E	; 30
    5d2e:	96 e2       	ldi	r25, 0x26	; 38
    5d30:	0e 94 bf 37 	call	0x6f7e	; 0x6f7e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    5d34:	68 ea       	ldi	r22, 0xA8	; 168
    5d36:	71 e6       	ldi	r23, 0x61	; 97
    5d38:	8e e1       	ldi	r24, 0x1E	; 30
    5d3a:	96 e2       	ldi	r25, 0x26	; 38
    5d3c:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    5d40:	21 e0       	ldi	r18, 0x01	; 1
    5d42:	4a eb       	ldi	r20, 0xBA	; 186
    5d44:	54 e2       	ldi	r21, 0x24	; 36
    5d46:	67 e2       	ldi	r22, 0x27	; 39
    5d48:	72 e1       	ldi	r23, 0x12	; 18
    5d4a:	8e e1       	ldi	r24, 0x1E	; 30
    5d4c:	96 e2       	ldi	r25, 0x26	; 38
    5d4e:	0e 94 16 38 	call	0x702c	; 0x702c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    5d52:	47 e0       	ldi	r20, 0x07	; 7
    5d54:	60 e0       	ldi	r22, 0x00	; 0
    5d56:	8b e1       	ldi	r24, 0x1B	; 27
    5d58:	96 e2       	ldi	r25, 0x26	; 38
    5d5a:	0e 94 10 3a 	call	0x7420	; 0x7420 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    5d5e:	62 e1       	ldi	r22, 0x12	; 18
    5d60:	7a e7       	ldi	r23, 0x7A	; 122
    5d62:	8b e1       	ldi	r24, 0x1B	; 27
    5d64:	96 e2       	ldi	r25, 0x26	; 38
    5d66:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    5d6a:	48 e0       	ldi	r20, 0x08	; 8
    5d6c:	60 e0       	ldi	r22, 0x00	; 0
    5d6e:	85 e1       	ldi	r24, 0x15	; 21
    5d70:	96 e2       	ldi	r25, 0x26	; 38
    5d72:	0e 94 90 38 	call	0x7120	; 0x7120 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    5d76:	6f ef       	ldi	r22, 0xFF	; 255
    5d78:	7f ef       	ldi	r23, 0xFF	; 255
    5d7a:	85 e1       	ldi	r24, 0x15	; 21
    5d7c:	96 e2       	ldi	r25, 0x26	; 38
    5d7e:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    5d82:	6f ef       	ldi	r22, 0xFF	; 255
    5d84:	7f ef       	ldi	r23, 0xFF	; 255
    5d86:	85 e1       	ldi	r24, 0x15	; 21
    5d88:	96 e2       	ldi	r25, 0x26	; 38
    5d8a:	0e 94 a7 38 	call	0x714e	; 0x714e <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    5d8e:	45 e0       	ldi	r20, 0x05	; 5
    5d90:	63 e0       	ldi	r22, 0x03	; 3
    5d92:	82 e1       	ldi	r24, 0x12	; 18
    5d94:	96 e2       	ldi	r25, 0x26	; 38
    5d96:	0e 94 3f 39 	call	0x727e	; 0x727e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    5d9a:	60 e0       	ldi	r22, 0x00	; 0
    5d9c:	72 e0       	ldi	r23, 0x02	; 2
    5d9e:	82 e1       	ldi	r24, 0x12	; 18
    5da0:	96 e2       	ldi	r25, 0x26	; 38
    5da2:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    5da6:	81 ee       	ldi	r24, 0xE1	; 225
    5da8:	95 e2       	ldi	r25, 0x25	; 37
    5daa:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    5dae:	81 ee       	ldi	r24, 0xE1	; 225
    5db0:	95 e2       	ldi	r25, 0x25	; 37
    5db2:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    5db6:	81 ee       	ldi	r24, 0xE1	; 225
    5db8:	95 e2       	ldi	r25, 0x25	; 37
    5dba:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    5dbe:	81 ee       	ldi	r24, 0xE1	; 225
    5dc0:	95 e2       	ldi	r25, 0x25	; 37
    5dc2:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    5dc6:	21 e0       	ldi	r18, 0x01	; 1
    5dc8:	4a eb       	ldi	r20, 0xBA	; 186
    5dca:	54 e2       	ldi	r21, 0x24	; 36
    5dcc:	64 e0       	ldi	r22, 0x04	; 4
    5dce:	76 e0       	ldi	r23, 0x06	; 6
    5dd0:	82 e1       	ldi	r24, 0x12	; 18
    5dd2:	96 e2       	ldi	r25, 0x26	; 38
    5dd4:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    5dd8:	21 e0       	ldi	r18, 0x01	; 1
    5dda:	4a eb       	ldi	r20, 0xBA	; 186
    5ddc:	54 e2       	ldi	r21, 0x24	; 36
    5dde:	67 e0       	ldi	r22, 0x07	; 7
    5de0:	76 e0       	ldi	r23, 0x06	; 6
    5de2:	82 e1       	ldi	r24, 0x12	; 18
    5de4:	96 e2       	ldi	r25, 0x26	; 38
    5de6:	0e 94 b8 39 	call	0x7370	; 0x7370 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    5dea:	60 e0       	ldi	r22, 0x00	; 0
    5dec:	71 e0       	ldi	r23, 0x01	; 1
    5dee:	82 e1       	ldi	r24, 0x12	; 18
    5df0:	96 e2       	ldi	r25, 0x26	; 38
    5df2:	0e 94 87 39 	call	0x730e	; 0x730e <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    5df6:	60 e0       	ldi	r22, 0x00	; 0
    5df8:	72 e0       	ldi	r23, 0x02	; 2
    5dfa:	82 e1       	ldi	r24, 0x12	; 18
    5dfc:	96 e2       	ldi	r25, 0x26	; 38
    5dfe:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    5e02:	60 e0       	ldi	r22, 0x00	; 0
    5e04:	73 e0       	ldi	r23, 0x03	; 3
    5e06:	82 e1       	ldi	r24, 0x12	; 18
    5e08:	96 e2       	ldi	r25, 0x26	; 38
    5e0a:	0e 94 91 39 	call	0x7322	; 0x7322 <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    5e0e:	2c e0       	ldi	r18, 0x0C	; 12
    5e10:	4a eb       	ldi	r20, 0xBA	; 186
    5e12:	54 e2       	ldi	r21, 0x24	; 36
    5e14:	6a e0       	ldi	r22, 0x0A	; 10
    5e16:	76 e0       	ldi	r23, 0x06	; 6
    5e18:	82 e1       	ldi	r24, 0x12	; 18
    5e1a:	96 e2       	ldi	r25, 0x26	; 38
    5e1c:	0e 94 c9 39 	call	0x7392	; 0x7392 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    5e20:	20 e3       	ldi	r18, 0x30	; 48
    5e22:	4a eb       	ldi	r20, 0xBA	; 186
    5e24:	54 e2       	ldi	r21, 0x24	; 36
    5e26:	6b e0       	ldi	r22, 0x0B	; 11
    5e28:	76 e0       	ldi	r23, 0x06	; 6
    5e2a:	82 e1       	ldi	r24, 0x12	; 18
    5e2c:	96 e2       	ldi	r25, 0x26	; 38
    5e2e:	0e 94 da 39 	call	0x73b4	; 0x73b4 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    5e32:	20 ec       	ldi	r18, 0xC0	; 192
    5e34:	4a eb       	ldi	r20, 0xBA	; 186
    5e36:	54 e2       	ldi	r21, 0x24	; 36
    5e38:	6c e0       	ldi	r22, 0x0C	; 12
    5e3a:	76 e0       	ldi	r23, 0x06	; 6
    5e3c:	82 e1       	ldi	r24, 0x12	; 18
    5e3e:	96 e2       	ldi	r25, 0x26	; 38
    5e40:	0e 94 eb 39 	call	0x73d6	; 0x73d6 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    5e44:	60 e0       	ldi	r22, 0x00	; 0
    5e46:	74 e0       	ldi	r23, 0x04	; 4
    5e48:	82 e1       	ldi	r24, 0x12	; 18
    5e4a:	96 e2       	ldi	r25, 0x26	; 38
    5e4c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    5e50:	0f 2e       	mov	r0, r31
    5e52:	f3 e0       	ldi	r31, 0x03	; 3
    5e54:	ef 2e       	mov	r14, r31
    5e56:	f0 2d       	mov	r31, r0
    5e58:	00 e0       	ldi	r16, 0x00	; 0
    5e5a:	23 e0       	ldi	r18, 0x03	; 3
    5e5c:	40 e0       	ldi	r20, 0x00	; 0
    5e5e:	61 e0       	ldi	r22, 0x01	; 1
    5e60:	81 e2       	ldi	r24, 0x21	; 33
    5e62:	96 e2       	ldi	r25, 0x26	; 38
    5e64:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    5e68:	01 e0       	ldi	r16, 0x01	; 1
    5e6a:	20 e0       	ldi	r18, 0x00	; 0
    5e6c:	40 e0       	ldi	r20, 0x00	; 0
    5e6e:	6d e0       	ldi	r22, 0x0D	; 13
    5e70:	80 e1       	ldi	r24, 0x10	; 16
    5e72:	96 e2       	ldi	r25, 0x26	; 38
    5e74:	0e 94 87 34 	call	0x690e	; 0x690e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    5e78:	0f 2e       	mov	r0, r31
    5e7a:	f2 e1       	ldi	r31, 0x12	; 18
    5e7c:	cf 2e       	mov	r12, r31
    5e7e:	fa e7       	ldi	r31, 0x7A	; 122
    5e80:	df 2e       	mov	r13, r31
    5e82:	f0 2d       	mov	r31, r0
    5e84:	e1 2c       	mov	r14, r1
    5e86:	ff 24       	eor	r15, r15
    5e88:	f3 94       	inc	r15
    5e8a:	00 e0       	ldi	r16, 0x00	; 0
    5e8c:	11 e0       	ldi	r17, 0x01	; 1
    5e8e:	2a eb       	ldi	r18, 0xBA	; 186
    5e90:	34 e2       	ldi	r19, 0x24	; 36
    5e92:	40 e1       	ldi	r20, 0x10	; 16
    5e94:	56 e2       	ldi	r21, 0x26	; 38
    5e96:	6b e1       	ldi	r22, 0x1B	; 27
    5e98:	76 e2       	ldi	r23, 0x26	; 38
    5e9a:	8b ee       	ldi	r24, 0xEB	; 235
    5e9c:	95 e2       	ldi	r25, 0x25	; 37
    5e9e:	0e 94 02 32 	call	0x6404	; 0x6404 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    5ea2:	40 e0       	ldi	r20, 0x00	; 0
    5ea4:	51 e0       	ldi	r21, 0x01	; 1
    5ea6:	6b ee       	ldi	r22, 0xEB	; 235
    5ea8:	75 e2       	ldi	r23, 0x25	; 37
    5eaa:	88 e0       	ldi	r24, 0x08	; 8
    5eac:	96 e2       	ldi	r25, 0x26	; 38
    5eae:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    5eb2:	6b ee       	ldi	r22, 0xEB	; 235
    5eb4:	75 e2       	ldi	r23, 0x25	; 37
    5eb6:	8a eb       	ldi	r24, 0xBA	; 186
    5eb8:	94 e2       	ldi	r25, 0x24	; 36
    5eba:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    5ebe:	81 ee       	ldi	r24, 0xE1	; 225
    5ec0:	95 e2       	ldi	r25, 0x25	; 37
    5ec2:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    5ec6:	8a eb       	ldi	r24, 0xBA	; 186
    5ec8:	94 e2       	ldi	r25, 0x24	; 36
    5eca:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <InterruptSenderTable+0x4>
    5ece:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <InterruptSenderTable+0x5>
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    5ed2:	87 eb       	ldi	r24, 0xB7	; 183
    5ed4:	99 e1       	ldi	r25, 0x19	; 25
    5ed6:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <InterruptFuncTable+0x4>
    5eda:	90 93 cb 22 	sts	0x22CB, r25	; 0x8022cb <InterruptFuncTable+0x5>
	
	sei();	/* Enable global interrupts */
    5ede:	78 94       	sei
}
    5ee0:	1f 91       	pop	r17
    5ee2:	0f 91       	pop	r16
    5ee4:	ff 90       	pop	r15
    5ee6:	ef 90       	pop	r14
    5ee8:	df 90       	pop	r13
    5eea:	cf 90       	pop	r12
    5eec:	08 95       	ret

00005eee <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    5eee:	cf 93       	push	r28
    5ef0:	df 93       	push	r29
    5ef2:	1f 92       	push	r1
    5ef4:	1f 92       	push	r1
    5ef6:	cd b7       	in	r28, 0x3d	; 61
    5ef8:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    5efa:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <_Z16SystemInitializev>
    5efe:	2a ea       	ldi	r18, 0xAA	; 170
    5f00:	36 ee       	ldi	r19, 0xE6	; 230
    5f02:	86 e9       	ldi	r24, 0x96	; 150
    5f04:	91 e0       	ldi	r25, 0x01	; 1
    5f06:	21 50       	subi	r18, 0x01	; 1
    5f08:	30 40       	sbci	r19, 0x00	; 0
    5f0a:	80 40       	sbci	r24, 0x00	; 0
    5f0c:	90 40       	sbci	r25, 0x00	; 0
    5f0e:	d9 f7       	brne	.-10     	; 0x5f06 <main+0x18>
    5f10:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    5f12:	81 ee       	ldi	r24, 0xE1	; 225
    5f14:	95 e2       	ldi	r25, 0x25	; 37
    5f16:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <_ZN11CLaserBoard8Relay1OnEv>
    5f1a:	2f ef       	ldi	r18, 0xFF	; 255
    5f1c:	33 ec       	ldi	r19, 0xC3	; 195
    5f1e:	89 e0       	ldi	r24, 0x09	; 9
    5f20:	21 50       	subi	r18, 0x01	; 1
    5f22:	30 40       	sbci	r19, 0x00	; 0
    5f24:	80 40       	sbci	r24, 0x00	; 0
    5f26:	e1 f7       	brne	.-8      	; 0x5f20 <main+0x32>
    5f28:	00 c0       	rjmp	.+0      	; 0x5f2a <main+0x3c>
    5f2a:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    5f2c:	19 82       	std	Y+1, r1	; 0x01
    5f2e:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    5f30:	42 e0       	ldi	r20, 0x02	; 2
    5f32:	50 e0       	ldi	r21, 0x00	; 0
    5f34:	be 01       	movw	r22, r28
    5f36:	6f 5f       	subi	r22, 0xFF	; 255
    5f38:	7f 4f       	sbci	r23, 0xFF	; 255
    5f3a:	81 e2       	ldi	r24, 0x21	; 33
    5f3c:	96 e2       	ldi	r25, 0x26	; 38
    5f3e:	0e 94 3b 1a 	call	0x3476	; 0x3476 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    5f42:	8a eb       	ldi	r24, 0xBA	; 186
    5f44:	94 e2       	ldi	r25, 0x24	; 36
    5f46:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    5f4a:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    5f4c:	81 ee       	ldi	r24, 0xE1	; 225
    5f4e:	95 e2       	ldi	r25, 0x25	; 37
    5f50:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    5f54:	8a eb       	ldi	r24, 0xBA	; 186
    5f56:	94 e2       	ldi	r25, 0x24	; 36
    5f58:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    5f5c:	40 91 b2 24 	lds	r20, 0x24B2	; 0x8024b2 <_ZZ4mainE3prs>
    5f60:	50 91 b3 24 	lds	r21, 0x24B3	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    5f64:	ca 01       	movw	r24, r20
    5f66:	01 96       	adiw	r24, 0x01	; 1
    5f68:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <_ZZ4mainE3prs>
    5f6c:	90 93 b3 24 	sts	0x24B3, r25	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    5f70:	9a 01       	movw	r18, r20
    5f72:	a9 e8       	ldi	r26, 0x89	; 137
    5f74:	b8 e8       	ldi	r27, 0x88	; 136
    5f76:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    5f7a:	96 95       	lsr	r25
    5f7c:	87 95       	ror	r24
    5f7e:	96 95       	lsr	r25
    5f80:	87 95       	ror	r24
    5f82:	96 95       	lsr	r25
    5f84:	87 95       	ror	r24
    5f86:	18 9f       	mul	r17, r24
    5f88:	90 01       	movw	r18, r0
    5f8a:	19 9f       	mul	r17, r25
    5f8c:	30 0d       	add	r19, r0
    5f8e:	11 24       	eor	r1, r1
    5f90:	42 17       	cp	r20, r18
    5f92:	53 07       	cpc	r21, r19
    5f94:	41 f4       	brne	.+16     	; 0x5fa6 <main+0xb8>
				temperature = D18B20.temp_18b20();
    5f96:	86 eb       	ldi	r24, 0xB6	; 182
    5f98:	94 e2       	ldi	r25, 0x24	; 36
    5f9a:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <_ZN8CDS18B2010temp_18b20Ev>
    5f9e:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <temperature>
    5fa2:	90 93 b5 24 	sts	0x24B5, r25	; 0x8024b5 <temperature+0x1>
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    5fa6:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    5faa:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    5fae:	8a 30       	cpi	r24, 0x0A	; 10
    5fb0:	91 40       	sbci	r25, 0x01	; 1
    5fb2:	24 f0       	brlt	.+8      	; 0x5fbc <main+0xce>
				laserBoard.Relay2On();
    5fb4:	81 ee       	ldi	r24, 0xE1	; 225
    5fb6:	95 e2       	ldi	r25, 0x25	; 37
    5fb8:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    5fbc:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    5fc0:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    5fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    5fc6:	91 05       	cpc	r25, r1
    5fc8:	0c f6       	brge	.-126    	; 0x5f4c <main+0x5e>
				laserBoard.Relay2Off();			
    5fca:	81 ee       	ldi	r24, 0xE1	; 225
    5fcc:	95 e2       	ldi	r25, 0x25	; 37
    5fce:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <_ZN11CLaserBoard9Relay2OffEv>
    5fd2:	bc cf       	rjmp	.-136    	; 0x5f4c <main+0x5e>

00005fd4 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	index = crch ^ data;	
	crch  = crcl ^ CRCTABH[index];
	crcl  = CRCTABL[index];

	return (crch << 8) | crcl;
}
    5fd4:	ef 92       	push	r14
    5fd6:	ff 92       	push	r15
    5fd8:	0f 93       	push	r16
    5fda:	1f 93       	push	r17
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	8c 01       	movw	r16, r24
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	14 96       	adiw	r26, 0x04	; 4
    5fe6:	ed 91       	ld	r30, X+
    5fe8:	fc 91       	ld	r31, X
    5fea:	15 97       	sbiw	r26, 0x05	; 5
    5fec:	8a ea       	ldi	r24, 0xAA	; 170
    5fee:	80 83       	st	Z, r24
    5ff0:	14 96       	adiw	r26, 0x04	; 4
    5ff2:	ed 91       	ld	r30, X+
    5ff4:	fc 91       	ld	r31, X
    5ff6:	15 97       	sbiw	r26, 0x05	; 5
    5ff8:	8c ec       	ldi	r24, 0xCC	; 204
    5ffa:	81 83       	std	Z+1, r24	; 0x01
    5ffc:	14 96       	adiw	r26, 0x04	; 4
    5ffe:	ed 91       	ld	r30, X+
    6000:	fc 91       	ld	r31, X
    6002:	15 97       	sbiw	r26, 0x05	; 5
    6004:	85 e0       	ldi	r24, 0x05	; 5
    6006:	82 0f       	add	r24, r18
    6008:	82 83       	std	Z+2, r24	; 0x02
    600a:	14 96       	adiw	r26, 0x04	; 4
    600c:	ed 91       	ld	r30, X+
    600e:	fc 91       	ld	r31, X
    6010:	15 97       	sbiw	r26, 0x05	; 5
    6012:	82 e8       	ldi	r24, 0x82	; 130
    6014:	83 83       	std	Z+3, r24	; 0x03
    6016:	14 96       	adiw	r26, 0x04	; 4
    6018:	ed 91       	ld	r30, X+
    601a:	fc 91       	ld	r31, X
    601c:	15 97       	sbiw	r26, 0x05	; 5
    601e:	74 83       	std	Z+4, r23	; 0x04
    6020:	14 96       	adiw	r26, 0x04	; 4
    6022:	ed 91       	ld	r30, X+
    6024:	fc 91       	ld	r31, X
    6026:	15 97       	sbiw	r26, 0x05	; 5
    6028:	65 83       	std	Z+5, r22	; 0x05
    602a:	86 e0       	ldi	r24, 0x06	; 6
    602c:	82 0f       	add	r24, r18
    602e:	19 96       	adiw	r26, 0x09	; 9
    6030:	8c 93       	st	X, r24
    6032:	c9 01       	movw	r24, r18
    6034:	96 95       	lsr	r25
    6036:	87 95       	ror	r24
    6038:	00 97       	sbiw	r24, 0x00	; 0
    603a:	d9 f0       	breq	.+54     	; 0x6072 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x9e>
    603c:	e4 2f       	mov	r30, r20
    603e:	f5 2f       	mov	r31, r21
    6040:	03 96       	adiw	r24, 0x03	; 3
    6042:	88 0f       	add	r24, r24
    6044:	99 1f       	adc	r25, r25
    6046:	46 e0       	ldi	r20, 0x06	; 6
    6048:	50 e0       	ldi	r21, 0x00	; 0
    604a:	e8 01       	movw	r28, r16
    604c:	ac 81       	ldd	r26, Y+4	; 0x04
    604e:	bd 81       	ldd	r27, Y+5	; 0x05
    6050:	a4 0f       	add	r26, r20
    6052:	b5 1f       	adc	r27, r21
    6054:	61 81       	ldd	r22, Z+1	; 0x01
    6056:	6c 93       	st	X, r22
    6058:	ac 81       	ldd	r26, Y+4	; 0x04
    605a:	bd 81       	ldd	r27, Y+5	; 0x05
    605c:	a4 0f       	add	r26, r20
    605e:	b5 1f       	adc	r27, r21
    6060:	60 81       	ld	r22, Z
    6062:	32 96       	adiw	r30, 0x02	; 2
    6064:	11 96       	adiw	r26, 0x01	; 1
    6066:	6c 93       	st	X, r22
    6068:	4e 5f       	subi	r20, 0xFE	; 254
    606a:	5f 4f       	sbci	r21, 0xFF	; 255
    606c:	48 17       	cp	r20, r24
    606e:	59 07       	cpc	r21, r25
    6070:	61 f7       	brne	.-40     	; 0x604a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x76>
    6072:	f8 01       	movw	r30, r16
    6074:	81 85       	ldd	r24, Z+9	; 0x09
    6076:	a8 2f       	mov	r26, r24
    6078:	b0 e0       	ldi	r27, 0x00	; 0
    607a:	a4 30       	cpi	r26, 0x04	; 4
    607c:	b1 05       	cpc	r27, r1
    607e:	34 f1       	brlt	.+76     	; 0x60cc <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xf8>
    6080:	04 80       	ldd	r0, Z+4	; 0x04
    6082:	f5 81       	ldd	r31, Z+5	; 0x05
    6084:	e0 2d       	mov	r30, r0
    6086:	33 96       	adiw	r30, 0x03	; 3
    6088:	63 e0       	ldi	r22, 0x03	; 3
    608a:	70 e0       	ldi	r23, 0x00	; 0
    608c:	4f ef       	ldi	r20, 0xFF	; 255
    608e:	5f ef       	ldi	r21, 0xFF	; 255
    6090:	91 91       	ld	r25, Z+
    6092:	49 27       	eor	r20, r25
    6094:	94 2f       	mov	r25, r20
    6096:	92 95       	swap	r25
    6098:	94 27       	eor	r25, r20
    609a:	09 2e       	mov	r0, r25
    609c:	96 95       	lsr	r25
    609e:	96 95       	lsr	r25
    60a0:	90 25       	eor	r25, r0
    60a2:	09 2e       	mov	r0, r25
    60a4:	96 95       	lsr	r25
    60a6:	90 25       	eor	r25, r0
    60a8:	97 70       	andi	r25, 0x07	; 7
    60aa:	04 2e       	mov	r0, r20
    60ac:	45 2f       	mov	r20, r21
    60ae:	96 95       	lsr	r25
    60b0:	07 94       	ror	r0
    60b2:	97 95       	ror	r25
    60b4:	50 2d       	mov	r21, r0
    60b6:	49 27       	eor	r20, r25
    60b8:	06 94       	lsr	r0
    60ba:	97 95       	ror	r25
    60bc:	50 25       	eor	r21, r0
    60be:	49 27       	eor	r20, r25
    60c0:	6f 5f       	subi	r22, 0xFF	; 255
    60c2:	7f 4f       	sbci	r23, 0xFF	; 255
    60c4:	6a 17       	cp	r22, r26
    60c6:	7b 07       	cpc	r23, r27
    60c8:	1c f3       	brlt	.-58     	; 0x6090 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xbc>
    60ca:	02 c0       	rjmp	.+4      	; 0x60d0 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xfc>
    60cc:	4f ef       	ldi	r20, 0xFF	; 255
    60ce:	5f ef       	ldi	r21, 0xFF	; 255
    60d0:	d8 01       	movw	r26, r16
    60d2:	14 96       	adiw	r26, 0x04	; 4
    60d4:	ed 91       	ld	r30, X+
    60d6:	fc 91       	ld	r31, X
    60d8:	15 97       	sbiw	r26, 0x05	; 5
    60da:	e8 0f       	add	r30, r24
    60dc:	f1 1d       	adc	r31, r1
    60de:	51 83       	std	Z+1, r21	; 0x01
    60e0:	19 96       	adiw	r26, 0x09	; 9
    60e2:	8c 91       	ld	r24, X
    60e4:	19 97       	sbiw	r26, 0x09	; 9
    60e6:	14 96       	adiw	r26, 0x04	; 4
    60e8:	ed 91       	ld	r30, X+
    60ea:	fc 91       	ld	r31, X
    60ec:	15 97       	sbiw	r26, 0x05	; 5
    60ee:	e8 0f       	add	r30, r24
    60f0:	f1 1d       	adc	r31, r1
    60f2:	40 83       	st	Z, r20
    60f4:	28 5f       	subi	r18, 0xF8	; 248
    60f6:	19 96       	adiw	r26, 0x09	; 9
    60f8:	2c 93       	st	X, r18
    60fa:	df 91       	pop	r29
    60fc:	cf 91       	pop	r28
    60fe:	1f 91       	pop	r17
    6100:	0f 91       	pop	r16
    6102:	ff 90       	pop	r15
    6104:	ef 90       	pop	r14
    6106:	08 95       	ret

00006108 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
    6108:	0f 93       	push	r16
    610a:	1f 93       	push	r17
    610c:	cf 93       	push	r28
    610e:	df 93       	push	r29
    6110:	ec 01       	movw	r28, r24
    6112:	cb 01       	movw	r24, r22
    6114:	8a 01       	movw	r16, r20
    6116:	6f 83       	std	Y+7, r22	; 0x07
    6118:	78 87       	std	Y+8, r23	; 0x08
    611a:	4a 87       	std	Y+10, r20	; 0x0a
    611c:	5b 87       	std	Y+11, r21	; 0x0b
    611e:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <malloc>
    6122:	8a 83       	std	Y+2, r24	; 0x02
    6124:	9b 83       	std	Y+3, r25	; 0x03
    6126:	c8 01       	movw	r24, r16
    6128:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <malloc>
    612c:	8c 83       	std	Y+4, r24	; 0x04
    612e:	9d 83       	std	Y+5, r25	; 0x05
    6130:	19 86       	std	Y+9, r1	; 0x09
    6132:	1e 82       	std	Y+6, r1	; 0x06
    6134:	df 91       	pop	r29
    6136:	cf 91       	pop	r28
    6138:	1f 91       	pop	r17
    613a:	0f 91       	pop	r16
    613c:	08 95       	ret

0000613e <_ZN16CMBEventsHandler11FreeBuffersEv>:
    613e:	cf 93       	push	r28
    6140:	df 93       	push	r29
    6142:	ec 01       	movw	r28, r24
    6144:	8a 81       	ldd	r24, Y+2	; 0x02
    6146:	9b 81       	ldd	r25, Y+3	; 0x03
    6148:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <free>
    614c:	8c 81       	ldd	r24, Y+4	; 0x04
    614e:	9d 81       	ldd	r25, Y+5	; 0x05
    6150:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <free>
    6154:	df 91       	pop	r29
    6156:	cf 91       	pop	r28
    6158:	08 95       	ret

0000615a <_ZN16CMBEventsHandler13FillRegDataRqEhh>:
    615a:	cf 93       	push	r28
    615c:	df 93       	push	r29
    615e:	dc 01       	movw	r26, r24
    6160:	14 96       	adiw	r26, 0x04	; 4
    6162:	ed 91       	ld	r30, X+
    6164:	fc 91       	ld	r31, X
    6166:	15 97       	sbiw	r26, 0x05	; 5
    6168:	8a ea       	ldi	r24, 0xAA	; 170
    616a:	80 83       	st	Z, r24
    616c:	14 96       	adiw	r26, 0x04	; 4
    616e:	ed 91       	ld	r30, X+
    6170:	fc 91       	ld	r31, X
    6172:	15 97       	sbiw	r26, 0x05	; 5
    6174:	8c ec       	ldi	r24, 0xCC	; 204
    6176:	81 83       	std	Z+1, r24	; 0x01
    6178:	14 96       	adiw	r26, 0x04	; 4
    617a:	ed 91       	ld	r30, X+
    617c:	fc 91       	ld	r31, X
    617e:	15 97       	sbiw	r26, 0x05	; 5
    6180:	85 e0       	ldi	r24, 0x05	; 5
    6182:	82 83       	std	Z+2, r24	; 0x02
    6184:	14 96       	adiw	r26, 0x04	; 4
    6186:	ed 91       	ld	r30, X+
    6188:	fc 91       	ld	r31, X
    618a:	15 97       	sbiw	r26, 0x05	; 5
    618c:	81 e8       	ldi	r24, 0x81	; 129
    618e:	83 83       	std	Z+3, r24	; 0x03
    6190:	14 96       	adiw	r26, 0x04	; 4
    6192:	ed 91       	ld	r30, X+
    6194:	fc 91       	ld	r31, X
    6196:	15 97       	sbiw	r26, 0x05	; 5
    6198:	64 83       	std	Z+4, r22	; 0x04
    619a:	14 96       	adiw	r26, 0x04	; 4
    619c:	ed 91       	ld	r30, X+
    619e:	fc 91       	ld	r31, X
    61a0:	15 97       	sbiw	r26, 0x05	; 5
    61a2:	45 83       	std	Z+5, r20	; 0x05
    61a4:	86 e0       	ldi	r24, 0x06	; 6
    61a6:	19 96       	adiw	r26, 0x09	; 9
    61a8:	8c 93       	st	X, r24
    61aa:	19 97       	sbiw	r26, 0x09	; 9
    61ac:	14 96       	adiw	r26, 0x04	; 4
    61ae:	cd 91       	ld	r28, X+
    61b0:	dc 91       	ld	r29, X
    61b2:	15 97       	sbiw	r26, 0x05	; 5
    61b4:	fe 01       	movw	r30, r28
    61b6:	33 96       	adiw	r30, 0x03	; 3
    61b8:	be 01       	movw	r22, r28
    61ba:	6a 5f       	subi	r22, 0xFA	; 250
    61bc:	7f 4f       	sbci	r23, 0xFF	; 255
    61be:	2f ef       	ldi	r18, 0xFF	; 255
    61c0:	3f ef       	ldi	r19, 0xFF	; 255
    61c2:	91 91       	ld	r25, Z+
    61c4:	29 27       	eor	r18, r25
    61c6:	92 2f       	mov	r25, r18
    61c8:	92 95       	swap	r25
    61ca:	92 27       	eor	r25, r18
    61cc:	09 2e       	mov	r0, r25
    61ce:	96 95       	lsr	r25
    61d0:	96 95       	lsr	r25
    61d2:	90 25       	eor	r25, r0
    61d4:	09 2e       	mov	r0, r25
    61d6:	96 95       	lsr	r25
    61d8:	90 25       	eor	r25, r0
    61da:	97 70       	andi	r25, 0x07	; 7
    61dc:	02 2e       	mov	r0, r18
    61de:	23 2f       	mov	r18, r19
    61e0:	96 95       	lsr	r25
    61e2:	07 94       	ror	r0
    61e4:	97 95       	ror	r25
    61e6:	30 2d       	mov	r19, r0
    61e8:	29 27       	eor	r18, r25
    61ea:	06 94       	lsr	r0
    61ec:	97 95       	ror	r25
    61ee:	30 25       	eor	r19, r0
    61f0:	29 27       	eor	r18, r25
    61f2:	e6 17       	cp	r30, r22
    61f4:	f7 07       	cpc	r31, r23
    61f6:	29 f7       	brne	.-54     	; 0x61c2 <_ZN16CMBEventsHandler13FillRegDataRqEhh+0x68>
    61f8:	3f 83       	std	Y+7, r19	; 0x07
    61fa:	19 96       	adiw	r26, 0x09	; 9
    61fc:	8c 91       	ld	r24, X
    61fe:	19 97       	sbiw	r26, 0x09	; 9
    6200:	14 96       	adiw	r26, 0x04	; 4
    6202:	ed 91       	ld	r30, X+
    6204:	fc 91       	ld	r31, X
    6206:	15 97       	sbiw	r26, 0x05	; 5
    6208:	e8 0f       	add	r30, r24
    620a:	f1 1d       	adc	r31, r1
    620c:	20 83       	st	Z, r18
    620e:	48 5f       	subi	r20, 0xF8	; 248
    6210:	19 96       	adiw	r26, 0x09	; 9
    6212:	4c 93       	st	X, r20
    6214:	df 91       	pop	r29
    6216:	cf 91       	pop	r28
    6218:	08 95       	ret

0000621a <_ZN16CMBEventsHandler13FillVarDataRqEjj>:
    621a:	cf 93       	push	r28
    621c:	df 93       	push	r29
    621e:	dc 01       	movw	r26, r24
    6220:	14 96       	adiw	r26, 0x04	; 4
    6222:	ed 91       	ld	r30, X+
    6224:	fc 91       	ld	r31, X
    6226:	15 97       	sbiw	r26, 0x05	; 5
    6228:	8a ea       	ldi	r24, 0xAA	; 170
    622a:	80 83       	st	Z, r24
    622c:	14 96       	adiw	r26, 0x04	; 4
    622e:	ed 91       	ld	r30, X+
    6230:	fc 91       	ld	r31, X
    6232:	15 97       	sbiw	r26, 0x05	; 5
    6234:	8c ec       	ldi	r24, 0xCC	; 204
    6236:	81 83       	std	Z+1, r24	; 0x01
    6238:	14 96       	adiw	r26, 0x04	; 4
    623a:	ed 91       	ld	r30, X+
    623c:	fc 91       	ld	r31, X
    623e:	15 97       	sbiw	r26, 0x05	; 5
    6240:	86 e0       	ldi	r24, 0x06	; 6
    6242:	82 83       	std	Z+2, r24	; 0x02
    6244:	14 96       	adiw	r26, 0x04	; 4
    6246:	ed 91       	ld	r30, X+
    6248:	fc 91       	ld	r31, X
    624a:	15 97       	sbiw	r26, 0x05	; 5
    624c:	83 e8       	ldi	r24, 0x83	; 131
    624e:	83 83       	std	Z+3, r24	; 0x03
    6250:	14 96       	adiw	r26, 0x04	; 4
    6252:	ed 91       	ld	r30, X+
    6254:	fc 91       	ld	r31, X
    6256:	15 97       	sbiw	r26, 0x05	; 5
    6258:	74 83       	std	Z+4, r23	; 0x04
    625a:	14 96       	adiw	r26, 0x04	; 4
    625c:	ed 91       	ld	r30, X+
    625e:	fc 91       	ld	r31, X
    6260:	15 97       	sbiw	r26, 0x05	; 5
    6262:	65 83       	std	Z+5, r22	; 0x05
    6264:	14 96       	adiw	r26, 0x04	; 4
    6266:	ed 91       	ld	r30, X+
    6268:	fc 91       	ld	r31, X
    626a:	15 97       	sbiw	r26, 0x05	; 5
    626c:	46 83       	std	Z+6, r20	; 0x06
    626e:	87 e0       	ldi	r24, 0x07	; 7
    6270:	19 96       	adiw	r26, 0x09	; 9
    6272:	8c 93       	st	X, r24
    6274:	19 97       	sbiw	r26, 0x09	; 9
    6276:	14 96       	adiw	r26, 0x04	; 4
    6278:	cd 91       	ld	r28, X+
    627a:	dc 91       	ld	r29, X
    627c:	15 97       	sbiw	r26, 0x05	; 5
    627e:	fe 01       	movw	r30, r28
    6280:	33 96       	adiw	r30, 0x03	; 3
    6282:	ae 01       	movw	r20, r28
    6284:	49 5f       	subi	r20, 0xF9	; 249
    6286:	5f 4f       	sbci	r21, 0xFF	; 255
    6288:	2f ef       	ldi	r18, 0xFF	; 255
    628a:	3f ef       	ldi	r19, 0xFF	; 255
    628c:	91 91       	ld	r25, Z+
    628e:	29 27       	eor	r18, r25
    6290:	92 2f       	mov	r25, r18
    6292:	92 95       	swap	r25
    6294:	92 27       	eor	r25, r18
    6296:	09 2e       	mov	r0, r25
    6298:	96 95       	lsr	r25
    629a:	96 95       	lsr	r25
    629c:	90 25       	eor	r25, r0
    629e:	09 2e       	mov	r0, r25
    62a0:	96 95       	lsr	r25
    62a2:	90 25       	eor	r25, r0
    62a4:	97 70       	andi	r25, 0x07	; 7
    62a6:	02 2e       	mov	r0, r18
    62a8:	23 2f       	mov	r18, r19
    62aa:	96 95       	lsr	r25
    62ac:	07 94       	ror	r0
    62ae:	97 95       	ror	r25
    62b0:	30 2d       	mov	r19, r0
    62b2:	29 27       	eor	r18, r25
    62b4:	06 94       	lsr	r0
    62b6:	97 95       	ror	r25
    62b8:	30 25       	eor	r19, r0
    62ba:	29 27       	eor	r18, r25
    62bc:	e4 17       	cp	r30, r20
    62be:	f5 07       	cpc	r31, r21
    62c0:	29 f7       	brne	.-54     	; 0x628c <_ZN16CMBEventsHandler13FillVarDataRqEjj+0x72>
    62c2:	38 87       	std	Y+8, r19	; 0x08
    62c4:	19 96       	adiw	r26, 0x09	; 9
    62c6:	8c 91       	ld	r24, X
    62c8:	19 97       	sbiw	r26, 0x09	; 9
    62ca:	14 96       	adiw	r26, 0x04	; 4
    62cc:	ed 91       	ld	r30, X+
    62ce:	fc 91       	ld	r31, X
    62d0:	15 97       	sbiw	r26, 0x05	; 5
    62d2:	e8 0f       	add	r30, r24
    62d4:	f1 1d       	adc	r31, r1
    62d6:	20 83       	st	Z, r18
    62d8:	89 e0       	ldi	r24, 0x09	; 9
    62da:	19 96       	adiw	r26, 0x09	; 9
    62dc:	8c 93       	st	X, r24
    62de:	df 91       	pop	r29
    62e0:	cf 91       	pop	r28
    62e2:	08 95       	ret

000062e4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
    62e4:	cf 93       	push	r28
    62e6:	df 93       	push	r29
    62e8:	ec 01       	movw	r28, r24
    62ea:	ec 81       	ldd	r30, Y+4	; 0x04
    62ec:	fd 81       	ldd	r31, Y+5	; 0x05
    62ee:	8a ea       	ldi	r24, 0xAA	; 170
    62f0:	80 83       	st	Z, r24
    62f2:	ec 81       	ldd	r30, Y+4	; 0x04
    62f4:	fd 81       	ldd	r31, Y+5	; 0x05
    62f6:	8c ec       	ldi	r24, 0xCC	; 204
    62f8:	81 83       	std	Z+1, r24	; 0x01
    62fa:	ec 81       	ldd	r30, Y+4	; 0x04
    62fc:	fd 81       	ldd	r31, Y+5	; 0x05
    62fe:	84 e0       	ldi	r24, 0x04	; 4
    6300:	82 0f       	add	r24, r18
    6302:	82 83       	std	Z+2, r24	; 0x02
    6304:	ec 81       	ldd	r30, Y+4	; 0x04
    6306:	fd 81       	ldd	r31, Y+5	; 0x05
    6308:	80 e8       	ldi	r24, 0x80	; 128
    630a:	83 83       	std	Z+3, r24	; 0x03
    630c:	ec 81       	ldd	r30, Y+4	; 0x04
    630e:	fd 81       	ldd	r31, Y+5	; 0x05
    6310:	64 83       	std	Z+4, r22	; 0x04
    6312:	85 e0       	ldi	r24, 0x05	; 5
    6314:	82 0f       	add	r24, r18
    6316:	89 87       	std	Y+9, r24	; 0x09
    6318:	82 2f       	mov	r24, r18
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	00 97       	sbiw	r24, 0x00	; 0
    631e:	81 f0       	breq	.+32     	; 0x6340 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    6320:	da 01       	movw	r26, r20
    6322:	48 0f       	add	r20, r24
    6324:	59 1f       	adc	r21, r25
    6326:	65 e0       	ldi	r22, 0x05	; 5
    6328:	70 e0       	ldi	r23, 0x00	; 0
    632a:	8d 91       	ld	r24, X+
    632c:	ec 81       	ldd	r30, Y+4	; 0x04
    632e:	fd 81       	ldd	r31, Y+5	; 0x05
    6330:	e6 0f       	add	r30, r22
    6332:	f7 1f       	adc	r31, r23
    6334:	80 83       	st	Z, r24
    6336:	6f 5f       	subi	r22, 0xFF	; 255
    6338:	7f 4f       	sbci	r23, 0xFF	; 255
    633a:	a4 17       	cp	r26, r20
    633c:	b5 07       	cpc	r27, r21
    633e:	a9 f7       	brne	.-22     	; 0x632a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
    6340:	a9 85       	ldd	r26, Y+9	; 0x09
    6342:	b0 e0       	ldi	r27, 0x00	; 0
    6344:	a4 30       	cpi	r26, 0x04	; 4
    6346:	b1 05       	cpc	r27, r1
    6348:	28 f1       	brcs	.+74     	; 0x6394 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb0>
    634a:	ec 81       	ldd	r30, Y+4	; 0x04
    634c:	fd 81       	ldd	r31, Y+5	; 0x05
    634e:	33 96       	adiw	r30, 0x03	; 3
    6350:	63 e0       	ldi	r22, 0x03	; 3
    6352:	70 e0       	ldi	r23, 0x00	; 0
    6354:	4f ef       	ldi	r20, 0xFF	; 255
    6356:	5f ef       	ldi	r21, 0xFF	; 255
    6358:	91 91       	ld	r25, Z+
    635a:	49 27       	eor	r20, r25
    635c:	94 2f       	mov	r25, r20
    635e:	92 95       	swap	r25
    6360:	94 27       	eor	r25, r20
    6362:	09 2e       	mov	r0, r25
    6364:	96 95       	lsr	r25
    6366:	96 95       	lsr	r25
    6368:	90 25       	eor	r25, r0
    636a:	09 2e       	mov	r0, r25
    636c:	96 95       	lsr	r25
    636e:	90 25       	eor	r25, r0
    6370:	97 70       	andi	r25, 0x07	; 7
    6372:	04 2e       	mov	r0, r20
    6374:	45 2f       	mov	r20, r21
    6376:	96 95       	lsr	r25
    6378:	07 94       	ror	r0
    637a:	97 95       	ror	r25
    637c:	50 2d       	mov	r21, r0
    637e:	49 27       	eor	r20, r25
    6380:	06 94       	lsr	r0
    6382:	97 95       	ror	r25
    6384:	50 25       	eor	r21, r0
    6386:	49 27       	eor	r20, r25
    6388:	6f 5f       	subi	r22, 0xFF	; 255
    638a:	7f 4f       	sbci	r23, 0xFF	; 255
    638c:	6a 17       	cp	r22, r26
    638e:	7b 07       	cpc	r23, r27
    6390:	18 f3       	brcs	.-58     	; 0x6358 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x74>
    6392:	02 c0       	rjmp	.+4      	; 0x6398 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb4>
    6394:	4f ef       	ldi	r20, 0xFF	; 255
    6396:	5f ef       	ldi	r21, 0xFF	; 255
    6398:	8c 81       	ldd	r24, Y+4	; 0x04
    639a:	9d 81       	ldd	r25, Y+5	; 0x05
    639c:	a8 0f       	add	r26, r24
    639e:	b9 1f       	adc	r27, r25
    63a0:	11 96       	adiw	r26, 0x01	; 1
    63a2:	5c 93       	st	X, r21
    63a4:	89 85       	ldd	r24, Y+9	; 0x09
    63a6:	ec 81       	ldd	r30, Y+4	; 0x04
    63a8:	fd 81       	ldd	r31, Y+5	; 0x05
    63aa:	e8 0f       	add	r30, r24
    63ac:	f1 1d       	adc	r31, r1
    63ae:	40 83       	st	Z, r20
    63b0:	29 5f       	subi	r18, 0xF9	; 249
    63b2:	29 87       	std	Y+9, r18	; 0x09
    63b4:	df 91       	pop	r29
    63b6:	cf 91       	pop	r28
    63b8:	08 95       	ret

000063ba <_ZN16CMBEventsHandlerD1Ev>:

CMBEventsHandler::~CMBEventsHandler()
    63ba:	08 95       	ret

000063bc <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    63bc:	dc 01       	movw	r26, r24
    63be:	5b 96       	adiw	r26, 0x1b	; 27
    63c0:	8d 91       	ld	r24, X+
    63c2:	9c 91       	ld	r25, X
    63c4:	5c 97       	sbiw	r26, 0x1c	; 28
    63c6:	00 97       	sbiw	r24, 0x00	; 0
    63c8:	39 f0       	breq	.+14     	; 0x63d8 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    63ca:	dc 01       	movw	r26, r24
    63cc:	ed 91       	ld	r30, X+
    63ce:	fc 91       	ld	r31, X
    63d0:	02 80       	ldd	r0, Z+2	; 0x02
    63d2:	f3 81       	ldd	r31, Z+3	; 0x03
    63d4:	e0 2d       	mov	r30, r0
    63d6:	19 95       	eicall
    63d8:	08 95       	ret

000063da <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    63da:	dc 01       	movw	r26, r24
    63dc:	5b 96       	adiw	r26, 0x1b	; 27
    63de:	8d 91       	ld	r24, X+
    63e0:	9c 91       	ld	r25, X
    63e2:	5c 97       	sbiw	r26, 0x1c	; 28
    63e4:	00 97       	sbiw	r24, 0x00	; 0
    63e6:	39 f0       	breq	.+14     	; 0x63f6 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    63e8:	dc 01       	movw	r26, r24
    63ea:	ed 91       	ld	r30, X+
    63ec:	fc 91       	ld	r31, X
    63ee:	04 80       	ldd	r0, Z+4	; 0x04
    63f0:	f5 81       	ldd	r31, Z+5	; 0x05
    63f2:	e0 2d       	mov	r30, r0
    63f4:	19 95       	eicall
    63f6:	08 95       	ret

000063f8 <_ZN9CMBSenderC1Ev>:
    63f8:	2e ee       	ldi	r18, 0xEE	; 238
    63fa:	31 e2       	ldi	r19, 0x21	; 33
    63fc:	fc 01       	movw	r30, r24
    63fe:	20 83       	st	Z, r18
    6400:	31 83       	std	Z+1, r19	; 0x01
    6402:	08 95       	ret

00006404 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    6404:	6f 92       	push	r6
    6406:	7f 92       	push	r7
    6408:	8f 92       	push	r8
    640a:	9f 92       	push	r9
    640c:	af 92       	push	r10
    640e:	bf 92       	push	r11
    6410:	cf 92       	push	r12
    6412:	df 92       	push	r13
    6414:	ef 92       	push	r14
    6416:	ff 92       	push	r15
    6418:	0f 93       	push	r16
    641a:	1f 93       	push	r17
    641c:	cf 93       	push	r28
    641e:	df 93       	push	r29
    6420:	ec 01       	movw	r28, r24
    6422:	4b 01       	movw	r8, r22
    6424:	5a 01       	movw	r10, r20
    6426:	39 01       	movw	r6, r18
    6428:	c8 01       	movw	r24, r16
    642a:	0f 83       	std	Y+7, r16	; 0x07
    642c:	18 87       	std	Y+8, r17	; 0x08
    642e:	ea 86       	std	Y+10, r14	; 0x0a
    6430:	fb 86       	std	Y+11, r15	; 0x0b
    6432:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <malloc>
    6436:	8a 83       	std	Y+2, r24	; 0x02
    6438:	9b 83       	std	Y+3, r25	; 0x03
    643a:	c7 01       	movw	r24, r14
    643c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <malloc>
    6440:	8c 83       	std	Y+4, r24	; 0x04
    6442:	9d 83       	std	Y+5, r25	; 0x05
    6444:	19 8e       	std	Y+25, r1	; 0x19
    6446:	19 86       	std	Y+9, r1	; 0x09
    6448:	19 8a       	std	Y+17, r1	; 0x11
    644a:	1e 82       	std	Y+6, r1	; 0x06
    644c:	1c 8a       	std	Y+20, r1	; 0x14
    644e:	1d 8a       	std	Y+21, r1	; 0x15
    6450:	8f ef       	ldi	r24, 0xFF	; 255
    6452:	9f ef       	ldi	r25, 0xFF	; 255
    6454:	8e 8b       	std	Y+22, r24	; 0x16
    6456:	9f 8b       	std	Y+23, r25	; 0x17
    6458:	87 e0       	ldi	r24, 0x07	; 7
    645a:	88 8b       	std	Y+16, r24	; 0x10
    645c:	82 e0       	ldi	r24, 0x02	; 2
    645e:	88 8f       	std	Y+24, r24	; 0x18
    6460:	1a 8e       	std	Y+26, r1	; 0x1a
    6462:	ca 8a       	std	Y+18, r12	; 0x12
    6464:	db 8a       	std	Y+19, r13	; 0x13
    6466:	ac 86       	std	Y+12, r10	; 0x0c
    6468:	bd 86       	std	Y+13, r11	; 0x0d
    646a:	d5 01       	movw	r26, r10
    646c:	ed 91       	ld	r30, X+
    646e:	fc 91       	ld	r31, X
    6470:	04 84       	ldd	r0, Z+12	; 0x0c
    6472:	f5 85       	ldd	r31, Z+13	; 0x0d
    6474:	e0 2d       	mov	r30, r0
    6476:	44 e4       	ldi	r20, 0x44	; 68
    6478:	53 e3       	ldi	r21, 0x33	; 51
    647a:	be 01       	movw	r22, r28
    647c:	c5 01       	movw	r24, r10
    647e:	19 95       	eicall
    6480:	d5 01       	movw	r26, r10
    6482:	ed 91       	ld	r30, X+
    6484:	fc 91       	ld	r31, X
    6486:	06 84       	ldd	r0, Z+14	; 0x0e
    6488:	f7 85       	ldd	r31, Z+15	; 0x0f
    648a:	e0 2d       	mov	r30, r0
    648c:	40 ed       	ldi	r20, 0xD0	; 208
    648e:	53 e3       	ldi	r21, 0x33	; 51
    6490:	be 01       	movw	r22, r28
    6492:	c5 01       	movw	r24, r10
    6494:	19 95       	eicall
    6496:	61 14       	cp	r6, r1
    6498:	71 04       	cpc	r7, r1
    649a:	19 f0       	breq	.+6      	; 0x64a2 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    649c:	6b 8e       	std	Y+27, r6	; 0x1b
    649e:	7c 8e       	std	Y+28, r7	; 0x1c
    64a0:	02 c0       	rjmp	.+4      	; 0x64a6 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xa2>
    64a2:	cb 8f       	std	Y+27, r28	; 0x1b
    64a4:	dc 8f       	std	Y+28, r29	; 0x1c
    64a6:	8e 86       	std	Y+14, r8	; 0x0e
    64a8:	9f 86       	std	Y+15, r9	; 0x0f
    64aa:	81 14       	cp	r8, r1
    64ac:	91 04       	cpc	r9, r1
    64ae:	61 f0       	breq	.+24     	; 0x64c8 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc4>
    64b0:	d4 01       	movw	r26, r8
    64b2:	ed 91       	ld	r30, X+
    64b4:	fc 91       	ld	r31, X
    64b6:	02 88       	ldd	r0, Z+18	; 0x12
    64b8:	f3 89       	ldd	r31, Z+19	; 0x13
    64ba:	e0 2d       	mov	r30, r0
    64bc:	21 e0       	ldi	r18, 0x01	; 1
    64be:	ae 01       	movw	r20, r28
    64c0:	6b e6       	ldi	r22, 0x6B	; 107
    64c2:	73 e3       	ldi	r23, 0x33	; 51
    64c4:	c4 01       	movw	r24, r8
    64c6:	19 95       	eicall
    64c8:	df 91       	pop	r29
    64ca:	cf 91       	pop	r28
    64cc:	1f 91       	pop	r17
    64ce:	0f 91       	pop	r16
    64d0:	ff 90       	pop	r15
    64d2:	ef 90       	pop	r14
    64d4:	df 90       	pop	r13
    64d6:	cf 90       	pop	r12
    64d8:	bf 90       	pop	r11
    64da:	af 90       	pop	r10
    64dc:	9f 90       	pop	r9
    64de:	8f 90       	pop	r8
    64e0:	7f 90       	pop	r7
    64e2:	6f 90       	pop	r6
    64e4:	08 95       	ret

000064e6 <_ZN9CMBSenderD1Ev>:
    64e6:	2e ee       	ldi	r18, 0xEE	; 238
    64e8:	31 e2       	ldi	r19, 0x21	; 33
    64ea:	fc 01       	movw	r30, r24
    64ec:	20 83       	st	Z, r18
    64ee:	31 83       	std	Z+1, r19	; 0x01
    64f0:	0e 94 dd 31 	call	0x63ba	; 0x63ba <_ZN16CMBEventsHandlerD1Ev>
    64f4:	08 95       	ret

000064f6 <_ZN9CMBSender13OnReceiveByteEh>:
    64f6:	cf 93       	push	r28
    64f8:	df 93       	push	r29
    64fa:	dc 01       	movw	r26, r24
    64fc:	96 2f       	mov	r25, r22
    64fe:	50 96       	adiw	r26, 0x10	; 16
    6500:	4c 91       	ld	r20, X
    6502:	50 97       	sbiw	r26, 0x10	; 16
    6504:	50 e0       	ldi	r21, 0x00	; 0
    6506:	4b 30       	cpi	r20, 0x0B	; 11
    6508:	51 05       	cpc	r21, r1
    650a:	08 f0       	brcs	.+2      	; 0x650e <_ZN9CMBSender13OnReceiveByteEh+0x18>
    650c:	ba c0       	rjmp	.+372    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    650e:	fa 01       	movw	r30, r20
    6510:	88 27       	eor	r24, r24
    6512:	e0 5c       	subi	r30, 0xC0	; 192
    6514:	fe 4f       	sbci	r31, 0xFE	; 254
    6516:	8f 4f       	sbci	r24, 0xFF	; 255
    6518:	0c 94 36 3d 	jmp	0x7a6c	; 0x7a6c <__tablejump2__>
    651c:	9a 3a       	cpi	r25, 0xAA	; 170
    651e:	21 f4       	brne	.+8      	; 0x6528 <_ZN9CMBSender13OnReceiveByteEh+0x32>
    6520:	82 e0       	ldi	r24, 0x02	; 2
    6522:	50 96       	adiw	r26, 0x10	; 16
    6524:	8c 93       	st	X, r24
    6526:	ad c0       	rjmp	.+346    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	50 96       	adiw	r26, 0x10	; 16
    652c:	8c 93       	st	X, r24
    652e:	a9 c0       	rjmp	.+338    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6530:	9c 3c       	cpi	r25, 0xCC	; 204
    6532:	21 f4       	brne	.+8      	; 0x653c <_ZN9CMBSender13OnReceiveByteEh+0x46>
    6534:	83 e0       	ldi	r24, 0x03	; 3
    6536:	50 96       	adiw	r26, 0x10	; 16
    6538:	8c 93       	st	X, r24
    653a:	a3 c0       	rjmp	.+326    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    653c:	81 e0       	ldi	r24, 0x01	; 1
    653e:	50 96       	adiw	r26, 0x10	; 16
    6540:	8c 93       	st	X, r24
    6542:	9f c0       	rjmp	.+318    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6544:	16 96       	adiw	r26, 0x06	; 6
    6546:	9c 93       	st	X, r25
    6548:	16 97       	sbiw	r26, 0x06	; 6
    654a:	51 96       	adiw	r26, 0x11	; 17
    654c:	1c 92       	st	X, r1
    654e:	51 97       	sbiw	r26, 0x11	; 17
    6550:	8f ef       	ldi	r24, 0xFF	; 255
    6552:	9f ef       	ldi	r25, 0xFF	; 255
    6554:	56 96       	adiw	r26, 0x16	; 22
    6556:	8d 93       	st	X+, r24
    6558:	9c 93       	st	X, r25
    655a:	57 97       	sbiw	r26, 0x17	; 23
    655c:	84 e0       	ldi	r24, 0x04	; 4
    655e:	50 96       	adiw	r26, 0x10	; 16
    6560:	8c 93       	st	X, r24
    6562:	8f c0       	rjmp	.+286    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6564:	51 96       	adiw	r26, 0x11	; 17
    6566:	8c 91       	ld	r24, X
    6568:	51 97       	sbiw	r26, 0x11	; 17
    656a:	12 96       	adiw	r26, 0x02	; 2
    656c:	ed 91       	ld	r30, X+
    656e:	fc 91       	ld	r31, X
    6570:	13 97       	sbiw	r26, 0x03	; 3
    6572:	e8 0f       	add	r30, r24
    6574:	f1 1d       	adc	r31, r1
    6576:	90 83       	st	Z, r25
    6578:	51 96       	adiw	r26, 0x11	; 17
    657a:	2c 91       	ld	r18, X
    657c:	51 97       	sbiw	r26, 0x11	; 17
    657e:	30 e0       	ldi	r19, 0x00	; 0
    6580:	17 96       	adiw	r26, 0x07	; 7
    6582:	4d 91       	ld	r20, X+
    6584:	5c 91       	ld	r21, X
    6586:	18 97       	sbiw	r26, 0x08	; 8
    6588:	42 17       	cp	r20, r18
    658a:	53 07       	cpc	r21, r19
    658c:	20 f4       	brcc	.+8      	; 0x6596 <_ZN9CMBSender13OnReceiveByteEh+0xa0>
    658e:	89 e0       	ldi	r24, 0x09	; 9
    6590:	50 96       	adiw	r26, 0x10	; 16
    6592:	8c 93       	st	X, r24
    6594:	76 c0       	rjmp	.+236    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6596:	56 96       	adiw	r26, 0x16	; 22
    6598:	2d 91       	ld	r18, X+
    659a:	3c 91       	ld	r19, X
    659c:	57 97       	sbiw	r26, 0x17	; 23
    659e:	29 27       	eor	r18, r25
    65a0:	62 2f       	mov	r22, r18
    65a2:	62 95       	swap	r22
    65a4:	62 27       	eor	r22, r18
    65a6:	06 2e       	mov	r0, r22
    65a8:	66 95       	lsr	r22
    65aa:	66 95       	lsr	r22
    65ac:	60 25       	eor	r22, r0
    65ae:	06 2e       	mov	r0, r22
    65b0:	66 95       	lsr	r22
    65b2:	60 25       	eor	r22, r0
    65b4:	67 70       	andi	r22, 0x07	; 7
    65b6:	02 2e       	mov	r0, r18
    65b8:	23 2f       	mov	r18, r19
    65ba:	66 95       	lsr	r22
    65bc:	07 94       	ror	r0
    65be:	67 95       	ror	r22
    65c0:	30 2d       	mov	r19, r0
    65c2:	26 27       	eor	r18, r22
    65c4:	06 94       	lsr	r0
    65c6:	67 95       	ror	r22
    65c8:	30 25       	eor	r19, r0
    65ca:	26 27       	eor	r18, r22
    65cc:	56 96       	adiw	r26, 0x16	; 22
    65ce:	2d 93       	st	X+, r18
    65d0:	3c 93       	st	X, r19
    65d2:	57 97       	sbiw	r26, 0x17	; 23
    65d4:	51 96       	adiw	r26, 0x11	; 17
    65d6:	8c 91       	ld	r24, X
    65d8:	51 97       	sbiw	r26, 0x11	; 17
    65da:	8f 5f       	subi	r24, 0xFF	; 255
    65dc:	51 96       	adiw	r26, 0x11	; 17
    65de:	8c 93       	st	X, r24
    65e0:	51 97       	sbiw	r26, 0x11	; 17
    65e2:	51 96       	adiw	r26, 0x11	; 17
    65e4:	2c 91       	ld	r18, X
    65e6:	51 97       	sbiw	r26, 0x11	; 17
    65e8:	30 e0       	ldi	r19, 0x00	; 0
    65ea:	16 96       	adiw	r26, 0x06	; 6
    65ec:	8c 91       	ld	r24, X
    65ee:	16 97       	sbiw	r26, 0x06	; 6
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	02 97       	sbiw	r24, 0x02	; 2
    65f4:	28 17       	cp	r18, r24
    65f6:	39 07       	cpc	r19, r25
    65f8:	09 f0       	breq	.+2      	; 0x65fc <_ZN9CMBSender13OnReceiveByteEh+0x106>
    65fa:	43 c0       	rjmp	.+134    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    65fc:	85 e0       	ldi	r24, 0x05	; 5
    65fe:	50 96       	adiw	r26, 0x10	; 16
    6600:	8c 93       	st	X, r24
    6602:	3f c0       	rjmp	.+126    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6604:	69 2f       	mov	r22, r25
    6606:	70 e0       	ldi	r23, 0x00	; 0
    6608:	54 96       	adiw	r26, 0x14	; 20
    660a:	6d 93       	st	X+, r22
    660c:	7c 93       	st	X, r23
    660e:	55 97       	sbiw	r26, 0x15	; 21
    6610:	86 e0       	ldi	r24, 0x06	; 6
    6612:	50 96       	adiw	r26, 0x10	; 16
    6614:	8c 93       	st	X, r24
    6616:	35 c0       	rjmp	.+106    	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6618:	54 96       	adiw	r26, 0x14	; 20
    661a:	2d 91       	ld	r18, X+
    661c:	3c 91       	ld	r19, X
    661e:	55 97       	sbiw	r26, 0x15	; 21
    6620:	a9 01       	movw	r20, r18
    6622:	59 2b       	or	r21, r25
    6624:	54 96       	adiw	r26, 0x14	; 20
    6626:	4d 93       	st	X+, r20
    6628:	5c 93       	st	X, r21
    662a:	55 97       	sbiw	r26, 0x15	; 21
    662c:	56 96       	adiw	r26, 0x16	; 22
    662e:	2d 91       	ld	r18, X+
    6630:	3c 91       	ld	r19, X
    6632:	57 97       	sbiw	r26, 0x17	; 23
    6634:	42 17       	cp	r20, r18
    6636:	53 07       	cpc	r21, r19
    6638:	f1 f4       	brne	.+60     	; 0x6676 <_ZN9CMBSender13OnReceiveByteEh+0x180>
    663a:	ed 01       	movw	r28, r26
    663c:	88 e0       	ldi	r24, 0x08	; 8
    663e:	88 8b       	std	Y+16, r24	; 0x10
    6640:	e8 81       	ld	r30, Y
    6642:	f9 81       	ldd	r31, Y+1	; 0x01
    6644:	4e 81       	ldd	r20, Y+6	; 0x06
    6646:	50 e0       	ldi	r21, 0x00	; 0
    6648:	6a 81       	ldd	r22, Y+2	; 0x02
    664a:	7b 81       	ldd	r23, Y+3	; 0x03
    664c:	01 90       	ld	r0, Z+
    664e:	f0 81       	ld	r31, Z
    6650:	e0 2d       	mov	r30, r0
    6652:	cd 01       	movw	r24, r26
    6654:	19 95       	eicall
    6656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    665a:	00 97       	sbiw	r24, 0x00	; 0
    665c:	91 f0       	breq	.+36     	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    665e:	dc 01       	movw	r26, r24
    6660:	ed 91       	ld	r30, X+
    6662:	fc 91       	ld	r31, X
    6664:	4e 81       	ldd	r20, Y+6	; 0x06
    6666:	50 e0       	ldi	r21, 0x00	; 0
    6668:	6a 81       	ldd	r22, Y+2	; 0x02
    666a:	7b 81       	ldd	r23, Y+3	; 0x03
    666c:	01 90       	ld	r0, Z+
    666e:	f0 81       	ld	r31, Z
    6670:	e0 2d       	mov	r30, r0
    6672:	19 95       	eicall
    6674:	06 c0       	rjmp	.+12     	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6676:	89 e0       	ldi	r24, 0x09	; 9
    6678:	50 96       	adiw	r26, 0x10	; 16
    667a:	8c 93       	st	X, r24
    667c:	02 c0       	rjmp	.+4      	; 0x6682 <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    667e:	5a 96       	adiw	r26, 0x1a	; 26
    6680:	1c 92       	st	X, r1
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	08 95       	ret

00006688 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    6688:	cf 93       	push	r28
    668a:	df 93       	push	r29
    668c:	ec 01       	movw	r28, r24
    668e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6690:	9d 85       	ldd	r25, Y+13	; 0x0d
    6692:	dc 01       	movw	r26, r24
    6694:	ed 91       	ld	r30, X+
    6696:	fc 91       	ld	r31, X
    6698:	02 80       	ldd	r0, Z+2	; 0x02
    669a:	f3 81       	ldd	r31, Z+3	; 0x03
    669c:	e0 2d       	mov	r30, r0
    669e:	19 95       	eicall
    66a0:	68 2f       	mov	r22, r24
    66a2:	ce 01       	movw	r24, r28
    66a4:	0e 94 7b 32 	call	0x64f6	; 0x64f6 <_ZN9CMBSender13OnReceiveByteEh>
    66a8:	df 91       	pop	r29
    66aa:	cf 91       	pop	r28
    66ac:	08 95       	ret

000066ae <_ZN9CMBSender9OnTimeoutEv>:
    66ae:	cf 93       	push	r28
    66b0:	df 93       	push	r29
    66b2:	ec 01       	movw	r28, r24
    66b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    66b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    66b8:	dc 01       	movw	r26, r24
    66ba:	ed 91       	ld	r30, X+
    66bc:	fc 91       	ld	r31, X
    66be:	04 80       	ldd	r0, Z+4	; 0x04
    66c0:	f5 81       	ldd	r31, Z+5	; 0x05
    66c2:	e0 2d       	mov	r30, r0
    66c4:	19 95       	eicall
    66c6:	88 89       	ldd	r24, Y+16	; 0x10
    66c8:	88 30       	cpi	r24, 0x08	; 8
    66ca:	11 f0       	breq	.+4      	; 0x66d0 <_ZN9CMBSender9OnTimeoutEv+0x22>
    66cc:	8a e0       	ldi	r24, 0x0A	; 10
    66ce:	88 8b       	std	Y+16, r24	; 0x10
    66d0:	df 91       	pop	r29
    66d2:	cf 91       	pop	r28
    66d4:	08 95       	ret

000066d6 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    66d6:	0e 94 57 33 	call	0x66ae	; 0x66ae <_ZN9CMBSender9OnTimeoutEv>
    66da:	08 95       	ret

000066dc <_ZN9CMBSender19StartMODBUSListenerEv>:
    66dc:	cf 93       	push	r28
    66de:	df 93       	push	r29
    66e0:	fc 01       	movw	r30, r24
    66e2:	11 8a       	std	Z+17, r1	; 0x11
    66e4:	16 82       	std	Z+6, r1	; 0x06
    66e6:	14 8a       	std	Z+20, r1	; 0x14
    66e8:	15 8a       	std	Z+21, r1	; 0x15
    66ea:	16 8a       	std	Z+22, r1	; 0x16
    66ec:	17 8a       	std	Z+23, r1	; 0x17
    66ee:	10 8a       	std	Z+16, r1	; 0x10
    66f0:	86 85       	ldd	r24, Z+14	; 0x0e
    66f2:	97 85       	ldd	r25, Z+15	; 0x0f
    66f4:	ec 01       	movw	r28, r24
    66f6:	a8 81       	ld	r26, Y
    66f8:	b9 81       	ldd	r27, Y+1	; 0x01
    66fa:	62 89       	ldd	r22, Z+18	; 0x12
    66fc:	73 89       	ldd	r23, Z+19	; 0x13
    66fe:	12 96       	adiw	r26, 0x02	; 2
    6700:	ed 91       	ld	r30, X+
    6702:	fc 91       	ld	r31, X
    6704:	13 97       	sbiw	r26, 0x03	; 3
    6706:	19 95       	eicall
    6708:	df 91       	pop	r29
    670a:	cf 91       	pop	r28
    670c:	08 95       	ret

0000670e <_ZN9CMBSender14OnTransmitByteEv>:
    670e:	cf 93       	push	r28
    6710:	df 93       	push	r29
    6712:	ec 01       	movw	r28, r24
    6714:	88 8d       	ldd	r24, Y+24	; 0x18
    6716:	84 30       	cpi	r24, 0x04	; 4
    6718:	38 f4       	brcc	.+14     	; 0x6728 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    671a:	82 30       	cpi	r24, 0x02	; 2
    671c:	b8 f5       	brcc	.+110    	; 0x678c <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    671e:	88 23       	and	r24, r24
    6720:	31 f0       	breq	.+12     	; 0x672e <_ZN9CMBSender14OnTransmitByteEv+0x20>
    6722:	81 30       	cpi	r24, 0x01	; 1
    6724:	d1 f0       	breq	.+52     	; 0x675a <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    6726:	39 c0       	rjmp	.+114    	; 0x679a <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6728:	85 30       	cpi	r24, 0x05	; 5
    672a:	81 f1       	breq	.+96     	; 0x678c <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    672c:	36 c0       	rjmp	.+108    	; 0x679a <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    672e:	81 e0       	ldi	r24, 0x01	; 1
    6730:	88 8f       	std	Y+24, r24	; 0x18
    6732:	19 8e       	std	Y+25, r1	; 0x19
    6734:	8c 85       	ldd	r24, Y+12	; 0x0c
    6736:	9d 85       	ldd	r25, Y+13	; 0x0d
    6738:	29 8d       	ldd	r18, Y+25	; 0x19
    673a:	dc 01       	movw	r26, r24
    673c:	ed 91       	ld	r30, X+
    673e:	fc 91       	ld	r31, X
    6740:	ac 81       	ldd	r26, Y+4	; 0x04
    6742:	bd 81       	ldd	r27, Y+5	; 0x05
    6744:	a2 0f       	add	r26, r18
    6746:	b1 1d       	adc	r27, r1
    6748:	04 80       	ldd	r0, Z+4	; 0x04
    674a:	f5 81       	ldd	r31, Z+5	; 0x05
    674c:	e0 2d       	mov	r30, r0
    674e:	6c 91       	ld	r22, X
    6750:	19 95       	eicall
    6752:	89 8d       	ldd	r24, Y+25	; 0x19
    6754:	8f 5f       	subi	r24, 0xFF	; 255
    6756:	89 8f       	std	Y+25, r24	; 0x19
    6758:	20 c0       	rjmp	.+64     	; 0x679a <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    675a:	8c 85       	ldd	r24, Y+12	; 0x0c
    675c:	9d 85       	ldd	r25, Y+13	; 0x0d
    675e:	29 8d       	ldd	r18, Y+25	; 0x19
    6760:	dc 01       	movw	r26, r24
    6762:	ed 91       	ld	r30, X+
    6764:	fc 91       	ld	r31, X
    6766:	ac 81       	ldd	r26, Y+4	; 0x04
    6768:	bd 81       	ldd	r27, Y+5	; 0x05
    676a:	a2 0f       	add	r26, r18
    676c:	b1 1d       	adc	r27, r1
    676e:	04 80       	ldd	r0, Z+4	; 0x04
    6770:	f5 81       	ldd	r31, Z+5	; 0x05
    6772:	e0 2d       	mov	r30, r0
    6774:	6c 91       	ld	r22, X
    6776:	19 95       	eicall
    6778:	89 8d       	ldd	r24, Y+25	; 0x19
    677a:	8f 5f       	subi	r24, 0xFF	; 255
    677c:	89 8f       	std	Y+25, r24	; 0x19
    677e:	99 8d       	ldd	r25, Y+25	; 0x19
    6780:	89 85       	ldd	r24, Y+9	; 0x09
    6782:	98 13       	cpse	r25, r24
    6784:	0a c0       	rjmp	.+20     	; 0x679a <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6786:	83 e0       	ldi	r24, 0x03	; 3
    6788:	88 8f       	std	Y+24, r24	; 0x18
    678a:	07 c0       	rjmp	.+14     	; 0x679a <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    678c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    678e:	88 23       	and	r24, r24
    6790:	19 f0       	breq	.+6      	; 0x6798 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    6792:	ce 01       	movw	r24, r28
    6794:	0e 94 6e 33 	call	0x66dc	; 0x66dc <_ZN9CMBSender19StartMODBUSListenerEv>
    6798:	1a 8e       	std	Y+26, r1	; 0x1a
    679a:	df 91       	pop	r29
    679c:	cf 91       	pop	r28
    679e:	08 95       	ret

000067a0 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    67a0:	0e 94 87 33 	call	0x670e	; 0x670e <_ZN9CMBSender14OnTransmitByteEv>
    67a4:	08 95       	ret

000067a6 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    67a6:	fc 01       	movw	r30, r24
    67a8:	06 c0       	rjmp	.+12     	; 0x67b6 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    67aa:	80 89       	ldd	r24, Z+16	; 0x10
    67ac:	89 30       	cpi	r24, 0x09	; 9
    67ae:	41 f0       	breq	.+16     	; 0x67c0 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    67b0:	80 89       	ldd	r24, Z+16	; 0x10
    67b2:	8a 30       	cpi	r24, 0x0A	; 10
    67b4:	39 f0       	breq	.+14     	; 0x67c4 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    67b6:	80 89       	ldd	r24, Z+16	; 0x10
    67b8:	88 30       	cpi	r24, 0x08	; 8
    67ba:	b9 f7       	brne	.-18     	; 0x67aa <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    67bc:	81 e0       	ldi	r24, 0x01	; 1
    67be:	08 95       	ret
    67c0:	82 e0       	ldi	r24, 0x02	; 2
    67c2:	08 95       	ret
    67c4:	83 e0       	ldi	r24, 0x03	; 3
    67c6:	08 95       	ret

000067c8 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    67c8:	cf 93       	push	r28
    67ca:	df 93       	push	r29
    67cc:	ec 01       	movw	r28, r24
    67ce:	19 8e       	std	Y+25, r1	; 0x19
    67d0:	18 8e       	std	Y+24, r1	; 0x18
    67d2:	0e 94 87 33 	call	0x670e	; 0x670e <_ZN9CMBSender14OnTransmitByteEv>
    67d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    67d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    67da:	dc 01       	movw	r26, r24
    67dc:	ed 91       	ld	r30, X+
    67de:	fc 91       	ld	r31, X
    67e0:	6a 89       	ldd	r22, Y+18	; 0x12
    67e2:	7b 89       	ldd	r23, Y+19	; 0x13
    67e4:	02 80       	ldd	r0, Z+2	; 0x02
    67e6:	f3 81       	ldd	r31, Z+3	; 0x03
    67e8:	e0 2d       	mov	r30, r0
    67ea:	19 95       	eicall
    67ec:	df 91       	pop	r29
    67ee:	cf 91       	pop	r28
    67f0:	08 95       	ret

000067f2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    67f2:	cf 93       	push	r28
    67f4:	df 93       	push	r29
    67f6:	ec 01       	movw	r28, r24
    67f8:	e8 81       	ld	r30, Y
    67fa:	f9 81       	ldd	r31, Y+1	; 0x01
    67fc:	02 84       	ldd	r0, Z+10	; 0x0a
    67fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    6800:	e0 2d       	mov	r30, r0
    6802:	19 95       	eicall
    6804:	ce 01       	movw	r24, r28
    6806:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    680a:	df 91       	pop	r29
    680c:	cf 91       	pop	r28
    680e:	08 95       	ret

00006810 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    6810:	cf 93       	push	r28
    6812:	df 93       	push	r29
    6814:	ec 01       	movw	r28, r24
    6816:	e8 81       	ld	r30, Y
    6818:	f9 81       	ldd	r31, Y+1	; 0x01
    681a:	06 84       	ldd	r0, Z+14	; 0x0e
    681c:	f7 85       	ldd	r31, Z+15	; 0x0f
    681e:	e0 2d       	mov	r30, r0
    6820:	19 95       	eicall
    6822:	ce 01       	movw	r24, r28
    6824:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6828:	df 91       	pop	r29
    682a:	cf 91       	pop	r28
    682c:	08 95       	ret

0000682e <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    682e:	cf 93       	push	r28
    6830:	df 93       	push	r29
    6832:	ec 01       	movw	r28, r24
    6834:	e8 81       	ld	r30, Y
    6836:	f9 81       	ldd	r31, Y+1	; 0x01
    6838:	04 84       	ldd	r0, Z+12	; 0x0c
    683a:	f5 85       	ldd	r31, Z+13	; 0x0d
    683c:	e0 2d       	mov	r30, r0
    683e:	19 95       	eicall
    6840:	ce 01       	movw	r24, r28
    6842:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6846:	df 91       	pop	r29
    6848:	cf 91       	pop	r28
    684a:	08 95       	ret

0000684c <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    684c:	cf 93       	push	r28
    684e:	df 93       	push	r29
    6850:	ec 01       	movw	r28, r24
    6852:	e8 81       	ld	r30, Y
    6854:	f9 81       	ldd	r31, Y+1	; 0x01
    6856:	50 e0       	ldi	r21, 0x00	; 0
    6858:	00 88       	ldd	r0, Z+16	; 0x10
    685a:	f1 89       	ldd	r31, Z+17	; 0x11
    685c:	e0 2d       	mov	r30, r0
    685e:	19 95       	eicall
    6860:	ce 01       	movw	r24, r28
    6862:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6866:	df 91       	pop	r29
    6868:	cf 91       	pop	r28
    686a:	08 95       	ret

0000686c <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    686c:	fc 01       	movw	r30, r24
    686e:	06 c0       	rjmp	.+12     	; 0x687c <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    6870:	80 8d       	ldd	r24, Z+24	; 0x18
    6872:	84 30       	cpi	r24, 0x04	; 4
    6874:	41 f0       	breq	.+16     	; 0x6886 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    6876:	80 8d       	ldd	r24, Z+24	; 0x18
    6878:	85 30       	cpi	r24, 0x05	; 5
    687a:	39 f0       	breq	.+14     	; 0x688a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    687c:	80 8d       	ldd	r24, Z+24	; 0x18
    687e:	83 30       	cpi	r24, 0x03	; 3
    6880:	b9 f7       	brne	.-18     	; 0x6870 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    6882:	81 e0       	ldi	r24, 0x01	; 1
    6884:	08 95       	ret
    6886:	82 e0       	ldi	r24, 0x02	; 2
    6888:	08 95       	ret
    688a:	83 e0       	ldi	r24, 0x03	; 3
    688c:	08 95       	ret

0000688e <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    688e:	21 e0       	ldi	r18, 0x01	; 1
    6890:	fc 01       	movw	r30, r24
    6892:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    6894:	0e 94 17 34 	call	0x682e	; 0x682e <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    6898:	08 95       	ret

0000689a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    689a:	21 e0       	ldi	r18, 0x01	; 1
    689c:	fc 01       	movw	r30, r24
    689e:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    68a0:	0e 94 26 34 	call	0x684c	; 0x684c <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    68a4:	08 95       	ret

000068a6 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    68a6:	0f 93       	push	r16
    68a8:	1f 93       	push	r17
    68aa:	cf 93       	push	r28
    68ac:	df 93       	push	r29
    68ae:	8c 01       	movw	r16, r24
    68b0:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    68b2:	98 81       	ld	r25, Y
    68b4:	91 38       	cpi	r25, 0x81	; 129
    68b6:	69 f4       	brne	.+26     	; 0x68d2 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    68b8:	d8 01       	movw	r26, r16
    68ba:	ed 91       	ld	r30, X+
    68bc:	fc 91       	ld	r31, X
    68be:	04 80       	ldd	r0, Z+4	; 0x04
    68c0:	f5 81       	ldd	r31, Z+5	; 0x05
    68c2:	e0 2d       	mov	r30, r0
    68c4:	2a 81       	ldd	r18, Y+2	; 0x02
    68c6:	ab 01       	movw	r20, r22
    68c8:	4d 5f       	subi	r20, 0xFD	; 253
    68ca:	5f 4f       	sbci	r21, 0xFF	; 255
    68cc:	69 81       	ldd	r22, Y+1	; 0x01
    68ce:	c8 01       	movw	r24, r16
    68d0:	19 95       	eicall
	}
	if (data[0] == 0x83)
    68d2:	98 81       	ld	r25, Y
    68d4:	93 38       	cpi	r25, 0x83	; 131
    68d6:	99 f4       	brne	.+38     	; 0x68fe <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    68d8:	d8 01       	movw	r26, r16
    68da:	ed 91       	ld	r30, X+
    68dc:	fc 91       	ld	r31, X
    68de:	2b 81       	ldd	r18, Y+3	; 0x03
    68e0:	30 e0       	ldi	r19, 0x00	; 0
    68e2:	ae 01       	movw	r20, r28
    68e4:	4c 5f       	subi	r20, 0xFC	; 252
    68e6:	5f 4f       	sbci	r21, 0xFF	; 255
    68e8:	69 81       	ldd	r22, Y+1	; 0x01
    68ea:	70 e0       	ldi	r23, 0x00	; 0
    68ec:	76 2f       	mov	r23, r22
    68ee:	66 27       	eor	r22, r22
    68f0:	8a 81       	ldd	r24, Y+2	; 0x02
    68f2:	68 2b       	or	r22, r24
    68f4:	02 80       	ldd	r0, Z+2	; 0x02
    68f6:	f3 81       	ldd	r31, Z+3	; 0x03
    68f8:	e0 2d       	mov	r30, r0
    68fa:	c8 01       	movw	r24, r16
    68fc:	19 95       	eicall
	}
}
    68fe:	df 91       	pop	r29
    6900:	cf 91       	pop	r28
    6902:	1f 91       	pop	r17
    6904:	0f 91       	pop	r16
    6906:	08 95       	ret

00006908 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    6908:	0e 94 53 34 	call	0x68a6	; 0x68a6 <_ZN9CMBSender18ProcessTransactionEPhj>
    690c:	08 95       	ret

0000690e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    690e:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    6910:	e0 e6       	ldi	r30, 0x60	; 96
    6912:	f6 e0       	ldi	r31, 0x06	; 6
    6914:	88 e0       	ldi	r24, 0x08	; 8
    6916:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    6918:	84 e0       	ldi	r24, 0x04	; 4
    691a:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    691c:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    691e:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    6920:	e0 ea       	ldi	r30, 0xA0	; 160
    6922:	f9 e0       	ldi	r31, 0x09	; 9
    6924:	84 e1       	ldi	r24, 0x14	; 20
    6926:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    6928:	88 e1       	ldi	r24, 0x18	; 24
    692a:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    692c:	84 81       	ldd	r24, Z+4	; 0x04
    692e:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    6930:	41 30       	cpi	r20, 0x01	; 1
    6932:	19 f0       	breq	.+6      	; 0x693a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    6934:	42 30       	cpi	r20, 0x02	; 2
    6936:	19 f0       	breq	.+6      	; 0x693e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    6938:	04 c0       	rjmp	.+8      	; 0x6942 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    693a:	80 e2       	ldi	r24, 0x20	; 32
    693c:	03 c0       	rjmp	.+6      	; 0x6944 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    693e:	80 e3       	ldi	r24, 0x30	; 48
		break;
    6940:	01 c0       	rjmp	.+2      	; 0x6944 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    6942:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    6944:	22 23       	and	r18, r18
    6946:	19 f0       	breq	.+6      	; 0x694e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    6948:	21 30       	cpi	r18, 0x01	; 1
    694a:	19 f0       	breq	.+6      	; 0x6952 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    694c:	03 c0       	rjmp	.+6      	; 0x6954 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    694e:	87 7f       	andi	r24, 0xF7	; 247
		break;
    6950:	01 c0       	rjmp	.+2      	; 0x6954 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    6952:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    6954:	01 11       	cpse	r16, r1
    6956:	02 c0       	rjmp	.+4      	; 0x695c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    6958:	93 e4       	ldi	r25, 0x43	; 67
    695a:	01 c0       	rjmp	.+2      	; 0x695e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    695c:	93 e0       	ldi	r25, 0x03	; 3
    695e:	89 2b       	or	r24, r25
    6960:	e0 ea       	ldi	r30, 0xA0	; 160
    6962:	f9 e0       	ldi	r31, 0x09	; 9
    6964:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    6966:	70 e0       	ldi	r23, 0x00	; 0
    6968:	db 01       	movw	r26, r22
    696a:	a6 5a       	subi	r26, 0xA6	; 166
    696c:	be 4d       	sbci	r27, 0xDE	; 222
    696e:	8c 91       	ld	r24, X
    6970:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    6972:	db 01       	movw	r26, r22
    6974:	a6 5c       	subi	r26, 0xC6	; 198
    6976:	be 4d       	sbci	r27, 0xDE	; 222
    6978:	8c 91       	ld	r24, X
    697a:	82 95       	swap	r24
    697c:	80 7f       	andi	r24, 0xF0	; 240
    697e:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    6980:	0f 91       	pop	r16
    6982:	08 95       	ret

00006984 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    6984:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
    6988:	08 95       	ret

0000698a <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    698a:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    698e:	08 95       	ret

00006990 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    6990:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6994:	86 fb       	bst	r24, 6
    6996:	88 27       	eor	r24, r24
    6998:	80 f9       	bld	r24, 0
}
    699a:	91 e0       	ldi	r25, 0x01	; 1
    699c:	89 27       	eor	r24, r25
    699e:	08 95       	ret

000069a0 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    69a0:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    69a4:	80 95       	com	r24
}
    69a6:	88 1f       	adc	r24, r24
    69a8:	88 27       	eor	r24, r24
    69aa:	88 1f       	adc	r24, r24
    69ac:	08 95       	ret

000069ae <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    69ae:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    69b2:	85 fb       	bst	r24, 5
    69b4:	88 27       	eor	r24, r24
    69b6:	80 f9       	bld	r24, 0
}
    69b8:	91 e0       	ldi	r25, 0x01	; 1
    69ba:	89 27       	eor	r24, r25
    69bc:	08 95       	ret

000069be <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    69be:	60 93 6c 24 	sts	0x246C, r22	; 0x80246c <InterruptSenderTable+0xb0>
    69c2:	70 93 6d 24 	sts	0x246D, r23	; 0x80246d <InterruptSenderTable+0xb1>
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    69c6:	40 93 76 23 	sts	0x2376, r20	; 0x802376 <InterruptFuncTable+0xb0>
    69ca:	50 93 77 23 	sts	0x2377, r21	; 0x802377 <InterruptFuncTable+0xb1>
    69ce:	08 95       	ret

000069d0 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    69d0:	60 93 70 24 	sts	0x2470, r22	; 0x802470 <InterruptSenderTable+0xb4>
    69d4:	70 93 71 24 	sts	0x2471, r23	; 0x802471 <InterruptSenderTable+0xb5>
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    69d8:	40 93 7a 23 	sts	0x237A, r20	; 0x80237a <InterruptFuncTable+0xb4>
    69dc:	50 93 7b 23 	sts	0x237B, r21	; 0x80237b <InterruptFuncTable+0xb5>
    69e0:	08 95       	ret

000069e2 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    69e2:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    69e4:	8b e6       	ldi	r24, 0x6B	; 107
    69e6:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    69e8:	80 ea       	ldi	r24, 0xA0	; 160
    69ea:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    69ec:	89 e0       	ldi	r24, 0x09	; 9
    69ee:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    69f0:	12 86       	std	Z+10, r1	; 0x0a
    69f2:	08 95       	ret

000069f4 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    69f4:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    69f6:	8c e6       	ldi	r24, 0x6C	; 108
    69f8:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    69fa:	80 ea       	ldi	r24, 0xA0	; 160
    69fc:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    69fe:	89 e0       	ldi	r24, 0x09	; 9
    6a00:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    6a02:	16 86       	std	Z+14, r1	; 0x0e
    6a04:	08 95       	ret

00006a06 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    6a06:	cf 93       	push	r28
    6a08:	df 93       	push	r29
    6a0a:	ec 01       	movw	r28, r24
    6a0c:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN6CUSARTC1Ev>
    6a10:	84 e0       	ldi	r24, 0x04	; 4
    6a12:	92 e2       	ldi	r25, 0x22	; 34
    6a14:	88 83       	st	Y, r24
    6a16:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    6a18:	df 91       	pop	r29
    6a1a:	cf 91       	pop	r28
    6a1c:	08 95       	ret

00006a1e <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    6a1e:	24 e0       	ldi	r18, 0x04	; 4
    6a20:	32 e2       	ldi	r19, 0x22	; 34
    6a22:	fc 01       	movw	r30, r24
    6a24:	20 83       	st	Z, r18
    6a26:	31 83       	std	Z+1, r19	; 0x01
    6a28:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_ZN6CUSARTD1Ev>
    6a2c:	08 95       	ret

00006a2e <_Z18onewire_crc_updatehh>:

#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
    6a2e:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t p = 8; p; p--) {
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
    6a30:	3c e8       	ldi	r19, 0x8C	; 140
    6a32:	26 2f       	mov	r18, r22
    6a34:	28 27       	eor	r18, r24
    6a36:	20 ff       	sbrs	r18, 0
    6a38:	03 c0       	rjmp	.+6      	; 0x6a40 <_Z18onewire_crc_updatehh+0x12>
    6a3a:	86 95       	lsr	r24
    6a3c:	83 27       	eor	r24, r19
    6a3e:	01 c0       	rjmp	.+2      	; 0x6a42 <_Z18onewire_crc_updatehh+0x14>
    6a40:	86 95       	lsr	r24
		b >>= 1;
    6a42:	66 95       	lsr	r22
    6a44:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
	for (uint8_t p = 8; p; p--) {
    6a46:	a9 f7       	brne	.-22     	; 0x6a32 <_Z18onewire_crc_updatehh+0x4>
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
		b >>= 1;
	}
	return crc;
}
    6a48:	08 95       	ret

00006a4a <_ZN8CDS18B20C1Ev>:

// default constructor
CDS18B20::CDS18B20()
    6a4a:	08 95       	ret

00006a4c <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    6a4c:	08 95       	ret

00006a4e <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    6a4e:	e0 e6       	ldi	r30, 0x60	; 96
    6a50:	f6 e0       	ldi	r31, 0x06	; 6
    6a52:	80 e8       	ldi	r24, 0x80	; 128
    6a54:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6a56:	a7 e2       	ldi	r26, 0x27	; 39
    6a58:	bf e0       	ldi	r27, 0x0F	; 15
    6a5a:	11 97       	sbiw	r26, 0x01	; 1
    6a5c:	f1 f7       	brne	.-4      	; 0x6a5a <_ZN8CDS18B207w1_findEv+0xc>
    6a5e:	00 c0       	rjmp	.+0      	; 0x6a60 <_ZN8CDS18B207w1_findEv+0x12>
    6a60:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    6a62:	82 83       	std	Z+2, r24	; 0x02
    6a64:	87 e0       	ldi	r24, 0x07	; 7
    6a66:	92 e0       	ldi	r25, 0x02	; 2
    6a68:	01 97       	sbiw	r24, 0x01	; 1
    6a6a:	f1 f7       	brne	.-4      	; 0x6a68 <_ZN8CDS18B207w1_findEv+0x1a>
    6a6c:	00 c0       	rjmp	.+0      	; 0x6a6e <_ZN8CDS18B207w1_findEv+0x20>
    6a6e:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    6a70:	80 85       	ldd	r24, Z+8	; 0x08
    6a72:	af e1       	ldi	r26, 0x1F	; 31
    6a74:	bd e0       	ldi	r27, 0x0D	; 13
    6a76:	11 97       	sbiw	r26, 0x01	; 1
    6a78:	f1 f7       	brne	.-4      	; 0x6a76 <_ZN8CDS18B207w1_findEv+0x28>
    6a7a:	00 c0       	rjmp	.+0      	; 0x6a7c <_ZN8CDS18B207w1_findEv+0x2e>
    6a7c:	00 00       	nop
    6a7e:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    6a80:	88 1f       	adc	r24, r24
    6a82:	88 27       	eor	r24, r24
    6a84:	88 1f       	adc	r24, r24
    6a86:	08 95       	ret

00006a88 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    6a88:	cf 93       	push	r28
    6a8a:	df 93       	push	r29
    6a8c:	80 e0       	ldi	r24, 0x00	; 0
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    6a90:	c1 e0       	ldi	r28, 0x01	; 1
    6a92:	d0 e0       	ldi	r29, 0x00	; 0
    6a94:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    6a96:	e0 e6       	ldi	r30, 0x60	; 96
    6a98:	f6 e0       	ldi	r31, 0x06	; 6
    6a9a:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    6a9c:	9e 01       	movw	r18, r28
    6a9e:	08 2e       	mov	r0, r24
    6aa0:	02 c0       	rjmp	.+4      	; 0x6aa6 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    6aa2:	22 0f       	add	r18, r18
    6aa4:	33 1f       	adc	r19, r19
    6aa6:	0a 94       	dec	r0
    6aa8:	e2 f7       	brpl	.-8      	; 0x6aa2 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    6aaa:	d9 01       	movw	r26, r18
    6aac:	a6 23       	and	r26, r22
    6aae:	b7 23       	and	r27, r23
    6ab0:	2a 17       	cp	r18, r26
    6ab2:	3b 07       	cpc	r19, r27
    6ab4:	69 f4       	brne	.+26     	; 0x6ad0 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    6ab6:	41 83       	std	Z+1, r20	; 0x01
    6ab8:	25 e1       	ldi	r18, 0x15	; 21
    6aba:	2a 95       	dec	r18
    6abc:	f1 f7       	brne	.-4      	; 0x6aba <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    6abe:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    6ac0:	42 83       	std	Z+2, r20	; 0x02
    6ac2:	a7 e0       	ldi	r26, 0x07	; 7
    6ac4:	b2 e0       	ldi	r27, 0x02	; 2
    6ac6:	11 97       	sbiw	r26, 0x01	; 1
    6ac8:	f1 f7       	brne	.-4      	; 0x6ac6 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    6aca:	00 c0       	rjmp	.+0      	; 0x6acc <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    6acc:	00 00       	nop
    6ace:	0c c0       	rjmp	.+24     	; 0x6ae8 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    6ad0:	41 83       	std	Z+1, r20	; 0x01
    6ad2:	a7 e0       	ldi	r26, 0x07	; 7
    6ad4:	b2 e0       	ldi	r27, 0x02	; 2
    6ad6:	11 97       	sbiw	r26, 0x01	; 1
    6ad8:	f1 f7       	brne	.-4      	; 0x6ad6 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    6ada:	00 c0       	rjmp	.+0      	; 0x6adc <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    6adc:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    6ade:	42 83       	std	Z+2, r20	; 0x02
    6ae0:	b5 e3       	ldi	r27, 0x35	; 53
    6ae2:	ba 95       	dec	r27
    6ae4:	f1 f7       	brne	.-4      	; 0x6ae2 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    6ae6:	00 00       	nop
    6ae8:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    6aea:	88 30       	cpi	r24, 0x08	; 8
    6aec:	91 05       	cpc	r25, r1
    6aee:	b1 f6       	brne	.-84     	; 0x6a9c <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    6af0:	df 91       	pop	r29
    6af2:	cf 91       	pop	r28
    6af4:	08 95       	ret

00006af6 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    6af6:	20 e0       	ldi	r18, 0x00	; 0
    6af8:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    6afa:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    6afc:	e0 e6       	ldi	r30, 0x60	; 96
    6afe:	f6 e0       	ldi	r31, 0x06	; 6
    6b00:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    6b02:	61 e0       	ldi	r22, 0x01	; 1
    6b04:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    6b06:	91 83       	std	Z+1, r25	; 0x01
    6b08:	45 e1       	ldi	r20, 0x15	; 21
    6b0a:	4a 95       	dec	r20
    6b0c:	f1 f7       	brne	.-4      	; 0x6b0a <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    6b0e:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    6b10:	92 83       	std	Z+2, r25	; 0x02
    6b12:	aa e6       	ldi	r26, 0x6A	; 106
    6b14:	aa 95       	dec	r26
    6b16:	f1 f7       	brne	.-4      	; 0x6b14 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    6b18:	00 c0       	rjmp	.+0      	; 0x6b1a <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    6b1a:	40 85       	ldd	r20, Z+8	; 0x08
    6b1c:	44 23       	and	r20, r20
    6b1e:	54 f0       	brlt	.+20     	; 0x6b34 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    6b20:	ab 01       	movw	r20, r22
    6b22:	02 2e       	mov	r0, r18
    6b24:	02 c0       	rjmp	.+4      	; 0x6b2a <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    6b26:	44 0f       	add	r20, r20
    6b28:	55 1f       	adc	r21, r21
    6b2a:	0a 94       	dec	r0
    6b2c:	e2 f7       	brpl	.-8      	; 0x6b26 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    6b2e:	40 95       	com	r20
    6b30:	84 23       	and	r24, r20
    6b32:	08 c0       	rjmp	.+16     	; 0x6b44 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    6b34:	ab 01       	movw	r20, r22
    6b36:	02 2e       	mov	r0, r18
    6b38:	02 c0       	rjmp	.+4      	; 0x6b3e <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    6b3a:	44 0f       	add	r20, r20
    6b3c:	55 1f       	adc	r21, r21
    6b3e:	0a 94       	dec	r0
    6b40:	e2 f7       	brpl	.-8      	; 0x6b3a <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    6b42:	84 2b       	or	r24, r20
    6b44:	af e8       	ldi	r26, 0x8F	; 143
    6b46:	b1 e0       	ldi	r27, 0x01	; 1
    6b48:	11 97       	sbiw	r26, 0x01	; 1
    6b4a:	f1 f7       	brne	.-4      	; 0x6b48 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    6b4c:	00 c0       	rjmp	.+0      	; 0x6b4e <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    6b4e:	00 00       	nop
    6b50:	2f 5f       	subi	r18, 0xFF	; 255
    6b52:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    6b54:	28 30       	cpi	r18, 0x08	; 8
    6b56:	31 05       	cpc	r19, r1
    6b58:	b1 f6       	brne	.-84     	; 0x6b06 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    6b5a:	08 95       	ret

00006b5c <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    6b5c:	af 92       	push	r10
    6b5e:	bf 92       	push	r11
    6b60:	df 92       	push	r13
    6b62:	ef 92       	push	r14
    6b64:	ff 92       	push	r15
    6b66:	0f 93       	push	r16
    6b68:	1f 93       	push	r17
    6b6a:	cf 93       	push	r28
    6b6c:	df 93       	push	r29
    6b6e:	cd b7       	in	r28, 0x3d	; 61
    6b70:	de b7       	in	r29, 0x3e	; 62
    6b72:	29 97       	sbiw	r28, 0x09	; 9
    6b74:	cd bf       	out	0x3d, r28	; 61
    6b76:	de bf       	out	0x3e, r29	; 62
    6b78:	8c 01       	movw	r16, r24
	unsigned char data[9];
	int temp = 0;
	
	if (req)
    6b7a:	fc 01       	movw	r30, r24
    6b7c:	82 81       	ldd	r24, Z+2	; 0x02
    6b7e:	88 23       	and	r24, r24
    6b80:	a1 f0       	breq	.+40     	; 0x6baa <_ZN8CDS18B2010temp_18b20Ev+0x4e>
	{
		if(w1_find())
    6b82:	c8 01       	movw	r24, r16
    6b84:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <_ZN8CDS18B207w1_findEv>
    6b88:	88 23       	and	r24, r24
    6b8a:	61 f0       	breq	.+24     	; 0x6ba4 <_ZN8CDS18B2010temp_18b20Ev+0x48>
		{
			w1_sendcmd(0xcc);	//skip ROM
    6b8c:	6c ec       	ldi	r22, 0xCC	; 204
    6b8e:	c8 01       	movw	r24, r16
    6b90:	0e 94 44 35 	call	0x6a88	; 0x6a88 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    6b94:	64 e4       	ldi	r22, 0x44	; 68
    6b96:	c8 01       	movw	r24, r16
    6b98:	0e 94 44 35 	call	0x6a88	; 0x6a88 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    6b9c:	81 e0       	ldi	r24, 0x01	; 1
    6b9e:	f8 01       	movw	r30, r16
    6ba0:	83 83       	std	Z+3, r24	; 0x03
    6ba2:	3f c0       	rjmp	.+126    	; 0x6c22 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		}
		else
			find = false;
    6ba4:	f8 01       	movw	r30, r16
    6ba6:	13 82       	std	Z+3, r1	; 0x03
    6ba8:	3c c0       	rjmp	.+120    	; 0x6c22 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
	}
	else
	{
		if (find)
    6baa:	f8 01       	movw	r30, r16
    6bac:	83 81       	ldd	r24, Z+3	; 0x03
    6bae:	88 23       	and	r24, r24
    6bb0:	c1 f1       	breq	.+112    	; 0x6c22 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		{
			w1_find();
    6bb2:	c8 01       	movw	r24, r16
    6bb4:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    6bb8:	6c ec       	ldi	r22, 0xCC	; 204
    6bba:	c8 01       	movw	r24, r16
    6bbc:	0e 94 44 35 	call	0x6a88	; 0x6a88 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    6bc0:	6e eb       	ldi	r22, 0xBE	; 190
    6bc2:	c8 01       	movw	r24, r16
    6bc4:	0e 94 44 35 	call	0x6a88	; 0x6a88 <_ZN8CDS18B2010w1_sendcmdEh>
    6bc8:	ce 01       	movw	r24, r28
    6bca:	01 96       	adiw	r24, 0x01	; 1
    6bcc:	7c 01       	movw	r14, r24
    6bce:	5e 01       	movw	r10, r28
    6bd0:	9a e0       	ldi	r25, 0x0A	; 10
    6bd2:	a9 0e       	add	r10, r25
    6bd4:	b1 1c       	adc	r11, r1
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
    6bd6:	d1 2c       	mov	r13, r1
			for (int i = 0; i < 9; i++)
			{
				data[i] = w1_receive_byte();
    6bd8:	c8 01       	movw	r24, r16
    6bda:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN8CDS18B2015w1_receive_byteEv>
    6bde:	68 2f       	mov	r22, r24
    6be0:	f7 01       	movw	r30, r14
    6be2:	81 93       	st	Z+, r24
    6be4:	7f 01       	movw	r14, r30
				crc = onewire_crc_update(crc, data[i]);
    6be6:	8d 2d       	mov	r24, r13
    6be8:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <_Z18onewire_crc_updatehh>
    6bec:	d8 2e       	mov	r13, r24
			w1_sendcmd(0xcc);
			w1_sendcmd(0xbe);	//read temperature
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
			for (int i = 0; i < 9; i++)
    6bee:	ea 14       	cp	r14, r10
    6bf0:	fb 04       	cpc	r15, r11
    6bf2:	91 f7       	brne	.-28     	; 0x6bd8 <_ZN8CDS18B2010temp_18b20Ev+0x7c>
			{
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
    6bf4:	8a 81       	ldd	r24, Y+2	; 0x02
			temp = temp<<8;
			temp |= data[0];
    6bf6:	69 81       	ldd	r22, Y+1	; 0x01
			
			temp *= 0.625;
			
			if (crc == 0)
    6bf8:	d1 10       	cpse	r13, r1
    6bfa:	13 c0       	rjmp	.+38     	; 0x6c22 <_ZN8CDS18B2010temp_18b20Ev+0xc6>
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
			temp = temp<<8;
    6bfc:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    6bfe:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    6c00:	07 2e       	mov	r0, r23
    6c02:	00 0c       	add	r0, r0
    6c04:	88 0b       	sbc	r24, r24
    6c06:	99 0b       	sbc	r25, r25
    6c08:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__floatsisf>
    6c0c:	20 e0       	ldi	r18, 0x00	; 0
    6c0e:	30 e0       	ldi	r19, 0x00	; 0
    6c10:	40 e2       	ldi	r20, 0x20	; 32
    6c12:	5f e3       	ldi	r21, 0x3F	; 63
    6c14:	0e 94 38 3c 	call	0x7870	; 0x7870 <__mulsf3>
    6c18:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__fixsfsi>
    6c1c:	f8 01       	movw	r30, r16
    6c1e:	60 83       	st	Z, r22
    6c20:	71 83       	std	Z+1, r23	; 0x01
			if (crc == 0)
				temperature = temp;
		}
	}
	
	req = !req;
    6c22:	f8 01       	movw	r30, r16
    6c24:	92 81       	ldd	r25, Z+2	; 0x02
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	89 27       	eor	r24, r25
    6c2a:	82 83       	std	Z+2, r24	; 0x02
	
	return temperature;
}
    6c2c:	80 81       	ld	r24, Z
    6c2e:	91 81       	ldd	r25, Z+1	; 0x01
    6c30:	29 96       	adiw	r28, 0x09	; 9
    6c32:	cd bf       	out	0x3d, r28	; 61
    6c34:	de bf       	out	0x3e, r29	; 62
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	1f 91       	pop	r17
    6c3c:	0f 91       	pop	r16
    6c3e:	ff 90       	pop	r15
    6c40:	ef 90       	pop	r14
    6c42:	df 90       	pop	r13
    6c44:	bf 90       	pop	r11
    6c46:	af 90       	pop	r10
    6c48:	08 95       	ret

00006c4a <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    6c4a:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    6c4c:	a0 e6       	ldi	r26, 0x60	; 96
    6c4e:	b6 e0       	ldi	r27, 0x06	; 6
    6c50:	80 e8       	ldi	r24, 0x80	; 128
    6c52:	16 96       	adiw	r26, 0x06	; 6
    6c54:	8c 93       	st	X, r24
    6c56:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    6c58:	57 96       	adiw	r26, 0x17	; 23
    6c5a:	1c 92       	st	X, r1
	
	temperature = 0;
    6c5c:	10 82       	st	Z, r1
    6c5e:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    6c60:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    6c62:	81 e0       	ldi	r24, 0x01	; 1
    6c64:	82 83       	std	Z+2, r24	; 0x02
    6c66:	08 95       	ret

00006c68 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    6c68:	08 95       	ret

00006c6a <_ZN11CLaserBoardD1Ev>:
    6c6a:	08 95       	ret

00006c6c <_ZN11CLaserBoard12InitializeIOEv>:
    6c6c:	cf 93       	push	r28
    6c6e:	df 93       	push	r29
    6c70:	ec 01       	movw	r28, r24
    6c72:	e0 e4       	ldi	r30, 0x40	; 64
    6c74:	f6 e0       	ldi	r31, 0x06	; 6
    6c76:	11 82       	std	Z+1, r1	; 0x01
    6c78:	98 ea       	ldi	r25, 0xA8	; 168
    6c7a:	90 8b       	std	Z+16, r25	; 0x10
    6c7c:	91 8b       	std	Z+17, r25	; 0x11
    6c7e:	92 8b       	std	Z+18, r25	; 0x12
    6c80:	93 8b       	std	Z+19, r25	; 0x13
    6c82:	94 8b       	std	Z+20, r25	; 0x14
    6c84:	95 8b       	std	Z+21, r25	; 0x15
    6c86:	96 8b       	std	Z+22, r25	; 0x16
    6c88:	97 8b       	std	Z+23, r25	; 0x17
    6c8a:	8f ef       	ldi	r24, 0xFF	; 255
    6c8c:	84 83       	std	Z+4, r24	; 0x04
    6c8e:	a0 e8       	ldi	r26, 0x80	; 128
    6c90:	b6 e0       	ldi	r27, 0x06	; 6
    6c92:	98 e0       	ldi	r25, 0x08	; 8
    6c94:	11 96       	adiw	r26, 0x01	; 1
    6c96:	9c 93       	st	X, r25
    6c98:	11 97       	sbiw	r26, 0x01	; 1
    6c9a:	53 96       	adiw	r26, 0x13	; 19
    6c9c:	1c 92       	st	X, r1
    6c9e:	53 97       	sbiw	r26, 0x13	; 19
    6ca0:	14 96       	adiw	r26, 0x04	; 4
    6ca2:	1c 92       	st	X, r1
    6ca4:	14 97       	sbiw	r26, 0x04	; 4
    6ca6:	e0 ea       	ldi	r30, 0xA0	; 160
    6ca8:	f6 e0       	ldi	r31, 0x06	; 6
    6caa:	90 ec       	ldi	r25, 0xC0	; 192
    6cac:	90 8b       	std	Z+16, r25	; 0x10
    6cae:	20 e8       	ldi	r18, 0x80	; 128
    6cb0:	21 8b       	std	Z+17, r18	; 0x11
    6cb2:	22 8b       	std	Z+18, r18	; 0x12
    6cb4:	23 8b       	std	Z+19, r18	; 0x13
    6cb6:	94 8b       	std	Z+20, r25	; 0x14
    6cb8:	95 8b       	std	Z+21, r25	; 0x15
    6cba:	96 8b       	std	Z+22, r25	; 0x16
    6cbc:	97 8b       	std	Z+23, r25	; 0x17
    6cbe:	14 82       	std	Z+4, r1	; 0x04
    6cc0:	81 83       	std	Z+1, r24	; 0x01
    6cc2:	e0 e6       	ldi	r30, 0x60	; 96
    6cc4:	f6 e0       	ldi	r31, 0x06	; 6
    6cc6:	81 e1       	ldi	r24, 0x11	; 17
    6cc8:	81 83       	std	Z+1, r24	; 0x01
    6cca:	90 8b       	std	Z+16, r25	; 0x10
    6ccc:	94 8b       	std	Z+20, r25	; 0x14
    6cce:	15 8a       	std	Z+21, r1	; 0x15
    6cd0:	14 82       	std	Z+4, r1	; 0x04
    6cd2:	87 e0       	ldi	r24, 0x07	; 7
    6cd4:	11 96       	adiw	r26, 0x01	; 1
    6cd6:	8c 93       	st	X, r24
    6cd8:	11 97       	sbiw	r26, 0x01	; 1
    6cda:	50 96       	adiw	r26, 0x10	; 16
    6cdc:	2c 93       	st	X, r18
    6cde:	50 97       	sbiw	r26, 0x10	; 16
    6ce0:	51 96       	adiw	r26, 0x11	; 17
    6ce2:	2c 93       	st	X, r18
    6ce4:	51 97       	sbiw	r26, 0x11	; 17
    6ce6:	52 96       	adiw	r26, 0x12	; 18
    6ce8:	2c 93       	st	X, r18
    6cea:	52 97       	sbiw	r26, 0x12	; 18
    6cec:	14 96       	adiw	r26, 0x04	; 4
    6cee:	1c 92       	st	X, r1
    6cf0:	e0 ea       	ldi	r30, 0xA0	; 160
    6cf2:	f0 e0       	ldi	r31, 0x00	; 0
    6cf4:	82 81       	ldd	r24, Z+2	; 0x02
    6cf6:	81 60       	ori	r24, 0x01	; 1
    6cf8:	82 83       	std	Z+2, r24	; 0x02
    6cfa:	82 81       	ldd	r24, Z+2	; 0x02
    6cfc:	82 60       	ori	r24, 0x02	; 2
    6cfe:	82 83       	std	Z+2, r24	; 0x02
    6d00:	82 81       	ldd	r24, Z+2	; 0x02
    6d02:	84 60       	ori	r24, 0x04	; 4
    6d04:	82 83       	std	Z+2, r24	; 0x02
    6d06:	fe 01       	movw	r30, r28
    6d08:	9e 01       	movw	r18, r28
    6d0a:	28 5f       	subi	r18, 0xF8	; 248
    6d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d0e:	91 e0       	ldi	r25, 0x01	; 1
    6d10:	91 93       	st	Z+, r25
    6d12:	e2 17       	cp	r30, r18
    6d14:	f3 07       	cpc	r31, r19
    6d16:	e1 f7       	brne	.-8      	; 0x6d10 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    6d18:	83 e0       	ldi	r24, 0x03	; 3
    6d1a:	88 87       	std	Y+8, r24	; 0x08
    6d1c:	e0 e4       	ldi	r30, 0x40	; 64
    6d1e:	f6 e0       	ldi	r31, 0x06	; 6
    6d20:	81 e0       	ldi	r24, 0x01	; 1
    6d22:	82 87       	std	Z+10, r24	; 0x0a
    6d24:	81 87       	std	Z+9, r24	; 0x09
    6d26:	e0 ea       	ldi	r30, 0xA0	; 160
    6d28:	f6 e0       	ldi	r31, 0x06	; 6
    6d2a:	85 83       	std	Z+5, r24	; 0x05
    6d2c:	82 e0       	ldi	r24, 0x02	; 2
    6d2e:	85 83       	std	Z+5, r24	; 0x05
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	08 95       	ret

00006d36 <_ZN11CLaserBoard15InitializeClockEv>:
    6d36:	e0 e5       	ldi	r30, 0x50	; 80
    6d38:	f0 e0       	ldi	r31, 0x00	; 0
    6d3a:	8b ec       	ldi	r24, 0xCB	; 203
    6d3c:	82 83       	std	Z+2, r24	; 0x02
    6d3e:	80 81       	ld	r24, Z
    6d40:	88 60       	ori	r24, 0x08	; 8
    6d42:	80 83       	st	Z, r24
    6d44:	81 81       	ldd	r24, Z+1	; 0x01
    6d46:	83 ff       	sbrs	r24, 3
    6d48:	fd cf       	rjmp	.-6      	; 0x6d44 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    6d4a:	e0 e5       	ldi	r30, 0x50	; 80
    6d4c:	f0 e0       	ldi	r31, 0x00	; 0
    6d4e:	85 81       	ldd	r24, Z+5	; 0x05
    6d50:	98 ed       	ldi	r25, 0xD8	; 216
    6d52:	94 bf       	out	0x34, r25	; 52
    6d54:	84 ec       	ldi	r24, 0xC4	; 196
    6d56:	85 83       	std	Z+5, r24	; 0x05
    6d58:	80 81       	ld	r24, Z
    6d5a:	80 61       	ori	r24, 0x10	; 16
    6d5c:	80 83       	st	Z, r24
    6d5e:	e0 e4       	ldi	r30, 0x40	; 64
    6d60:	f0 e0       	ldi	r31, 0x00	; 0
    6d62:	81 81       	ldd	r24, Z+1	; 0x01
    6d64:	94 bf       	out	0x34, r25	; 52
    6d66:	11 82       	std	Z+1, r1	; 0x01
    6d68:	e0 e5       	ldi	r30, 0x50	; 80
    6d6a:	f0 e0       	ldi	r31, 0x00	; 0
    6d6c:	81 81       	ldd	r24, Z+1	; 0x01
    6d6e:	84 ff       	sbrs	r24, 4
    6d70:	fd cf       	rjmp	.-6      	; 0x6d6c <_ZN11CLaserBoard15InitializeClockEv+0x36>
    6d72:	e0 e4       	ldi	r30, 0x40	; 64
    6d74:	f0 e0       	ldi	r31, 0x00	; 0
    6d76:	80 81       	ld	r24, Z
    6d78:	88 7f       	andi	r24, 0xF8	; 248
    6d7a:	84 60       	ori	r24, 0x04	; 4
    6d7c:	98 ed       	ldi	r25, 0xD8	; 216
    6d7e:	94 bf       	out	0x34, r25	; 52
    6d80:	80 83       	st	Z, r24
    6d82:	a0 e5       	ldi	r26, 0x50	; 80
    6d84:	b0 e0       	ldi	r27, 0x00	; 0
    6d86:	8c 91       	ld	r24, X
    6d88:	88 7f       	andi	r24, 0xF8	; 248
    6d8a:	8c 93       	st	X, r24
    6d8c:	82 81       	ldd	r24, Z+2	; 0x02
    6d8e:	94 bf       	out	0x34, r25	; 52
    6d90:	81 e0       	ldi	r24, 0x01	; 1
    6d92:	82 83       	std	Z+2, r24	; 0x02
    6d94:	e0 eb       	ldi	r30, 0xB0	; 176
    6d96:	f0 e0       	ldi	r31, 0x00	; 0
    6d98:	84 81       	ldd	r24, Z+4	; 0x04
    6d9a:	8c 7f       	andi	r24, 0xFC	; 252
    6d9c:	84 83       	std	Z+4, r24	; 0x04
    6d9e:	08 95       	ret

00006da0 <_ZN11CLaserBoard5PWMOnEv>:
    6da0:	84 e0       	ldi	r24, 0x04	; 4
    6da2:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    6da6:	08 95       	ret

00006da8 <_ZN11CLaserBoard6PWMOffEv>:
    6da8:	84 e0       	ldi	r24, 0x04	; 4
    6daa:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    6dae:	08 95       	ret

00006db0 <_ZN11CLaserBoard5REDOnEv>:
    6db0:	82 e0       	ldi	r24, 0x02	; 2
    6db2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    6db6:	08 95       	ret

00006db8 <_ZN11CLaserBoard5GRNOnEv>:
    6db8:	84 e0       	ldi	r24, 0x04	; 4
    6dba:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    6dbe:	08 95       	ret

00006dc0 <_ZN11CLaserBoard5BLUOnEv>:
    6dc0:	88 e0       	ldi	r24, 0x08	; 8
    6dc2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    6dc6:	08 95       	ret

00006dc8 <_ZN11CLaserBoard8Relay1OnEv>:
    6dc8:	81 e0       	ldi	r24, 0x01	; 1
    6dca:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    6dce:	08 95       	ret

00006dd0 <_ZN11CLaserBoard8Relay2OnEv>:
    6dd0:	80 e1       	ldi	r24, 0x10	; 16
    6dd2:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    6dd6:	08 95       	ret

00006dd8 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    6dd8:	80 e1       	ldi	r24, 0x10	; 16
    6dda:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    6dde:	08 95       	ret

00006de0 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    6de0:	82 e0       	ldi	r24, 0x02	; 2
    6de2:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    6de6:	08 95       	ret

00006de8 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    6de8:	82 e0       	ldi	r24, 0x02	; 2
    6dea:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    6dee:	08 95       	ret

00006df0 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    6df0:	f8 94       	cli
    6df2:	84 e6       	ldi	r24, 0x64	; 100
    6df4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    6df6:	e0 e8       	ldi	r30, 0x80	; 128
    6df8:	f6 e0       	ldi	r31, 0x06	; 6
    6dfa:	28 e0       	ldi	r18, 0x08	; 8
    6dfc:	25 83       	std	Z+5, r18	; 0x05
    6dfe:	af e9       	ldi	r26, 0x9F	; 159
    6e00:	bf e0       	ldi	r27, 0x0F	; 15
    6e02:	11 97       	sbiw	r26, 0x01	; 1
    6e04:	f1 f7       	brne	.-4      	; 0x6e02 <_ZN11CLaserBoard4BeepEv+0x12>
    6e06:	00 c0       	rjmp	.+0      	; 0x6e08 <_ZN11CLaserBoard4BeepEv+0x18>
    6e08:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    6e0a:	26 83       	std	Z+6, r18	; 0x06
    6e0c:	af e9       	ldi	r26, 0x9F	; 159
    6e0e:	bf e0       	ldi	r27, 0x0F	; 15
    6e10:	11 97       	sbiw	r26, 0x01	; 1
    6e12:	f1 f7       	brne	.-4      	; 0x6e10 <_ZN11CLaserBoard4BeepEv+0x20>
    6e14:	00 c0       	rjmp	.+0      	; 0x6e16 <_ZN11CLaserBoard4BeepEv+0x26>
    6e16:	00 00       	nop
    6e18:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    6e1a:	81 f7       	brne	.-32     	; 0x6dfc <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    6e1c:	78 94       	sei
    6e1e:	08 95       	ret

00006e20 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    6e20:	f8 94       	cli
    6e22:	45 e0       	ldi	r20, 0x05	; 5
    6e24:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    6e26:	64 e6       	ldi	r22, 0x64	; 100
    6e28:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    6e2a:	e0 e8       	ldi	r30, 0x80	; 128
    6e2c:	f6 e0       	ldi	r31, 0x06	; 6
    6e2e:	28 e0       	ldi	r18, 0x08	; 8
    6e30:	1c c0       	rjmp	.+56     	; 0x6e6a <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    6e32:	25 83       	std	Z+5, r18	; 0x05
    6e34:	af e9       	ldi	r26, 0x9F	; 159
    6e36:	bf e0       	ldi	r27, 0x0F	; 15
    6e38:	11 97       	sbiw	r26, 0x01	; 1
    6e3a:	f1 f7       	brne	.-4      	; 0x6e38 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    6e3c:	00 c0       	rjmp	.+0      	; 0x6e3e <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    6e3e:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    6e40:	26 83       	std	Z+6, r18	; 0x06
    6e42:	af e9       	ldi	r26, 0x9F	; 159
    6e44:	bf e0       	ldi	r27, 0x0F	; 15
    6e46:	11 97       	sbiw	r26, 0x01	; 1
    6e48:	f1 f7       	brne	.-4      	; 0x6e46 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    6e4a:	00 c0       	rjmp	.+0      	; 0x6e4c <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    6e4c:	00 00       	nop
    6e4e:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    6e50:	81 f7       	brne	.-32     	; 0x6e32 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6e52:	bf ef       	ldi	r27, 0xFF	; 255
    6e54:	73 ec       	ldi	r23, 0xC3	; 195
    6e56:	89 e0       	ldi	r24, 0x09	; 9
    6e58:	b1 50       	subi	r27, 0x01	; 1
    6e5a:	70 40       	sbci	r23, 0x00	; 0
    6e5c:	80 40       	sbci	r24, 0x00	; 0
    6e5e:	e1 f7       	brne	.-8      	; 0x6e58 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    6e60:	00 c0       	rjmp	.+0      	; 0x6e62 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    6e62:	00 00       	nop
    6e64:	41 50       	subi	r20, 0x01	; 1
    6e66:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    6e68:	19 f0       	breq	.+6      	; 0x6e70 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    6e6a:	86 2f       	mov	r24, r22
    6e6c:	93 2f       	mov	r25, r19
    6e6e:	e1 cf       	rjmp	.-62     	; 0x6e32 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    6e70:	78 94       	sei
    6e72:	08 95       	ret

00006e74 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    6e74:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    6e78:	fc 01       	movw	r30, r24
    6e7a:	21 87       	std	Z+9, r18	; 0x09
    6e7c:	08 95       	ret

00006e7e <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    6e7e:	fc 01       	movw	r30, r24
    6e80:	81 85       	ldd	r24, Z+9	; 0x09
    6e82:	81 70       	andi	r24, 0x01	; 1
    6e84:	08 95       	ret

00006e86 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    6e86:	08 95       	ret

00006e88 <_ZN12CSoundPlayerD1Ev>:
    6e88:	08 95       	ret

00006e8a <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    6e8a:	e0 e0       	ldi	r30, 0x00	; 0
    6e8c:	fa e0       	ldi	r31, 0x0A	; 10
    6e8e:	10 82       	st	Z, r1
    6e90:	87 e8       	ldi	r24, 0x87	; 135
    6e92:	81 83       	std	Z+1, r24	; 0x01
    6e94:	13 82       	std	Z+3, r1	; 0x03
    6e96:	84 e2       	ldi	r24, 0x24	; 36
    6e98:	94 ef       	ldi	r25, 0xF4	; 244
    6e9a:	86 a3       	std	Z+38, r24	; 0x26
    6e9c:	97 a3       	std	Z+39, r25	; 0x27
    6e9e:	82 e1       	ldi	r24, 0x12	; 18
    6ea0:	9a e7       	ldi	r25, 0x7A	; 122
    6ea2:	86 a7       	std	Z+46, r24	; 0x2e
    6ea4:	97 a7       	std	Z+47, r25	; 0x2f
    6ea6:	16 82       	std	Z+6, r1	; 0x06
    6ea8:	17 82       	std	Z+7, r1	; 0x07
    6eaa:	08 95       	ret

00006eac <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    6eac:	e0 e4       	ldi	r30, 0x40	; 64
    6eae:	fa e0       	ldi	r31, 0x0A	; 10
    6eb0:	10 82       	st	Z, r1
    6eb2:	11 82       	std	Z+1, r1	; 0x01
    6eb4:	13 82       	std	Z+3, r1	; 0x03
    6eb6:	84 e2       	ldi	r24, 0x24	; 36
    6eb8:	94 ef       	ldi	r25, 0xF4	; 244
    6eba:	86 a3       	std	Z+38, r24	; 0x26
    6ebc:	97 a3       	std	Z+39, r25	; 0x27
    6ebe:	16 82       	std	Z+6, r1	; 0x06
    6ec0:	17 82       	std	Z+7, r1	; 0x07
    6ec2:	08 95       	ret

00006ec4 <_ZN12CSoundPlayer10SoundStartEjjh>:
    6ec4:	0f 93       	push	r16
    6ec6:	1f 93       	push	r17
    6ec8:	cf 93       	push	r28
    6eca:	8a 01       	movw	r16, r20
    6ecc:	c2 2f       	mov	r28, r18
    6ece:	9b 01       	movw	r18, r22
    6ed0:	40 e0       	ldi	r20, 0x00	; 0
    6ed2:	50 e0       	ldi	r21, 0x00	; 0
    6ed4:	64 e2       	ldi	r22, 0x24	; 36
    6ed6:	74 ef       	ldi	r23, 0xF4	; 244
    6ed8:	80 e0       	ldi	r24, 0x00	; 0
    6eda:	90 e0       	ldi	r25, 0x00	; 0
    6edc:	0e 94 17 3d 	call	0x7a2e	; 0x7a2e <__divmodsi4>
    6ee0:	b8 01       	movw	r22, r16
    6ee2:	76 95       	lsr	r23
    6ee4:	67 95       	ror	r22
    6ee6:	ee e3       	ldi	r30, 0x3E	; 62
    6ee8:	e0 9f       	mul	r30, r16
    6eea:	c0 01       	movw	r24, r0
    6eec:	e1 9f       	mul	r30, r17
    6eee:	90 0d       	add	r25, r0
    6ef0:	11 24       	eor	r1, r1
    6ef2:	86 0f       	add	r24, r22
    6ef4:	97 1f       	adc	r25, r23
    6ef6:	cf 5f       	subi	r28, 0xFF	; 255
    6ef8:	b9 01       	movw	r22, r18
    6efa:	02 c0       	rjmp	.+4      	; 0x6f00 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    6efc:	76 95       	lsr	r23
    6efe:	67 95       	ror	r22
    6f00:	ca 95       	dec	r28
    6f02:	e2 f7       	brpl	.-8      	; 0x6efc <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    6f04:	e0 e0       	ldi	r30, 0x00	; 0
    6f06:	fa e0       	ldi	r31, 0x0A	; 10
    6f08:	66 a7       	std	Z+46, r22	; 0x2e
    6f0a:	77 a7       	std	Z+47, r23	; 0x2f
    6f0c:	26 a3       	std	Z+38, r18	; 0x26
    6f0e:	37 a3       	std	Z+39, r19	; 0x27
    6f10:	a0 e4       	ldi	r26, 0x40	; 64
    6f12:	ba e0       	ldi	r27, 0x0A	; 10
    6f14:	96 96       	adiw	r26, 0x26	; 38
    6f16:	8d 93       	st	X+, r24
    6f18:	9c 93       	st	X, r25
    6f1a:	97 97       	sbiw	r26, 0x27	; 39
    6f1c:	86 e0       	ldi	r24, 0x06	; 6
    6f1e:	80 83       	st	Z, r24
    6f20:	87 e0       	ldi	r24, 0x07	; 7
    6f22:	8c 93       	st	X, r24
    6f24:	cf 91       	pop	r28
    6f26:	1f 91       	pop	r17
    6f28:	0f 91       	pop	r16
    6f2a:	08 95       	ret

00006f2c <_ZN12CSoundPlayer9SoundStopEv>:
    6f2c:	e0 e4       	ldi	r30, 0x40	; 64
    6f2e:	fa e0       	ldi	r31, 0x0A	; 10
    6f30:	84 85       	ldd	r24, Z+12	; 0x0c
    6f32:	80 ff       	sbrs	r24, 0
    6f34:	fd cf       	rjmp	.-6      	; 0x6f30 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    6f36:	e0 e4       	ldi	r30, 0x40	; 64
    6f38:	fa e0       	ldi	r31, 0x0A	; 10
    6f3a:	84 85       	ldd	r24, Z+12	; 0x0c
    6f3c:	81 70       	andi	r24, 0x01	; 1
    6f3e:	84 87       	std	Z+12, r24	; 0x0c
    6f40:	a0 e0       	ldi	r26, 0x00	; 0
    6f42:	ba e0       	ldi	r27, 0x0A	; 10
    6f44:	1c 92       	st	X, r1
    6f46:	10 82       	st	Z, r1
    6f48:	10 a2       	std	Z+32, r1	; 0x20
    6f4a:	11 a2       	std	Z+33, r1	; 0x21
    6f4c:	90 96       	adiw	r26, 0x20	; 32
    6f4e:	1d 92       	st	X+, r1
    6f50:	1c 92       	st	X, r1
    6f52:	91 97       	sbiw	r26, 0x21	; 33
    6f54:	2f ef       	ldi	r18, 0xFF	; 255
    6f56:	83 ef       	ldi	r24, 0xF3	; 243
    6f58:	91 e0       	ldi	r25, 0x01	; 1
    6f5a:	21 50       	subi	r18, 0x01	; 1
    6f5c:	80 40       	sbci	r24, 0x00	; 0
    6f5e:	90 40       	sbci	r25, 0x00	; 0
    6f60:	e1 f7       	brne	.-8      	; 0x6f5a <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    6f62:	00 c0       	rjmp	.+0      	; 0x6f64 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    6f64:	00 00       	nop
    6f66:	08 95       	ret

00006f68 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    6f68:	cf 93       	push	r28
    6f6a:	df 93       	push	r29
    6f6c:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    6f6e:	0e 94 45 37 	call	0x6e8a	; 0x6e8a <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    6f72:	ce 01       	movw	r24, r28
    6f74:	0e 94 56 37 	call	0x6eac	; 0x6eac <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    6f78:	df 91       	pop	r29
    6f7a:	cf 91       	pop	r28
    6f7c:	08 95       	ret

00006f7e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    6f7e:	fc 01       	movw	r30, r24
    6f80:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6f82:	e0 e0       	ldi	r30, 0x00	; 0
    6f84:	f8 e0       	ldi	r31, 0x08	; 8
    6f86:	80 81       	ld	r24, Z
    6f88:	80 7f       	andi	r24, 0xF0	; 240
    6f8a:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    6f8c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    6f8e:	10 a2       	std	Z+32, r1	; 0x20
    6f90:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    6f92:	10 a6       	std	Z+40, r1	; 0x28
    6f94:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    6f96:	12 a6       	std	Z+42, r1	; 0x2a
    6f98:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    6f9a:	14 a6       	std	Z+44, r1	; 0x2c
    6f9c:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    6f9e:	16 a6       	std	Z+46, r1	; 0x2e
    6fa0:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    6fa2:	16 a2       	std	Z+38, r1	; 0x26
    6fa4:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    6fa6:	81 81       	ldd	r24, Z+1	; 0x01
    6fa8:	88 7f       	andi	r24, 0xF8	; 248
    6faa:	68 2b       	or	r22, r24
    6fac:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    6fae:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    6fb0:	17 82       	std	Z+7, r1	; 0x07
    6fb2:	08 95       	ret

00006fb4 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    6fb4:	e0 e0       	ldi	r30, 0x00	; 0
    6fb6:	f8 e0       	ldi	r31, 0x08	; 8
    6fb8:	66 a3       	std	Z+38, r22	; 0x26
    6fba:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    6fbc:	20 81       	ld	r18, Z
    6fbe:	20 7f       	andi	r18, 0xF0	; 240
    6fc0:	dc 01       	movw	r26, r24
    6fc2:	12 96       	adiw	r26, 0x02	; 2
    6fc4:	9c 91       	ld	r25, X
    6fc6:	82 2f       	mov	r24, r18
    6fc8:	89 2b       	or	r24, r25
    6fca:	80 83       	st	Z, r24
    6fcc:	08 95       	ret

00006fce <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6fce:	e0 e0       	ldi	r30, 0x00	; 0
    6fd0:	f8 e0       	ldi	r31, 0x08	; 8
    6fd2:	80 81       	ld	r24, Z
    6fd4:	80 7f       	andi	r24, 0xF0	; 240
    6fd6:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    6fd8:	10 a2       	std	Z+32, r1	; 0x20
    6fda:	11 a2       	std	Z+33, r1	; 0x21
    6fdc:	08 95       	ret

00006fde <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    6fde:	e0 e0       	ldi	r30, 0x00	; 0
    6fe0:	f8 e0       	ldi	r31, 0x08	; 8
    6fe2:	81 81       	ldd	r24, Z+1	; 0x01
    6fe4:	8f 70       	andi	r24, 0x0F	; 15
    6fe6:	68 2b       	or	r22, r24
    6fe8:	61 83       	std	Z+1, r22	; 0x01
    6fea:	08 95       	ret

00006fec <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    6fec:	e0 e0       	ldi	r30, 0x00	; 0
    6fee:	f8 e0       	ldi	r31, 0x08	; 8
    6ff0:	81 81       	ldd	r24, Z+1	; 0x01
    6ff2:	60 95       	com	r22
    6ff4:	68 23       	and	r22, r24
    6ff6:	61 83       	std	Z+1, r22	; 0x01
    6ff8:	08 95       	ret

00006ffa <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    6ffa:	60 93 26 08 	sts	0x0826, r22	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    6ffe:	70 93 27 08 	sts	0x0827, r23	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    7002:	08 95       	ret

00007004 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    7004:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    7008:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    700c:	08 95       	ret

0000700e <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    700e:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    7012:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    7016:	08 95       	ret

00007018 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    7018:	60 93 2c 08 	sts	0x082C, r22	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
    701c:	70 93 2d 08 	sts	0x082D, r23	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
    7020:	08 95       	ret

00007022 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    7022:	60 93 2e 08 	sts	0x082E, r22	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
    7026:	70 93 2f 08 	sts	0x082F, r23	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
    702a:	08 95       	ret

0000702c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    702c:	61 15       	cp	r22, r1
    702e:	71 05       	cpc	r23, r1
    7030:	29 f0       	breq	.+10     	; 0x703c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    7032:	e0 e0       	ldi	r30, 0x00	; 0
    7034:	f8 e0       	ldi	r31, 0x08	; 8
    7036:	86 81       	ldd	r24, Z+6	; 0x06
    7038:	28 2b       	or	r18, r24
    703a:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    703c:	60 93 e2 22 	sts	0x22E2, r22	; 0x8022e2 <InterruptFuncTable+0x1c>
    7040:	70 93 e3 22 	sts	0x22E3, r23	; 0x8022e3 <InterruptFuncTable+0x1d>
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    7044:	40 93 d8 23 	sts	0x23D8, r20	; 0x8023d8 <InterruptSenderTable+0x1c>
    7048:	50 93 d9 23 	sts	0x23D9, r21	; 0x8023d9 <InterruptSenderTable+0x1d>
    704c:	08 95       	ret

0000704e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    704e:	61 15       	cp	r22, r1
    7050:	71 05       	cpc	r23, r1
    7052:	29 f0       	breq	.+10     	; 0x705e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7054:	e0 e0       	ldi	r30, 0x00	; 0
    7056:	f8 e0       	ldi	r31, 0x08	; 8
    7058:	86 81       	ldd	r24, Z+6	; 0x06
    705a:	28 2b       	or	r18, r24
    705c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    705e:	60 93 e4 22 	sts	0x22E4, r22	; 0x8022e4 <InterruptFuncTable+0x1e>
    7062:	70 93 e5 22 	sts	0x22E5, r23	; 0x8022e5 <InterruptFuncTable+0x1f>
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    7066:	40 93 da 23 	sts	0x23DA, r20	; 0x8023da <InterruptSenderTable+0x1e>
    706a:	50 93 db 23 	sts	0x23DB, r21	; 0x8023db <InterruptSenderTable+0x1f>
    706e:	08 95       	ret

00007070 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7070:	61 15       	cp	r22, r1
    7072:	71 05       	cpc	r23, r1
    7074:	29 f0       	breq	.+10     	; 0x7080 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    7076:	e0 e0       	ldi	r30, 0x00	; 0
    7078:	f8 e0       	ldi	r31, 0x08	; 8
    707a:	87 81       	ldd	r24, Z+7	; 0x07
    707c:	28 2b       	or	r18, r24
    707e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    7080:	60 93 e6 22 	sts	0x22E6, r22	; 0x8022e6 <InterruptFuncTable+0x20>
    7084:	70 93 e7 22 	sts	0x22E7, r23	; 0x8022e7 <InterruptFuncTable+0x21>
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    7088:	40 93 dc 23 	sts	0x23DC, r20	; 0x8023dc <InterruptSenderTable+0x20>
    708c:	50 93 dd 23 	sts	0x23DD, r21	; 0x8023dd <InterruptSenderTable+0x21>
    7090:	08 95       	ret

00007092 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7092:	61 15       	cp	r22, r1
    7094:	71 05       	cpc	r23, r1
    7096:	29 f0       	breq	.+10     	; 0x70a2 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    7098:	e0 e0       	ldi	r30, 0x00	; 0
    709a:	f8 e0       	ldi	r31, 0x08	; 8
    709c:	87 81       	ldd	r24, Z+7	; 0x07
    709e:	28 2b       	or	r18, r24
    70a0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    70a2:	60 93 e8 22 	sts	0x22E8, r22	; 0x8022e8 <InterruptFuncTable+0x22>
    70a6:	70 93 e9 22 	sts	0x22E9, r23	; 0x8022e9 <InterruptFuncTable+0x23>
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    70aa:	40 93 de 23 	sts	0x23DE, r20	; 0x8023de <InterruptSenderTable+0x22>
    70ae:	50 93 df 23 	sts	0x23DF, r21	; 0x8023df <InterruptSenderTable+0x23>
    70b2:	08 95       	ret

000070b4 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    70b4:	61 15       	cp	r22, r1
    70b6:	71 05       	cpc	r23, r1
    70b8:	29 f0       	breq	.+10     	; 0x70c4 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    70ba:	e0 e0       	ldi	r30, 0x00	; 0
    70bc:	f8 e0       	ldi	r31, 0x08	; 8
    70be:	87 81       	ldd	r24, Z+7	; 0x07
    70c0:	28 2b       	or	r18, r24
    70c2:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    70c4:	60 93 ea 22 	sts	0x22EA, r22	; 0x8022ea <InterruptFuncTable+0x24>
    70c8:	70 93 eb 22 	sts	0x22EB, r23	; 0x8022eb <InterruptFuncTable+0x25>
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    70cc:	40 93 e0 23 	sts	0x23E0, r20	; 0x8023e0 <InterruptSenderTable+0x24>
    70d0:	50 93 e1 23 	sts	0x23E1, r21	; 0x8023e1 <InterruptSenderTable+0x25>
    70d4:	08 95       	ret

000070d6 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    70d6:	61 15       	cp	r22, r1
    70d8:	71 05       	cpc	r23, r1
    70da:	29 f0       	breq	.+10     	; 0x70e6 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    70dc:	e0 e0       	ldi	r30, 0x00	; 0
    70de:	f8 e0       	ldi	r31, 0x08	; 8
    70e0:	87 81       	ldd	r24, Z+7	; 0x07
    70e2:	28 2b       	or	r18, r24
    70e4:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    70e6:	60 93 ec 22 	sts	0x22EC, r22	; 0x8022ec <InterruptFuncTable+0x26>
    70ea:	70 93 ed 22 	sts	0x22ED, r23	; 0x8022ed <InterruptFuncTable+0x27>
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    70ee:	40 93 e2 23 	sts	0x23E2, r20	; 0x8023e2 <InterruptSenderTable+0x26>
    70f2:	50 93 e3 23 	sts	0x23E3, r21	; 0x8023e3 <InterruptSenderTable+0x27>
    70f6:	08 95       	ret

000070f8 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    70f8:	cf 93       	push	r28
    70fa:	df 93       	push	r29
    70fc:	ec 01       	movw	r28, r24
    70fe:	0e 94 76 1a 	call	0x34ec	; 0x34ec <_ZN6CTimerC1Ev>
    7102:	8c e1       	ldi	r24, 0x1C	; 28
    7104:	92 e2       	ldi	r25, 0x22	; 34
    7106:	88 83       	st	Y, r24
    7108:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    710a:	df 91       	pop	r29
    710c:	cf 91       	pop	r28
    710e:	08 95       	ret

00007110 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    7110:	2c e1       	ldi	r18, 0x1C	; 28
    7112:	32 e2       	ldi	r19, 0x22	; 34
    7114:	fc 01       	movw	r30, r24
    7116:	20 83       	st	Z, r18
    7118:	31 83       	std	Z+1, r19	; 0x01
    711a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN6CTimerD1Ev>
    711e:	08 95       	ret

00007120 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    7120:	fc 01       	movw	r30, r24
    7122:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7124:	e0 e4       	ldi	r30, 0x40	; 64
    7126:	f8 e0       	ldi	r31, 0x08	; 8
    7128:	80 81       	ld	r24, Z
    712a:	80 7f       	andi	r24, 0xF0	; 240
    712c:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    712e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    7130:	10 a2       	std	Z+32, r1	; 0x20
    7132:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    7134:	10 a6       	std	Z+40, r1	; 0x28
    7136:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    7138:	12 a6       	std	Z+42, r1	; 0x2a
    713a:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    713c:	16 a2       	std	Z+38, r1	; 0x26
    713e:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    7140:	81 81       	ldd	r24, Z+1	; 0x01
    7142:	88 7f       	andi	r24, 0xF8	; 248
    7144:	68 2b       	or	r22, r24
    7146:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7148:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    714a:	17 82       	std	Z+7, r1	; 0x07
    714c:	08 95       	ret

0000714e <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    714e:	e0 e4       	ldi	r30, 0x40	; 64
    7150:	f8 e0       	ldi	r31, 0x08	; 8
    7152:	66 a3       	std	Z+38, r22	; 0x26
    7154:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    7156:	20 81       	ld	r18, Z
    7158:	20 7f       	andi	r18, 0xF0	; 240
    715a:	dc 01       	movw	r26, r24
    715c:	12 96       	adiw	r26, 0x02	; 2
    715e:	9c 91       	ld	r25, X
    7160:	82 2f       	mov	r24, r18
    7162:	89 2b       	or	r24, r25
    7164:	80 83       	st	Z, r24
    7166:	08 95       	ret

00007168 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7168:	e0 e4       	ldi	r30, 0x40	; 64
    716a:	f8 e0       	ldi	r31, 0x08	; 8
    716c:	80 81       	ld	r24, Z
    716e:	80 7f       	andi	r24, 0xF0	; 240
    7170:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    7172:	10 a2       	std	Z+32, r1	; 0x20
    7174:	11 a2       	std	Z+33, r1	; 0x21
    7176:	08 95       	ret

00007178 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    7178:	e0 e4       	ldi	r30, 0x40	; 64
    717a:	f8 e0       	ldi	r31, 0x08	; 8
    717c:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    717e:	80 81       	ld	r24, Z
    7180:	80 7f       	andi	r24, 0xF0	; 240
    7182:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    7184:	10 a2       	std	Z+32, r1	; 0x20
    7186:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    7188:	90 83       	st	Z, r25
    718a:	08 95       	ret

0000718c <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    718c:	e0 e4       	ldi	r30, 0x40	; 64
    718e:	f8 e0       	ldi	r31, 0x08	; 8
    7190:	81 81       	ldd	r24, Z+1	; 0x01
    7192:	8f 70       	andi	r24, 0x0F	; 15
    7194:	68 2b       	or	r22, r24
    7196:	61 83       	std	Z+1, r22	; 0x01
    7198:	08 95       	ret

0000719a <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    719a:	e0 e4       	ldi	r30, 0x40	; 64
    719c:	f8 e0       	ldi	r31, 0x08	; 8
    719e:	81 81       	ldd	r24, Z+1	; 0x01
    71a0:	60 95       	com	r22
    71a2:	68 23       	and	r22, r24
    71a4:	61 83       	std	Z+1, r22	; 0x01
    71a6:	08 95       	ret

000071a8 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    71a8:	60 93 66 08 	sts	0x0866, r22	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    71ac:	70 93 67 08 	sts	0x0867, r23	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    71b0:	08 95       	ret

000071b2 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    71b2:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    71b6:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    71ba:	08 95       	ret

000071bc <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    71bc:	60 93 6a 08 	sts	0x086A, r22	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    71c0:	70 93 6b 08 	sts	0x086B, r23	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    71c4:	08 95       	ret

000071c6 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    71c6:	61 15       	cp	r22, r1
    71c8:	71 05       	cpc	r23, r1
    71ca:	31 f0       	breq	.+12     	; 0x71d8 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    71cc:	e0 e4       	ldi	r30, 0x40	; 64
    71ce:	f8 e0       	ldi	r31, 0x08	; 8
    71d0:	86 81       	ldd	r24, Z+6	; 0x06
    71d2:	83 70       	andi	r24, 0x03	; 3
    71d4:	28 2b       	or	r18, r24
    71d6:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    71d8:	60 93 ee 22 	sts	0x22EE, r22	; 0x8022ee <InterruptFuncTable+0x28>
    71dc:	70 93 ef 22 	sts	0x22EF, r23	; 0x8022ef <InterruptFuncTable+0x29>
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    71e0:	40 93 e4 23 	sts	0x23E4, r20	; 0x8023e4 <InterruptSenderTable+0x28>
    71e4:	50 93 e5 23 	sts	0x23E5, r21	; 0x8023e5 <InterruptSenderTable+0x29>
    71e8:	08 95       	ret

000071ea <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    71ea:	61 15       	cp	r22, r1
    71ec:	71 05       	cpc	r23, r1
    71ee:	31 f0       	breq	.+12     	; 0x71fc <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    71f0:	e0 e4       	ldi	r30, 0x40	; 64
    71f2:	f8 e0       	ldi	r31, 0x08	; 8
    71f4:	86 81       	ldd	r24, Z+6	; 0x06
    71f6:	8c 70       	andi	r24, 0x0C	; 12
    71f8:	28 2b       	or	r18, r24
    71fa:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    71fc:	60 93 f0 22 	sts	0x22F0, r22	; 0x8022f0 <InterruptFuncTable+0x2a>
    7200:	70 93 f1 22 	sts	0x22F1, r23	; 0x8022f1 <InterruptFuncTable+0x2b>
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    7204:	40 93 e6 23 	sts	0x23E6, r20	; 0x8023e6 <InterruptSenderTable+0x2a>
    7208:	50 93 e7 23 	sts	0x23E7, r21	; 0x8023e7 <InterruptSenderTable+0x2b>
    720c:	08 95       	ret

0000720e <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    720e:	61 15       	cp	r22, r1
    7210:	71 05       	cpc	r23, r1
    7212:	31 f0       	breq	.+12     	; 0x7220 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    7214:	e0 e4       	ldi	r30, 0x40	; 64
    7216:	f8 e0       	ldi	r31, 0x08	; 8
    7218:	87 81       	ldd	r24, Z+7	; 0x07
    721a:	83 70       	andi	r24, 0x03	; 3
    721c:	28 2b       	or	r18, r24
    721e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    7220:	60 93 f2 22 	sts	0x22F2, r22	; 0x8022f2 <InterruptFuncTable+0x2c>
    7224:	70 93 f3 22 	sts	0x22F3, r23	; 0x8022f3 <InterruptFuncTable+0x2d>
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    7228:	40 93 e8 23 	sts	0x23E8, r20	; 0x8023e8 <InterruptSenderTable+0x2c>
    722c:	50 93 e9 23 	sts	0x23E9, r21	; 0x8023e9 <InterruptSenderTable+0x2d>
    7230:	08 95       	ret

00007232 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7232:	61 15       	cp	r22, r1
    7234:	71 05       	cpc	r23, r1
    7236:	31 f0       	breq	.+12     	; 0x7244 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    7238:	e0 e4       	ldi	r30, 0x40	; 64
    723a:	f8 e0       	ldi	r31, 0x08	; 8
    723c:	87 81       	ldd	r24, Z+7	; 0x07
    723e:	8c 70       	andi	r24, 0x0C	; 12
    7240:	28 2b       	or	r18, r24
    7242:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    7244:	60 93 f4 22 	sts	0x22F4, r22	; 0x8022f4 <InterruptFuncTable+0x2e>
    7248:	70 93 f5 22 	sts	0x22F5, r23	; 0x8022f5 <InterruptFuncTable+0x2f>
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    724c:	40 93 ea 23 	sts	0x23EA, r20	; 0x8023ea <InterruptSenderTable+0x2e>
    7250:	50 93 eb 23 	sts	0x23EB, r21	; 0x8023eb <InterruptSenderTable+0x2f>
    7254:	08 95       	ret

00007256 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    7256:	cf 93       	push	r28
    7258:	df 93       	push	r29
    725a:	ec 01       	movw	r28, r24
    725c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN7CTimer1C1Ev>
    7260:	80 e4       	ldi	r24, 0x40	; 64
    7262:	92 e2       	ldi	r25, 0x22	; 34
    7264:	88 83       	st	Y, r24
    7266:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    7268:	df 91       	pop	r29
    726a:	cf 91       	pop	r28
    726c:	08 95       	ret

0000726e <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    726e:	20 e4       	ldi	r18, 0x40	; 64
    7270:	32 e2       	ldi	r19, 0x22	; 34
    7272:	fc 01       	movw	r30, r24
    7274:	20 83       	st	Z, r18
    7276:	31 83       	std	Z+1, r19	; 0x01
    7278:	0e 94 83 1a 	call	0x3506	; 0x3506 <_ZN7CTimer1D1Ev>
    727c:	08 95       	ret

0000727e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    727e:	fc 01       	movw	r30, r24
    7280:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7282:	e0 e0       	ldi	r30, 0x00	; 0
    7284:	f9 e0       	ldi	r31, 0x09	; 9
    7286:	80 81       	ld	r24, Z
    7288:	80 7f       	andi	r24, 0xF0	; 240
    728a:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    728c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    728e:	10 a2       	std	Z+32, r1	; 0x20
    7290:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    7292:	10 a6       	std	Z+40, r1	; 0x28
    7294:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    7296:	12 a6       	std	Z+42, r1	; 0x2a
    7298:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    729a:	14 a6       	std	Z+44, r1	; 0x2c
    729c:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    729e:	16 a6       	std	Z+46, r1	; 0x2e
    72a0:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    72a2:	16 a2       	std	Z+38, r1	; 0x26
    72a4:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    72a6:	81 81       	ldd	r24, Z+1	; 0x01
    72a8:	88 7f       	andi	r24, 0xF8	; 248
    72aa:	68 2b       	or	r22, r24
    72ac:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    72ae:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    72b0:	17 82       	std	Z+7, r1	; 0x07
    72b2:	08 95       	ret

000072b4 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    72b4:	e0 e0       	ldi	r30, 0x00	; 0
    72b6:	f9 e0       	ldi	r31, 0x09	; 9
    72b8:	66 a3       	std	Z+38, r22	; 0x26
    72ba:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    72bc:	20 81       	ld	r18, Z
    72be:	20 7f       	andi	r18, 0xF0	; 240
    72c0:	dc 01       	movw	r26, r24
    72c2:	12 96       	adiw	r26, 0x02	; 2
    72c4:	9c 91       	ld	r25, X
    72c6:	82 2f       	mov	r24, r18
    72c8:	89 2b       	or	r24, r25
    72ca:	80 83       	st	Z, r24
    72cc:	08 95       	ret

000072ce <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    72ce:	e0 e0       	ldi	r30, 0x00	; 0
    72d0:	f9 e0       	ldi	r31, 0x09	; 9
    72d2:	80 81       	ld	r24, Z
    72d4:	80 7f       	andi	r24, 0xF0	; 240
    72d6:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    72d8:	10 a2       	std	Z+32, r1	; 0x20
    72da:	11 a2       	std	Z+33, r1	; 0x21
    72dc:	08 95       	ret

000072de <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    72de:	e0 e0       	ldi	r30, 0x00	; 0
    72e0:	f9 e0       	ldi	r31, 0x09	; 9
    72e2:	81 81       	ldd	r24, Z+1	; 0x01
    72e4:	8f 70       	andi	r24, 0x0F	; 15
    72e6:	68 2b       	or	r22, r24
    72e8:	61 83       	std	Z+1, r22	; 0x01
    72ea:	08 95       	ret

000072ec <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    72ec:	e0 e0       	ldi	r30, 0x00	; 0
    72ee:	f9 e0       	ldi	r31, 0x09	; 9
    72f0:	81 81       	ldd	r24, Z+1	; 0x01
    72f2:	60 95       	com	r22
    72f4:	68 23       	and	r22, r24
    72f6:	61 83       	std	Z+1, r22	; 0x01
    72f8:	08 95       	ret

000072fa <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    72fa:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    72fe:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    7302:	08 95       	ret

00007304 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    7304:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    7308:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    730c:	08 95       	ret

0000730e <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    730e:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    7312:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    7316:	08 95       	ret

00007318 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    7318:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
    731c:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
    7320:	08 95       	ret

00007322 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    7322:	60 93 2e 09 	sts	0x092E, r22	; 0x80092e <__TEXT_REGION_LENGTH__+0x70092e>
    7326:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <__TEXT_REGION_LENGTH__+0x70092f>
    732a:	08 95       	ret

0000732c <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    732c:	61 15       	cp	r22, r1
    732e:	71 05       	cpc	r23, r1
    7330:	29 f0       	breq	.+10     	; 0x733c <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    7332:	e0 e0       	ldi	r30, 0x00	; 0
    7334:	f9 e0       	ldi	r31, 0x09	; 9
    7336:	86 81       	ldd	r24, Z+6	; 0x06
    7338:	28 2b       	or	r18, r24
    733a:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    733c:	60 93 60 23 	sts	0x2360, r22	; 0x802360 <InterruptFuncTable+0x9a>
    7340:	70 93 61 23 	sts	0x2361, r23	; 0x802361 <InterruptFuncTable+0x9b>
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    7344:	40 93 56 24 	sts	0x2456, r20	; 0x802456 <InterruptSenderTable+0x9a>
    7348:	50 93 57 24 	sts	0x2457, r21	; 0x802457 <InterruptSenderTable+0x9b>
    734c:	08 95       	ret

0000734e <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    734e:	61 15       	cp	r22, r1
    7350:	71 05       	cpc	r23, r1
    7352:	29 f0       	breq	.+10     	; 0x735e <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7354:	e0 e0       	ldi	r30, 0x00	; 0
    7356:	f9 e0       	ldi	r31, 0x09	; 9
    7358:	86 81       	ldd	r24, Z+6	; 0x06
    735a:	28 2b       	or	r18, r24
    735c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    735e:	60 93 62 23 	sts	0x2362, r22	; 0x802362 <InterruptFuncTable+0x9c>
    7362:	70 93 63 23 	sts	0x2363, r23	; 0x802363 <InterruptFuncTable+0x9d>
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    7366:	40 93 58 24 	sts	0x2458, r20	; 0x802458 <InterruptSenderTable+0x9c>
    736a:	50 93 59 24 	sts	0x2459, r21	; 0x802459 <InterruptSenderTable+0x9d>
    736e:	08 95       	ret

00007370 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7370:	61 15       	cp	r22, r1
    7372:	71 05       	cpc	r23, r1
    7374:	29 f0       	breq	.+10     	; 0x7380 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    7376:	e0 e0       	ldi	r30, 0x00	; 0
    7378:	f9 e0       	ldi	r31, 0x09	; 9
    737a:	87 81       	ldd	r24, Z+7	; 0x07
    737c:	28 2b       	or	r18, r24
    737e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    7380:	60 93 64 23 	sts	0x2364, r22	; 0x802364 <InterruptFuncTable+0x9e>
    7384:	70 93 65 23 	sts	0x2365, r23	; 0x802365 <InterruptFuncTable+0x9f>
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    7388:	40 93 5a 24 	sts	0x245A, r20	; 0x80245a <InterruptSenderTable+0x9e>
    738c:	50 93 5b 24 	sts	0x245B, r21	; 0x80245b <InterruptSenderTable+0x9f>
    7390:	08 95       	ret

00007392 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7392:	61 15       	cp	r22, r1
    7394:	71 05       	cpc	r23, r1
    7396:	29 f0       	breq	.+10     	; 0x73a2 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    7398:	e0 e0       	ldi	r30, 0x00	; 0
    739a:	f9 e0       	ldi	r31, 0x09	; 9
    739c:	87 81       	ldd	r24, Z+7	; 0x07
    739e:	28 2b       	or	r18, r24
    73a0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    73a2:	60 93 66 23 	sts	0x2366, r22	; 0x802366 <InterruptFuncTable+0xa0>
    73a6:	70 93 67 23 	sts	0x2367, r23	; 0x802367 <InterruptFuncTable+0xa1>
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    73aa:	40 93 5c 24 	sts	0x245C, r20	; 0x80245c <InterruptSenderTable+0xa0>
    73ae:	50 93 5d 24 	sts	0x245D, r21	; 0x80245d <InterruptSenderTable+0xa1>
    73b2:	08 95       	ret

000073b4 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    73b4:	61 15       	cp	r22, r1
    73b6:	71 05       	cpc	r23, r1
    73b8:	29 f0       	breq	.+10     	; 0x73c4 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    73ba:	e0 e0       	ldi	r30, 0x00	; 0
    73bc:	f9 e0       	ldi	r31, 0x09	; 9
    73be:	87 81       	ldd	r24, Z+7	; 0x07
    73c0:	28 2b       	or	r18, r24
    73c2:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    73c4:	60 93 68 23 	sts	0x2368, r22	; 0x802368 <InterruptFuncTable+0xa2>
    73c8:	70 93 69 23 	sts	0x2369, r23	; 0x802369 <InterruptFuncTable+0xa3>
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    73cc:	40 93 5e 24 	sts	0x245E, r20	; 0x80245e <InterruptSenderTable+0xa2>
    73d0:	50 93 5f 24 	sts	0x245F, r21	; 0x80245f <InterruptSenderTable+0xa3>
    73d4:	08 95       	ret

000073d6 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    73d6:	61 15       	cp	r22, r1
    73d8:	71 05       	cpc	r23, r1
    73da:	29 f0       	breq	.+10     	; 0x73e6 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    73dc:	e0 e0       	ldi	r30, 0x00	; 0
    73de:	f9 e0       	ldi	r31, 0x09	; 9
    73e0:	87 81       	ldd	r24, Z+7	; 0x07
    73e2:	28 2b       	or	r18, r24
    73e4:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    73e6:	60 93 6a 23 	sts	0x236A, r22	; 0x80236a <InterruptFuncTable+0xa4>
    73ea:	70 93 6b 23 	sts	0x236B, r23	; 0x80236b <InterruptFuncTable+0xa5>
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    73ee:	40 93 60 24 	sts	0x2460, r20	; 0x802460 <InterruptSenderTable+0xa4>
    73f2:	50 93 61 24 	sts	0x2461, r21	; 0x802461 <InterruptSenderTable+0xa5>
    73f6:	08 95       	ret

000073f8 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    73f8:	cf 93       	push	r28
    73fa:	df 93       	push	r29
    73fc:	ec 01       	movw	r28, r24
    73fe:	0e 94 76 1a 	call	0x34ec	; 0x34ec <_ZN6CTimerC1Ev>
    7402:	8e e5       	ldi	r24, 0x5E	; 94
    7404:	92 e2       	ldi	r25, 0x22	; 34
    7406:	88 83       	st	Y, r24
    7408:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    740a:	df 91       	pop	r29
    740c:	cf 91       	pop	r28
    740e:	08 95       	ret

00007410 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    7410:	2e e5       	ldi	r18, 0x5E	; 94
    7412:	32 e2       	ldi	r19, 0x22	; 34
    7414:	fc 01       	movw	r30, r24
    7416:	20 83       	st	Z, r18
    7418:	31 83       	std	Z+1, r19	; 0x01
    741a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN6CTimerD1Ev>
    741e:	08 95       	ret

00007420 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    7420:	fc 01       	movw	r30, r24
    7422:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7424:	e0 e4       	ldi	r30, 0x40	; 64
    7426:	f9 e0       	ldi	r31, 0x09	; 9
    7428:	80 81       	ld	r24, Z
    742a:	80 7f       	andi	r24, 0xF0	; 240
    742c:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    742e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    7430:	10 a2       	std	Z+32, r1	; 0x20
    7432:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    7434:	10 a6       	std	Z+40, r1	; 0x28
    7436:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    7438:	12 a6       	std	Z+42, r1	; 0x2a
    743a:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    743c:	16 a2       	std	Z+38, r1	; 0x26
    743e:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    7440:	81 81       	ldd	r24, Z+1	; 0x01
    7442:	88 7f       	andi	r24, 0xF8	; 248
    7444:	68 2b       	or	r22, r24
    7446:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7448:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    744a:	17 82       	std	Z+7, r1	; 0x07
    744c:	08 95       	ret

0000744e <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    744e:	e0 e4       	ldi	r30, 0x40	; 64
    7450:	f9 e0       	ldi	r31, 0x09	; 9
    7452:	66 a3       	std	Z+38, r22	; 0x26
    7454:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    7456:	20 81       	ld	r18, Z
    7458:	20 7f       	andi	r18, 0xF0	; 240
    745a:	dc 01       	movw	r26, r24
    745c:	12 96       	adiw	r26, 0x02	; 2
    745e:	9c 91       	ld	r25, X
    7460:	82 2f       	mov	r24, r18
    7462:	89 2b       	or	r24, r25
    7464:	80 83       	st	Z, r24
    7466:	08 95       	ret

00007468 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7468:	e0 e4       	ldi	r30, 0x40	; 64
    746a:	f9 e0       	ldi	r31, 0x09	; 9
    746c:	80 81       	ld	r24, Z
    746e:	80 7f       	andi	r24, 0xF0	; 240
    7470:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    7472:	10 a2       	std	Z+32, r1	; 0x20
    7474:	11 a2       	std	Z+33, r1	; 0x21
    7476:	08 95       	ret

00007478 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    7478:	e0 e4       	ldi	r30, 0x40	; 64
    747a:	f9 e0       	ldi	r31, 0x09	; 9
    747c:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    747e:	80 81       	ld	r24, Z
    7480:	80 7f       	andi	r24, 0xF0	; 240
    7482:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    7484:	10 a2       	std	Z+32, r1	; 0x20
    7486:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    7488:	90 83       	st	Z, r25
    748a:	08 95       	ret

0000748c <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    748c:	e0 e4       	ldi	r30, 0x40	; 64
    748e:	f9 e0       	ldi	r31, 0x09	; 9
    7490:	81 81       	ldd	r24, Z+1	; 0x01
    7492:	8f 70       	andi	r24, 0x0F	; 15
    7494:	68 2b       	or	r22, r24
    7496:	61 83       	std	Z+1, r22	; 0x01
    7498:	08 95       	ret

0000749a <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    749a:	e0 e4       	ldi	r30, 0x40	; 64
    749c:	f9 e0       	ldi	r31, 0x09	; 9
    749e:	81 81       	ldd	r24, Z+1	; 0x01
    74a0:	60 95       	com	r22
    74a2:	68 23       	and	r22, r24
    74a4:	61 83       	std	Z+1, r22	; 0x01
    74a6:	08 95       	ret

000074a8 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    74a8:	60 93 66 09 	sts	0x0966, r22	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    74ac:	70 93 67 09 	sts	0x0967, r23	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    74b0:	08 95       	ret

000074b2 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    74b2:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    74b6:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    74ba:	08 95       	ret

000074bc <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    74bc:	60 93 6a 09 	sts	0x096A, r22	; 0x80096a <__TEXT_REGION_LENGTH__+0x70096a>
    74c0:	70 93 6b 09 	sts	0x096B, r23	; 0x80096b <__TEXT_REGION_LENGTH__+0x70096b>
    74c4:	08 95       	ret

000074c6 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    74c6:	61 15       	cp	r22, r1
    74c8:	71 05       	cpc	r23, r1
    74ca:	29 f0       	breq	.+10     	; 0x74d6 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    74cc:	e0 e4       	ldi	r30, 0x40	; 64
    74ce:	f9 e0       	ldi	r31, 0x09	; 9
    74d0:	86 81       	ldd	r24, Z+6	; 0x06
    74d2:	28 2b       	or	r18, r24
    74d4:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    74d6:	60 93 6c 23 	sts	0x236C, r22	; 0x80236c <InterruptFuncTable+0xa6>
    74da:	70 93 6d 23 	sts	0x236D, r23	; 0x80236d <InterruptFuncTable+0xa7>
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    74de:	40 93 62 24 	sts	0x2462, r20	; 0x802462 <InterruptSenderTable+0xa6>
    74e2:	50 93 63 24 	sts	0x2463, r21	; 0x802463 <InterruptSenderTable+0xa7>
    74e6:	08 95       	ret

000074e8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    74e8:	61 15       	cp	r22, r1
    74ea:	71 05       	cpc	r23, r1
    74ec:	29 f0       	breq	.+10     	; 0x74f8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    74ee:	e0 e4       	ldi	r30, 0x40	; 64
    74f0:	f9 e0       	ldi	r31, 0x09	; 9
    74f2:	86 81       	ldd	r24, Z+6	; 0x06
    74f4:	28 2b       	or	r18, r24
    74f6:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    74f8:	60 93 6e 23 	sts	0x236E, r22	; 0x80236e <InterruptFuncTable+0xa8>
    74fc:	70 93 6f 23 	sts	0x236F, r23	; 0x80236f <InterruptFuncTable+0xa9>
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    7500:	40 93 64 24 	sts	0x2464, r20	; 0x802464 <InterruptSenderTable+0xa8>
    7504:	50 93 65 24 	sts	0x2465, r21	; 0x802465 <InterruptSenderTable+0xa9>
    7508:	08 95       	ret

0000750a <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    750a:	61 15       	cp	r22, r1
    750c:	71 05       	cpc	r23, r1
    750e:	29 f0       	breq	.+10     	; 0x751a <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    7510:	e0 e4       	ldi	r30, 0x40	; 64
    7512:	f9 e0       	ldi	r31, 0x09	; 9
    7514:	87 81       	ldd	r24, Z+7	; 0x07
    7516:	28 2b       	or	r18, r24
    7518:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    751a:	60 93 70 23 	sts	0x2370, r22	; 0x802370 <InterruptFuncTable+0xaa>
    751e:	70 93 71 23 	sts	0x2371, r23	; 0x802371 <InterruptFuncTable+0xab>
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    7522:	40 93 66 24 	sts	0x2466, r20	; 0x802466 <InterruptSenderTable+0xaa>
    7526:	50 93 67 24 	sts	0x2467, r21	; 0x802467 <InterruptSenderTable+0xab>
    752a:	08 95       	ret

0000752c <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    752c:	61 15       	cp	r22, r1
    752e:	71 05       	cpc	r23, r1
    7530:	29 f0       	breq	.+10     	; 0x753c <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    7532:	e0 e4       	ldi	r30, 0x40	; 64
    7534:	f9 e0       	ldi	r31, 0x09	; 9
    7536:	87 81       	ldd	r24, Z+7	; 0x07
    7538:	28 2b       	or	r18, r24
    753a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    753c:	60 93 72 23 	sts	0x2372, r22	; 0x802372 <InterruptFuncTable+0xac>
    7540:	70 93 73 23 	sts	0x2373, r23	; 0x802373 <InterruptFuncTable+0xad>
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    7544:	40 93 68 24 	sts	0x2468, r20	; 0x802468 <InterruptSenderTable+0xac>
    7548:	50 93 69 24 	sts	0x2469, r21	; 0x802469 <InterruptSenderTable+0xad>
    754c:	08 95       	ret

0000754e <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    754e:	cf 93       	push	r28
    7550:	df 93       	push	r29
    7552:	ec 01       	movw	r28, r24
    7554:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN7CTimer1C1Ev>
    7558:	82 e8       	ldi	r24, 0x82	; 130
    755a:	92 e2       	ldi	r25, 0x22	; 34
    755c:	88 83       	st	Y, r24
    755e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    7560:	df 91       	pop	r29
    7562:	cf 91       	pop	r28
    7564:	08 95       	ret

00007566 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    7566:	22 e8       	ldi	r18, 0x82	; 130
    7568:	32 e2       	ldi	r19, 0x22	; 34
    756a:	fc 01       	movw	r30, r24
    756c:	20 83       	st	Z, r18
    756e:	31 83       	std	Z+1, r19	; 0x01
    7570:	0e 94 83 1a 	call	0x3506	; 0x3506 <_ZN7CTimer1D1Ev>
    7574:	08 95       	ret

00007576 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    7576:	fc 01       	movw	r30, r24
    7578:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    757a:	e0 e0       	ldi	r30, 0x00	; 0
    757c:	fb e0       	ldi	r31, 0x0B	; 11
    757e:	80 81       	ld	r24, Z
    7580:	80 7f       	andi	r24, 0xF0	; 240
    7582:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7584:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    7586:	10 a2       	std	Z+32, r1	; 0x20
    7588:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    758a:	10 a6       	std	Z+40, r1	; 0x28
    758c:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    758e:	12 a6       	std	Z+42, r1	; 0x2a
    7590:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    7592:	14 a6       	std	Z+44, r1	; 0x2c
    7594:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    7596:	16 a6       	std	Z+46, r1	; 0x2e
    7598:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    759a:	16 a2       	std	Z+38, r1	; 0x26
    759c:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    759e:	81 81       	ldd	r24, Z+1	; 0x01
    75a0:	88 7f       	andi	r24, 0xF8	; 248
    75a2:	68 2b       	or	r22, r24
    75a4:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    75a6:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    75a8:	17 82       	std	Z+7, r1	; 0x07
    75aa:	08 95       	ret

000075ac <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    75ac:	e0 e0       	ldi	r30, 0x00	; 0
    75ae:	fb e0       	ldi	r31, 0x0B	; 11
    75b0:	66 a3       	std	Z+38, r22	; 0x26
    75b2:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    75b4:	20 81       	ld	r18, Z
    75b6:	20 7f       	andi	r18, 0xF0	; 240
    75b8:	dc 01       	movw	r26, r24
    75ba:	12 96       	adiw	r26, 0x02	; 2
    75bc:	9c 91       	ld	r25, X
    75be:	82 2f       	mov	r24, r18
    75c0:	89 2b       	or	r24, r25
    75c2:	80 83       	st	Z, r24
    75c4:	08 95       	ret

000075c6 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    75c6:	e0 e0       	ldi	r30, 0x00	; 0
    75c8:	fb e0       	ldi	r31, 0x0B	; 11
    75ca:	80 81       	ld	r24, Z
    75cc:	80 7f       	andi	r24, 0xF0	; 240
    75ce:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    75d0:	10 a2       	std	Z+32, r1	; 0x20
    75d2:	11 a2       	std	Z+33, r1	; 0x21
    75d4:	08 95       	ret

000075d6 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    75d6:	e0 e0       	ldi	r30, 0x00	; 0
    75d8:	fb e0       	ldi	r31, 0x0B	; 11
    75da:	81 81       	ldd	r24, Z+1	; 0x01
    75dc:	68 2b       	or	r22, r24
    75de:	61 83       	std	Z+1, r22	; 0x01
    75e0:	08 95       	ret

000075e2 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    75e2:	e0 e0       	ldi	r30, 0x00	; 0
    75e4:	fb e0       	ldi	r31, 0x0B	; 11
    75e6:	81 81       	ldd	r24, Z+1	; 0x01
    75e8:	60 95       	com	r22
    75ea:	68 23       	and	r22, r24
    75ec:	61 83       	std	Z+1, r22	; 0x01
    75ee:	08 95       	ret

000075f0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    75f0:	e0 e0       	ldi	r30, 0x00	; 0
    75f2:	fb e0       	ldi	r31, 0x0B	; 11
    75f4:	82 81       	ldd	r24, Z+2	; 0x02
    75f6:	62 95       	swap	r22
    75f8:	6f 70       	andi	r22, 0x0F	; 15
    75fa:	68 2b       	or	r22, r24
    75fc:	62 83       	std	Z+2, r22	; 0x02
    75fe:	08 95       	ret

00007600 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    7600:	e0 e0       	ldi	r30, 0x00	; 0
    7602:	fb e0       	ldi	r31, 0x0B	; 11
    7604:	82 81       	ldd	r24, Z+2	; 0x02
    7606:	62 95       	swap	r22
    7608:	6f 70       	andi	r22, 0x0F	; 15
    760a:	60 95       	com	r22
    760c:	68 23       	and	r22, r24
    760e:	62 83       	std	Z+2, r22	; 0x02
    7610:	08 95       	ret

00007612 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PERBUF = value;
    7612:	60 93 36 0b 	sts	0x0B36, r22	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    7616:	70 93 37 0b 	sts	0x0B37, r23	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
    761a:	08 95       	ret

0000761c <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    761c:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
    7620:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
    7624:	08 95       	ret

00007626 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    7626:	60 93 2a 0b 	sts	0x0B2A, r22	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
    762a:	70 93 2b 0b 	sts	0x0B2B, r23	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
    762e:	08 95       	ret

00007630 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    7630:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
    7634:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
    7638:	08 95       	ret

0000763a <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    763a:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
    763e:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
    7642:	08 95       	ret

00007644 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7644:	61 15       	cp	r22, r1
    7646:	71 05       	cpc	r23, r1
    7648:	29 f0       	breq	.+10     	; 0x7654 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    764a:	e0 e0       	ldi	r30, 0x00	; 0
    764c:	fb e0       	ldi	r31, 0x0B	; 11
    764e:	86 81       	ldd	r24, Z+6	; 0x06
    7650:	28 2b       	or	r18, r24
    7652:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    7654:	60 93 9e 23 	sts	0x239E, r22	; 0x80239e <InterruptFuncTable+0xd8>
    7658:	70 93 9f 23 	sts	0x239F, r23	; 0x80239f <InterruptFuncTable+0xd9>
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    765c:	40 93 94 24 	sts	0x2494, r20	; 0x802494 <InterruptSenderTable+0xd8>
    7660:	50 93 95 24 	sts	0x2495, r21	; 0x802495 <InterruptSenderTable+0xd9>
    7664:	08 95       	ret

00007666 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7666:	61 15       	cp	r22, r1
    7668:	71 05       	cpc	r23, r1
    766a:	29 f0       	breq	.+10     	; 0x7676 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    766c:	e0 e0       	ldi	r30, 0x00	; 0
    766e:	fb e0       	ldi	r31, 0x0B	; 11
    7670:	86 81       	ldd	r24, Z+6	; 0x06
    7672:	28 2b       	or	r18, r24
    7674:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    7676:	60 93 a0 23 	sts	0x23A0, r22	; 0x8023a0 <InterruptFuncTable+0xda>
    767a:	70 93 a1 23 	sts	0x23A1, r23	; 0x8023a1 <InterruptFuncTable+0xdb>
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    767e:	40 93 96 24 	sts	0x2496, r20	; 0x802496 <InterruptSenderTable+0xda>
    7682:	50 93 97 24 	sts	0x2497, r21	; 0x802497 <InterruptSenderTable+0xdb>
    7686:	08 95       	ret

00007688 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7688:	61 15       	cp	r22, r1
    768a:	71 05       	cpc	r23, r1
    768c:	29 f0       	breq	.+10     	; 0x7698 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    768e:	e0 e0       	ldi	r30, 0x00	; 0
    7690:	fb e0       	ldi	r31, 0x0B	; 11
    7692:	87 81       	ldd	r24, Z+7	; 0x07
    7694:	28 2b       	or	r18, r24
    7696:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    7698:	60 93 a2 23 	sts	0x23A2, r22	; 0x8023a2 <InterruptFuncTable+0xdc>
    769c:	70 93 a3 23 	sts	0x23A3, r23	; 0x8023a3 <InterruptFuncTable+0xdd>
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    76a0:	40 93 98 24 	sts	0x2498, r20	; 0x802498 <InterruptSenderTable+0xdc>
    76a4:	50 93 99 24 	sts	0x2499, r21	; 0x802499 <InterruptSenderTable+0xdd>
    76a8:	08 95       	ret

000076aa <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    76aa:	61 15       	cp	r22, r1
    76ac:	71 05       	cpc	r23, r1
    76ae:	29 f0       	breq	.+10     	; 0x76ba <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    76b0:	e0 e0       	ldi	r30, 0x00	; 0
    76b2:	fb e0       	ldi	r31, 0x0B	; 11
    76b4:	87 81       	ldd	r24, Z+7	; 0x07
    76b6:	28 2b       	or	r18, r24
    76b8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    76ba:	60 93 a4 23 	sts	0x23A4, r22	; 0x8023a4 <InterruptFuncTable+0xde>
    76be:	70 93 a5 23 	sts	0x23A5, r23	; 0x8023a5 <InterruptFuncTable+0xdf>
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    76c2:	40 93 9a 24 	sts	0x249A, r20	; 0x80249a <InterruptSenderTable+0xde>
    76c6:	50 93 9b 24 	sts	0x249B, r21	; 0x80249b <InterruptSenderTable+0xdf>
    76ca:	08 95       	ret

000076cc <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    76cc:	61 15       	cp	r22, r1
    76ce:	71 05       	cpc	r23, r1
    76d0:	29 f0       	breq	.+10     	; 0x76dc <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    76d2:	e0 e0       	ldi	r30, 0x00	; 0
    76d4:	fb e0       	ldi	r31, 0x0B	; 11
    76d6:	87 81       	ldd	r24, Z+7	; 0x07
    76d8:	28 2b       	or	r18, r24
    76da:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    76dc:	60 93 a6 23 	sts	0x23A6, r22	; 0x8023a6 <InterruptFuncTable+0xe0>
    76e0:	70 93 a7 23 	sts	0x23A7, r23	; 0x8023a7 <InterruptFuncTable+0xe1>
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    76e4:	40 93 9c 24 	sts	0x249C, r20	; 0x80249c <InterruptSenderTable+0xe0>
    76e8:	50 93 9d 24 	sts	0x249D, r21	; 0x80249d <InterruptSenderTable+0xe1>
    76ec:	08 95       	ret

000076ee <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    76ee:	61 15       	cp	r22, r1
    76f0:	71 05       	cpc	r23, r1
    76f2:	29 f0       	breq	.+10     	; 0x76fe <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    76f4:	e0 e0       	ldi	r30, 0x00	; 0
    76f6:	fb e0       	ldi	r31, 0x0B	; 11
    76f8:	87 81       	ldd	r24, Z+7	; 0x07
    76fa:	28 2b       	or	r18, r24
    76fc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    76fe:	60 93 a8 23 	sts	0x23A8, r22	; 0x8023a8 <InterruptFuncTable+0xe2>
    7702:	70 93 a9 23 	sts	0x23A9, r23	; 0x8023a9 <InterruptFuncTable+0xe3>
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    7706:	40 93 9e 24 	sts	0x249E, r20	; 0x80249e <InterruptSenderTable+0xe2>
    770a:	50 93 9f 24 	sts	0x249F, r21	; 0x80249f <InterruptSenderTable+0xe3>
    770e:	08 95       	ret

00007710 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    7710:	cf 93       	push	r28
    7712:	df 93       	push	r29
    7714:	ec 01       	movw	r28, r24
    7716:	0e 94 76 1a 	call	0x34ec	; 0x34ec <_ZN6CTimerC1Ev>
    771a:	80 ea       	ldi	r24, 0xA0	; 160
    771c:	92 e2       	ldi	r25, 0x22	; 34
    771e:	88 83       	st	Y, r24
    7720:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    7722:	df 91       	pop	r29
    7724:	cf 91       	pop	r28
    7726:	08 95       	ret

00007728 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    7728:	20 ea       	ldi	r18, 0xA0	; 160
    772a:	32 e2       	ldi	r19, 0x22	; 34
    772c:	fc 01       	movw	r30, r24
    772e:	20 83       	st	Z, r18
    7730:	31 83       	std	Z+1, r19	; 0x01
    7732:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN6CTimerD1Ev>
    7736:	08 95       	ret

00007738 <__fixsfsi>:
    7738:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__fixunssfsi>
    773c:	68 94       	set
    773e:	b1 11       	cpse	r27, r1
    7740:	0c 94 32 3c 	jmp	0x7864	; 0x7864 <__fp_szero>
    7744:	08 95       	ret

00007746 <__fixunssfsi>:
    7746:	0e 94 17 3c 	call	0x782e	; 0x782e <__fp_splitA>
    774a:	88 f0       	brcs	.+34     	; 0x776e <__fixunssfsi+0x28>
    774c:	9f 57       	subi	r25, 0x7F	; 127
    774e:	98 f0       	brcs	.+38     	; 0x7776 <__fixunssfsi+0x30>
    7750:	b9 2f       	mov	r27, r25
    7752:	99 27       	eor	r25, r25
    7754:	b7 51       	subi	r27, 0x17	; 23
    7756:	b0 f0       	brcs	.+44     	; 0x7784 <__fixunssfsi+0x3e>
    7758:	e1 f0       	breq	.+56     	; 0x7792 <__fixunssfsi+0x4c>
    775a:	66 0f       	add	r22, r22
    775c:	77 1f       	adc	r23, r23
    775e:	88 1f       	adc	r24, r24
    7760:	99 1f       	adc	r25, r25
    7762:	1a f0       	brmi	.+6      	; 0x776a <__fixunssfsi+0x24>
    7764:	ba 95       	dec	r27
    7766:	c9 f7       	brne	.-14     	; 0x775a <__fixunssfsi+0x14>
    7768:	14 c0       	rjmp	.+40     	; 0x7792 <__fixunssfsi+0x4c>
    776a:	b1 30       	cpi	r27, 0x01	; 1
    776c:	91 f0       	breq	.+36     	; 0x7792 <__fixunssfsi+0x4c>
    776e:	0e 94 31 3c 	call	0x7862	; 0x7862 <__fp_zero>
    7772:	b1 e0       	ldi	r27, 0x01	; 1
    7774:	08 95       	ret
    7776:	0c 94 31 3c 	jmp	0x7862	; 0x7862 <__fp_zero>
    777a:	67 2f       	mov	r22, r23
    777c:	78 2f       	mov	r23, r24
    777e:	88 27       	eor	r24, r24
    7780:	b8 5f       	subi	r27, 0xF8	; 248
    7782:	39 f0       	breq	.+14     	; 0x7792 <__fixunssfsi+0x4c>
    7784:	b9 3f       	cpi	r27, 0xF9	; 249
    7786:	cc f3       	brlt	.-14     	; 0x777a <__fixunssfsi+0x34>
    7788:	86 95       	lsr	r24
    778a:	77 95       	ror	r23
    778c:	67 95       	ror	r22
    778e:	b3 95       	inc	r27
    7790:	d9 f7       	brne	.-10     	; 0x7788 <__fixunssfsi+0x42>
    7792:	3e f4       	brtc	.+14     	; 0x77a2 <__fixunssfsi+0x5c>
    7794:	90 95       	com	r25
    7796:	80 95       	com	r24
    7798:	70 95       	com	r23
    779a:	61 95       	neg	r22
    779c:	7f 4f       	sbci	r23, 0xFF	; 255
    779e:	8f 4f       	sbci	r24, 0xFF	; 255
    77a0:	9f 4f       	sbci	r25, 0xFF	; 255
    77a2:	08 95       	ret

000077a4 <__floatunsisf>:
    77a4:	e8 94       	clt
    77a6:	09 c0       	rjmp	.+18     	; 0x77ba <__floatsisf+0x12>

000077a8 <__floatsisf>:
    77a8:	97 fb       	bst	r25, 7
    77aa:	3e f4       	brtc	.+14     	; 0x77ba <__floatsisf+0x12>
    77ac:	90 95       	com	r25
    77ae:	80 95       	com	r24
    77b0:	70 95       	com	r23
    77b2:	61 95       	neg	r22
    77b4:	7f 4f       	sbci	r23, 0xFF	; 255
    77b6:	8f 4f       	sbci	r24, 0xFF	; 255
    77b8:	9f 4f       	sbci	r25, 0xFF	; 255
    77ba:	99 23       	and	r25, r25
    77bc:	a9 f0       	breq	.+42     	; 0x77e8 <__floatsisf+0x40>
    77be:	f9 2f       	mov	r31, r25
    77c0:	96 e9       	ldi	r25, 0x96	; 150
    77c2:	bb 27       	eor	r27, r27
    77c4:	93 95       	inc	r25
    77c6:	f6 95       	lsr	r31
    77c8:	87 95       	ror	r24
    77ca:	77 95       	ror	r23
    77cc:	67 95       	ror	r22
    77ce:	b7 95       	ror	r27
    77d0:	f1 11       	cpse	r31, r1
    77d2:	f8 cf       	rjmp	.-16     	; 0x77c4 <__floatsisf+0x1c>
    77d4:	fa f4       	brpl	.+62     	; 0x7814 <__floatsisf+0x6c>
    77d6:	bb 0f       	add	r27, r27
    77d8:	11 f4       	brne	.+4      	; 0x77de <__floatsisf+0x36>
    77da:	60 ff       	sbrs	r22, 0
    77dc:	1b c0       	rjmp	.+54     	; 0x7814 <__floatsisf+0x6c>
    77de:	6f 5f       	subi	r22, 0xFF	; 255
    77e0:	7f 4f       	sbci	r23, 0xFF	; 255
    77e2:	8f 4f       	sbci	r24, 0xFF	; 255
    77e4:	9f 4f       	sbci	r25, 0xFF	; 255
    77e6:	16 c0       	rjmp	.+44     	; 0x7814 <__floatsisf+0x6c>
    77e8:	88 23       	and	r24, r24
    77ea:	11 f0       	breq	.+4      	; 0x77f0 <__floatsisf+0x48>
    77ec:	96 e9       	ldi	r25, 0x96	; 150
    77ee:	11 c0       	rjmp	.+34     	; 0x7812 <__floatsisf+0x6a>
    77f0:	77 23       	and	r23, r23
    77f2:	21 f0       	breq	.+8      	; 0x77fc <__floatsisf+0x54>
    77f4:	9e e8       	ldi	r25, 0x8E	; 142
    77f6:	87 2f       	mov	r24, r23
    77f8:	76 2f       	mov	r23, r22
    77fa:	05 c0       	rjmp	.+10     	; 0x7806 <__floatsisf+0x5e>
    77fc:	66 23       	and	r22, r22
    77fe:	71 f0       	breq	.+28     	; 0x781c <__floatsisf+0x74>
    7800:	96 e8       	ldi	r25, 0x86	; 134
    7802:	86 2f       	mov	r24, r22
    7804:	70 e0       	ldi	r23, 0x00	; 0
    7806:	60 e0       	ldi	r22, 0x00	; 0
    7808:	2a f0       	brmi	.+10     	; 0x7814 <__floatsisf+0x6c>
    780a:	9a 95       	dec	r25
    780c:	66 0f       	add	r22, r22
    780e:	77 1f       	adc	r23, r23
    7810:	88 1f       	adc	r24, r24
    7812:	da f7       	brpl	.-10     	; 0x780a <__floatsisf+0x62>
    7814:	88 0f       	add	r24, r24
    7816:	96 95       	lsr	r25
    7818:	87 95       	ror	r24
    781a:	97 f9       	bld	r25, 7
    781c:	08 95       	ret

0000781e <__fp_split3>:
    781e:	57 fd       	sbrc	r21, 7
    7820:	90 58       	subi	r25, 0x80	; 128
    7822:	44 0f       	add	r20, r20
    7824:	55 1f       	adc	r21, r21
    7826:	59 f0       	breq	.+22     	; 0x783e <__fp_splitA+0x10>
    7828:	5f 3f       	cpi	r21, 0xFF	; 255
    782a:	71 f0       	breq	.+28     	; 0x7848 <__fp_splitA+0x1a>
    782c:	47 95       	ror	r20

0000782e <__fp_splitA>:
    782e:	88 0f       	add	r24, r24
    7830:	97 fb       	bst	r25, 7
    7832:	99 1f       	adc	r25, r25
    7834:	61 f0       	breq	.+24     	; 0x784e <__fp_splitA+0x20>
    7836:	9f 3f       	cpi	r25, 0xFF	; 255
    7838:	79 f0       	breq	.+30     	; 0x7858 <__fp_splitA+0x2a>
    783a:	87 95       	ror	r24
    783c:	08 95       	ret
    783e:	12 16       	cp	r1, r18
    7840:	13 06       	cpc	r1, r19
    7842:	14 06       	cpc	r1, r20
    7844:	55 1f       	adc	r21, r21
    7846:	f2 cf       	rjmp	.-28     	; 0x782c <__fp_split3+0xe>
    7848:	46 95       	lsr	r20
    784a:	f1 df       	rcall	.-30     	; 0x782e <__fp_splitA>
    784c:	08 c0       	rjmp	.+16     	; 0x785e <__fp_splitA+0x30>
    784e:	16 16       	cp	r1, r22
    7850:	17 06       	cpc	r1, r23
    7852:	18 06       	cpc	r1, r24
    7854:	99 1f       	adc	r25, r25
    7856:	f1 cf       	rjmp	.-30     	; 0x783a <__fp_splitA+0xc>
    7858:	86 95       	lsr	r24
    785a:	71 05       	cpc	r23, r1
    785c:	61 05       	cpc	r22, r1
    785e:	08 94       	sec
    7860:	08 95       	ret

00007862 <__fp_zero>:
    7862:	e8 94       	clt

00007864 <__fp_szero>:
    7864:	bb 27       	eor	r27, r27
    7866:	66 27       	eor	r22, r22
    7868:	77 27       	eor	r23, r23
    786a:	cb 01       	movw	r24, r22
    786c:	97 f9       	bld	r25, 7
    786e:	08 95       	ret

00007870 <__mulsf3>:
    7870:	0e 94 4b 3c 	call	0x7896	; 0x7896 <__mulsf3x>
    7874:	0c 94 bc 3c 	jmp	0x7978	; 0x7978 <__fp_round>
    7878:	0e 94 ae 3c 	call	0x795c	; 0x795c <__fp_pscA>
    787c:	38 f0       	brcs	.+14     	; 0x788c <__mulsf3+0x1c>
    787e:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fp_pscB>
    7882:	20 f0       	brcs	.+8      	; 0x788c <__mulsf3+0x1c>
    7884:	95 23       	and	r25, r21
    7886:	11 f0       	breq	.+4      	; 0x788c <__mulsf3+0x1c>
    7888:	0c 94 a5 3c 	jmp	0x794a	; 0x794a <__fp_inf>
    788c:	0c 94 ab 3c 	jmp	0x7956	; 0x7956 <__fp_nan>
    7890:	11 24       	eor	r1, r1
    7892:	0c 94 32 3c 	jmp	0x7864	; 0x7864 <__fp_szero>

00007896 <__mulsf3x>:
    7896:	0e 94 0f 3c 	call	0x781e	; 0x781e <__fp_split3>
    789a:	70 f3       	brcs	.-36     	; 0x7878 <__mulsf3+0x8>

0000789c <__mulsf3_pse>:
    789c:	95 9f       	mul	r25, r21
    789e:	c1 f3       	breq	.-16     	; 0x7890 <__mulsf3+0x20>
    78a0:	95 0f       	add	r25, r21
    78a2:	50 e0       	ldi	r21, 0x00	; 0
    78a4:	55 1f       	adc	r21, r21
    78a6:	62 9f       	mul	r22, r18
    78a8:	f0 01       	movw	r30, r0
    78aa:	72 9f       	mul	r23, r18
    78ac:	bb 27       	eor	r27, r27
    78ae:	f0 0d       	add	r31, r0
    78b0:	b1 1d       	adc	r27, r1
    78b2:	63 9f       	mul	r22, r19
    78b4:	aa 27       	eor	r26, r26
    78b6:	f0 0d       	add	r31, r0
    78b8:	b1 1d       	adc	r27, r1
    78ba:	aa 1f       	adc	r26, r26
    78bc:	64 9f       	mul	r22, r20
    78be:	66 27       	eor	r22, r22
    78c0:	b0 0d       	add	r27, r0
    78c2:	a1 1d       	adc	r26, r1
    78c4:	66 1f       	adc	r22, r22
    78c6:	82 9f       	mul	r24, r18
    78c8:	22 27       	eor	r18, r18
    78ca:	b0 0d       	add	r27, r0
    78cc:	a1 1d       	adc	r26, r1
    78ce:	62 1f       	adc	r22, r18
    78d0:	73 9f       	mul	r23, r19
    78d2:	b0 0d       	add	r27, r0
    78d4:	a1 1d       	adc	r26, r1
    78d6:	62 1f       	adc	r22, r18
    78d8:	83 9f       	mul	r24, r19
    78da:	a0 0d       	add	r26, r0
    78dc:	61 1d       	adc	r22, r1
    78de:	22 1f       	adc	r18, r18
    78e0:	74 9f       	mul	r23, r20
    78e2:	33 27       	eor	r19, r19
    78e4:	a0 0d       	add	r26, r0
    78e6:	61 1d       	adc	r22, r1
    78e8:	23 1f       	adc	r18, r19
    78ea:	84 9f       	mul	r24, r20
    78ec:	60 0d       	add	r22, r0
    78ee:	21 1d       	adc	r18, r1
    78f0:	82 2f       	mov	r24, r18
    78f2:	76 2f       	mov	r23, r22
    78f4:	6a 2f       	mov	r22, r26
    78f6:	11 24       	eor	r1, r1
    78f8:	9f 57       	subi	r25, 0x7F	; 127
    78fa:	50 40       	sbci	r21, 0x00	; 0
    78fc:	9a f0       	brmi	.+38     	; 0x7924 <__mulsf3_pse+0x88>
    78fe:	f1 f0       	breq	.+60     	; 0x793c <__mulsf3_pse+0xa0>
    7900:	88 23       	and	r24, r24
    7902:	4a f0       	brmi	.+18     	; 0x7916 <__mulsf3_pse+0x7a>
    7904:	ee 0f       	add	r30, r30
    7906:	ff 1f       	adc	r31, r31
    7908:	bb 1f       	adc	r27, r27
    790a:	66 1f       	adc	r22, r22
    790c:	77 1f       	adc	r23, r23
    790e:	88 1f       	adc	r24, r24
    7910:	91 50       	subi	r25, 0x01	; 1
    7912:	50 40       	sbci	r21, 0x00	; 0
    7914:	a9 f7       	brne	.-22     	; 0x7900 <__mulsf3_pse+0x64>
    7916:	9e 3f       	cpi	r25, 0xFE	; 254
    7918:	51 05       	cpc	r21, r1
    791a:	80 f0       	brcs	.+32     	; 0x793c <__mulsf3_pse+0xa0>
    791c:	0c 94 a5 3c 	jmp	0x794a	; 0x794a <__fp_inf>
    7920:	0c 94 32 3c 	jmp	0x7864	; 0x7864 <__fp_szero>
    7924:	5f 3f       	cpi	r21, 0xFF	; 255
    7926:	e4 f3       	brlt	.-8      	; 0x7920 <__mulsf3_pse+0x84>
    7928:	98 3e       	cpi	r25, 0xE8	; 232
    792a:	d4 f3       	brlt	.-12     	; 0x7920 <__mulsf3_pse+0x84>
    792c:	86 95       	lsr	r24
    792e:	77 95       	ror	r23
    7930:	67 95       	ror	r22
    7932:	b7 95       	ror	r27
    7934:	f7 95       	ror	r31
    7936:	e7 95       	ror	r30
    7938:	9f 5f       	subi	r25, 0xFF	; 255
    793a:	c1 f7       	brne	.-16     	; 0x792c <__mulsf3_pse+0x90>
    793c:	fe 2b       	or	r31, r30
    793e:	88 0f       	add	r24, r24
    7940:	91 1d       	adc	r25, r1
    7942:	96 95       	lsr	r25
    7944:	87 95       	ror	r24
    7946:	97 f9       	bld	r25, 7
    7948:	08 95       	ret

0000794a <__fp_inf>:
    794a:	97 f9       	bld	r25, 7
    794c:	9f 67       	ori	r25, 0x7F	; 127
    794e:	80 e8       	ldi	r24, 0x80	; 128
    7950:	70 e0       	ldi	r23, 0x00	; 0
    7952:	60 e0       	ldi	r22, 0x00	; 0
    7954:	08 95       	ret

00007956 <__fp_nan>:
    7956:	9f ef       	ldi	r25, 0xFF	; 255
    7958:	80 ec       	ldi	r24, 0xC0	; 192
    795a:	08 95       	ret

0000795c <__fp_pscA>:
    795c:	00 24       	eor	r0, r0
    795e:	0a 94       	dec	r0
    7960:	16 16       	cp	r1, r22
    7962:	17 06       	cpc	r1, r23
    7964:	18 06       	cpc	r1, r24
    7966:	09 06       	cpc	r0, r25
    7968:	08 95       	ret

0000796a <__fp_pscB>:
    796a:	00 24       	eor	r0, r0
    796c:	0a 94       	dec	r0
    796e:	12 16       	cp	r1, r18
    7970:	13 06       	cpc	r1, r19
    7972:	14 06       	cpc	r1, r20
    7974:	05 06       	cpc	r0, r21
    7976:	08 95       	ret

00007978 <__fp_round>:
    7978:	09 2e       	mov	r0, r25
    797a:	03 94       	inc	r0
    797c:	00 0c       	add	r0, r0
    797e:	11 f4       	brne	.+4      	; 0x7984 <__fp_round+0xc>
    7980:	88 23       	and	r24, r24
    7982:	52 f0       	brmi	.+20     	; 0x7998 <__fp_round+0x20>
    7984:	bb 0f       	add	r27, r27
    7986:	40 f4       	brcc	.+16     	; 0x7998 <__fp_round+0x20>
    7988:	bf 2b       	or	r27, r31
    798a:	11 f4       	brne	.+4      	; 0x7990 <__fp_round+0x18>
    798c:	60 ff       	sbrs	r22, 0
    798e:	04 c0       	rjmp	.+8      	; 0x7998 <__fp_round+0x20>
    7990:	6f 5f       	subi	r22, 0xFF	; 255
    7992:	7f 4f       	sbci	r23, 0xFF	; 255
    7994:	8f 4f       	sbci	r24, 0xFF	; 255
    7996:	9f 4f       	sbci	r25, 0xFF	; 255
    7998:	08 95       	ret

0000799a <__udivmodhi4>:
    799a:	aa 1b       	sub	r26, r26
    799c:	bb 1b       	sub	r27, r27
    799e:	51 e1       	ldi	r21, 0x11	; 17
    79a0:	07 c0       	rjmp	.+14     	; 0x79b0 <__udivmodhi4_ep>

000079a2 <__udivmodhi4_loop>:
    79a2:	aa 1f       	adc	r26, r26
    79a4:	bb 1f       	adc	r27, r27
    79a6:	a6 17       	cp	r26, r22
    79a8:	b7 07       	cpc	r27, r23
    79aa:	10 f0       	brcs	.+4      	; 0x79b0 <__udivmodhi4_ep>
    79ac:	a6 1b       	sub	r26, r22
    79ae:	b7 0b       	sbc	r27, r23

000079b0 <__udivmodhi4_ep>:
    79b0:	88 1f       	adc	r24, r24
    79b2:	99 1f       	adc	r25, r25
    79b4:	5a 95       	dec	r21
    79b6:	a9 f7       	brne	.-22     	; 0x79a2 <__udivmodhi4_loop>
    79b8:	80 95       	com	r24
    79ba:	90 95       	com	r25
    79bc:	bc 01       	movw	r22, r24
    79be:	cd 01       	movw	r24, r26
    79c0:	08 95       	ret

000079c2 <__divmodhi4>:
    79c2:	97 fb       	bst	r25, 7
    79c4:	07 2e       	mov	r0, r23
    79c6:	16 f4       	brtc	.+4      	; 0x79cc <__divmodhi4+0xa>
    79c8:	00 94       	com	r0
    79ca:	07 d0       	rcall	.+14     	; 0x79da <__divmodhi4_neg1>
    79cc:	77 fd       	sbrc	r23, 7
    79ce:	09 d0       	rcall	.+18     	; 0x79e2 <__divmodhi4_neg2>
    79d0:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    79d4:	07 fc       	sbrc	r0, 7
    79d6:	05 d0       	rcall	.+10     	; 0x79e2 <__divmodhi4_neg2>
    79d8:	3e f4       	brtc	.+14     	; 0x79e8 <__divmodhi4_exit>

000079da <__divmodhi4_neg1>:
    79da:	90 95       	com	r25
    79dc:	81 95       	neg	r24
    79de:	9f 4f       	sbci	r25, 0xFF	; 255
    79e0:	08 95       	ret

000079e2 <__divmodhi4_neg2>:
    79e2:	70 95       	com	r23
    79e4:	61 95       	neg	r22
    79e6:	7f 4f       	sbci	r23, 0xFF	; 255

000079e8 <__divmodhi4_exit>:
    79e8:	08 95       	ret

000079ea <__udivmodsi4>:
    79ea:	a1 e2       	ldi	r26, 0x21	; 33
    79ec:	1a 2e       	mov	r1, r26
    79ee:	aa 1b       	sub	r26, r26
    79f0:	bb 1b       	sub	r27, r27
    79f2:	fd 01       	movw	r30, r26
    79f4:	0d c0       	rjmp	.+26     	; 0x7a10 <__udivmodsi4_ep>

000079f6 <__udivmodsi4_loop>:
    79f6:	aa 1f       	adc	r26, r26
    79f8:	bb 1f       	adc	r27, r27
    79fa:	ee 1f       	adc	r30, r30
    79fc:	ff 1f       	adc	r31, r31
    79fe:	a2 17       	cp	r26, r18
    7a00:	b3 07       	cpc	r27, r19
    7a02:	e4 07       	cpc	r30, r20
    7a04:	f5 07       	cpc	r31, r21
    7a06:	20 f0       	brcs	.+8      	; 0x7a10 <__udivmodsi4_ep>
    7a08:	a2 1b       	sub	r26, r18
    7a0a:	b3 0b       	sbc	r27, r19
    7a0c:	e4 0b       	sbc	r30, r20
    7a0e:	f5 0b       	sbc	r31, r21

00007a10 <__udivmodsi4_ep>:
    7a10:	66 1f       	adc	r22, r22
    7a12:	77 1f       	adc	r23, r23
    7a14:	88 1f       	adc	r24, r24
    7a16:	99 1f       	adc	r25, r25
    7a18:	1a 94       	dec	r1
    7a1a:	69 f7       	brne	.-38     	; 0x79f6 <__udivmodsi4_loop>
    7a1c:	60 95       	com	r22
    7a1e:	70 95       	com	r23
    7a20:	80 95       	com	r24
    7a22:	90 95       	com	r25
    7a24:	9b 01       	movw	r18, r22
    7a26:	ac 01       	movw	r20, r24
    7a28:	bd 01       	movw	r22, r26
    7a2a:	cf 01       	movw	r24, r30
    7a2c:	08 95       	ret

00007a2e <__divmodsi4>:
    7a2e:	05 2e       	mov	r0, r21
    7a30:	97 fb       	bst	r25, 7
    7a32:	1e f4       	brtc	.+6      	; 0x7a3a <__divmodsi4+0xc>
    7a34:	00 94       	com	r0
    7a36:	0e 94 2e 3d 	call	0x7a5c	; 0x7a5c <__negsi2>
    7a3a:	57 fd       	sbrc	r21, 7
    7a3c:	07 d0       	rcall	.+14     	; 0x7a4c <__divmodsi4_neg2>
    7a3e:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <__udivmodsi4>
    7a42:	07 fc       	sbrc	r0, 7
    7a44:	03 d0       	rcall	.+6      	; 0x7a4c <__divmodsi4_neg2>
    7a46:	4e f4       	brtc	.+18     	; 0x7a5a <__divmodsi4_exit>
    7a48:	0c 94 2e 3d 	jmp	0x7a5c	; 0x7a5c <__negsi2>

00007a4c <__divmodsi4_neg2>:
    7a4c:	50 95       	com	r21
    7a4e:	40 95       	com	r20
    7a50:	30 95       	com	r19
    7a52:	21 95       	neg	r18
    7a54:	3f 4f       	sbci	r19, 0xFF	; 255
    7a56:	4f 4f       	sbci	r20, 0xFF	; 255
    7a58:	5f 4f       	sbci	r21, 0xFF	; 255

00007a5a <__divmodsi4_exit>:
    7a5a:	08 95       	ret

00007a5c <__negsi2>:
    7a5c:	90 95       	com	r25
    7a5e:	80 95       	com	r24
    7a60:	70 95       	com	r23
    7a62:	61 95       	neg	r22
    7a64:	7f 4f       	sbci	r23, 0xFF	; 255
    7a66:	8f 4f       	sbci	r24, 0xFF	; 255
    7a68:	9f 4f       	sbci	r25, 0xFF	; 255
    7a6a:	08 95       	ret

00007a6c <__tablejump2__>:
    7a6c:	ee 0f       	add	r30, r30
    7a6e:	ff 1f       	adc	r31, r31
    7a70:	88 1f       	adc	r24, r24
    7a72:	8b bf       	out	0x3b, r24	; 59
    7a74:	07 90       	elpm	r0, Z+
    7a76:	f6 91       	elpm	r31, Z
    7a78:	e0 2d       	mov	r30, r0
    7a7a:	19 94       	eijmp

00007a7c <__umulhisi3>:
    7a7c:	a2 9f       	mul	r26, r18
    7a7e:	b0 01       	movw	r22, r0
    7a80:	b3 9f       	mul	r27, r19
    7a82:	c0 01       	movw	r24, r0
    7a84:	a3 9f       	mul	r26, r19
    7a86:	70 0d       	add	r23, r0
    7a88:	81 1d       	adc	r24, r1
    7a8a:	11 24       	eor	r1, r1
    7a8c:	91 1d       	adc	r25, r1
    7a8e:	b2 9f       	mul	r27, r18
    7a90:	70 0d       	add	r23, r0
    7a92:	81 1d       	adc	r24, r1
    7a94:	11 24       	eor	r1, r1
    7a96:	91 1d       	adc	r25, r1
    7a98:	08 95       	ret

00007a9a <__muluhisi3>:
    7a9a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__umulhisi3>
    7a9e:	a5 9f       	mul	r26, r21
    7aa0:	90 0d       	add	r25, r0
    7aa2:	b4 9f       	mul	r27, r20
    7aa4:	90 0d       	add	r25, r0
    7aa6:	a4 9f       	mul	r26, r20
    7aa8:	80 0d       	add	r24, r0
    7aaa:	91 1d       	adc	r25, r1
    7aac:	11 24       	eor	r1, r1
    7aae:	08 95       	ret

00007ab0 <malloc>:
    7ab0:	cf 93       	push	r28
    7ab2:	df 93       	push	r29
    7ab4:	82 30       	cpi	r24, 0x02	; 2
    7ab6:	91 05       	cpc	r25, r1
    7ab8:	10 f4       	brcc	.+4      	; 0x7abe <malloc+0xe>
    7aba:	82 e0       	ldi	r24, 0x02	; 2
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	e0 91 29 26 	lds	r30, 0x2629	; 0x802629 <__flp>
    7ac2:	f0 91 2a 26 	lds	r31, 0x262A	; 0x80262a <__flp+0x1>
    7ac6:	20 e0       	ldi	r18, 0x00	; 0
    7ac8:	30 e0       	ldi	r19, 0x00	; 0
    7aca:	c0 e0       	ldi	r28, 0x00	; 0
    7acc:	d0 e0       	ldi	r29, 0x00	; 0
    7ace:	30 97       	sbiw	r30, 0x00	; 0
    7ad0:	11 f1       	breq	.+68     	; 0x7b16 <malloc+0x66>
    7ad2:	40 81       	ld	r20, Z
    7ad4:	51 81       	ldd	r21, Z+1	; 0x01
    7ad6:	48 17       	cp	r20, r24
    7ad8:	59 07       	cpc	r21, r25
    7ada:	c0 f0       	brcs	.+48     	; 0x7b0c <malloc+0x5c>
    7adc:	48 17       	cp	r20, r24
    7ade:	59 07       	cpc	r21, r25
    7ae0:	61 f4       	brne	.+24     	; 0x7afa <malloc+0x4a>
    7ae2:	82 81       	ldd	r24, Z+2	; 0x02
    7ae4:	93 81       	ldd	r25, Z+3	; 0x03
    7ae6:	20 97       	sbiw	r28, 0x00	; 0
    7ae8:	19 f0       	breq	.+6      	; 0x7af0 <malloc+0x40>
    7aea:	8a 83       	std	Y+2, r24	; 0x02
    7aec:	9b 83       	std	Y+3, r25	; 0x03
    7aee:	2b c0       	rjmp	.+86     	; 0x7b46 <malloc+0x96>
    7af0:	80 93 29 26 	sts	0x2629, r24	; 0x802629 <__flp>
    7af4:	90 93 2a 26 	sts	0x262A, r25	; 0x80262a <__flp+0x1>
    7af8:	26 c0       	rjmp	.+76     	; 0x7b46 <malloc+0x96>
    7afa:	21 15       	cp	r18, r1
    7afc:	31 05       	cpc	r19, r1
    7afe:	19 f0       	breq	.+6      	; 0x7b06 <malloc+0x56>
    7b00:	42 17       	cp	r20, r18
    7b02:	53 07       	cpc	r21, r19
    7b04:	18 f4       	brcc	.+6      	; 0x7b0c <malloc+0x5c>
    7b06:	9a 01       	movw	r18, r20
    7b08:	be 01       	movw	r22, r28
    7b0a:	df 01       	movw	r26, r30
    7b0c:	ef 01       	movw	r28, r30
    7b0e:	02 80       	ldd	r0, Z+2	; 0x02
    7b10:	f3 81       	ldd	r31, Z+3	; 0x03
    7b12:	e0 2d       	mov	r30, r0
    7b14:	dc cf       	rjmp	.-72     	; 0x7ace <malloc+0x1e>
    7b16:	21 15       	cp	r18, r1
    7b18:	31 05       	cpc	r19, r1
    7b1a:	09 f1       	breq	.+66     	; 0x7b5e <malloc+0xae>
    7b1c:	28 1b       	sub	r18, r24
    7b1e:	39 0b       	sbc	r19, r25
    7b20:	24 30       	cpi	r18, 0x04	; 4
    7b22:	31 05       	cpc	r19, r1
    7b24:	90 f4       	brcc	.+36     	; 0x7b4a <malloc+0x9a>
    7b26:	12 96       	adiw	r26, 0x02	; 2
    7b28:	8d 91       	ld	r24, X+
    7b2a:	9c 91       	ld	r25, X
    7b2c:	13 97       	sbiw	r26, 0x03	; 3
    7b2e:	61 15       	cp	r22, r1
    7b30:	71 05       	cpc	r23, r1
    7b32:	21 f0       	breq	.+8      	; 0x7b3c <malloc+0x8c>
    7b34:	fb 01       	movw	r30, r22
    7b36:	82 83       	std	Z+2, r24	; 0x02
    7b38:	93 83       	std	Z+3, r25	; 0x03
    7b3a:	04 c0       	rjmp	.+8      	; 0x7b44 <malloc+0x94>
    7b3c:	80 93 29 26 	sts	0x2629, r24	; 0x802629 <__flp>
    7b40:	90 93 2a 26 	sts	0x262A, r25	; 0x80262a <__flp+0x1>
    7b44:	fd 01       	movw	r30, r26
    7b46:	32 96       	adiw	r30, 0x02	; 2
    7b48:	44 c0       	rjmp	.+136    	; 0x7bd2 <malloc+0x122>
    7b4a:	fd 01       	movw	r30, r26
    7b4c:	e2 0f       	add	r30, r18
    7b4e:	f3 1f       	adc	r31, r19
    7b50:	81 93       	st	Z+, r24
    7b52:	91 93       	st	Z+, r25
    7b54:	22 50       	subi	r18, 0x02	; 2
    7b56:	31 09       	sbc	r19, r1
    7b58:	2d 93       	st	X+, r18
    7b5a:	3c 93       	st	X, r19
    7b5c:	3a c0       	rjmp	.+116    	; 0x7bd2 <malloc+0x122>
    7b5e:	20 91 27 26 	lds	r18, 0x2627	; 0x802627 <__brkval>
    7b62:	30 91 28 26 	lds	r19, 0x2628	; 0x802628 <__brkval+0x1>
    7b66:	23 2b       	or	r18, r19
    7b68:	41 f4       	brne	.+16     	; 0x7b7a <malloc+0xca>
    7b6a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    7b6e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    7b72:	20 93 27 26 	sts	0x2627, r18	; 0x802627 <__brkval>
    7b76:	30 93 28 26 	sts	0x2628, r19	; 0x802628 <__brkval+0x1>
    7b7a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    7b7e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    7b82:	21 15       	cp	r18, r1
    7b84:	31 05       	cpc	r19, r1
    7b86:	41 f4       	brne	.+16     	; 0x7b98 <malloc+0xe8>
    7b88:	2d b7       	in	r18, 0x3d	; 61
    7b8a:	3e b7       	in	r19, 0x3e	; 62
    7b8c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    7b90:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    7b94:	24 1b       	sub	r18, r20
    7b96:	35 0b       	sbc	r19, r21
    7b98:	e0 91 27 26 	lds	r30, 0x2627	; 0x802627 <__brkval>
    7b9c:	f0 91 28 26 	lds	r31, 0x2628	; 0x802628 <__brkval+0x1>
    7ba0:	e2 17       	cp	r30, r18
    7ba2:	f3 07       	cpc	r31, r19
    7ba4:	a0 f4       	brcc	.+40     	; 0x7bce <malloc+0x11e>
    7ba6:	2e 1b       	sub	r18, r30
    7ba8:	3f 0b       	sbc	r19, r31
    7baa:	28 17       	cp	r18, r24
    7bac:	39 07       	cpc	r19, r25
    7bae:	78 f0       	brcs	.+30     	; 0x7bce <malloc+0x11e>
    7bb0:	ac 01       	movw	r20, r24
    7bb2:	4e 5f       	subi	r20, 0xFE	; 254
    7bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb6:	24 17       	cp	r18, r20
    7bb8:	35 07       	cpc	r19, r21
    7bba:	48 f0       	brcs	.+18     	; 0x7bce <malloc+0x11e>
    7bbc:	4e 0f       	add	r20, r30
    7bbe:	5f 1f       	adc	r21, r31
    7bc0:	40 93 27 26 	sts	0x2627, r20	; 0x802627 <__brkval>
    7bc4:	50 93 28 26 	sts	0x2628, r21	; 0x802628 <__brkval+0x1>
    7bc8:	81 93       	st	Z+, r24
    7bca:	91 93       	st	Z+, r25
    7bcc:	02 c0       	rjmp	.+4      	; 0x7bd2 <malloc+0x122>
    7bce:	e0 e0       	ldi	r30, 0x00	; 0
    7bd0:	f0 e0       	ldi	r31, 0x00	; 0
    7bd2:	cf 01       	movw	r24, r30
    7bd4:	df 91       	pop	r29
    7bd6:	cf 91       	pop	r28
    7bd8:	08 95       	ret

00007bda <free>:
    7bda:	0f 93       	push	r16
    7bdc:	1f 93       	push	r17
    7bde:	cf 93       	push	r28
    7be0:	df 93       	push	r29
    7be2:	00 97       	sbiw	r24, 0x00	; 0
    7be4:	09 f4       	brne	.+2      	; 0x7be8 <free+0xe>
    7be6:	8c c0       	rjmp	.+280    	; 0x7d00 <free+0x126>
    7be8:	fc 01       	movw	r30, r24
    7bea:	32 97       	sbiw	r30, 0x02	; 2
    7bec:	12 82       	std	Z+2, r1	; 0x02
    7bee:	13 82       	std	Z+3, r1	; 0x03
    7bf0:	00 91 29 26 	lds	r16, 0x2629	; 0x802629 <__flp>
    7bf4:	10 91 2a 26 	lds	r17, 0x262A	; 0x80262a <__flp+0x1>
    7bf8:	01 15       	cp	r16, r1
    7bfa:	11 05       	cpc	r17, r1
    7bfc:	81 f4       	brne	.+32     	; 0x7c1e <free+0x44>
    7bfe:	20 81       	ld	r18, Z
    7c00:	31 81       	ldd	r19, Z+1	; 0x01
    7c02:	82 0f       	add	r24, r18
    7c04:	93 1f       	adc	r25, r19
    7c06:	20 91 27 26 	lds	r18, 0x2627	; 0x802627 <__brkval>
    7c0a:	30 91 28 26 	lds	r19, 0x2628	; 0x802628 <__brkval+0x1>
    7c0e:	28 17       	cp	r18, r24
    7c10:	39 07       	cpc	r19, r25
    7c12:	79 f5       	brne	.+94     	; 0x7c72 <free+0x98>
    7c14:	e0 93 27 26 	sts	0x2627, r30	; 0x802627 <__brkval>
    7c18:	f0 93 28 26 	sts	0x2628, r31	; 0x802628 <__brkval+0x1>
    7c1c:	71 c0       	rjmp	.+226    	; 0x7d00 <free+0x126>
    7c1e:	d8 01       	movw	r26, r16
    7c20:	40 e0       	ldi	r20, 0x00	; 0
    7c22:	50 e0       	ldi	r21, 0x00	; 0
    7c24:	ae 17       	cp	r26, r30
    7c26:	bf 07       	cpc	r27, r31
    7c28:	50 f4       	brcc	.+20     	; 0x7c3e <free+0x64>
    7c2a:	12 96       	adiw	r26, 0x02	; 2
    7c2c:	2d 91       	ld	r18, X+
    7c2e:	3c 91       	ld	r19, X
    7c30:	13 97       	sbiw	r26, 0x03	; 3
    7c32:	ad 01       	movw	r20, r26
    7c34:	21 15       	cp	r18, r1
    7c36:	31 05       	cpc	r19, r1
    7c38:	09 f1       	breq	.+66     	; 0x7c7c <free+0xa2>
    7c3a:	d9 01       	movw	r26, r18
    7c3c:	f3 cf       	rjmp	.-26     	; 0x7c24 <free+0x4a>
    7c3e:	9d 01       	movw	r18, r26
    7c40:	da 01       	movw	r26, r20
    7c42:	22 83       	std	Z+2, r18	; 0x02
    7c44:	33 83       	std	Z+3, r19	; 0x03
    7c46:	60 81       	ld	r22, Z
    7c48:	71 81       	ldd	r23, Z+1	; 0x01
    7c4a:	86 0f       	add	r24, r22
    7c4c:	97 1f       	adc	r25, r23
    7c4e:	82 17       	cp	r24, r18
    7c50:	93 07       	cpc	r25, r19
    7c52:	69 f4       	brne	.+26     	; 0x7c6e <free+0x94>
    7c54:	ec 01       	movw	r28, r24
    7c56:	28 81       	ld	r18, Y
    7c58:	39 81       	ldd	r19, Y+1	; 0x01
    7c5a:	26 0f       	add	r18, r22
    7c5c:	37 1f       	adc	r19, r23
    7c5e:	2e 5f       	subi	r18, 0xFE	; 254
    7c60:	3f 4f       	sbci	r19, 0xFF	; 255
    7c62:	20 83       	st	Z, r18
    7c64:	31 83       	std	Z+1, r19	; 0x01
    7c66:	8a 81       	ldd	r24, Y+2	; 0x02
    7c68:	9b 81       	ldd	r25, Y+3	; 0x03
    7c6a:	82 83       	std	Z+2, r24	; 0x02
    7c6c:	93 83       	std	Z+3, r25	; 0x03
    7c6e:	45 2b       	or	r20, r21
    7c70:	29 f4       	brne	.+10     	; 0x7c7c <free+0xa2>
    7c72:	e0 93 29 26 	sts	0x2629, r30	; 0x802629 <__flp>
    7c76:	f0 93 2a 26 	sts	0x262A, r31	; 0x80262a <__flp+0x1>
    7c7a:	42 c0       	rjmp	.+132    	; 0x7d00 <free+0x126>
    7c7c:	12 96       	adiw	r26, 0x02	; 2
    7c7e:	ed 93       	st	X+, r30
    7c80:	fc 93       	st	X, r31
    7c82:	13 97       	sbiw	r26, 0x03	; 3
    7c84:	ed 01       	movw	r28, r26
    7c86:	49 91       	ld	r20, Y+
    7c88:	59 91       	ld	r21, Y+
    7c8a:	9e 01       	movw	r18, r28
    7c8c:	24 0f       	add	r18, r20
    7c8e:	35 1f       	adc	r19, r21
    7c90:	e2 17       	cp	r30, r18
    7c92:	f3 07       	cpc	r31, r19
    7c94:	71 f4       	brne	.+28     	; 0x7cb2 <free+0xd8>
    7c96:	80 81       	ld	r24, Z
    7c98:	91 81       	ldd	r25, Z+1	; 0x01
    7c9a:	84 0f       	add	r24, r20
    7c9c:	95 1f       	adc	r25, r21
    7c9e:	02 96       	adiw	r24, 0x02	; 2
    7ca0:	8d 93       	st	X+, r24
    7ca2:	9c 93       	st	X, r25
    7ca4:	11 97       	sbiw	r26, 0x01	; 1
    7ca6:	82 81       	ldd	r24, Z+2	; 0x02
    7ca8:	93 81       	ldd	r25, Z+3	; 0x03
    7caa:	12 96       	adiw	r26, 0x02	; 2
    7cac:	8d 93       	st	X+, r24
    7cae:	9c 93       	st	X, r25
    7cb0:	13 97       	sbiw	r26, 0x03	; 3
    7cb2:	e0 e0       	ldi	r30, 0x00	; 0
    7cb4:	f0 e0       	ldi	r31, 0x00	; 0
    7cb6:	d8 01       	movw	r26, r16
    7cb8:	12 96       	adiw	r26, 0x02	; 2
    7cba:	8d 91       	ld	r24, X+
    7cbc:	9c 91       	ld	r25, X
    7cbe:	13 97       	sbiw	r26, 0x03	; 3
    7cc0:	00 97       	sbiw	r24, 0x00	; 0
    7cc2:	19 f0       	breq	.+6      	; 0x7cca <free+0xf0>
    7cc4:	f8 01       	movw	r30, r16
    7cc6:	8c 01       	movw	r16, r24
    7cc8:	f6 cf       	rjmp	.-20     	; 0x7cb6 <free+0xdc>
    7cca:	8d 91       	ld	r24, X+
    7ccc:	9c 91       	ld	r25, X
    7cce:	98 01       	movw	r18, r16
    7cd0:	2e 5f       	subi	r18, 0xFE	; 254
    7cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    7cd4:	82 0f       	add	r24, r18
    7cd6:	93 1f       	adc	r25, r19
    7cd8:	20 91 27 26 	lds	r18, 0x2627	; 0x802627 <__brkval>
    7cdc:	30 91 28 26 	lds	r19, 0x2628	; 0x802628 <__brkval+0x1>
    7ce0:	28 17       	cp	r18, r24
    7ce2:	39 07       	cpc	r19, r25
    7ce4:	69 f4       	brne	.+26     	; 0x7d00 <free+0x126>
    7ce6:	30 97       	sbiw	r30, 0x00	; 0
    7ce8:	29 f4       	brne	.+10     	; 0x7cf4 <free+0x11a>
    7cea:	10 92 29 26 	sts	0x2629, r1	; 0x802629 <__flp>
    7cee:	10 92 2a 26 	sts	0x262A, r1	; 0x80262a <__flp+0x1>
    7cf2:	02 c0       	rjmp	.+4      	; 0x7cf8 <free+0x11e>
    7cf4:	12 82       	std	Z+2, r1	; 0x02
    7cf6:	13 82       	std	Z+3, r1	; 0x03
    7cf8:	00 93 27 26 	sts	0x2627, r16	; 0x802627 <__brkval>
    7cfc:	10 93 28 26 	sts	0x2628, r17	; 0x802628 <__brkval+0x1>
    7d00:	df 91       	pop	r29
    7d02:	cf 91       	pop	r28
    7d04:	1f 91       	pop	r17
    7d06:	0f 91       	pop	r16
    7d08:	08 95       	ret

00007d0a <memcpy>:
    7d0a:	fb 01       	movw	r30, r22
    7d0c:	dc 01       	movw	r26, r24
    7d0e:	02 c0       	rjmp	.+4      	; 0x7d14 <memcpy+0xa>
    7d10:	01 90       	ld	r0, Z+
    7d12:	0d 92       	st	X+, r0
    7d14:	41 50       	subi	r20, 0x01	; 1
    7d16:	50 40       	sbci	r21, 0x00	; 0
    7d18:	d8 f7       	brcc	.-10     	; 0x7d10 <memcpy+0x6>
    7d1a:	08 95       	ret

00007d1c <eeprom_read_dword>:
    7d1c:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <eeprom_mapen>
    7d20:	60 81       	ld	r22, Z
    7d22:	71 81       	ldd	r23, Z+1	; 0x01
    7d24:	82 81       	ldd	r24, Z+2	; 0x02
    7d26:	93 81       	ldd	r25, Z+3	; 0x03
    7d28:	08 95       	ret

00007d2a <eeprom_write_dword>:
    7d2a:	24 2f       	mov	r18, r20
    7d2c:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_write_r18>
    7d30:	25 2f       	mov	r18, r21
    7d32:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_write_r18>
    7d36:	0c 94 9d 3e 	jmp	0x7d3a	; 0x7d3a <eeprom_write_word>

00007d3a <eeprom_write_word>:
    7d3a:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <eeprom_write_byte>
    7d3e:	27 2f       	mov	r18, r23
    7d40:	0c 94 b3 3e 	jmp	0x7d66	; 0x7d66 <eeprom_write_r18>

00007d44 <eeprom_read_byte>:
    7d44:	03 d0       	rcall	.+6      	; 0x7d4c <eeprom_mapen>
    7d46:	80 81       	ld	r24, Z
    7d48:	99 27       	eor	r25, r25
    7d4a:	08 95       	ret

00007d4c <eeprom_mapen>:
    7d4c:	e0 ec       	ldi	r30, 0xC0	; 192
    7d4e:	f1 e0       	ldi	r31, 0x01	; 1
    7d50:	37 85       	ldd	r19, Z+15	; 0x0f
    7d52:	37 fd       	sbrc	r19, 7
    7d54:	fd cf       	rjmp	.-6      	; 0x7d50 <eeprom_mapen+0x4>
    7d56:	34 85       	ldd	r19, Z+12	; 0x0c
    7d58:	38 60       	ori	r19, 0x08	; 8
    7d5a:	34 87       	std	Z+12, r19	; 0x0c
    7d5c:	fc 01       	movw	r30, r24
    7d5e:	e0 50       	subi	r30, 0x00	; 0
    7d60:	f0 4f       	sbci	r31, 0xF0	; 240
    7d62:	08 95       	ret

00007d64 <eeprom_write_byte>:
    7d64:	26 2f       	mov	r18, r22

00007d66 <eeprom_write_r18>:
    7d66:	e0 ec       	ldi	r30, 0xC0	; 192
    7d68:	f1 e0       	ldi	r31, 0x01	; 1
    7d6a:	37 85       	ldd	r19, Z+15	; 0x0f
    7d6c:	37 fd       	sbrc	r19, 7
    7d6e:	fd cf       	rjmp	.-6      	; 0x7d6a <eeprom_write_r18+0x4>
    7d70:	34 85       	ldd	r19, Z+12	; 0x0c
    7d72:	37 7f       	andi	r19, 0xF7	; 247
    7d74:	34 87       	std	Z+12, r19	; 0x0c
    7d76:	37 85       	ldd	r19, Z+15	; 0x0f
    7d78:	31 ff       	sbrs	r19, 1
    7d7a:	09 c0       	rjmp	.+18     	; 0x7d8e <eeprom_write_r18+0x28>
    7d7c:	36 e3       	ldi	r19, 0x36	; 54
    7d7e:	32 87       	std	Z+10, r19	; 0x0a
    7d80:	38 ed       	ldi	r19, 0xD8	; 216
    7d82:	34 bf       	out	0x34, r19	; 52
    7d84:	31 e0       	ldi	r19, 0x01	; 1
    7d86:	33 87       	std	Z+11, r19	; 0x0b
    7d88:	37 85       	ldd	r19, Z+15	; 0x0f
    7d8a:	37 fd       	sbrc	r19, 7
    7d8c:	fd cf       	rjmp	.-6      	; 0x7d88 <eeprom_write_r18+0x22>
    7d8e:	33 e3       	ldi	r19, 0x33	; 51
    7d90:	32 87       	std	Z+10, r19	; 0x0a
    7d92:	80 83       	st	Z, r24
    7d94:	91 83       	std	Z+1, r25	; 0x01
    7d96:	12 82       	std	Z+2, r1	; 0x02
    7d98:	24 83       	std	Z+4, r18	; 0x04
    7d9a:	25 e3       	ldi	r18, 0x35	; 53
    7d9c:	22 87       	std	Z+10, r18	; 0x0a
    7d9e:	28 ed       	ldi	r18, 0xD8	; 216
    7da0:	31 e0       	ldi	r19, 0x01	; 1
    7da2:	24 bf       	out	0x34, r18	; 52
    7da4:	33 87       	std	Z+11, r19	; 0x0b
    7da6:	01 96       	adiw	r24, 0x01	; 1
    7da8:	08 95       	ret

00007daa <__do_global_dtors>:
    7daa:	12 e0       	ldi	r17, 0x02	; 2
    7dac:	cc e8       	ldi	r28, 0x8C	; 140
    7dae:	d2 e0       	ldi	r29, 0x02	; 2
    7db0:	00 e0       	ldi	r16, 0x00	; 0
    7db2:	06 c0       	rjmp	.+12     	; 0x7dc0 <__do_global_dtors+0x16>
    7db4:	80 2f       	mov	r24, r16
    7db6:	fe 01       	movw	r30, r28
    7db8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__tablejump2__>
    7dbc:	21 96       	adiw	r28, 0x01	; 1
    7dbe:	01 1d       	adc	r16, r1
    7dc0:	cd 38       	cpi	r28, 0x8D	; 141
    7dc2:	d1 07       	cpc	r29, r17
    7dc4:	80 e0       	ldi	r24, 0x00	; 0
    7dc6:	08 07       	cpc	r16, r24
    7dc8:	a9 f7       	brne	.-22     	; 0x7db4 <__do_global_dtors+0xa>
    7dca:	f8 94       	cli

00007dcc <__stop_program>:
    7dcc:	ff cf       	rjmp	.-2      	; 0x7dcc <__stop_program>
