
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00802000  00005532  000055c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a71  00802154  00802154  0000571a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000571a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000574c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  0000578c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ca47  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022e3  00000000  00000000  00012ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028dc  00000000  00000000  00014d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f6c  00000000  00000000  00017674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ca4  00000000  00000000  0001a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f2c  00000000  00000000  0001f284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  000271b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 02 	jmp	0x432	; 0x432 <__dtors_end>
       4:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_1>
       8:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_2>
       c:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__vector_3>
      10:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__vector_4>
      14:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__vector_5>
      18:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__vector_6>
      1c:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_7>
      20:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__vector_8>
      24:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__vector_9>
      28:	0c 94 95 12 	jmp	0x252a	; 0x252a <__vector_10>
      2c:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__vector_11>
      30:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__vector_12>
      34:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_13>
      38:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__vector_14>
      3c:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__vector_15>
      40:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__vector_16>
      44:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__vector_17>
      48:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__vector_18>
      4c:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__vector_19>
      50:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__vector_20>
      54:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_21>
      58:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__vector_22>
      5c:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__vector_23>
      60:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__vector_24>
      64:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__vector_25>
      68:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__vector_26>
      6c:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__vector_27>
      70:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__vector_28>
      74:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__vector_29>
      78:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__vector_30>
      7c:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__vector_31>
      80:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_32>
      84:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__vector_33>
      88:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__vector_34>
      8c:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__vector_35>
      90:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__vector_36>
      94:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__vector_37>
      98:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_38>
      9c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__vector_39>
      a0:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_40>
      a4:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__vector_41>
      a8:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__vector_42>
      ac:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__vector_43>
      b0:	0c 94 17 19 	jmp	0x322e	; 0x322e <__vector_44>
      b4:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__vector_45>
      b8:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__vector_46>
      bc:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__vector_47>
      c0:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__vector_48>
      c4:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__vector_49>
      c8:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__vector_50>
      cc:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__vector_51>
      d0:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__vector_52>
      d4:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__vector_53>
      d8:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <__vector_54>
      dc:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__vector_55>
      e0:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__vector_56>
      e4:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__vector_57>
      e8:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__vector_58>
      ec:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__vector_59>
      f0:	0c 94 27 1c 	jmp	0x384e	; 0x384e <__vector_60>
      f4:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__vector_61>
      f8:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__vector_62>
      fc:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__vector_63>
     100:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__vector_64>
     104:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__vector_65>
     108:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__vector_66>
     10c:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__vector_67>
     110:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__vector_68>
     114:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__vector_69>
     118:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <__vector_70>
     11c:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__vector_71>
     120:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__vector_72>
     124:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <__vector_73>
     128:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <__vector_74>
     12c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     130:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     134:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__vector_77>
     138:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <__vector_78>
     13c:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__vector_79>
     140:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__vector_80>
     144:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__vector_81>
     148:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <__vector_82>
     14c:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__vector_83>
     150:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__vector_84>
     154:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__vector_85>
     158:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__vector_86>
     15c:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <__vector_87>
     160:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__vector_88>
     164:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <__vector_89>
     168:	0c 94 83 21 	jmp	0x4306	; 0x4306 <__vector_90>
     16c:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__vector_91>
     170:	0c 94 e5 21 	jmp	0x43ca	; 0x43ca <__vector_92>
     174:	0c 94 16 22 	jmp	0x442c	; 0x442c <__vector_93>
     178:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     17c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     180:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     184:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     188:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     18c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     190:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     194:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     198:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     19c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1a0:	0c 94 47 22 	jmp	0x448e	; 0x448e <__vector_104>
     1a4:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <__vector_105>
     1a8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1ac:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1b0:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__vector_108>
     1b4:	0c 94 da 22 	jmp	0x45b4	; 0x45b4 <__vector_109>
     1b8:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <__vector_110>
     1bc:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__vector_111>
     1c0:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__vector_112>
     1c4:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__vector_113>
     1c8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1cc:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1d0:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1d4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1d8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__bad_interrupt>
     1dc:	0c 94 cf 23 	jmp	0x479e	; 0x479e <__vector_119>
     1e0:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__vector_120>
     1e4:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__vector_121>
     1e8:	19 04       	cpc	r1, r9
     1ea:	1c 04       	cpc	r1, r12
     1ec:	2d 04       	cpc	r2, r13
     1ee:	3e 04       	cpc	r3, r14
     1f0:	80 04       	cpc	r8, r0
     1f2:	80 04       	cpc	r8, r0
     1f4:	80 04       	cpc	r8, r0
     1f6:	50 04       	cpc	r5, r0
     1f8:	54 04       	cpc	r5, r4
     1fa:	58 04       	cpc	r5, r8
     1fc:	5c 04       	cpc	r5, r12
     1fe:	60 04       	cpc	r6, r0
     200:	64 04       	cpc	r6, r4
     202:	80 04       	cpc	r8, r0
     204:	68 04       	cpc	r6, r8
     206:	6c 04       	cpc	r6, r12
     208:	70 04       	cpc	r7, r0
     20a:	74 04       	cpc	r7, r4
     20c:	78 04       	cpc	r7, r8
     20e:	7c 04       	cpc	r7, r12
     210:	86 07       	cpc	r24, r22
     212:	a2 0b       	sbc	r26, r18
     214:	a2 0b       	sbc	r26, r18
     216:	a2 0b       	sbc	r26, r18
     218:	a2 0b       	sbc	r26, r18
     21a:	9f 07       	cpc	r25, r31
     21c:	ce 07       	cpc	r28, r30
     21e:	ef 07       	cpc	r30, r31
     220:	3c 08       	sbc	r3, r12
     222:	a2 0b       	sbc	r26, r18
     224:	a2 0b       	sbc	r26, r18
     226:	a2 0b       	sbc	r26, r18
     228:	a2 0b       	sbc	r26, r18
     22a:	a2 0b       	sbc	r26, r18
     22c:	a2 0b       	sbc	r26, r18
     22e:	a2 0b       	sbc	r26, r18
     230:	b0 08       	sbc	r11, r0
     232:	96 08       	sbc	r9, r6
     234:	dd 09       	sbc	r29, r13
     236:	ec 09       	sbc	r30, r12
     238:	fb 09       	sbc	r31, r11
     23a:	0a 0a       	sbc	r0, r26
     23c:	19 0a       	sbc	r1, r25
     23e:	28 0a       	sbc	r2, r24
     240:	37 0a       	sbc	r3, r23
     242:	46 0a       	sbc	r4, r22
     244:	55 0a       	sbc	r5, r21
     246:	64 0a       	sbc	r6, r20
     248:	73 0a       	sbc	r7, r19
     24a:	82 0a       	sbc	r8, r18
     24c:	91 0a       	sbc	r9, r17
     24e:	a0 0a       	sbc	r10, r16
     250:	2f 27       	eor	r18, r31
     252:	2f 27       	eor	r18, r31
     254:	37 27       	eor	r19, r23
     256:	3f 27       	eor	r19, r31
     258:	4a 27       	eor	r20, r26
     25a:	a2 27       	eor	r26, r18
     25c:	a9 27       	eor	r26, r25
     25e:	d5 27       	eor	r29, r21
     260:	d5 27       	eor	r29, r21
     262:	d4 27       	eor	r29, r20
     264:	d4 27       	eor	r29, r20

00000266 <__trampolines_start>:
     266:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     26a:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <_ZN16CLaserControlApp3RunEv+0x696>
     26e:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     272:	0c 94 ef 07 	jmp	0xfde	; 0xfde <_ZN16CLaserControlApp3RunEv+0x18e>
     276:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9c>
     27a:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     27e:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     282:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     286:	0c 94 a9 27 	jmp	0x4f52	; 0x4f52 <_ZN9CMBSender13OnReceiveByteEh+0x116>
     28a:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_ZN7CTimerC5StartEj>
     28e:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__cxa_pure_virtual>
     292:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <_ZN16CLaserControlApp3RunEv+0x6b4>
     296:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <_ZN16CLaserControlApp3RunEv+0x5c4>
     29a:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     29e:	0c 94 ba 25 	jmp	0x4b74	; 0x4b74 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     2a2:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <_ZN7CTimerC9SetPeriodEj>
     2a6:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2aa:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2ae:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <_ZN16CLaserControlApp3RunEv+0x5a6>
     2b2:	0c 94 1c 04 	jmp	0x838	; 0x838 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     2b6:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xbc>
     2ba:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xdc>
     2be:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     2c2:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2c6:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2ca:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <_ZN7CTimerC4StopEv>
     2ce:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     2d2:	0c 94 01 04 	jmp	0x802	; 0x802 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     2d6:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <_ZN16CLaserControlApp3RunEv+0x228>
     2da:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <_ZN7CTimerF8SetCOMPDEj>
     2de:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe4>
     2e2:	0c 94 96 08 	jmp	0x112c	; 0x112c <_ZN16CLaserControlApp3RunEv+0x2dc>
     2e6:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd4>
     2ea:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2ee:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <_ZN7CTimerF8SetCOMPAEj>
     2f2:	0c 94 a4 02 	jmp	0x548	; 0x548 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2f6:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xcc>
     2fa:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     2fe:	0c 94 4c 02 	jmp	0x498	; 0x498 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     302:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <_ZN4CSPI16StaticOnTransmitEPv>
     306:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     30a:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     30e:	0c 94 80 04 	jmp	0x900	; 0x900 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     312:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <_ZN16CLaserControlApp3RunEv+0x678>
     316:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xec>
     31a:	0c 94 3d 28 	jmp	0x507a	; 0x507a <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     31e:	0c 94 a2 27 	jmp	0x4f44	; 0x4f44 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     322:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf4>
     326:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     32a:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     32e:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <_ZN7CTimerC8SetCOMPCEj>
     332:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN16CLaserControlApp3RunEv+0x600>
     336:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <_ZN7CTimerC8SetCOMPAEj>
     33a:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
     33e:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     342:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     346:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     34a:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <_ZN16CLaserControlApp3RunEv+0x56a>
     34e:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <_ZN7CTimerC8SetCOMPBEj>
     352:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     356:	0c 94 87 02 	jmp	0x50e	; 0x50e <_ZN10CDGUSUSART15GetReceivedByteEv>
     35a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <_ZN16CLaserControlApp3RunEv+0xee>
     35e:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <_GLOBAL__sub_D_dacSPI>
     362:	0c 94 d5 27 	jmp	0x4faa	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     366:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <_GLOBAL__sub_I_dacSPI>
     36a:	0c 94 3f 27 	jmp	0x4e7e	; 0x4e7e <_ZN9CMBSender13OnReceiveByteEh+0x42>
     36e:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_GLOBAL__sub_I_timer>
     372:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_ZN10CDGUSUSART14IsTransmittingEv>
     376:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb4>
     37a:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <_ZN16CLaserControlApp3RunEv+0x65a>
     37e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <_ZN7CTimerC8SetCOMPDEj>
     382:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <_ZN9CMBSender13OnReceiveByteEh+0x32>
     386:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <_ZN16CLaserControlApp3RunEv+0x6d2>
     38a:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     38e:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <_ZN7CTimerF4StopEv>
     392:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     396:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     39a:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     39e:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     3a2:	0c 94 02 04 	jmp	0x804	; 0x804 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     3a6:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <_ZN9CMBSender18OnVariableReceivedEjPjj>
     3aa:	0c 94 bf 02 	jmp	0x57e	; 0x57e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     3ae:	0c 94 95 02 	jmp	0x52a	; 0x52a <_ZN10CDGUSUSART11IsReceivingEv>
     3b2:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <_ZN16CLaserControlApp3RunEv+0x310>
     3b6:	0c 94 03 10 	jmp	0x2006	; 0x2006 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3ba:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <_ZN16CLaserControlApp3RunEv+0x588>
     3be:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     3c2:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
     3c6:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <_ZN16CLaserControlApp3RunEv+0x14c>
     3ca:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa4>
     3ce:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <_ZN16CMBEventsHandler11FreeBuffersEv>
     3d2:	0c 94 4a 27 	jmp	0x4e94	; 0x4e94 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     3d6:	0c 94 27 10 	jmp	0x204e	; 0x204e <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3da:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <_ZN7CTimerF9SetPeriodEj>
     3de:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <_ZN16CLaserControlApp3RunEv+0x6f0>
     3e2:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     3e6:	0c 94 46 0a 	jmp	0x148c	; 0x148c <_ZN16CLaserControlApp3RunEv+0x63c>
     3ea:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ee:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <_ZN7CTimerF8SetCOMPBEj>
     3f2:	0c 94 15 10 	jmp	0x202a	; 0x202a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3f6:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_ZN7CTimerF5StartEj>
     3fa:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <_ZN16CLaserControlApp3RunEv+0xbc>
     3fe:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     402:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     406:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <_ZN7CTimerF8SetCOMPCEj>
     40a:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <_GLOBAL__sub_D_timer>
     40e:	0c 94 9c 02 	jmp	0x538	; 0x538 <_ZN10CDGUSUSART11IsDataEmptyEv>
     412:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     416:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <_ZN9CMBSender13OnReceiveByteEh+0x22>
     41a:	0c 94 37 0a 	jmp	0x146e	; 0x146e <_ZN16CLaserControlApp3RunEv+0x61e>
     41e:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     422:	0c 94 8a 02 	jmp	0x514	; 0x514 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     426:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <_ZN16CLaserControlApp3RunEv+0x5e2>

0000042a <__ctors_start>:
     42a:	61 05       	cpc	r22, r1
     42c:	65 24       	eor	r6, r5

0000042e <__ctors_end>:
     42e:	6a 05       	cpc	r22, r10
     430:	7e 24       	eor	r7, r14

00000432 <__dtors_end>:
     432:	11 24       	eor	r1, r1
     434:	1f be       	out	0x3f, r1	; 63
     436:	cf ef       	ldi	r28, 0xFF	; 255
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df e3       	ldi	r29, 0x3F	; 63
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	0c bf       	out	0x3c, r16	; 60

00000442 <__do_copy_data>:
     442:	11 e2       	ldi	r17, 0x21	; 33
     444:	a0 e0       	ldi	r26, 0x00	; 0
     446:	b0 e2       	ldi	r27, 0x20	; 32
     448:	e2 e3       	ldi	r30, 0x32	; 50
     44a:	f5 e5       	ldi	r31, 0x55	; 85
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	0b bf       	out	0x3b, r16	; 59
     450:	02 c0       	rjmp	.+4      	; 0x456 <__do_copy_data+0x14>
     452:	07 90       	elpm	r0, Z+
     454:	0d 92       	st	X+, r0
     456:	a4 35       	cpi	r26, 0x54	; 84
     458:	b1 07       	cpc	r27, r17
     45a:	d9 f7       	brne	.-10     	; 0x452 <__do_copy_data+0x10>

0000045c <__do_clear_bss>:
     45c:	2b e2       	ldi	r18, 0x2B	; 43
     45e:	a4 e5       	ldi	r26, 0x54	; 84
     460:	b1 e2       	ldi	r27, 0x21	; 33
     462:	01 c0       	rjmp	.+2      	; 0x466 <.do_clear_bss_start>

00000464 <.do_clear_bss_loop>:
     464:	1d 92       	st	X+, r1

00000466 <.do_clear_bss_start>:
     466:	a5 3c       	cpi	r26, 0xC5	; 197
     468:	b2 07       	cpc	r27, r18
     46a:	e1 f7       	brne	.-8      	; 0x464 <.do_clear_bss_loop>

0000046c <__do_global_ctors>:
     46c:	12 e0       	ldi	r17, 0x02	; 2
     46e:	c7 e1       	ldi	r28, 0x17	; 23
     470:	d2 e0       	ldi	r29, 0x02	; 2
     472:	00 e0       	ldi	r16, 0x00	; 0
     474:	06 c0       	rjmp	.+12     	; 0x482 <__do_global_ctors+0x16>
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	01 09       	sbc	r16, r1
     47a:	80 2f       	mov	r24, r16
     47c:	fe 01       	movw	r30, r28
     47e:	0e 94 18 29 	call	0x5230	; 0x5230 <__tablejump2__>
     482:	c5 31       	cpi	r28, 0x15	; 21
     484:	d1 07       	cpc	r29, r17
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 07       	cpc	r16, r24
     48a:	a9 f7       	brne	.-22     	; 0x476 <__do_global_ctors+0xa>
     48c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <main>
     490:	0c 94 87 2a 	jmp	0x550e	; 0x550e <__do_global_dtors>

00000494 <__bad_interrupt>:
     494:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000498 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     498:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     49a:	e0 e6       	ldi	r30, 0x60	; 96
     49c:	f6 e0       	ldi	r31, 0x06	; 6
     49e:	88 e0       	ldi	r24, 0x08	; 8
     4a0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     4a6:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     4a8:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     4aa:	e0 ea       	ldi	r30, 0xA0	; 160
     4ac:	f9 e0       	ldi	r31, 0x09	; 9
     4ae:	84 e1       	ldi	r24, 0x14	; 20
     4b0:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     4b2:	88 e1       	ldi	r24, 0x18	; 24
     4b4:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     4b6:	84 81       	ldd	r24, Z+4	; 0x04
     4b8:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     4ba:	41 30       	cpi	r20, 0x01	; 1
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     4be:	42 30       	cpi	r20, 0x02	; 2
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     4c4:	80 e2       	ldi	r24, 0x20	; 32
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     4c8:	80 e3       	ldi	r24, 0x30	; 48
		break;
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     4ce:	22 23       	and	r18, r18
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     4d2:	21 30       	cpi	r18, 0x01	; 1
     4d4:	19 f0       	breq	.+6      	; 0x4dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     4d8:	87 7f       	andi	r24, 0xF7	; 247
		break;
     4da:	01 c0       	rjmp	.+2      	; 0x4de <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     4dc:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     4de:	01 11       	cpse	r16, r1
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     4e2:	93 e4       	ldi	r25, 0x43	; 67
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	89 2b       	or	r24, r25
     4ea:	e0 ea       	ldi	r30, 0xA0	; 160
     4ec:	f9 e0       	ldi	r31, 0x09	; 9
     4ee:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	db 01       	movw	r26, r22
     4f4:	aa 5d       	subi	r26, 0xDA	; 218
     4f6:	bf 4d       	sbci	r27, 0xDF	; 223
     4f8:	8c 91       	ld	r24, X
     4fa:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     4fc:	db 01       	movw	r26, r22
     4fe:	aa 5f       	subi	r26, 0xFA	; 250
     500:	bf 4d       	sbci	r27, 0xDF	; 223
     502:	8c 91       	ld	r24, X
     504:	82 95       	swap	r24
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     50e:	80 91 a0 09 	lds	r24, 0x09A0
}
     512:	08 95       	ret

00000514 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     514:	60 93 a0 09 	sts	0x09A0, r22
     518:	08 95       	ret

0000051a <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     51a:	80 91 a1 09 	lds	r24, 0x09A1
     51e:	86 fb       	bst	r24, 6
     520:	88 27       	eor	r24, r24
     522:	80 f9       	bld	r24, 0
}
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	89 27       	eor	r24, r25
     528:	08 95       	ret

0000052a <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     52a:	80 91 a1 09 	lds	r24, 0x09A1
     52e:	80 95       	com	r24
}
     530:	88 1f       	adc	r24, r24
     532:	88 27       	eor	r24, r24
     534:	88 1f       	adc	r24, r24
     536:	08 95       	ret

00000538 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     538:	80 91 a1 09 	lds	r24, 0x09A1
     53c:	85 fb       	bst	r24, 5
     53e:	88 27       	eor	r24, r24
     540:	80 f9       	bld	r24, 0
}
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	89 27       	eor	r24, r25
     546:	08 95       	ret

00000548 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     548:	60 93 2f 23 	sts	0x232F, r22
     54c:	70 93 30 23 	sts	0x2330, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     550:	40 93 39 22 	sts	0x2239, r20
     554:	50 93 3a 22 	sts	0x223A, r21
     558:	08 95       	ret

0000055a <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     55a:	60 93 33 23 	sts	0x2333, r22
     55e:	70 93 34 23 	sts	0x2334, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     562:	40 93 3d 22 	sts	0x223D, r20
     566:	50 93 3e 22 	sts	0x223E, r21
     56a:	08 95       	ret

0000056c <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     56c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     56e:	8b e6       	ldi	r24, 0x6B	; 107
     570:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     572:	80 ea       	ldi	r24, 0xA0	; 160
     574:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     576:	89 e0       	ldi	r24, 0x09	; 9
     578:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     57a:	12 86       	std	Z+10, r1	; 0x0a
     57c:	08 95       	ret

0000057e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     57e:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     580:	8c e6       	ldi	r24, 0x6C	; 108
     582:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     584:	80 ea       	ldi	r24, 0xA0	; 160
     586:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     588:	89 e0       	ldi	r24, 0x09	; 9
     58a:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     58c:	16 86       	std	Z+14, r1	; 0x0e
     58e:	08 95       	ret

00000590 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6CUSARTC1Ev>
     59a:	8a e4       	ldi	r24, 0x4A	; 74
     59c:	90 e2       	ldi	r25, 0x20	; 32
     59e:	88 83       	st	Y, r24
     5a0:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     5a8:	2a e4       	ldi	r18, 0x4A	; 74
     5aa:	30 e2       	ldi	r19, 0x20	; 32
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
     5b0:	31 83       	std	Z+1, r19	; 0x01
     5b2:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN6CUSARTD1Ev>
     5b6:	08 95       	ret

000005b8 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     5b8:	08 95       	ret

000005ba <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     5ba:	08 95       	ret

000005bc <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
     5c2:	e0 e4       	ldi	r30, 0x40	; 64
     5c4:	f6 e0       	ldi	r31, 0x06	; 6
     5c6:	2f ef       	ldi	r18, 0xFF	; 255
     5c8:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5ca:	98 ea       	ldi	r25, 0xA8	; 168
     5cc:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5ce:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d0:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d2:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d4:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d6:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5d8:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5da:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
     5dc:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     5de:	a0 e8       	ldi	r26, 0x80	; 128
     5e0:	b6 e0       	ldi	r27, 0x06	; 6
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	8c 93       	st	X, r24
     5e8:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     5ea:	53 96       	adiw	r26, 0x13	; 19
     5ec:	1c 92       	st	X, r1
     5ee:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
     5f0:	14 96       	adiw	r26, 0x04	; 4
     5f2:	1c 92       	st	X, r1
     5f4:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5f6:	e0 ea       	ldi	r30, 0xA0	; 160
     5f8:	f6 e0       	ldi	r31, 0x06	; 6
     5fa:	90 ec       	ldi	r25, 0xC0	; 192
     5fc:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     602:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     604:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     606:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     608:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     60a:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     60c:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     60e:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     610:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     612:	e0 e6       	ldi	r30, 0x60	; 96
     614:	f6 e0       	ldi	r31, 0x06	; 6
     616:	21 e1       	ldi	r18, 0x11	; 17
     618:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     61a:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     61c:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     61e:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	9c 93       	st	X, r25
     626:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     628:	50 96       	adiw	r26, 0x10	; 16
     62a:	8c 93       	st	X, r24
     62c:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     62e:	51 96       	adiw	r26, 0x11	; 17
     630:	8c 93       	st	X, r24
     632:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
     634:	14 96       	adiw	r26, 0x04	; 4
     636:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     638:	e0 ea       	ldi	r30, 0xA0	; 160
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	82 60       	ori	r24, 0x02	; 2
     646:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	84 60       	ori	r24, 0x04	; 4
     64c:	82 83       	std	Z+2, r24	; 0x02
     64e:	fe 01       	movw	r30, r28
     650:	9e 01       	movw	r18, r28
     652:	28 5f       	subi	r18, 0xF8	; 248
     654:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
     65a:	e2 17       	cp	r30, r18
     65c:	f3 07       	cpc	r31, r19
     65e:	e1 f7       	brne	.-8      	; 0x658 <_ZN11CLaserBoard12InitializeIOEv+0x9c>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	88 87       	std	Y+8, r24	; 0x08
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     66a:	e0 e5       	ldi	r30, 0x50	; 80
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	8b ec       	ldi	r24, 0xCB	; 203
     670:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     672:	80 81       	ld	r24, Z
     674:	88 60       	ori	r24, 0x08	; 8
     676:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     678:	81 81       	ldd	r24, Z+1	; 0x01
     67a:	83 ff       	sbrs	r24, 3
     67c:	fd cf       	rjmp	.-6      	; 0x678 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     67e:	e0 e5       	ldi	r30, 0x50	; 80
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     684:	98 ed       	ldi	r25, 0xD8	; 216
     686:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     688:	84 ec       	ldi	r24, 0xC4	; 196
     68a:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     68c:	80 81       	ld	r24, Z
     68e:	80 61       	ori	r24, 0x10	; 16
     690:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     692:	e0 e4       	ldi	r30, 0x40	; 64
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     698:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     69a:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     69c:	e0 e5       	ldi	r30, 0x50	; 80
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
     6a2:	84 ff       	sbrs	r24, 4
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     6a6:	e0 e4       	ldi	r30, 0x40	; 64
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 7f       	andi	r24, 0xF8	; 248
     6ae:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     6b0:	98 ed       	ldi	r25, 0xD8	; 216
     6b2:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     6b4:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     6b6:	a0 e5       	ldi	r26, 0x50	; 80
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8c 91       	ld	r24, X
     6bc:	88 7f       	andi	r24, 0xF8	; 248
     6be:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     6c0:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     6c2:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     6c8:	e0 eb       	ldi	r30, 0xB0	; 176
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	84 81       	ldd	r24, Z+4	; 0x04
     6ce:	8c 7f       	andi	r24, 0xFC	; 252
     6d0:	84 83       	std	Z+4, r24	; 0x04
     6d2:	08 95       	ret

000006d4 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 62 06 	sts	0x0662, r24
     6da:	08 95       	ret

000006dc <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     6dc:	80 e1       	ldi	r24, 0x10	; 16
     6de:	80 93 62 06 	sts	0x0662, r24
     6e2:	08 95       	ret

000006e4 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 61 06 	sts	0x0661, r24
     6ea:	08 95       	ret

000006ec <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     6ec:	80 e1       	ldi	r24, 0x10	; 16
     6ee:	80 93 61 06 	sts	0x0661, r24
     6f2:	08 95       	ret

000006f4 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	80 93 85 06 	sts	0x0685, r24
     6fa:	08 95       	ret

000006fc <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	80 93 86 06 	sts	0x0686, r24
     702:	08 95       	ret

00000704 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     704:	f8 94       	cli
     706:	84 e6       	ldi	r24, 0x64	; 100
     708:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     70a:	e0 e8       	ldi	r30, 0x80	; 128
     70c:	f6 e0       	ldi	r31, 0x06	; 6
     70e:	28 e0       	ldi	r18, 0x08	; 8
     710:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     712:	af e9       	ldi	r26, 0x9F	; 159
     714:	bf e0       	ldi	r27, 0x0F	; 15
     716:	11 97       	sbiw	r26, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <_ZN11CLaserBoard4BeepEv+0x12>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <_ZN11CLaserBoard4BeepEv+0x18>
     71c:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     71e:	26 83       	std	Z+6, r18	; 0x06
     720:	af e9       	ldi	r26, 0x9F	; 159
     722:	bf e0       	ldi	r27, 0x0F	; 15
     724:	11 97       	sbiw	r26, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <_ZN11CLaserBoard4BeepEv+0x20>
     728:	00 c0       	rjmp	.+0      	; 0x72a <_ZN11CLaserBoard4BeepEv+0x26>
     72a:	00 00       	nop
     72c:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     72e:	81 f7       	brne	.-32     	; 0x710 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     730:	78 94       	sei
     732:	08 95       	ret

00000734 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     734:	f8 94       	cli
     736:	45 e0       	ldi	r20, 0x05	; 5
     738:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     73a:	64 e6       	ldi	r22, 0x64	; 100
     73c:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     73e:	e0 e8       	ldi	r30, 0x80	; 128
     740:	f6 e0       	ldi	r31, 0x06	; 6
     742:	28 e0       	ldi	r18, 0x08	; 8
     744:	1c c0       	rjmp	.+56     	; 0x77e <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     746:	25 83       	std	Z+5, r18	; 0x05
     748:	af e9       	ldi	r26, 0x9F	; 159
     74a:	bf e0       	ldi	r27, 0x0F	; 15
     74c:	11 97       	sbiw	r26, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     750:	00 c0       	rjmp	.+0      	; 0x752 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     752:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     754:	26 83       	std	Z+6, r18	; 0x06
     756:	af e9       	ldi	r26, 0x9F	; 159
     758:	bf e0       	ldi	r27, 0x0F	; 15
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     760:	00 00       	nop
     762:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     764:	81 f7       	brne	.-32     	; 0x746 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     766:	bf ef       	ldi	r27, 0xFF	; 255
     768:	73 ec       	ldi	r23, 0xC3	; 195
     76a:	89 e0       	ldi	r24, 0x09	; 9
     76c:	b1 50       	subi	r27, 0x01	; 1
     76e:	70 40       	sbci	r23, 0x00	; 0
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	e1 f7       	brne	.-8      	; 0x76c <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     774:	00 c0       	rjmp	.+0      	; 0x776 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     776:	00 00       	nop
     778:	41 50       	subi	r20, 0x01	; 1
     77a:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     77c:	19 f0       	breq	.+6      	; 0x784 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     77e:	86 2f       	mov	r24, r22
     780:	93 2f       	mov	r25, r19
     782:	e1 cf       	rjmp	.-62     	; 0x746 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     784:	78 94       	sei
     786:	08 95       	ret

00000788 <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
     788:	cf 93       	push	r28
     78a:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
     78c:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     790:	18 96       	adiw	r26, 0x08	; 8
     792:	3c 91       	ld	r19, X
     794:	18 97       	sbiw	r26, 0x08	; 8
     796:	fc 01       	movw	r30, r24
     798:	ac 01       	movw	r20, r24
     79a:	48 5f       	subi	r20, 0xF8	; 248
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
     79e:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     7a0:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     7a2:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
     7a4:	89 2f       	mov	r24, r25
     7a6:	86 23       	and	r24, r22
     7a8:	41 f0       	breq	.+16     	; 0x7ba <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
     7ae:	81 38       	cpi	r24, 0x81	; 129
     7b0:	10 f4       	brcc	.+4      	; 0x7b6 <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
     7b2:	80 83       	st	Z, r24
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
     7b6:	70 83       	st	Z, r23
     7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
     7ba:	80 81       	ld	r24, Z
     7bc:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
     7be:	11 f0       	breq	.+4      	; 0x7c4 <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
     7c0:	80 83       	st	Z, r24
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
     7c4:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
     7c6:	81 91       	ld	r24, Z+
     7c8:	38 17       	cp	r19, r24
     7ca:	40 f4       	brcc	.+16     	; 0x7dc <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
     7cc:	19 96       	adiw	r26, 0x09	; 9
     7ce:	8c 91       	ld	r24, X
     7d0:	19 97       	sbiw	r26, 0x09	; 9
     7d2:	89 2b       	or	r24, r25
     7d4:	19 96       	adiw	r26, 0x09	; 9
     7d6:	8c 93       	st	X, r24
     7d8:	19 97       	sbiw	r26, 0x09	; 9
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
     7dc:	19 96       	adiw	r26, 0x09	; 9
     7de:	8c 91       	ld	r24, X
     7e0:	19 97       	sbiw	r26, 0x09	; 9
     7e2:	29 2f       	mov	r18, r25
     7e4:	20 95       	com	r18
     7e6:	28 23       	and	r18, r24
     7e8:	19 96       	adiw	r26, 0x09	; 9
     7ea:	2c 93       	st	X, r18
     7ec:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
     7ee:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
     7f0:	e4 17       	cp	r30, r20
     7f2:	f5 07       	cpc	r31, r21
     7f4:	b9 f6       	brne	.-82     	; 0x7a4 <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
     7fa:	fc 01       	movw	r30, r24
     7fc:	81 85       	ldd	r24, Z+9	; 0x09
     7fe:	81 70       	andi	r24, 0x01	; 1
     800:	08 95       	ret

00000802 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     802:	08 95       	ret

00000804 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
		}
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     804:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     806:	63 30       	cpi	r22, 0x03	; 3
     808:	29 f4       	brne	.+10     	; 0x814 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     80a:	fa 01       	movw	r30, r20
     80c:	81 81       	ldd	r24, Z+1	; 0x01
     80e:	1e 96       	adiw	r26, 0x0e	; 14
     810:	8c 93       	st	X, r24
     812:	1e 97       	sbiw	r26, 0x0e	; 14
	
	switch (PIC_ID)
     814:	1e 96       	adiw	r26, 0x0e	; 14
     816:	4c 91       	ld	r20, X
     818:	1e 97       	sbiw	r26, 0x0e	; 14
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	44 31       	cpi	r20, 0x14	; 20
     81e:	51 05       	cpc	r21, r1
     820:	08 f0       	brcs	.+2      	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     822:	6e c0       	rjmp	.+220    	; 0x900 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     824:	fa 01       	movw	r30, r20
     826:	88 27       	eor	r24, r24
     828:	ec 50       	subi	r30, 0x0C	; 12
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	8f 4f       	sbci	r24, 0xFF	; 255
     82e:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     832:	1c 96       	adiw	r26, 0x0c	; 12
     834:	1c 92       	st	X, r1
		break;
     836:	08 95       	ret
		case PICID_WORKFAST:
			state = APP_WORKFAST;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	1c 96       	adiw	r26, 0x0c	; 12
     83c:	8c 93       	st	X, r24
     83e:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkFast)
     840:	1d 96       	adiw	r26, 0x0d	; 13
     842:	8c 91       	ld	r24, X
     844:	1d 97       	sbiw	r26, 0x0d	; 13
     846:	88 23       	and	r24, r24
     848:	09 f4       	brne	.+2      	; 0x84c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     84a:	72 c0       	rjmp	.+228    	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				profile = WorkFast;
     84c:	1d 96       	adiw	r26, 0x0d	; 13
     84e:	1c 92       	st	X, r1
     850:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	1f 96       	adiw	r26, 0x0f	; 15
     856:	8c 93       	st	X, r24
     858:	08 95       	ret
			}
		break;
		case PICID_WORKMEDIUM:
			state = APP_WORKMEDIUM;
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	1c 96       	adiw	r26, 0x0c	; 12
     85e:	8c 93       	st	X, r24
     860:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkMedium)
     862:	1d 96       	adiw	r26, 0x0d	; 13
     864:	8c 91       	ld	r24, X
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f4       	brne	.+2      	; 0x86e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     86c:	61 c0       	rjmp	.+194    	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				profile = WorkMedium;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	1d 96       	adiw	r26, 0x0d	; 13
     872:	8c 93       	st	X, r24
     874:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     876:	1f 96       	adiw	r26, 0x0f	; 15
     878:	8c 93       	st	X, r24
     87a:	08 95       	ret
			}
		break;
		case PICID_WORKSLOW:
			state = APP_WORKSLOW;
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	1c 96       	adiw	r26, 0x0c	; 12
     880:	8c 93       	st	X, r24
     882:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkSlow)
     884:	1d 96       	adiw	r26, 0x0d	; 13
     886:	8c 91       	ld	r24, X
     888:	1d 97       	sbiw	r26, 0x0d	; 13
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	09 f4       	brne	.+2      	; 0x890 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     88e:	50 c0       	rjmp	.+160    	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				profile = WorkSlow;
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	1d 96       	adiw	r26, 0x0d	; 13
     894:	8c 93       	st	X, r24
     896:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	1f 96       	adiw	r26, 0x0f	; 15
     89c:	8c 93       	st	X, r24
     89e:	08 95       	ret
			}
		break;
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	1c 96       	adiw	r26, 0x0c	; 12
     8a4:	8c 93       	st	X, r24
		break;
     8a6:	08 95       	ret
		case PICID_WORKOnStart:
			state = APP_WORKOnStart;
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	1c 96       	adiw	r26, 0x0c	; 12
     8ac:	8c 93       	st	X, r24
		break;
     8ae:	08 95       	ret
		case PICID_WORKOnStop:
			state = APP_WORKOnStop;
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	1c 96       	adiw	r26, 0x0c	; 12
     8b4:	8c 93       	st	X, r24
		break;
     8b6:	08 95       	ret
		case PICID_WORKSTART:
			state = APP_WORKSTART;
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	1c 96       	adiw	r26, 0x0c	; 12
     8bc:	8c 93       	st	X, r24
		break;
     8be:	08 95       	ret
		case PICID_WORKSTARTED:
			state = APP_WORKSTARTED;
     8c0:	85 e0       	ldi	r24, 0x05	; 5
     8c2:	1c 96       	adiw	r26, 0x0c	; 12
     8c4:	8c 93       	st	X, r24
		break;
     8c6:	08 95       	ret
		case PICID_PHOTOTYPESELECT:
			state = APP_PHOTOTYPESELECT;
     8c8:	89 e0       	ldi	r24, 0x09	; 9
     8ca:	1c 96       	adiw	r26, 0x0c	; 12
     8cc:	8c 93       	st	X, r24
		break;
     8ce:	08 95       	ret
		case PICID_PHOTOTYPE1:
			state = APP_PHOTOTYPE1;
     8d0:	8a e0       	ldi	r24, 0x0A	; 10
     8d2:	1c 96       	adiw	r26, 0x0c	; 12
     8d4:	8c 93       	st	X, r24
		break;
     8d6:	08 95       	ret
		case PICID_PHOTOTYPE2:
			state = APP_PHOTOTYPE2;
     8d8:	8b e0       	ldi	r24, 0x0B	; 11
     8da:	1c 96       	adiw	r26, 0x0c	; 12
     8dc:	8c 93       	st	X, r24
		break;
     8de:	08 95       	ret
		case PICID_PHOTOTYPE3:
			state = APP_PHOTOTYPE3;
     8e0:	8c e0       	ldi	r24, 0x0C	; 12
     8e2:	1c 96       	adiw	r26, 0x0c	; 12
     8e4:	8c 93       	st	X, r24
		break;
     8e6:	08 95       	ret
		case PICID_PHOTOTYPE4:
			state = APP_PHOTOTYPE4;
     8e8:	8d e0       	ldi	r24, 0x0D	; 13
     8ea:	1c 96       	adiw	r26, 0x0c	; 12
     8ec:	8c 93       	st	X, r24
		break;
     8ee:	08 95       	ret
		case PICID_PHOTOTYPE5:
			state = APP_PHOTOTYPE5;
     8f0:	8e e0       	ldi	r24, 0x0E	; 14
     8f2:	1c 96       	adiw	r26, 0x0c	; 12
     8f4:	8c 93       	st	X, r24
		break;
     8f6:	08 95       	ret
		case PICID_PHOTOTYPE6:
			state = APP_PHOTOTYPE6;
     8f8:	8f e0       	ldi	r24, 0x0F	; 15
     8fa:	1c 96       	adiw	r26, 0x0c	; 12
     8fc:	8c 93       	st	X, r24
		break;
     8fe:	08 95       	ret
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID < PICID_DATABASE_MAX)
     900:	1e 96       	adiw	r26, 0x0e	; 14
     902:	8c 91       	ld	r24, X
     904:	1e 97       	sbiw	r26, 0x0e	; 14
     906:	88 31       	cpi	r24, 0x18	; 24
     908:	28 f0       	brcs	.+10     	; 0x914 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x110>
     90a:	1e 96       	adiw	r26, 0x0e	; 14
     90c:	8c 91       	ld	r24, X
     90e:	1e 97       	sbiw	r26, 0x0e	; 14
     910:	89 32       	cpi	r24, 0x29	; 41
     912:	48 f0       	brcs	.+18     	; 0x926 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x122>
			{
				state = APP_DATABASE;
			}
			if (PIC_ID == PICID_DATABASE_MAX)
     914:	1e 96       	adiw	r26, 0x0e	; 14
     916:	8c 91       	ld	r24, X
     918:	1e 97       	sbiw	r26, 0x0e	; 14
     91a:	89 32       	cpi	r24, 0x29	; 41
     91c:	49 f4       	brne	.+18     	; 0x930 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12c>
			{
				state = APP_DATABASE_START;
     91e:	81 e1       	ldi	r24, 0x11	; 17
     920:	1c 96       	adiw	r26, 0x0c	; 12
     922:	8c 93       	st	X, r24
     924:	08 95       	ret
		break;
		default:
			//state = APP_SETUPtoRUN_ANIM;
			if (PIC_ID >= PICID_DATABASE_MIN && PIC_ID < PICID_DATABASE_MAX)
			{
				state = APP_DATABASE;
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	1c 96       	adiw	r26, 0x0c	; 12
     92a:	8c 93       	st	X, r24
     92c:	1c 97       	sbiw	r26, 0x0c	; 12
     92e:	f2 cf       	rjmp	.-28     	; 0x914 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x110>
     930:	08 95       	ret

00000932 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     932:	08 95       	ret

00000934 <_Z11ConvertDataPvS_jj>:
{
	return (data >> 8) | (data << 8);
}

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	7c 01       	movw	r14, r24
     946:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     948:	41 15       	cp	r20, r1
     94a:	51 05       	cpc	r21, r1
     94c:	b1 f0       	breq	.+44     	; 0x97a <_Z11ConvertDataPvS_jj+0x46>
     94e:	6b 01       	movw	r12, r22
     950:	c4 0e       	add	r12, r20
     952:	d5 1e       	adc	r13, r21
     954:	eb 01       	movw	r28, r22
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	c9 01       	movw	r24, r18
     95c:	8c 0f       	add	r24, r28
     95e:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     960:	b8 01       	movw	r22, r16
     962:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
     966:	fc 01       	movw	r30, r24
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	e4 27       	eor	r30, r20
     96c:	ee 0d       	add	r30, r14
     96e:	ff 1d       	adc	r31, r15
     970:	89 91       	ld	r24, Y+
     972:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     974:	cc 15       	cp	r28, r12
     976:	dd 05       	cpc	r29, r13
     978:	81 f7       	brne	.-32     	; 0x95a <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
{
	//no code
}

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     98c:	fa 01       	movw	r30, r20
     98e:	a9 01       	movw	r20, r18
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	if (addr == 0x0400)
     990:	61 15       	cp	r22, r1
     992:	24 e0       	ldi	r18, 0x04	; 4
     994:	72 07       	cpc	r23, r18
     996:	41 f4       	brne	.+16     	; 0x9a8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1c>
	{
		ConvertData((void*)&DATA, (void*)data, length);
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	bf 01       	movw	r22, r30
     99e:	87 e7       	ldi	r24, 0x77	; 119
     9a0:	93 e2       	ldi	r25, 0x23	; 35
     9a2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
     9a6:	08 95       	ret
	}
	
	if (addr == VARIABLE_ADDR_PROFINDEX)
     9a8:	67 30       	cpi	r22, 0x07	; 7
     9aa:	71 05       	cpc	r23, r1
     9ac:	59 f4       	brne	.+22     	; 0x9c4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x38>
volatile DGUS_DATA m_structDGUSDATA_Medium;
volatile DGUS_DATA m_structDGUSDATA_Slow;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     9ae:	20 81       	ld	r18, Z
     9b0:	31 81       	ldd	r19, Z+1	; 0x01
     9b2:	32 27       	eor	r19, r18
     9b4:	23 27       	eor	r18, r19
     9b6:	32 27       	eor	r19, r18
		ConvertData((void*)&DATA, (void*)data, length);
	}
	
	if (addr == VARIABLE_ADDR_PROFINDEX)
	{
		profileIndex = swap(*((uint16_t*)data));
     9b8:	dc 01       	movw	r26, r24
     9ba:	58 96       	adiw	r26, 0x18	; 24
     9bc:	2d 93       	st	X+, r18
     9be:	3c 93       	st	X, r19
     9c0:	59 97       	sbiw	r26, 0x19	; 25
     9c2:	08 95       	ret
	}
	
	if (addr == STRUCT_ADDR_DATA)
     9c4:	61 30       	cpi	r22, 0x01	; 1
     9c6:	71 05       	cpc	r23, r1
     9c8:	19 f5       	brne	.+70     	; 0xa10 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x84>
	{
		//memcpy((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		switch (profile)
     9ca:	dc 01       	movw	r26, r24
     9cc:	1d 96       	adiw	r26, 0x0d	; 13
     9ce:	8c 91       	ld	r24, X
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	a1 f0       	breq	.+40     	; 0x9fc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x70>
     9d4:	18 f0       	brcs	.+6      	; 0x9dc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x50>
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	49 f0       	breq	.+18     	; 0x9ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x60>
     9da:	18 c0       	rjmp	.+48     	; 0xa0c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x80>
		{
			case WorkFast:
				ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	bf 01       	movw	r22, r30
     9e2:	85 e7       	ldi	r24, 0x75	; 117
     9e4:	91 e2       	ldi	r25, 0x21	; 33
     9e6:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
			break;
     9ea:	08 95       	ret
			case WorkSlow:
				ConvertData((void*)&m_structDGUSDATA_Slow, (void*)data, length);
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	bf 01       	movw	r22, r30
     9f2:	89 e5       	ldi	r24, 0x59	; 89
     9f4:	91 e2       	ldi	r25, 0x21	; 33
     9f6:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
			break;
     9fa:	08 95       	ret
			case WorkMedium:
				ConvertData((void*)&m_structDGUSDATA_Medium, (void*)data, length);
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	bf 01       	movw	r22, r30
     a02:	87 e6       	ldi	r24, 0x67	; 103
     a04:	91 e2       	ldi	r25, 0x21	; 33
     a06:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
			break;
     a0a:	08 95       	ret
			default:
				// Error
				CLaserBoard::Beep();
     a0c:	0e 94 82 03 	call	0x704	; 0x704 <_ZN11CLaserBoard4BeepEv>
     a10:	08 95       	ret

00000a12 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     a12:	24 ea       	ldi	r18, 0xA4	; 164
     a14:	30 e2       	ldi	r19, 0x20	; 32
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
     a1a:	31 83       	std	Z+1, r19	; 0x01
     a1c:	08 95       	ret

00000a1e <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     a1e:	24 ea       	ldi	r18, 0xA4	; 164
     a20:	30 e2       	ldi	r19, 0x20	; 32
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
     a26:	31 83       	std	Z+1, r19	; 0x01
     a28:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN16CMBEventsHandlerD1Ev>
     a2c:	08 95       	ret

00000a2e <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = WorkFast;
}

void CLaserControlApp::Start()
{	
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	1f 92       	push	r1
     a38:	1f 92       	push	r1
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	94 e1       	ldi	r25, 0x14	; 20
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a48:	22 e0       	ldi	r18, 0x02	; 2
     a4a:	ae 01       	movw	r20, r28
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	63 e0       	ldi	r22, 0x03	; 3
     a52:	f8 01       	movw	r30, r16
     a54:	82 8d       	ldd	r24, Z+26	; 0x1a
     a56:	93 8d       	ldd	r25, Z+27	; 0x1b
     a58:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     a5c:	f8 01       	movw	r30, r16
     a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a60:	93 8d       	ldd	r25, Z+27	; 0x1b
     a62:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(m_structDGUSDATA_Fast));
     a66:	2e e0       	ldi	r18, 0x0E	; 14
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	45 e7       	ldi	r20, 0x75	; 117
     a6c:	51 e2       	ldi	r21, 0x21	; 33
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	f8 01       	movw	r30, r16
     a74:	82 8d       	ldd	r24, Z+26	; 0x1a
     a76:	93 8d       	ldd	r25, Z+27	; 0x1b
     a78:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     a7c:	f8 01       	movw	r30, r16
     a7e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a80:	93 8d       	ldd	r25, Z+27	; 0x1b
     a82:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	f8 01       	movw	r30, r16
     a8a:	84 87       	std	Z+12, r24	; 0x0c
}
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     a9a:	fc 01       	movw	r30, r24
     a9c:	44 89       	ldd	r20, Z+20	; 0x14
     a9e:	55 89       	ldd	r21, Z+21	; 0x15
     aa0:	56 95       	lsr	r21
     aa2:	47 95       	ror	r20
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	68 ee       	ldi	r22, 0xE8	; 232
     aa8:	73 e0       	ldi	r23, 0x03	; 3
     aaa:	83 e9       	ldi	r24, 0x93	; 147
     aac:	9b e2       	ldi	r25, 0x2B	; 43
     aae:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     ab2:	83 e9       	ldi	r24, 0x93	; 147
     ab4:	9b e2       	ldi	r25, 0x2B	; 43
     ab6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN12CSoundPlayer9SoundStopEv>
     aba:	08 95       	ret

00000abc <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     abc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_ZN16CLaserControlApp12OnLaserTimerEv>
     ac0:	08 95       	ret

00000ac2 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     ac2:	86 e8       	ldi	r24, 0x86	; 134
     ac4:	91 e2       	ldi	r25, 0x21	; 33
     ac6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     aca:	83 e8       	ldi	r24, 0x83	; 131
     acc:	91 e2       	ldi	r25, 0x21	; 33
     ace:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7CTimerFC1Ev>
     ad2:	08 95       	ret

00000ad4 <_GLOBAL__sub_D_timer>:
     ad4:	83 e8       	ldi	r24, 0x83	; 131
     ad6:	91 e2       	ldi	r25, 0x21	; 33
     ad8:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     adc:	86 e8       	ldi	r24, 0x86	; 134
     ade:	91 e2       	ldi	r25, 0x21	; 33
     ae0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN7CTimerCD1Ev>
     ae4:	08 95       	ret

00000ae6 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     ae6:	8f 92       	push	r8
     ae8:	9f 92       	push	r9
     aea:	af 92       	push	r10
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	8c 01       	movw	r16, r24
	// GUI class initialization
	m_cpSender = sender;
     b00:	dc 01       	movw	r26, r24
     b02:	5a 96       	adiw	r26, 0x1a	; 26
     b04:	6d 93       	st	X+, r22
     b06:	7c 93       	st	X, r23
     b08:	5b 97       	sbiw	r26, 0x1b	; 27
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     b0a:	46 e0       	ldi	r20, 0x06	; 6
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	86 e8       	ldi	r24, 0x86	; 134
     b10:	91 e2       	ldi	r25, 0x21	; 33
     b12:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     b16:	68 ea       	ldi	r22, 0xA8	; 168
     b18:	71 e6       	ldi	r23, 0x61	; 97
     b1a:	86 e8       	ldi	r24, 0x86	; 134
     b1c:	91 e2       	ldi	r25, 0x21	; 33
     b1e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	a8 01       	movw	r20, r16
     b26:	69 e9       	ldi	r22, 0x99	; 153
     b28:	74 e0       	ldi	r23, 0x04	; 4
     b2a:	86 e8       	ldi	r24, 0x86	; 134
     b2c:	91 e2       	ldi	r25, 0x21	; 33
     b2e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     b32:	f8 01       	movw	r30, r16
     b34:	16 86       	std	Z+14, r1	; 0x0e
	update = false;
     b36:	17 86       	std	Z+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA_Fast.Frequency = 10; // 10 Hz
     b38:	e5 e7       	ldi	r30, 0x75	; 117
     b3a:	f1 e2       	ldi	r31, 0x21	; 33
     b3c:	8a e0       	ldi	r24, 0x0A	; 10
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	80 83       	st	Z, r24
     b42:	91 83       	std	Z+1, r25	; 0x01
	m_structDGUSDATA_Fast.DutyCycle = 50; // 50%
     b44:	0f 2e       	mov	r0, r31
     b46:	f2 e3       	ldi	r31, 0x32	; 50
     b48:	af 2e       	mov	r10, r31
     b4a:	b1 2c       	mov	r11, r1
     b4c:	f0 2d       	mov	r31, r0
     b4e:	a2 86       	std	Z+10, r10	; 0x0a
     b50:	b3 86       	std	Z+11, r11	; 0x0b
	m_structDGUSDATA_Fast.Duration  = ((1000 / m_structDGUSDATA_Fast.Frequency) * m_structDGUSDATA_Fast.DutyCycle) / 100; // ms
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
     b56:	c2 85       	ldd	r28, Z+10	; 0x0a
     b58:	d3 85       	ldd	r29, Z+11	; 0x0b
     b5a:	0f 2e       	mov	r0, r31
     b5c:	f8 ee       	ldi	r31, 0xE8	; 232
     b5e:	cf 2e       	mov	r12, r31
     b60:	f3 e0       	ldi	r31, 0x03	; 3
     b62:	df 2e       	mov	r13, r31
     b64:	f0 2d       	mov	r31, r0
     b66:	c6 01       	movw	r24, r12
     b68:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
     b6c:	6c 9f       	mul	r22, r28
     b6e:	90 01       	movw	r18, r0
     b70:	6d 9f       	mul	r22, r29
     b72:	30 0d       	add	r19, r0
     b74:	7c 9f       	mul	r23, r28
     b76:	30 0d       	add	r19, r0
     b78:	11 24       	eor	r1, r1
     b7a:	36 95       	lsr	r19
     b7c:	27 95       	ror	r18
     b7e:	36 95       	lsr	r19
     b80:	27 95       	ror	r18
     b82:	ab e7       	ldi	r26, 0x7B	; 123
     b84:	b4 e1       	ldi	r27, 0x14	; 20
     b86:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	82 83       	std	Z+2, r24	; 0x02
     b90:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Fast.Intensity = 200; // W
     b92:	0f 2e       	mov	r0, r31
     b94:	f8 ec       	ldi	r31, 0xC8	; 200
     b96:	ef 2e       	mov	r14, r31
     b98:	f1 2c       	mov	r15, r1
     b9a:	f0 2d       	mov	r31, r0
     b9c:	e4 82       	std	Z+4, r14	; 0x04
     b9e:	f5 82       	std	Z+5, r15	; 0x05
	m_structDGUSDATA_Fast.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100; // W
     ba0:	84 81       	ldd	r24, Z+4	; 0x04
     ba2:	95 81       	ldd	r25, Z+5	; 0x05
     ba4:	42 85       	ldd	r20, Z+10	; 0x0a
     ba6:	53 85       	ldd	r21, Z+11	; 0x0b
     ba8:	48 9f       	mul	r20, r24
     baa:	90 01       	movw	r18, r0
     bac:	49 9f       	mul	r20, r25
     bae:	30 0d       	add	r19, r0
     bb0:	58 9f       	mul	r21, r24
     bb2:	30 0d       	add	r19, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	36 95       	lsr	r19
     bb8:	27 95       	ror	r18
     bba:	36 95       	lsr	r19
     bbc:	27 95       	ror	r18
     bbe:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	86 83       	std	Z+6, r24	; 0x06
     bc8:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Fast.Energy    = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration) / 1000; // J
     bca:	84 81       	ldd	r24, Z+4	; 0x04
     bcc:	95 81       	ldd	r25, Z+5	; 0x05
     bce:	42 81       	ldd	r20, Z+2	; 0x02
     bd0:	53 81       	ldd	r21, Z+3	; 0x03
     bd2:	48 9f       	mul	r20, r24
     bd4:	90 01       	movw	r18, r0
     bd6:	49 9f       	mul	r20, r25
     bd8:	30 0d       	add	r19, r0
     bda:	58 9f       	mul	r21, r24
     bdc:	30 0d       	add	r19, r0
     bde:	11 24       	eor	r1, r1
     be0:	36 95       	lsr	r19
     be2:	27 95       	ror	r18
     be4:	36 95       	lsr	r19
     be6:	27 95       	ror	r18
     be8:	36 95       	lsr	r19
     bea:	27 95       	ror	r18
     bec:	a5 ec       	ldi	r26, 0xC5	; 197
     bee:	b0 e2       	ldi	r27, 0x20	; 32
     bf0:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     bf4:	92 95       	swap	r25
     bf6:	82 95       	swap	r24
     bf8:	8f 70       	andi	r24, 0x0F	; 15
     bfa:	89 27       	eor	r24, r25
     bfc:	9f 70       	andi	r25, 0x0F	; 15
     bfe:	89 27       	eor	r24, r25
     c00:	80 87       	std	Z+8, r24	; 0x08
     c02:	91 87       	std	Z+9, r25	; 0x09
	
	// Slow profile
	m_structDGUSDATA_Slow.Frequency = 1; // 10 Hz
     c04:	c9 e5       	ldi	r28, 0x59	; 89
     c06:	d1 e2       	ldi	r29, 0x21	; 33
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	88 83       	st	Y, r24
     c0e:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Slow.DutyCycle = 50; // 50%
     c10:	aa 86       	std	Y+10, r10	; 0x0a
     c12:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Slow.Duration  = ((1000 / m_structDGUSDATA_Slow.Frequency) * m_structDGUSDATA_Slow.DutyCycle) / 100; // ms
     c14:	68 81       	ld	r22, Y
     c16:	79 81       	ldd	r23, Y+1	; 0x01
     c18:	8a 84       	ldd	r8, Y+10	; 0x0a
     c1a:	9b 84       	ldd	r9, Y+11	; 0x0b
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
     c22:	68 9d       	mul	r22, r8
     c24:	90 01       	movw	r18, r0
     c26:	69 9d       	mul	r22, r9
     c28:	30 0d       	add	r19, r0
     c2a:	78 9d       	mul	r23, r8
     c2c:	30 0d       	add	r19, r0
     c2e:	11 24       	eor	r1, r1
     c30:	36 95       	lsr	r19
     c32:	27 95       	ror	r18
     c34:	36 95       	lsr	r19
     c36:	27 95       	ror	r18
     c38:	ab e7       	ldi	r26, 0x7B	; 123
     c3a:	b4 e1       	ldi	r27, 0x14	; 20
     c3c:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     c40:	96 95       	lsr	r25
     c42:	87 95       	ror	r24
     c44:	8a 83       	std	Y+2, r24	; 0x02
     c46:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Slow.Intensity = 200; // W
     c48:	ec 82       	std	Y+4, r14	; 0x04
     c4a:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Slow.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100; // W
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	9d 81       	ldd	r25, Y+5	; 0x05
     c50:	4a 85       	ldd	r20, Y+10	; 0x0a
     c52:	5b 85       	ldd	r21, Y+11	; 0x0b
     c54:	48 9f       	mul	r20, r24
     c56:	90 01       	movw	r18, r0
     c58:	49 9f       	mul	r20, r25
     c5a:	30 0d       	add	r19, r0
     c5c:	58 9f       	mul	r21, r24
     c5e:	30 0d       	add	r19, r0
     c60:	11 24       	eor	r1, r1
     c62:	36 95       	lsr	r19
     c64:	27 95       	ror	r18
     c66:	36 95       	lsr	r19
     c68:	27 95       	ror	r18
     c6a:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     c6e:	96 95       	lsr	r25
     c70:	87 95       	ror	r24
     c72:	8e 83       	std	Y+6, r24	; 0x06
     c74:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Slow.Energy    = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration) / 1000; // J
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	4a 81       	ldd	r20, Y+2	; 0x02
     c7c:	5b 81       	ldd	r21, Y+3	; 0x03
     c7e:	48 9f       	mul	r20, r24
     c80:	90 01       	movw	r18, r0
     c82:	49 9f       	mul	r20, r25
     c84:	30 0d       	add	r19, r0
     c86:	58 9f       	mul	r21, r24
     c88:	30 0d       	add	r19, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	36 95       	lsr	r19
     c8e:	27 95       	ror	r18
     c90:	36 95       	lsr	r19
     c92:	27 95       	ror	r18
     c94:	36 95       	lsr	r19
     c96:	27 95       	ror	r18
     c98:	a5 ec       	ldi	r26, 0xC5	; 197
     c9a:	b0 e2       	ldi	r27, 0x20	; 32
     c9c:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     ca0:	92 95       	swap	r25
     ca2:	82 95       	swap	r24
     ca4:	8f 70       	andi	r24, 0x0F	; 15
     ca6:	89 27       	eor	r24, r25
     ca8:	9f 70       	andi	r25, 0x0F	; 15
     caa:	89 27       	eor	r24, r25
     cac:	88 87       	std	Y+8, r24	; 0x08
     cae:	99 87       	std	Y+9, r25	; 0x09
	
	// Medium profile
	m_structDGUSDATA_Medium.Frequency = 5; // 10 Hz
     cb0:	c7 e6       	ldi	r28, 0x67	; 103
     cb2:	d1 e2       	ldi	r29, 0x21	; 33
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 83       	st	Y, r24
     cba:	99 83       	std	Y+1, r25	; 0x01
	m_structDGUSDATA_Medium.DutyCycle = 50; // 50%
     cbc:	aa 86       	std	Y+10, r10	; 0x0a
     cbe:	bb 86       	std	Y+11, r11	; 0x0b
	m_structDGUSDATA_Medium.Duration  = ((1000 / m_structDGUSDATA_Medium.Frequency) * m_structDGUSDATA_Medium.DutyCycle) / 100; // ms
     cc0:	68 81       	ld	r22, Y
     cc2:	79 81       	ldd	r23, Y+1	; 0x01
     cc4:	aa 84       	ldd	r10, Y+10	; 0x0a
     cc6:	bb 84       	ldd	r11, Y+11	; 0x0b
     cc8:	c6 01       	movw	r24, r12
     cca:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
     cce:	6a 9d       	mul	r22, r10
     cd0:	90 01       	movw	r18, r0
     cd2:	6b 9d       	mul	r22, r11
     cd4:	30 0d       	add	r19, r0
     cd6:	7a 9d       	mul	r23, r10
     cd8:	30 0d       	add	r19, r0
     cda:	11 24       	eor	r1, r1
     cdc:	36 95       	lsr	r19
     cde:	27 95       	ror	r18
     ce0:	36 95       	lsr	r19
     ce2:	27 95       	ror	r18
     ce4:	ab e7       	ldi	r26, 0x7B	; 123
     ce6:	b4 e1       	ldi	r27, 0x14	; 20
     ce8:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     cec:	96 95       	lsr	r25
     cee:	87 95       	ror	r24
     cf0:	8a 83       	std	Y+2, r24	; 0x02
     cf2:	9b 83       	std	Y+3, r25	; 0x03
	m_structDGUSDATA_Medium.Intensity = 200; // W
     cf4:	ec 82       	std	Y+4, r14	; 0x04
     cf6:	fd 82       	std	Y+5, r15	; 0x05
	m_structDGUSDATA_Medium.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100; // W
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	4a 85       	ldd	r20, Y+10	; 0x0a
     cfe:	5b 85       	ldd	r21, Y+11	; 0x0b
     d00:	48 9f       	mul	r20, r24
     d02:	90 01       	movw	r18, r0
     d04:	49 9f       	mul	r20, r25
     d06:	30 0d       	add	r19, r0
     d08:	58 9f       	mul	r21, r24
     d0a:	30 0d       	add	r19, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	36 95       	lsr	r19
     d10:	27 95       	ror	r18
     d12:	36 95       	lsr	r19
     d14:	27 95       	ror	r18
     d16:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	8e 83       	std	Y+6, r24	; 0x06
     d20:	9f 83       	std	Y+7, r25	; 0x07
	m_structDGUSDATA_Medium.Energy    = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration) / 1000; // J
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	9d 81       	ldd	r25, Y+5	; 0x05
     d26:	4a 81       	ldd	r20, Y+2	; 0x02
     d28:	5b 81       	ldd	r21, Y+3	; 0x03
     d2a:	48 9f       	mul	r20, r24
     d2c:	90 01       	movw	r18, r0
     d2e:	49 9f       	mul	r20, r25
     d30:	30 0d       	add	r19, r0
     d32:	58 9f       	mul	r21, r24
     d34:	30 0d       	add	r19, r0
     d36:	11 24       	eor	r1, r1
     d38:	36 95       	lsr	r19
     d3a:	27 95       	ror	r18
     d3c:	36 95       	lsr	r19
     d3e:	27 95       	ror	r18
     d40:	36 95       	lsr	r19
     d42:	27 95       	ror	r18
     d44:	a5 ec       	ldi	r26, 0xC5	; 197
     d46:	b0 e2       	ldi	r27, 0x20	; 32
     d48:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     d4c:	92 95       	swap	r25
     d4e:	82 95       	swap	r24
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	89 27       	eor	r24, r25
     d54:	9f 70       	andi	r25, 0x0F	; 15
     d56:	89 27       	eor	r24, r25
     d58:	88 87       	std	Y+8, r24	; 0x08
     d5a:	99 87       	std	Y+9, r25	; 0x09
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	8a e6       	ldi	r24, 0x6A	; 106
     d62:	98 e1       	ldi	r25, 0x18	; 24
     d64:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
     d68:	ab 01       	movw	r20, r22
     d6a:	44 0f       	add	r20, r20
     d6c:	55 1f       	adc	r21, r21
     d6e:	66 0f       	add	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	46 0f       	add	r20, r22
     d7c:	57 1f       	adc	r21, r23
     d7e:	d8 01       	movw	r26, r16
     d80:	50 96       	adiw	r26, 0x10	; 16
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	51 97       	sbiw	r26, 0x11	; 17
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA_Fast.DutyCycle);
     d88:	02 84       	ldd	r0, Z+10	; 0x0a
     d8a:	f3 85       	ldd	r31, Z+11	; 0x0b
     d8c:	e0 2d       	mov	r30, r0
     d8e:	9a 01       	movw	r18, r20
     d90:	36 95       	lsr	r19
     d92:	27 95       	ror	r18
     d94:	36 95       	lsr	r19
     d96:	27 95       	ror	r18
     d98:	ab e7       	ldi	r26, 0x7B	; 123
     d9a:	b4 e1       	ldi	r27, 0x14	; 20
     d9c:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	8e 9f       	mul	r24, r30
     da6:	90 01       	movw	r18, r0
     da8:	8f 9f       	mul	r24, r31
     daa:	30 0d       	add	r19, r0
     dac:	9e 9f       	mul	r25, r30
     dae:	30 0d       	add	r19, r0
     db0:	11 24       	eor	r1, r1
     db2:	42 1b       	sub	r20, r18
     db4:	53 0b       	sbc	r21, r19
     db6:	f8 01       	movw	r30, r16
     db8:	42 8b       	std	Z+18, r20	; 0x12
     dba:	53 8b       	std	Z+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     dbc:	47 e0       	ldi	r20, 0x07	; 7
     dbe:	63 e0       	ldi	r22, 0x03	; 3
     dc0:	83 e8       	ldi	r24, 0x83	; 131
     dc2:	91 e2       	ldi	r25, 0x21	; 33
     dc4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     dc8:	d8 01       	movw	r26, r16
     dca:	50 96       	adiw	r26, 0x10	; 16
     dcc:	6d 91       	ld	r22, X+
     dce:	7c 91       	ld	r23, X
     dd0:	51 97       	sbiw	r26, 0x11	; 17
     dd2:	83 e8       	ldi	r24, 0x83	; 131
     dd4:	91 e2       	ldi	r25, 0x21	; 33
     dd6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     dda:	f8 01       	movw	r30, r16
     ddc:	62 89       	ldd	r22, Z+18	; 0x12
     dde:	73 89       	ldd	r23, Z+19	; 0x13
     de0:	83 e8       	ldi	r24, 0x83	; 131
     de2:	91 e2       	ldi	r25, 0x21	; 33
     de4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     de8:	d8 01       	movw	r26, r16
     dea:	52 96       	adiw	r26, 0x12	; 18
     dec:	6d 91       	ld	r22, X+
     dee:	7c 91       	ld	r23, X
     df0:	53 97       	sbiw	r26, 0x13	; 19
     df2:	83 e8       	ldi	r24, 0x83	; 131
     df4:	91 e2       	ldi	r25, 0x21	; 33
     df6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	a8 01       	movw	r20, r16
     dfe:	6e e5       	ldi	r22, 0x5E	; 94
     e00:	75 e0       	ldi	r23, 0x05	; 5
     e02:	83 e8       	ldi	r24, 0x83	; 131
     e04:	91 e2       	ldi	r25, 0x21	; 33
     e06:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     e0a:	60 e1       	ldi	r22, 0x10	; 16
     e0c:	83 e8       	ldi	r24, 0x83	; 131
     e0e:	91 e2       	ldi	r25, 0x21	; 33
     e10:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     e14:	60 e2       	ldi	r22, 0x20	; 32
     e16:	83 e8       	ldi	r24, 0x83	; 131
     e18:	91 e2       	ldi	r25, 0x21	; 33
     e1a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     e1e:	60 e1       	ldi	r22, 0x10	; 16
     e20:	83 e8       	ldi	r24, 0x83	; 131
     e22:	91 e2       	ldi	r25, 0x21	; 33
     e24:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     e28:	60 e2       	ldi	r22, 0x20	; 32
     e2a:	83 e8       	ldi	r24, 0x83	; 131
     e2c:	91 e2       	ldi	r25, 0x21	; 33
     e2e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = WorkFast;
     e32:	f8 01       	movw	r30, r16
     e34:	15 86       	std	Z+13, r1	; 0x0d
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	08 95       	ret

00000e50 <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKFAST;
}

// Process GUI
void CLaserControlApp::Run()
{
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	c2 5c       	subi	r28, 0xC2	; 194
     e62:	d3 40       	sbci	r29, 0x03	; 3
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	8c 01       	movw	r16, r24
	static uint8_t DatabaseSelectedProfile = 0;
	
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     e6a:	42 e0       	ldi	r20, 0x02	; 2
     e6c:	63 e0       	ldi	r22, 0x03	; 3
     e6e:	dc 01       	movw	r26, r24
     e70:	5a 96       	adiw	r26, 0x1a	; 26
     e72:	8d 91       	ld	r24, X+
     e74:	9c 91       	ld	r25, X
     e76:	5b 97       	sbiw	r26, 0x1b	; 27
     e78:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     e7c:	f8 01       	movw	r30, r16
     e7e:	82 8d       	ldd	r24, Z+26	; 0x1a
     e80:	93 8d       	ldd	r25, Z+27	; 0x1b
     e82:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     e86:	d8 01       	movw	r26, r16
     e88:	5a 96       	adiw	r26, 0x1a	; 26
     e8a:	8d 91       	ld	r24, X+
     e8c:	9c 91       	ld	r25, X
     e8e:	5b 97       	sbiw	r26, 0x1b	; 27
     e90:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZN9CMBSender18WaitMODBUSListenerEv>
     e94:	bf ef       	ldi	r27, 0xFF	; 255
     e96:	e1 ee       	ldi	r30, 0xE1	; 225
     e98:	f4 e0       	ldi	r31, 0x04	; 4
     e9a:	b1 50       	subi	r27, 0x01	; 1
     e9c:	e0 40       	sbci	r30, 0x00	; 0
     e9e:	f0 40       	sbci	r31, 0x00	; 0
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <_ZN16CLaserControlApp3RunEv+0x4a>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <_ZN16CLaserControlApp3RunEv+0x54>
     ea4:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     ea6:	d8 01       	movw	r26, r16
     ea8:	1f 96       	adiw	r26, 0x0f	; 15
     eaa:	8c 91       	ld	r24, X
     eac:	1f 97       	sbiw	r26, 0x0f	; 15
     eae:	81 11       	cpse	r24, r1
     eb0:	1e c0       	rjmp	.+60     	; 0xeee <_ZN16CLaserControlApp3RunEv+0x9e>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     eb2:	4e e0       	ldi	r20, 0x0E	; 14
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	5a 96       	adiw	r26, 0x1a	; 26
     eba:	8d 91       	ld	r24, X+
     ebc:	9c 91       	ld	r25, X
     ebe:	5b 97       	sbiw	r26, 0x1b	; 27
     ec0:	0e 94 ab 28 	call	0x5156	; 0x5156 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     ec4:	f8 01       	movw	r30, r16
     ec6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec8:	93 8d       	ldd	r25, Z+27	; 0x1b
     eca:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     ece:	d8 01       	movw	r26, r16
     ed0:	5a 96       	adiw	r26, 0x1a	; 26
     ed2:	8d 91       	ld	r24, X+
     ed4:	9c 91       	ld	r25, X
     ed6:	5b 97       	sbiw	r26, 0x1b	; 27
     ed8:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZN9CMBSender18WaitMODBUSListenerEv>
     edc:	bf ef       	ldi	r27, 0xFF	; 255
     ede:	e1 ee       	ldi	r30, 0xE1	; 225
     ee0:	f4 e0       	ldi	r31, 0x04	; 4
     ee2:	b1 50       	subi	r27, 0x01	; 1
     ee4:	e0 40       	sbci	r30, 0x00	; 0
     ee6:	f0 40       	sbci	r31, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <_ZN16CLaserControlApp3RunEv+0x92>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <_ZN16CLaserControlApp3RunEv+0x9c>
     eec:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     eee:	d8 01       	movw	r26, r16
     ef0:	1c 96       	adiw	r26, 0x0c	; 12
     ef2:	8c 91       	ld	r24, X
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	82 31       	cpi	r24, 0x12	; 18
     ef8:	91 05       	cpc	r25, r1
     efa:	08 f0       	brcs	.+2      	; 0xefe <_ZN16CLaserControlApp3RunEv+0xae>
     efc:	23 c4       	rjmp	.+2118   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
     efe:	fc 01       	movw	r30, r24
     f00:	88 27       	eor	r24, r24
     f02:	e8 5f       	subi	r30, 0xF8	; 248
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	8f 4f       	sbci	r24, 0xFF	; 255
     f08:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__tablejump2__>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_MAINMENU);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	94 e1       	ldi	r25, 0x14	; 20
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f14:	22 e0       	ldi	r18, 0x02	; 2
     f16:	ae 01       	movw	r20, r28
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	63 e0       	ldi	r22, 0x03	; 3
     f1e:	f8 01       	movw	r30, r16
     f20:	82 8d       	ldd	r24, Z+26	; 0x1a
     f22:	93 8d       	ldd	r25, Z+27	; 0x1b
     f24:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     f28:	d8 01       	movw	r26, r16
     f2a:	5a 96       	adiw	r26, 0x1a	; 26
     f2c:	8d 91       	ld	r24, X+
     f2e:	9c 91       	ld	r25, X
     f30:	5b 97       	sbiw	r26, 0x1b	; 27
     f32:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKFAST;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	f8 01       	movw	r30, r16
     f3a:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     f3c:	03 c4       	rjmp	.+2054   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
			//state = APP_WORKFAST;
		break;
		case APP_WORKSTARTED:
			//state = APP_WORKFAST;
			
			if (!laserBoard.Footswitch())
     f3e:	84 e9       	ldi	r24, 0x94	; 148
     f40:	9b e2       	ldi	r25, 0x2B	; 43
     f42:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN11CLaserBoard10FootswitchEv>
     f46:	81 11       	cpse	r24, r1
     f48:	1a c0       	rjmp	.+52     	; 0xf7e <_ZN16CLaserControlApp3RunEv+0x12e>
			{
				laserTimer.SetCOMPA(laserTimerDutyCycle);
     f4a:	d8 01       	movw	r26, r16
     f4c:	52 96       	adiw	r26, 0x12	; 18
     f4e:	6d 91       	ld	r22, X+
     f50:	7c 91       	ld	r23, X
     f52:	53 97       	sbiw	r26, 0x13	; 19
     f54:	83 e8       	ldi	r24, 0x83	; 131
     f56:	91 e2       	ldi	r25, 0x21	; 33
     f58:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
     f5c:	f8 01       	movw	r30, r16
     f5e:	62 89       	ldd	r22, Z+18	; 0x12
     f60:	73 89       	ldd	r23, Z+19	; 0x13
     f62:	83 e8       	ldi	r24, 0x83	; 131
     f64:	91 e2       	ldi	r25, 0x21	; 33
     f66:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN7CTimerF8SetCOMPBEj>
				//laserTimer.SetPeriod(laserTimerPeriod);
				laserTimer.Start(laserTimerPeriod);
     f6a:	d8 01       	movw	r26, r16
     f6c:	50 96       	adiw	r26, 0x10	; 16
     f6e:	6d 91       	ld	r22, X+
     f70:	7c 91       	ld	r23, X
     f72:	51 97       	sbiw	r26, 0x11	; 17
     f74:	83 e8       	ldi	r24, 0x83	; 131
     f76:	91 e2       	ldi	r25, 0x21	; 33
     f78:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN7CTimerF5StartEj>
     f7c:	e3 c3       	rjmp	.+1990   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
			}
			else
			{
				laserTimer.Stop();
     f7e:	83 e8       	ldi	r24, 0x83	; 131
     f80:	91 e2       	ldi	r25, 0x21	; 33
     f82:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     f86:	60 e1       	ldi	r22, 0x10	; 16
     f88:	83 e8       	ldi	r24, 0x83	; 131
     f8a:	91 e2       	ldi	r25, 0x21	; 33
     f8c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     f90:	60 e2       	ldi	r22, 0x20	; 32
     f92:	83 e8       	ldi	r24, 0x83	; 131
     f94:	91 e2       	ldi	r25, 0x21	; 33
     f96:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     f9a:	d4 c3       	rjmp	.+1960   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     f9c:	84 e9       	ldi	r24, 0x94	; 148
     f9e:	9b e2       	ldi	r25, 0x2B	; 43
     fa0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     fa4:	84 e9       	ldi	r24, 0x94	; 148
     fa6:	9b e2       	ldi	r25, 0x2B	; 43
     fa8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORKSTART);
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	9a e0       	ldi	r25, 0x0A	; 10
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     fb4:	22 e0       	ldi	r18, 0x02	; 2
     fb6:	ae 01       	movw	r20, r28
     fb8:	4f 5f       	subi	r20, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	f8 01       	movw	r30, r16
     fc0:	82 8d       	ldd	r24, Z+26	; 0x1a
     fc2:	93 8d       	ldd	r25, Z+27	; 0x1b
     fc4:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     fc8:	d8 01       	movw	r26, r16
     fca:	5a 96       	adiw	r26, 0x1a	; 26
     fcc:	8d 91       	ld	r24, X+
     fce:	9c 91       	ld	r25, X
     fd0:	5b 97       	sbiw	r26, 0x1b	; 27
     fd2:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTART;
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	f8 01       	movw	r30, r16
     fda:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     fdc:	b3 c3       	rjmp	.+1894   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_WORKOnStart:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     fde:	d8 01       	movw	r26, r16
     fe0:	56 96       	adiw	r26, 0x16	; 22
     fe2:	4d 91       	ld	r20, X+
     fe4:	5c 91       	ld	r21, X
     fe6:	57 97       	sbiw	r26, 0x17	; 23
     fe8:	00 24       	eor	r0, r0
     fea:	56 95       	lsr	r21
     fec:	47 95       	ror	r20
     fee:	07 94       	ror	r0
     ff0:	56 95       	lsr	r21
     ff2:	47 95       	ror	r20
     ff4:	07 94       	ror	r0
     ff6:	54 2f       	mov	r21, r20
     ff8:	40 2d       	mov	r20, r0
     ffa:	9a 01       	movw	r18, r20
     ffc:	a1 e1       	ldi	r26, 0x11	; 17
     ffe:	b4 e0       	ldi	r27, 0x04	; 4
    1000:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    1004:	48 1b       	sub	r20, r24
    1006:	59 0b       	sbc	r21, r25
    1008:	56 95       	lsr	r21
    100a:	47 95       	ror	r20
    100c:	84 0f       	add	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	92 95       	swap	r25
    1016:	82 95       	swap	r24
    1018:	8f 70       	andi	r24, 0x0F	; 15
    101a:	89 27       	eor	r24, r25
    101c:	9f 70       	andi	r25, 0x0F	; 15
    101e:	89 27       	eor	r24, r25
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	cf 51       	subi	r28, 0x1F	; 31
    102a:	df 4f       	sbci	r29, 0xFF	; 255
    102c:	88 83       	st	Y, r24
    102e:	99 83       	std	Y+1, r25	; 0x01
    1030:	c1 5e       	subi	r28, 0xE1	; 225
    1032:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1034:	42 e0       	ldi	r20, 0x02	; 2
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	be 01       	movw	r22, r28
    103a:	6f 51       	subi	r22, 0x1F	; 31
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	89 eb       	ldi	r24, 0xB9	; 185
    1040:	9b e2       	ldi	r25, 0x2B	; 43
    1042:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORKSTARTED);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	9b e0       	ldi	r25, 0x0B	; 11
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    104e:	22 e0       	ldi	r18, 0x02	; 2
    1050:	ae 01       	movw	r20, r28
    1052:	4f 5f       	subi	r20, 0xFF	; 255
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	63 e0       	ldi	r22, 0x03	; 3
    1058:	f8 01       	movw	r30, r16
    105a:	82 8d       	ldd	r24, Z+26	; 0x1a
    105c:	93 8d       	ldd	r25, Z+27	; 0x1b
    105e:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    1062:	d8 01       	movw	r26, r16
    1064:	5a 96       	adiw	r26, 0x1a	; 26
    1066:	8d 91       	ld	r24, X+
    1068:	9c 91       	ld	r25, X
    106a:	5b 97       	sbiw	r26, 0x1b	; 27
    106c:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTARTED;
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	f8 01       	movw	r30, r16
    1074:	84 87       	std	Z+12, r24	; 0x0c

				//laserTimer.Start(12500);
			}
		break;
    1076:	66 c3       	rjmp	.+1740   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_WORKOnStop:
			{
				uint16_t data = 0;
    1078:	cf 51       	subi	r28, 0x1F	; 31
    107a:	df 4f       	sbci	r29, 0xFF	; 255
    107c:	18 82       	st	Y, r1
    107e:	19 82       	std	Y+1, r1	; 0x01
    1080:	c1 5e       	subi	r28, 0xE1	; 225
    1082:	d0 40       	sbci	r29, 0x00	; 0
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1084:	42 e0       	ldi	r20, 0x02	; 2
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	be 01       	movw	r22, r28
    108a:	6f 51       	subi	r22, 0x1F	; 31
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	89 eb       	ldi	r24, 0xB9	; 185
    1090:	9b e2       	ldi	r25, 0x2B	; 43
    1092:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN4CSPI4SendEPhj>
				
				laserTimer.Stop();
    1096:	83 e8       	ldi	r24, 0x83	; 131
    1098:	91 e2       	ldi	r25, 0x21	; 33
    109a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    109e:	60 e1       	ldi	r22, 0x10	; 16
    10a0:	83 e8       	ldi	r24, 0x83	; 131
    10a2:	91 e2       	ldi	r25, 0x21	; 33
    10a4:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    10a8:	60 e2       	ldi	r22, 0x20	; 32
    10aa:	83 e8       	ldi	r24, 0x83	; 131
    10ac:	91 e2       	ldi	r25, 0x21	; 33
    10ae:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    10b2:	84 e9       	ldi	r24, 0x94	; 148
    10b4:	9b e2       	ldi	r25, 0x2B	; 43
    10b6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
    10ba:	84 e9       	ldi	r24, 0x94	; 148
    10bc:	9b e2       	ldi	r25, 0x2B	; 43
    10be:	0e 94 76 03 	call	0x6ec	; 0x6ec <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t pic_id = 0;
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	1a 82       	std	Y+2, r1	; 0x02
				switch (profile)
    10c6:	d8 01       	movw	r26, r16
    10c8:	1d 96       	adiw	r26, 0x0d	; 13
    10ca:	8c 91       	ld	r24, X
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a9 f0       	breq	.+42     	; 0x10fa <_ZN16CLaserControlApp3RunEv+0x2aa>
    10d0:	18 f0       	brcs	.+6      	; 0x10d8 <_ZN16CLaserControlApp3RunEv+0x288>
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	49 f0       	breq	.+18     	; 0x10e8 <_ZN16CLaserControlApp3RunEv+0x298>
    10d6:	18 c0       	rjmp	.+48     	; 0x1108 <_ZN16CLaserControlApp3RunEv+0x2b8>
				{
					case WorkFast: 
						pic_id = swap(PICID_WORKFAST); 
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKFAST;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	f8 01       	movw	r30, r16
    10e4:	84 87       	std	Z+12, r24	; 0x0c
						break;
    10e6:	10 c0       	rjmp	.+32     	; 0x1108 <_ZN16CLaserControlApp3RunEv+0x2b8>
					case WorkSlow: 
						pic_id = swap(PICID_WORKSLOW); 
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKSLOW;
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	d8 01       	movw	r26, r16
    10f4:	1c 96       	adiw	r26, 0x0c	; 12
    10f6:	8c 93       	st	X, r24
						break;
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <_ZN16CLaserControlApp3RunEv+0x2b8>
					case WorkMedium: 
						pic_id = swap(PICID_WORKMEDIUM); 
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	9a 83       	std	Y+2, r25	; 0x02
						state = APP_WORKMEDIUM;
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	f8 01       	movw	r30, r16
    1106:	84 87       	std	Z+12, r24	; 0x0c
						break;
				}
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1108:	22 e0       	ldi	r18, 0x02	; 2
    110a:	ae 01       	movw	r20, r28
    110c:	4f 5f       	subi	r20, 0xFF	; 255
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	63 e0       	ldi	r22, 0x03	; 3
    1112:	d8 01       	movw	r26, r16
    1114:	5a 96       	adiw	r26, 0x1a	; 26
    1116:	8d 91       	ld	r24, X+
    1118:	9c 91       	ld	r25, X
    111a:	5b 97       	sbiw	r26, 0x1b	; 27
    111c:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    1120:	f8 01       	movw	r30, r16
    1122:	82 8d       	ldd	r24, Z+26	; 0x1a
    1124:	93 8d       	ldd	r25, Z+27	; 0x1b
    1126:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			}
		break;
    112a:	0c c3       	rjmp	.+1560   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_PHOTOTYPE6:
			//state = APP_WORKFAST;
		break;
		case APP_DATABASE_START:
			{
				uint16_t pic_id = swap(27 + 14 - 3);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	96 e2       	ldi	r25, 0x26	; 38
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1134:	22 e0       	ldi	r18, 0x02	; 2
    1136:	ae 01       	movw	r20, r28
    1138:	4f 5f       	subi	r20, 0xFF	; 255
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	63 e0       	ldi	r22, 0x03	; 3
    113e:	d8 01       	movw	r26, r16
    1140:	5a 96       	adiw	r26, 0x1a	; 26
    1142:	8d 91       	ld	r24, X+
    1144:	9c 91       	ld	r25, X
    1146:	5b 97       	sbiw	r26, 0x1b	; 27
    1148:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    114c:	f8 01       	movw	r30, r16
    114e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1150:	93 8d       	ldd	r25, Z+27	; 0x1b
    1152:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_DATABASE;
    1156:	80 e1       	ldi	r24, 0x10	; 16
    1158:	d8 01       	movw	r26, r16
    115a:	1c 96       	adiw	r26, 0x0c	; 12
    115c:	8c 93       	st	X, r24
			}
		break;
    115e:	f2 c2       	rjmp	.+1508   	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x8f4>
		case APP_DATABASE:
			{
				//VARIABLE_ADDR_PROFINDEX
				m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PROFINDEX, 2);
    1160:	42 e0       	ldi	r20, 0x02	; 2
    1162:	67 e0       	ldi	r22, 0x07	; 7
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	f8 01       	movw	r30, r16
    1168:	82 8d       	ldd	r24, Z+26	; 0x1a
    116a:	93 8d       	ldd	r25, Z+27	; 0x1b
    116c:	0e 94 ab 28 	call	0x5156	; 0x5156 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
				m_cpSender->WaitMODBUSTransmitter();
    1170:	d8 01       	movw	r26, r16
    1172:	5a 96       	adiw	r26, 0x1a	; 26
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	5b 97       	sbiw	r26, 0x1b	; 27
    117a:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WaitMODBUSListener();
    117e:	f8 01       	movw	r30, r16
    1180:	82 8d       	ldd	r24, Z+26	; 0x1a
    1182:	93 8d       	ldd	r25, Z+27	; 0x1b
    1184:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZN9CMBSender18WaitMODBUSListenerEv>
    1188:	ff ef       	ldi	r31, 0xFF	; 255
    118a:	21 ee       	ldi	r18, 0xE1	; 225
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	f1 50       	subi	r31, 0x01	; 1
    1190:	20 40       	sbci	r18, 0x00	; 0
    1192:	80 40       	sbci	r24, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <_ZN16CLaserControlApp3RunEv+0x33e>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <_ZN16CLaserControlApp3RunEv+0x348>
    1198:	00 00       	nop
				_delay_ms(50);
				
				DGUS_LINESDATA1 lines1 = {0};
    119a:	fe 01       	movw	r30, r28
    119c:	ef 55       	subi	r30, 0x5F	; 95
    119e:	fd 4f       	sbci	r31, 0xFD	; 253
    11a0:	80 ee       	ldi	r24, 0xE0	; 224
    11a2:	df 01       	movw	r26, r30
    11a4:	28 2f       	mov	r18, r24
    11a6:	1d 92       	st	X+, r1
    11a8:	2a 95       	dec	r18
    11aa:	e9 f7       	brne	.-6      	; 0x11a6 <_ZN16CLaserControlApp3RunEv+0x356>
				DGUS_LINESDATA2 lines2 = {0};
    11ac:	e0 5e       	subi	r30, 0xE0	; 224
    11ae:	f1 09       	sbc	r31, r1
    11b0:	df 01       	movw	r26, r30
    11b2:	28 2f       	mov	r18, r24
    11b4:	1d 92       	st	X+, r1
    11b6:	2a 95       	dec	r18
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <_ZN16CLaserControlApp3RunEv+0x364>
				DGUS_VALUESDATA value1 = {0};
    11ba:	e0 5e       	subi	r30, 0xE0	; 224
    11bc:	f1 09       	sbc	r31, r1
    11be:	df 01       	movw	r26, r30
    11c0:	28 2f       	mov	r18, r24
    11c2:	1d 92       	st	X+, r1
    11c4:	2a 95       	dec	r18
    11c6:	e9 f7       	brne	.-6      	; 0x11c2 <_ZN16CLaserControlApp3RunEv+0x372>
				DGUS_VALUESDATA value2 = {0};
    11c8:	e0 5e       	subi	r30, 0xE0	; 224
    11ca:	f1 09       	sbc	r31, r1
    11cc:	df 01       	movw	r26, r30
    11ce:	1d 92       	st	X+, r1
    11d0:	8a 95       	dec	r24
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <_ZN16CLaserControlApp3RunEv+0x37e>
				char empty[33] = "Hello world!                    ";
    11d4:	81 e2       	ldi	r24, 0x21	; 33
    11d6:	ee e5       	ldi	r30, 0x5E	; 94
    11d8:	f0 e2       	ldi	r31, 0x20	; 32
    11da:	de 01       	movw	r26, r28
    11dc:	ae 55       	subi	r26, 0x5E	; 94
    11de:	bc 4f       	sbci	r27, 0xFC	; 252
    11e0:	01 90       	ld	r0, Z+
    11e2:	0d 92       	st	X+, r0
    11e4:	8a 95       	dec	r24
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <_ZN16CLaserControlApp3RunEv+0x390>
				
				                //-------|-------|-------|-------|
				char value[33] = "  4321    1234    1234    1234  ";
    11e8:	81 e2       	ldi	r24, 0x21	; 33
    11ea:	ef e7       	ldi	r30, 0x7F	; 127
    11ec:	f0 e2       	ldi	r31, 0x20	; 32
    11ee:	de 01       	movw	r26, r28
    11f0:	af 57       	subi	r26, 0x7F	; 127
    11f2:	bc 4f       	sbci	r27, 0xFC	; 252
    11f4:	01 90       	ld	r0, Z+
    11f6:	0d 92       	st	X+, r0
    11f8:	8a 95       	dec	r24
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <_ZN16CLaserControlApp3RunEv+0x3a4>
				
				static int cnt = 0;
				static int lastprofile = 0;
				cnt+=1;
    11fc:	80 91 57 21 	lds	r24, 0x2157
    1200:	90 91 58 21 	lds	r25, 0x2158
    1204:	01 96       	adiw	r24, 0x01	; 1
				if (cnt >= 32) cnt = 0;
    1206:	80 32       	cpi	r24, 0x20	; 32
    1208:	91 05       	cpc	r25, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <_ZN16CLaserControlApp3RunEv+0x3c6>
				                //-------|-------|-------|-------|
				char value[33] = "  4321    1234    1234    1234  ";
				
				static int cnt = 0;
				static int lastprofile = 0;
				cnt+=1;
    120c:	80 93 57 21 	sts	0x2157, r24
    1210:	90 93 58 21 	sts	0x2158, r25
    1214:	04 c0       	rjmp	.+8      	; 0x121e <_ZN16CLaserControlApp3RunEv+0x3ce>
				if (cnt >= 32) cnt = 0;
    1216:	10 92 57 21 	sts	0x2157, r1
    121a:	10 92 58 21 	sts	0x2158, r1
				
				if (profileIndex != lastprofile) cnt = 0;
    121e:	f8 01       	movw	r30, r16
    1220:	80 8d       	ldd	r24, Z+24	; 0x18
    1222:	91 8d       	ldd	r25, Z+25	; 0x19
    1224:	20 91 55 21 	lds	r18, 0x2155
    1228:	30 91 56 21 	lds	r19, 0x2156
    122c:	82 17       	cp	r24, r18
    122e:	93 07       	cpc	r25, r19
    1230:	21 f0       	breq	.+8      	; 0x123a <_ZN16CLaserControlApp3RunEv+0x3ea>
    1232:	10 92 57 21 	sts	0x2157, r1
    1236:	10 92 58 21 	sts	0x2158, r1
				
				lastprofile = profileIndex;
    123a:	80 93 55 21 	sts	0x2155, r24
    123e:	90 93 56 21 	sts	0x2156, r25
				
				// Names
				ConvertData((void*) lines1.line1 , (void*)empty, 32);
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	be 01       	movw	r22, r28
    124c:	6e 55       	subi	r22, 0x5E	; 94
    124e:	7c 4f       	sbci	r23, 0xFC	; 252
    1250:	ce 01       	movw	r24, r28
    1252:	8f 55       	subi	r24, 0x5F	; 95
    1254:	9d 4f       	sbci	r25, 0xFD	; 253
    1256:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line2 , (void*)empty, 32);
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	be 01       	movw	r22, r28
    1264:	6e 55       	subi	r22, 0x5E	; 94
    1266:	7c 4f       	sbci	r23, 0xFC	; 252
    1268:	81 ea       	ldi	r24, 0xA1	; 161
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	8c 0f       	add	r24, r28
    126e:	9d 1f       	adc	r25, r29
    1270:	80 96       	adiw	r24, 0x20	; 32
    1272:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line3 , (void*)empty, 32);
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	be 01       	movw	r22, r28
    1280:	6e 55       	subi	r22, 0x5E	; 94
    1282:	7c 4f       	sbci	r23, 0xFC	; 252
    1284:	ce 01       	movw	r24, r28
    1286:	8f 51       	subi	r24, 0x1F	; 31
    1288:	9d 4f       	sbci	r25, 0xFD	; 253
    128a:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line4 , (void*)empty, 32);
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	be 01       	movw	r22, r28
    1298:	6e 55       	subi	r22, 0x5E	; 94
    129a:	7c 4f       	sbci	r23, 0xFC	; 252
    129c:	ce 01       	movw	r24, r28
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	9c 4f       	sbci	r25, 0xFC	; 252
    12a2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line5 , (void*)empty, 32);
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	be 01       	movw	r22, r28
    12b0:	6e 55       	subi	r22, 0x5E	; 94
    12b2:	7c 4f       	sbci	r23, 0xFC	; 252
    12b4:	ce 01       	movw	r24, r28
    12b6:	8f 5d       	subi	r24, 0xDF	; 223
    12b8:	9c 4f       	sbci	r25, 0xFC	; 252
    12ba:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line6 , (void*)empty, 32);
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e2       	ldi	r20, 0x20	; 32
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	be 01       	movw	r22, r28
    12c8:	6e 55       	subi	r22, 0x5E	; 94
    12ca:	7c 4f       	sbci	r23, 0xFC	; 252
    12cc:	ce 01       	movw	r24, r28
    12ce:	8f 5b       	subi	r24, 0xBF	; 191
    12d0:	9c 4f       	sbci	r25, 0xFC	; 252
    12d2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines1.line7 , (void*)empty, 32);
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e2       	ldi	r20, 0x20	; 32
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	be 01       	movw	r22, r28
    12e0:	6e 55       	subi	r22, 0x5E	; 94
    12e2:	7c 4f       	sbci	r23, 0xFC	; 252
    12e4:	ce 01       	movw	r24, r28
    12e6:	8f 59       	subi	r24, 0x9F	; 159
    12e8:	9c 4f       	sbci	r25, 0xFC	; 252
    12ea:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line8 , (void*)empty, 32);
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e2       	ldi	r20, 0x20	; 32
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	be 01       	movw	r22, r28
    12f8:	6e 55       	subi	r22, 0x5E	; 94
    12fa:	7c 4f       	sbci	r23, 0xFC	; 252
    12fc:	ce 01       	movw	r24, r28
    12fe:	8f 53       	subi	r24, 0x3F	; 63
    1300:	9e 4f       	sbci	r25, 0xFE	; 254
    1302:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line9 , (void*)empty, 32);
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	be 01       	movw	r22, r28
    1310:	6e 55       	subi	r22, 0x5E	; 94
    1312:	7c 4f       	sbci	r23, 0xFC	; 252
    1314:	81 ec       	ldi	r24, 0xC1	; 193
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	8c 0f       	add	r24, r28
    131a:	9d 1f       	adc	r25, r29
    131c:	80 96       	adiw	r24, 0x20	; 32
    131e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line10, (void*)empty, 32);
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	be 01       	movw	r22, r28
    132c:	6e 55       	subi	r22, 0x5E	; 94
    132e:	7c 4f       	sbci	r23, 0xFC	; 252
    1330:	ce 01       	movw	r24, r28
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	9d 4f       	sbci	r25, 0xFD	; 253
    1336:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line11, (void*)empty, 32);
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	be 01       	movw	r22, r28
    1344:	6e 55       	subi	r22, 0x5E	; 94
    1346:	7c 4f       	sbci	r23, 0xFC	; 252
    1348:	ce 01       	movw	r24, r28
    134a:	8f 5d       	subi	r24, 0xDF	; 223
    134c:	9d 4f       	sbci	r25, 0xFD	; 253
    134e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line12, (void*)empty, 32);
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	be 01       	movw	r22, r28
    135c:	6e 55       	subi	r22, 0x5E	; 94
    135e:	7c 4f       	sbci	r23, 0xFC	; 252
    1360:	ce 01       	movw	r24, r28
    1362:	8f 5b       	subi	r24, 0xBF	; 191
    1364:	9d 4f       	sbci	r25, 0xFD	; 253
    1366:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line13, (void*)empty, 32);
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	be 01       	movw	r22, r28
    1374:	6e 55       	subi	r22, 0x5E	; 94
    1376:	7c 4f       	sbci	r23, 0xFC	; 252
    1378:	ce 01       	movw	r24, r28
    137a:	8f 59       	subi	r24, 0x9F	; 159
    137c:	9d 4f       	sbci	r25, 0xFD	; 253
    137e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*) lines2.line14, (void*)empty, 32);
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	be 01       	movw	r22, r28
    138c:	6e 55       	subi	r22, 0x5E	; 94
    138e:	7c 4f       	sbci	r23, 0xFC	; 252
    1390:	ce 01       	movw	r24, r28
    1392:	8f 57       	subi	r24, 0x7F	; 127
    1394:	9d 4f       	sbci	r25, 0xFD	; 253
    1396:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				
				switch (profileIndex)
    139a:	d8 01       	movw	r26, r16
    139c:	58 96       	adiw	r26, 0x18	; 24
    139e:	ed 91       	ld	r30, X+
    13a0:	fc 91       	ld	r31, X
    13a2:	59 97       	sbiw	r26, 0x19	; 25
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	ee 30       	cpi	r30, 0x0E	; 14
    13a8:	f1 05       	cpc	r31, r1
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <_ZN16CLaserControlApp3RunEv+0x55e>
    13ac:	d7 c0       	rjmp	.+430    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
    13ae:	88 27       	eor	r24, r24
    13b0:	e6 5e       	subi	r30, 0xE6	; 230
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__tablejump2__>
				{
					case 1 : ConvertData((void*) lines1.line1 , (void*)empty, 32, cnt); break;
    13ba:	20 91 57 21 	lds	r18, 0x2157
    13be:	30 91 58 21 	lds	r19, 0x2158
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	be 01       	movw	r22, r28
    13c8:	6e 55       	subi	r22, 0x5E	; 94
    13ca:	7c 4f       	sbci	r23, 0xFC	; 252
    13cc:	ce 01       	movw	r24, r28
    13ce:	8f 55       	subi	r24, 0x5F	; 95
    13d0:	9d 4f       	sbci	r25, 0xFD	; 253
    13d2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    13d6:	c2 c0       	rjmp	.+388    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 2 : ConvertData((void*) lines1.line2 , (void*)empty, 32, cnt); break;
    13d8:	20 91 57 21 	lds	r18, 0x2157
    13dc:	30 91 58 21 	lds	r19, 0x2158
    13e0:	40 e2       	ldi	r20, 0x20	; 32
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	be 01       	movw	r22, r28
    13e6:	6e 55       	subi	r22, 0x5E	; 94
    13e8:	7c 4f       	sbci	r23, 0xFC	; 252
    13ea:	ce 01       	movw	r24, r28
    13ec:	8f 53       	subi	r24, 0x3F	; 63
    13ee:	9d 4f       	sbci	r25, 0xFD	; 253
    13f0:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    13f4:	b3 c0       	rjmp	.+358    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 3 : ConvertData((void*) lines1.line3 , (void*)empty, 32, cnt); break;
    13f6:	20 91 57 21 	lds	r18, 0x2157
    13fa:	30 91 58 21 	lds	r19, 0x2158
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	be 01       	movw	r22, r28
    1404:	6e 55       	subi	r22, 0x5E	; 94
    1406:	7c 4f       	sbci	r23, 0xFC	; 252
    1408:	ce 01       	movw	r24, r28
    140a:	8f 51       	subi	r24, 0x1F	; 31
    140c:	9d 4f       	sbci	r25, 0xFD	; 253
    140e:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1412:	a4 c0       	rjmp	.+328    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 4 : ConvertData((void*) lines1.line4 , (void*)empty, 32, cnt); break;
    1414:	20 91 57 21 	lds	r18, 0x2157
    1418:	30 91 58 21 	lds	r19, 0x2158
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	be 01       	movw	r22, r28
    1422:	6e 55       	subi	r22, 0x5E	; 94
    1424:	7c 4f       	sbci	r23, 0xFC	; 252
    1426:	ce 01       	movw	r24, r28
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	9c 4f       	sbci	r25, 0xFC	; 252
    142c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1430:	95 c0       	rjmp	.+298    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 5 : ConvertData((void*) lines1.line5 , (void*)empty, 32, cnt); break;
    1432:	20 91 57 21 	lds	r18, 0x2157
    1436:	30 91 58 21 	lds	r19, 0x2158
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	be 01       	movw	r22, r28
    1440:	6e 55       	subi	r22, 0x5E	; 94
    1442:	7c 4f       	sbci	r23, 0xFC	; 252
    1444:	ce 01       	movw	r24, r28
    1446:	8f 5d       	subi	r24, 0xDF	; 223
    1448:	9c 4f       	sbci	r25, 0xFC	; 252
    144a:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    144e:	86 c0       	rjmp	.+268    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 6 : ConvertData((void*) lines1.line6 , (void*)empty, 32, cnt); break;
    1450:	20 91 57 21 	lds	r18, 0x2157
    1454:	30 91 58 21 	lds	r19, 0x2158
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	be 01       	movw	r22, r28
    145e:	6e 55       	subi	r22, 0x5E	; 94
    1460:	7c 4f       	sbci	r23, 0xFC	; 252
    1462:	ce 01       	movw	r24, r28
    1464:	8f 5b       	subi	r24, 0xBF	; 191
    1466:	9c 4f       	sbci	r25, 0xFC	; 252
    1468:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    146c:	77 c0       	rjmp	.+238    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 7 : ConvertData((void*) lines1.line7 , (void*)empty, 32, cnt); break;
    146e:	20 91 57 21 	lds	r18, 0x2157
    1472:	30 91 58 21 	lds	r19, 0x2158
    1476:	40 e2       	ldi	r20, 0x20	; 32
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	be 01       	movw	r22, r28
    147c:	6e 55       	subi	r22, 0x5E	; 94
    147e:	7c 4f       	sbci	r23, 0xFC	; 252
    1480:	ce 01       	movw	r24, r28
    1482:	8f 59       	subi	r24, 0x9F	; 159
    1484:	9c 4f       	sbci	r25, 0xFC	; 252
    1486:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    148a:	68 c0       	rjmp	.+208    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 8 : ConvertData((void*) lines2.line8 , (void*)empty, 32, cnt); break;
    148c:	20 91 57 21 	lds	r18, 0x2157
    1490:	30 91 58 21 	lds	r19, 0x2158
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	be 01       	movw	r22, r28
    149a:	6e 55       	subi	r22, 0x5E	; 94
    149c:	7c 4f       	sbci	r23, 0xFC	; 252
    149e:	ce 01       	movw	r24, r28
    14a0:	8f 53       	subi	r24, 0x3F	; 63
    14a2:	9e 4f       	sbci	r25, 0xFE	; 254
    14a4:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    14a8:	59 c0       	rjmp	.+178    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 9 : ConvertData((void*) lines2.line9 , (void*)empty, 32, cnt); break;
    14aa:	20 91 57 21 	lds	r18, 0x2157
    14ae:	30 91 58 21 	lds	r19, 0x2158
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	be 01       	movw	r22, r28
    14b8:	6e 55       	subi	r22, 0x5E	; 94
    14ba:	7c 4f       	sbci	r23, 0xFC	; 252
    14bc:	ce 01       	movw	r24, r28
    14be:	8f 51       	subi	r24, 0x1F	; 31
    14c0:	9e 4f       	sbci	r25, 0xFE	; 254
    14c2:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    14c6:	4a c0       	rjmp	.+148    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 10: ConvertData((void*) lines2.line10, (void*)empty, 32, cnt); break;
    14c8:	20 91 57 21 	lds	r18, 0x2157
    14cc:	30 91 58 21 	lds	r19, 0x2158
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	be 01       	movw	r22, r28
    14d6:	6e 55       	subi	r22, 0x5E	; 94
    14d8:	7c 4f       	sbci	r23, 0xFC	; 252
    14da:	ce 01       	movw	r24, r28
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	9d 4f       	sbci	r25, 0xFD	; 253
    14e0:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    14e4:	3b c0       	rjmp	.+118    	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 11: ConvertData((void*) lines2.line11, (void*)empty, 32, cnt); break;
    14e6:	20 91 57 21 	lds	r18, 0x2157
    14ea:	30 91 58 21 	lds	r19, 0x2158
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	be 01       	movw	r22, r28
    14f4:	6e 55       	subi	r22, 0x5E	; 94
    14f6:	7c 4f       	sbci	r23, 0xFC	; 252
    14f8:	ce 01       	movw	r24, r28
    14fa:	8f 5d       	subi	r24, 0xDF	; 223
    14fc:	9d 4f       	sbci	r25, 0xFD	; 253
    14fe:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1502:	2c c0       	rjmp	.+88     	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 12: ConvertData((void*) lines2.line12, (void*)empty, 32, cnt); break;
    1504:	20 91 57 21 	lds	r18, 0x2157
    1508:	30 91 58 21 	lds	r19, 0x2158
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	be 01       	movw	r22, r28
    1512:	6e 55       	subi	r22, 0x5E	; 94
    1514:	7c 4f       	sbci	r23, 0xFC	; 252
    1516:	ce 01       	movw	r24, r28
    1518:	8f 5b       	subi	r24, 0xBF	; 191
    151a:	9d 4f       	sbci	r25, 0xFD	; 253
    151c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    1520:	1d c0       	rjmp	.+58     	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 13: ConvertData((void*) lines2.line13, (void*)empty, 32, cnt); break;
    1522:	20 91 57 21 	lds	r18, 0x2157
    1526:	30 91 58 21 	lds	r19, 0x2158
    152a:	40 e2       	ldi	r20, 0x20	; 32
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	be 01       	movw	r22, r28
    1530:	6e 55       	subi	r22, 0x5E	; 94
    1532:	7c 4f       	sbci	r23, 0xFC	; 252
    1534:	ce 01       	movw	r24, r28
    1536:	8f 59       	subi	r24, 0x9F	; 159
    1538:	9d 4f       	sbci	r25, 0xFD	; 253
    153a:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
    153e:	0e c0       	rjmp	.+28     	; 0x155c <_ZN16CLaserControlApp3RunEv+0x70c>
					case 14: ConvertData((void*) lines2.line14, (void*)empty, 32, cnt); break;
    1540:	20 91 57 21 	lds	r18, 0x2157
    1544:	30 91 58 21 	lds	r19, 0x2158
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	be 01       	movw	r22, r28
    154e:	6e 55       	subi	r22, 0x5E	; 94
    1550:	7c 4f       	sbci	r23, 0xFC	; 252
    1552:	ce 01       	movw	r24, r28
    1554:	8f 57       	subi	r24, 0x7F	; 127
    1556:	9d 4f       	sbci	r25, 0xFD	; 253
    1558:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				}
				
				// Parameters
				ConvertData((void*)&value1.value1, (void*)value, 32);
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	be 01       	movw	r22, r28
    1566:	6f 57       	subi	r22, 0x7F	; 127
    1568:	7c 4f       	sbci	r23, 0xFC	; 252
    156a:	ce 01       	movw	r24, r28
    156c:	8f 51       	subi	r24, 0x1F	; 31
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value2, (void*)value, 32);
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	be 01       	movw	r22, r28
    157e:	6f 57       	subi	r22, 0x7F	; 127
    1580:	7c 4f       	sbci	r23, 0xFC	; 252
    1582:	81 ee       	ldi	r24, 0xE1	; 225
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	8c 0f       	add	r24, r28
    1588:	9d 1f       	adc	r25, r29
    158a:	80 96       	adiw	r24, 0x20	; 32
    158c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value3, (void*)value, 32);
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e2       	ldi	r20, 0x20	; 32
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	be 01       	movw	r22, r28
    159a:	6f 57       	subi	r22, 0x7F	; 127
    159c:	7c 4f       	sbci	r23, 0xFC	; 252
    159e:	ce 01       	movw	r24, r28
    15a0:	8f 5d       	subi	r24, 0xDF	; 223
    15a2:	9e 4f       	sbci	r25, 0xFE	; 254
    15a4:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value4, (void*)value, 32);
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	be 01       	movw	r22, r28
    15b2:	6f 57       	subi	r22, 0x7F	; 127
    15b4:	7c 4f       	sbci	r23, 0xFC	; 252
    15b6:	ce 01       	movw	r24, r28
    15b8:	8f 5b       	subi	r24, 0xBF	; 191
    15ba:	9e 4f       	sbci	r25, 0xFE	; 254
    15bc:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value5, (void*)value, 32);
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	be 01       	movw	r22, r28
    15ca:	6f 57       	subi	r22, 0x7F	; 127
    15cc:	7c 4f       	sbci	r23, 0xFC	; 252
    15ce:	ce 01       	movw	r24, r28
    15d0:	8f 59       	subi	r24, 0x9F	; 159
    15d2:	9e 4f       	sbci	r25, 0xFE	; 254
    15d4:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value6, (void*)value, 32);
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	be 01       	movw	r22, r28
    15e2:	6f 57       	subi	r22, 0x7F	; 127
    15e4:	7c 4f       	sbci	r23, 0xFC	; 252
    15e6:	ce 01       	movw	r24, r28
    15e8:	8f 57       	subi	r24, 0x7F	; 127
    15ea:	9e 4f       	sbci	r25, 0xFE	; 254
    15ec:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value1.value7, (void*)value, 32);
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	be 01       	movw	r22, r28
    15fa:	6f 57       	subi	r22, 0x7F	; 127
    15fc:	7c 4f       	sbci	r23, 0xFC	; 252
    15fe:	ce 01       	movw	r24, r28
    1600:	8f 55       	subi	r24, 0x5F	; 95
    1602:	9e 4f       	sbci	r25, 0xFE	; 254
    1604:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value1, (void*)value, 32);
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	be 01       	movw	r22, r28
    1612:	6f 57       	subi	r22, 0x7F	; 127
    1614:	7c 4f       	sbci	r23, 0xFC	; 252
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value2, (void*)value, 32);
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	be 01       	movw	r22, r28
    1628:	6f 57       	subi	r22, 0x7F	; 127
    162a:	7c 4f       	sbci	r23, 0xFC	; 252
    162c:	ce 01       	movw	r24, r28
    162e:	81 96       	adiw	r24, 0x21	; 33
    1630:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value3, (void*)value, 32);
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	be 01       	movw	r22, r28
    163e:	6f 57       	subi	r22, 0x7F	; 127
    1640:	7c 4f       	sbci	r23, 0xFC	; 252
    1642:	ce 01       	movw	r24, r28
    1644:	8f 5b       	subi	r24, 0xBF	; 191
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value4, (void*)value, 32);
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e2       	ldi	r20, 0x20	; 32
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	be 01       	movw	r22, r28
    1656:	6f 57       	subi	r22, 0x7F	; 127
    1658:	7c 4f       	sbci	r23, 0xFC	; 252
    165a:	ce 01       	movw	r24, r28
    165c:	8f 59       	subi	r24, 0x9F	; 159
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value5, (void*)value, 32);
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	be 01       	movw	r22, r28
    166e:	6f 57       	subi	r22, 0x7F	; 127
    1670:	7c 4f       	sbci	r23, 0xFC	; 252
    1672:	ce 01       	movw	r24, r28
    1674:	8f 57       	subi	r24, 0x7F	; 127
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value6, (void*)value, 32);
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e2       	ldi	r20, 0x20	; 32
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	be 01       	movw	r22, r28
    1686:	6f 57       	subi	r22, 0x7F	; 127
    1688:	7c 4f       	sbci	r23, 0xFC	; 252
    168a:	ce 01       	movw	r24, r28
    168c:	8f 55       	subi	r24, 0x5F	; 95
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				ConvertData((void*)&value2.value7, (void*)value, 32);
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	be 01       	movw	r22, r28
    169e:	6f 57       	subi	r22, 0x7F	; 127
    16a0:	7c 4f       	sbci	r23, 0xFC	; 252
    16a2:	ce 01       	movw	r24, r28
    16a4:	8f 53       	subi	r24, 0x3F	; 63
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11ConvertDataPvS_jj>
				
				// Param transfer
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA1 , (uint16_t*)&lines1, sizeof(lines1));
    16ac:	20 ee       	ldi	r18, 0xE0	; 224
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	ae 01       	movw	r20, r28
    16b2:	4f 55       	subi	r20, 0x5F	; 95
    16b4:	5d 4f       	sbci	r21, 0xFD	; 253
    16b6:	60 e1       	ldi	r22, 0x10	; 16
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	f8 01       	movw	r30, r16
    16bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    16be:	93 8d       	ldd	r25, Z+27	; 0x1b
    16c0:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    16c4:	d8 01       	movw	r26, r16
    16c6:	5a 96       	adiw	r26, 0x1a	; 26
    16c8:	8d 91       	ld	r24, X+
    16ca:	9c 91       	ld	r25, X
    16cc:	5b 97       	sbiw	r26, 0x1b	; 27
    16ce:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LINESDATA2 , (uint16_t*)&lines2, sizeof(lines2));
    16d2:	20 ee       	ldi	r18, 0xE0	; 224
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	ae 01       	movw	r20, r28
    16d8:	4f 53       	subi	r20, 0x3F	; 63
    16da:	5e 4f       	sbci	r21, 0xFE	; 254
    16dc:	60 e8       	ldi	r22, 0x80	; 128
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	f8 01       	movw	r30, r16
    16e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    16e4:	93 8d       	ldd	r25, Z+27	; 0x1b
    16e6:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    16ea:	d8 01       	movw	r26, r16
    16ec:	5a 96       	adiw	r26, 0x1a	; 26
    16ee:	8d 91       	ld	r24, X+
    16f0:	9c 91       	ld	r25, X
    16f2:	5b 97       	sbiw	r26, 0x1b	; 27
    16f4:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_VALUESDATA1, (uint16_t*)&value1, sizeof(value1));
    16f8:	20 ee       	ldi	r18, 0xE0	; 224
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	ae 01       	movw	r20, r28
    16fe:	4f 51       	subi	r20, 0x1F	; 31
    1700:	5f 4f       	sbci	r21, 0xFF	; 255
    1702:	60 e1       	ldi	r22, 0x10	; 16
    1704:	73 e0       	ldi	r23, 0x03	; 3
    1706:	f8 01       	movw	r30, r16
    1708:	82 8d       	ldd	r24, Z+26	; 0x1a
    170a:	93 8d       	ldd	r25, Z+27	; 0x1b
    170c:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    1710:	d8 01       	movw	r26, r16
    1712:	5a 96       	adiw	r26, 0x1a	; 26
    1714:	8d 91       	ld	r24, X+
    1716:	9c 91       	ld	r25, X
    1718:	5b 97       	sbiw	r26, 0x1b	; 27
    171a:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_VALUESDATA2, (uint16_t*)&value2, sizeof(value2));
    171e:	20 ee       	ldi	r18, 0xE0	; 224
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	ae 01       	movw	r20, r28
    1724:	4f 5f       	subi	r20, 0xFF	; 255
    1726:	5f 4f       	sbci	r21, 0xFF	; 255
    1728:	60 e8       	ldi	r22, 0x80	; 128
    172a:	73 e0       	ldi	r23, 0x03	; 3
    172c:	f8 01       	movw	r30, r16
    172e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1730:	93 8d       	ldd	r25, Z+27	; 0x1b
    1732:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
				m_cpSender->WaitMODBUSTransmitter();
    1736:	d8 01       	movw	r26, r16
    1738:	5a 96       	adiw	r26, 0x1a	; 26
    173a:	8d 91       	ld	r24, X+
    173c:	9c 91       	ld	r25, X
    173e:	5b 97       	sbiw	r26, 0x1b	; 27
    1740:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
    1744:	f8 01       	movw	r30, r16
    1746:	87 85       	ldd	r24, Z+15	; 0x0f
    1748:	88 23       	and	r24, r24
    174a:	89 f1       	breq	.+98     	; 0x17ae <_ZN16CLaserControlApp3RunEv+0x95e>
	{
		switch (profile)
    174c:	85 85       	ldd	r24, Z+13	; 0x0d
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	d9 f0       	breq	.+54     	; 0x1788 <_ZN16CLaserControlApp3RunEv+0x938>
    1752:	18 f0       	brcs	.+6      	; 0x175a <_ZN16CLaserControlApp3RunEv+0x90a>
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	61 f0       	breq	.+24     	; 0x1770 <_ZN16CLaserControlApp3RunEv+0x920>
    1758:	21 c0       	rjmp	.+66     	; 0x179c <_ZN16CLaserControlApp3RunEv+0x94c>
		{
			case WorkFast:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(DGUS_DATA));
    175a:	2e e0       	ldi	r18, 0x0E	; 14
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	45 e7       	ldi	r20, 0x75	; 117
    1760:	51 e2       	ldi	r21, 0x21	; 33
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	82 8d       	ldd	r24, Z+26	; 0x1a
    1768:	93 8d       	ldd	r25, Z+27	; 0x1b
    176a:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    176e:	16 c0       	rjmp	.+44     	; 0x179c <_ZN16CLaserControlApp3RunEv+0x94c>
			case WorkSlow:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Slow, sizeof(DGUS_DATA));
    1770:	2e e0       	ldi	r18, 0x0E	; 14
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	49 e5       	ldi	r20, 0x59	; 89
    1776:	51 e2       	ldi	r21, 0x21	; 33
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	f8 01       	movw	r30, r16
    177e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1780:	93 8d       	ldd	r25, Z+27	; 0x1b
    1782:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1786:	0a c0       	rjmp	.+20     	; 0x179c <_ZN16CLaserControlApp3RunEv+0x94c>
			case WorkMedium:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Medium, sizeof(DGUS_DATA));
    1788:	2e e0       	ldi	r18, 0x0E	; 14
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	47 e6       	ldi	r20, 0x67	; 103
    178e:	51 e2       	ldi	r21, 0x21	; 33
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	82 8d       	ldd	r24, Z+26	; 0x1a
    1796:	93 8d       	ldd	r25, Z+27	; 0x1b
    1798:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    179c:	f8 01       	movw	r30, r16
    179e:	82 8d       	ldd	r24, Z+26	; 0x1a
    17a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    17a2:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
    17a6:	d8 01       	movw	r26, r16
    17a8:	1f 96       	adiw	r26, 0x0f	; 15
    17aa:	1c 92       	st	X, r1
    17ac:	d6 c1       	rjmp	.+940    	; 0x1b5a <_ZN16CLaserControlApp3RunEv+0xd0a>
	}
	else
	{
		switch (profile)
    17ae:	f8 01       	movw	r30, r16
    17b0:	85 85       	ldd	r24, Z+13	; 0x0d
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <_ZN16CLaserControlApp3RunEv+0x968>
    17b6:	35 c1       	rjmp	.+618    	; 0x1a22 <_ZN16CLaserControlApp3RunEv+0xbd2>
    17b8:	20 f0       	brcs	.+8      	; 0x17c2 <_ZN16CLaserControlApp3RunEv+0x972>
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <_ZN16CLaserControlApp3RunEv+0x970>
    17be:	99 c0       	rjmp	.+306    	; 0x18f2 <_ZN16CLaserControlApp3RunEv+0xaa2>
    17c0:	c7 c1       	rjmp	.+910    	; 0x1b50 <_ZN16CLaserControlApp3RunEv+0xd00>
		{
			case WorkFast:
				// Fast profile			
				DGUSDATA.DutyCycle = m_structDGUSDATA_Fast.Duration * m_structDGUSDATA_Fast.Frequency / 10;
    17c2:	e5 e7       	ldi	r30, 0x75	; 117
    17c4:	f1 e2       	ldi	r31, 0x21	; 33
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	40 81       	ld	r20, Z
    17cc:	51 81       	ldd	r21, Z+1	; 0x01
    17ce:	48 9f       	mul	r20, r24
    17d0:	90 01       	movw	r18, r0
    17d2:	49 9f       	mul	r20, r25
    17d4:	30 0d       	add	r19, r0
    17d6:	58 9f       	mul	r21, r24
    17d8:	30 0d       	add	r19, r0
    17da:	11 24       	eor	r1, r1
    17dc:	ad ec       	ldi	r26, 0xCD	; 205
    17de:	bc ec       	ldi	r27, 0xCC	; 204
    17e0:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    17e4:	7c 01       	movw	r14, r24
    17e6:	f6 94       	lsr	r15
    17e8:	e7 94       	ror	r14
    17ea:	f6 94       	lsr	r15
    17ec:	e7 94       	ror	r14
    17ee:	f6 94       	lsr	r15
    17f0:	e7 94       	ror	r14
    17f2:	eb 86       	std	Y+11, r14	; 0x0b
    17f4:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100;
    17f6:	84 81       	ldd	r24, Z+4	; 0x04
    17f8:	95 81       	ldd	r25, Z+5	; 0x05
    17fa:	42 85       	ldd	r20, Z+10	; 0x0a
    17fc:	53 85       	ldd	r21, Z+11	; 0x0b
    17fe:	48 9f       	mul	r20, r24
    1800:	90 01       	movw	r18, r0
    1802:	49 9f       	mul	r20, r25
    1804:	30 0d       	add	r19, r0
    1806:	58 9f       	mul	r21, r24
    1808:	30 0d       	add	r19, r0
    180a:	11 24       	eor	r1, r1
    180c:	36 95       	lsr	r19
    180e:	27 95       	ror	r18
    1810:	36 95       	lsr	r19
    1812:	27 95       	ror	r18
    1814:	ab e7       	ldi	r26, 0x7B	; 123
    1816:	b4 e1       	ldi	r27, 0x14	; 20
    1818:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	8f 83       	std	Y+7, r24	; 0x07
    1822:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration / 1000;
    1824:	84 81       	ldd	r24, Z+4	; 0x04
    1826:	95 81       	ldd	r25, Z+5	; 0x05
    1828:	42 81       	ldd	r20, Z+2	; 0x02
    182a:	53 81       	ldd	r21, Z+3	; 0x03
    182c:	48 9f       	mul	r20, r24
    182e:	90 01       	movw	r18, r0
    1830:	49 9f       	mul	r20, r25
    1832:	30 0d       	add	r19, r0
    1834:	58 9f       	mul	r21, r24
    1836:	30 0d       	add	r19, r0
    1838:	11 24       	eor	r1, r1
    183a:	36 95       	lsr	r19
    183c:	27 95       	ror	r18
    183e:	36 95       	lsr	r19
    1840:	27 95       	ror	r18
    1842:	36 95       	lsr	r19
    1844:	27 95       	ror	r18
    1846:	a5 ec       	ldi	r26, 0xC5	; 197
    1848:	b0 e2       	ldi	r27, 0x20	; 32
    184a:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    184e:	92 95       	swap	r25
    1850:	82 95       	swap	r24
    1852:	8f 70       	andi	r24, 0x0F	; 15
    1854:	89 27       	eor	r24, r25
    1856:	9f 70       	andi	r25, 0x0F	; 15
    1858:	89 27       	eor	r24, r25
    185a:	89 87       	std	Y+9, r24	; 0x09
    185c:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Fast.Frequency) * 10;
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	8a e6       	ldi	r24, 0x6A	; 106
    1864:	98 e1       	ldi	r25, 0x18	; 24
    1866:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
    186a:	ab 01       	movw	r20, r22
    186c:	44 0f       	add	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	66 0f       	add	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	66 0f       	add	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	46 0f       	add	r20, r22
    187e:	57 1f       	adc	r21, r23
    1880:	d8 01       	movw	r26, r16
    1882:	50 96       	adiw	r26, 0x10	; 16
    1884:	4d 93       	st	X+, r20
    1886:	5c 93       	st	X, r21
    1888:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    188a:	9a 01       	movw	r18, r20
    188c:	36 95       	lsr	r19
    188e:	27 95       	ror	r18
    1890:	36 95       	lsr	r19
    1892:	27 95       	ror	r18
    1894:	ab e7       	ldi	r26, 0x7B	; 123
    1896:	b4 e1       	ldi	r27, 0x14	; 20
    1898:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    189c:	96 95       	lsr	r25
    189e:	87 95       	ror	r24
    18a0:	8e 9d       	mul	r24, r14
    18a2:	90 01       	movw	r18, r0
    18a4:	8f 9d       	mul	r24, r15
    18a6:	30 0d       	add	r19, r0
    18a8:	9e 9d       	mul	r25, r14
    18aa:	30 0d       	add	r19, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	42 1b       	sub	r20, r18
    18b0:	53 0b       	sbc	r21, r19
    18b2:	d8 01       	movw	r26, r16
    18b4:	52 96       	adiw	r26, 0x12	; 18
    18b6:	4d 93       	st	X+, r20
    18b8:	5c 93       	st	X, r21
    18ba:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    18bc:	54 96       	adiw	r26, 0x14	; 20
    18be:	ed 92       	st	X+, r14
    18c0:	fc 92       	st	X, r15
    18c2:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Fast.Intensity;
    18c4:	84 81       	ldd	r24, Z+4	; 0x04
    18c6:	95 81       	ldd	r25, Z+5	; 0x05
    18c8:	56 96       	adiw	r26, 0x16	; 22
    18ca:	8d 93       	st	X+, r24
    18cc:	9c 93       	st	X, r25
    18ce:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	80 93 54 21 	sts	0x2154, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    18d6:	26 e0       	ldi	r18, 0x06	; 6
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	ae 01       	movw	r20, r28
    18dc:	49 5f       	subi	r20, 0xF9	; 249
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    18e0:	64 e0       	ldi	r22, 0x04	; 4
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	5a 96       	adiw	r26, 0x1a	; 26
    18e6:	8d 91       	ld	r24, X+
    18e8:	9c 91       	ld	r25, X
    18ea:	5b 97       	sbiw	r26, 0x1b	; 27
    18ec:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    18f0:	2f c1       	rjmp	.+606    	; 0x1b50 <_ZN16CLaserControlApp3RunEv+0xd00>
			case WorkSlow:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Slow.Duration * m_structDGUSDATA_Slow.Frequency / 10;
    18f2:	e9 e5       	ldi	r30, 0x59	; 89
    18f4:	f1 e2       	ldi	r31, 0x21	; 33
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	40 81       	ld	r20, Z
    18fc:	51 81       	ldd	r21, Z+1	; 0x01
    18fe:	48 9f       	mul	r20, r24
    1900:	90 01       	movw	r18, r0
    1902:	49 9f       	mul	r20, r25
    1904:	30 0d       	add	r19, r0
    1906:	58 9f       	mul	r21, r24
    1908:	30 0d       	add	r19, r0
    190a:	11 24       	eor	r1, r1
    190c:	ad ec       	ldi	r26, 0xCD	; 205
    190e:	bc ec       	ldi	r27, 0xCC	; 204
    1910:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    1914:	7c 01       	movw	r14, r24
    1916:	f6 94       	lsr	r15
    1918:	e7 94       	ror	r14
    191a:	f6 94       	lsr	r15
    191c:	e7 94       	ror	r14
    191e:	f6 94       	lsr	r15
    1920:	e7 94       	ror	r14
    1922:	eb 86       	std	Y+11, r14	; 0x0b
    1924:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100;
    1926:	84 81       	ldd	r24, Z+4	; 0x04
    1928:	95 81       	ldd	r25, Z+5	; 0x05
    192a:	42 85       	ldd	r20, Z+10	; 0x0a
    192c:	53 85       	ldd	r21, Z+11	; 0x0b
    192e:	48 9f       	mul	r20, r24
    1930:	90 01       	movw	r18, r0
    1932:	49 9f       	mul	r20, r25
    1934:	30 0d       	add	r19, r0
    1936:	58 9f       	mul	r21, r24
    1938:	30 0d       	add	r19, r0
    193a:	11 24       	eor	r1, r1
    193c:	36 95       	lsr	r19
    193e:	27 95       	ror	r18
    1940:	36 95       	lsr	r19
    1942:	27 95       	ror	r18
    1944:	ab e7       	ldi	r26, 0x7B	; 123
    1946:	b4 e1       	ldi	r27, 0x14	; 20
    1948:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	8f 83       	std	Y+7, r24	; 0x07
    1952:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration / 1000;
    1954:	84 81       	ldd	r24, Z+4	; 0x04
    1956:	95 81       	ldd	r25, Z+5	; 0x05
    1958:	42 81       	ldd	r20, Z+2	; 0x02
    195a:	53 81       	ldd	r21, Z+3	; 0x03
    195c:	48 9f       	mul	r20, r24
    195e:	90 01       	movw	r18, r0
    1960:	49 9f       	mul	r20, r25
    1962:	30 0d       	add	r19, r0
    1964:	58 9f       	mul	r21, r24
    1966:	30 0d       	add	r19, r0
    1968:	11 24       	eor	r1, r1
    196a:	36 95       	lsr	r19
    196c:	27 95       	ror	r18
    196e:	36 95       	lsr	r19
    1970:	27 95       	ror	r18
    1972:	36 95       	lsr	r19
    1974:	27 95       	ror	r18
    1976:	a5 ec       	ldi	r26, 0xC5	; 197
    1978:	b0 e2       	ldi	r27, 0x20	; 32
    197a:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    197e:	92 95       	swap	r25
    1980:	82 95       	swap	r24
    1982:	8f 70       	andi	r24, 0x0F	; 15
    1984:	89 27       	eor	r24, r25
    1986:	9f 70       	andi	r25, 0x0F	; 15
    1988:	89 27       	eor	r24, r25
    198a:	89 87       	std	Y+9, r24	; 0x09
    198c:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Slow.Frequency) * 10;
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	8a e6       	ldi	r24, 0x6A	; 106
    1994:	98 e1       	ldi	r25, 0x18	; 24
    1996:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
    199a:	ab 01       	movw	r20, r22
    199c:	44 0f       	add	r20, r20
    199e:	55 1f       	adc	r21, r21
    19a0:	66 0f       	add	r22, r22
    19a2:	77 1f       	adc	r23, r23
    19a4:	66 0f       	add	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	66 0f       	add	r22, r22
    19aa:	77 1f       	adc	r23, r23
    19ac:	46 0f       	add	r20, r22
    19ae:	57 1f       	adc	r21, r23
    19b0:	d8 01       	movw	r26, r16
    19b2:	50 96       	adiw	r26, 0x10	; 16
    19b4:	4d 93       	st	X+, r20
    19b6:	5c 93       	st	X, r21
    19b8:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    19ba:	9a 01       	movw	r18, r20
    19bc:	36 95       	lsr	r19
    19be:	27 95       	ror	r18
    19c0:	36 95       	lsr	r19
    19c2:	27 95       	ror	r18
    19c4:	ab e7       	ldi	r26, 0x7B	; 123
    19c6:	b4 e1       	ldi	r27, 0x14	; 20
    19c8:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	8e 9d       	mul	r24, r14
    19d2:	90 01       	movw	r18, r0
    19d4:	8f 9d       	mul	r24, r15
    19d6:	30 0d       	add	r19, r0
    19d8:	9e 9d       	mul	r25, r14
    19da:	30 0d       	add	r19, r0
    19dc:	11 24       	eor	r1, r1
    19de:	42 1b       	sub	r20, r18
    19e0:	53 0b       	sbc	r21, r19
    19e2:	d8 01       	movw	r26, r16
    19e4:	52 96       	adiw	r26, 0x12	; 18
    19e6:	4d 93       	st	X+, r20
    19e8:	5c 93       	st	X, r21
    19ea:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    19ec:	54 96       	adiw	r26, 0x14	; 20
    19ee:	ed 92       	st	X+, r14
    19f0:	fc 92       	st	X, r15
    19f2:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Slow.Intensity;
    19f4:	84 81       	ldd	r24, Z+4	; 0x04
    19f6:	95 81       	ldd	r25, Z+5	; 0x05
    19f8:	56 96       	adiw	r26, 0x16	; 22
    19fa:	8d 93       	st	X+, r24
    19fc:	9c 93       	st	X, r25
    19fe:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	80 93 54 21 	sts	0x2154, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    1a06:	26 e0       	ldi	r18, 0x06	; 6
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	ae 01       	movw	r20, r28
    1a0c:	49 5f       	subi	r20, 0xF9	; 249
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	64 e0       	ldi	r22, 0x04	; 4
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	5a 96       	adiw	r26, 0x1a	; 26
    1a16:	8d 91       	ld	r24, X+
    1a18:	9c 91       	ld	r25, X
    1a1a:	5b 97       	sbiw	r26, 0x1b	; 27
    1a1c:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
    1a20:	97 c0       	rjmp	.+302    	; 0x1b50 <_ZN16CLaserControlApp3RunEv+0xd00>
			case WorkMedium:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Medium.Duration * m_structDGUSDATA_Medium.Frequency / 10;
    1a22:	e7 e6       	ldi	r30, 0x67	; 103
    1a24:	f1 e2       	ldi	r31, 0x21	; 33
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	40 81       	ld	r20, Z
    1a2c:	51 81       	ldd	r21, Z+1	; 0x01
    1a2e:	48 9f       	mul	r20, r24
    1a30:	90 01       	movw	r18, r0
    1a32:	49 9f       	mul	r20, r25
    1a34:	30 0d       	add	r19, r0
    1a36:	58 9f       	mul	r21, r24
    1a38:	30 0d       	add	r19, r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	ad ec       	ldi	r26, 0xCD	; 205
    1a3e:	bc ec       	ldi	r27, 0xCC	; 204
    1a40:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    1a44:	7c 01       	movw	r14, r24
    1a46:	f6 94       	lsr	r15
    1a48:	e7 94       	ror	r14
    1a4a:	f6 94       	lsr	r15
    1a4c:	e7 94       	ror	r14
    1a4e:	f6 94       	lsr	r15
    1a50:	e7 94       	ror	r14
    1a52:	eb 86       	std	Y+11, r14	; 0x0b
    1a54:	fc 86       	std	Y+12, r15	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100;
    1a56:	84 81       	ldd	r24, Z+4	; 0x04
    1a58:	95 81       	ldd	r25, Z+5	; 0x05
    1a5a:	42 85       	ldd	r20, Z+10	; 0x0a
    1a5c:	53 85       	ldd	r21, Z+11	; 0x0b
    1a5e:	48 9f       	mul	r20, r24
    1a60:	90 01       	movw	r18, r0
    1a62:	49 9f       	mul	r20, r25
    1a64:	30 0d       	add	r19, r0
    1a66:	58 9f       	mul	r21, r24
    1a68:	30 0d       	add	r19, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	36 95       	lsr	r19
    1a6e:	27 95       	ror	r18
    1a70:	36 95       	lsr	r19
    1a72:	27 95       	ror	r18
    1a74:	ab e7       	ldi	r26, 0x7B	; 123
    1a76:	b4 e1       	ldi	r27, 0x14	; 20
    1a78:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    1a7c:	96 95       	lsr	r25
    1a7e:	87 95       	ror	r24
    1a80:	8f 83       	std	Y+7, r24	; 0x07
    1a82:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration / 1000;
    1a84:	84 81       	ldd	r24, Z+4	; 0x04
    1a86:	95 81       	ldd	r25, Z+5	; 0x05
    1a88:	42 81       	ldd	r20, Z+2	; 0x02
    1a8a:	53 81       	ldd	r21, Z+3	; 0x03
    1a8c:	48 9f       	mul	r20, r24
    1a8e:	90 01       	movw	r18, r0
    1a90:	49 9f       	mul	r20, r25
    1a92:	30 0d       	add	r19, r0
    1a94:	58 9f       	mul	r21, r24
    1a96:	30 0d       	add	r19, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	36 95       	lsr	r19
    1a9c:	27 95       	ror	r18
    1a9e:	36 95       	lsr	r19
    1aa0:	27 95       	ror	r18
    1aa2:	36 95       	lsr	r19
    1aa4:	27 95       	ror	r18
    1aa6:	a5 ec       	ldi	r26, 0xC5	; 197
    1aa8:	b0 e2       	ldi	r27, 0x20	; 32
    1aaa:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    1aae:	92 95       	swap	r25
    1ab0:	82 95       	swap	r24
    1ab2:	8f 70       	andi	r24, 0x0F	; 15
    1ab4:	89 27       	eor	r24, r25
    1ab6:	9f 70       	andi	r25, 0x0F	; 15
    1ab8:	89 27       	eor	r24, r25
    1aba:	89 87       	std	Y+9, r24	; 0x09
    1abc:	9a 87       	std	Y+10, r25	; 0x0a
				
				laserTimerPeriod = (6250 / m_structDGUSDATA_Medium.Frequency) * 10;
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	8a e6       	ldi	r24, 0x6A	; 106
    1ac4:	98 e1       	ldi	r25, 0x18	; 24
    1ac6:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodhi4>
    1aca:	ab 01       	movw	r20, r22
    1acc:	44 0f       	add	r20, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	66 0f       	add	r22, r22
    1ad2:	77 1f       	adc	r23, r23
    1ad4:	66 0f       	add	r22, r22
    1ad6:	77 1f       	adc	r23, r23
    1ad8:	66 0f       	add	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	46 0f       	add	r20, r22
    1ade:	57 1f       	adc	r21, r23
    1ae0:	d8 01       	movw	r26, r16
    1ae2:	50 96       	adiw	r26, 0x10	; 16
    1ae4:	4d 93       	st	X+, r20
    1ae6:	5c 93       	st	X, r21
    1ae8:	51 97       	sbiw	r26, 0x11	; 17
				laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
    1aea:	9a 01       	movw	r18, r20
    1aec:	36 95       	lsr	r19
    1aee:	27 95       	ror	r18
    1af0:	36 95       	lsr	r19
    1af2:	27 95       	ror	r18
    1af4:	ab e7       	ldi	r26, 0x7B	; 123
    1af6:	b4 e1       	ldi	r27, 0x14	; 20
    1af8:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    1afc:	96 95       	lsr	r25
    1afe:	87 95       	ror	r24
    1b00:	8e 9d       	mul	r24, r14
    1b02:	90 01       	movw	r18, r0
    1b04:	8f 9d       	mul	r24, r15
    1b06:	30 0d       	add	r19, r0
    1b08:	9e 9d       	mul	r25, r14
    1b0a:	30 0d       	add	r19, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	42 1b       	sub	r20, r18
    1b10:	53 0b       	sbc	r21, r19
    1b12:	d8 01       	movw	r26, r16
    1b14:	52 96       	adiw	r26, 0x12	; 18
    1b16:	4d 93       	st	X+, r20
    1b18:	5c 93       	st	X, r21
    1b1a:	53 97       	sbiw	r26, 0x13	; 19
				laserTimerDutyCyclems = DGUSDATA.DutyCycle;
    1b1c:	54 96       	adiw	r26, 0x14	; 20
    1b1e:	ed 92       	st	X+, r14
    1b20:	fc 92       	st	X, r15
    1b22:	55 97       	sbiw	r26, 0x15	; 21
				laserPower = m_structDGUSDATA_Medium.Intensity;
    1b24:	84 81       	ldd	r24, Z+4	; 0x04
    1b26:	95 81       	ldd	r25, Z+5	; 0x05
    1b28:	56 96       	adiw	r26, 0x16	; 22
    1b2a:	8d 93       	st	X+, r24
    1b2c:	9c 93       	st	X, r25
    1b2e:	57 97       	sbiw	r26, 0x17	; 23
				DatabaseSelectedProfile = DGUSDATA.DatabaseSelectedProfile;
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	80 93 54 21 	sts	0x2154, r24
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
    1b36:	26 e0       	ldi	r18, 0x06	; 6
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	ae 01       	movw	r20, r28
    1b3c:	49 5f       	subi	r20, 0xF9	; 249
    1b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b40:	64 e0       	ldi	r22, 0x04	; 4
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	5a 96       	adiw	r26, 0x1a	; 26
    1b46:	8d 91       	ld	r24, X+
    1b48:	9c 91       	ld	r25, X
    1b4a:	5b 97       	sbiw	r26, 0x1b	; 27
    1b4c:	0e 94 66 28 	call	0x50cc	; 0x50cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
    1b50:	f8 01       	movw	r30, r16
    1b52:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b54:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b56:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
    1b5a:	ce 53       	subi	r28, 0x3E	; 62
    1b5c:	dc 4f       	sbci	r29, 0xFC	; 252
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	08 95       	ret

00001b70 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    1b70:	08 95       	ret

00001b72 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    1b72:	08 95       	ret

00001b74 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    1b74:	e0 e0       	ldi	r30, 0x00	; 0
    1b76:	fa e0       	ldi	r31, 0x0A	; 10
    1b78:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    1b7a:	87 e8       	ldi	r24, 0x87	; 135
    1b7c:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1b7e:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    1b80:	84 e2       	ldi	r24, 0x24	; 36
    1b82:	94 ef       	ldi	r25, 0xF4	; 244
    1b84:	86 a3       	std	Z+38, r24	; 0x26
    1b86:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    1b88:	82 e1       	ldi	r24, 0x12	; 18
    1b8a:	9a e7       	ldi	r25, 0x7A	; 122
    1b8c:	86 a7       	std	Z+46, r24	; 0x2e
    1b8e:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1b90:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1b92:	17 82       	std	Z+7, r1	; 0x07
    1b94:	08 95       	ret

00001b96 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    1b96:	e0 e4       	ldi	r30, 0x40	; 64
    1b98:	fa e0       	ldi	r31, 0x0A	; 10
    1b9a:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    1b9c:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1b9e:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    1ba0:	84 e2       	ldi	r24, 0x24	; 36
    1ba2:	94 ef       	ldi	r25, 0xF4	; 244
    1ba4:	86 a3       	std	Z+38, r24	; 0x26
    1ba6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1ba8:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1baa:	17 82       	std	Z+7, r1	; 0x07
    1bac:	08 95       	ret

00001bae <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	8a 01       	movw	r16, r20
    1bb6:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    1bb8:	9b 01       	movw	r18, r22
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	64 e2       	ldi	r22, 0x24	; 36
    1bc0:	74 ef       	ldi	r23, 0xF4	; 244
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    1bca:	b8 01       	movw	r22, r16
    1bcc:	76 95       	lsr	r23
    1bce:	67 95       	ror	r22
    1bd0:	ee e3       	ldi	r30, 0x3E	; 62
    1bd2:	e0 9f       	mul	r30, r16
    1bd4:	c0 01       	movw	r24, r0
    1bd6:	e1 9f       	mul	r30, r17
    1bd8:	90 0d       	add	r25, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	86 0f       	add	r24, r22
    1bde:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1be0:	cf 5f       	subi	r28, 0xFF	; 255
    1be2:	b9 01       	movw	r22, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    1be6:	76 95       	lsr	r23
    1be8:	67 95       	ror	r22
    1bea:	ca 95       	dec	r28
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    1bee:	e0 e0       	ldi	r30, 0x00	; 0
    1bf0:	fa e0       	ldi	r31, 0x0A	; 10
    1bf2:	66 a7       	std	Z+46, r22	; 0x2e
    1bf4:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    1bf6:	26 a3       	std	Z+38, r18	; 0x26
    1bf8:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    1bfa:	a0 e4       	ldi	r26, 0x40	; 64
    1bfc:	ba e0       	ldi	r27, 0x0A	; 10
    1bfe:	96 96       	adiw	r26, 0x26	; 38
    1c00:	8d 93       	st	X+, r24
    1c02:	9c 93       	st	X, r25
    1c04:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    1c06:	86 e0       	ldi	r24, 0x06	; 6
    1c08:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    1c0a:	87 e0       	ldi	r24, 0x07	; 7
    1c0c:	8c 93       	st	X, r24
}
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	08 95       	ret

00001c16 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    1c16:	e0 e4       	ldi	r30, 0x40	; 64
    1c18:	fa e0       	ldi	r31, 0x0A	; 10
    1c1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1c1c:	80 ff       	sbrs	r24, 0
    1c1e:	fd cf       	rjmp	.-6      	; 0x1c1a <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    1c20:	e0 e4       	ldi	r30, 0x40	; 64
    1c22:	fa e0       	ldi	r31, 0x0A	; 10
    1c24:	84 85       	ldd	r24, Z+12	; 0x0c
    1c26:	81 70       	andi	r24, 0x01	; 1
    1c28:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    1c2a:	a0 e0       	ldi	r26, 0x00	; 0
    1c2c:	ba e0       	ldi	r27, 0x0A	; 10
    1c2e:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    1c30:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    1c32:	10 a2       	std	Z+32, r1	; 0x20
    1c34:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    1c36:	90 96       	adiw	r26, 0x20	; 32
    1c38:	1d 92       	st	X+, r1
    1c3a:	1c 92       	st	X, r1
    1c3c:	91 97       	sbiw	r26, 0x21	; 33
    1c3e:	2f ef       	ldi	r18, 0xFF	; 255
    1c40:	83 ef       	ldi	r24, 0xF3	; 243
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	21 50       	subi	r18, 0x01	; 1
    1c46:	80 40       	sbci	r24, 0x00	; 0
    1c48:	90 40       	sbci	r25, 0x00	; 0
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <_ZN12CSoundPlayer9SoundStopEv+0x38>
    1c4e:	00 00       	nop
    1c50:	08 95       	ret

00001c52 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    1c58:	23 e0       	ldi	r18, 0x03	; 3
    1c5a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    1c5e:	ce 01       	movw	r24, r28
    1c60:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN12CSoundPlayer9SoundStopEv>
}
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    1c70:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    1c74:	ce 01       	movw	r24, r28
    1c76:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	ec 01       	movw	r28, r24
	cli();
    1c86:	f8 94       	cli

	beep(a, 500);
    1c88:	44 ef       	ldi	r20, 0xF4	; 244
    1c8a:	51 e0       	ldi	r21, 0x01	; 1
    1c8c:	68 eb       	ldi	r22, 0xB8	; 184
    1c8e:	71 e0       	ldi	r23, 0x01	; 1
    1c90:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1c94:	44 ef       	ldi	r20, 0xF4	; 244
    1c96:	51 e0       	ldi	r21, 0x01	; 1
    1c98:	68 eb       	ldi	r22, 0xB8	; 184
    1c9a:	71 e0       	ldi	r23, 0x01	; 1
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1ca2:	44 ef       	ldi	r20, 0xF4	; 244
    1ca4:	51 e0       	ldi	r21, 0x01	; 1
    1ca6:	68 eb       	ldi	r22, 0xB8	; 184
    1ca8:	71 e0       	ldi	r23, 0x01	; 1
    1caa:	ce 01       	movw	r24, r28
    1cac:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    1cb0:	4e e5       	ldi	r20, 0x5E	; 94
    1cb2:	51 e0       	ldi	r21, 0x01	; 1
    1cb4:	6d e5       	ldi	r22, 0x5D	; 93
    1cb6:	71 e0       	ldi	r23, 0x01	; 1
    1cb8:	ce 01       	movw	r24, r28
    1cba:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1cbe:	46 e9       	ldi	r20, 0x96	; 150
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	6b e0       	ldi	r22, 0x0B	; 11
    1cc4:	72 e0       	ldi	r23, 0x02	; 2
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1ccc:	44 ef       	ldi	r20, 0xF4	; 244
    1cce:	51 e0       	ldi	r21, 0x01	; 1
    1cd0:	68 eb       	ldi	r22, 0xB8	; 184
    1cd2:	71 e0       	ldi	r23, 0x01	; 1
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    1cda:	4e e5       	ldi	r20, 0x5E	; 94
    1cdc:	51 e0       	ldi	r21, 0x01	; 1
    1cde:	6d e5       	ldi	r22, 0x5D	; 93
    1ce0:	71 e0       	ldi	r23, 0x01	; 1
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1ce8:	46 e9       	ldi	r20, 0x96	; 150
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	6b e0       	ldi	r22, 0x0B	; 11
    1cee:	72 e0       	ldi	r23, 0x02	; 2
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    1cf6:	4a e8       	ldi	r20, 0x8A	; 138
    1cf8:	52 e0       	ldi	r21, 0x02	; 2
    1cfa:	68 eb       	ldi	r22, 0xB8	; 184
    1cfc:	71 e0       	ldi	r23, 0x01	; 1
    1cfe:	ce 01       	movw	r24, r28
    1d00:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12CSoundPlayer4beepEjj>
    1d04:	2f ef       	ldi	r18, 0xFF	; 255
    1d06:	85 ea       	ldi	r24, 0xA5	; 165
    1d08:	9e e0       	ldi	r25, 0x0E	; 14
    1d0a:	21 50       	subi	r18, 0x01	; 1
    1d0c:	80 40       	sbci	r24, 0x00	; 0
    1d0e:	90 40       	sbci	r25, 0x00	; 0
    1d10:	e1 f7       	brne	.-8      	; 0x1d0a <_ZN12CSoundPlayer4PlayEv+0x8a>
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <_ZN12CSoundPlayer4PlayEv+0x94>
    1d14:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    1d16:	78 94       	sei
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    1d1e:	fc 01       	movw	r30, r24
    1d20:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1d22:	e0 e0       	ldi	r30, 0x00	; 0
    1d24:	f8 e0       	ldi	r31, 0x08	; 8
    1d26:	80 81       	ld	r24, Z
    1d28:	80 7f       	andi	r24, 0xF0	; 240
    1d2a:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1d2c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    1d2e:	10 a2       	std	Z+32, r1	; 0x20
    1d30:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    1d32:	10 a6       	std	Z+40, r1	; 0x28
    1d34:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    1d36:	12 a6       	std	Z+42, r1	; 0x2a
    1d38:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1d3a:	14 a6       	std	Z+44, r1	; 0x2c
    1d3c:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    1d3e:	16 a6       	std	Z+46, r1	; 0x2e
    1d40:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    1d42:	16 a2       	std	Z+38, r1	; 0x26
    1d44:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1d46:	81 81       	ldd	r24, Z+1	; 0x01
    1d48:	88 7f       	andi	r24, 0xF8	; 248
    1d4a:	68 2b       	or	r22, r24
    1d4c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1d4e:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1d50:	17 82       	std	Z+7, r1	; 0x07
    1d52:	08 95       	ret

00001d54 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    1d54:	e0 e0       	ldi	r30, 0x00	; 0
    1d56:	f8 e0       	ldi	r31, 0x08	; 8
    1d58:	66 a3       	std	Z+38, r22	; 0x26
    1d5a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1d5c:	20 81       	ld	r18, Z
    1d5e:	20 7f       	andi	r18, 0xF0	; 240
    1d60:	dc 01       	movw	r26, r24
    1d62:	12 96       	adiw	r26, 0x02	; 2
    1d64:	9c 91       	ld	r25, X
    1d66:	82 2f       	mov	r24, r18
    1d68:	89 2b       	or	r24, r25
    1d6a:	80 83       	st	Z, r24
    1d6c:	08 95       	ret

00001d6e <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1d6e:	e0 e0       	ldi	r30, 0x00	; 0
    1d70:	f8 e0       	ldi	r31, 0x08	; 8
    1d72:	80 81       	ld	r24, Z
    1d74:	80 7f       	andi	r24, 0xF0	; 240
    1d76:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1d78:	10 a2       	std	Z+32, r1	; 0x20
    1d7a:	11 a2       	std	Z+33, r1	; 0x21
    1d7c:	08 95       	ret

00001d7e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    1d7e:	e0 e0       	ldi	r30, 0x00	; 0
    1d80:	f8 e0       	ldi	r31, 0x08	; 8
    1d82:	81 81       	ldd	r24, Z+1	; 0x01
    1d84:	8f 70       	andi	r24, 0x0F	; 15
    1d86:	68 2b       	or	r22, r24
    1d88:	61 83       	std	Z+1, r22	; 0x01
    1d8a:	08 95       	ret

00001d8c <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    1d8c:	e0 e0       	ldi	r30, 0x00	; 0
    1d8e:	f8 e0       	ldi	r31, 0x08	; 8
    1d90:	81 81       	ldd	r24, Z+1	; 0x01
    1d92:	60 95       	com	r22
    1d94:	68 23       	and	r22, r24
    1d96:	61 83       	std	Z+1, r22	; 0x01
    1d98:	08 95       	ret

00001d9a <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    1d9a:	60 93 26 08 	sts	0x0826, r22
    1d9e:	70 93 27 08 	sts	0x0827, r23
    1da2:	08 95       	ret

00001da4 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    1da4:	60 93 28 08 	sts	0x0828, r22
    1da8:	70 93 29 08 	sts	0x0829, r23
    1dac:	08 95       	ret

00001dae <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    1dae:	60 93 2a 08 	sts	0x082A, r22
    1db2:	70 93 2b 08 	sts	0x082B, r23
    1db6:	08 95       	ret

00001db8 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1db8:	60 93 2c 08 	sts	0x082C, r22
    1dbc:	70 93 2d 08 	sts	0x082D, r23
    1dc0:	08 95       	ret

00001dc2 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1dc2:	60 93 2e 08 	sts	0x082E, r22
    1dc6:	70 93 2f 08 	sts	0x082F, r23
    1dca:	08 95       	ret

00001dcc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1dcc:	61 15       	cp	r22, r1
    1dce:	71 05       	cpc	r23, r1
    1dd0:	31 f0       	breq	.+12     	; 0x1dde <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1dd2:	e0 e0       	ldi	r30, 0x00	; 0
    1dd4:	f8 e0       	ldi	r31, 0x08	; 8
    1dd6:	86 81       	ldd	r24, Z+6	; 0x06
    1dd8:	83 70       	andi	r24, 0x03	; 3
    1dda:	28 2b       	or	r18, r24
    1ddc:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    1dde:	60 93 a5 21 	sts	0x21A5, r22
    1de2:	70 93 a6 21 	sts	0x21A6, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    1de6:	40 93 9b 22 	sts	0x229B, r20
    1dea:	50 93 9c 22 	sts	0x229C, r21
    1dee:	08 95       	ret

00001df0 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1df0:	61 15       	cp	r22, r1
    1df2:	71 05       	cpc	r23, r1
    1df4:	31 f0       	breq	.+12     	; 0x1e02 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1df6:	e0 e0       	ldi	r30, 0x00	; 0
    1df8:	f8 e0       	ldi	r31, 0x08	; 8
    1dfa:	86 81       	ldd	r24, Z+6	; 0x06
    1dfc:	8c 70       	andi	r24, 0x0C	; 12
    1dfe:	28 2b       	or	r18, r24
    1e00:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    1e02:	60 93 a7 21 	sts	0x21A7, r22
    1e06:	70 93 a8 21 	sts	0x21A8, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    1e0a:	40 93 9d 22 	sts	0x229D, r20
    1e0e:	50 93 9e 22 	sts	0x229E, r21
    1e12:	08 95       	ret

00001e14 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1e14:	61 15       	cp	r22, r1
    1e16:	71 05       	cpc	r23, r1
    1e18:	31 f0       	breq	.+12     	; 0x1e26 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1e1a:	e0 e0       	ldi	r30, 0x00	; 0
    1e1c:	f8 e0       	ldi	r31, 0x08	; 8
    1e1e:	87 81       	ldd	r24, Z+7	; 0x07
    1e20:	83 70       	andi	r24, 0x03	; 3
    1e22:	28 2b       	or	r18, r24
    1e24:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    1e26:	60 93 a9 21 	sts	0x21A9, r22
    1e2a:	70 93 aa 21 	sts	0x21AA, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    1e2e:	40 93 9f 22 	sts	0x229F, r20
    1e32:	50 93 a0 22 	sts	0x22A0, r21
    1e36:	08 95       	ret

00001e38 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1e38:	61 15       	cp	r22, r1
    1e3a:	71 05       	cpc	r23, r1
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1e3e:	e0 e0       	ldi	r30, 0x00	; 0
    1e40:	f8 e0       	ldi	r31, 0x08	; 8
    1e42:	87 81       	ldd	r24, Z+7	; 0x07
    1e44:	8c 70       	andi	r24, 0x0C	; 12
    1e46:	28 2b       	or	r18, r24
    1e48:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1e4a:	60 93 ab 21 	sts	0x21AB, r22
    1e4e:	70 93 ac 21 	sts	0x21AC, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    1e52:	40 93 a1 22 	sts	0x22A1, r20
    1e56:	50 93 a2 22 	sts	0x22A2, r21
    1e5a:	08 95       	ret

00001e5c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1e5c:	61 15       	cp	r22, r1
    1e5e:	71 05       	cpc	r23, r1
    1e60:	31 f0       	breq	.+12     	; 0x1e6e <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    1e62:	e0 e0       	ldi	r30, 0x00	; 0
    1e64:	f8 e0       	ldi	r31, 0x08	; 8
    1e66:	87 81       	ldd	r24, Z+7	; 0x07
    1e68:	80 73       	andi	r24, 0x30	; 48
    1e6a:	28 2b       	or	r18, r24
    1e6c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    1e6e:	60 93 ad 21 	sts	0x21AD, r22
    1e72:	70 93 ae 21 	sts	0x21AE, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    1e76:	40 93 a3 22 	sts	0x22A3, r20
    1e7a:	50 93 a4 22 	sts	0x22A4, r21
    1e7e:	08 95       	ret

00001e80 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    1e80:	61 15       	cp	r22, r1
    1e82:	71 05       	cpc	r23, r1
    1e84:	31 f0       	breq	.+12     	; 0x1e92 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1e86:	e0 e0       	ldi	r30, 0x00	; 0
    1e88:	f8 e0       	ldi	r31, 0x08	; 8
    1e8a:	87 81       	ldd	r24, Z+7	; 0x07
    1e8c:	80 7c       	andi	r24, 0xC0	; 192
    1e8e:	28 2b       	or	r18, r24
    1e90:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    1e92:	60 93 af 21 	sts	0x21AF, r22
    1e96:	70 93 b0 21 	sts	0x21B0, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    1e9a:	40 93 a5 22 	sts	0x22A5, r20
    1e9e:	50 93 a6 22 	sts	0x22A6, r21
    1ea2:	08 95       	ret

00001ea4 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	ec 01       	movw	r28, r24
    1eaa:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN6CTimerC1Ev>
    1eae:	8a eb       	ldi	r24, 0xBA	; 186
    1eb0:	90 e2       	ldi	r25, 0x20	; 32
    1eb2:	88 83       	st	Y, r24
    1eb4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    1ebc:	2a eb       	ldi	r18, 0xBA	; 186
    1ebe:	30 e2       	ldi	r19, 0x20	; 32
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	20 83       	st	Z, r18
    1ec4:	31 83       	std	Z+1, r19	; 0x01
    1ec6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN6CTimerD1Ev>
    1eca:	08 95       	ret

00001ecc <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    1ecc:	fc 01       	movw	r30, r24
    1ece:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1ed0:	e0 e0       	ldi	r30, 0x00	; 0
    1ed2:	fb e0       	ldi	r31, 0x0B	; 11
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 7f       	andi	r24, 0xF0	; 240
    1ed8:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1eda:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    1edc:	10 a2       	std	Z+32, r1	; 0x20
    1ede:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    1ee0:	10 a6       	std	Z+40, r1	; 0x28
    1ee2:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    1ee4:	12 a6       	std	Z+42, r1	; 0x2a
    1ee6:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    1ee8:	14 a6       	std	Z+44, r1	; 0x2c
    1eea:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    1eec:	16 a6       	std	Z+46, r1	; 0x2e
    1eee:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    1ef0:	16 a2       	std	Z+38, r1	; 0x26
    1ef2:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1ef4:	81 81       	ldd	r24, Z+1	; 0x01
    1ef6:	88 7f       	andi	r24, 0xF8	; 248
    1ef8:	68 2b       	or	r22, r24
    1efa:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1efc:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1efe:	17 82       	std	Z+7, r1	; 0x07
    1f00:	08 95       	ret

00001f02 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    1f02:	e0 e0       	ldi	r30, 0x00	; 0
    1f04:	fb e0       	ldi	r31, 0x0B	; 11
    1f06:	66 a3       	std	Z+38, r22	; 0x26
    1f08:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1f0a:	20 81       	ld	r18, Z
    1f0c:	20 7f       	andi	r18, 0xF0	; 240
    1f0e:	dc 01       	movw	r26, r24
    1f10:	12 96       	adiw	r26, 0x02	; 2
    1f12:	9c 91       	ld	r25, X
    1f14:	82 2f       	mov	r24, r18
    1f16:	89 2b       	or	r24, r25
    1f18:	80 83       	st	Z, r24
    1f1a:	08 95       	ret

00001f1c <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1f1c:	e0 e0       	ldi	r30, 0x00	; 0
    1f1e:	fb e0       	ldi	r31, 0x0B	; 11
    1f20:	80 81       	ld	r24, Z
    1f22:	80 7f       	andi	r24, 0xF0	; 240
    1f24:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    1f26:	10 a2       	std	Z+32, r1	; 0x20
    1f28:	11 a2       	std	Z+33, r1	; 0x21
    1f2a:	08 95       	ret

00001f2c <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    1f2c:	e0 e0       	ldi	r30, 0x00	; 0
    1f2e:	fb e0       	ldi	r31, 0x0B	; 11
    1f30:	81 81       	ldd	r24, Z+1	; 0x01
    1f32:	68 2b       	or	r22, r24
    1f34:	61 83       	std	Z+1, r22	; 0x01
    1f36:	08 95       	ret

00001f38 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    1f38:	e0 e0       	ldi	r30, 0x00	; 0
    1f3a:	fb e0       	ldi	r31, 0x0B	; 11
    1f3c:	81 81       	ldd	r24, Z+1	; 0x01
    1f3e:	60 95       	com	r22
    1f40:	68 23       	and	r22, r24
    1f42:	61 83       	std	Z+1, r22	; 0x01
    1f44:	08 95       	ret

00001f46 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    1f46:	e0 e0       	ldi	r30, 0x00	; 0
    1f48:	fb e0       	ldi	r31, 0x0B	; 11
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	62 95       	swap	r22
    1f4e:	6f 70       	andi	r22, 0x0F	; 15
    1f50:	68 2b       	or	r22, r24
    1f52:	62 83       	std	Z+2, r22	; 0x02
    1f54:	08 95       	ret

00001f56 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    1f56:	e0 e0       	ldi	r30, 0x00	; 0
    1f58:	fb e0       	ldi	r31, 0x0B	; 11
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	62 95       	swap	r22
    1f5e:	6f 70       	andi	r22, 0x0F	; 15
    1f60:	60 95       	com	r22
    1f62:	68 23       	and	r22, r24
    1f64:	62 83       	std	Z+2, r22	; 0x02
    1f66:	08 95       	ret

00001f68 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    1f68:	60 93 26 0b 	sts	0x0B26, r22
    1f6c:	70 93 27 0b 	sts	0x0B27, r23
    1f70:	08 95       	ret

00001f72 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    1f72:	60 93 28 0b 	sts	0x0B28, r22
    1f76:	70 93 29 0b 	sts	0x0B29, r23
    1f7a:	08 95       	ret

00001f7c <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    1f7c:	60 93 2a 0b 	sts	0x0B2A, r22
    1f80:	70 93 2b 0b 	sts	0x0B2B, r23
    1f84:	08 95       	ret

00001f86 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    1f86:	60 93 2c 0b 	sts	0x0B2C, r22
    1f8a:	70 93 2d 0b 	sts	0x0B2D, r23
    1f8e:	08 95       	ret

00001f90 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    1f90:	60 93 2e 0b 	sts	0x0B2E, r22
    1f94:	70 93 2f 0b 	sts	0x0B2F, r23
    1f98:	08 95       	ret

00001f9a <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1f9a:	61 15       	cp	r22, r1
    1f9c:	71 05       	cpc	r23, r1
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1fa0:	e0 e0       	ldi	r30, 0x00	; 0
    1fa2:	fb e0       	ldi	r31, 0x0B	; 11
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
    1fa6:	83 70       	andi	r24, 0x03	; 3
    1fa8:	28 2b       	or	r18, r24
    1faa:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    1fac:	60 93 61 22 	sts	0x2261, r22
    1fb0:	70 93 62 22 	sts	0x2262, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    1fb4:	40 93 57 23 	sts	0x2357, r20
    1fb8:	50 93 58 23 	sts	0x2358, r21
    1fbc:	08 95       	ret

00001fbe <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1fbe:	61 15       	cp	r22, r1
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	31 f0       	breq	.+12     	; 0x1fd0 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1fc4:	e0 e0       	ldi	r30, 0x00	; 0
    1fc6:	fb e0       	ldi	r31, 0x0B	; 11
    1fc8:	86 81       	ldd	r24, Z+6	; 0x06
    1fca:	8c 70       	andi	r24, 0x0C	; 12
    1fcc:	28 2b       	or	r18, r24
    1fce:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    1fd0:	60 93 63 22 	sts	0x2263, r22
    1fd4:	70 93 64 22 	sts	0x2264, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    1fd8:	40 93 59 23 	sts	0x2359, r20
    1fdc:	50 93 5a 23 	sts	0x235A, r21
    1fe0:	08 95       	ret

00001fe2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1fe2:	61 15       	cp	r22, r1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1fe8:	e0 e0       	ldi	r30, 0x00	; 0
    1fea:	fb e0       	ldi	r31, 0x0B	; 11
    1fec:	87 81       	ldd	r24, Z+7	; 0x07
    1fee:	83 70       	andi	r24, 0x03	; 3
    1ff0:	28 2b       	or	r18, r24
    1ff2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    1ff4:	60 93 65 22 	sts	0x2265, r22
    1ff8:	70 93 66 22 	sts	0x2266, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    1ffc:	40 93 5b 23 	sts	0x235B, r20
    2000:	50 93 5c 23 	sts	0x235C, r21
    2004:	08 95       	ret

00002006 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    2006:	61 15       	cp	r22, r1
    2008:	71 05       	cpc	r23, r1
    200a:	31 f0       	breq	.+12     	; 0x2018 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    200c:	e0 e0       	ldi	r30, 0x00	; 0
    200e:	fb e0       	ldi	r31, 0x0B	; 11
    2010:	87 81       	ldd	r24, Z+7	; 0x07
    2012:	8c 70       	andi	r24, 0x0C	; 12
    2014:	28 2b       	or	r18, r24
    2016:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    2018:	60 93 67 22 	sts	0x2267, r22
    201c:	70 93 68 22 	sts	0x2268, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    2020:	40 93 5d 23 	sts	0x235D, r20
    2024:	50 93 5e 23 	sts	0x235E, r21
    2028:	08 95       	ret

0000202a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    202a:	61 15       	cp	r22, r1
    202c:	71 05       	cpc	r23, r1
    202e:	31 f0       	breq	.+12     	; 0x203c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    2030:	e0 e0       	ldi	r30, 0x00	; 0
    2032:	fb e0       	ldi	r31, 0x0B	; 11
    2034:	87 81       	ldd	r24, Z+7	; 0x07
    2036:	80 73       	andi	r24, 0x30	; 48
    2038:	28 2b       	or	r18, r24
    203a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    203c:	60 93 69 22 	sts	0x2269, r22
    2040:	70 93 6a 22 	sts	0x226A, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    2044:	40 93 5f 23 	sts	0x235F, r20
    2048:	50 93 60 23 	sts	0x2360, r21
    204c:	08 95       	ret

0000204e <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    204e:	61 15       	cp	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	31 f0       	breq	.+12     	; 0x2060 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    2054:	e0 e0       	ldi	r30, 0x00	; 0
    2056:	fb e0       	ldi	r31, 0x0B	; 11
    2058:	87 81       	ldd	r24, Z+7	; 0x07
    205a:	80 7c       	andi	r24, 0xC0	; 192
    205c:	28 2b       	or	r18, r24
    205e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    2060:	60 93 6b 22 	sts	0x226B, r22
    2064:	70 93 6c 22 	sts	0x226C, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    2068:	40 93 61 23 	sts	0x2361, r20
    206c:	50 93 62 23 	sts	0x2362, r21
    2070:	08 95       	ret

00002072 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	ec 01       	movw	r28, r24
    2078:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN6CTimerC1Ev>
    207c:	8e ed       	ldi	r24, 0xDE	; 222
    207e:	90 e2       	ldi	r25, 0x20	; 32
    2080:	88 83       	st	Y, r24
    2082:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    208a:	2e ed       	ldi	r18, 0xDE	; 222
    208c:	30 e2       	ldi	r19, 0x20	; 32
    208e:	fc 01       	movw	r30, r24
    2090:	20 83       	st	Z, r18
    2092:	31 83       	std	Z+1, r19	; 0x01
    2094:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN6CTimerD1Ev>
    2098:	08 95       	ret

0000209a <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    209a:	08 95       	ret

0000209c <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    209c:	08 95       	ret

0000209e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    209e:	ef 92       	push	r14
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    20aa:	e0 e8       	ldi	r30, 0x80	; 128
    20ac:	f6 e0       	ldi	r31, 0x06	; 6
    20ae:	80 eb       	ldi	r24, 0xB0	; 176
    20b0:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    20b2:	90 e4       	ldi	r25, 0x40	; 64
    20b4:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20b6:	90 ec       	ldi	r25, 0xC0	; 192
    20b8:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20ba:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20bc:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    20be:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    20c0:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    20c2:	61 11       	cpse	r22, r1
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    20c6:	80 e4       	ldi	r24, 0x40	; 64
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    20ca:	80 e5       	ldi	r24, 0x50	; 80
    20cc:	01 11       	cpse	r16, r1
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    20d4:	30 e8       	ldi	r19, 0x80	; 128
    20d6:	41 11       	cpse	r20, r1
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    20de:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    20e0:	22 0f       	add	r18, r18
    20e2:	22 0f       	add	r18, r18
    20e4:	e2 2a       	or	r14, r18
    20e6:	e8 2a       	or	r14, r24
    20e8:	e3 2a       	or	r14, r19
		prescaler;
    20ea:	e9 2a       	or	r14, r25
    20ec:	00 ec       	ldi	r16, 0xC0	; 192
    20ee:	1a e0       	ldi	r17, 0x0A	; 10
    20f0:	f8 01       	movw	r30, r16
    20f2:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	0e 94 51 29 	call	0x52a2	; 0x52a2 <malloc>
    20fc:	88 83       	st	Y, r24
    20fe:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	f8 01       	movw	r30, r16
    2104:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    2106:	8b ec       	ldi	r24, 0xCB	; 203
    2108:	90 e1       	ldi	r25, 0x10	; 16
    210a:	80 93 fb 21 	sts	0x21FB, r24
    210e:	90 93 fc 21 	sts	0x21FC, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    2112:	c0 93 f1 22 	sts	0x22F1, r28
    2116:	d0 93 f2 22 	sts	0x22F2, r29
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ef 90       	pop	r14
    2124:	08 95       	ret

00002126 <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	ec 01       	movw	r28, r24
	rx_pos = length;
    212c:	4a 83       	std	Y+2, r20	; 0x02
    212e:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
    2130:	4c 83       	std	Y+4, r20	; 0x04
    2132:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
    2134:	88 81       	ld	r24, Y
    2136:	99 81       	ldd	r25, Y+1	; 0x01
    2138:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
    213c:	80 e1       	ldi	r24, 0x10	; 16
    213e:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
    2142:	88 81       	ld	r24, Y
    2144:	99 81       	ldd	r25, Y+1	; 0x01
    2146:	4a 81       	ldd	r20, Y+2	; 0x02
    2148:	5b 81       	ldd	r21, Y+3	; 0x03
    214a:	9a 01       	movw	r18, r20
    214c:	21 50       	subi	r18, 0x01	; 1
    214e:	31 09       	sbc	r19, r1
    2150:	2a 83       	std	Y+2, r18	; 0x02
    2152:	3b 83       	std	Y+3, r19	; 0x03
    2154:	fc 01       	movw	r30, r24
    2156:	e2 0f       	add	r30, r18
    2158:	f3 1f       	adc	r31, r19
    215a:	80 81       	ld	r24, Z
    215c:	80 93 c3 0a 	sts	0x0AC3, r24
}
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    2166:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	89 2b       	or	r24, r25
    216e:	79 f0       	breq	.+30     	; 0x218e <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2170:	40 81       	ld	r20, Z
    2172:	51 81       	ldd	r21, Z+1	; 0x01
    2174:	22 81       	ldd	r18, Z+2	; 0x02
    2176:	33 81       	ldd	r19, Z+3	; 0x03
    2178:	c9 01       	movw	r24, r18
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	82 83       	std	Z+2, r24	; 0x02
    217e:	93 83       	std	Z+3, r25	; 0x03
    2180:	fa 01       	movw	r30, r20
    2182:	e8 0f       	add	r30, r24
    2184:	f9 1f       	adc	r31, r25
    2186:	80 81       	ld	r24, Z
    2188:	80 93 c3 0a 	sts	0x0AC3, r24
    218c:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    218e:	80 e1       	ldi	r24, 0x10	; 16
    2190:	80 93 85 06 	sts	0x0685, r24
    2194:	08 95       	ret

00002196 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    2196:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN4CSPI10OnTransmitEv>
    219a:	08 95       	ret

0000219c <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    219c:	26 e0       	ldi	r18, 0x06	; 6
    219e:	31 e2       	ldi	r19, 0x21	; 33
    21a0:	fc 01       	movw	r30, r24
    21a2:	20 83       	st	Z, r18
    21a4:	31 83       	std	Z+1, r19	; 0x01
    21a6:	08 95       	ret

000021a8 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    21a8:	08 95       	ret

000021aa <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    21aa:	2a e2       	ldi	r18, 0x2A	; 42
    21ac:	31 e2       	ldi	r19, 0x21	; 33
    21ae:	fc 01       	movw	r30, r24
    21b0:	20 83       	st	Z, r18
    21b2:	31 83       	std	Z+1, r19	; 0x01
    21b4:	08 95       	ret

000021b6 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    21b6:	08 95       	ret

000021b8 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	0b b6       	in	r0, 0x3b	; 59
    21c4:	0f 92       	push	r0
    21c6:	2f 93       	push	r18
    21c8:	3f 93       	push	r19
    21ca:	4f 93       	push	r20
    21cc:	5f 93       	push	r21
    21ce:	6f 93       	push	r22
    21d0:	7f 93       	push	r23
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	af 93       	push	r26
    21d8:	bf 93       	push	r27
    21da:	ef 93       	push	r30
    21dc:	ff 93       	push	r31
    21de:	e0 91 8b 21 	lds	r30, 0x218B
    21e2:	f0 91 8c 21 	lds	r31, 0x218C
    21e6:	30 97       	sbiw	r30, 0x00	; 0
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <__vector_1+0x3c>
    21ea:	80 91 81 22 	lds	r24, 0x2281
    21ee:	90 91 82 22 	lds	r25, 0x2282
    21f2:	19 95       	eicall
    21f4:	ff 91       	pop	r31
    21f6:	ef 91       	pop	r30
    21f8:	bf 91       	pop	r27
    21fa:	af 91       	pop	r26
    21fc:	9f 91       	pop	r25
    21fe:	8f 91       	pop	r24
    2200:	7f 91       	pop	r23
    2202:	6f 91       	pop	r22
    2204:	5f 91       	pop	r21
    2206:	4f 91       	pop	r20
    2208:	3f 91       	pop	r19
    220a:	2f 91       	pop	r18
    220c:	0f 90       	pop	r0
    220e:	0b be       	out	0x3b, r0	; 59
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	0f 92       	push	r0
    2222:	11 24       	eor	r1, r1
    2224:	0b b6       	in	r0, 0x3b	; 59
    2226:	0f 92       	push	r0
    2228:	2f 93       	push	r18
    222a:	3f 93       	push	r19
    222c:	4f 93       	push	r20
    222e:	5f 93       	push	r21
    2230:	6f 93       	push	r22
    2232:	7f 93       	push	r23
    2234:	8f 93       	push	r24
    2236:	9f 93       	push	r25
    2238:	af 93       	push	r26
    223a:	bf 93       	push	r27
    223c:	ef 93       	push	r30
    223e:	ff 93       	push	r31
    2240:	e0 91 8d 21 	lds	r30, 0x218D
    2244:	f0 91 8e 21 	lds	r31, 0x218E
    2248:	30 97       	sbiw	r30, 0x00	; 0
    224a:	29 f0       	breq	.+10     	; 0x2256 <__vector_2+0x3c>
    224c:	80 91 83 22 	lds	r24, 0x2283
    2250:	90 91 84 22 	lds	r25, 0x2284
    2254:	19 95       	eicall
    2256:	ff 91       	pop	r31
    2258:	ef 91       	pop	r30
    225a:	bf 91       	pop	r27
    225c:	af 91       	pop	r26
    225e:	9f 91       	pop	r25
    2260:	8f 91       	pop	r24
    2262:	7f 91       	pop	r23
    2264:	6f 91       	pop	r22
    2266:	5f 91       	pop	r21
    2268:	4f 91       	pop	r20
    226a:	3f 91       	pop	r19
    226c:	2f 91       	pop	r18
    226e:	0f 90       	pop	r0
    2270:	0b be       	out	0x3b, r0	; 59
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    227c:	1f 92       	push	r1
    227e:	0f 92       	push	r0
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	0f 92       	push	r0
    2284:	11 24       	eor	r1, r1
    2286:	0b b6       	in	r0, 0x3b	; 59
    2288:	0f 92       	push	r0
    228a:	2f 93       	push	r18
    228c:	3f 93       	push	r19
    228e:	4f 93       	push	r20
    2290:	5f 93       	push	r21
    2292:	6f 93       	push	r22
    2294:	7f 93       	push	r23
    2296:	8f 93       	push	r24
    2298:	9f 93       	push	r25
    229a:	af 93       	push	r26
    229c:	bf 93       	push	r27
    229e:	ef 93       	push	r30
    22a0:	ff 93       	push	r31
    22a2:	e0 91 8f 21 	lds	r30, 0x218F
    22a6:	f0 91 90 21 	lds	r31, 0x2190
    22aa:	30 97       	sbiw	r30, 0x00	; 0
    22ac:	29 f0       	breq	.+10     	; 0x22b8 <__vector_3+0x3c>
    22ae:	80 91 85 22 	lds	r24, 0x2285
    22b2:	90 91 86 22 	lds	r25, 0x2286
    22b6:	19 95       	eicall
    22b8:	ff 91       	pop	r31
    22ba:	ef 91       	pop	r30
    22bc:	bf 91       	pop	r27
    22be:	af 91       	pop	r26
    22c0:	9f 91       	pop	r25
    22c2:	8f 91       	pop	r24
    22c4:	7f 91       	pop	r23
    22c6:	6f 91       	pop	r22
    22c8:	5f 91       	pop	r21
    22ca:	4f 91       	pop	r20
    22cc:	3f 91       	pop	r19
    22ce:	2f 91       	pop	r18
    22d0:	0f 90       	pop	r0
    22d2:	0b be       	out	0x3b, r0	; 59
    22d4:	0f 90       	pop	r0
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	0f 90       	pop	r0
    22da:	1f 90       	pop	r1
    22dc:	18 95       	reti

000022de <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    22de:	1f 92       	push	r1
    22e0:	0f 92       	push	r0
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	0f 92       	push	r0
    22e6:	11 24       	eor	r1, r1
    22e8:	0b b6       	in	r0, 0x3b	; 59
    22ea:	0f 92       	push	r0
    22ec:	2f 93       	push	r18
    22ee:	3f 93       	push	r19
    22f0:	4f 93       	push	r20
    22f2:	5f 93       	push	r21
    22f4:	6f 93       	push	r22
    22f6:	7f 93       	push	r23
    22f8:	8f 93       	push	r24
    22fa:	9f 93       	push	r25
    22fc:	af 93       	push	r26
    22fe:	bf 93       	push	r27
    2300:	ef 93       	push	r30
    2302:	ff 93       	push	r31
    2304:	e0 91 91 21 	lds	r30, 0x2191
    2308:	f0 91 92 21 	lds	r31, 0x2192
    230c:	30 97       	sbiw	r30, 0x00	; 0
    230e:	29 f0       	breq	.+10     	; 0x231a <__vector_4+0x3c>
    2310:	80 91 87 22 	lds	r24, 0x2287
    2314:	90 91 88 22 	lds	r25, 0x2288
    2318:	19 95       	eicall
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	0f 90       	pop	r0
    2334:	0b be       	out	0x3b, r0	; 59
    2336:	0f 90       	pop	r0
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	18 95       	reti

00002340 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2340:	1f 92       	push	r1
    2342:	0f 92       	push	r0
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1
    234a:	0b b6       	in	r0, 0x3b	; 59
    234c:	0f 92       	push	r0
    234e:	2f 93       	push	r18
    2350:	3f 93       	push	r19
    2352:	4f 93       	push	r20
    2354:	5f 93       	push	r21
    2356:	6f 93       	push	r22
    2358:	7f 93       	push	r23
    235a:	8f 93       	push	r24
    235c:	9f 93       	push	r25
    235e:	af 93       	push	r26
    2360:	bf 93       	push	r27
    2362:	ef 93       	push	r30
    2364:	ff 93       	push	r31
    2366:	e0 91 93 21 	lds	r30, 0x2193
    236a:	f0 91 94 21 	lds	r31, 0x2194
    236e:	30 97       	sbiw	r30, 0x00	; 0
    2370:	29 f0       	breq	.+10     	; 0x237c <__vector_5+0x3c>
    2372:	80 91 89 22 	lds	r24, 0x2289
    2376:	90 91 8a 22 	lds	r25, 0x228A
    237a:	19 95       	eicall
    237c:	ff 91       	pop	r31
    237e:	ef 91       	pop	r30
    2380:	bf 91       	pop	r27
    2382:	af 91       	pop	r26
    2384:	9f 91       	pop	r25
    2386:	8f 91       	pop	r24
    2388:	7f 91       	pop	r23
    238a:	6f 91       	pop	r22
    238c:	5f 91       	pop	r21
    238e:	4f 91       	pop	r20
    2390:	3f 91       	pop	r19
    2392:	2f 91       	pop	r18
    2394:	0f 90       	pop	r0
    2396:	0b be       	out	0x3b, r0	; 59
    2398:	0f 90       	pop	r0
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	0f 90       	pop	r0
    239e:	1f 90       	pop	r1
    23a0:	18 95       	reti

000023a2 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    23a2:	1f 92       	push	r1
    23a4:	0f 92       	push	r0
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	0f 92       	push	r0
    23aa:	11 24       	eor	r1, r1
    23ac:	0b b6       	in	r0, 0x3b	; 59
    23ae:	0f 92       	push	r0
    23b0:	2f 93       	push	r18
    23b2:	3f 93       	push	r19
    23b4:	4f 93       	push	r20
    23b6:	5f 93       	push	r21
    23b8:	6f 93       	push	r22
    23ba:	7f 93       	push	r23
    23bc:	8f 93       	push	r24
    23be:	9f 93       	push	r25
    23c0:	af 93       	push	r26
    23c2:	bf 93       	push	r27
    23c4:	ef 93       	push	r30
    23c6:	ff 93       	push	r31
    23c8:	e0 91 95 21 	lds	r30, 0x2195
    23cc:	f0 91 96 21 	lds	r31, 0x2196
    23d0:	30 97       	sbiw	r30, 0x00	; 0
    23d2:	29 f0       	breq	.+10     	; 0x23de <__vector_6+0x3c>
    23d4:	80 91 8b 22 	lds	r24, 0x228B
    23d8:	90 91 8c 22 	lds	r25, 0x228C
    23dc:	19 95       	eicall
    23de:	ff 91       	pop	r31
    23e0:	ef 91       	pop	r30
    23e2:	bf 91       	pop	r27
    23e4:	af 91       	pop	r26
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	7f 91       	pop	r23
    23ec:	6f 91       	pop	r22
    23ee:	5f 91       	pop	r21
    23f0:	4f 91       	pop	r20
    23f2:	3f 91       	pop	r19
    23f4:	2f 91       	pop	r18
    23f6:	0f 90       	pop	r0
    23f8:	0b be       	out	0x3b, r0	; 59
    23fa:	0f 90       	pop	r0
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	0f 90       	pop	r0
    2400:	1f 90       	pop	r1
    2402:	18 95       	reti

00002404 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	0b b6       	in	r0, 0x3b	; 59
    2410:	0f 92       	push	r0
    2412:	2f 93       	push	r18
    2414:	3f 93       	push	r19
    2416:	4f 93       	push	r20
    2418:	5f 93       	push	r21
    241a:	6f 93       	push	r22
    241c:	7f 93       	push	r23
    241e:	8f 93       	push	r24
    2420:	9f 93       	push	r25
    2422:	af 93       	push	r26
    2424:	bf 93       	push	r27
    2426:	ef 93       	push	r30
    2428:	ff 93       	push	r31
    242a:	e0 91 97 21 	lds	r30, 0x2197
    242e:	f0 91 98 21 	lds	r31, 0x2198
    2432:	30 97       	sbiw	r30, 0x00	; 0
    2434:	29 f0       	breq	.+10     	; 0x2440 <__vector_7+0x3c>
    2436:	80 91 8d 22 	lds	r24, 0x228D
    243a:	90 91 8e 22 	lds	r25, 0x228E
    243e:	19 95       	eicall
    2440:	ff 91       	pop	r31
    2442:	ef 91       	pop	r30
    2444:	bf 91       	pop	r27
    2446:	af 91       	pop	r26
    2448:	9f 91       	pop	r25
    244a:	8f 91       	pop	r24
    244c:	7f 91       	pop	r23
    244e:	6f 91       	pop	r22
    2450:	5f 91       	pop	r21
    2452:	4f 91       	pop	r20
    2454:	3f 91       	pop	r19
    2456:	2f 91       	pop	r18
    2458:	0f 90       	pop	r0
    245a:	0b be       	out	0x3b, r0	; 59
    245c:	0f 90       	pop	r0
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	0f 90       	pop	r0
    2462:	1f 90       	pop	r1
    2464:	18 95       	reti

00002466 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    2466:	1f 92       	push	r1
    2468:	0f 92       	push	r0
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	0f 92       	push	r0
    246e:	11 24       	eor	r1, r1
    2470:	0b b6       	in	r0, 0x3b	; 59
    2472:	0f 92       	push	r0
    2474:	2f 93       	push	r18
    2476:	3f 93       	push	r19
    2478:	4f 93       	push	r20
    247a:	5f 93       	push	r21
    247c:	6f 93       	push	r22
    247e:	7f 93       	push	r23
    2480:	8f 93       	push	r24
    2482:	9f 93       	push	r25
    2484:	af 93       	push	r26
    2486:	bf 93       	push	r27
    2488:	ef 93       	push	r30
    248a:	ff 93       	push	r31
    248c:	e0 91 99 21 	lds	r30, 0x2199
    2490:	f0 91 9a 21 	lds	r31, 0x219A
    2494:	30 97       	sbiw	r30, 0x00	; 0
    2496:	29 f0       	breq	.+10     	; 0x24a2 <__vector_8+0x3c>
    2498:	80 91 8f 22 	lds	r24, 0x228F
    249c:	90 91 90 22 	lds	r25, 0x2290
    24a0:	19 95       	eicall
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30
    24a6:	bf 91       	pop	r27
    24a8:	af 91       	pop	r26
    24aa:	9f 91       	pop	r25
    24ac:	8f 91       	pop	r24
    24ae:	7f 91       	pop	r23
    24b0:	6f 91       	pop	r22
    24b2:	5f 91       	pop	r21
    24b4:	4f 91       	pop	r20
    24b6:	3f 91       	pop	r19
    24b8:	2f 91       	pop	r18
    24ba:	0f 90       	pop	r0
    24bc:	0b be       	out	0x3b, r0	; 59
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0
    24c4:	1f 90       	pop	r1
    24c6:	18 95       	reti

000024c8 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    24c8:	1f 92       	push	r1
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	11 24       	eor	r1, r1
    24d2:	0b b6       	in	r0, 0x3b	; 59
    24d4:	0f 92       	push	r0
    24d6:	2f 93       	push	r18
    24d8:	3f 93       	push	r19
    24da:	4f 93       	push	r20
    24dc:	5f 93       	push	r21
    24de:	6f 93       	push	r22
    24e0:	7f 93       	push	r23
    24e2:	8f 93       	push	r24
    24e4:	9f 93       	push	r25
    24e6:	af 93       	push	r26
    24e8:	bf 93       	push	r27
    24ea:	ef 93       	push	r30
    24ec:	ff 93       	push	r31
    24ee:	e0 91 9b 21 	lds	r30, 0x219B
    24f2:	f0 91 9c 21 	lds	r31, 0x219C
    24f6:	30 97       	sbiw	r30, 0x00	; 0
    24f8:	29 f0       	breq	.+10     	; 0x2504 <__vector_9+0x3c>
    24fa:	80 91 91 22 	lds	r24, 0x2291
    24fe:	90 91 92 22 	lds	r25, 0x2292
    2502:	19 95       	eicall
    2504:	ff 91       	pop	r31
    2506:	ef 91       	pop	r30
    2508:	bf 91       	pop	r27
    250a:	af 91       	pop	r26
    250c:	9f 91       	pop	r25
    250e:	8f 91       	pop	r24
    2510:	7f 91       	pop	r23
    2512:	6f 91       	pop	r22
    2514:	5f 91       	pop	r21
    2516:	4f 91       	pop	r20
    2518:	3f 91       	pop	r19
    251a:	2f 91       	pop	r18
    251c:	0f 90       	pop	r0
    251e:	0b be       	out	0x3b, r0	; 59
    2520:	0f 90       	pop	r0
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	0f 90       	pop	r0
    2526:	1f 90       	pop	r1
    2528:	18 95       	reti

0000252a <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    252a:	1f 92       	push	r1
    252c:	0f 92       	push	r0
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	0f 92       	push	r0
    2532:	11 24       	eor	r1, r1
    2534:	0b b6       	in	r0, 0x3b	; 59
    2536:	0f 92       	push	r0
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	4f 93       	push	r20
    253e:	5f 93       	push	r21
    2540:	6f 93       	push	r22
    2542:	7f 93       	push	r23
    2544:	8f 93       	push	r24
    2546:	9f 93       	push	r25
    2548:	af 93       	push	r26
    254a:	bf 93       	push	r27
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
    2550:	e0 91 9d 21 	lds	r30, 0x219D
    2554:	f0 91 9e 21 	lds	r31, 0x219E
    2558:	30 97       	sbiw	r30, 0x00	; 0
    255a:	29 f0       	breq	.+10     	; 0x2566 <__vector_10+0x3c>
    255c:	80 91 93 22 	lds	r24, 0x2293
    2560:	90 91 94 22 	lds	r25, 0x2294
    2564:	19 95       	eicall
    2566:	ff 91       	pop	r31
    2568:	ef 91       	pop	r30
    256a:	bf 91       	pop	r27
    256c:	af 91       	pop	r26
    256e:	9f 91       	pop	r25
    2570:	8f 91       	pop	r24
    2572:	7f 91       	pop	r23
    2574:	6f 91       	pop	r22
    2576:	5f 91       	pop	r21
    2578:	4f 91       	pop	r20
    257a:	3f 91       	pop	r19
    257c:	2f 91       	pop	r18
    257e:	0f 90       	pop	r0
    2580:	0b be       	out	0x3b, r0	; 59
    2582:	0f 90       	pop	r0
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	0f 90       	pop	r0
    2588:	1f 90       	pop	r1
    258a:	18 95       	reti

0000258c <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    258c:	1f 92       	push	r1
    258e:	0f 92       	push	r0
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	0f 92       	push	r0
    2594:	11 24       	eor	r1, r1
    2596:	0b b6       	in	r0, 0x3b	; 59
    2598:	0f 92       	push	r0
    259a:	2f 93       	push	r18
    259c:	3f 93       	push	r19
    259e:	4f 93       	push	r20
    25a0:	5f 93       	push	r21
    25a2:	6f 93       	push	r22
    25a4:	7f 93       	push	r23
    25a6:	8f 93       	push	r24
    25a8:	9f 93       	push	r25
    25aa:	af 93       	push	r26
    25ac:	bf 93       	push	r27
    25ae:	ef 93       	push	r30
    25b0:	ff 93       	push	r31
    25b2:	e0 91 9f 21 	lds	r30, 0x219F
    25b6:	f0 91 a0 21 	lds	r31, 0x21A0
    25ba:	30 97       	sbiw	r30, 0x00	; 0
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <__vector_11+0x3c>
    25be:	80 91 95 22 	lds	r24, 0x2295
    25c2:	90 91 96 22 	lds	r25, 0x2296
    25c6:	19 95       	eicall
    25c8:	ff 91       	pop	r31
    25ca:	ef 91       	pop	r30
    25cc:	bf 91       	pop	r27
    25ce:	af 91       	pop	r26
    25d0:	9f 91       	pop	r25
    25d2:	8f 91       	pop	r24
    25d4:	7f 91       	pop	r23
    25d6:	6f 91       	pop	r22
    25d8:	5f 91       	pop	r21
    25da:	4f 91       	pop	r20
    25dc:	3f 91       	pop	r19
    25de:	2f 91       	pop	r18
    25e0:	0f 90       	pop	r0
    25e2:	0b be       	out	0x3b, r0	; 59
    25e4:	0f 90       	pop	r0
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	0f 90       	pop	r0
    25ea:	1f 90       	pop	r1
    25ec:	18 95       	reti

000025ee <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    25ee:	1f 92       	push	r1
    25f0:	0f 92       	push	r0
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	0f 92       	push	r0
    25f6:	11 24       	eor	r1, r1
    25f8:	0b b6       	in	r0, 0x3b	; 59
    25fa:	0f 92       	push	r0
    25fc:	2f 93       	push	r18
    25fe:	3f 93       	push	r19
    2600:	4f 93       	push	r20
    2602:	5f 93       	push	r21
    2604:	6f 93       	push	r22
    2606:	7f 93       	push	r23
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	ef 93       	push	r30
    2612:	ff 93       	push	r31
    2614:	e0 91 a1 21 	lds	r30, 0x21A1
    2618:	f0 91 a2 21 	lds	r31, 0x21A2
    261c:	30 97       	sbiw	r30, 0x00	; 0
    261e:	29 f0       	breq	.+10     	; 0x262a <__vector_12+0x3c>
    2620:	80 91 97 22 	lds	r24, 0x2297
    2624:	90 91 98 22 	lds	r25, 0x2298
    2628:	19 95       	eicall
    262a:	ff 91       	pop	r31
    262c:	ef 91       	pop	r30
    262e:	bf 91       	pop	r27
    2630:	af 91       	pop	r26
    2632:	9f 91       	pop	r25
    2634:	8f 91       	pop	r24
    2636:	7f 91       	pop	r23
    2638:	6f 91       	pop	r22
    263a:	5f 91       	pop	r21
    263c:	4f 91       	pop	r20
    263e:	3f 91       	pop	r19
    2640:	2f 91       	pop	r18
    2642:	0f 90       	pop	r0
    2644:	0b be       	out	0x3b, r0	; 59
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	11 24       	eor	r1, r1
    265a:	0b b6       	in	r0, 0x3b	; 59
    265c:	0f 92       	push	r0
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
    2676:	e0 91 a3 21 	lds	r30, 0x21A3
    267a:	f0 91 a4 21 	lds	r31, 0x21A4
    267e:	30 97       	sbiw	r30, 0x00	; 0
    2680:	29 f0       	breq	.+10     	; 0x268c <__vector_13+0x3c>
    2682:	80 91 99 22 	lds	r24, 0x2299
    2686:	90 91 9a 22 	lds	r25, 0x229A
    268a:	19 95       	eicall
    268c:	ff 91       	pop	r31
    268e:	ef 91       	pop	r30
    2690:	bf 91       	pop	r27
    2692:	af 91       	pop	r26
    2694:	9f 91       	pop	r25
    2696:	8f 91       	pop	r24
    2698:	7f 91       	pop	r23
    269a:	6f 91       	pop	r22
    269c:	5f 91       	pop	r21
    269e:	4f 91       	pop	r20
    26a0:	3f 91       	pop	r19
    26a2:	2f 91       	pop	r18
    26a4:	0f 90       	pop	r0
    26a6:	0b be       	out	0x3b, r0	; 59
    26a8:	0f 90       	pop	r0
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	0f 90       	pop	r0
    26ae:	1f 90       	pop	r1
    26b0:	18 95       	reti

000026b2 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    26b2:	1f 92       	push	r1
    26b4:	0f 92       	push	r0
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	0f 92       	push	r0
    26ba:	11 24       	eor	r1, r1
    26bc:	0b b6       	in	r0, 0x3b	; 59
    26be:	0f 92       	push	r0
    26c0:	2f 93       	push	r18
    26c2:	3f 93       	push	r19
    26c4:	4f 93       	push	r20
    26c6:	5f 93       	push	r21
    26c8:	6f 93       	push	r22
    26ca:	7f 93       	push	r23
    26cc:	8f 93       	push	r24
    26ce:	9f 93       	push	r25
    26d0:	af 93       	push	r26
    26d2:	bf 93       	push	r27
    26d4:	ef 93       	push	r30
    26d6:	ff 93       	push	r31
    26d8:	e0 91 a5 21 	lds	r30, 0x21A5
    26dc:	f0 91 a6 21 	lds	r31, 0x21A6
    26e0:	30 97       	sbiw	r30, 0x00	; 0
    26e2:	29 f0       	breq	.+10     	; 0x26ee <__vector_14+0x3c>
    26e4:	80 91 9b 22 	lds	r24, 0x229B
    26e8:	90 91 9c 22 	lds	r25, 0x229C
    26ec:	19 95       	eicall
    26ee:	ff 91       	pop	r31
    26f0:	ef 91       	pop	r30
    26f2:	bf 91       	pop	r27
    26f4:	af 91       	pop	r26
    26f6:	9f 91       	pop	r25
    26f8:	8f 91       	pop	r24
    26fa:	7f 91       	pop	r23
    26fc:	6f 91       	pop	r22
    26fe:	5f 91       	pop	r21
    2700:	4f 91       	pop	r20
    2702:	3f 91       	pop	r19
    2704:	2f 91       	pop	r18
    2706:	0f 90       	pop	r0
    2708:	0b be       	out	0x3b, r0	; 59
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	0f 90       	pop	r0
    2710:	1f 90       	pop	r1
    2712:	18 95       	reti

00002714 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    2714:	1f 92       	push	r1
    2716:	0f 92       	push	r0
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	0f 92       	push	r0
    271c:	11 24       	eor	r1, r1
    271e:	0b b6       	in	r0, 0x3b	; 59
    2720:	0f 92       	push	r0
    2722:	2f 93       	push	r18
    2724:	3f 93       	push	r19
    2726:	4f 93       	push	r20
    2728:	5f 93       	push	r21
    272a:	6f 93       	push	r22
    272c:	7f 93       	push	r23
    272e:	8f 93       	push	r24
    2730:	9f 93       	push	r25
    2732:	af 93       	push	r26
    2734:	bf 93       	push	r27
    2736:	ef 93       	push	r30
    2738:	ff 93       	push	r31
    273a:	e0 91 a7 21 	lds	r30, 0x21A7
    273e:	f0 91 a8 21 	lds	r31, 0x21A8
    2742:	30 97       	sbiw	r30, 0x00	; 0
    2744:	29 f0       	breq	.+10     	; 0x2750 <__vector_15+0x3c>
    2746:	80 91 9d 22 	lds	r24, 0x229D
    274a:	90 91 9e 22 	lds	r25, 0x229E
    274e:	19 95       	eicall
    2750:	ff 91       	pop	r31
    2752:	ef 91       	pop	r30
    2754:	bf 91       	pop	r27
    2756:	af 91       	pop	r26
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	7f 91       	pop	r23
    275e:	6f 91       	pop	r22
    2760:	5f 91       	pop	r21
    2762:	4f 91       	pop	r20
    2764:	3f 91       	pop	r19
    2766:	2f 91       	pop	r18
    2768:	0f 90       	pop	r0
    276a:	0b be       	out	0x3b, r0	; 59
    276c:	0f 90       	pop	r0
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	0f 90       	pop	r0
    2772:	1f 90       	pop	r1
    2774:	18 95       	reti

00002776 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2776:	1f 92       	push	r1
    2778:	0f 92       	push	r0
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	0f 92       	push	r0
    277e:	11 24       	eor	r1, r1
    2780:	0b b6       	in	r0, 0x3b	; 59
    2782:	0f 92       	push	r0
    2784:	2f 93       	push	r18
    2786:	3f 93       	push	r19
    2788:	4f 93       	push	r20
    278a:	5f 93       	push	r21
    278c:	6f 93       	push	r22
    278e:	7f 93       	push	r23
    2790:	8f 93       	push	r24
    2792:	9f 93       	push	r25
    2794:	af 93       	push	r26
    2796:	bf 93       	push	r27
    2798:	ef 93       	push	r30
    279a:	ff 93       	push	r31
    279c:	e0 91 a9 21 	lds	r30, 0x21A9
    27a0:	f0 91 aa 21 	lds	r31, 0x21AA
    27a4:	30 97       	sbiw	r30, 0x00	; 0
    27a6:	29 f0       	breq	.+10     	; 0x27b2 <__vector_16+0x3c>
    27a8:	80 91 9f 22 	lds	r24, 0x229F
    27ac:	90 91 a0 22 	lds	r25, 0x22A0
    27b0:	19 95       	eicall
    27b2:	ff 91       	pop	r31
    27b4:	ef 91       	pop	r30
    27b6:	bf 91       	pop	r27
    27b8:	af 91       	pop	r26
    27ba:	9f 91       	pop	r25
    27bc:	8f 91       	pop	r24
    27be:	7f 91       	pop	r23
    27c0:	6f 91       	pop	r22
    27c2:	5f 91       	pop	r21
    27c4:	4f 91       	pop	r20
    27c6:	3f 91       	pop	r19
    27c8:	2f 91       	pop	r18
    27ca:	0f 90       	pop	r0
    27cc:	0b be       	out	0x3b, r0	; 59
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	0f 90       	pop	r0
    27d4:	1f 90       	pop	r1
    27d6:	18 95       	reti

000027d8 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    27d8:	1f 92       	push	r1
    27da:	0f 92       	push	r0
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	0f 92       	push	r0
    27e0:	11 24       	eor	r1, r1
    27e2:	0b b6       	in	r0, 0x3b	; 59
    27e4:	0f 92       	push	r0
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	ef 93       	push	r30
    27fc:	ff 93       	push	r31
    27fe:	e0 91 ab 21 	lds	r30, 0x21AB
    2802:	f0 91 ac 21 	lds	r31, 0x21AC
    2806:	30 97       	sbiw	r30, 0x00	; 0
    2808:	29 f0       	breq	.+10     	; 0x2814 <__vector_17+0x3c>
    280a:	80 91 a1 22 	lds	r24, 0x22A1
    280e:	90 91 a2 22 	lds	r25, 0x22A2
    2812:	19 95       	eicall
    2814:	ff 91       	pop	r31
    2816:	ef 91       	pop	r30
    2818:	bf 91       	pop	r27
    281a:	af 91       	pop	r26
    281c:	9f 91       	pop	r25
    281e:	8f 91       	pop	r24
    2820:	7f 91       	pop	r23
    2822:	6f 91       	pop	r22
    2824:	5f 91       	pop	r21
    2826:	4f 91       	pop	r20
    2828:	3f 91       	pop	r19
    282a:	2f 91       	pop	r18
    282c:	0f 90       	pop	r0
    282e:	0b be       	out	0x3b, r0	; 59
    2830:	0f 90       	pop	r0
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	0f 90       	pop	r0
    2836:	1f 90       	pop	r1
    2838:	18 95       	reti

0000283a <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    283a:	1f 92       	push	r1
    283c:	0f 92       	push	r0
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	0f 92       	push	r0
    2842:	11 24       	eor	r1, r1
    2844:	0b b6       	in	r0, 0x3b	; 59
    2846:	0f 92       	push	r0
    2848:	2f 93       	push	r18
    284a:	3f 93       	push	r19
    284c:	4f 93       	push	r20
    284e:	5f 93       	push	r21
    2850:	6f 93       	push	r22
    2852:	7f 93       	push	r23
    2854:	8f 93       	push	r24
    2856:	9f 93       	push	r25
    2858:	af 93       	push	r26
    285a:	bf 93       	push	r27
    285c:	ef 93       	push	r30
    285e:	ff 93       	push	r31
    2860:	e0 91 ad 21 	lds	r30, 0x21AD
    2864:	f0 91 ae 21 	lds	r31, 0x21AE
    2868:	30 97       	sbiw	r30, 0x00	; 0
    286a:	29 f0       	breq	.+10     	; 0x2876 <__vector_18+0x3c>
    286c:	80 91 a3 22 	lds	r24, 0x22A3
    2870:	90 91 a4 22 	lds	r25, 0x22A4
    2874:	19 95       	eicall
    2876:	ff 91       	pop	r31
    2878:	ef 91       	pop	r30
    287a:	bf 91       	pop	r27
    287c:	af 91       	pop	r26
    287e:	9f 91       	pop	r25
    2880:	8f 91       	pop	r24
    2882:	7f 91       	pop	r23
    2884:	6f 91       	pop	r22
    2886:	5f 91       	pop	r21
    2888:	4f 91       	pop	r20
    288a:	3f 91       	pop	r19
    288c:	2f 91       	pop	r18
    288e:	0f 90       	pop	r0
    2890:	0b be       	out	0x3b, r0	; 59
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f 90       	pop	r0
    2898:	1f 90       	pop	r1
    289a:	18 95       	reti

0000289c <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    289c:	1f 92       	push	r1
    289e:	0f 92       	push	r0
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	0f 92       	push	r0
    28a4:	11 24       	eor	r1, r1
    28a6:	0b b6       	in	r0, 0x3b	; 59
    28a8:	0f 92       	push	r0
    28aa:	2f 93       	push	r18
    28ac:	3f 93       	push	r19
    28ae:	4f 93       	push	r20
    28b0:	5f 93       	push	r21
    28b2:	6f 93       	push	r22
    28b4:	7f 93       	push	r23
    28b6:	8f 93       	push	r24
    28b8:	9f 93       	push	r25
    28ba:	af 93       	push	r26
    28bc:	bf 93       	push	r27
    28be:	ef 93       	push	r30
    28c0:	ff 93       	push	r31
    28c2:	e0 91 af 21 	lds	r30, 0x21AF
    28c6:	f0 91 b0 21 	lds	r31, 0x21B0
    28ca:	30 97       	sbiw	r30, 0x00	; 0
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <__vector_19+0x3c>
    28ce:	80 91 a5 22 	lds	r24, 0x22A5
    28d2:	90 91 a6 22 	lds	r25, 0x22A6
    28d6:	19 95       	eicall
    28d8:	ff 91       	pop	r31
    28da:	ef 91       	pop	r30
    28dc:	bf 91       	pop	r27
    28de:	af 91       	pop	r26
    28e0:	9f 91       	pop	r25
    28e2:	8f 91       	pop	r24
    28e4:	7f 91       	pop	r23
    28e6:	6f 91       	pop	r22
    28e8:	5f 91       	pop	r21
    28ea:	4f 91       	pop	r20
    28ec:	3f 91       	pop	r19
    28ee:	2f 91       	pop	r18
    28f0:	0f 90       	pop	r0
    28f2:	0b be       	out	0x3b, r0	; 59
    28f4:	0f 90       	pop	r0
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	0f 90       	pop	r0
    28fa:	1f 90       	pop	r1
    28fc:	18 95       	reti

000028fe <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    28fe:	1f 92       	push	r1
    2900:	0f 92       	push	r0
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	0f 92       	push	r0
    2906:	11 24       	eor	r1, r1
    2908:	0b b6       	in	r0, 0x3b	; 59
    290a:	0f 92       	push	r0
    290c:	2f 93       	push	r18
    290e:	3f 93       	push	r19
    2910:	4f 93       	push	r20
    2912:	5f 93       	push	r21
    2914:	6f 93       	push	r22
    2916:	7f 93       	push	r23
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
    291c:	af 93       	push	r26
    291e:	bf 93       	push	r27
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	e0 91 b1 21 	lds	r30, 0x21B1
    2928:	f0 91 b2 21 	lds	r31, 0x21B2
    292c:	30 97       	sbiw	r30, 0x00	; 0
    292e:	29 f0       	breq	.+10     	; 0x293a <__vector_20+0x3c>
    2930:	80 91 a7 22 	lds	r24, 0x22A7
    2934:	90 91 a8 22 	lds	r25, 0x22A8
    2938:	19 95       	eicall
    293a:	ff 91       	pop	r31
    293c:	ef 91       	pop	r30
    293e:	bf 91       	pop	r27
    2940:	af 91       	pop	r26
    2942:	9f 91       	pop	r25
    2944:	8f 91       	pop	r24
    2946:	7f 91       	pop	r23
    2948:	6f 91       	pop	r22
    294a:	5f 91       	pop	r21
    294c:	4f 91       	pop	r20
    294e:	3f 91       	pop	r19
    2950:	2f 91       	pop	r18
    2952:	0f 90       	pop	r0
    2954:	0b be       	out	0x3b, r0	; 59
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	0f 92       	push	r0
    2968:	11 24       	eor	r1, r1
    296a:	0b b6       	in	r0, 0x3b	; 59
    296c:	0f 92       	push	r0
    296e:	2f 93       	push	r18
    2970:	3f 93       	push	r19
    2972:	4f 93       	push	r20
    2974:	5f 93       	push	r21
    2976:	6f 93       	push	r22
    2978:	7f 93       	push	r23
    297a:	8f 93       	push	r24
    297c:	9f 93       	push	r25
    297e:	af 93       	push	r26
    2980:	bf 93       	push	r27
    2982:	ef 93       	push	r30
    2984:	ff 93       	push	r31
    2986:	e0 91 b3 21 	lds	r30, 0x21B3
    298a:	f0 91 b4 21 	lds	r31, 0x21B4
    298e:	30 97       	sbiw	r30, 0x00	; 0
    2990:	29 f0       	breq	.+10     	; 0x299c <__vector_21+0x3c>
    2992:	80 91 a9 22 	lds	r24, 0x22A9
    2996:	90 91 aa 22 	lds	r25, 0x22AA
    299a:	19 95       	eicall
    299c:	ff 91       	pop	r31
    299e:	ef 91       	pop	r30
    29a0:	bf 91       	pop	r27
    29a2:	af 91       	pop	r26
    29a4:	9f 91       	pop	r25
    29a6:	8f 91       	pop	r24
    29a8:	7f 91       	pop	r23
    29aa:	6f 91       	pop	r22
    29ac:	5f 91       	pop	r21
    29ae:	4f 91       	pop	r20
    29b0:	3f 91       	pop	r19
    29b2:	2f 91       	pop	r18
    29b4:	0f 90       	pop	r0
    29b6:	0b be       	out	0x3b, r0	; 59
    29b8:	0f 90       	pop	r0
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	0f 90       	pop	r0
    29be:	1f 90       	pop	r1
    29c0:	18 95       	reti

000029c2 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    29c2:	1f 92       	push	r1
    29c4:	0f 92       	push	r0
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	0f 92       	push	r0
    29ca:	11 24       	eor	r1, r1
    29cc:	0b b6       	in	r0, 0x3b	; 59
    29ce:	0f 92       	push	r0
    29d0:	2f 93       	push	r18
    29d2:	3f 93       	push	r19
    29d4:	4f 93       	push	r20
    29d6:	5f 93       	push	r21
    29d8:	6f 93       	push	r22
    29da:	7f 93       	push	r23
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
    29e8:	e0 91 b5 21 	lds	r30, 0x21B5
    29ec:	f0 91 b6 21 	lds	r31, 0x21B6
    29f0:	30 97       	sbiw	r30, 0x00	; 0
    29f2:	29 f0       	breq	.+10     	; 0x29fe <__vector_22+0x3c>
    29f4:	80 91 ab 22 	lds	r24, 0x22AB
    29f8:	90 91 ac 22 	lds	r25, 0x22AC
    29fc:	19 95       	eicall
    29fe:	ff 91       	pop	r31
    2a00:	ef 91       	pop	r30
    2a02:	bf 91       	pop	r27
    2a04:	af 91       	pop	r26
    2a06:	9f 91       	pop	r25
    2a08:	8f 91       	pop	r24
    2a0a:	7f 91       	pop	r23
    2a0c:	6f 91       	pop	r22
    2a0e:	5f 91       	pop	r21
    2a10:	4f 91       	pop	r20
    2a12:	3f 91       	pop	r19
    2a14:	2f 91       	pop	r18
    2a16:	0f 90       	pop	r0
    2a18:	0b be       	out	0x3b, r0	; 59
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2a24:	1f 92       	push	r1
    2a26:	0f 92       	push	r0
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	0f 92       	push	r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	0b b6       	in	r0, 0x3b	; 59
    2a30:	0f 92       	push	r0
    2a32:	2f 93       	push	r18
    2a34:	3f 93       	push	r19
    2a36:	4f 93       	push	r20
    2a38:	5f 93       	push	r21
    2a3a:	6f 93       	push	r22
    2a3c:	7f 93       	push	r23
    2a3e:	8f 93       	push	r24
    2a40:	9f 93       	push	r25
    2a42:	af 93       	push	r26
    2a44:	bf 93       	push	r27
    2a46:	ef 93       	push	r30
    2a48:	ff 93       	push	r31
    2a4a:	e0 91 b7 21 	lds	r30, 0x21B7
    2a4e:	f0 91 b8 21 	lds	r31, 0x21B8
    2a52:	30 97       	sbiw	r30, 0x00	; 0
    2a54:	29 f0       	breq	.+10     	; 0x2a60 <__vector_23+0x3c>
    2a56:	80 91 ad 22 	lds	r24, 0x22AD
    2a5a:	90 91 ae 22 	lds	r25, 0x22AE
    2a5e:	19 95       	eicall
    2a60:	ff 91       	pop	r31
    2a62:	ef 91       	pop	r30
    2a64:	bf 91       	pop	r27
    2a66:	af 91       	pop	r26
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	7f 91       	pop	r23
    2a6e:	6f 91       	pop	r22
    2a70:	5f 91       	pop	r21
    2a72:	4f 91       	pop	r20
    2a74:	3f 91       	pop	r19
    2a76:	2f 91       	pop	r18
    2a78:	0f 90       	pop	r0
    2a7a:	0b be       	out	0x3b, r0	; 59
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	0f 90       	pop	r0
    2a82:	1f 90       	pop	r1
    2a84:	18 95       	reti

00002a86 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2a86:	1f 92       	push	r1
    2a88:	0f 92       	push	r0
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	0f 92       	push	r0
    2a8e:	11 24       	eor	r1, r1
    2a90:	0b b6       	in	r0, 0x3b	; 59
    2a92:	0f 92       	push	r0
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
    2aac:	e0 91 b9 21 	lds	r30, 0x21B9
    2ab0:	f0 91 ba 21 	lds	r31, 0x21BA
    2ab4:	30 97       	sbiw	r30, 0x00	; 0
    2ab6:	29 f0       	breq	.+10     	; 0x2ac2 <__vector_24+0x3c>
    2ab8:	80 91 af 22 	lds	r24, 0x22AF
    2abc:	90 91 b0 22 	lds	r25, 0x22B0
    2ac0:	19 95       	eicall
    2ac2:	ff 91       	pop	r31
    2ac4:	ef 91       	pop	r30
    2ac6:	bf 91       	pop	r27
    2ac8:	af 91       	pop	r26
    2aca:	9f 91       	pop	r25
    2acc:	8f 91       	pop	r24
    2ace:	7f 91       	pop	r23
    2ad0:	6f 91       	pop	r22
    2ad2:	5f 91       	pop	r21
    2ad4:	4f 91       	pop	r20
    2ad6:	3f 91       	pop	r19
    2ad8:	2f 91       	pop	r18
    2ada:	0f 90       	pop	r0
    2adc:	0b be       	out	0x3b, r0	; 59
    2ade:	0f 90       	pop	r0
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	0f 90       	pop	r0
    2ae4:	1f 90       	pop	r1
    2ae6:	18 95       	reti

00002ae8 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2ae8:	1f 92       	push	r1
    2aea:	0f 92       	push	r0
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	0f 92       	push	r0
    2af0:	11 24       	eor	r1, r1
    2af2:	0b b6       	in	r0, 0x3b	; 59
    2af4:	0f 92       	push	r0
    2af6:	2f 93       	push	r18
    2af8:	3f 93       	push	r19
    2afa:	4f 93       	push	r20
    2afc:	5f 93       	push	r21
    2afe:	6f 93       	push	r22
    2b00:	7f 93       	push	r23
    2b02:	8f 93       	push	r24
    2b04:	9f 93       	push	r25
    2b06:	af 93       	push	r26
    2b08:	bf 93       	push	r27
    2b0a:	ef 93       	push	r30
    2b0c:	ff 93       	push	r31
    2b0e:	e0 91 bb 21 	lds	r30, 0x21BB
    2b12:	f0 91 bc 21 	lds	r31, 0x21BC
    2b16:	30 97       	sbiw	r30, 0x00	; 0
    2b18:	29 f0       	breq	.+10     	; 0x2b24 <__vector_25+0x3c>
    2b1a:	80 91 b1 22 	lds	r24, 0x22B1
    2b1e:	90 91 b2 22 	lds	r25, 0x22B2
    2b22:	19 95       	eicall
    2b24:	ff 91       	pop	r31
    2b26:	ef 91       	pop	r30
    2b28:	bf 91       	pop	r27
    2b2a:	af 91       	pop	r26
    2b2c:	9f 91       	pop	r25
    2b2e:	8f 91       	pop	r24
    2b30:	7f 91       	pop	r23
    2b32:	6f 91       	pop	r22
    2b34:	5f 91       	pop	r21
    2b36:	4f 91       	pop	r20
    2b38:	3f 91       	pop	r19
    2b3a:	2f 91       	pop	r18
    2b3c:	0f 90       	pop	r0
    2b3e:	0b be       	out	0x3b, r0	; 59
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0f 90       	pop	r0
    2b46:	1f 90       	pop	r1
    2b48:	18 95       	reti

00002b4a <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2b4a:	1f 92       	push	r1
    2b4c:	0f 92       	push	r0
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	0f 92       	push	r0
    2b52:	11 24       	eor	r1, r1
    2b54:	0b b6       	in	r0, 0x3b	; 59
    2b56:	0f 92       	push	r0
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
    2b70:	e0 91 bd 21 	lds	r30, 0x21BD
    2b74:	f0 91 be 21 	lds	r31, 0x21BE
    2b78:	30 97       	sbiw	r30, 0x00	; 0
    2b7a:	29 f0       	breq	.+10     	; 0x2b86 <__vector_26+0x3c>
    2b7c:	80 91 b3 22 	lds	r24, 0x22B3
    2b80:	90 91 b4 22 	lds	r25, 0x22B4
    2b84:	19 95       	eicall
    2b86:	ff 91       	pop	r31
    2b88:	ef 91       	pop	r30
    2b8a:	bf 91       	pop	r27
    2b8c:	af 91       	pop	r26
    2b8e:	9f 91       	pop	r25
    2b90:	8f 91       	pop	r24
    2b92:	7f 91       	pop	r23
    2b94:	6f 91       	pop	r22
    2b96:	5f 91       	pop	r21
    2b98:	4f 91       	pop	r20
    2b9a:	3f 91       	pop	r19
    2b9c:	2f 91       	pop	r18
    2b9e:	0f 90       	pop	r0
    2ba0:	0b be       	out	0x3b, r0	; 59
    2ba2:	0f 90       	pop	r0
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	0f 90       	pop	r0
    2ba8:	1f 90       	pop	r1
    2baa:	18 95       	reti

00002bac <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2bac:	1f 92       	push	r1
    2bae:	0f 92       	push	r0
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	0f 92       	push	r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	0b b6       	in	r0, 0x3b	; 59
    2bb8:	0f 92       	push	r0
    2bba:	2f 93       	push	r18
    2bbc:	3f 93       	push	r19
    2bbe:	4f 93       	push	r20
    2bc0:	5f 93       	push	r21
    2bc2:	6f 93       	push	r22
    2bc4:	7f 93       	push	r23
    2bc6:	8f 93       	push	r24
    2bc8:	9f 93       	push	r25
    2bca:	af 93       	push	r26
    2bcc:	bf 93       	push	r27
    2bce:	ef 93       	push	r30
    2bd0:	ff 93       	push	r31
    2bd2:	e0 91 bf 21 	lds	r30, 0x21BF
    2bd6:	f0 91 c0 21 	lds	r31, 0x21C0
    2bda:	30 97       	sbiw	r30, 0x00	; 0
    2bdc:	29 f0       	breq	.+10     	; 0x2be8 <__vector_27+0x3c>
    2bde:	80 91 b5 22 	lds	r24, 0x22B5
    2be2:	90 91 b6 22 	lds	r25, 0x22B6
    2be6:	19 95       	eicall
    2be8:	ff 91       	pop	r31
    2bea:	ef 91       	pop	r30
    2bec:	bf 91       	pop	r27
    2bee:	af 91       	pop	r26
    2bf0:	9f 91       	pop	r25
    2bf2:	8f 91       	pop	r24
    2bf4:	7f 91       	pop	r23
    2bf6:	6f 91       	pop	r22
    2bf8:	5f 91       	pop	r21
    2bfa:	4f 91       	pop	r20
    2bfc:	3f 91       	pop	r19
    2bfe:	2f 91       	pop	r18
    2c00:	0f 90       	pop	r0
    2c02:	0b be       	out	0x3b, r0	; 59
    2c04:	0f 90       	pop	r0
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	0f 90       	pop	r0
    2c0a:	1f 90       	pop	r1
    2c0c:	18 95       	reti

00002c0e <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2c0e:	1f 92       	push	r1
    2c10:	0f 92       	push	r0
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	0f 92       	push	r0
    2c16:	11 24       	eor	r1, r1
    2c18:	0b b6       	in	r0, 0x3b	; 59
    2c1a:	0f 92       	push	r0
    2c1c:	2f 93       	push	r18
    2c1e:	3f 93       	push	r19
    2c20:	4f 93       	push	r20
    2c22:	5f 93       	push	r21
    2c24:	6f 93       	push	r22
    2c26:	7f 93       	push	r23
    2c28:	8f 93       	push	r24
    2c2a:	9f 93       	push	r25
    2c2c:	af 93       	push	r26
    2c2e:	bf 93       	push	r27
    2c30:	ef 93       	push	r30
    2c32:	ff 93       	push	r31
    2c34:	e0 91 c1 21 	lds	r30, 0x21C1
    2c38:	f0 91 c2 21 	lds	r31, 0x21C2
    2c3c:	30 97       	sbiw	r30, 0x00	; 0
    2c3e:	29 f0       	breq	.+10     	; 0x2c4a <__vector_28+0x3c>
    2c40:	80 91 b7 22 	lds	r24, 0x22B7
    2c44:	90 91 b8 22 	lds	r25, 0x22B8
    2c48:	19 95       	eicall
    2c4a:	ff 91       	pop	r31
    2c4c:	ef 91       	pop	r30
    2c4e:	bf 91       	pop	r27
    2c50:	af 91       	pop	r26
    2c52:	9f 91       	pop	r25
    2c54:	8f 91       	pop	r24
    2c56:	7f 91       	pop	r23
    2c58:	6f 91       	pop	r22
    2c5a:	5f 91       	pop	r21
    2c5c:	4f 91       	pop	r20
    2c5e:	3f 91       	pop	r19
    2c60:	2f 91       	pop	r18
    2c62:	0f 90       	pop	r0
    2c64:	0b be       	out	0x3b, r0	; 59
    2c66:	0f 90       	pop	r0
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	0f 90       	pop	r0
    2c6c:	1f 90       	pop	r1
    2c6e:	18 95       	reti

00002c70 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2c70:	1f 92       	push	r1
    2c72:	0f 92       	push	r0
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	0f 92       	push	r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	0b b6       	in	r0, 0x3b	; 59
    2c7c:	0f 92       	push	r0
    2c7e:	2f 93       	push	r18
    2c80:	3f 93       	push	r19
    2c82:	4f 93       	push	r20
    2c84:	5f 93       	push	r21
    2c86:	6f 93       	push	r22
    2c88:	7f 93       	push	r23
    2c8a:	8f 93       	push	r24
    2c8c:	9f 93       	push	r25
    2c8e:	af 93       	push	r26
    2c90:	bf 93       	push	r27
    2c92:	ef 93       	push	r30
    2c94:	ff 93       	push	r31
    2c96:	e0 91 c3 21 	lds	r30, 0x21C3
    2c9a:	f0 91 c4 21 	lds	r31, 0x21C4
    2c9e:	30 97       	sbiw	r30, 0x00	; 0
    2ca0:	29 f0       	breq	.+10     	; 0x2cac <__vector_29+0x3c>
    2ca2:	80 91 b9 22 	lds	r24, 0x22B9
    2ca6:	90 91 ba 22 	lds	r25, 0x22BA
    2caa:	19 95       	eicall
    2cac:	ff 91       	pop	r31
    2cae:	ef 91       	pop	r30
    2cb0:	bf 91       	pop	r27
    2cb2:	af 91       	pop	r26
    2cb4:	9f 91       	pop	r25
    2cb6:	8f 91       	pop	r24
    2cb8:	7f 91       	pop	r23
    2cba:	6f 91       	pop	r22
    2cbc:	5f 91       	pop	r21
    2cbe:	4f 91       	pop	r20
    2cc0:	3f 91       	pop	r19
    2cc2:	2f 91       	pop	r18
    2cc4:	0f 90       	pop	r0
    2cc6:	0b be       	out	0x3b, r0	; 59
    2cc8:	0f 90       	pop	r0
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	0f 90       	pop	r0
    2cce:	1f 90       	pop	r1
    2cd0:	18 95       	reti

00002cd2 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2cd2:	1f 92       	push	r1
    2cd4:	0f 92       	push	r0
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	0f 92       	push	r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	0b b6       	in	r0, 0x3b	; 59
    2cde:	0f 92       	push	r0
    2ce0:	2f 93       	push	r18
    2ce2:	3f 93       	push	r19
    2ce4:	4f 93       	push	r20
    2ce6:	5f 93       	push	r21
    2ce8:	6f 93       	push	r22
    2cea:	7f 93       	push	r23
    2cec:	8f 93       	push	r24
    2cee:	9f 93       	push	r25
    2cf0:	af 93       	push	r26
    2cf2:	bf 93       	push	r27
    2cf4:	ef 93       	push	r30
    2cf6:	ff 93       	push	r31
    2cf8:	e0 91 c5 21 	lds	r30, 0x21C5
    2cfc:	f0 91 c6 21 	lds	r31, 0x21C6
    2d00:	30 97       	sbiw	r30, 0x00	; 0
    2d02:	29 f0       	breq	.+10     	; 0x2d0e <__vector_30+0x3c>
    2d04:	80 91 bb 22 	lds	r24, 0x22BB
    2d08:	90 91 bc 22 	lds	r25, 0x22BC
    2d0c:	19 95       	eicall
    2d0e:	ff 91       	pop	r31
    2d10:	ef 91       	pop	r30
    2d12:	bf 91       	pop	r27
    2d14:	af 91       	pop	r26
    2d16:	9f 91       	pop	r25
    2d18:	8f 91       	pop	r24
    2d1a:	7f 91       	pop	r23
    2d1c:	6f 91       	pop	r22
    2d1e:	5f 91       	pop	r21
    2d20:	4f 91       	pop	r20
    2d22:	3f 91       	pop	r19
    2d24:	2f 91       	pop	r18
    2d26:	0f 90       	pop	r0
    2d28:	0b be       	out	0x3b, r0	; 59
    2d2a:	0f 90       	pop	r0
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	0f 90       	pop	r0
    2d30:	1f 90       	pop	r1
    2d32:	18 95       	reti

00002d34 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2d34:	1f 92       	push	r1
    2d36:	0f 92       	push	r0
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	0f 92       	push	r0
    2d3c:	11 24       	eor	r1, r1
    2d3e:	0b b6       	in	r0, 0x3b	; 59
    2d40:	0f 92       	push	r0
    2d42:	2f 93       	push	r18
    2d44:	3f 93       	push	r19
    2d46:	4f 93       	push	r20
    2d48:	5f 93       	push	r21
    2d4a:	6f 93       	push	r22
    2d4c:	7f 93       	push	r23
    2d4e:	8f 93       	push	r24
    2d50:	9f 93       	push	r25
    2d52:	af 93       	push	r26
    2d54:	bf 93       	push	r27
    2d56:	ef 93       	push	r30
    2d58:	ff 93       	push	r31
    2d5a:	e0 91 c7 21 	lds	r30, 0x21C7
    2d5e:	f0 91 c8 21 	lds	r31, 0x21C8
    2d62:	30 97       	sbiw	r30, 0x00	; 0
    2d64:	29 f0       	breq	.+10     	; 0x2d70 <__vector_31+0x3c>
    2d66:	80 91 bd 22 	lds	r24, 0x22BD
    2d6a:	90 91 be 22 	lds	r25, 0x22BE
    2d6e:	19 95       	eicall
    2d70:	ff 91       	pop	r31
    2d72:	ef 91       	pop	r30
    2d74:	bf 91       	pop	r27
    2d76:	af 91       	pop	r26
    2d78:	9f 91       	pop	r25
    2d7a:	8f 91       	pop	r24
    2d7c:	7f 91       	pop	r23
    2d7e:	6f 91       	pop	r22
    2d80:	5f 91       	pop	r21
    2d82:	4f 91       	pop	r20
    2d84:	3f 91       	pop	r19
    2d86:	2f 91       	pop	r18
    2d88:	0f 90       	pop	r0
    2d8a:	0b be       	out	0x3b, r0	; 59
    2d8c:	0f 90       	pop	r0
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	0f 90       	pop	r0
    2d92:	1f 90       	pop	r1
    2d94:	18 95       	reti

00002d96 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2d96:	1f 92       	push	r1
    2d98:	0f 92       	push	r0
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	0f 92       	push	r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	0b b6       	in	r0, 0x3b	; 59
    2da2:	0f 92       	push	r0
    2da4:	2f 93       	push	r18
    2da6:	3f 93       	push	r19
    2da8:	4f 93       	push	r20
    2daa:	5f 93       	push	r21
    2dac:	6f 93       	push	r22
    2dae:	7f 93       	push	r23
    2db0:	8f 93       	push	r24
    2db2:	9f 93       	push	r25
    2db4:	af 93       	push	r26
    2db6:	bf 93       	push	r27
    2db8:	ef 93       	push	r30
    2dba:	ff 93       	push	r31
    2dbc:	e0 91 c9 21 	lds	r30, 0x21C9
    2dc0:	f0 91 ca 21 	lds	r31, 0x21CA
    2dc4:	30 97       	sbiw	r30, 0x00	; 0
    2dc6:	29 f0       	breq	.+10     	; 0x2dd2 <__vector_32+0x3c>
    2dc8:	80 91 bf 22 	lds	r24, 0x22BF
    2dcc:	90 91 c0 22 	lds	r25, 0x22C0
    2dd0:	19 95       	eicall
    2dd2:	ff 91       	pop	r31
    2dd4:	ef 91       	pop	r30
    2dd6:	bf 91       	pop	r27
    2dd8:	af 91       	pop	r26
    2dda:	9f 91       	pop	r25
    2ddc:	8f 91       	pop	r24
    2dde:	7f 91       	pop	r23
    2de0:	6f 91       	pop	r22
    2de2:	5f 91       	pop	r21
    2de4:	4f 91       	pop	r20
    2de6:	3f 91       	pop	r19
    2de8:	2f 91       	pop	r18
    2dea:	0f 90       	pop	r0
    2dec:	0b be       	out	0x3b, r0	; 59
    2dee:	0f 90       	pop	r0
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	0f 90       	pop	r0
    2df4:	1f 90       	pop	r1
    2df6:	18 95       	reti

00002df8 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2df8:	1f 92       	push	r1
    2dfa:	0f 92       	push	r0
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	0f 92       	push	r0
    2e00:	11 24       	eor	r1, r1
    2e02:	0b b6       	in	r0, 0x3b	; 59
    2e04:	0f 92       	push	r0
    2e06:	2f 93       	push	r18
    2e08:	3f 93       	push	r19
    2e0a:	4f 93       	push	r20
    2e0c:	5f 93       	push	r21
    2e0e:	6f 93       	push	r22
    2e10:	7f 93       	push	r23
    2e12:	8f 93       	push	r24
    2e14:	9f 93       	push	r25
    2e16:	af 93       	push	r26
    2e18:	bf 93       	push	r27
    2e1a:	ef 93       	push	r30
    2e1c:	ff 93       	push	r31
    2e1e:	e0 91 cb 21 	lds	r30, 0x21CB
    2e22:	f0 91 cc 21 	lds	r31, 0x21CC
    2e26:	30 97       	sbiw	r30, 0x00	; 0
    2e28:	29 f0       	breq	.+10     	; 0x2e34 <__vector_33+0x3c>
    2e2a:	80 91 c1 22 	lds	r24, 0x22C1
    2e2e:	90 91 c2 22 	lds	r25, 0x22C2
    2e32:	19 95       	eicall
    2e34:	ff 91       	pop	r31
    2e36:	ef 91       	pop	r30
    2e38:	bf 91       	pop	r27
    2e3a:	af 91       	pop	r26
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	7f 91       	pop	r23
    2e42:	6f 91       	pop	r22
    2e44:	5f 91       	pop	r21
    2e46:	4f 91       	pop	r20
    2e48:	3f 91       	pop	r19
    2e4a:	2f 91       	pop	r18
    2e4c:	0f 90       	pop	r0
    2e4e:	0b be       	out	0x3b, r0	; 59
    2e50:	0f 90       	pop	r0
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	0f 90       	pop	r0
    2e56:	1f 90       	pop	r1
    2e58:	18 95       	reti

00002e5a <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2e5a:	1f 92       	push	r1
    2e5c:	0f 92       	push	r0
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	0f 92       	push	r0
    2e62:	11 24       	eor	r1, r1
    2e64:	0b b6       	in	r0, 0x3b	; 59
    2e66:	0f 92       	push	r0
    2e68:	2f 93       	push	r18
    2e6a:	3f 93       	push	r19
    2e6c:	4f 93       	push	r20
    2e6e:	5f 93       	push	r21
    2e70:	6f 93       	push	r22
    2e72:	7f 93       	push	r23
    2e74:	8f 93       	push	r24
    2e76:	9f 93       	push	r25
    2e78:	af 93       	push	r26
    2e7a:	bf 93       	push	r27
    2e7c:	ef 93       	push	r30
    2e7e:	ff 93       	push	r31
    2e80:	e0 91 cd 21 	lds	r30, 0x21CD
    2e84:	f0 91 ce 21 	lds	r31, 0x21CE
    2e88:	30 97       	sbiw	r30, 0x00	; 0
    2e8a:	29 f0       	breq	.+10     	; 0x2e96 <__vector_34+0x3c>
    2e8c:	80 91 c3 22 	lds	r24, 0x22C3
    2e90:	90 91 c4 22 	lds	r25, 0x22C4
    2e94:	19 95       	eicall
    2e96:	ff 91       	pop	r31
    2e98:	ef 91       	pop	r30
    2e9a:	bf 91       	pop	r27
    2e9c:	af 91       	pop	r26
    2e9e:	9f 91       	pop	r25
    2ea0:	8f 91       	pop	r24
    2ea2:	7f 91       	pop	r23
    2ea4:	6f 91       	pop	r22
    2ea6:	5f 91       	pop	r21
    2ea8:	4f 91       	pop	r20
    2eaa:	3f 91       	pop	r19
    2eac:	2f 91       	pop	r18
    2eae:	0f 90       	pop	r0
    2eb0:	0b be       	out	0x3b, r0	; 59
    2eb2:	0f 90       	pop	r0
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	0f 90       	pop	r0
    2eb8:	1f 90       	pop	r1
    2eba:	18 95       	reti

00002ebc <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2ebc:	1f 92       	push	r1
    2ebe:	0f 92       	push	r0
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	0f 92       	push	r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	0b b6       	in	r0, 0x3b	; 59
    2ec8:	0f 92       	push	r0
    2eca:	2f 93       	push	r18
    2ecc:	3f 93       	push	r19
    2ece:	4f 93       	push	r20
    2ed0:	5f 93       	push	r21
    2ed2:	6f 93       	push	r22
    2ed4:	7f 93       	push	r23
    2ed6:	8f 93       	push	r24
    2ed8:	9f 93       	push	r25
    2eda:	af 93       	push	r26
    2edc:	bf 93       	push	r27
    2ede:	ef 93       	push	r30
    2ee0:	ff 93       	push	r31
    2ee2:	e0 91 cf 21 	lds	r30, 0x21CF
    2ee6:	f0 91 d0 21 	lds	r31, 0x21D0
    2eea:	30 97       	sbiw	r30, 0x00	; 0
    2eec:	29 f0       	breq	.+10     	; 0x2ef8 <__vector_35+0x3c>
    2eee:	80 91 c5 22 	lds	r24, 0x22C5
    2ef2:	90 91 c6 22 	lds	r25, 0x22C6
    2ef6:	19 95       	eicall
    2ef8:	ff 91       	pop	r31
    2efa:	ef 91       	pop	r30
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	7f 91       	pop	r23
    2f06:	6f 91       	pop	r22
    2f08:	5f 91       	pop	r21
    2f0a:	4f 91       	pop	r20
    2f0c:	3f 91       	pop	r19
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0b be       	out	0x3b, r0	; 59
    2f14:	0f 90       	pop	r0
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	0f 90       	pop	r0
    2f1a:	1f 90       	pop	r1
    2f1c:	18 95       	reti

00002f1e <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    2f1e:	1f 92       	push	r1
    2f20:	0f 92       	push	r0
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	0f 92       	push	r0
    2f26:	11 24       	eor	r1, r1
    2f28:	0b b6       	in	r0, 0x3b	; 59
    2f2a:	0f 92       	push	r0
    2f2c:	2f 93       	push	r18
    2f2e:	3f 93       	push	r19
    2f30:	4f 93       	push	r20
    2f32:	5f 93       	push	r21
    2f34:	6f 93       	push	r22
    2f36:	7f 93       	push	r23
    2f38:	8f 93       	push	r24
    2f3a:	9f 93       	push	r25
    2f3c:	af 93       	push	r26
    2f3e:	bf 93       	push	r27
    2f40:	ef 93       	push	r30
    2f42:	ff 93       	push	r31
    2f44:	e0 91 d1 21 	lds	r30, 0x21D1
    2f48:	f0 91 d2 21 	lds	r31, 0x21D2
    2f4c:	30 97       	sbiw	r30, 0x00	; 0
    2f4e:	29 f0       	breq	.+10     	; 0x2f5a <__vector_36+0x3c>
    2f50:	80 91 c7 22 	lds	r24, 0x22C7
    2f54:	90 91 c8 22 	lds	r25, 0x22C8
    2f58:	19 95       	eicall
    2f5a:	ff 91       	pop	r31
    2f5c:	ef 91       	pop	r30
    2f5e:	bf 91       	pop	r27
    2f60:	af 91       	pop	r26
    2f62:	9f 91       	pop	r25
    2f64:	8f 91       	pop	r24
    2f66:	7f 91       	pop	r23
    2f68:	6f 91       	pop	r22
    2f6a:	5f 91       	pop	r21
    2f6c:	4f 91       	pop	r20
    2f6e:	3f 91       	pop	r19
    2f70:	2f 91       	pop	r18
    2f72:	0f 90       	pop	r0
    2f74:	0b be       	out	0x3b, r0	; 59
    2f76:	0f 90       	pop	r0
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	0f 90       	pop	r0
    2f7c:	1f 90       	pop	r1
    2f7e:	18 95       	reti

00002f80 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2f80:	1f 92       	push	r1
    2f82:	0f 92       	push	r0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	0b b6       	in	r0, 0x3b	; 59
    2f8c:	0f 92       	push	r0
    2f8e:	2f 93       	push	r18
    2f90:	3f 93       	push	r19
    2f92:	4f 93       	push	r20
    2f94:	5f 93       	push	r21
    2f96:	6f 93       	push	r22
    2f98:	7f 93       	push	r23
    2f9a:	8f 93       	push	r24
    2f9c:	9f 93       	push	r25
    2f9e:	af 93       	push	r26
    2fa0:	bf 93       	push	r27
    2fa2:	ef 93       	push	r30
    2fa4:	ff 93       	push	r31
    2fa6:	e0 91 d3 21 	lds	r30, 0x21D3
    2faa:	f0 91 d4 21 	lds	r31, 0x21D4
    2fae:	30 97       	sbiw	r30, 0x00	; 0
    2fb0:	29 f0       	breq	.+10     	; 0x2fbc <__vector_37+0x3c>
    2fb2:	80 91 c9 22 	lds	r24, 0x22C9
    2fb6:	90 91 ca 22 	lds	r25, 0x22CA
    2fba:	19 95       	eicall
    2fbc:	ff 91       	pop	r31
    2fbe:	ef 91       	pop	r30
    2fc0:	bf 91       	pop	r27
    2fc2:	af 91       	pop	r26
    2fc4:	9f 91       	pop	r25
    2fc6:	8f 91       	pop	r24
    2fc8:	7f 91       	pop	r23
    2fca:	6f 91       	pop	r22
    2fcc:	5f 91       	pop	r21
    2fce:	4f 91       	pop	r20
    2fd0:	3f 91       	pop	r19
    2fd2:	2f 91       	pop	r18
    2fd4:	0f 90       	pop	r0
    2fd6:	0b be       	out	0x3b, r0	; 59
    2fd8:	0f 90       	pop	r0
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	0f 90       	pop	r0
    2fde:	1f 90       	pop	r1
    2fe0:	18 95       	reti

00002fe2 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	0b b6       	in	r0, 0x3b	; 59
    2fee:	0f 92       	push	r0
    2ff0:	2f 93       	push	r18
    2ff2:	3f 93       	push	r19
    2ff4:	4f 93       	push	r20
    2ff6:	5f 93       	push	r21
    2ff8:	6f 93       	push	r22
    2ffa:	7f 93       	push	r23
    2ffc:	8f 93       	push	r24
    2ffe:	9f 93       	push	r25
    3000:	af 93       	push	r26
    3002:	bf 93       	push	r27
    3004:	ef 93       	push	r30
    3006:	ff 93       	push	r31
    3008:	e0 91 d5 21 	lds	r30, 0x21D5
    300c:	f0 91 d6 21 	lds	r31, 0x21D6
    3010:	30 97       	sbiw	r30, 0x00	; 0
    3012:	29 f0       	breq	.+10     	; 0x301e <__vector_38+0x3c>
    3014:	80 91 cb 22 	lds	r24, 0x22CB
    3018:	90 91 cc 22 	lds	r25, 0x22CC
    301c:	19 95       	eicall
    301e:	ff 91       	pop	r31
    3020:	ef 91       	pop	r30
    3022:	bf 91       	pop	r27
    3024:	af 91       	pop	r26
    3026:	9f 91       	pop	r25
    3028:	8f 91       	pop	r24
    302a:	7f 91       	pop	r23
    302c:	6f 91       	pop	r22
    302e:	5f 91       	pop	r21
    3030:	4f 91       	pop	r20
    3032:	3f 91       	pop	r19
    3034:	2f 91       	pop	r18
    3036:	0f 90       	pop	r0
    3038:	0b be       	out	0x3b, r0	; 59
    303a:	0f 90       	pop	r0
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	0f 90       	pop	r0
    3040:	1f 90       	pop	r1
    3042:	18 95       	reti

00003044 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    3044:	1f 92       	push	r1
    3046:	0f 92       	push	r0
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	0f 92       	push	r0
    304c:	11 24       	eor	r1, r1
    304e:	0b b6       	in	r0, 0x3b	; 59
    3050:	0f 92       	push	r0
    3052:	2f 93       	push	r18
    3054:	3f 93       	push	r19
    3056:	4f 93       	push	r20
    3058:	5f 93       	push	r21
    305a:	6f 93       	push	r22
    305c:	7f 93       	push	r23
    305e:	8f 93       	push	r24
    3060:	9f 93       	push	r25
    3062:	af 93       	push	r26
    3064:	bf 93       	push	r27
    3066:	ef 93       	push	r30
    3068:	ff 93       	push	r31
    306a:	e0 91 d7 21 	lds	r30, 0x21D7
    306e:	f0 91 d8 21 	lds	r31, 0x21D8
    3072:	30 97       	sbiw	r30, 0x00	; 0
    3074:	29 f0       	breq	.+10     	; 0x3080 <__vector_39+0x3c>
    3076:	80 91 cd 22 	lds	r24, 0x22CD
    307a:	90 91 ce 22 	lds	r25, 0x22CE
    307e:	19 95       	eicall
    3080:	ff 91       	pop	r31
    3082:	ef 91       	pop	r30
    3084:	bf 91       	pop	r27
    3086:	af 91       	pop	r26
    3088:	9f 91       	pop	r25
    308a:	8f 91       	pop	r24
    308c:	7f 91       	pop	r23
    308e:	6f 91       	pop	r22
    3090:	5f 91       	pop	r21
    3092:	4f 91       	pop	r20
    3094:	3f 91       	pop	r19
    3096:	2f 91       	pop	r18
    3098:	0f 90       	pop	r0
    309a:	0b be       	out	0x3b, r0	; 59
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
    30b0:	0b b6       	in	r0, 0x3b	; 59
    30b2:	0f 92       	push	r0
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
    30cc:	e0 91 d9 21 	lds	r30, 0x21D9
    30d0:	f0 91 da 21 	lds	r31, 0x21DA
    30d4:	30 97       	sbiw	r30, 0x00	; 0
    30d6:	29 f0       	breq	.+10     	; 0x30e2 <__vector_40+0x3c>
    30d8:	80 91 cf 22 	lds	r24, 0x22CF
    30dc:	90 91 d0 22 	lds	r25, 0x22D0
    30e0:	19 95       	eicall
    30e2:	ff 91       	pop	r31
    30e4:	ef 91       	pop	r30
    30e6:	bf 91       	pop	r27
    30e8:	af 91       	pop	r26
    30ea:	9f 91       	pop	r25
    30ec:	8f 91       	pop	r24
    30ee:	7f 91       	pop	r23
    30f0:	6f 91       	pop	r22
    30f2:	5f 91       	pop	r21
    30f4:	4f 91       	pop	r20
    30f6:	3f 91       	pop	r19
    30f8:	2f 91       	pop	r18
    30fa:	0f 90       	pop	r0
    30fc:	0b be       	out	0x3b, r0	; 59
    30fe:	0f 90       	pop	r0
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	0f 90       	pop	r0
    3104:	1f 90       	pop	r1
    3106:	18 95       	reti

00003108 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    3108:	1f 92       	push	r1
    310a:	0f 92       	push	r0
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	0f 92       	push	r0
    3110:	11 24       	eor	r1, r1
    3112:	0b b6       	in	r0, 0x3b	; 59
    3114:	0f 92       	push	r0
    3116:	2f 93       	push	r18
    3118:	3f 93       	push	r19
    311a:	4f 93       	push	r20
    311c:	5f 93       	push	r21
    311e:	6f 93       	push	r22
    3120:	7f 93       	push	r23
    3122:	8f 93       	push	r24
    3124:	9f 93       	push	r25
    3126:	af 93       	push	r26
    3128:	bf 93       	push	r27
    312a:	ef 93       	push	r30
    312c:	ff 93       	push	r31
    312e:	e0 91 db 21 	lds	r30, 0x21DB
    3132:	f0 91 dc 21 	lds	r31, 0x21DC
    3136:	30 97       	sbiw	r30, 0x00	; 0
    3138:	29 f0       	breq	.+10     	; 0x3144 <__vector_41+0x3c>
    313a:	80 91 d1 22 	lds	r24, 0x22D1
    313e:	90 91 d2 22 	lds	r25, 0x22D2
    3142:	19 95       	eicall
    3144:	ff 91       	pop	r31
    3146:	ef 91       	pop	r30
    3148:	bf 91       	pop	r27
    314a:	af 91       	pop	r26
    314c:	9f 91       	pop	r25
    314e:	8f 91       	pop	r24
    3150:	7f 91       	pop	r23
    3152:	6f 91       	pop	r22
    3154:	5f 91       	pop	r21
    3156:	4f 91       	pop	r20
    3158:	3f 91       	pop	r19
    315a:	2f 91       	pop	r18
    315c:	0f 90       	pop	r0
    315e:	0b be       	out	0x3b, r0	; 59
    3160:	0f 90       	pop	r0
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	0f 90       	pop	r0
    3166:	1f 90       	pop	r1
    3168:	18 95       	reti

0000316a <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    316a:	1f 92       	push	r1
    316c:	0f 92       	push	r0
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	0f 92       	push	r0
    3172:	11 24       	eor	r1, r1
    3174:	0b b6       	in	r0, 0x3b	; 59
    3176:	0f 92       	push	r0
    3178:	2f 93       	push	r18
    317a:	3f 93       	push	r19
    317c:	4f 93       	push	r20
    317e:	5f 93       	push	r21
    3180:	6f 93       	push	r22
    3182:	7f 93       	push	r23
    3184:	8f 93       	push	r24
    3186:	9f 93       	push	r25
    3188:	af 93       	push	r26
    318a:	bf 93       	push	r27
    318c:	ef 93       	push	r30
    318e:	ff 93       	push	r31
    3190:	e0 91 dd 21 	lds	r30, 0x21DD
    3194:	f0 91 de 21 	lds	r31, 0x21DE
    3198:	30 97       	sbiw	r30, 0x00	; 0
    319a:	29 f0       	breq	.+10     	; 0x31a6 <__vector_42+0x3c>
    319c:	80 91 d3 22 	lds	r24, 0x22D3
    31a0:	90 91 d4 22 	lds	r25, 0x22D4
    31a4:	19 95       	eicall
    31a6:	ff 91       	pop	r31
    31a8:	ef 91       	pop	r30
    31aa:	bf 91       	pop	r27
    31ac:	af 91       	pop	r26
    31ae:	9f 91       	pop	r25
    31b0:	8f 91       	pop	r24
    31b2:	7f 91       	pop	r23
    31b4:	6f 91       	pop	r22
    31b6:	5f 91       	pop	r21
    31b8:	4f 91       	pop	r20
    31ba:	3f 91       	pop	r19
    31bc:	2f 91       	pop	r18
    31be:	0f 90       	pop	r0
    31c0:	0b be       	out	0x3b, r0	; 59
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0
    31c8:	1f 90       	pop	r1
    31ca:	18 95       	reti

000031cc <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    31cc:	1f 92       	push	r1
    31ce:	0f 92       	push	r0
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	0f 92       	push	r0
    31d4:	11 24       	eor	r1, r1
    31d6:	0b b6       	in	r0, 0x3b	; 59
    31d8:	0f 92       	push	r0
    31da:	2f 93       	push	r18
    31dc:	3f 93       	push	r19
    31de:	4f 93       	push	r20
    31e0:	5f 93       	push	r21
    31e2:	6f 93       	push	r22
    31e4:	7f 93       	push	r23
    31e6:	8f 93       	push	r24
    31e8:	9f 93       	push	r25
    31ea:	af 93       	push	r26
    31ec:	bf 93       	push	r27
    31ee:	ef 93       	push	r30
    31f0:	ff 93       	push	r31
    31f2:	e0 91 df 21 	lds	r30, 0x21DF
    31f6:	f0 91 e0 21 	lds	r31, 0x21E0
    31fa:	30 97       	sbiw	r30, 0x00	; 0
    31fc:	29 f0       	breq	.+10     	; 0x3208 <__vector_43+0x3c>
    31fe:	80 91 d5 22 	lds	r24, 0x22D5
    3202:	90 91 d6 22 	lds	r25, 0x22D6
    3206:	19 95       	eicall
    3208:	ff 91       	pop	r31
    320a:	ef 91       	pop	r30
    320c:	bf 91       	pop	r27
    320e:	af 91       	pop	r26
    3210:	9f 91       	pop	r25
    3212:	8f 91       	pop	r24
    3214:	7f 91       	pop	r23
    3216:	6f 91       	pop	r22
    3218:	5f 91       	pop	r21
    321a:	4f 91       	pop	r20
    321c:	3f 91       	pop	r19
    321e:	2f 91       	pop	r18
    3220:	0f 90       	pop	r0
    3222:	0b be       	out	0x3b, r0	; 59
    3224:	0f 90       	pop	r0
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	0f 90       	pop	r0
    322a:	1f 90       	pop	r1
    322c:	18 95       	reti

0000322e <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    322e:	1f 92       	push	r1
    3230:	0f 92       	push	r0
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	0f 92       	push	r0
    3236:	11 24       	eor	r1, r1
    3238:	0b b6       	in	r0, 0x3b	; 59
    323a:	0f 92       	push	r0
    323c:	2f 93       	push	r18
    323e:	3f 93       	push	r19
    3240:	4f 93       	push	r20
    3242:	5f 93       	push	r21
    3244:	6f 93       	push	r22
    3246:	7f 93       	push	r23
    3248:	8f 93       	push	r24
    324a:	9f 93       	push	r25
    324c:	af 93       	push	r26
    324e:	bf 93       	push	r27
    3250:	ef 93       	push	r30
    3252:	ff 93       	push	r31
    3254:	e0 91 e1 21 	lds	r30, 0x21E1
    3258:	f0 91 e2 21 	lds	r31, 0x21E2
    325c:	30 97       	sbiw	r30, 0x00	; 0
    325e:	29 f0       	breq	.+10     	; 0x326a <__vector_44+0x3c>
    3260:	80 91 d7 22 	lds	r24, 0x22D7
    3264:	90 91 d8 22 	lds	r25, 0x22D8
    3268:	19 95       	eicall
    326a:	ff 91       	pop	r31
    326c:	ef 91       	pop	r30
    326e:	bf 91       	pop	r27
    3270:	af 91       	pop	r26
    3272:	9f 91       	pop	r25
    3274:	8f 91       	pop	r24
    3276:	7f 91       	pop	r23
    3278:	6f 91       	pop	r22
    327a:	5f 91       	pop	r21
    327c:	4f 91       	pop	r20
    327e:	3f 91       	pop	r19
    3280:	2f 91       	pop	r18
    3282:	0f 90       	pop	r0
    3284:	0b be       	out	0x3b, r0	; 59
    3286:	0f 90       	pop	r0
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	0f 90       	pop	r0
    328c:	1f 90       	pop	r1
    328e:	18 95       	reti

00003290 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3290:	1f 92       	push	r1
    3292:	0f 92       	push	r0
    3294:	0f b6       	in	r0, 0x3f	; 63
    3296:	0f 92       	push	r0
    3298:	11 24       	eor	r1, r1
    329a:	0b b6       	in	r0, 0x3b	; 59
    329c:	0f 92       	push	r0
    329e:	2f 93       	push	r18
    32a0:	3f 93       	push	r19
    32a2:	4f 93       	push	r20
    32a4:	5f 93       	push	r21
    32a6:	6f 93       	push	r22
    32a8:	7f 93       	push	r23
    32aa:	8f 93       	push	r24
    32ac:	9f 93       	push	r25
    32ae:	af 93       	push	r26
    32b0:	bf 93       	push	r27
    32b2:	ef 93       	push	r30
    32b4:	ff 93       	push	r31
    32b6:	e0 91 e3 21 	lds	r30, 0x21E3
    32ba:	f0 91 e4 21 	lds	r31, 0x21E4
    32be:	30 97       	sbiw	r30, 0x00	; 0
    32c0:	29 f0       	breq	.+10     	; 0x32cc <__vector_45+0x3c>
    32c2:	80 91 d9 22 	lds	r24, 0x22D9
    32c6:	90 91 da 22 	lds	r25, 0x22DA
    32ca:	19 95       	eicall
    32cc:	ff 91       	pop	r31
    32ce:	ef 91       	pop	r30
    32d0:	bf 91       	pop	r27
    32d2:	af 91       	pop	r26
    32d4:	9f 91       	pop	r25
    32d6:	8f 91       	pop	r24
    32d8:	7f 91       	pop	r23
    32da:	6f 91       	pop	r22
    32dc:	5f 91       	pop	r21
    32de:	4f 91       	pop	r20
    32e0:	3f 91       	pop	r19
    32e2:	2f 91       	pop	r18
    32e4:	0f 90       	pop	r0
    32e6:	0b be       	out	0x3b, r0	; 59
    32e8:	0f 90       	pop	r0
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	0f 90       	pop	r0
    32ee:	1f 90       	pop	r1
    32f0:	18 95       	reti

000032f2 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    32f2:	1f 92       	push	r1
    32f4:	0f 92       	push	r0
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	0f 92       	push	r0
    32fa:	11 24       	eor	r1, r1
    32fc:	0b b6       	in	r0, 0x3b	; 59
    32fe:	0f 92       	push	r0
    3300:	2f 93       	push	r18
    3302:	3f 93       	push	r19
    3304:	4f 93       	push	r20
    3306:	5f 93       	push	r21
    3308:	6f 93       	push	r22
    330a:	7f 93       	push	r23
    330c:	8f 93       	push	r24
    330e:	9f 93       	push	r25
    3310:	af 93       	push	r26
    3312:	bf 93       	push	r27
    3314:	ef 93       	push	r30
    3316:	ff 93       	push	r31
    3318:	e0 91 e5 21 	lds	r30, 0x21E5
    331c:	f0 91 e6 21 	lds	r31, 0x21E6
    3320:	30 97       	sbiw	r30, 0x00	; 0
    3322:	29 f0       	breq	.+10     	; 0x332e <__vector_46+0x3c>
    3324:	80 91 db 22 	lds	r24, 0x22DB
    3328:	90 91 dc 22 	lds	r25, 0x22DC
    332c:	19 95       	eicall
    332e:	ff 91       	pop	r31
    3330:	ef 91       	pop	r30
    3332:	bf 91       	pop	r27
    3334:	af 91       	pop	r26
    3336:	9f 91       	pop	r25
    3338:	8f 91       	pop	r24
    333a:	7f 91       	pop	r23
    333c:	6f 91       	pop	r22
    333e:	5f 91       	pop	r21
    3340:	4f 91       	pop	r20
    3342:	3f 91       	pop	r19
    3344:	2f 91       	pop	r18
    3346:	0f 90       	pop	r0
    3348:	0b be       	out	0x3b, r0	; 59
    334a:	0f 90       	pop	r0
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	0f 90       	pop	r0
    3350:	1f 90       	pop	r1
    3352:	18 95       	reti

00003354 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    3354:	1f 92       	push	r1
    3356:	0f 92       	push	r0
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	0f 92       	push	r0
    335c:	11 24       	eor	r1, r1
    335e:	0b b6       	in	r0, 0x3b	; 59
    3360:	0f 92       	push	r0
    3362:	2f 93       	push	r18
    3364:	3f 93       	push	r19
    3366:	4f 93       	push	r20
    3368:	5f 93       	push	r21
    336a:	6f 93       	push	r22
    336c:	7f 93       	push	r23
    336e:	8f 93       	push	r24
    3370:	9f 93       	push	r25
    3372:	af 93       	push	r26
    3374:	bf 93       	push	r27
    3376:	ef 93       	push	r30
    3378:	ff 93       	push	r31
    337a:	e0 91 e7 21 	lds	r30, 0x21E7
    337e:	f0 91 e8 21 	lds	r31, 0x21E8
    3382:	30 97       	sbiw	r30, 0x00	; 0
    3384:	29 f0       	breq	.+10     	; 0x3390 <__vector_47+0x3c>
    3386:	80 91 dd 22 	lds	r24, 0x22DD
    338a:	90 91 de 22 	lds	r25, 0x22DE
    338e:	19 95       	eicall
    3390:	ff 91       	pop	r31
    3392:	ef 91       	pop	r30
    3394:	bf 91       	pop	r27
    3396:	af 91       	pop	r26
    3398:	9f 91       	pop	r25
    339a:	8f 91       	pop	r24
    339c:	7f 91       	pop	r23
    339e:	6f 91       	pop	r22
    33a0:	5f 91       	pop	r21
    33a2:	4f 91       	pop	r20
    33a4:	3f 91       	pop	r19
    33a6:	2f 91       	pop	r18
    33a8:	0f 90       	pop	r0
    33aa:	0b be       	out	0x3b, r0	; 59
    33ac:	0f 90       	pop	r0
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	0f 90       	pop	r0
    33b2:	1f 90       	pop	r1
    33b4:	18 95       	reti

000033b6 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    33b6:	1f 92       	push	r1
    33b8:	0f 92       	push	r0
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	0f 92       	push	r0
    33be:	11 24       	eor	r1, r1
    33c0:	0b b6       	in	r0, 0x3b	; 59
    33c2:	0f 92       	push	r0
    33c4:	2f 93       	push	r18
    33c6:	3f 93       	push	r19
    33c8:	4f 93       	push	r20
    33ca:	5f 93       	push	r21
    33cc:	6f 93       	push	r22
    33ce:	7f 93       	push	r23
    33d0:	8f 93       	push	r24
    33d2:	9f 93       	push	r25
    33d4:	af 93       	push	r26
    33d6:	bf 93       	push	r27
    33d8:	ef 93       	push	r30
    33da:	ff 93       	push	r31
    33dc:	e0 91 e9 21 	lds	r30, 0x21E9
    33e0:	f0 91 ea 21 	lds	r31, 0x21EA
    33e4:	30 97       	sbiw	r30, 0x00	; 0
    33e6:	29 f0       	breq	.+10     	; 0x33f2 <__vector_48+0x3c>
    33e8:	80 91 df 22 	lds	r24, 0x22DF
    33ec:	90 91 e0 22 	lds	r25, 0x22E0
    33f0:	19 95       	eicall
    33f2:	ff 91       	pop	r31
    33f4:	ef 91       	pop	r30
    33f6:	bf 91       	pop	r27
    33f8:	af 91       	pop	r26
    33fa:	9f 91       	pop	r25
    33fc:	8f 91       	pop	r24
    33fe:	7f 91       	pop	r23
    3400:	6f 91       	pop	r22
    3402:	5f 91       	pop	r21
    3404:	4f 91       	pop	r20
    3406:	3f 91       	pop	r19
    3408:	2f 91       	pop	r18
    340a:	0f 90       	pop	r0
    340c:	0b be       	out	0x3b, r0	; 59
    340e:	0f 90       	pop	r0
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	0f 90       	pop	r0
    3414:	1f 90       	pop	r1
    3416:	18 95       	reti

00003418 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    3418:	1f 92       	push	r1
    341a:	0f 92       	push	r0
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	0f 92       	push	r0
    3420:	11 24       	eor	r1, r1
    3422:	0b b6       	in	r0, 0x3b	; 59
    3424:	0f 92       	push	r0
    3426:	2f 93       	push	r18
    3428:	3f 93       	push	r19
    342a:	4f 93       	push	r20
    342c:	5f 93       	push	r21
    342e:	6f 93       	push	r22
    3430:	7f 93       	push	r23
    3432:	8f 93       	push	r24
    3434:	9f 93       	push	r25
    3436:	af 93       	push	r26
    3438:	bf 93       	push	r27
    343a:	ef 93       	push	r30
    343c:	ff 93       	push	r31
    343e:	e0 91 eb 21 	lds	r30, 0x21EB
    3442:	f0 91 ec 21 	lds	r31, 0x21EC
    3446:	30 97       	sbiw	r30, 0x00	; 0
    3448:	29 f0       	breq	.+10     	; 0x3454 <__vector_49+0x3c>
    344a:	80 91 e1 22 	lds	r24, 0x22E1
    344e:	90 91 e2 22 	lds	r25, 0x22E2
    3452:	19 95       	eicall
    3454:	ff 91       	pop	r31
    3456:	ef 91       	pop	r30
    3458:	bf 91       	pop	r27
    345a:	af 91       	pop	r26
    345c:	9f 91       	pop	r25
    345e:	8f 91       	pop	r24
    3460:	7f 91       	pop	r23
    3462:	6f 91       	pop	r22
    3464:	5f 91       	pop	r21
    3466:	4f 91       	pop	r20
    3468:	3f 91       	pop	r19
    346a:	2f 91       	pop	r18
    346c:	0f 90       	pop	r0
    346e:	0b be       	out	0x3b, r0	; 59
    3470:	0f 90       	pop	r0
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	0f 90       	pop	r0
    3476:	1f 90       	pop	r1
    3478:	18 95       	reti

0000347a <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    347a:	1f 92       	push	r1
    347c:	0f 92       	push	r0
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	0f 92       	push	r0
    3482:	11 24       	eor	r1, r1
    3484:	0b b6       	in	r0, 0x3b	; 59
    3486:	0f 92       	push	r0
    3488:	2f 93       	push	r18
    348a:	3f 93       	push	r19
    348c:	4f 93       	push	r20
    348e:	5f 93       	push	r21
    3490:	6f 93       	push	r22
    3492:	7f 93       	push	r23
    3494:	8f 93       	push	r24
    3496:	9f 93       	push	r25
    3498:	af 93       	push	r26
    349a:	bf 93       	push	r27
    349c:	ef 93       	push	r30
    349e:	ff 93       	push	r31
    34a0:	e0 91 ed 21 	lds	r30, 0x21ED
    34a4:	f0 91 ee 21 	lds	r31, 0x21EE
    34a8:	30 97       	sbiw	r30, 0x00	; 0
    34aa:	29 f0       	breq	.+10     	; 0x34b6 <__vector_50+0x3c>
    34ac:	80 91 e3 22 	lds	r24, 0x22E3
    34b0:	90 91 e4 22 	lds	r25, 0x22E4
    34b4:	19 95       	eicall
    34b6:	ff 91       	pop	r31
    34b8:	ef 91       	pop	r30
    34ba:	bf 91       	pop	r27
    34bc:	af 91       	pop	r26
    34be:	9f 91       	pop	r25
    34c0:	8f 91       	pop	r24
    34c2:	7f 91       	pop	r23
    34c4:	6f 91       	pop	r22
    34c6:	5f 91       	pop	r21
    34c8:	4f 91       	pop	r20
    34ca:	3f 91       	pop	r19
    34cc:	2f 91       	pop	r18
    34ce:	0f 90       	pop	r0
    34d0:	0b be       	out	0x3b, r0	; 59
    34d2:	0f 90       	pop	r0
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	0f 90       	pop	r0
    34d8:	1f 90       	pop	r1
    34da:	18 95       	reti

000034dc <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    34dc:	1f 92       	push	r1
    34de:	0f 92       	push	r0
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	0f 92       	push	r0
    34e4:	11 24       	eor	r1, r1
    34e6:	0b b6       	in	r0, 0x3b	; 59
    34e8:	0f 92       	push	r0
    34ea:	2f 93       	push	r18
    34ec:	3f 93       	push	r19
    34ee:	4f 93       	push	r20
    34f0:	5f 93       	push	r21
    34f2:	6f 93       	push	r22
    34f4:	7f 93       	push	r23
    34f6:	8f 93       	push	r24
    34f8:	9f 93       	push	r25
    34fa:	af 93       	push	r26
    34fc:	bf 93       	push	r27
    34fe:	ef 93       	push	r30
    3500:	ff 93       	push	r31
    3502:	e0 91 ef 21 	lds	r30, 0x21EF
    3506:	f0 91 f0 21 	lds	r31, 0x21F0
    350a:	30 97       	sbiw	r30, 0x00	; 0
    350c:	29 f0       	breq	.+10     	; 0x3518 <__vector_51+0x3c>
    350e:	80 91 e5 22 	lds	r24, 0x22E5
    3512:	90 91 e6 22 	lds	r25, 0x22E6
    3516:	19 95       	eicall
    3518:	ff 91       	pop	r31
    351a:	ef 91       	pop	r30
    351c:	bf 91       	pop	r27
    351e:	af 91       	pop	r26
    3520:	9f 91       	pop	r25
    3522:	8f 91       	pop	r24
    3524:	7f 91       	pop	r23
    3526:	6f 91       	pop	r22
    3528:	5f 91       	pop	r21
    352a:	4f 91       	pop	r20
    352c:	3f 91       	pop	r19
    352e:	2f 91       	pop	r18
    3530:	0f 90       	pop	r0
    3532:	0b be       	out	0x3b, r0	; 59
    3534:	0f 90       	pop	r0
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	0f 90       	pop	r0
    353a:	1f 90       	pop	r1
    353c:	18 95       	reti

0000353e <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    353e:	1f 92       	push	r1
    3540:	0f 92       	push	r0
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	0f 92       	push	r0
    3546:	11 24       	eor	r1, r1
    3548:	0b b6       	in	r0, 0x3b	; 59
    354a:	0f 92       	push	r0
    354c:	2f 93       	push	r18
    354e:	3f 93       	push	r19
    3550:	4f 93       	push	r20
    3552:	5f 93       	push	r21
    3554:	6f 93       	push	r22
    3556:	7f 93       	push	r23
    3558:	8f 93       	push	r24
    355a:	9f 93       	push	r25
    355c:	af 93       	push	r26
    355e:	bf 93       	push	r27
    3560:	ef 93       	push	r30
    3562:	ff 93       	push	r31
    3564:	e0 91 f1 21 	lds	r30, 0x21F1
    3568:	f0 91 f2 21 	lds	r31, 0x21F2
    356c:	30 97       	sbiw	r30, 0x00	; 0
    356e:	29 f0       	breq	.+10     	; 0x357a <__vector_52+0x3c>
    3570:	80 91 e7 22 	lds	r24, 0x22E7
    3574:	90 91 e8 22 	lds	r25, 0x22E8
    3578:	19 95       	eicall
    357a:	ff 91       	pop	r31
    357c:	ef 91       	pop	r30
    357e:	bf 91       	pop	r27
    3580:	af 91       	pop	r26
    3582:	9f 91       	pop	r25
    3584:	8f 91       	pop	r24
    3586:	7f 91       	pop	r23
    3588:	6f 91       	pop	r22
    358a:	5f 91       	pop	r21
    358c:	4f 91       	pop	r20
    358e:	3f 91       	pop	r19
    3590:	2f 91       	pop	r18
    3592:	0f 90       	pop	r0
    3594:	0b be       	out	0x3b, r0	; 59
    3596:	0f 90       	pop	r0
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	0f 90       	pop	r0
    359c:	1f 90       	pop	r1
    359e:	18 95       	reti

000035a0 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    35a0:	1f 92       	push	r1
    35a2:	0f 92       	push	r0
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	0f 92       	push	r0
    35a8:	11 24       	eor	r1, r1
    35aa:	0b b6       	in	r0, 0x3b	; 59
    35ac:	0f 92       	push	r0
    35ae:	2f 93       	push	r18
    35b0:	3f 93       	push	r19
    35b2:	4f 93       	push	r20
    35b4:	5f 93       	push	r21
    35b6:	6f 93       	push	r22
    35b8:	7f 93       	push	r23
    35ba:	8f 93       	push	r24
    35bc:	9f 93       	push	r25
    35be:	af 93       	push	r26
    35c0:	bf 93       	push	r27
    35c2:	ef 93       	push	r30
    35c4:	ff 93       	push	r31
    35c6:	e0 91 f3 21 	lds	r30, 0x21F3
    35ca:	f0 91 f4 21 	lds	r31, 0x21F4
    35ce:	30 97       	sbiw	r30, 0x00	; 0
    35d0:	29 f0       	breq	.+10     	; 0x35dc <__vector_53+0x3c>
    35d2:	80 91 e9 22 	lds	r24, 0x22E9
    35d6:	90 91 ea 22 	lds	r25, 0x22EA
    35da:	19 95       	eicall
    35dc:	ff 91       	pop	r31
    35de:	ef 91       	pop	r30
    35e0:	bf 91       	pop	r27
    35e2:	af 91       	pop	r26
    35e4:	9f 91       	pop	r25
    35e6:	8f 91       	pop	r24
    35e8:	7f 91       	pop	r23
    35ea:	6f 91       	pop	r22
    35ec:	5f 91       	pop	r21
    35ee:	4f 91       	pop	r20
    35f0:	3f 91       	pop	r19
    35f2:	2f 91       	pop	r18
    35f4:	0f 90       	pop	r0
    35f6:	0b be       	out	0x3b, r0	; 59
    35f8:	0f 90       	pop	r0
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	0f 90       	pop	r0
    35fe:	1f 90       	pop	r1
    3600:	18 95       	reti

00003602 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    3602:	1f 92       	push	r1
    3604:	0f 92       	push	r0
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	0f 92       	push	r0
    360a:	11 24       	eor	r1, r1
    360c:	0b b6       	in	r0, 0x3b	; 59
    360e:	0f 92       	push	r0
    3610:	2f 93       	push	r18
    3612:	3f 93       	push	r19
    3614:	4f 93       	push	r20
    3616:	5f 93       	push	r21
    3618:	6f 93       	push	r22
    361a:	7f 93       	push	r23
    361c:	8f 93       	push	r24
    361e:	9f 93       	push	r25
    3620:	af 93       	push	r26
    3622:	bf 93       	push	r27
    3624:	ef 93       	push	r30
    3626:	ff 93       	push	r31
    3628:	e0 91 f5 21 	lds	r30, 0x21F5
    362c:	f0 91 f6 21 	lds	r31, 0x21F6
    3630:	30 97       	sbiw	r30, 0x00	; 0
    3632:	29 f0       	breq	.+10     	; 0x363e <__vector_54+0x3c>
    3634:	80 91 eb 22 	lds	r24, 0x22EB
    3638:	90 91 ec 22 	lds	r25, 0x22EC
    363c:	19 95       	eicall
    363e:	ff 91       	pop	r31
    3640:	ef 91       	pop	r30
    3642:	bf 91       	pop	r27
    3644:	af 91       	pop	r26
    3646:	9f 91       	pop	r25
    3648:	8f 91       	pop	r24
    364a:	7f 91       	pop	r23
    364c:	6f 91       	pop	r22
    364e:	5f 91       	pop	r21
    3650:	4f 91       	pop	r20
    3652:	3f 91       	pop	r19
    3654:	2f 91       	pop	r18
    3656:	0f 90       	pop	r0
    3658:	0b be       	out	0x3b, r0	; 59
    365a:	0f 90       	pop	r0
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	0f 90       	pop	r0
    3660:	1f 90       	pop	r1
    3662:	18 95       	reti

00003664 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    3664:	1f 92       	push	r1
    3666:	0f 92       	push	r0
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	0f 92       	push	r0
    366c:	11 24       	eor	r1, r1
    366e:	0b b6       	in	r0, 0x3b	; 59
    3670:	0f 92       	push	r0
    3672:	2f 93       	push	r18
    3674:	3f 93       	push	r19
    3676:	4f 93       	push	r20
    3678:	5f 93       	push	r21
    367a:	6f 93       	push	r22
    367c:	7f 93       	push	r23
    367e:	8f 93       	push	r24
    3680:	9f 93       	push	r25
    3682:	af 93       	push	r26
    3684:	bf 93       	push	r27
    3686:	ef 93       	push	r30
    3688:	ff 93       	push	r31
    368a:	e0 91 f7 21 	lds	r30, 0x21F7
    368e:	f0 91 f8 21 	lds	r31, 0x21F8
    3692:	30 97       	sbiw	r30, 0x00	; 0
    3694:	29 f0       	breq	.+10     	; 0x36a0 <__vector_55+0x3c>
    3696:	80 91 ed 22 	lds	r24, 0x22ED
    369a:	90 91 ee 22 	lds	r25, 0x22EE
    369e:	19 95       	eicall
    36a0:	ff 91       	pop	r31
    36a2:	ef 91       	pop	r30
    36a4:	bf 91       	pop	r27
    36a6:	af 91       	pop	r26
    36a8:	9f 91       	pop	r25
    36aa:	8f 91       	pop	r24
    36ac:	7f 91       	pop	r23
    36ae:	6f 91       	pop	r22
    36b0:	5f 91       	pop	r21
    36b2:	4f 91       	pop	r20
    36b4:	3f 91       	pop	r19
    36b6:	2f 91       	pop	r18
    36b8:	0f 90       	pop	r0
    36ba:	0b be       	out	0x3b, r0	; 59
    36bc:	0f 90       	pop	r0
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	0f 90       	pop	r0
    36c2:	1f 90       	pop	r1
    36c4:	18 95       	reti

000036c6 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    36c6:	1f 92       	push	r1
    36c8:	0f 92       	push	r0
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	0f 92       	push	r0
    36ce:	11 24       	eor	r1, r1
    36d0:	0b b6       	in	r0, 0x3b	; 59
    36d2:	0f 92       	push	r0
    36d4:	2f 93       	push	r18
    36d6:	3f 93       	push	r19
    36d8:	4f 93       	push	r20
    36da:	5f 93       	push	r21
    36dc:	6f 93       	push	r22
    36de:	7f 93       	push	r23
    36e0:	8f 93       	push	r24
    36e2:	9f 93       	push	r25
    36e4:	af 93       	push	r26
    36e6:	bf 93       	push	r27
    36e8:	ef 93       	push	r30
    36ea:	ff 93       	push	r31
    36ec:	e0 91 f9 21 	lds	r30, 0x21F9
    36f0:	f0 91 fa 21 	lds	r31, 0x21FA
    36f4:	30 97       	sbiw	r30, 0x00	; 0
    36f6:	29 f0       	breq	.+10     	; 0x3702 <__vector_56+0x3c>
    36f8:	80 91 ef 22 	lds	r24, 0x22EF
    36fc:	90 91 f0 22 	lds	r25, 0x22F0
    3700:	19 95       	eicall
    3702:	ff 91       	pop	r31
    3704:	ef 91       	pop	r30
    3706:	bf 91       	pop	r27
    3708:	af 91       	pop	r26
    370a:	9f 91       	pop	r25
    370c:	8f 91       	pop	r24
    370e:	7f 91       	pop	r23
    3710:	6f 91       	pop	r22
    3712:	5f 91       	pop	r21
    3714:	4f 91       	pop	r20
    3716:	3f 91       	pop	r19
    3718:	2f 91       	pop	r18
    371a:	0f 90       	pop	r0
    371c:	0b be       	out	0x3b, r0	; 59
    371e:	0f 90       	pop	r0
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	0f 90       	pop	r0
    3724:	1f 90       	pop	r1
    3726:	18 95       	reti

00003728 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    3728:	1f 92       	push	r1
    372a:	0f 92       	push	r0
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	0f 92       	push	r0
    3730:	11 24       	eor	r1, r1
    3732:	0b b6       	in	r0, 0x3b	; 59
    3734:	0f 92       	push	r0
    3736:	2f 93       	push	r18
    3738:	3f 93       	push	r19
    373a:	4f 93       	push	r20
    373c:	5f 93       	push	r21
    373e:	6f 93       	push	r22
    3740:	7f 93       	push	r23
    3742:	8f 93       	push	r24
    3744:	9f 93       	push	r25
    3746:	af 93       	push	r26
    3748:	bf 93       	push	r27
    374a:	ef 93       	push	r30
    374c:	ff 93       	push	r31
    374e:	e0 91 fb 21 	lds	r30, 0x21FB
    3752:	f0 91 fc 21 	lds	r31, 0x21FC
    3756:	30 97       	sbiw	r30, 0x00	; 0
    3758:	29 f0       	breq	.+10     	; 0x3764 <__vector_57+0x3c>
    375a:	80 91 f1 22 	lds	r24, 0x22F1
    375e:	90 91 f2 22 	lds	r25, 0x22F2
    3762:	19 95       	eicall
    3764:	ff 91       	pop	r31
    3766:	ef 91       	pop	r30
    3768:	bf 91       	pop	r27
    376a:	af 91       	pop	r26
    376c:	9f 91       	pop	r25
    376e:	8f 91       	pop	r24
    3770:	7f 91       	pop	r23
    3772:	6f 91       	pop	r22
    3774:	5f 91       	pop	r21
    3776:	4f 91       	pop	r20
    3778:	3f 91       	pop	r19
    377a:	2f 91       	pop	r18
    377c:	0f 90       	pop	r0
    377e:	0b be       	out	0x3b, r0	; 59
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	0f 90       	pop	r0
    3786:	1f 90       	pop	r1
    3788:	18 95       	reti

0000378a <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    378a:	1f 92       	push	r1
    378c:	0f 92       	push	r0
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	0f 92       	push	r0
    3792:	11 24       	eor	r1, r1
    3794:	0b b6       	in	r0, 0x3b	; 59
    3796:	0f 92       	push	r0
    3798:	2f 93       	push	r18
    379a:	3f 93       	push	r19
    379c:	4f 93       	push	r20
    379e:	5f 93       	push	r21
    37a0:	6f 93       	push	r22
    37a2:	7f 93       	push	r23
    37a4:	8f 93       	push	r24
    37a6:	9f 93       	push	r25
    37a8:	af 93       	push	r26
    37aa:	bf 93       	push	r27
    37ac:	ef 93       	push	r30
    37ae:	ff 93       	push	r31
    37b0:	e0 91 fd 21 	lds	r30, 0x21FD
    37b4:	f0 91 fe 21 	lds	r31, 0x21FE
    37b8:	30 97       	sbiw	r30, 0x00	; 0
    37ba:	29 f0       	breq	.+10     	; 0x37c6 <__vector_58+0x3c>
    37bc:	80 91 f3 22 	lds	r24, 0x22F3
    37c0:	90 91 f4 22 	lds	r25, 0x22F4
    37c4:	19 95       	eicall
    37c6:	ff 91       	pop	r31
    37c8:	ef 91       	pop	r30
    37ca:	bf 91       	pop	r27
    37cc:	af 91       	pop	r26
    37ce:	9f 91       	pop	r25
    37d0:	8f 91       	pop	r24
    37d2:	7f 91       	pop	r23
    37d4:	6f 91       	pop	r22
    37d6:	5f 91       	pop	r21
    37d8:	4f 91       	pop	r20
    37da:	3f 91       	pop	r19
    37dc:	2f 91       	pop	r18
    37de:	0f 90       	pop	r0
    37e0:	0b be       	out	0x3b, r0	; 59
    37e2:	0f 90       	pop	r0
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	0f 90       	pop	r0
    37e8:	1f 90       	pop	r1
    37ea:	18 95       	reti

000037ec <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    37ec:	1f 92       	push	r1
    37ee:	0f 92       	push	r0
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	0f 92       	push	r0
    37f4:	11 24       	eor	r1, r1
    37f6:	0b b6       	in	r0, 0x3b	; 59
    37f8:	0f 92       	push	r0
    37fa:	2f 93       	push	r18
    37fc:	3f 93       	push	r19
    37fe:	4f 93       	push	r20
    3800:	5f 93       	push	r21
    3802:	6f 93       	push	r22
    3804:	7f 93       	push	r23
    3806:	8f 93       	push	r24
    3808:	9f 93       	push	r25
    380a:	af 93       	push	r26
    380c:	bf 93       	push	r27
    380e:	ef 93       	push	r30
    3810:	ff 93       	push	r31
    3812:	e0 91 ff 21 	lds	r30, 0x21FF
    3816:	f0 91 00 22 	lds	r31, 0x2200
    381a:	30 97       	sbiw	r30, 0x00	; 0
    381c:	29 f0       	breq	.+10     	; 0x3828 <__vector_59+0x3c>
    381e:	80 91 f5 22 	lds	r24, 0x22F5
    3822:	90 91 f6 22 	lds	r25, 0x22F6
    3826:	19 95       	eicall
    3828:	ff 91       	pop	r31
    382a:	ef 91       	pop	r30
    382c:	bf 91       	pop	r27
    382e:	af 91       	pop	r26
    3830:	9f 91       	pop	r25
    3832:	8f 91       	pop	r24
    3834:	7f 91       	pop	r23
    3836:	6f 91       	pop	r22
    3838:	5f 91       	pop	r21
    383a:	4f 91       	pop	r20
    383c:	3f 91       	pop	r19
    383e:	2f 91       	pop	r18
    3840:	0f 90       	pop	r0
    3842:	0b be       	out	0x3b, r0	; 59
    3844:	0f 90       	pop	r0
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	0f 90       	pop	r0
    384a:	1f 90       	pop	r1
    384c:	18 95       	reti

0000384e <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    384e:	1f 92       	push	r1
    3850:	0f 92       	push	r0
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	0f 92       	push	r0
    3856:	11 24       	eor	r1, r1
    3858:	0b b6       	in	r0, 0x3b	; 59
    385a:	0f 92       	push	r0
    385c:	2f 93       	push	r18
    385e:	3f 93       	push	r19
    3860:	4f 93       	push	r20
    3862:	5f 93       	push	r21
    3864:	6f 93       	push	r22
    3866:	7f 93       	push	r23
    3868:	8f 93       	push	r24
    386a:	9f 93       	push	r25
    386c:	af 93       	push	r26
    386e:	bf 93       	push	r27
    3870:	ef 93       	push	r30
    3872:	ff 93       	push	r31
    3874:	e0 91 01 22 	lds	r30, 0x2201
    3878:	f0 91 02 22 	lds	r31, 0x2202
    387c:	30 97       	sbiw	r30, 0x00	; 0
    387e:	29 f0       	breq	.+10     	; 0x388a <__vector_60+0x3c>
    3880:	80 91 f7 22 	lds	r24, 0x22F7
    3884:	90 91 f8 22 	lds	r25, 0x22F8
    3888:	19 95       	eicall
    388a:	ff 91       	pop	r31
    388c:	ef 91       	pop	r30
    388e:	bf 91       	pop	r27
    3890:	af 91       	pop	r26
    3892:	9f 91       	pop	r25
    3894:	8f 91       	pop	r24
    3896:	7f 91       	pop	r23
    3898:	6f 91       	pop	r22
    389a:	5f 91       	pop	r21
    389c:	4f 91       	pop	r20
    389e:	3f 91       	pop	r19
    38a0:	2f 91       	pop	r18
    38a2:	0f 90       	pop	r0
    38a4:	0b be       	out	0x3b, r0	; 59
    38a6:	0f 90       	pop	r0
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	0f 90       	pop	r0
    38ac:	1f 90       	pop	r1
    38ae:	18 95       	reti

000038b0 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    38b0:	1f 92       	push	r1
    38b2:	0f 92       	push	r0
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	0f 92       	push	r0
    38b8:	11 24       	eor	r1, r1
    38ba:	0b b6       	in	r0, 0x3b	; 59
    38bc:	0f 92       	push	r0
    38be:	2f 93       	push	r18
    38c0:	3f 93       	push	r19
    38c2:	4f 93       	push	r20
    38c4:	5f 93       	push	r21
    38c6:	6f 93       	push	r22
    38c8:	7f 93       	push	r23
    38ca:	8f 93       	push	r24
    38cc:	9f 93       	push	r25
    38ce:	af 93       	push	r26
    38d0:	bf 93       	push	r27
    38d2:	ef 93       	push	r30
    38d4:	ff 93       	push	r31
    38d6:	e0 91 03 22 	lds	r30, 0x2203
    38da:	f0 91 04 22 	lds	r31, 0x2204
    38de:	30 97       	sbiw	r30, 0x00	; 0
    38e0:	29 f0       	breq	.+10     	; 0x38ec <__vector_61+0x3c>
    38e2:	80 91 f9 22 	lds	r24, 0x22F9
    38e6:	90 91 fa 22 	lds	r25, 0x22FA
    38ea:	19 95       	eicall
    38ec:	ff 91       	pop	r31
    38ee:	ef 91       	pop	r30
    38f0:	bf 91       	pop	r27
    38f2:	af 91       	pop	r26
    38f4:	9f 91       	pop	r25
    38f6:	8f 91       	pop	r24
    38f8:	7f 91       	pop	r23
    38fa:	6f 91       	pop	r22
    38fc:	5f 91       	pop	r21
    38fe:	4f 91       	pop	r20
    3900:	3f 91       	pop	r19
    3902:	2f 91       	pop	r18
    3904:	0f 90       	pop	r0
    3906:	0b be       	out	0x3b, r0	; 59
    3908:	0f 90       	pop	r0
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	0f 90       	pop	r0
    390e:	1f 90       	pop	r1
    3910:	18 95       	reti

00003912 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    3912:	1f 92       	push	r1
    3914:	0f 92       	push	r0
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	0f 92       	push	r0
    391a:	11 24       	eor	r1, r1
    391c:	0b b6       	in	r0, 0x3b	; 59
    391e:	0f 92       	push	r0
    3920:	2f 93       	push	r18
    3922:	3f 93       	push	r19
    3924:	4f 93       	push	r20
    3926:	5f 93       	push	r21
    3928:	6f 93       	push	r22
    392a:	7f 93       	push	r23
    392c:	8f 93       	push	r24
    392e:	9f 93       	push	r25
    3930:	af 93       	push	r26
    3932:	bf 93       	push	r27
    3934:	ef 93       	push	r30
    3936:	ff 93       	push	r31
    3938:	e0 91 05 22 	lds	r30, 0x2205
    393c:	f0 91 06 22 	lds	r31, 0x2206
    3940:	30 97       	sbiw	r30, 0x00	; 0
    3942:	29 f0       	breq	.+10     	; 0x394e <__vector_62+0x3c>
    3944:	80 91 fb 22 	lds	r24, 0x22FB
    3948:	90 91 fc 22 	lds	r25, 0x22FC
    394c:	19 95       	eicall
    394e:	ff 91       	pop	r31
    3950:	ef 91       	pop	r30
    3952:	bf 91       	pop	r27
    3954:	af 91       	pop	r26
    3956:	9f 91       	pop	r25
    3958:	8f 91       	pop	r24
    395a:	7f 91       	pop	r23
    395c:	6f 91       	pop	r22
    395e:	5f 91       	pop	r21
    3960:	4f 91       	pop	r20
    3962:	3f 91       	pop	r19
    3964:	2f 91       	pop	r18
    3966:	0f 90       	pop	r0
    3968:	0b be       	out	0x3b, r0	; 59
    396a:	0f 90       	pop	r0
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	0f 90       	pop	r0
    3970:	1f 90       	pop	r1
    3972:	18 95       	reti

00003974 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3974:	1f 92       	push	r1
    3976:	0f 92       	push	r0
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	0f 92       	push	r0
    397c:	11 24       	eor	r1, r1
    397e:	0b b6       	in	r0, 0x3b	; 59
    3980:	0f 92       	push	r0
    3982:	2f 93       	push	r18
    3984:	3f 93       	push	r19
    3986:	4f 93       	push	r20
    3988:	5f 93       	push	r21
    398a:	6f 93       	push	r22
    398c:	7f 93       	push	r23
    398e:	8f 93       	push	r24
    3990:	9f 93       	push	r25
    3992:	af 93       	push	r26
    3994:	bf 93       	push	r27
    3996:	ef 93       	push	r30
    3998:	ff 93       	push	r31
    399a:	e0 91 07 22 	lds	r30, 0x2207
    399e:	f0 91 08 22 	lds	r31, 0x2208
    39a2:	30 97       	sbiw	r30, 0x00	; 0
    39a4:	29 f0       	breq	.+10     	; 0x39b0 <__vector_63+0x3c>
    39a6:	80 91 fd 22 	lds	r24, 0x22FD
    39aa:	90 91 fe 22 	lds	r25, 0x22FE
    39ae:	19 95       	eicall
    39b0:	ff 91       	pop	r31
    39b2:	ef 91       	pop	r30
    39b4:	bf 91       	pop	r27
    39b6:	af 91       	pop	r26
    39b8:	9f 91       	pop	r25
    39ba:	8f 91       	pop	r24
    39bc:	7f 91       	pop	r23
    39be:	6f 91       	pop	r22
    39c0:	5f 91       	pop	r21
    39c2:	4f 91       	pop	r20
    39c4:	3f 91       	pop	r19
    39c6:	2f 91       	pop	r18
    39c8:	0f 90       	pop	r0
    39ca:	0b be       	out	0x3b, r0	; 59
    39cc:	0f 90       	pop	r0
    39ce:	0f be       	out	0x3f, r0	; 63
    39d0:	0f 90       	pop	r0
    39d2:	1f 90       	pop	r1
    39d4:	18 95       	reti

000039d6 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    39d6:	1f 92       	push	r1
    39d8:	0f 92       	push	r0
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	0f 92       	push	r0
    39de:	11 24       	eor	r1, r1
    39e0:	0b b6       	in	r0, 0x3b	; 59
    39e2:	0f 92       	push	r0
    39e4:	2f 93       	push	r18
    39e6:	3f 93       	push	r19
    39e8:	4f 93       	push	r20
    39ea:	5f 93       	push	r21
    39ec:	6f 93       	push	r22
    39ee:	7f 93       	push	r23
    39f0:	8f 93       	push	r24
    39f2:	9f 93       	push	r25
    39f4:	af 93       	push	r26
    39f6:	bf 93       	push	r27
    39f8:	ef 93       	push	r30
    39fa:	ff 93       	push	r31
    39fc:	e0 91 09 22 	lds	r30, 0x2209
    3a00:	f0 91 0a 22 	lds	r31, 0x220A
    3a04:	30 97       	sbiw	r30, 0x00	; 0
    3a06:	29 f0       	breq	.+10     	; 0x3a12 <__vector_64+0x3c>
    3a08:	80 91 ff 22 	lds	r24, 0x22FF
    3a0c:	90 91 00 23 	lds	r25, 0x2300
    3a10:	19 95       	eicall
    3a12:	ff 91       	pop	r31
    3a14:	ef 91       	pop	r30
    3a16:	bf 91       	pop	r27
    3a18:	af 91       	pop	r26
    3a1a:	9f 91       	pop	r25
    3a1c:	8f 91       	pop	r24
    3a1e:	7f 91       	pop	r23
    3a20:	6f 91       	pop	r22
    3a22:	5f 91       	pop	r21
    3a24:	4f 91       	pop	r20
    3a26:	3f 91       	pop	r19
    3a28:	2f 91       	pop	r18
    3a2a:	0f 90       	pop	r0
    3a2c:	0b be       	out	0x3b, r0	; 59
    3a2e:	0f 90       	pop	r0
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	0f 90       	pop	r0
    3a34:	1f 90       	pop	r1
    3a36:	18 95       	reti

00003a38 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3a38:	1f 92       	push	r1
    3a3a:	0f 92       	push	r0
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	0f 92       	push	r0
    3a40:	11 24       	eor	r1, r1
    3a42:	0b b6       	in	r0, 0x3b	; 59
    3a44:	0f 92       	push	r0
    3a46:	2f 93       	push	r18
    3a48:	3f 93       	push	r19
    3a4a:	4f 93       	push	r20
    3a4c:	5f 93       	push	r21
    3a4e:	6f 93       	push	r22
    3a50:	7f 93       	push	r23
    3a52:	8f 93       	push	r24
    3a54:	9f 93       	push	r25
    3a56:	af 93       	push	r26
    3a58:	bf 93       	push	r27
    3a5a:	ef 93       	push	r30
    3a5c:	ff 93       	push	r31
    3a5e:	e0 91 0b 22 	lds	r30, 0x220B
    3a62:	f0 91 0c 22 	lds	r31, 0x220C
    3a66:	30 97       	sbiw	r30, 0x00	; 0
    3a68:	29 f0       	breq	.+10     	; 0x3a74 <__vector_65+0x3c>
    3a6a:	80 91 01 23 	lds	r24, 0x2301
    3a6e:	90 91 02 23 	lds	r25, 0x2302
    3a72:	19 95       	eicall
    3a74:	ff 91       	pop	r31
    3a76:	ef 91       	pop	r30
    3a78:	bf 91       	pop	r27
    3a7a:	af 91       	pop	r26
    3a7c:	9f 91       	pop	r25
    3a7e:	8f 91       	pop	r24
    3a80:	7f 91       	pop	r23
    3a82:	6f 91       	pop	r22
    3a84:	5f 91       	pop	r21
    3a86:	4f 91       	pop	r20
    3a88:	3f 91       	pop	r19
    3a8a:	2f 91       	pop	r18
    3a8c:	0f 90       	pop	r0
    3a8e:	0b be       	out	0x3b, r0	; 59
    3a90:	0f 90       	pop	r0
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	0f 90       	pop	r0
    3a96:	1f 90       	pop	r1
    3a98:	18 95       	reti

00003a9a <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3a9a:	1f 92       	push	r1
    3a9c:	0f 92       	push	r0
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	0f 92       	push	r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	0b b6       	in	r0, 0x3b	; 59
    3aa6:	0f 92       	push	r0
    3aa8:	2f 93       	push	r18
    3aaa:	3f 93       	push	r19
    3aac:	4f 93       	push	r20
    3aae:	5f 93       	push	r21
    3ab0:	6f 93       	push	r22
    3ab2:	7f 93       	push	r23
    3ab4:	8f 93       	push	r24
    3ab6:	9f 93       	push	r25
    3ab8:	af 93       	push	r26
    3aba:	bf 93       	push	r27
    3abc:	ef 93       	push	r30
    3abe:	ff 93       	push	r31
    3ac0:	e0 91 0d 22 	lds	r30, 0x220D
    3ac4:	f0 91 0e 22 	lds	r31, 0x220E
    3ac8:	30 97       	sbiw	r30, 0x00	; 0
    3aca:	29 f0       	breq	.+10     	; 0x3ad6 <__vector_66+0x3c>
    3acc:	80 91 03 23 	lds	r24, 0x2303
    3ad0:	90 91 04 23 	lds	r25, 0x2304
    3ad4:	19 95       	eicall
    3ad6:	ff 91       	pop	r31
    3ad8:	ef 91       	pop	r30
    3ada:	bf 91       	pop	r27
    3adc:	af 91       	pop	r26
    3ade:	9f 91       	pop	r25
    3ae0:	8f 91       	pop	r24
    3ae2:	7f 91       	pop	r23
    3ae4:	6f 91       	pop	r22
    3ae6:	5f 91       	pop	r21
    3ae8:	4f 91       	pop	r20
    3aea:	3f 91       	pop	r19
    3aec:	2f 91       	pop	r18
    3aee:	0f 90       	pop	r0
    3af0:	0b be       	out	0x3b, r0	; 59
    3af2:	0f 90       	pop	r0
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	0f 90       	pop	r0
    3af8:	1f 90       	pop	r1
    3afa:	18 95       	reti

00003afc <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3afc:	1f 92       	push	r1
    3afe:	0f 92       	push	r0
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	0f 92       	push	r0
    3b04:	11 24       	eor	r1, r1
    3b06:	0b b6       	in	r0, 0x3b	; 59
    3b08:	0f 92       	push	r0
    3b0a:	2f 93       	push	r18
    3b0c:	3f 93       	push	r19
    3b0e:	4f 93       	push	r20
    3b10:	5f 93       	push	r21
    3b12:	6f 93       	push	r22
    3b14:	7f 93       	push	r23
    3b16:	8f 93       	push	r24
    3b18:	9f 93       	push	r25
    3b1a:	af 93       	push	r26
    3b1c:	bf 93       	push	r27
    3b1e:	ef 93       	push	r30
    3b20:	ff 93       	push	r31
    3b22:	e0 91 0f 22 	lds	r30, 0x220F
    3b26:	f0 91 10 22 	lds	r31, 0x2210
    3b2a:	30 97       	sbiw	r30, 0x00	; 0
    3b2c:	29 f0       	breq	.+10     	; 0x3b38 <__vector_67+0x3c>
    3b2e:	80 91 05 23 	lds	r24, 0x2305
    3b32:	90 91 06 23 	lds	r25, 0x2306
    3b36:	19 95       	eicall
    3b38:	ff 91       	pop	r31
    3b3a:	ef 91       	pop	r30
    3b3c:	bf 91       	pop	r27
    3b3e:	af 91       	pop	r26
    3b40:	9f 91       	pop	r25
    3b42:	8f 91       	pop	r24
    3b44:	7f 91       	pop	r23
    3b46:	6f 91       	pop	r22
    3b48:	5f 91       	pop	r21
    3b4a:	4f 91       	pop	r20
    3b4c:	3f 91       	pop	r19
    3b4e:	2f 91       	pop	r18
    3b50:	0f 90       	pop	r0
    3b52:	0b be       	out	0x3b, r0	; 59
    3b54:	0f 90       	pop	r0
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	0f 90       	pop	r0
    3b5a:	1f 90       	pop	r1
    3b5c:	18 95       	reti

00003b5e <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3b5e:	1f 92       	push	r1
    3b60:	0f 92       	push	r0
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	0f 92       	push	r0
    3b66:	11 24       	eor	r1, r1
    3b68:	0b b6       	in	r0, 0x3b	; 59
    3b6a:	0f 92       	push	r0
    3b6c:	2f 93       	push	r18
    3b6e:	3f 93       	push	r19
    3b70:	4f 93       	push	r20
    3b72:	5f 93       	push	r21
    3b74:	6f 93       	push	r22
    3b76:	7f 93       	push	r23
    3b78:	8f 93       	push	r24
    3b7a:	9f 93       	push	r25
    3b7c:	af 93       	push	r26
    3b7e:	bf 93       	push	r27
    3b80:	ef 93       	push	r30
    3b82:	ff 93       	push	r31
    3b84:	e0 91 11 22 	lds	r30, 0x2211
    3b88:	f0 91 12 22 	lds	r31, 0x2212
    3b8c:	30 97       	sbiw	r30, 0x00	; 0
    3b8e:	29 f0       	breq	.+10     	; 0x3b9a <__vector_68+0x3c>
    3b90:	80 91 07 23 	lds	r24, 0x2307
    3b94:	90 91 08 23 	lds	r25, 0x2308
    3b98:	19 95       	eicall
    3b9a:	ff 91       	pop	r31
    3b9c:	ef 91       	pop	r30
    3b9e:	bf 91       	pop	r27
    3ba0:	af 91       	pop	r26
    3ba2:	9f 91       	pop	r25
    3ba4:	8f 91       	pop	r24
    3ba6:	7f 91       	pop	r23
    3ba8:	6f 91       	pop	r22
    3baa:	5f 91       	pop	r21
    3bac:	4f 91       	pop	r20
    3bae:	3f 91       	pop	r19
    3bb0:	2f 91       	pop	r18
    3bb2:	0f 90       	pop	r0
    3bb4:	0b be       	out	0x3b, r0	; 59
    3bb6:	0f 90       	pop	r0
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	0f 90       	pop	r0
    3bbc:	1f 90       	pop	r1
    3bbe:	18 95       	reti

00003bc0 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3bc0:	1f 92       	push	r1
    3bc2:	0f 92       	push	r0
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	0f 92       	push	r0
    3bc8:	11 24       	eor	r1, r1
    3bca:	0b b6       	in	r0, 0x3b	; 59
    3bcc:	0f 92       	push	r0
    3bce:	2f 93       	push	r18
    3bd0:	3f 93       	push	r19
    3bd2:	4f 93       	push	r20
    3bd4:	5f 93       	push	r21
    3bd6:	6f 93       	push	r22
    3bd8:	7f 93       	push	r23
    3bda:	8f 93       	push	r24
    3bdc:	9f 93       	push	r25
    3bde:	af 93       	push	r26
    3be0:	bf 93       	push	r27
    3be2:	ef 93       	push	r30
    3be4:	ff 93       	push	r31
    3be6:	e0 91 13 22 	lds	r30, 0x2213
    3bea:	f0 91 14 22 	lds	r31, 0x2214
    3bee:	30 97       	sbiw	r30, 0x00	; 0
    3bf0:	29 f0       	breq	.+10     	; 0x3bfc <__vector_69+0x3c>
    3bf2:	80 91 09 23 	lds	r24, 0x2309
    3bf6:	90 91 0a 23 	lds	r25, 0x230A
    3bfa:	19 95       	eicall
    3bfc:	ff 91       	pop	r31
    3bfe:	ef 91       	pop	r30
    3c00:	bf 91       	pop	r27
    3c02:	af 91       	pop	r26
    3c04:	9f 91       	pop	r25
    3c06:	8f 91       	pop	r24
    3c08:	7f 91       	pop	r23
    3c0a:	6f 91       	pop	r22
    3c0c:	5f 91       	pop	r21
    3c0e:	4f 91       	pop	r20
    3c10:	3f 91       	pop	r19
    3c12:	2f 91       	pop	r18
    3c14:	0f 90       	pop	r0
    3c16:	0b be       	out	0x3b, r0	; 59
    3c18:	0f 90       	pop	r0
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	0f 90       	pop	r0
    3c1e:	1f 90       	pop	r1
    3c20:	18 95       	reti

00003c22 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3c22:	1f 92       	push	r1
    3c24:	0f 92       	push	r0
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	0f 92       	push	r0
    3c2a:	11 24       	eor	r1, r1
    3c2c:	0b b6       	in	r0, 0x3b	; 59
    3c2e:	0f 92       	push	r0
    3c30:	2f 93       	push	r18
    3c32:	3f 93       	push	r19
    3c34:	4f 93       	push	r20
    3c36:	5f 93       	push	r21
    3c38:	6f 93       	push	r22
    3c3a:	7f 93       	push	r23
    3c3c:	8f 93       	push	r24
    3c3e:	9f 93       	push	r25
    3c40:	af 93       	push	r26
    3c42:	bf 93       	push	r27
    3c44:	ef 93       	push	r30
    3c46:	ff 93       	push	r31
    3c48:	e0 91 15 22 	lds	r30, 0x2215
    3c4c:	f0 91 16 22 	lds	r31, 0x2216
    3c50:	30 97       	sbiw	r30, 0x00	; 0
    3c52:	29 f0       	breq	.+10     	; 0x3c5e <__vector_70+0x3c>
    3c54:	80 91 0b 23 	lds	r24, 0x230B
    3c58:	90 91 0c 23 	lds	r25, 0x230C
    3c5c:	19 95       	eicall
    3c5e:	ff 91       	pop	r31
    3c60:	ef 91       	pop	r30
    3c62:	bf 91       	pop	r27
    3c64:	af 91       	pop	r26
    3c66:	9f 91       	pop	r25
    3c68:	8f 91       	pop	r24
    3c6a:	7f 91       	pop	r23
    3c6c:	6f 91       	pop	r22
    3c6e:	5f 91       	pop	r21
    3c70:	4f 91       	pop	r20
    3c72:	3f 91       	pop	r19
    3c74:	2f 91       	pop	r18
    3c76:	0f 90       	pop	r0
    3c78:	0b be       	out	0x3b, r0	; 59
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3c84:	1f 92       	push	r1
    3c86:	0f 92       	push	r0
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	0f 92       	push	r0
    3c8c:	11 24       	eor	r1, r1
    3c8e:	0b b6       	in	r0, 0x3b	; 59
    3c90:	0f 92       	push	r0
    3c92:	2f 93       	push	r18
    3c94:	3f 93       	push	r19
    3c96:	4f 93       	push	r20
    3c98:	5f 93       	push	r21
    3c9a:	6f 93       	push	r22
    3c9c:	7f 93       	push	r23
    3c9e:	8f 93       	push	r24
    3ca0:	9f 93       	push	r25
    3ca2:	af 93       	push	r26
    3ca4:	bf 93       	push	r27
    3ca6:	ef 93       	push	r30
    3ca8:	ff 93       	push	r31
    3caa:	e0 91 17 22 	lds	r30, 0x2217
    3cae:	f0 91 18 22 	lds	r31, 0x2218
    3cb2:	30 97       	sbiw	r30, 0x00	; 0
    3cb4:	29 f0       	breq	.+10     	; 0x3cc0 <__vector_71+0x3c>
    3cb6:	80 91 0d 23 	lds	r24, 0x230D
    3cba:	90 91 0e 23 	lds	r25, 0x230E
    3cbe:	19 95       	eicall
    3cc0:	ff 91       	pop	r31
    3cc2:	ef 91       	pop	r30
    3cc4:	bf 91       	pop	r27
    3cc6:	af 91       	pop	r26
    3cc8:	9f 91       	pop	r25
    3cca:	8f 91       	pop	r24
    3ccc:	7f 91       	pop	r23
    3cce:	6f 91       	pop	r22
    3cd0:	5f 91       	pop	r21
    3cd2:	4f 91       	pop	r20
    3cd4:	3f 91       	pop	r19
    3cd6:	2f 91       	pop	r18
    3cd8:	0f 90       	pop	r0
    3cda:	0b be       	out	0x3b, r0	; 59
    3cdc:	0f 90       	pop	r0
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	0f 90       	pop	r0
    3ce2:	1f 90       	pop	r1
    3ce4:	18 95       	reti

00003ce6 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3ce6:	1f 92       	push	r1
    3ce8:	0f 92       	push	r0
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	0f 92       	push	r0
    3cee:	11 24       	eor	r1, r1
    3cf0:	0b b6       	in	r0, 0x3b	; 59
    3cf2:	0f 92       	push	r0
    3cf4:	2f 93       	push	r18
    3cf6:	3f 93       	push	r19
    3cf8:	4f 93       	push	r20
    3cfa:	5f 93       	push	r21
    3cfc:	6f 93       	push	r22
    3cfe:	7f 93       	push	r23
    3d00:	8f 93       	push	r24
    3d02:	9f 93       	push	r25
    3d04:	af 93       	push	r26
    3d06:	bf 93       	push	r27
    3d08:	ef 93       	push	r30
    3d0a:	ff 93       	push	r31
    3d0c:	e0 91 19 22 	lds	r30, 0x2219
    3d10:	f0 91 1a 22 	lds	r31, 0x221A
    3d14:	30 97       	sbiw	r30, 0x00	; 0
    3d16:	29 f0       	breq	.+10     	; 0x3d22 <__vector_72+0x3c>
    3d18:	80 91 0f 23 	lds	r24, 0x230F
    3d1c:	90 91 10 23 	lds	r25, 0x2310
    3d20:	19 95       	eicall
    3d22:	ff 91       	pop	r31
    3d24:	ef 91       	pop	r30
    3d26:	bf 91       	pop	r27
    3d28:	af 91       	pop	r26
    3d2a:	9f 91       	pop	r25
    3d2c:	8f 91       	pop	r24
    3d2e:	7f 91       	pop	r23
    3d30:	6f 91       	pop	r22
    3d32:	5f 91       	pop	r21
    3d34:	4f 91       	pop	r20
    3d36:	3f 91       	pop	r19
    3d38:	2f 91       	pop	r18
    3d3a:	0f 90       	pop	r0
    3d3c:	0b be       	out	0x3b, r0	; 59
    3d3e:	0f 90       	pop	r0
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	0f 90       	pop	r0
    3d44:	1f 90       	pop	r1
    3d46:	18 95       	reti

00003d48 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3d48:	1f 92       	push	r1
    3d4a:	0f 92       	push	r0
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	0f 92       	push	r0
    3d50:	11 24       	eor	r1, r1
    3d52:	0b b6       	in	r0, 0x3b	; 59
    3d54:	0f 92       	push	r0
    3d56:	2f 93       	push	r18
    3d58:	3f 93       	push	r19
    3d5a:	4f 93       	push	r20
    3d5c:	5f 93       	push	r21
    3d5e:	6f 93       	push	r22
    3d60:	7f 93       	push	r23
    3d62:	8f 93       	push	r24
    3d64:	9f 93       	push	r25
    3d66:	af 93       	push	r26
    3d68:	bf 93       	push	r27
    3d6a:	ef 93       	push	r30
    3d6c:	ff 93       	push	r31
    3d6e:	e0 91 1b 22 	lds	r30, 0x221B
    3d72:	f0 91 1c 22 	lds	r31, 0x221C
    3d76:	30 97       	sbiw	r30, 0x00	; 0
    3d78:	29 f0       	breq	.+10     	; 0x3d84 <__vector_73+0x3c>
    3d7a:	80 91 11 23 	lds	r24, 0x2311
    3d7e:	90 91 12 23 	lds	r25, 0x2312
    3d82:	19 95       	eicall
    3d84:	ff 91       	pop	r31
    3d86:	ef 91       	pop	r30
    3d88:	bf 91       	pop	r27
    3d8a:	af 91       	pop	r26
    3d8c:	9f 91       	pop	r25
    3d8e:	8f 91       	pop	r24
    3d90:	7f 91       	pop	r23
    3d92:	6f 91       	pop	r22
    3d94:	5f 91       	pop	r21
    3d96:	4f 91       	pop	r20
    3d98:	3f 91       	pop	r19
    3d9a:	2f 91       	pop	r18
    3d9c:	0f 90       	pop	r0
    3d9e:	0b be       	out	0x3b, r0	; 59
    3da0:	0f 90       	pop	r0
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	0f 90       	pop	r0
    3da6:	1f 90       	pop	r1
    3da8:	18 95       	reti

00003daa <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3daa:	1f 92       	push	r1
    3dac:	0f 92       	push	r0
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	0f 92       	push	r0
    3db2:	11 24       	eor	r1, r1
    3db4:	0b b6       	in	r0, 0x3b	; 59
    3db6:	0f 92       	push	r0
    3db8:	2f 93       	push	r18
    3dba:	3f 93       	push	r19
    3dbc:	4f 93       	push	r20
    3dbe:	5f 93       	push	r21
    3dc0:	6f 93       	push	r22
    3dc2:	7f 93       	push	r23
    3dc4:	8f 93       	push	r24
    3dc6:	9f 93       	push	r25
    3dc8:	af 93       	push	r26
    3dca:	bf 93       	push	r27
    3dcc:	ef 93       	push	r30
    3dce:	ff 93       	push	r31
    3dd0:	e0 91 1d 22 	lds	r30, 0x221D
    3dd4:	f0 91 1e 22 	lds	r31, 0x221E
    3dd8:	30 97       	sbiw	r30, 0x00	; 0
    3dda:	29 f0       	breq	.+10     	; 0x3de6 <__vector_74+0x3c>
    3ddc:	80 91 13 23 	lds	r24, 0x2313
    3de0:	90 91 14 23 	lds	r25, 0x2314
    3de4:	19 95       	eicall
    3de6:	ff 91       	pop	r31
    3de8:	ef 91       	pop	r30
    3dea:	bf 91       	pop	r27
    3dec:	af 91       	pop	r26
    3dee:	9f 91       	pop	r25
    3df0:	8f 91       	pop	r24
    3df2:	7f 91       	pop	r23
    3df4:	6f 91       	pop	r22
    3df6:	5f 91       	pop	r21
    3df8:	4f 91       	pop	r20
    3dfa:	3f 91       	pop	r19
    3dfc:	2f 91       	pop	r18
    3dfe:	0f 90       	pop	r0
    3e00:	0b be       	out	0x3b, r0	; 59
    3e02:	0f 90       	pop	r0
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	0f 90       	pop	r0
    3e08:	1f 90       	pop	r1
    3e0a:	18 95       	reti

00003e0c <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3e0c:	1f 92       	push	r1
    3e0e:	0f 92       	push	r0
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	0f 92       	push	r0
    3e14:	11 24       	eor	r1, r1
    3e16:	0b b6       	in	r0, 0x3b	; 59
    3e18:	0f 92       	push	r0
    3e1a:	2f 93       	push	r18
    3e1c:	3f 93       	push	r19
    3e1e:	4f 93       	push	r20
    3e20:	5f 93       	push	r21
    3e22:	6f 93       	push	r22
    3e24:	7f 93       	push	r23
    3e26:	8f 93       	push	r24
    3e28:	9f 93       	push	r25
    3e2a:	af 93       	push	r26
    3e2c:	bf 93       	push	r27
    3e2e:	ef 93       	push	r30
    3e30:	ff 93       	push	r31
    3e32:	e0 91 23 22 	lds	r30, 0x2223
    3e36:	f0 91 24 22 	lds	r31, 0x2224
    3e3a:	30 97       	sbiw	r30, 0x00	; 0
    3e3c:	29 f0       	breq	.+10     	; 0x3e48 <__vector_77+0x3c>
    3e3e:	80 91 19 23 	lds	r24, 0x2319
    3e42:	90 91 1a 23 	lds	r25, 0x231A
    3e46:	19 95       	eicall
    3e48:	ff 91       	pop	r31
    3e4a:	ef 91       	pop	r30
    3e4c:	bf 91       	pop	r27
    3e4e:	af 91       	pop	r26
    3e50:	9f 91       	pop	r25
    3e52:	8f 91       	pop	r24
    3e54:	7f 91       	pop	r23
    3e56:	6f 91       	pop	r22
    3e58:	5f 91       	pop	r21
    3e5a:	4f 91       	pop	r20
    3e5c:	3f 91       	pop	r19
    3e5e:	2f 91       	pop	r18
    3e60:	0f 90       	pop	r0
    3e62:	0b be       	out	0x3b, r0	; 59
    3e64:	0f 90       	pop	r0
    3e66:	0f be       	out	0x3f, r0	; 63
    3e68:	0f 90       	pop	r0
    3e6a:	1f 90       	pop	r1
    3e6c:	18 95       	reti

00003e6e <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3e6e:	1f 92       	push	r1
    3e70:	0f 92       	push	r0
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	0f 92       	push	r0
    3e76:	11 24       	eor	r1, r1
    3e78:	0b b6       	in	r0, 0x3b	; 59
    3e7a:	0f 92       	push	r0
    3e7c:	2f 93       	push	r18
    3e7e:	3f 93       	push	r19
    3e80:	4f 93       	push	r20
    3e82:	5f 93       	push	r21
    3e84:	6f 93       	push	r22
    3e86:	7f 93       	push	r23
    3e88:	8f 93       	push	r24
    3e8a:	9f 93       	push	r25
    3e8c:	af 93       	push	r26
    3e8e:	bf 93       	push	r27
    3e90:	ef 93       	push	r30
    3e92:	ff 93       	push	r31
    3e94:	e0 91 25 22 	lds	r30, 0x2225
    3e98:	f0 91 26 22 	lds	r31, 0x2226
    3e9c:	30 97       	sbiw	r30, 0x00	; 0
    3e9e:	29 f0       	breq	.+10     	; 0x3eaa <__vector_78+0x3c>
    3ea0:	80 91 1b 23 	lds	r24, 0x231B
    3ea4:	90 91 1c 23 	lds	r25, 0x231C
    3ea8:	19 95       	eicall
    3eaa:	ff 91       	pop	r31
    3eac:	ef 91       	pop	r30
    3eae:	bf 91       	pop	r27
    3eb0:	af 91       	pop	r26
    3eb2:	9f 91       	pop	r25
    3eb4:	8f 91       	pop	r24
    3eb6:	7f 91       	pop	r23
    3eb8:	6f 91       	pop	r22
    3eba:	5f 91       	pop	r21
    3ebc:	4f 91       	pop	r20
    3ebe:	3f 91       	pop	r19
    3ec0:	2f 91       	pop	r18
    3ec2:	0f 90       	pop	r0
    3ec4:	0b be       	out	0x3b, r0	; 59
    3ec6:	0f 90       	pop	r0
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	0f 90       	pop	r0
    3ecc:	1f 90       	pop	r1
    3ece:	18 95       	reti

00003ed0 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3ed0:	1f 92       	push	r1
    3ed2:	0f 92       	push	r0
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	0f 92       	push	r0
    3ed8:	11 24       	eor	r1, r1
    3eda:	0b b6       	in	r0, 0x3b	; 59
    3edc:	0f 92       	push	r0
    3ede:	2f 93       	push	r18
    3ee0:	3f 93       	push	r19
    3ee2:	4f 93       	push	r20
    3ee4:	5f 93       	push	r21
    3ee6:	6f 93       	push	r22
    3ee8:	7f 93       	push	r23
    3eea:	8f 93       	push	r24
    3eec:	9f 93       	push	r25
    3eee:	af 93       	push	r26
    3ef0:	bf 93       	push	r27
    3ef2:	ef 93       	push	r30
    3ef4:	ff 93       	push	r31
    3ef6:	e0 91 27 22 	lds	r30, 0x2227
    3efa:	f0 91 28 22 	lds	r31, 0x2228
    3efe:	30 97       	sbiw	r30, 0x00	; 0
    3f00:	29 f0       	breq	.+10     	; 0x3f0c <__vector_79+0x3c>
    3f02:	80 91 1d 23 	lds	r24, 0x231D
    3f06:	90 91 1e 23 	lds	r25, 0x231E
    3f0a:	19 95       	eicall
    3f0c:	ff 91       	pop	r31
    3f0e:	ef 91       	pop	r30
    3f10:	bf 91       	pop	r27
    3f12:	af 91       	pop	r26
    3f14:	9f 91       	pop	r25
    3f16:	8f 91       	pop	r24
    3f18:	7f 91       	pop	r23
    3f1a:	6f 91       	pop	r22
    3f1c:	5f 91       	pop	r21
    3f1e:	4f 91       	pop	r20
    3f20:	3f 91       	pop	r19
    3f22:	2f 91       	pop	r18
    3f24:	0f 90       	pop	r0
    3f26:	0b be       	out	0x3b, r0	; 59
    3f28:	0f 90       	pop	r0
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	0f 90       	pop	r0
    3f2e:	1f 90       	pop	r1
    3f30:	18 95       	reti

00003f32 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    3f32:	1f 92       	push	r1
    3f34:	0f 92       	push	r0
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	0f 92       	push	r0
    3f3a:	11 24       	eor	r1, r1
    3f3c:	0b b6       	in	r0, 0x3b	; 59
    3f3e:	0f 92       	push	r0
    3f40:	2f 93       	push	r18
    3f42:	3f 93       	push	r19
    3f44:	4f 93       	push	r20
    3f46:	5f 93       	push	r21
    3f48:	6f 93       	push	r22
    3f4a:	7f 93       	push	r23
    3f4c:	8f 93       	push	r24
    3f4e:	9f 93       	push	r25
    3f50:	af 93       	push	r26
    3f52:	bf 93       	push	r27
    3f54:	ef 93       	push	r30
    3f56:	ff 93       	push	r31
    3f58:	e0 91 29 22 	lds	r30, 0x2229
    3f5c:	f0 91 2a 22 	lds	r31, 0x222A
    3f60:	30 97       	sbiw	r30, 0x00	; 0
    3f62:	29 f0       	breq	.+10     	; 0x3f6e <__vector_80+0x3c>
    3f64:	80 91 1f 23 	lds	r24, 0x231F
    3f68:	90 91 20 23 	lds	r25, 0x2320
    3f6c:	19 95       	eicall
    3f6e:	ff 91       	pop	r31
    3f70:	ef 91       	pop	r30
    3f72:	bf 91       	pop	r27
    3f74:	af 91       	pop	r26
    3f76:	9f 91       	pop	r25
    3f78:	8f 91       	pop	r24
    3f7a:	7f 91       	pop	r23
    3f7c:	6f 91       	pop	r22
    3f7e:	5f 91       	pop	r21
    3f80:	4f 91       	pop	r20
    3f82:	3f 91       	pop	r19
    3f84:	2f 91       	pop	r18
    3f86:	0f 90       	pop	r0
    3f88:	0b be       	out	0x3b, r0	; 59
    3f8a:	0f 90       	pop	r0
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	0f 90       	pop	r0
    3f90:	1f 90       	pop	r1
    3f92:	18 95       	reti

00003f94 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3f94:	1f 92       	push	r1
    3f96:	0f 92       	push	r0
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	0f 92       	push	r0
    3f9c:	11 24       	eor	r1, r1
    3f9e:	0b b6       	in	r0, 0x3b	; 59
    3fa0:	0f 92       	push	r0
    3fa2:	2f 93       	push	r18
    3fa4:	3f 93       	push	r19
    3fa6:	4f 93       	push	r20
    3fa8:	5f 93       	push	r21
    3faa:	6f 93       	push	r22
    3fac:	7f 93       	push	r23
    3fae:	8f 93       	push	r24
    3fb0:	9f 93       	push	r25
    3fb2:	af 93       	push	r26
    3fb4:	bf 93       	push	r27
    3fb6:	ef 93       	push	r30
    3fb8:	ff 93       	push	r31
    3fba:	e0 91 2b 22 	lds	r30, 0x222B
    3fbe:	f0 91 2c 22 	lds	r31, 0x222C
    3fc2:	30 97       	sbiw	r30, 0x00	; 0
    3fc4:	29 f0       	breq	.+10     	; 0x3fd0 <__vector_81+0x3c>
    3fc6:	80 91 21 23 	lds	r24, 0x2321
    3fca:	90 91 22 23 	lds	r25, 0x2322
    3fce:	19 95       	eicall
    3fd0:	ff 91       	pop	r31
    3fd2:	ef 91       	pop	r30
    3fd4:	bf 91       	pop	r27
    3fd6:	af 91       	pop	r26
    3fd8:	9f 91       	pop	r25
    3fda:	8f 91       	pop	r24
    3fdc:	7f 91       	pop	r23
    3fde:	6f 91       	pop	r22
    3fe0:	5f 91       	pop	r21
    3fe2:	4f 91       	pop	r20
    3fe4:	3f 91       	pop	r19
    3fe6:	2f 91       	pop	r18
    3fe8:	0f 90       	pop	r0
    3fea:	0b be       	out	0x3b, r0	; 59
    3fec:	0f 90       	pop	r0
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	0f 90       	pop	r0
    3ff2:	1f 90       	pop	r1
    3ff4:	18 95       	reti

00003ff6 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3ff6:	1f 92       	push	r1
    3ff8:	0f 92       	push	r0
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	0f 92       	push	r0
    3ffe:	11 24       	eor	r1, r1
    4000:	0b b6       	in	r0, 0x3b	; 59
    4002:	0f 92       	push	r0
    4004:	2f 93       	push	r18
    4006:	3f 93       	push	r19
    4008:	4f 93       	push	r20
    400a:	5f 93       	push	r21
    400c:	6f 93       	push	r22
    400e:	7f 93       	push	r23
    4010:	8f 93       	push	r24
    4012:	9f 93       	push	r25
    4014:	af 93       	push	r26
    4016:	bf 93       	push	r27
    4018:	ef 93       	push	r30
    401a:	ff 93       	push	r31
    401c:	e0 91 2d 22 	lds	r30, 0x222D
    4020:	f0 91 2e 22 	lds	r31, 0x222E
    4024:	30 97       	sbiw	r30, 0x00	; 0
    4026:	29 f0       	breq	.+10     	; 0x4032 <__stack+0x33>
    4028:	80 91 23 23 	lds	r24, 0x2323
    402c:	90 91 24 23 	lds	r25, 0x2324
    4030:	19 95       	eicall
    4032:	ff 91       	pop	r31
    4034:	ef 91       	pop	r30
    4036:	bf 91       	pop	r27
    4038:	af 91       	pop	r26
    403a:	9f 91       	pop	r25
    403c:	8f 91       	pop	r24
    403e:	7f 91       	pop	r23
    4040:	6f 91       	pop	r22
    4042:	5f 91       	pop	r21
    4044:	4f 91       	pop	r20
    4046:	3f 91       	pop	r19
    4048:	2f 91       	pop	r18
    404a:	0f 90       	pop	r0
    404c:	0b be       	out	0x3b, r0	; 59
    404e:	0f 90       	pop	r0
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	0f 90       	pop	r0
    4054:	1f 90       	pop	r1
    4056:	18 95       	reti

00004058 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    4058:	1f 92       	push	r1
    405a:	0f 92       	push	r0
    405c:	0f b6       	in	r0, 0x3f	; 63
    405e:	0f 92       	push	r0
    4060:	11 24       	eor	r1, r1
    4062:	0b b6       	in	r0, 0x3b	; 59
    4064:	0f 92       	push	r0
    4066:	2f 93       	push	r18
    4068:	3f 93       	push	r19
    406a:	4f 93       	push	r20
    406c:	5f 93       	push	r21
    406e:	6f 93       	push	r22
    4070:	7f 93       	push	r23
    4072:	8f 93       	push	r24
    4074:	9f 93       	push	r25
    4076:	af 93       	push	r26
    4078:	bf 93       	push	r27
    407a:	ef 93       	push	r30
    407c:	ff 93       	push	r31
    407e:	e0 91 2f 22 	lds	r30, 0x222F
    4082:	f0 91 30 22 	lds	r31, 0x2230
    4086:	30 97       	sbiw	r30, 0x00	; 0
    4088:	29 f0       	breq	.+10     	; 0x4094 <__vector_83+0x3c>
    408a:	80 91 25 23 	lds	r24, 0x2325
    408e:	90 91 26 23 	lds	r25, 0x2326
    4092:	19 95       	eicall
    4094:	ff 91       	pop	r31
    4096:	ef 91       	pop	r30
    4098:	bf 91       	pop	r27
    409a:	af 91       	pop	r26
    409c:	9f 91       	pop	r25
    409e:	8f 91       	pop	r24
    40a0:	7f 91       	pop	r23
    40a2:	6f 91       	pop	r22
    40a4:	5f 91       	pop	r21
    40a6:	4f 91       	pop	r20
    40a8:	3f 91       	pop	r19
    40aa:	2f 91       	pop	r18
    40ac:	0f 90       	pop	r0
    40ae:	0b be       	out	0x3b, r0	; 59
    40b0:	0f 90       	pop	r0
    40b2:	0f be       	out	0x3f, r0	; 63
    40b4:	0f 90       	pop	r0
    40b6:	1f 90       	pop	r1
    40b8:	18 95       	reti

000040ba <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    40ba:	1f 92       	push	r1
    40bc:	0f 92       	push	r0
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	0f 92       	push	r0
    40c2:	11 24       	eor	r1, r1
    40c4:	0b b6       	in	r0, 0x3b	; 59
    40c6:	0f 92       	push	r0
    40c8:	2f 93       	push	r18
    40ca:	3f 93       	push	r19
    40cc:	4f 93       	push	r20
    40ce:	5f 93       	push	r21
    40d0:	6f 93       	push	r22
    40d2:	7f 93       	push	r23
    40d4:	8f 93       	push	r24
    40d6:	9f 93       	push	r25
    40d8:	af 93       	push	r26
    40da:	bf 93       	push	r27
    40dc:	ef 93       	push	r30
    40de:	ff 93       	push	r31
    40e0:	e0 91 31 22 	lds	r30, 0x2231
    40e4:	f0 91 32 22 	lds	r31, 0x2232
    40e8:	30 97       	sbiw	r30, 0x00	; 0
    40ea:	29 f0       	breq	.+10     	; 0x40f6 <__vector_84+0x3c>
    40ec:	80 91 27 23 	lds	r24, 0x2327
    40f0:	90 91 28 23 	lds	r25, 0x2328
    40f4:	19 95       	eicall
    40f6:	ff 91       	pop	r31
    40f8:	ef 91       	pop	r30
    40fa:	bf 91       	pop	r27
    40fc:	af 91       	pop	r26
    40fe:	9f 91       	pop	r25
    4100:	8f 91       	pop	r24
    4102:	7f 91       	pop	r23
    4104:	6f 91       	pop	r22
    4106:	5f 91       	pop	r21
    4108:	4f 91       	pop	r20
    410a:	3f 91       	pop	r19
    410c:	2f 91       	pop	r18
    410e:	0f 90       	pop	r0
    4110:	0b be       	out	0x3b, r0	; 59
    4112:	0f 90       	pop	r0
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	0f 90       	pop	r0
    4118:	1f 90       	pop	r1
    411a:	18 95       	reti

0000411c <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    411c:	1f 92       	push	r1
    411e:	0f 92       	push	r0
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	0f 92       	push	r0
    4124:	11 24       	eor	r1, r1
    4126:	0b b6       	in	r0, 0x3b	; 59
    4128:	0f 92       	push	r0
    412a:	2f 93       	push	r18
    412c:	3f 93       	push	r19
    412e:	4f 93       	push	r20
    4130:	5f 93       	push	r21
    4132:	6f 93       	push	r22
    4134:	7f 93       	push	r23
    4136:	8f 93       	push	r24
    4138:	9f 93       	push	r25
    413a:	af 93       	push	r26
    413c:	bf 93       	push	r27
    413e:	ef 93       	push	r30
    4140:	ff 93       	push	r31
    4142:	e0 91 33 22 	lds	r30, 0x2233
    4146:	f0 91 34 22 	lds	r31, 0x2234
    414a:	30 97       	sbiw	r30, 0x00	; 0
    414c:	29 f0       	breq	.+10     	; 0x4158 <__vector_85+0x3c>
    414e:	80 91 29 23 	lds	r24, 0x2329
    4152:	90 91 2a 23 	lds	r25, 0x232A
    4156:	19 95       	eicall
    4158:	ff 91       	pop	r31
    415a:	ef 91       	pop	r30
    415c:	bf 91       	pop	r27
    415e:	af 91       	pop	r26
    4160:	9f 91       	pop	r25
    4162:	8f 91       	pop	r24
    4164:	7f 91       	pop	r23
    4166:	6f 91       	pop	r22
    4168:	5f 91       	pop	r21
    416a:	4f 91       	pop	r20
    416c:	3f 91       	pop	r19
    416e:	2f 91       	pop	r18
    4170:	0f 90       	pop	r0
    4172:	0b be       	out	0x3b, r0	; 59
    4174:	0f 90       	pop	r0
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	0f 90       	pop	r0
    417a:	1f 90       	pop	r1
    417c:	18 95       	reti

0000417e <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    417e:	1f 92       	push	r1
    4180:	0f 92       	push	r0
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	0f 92       	push	r0
    4186:	11 24       	eor	r1, r1
    4188:	0b b6       	in	r0, 0x3b	; 59
    418a:	0f 92       	push	r0
    418c:	2f 93       	push	r18
    418e:	3f 93       	push	r19
    4190:	4f 93       	push	r20
    4192:	5f 93       	push	r21
    4194:	6f 93       	push	r22
    4196:	7f 93       	push	r23
    4198:	8f 93       	push	r24
    419a:	9f 93       	push	r25
    419c:	af 93       	push	r26
    419e:	bf 93       	push	r27
    41a0:	ef 93       	push	r30
    41a2:	ff 93       	push	r31
    41a4:	e0 91 35 22 	lds	r30, 0x2235
    41a8:	f0 91 36 22 	lds	r31, 0x2236
    41ac:	30 97       	sbiw	r30, 0x00	; 0
    41ae:	29 f0       	breq	.+10     	; 0x41ba <__vector_86+0x3c>
    41b0:	80 91 2b 23 	lds	r24, 0x232B
    41b4:	90 91 2c 23 	lds	r25, 0x232C
    41b8:	19 95       	eicall
    41ba:	ff 91       	pop	r31
    41bc:	ef 91       	pop	r30
    41be:	bf 91       	pop	r27
    41c0:	af 91       	pop	r26
    41c2:	9f 91       	pop	r25
    41c4:	8f 91       	pop	r24
    41c6:	7f 91       	pop	r23
    41c8:	6f 91       	pop	r22
    41ca:	5f 91       	pop	r21
    41cc:	4f 91       	pop	r20
    41ce:	3f 91       	pop	r19
    41d0:	2f 91       	pop	r18
    41d2:	0f 90       	pop	r0
    41d4:	0b be       	out	0x3b, r0	; 59
    41d6:	0f 90       	pop	r0
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	0f 90       	pop	r0
    41dc:	1f 90       	pop	r1
    41de:	18 95       	reti

000041e0 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    41e0:	1f 92       	push	r1
    41e2:	0f 92       	push	r0
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	0f 92       	push	r0
    41e8:	11 24       	eor	r1, r1
    41ea:	0b b6       	in	r0, 0x3b	; 59
    41ec:	0f 92       	push	r0
    41ee:	2f 93       	push	r18
    41f0:	3f 93       	push	r19
    41f2:	4f 93       	push	r20
    41f4:	5f 93       	push	r21
    41f6:	6f 93       	push	r22
    41f8:	7f 93       	push	r23
    41fa:	8f 93       	push	r24
    41fc:	9f 93       	push	r25
    41fe:	af 93       	push	r26
    4200:	bf 93       	push	r27
    4202:	ef 93       	push	r30
    4204:	ff 93       	push	r31
    4206:	e0 91 37 22 	lds	r30, 0x2237
    420a:	f0 91 38 22 	lds	r31, 0x2238
    420e:	30 97       	sbiw	r30, 0x00	; 0
    4210:	29 f0       	breq	.+10     	; 0x421c <__vector_87+0x3c>
    4212:	80 91 2d 23 	lds	r24, 0x232D
    4216:	90 91 2e 23 	lds	r25, 0x232E
    421a:	19 95       	eicall
    421c:	ff 91       	pop	r31
    421e:	ef 91       	pop	r30
    4220:	bf 91       	pop	r27
    4222:	af 91       	pop	r26
    4224:	9f 91       	pop	r25
    4226:	8f 91       	pop	r24
    4228:	7f 91       	pop	r23
    422a:	6f 91       	pop	r22
    422c:	5f 91       	pop	r21
    422e:	4f 91       	pop	r20
    4230:	3f 91       	pop	r19
    4232:	2f 91       	pop	r18
    4234:	0f 90       	pop	r0
    4236:	0b be       	out	0x3b, r0	; 59
    4238:	0f 90       	pop	r0
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	0f 90       	pop	r0
    423e:	1f 90       	pop	r1
    4240:	18 95       	reti

00004242 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4242:	1f 92       	push	r1
    4244:	0f 92       	push	r0
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	0f 92       	push	r0
    424a:	11 24       	eor	r1, r1
    424c:	0b b6       	in	r0, 0x3b	; 59
    424e:	0f 92       	push	r0
    4250:	2f 93       	push	r18
    4252:	3f 93       	push	r19
    4254:	4f 93       	push	r20
    4256:	5f 93       	push	r21
    4258:	6f 93       	push	r22
    425a:	7f 93       	push	r23
    425c:	8f 93       	push	r24
    425e:	9f 93       	push	r25
    4260:	af 93       	push	r26
    4262:	bf 93       	push	r27
    4264:	ef 93       	push	r30
    4266:	ff 93       	push	r31
    4268:	e0 91 39 22 	lds	r30, 0x2239
    426c:	f0 91 3a 22 	lds	r31, 0x223A
    4270:	30 97       	sbiw	r30, 0x00	; 0
    4272:	29 f0       	breq	.+10     	; 0x427e <__vector_88+0x3c>
    4274:	80 91 2f 23 	lds	r24, 0x232F
    4278:	90 91 30 23 	lds	r25, 0x2330
    427c:	19 95       	eicall
    427e:	ff 91       	pop	r31
    4280:	ef 91       	pop	r30
    4282:	bf 91       	pop	r27
    4284:	af 91       	pop	r26
    4286:	9f 91       	pop	r25
    4288:	8f 91       	pop	r24
    428a:	7f 91       	pop	r23
    428c:	6f 91       	pop	r22
    428e:	5f 91       	pop	r21
    4290:	4f 91       	pop	r20
    4292:	3f 91       	pop	r19
    4294:	2f 91       	pop	r18
    4296:	0f 90       	pop	r0
    4298:	0b be       	out	0x3b, r0	; 59
    429a:	0f 90       	pop	r0
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	0f 90       	pop	r0
    42a0:	1f 90       	pop	r1
    42a2:	18 95       	reti

000042a4 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    42a4:	1f 92       	push	r1
    42a6:	0f 92       	push	r0
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	0f 92       	push	r0
    42ac:	11 24       	eor	r1, r1
    42ae:	0b b6       	in	r0, 0x3b	; 59
    42b0:	0f 92       	push	r0
    42b2:	2f 93       	push	r18
    42b4:	3f 93       	push	r19
    42b6:	4f 93       	push	r20
    42b8:	5f 93       	push	r21
    42ba:	6f 93       	push	r22
    42bc:	7f 93       	push	r23
    42be:	8f 93       	push	r24
    42c0:	9f 93       	push	r25
    42c2:	af 93       	push	r26
    42c4:	bf 93       	push	r27
    42c6:	ef 93       	push	r30
    42c8:	ff 93       	push	r31
    42ca:	e0 91 3b 22 	lds	r30, 0x223B
    42ce:	f0 91 3c 22 	lds	r31, 0x223C
    42d2:	30 97       	sbiw	r30, 0x00	; 0
    42d4:	29 f0       	breq	.+10     	; 0x42e0 <__vector_89+0x3c>
    42d6:	80 91 31 23 	lds	r24, 0x2331
    42da:	90 91 32 23 	lds	r25, 0x2332
    42de:	19 95       	eicall
    42e0:	ff 91       	pop	r31
    42e2:	ef 91       	pop	r30
    42e4:	bf 91       	pop	r27
    42e6:	af 91       	pop	r26
    42e8:	9f 91       	pop	r25
    42ea:	8f 91       	pop	r24
    42ec:	7f 91       	pop	r23
    42ee:	6f 91       	pop	r22
    42f0:	5f 91       	pop	r21
    42f2:	4f 91       	pop	r20
    42f4:	3f 91       	pop	r19
    42f6:	2f 91       	pop	r18
    42f8:	0f 90       	pop	r0
    42fa:	0b be       	out	0x3b, r0	; 59
    42fc:	0f 90       	pop	r0
    42fe:	0f be       	out	0x3f, r0	; 63
    4300:	0f 90       	pop	r0
    4302:	1f 90       	pop	r1
    4304:	18 95       	reti

00004306 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    4306:	1f 92       	push	r1
    4308:	0f 92       	push	r0
    430a:	0f b6       	in	r0, 0x3f	; 63
    430c:	0f 92       	push	r0
    430e:	11 24       	eor	r1, r1
    4310:	0b b6       	in	r0, 0x3b	; 59
    4312:	0f 92       	push	r0
    4314:	2f 93       	push	r18
    4316:	3f 93       	push	r19
    4318:	4f 93       	push	r20
    431a:	5f 93       	push	r21
    431c:	6f 93       	push	r22
    431e:	7f 93       	push	r23
    4320:	8f 93       	push	r24
    4322:	9f 93       	push	r25
    4324:	af 93       	push	r26
    4326:	bf 93       	push	r27
    4328:	ef 93       	push	r30
    432a:	ff 93       	push	r31
    432c:	e0 91 3d 22 	lds	r30, 0x223D
    4330:	f0 91 3e 22 	lds	r31, 0x223E
    4334:	30 97       	sbiw	r30, 0x00	; 0
    4336:	29 f0       	breq	.+10     	; 0x4342 <__vector_90+0x3c>
    4338:	80 91 33 23 	lds	r24, 0x2333
    433c:	90 91 34 23 	lds	r25, 0x2334
    4340:	19 95       	eicall
    4342:	ff 91       	pop	r31
    4344:	ef 91       	pop	r30
    4346:	bf 91       	pop	r27
    4348:	af 91       	pop	r26
    434a:	9f 91       	pop	r25
    434c:	8f 91       	pop	r24
    434e:	7f 91       	pop	r23
    4350:	6f 91       	pop	r22
    4352:	5f 91       	pop	r21
    4354:	4f 91       	pop	r20
    4356:	3f 91       	pop	r19
    4358:	2f 91       	pop	r18
    435a:	0f 90       	pop	r0
    435c:	0b be       	out	0x3b, r0	; 59
    435e:	0f 90       	pop	r0
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	0f 90       	pop	r0
    4364:	1f 90       	pop	r1
    4366:	18 95       	reti

00004368 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    4368:	1f 92       	push	r1
    436a:	0f 92       	push	r0
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	0f 92       	push	r0
    4370:	11 24       	eor	r1, r1
    4372:	0b b6       	in	r0, 0x3b	; 59
    4374:	0f 92       	push	r0
    4376:	2f 93       	push	r18
    4378:	3f 93       	push	r19
    437a:	4f 93       	push	r20
    437c:	5f 93       	push	r21
    437e:	6f 93       	push	r22
    4380:	7f 93       	push	r23
    4382:	8f 93       	push	r24
    4384:	9f 93       	push	r25
    4386:	af 93       	push	r26
    4388:	bf 93       	push	r27
    438a:	ef 93       	push	r30
    438c:	ff 93       	push	r31
    438e:	e0 91 3f 22 	lds	r30, 0x223F
    4392:	f0 91 40 22 	lds	r31, 0x2240
    4396:	30 97       	sbiw	r30, 0x00	; 0
    4398:	29 f0       	breq	.+10     	; 0x43a4 <__vector_91+0x3c>
    439a:	80 91 35 23 	lds	r24, 0x2335
    439e:	90 91 36 23 	lds	r25, 0x2336
    43a2:	19 95       	eicall
    43a4:	ff 91       	pop	r31
    43a6:	ef 91       	pop	r30
    43a8:	bf 91       	pop	r27
    43aa:	af 91       	pop	r26
    43ac:	9f 91       	pop	r25
    43ae:	8f 91       	pop	r24
    43b0:	7f 91       	pop	r23
    43b2:	6f 91       	pop	r22
    43b4:	5f 91       	pop	r21
    43b6:	4f 91       	pop	r20
    43b8:	3f 91       	pop	r19
    43ba:	2f 91       	pop	r18
    43bc:	0f 90       	pop	r0
    43be:	0b be       	out	0x3b, r0	; 59
    43c0:	0f 90       	pop	r0
    43c2:	0f be       	out	0x3f, r0	; 63
    43c4:	0f 90       	pop	r0
    43c6:	1f 90       	pop	r1
    43c8:	18 95       	reti

000043ca <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    43ca:	1f 92       	push	r1
    43cc:	0f 92       	push	r0
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	0f 92       	push	r0
    43d2:	11 24       	eor	r1, r1
    43d4:	0b b6       	in	r0, 0x3b	; 59
    43d6:	0f 92       	push	r0
    43d8:	2f 93       	push	r18
    43da:	3f 93       	push	r19
    43dc:	4f 93       	push	r20
    43de:	5f 93       	push	r21
    43e0:	6f 93       	push	r22
    43e2:	7f 93       	push	r23
    43e4:	8f 93       	push	r24
    43e6:	9f 93       	push	r25
    43e8:	af 93       	push	r26
    43ea:	bf 93       	push	r27
    43ec:	ef 93       	push	r30
    43ee:	ff 93       	push	r31
    43f0:	e0 91 41 22 	lds	r30, 0x2241
    43f4:	f0 91 42 22 	lds	r31, 0x2242
    43f8:	30 97       	sbiw	r30, 0x00	; 0
    43fa:	29 f0       	breq	.+10     	; 0x4406 <__vector_92+0x3c>
    43fc:	80 91 37 23 	lds	r24, 0x2337
    4400:	90 91 38 23 	lds	r25, 0x2338
    4404:	19 95       	eicall
    4406:	ff 91       	pop	r31
    4408:	ef 91       	pop	r30
    440a:	bf 91       	pop	r27
    440c:	af 91       	pop	r26
    440e:	9f 91       	pop	r25
    4410:	8f 91       	pop	r24
    4412:	7f 91       	pop	r23
    4414:	6f 91       	pop	r22
    4416:	5f 91       	pop	r21
    4418:	4f 91       	pop	r20
    441a:	3f 91       	pop	r19
    441c:	2f 91       	pop	r18
    441e:	0f 90       	pop	r0
    4420:	0b be       	out	0x3b, r0	; 59
    4422:	0f 90       	pop	r0
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	0f 90       	pop	r0
    4428:	1f 90       	pop	r1
    442a:	18 95       	reti

0000442c <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    442c:	1f 92       	push	r1
    442e:	0f 92       	push	r0
    4430:	0f b6       	in	r0, 0x3f	; 63
    4432:	0f 92       	push	r0
    4434:	11 24       	eor	r1, r1
    4436:	0b b6       	in	r0, 0x3b	; 59
    4438:	0f 92       	push	r0
    443a:	2f 93       	push	r18
    443c:	3f 93       	push	r19
    443e:	4f 93       	push	r20
    4440:	5f 93       	push	r21
    4442:	6f 93       	push	r22
    4444:	7f 93       	push	r23
    4446:	8f 93       	push	r24
    4448:	9f 93       	push	r25
    444a:	af 93       	push	r26
    444c:	bf 93       	push	r27
    444e:	ef 93       	push	r30
    4450:	ff 93       	push	r31
    4452:	e0 91 43 22 	lds	r30, 0x2243
    4456:	f0 91 44 22 	lds	r31, 0x2244
    445a:	30 97       	sbiw	r30, 0x00	; 0
    445c:	29 f0       	breq	.+10     	; 0x4468 <__vector_93+0x3c>
    445e:	80 91 39 23 	lds	r24, 0x2339
    4462:	90 91 3a 23 	lds	r25, 0x233A
    4466:	19 95       	eicall
    4468:	ff 91       	pop	r31
    446a:	ef 91       	pop	r30
    446c:	bf 91       	pop	r27
    446e:	af 91       	pop	r26
    4470:	9f 91       	pop	r25
    4472:	8f 91       	pop	r24
    4474:	7f 91       	pop	r23
    4476:	6f 91       	pop	r22
    4478:	5f 91       	pop	r21
    447a:	4f 91       	pop	r20
    447c:	3f 91       	pop	r19
    447e:	2f 91       	pop	r18
    4480:	0f 90       	pop	r0
    4482:	0b be       	out	0x3b, r0	; 59
    4484:	0f 90       	pop	r0
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	0f 90       	pop	r0
    448a:	1f 90       	pop	r1
    448c:	18 95       	reti

0000448e <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    448e:	1f 92       	push	r1
    4490:	0f 92       	push	r0
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	0f 92       	push	r0
    4496:	11 24       	eor	r1, r1
    4498:	0b b6       	in	r0, 0x3b	; 59
    449a:	0f 92       	push	r0
    449c:	2f 93       	push	r18
    449e:	3f 93       	push	r19
    44a0:	4f 93       	push	r20
    44a2:	5f 93       	push	r21
    44a4:	6f 93       	push	r22
    44a6:	7f 93       	push	r23
    44a8:	8f 93       	push	r24
    44aa:	9f 93       	push	r25
    44ac:	af 93       	push	r26
    44ae:	bf 93       	push	r27
    44b0:	ef 93       	push	r30
    44b2:	ff 93       	push	r31
    44b4:	e0 91 59 22 	lds	r30, 0x2259
    44b8:	f0 91 5a 22 	lds	r31, 0x225A
    44bc:	30 97       	sbiw	r30, 0x00	; 0
    44be:	29 f0       	breq	.+10     	; 0x44ca <__vector_104+0x3c>
    44c0:	80 91 4f 23 	lds	r24, 0x234F
    44c4:	90 91 50 23 	lds	r25, 0x2350
    44c8:	19 95       	eicall
    44ca:	ff 91       	pop	r31
    44cc:	ef 91       	pop	r30
    44ce:	bf 91       	pop	r27
    44d0:	af 91       	pop	r26
    44d2:	9f 91       	pop	r25
    44d4:	8f 91       	pop	r24
    44d6:	7f 91       	pop	r23
    44d8:	6f 91       	pop	r22
    44da:	5f 91       	pop	r21
    44dc:	4f 91       	pop	r20
    44de:	3f 91       	pop	r19
    44e0:	2f 91       	pop	r18
    44e2:	0f 90       	pop	r0
    44e4:	0b be       	out	0x3b, r0	; 59
    44e6:	0f 90       	pop	r0
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	0f 90       	pop	r0
    44ec:	1f 90       	pop	r1
    44ee:	18 95       	reti

000044f0 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    44f0:	1f 92       	push	r1
    44f2:	0f 92       	push	r0
    44f4:	0f b6       	in	r0, 0x3f	; 63
    44f6:	0f 92       	push	r0
    44f8:	11 24       	eor	r1, r1
    44fa:	0b b6       	in	r0, 0x3b	; 59
    44fc:	0f 92       	push	r0
    44fe:	2f 93       	push	r18
    4500:	3f 93       	push	r19
    4502:	4f 93       	push	r20
    4504:	5f 93       	push	r21
    4506:	6f 93       	push	r22
    4508:	7f 93       	push	r23
    450a:	8f 93       	push	r24
    450c:	9f 93       	push	r25
    450e:	af 93       	push	r26
    4510:	bf 93       	push	r27
    4512:	ef 93       	push	r30
    4514:	ff 93       	push	r31
    4516:	e0 91 5b 22 	lds	r30, 0x225B
    451a:	f0 91 5c 22 	lds	r31, 0x225C
    451e:	30 97       	sbiw	r30, 0x00	; 0
    4520:	29 f0       	breq	.+10     	; 0x452c <__vector_105+0x3c>
    4522:	80 91 51 23 	lds	r24, 0x2351
    4526:	90 91 52 23 	lds	r25, 0x2352
    452a:	19 95       	eicall
    452c:	ff 91       	pop	r31
    452e:	ef 91       	pop	r30
    4530:	bf 91       	pop	r27
    4532:	af 91       	pop	r26
    4534:	9f 91       	pop	r25
    4536:	8f 91       	pop	r24
    4538:	7f 91       	pop	r23
    453a:	6f 91       	pop	r22
    453c:	5f 91       	pop	r21
    453e:	4f 91       	pop	r20
    4540:	3f 91       	pop	r19
    4542:	2f 91       	pop	r18
    4544:	0f 90       	pop	r0
    4546:	0b be       	out	0x3b, r0	; 59
    4548:	0f 90       	pop	r0
    454a:	0f be       	out	0x3f, r0	; 63
    454c:	0f 90       	pop	r0
    454e:	1f 90       	pop	r1
    4550:	18 95       	reti

00004552 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4552:	1f 92       	push	r1
    4554:	0f 92       	push	r0
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	0f 92       	push	r0
    455a:	11 24       	eor	r1, r1
    455c:	0b b6       	in	r0, 0x3b	; 59
    455e:	0f 92       	push	r0
    4560:	2f 93       	push	r18
    4562:	3f 93       	push	r19
    4564:	4f 93       	push	r20
    4566:	5f 93       	push	r21
    4568:	6f 93       	push	r22
    456a:	7f 93       	push	r23
    456c:	8f 93       	push	r24
    456e:	9f 93       	push	r25
    4570:	af 93       	push	r26
    4572:	bf 93       	push	r27
    4574:	ef 93       	push	r30
    4576:	ff 93       	push	r31
    4578:	e0 91 61 22 	lds	r30, 0x2261
    457c:	f0 91 62 22 	lds	r31, 0x2262
    4580:	30 97       	sbiw	r30, 0x00	; 0
    4582:	29 f0       	breq	.+10     	; 0x458e <__vector_108+0x3c>
    4584:	80 91 57 23 	lds	r24, 0x2357
    4588:	90 91 58 23 	lds	r25, 0x2358
    458c:	19 95       	eicall
    458e:	ff 91       	pop	r31
    4590:	ef 91       	pop	r30
    4592:	bf 91       	pop	r27
    4594:	af 91       	pop	r26
    4596:	9f 91       	pop	r25
    4598:	8f 91       	pop	r24
    459a:	7f 91       	pop	r23
    459c:	6f 91       	pop	r22
    459e:	5f 91       	pop	r21
    45a0:	4f 91       	pop	r20
    45a2:	3f 91       	pop	r19
    45a4:	2f 91       	pop	r18
    45a6:	0f 90       	pop	r0
    45a8:	0b be       	out	0x3b, r0	; 59
    45aa:	0f 90       	pop	r0
    45ac:	0f be       	out	0x3f, r0	; 63
    45ae:	0f 90       	pop	r0
    45b0:	1f 90       	pop	r1
    45b2:	18 95       	reti

000045b4 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    45b4:	1f 92       	push	r1
    45b6:	0f 92       	push	r0
    45b8:	0f b6       	in	r0, 0x3f	; 63
    45ba:	0f 92       	push	r0
    45bc:	11 24       	eor	r1, r1
    45be:	0b b6       	in	r0, 0x3b	; 59
    45c0:	0f 92       	push	r0
    45c2:	2f 93       	push	r18
    45c4:	3f 93       	push	r19
    45c6:	4f 93       	push	r20
    45c8:	5f 93       	push	r21
    45ca:	6f 93       	push	r22
    45cc:	7f 93       	push	r23
    45ce:	8f 93       	push	r24
    45d0:	9f 93       	push	r25
    45d2:	af 93       	push	r26
    45d4:	bf 93       	push	r27
    45d6:	ef 93       	push	r30
    45d8:	ff 93       	push	r31
    45da:	e0 91 63 22 	lds	r30, 0x2263
    45de:	f0 91 64 22 	lds	r31, 0x2264
    45e2:	30 97       	sbiw	r30, 0x00	; 0
    45e4:	29 f0       	breq	.+10     	; 0x45f0 <__vector_109+0x3c>
    45e6:	80 91 59 23 	lds	r24, 0x2359
    45ea:	90 91 5a 23 	lds	r25, 0x235A
    45ee:	19 95       	eicall
    45f0:	ff 91       	pop	r31
    45f2:	ef 91       	pop	r30
    45f4:	bf 91       	pop	r27
    45f6:	af 91       	pop	r26
    45f8:	9f 91       	pop	r25
    45fa:	8f 91       	pop	r24
    45fc:	7f 91       	pop	r23
    45fe:	6f 91       	pop	r22
    4600:	5f 91       	pop	r21
    4602:	4f 91       	pop	r20
    4604:	3f 91       	pop	r19
    4606:	2f 91       	pop	r18
    4608:	0f 90       	pop	r0
    460a:	0b be       	out	0x3b, r0	; 59
    460c:	0f 90       	pop	r0
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	0f 90       	pop	r0
    4612:	1f 90       	pop	r1
    4614:	18 95       	reti

00004616 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    4616:	1f 92       	push	r1
    4618:	0f 92       	push	r0
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	0f 92       	push	r0
    461e:	11 24       	eor	r1, r1
    4620:	0b b6       	in	r0, 0x3b	; 59
    4622:	0f 92       	push	r0
    4624:	2f 93       	push	r18
    4626:	3f 93       	push	r19
    4628:	4f 93       	push	r20
    462a:	5f 93       	push	r21
    462c:	6f 93       	push	r22
    462e:	7f 93       	push	r23
    4630:	8f 93       	push	r24
    4632:	9f 93       	push	r25
    4634:	af 93       	push	r26
    4636:	bf 93       	push	r27
    4638:	ef 93       	push	r30
    463a:	ff 93       	push	r31
    463c:	e0 91 65 22 	lds	r30, 0x2265
    4640:	f0 91 66 22 	lds	r31, 0x2266
    4644:	30 97       	sbiw	r30, 0x00	; 0
    4646:	29 f0       	breq	.+10     	; 0x4652 <__vector_110+0x3c>
    4648:	80 91 5b 23 	lds	r24, 0x235B
    464c:	90 91 5c 23 	lds	r25, 0x235C
    4650:	19 95       	eicall
    4652:	ff 91       	pop	r31
    4654:	ef 91       	pop	r30
    4656:	bf 91       	pop	r27
    4658:	af 91       	pop	r26
    465a:	9f 91       	pop	r25
    465c:	8f 91       	pop	r24
    465e:	7f 91       	pop	r23
    4660:	6f 91       	pop	r22
    4662:	5f 91       	pop	r21
    4664:	4f 91       	pop	r20
    4666:	3f 91       	pop	r19
    4668:	2f 91       	pop	r18
    466a:	0f 90       	pop	r0
    466c:	0b be       	out	0x3b, r0	; 59
    466e:	0f 90       	pop	r0
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	0f 90       	pop	r0
    4674:	1f 90       	pop	r1
    4676:	18 95       	reti

00004678 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    4678:	1f 92       	push	r1
    467a:	0f 92       	push	r0
    467c:	0f b6       	in	r0, 0x3f	; 63
    467e:	0f 92       	push	r0
    4680:	11 24       	eor	r1, r1
    4682:	0b b6       	in	r0, 0x3b	; 59
    4684:	0f 92       	push	r0
    4686:	2f 93       	push	r18
    4688:	3f 93       	push	r19
    468a:	4f 93       	push	r20
    468c:	5f 93       	push	r21
    468e:	6f 93       	push	r22
    4690:	7f 93       	push	r23
    4692:	8f 93       	push	r24
    4694:	9f 93       	push	r25
    4696:	af 93       	push	r26
    4698:	bf 93       	push	r27
    469a:	ef 93       	push	r30
    469c:	ff 93       	push	r31
    469e:	e0 91 67 22 	lds	r30, 0x2267
    46a2:	f0 91 68 22 	lds	r31, 0x2268
    46a6:	30 97       	sbiw	r30, 0x00	; 0
    46a8:	29 f0       	breq	.+10     	; 0x46b4 <__vector_111+0x3c>
    46aa:	80 91 5d 23 	lds	r24, 0x235D
    46ae:	90 91 5e 23 	lds	r25, 0x235E
    46b2:	19 95       	eicall
    46b4:	ff 91       	pop	r31
    46b6:	ef 91       	pop	r30
    46b8:	bf 91       	pop	r27
    46ba:	af 91       	pop	r26
    46bc:	9f 91       	pop	r25
    46be:	8f 91       	pop	r24
    46c0:	7f 91       	pop	r23
    46c2:	6f 91       	pop	r22
    46c4:	5f 91       	pop	r21
    46c6:	4f 91       	pop	r20
    46c8:	3f 91       	pop	r19
    46ca:	2f 91       	pop	r18
    46cc:	0f 90       	pop	r0
    46ce:	0b be       	out	0x3b, r0	; 59
    46d0:	0f 90       	pop	r0
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	0f 90       	pop	r0
    46d6:	1f 90       	pop	r1
    46d8:	18 95       	reti

000046da <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    46da:	1f 92       	push	r1
    46dc:	0f 92       	push	r0
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	0f 92       	push	r0
    46e2:	11 24       	eor	r1, r1
    46e4:	0b b6       	in	r0, 0x3b	; 59
    46e6:	0f 92       	push	r0
    46e8:	2f 93       	push	r18
    46ea:	3f 93       	push	r19
    46ec:	4f 93       	push	r20
    46ee:	5f 93       	push	r21
    46f0:	6f 93       	push	r22
    46f2:	7f 93       	push	r23
    46f4:	8f 93       	push	r24
    46f6:	9f 93       	push	r25
    46f8:	af 93       	push	r26
    46fa:	bf 93       	push	r27
    46fc:	ef 93       	push	r30
    46fe:	ff 93       	push	r31
    4700:	e0 91 69 22 	lds	r30, 0x2269
    4704:	f0 91 6a 22 	lds	r31, 0x226A
    4708:	30 97       	sbiw	r30, 0x00	; 0
    470a:	29 f0       	breq	.+10     	; 0x4716 <__vector_112+0x3c>
    470c:	80 91 5f 23 	lds	r24, 0x235F
    4710:	90 91 60 23 	lds	r25, 0x2360
    4714:	19 95       	eicall
    4716:	ff 91       	pop	r31
    4718:	ef 91       	pop	r30
    471a:	bf 91       	pop	r27
    471c:	af 91       	pop	r26
    471e:	9f 91       	pop	r25
    4720:	8f 91       	pop	r24
    4722:	7f 91       	pop	r23
    4724:	6f 91       	pop	r22
    4726:	5f 91       	pop	r21
    4728:	4f 91       	pop	r20
    472a:	3f 91       	pop	r19
    472c:	2f 91       	pop	r18
    472e:	0f 90       	pop	r0
    4730:	0b be       	out	0x3b, r0	; 59
    4732:	0f 90       	pop	r0
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	0f 90       	pop	r0
    4738:	1f 90       	pop	r1
    473a:	18 95       	reti

0000473c <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    473c:	1f 92       	push	r1
    473e:	0f 92       	push	r0
    4740:	0f b6       	in	r0, 0x3f	; 63
    4742:	0f 92       	push	r0
    4744:	11 24       	eor	r1, r1
    4746:	0b b6       	in	r0, 0x3b	; 59
    4748:	0f 92       	push	r0
    474a:	2f 93       	push	r18
    474c:	3f 93       	push	r19
    474e:	4f 93       	push	r20
    4750:	5f 93       	push	r21
    4752:	6f 93       	push	r22
    4754:	7f 93       	push	r23
    4756:	8f 93       	push	r24
    4758:	9f 93       	push	r25
    475a:	af 93       	push	r26
    475c:	bf 93       	push	r27
    475e:	ef 93       	push	r30
    4760:	ff 93       	push	r31
    4762:	e0 91 6b 22 	lds	r30, 0x226B
    4766:	f0 91 6c 22 	lds	r31, 0x226C
    476a:	30 97       	sbiw	r30, 0x00	; 0
    476c:	29 f0       	breq	.+10     	; 0x4778 <__vector_113+0x3c>
    476e:	80 91 61 23 	lds	r24, 0x2361
    4772:	90 91 62 23 	lds	r25, 0x2362
    4776:	19 95       	eicall
    4778:	ff 91       	pop	r31
    477a:	ef 91       	pop	r30
    477c:	bf 91       	pop	r27
    477e:	af 91       	pop	r26
    4780:	9f 91       	pop	r25
    4782:	8f 91       	pop	r24
    4784:	7f 91       	pop	r23
    4786:	6f 91       	pop	r22
    4788:	5f 91       	pop	r21
    478a:	4f 91       	pop	r20
    478c:	3f 91       	pop	r19
    478e:	2f 91       	pop	r18
    4790:	0f 90       	pop	r0
    4792:	0b be       	out	0x3b, r0	; 59
    4794:	0f 90       	pop	r0
    4796:	0f be       	out	0x3f, r0	; 63
    4798:	0f 90       	pop	r0
    479a:	1f 90       	pop	r1
    479c:	18 95       	reti

0000479e <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    479e:	1f 92       	push	r1
    47a0:	0f 92       	push	r0
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	0f 92       	push	r0
    47a6:	11 24       	eor	r1, r1
    47a8:	0b b6       	in	r0, 0x3b	; 59
    47aa:	0f 92       	push	r0
    47ac:	2f 93       	push	r18
    47ae:	3f 93       	push	r19
    47b0:	4f 93       	push	r20
    47b2:	5f 93       	push	r21
    47b4:	6f 93       	push	r22
    47b6:	7f 93       	push	r23
    47b8:	8f 93       	push	r24
    47ba:	9f 93       	push	r25
    47bc:	af 93       	push	r26
    47be:	bf 93       	push	r27
    47c0:	ef 93       	push	r30
    47c2:	ff 93       	push	r31
    47c4:	e0 91 77 22 	lds	r30, 0x2277
    47c8:	f0 91 78 22 	lds	r31, 0x2278
    47cc:	30 97       	sbiw	r30, 0x00	; 0
    47ce:	29 f0       	breq	.+10     	; 0x47da <__vector_119+0x3c>
    47d0:	80 91 6d 23 	lds	r24, 0x236D
    47d4:	90 91 6e 23 	lds	r25, 0x236E
    47d8:	19 95       	eicall
    47da:	ff 91       	pop	r31
    47dc:	ef 91       	pop	r30
    47de:	bf 91       	pop	r27
    47e0:	af 91       	pop	r26
    47e2:	9f 91       	pop	r25
    47e4:	8f 91       	pop	r24
    47e6:	7f 91       	pop	r23
    47e8:	6f 91       	pop	r22
    47ea:	5f 91       	pop	r21
    47ec:	4f 91       	pop	r20
    47ee:	3f 91       	pop	r19
    47f0:	2f 91       	pop	r18
    47f2:	0f 90       	pop	r0
    47f4:	0b be       	out	0x3b, r0	; 59
    47f6:	0f 90       	pop	r0
    47f8:	0f be       	out	0x3f, r0	; 63
    47fa:	0f 90       	pop	r0
    47fc:	1f 90       	pop	r1
    47fe:	18 95       	reti

00004800 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    4800:	1f 92       	push	r1
    4802:	0f 92       	push	r0
    4804:	0f b6       	in	r0, 0x3f	; 63
    4806:	0f 92       	push	r0
    4808:	11 24       	eor	r1, r1
    480a:	0b b6       	in	r0, 0x3b	; 59
    480c:	0f 92       	push	r0
    480e:	2f 93       	push	r18
    4810:	3f 93       	push	r19
    4812:	4f 93       	push	r20
    4814:	5f 93       	push	r21
    4816:	6f 93       	push	r22
    4818:	7f 93       	push	r23
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	af 93       	push	r26
    4820:	bf 93       	push	r27
    4822:	ef 93       	push	r30
    4824:	ff 93       	push	r31
    4826:	e0 91 79 22 	lds	r30, 0x2279
    482a:	f0 91 7a 22 	lds	r31, 0x227A
    482e:	30 97       	sbiw	r30, 0x00	; 0
    4830:	29 f0       	breq	.+10     	; 0x483c <__vector_120+0x3c>
    4832:	80 91 6f 23 	lds	r24, 0x236F
    4836:	90 91 70 23 	lds	r25, 0x2370
    483a:	19 95       	eicall
    483c:	ff 91       	pop	r31
    483e:	ef 91       	pop	r30
    4840:	bf 91       	pop	r27
    4842:	af 91       	pop	r26
    4844:	9f 91       	pop	r25
    4846:	8f 91       	pop	r24
    4848:	7f 91       	pop	r23
    484a:	6f 91       	pop	r22
    484c:	5f 91       	pop	r21
    484e:	4f 91       	pop	r20
    4850:	3f 91       	pop	r19
    4852:	2f 91       	pop	r18
    4854:	0f 90       	pop	r0
    4856:	0b be       	out	0x3b, r0	; 59
    4858:	0f 90       	pop	r0
    485a:	0f be       	out	0x3f, r0	; 63
    485c:	0f 90       	pop	r0
    485e:	1f 90       	pop	r1
    4860:	18 95       	reti

00004862 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4862:	1f 92       	push	r1
    4864:	0f 92       	push	r0
    4866:	0f b6       	in	r0, 0x3f	; 63
    4868:	0f 92       	push	r0
    486a:	11 24       	eor	r1, r1
    486c:	0b b6       	in	r0, 0x3b	; 59
    486e:	0f 92       	push	r0
    4870:	2f 93       	push	r18
    4872:	3f 93       	push	r19
    4874:	4f 93       	push	r20
    4876:	5f 93       	push	r21
    4878:	6f 93       	push	r22
    487a:	7f 93       	push	r23
    487c:	8f 93       	push	r24
    487e:	9f 93       	push	r25
    4880:	af 93       	push	r26
    4882:	bf 93       	push	r27
    4884:	ef 93       	push	r30
    4886:	ff 93       	push	r31
    4888:	e0 91 7b 22 	lds	r30, 0x227B
    488c:	f0 91 7c 22 	lds	r31, 0x227C
    4890:	30 97       	sbiw	r30, 0x00	; 0
    4892:	29 f0       	breq	.+10     	; 0x489e <__vector_121+0x3c>
    4894:	80 91 71 23 	lds	r24, 0x2371
    4898:	90 91 72 23 	lds	r25, 0x2372
    489c:	19 95       	eicall
    489e:	ff 91       	pop	r31
    48a0:	ef 91       	pop	r30
    48a2:	bf 91       	pop	r27
    48a4:	af 91       	pop	r26
    48a6:	9f 91       	pop	r25
    48a8:	8f 91       	pop	r24
    48aa:	7f 91       	pop	r23
    48ac:	6f 91       	pop	r22
    48ae:	5f 91       	pop	r21
    48b0:	4f 91       	pop	r20
    48b2:	3f 91       	pop	r19
    48b4:	2f 91       	pop	r18
    48b6:	0f 90       	pop	r0
    48b8:	0b be       	out	0x3b, r0	; 59
    48ba:	0f 90       	pop	r0
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	0f 90       	pop	r0
    48c0:	1f 90       	pop	r1
    48c2:	18 95       	reti

000048c4 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    48c4:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    48c8:	fd cf       	rjmp	.-6      	; 0x48c4 <__cxa_pure_virtual>

000048ca <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    48ca:	89 eb       	ldi	r24, 0xB9	; 185
    48cc:	9b e2       	ldi	r25, 0x2B	; 43
    48ce:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    48d2:	87 eb       	ldi	r24, 0xB7	; 183
    48d4:	9b e2       	ldi	r25, 0x2B	; 43
    48d6:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    48da:	8e e9       	ldi	r24, 0x9E	; 158
    48dc:	9b e2       	ldi	r25, 0x2B	; 43
    48de:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    48e2:	84 e9       	ldi	r24, 0x94	; 148
    48e4:	9b e2       	ldi	r25, 0x2B	; 43
    48e6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    48ea:	83 e9       	ldi	r24, 0x93	; 147
    48ec:	9b e2       	ldi	r25, 0x2B	; 43
    48ee:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    48f2:	87 e7       	ldi	r24, 0x77	; 119
    48f4:	9b e2       	ldi	r25, 0x2B	; 43
    48f6:	0e 94 09 05 	call	0xa12	; 0xa12 <_ZN16CLaserControlAppC1Ev>
    48fa:	08 95       	ret

000048fc <_GLOBAL__sub_D_dacSPI>:
    48fc:	87 e7       	ldi	r24, 0x77	; 119
    48fe:	9b e2       	ldi	r25, 0x2B	; 43
    4900:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4904:	83 e9       	ldi	r24, 0x93	; 147
    4906:	9b e2       	ldi	r25, 0x2B	; 43
    4908:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    490c:	84 e9       	ldi	r24, 0x94	; 148
    490e:	9b e2       	ldi	r25, 0x2B	; 43
    4910:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    4914:	8e e9       	ldi	r24, 0x9E	; 158
    4916:	9b e2       	ldi	r25, 0x2B	; 43
    4918:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    491c:	87 eb       	ldi	r24, 0xB7	; 183
    491e:	9b e2       	ldi	r25, 0x2B	; 43
    4920:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4924:	89 eb       	ldi	r24, 0xB9	; 185
    4926:	9b e2       	ldi	r25, 0x2B	; 43
    4928:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN4CSPID1Ev>
    492c:	08 95       	ret

0000492e <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    492e:	ef 92       	push	r14
    4930:	0f 93       	push	r16
    4932:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    4934:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    4936:	84 e9       	ldi	r24, 0x94	; 148
    4938:	9b e2       	ldi	r25, 0x2B	; 43
    493a:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    493e:	83 e9       	ldi	r24, 0x93	; 147
    4940:	9b e2       	ldi	r25, 0x2B	; 43
    4942:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4946:	0f 2e       	mov	r0, r31
    4948:	f3 e0       	ldi	r31, 0x03	; 3
    494a:	ef 2e       	mov	r14, r31
    494c:	f0 2d       	mov	r31, r0
    494e:	00 e0       	ldi	r16, 0x00	; 0
    4950:	23 e0       	ldi	r18, 0x03	; 3
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	61 e0       	ldi	r22, 0x01	; 1
    4956:	89 eb       	ldi	r24, 0xB9	; 185
    4958:	9b e2       	ldi	r25, 0x2B	; 43
    495a:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    495e:	01 e0       	ldi	r16, 0x01	; 1
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	40 e0       	ldi	r20, 0x00	; 0
    4964:	6d e0       	ldi	r22, 0x0D	; 13
    4966:	87 eb       	ldi	r24, 0xB7	; 183
    4968:	9b e2       	ldi	r25, 0x2B	; 43
    496a:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    496e:	00 e0       	ldi	r16, 0x00	; 0
    4970:	11 e0       	ldi	r17, 0x01	; 1
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	31 e0       	ldi	r19, 0x01	; 1
    4976:	47 e7       	ldi	r20, 0x77	; 119
    4978:	5b e2       	ldi	r21, 0x2B	; 43
    497a:	67 eb       	ldi	r22, 0xB7	; 183
    497c:	7b e2       	ldi	r23, 0x2B	; 43
    497e:	8e e9       	ldi	r24, 0x9E	; 158
    4980:	9b e2       	ldi	r25, 0x2B	; 43
    4982:	0e 94 92 26 	call	0x4d24	; 0x4d24 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    4986:	6e e9       	ldi	r22, 0x9E	; 158
    4988:	7b e2       	ldi	r23, 0x2B	; 43
    498a:	87 e7       	ldi	r24, 0x77	; 119
    498c:	9b e2       	ldi	r25, 0x2B	; 43
    498e:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4992:	84 e9       	ldi	r24, 0x94	; 148
    4994:	9b e2       	ldi	r25, 0x2B	; 43
    4996:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    499a:	78 94       	sei
}
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	ef 90       	pop	r14
    49a2:	08 95       	ret

000049a4 <main>:

uint16_t DATA[1024];
	 
int main(void)
{
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
    49ac:	2c 97       	sbiw	r28, 0x0c	; 12
    49ae:	cd bf       	out	0x3d, r28	; 61
    49b0:	de bf       	out	0x3e, r29	; 62
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    49b2:	0e 94 97 24 	call	0x492e	; 0x492e <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    49b6:	83 e9       	ldi	r24, 0x93	; 147
    49b8:	9b e2       	ldi	r25, 0x2B	; 43
    49ba:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN12CSoundPlayer4PlayEv>
	laserBoard.Relay1On();
    49be:	84 e9       	ldi	r24, 0x94	; 148
    49c0:	9b e2       	ldi	r25, 0x2B	; 43
    49c2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN11CLaserBoard8Relay1OnEv>
    49c6:	2f ef       	ldi	r18, 0xFF	; 255
    49c8:	83 ec       	ldi	r24, 0xC3	; 195
    49ca:	99 e0       	ldi	r25, 0x09	; 9
    49cc:	21 50       	subi	r18, 0x01	; 1
    49ce:	80 40       	sbci	r24, 0x00	; 0
    49d0:	90 40       	sbci	r25, 0x00	; 0
    49d2:	e1 f7       	brne	.-8      	; 0x49cc <main+0x28>
    49d4:	00 c0       	rjmp	.+0      	; 0x49d6 <main+0x32>
    49d6:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    49d8:	84 e9       	ldi	r24, 0x94	; 148
    49da:	9b e2       	ldi	r25, 0x2B	; 43
    49dc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    49e0:	19 86       	std	Y+9, r1	; 0x09
    49e2:	1a 86       	std	Y+10, r1	; 0x0a
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    49e4:	42 e0       	ldi	r20, 0x02	; 2
    49e6:	50 e0       	ldi	r21, 0x00	; 0
    49e8:	be 01       	movw	r22, r28
    49ea:	67 5f       	subi	r22, 0xF7	; 247
    49ec:	7f 4f       	sbci	r23, 0xFF	; 255
    49ee:	89 eb       	ldi	r24, 0xB9	; 185
    49f0:	9b e2       	ldi	r25, 0x2B	; 43
    49f2:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    49f6:	87 e7       	ldi	r24, 0x77	; 119
    49f8:	9b e2       	ldi	r25, 0x2B	; 43
    49fa:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    49fe:	0f 2e       	mov	r0, r31
    4a00:	f8 ec       	ldi	r31, 0xC8	; 200
    4a02:	9f 2e       	mov	r9, r31
    4a04:	f0 2d       	mov	r31, r0
			App.Run();
			
		laserBoard.PortCheck();
		
		uint8_t	 database_en   = 0x5A;
    4a06:	0f 2e       	mov	r0, r31
    4a08:	fa e5       	ldi	r31, 0x5A	; 90
    4a0a:	af 2e       	mov	r10, r31
    4a0c:	f0 2d       	mov	r31, r0
		uint8_t  database_op   = 0xA0;
    4a0e:	0f 2e       	mov	r0, r31
    4a10:	f0 ea       	ldi	r31, 0xA0	; 160
    4a12:	bf 2e       	mov	r11, r31
    4a14:	f0 2d       	mov	r31, r0
		uint32_t database_addr = 0x00002C00; //0x002C0000; //300 Database.DAT
    4a16:	0f 2e       	mov	r0, r31
    4a18:	c1 2c       	mov	r12, r1
    4a1a:	fc e2       	ldi	r31, 0x2C	; 44
    4a1c:	df 2e       	mov	r13, r31
    4a1e:	e1 2c       	mov	r14, r1
    4a20:	f1 2c       	mov	r15, r1
    4a22:	f0 2d       	mov	r31, r0
		uint16_t database_vp   = 0x0400;
    4a24:	00 e0       	ldi	r16, 0x00	; 0
    4a26:	14 e0       	ldi	r17, 0x04	; 4
    4a28:	8f e3       	ldi	r24, 0x3F	; 63
    4a2a:	9f e1       	ldi	r25, 0x1F	; 31
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	f1 f7       	brne	.-4      	; 0x4a2c <main+0x88>
    4a30:	00 c0       	rjmp	.+0      	; 0x4a32 <main+0x8e>
    4a32:	00 00       	nop
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    4a34:	40 91 75 23 	lds	r20, 0x2375
    4a38:	50 91 76 23 	lds	r21, 0x2376
    4a3c:	ca 01       	movw	r24, r20
    4a3e:	01 96       	adiw	r24, 0x01	; 1
    4a40:	80 93 75 23 	sts	0x2375, r24
    4a44:	90 93 76 23 	sts	0x2376, r25
    4a48:	9a 01       	movw	r18, r20
    4a4a:	36 95       	lsr	r19
    4a4c:	27 95       	ror	r18
    4a4e:	36 95       	lsr	r19
    4a50:	27 95       	ror	r18
    4a52:	36 95       	lsr	r19
    4a54:	27 95       	ror	r18
    4a56:	ab e7       	ldi	r26, 0x7B	; 123
    4a58:	b4 e1       	ldi	r27, 0x14	; 20
    4a5a:	0e 94 20 29 	call	0x5240	; 0x5240 <__umulhisi3>
    4a5e:	96 95       	lsr	r25
    4a60:	87 95       	ror	r24
    4a62:	98 9e       	mul	r9, r24
    4a64:	90 01       	movw	r18, r0
    4a66:	99 9e       	mul	r9, r25
    4a68:	30 0d       	add	r19, r0
    4a6a:	11 24       	eor	r1, r1
    4a6c:	42 17       	cp	r20, r18
    4a6e:	53 07       	cpc	r21, r19
    4a70:	21 f4       	brne	.+8      	; 0x4a7a <main+0xd6>
			App.Run();
    4a72:	87 e7       	ldi	r24, 0x77	; 119
    4a74:	9b e2       	ldi	r25, 0x2B	; 43
    4a76:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN16CLaserControlApp3RunEv>
			
		laserBoard.PortCheck();
    4a7a:	84 e9       	ldi	r24, 0x94	; 148
    4a7c:	9b e2       	ldi	r25, 0x2B	; 43
    4a7e:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN11CLaserBoard9PortCheckEv>
		
		uint8_t	 database_en   = 0x5A;
    4a82:	ac 86       	std	Y+12, r10	; 0x0c
		uint8_t  database_op   = 0xA0;
    4a84:	bb 86       	std	Y+11, r11	; 0x0b
		uint32_t database_addr = 0x00002C00; //0x002C0000; //300 Database.DAT
    4a86:	c9 82       	std	Y+1, r12	; 0x01
    4a88:	da 82       	std	Y+2, r13	; 0x02
    4a8a:	eb 82       	std	Y+3, r14	; 0x03
    4a8c:	fc 82       	std	Y+4, r15	; 0x04
		uint16_t database_vp   = 0x0400;
    4a8e:	0f 83       	std	Y+7, r16	; 0x07
    4a90:	18 87       	std	Y+8, r17	; 0x08
		uint16_t database_len  = 1024;
    4a92:	0d 83       	std	Y+5, r16	; 0x05
    4a94:	1e 83       	std	Y+6, r17	; 0x06
		
		sender.WriteDataToRegister(REGISTER_DATABASE_EN,   (uint8_t*)&database_en, 1);
    4a96:	21 e0       	ldi	r18, 0x01	; 1
    4a98:	ae 01       	movw	r20, r28
    4a9a:	44 5f       	subi	r20, 0xF4	; 244
    4a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a9e:	66 e5       	ldi	r22, 0x56	; 86
    4aa0:	8e e9       	ldi	r24, 0x9E	; 158
    4aa2:	9b e2       	ldi	r25, 0x2B	; 43
    4aa4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
		sender.WriteDataToRegister(REGISTER_DATABASE_OP,  (uint8_t*) &database_op, 1);
    4aa8:	21 e0       	ldi	r18, 0x01	; 1
    4aaa:	ae 01       	movw	r20, r28
    4aac:	45 5f       	subi	r20, 0xF5	; 245
    4aae:	5f 4f       	sbci	r21, 0xFF	; 255
    4ab0:	67 e5       	ldi	r22, 0x57	; 87
    4ab2:	8e e9       	ldi	r24, 0x9E	; 158
    4ab4:	9b e2       	ldi	r25, 0x2B	; 43
    4ab6:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
		sender.WriteDataToRegister(REGISTER_DATABASE_ADDR, (uint8_t*)&database_addr, 4);
    4aba:	24 e0       	ldi	r18, 0x04	; 4
    4abc:	ae 01       	movw	r20, r28
    4abe:	4f 5f       	subi	r20, 0xFF	; 255
    4ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac2:	68 e5       	ldi	r22, 0x58	; 88
    4ac4:	8e e9       	ldi	r24, 0x9E	; 158
    4ac6:	9b e2       	ldi	r25, 0x2B	; 43
    4ac8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
		sender.WriteDataToRegister(REGISTER_DATABASE_VP,   (uint8_t*)&database_vp, 2);
    4acc:	22 e0       	ldi	r18, 0x02	; 2
    4ace:	ae 01       	movw	r20, r28
    4ad0:	49 5f       	subi	r20, 0xF9	; 249
    4ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ad4:	6c e5       	ldi	r22, 0x5C	; 92
    4ad6:	8e e9       	ldi	r24, 0x9E	; 158
    4ad8:	9b e2       	ldi	r25, 0x2B	; 43
    4ada:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
		sender.WriteDataToRegister(REGISTER_DATABASE_LEN,  (uint8_t*)&database_len, 2);
    4ade:	22 e0       	ldi	r18, 0x02	; 2
    4ae0:	ae 01       	movw	r20, r28
    4ae2:	4b 5f       	subi	r20, 0xFB	; 251
    4ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ae6:	6e e5       	ldi	r22, 0x5E	; 94
    4ae8:	8e e9       	ldi	r24, 0x9E	; 158
    4aea:	9b e2       	ldi	r25, 0x2B	; 43
    4aec:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
		
		sender.RequestDataFromSRAMAsync(0x0400, 16);
    4af0:	40 e1       	ldi	r20, 0x10	; 16
    4af2:	b8 01       	movw	r22, r16
    4af4:	8e e9       	ldi	r24, 0x9E	; 158
    4af6:	9b e2       	ldi	r25, 0x2B	; 43
    4af8:	0e 94 84 28 	call	0x5108	; 0x5108 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
		
		database_en = 0;
    4afc:	1c 86       	std	Y+12, r1	; 0x0c
		sender.WriteDataToRegister(REGISTER_DATABASE_EN,   (uint8_t*)&database_en, 1);
    4afe:	21 e0       	ldi	r18, 0x01	; 1
    4b00:	ae 01       	movw	r20, r28
    4b02:	44 5f       	subi	r20, 0xF4	; 244
    4b04:	5f 4f       	sbci	r21, 0xFF	; 255
    4b06:	66 e5       	ldi	r22, 0x56	; 86
    4b08:	8e e9       	ldi	r24, 0x9E	; 158
    4b0a:	9b e2       	ldi	r25, 0x2B	; 43
    4b0c:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>
		float y = 1023.0f * (1.0f + sinf(x)) * 0.5f;
		uint16_t data = ((uint16_t)y) << 2;
	
		// Send to DAC	
		dacSPI.Send((uint8_t*)&data, sizeof(data));*/
    }
    4b10:	8b cf       	rjmp	.-234    	; 0x4a28 <main+0x84>

00004b12 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29
    4b16:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4b18:	ec 81       	ldd	r30, Y+4	; 0x04
    4b1a:	fd 81       	ldd	r31, Y+5	; 0x05
    4b1c:	8a ea       	ldi	r24, 0xAA	; 170
    4b1e:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4b20:	ec 81       	ldd	r30, Y+4	; 0x04
    4b22:	fd 81       	ldd	r31, Y+5	; 0x05
    4b24:	8c ec       	ldi	r24, 0xCC	; 204
    4b26:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4b28:	ec 81       	ldd	r30, Y+4	; 0x04
    4b2a:	fd 81       	ldd	r31, Y+5	; 0x05
    4b2c:	82 e0       	ldi	r24, 0x02	; 2
    4b2e:	82 0f       	add	r24, r18
    4b30:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4b32:	ec 81       	ldd	r30, Y+4	; 0x04
    4b34:	fd 81       	ldd	r31, Y+5	; 0x05
    4b36:	80 e8       	ldi	r24, 0x80	; 128
    4b38:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4b3a:	ec 81       	ldd	r30, Y+4	; 0x04
    4b3c:	fd 81       	ldd	r31, Y+5	; 0x05
    4b3e:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4b40:	85 e0       	ldi	r24, 0x05	; 5
    4b42:	82 0f       	add	r24, r18
    4b44:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	21 15       	cp	r18, r1
    4b4a:	31 05       	cpc	r19, r1
    4b4c:	81 f0       	breq	.+32     	; 0x4b6e <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4b4e:	da 01       	movw	r26, r20
    4b50:	42 0f       	add	r20, r18
    4b52:	53 1f       	adc	r21, r19
    4b54:	65 e0       	ldi	r22, 0x05	; 5
    4b56:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4b58:	9d 91       	ld	r25, X+
    4b5a:	ec 81       	ldd	r30, Y+4	; 0x04
    4b5c:	fd 81       	ldd	r31, Y+5	; 0x05
    4b5e:	e6 0f       	add	r30, r22
    4b60:	f7 1f       	adc	r31, r23
    4b62:	90 83       	st	Z, r25
    4b64:	6f 5f       	subi	r22, 0xFF	; 255
    4b66:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4b68:	a4 17       	cp	r26, r20
    4b6a:	b5 07       	cpc	r27, r21
    4b6c:	a9 f7       	brne	.-22     	; 0x4b58 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	08 95       	ret

00004b74 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4b74:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4b76:	a4 81       	ldd	r26, Z+4	; 0x04
    4b78:	b5 81       	ldd	r27, Z+5	; 0x05
    4b7a:	8a ea       	ldi	r24, 0xAA	; 170
    4b7c:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4b7e:	a4 81       	ldd	r26, Z+4	; 0x04
    4b80:	b5 81       	ldd	r27, Z+5	; 0x05
    4b82:	8c ec       	ldi	r24, 0xCC	; 204
    4b84:	11 96       	adiw	r26, 0x01	; 1
    4b86:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4b88:	a4 81       	ldd	r26, Z+4	; 0x04
    4b8a:	b5 81       	ldd	r27, Z+5	; 0x05
    4b8c:	83 e0       	ldi	r24, 0x03	; 3
    4b8e:	12 96       	adiw	r26, 0x02	; 2
    4b90:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4b92:	a4 81       	ldd	r26, Z+4	; 0x04
    4b94:	b5 81       	ldd	r27, Z+5	; 0x05
    4b96:	81 e8       	ldi	r24, 0x81	; 129
    4b98:	13 96       	adiw	r26, 0x03	; 3
    4b9a:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4b9c:	a4 81       	ldd	r26, Z+4	; 0x04
    4b9e:	b5 81       	ldd	r27, Z+5	; 0x05
    4ba0:	14 96       	adiw	r26, 0x04	; 4
    4ba2:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4ba4:	a4 81       	ldd	r26, Z+4	; 0x04
    4ba6:	b5 81       	ldd	r27, Z+5	; 0x05
    4ba8:	15 96       	adiw	r26, 0x05	; 5
    4baa:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4bac:	86 e0       	ldi	r24, 0x06	; 6
    4bae:	81 87       	std	Z+9, r24	; 0x09
    4bb0:	08 95       	ret

00004bb2 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4bb2:	0f 93       	push	r16
    4bb4:	1f 93       	push	r17
    4bb6:	cf 93       	push	r28
    4bb8:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4bba:	dc 01       	movw	r26, r24
    4bbc:	14 96       	adiw	r26, 0x04	; 4
    4bbe:	ed 91       	ld	r30, X+
    4bc0:	fc 91       	ld	r31, X
    4bc2:	15 97       	sbiw	r26, 0x05	; 5
    4bc4:	aa ea       	ldi	r26, 0xAA	; 170
    4bc6:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4bc8:	ec 01       	movw	r28, r24
    4bca:	ec 81       	ldd	r30, Y+4	; 0x04
    4bcc:	fd 81       	ldd	r31, Y+5	; 0x05
    4bce:	ac ec       	ldi	r26, 0xCC	; 204
    4bd0:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4bd2:	ec 81       	ldd	r30, Y+4	; 0x04
    4bd4:	fd 81       	ldd	r31, Y+5	; 0x05
    4bd6:	a3 e0       	ldi	r26, 0x03	; 3
    4bd8:	a2 0f       	add	r26, r18
    4bda:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4bdc:	ec 81       	ldd	r30, Y+4	; 0x04
    4bde:	fd 81       	ldd	r31, Y+5	; 0x05
    4be0:	a2 e8       	ldi	r26, 0x82	; 130
    4be2:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4be4:	ec 81       	ldd	r30, Y+4	; 0x04
    4be6:	fd 81       	ldd	r31, Y+5	; 0x05
    4be8:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4bea:	ec 81       	ldd	r30, Y+4	; 0x04
    4bec:	fd 81       	ldd	r31, Y+5	; 0x05
    4bee:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4bf0:	66 e0       	ldi	r22, 0x06	; 6
    4bf2:	62 0f       	add	r22, r18
    4bf4:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4bf6:	36 95       	lsr	r19
    4bf8:	27 95       	ror	r18
    4bfa:	21 15       	cp	r18, r1
    4bfc:	31 05       	cpc	r19, r1
    4bfe:	e1 f0       	breq	.+56     	; 0x4c38 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4c00:	e4 2f       	mov	r30, r20
    4c02:	f5 2f       	mov	r31, r21
    4c04:	2d 5f       	subi	r18, 0xFD	; 253
    4c06:	3f 4f       	sbci	r19, 0xFF	; 255
    4c08:	22 0f       	add	r18, r18
    4c0a:	33 1f       	adc	r19, r19
    4c0c:	46 e0       	ldi	r20, 0x06	; 6
    4c0e:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4c10:	ec 01       	movw	r28, r24
    4c12:	ac 81       	ldd	r26, Y+4	; 0x04
    4c14:	bd 81       	ldd	r27, Y+5	; 0x05
    4c16:	a4 0f       	add	r26, r20
    4c18:	b5 1f       	adc	r27, r21
    4c1a:	61 81       	ldd	r22, Z+1	; 0x01
    4c1c:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4c1e:	ac 81       	ldd	r26, Y+4	; 0x04
    4c20:	bd 81       	ldd	r27, Y+5	; 0x05
    4c22:	a4 0f       	add	r26, r20
    4c24:	b5 1f       	adc	r27, r21
    4c26:	60 81       	ld	r22, Z
    4c28:	32 96       	adiw	r30, 0x02	; 2
    4c2a:	11 96       	adiw	r26, 0x01	; 1
    4c2c:	6c 93       	st	X, r22
    4c2e:	4e 5f       	subi	r20, 0xFE	; 254
    4c30:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4c32:	42 17       	cp	r20, r18
    4c34:	53 07       	cpc	r21, r19
    4c36:	61 f7       	brne	.-40     	; 0x4c10 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	08 95       	ret

00004c42 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4c42:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4c44:	a4 81       	ldd	r26, Z+4	; 0x04
    4c46:	b5 81       	ldd	r27, Z+5	; 0x05
    4c48:	8a ea       	ldi	r24, 0xAA	; 170
    4c4a:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4c4c:	a4 81       	ldd	r26, Z+4	; 0x04
    4c4e:	b5 81       	ldd	r27, Z+5	; 0x05
    4c50:	8c ec       	ldi	r24, 0xCC	; 204
    4c52:	11 96       	adiw	r26, 0x01	; 1
    4c54:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4c56:	a4 81       	ldd	r26, Z+4	; 0x04
    4c58:	b5 81       	ldd	r27, Z+5	; 0x05
    4c5a:	84 e0       	ldi	r24, 0x04	; 4
    4c5c:	12 96       	adiw	r26, 0x02	; 2
    4c5e:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4c60:	a4 81       	ldd	r26, Z+4	; 0x04
    4c62:	b5 81       	ldd	r27, Z+5	; 0x05
    4c64:	83 e8       	ldi	r24, 0x83	; 131
    4c66:	13 96       	adiw	r26, 0x03	; 3
    4c68:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4c6a:	a4 81       	ldd	r26, Z+4	; 0x04
    4c6c:	b5 81       	ldd	r27, Z+5	; 0x05
    4c6e:	14 96       	adiw	r26, 0x04	; 4
    4c70:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4c72:	a4 81       	ldd	r26, Z+4	; 0x04
    4c74:	b5 81       	ldd	r27, Z+5	; 0x05
    4c76:	15 96       	adiw	r26, 0x05	; 5
    4c78:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4c7a:	a4 81       	ldd	r26, Z+4	; 0x04
    4c7c:	b5 81       	ldd	r27, Z+5	; 0x05
    4c7e:	16 96       	adiw	r26, 0x06	; 6
    4c80:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4c82:	87 e0       	ldi	r24, 0x07	; 7
    4c84:	81 87       	std	Z+9, r24	; 0x09
    4c86:	08 95       	ret

00004c88 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4c88:	0f 93       	push	r16
    4c8a:	1f 93       	push	r17
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	ec 01       	movw	r28, r24
    4c92:	cb 01       	movw	r24, r22
    4c94:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4c96:	6f 83       	std	Y+7, r22	; 0x07
    4c98:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4c9a:	4a 87       	std	Y+10, r20	; 0x0a
    4c9c:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4c9e:	0e 94 51 29 	call	0x52a2	; 0x52a2 <malloc>
    4ca2:	8a 83       	std	Y+2, r24	; 0x02
    4ca4:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4ca6:	c8 01       	movw	r24, r16
    4ca8:	0e 94 51 29 	call	0x52a2	; 0x52a2 <malloc>
    4cac:	8c 83       	std	Y+4, r24	; 0x04
    4cae:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4cb0:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4cb2:	1e 82       	std	Y+6, r1	; 0x06
}
    4cb4:	df 91       	pop	r29
    4cb6:	cf 91       	pop	r28
    4cb8:	1f 91       	pop	r17
    4cba:	0f 91       	pop	r16
    4cbc:	08 95       	ret

00004cbe <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4cbe:	cf 93       	push	r28
    4cc0:	df 93       	push	r29
    4cc2:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc8:	0e 94 e6 29 	call	0x53cc	; 0x53cc <free>
	free(tx_buffer);
    4ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cce:	9d 81       	ldd	r25, Y+5	; 0x05
    4cd0:	0e 94 e6 29 	call	0x53cc	; 0x53cc <free>
}
    4cd4:	df 91       	pop	r29
    4cd6:	cf 91       	pop	r28
    4cd8:	08 95       	ret

00004cda <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    4cda:	08 95       	ret

00004cdc <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    4cdc:	dc 01       	movw	r26, r24
    4cde:	57 96       	adiw	r26, 0x17	; 23
    4ce0:	8d 91       	ld	r24, X+
    4ce2:	9c 91       	ld	r25, X
    4ce4:	58 97       	sbiw	r26, 0x18	; 24
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	39 f0       	breq	.+14     	; 0x4cf8 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    4cea:	dc 01       	movw	r26, r24
    4cec:	ed 91       	ld	r30, X+
    4cee:	fc 91       	ld	r31, X
    4cf0:	02 80       	ldd	r0, Z+2	; 0x02
    4cf2:	f3 81       	ldd	r31, Z+3	; 0x03
    4cf4:	e0 2d       	mov	r30, r0
    4cf6:	19 95       	eicall
    4cf8:	08 95       	ret

00004cfa <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	57 96       	adiw	r26, 0x17	; 23
    4cfe:	8d 91       	ld	r24, X+
    4d00:	9c 91       	ld	r25, X
    4d02:	58 97       	sbiw	r26, 0x18	; 24
    4d04:	00 97       	sbiw	r24, 0x00	; 0
    4d06:	39 f0       	breq	.+14     	; 0x4d16 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    4d08:	dc 01       	movw	r26, r24
    4d0a:	ed 91       	ld	r30, X+
    4d0c:	fc 91       	ld	r31, X
    4d0e:	04 80       	ldd	r0, Z+4	; 0x04
    4d10:	f5 81       	ldd	r31, Z+5	; 0x05
    4d12:	e0 2d       	mov	r30, r0
    4d14:	19 95       	eicall
    4d16:	08 95       	ret

00004d18 <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    4d18:	22 e4       	ldi	r18, 0x42	; 66
    4d1a:	31 e2       	ldi	r19, 0x21	; 33
    4d1c:	fc 01       	movw	r30, r24
    4d1e:	20 83       	st	Z, r18
    4d20:	31 83       	std	Z+1, r19	; 0x01
    4d22:	08 95       	ret

00004d24 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4d24:	cf 92       	push	r12
    4d26:	df 92       	push	r13
    4d28:	ef 92       	push	r14
    4d2a:	ff 92       	push	r15
    4d2c:	0f 93       	push	r16
    4d2e:	1f 93       	push	r17
    4d30:	cf 93       	push	r28
    4d32:	df 93       	push	r29
    4d34:	ec 01       	movw	r28, r24
    4d36:	7b 01       	movw	r14, r22
    4d38:	6a 01       	movw	r12, r20
    4d3a:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4d3c:	2f 83       	std	Y+7, r18	; 0x07
    4d3e:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4d40:	0a 87       	std	Y+10, r16	; 0x0a
    4d42:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4d44:	0e 94 51 29 	call	0x52a2	; 0x52a2 <malloc>
    4d48:	8a 83       	std	Y+2, r24	; 0x02
    4d4a:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4d4c:	c8 01       	movw	r24, r16
    4d4e:	0e 94 51 29 	call	0x52a2	; 0x52a2 <malloc>
    4d52:	8c 83       	std	Y+4, r24	; 0x04
    4d54:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    4d56:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    4d58:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    4d5a:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4d5c:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4d5e:	18 8a       	std	Y+16, r1	; 0x10
    4d60:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4d62:	1a 8a       	std	Y+18, r1	; 0x12
    4d64:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    4d66:	87 e0       	ldi	r24, 0x07	; 7
    4d68:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    4d6a:	82 e0       	ldi	r24, 0x02	; 2
    4d6c:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4d6e:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4d70:	ec 86       	std	Y+12, r14	; 0x0c
    4d72:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    4d74:	d7 01       	movw	r26, r14
    4d76:	ed 91       	ld	r30, X+
    4d78:	fc 91       	ld	r31, X
    4d7a:	04 84       	ldd	r0, Z+12	; 0x0c
    4d7c:	f5 85       	ldd	r31, Z+13	; 0x0d
    4d7e:	e0 2d       	mov	r30, r0
    4d80:	48 ed       	ldi	r20, 0xD8	; 216
    4d82:	57 e2       	ldi	r21, 0x27	; 39
    4d84:	be 01       	movw	r22, r28
    4d86:	c7 01       	movw	r24, r14
    4d88:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    4d8a:	d7 01       	movw	r26, r14
    4d8c:	ed 91       	ld	r30, X+
    4d8e:	fc 91       	ld	r31, X
    4d90:	06 84       	ldd	r0, Z+14	; 0x0e
    4d92:	f7 85       	ldd	r31, Z+15	; 0x0f
    4d94:	e0 2d       	mov	r30, r0
    4d96:	4d e3       	ldi	r20, 0x3D	; 61
    4d98:	58 e2       	ldi	r21, 0x28	; 40
    4d9a:	be 01       	movw	r22, r28
    4d9c:	c7 01       	movw	r24, r14
    4d9e:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4da0:	c1 14       	cp	r12, r1
    4da2:	d1 04       	cpc	r13, r1
    4da4:	19 f0       	breq	.+6      	; 0x4dac <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    4da6:	cf 8a       	std	Y+23, r12	; 0x17
    4da8:	d8 8e       	std	Y+24, r13	; 0x18
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    4dac:	cf 8b       	std	Y+23, r28	; 0x17
    4dae:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	1f 91       	pop	r17
    4db6:	0f 91       	pop	r16
    4db8:	ff 90       	pop	r15
    4dba:	ef 90       	pop	r14
    4dbc:	df 90       	pop	r13
    4dbe:	cf 90       	pop	r12
    4dc0:	08 95       	ret

00004dc2 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    4dc2:	22 e4       	ldi	r18, 0x42	; 66
    4dc4:	31 e2       	ldi	r19, 0x21	; 33
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	20 83       	st	Z, r18
    4dca:	31 83       	std	Z+1, r19	; 0x01
    4dcc:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN16CMBEventsHandlerD1Ev>
    4dd0:	08 95       	ret

00004dd2 <_ZN9CMBSender19WriteDataToRegisterEhPhh>:
	StartMODBUSTransmitter();
}

// Send data methods synchronous
void CMBSender::WriteDataToRegister(uint8_t addr, uint8_t* data, uint8_t length)
{
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4ddc:	e8 81       	ld	r30, Y
    4dde:	f9 81       	ldd	r31, Y+1	; 0x01
    4de0:	02 84       	ldd	r0, Z+10	; 0x0a
    4de2:	f3 85       	ldd	r31, Z+11	; 0x0b
    4de4:	e0 2d       	mov	r30, r0
    4de6:	19 95       	eicall
	
	// Send data asynchronous
	for (uint16_t i = 0; i < tx_frame_length; i++)
    4de8:	89 85       	ldd	r24, Y+9	; 0x09
    4dea:	88 23       	and	r24, r24
    4dec:	11 f1       	breq	.+68     	; 0x4e32 <_ZN9CMBSender19WriteDataToRegisterEhPhh+0x60>
    4dee:	00 e0       	ldi	r16, 0x00	; 0
    4df0:	10 e0       	ldi	r17, 0x00	; 0
	{
		while (pUSART->IsDataEmpty());
    4df2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4df4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4df6:	dc 01       	movw	r26, r24
    4df8:	ed 91       	ld	r30, X+
    4dfa:	fc 91       	ld	r31, X
    4dfc:	02 84       	ldd	r0, Z+10	; 0x0a
    4dfe:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e00:	e0 2d       	mov	r30, r0
    4e02:	19 95       	eicall
    4e04:	81 11       	cpse	r24, r1
    4e06:	f5 cf       	rjmp	.-22     	; 0x4df2 <_ZN9CMBSender19WriteDataToRegisterEhPhh+0x20>
		pUSART->SetTransmittingByte(tx_buffer[i]);
    4e08:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	ed 91       	ld	r30, X+
    4e10:	fc 91       	ld	r31, X
    4e12:	ac 81       	ldd	r26, Y+4	; 0x04
    4e14:	bd 81       	ldd	r27, Y+5	; 0x05
    4e16:	a0 0f       	add	r26, r16
    4e18:	b1 1f       	adc	r27, r17
    4e1a:	04 80       	ldd	r0, Z+4	; 0x04
    4e1c:	f5 81       	ldd	r31, Z+5	; 0x05
    4e1e:	e0 2d       	mov	r30, r0
    4e20:	6c 91       	ld	r22, X
    4e22:	19 95       	eicall
{
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
	
	// Send data asynchronous
	for (uint16_t i = 0; i < tx_frame_length; i++)
    4e24:	0f 5f       	subi	r16, 0xFF	; 255
    4e26:	1f 4f       	sbci	r17, 0xFF	; 255
    4e28:	89 85       	ldd	r24, Y+9	; 0x09
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	08 17       	cp	r16, r24
    4e2e:	19 07       	cpc	r17, r25
    4e30:	00 f3       	brcs	.-64     	; 0x4df2 <_ZN9CMBSender19WriteDataToRegisterEhPhh+0x20>
	{
		while (pUSART->IsDataEmpty());
		pUSART->SetTransmittingByte(tx_buffer[i]);
	}
}
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	1f 91       	pop	r17
    4e38:	0f 91       	pop	r16
    4e3a:	08 95       	ret

00004e3c <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	ec 01       	movw	r28, r24
    4e42:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    4e44:	4e 85       	ldd	r20, Y+14	; 0x0e
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	4b 30       	cpi	r20, 0x0B	; 11
    4e4a:	51 05       	cpc	r21, r1
    4e4c:	08 f0       	brcs	.+2      	; 0x4e50 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4e4e:	ad c0       	rjmp	.+346    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    4e50:	fa 01       	movw	r30, r20
    4e52:	88 27       	eor	r24, r24
    4e54:	e8 5d       	subi	r30, 0xD8	; 216
    4e56:	fe 4f       	sbci	r31, 0xFE	; 254
    4e58:	8f 4f       	sbci	r24, 0xFF	; 255
    4e5a:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    4e5e:	9a 3a       	cpi	r25, 0xAA	; 170
    4e60:	19 f4       	brne	.+6      	; 0x4e68 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    4e62:	82 e0       	ldi	r24, 0x02	; 2
    4e64:	8e 87       	std	Y+14, r24	; 0x0e
    4e66:	a1 c0       	rjmp	.+322    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	8e 87       	std	Y+14, r24	; 0x0e
    4e6c:	9e c0       	rjmp	.+316    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    4e6e:	9c 3c       	cpi	r25, 0xCC	; 204
    4e70:	19 f4       	brne	.+6      	; 0x4e78 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    4e72:	83 e0       	ldi	r24, 0x03	; 3
    4e74:	8e 87       	std	Y+14, r24	; 0x0e
    4e76:	99 c0       	rjmp	.+306    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	8e 87       	std	Y+14, r24	; 0x0e
    4e7c:	96 c0       	rjmp	.+300    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    4e7e:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    4e80:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    4e82:	1a 8a       	std	Y+18, r1	; 0x12
    4e84:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    4e86:	10 92 bf 2b 	sts	0x2BBF, r1
    4e8a:	10 92 c0 2b 	sts	0x2BC0, r1
			modbus_receiver_state = rx_FrameReceive;
    4e8e:	84 e0       	ldi	r24, 0x04	; 4
    4e90:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4e92:	8b c0       	rjmp	.+278    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    4e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e96:	ea 81       	ldd	r30, Y+2	; 0x02
    4e98:	fb 81       	ldd	r31, Y+3	; 0x03
    4e9a:	e8 0f       	add	r30, r24
    4e9c:	f1 1d       	adc	r31, r1
    4e9e:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    4ea0:	2f 85       	ldd	r18, Y+15	; 0x0f
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	4f 81       	ldd	r20, Y+7	; 0x07
    4ea6:	58 85       	ldd	r21, Y+8	; 0x08
    4ea8:	42 17       	cp	r20, r18
    4eaa:	53 07       	cpc	r21, r19
    4eac:	18 f4       	brcc	.+6      	; 0x4eb4 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    4eae:	89 e0       	ldi	r24, 0x09	; 9
    4eb0:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    4eb2:	7b c0       	rjmp	.+246    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4eb4:	2a 89       	ldd	r18, Y+18	; 0x12
    4eb6:	3b 89       	ldd	r19, Y+19	; 0x13
    4eb8:	29 27       	eor	r18, r25
    4eba:	92 2f       	mov	r25, r18
    4ebc:	92 95       	swap	r25
    4ebe:	92 27       	eor	r25, r18
    4ec0:	09 2e       	mov	r0, r25
    4ec2:	96 95       	lsr	r25
    4ec4:	96 95       	lsr	r25
    4ec6:	90 25       	eor	r25, r0
    4ec8:	09 2e       	mov	r0, r25
    4eca:	96 95       	lsr	r25
    4ecc:	90 25       	eor	r25, r0
    4ece:	97 70       	andi	r25, 0x07	; 7
    4ed0:	02 2e       	mov	r0, r18
    4ed2:	23 2f       	mov	r18, r19
    4ed4:	96 95       	lsr	r25
    4ed6:	07 94       	ror	r0
    4ed8:	97 95       	ror	r25
    4eda:	30 2d       	mov	r19, r0
    4edc:	29 27       	eor	r18, r25
    4ede:	06 94       	lsr	r0
    4ee0:	97 95       	ror	r25
    4ee2:	30 25       	eor	r19, r0
    4ee4:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    4ee6:	2a 8b       	std	Y+18, r18	; 0x12
    4ee8:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    4eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eec:	8f 5f       	subi	r24, 0xFF	; 255
    4eee:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    4ef0:	80 91 bf 2b 	lds	r24, 0x2BBF
    4ef4:	90 91 c0 2b 	lds	r25, 0x2BC0
    4ef8:	01 96       	adiw	r24, 0x01	; 1
    4efa:	80 93 bf 2b 	sts	0x2BBF, r24
    4efe:	90 93 c0 2b 	sts	0x2BC0, r25
			if (rx_buffer_pos == rx_frame_length)
    4f02:	4f 85       	ldd	r20, Y+15	; 0x0f
    4f04:	8e 81       	ldd	r24, Y+6	; 0x06
    4f06:	48 13       	cpse	r20, r24
    4f08:	50 c0       	rjmp	.+160    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    4f0a:	88 e0       	ldi	r24, 0x08	; 8
    4f0c:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4f0e:	e8 81       	ld	r30, Y
    4f10:	f9 81       	ldd	r31, Y+1	; 0x01
    4f12:	50 e0       	ldi	r21, 0x00	; 0
    4f14:	6a 81       	ldd	r22, Y+2	; 0x02
    4f16:	7b 81       	ldd	r23, Y+3	; 0x03
    4f18:	01 90       	ld	r0, Z+
    4f1a:	f0 81       	ld	r31, Z
    4f1c:	e0 2d       	mov	r30, r0
    4f1e:	ce 01       	movw	r24, r28
    4f20:	19 95       	eicall
				if (CallbackHandler != 0)
    4f22:	8f 89       	ldd	r24, Y+23	; 0x17
    4f24:	98 8d       	ldd	r25, Y+24	; 0x18
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    4f2a:	3f c0       	rjmp	.+126    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	ed 91       	ld	r30, X+
    4f30:	fc 91       	ld	r31, X
    4f32:	4e 81       	ldd	r20, Y+6	; 0x06
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	6a 81       	ldd	r22, Y+2	; 0x02
    4f38:	7b 81       	ldd	r23, Y+3	; 0x03
    4f3a:	01 90       	ld	r0, Z+
    4f3c:	f0 81       	ld	r31, Z
    4f3e:	e0 2d       	mov	r30, r0
    4f40:	19 95       	eicall
    4f42:	33 c0       	rjmp	.+102    	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    4f44:	69 2f       	mov	r22, r25
    4f46:	70 e0       	ldi	r23, 0x00	; 0
    4f48:	68 8b       	std	Y+16, r22	; 0x10
    4f4a:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    4f4c:	86 e0       	ldi	r24, 0x06	; 6
    4f4e:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4f50:	2c c0       	rjmp	.+88     	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    4f52:	28 89       	ldd	r18, Y+16	; 0x10
    4f54:	39 89       	ldd	r19, Y+17	; 0x11
    4f56:	a9 01       	movw	r20, r18
    4f58:	59 2b       	or	r21, r25
    4f5a:	48 8b       	std	Y+16, r20	; 0x10
    4f5c:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    4f5e:	2a 89       	ldd	r18, Y+18	; 0x12
    4f60:	3b 89       	ldd	r19, Y+19	; 0x13
    4f62:	42 17       	cp	r20, r18
    4f64:	53 07       	cpc	r21, r19
    4f66:	e9 f4       	brne	.+58     	; 0x4fa2 <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    4f68:	88 e0       	ldi	r24, 0x08	; 8
    4f6a:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4f6c:	e8 81       	ld	r30, Y
    4f6e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f70:	4e 81       	ldd	r20, Y+6	; 0x06
    4f72:	50 e0       	ldi	r21, 0x00	; 0
    4f74:	6a 81       	ldd	r22, Y+2	; 0x02
    4f76:	7b 81       	ldd	r23, Y+3	; 0x03
    4f78:	01 90       	ld	r0, Z+
    4f7a:	f0 81       	ld	r31, Z
    4f7c:	e0 2d       	mov	r30, r0
    4f7e:	ce 01       	movw	r24, r28
    4f80:	19 95       	eicall
				if (CallbackHandler != 0)
    4f82:	8f 89       	ldd	r24, Y+23	; 0x17
    4f84:	98 8d       	ldd	r25, Y+24	; 0x18
    4f86:	00 97       	sbiw	r24, 0x00	; 0
    4f88:	81 f0       	breq	.+32     	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	ed 91       	ld	r30, X+
    4f8e:	fc 91       	ld	r31, X
    4f90:	4e 81       	ldd	r20, Y+6	; 0x06
    4f92:	50 e0       	ldi	r21, 0x00	; 0
    4f94:	6a 81       	ldd	r22, Y+2	; 0x02
    4f96:	7b 81       	ldd	r23, Y+3	; 0x03
    4f98:	01 90       	ld	r0, Z+
    4f9a:	f0 81       	ld	r31, Z
    4f9c:	e0 2d       	mov	r30, r0
    4f9e:	19 95       	eicall
    4fa0:	04 c0       	rjmp	.+8      	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    4fa2:	89 e0       	ldi	r24, 0x09	; 9
    4fa4:	8e 87       	std	Y+14, r24	; 0x0e
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    4fa8:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	08 95       	ret

00004fb0 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    4fb0:	cf 93       	push	r28
    4fb2:	df 93       	push	r29
    4fb4:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4fb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4fb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4fba:	dc 01       	movw	r26, r24
    4fbc:	ed 91       	ld	r30, X+
    4fbe:	fc 91       	ld	r31, X
    4fc0:	02 80       	ldd	r0, Z+2	; 0x02
    4fc2:	f3 81       	ldd	r31, Z+3	; 0x03
    4fc4:	e0 2d       	mov	r30, r0
    4fc6:	19 95       	eicall
	owner->OnReceiveByte(data);
    4fc8:	68 2f       	mov	r22, r24
    4fca:	ce 01       	movw	r24, r28
    4fcc:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <_ZN9CMBSender13OnReceiveByteEh>
}
    4fd0:	df 91       	pop	r29
    4fd2:	cf 91       	pop	r28
    4fd4:	08 95       	ret

00004fd6 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4fd6:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4fd8:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4fda:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4fdc:	10 8a       	std	Z+16, r1	; 0x10
    4fde:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4fe0:	12 8a       	std	Z+18, r1	; 0x12
    4fe2:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    4fe4:	16 86       	std	Z+14, r1	; 0x0e
    4fe6:	08 95       	ret

00004fe8 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    4fe8:	cf 93       	push	r28
    4fea:	df 93       	push	r29
    4fec:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    4fee:	8c 89       	ldd	r24, Y+20	; 0x14
    4ff0:	84 30       	cpi	r24, 0x04	; 4
    4ff2:	38 f4       	brcc	.+14     	; 0x5002 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    4ff4:	82 30       	cpi	r24, 0x02	; 2
    4ff6:	b8 f5       	brcc	.+110    	; 0x5066 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4ff8:	88 23       	and	r24, r24
    4ffa:	31 f0       	breq	.+12     	; 0x5008 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    4ffc:	81 30       	cpi	r24, 0x01	; 1
    4ffe:	d1 f0       	breq	.+52     	; 0x5034 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    5000:	39 c0       	rjmp	.+114    	; 0x5074 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5002:	85 30       	cpi	r24, 0x05	; 5
    5004:	81 f1       	breq	.+96     	; 0x5066 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    5006:	36 c0       	rjmp	.+108    	; 0x5074 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    5008:	81 e0       	ldi	r24, 0x01	; 1
    500a:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    500c:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    500e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5010:	9d 85       	ldd	r25, Y+13	; 0x0d
    5012:	2d 89       	ldd	r18, Y+21	; 0x15
    5014:	dc 01       	movw	r26, r24
    5016:	ed 91       	ld	r30, X+
    5018:	fc 91       	ld	r31, X
    501a:	ac 81       	ldd	r26, Y+4	; 0x04
    501c:	bd 81       	ldd	r27, Y+5	; 0x05
    501e:	a2 0f       	add	r26, r18
    5020:	b1 1d       	adc	r27, r1
    5022:	04 80       	ldd	r0, Z+4	; 0x04
    5024:	f5 81       	ldd	r31, Z+5	; 0x05
    5026:	e0 2d       	mov	r30, r0
    5028:	6c 91       	ld	r22, X
    502a:	19 95       	eicall
			tx_buffer_pos++;
    502c:	8d 89       	ldd	r24, Y+21	; 0x15
    502e:	8f 5f       	subi	r24, 0xFF	; 255
    5030:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    5032:	20 c0       	rjmp	.+64     	; 0x5074 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    5034:	8c 85       	ldd	r24, Y+12	; 0x0c
    5036:	9d 85       	ldd	r25, Y+13	; 0x0d
    5038:	2d 89       	ldd	r18, Y+21	; 0x15
    503a:	dc 01       	movw	r26, r24
    503c:	ed 91       	ld	r30, X+
    503e:	fc 91       	ld	r31, X
    5040:	ac 81       	ldd	r26, Y+4	; 0x04
    5042:	bd 81       	ldd	r27, Y+5	; 0x05
    5044:	a2 0f       	add	r26, r18
    5046:	b1 1d       	adc	r27, r1
    5048:	04 80       	ldd	r0, Z+4	; 0x04
    504a:	f5 81       	ldd	r31, Z+5	; 0x05
    504c:	e0 2d       	mov	r30, r0
    504e:	6c 91       	ld	r22, X
    5050:	19 95       	eicall
			tx_buffer_pos++;
    5052:	8d 89       	ldd	r24, Y+21	; 0x15
    5054:	8f 5f       	subi	r24, 0xFF	; 255
    5056:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    5058:	9d 89       	ldd	r25, Y+21	; 0x15
    505a:	89 85       	ldd	r24, Y+9	; 0x09
    505c:	98 13       	cpse	r25, r24
    505e:	0a c0       	rjmp	.+20     	; 0x5074 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    5060:	83 e0       	ldi	r24, 0x03	; 3
    5062:	8c 8b       	std	Y+20, r24	; 0x14
    5064:	07 c0       	rjmp	.+14     	; 0x5074 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    5066:	8e 89       	ldd	r24, Y+22	; 0x16
    5068:	88 23       	and	r24, r24
    506a:	19 f0       	breq	.+6      	; 0x5072 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    506c:	ce 01       	movw	r24, r28
    506e:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    5072:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	08 95       	ret

0000507a <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    507a:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <_ZN9CMBSender14OnTransmitByteEv>
    507e:	08 95       	ret

00005080 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    5080:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    5082:	06 c0       	rjmp	.+12     	; 0x5090 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    5084:	86 85       	ldd	r24, Z+14	; 0x0e
    5086:	89 30       	cpi	r24, 0x09	; 9
    5088:	41 f0       	breq	.+16     	; 0x509a <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    508a:	86 85       	ldd	r24, Z+14	; 0x0e
    508c:	8a 30       	cpi	r24, 0x0A	; 10
    508e:	39 f0       	breq	.+14     	; 0x509e <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    5090:	86 85       	ldd	r24, Z+14	; 0x0e
    5092:	88 30       	cpi	r24, 0x08	; 8
    5094:	b9 f7       	brne	.-18     	; 0x5084 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    509a:	82 e0       	ldi	r24, 0x02	; 2
    509c:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    509e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    50a0:	08 95       	ret

000050a2 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    50a2:	fc 01       	movw	r30, r24
    50a4:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    50a6:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    50a8:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <_ZN9CMBSender14OnTransmitByteEv>
    50ac:	08 95       	ret

000050ae <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    50b4:	e8 81       	ld	r30, Y
    50b6:	f9 81       	ldd	r31, Y+1	; 0x01
    50b8:	02 84       	ldd	r0, Z+10	; 0x0a
    50ba:	f3 85       	ldd	r31, Z+11	; 0x0b
    50bc:	e0 2d       	mov	r30, r0
    50be:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    50c0:	ce 01       	movw	r24, r28
    50c2:	0e 94 51 28 	call	0x50a2	; 0x50a2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	08 95       	ret

000050cc <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    50cc:	cf 93       	push	r28
    50ce:	df 93       	push	r29
    50d0:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    50d2:	e8 81       	ld	r30, Y
    50d4:	f9 81       	ldd	r31, Y+1	; 0x01
    50d6:	06 84       	ldd	r0, Z+14	; 0x0e
    50d8:	f7 85       	ldd	r31, Z+15	; 0x0f
    50da:	e0 2d       	mov	r30, r0
    50dc:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    50de:	ce 01       	movw	r24, r28
    50e0:	0e 94 51 28 	call	0x50a2	; 0x50a2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    50e4:	df 91       	pop	r29
    50e6:	cf 91       	pop	r28
    50e8:	08 95       	ret

000050ea <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    50ea:	cf 93       	push	r28
    50ec:	df 93       	push	r29
    50ee:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    50f0:	e8 81       	ld	r30, Y
    50f2:	f9 81       	ldd	r31, Y+1	; 0x01
    50f4:	04 84       	ldd	r0, Z+12	; 0x0c
    50f6:	f5 85       	ldd	r31, Z+13	; 0x0d
    50f8:	e0 2d       	mov	r30, r0
    50fa:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    50fc:	ce 01       	movw	r24, r28
    50fe:	0e 94 51 28 	call	0x50a2	; 0x50a2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    5102:	df 91       	pop	r29
    5104:	cf 91       	pop	r28
    5106:	08 95       	ret

00005108 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    5108:	cf 93       	push	r28
    510a:	df 93       	push	r29
    510c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    510e:	e8 81       	ld	r30, Y
    5110:	f9 81       	ldd	r31, Y+1	; 0x01
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	00 88       	ldd	r0, Z+16	; 0x10
    5116:	f1 89       	ldd	r31, Z+17	; 0x11
    5118:	e0 2d       	mov	r30, r0
    511a:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    511c:	ce 01       	movw	r24, r28
    511e:	0e 94 51 28 	call	0x50a2	; 0x50a2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    5122:	df 91       	pop	r29
    5124:	cf 91       	pop	r28
    5126:	08 95       	ret

00005128 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    5128:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    512a:	06 c0       	rjmp	.+12     	; 0x5138 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    512c:	84 89       	ldd	r24, Z+20	; 0x14
    512e:	84 30       	cpi	r24, 0x04	; 4
    5130:	41 f0       	breq	.+16     	; 0x5142 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    5132:	84 89       	ldd	r24, Z+20	; 0x14
    5134:	85 30       	cpi	r24, 0x05	; 5
    5136:	39 f0       	breq	.+14     	; 0x5146 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    5138:	84 89       	ldd	r24, Z+20	; 0x14
    513a:	83 30       	cpi	r24, 0x03	; 3
    513c:	b9 f7       	brne	.-18     	; 0x512c <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    5142:	82 e0       	ldi	r24, 0x02	; 2
    5144:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    5146:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    5148:	08 95       	ret

0000514a <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    514a:	21 e0       	ldi	r18, 0x01	; 1
    514c:	fc 01       	movw	r30, r24
    514e:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    5150:	0e 94 75 28 	call	0x50ea	; 0x50ea <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    5154:	08 95       	ret

00005156 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    5156:	21 e0       	ldi	r18, 0x01	; 1
    5158:	fc 01       	movw	r30, r24
    515a:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    515c:	0e 94 84 28 	call	0x5108	; 0x5108 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    5160:	08 95       	ret

00005162 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    5162:	0f 93       	push	r16
    5164:	1f 93       	push	r17
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	8c 01       	movw	r16, r24
    516c:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    516e:	98 81       	ld	r25, Y
    5170:	91 38       	cpi	r25, 0x81	; 129
    5172:	69 f4       	brne	.+26     	; 0x518e <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    5174:	d8 01       	movw	r26, r16
    5176:	ed 91       	ld	r30, X+
    5178:	fc 91       	ld	r31, X
    517a:	04 80       	ldd	r0, Z+4	; 0x04
    517c:	f5 81       	ldd	r31, Z+5	; 0x05
    517e:	e0 2d       	mov	r30, r0
    5180:	2a 81       	ldd	r18, Y+2	; 0x02
    5182:	ab 01       	movw	r20, r22
    5184:	4d 5f       	subi	r20, 0xFD	; 253
    5186:	5f 4f       	sbci	r21, 0xFF	; 255
    5188:	69 81       	ldd	r22, Y+1	; 0x01
    518a:	c8 01       	movw	r24, r16
    518c:	19 95       	eicall
	}
	if (data[0] == 0x83)
    518e:	98 81       	ld	r25, Y
    5190:	93 38       	cpi	r25, 0x83	; 131
    5192:	99 f4       	brne	.+38     	; 0x51ba <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5194:	d8 01       	movw	r26, r16
    5196:	ed 91       	ld	r30, X+
    5198:	fc 91       	ld	r31, X
    519a:	2b 81       	ldd	r18, Y+3	; 0x03
    519c:	30 e0       	ldi	r19, 0x00	; 0
    519e:	ae 01       	movw	r20, r28
    51a0:	4c 5f       	subi	r20, 0xFC	; 252
    51a2:	5f 4f       	sbci	r21, 0xFF	; 255
    51a4:	69 81       	ldd	r22, Y+1	; 0x01
    51a6:	70 e0       	ldi	r23, 0x00	; 0
    51a8:	76 2f       	mov	r23, r22
    51aa:	66 27       	eor	r22, r22
    51ac:	8a 81       	ldd	r24, Y+2	; 0x02
    51ae:	68 2b       	or	r22, r24
    51b0:	02 80       	ldd	r0, Z+2	; 0x02
    51b2:	f3 81       	ldd	r31, Z+3	; 0x03
    51b4:	e0 2d       	mov	r30, r0
    51b6:	c8 01       	movw	r24, r16
    51b8:	19 95       	eicall
	}
}
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	08 95       	ret

000051c4 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    51c4:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN9CMBSender18ProcessTransactionEPhj>
    51c8:	08 95       	ret

000051ca <__udivmodhi4>:
    51ca:	aa 1b       	sub	r26, r26
    51cc:	bb 1b       	sub	r27, r27
    51ce:	51 e1       	ldi	r21, 0x11	; 17
    51d0:	07 c0       	rjmp	.+14     	; 0x51e0 <__udivmodhi4_ep>

000051d2 <__udivmodhi4_loop>:
    51d2:	aa 1f       	adc	r26, r26
    51d4:	bb 1f       	adc	r27, r27
    51d6:	a6 17       	cp	r26, r22
    51d8:	b7 07       	cpc	r27, r23
    51da:	10 f0       	brcs	.+4      	; 0x51e0 <__udivmodhi4_ep>
    51dc:	a6 1b       	sub	r26, r22
    51de:	b7 0b       	sbc	r27, r23

000051e0 <__udivmodhi4_ep>:
    51e0:	88 1f       	adc	r24, r24
    51e2:	99 1f       	adc	r25, r25
    51e4:	5a 95       	dec	r21
    51e6:	a9 f7       	brne	.-22     	; 0x51d2 <__udivmodhi4_loop>
    51e8:	80 95       	com	r24
    51ea:	90 95       	com	r25
    51ec:	bc 01       	movw	r22, r24
    51ee:	cd 01       	movw	r24, r26
    51f0:	08 95       	ret

000051f2 <__divmodsi4>:
    51f2:	05 2e       	mov	r0, r21
    51f4:	97 fb       	bst	r25, 7
    51f6:	1e f4       	brtc	.+6      	; 0x51fe <__divmodsi4+0xc>
    51f8:	00 94       	com	r0
    51fa:	0e 94 10 29 	call	0x5220	; 0x5220 <__negsi2>
    51fe:	57 fd       	sbrc	r21, 7
    5200:	07 d0       	rcall	.+14     	; 0x5210 <__divmodsi4_neg2>
    5202:	0e 94 2f 29 	call	0x525e	; 0x525e <__udivmodsi4>
    5206:	07 fc       	sbrc	r0, 7
    5208:	03 d0       	rcall	.+6      	; 0x5210 <__divmodsi4_neg2>
    520a:	4e f4       	brtc	.+18     	; 0x521e <__divmodsi4_exit>
    520c:	0c 94 10 29 	jmp	0x5220	; 0x5220 <__negsi2>

00005210 <__divmodsi4_neg2>:
    5210:	50 95       	com	r21
    5212:	40 95       	com	r20
    5214:	30 95       	com	r19
    5216:	21 95       	neg	r18
    5218:	3f 4f       	sbci	r19, 0xFF	; 255
    521a:	4f 4f       	sbci	r20, 0xFF	; 255
    521c:	5f 4f       	sbci	r21, 0xFF	; 255

0000521e <__divmodsi4_exit>:
    521e:	08 95       	ret

00005220 <__negsi2>:
    5220:	90 95       	com	r25
    5222:	80 95       	com	r24
    5224:	70 95       	com	r23
    5226:	61 95       	neg	r22
    5228:	7f 4f       	sbci	r23, 0xFF	; 255
    522a:	8f 4f       	sbci	r24, 0xFF	; 255
    522c:	9f 4f       	sbci	r25, 0xFF	; 255
    522e:	08 95       	ret

00005230 <__tablejump2__>:
    5230:	ee 0f       	add	r30, r30
    5232:	ff 1f       	adc	r31, r31
    5234:	88 1f       	adc	r24, r24
    5236:	8b bf       	out	0x3b, r24	; 59
    5238:	07 90       	elpm	r0, Z+
    523a:	f6 91       	elpm	r31, Z
    523c:	e0 2d       	mov	r30, r0
    523e:	19 94       	eijmp

00005240 <__umulhisi3>:
    5240:	a2 9f       	mul	r26, r18
    5242:	b0 01       	movw	r22, r0
    5244:	b3 9f       	mul	r27, r19
    5246:	c0 01       	movw	r24, r0
    5248:	a3 9f       	mul	r26, r19
    524a:	70 0d       	add	r23, r0
    524c:	81 1d       	adc	r24, r1
    524e:	11 24       	eor	r1, r1
    5250:	91 1d       	adc	r25, r1
    5252:	b2 9f       	mul	r27, r18
    5254:	70 0d       	add	r23, r0
    5256:	81 1d       	adc	r24, r1
    5258:	11 24       	eor	r1, r1
    525a:	91 1d       	adc	r25, r1
    525c:	08 95       	ret

0000525e <__udivmodsi4>:
    525e:	a1 e2       	ldi	r26, 0x21	; 33
    5260:	1a 2e       	mov	r1, r26
    5262:	aa 1b       	sub	r26, r26
    5264:	bb 1b       	sub	r27, r27
    5266:	fd 01       	movw	r30, r26
    5268:	0d c0       	rjmp	.+26     	; 0x5284 <__udivmodsi4_ep>

0000526a <__udivmodsi4_loop>:
    526a:	aa 1f       	adc	r26, r26
    526c:	bb 1f       	adc	r27, r27
    526e:	ee 1f       	adc	r30, r30
    5270:	ff 1f       	adc	r31, r31
    5272:	a2 17       	cp	r26, r18
    5274:	b3 07       	cpc	r27, r19
    5276:	e4 07       	cpc	r30, r20
    5278:	f5 07       	cpc	r31, r21
    527a:	20 f0       	brcs	.+8      	; 0x5284 <__udivmodsi4_ep>
    527c:	a2 1b       	sub	r26, r18
    527e:	b3 0b       	sbc	r27, r19
    5280:	e4 0b       	sbc	r30, r20
    5282:	f5 0b       	sbc	r31, r21

00005284 <__udivmodsi4_ep>:
    5284:	66 1f       	adc	r22, r22
    5286:	77 1f       	adc	r23, r23
    5288:	88 1f       	adc	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	1a 94       	dec	r1
    528e:	69 f7       	brne	.-38     	; 0x526a <__udivmodsi4_loop>
    5290:	60 95       	com	r22
    5292:	70 95       	com	r23
    5294:	80 95       	com	r24
    5296:	90 95       	com	r25
    5298:	9b 01       	movw	r18, r22
    529a:	ac 01       	movw	r20, r24
    529c:	bd 01       	movw	r22, r26
    529e:	cf 01       	movw	r24, r30
    52a0:	08 95       	ret

000052a2 <malloc>:
    52a2:	cf 93       	push	r28
    52a4:	df 93       	push	r29
    52a6:	82 30       	cpi	r24, 0x02	; 2
    52a8:	91 05       	cpc	r25, r1
    52aa:	10 f4       	brcc	.+4      	; 0x52b0 <malloc+0xe>
    52ac:	82 e0       	ldi	r24, 0x02	; 2
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	e0 91 c3 2b 	lds	r30, 0x2BC3
    52b4:	f0 91 c4 2b 	lds	r31, 0x2BC4
    52b8:	20 e0       	ldi	r18, 0x00	; 0
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	c0 e0       	ldi	r28, 0x00	; 0
    52be:	d0 e0       	ldi	r29, 0x00	; 0
    52c0:	30 97       	sbiw	r30, 0x00	; 0
    52c2:	11 f1       	breq	.+68     	; 0x5308 <malloc+0x66>
    52c4:	40 81       	ld	r20, Z
    52c6:	51 81       	ldd	r21, Z+1	; 0x01
    52c8:	48 17       	cp	r20, r24
    52ca:	59 07       	cpc	r21, r25
    52cc:	c0 f0       	brcs	.+48     	; 0x52fe <malloc+0x5c>
    52ce:	48 17       	cp	r20, r24
    52d0:	59 07       	cpc	r21, r25
    52d2:	61 f4       	brne	.+24     	; 0x52ec <malloc+0x4a>
    52d4:	82 81       	ldd	r24, Z+2	; 0x02
    52d6:	93 81       	ldd	r25, Z+3	; 0x03
    52d8:	20 97       	sbiw	r28, 0x00	; 0
    52da:	19 f0       	breq	.+6      	; 0x52e2 <malloc+0x40>
    52dc:	8a 83       	std	Y+2, r24	; 0x02
    52de:	9b 83       	std	Y+3, r25	; 0x03
    52e0:	2b c0       	rjmp	.+86     	; 0x5338 <malloc+0x96>
    52e2:	80 93 c3 2b 	sts	0x2BC3, r24
    52e6:	90 93 c4 2b 	sts	0x2BC4, r25
    52ea:	26 c0       	rjmp	.+76     	; 0x5338 <malloc+0x96>
    52ec:	21 15       	cp	r18, r1
    52ee:	31 05       	cpc	r19, r1
    52f0:	19 f0       	breq	.+6      	; 0x52f8 <malloc+0x56>
    52f2:	42 17       	cp	r20, r18
    52f4:	53 07       	cpc	r21, r19
    52f6:	18 f4       	brcc	.+6      	; 0x52fe <malloc+0x5c>
    52f8:	9a 01       	movw	r18, r20
    52fa:	be 01       	movw	r22, r28
    52fc:	df 01       	movw	r26, r30
    52fe:	ef 01       	movw	r28, r30
    5300:	02 80       	ldd	r0, Z+2	; 0x02
    5302:	f3 81       	ldd	r31, Z+3	; 0x03
    5304:	e0 2d       	mov	r30, r0
    5306:	dc cf       	rjmp	.-72     	; 0x52c0 <malloc+0x1e>
    5308:	21 15       	cp	r18, r1
    530a:	31 05       	cpc	r19, r1
    530c:	09 f1       	breq	.+66     	; 0x5350 <malloc+0xae>
    530e:	28 1b       	sub	r18, r24
    5310:	39 0b       	sbc	r19, r25
    5312:	24 30       	cpi	r18, 0x04	; 4
    5314:	31 05       	cpc	r19, r1
    5316:	90 f4       	brcc	.+36     	; 0x533c <malloc+0x9a>
    5318:	12 96       	adiw	r26, 0x02	; 2
    531a:	8d 91       	ld	r24, X+
    531c:	9c 91       	ld	r25, X
    531e:	13 97       	sbiw	r26, 0x03	; 3
    5320:	61 15       	cp	r22, r1
    5322:	71 05       	cpc	r23, r1
    5324:	21 f0       	breq	.+8      	; 0x532e <malloc+0x8c>
    5326:	fb 01       	movw	r30, r22
    5328:	82 83       	std	Z+2, r24	; 0x02
    532a:	93 83       	std	Z+3, r25	; 0x03
    532c:	04 c0       	rjmp	.+8      	; 0x5336 <malloc+0x94>
    532e:	80 93 c3 2b 	sts	0x2BC3, r24
    5332:	90 93 c4 2b 	sts	0x2BC4, r25
    5336:	fd 01       	movw	r30, r26
    5338:	32 96       	adiw	r30, 0x02	; 2
    533a:	44 c0       	rjmp	.+136    	; 0x53c4 <malloc+0x122>
    533c:	fd 01       	movw	r30, r26
    533e:	e2 0f       	add	r30, r18
    5340:	f3 1f       	adc	r31, r19
    5342:	81 93       	st	Z+, r24
    5344:	91 93       	st	Z+, r25
    5346:	22 50       	subi	r18, 0x02	; 2
    5348:	31 09       	sbc	r19, r1
    534a:	2d 93       	st	X+, r18
    534c:	3c 93       	st	X, r19
    534e:	3a c0       	rjmp	.+116    	; 0x53c4 <malloc+0x122>
    5350:	20 91 c1 2b 	lds	r18, 0x2BC1
    5354:	30 91 c2 2b 	lds	r19, 0x2BC2
    5358:	23 2b       	or	r18, r19
    535a:	41 f4       	brne	.+16     	; 0x536c <malloc+0xca>
    535c:	20 91 02 20 	lds	r18, 0x2002
    5360:	30 91 03 20 	lds	r19, 0x2003
    5364:	20 93 c1 2b 	sts	0x2BC1, r18
    5368:	30 93 c2 2b 	sts	0x2BC2, r19
    536c:	20 91 00 20 	lds	r18, 0x2000
    5370:	30 91 01 20 	lds	r19, 0x2001
    5374:	21 15       	cp	r18, r1
    5376:	31 05       	cpc	r19, r1
    5378:	41 f4       	brne	.+16     	; 0x538a <malloc+0xe8>
    537a:	2d b7       	in	r18, 0x3d	; 61
    537c:	3e b7       	in	r19, 0x3e	; 62
    537e:	40 91 04 20 	lds	r20, 0x2004
    5382:	50 91 05 20 	lds	r21, 0x2005
    5386:	24 1b       	sub	r18, r20
    5388:	35 0b       	sbc	r19, r21
    538a:	e0 91 c1 2b 	lds	r30, 0x2BC1
    538e:	f0 91 c2 2b 	lds	r31, 0x2BC2
    5392:	e2 17       	cp	r30, r18
    5394:	f3 07       	cpc	r31, r19
    5396:	a0 f4       	brcc	.+40     	; 0x53c0 <malloc+0x11e>
    5398:	2e 1b       	sub	r18, r30
    539a:	3f 0b       	sbc	r19, r31
    539c:	28 17       	cp	r18, r24
    539e:	39 07       	cpc	r19, r25
    53a0:	78 f0       	brcs	.+30     	; 0x53c0 <malloc+0x11e>
    53a2:	ac 01       	movw	r20, r24
    53a4:	4e 5f       	subi	r20, 0xFE	; 254
    53a6:	5f 4f       	sbci	r21, 0xFF	; 255
    53a8:	24 17       	cp	r18, r20
    53aa:	35 07       	cpc	r19, r21
    53ac:	48 f0       	brcs	.+18     	; 0x53c0 <malloc+0x11e>
    53ae:	4e 0f       	add	r20, r30
    53b0:	5f 1f       	adc	r21, r31
    53b2:	40 93 c1 2b 	sts	0x2BC1, r20
    53b6:	50 93 c2 2b 	sts	0x2BC2, r21
    53ba:	81 93       	st	Z+, r24
    53bc:	91 93       	st	Z+, r25
    53be:	02 c0       	rjmp	.+4      	; 0x53c4 <malloc+0x122>
    53c0:	e0 e0       	ldi	r30, 0x00	; 0
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	cf 01       	movw	r24, r30
    53c6:	df 91       	pop	r29
    53c8:	cf 91       	pop	r28
    53ca:	08 95       	ret

000053cc <free>:
    53cc:	0f 93       	push	r16
    53ce:	1f 93       	push	r17
    53d0:	cf 93       	push	r28
    53d2:	df 93       	push	r29
    53d4:	00 97       	sbiw	r24, 0x00	; 0
    53d6:	09 f4       	brne	.+2      	; 0x53da <free+0xe>
    53d8:	8c c0       	rjmp	.+280    	; 0x54f2 <free+0x126>
    53da:	fc 01       	movw	r30, r24
    53dc:	32 97       	sbiw	r30, 0x02	; 2
    53de:	12 82       	std	Z+2, r1	; 0x02
    53e0:	13 82       	std	Z+3, r1	; 0x03
    53e2:	00 91 c3 2b 	lds	r16, 0x2BC3
    53e6:	10 91 c4 2b 	lds	r17, 0x2BC4
    53ea:	01 15       	cp	r16, r1
    53ec:	11 05       	cpc	r17, r1
    53ee:	81 f4       	brne	.+32     	; 0x5410 <free+0x44>
    53f0:	20 81       	ld	r18, Z
    53f2:	31 81       	ldd	r19, Z+1	; 0x01
    53f4:	82 0f       	add	r24, r18
    53f6:	93 1f       	adc	r25, r19
    53f8:	20 91 c1 2b 	lds	r18, 0x2BC1
    53fc:	30 91 c2 2b 	lds	r19, 0x2BC2
    5400:	28 17       	cp	r18, r24
    5402:	39 07       	cpc	r19, r25
    5404:	79 f5       	brne	.+94     	; 0x5464 <free+0x98>
    5406:	e0 93 c1 2b 	sts	0x2BC1, r30
    540a:	f0 93 c2 2b 	sts	0x2BC2, r31
    540e:	71 c0       	rjmp	.+226    	; 0x54f2 <free+0x126>
    5410:	d8 01       	movw	r26, r16
    5412:	40 e0       	ldi	r20, 0x00	; 0
    5414:	50 e0       	ldi	r21, 0x00	; 0
    5416:	ae 17       	cp	r26, r30
    5418:	bf 07       	cpc	r27, r31
    541a:	50 f4       	brcc	.+20     	; 0x5430 <free+0x64>
    541c:	12 96       	adiw	r26, 0x02	; 2
    541e:	2d 91       	ld	r18, X+
    5420:	3c 91       	ld	r19, X
    5422:	13 97       	sbiw	r26, 0x03	; 3
    5424:	ad 01       	movw	r20, r26
    5426:	21 15       	cp	r18, r1
    5428:	31 05       	cpc	r19, r1
    542a:	09 f1       	breq	.+66     	; 0x546e <free+0xa2>
    542c:	d9 01       	movw	r26, r18
    542e:	f3 cf       	rjmp	.-26     	; 0x5416 <free+0x4a>
    5430:	9d 01       	movw	r18, r26
    5432:	da 01       	movw	r26, r20
    5434:	22 83       	std	Z+2, r18	; 0x02
    5436:	33 83       	std	Z+3, r19	; 0x03
    5438:	60 81       	ld	r22, Z
    543a:	71 81       	ldd	r23, Z+1	; 0x01
    543c:	86 0f       	add	r24, r22
    543e:	97 1f       	adc	r25, r23
    5440:	82 17       	cp	r24, r18
    5442:	93 07       	cpc	r25, r19
    5444:	69 f4       	brne	.+26     	; 0x5460 <free+0x94>
    5446:	ec 01       	movw	r28, r24
    5448:	28 81       	ld	r18, Y
    544a:	39 81       	ldd	r19, Y+1	; 0x01
    544c:	26 0f       	add	r18, r22
    544e:	37 1f       	adc	r19, r23
    5450:	2e 5f       	subi	r18, 0xFE	; 254
    5452:	3f 4f       	sbci	r19, 0xFF	; 255
    5454:	20 83       	st	Z, r18
    5456:	31 83       	std	Z+1, r19	; 0x01
    5458:	8a 81       	ldd	r24, Y+2	; 0x02
    545a:	9b 81       	ldd	r25, Y+3	; 0x03
    545c:	82 83       	std	Z+2, r24	; 0x02
    545e:	93 83       	std	Z+3, r25	; 0x03
    5460:	45 2b       	or	r20, r21
    5462:	29 f4       	brne	.+10     	; 0x546e <free+0xa2>
    5464:	e0 93 c3 2b 	sts	0x2BC3, r30
    5468:	f0 93 c4 2b 	sts	0x2BC4, r31
    546c:	42 c0       	rjmp	.+132    	; 0x54f2 <free+0x126>
    546e:	12 96       	adiw	r26, 0x02	; 2
    5470:	ed 93       	st	X+, r30
    5472:	fc 93       	st	X, r31
    5474:	13 97       	sbiw	r26, 0x03	; 3
    5476:	ed 01       	movw	r28, r26
    5478:	49 91       	ld	r20, Y+
    547a:	59 91       	ld	r21, Y+
    547c:	9e 01       	movw	r18, r28
    547e:	24 0f       	add	r18, r20
    5480:	35 1f       	adc	r19, r21
    5482:	e2 17       	cp	r30, r18
    5484:	f3 07       	cpc	r31, r19
    5486:	71 f4       	brne	.+28     	; 0x54a4 <free+0xd8>
    5488:	80 81       	ld	r24, Z
    548a:	91 81       	ldd	r25, Z+1	; 0x01
    548c:	84 0f       	add	r24, r20
    548e:	95 1f       	adc	r25, r21
    5490:	02 96       	adiw	r24, 0x02	; 2
    5492:	8d 93       	st	X+, r24
    5494:	9c 93       	st	X, r25
    5496:	11 97       	sbiw	r26, 0x01	; 1
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	93 81       	ldd	r25, Z+3	; 0x03
    549c:	12 96       	adiw	r26, 0x02	; 2
    549e:	8d 93       	st	X+, r24
    54a0:	9c 93       	st	X, r25
    54a2:	13 97       	sbiw	r26, 0x03	; 3
    54a4:	e0 e0       	ldi	r30, 0x00	; 0
    54a6:	f0 e0       	ldi	r31, 0x00	; 0
    54a8:	d8 01       	movw	r26, r16
    54aa:	12 96       	adiw	r26, 0x02	; 2
    54ac:	8d 91       	ld	r24, X+
    54ae:	9c 91       	ld	r25, X
    54b0:	13 97       	sbiw	r26, 0x03	; 3
    54b2:	00 97       	sbiw	r24, 0x00	; 0
    54b4:	19 f0       	breq	.+6      	; 0x54bc <free+0xf0>
    54b6:	f8 01       	movw	r30, r16
    54b8:	8c 01       	movw	r16, r24
    54ba:	f6 cf       	rjmp	.-20     	; 0x54a8 <free+0xdc>
    54bc:	8d 91       	ld	r24, X+
    54be:	9c 91       	ld	r25, X
    54c0:	98 01       	movw	r18, r16
    54c2:	2e 5f       	subi	r18, 0xFE	; 254
    54c4:	3f 4f       	sbci	r19, 0xFF	; 255
    54c6:	82 0f       	add	r24, r18
    54c8:	93 1f       	adc	r25, r19
    54ca:	20 91 c1 2b 	lds	r18, 0x2BC1
    54ce:	30 91 c2 2b 	lds	r19, 0x2BC2
    54d2:	28 17       	cp	r18, r24
    54d4:	39 07       	cpc	r19, r25
    54d6:	69 f4       	brne	.+26     	; 0x54f2 <free+0x126>
    54d8:	30 97       	sbiw	r30, 0x00	; 0
    54da:	29 f4       	brne	.+10     	; 0x54e6 <free+0x11a>
    54dc:	10 92 c3 2b 	sts	0x2BC3, r1
    54e0:	10 92 c4 2b 	sts	0x2BC4, r1
    54e4:	02 c0       	rjmp	.+4      	; 0x54ea <free+0x11e>
    54e6:	12 82       	std	Z+2, r1	; 0x02
    54e8:	13 82       	std	Z+3, r1	; 0x03
    54ea:	00 93 c1 2b 	sts	0x2BC1, r16
    54ee:	10 93 c2 2b 	sts	0x2BC2, r17
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	08 95       	ret

000054fc <memcpy>:
    54fc:	fb 01       	movw	r30, r22
    54fe:	dc 01       	movw	r26, r24
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <memcpy+0xa>
    5502:	01 90       	ld	r0, Z+
    5504:	0d 92       	st	X+, r0
    5506:	41 50       	subi	r20, 0x01	; 1
    5508:	50 40       	sbci	r21, 0x00	; 0
    550a:	d8 f7       	brcc	.-10     	; 0x5502 <memcpy+0x6>
    550c:	08 95       	ret

0000550e <__do_global_dtors>:
    550e:	12 e0       	ldi	r17, 0x02	; 2
    5510:	c7 e1       	ldi	r28, 0x17	; 23
    5512:	d2 e0       	ldi	r29, 0x02	; 2
    5514:	00 e0       	ldi	r16, 0x00	; 0
    5516:	06 c0       	rjmp	.+12     	; 0x5524 <__do_global_dtors+0x16>
    5518:	80 2f       	mov	r24, r16
    551a:	fe 01       	movw	r30, r28
    551c:	0e 94 18 29 	call	0x5230	; 0x5230 <__tablejump2__>
    5520:	21 96       	adiw	r28, 0x01	; 1
    5522:	01 1d       	adc	r16, r1
    5524:	c9 31       	cpi	r28, 0x19	; 25
    5526:	d1 07       	cpc	r29, r17
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	08 07       	cpc	r16, r24
    552c:	a9 f7       	brne	.-22     	; 0x5518 <__do_global_dtors+0xa>
    552e:	f8 94       	cli

00005530 <__stop_program>:
    5530:	ff cf       	rjmp	.-2      	; 0x5530 <__stop_program>
