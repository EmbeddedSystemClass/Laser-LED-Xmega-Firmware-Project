
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00802000  00004b74  00004c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000280  00802136  00802136  00004d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d41a  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025d1  00000000  00000000  00012b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c92  00000000  00000000  00015143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000312c  00000000  00000000  00017dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f42  00000000  00000000  0001af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008363  00000000  00000000  0001fe46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d0  00000000  00000000  000281a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__dtors_end>
       4:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_1>
       8:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_2>
       c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_3>
      10:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_4>
      14:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_5>
      18:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_6>
      1c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_7>
      20:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_8>
      24:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_9>
      28:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_10>
      2c:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_11>
      30:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_12>
      34:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__vector_13>
      38:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_14>
      3c:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_15>
      40:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_16>
      44:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_17>
      48:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_18>
      4c:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_19>
      50:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_20>
      54:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_21>
      58:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_22>
      5c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_23>
      60:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_24>
      64:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_25>
      68:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_26>
      6c:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_27>
      70:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_28>
      74:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_29>
      78:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__vector_30>
      7c:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_31>
      80:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_32>
      84:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_33>
      88:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_34>
      8c:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__vector_35>
      90:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_36>
      94:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_37>
      98:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_38>
      9c:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__vector_39>
      a0:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__vector_40>
      a4:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_41>
      a8:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_42>
      ac:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_43>
      b0:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__vector_44>
      b4:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_45>
      b8:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_46>
      bc:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_47>
      c0:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_48>
      c4:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_49>
      c8:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__vector_50>
      cc:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__vector_51>
      d0:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__vector_52>
      d4:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_53>
      d8:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__vector_54>
      dc:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_55>
      e0:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__vector_56>
      e4:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__vector_57>
      e8:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_58>
      ec:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__vector_59>
      f0:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__vector_60>
      f4:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__vector_61>
      f8:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__vector_62>
      fc:	0c 94 35 13 	jmp	0x266a	; 0x266a <__vector_63>
     100:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__vector_64>
     104:	0c 94 97 13 	jmp	0x272e	; 0x272e <__vector_65>
     108:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__vector_66>
     10c:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__vector_67>
     110:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__vector_68>
     114:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__vector_69>
     118:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__vector_70>
     11c:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__vector_71>
     120:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__vector_72>
     124:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_73>
     128:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_74>
     12c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     130:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     134:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__vector_77>
     138:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__vector_78>
     13c:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__vector_79>
     140:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__vector_80>
     144:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__vector_81>
     148:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__vector_82>
     14c:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__vector_83>
     150:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__vector_84>
     154:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__vector_85>
     158:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__vector_86>
     15c:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__vector_87>
     160:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__vector_88>
     164:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__vector_89>
     168:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__vector_90>
     16c:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__vector_91>
     170:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__vector_92>
     174:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__vector_93>
     178:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     17c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     180:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     184:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     188:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     18c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     190:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     194:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     198:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     19c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1a0:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__vector_104>
     1a4:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__vector_105>
     1a8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1ac:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1b0:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__vector_108>
     1b4:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__vector_109>
     1b8:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_110>
     1bc:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__vector_111>
     1c0:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__vector_112>
     1c4:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__vector_113>
     1c8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1cc:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1d0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1d4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1d8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1dc:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__vector_119>
     1e0:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__vector_120>
     1e4:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__vector_121>
     1e8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1ec:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1f0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1f4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1f8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     1fc:	61 1d       	adc	r22, r1
     1fe:	61 1d       	adc	r22, r1
     200:	69 1d       	adc	r22, r9
     202:	71 1d       	adc	r23, r1
     204:	78 1d       	adc	r23, r8
     206:	c7 1d       	adc	r28, r7
     208:	ce 1d       	adc	r28, r14
     20a:	fa 1d       	adc	r31, r10
     20c:	fa 1d       	adc	r31, r10
     20e:	f9 1d       	adc	r31, r9
     210:	f9 1d       	adc	r31, r9

00000212 <__trampolines_start>:
     212:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <_GLOBAL__sub_D_dacSPI>
     216:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     21a:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     21e:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     222:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     226:	0c 94 90 22 	jmp	0x4520	; 0x4520 <_ZN7CTimerD8SetCOMPBEj>
     22a:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     22e:	0c 94 4f 23 	jmp	0x469e	; 0x469e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     232:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     236:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <_ZN10CDGUSUSART15GetReceivedByteEv>
     23a:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     23e:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <_ZN9CMBSender13OnReceiveByteEh+0x152>
     242:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     246:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     24a:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     24e:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     252:	0c 94 63 22 	jmp	0x44c6	; 0x44c6 <_ZN7CTimerD5StartEj>
     256:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     25a:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     25e:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <_ZN7CTimerF8SetCOMPCEj>
     262:	0c 94 1f 23 	jmp	0x463e	; 0x463e <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     266:	0c 94 ce 1d 	jmp	0x3b9c	; 0x3b9c <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     26a:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     26e:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     272:	0c 94 af 21 	jmp	0x435e	; 0x435e <_ZN7CTimerC9SetPeriodEj>
     276:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     27a:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <_ZN16CMBEventsHandler11FreeBuffersEv>
     27e:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     282:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <_ZN7CTimerF5StartEj>
     286:	0c 94 9c 02 	jmp	0x538	; 0x538 <_GLOBAL__sub_D_timer>
     28a:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <_ZN4CSPI16StaticOnTransmitEPv>
     28e:	0c 94 86 23 	jmp	0x470c	; 0x470c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     292:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     296:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <_ZN7CTimerD8SetCOMPDEj>
     29a:	0c 94 90 02 	jmp	0x520	; 0x520 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     29e:	0c 94 0b 02 	jmp	0x416	; 0x416 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2a2:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <_ZN9CMBSender13OnReceiveByteEh+0x50>
     2a6:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <_ZN7CTimerC5StartEj>
     2aa:	0c 94 be 21 	jmp	0x437c	; 0x437c <_ZN7CTimerC8SetCOMPCEj>
     2ae:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <_GLOBAL__sub_I_dacSPI>
     2b2:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__cxa_pure_virtual>
     2b6:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     2ba:	0c 94 81 23 	jmp	0x4702	; 0x4702 <_ZN7CTimerF8SetCOMPDEj>
     2be:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <_ZN9CMBSender13OnReceiveByteEh+0xee>
     2c2:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2c6:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2ca:	0c 94 47 23 	jmp	0x468e	; 0x468e <_ZN7CTimerF4StopEv>
     2ce:	0c 94 da 21 	jmp	0x43b4	; 0x43b4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2d2:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     2d6:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2da:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2de:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     2e2:	0c 94 6d 23 	jmp	0x46da	; 0x46da <_ZN7CTimerF9SetPeriodEj>
     2e6:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <_ZN10CDGUSUSART11IsDataEmptyEv>
     2ea:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     2ee:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2f2:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     2f6:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     2fa:	0c 94 95 22 	jmp	0x452a	; 0x452a <_ZN7CTimerD8SetCOMPCEj>
     2fe:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
     302:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     306:	0c 94 10 22 	jmp	0x4420	; 0x4420 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     30a:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     30e:	0c 94 7f 22 	jmp	0x44fe	; 0x44fe <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     312:	0c 94 89 1f 	jmp	0x3f12	; 0x3f12 <_ZN10CDGUSUSART11IsReceivingEv>
     316:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     31a:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <_ZN7CTimerF8SetCOMPBEj>
     31e:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <_ZN7CTimerF8SetCOMPAEj>
     322:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <_ZN10CDGUSUSART19SetTransmittingByteEh>
     326:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     32a:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     32e:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     332:	0c 94 86 22 	jmp	0x450c	; 0x450c <_ZN7CTimerD9SetPeriodEj>
     336:	0c 94 48 22 	jmp	0x4490	; 0x4490 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     33a:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <_ZN7CTimerC8SetCOMPBEj>
     33e:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <_ZN10CDGUSUSART14IsTransmittingEv>
     342:	0c 94 93 02 	jmp	0x526	; 0x526 <_GLOBAL__sub_I_timer>
     346:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     34a:	0c 94 99 21 	jmp	0x4332	; 0x4332 <_ZN7CTimerC4StopEv>
     34e:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <_ZN7CTimerD8SetCOMPAEj>
     352:	0c 94 98 23 	jmp	0x4730	; 0x4730 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     356:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <_ZN7CTimerC8SetCOMPAEj>
     35a:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     35e:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     362:	0c 94 22 22 	jmp	0x4444	; 0x4444 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     366:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <_ZN7CTimerC8SetCOMPDEj>
     36a:	0c 94 ce 23 	jmp	0x479c	; 0x479c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     36e:	0c 94 0a 02 	jmp	0x414	; 0x414 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     372:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <_ZN7CTimerD4StopEv>
     376:	0c 94 9f 22 	jmp	0x453e	; 0x453e <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     37a:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <_ZN9CMBSender21OnTransactionCallbackEPhj>

0000037e <__ctors_start>:
     37e:	93 02       	muls	r25, r19
     380:	e0 1a       	sub	r14, r16

00000382 <__ctors_end>:
     382:	9c 02       	muls	r25, r28
     384:	fd 1a       	sub	r15, r29

00000386 <__dtors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	cd bf       	out	0x3d, r28	; 61
     38e:	df e3       	ldi	r29, 0x3F	; 63
     390:	de bf       	out	0x3e, r29	; 62
     392:	00 e0       	ldi	r16, 0x00	; 0
     394:	0c bf       	out	0x3c, r16	; 60

00000396 <__do_copy_data>:
     396:	11 e2       	ldi	r17, 0x21	; 33
     398:	a0 e0       	ldi	r26, 0x00	; 0
     39a:	b0 e2       	ldi	r27, 0x20	; 32
     39c:	e4 e7       	ldi	r30, 0x74	; 116
     39e:	fb e4       	ldi	r31, 0x4B	; 75
     3a0:	00 e0       	ldi	r16, 0x00	; 0
     3a2:	0b bf       	out	0x3b, r16	; 59
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__do_copy_data+0x14>
     3a6:	07 90       	elpm	r0, Z+
     3a8:	0d 92       	st	X+, r0
     3aa:	a6 33       	cpi	r26, 0x36	; 54
     3ac:	b1 07       	cpc	r27, r17
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <__do_copy_data+0x10>

000003b0 <__do_clear_bss>:
     3b0:	23 e2       	ldi	r18, 0x23	; 35
     3b2:	a6 e3       	ldi	r26, 0x36	; 54
     3b4:	b1 e2       	ldi	r27, 0x21	; 33
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <.do_clear_bss_start>

000003b8 <.do_clear_bss_loop>:
     3b8:	1d 92       	st	X+, r1

000003ba <.do_clear_bss_start>:
     3ba:	a6 3b       	cpi	r26, 0xB6	; 182
     3bc:	b2 07       	cpc	r27, r18
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <.do_clear_bss_loop>

000003c0 <__do_global_ctors>:
     3c0:	11 e0       	ldi	r17, 0x01	; 1
     3c2:	c1 ec       	ldi	r28, 0xC1	; 193
     3c4:	d1 e0       	ldi	r29, 0x01	; 1
     3c6:	00 e0       	ldi	r16, 0x00	; 0
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <__do_global_ctors+0x16>
     3ca:	21 97       	sbiw	r28, 0x01	; 1
     3cc:	01 09       	sbc	r16, r1
     3ce:	80 2f       	mov	r24, r16
     3d0:	fe 01       	movw	r30, r28
     3d2:	0e 94 39 24 	call	0x4872	; 0x4872 <__tablejump2__>
     3d6:	cf 3b       	cpi	r28, 0xBF	; 191
     3d8:	d1 07       	cpc	r29, r17
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	08 07       	cpc	r16, r24
     3de:	a9 f7       	brne	.-22     	; 0x3ca <__do_global_ctors+0xa>
     3e0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <main>
     3e4:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__do_global_dtors>

000003e8 <__bad_interrupt>:
     3e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ec <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     3ec:	08 95       	ret

000003ee <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
volatile uint8_t DatabaseStatusRegister;

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     3ee:	63 30       	cpi	r22, 0x03	; 3
     3f0:	29 f4       	brne	.+10     	; 0x3fc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe>
     3f2:	fa 01       	movw	r30, r20
     3f4:	21 81       	ldd	r18, Z+1	; 0x01
     3f6:	fc 01       	movw	r30, r24
     3f8:	26 87       	std	Z+14, r18	; 0x0e
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1a>
	
	if (addr == REGISTER_DATABASE_EN)
     3fc:	66 35       	cpi	r22, 0x56	; 86
     3fe:	21 f4       	brne	.+8      	; 0x408 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1a>
	{ 
		DatabaseStatusRegister = data[0];
     400:	fa 01       	movw	r30, r20
     402:	20 81       	ld	r18, Z
     404:	20 93 36 21 	sts	0x2136, r18
	}
	
	switch (PIC_ID)
     408:	fc 01       	movw	r30, r24
     40a:	26 85       	ldd	r18, Z+14	; 0x0e
     40c:	21 11       	cpse	r18, r1
     40e:	01 c0       	rjmp	.+2      	; 0x412 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x24>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     410:	14 86       	std	Z+12, r1	; 0x0c
     412:	08 95       	ret

00000414 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     414:	08 95       	ret

00000416 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
{
	//no code
}

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
     41c:	da 01       	movw	r26, r20
     41e:	a9 01       	movw	r20, r18
	if (addr == 0x0400)
	{
		//ConvertData((void*)&DATA, (void*)data, length);
	}
	
	if (addr == VARIABLE_ADDR_PROFINDEX)
     420:	67 30       	cpi	r22, 0x07	; 7
     422:	71 05       	cpc	r23, r1
     424:	39 f4       	brne	.+14     	; 0x434 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1e>
	{
		profileIndex = swap(*((uint16_t*)data));
     426:	8d 91       	ld	r24, X+
     428:	9c 91       	ld	r25, X
     42a:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     42e:	88 8f       	std	Y+24, r24	; 0x18
     430:	99 8f       	std	Y+25, r25	; 0x19
     432:	1c c0       	rjmp	.+56     	; 0x46c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x56>
	}
	
	if (addr == STRUCT_ADDR_DATA)
     434:	61 30       	cpi	r22, 0x01	; 1
     436:	71 05       	cpc	r23, r1
     438:	c9 f4       	brne	.+50     	; 0x46c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x56>
	{
		//memcpy((void*)&m_structDGUSDATA[PROFILE_FAST], (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA[PROFILE_FAST], (void*)data, length);
		if (profile <= 4) 
     43a:	ed 85       	ldd	r30, Y+13	; 0x0d
     43c:	e5 30       	cpi	r30, 0x05	; 5
     43e:	a0 f4       	brcc	.+40     	; 0x468 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
			ConvertData((void*)&m_structDGUSDATA[profile], (void*)data, length);
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	cf 01       	movw	r24, r30
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	8e 1b       	sub	r24, r30
     456:	9f 0b       	sbc	r25, r31
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	bd 01       	movw	r22, r26
     45e:	89 5c       	subi	r24, 0xC9	; 201
     460:	9e 4d       	sbci	r25, 0xDE	; 222
     462:	0e 94 98 06 	call	0xd30	; 0xd30 <_Z11ConvertDataPvS_jj>
     466:	02 c0       	rjmp	.+4      	; 0x46c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x56>
		else
			CLaserBoard::Beep();
     468:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN11CLaserBoard4BeepEv>
	}
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <_ZN16CLaserControlAppC1Ev>:
volatile DGUS_DATA m_structDGUSDATA[4];

extern uint16_t swap(uint16_t data);

// default constructor
CLaserControlApp::CLaserControlApp()
     472:	2a e4       	ldi	r18, 0x4A	; 74
     474:	30 e2       	ldi	r19, 0x20	; 32
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
     47a:	31 83       	std	Z+1, r19	; 0x01
     47c:	08 95       	ret

0000047e <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     47e:	2a e4       	ldi	r18, 0x4A	; 74
     480:	30 e2       	ldi	r19, 0x20	; 32
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
     486:	31 83       	std	Z+1, r19	; 0x01
     488:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN16CMBEventsHandlerD1Ev>
     48c:	08 95       	ret

0000048e <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = PROFILE_FAST;
}

void CLaserControlApp::Start()
{	
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	1f 92       	push	r1
     498:	1f 92       	push	r1
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_WORK_IDLE);
     4a0:	8a e0       	ldi	r24, 0x0A	; 10
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     4a8:	89 83       	std	Y+1, r24	; 0x01
     4aa:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     4ac:	22 e0       	ldi	r18, 0x02	; 2
     4ae:	ae 01       	movw	r20, r28
     4b0:	4f 5f       	subi	r20, 0xFF	; 255
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	63 e0       	ldi	r22, 0x03	; 3
     4b6:	f8 01       	movw	r30, r16
     4b8:	82 8d       	ldd	r24, Z+26	; 0x1a
     4ba:	93 8d       	ldd	r25, Z+27	; 0x1b
     4bc:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     4c0:	f8 01       	movw	r30, r16
     4c2:	82 8d       	ldd	r24, Z+26	; 0x1a
     4c4:	93 8d       	ldd	r25, Z+27	; 0x1b
     4c6:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA[PROFILE_FAST], sizeof(m_structDGUSDATA[PROFILE_FAST]));
     4ca:	2e e0       	ldi	r18, 0x0E	; 14
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	4f e6       	ldi	r20, 0x6F	; 111
     4d0:	51 e2       	ldi	r21, 0x21	; 33
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	f8 01       	movw	r30, r16
     4d8:	82 8d       	ldd	r24, Z+26	; 0x1a
     4da:	93 8d       	ldd	r25, Z+27	; 0x1b
     4dc:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     4e0:	f8 01       	movw	r30, r16
     4e2:	82 8d       	ldd	r24, Z+26	; 0x1a
     4e4:	93 8d       	ldd	r25, Z+27	; 0x1b
     4e6:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	f8 01       	movw	r30, r16
     4ee:	84 87       	std	Z+12, r24	; 0x0c
}
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	08 95       	ret

000004fe <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     4fe:	fc 01       	movw	r30, r24
     500:	44 89       	ldd	r20, Z+20	; 0x14
     502:	55 89       	ldd	r21, Z+21	; 0x15
     504:	56 95       	lsr	r21
     506:	47 95       	ror	r20
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	68 ee       	ldi	r22, 0xE8	; 232
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	8f e7       	ldi	r24, 0x7F	; 127
     510:	93 e2       	ldi	r25, 0x23	; 35
     512:	0e 94 14 21 	call	0x4228	; 0x4228 <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     516:	8f e7       	ldi	r24, 0x7F	; 127
     518:	93 e2       	ldi	r25, 0x23	; 35
     51a:	0e 94 48 21 	call	0x4290	; 0x4290 <_ZN12CSoundPlayer9SoundStopEv>
     51e:	08 95       	ret

00000520 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     520:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN16CLaserControlApp12OnLaserTimerEv>
     524:	08 95       	ret

00000526 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "Periphery/CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     526:	82 e7       	ldi	r24, 0x72	; 114
     528:	91 e2       	ldi	r25, 0x21	; 33
     52a:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     52e:	8f e6       	ldi	r24, 0x6F	; 111
     530:	91 e2       	ldi	r25, 0x21	; 33
     532:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <_ZN7CTimerFC1Ev>
     536:	08 95       	ret

00000538 <_GLOBAL__sub_D_timer>:
     538:	8f e6       	ldi	r24, 0x6F	; 111
     53a:	91 e2       	ldi	r25, 0x21	; 33
     53c:	0e 94 fe 23 	call	0x47fc	; 0x47fc <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "Periphery/CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     540:	82 e7       	ldi	r24, 0x72	; 114
     542:	91 e2       	ldi	r25, 0x21	; 33
     544:	0e 94 40 22 	call	0x4480	; 0x4480 <_ZN7CTimerCD1Ev>
     548:	08 95       	ret

0000054a <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     54a:	8f 92       	push	r8
     54c:	9f 92       	push	r9
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     564:	6a 8f       	std	Y+26, r22	; 0x1a
     566:	7b 8f       	std	Y+27, r23	; 0x1b
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     568:	46 e0       	ldi	r20, 0x06	; 6
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	82 e7       	ldi	r24, 0x72	; 114
     56e:	91 e2       	ldi	r25, 0x21	; 33
     570:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     574:	68 ea       	ldi	r22, 0xA8	; 168
     576:	71 e6       	ldi	r23, 0x61	; 97
     578:	82 e7       	ldi	r24, 0x72	; 114
     57a:	91 e2       	ldi	r25, 0x21	; 33
     57c:	0e 94 af 21 	call	0x435e	; 0x435e <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	ae 01       	movw	r20, r28
     584:	6a e0       	ldi	r22, 0x0A	; 10
     586:	72 e0       	ldi	r23, 0x02	; 2
     588:	82 e7       	ldi	r24, 0x72	; 114
     58a:	91 e2       	ldi	r25, 0x21	; 33
     58c:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     590:	1e 86       	std	Y+14, r1	; 0x0e
	update = false;
     592:	1f 86       	std	Y+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA[PROFILE_FAST].Frequency = 10; // 10 Hz
     594:	e7 e3       	ldi	r30, 0x37	; 55
     596:	f1 e2       	ldi	r31, 0x21	; 33
     598:	8a e0       	ldi	r24, 0x0A	; 10
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	80 af       	std	Z+56, r24	; 0x38
     59e:	91 af       	std	Z+57, r25	; 0x39
	m_structDGUSDATA[PROFILE_FAST].DutyCycle = 50; // 50%
     5a0:	09 e7       	ldi	r16, 0x79	; 121
     5a2:	11 e2       	ldi	r17, 0x21	; 33
     5a4:	0f 2e       	mov	r0, r31
     5a6:	f2 e3       	ldi	r31, 0x32	; 50
     5a8:	af 2e       	mov	r10, r31
     5aa:	b1 2c       	mov	r11, r1
     5ac:	f0 2d       	mov	r31, r0
     5ae:	d8 01       	movw	r26, r16
     5b0:	ad 92       	st	X+, r10
     5b2:	bc 92       	st	X, r11
     5b4:	11 97       	sbiw	r26, 0x01	; 1
	m_structDGUSDATA[PROFILE_FAST].Duration  = ((1000 / m_structDGUSDATA[PROFILE_FAST].Frequency) * m_structDGUSDATA[PROFILE_FAST].DutyCycle) / 100; // ms
     5b6:	60 ad       	ldd	r22, Z+56	; 0x38
     5b8:	71 ad       	ldd	r23, Z+57	; 0x39
     5ba:	ed 90       	ld	r14, X+
     5bc:	fc 90       	ld	r15, X
     5be:	0f 2e       	mov	r0, r31
     5c0:	f8 ee       	ldi	r31, 0xE8	; 232
     5c2:	cf 2e       	mov	r12, r31
     5c4:	f3 e0       	ldi	r31, 0x03	; 3
     5c6:	df 2e       	mov	r13, r31
     5c8:	f0 2d       	mov	r31, r0
     5ca:	c6 01       	movw	r24, r12
     5cc:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodhi4>
     5d0:	6e 9d       	mul	r22, r14
     5d2:	90 01       	movw	r18, r0
     5d4:	6f 9d       	mul	r22, r15
     5d6:	30 0d       	add	r19, r0
     5d8:	7e 9d       	mul	r23, r14
     5da:	30 0d       	add	r19, r0
     5dc:	11 24       	eor	r1, r1
     5de:	36 95       	lsr	r19
     5e0:	27 95       	ror	r18
     5e2:	36 95       	lsr	r19
     5e4:	27 95       	ror	r18
     5e6:	ab e7       	ldi	r26, 0x7B	; 123
     5e8:	b4 e1       	ldi	r27, 0x14	; 20
     5ea:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     5ee:	96 95       	lsr	r25
     5f0:	87 95       	ror	r24
     5f2:	82 af       	std	Z+58, r24	; 0x3a
     5f4:	93 af       	std	Z+59, r25	; 0x3b
	m_structDGUSDATA[PROFILE_FAST].Intensity = 200; // W
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f8 ec       	ldi	r31, 0xC8	; 200
     5fa:	ef 2e       	mov	r14, r31
     5fc:	f1 2c       	mov	r15, r1
     5fe:	f0 2d       	mov	r31, r0
     600:	e4 ae       	std	Z+60, r14	; 0x3c
     602:	f5 ae       	std	Z+61, r15	; 0x3d
	m_structDGUSDATA[PROFILE_FAST].Power     = (m_structDGUSDATA[PROFILE_FAST].Intensity * m_structDGUSDATA[PROFILE_FAST].DutyCycle) / 100; // W
     604:	84 ad       	ldd	r24, Z+60	; 0x3c
     606:	95 ad       	ldd	r25, Z+61	; 0x3d
     608:	d8 01       	movw	r26, r16
     60a:	4d 91       	ld	r20, X+
     60c:	5c 91       	ld	r21, X
     60e:	48 9f       	mul	r20, r24
     610:	90 01       	movw	r18, r0
     612:	49 9f       	mul	r20, r25
     614:	30 0d       	add	r19, r0
     616:	58 9f       	mul	r21, r24
     618:	30 0d       	add	r19, r0
     61a:	11 24       	eor	r1, r1
     61c:	36 95       	lsr	r19
     61e:	27 95       	ror	r18
     620:	36 95       	lsr	r19
     622:	27 95       	ror	r18
     624:	ab e7       	ldi	r26, 0x7B	; 123
     626:	b4 e1       	ldi	r27, 0x14	; 20
     628:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     62c:	96 95       	lsr	r25
     62e:	87 95       	ror	r24
     630:	80 93 75 21 	sts	0x2175, r24
     634:	90 93 76 21 	sts	0x2176, r25
	m_structDGUSDATA[PROFILE_FAST].Energy    = (m_structDGUSDATA[PROFILE_FAST].Intensity * m_structDGUSDATA[PROFILE_FAST].Duration) / 1000; // J
     638:	84 ad       	ldd	r24, Z+60	; 0x3c
     63a:	95 ad       	ldd	r25, Z+61	; 0x3d
     63c:	42 ad       	ldd	r20, Z+58	; 0x3a
     63e:	53 ad       	ldd	r21, Z+59	; 0x3b
     640:	48 9f       	mul	r20, r24
     642:	90 01       	movw	r18, r0
     644:	49 9f       	mul	r20, r25
     646:	30 0d       	add	r19, r0
     648:	58 9f       	mul	r21, r24
     64a:	30 0d       	add	r19, r0
     64c:	11 24       	eor	r1, r1
     64e:	36 95       	lsr	r19
     650:	27 95       	ror	r18
     652:	36 95       	lsr	r19
     654:	27 95       	ror	r18
     656:	36 95       	lsr	r19
     658:	27 95       	ror	r18
     65a:	a5 ec       	ldi	r26, 0xC5	; 197
     65c:	b0 e2       	ldi	r27, 0x20	; 32
     65e:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     662:	92 95       	swap	r25
     664:	82 95       	swap	r24
     666:	8f 70       	andi	r24, 0x0F	; 15
     668:	89 27       	eor	r24, r25
     66a:	9f 70       	andi	r25, 0x0F	; 15
     66c:	89 27       	eor	r24, r25
     66e:	80 93 77 21 	sts	0x2177, r24
     672:	90 93 78 21 	sts	0x2178, r25
	
	// Slow profile
	m_structDGUSDATA[PROFILE_SLOW].Frequency = 1; // 10 Hz
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	84 8f       	std	Z+28, r24	; 0x1c
     67c:	95 8f       	std	Z+29, r25	; 0x1d
	m_structDGUSDATA[PROFILE_SLOW].DutyCycle = 50; // 50%
     67e:	a6 a2       	std	Z+38, r10	; 0x26
     680:	b7 a2       	std	Z+39, r11	; 0x27
	m_structDGUSDATA[PROFILE_SLOW].Duration  = ((1000 / m_structDGUSDATA[PROFILE_SLOW].Frequency) * m_structDGUSDATA[PROFILE_SLOW].DutyCycle) / 100; // ms
     682:	64 8d       	ldd	r22, Z+28	; 0x1c
     684:	75 8d       	ldd	r23, Z+29	; 0x1d
     686:	86 a0       	ldd	r8, Z+38	; 0x26
     688:	97 a0       	ldd	r9, Z+39	; 0x27
     68a:	c6 01       	movw	r24, r12
     68c:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodhi4>
     690:	68 9d       	mul	r22, r8
     692:	90 01       	movw	r18, r0
     694:	69 9d       	mul	r22, r9
     696:	30 0d       	add	r19, r0
     698:	78 9d       	mul	r23, r8
     69a:	30 0d       	add	r19, r0
     69c:	11 24       	eor	r1, r1
     69e:	36 95       	lsr	r19
     6a0:	27 95       	ror	r18
     6a2:	36 95       	lsr	r19
     6a4:	27 95       	ror	r18
     6a6:	ab e7       	ldi	r26, 0x7B	; 123
     6a8:	b4 e1       	ldi	r27, 0x14	; 20
     6aa:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     6ae:	96 95       	lsr	r25
     6b0:	87 95       	ror	r24
     6b2:	86 8f       	std	Z+30, r24	; 0x1e
     6b4:	97 8f       	std	Z+31, r25	; 0x1f
	m_structDGUSDATA[PROFILE_SLOW].Intensity = 200; // W
     6b6:	e0 a2       	std	Z+32, r14	; 0x20
     6b8:	f1 a2       	std	Z+33, r15	; 0x21
	m_structDGUSDATA[PROFILE_SLOW].Power     = (m_structDGUSDATA[PROFILE_SLOW].Intensity * m_structDGUSDATA[PROFILE_SLOW].DutyCycle) / 100; // W
     6ba:	80 a1       	ldd	r24, Z+32	; 0x20
     6bc:	91 a1       	ldd	r25, Z+33	; 0x21
     6be:	46 a1       	ldd	r20, Z+38	; 0x26
     6c0:	57 a1       	ldd	r21, Z+39	; 0x27
     6c2:	48 9f       	mul	r20, r24
     6c4:	90 01       	movw	r18, r0
     6c6:	49 9f       	mul	r20, r25
     6c8:	30 0d       	add	r19, r0
     6ca:	58 9f       	mul	r21, r24
     6cc:	30 0d       	add	r19, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	36 95       	lsr	r19
     6d2:	27 95       	ror	r18
     6d4:	36 95       	lsr	r19
     6d6:	27 95       	ror	r18
     6d8:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     6dc:	96 95       	lsr	r25
     6de:	87 95       	ror	r24
     6e0:	82 a3       	std	Z+34, r24	; 0x22
     6e2:	93 a3       	std	Z+35, r25	; 0x23
	m_structDGUSDATA[PROFILE_SLOW].Energy    = (m_structDGUSDATA[PROFILE_SLOW].Intensity * m_structDGUSDATA[PROFILE_SLOW].Duration) / 1000; // J
     6e4:	80 a1       	ldd	r24, Z+32	; 0x20
     6e6:	91 a1       	ldd	r25, Z+33	; 0x21
     6e8:	46 8d       	ldd	r20, Z+30	; 0x1e
     6ea:	57 8d       	ldd	r21, Z+31	; 0x1f
     6ec:	48 9f       	mul	r20, r24
     6ee:	90 01       	movw	r18, r0
     6f0:	49 9f       	mul	r20, r25
     6f2:	30 0d       	add	r19, r0
     6f4:	58 9f       	mul	r21, r24
     6f6:	30 0d       	add	r19, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	36 95       	lsr	r19
     6fc:	27 95       	ror	r18
     6fe:	36 95       	lsr	r19
     700:	27 95       	ror	r18
     702:	36 95       	lsr	r19
     704:	27 95       	ror	r18
     706:	a5 ec       	ldi	r26, 0xC5	; 197
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     70e:	92 95       	swap	r25
     710:	82 95       	swap	r24
     712:	8f 70       	andi	r24, 0x0F	; 15
     714:	89 27       	eor	r24, r25
     716:	9f 70       	andi	r25, 0x0F	; 15
     718:	89 27       	eor	r24, r25
     71a:	84 a3       	std	Z+36, r24	; 0x24
     71c:	95 a3       	std	Z+37, r25	; 0x25
	
	// Medium profile
	m_structDGUSDATA[PROFILE_MEDIUM].Frequency = 5; // 10 Hz
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	82 a7       	std	Z+42, r24	; 0x2a
     724:	93 a7       	std	Z+43, r25	; 0x2b
	m_structDGUSDATA[PROFILE_MEDIUM].DutyCycle = 50; // 50%
     726:	a4 aa       	std	Z+52, r10	; 0x34
     728:	b5 aa       	std	Z+53, r11	; 0x35
	m_structDGUSDATA[PROFILE_MEDIUM].Duration  = ((1000 / m_structDGUSDATA[PROFILE_MEDIUM].Frequency) * m_structDGUSDATA[PROFILE_MEDIUM].DutyCycle) / 100; // ms
     72a:	62 a5       	ldd	r22, Z+42	; 0x2a
     72c:	73 a5       	ldd	r23, Z+43	; 0x2b
     72e:	a4 a8       	ldd	r10, Z+52	; 0x34
     730:	b5 a8       	ldd	r11, Z+53	; 0x35
     732:	c6 01       	movw	r24, r12
     734:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodhi4>
     738:	6a 9d       	mul	r22, r10
     73a:	90 01       	movw	r18, r0
     73c:	6b 9d       	mul	r22, r11
     73e:	30 0d       	add	r19, r0
     740:	7a 9d       	mul	r23, r10
     742:	30 0d       	add	r19, r0
     744:	11 24       	eor	r1, r1
     746:	36 95       	lsr	r19
     748:	27 95       	ror	r18
     74a:	36 95       	lsr	r19
     74c:	27 95       	ror	r18
     74e:	ab e7       	ldi	r26, 0x7B	; 123
     750:	b4 e1       	ldi	r27, 0x14	; 20
     752:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     756:	96 95       	lsr	r25
     758:	87 95       	ror	r24
     75a:	84 a7       	std	Z+44, r24	; 0x2c
     75c:	95 a7       	std	Z+45, r25	; 0x2d
	m_structDGUSDATA[PROFILE_MEDIUM].Intensity = 200; // W
     75e:	e6 a6       	std	Z+46, r14	; 0x2e
     760:	f7 a6       	std	Z+47, r15	; 0x2f
	m_structDGUSDATA[PROFILE_MEDIUM].Power     = (m_structDGUSDATA[PROFILE_MEDIUM].Intensity * m_structDGUSDATA[PROFILE_MEDIUM].DutyCycle) / 100; // W
     762:	86 a5       	ldd	r24, Z+46	; 0x2e
     764:	97 a5       	ldd	r25, Z+47	; 0x2f
     766:	44 a9       	ldd	r20, Z+52	; 0x34
     768:	55 a9       	ldd	r21, Z+53	; 0x35
     76a:	48 9f       	mul	r20, r24
     76c:	90 01       	movw	r18, r0
     76e:	49 9f       	mul	r20, r25
     770:	30 0d       	add	r19, r0
     772:	58 9f       	mul	r21, r24
     774:	30 0d       	add	r19, r0
     776:	11 24       	eor	r1, r1
     778:	36 95       	lsr	r19
     77a:	27 95       	ror	r18
     77c:	36 95       	lsr	r19
     77e:	27 95       	ror	r18
     780:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	80 ab       	std	Z+48, r24	; 0x30
     78a:	91 ab       	std	Z+49, r25	; 0x31
	m_structDGUSDATA[PROFILE_MEDIUM].Energy    = (m_structDGUSDATA[PROFILE_MEDIUM].Intensity * m_structDGUSDATA[PROFILE_MEDIUM].Duration) / 1000; // J
     78c:	86 a5       	ldd	r24, Z+46	; 0x2e
     78e:	97 a5       	ldd	r25, Z+47	; 0x2f
     790:	44 a5       	ldd	r20, Z+44	; 0x2c
     792:	55 a5       	ldd	r21, Z+45	; 0x2d
     794:	48 9f       	mul	r20, r24
     796:	90 01       	movw	r18, r0
     798:	49 9f       	mul	r20, r25
     79a:	30 0d       	add	r19, r0
     79c:	58 9f       	mul	r21, r24
     79e:	30 0d       	add	r19, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	36 95       	lsr	r19
     7a4:	27 95       	ror	r18
     7a6:	36 95       	lsr	r19
     7a8:	27 95       	ror	r18
     7aa:	36 95       	lsr	r19
     7ac:	27 95       	ror	r18
     7ae:	a5 ec       	ldi	r26, 0xC5	; 197
     7b0:	b0 e2       	ldi	r27, 0x20	; 32
     7b2:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     7b6:	92 95       	swap	r25
     7b8:	82 95       	swap	r24
     7ba:	8f 70       	andi	r24, 0x0F	; 15
     7bc:	89 27       	eor	r24, r25
     7be:	9f 70       	andi	r25, 0x0F	; 15
     7c0:	89 27       	eor	r24, r25
     7c2:	82 ab       	std	Z+50, r24	; 0x32
     7c4:	93 ab       	std	Z+51, r25	; 0x33
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA[PROFILE_FAST].Frequency) * 10;
     7c6:	60 ad       	ldd	r22, Z+56	; 0x38
     7c8:	71 ad       	ldd	r23, Z+57	; 0x39
     7ca:	8a e6       	ldi	r24, 0x6A	; 106
     7cc:	98 e1       	ldi	r25, 0x18	; 24
     7ce:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodhi4>
     7d2:	ab 01       	movw	r20, r22
     7d4:	44 0f       	add	r20, r20
     7d6:	55 1f       	adc	r21, r21
     7d8:	66 0f       	add	r22, r22
     7da:	77 1f       	adc	r23, r23
     7dc:	66 0f       	add	r22, r22
     7de:	77 1f       	adc	r23, r23
     7e0:	66 0f       	add	r22, r22
     7e2:	77 1f       	adc	r23, r23
     7e4:	46 0f       	add	r20, r22
     7e6:	57 1f       	adc	r21, r23
     7e8:	48 8b       	std	Y+16, r20	; 0x10
     7ea:	59 8b       	std	Y+17, r21	; 0x11
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA[PROFILE_FAST].DutyCycle);
     7ec:	d8 01       	movw	r26, r16
     7ee:	ed 91       	ld	r30, X+
     7f0:	fc 91       	ld	r31, X
     7f2:	9a 01       	movw	r18, r20
     7f4:	36 95       	lsr	r19
     7f6:	27 95       	ror	r18
     7f8:	36 95       	lsr	r19
     7fa:	27 95       	ror	r18
     7fc:	ab e7       	ldi	r26, 0x7B	; 123
     7fe:	b4 e1       	ldi	r27, 0x14	; 20
     800:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     804:	96 95       	lsr	r25
     806:	87 95       	ror	r24
     808:	8e 9f       	mul	r24, r30
     80a:	90 01       	movw	r18, r0
     80c:	8f 9f       	mul	r24, r31
     80e:	30 0d       	add	r19, r0
     810:	9e 9f       	mul	r25, r30
     812:	30 0d       	add	r19, r0
     814:	11 24       	eor	r1, r1
     816:	42 1b       	sub	r20, r18
     818:	53 0b       	sbc	r21, r19
     81a:	4a 8b       	std	Y+18, r20	; 0x12
     81c:	5b 8b       	std	Y+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     81e:	47 e0       	ldi	r20, 0x07	; 7
     820:	63 e0       	ldi	r22, 0x03	; 3
     822:	8f e6       	ldi	r24, 0x6F	; 111
     824:	91 e2       	ldi	r25, 0x21	; 33
     826:	0e 94 1f 23 	call	0x463e	; 0x463e <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     82a:	68 89       	ldd	r22, Y+16	; 0x10
     82c:	79 89       	ldd	r23, Y+17	; 0x11
     82e:	8f e6       	ldi	r24, 0x6F	; 111
     830:	91 e2       	ldi	r25, 0x21	; 33
     832:	0e 94 6d 23 	call	0x46da	; 0x46da <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     836:	6a 89       	ldd	r22, Y+18	; 0x12
     838:	7b 89       	ldd	r23, Y+19	; 0x13
     83a:	8f e6       	ldi	r24, 0x6F	; 111
     83c:	91 e2       	ldi	r25, 0x21	; 33
     83e:	0e 94 72 23 	call	0x46e4	; 0x46e4 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     842:	6a 89       	ldd	r22, Y+18	; 0x12
     844:	7b 89       	ldd	r23, Y+19	; 0x13
     846:	8f e6       	ldi	r24, 0x6F	; 111
     848:	91 e2       	ldi	r25, 0x21	; 33
     84a:	0e 94 77 23 	call	0x46ee	; 0x46ee <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	ae 01       	movw	r20, r28
     852:	60 e9       	ldi	r22, 0x90	; 144
     854:	72 e0       	ldi	r23, 0x02	; 2
     856:	8f e6       	ldi	r24, 0x6F	; 111
     858:	91 e2       	ldi	r25, 0x21	; 33
     85a:	0e 94 86 23 	call	0x470c	; 0x470c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     85e:	60 e1       	ldi	r22, 0x10	; 16
     860:	8f e6       	ldi	r24, 0x6F	; 111
     862:	91 e2       	ldi	r25, 0x21	; 33
     864:	0e 94 4f 23 	call	0x469e	; 0x469e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     868:	60 e2       	ldi	r22, 0x20	; 32
     86a:	8f e6       	ldi	r24, 0x6F	; 111
     86c:	91 e2       	ldi	r25, 0x21	; 33
     86e:	0e 94 4f 23 	call	0x469e	; 0x469e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     872:	60 e1       	ldi	r22, 0x10	; 16
     874:	8f e6       	ldi	r24, 0x6F	; 111
     876:	91 e2       	ldi	r25, 0x21	; 33
     878:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     87c:	60 e2       	ldi	r22, 0x20	; 32
     87e:	8f e6       	ldi	r24, 0x6F	; 111
     880:	91 e2       	ldi	r25, 0x21	; 33
     882:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = PROFILE_FAST;
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	8d 87       	std	Y+13, r24	; 0x0d
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	08 95       	ret

000008a4 <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKFAST;
}

// Process GUI
void CLaserControlApp::Run()
{	
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	60 97       	sbiw	r28, 0x10	; 16
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     8bc:	42 e0       	ldi	r20, 0x02	; 2
     8be:	63 e0       	ldi	r22, 0x03	; 3
     8c0:	dc 01       	movw	r26, r24
     8c2:	5a 96       	adiw	r26, 0x1a	; 26
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	5b 97       	sbiw	r26, 0x1b	; 27
     8ca:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     8ce:	f8 01       	movw	r30, r16
     8d0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8d2:	93 8d       	ldd	r25, Z+27	; 0x1b
     8d4:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     8d8:	d8 01       	movw	r26, r16
     8da:	5a 96       	adiw	r26, 0x1a	; 26
     8dc:	8d 91       	ld	r24, X+
     8de:	9c 91       	ld	r25, X
     8e0:	5b 97       	sbiw	r26, 0x1b	; 27
     8e2:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e6:	bf ef       	ldi	r27, 0xFF	; 255
     8e8:	e1 ee       	ldi	r30, 0xE1	; 225
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	b1 50       	subi	r27, 0x01	; 1
     8ee:	e0 40       	sbci	r30, 0x00	; 0
     8f0:	f0 40       	sbci	r31, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <_ZN16CLaserControlApp3RunEv+0x48>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <_ZN16CLaserControlApp3RunEv+0x52>
     8f6:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     8f8:	d8 01       	movw	r26, r16
     8fa:	1f 96       	adiw	r26, 0x0f	; 15
     8fc:	8c 91       	ld	r24, X
     8fe:	1f 97       	sbiw	r26, 0x0f	; 15
     900:	81 11       	cpse	r24, r1
     902:	1e c0       	rjmp	.+60     	; 0x940 <_ZN16CLaserControlApp3RunEv+0x9c>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     904:	4e e0       	ldi	r20, 0x0E	; 14
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	5a 96       	adiw	r26, 0x1a	; 26
     90c:	8d 91       	ld	r24, X+
     90e:	9c 91       	ld	r25, X
     910:	5b 97       	sbiw	r26, 0x1b	; 27
     912:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     916:	f8 01       	movw	r30, r16
     918:	82 8d       	ldd	r24, Z+26	; 0x1a
     91a:	93 8d       	ldd	r25, Z+27	; 0x1b
     91c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     920:	d8 01       	movw	r26, r16
     922:	5a 96       	adiw	r26, 0x1a	; 26
     924:	8d 91       	ld	r24, X+
     926:	9c 91       	ld	r25, X
     928:	5b 97       	sbiw	r26, 0x1b	; 27
     92a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN9CMBSender18WaitMODBUSListenerEv>
     92e:	bf ef       	ldi	r27, 0xFF	; 255
     930:	e1 ee       	ldi	r30, 0xE1	; 225
     932:	f4 e0       	ldi	r31, 0x04	; 4
     934:	b1 50       	subi	r27, 0x01	; 1
     936:	e0 40       	sbci	r30, 0x00	; 0
     938:	f0 40       	sbci	r31, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <_ZN16CLaserControlApp3RunEv+0x90>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <_ZN16CLaserControlApp3RunEv+0x9a>
     93e:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     940:	d8 01       	movw	r26, r16
     942:	1c 96       	adiw	r26, 0x0c	; 12
     944:	8c 91       	ld	r24, X
     946:	86 30       	cpi	r24, 0x06	; 6
     948:	09 f4       	brne	.+2      	; 0x94c <_ZN16CLaserControlApp3RunEv+0xa8>
     94a:	59 c0       	rjmp	.+178    	; 0x9fe <_ZN16CLaserControlApp3RunEv+0x15a>
     94c:	28 f4       	brcc	.+10     	; 0x958 <_ZN16CLaserControlApp3RunEv+0xb4>
     94e:	88 23       	and	r24, r24
     950:	61 f0       	breq	.+24     	; 0x96a <_ZN16CLaserControlApp3RunEv+0xc6>
     952:	85 30       	cpi	r24, 0x05	; 5
     954:	29 f1       	breq	.+74     	; 0x9a0 <_ZN16CLaserControlApp3RunEv+0xfc>
     956:	17 c1       	rjmp	.+558    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
     958:	88 30       	cpi	r24, 0x08	; 8
     95a:	09 f4       	brne	.+2      	; 0x95e <_ZN16CLaserControlApp3RunEv+0xba>
     95c:	be c0       	rjmp	.+380    	; 0xada <_ZN16CLaserControlApp3RunEv+0x236>
     95e:	08 f4       	brcc	.+2      	; 0x962 <_ZN16CLaserControlApp3RunEv+0xbe>
     960:	71 c0       	rjmp	.+226    	; 0xa44 <_ZN16CLaserControlApp3RunEv+0x1a0>
     962:	81 31       	cpi	r24, 0x11	; 17
     964:	09 f4       	brne	.+2      	; 0x968 <_ZN16CLaserControlApp3RunEv+0xc4>
     966:	f4 c0       	rjmp	.+488    	; 0xb50 <_ZN16CLaserControlApp3RunEv+0x2ac>
     968:	0e c1       	rjmp	.+540    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_MAINMENU);
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     976:	22 e0       	ldi	r18, 0x02	; 2
     978:	ae 01       	movw	r20, r28
     97a:	4f 5f       	subi	r20, 0xFF	; 255
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
     97e:	63 e0       	ldi	r22, 0x03	; 3
     980:	f8 01       	movw	r30, r16
     982:	82 8d       	ldd	r24, Z+26	; 0x1a
     984:	93 8d       	ldd	r25, Z+27	; 0x1b
     986:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     98a:	d8 01       	movw	r26, r16
     98c:	5a 96       	adiw	r26, 0x1a	; 26
     98e:	8d 91       	ld	r24, X+
     990:	9c 91       	ld	r25, X
     992:	5b 97       	sbiw	r26, 0x1b	; 27
     994:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKFAST;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	f8 01       	movw	r30, r16
     99c:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     99e:	f3 c0       	rjmp	.+486    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
			//state = APP_WORKFAST;
		break;
		case APP_WORKSTARTED:
			//state = APP_WORKFAST;
			
			if (!laserBoard.Footswitch())
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	93 e2       	ldi	r25, 0x23	; 35
     9a4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN11CLaserBoard10FootswitchEv>
     9a8:	81 11       	cpse	r24, r1
     9aa:	1a c0       	rjmp	.+52     	; 0x9e0 <_ZN16CLaserControlApp3RunEv+0x13c>
			{
				laserTimer.SetCOMPA(laserTimerDutyCycle);
     9ac:	d8 01       	movw	r26, r16
     9ae:	52 96       	adiw	r26, 0x12	; 18
     9b0:	6d 91       	ld	r22, X+
     9b2:	7c 91       	ld	r23, X
     9b4:	53 97       	sbiw	r26, 0x13	; 19
     9b6:	8f e6       	ldi	r24, 0x6F	; 111
     9b8:	91 e2       	ldi	r25, 0x21	; 33
     9ba:	0e 94 72 23 	call	0x46e4	; 0x46e4 <_ZN7CTimerF8SetCOMPAEj>
				laserTimer.SetCOMPB(laserTimerDutyCycle);
     9be:	f8 01       	movw	r30, r16
     9c0:	62 89       	ldd	r22, Z+18	; 0x12
     9c2:	73 89       	ldd	r23, Z+19	; 0x13
     9c4:	8f e6       	ldi	r24, 0x6F	; 111
     9c6:	91 e2       	ldi	r25, 0x21	; 33
     9c8:	0e 94 77 23 	call	0x46ee	; 0x46ee <_ZN7CTimerF8SetCOMPBEj>
				//laserTimer.SetPeriod(laserTimerPeriod);
				laserTimer.Start(laserTimerPeriod);
     9cc:	d8 01       	movw	r26, r16
     9ce:	50 96       	adiw	r26, 0x10	; 16
     9d0:	6d 91       	ld	r22, X+
     9d2:	7c 91       	ld	r23, X
     9d4:	51 97       	sbiw	r26, 0x11	; 17
     9d6:	8f e6       	ldi	r24, 0x6F	; 111
     9d8:	91 e2       	ldi	r25, 0x21	; 33
     9da:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN7CTimerF5StartEj>
     9de:	d3 c0       	rjmp	.+422    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
			}
			else
			{
				laserTimer.Stop();
     9e0:	8f e6       	ldi	r24, 0x6F	; 111
     9e2:	91 e2       	ldi	r25, 0x21	; 33
     9e4:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     9e8:	60 e1       	ldi	r22, 0x10	; 16
     9ea:	8f e6       	ldi	r24, 0x6F	; 111
     9ec:	91 e2       	ldi	r25, 0x21	; 33
     9ee:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     9f2:	60 e2       	ldi	r22, 0x20	; 32
     9f4:	8f e6       	ldi	r24, 0x6F	; 111
     9f6:	91 e2       	ldi	r25, 0x21	; 33
     9f8:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     9fc:	c4 c0       	rjmp	.+392    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     9fe:	80 e8       	ldi	r24, 0x80	; 128
     a00:	93 e2       	ldi	r25, 0x23	; 35
     a02:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     a06:	80 e8       	ldi	r24, 0x80	; 128
     a08:	93 e2       	ldi	r25, 0x23	; 35
     a0a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORK_IDLE);
     a0e:	8a e0       	ldi	r24, 0x0A	; 10
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a1a:	22 e0       	ldi	r18, 0x02	; 2
     a1c:	ae 01       	movw	r20, r28
     a1e:	4f 5f       	subi	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	f8 01       	movw	r30, r16
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	93 8d       	ldd	r25, Z+27	; 0x1b
     a2a:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     a2e:	d8 01       	movw	r26, r16
     a30:	5a 96       	adiw	r26, 0x1a	; 26
     a32:	8d 91       	ld	r24, X+
     a34:	9c 91       	ld	r25, X
     a36:	5b 97       	sbiw	r26, 0x1b	; 27
     a38:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTART;
     a3c:	84 e0       	ldi	r24, 0x04	; 4
     a3e:	f8 01       	movw	r30, r16
     a40:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     a42:	a1 c0       	rjmp	.+322    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
		case APP_WORKOnStart:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     a44:	d8 01       	movw	r26, r16
     a46:	56 96       	adiw	r26, 0x16	; 22
     a48:	4d 91       	ld	r20, X+
     a4a:	5c 91       	ld	r21, X
     a4c:	57 97       	sbiw	r26, 0x17	; 23
     a4e:	00 24       	eor	r0, r0
     a50:	56 95       	lsr	r21
     a52:	47 95       	ror	r20
     a54:	07 94       	ror	r0
     a56:	56 95       	lsr	r21
     a58:	47 95       	ror	r20
     a5a:	07 94       	ror	r0
     a5c:	54 2f       	mov	r21, r20
     a5e:	40 2d       	mov	r20, r0
     a60:	9a 01       	movw	r18, r20
     a62:	a1 e1       	ldi	r26, 0x11	; 17
     a64:	b4 e0       	ldi	r27, 0x04	; 4
     a66:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     a6a:	48 1b       	sub	r20, r24
     a6c:	59 0b       	sbc	r21, r25
     a6e:	56 95       	lsr	r21
     a70:	47 95       	ror	r20
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21
     a76:	96 95       	lsr	r25
     a78:	87 95       	ror	r24
     a7a:	92 95       	swap	r25
     a7c:	82 95       	swap	r24
     a7e:	8f 70       	andi	r24, 0x0F	; 15
     a80:	89 27       	eor	r24, r25
     a82:	9f 70       	andi	r25, 0x0F	; 15
     a84:	89 27       	eor	r24, r25
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	8f 87       	std	Y+15, r24	; 0x0f
     a90:	98 8b       	std	Y+16, r25	; 0x10
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     a92:	42 e0       	ldi	r20, 0x02	; 2
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	be 01       	movw	r22, r28
     a98:	61 5f       	subi	r22, 0xF1	; 241
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	8c ea       	ldi	r24, 0xAC	; 172
     a9e:	93 e2       	ldi	r25, 0x23	; 35
     aa0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORK_IDLE);
     aa4:	8a e0       	ldi	r24, 0x0A	; 10
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     ab0:	22 e0       	ldi	r18, 0x02	; 2
     ab2:	ae 01       	movw	r20, r28
     ab4:	4f 5f       	subi	r20, 0xFF	; 255
     ab6:	5f 4f       	sbci	r21, 0xFF	; 255
     ab8:	63 e0       	ldi	r22, 0x03	; 3
     aba:	f8 01       	movw	r30, r16
     abc:	82 8d       	ldd	r24, Z+26	; 0x1a
     abe:	93 8d       	ldd	r25, Z+27	; 0x1b
     ac0:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     ac4:	d8 01       	movw	r26, r16
     ac6:	5a 96       	adiw	r26, 0x1a	; 26
     ac8:	8d 91       	ld	r24, X+
     aca:	9c 91       	ld	r25, X
     acc:	5b 97       	sbiw	r26, 0x1b	; 27
     ace:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKSTARTED;
     ad2:	85 e0       	ldi	r24, 0x05	; 5
     ad4:	f8 01       	movw	r30, r16
     ad6:	84 87       	std	Z+12, r24	; 0x0c

				//laserTimer.Start(12500);
			}
		break;
     ad8:	56 c0       	rjmp	.+172    	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
		case APP_WORKOnStop:
			{
				uint16_t data = 0;
     ada:	1f 86       	std	Y+15, r1	; 0x0f
     adc:	18 8a       	std	Y+16, r1	; 0x10
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     ade:	42 e0       	ldi	r20, 0x02	; 2
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	be 01       	movw	r22, r28
     ae4:	61 5f       	subi	r22, 0xF1	; 241
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	8c ea       	ldi	r24, 0xAC	; 172
     aea:	93 e2       	ldi	r25, 0x23	; 35
     aec:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN4CSPI4SendEPhj>
				
				laserTimer.Stop();
     af0:	8f e6       	ldi	r24, 0x6F	; 111
     af2:	91 e2       	ldi	r25, 0x21	; 33
     af4:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     af8:	60 e1       	ldi	r22, 0x10	; 16
     afa:	8f e6       	ldi	r24, 0x6F	; 111
     afc:	91 e2       	ldi	r25, 0x21	; 33
     afe:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     b02:	60 e2       	ldi	r22, 0x20	; 32
     b04:	8f e6       	ldi	r24, 0x6F	; 111
     b06:	91 e2       	ldi	r25, 0x21	; 33
     b08:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	93 e2       	ldi	r25, 0x23	; 35
     b10:	0e 94 72 20 	call	0x40e4	; 0x40e4 <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	93 e2       	ldi	r25, 0x23	; 35
     b18:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t pic_id = 0;
     b1c:	19 82       	std	Y+1, r1	; 0x01
     b1e:	1a 82       	std	Y+2, r1	; 0x02
				pic_id = swap(PICID_WORK_IDLE);
     b20:	8a e0       	ldi	r24, 0x0A	; 10
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b2c:	22 e0       	ldi	r18, 0x02	; 2
     b2e:	ae 01       	movw	r20, r28
     b30:	4f 5f       	subi	r20, 0xFF	; 255
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	63 e0       	ldi	r22, 0x03	; 3
     b36:	d8 01       	movw	r26, r16
     b38:	5a 96       	adiw	r26, 0x1a	; 26
     b3a:	8d 91       	ld	r24, X+
     b3c:	9c 91       	ld	r25, X
     b3e:	5b 97       	sbiw	r26, 0x1b	; 27
     b40:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     b44:	f8 01       	movw	r30, r16
     b46:	82 8d       	ldd	r24, Z+26	; 0x1a
     b48:	93 8d       	ldd	r25, Z+27	; 0x1b
     b4a:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			}
		break;
     b4e:	1b c0       	rjmp	.+54     	; 0xb86 <_ZN16CLaserControlApp3RunEv+0x2e2>
		case APP_PHOTOTYPE6:
			//state = APP_WORKFAST;
		break;
		case APP_DATABASE_START:
			{
				uint16_t pic_id = swap(27 + 14 - 3);
     b50:	86 e2       	ldi	r24, 0x26	; 38
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z4swapj>
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b5c:	22 e0       	ldi	r18, 0x02	; 2
     b5e:	ae 01       	movw	r20, r28
     b60:	4f 5f       	subi	r20, 0xFF	; 255
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	d8 01       	movw	r26, r16
     b68:	5a 96       	adiw	r26, 0x1a	; 26
     b6a:	8d 91       	ld	r24, X+
     b6c:	9c 91       	ld	r25, X
     b6e:	5b 97       	sbiw	r26, 0x1b	; 27
     b70:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     b74:	f8 01       	movw	r30, r16
     b76:	82 8d       	ldd	r24, Z+26	; 0x1a
     b78:	93 8d       	ldd	r25, Z+27	; 0x1b
     b7a:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_DATABASE;
     b7e:	80 e1       	ldi	r24, 0x10	; 16
     b80:	d8 01       	movw	r26, r16
     b82:	1c 96       	adiw	r26, 0x0c	; 12
     b84:	8c 93       	st	X, r24
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
     b86:	f8 01       	movw	r30, r16
     b88:	87 85       	ldd	r24, Z+15	; 0x0f
     b8a:	88 23       	and	r24, r24
     b8c:	09 f1       	breq	.+66     	; 0xbd0 <_ZN16CLaserControlApp3RunEv+0x32c>
	{
		m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA[profile], sizeof(DGUS_DATA));
     b8e:	85 85       	ldd	r24, Z+13	; 0x0d
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	ac 01       	movw	r20, r24
     b98:	44 0f       	add	r20, r20
     b9a:	55 1f       	adc	r21, r21
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	44 0f       	add	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	48 1b       	sub	r20, r24
     ba6:	59 0b       	sbc	r21, r25
     ba8:	49 5c       	subi	r20, 0xC9	; 201
     baa:	5e 4d       	sbci	r21, 0xDE	; 222
     bac:	2e e0       	ldi	r18, 0x0E	; 14
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	82 8d       	ldd	r24, Z+26	; 0x1a
     bb6:	93 8d       	ldd	r25, Z+27	; 0x1b
     bb8:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
		m_cpSender->WaitMODBUSTransmitter();
     bbc:	d8 01       	movw	r26, r16
     bbe:	5a 96       	adiw	r26, 0x1a	; 26
     bc0:	8d 91       	ld	r24, X+
     bc2:	9c 91       	ld	r25, X
     bc4:	5b 97       	sbiw	r26, 0x1b	; 27
     bc6:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
     bca:	f8 01       	movw	r30, r16
     bcc:	17 86       	std	Z+15, r1	; 0x0f
     bce:	a6 c0       	rjmp	.+332    	; 0xd1c <_ZN16CLaserControlApp3RunEv+0x478>
	}
	else
	{
		// Fast profile
		DGUSDATA.DutyCycle = m_structDGUSDATA[profile].Duration * m_structDGUSDATA[profile].Frequency / 10;
     bd0:	85 85       	ldd	r24, Z+13	; 0x0d
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	fc 01       	movw	r30, r24
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	e8 1b       	sub	r30, r24
     be8:	f9 0b       	sbc	r31, r25
     bea:	e9 5c       	subi	r30, 0xC9	; 201
     bec:	fe 4d       	sbci	r31, 0xDE	; 222
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	93 81       	ldd	r25, Z+3	; 0x03
     bf2:	40 81       	ld	r20, Z
     bf4:	51 81       	ldd	r21, Z+1	; 0x01
     bf6:	48 9f       	mul	r20, r24
     bf8:	90 01       	movw	r18, r0
     bfa:	49 9f       	mul	r20, r25
     bfc:	30 0d       	add	r19, r0
     bfe:	58 9f       	mul	r21, r24
     c00:	30 0d       	add	r19, r0
     c02:	11 24       	eor	r1, r1
     c04:	ad ec       	ldi	r26, 0xCD	; 205
     c06:	bc ec       	ldi	r27, 0xCC	; 204
     c08:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     c0c:	7c 01       	movw	r14, r24
     c0e:	f6 94       	lsr	r15
     c10:	e7 94       	ror	r14
     c12:	f6 94       	lsr	r15
     c14:	e7 94       	ror	r14
     c16:	f6 94       	lsr	r15
     c18:	e7 94       	ror	r14
     c1a:	eb 86       	std	Y+11, r14	; 0x0b
     c1c:	fc 86       	std	Y+12, r15	; 0x0c
		DGUSDATA.Power     = (m_structDGUSDATA[profile].Intensity * m_structDGUSDATA[profile].DutyCycle) / 100;
     c1e:	84 81       	ldd	r24, Z+4	; 0x04
     c20:	95 81       	ldd	r25, Z+5	; 0x05
     c22:	42 85       	ldd	r20, Z+10	; 0x0a
     c24:	53 85       	ldd	r21, Z+11	; 0x0b
     c26:	48 9f       	mul	r20, r24
     c28:	90 01       	movw	r18, r0
     c2a:	49 9f       	mul	r20, r25
     c2c:	30 0d       	add	r19, r0
     c2e:	58 9f       	mul	r21, r24
     c30:	30 0d       	add	r19, r0
     c32:	11 24       	eor	r1, r1
     c34:	36 95       	lsr	r19
     c36:	27 95       	ror	r18
     c38:	36 95       	lsr	r19
     c3a:	27 95       	ror	r18
     c3c:	ab e7       	ldi	r26, 0x7B	; 123
     c3e:	b4 e1       	ldi	r27, 0x14	; 20
     c40:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     c44:	96 95       	lsr	r25
     c46:	87 95       	ror	r24
     c48:	8f 83       	std	Y+7, r24	; 0x07
     c4a:	98 87       	std	Y+8, r25	; 0x08
		DGUSDATA.Energy    = m_structDGUSDATA[profile].Intensity * m_structDGUSDATA[profile].Duration / 1000;
     c4c:	84 81       	ldd	r24, Z+4	; 0x04
     c4e:	95 81       	ldd	r25, Z+5	; 0x05
     c50:	42 81       	ldd	r20, Z+2	; 0x02
     c52:	53 81       	ldd	r21, Z+3	; 0x03
     c54:	48 9f       	mul	r20, r24
     c56:	90 01       	movw	r18, r0
     c58:	49 9f       	mul	r20, r25
     c5a:	30 0d       	add	r19, r0
     c5c:	58 9f       	mul	r21, r24
     c5e:	30 0d       	add	r19, r0
     c60:	11 24       	eor	r1, r1
     c62:	36 95       	lsr	r19
     c64:	27 95       	ror	r18
     c66:	36 95       	lsr	r19
     c68:	27 95       	ror	r18
     c6a:	36 95       	lsr	r19
     c6c:	27 95       	ror	r18
     c6e:	a5 ec       	ldi	r26, 0xC5	; 197
     c70:	b0 e2       	ldi	r27, 0x20	; 32
     c72:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     c76:	92 95       	swap	r25
     c78:	82 95       	swap	r24
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	89 27       	eor	r24, r25
     c7e:	9f 70       	andi	r25, 0x0F	; 15
     c80:	89 27       	eor	r24, r25
     c82:	89 87       	std	Y+9, r24	; 0x09
     c84:	9a 87       	std	Y+10, r25	; 0x0a
		
		laserTimerPeriod = (6250 / m_structDGUSDATA[profile].Frequency) * 10;
     c86:	60 81       	ld	r22, Z
     c88:	71 81       	ldd	r23, Z+1	; 0x01
     c8a:	8a e6       	ldi	r24, 0x6A	; 106
     c8c:	98 e1       	ldi	r25, 0x18	; 24
     c8e:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodhi4>
     c92:	ab 01       	movw	r20, r22
     c94:	44 0f       	add	r20, r20
     c96:	55 1f       	adc	r21, r21
     c98:	66 0f       	add	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	66 0f       	add	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	46 0f       	add	r20, r22
     ca6:	57 1f       	adc	r21, r23
     ca8:	d8 01       	movw	r26, r16
     caa:	50 96       	adiw	r26, 0x10	; 16
     cac:	4d 93       	st	X+, r20
     cae:	5c 93       	st	X, r21
     cb0:	51 97       	sbiw	r26, 0x11	; 17
		laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
     cb2:	9a 01       	movw	r18, r20
     cb4:	36 95       	lsr	r19
     cb6:	27 95       	ror	r18
     cb8:	36 95       	lsr	r19
     cba:	27 95       	ror	r18
     cbc:	ab e7       	ldi	r26, 0x7B	; 123
     cbe:	b4 e1       	ldi	r27, 0x14	; 20
     cc0:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
     cc4:	96 95       	lsr	r25
     cc6:	87 95       	ror	r24
     cc8:	8e 9d       	mul	r24, r14
     cca:	90 01       	movw	r18, r0
     ccc:	8f 9d       	mul	r24, r15
     cce:	30 0d       	add	r19, r0
     cd0:	9e 9d       	mul	r25, r14
     cd2:	30 0d       	add	r19, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	42 1b       	sub	r20, r18
     cd8:	53 0b       	sbc	r21, r19
     cda:	d8 01       	movw	r26, r16
     cdc:	52 96       	adiw	r26, 0x12	; 18
     cde:	4d 93       	st	X+, r20
     ce0:	5c 93       	st	X, r21
     ce2:	53 97       	sbiw	r26, 0x13	; 19
		laserTimerDutyCyclems = DGUSDATA.DutyCycle;
     ce4:	54 96       	adiw	r26, 0x14	; 20
     ce6:	ed 92       	st	X+, r14
     ce8:	fc 92       	st	X, r15
     cea:	55 97       	sbiw	r26, 0x15	; 21
		laserPower = m_structDGUSDATA[profile].Intensity;
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	95 81       	ldd	r25, Z+5	; 0x05
     cf0:	56 96       	adiw	r26, 0x16	; 22
     cf2:	8d 93       	st	X+, r24
     cf4:	9c 93       	st	X, r25
     cf6:	57 97       	sbiw	r26, 0x17	; 23
		
		m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
     cf8:	26 e0       	ldi	r18, 0x06	; 6
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	ae 01       	movw	r20, r28
     cfe:	49 5f       	subi	r20, 0xF9	; 249
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	5a 96       	adiw	r26, 0x1a	; 26
     d08:	8d 91       	ld	r24, X+
     d0a:	9c 91       	ld	r25, X
     d0c:	5b 97       	sbiw	r26, 0x1b	; 27
     d0e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
		m_cpSender->WaitMODBUSTransmitter();
     d12:	f8 01       	movw	r30, r16
     d14:	82 8d       	ldd	r24, Z+26	; 0x1a
     d16:	93 8d       	ldd	r25, Z+27	; 0x1b
     d18:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
     d1c:	60 96       	adiw	r28, 0x10	; 16
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	7c 01       	movw	r14, r24
     d42:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     d44:	41 15       	cp	r20, r1
     d46:	51 05       	cpc	r21, r1
     d48:	b1 f0       	breq	.+44     	; 0xd76 <_Z11ConvertDataPvS_jj+0x46>
     d4a:	6b 01       	movw	r12, r22
     d4c:	c4 0e       	add	r12, r20
     d4e:	d5 1e       	adc	r13, r21
     d50:	eb 01       	movw	r28, r22
     d52:	26 1b       	sub	r18, r22
     d54:	37 0b       	sbc	r19, r23
     d56:	c9 01       	movw	r24, r18
     d58:	8c 0f       	add	r24, r28
     d5a:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     d5c:	b8 01       	movw	r22, r16
     d5e:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodhi4>
     d62:	fc 01       	movw	r30, r24
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	e4 27       	eor	r30, r20
     d68:	ee 0d       	add	r30, r14
     d6a:	ff 1d       	adc	r31, r15
     d6c:	89 91       	ld	r24, Y+
     d6e:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     d70:	cc 15       	cp	r28, r12
     d72:	dd 05       	cpc	r29, r13
     d74:	81 f7       	brne	.-32     	; 0xd56 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <_Z4swapj>:
}

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
     d88:	98 27       	eor	r25, r24
     d8a:	89 27       	eor	r24, r25
     d8c:	98 27       	eor	r25, r24
     d8e:	08 95       	ret

00000d90 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
     d90:	08 95       	ret

00000d92 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
     d92:	08 95       	ret

00000d94 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
     d94:	ef 92       	push	r14
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
     da0:	e0 e8       	ldi	r30, 0x80	; 128
     da2:	f6 e0       	ldi	r31, 0x06	; 6
     da4:	80 eb       	ldi	r24, 0xB0	; 176
     da6:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
     da8:	90 e4       	ldi	r25, 0x40	; 64
     daa:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     dac:	90 ec       	ldi	r25, 0xC0	; 192
     dae:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     db0:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     db2:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     db4:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
     db6:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
     db8:	61 11       	cpse	r22, r1
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
     dbc:	80 e4       	ldi	r24, 0x40	; 64
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
     dc0:	80 e5       	ldi	r24, 0x50	; 80
     dc2:	01 11       	cpse	r16, r1
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
     dca:	30 e8       	ldi	r19, 0x80	; 128
     dcc:	41 11       	cpse	r20, r1
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
     dd4:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
     dd6:	22 0f       	add	r18, r18
     dd8:	22 0f       	add	r18, r18
     dda:	e2 2a       	or	r14, r18
     ddc:	e8 2a       	or	r14, r24
     dde:	e3 2a       	or	r14, r19
		prescaler;
     de0:	e9 2a       	or	r14, r25
     de2:	00 ec       	ldi	r16, 0xC0	; 192
     de4:	1a e0       	ldi	r17, 0x0A	; 10
     de6:	f8 01       	movw	r30, r16
     de8:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 72 24 	call	0x48e4	; 0x48e4 <malloc>
     df2:	88 83       	st	Y, r24
     df4:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	f8 01       	movw	r30, r16
     dfa:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
     dfc:	86 e4       	ldi	r24, 0x46	; 70
     dfe:	97 e0       	ldi	r25, 0x07	; 7
     e00:	80 93 e7 21 	sts	0x21E7, r24
     e04:	90 93 e8 21 	sts	0x21E8, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
     e08:	c0 93 dd 22 	sts	0x22DD, r28
     e0c:	d0 93 de 22 	sts	0x22DE, r29
}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ef 90       	pop	r14
     e1a:	08 95       	ret

00000e1c <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
	rx_pos = length;
     e22:	4a 83       	std	Y+2, r20	; 0x02
     e24:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
     e26:	4c 83       	std	Y+4, r20	; 0x04
     e28:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
     e2a:	88 81       	ld	r24, Y
     e2c:	99 81       	ldd	r25, Y+1	; 0x01
     e2e:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
     e32:	80 e1       	ldi	r24, 0x10	; 16
     e34:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	4a 81       	ldd	r20, Y+2	; 0x02
     e3e:	5b 81       	ldd	r21, Y+3	; 0x03
     e40:	9a 01       	movw	r18, r20
     e42:	21 50       	subi	r18, 0x01	; 1
     e44:	31 09       	sbc	r19, r1
     e46:	2a 83       	std	Y+2, r18	; 0x02
     e48:	3b 83       	std	Y+3, r19	; 0x03
     e4a:	fc 01       	movw	r30, r24
     e4c:	e2 0f       	add	r30, r18
     e4e:	f3 1f       	adc	r31, r19
     e50:	80 81       	ld	r24, Z
     e52:	80 93 c3 0a 	sts	0x0AC3, r24
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
     e5c:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	89 2b       	or	r24, r25
     e64:	79 f0       	breq	.+30     	; 0xe84 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
     e66:	40 81       	ld	r20, Z
     e68:	51 81       	ldd	r21, Z+1	; 0x01
     e6a:	22 81       	ldd	r18, Z+2	; 0x02
     e6c:	33 81       	ldd	r19, Z+3	; 0x03
     e6e:	c9 01       	movw	r24, r18
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	82 83       	std	Z+2, r24	; 0x02
     e74:	93 83       	std	Z+3, r25	; 0x03
     e76:	fa 01       	movw	r30, r20
     e78:	e8 0f       	add	r30, r24
     e7a:	f9 1f       	adc	r31, r25
     e7c:	80 81       	ld	r24, Z
     e7e:	80 93 c3 0a 	sts	0x0AC3, r24
     e82:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
     e84:	80 e1       	ldi	r24, 0x10	; 16
     e86:	80 93 85 06 	sts	0x0685, r24
     e8a:	08 95       	ret

00000e8c <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
     e8c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZN4CSPI10OnTransmitEv>
     e90:	08 95       	ret

00000e92 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
     e92:	20 e6       	ldi	r18, 0x60	; 96
     e94:	30 e2       	ldi	r19, 0x20	; 32
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
     e9a:	31 83       	std	Z+1, r19	; 0x01
     e9c:	08 95       	ret

00000e9e <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
     e9e:	08 95       	ret

00000ea0 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
     ea0:	24 e8       	ldi	r18, 0x84	; 132
     ea2:	30 e2       	ldi	r19, 0x20	; 32
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
     ea8:	31 83       	std	Z+1, r19	; 0x01
     eaa:	08 95       	ret

00000eac <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
     eac:	08 95       	ret

00000eae <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	0b b6       	in	r0, 0x3b	; 59
     eba:	0f 92       	push	r0
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
     ed4:	e0 91 77 21 	lds	r30, 0x2177
     ed8:	f0 91 78 21 	lds	r31, 0x2178
     edc:	30 97       	sbiw	r30, 0x00	; 0
     ede:	29 f0       	breq	.+10     	; 0xeea <__vector_1+0x3c>
     ee0:	80 91 6d 22 	lds	r24, 0x226D
     ee4:	90 91 6e 22 	lds	r25, 0x226E
     ee8:	19 95       	eicall
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0b be       	out	0x3b, r0	; 59
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	0b b6       	in	r0, 0x3b	; 59
     f1c:	0f 92       	push	r0
     f1e:	2f 93       	push	r18
     f20:	3f 93       	push	r19
     f22:	4f 93       	push	r20
     f24:	5f 93       	push	r21
     f26:	6f 93       	push	r22
     f28:	7f 93       	push	r23
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
     f2e:	af 93       	push	r26
     f30:	bf 93       	push	r27
     f32:	ef 93       	push	r30
     f34:	ff 93       	push	r31
     f36:	e0 91 79 21 	lds	r30, 0x2179
     f3a:	f0 91 7a 21 	lds	r31, 0x217A
     f3e:	30 97       	sbiw	r30, 0x00	; 0
     f40:	29 f0       	breq	.+10     	; 0xf4c <__vector_2+0x3c>
     f42:	80 91 6f 22 	lds	r24, 0x226F
     f46:	90 91 70 22 	lds	r25, 0x2270
     f4a:	19 95       	eicall
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0b be       	out	0x3b, r0	; 59
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	0b b6       	in	r0, 0x3b	; 59
     f7e:	0f 92       	push	r0
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	e0 91 7b 21 	lds	r30, 0x217B
     f9c:	f0 91 7c 21 	lds	r31, 0x217C
     fa0:	30 97       	sbiw	r30, 0x00	; 0
     fa2:	29 f0       	breq	.+10     	; 0xfae <__vector_3+0x3c>
     fa4:	80 91 71 22 	lds	r24, 0x2271
     fa8:	90 91 72 22 	lds	r25, 0x2272
     fac:	19 95       	eicall
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0b be       	out	0x3b, r0	; 59
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	0b b6       	in	r0, 0x3b	; 59
     fe0:	0f 92       	push	r0
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	e0 91 7d 21 	lds	r30, 0x217D
     ffe:	f0 91 7e 21 	lds	r31, 0x217E
    1002:	30 97       	sbiw	r30, 0x00	; 0
    1004:	29 f0       	breq	.+10     	; 0x1010 <__vector_4+0x3c>
    1006:	80 91 73 22 	lds	r24, 0x2273
    100a:	90 91 74 22 	lds	r25, 0x2274
    100e:	19 95       	eicall
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0b be       	out	0x3b, r0	; 59
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	0b b6       	in	r0, 0x3b	; 59
    1042:	0f 92       	push	r0
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	6f 93       	push	r22
    104e:	7f 93       	push	r23
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
    105c:	e0 91 7f 21 	lds	r30, 0x217F
    1060:	f0 91 80 21 	lds	r31, 0x2180
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	29 f0       	breq	.+10     	; 0x1072 <__vector_5+0x3c>
    1068:	80 91 75 22 	lds	r24, 0x2275
    106c:	90 91 76 22 	lds	r25, 0x2276
    1070:	19 95       	eicall
    1072:	ff 91       	pop	r31
    1074:	ef 91       	pop	r30
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	7f 91       	pop	r23
    1080:	6f 91       	pop	r22
    1082:	5f 91       	pop	r21
    1084:	4f 91       	pop	r20
    1086:	3f 91       	pop	r19
    1088:	2f 91       	pop	r18
    108a:	0f 90       	pop	r0
    108c:	0b be       	out	0x3b, r0	; 59
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	0b b6       	in	r0, 0x3b	; 59
    10a4:	0f 92       	push	r0
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	e0 91 81 21 	lds	r30, 0x2181
    10c2:	f0 91 82 21 	lds	r31, 0x2182
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	29 f0       	breq	.+10     	; 0x10d4 <__vector_6+0x3c>
    10ca:	80 91 77 22 	lds	r24, 0x2277
    10ce:	90 91 78 22 	lds	r25, 0x2278
    10d2:	19 95       	eicall
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0b be       	out	0x3b, r0	; 59
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	0b b6       	in	r0, 0x3b	; 59
    1106:	0f 92       	push	r0
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	e0 91 83 21 	lds	r30, 0x2183
    1124:	f0 91 84 21 	lds	r31, 0x2184
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	29 f0       	breq	.+10     	; 0x1136 <__vector_7+0x3c>
    112c:	80 91 79 22 	lds	r24, 0x2279
    1130:	90 91 7a 22 	lds	r25, 0x227A
    1134:	19 95       	eicall
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	0b be       	out	0x3b, r0	; 59
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	0b b6       	in	r0, 0x3b	; 59
    1168:	0f 92       	push	r0
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	e0 91 85 21 	lds	r30, 0x2185
    1186:	f0 91 86 21 	lds	r31, 0x2186
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	29 f0       	breq	.+10     	; 0x1198 <__vector_8+0x3c>
    118e:	80 91 7b 22 	lds	r24, 0x227B
    1192:	90 91 7c 22 	lds	r25, 0x227C
    1196:	19 95       	eicall
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0b be       	out	0x3b, r0	; 59
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	0b b6       	in	r0, 0x3b	; 59
    11ca:	0f 92       	push	r0
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	e0 91 87 21 	lds	r30, 0x2187
    11e8:	f0 91 88 21 	lds	r31, 0x2188
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	29 f0       	breq	.+10     	; 0x11fa <__vector_9+0x3c>
    11f0:	80 91 7d 22 	lds	r24, 0x227D
    11f4:	90 91 7e 22 	lds	r25, 0x227E
    11f8:	19 95       	eicall
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0b be       	out	0x3b, r0	; 59
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	0b b6       	in	r0, 0x3b	; 59
    122c:	0f 92       	push	r0
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
    1246:	e0 91 89 21 	lds	r30, 0x2189
    124a:	f0 91 8a 21 	lds	r31, 0x218A
    124e:	30 97       	sbiw	r30, 0x00	; 0
    1250:	29 f0       	breq	.+10     	; 0x125c <__vector_10+0x3c>
    1252:	80 91 7f 22 	lds	r24, 0x227F
    1256:	90 91 80 22 	lds	r25, 0x2280
    125a:	19 95       	eicall
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	0f 90       	pop	r0
    1276:	0b be       	out	0x3b, r0	; 59
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	0b b6       	in	r0, 0x3b	; 59
    128e:	0f 92       	push	r0
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	e0 91 8b 21 	lds	r30, 0x218B
    12ac:	f0 91 8c 21 	lds	r31, 0x218C
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	29 f0       	breq	.+10     	; 0x12be <__vector_11+0x3c>
    12b4:	80 91 81 22 	lds	r24, 0x2281
    12b8:	90 91 82 22 	lds	r25, 0x2282
    12bc:	19 95       	eicall
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0b be       	out	0x3b, r0	; 59
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	0b b6       	in	r0, 0x3b	; 59
    12f0:	0f 92       	push	r0
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	5f 93       	push	r21
    12fa:	6f 93       	push	r22
    12fc:	7f 93       	push	r23
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	af 93       	push	r26
    1304:	bf 93       	push	r27
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
    130a:	e0 91 8d 21 	lds	r30, 0x218D
    130e:	f0 91 8e 21 	lds	r31, 0x218E
    1312:	30 97       	sbiw	r30, 0x00	; 0
    1314:	29 f0       	breq	.+10     	; 0x1320 <__vector_12+0x3c>
    1316:	80 91 83 22 	lds	r24, 0x2283
    131a:	90 91 84 22 	lds	r25, 0x2284
    131e:	19 95       	eicall
    1320:	ff 91       	pop	r31
    1322:	ef 91       	pop	r30
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	7f 91       	pop	r23
    132e:	6f 91       	pop	r22
    1330:	5f 91       	pop	r21
    1332:	4f 91       	pop	r20
    1334:	3f 91       	pop	r19
    1336:	2f 91       	pop	r18
    1338:	0f 90       	pop	r0
    133a:	0b be       	out	0x3b, r0	; 59
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	0f 90       	pop	r0
    1342:	1f 90       	pop	r1
    1344:	18 95       	reti

00001346 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1346:	1f 92       	push	r1
    1348:	0f 92       	push	r0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	0f 92       	push	r0
    134e:	11 24       	eor	r1, r1
    1350:	0b b6       	in	r0, 0x3b	; 59
    1352:	0f 92       	push	r0
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	e0 91 8f 21 	lds	r30, 0x218F
    1370:	f0 91 90 21 	lds	r31, 0x2190
    1374:	30 97       	sbiw	r30, 0x00	; 0
    1376:	29 f0       	breq	.+10     	; 0x1382 <__vector_13+0x3c>
    1378:	80 91 85 22 	lds	r24, 0x2285
    137c:	90 91 86 22 	lds	r25, 0x2286
    1380:	19 95       	eicall
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0b be       	out	0x3b, r0	; 59
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	0b b6       	in	r0, 0x3b	; 59
    13b4:	0f 92       	push	r0
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
    13ce:	e0 91 91 21 	lds	r30, 0x2191
    13d2:	f0 91 92 21 	lds	r31, 0x2192
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <__vector_14+0x3c>
    13da:	80 91 87 22 	lds	r24, 0x2287
    13de:	90 91 88 22 	lds	r25, 0x2288
    13e2:	19 95       	eicall
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0b be       	out	0x3b, r0	; 59
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	0b b6       	in	r0, 0x3b	; 59
    1416:	0f 92       	push	r0
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	e0 91 93 21 	lds	r30, 0x2193
    1434:	f0 91 94 21 	lds	r31, 0x2194
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	29 f0       	breq	.+10     	; 0x1446 <__vector_15+0x3c>
    143c:	80 91 89 22 	lds	r24, 0x2289
    1440:	90 91 8a 22 	lds	r25, 0x228A
    1444:	19 95       	eicall
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	0f 90       	pop	r0
    1460:	0b be       	out	0x3b, r0	; 59
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    146c:	1f 92       	push	r1
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	0f 92       	push	r0
    1474:	11 24       	eor	r1, r1
    1476:	0b b6       	in	r0, 0x3b	; 59
    1478:	0f 92       	push	r0
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	e0 91 95 21 	lds	r30, 0x2195
    1496:	f0 91 96 21 	lds	r31, 0x2196
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	29 f0       	breq	.+10     	; 0x14a8 <__vector_16+0x3c>
    149e:	80 91 8b 22 	lds	r24, 0x228B
    14a2:	90 91 8c 22 	lds	r25, 0x228C
    14a6:	19 95       	eicall
    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0b be       	out	0x3b, r0	; 59
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	0b b6       	in	r0, 0x3b	; 59
    14da:	0f 92       	push	r0
    14dc:	2f 93       	push	r18
    14de:	3f 93       	push	r19
    14e0:	4f 93       	push	r20
    14e2:	5f 93       	push	r21
    14e4:	6f 93       	push	r22
    14e6:	7f 93       	push	r23
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
    14ec:	af 93       	push	r26
    14ee:	bf 93       	push	r27
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
    14f4:	e0 91 97 21 	lds	r30, 0x2197
    14f8:	f0 91 98 21 	lds	r31, 0x2198
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	29 f0       	breq	.+10     	; 0x150a <__vector_17+0x3c>
    1500:	80 91 8d 22 	lds	r24, 0x228D
    1504:	90 91 8e 22 	lds	r25, 0x228E
    1508:	19 95       	eicall
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0b be       	out	0x3b, r0	; 59
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	0b b6       	in	r0, 0x3b	; 59
    153c:	0f 92       	push	r0
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	e0 91 99 21 	lds	r30, 0x2199
    155a:	f0 91 9a 21 	lds	r31, 0x219A
    155e:	30 97       	sbiw	r30, 0x00	; 0
    1560:	29 f0       	breq	.+10     	; 0x156c <__vector_18+0x3c>
    1562:	80 91 8f 22 	lds	r24, 0x228F
    1566:	90 91 90 22 	lds	r25, 0x2290
    156a:	19 95       	eicall
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	bf 91       	pop	r27
    1572:	af 91       	pop	r26
    1574:	9f 91       	pop	r25
    1576:	8f 91       	pop	r24
    1578:	7f 91       	pop	r23
    157a:	6f 91       	pop	r22
    157c:	5f 91       	pop	r21
    157e:	4f 91       	pop	r20
    1580:	3f 91       	pop	r19
    1582:	2f 91       	pop	r18
    1584:	0f 90       	pop	r0
    1586:	0b be       	out	0x3b, r0	; 59
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	0b b6       	in	r0, 0x3b	; 59
    159e:	0f 92       	push	r0
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
    15b8:	e0 91 9b 21 	lds	r30, 0x219B
    15bc:	f0 91 9c 21 	lds	r31, 0x219C
    15c0:	30 97       	sbiw	r30, 0x00	; 0
    15c2:	29 f0       	breq	.+10     	; 0x15ce <__vector_19+0x3c>
    15c4:	80 91 91 22 	lds	r24, 0x2291
    15c8:	90 91 92 22 	lds	r25, 0x2292
    15cc:	19 95       	eicall
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0b be       	out	0x3b, r0	; 59
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	0b b6       	in	r0, 0x3b	; 59
    1600:	0f 92       	push	r0
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	e0 91 9d 21 	lds	r30, 0x219D
    161e:	f0 91 9e 21 	lds	r31, 0x219E
    1622:	30 97       	sbiw	r30, 0x00	; 0
    1624:	29 f0       	breq	.+10     	; 0x1630 <__vector_20+0x3c>
    1626:	80 91 93 22 	lds	r24, 0x2293
    162a:	90 91 94 22 	lds	r25, 0x2294
    162e:	19 95       	eicall
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	0b b6       	in	r0, 0x3b	; 59
    1662:	0f 92       	push	r0
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    167c:	e0 91 9f 21 	lds	r30, 0x219F
    1680:	f0 91 a0 21 	lds	r31, 0x21A0
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	29 f0       	breq	.+10     	; 0x1692 <__vector_21+0x3c>
    1688:	80 91 95 22 	lds	r24, 0x2295
    168c:	90 91 96 22 	lds	r25, 0x2296
    1690:	19 95       	eicall
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	0b be       	out	0x3b, r0	; 59
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	0b b6       	in	r0, 0x3b	; 59
    16c4:	0f 92       	push	r0
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	e0 91 a1 21 	lds	r30, 0x21A1
    16e2:	f0 91 a2 21 	lds	r31, 0x21A2
    16e6:	30 97       	sbiw	r30, 0x00	; 0
    16e8:	29 f0       	breq	.+10     	; 0x16f4 <__vector_22+0x3c>
    16ea:	80 91 97 22 	lds	r24, 0x2297
    16ee:	90 91 98 22 	lds	r25, 0x2298
    16f2:	19 95       	eicall
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
    1740:	e0 91 a3 21 	lds	r30, 0x21A3
    1744:	f0 91 a4 21 	lds	r31, 0x21A4
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	29 f0       	breq	.+10     	; 0x1756 <__vector_23+0x3c>
    174c:	80 91 99 22 	lds	r24, 0x2299
    1750:	90 91 9a 22 	lds	r25, 0x229A
    1754:	19 95       	eicall
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	7f 91       	pop	r23
    1764:	6f 91       	pop	r22
    1766:	5f 91       	pop	r21
    1768:	4f 91       	pop	r20
    176a:	3f 91       	pop	r19
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0b be       	out	0x3b, r0	; 59
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	0b b6       	in	r0, 0x3b	; 59
    1788:	0f 92       	push	r0
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
    17a2:	e0 91 a5 21 	lds	r30, 0x21A5
    17a6:	f0 91 a6 21 	lds	r31, 0x21A6
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	29 f0       	breq	.+10     	; 0x17b8 <__vector_24+0x3c>
    17ae:	80 91 9b 22 	lds	r24, 0x229B
    17b2:	90 91 9c 22 	lds	r25, 0x229C
    17b6:	19 95       	eicall
    17b8:	ff 91       	pop	r31
    17ba:	ef 91       	pop	r30
    17bc:	bf 91       	pop	r27
    17be:	af 91       	pop	r26
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	7f 91       	pop	r23
    17c6:	6f 91       	pop	r22
    17c8:	5f 91       	pop	r21
    17ca:	4f 91       	pop	r20
    17cc:	3f 91       	pop	r19
    17ce:	2f 91       	pop	r18
    17d0:	0f 90       	pop	r0
    17d2:	0b be       	out	0x3b, r0	; 59
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	0b b6       	in	r0, 0x3b	; 59
    17ea:	0f 92       	push	r0
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
    1804:	e0 91 a7 21 	lds	r30, 0x21A7
    1808:	f0 91 a8 21 	lds	r31, 0x21A8
    180c:	30 97       	sbiw	r30, 0x00	; 0
    180e:	29 f0       	breq	.+10     	; 0x181a <__vector_25+0x3c>
    1810:	80 91 9d 22 	lds	r24, 0x229D
    1814:	90 91 9e 22 	lds	r25, 0x229E
    1818:	19 95       	eicall
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0b be       	out	0x3b, r0	; 59
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	0f 90       	pop	r0
    183c:	1f 90       	pop	r1
    183e:	18 95       	reti

00001840 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	0b b6       	in	r0, 0x3b	; 59
    184c:	0f 92       	push	r0
    184e:	2f 93       	push	r18
    1850:	3f 93       	push	r19
    1852:	4f 93       	push	r20
    1854:	5f 93       	push	r21
    1856:	6f 93       	push	r22
    1858:	7f 93       	push	r23
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
    185e:	af 93       	push	r26
    1860:	bf 93       	push	r27
    1862:	ef 93       	push	r30
    1864:	ff 93       	push	r31
    1866:	e0 91 a9 21 	lds	r30, 0x21A9
    186a:	f0 91 aa 21 	lds	r31, 0x21AA
    186e:	30 97       	sbiw	r30, 0x00	; 0
    1870:	29 f0       	breq	.+10     	; 0x187c <__vector_26+0x3c>
    1872:	80 91 9f 22 	lds	r24, 0x229F
    1876:	90 91 a0 22 	lds	r25, 0x22A0
    187a:	19 95       	eicall
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	bf 91       	pop	r27
    1882:	af 91       	pop	r26
    1884:	9f 91       	pop	r25
    1886:	8f 91       	pop	r24
    1888:	7f 91       	pop	r23
    188a:	6f 91       	pop	r22
    188c:	5f 91       	pop	r21
    188e:	4f 91       	pop	r20
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0b be       	out	0x3b, r0	; 59
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	0b b6       	in	r0, 0x3b	; 59
    18ae:	0f 92       	push	r0
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	e0 91 ab 21 	lds	r30, 0x21AB
    18cc:	f0 91 ac 21 	lds	r31, 0x21AC
    18d0:	30 97       	sbiw	r30, 0x00	; 0
    18d2:	29 f0       	breq	.+10     	; 0x18de <__vector_27+0x3c>
    18d4:	80 91 a1 22 	lds	r24, 0x22A1
    18d8:	90 91 a2 22 	lds	r25, 0x22A2
    18dc:	19 95       	eicall
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0b be       	out	0x3b, r0	; 59
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	0b b6       	in	r0, 0x3b	; 59
    1910:	0f 92       	push	r0
    1912:	2f 93       	push	r18
    1914:	3f 93       	push	r19
    1916:	4f 93       	push	r20
    1918:	5f 93       	push	r21
    191a:	6f 93       	push	r22
    191c:	7f 93       	push	r23
    191e:	8f 93       	push	r24
    1920:	9f 93       	push	r25
    1922:	af 93       	push	r26
    1924:	bf 93       	push	r27
    1926:	ef 93       	push	r30
    1928:	ff 93       	push	r31
    192a:	e0 91 ad 21 	lds	r30, 0x21AD
    192e:	f0 91 ae 21 	lds	r31, 0x21AE
    1932:	30 97       	sbiw	r30, 0x00	; 0
    1934:	29 f0       	breq	.+10     	; 0x1940 <__vector_28+0x3c>
    1936:	80 91 a3 22 	lds	r24, 0x22A3
    193a:	90 91 a4 22 	lds	r25, 0x22A4
    193e:	19 95       	eicall
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0b be       	out	0x3b, r0	; 59
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	0f 90       	pop	r0
    1962:	1f 90       	pop	r1
    1964:	18 95       	reti

00001966 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	0b b6       	in	r0, 0x3b	; 59
    1972:	0f 92       	push	r0
    1974:	2f 93       	push	r18
    1976:	3f 93       	push	r19
    1978:	4f 93       	push	r20
    197a:	5f 93       	push	r21
    197c:	6f 93       	push	r22
    197e:	7f 93       	push	r23
    1980:	8f 93       	push	r24
    1982:	9f 93       	push	r25
    1984:	af 93       	push	r26
    1986:	bf 93       	push	r27
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	e0 91 af 21 	lds	r30, 0x21AF
    1990:	f0 91 b0 21 	lds	r31, 0x21B0
    1994:	30 97       	sbiw	r30, 0x00	; 0
    1996:	29 f0       	breq	.+10     	; 0x19a2 <__vector_29+0x3c>
    1998:	80 91 a5 22 	lds	r24, 0x22A5
    199c:	90 91 a6 22 	lds	r25, 0x22A6
    19a0:	19 95       	eicall
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	7f 91       	pop	r23
    19b0:	6f 91       	pop	r22
    19b2:	5f 91       	pop	r21
    19b4:	4f 91       	pop	r20
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0b be       	out	0x3b, r0	; 59
    19be:	0f 90       	pop	r0
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	0f 90       	pop	r0
    19c4:	1f 90       	pop	r1
    19c6:	18 95       	reti

000019c8 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    19c8:	1f 92       	push	r1
    19ca:	0f 92       	push	r0
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	0b b6       	in	r0, 0x3b	; 59
    19d4:	0f 92       	push	r0
    19d6:	2f 93       	push	r18
    19d8:	3f 93       	push	r19
    19da:	4f 93       	push	r20
    19dc:	5f 93       	push	r21
    19de:	6f 93       	push	r22
    19e0:	7f 93       	push	r23
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
    19ea:	ef 93       	push	r30
    19ec:	ff 93       	push	r31
    19ee:	e0 91 b1 21 	lds	r30, 0x21B1
    19f2:	f0 91 b2 21 	lds	r31, 0x21B2
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	29 f0       	breq	.+10     	; 0x1a04 <__vector_30+0x3c>
    19fa:	80 91 a7 22 	lds	r24, 0x22A7
    19fe:	90 91 a8 22 	lds	r25, 0x22A8
    1a02:	19 95       	eicall
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	0b be       	out	0x3b, r0	; 59
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	0b b6       	in	r0, 0x3b	; 59
    1a36:	0f 92       	push	r0
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
    1a50:	e0 91 b3 21 	lds	r30, 0x21B3
    1a54:	f0 91 b4 21 	lds	r31, 0x21B4
    1a58:	30 97       	sbiw	r30, 0x00	; 0
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <__vector_31+0x3c>
    1a5c:	80 91 a9 22 	lds	r24, 0x22A9
    1a60:	90 91 aa 22 	lds	r25, 0x22AA
    1a64:	19 95       	eicall
    1a66:	ff 91       	pop	r31
    1a68:	ef 91       	pop	r30
    1a6a:	bf 91       	pop	r27
    1a6c:	af 91       	pop	r26
    1a6e:	9f 91       	pop	r25
    1a70:	8f 91       	pop	r24
    1a72:	7f 91       	pop	r23
    1a74:	6f 91       	pop	r22
    1a76:	5f 91       	pop	r21
    1a78:	4f 91       	pop	r20
    1a7a:	3f 91       	pop	r19
    1a7c:	2f 91       	pop	r18
    1a7e:	0f 90       	pop	r0
    1a80:	0b be       	out	0x3b, r0	; 59
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	0b b6       	in	r0, 0x3b	; 59
    1a98:	0f 92       	push	r0
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	e0 91 b5 21 	lds	r30, 0x21B5
    1ab6:	f0 91 b6 21 	lds	r31, 0x21B6
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	29 f0       	breq	.+10     	; 0x1ac8 <__vector_32+0x3c>
    1abe:	80 91 ab 22 	lds	r24, 0x22AB
    1ac2:	90 91 ac 22 	lds	r25, 0x22AC
    1ac6:	19 95       	eicall
    1ac8:	ff 91       	pop	r31
    1aca:	ef 91       	pop	r30
    1acc:	bf 91       	pop	r27
    1ace:	af 91       	pop	r26
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	7f 91       	pop	r23
    1ad6:	6f 91       	pop	r22
    1ad8:	5f 91       	pop	r21
    1ada:	4f 91       	pop	r20
    1adc:	3f 91       	pop	r19
    1ade:	2f 91       	pop	r18
    1ae0:	0f 90       	pop	r0
    1ae2:	0b be       	out	0x3b, r0	; 59
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	0b b6       	in	r0, 0x3b	; 59
    1afa:	0f 92       	push	r0
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	e0 91 b7 21 	lds	r30, 0x21B7
    1b18:	f0 91 b8 21 	lds	r31, 0x21B8
    1b1c:	30 97       	sbiw	r30, 0x00	; 0
    1b1e:	29 f0       	breq	.+10     	; 0x1b2a <__vector_33+0x3c>
    1b20:	80 91 ad 22 	lds	r24, 0x22AD
    1b24:	90 91 ae 22 	lds	r25, 0x22AE
    1b28:	19 95       	eicall
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0b be       	out	0x3b, r0	; 59
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	0b b6       	in	r0, 0x3b	; 59
    1b5c:	0f 92       	push	r0
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	e0 91 b9 21 	lds	r30, 0x21B9
    1b7a:	f0 91 ba 21 	lds	r31, 0x21BA
    1b7e:	30 97       	sbiw	r30, 0x00	; 0
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <__vector_34+0x3c>
    1b82:	80 91 af 22 	lds	r24, 0x22AF
    1b86:	90 91 b0 22 	lds	r25, 0x22B0
    1b8a:	19 95       	eicall
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	bf 91       	pop	r27
    1b92:	af 91       	pop	r26
    1b94:	9f 91       	pop	r25
    1b96:	8f 91       	pop	r24
    1b98:	7f 91       	pop	r23
    1b9a:	6f 91       	pop	r22
    1b9c:	5f 91       	pop	r21
    1b9e:	4f 91       	pop	r20
    1ba0:	3f 91       	pop	r19
    1ba2:	2f 91       	pop	r18
    1ba4:	0f 90       	pop	r0
    1ba6:	0b be       	out	0x3b, r0	; 59
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	0f 90       	pop	r0
    1bae:	1f 90       	pop	r1
    1bb0:	18 95       	reti

00001bb2 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    1bb2:	1f 92       	push	r1
    1bb4:	0f 92       	push	r0
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	0f 92       	push	r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	0b b6       	in	r0, 0x3b	; 59
    1bbe:	0f 92       	push	r0
    1bc0:	2f 93       	push	r18
    1bc2:	3f 93       	push	r19
    1bc4:	4f 93       	push	r20
    1bc6:	5f 93       	push	r21
    1bc8:	6f 93       	push	r22
    1bca:	7f 93       	push	r23
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	af 93       	push	r26
    1bd2:	bf 93       	push	r27
    1bd4:	ef 93       	push	r30
    1bd6:	ff 93       	push	r31
    1bd8:	e0 91 bb 21 	lds	r30, 0x21BB
    1bdc:	f0 91 bc 21 	lds	r31, 0x21BC
    1be0:	30 97       	sbiw	r30, 0x00	; 0
    1be2:	29 f0       	breq	.+10     	; 0x1bee <__vector_35+0x3c>
    1be4:	80 91 b1 22 	lds	r24, 0x22B1
    1be8:	90 91 b2 22 	lds	r25, 0x22B2
    1bec:	19 95       	eicall
    1bee:	ff 91       	pop	r31
    1bf0:	ef 91       	pop	r30
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	0f 90       	pop	r0
    1c08:	0b be       	out	0x3b, r0	; 59
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	0b b6       	in	r0, 0x3b	; 59
    1c20:	0f 92       	push	r0
    1c22:	2f 93       	push	r18
    1c24:	3f 93       	push	r19
    1c26:	4f 93       	push	r20
    1c28:	5f 93       	push	r21
    1c2a:	6f 93       	push	r22
    1c2c:	7f 93       	push	r23
    1c2e:	8f 93       	push	r24
    1c30:	9f 93       	push	r25
    1c32:	af 93       	push	r26
    1c34:	bf 93       	push	r27
    1c36:	ef 93       	push	r30
    1c38:	ff 93       	push	r31
    1c3a:	e0 91 bd 21 	lds	r30, 0x21BD
    1c3e:	f0 91 be 21 	lds	r31, 0x21BE
    1c42:	30 97       	sbiw	r30, 0x00	; 0
    1c44:	29 f0       	breq	.+10     	; 0x1c50 <__vector_36+0x3c>
    1c46:	80 91 b3 22 	lds	r24, 0x22B3
    1c4a:	90 91 b4 22 	lds	r25, 0x22B4
    1c4e:	19 95       	eicall
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0b be       	out	0x3b, r0	; 59
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	0b b6       	in	r0, 0x3b	; 59
    1c82:	0f 92       	push	r0
    1c84:	2f 93       	push	r18
    1c86:	3f 93       	push	r19
    1c88:	4f 93       	push	r20
    1c8a:	5f 93       	push	r21
    1c8c:	6f 93       	push	r22
    1c8e:	7f 93       	push	r23
    1c90:	8f 93       	push	r24
    1c92:	9f 93       	push	r25
    1c94:	af 93       	push	r26
    1c96:	bf 93       	push	r27
    1c98:	ef 93       	push	r30
    1c9a:	ff 93       	push	r31
    1c9c:	e0 91 bf 21 	lds	r30, 0x21BF
    1ca0:	f0 91 c0 21 	lds	r31, 0x21C0
    1ca4:	30 97       	sbiw	r30, 0x00	; 0
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <__vector_37+0x3c>
    1ca8:	80 91 b5 22 	lds	r24, 0x22B5
    1cac:	90 91 b6 22 	lds	r25, 0x22B6
    1cb0:	19 95       	eicall
    1cb2:	ff 91       	pop	r31
    1cb4:	ef 91       	pop	r30
    1cb6:	bf 91       	pop	r27
    1cb8:	af 91       	pop	r26
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	7f 91       	pop	r23
    1cc0:	6f 91       	pop	r22
    1cc2:	5f 91       	pop	r21
    1cc4:	4f 91       	pop	r20
    1cc6:	3f 91       	pop	r19
    1cc8:	2f 91       	pop	r18
    1cca:	0f 90       	pop	r0
    1ccc:	0b be       	out	0x3b, r0	; 59
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	0b b6       	in	r0, 0x3b	; 59
    1ce4:	0f 92       	push	r0
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
    1cfe:	e0 91 c1 21 	lds	r30, 0x21C1
    1d02:	f0 91 c2 21 	lds	r31, 0x21C2
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	29 f0       	breq	.+10     	; 0x1d14 <__vector_38+0x3c>
    1d0a:	80 91 b7 22 	lds	r24, 0x22B7
    1d0e:	90 91 b8 22 	lds	r25, 0x22B8
    1d12:	19 95       	eicall
    1d14:	ff 91       	pop	r31
    1d16:	ef 91       	pop	r30
    1d18:	bf 91       	pop	r27
    1d1a:	af 91       	pop	r26
    1d1c:	9f 91       	pop	r25
    1d1e:	8f 91       	pop	r24
    1d20:	7f 91       	pop	r23
    1d22:	6f 91       	pop	r22
    1d24:	5f 91       	pop	r21
    1d26:	4f 91       	pop	r20
    1d28:	3f 91       	pop	r19
    1d2a:	2f 91       	pop	r18
    1d2c:	0f 90       	pop	r0
    1d2e:	0b be       	out	0x3b, r0	; 59
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    1d3a:	1f 92       	push	r1
    1d3c:	0f 92       	push	r0
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	0f 92       	push	r0
    1d42:	11 24       	eor	r1, r1
    1d44:	0b b6       	in	r0, 0x3b	; 59
    1d46:	0f 92       	push	r0
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	e0 91 c3 21 	lds	r30, 0x21C3
    1d64:	f0 91 c4 21 	lds	r31, 0x21C4
    1d68:	30 97       	sbiw	r30, 0x00	; 0
    1d6a:	29 f0       	breq	.+10     	; 0x1d76 <__vector_39+0x3c>
    1d6c:	80 91 b9 22 	lds	r24, 0x22B9
    1d70:	90 91 ba 22 	lds	r25, 0x22BA
    1d74:	19 95       	eicall
    1d76:	ff 91       	pop	r31
    1d78:	ef 91       	pop	r30
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	9f 91       	pop	r25
    1d80:	8f 91       	pop	r24
    1d82:	7f 91       	pop	r23
    1d84:	6f 91       	pop	r22
    1d86:	5f 91       	pop	r21
    1d88:	4f 91       	pop	r20
    1d8a:	3f 91       	pop	r19
    1d8c:	2f 91       	pop	r18
    1d8e:	0f 90       	pop	r0
    1d90:	0b be       	out	0x3b, r0	; 59
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	0f 90       	pop	r0
    1d98:	1f 90       	pop	r1
    1d9a:	18 95       	reti

00001d9c <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    1d9c:	1f 92       	push	r1
    1d9e:	0f 92       	push	r0
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	0f 92       	push	r0
    1da4:	11 24       	eor	r1, r1
    1da6:	0b b6       	in	r0, 0x3b	; 59
    1da8:	0f 92       	push	r0
    1daa:	2f 93       	push	r18
    1dac:	3f 93       	push	r19
    1dae:	4f 93       	push	r20
    1db0:	5f 93       	push	r21
    1db2:	6f 93       	push	r22
    1db4:	7f 93       	push	r23
    1db6:	8f 93       	push	r24
    1db8:	9f 93       	push	r25
    1dba:	af 93       	push	r26
    1dbc:	bf 93       	push	r27
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    1dc2:	e0 91 c5 21 	lds	r30, 0x21C5
    1dc6:	f0 91 c6 21 	lds	r31, 0x21C6
    1dca:	30 97       	sbiw	r30, 0x00	; 0
    1dcc:	29 f0       	breq	.+10     	; 0x1dd8 <__vector_40+0x3c>
    1dce:	80 91 bb 22 	lds	r24, 0x22BB
    1dd2:	90 91 bc 22 	lds	r25, 0x22BC
    1dd6:	19 95       	eicall
    1dd8:	ff 91       	pop	r31
    1dda:	ef 91       	pop	r30
    1ddc:	bf 91       	pop	r27
    1dde:	af 91       	pop	r26
    1de0:	9f 91       	pop	r25
    1de2:	8f 91       	pop	r24
    1de4:	7f 91       	pop	r23
    1de6:	6f 91       	pop	r22
    1de8:	5f 91       	pop	r21
    1dea:	4f 91       	pop	r20
    1dec:	3f 91       	pop	r19
    1dee:	2f 91       	pop	r18
    1df0:	0f 90       	pop	r0
    1df2:	0b be       	out	0x3b, r0	; 59
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    1dfe:	1f 92       	push	r1
    1e00:	0f 92       	push	r0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	0f 92       	push	r0
    1e06:	11 24       	eor	r1, r1
    1e08:	0b b6       	in	r0, 0x3b	; 59
    1e0a:	0f 92       	push	r0
    1e0c:	2f 93       	push	r18
    1e0e:	3f 93       	push	r19
    1e10:	4f 93       	push	r20
    1e12:	5f 93       	push	r21
    1e14:	6f 93       	push	r22
    1e16:	7f 93       	push	r23
    1e18:	8f 93       	push	r24
    1e1a:	9f 93       	push	r25
    1e1c:	af 93       	push	r26
    1e1e:	bf 93       	push	r27
    1e20:	ef 93       	push	r30
    1e22:	ff 93       	push	r31
    1e24:	e0 91 c7 21 	lds	r30, 0x21C7
    1e28:	f0 91 c8 21 	lds	r31, 0x21C8
    1e2c:	30 97       	sbiw	r30, 0x00	; 0
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <__vector_41+0x3c>
    1e30:	80 91 bd 22 	lds	r24, 0x22BD
    1e34:	90 91 be 22 	lds	r25, 0x22BE
    1e38:	19 95       	eicall
    1e3a:	ff 91       	pop	r31
    1e3c:	ef 91       	pop	r30
    1e3e:	bf 91       	pop	r27
    1e40:	af 91       	pop	r26
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	0f 90       	pop	r0
    1e54:	0b be       	out	0x3b, r0	; 59
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	0b b6       	in	r0, 0x3b	; 59
    1e6c:	0f 92       	push	r0
    1e6e:	2f 93       	push	r18
    1e70:	3f 93       	push	r19
    1e72:	4f 93       	push	r20
    1e74:	5f 93       	push	r21
    1e76:	6f 93       	push	r22
    1e78:	7f 93       	push	r23
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	af 93       	push	r26
    1e80:	bf 93       	push	r27
    1e82:	ef 93       	push	r30
    1e84:	ff 93       	push	r31
    1e86:	e0 91 c9 21 	lds	r30, 0x21C9
    1e8a:	f0 91 ca 21 	lds	r31, 0x21CA
    1e8e:	30 97       	sbiw	r30, 0x00	; 0
    1e90:	29 f0       	breq	.+10     	; 0x1e9c <__vector_42+0x3c>
    1e92:	80 91 bf 22 	lds	r24, 0x22BF
    1e96:	90 91 c0 22 	lds	r25, 0x22C0
    1e9a:	19 95       	eicall
    1e9c:	ff 91       	pop	r31
    1e9e:	ef 91       	pop	r30
    1ea0:	bf 91       	pop	r27
    1ea2:	af 91       	pop	r26
    1ea4:	9f 91       	pop	r25
    1ea6:	8f 91       	pop	r24
    1ea8:	7f 91       	pop	r23
    1eaa:	6f 91       	pop	r22
    1eac:	5f 91       	pop	r21
    1eae:	4f 91       	pop	r20
    1eb0:	3f 91       	pop	r19
    1eb2:	2f 91       	pop	r18
    1eb4:	0f 90       	pop	r0
    1eb6:	0b be       	out	0x3b, r0	; 59
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	0b b6       	in	r0, 0x3b	; 59
    1ece:	0f 92       	push	r0
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
    1ee8:	e0 91 cb 21 	lds	r30, 0x21CB
    1eec:	f0 91 cc 21 	lds	r31, 0x21CC
    1ef0:	30 97       	sbiw	r30, 0x00	; 0
    1ef2:	29 f0       	breq	.+10     	; 0x1efe <__vector_43+0x3c>
    1ef4:	80 91 c1 22 	lds	r24, 0x22C1
    1ef8:	90 91 c2 22 	lds	r25, 0x22C2
    1efc:	19 95       	eicall
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	0b be       	out	0x3b, r0	; 59
    1f1a:	0f 90       	pop	r0
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	0f 90       	pop	r0
    1f20:	1f 90       	pop	r1
    1f22:	18 95       	reti

00001f24 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    1f24:	1f 92       	push	r1
    1f26:	0f 92       	push	r0
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	0f 92       	push	r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	0b b6       	in	r0, 0x3b	; 59
    1f30:	0f 92       	push	r0
    1f32:	2f 93       	push	r18
    1f34:	3f 93       	push	r19
    1f36:	4f 93       	push	r20
    1f38:	5f 93       	push	r21
    1f3a:	6f 93       	push	r22
    1f3c:	7f 93       	push	r23
    1f3e:	8f 93       	push	r24
    1f40:	9f 93       	push	r25
    1f42:	af 93       	push	r26
    1f44:	bf 93       	push	r27
    1f46:	ef 93       	push	r30
    1f48:	ff 93       	push	r31
    1f4a:	e0 91 cd 21 	lds	r30, 0x21CD
    1f4e:	f0 91 ce 21 	lds	r31, 0x21CE
    1f52:	30 97       	sbiw	r30, 0x00	; 0
    1f54:	29 f0       	breq	.+10     	; 0x1f60 <__vector_44+0x3c>
    1f56:	80 91 c3 22 	lds	r24, 0x22C3
    1f5a:	90 91 c4 22 	lds	r25, 0x22C4
    1f5e:	19 95       	eicall
    1f60:	ff 91       	pop	r31
    1f62:	ef 91       	pop	r30
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	0f 90       	pop	r0
    1f7a:	0b be       	out	0x3b, r0	; 59
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	0b b6       	in	r0, 0x3b	; 59
    1f92:	0f 92       	push	r0
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	e0 91 cf 21 	lds	r30, 0x21CF
    1fb0:	f0 91 d0 21 	lds	r31, 0x21D0
    1fb4:	30 97       	sbiw	r30, 0x00	; 0
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <__vector_45+0x3c>
    1fb8:	80 91 c5 22 	lds	r24, 0x22C5
    1fbc:	90 91 c6 22 	lds	r25, 0x22C6
    1fc0:	19 95       	eicall
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0b be       	out	0x3b, r0	; 59
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	0f 90       	pop	r0
    1fe4:	1f 90       	pop	r1
    1fe6:	18 95       	reti

00001fe8 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    1fe8:	1f 92       	push	r1
    1fea:	0f 92       	push	r0
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	0f 92       	push	r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	0b b6       	in	r0, 0x3b	; 59
    1ff4:	0f 92       	push	r0
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
    200e:	e0 91 d1 21 	lds	r30, 0x21D1
    2012:	f0 91 d2 21 	lds	r31, 0x21D2
    2016:	30 97       	sbiw	r30, 0x00	; 0
    2018:	29 f0       	breq	.+10     	; 0x2024 <__vector_46+0x3c>
    201a:	80 91 c7 22 	lds	r24, 0x22C7
    201e:	90 91 c8 22 	lds	r25, 0x22C8
    2022:	19 95       	eicall
    2024:	ff 91       	pop	r31
    2026:	ef 91       	pop	r30
    2028:	bf 91       	pop	r27
    202a:	af 91       	pop	r26
    202c:	9f 91       	pop	r25
    202e:	8f 91       	pop	r24
    2030:	7f 91       	pop	r23
    2032:	6f 91       	pop	r22
    2034:	5f 91       	pop	r21
    2036:	4f 91       	pop	r20
    2038:	3f 91       	pop	r19
    203a:	2f 91       	pop	r18
    203c:	0f 90       	pop	r0
    203e:	0b be       	out	0x3b, r0	; 59
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	0b b6       	in	r0, 0x3b	; 59
    2056:	0f 92       	push	r0
    2058:	2f 93       	push	r18
    205a:	3f 93       	push	r19
    205c:	4f 93       	push	r20
    205e:	5f 93       	push	r21
    2060:	6f 93       	push	r22
    2062:	7f 93       	push	r23
    2064:	8f 93       	push	r24
    2066:	9f 93       	push	r25
    2068:	af 93       	push	r26
    206a:	bf 93       	push	r27
    206c:	ef 93       	push	r30
    206e:	ff 93       	push	r31
    2070:	e0 91 d3 21 	lds	r30, 0x21D3
    2074:	f0 91 d4 21 	lds	r31, 0x21D4
    2078:	30 97       	sbiw	r30, 0x00	; 0
    207a:	29 f0       	breq	.+10     	; 0x2086 <__vector_47+0x3c>
    207c:	80 91 c9 22 	lds	r24, 0x22C9
    2080:	90 91 ca 22 	lds	r25, 0x22CA
    2084:	19 95       	eicall
    2086:	ff 91       	pop	r31
    2088:	ef 91       	pop	r30
    208a:	bf 91       	pop	r27
    208c:	af 91       	pop	r26
    208e:	9f 91       	pop	r25
    2090:	8f 91       	pop	r24
    2092:	7f 91       	pop	r23
    2094:	6f 91       	pop	r22
    2096:	5f 91       	pop	r21
    2098:	4f 91       	pop	r20
    209a:	3f 91       	pop	r19
    209c:	2f 91       	pop	r18
    209e:	0f 90       	pop	r0
    20a0:	0b be       	out	0x3b, r0	; 59
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	0b b6       	in	r0, 0x3b	; 59
    20b8:	0f 92       	push	r0
    20ba:	2f 93       	push	r18
    20bc:	3f 93       	push	r19
    20be:	4f 93       	push	r20
    20c0:	5f 93       	push	r21
    20c2:	6f 93       	push	r22
    20c4:	7f 93       	push	r23
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	af 93       	push	r26
    20cc:	bf 93       	push	r27
    20ce:	ef 93       	push	r30
    20d0:	ff 93       	push	r31
    20d2:	e0 91 d5 21 	lds	r30, 0x21D5
    20d6:	f0 91 d6 21 	lds	r31, 0x21D6
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <__vector_48+0x3c>
    20de:	80 91 cb 22 	lds	r24, 0x22CB
    20e2:	90 91 cc 22 	lds	r25, 0x22CC
    20e6:	19 95       	eicall
    20e8:	ff 91       	pop	r31
    20ea:	ef 91       	pop	r30
    20ec:	bf 91       	pop	r27
    20ee:	af 91       	pop	r26
    20f0:	9f 91       	pop	r25
    20f2:	8f 91       	pop	r24
    20f4:	7f 91       	pop	r23
    20f6:	6f 91       	pop	r22
    20f8:	5f 91       	pop	r21
    20fa:	4f 91       	pop	r20
    20fc:	3f 91       	pop	r19
    20fe:	2f 91       	pop	r18
    2100:	0f 90       	pop	r0
    2102:	0b be       	out	0x3b, r0	; 59
    2104:	0f 90       	pop	r0
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	0f 90       	pop	r0
    210a:	1f 90       	pop	r1
    210c:	18 95       	reti

0000210e <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	0b b6       	in	r0, 0x3b	; 59
    211a:	0f 92       	push	r0
    211c:	2f 93       	push	r18
    211e:	3f 93       	push	r19
    2120:	4f 93       	push	r20
    2122:	5f 93       	push	r21
    2124:	6f 93       	push	r22
    2126:	7f 93       	push	r23
    2128:	8f 93       	push	r24
    212a:	9f 93       	push	r25
    212c:	af 93       	push	r26
    212e:	bf 93       	push	r27
    2130:	ef 93       	push	r30
    2132:	ff 93       	push	r31
    2134:	e0 91 d7 21 	lds	r30, 0x21D7
    2138:	f0 91 d8 21 	lds	r31, 0x21D8
    213c:	30 97       	sbiw	r30, 0x00	; 0
    213e:	29 f0       	breq	.+10     	; 0x214a <__vector_49+0x3c>
    2140:	80 91 cd 22 	lds	r24, 0x22CD
    2144:	90 91 ce 22 	lds	r25, 0x22CE
    2148:	19 95       	eicall
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0b be       	out	0x3b, r0	; 59
    2166:	0f 90       	pop	r0
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	0f 90       	pop	r0
    216c:	1f 90       	pop	r1
    216e:	18 95       	reti

00002170 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2170:	1f 92       	push	r1
    2172:	0f 92       	push	r0
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	0f 92       	push	r0
    2178:	11 24       	eor	r1, r1
    217a:	0b b6       	in	r0, 0x3b	; 59
    217c:	0f 92       	push	r0
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
    2196:	e0 91 d9 21 	lds	r30, 0x21D9
    219a:	f0 91 da 21 	lds	r31, 0x21DA
    219e:	30 97       	sbiw	r30, 0x00	; 0
    21a0:	29 f0       	breq	.+10     	; 0x21ac <__vector_50+0x3c>
    21a2:	80 91 cf 22 	lds	r24, 0x22CF
    21a6:	90 91 d0 22 	lds	r25, 0x22D0
    21aa:	19 95       	eicall
    21ac:	ff 91       	pop	r31
    21ae:	ef 91       	pop	r30
    21b0:	bf 91       	pop	r27
    21b2:	af 91       	pop	r26
    21b4:	9f 91       	pop	r25
    21b6:	8f 91       	pop	r24
    21b8:	7f 91       	pop	r23
    21ba:	6f 91       	pop	r22
    21bc:	5f 91       	pop	r21
    21be:	4f 91       	pop	r20
    21c0:	3f 91       	pop	r19
    21c2:	2f 91       	pop	r18
    21c4:	0f 90       	pop	r0
    21c6:	0b be       	out	0x3b, r0	; 59
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti

000021d2 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    21d2:	1f 92       	push	r1
    21d4:	0f 92       	push	r0
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	0f 92       	push	r0
    21da:	11 24       	eor	r1, r1
    21dc:	0b b6       	in	r0, 0x3b	; 59
    21de:	0f 92       	push	r0
    21e0:	2f 93       	push	r18
    21e2:	3f 93       	push	r19
    21e4:	4f 93       	push	r20
    21e6:	5f 93       	push	r21
    21e8:	6f 93       	push	r22
    21ea:	7f 93       	push	r23
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	af 93       	push	r26
    21f2:	bf 93       	push	r27
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    21f8:	e0 91 db 21 	lds	r30, 0x21DB
    21fc:	f0 91 dc 21 	lds	r31, 0x21DC
    2200:	30 97       	sbiw	r30, 0x00	; 0
    2202:	29 f0       	breq	.+10     	; 0x220e <__vector_51+0x3c>
    2204:	80 91 d1 22 	lds	r24, 0x22D1
    2208:	90 91 d2 22 	lds	r25, 0x22D2
    220c:	19 95       	eicall
    220e:	ff 91       	pop	r31
    2210:	ef 91       	pop	r30
    2212:	bf 91       	pop	r27
    2214:	af 91       	pop	r26
    2216:	9f 91       	pop	r25
    2218:	8f 91       	pop	r24
    221a:	7f 91       	pop	r23
    221c:	6f 91       	pop	r22
    221e:	5f 91       	pop	r21
    2220:	4f 91       	pop	r20
    2222:	3f 91       	pop	r19
    2224:	2f 91       	pop	r18
    2226:	0f 90       	pop	r0
    2228:	0b be       	out	0x3b, r0	; 59
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	0f 90       	pop	r0
    2230:	1f 90       	pop	r1
    2232:	18 95       	reti

00002234 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2234:	1f 92       	push	r1
    2236:	0f 92       	push	r0
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	0f 92       	push	r0
    223c:	11 24       	eor	r1, r1
    223e:	0b b6       	in	r0, 0x3b	; 59
    2240:	0f 92       	push	r0
    2242:	2f 93       	push	r18
    2244:	3f 93       	push	r19
    2246:	4f 93       	push	r20
    2248:	5f 93       	push	r21
    224a:	6f 93       	push	r22
    224c:	7f 93       	push	r23
    224e:	8f 93       	push	r24
    2250:	9f 93       	push	r25
    2252:	af 93       	push	r26
    2254:	bf 93       	push	r27
    2256:	ef 93       	push	r30
    2258:	ff 93       	push	r31
    225a:	e0 91 dd 21 	lds	r30, 0x21DD
    225e:	f0 91 de 21 	lds	r31, 0x21DE
    2262:	30 97       	sbiw	r30, 0x00	; 0
    2264:	29 f0       	breq	.+10     	; 0x2270 <__vector_52+0x3c>
    2266:	80 91 d3 22 	lds	r24, 0x22D3
    226a:	90 91 d4 22 	lds	r25, 0x22D4
    226e:	19 95       	eicall
    2270:	ff 91       	pop	r31
    2272:	ef 91       	pop	r30
    2274:	bf 91       	pop	r27
    2276:	af 91       	pop	r26
    2278:	9f 91       	pop	r25
    227a:	8f 91       	pop	r24
    227c:	7f 91       	pop	r23
    227e:	6f 91       	pop	r22
    2280:	5f 91       	pop	r21
    2282:	4f 91       	pop	r20
    2284:	3f 91       	pop	r19
    2286:	2f 91       	pop	r18
    2288:	0f 90       	pop	r0
    228a:	0b be       	out	0x3b, r0	; 59
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	0f 90       	pop	r0
    2292:	1f 90       	pop	r1
    2294:	18 95       	reti

00002296 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2296:	1f 92       	push	r1
    2298:	0f 92       	push	r0
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	0f 92       	push	r0
    229e:	11 24       	eor	r1, r1
    22a0:	0b b6       	in	r0, 0x3b	; 59
    22a2:	0f 92       	push	r0
    22a4:	2f 93       	push	r18
    22a6:	3f 93       	push	r19
    22a8:	4f 93       	push	r20
    22aa:	5f 93       	push	r21
    22ac:	6f 93       	push	r22
    22ae:	7f 93       	push	r23
    22b0:	8f 93       	push	r24
    22b2:	9f 93       	push	r25
    22b4:	af 93       	push	r26
    22b6:	bf 93       	push	r27
    22b8:	ef 93       	push	r30
    22ba:	ff 93       	push	r31
    22bc:	e0 91 df 21 	lds	r30, 0x21DF
    22c0:	f0 91 e0 21 	lds	r31, 0x21E0
    22c4:	30 97       	sbiw	r30, 0x00	; 0
    22c6:	29 f0       	breq	.+10     	; 0x22d2 <__vector_53+0x3c>
    22c8:	80 91 d5 22 	lds	r24, 0x22D5
    22cc:	90 91 d6 22 	lds	r25, 0x22D6
    22d0:	19 95       	eicall
    22d2:	ff 91       	pop	r31
    22d4:	ef 91       	pop	r30
    22d6:	bf 91       	pop	r27
    22d8:	af 91       	pop	r26
    22da:	9f 91       	pop	r25
    22dc:	8f 91       	pop	r24
    22de:	7f 91       	pop	r23
    22e0:	6f 91       	pop	r22
    22e2:	5f 91       	pop	r21
    22e4:	4f 91       	pop	r20
    22e6:	3f 91       	pop	r19
    22e8:	2f 91       	pop	r18
    22ea:	0f 90       	pop	r0
    22ec:	0b be       	out	0x3b, r0	; 59
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    22f8:	1f 92       	push	r1
    22fa:	0f 92       	push	r0
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	0f 92       	push	r0
    2300:	11 24       	eor	r1, r1
    2302:	0b b6       	in	r0, 0x3b	; 59
    2304:	0f 92       	push	r0
    2306:	2f 93       	push	r18
    2308:	3f 93       	push	r19
    230a:	4f 93       	push	r20
    230c:	5f 93       	push	r21
    230e:	6f 93       	push	r22
    2310:	7f 93       	push	r23
    2312:	8f 93       	push	r24
    2314:	9f 93       	push	r25
    2316:	af 93       	push	r26
    2318:	bf 93       	push	r27
    231a:	ef 93       	push	r30
    231c:	ff 93       	push	r31
    231e:	e0 91 e1 21 	lds	r30, 0x21E1
    2322:	f0 91 e2 21 	lds	r31, 0x21E2
    2326:	30 97       	sbiw	r30, 0x00	; 0
    2328:	29 f0       	breq	.+10     	; 0x2334 <__vector_54+0x3c>
    232a:	80 91 d7 22 	lds	r24, 0x22D7
    232e:	90 91 d8 22 	lds	r25, 0x22D8
    2332:	19 95       	eicall
    2334:	ff 91       	pop	r31
    2336:	ef 91       	pop	r30
    2338:	bf 91       	pop	r27
    233a:	af 91       	pop	r26
    233c:	9f 91       	pop	r25
    233e:	8f 91       	pop	r24
    2340:	7f 91       	pop	r23
    2342:	6f 91       	pop	r22
    2344:	5f 91       	pop	r21
    2346:	4f 91       	pop	r20
    2348:	3f 91       	pop	r19
    234a:	2f 91       	pop	r18
    234c:	0f 90       	pop	r0
    234e:	0b be       	out	0x3b, r0	; 59
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	0f 92       	push	r0
    2362:	11 24       	eor	r1, r1
    2364:	0b b6       	in	r0, 0x3b	; 59
    2366:	0f 92       	push	r0
    2368:	2f 93       	push	r18
    236a:	3f 93       	push	r19
    236c:	4f 93       	push	r20
    236e:	5f 93       	push	r21
    2370:	6f 93       	push	r22
    2372:	7f 93       	push	r23
    2374:	8f 93       	push	r24
    2376:	9f 93       	push	r25
    2378:	af 93       	push	r26
    237a:	bf 93       	push	r27
    237c:	ef 93       	push	r30
    237e:	ff 93       	push	r31
    2380:	e0 91 e3 21 	lds	r30, 0x21E3
    2384:	f0 91 e4 21 	lds	r31, 0x21E4
    2388:	30 97       	sbiw	r30, 0x00	; 0
    238a:	29 f0       	breq	.+10     	; 0x2396 <__vector_55+0x3c>
    238c:	80 91 d9 22 	lds	r24, 0x22D9
    2390:	90 91 da 22 	lds	r25, 0x22DA
    2394:	19 95       	eicall
    2396:	ff 91       	pop	r31
    2398:	ef 91       	pop	r30
    239a:	bf 91       	pop	r27
    239c:	af 91       	pop	r26
    239e:	9f 91       	pop	r25
    23a0:	8f 91       	pop	r24
    23a2:	7f 91       	pop	r23
    23a4:	6f 91       	pop	r22
    23a6:	5f 91       	pop	r21
    23a8:	4f 91       	pop	r20
    23aa:	3f 91       	pop	r19
    23ac:	2f 91       	pop	r18
    23ae:	0f 90       	pop	r0
    23b0:	0b be       	out	0x3b, r0	; 59
    23b2:	0f 90       	pop	r0
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	0f 90       	pop	r0
    23b8:	1f 90       	pop	r1
    23ba:	18 95       	reti

000023bc <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    23bc:	1f 92       	push	r1
    23be:	0f 92       	push	r0
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	0f 92       	push	r0
    23c4:	11 24       	eor	r1, r1
    23c6:	0b b6       	in	r0, 0x3b	; 59
    23c8:	0f 92       	push	r0
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	e0 91 e5 21 	lds	r30, 0x21E5
    23e6:	f0 91 e6 21 	lds	r31, 0x21E6
    23ea:	30 97       	sbiw	r30, 0x00	; 0
    23ec:	29 f0       	breq	.+10     	; 0x23f8 <__vector_56+0x3c>
    23ee:	80 91 db 22 	lds	r24, 0x22DB
    23f2:	90 91 dc 22 	lds	r25, 0x22DC
    23f6:	19 95       	eicall
    23f8:	ff 91       	pop	r31
    23fa:	ef 91       	pop	r30
    23fc:	bf 91       	pop	r27
    23fe:	af 91       	pop	r26
    2400:	9f 91       	pop	r25
    2402:	8f 91       	pop	r24
    2404:	7f 91       	pop	r23
    2406:	6f 91       	pop	r22
    2408:	5f 91       	pop	r21
    240a:	4f 91       	pop	r20
    240c:	3f 91       	pop	r19
    240e:	2f 91       	pop	r18
    2410:	0f 90       	pop	r0
    2412:	0b be       	out	0x3b, r0	; 59
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	18 95       	reti

0000241e <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    241e:	1f 92       	push	r1
    2420:	0f 92       	push	r0
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	0f 92       	push	r0
    2426:	11 24       	eor	r1, r1
    2428:	0b b6       	in	r0, 0x3b	; 59
    242a:	0f 92       	push	r0
    242c:	2f 93       	push	r18
    242e:	3f 93       	push	r19
    2430:	4f 93       	push	r20
    2432:	5f 93       	push	r21
    2434:	6f 93       	push	r22
    2436:	7f 93       	push	r23
    2438:	8f 93       	push	r24
    243a:	9f 93       	push	r25
    243c:	af 93       	push	r26
    243e:	bf 93       	push	r27
    2440:	ef 93       	push	r30
    2442:	ff 93       	push	r31
    2444:	e0 91 e7 21 	lds	r30, 0x21E7
    2448:	f0 91 e8 21 	lds	r31, 0x21E8
    244c:	30 97       	sbiw	r30, 0x00	; 0
    244e:	29 f0       	breq	.+10     	; 0x245a <__vector_57+0x3c>
    2450:	80 91 dd 22 	lds	r24, 0x22DD
    2454:	90 91 de 22 	lds	r25, 0x22DE
    2458:	19 95       	eicall
    245a:	ff 91       	pop	r31
    245c:	ef 91       	pop	r30
    245e:	bf 91       	pop	r27
    2460:	af 91       	pop	r26
    2462:	9f 91       	pop	r25
    2464:	8f 91       	pop	r24
    2466:	7f 91       	pop	r23
    2468:	6f 91       	pop	r22
    246a:	5f 91       	pop	r21
    246c:	4f 91       	pop	r20
    246e:	3f 91       	pop	r19
    2470:	2f 91       	pop	r18
    2472:	0f 90       	pop	r0
    2474:	0b be       	out	0x3b, r0	; 59
    2476:	0f 90       	pop	r0
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	0f 90       	pop	r0
    247c:	1f 90       	pop	r1
    247e:	18 95       	reti

00002480 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	0f 92       	push	r0
    2488:	11 24       	eor	r1, r1
    248a:	0b b6       	in	r0, 0x3b	; 59
    248c:	0f 92       	push	r0
    248e:	2f 93       	push	r18
    2490:	3f 93       	push	r19
    2492:	4f 93       	push	r20
    2494:	5f 93       	push	r21
    2496:	6f 93       	push	r22
    2498:	7f 93       	push	r23
    249a:	8f 93       	push	r24
    249c:	9f 93       	push	r25
    249e:	af 93       	push	r26
    24a0:	bf 93       	push	r27
    24a2:	ef 93       	push	r30
    24a4:	ff 93       	push	r31
    24a6:	e0 91 e9 21 	lds	r30, 0x21E9
    24aa:	f0 91 ea 21 	lds	r31, 0x21EA
    24ae:	30 97       	sbiw	r30, 0x00	; 0
    24b0:	29 f0       	breq	.+10     	; 0x24bc <__vector_58+0x3c>
    24b2:	80 91 df 22 	lds	r24, 0x22DF
    24b6:	90 91 e0 22 	lds	r25, 0x22E0
    24ba:	19 95       	eicall
    24bc:	ff 91       	pop	r31
    24be:	ef 91       	pop	r30
    24c0:	bf 91       	pop	r27
    24c2:	af 91       	pop	r26
    24c4:	9f 91       	pop	r25
    24c6:	8f 91       	pop	r24
    24c8:	7f 91       	pop	r23
    24ca:	6f 91       	pop	r22
    24cc:	5f 91       	pop	r21
    24ce:	4f 91       	pop	r20
    24d0:	3f 91       	pop	r19
    24d2:	2f 91       	pop	r18
    24d4:	0f 90       	pop	r0
    24d6:	0b be       	out	0x3b, r0	; 59
    24d8:	0f 90       	pop	r0
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    24e2:	1f 92       	push	r1
    24e4:	0f 92       	push	r0
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	0f 92       	push	r0
    24ea:	11 24       	eor	r1, r1
    24ec:	0b b6       	in	r0, 0x3b	; 59
    24ee:	0f 92       	push	r0
    24f0:	2f 93       	push	r18
    24f2:	3f 93       	push	r19
    24f4:	4f 93       	push	r20
    24f6:	5f 93       	push	r21
    24f8:	6f 93       	push	r22
    24fa:	7f 93       	push	r23
    24fc:	8f 93       	push	r24
    24fe:	9f 93       	push	r25
    2500:	af 93       	push	r26
    2502:	bf 93       	push	r27
    2504:	ef 93       	push	r30
    2506:	ff 93       	push	r31
    2508:	e0 91 eb 21 	lds	r30, 0x21EB
    250c:	f0 91 ec 21 	lds	r31, 0x21EC
    2510:	30 97       	sbiw	r30, 0x00	; 0
    2512:	29 f0       	breq	.+10     	; 0x251e <__vector_59+0x3c>
    2514:	80 91 e1 22 	lds	r24, 0x22E1
    2518:	90 91 e2 22 	lds	r25, 0x22E2
    251c:	19 95       	eicall
    251e:	ff 91       	pop	r31
    2520:	ef 91       	pop	r30
    2522:	bf 91       	pop	r27
    2524:	af 91       	pop	r26
    2526:	9f 91       	pop	r25
    2528:	8f 91       	pop	r24
    252a:	7f 91       	pop	r23
    252c:	6f 91       	pop	r22
    252e:	5f 91       	pop	r21
    2530:	4f 91       	pop	r20
    2532:	3f 91       	pop	r19
    2534:	2f 91       	pop	r18
    2536:	0f 90       	pop	r0
    2538:	0b be       	out	0x3b, r0	; 59
    253a:	0f 90       	pop	r0
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	0f 90       	pop	r0
    2540:	1f 90       	pop	r1
    2542:	18 95       	reti

00002544 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2544:	1f 92       	push	r1
    2546:	0f 92       	push	r0
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	0f 92       	push	r0
    254c:	11 24       	eor	r1, r1
    254e:	0b b6       	in	r0, 0x3b	; 59
    2550:	0f 92       	push	r0
    2552:	2f 93       	push	r18
    2554:	3f 93       	push	r19
    2556:	4f 93       	push	r20
    2558:	5f 93       	push	r21
    255a:	6f 93       	push	r22
    255c:	7f 93       	push	r23
    255e:	8f 93       	push	r24
    2560:	9f 93       	push	r25
    2562:	af 93       	push	r26
    2564:	bf 93       	push	r27
    2566:	ef 93       	push	r30
    2568:	ff 93       	push	r31
    256a:	e0 91 ed 21 	lds	r30, 0x21ED
    256e:	f0 91 ee 21 	lds	r31, 0x21EE
    2572:	30 97       	sbiw	r30, 0x00	; 0
    2574:	29 f0       	breq	.+10     	; 0x2580 <__vector_60+0x3c>
    2576:	80 91 e3 22 	lds	r24, 0x22E3
    257a:	90 91 e4 22 	lds	r25, 0x22E4
    257e:	19 95       	eicall
    2580:	ff 91       	pop	r31
    2582:	ef 91       	pop	r30
    2584:	bf 91       	pop	r27
    2586:	af 91       	pop	r26
    2588:	9f 91       	pop	r25
    258a:	8f 91       	pop	r24
    258c:	7f 91       	pop	r23
    258e:	6f 91       	pop	r22
    2590:	5f 91       	pop	r21
    2592:	4f 91       	pop	r20
    2594:	3f 91       	pop	r19
    2596:	2f 91       	pop	r18
    2598:	0f 90       	pop	r0
    259a:	0b be       	out	0x3b, r0	; 59
    259c:	0f 90       	pop	r0
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	0f 90       	pop	r0
    25a2:	1f 90       	pop	r1
    25a4:	18 95       	reti

000025a6 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    25a6:	1f 92       	push	r1
    25a8:	0f 92       	push	r0
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	0f 92       	push	r0
    25ae:	11 24       	eor	r1, r1
    25b0:	0b b6       	in	r0, 0x3b	; 59
    25b2:	0f 92       	push	r0
    25b4:	2f 93       	push	r18
    25b6:	3f 93       	push	r19
    25b8:	4f 93       	push	r20
    25ba:	5f 93       	push	r21
    25bc:	6f 93       	push	r22
    25be:	7f 93       	push	r23
    25c0:	8f 93       	push	r24
    25c2:	9f 93       	push	r25
    25c4:	af 93       	push	r26
    25c6:	bf 93       	push	r27
    25c8:	ef 93       	push	r30
    25ca:	ff 93       	push	r31
    25cc:	e0 91 ef 21 	lds	r30, 0x21EF
    25d0:	f0 91 f0 21 	lds	r31, 0x21F0
    25d4:	30 97       	sbiw	r30, 0x00	; 0
    25d6:	29 f0       	breq	.+10     	; 0x25e2 <__vector_61+0x3c>
    25d8:	80 91 e5 22 	lds	r24, 0x22E5
    25dc:	90 91 e6 22 	lds	r25, 0x22E6
    25e0:	19 95       	eicall
    25e2:	ff 91       	pop	r31
    25e4:	ef 91       	pop	r30
    25e6:	bf 91       	pop	r27
    25e8:	af 91       	pop	r26
    25ea:	9f 91       	pop	r25
    25ec:	8f 91       	pop	r24
    25ee:	7f 91       	pop	r23
    25f0:	6f 91       	pop	r22
    25f2:	5f 91       	pop	r21
    25f4:	4f 91       	pop	r20
    25f6:	3f 91       	pop	r19
    25f8:	2f 91       	pop	r18
    25fa:	0f 90       	pop	r0
    25fc:	0b be       	out	0x3b, r0	; 59
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2608:	1f 92       	push	r1
    260a:	0f 92       	push	r0
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	0f 92       	push	r0
    2610:	11 24       	eor	r1, r1
    2612:	0b b6       	in	r0, 0x3b	; 59
    2614:	0f 92       	push	r0
    2616:	2f 93       	push	r18
    2618:	3f 93       	push	r19
    261a:	4f 93       	push	r20
    261c:	5f 93       	push	r21
    261e:	6f 93       	push	r22
    2620:	7f 93       	push	r23
    2622:	8f 93       	push	r24
    2624:	9f 93       	push	r25
    2626:	af 93       	push	r26
    2628:	bf 93       	push	r27
    262a:	ef 93       	push	r30
    262c:	ff 93       	push	r31
    262e:	e0 91 f1 21 	lds	r30, 0x21F1
    2632:	f0 91 f2 21 	lds	r31, 0x21F2
    2636:	30 97       	sbiw	r30, 0x00	; 0
    2638:	29 f0       	breq	.+10     	; 0x2644 <__vector_62+0x3c>
    263a:	80 91 e7 22 	lds	r24, 0x22E7
    263e:	90 91 e8 22 	lds	r25, 0x22E8
    2642:	19 95       	eicall
    2644:	ff 91       	pop	r31
    2646:	ef 91       	pop	r30
    2648:	bf 91       	pop	r27
    264a:	af 91       	pop	r26
    264c:	9f 91       	pop	r25
    264e:	8f 91       	pop	r24
    2650:	7f 91       	pop	r23
    2652:	6f 91       	pop	r22
    2654:	5f 91       	pop	r21
    2656:	4f 91       	pop	r20
    2658:	3f 91       	pop	r19
    265a:	2f 91       	pop	r18
    265c:	0f 90       	pop	r0
    265e:	0b be       	out	0x3b, r0	; 59
    2660:	0f 90       	pop	r0
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	0f 90       	pop	r0
    2666:	1f 90       	pop	r1
    2668:	18 95       	reti

0000266a <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    266a:	1f 92       	push	r1
    266c:	0f 92       	push	r0
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	0f 92       	push	r0
    2672:	11 24       	eor	r1, r1
    2674:	0b b6       	in	r0, 0x3b	; 59
    2676:	0f 92       	push	r0
    2678:	2f 93       	push	r18
    267a:	3f 93       	push	r19
    267c:	4f 93       	push	r20
    267e:	5f 93       	push	r21
    2680:	6f 93       	push	r22
    2682:	7f 93       	push	r23
    2684:	8f 93       	push	r24
    2686:	9f 93       	push	r25
    2688:	af 93       	push	r26
    268a:	bf 93       	push	r27
    268c:	ef 93       	push	r30
    268e:	ff 93       	push	r31
    2690:	e0 91 f3 21 	lds	r30, 0x21F3
    2694:	f0 91 f4 21 	lds	r31, 0x21F4
    2698:	30 97       	sbiw	r30, 0x00	; 0
    269a:	29 f0       	breq	.+10     	; 0x26a6 <__vector_63+0x3c>
    269c:	80 91 e9 22 	lds	r24, 0x22E9
    26a0:	90 91 ea 22 	lds	r25, 0x22EA
    26a4:	19 95       	eicall
    26a6:	ff 91       	pop	r31
    26a8:	ef 91       	pop	r30
    26aa:	bf 91       	pop	r27
    26ac:	af 91       	pop	r26
    26ae:	9f 91       	pop	r25
    26b0:	8f 91       	pop	r24
    26b2:	7f 91       	pop	r23
    26b4:	6f 91       	pop	r22
    26b6:	5f 91       	pop	r21
    26b8:	4f 91       	pop	r20
    26ba:	3f 91       	pop	r19
    26bc:	2f 91       	pop	r18
    26be:	0f 90       	pop	r0
    26c0:	0b be       	out	0x3b, r0	; 59
    26c2:	0f 90       	pop	r0
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	0f 90       	pop	r0
    26c8:	1f 90       	pop	r1
    26ca:	18 95       	reti

000026cc <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    26cc:	1f 92       	push	r1
    26ce:	0f 92       	push	r0
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	0f 92       	push	r0
    26d4:	11 24       	eor	r1, r1
    26d6:	0b b6       	in	r0, 0x3b	; 59
    26d8:	0f 92       	push	r0
    26da:	2f 93       	push	r18
    26dc:	3f 93       	push	r19
    26de:	4f 93       	push	r20
    26e0:	5f 93       	push	r21
    26e2:	6f 93       	push	r22
    26e4:	7f 93       	push	r23
    26e6:	8f 93       	push	r24
    26e8:	9f 93       	push	r25
    26ea:	af 93       	push	r26
    26ec:	bf 93       	push	r27
    26ee:	ef 93       	push	r30
    26f0:	ff 93       	push	r31
    26f2:	e0 91 f5 21 	lds	r30, 0x21F5
    26f6:	f0 91 f6 21 	lds	r31, 0x21F6
    26fa:	30 97       	sbiw	r30, 0x00	; 0
    26fc:	29 f0       	breq	.+10     	; 0x2708 <__vector_64+0x3c>
    26fe:	80 91 eb 22 	lds	r24, 0x22EB
    2702:	90 91 ec 22 	lds	r25, 0x22EC
    2706:	19 95       	eicall
    2708:	ff 91       	pop	r31
    270a:	ef 91       	pop	r30
    270c:	bf 91       	pop	r27
    270e:	af 91       	pop	r26
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	7f 91       	pop	r23
    2716:	6f 91       	pop	r22
    2718:	5f 91       	pop	r21
    271a:	4f 91       	pop	r20
    271c:	3f 91       	pop	r19
    271e:	2f 91       	pop	r18
    2720:	0f 90       	pop	r0
    2722:	0b be       	out	0x3b, r0	; 59
    2724:	0f 90       	pop	r0
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	0f 90       	pop	r0
    272a:	1f 90       	pop	r1
    272c:	18 95       	reti

0000272e <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    272e:	1f 92       	push	r1
    2730:	0f 92       	push	r0
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	0f 92       	push	r0
    2736:	11 24       	eor	r1, r1
    2738:	0b b6       	in	r0, 0x3b	; 59
    273a:	0f 92       	push	r0
    273c:	2f 93       	push	r18
    273e:	3f 93       	push	r19
    2740:	4f 93       	push	r20
    2742:	5f 93       	push	r21
    2744:	6f 93       	push	r22
    2746:	7f 93       	push	r23
    2748:	8f 93       	push	r24
    274a:	9f 93       	push	r25
    274c:	af 93       	push	r26
    274e:	bf 93       	push	r27
    2750:	ef 93       	push	r30
    2752:	ff 93       	push	r31
    2754:	e0 91 f7 21 	lds	r30, 0x21F7
    2758:	f0 91 f8 21 	lds	r31, 0x21F8
    275c:	30 97       	sbiw	r30, 0x00	; 0
    275e:	29 f0       	breq	.+10     	; 0x276a <__vector_65+0x3c>
    2760:	80 91 ed 22 	lds	r24, 0x22ED
    2764:	90 91 ee 22 	lds	r25, 0x22EE
    2768:	19 95       	eicall
    276a:	ff 91       	pop	r31
    276c:	ef 91       	pop	r30
    276e:	bf 91       	pop	r27
    2770:	af 91       	pop	r26
    2772:	9f 91       	pop	r25
    2774:	8f 91       	pop	r24
    2776:	7f 91       	pop	r23
    2778:	6f 91       	pop	r22
    277a:	5f 91       	pop	r21
    277c:	4f 91       	pop	r20
    277e:	3f 91       	pop	r19
    2780:	2f 91       	pop	r18
    2782:	0f 90       	pop	r0
    2784:	0b be       	out	0x3b, r0	; 59
    2786:	0f 90       	pop	r0
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	0f 90       	pop	r0
    278c:	1f 90       	pop	r1
    278e:	18 95       	reti

00002790 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    2790:	1f 92       	push	r1
    2792:	0f 92       	push	r0
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	0f 92       	push	r0
    2798:	11 24       	eor	r1, r1
    279a:	0b b6       	in	r0, 0x3b	; 59
    279c:	0f 92       	push	r0
    279e:	2f 93       	push	r18
    27a0:	3f 93       	push	r19
    27a2:	4f 93       	push	r20
    27a4:	5f 93       	push	r21
    27a6:	6f 93       	push	r22
    27a8:	7f 93       	push	r23
    27aa:	8f 93       	push	r24
    27ac:	9f 93       	push	r25
    27ae:	af 93       	push	r26
    27b0:	bf 93       	push	r27
    27b2:	ef 93       	push	r30
    27b4:	ff 93       	push	r31
    27b6:	e0 91 f9 21 	lds	r30, 0x21F9
    27ba:	f0 91 fa 21 	lds	r31, 0x21FA
    27be:	30 97       	sbiw	r30, 0x00	; 0
    27c0:	29 f0       	breq	.+10     	; 0x27cc <__vector_66+0x3c>
    27c2:	80 91 ef 22 	lds	r24, 0x22EF
    27c6:	90 91 f0 22 	lds	r25, 0x22F0
    27ca:	19 95       	eicall
    27cc:	ff 91       	pop	r31
    27ce:	ef 91       	pop	r30
    27d0:	bf 91       	pop	r27
    27d2:	af 91       	pop	r26
    27d4:	9f 91       	pop	r25
    27d6:	8f 91       	pop	r24
    27d8:	7f 91       	pop	r23
    27da:	6f 91       	pop	r22
    27dc:	5f 91       	pop	r21
    27de:	4f 91       	pop	r20
    27e0:	3f 91       	pop	r19
    27e2:	2f 91       	pop	r18
    27e4:	0f 90       	pop	r0
    27e6:	0b be       	out	0x3b, r0	; 59
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	0f 90       	pop	r0
    27ee:	1f 90       	pop	r1
    27f0:	18 95       	reti

000027f2 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    27f2:	1f 92       	push	r1
    27f4:	0f 92       	push	r0
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	0f 92       	push	r0
    27fa:	11 24       	eor	r1, r1
    27fc:	0b b6       	in	r0, 0x3b	; 59
    27fe:	0f 92       	push	r0
    2800:	2f 93       	push	r18
    2802:	3f 93       	push	r19
    2804:	4f 93       	push	r20
    2806:	5f 93       	push	r21
    2808:	6f 93       	push	r22
    280a:	7f 93       	push	r23
    280c:	8f 93       	push	r24
    280e:	9f 93       	push	r25
    2810:	af 93       	push	r26
    2812:	bf 93       	push	r27
    2814:	ef 93       	push	r30
    2816:	ff 93       	push	r31
    2818:	e0 91 fb 21 	lds	r30, 0x21FB
    281c:	f0 91 fc 21 	lds	r31, 0x21FC
    2820:	30 97       	sbiw	r30, 0x00	; 0
    2822:	29 f0       	breq	.+10     	; 0x282e <__vector_67+0x3c>
    2824:	80 91 f1 22 	lds	r24, 0x22F1
    2828:	90 91 f2 22 	lds	r25, 0x22F2
    282c:	19 95       	eicall
    282e:	ff 91       	pop	r31
    2830:	ef 91       	pop	r30
    2832:	bf 91       	pop	r27
    2834:	af 91       	pop	r26
    2836:	9f 91       	pop	r25
    2838:	8f 91       	pop	r24
    283a:	7f 91       	pop	r23
    283c:	6f 91       	pop	r22
    283e:	5f 91       	pop	r21
    2840:	4f 91       	pop	r20
    2842:	3f 91       	pop	r19
    2844:	2f 91       	pop	r18
    2846:	0f 90       	pop	r0
    2848:	0b be       	out	0x3b, r0	; 59
    284a:	0f 90       	pop	r0
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	0f 90       	pop	r0
    2850:	1f 90       	pop	r1
    2852:	18 95       	reti

00002854 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    2854:	1f 92       	push	r1
    2856:	0f 92       	push	r0
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	0f 92       	push	r0
    285c:	11 24       	eor	r1, r1
    285e:	0b b6       	in	r0, 0x3b	; 59
    2860:	0f 92       	push	r0
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
    287a:	e0 91 fd 21 	lds	r30, 0x21FD
    287e:	f0 91 fe 21 	lds	r31, 0x21FE
    2882:	30 97       	sbiw	r30, 0x00	; 0
    2884:	29 f0       	breq	.+10     	; 0x2890 <__vector_68+0x3c>
    2886:	80 91 f3 22 	lds	r24, 0x22F3
    288a:	90 91 f4 22 	lds	r25, 0x22F4
    288e:	19 95       	eicall
    2890:	ff 91       	pop	r31
    2892:	ef 91       	pop	r30
    2894:	bf 91       	pop	r27
    2896:	af 91       	pop	r26
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	7f 91       	pop	r23
    289e:	6f 91       	pop	r22
    28a0:	5f 91       	pop	r21
    28a2:	4f 91       	pop	r20
    28a4:	3f 91       	pop	r19
    28a6:	2f 91       	pop	r18
    28a8:	0f 90       	pop	r0
    28aa:	0b be       	out	0x3b, r0	; 59
    28ac:	0f 90       	pop	r0
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	0f 90       	pop	r0
    28b2:	1f 90       	pop	r1
    28b4:	18 95       	reti

000028b6 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    28b6:	1f 92       	push	r1
    28b8:	0f 92       	push	r0
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	0f 92       	push	r0
    28be:	11 24       	eor	r1, r1
    28c0:	0b b6       	in	r0, 0x3b	; 59
    28c2:	0f 92       	push	r0
    28c4:	2f 93       	push	r18
    28c6:	3f 93       	push	r19
    28c8:	4f 93       	push	r20
    28ca:	5f 93       	push	r21
    28cc:	6f 93       	push	r22
    28ce:	7f 93       	push	r23
    28d0:	8f 93       	push	r24
    28d2:	9f 93       	push	r25
    28d4:	af 93       	push	r26
    28d6:	bf 93       	push	r27
    28d8:	ef 93       	push	r30
    28da:	ff 93       	push	r31
    28dc:	e0 91 ff 21 	lds	r30, 0x21FF
    28e0:	f0 91 00 22 	lds	r31, 0x2200
    28e4:	30 97       	sbiw	r30, 0x00	; 0
    28e6:	29 f0       	breq	.+10     	; 0x28f2 <__vector_69+0x3c>
    28e8:	80 91 f5 22 	lds	r24, 0x22F5
    28ec:	90 91 f6 22 	lds	r25, 0x22F6
    28f0:	19 95       	eicall
    28f2:	ff 91       	pop	r31
    28f4:	ef 91       	pop	r30
    28f6:	bf 91       	pop	r27
    28f8:	af 91       	pop	r26
    28fa:	9f 91       	pop	r25
    28fc:	8f 91       	pop	r24
    28fe:	7f 91       	pop	r23
    2900:	6f 91       	pop	r22
    2902:	5f 91       	pop	r21
    2904:	4f 91       	pop	r20
    2906:	3f 91       	pop	r19
    2908:	2f 91       	pop	r18
    290a:	0f 90       	pop	r0
    290c:	0b be       	out	0x3b, r0	; 59
    290e:	0f 90       	pop	r0
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	0f 90       	pop	r0
    2914:	1f 90       	pop	r1
    2916:	18 95       	reti

00002918 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    2918:	1f 92       	push	r1
    291a:	0f 92       	push	r0
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	0f 92       	push	r0
    2920:	11 24       	eor	r1, r1
    2922:	0b b6       	in	r0, 0x3b	; 59
    2924:	0f 92       	push	r0
    2926:	2f 93       	push	r18
    2928:	3f 93       	push	r19
    292a:	4f 93       	push	r20
    292c:	5f 93       	push	r21
    292e:	6f 93       	push	r22
    2930:	7f 93       	push	r23
    2932:	8f 93       	push	r24
    2934:	9f 93       	push	r25
    2936:	af 93       	push	r26
    2938:	bf 93       	push	r27
    293a:	ef 93       	push	r30
    293c:	ff 93       	push	r31
    293e:	e0 91 01 22 	lds	r30, 0x2201
    2942:	f0 91 02 22 	lds	r31, 0x2202
    2946:	30 97       	sbiw	r30, 0x00	; 0
    2948:	29 f0       	breq	.+10     	; 0x2954 <__vector_70+0x3c>
    294a:	80 91 f7 22 	lds	r24, 0x22F7
    294e:	90 91 f8 22 	lds	r25, 0x22F8
    2952:	19 95       	eicall
    2954:	ff 91       	pop	r31
    2956:	ef 91       	pop	r30
    2958:	bf 91       	pop	r27
    295a:	af 91       	pop	r26
    295c:	9f 91       	pop	r25
    295e:	8f 91       	pop	r24
    2960:	7f 91       	pop	r23
    2962:	6f 91       	pop	r22
    2964:	5f 91       	pop	r21
    2966:	4f 91       	pop	r20
    2968:	3f 91       	pop	r19
    296a:	2f 91       	pop	r18
    296c:	0f 90       	pop	r0
    296e:	0b be       	out	0x3b, r0	; 59
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti

0000297a <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    297a:	1f 92       	push	r1
    297c:	0f 92       	push	r0
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	0f 92       	push	r0
    2982:	11 24       	eor	r1, r1
    2984:	0b b6       	in	r0, 0x3b	; 59
    2986:	0f 92       	push	r0
    2988:	2f 93       	push	r18
    298a:	3f 93       	push	r19
    298c:	4f 93       	push	r20
    298e:	5f 93       	push	r21
    2990:	6f 93       	push	r22
    2992:	7f 93       	push	r23
    2994:	8f 93       	push	r24
    2996:	9f 93       	push	r25
    2998:	af 93       	push	r26
    299a:	bf 93       	push	r27
    299c:	ef 93       	push	r30
    299e:	ff 93       	push	r31
    29a0:	e0 91 03 22 	lds	r30, 0x2203
    29a4:	f0 91 04 22 	lds	r31, 0x2204
    29a8:	30 97       	sbiw	r30, 0x00	; 0
    29aa:	29 f0       	breq	.+10     	; 0x29b6 <__vector_71+0x3c>
    29ac:	80 91 f9 22 	lds	r24, 0x22F9
    29b0:	90 91 fa 22 	lds	r25, 0x22FA
    29b4:	19 95       	eicall
    29b6:	ff 91       	pop	r31
    29b8:	ef 91       	pop	r30
    29ba:	bf 91       	pop	r27
    29bc:	af 91       	pop	r26
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	7f 91       	pop	r23
    29c4:	6f 91       	pop	r22
    29c6:	5f 91       	pop	r21
    29c8:	4f 91       	pop	r20
    29ca:	3f 91       	pop	r19
    29cc:	2f 91       	pop	r18
    29ce:	0f 90       	pop	r0
    29d0:	0b be       	out	0x3b, r0	; 59
    29d2:	0f 90       	pop	r0
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	0f 90       	pop	r0
    29d8:	1f 90       	pop	r1
    29da:	18 95       	reti

000029dc <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    29dc:	1f 92       	push	r1
    29de:	0f 92       	push	r0
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	0f 92       	push	r0
    29e4:	11 24       	eor	r1, r1
    29e6:	0b b6       	in	r0, 0x3b	; 59
    29e8:	0f 92       	push	r0
    29ea:	2f 93       	push	r18
    29ec:	3f 93       	push	r19
    29ee:	4f 93       	push	r20
    29f0:	5f 93       	push	r21
    29f2:	6f 93       	push	r22
    29f4:	7f 93       	push	r23
    29f6:	8f 93       	push	r24
    29f8:	9f 93       	push	r25
    29fa:	af 93       	push	r26
    29fc:	bf 93       	push	r27
    29fe:	ef 93       	push	r30
    2a00:	ff 93       	push	r31
    2a02:	e0 91 05 22 	lds	r30, 0x2205
    2a06:	f0 91 06 22 	lds	r31, 0x2206
    2a0a:	30 97       	sbiw	r30, 0x00	; 0
    2a0c:	29 f0       	breq	.+10     	; 0x2a18 <__vector_72+0x3c>
    2a0e:	80 91 fb 22 	lds	r24, 0x22FB
    2a12:	90 91 fc 22 	lds	r25, 0x22FC
    2a16:	19 95       	eicall
    2a18:	ff 91       	pop	r31
    2a1a:	ef 91       	pop	r30
    2a1c:	bf 91       	pop	r27
    2a1e:	af 91       	pop	r26
    2a20:	9f 91       	pop	r25
    2a22:	8f 91       	pop	r24
    2a24:	7f 91       	pop	r23
    2a26:	6f 91       	pop	r22
    2a28:	5f 91       	pop	r21
    2a2a:	4f 91       	pop	r20
    2a2c:	3f 91       	pop	r19
    2a2e:	2f 91       	pop	r18
    2a30:	0f 90       	pop	r0
    2a32:	0b be       	out	0x3b, r0	; 59
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	0f 90       	pop	r0
    2a3a:	1f 90       	pop	r1
    2a3c:	18 95       	reti

00002a3e <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	0b b6       	in	r0, 0x3b	; 59
    2a4a:	0f 92       	push	r0
    2a4c:	2f 93       	push	r18
    2a4e:	3f 93       	push	r19
    2a50:	4f 93       	push	r20
    2a52:	5f 93       	push	r21
    2a54:	6f 93       	push	r22
    2a56:	7f 93       	push	r23
    2a58:	8f 93       	push	r24
    2a5a:	9f 93       	push	r25
    2a5c:	af 93       	push	r26
    2a5e:	bf 93       	push	r27
    2a60:	ef 93       	push	r30
    2a62:	ff 93       	push	r31
    2a64:	e0 91 07 22 	lds	r30, 0x2207
    2a68:	f0 91 08 22 	lds	r31, 0x2208
    2a6c:	30 97       	sbiw	r30, 0x00	; 0
    2a6e:	29 f0       	breq	.+10     	; 0x2a7a <__vector_73+0x3c>
    2a70:	80 91 fd 22 	lds	r24, 0x22FD
    2a74:	90 91 fe 22 	lds	r25, 0x22FE
    2a78:	19 95       	eicall
    2a7a:	ff 91       	pop	r31
    2a7c:	ef 91       	pop	r30
    2a7e:	bf 91       	pop	r27
    2a80:	af 91       	pop	r26
    2a82:	9f 91       	pop	r25
    2a84:	8f 91       	pop	r24
    2a86:	7f 91       	pop	r23
    2a88:	6f 91       	pop	r22
    2a8a:	5f 91       	pop	r21
    2a8c:	4f 91       	pop	r20
    2a8e:	3f 91       	pop	r19
    2a90:	2f 91       	pop	r18
    2a92:	0f 90       	pop	r0
    2a94:	0b be       	out	0x3b, r0	; 59
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	0f 90       	pop	r0
    2a9c:	1f 90       	pop	r1
    2a9e:	18 95       	reti

00002aa0 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	0b b6       	in	r0, 0x3b	; 59
    2aac:	0f 92       	push	r0
    2aae:	2f 93       	push	r18
    2ab0:	3f 93       	push	r19
    2ab2:	4f 93       	push	r20
    2ab4:	5f 93       	push	r21
    2ab6:	6f 93       	push	r22
    2ab8:	7f 93       	push	r23
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	af 93       	push	r26
    2ac0:	bf 93       	push	r27
    2ac2:	ef 93       	push	r30
    2ac4:	ff 93       	push	r31
    2ac6:	e0 91 09 22 	lds	r30, 0x2209
    2aca:	f0 91 0a 22 	lds	r31, 0x220A
    2ace:	30 97       	sbiw	r30, 0x00	; 0
    2ad0:	29 f0       	breq	.+10     	; 0x2adc <__vector_74+0x3c>
    2ad2:	80 91 ff 22 	lds	r24, 0x22FF
    2ad6:	90 91 00 23 	lds	r25, 0x2300
    2ada:	19 95       	eicall
    2adc:	ff 91       	pop	r31
    2ade:	ef 91       	pop	r30
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	7f 91       	pop	r23
    2aea:	6f 91       	pop	r22
    2aec:	5f 91       	pop	r21
    2aee:	4f 91       	pop	r20
    2af0:	3f 91       	pop	r19
    2af2:	2f 91       	pop	r18
    2af4:	0f 90       	pop	r0
    2af6:	0b be       	out	0x3b, r0	; 59
    2af8:	0f 90       	pop	r0
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	0f 90       	pop	r0
    2afe:	1f 90       	pop	r1
    2b00:	18 95       	reti

00002b02 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    2b02:	1f 92       	push	r1
    2b04:	0f 92       	push	r0
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	0f 92       	push	r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	0b b6       	in	r0, 0x3b	; 59
    2b0e:	0f 92       	push	r0
    2b10:	2f 93       	push	r18
    2b12:	3f 93       	push	r19
    2b14:	4f 93       	push	r20
    2b16:	5f 93       	push	r21
    2b18:	6f 93       	push	r22
    2b1a:	7f 93       	push	r23
    2b1c:	8f 93       	push	r24
    2b1e:	9f 93       	push	r25
    2b20:	af 93       	push	r26
    2b22:	bf 93       	push	r27
    2b24:	ef 93       	push	r30
    2b26:	ff 93       	push	r31
    2b28:	e0 91 0f 22 	lds	r30, 0x220F
    2b2c:	f0 91 10 22 	lds	r31, 0x2210
    2b30:	30 97       	sbiw	r30, 0x00	; 0
    2b32:	29 f0       	breq	.+10     	; 0x2b3e <__vector_77+0x3c>
    2b34:	80 91 05 23 	lds	r24, 0x2305
    2b38:	90 91 06 23 	lds	r25, 0x2306
    2b3c:	19 95       	eicall
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	bf 91       	pop	r27
    2b44:	af 91       	pop	r26
    2b46:	9f 91       	pop	r25
    2b48:	8f 91       	pop	r24
    2b4a:	7f 91       	pop	r23
    2b4c:	6f 91       	pop	r22
    2b4e:	5f 91       	pop	r21
    2b50:	4f 91       	pop	r20
    2b52:	3f 91       	pop	r19
    2b54:	2f 91       	pop	r18
    2b56:	0f 90       	pop	r0
    2b58:	0b be       	out	0x3b, r0	; 59
    2b5a:	0f 90       	pop	r0
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	0f 90       	pop	r0
    2b60:	1f 90       	pop	r1
    2b62:	18 95       	reti

00002b64 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    2b64:	1f 92       	push	r1
    2b66:	0f 92       	push	r0
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	0f 92       	push	r0
    2b6c:	11 24       	eor	r1, r1
    2b6e:	0b b6       	in	r0, 0x3b	; 59
    2b70:	0f 92       	push	r0
    2b72:	2f 93       	push	r18
    2b74:	3f 93       	push	r19
    2b76:	4f 93       	push	r20
    2b78:	5f 93       	push	r21
    2b7a:	6f 93       	push	r22
    2b7c:	7f 93       	push	r23
    2b7e:	8f 93       	push	r24
    2b80:	9f 93       	push	r25
    2b82:	af 93       	push	r26
    2b84:	bf 93       	push	r27
    2b86:	ef 93       	push	r30
    2b88:	ff 93       	push	r31
    2b8a:	e0 91 11 22 	lds	r30, 0x2211
    2b8e:	f0 91 12 22 	lds	r31, 0x2212
    2b92:	30 97       	sbiw	r30, 0x00	; 0
    2b94:	29 f0       	breq	.+10     	; 0x2ba0 <__vector_78+0x3c>
    2b96:	80 91 07 23 	lds	r24, 0x2307
    2b9a:	90 91 08 23 	lds	r25, 0x2308
    2b9e:	19 95       	eicall
    2ba0:	ff 91       	pop	r31
    2ba2:	ef 91       	pop	r30
    2ba4:	bf 91       	pop	r27
    2ba6:	af 91       	pop	r26
    2ba8:	9f 91       	pop	r25
    2baa:	8f 91       	pop	r24
    2bac:	7f 91       	pop	r23
    2bae:	6f 91       	pop	r22
    2bb0:	5f 91       	pop	r21
    2bb2:	4f 91       	pop	r20
    2bb4:	3f 91       	pop	r19
    2bb6:	2f 91       	pop	r18
    2bb8:	0f 90       	pop	r0
    2bba:	0b be       	out	0x3b, r0	; 59
    2bbc:	0f 90       	pop	r0
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	0f 90       	pop	r0
    2bc2:	1f 90       	pop	r1
    2bc4:	18 95       	reti

00002bc6 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    2bc6:	1f 92       	push	r1
    2bc8:	0f 92       	push	r0
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	0f 92       	push	r0
    2bce:	11 24       	eor	r1, r1
    2bd0:	0b b6       	in	r0, 0x3b	; 59
    2bd2:	0f 92       	push	r0
    2bd4:	2f 93       	push	r18
    2bd6:	3f 93       	push	r19
    2bd8:	4f 93       	push	r20
    2bda:	5f 93       	push	r21
    2bdc:	6f 93       	push	r22
    2bde:	7f 93       	push	r23
    2be0:	8f 93       	push	r24
    2be2:	9f 93       	push	r25
    2be4:	af 93       	push	r26
    2be6:	bf 93       	push	r27
    2be8:	ef 93       	push	r30
    2bea:	ff 93       	push	r31
    2bec:	e0 91 13 22 	lds	r30, 0x2213
    2bf0:	f0 91 14 22 	lds	r31, 0x2214
    2bf4:	30 97       	sbiw	r30, 0x00	; 0
    2bf6:	29 f0       	breq	.+10     	; 0x2c02 <__vector_79+0x3c>
    2bf8:	80 91 09 23 	lds	r24, 0x2309
    2bfc:	90 91 0a 23 	lds	r25, 0x230A
    2c00:	19 95       	eicall
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	bf 91       	pop	r27
    2c08:	af 91       	pop	r26
    2c0a:	9f 91       	pop	r25
    2c0c:	8f 91       	pop	r24
    2c0e:	7f 91       	pop	r23
    2c10:	6f 91       	pop	r22
    2c12:	5f 91       	pop	r21
    2c14:	4f 91       	pop	r20
    2c16:	3f 91       	pop	r19
    2c18:	2f 91       	pop	r18
    2c1a:	0f 90       	pop	r0
    2c1c:	0b be       	out	0x3b, r0	; 59
    2c1e:	0f 90       	pop	r0
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	0f 90       	pop	r0
    2c24:	1f 90       	pop	r1
    2c26:	18 95       	reti

00002c28 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    2c28:	1f 92       	push	r1
    2c2a:	0f 92       	push	r0
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	0f 92       	push	r0
    2c30:	11 24       	eor	r1, r1
    2c32:	0b b6       	in	r0, 0x3b	; 59
    2c34:	0f 92       	push	r0
    2c36:	2f 93       	push	r18
    2c38:	3f 93       	push	r19
    2c3a:	4f 93       	push	r20
    2c3c:	5f 93       	push	r21
    2c3e:	6f 93       	push	r22
    2c40:	7f 93       	push	r23
    2c42:	8f 93       	push	r24
    2c44:	9f 93       	push	r25
    2c46:	af 93       	push	r26
    2c48:	bf 93       	push	r27
    2c4a:	ef 93       	push	r30
    2c4c:	ff 93       	push	r31
    2c4e:	e0 91 15 22 	lds	r30, 0x2215
    2c52:	f0 91 16 22 	lds	r31, 0x2216
    2c56:	30 97       	sbiw	r30, 0x00	; 0
    2c58:	29 f0       	breq	.+10     	; 0x2c64 <__vector_80+0x3c>
    2c5a:	80 91 0b 23 	lds	r24, 0x230B
    2c5e:	90 91 0c 23 	lds	r25, 0x230C
    2c62:	19 95       	eicall
    2c64:	ff 91       	pop	r31
    2c66:	ef 91       	pop	r30
    2c68:	bf 91       	pop	r27
    2c6a:	af 91       	pop	r26
    2c6c:	9f 91       	pop	r25
    2c6e:	8f 91       	pop	r24
    2c70:	7f 91       	pop	r23
    2c72:	6f 91       	pop	r22
    2c74:	5f 91       	pop	r21
    2c76:	4f 91       	pop	r20
    2c78:	3f 91       	pop	r19
    2c7a:	2f 91       	pop	r18
    2c7c:	0f 90       	pop	r0
    2c7e:	0b be       	out	0x3b, r0	; 59
    2c80:	0f 90       	pop	r0
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	0f 90       	pop	r0
    2c86:	1f 90       	pop	r1
    2c88:	18 95       	reti

00002c8a <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    2c8a:	1f 92       	push	r1
    2c8c:	0f 92       	push	r0
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	0f 92       	push	r0
    2c92:	11 24       	eor	r1, r1
    2c94:	0b b6       	in	r0, 0x3b	; 59
    2c96:	0f 92       	push	r0
    2c98:	2f 93       	push	r18
    2c9a:	3f 93       	push	r19
    2c9c:	4f 93       	push	r20
    2c9e:	5f 93       	push	r21
    2ca0:	6f 93       	push	r22
    2ca2:	7f 93       	push	r23
    2ca4:	8f 93       	push	r24
    2ca6:	9f 93       	push	r25
    2ca8:	af 93       	push	r26
    2caa:	bf 93       	push	r27
    2cac:	ef 93       	push	r30
    2cae:	ff 93       	push	r31
    2cb0:	e0 91 17 22 	lds	r30, 0x2217
    2cb4:	f0 91 18 22 	lds	r31, 0x2218
    2cb8:	30 97       	sbiw	r30, 0x00	; 0
    2cba:	29 f0       	breq	.+10     	; 0x2cc6 <__vector_81+0x3c>
    2cbc:	80 91 0d 23 	lds	r24, 0x230D
    2cc0:	90 91 0e 23 	lds	r25, 0x230E
    2cc4:	19 95       	eicall
    2cc6:	ff 91       	pop	r31
    2cc8:	ef 91       	pop	r30
    2cca:	bf 91       	pop	r27
    2ccc:	af 91       	pop	r26
    2cce:	9f 91       	pop	r25
    2cd0:	8f 91       	pop	r24
    2cd2:	7f 91       	pop	r23
    2cd4:	6f 91       	pop	r22
    2cd6:	5f 91       	pop	r21
    2cd8:	4f 91       	pop	r20
    2cda:	3f 91       	pop	r19
    2cdc:	2f 91       	pop	r18
    2cde:	0f 90       	pop	r0
    2ce0:	0b be       	out	0x3b, r0	; 59
    2ce2:	0f 90       	pop	r0
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	0f 90       	pop	r0
    2ce8:	1f 90       	pop	r1
    2cea:	18 95       	reti

00002cec <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    2cec:	1f 92       	push	r1
    2cee:	0f 92       	push	r0
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	0f 92       	push	r0
    2cf4:	11 24       	eor	r1, r1
    2cf6:	0b b6       	in	r0, 0x3b	; 59
    2cf8:	0f 92       	push	r0
    2cfa:	2f 93       	push	r18
    2cfc:	3f 93       	push	r19
    2cfe:	4f 93       	push	r20
    2d00:	5f 93       	push	r21
    2d02:	6f 93       	push	r22
    2d04:	7f 93       	push	r23
    2d06:	8f 93       	push	r24
    2d08:	9f 93       	push	r25
    2d0a:	af 93       	push	r26
    2d0c:	bf 93       	push	r27
    2d0e:	ef 93       	push	r30
    2d10:	ff 93       	push	r31
    2d12:	e0 91 19 22 	lds	r30, 0x2219
    2d16:	f0 91 1a 22 	lds	r31, 0x221A
    2d1a:	30 97       	sbiw	r30, 0x00	; 0
    2d1c:	29 f0       	breq	.+10     	; 0x2d28 <__vector_82+0x3c>
    2d1e:	80 91 0f 23 	lds	r24, 0x230F
    2d22:	90 91 10 23 	lds	r25, 0x2310
    2d26:	19 95       	eicall
    2d28:	ff 91       	pop	r31
    2d2a:	ef 91       	pop	r30
    2d2c:	bf 91       	pop	r27
    2d2e:	af 91       	pop	r26
    2d30:	9f 91       	pop	r25
    2d32:	8f 91       	pop	r24
    2d34:	7f 91       	pop	r23
    2d36:	6f 91       	pop	r22
    2d38:	5f 91       	pop	r21
    2d3a:	4f 91       	pop	r20
    2d3c:	3f 91       	pop	r19
    2d3e:	2f 91       	pop	r18
    2d40:	0f 90       	pop	r0
    2d42:	0b be       	out	0x3b, r0	; 59
    2d44:	0f 90       	pop	r0
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	0f 90       	pop	r0
    2d4a:	1f 90       	pop	r1
    2d4c:	18 95       	reti

00002d4e <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    2d4e:	1f 92       	push	r1
    2d50:	0f 92       	push	r0
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	0f 92       	push	r0
    2d56:	11 24       	eor	r1, r1
    2d58:	0b b6       	in	r0, 0x3b	; 59
    2d5a:	0f 92       	push	r0
    2d5c:	2f 93       	push	r18
    2d5e:	3f 93       	push	r19
    2d60:	4f 93       	push	r20
    2d62:	5f 93       	push	r21
    2d64:	6f 93       	push	r22
    2d66:	7f 93       	push	r23
    2d68:	8f 93       	push	r24
    2d6a:	9f 93       	push	r25
    2d6c:	af 93       	push	r26
    2d6e:	bf 93       	push	r27
    2d70:	ef 93       	push	r30
    2d72:	ff 93       	push	r31
    2d74:	e0 91 1b 22 	lds	r30, 0x221B
    2d78:	f0 91 1c 22 	lds	r31, 0x221C
    2d7c:	30 97       	sbiw	r30, 0x00	; 0
    2d7e:	29 f0       	breq	.+10     	; 0x2d8a <__vector_83+0x3c>
    2d80:	80 91 11 23 	lds	r24, 0x2311
    2d84:	90 91 12 23 	lds	r25, 0x2312
    2d88:	19 95       	eicall
    2d8a:	ff 91       	pop	r31
    2d8c:	ef 91       	pop	r30
    2d8e:	bf 91       	pop	r27
    2d90:	af 91       	pop	r26
    2d92:	9f 91       	pop	r25
    2d94:	8f 91       	pop	r24
    2d96:	7f 91       	pop	r23
    2d98:	6f 91       	pop	r22
    2d9a:	5f 91       	pop	r21
    2d9c:	4f 91       	pop	r20
    2d9e:	3f 91       	pop	r19
    2da0:	2f 91       	pop	r18
    2da2:	0f 90       	pop	r0
    2da4:	0b be       	out	0x3b, r0	; 59
    2da6:	0f 90       	pop	r0
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	0f 90       	pop	r0
    2dac:	1f 90       	pop	r1
    2dae:	18 95       	reti

00002db0 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    2db0:	1f 92       	push	r1
    2db2:	0f 92       	push	r0
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	0f 92       	push	r0
    2db8:	11 24       	eor	r1, r1
    2dba:	0b b6       	in	r0, 0x3b	; 59
    2dbc:	0f 92       	push	r0
    2dbe:	2f 93       	push	r18
    2dc0:	3f 93       	push	r19
    2dc2:	4f 93       	push	r20
    2dc4:	5f 93       	push	r21
    2dc6:	6f 93       	push	r22
    2dc8:	7f 93       	push	r23
    2dca:	8f 93       	push	r24
    2dcc:	9f 93       	push	r25
    2dce:	af 93       	push	r26
    2dd0:	bf 93       	push	r27
    2dd2:	ef 93       	push	r30
    2dd4:	ff 93       	push	r31
    2dd6:	e0 91 1d 22 	lds	r30, 0x221D
    2dda:	f0 91 1e 22 	lds	r31, 0x221E
    2dde:	30 97       	sbiw	r30, 0x00	; 0
    2de0:	29 f0       	breq	.+10     	; 0x2dec <__vector_84+0x3c>
    2de2:	80 91 13 23 	lds	r24, 0x2313
    2de6:	90 91 14 23 	lds	r25, 0x2314
    2dea:	19 95       	eicall
    2dec:	ff 91       	pop	r31
    2dee:	ef 91       	pop	r30
    2df0:	bf 91       	pop	r27
    2df2:	af 91       	pop	r26
    2df4:	9f 91       	pop	r25
    2df6:	8f 91       	pop	r24
    2df8:	7f 91       	pop	r23
    2dfa:	6f 91       	pop	r22
    2dfc:	5f 91       	pop	r21
    2dfe:	4f 91       	pop	r20
    2e00:	3f 91       	pop	r19
    2e02:	2f 91       	pop	r18
    2e04:	0f 90       	pop	r0
    2e06:	0b be       	out	0x3b, r0	; 59
    2e08:	0f 90       	pop	r0
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	0f 90       	pop	r0
    2e0e:	1f 90       	pop	r1
    2e10:	18 95       	reti

00002e12 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    2e12:	1f 92       	push	r1
    2e14:	0f 92       	push	r0
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	0f 92       	push	r0
    2e1a:	11 24       	eor	r1, r1
    2e1c:	0b b6       	in	r0, 0x3b	; 59
    2e1e:	0f 92       	push	r0
    2e20:	2f 93       	push	r18
    2e22:	3f 93       	push	r19
    2e24:	4f 93       	push	r20
    2e26:	5f 93       	push	r21
    2e28:	6f 93       	push	r22
    2e2a:	7f 93       	push	r23
    2e2c:	8f 93       	push	r24
    2e2e:	9f 93       	push	r25
    2e30:	af 93       	push	r26
    2e32:	bf 93       	push	r27
    2e34:	ef 93       	push	r30
    2e36:	ff 93       	push	r31
    2e38:	e0 91 1f 22 	lds	r30, 0x221F
    2e3c:	f0 91 20 22 	lds	r31, 0x2220
    2e40:	30 97       	sbiw	r30, 0x00	; 0
    2e42:	29 f0       	breq	.+10     	; 0x2e4e <__vector_85+0x3c>
    2e44:	80 91 15 23 	lds	r24, 0x2315
    2e48:	90 91 16 23 	lds	r25, 0x2316
    2e4c:	19 95       	eicall
    2e4e:	ff 91       	pop	r31
    2e50:	ef 91       	pop	r30
    2e52:	bf 91       	pop	r27
    2e54:	af 91       	pop	r26
    2e56:	9f 91       	pop	r25
    2e58:	8f 91       	pop	r24
    2e5a:	7f 91       	pop	r23
    2e5c:	6f 91       	pop	r22
    2e5e:	5f 91       	pop	r21
    2e60:	4f 91       	pop	r20
    2e62:	3f 91       	pop	r19
    2e64:	2f 91       	pop	r18
    2e66:	0f 90       	pop	r0
    2e68:	0b be       	out	0x3b, r0	; 59
    2e6a:	0f 90       	pop	r0
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	0f 90       	pop	r0
    2e70:	1f 90       	pop	r1
    2e72:	18 95       	reti

00002e74 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    2e74:	1f 92       	push	r1
    2e76:	0f 92       	push	r0
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	0f 92       	push	r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	0b b6       	in	r0, 0x3b	; 59
    2e80:	0f 92       	push	r0
    2e82:	2f 93       	push	r18
    2e84:	3f 93       	push	r19
    2e86:	4f 93       	push	r20
    2e88:	5f 93       	push	r21
    2e8a:	6f 93       	push	r22
    2e8c:	7f 93       	push	r23
    2e8e:	8f 93       	push	r24
    2e90:	9f 93       	push	r25
    2e92:	af 93       	push	r26
    2e94:	bf 93       	push	r27
    2e96:	ef 93       	push	r30
    2e98:	ff 93       	push	r31
    2e9a:	e0 91 21 22 	lds	r30, 0x2221
    2e9e:	f0 91 22 22 	lds	r31, 0x2222
    2ea2:	30 97       	sbiw	r30, 0x00	; 0
    2ea4:	29 f0       	breq	.+10     	; 0x2eb0 <__vector_86+0x3c>
    2ea6:	80 91 17 23 	lds	r24, 0x2317
    2eaa:	90 91 18 23 	lds	r25, 0x2318
    2eae:	19 95       	eicall
    2eb0:	ff 91       	pop	r31
    2eb2:	ef 91       	pop	r30
    2eb4:	bf 91       	pop	r27
    2eb6:	af 91       	pop	r26
    2eb8:	9f 91       	pop	r25
    2eba:	8f 91       	pop	r24
    2ebc:	7f 91       	pop	r23
    2ebe:	6f 91       	pop	r22
    2ec0:	5f 91       	pop	r21
    2ec2:	4f 91       	pop	r20
    2ec4:	3f 91       	pop	r19
    2ec6:	2f 91       	pop	r18
    2ec8:	0f 90       	pop	r0
    2eca:	0b be       	out	0x3b, r0	; 59
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	0f 90       	pop	r0
    2ed2:	1f 90       	pop	r1
    2ed4:	18 95       	reti

00002ed6 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    2ed6:	1f 92       	push	r1
    2ed8:	0f 92       	push	r0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	0f 92       	push	r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	0b b6       	in	r0, 0x3b	; 59
    2ee2:	0f 92       	push	r0
    2ee4:	2f 93       	push	r18
    2ee6:	3f 93       	push	r19
    2ee8:	4f 93       	push	r20
    2eea:	5f 93       	push	r21
    2eec:	6f 93       	push	r22
    2eee:	7f 93       	push	r23
    2ef0:	8f 93       	push	r24
    2ef2:	9f 93       	push	r25
    2ef4:	af 93       	push	r26
    2ef6:	bf 93       	push	r27
    2ef8:	ef 93       	push	r30
    2efa:	ff 93       	push	r31
    2efc:	e0 91 23 22 	lds	r30, 0x2223
    2f00:	f0 91 24 22 	lds	r31, 0x2224
    2f04:	30 97       	sbiw	r30, 0x00	; 0
    2f06:	29 f0       	breq	.+10     	; 0x2f12 <__vector_87+0x3c>
    2f08:	80 91 19 23 	lds	r24, 0x2319
    2f0c:	90 91 1a 23 	lds	r25, 0x231A
    2f10:	19 95       	eicall
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	bf 91       	pop	r27
    2f18:	af 91       	pop	r26
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	7f 91       	pop	r23
    2f20:	6f 91       	pop	r22
    2f22:	5f 91       	pop	r21
    2f24:	4f 91       	pop	r20
    2f26:	3f 91       	pop	r19
    2f28:	2f 91       	pop	r18
    2f2a:	0f 90       	pop	r0
    2f2c:	0b be       	out	0x3b, r0	; 59
    2f2e:	0f 90       	pop	r0
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	0f 90       	pop	r0
    2f34:	1f 90       	pop	r1
    2f36:	18 95       	reti

00002f38 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    2f38:	1f 92       	push	r1
    2f3a:	0f 92       	push	r0
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	0f 92       	push	r0
    2f40:	11 24       	eor	r1, r1
    2f42:	0b b6       	in	r0, 0x3b	; 59
    2f44:	0f 92       	push	r0
    2f46:	2f 93       	push	r18
    2f48:	3f 93       	push	r19
    2f4a:	4f 93       	push	r20
    2f4c:	5f 93       	push	r21
    2f4e:	6f 93       	push	r22
    2f50:	7f 93       	push	r23
    2f52:	8f 93       	push	r24
    2f54:	9f 93       	push	r25
    2f56:	af 93       	push	r26
    2f58:	bf 93       	push	r27
    2f5a:	ef 93       	push	r30
    2f5c:	ff 93       	push	r31
    2f5e:	e0 91 25 22 	lds	r30, 0x2225
    2f62:	f0 91 26 22 	lds	r31, 0x2226
    2f66:	30 97       	sbiw	r30, 0x00	; 0
    2f68:	29 f0       	breq	.+10     	; 0x2f74 <__vector_88+0x3c>
    2f6a:	80 91 1b 23 	lds	r24, 0x231B
    2f6e:	90 91 1c 23 	lds	r25, 0x231C
    2f72:	19 95       	eicall
    2f74:	ff 91       	pop	r31
    2f76:	ef 91       	pop	r30
    2f78:	bf 91       	pop	r27
    2f7a:	af 91       	pop	r26
    2f7c:	9f 91       	pop	r25
    2f7e:	8f 91       	pop	r24
    2f80:	7f 91       	pop	r23
    2f82:	6f 91       	pop	r22
    2f84:	5f 91       	pop	r21
    2f86:	4f 91       	pop	r20
    2f88:	3f 91       	pop	r19
    2f8a:	2f 91       	pop	r18
    2f8c:	0f 90       	pop	r0
    2f8e:	0b be       	out	0x3b, r0	; 59
    2f90:	0f 90       	pop	r0
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	0f 90       	pop	r0
    2f96:	1f 90       	pop	r1
    2f98:	18 95       	reti

00002f9a <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    2f9a:	1f 92       	push	r1
    2f9c:	0f 92       	push	r0
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	0f 92       	push	r0
    2fa2:	11 24       	eor	r1, r1
    2fa4:	0b b6       	in	r0, 0x3b	; 59
    2fa6:	0f 92       	push	r0
    2fa8:	2f 93       	push	r18
    2faa:	3f 93       	push	r19
    2fac:	4f 93       	push	r20
    2fae:	5f 93       	push	r21
    2fb0:	6f 93       	push	r22
    2fb2:	7f 93       	push	r23
    2fb4:	8f 93       	push	r24
    2fb6:	9f 93       	push	r25
    2fb8:	af 93       	push	r26
    2fba:	bf 93       	push	r27
    2fbc:	ef 93       	push	r30
    2fbe:	ff 93       	push	r31
    2fc0:	e0 91 27 22 	lds	r30, 0x2227
    2fc4:	f0 91 28 22 	lds	r31, 0x2228
    2fc8:	30 97       	sbiw	r30, 0x00	; 0
    2fca:	29 f0       	breq	.+10     	; 0x2fd6 <__vector_89+0x3c>
    2fcc:	80 91 1d 23 	lds	r24, 0x231D
    2fd0:	90 91 1e 23 	lds	r25, 0x231E
    2fd4:	19 95       	eicall
    2fd6:	ff 91       	pop	r31
    2fd8:	ef 91       	pop	r30
    2fda:	bf 91       	pop	r27
    2fdc:	af 91       	pop	r26
    2fde:	9f 91       	pop	r25
    2fe0:	8f 91       	pop	r24
    2fe2:	7f 91       	pop	r23
    2fe4:	6f 91       	pop	r22
    2fe6:	5f 91       	pop	r21
    2fe8:	4f 91       	pop	r20
    2fea:	3f 91       	pop	r19
    2fec:	2f 91       	pop	r18
    2fee:	0f 90       	pop	r0
    2ff0:	0b be       	out	0x3b, r0	; 59
    2ff2:	0f 90       	pop	r0
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	0f 90       	pop	r0
    2ff8:	1f 90       	pop	r1
    2ffa:	18 95       	reti

00002ffc <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    2ffc:	1f 92       	push	r1
    2ffe:	0f 92       	push	r0
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	0f 92       	push	r0
    3004:	11 24       	eor	r1, r1
    3006:	0b b6       	in	r0, 0x3b	; 59
    3008:	0f 92       	push	r0
    300a:	2f 93       	push	r18
    300c:	3f 93       	push	r19
    300e:	4f 93       	push	r20
    3010:	5f 93       	push	r21
    3012:	6f 93       	push	r22
    3014:	7f 93       	push	r23
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
    301e:	ef 93       	push	r30
    3020:	ff 93       	push	r31
    3022:	e0 91 29 22 	lds	r30, 0x2229
    3026:	f0 91 2a 22 	lds	r31, 0x222A
    302a:	30 97       	sbiw	r30, 0x00	; 0
    302c:	29 f0       	breq	.+10     	; 0x3038 <__vector_90+0x3c>
    302e:	80 91 1f 23 	lds	r24, 0x231F
    3032:	90 91 20 23 	lds	r25, 0x2320
    3036:	19 95       	eicall
    3038:	ff 91       	pop	r31
    303a:	ef 91       	pop	r30
    303c:	bf 91       	pop	r27
    303e:	af 91       	pop	r26
    3040:	9f 91       	pop	r25
    3042:	8f 91       	pop	r24
    3044:	7f 91       	pop	r23
    3046:	6f 91       	pop	r22
    3048:	5f 91       	pop	r21
    304a:	4f 91       	pop	r20
    304c:	3f 91       	pop	r19
    304e:	2f 91       	pop	r18
    3050:	0f 90       	pop	r0
    3052:	0b be       	out	0x3b, r0	; 59
    3054:	0f 90       	pop	r0
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	0f 90       	pop	r0
    305a:	1f 90       	pop	r1
    305c:	18 95       	reti

0000305e <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    305e:	1f 92       	push	r1
    3060:	0f 92       	push	r0
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	0f 92       	push	r0
    3066:	11 24       	eor	r1, r1
    3068:	0b b6       	in	r0, 0x3b	; 59
    306a:	0f 92       	push	r0
    306c:	2f 93       	push	r18
    306e:	3f 93       	push	r19
    3070:	4f 93       	push	r20
    3072:	5f 93       	push	r21
    3074:	6f 93       	push	r22
    3076:	7f 93       	push	r23
    3078:	8f 93       	push	r24
    307a:	9f 93       	push	r25
    307c:	af 93       	push	r26
    307e:	bf 93       	push	r27
    3080:	ef 93       	push	r30
    3082:	ff 93       	push	r31
    3084:	e0 91 2b 22 	lds	r30, 0x222B
    3088:	f0 91 2c 22 	lds	r31, 0x222C
    308c:	30 97       	sbiw	r30, 0x00	; 0
    308e:	29 f0       	breq	.+10     	; 0x309a <__vector_91+0x3c>
    3090:	80 91 21 23 	lds	r24, 0x2321
    3094:	90 91 22 23 	lds	r25, 0x2322
    3098:	19 95       	eicall
    309a:	ff 91       	pop	r31
    309c:	ef 91       	pop	r30
    309e:	bf 91       	pop	r27
    30a0:	af 91       	pop	r26
    30a2:	9f 91       	pop	r25
    30a4:	8f 91       	pop	r24
    30a6:	7f 91       	pop	r23
    30a8:	6f 91       	pop	r22
    30aa:	5f 91       	pop	r21
    30ac:	4f 91       	pop	r20
    30ae:	3f 91       	pop	r19
    30b0:	2f 91       	pop	r18
    30b2:	0f 90       	pop	r0
    30b4:	0b be       	out	0x3b, r0	; 59
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    30c0:	1f 92       	push	r1
    30c2:	0f 92       	push	r0
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	0f 92       	push	r0
    30c8:	11 24       	eor	r1, r1
    30ca:	0b b6       	in	r0, 0x3b	; 59
    30cc:	0f 92       	push	r0
    30ce:	2f 93       	push	r18
    30d0:	3f 93       	push	r19
    30d2:	4f 93       	push	r20
    30d4:	5f 93       	push	r21
    30d6:	6f 93       	push	r22
    30d8:	7f 93       	push	r23
    30da:	8f 93       	push	r24
    30dc:	9f 93       	push	r25
    30de:	af 93       	push	r26
    30e0:	bf 93       	push	r27
    30e2:	ef 93       	push	r30
    30e4:	ff 93       	push	r31
    30e6:	e0 91 2d 22 	lds	r30, 0x222D
    30ea:	f0 91 2e 22 	lds	r31, 0x222E
    30ee:	30 97       	sbiw	r30, 0x00	; 0
    30f0:	29 f0       	breq	.+10     	; 0x30fc <__vector_92+0x3c>
    30f2:	80 91 23 23 	lds	r24, 0x2323
    30f6:	90 91 24 23 	lds	r25, 0x2324
    30fa:	19 95       	eicall
    30fc:	ff 91       	pop	r31
    30fe:	ef 91       	pop	r30
    3100:	bf 91       	pop	r27
    3102:	af 91       	pop	r26
    3104:	9f 91       	pop	r25
    3106:	8f 91       	pop	r24
    3108:	7f 91       	pop	r23
    310a:	6f 91       	pop	r22
    310c:	5f 91       	pop	r21
    310e:	4f 91       	pop	r20
    3110:	3f 91       	pop	r19
    3112:	2f 91       	pop	r18
    3114:	0f 90       	pop	r0
    3116:	0b be       	out	0x3b, r0	; 59
    3118:	0f 90       	pop	r0
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	0f 90       	pop	r0
    311e:	1f 90       	pop	r1
    3120:	18 95       	reti

00003122 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3122:	1f 92       	push	r1
    3124:	0f 92       	push	r0
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	0f 92       	push	r0
    312a:	11 24       	eor	r1, r1
    312c:	0b b6       	in	r0, 0x3b	; 59
    312e:	0f 92       	push	r0
    3130:	2f 93       	push	r18
    3132:	3f 93       	push	r19
    3134:	4f 93       	push	r20
    3136:	5f 93       	push	r21
    3138:	6f 93       	push	r22
    313a:	7f 93       	push	r23
    313c:	8f 93       	push	r24
    313e:	9f 93       	push	r25
    3140:	af 93       	push	r26
    3142:	bf 93       	push	r27
    3144:	ef 93       	push	r30
    3146:	ff 93       	push	r31
    3148:	e0 91 2f 22 	lds	r30, 0x222F
    314c:	f0 91 30 22 	lds	r31, 0x2230
    3150:	30 97       	sbiw	r30, 0x00	; 0
    3152:	29 f0       	breq	.+10     	; 0x315e <__vector_93+0x3c>
    3154:	80 91 25 23 	lds	r24, 0x2325
    3158:	90 91 26 23 	lds	r25, 0x2326
    315c:	19 95       	eicall
    315e:	ff 91       	pop	r31
    3160:	ef 91       	pop	r30
    3162:	bf 91       	pop	r27
    3164:	af 91       	pop	r26
    3166:	9f 91       	pop	r25
    3168:	8f 91       	pop	r24
    316a:	7f 91       	pop	r23
    316c:	6f 91       	pop	r22
    316e:	5f 91       	pop	r21
    3170:	4f 91       	pop	r20
    3172:	3f 91       	pop	r19
    3174:	2f 91       	pop	r18
    3176:	0f 90       	pop	r0
    3178:	0b be       	out	0x3b, r0	; 59
    317a:	0f 90       	pop	r0
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	0f 90       	pop	r0
    3180:	1f 90       	pop	r1
    3182:	18 95       	reti

00003184 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3184:	1f 92       	push	r1
    3186:	0f 92       	push	r0
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	0f 92       	push	r0
    318c:	11 24       	eor	r1, r1
    318e:	0b b6       	in	r0, 0x3b	; 59
    3190:	0f 92       	push	r0
    3192:	2f 93       	push	r18
    3194:	3f 93       	push	r19
    3196:	4f 93       	push	r20
    3198:	5f 93       	push	r21
    319a:	6f 93       	push	r22
    319c:	7f 93       	push	r23
    319e:	8f 93       	push	r24
    31a0:	9f 93       	push	r25
    31a2:	af 93       	push	r26
    31a4:	bf 93       	push	r27
    31a6:	ef 93       	push	r30
    31a8:	ff 93       	push	r31
    31aa:	e0 91 45 22 	lds	r30, 0x2245
    31ae:	f0 91 46 22 	lds	r31, 0x2246
    31b2:	30 97       	sbiw	r30, 0x00	; 0
    31b4:	29 f0       	breq	.+10     	; 0x31c0 <__vector_104+0x3c>
    31b6:	80 91 3b 23 	lds	r24, 0x233B
    31ba:	90 91 3c 23 	lds	r25, 0x233C
    31be:	19 95       	eicall
    31c0:	ff 91       	pop	r31
    31c2:	ef 91       	pop	r30
    31c4:	bf 91       	pop	r27
    31c6:	af 91       	pop	r26
    31c8:	9f 91       	pop	r25
    31ca:	8f 91       	pop	r24
    31cc:	7f 91       	pop	r23
    31ce:	6f 91       	pop	r22
    31d0:	5f 91       	pop	r21
    31d2:	4f 91       	pop	r20
    31d4:	3f 91       	pop	r19
    31d6:	2f 91       	pop	r18
    31d8:	0f 90       	pop	r0
    31da:	0b be       	out	0x3b, r0	; 59
    31dc:	0f 90       	pop	r0
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	0f 90       	pop	r0
    31e2:	1f 90       	pop	r1
    31e4:	18 95       	reti

000031e6 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    31e6:	1f 92       	push	r1
    31e8:	0f 92       	push	r0
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	0f 92       	push	r0
    31ee:	11 24       	eor	r1, r1
    31f0:	0b b6       	in	r0, 0x3b	; 59
    31f2:	0f 92       	push	r0
    31f4:	2f 93       	push	r18
    31f6:	3f 93       	push	r19
    31f8:	4f 93       	push	r20
    31fa:	5f 93       	push	r21
    31fc:	6f 93       	push	r22
    31fe:	7f 93       	push	r23
    3200:	8f 93       	push	r24
    3202:	9f 93       	push	r25
    3204:	af 93       	push	r26
    3206:	bf 93       	push	r27
    3208:	ef 93       	push	r30
    320a:	ff 93       	push	r31
    320c:	e0 91 47 22 	lds	r30, 0x2247
    3210:	f0 91 48 22 	lds	r31, 0x2248
    3214:	30 97       	sbiw	r30, 0x00	; 0
    3216:	29 f0       	breq	.+10     	; 0x3222 <__vector_105+0x3c>
    3218:	80 91 3d 23 	lds	r24, 0x233D
    321c:	90 91 3e 23 	lds	r25, 0x233E
    3220:	19 95       	eicall
    3222:	ff 91       	pop	r31
    3224:	ef 91       	pop	r30
    3226:	bf 91       	pop	r27
    3228:	af 91       	pop	r26
    322a:	9f 91       	pop	r25
    322c:	8f 91       	pop	r24
    322e:	7f 91       	pop	r23
    3230:	6f 91       	pop	r22
    3232:	5f 91       	pop	r21
    3234:	4f 91       	pop	r20
    3236:	3f 91       	pop	r19
    3238:	2f 91       	pop	r18
    323a:	0f 90       	pop	r0
    323c:	0b be       	out	0x3b, r0	; 59
    323e:	0f 90       	pop	r0
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	0f 90       	pop	r0
    3244:	1f 90       	pop	r1
    3246:	18 95       	reti

00003248 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3248:	1f 92       	push	r1
    324a:	0f 92       	push	r0
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	0f 92       	push	r0
    3250:	11 24       	eor	r1, r1
    3252:	0b b6       	in	r0, 0x3b	; 59
    3254:	0f 92       	push	r0
    3256:	2f 93       	push	r18
    3258:	3f 93       	push	r19
    325a:	4f 93       	push	r20
    325c:	5f 93       	push	r21
    325e:	6f 93       	push	r22
    3260:	7f 93       	push	r23
    3262:	8f 93       	push	r24
    3264:	9f 93       	push	r25
    3266:	af 93       	push	r26
    3268:	bf 93       	push	r27
    326a:	ef 93       	push	r30
    326c:	ff 93       	push	r31
    326e:	e0 91 4d 22 	lds	r30, 0x224D
    3272:	f0 91 4e 22 	lds	r31, 0x224E
    3276:	30 97       	sbiw	r30, 0x00	; 0
    3278:	29 f0       	breq	.+10     	; 0x3284 <__vector_108+0x3c>
    327a:	80 91 43 23 	lds	r24, 0x2343
    327e:	90 91 44 23 	lds	r25, 0x2344
    3282:	19 95       	eicall
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	bf 91       	pop	r27
    328a:	af 91       	pop	r26
    328c:	9f 91       	pop	r25
    328e:	8f 91       	pop	r24
    3290:	7f 91       	pop	r23
    3292:	6f 91       	pop	r22
    3294:	5f 91       	pop	r21
    3296:	4f 91       	pop	r20
    3298:	3f 91       	pop	r19
    329a:	2f 91       	pop	r18
    329c:	0f 90       	pop	r0
    329e:	0b be       	out	0x3b, r0	; 59
    32a0:	0f 90       	pop	r0
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	0f 90       	pop	r0
    32a6:	1f 90       	pop	r1
    32a8:	18 95       	reti

000032aa <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    32aa:	1f 92       	push	r1
    32ac:	0f 92       	push	r0
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	0f 92       	push	r0
    32b2:	11 24       	eor	r1, r1
    32b4:	0b b6       	in	r0, 0x3b	; 59
    32b6:	0f 92       	push	r0
    32b8:	2f 93       	push	r18
    32ba:	3f 93       	push	r19
    32bc:	4f 93       	push	r20
    32be:	5f 93       	push	r21
    32c0:	6f 93       	push	r22
    32c2:	7f 93       	push	r23
    32c4:	8f 93       	push	r24
    32c6:	9f 93       	push	r25
    32c8:	af 93       	push	r26
    32ca:	bf 93       	push	r27
    32cc:	ef 93       	push	r30
    32ce:	ff 93       	push	r31
    32d0:	e0 91 4f 22 	lds	r30, 0x224F
    32d4:	f0 91 50 22 	lds	r31, 0x2250
    32d8:	30 97       	sbiw	r30, 0x00	; 0
    32da:	29 f0       	breq	.+10     	; 0x32e6 <__vector_109+0x3c>
    32dc:	80 91 45 23 	lds	r24, 0x2345
    32e0:	90 91 46 23 	lds	r25, 0x2346
    32e4:	19 95       	eicall
    32e6:	ff 91       	pop	r31
    32e8:	ef 91       	pop	r30
    32ea:	bf 91       	pop	r27
    32ec:	af 91       	pop	r26
    32ee:	9f 91       	pop	r25
    32f0:	8f 91       	pop	r24
    32f2:	7f 91       	pop	r23
    32f4:	6f 91       	pop	r22
    32f6:	5f 91       	pop	r21
    32f8:	4f 91       	pop	r20
    32fa:	3f 91       	pop	r19
    32fc:	2f 91       	pop	r18
    32fe:	0f 90       	pop	r0
    3300:	0b be       	out	0x3b, r0	; 59
    3302:	0f 90       	pop	r0
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	0f 90       	pop	r0
    3308:	1f 90       	pop	r1
    330a:	18 95       	reti

0000330c <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    330c:	1f 92       	push	r1
    330e:	0f 92       	push	r0
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	0f 92       	push	r0
    3314:	11 24       	eor	r1, r1
    3316:	0b b6       	in	r0, 0x3b	; 59
    3318:	0f 92       	push	r0
    331a:	2f 93       	push	r18
    331c:	3f 93       	push	r19
    331e:	4f 93       	push	r20
    3320:	5f 93       	push	r21
    3322:	6f 93       	push	r22
    3324:	7f 93       	push	r23
    3326:	8f 93       	push	r24
    3328:	9f 93       	push	r25
    332a:	af 93       	push	r26
    332c:	bf 93       	push	r27
    332e:	ef 93       	push	r30
    3330:	ff 93       	push	r31
    3332:	e0 91 51 22 	lds	r30, 0x2251
    3336:	f0 91 52 22 	lds	r31, 0x2252
    333a:	30 97       	sbiw	r30, 0x00	; 0
    333c:	29 f0       	breq	.+10     	; 0x3348 <__vector_110+0x3c>
    333e:	80 91 47 23 	lds	r24, 0x2347
    3342:	90 91 48 23 	lds	r25, 0x2348
    3346:	19 95       	eicall
    3348:	ff 91       	pop	r31
    334a:	ef 91       	pop	r30
    334c:	bf 91       	pop	r27
    334e:	af 91       	pop	r26
    3350:	9f 91       	pop	r25
    3352:	8f 91       	pop	r24
    3354:	7f 91       	pop	r23
    3356:	6f 91       	pop	r22
    3358:	5f 91       	pop	r21
    335a:	4f 91       	pop	r20
    335c:	3f 91       	pop	r19
    335e:	2f 91       	pop	r18
    3360:	0f 90       	pop	r0
    3362:	0b be       	out	0x3b, r0	; 59
    3364:	0f 90       	pop	r0
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	0f 90       	pop	r0
    336a:	1f 90       	pop	r1
    336c:	18 95       	reti

0000336e <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    336e:	1f 92       	push	r1
    3370:	0f 92       	push	r0
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	0f 92       	push	r0
    3376:	11 24       	eor	r1, r1
    3378:	0b b6       	in	r0, 0x3b	; 59
    337a:	0f 92       	push	r0
    337c:	2f 93       	push	r18
    337e:	3f 93       	push	r19
    3380:	4f 93       	push	r20
    3382:	5f 93       	push	r21
    3384:	6f 93       	push	r22
    3386:	7f 93       	push	r23
    3388:	8f 93       	push	r24
    338a:	9f 93       	push	r25
    338c:	af 93       	push	r26
    338e:	bf 93       	push	r27
    3390:	ef 93       	push	r30
    3392:	ff 93       	push	r31
    3394:	e0 91 53 22 	lds	r30, 0x2253
    3398:	f0 91 54 22 	lds	r31, 0x2254
    339c:	30 97       	sbiw	r30, 0x00	; 0
    339e:	29 f0       	breq	.+10     	; 0x33aa <__vector_111+0x3c>
    33a0:	80 91 49 23 	lds	r24, 0x2349
    33a4:	90 91 4a 23 	lds	r25, 0x234A
    33a8:	19 95       	eicall
    33aa:	ff 91       	pop	r31
    33ac:	ef 91       	pop	r30
    33ae:	bf 91       	pop	r27
    33b0:	af 91       	pop	r26
    33b2:	9f 91       	pop	r25
    33b4:	8f 91       	pop	r24
    33b6:	7f 91       	pop	r23
    33b8:	6f 91       	pop	r22
    33ba:	5f 91       	pop	r21
    33bc:	4f 91       	pop	r20
    33be:	3f 91       	pop	r19
    33c0:	2f 91       	pop	r18
    33c2:	0f 90       	pop	r0
    33c4:	0b be       	out	0x3b, r0	; 59
    33c6:	0f 90       	pop	r0
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	0f 90       	pop	r0
    33cc:	1f 90       	pop	r1
    33ce:	18 95       	reti

000033d0 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    33d0:	1f 92       	push	r1
    33d2:	0f 92       	push	r0
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	0f 92       	push	r0
    33d8:	11 24       	eor	r1, r1
    33da:	0b b6       	in	r0, 0x3b	; 59
    33dc:	0f 92       	push	r0
    33de:	2f 93       	push	r18
    33e0:	3f 93       	push	r19
    33e2:	4f 93       	push	r20
    33e4:	5f 93       	push	r21
    33e6:	6f 93       	push	r22
    33e8:	7f 93       	push	r23
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	af 93       	push	r26
    33f0:	bf 93       	push	r27
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
    33f6:	e0 91 55 22 	lds	r30, 0x2255
    33fa:	f0 91 56 22 	lds	r31, 0x2256
    33fe:	30 97       	sbiw	r30, 0x00	; 0
    3400:	29 f0       	breq	.+10     	; 0x340c <__vector_112+0x3c>
    3402:	80 91 4b 23 	lds	r24, 0x234B
    3406:	90 91 4c 23 	lds	r25, 0x234C
    340a:	19 95       	eicall
    340c:	ff 91       	pop	r31
    340e:	ef 91       	pop	r30
    3410:	bf 91       	pop	r27
    3412:	af 91       	pop	r26
    3414:	9f 91       	pop	r25
    3416:	8f 91       	pop	r24
    3418:	7f 91       	pop	r23
    341a:	6f 91       	pop	r22
    341c:	5f 91       	pop	r21
    341e:	4f 91       	pop	r20
    3420:	3f 91       	pop	r19
    3422:	2f 91       	pop	r18
    3424:	0f 90       	pop	r0
    3426:	0b be       	out	0x3b, r0	; 59
    3428:	0f 90       	pop	r0
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	0f 90       	pop	r0
    342e:	1f 90       	pop	r1
    3430:	18 95       	reti

00003432 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3432:	1f 92       	push	r1
    3434:	0f 92       	push	r0
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	0f 92       	push	r0
    343a:	11 24       	eor	r1, r1
    343c:	0b b6       	in	r0, 0x3b	; 59
    343e:	0f 92       	push	r0
    3440:	2f 93       	push	r18
    3442:	3f 93       	push	r19
    3444:	4f 93       	push	r20
    3446:	5f 93       	push	r21
    3448:	6f 93       	push	r22
    344a:	7f 93       	push	r23
    344c:	8f 93       	push	r24
    344e:	9f 93       	push	r25
    3450:	af 93       	push	r26
    3452:	bf 93       	push	r27
    3454:	ef 93       	push	r30
    3456:	ff 93       	push	r31
    3458:	e0 91 57 22 	lds	r30, 0x2257
    345c:	f0 91 58 22 	lds	r31, 0x2258
    3460:	30 97       	sbiw	r30, 0x00	; 0
    3462:	29 f0       	breq	.+10     	; 0x346e <__vector_113+0x3c>
    3464:	80 91 4d 23 	lds	r24, 0x234D
    3468:	90 91 4e 23 	lds	r25, 0x234E
    346c:	19 95       	eicall
    346e:	ff 91       	pop	r31
    3470:	ef 91       	pop	r30
    3472:	bf 91       	pop	r27
    3474:	af 91       	pop	r26
    3476:	9f 91       	pop	r25
    3478:	8f 91       	pop	r24
    347a:	7f 91       	pop	r23
    347c:	6f 91       	pop	r22
    347e:	5f 91       	pop	r21
    3480:	4f 91       	pop	r20
    3482:	3f 91       	pop	r19
    3484:	2f 91       	pop	r18
    3486:	0f 90       	pop	r0
    3488:	0b be       	out	0x3b, r0	; 59
    348a:	0f 90       	pop	r0
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	0f 90       	pop	r0
    3490:	1f 90       	pop	r1
    3492:	18 95       	reti

00003494 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3494:	1f 92       	push	r1
    3496:	0f 92       	push	r0
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	0f 92       	push	r0
    349c:	11 24       	eor	r1, r1
    349e:	0b b6       	in	r0, 0x3b	; 59
    34a0:	0f 92       	push	r0
    34a2:	2f 93       	push	r18
    34a4:	3f 93       	push	r19
    34a6:	4f 93       	push	r20
    34a8:	5f 93       	push	r21
    34aa:	6f 93       	push	r22
    34ac:	7f 93       	push	r23
    34ae:	8f 93       	push	r24
    34b0:	9f 93       	push	r25
    34b2:	af 93       	push	r26
    34b4:	bf 93       	push	r27
    34b6:	ef 93       	push	r30
    34b8:	ff 93       	push	r31
    34ba:	e0 91 63 22 	lds	r30, 0x2263
    34be:	f0 91 64 22 	lds	r31, 0x2264
    34c2:	30 97       	sbiw	r30, 0x00	; 0
    34c4:	29 f0       	breq	.+10     	; 0x34d0 <__vector_119+0x3c>
    34c6:	80 91 59 23 	lds	r24, 0x2359
    34ca:	90 91 5a 23 	lds	r25, 0x235A
    34ce:	19 95       	eicall
    34d0:	ff 91       	pop	r31
    34d2:	ef 91       	pop	r30
    34d4:	bf 91       	pop	r27
    34d6:	af 91       	pop	r26
    34d8:	9f 91       	pop	r25
    34da:	8f 91       	pop	r24
    34dc:	7f 91       	pop	r23
    34de:	6f 91       	pop	r22
    34e0:	5f 91       	pop	r21
    34e2:	4f 91       	pop	r20
    34e4:	3f 91       	pop	r19
    34e6:	2f 91       	pop	r18
    34e8:	0f 90       	pop	r0
    34ea:	0b be       	out	0x3b, r0	; 59
    34ec:	0f 90       	pop	r0
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	0f 90       	pop	r0
    34f2:	1f 90       	pop	r1
    34f4:	18 95       	reti

000034f6 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    34f6:	1f 92       	push	r1
    34f8:	0f 92       	push	r0
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	0f 92       	push	r0
    34fe:	11 24       	eor	r1, r1
    3500:	0b b6       	in	r0, 0x3b	; 59
    3502:	0f 92       	push	r0
    3504:	2f 93       	push	r18
    3506:	3f 93       	push	r19
    3508:	4f 93       	push	r20
    350a:	5f 93       	push	r21
    350c:	6f 93       	push	r22
    350e:	7f 93       	push	r23
    3510:	8f 93       	push	r24
    3512:	9f 93       	push	r25
    3514:	af 93       	push	r26
    3516:	bf 93       	push	r27
    3518:	ef 93       	push	r30
    351a:	ff 93       	push	r31
    351c:	e0 91 65 22 	lds	r30, 0x2265
    3520:	f0 91 66 22 	lds	r31, 0x2266
    3524:	30 97       	sbiw	r30, 0x00	; 0
    3526:	29 f0       	breq	.+10     	; 0x3532 <__vector_120+0x3c>
    3528:	80 91 5b 23 	lds	r24, 0x235B
    352c:	90 91 5c 23 	lds	r25, 0x235C
    3530:	19 95       	eicall
    3532:	ff 91       	pop	r31
    3534:	ef 91       	pop	r30
    3536:	bf 91       	pop	r27
    3538:	af 91       	pop	r26
    353a:	9f 91       	pop	r25
    353c:	8f 91       	pop	r24
    353e:	7f 91       	pop	r23
    3540:	6f 91       	pop	r22
    3542:	5f 91       	pop	r21
    3544:	4f 91       	pop	r20
    3546:	3f 91       	pop	r19
    3548:	2f 91       	pop	r18
    354a:	0f 90       	pop	r0
    354c:	0b be       	out	0x3b, r0	; 59
    354e:	0f 90       	pop	r0
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	0f 90       	pop	r0
    3554:	1f 90       	pop	r1
    3556:	18 95       	reti

00003558 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3558:	1f 92       	push	r1
    355a:	0f 92       	push	r0
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	0f 92       	push	r0
    3560:	11 24       	eor	r1, r1
    3562:	0b b6       	in	r0, 0x3b	; 59
    3564:	0f 92       	push	r0
    3566:	2f 93       	push	r18
    3568:	3f 93       	push	r19
    356a:	4f 93       	push	r20
    356c:	5f 93       	push	r21
    356e:	6f 93       	push	r22
    3570:	7f 93       	push	r23
    3572:	8f 93       	push	r24
    3574:	9f 93       	push	r25
    3576:	af 93       	push	r26
    3578:	bf 93       	push	r27
    357a:	ef 93       	push	r30
    357c:	ff 93       	push	r31
    357e:	e0 91 67 22 	lds	r30, 0x2267
    3582:	f0 91 68 22 	lds	r31, 0x2268
    3586:	30 97       	sbiw	r30, 0x00	; 0
    3588:	29 f0       	breq	.+10     	; 0x3594 <__vector_121+0x3c>
    358a:	80 91 5d 23 	lds	r24, 0x235D
    358e:	90 91 5e 23 	lds	r25, 0x235E
    3592:	19 95       	eicall
    3594:	ff 91       	pop	r31
    3596:	ef 91       	pop	r30
    3598:	bf 91       	pop	r27
    359a:	af 91       	pop	r26
    359c:	9f 91       	pop	r25
    359e:	8f 91       	pop	r24
    35a0:	7f 91       	pop	r23
    35a2:	6f 91       	pop	r22
    35a4:	5f 91       	pop	r21
    35a6:	4f 91       	pop	r20
    35a8:	3f 91       	pop	r19
    35aa:	2f 91       	pop	r18
    35ac:	0f 90       	pop	r0
    35ae:	0b be       	out	0x3b, r0	; 59
    35b0:	0f 90       	pop	r0
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	0f 90       	pop	r0
    35b6:	1f 90       	pop	r1
    35b8:	18 95       	reti

000035ba <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    35ba:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    35be:	fd cf       	rjmp	.-6      	; 0x35ba <__cxa_pure_virtual>

000035c0 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    35c0:	8c ea       	ldi	r24, 0xAC	; 172
    35c2:	93 e2       	ldi	r25, 0x23	; 35
    35c4:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN4CSPIC1Ev>
CTimerD timeout;
    35c8:	89 ea       	ldi	r24, 0xA9	; 169
    35ca:	93 e2       	ldi	r25, 0x23	; 35
    35cc:	0e 94 0b 23 	call	0x4616	; 0x4616 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    35d0:	87 ea       	ldi	r24, 0xA7	; 167
    35d2:	93 e2       	ldi	r25, 0x23	; 35
    35d4:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    35d8:	8a e8       	ldi	r24, 0x8A	; 138
    35da:	93 e2       	ldi	r25, 0x23	; 35
    35dc:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    35e0:	80 e8       	ldi	r24, 0x80	; 128
    35e2:	93 e2       	ldi	r25, 0x23	; 35
    35e4:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    35e8:	8f e7       	ldi	r24, 0x7F	; 127
    35ea:	93 e2       	ldi	r25, 0x23	; 35
    35ec:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    35f0:	83 e6       	ldi	r24, 0x63	; 99
    35f2:	93 e2       	ldi	r25, 0x23	; 35
    35f4:	0e 94 39 02 	call	0x472	; 0x472 <_ZN16CLaserControlAppC1Ev>
    35f8:	08 95       	ret

000035fa <_GLOBAL__sub_D_dacSPI>:
    35fa:	83 e6       	ldi	r24, 0x63	; 99
    35fc:	93 e2       	ldi	r25, 0x23	; 35
    35fe:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN16CLaserControlAppD1Ev>
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3602:	8f e7       	ldi	r24, 0x7F	; 127
    3604:	93 e2       	ldi	r25, 0x23	; 35
    3606:	0e 94 f6 20 	call	0x41ec	; 0x41ec <_ZN12CSoundPlayerD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    360a:	80 e8       	ldi	r24, 0x80	; 128
    360c:	93 e2       	ldi	r25, 0x23	; 35
    360e:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <_ZN11CLaserBoardD1Ev>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
CMBSender sender;
    3612:	8a e8       	ldi	r24, 0x8A	; 138
    3614:	93 e2       	ldi	r25, 0x23	; 35
    3616:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <_ZN9CMBSenderD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
    361a:	87 ea       	ldi	r24, 0xA7	; 167
    361c:	93 e2       	ldi	r25, 0x23	; 35
    361e:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <_ZN10CDGUSUSARTD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
    3622:	89 ea       	ldi	r24, 0xA9	; 169
    3624:	93 e2       	ldi	r25, 0x23	; 35
    3626:	0e 94 17 23 	call	0x462e	; 0x462e <_ZN7CTimerDD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    362a:	8c ea       	ldi	r24, 0xAC	; 172
    362c:	93 e2       	ldi	r25, 0x23	; 35
    362e:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN4CSPID1Ev>
    3632:	08 95       	ret

00003634 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3634:	cf 92       	push	r12
    3636:	df 92       	push	r13
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3640:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3642:	80 e8       	ldi	r24, 0x80	; 128
    3644:	93 e2       	ldi	r25, 0x23	; 35
    3646:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <_ZN11CLaserBoard12InitializeIOEv>
	// TimerE0, TimerE1
	player.Initialize();
    364a:	8f e7       	ldi	r24, 0x7F	; 127
    364c:	93 e2       	ldi	r25, 0x23	; 35
    364e:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN12CSoundPlayer10InitializeEv>
	// TimerD0
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    3652:	47 e0       	ldi	r20, 0x07	; 7
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	89 ea       	ldi	r24, 0xA9	; 169
    3658:	93 e2       	ldi	r25, 0x23	; 35
    365a:	0e 94 48 22 	call	0x4490	; 0x4490 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    365e:	62 e1       	ldi	r22, 0x12	; 18
    3660:	7a e7       	ldi	r23, 0x7A	; 122
    3662:	89 ea       	ldi	r24, 0xA9	; 169
    3664:	93 e2       	ldi	r25, 0x23	; 35
    3666:	0e 94 86 22 	call	0x450c	; 0x450c <_ZN7CTimerD9SetPeriodEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    366a:	0f 2e       	mov	r0, r31
    366c:	f3 e0       	ldi	r31, 0x03	; 3
    366e:	ef 2e       	mov	r14, r31
    3670:	f0 2d       	mov	r31, r0
    3672:	00 e0       	ldi	r16, 0x00	; 0
    3674:	23 e0       	ldi	r18, 0x03	; 3
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	61 e0       	ldi	r22, 0x01	; 1
    367a:	8c ea       	ldi	r24, 0xAC	; 172
    367c:	93 e2       	ldi	r25, 0x23	; 35
    367e:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3682:	01 e0       	ldi	r16, 0x01	; 1
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	40 e0       	ldi	r20, 0x00	; 0
    3688:	6d e0       	ldi	r22, 0x0D	; 13
    368a:	87 ea       	ldi	r24, 0xA7	; 167
    368c:	93 e2       	ldi	r25, 0x23	; 35
    368e:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    3692:	0f 2e       	mov	r0, r31
    3694:	f2 e1       	ldi	r31, 0x12	; 18
    3696:	cf 2e       	mov	r12, r31
    3698:	fa e7       	ldi	r31, 0x7A	; 122
    369a:	df 2e       	mov	r13, r31
    369c:	f0 2d       	mov	r31, r0
    369e:	e1 2c       	mov	r14, r1
    36a0:	ff 24       	eor	r15, r15
    36a2:	f3 94       	inc	r15
    36a4:	00 e0       	ldi	r16, 0x00	; 0
    36a6:	11 e0       	ldi	r17, 0x01	; 1
    36a8:	23 e6       	ldi	r18, 0x63	; 99
    36aa:	33 e2       	ldi	r19, 0x23	; 35
    36ac:	47 ea       	ldi	r20, 0xA7	; 167
    36ae:	53 e2       	ldi	r21, 0x23	; 35
    36b0:	69 ea       	ldi	r22, 0xA9	; 169
    36b2:	73 e2       	ldi	r23, 0x23	; 35
    36b4:	8a e8       	ldi	r24, 0x8A	; 138
    36b6:	93 e2       	ldi	r25, 0x23	; 35
    36b8:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    36bc:	6a e8       	ldi	r22, 0x8A	; 138
    36be:	73 e2       	ldi	r23, 0x23	; 35
    36c0:	83 e6       	ldi	r24, 0x63	; 99
    36c2:	93 e2       	ldi	r25, 0x23	; 35
    36c4:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    36c8:	80 e8       	ldi	r24, 0x80	; 128
    36ca:	93 e2       	ldi	r25, 0x23	; 35
    36cc:	0e 94 29 20 	call	0x4052	; 0x4052 <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    36d0:	78 94       	sei
}
    36d2:	1f 91       	pop	r17
    36d4:	0f 91       	pop	r16
    36d6:	ff 90       	pop	r15
    36d8:	ef 90       	pop	r14
    36da:	df 90       	pop	r13
    36dc:	cf 90       	pop	r12
    36de:	08 95       	ret

000036e0 <main>:
	 
int main(void)
{	
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	1f 92       	push	r1
    36e6:	1f 92       	push	r1
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
	// Initialization system
	SystemInitialize();
    36ec:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z16SystemInitializev>
    36f0:	2f ef       	ldi	r18, 0xFF	; 255
    36f2:	87 ea       	ldi	r24, 0xA7	; 167
    36f4:	91 e6       	ldi	r25, 0x61	; 97
    36f6:	21 50       	subi	r18, 0x01	; 1
    36f8:	80 40       	sbci	r24, 0x00	; 0
    36fa:	90 40       	sbci	r25, 0x00	; 0
    36fc:	e1 f7       	brne	.-8      	; 0x36f6 <main+0x16>
    36fe:	00 c0       	rjmp	.+0      	; 0x3700 <main+0x20>
    3700:	00 00       	nop
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(1000);
	laserBoard.Relay1On();
    3702:	80 e8       	ldi	r24, 0x80	; 128
    3704:	93 e2       	ldi	r25, 0x23	; 35
    3706:	0e 94 5e 20 	call	0x40bc	; 0x40bc <_ZN11CLaserBoard8Relay1OnEv>
    370a:	2f ef       	ldi	r18, 0xFF	; 255
    370c:	83 ec       	ldi	r24, 0xC3	; 195
    370e:	99 e0       	ldi	r25, 0x09	; 9
    3710:	21 50       	subi	r18, 0x01	; 1
    3712:	80 40       	sbci	r24, 0x00	; 0
    3714:	90 40       	sbci	r25, 0x00	; 0
    3716:	e1 f7       	brne	.-8      	; 0x3710 <main+0x30>
    3718:	00 c0       	rjmp	.+0      	; 0x371a <main+0x3a>
    371a:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    371c:	80 e8       	ldi	r24, 0x80	; 128
    371e:	93 e2       	ldi	r25, 0x23	; 35
    3720:	0e 94 66 20 	call	0x40cc	; 0x40cc <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    3724:	19 82       	std	Y+1, r1	; 0x01
    3726:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    3728:	42 e0       	ldi	r20, 0x02	; 2
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	be 01       	movw	r22, r28
    372e:	6f 5f       	subi	r22, 0xFF	; 255
    3730:	7f 4f       	sbci	r23, 0xFF	; 255
    3732:	8c ea       	ldi	r24, 0xAC	; 172
    3734:	93 e2       	ldi	r25, 0x23	; 35
    3736:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    373a:	83 e6       	ldi	r24, 0x63	; 99
    373c:	93 e2       	ldi	r25, 0x23	; 35
    373e:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN16CLaserControlApp5StartEv>
		
		laserBoard.PortCheck();
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3742:	18 ec       	ldi	r17, 0xC8	; 200
    3744:	8f e3       	ldi	r24, 0x3F	; 63
    3746:	9f e1       	ldi	r25, 0x1F	; 31
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <main+0x68>
    374c:	00 c0       	rjmp	.+0      	; 0x374e <main+0x6e>
    374e:	00 00       	nop
    while (1) 
    {
		// Loop delay
		_delay_ms(1);
		
		laserBoard.PortCheck();
    3750:	80 e8       	ldi	r24, 0x80	; 128
    3752:	93 e2       	ldi	r25, 0x23	; 35
    3754:	0e 94 b8 20 	call	0x4170	; 0x4170 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3758:	40 91 61 23 	lds	r20, 0x2361
    375c:	50 91 62 23 	lds	r21, 0x2362
    3760:	ca 01       	movw	r24, r20
    3762:	01 96       	adiw	r24, 0x01	; 1
    3764:	80 93 61 23 	sts	0x2361, r24
    3768:	90 93 62 23 	sts	0x2362, r25
    376c:	9a 01       	movw	r18, r20
    376e:	36 95       	lsr	r19
    3770:	27 95       	ror	r18
    3772:	36 95       	lsr	r19
    3774:	27 95       	ror	r18
    3776:	36 95       	lsr	r19
    3778:	27 95       	ror	r18
    377a:	ab e7       	ldi	r26, 0x7B	; 123
    377c:	b4 e1       	ldi	r27, 0x14	; 20
    377e:	0e 94 41 24 	call	0x4882	; 0x4882 <__umulhisi3>
    3782:	96 95       	lsr	r25
    3784:	87 95       	ror	r24
    3786:	18 9f       	mul	r17, r24
    3788:	90 01       	movw	r18, r0
    378a:	19 9f       	mul	r17, r25
    378c:	30 0d       	add	r19, r0
    378e:	11 24       	eor	r1, r1
    3790:	42 17       	cp	r20, r18
    3792:	53 07       	cpc	r21, r19
    3794:	b9 f6       	brne	.-82     	; 0x3744 <main+0x64>
			App.Run();
    3796:	83 e6       	ldi	r24, 0x63	; 99
    3798:	93 e2       	ldi	r25, 0x23	; 35
    379a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN16CLaserControlApp3RunEv>
    379e:	d2 cf       	rjmp	.-92     	; 0x3744 <main+0x64>

000037a0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    37a6:	ec 81       	ldd	r30, Y+4	; 0x04
    37a8:	fd 81       	ldd	r31, Y+5	; 0x05
    37aa:	8a ea       	ldi	r24, 0xAA	; 170
    37ac:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    37ae:	ec 81       	ldd	r30, Y+4	; 0x04
    37b0:	fd 81       	ldd	r31, Y+5	; 0x05
    37b2:	8c ec       	ldi	r24, 0xCC	; 204
    37b4:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    37b6:	ec 81       	ldd	r30, Y+4	; 0x04
    37b8:	fd 81       	ldd	r31, Y+5	; 0x05
    37ba:	82 e0       	ldi	r24, 0x02	; 2
    37bc:	82 0f       	add	r24, r18
    37be:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    37c0:	ec 81       	ldd	r30, Y+4	; 0x04
    37c2:	fd 81       	ldd	r31, Y+5	; 0x05
    37c4:	80 e8       	ldi	r24, 0x80	; 128
    37c6:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    37c8:	ec 81       	ldd	r30, Y+4	; 0x04
    37ca:	fd 81       	ldd	r31, Y+5	; 0x05
    37cc:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    37ce:	85 e0       	ldi	r24, 0x05	; 5
    37d0:	82 0f       	add	r24, r18
    37d2:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	21 15       	cp	r18, r1
    37d8:	31 05       	cpc	r19, r1
    37da:	81 f0       	breq	.+32     	; 0x37fc <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    37dc:	da 01       	movw	r26, r20
    37de:	42 0f       	add	r20, r18
    37e0:	53 1f       	adc	r21, r19
    37e2:	65 e0       	ldi	r22, 0x05	; 5
    37e4:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    37e6:	9d 91       	ld	r25, X+
    37e8:	ec 81       	ldd	r30, Y+4	; 0x04
    37ea:	fd 81       	ldd	r31, Y+5	; 0x05
    37ec:	e6 0f       	add	r30, r22
    37ee:	f7 1f       	adc	r31, r23
    37f0:	90 83       	st	Z, r25
    37f2:	6f 5f       	subi	r22, 0xFF	; 255
    37f4:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    37f6:	a4 17       	cp	r26, r20
    37f8:	b5 07       	cpc	r27, r21
    37fa:	a9 f7       	brne	.-22     	; 0x37e6 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    3802:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3804:	a4 81       	ldd	r26, Z+4	; 0x04
    3806:	b5 81       	ldd	r27, Z+5	; 0x05
    3808:	8a ea       	ldi	r24, 0xAA	; 170
    380a:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    380c:	a4 81       	ldd	r26, Z+4	; 0x04
    380e:	b5 81       	ldd	r27, Z+5	; 0x05
    3810:	8c ec       	ldi	r24, 0xCC	; 204
    3812:	11 96       	adiw	r26, 0x01	; 1
    3814:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    3816:	a4 81       	ldd	r26, Z+4	; 0x04
    3818:	b5 81       	ldd	r27, Z+5	; 0x05
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	12 96       	adiw	r26, 0x02	; 2
    381e:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    3820:	a4 81       	ldd	r26, Z+4	; 0x04
    3822:	b5 81       	ldd	r27, Z+5	; 0x05
    3824:	81 e8       	ldi	r24, 0x81	; 129
    3826:	13 96       	adiw	r26, 0x03	; 3
    3828:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    382a:	a4 81       	ldd	r26, Z+4	; 0x04
    382c:	b5 81       	ldd	r27, Z+5	; 0x05
    382e:	14 96       	adiw	r26, 0x04	; 4
    3830:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    3832:	a4 81       	ldd	r26, Z+4	; 0x04
    3834:	b5 81       	ldd	r27, Z+5	; 0x05
    3836:	15 96       	adiw	r26, 0x05	; 5
    3838:	4c 93       	st	X, r20
	tx_frame_length = 6;
    383a:	86 e0       	ldi	r24, 0x06	; 6
    383c:	81 87       	std	Z+9, r24	; 0x09
    383e:	08 95       	ret

00003840 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3848:	dc 01       	movw	r26, r24
    384a:	14 96       	adiw	r26, 0x04	; 4
    384c:	ed 91       	ld	r30, X+
    384e:	fc 91       	ld	r31, X
    3850:	15 97       	sbiw	r26, 0x05	; 5
    3852:	aa ea       	ldi	r26, 0xAA	; 170
    3854:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3856:	ec 01       	movw	r28, r24
    3858:	ec 81       	ldd	r30, Y+4	; 0x04
    385a:	fd 81       	ldd	r31, Y+5	; 0x05
    385c:	ac ec       	ldi	r26, 0xCC	; 204
    385e:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    3860:	ec 81       	ldd	r30, Y+4	; 0x04
    3862:	fd 81       	ldd	r31, Y+5	; 0x05
    3864:	a3 e0       	ldi	r26, 0x03	; 3
    3866:	a2 0f       	add	r26, r18
    3868:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    386a:	ec 81       	ldd	r30, Y+4	; 0x04
    386c:	fd 81       	ldd	r31, Y+5	; 0x05
    386e:	a2 e8       	ldi	r26, 0x82	; 130
    3870:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    3872:	ec 81       	ldd	r30, Y+4	; 0x04
    3874:	fd 81       	ldd	r31, Y+5	; 0x05
    3876:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    3878:	ec 81       	ldd	r30, Y+4	; 0x04
    387a:	fd 81       	ldd	r31, Y+5	; 0x05
    387c:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    387e:	66 e0       	ldi	r22, 0x06	; 6
    3880:	62 0f       	add	r22, r18
    3882:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    3884:	36 95       	lsr	r19
    3886:	27 95       	ror	r18
    3888:	21 15       	cp	r18, r1
    388a:	31 05       	cpc	r19, r1
    388c:	e1 f0       	breq	.+56     	; 0x38c6 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    388e:	e4 2f       	mov	r30, r20
    3890:	f5 2f       	mov	r31, r21
    3892:	2d 5f       	subi	r18, 0xFD	; 253
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	22 0f       	add	r18, r18
    3898:	33 1f       	adc	r19, r19
    389a:	46 e0       	ldi	r20, 0x06	; 6
    389c:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    389e:	ec 01       	movw	r28, r24
    38a0:	ac 81       	ldd	r26, Y+4	; 0x04
    38a2:	bd 81       	ldd	r27, Y+5	; 0x05
    38a4:	a4 0f       	add	r26, r20
    38a6:	b5 1f       	adc	r27, r21
    38a8:	61 81       	ldd	r22, Z+1	; 0x01
    38aa:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    38ac:	ac 81       	ldd	r26, Y+4	; 0x04
    38ae:	bd 81       	ldd	r27, Y+5	; 0x05
    38b0:	a4 0f       	add	r26, r20
    38b2:	b5 1f       	adc	r27, r21
    38b4:	60 81       	ld	r22, Z
    38b6:	32 96       	adiw	r30, 0x02	; 2
    38b8:	11 96       	adiw	r26, 0x01	; 1
    38ba:	6c 93       	st	X, r22
    38bc:	4e 5f       	subi	r20, 0xFE	; 254
    38be:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    38c0:	42 17       	cp	r20, r18
    38c2:	53 07       	cpc	r21, r19
    38c4:	61 f7       	brne	.-40     	; 0x389e <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    38c6:	df 91       	pop	r29
    38c8:	cf 91       	pop	r28
    38ca:	1f 91       	pop	r17
    38cc:	0f 91       	pop	r16
    38ce:	08 95       	ret

000038d0 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    38d0:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    38d2:	a4 81       	ldd	r26, Z+4	; 0x04
    38d4:	b5 81       	ldd	r27, Z+5	; 0x05
    38d6:	8a ea       	ldi	r24, 0xAA	; 170
    38d8:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    38da:	a4 81       	ldd	r26, Z+4	; 0x04
    38dc:	b5 81       	ldd	r27, Z+5	; 0x05
    38de:	8c ec       	ldi	r24, 0xCC	; 204
    38e0:	11 96       	adiw	r26, 0x01	; 1
    38e2:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    38e4:	a4 81       	ldd	r26, Z+4	; 0x04
    38e6:	b5 81       	ldd	r27, Z+5	; 0x05
    38e8:	84 e0       	ldi	r24, 0x04	; 4
    38ea:	12 96       	adiw	r26, 0x02	; 2
    38ec:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    38ee:	a4 81       	ldd	r26, Z+4	; 0x04
    38f0:	b5 81       	ldd	r27, Z+5	; 0x05
    38f2:	83 e8       	ldi	r24, 0x83	; 131
    38f4:	13 96       	adiw	r26, 0x03	; 3
    38f6:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    38f8:	a4 81       	ldd	r26, Z+4	; 0x04
    38fa:	b5 81       	ldd	r27, Z+5	; 0x05
    38fc:	14 96       	adiw	r26, 0x04	; 4
    38fe:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    3900:	a4 81       	ldd	r26, Z+4	; 0x04
    3902:	b5 81       	ldd	r27, Z+5	; 0x05
    3904:	15 96       	adiw	r26, 0x05	; 5
    3906:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    3908:	a4 81       	ldd	r26, Z+4	; 0x04
    390a:	b5 81       	ldd	r27, Z+5	; 0x05
    390c:	16 96       	adiw	r26, 0x06	; 6
    390e:	4c 93       	st	X, r20
	tx_frame_length = 7;
    3910:	87 e0       	ldi	r24, 0x07	; 7
    3912:	81 87       	std	Z+9, r24	; 0x09
    3914:	08 95       	ret

00003916 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    3916:	0f 93       	push	r16
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	ec 01       	movw	r28, r24
    3920:	cb 01       	movw	r24, r22
    3922:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    3924:	6f 83       	std	Y+7, r22	; 0x07
    3926:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    3928:	4a 87       	std	Y+10, r20	; 0x0a
    392a:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    392c:	0e 94 72 24 	call	0x48e4	; 0x48e4 <malloc>
    3930:	8a 83       	std	Y+2, r24	; 0x02
    3932:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    3934:	c8 01       	movw	r24, r16
    3936:	0e 94 72 24 	call	0x48e4	; 0x48e4 <malloc>
    393a:	8c 83       	std	Y+4, r24	; 0x04
    393c:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    393e:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    3940:	1e 82       	std	Y+6, r1	; 0x06
}
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

0000394c <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	ec 01       	movw	r28, r24
	free(rx_buffer);
    3952:	8a 81       	ldd	r24, Y+2	; 0x02
    3954:	9b 81       	ldd	r25, Y+3	; 0x03
    3956:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <free>
	free(tx_buffer);
    395a:	8c 81       	ldd	r24, Y+4	; 0x04
    395c:	9d 81       	ldd	r25, Y+5	; 0x05
    395e:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <free>
}
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	08 95       	ret

00003968 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    3968:	08 95       	ret

0000396a <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    396a:	dc 01       	movw	r26, r24
    396c:	5b 96       	adiw	r26, 0x1b	; 27
    396e:	8d 91       	ld	r24, X+
    3970:	9c 91       	ld	r25, X
    3972:	5c 97       	sbiw	r26, 0x1c	; 28
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	39 f0       	breq	.+14     	; 0x3986 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    3978:	dc 01       	movw	r26, r24
    397a:	ed 91       	ld	r30, X+
    397c:	fc 91       	ld	r31, X
    397e:	02 80       	ldd	r0, Z+2	; 0x02
    3980:	f3 81       	ldd	r31, Z+3	; 0x03
    3982:	e0 2d       	mov	r30, r0
    3984:	19 95       	eicall
    3986:	08 95       	ret

00003988 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    3988:	dc 01       	movw	r26, r24
    398a:	5b 96       	adiw	r26, 0x1b	; 27
    398c:	8d 91       	ld	r24, X+
    398e:	9c 91       	ld	r25, X
    3990:	5c 97       	sbiw	r26, 0x1c	; 28
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	39 f0       	breq	.+14     	; 0x39a4 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    3996:	dc 01       	movw	r26, r24
    3998:	ed 91       	ld	r30, X+
    399a:	fc 91       	ld	r31, X
    399c:	04 80       	ldd	r0, Z+4	; 0x04
    399e:	f5 81       	ldd	r31, Z+5	; 0x05
    39a0:	e0 2d       	mov	r30, r0
    39a2:	19 95       	eicall
    39a4:	08 95       	ret

000039a6 <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    39a6:	2c e9       	ldi	r18, 0x9C	; 156
    39a8:	30 e2       	ldi	r19, 0x20	; 32
    39aa:	fc 01       	movw	r30, r24
    39ac:	20 83       	st	Z, r18
    39ae:	31 83       	std	Z+1, r19	; 0x01
    39b0:	08 95       	ret

000039b2 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>:
	
}


void CMBSender::Initialize(CTimer* timer, CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize, uint16_t timeout)
{
    39b2:	6f 92       	push	r6
    39b4:	7f 92       	push	r7
    39b6:	8f 92       	push	r8
    39b8:	9f 92       	push	r9
    39ba:	af 92       	push	r10
    39bc:	bf 92       	push	r11
    39be:	cf 92       	push	r12
    39c0:	df 92       	push	r13
    39c2:	ef 92       	push	r14
    39c4:	ff 92       	push	r15
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	ec 01       	movw	r28, r24
    39d0:	4b 01       	movw	r8, r22
    39d2:	5a 01       	movw	r10, r20
    39d4:	39 01       	movw	r6, r18
    39d6:	c8 01       	movw	r24, r16
	rx_bufferSize = rx_bufSize;
    39d8:	0f 83       	std	Y+7, r16	; 0x07
    39da:	18 87       	std	Y+8, r17	; 0x08
	tx_bufferSize = tx_bufSize;
    39dc:	ea 86       	std	Y+10, r14	; 0x0a
    39de:	fb 86       	std	Y+11, r15	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    39e0:	0e 94 72 24 	call	0x48e4	; 0x48e4 <malloc>
    39e4:	8a 83       	std	Y+2, r24	; 0x02
    39e6:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    39e8:	c7 01       	movw	r24, r14
    39ea:	0e 94 72 24 	call	0x48e4	; 0x48e4 <malloc>
    39ee:	8c 83       	std	Y+4, r24	; 0x04
    39f0:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    39f2:	19 8e       	std	Y+25, r1	; 0x19
	tx_frame_length  = 0x00;
    39f4:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    39f6:	19 8a       	std	Y+17, r1	; 0x11
	rx_frame_length  = 0x00;
    39f8:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    39fa:	1c 8a       	std	Y+20, r1	; 0x14
    39fc:	1d 8a       	std	Y+21, r1	; 0x15
	rx_currt_crc     = 0x00;
    39fe:	1e 8a       	std	Y+22, r1	; 0x16
    3a00:	1f 8a       	std	Y+23, r1	; 0x17
	modbus_receiver_state  = rx_Idle;
    3a02:	87 e0       	ldi	r24, 0x07	; 7
    3a04:	88 8b       	std	Y+16, r24	; 0x10
	modbus_transmitter_state  = tx_Idle;
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	88 8f       	std	Y+24, r24	; 0x18
	isTransaction = false;
    3a0a:	1a 8e       	std	Y+26, r1	; 0x1a
	Timeout = timeout;
    3a0c:	ca 8a       	std	Y+18, r12	; 0x12
    3a0e:	db 8a       	std	Y+19, r13	; 0x13
	
	// Set usart interface interrupts
	pUSART = usart;
    3a10:	ac 86       	std	Y+12, r10	; 0x0c
    3a12:	bd 86       	std	Y+13, r11	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    3a14:	d5 01       	movw	r26, r10
    3a16:	ed 91       	ld	r30, X+
    3a18:	fc 91       	ld	r31, X
    3a1a:	04 84       	ldd	r0, Z+12	; 0x0c
    3a1c:	f5 85       	ldd	r31, Z+13	; 0x0d
    3a1e:	e0 2d       	mov	r30, r0
    3a20:	4d ef       	ldi	r20, 0xFD	; 253
    3a22:	5d e1       	ldi	r21, 0x1D	; 29
    3a24:	be 01       	movw	r22, r28
    3a26:	c5 01       	movw	r24, r10
    3a28:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    3a2a:	d5 01       	movw	r26, r10
    3a2c:	ed 91       	ld	r30, X+
    3a2e:	fc 91       	ld	r31, X
    3a30:	06 84       	ldd	r0, Z+14	; 0x0e
    3a32:	f7 85       	ldd	r31, Z+15	; 0x0f
    3a34:	e0 2d       	mov	r30, r0
    3a36:	49 e8       	ldi	r20, 0x89	; 137
    3a38:	5e e1       	ldi	r21, 0x1E	; 30
    3a3a:	be 01       	movw	r22, r28
    3a3c:	c5 01       	movw	r24, r10
    3a3e:	19 95       	eicall
	
	// Set event handler
	if (handler)
    3a40:	61 14       	cp	r6, r1
    3a42:	71 04       	cpc	r7, r1
    3a44:	19 f0       	breq	.+6      	; 0x3a4c <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9a>
		CallbackHandler = handler;
    3a46:	6b 8e       	std	Y+27, r6	; 0x1b
    3a48:	7c 8e       	std	Y+28, r7	; 0x1c
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9e>
	else
		CallbackHandler = this;
    3a4c:	cb 8f       	std	Y+27, r28	; 0x1b
    3a4e:	dc 8f       	std	Y+28, r29	; 0x1c
		
	// Set timeout timer
	pTimer = timer;
    3a50:	8e 86       	std	Y+14, r8	; 0x0e
    3a52:	9f 86       	std	Y+15, r9	; 0x0f
	if (pTimer)
    3a54:	81 14       	cp	r8, r1
    3a56:	91 04       	cpc	r9, r1
    3a58:	61 f0       	breq	.+24     	; 0x3a72 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0xc0>
	{
		pTimer->SetOVFCallback(OnTimeoutInterrupt, (void*)this, TC_OVFINTLVL_LO_gc);
    3a5a:	d4 01       	movw	r26, r8
    3a5c:	ed 91       	ld	r30, X+
    3a5e:	fc 91       	ld	r31, X
    3a60:	04 88       	ldd	r0, Z+20	; 0x14
    3a62:	f5 89       	ldd	r31, Z+21	; 0x15
    3a64:	e0 2d       	mov	r30, r0
    3a66:	21 e0       	ldi	r18, 0x01	; 1
    3a68:	ae 01       	movw	r20, r28
    3a6a:	64 e2       	ldi	r22, 0x24	; 36
    3a6c:	7e e1       	ldi	r23, 0x1E	; 30
    3a6e:	c4 01       	movw	r24, r8
    3a70:	19 95       	eicall
	}
} //CMBSender
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	ff 90       	pop	r15
    3a7c:	ef 90       	pop	r14
    3a7e:	df 90       	pop	r13
    3a80:	cf 90       	pop	r12
    3a82:	bf 90       	pop	r11
    3a84:	af 90       	pop	r10
    3a86:	9f 90       	pop	r9
    3a88:	8f 90       	pop	r8
    3a8a:	7f 90       	pop	r7
    3a8c:	6f 90       	pop	r6
    3a8e:	08 95       	ret

00003a90 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    3a90:	2c e9       	ldi	r18, 0x9C	; 156
    3a92:	30 e2       	ldi	r19, 0x20	; 32
    3a94:	fc 01       	movw	r30, r24
    3a96:	20 83       	st	Z, r18
    3a98:	31 83       	std	Z+1, r19	; 0x01
    3a9a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN16CMBEventsHandlerD1Ev>
    3a9e:	08 95       	ret

00003aa0 <_ZN9CMBSender13OnReceiveByteEh>:

//void CMBSender::RequestDataFromRegister(uint8_t addr, uint8_t length);
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

void CMBSender::OnReceiveByte(uint8_t data)
{
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
    3aa4:	ec 01       	movw	r28, r24
    3aa6:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    3aa8:	48 89       	ldd	r20, Y+16	; 0x10
    3aaa:	50 e0       	ldi	r21, 0x00	; 0
    3aac:	4b 30       	cpi	r20, 0x0B	; 11
    3aae:	51 05       	cpc	r21, r1
    3ab0:	08 f0       	brcs	.+2      	; 0x3ab4 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    3ab2:	a0 c0       	rjmp	.+320    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    3ab4:	fa 01       	movw	r30, r20
    3ab6:	88 27       	eor	r24, r24
    3ab8:	e2 50       	subi	r30, 0x02	; 2
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	8f 4f       	sbci	r24, 0xFF	; 255
    3abe:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    3ac2:	9a 3a       	cpi	r25, 0xAA	; 170
    3ac4:	19 f4       	brne	.+6      	; 0x3acc <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	88 8b       	std	Y+16, r24	; 0x10
    3aca:	94 c0       	rjmp	.+296    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	88 8b       	std	Y+16, r24	; 0x10
    3ad0:	91 c0       	rjmp	.+290    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    3ad2:	9c 3c       	cpi	r25, 0xCC	; 204
    3ad4:	19 f4       	brne	.+6      	; 0x3adc <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	88 8b       	std	Y+16, r24	; 0x10
    3ada:	8c c0       	rjmp	.+280    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	88 8b       	std	Y+16, r24	; 0x10
    3ae0:	89 c0       	rjmp	.+274    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    3ae4:	19 8a       	std	Y+17, r1	; 0x11
			rx_currt_crc = 0;
    3ae6:	1e 8a       	std	Y+22, r1	; 0x16
    3ae8:	1f 8a       	std	Y+23, r1	; 0x17
			modbus_receiver_state = rx_FrameReceive;
    3aea:	84 e0       	ldi	r24, 0x04	; 4
    3aec:	88 8b       	std	Y+16, r24	; 0x10
			break;
    3aee:	82 c0       	rjmp	.+260    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    3af0:	89 89       	ldd	r24, Y+17	; 0x11
    3af2:	ea 81       	ldd	r30, Y+2	; 0x02
    3af4:	fb 81       	ldd	r31, Y+3	; 0x03
    3af6:	e8 0f       	add	r30, r24
    3af8:	f1 1d       	adc	r31, r1
    3afa:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    3afc:	29 89       	ldd	r18, Y+17	; 0x11
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	4f 81       	ldd	r20, Y+7	; 0x07
    3b02:	58 85       	ldd	r21, Y+8	; 0x08
    3b04:	42 17       	cp	r20, r18
    3b06:	53 07       	cpc	r21, r19
    3b08:	18 f4       	brcc	.+6      	; 0x3b10 <_ZN9CMBSender13OnReceiveByteEh+0x70>
			{
				modbus_receiver_state = rx_Error;
    3b0a:	89 e0       	ldi	r24, 0x09	; 9
    3b0c:	88 8b       	std	Y+16, r24	; 0x10
				break;
    3b0e:	72 c0       	rjmp	.+228    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    3b10:	2e 89       	ldd	r18, Y+22	; 0x16
    3b12:	3f 89       	ldd	r19, Y+23	; 0x17
    3b14:	29 27       	eor	r18, r25
    3b16:	92 2f       	mov	r25, r18
    3b18:	92 95       	swap	r25
    3b1a:	92 27       	eor	r25, r18
    3b1c:	09 2e       	mov	r0, r25
    3b1e:	96 95       	lsr	r25
    3b20:	96 95       	lsr	r25
    3b22:	90 25       	eor	r25, r0
    3b24:	09 2e       	mov	r0, r25
    3b26:	96 95       	lsr	r25
    3b28:	90 25       	eor	r25, r0
    3b2a:	97 70       	andi	r25, 0x07	; 7
    3b2c:	02 2e       	mov	r0, r18
    3b2e:	23 2f       	mov	r18, r19
    3b30:	96 95       	lsr	r25
    3b32:	07 94       	ror	r0
    3b34:	97 95       	ror	r25
    3b36:	30 2d       	mov	r19, r0
    3b38:	29 27       	eor	r18, r25
    3b3a:	06 94       	lsr	r0
    3b3c:	97 95       	ror	r25
    3b3e:	30 25       	eor	r19, r0
    3b40:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    3b42:	2e 8b       	std	Y+22, r18	; 0x16
    3b44:	3f 8b       	std	Y+23, r19	; 0x17
			rx_buffer_pos++;
    3b46:	89 89       	ldd	r24, Y+17	; 0x11
    3b48:	8f 5f       	subi	r24, 0xFF	; 255
    3b4a:	89 8b       	std	Y+17, r24	; 0x11
			if (rx_buffer_pos == rx_frame_length)
    3b4c:	49 89       	ldd	r20, Y+17	; 0x11
    3b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b50:	48 13       	cpse	r20, r24
    3b52:	50 c0       	rjmp	.+160    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    3b54:	88 e0       	ldi	r24, 0x08	; 8
    3b56:	88 8b       	std	Y+16, r24	; 0x10
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3b58:	e8 81       	ld	r30, Y
    3b5a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	6a 81       	ldd	r22, Y+2	; 0x02
    3b60:	7b 81       	ldd	r23, Y+3	; 0x03
    3b62:	01 90       	ld	r0, Z+
    3b64:	f0 81       	ld	r31, Z
    3b66:	e0 2d       	mov	r30, r0
    3b68:	ce 01       	movw	r24, r28
    3b6a:	19 95       	eicall
				if (CallbackHandler != 0)
    3b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b70:	00 97       	sbiw	r24, 0x00	; 0
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    3b74:	3f c0       	rjmp	.+126    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3b76:	dc 01       	movw	r26, r24
    3b78:	ed 91       	ld	r30, X+
    3b7a:	fc 91       	ld	r31, X
    3b7c:	4e 81       	ldd	r20, Y+6	; 0x06
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	6a 81       	ldd	r22, Y+2	; 0x02
    3b82:	7b 81       	ldd	r23, Y+3	; 0x03
    3b84:	01 90       	ld	r0, Z+
    3b86:	f0 81       	ld	r31, Z
    3b88:	e0 2d       	mov	r30, r0
    3b8a:	19 95       	eicall
    3b8c:	33 c0       	rjmp	.+102    	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    3b8e:	69 2f       	mov	r22, r25
    3b90:	70 e0       	ldi	r23, 0x00	; 0
    3b92:	6c 8b       	std	Y+20, r22	; 0x14
    3b94:	7d 8b       	std	Y+21, r23	; 0x15
			modbus_receiver_state = rx_CRC1;
    3b96:	86 e0       	ldi	r24, 0x06	; 6
    3b98:	88 8b       	std	Y+16, r24	; 0x10
			break;
    3b9a:	2c c0       	rjmp	.+88     	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    3b9c:	2c 89       	ldd	r18, Y+20	; 0x14
    3b9e:	3d 89       	ldd	r19, Y+21	; 0x15
    3ba0:	a9 01       	movw	r20, r18
    3ba2:	59 2b       	or	r21, r25
    3ba4:	4c 8b       	std	Y+20, r20	; 0x14
    3ba6:	5d 8b       	std	Y+21, r21	; 0x15
			if (rx_currt_crc == rx_frame_crc)
    3ba8:	2e 89       	ldd	r18, Y+22	; 0x16
    3baa:	3f 89       	ldd	r19, Y+23	; 0x17
    3bac:	42 17       	cp	r20, r18
    3bae:	53 07       	cpc	r21, r19
    3bb0:	e9 f4       	brne	.+58     	; 0x3bec <_ZN9CMBSender13OnReceiveByteEh+0x14c>
			{
				modbus_receiver_state = rx_Complete;
    3bb2:	88 e0       	ldi	r24, 0x08	; 8
    3bb4:	88 8b       	std	Y+16, r24	; 0x10
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3bb6:	e8 81       	ld	r30, Y
    3bb8:	f9 81       	ldd	r31, Y+1	; 0x01
    3bba:	4e 81       	ldd	r20, Y+6	; 0x06
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	6a 81       	ldd	r22, Y+2	; 0x02
    3bc0:	7b 81       	ldd	r23, Y+3	; 0x03
    3bc2:	01 90       	ld	r0, Z+
    3bc4:	f0 81       	ld	r31, Z
    3bc6:	e0 2d       	mov	r30, r0
    3bc8:	ce 01       	movw	r24, r28
    3bca:	19 95       	eicall
				if (CallbackHandler != 0)
    3bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	81 f0       	breq	.+32     	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	ed 91       	ld	r30, X+
    3bd8:	fc 91       	ld	r31, X
    3bda:	4e 81       	ldd	r20, Y+6	; 0x06
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	6a 81       	ldd	r22, Y+2	; 0x02
    3be0:	7b 81       	ldd	r23, Y+3	; 0x03
    3be2:	01 90       	ld	r0, Z+
    3be4:	f0 81       	ld	r31, Z
    3be6:	e0 2d       	mov	r30, r0
    3be8:	19 95       	eicall
    3bea:	04 c0       	rjmp	.+8      	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			else
				modbus_receiver_state = rx_Error;
    3bec:	89 e0       	ldi	r24, 0x09	; 9
    3bee:	88 8b       	std	Y+16, r24	; 0x10
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    3bf2:	1a 8e       	std	Y+26, r1	; 0x1a
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	08 95       	ret

00003bfa <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    3c00:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c02:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c04:	dc 01       	movw	r26, r24
    3c06:	ed 91       	ld	r30, X+
    3c08:	fc 91       	ld	r31, X
    3c0a:	02 80       	ldd	r0, Z+2	; 0x02
    3c0c:	f3 81       	ldd	r31, Z+3	; 0x03
    3c0e:	e0 2d       	mov	r30, r0
    3c10:	19 95       	eicall
	owner->OnReceiveByte(data);
    3c12:	68 2f       	mov	r22, r24
    3c14:	ce 01       	movw	r24, r28
    3c16:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN9CMBSender13OnReceiveByteEh>
}
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	08 95       	ret

00003c20 <_ZN9CMBSender9OnTimeoutEv>:
		break;
	}
}

void CMBSender::OnTimeout()
{
    3c20:	cf 93       	push	r28
    3c22:	df 93       	push	r29
    3c24:	ec 01       	movw	r28, r24
	pTimer->Stop();
    3c26:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c28:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	ed 91       	ld	r30, X+
    3c2e:	fc 91       	ld	r31, X
    3c30:	04 80       	ldd	r0, Z+4	; 0x04
    3c32:	f5 81       	ldd	r31, Z+5	; 0x05
    3c34:	e0 2d       	mov	r30, r0
    3c36:	19 95       	eicall
	if (modbus_receiver_state != rx_Complete)
    3c38:	88 89       	ldd	r24, Y+16	; 0x10
    3c3a:	88 30       	cpi	r24, 0x08	; 8
    3c3c:	11 f0       	breq	.+4      	; 0x3c42 <_ZN9CMBSender9OnTimeoutEv+0x22>
		modbus_receiver_state = rx_TimeOut;
    3c3e:	8a e0       	ldi	r24, 0x0A	; 10
    3c40:	88 8b       	std	Y+16, r24	; 0x10
}
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	08 95       	ret

00003c48 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
}

void CMBSender::OnTimeoutInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTimeout();
    3c48:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <_ZN9CMBSender9OnTimeoutEv>
    3c4c:	08 95       	ret

00003c4e <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    3c54:	11 8a       	std	Z+17, r1	; 0x11
	rx_frame_length  = 0x00;
    3c56:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    3c58:	14 8a       	std	Z+20, r1	; 0x14
    3c5a:	15 8a       	std	Z+21, r1	; 0x15
	rx_currt_crc     = 0x00;
    3c5c:	16 8a       	std	Z+22, r1	; 0x16
    3c5e:	17 8a       	std	Z+23, r1	; 0x17
	modbus_receiver_state  = rx_Start;
    3c60:	10 8a       	std	Z+16, r1	; 0x10
	pTimer->Start(Timeout);
    3c62:	86 85       	ldd	r24, Z+14	; 0x0e
    3c64:	97 85       	ldd	r25, Z+15	; 0x0f
    3c66:	ec 01       	movw	r28, r24
    3c68:	a8 81       	ld	r26, Y
    3c6a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c6c:	62 89       	ldd	r22, Z+18	; 0x12
    3c6e:	73 89       	ldd	r23, Z+19	; 0x13
    3c70:	12 96       	adiw	r26, 0x02	; 2
    3c72:	ed 91       	ld	r30, X+
    3c74:	fc 91       	ld	r31, X
    3c76:	13 97       	sbiw	r26, 0x03	; 3
    3c78:	19 95       	eicall
}
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	08 95       	ret

00003c80 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    3c86:	88 8d       	ldd	r24, Y+24	; 0x18
    3c88:	84 30       	cpi	r24, 0x04	; 4
    3c8a:	38 f4       	brcc	.+14     	; 0x3c9a <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    3c8c:	82 30       	cpi	r24, 0x02	; 2
    3c8e:	b8 f5       	brcc	.+110    	; 0x3cfe <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    3c90:	88 23       	and	r24, r24
    3c92:	31 f0       	breq	.+12     	; 0x3ca0 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    3c94:	81 30       	cpi	r24, 0x01	; 1
    3c96:	d1 f0       	breq	.+52     	; 0x3ccc <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    3c98:	39 c0       	rjmp	.+114    	; 0x3d0c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    3c9a:	85 30       	cpi	r24, 0x05	; 5
    3c9c:	81 f1       	breq	.+96     	; 0x3cfe <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    3c9e:	36 c0       	rjmp	.+108    	; 0x3d0c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	88 8f       	std	Y+24, r24	; 0x18
			tx_buffer_pos = 0;
    3ca4:	19 8e       	std	Y+25, r1	; 0x19
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    3ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3caa:	29 8d       	ldd	r18, Y+25	; 0x19
    3cac:	dc 01       	movw	r26, r24
    3cae:	ed 91       	ld	r30, X+
    3cb0:	fc 91       	ld	r31, X
    3cb2:	ac 81       	ldd	r26, Y+4	; 0x04
    3cb4:	bd 81       	ldd	r27, Y+5	; 0x05
    3cb6:	a2 0f       	add	r26, r18
    3cb8:	b1 1d       	adc	r27, r1
    3cba:	04 80       	ldd	r0, Z+4	; 0x04
    3cbc:	f5 81       	ldd	r31, Z+5	; 0x05
    3cbe:	e0 2d       	mov	r30, r0
    3cc0:	6c 91       	ld	r22, X
    3cc2:	19 95       	eicall
			tx_buffer_pos++;
    3cc4:	89 8d       	ldd	r24, Y+25	; 0x19
    3cc6:	8f 5f       	subi	r24, 0xFF	; 255
    3cc8:	89 8f       	std	Y+25, r24	; 0x19
			break;
    3cca:	20 c0       	rjmp	.+64     	; 0x3d0c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    3ccc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cce:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cd0:	29 8d       	ldd	r18, Y+25	; 0x19
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	ed 91       	ld	r30, X+
    3cd6:	fc 91       	ld	r31, X
    3cd8:	ac 81       	ldd	r26, Y+4	; 0x04
    3cda:	bd 81       	ldd	r27, Y+5	; 0x05
    3cdc:	a2 0f       	add	r26, r18
    3cde:	b1 1d       	adc	r27, r1
    3ce0:	04 80       	ldd	r0, Z+4	; 0x04
    3ce2:	f5 81       	ldd	r31, Z+5	; 0x05
    3ce4:	e0 2d       	mov	r30, r0
    3ce6:	6c 91       	ld	r22, X
    3ce8:	19 95       	eicall
			tx_buffer_pos++;
    3cea:	89 8d       	ldd	r24, Y+25	; 0x19
    3cec:	8f 5f       	subi	r24, 0xFF	; 255
    3cee:	89 8f       	std	Y+25, r24	; 0x19
			if (tx_buffer_pos == tx_frame_length)
    3cf0:	99 8d       	ldd	r25, Y+25	; 0x19
    3cf2:	89 85       	ldd	r24, Y+9	; 0x09
    3cf4:	98 13       	cpse	r25, r24
    3cf6:	0a c0       	rjmp	.+20     	; 0x3d0c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    3cf8:	83 e0       	ldi	r24, 0x03	; 3
    3cfa:	88 8f       	std	Y+24, r24	; 0x18
    3cfc:	07 c0       	rjmp	.+14     	; 0x3d0c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    3cfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d00:	88 23       	and	r24, r24
    3d02:	19 f0       	breq	.+6      	; 0x3d0a <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    3d04:	ce 01       	movw	r24, r28
    3d06:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    3d0a:	1a 8e       	std	Y+26, r1	; 0x1a
		default :
		break;
	}
}
    3d0c:	df 91       	pop	r29
    3d0e:	cf 91       	pop	r28
    3d10:	08 95       	ret

00003d12 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    3d12:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN9CMBSender14OnTransmitByteEv>
    3d16:	08 95       	ret

00003d18 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	modbus_receiver_state  = rx_Start;
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    3d18:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    3d1a:	06 c0       	rjmp	.+12     	; 0x3d28 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    3d1c:	80 89       	ldd	r24, Z+16	; 0x10
    3d1e:	89 30       	cpi	r24, 0x09	; 9
    3d20:	41 f0       	breq	.+16     	; 0x3d32 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    3d22:	80 89       	ldd	r24, Z+16	; 0x10
    3d24:	8a 30       	cpi	r24, 0x0A	; 10
    3d26:	39 f0       	breq	.+14     	; 0x3d36 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    3d28:	80 89       	ldd	r24, Z+16	; 0x10
    3d2a:	88 30       	cpi	r24, 0x08	; 8
    3d2c:	b9 f7       	brne	.-18     	; 0x3d1c <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    3d32:	82 e0       	ldi	r24, 0x02	; 2
    3d34:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    3d36:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    3d38:	08 95       	ret

00003d3a <_ZN9CMBSender22StartMODBUSTransmitterEv>:
{
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	ec 01       	movw	r28, r24
	tx_buffer_pos = 0x00;
    3d40:	19 8e       	std	Y+25, r1	; 0x19
	modbus_transmitter_state  = tx_Start;
    3d42:	18 8e       	std	Y+24, r1	; 0x18
	OnTransmitByte();
    3d44:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN9CMBSender14OnTransmitByteEv>
	pTimer->Start(Timeout);
    3d48:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	ed 91       	ld	r30, X+
    3d50:	fc 91       	ld	r31, X
    3d52:	6a 89       	ldd	r22, Y+18	; 0x12
    3d54:	7b 89       	ldd	r23, Y+19	; 0x13
    3d56:	02 80       	ldd	r0, Z+2	; 0x02
    3d58:	f3 81       	ldd	r31, Z+3	; 0x03
    3d5a:	e0 2d       	mov	r30, r0
    3d5c:	19 95       	eicall
}
    3d5e:	df 91       	pop	r29
    3d60:	cf 91       	pop	r28
    3d62:	08 95       	ret

00003d64 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    3d6a:	e8 81       	ld	r30, Y
    3d6c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d6e:	02 84       	ldd	r0, Z+10	; 0x0a
    3d70:	f3 85       	ldd	r31, Z+11	; 0x0b
    3d72:	e0 2d       	mov	r30, r0
    3d74:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3d76:	ce 01       	movw	r24, r28
    3d78:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	08 95       	ret

00003d82 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
    3d86:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    3d88:	e8 81       	ld	r30, Y
    3d8a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d8c:	06 84       	ldd	r0, Z+14	; 0x0e
    3d8e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d90:	e0 2d       	mov	r30, r0
    3d92:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    3d94:	ce 01       	movw	r24, r28
    3d96:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	08 95       	ret

00003da0 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    3da6:	e8 81       	ld	r30, Y
    3da8:	f9 81       	ldd	r31, Y+1	; 0x01
    3daa:	04 84       	ldd	r0, Z+12	; 0x0c
    3dac:	f5 85       	ldd	r31, Z+13	; 0x0d
    3dae:	e0 2d       	mov	r30, r0
    3db0:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3db2:	ce 01       	movw	r24, r28
    3db4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3db8:	df 91       	pop	r29
    3dba:	cf 91       	pop	r28
    3dbc:	08 95       	ret

00003dbe <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
    3dc2:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    3dc4:	e8 81       	ld	r30, Y
    3dc6:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	00 88       	ldd	r0, Z+16	; 0x10
    3dcc:	f1 89       	ldd	r31, Z+17	; 0x11
    3dce:	e0 2d       	mov	r30, r0
    3dd0:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	08 95       	ret

00003dde <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	OnTransmitByte();
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    3dde:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    3de2:	80 8d       	ldd	r24, Z+24	; 0x18
    3de4:	84 30       	cpi	r24, 0x04	; 4
    3de6:	41 f0       	breq	.+16     	; 0x3df8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    3de8:	80 8d       	ldd	r24, Z+24	; 0x18
    3dea:	85 30       	cpi	r24, 0x05	; 5
    3dec:	39 f0       	breq	.+14     	; 0x3dfc <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    3dee:	80 8d       	ldd	r24, Z+24	; 0x18
    3df0:	83 30       	cpi	r24, 0x03	; 3
    3df2:	b9 f7       	brne	.-18     	; 0x3de2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    3df8:	82 e0       	ldi	r24, 0x02	; 2
    3dfa:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    3dfc:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    3dfe:	08 95       	ret

00003e00 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    3e00:	21 e0       	ldi	r18, 0x01	; 1
    3e02:	fc 01       	movw	r30, r24
    3e04:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    3e06:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    3e0a:	08 95       	ret

00003e0c <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    3e0c:	21 e0       	ldi	r18, 0x01	; 1
    3e0e:	fc 01       	movw	r30, r24
    3e10:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    3e12:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    3e16:	08 95       	ret

00003e18 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    3e18:	0f 93       	push	r16
    3e1a:	1f 93       	push	r17
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	8c 01       	movw	r16, r24
    3e22:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    3e24:	98 81       	ld	r25, Y
    3e26:	91 38       	cpi	r25, 0x81	; 129
    3e28:	69 f4       	brne	.+26     	; 0x3e44 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    3e2a:	d8 01       	movw	r26, r16
    3e2c:	ed 91       	ld	r30, X+
    3e2e:	fc 91       	ld	r31, X
    3e30:	04 80       	ldd	r0, Z+4	; 0x04
    3e32:	f5 81       	ldd	r31, Z+5	; 0x05
    3e34:	e0 2d       	mov	r30, r0
    3e36:	2a 81       	ldd	r18, Y+2	; 0x02
    3e38:	ab 01       	movw	r20, r22
    3e3a:	4d 5f       	subi	r20, 0xFD	; 253
    3e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3e:	69 81       	ldd	r22, Y+1	; 0x01
    3e40:	c8 01       	movw	r24, r16
    3e42:	19 95       	eicall
	}
	if (data[0] == 0x83)
    3e44:	98 81       	ld	r25, Y
    3e46:	93 38       	cpi	r25, 0x83	; 131
    3e48:	99 f4       	brne	.+38     	; 0x3e70 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    3e4a:	d8 01       	movw	r26, r16
    3e4c:	ed 91       	ld	r30, X+
    3e4e:	fc 91       	ld	r31, X
    3e50:	2b 81       	ldd	r18, Y+3	; 0x03
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	ae 01       	movw	r20, r28
    3e56:	4c 5f       	subi	r20, 0xFC	; 252
    3e58:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5a:	69 81       	ldd	r22, Y+1	; 0x01
    3e5c:	70 e0       	ldi	r23, 0x00	; 0
    3e5e:	76 2f       	mov	r23, r22
    3e60:	66 27       	eor	r22, r22
    3e62:	8a 81       	ldd	r24, Y+2	; 0x02
    3e64:	68 2b       	or	r22, r24
    3e66:	02 80       	ldd	r0, Z+2	; 0x02
    3e68:	f3 81       	ldd	r31, Z+3	; 0x03
    3e6a:	e0 2d       	mov	r30, r0
    3e6c:	c8 01       	movw	r24, r16
    3e6e:	19 95       	eicall
	}
}
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	08 95       	ret

00003e7a <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    3e7a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <_ZN9CMBSender18ProcessTransactionEPhj>
    3e7e:	08 95       	ret

00003e80 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    3e80:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    3e82:	e0 e6       	ldi	r30, 0x60	; 96
    3e84:	f6 e0       	ldi	r31, 0x06	; 6
    3e86:	88 e0       	ldi	r24, 0x08	; 8
    3e88:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    3e8a:	84 e0       	ldi	r24, 0x04	; 4
    3e8c:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    3e8e:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    3e90:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    3e92:	e0 ea       	ldi	r30, 0xA0	; 160
    3e94:	f9 e0       	ldi	r31, 0x09	; 9
    3e96:	84 e1       	ldi	r24, 0x14	; 20
    3e98:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3e9a:	88 e1       	ldi	r24, 0x18	; 24
    3e9c:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    3e9e:	84 81       	ldd	r24, Z+4	; 0x04
    3ea0:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    3ea2:	41 30       	cpi	r20, 0x01	; 1
    3ea4:	19 f0       	breq	.+6      	; 0x3eac <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    3ea6:	42 30       	cpi	r20, 0x02	; 2
    3ea8:	19 f0       	breq	.+6      	; 0x3eb0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    3eaa:	04 c0       	rjmp	.+8      	; 0x3eb4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    3eac:	80 e2       	ldi	r24, 0x20	; 32
    3eae:	03 c0       	rjmp	.+6      	; 0x3eb6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    3eb0:	80 e3       	ldi	r24, 0x30	; 48
		break;
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    3eb6:	22 23       	and	r18, r18
    3eb8:	19 f0       	breq	.+6      	; 0x3ec0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    3eba:	21 30       	cpi	r18, 0x01	; 1
    3ebc:	19 f0       	breq	.+6      	; 0x3ec4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    3ebe:	03 c0       	rjmp	.+6      	; 0x3ec6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    3ec0:	87 7f       	andi	r24, 0xF7	; 247
		break;
    3ec2:	01 c0       	rjmp	.+2      	; 0x3ec6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    3ec4:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    3ec6:	01 11       	cpse	r16, r1
    3ec8:	02 c0       	rjmp	.+4      	; 0x3ece <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    3eca:	93 e4       	ldi	r25, 0x43	; 67
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    3ece:	93 e0       	ldi	r25, 0x03	; 3
    3ed0:	89 2b       	or	r24, r25
    3ed2:	e0 ea       	ldi	r30, 0xA0	; 160
    3ed4:	f9 e0       	ldi	r31, 0x09	; 9
    3ed6:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	db 01       	movw	r26, r22
    3edc:	aa 5d       	subi	r26, 0xDA	; 218
    3ede:	bf 4d       	sbci	r27, 0xDF	; 223
    3ee0:	8c 91       	ld	r24, X
    3ee2:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    3ee4:	db 01       	movw	r26, r22
    3ee6:	aa 5f       	subi	r26, 0xFA	; 250
    3ee8:	bf 4d       	sbci	r27, 0xDF	; 223
    3eea:	8c 91       	ld	r24, X
    3eec:	82 95       	swap	r24
    3eee:	80 7f       	andi	r24, 0xF0	; 240
    3ef0:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    3ef2:	0f 91       	pop	r16
    3ef4:	08 95       	ret

00003ef6 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    3ef6:	80 91 a0 09 	lds	r24, 0x09A0
}
    3efa:	08 95       	ret

00003efc <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    3efc:	60 93 a0 09 	sts	0x09A0, r22
    3f00:	08 95       	ret

00003f02 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    3f02:	80 91 a1 09 	lds	r24, 0x09A1
    3f06:	86 fb       	bst	r24, 6
    3f08:	88 27       	eor	r24, r24
    3f0a:	80 f9       	bld	r24, 0
}
    3f0c:	91 e0       	ldi	r25, 0x01	; 1
    3f0e:	89 27       	eor	r24, r25
    3f10:	08 95       	ret

00003f12 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    3f12:	80 91 a1 09 	lds	r24, 0x09A1
    3f16:	80 95       	com	r24
}
    3f18:	88 1f       	adc	r24, r24
    3f1a:	88 27       	eor	r24, r24
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	08 95       	ret

00003f20 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    3f20:	80 91 a1 09 	lds	r24, 0x09A1
    3f24:	85 fb       	bst	r24, 5
    3f26:	88 27       	eor	r24, r24
    3f28:	80 f9       	bld	r24, 0
}
    3f2a:	91 e0       	ldi	r25, 0x01	; 1
    3f2c:	89 27       	eor	r24, r25
    3f2e:	08 95       	ret

00003f30 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    3f30:	60 93 1b 23 	sts	0x231B, r22
    3f34:	70 93 1c 23 	sts	0x231C, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    3f38:	40 93 25 22 	sts	0x2225, r20
    3f3c:	50 93 26 22 	sts	0x2226, r21
    3f40:	08 95       	ret

00003f42 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    3f42:	60 93 1f 23 	sts	0x231F, r22
    3f46:	70 93 20 23 	sts	0x2320, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    3f4a:	40 93 29 22 	sts	0x2229, r20
    3f4e:	50 93 2a 22 	sts	0x222A, r21
    3f52:	08 95       	ret

00003f54 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    3f54:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    3f56:	8b e6       	ldi	r24, 0x6B	; 107
    3f58:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    3f5a:	80 ea       	ldi	r24, 0xA0	; 160
    3f5c:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    3f5e:	89 e0       	ldi	r24, 0x09	; 9
    3f60:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    3f62:	12 86       	std	Z+10, r1	; 0x0a
    3f64:	08 95       	ret

00003f66 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    3f66:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    3f68:	8c e6       	ldi	r24, 0x6C	; 108
    3f6a:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    3f6c:	80 ea       	ldi	r24, 0xA0	; 160
    3f6e:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    3f70:	89 e0       	ldi	r24, 0x09	; 9
    3f72:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    3f74:	16 86       	std	Z+14, r1	; 0x0e
    3f76:	08 95       	ret

00003f78 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	ec 01       	movw	r28, r24
    3f7e:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN6CUSARTC1Ev>
    3f82:	82 eb       	ldi	r24, 0xB2	; 178
    3f84:	90 e2       	ldi	r25, 0x20	; 32
    3f86:	88 83       	st	Y, r24
    3f88:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	08 95       	ret

00003f90 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    3f90:	22 eb       	ldi	r18, 0xB2	; 178
    3f92:	30 e2       	ldi	r19, 0x20	; 32
    3f94:	fc 01       	movw	r30, r24
    3f96:	20 83       	st	Z, r18
    3f98:	31 83       	std	Z+1, r19	; 0x01
    3f9a:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN6CUSARTD1Ev>
    3f9e:	08 95       	ret

00003fa0 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
    3fa0:	08 95       	ret

00003fa2 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
    3fa2:	08 95       	ret

00003fa4 <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
    3fa4:	cf 93       	push	r28
    3fa6:	df 93       	push	r29
    3fa8:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
    3faa:	e0 e4       	ldi	r30, 0x40	; 64
    3fac:	f6 e0       	ldi	r31, 0x06	; 6
    3fae:	2f ef       	ldi	r18, 0xFF	; 255
    3fb0:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fb2:	98 ea       	ldi	r25, 0xA8	; 168
    3fb4:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fb6:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fb8:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fba:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fbc:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fbe:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fc0:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3fc2:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
    3fc4:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
    3fc6:	a0 e8       	ldi	r26, 0x80	; 128
    3fc8:	b6 e0       	ldi	r27, 0x06	; 6
    3fca:	88 e0       	ldi	r24, 0x08	; 8
    3fcc:	11 96       	adiw	r26, 0x01	; 1
    3fce:	8c 93       	st	X, r24
    3fd0:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
    3fd2:	53 96       	adiw	r26, 0x13	; 19
    3fd4:	1c 92       	st	X, r1
    3fd6:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
    3fd8:	14 96       	adiw	r26, 0x04	; 4
    3fda:	1c 92       	st	X, r1
    3fdc:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fde:	e0 ea       	ldi	r30, 0xA0	; 160
    3fe0:	f6 e0       	ldi	r31, 0x06	; 6
    3fe2:	90 ec       	ldi	r25, 0xC0	; 192
    3fe4:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fe6:	80 e8       	ldi	r24, 0x80	; 128
    3fe8:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fea:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fec:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fee:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3ff0:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3ff2:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3ff4:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
    3ff6:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
    3ff8:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
    3ffa:	e0 e6       	ldi	r30, 0x60	; 96
    3ffc:	f6 e0       	ldi	r31, 0x06	; 6
    3ffe:	21 e1       	ldi	r18, 0x11	; 17
    4000:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4002:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4004:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
    4006:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
    4008:	93 e0       	ldi	r25, 0x03	; 3
    400a:	11 96       	adiw	r26, 0x01	; 1
    400c:	9c 93       	st	X, r25
    400e:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4010:	50 96       	adiw	r26, 0x10	; 16
    4012:	8c 93       	st	X, r24
    4014:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    4016:	51 96       	adiw	r26, 0x11	; 17
    4018:	8c 93       	st	X, r24
    401a:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
    401c:	14 96       	adiw	r26, 0x04	; 4
    401e:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    4020:	e0 ea       	ldi	r30, 0xA0	; 160
    4022:	f0 e0       	ldi	r31, 0x00	; 0
    4024:	82 81       	ldd	r24, Z+2	; 0x02
    4026:	81 60       	ori	r24, 0x01	; 1
    4028:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
    402a:	82 81       	ldd	r24, Z+2	; 0x02
    402c:	82 60       	ori	r24, 0x02	; 2
    402e:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    4030:	82 81       	ldd	r24, Z+2	; 0x02
    4032:	84 60       	ori	r24, 0x04	; 4
    4034:	82 83       	std	Z+2, r24	; 0x02
    4036:	fe 01       	movw	r30, r28
    4038:	9e 01       	movw	r18, r28
    403a:	28 5f       	subi	r18, 0xF8	; 248
    403c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
    4042:	e2 17       	cp	r30, r18
    4044:	f3 07       	cpc	r31, r19
    4046:	e1 f7       	brne	.-8      	; 0x4040 <__stack+0x41>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
    4048:	8a e0       	ldi	r24, 0x0A	; 10
    404a:	88 87       	std	Y+8, r24	; 0x08
}
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	08 95       	ret

00004052 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
    4052:	e0 e5       	ldi	r30, 0x50	; 80
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	8b ec       	ldi	r24, 0xCB	; 203
    4058:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
    405a:	80 81       	ld	r24, Z
    405c:	88 60       	ori	r24, 0x08	; 8
    405e:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
    4060:	81 81       	ldd	r24, Z+1	; 0x01
    4062:	83 ff       	sbrs	r24, 3
    4064:	fd cf       	rjmp	.-6      	; 0x4060 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
    4066:	e0 e5       	ldi	r30, 0x50	; 80
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
    406c:	98 ed       	ldi	r25, 0xD8	; 216
    406e:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
    4070:	84 ec       	ldi	r24, 0xC4	; 196
    4072:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
    4074:	80 81       	ld	r24, Z
    4076:	80 61       	ori	r24, 0x10	; 16
    4078:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    407a:	e0 e4       	ldi	r30, 0x40	; 64
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
    4080:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
    4082:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
    4084:	e0 e5       	ldi	r30, 0x50	; 80
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	81 81       	ldd	r24, Z+1	; 0x01
    408a:	84 ff       	sbrs	r24, 4
    408c:	fd cf       	rjmp	.-6      	; 0x4088 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
    408e:	e0 e4       	ldi	r30, 0x40	; 64
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	88 7f       	andi	r24, 0xF8	; 248
    4096:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
    4098:	98 ed       	ldi	r25, 0xD8	; 216
    409a:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
    409c:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
    409e:	a0 e5       	ldi	r26, 0x50	; 80
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	8c 91       	ld	r24, X
    40a4:	88 7f       	andi	r24, 0xF8	; 248
    40a6:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
    40aa:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
    40b0:	e0 eb       	ldi	r30, 0xB0	; 176
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	84 81       	ldd	r24, Z+4	; 0x04
    40b6:	8c 7f       	andi	r24, 0xFC	; 252
    40b8:	84 83       	std	Z+4, r24	; 0x04
    40ba:	08 95       	ret

000040bc <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	80 93 62 06 	sts	0x0662, r24
    40c2:	08 95       	ret

000040c4 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
    40c4:	80 e1       	ldi	r24, 0x10	; 16
    40c6:	80 93 62 06 	sts	0x0662, r24
    40ca:	08 95       	ret

000040cc <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	80 93 61 06 	sts	0x0661, r24
    40d2:	08 95       	ret

000040d4 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    40d4:	80 e1       	ldi	r24, 0x10	; 16
    40d6:	80 93 61 06 	sts	0x0661, r24
    40da:	08 95       	ret

000040dc <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	80 93 85 06 	sts	0x0685, r24
    40e2:	08 95       	ret

000040e4 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    40e4:	82 e0       	ldi	r24, 0x02	; 2
    40e6:	80 93 86 06 	sts	0x0686, r24
    40ea:	08 95       	ret

000040ec <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    40ec:	f8 94       	cli
    40ee:	84 e6       	ldi	r24, 0x64	; 100
    40f0:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    40f2:	e0 e8       	ldi	r30, 0x80	; 128
    40f4:	f6 e0       	ldi	r31, 0x06	; 6
    40f6:	28 e0       	ldi	r18, 0x08	; 8
    40f8:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    40fa:	af e9       	ldi	r26, 0x9F	; 159
    40fc:	bf e0       	ldi	r27, 0x0F	; 15
    40fe:	11 97       	sbiw	r26, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <_ZN11CLaserBoard4BeepEv+0x12>
    4102:	00 c0       	rjmp	.+0      	; 0x4104 <_ZN11CLaserBoard4BeepEv+0x18>
    4104:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    4106:	26 83       	std	Z+6, r18	; 0x06
    4108:	af e9       	ldi	r26, 0x9F	; 159
    410a:	bf e0       	ldi	r27, 0x0F	; 15
    410c:	11 97       	sbiw	r26, 0x01	; 1
    410e:	f1 f7       	brne	.-4      	; 0x410c <_ZN11CLaserBoard4BeepEv+0x20>
    4110:	00 c0       	rjmp	.+0      	; 0x4112 <_ZN11CLaserBoard4BeepEv+0x26>
    4112:	00 00       	nop
    4114:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    4116:	81 f7       	brne	.-32     	; 0x40f8 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    4118:	78 94       	sei
    411a:	08 95       	ret

0000411c <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    411c:	f8 94       	cli
    411e:	45 e0       	ldi	r20, 0x05	; 5
    4120:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    4122:	64 e6       	ldi	r22, 0x64	; 100
    4124:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    4126:	e0 e8       	ldi	r30, 0x80	; 128
    4128:	f6 e0       	ldi	r31, 0x06	; 6
    412a:	28 e0       	ldi	r18, 0x08	; 8
    412c:	1c c0       	rjmp	.+56     	; 0x4166 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    412e:	25 83       	std	Z+5, r18	; 0x05
    4130:	af e9       	ldi	r26, 0x9F	; 159
    4132:	bf e0       	ldi	r27, 0x0F	; 15
    4134:	11 97       	sbiw	r26, 0x01	; 1
    4136:	f1 f7       	brne	.-4      	; 0x4134 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    4138:	00 c0       	rjmp	.+0      	; 0x413a <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    413a:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    413c:	26 83       	std	Z+6, r18	; 0x06
    413e:	af e9       	ldi	r26, 0x9F	; 159
    4140:	bf e0       	ldi	r27, 0x0F	; 15
    4142:	11 97       	sbiw	r26, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    4146:	00 c0       	rjmp	.+0      	; 0x4148 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    4148:	00 00       	nop
    414a:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    414c:	81 f7       	brne	.-32     	; 0x412e <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    414e:	bf ef       	ldi	r27, 0xFF	; 255
    4150:	73 ec       	ldi	r23, 0xC3	; 195
    4152:	89 e0       	ldi	r24, 0x09	; 9
    4154:	b1 50       	subi	r27, 0x01	; 1
    4156:	70 40       	sbci	r23, 0x00	; 0
    4158:	80 40       	sbci	r24, 0x00	; 0
    415a:	e1 f7       	brne	.-8      	; 0x4154 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    415c:	00 c0       	rjmp	.+0      	; 0x415e <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    415e:	00 00       	nop
    4160:	41 50       	subi	r20, 0x01	; 1
    4162:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    4164:	19 f0       	breq	.+6      	; 0x416c <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    4166:	86 2f       	mov	r24, r22
    4168:	93 2f       	mov	r25, r19
    416a:	e1 cf       	rjmp	.-62     	; 0x412e <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    416c:	78 94       	sei
    416e:	08 95       	ret

00004170 <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
    4170:	cf 93       	push	r28
    4172:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
    4174:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
    4178:	18 96       	adiw	r26, 0x08	; 8
    417a:	3c 91       	ld	r19, X
    417c:	18 97       	sbiw	r26, 0x08	; 8
    417e:	fc 01       	movw	r30, r24
    4180:	ac 01       	movw	r20, r24
    4182:	48 5f       	subi	r20, 0xF8	; 248
    4184:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
    4186:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
    4188:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
    418a:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
    418c:	89 2f       	mov	r24, r25
    418e:	86 23       	and	r24, r22
    4190:	41 f0       	breq	.+16     	; 0x41a2 <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
    4192:	80 81       	ld	r24, Z
    4194:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
    4196:	81 38       	cpi	r24, 0x81	; 129
    4198:	10 f4       	brcc	.+4      	; 0x419e <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
    419a:	80 83       	st	Z, r24
    419c:	08 c0       	rjmp	.+16     	; 0x41ae <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
    419e:	70 83       	st	Z, r23
    41a0:	06 c0       	rjmp	.+12     	; 0x41ae <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
    41a2:	80 81       	ld	r24, Z
    41a4:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
    41a6:	11 f0       	breq	.+4      	; 0x41ac <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
    41a8:	80 83       	st	Z, r24
    41aa:	01 c0       	rjmp	.+2      	; 0x41ae <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
    41ac:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
    41ae:	81 91       	ld	r24, Z+
    41b0:	38 17       	cp	r19, r24
    41b2:	40 f4       	brcc	.+16     	; 0x41c4 <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
    41b4:	19 96       	adiw	r26, 0x09	; 9
    41b6:	8c 91       	ld	r24, X
    41b8:	19 97       	sbiw	r26, 0x09	; 9
    41ba:	89 2b       	or	r24, r25
    41bc:	19 96       	adiw	r26, 0x09	; 9
    41be:	8c 93       	st	X, r24
    41c0:	19 97       	sbiw	r26, 0x09	; 9
    41c2:	09 c0       	rjmp	.+18     	; 0x41d6 <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
    41c4:	19 96       	adiw	r26, 0x09	; 9
    41c6:	8c 91       	ld	r24, X
    41c8:	19 97       	sbiw	r26, 0x09	; 9
    41ca:	29 2f       	mov	r18, r25
    41cc:	20 95       	com	r18
    41ce:	28 23       	and	r18, r24
    41d0:	19 96       	adiw	r26, 0x09	; 9
    41d2:	2c 93       	st	X, r18
    41d4:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
    41d6:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
    41d8:	e4 17       	cp	r30, r20
    41da:	f5 07       	cpc	r31, r21
    41dc:	b9 f6       	brne	.-82     	; 0x418c <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
    41de:	cf 91       	pop	r28
    41e0:	08 95       	ret

000041e2 <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    41e2:	fc 01       	movw	r30, r24
    41e4:	81 85       	ldd	r24, Z+9	; 0x09
    41e6:	81 70       	andi	r24, 0x01	; 1
    41e8:	08 95       	ret

000041ea <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    41ea:	08 95       	ret

000041ec <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    41ec:	08 95       	ret

000041ee <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    41ee:	e0 e0       	ldi	r30, 0x00	; 0
    41f0:	fa e0       	ldi	r31, 0x0A	; 10
    41f2:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    41f4:	87 e8       	ldi	r24, 0x87	; 135
    41f6:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    41f8:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    41fa:	84 e2       	ldi	r24, 0x24	; 36
    41fc:	94 ef       	ldi	r25, 0xF4	; 244
    41fe:	86 a3       	std	Z+38, r24	; 0x26
    4200:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    4202:	82 e1       	ldi	r24, 0x12	; 18
    4204:	9a e7       	ldi	r25, 0x7A	; 122
    4206:	86 a7       	std	Z+46, r24	; 0x2e
    4208:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    420a:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    420c:	17 82       	std	Z+7, r1	; 0x07
    420e:	08 95       	ret

00004210 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    4210:	e0 e4       	ldi	r30, 0x40	; 64
    4212:	fa e0       	ldi	r31, 0x0A	; 10
    4214:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    4216:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    4218:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    421a:	84 e2       	ldi	r24, 0x24	; 36
    421c:	94 ef       	ldi	r25, 0xF4	; 244
    421e:	86 a3       	std	Z+38, r24	; 0x26
    4220:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4222:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4224:	17 82       	std	Z+7, r1	; 0x07
    4226:	08 95       	ret

00004228 <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    4228:	0f 93       	push	r16
    422a:	1f 93       	push	r17
    422c:	cf 93       	push	r28
    422e:	8a 01       	movw	r16, r20
    4230:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    4232:	9b 01       	movw	r18, r22
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	50 e0       	ldi	r21, 0x00	; 0
    4238:	64 e2       	ldi	r22, 0x24	; 36
    423a:	74 ef       	ldi	r23, 0xF4	; 244
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 1a 24 	call	0x4834	; 0x4834 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    4244:	b8 01       	movw	r22, r16
    4246:	76 95       	lsr	r23
    4248:	67 95       	ror	r22
    424a:	ee e3       	ldi	r30, 0x3E	; 62
    424c:	e0 9f       	mul	r30, r16
    424e:	c0 01       	movw	r24, r0
    4250:	e1 9f       	mul	r30, r17
    4252:	90 0d       	add	r25, r0
    4254:	11 24       	eor	r1, r1
    4256:	86 0f       	add	r24, r22
    4258:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    425a:	cf 5f       	subi	r28, 0xFF	; 255
    425c:	b9 01       	movw	r22, r18
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    4260:	76 95       	lsr	r23
    4262:	67 95       	ror	r22
    4264:	ca 95       	dec	r28
    4266:	e2 f7       	brpl	.-8      	; 0x4260 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    4268:	e0 e0       	ldi	r30, 0x00	; 0
    426a:	fa e0       	ldi	r31, 0x0A	; 10
    426c:	66 a7       	std	Z+46, r22	; 0x2e
    426e:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    4270:	26 a3       	std	Z+38, r18	; 0x26
    4272:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    4274:	a0 e4       	ldi	r26, 0x40	; 64
    4276:	ba e0       	ldi	r27, 0x0A	; 10
    4278:	96 96       	adiw	r26, 0x26	; 38
    427a:	8d 93       	st	X+, r24
    427c:	9c 93       	st	X, r25
    427e:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    4280:	86 e0       	ldi	r24, 0x06	; 6
    4282:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    4284:	87 e0       	ldi	r24, 0x07	; 7
    4286:	8c 93       	st	X, r24
}
    4288:	cf 91       	pop	r28
    428a:	1f 91       	pop	r17
    428c:	0f 91       	pop	r16
    428e:	08 95       	ret

00004290 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    4290:	e0 e4       	ldi	r30, 0x40	; 64
    4292:	fa e0       	ldi	r31, 0x0A	; 10
    4294:	84 85       	ldd	r24, Z+12	; 0x0c
    4296:	80 ff       	sbrs	r24, 0
    4298:	fd cf       	rjmp	.-6      	; 0x4294 <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    429a:	e0 e4       	ldi	r30, 0x40	; 64
    429c:	fa e0       	ldi	r31, 0x0A	; 10
    429e:	84 85       	ldd	r24, Z+12	; 0x0c
    42a0:	81 70       	andi	r24, 0x01	; 1
    42a2:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    42a4:	a0 e0       	ldi	r26, 0x00	; 0
    42a6:	ba e0       	ldi	r27, 0x0A	; 10
    42a8:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    42aa:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    42ac:	10 a2       	std	Z+32, r1	; 0x20
    42ae:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    42b0:	90 96       	adiw	r26, 0x20	; 32
    42b2:	1d 92       	st	X+, r1
    42b4:	1c 92       	st	X, r1
    42b6:	91 97       	sbiw	r26, 0x21	; 33
    42b8:	2f ef       	ldi	r18, 0xFF	; 255
    42ba:	83 ef       	ldi	r24, 0xF3	; 243
    42bc:	91 e0       	ldi	r25, 0x01	; 1
    42be:	21 50       	subi	r18, 0x01	; 1
    42c0:	80 40       	sbci	r24, 0x00	; 0
    42c2:	90 40       	sbci	r25, 0x00	; 0
    42c4:	e1 f7       	brne	.-8      	; 0x42be <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    42c6:	00 c0       	rjmp	.+0      	; 0x42c8 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    42c8:	00 00       	nop
    42ca:	08 95       	ret

000042cc <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    42d2:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    42d6:	ce 01       	movw	r24, r28
    42d8:	0e 94 08 21 	call	0x4210	; 0x4210 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	08 95       	ret

000042e2 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    42e2:	fc 01       	movw	r30, r24
    42e4:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    42e6:	e0 e0       	ldi	r30, 0x00	; 0
    42e8:	f8 e0       	ldi	r31, 0x08	; 8
    42ea:	80 81       	ld	r24, Z
    42ec:	80 7f       	andi	r24, 0xF0	; 240
    42ee:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    42f0:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    42f2:	10 a2       	std	Z+32, r1	; 0x20
    42f4:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    42f6:	10 a6       	std	Z+40, r1	; 0x28
    42f8:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    42fa:	12 a6       	std	Z+42, r1	; 0x2a
    42fc:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    42fe:	14 a6       	std	Z+44, r1	; 0x2c
    4300:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    4302:	16 a6       	std	Z+46, r1	; 0x2e
    4304:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    4306:	16 a2       	std	Z+38, r1	; 0x26
    4308:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    430a:	81 81       	ldd	r24, Z+1	; 0x01
    430c:	88 7f       	andi	r24, 0xF8	; 248
    430e:	68 2b       	or	r22, r24
    4310:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    4312:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4314:	17 82       	std	Z+7, r1	; 0x07
    4316:	08 95       	ret

00004318 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    4318:	e0 e0       	ldi	r30, 0x00	; 0
    431a:	f8 e0       	ldi	r31, 0x08	; 8
    431c:	66 a3       	std	Z+38, r22	; 0x26
    431e:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    4320:	20 81       	ld	r18, Z
    4322:	20 7f       	andi	r18, 0xF0	; 240
    4324:	dc 01       	movw	r26, r24
    4326:	12 96       	adiw	r26, 0x02	; 2
    4328:	9c 91       	ld	r25, X
    432a:	82 2f       	mov	r24, r18
    432c:	89 2b       	or	r24, r25
    432e:	80 83       	st	Z, r24
    4330:	08 95       	ret

00004332 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4332:	e0 e0       	ldi	r30, 0x00	; 0
    4334:	f8 e0       	ldi	r31, 0x08	; 8
    4336:	80 81       	ld	r24, Z
    4338:	80 7f       	andi	r24, 0xF0	; 240
    433a:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    433c:	10 a2       	std	Z+32, r1	; 0x20
    433e:	11 a2       	std	Z+33, r1	; 0x21
    4340:	08 95       	ret

00004342 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    4342:	e0 e0       	ldi	r30, 0x00	; 0
    4344:	f8 e0       	ldi	r31, 0x08	; 8
    4346:	81 81       	ldd	r24, Z+1	; 0x01
    4348:	8f 70       	andi	r24, 0x0F	; 15
    434a:	68 2b       	or	r22, r24
    434c:	61 83       	std	Z+1, r22	; 0x01
    434e:	08 95       	ret

00004350 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    4350:	e0 e0       	ldi	r30, 0x00	; 0
    4352:	f8 e0       	ldi	r31, 0x08	; 8
    4354:	81 81       	ldd	r24, Z+1	; 0x01
    4356:	60 95       	com	r22
    4358:	68 23       	and	r22, r24
    435a:	61 83       	std	Z+1, r22	; 0x01
    435c:	08 95       	ret

0000435e <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    435e:	60 93 26 08 	sts	0x0826, r22
    4362:	70 93 27 08 	sts	0x0827, r23
    4366:	08 95       	ret

00004368 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    4368:	60 93 28 08 	sts	0x0828, r22
    436c:	70 93 29 08 	sts	0x0829, r23
    4370:	08 95       	ret

00004372 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    4372:	60 93 2a 08 	sts	0x082A, r22
    4376:	70 93 2b 08 	sts	0x082B, r23
    437a:	08 95       	ret

0000437c <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    437c:	60 93 2c 08 	sts	0x082C, r22
    4380:	70 93 2d 08 	sts	0x082D, r23
    4384:	08 95       	ret

00004386 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    4386:	60 93 2e 08 	sts	0x082E, r22
    438a:	70 93 2f 08 	sts	0x082F, r23
    438e:	08 95       	ret

00004390 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    4390:	61 15       	cp	r22, r1
    4392:	71 05       	cpc	r23, r1
    4394:	31 f0       	breq	.+12     	; 0x43a2 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    4396:	e0 e0       	ldi	r30, 0x00	; 0
    4398:	f8 e0       	ldi	r31, 0x08	; 8
    439a:	86 81       	ldd	r24, Z+6	; 0x06
    439c:	83 70       	andi	r24, 0x03	; 3
    439e:	28 2b       	or	r18, r24
    43a0:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    43a2:	60 93 91 21 	sts	0x2191, r22
    43a6:	70 93 92 21 	sts	0x2192, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    43aa:	40 93 87 22 	sts	0x2287, r20
    43ae:	50 93 88 22 	sts	0x2288, r21
    43b2:	08 95       	ret

000043b4 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    43b4:	61 15       	cp	r22, r1
    43b6:	71 05       	cpc	r23, r1
    43b8:	31 f0       	breq	.+12     	; 0x43c6 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    43ba:	e0 e0       	ldi	r30, 0x00	; 0
    43bc:	f8 e0       	ldi	r31, 0x08	; 8
    43be:	86 81       	ldd	r24, Z+6	; 0x06
    43c0:	8c 70       	andi	r24, 0x0C	; 12
    43c2:	28 2b       	or	r18, r24
    43c4:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    43c6:	60 93 93 21 	sts	0x2193, r22
    43ca:	70 93 94 21 	sts	0x2194, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    43ce:	40 93 89 22 	sts	0x2289, r20
    43d2:	50 93 8a 22 	sts	0x228A, r21
    43d6:	08 95       	ret

000043d8 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    43d8:	61 15       	cp	r22, r1
    43da:	71 05       	cpc	r23, r1
    43dc:	31 f0       	breq	.+12     	; 0x43ea <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    43de:	e0 e0       	ldi	r30, 0x00	; 0
    43e0:	f8 e0       	ldi	r31, 0x08	; 8
    43e2:	87 81       	ldd	r24, Z+7	; 0x07
    43e4:	83 70       	andi	r24, 0x03	; 3
    43e6:	28 2b       	or	r18, r24
    43e8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    43ea:	60 93 95 21 	sts	0x2195, r22
    43ee:	70 93 96 21 	sts	0x2196, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    43f2:	40 93 8b 22 	sts	0x228B, r20
    43f6:	50 93 8c 22 	sts	0x228C, r21
    43fa:	08 95       	ret

000043fc <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    43fc:	61 15       	cp	r22, r1
    43fe:	71 05       	cpc	r23, r1
    4400:	31 f0       	breq	.+12     	; 0x440e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    4402:	e0 e0       	ldi	r30, 0x00	; 0
    4404:	f8 e0       	ldi	r31, 0x08	; 8
    4406:	87 81       	ldd	r24, Z+7	; 0x07
    4408:	8c 70       	andi	r24, 0x0C	; 12
    440a:	28 2b       	or	r18, r24
    440c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    440e:	60 93 97 21 	sts	0x2197, r22
    4412:	70 93 98 21 	sts	0x2198, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    4416:	40 93 8d 22 	sts	0x228D, r20
    441a:	50 93 8e 22 	sts	0x228E, r21
    441e:	08 95       	ret

00004420 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    4420:	61 15       	cp	r22, r1
    4422:	71 05       	cpc	r23, r1
    4424:	31 f0       	breq	.+12     	; 0x4432 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    4426:	e0 e0       	ldi	r30, 0x00	; 0
    4428:	f8 e0       	ldi	r31, 0x08	; 8
    442a:	87 81       	ldd	r24, Z+7	; 0x07
    442c:	80 73       	andi	r24, 0x30	; 48
    442e:	28 2b       	or	r18, r24
    4430:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    4432:	60 93 99 21 	sts	0x2199, r22
    4436:	70 93 9a 21 	sts	0x219A, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    443a:	40 93 8f 22 	sts	0x228F, r20
    443e:	50 93 90 22 	sts	0x2290, r21
    4442:	08 95       	ret

00004444 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    4444:	61 15       	cp	r22, r1
    4446:	71 05       	cpc	r23, r1
    4448:	31 f0       	breq	.+12     	; 0x4456 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    444a:	e0 e0       	ldi	r30, 0x00	; 0
    444c:	f8 e0       	ldi	r31, 0x08	; 8
    444e:	87 81       	ldd	r24, Z+7	; 0x07
    4450:	80 7c       	andi	r24, 0xC0	; 192
    4452:	28 2b       	or	r18, r24
    4454:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    4456:	60 93 9b 21 	sts	0x219B, r22
    445a:	70 93 9c 21 	sts	0x219C, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    445e:	40 93 91 22 	sts	0x2291, r20
    4462:	50 93 92 22 	sts	0x2292, r21
    4466:	08 95       	ret

00004468 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    4468:	cf 93       	push	r28
    446a:	df 93       	push	r29
    446c:	ec 01       	movw	r28, r24
    446e:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN6CTimerC1Ev>
    4472:	8a ec       	ldi	r24, 0xCA	; 202
    4474:	90 e2       	ldi	r25, 0x20	; 32
    4476:	88 83       	st	Y, r24
    4478:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	08 95       	ret

00004480 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    4480:	2a ec       	ldi	r18, 0xCA	; 202
    4482:	30 e2       	ldi	r19, 0x20	; 32
    4484:	fc 01       	movw	r30, r24
    4486:	20 83       	st	Z, r18
    4488:	31 83       	std	Z+1, r19	; 0x01
    448a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN6CTimerD1Ev>
    448e:	08 95       	ret

00004490 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    4490:	fc 01       	movw	r30, r24
    4492:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4494:	e0 e0       	ldi	r30, 0x00	; 0
    4496:	f9 e0       	ldi	r31, 0x09	; 9
    4498:	80 81       	ld	r24, Z
    449a:	80 7f       	andi	r24, 0xF0	; 240
    449c:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    449e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    44a0:	10 a2       	std	Z+32, r1	; 0x20
    44a2:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    44a4:	10 a6       	std	Z+40, r1	; 0x28
    44a6:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    44a8:	12 a6       	std	Z+42, r1	; 0x2a
    44aa:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    44ac:	14 a6       	std	Z+44, r1	; 0x2c
    44ae:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    44b0:	16 a6       	std	Z+46, r1	; 0x2e
    44b2:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    44b4:	16 a2       	std	Z+38, r1	; 0x26
    44b6:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    44b8:	81 81       	ldd	r24, Z+1	; 0x01
    44ba:	88 7f       	andi	r24, 0xF8	; 248
    44bc:	68 2b       	or	r22, r24
    44be:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    44c0:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    44c2:	17 82       	std	Z+7, r1	; 0x07
    44c4:	08 95       	ret

000044c6 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    44c6:	e0 e0       	ldi	r30, 0x00	; 0
    44c8:	f9 e0       	ldi	r31, 0x09	; 9
    44ca:	66 a3       	std	Z+38, r22	; 0x26
    44cc:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    44ce:	20 81       	ld	r18, Z
    44d0:	20 7f       	andi	r18, 0xF0	; 240
    44d2:	dc 01       	movw	r26, r24
    44d4:	12 96       	adiw	r26, 0x02	; 2
    44d6:	9c 91       	ld	r25, X
    44d8:	82 2f       	mov	r24, r18
    44da:	89 2b       	or	r24, r25
    44dc:	80 83       	st	Z, r24
    44de:	08 95       	ret

000044e0 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    44e0:	e0 e0       	ldi	r30, 0x00	; 0
    44e2:	f9 e0       	ldi	r31, 0x09	; 9
    44e4:	80 81       	ld	r24, Z
    44e6:	80 7f       	andi	r24, 0xF0	; 240
    44e8:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    44ea:	10 a2       	std	Z+32, r1	; 0x20
    44ec:	11 a2       	std	Z+33, r1	; 0x21
    44ee:	08 95       	ret

000044f0 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    44f0:	e0 e0       	ldi	r30, 0x00	; 0
    44f2:	f9 e0       	ldi	r31, 0x09	; 9
    44f4:	81 81       	ldd	r24, Z+1	; 0x01
    44f6:	8f 70       	andi	r24, 0x0F	; 15
    44f8:	68 2b       	or	r22, r24
    44fa:	61 83       	std	Z+1, r22	; 0x01
    44fc:	08 95       	ret

000044fe <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    44fe:	e0 e0       	ldi	r30, 0x00	; 0
    4500:	f9 e0       	ldi	r31, 0x09	; 9
    4502:	81 81       	ldd	r24, Z+1	; 0x01
    4504:	60 95       	com	r22
    4506:	68 23       	and	r22, r24
    4508:	61 83       	std	Z+1, r22	; 0x01
    450a:	08 95       	ret

0000450c <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    450c:	60 93 26 09 	sts	0x0926, r22
    4510:	70 93 27 09 	sts	0x0927, r23
    4514:	08 95       	ret

00004516 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    4516:	60 93 28 09 	sts	0x0928, r22
    451a:	70 93 29 09 	sts	0x0929, r23
    451e:	08 95       	ret

00004520 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    4520:	60 93 2a 09 	sts	0x092A, r22
    4524:	70 93 2b 09 	sts	0x092B, r23
    4528:	08 95       	ret

0000452a <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    452a:	60 93 2c 09 	sts	0x092C, r22
    452e:	70 93 2d 09 	sts	0x092D, r23
    4532:	08 95       	ret

00004534 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    4534:	60 93 2e 09 	sts	0x092E, r22
    4538:	70 93 2f 09 	sts	0x092F, r23
    453c:	08 95       	ret

0000453e <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    453e:	61 15       	cp	r22, r1
    4540:	71 05       	cpc	r23, r1
    4542:	31 f0       	breq	.+12     	; 0x4550 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    4544:	e0 e0       	ldi	r30, 0x00	; 0
    4546:	f9 e0       	ldi	r31, 0x09	; 9
    4548:	86 81       	ldd	r24, Z+6	; 0x06
    454a:	83 70       	andi	r24, 0x03	; 3
    454c:	28 2b       	or	r18, r24
    454e:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    4550:	60 93 0f 22 	sts	0x220F, r22
    4554:	70 93 10 22 	sts	0x2210, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    4558:	40 93 05 23 	sts	0x2305, r20
    455c:	50 93 06 23 	sts	0x2306, r21
    4560:	08 95       	ret

00004562 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    4562:	61 15       	cp	r22, r1
    4564:	71 05       	cpc	r23, r1
    4566:	31 f0       	breq	.+12     	; 0x4574 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    4568:	e0 e0       	ldi	r30, 0x00	; 0
    456a:	f9 e0       	ldi	r31, 0x09	; 9
    456c:	86 81       	ldd	r24, Z+6	; 0x06
    456e:	8c 70       	andi	r24, 0x0C	; 12
    4570:	28 2b       	or	r18, r24
    4572:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    4574:	60 93 11 22 	sts	0x2211, r22
    4578:	70 93 12 22 	sts	0x2212, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    457c:	40 93 07 23 	sts	0x2307, r20
    4580:	50 93 08 23 	sts	0x2308, r21
    4584:	08 95       	ret

00004586 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    4586:	61 15       	cp	r22, r1
    4588:	71 05       	cpc	r23, r1
    458a:	31 f0       	breq	.+12     	; 0x4598 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    458c:	e0 e0       	ldi	r30, 0x00	; 0
    458e:	f9 e0       	ldi	r31, 0x09	; 9
    4590:	87 81       	ldd	r24, Z+7	; 0x07
    4592:	83 70       	andi	r24, 0x03	; 3
    4594:	28 2b       	or	r18, r24
    4596:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    4598:	60 93 13 22 	sts	0x2213, r22
    459c:	70 93 14 22 	sts	0x2214, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    45a0:	40 93 09 23 	sts	0x2309, r20
    45a4:	50 93 0a 23 	sts	0x230A, r21
    45a8:	08 95       	ret

000045aa <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    45aa:	61 15       	cp	r22, r1
    45ac:	71 05       	cpc	r23, r1
    45ae:	31 f0       	breq	.+12     	; 0x45bc <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    45b0:	e0 e0       	ldi	r30, 0x00	; 0
    45b2:	f9 e0       	ldi	r31, 0x09	; 9
    45b4:	87 81       	ldd	r24, Z+7	; 0x07
    45b6:	8c 70       	andi	r24, 0x0C	; 12
    45b8:	28 2b       	or	r18, r24
    45ba:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    45bc:	60 93 15 22 	sts	0x2215, r22
    45c0:	70 93 16 22 	sts	0x2216, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    45c4:	40 93 0b 23 	sts	0x230B, r20
    45c8:	50 93 0c 23 	sts	0x230C, r21
    45cc:	08 95       	ret

000045ce <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    45ce:	61 15       	cp	r22, r1
    45d0:	71 05       	cpc	r23, r1
    45d2:	31 f0       	breq	.+12     	; 0x45e0 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    45d4:	e0 e0       	ldi	r30, 0x00	; 0
    45d6:	f9 e0       	ldi	r31, 0x09	; 9
    45d8:	87 81       	ldd	r24, Z+7	; 0x07
    45da:	80 73       	andi	r24, 0x30	; 48
    45dc:	28 2b       	or	r18, r24
    45de:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    45e0:	60 93 17 22 	sts	0x2217, r22
    45e4:	70 93 18 22 	sts	0x2218, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    45e8:	40 93 0d 23 	sts	0x230D, r20
    45ec:	50 93 0e 23 	sts	0x230E, r21
    45f0:	08 95       	ret

000045f2 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    45f2:	61 15       	cp	r22, r1
    45f4:	71 05       	cpc	r23, r1
    45f6:	31 f0       	breq	.+12     	; 0x4604 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    45f8:	e0 e0       	ldi	r30, 0x00	; 0
    45fa:	f9 e0       	ldi	r31, 0x09	; 9
    45fc:	87 81       	ldd	r24, Z+7	; 0x07
    45fe:	80 7c       	andi	r24, 0xC0	; 192
    4600:	28 2b       	or	r18, r24
    4602:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    4604:	60 93 19 22 	sts	0x2219, r22
    4608:	70 93 1a 22 	sts	0x221A, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    460c:	40 93 0f 23 	sts	0x230F, r20
    4610:	50 93 10 23 	sts	0x2310, r21
    4614:	08 95       	ret

00004616 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	ec 01       	movw	r28, r24
    461c:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN6CTimerC1Ev>
    4620:	8e ee       	ldi	r24, 0xEE	; 238
    4622:	90 e2       	ldi	r25, 0x20	; 32
    4624:	88 83       	st	Y, r24
    4626:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	08 95       	ret

0000462e <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    462e:	2e ee       	ldi	r18, 0xEE	; 238
    4630:	30 e2       	ldi	r19, 0x20	; 32
    4632:	fc 01       	movw	r30, r24
    4634:	20 83       	st	Z, r18
    4636:	31 83       	std	Z+1, r19	; 0x01
    4638:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN6CTimerD1Ev>
    463c:	08 95       	ret

0000463e <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    463e:	fc 01       	movw	r30, r24
    4640:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4642:	e0 e0       	ldi	r30, 0x00	; 0
    4644:	fb e0       	ldi	r31, 0x0B	; 11
    4646:	80 81       	ld	r24, Z
    4648:	80 7f       	andi	r24, 0xF0	; 240
    464a:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    464c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    464e:	10 a2       	std	Z+32, r1	; 0x20
    4650:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    4652:	10 a6       	std	Z+40, r1	; 0x28
    4654:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    4656:	12 a6       	std	Z+42, r1	; 0x2a
    4658:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    465a:	14 a6       	std	Z+44, r1	; 0x2c
    465c:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    465e:	16 a6       	std	Z+46, r1	; 0x2e
    4660:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    4662:	16 a2       	std	Z+38, r1	; 0x26
    4664:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    4666:	81 81       	ldd	r24, Z+1	; 0x01
    4668:	88 7f       	andi	r24, 0xF8	; 248
    466a:	68 2b       	or	r22, r24
    466c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    466e:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    4670:	17 82       	std	Z+7, r1	; 0x07
    4672:	08 95       	ret

00004674 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    4674:	e0 e0       	ldi	r30, 0x00	; 0
    4676:	fb e0       	ldi	r31, 0x0B	; 11
    4678:	66 a3       	std	Z+38, r22	; 0x26
    467a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    467c:	20 81       	ld	r18, Z
    467e:	20 7f       	andi	r18, 0xF0	; 240
    4680:	dc 01       	movw	r26, r24
    4682:	12 96       	adiw	r26, 0x02	; 2
    4684:	9c 91       	ld	r25, X
    4686:	82 2f       	mov	r24, r18
    4688:	89 2b       	or	r24, r25
    468a:	80 83       	st	Z, r24
    468c:	08 95       	ret

0000468e <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    468e:	e0 e0       	ldi	r30, 0x00	; 0
    4690:	fb e0       	ldi	r31, 0x0B	; 11
    4692:	80 81       	ld	r24, Z
    4694:	80 7f       	andi	r24, 0xF0	; 240
    4696:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    4698:	10 a2       	std	Z+32, r1	; 0x20
    469a:	11 a2       	std	Z+33, r1	; 0x21
    469c:	08 95       	ret

0000469e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    469e:	e0 e0       	ldi	r30, 0x00	; 0
    46a0:	fb e0       	ldi	r31, 0x0B	; 11
    46a2:	81 81       	ldd	r24, Z+1	; 0x01
    46a4:	68 2b       	or	r22, r24
    46a6:	61 83       	std	Z+1, r22	; 0x01
    46a8:	08 95       	ret

000046aa <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    46aa:	e0 e0       	ldi	r30, 0x00	; 0
    46ac:	fb e0       	ldi	r31, 0x0B	; 11
    46ae:	81 81       	ldd	r24, Z+1	; 0x01
    46b0:	60 95       	com	r22
    46b2:	68 23       	and	r22, r24
    46b4:	61 83       	std	Z+1, r22	; 0x01
    46b6:	08 95       	ret

000046b8 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    46b8:	e0 e0       	ldi	r30, 0x00	; 0
    46ba:	fb e0       	ldi	r31, 0x0B	; 11
    46bc:	82 81       	ldd	r24, Z+2	; 0x02
    46be:	62 95       	swap	r22
    46c0:	6f 70       	andi	r22, 0x0F	; 15
    46c2:	68 2b       	or	r22, r24
    46c4:	62 83       	std	Z+2, r22	; 0x02
    46c6:	08 95       	ret

000046c8 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    46c8:	e0 e0       	ldi	r30, 0x00	; 0
    46ca:	fb e0       	ldi	r31, 0x0B	; 11
    46cc:	82 81       	ldd	r24, Z+2	; 0x02
    46ce:	62 95       	swap	r22
    46d0:	6f 70       	andi	r22, 0x0F	; 15
    46d2:	60 95       	com	r22
    46d4:	68 23       	and	r22, r24
    46d6:	62 83       	std	Z+2, r22	; 0x02
    46d8:	08 95       	ret

000046da <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    46da:	60 93 26 0b 	sts	0x0B26, r22
    46de:	70 93 27 0b 	sts	0x0B27, r23
    46e2:	08 95       	ret

000046e4 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    46e4:	60 93 28 0b 	sts	0x0B28, r22
    46e8:	70 93 29 0b 	sts	0x0B29, r23
    46ec:	08 95       	ret

000046ee <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    46ee:	60 93 2a 0b 	sts	0x0B2A, r22
    46f2:	70 93 2b 0b 	sts	0x0B2B, r23
    46f6:	08 95       	ret

000046f8 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    46f8:	60 93 2c 0b 	sts	0x0B2C, r22
    46fc:	70 93 2d 0b 	sts	0x0B2D, r23
    4700:	08 95       	ret

00004702 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    4702:	60 93 2e 0b 	sts	0x0B2E, r22
    4706:	70 93 2f 0b 	sts	0x0B2F, r23
    470a:	08 95       	ret

0000470c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    470c:	61 15       	cp	r22, r1
    470e:	71 05       	cpc	r23, r1
    4710:	31 f0       	breq	.+12     	; 0x471e <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    4712:	e0 e0       	ldi	r30, 0x00	; 0
    4714:	fb e0       	ldi	r31, 0x0B	; 11
    4716:	86 81       	ldd	r24, Z+6	; 0x06
    4718:	83 70       	andi	r24, 0x03	; 3
    471a:	28 2b       	or	r18, r24
    471c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    471e:	60 93 4d 22 	sts	0x224D, r22
    4722:	70 93 4e 22 	sts	0x224E, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    4726:	40 93 43 23 	sts	0x2343, r20
    472a:	50 93 44 23 	sts	0x2344, r21
    472e:	08 95       	ret

00004730 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    4730:	61 15       	cp	r22, r1
    4732:	71 05       	cpc	r23, r1
    4734:	31 f0       	breq	.+12     	; 0x4742 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    4736:	e0 e0       	ldi	r30, 0x00	; 0
    4738:	fb e0       	ldi	r31, 0x0B	; 11
    473a:	86 81       	ldd	r24, Z+6	; 0x06
    473c:	8c 70       	andi	r24, 0x0C	; 12
    473e:	28 2b       	or	r18, r24
    4740:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    4742:	60 93 4f 22 	sts	0x224F, r22
    4746:	70 93 50 22 	sts	0x2250, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    474a:	40 93 45 23 	sts	0x2345, r20
    474e:	50 93 46 23 	sts	0x2346, r21
    4752:	08 95       	ret

00004754 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    4754:	61 15       	cp	r22, r1
    4756:	71 05       	cpc	r23, r1
    4758:	31 f0       	breq	.+12     	; 0x4766 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    475a:	e0 e0       	ldi	r30, 0x00	; 0
    475c:	fb e0       	ldi	r31, 0x0B	; 11
    475e:	87 81       	ldd	r24, Z+7	; 0x07
    4760:	83 70       	andi	r24, 0x03	; 3
    4762:	28 2b       	or	r18, r24
    4764:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    4766:	60 93 51 22 	sts	0x2251, r22
    476a:	70 93 52 22 	sts	0x2252, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    476e:	40 93 47 23 	sts	0x2347, r20
    4772:	50 93 48 23 	sts	0x2348, r21
    4776:	08 95       	ret

00004778 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    4778:	61 15       	cp	r22, r1
    477a:	71 05       	cpc	r23, r1
    477c:	31 f0       	breq	.+12     	; 0x478a <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    477e:	e0 e0       	ldi	r30, 0x00	; 0
    4780:	fb e0       	ldi	r31, 0x0B	; 11
    4782:	87 81       	ldd	r24, Z+7	; 0x07
    4784:	8c 70       	andi	r24, 0x0C	; 12
    4786:	28 2b       	or	r18, r24
    4788:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    478a:	60 93 53 22 	sts	0x2253, r22
    478e:	70 93 54 22 	sts	0x2254, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    4792:	40 93 49 23 	sts	0x2349, r20
    4796:	50 93 4a 23 	sts	0x234A, r21
    479a:	08 95       	ret

0000479c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    479c:	61 15       	cp	r22, r1
    479e:	71 05       	cpc	r23, r1
    47a0:	31 f0       	breq	.+12     	; 0x47ae <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    47a2:	e0 e0       	ldi	r30, 0x00	; 0
    47a4:	fb e0       	ldi	r31, 0x0B	; 11
    47a6:	87 81       	ldd	r24, Z+7	; 0x07
    47a8:	80 73       	andi	r24, 0x30	; 48
    47aa:	28 2b       	or	r18, r24
    47ac:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    47ae:	60 93 55 22 	sts	0x2255, r22
    47b2:	70 93 56 22 	sts	0x2256, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    47b6:	40 93 4b 23 	sts	0x234B, r20
    47ba:	50 93 4c 23 	sts	0x234C, r21
    47be:	08 95       	ret

000047c0 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    47c0:	61 15       	cp	r22, r1
    47c2:	71 05       	cpc	r23, r1
    47c4:	31 f0       	breq	.+12     	; 0x47d2 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    47c6:	e0 e0       	ldi	r30, 0x00	; 0
    47c8:	fb e0       	ldi	r31, 0x0B	; 11
    47ca:	87 81       	ldd	r24, Z+7	; 0x07
    47cc:	80 7c       	andi	r24, 0xC0	; 192
    47ce:	28 2b       	or	r18, r24
    47d0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    47d2:	60 93 57 22 	sts	0x2257, r22
    47d6:	70 93 58 22 	sts	0x2258, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    47da:	40 93 4d 23 	sts	0x234D, r20
    47de:	50 93 4e 23 	sts	0x234E, r21
    47e2:	08 95       	ret

000047e4 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	ec 01       	movw	r28, r24
    47ea:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN6CTimerC1Ev>
    47ee:	82 e1       	ldi	r24, 0x12	; 18
    47f0:	91 e2       	ldi	r25, 0x21	; 33
    47f2:	88 83       	st	Y, r24
    47f4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	08 95       	ret

000047fc <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    47fc:	22 e1       	ldi	r18, 0x12	; 18
    47fe:	31 e2       	ldi	r19, 0x21	; 33
    4800:	fc 01       	movw	r30, r24
    4802:	20 83       	st	Z, r18
    4804:	31 83       	std	Z+1, r19	; 0x01
    4806:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN6CTimerD1Ev>
    480a:	08 95       	ret

0000480c <__udivmodhi4>:
    480c:	aa 1b       	sub	r26, r26
    480e:	bb 1b       	sub	r27, r27
    4810:	51 e1       	ldi	r21, 0x11	; 17
    4812:	07 c0       	rjmp	.+14     	; 0x4822 <__udivmodhi4_ep>

00004814 <__udivmodhi4_loop>:
    4814:	aa 1f       	adc	r26, r26
    4816:	bb 1f       	adc	r27, r27
    4818:	a6 17       	cp	r26, r22
    481a:	b7 07       	cpc	r27, r23
    481c:	10 f0       	brcs	.+4      	; 0x4822 <__udivmodhi4_ep>
    481e:	a6 1b       	sub	r26, r22
    4820:	b7 0b       	sbc	r27, r23

00004822 <__udivmodhi4_ep>:
    4822:	88 1f       	adc	r24, r24
    4824:	99 1f       	adc	r25, r25
    4826:	5a 95       	dec	r21
    4828:	a9 f7       	brne	.-22     	; 0x4814 <__udivmodhi4_loop>
    482a:	80 95       	com	r24
    482c:	90 95       	com	r25
    482e:	bc 01       	movw	r22, r24
    4830:	cd 01       	movw	r24, r26
    4832:	08 95       	ret

00004834 <__divmodsi4>:
    4834:	05 2e       	mov	r0, r21
    4836:	97 fb       	bst	r25, 7
    4838:	1e f4       	brtc	.+6      	; 0x4840 <__divmodsi4+0xc>
    483a:	00 94       	com	r0
    483c:	0e 94 31 24 	call	0x4862	; 0x4862 <__negsi2>
    4840:	57 fd       	sbrc	r21, 7
    4842:	07 d0       	rcall	.+14     	; 0x4852 <__divmodsi4_neg2>
    4844:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    4848:	07 fc       	sbrc	r0, 7
    484a:	03 d0       	rcall	.+6      	; 0x4852 <__divmodsi4_neg2>
    484c:	4e f4       	brtc	.+18     	; 0x4860 <__divmodsi4_exit>
    484e:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__negsi2>

00004852 <__divmodsi4_neg2>:
    4852:	50 95       	com	r21
    4854:	40 95       	com	r20
    4856:	30 95       	com	r19
    4858:	21 95       	neg	r18
    485a:	3f 4f       	sbci	r19, 0xFF	; 255
    485c:	4f 4f       	sbci	r20, 0xFF	; 255
    485e:	5f 4f       	sbci	r21, 0xFF	; 255

00004860 <__divmodsi4_exit>:
    4860:	08 95       	ret

00004862 <__negsi2>:
    4862:	90 95       	com	r25
    4864:	80 95       	com	r24
    4866:	70 95       	com	r23
    4868:	61 95       	neg	r22
    486a:	7f 4f       	sbci	r23, 0xFF	; 255
    486c:	8f 4f       	sbci	r24, 0xFF	; 255
    486e:	9f 4f       	sbci	r25, 0xFF	; 255
    4870:	08 95       	ret

00004872 <__tablejump2__>:
    4872:	ee 0f       	add	r30, r30
    4874:	ff 1f       	adc	r31, r31
    4876:	88 1f       	adc	r24, r24
    4878:	8b bf       	out	0x3b, r24	; 59
    487a:	07 90       	elpm	r0, Z+
    487c:	f6 91       	elpm	r31, Z
    487e:	e0 2d       	mov	r30, r0
    4880:	19 94       	eijmp

00004882 <__umulhisi3>:
    4882:	a2 9f       	mul	r26, r18
    4884:	b0 01       	movw	r22, r0
    4886:	b3 9f       	mul	r27, r19
    4888:	c0 01       	movw	r24, r0
    488a:	a3 9f       	mul	r26, r19
    488c:	70 0d       	add	r23, r0
    488e:	81 1d       	adc	r24, r1
    4890:	11 24       	eor	r1, r1
    4892:	91 1d       	adc	r25, r1
    4894:	b2 9f       	mul	r27, r18
    4896:	70 0d       	add	r23, r0
    4898:	81 1d       	adc	r24, r1
    489a:	11 24       	eor	r1, r1
    489c:	91 1d       	adc	r25, r1
    489e:	08 95       	ret

000048a0 <__udivmodsi4>:
    48a0:	a1 e2       	ldi	r26, 0x21	; 33
    48a2:	1a 2e       	mov	r1, r26
    48a4:	aa 1b       	sub	r26, r26
    48a6:	bb 1b       	sub	r27, r27
    48a8:	fd 01       	movw	r30, r26
    48aa:	0d c0       	rjmp	.+26     	; 0x48c6 <__udivmodsi4_ep>

000048ac <__udivmodsi4_loop>:
    48ac:	aa 1f       	adc	r26, r26
    48ae:	bb 1f       	adc	r27, r27
    48b0:	ee 1f       	adc	r30, r30
    48b2:	ff 1f       	adc	r31, r31
    48b4:	a2 17       	cp	r26, r18
    48b6:	b3 07       	cpc	r27, r19
    48b8:	e4 07       	cpc	r30, r20
    48ba:	f5 07       	cpc	r31, r21
    48bc:	20 f0       	brcs	.+8      	; 0x48c6 <__udivmodsi4_ep>
    48be:	a2 1b       	sub	r26, r18
    48c0:	b3 0b       	sbc	r27, r19
    48c2:	e4 0b       	sbc	r30, r20
    48c4:	f5 0b       	sbc	r31, r21

000048c6 <__udivmodsi4_ep>:
    48c6:	66 1f       	adc	r22, r22
    48c8:	77 1f       	adc	r23, r23
    48ca:	88 1f       	adc	r24, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	1a 94       	dec	r1
    48d0:	69 f7       	brne	.-38     	; 0x48ac <__udivmodsi4_loop>
    48d2:	60 95       	com	r22
    48d4:	70 95       	com	r23
    48d6:	80 95       	com	r24
    48d8:	90 95       	com	r25
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	bd 01       	movw	r22, r26
    48e0:	cf 01       	movw	r24, r30
    48e2:	08 95       	ret

000048e4 <malloc>:
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
    48e8:	82 30       	cpi	r24, 0x02	; 2
    48ea:	91 05       	cpc	r25, r1
    48ec:	10 f4       	brcc	.+4      	; 0x48f2 <malloc+0xe>
    48ee:	82 e0       	ldi	r24, 0x02	; 2
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	e0 91 b4 23 	lds	r30, 0x23B4
    48f6:	f0 91 b5 23 	lds	r31, 0x23B5
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	c0 e0       	ldi	r28, 0x00	; 0
    4900:	d0 e0       	ldi	r29, 0x00	; 0
    4902:	30 97       	sbiw	r30, 0x00	; 0
    4904:	11 f1       	breq	.+68     	; 0x494a <malloc+0x66>
    4906:	40 81       	ld	r20, Z
    4908:	51 81       	ldd	r21, Z+1	; 0x01
    490a:	48 17       	cp	r20, r24
    490c:	59 07       	cpc	r21, r25
    490e:	c0 f0       	brcs	.+48     	; 0x4940 <malloc+0x5c>
    4910:	48 17       	cp	r20, r24
    4912:	59 07       	cpc	r21, r25
    4914:	61 f4       	brne	.+24     	; 0x492e <malloc+0x4a>
    4916:	82 81       	ldd	r24, Z+2	; 0x02
    4918:	93 81       	ldd	r25, Z+3	; 0x03
    491a:	20 97       	sbiw	r28, 0x00	; 0
    491c:	19 f0       	breq	.+6      	; 0x4924 <malloc+0x40>
    491e:	8a 83       	std	Y+2, r24	; 0x02
    4920:	9b 83       	std	Y+3, r25	; 0x03
    4922:	2b c0       	rjmp	.+86     	; 0x497a <malloc+0x96>
    4924:	80 93 b4 23 	sts	0x23B4, r24
    4928:	90 93 b5 23 	sts	0x23B5, r25
    492c:	26 c0       	rjmp	.+76     	; 0x497a <malloc+0x96>
    492e:	21 15       	cp	r18, r1
    4930:	31 05       	cpc	r19, r1
    4932:	19 f0       	breq	.+6      	; 0x493a <malloc+0x56>
    4934:	42 17       	cp	r20, r18
    4936:	53 07       	cpc	r21, r19
    4938:	18 f4       	brcc	.+6      	; 0x4940 <malloc+0x5c>
    493a:	9a 01       	movw	r18, r20
    493c:	be 01       	movw	r22, r28
    493e:	df 01       	movw	r26, r30
    4940:	ef 01       	movw	r28, r30
    4942:	02 80       	ldd	r0, Z+2	; 0x02
    4944:	f3 81       	ldd	r31, Z+3	; 0x03
    4946:	e0 2d       	mov	r30, r0
    4948:	dc cf       	rjmp	.-72     	; 0x4902 <malloc+0x1e>
    494a:	21 15       	cp	r18, r1
    494c:	31 05       	cpc	r19, r1
    494e:	09 f1       	breq	.+66     	; 0x4992 <malloc+0xae>
    4950:	28 1b       	sub	r18, r24
    4952:	39 0b       	sbc	r19, r25
    4954:	24 30       	cpi	r18, 0x04	; 4
    4956:	31 05       	cpc	r19, r1
    4958:	90 f4       	brcc	.+36     	; 0x497e <malloc+0x9a>
    495a:	12 96       	adiw	r26, 0x02	; 2
    495c:	8d 91       	ld	r24, X+
    495e:	9c 91       	ld	r25, X
    4960:	13 97       	sbiw	r26, 0x03	; 3
    4962:	61 15       	cp	r22, r1
    4964:	71 05       	cpc	r23, r1
    4966:	21 f0       	breq	.+8      	; 0x4970 <malloc+0x8c>
    4968:	fb 01       	movw	r30, r22
    496a:	82 83       	std	Z+2, r24	; 0x02
    496c:	93 83       	std	Z+3, r25	; 0x03
    496e:	04 c0       	rjmp	.+8      	; 0x4978 <malloc+0x94>
    4970:	80 93 b4 23 	sts	0x23B4, r24
    4974:	90 93 b5 23 	sts	0x23B5, r25
    4978:	fd 01       	movw	r30, r26
    497a:	32 96       	adiw	r30, 0x02	; 2
    497c:	44 c0       	rjmp	.+136    	; 0x4a06 <malloc+0x122>
    497e:	fd 01       	movw	r30, r26
    4980:	e2 0f       	add	r30, r18
    4982:	f3 1f       	adc	r31, r19
    4984:	81 93       	st	Z+, r24
    4986:	91 93       	st	Z+, r25
    4988:	22 50       	subi	r18, 0x02	; 2
    498a:	31 09       	sbc	r19, r1
    498c:	2d 93       	st	X+, r18
    498e:	3c 93       	st	X, r19
    4990:	3a c0       	rjmp	.+116    	; 0x4a06 <malloc+0x122>
    4992:	20 91 b2 23 	lds	r18, 0x23B2
    4996:	30 91 b3 23 	lds	r19, 0x23B3
    499a:	23 2b       	or	r18, r19
    499c:	41 f4       	brne	.+16     	; 0x49ae <malloc+0xca>
    499e:	20 91 02 20 	lds	r18, 0x2002
    49a2:	30 91 03 20 	lds	r19, 0x2003
    49a6:	20 93 b2 23 	sts	0x23B2, r18
    49aa:	30 93 b3 23 	sts	0x23B3, r19
    49ae:	20 91 00 20 	lds	r18, 0x2000
    49b2:	30 91 01 20 	lds	r19, 0x2001
    49b6:	21 15       	cp	r18, r1
    49b8:	31 05       	cpc	r19, r1
    49ba:	41 f4       	brne	.+16     	; 0x49cc <malloc+0xe8>
    49bc:	2d b7       	in	r18, 0x3d	; 61
    49be:	3e b7       	in	r19, 0x3e	; 62
    49c0:	40 91 04 20 	lds	r20, 0x2004
    49c4:	50 91 05 20 	lds	r21, 0x2005
    49c8:	24 1b       	sub	r18, r20
    49ca:	35 0b       	sbc	r19, r21
    49cc:	e0 91 b2 23 	lds	r30, 0x23B2
    49d0:	f0 91 b3 23 	lds	r31, 0x23B3
    49d4:	e2 17       	cp	r30, r18
    49d6:	f3 07       	cpc	r31, r19
    49d8:	a0 f4       	brcc	.+40     	; 0x4a02 <malloc+0x11e>
    49da:	2e 1b       	sub	r18, r30
    49dc:	3f 0b       	sbc	r19, r31
    49de:	28 17       	cp	r18, r24
    49e0:	39 07       	cpc	r19, r25
    49e2:	78 f0       	brcs	.+30     	; 0x4a02 <malloc+0x11e>
    49e4:	ac 01       	movw	r20, r24
    49e6:	4e 5f       	subi	r20, 0xFE	; 254
    49e8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ea:	24 17       	cp	r18, r20
    49ec:	35 07       	cpc	r19, r21
    49ee:	48 f0       	brcs	.+18     	; 0x4a02 <malloc+0x11e>
    49f0:	4e 0f       	add	r20, r30
    49f2:	5f 1f       	adc	r21, r31
    49f4:	40 93 b2 23 	sts	0x23B2, r20
    49f8:	50 93 b3 23 	sts	0x23B3, r21
    49fc:	81 93       	st	Z+, r24
    49fe:	91 93       	st	Z+, r25
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <malloc+0x122>
    4a02:	e0 e0       	ldi	r30, 0x00	; 0
    4a04:	f0 e0       	ldi	r31, 0x00	; 0
    4a06:	cf 01       	movw	r24, r30
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	08 95       	ret

00004a0e <free>:
    4a0e:	0f 93       	push	r16
    4a10:	1f 93       	push	r17
    4a12:	cf 93       	push	r28
    4a14:	df 93       	push	r29
    4a16:	00 97       	sbiw	r24, 0x00	; 0
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <free+0xe>
    4a1a:	8c c0       	rjmp	.+280    	; 0x4b34 <free+0x126>
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	32 97       	sbiw	r30, 0x02	; 2
    4a20:	12 82       	std	Z+2, r1	; 0x02
    4a22:	13 82       	std	Z+3, r1	; 0x03
    4a24:	00 91 b4 23 	lds	r16, 0x23B4
    4a28:	10 91 b5 23 	lds	r17, 0x23B5
    4a2c:	01 15       	cp	r16, r1
    4a2e:	11 05       	cpc	r17, r1
    4a30:	81 f4       	brne	.+32     	; 0x4a52 <free+0x44>
    4a32:	20 81       	ld	r18, Z
    4a34:	31 81       	ldd	r19, Z+1	; 0x01
    4a36:	82 0f       	add	r24, r18
    4a38:	93 1f       	adc	r25, r19
    4a3a:	20 91 b2 23 	lds	r18, 0x23B2
    4a3e:	30 91 b3 23 	lds	r19, 0x23B3
    4a42:	28 17       	cp	r18, r24
    4a44:	39 07       	cpc	r19, r25
    4a46:	79 f5       	brne	.+94     	; 0x4aa6 <free+0x98>
    4a48:	e0 93 b2 23 	sts	0x23B2, r30
    4a4c:	f0 93 b3 23 	sts	0x23B3, r31
    4a50:	71 c0       	rjmp	.+226    	; 0x4b34 <free+0x126>
    4a52:	d8 01       	movw	r26, r16
    4a54:	40 e0       	ldi	r20, 0x00	; 0
    4a56:	50 e0       	ldi	r21, 0x00	; 0
    4a58:	ae 17       	cp	r26, r30
    4a5a:	bf 07       	cpc	r27, r31
    4a5c:	50 f4       	brcc	.+20     	; 0x4a72 <free+0x64>
    4a5e:	12 96       	adiw	r26, 0x02	; 2
    4a60:	2d 91       	ld	r18, X+
    4a62:	3c 91       	ld	r19, X
    4a64:	13 97       	sbiw	r26, 0x03	; 3
    4a66:	ad 01       	movw	r20, r26
    4a68:	21 15       	cp	r18, r1
    4a6a:	31 05       	cpc	r19, r1
    4a6c:	09 f1       	breq	.+66     	; 0x4ab0 <free+0xa2>
    4a6e:	d9 01       	movw	r26, r18
    4a70:	f3 cf       	rjmp	.-26     	; 0x4a58 <free+0x4a>
    4a72:	9d 01       	movw	r18, r26
    4a74:	da 01       	movw	r26, r20
    4a76:	22 83       	std	Z+2, r18	; 0x02
    4a78:	33 83       	std	Z+3, r19	; 0x03
    4a7a:	60 81       	ld	r22, Z
    4a7c:	71 81       	ldd	r23, Z+1	; 0x01
    4a7e:	86 0f       	add	r24, r22
    4a80:	97 1f       	adc	r25, r23
    4a82:	82 17       	cp	r24, r18
    4a84:	93 07       	cpc	r25, r19
    4a86:	69 f4       	brne	.+26     	; 0x4aa2 <free+0x94>
    4a88:	ec 01       	movw	r28, r24
    4a8a:	28 81       	ld	r18, Y
    4a8c:	39 81       	ldd	r19, Y+1	; 0x01
    4a8e:	26 0f       	add	r18, r22
    4a90:	37 1f       	adc	r19, r23
    4a92:	2e 5f       	subi	r18, 0xFE	; 254
    4a94:	3f 4f       	sbci	r19, 0xFF	; 255
    4a96:	20 83       	st	Z, r18
    4a98:	31 83       	std	Z+1, r19	; 0x01
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9e:	82 83       	std	Z+2, r24	; 0x02
    4aa0:	93 83       	std	Z+3, r25	; 0x03
    4aa2:	45 2b       	or	r20, r21
    4aa4:	29 f4       	brne	.+10     	; 0x4ab0 <free+0xa2>
    4aa6:	e0 93 b4 23 	sts	0x23B4, r30
    4aaa:	f0 93 b5 23 	sts	0x23B5, r31
    4aae:	42 c0       	rjmp	.+132    	; 0x4b34 <free+0x126>
    4ab0:	12 96       	adiw	r26, 0x02	; 2
    4ab2:	ed 93       	st	X+, r30
    4ab4:	fc 93       	st	X, r31
    4ab6:	13 97       	sbiw	r26, 0x03	; 3
    4ab8:	ed 01       	movw	r28, r26
    4aba:	49 91       	ld	r20, Y+
    4abc:	59 91       	ld	r21, Y+
    4abe:	9e 01       	movw	r18, r28
    4ac0:	24 0f       	add	r18, r20
    4ac2:	35 1f       	adc	r19, r21
    4ac4:	e2 17       	cp	r30, r18
    4ac6:	f3 07       	cpc	r31, r19
    4ac8:	71 f4       	brne	.+28     	; 0x4ae6 <free+0xd8>
    4aca:	80 81       	ld	r24, Z
    4acc:	91 81       	ldd	r25, Z+1	; 0x01
    4ace:	84 0f       	add	r24, r20
    4ad0:	95 1f       	adc	r25, r21
    4ad2:	02 96       	adiw	r24, 0x02	; 2
    4ad4:	8d 93       	st	X+, r24
    4ad6:	9c 93       	st	X, r25
    4ad8:	11 97       	sbiw	r26, 0x01	; 1
    4ada:	82 81       	ldd	r24, Z+2	; 0x02
    4adc:	93 81       	ldd	r25, Z+3	; 0x03
    4ade:	12 96       	adiw	r26, 0x02	; 2
    4ae0:	8d 93       	st	X+, r24
    4ae2:	9c 93       	st	X, r25
    4ae4:	13 97       	sbiw	r26, 0x03	; 3
    4ae6:	e0 e0       	ldi	r30, 0x00	; 0
    4ae8:	f0 e0       	ldi	r31, 0x00	; 0
    4aea:	d8 01       	movw	r26, r16
    4aec:	12 96       	adiw	r26, 0x02	; 2
    4aee:	8d 91       	ld	r24, X+
    4af0:	9c 91       	ld	r25, X
    4af2:	13 97       	sbiw	r26, 0x03	; 3
    4af4:	00 97       	sbiw	r24, 0x00	; 0
    4af6:	19 f0       	breq	.+6      	; 0x4afe <free+0xf0>
    4af8:	f8 01       	movw	r30, r16
    4afa:	8c 01       	movw	r16, r24
    4afc:	f6 cf       	rjmp	.-20     	; 0x4aea <free+0xdc>
    4afe:	8d 91       	ld	r24, X+
    4b00:	9c 91       	ld	r25, X
    4b02:	98 01       	movw	r18, r16
    4b04:	2e 5f       	subi	r18, 0xFE	; 254
    4b06:	3f 4f       	sbci	r19, 0xFF	; 255
    4b08:	82 0f       	add	r24, r18
    4b0a:	93 1f       	adc	r25, r19
    4b0c:	20 91 b2 23 	lds	r18, 0x23B2
    4b10:	30 91 b3 23 	lds	r19, 0x23B3
    4b14:	28 17       	cp	r18, r24
    4b16:	39 07       	cpc	r19, r25
    4b18:	69 f4       	brne	.+26     	; 0x4b34 <free+0x126>
    4b1a:	30 97       	sbiw	r30, 0x00	; 0
    4b1c:	29 f4       	brne	.+10     	; 0x4b28 <free+0x11a>
    4b1e:	10 92 b4 23 	sts	0x23B4, r1
    4b22:	10 92 b5 23 	sts	0x23B5, r1
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <free+0x11e>
    4b28:	12 82       	std	Z+2, r1	; 0x02
    4b2a:	13 82       	std	Z+3, r1	; 0x03
    4b2c:	00 93 b2 23 	sts	0x23B2, r16
    4b30:	10 93 b3 23 	sts	0x23B3, r17
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	1f 91       	pop	r17
    4b3a:	0f 91       	pop	r16
    4b3c:	08 95       	ret

00004b3e <memcpy>:
    4b3e:	fb 01       	movw	r30, r22
    4b40:	dc 01       	movw	r26, r24
    4b42:	02 c0       	rjmp	.+4      	; 0x4b48 <memcpy+0xa>
    4b44:	01 90       	ld	r0, Z+
    4b46:	0d 92       	st	X+, r0
    4b48:	41 50       	subi	r20, 0x01	; 1
    4b4a:	50 40       	sbci	r21, 0x00	; 0
    4b4c:	d8 f7       	brcc	.-10     	; 0x4b44 <memcpy+0x6>
    4b4e:	08 95       	ret

00004b50 <__do_global_dtors>:
    4b50:	11 e0       	ldi	r17, 0x01	; 1
    4b52:	c1 ec       	ldi	r28, 0xC1	; 193
    4b54:	d1 e0       	ldi	r29, 0x01	; 1
    4b56:	00 e0       	ldi	r16, 0x00	; 0
    4b58:	06 c0       	rjmp	.+12     	; 0x4b66 <__do_global_dtors+0x16>
    4b5a:	80 2f       	mov	r24, r16
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	0e 94 39 24 	call	0x4872	; 0x4872 <__tablejump2__>
    4b62:	21 96       	adiw	r28, 0x01	; 1
    4b64:	01 1d       	adc	r16, r1
    4b66:	c3 3c       	cpi	r28, 0xC3	; 195
    4b68:	d1 07       	cpc	r29, r17
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	08 07       	cpc	r16, r24
    4b6e:	a9 f7       	brne	.-22     	; 0x4b5a <__do_global_dtors+0xa>
    4b70:	f8 94       	cli

00004b72 <__stop_program>:
    4b72:	ff cf       	rjmp	.-2      	; 0x4b72 <__stop_program>
