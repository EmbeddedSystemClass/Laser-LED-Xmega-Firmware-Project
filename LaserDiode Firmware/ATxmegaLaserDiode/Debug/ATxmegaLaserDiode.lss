
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00802000  00004c00  00004c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027a  00802136  00802136  00004dca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004dca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004dfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00004e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d4e7  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025f1  00000000  00000000  00012ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ca2  00000000  00000000  000152bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003140  00000000  00000000  00017f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f63  00000000  00000000  0001b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000838f  00000000  00000000  00020003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d0  00000000  00000000  00028392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__dtors_end>
       4:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_1>
       8:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_2>
       c:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_3>
      10:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_4>
      14:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_5>
      18:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__vector_6>
      1c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_7>
      20:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_8>
      24:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_9>
      28:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_10>
      2c:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_11>
      30:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_12>
      34:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_13>
      38:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__vector_14>
      3c:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_15>
      40:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_16>
      44:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_17>
      48:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_18>
      4c:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_19>
      50:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_20>
      54:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_21>
      58:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_22>
      5c:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_23>
      60:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_24>
      64:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_25>
      68:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_26>
      6c:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_27>
      70:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_28>
      74:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__vector_29>
      78:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_30>
      7c:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_31>
      80:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__vector_32>
      84:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_33>
      88:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_34>
      8c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_35>
      90:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_36>
      94:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_37>
      98:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_38>
      9c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_39>
      a0:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__vector_40>
      a4:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__vector_41>
      a8:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_42>
      ac:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_43>
      b0:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__vector_44>
      b4:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__vector_45>
      b8:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__vector_46>
      bc:	0c 94 15 10 	jmp	0x202a	; 0x202a <__vector_47>
      c0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__vector_48>
      c4:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__vector_49>
      c8:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_50>
      cc:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__vector_51>
      d0:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_52>
      d4:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_53>
      d8:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__vector_54>
      dc:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_55>
      e0:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__vector_56>
      e4:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_57>
      e8:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__vector_58>
      ec:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__vector_59>
      f0:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__vector_60>
      f4:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_61>
      f8:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__vector_62>
      fc:	0c 94 25 13 	jmp	0x264a	; 0x264a <__vector_63>
     100:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__vector_64>
     104:	0c 94 87 13 	jmp	0x270e	; 0x270e <__vector_65>
     108:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__vector_66>
     10c:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_67>
     110:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__vector_68>
     114:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__vector_69>
     118:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__vector_70>
     11c:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_71>
     120:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__vector_72>
     124:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__vector_73>
     128:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_74>
     12c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     130:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     134:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__vector_77>
     138:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__vector_78>
     13c:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__vector_79>
     140:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_80>
     144:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__vector_81>
     148:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__vector_82>
     14c:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__vector_83>
     150:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__vector_84>
     154:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_85>
     158:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__vector_86>
     15c:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__vector_87>
     160:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__vector_88>
     164:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__vector_89>
     168:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__vector_90>
     16c:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__vector_91>
     170:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__vector_92>
     174:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__vector_93>
     178:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     17c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     180:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     184:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     188:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     18c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     190:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     194:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     198:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     19c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1a0:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__vector_104>
     1a4:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__vector_105>
     1a8:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1ac:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1b0:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__vector_108>
     1b4:	0c 94 45 19 	jmp	0x328a	; 0x328a <__vector_109>
     1b8:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__vector_110>
     1bc:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__vector_111>
     1c0:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__vector_112>
     1c4:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__vector_113>
     1c8:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1cc:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1d0:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1d4:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1d8:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1dc:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__vector_119>
     1e0:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__vector_120>
     1e4:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__vector_121>
     1e8:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1ec:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1f0:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1f4:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1f8:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
     1fc:	4b 02       	muls	r20, r27
     1fe:	72 02       	muls	r23, r18
     200:	72 02       	muls	r23, r18
     202:	72 02       	muls	r23, r18
     204:	72 02       	muls	r23, r18
     206:	72 02       	muls	r23, r18
     208:	72 02       	muls	r23, r18
     20a:	4e 02       	muls	r20, r30
     20c:	75 02       	muls	r23, r21
     20e:	72 02       	muls	r23, r18
     210:	52 02       	muls	r21, r18
     212:	72 02       	muls	r23, r18
     214:	56 02       	muls	r21, r22
     216:	72 02       	muls	r23, r18
     218:	5a 02       	muls	r21, r26
     21a:	72 02       	muls	r23, r18
     21c:	5e 02       	muls	r21, r30
     21e:	72 02       	muls	r23, r18
     220:	75 02       	muls	r23, r21
     222:	72 02       	muls	r23, r18
     224:	75 02       	muls	r23, r21
     226:	72 02       	muls	r23, r18
     228:	62 02       	muls	r22, r18
     22a:	66 02       	muls	r22, r22
     22c:	6a 02       	muls	r22, r26
     22e:	6e 02       	muls	r22, r30
     230:	75 02       	muls	r23, r21
     232:	72 02       	muls	r23, r18
     234:	75 02       	muls	r23, r21
     236:	72 02       	muls	r23, r18
     238:	75 02       	muls	r23, r21
     23a:	4c 1d       	adc	r20, r12
     23c:	4c 1d       	adc	r20, r12
     23e:	54 1d       	adc	r21, r4
     240:	5c 1d       	adc	r21, r12
     242:	63 1d       	adc	r22, r3
     244:	b2 1d       	adc	r27, r2
     246:	b9 1d       	adc	r27, r9
     248:	e5 1d       	adc	r30, r5
     24a:	e5 1d       	adc	r30, r5
     24c:	e4 1d       	adc	r30, r4
     24e:	e4 1d       	adc	r30, r4

00000250 <__trampolines_start>:
     250:	0c 94 b6 22 	jmp	0x456c	; 0x456c <_ZN7CTimerD4StopEv>
     254:	0c 94 af 1c 	jmp	0x395e	; 0x395e <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     258:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_GLOBAL__sub_D_dacSPI>
     25c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     260:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     264:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     268:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <_ZN7CTimerD8SetCOMPAEj>
     26c:	0c 94 de 23 	jmp	0x47bc	; 0x47bc <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     270:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     274:	0c 94 8d 23 	jmp	0x471a	; 0x471a <_ZN7CTimerF4StopEv>
     278:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     27c:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     280:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     284:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     288:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     28c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x68>
     290:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     294:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     298:	0c 94 8e 22 	jmp	0x451c	; 0x451c <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     29c:	0c 94 2d 23 	jmp	0x465a	; 0x465a <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2a0:	0c 94 09 22 	jmp	0x4412	; 0x4412 <_ZN7CTimerC8SetCOMPDEj>
     2a4:	0c 94 bd 23 	jmp	0x477a	; 0x477a <_ZN7CTimerF8SetCOMPBEj>
     2a8:	0c 94 14 03 	jmp	0x628	; 0x628 <_GLOBAL__sub_I_timer>
     2ac:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2b0:	0c 94 4b 02 	jmp	0x496	; 0x496 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3a>
     2b4:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <_ZN10CDGUSUSART11IsDataEmptyEv>
     2b8:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     2bc:	0c 94 95 23 	jmp	0x472a	; 0x472a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     2c0:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     2c4:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x40>
     2c8:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2cc:	0c 94 e5 1d 	jmp	0x3bca	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
     2d0:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2d4:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2d8:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     2dc:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8e>
     2e0:	0c 94 c7 23 	jmp	0x478e	; 0x478e <_ZN7CTimerF8SetCOMPDEj>
     2e4:	0c 94 db 22 	jmp	0x45b6	; 0x45b6 <_ZN7CTimerD8SetCOMPCEj>
     2e8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_ZN16CLaserControlApp13OnTimerStaticEPv>
     2ec:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x58>
     2f0:	0c 94 b7 21 	jmp	0x436e	; 0x436e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2f4:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <_ZN7CTimerC8SetCOMPBEj>
     2f8:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <_ZN16CMBEventsHandler11FreeBuffersEv>
     2fc:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__cxa_pure_virtual>
     300:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     304:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <_ZN7CTimerF8SetCOMPCEj>
     308:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     30c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x50>
     310:	0c 94 80 23 	jmp	0x4700	; 0x4700 <_ZN7CTimerF5StartEj>
     314:	0c 94 0e 22 	jmp	0x441c	; 0x441c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     318:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     31c:	0c 94 09 23 	jmp	0x4612	; 0x4612 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     320:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     324:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     328:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <_ZN9CMBSender18OnTimeoutInterruptEPv>
     32c:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <_ZN9CMBSender13OnReceiveByteEh+0xee>
     330:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <_ZN10CDGUSUSART11IsReceivingEv>
     334:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     338:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     33c:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <_GLOBAL__sub_I_dacSPI>
     340:	0c 94 9b 23 	jmp	0x4736	; 0x4736 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     344:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <_ZN7CTimerD8SetCOMPBEj>
     348:	0c 94 32 22 	jmp	0x4464	; 0x4464 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     34c:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     350:	0c 94 44 22 	jmp	0x4488	; 0x4488 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     354:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     358:	0c 94 3f 23 	jmp	0x467e	; 0x467e <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     35c:	0c 94 be 22 	jmp	0x457c	; 0x457c <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     360:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <_ZN10CDGUSUSART14IsTransmittingEv>
     364:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     368:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <_ZN7CTimerF8SetCOMPAEj>
     36c:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <_ZN7CTimerF9SetPeriodEj>
     370:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     374:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <_ZN10CDGUSUSART15GetReceivedByteEv>
     378:	0c 94 df 21 	jmp	0x43be	; 0x43be <_ZN7CTimerC4StopEv>
     37c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     380:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     384:	0c 94 2d 02 	jmp	0x45a	; 0x45a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     388:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     38c:	0c 94 c5 22 	jmp	0x458a	; 0x458a <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     390:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <_ZN7CTimerC8SetCOMPAEj>
     394:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     398:	0c 94 11 03 	jmp	0x622	; 0x622 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     39c:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_GLOBAL__sub_D_timer>
     3a0:	0c 94 20 22 	jmp	0x4440	; 0x4440 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3a4:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     3a8:	0c 94 26 24 	jmp	0x484c	; 0x484c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3ac:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <_ZN7CTimerC5StartEj>
     3b0:	0c 94 cc 22 	jmp	0x4598	; 0x4598 <_ZN7CTimerD9SetPeriodEj>
     3b4:	0c 94 cc 23 	jmp	0x4798	; 0x4798 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3b8:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x88>
     3bc:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x80>
     3c0:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <_ZN7CTimerC9SetPeriodEj>
     3c4:	0c 94 14 24 	jmp	0x4828	; 0x4828 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3c8:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <_ZN9CMBSender13OnReceiveByteEh+0x152>
     3cc:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     3d0:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <_ZN4CSPI16StaticOnTransmitEPv>
     3d4:	0c 94 56 22 	jmp	0x44ac	; 0x44ac <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3d8:	0c 94 04 22 	jmp	0x4408	; 0x4408 <_ZN7CTimerC8SetCOMPCEj>
     3dc:	0c 94 02 24 	jmp	0x4804	; 0x4804 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3e0:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <_ZN7CTimerD5StartEj>
     3e4:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <_ZN7CTimerD8SetCOMPDEj>
     3e8:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <_ZN9CMBSender13OnReceiveByteEh+0x50>

000003ec <__ctors_start>:
     3ec:	14 03       	mulsu	r17, r20
     3ee:	d0 1a       	sub	r13, r16

000003f0 <__ctors_end>:
     3f0:	1d 03       	fmul	r17, r21
     3f2:	ed 1a       	sub	r14, r29

000003f4 <__dtors_end>:
     3f4:	11 24       	eor	r1, r1
     3f6:	1f be       	out	0x3f, r1	; 63
     3f8:	cf ef       	ldi	r28, 0xFF	; 255
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	df e3       	ldi	r29, 0x3F	; 63
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	00 e0       	ldi	r16, 0x00	; 0
     402:	0c bf       	out	0x3c, r16	; 60

00000404 <__do_copy_data>:
     404:	11 e2       	ldi	r17, 0x21	; 33
     406:	a0 e0       	ldi	r26, 0x00	; 0
     408:	b0 e2       	ldi	r27, 0x20	; 32
     40a:	e0 e0       	ldi	r30, 0x00	; 0
     40c:	fc e4       	ldi	r31, 0x4C	; 76
     40e:	00 e0       	ldi	r16, 0x00	; 0
     410:	0b bf       	out	0x3b, r16	; 59
     412:	02 c0       	rjmp	.+4      	; 0x418 <__do_copy_data+0x14>
     414:	07 90       	elpm	r0, Z+
     416:	0d 92       	st	X+, r0
     418:	a6 33       	cpi	r26, 0x36	; 54
     41a:	b1 07       	cpc	r27, r17
     41c:	d9 f7       	brne	.-10     	; 0x414 <__do_copy_data+0x10>

0000041e <__do_clear_bss>:
     41e:	23 e2       	ldi	r18, 0x23	; 35
     420:	a6 e3       	ldi	r26, 0x36	; 54
     422:	b1 e2       	ldi	r27, 0x21	; 33
     424:	01 c0       	rjmp	.+2      	; 0x428 <.do_clear_bss_start>

00000426 <.do_clear_bss_loop>:
     426:	1d 92       	st	X+, r1

00000428 <.do_clear_bss_start>:
     428:	a0 3b       	cpi	r26, 0xB0	; 176
     42a:	b2 07       	cpc	r27, r18
     42c:	e1 f7       	brne	.-8      	; 0x426 <.do_clear_bss_loop>

0000042e <__do_global_ctors>:
     42e:	11 e0       	ldi	r17, 0x01	; 1
     430:	c8 ef       	ldi	r28, 0xF8	; 248
     432:	d1 e0       	ldi	r29, 0x01	; 1
     434:	00 e0       	ldi	r16, 0x00	; 0
     436:	06 c0       	rjmp	.+12     	; 0x444 <__do_global_ctors+0x16>
     438:	21 97       	sbiw	r28, 0x01	; 1
     43a:	01 09       	sbc	r16, r1
     43c:	80 2f       	mov	r24, r16
     43e:	fe 01       	movw	r30, r28
     440:	0e 94 7f 24 	call	0x48fe	; 0x48fe <__tablejump2__>
     444:	c6 3f       	cpi	r28, 0xF6	; 246
     446:	d1 07       	cpc	r29, r17
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 07       	cpc	r16, r24
     44c:	a9 f7       	brne	.-22     	; 0x438 <__do_global_ctors+0xa>
     44e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <main>
     452:	0c 94 ee 25 	jmp	0x4bdc	; 0x4bdc <__do_global_dtors>

00000456 <__bad_interrupt>:
     456:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000045a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     45a:	08 95       	ret

0000045c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
}

volatile uint8_t DatabaseStatusRegister;

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     45c:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     45e:	63 30       	cpi	r22, 0x03	; 3
     460:	31 f4       	brne	.+12     	; 0x46e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     462:	fa 01       	movw	r30, r20
     464:	81 81       	ldd	r24, Z+1	; 0x01
     466:	1e 96       	adiw	r26, 0x0e	; 14
     468:	8c 93       	st	X, r24
     46a:	1e 97       	sbiw	r26, 0x0e	; 14
     46c:	06 c0       	rjmp	.+12     	; 0x47a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
	
	if (addr == REGISTER_DATABASE_EN)
     46e:	66 35       	cpi	r22, 0x56	; 86
     470:	21 f4       	brne	.+8      	; 0x47a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
	{ 
		DatabaseStatusRegister = data[0];
     472:	fa 01       	movw	r30, r20
     474:	80 81       	ld	r24, Z
     476:	80 93 36 21 	sts	0x2136, r24
	}
	
	switch (PIC_ID)
     47a:	1e 96       	adiw	r26, 0x0e	; 14
     47c:	4c 91       	ld	r20, X
     47e:	1e 97       	sbiw	r26, 0x0e	; 14
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	4f 31       	cpi	r20, 0x1F	; 31
     484:	51 05       	cpc	r21, r1
     486:	70 f5       	brcc	.+92     	; 0x4e4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x88>
     488:	fa 01       	movw	r30, r20
     48a:	88 27       	eor	r24, r24
     48c:	e2 50       	subi	r30, 0x02	; 2
     48e:	ff 4f       	sbci	r31, 0xFF	; 255
     490:	8f 4f       	sbci	r24, 0xFF	; 255
     492:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     496:	1c 96       	adiw	r26, 0x0c	; 12
     498:	1c 92       	st	X, r1
		break;
     49a:	08 95       	ret
		case PICID_WORK_PREPARE:
			state = APP_WORKPREPARE;
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	1c 96       	adiw	r26, 0x0c	; 12
     4a0:	8c 93       	st	X, r24
		break;
     4a2:	08 95       	ret
		case PICID_WORK_ERROR1:
			// error
		break;
		case PICID_WORK_IDLE:
			state = APP_WORKSETUP;
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	1c 96       	adiw	r26, 0x0c	; 12
     4a8:	8c 93       	st	X, r24
		break;
     4aa:	08 95       	ret
		case PICID_WORK_READY:
			state = APP_WORKREADY;
     4ac:	84 e0       	ldi	r24, 0x04	; 4
     4ae:	1c 96       	adiw	r26, 0x0c	; 12
     4b0:	8c 93       	st	X, r24
		break;
     4b2:	08 95       	ret
		case PICID_WORK_POWERON:
			state = APP_WORKPOWERON;
     4b4:	85 e0       	ldi	r24, 0x05	; 5
     4b6:	1c 96       	adiw	r26, 0x0c	; 12
     4b8:	8c 93       	st	X, r24
		break;
     4ba:	08 95       	ret
		case PICID_WORK_STARTED:
			state = APP_WORKLIGHT;
     4bc:	86 e0       	ldi	r24, 0x06	; 6
     4be:	1c 96       	adiw	r26, 0x0c	; 12
     4c0:	8c 93       	st	X, r24
		break;
     4c2:	08 95       	ret
		case PICID_WORK_NUMPAD:
		case PICID_WORK_PHOTOTYPE:
		break;
		case PICID_WORKOnLaserOff_:
			state = APP_WORKOnPowerOff;
     4c4:	89 e0       	ldi	r24, 0x09	; 9
     4c6:	1c 96       	adiw	r26, 0x0c	; 12
     4c8:	8c 93       	st	X, r24
			break;
     4ca:	08 95       	ret
		case PICID_WORKOnLaserOff:
			state = APP_WORKOnPowerOff;
     4cc:	89 e0       	ldi	r24, 0x09	; 9
     4ce:	1c 96       	adiw	r26, 0x0c	; 12
     4d0:	8c 93       	st	X, r24
		break;
     4d2:	08 95       	ret
		case PICID_WORKOnLaserOn:
			state = APP_WORKOnPowerOn;
     4d4:	88 e0       	ldi	r24, 0x08	; 8
     4d6:	1c 96       	adiw	r26, 0x0c	; 12
     4d8:	8c 93       	st	X, r24
		break;
     4da:	08 95       	ret
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     4dc:	87 e0       	ldi	r24, 0x07	; 7
     4de:	1c 96       	adiw	r26, 0x0c	; 12
     4e0:	8c 93       	st	X, r24
		break;
     4e2:	08 95       	ret
		case PICID_DATABASE:
		case PICID_DATABASEOnRead:
		case PICID_NEWPROFILE:
		break;
		default:
			state = APP_WORKIDLE;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	1c 96       	adiw	r26, 0x0c	; 12
     4e8:	8c 93       	st	X, r24
     4ea:	08 95       	ret

000004ec <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     4ec:	08 95       	ret

000004ee <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
{
	//no code
}

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	7c 01       	movw	r14, r24
     500:	eb 01       	movw	r28, r22
     502:	8a 01       	movw	r16, r20
     504:	69 01       	movw	r12, r18
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
     506:	fa 01       	movw	r30, r20
     508:	80 81       	ld	r24, Z
     50a:	91 81       	ldd	r25, Z+1	; 0x01
     50c:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
	
	if (addr == VARIABLE_ADDR_DATAINDEX)
     510:	c0 31       	cpi	r28, 0x10	; 16
     512:	d1 05       	cpc	r29, r1
     514:	21 f4       	brne	.+8      	; 0x51e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x30>
		profileIndex = val;
     516:	f7 01       	movw	r30, r14
     518:	80 8f       	std	Z+24, r24	; 0x18
     51a:	91 8f       	std	Z+25, r25	; 0x19
     51c:	22 c0       	rjmp	.+68     	; 0x562 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x74>
	
	if (addr == VARIABLE_ADDR_DATAOFFS)
     51e:	cf 30       	cpi	r28, 0x0F	; 15
     520:	d1 05       	cpc	r29, r1
     522:	21 f4       	brne	.+8      	; 0x52c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3e>
		databaseOffset = val;
     524:	f7 01       	movw	r30, r14
     526:	82 8f       	std	Z+26, r24	; 0x1a
     528:	93 8f       	std	Z+27, r25	; 0x1b
     52a:	1b c0       	rjmp	.+54     	; 0x562 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x74>
	
	if (addr == STRUCT_ADDR_LASERPROFILE_DATA)
     52c:	22 97       	sbiw	r28, 0x02	; 2
     52e:	c9 f4       	brne	.+50     	; 0x562 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x74>
	{
		if (profile <= 5)
     530:	f7 01       	movw	r30, r14
     532:	85 85       	ldd	r24, Z+13	; 0x0d
     534:	86 30       	cpi	r24, 0x06	; 6
     536:	98 f4       	brcc	.+38     	; 0x55e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x70>
			ConvertData((void*)&m_structDGUSDATA[profile], (void*)data, length);
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9c 01       	movw	r18, r24
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	a6 01       	movw	r20, r12
     552:	b8 01       	movw	r22, r16
     554:	89 5c       	subi	r24, 0xC9	; 201
     556:	9e 4d       	sbci	r25, 0xDE	; 222
     558:	0e 94 88 06 	call	0xd10	; 0xd10 <_Z11ConvertDataPvS_jj>
     55c:	02 c0       	rjmp	.+4      	; 0x562 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x74>
		else
			CLaserBoard::Beep();
     55e:	0e 94 61 20 	call	0x40c2	; 0x40c2 <_ZN11CLaserBoard4BeepEv>
	}
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	08 95       	ret

00000574 <_ZN16CLaserControlAppC1Ev>:
volatile DGUS_LASERPROFILE_STRUCT m_structDGUSDATA[4];

extern uint16_t swap(uint16_t data);

// default constructor
CLaserControlApp::CLaserControlApp()
     574:	2a e4       	ldi	r18, 0x4A	; 74
     576:	30 e2       	ldi	r19, 0x20	; 32
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
     57c:	31 83       	std	Z+1, r19	; 0x01
     57e:	08 95       	ret

00000580 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     580:	2a e4       	ldi	r18, 0x4A	; 74
     582:	30 e2       	ldi	r19, 0x20	; 32
     584:	fc 01       	movw	r30, r24
     586:	20 83       	st	Z, r18
     588:	31 83       	std	Z+1, r19	; 0x01
     58a:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN16CMBEventsHandlerD1Ev>
     58e:	08 95       	ret

00000590 <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = PROFILE_FAST;
}

void CLaserControlApp::Start()
{	
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	1f 92       	push	r1
     59a:	1f 92       	push	r1
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_WORK_IDLE);
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     5ae:	22 e0       	ldi	r18, 0x02	; 2
     5b0:	ae 01       	movw	r20, r28
     5b2:	4f 5f       	subi	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	f8 01       	movw	r30, r16
     5ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     5bc:	95 8d       	ldd	r25, Z+29	; 0x1d
     5be:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     5c2:	f8 01       	movw	r30, r16
     5c4:	84 8d       	ldd	r24, Z+28	; 0x1c
     5c6:	95 8d       	ldd	r25, Z+29	; 0x1d
     5c8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structDGUSDATA[PROFILE_FAST], sizeof(m_structDGUSDATA[PROFILE_FAST]));
     5cc:	2c e0       	ldi	r18, 0x0C	; 12
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	47 e6       	ldi	r20, 0x67	; 103
     5d2:	51 e2       	ldi	r21, 0x21	; 33
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	f8 01       	movw	r30, r16
     5da:	84 8d       	ldd	r24, Z+28	; 0x1c
     5dc:	95 8d       	ldd	r25, Z+29	; 0x1d
     5de:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     5e2:	f8 01       	movw	r30, r16
     5e4:	84 8d       	ldd	r24, Z+28	; 0x1c
     5e6:	95 8d       	ldd	r25, Z+29	; 0x1d
     5e8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKSETUP;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	f8 01       	movw	r30, r16
     5f0:	84 87       	std	Z+12, r24	; 0x0c
}
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	08 95       	ret

00000600 <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, laserTimerDutyCyclems/2, 0);
     600:	fc 01       	movw	r30, r24
     602:	44 89       	ldd	r20, Z+20	; 0x14
     604:	55 89       	ldd	r21, Z+21	; 0x15
     606:	56 95       	lsr	r21
     608:	47 95       	ror	r20
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	68 ee       	ldi	r22, 0xE8	; 232
     60e:	73 e0       	ldi	r23, 0x03	; 3
     610:	89 e7       	ldi	r24, 0x79	; 121
     612:	93 e2       	ldi	r25, 0x23	; 35
     614:	0e 94 ff 20 	call	0x41fe	; 0x41fe <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     618:	89 e7       	ldi	r24, 0x79	; 121
     61a:	93 e2       	ldi	r25, 0x23	; 35
     61c:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN12CSoundPlayer9SoundStopEv>
     620:	08 95       	ret

00000622 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     622:	0e 94 00 03 	call	0x600	; 0x600 <_ZN16CLaserControlApp12OnLaserTimerEv>
     626:	08 95       	ret

00000628 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "Periphery/CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     628:	8a e6       	ldi	r24, 0x6A	; 106
     62a:	91 e2       	ldi	r25, 0x21	; 33
     62c:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     630:	87 e6       	ldi	r24, 0x67	; 103
     632:	91 e2       	ldi	r25, 0x21	; 33
     634:	0e 94 38 24 	call	0x4870	; 0x4870 <_ZN7CTimerFC1Ev>
     638:	08 95       	ret

0000063a <_GLOBAL__sub_D_timer>:
     63a:	87 e6       	ldi	r24, 0x67	; 103
     63c:	91 e2       	ldi	r25, 0x21	; 33
     63e:	0e 94 44 24 	call	0x4888	; 0x4888 <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "Periphery/CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     642:	8a e6       	ldi	r24, 0x6A	; 106
     644:	91 e2       	ldi	r25, 0x21	; 33
     646:	0e 94 86 22 	call	0x450c	; 0x450c <_ZN7CTimerCD1Ev>
     64a:	08 95       	ret

0000064c <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     662:	6c 8f       	std	Y+28, r22	; 0x1c
     664:	7d 8f       	std	Y+29, r23	; 0x1d
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     666:	46 e0       	ldi	r20, 0x06	; 6
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	8a e6       	ldi	r24, 0x6A	; 106
     66c:	91 e2       	ldi	r25, 0x21	; 33
     66e:	0e 94 b7 21 	call	0x436e	; 0x436e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     672:	68 ea       	ldi	r22, 0xA8	; 168
     674:	71 e6       	ldi	r23, 0x61	; 97
     676:	8a e6       	ldi	r24, 0x6A	; 106
     678:	91 e2       	ldi	r25, 0x21	; 33
     67a:	0e 94 f5 21 	call	0x43ea	; 0x43ea <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	ae 01       	movw	r20, r28
     682:	66 e7       	ldi	r22, 0x76	; 118
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	8a e6       	ldi	r24, 0x6A	; 106
     688:	91 e2       	ldi	r25, 0x21	; 33
     68a:	0e 94 0e 22 	call	0x441c	; 0x441c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     68e:	1e 86       	std	Y+14, r1	; 0x0e
	update = false;
     690:	1f 86       	std	Y+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA[PROFILE_FAST].Frequency = 10; // 10 Hz
     692:	e7 e3       	ldi	r30, 0x37	; 55
     694:	f1 e2       	ldi	r31, 0x21	; 33
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	80 ab       	std	Z+48, r24	; 0x30
     69c:	91 ab       	std	Z+49, r25	; 0x31
	m_structDGUSDATA[PROFILE_FAST].DutyCycle = 50; // 50%
     69e:	0f 2e       	mov	r0, r31
     6a0:	f2 e3       	ldi	r31, 0x32	; 50
     6a2:	cf 2e       	mov	r12, r31
     6a4:	d1 2c       	mov	r13, r1
     6a6:	f0 2d       	mov	r31, r0
     6a8:	c2 ae       	std	Z+58, r12	; 0x3a
     6aa:	d3 ae       	std	Z+59, r13	; 0x3b
	m_structDGUSDATA[PROFILE_FAST].Duration  = ((1000 / m_structDGUSDATA[PROFILE_FAST].Frequency) * m_structDGUSDATA[PROFILE_FAST].DutyCycle) / 100; // ms
     6ac:	60 a9       	ldd	r22, Z+48	; 0x30
     6ae:	71 a9       	ldd	r23, Z+49	; 0x31
     6b0:	02 ad       	ldd	r16, Z+58	; 0x3a
     6b2:	13 ad       	ldd	r17, Z+59	; 0x3b
     6b4:	0f 2e       	mov	r0, r31
     6b6:	f8 ee       	ldi	r31, 0xE8	; 232
     6b8:	ef 2e       	mov	r14, r31
     6ba:	f3 e0       	ldi	r31, 0x03	; 3
     6bc:	ff 2e       	mov	r15, r31
     6be:	f0 2d       	mov	r31, r0
     6c0:	c7 01       	movw	r24, r14
     6c2:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
     6c6:	60 9f       	mul	r22, r16
     6c8:	90 01       	movw	r18, r0
     6ca:	61 9f       	mul	r22, r17
     6cc:	30 0d       	add	r19, r0
     6ce:	70 9f       	mul	r23, r16
     6d0:	30 0d       	add	r19, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	36 95       	lsr	r19
     6d6:	27 95       	ror	r18
     6d8:	36 95       	lsr	r19
     6da:	27 95       	ror	r18
     6dc:	ab e7       	ldi	r26, 0x7B	; 123
     6de:	b4 e1       	ldi	r27, 0x14	; 20
     6e0:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	82 ab       	std	Z+50, r24	; 0x32
     6ea:	93 ab       	std	Z+51, r25	; 0x33
	m_structDGUSDATA[PROFILE_FAST].EnergyPercent = 100; // W
     6ec:	04 e6       	ldi	r16, 0x64	; 100
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	04 ab       	std	Z+52, r16	; 0x34
     6f2:	15 ab       	std	Z+53, r17	; 0x35
	//m_structDGUSDATA[PROFILE_FAST].Power     = (m_structDGUSDATA[PROFILE_FAST].Intensity * m_structDGUSDATA[PROFILE_FAST].DutyCycle) / 100; // W
	//m_structDGUSDATA[PROFILE_FAST].Energy    = (m_structDGUSDATA[PROFILE_FAST].Intensity * m_structDGUSDATA[PROFILE_FAST].Duration) / 1000; // J
	
	// Slow profile
	m_structDGUSDATA[PROFILE_SLOW].Frequency = 1; // 10 Hz
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	80 8f       	std	Z+24, r24	; 0x18
     6fa:	91 8f       	std	Z+25, r25	; 0x19
	m_structDGUSDATA[PROFILE_SLOW].DutyCycle = 50; // 50%
     6fc:	c2 a2       	std	Z+34, r12	; 0x22
     6fe:	d3 a2       	std	Z+35, r13	; 0x23
	m_structDGUSDATA[PROFILE_SLOW].Duration  = ((1000 / m_structDGUSDATA[PROFILE_SLOW].Frequency) * m_structDGUSDATA[PROFILE_SLOW].DutyCycle) / 100; // ms
     700:	60 8d       	ldd	r22, Z+24	; 0x18
     702:	71 8d       	ldd	r23, Z+25	; 0x19
     704:	a2 a0       	ldd	r10, Z+34	; 0x22
     706:	b3 a0       	ldd	r11, Z+35	; 0x23
     708:	c7 01       	movw	r24, r14
     70a:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
     70e:	6a 9d       	mul	r22, r10
     710:	90 01       	movw	r18, r0
     712:	6b 9d       	mul	r22, r11
     714:	30 0d       	add	r19, r0
     716:	7a 9d       	mul	r23, r10
     718:	30 0d       	add	r19, r0
     71a:	11 24       	eor	r1, r1
     71c:	36 95       	lsr	r19
     71e:	27 95       	ror	r18
     720:	36 95       	lsr	r19
     722:	27 95       	ror	r18
     724:	ab e7       	ldi	r26, 0x7B	; 123
     726:	b4 e1       	ldi	r27, 0x14	; 20
     728:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     72c:	96 95       	lsr	r25
     72e:	87 95       	ror	r24
     730:	82 8f       	std	Z+26, r24	; 0x1a
     732:	93 8f       	std	Z+27, r25	; 0x1b
	m_structDGUSDATA[PROFILE_SLOW].EnergyPercent = 100; // W
     734:	04 8f       	std	Z+28, r16	; 0x1c
     736:	15 8f       	std	Z+29, r17	; 0x1d
	//m_structDGUSDATA[PROFILE_SLOW].Power     = (m_structDGUSDATA[PROFILE_SLOW].Intensity * m_structDGUSDATA[PROFILE_SLOW].DutyCycle) / 100; // W
	//m_structDGUSDATA[PROFILE_SLOW].Energy    = (m_structDGUSDATA[PROFILE_SLOW].Intensity * m_structDGUSDATA[PROFILE_SLOW].Duration) / 1000; // J
	
	// Medium profile
	m_structDGUSDATA[PROFILE_MEDIUM].Frequency = 5; // 10 Hz
     738:	85 e0       	ldi	r24, 0x05	; 5
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	84 a3       	std	Z+36, r24	; 0x24
     73e:	95 a3       	std	Z+37, r25	; 0x25
	m_structDGUSDATA[PROFILE_MEDIUM].DutyCycle = 50; // 50%
     740:	c6 a6       	std	Z+46, r12	; 0x2e
     742:	d7 a6       	std	Z+47, r13	; 0x2f
	m_structDGUSDATA[PROFILE_MEDIUM].Duration  = ((1000 / m_structDGUSDATA[PROFILE_MEDIUM].Frequency) * m_structDGUSDATA[PROFILE_MEDIUM].DutyCycle) / 100; // ms
     744:	64 a1       	ldd	r22, Z+36	; 0x24
     746:	75 a1       	ldd	r23, Z+37	; 0x25
     748:	c6 a4       	ldd	r12, Z+46	; 0x2e
     74a:	d7 a4       	ldd	r13, Z+47	; 0x2f
     74c:	c7 01       	movw	r24, r14
     74e:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
     752:	6c 9d       	mul	r22, r12
     754:	90 01       	movw	r18, r0
     756:	6d 9d       	mul	r22, r13
     758:	30 0d       	add	r19, r0
     75a:	7c 9d       	mul	r23, r12
     75c:	30 0d       	add	r19, r0
     75e:	11 24       	eor	r1, r1
     760:	36 95       	lsr	r19
     762:	27 95       	ror	r18
     764:	36 95       	lsr	r19
     766:	27 95       	ror	r18
     768:	ab e7       	ldi	r26, 0x7B	; 123
     76a:	b4 e1       	ldi	r27, 0x14	; 20
     76c:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     770:	96 95       	lsr	r25
     772:	87 95       	ror	r24
     774:	86 a3       	std	Z+38, r24	; 0x26
     776:	97 a3       	std	Z+39, r25	; 0x27
	m_structDGUSDATA[PROFILE_MEDIUM].EnergyPercent = 100; // W
     778:	00 a7       	std	Z+40, r16	; 0x28
     77a:	11 a7       	std	Z+41, r17	; 0x29
	//m_structDGUSDATA[PROFILE_MEDIUM].Power     = (m_structDGUSDATA[PROFILE_MEDIUM].Intensity * m_structDGUSDATA[PROFILE_MEDIUM].DutyCycle) / 100; // W
	//m_structDGUSDATA[PROFILE_MEDIUM].Energy    = (m_structDGUSDATA[PROFILE_MEDIUM].Intensity * m_structDGUSDATA[PROFILE_MEDIUM].Duration) / 1000; // J
	
	// Initialize Laser timer
	laserTimerPeriod = (6250 / m_structDGUSDATA[PROFILE_FAST].Frequency) * 10;
     77c:	60 a9       	ldd	r22, Z+48	; 0x30
     77e:	71 a9       	ldd	r23, Z+49	; 0x31
     780:	8a e6       	ldi	r24, 0x6A	; 106
     782:	98 e1       	ldi	r25, 0x18	; 24
     784:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
     788:	ab 01       	movw	r20, r22
     78a:	44 0f       	add	r20, r20
     78c:	55 1f       	adc	r21, r21
     78e:	66 0f       	add	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	66 0f       	add	r22, r22
     794:	77 1f       	adc	r23, r23
     796:	66 0f       	add	r22, r22
     798:	77 1f       	adc	r23, r23
     79a:	46 0f       	add	r20, r22
     79c:	57 1f       	adc	r21, r23
     79e:	48 8b       	std	Y+16, r20	; 0x10
     7a0:	59 8b       	std	Y+17, r21	; 0x11
	laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * m_structDGUSDATA[PROFILE_FAST].DutyCycle);
     7a2:	02 ac       	ldd	r0, Z+58	; 0x3a
     7a4:	f3 ad       	ldd	r31, Z+59	; 0x3b
     7a6:	e0 2d       	mov	r30, r0
     7a8:	9a 01       	movw	r18, r20
     7aa:	36 95       	lsr	r19
     7ac:	27 95       	ror	r18
     7ae:	36 95       	lsr	r19
     7b0:	27 95       	ror	r18
     7b2:	ab e7       	ldi	r26, 0x7B	; 123
     7b4:	b4 e1       	ldi	r27, 0x14	; 20
     7b6:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     7ba:	96 95       	lsr	r25
     7bc:	87 95       	ror	r24
     7be:	8e 9f       	mul	r24, r30
     7c0:	90 01       	movw	r18, r0
     7c2:	8f 9f       	mul	r24, r31
     7c4:	30 0d       	add	r19, r0
     7c6:	9e 9f       	mul	r25, r30
     7c8:	30 0d       	add	r19, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	42 1b       	sub	r20, r18
     7ce:	53 0b       	sbc	r21, r19
     7d0:	4a 8b       	std	Y+18, r20	; 0x12
     7d2:	5b 8b       	std	Y+19, r21	; 0x13
	
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     7d4:	47 e0       	ldi	r20, 0x07	; 7
     7d6:	63 e0       	ldi	r22, 0x03	; 3
     7d8:	87 e6       	ldi	r24, 0x67	; 103
     7da:	91 e2       	ldi	r25, 0x21	; 33
     7dc:	0e 94 65 23 	call	0x46ca	; 0x46ca <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);	// 10 Hz
     7e0:	68 89       	ldd	r22, Y+16	; 0x10
     7e2:	79 89       	ldd	r23, Y+17	; 0x11
     7e4:	87 e6       	ldi	r24, 0x67	; 103
     7e6:	91 e2       	ldi	r25, 0x21	; 33
     7e8:	0e 94 b3 23 	call	0x4766	; 0x4766 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     7ec:	6a 89       	ldd	r22, Y+18	; 0x12
     7ee:	7b 89       	ldd	r23, Y+19	; 0x13
     7f0:	87 e6       	ldi	r24, 0x67	; 103
     7f2:	91 e2       	ldi	r25, 0x21	; 33
     7f4:	0e 94 b8 23 	call	0x4770	; 0x4770 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
     7f8:	6a 89       	ldd	r22, Y+18	; 0x12
     7fa:	7b 89       	ldd	r23, Y+19	; 0x13
     7fc:	87 e6       	ldi	r24, 0x67	; 103
     7fe:	91 e2       	ldi	r25, 0x21	; 33
     800:	0e 94 bd 23 	call	0x477a	; 0x477a <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	ae 01       	movw	r20, r28
     808:	61 e1       	ldi	r22, 0x11	; 17
     80a:	73 e0       	ldi	r23, 0x03	; 3
     80c:	87 e6       	ldi	r24, 0x67	; 103
     80e:	91 e2       	ldi	r25, 0x21	; 33
     810:	0e 94 cc 23 	call	0x4798	; 0x4798 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     814:	60 e1       	ldi	r22, 0x10	; 16
     816:	87 e6       	ldi	r24, 0x67	; 103
     818:	91 e2       	ldi	r25, 0x21	; 33
     81a:	0e 94 95 23 	call	0x472a	; 0x472a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
     81e:	60 e2       	ldi	r22, 0x20	; 32
     820:	87 e6       	ldi	r24, 0x67	; 103
     822:	91 e2       	ldi	r25, 0x21	; 33
     824:	0e 94 95 23 	call	0x472a	; 0x472a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
     828:	60 e1       	ldi	r22, 0x10	; 16
     82a:	87 e6       	ldi	r24, 0x67	; 103
     82c:	91 e2       	ldi	r25, 0x21	; 33
     82e:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
     832:	60 e2       	ldi	r22, 0x20	; 32
     834:	87 e6       	ldi	r24, 0x67	; 103
     836:	91 e2       	ldi	r25, 0x21	; 33
     838:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	// Current profile
	profile = PROFILE_FAST;
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	8d 87       	std	Y+13, r24	; 0x0d
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	bf 90       	pop	r11
     852:	af 90       	pop	r10
     854:	08 95       	ret

00000856 <_ZN16CLaserControlApp3RunEv>:
	state = APP_WORKSETUP;
}

// Process GUI
void CLaserControlApp::Run()
{	
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	2e 97       	sbiw	r28, 0x0e	; 14
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     86e:	42 e0       	ldi	r20, 0x02	; 2
     870:	63 e0       	ldi	r22, 0x03	; 3
     872:	dc 01       	movw	r26, r24
     874:	5c 96       	adiw	r26, 0x1c	; 28
     876:	8d 91       	ld	r24, X+
     878:	9c 91       	ld	r25, X
     87a:	5d 97       	sbiw	r26, 0x1d	; 29
     87c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     880:	f8 01       	movw	r30, r16
     882:	84 8d       	ldd	r24, Z+28	; 0x1c
     884:	95 8d       	ldd	r25, Z+29	; 0x1d
     886:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     88a:	d8 01       	movw	r26, r16
     88c:	5c 96       	adiw	r26, 0x1c	; 28
     88e:	8d 91       	ld	r24, X+
     890:	9c 91       	ld	r25, X
     892:	5d 97       	sbiw	r26, 0x1d	; 29
     894:	0e 94 77 1e 	call	0x3cee	; 0x3cee <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     898:	bf ef       	ldi	r27, 0xFF	; 255
     89a:	e1 ee       	ldi	r30, 0xE1	; 225
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	b1 50       	subi	r27, 0x01	; 1
     8a0:	e0 40       	sbci	r30, 0x00	; 0
     8a2:	f0 40       	sbci	r31, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <_ZN16CLaserControlApp3RunEv+0x48>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <_ZN16CLaserControlApp3RunEv+0x52>
     8a8:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     8aa:	d8 01       	movw	r26, r16
     8ac:	1f 96       	adiw	r26, 0x0f	; 15
     8ae:	8c 91       	ld	r24, X
     8b0:	1f 97       	sbiw	r26, 0x0f	; 15
     8b2:	81 11       	cpse	r24, r1
     8b4:	1e c0       	rjmp	.+60     	; 0x8f2 <_ZN16CLaserControlApp3RunEv+0x9c>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
     8b6:	4c e0       	ldi	r20, 0x0C	; 12
     8b8:	62 e0       	ldi	r22, 0x02	; 2
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	5c 96       	adiw	r26, 0x1c	; 28
     8be:	8d 91       	ld	r24, X+
     8c0:	9c 91       	ld	r25, X
     8c2:	5d 97       	sbiw	r26, 0x1d	; 29
     8c4:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     8c8:	f8 01       	movw	r30, r16
     8ca:	84 8d       	ldd	r24, Z+28	; 0x1c
     8cc:	95 8d       	ldd	r25, Z+29	; 0x1d
     8ce:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     8d2:	d8 01       	movw	r26, r16
     8d4:	5c 96       	adiw	r26, 0x1c	; 28
     8d6:	8d 91       	ld	r24, X+
     8d8:	9c 91       	ld	r25, X
     8da:	5d 97       	sbiw	r26, 0x1d	; 29
     8dc:	0e 94 77 1e 	call	0x3cee	; 0x3cee <_ZN9CMBSender18WaitMODBUSListenerEv>
     8e0:	bf ef       	ldi	r27, 0xFF	; 255
     8e2:	e1 ee       	ldi	r30, 0xE1	; 225
     8e4:	f4 e0       	ldi	r31, 0x04	; 4
     8e6:	b1 50       	subi	r27, 0x01	; 1
     8e8:	e0 40       	sbci	r30, 0x00	; 0
     8ea:	f0 40       	sbci	r31, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <_ZN16CLaserControlApp3RunEv+0x90>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <_ZN16CLaserControlApp3RunEv+0x9a>
     8f0:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     8f2:	d8 01       	movw	r26, r16
     8f4:	1c 96       	adiw	r26, 0x0c	; 12
     8f6:	8c 91       	ld	r24, X
     8f8:	87 30       	cpi	r24, 0x07	; 7
     8fa:	28 f4       	brcc	.+10     	; 0x906 <_ZN16CLaserControlApp3RunEv+0xb0>
     8fc:	85 30       	cpi	r24, 0x05	; 5
     8fe:	38 f5       	brcc	.+78     	; 0x94e <_ZN16CLaserControlApp3RunEv+0xf8>
     900:	88 23       	and	r24, r24
     902:	51 f0       	breq	.+20     	; 0x918 <_ZN16CLaserControlApp3RunEv+0xc2>
     904:	4d c1       	rjmp	.+666    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
     906:	88 30       	cpi	r24, 0x08	; 8
     908:	09 f4       	brne	.+2      	; 0x90c <_ZN16CLaserControlApp3RunEv+0xb6>
     90a:	c1 c0       	rjmp	.+386    	; 0xa8e <_ZN16CLaserControlApp3RunEv+0x238>
     90c:	08 f4       	brcc	.+2      	; 0x910 <_ZN16CLaserControlApp3RunEv+0xba>
     90e:	96 c0       	rjmp	.+300    	; 0xa3c <_ZN16CLaserControlApp3RunEv+0x1e6>
     910:	89 30       	cpi	r24, 0x09	; 9
     912:	09 f4       	brne	.+2      	; 0x916 <_ZN16CLaserControlApp3RunEv+0xc0>
     914:	0d c1       	rjmp	.+538    	; 0xb30 <_ZN16CLaserControlApp3RunEv+0x2da>
     916:	44 c1       	rjmp	.+648    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
	{		
		// DGUS State
		case APP_LOGO:
			{
				uint16_t pic_id = swap(PICID_MAINMENU);
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     924:	22 e0       	ldi	r18, 0x02	; 2
     926:	ae 01       	movw	r20, r28
     928:	4f 5f       	subi	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	f8 01       	movw	r30, r16
     930:	84 8d       	ldd	r24, Z+28	; 0x1c
     932:	95 8d       	ldd	r25, Z+29	; 0x1d
     934:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     938:	d8 01       	movw	r26, r16
     93a:	5c 96       	adiw	r26, 0x1c	; 28
     93c:	8d 91       	ld	r24, X+
     93e:	9c 91       	ld	r25, X
     940:	5d 97       	sbiw	r26, 0x1d	; 29
     942:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				state = APP_WORKIDLE;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	f8 01       	movw	r30, r16
     94a:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
     94c:	29 c1       	rjmp	.+594    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{
				uint16_t pic_id = 0;
     94e:	19 82       	std	Y+1, r1	; 0x01
     950:	1a 82       	std	Y+2, r1	; 0x02
				
				if (!laserBoard.Footswitch())
     952:	8a e7       	ldi	r24, 0x7A	; 122
     954:	93 e2       	ldi	r25, 0x23	; 35
     956:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN11CLaserBoard10FootswitchEv>
     95a:	81 11       	cpse	r24, r1
     95c:	3a c0       	rjmp	.+116    	; 0x9d2 <_ZN16CLaserControlApp3RunEv+0x17c>
				{
					laserTimer.SetCOMPA(laserTimerDutyCycle);
     95e:	d8 01       	movw	r26, r16
     960:	52 96       	adiw	r26, 0x12	; 18
     962:	6d 91       	ld	r22, X+
     964:	7c 91       	ld	r23, X
     966:	53 97       	sbiw	r26, 0x13	; 19
     968:	87 e6       	ldi	r24, 0x67	; 103
     96a:	91 e2       	ldi	r25, 0x21	; 33
     96c:	0e 94 b8 23 	call	0x4770	; 0x4770 <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
     970:	f8 01       	movw	r30, r16
     972:	62 89       	ldd	r22, Z+18	; 0x12
     974:	73 89       	ldd	r23, Z+19	; 0x13
     976:	87 e6       	ldi	r24, 0x67	; 103
     978:	91 e2       	ldi	r25, 0x21	; 33
     97a:	0e 94 bd 23 	call	0x477a	; 0x477a <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
     97e:	d8 01       	movw	r26, r16
     980:	50 96       	adiw	r26, 0x10	; 16
     982:	6d 91       	ld	r22, X+
     984:	7c 91       	ld	r23, X
     986:	51 97       	sbiw	r26, 0x11	; 17
     988:	87 e6       	ldi	r24, 0x67	; 103
     98a:	91 e2       	ldi	r25, 0x21	; 33
     98c:	0e 94 80 23 	call	0x4700	; 0x4700 <_ZN7CTimerF5StartEj>
					// Show power on
					if (state != APP_WORKLIGHT)
     990:	f8 01       	movw	r30, r16
     992:	84 85       	ldd	r24, Z+12	; 0x0c
     994:	86 30       	cpi	r24, 0x06	; 6
     996:	09 f4       	brne	.+2      	; 0x99a <_ZN16CLaserControlApp3RunEv+0x144>
     998:	03 c1       	rjmp	.+518    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
					{
						pic_id = swap(PICID_WORK_STARTED);
     99a:	80 e1       	ldi	r24, 0x10	; 16
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	9a 83       	std	Y+2, r25	; 0x02
						
						m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     9a6:	22 e0       	ldi	r18, 0x02	; 2
     9a8:	ae 01       	movw	r20, r28
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	d8 01       	movw	r26, r16
     9b2:	5c 96       	adiw	r26, 0x1c	; 28
     9b4:	8d 91       	ld	r24, X+
     9b6:	9c 91       	ld	r25, X
     9b8:	5d 97       	sbiw	r26, 0x1d	; 29
     9ba:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
						m_cpSender->WaitMODBUSTransmitter();
     9be:	f8 01       	movw	r30, r16
     9c0:	84 8d       	ldd	r24, Z+28	; 0x1c
     9c2:	95 8d       	ldd	r25, Z+29	; 0x1d
     9c4:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
						state = APP_WORKLIGHT;
     9c8:	86 e0       	ldi	r24, 0x06	; 6
     9ca:	d8 01       	movw	r26, r16
     9cc:	1c 96       	adiw	r26, 0x0c	; 12
     9ce:	8c 93       	st	X, r24
     9d0:	e7 c0       	rjmp	.+462    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
					}
				}
				else
				{
					laserTimer.Stop();
     9d2:	87 e6       	ldi	r24, 0x67	; 103
     9d4:	91 e2       	ldi	r25, 0x21	; 33
     9d6:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN7CTimerF4StopEv>
					laserTimer.ChannelSet(TIMER_CHANNEL_A);
     9da:	60 e1       	ldi	r22, 0x10	; 16
     9dc:	87 e6       	ldi	r24, 0x67	; 103
     9de:	91 e2       	ldi	r25, 0x21	; 33
     9e0:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
					laserTimer.ChannelSet(TIMER_CHANNEL_B);
     9e4:	60 e2       	ldi	r22, 0x20	; 32
     9e6:	87 e6       	ldi	r24, 0x67	; 103
     9e8:	91 e2       	ldi	r25, 0x21	; 33
     9ea:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
					// Show light
					pic_id = swap(PICID_WORK_POWERON);
     9ee:	8e e0       	ldi	r24, 0x0E	; 14
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	9a 83       	std	Y+2, r25	; 0x02
					// Show power on
					if (state != APP_WORKPOWERON)
     9fa:	f8 01       	movw	r30, r16
     9fc:	84 85       	ldd	r24, Z+12	; 0x0c
     9fe:	85 30       	cpi	r24, 0x05	; 5
     a00:	09 f4       	brne	.+2      	; 0xa04 <_ZN16CLaserControlApp3RunEv+0x1ae>
     a02:	ce c0       	rjmp	.+412    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
					{
						pic_id = swap(PICID_WORK_POWERON);
     a04:	8e e0       	ldi	r24, 0x0E	; 14
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	9a 83       	std	Y+2, r25	; 0x02
						
						m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a10:	22 e0       	ldi	r18, 0x02	; 2
     a12:	ae 01       	movw	r20, r28
     a14:	4f 5f       	subi	r20, 0xFF	; 255
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	63 e0       	ldi	r22, 0x03	; 3
     a1a:	d8 01       	movw	r26, r16
     a1c:	5c 96       	adiw	r26, 0x1c	; 28
     a1e:	8d 91       	ld	r24, X+
     a20:	9c 91       	ld	r25, X
     a22:	5d 97       	sbiw	r26, 0x1d	; 29
     a24:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
						m_cpSender->WaitMODBUSTransmitter();
     a28:	f8 01       	movw	r30, r16
     a2a:	84 8d       	ldd	r24, Z+28	; 0x1c
     a2c:	95 8d       	ldd	r25, Z+29	; 0x1d
     a2e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
						state = APP_WORKPOWERON;
     a32:	85 e0       	ldi	r24, 0x05	; 5
     a34:	d8 01       	movw	r26, r16
     a36:	1c 96       	adiw	r26, 0x0c	; 12
     a38:	8c 93       	st	X, r24
					}
				}
			}
		break;
     a3a:	b2 c0       	rjmp	.+356    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
		
		// Commands
		case APP_WORKOnReady:
			{
				laserBoard.Relay2On();
     a3c:	8a e7       	ldi	r24, 0x7A	; 122
     a3e:	93 e2       	ldi	r25, 0x23	; 35
     a40:	0e 94 4d 20 	call	0x409a	; 0x409a <_ZN11CLaserBoard8Relay2OnEv>
				laserBoard.LaserPowerOn();
     a44:	8a e7       	ldi	r24, 0x7A	; 122
     a46:	93 e2       	ldi	r25, 0x23	; 35
     a48:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t pic_id = swap(PICID_WORK_READY);
     a4c:	8c e0       	ldi	r24, 0x0C	; 12
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a58:	22 e0       	ldi	r18, 0x02	; 2
     a5a:	ae 01       	movw	r20, r28
     a5c:	4f 5f       	subi	r20, 0xFF	; 255
     a5e:	5f 4f       	sbci	r21, 0xFF	; 255
     a60:	63 e0       	ldi	r22, 0x03	; 3
     a62:	f8 01       	movw	r30, r16
     a64:	84 8d       	ldd	r24, Z+28	; 0x1c
     a66:	95 8d       	ldd	r25, Z+29	; 0x1d
     a68:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     a6c:	d8 01       	movw	r26, r16
     a6e:	5c 96       	adiw	r26, 0x1c	; 28
     a70:	8d 91       	ld	r24, X+
     a72:	9c 91       	ld	r25, X
     a74:	5d 97       	sbiw	r26, 0x1d	; 29
     a76:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     a7a:	bf ef       	ldi	r27, 0xFF	; 255
     a7c:	e1 ee       	ldi	r30, 0xE1	; 225
     a7e:	f4 e0       	ldi	r31, 0x04	; 4
     a80:	b1 50       	subi	r27, 0x01	; 1
     a82:	e0 40       	sbci	r30, 0x00	; 0
     a84:	f0 40       	sbci	r31, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <_ZN16CLaserControlApp3RunEv+0x22a>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <_ZN16CLaserControlApp3RunEv+0x234>
     a8a:	00 00       	nop
				_delay_ms(50);
			}
		break;
     a8c:	89 c0       	rjmp	.+274    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 64) / 63)) << 2;  // (laserPower * 1024) / 1000)
     a8e:	d8 01       	movw	r26, r16
     a90:	56 96       	adiw	r26, 0x16	; 22
     a92:	4d 91       	ld	r20, X+
     a94:	5c 91       	ld	r21, X
     a96:	57 97       	sbiw	r26, 0x17	; 23
     a98:	00 24       	eor	r0, r0
     a9a:	56 95       	lsr	r21
     a9c:	47 95       	ror	r20
     a9e:	07 94       	ror	r0
     aa0:	56 95       	lsr	r21
     aa2:	47 95       	ror	r20
     aa4:	07 94       	ror	r0
     aa6:	54 2f       	mov	r21, r20
     aa8:	40 2d       	mov	r20, r0
     aaa:	9a 01       	movw	r18, r20
     aac:	a1 e1       	ldi	r26, 0x11	; 17
     aae:	b4 e0       	ldi	r27, 0x04	; 4
     ab0:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     ab4:	48 1b       	sub	r20, r24
     ab6:	59 0b       	sbc	r21, r25
     ab8:	56 95       	lsr	r21
     aba:	47 95       	ror	r20
     abc:	84 0f       	add	r24, r20
     abe:	95 1f       	adc	r25, r21
     ac0:	96 95       	lsr	r25
     ac2:	87 95       	ror	r24
     ac4:	92 95       	swap	r25
     ac6:	82 95       	swap	r24
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	89 27       	eor	r24, r25
     acc:	9f 70       	andi	r25, 0x0F	; 15
     ace:	89 27       	eor	r24, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	8d 87       	std	Y+13, r24	; 0x0d
     ada:	9e 87       	std	Y+14, r25	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     adc:	42 e0       	ldi	r20, 0x02	; 2
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	be 01       	movw	r22, r28
     ae2:	63 5f       	subi	r22, 0xF3	; 243
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	86 ea       	ldi	r24, 0xA6	; 166
     ae8:	93 e2       	ldi	r25, 0x23	; 35
     aea:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN4CSPI4SendEPhj>
				
				uint16_t pic_id = swap(PICID_WORK_POWERON);
     aee:	8e e0       	ldi	r24, 0x0E	; 14
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	9a 83       	std	Y+2, r25	; 0x02
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     afa:	22 e0       	ldi	r18, 0x02	; 2
     afc:	ae 01       	movw	r20, r28
     afe:	4f 5f       	subi	r20, 0xFF	; 255
     b00:	5f 4f       	sbci	r21, 0xFF	; 255
     b02:	63 e0       	ldi	r22, 0x03	; 3
     b04:	f8 01       	movw	r30, r16
     b06:	84 8d       	ldd	r24, Z+28	; 0x1c
     b08:	95 8d       	ldd	r25, Z+29	; 0x1d
     b0a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     b0e:	d8 01       	movw	r26, r16
     b10:	5c 96       	adiw	r26, 0x1c	; 28
     b12:	8d 91       	ld	r24, X+
     b14:	9c 91       	ld	r25, X
     b16:	5d 97       	sbiw	r26, 0x1d	; 29
     b18:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     b1c:	bf ef       	ldi	r27, 0xFF	; 255
     b1e:	e1 ee       	ldi	r30, 0xE1	; 225
     b20:	f4 e0       	ldi	r31, 0x04	; 4
     b22:	b1 50       	subi	r27, 0x01	; 1
     b24:	e0 40       	sbci	r30, 0x00	; 0
     b26:	f0 40       	sbci	r31, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <_ZN16CLaserControlApp3RunEv+0x2cc>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <_ZN16CLaserControlApp3RunEv+0x2d6>
     b2c:	00 00       	nop
				_delay_ms(50);
			}
		break;
     b2e:	38 c0       	rjmp	.+112    	; 0xba0 <_ZN16CLaserControlApp3RunEv+0x34a>
		case APP_WORKOnPowerOff:
			{
				uint16_t pic_id = swap(PICID_WORK_IDLE);
     b30:	8a e0       	ldi	r24, 0x0A	; 10
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 b4 06 	call	0xd68	; 0xd68 <_Z4swapj>
     b38:	8d 87       	std	Y+13, r24	; 0x0d
     b3a:	9e 87       	std	Y+14, r25	; 0x0e
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b3c:	22 e0       	ldi	r18, 0x02	; 2
     b3e:	ae 01       	movw	r20, r28
     b40:	43 5f       	subi	r20, 0xF3	; 243
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	63 e0       	ldi	r22, 0x03	; 3
     b46:	d8 01       	movw	r26, r16
     b48:	5c 96       	adiw	r26, 0x1c	; 28
     b4a:	8d 91       	ld	r24, X+
     b4c:	9c 91       	ld	r25, X
     b4e:	5d 97       	sbiw	r26, 0x1d	; 29
     b50:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
     b54:	f8 01       	movw	r30, r16
     b56:	84 8d       	ldd	r24, Z+28	; 0x1c
     b58:	95 8d       	ldd	r25, Z+29	; 0x1d
     b5a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
				
				laserTimer.Stop();
     b5e:	87 e6       	ldi	r24, 0x67	; 103
     b60:	91 e2       	ldi	r25, 0x21	; 33
     b62:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
     b66:	60 e1       	ldi	r22, 0x10	; 16
     b68:	87 e6       	ldi	r24, 0x67	; 103
     b6a:	91 e2       	ldi	r25, 0x21	; 33
     b6c:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
     b70:	60 e2       	ldi	r22, 0x20	; 32
     b72:	87 e6       	ldi	r24, 0x67	; 103
     b74:	91 e2       	ldi	r25, 0x21	; 33
     b76:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
     b7a:	8a e7       	ldi	r24, 0x7A	; 122
     b7c:	93 e2       	ldi	r25, 0x23	; 35
     b7e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <_ZN11CLaserBoard13LaserPowerOffEv>
				laserBoard.Relay2Off();
     b82:	8a e7       	ldi	r24, 0x7A	; 122
     b84:	93 e2       	ldi	r25, 0x23	; 35
     b86:	0e 94 55 20 	call	0x40aa	; 0x40aa <_ZN11CLaserBoard9Relay2OffEv>
				
				uint16_t data = 0;
     b8a:	19 82       	std	Y+1, r1	; 0x01
     b8c:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
     b8e:	42 e0       	ldi	r20, 0x02	; 2
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	be 01       	movw	r22, r28
     b94:	6f 5f       	subi	r22, 0xFF	; 255
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	86 ea       	ldi	r24, 0xA6	; 166
     b9a:	93 e2       	ldi	r25, 0x23	; 35
     b9c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN4CSPI4SendEPhj>
		break;
	}
	
	DGUS_LASERPROFILE DGUSDATA;
	
	if (update)
     ba0:	d8 01       	movw	r26, r16
     ba2:	1f 96       	adiw	r26, 0x0f	; 15
     ba4:	8c 91       	ld	r24, X
     ba6:	1f 97       	sbiw	r26, 0x0f	; 15
     ba8:	88 23       	and	r24, r24
     baa:	11 f1       	breq	.+68     	; 0xbf0 <_ZN16CLaserControlApp3RunEv+0x39a>
	{
		m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structDGUSDATA[profile], sizeof(DGUS_LASERPROFILE));
     bac:	1d 96       	adiw	r26, 0x0d	; 13
     bae:	8c 91       	ld	r24, X
     bb0:	1d 97       	sbiw	r26, 0x0d	; 13
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	ac 01       	movw	r20, r24
     bb6:	44 0f       	add	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	48 0f       	add	r20, r24
     bbc:	59 1f       	adc	r21, r25
     bbe:	44 0f       	add	r20, r20
     bc0:	55 1f       	adc	r21, r21
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	49 5c       	subi	r20, 0xC9	; 201
     bc8:	5e 4d       	sbci	r21, 0xDE	; 222
     bca:	2c e0       	ldi	r18, 0x0C	; 12
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	5c 96       	adiw	r26, 0x1c	; 28
     bd4:	8d 91       	ld	r24, X+
     bd6:	9c 91       	ld	r25, X
     bd8:	5d 97       	sbiw	r26, 0x1d	; 29
     bda:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
		m_cpSender->WaitMODBUSTransmitter();
     bde:	f8 01       	movw	r30, r16
     be0:	84 8d       	ldd	r24, Z+28	; 0x1c
     be2:	95 8d       	ldd	r25, Z+29	; 0x1d
     be4:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
     be8:	d8 01       	movw	r26, r16
     bea:	1f 96       	adiw	r26, 0x0f	; 15
     bec:	1c 92       	st	X, r1
     bee:	86 c0       	rjmp	.+268    	; 0xcfc <_ZN16CLaserControlApp3RunEv+0x4a6>
	}
	else
	{
		// Fast profile
		DGUSDATA.DutyCycle = m_structDGUSDATA[profile].Duration * m_structDGUSDATA[profile].Frequency / 10;
     bf0:	f8 01       	movw	r30, r16
     bf2:	45 85       	ldd	r20, Z+13	; 0x0d
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	7a 01       	movw	r14, r20
     bf8:	ee 0c       	add	r14, r14
     bfa:	ff 1c       	adc	r15, r15
     bfc:	f7 01       	movw	r30, r14
     bfe:	e4 0f       	add	r30, r20
     c00:	f5 1f       	adc	r31, r21
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	e9 5c       	subi	r30, 0xC9	; 201
     c0c:	fe 4d       	sbci	r31, 0xDE	; 222
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	93 81       	ldd	r25, Z+3	; 0x03
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	68 9f       	mul	r22, r24
     c18:	90 01       	movw	r18, r0
     c1a:	69 9f       	mul	r22, r25
     c1c:	30 0d       	add	r19, r0
     c1e:	78 9f       	mul	r23, r24
     c20:	30 0d       	add	r19, r0
     c22:	11 24       	eor	r1, r1
     c24:	ad ec       	ldi	r26, 0xCD	; 205
     c26:	bc ec       	ldi	r27, 0xCC	; 204
     c28:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     c2c:	fc 01       	movw	r30, r24
     c2e:	f6 95       	lsr	r31
     c30:	e7 95       	ror	r30
     c32:	f6 95       	lsr	r31
     c34:	e7 95       	ror	r30
     c36:	f6 95       	lsr	r31
     c38:	e7 95       	ror	r30
     c3a:	eb 87       	std	Y+11, r30	; 0x0b
     c3c:	fc 87       	std	Y+12, r31	; 0x0c
		//DGUSDATA.Power     = (m_structDGUSDATA[profile].Intensity * m_structDGUSDATA[profile].DutyCycle) / 100;
		//DGUSDATA.Energy    = m_structDGUSDATA[profile].Intensity * m_structDGUSDATA[profile].Duration / 1000;
		
		laserTimerPeriod = (6250 / m_structDGUSDATA[profile].Frequency) * 10;
     c3e:	d7 01       	movw	r26, r14
     c40:	a4 0f       	add	r26, r20
     c42:	b5 1f       	adc	r27, r21
     c44:	aa 0f       	add	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	aa 0f       	add	r26, r26
     c4a:	bb 1f       	adc	r27, r27
     c4c:	a9 5c       	subi	r26, 0xC9	; 201
     c4e:	be 4d       	sbci	r27, 0xDE	; 222
     c50:	6d 91       	ld	r22, X+
     c52:	7c 91       	ld	r23, X
     c54:	8a e6       	ldi	r24, 0x6A	; 106
     c56:	98 e1       	ldi	r25, 0x18	; 24
     c58:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
     c5c:	ab 01       	movw	r20, r22
     c5e:	44 0f       	add	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	66 0f       	add	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	66 0f       	add	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	46 0f       	add	r20, r22
     c70:	57 1f       	adc	r21, r23
     c72:	d8 01       	movw	r26, r16
     c74:	50 96       	adiw	r26, 0x10	; 16
     c76:	4d 93       	st	X+, r20
     c78:	5c 93       	st	X, r21
     c7a:	51 97       	sbiw	r26, 0x11	; 17
		laserTimerDutyCycle = laserTimerPeriod - ((laserTimerPeriod / 100) * DGUSDATA.DutyCycle);
     c7c:	9a 01       	movw	r18, r20
     c7e:	36 95       	lsr	r19
     c80:	27 95       	ror	r18
     c82:	36 95       	lsr	r19
     c84:	27 95       	ror	r18
     c86:	ab e7       	ldi	r26, 0x7B	; 123
     c88:	b4 e1       	ldi	r27, 0x14	; 20
     c8a:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	8e 9f       	mul	r24, r30
     c94:	90 01       	movw	r18, r0
     c96:	8f 9f       	mul	r24, r31
     c98:	30 0d       	add	r19, r0
     c9a:	9e 9f       	mul	r25, r30
     c9c:	30 0d       	add	r19, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	42 1b       	sub	r20, r18
     ca2:	53 0b       	sbc	r21, r19
     ca4:	d8 01       	movw	r26, r16
     ca6:	52 96       	adiw	r26, 0x12	; 18
     ca8:	4d 93       	st	X+, r20
     caa:	5c 93       	st	X, r21
     cac:	53 97       	sbiw	r26, 0x13	; 19
		laserTimerDutyCyclems = DGUSDATA.DutyCycle;
     cae:	54 96       	adiw	r26, 0x14	; 20
     cb0:	ed 93       	st	X+, r30
     cb2:	fc 93       	st	X, r31
     cb4:	55 97       	sbiw	r26, 0x15	; 21
		laserPower = DGUSDATA.EnergyPercent * 10; //m_structDGUSDATA[profile].Intensity;
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	9e 81       	ldd	r25, Y+6	; 0x06
     cba:	9c 01       	movw	r18, r24
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	82 0f       	add	r24, r18
     cce:	93 1f       	adc	r25, r19
     cd0:	56 96       	adiw	r26, 0x16	; 22
     cd2:	8d 93       	st	X+, r24
     cd4:	9c 93       	st	X, r25
     cd6:	57 97       	sbiw	r26, 0x17	; 23
		
		m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&DGUSDATA, sizeof(DGUS_LASERPROFILE));
     cd8:	2c e0       	ldi	r18, 0x0C	; 12
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	ae 01       	movw	r20, r28
     cde:	4f 5f       	subi	r20, 0xFF	; 255
     ce0:	5f 4f       	sbci	r21, 0xFF	; 255
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	5c 96       	adiw	r26, 0x1c	; 28
     ce8:	8d 91       	ld	r24, X+
     cea:	9c 91       	ld	r25, X
     cec:	5d 97       	sbiw	r26, 0x1d	; 29
     cee:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
		m_cpSender->WaitMODBUSTransmitter();
     cf2:	f8 01       	movw	r30, r16
     cf4:	84 8d       	ldd	r24, Z+28	; 0x1c
     cf6:	95 8d       	ldd	r25, Z+29	; 0x1d
     cf8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
     cfc:	2e 96       	adiw	r28, 0x0e	; 14
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	08 95       	ret

00000d10 <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	7c 01       	movw	r14, r24
     d22:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     d24:	41 15       	cp	r20, r1
     d26:	51 05       	cpc	r21, r1
     d28:	b1 f0       	breq	.+44     	; 0xd56 <_Z11ConvertDataPvS_jj+0x46>
     d2a:	6b 01       	movw	r12, r22
     d2c:	c4 0e       	add	r12, r20
     d2e:	d5 1e       	adc	r13, r21
     d30:	eb 01       	movw	r28, r22
     d32:	26 1b       	sub	r18, r22
     d34:	37 0b       	sbc	r19, r23
     d36:	c9 01       	movw	r24, r18
     d38:	8c 0f       	add	r24, r28
     d3a:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     d3c:	b8 01       	movw	r22, r16
     d3e:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
     d42:	fc 01       	movw	r30, r24
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	e4 27       	eor	r30, r20
     d48:	ee 0d       	add	r30, r14
     d4a:	ff 1d       	adc	r31, r15
     d4c:	89 91       	ld	r24, Y+
     d4e:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     d50:	cc 15       	cp	r28, r12
     d52:	dd 05       	cpc	r29, r13
     d54:	81 f7       	brne	.-32     	; 0xd36 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	08 95       	ret

00000d68 <_Z4swapj>:
}

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
     d68:	98 27       	eor	r25, r24
     d6a:	89 27       	eor	r24, r25
     d6c:	98 27       	eor	r25, r24
     d6e:	08 95       	ret

00000d70 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
     d70:	08 95       	ret

00000d72 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
     d72:	08 95       	ret

00000d74 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
     d74:	ef 92       	push	r14
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
     d80:	e0 e8       	ldi	r30, 0x80	; 128
     d82:	f6 e0       	ldi	r31, 0x06	; 6
     d84:	80 eb       	ldi	r24, 0xB0	; 176
     d86:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
     d88:	90 e4       	ldi	r25, 0x40	; 64
     d8a:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     d8c:	90 ec       	ldi	r25, 0xC0	; 192
     d8e:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     d90:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     d92:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
     d94:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
     d96:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
     d98:	61 11       	cpse	r22, r1
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
     d9c:	80 e4       	ldi	r24, 0x40	; 64
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
     da0:	80 e5       	ldi	r24, 0x50	; 80
     da2:	01 11       	cpse	r16, r1
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	01 c0       	rjmp	.+2      	; 0xdac <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
     daa:	30 e8       	ldi	r19, 0x80	; 128
     dac:	41 11       	cpse	r20, r1
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
     db4:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
     db6:	22 0f       	add	r18, r18
     db8:	22 0f       	add	r18, r18
     dba:	e2 2a       	or	r14, r18
     dbc:	e8 2a       	or	r14, r24
     dbe:	e3 2a       	or	r14, r19
		prescaler;
     dc0:	e9 2a       	or	r14, r25
     dc2:	00 ec       	ldi	r16, 0xC0	; 192
     dc4:	1a e0       	ldi	r17, 0x0A	; 10
     dc6:	f8 01       	movw	r30, r16
     dc8:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 b8 24 	call	0x4970	; 0x4970 <malloc>
     dd2:	88 83       	st	Y, r24
     dd4:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	f8 01       	movw	r30, r16
     dda:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
     ddc:	86 e3       	ldi	r24, 0x36	; 54
     dde:	97 e0       	ldi	r25, 0x07	; 7
     de0:	80 93 df 21 	sts	0x21DF, r24
     de4:	90 93 e0 21 	sts	0x21E0, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
     de8:	c0 93 d5 22 	sts	0x22D5, r28
     dec:	d0 93 d6 22 	sts	0x22D6, r29
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
	rx_pos = length;
     e02:	4a 83       	std	Y+2, r20	; 0x02
     e04:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
     e06:	4c 83       	std	Y+4, r20	; 0x04
     e08:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
     e0a:	88 81       	ld	r24, Y
     e0c:	99 81       	ldd	r25, Y+1	; 0x01
     e0e:	0e 94 e5 25 	call	0x4bca	; 0x4bca <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
     e18:	88 81       	ld	r24, Y
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
     e1c:	4a 81       	ldd	r20, Y+2	; 0x02
     e1e:	5b 81       	ldd	r21, Y+3	; 0x03
     e20:	9a 01       	movw	r18, r20
     e22:	21 50       	subi	r18, 0x01	; 1
     e24:	31 09       	sbc	r19, r1
     e26:	2a 83       	std	Y+2, r18	; 0x02
     e28:	3b 83       	std	Y+3, r19	; 0x03
     e2a:	fc 01       	movw	r30, r24
     e2c:	e2 0f       	add	r30, r18
     e2e:	f3 1f       	adc	r31, r19
     e30:	80 81       	ld	r24, Z
     e32:	80 93 c3 0a 	sts	0x0AC3, r24
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
     e3c:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	89 2b       	or	r24, r25
     e44:	79 f0       	breq	.+30     	; 0xe64 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	33 81       	ldd	r19, Z+3	; 0x03
     e4e:	c9 01       	movw	r24, r18
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	82 83       	std	Z+2, r24	; 0x02
     e54:	93 83       	std	Z+3, r25	; 0x03
     e56:	fa 01       	movw	r30, r20
     e58:	e8 0f       	add	r30, r24
     e5a:	f9 1f       	adc	r31, r25
     e5c:	80 81       	ld	r24, Z
     e5e:	80 93 c3 0a 	sts	0x0AC3, r24
     e62:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
     e64:	80 e1       	ldi	r24, 0x10	; 16
     e66:	80 93 85 06 	sts	0x0685, r24
     e6a:	08 95       	ret

00000e6c <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
     e6c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4CSPI10OnTransmitEv>
     e70:	08 95       	ret

00000e72 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
     e72:	20 e6       	ldi	r18, 0x60	; 96
     e74:	30 e2       	ldi	r19, 0x20	; 32
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
     e7a:	31 83       	std	Z+1, r19	; 0x01
     e7c:	08 95       	ret

00000e7e <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
     e7e:	08 95       	ret

00000e80 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
     e80:	24 e8       	ldi	r18, 0x84	; 132
     e82:	30 e2       	ldi	r19, 0x20	; 32
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	08 95       	ret

00000e8c <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
     e8c:	08 95       	ret

00000e8e <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	0b b6       	in	r0, 0x3b	; 59
     e9a:	0f 92       	push	r0
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	e0 91 6f 21 	lds	r30, 0x216F
     eb8:	f0 91 70 21 	lds	r31, 0x2170
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	29 f0       	breq	.+10     	; 0xeca <__vector_1+0x3c>
     ec0:	80 91 65 22 	lds	r24, 0x2265
     ec4:	90 91 66 22 	lds	r25, 0x2266
     ec8:	19 95       	eicall
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0b be       	out	0x3b, r0	; 59
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	0b b6       	in	r0, 0x3b	; 59
     efc:	0f 92       	push	r0
     efe:	2f 93       	push	r18
     f00:	3f 93       	push	r19
     f02:	4f 93       	push	r20
     f04:	5f 93       	push	r21
     f06:	6f 93       	push	r22
     f08:	7f 93       	push	r23
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	e0 91 71 21 	lds	r30, 0x2171
     f1a:	f0 91 72 21 	lds	r31, 0x2172
     f1e:	30 97       	sbiw	r30, 0x00	; 0
     f20:	29 f0       	breq	.+10     	; 0xf2c <__vector_2+0x3c>
     f22:	80 91 67 22 	lds	r24, 0x2267
     f26:	90 91 68 22 	lds	r25, 0x2268
     f2a:	19 95       	eicall
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	0b b6       	in	r0, 0x3b	; 59
     f5e:	0f 92       	push	r0
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	e0 91 73 21 	lds	r30, 0x2173
     f7c:	f0 91 74 21 	lds	r31, 0x2174
     f80:	30 97       	sbiw	r30, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <__vector_3+0x3c>
     f84:	80 91 69 22 	lds	r24, 0x2269
     f88:	90 91 6a 22 	lds	r25, 0x226A
     f8c:	19 95       	eicall
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0b be       	out	0x3b, r0	; 59
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	0b b6       	in	r0, 0x3b	; 59
     fc0:	0f 92       	push	r0
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	e0 91 75 21 	lds	r30, 0x2175
     fde:	f0 91 76 21 	lds	r31, 0x2176
     fe2:	30 97       	sbiw	r30, 0x00	; 0
     fe4:	29 f0       	breq	.+10     	; 0xff0 <__vector_4+0x3c>
     fe6:	80 91 6b 22 	lds	r24, 0x226B
     fea:	90 91 6c 22 	lds	r25, 0x226C
     fee:	19 95       	eicall
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0b be       	out	0x3b, r0	; 59
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	0b b6       	in	r0, 0x3b	; 59
    1022:	0f 92       	push	r0
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	4f 93       	push	r20
    102a:	5f 93       	push	r21
    102c:	6f 93       	push	r22
    102e:	7f 93       	push	r23
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	e0 91 77 21 	lds	r30, 0x2177
    1040:	f0 91 78 21 	lds	r31, 0x2178
    1044:	30 97       	sbiw	r30, 0x00	; 0
    1046:	29 f0       	breq	.+10     	; 0x1052 <__vector_5+0x3c>
    1048:	80 91 6d 22 	lds	r24, 0x226D
    104c:	90 91 6e 22 	lds	r25, 0x226E
    1050:	19 95       	eicall
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0b be       	out	0x3b, r0	; 59
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	0b b6       	in	r0, 0x3b	; 59
    1084:	0f 92       	push	r0
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
    109e:	e0 91 79 21 	lds	r30, 0x2179
    10a2:	f0 91 7a 21 	lds	r31, 0x217A
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	29 f0       	breq	.+10     	; 0x10b4 <__vector_6+0x3c>
    10aa:	80 91 6f 22 	lds	r24, 0x226F
    10ae:	90 91 70 22 	lds	r25, 0x2270
    10b2:	19 95       	eicall
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0b be       	out	0x3b, r0	; 59
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	0b b6       	in	r0, 0x3b	; 59
    10e6:	0f 92       	push	r0
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
    1100:	e0 91 7b 21 	lds	r30, 0x217B
    1104:	f0 91 7c 21 	lds	r31, 0x217C
    1108:	30 97       	sbiw	r30, 0x00	; 0
    110a:	29 f0       	breq	.+10     	; 0x1116 <__vector_7+0x3c>
    110c:	80 91 71 22 	lds	r24, 0x2271
    1110:	90 91 72 22 	lds	r25, 0x2272
    1114:	19 95       	eicall
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0b be       	out	0x3b, r0	; 59
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	0b b6       	in	r0, 0x3b	; 59
    1148:	0f 92       	push	r0
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	e0 91 7d 21 	lds	r30, 0x217D
    1166:	f0 91 7e 21 	lds	r31, 0x217E
    116a:	30 97       	sbiw	r30, 0x00	; 0
    116c:	29 f0       	breq	.+10     	; 0x1178 <__vector_8+0x3c>
    116e:	80 91 73 22 	lds	r24, 0x2273
    1172:	90 91 74 22 	lds	r25, 0x2274
    1176:	19 95       	eicall
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0b be       	out	0x3b, r0	; 59
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	0b b6       	in	r0, 0x3b	; 59
    11aa:	0f 92       	push	r0
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
    11c4:	e0 91 7f 21 	lds	r30, 0x217F
    11c8:	f0 91 80 21 	lds	r31, 0x2180
    11cc:	30 97       	sbiw	r30, 0x00	; 0
    11ce:	29 f0       	breq	.+10     	; 0x11da <__vector_9+0x3c>
    11d0:	80 91 75 22 	lds	r24, 0x2275
    11d4:	90 91 76 22 	lds	r25, 0x2276
    11d8:	19 95       	eicall
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0b be       	out	0x3b, r0	; 59
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	0b b6       	in	r0, 0x3b	; 59
    120c:	0f 92       	push	r0
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    1226:	e0 91 81 21 	lds	r30, 0x2181
    122a:	f0 91 82 21 	lds	r31, 0x2182
    122e:	30 97       	sbiw	r30, 0x00	; 0
    1230:	29 f0       	breq	.+10     	; 0x123c <__vector_10+0x3c>
    1232:	80 91 77 22 	lds	r24, 0x2277
    1236:	90 91 78 22 	lds	r25, 0x2278
    123a:	19 95       	eicall
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0b be       	out	0x3b, r0	; 59
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	0b b6       	in	r0, 0x3b	; 59
    126e:	0f 92       	push	r0
    1270:	2f 93       	push	r18
    1272:	3f 93       	push	r19
    1274:	4f 93       	push	r20
    1276:	5f 93       	push	r21
    1278:	6f 93       	push	r22
    127a:	7f 93       	push	r23
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
    1284:	ef 93       	push	r30
    1286:	ff 93       	push	r31
    1288:	e0 91 83 21 	lds	r30, 0x2183
    128c:	f0 91 84 21 	lds	r31, 0x2184
    1290:	30 97       	sbiw	r30, 0x00	; 0
    1292:	29 f0       	breq	.+10     	; 0x129e <__vector_11+0x3c>
    1294:	80 91 79 22 	lds	r24, 0x2279
    1298:	90 91 7a 22 	lds	r25, 0x227A
    129c:	19 95       	eicall
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0b be       	out	0x3b, r0	; 59
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	0b b6       	in	r0, 0x3b	; 59
    12d0:	0f 92       	push	r0
    12d2:	2f 93       	push	r18
    12d4:	3f 93       	push	r19
    12d6:	4f 93       	push	r20
    12d8:	5f 93       	push	r21
    12da:	6f 93       	push	r22
    12dc:	7f 93       	push	r23
    12de:	8f 93       	push	r24
    12e0:	9f 93       	push	r25
    12e2:	af 93       	push	r26
    12e4:	bf 93       	push	r27
    12e6:	ef 93       	push	r30
    12e8:	ff 93       	push	r31
    12ea:	e0 91 85 21 	lds	r30, 0x2185
    12ee:	f0 91 86 21 	lds	r31, 0x2186
    12f2:	30 97       	sbiw	r30, 0x00	; 0
    12f4:	29 f0       	breq	.+10     	; 0x1300 <__vector_12+0x3c>
    12f6:	80 91 7b 22 	lds	r24, 0x227B
    12fa:	90 91 7c 22 	lds	r25, 0x227C
    12fe:	19 95       	eicall
    1300:	ff 91       	pop	r31
    1302:	ef 91       	pop	r30
    1304:	bf 91       	pop	r27
    1306:	af 91       	pop	r26
    1308:	9f 91       	pop	r25
    130a:	8f 91       	pop	r24
    130c:	7f 91       	pop	r23
    130e:	6f 91       	pop	r22
    1310:	5f 91       	pop	r21
    1312:	4f 91       	pop	r20
    1314:	3f 91       	pop	r19
    1316:	2f 91       	pop	r18
    1318:	0f 90       	pop	r0
    131a:	0b be       	out	0x3b, r0	; 59
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	0b b6       	in	r0, 0x3b	; 59
    1332:	0f 92       	push	r0
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	4f 93       	push	r20
    133a:	5f 93       	push	r21
    133c:	6f 93       	push	r22
    133e:	7f 93       	push	r23
    1340:	8f 93       	push	r24
    1342:	9f 93       	push	r25
    1344:	af 93       	push	r26
    1346:	bf 93       	push	r27
    1348:	ef 93       	push	r30
    134a:	ff 93       	push	r31
    134c:	e0 91 87 21 	lds	r30, 0x2187
    1350:	f0 91 88 21 	lds	r31, 0x2188
    1354:	30 97       	sbiw	r30, 0x00	; 0
    1356:	29 f0       	breq	.+10     	; 0x1362 <__vector_13+0x3c>
    1358:	80 91 7d 22 	lds	r24, 0x227D
    135c:	90 91 7e 22 	lds	r25, 0x227E
    1360:	19 95       	eicall
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	7f 91       	pop	r23
    1370:	6f 91       	pop	r22
    1372:	5f 91       	pop	r21
    1374:	4f 91       	pop	r20
    1376:	3f 91       	pop	r19
    1378:	2f 91       	pop	r18
    137a:	0f 90       	pop	r0
    137c:	0b be       	out	0x3b, r0	; 59
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	0f 90       	pop	r0
    1384:	1f 90       	pop	r1
    1386:	18 95       	reti

00001388 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1388:	1f 92       	push	r1
    138a:	0f 92       	push	r0
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	0f 92       	push	r0
    1390:	11 24       	eor	r1, r1
    1392:	0b b6       	in	r0, 0x3b	; 59
    1394:	0f 92       	push	r0
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
    13ae:	e0 91 89 21 	lds	r30, 0x2189
    13b2:	f0 91 8a 21 	lds	r31, 0x218A
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <__vector_14+0x3c>
    13ba:	80 91 7f 22 	lds	r24, 0x227F
    13be:	90 91 80 22 	lds	r25, 0x2280
    13c2:	19 95       	eicall
    13c4:	ff 91       	pop	r31
    13c6:	ef 91       	pop	r30
    13c8:	bf 91       	pop	r27
    13ca:	af 91       	pop	r26
    13cc:	9f 91       	pop	r25
    13ce:	8f 91       	pop	r24
    13d0:	7f 91       	pop	r23
    13d2:	6f 91       	pop	r22
    13d4:	5f 91       	pop	r21
    13d6:	4f 91       	pop	r20
    13d8:	3f 91       	pop	r19
    13da:	2f 91       	pop	r18
    13dc:	0f 90       	pop	r0
    13de:	0b be       	out	0x3b, r0	; 59
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	0b b6       	in	r0, 0x3b	; 59
    13f6:	0f 92       	push	r0
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	e0 91 8b 21 	lds	r30, 0x218B
    1414:	f0 91 8c 21 	lds	r31, 0x218C
    1418:	30 97       	sbiw	r30, 0x00	; 0
    141a:	29 f0       	breq	.+10     	; 0x1426 <__vector_15+0x3c>
    141c:	80 91 81 22 	lds	r24, 0x2281
    1420:	90 91 82 22 	lds	r25, 0x2282
    1424:	19 95       	eicall
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0b be       	out	0x3b, r0	; 59
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	0b b6       	in	r0, 0x3b	; 59
    1458:	0f 92       	push	r0
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
    1472:	e0 91 8d 21 	lds	r30, 0x218D
    1476:	f0 91 8e 21 	lds	r31, 0x218E
    147a:	30 97       	sbiw	r30, 0x00	; 0
    147c:	29 f0       	breq	.+10     	; 0x1488 <__vector_16+0x3c>
    147e:	80 91 83 22 	lds	r24, 0x2283
    1482:	90 91 84 22 	lds	r25, 0x2284
    1486:	19 95       	eicall
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0b be       	out	0x3b, r0	; 59
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	0b b6       	in	r0, 0x3b	; 59
    14ba:	0f 92       	push	r0
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	e0 91 8f 21 	lds	r30, 0x218F
    14d8:	f0 91 90 21 	lds	r31, 0x2190
    14dc:	30 97       	sbiw	r30, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <__vector_17+0x3c>
    14e0:	80 91 85 22 	lds	r24, 0x2285
    14e4:	90 91 86 22 	lds	r25, 0x2286
    14e8:	19 95       	eicall
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0b be       	out	0x3b, r0	; 59
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	0b b6       	in	r0, 0x3b	; 59
    151c:	0f 92       	push	r0
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
    1536:	e0 91 91 21 	lds	r30, 0x2191
    153a:	f0 91 92 21 	lds	r31, 0x2192
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	29 f0       	breq	.+10     	; 0x154c <__vector_18+0x3c>
    1542:	80 91 87 22 	lds	r24, 0x2287
    1546:	90 91 88 22 	lds	r25, 0x2288
    154a:	19 95       	eicall
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0b be       	out	0x3b, r0	; 59
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	11 24       	eor	r1, r1
    157c:	0b b6       	in	r0, 0x3b	; 59
    157e:	0f 92       	push	r0
    1580:	2f 93       	push	r18
    1582:	3f 93       	push	r19
    1584:	4f 93       	push	r20
    1586:	5f 93       	push	r21
    1588:	6f 93       	push	r22
    158a:	7f 93       	push	r23
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	af 93       	push	r26
    1592:	bf 93       	push	r27
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
    1598:	e0 91 93 21 	lds	r30, 0x2193
    159c:	f0 91 94 21 	lds	r31, 0x2194
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	29 f0       	breq	.+10     	; 0x15ae <__vector_19+0x3c>
    15a4:	80 91 89 22 	lds	r24, 0x2289
    15a8:	90 91 8a 22 	lds	r25, 0x228A
    15ac:	19 95       	eicall
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	0f 90       	pop	r0
    15c8:	0b be       	out	0x3b, r0	; 59
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	0f 92       	push	r0
    15dc:	11 24       	eor	r1, r1
    15de:	0b b6       	in	r0, 0x3b	; 59
    15e0:	0f 92       	push	r0
    15e2:	2f 93       	push	r18
    15e4:	3f 93       	push	r19
    15e6:	4f 93       	push	r20
    15e8:	5f 93       	push	r21
    15ea:	6f 93       	push	r22
    15ec:	7f 93       	push	r23
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
    15f2:	af 93       	push	r26
    15f4:	bf 93       	push	r27
    15f6:	ef 93       	push	r30
    15f8:	ff 93       	push	r31
    15fa:	e0 91 95 21 	lds	r30, 0x2195
    15fe:	f0 91 96 21 	lds	r31, 0x2196
    1602:	30 97       	sbiw	r30, 0x00	; 0
    1604:	29 f0       	breq	.+10     	; 0x1610 <__vector_20+0x3c>
    1606:	80 91 8b 22 	lds	r24, 0x228B
    160a:	90 91 8c 22 	lds	r25, 0x228C
    160e:	19 95       	eicall
    1610:	ff 91       	pop	r31
    1612:	ef 91       	pop	r30
    1614:	bf 91       	pop	r27
    1616:	af 91       	pop	r26
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	7f 91       	pop	r23
    161e:	6f 91       	pop	r22
    1620:	5f 91       	pop	r21
    1622:	4f 91       	pop	r20
    1624:	3f 91       	pop	r19
    1626:	2f 91       	pop	r18
    1628:	0f 90       	pop	r0
    162a:	0b be       	out	0x3b, r0	; 59
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	0b b6       	in	r0, 0x3b	; 59
    1642:	0f 92       	push	r0
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	e0 91 97 21 	lds	r30, 0x2197
    1660:	f0 91 98 21 	lds	r31, 0x2198
    1664:	30 97       	sbiw	r30, 0x00	; 0
    1666:	29 f0       	breq	.+10     	; 0x1672 <__vector_21+0x3c>
    1668:	80 91 8d 22 	lds	r24, 0x228D
    166c:	90 91 8e 22 	lds	r25, 0x228E
    1670:	19 95       	eicall
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0b be       	out	0x3b, r0	; 59
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	0b b6       	in	r0, 0x3b	; 59
    16a4:	0f 92       	push	r0
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    16be:	e0 91 99 21 	lds	r30, 0x2199
    16c2:	f0 91 9a 21 	lds	r31, 0x219A
    16c6:	30 97       	sbiw	r30, 0x00	; 0
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <__vector_22+0x3c>
    16ca:	80 91 8f 22 	lds	r24, 0x228F
    16ce:	90 91 90 22 	lds	r25, 0x2290
    16d2:	19 95       	eicall
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0b be       	out	0x3b, r0	; 59
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	0b b6       	in	r0, 0x3b	; 59
    1706:	0f 92       	push	r0
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
    1720:	e0 91 9b 21 	lds	r30, 0x219B
    1724:	f0 91 9c 21 	lds	r31, 0x219C
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	29 f0       	breq	.+10     	; 0x1736 <__vector_23+0x3c>
    172c:	80 91 91 22 	lds	r24, 0x2291
    1730:	90 91 92 22 	lds	r25, 0x2292
    1734:	19 95       	eicall
    1736:	ff 91       	pop	r31
    1738:	ef 91       	pop	r30
    173a:	bf 91       	pop	r27
    173c:	af 91       	pop	r26
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	7f 91       	pop	r23
    1744:	6f 91       	pop	r22
    1746:	5f 91       	pop	r21
    1748:	4f 91       	pop	r20
    174a:	3f 91       	pop	r19
    174c:	2f 91       	pop	r18
    174e:	0f 90       	pop	r0
    1750:	0b be       	out	0x3b, r0	; 59
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	0b b6       	in	r0, 0x3b	; 59
    1768:	0f 92       	push	r0
    176a:	2f 93       	push	r18
    176c:	3f 93       	push	r19
    176e:	4f 93       	push	r20
    1770:	5f 93       	push	r21
    1772:	6f 93       	push	r22
    1774:	7f 93       	push	r23
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	af 93       	push	r26
    177c:	bf 93       	push	r27
    177e:	ef 93       	push	r30
    1780:	ff 93       	push	r31
    1782:	e0 91 9d 21 	lds	r30, 0x219D
    1786:	f0 91 9e 21 	lds	r31, 0x219E
    178a:	30 97       	sbiw	r30, 0x00	; 0
    178c:	29 f0       	breq	.+10     	; 0x1798 <__vector_24+0x3c>
    178e:	80 91 93 22 	lds	r24, 0x2293
    1792:	90 91 94 22 	lds	r25, 0x2294
    1796:	19 95       	eicall
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0b be       	out	0x3b, r0	; 59
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	0f 90       	pop	r0
    17ba:	1f 90       	pop	r1
    17bc:	18 95       	reti

000017be <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	0b b6       	in	r0, 0x3b	; 59
    17ca:	0f 92       	push	r0
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	e0 91 9f 21 	lds	r30, 0x219F
    17e8:	f0 91 a0 21 	lds	r31, 0x21A0
    17ec:	30 97       	sbiw	r30, 0x00	; 0
    17ee:	29 f0       	breq	.+10     	; 0x17fa <__vector_25+0x3c>
    17f0:	80 91 95 22 	lds	r24, 0x2295
    17f4:	90 91 96 22 	lds	r25, 0x2296
    17f8:	19 95       	eicall
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	0f 90       	pop	r0
    1814:	0b be       	out	0x3b, r0	; 59
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	0b b6       	in	r0, 0x3b	; 59
    182c:	0f 92       	push	r0
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
    1846:	e0 91 a1 21 	lds	r30, 0x21A1
    184a:	f0 91 a2 21 	lds	r31, 0x21A2
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	29 f0       	breq	.+10     	; 0x185c <__vector_26+0x3c>
    1852:	80 91 97 22 	lds	r24, 0x2297
    1856:	90 91 98 22 	lds	r25, 0x2298
    185a:	19 95       	eicall
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    18a8:	e0 91 a3 21 	lds	r30, 0x21A3
    18ac:	f0 91 a4 21 	lds	r31, 0x21A4
    18b0:	30 97       	sbiw	r30, 0x00	; 0
    18b2:	29 f0       	breq	.+10     	; 0x18be <__vector_27+0x3c>
    18b4:	80 91 99 22 	lds	r24, 0x2299
    18b8:	90 91 9a 22 	lds	r25, 0x229A
    18bc:	19 95       	eicall
    18be:	ff 91       	pop	r31
    18c0:	ef 91       	pop	r30
    18c2:	bf 91       	pop	r27
    18c4:	af 91       	pop	r26
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	7f 91       	pop	r23
    18cc:	6f 91       	pop	r22
    18ce:	5f 91       	pop	r21
    18d0:	4f 91       	pop	r20
    18d2:	3f 91       	pop	r19
    18d4:	2f 91       	pop	r18
    18d6:	0f 90       	pop	r0
    18d8:	0b be       	out	0x3b, r0	; 59
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	0b b6       	in	r0, 0x3b	; 59
    18f0:	0f 92       	push	r0
    18f2:	2f 93       	push	r18
    18f4:	3f 93       	push	r19
    18f6:	4f 93       	push	r20
    18f8:	5f 93       	push	r21
    18fa:	6f 93       	push	r22
    18fc:	7f 93       	push	r23
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	af 93       	push	r26
    1904:	bf 93       	push	r27
    1906:	ef 93       	push	r30
    1908:	ff 93       	push	r31
    190a:	e0 91 a5 21 	lds	r30, 0x21A5
    190e:	f0 91 a6 21 	lds	r31, 0x21A6
    1912:	30 97       	sbiw	r30, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <__vector_28+0x3c>
    1916:	80 91 9b 22 	lds	r24, 0x229B
    191a:	90 91 9c 22 	lds	r25, 0x229C
    191e:	19 95       	eicall
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0b be       	out	0x3b, r0	; 59
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    1946:	1f 92       	push	r1
    1948:	0f 92       	push	r0
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	0f 92       	push	r0
    194e:	11 24       	eor	r1, r1
    1950:	0b b6       	in	r0, 0x3b	; 59
    1952:	0f 92       	push	r0
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	e0 91 a7 21 	lds	r30, 0x21A7
    1970:	f0 91 a8 21 	lds	r31, 0x21A8
    1974:	30 97       	sbiw	r30, 0x00	; 0
    1976:	29 f0       	breq	.+10     	; 0x1982 <__vector_29+0x3c>
    1978:	80 91 9d 22 	lds	r24, 0x229D
    197c:	90 91 9e 22 	lds	r25, 0x229E
    1980:	19 95       	eicall
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	bf 91       	pop	r27
    1988:	af 91       	pop	r26
    198a:	9f 91       	pop	r25
    198c:	8f 91       	pop	r24
    198e:	7f 91       	pop	r23
    1990:	6f 91       	pop	r22
    1992:	5f 91       	pop	r21
    1994:	4f 91       	pop	r20
    1996:	3f 91       	pop	r19
    1998:	2f 91       	pop	r18
    199a:	0f 90       	pop	r0
    199c:	0b be       	out	0x3b, r0	; 59
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	0b b6       	in	r0, 0x3b	; 59
    19b4:	0f 92       	push	r0
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	e0 91 a9 21 	lds	r30, 0x21A9
    19d2:	f0 91 aa 21 	lds	r31, 0x21AA
    19d6:	30 97       	sbiw	r30, 0x00	; 0
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <__vector_30+0x3c>
    19da:	80 91 9f 22 	lds	r24, 0x229F
    19de:	90 91 a0 22 	lds	r25, 0x22A0
    19e2:	19 95       	eicall
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 90       	pop	r0
    19fe:	0b be       	out	0x3b, r0	; 59
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	0b b6       	in	r0, 0x3b	; 59
    1a16:	0f 92       	push	r0
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	e0 91 ab 21 	lds	r30, 0x21AB
    1a34:	f0 91 ac 21 	lds	r31, 0x21AC
    1a38:	30 97       	sbiw	r30, 0x00	; 0
    1a3a:	29 f0       	breq	.+10     	; 0x1a46 <__vector_31+0x3c>
    1a3c:	80 91 a1 22 	lds	r24, 0x22A1
    1a40:	90 91 a2 22 	lds	r25, 0x22A2
    1a44:	19 95       	eicall
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0b be       	out	0x3b, r0	; 59
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    1a6c:	1f 92       	push	r1
    1a6e:	0f 92       	push	r0
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	0f 92       	push	r0
    1a74:	11 24       	eor	r1, r1
    1a76:	0b b6       	in	r0, 0x3b	; 59
    1a78:	0f 92       	push	r0
    1a7a:	2f 93       	push	r18
    1a7c:	3f 93       	push	r19
    1a7e:	4f 93       	push	r20
    1a80:	5f 93       	push	r21
    1a82:	6f 93       	push	r22
    1a84:	7f 93       	push	r23
    1a86:	8f 93       	push	r24
    1a88:	9f 93       	push	r25
    1a8a:	af 93       	push	r26
    1a8c:	bf 93       	push	r27
    1a8e:	ef 93       	push	r30
    1a90:	ff 93       	push	r31
    1a92:	e0 91 ad 21 	lds	r30, 0x21AD
    1a96:	f0 91 ae 21 	lds	r31, 0x21AE
    1a9a:	30 97       	sbiw	r30, 0x00	; 0
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <__vector_32+0x3c>
    1a9e:	80 91 a3 22 	lds	r24, 0x22A3
    1aa2:	90 91 a4 22 	lds	r25, 0x22A4
    1aa6:	19 95       	eicall
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	bf 91       	pop	r27
    1aae:	af 91       	pop	r26
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	7f 91       	pop	r23
    1ab6:	6f 91       	pop	r22
    1ab8:	5f 91       	pop	r21
    1aba:	4f 91       	pop	r20
    1abc:	3f 91       	pop	r19
    1abe:	2f 91       	pop	r18
    1ac0:	0f 90       	pop	r0
    1ac2:	0b be       	out	0x3b, r0	; 59
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	0b b6       	in	r0, 0x3b	; 59
    1ada:	0f 92       	push	r0
    1adc:	2f 93       	push	r18
    1ade:	3f 93       	push	r19
    1ae0:	4f 93       	push	r20
    1ae2:	5f 93       	push	r21
    1ae4:	6f 93       	push	r22
    1ae6:	7f 93       	push	r23
    1ae8:	8f 93       	push	r24
    1aea:	9f 93       	push	r25
    1aec:	af 93       	push	r26
    1aee:	bf 93       	push	r27
    1af0:	ef 93       	push	r30
    1af2:	ff 93       	push	r31
    1af4:	e0 91 af 21 	lds	r30, 0x21AF
    1af8:	f0 91 b0 21 	lds	r31, 0x21B0
    1afc:	30 97       	sbiw	r30, 0x00	; 0
    1afe:	29 f0       	breq	.+10     	; 0x1b0a <__vector_33+0x3c>
    1b00:	80 91 a5 22 	lds	r24, 0x22A5
    1b04:	90 91 a6 22 	lds	r25, 0x22A6
    1b08:	19 95       	eicall
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	bf 91       	pop	r27
    1b10:	af 91       	pop	r26
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	7f 91       	pop	r23
    1b18:	6f 91       	pop	r22
    1b1a:	5f 91       	pop	r21
    1b1c:	4f 91       	pop	r20
    1b1e:	3f 91       	pop	r19
    1b20:	2f 91       	pop	r18
    1b22:	0f 90       	pop	r0
    1b24:	0b be       	out	0x3b, r0	; 59
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	0b b6       	in	r0, 0x3b	; 59
    1b3c:	0f 92       	push	r0
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	e0 91 b1 21 	lds	r30, 0x21B1
    1b5a:	f0 91 b2 21 	lds	r31, 0x21B2
    1b5e:	30 97       	sbiw	r30, 0x00	; 0
    1b60:	29 f0       	breq	.+10     	; 0x1b6c <__vector_34+0x3c>
    1b62:	80 91 a7 22 	lds	r24, 0x22A7
    1b66:	90 91 a8 22 	lds	r25, 0x22A8
    1b6a:	19 95       	eicall
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0b be       	out	0x3b, r0	; 59
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	0b b6       	in	r0, 0x3b	; 59
    1b9e:	0f 92       	push	r0
    1ba0:	2f 93       	push	r18
    1ba2:	3f 93       	push	r19
    1ba4:	4f 93       	push	r20
    1ba6:	5f 93       	push	r21
    1ba8:	6f 93       	push	r22
    1baa:	7f 93       	push	r23
    1bac:	8f 93       	push	r24
    1bae:	9f 93       	push	r25
    1bb0:	af 93       	push	r26
    1bb2:	bf 93       	push	r27
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	e0 91 b3 21 	lds	r30, 0x21B3
    1bbc:	f0 91 b4 21 	lds	r31, 0x21B4
    1bc0:	30 97       	sbiw	r30, 0x00	; 0
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <__vector_35+0x3c>
    1bc4:	80 91 a9 22 	lds	r24, 0x22A9
    1bc8:	90 91 aa 22 	lds	r25, 0x22AA
    1bcc:	19 95       	eicall
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	0f 90       	pop	r0
    1be8:	0b be       	out	0x3b, r0	; 59
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	0f 90       	pop	r0
    1bf0:	1f 90       	pop	r1
    1bf2:	18 95       	reti

00001bf4 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	0b b6       	in	r0, 0x3b	; 59
    1c00:	0f 92       	push	r0
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	4f 93       	push	r20
    1c08:	5f 93       	push	r21
    1c0a:	6f 93       	push	r22
    1c0c:	7f 93       	push	r23
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
    1c12:	af 93       	push	r26
    1c14:	bf 93       	push	r27
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
    1c1a:	e0 91 b5 21 	lds	r30, 0x21B5
    1c1e:	f0 91 b6 21 	lds	r31, 0x21B6
    1c22:	30 97       	sbiw	r30, 0x00	; 0
    1c24:	29 f0       	breq	.+10     	; 0x1c30 <__vector_36+0x3c>
    1c26:	80 91 ab 22 	lds	r24, 0x22AB
    1c2a:	90 91 ac 22 	lds	r25, 0x22AC
    1c2e:	19 95       	eicall
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	bf 91       	pop	r27
    1c36:	af 91       	pop	r26
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	7f 91       	pop	r23
    1c3e:	6f 91       	pop	r22
    1c40:	5f 91       	pop	r21
    1c42:	4f 91       	pop	r20
    1c44:	3f 91       	pop	r19
    1c46:	2f 91       	pop	r18
    1c48:	0f 90       	pop	r0
    1c4a:	0b be       	out	0x3b, r0	; 59
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	0f 90       	pop	r0
    1c52:	1f 90       	pop	r1
    1c54:	18 95       	reti

00001c56 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    1c56:	1f 92       	push	r1
    1c58:	0f 92       	push	r0
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	0b b6       	in	r0, 0x3b	; 59
    1c62:	0f 92       	push	r0
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
    1c7c:	e0 91 b7 21 	lds	r30, 0x21B7
    1c80:	f0 91 b8 21 	lds	r31, 0x21B8
    1c84:	30 97       	sbiw	r30, 0x00	; 0
    1c86:	29 f0       	breq	.+10     	; 0x1c92 <__vector_37+0x3c>
    1c88:	80 91 ad 22 	lds	r24, 0x22AD
    1c8c:	90 91 ae 22 	lds	r25, 0x22AE
    1c90:	19 95       	eicall
    1c92:	ff 91       	pop	r31
    1c94:	ef 91       	pop	r30
    1c96:	bf 91       	pop	r27
    1c98:	af 91       	pop	r26
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	7f 91       	pop	r23
    1ca0:	6f 91       	pop	r22
    1ca2:	5f 91       	pop	r21
    1ca4:	4f 91       	pop	r20
    1ca6:	3f 91       	pop	r19
    1ca8:	2f 91       	pop	r18
    1caa:	0f 90       	pop	r0
    1cac:	0b be       	out	0x3b, r0	; 59
    1cae:	0f 90       	pop	r0
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	0f 90       	pop	r0
    1cb4:	1f 90       	pop	r1
    1cb6:	18 95       	reti

00001cb8 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	0b b6       	in	r0, 0x3b	; 59
    1cc4:	0f 92       	push	r0
    1cc6:	2f 93       	push	r18
    1cc8:	3f 93       	push	r19
    1cca:	4f 93       	push	r20
    1ccc:	5f 93       	push	r21
    1cce:	6f 93       	push	r22
    1cd0:	7f 93       	push	r23
    1cd2:	8f 93       	push	r24
    1cd4:	9f 93       	push	r25
    1cd6:	af 93       	push	r26
    1cd8:	bf 93       	push	r27
    1cda:	ef 93       	push	r30
    1cdc:	ff 93       	push	r31
    1cde:	e0 91 b9 21 	lds	r30, 0x21B9
    1ce2:	f0 91 ba 21 	lds	r31, 0x21BA
    1ce6:	30 97       	sbiw	r30, 0x00	; 0
    1ce8:	29 f0       	breq	.+10     	; 0x1cf4 <__vector_38+0x3c>
    1cea:	80 91 af 22 	lds	r24, 0x22AF
    1cee:	90 91 b0 22 	lds	r25, 0x22B0
    1cf2:	19 95       	eicall
    1cf4:	ff 91       	pop	r31
    1cf6:	ef 91       	pop	r30
    1cf8:	bf 91       	pop	r27
    1cfa:	af 91       	pop	r26
    1cfc:	9f 91       	pop	r25
    1cfe:	8f 91       	pop	r24
    1d00:	7f 91       	pop	r23
    1d02:	6f 91       	pop	r22
    1d04:	5f 91       	pop	r21
    1d06:	4f 91       	pop	r20
    1d08:	3f 91       	pop	r19
    1d0a:	2f 91       	pop	r18
    1d0c:	0f 90       	pop	r0
    1d0e:	0b be       	out	0x3b, r0	; 59
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	0b b6       	in	r0, 0x3b	; 59
    1d26:	0f 92       	push	r0
    1d28:	2f 93       	push	r18
    1d2a:	3f 93       	push	r19
    1d2c:	4f 93       	push	r20
    1d2e:	5f 93       	push	r21
    1d30:	6f 93       	push	r22
    1d32:	7f 93       	push	r23
    1d34:	8f 93       	push	r24
    1d36:	9f 93       	push	r25
    1d38:	af 93       	push	r26
    1d3a:	bf 93       	push	r27
    1d3c:	ef 93       	push	r30
    1d3e:	ff 93       	push	r31
    1d40:	e0 91 bb 21 	lds	r30, 0x21BB
    1d44:	f0 91 bc 21 	lds	r31, 0x21BC
    1d48:	30 97       	sbiw	r30, 0x00	; 0
    1d4a:	29 f0       	breq	.+10     	; 0x1d56 <__vector_39+0x3c>
    1d4c:	80 91 b1 22 	lds	r24, 0x22B1
    1d50:	90 91 b2 22 	lds	r25, 0x22B2
    1d54:	19 95       	eicall
    1d56:	ff 91       	pop	r31
    1d58:	ef 91       	pop	r30
    1d5a:	bf 91       	pop	r27
    1d5c:	af 91       	pop	r26
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	7f 91       	pop	r23
    1d64:	6f 91       	pop	r22
    1d66:	5f 91       	pop	r21
    1d68:	4f 91       	pop	r20
    1d6a:	3f 91       	pop	r19
    1d6c:	2f 91       	pop	r18
    1d6e:	0f 90       	pop	r0
    1d70:	0b be       	out	0x3b, r0	; 59
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	0b b6       	in	r0, 0x3b	; 59
    1d88:	0f 92       	push	r0
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
    1da2:	e0 91 bd 21 	lds	r30, 0x21BD
    1da6:	f0 91 be 21 	lds	r31, 0x21BE
    1daa:	30 97       	sbiw	r30, 0x00	; 0
    1dac:	29 f0       	breq	.+10     	; 0x1db8 <__vector_40+0x3c>
    1dae:	80 91 b3 22 	lds	r24, 0x22B3
    1db2:	90 91 b4 22 	lds	r25, 0x22B4
    1db6:	19 95       	eicall
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	bf 91       	pop	r27
    1dbe:	af 91       	pop	r26
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	7f 91       	pop	r23
    1dc6:	6f 91       	pop	r22
    1dc8:	5f 91       	pop	r21
    1dca:	4f 91       	pop	r20
    1dcc:	3f 91       	pop	r19
    1dce:	2f 91       	pop	r18
    1dd0:	0f 90       	pop	r0
    1dd2:	0b be       	out	0x3b, r0	; 59
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	0f 90       	pop	r0
    1dda:	1f 90       	pop	r1
    1ddc:	18 95       	reti

00001dde <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    1dde:	1f 92       	push	r1
    1de0:	0f 92       	push	r0
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	0f 92       	push	r0
    1de6:	11 24       	eor	r1, r1
    1de8:	0b b6       	in	r0, 0x3b	; 59
    1dea:	0f 92       	push	r0
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	ef 93       	push	r30
    1e02:	ff 93       	push	r31
    1e04:	e0 91 bf 21 	lds	r30, 0x21BF
    1e08:	f0 91 c0 21 	lds	r31, 0x21C0
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	29 f0       	breq	.+10     	; 0x1e1a <__vector_41+0x3c>
    1e10:	80 91 b5 22 	lds	r24, 0x22B5
    1e14:	90 91 b6 22 	lds	r25, 0x22B6
    1e18:	19 95       	eicall
    1e1a:	ff 91       	pop	r31
    1e1c:	ef 91       	pop	r30
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	7f 91       	pop	r23
    1e28:	6f 91       	pop	r22
    1e2a:	5f 91       	pop	r21
    1e2c:	4f 91       	pop	r20
    1e2e:	3f 91       	pop	r19
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0b be       	out	0x3b, r0	; 59
    1e36:	0f 90       	pop	r0
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	0f 90       	pop	r0
    1e3c:	1f 90       	pop	r1
    1e3e:	18 95       	reti

00001e40 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	0b b6       	in	r0, 0x3b	; 59
    1e4c:	0f 92       	push	r0
    1e4e:	2f 93       	push	r18
    1e50:	3f 93       	push	r19
    1e52:	4f 93       	push	r20
    1e54:	5f 93       	push	r21
    1e56:	6f 93       	push	r22
    1e58:	7f 93       	push	r23
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	af 93       	push	r26
    1e60:	bf 93       	push	r27
    1e62:	ef 93       	push	r30
    1e64:	ff 93       	push	r31
    1e66:	e0 91 c1 21 	lds	r30, 0x21C1
    1e6a:	f0 91 c2 21 	lds	r31, 0x21C2
    1e6e:	30 97       	sbiw	r30, 0x00	; 0
    1e70:	29 f0       	breq	.+10     	; 0x1e7c <__vector_42+0x3c>
    1e72:	80 91 b7 22 	lds	r24, 0x22B7
    1e76:	90 91 b8 22 	lds	r25, 0x22B8
    1e7a:	19 95       	eicall
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	9f 91       	pop	r25
    1e86:	8f 91       	pop	r24
    1e88:	7f 91       	pop	r23
    1e8a:	6f 91       	pop	r22
    1e8c:	5f 91       	pop	r21
    1e8e:	4f 91       	pop	r20
    1e90:	3f 91       	pop	r19
    1e92:	2f 91       	pop	r18
    1e94:	0f 90       	pop	r0
    1e96:	0b be       	out	0x3b, r0	; 59
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	0f 90       	pop	r0
    1e9e:	1f 90       	pop	r1
    1ea0:	18 95       	reti

00001ea2 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	0b b6       	in	r0, 0x3b	; 59
    1eae:	0f 92       	push	r0
    1eb0:	2f 93       	push	r18
    1eb2:	3f 93       	push	r19
    1eb4:	4f 93       	push	r20
    1eb6:	5f 93       	push	r21
    1eb8:	6f 93       	push	r22
    1eba:	7f 93       	push	r23
    1ebc:	8f 93       	push	r24
    1ebe:	9f 93       	push	r25
    1ec0:	af 93       	push	r26
    1ec2:	bf 93       	push	r27
    1ec4:	ef 93       	push	r30
    1ec6:	ff 93       	push	r31
    1ec8:	e0 91 c3 21 	lds	r30, 0x21C3
    1ecc:	f0 91 c4 21 	lds	r31, 0x21C4
    1ed0:	30 97       	sbiw	r30, 0x00	; 0
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <__vector_43+0x3c>
    1ed4:	80 91 b9 22 	lds	r24, 0x22B9
    1ed8:	90 91 ba 22 	lds	r25, 0x22BA
    1edc:	19 95       	eicall
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0b be       	out	0x3b, r0	; 59
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	0f 90       	pop	r0
    1f00:	1f 90       	pop	r1
    1f02:	18 95       	reti

00001f04 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    1f04:	1f 92       	push	r1
    1f06:	0f 92       	push	r0
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	0f 92       	push	r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	0b b6       	in	r0, 0x3b	; 59
    1f10:	0f 92       	push	r0
    1f12:	2f 93       	push	r18
    1f14:	3f 93       	push	r19
    1f16:	4f 93       	push	r20
    1f18:	5f 93       	push	r21
    1f1a:	6f 93       	push	r22
    1f1c:	7f 93       	push	r23
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
    1f2a:	e0 91 c5 21 	lds	r30, 0x21C5
    1f2e:	f0 91 c6 21 	lds	r31, 0x21C6
    1f32:	30 97       	sbiw	r30, 0x00	; 0
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <__vector_44+0x3c>
    1f36:	80 91 bb 22 	lds	r24, 0x22BB
    1f3a:	90 91 bc 22 	lds	r25, 0x22BC
    1f3e:	19 95       	eicall
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0b be       	out	0x3b, r0	; 59
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	0b b6       	in	r0, 0x3b	; 59
    1f72:	0f 92       	push	r0
    1f74:	2f 93       	push	r18
    1f76:	3f 93       	push	r19
    1f78:	4f 93       	push	r20
    1f7a:	5f 93       	push	r21
    1f7c:	6f 93       	push	r22
    1f7e:	7f 93       	push	r23
    1f80:	8f 93       	push	r24
    1f82:	9f 93       	push	r25
    1f84:	af 93       	push	r26
    1f86:	bf 93       	push	r27
    1f88:	ef 93       	push	r30
    1f8a:	ff 93       	push	r31
    1f8c:	e0 91 c7 21 	lds	r30, 0x21C7
    1f90:	f0 91 c8 21 	lds	r31, 0x21C8
    1f94:	30 97       	sbiw	r30, 0x00	; 0
    1f96:	29 f0       	breq	.+10     	; 0x1fa2 <__vector_45+0x3c>
    1f98:	80 91 bd 22 	lds	r24, 0x22BD
    1f9c:	90 91 be 22 	lds	r25, 0x22BE
    1fa0:	19 95       	eicall
    1fa2:	ff 91       	pop	r31
    1fa4:	ef 91       	pop	r30
    1fa6:	bf 91       	pop	r27
    1fa8:	af 91       	pop	r26
    1faa:	9f 91       	pop	r25
    1fac:	8f 91       	pop	r24
    1fae:	7f 91       	pop	r23
    1fb0:	6f 91       	pop	r22
    1fb2:	5f 91       	pop	r21
    1fb4:	4f 91       	pop	r20
    1fb6:	3f 91       	pop	r19
    1fb8:	2f 91       	pop	r18
    1fba:	0f 90       	pop	r0
    1fbc:	0b be       	out	0x3b, r0	; 59
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	0f 90       	pop	r0
    1fc4:	1f 90       	pop	r1
    1fc6:	18 95       	reti

00001fc8 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    1fc8:	1f 92       	push	r1
    1fca:	0f 92       	push	r0
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	0f 92       	push	r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	0b b6       	in	r0, 0x3b	; 59
    1fd4:	0f 92       	push	r0
    1fd6:	2f 93       	push	r18
    1fd8:	3f 93       	push	r19
    1fda:	4f 93       	push	r20
    1fdc:	5f 93       	push	r21
    1fde:	6f 93       	push	r22
    1fe0:	7f 93       	push	r23
    1fe2:	8f 93       	push	r24
    1fe4:	9f 93       	push	r25
    1fe6:	af 93       	push	r26
    1fe8:	bf 93       	push	r27
    1fea:	ef 93       	push	r30
    1fec:	ff 93       	push	r31
    1fee:	e0 91 c9 21 	lds	r30, 0x21C9
    1ff2:	f0 91 ca 21 	lds	r31, 0x21CA
    1ff6:	30 97       	sbiw	r30, 0x00	; 0
    1ff8:	29 f0       	breq	.+10     	; 0x2004 <__vector_46+0x3c>
    1ffa:	80 91 bf 22 	lds	r24, 0x22BF
    1ffe:	90 91 c0 22 	lds	r25, 0x22C0
    2002:	19 95       	eicall
    2004:	ff 91       	pop	r31
    2006:	ef 91       	pop	r30
    2008:	bf 91       	pop	r27
    200a:	af 91       	pop	r26
    200c:	9f 91       	pop	r25
    200e:	8f 91       	pop	r24
    2010:	7f 91       	pop	r23
    2012:	6f 91       	pop	r22
    2014:	5f 91       	pop	r21
    2016:	4f 91       	pop	r20
    2018:	3f 91       	pop	r19
    201a:	2f 91       	pop	r18
    201c:	0f 90       	pop	r0
    201e:	0b be       	out	0x3b, r0	; 59
    2020:	0f 90       	pop	r0
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	0f 90       	pop	r0
    2026:	1f 90       	pop	r1
    2028:	18 95       	reti

0000202a <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    202a:	1f 92       	push	r1
    202c:	0f 92       	push	r0
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	0f 92       	push	r0
    2032:	11 24       	eor	r1, r1
    2034:	0b b6       	in	r0, 0x3b	; 59
    2036:	0f 92       	push	r0
    2038:	2f 93       	push	r18
    203a:	3f 93       	push	r19
    203c:	4f 93       	push	r20
    203e:	5f 93       	push	r21
    2040:	6f 93       	push	r22
    2042:	7f 93       	push	r23
    2044:	8f 93       	push	r24
    2046:	9f 93       	push	r25
    2048:	af 93       	push	r26
    204a:	bf 93       	push	r27
    204c:	ef 93       	push	r30
    204e:	ff 93       	push	r31
    2050:	e0 91 cb 21 	lds	r30, 0x21CB
    2054:	f0 91 cc 21 	lds	r31, 0x21CC
    2058:	30 97       	sbiw	r30, 0x00	; 0
    205a:	29 f0       	breq	.+10     	; 0x2066 <__vector_47+0x3c>
    205c:	80 91 c1 22 	lds	r24, 0x22C1
    2060:	90 91 c2 22 	lds	r25, 0x22C2
    2064:	19 95       	eicall
    2066:	ff 91       	pop	r31
    2068:	ef 91       	pop	r30
    206a:	bf 91       	pop	r27
    206c:	af 91       	pop	r26
    206e:	9f 91       	pop	r25
    2070:	8f 91       	pop	r24
    2072:	7f 91       	pop	r23
    2074:	6f 91       	pop	r22
    2076:	5f 91       	pop	r21
    2078:	4f 91       	pop	r20
    207a:	3f 91       	pop	r19
    207c:	2f 91       	pop	r18
    207e:	0f 90       	pop	r0
    2080:	0b be       	out	0x3b, r0	; 59
    2082:	0f 90       	pop	r0
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	0f 90       	pop	r0
    2088:	1f 90       	pop	r1
    208a:	18 95       	reti

0000208c <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    208c:	1f 92       	push	r1
    208e:	0f 92       	push	r0
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	0f 92       	push	r0
    2094:	11 24       	eor	r1, r1
    2096:	0b b6       	in	r0, 0x3b	; 59
    2098:	0f 92       	push	r0
    209a:	2f 93       	push	r18
    209c:	3f 93       	push	r19
    209e:	4f 93       	push	r20
    20a0:	5f 93       	push	r21
    20a2:	6f 93       	push	r22
    20a4:	7f 93       	push	r23
    20a6:	8f 93       	push	r24
    20a8:	9f 93       	push	r25
    20aa:	af 93       	push	r26
    20ac:	bf 93       	push	r27
    20ae:	ef 93       	push	r30
    20b0:	ff 93       	push	r31
    20b2:	e0 91 cd 21 	lds	r30, 0x21CD
    20b6:	f0 91 ce 21 	lds	r31, 0x21CE
    20ba:	30 97       	sbiw	r30, 0x00	; 0
    20bc:	29 f0       	breq	.+10     	; 0x20c8 <__vector_48+0x3c>
    20be:	80 91 c3 22 	lds	r24, 0x22C3
    20c2:	90 91 c4 22 	lds	r25, 0x22C4
    20c6:	19 95       	eicall
    20c8:	ff 91       	pop	r31
    20ca:	ef 91       	pop	r30
    20cc:	bf 91       	pop	r27
    20ce:	af 91       	pop	r26
    20d0:	9f 91       	pop	r25
    20d2:	8f 91       	pop	r24
    20d4:	7f 91       	pop	r23
    20d6:	6f 91       	pop	r22
    20d8:	5f 91       	pop	r21
    20da:	4f 91       	pop	r20
    20dc:	3f 91       	pop	r19
    20de:	2f 91       	pop	r18
    20e0:	0f 90       	pop	r0
    20e2:	0b be       	out	0x3b, r0	; 59
    20e4:	0f 90       	pop	r0
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	0f 90       	pop	r0
    20ea:	1f 90       	pop	r1
    20ec:	18 95       	reti

000020ee <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    20ee:	1f 92       	push	r1
    20f0:	0f 92       	push	r0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	0f 92       	push	r0
    20f6:	11 24       	eor	r1, r1
    20f8:	0b b6       	in	r0, 0x3b	; 59
    20fa:	0f 92       	push	r0
    20fc:	2f 93       	push	r18
    20fe:	3f 93       	push	r19
    2100:	4f 93       	push	r20
    2102:	5f 93       	push	r21
    2104:	6f 93       	push	r22
    2106:	7f 93       	push	r23
    2108:	8f 93       	push	r24
    210a:	9f 93       	push	r25
    210c:	af 93       	push	r26
    210e:	bf 93       	push	r27
    2110:	ef 93       	push	r30
    2112:	ff 93       	push	r31
    2114:	e0 91 cf 21 	lds	r30, 0x21CF
    2118:	f0 91 d0 21 	lds	r31, 0x21D0
    211c:	30 97       	sbiw	r30, 0x00	; 0
    211e:	29 f0       	breq	.+10     	; 0x212a <__vector_49+0x3c>
    2120:	80 91 c5 22 	lds	r24, 0x22C5
    2124:	90 91 c6 22 	lds	r25, 0x22C6
    2128:	19 95       	eicall
    212a:	ff 91       	pop	r31
    212c:	ef 91       	pop	r30
    212e:	bf 91       	pop	r27
    2130:	af 91       	pop	r26
    2132:	9f 91       	pop	r25
    2134:	8f 91       	pop	r24
    2136:	7f 91       	pop	r23
    2138:	6f 91       	pop	r22
    213a:	5f 91       	pop	r21
    213c:	4f 91       	pop	r20
    213e:	3f 91       	pop	r19
    2140:	2f 91       	pop	r18
    2142:	0f 90       	pop	r0
    2144:	0b be       	out	0x3b, r0	; 59
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	0f 90       	pop	r0
    214c:	1f 90       	pop	r1
    214e:	18 95       	reti

00002150 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	0b b6       	in	r0, 0x3b	; 59
    215c:	0f 92       	push	r0
    215e:	2f 93       	push	r18
    2160:	3f 93       	push	r19
    2162:	4f 93       	push	r20
    2164:	5f 93       	push	r21
    2166:	6f 93       	push	r22
    2168:	7f 93       	push	r23
    216a:	8f 93       	push	r24
    216c:	9f 93       	push	r25
    216e:	af 93       	push	r26
    2170:	bf 93       	push	r27
    2172:	ef 93       	push	r30
    2174:	ff 93       	push	r31
    2176:	e0 91 d1 21 	lds	r30, 0x21D1
    217a:	f0 91 d2 21 	lds	r31, 0x21D2
    217e:	30 97       	sbiw	r30, 0x00	; 0
    2180:	29 f0       	breq	.+10     	; 0x218c <__vector_50+0x3c>
    2182:	80 91 c7 22 	lds	r24, 0x22C7
    2186:	90 91 c8 22 	lds	r25, 0x22C8
    218a:	19 95       	eicall
    218c:	ff 91       	pop	r31
    218e:	ef 91       	pop	r30
    2190:	bf 91       	pop	r27
    2192:	af 91       	pop	r26
    2194:	9f 91       	pop	r25
    2196:	8f 91       	pop	r24
    2198:	7f 91       	pop	r23
    219a:	6f 91       	pop	r22
    219c:	5f 91       	pop	r21
    219e:	4f 91       	pop	r20
    21a0:	3f 91       	pop	r19
    21a2:	2f 91       	pop	r18
    21a4:	0f 90       	pop	r0
    21a6:	0b be       	out	0x3b, r0	; 59
    21a8:	0f 90       	pop	r0
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	0f 90       	pop	r0
    21ae:	1f 90       	pop	r1
    21b0:	18 95       	reti

000021b2 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    21b2:	1f 92       	push	r1
    21b4:	0f 92       	push	r0
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	0f 92       	push	r0
    21ba:	11 24       	eor	r1, r1
    21bc:	0b b6       	in	r0, 0x3b	; 59
    21be:	0f 92       	push	r0
    21c0:	2f 93       	push	r18
    21c2:	3f 93       	push	r19
    21c4:	4f 93       	push	r20
    21c6:	5f 93       	push	r21
    21c8:	6f 93       	push	r22
    21ca:	7f 93       	push	r23
    21cc:	8f 93       	push	r24
    21ce:	9f 93       	push	r25
    21d0:	af 93       	push	r26
    21d2:	bf 93       	push	r27
    21d4:	ef 93       	push	r30
    21d6:	ff 93       	push	r31
    21d8:	e0 91 d3 21 	lds	r30, 0x21D3
    21dc:	f0 91 d4 21 	lds	r31, 0x21D4
    21e0:	30 97       	sbiw	r30, 0x00	; 0
    21e2:	29 f0       	breq	.+10     	; 0x21ee <__vector_51+0x3c>
    21e4:	80 91 c9 22 	lds	r24, 0x22C9
    21e8:	90 91 ca 22 	lds	r25, 0x22CA
    21ec:	19 95       	eicall
    21ee:	ff 91       	pop	r31
    21f0:	ef 91       	pop	r30
    21f2:	bf 91       	pop	r27
    21f4:	af 91       	pop	r26
    21f6:	9f 91       	pop	r25
    21f8:	8f 91       	pop	r24
    21fa:	7f 91       	pop	r23
    21fc:	6f 91       	pop	r22
    21fe:	5f 91       	pop	r21
    2200:	4f 91       	pop	r20
    2202:	3f 91       	pop	r19
    2204:	2f 91       	pop	r18
    2206:	0f 90       	pop	r0
    2208:	0b be       	out	0x3b, r0	; 59
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	0f 90       	pop	r0
    2210:	1f 90       	pop	r1
    2212:	18 95       	reti

00002214 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	0f 92       	push	r0
    221c:	11 24       	eor	r1, r1
    221e:	0b b6       	in	r0, 0x3b	; 59
    2220:	0f 92       	push	r0
    2222:	2f 93       	push	r18
    2224:	3f 93       	push	r19
    2226:	4f 93       	push	r20
    2228:	5f 93       	push	r21
    222a:	6f 93       	push	r22
    222c:	7f 93       	push	r23
    222e:	8f 93       	push	r24
    2230:	9f 93       	push	r25
    2232:	af 93       	push	r26
    2234:	bf 93       	push	r27
    2236:	ef 93       	push	r30
    2238:	ff 93       	push	r31
    223a:	e0 91 d5 21 	lds	r30, 0x21D5
    223e:	f0 91 d6 21 	lds	r31, 0x21D6
    2242:	30 97       	sbiw	r30, 0x00	; 0
    2244:	29 f0       	breq	.+10     	; 0x2250 <__vector_52+0x3c>
    2246:	80 91 cb 22 	lds	r24, 0x22CB
    224a:	90 91 cc 22 	lds	r25, 0x22CC
    224e:	19 95       	eicall
    2250:	ff 91       	pop	r31
    2252:	ef 91       	pop	r30
    2254:	bf 91       	pop	r27
    2256:	af 91       	pop	r26
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	7f 91       	pop	r23
    225e:	6f 91       	pop	r22
    2260:	5f 91       	pop	r21
    2262:	4f 91       	pop	r20
    2264:	3f 91       	pop	r19
    2266:	2f 91       	pop	r18
    2268:	0f 90       	pop	r0
    226a:	0b be       	out	0x3b, r0	; 59
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	0f 90       	pop	r0
    2272:	1f 90       	pop	r1
    2274:	18 95       	reti

00002276 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	0b b6       	in	r0, 0x3b	; 59
    2282:	0f 92       	push	r0
    2284:	2f 93       	push	r18
    2286:	3f 93       	push	r19
    2288:	4f 93       	push	r20
    228a:	5f 93       	push	r21
    228c:	6f 93       	push	r22
    228e:	7f 93       	push	r23
    2290:	8f 93       	push	r24
    2292:	9f 93       	push	r25
    2294:	af 93       	push	r26
    2296:	bf 93       	push	r27
    2298:	ef 93       	push	r30
    229a:	ff 93       	push	r31
    229c:	e0 91 d7 21 	lds	r30, 0x21D7
    22a0:	f0 91 d8 21 	lds	r31, 0x21D8
    22a4:	30 97       	sbiw	r30, 0x00	; 0
    22a6:	29 f0       	breq	.+10     	; 0x22b2 <__vector_53+0x3c>
    22a8:	80 91 cd 22 	lds	r24, 0x22CD
    22ac:	90 91 ce 22 	lds	r25, 0x22CE
    22b0:	19 95       	eicall
    22b2:	ff 91       	pop	r31
    22b4:	ef 91       	pop	r30
    22b6:	bf 91       	pop	r27
    22b8:	af 91       	pop	r26
    22ba:	9f 91       	pop	r25
    22bc:	8f 91       	pop	r24
    22be:	7f 91       	pop	r23
    22c0:	6f 91       	pop	r22
    22c2:	5f 91       	pop	r21
    22c4:	4f 91       	pop	r20
    22c6:	3f 91       	pop	r19
    22c8:	2f 91       	pop	r18
    22ca:	0f 90       	pop	r0
    22cc:	0b be       	out	0x3b, r0	; 59
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	0f 90       	pop	r0
    22d4:	1f 90       	pop	r1
    22d6:	18 95       	reti

000022d8 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    22d8:	1f 92       	push	r1
    22da:	0f 92       	push	r0
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	0f 92       	push	r0
    22e0:	11 24       	eor	r1, r1
    22e2:	0b b6       	in	r0, 0x3b	; 59
    22e4:	0f 92       	push	r0
    22e6:	2f 93       	push	r18
    22e8:	3f 93       	push	r19
    22ea:	4f 93       	push	r20
    22ec:	5f 93       	push	r21
    22ee:	6f 93       	push	r22
    22f0:	7f 93       	push	r23
    22f2:	8f 93       	push	r24
    22f4:	9f 93       	push	r25
    22f6:	af 93       	push	r26
    22f8:	bf 93       	push	r27
    22fa:	ef 93       	push	r30
    22fc:	ff 93       	push	r31
    22fe:	e0 91 d9 21 	lds	r30, 0x21D9
    2302:	f0 91 da 21 	lds	r31, 0x21DA
    2306:	30 97       	sbiw	r30, 0x00	; 0
    2308:	29 f0       	breq	.+10     	; 0x2314 <__vector_54+0x3c>
    230a:	80 91 cf 22 	lds	r24, 0x22CF
    230e:	90 91 d0 22 	lds	r25, 0x22D0
    2312:	19 95       	eicall
    2314:	ff 91       	pop	r31
    2316:	ef 91       	pop	r30
    2318:	bf 91       	pop	r27
    231a:	af 91       	pop	r26
    231c:	9f 91       	pop	r25
    231e:	8f 91       	pop	r24
    2320:	7f 91       	pop	r23
    2322:	6f 91       	pop	r22
    2324:	5f 91       	pop	r21
    2326:	4f 91       	pop	r20
    2328:	3f 91       	pop	r19
    232a:	2f 91       	pop	r18
    232c:	0f 90       	pop	r0
    232e:	0b be       	out	0x3b, r0	; 59
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	0b b6       	in	r0, 0x3b	; 59
    2346:	0f 92       	push	r0
    2348:	2f 93       	push	r18
    234a:	3f 93       	push	r19
    234c:	4f 93       	push	r20
    234e:	5f 93       	push	r21
    2350:	6f 93       	push	r22
    2352:	7f 93       	push	r23
    2354:	8f 93       	push	r24
    2356:	9f 93       	push	r25
    2358:	af 93       	push	r26
    235a:	bf 93       	push	r27
    235c:	ef 93       	push	r30
    235e:	ff 93       	push	r31
    2360:	e0 91 db 21 	lds	r30, 0x21DB
    2364:	f0 91 dc 21 	lds	r31, 0x21DC
    2368:	30 97       	sbiw	r30, 0x00	; 0
    236a:	29 f0       	breq	.+10     	; 0x2376 <__vector_55+0x3c>
    236c:	80 91 d1 22 	lds	r24, 0x22D1
    2370:	90 91 d2 22 	lds	r25, 0x22D2
    2374:	19 95       	eicall
    2376:	ff 91       	pop	r31
    2378:	ef 91       	pop	r30
    237a:	bf 91       	pop	r27
    237c:	af 91       	pop	r26
    237e:	9f 91       	pop	r25
    2380:	8f 91       	pop	r24
    2382:	7f 91       	pop	r23
    2384:	6f 91       	pop	r22
    2386:	5f 91       	pop	r21
    2388:	4f 91       	pop	r20
    238a:	3f 91       	pop	r19
    238c:	2f 91       	pop	r18
    238e:	0f 90       	pop	r0
    2390:	0b be       	out	0x3b, r0	; 59
    2392:	0f 90       	pop	r0
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	0f 90       	pop	r0
    2398:	1f 90       	pop	r1
    239a:	18 95       	reti

0000239c <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    239c:	1f 92       	push	r1
    239e:	0f 92       	push	r0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	0f 92       	push	r0
    23a4:	11 24       	eor	r1, r1
    23a6:	0b b6       	in	r0, 0x3b	; 59
    23a8:	0f 92       	push	r0
    23aa:	2f 93       	push	r18
    23ac:	3f 93       	push	r19
    23ae:	4f 93       	push	r20
    23b0:	5f 93       	push	r21
    23b2:	6f 93       	push	r22
    23b4:	7f 93       	push	r23
    23b6:	8f 93       	push	r24
    23b8:	9f 93       	push	r25
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	ef 93       	push	r30
    23c0:	ff 93       	push	r31
    23c2:	e0 91 dd 21 	lds	r30, 0x21DD
    23c6:	f0 91 de 21 	lds	r31, 0x21DE
    23ca:	30 97       	sbiw	r30, 0x00	; 0
    23cc:	29 f0       	breq	.+10     	; 0x23d8 <__vector_56+0x3c>
    23ce:	80 91 d3 22 	lds	r24, 0x22D3
    23d2:	90 91 d4 22 	lds	r25, 0x22D4
    23d6:	19 95       	eicall
    23d8:	ff 91       	pop	r31
    23da:	ef 91       	pop	r30
    23dc:	bf 91       	pop	r27
    23de:	af 91       	pop	r26
    23e0:	9f 91       	pop	r25
    23e2:	8f 91       	pop	r24
    23e4:	7f 91       	pop	r23
    23e6:	6f 91       	pop	r22
    23e8:	5f 91       	pop	r21
    23ea:	4f 91       	pop	r20
    23ec:	3f 91       	pop	r19
    23ee:	2f 91       	pop	r18
    23f0:	0f 90       	pop	r0
    23f2:	0b be       	out	0x3b, r0	; 59
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	0b b6       	in	r0, 0x3b	; 59
    240a:	0f 92       	push	r0
    240c:	2f 93       	push	r18
    240e:	3f 93       	push	r19
    2410:	4f 93       	push	r20
    2412:	5f 93       	push	r21
    2414:	6f 93       	push	r22
    2416:	7f 93       	push	r23
    2418:	8f 93       	push	r24
    241a:	9f 93       	push	r25
    241c:	af 93       	push	r26
    241e:	bf 93       	push	r27
    2420:	ef 93       	push	r30
    2422:	ff 93       	push	r31
    2424:	e0 91 df 21 	lds	r30, 0x21DF
    2428:	f0 91 e0 21 	lds	r31, 0x21E0
    242c:	30 97       	sbiw	r30, 0x00	; 0
    242e:	29 f0       	breq	.+10     	; 0x243a <__vector_57+0x3c>
    2430:	80 91 d5 22 	lds	r24, 0x22D5
    2434:	90 91 d6 22 	lds	r25, 0x22D6
    2438:	19 95       	eicall
    243a:	ff 91       	pop	r31
    243c:	ef 91       	pop	r30
    243e:	bf 91       	pop	r27
    2440:	af 91       	pop	r26
    2442:	9f 91       	pop	r25
    2444:	8f 91       	pop	r24
    2446:	7f 91       	pop	r23
    2448:	6f 91       	pop	r22
    244a:	5f 91       	pop	r21
    244c:	4f 91       	pop	r20
    244e:	3f 91       	pop	r19
    2450:	2f 91       	pop	r18
    2452:	0f 90       	pop	r0
    2454:	0b be       	out	0x3b, r0	; 59
    2456:	0f 90       	pop	r0
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	0f 90       	pop	r0
    245c:	1f 90       	pop	r1
    245e:	18 95       	reti

00002460 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2460:	1f 92       	push	r1
    2462:	0f 92       	push	r0
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	0f 92       	push	r0
    2468:	11 24       	eor	r1, r1
    246a:	0b b6       	in	r0, 0x3b	; 59
    246c:	0f 92       	push	r0
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	4f 93       	push	r20
    2474:	5f 93       	push	r21
    2476:	6f 93       	push	r22
    2478:	7f 93       	push	r23
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	af 93       	push	r26
    2480:	bf 93       	push	r27
    2482:	ef 93       	push	r30
    2484:	ff 93       	push	r31
    2486:	e0 91 e1 21 	lds	r30, 0x21E1
    248a:	f0 91 e2 21 	lds	r31, 0x21E2
    248e:	30 97       	sbiw	r30, 0x00	; 0
    2490:	29 f0       	breq	.+10     	; 0x249c <__vector_58+0x3c>
    2492:	80 91 d7 22 	lds	r24, 0x22D7
    2496:	90 91 d8 22 	lds	r25, 0x22D8
    249a:	19 95       	eicall
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	0b be       	out	0x3b, r0	; 59
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    24c2:	1f 92       	push	r1
    24c4:	0f 92       	push	r0
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	0f 92       	push	r0
    24ca:	11 24       	eor	r1, r1
    24cc:	0b b6       	in	r0, 0x3b	; 59
    24ce:	0f 92       	push	r0
    24d0:	2f 93       	push	r18
    24d2:	3f 93       	push	r19
    24d4:	4f 93       	push	r20
    24d6:	5f 93       	push	r21
    24d8:	6f 93       	push	r22
    24da:	7f 93       	push	r23
    24dc:	8f 93       	push	r24
    24de:	9f 93       	push	r25
    24e0:	af 93       	push	r26
    24e2:	bf 93       	push	r27
    24e4:	ef 93       	push	r30
    24e6:	ff 93       	push	r31
    24e8:	e0 91 e3 21 	lds	r30, 0x21E3
    24ec:	f0 91 e4 21 	lds	r31, 0x21E4
    24f0:	30 97       	sbiw	r30, 0x00	; 0
    24f2:	29 f0       	breq	.+10     	; 0x24fe <__vector_59+0x3c>
    24f4:	80 91 d9 22 	lds	r24, 0x22D9
    24f8:	90 91 da 22 	lds	r25, 0x22DA
    24fc:	19 95       	eicall
    24fe:	ff 91       	pop	r31
    2500:	ef 91       	pop	r30
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	0f 90       	pop	r0
    2518:	0b be       	out	0x3b, r0	; 59
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	0f 90       	pop	r0
    2520:	1f 90       	pop	r1
    2522:	18 95       	reti

00002524 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2524:	1f 92       	push	r1
    2526:	0f 92       	push	r0
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	0f 92       	push	r0
    252c:	11 24       	eor	r1, r1
    252e:	0b b6       	in	r0, 0x3b	; 59
    2530:	0f 92       	push	r0
    2532:	2f 93       	push	r18
    2534:	3f 93       	push	r19
    2536:	4f 93       	push	r20
    2538:	5f 93       	push	r21
    253a:	6f 93       	push	r22
    253c:	7f 93       	push	r23
    253e:	8f 93       	push	r24
    2540:	9f 93       	push	r25
    2542:	af 93       	push	r26
    2544:	bf 93       	push	r27
    2546:	ef 93       	push	r30
    2548:	ff 93       	push	r31
    254a:	e0 91 e5 21 	lds	r30, 0x21E5
    254e:	f0 91 e6 21 	lds	r31, 0x21E6
    2552:	30 97       	sbiw	r30, 0x00	; 0
    2554:	29 f0       	breq	.+10     	; 0x2560 <__vector_60+0x3c>
    2556:	80 91 db 22 	lds	r24, 0x22DB
    255a:	90 91 dc 22 	lds	r25, 0x22DC
    255e:	19 95       	eicall
    2560:	ff 91       	pop	r31
    2562:	ef 91       	pop	r30
    2564:	bf 91       	pop	r27
    2566:	af 91       	pop	r26
    2568:	9f 91       	pop	r25
    256a:	8f 91       	pop	r24
    256c:	7f 91       	pop	r23
    256e:	6f 91       	pop	r22
    2570:	5f 91       	pop	r21
    2572:	4f 91       	pop	r20
    2574:	3f 91       	pop	r19
    2576:	2f 91       	pop	r18
    2578:	0f 90       	pop	r0
    257a:	0b be       	out	0x3b, r0	; 59
    257c:	0f 90       	pop	r0
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	0f 90       	pop	r0
    2582:	1f 90       	pop	r1
    2584:	18 95       	reti

00002586 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	11 24       	eor	r1, r1
    2590:	0b b6       	in	r0, 0x3b	; 59
    2592:	0f 92       	push	r0
    2594:	2f 93       	push	r18
    2596:	3f 93       	push	r19
    2598:	4f 93       	push	r20
    259a:	5f 93       	push	r21
    259c:	6f 93       	push	r22
    259e:	7f 93       	push	r23
    25a0:	8f 93       	push	r24
    25a2:	9f 93       	push	r25
    25a4:	af 93       	push	r26
    25a6:	bf 93       	push	r27
    25a8:	ef 93       	push	r30
    25aa:	ff 93       	push	r31
    25ac:	e0 91 e7 21 	lds	r30, 0x21E7
    25b0:	f0 91 e8 21 	lds	r31, 0x21E8
    25b4:	30 97       	sbiw	r30, 0x00	; 0
    25b6:	29 f0       	breq	.+10     	; 0x25c2 <__vector_61+0x3c>
    25b8:	80 91 dd 22 	lds	r24, 0x22DD
    25bc:	90 91 de 22 	lds	r25, 0x22DE
    25c0:	19 95       	eicall
    25c2:	ff 91       	pop	r31
    25c4:	ef 91       	pop	r30
    25c6:	bf 91       	pop	r27
    25c8:	af 91       	pop	r26
    25ca:	9f 91       	pop	r25
    25cc:	8f 91       	pop	r24
    25ce:	7f 91       	pop	r23
    25d0:	6f 91       	pop	r22
    25d2:	5f 91       	pop	r21
    25d4:	4f 91       	pop	r20
    25d6:	3f 91       	pop	r19
    25d8:	2f 91       	pop	r18
    25da:	0f 90       	pop	r0
    25dc:	0b be       	out	0x3b, r0	; 59
    25de:	0f 90       	pop	r0
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	0f 90       	pop	r0
    25e4:	1f 90       	pop	r1
    25e6:	18 95       	reti

000025e8 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    25e8:	1f 92       	push	r1
    25ea:	0f 92       	push	r0
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	0f 92       	push	r0
    25f0:	11 24       	eor	r1, r1
    25f2:	0b b6       	in	r0, 0x3b	; 59
    25f4:	0f 92       	push	r0
    25f6:	2f 93       	push	r18
    25f8:	3f 93       	push	r19
    25fa:	4f 93       	push	r20
    25fc:	5f 93       	push	r21
    25fe:	6f 93       	push	r22
    2600:	7f 93       	push	r23
    2602:	8f 93       	push	r24
    2604:	9f 93       	push	r25
    2606:	af 93       	push	r26
    2608:	bf 93       	push	r27
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
    260e:	e0 91 e9 21 	lds	r30, 0x21E9
    2612:	f0 91 ea 21 	lds	r31, 0x21EA
    2616:	30 97       	sbiw	r30, 0x00	; 0
    2618:	29 f0       	breq	.+10     	; 0x2624 <__vector_62+0x3c>
    261a:	80 91 df 22 	lds	r24, 0x22DF
    261e:	90 91 e0 22 	lds	r25, 0x22E0
    2622:	19 95       	eicall
    2624:	ff 91       	pop	r31
    2626:	ef 91       	pop	r30
    2628:	bf 91       	pop	r27
    262a:	af 91       	pop	r26
    262c:	9f 91       	pop	r25
    262e:	8f 91       	pop	r24
    2630:	7f 91       	pop	r23
    2632:	6f 91       	pop	r22
    2634:	5f 91       	pop	r21
    2636:	4f 91       	pop	r20
    2638:	3f 91       	pop	r19
    263a:	2f 91       	pop	r18
    263c:	0f 90       	pop	r0
    263e:	0b be       	out	0x3b, r0	; 59
    2640:	0f 90       	pop	r0
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	0f 90       	pop	r0
    2646:	1f 90       	pop	r1
    2648:	18 95       	reti

0000264a <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    264a:	1f 92       	push	r1
    264c:	0f 92       	push	r0
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	0f 92       	push	r0
    2652:	11 24       	eor	r1, r1
    2654:	0b b6       	in	r0, 0x3b	; 59
    2656:	0f 92       	push	r0
    2658:	2f 93       	push	r18
    265a:	3f 93       	push	r19
    265c:	4f 93       	push	r20
    265e:	5f 93       	push	r21
    2660:	6f 93       	push	r22
    2662:	7f 93       	push	r23
    2664:	8f 93       	push	r24
    2666:	9f 93       	push	r25
    2668:	af 93       	push	r26
    266a:	bf 93       	push	r27
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
    2670:	e0 91 eb 21 	lds	r30, 0x21EB
    2674:	f0 91 ec 21 	lds	r31, 0x21EC
    2678:	30 97       	sbiw	r30, 0x00	; 0
    267a:	29 f0       	breq	.+10     	; 0x2686 <__vector_63+0x3c>
    267c:	80 91 e1 22 	lds	r24, 0x22E1
    2680:	90 91 e2 22 	lds	r25, 0x22E2
    2684:	19 95       	eicall
    2686:	ff 91       	pop	r31
    2688:	ef 91       	pop	r30
    268a:	bf 91       	pop	r27
    268c:	af 91       	pop	r26
    268e:	9f 91       	pop	r25
    2690:	8f 91       	pop	r24
    2692:	7f 91       	pop	r23
    2694:	6f 91       	pop	r22
    2696:	5f 91       	pop	r21
    2698:	4f 91       	pop	r20
    269a:	3f 91       	pop	r19
    269c:	2f 91       	pop	r18
    269e:	0f 90       	pop	r0
    26a0:	0b be       	out	0x3b, r0	; 59
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

000026ac <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    26ac:	1f 92       	push	r1
    26ae:	0f 92       	push	r0
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	0f 92       	push	r0
    26b4:	11 24       	eor	r1, r1
    26b6:	0b b6       	in	r0, 0x3b	; 59
    26b8:	0f 92       	push	r0
    26ba:	2f 93       	push	r18
    26bc:	3f 93       	push	r19
    26be:	4f 93       	push	r20
    26c0:	5f 93       	push	r21
    26c2:	6f 93       	push	r22
    26c4:	7f 93       	push	r23
    26c6:	8f 93       	push	r24
    26c8:	9f 93       	push	r25
    26ca:	af 93       	push	r26
    26cc:	bf 93       	push	r27
    26ce:	ef 93       	push	r30
    26d0:	ff 93       	push	r31
    26d2:	e0 91 ed 21 	lds	r30, 0x21ED
    26d6:	f0 91 ee 21 	lds	r31, 0x21EE
    26da:	30 97       	sbiw	r30, 0x00	; 0
    26dc:	29 f0       	breq	.+10     	; 0x26e8 <__vector_64+0x3c>
    26de:	80 91 e3 22 	lds	r24, 0x22E3
    26e2:	90 91 e4 22 	lds	r25, 0x22E4
    26e6:	19 95       	eicall
    26e8:	ff 91       	pop	r31
    26ea:	ef 91       	pop	r30
    26ec:	bf 91       	pop	r27
    26ee:	af 91       	pop	r26
    26f0:	9f 91       	pop	r25
    26f2:	8f 91       	pop	r24
    26f4:	7f 91       	pop	r23
    26f6:	6f 91       	pop	r22
    26f8:	5f 91       	pop	r21
    26fa:	4f 91       	pop	r20
    26fc:	3f 91       	pop	r19
    26fe:	2f 91       	pop	r18
    2700:	0f 90       	pop	r0
    2702:	0b be       	out	0x3b, r0	; 59
    2704:	0f 90       	pop	r0
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	0f 90       	pop	r0
    270a:	1f 90       	pop	r1
    270c:	18 95       	reti

0000270e <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    270e:	1f 92       	push	r1
    2710:	0f 92       	push	r0
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	0f 92       	push	r0
    2716:	11 24       	eor	r1, r1
    2718:	0b b6       	in	r0, 0x3b	; 59
    271a:	0f 92       	push	r0
    271c:	2f 93       	push	r18
    271e:	3f 93       	push	r19
    2720:	4f 93       	push	r20
    2722:	5f 93       	push	r21
    2724:	6f 93       	push	r22
    2726:	7f 93       	push	r23
    2728:	8f 93       	push	r24
    272a:	9f 93       	push	r25
    272c:	af 93       	push	r26
    272e:	bf 93       	push	r27
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	e0 91 ef 21 	lds	r30, 0x21EF
    2738:	f0 91 f0 21 	lds	r31, 0x21F0
    273c:	30 97       	sbiw	r30, 0x00	; 0
    273e:	29 f0       	breq	.+10     	; 0x274a <__vector_65+0x3c>
    2740:	80 91 e5 22 	lds	r24, 0x22E5
    2744:	90 91 e6 22 	lds	r25, 0x22E6
    2748:	19 95       	eicall
    274a:	ff 91       	pop	r31
    274c:	ef 91       	pop	r30
    274e:	bf 91       	pop	r27
    2750:	af 91       	pop	r26
    2752:	9f 91       	pop	r25
    2754:	8f 91       	pop	r24
    2756:	7f 91       	pop	r23
    2758:	6f 91       	pop	r22
    275a:	5f 91       	pop	r21
    275c:	4f 91       	pop	r20
    275e:	3f 91       	pop	r19
    2760:	2f 91       	pop	r18
    2762:	0f 90       	pop	r0
    2764:	0b be       	out	0x3b, r0	; 59
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	0f 90       	pop	r0
    276c:	1f 90       	pop	r1
    276e:	18 95       	reti

00002770 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    2770:	1f 92       	push	r1
    2772:	0f 92       	push	r0
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	0f 92       	push	r0
    2778:	11 24       	eor	r1, r1
    277a:	0b b6       	in	r0, 0x3b	; 59
    277c:	0f 92       	push	r0
    277e:	2f 93       	push	r18
    2780:	3f 93       	push	r19
    2782:	4f 93       	push	r20
    2784:	5f 93       	push	r21
    2786:	6f 93       	push	r22
    2788:	7f 93       	push	r23
    278a:	8f 93       	push	r24
    278c:	9f 93       	push	r25
    278e:	af 93       	push	r26
    2790:	bf 93       	push	r27
    2792:	ef 93       	push	r30
    2794:	ff 93       	push	r31
    2796:	e0 91 f1 21 	lds	r30, 0x21F1
    279a:	f0 91 f2 21 	lds	r31, 0x21F2
    279e:	30 97       	sbiw	r30, 0x00	; 0
    27a0:	29 f0       	breq	.+10     	; 0x27ac <__vector_66+0x3c>
    27a2:	80 91 e7 22 	lds	r24, 0x22E7
    27a6:	90 91 e8 22 	lds	r25, 0x22E8
    27aa:	19 95       	eicall
    27ac:	ff 91       	pop	r31
    27ae:	ef 91       	pop	r30
    27b0:	bf 91       	pop	r27
    27b2:	af 91       	pop	r26
    27b4:	9f 91       	pop	r25
    27b6:	8f 91       	pop	r24
    27b8:	7f 91       	pop	r23
    27ba:	6f 91       	pop	r22
    27bc:	5f 91       	pop	r21
    27be:	4f 91       	pop	r20
    27c0:	3f 91       	pop	r19
    27c2:	2f 91       	pop	r18
    27c4:	0f 90       	pop	r0
    27c6:	0b be       	out	0x3b, r0	; 59
    27c8:	0f 90       	pop	r0
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	0f 90       	pop	r0
    27ce:	1f 90       	pop	r1
    27d0:	18 95       	reti

000027d2 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	0b b6       	in	r0, 0x3b	; 59
    27de:	0f 92       	push	r0
    27e0:	2f 93       	push	r18
    27e2:	3f 93       	push	r19
    27e4:	4f 93       	push	r20
    27e6:	5f 93       	push	r21
    27e8:	6f 93       	push	r22
    27ea:	7f 93       	push	r23
    27ec:	8f 93       	push	r24
    27ee:	9f 93       	push	r25
    27f0:	af 93       	push	r26
    27f2:	bf 93       	push	r27
    27f4:	ef 93       	push	r30
    27f6:	ff 93       	push	r31
    27f8:	e0 91 f3 21 	lds	r30, 0x21F3
    27fc:	f0 91 f4 21 	lds	r31, 0x21F4
    2800:	30 97       	sbiw	r30, 0x00	; 0
    2802:	29 f0       	breq	.+10     	; 0x280e <__vector_67+0x3c>
    2804:	80 91 e9 22 	lds	r24, 0x22E9
    2808:	90 91 ea 22 	lds	r25, 0x22EA
    280c:	19 95       	eicall
    280e:	ff 91       	pop	r31
    2810:	ef 91       	pop	r30
    2812:	bf 91       	pop	r27
    2814:	af 91       	pop	r26
    2816:	9f 91       	pop	r25
    2818:	8f 91       	pop	r24
    281a:	7f 91       	pop	r23
    281c:	6f 91       	pop	r22
    281e:	5f 91       	pop	r21
    2820:	4f 91       	pop	r20
    2822:	3f 91       	pop	r19
    2824:	2f 91       	pop	r18
    2826:	0f 90       	pop	r0
    2828:	0b be       	out	0x3b, r0	; 59
    282a:	0f 90       	pop	r0
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	0f 90       	pop	r0
    2830:	1f 90       	pop	r1
    2832:	18 95       	reti

00002834 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    2834:	1f 92       	push	r1
    2836:	0f 92       	push	r0
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	0f 92       	push	r0
    283c:	11 24       	eor	r1, r1
    283e:	0b b6       	in	r0, 0x3b	; 59
    2840:	0f 92       	push	r0
    2842:	2f 93       	push	r18
    2844:	3f 93       	push	r19
    2846:	4f 93       	push	r20
    2848:	5f 93       	push	r21
    284a:	6f 93       	push	r22
    284c:	7f 93       	push	r23
    284e:	8f 93       	push	r24
    2850:	9f 93       	push	r25
    2852:	af 93       	push	r26
    2854:	bf 93       	push	r27
    2856:	ef 93       	push	r30
    2858:	ff 93       	push	r31
    285a:	e0 91 f5 21 	lds	r30, 0x21F5
    285e:	f0 91 f6 21 	lds	r31, 0x21F6
    2862:	30 97       	sbiw	r30, 0x00	; 0
    2864:	29 f0       	breq	.+10     	; 0x2870 <__vector_68+0x3c>
    2866:	80 91 eb 22 	lds	r24, 0x22EB
    286a:	90 91 ec 22 	lds	r25, 0x22EC
    286e:	19 95       	eicall
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0b be       	out	0x3b, r0	; 59
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	0f 90       	pop	r0
    2892:	1f 90       	pop	r1
    2894:	18 95       	reti

00002896 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    2896:	1f 92       	push	r1
    2898:	0f 92       	push	r0
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	0f 92       	push	r0
    289e:	11 24       	eor	r1, r1
    28a0:	0b b6       	in	r0, 0x3b	; 59
    28a2:	0f 92       	push	r0
    28a4:	2f 93       	push	r18
    28a6:	3f 93       	push	r19
    28a8:	4f 93       	push	r20
    28aa:	5f 93       	push	r21
    28ac:	6f 93       	push	r22
    28ae:	7f 93       	push	r23
    28b0:	8f 93       	push	r24
    28b2:	9f 93       	push	r25
    28b4:	af 93       	push	r26
    28b6:	bf 93       	push	r27
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	e0 91 f7 21 	lds	r30, 0x21F7
    28c0:	f0 91 f8 21 	lds	r31, 0x21F8
    28c4:	30 97       	sbiw	r30, 0x00	; 0
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <__vector_69+0x3c>
    28c8:	80 91 ed 22 	lds	r24, 0x22ED
    28cc:	90 91 ee 22 	lds	r25, 0x22EE
    28d0:	19 95       	eicall
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	bf 91       	pop	r27
    28d8:	af 91       	pop	r26
    28da:	9f 91       	pop	r25
    28dc:	8f 91       	pop	r24
    28de:	7f 91       	pop	r23
    28e0:	6f 91       	pop	r22
    28e2:	5f 91       	pop	r21
    28e4:	4f 91       	pop	r20
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	0b be       	out	0x3b, r0	; 59
    28ee:	0f 90       	pop	r0
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	0f 90       	pop	r0
    28f4:	1f 90       	pop	r1
    28f6:	18 95       	reti

000028f8 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    28f8:	1f 92       	push	r1
    28fa:	0f 92       	push	r0
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	0f 92       	push	r0
    2900:	11 24       	eor	r1, r1
    2902:	0b b6       	in	r0, 0x3b	; 59
    2904:	0f 92       	push	r0
    2906:	2f 93       	push	r18
    2908:	3f 93       	push	r19
    290a:	4f 93       	push	r20
    290c:	5f 93       	push	r21
    290e:	6f 93       	push	r22
    2910:	7f 93       	push	r23
    2912:	8f 93       	push	r24
    2914:	9f 93       	push	r25
    2916:	af 93       	push	r26
    2918:	bf 93       	push	r27
    291a:	ef 93       	push	r30
    291c:	ff 93       	push	r31
    291e:	e0 91 f9 21 	lds	r30, 0x21F9
    2922:	f0 91 fa 21 	lds	r31, 0x21FA
    2926:	30 97       	sbiw	r30, 0x00	; 0
    2928:	29 f0       	breq	.+10     	; 0x2934 <__vector_70+0x3c>
    292a:	80 91 ef 22 	lds	r24, 0x22EF
    292e:	90 91 f0 22 	lds	r25, 0x22F0
    2932:	19 95       	eicall
    2934:	ff 91       	pop	r31
    2936:	ef 91       	pop	r30
    2938:	bf 91       	pop	r27
    293a:	af 91       	pop	r26
    293c:	9f 91       	pop	r25
    293e:	8f 91       	pop	r24
    2940:	7f 91       	pop	r23
    2942:	6f 91       	pop	r22
    2944:	5f 91       	pop	r21
    2946:	4f 91       	pop	r20
    2948:	3f 91       	pop	r19
    294a:	2f 91       	pop	r18
    294c:	0f 90       	pop	r0
    294e:	0b be       	out	0x3b, r0	; 59
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	0b b6       	in	r0, 0x3b	; 59
    2966:	0f 92       	push	r0
    2968:	2f 93       	push	r18
    296a:	3f 93       	push	r19
    296c:	4f 93       	push	r20
    296e:	5f 93       	push	r21
    2970:	6f 93       	push	r22
    2972:	7f 93       	push	r23
    2974:	8f 93       	push	r24
    2976:	9f 93       	push	r25
    2978:	af 93       	push	r26
    297a:	bf 93       	push	r27
    297c:	ef 93       	push	r30
    297e:	ff 93       	push	r31
    2980:	e0 91 fb 21 	lds	r30, 0x21FB
    2984:	f0 91 fc 21 	lds	r31, 0x21FC
    2988:	30 97       	sbiw	r30, 0x00	; 0
    298a:	29 f0       	breq	.+10     	; 0x2996 <__vector_71+0x3c>
    298c:	80 91 f1 22 	lds	r24, 0x22F1
    2990:	90 91 f2 22 	lds	r25, 0x22F2
    2994:	19 95       	eicall
    2996:	ff 91       	pop	r31
    2998:	ef 91       	pop	r30
    299a:	bf 91       	pop	r27
    299c:	af 91       	pop	r26
    299e:	9f 91       	pop	r25
    29a0:	8f 91       	pop	r24
    29a2:	7f 91       	pop	r23
    29a4:	6f 91       	pop	r22
    29a6:	5f 91       	pop	r21
    29a8:	4f 91       	pop	r20
    29aa:	3f 91       	pop	r19
    29ac:	2f 91       	pop	r18
    29ae:	0f 90       	pop	r0
    29b0:	0b be       	out	0x3b, r0	; 59
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	0f 90       	pop	r0
    29b8:	1f 90       	pop	r1
    29ba:	18 95       	reti

000029bc <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    29bc:	1f 92       	push	r1
    29be:	0f 92       	push	r0
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	0f 92       	push	r0
    29c4:	11 24       	eor	r1, r1
    29c6:	0b b6       	in	r0, 0x3b	; 59
    29c8:	0f 92       	push	r0
    29ca:	2f 93       	push	r18
    29cc:	3f 93       	push	r19
    29ce:	4f 93       	push	r20
    29d0:	5f 93       	push	r21
    29d2:	6f 93       	push	r22
    29d4:	7f 93       	push	r23
    29d6:	8f 93       	push	r24
    29d8:	9f 93       	push	r25
    29da:	af 93       	push	r26
    29dc:	bf 93       	push	r27
    29de:	ef 93       	push	r30
    29e0:	ff 93       	push	r31
    29e2:	e0 91 fd 21 	lds	r30, 0x21FD
    29e6:	f0 91 fe 21 	lds	r31, 0x21FE
    29ea:	30 97       	sbiw	r30, 0x00	; 0
    29ec:	29 f0       	breq	.+10     	; 0x29f8 <__vector_72+0x3c>
    29ee:	80 91 f3 22 	lds	r24, 0x22F3
    29f2:	90 91 f4 22 	lds	r25, 0x22F4
    29f6:	19 95       	eicall
    29f8:	ff 91       	pop	r31
    29fa:	ef 91       	pop	r30
    29fc:	bf 91       	pop	r27
    29fe:	af 91       	pop	r26
    2a00:	9f 91       	pop	r25
    2a02:	8f 91       	pop	r24
    2a04:	7f 91       	pop	r23
    2a06:	6f 91       	pop	r22
    2a08:	5f 91       	pop	r21
    2a0a:	4f 91       	pop	r20
    2a0c:	3f 91       	pop	r19
    2a0e:	2f 91       	pop	r18
    2a10:	0f 90       	pop	r0
    2a12:	0b be       	out	0x3b, r0	; 59
    2a14:	0f 90       	pop	r0
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	0f 90       	pop	r0
    2a1a:	1f 90       	pop	r1
    2a1c:	18 95       	reti

00002a1e <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    2a1e:	1f 92       	push	r1
    2a20:	0f 92       	push	r0
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	0f 92       	push	r0
    2a26:	11 24       	eor	r1, r1
    2a28:	0b b6       	in	r0, 0x3b	; 59
    2a2a:	0f 92       	push	r0
    2a2c:	2f 93       	push	r18
    2a2e:	3f 93       	push	r19
    2a30:	4f 93       	push	r20
    2a32:	5f 93       	push	r21
    2a34:	6f 93       	push	r22
    2a36:	7f 93       	push	r23
    2a38:	8f 93       	push	r24
    2a3a:	9f 93       	push	r25
    2a3c:	af 93       	push	r26
    2a3e:	bf 93       	push	r27
    2a40:	ef 93       	push	r30
    2a42:	ff 93       	push	r31
    2a44:	e0 91 ff 21 	lds	r30, 0x21FF
    2a48:	f0 91 00 22 	lds	r31, 0x2200
    2a4c:	30 97       	sbiw	r30, 0x00	; 0
    2a4e:	29 f0       	breq	.+10     	; 0x2a5a <__vector_73+0x3c>
    2a50:	80 91 f5 22 	lds	r24, 0x22F5
    2a54:	90 91 f6 22 	lds	r25, 0x22F6
    2a58:	19 95       	eicall
    2a5a:	ff 91       	pop	r31
    2a5c:	ef 91       	pop	r30
    2a5e:	bf 91       	pop	r27
    2a60:	af 91       	pop	r26
    2a62:	9f 91       	pop	r25
    2a64:	8f 91       	pop	r24
    2a66:	7f 91       	pop	r23
    2a68:	6f 91       	pop	r22
    2a6a:	5f 91       	pop	r21
    2a6c:	4f 91       	pop	r20
    2a6e:	3f 91       	pop	r19
    2a70:	2f 91       	pop	r18
    2a72:	0f 90       	pop	r0
    2a74:	0b be       	out	0x3b, r0	; 59
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	0b b6       	in	r0, 0x3b	; 59
    2a8c:	0f 92       	push	r0
    2a8e:	2f 93       	push	r18
    2a90:	3f 93       	push	r19
    2a92:	4f 93       	push	r20
    2a94:	5f 93       	push	r21
    2a96:	6f 93       	push	r22
    2a98:	7f 93       	push	r23
    2a9a:	8f 93       	push	r24
    2a9c:	9f 93       	push	r25
    2a9e:	af 93       	push	r26
    2aa0:	bf 93       	push	r27
    2aa2:	ef 93       	push	r30
    2aa4:	ff 93       	push	r31
    2aa6:	e0 91 01 22 	lds	r30, 0x2201
    2aaa:	f0 91 02 22 	lds	r31, 0x2202
    2aae:	30 97       	sbiw	r30, 0x00	; 0
    2ab0:	29 f0       	breq	.+10     	; 0x2abc <__vector_74+0x3c>
    2ab2:	80 91 f7 22 	lds	r24, 0x22F7
    2ab6:	90 91 f8 22 	lds	r25, 0x22F8
    2aba:	19 95       	eicall
    2abc:	ff 91       	pop	r31
    2abe:	ef 91       	pop	r30
    2ac0:	bf 91       	pop	r27
    2ac2:	af 91       	pop	r26
    2ac4:	9f 91       	pop	r25
    2ac6:	8f 91       	pop	r24
    2ac8:	7f 91       	pop	r23
    2aca:	6f 91       	pop	r22
    2acc:	5f 91       	pop	r21
    2ace:	4f 91       	pop	r20
    2ad0:	3f 91       	pop	r19
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0b be       	out	0x3b, r0	; 59
    2ad8:	0f 90       	pop	r0
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	0f 90       	pop	r0
    2ade:	1f 90       	pop	r1
    2ae0:	18 95       	reti

00002ae2 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    2ae2:	1f 92       	push	r1
    2ae4:	0f 92       	push	r0
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	0f 92       	push	r0
    2aea:	11 24       	eor	r1, r1
    2aec:	0b b6       	in	r0, 0x3b	; 59
    2aee:	0f 92       	push	r0
    2af0:	2f 93       	push	r18
    2af2:	3f 93       	push	r19
    2af4:	4f 93       	push	r20
    2af6:	5f 93       	push	r21
    2af8:	6f 93       	push	r22
    2afa:	7f 93       	push	r23
    2afc:	8f 93       	push	r24
    2afe:	9f 93       	push	r25
    2b00:	af 93       	push	r26
    2b02:	bf 93       	push	r27
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
    2b08:	e0 91 07 22 	lds	r30, 0x2207
    2b0c:	f0 91 08 22 	lds	r31, 0x2208
    2b10:	30 97       	sbiw	r30, 0x00	; 0
    2b12:	29 f0       	breq	.+10     	; 0x2b1e <__vector_77+0x3c>
    2b14:	80 91 fd 22 	lds	r24, 0x22FD
    2b18:	90 91 fe 22 	lds	r25, 0x22FE
    2b1c:	19 95       	eicall
    2b1e:	ff 91       	pop	r31
    2b20:	ef 91       	pop	r30
    2b22:	bf 91       	pop	r27
    2b24:	af 91       	pop	r26
    2b26:	9f 91       	pop	r25
    2b28:	8f 91       	pop	r24
    2b2a:	7f 91       	pop	r23
    2b2c:	6f 91       	pop	r22
    2b2e:	5f 91       	pop	r21
    2b30:	4f 91       	pop	r20
    2b32:	3f 91       	pop	r19
    2b34:	2f 91       	pop	r18
    2b36:	0f 90       	pop	r0
    2b38:	0b be       	out	0x3b, r0	; 59
    2b3a:	0f 90       	pop	r0
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	0f 90       	pop	r0
    2b40:	1f 90       	pop	r1
    2b42:	18 95       	reti

00002b44 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    2b44:	1f 92       	push	r1
    2b46:	0f 92       	push	r0
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	0f 92       	push	r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	0b b6       	in	r0, 0x3b	; 59
    2b50:	0f 92       	push	r0
    2b52:	2f 93       	push	r18
    2b54:	3f 93       	push	r19
    2b56:	4f 93       	push	r20
    2b58:	5f 93       	push	r21
    2b5a:	6f 93       	push	r22
    2b5c:	7f 93       	push	r23
    2b5e:	8f 93       	push	r24
    2b60:	9f 93       	push	r25
    2b62:	af 93       	push	r26
    2b64:	bf 93       	push	r27
    2b66:	ef 93       	push	r30
    2b68:	ff 93       	push	r31
    2b6a:	e0 91 09 22 	lds	r30, 0x2209
    2b6e:	f0 91 0a 22 	lds	r31, 0x220A
    2b72:	30 97       	sbiw	r30, 0x00	; 0
    2b74:	29 f0       	breq	.+10     	; 0x2b80 <__vector_78+0x3c>
    2b76:	80 91 ff 22 	lds	r24, 0x22FF
    2b7a:	90 91 00 23 	lds	r25, 0x2300
    2b7e:	19 95       	eicall
    2b80:	ff 91       	pop	r31
    2b82:	ef 91       	pop	r30
    2b84:	bf 91       	pop	r27
    2b86:	af 91       	pop	r26
    2b88:	9f 91       	pop	r25
    2b8a:	8f 91       	pop	r24
    2b8c:	7f 91       	pop	r23
    2b8e:	6f 91       	pop	r22
    2b90:	5f 91       	pop	r21
    2b92:	4f 91       	pop	r20
    2b94:	3f 91       	pop	r19
    2b96:	2f 91       	pop	r18
    2b98:	0f 90       	pop	r0
    2b9a:	0b be       	out	0x3b, r0	; 59
    2b9c:	0f 90       	pop	r0
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	0f 90       	pop	r0
    2ba2:	1f 90       	pop	r1
    2ba4:	18 95       	reti

00002ba6 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    2ba6:	1f 92       	push	r1
    2ba8:	0f 92       	push	r0
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	0f 92       	push	r0
    2bae:	11 24       	eor	r1, r1
    2bb0:	0b b6       	in	r0, 0x3b	; 59
    2bb2:	0f 92       	push	r0
    2bb4:	2f 93       	push	r18
    2bb6:	3f 93       	push	r19
    2bb8:	4f 93       	push	r20
    2bba:	5f 93       	push	r21
    2bbc:	6f 93       	push	r22
    2bbe:	7f 93       	push	r23
    2bc0:	8f 93       	push	r24
    2bc2:	9f 93       	push	r25
    2bc4:	af 93       	push	r26
    2bc6:	bf 93       	push	r27
    2bc8:	ef 93       	push	r30
    2bca:	ff 93       	push	r31
    2bcc:	e0 91 0b 22 	lds	r30, 0x220B
    2bd0:	f0 91 0c 22 	lds	r31, 0x220C
    2bd4:	30 97       	sbiw	r30, 0x00	; 0
    2bd6:	29 f0       	breq	.+10     	; 0x2be2 <__vector_79+0x3c>
    2bd8:	80 91 01 23 	lds	r24, 0x2301
    2bdc:	90 91 02 23 	lds	r25, 0x2302
    2be0:	19 95       	eicall
    2be2:	ff 91       	pop	r31
    2be4:	ef 91       	pop	r30
    2be6:	bf 91       	pop	r27
    2be8:	af 91       	pop	r26
    2bea:	9f 91       	pop	r25
    2bec:	8f 91       	pop	r24
    2bee:	7f 91       	pop	r23
    2bf0:	6f 91       	pop	r22
    2bf2:	5f 91       	pop	r21
    2bf4:	4f 91       	pop	r20
    2bf6:	3f 91       	pop	r19
    2bf8:	2f 91       	pop	r18
    2bfa:	0f 90       	pop	r0
    2bfc:	0b be       	out	0x3b, r0	; 59
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	0f 90       	pop	r0
    2c04:	1f 90       	pop	r1
    2c06:	18 95       	reti

00002c08 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	0b b6       	in	r0, 0x3b	; 59
    2c14:	0f 92       	push	r0
    2c16:	2f 93       	push	r18
    2c18:	3f 93       	push	r19
    2c1a:	4f 93       	push	r20
    2c1c:	5f 93       	push	r21
    2c1e:	6f 93       	push	r22
    2c20:	7f 93       	push	r23
    2c22:	8f 93       	push	r24
    2c24:	9f 93       	push	r25
    2c26:	af 93       	push	r26
    2c28:	bf 93       	push	r27
    2c2a:	ef 93       	push	r30
    2c2c:	ff 93       	push	r31
    2c2e:	e0 91 0d 22 	lds	r30, 0x220D
    2c32:	f0 91 0e 22 	lds	r31, 0x220E
    2c36:	30 97       	sbiw	r30, 0x00	; 0
    2c38:	29 f0       	breq	.+10     	; 0x2c44 <__vector_80+0x3c>
    2c3a:	80 91 03 23 	lds	r24, 0x2303
    2c3e:	90 91 04 23 	lds	r25, 0x2304
    2c42:	19 95       	eicall
    2c44:	ff 91       	pop	r31
    2c46:	ef 91       	pop	r30
    2c48:	bf 91       	pop	r27
    2c4a:	af 91       	pop	r26
    2c4c:	9f 91       	pop	r25
    2c4e:	8f 91       	pop	r24
    2c50:	7f 91       	pop	r23
    2c52:	6f 91       	pop	r22
    2c54:	5f 91       	pop	r21
    2c56:	4f 91       	pop	r20
    2c58:	3f 91       	pop	r19
    2c5a:	2f 91       	pop	r18
    2c5c:	0f 90       	pop	r0
    2c5e:	0b be       	out	0x3b, r0	; 59
    2c60:	0f 90       	pop	r0
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	0f 90       	pop	r0
    2c66:	1f 90       	pop	r1
    2c68:	18 95       	reti

00002c6a <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    2c6a:	1f 92       	push	r1
    2c6c:	0f 92       	push	r0
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	0f 92       	push	r0
    2c72:	11 24       	eor	r1, r1
    2c74:	0b b6       	in	r0, 0x3b	; 59
    2c76:	0f 92       	push	r0
    2c78:	2f 93       	push	r18
    2c7a:	3f 93       	push	r19
    2c7c:	4f 93       	push	r20
    2c7e:	5f 93       	push	r21
    2c80:	6f 93       	push	r22
    2c82:	7f 93       	push	r23
    2c84:	8f 93       	push	r24
    2c86:	9f 93       	push	r25
    2c88:	af 93       	push	r26
    2c8a:	bf 93       	push	r27
    2c8c:	ef 93       	push	r30
    2c8e:	ff 93       	push	r31
    2c90:	e0 91 0f 22 	lds	r30, 0x220F
    2c94:	f0 91 10 22 	lds	r31, 0x2210
    2c98:	30 97       	sbiw	r30, 0x00	; 0
    2c9a:	29 f0       	breq	.+10     	; 0x2ca6 <__vector_81+0x3c>
    2c9c:	80 91 05 23 	lds	r24, 0x2305
    2ca0:	90 91 06 23 	lds	r25, 0x2306
    2ca4:	19 95       	eicall
    2ca6:	ff 91       	pop	r31
    2ca8:	ef 91       	pop	r30
    2caa:	bf 91       	pop	r27
    2cac:	af 91       	pop	r26
    2cae:	9f 91       	pop	r25
    2cb0:	8f 91       	pop	r24
    2cb2:	7f 91       	pop	r23
    2cb4:	6f 91       	pop	r22
    2cb6:	5f 91       	pop	r21
    2cb8:	4f 91       	pop	r20
    2cba:	3f 91       	pop	r19
    2cbc:	2f 91       	pop	r18
    2cbe:	0f 90       	pop	r0
    2cc0:	0b be       	out	0x3b, r0	; 59
    2cc2:	0f 90       	pop	r0
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	0f 90       	pop	r0
    2cc8:	1f 90       	pop	r1
    2cca:	18 95       	reti

00002ccc <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    2ccc:	1f 92       	push	r1
    2cce:	0f 92       	push	r0
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	0f 92       	push	r0
    2cd4:	11 24       	eor	r1, r1
    2cd6:	0b b6       	in	r0, 0x3b	; 59
    2cd8:	0f 92       	push	r0
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	ef 93       	push	r30
    2cf0:	ff 93       	push	r31
    2cf2:	e0 91 11 22 	lds	r30, 0x2211
    2cf6:	f0 91 12 22 	lds	r31, 0x2212
    2cfa:	30 97       	sbiw	r30, 0x00	; 0
    2cfc:	29 f0       	breq	.+10     	; 0x2d08 <__vector_82+0x3c>
    2cfe:	80 91 07 23 	lds	r24, 0x2307
    2d02:	90 91 08 23 	lds	r25, 0x2308
    2d06:	19 95       	eicall
    2d08:	ff 91       	pop	r31
    2d0a:	ef 91       	pop	r30
    2d0c:	bf 91       	pop	r27
    2d0e:	af 91       	pop	r26
    2d10:	9f 91       	pop	r25
    2d12:	8f 91       	pop	r24
    2d14:	7f 91       	pop	r23
    2d16:	6f 91       	pop	r22
    2d18:	5f 91       	pop	r21
    2d1a:	4f 91       	pop	r20
    2d1c:	3f 91       	pop	r19
    2d1e:	2f 91       	pop	r18
    2d20:	0f 90       	pop	r0
    2d22:	0b be       	out	0x3b, r0	; 59
    2d24:	0f 90       	pop	r0
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	0f 90       	pop	r0
    2d2a:	1f 90       	pop	r1
    2d2c:	18 95       	reti

00002d2e <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    2d2e:	1f 92       	push	r1
    2d30:	0f 92       	push	r0
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	0f 92       	push	r0
    2d36:	11 24       	eor	r1, r1
    2d38:	0b b6       	in	r0, 0x3b	; 59
    2d3a:	0f 92       	push	r0
    2d3c:	2f 93       	push	r18
    2d3e:	3f 93       	push	r19
    2d40:	4f 93       	push	r20
    2d42:	5f 93       	push	r21
    2d44:	6f 93       	push	r22
    2d46:	7f 93       	push	r23
    2d48:	8f 93       	push	r24
    2d4a:	9f 93       	push	r25
    2d4c:	af 93       	push	r26
    2d4e:	bf 93       	push	r27
    2d50:	ef 93       	push	r30
    2d52:	ff 93       	push	r31
    2d54:	e0 91 13 22 	lds	r30, 0x2213
    2d58:	f0 91 14 22 	lds	r31, 0x2214
    2d5c:	30 97       	sbiw	r30, 0x00	; 0
    2d5e:	29 f0       	breq	.+10     	; 0x2d6a <__vector_83+0x3c>
    2d60:	80 91 09 23 	lds	r24, 0x2309
    2d64:	90 91 0a 23 	lds	r25, 0x230A
    2d68:	19 95       	eicall
    2d6a:	ff 91       	pop	r31
    2d6c:	ef 91       	pop	r30
    2d6e:	bf 91       	pop	r27
    2d70:	af 91       	pop	r26
    2d72:	9f 91       	pop	r25
    2d74:	8f 91       	pop	r24
    2d76:	7f 91       	pop	r23
    2d78:	6f 91       	pop	r22
    2d7a:	5f 91       	pop	r21
    2d7c:	4f 91       	pop	r20
    2d7e:	3f 91       	pop	r19
    2d80:	2f 91       	pop	r18
    2d82:	0f 90       	pop	r0
    2d84:	0b be       	out	0x3b, r0	; 59
    2d86:	0f 90       	pop	r0
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	0f 90       	pop	r0
    2d8c:	1f 90       	pop	r1
    2d8e:	18 95       	reti

00002d90 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    2d90:	1f 92       	push	r1
    2d92:	0f 92       	push	r0
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	0f 92       	push	r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	0b b6       	in	r0, 0x3b	; 59
    2d9c:	0f 92       	push	r0
    2d9e:	2f 93       	push	r18
    2da0:	3f 93       	push	r19
    2da2:	4f 93       	push	r20
    2da4:	5f 93       	push	r21
    2da6:	6f 93       	push	r22
    2da8:	7f 93       	push	r23
    2daa:	8f 93       	push	r24
    2dac:	9f 93       	push	r25
    2dae:	af 93       	push	r26
    2db0:	bf 93       	push	r27
    2db2:	ef 93       	push	r30
    2db4:	ff 93       	push	r31
    2db6:	e0 91 15 22 	lds	r30, 0x2215
    2dba:	f0 91 16 22 	lds	r31, 0x2216
    2dbe:	30 97       	sbiw	r30, 0x00	; 0
    2dc0:	29 f0       	breq	.+10     	; 0x2dcc <__vector_84+0x3c>
    2dc2:	80 91 0b 23 	lds	r24, 0x230B
    2dc6:	90 91 0c 23 	lds	r25, 0x230C
    2dca:	19 95       	eicall
    2dcc:	ff 91       	pop	r31
    2dce:	ef 91       	pop	r30
    2dd0:	bf 91       	pop	r27
    2dd2:	af 91       	pop	r26
    2dd4:	9f 91       	pop	r25
    2dd6:	8f 91       	pop	r24
    2dd8:	7f 91       	pop	r23
    2dda:	6f 91       	pop	r22
    2ddc:	5f 91       	pop	r21
    2dde:	4f 91       	pop	r20
    2de0:	3f 91       	pop	r19
    2de2:	2f 91       	pop	r18
    2de4:	0f 90       	pop	r0
    2de6:	0b be       	out	0x3b, r0	; 59
    2de8:	0f 90       	pop	r0
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	0f 90       	pop	r0
    2dee:	1f 90       	pop	r1
    2df0:	18 95       	reti

00002df2 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	0b b6       	in	r0, 0x3b	; 59
    2dfe:	0f 92       	push	r0
    2e00:	2f 93       	push	r18
    2e02:	3f 93       	push	r19
    2e04:	4f 93       	push	r20
    2e06:	5f 93       	push	r21
    2e08:	6f 93       	push	r22
    2e0a:	7f 93       	push	r23
    2e0c:	8f 93       	push	r24
    2e0e:	9f 93       	push	r25
    2e10:	af 93       	push	r26
    2e12:	bf 93       	push	r27
    2e14:	ef 93       	push	r30
    2e16:	ff 93       	push	r31
    2e18:	e0 91 17 22 	lds	r30, 0x2217
    2e1c:	f0 91 18 22 	lds	r31, 0x2218
    2e20:	30 97       	sbiw	r30, 0x00	; 0
    2e22:	29 f0       	breq	.+10     	; 0x2e2e <__vector_85+0x3c>
    2e24:	80 91 0d 23 	lds	r24, 0x230D
    2e28:	90 91 0e 23 	lds	r25, 0x230E
    2e2c:	19 95       	eicall
    2e2e:	ff 91       	pop	r31
    2e30:	ef 91       	pop	r30
    2e32:	bf 91       	pop	r27
    2e34:	af 91       	pop	r26
    2e36:	9f 91       	pop	r25
    2e38:	8f 91       	pop	r24
    2e3a:	7f 91       	pop	r23
    2e3c:	6f 91       	pop	r22
    2e3e:	5f 91       	pop	r21
    2e40:	4f 91       	pop	r20
    2e42:	3f 91       	pop	r19
    2e44:	2f 91       	pop	r18
    2e46:	0f 90       	pop	r0
    2e48:	0b be       	out	0x3b, r0	; 59
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	0f 90       	pop	r0
    2e50:	1f 90       	pop	r1
    2e52:	18 95       	reti

00002e54 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    2e54:	1f 92       	push	r1
    2e56:	0f 92       	push	r0
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	0f 92       	push	r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	0b b6       	in	r0, 0x3b	; 59
    2e60:	0f 92       	push	r0
    2e62:	2f 93       	push	r18
    2e64:	3f 93       	push	r19
    2e66:	4f 93       	push	r20
    2e68:	5f 93       	push	r21
    2e6a:	6f 93       	push	r22
    2e6c:	7f 93       	push	r23
    2e6e:	8f 93       	push	r24
    2e70:	9f 93       	push	r25
    2e72:	af 93       	push	r26
    2e74:	bf 93       	push	r27
    2e76:	ef 93       	push	r30
    2e78:	ff 93       	push	r31
    2e7a:	e0 91 19 22 	lds	r30, 0x2219
    2e7e:	f0 91 1a 22 	lds	r31, 0x221A
    2e82:	30 97       	sbiw	r30, 0x00	; 0
    2e84:	29 f0       	breq	.+10     	; 0x2e90 <__vector_86+0x3c>
    2e86:	80 91 0f 23 	lds	r24, 0x230F
    2e8a:	90 91 10 23 	lds	r25, 0x2310
    2e8e:	19 95       	eicall
    2e90:	ff 91       	pop	r31
    2e92:	ef 91       	pop	r30
    2e94:	bf 91       	pop	r27
    2e96:	af 91       	pop	r26
    2e98:	9f 91       	pop	r25
    2e9a:	8f 91       	pop	r24
    2e9c:	7f 91       	pop	r23
    2e9e:	6f 91       	pop	r22
    2ea0:	5f 91       	pop	r21
    2ea2:	4f 91       	pop	r20
    2ea4:	3f 91       	pop	r19
    2ea6:	2f 91       	pop	r18
    2ea8:	0f 90       	pop	r0
    2eaa:	0b be       	out	0x3b, r0	; 59
    2eac:	0f 90       	pop	r0
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	0f 90       	pop	r0
    2eb2:	1f 90       	pop	r1
    2eb4:	18 95       	reti

00002eb6 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    2eb6:	1f 92       	push	r1
    2eb8:	0f 92       	push	r0
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	0f 92       	push	r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	0b b6       	in	r0, 0x3b	; 59
    2ec2:	0f 92       	push	r0
    2ec4:	2f 93       	push	r18
    2ec6:	3f 93       	push	r19
    2ec8:	4f 93       	push	r20
    2eca:	5f 93       	push	r21
    2ecc:	6f 93       	push	r22
    2ece:	7f 93       	push	r23
    2ed0:	8f 93       	push	r24
    2ed2:	9f 93       	push	r25
    2ed4:	af 93       	push	r26
    2ed6:	bf 93       	push	r27
    2ed8:	ef 93       	push	r30
    2eda:	ff 93       	push	r31
    2edc:	e0 91 1b 22 	lds	r30, 0x221B
    2ee0:	f0 91 1c 22 	lds	r31, 0x221C
    2ee4:	30 97       	sbiw	r30, 0x00	; 0
    2ee6:	29 f0       	breq	.+10     	; 0x2ef2 <__vector_87+0x3c>
    2ee8:	80 91 11 23 	lds	r24, 0x2311
    2eec:	90 91 12 23 	lds	r25, 0x2312
    2ef0:	19 95       	eicall
    2ef2:	ff 91       	pop	r31
    2ef4:	ef 91       	pop	r30
    2ef6:	bf 91       	pop	r27
    2ef8:	af 91       	pop	r26
    2efa:	9f 91       	pop	r25
    2efc:	8f 91       	pop	r24
    2efe:	7f 91       	pop	r23
    2f00:	6f 91       	pop	r22
    2f02:	5f 91       	pop	r21
    2f04:	4f 91       	pop	r20
    2f06:	3f 91       	pop	r19
    2f08:	2f 91       	pop	r18
    2f0a:	0f 90       	pop	r0
    2f0c:	0b be       	out	0x3b, r0	; 59
    2f0e:	0f 90       	pop	r0
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	0f 90       	pop	r0
    2f14:	1f 90       	pop	r1
    2f16:	18 95       	reti

00002f18 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    2f18:	1f 92       	push	r1
    2f1a:	0f 92       	push	r0
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	0f 92       	push	r0
    2f20:	11 24       	eor	r1, r1
    2f22:	0b b6       	in	r0, 0x3b	; 59
    2f24:	0f 92       	push	r0
    2f26:	2f 93       	push	r18
    2f28:	3f 93       	push	r19
    2f2a:	4f 93       	push	r20
    2f2c:	5f 93       	push	r21
    2f2e:	6f 93       	push	r22
    2f30:	7f 93       	push	r23
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	af 93       	push	r26
    2f38:	bf 93       	push	r27
    2f3a:	ef 93       	push	r30
    2f3c:	ff 93       	push	r31
    2f3e:	e0 91 1d 22 	lds	r30, 0x221D
    2f42:	f0 91 1e 22 	lds	r31, 0x221E
    2f46:	30 97       	sbiw	r30, 0x00	; 0
    2f48:	29 f0       	breq	.+10     	; 0x2f54 <__vector_88+0x3c>
    2f4a:	80 91 13 23 	lds	r24, 0x2313
    2f4e:	90 91 14 23 	lds	r25, 0x2314
    2f52:	19 95       	eicall
    2f54:	ff 91       	pop	r31
    2f56:	ef 91       	pop	r30
    2f58:	bf 91       	pop	r27
    2f5a:	af 91       	pop	r26
    2f5c:	9f 91       	pop	r25
    2f5e:	8f 91       	pop	r24
    2f60:	7f 91       	pop	r23
    2f62:	6f 91       	pop	r22
    2f64:	5f 91       	pop	r21
    2f66:	4f 91       	pop	r20
    2f68:	3f 91       	pop	r19
    2f6a:	2f 91       	pop	r18
    2f6c:	0f 90       	pop	r0
    2f6e:	0b be       	out	0x3b, r0	; 59
    2f70:	0f 90       	pop	r0
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	0f 90       	pop	r0
    2f76:	1f 90       	pop	r1
    2f78:	18 95       	reti

00002f7a <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    2f7a:	1f 92       	push	r1
    2f7c:	0f 92       	push	r0
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	0f 92       	push	r0
    2f82:	11 24       	eor	r1, r1
    2f84:	0b b6       	in	r0, 0x3b	; 59
    2f86:	0f 92       	push	r0
    2f88:	2f 93       	push	r18
    2f8a:	3f 93       	push	r19
    2f8c:	4f 93       	push	r20
    2f8e:	5f 93       	push	r21
    2f90:	6f 93       	push	r22
    2f92:	7f 93       	push	r23
    2f94:	8f 93       	push	r24
    2f96:	9f 93       	push	r25
    2f98:	af 93       	push	r26
    2f9a:	bf 93       	push	r27
    2f9c:	ef 93       	push	r30
    2f9e:	ff 93       	push	r31
    2fa0:	e0 91 1f 22 	lds	r30, 0x221F
    2fa4:	f0 91 20 22 	lds	r31, 0x2220
    2fa8:	30 97       	sbiw	r30, 0x00	; 0
    2faa:	29 f0       	breq	.+10     	; 0x2fb6 <__vector_89+0x3c>
    2fac:	80 91 15 23 	lds	r24, 0x2315
    2fb0:	90 91 16 23 	lds	r25, 0x2316
    2fb4:	19 95       	eicall
    2fb6:	ff 91       	pop	r31
    2fb8:	ef 91       	pop	r30
    2fba:	bf 91       	pop	r27
    2fbc:	af 91       	pop	r26
    2fbe:	9f 91       	pop	r25
    2fc0:	8f 91       	pop	r24
    2fc2:	7f 91       	pop	r23
    2fc4:	6f 91       	pop	r22
    2fc6:	5f 91       	pop	r21
    2fc8:	4f 91       	pop	r20
    2fca:	3f 91       	pop	r19
    2fcc:	2f 91       	pop	r18
    2fce:	0f 90       	pop	r0
    2fd0:	0b be       	out	0x3b, r0	; 59
    2fd2:	0f 90       	pop	r0
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	0f 90       	pop	r0
    2fd8:	1f 90       	pop	r1
    2fda:	18 95       	reti

00002fdc <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    2fdc:	1f 92       	push	r1
    2fde:	0f 92       	push	r0
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	0f 92       	push	r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	0b b6       	in	r0, 0x3b	; 59
    2fe8:	0f 92       	push	r0
    2fea:	2f 93       	push	r18
    2fec:	3f 93       	push	r19
    2fee:	4f 93       	push	r20
    2ff0:	5f 93       	push	r21
    2ff2:	6f 93       	push	r22
    2ff4:	7f 93       	push	r23
    2ff6:	8f 93       	push	r24
    2ff8:	9f 93       	push	r25
    2ffa:	af 93       	push	r26
    2ffc:	bf 93       	push	r27
    2ffe:	ef 93       	push	r30
    3000:	ff 93       	push	r31
    3002:	e0 91 21 22 	lds	r30, 0x2221
    3006:	f0 91 22 22 	lds	r31, 0x2222
    300a:	30 97       	sbiw	r30, 0x00	; 0
    300c:	29 f0       	breq	.+10     	; 0x3018 <__vector_90+0x3c>
    300e:	80 91 17 23 	lds	r24, 0x2317
    3012:	90 91 18 23 	lds	r25, 0x2318
    3016:	19 95       	eicall
    3018:	ff 91       	pop	r31
    301a:	ef 91       	pop	r30
    301c:	bf 91       	pop	r27
    301e:	af 91       	pop	r26
    3020:	9f 91       	pop	r25
    3022:	8f 91       	pop	r24
    3024:	7f 91       	pop	r23
    3026:	6f 91       	pop	r22
    3028:	5f 91       	pop	r21
    302a:	4f 91       	pop	r20
    302c:	3f 91       	pop	r19
    302e:	2f 91       	pop	r18
    3030:	0f 90       	pop	r0
    3032:	0b be       	out	0x3b, r0	; 59
    3034:	0f 90       	pop	r0
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	0f 90       	pop	r0
    303a:	1f 90       	pop	r1
    303c:	18 95       	reti

0000303e <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    303e:	1f 92       	push	r1
    3040:	0f 92       	push	r0
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	0f 92       	push	r0
    3046:	11 24       	eor	r1, r1
    3048:	0b b6       	in	r0, 0x3b	; 59
    304a:	0f 92       	push	r0
    304c:	2f 93       	push	r18
    304e:	3f 93       	push	r19
    3050:	4f 93       	push	r20
    3052:	5f 93       	push	r21
    3054:	6f 93       	push	r22
    3056:	7f 93       	push	r23
    3058:	8f 93       	push	r24
    305a:	9f 93       	push	r25
    305c:	af 93       	push	r26
    305e:	bf 93       	push	r27
    3060:	ef 93       	push	r30
    3062:	ff 93       	push	r31
    3064:	e0 91 23 22 	lds	r30, 0x2223
    3068:	f0 91 24 22 	lds	r31, 0x2224
    306c:	30 97       	sbiw	r30, 0x00	; 0
    306e:	29 f0       	breq	.+10     	; 0x307a <__vector_91+0x3c>
    3070:	80 91 19 23 	lds	r24, 0x2319
    3074:	90 91 1a 23 	lds	r25, 0x231A
    3078:	19 95       	eicall
    307a:	ff 91       	pop	r31
    307c:	ef 91       	pop	r30
    307e:	bf 91       	pop	r27
    3080:	af 91       	pop	r26
    3082:	9f 91       	pop	r25
    3084:	8f 91       	pop	r24
    3086:	7f 91       	pop	r23
    3088:	6f 91       	pop	r22
    308a:	5f 91       	pop	r21
    308c:	4f 91       	pop	r20
    308e:	3f 91       	pop	r19
    3090:	2f 91       	pop	r18
    3092:	0f 90       	pop	r0
    3094:	0b be       	out	0x3b, r0	; 59
    3096:	0f 90       	pop	r0
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	0f 90       	pop	r0
    309c:	1f 90       	pop	r1
    309e:	18 95       	reti

000030a0 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    30a0:	1f 92       	push	r1
    30a2:	0f 92       	push	r0
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	0f 92       	push	r0
    30a8:	11 24       	eor	r1, r1
    30aa:	0b b6       	in	r0, 0x3b	; 59
    30ac:	0f 92       	push	r0
    30ae:	2f 93       	push	r18
    30b0:	3f 93       	push	r19
    30b2:	4f 93       	push	r20
    30b4:	5f 93       	push	r21
    30b6:	6f 93       	push	r22
    30b8:	7f 93       	push	r23
    30ba:	8f 93       	push	r24
    30bc:	9f 93       	push	r25
    30be:	af 93       	push	r26
    30c0:	bf 93       	push	r27
    30c2:	ef 93       	push	r30
    30c4:	ff 93       	push	r31
    30c6:	e0 91 25 22 	lds	r30, 0x2225
    30ca:	f0 91 26 22 	lds	r31, 0x2226
    30ce:	30 97       	sbiw	r30, 0x00	; 0
    30d0:	29 f0       	breq	.+10     	; 0x30dc <__vector_92+0x3c>
    30d2:	80 91 1b 23 	lds	r24, 0x231B
    30d6:	90 91 1c 23 	lds	r25, 0x231C
    30da:	19 95       	eicall
    30dc:	ff 91       	pop	r31
    30de:	ef 91       	pop	r30
    30e0:	bf 91       	pop	r27
    30e2:	af 91       	pop	r26
    30e4:	9f 91       	pop	r25
    30e6:	8f 91       	pop	r24
    30e8:	7f 91       	pop	r23
    30ea:	6f 91       	pop	r22
    30ec:	5f 91       	pop	r21
    30ee:	4f 91       	pop	r20
    30f0:	3f 91       	pop	r19
    30f2:	2f 91       	pop	r18
    30f4:	0f 90       	pop	r0
    30f6:	0b be       	out	0x3b, r0	; 59
    30f8:	0f 90       	pop	r0
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	0f 90       	pop	r0
    30fe:	1f 90       	pop	r1
    3100:	18 95       	reti

00003102 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3102:	1f 92       	push	r1
    3104:	0f 92       	push	r0
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	0f 92       	push	r0
    310a:	11 24       	eor	r1, r1
    310c:	0b b6       	in	r0, 0x3b	; 59
    310e:	0f 92       	push	r0
    3110:	2f 93       	push	r18
    3112:	3f 93       	push	r19
    3114:	4f 93       	push	r20
    3116:	5f 93       	push	r21
    3118:	6f 93       	push	r22
    311a:	7f 93       	push	r23
    311c:	8f 93       	push	r24
    311e:	9f 93       	push	r25
    3120:	af 93       	push	r26
    3122:	bf 93       	push	r27
    3124:	ef 93       	push	r30
    3126:	ff 93       	push	r31
    3128:	e0 91 27 22 	lds	r30, 0x2227
    312c:	f0 91 28 22 	lds	r31, 0x2228
    3130:	30 97       	sbiw	r30, 0x00	; 0
    3132:	29 f0       	breq	.+10     	; 0x313e <__vector_93+0x3c>
    3134:	80 91 1d 23 	lds	r24, 0x231D
    3138:	90 91 1e 23 	lds	r25, 0x231E
    313c:	19 95       	eicall
    313e:	ff 91       	pop	r31
    3140:	ef 91       	pop	r30
    3142:	bf 91       	pop	r27
    3144:	af 91       	pop	r26
    3146:	9f 91       	pop	r25
    3148:	8f 91       	pop	r24
    314a:	7f 91       	pop	r23
    314c:	6f 91       	pop	r22
    314e:	5f 91       	pop	r21
    3150:	4f 91       	pop	r20
    3152:	3f 91       	pop	r19
    3154:	2f 91       	pop	r18
    3156:	0f 90       	pop	r0
    3158:	0b be       	out	0x3b, r0	; 59
    315a:	0f 90       	pop	r0
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	0f 90       	pop	r0
    3160:	1f 90       	pop	r1
    3162:	18 95       	reti

00003164 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3164:	1f 92       	push	r1
    3166:	0f 92       	push	r0
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	0f 92       	push	r0
    316c:	11 24       	eor	r1, r1
    316e:	0b b6       	in	r0, 0x3b	; 59
    3170:	0f 92       	push	r0
    3172:	2f 93       	push	r18
    3174:	3f 93       	push	r19
    3176:	4f 93       	push	r20
    3178:	5f 93       	push	r21
    317a:	6f 93       	push	r22
    317c:	7f 93       	push	r23
    317e:	8f 93       	push	r24
    3180:	9f 93       	push	r25
    3182:	af 93       	push	r26
    3184:	bf 93       	push	r27
    3186:	ef 93       	push	r30
    3188:	ff 93       	push	r31
    318a:	e0 91 3d 22 	lds	r30, 0x223D
    318e:	f0 91 3e 22 	lds	r31, 0x223E
    3192:	30 97       	sbiw	r30, 0x00	; 0
    3194:	29 f0       	breq	.+10     	; 0x31a0 <__vector_104+0x3c>
    3196:	80 91 33 23 	lds	r24, 0x2333
    319a:	90 91 34 23 	lds	r25, 0x2334
    319e:	19 95       	eicall
    31a0:	ff 91       	pop	r31
    31a2:	ef 91       	pop	r30
    31a4:	bf 91       	pop	r27
    31a6:	af 91       	pop	r26
    31a8:	9f 91       	pop	r25
    31aa:	8f 91       	pop	r24
    31ac:	7f 91       	pop	r23
    31ae:	6f 91       	pop	r22
    31b0:	5f 91       	pop	r21
    31b2:	4f 91       	pop	r20
    31b4:	3f 91       	pop	r19
    31b6:	2f 91       	pop	r18
    31b8:	0f 90       	pop	r0
    31ba:	0b be       	out	0x3b, r0	; 59
    31bc:	0f 90       	pop	r0
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	0f 90       	pop	r0
    31c2:	1f 90       	pop	r1
    31c4:	18 95       	reti

000031c6 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    31c6:	1f 92       	push	r1
    31c8:	0f 92       	push	r0
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	0f 92       	push	r0
    31ce:	11 24       	eor	r1, r1
    31d0:	0b b6       	in	r0, 0x3b	; 59
    31d2:	0f 92       	push	r0
    31d4:	2f 93       	push	r18
    31d6:	3f 93       	push	r19
    31d8:	4f 93       	push	r20
    31da:	5f 93       	push	r21
    31dc:	6f 93       	push	r22
    31de:	7f 93       	push	r23
    31e0:	8f 93       	push	r24
    31e2:	9f 93       	push	r25
    31e4:	af 93       	push	r26
    31e6:	bf 93       	push	r27
    31e8:	ef 93       	push	r30
    31ea:	ff 93       	push	r31
    31ec:	e0 91 3f 22 	lds	r30, 0x223F
    31f0:	f0 91 40 22 	lds	r31, 0x2240
    31f4:	30 97       	sbiw	r30, 0x00	; 0
    31f6:	29 f0       	breq	.+10     	; 0x3202 <__vector_105+0x3c>
    31f8:	80 91 35 23 	lds	r24, 0x2335
    31fc:	90 91 36 23 	lds	r25, 0x2336
    3200:	19 95       	eicall
    3202:	ff 91       	pop	r31
    3204:	ef 91       	pop	r30
    3206:	bf 91       	pop	r27
    3208:	af 91       	pop	r26
    320a:	9f 91       	pop	r25
    320c:	8f 91       	pop	r24
    320e:	7f 91       	pop	r23
    3210:	6f 91       	pop	r22
    3212:	5f 91       	pop	r21
    3214:	4f 91       	pop	r20
    3216:	3f 91       	pop	r19
    3218:	2f 91       	pop	r18
    321a:	0f 90       	pop	r0
    321c:	0b be       	out	0x3b, r0	; 59
    321e:	0f 90       	pop	r0
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	0f 90       	pop	r0
    3224:	1f 90       	pop	r1
    3226:	18 95       	reti

00003228 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3228:	1f 92       	push	r1
    322a:	0f 92       	push	r0
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	0f 92       	push	r0
    3230:	11 24       	eor	r1, r1
    3232:	0b b6       	in	r0, 0x3b	; 59
    3234:	0f 92       	push	r0
    3236:	2f 93       	push	r18
    3238:	3f 93       	push	r19
    323a:	4f 93       	push	r20
    323c:	5f 93       	push	r21
    323e:	6f 93       	push	r22
    3240:	7f 93       	push	r23
    3242:	8f 93       	push	r24
    3244:	9f 93       	push	r25
    3246:	af 93       	push	r26
    3248:	bf 93       	push	r27
    324a:	ef 93       	push	r30
    324c:	ff 93       	push	r31
    324e:	e0 91 45 22 	lds	r30, 0x2245
    3252:	f0 91 46 22 	lds	r31, 0x2246
    3256:	30 97       	sbiw	r30, 0x00	; 0
    3258:	29 f0       	breq	.+10     	; 0x3264 <__vector_108+0x3c>
    325a:	80 91 3b 23 	lds	r24, 0x233B
    325e:	90 91 3c 23 	lds	r25, 0x233C
    3262:	19 95       	eicall
    3264:	ff 91       	pop	r31
    3266:	ef 91       	pop	r30
    3268:	bf 91       	pop	r27
    326a:	af 91       	pop	r26
    326c:	9f 91       	pop	r25
    326e:	8f 91       	pop	r24
    3270:	7f 91       	pop	r23
    3272:	6f 91       	pop	r22
    3274:	5f 91       	pop	r21
    3276:	4f 91       	pop	r20
    3278:	3f 91       	pop	r19
    327a:	2f 91       	pop	r18
    327c:	0f 90       	pop	r0
    327e:	0b be       	out	0x3b, r0	; 59
    3280:	0f 90       	pop	r0
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	0f 90       	pop	r0
    3286:	1f 90       	pop	r1
    3288:	18 95       	reti

0000328a <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    328a:	1f 92       	push	r1
    328c:	0f 92       	push	r0
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	0f 92       	push	r0
    3292:	11 24       	eor	r1, r1
    3294:	0b b6       	in	r0, 0x3b	; 59
    3296:	0f 92       	push	r0
    3298:	2f 93       	push	r18
    329a:	3f 93       	push	r19
    329c:	4f 93       	push	r20
    329e:	5f 93       	push	r21
    32a0:	6f 93       	push	r22
    32a2:	7f 93       	push	r23
    32a4:	8f 93       	push	r24
    32a6:	9f 93       	push	r25
    32a8:	af 93       	push	r26
    32aa:	bf 93       	push	r27
    32ac:	ef 93       	push	r30
    32ae:	ff 93       	push	r31
    32b0:	e0 91 47 22 	lds	r30, 0x2247
    32b4:	f0 91 48 22 	lds	r31, 0x2248
    32b8:	30 97       	sbiw	r30, 0x00	; 0
    32ba:	29 f0       	breq	.+10     	; 0x32c6 <__vector_109+0x3c>
    32bc:	80 91 3d 23 	lds	r24, 0x233D
    32c0:	90 91 3e 23 	lds	r25, 0x233E
    32c4:	19 95       	eicall
    32c6:	ff 91       	pop	r31
    32c8:	ef 91       	pop	r30
    32ca:	bf 91       	pop	r27
    32cc:	af 91       	pop	r26
    32ce:	9f 91       	pop	r25
    32d0:	8f 91       	pop	r24
    32d2:	7f 91       	pop	r23
    32d4:	6f 91       	pop	r22
    32d6:	5f 91       	pop	r21
    32d8:	4f 91       	pop	r20
    32da:	3f 91       	pop	r19
    32dc:	2f 91       	pop	r18
    32de:	0f 90       	pop	r0
    32e0:	0b be       	out	0x3b, r0	; 59
    32e2:	0f 90       	pop	r0
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	0f 90       	pop	r0
    32e8:	1f 90       	pop	r1
    32ea:	18 95       	reti

000032ec <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    32ec:	1f 92       	push	r1
    32ee:	0f 92       	push	r0
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	0f 92       	push	r0
    32f4:	11 24       	eor	r1, r1
    32f6:	0b b6       	in	r0, 0x3b	; 59
    32f8:	0f 92       	push	r0
    32fa:	2f 93       	push	r18
    32fc:	3f 93       	push	r19
    32fe:	4f 93       	push	r20
    3300:	5f 93       	push	r21
    3302:	6f 93       	push	r22
    3304:	7f 93       	push	r23
    3306:	8f 93       	push	r24
    3308:	9f 93       	push	r25
    330a:	af 93       	push	r26
    330c:	bf 93       	push	r27
    330e:	ef 93       	push	r30
    3310:	ff 93       	push	r31
    3312:	e0 91 49 22 	lds	r30, 0x2249
    3316:	f0 91 4a 22 	lds	r31, 0x224A
    331a:	30 97       	sbiw	r30, 0x00	; 0
    331c:	29 f0       	breq	.+10     	; 0x3328 <__vector_110+0x3c>
    331e:	80 91 3f 23 	lds	r24, 0x233F
    3322:	90 91 40 23 	lds	r25, 0x2340
    3326:	19 95       	eicall
    3328:	ff 91       	pop	r31
    332a:	ef 91       	pop	r30
    332c:	bf 91       	pop	r27
    332e:	af 91       	pop	r26
    3330:	9f 91       	pop	r25
    3332:	8f 91       	pop	r24
    3334:	7f 91       	pop	r23
    3336:	6f 91       	pop	r22
    3338:	5f 91       	pop	r21
    333a:	4f 91       	pop	r20
    333c:	3f 91       	pop	r19
    333e:	2f 91       	pop	r18
    3340:	0f 90       	pop	r0
    3342:	0b be       	out	0x3b, r0	; 59
    3344:	0f 90       	pop	r0
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	0f 90       	pop	r0
    334a:	1f 90       	pop	r1
    334c:	18 95       	reti

0000334e <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    334e:	1f 92       	push	r1
    3350:	0f 92       	push	r0
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	0f 92       	push	r0
    3356:	11 24       	eor	r1, r1
    3358:	0b b6       	in	r0, 0x3b	; 59
    335a:	0f 92       	push	r0
    335c:	2f 93       	push	r18
    335e:	3f 93       	push	r19
    3360:	4f 93       	push	r20
    3362:	5f 93       	push	r21
    3364:	6f 93       	push	r22
    3366:	7f 93       	push	r23
    3368:	8f 93       	push	r24
    336a:	9f 93       	push	r25
    336c:	af 93       	push	r26
    336e:	bf 93       	push	r27
    3370:	ef 93       	push	r30
    3372:	ff 93       	push	r31
    3374:	e0 91 4b 22 	lds	r30, 0x224B
    3378:	f0 91 4c 22 	lds	r31, 0x224C
    337c:	30 97       	sbiw	r30, 0x00	; 0
    337e:	29 f0       	breq	.+10     	; 0x338a <__vector_111+0x3c>
    3380:	80 91 41 23 	lds	r24, 0x2341
    3384:	90 91 42 23 	lds	r25, 0x2342
    3388:	19 95       	eicall
    338a:	ff 91       	pop	r31
    338c:	ef 91       	pop	r30
    338e:	bf 91       	pop	r27
    3390:	af 91       	pop	r26
    3392:	9f 91       	pop	r25
    3394:	8f 91       	pop	r24
    3396:	7f 91       	pop	r23
    3398:	6f 91       	pop	r22
    339a:	5f 91       	pop	r21
    339c:	4f 91       	pop	r20
    339e:	3f 91       	pop	r19
    33a0:	2f 91       	pop	r18
    33a2:	0f 90       	pop	r0
    33a4:	0b be       	out	0x3b, r0	; 59
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0f 90       	pop	r0
    33ac:	1f 90       	pop	r1
    33ae:	18 95       	reti

000033b0 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    33b0:	1f 92       	push	r1
    33b2:	0f 92       	push	r0
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	0f 92       	push	r0
    33b8:	11 24       	eor	r1, r1
    33ba:	0b b6       	in	r0, 0x3b	; 59
    33bc:	0f 92       	push	r0
    33be:	2f 93       	push	r18
    33c0:	3f 93       	push	r19
    33c2:	4f 93       	push	r20
    33c4:	5f 93       	push	r21
    33c6:	6f 93       	push	r22
    33c8:	7f 93       	push	r23
    33ca:	8f 93       	push	r24
    33cc:	9f 93       	push	r25
    33ce:	af 93       	push	r26
    33d0:	bf 93       	push	r27
    33d2:	ef 93       	push	r30
    33d4:	ff 93       	push	r31
    33d6:	e0 91 4d 22 	lds	r30, 0x224D
    33da:	f0 91 4e 22 	lds	r31, 0x224E
    33de:	30 97       	sbiw	r30, 0x00	; 0
    33e0:	29 f0       	breq	.+10     	; 0x33ec <__vector_112+0x3c>
    33e2:	80 91 43 23 	lds	r24, 0x2343
    33e6:	90 91 44 23 	lds	r25, 0x2344
    33ea:	19 95       	eicall
    33ec:	ff 91       	pop	r31
    33ee:	ef 91       	pop	r30
    33f0:	bf 91       	pop	r27
    33f2:	af 91       	pop	r26
    33f4:	9f 91       	pop	r25
    33f6:	8f 91       	pop	r24
    33f8:	7f 91       	pop	r23
    33fa:	6f 91       	pop	r22
    33fc:	5f 91       	pop	r21
    33fe:	4f 91       	pop	r20
    3400:	3f 91       	pop	r19
    3402:	2f 91       	pop	r18
    3404:	0f 90       	pop	r0
    3406:	0b be       	out	0x3b, r0	; 59
    3408:	0f 90       	pop	r0
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	0f 90       	pop	r0
    340e:	1f 90       	pop	r1
    3410:	18 95       	reti

00003412 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3412:	1f 92       	push	r1
    3414:	0f 92       	push	r0
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	0f 92       	push	r0
    341a:	11 24       	eor	r1, r1
    341c:	0b b6       	in	r0, 0x3b	; 59
    341e:	0f 92       	push	r0
    3420:	2f 93       	push	r18
    3422:	3f 93       	push	r19
    3424:	4f 93       	push	r20
    3426:	5f 93       	push	r21
    3428:	6f 93       	push	r22
    342a:	7f 93       	push	r23
    342c:	8f 93       	push	r24
    342e:	9f 93       	push	r25
    3430:	af 93       	push	r26
    3432:	bf 93       	push	r27
    3434:	ef 93       	push	r30
    3436:	ff 93       	push	r31
    3438:	e0 91 4f 22 	lds	r30, 0x224F
    343c:	f0 91 50 22 	lds	r31, 0x2250
    3440:	30 97       	sbiw	r30, 0x00	; 0
    3442:	29 f0       	breq	.+10     	; 0x344e <__vector_113+0x3c>
    3444:	80 91 45 23 	lds	r24, 0x2345
    3448:	90 91 46 23 	lds	r25, 0x2346
    344c:	19 95       	eicall
    344e:	ff 91       	pop	r31
    3450:	ef 91       	pop	r30
    3452:	bf 91       	pop	r27
    3454:	af 91       	pop	r26
    3456:	9f 91       	pop	r25
    3458:	8f 91       	pop	r24
    345a:	7f 91       	pop	r23
    345c:	6f 91       	pop	r22
    345e:	5f 91       	pop	r21
    3460:	4f 91       	pop	r20
    3462:	3f 91       	pop	r19
    3464:	2f 91       	pop	r18
    3466:	0f 90       	pop	r0
    3468:	0b be       	out	0x3b, r0	; 59
    346a:	0f 90       	pop	r0
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	0f 90       	pop	r0
    3470:	1f 90       	pop	r1
    3472:	18 95       	reti

00003474 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3474:	1f 92       	push	r1
    3476:	0f 92       	push	r0
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	0f 92       	push	r0
    347c:	11 24       	eor	r1, r1
    347e:	0b b6       	in	r0, 0x3b	; 59
    3480:	0f 92       	push	r0
    3482:	2f 93       	push	r18
    3484:	3f 93       	push	r19
    3486:	4f 93       	push	r20
    3488:	5f 93       	push	r21
    348a:	6f 93       	push	r22
    348c:	7f 93       	push	r23
    348e:	8f 93       	push	r24
    3490:	9f 93       	push	r25
    3492:	af 93       	push	r26
    3494:	bf 93       	push	r27
    3496:	ef 93       	push	r30
    3498:	ff 93       	push	r31
    349a:	e0 91 5b 22 	lds	r30, 0x225B
    349e:	f0 91 5c 22 	lds	r31, 0x225C
    34a2:	30 97       	sbiw	r30, 0x00	; 0
    34a4:	29 f0       	breq	.+10     	; 0x34b0 <__vector_119+0x3c>
    34a6:	80 91 51 23 	lds	r24, 0x2351
    34aa:	90 91 52 23 	lds	r25, 0x2352
    34ae:	19 95       	eicall
    34b0:	ff 91       	pop	r31
    34b2:	ef 91       	pop	r30
    34b4:	bf 91       	pop	r27
    34b6:	af 91       	pop	r26
    34b8:	9f 91       	pop	r25
    34ba:	8f 91       	pop	r24
    34bc:	7f 91       	pop	r23
    34be:	6f 91       	pop	r22
    34c0:	5f 91       	pop	r21
    34c2:	4f 91       	pop	r20
    34c4:	3f 91       	pop	r19
    34c6:	2f 91       	pop	r18
    34c8:	0f 90       	pop	r0
    34ca:	0b be       	out	0x3b, r0	; 59
    34cc:	0f 90       	pop	r0
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	0f 90       	pop	r0
    34d2:	1f 90       	pop	r1
    34d4:	18 95       	reti

000034d6 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    34d6:	1f 92       	push	r1
    34d8:	0f 92       	push	r0
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	0f 92       	push	r0
    34de:	11 24       	eor	r1, r1
    34e0:	0b b6       	in	r0, 0x3b	; 59
    34e2:	0f 92       	push	r0
    34e4:	2f 93       	push	r18
    34e6:	3f 93       	push	r19
    34e8:	4f 93       	push	r20
    34ea:	5f 93       	push	r21
    34ec:	6f 93       	push	r22
    34ee:	7f 93       	push	r23
    34f0:	8f 93       	push	r24
    34f2:	9f 93       	push	r25
    34f4:	af 93       	push	r26
    34f6:	bf 93       	push	r27
    34f8:	ef 93       	push	r30
    34fa:	ff 93       	push	r31
    34fc:	e0 91 5d 22 	lds	r30, 0x225D
    3500:	f0 91 5e 22 	lds	r31, 0x225E
    3504:	30 97       	sbiw	r30, 0x00	; 0
    3506:	29 f0       	breq	.+10     	; 0x3512 <__vector_120+0x3c>
    3508:	80 91 53 23 	lds	r24, 0x2353
    350c:	90 91 54 23 	lds	r25, 0x2354
    3510:	19 95       	eicall
    3512:	ff 91       	pop	r31
    3514:	ef 91       	pop	r30
    3516:	bf 91       	pop	r27
    3518:	af 91       	pop	r26
    351a:	9f 91       	pop	r25
    351c:	8f 91       	pop	r24
    351e:	7f 91       	pop	r23
    3520:	6f 91       	pop	r22
    3522:	5f 91       	pop	r21
    3524:	4f 91       	pop	r20
    3526:	3f 91       	pop	r19
    3528:	2f 91       	pop	r18
    352a:	0f 90       	pop	r0
    352c:	0b be       	out	0x3b, r0	; 59
    352e:	0f 90       	pop	r0
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	0f 90       	pop	r0
    3534:	1f 90       	pop	r1
    3536:	18 95       	reti

00003538 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3538:	1f 92       	push	r1
    353a:	0f 92       	push	r0
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	0f 92       	push	r0
    3540:	11 24       	eor	r1, r1
    3542:	0b b6       	in	r0, 0x3b	; 59
    3544:	0f 92       	push	r0
    3546:	2f 93       	push	r18
    3548:	3f 93       	push	r19
    354a:	4f 93       	push	r20
    354c:	5f 93       	push	r21
    354e:	6f 93       	push	r22
    3550:	7f 93       	push	r23
    3552:	8f 93       	push	r24
    3554:	9f 93       	push	r25
    3556:	af 93       	push	r26
    3558:	bf 93       	push	r27
    355a:	ef 93       	push	r30
    355c:	ff 93       	push	r31
    355e:	e0 91 5f 22 	lds	r30, 0x225F
    3562:	f0 91 60 22 	lds	r31, 0x2260
    3566:	30 97       	sbiw	r30, 0x00	; 0
    3568:	29 f0       	breq	.+10     	; 0x3574 <__vector_121+0x3c>
    356a:	80 91 55 23 	lds	r24, 0x2355
    356e:	90 91 56 23 	lds	r25, 0x2356
    3572:	19 95       	eicall
    3574:	ff 91       	pop	r31
    3576:	ef 91       	pop	r30
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	0f 90       	pop	r0
    358e:	0b be       	out	0x3b, r0	; 59
    3590:	0f 90       	pop	r0
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	0f 90       	pop	r0
    3596:	1f 90       	pop	r1
    3598:	18 95       	reti

0000359a <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    359a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    359e:	fd cf       	rjmp	.-6      	; 0x359a <__cxa_pure_virtual>

000035a0 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    35a0:	86 ea       	ldi	r24, 0xA6	; 166
    35a2:	93 e2       	ldi	r25, 0x23	; 35
    35a4:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN4CSPIC1Ev>
CTimerD timeout;
    35a8:	83 ea       	ldi	r24, 0xA3	; 163
    35aa:	93 e2       	ldi	r25, 0x23	; 35
    35ac:	0e 94 51 23 	call	0x46a2	; 0x46a2 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    35b0:	81 ea       	ldi	r24, 0xA1	; 161
    35b2:	93 e2       	ldi	r25, 0x23	; 35
    35b4:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    35b8:	84 e8       	ldi	r24, 0x84	; 132
    35ba:	93 e2       	ldi	r25, 0x23	; 35
    35bc:	0e 94 be 1c 	call	0x397c	; 0x397c <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    35c0:	8a e7       	ldi	r24, 0x7A	; 122
    35c2:	93 e2       	ldi	r25, 0x23	; 35
    35c4:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    35c8:	89 e7       	ldi	r24, 0x79	; 121
    35ca:	93 e2       	ldi	r25, 0x23	; 35
    35cc:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    35d0:	8b e5       	ldi	r24, 0x5B	; 91
    35d2:	93 e2       	ldi	r25, 0x23	; 35
    35d4:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN16CLaserControlAppC1Ev>
    35d8:	08 95       	ret

000035da <_GLOBAL__sub_D_dacSPI>:
    35da:	8b e5       	ldi	r24, 0x5B	; 91
    35dc:	93 e2       	ldi	r25, 0x23	; 35
    35de:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN16CLaserControlAppD1Ev>
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    35e2:	89 e7       	ldi	r24, 0x79	; 121
    35e4:	93 e2       	ldi	r25, 0x23	; 35
    35e6:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <_ZN12CSoundPlayerD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    35ea:	8a e7       	ldi	r24, 0x7A	; 122
    35ec:	93 e2       	ldi	r25, 0x23	; 35
    35ee:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <_ZN11CLaserBoardD1Ev>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
CMBSender sender;
    35f2:	84 e8       	ldi	r24, 0x84	; 132
    35f4:	93 e2       	ldi	r25, 0x23	; 35
    35f6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <_ZN9CMBSenderD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CDGUSUSART usart;
    35fa:	81 ea       	ldi	r24, 0xA1	; 161
    35fc:	93 e2       	ldi	r25, 0x23	; 35
    35fe:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_ZN10CDGUSUSARTD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
    3602:	83 ea       	ldi	r24, 0xA3	; 163
    3604:	93 e2       	ldi	r25, 0x23	; 35
    3606:	0e 94 5d 23 	call	0x46ba	; 0x46ba <_ZN7CTimerDD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    360a:	86 ea       	ldi	r24, 0xA6	; 166
    360c:	93 e2       	ldi	r25, 0x23	; 35
    360e:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN4CSPID1Ev>
    3612:	08 95       	ret

00003614 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3614:	cf 92       	push	r12
    3616:	df 92       	push	r13
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3620:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3622:	8a e7       	ldi	r24, 0x7A	; 122
    3624:	93 e2       	ldi	r25, 0x23	; 35
    3626:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN11CLaserBoard12InitializeIOEv>
	// TimerE0, TimerE1
	player.Initialize();
    362a:	89 e7       	ldi	r24, 0x79	; 121
    362c:	93 e2       	ldi	r25, 0x23	; 35
    362e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <_ZN12CSoundPlayer10InitializeEv>
	// TimerD0
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    3632:	47 e0       	ldi	r20, 0x07	; 7
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	83 ea       	ldi	r24, 0xA3	; 163
    3638:	93 e2       	ldi	r25, 0x23	; 35
    363a:	0e 94 8e 22 	call	0x451c	; 0x451c <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    363e:	62 e1       	ldi	r22, 0x12	; 18
    3640:	7a e7       	ldi	r23, 0x7A	; 122
    3642:	83 ea       	ldi	r24, 0xA3	; 163
    3644:	93 e2       	ldi	r25, 0x23	; 35
    3646:	0e 94 cc 22 	call	0x4598	; 0x4598 <_ZN7CTimerD9SetPeriodEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    364a:	0f 2e       	mov	r0, r31
    364c:	f3 e0       	ldi	r31, 0x03	; 3
    364e:	ef 2e       	mov	r14, r31
    3650:	f0 2d       	mov	r31, r0
    3652:	00 e0       	ldi	r16, 0x00	; 0
    3654:	23 e0       	ldi	r18, 0x03	; 3
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	86 ea       	ldi	r24, 0xA6	; 166
    365c:	93 e2       	ldi	r25, 0x23	; 35
    365e:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3662:	01 e0       	ldi	r16, 0x01	; 1
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	6d e0       	ldi	r22, 0x0D	; 13
    366a:	81 ea       	ldi	r24, 0xA1	; 161
    366c:	93 e2       	ldi	r25, 0x23	; 35
    366e:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    3672:	0f 2e       	mov	r0, r31
    3674:	f2 e1       	ldi	r31, 0x12	; 18
    3676:	cf 2e       	mov	r12, r31
    3678:	fa e7       	ldi	r31, 0x7A	; 122
    367a:	df 2e       	mov	r13, r31
    367c:	f0 2d       	mov	r31, r0
    367e:	e1 2c       	mov	r14, r1
    3680:	ff 24       	eor	r15, r15
    3682:	f3 94       	inc	r15
    3684:	00 e0       	ldi	r16, 0x00	; 0
    3686:	11 e0       	ldi	r17, 0x01	; 1
    3688:	2b e5       	ldi	r18, 0x5B	; 91
    368a:	33 e2       	ldi	r19, 0x23	; 35
    368c:	41 ea       	ldi	r20, 0xA1	; 161
    368e:	53 e2       	ldi	r21, 0x23	; 35
    3690:	63 ea       	ldi	r22, 0xA3	; 163
    3692:	73 e2       	ldi	r23, 0x23	; 35
    3694:	84 e8       	ldi	r24, 0x84	; 132
    3696:	93 e2       	ldi	r25, 0x23	; 35
    3698:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    369c:	64 e8       	ldi	r22, 0x84	; 132
    369e:	73 e2       	ldi	r23, 0x23	; 35
    36a0:	8b e5       	ldi	r24, 0x5B	; 91
    36a2:	93 e2       	ldi	r25, 0x23	; 35
    36a4:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    36a8:	8a e7       	ldi	r24, 0x7A	; 122
    36aa:	93 e2       	ldi	r25, 0x23	; 35
    36ac:	0e 94 14 20 	call	0x4028	; 0x4028 <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    36b0:	78 94       	sei
}
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	df 90       	pop	r13
    36bc:	cf 90       	pop	r12
    36be:	08 95       	ret

000036c0 <main>:
	 
int main(void)
{	
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	1f 92       	push	r1
    36c6:	1f 92       	push	r1
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
	// Initialization system
	SystemInitialize();
    36cc:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    36d0:	89 e7       	ldi	r24, 0x79	; 121
    36d2:	93 e2       	ldi	r25, 0x23	; 35
    36d4:	0e 94 68 21 	call	0x42d0	; 0x42d0 <_ZN12CSoundPlayer4PlayEv>
	//_delay_ms(1000);
	laserBoard.Relay1On();
    36d8:	8a e7       	ldi	r24, 0x7A	; 122
    36da:	93 e2       	ldi	r25, 0x23	; 35
    36dc:	0e 94 49 20 	call	0x4092	; 0x4092 <_ZN11CLaserBoard8Relay1OnEv>
    36e0:	2f ef       	ldi	r18, 0xFF	; 255
    36e2:	83 ec       	ldi	r24, 0xC3	; 195
    36e4:	99 e0       	ldi	r25, 0x09	; 9
    36e6:	21 50       	subi	r18, 0x01	; 1
    36e8:	80 40       	sbci	r24, 0x00	; 0
    36ea:	90 40       	sbci	r25, 0x00	; 0
    36ec:	e1 f7       	brne	.-8      	; 0x36e6 <main+0x26>
    36ee:	00 c0       	rjmp	.+0      	; 0x36f0 <main+0x30>
    36f0:	00 00       	nop
	_delay_ms(100);
	laserBoard.Relay1Off();
    36f2:	8a e7       	ldi	r24, 0x7A	; 122
    36f4:	93 e2       	ldi	r25, 0x23	; 35
    36f6:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN11CLaserBoard9Relay1OffEv>
	
	uint16_t data = 0;
    36fa:	19 82       	std	Y+1, r1	; 0x01
    36fc:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    36fe:	42 e0       	ldi	r20, 0x02	; 2
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	be 01       	movw	r22, r28
    3704:	6f 5f       	subi	r22, 0xFF	; 255
    3706:	7f 4f       	sbci	r23, 0xFF	; 255
    3708:	86 ea       	ldi	r24, 0xA6	; 166
    370a:	93 e2       	ldi	r25, 0x23	; 35
    370c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    3710:	8b e5       	ldi	r24, 0x5B	; 91
    3712:	93 e2       	ldi	r25, 0x23	; 35
    3714:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN16CLaserControlApp5StartEv>
		
		laserBoard.PortCheck();
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3718:	18 ec       	ldi	r17, 0xC8	; 200
    371a:	8f e3       	ldi	r24, 0x3F	; 63
    371c:	9f e1       	ldi	r25, 0x1F	; 31
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <main+0x5e>
    3722:	00 c0       	rjmp	.+0      	; 0x3724 <main+0x64>
    3724:	00 00       	nop
    while (1) 
    {
		// Loop delay
		_delay_ms(1);
		
		laserBoard.PortCheck();
    3726:	8a e7       	ldi	r24, 0x7A	; 122
    3728:	93 e2       	ldi	r25, 0x23	; 35
    372a:	0e 94 a3 20 	call	0x4146	; 0x4146 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    372e:	40 91 59 23 	lds	r20, 0x2359
    3732:	50 91 5a 23 	lds	r21, 0x235A
    3736:	ca 01       	movw	r24, r20
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	80 93 59 23 	sts	0x2359, r24
    373e:	90 93 5a 23 	sts	0x235A, r25
    3742:	9a 01       	movw	r18, r20
    3744:	36 95       	lsr	r19
    3746:	27 95       	ror	r18
    3748:	36 95       	lsr	r19
    374a:	27 95       	ror	r18
    374c:	36 95       	lsr	r19
    374e:	27 95       	ror	r18
    3750:	ab e7       	ldi	r26, 0x7B	; 123
    3752:	b4 e1       	ldi	r27, 0x14	; 20
    3754:	0e 94 87 24 	call	0x490e	; 0x490e <__umulhisi3>
    3758:	96 95       	lsr	r25
    375a:	87 95       	ror	r24
    375c:	18 9f       	mul	r17, r24
    375e:	90 01       	movw	r18, r0
    3760:	19 9f       	mul	r17, r25
    3762:	30 0d       	add	r19, r0
    3764:	11 24       	eor	r1, r1
    3766:	42 17       	cp	r20, r18
    3768:	53 07       	cpc	r21, r19
    376a:	b9 f6       	brne	.-82     	; 0x371a <main+0x5a>
			App.Run();
    376c:	8b e5       	ldi	r24, 0x5B	; 91
    376e:	93 e2       	ldi	r25, 0x23	; 35
    3770:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN16CLaserControlApp3RunEv>
    3774:	d2 cf       	rjmp	.-92     	; 0x371a <main+0x5a>

00003776 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    377c:	ec 81       	ldd	r30, Y+4	; 0x04
    377e:	fd 81       	ldd	r31, Y+5	; 0x05
    3780:	8a ea       	ldi	r24, 0xAA	; 170
    3782:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3784:	ec 81       	ldd	r30, Y+4	; 0x04
    3786:	fd 81       	ldd	r31, Y+5	; 0x05
    3788:	8c ec       	ldi	r24, 0xCC	; 204
    378a:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    378c:	ec 81       	ldd	r30, Y+4	; 0x04
    378e:	fd 81       	ldd	r31, Y+5	; 0x05
    3790:	82 e0       	ldi	r24, 0x02	; 2
    3792:	82 0f       	add	r24, r18
    3794:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    3796:	ec 81       	ldd	r30, Y+4	; 0x04
    3798:	fd 81       	ldd	r31, Y+5	; 0x05
    379a:	80 e8       	ldi	r24, 0x80	; 128
    379c:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    379e:	ec 81       	ldd	r30, Y+4	; 0x04
    37a0:	fd 81       	ldd	r31, Y+5	; 0x05
    37a2:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    37a4:	85 e0       	ldi	r24, 0x05	; 5
    37a6:	82 0f       	add	r24, r18
    37a8:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	21 15       	cp	r18, r1
    37ae:	31 05       	cpc	r19, r1
    37b0:	81 f0       	breq	.+32     	; 0x37d2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    37b2:	da 01       	movw	r26, r20
    37b4:	42 0f       	add	r20, r18
    37b6:	53 1f       	adc	r21, r19
    37b8:	65 e0       	ldi	r22, 0x05	; 5
    37ba:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    37bc:	9d 91       	ld	r25, X+
    37be:	ec 81       	ldd	r30, Y+4	; 0x04
    37c0:	fd 81       	ldd	r31, Y+5	; 0x05
    37c2:	e6 0f       	add	r30, r22
    37c4:	f7 1f       	adc	r31, r23
    37c6:	90 83       	st	Z, r25
    37c8:	6f 5f       	subi	r22, 0xFF	; 255
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    37cc:	a4 17       	cp	r26, r20
    37ce:	b5 07       	cpc	r27, r21
    37d0:	a9 f7       	brne	.-22     	; 0x37bc <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	08 95       	ret

000037d8 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    37d8:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    37da:	a4 81       	ldd	r26, Z+4	; 0x04
    37dc:	b5 81       	ldd	r27, Z+5	; 0x05
    37de:	8a ea       	ldi	r24, 0xAA	; 170
    37e0:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    37e2:	a4 81       	ldd	r26, Z+4	; 0x04
    37e4:	b5 81       	ldd	r27, Z+5	; 0x05
    37e6:	8c ec       	ldi	r24, 0xCC	; 204
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    37ec:	a4 81       	ldd	r26, Z+4	; 0x04
    37ee:	b5 81       	ldd	r27, Z+5	; 0x05
    37f0:	83 e0       	ldi	r24, 0x03	; 3
    37f2:	12 96       	adiw	r26, 0x02	; 2
    37f4:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    37f6:	a4 81       	ldd	r26, Z+4	; 0x04
    37f8:	b5 81       	ldd	r27, Z+5	; 0x05
    37fa:	81 e8       	ldi	r24, 0x81	; 129
    37fc:	13 96       	adiw	r26, 0x03	; 3
    37fe:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    3800:	a4 81       	ldd	r26, Z+4	; 0x04
    3802:	b5 81       	ldd	r27, Z+5	; 0x05
    3804:	14 96       	adiw	r26, 0x04	; 4
    3806:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    3808:	a4 81       	ldd	r26, Z+4	; 0x04
    380a:	b5 81       	ldd	r27, Z+5	; 0x05
    380c:	15 96       	adiw	r26, 0x05	; 5
    380e:	4c 93       	st	X, r20
	tx_frame_length = 6;
    3810:	86 e0       	ldi	r24, 0x06	; 6
    3812:	81 87       	std	Z+9, r24	; 0x09
    3814:	08 95       	ret

00003816 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    381e:	dc 01       	movw	r26, r24
    3820:	14 96       	adiw	r26, 0x04	; 4
    3822:	ed 91       	ld	r30, X+
    3824:	fc 91       	ld	r31, X
    3826:	15 97       	sbiw	r26, 0x05	; 5
    3828:	aa ea       	ldi	r26, 0xAA	; 170
    382a:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    382c:	ec 01       	movw	r28, r24
    382e:	ec 81       	ldd	r30, Y+4	; 0x04
    3830:	fd 81       	ldd	r31, Y+5	; 0x05
    3832:	ac ec       	ldi	r26, 0xCC	; 204
    3834:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    3836:	ec 81       	ldd	r30, Y+4	; 0x04
    3838:	fd 81       	ldd	r31, Y+5	; 0x05
    383a:	a3 e0       	ldi	r26, 0x03	; 3
    383c:	a2 0f       	add	r26, r18
    383e:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    3840:	ec 81       	ldd	r30, Y+4	; 0x04
    3842:	fd 81       	ldd	r31, Y+5	; 0x05
    3844:	a2 e8       	ldi	r26, 0x82	; 130
    3846:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    3848:	ec 81       	ldd	r30, Y+4	; 0x04
    384a:	fd 81       	ldd	r31, Y+5	; 0x05
    384c:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    384e:	ec 81       	ldd	r30, Y+4	; 0x04
    3850:	fd 81       	ldd	r31, Y+5	; 0x05
    3852:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    3854:	66 e0       	ldi	r22, 0x06	; 6
    3856:	62 0f       	add	r22, r18
    3858:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    385a:	36 95       	lsr	r19
    385c:	27 95       	ror	r18
    385e:	21 15       	cp	r18, r1
    3860:	31 05       	cpc	r19, r1
    3862:	e1 f0       	breq	.+56     	; 0x389c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    3864:	e4 2f       	mov	r30, r20
    3866:	f5 2f       	mov	r31, r21
    3868:	2d 5f       	subi	r18, 0xFD	; 253
    386a:	3f 4f       	sbci	r19, 0xFF	; 255
    386c:	22 0f       	add	r18, r18
    386e:	33 1f       	adc	r19, r19
    3870:	46 e0       	ldi	r20, 0x06	; 6
    3872:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    3874:	ec 01       	movw	r28, r24
    3876:	ac 81       	ldd	r26, Y+4	; 0x04
    3878:	bd 81       	ldd	r27, Y+5	; 0x05
    387a:	a4 0f       	add	r26, r20
    387c:	b5 1f       	adc	r27, r21
    387e:	61 81       	ldd	r22, Z+1	; 0x01
    3880:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    3882:	ac 81       	ldd	r26, Y+4	; 0x04
    3884:	bd 81       	ldd	r27, Y+5	; 0x05
    3886:	a4 0f       	add	r26, r20
    3888:	b5 1f       	adc	r27, r21
    388a:	60 81       	ld	r22, Z
    388c:	32 96       	adiw	r30, 0x02	; 2
    388e:	11 96       	adiw	r26, 0x01	; 1
    3890:	6c 93       	st	X, r22
    3892:	4e 5f       	subi	r20, 0xFE	; 254
    3894:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    3896:	42 17       	cp	r20, r18
    3898:	53 07       	cpc	r21, r19
    389a:	61 f7       	brne	.-40     	; 0x3874 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	08 95       	ret

000038a6 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    38a6:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    38a8:	a4 81       	ldd	r26, Z+4	; 0x04
    38aa:	b5 81       	ldd	r27, Z+5	; 0x05
    38ac:	8a ea       	ldi	r24, 0xAA	; 170
    38ae:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    38b0:	a4 81       	ldd	r26, Z+4	; 0x04
    38b2:	b5 81       	ldd	r27, Z+5	; 0x05
    38b4:	8c ec       	ldi	r24, 0xCC	; 204
    38b6:	11 96       	adiw	r26, 0x01	; 1
    38b8:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    38ba:	a4 81       	ldd	r26, Z+4	; 0x04
    38bc:	b5 81       	ldd	r27, Z+5	; 0x05
    38be:	84 e0       	ldi	r24, 0x04	; 4
    38c0:	12 96       	adiw	r26, 0x02	; 2
    38c2:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    38c4:	a4 81       	ldd	r26, Z+4	; 0x04
    38c6:	b5 81       	ldd	r27, Z+5	; 0x05
    38c8:	83 e8       	ldi	r24, 0x83	; 131
    38ca:	13 96       	adiw	r26, 0x03	; 3
    38cc:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    38ce:	a4 81       	ldd	r26, Z+4	; 0x04
    38d0:	b5 81       	ldd	r27, Z+5	; 0x05
    38d2:	14 96       	adiw	r26, 0x04	; 4
    38d4:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    38d6:	a4 81       	ldd	r26, Z+4	; 0x04
    38d8:	b5 81       	ldd	r27, Z+5	; 0x05
    38da:	15 96       	adiw	r26, 0x05	; 5
    38dc:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    38de:	a4 81       	ldd	r26, Z+4	; 0x04
    38e0:	b5 81       	ldd	r27, Z+5	; 0x05
    38e2:	16 96       	adiw	r26, 0x06	; 6
    38e4:	4c 93       	st	X, r20
	tx_frame_length = 7;
    38e6:	87 e0       	ldi	r24, 0x07	; 7
    38e8:	81 87       	std	Z+9, r24	; 0x09
    38ea:	08 95       	ret

000038ec <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    38ec:	0f 93       	push	r16
    38ee:	1f 93       	push	r17
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	ec 01       	movw	r28, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    38fa:	6f 83       	std	Y+7, r22	; 0x07
    38fc:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    38fe:	4a 87       	std	Y+10, r20	; 0x0a
    3900:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    3902:	0e 94 b8 24 	call	0x4970	; 0x4970 <malloc>
    3906:	8a 83       	std	Y+2, r24	; 0x02
    3908:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    390a:	c8 01       	movw	r24, r16
    390c:	0e 94 b8 24 	call	0x4970	; 0x4970 <malloc>
    3910:	8c 83       	std	Y+4, r24	; 0x04
    3912:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    3914:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    3916:	1e 82       	std	Y+6, r1	; 0x06
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
    3920:	08 95       	ret

00003922 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	ec 01       	movw	r28, r24
	free(rx_buffer);
    3928:	8a 81       	ldd	r24, Y+2	; 0x02
    392a:	9b 81       	ldd	r25, Y+3	; 0x03
    392c:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <free>
	free(tx_buffer);
    3930:	8c 81       	ldd	r24, Y+4	; 0x04
    3932:	9d 81       	ldd	r25, Y+5	; 0x05
    3934:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <free>
}
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	08 95       	ret

0000393e <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    393e:	08 95       	ret

00003940 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    3940:	dc 01       	movw	r26, r24
    3942:	5b 96       	adiw	r26, 0x1b	; 27
    3944:	8d 91       	ld	r24, X+
    3946:	9c 91       	ld	r25, X
    3948:	5c 97       	sbiw	r26, 0x1c	; 28
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	39 f0       	breq	.+14     	; 0x395c <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    394e:	dc 01       	movw	r26, r24
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	02 80       	ldd	r0, Z+2	; 0x02
    3956:	f3 81       	ldd	r31, Z+3	; 0x03
    3958:	e0 2d       	mov	r30, r0
    395a:	19 95       	eicall
    395c:	08 95       	ret

0000395e <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    395e:	dc 01       	movw	r26, r24
    3960:	5b 96       	adiw	r26, 0x1b	; 27
    3962:	8d 91       	ld	r24, X+
    3964:	9c 91       	ld	r25, X
    3966:	5c 97       	sbiw	r26, 0x1c	; 28
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	39 f0       	breq	.+14     	; 0x397a <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    396c:	dc 01       	movw	r26, r24
    396e:	ed 91       	ld	r30, X+
    3970:	fc 91       	ld	r31, X
    3972:	04 80       	ldd	r0, Z+4	; 0x04
    3974:	f5 81       	ldd	r31, Z+5	; 0x05
    3976:	e0 2d       	mov	r30, r0
    3978:	19 95       	eicall
    397a:	08 95       	ret

0000397c <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    397c:	2c e9       	ldi	r18, 0x9C	; 156
    397e:	30 e2       	ldi	r19, 0x20	; 32
    3980:	fc 01       	movw	r30, r24
    3982:	20 83       	st	Z, r18
    3984:	31 83       	std	Z+1, r19	; 0x01
    3986:	08 95       	ret

00003988 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>:
	
}


void CMBSender::Initialize(CTimer* timer, CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize, uint16_t timeout)
{
    3988:	6f 92       	push	r6
    398a:	7f 92       	push	r7
    398c:	8f 92       	push	r8
    398e:	9f 92       	push	r9
    3990:	af 92       	push	r10
    3992:	bf 92       	push	r11
    3994:	cf 92       	push	r12
    3996:	df 92       	push	r13
    3998:	ef 92       	push	r14
    399a:	ff 92       	push	r15
    399c:	0f 93       	push	r16
    399e:	1f 93       	push	r17
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	ec 01       	movw	r28, r24
    39a6:	4b 01       	movw	r8, r22
    39a8:	5a 01       	movw	r10, r20
    39aa:	39 01       	movw	r6, r18
    39ac:	c8 01       	movw	r24, r16
	rx_bufferSize = rx_bufSize;
    39ae:	0f 83       	std	Y+7, r16	; 0x07
    39b0:	18 87       	std	Y+8, r17	; 0x08
	tx_bufferSize = tx_bufSize;
    39b2:	ea 86       	std	Y+10, r14	; 0x0a
    39b4:	fb 86       	std	Y+11, r15	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    39b6:	0e 94 b8 24 	call	0x4970	; 0x4970 <malloc>
    39ba:	8a 83       	std	Y+2, r24	; 0x02
    39bc:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    39be:	c7 01       	movw	r24, r14
    39c0:	0e 94 b8 24 	call	0x4970	; 0x4970 <malloc>
    39c4:	8c 83       	std	Y+4, r24	; 0x04
    39c6:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    39c8:	19 8e       	std	Y+25, r1	; 0x19
	tx_frame_length  = 0x00;
    39ca:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    39cc:	19 8a       	std	Y+17, r1	; 0x11
	rx_frame_length  = 0x00;
    39ce:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    39d0:	1c 8a       	std	Y+20, r1	; 0x14
    39d2:	1d 8a       	std	Y+21, r1	; 0x15
	rx_currt_crc     = 0x00;
    39d4:	1e 8a       	std	Y+22, r1	; 0x16
    39d6:	1f 8a       	std	Y+23, r1	; 0x17
	modbus_receiver_state  = rx_Idle;
    39d8:	87 e0       	ldi	r24, 0x07	; 7
    39da:	88 8b       	std	Y+16, r24	; 0x10
	modbus_transmitter_state  = tx_Idle;
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	88 8f       	std	Y+24, r24	; 0x18
	isTransaction = false;
    39e0:	1a 8e       	std	Y+26, r1	; 0x1a
	Timeout = timeout;
    39e2:	ca 8a       	std	Y+18, r12	; 0x12
    39e4:	db 8a       	std	Y+19, r13	; 0x13
	
	// Set usart interface interrupts
	pUSART = usart;
    39e6:	ac 86       	std	Y+12, r10	; 0x0c
    39e8:	bd 86       	std	Y+13, r11	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    39ea:	d5 01       	movw	r26, r10
    39ec:	ed 91       	ld	r30, X+
    39ee:	fc 91       	ld	r31, X
    39f0:	04 84       	ldd	r0, Z+12	; 0x0c
    39f2:	f5 85       	ldd	r31, Z+13	; 0x0d
    39f4:	e0 2d       	mov	r30, r0
    39f6:	48 ee       	ldi	r20, 0xE8	; 232
    39f8:	5d e1       	ldi	r21, 0x1D	; 29
    39fa:	be 01       	movw	r22, r28
    39fc:	c5 01       	movw	r24, r10
    39fe:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    3a00:	d5 01       	movw	r26, r10
    3a02:	ed 91       	ld	r30, X+
    3a04:	fc 91       	ld	r31, X
    3a06:	06 84       	ldd	r0, Z+14	; 0x0e
    3a08:	f7 85       	ldd	r31, Z+15	; 0x0f
    3a0a:	e0 2d       	mov	r30, r0
    3a0c:	44 e7       	ldi	r20, 0x74	; 116
    3a0e:	5e e1       	ldi	r21, 0x1E	; 30
    3a10:	be 01       	movw	r22, r28
    3a12:	c5 01       	movw	r24, r10
    3a14:	19 95       	eicall
	
	// Set event handler
	if (handler)
    3a16:	61 14       	cp	r6, r1
    3a18:	71 04       	cpc	r7, r1
    3a1a:	19 f0       	breq	.+6      	; 0x3a22 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9a>
		CallbackHandler = handler;
    3a1c:	6b 8e       	std	Y+27, r6	; 0x1b
    3a1e:	7c 8e       	std	Y+28, r7	; 0x1c
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9e>
	else
		CallbackHandler = this;
    3a22:	cb 8f       	std	Y+27, r28	; 0x1b
    3a24:	dc 8f       	std	Y+28, r29	; 0x1c
		
	// Set timeout timer
	pTimer = timer;
    3a26:	8e 86       	std	Y+14, r8	; 0x0e
    3a28:	9f 86       	std	Y+15, r9	; 0x0f
	if (pTimer)
    3a2a:	81 14       	cp	r8, r1
    3a2c:	91 04       	cpc	r9, r1
    3a2e:	61 f0       	breq	.+24     	; 0x3a48 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0xc0>
	{
		pTimer->SetOVFCallback(OnTimeoutInterrupt, (void*)this, TC_OVFINTLVL_LO_gc);
    3a30:	d4 01       	movw	r26, r8
    3a32:	ed 91       	ld	r30, X+
    3a34:	fc 91       	ld	r31, X
    3a36:	04 88       	ldd	r0, Z+20	; 0x14
    3a38:	f5 89       	ldd	r31, Z+21	; 0x15
    3a3a:	e0 2d       	mov	r30, r0
    3a3c:	21 e0       	ldi	r18, 0x01	; 1
    3a3e:	ae 01       	movw	r20, r28
    3a40:	6f e0       	ldi	r22, 0x0F	; 15
    3a42:	7e e1       	ldi	r23, 0x1E	; 30
    3a44:	c4 01       	movw	r24, r8
    3a46:	19 95       	eicall
	}
} //CMBSender
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	ff 90       	pop	r15
    3a52:	ef 90       	pop	r14
    3a54:	df 90       	pop	r13
    3a56:	cf 90       	pop	r12
    3a58:	bf 90       	pop	r11
    3a5a:	af 90       	pop	r10
    3a5c:	9f 90       	pop	r9
    3a5e:	8f 90       	pop	r8
    3a60:	7f 90       	pop	r7
    3a62:	6f 90       	pop	r6
    3a64:	08 95       	ret

00003a66 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    3a66:	2c e9       	ldi	r18, 0x9C	; 156
    3a68:	30 e2       	ldi	r19, 0x20	; 32
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	20 83       	st	Z, r18
    3a6e:	31 83       	std	Z+1, r19	; 0x01
    3a70:	0e 94 9f 1c 	call	0x393e	; 0x393e <_ZN16CMBEventsHandlerD1Ev>
    3a74:	08 95       	ret

00003a76 <_ZN9CMBSender13OnReceiveByteEh>:

//void CMBSender::RequestDataFromRegister(uint8_t addr, uint8_t length);
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

void CMBSender::OnReceiveByte(uint8_t data)
{
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	ec 01       	movw	r28, r24
    3a7c:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    3a7e:	48 89       	ldd	r20, Y+16	; 0x10
    3a80:	50 e0       	ldi	r21, 0x00	; 0
    3a82:	4b 30       	cpi	r20, 0x0B	; 11
    3a84:	51 05       	cpc	r21, r1
    3a86:	08 f0       	brcs	.+2      	; 0x3a8a <_ZN9CMBSender13OnReceiveByteEh+0x14>
    3a88:	a0 c0       	rjmp	.+320    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
    3a8a:	fa 01       	movw	r30, r20
    3a8c:	88 27       	eor	r24, r24
    3a8e:	e3 5e       	subi	r30, 0xE3	; 227
    3a90:	fe 4f       	sbci	r31, 0xFE	; 254
    3a92:	8f 4f       	sbci	r24, 0xFF	; 255
    3a94:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    3a98:	9a 3a       	cpi	r25, 0xAA	; 170
    3a9a:	19 f4       	brne	.+6      	; 0x3aa2 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	88 8b       	std	Y+16, r24	; 0x10
    3aa0:	94 c0       	rjmp	.+296    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	88 8b       	std	Y+16, r24	; 0x10
    3aa6:	91 c0       	rjmp	.+290    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    3aa8:	9c 3c       	cpi	r25, 0xCC	; 204
    3aaa:	19 f4       	brne	.+6      	; 0x3ab2 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    3aac:	83 e0       	ldi	r24, 0x03	; 3
    3aae:	88 8b       	std	Y+16, r24	; 0x10
    3ab0:	8c c0       	rjmp	.+280    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	88 8b       	std	Y+16, r24	; 0x10
    3ab6:	89 c0       	rjmp	.+274    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    3ab8:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    3aba:	19 8a       	std	Y+17, r1	; 0x11
			rx_currt_crc = 0;
    3abc:	1e 8a       	std	Y+22, r1	; 0x16
    3abe:	1f 8a       	std	Y+23, r1	; 0x17
			modbus_receiver_state = rx_FrameReceive;
    3ac0:	84 e0       	ldi	r24, 0x04	; 4
    3ac2:	88 8b       	std	Y+16, r24	; 0x10
			break;
    3ac4:	82 c0       	rjmp	.+260    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    3ac6:	89 89       	ldd	r24, Y+17	; 0x11
    3ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    3aca:	fb 81       	ldd	r31, Y+3	; 0x03
    3acc:	e8 0f       	add	r30, r24
    3ace:	f1 1d       	adc	r31, r1
    3ad0:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    3ad2:	29 89       	ldd	r18, Y+17	; 0x11
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	4f 81       	ldd	r20, Y+7	; 0x07
    3ad8:	58 85       	ldd	r21, Y+8	; 0x08
    3ada:	42 17       	cp	r20, r18
    3adc:	53 07       	cpc	r21, r19
    3ade:	18 f4       	brcc	.+6      	; 0x3ae6 <_ZN9CMBSender13OnReceiveByteEh+0x70>
			{
				modbus_receiver_state = rx_Error;
    3ae0:	89 e0       	ldi	r24, 0x09	; 9
    3ae2:	88 8b       	std	Y+16, r24	; 0x10
				break;
    3ae4:	72 c0       	rjmp	.+228    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    3ae6:	2e 89       	ldd	r18, Y+22	; 0x16
    3ae8:	3f 89       	ldd	r19, Y+23	; 0x17
    3aea:	29 27       	eor	r18, r25
    3aec:	92 2f       	mov	r25, r18
    3aee:	92 95       	swap	r25
    3af0:	92 27       	eor	r25, r18
    3af2:	09 2e       	mov	r0, r25
    3af4:	96 95       	lsr	r25
    3af6:	96 95       	lsr	r25
    3af8:	90 25       	eor	r25, r0
    3afa:	09 2e       	mov	r0, r25
    3afc:	96 95       	lsr	r25
    3afe:	90 25       	eor	r25, r0
    3b00:	97 70       	andi	r25, 0x07	; 7
    3b02:	02 2e       	mov	r0, r18
    3b04:	23 2f       	mov	r18, r19
    3b06:	96 95       	lsr	r25
    3b08:	07 94       	ror	r0
    3b0a:	97 95       	ror	r25
    3b0c:	30 2d       	mov	r19, r0
    3b0e:	29 27       	eor	r18, r25
    3b10:	06 94       	lsr	r0
    3b12:	97 95       	ror	r25
    3b14:	30 25       	eor	r19, r0
    3b16:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    3b18:	2e 8b       	std	Y+22, r18	; 0x16
    3b1a:	3f 8b       	std	Y+23, r19	; 0x17
			rx_buffer_pos++;
    3b1c:	89 89       	ldd	r24, Y+17	; 0x11
    3b1e:	8f 5f       	subi	r24, 0xFF	; 255
    3b20:	89 8b       	std	Y+17, r24	; 0x11
			if (rx_buffer_pos == rx_frame_length)
    3b22:	49 89       	ldd	r20, Y+17	; 0x11
    3b24:	8e 81       	ldd	r24, Y+6	; 0x06
    3b26:	48 13       	cpse	r20, r24
    3b28:	50 c0       	rjmp	.+160    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    3b2a:	88 e0       	ldi	r24, 0x08	; 8
    3b2c:	88 8b       	std	Y+16, r24	; 0x10
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3b2e:	e8 81       	ld	r30, Y
    3b30:	f9 81       	ldd	r31, Y+1	; 0x01
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	6a 81       	ldd	r22, Y+2	; 0x02
    3b36:	7b 81       	ldd	r23, Y+3	; 0x03
    3b38:	01 90       	ld	r0, Z+
    3b3a:	f0 81       	ld	r31, Z
    3b3c:	e0 2d       	mov	r30, r0
    3b3e:	ce 01       	movw	r24, r28
    3b40:	19 95       	eicall
				if (CallbackHandler != 0)
    3b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    3b4a:	3f c0       	rjmp	.+126    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	ed 91       	ld	r30, X+
    3b50:	fc 91       	ld	r31, X
    3b52:	4e 81       	ldd	r20, Y+6	; 0x06
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	6a 81       	ldd	r22, Y+2	; 0x02
    3b58:	7b 81       	ldd	r23, Y+3	; 0x03
    3b5a:	01 90       	ld	r0, Z+
    3b5c:	f0 81       	ld	r31, Z
    3b5e:	e0 2d       	mov	r30, r0
    3b60:	19 95       	eicall
    3b62:	33 c0       	rjmp	.+102    	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    3b64:	69 2f       	mov	r22, r25
    3b66:	70 e0       	ldi	r23, 0x00	; 0
    3b68:	6c 8b       	std	Y+20, r22	; 0x14
    3b6a:	7d 8b       	std	Y+21, r23	; 0x15
			modbus_receiver_state = rx_CRC1;
    3b6c:	86 e0       	ldi	r24, 0x06	; 6
    3b6e:	88 8b       	std	Y+16, r24	; 0x10
			break;
    3b70:	2c c0       	rjmp	.+88     	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    3b72:	2c 89       	ldd	r18, Y+20	; 0x14
    3b74:	3d 89       	ldd	r19, Y+21	; 0x15
    3b76:	a9 01       	movw	r20, r18
    3b78:	59 2b       	or	r21, r25
    3b7a:	4c 8b       	std	Y+20, r20	; 0x14
    3b7c:	5d 8b       	std	Y+21, r21	; 0x15
			if (rx_currt_crc == rx_frame_crc)
    3b7e:	2e 89       	ldd	r18, Y+22	; 0x16
    3b80:	3f 89       	ldd	r19, Y+23	; 0x17
    3b82:	42 17       	cp	r20, r18
    3b84:	53 07       	cpc	r21, r19
    3b86:	e9 f4       	brne	.+58     	; 0x3bc2 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
			{
				modbus_receiver_state = rx_Complete;
    3b88:	88 e0       	ldi	r24, 0x08	; 8
    3b8a:	88 8b       	std	Y+16, r24	; 0x10
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3b8c:	e8 81       	ld	r30, Y
    3b8e:	f9 81       	ldd	r31, Y+1	; 0x01
    3b90:	4e 81       	ldd	r20, Y+6	; 0x06
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	6a 81       	ldd	r22, Y+2	; 0x02
    3b96:	7b 81       	ldd	r23, Y+3	; 0x03
    3b98:	01 90       	ld	r0, Z+
    3b9a:	f0 81       	ld	r31, Z
    3b9c:	e0 2d       	mov	r30, r0
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	19 95       	eicall
				if (CallbackHandler != 0)
    3ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	81 f0       	breq	.+32     	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3baa:	dc 01       	movw	r26, r24
    3bac:	ed 91       	ld	r30, X+
    3bae:	fc 91       	ld	r31, X
    3bb0:	4e 81       	ldd	r20, Y+6	; 0x06
    3bb2:	50 e0       	ldi	r21, 0x00	; 0
    3bb4:	6a 81       	ldd	r22, Y+2	; 0x02
    3bb6:	7b 81       	ldd	r23, Y+3	; 0x03
    3bb8:	01 90       	ld	r0, Z+
    3bba:	f0 81       	ld	r31, Z
    3bbc:	e0 2d       	mov	r30, r0
    3bbe:	19 95       	eicall
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			else
				modbus_receiver_state = rx_Error;
    3bc2:	89 e0       	ldi	r24, 0x09	; 9
    3bc4:	88 8b       	std	Y+16, r24	; 0x10
    3bc6:	01 c0       	rjmp	.+2      	; 0x3bca <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    3bc8:	1a 8e       	std	Y+26, r1	; 0x1a
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	08 95       	ret

00003bd0 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    3bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bda:	dc 01       	movw	r26, r24
    3bdc:	ed 91       	ld	r30, X+
    3bde:	fc 91       	ld	r31, X
    3be0:	02 80       	ldd	r0, Z+2	; 0x02
    3be2:	f3 81       	ldd	r31, Z+3	; 0x03
    3be4:	e0 2d       	mov	r30, r0
    3be6:	19 95       	eicall
	owner->OnReceiveByte(data);
    3be8:	68 2f       	mov	r22, r24
    3bea:	ce 01       	movw	r24, r28
    3bec:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN9CMBSender13OnReceiveByteEh>
}
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <_ZN9CMBSender9OnTimeoutEv>:
		break;
	}
}

void CMBSender::OnTimeout()
{
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	ec 01       	movw	r28, r24
	pTimer->Stop();
    3bfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c00:	dc 01       	movw	r26, r24
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	04 80       	ldd	r0, Z+4	; 0x04
    3c08:	f5 81       	ldd	r31, Z+5	; 0x05
    3c0a:	e0 2d       	mov	r30, r0
    3c0c:	19 95       	eicall
	if (modbus_receiver_state != rx_Complete)
    3c0e:	88 89       	ldd	r24, Y+16	; 0x10
    3c10:	88 30       	cpi	r24, 0x08	; 8
    3c12:	11 f0       	breq	.+4      	; 0x3c18 <_ZN9CMBSender9OnTimeoutEv+0x22>
		modbus_receiver_state = rx_TimeOut;
    3c14:	8a e0       	ldi	r24, 0x0A	; 10
    3c16:	88 8b       	std	Y+16, r24	; 0x10
}
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	08 95       	ret

00003c1e <_ZN9CMBSender18OnTimeoutInterruptEPv>:
}

void CMBSender::OnTimeoutInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTimeout();
    3c1e:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <_ZN9CMBSender9OnTimeoutEv>
    3c22:	08 95       	ret

00003c24 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    3c2a:	11 8a       	std	Z+17, r1	; 0x11
	rx_frame_length  = 0x00;
    3c2c:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    3c2e:	14 8a       	std	Z+20, r1	; 0x14
    3c30:	15 8a       	std	Z+21, r1	; 0x15
	rx_currt_crc     = 0x00;
    3c32:	16 8a       	std	Z+22, r1	; 0x16
    3c34:	17 8a       	std	Z+23, r1	; 0x17
	modbus_receiver_state  = rx_Start;
    3c36:	10 8a       	std	Z+16, r1	; 0x10
	pTimer->Start(Timeout);
    3c38:	86 85       	ldd	r24, Z+14	; 0x0e
    3c3a:	97 85       	ldd	r25, Z+15	; 0x0f
    3c3c:	ec 01       	movw	r28, r24
    3c3e:	a8 81       	ld	r26, Y
    3c40:	b9 81       	ldd	r27, Y+1	; 0x01
    3c42:	62 89       	ldd	r22, Z+18	; 0x12
    3c44:	73 89       	ldd	r23, Z+19	; 0x13
    3c46:	12 96       	adiw	r26, 0x02	; 2
    3c48:	ed 91       	ld	r30, X+
    3c4a:	fc 91       	ld	r31, X
    3c4c:	13 97       	sbiw	r26, 0x03	; 3
    3c4e:	19 95       	eicall
}
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	08 95       	ret

00003c56 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    3c5c:	88 8d       	ldd	r24, Y+24	; 0x18
    3c5e:	84 30       	cpi	r24, 0x04	; 4
    3c60:	38 f4       	brcc	.+14     	; 0x3c70 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    3c62:	82 30       	cpi	r24, 0x02	; 2
    3c64:	b8 f5       	brcc	.+110    	; 0x3cd4 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    3c66:	88 23       	and	r24, r24
    3c68:	31 f0       	breq	.+12     	; 0x3c76 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    3c6a:	81 30       	cpi	r24, 0x01	; 1
    3c6c:	d1 f0       	breq	.+52     	; 0x3ca2 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    3c6e:	39 c0       	rjmp	.+114    	; 0x3ce2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    3c70:	85 30       	cpi	r24, 0x05	; 5
    3c72:	81 f1       	breq	.+96     	; 0x3cd4 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    3c74:	36 c0       	rjmp	.+108    	; 0x3ce2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	88 8f       	std	Y+24, r24	; 0x18
			tx_buffer_pos = 0;
    3c7a:	19 8e       	std	Y+25, r1	; 0x19
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    3c7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c80:	29 8d       	ldd	r18, Y+25	; 0x19
    3c82:	dc 01       	movw	r26, r24
    3c84:	ed 91       	ld	r30, X+
    3c86:	fc 91       	ld	r31, X
    3c88:	ac 81       	ldd	r26, Y+4	; 0x04
    3c8a:	bd 81       	ldd	r27, Y+5	; 0x05
    3c8c:	a2 0f       	add	r26, r18
    3c8e:	b1 1d       	adc	r27, r1
    3c90:	04 80       	ldd	r0, Z+4	; 0x04
    3c92:	f5 81       	ldd	r31, Z+5	; 0x05
    3c94:	e0 2d       	mov	r30, r0
    3c96:	6c 91       	ld	r22, X
    3c98:	19 95       	eicall
			tx_buffer_pos++;
    3c9a:	89 8d       	ldd	r24, Y+25	; 0x19
    3c9c:	8f 5f       	subi	r24, 0xFF	; 255
    3c9e:	89 8f       	std	Y+25, r24	; 0x19
			break;
    3ca0:	20 c0       	rjmp	.+64     	; 0x3ce2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    3ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ca6:	29 8d       	ldd	r18, Y+25	; 0x19
    3ca8:	dc 01       	movw	r26, r24
    3caa:	ed 91       	ld	r30, X+
    3cac:	fc 91       	ld	r31, X
    3cae:	ac 81       	ldd	r26, Y+4	; 0x04
    3cb0:	bd 81       	ldd	r27, Y+5	; 0x05
    3cb2:	a2 0f       	add	r26, r18
    3cb4:	b1 1d       	adc	r27, r1
    3cb6:	04 80       	ldd	r0, Z+4	; 0x04
    3cb8:	f5 81       	ldd	r31, Z+5	; 0x05
    3cba:	e0 2d       	mov	r30, r0
    3cbc:	6c 91       	ld	r22, X
    3cbe:	19 95       	eicall
			tx_buffer_pos++;
    3cc0:	89 8d       	ldd	r24, Y+25	; 0x19
    3cc2:	8f 5f       	subi	r24, 0xFF	; 255
    3cc4:	89 8f       	std	Y+25, r24	; 0x19
			if (tx_buffer_pos == tx_frame_length)
    3cc6:	99 8d       	ldd	r25, Y+25	; 0x19
    3cc8:	89 85       	ldd	r24, Y+9	; 0x09
    3cca:	98 13       	cpse	r25, r24
    3ccc:	0a c0       	rjmp	.+20     	; 0x3ce2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    3cce:	83 e0       	ldi	r24, 0x03	; 3
    3cd0:	88 8f       	std	Y+24, r24	; 0x18
    3cd2:	07 c0       	rjmp	.+14     	; 0x3ce2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    3cd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3cd6:	88 23       	and	r24, r24
    3cd8:	19 f0       	breq	.+6      	; 0x3ce0 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    3cda:	ce 01       	movw	r24, r28
    3cdc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    3ce0:	1a 8e       	std	Y+26, r1	; 0x1a
		default :
		break;
	}
}
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	08 95       	ret

00003ce8 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    3ce8:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_ZN9CMBSender14OnTransmitByteEv>
    3cec:	08 95       	ret

00003cee <_ZN9CMBSender18WaitMODBUSListenerEv>:
	modbus_receiver_state  = rx_Start;
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    3cee:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    3cf0:	06 c0       	rjmp	.+12     	; 0x3cfe <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    3cf2:	80 89       	ldd	r24, Z+16	; 0x10
    3cf4:	89 30       	cpi	r24, 0x09	; 9
    3cf6:	41 f0       	breq	.+16     	; 0x3d08 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    3cf8:	80 89       	ldd	r24, Z+16	; 0x10
    3cfa:	8a 30       	cpi	r24, 0x0A	; 10
    3cfc:	39 f0       	breq	.+14     	; 0x3d0c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    3cfe:	80 89       	ldd	r24, Z+16	; 0x10
    3d00:	88 30       	cpi	r24, 0x08	; 8
    3d02:	b9 f7       	brne	.-18     	; 0x3cf2 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    3d08:	82 e0       	ldi	r24, 0x02	; 2
    3d0a:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    3d0c:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    3d0e:	08 95       	ret

00003d10 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
{
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	ec 01       	movw	r28, r24
	tx_buffer_pos = 0x00;
    3d16:	19 8e       	std	Y+25, r1	; 0x19
	modbus_transmitter_state  = tx_Start;
    3d18:	18 8e       	std	Y+24, r1	; 0x18
	OnTransmitByte();
    3d1a:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_ZN9CMBSender14OnTransmitByteEv>
	pTimer->Start(Timeout);
    3d1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d22:	dc 01       	movw	r26, r24
    3d24:	ed 91       	ld	r30, X+
    3d26:	fc 91       	ld	r31, X
    3d28:	6a 89       	ldd	r22, Y+18	; 0x12
    3d2a:	7b 89       	ldd	r23, Y+19	; 0x13
    3d2c:	02 80       	ldd	r0, Z+2	; 0x02
    3d2e:	f3 81       	ldd	r31, Z+3	; 0x03
    3d30:	e0 2d       	mov	r30, r0
    3d32:	19 95       	eicall
}
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	08 95       	ret

00003d3a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    3d40:	e8 81       	ld	r30, Y
    3d42:	f9 81       	ldd	r31, Y+1	; 0x01
    3d44:	02 84       	ldd	r0, Z+10	; 0x0a
    3d46:	f3 85       	ldd	r31, Z+11	; 0x0b
    3d48:	e0 2d       	mov	r30, r0
    3d4a:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	08 95       	ret

00003d58 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    3d5e:	e8 81       	ld	r30, Y
    3d60:	f9 81       	ldd	r31, Y+1	; 0x01
    3d62:	06 84       	ldd	r0, Z+14	; 0x0e
    3d64:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d66:	e0 2d       	mov	r30, r0
    3d68:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    3d6a:	ce 01       	movw	r24, r28
    3d6c:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	08 95       	ret

00003d76 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    3d7c:	e8 81       	ld	r30, Y
    3d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d80:	04 84       	ldd	r0, Z+12	; 0x0c
    3d82:	f5 85       	ldd	r31, Z+13	; 0x0d
    3d84:	e0 2d       	mov	r30, r0
    3d86:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3d88:	ce 01       	movw	r24, r28
    3d8a:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	08 95       	ret

00003d94 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    3d9a:	e8 81       	ld	r30, Y
    3d9c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d9e:	50 e0       	ldi	r21, 0x00	; 0
    3da0:	00 88       	ldd	r0, Z+16	; 0x10
    3da2:	f1 89       	ldd	r31, Z+17	; 0x11
    3da4:	e0 2d       	mov	r30, r0
    3da6:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3da8:	ce 01       	movw	r24, r28
    3daa:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	08 95       	ret

00003db4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	OnTransmitByte();
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    3db4:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    3db6:	06 c0       	rjmp	.+12     	; 0x3dc4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    3db8:	80 8d       	ldd	r24, Z+24	; 0x18
    3dba:	84 30       	cpi	r24, 0x04	; 4
    3dbc:	41 f0       	breq	.+16     	; 0x3dce <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    3dbe:	80 8d       	ldd	r24, Z+24	; 0x18
    3dc0:	85 30       	cpi	r24, 0x05	; 5
    3dc2:	39 f0       	breq	.+14     	; 0x3dd2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	pTimer->Start(Timeout);
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    3dc4:	80 8d       	ldd	r24, Z+24	; 0x18
    3dc6:	83 30       	cpi	r24, 0x03	; 3
    3dc8:	b9 f7       	brne	.-18     	; 0x3db8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    3dce:	82 e0       	ldi	r24, 0x02	; 2
    3dd0:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    3dd2:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    3dd4:	08 95       	ret

00003dd6 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    3dd6:	21 e0       	ldi	r18, 0x01	; 1
    3dd8:	fc 01       	movw	r30, r24
    3dda:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    3ddc:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    3de0:	08 95       	ret

00003de2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    3de2:	21 e0       	ldi	r18, 0x01	; 1
    3de4:	fc 01       	movw	r30, r24
    3de6:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    3de8:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    3dec:	08 95       	ret

00003dee <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	8c 01       	movw	r16, r24
    3df8:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    3dfa:	98 81       	ld	r25, Y
    3dfc:	91 38       	cpi	r25, 0x81	; 129
    3dfe:	69 f4       	brne	.+26     	; 0x3e1a <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    3e00:	d8 01       	movw	r26, r16
    3e02:	ed 91       	ld	r30, X+
    3e04:	fc 91       	ld	r31, X
    3e06:	04 80       	ldd	r0, Z+4	; 0x04
    3e08:	f5 81       	ldd	r31, Z+5	; 0x05
    3e0a:	e0 2d       	mov	r30, r0
    3e0c:	2a 81       	ldd	r18, Y+2	; 0x02
    3e0e:	ab 01       	movw	r20, r22
    3e10:	4d 5f       	subi	r20, 0xFD	; 253
    3e12:	5f 4f       	sbci	r21, 0xFF	; 255
    3e14:	69 81       	ldd	r22, Y+1	; 0x01
    3e16:	c8 01       	movw	r24, r16
    3e18:	19 95       	eicall
	}
	if (data[0] == 0x83)
    3e1a:	98 81       	ld	r25, Y
    3e1c:	93 38       	cpi	r25, 0x83	; 131
    3e1e:	99 f4       	brne	.+38     	; 0x3e46 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    3e20:	d8 01       	movw	r26, r16
    3e22:	ed 91       	ld	r30, X+
    3e24:	fc 91       	ld	r31, X
    3e26:	2b 81       	ldd	r18, Y+3	; 0x03
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	ae 01       	movw	r20, r28
    3e2c:	4c 5f       	subi	r20, 0xFC	; 252
    3e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e30:	69 81       	ldd	r22, Y+1	; 0x01
    3e32:	70 e0       	ldi	r23, 0x00	; 0
    3e34:	76 2f       	mov	r23, r22
    3e36:	66 27       	eor	r22, r22
    3e38:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3a:	68 2b       	or	r22, r24
    3e3c:	02 80       	ldd	r0, Z+2	; 0x02
    3e3e:	f3 81       	ldd	r31, Z+3	; 0x03
    3e40:	e0 2d       	mov	r30, r0
    3e42:	c8 01       	movw	r24, r16
    3e44:	19 95       	eicall
	}
}
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	08 95       	ret

00003e50 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    3e50:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZN9CMBSender18ProcessTransactionEPhj>
    3e54:	08 95       	ret

00003e56 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    3e56:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    3e58:	e0 e6       	ldi	r30, 0x60	; 96
    3e5a:	f6 e0       	ldi	r31, 0x06	; 6
    3e5c:	88 e0       	ldi	r24, 0x08	; 8
    3e5e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    3e60:	84 e0       	ldi	r24, 0x04	; 4
    3e62:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    3e64:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    3e66:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    3e68:	e0 ea       	ldi	r30, 0xA0	; 160
    3e6a:	f9 e0       	ldi	r31, 0x09	; 9
    3e6c:	84 e1       	ldi	r24, 0x14	; 20
    3e6e:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3e70:	88 e1       	ldi	r24, 0x18	; 24
    3e72:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    3e74:	84 81       	ldd	r24, Z+4	; 0x04
    3e76:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    3e78:	41 30       	cpi	r20, 0x01	; 1
    3e7a:	19 f0       	breq	.+6      	; 0x3e82 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    3e7c:	42 30       	cpi	r20, 0x02	; 2
    3e7e:	19 f0       	breq	.+6      	; 0x3e86 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    3e80:	04 c0       	rjmp	.+8      	; 0x3e8a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    3e82:	80 e2       	ldi	r24, 0x20	; 32
    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    3e86:	80 e3       	ldi	r24, 0x30	; 48
		break;
    3e88:	01 c0       	rjmp	.+2      	; 0x3e8c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    3e8c:	22 23       	and	r18, r18
    3e8e:	19 f0       	breq	.+6      	; 0x3e96 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    3e90:	21 30       	cpi	r18, 0x01	; 1
    3e92:	19 f0       	breq	.+6      	; 0x3e9a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    3e94:	03 c0       	rjmp	.+6      	; 0x3e9c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    3e96:	87 7f       	andi	r24, 0xF7	; 247
		break;
    3e98:	01 c0       	rjmp	.+2      	; 0x3e9c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    3e9a:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    3e9c:	01 11       	cpse	r16, r1
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    3ea0:	93 e4       	ldi	r25, 0x43	; 67
    3ea2:	01 c0       	rjmp	.+2      	; 0x3ea6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    3ea4:	93 e0       	ldi	r25, 0x03	; 3
    3ea6:	89 2b       	or	r24, r25
    3ea8:	e0 ea       	ldi	r30, 0xA0	; 160
    3eaa:	f9 e0       	ldi	r31, 0x09	; 9
    3eac:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    3eae:	70 e0       	ldi	r23, 0x00	; 0
    3eb0:	db 01       	movw	r26, r22
    3eb2:	aa 5d       	subi	r26, 0xDA	; 218
    3eb4:	bf 4d       	sbci	r27, 0xDF	; 223
    3eb6:	8c 91       	ld	r24, X
    3eb8:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    3eba:	db 01       	movw	r26, r22
    3ebc:	aa 5f       	subi	r26, 0xFA	; 250
    3ebe:	bf 4d       	sbci	r27, 0xDF	; 223
    3ec0:	8c 91       	ld	r24, X
    3ec2:	82 95       	swap	r24
    3ec4:	80 7f       	andi	r24, 0xF0	; 240
    3ec6:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

00003ecc <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    3ecc:	80 91 a0 09 	lds	r24, 0x09A0
}
    3ed0:	08 95       	ret

00003ed2 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    3ed2:	60 93 a0 09 	sts	0x09A0, r22
    3ed6:	08 95       	ret

00003ed8 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    3ed8:	80 91 a1 09 	lds	r24, 0x09A1
    3edc:	86 fb       	bst	r24, 6
    3ede:	88 27       	eor	r24, r24
    3ee0:	80 f9       	bld	r24, 0
}
    3ee2:	91 e0       	ldi	r25, 0x01	; 1
    3ee4:	89 27       	eor	r24, r25
    3ee6:	08 95       	ret

00003ee8 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    3ee8:	80 91 a1 09 	lds	r24, 0x09A1
    3eec:	80 95       	com	r24
}
    3eee:	88 1f       	adc	r24, r24
    3ef0:	88 27       	eor	r24, r24
    3ef2:	88 1f       	adc	r24, r24
    3ef4:	08 95       	ret

00003ef6 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    3ef6:	80 91 a1 09 	lds	r24, 0x09A1
    3efa:	85 fb       	bst	r24, 5
    3efc:	88 27       	eor	r24, r24
    3efe:	80 f9       	bld	r24, 0
}
    3f00:	91 e0       	ldi	r25, 0x01	; 1
    3f02:	89 27       	eor	r24, r25
    3f04:	08 95       	ret

00003f06 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    3f06:	60 93 13 23 	sts	0x2313, r22
    3f0a:	70 93 14 23 	sts	0x2314, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    3f0e:	40 93 1d 22 	sts	0x221D, r20
    3f12:	50 93 1e 22 	sts	0x221E, r21
    3f16:	08 95       	ret

00003f18 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    3f18:	60 93 17 23 	sts	0x2317, r22
    3f1c:	70 93 18 23 	sts	0x2318, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    3f20:	40 93 21 22 	sts	0x2221, r20
    3f24:	50 93 22 22 	sts	0x2222, r21
    3f28:	08 95       	ret

00003f2a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    3f2a:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    3f2c:	8b e6       	ldi	r24, 0x6B	; 107
    3f2e:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    3f30:	80 ea       	ldi	r24, 0xA0	; 160
    3f32:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    3f34:	89 e0       	ldi	r24, 0x09	; 9
    3f36:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    3f38:	12 86       	std	Z+10, r1	; 0x0a
    3f3a:	08 95       	ret

00003f3c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    3f3c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    3f3e:	8c e6       	ldi	r24, 0x6C	; 108
    3f40:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    3f42:	80 ea       	ldi	r24, 0xA0	; 160
    3f44:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    3f46:	89 e0       	ldi	r24, 0x09	; 9
    3f48:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    3f4a:	16 86       	std	Z+14, r1	; 0x0e
    3f4c:	08 95       	ret

00003f4e <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	ec 01       	movw	r28, r24
    3f54:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN6CUSARTC1Ev>
    3f58:	82 eb       	ldi	r24, 0xB2	; 178
    3f5a:	90 e2       	ldi	r25, 0x20	; 32
    3f5c:	88 83       	st	Y, r24
    3f5e:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	08 95       	ret

00003f66 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    3f66:	22 eb       	ldi	r18, 0xB2	; 178
    3f68:	30 e2       	ldi	r19, 0x20	; 32
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	20 83       	st	Z, r18
    3f6e:	31 83       	std	Z+1, r19	; 0x01
    3f70:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN6CUSARTD1Ev>
    3f74:	08 95       	ret

00003f76 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
    3f76:	08 95       	ret

00003f78 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
    3f78:	08 95       	ret

00003f7a <_ZN11CLaserBoard12InitializeIOEv>:
{
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
    3f7e:	ec 01       	movw	r28, r24
	// Set all output
	PORTC.DIRSET = 0xFF;
    3f80:	e0 e4       	ldi	r30, 0x40	; 64
    3f82:	f6 e0       	ldi	r31, 0x06	; 6
    3f84:	2f ef       	ldi	r18, 0xFF	; 255
    3f86:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f88:	98 ea       	ldi	r25, 0xA8	; 168
    3f8a:	90 8b       	std	Z+16, r25	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f8c:	91 8b       	std	Z+17, r25	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f8e:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f90:	93 8b       	std	Z+19, r25	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f92:	94 8b       	std	Z+20, r25	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f94:	95 8b       	std	Z+21, r25	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f96:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
    3f98:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set all down
	PORTC.OUT = 0xFF;
    3f9a:	24 83       	std	Z+4, r18	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
    3f9c:	a0 e8       	ldi	r26, 0x80	; 128
    3f9e:	b6 e0       	ldi	r27, 0x06	; 6
    3fa0:	88 e0       	ldi	r24, 0x08	; 8
    3fa2:	11 96       	adiw	r26, 0x01	; 1
    3fa4:	8c 93       	st	X, r24
    3fa6:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
    3fa8:	53 96       	adiw	r26, 0x13	; 19
    3faa:	1c 92       	st	X, r1
    3fac:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
    3fae:	14 96       	adiw	r26, 0x04	; 4
    3fb0:	1c 92       	st	X, r1
    3fb2:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fb4:	e0 ea       	ldi	r30, 0xA0	; 160
    3fb6:	f6 e0       	ldi	r31, 0x06	; 6
    3fb8:	90 ec       	ldi	r25, 0xC0	; 192
    3fba:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.PIN1CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fbc:	80 e8       	ldi	r24, 0x80	; 128
    3fbe:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fc0:	92 8b       	std	Z+18, r25	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fc2:	93 8b       	std	Z+19, r25	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fc4:	94 8b       	std	Z+20, r25	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fc6:	95 8b       	std	Z+21, r25	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fc8:	96 8b       	std	Z+22, r25	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fca:	97 8b       	std	Z+23, r25	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
    3fcc:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
    3fce:	21 83       	std	Z+1, r18	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
    3fd0:	e0 e6       	ldi	r30, 0x60	; 96
    3fd2:	f6 e0       	ldi	r31, 0x06	; 6
    3fd4:	21 e1       	ldi	r18, 0x11	; 17
    3fd6:	21 83       	std	Z+1, r18	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fd8:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fda:	94 8b       	std	Z+20, r25	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
    3fdc:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
    3fde:	93 e0       	ldi	r25, 0x03	; 3
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	9c 93       	st	X, r25
    3fe4:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fe6:	50 96       	adiw	r26, 0x10	; 16
    3fe8:	8c 93       	st	X, r24
    3fea:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
    3fec:	51 96       	adiw	r26, 0x11	; 17
    3fee:	8c 93       	st	X, r24
    3ff0:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
    3ff2:	14 96       	adiw	r26, 0x04	; 4
    3ff4:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    3ff6:	e0 ea       	ldi	r30, 0xA0	; 160
    3ff8:	f0 e0       	ldi	r31, 0x00	; 0
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	81 60       	ori	r24, 0x01	; 1
    3ffe:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
    4000:	82 81       	ldd	r24, Z+2	; 0x02
    4002:	82 60       	ori	r24, 0x02	; 2
    4004:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	84 60       	ori	r24, 0x04	; 4
    400a:	82 83       	std	Z+2, r24	; 0x02
    400c:	fe 01       	movw	r30, r28
    400e:	9e 01       	movw	r18, r28
    4010:	28 5f       	subi	r18, 0xF8	; 248
    4012:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 8; i++)
		PIN_Cnt[i] = 1;
    4014:	91 e0       	ldi	r25, 0x01	; 1
    4016:	91 93       	st	Z+, r25
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
	PMIC.CTRL |= PMIC_HILVLEN_bm;
	
	for (uint8_t i = 0; i < 8; i++)
    4018:	e2 17       	cp	r30, r18
    401a:	f3 07       	cpc	r31, r19
    401c:	e1 f7       	brne	.-8      	; 0x4016 <__stack+0x17>
		PIN_Cnt[i] = 1;
		
	PINThreshold = 10;
    401e:	8a e0       	ldi	r24, 0x0A	; 10
    4020:	88 87       	std	Y+8, r24	; 0x08
}
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	08 95       	ret

00004028 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
    4028:	e0 e5       	ldi	r30, 0x50	; 80
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	8b ec       	ldi	r24, 0xCB	; 203
    402e:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
    4030:	80 81       	ld	r24, Z
    4032:	88 60       	ori	r24, 0x08	; 8
    4034:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
    4036:	81 81       	ldd	r24, Z+1	; 0x01
    4038:	83 ff       	sbrs	r24, 3
    403a:	fd cf       	rjmp	.-6      	; 0x4036 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
    403c:	e0 e5       	ldi	r30, 0x50	; 80
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
    4042:	98 ed       	ldi	r25, 0xD8	; 216
    4044:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
    4046:	84 ec       	ldi	r24, 0xC4	; 196
    4048:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
    404a:	80 81       	ld	r24, Z
    404c:	80 61       	ori	r24, 0x10	; 16
    404e:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
    4050:	e0 e4       	ldi	r30, 0x40	; 64
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
    4056:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
    4058:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
    405a:	e0 e5       	ldi	r30, 0x50	; 80
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	81 81       	ldd	r24, Z+1	; 0x01
    4060:	84 ff       	sbrs	r24, 4
    4062:	fd cf       	rjmp	.-6      	; 0x405e <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
    4064:	e0 e4       	ldi	r30, 0x40	; 64
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	80 81       	ld	r24, Z
    406a:	88 7f       	andi	r24, 0xF8	; 248
    406c:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
    406e:	98 ed       	ldi	r25, 0xD8	; 216
    4070:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
    4072:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
    4074:	a0 e5       	ldi	r26, 0x50	; 80
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	8c 91       	ld	r24, X
    407a:	88 7f       	andi	r24, 0xF8	; 248
    407c:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
    407e:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
    4080:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
    4086:	e0 eb       	ldi	r30, 0xB0	; 176
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	84 81       	ldd	r24, Z+4	; 0x04
    408c:	8c 7f       	andi	r24, 0xFC	; 252
    408e:	84 83       	std	Z+4, r24	; 0x04
    4090:	08 95       	ret

00004092 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	80 93 62 06 	sts	0x0662, r24
    4098:	08 95       	ret

0000409a <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
    409a:	80 e1       	ldi	r24, 0x10	; 16
    409c:	80 93 62 06 	sts	0x0662, r24
    40a0:	08 95       	ret

000040a2 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	80 93 61 06 	sts	0x0661, r24
    40a8:	08 95       	ret

000040aa <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    40aa:	80 e1       	ldi	r24, 0x10	; 16
    40ac:	80 93 61 06 	sts	0x0661, r24
    40b0:	08 95       	ret

000040b2 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    40b2:	82 e0       	ldi	r24, 0x02	; 2
    40b4:	80 93 85 06 	sts	0x0685, r24
    40b8:	08 95       	ret

000040ba <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    40ba:	82 e0       	ldi	r24, 0x02	; 2
    40bc:	80 93 86 06 	sts	0x0686, r24
    40c0:	08 95       	ret

000040c2 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    40c2:	f8 94       	cli
    40c4:	84 e6       	ldi	r24, 0x64	; 100
    40c6:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    40c8:	e0 e8       	ldi	r30, 0x80	; 128
    40ca:	f6 e0       	ldi	r31, 0x06	; 6
    40cc:	28 e0       	ldi	r18, 0x08	; 8
    40ce:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    40d0:	af e9       	ldi	r26, 0x9F	; 159
    40d2:	bf e0       	ldi	r27, 0x0F	; 15
    40d4:	11 97       	sbiw	r26, 0x01	; 1
    40d6:	f1 f7       	brne	.-4      	; 0x40d4 <_ZN11CLaserBoard4BeepEv+0x12>
    40d8:	00 c0       	rjmp	.+0      	; 0x40da <_ZN11CLaserBoard4BeepEv+0x18>
    40da:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    40dc:	26 83       	std	Z+6, r18	; 0x06
    40de:	af e9       	ldi	r26, 0x9F	; 159
    40e0:	bf e0       	ldi	r27, 0x0F	; 15
    40e2:	11 97       	sbiw	r26, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <_ZN11CLaserBoard4BeepEv+0x20>
    40e6:	00 c0       	rjmp	.+0      	; 0x40e8 <_ZN11CLaserBoard4BeepEv+0x26>
    40e8:	00 00       	nop
    40ea:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    40ec:	81 f7       	brne	.-32     	; 0x40ce <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    40ee:	78 94       	sei
    40f0:	08 95       	ret

000040f2 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    40f2:	f8 94       	cli
    40f4:	45 e0       	ldi	r20, 0x05	; 5
    40f6:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    40f8:	64 e6       	ldi	r22, 0x64	; 100
    40fa:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    40fc:	e0 e8       	ldi	r30, 0x80	; 128
    40fe:	f6 e0       	ldi	r31, 0x06	; 6
    4100:	28 e0       	ldi	r18, 0x08	; 8
    4102:	1c c0       	rjmp	.+56     	; 0x413c <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    4104:	25 83       	std	Z+5, r18	; 0x05
    4106:	af e9       	ldi	r26, 0x9F	; 159
    4108:	bf e0       	ldi	r27, 0x0F	; 15
    410a:	11 97       	sbiw	r26, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    410e:	00 c0       	rjmp	.+0      	; 0x4110 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    4110:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    4112:	26 83       	std	Z+6, r18	; 0x06
    4114:	af e9       	ldi	r26, 0x9F	; 159
    4116:	bf e0       	ldi	r27, 0x0F	; 15
    4118:	11 97       	sbiw	r26, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    411c:	00 c0       	rjmp	.+0      	; 0x411e <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    411e:	00 00       	nop
    4120:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    4122:	81 f7       	brne	.-32     	; 0x4104 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4124:	bf ef       	ldi	r27, 0xFF	; 255
    4126:	73 ec       	ldi	r23, 0xC3	; 195
    4128:	89 e0       	ldi	r24, 0x09	; 9
    412a:	b1 50       	subi	r27, 0x01	; 1
    412c:	70 40       	sbci	r23, 0x00	; 0
    412e:	80 40       	sbci	r24, 0x00	; 0
    4130:	e1 f7       	brne	.-8      	; 0x412a <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    4132:	00 c0       	rjmp	.+0      	; 0x4134 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    4134:	00 00       	nop
    4136:	41 50       	subi	r20, 0x01	; 1
    4138:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    413a:	19 f0       	breq	.+6      	; 0x4142 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    413c:	86 2f       	mov	r24, r22
    413e:	93 2f       	mov	r25, r19
    4140:	e1 cf       	rjmp	.-62     	; 0x4104 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    4142:	78 94       	sei
    4144:	08 95       	ret

00004146 <_ZN11CLaserBoard9PortCheckEv>:
}

void CLaserBoard::PortCheck()
{
    4146:	cf 93       	push	r28
    4148:	dc 01       	movw	r26, r24
	uint8_t inport = PORTC.IN;
    414a:	60 91 48 06 	lds	r22, 0x0648
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
		}
		
		if (PIN_Cnt[i] > PINThreshold)
    414e:	18 96       	adiw	r26, 0x08	; 8
    4150:	3c 91       	ld	r19, X
    4152:	18 97       	sbiw	r26, 0x08	; 8
    4154:	fc 01       	movw	r30, r24
    4156:	ac 01       	movw	r20, r24
    4158:	48 5f       	subi	r20, 0xF8	; 248
    415a:	5f 4f       	sbci	r21, 0xFF	; 255
}

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
    415c:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			PIN_Cnt[i]--;
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
    415e:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
    4160:	70 e8       	ldi	r23, 0x80	; 128
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
    4162:	89 2f       	mov	r24, r25
    4164:	86 23       	and	r24, r22
    4166:	41 f0       	breq	.+16     	; 0x4178 <_ZN11CLaserBoard9PortCheckEv+0x32>
		{
			PIN_Cnt[i]++;
    4168:	80 81       	ld	r24, Z
    416a:	8f 5f       	subi	r24, 0xFF	; 255
			if (PIN_Cnt[i] > 128)
    416c:	81 38       	cpi	r24, 0x81	; 129
    416e:	10 f4       	brcc	.+4      	; 0x4174 <_ZN11CLaserBoard9PortCheckEv+0x2e>
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
	{
		if (inport & bitpos)
		{
			PIN_Cnt[i]++;
    4170:	80 83       	st	Z, r24
    4172:	08 c0       	rjmp	.+16     	; 0x4184 <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
    4174:	70 83       	st	Z, r23
    4176:	06 c0       	rjmp	.+12     	; 0x4184 <_ZN11CLaserBoard9PortCheckEv+0x3e>
		}
		else
		{
			PIN_Cnt[i]--;
    4178:	80 81       	ld	r24, Z
    417a:	81 50       	subi	r24, 0x01	; 1
			if (PIN_Cnt[i] < 1)
    417c:	11 f0       	breq	.+4      	; 0x4182 <_ZN11CLaserBoard9PortCheckEv+0x3c>
			if (PIN_Cnt[i] > 128)
				PIN_Cnt[i] = 128;
		}
		else
		{
			PIN_Cnt[i]--;
    417e:	80 83       	st	Z, r24
    4180:	01 c0       	rjmp	.+2      	; 0x4184 <_ZN11CLaserBoard9PortCheckEv+0x3e>
			if (PIN_Cnt[i] < 1)
				PIN_Cnt[i] = 1;
    4182:	c0 83       	st	Z, r28
		}
		
		if (PIN_Cnt[i] > PINThreshold)
    4184:	81 91       	ld	r24, Z+
    4186:	38 17       	cp	r19, r24
    4188:	40 f4       	brcc	.+16     	; 0x419a <_ZN11CLaserBoard9PortCheckEv+0x54>
			Port |= bitpos;
    418a:	19 96       	adiw	r26, 0x09	; 9
    418c:	8c 91       	ld	r24, X
    418e:	19 97       	sbiw	r26, 0x09	; 9
    4190:	89 2b       	or	r24, r25
    4192:	19 96       	adiw	r26, 0x09	; 9
    4194:	8c 93       	st	X, r24
    4196:	19 97       	sbiw	r26, 0x09	; 9
    4198:	09 c0       	rjmp	.+18     	; 0x41ac <_ZN11CLaserBoard9PortCheckEv+0x66>
		else
			Port &= ~bitpos;
    419a:	19 96       	adiw	r26, 0x09	; 9
    419c:	8c 91       	ld	r24, X
    419e:	19 97       	sbiw	r26, 0x09	; 9
    41a0:	29 2f       	mov	r18, r25
    41a2:	20 95       	com	r18
    41a4:	28 23       	and	r18, r24
    41a6:	19 96       	adiw	r26, 0x09	; 9
    41a8:	2c 93       	st	X, r18
    41aa:	19 97       	sbiw	r26, 0x09	; 9
		
		bitpos <<= 1;
    41ac:	99 0f       	add	r25, r25

void CLaserBoard::PortCheck()
{
	uint8_t inport = PORTC.IN;
	uint8_t bitpos = 1;
	for (uint8_t i = 0; i < 8; i++)
    41ae:	e4 17       	cp	r30, r20
    41b0:	f5 07       	cpc	r31, r21
    41b2:	b9 f6       	brne	.-82     	; 0x4162 <_ZN11CLaserBoard9PortCheckEv+0x1c>
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}
}
    41b4:	cf 91       	pop	r28
    41b6:	08 95       	ret

000041b8 <_ZN11CLaserBoard10FootswitchEv>:

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    41b8:	fc 01       	movw	r30, r24
    41ba:	81 85       	ldd	r24, Z+9	; 0x09
    41bc:	81 70       	andi	r24, 0x01	; 1
    41be:	08 95       	ret

000041c0 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    41c0:	08 95       	ret

000041c2 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    41c2:	08 95       	ret

000041c4 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    41c4:	e0 e0       	ldi	r30, 0x00	; 0
    41c6:	fa e0       	ldi	r31, 0x0A	; 10
    41c8:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    41ca:	87 e8       	ldi	r24, 0x87	; 135
    41cc:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    41ce:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    41d0:	84 e2       	ldi	r24, 0x24	; 36
    41d2:	94 ef       	ldi	r25, 0xF4	; 244
    41d4:	86 a3       	std	Z+38, r24	; 0x26
    41d6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    41d8:	82 e1       	ldi	r24, 0x12	; 18
    41da:	9a e7       	ldi	r25, 0x7A	; 122
    41dc:	86 a7       	std	Z+46, r24	; 0x2e
    41de:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    41e0:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    41e2:	17 82       	std	Z+7, r1	; 0x07
    41e4:	08 95       	ret

000041e6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    41e6:	e0 e4       	ldi	r30, 0x40	; 64
    41e8:	fa e0       	ldi	r31, 0x0A	; 10
    41ea:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    41ec:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    41ee:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    41f0:	84 e2       	ldi	r24, 0x24	; 36
    41f2:	94 ef       	ldi	r25, 0xF4	; 244
    41f4:	86 a3       	std	Z+38, r24	; 0x26
    41f6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    41f8:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    41fa:	17 82       	std	Z+7, r1	; 0x07
    41fc:	08 95       	ret

000041fe <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    41fe:	0f 93       	push	r16
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	8a 01       	movw	r16, r20
    4206:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    4208:	9b 01       	movw	r18, r22
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	64 e2       	ldi	r22, 0x24	; 36
    4210:	74 ef       	ldi	r23, 0xF4	; 244
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    421a:	b8 01       	movw	r22, r16
    421c:	76 95       	lsr	r23
    421e:	67 95       	ror	r22
    4220:	ee e3       	ldi	r30, 0x3E	; 62
    4222:	e0 9f       	mul	r30, r16
    4224:	c0 01       	movw	r24, r0
    4226:	e1 9f       	mul	r30, r17
    4228:	90 0d       	add	r25, r0
    422a:	11 24       	eor	r1, r1
    422c:	86 0f       	add	r24, r22
    422e:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    4230:	cf 5f       	subi	r28, 0xFF	; 255
    4232:	b9 01       	movw	r22, r18
    4234:	02 c0       	rjmp	.+4      	; 0x423a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    4236:	76 95       	lsr	r23
    4238:	67 95       	ror	r22
    423a:	ca 95       	dec	r28
    423c:	e2 f7       	brpl	.-8      	; 0x4236 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    423e:	e0 e0       	ldi	r30, 0x00	; 0
    4240:	fa e0       	ldi	r31, 0x0A	; 10
    4242:	66 a7       	std	Z+46, r22	; 0x2e
    4244:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    4246:	26 a3       	std	Z+38, r18	; 0x26
    4248:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    424a:	a0 e4       	ldi	r26, 0x40	; 64
    424c:	ba e0       	ldi	r27, 0x0A	; 10
    424e:	96 96       	adiw	r26, 0x26	; 38
    4250:	8d 93       	st	X+, r24
    4252:	9c 93       	st	X, r25
    4254:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    4256:	86 e0       	ldi	r24, 0x06	; 6
    4258:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    425a:	87 e0       	ldi	r24, 0x07	; 7
    425c:	8c 93       	st	X, r24
}
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	0f 91       	pop	r16
    4264:	08 95       	ret

00004266 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    4266:	e0 e4       	ldi	r30, 0x40	; 64
    4268:	fa e0       	ldi	r31, 0x0A	; 10
    426a:	84 85       	ldd	r24, Z+12	; 0x0c
    426c:	80 ff       	sbrs	r24, 0
    426e:	fd cf       	rjmp	.-6      	; 0x426a <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    4270:	e0 e4       	ldi	r30, 0x40	; 64
    4272:	fa e0       	ldi	r31, 0x0A	; 10
    4274:	84 85       	ldd	r24, Z+12	; 0x0c
    4276:	81 70       	andi	r24, 0x01	; 1
    4278:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    427a:	a0 e0       	ldi	r26, 0x00	; 0
    427c:	ba e0       	ldi	r27, 0x0A	; 10
    427e:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    4280:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    4282:	10 a2       	std	Z+32, r1	; 0x20
    4284:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    4286:	90 96       	adiw	r26, 0x20	; 32
    4288:	1d 92       	st	X+, r1
    428a:	1c 92       	st	X, r1
    428c:	91 97       	sbiw	r26, 0x21	; 33
    428e:	2f ef       	ldi	r18, 0xFF	; 255
    4290:	83 ef       	ldi	r24, 0xF3	; 243
    4292:	91 e0       	ldi	r25, 0x01	; 1
    4294:	21 50       	subi	r18, 0x01	; 1
    4296:	80 40       	sbci	r24, 0x00	; 0
    4298:	90 40       	sbci	r25, 0x00	; 0
    429a:	e1 f7       	brne	.-8      	; 0x4294 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    429c:	00 c0       	rjmp	.+0      	; 0x429e <_ZN12CSoundPlayer9SoundStopEv+0x38>
    429e:	00 00       	nop
    42a0:	08 95       	ret

000042a2 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    42a8:	23 e0       	ldi	r18, 0x03	; 3
    42aa:	0e 94 ff 20 	call	0x41fe	; 0x41fe <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    42ae:	ce 01       	movw	r24, r28
    42b0:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN12CSoundPlayer9SoundStopEv>
}
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	08 95       	ret

000042ba <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    42c0:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    42c4:	ce 01       	movw	r24, r28
    42c6:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	08 95       	ret

000042d0 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	ec 01       	movw	r28, r24
	cli();
    42d6:	f8 94       	cli

	beep(a, 500);
    42d8:	44 ef       	ldi	r20, 0xF4	; 244
    42da:	51 e0       	ldi	r21, 0x01	; 1
    42dc:	68 eb       	ldi	r22, 0xB8	; 184
    42de:	71 e0       	ldi	r23, 0x01	; 1
    42e0:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    42e4:	44 ef       	ldi	r20, 0xF4	; 244
    42e6:	51 e0       	ldi	r21, 0x01	; 1
    42e8:	68 eb       	ldi	r22, 0xB8	; 184
    42ea:	71 e0       	ldi	r23, 0x01	; 1
    42ec:	ce 01       	movw	r24, r28
    42ee:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    42f2:	44 ef       	ldi	r20, 0xF4	; 244
    42f4:	51 e0       	ldi	r21, 0x01	; 1
    42f6:	68 eb       	ldi	r22, 0xB8	; 184
    42f8:	71 e0       	ldi	r23, 0x01	; 1
    42fa:	ce 01       	movw	r24, r28
    42fc:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    4300:	4e e5       	ldi	r20, 0x5E	; 94
    4302:	51 e0       	ldi	r21, 0x01	; 1
    4304:	6d e5       	ldi	r22, 0x5D	; 93
    4306:	71 e0       	ldi	r23, 0x01	; 1
    4308:	ce 01       	movw	r24, r28
    430a:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    430e:	46 e9       	ldi	r20, 0x96	; 150
    4310:	50 e0       	ldi	r21, 0x00	; 0
    4312:	6b e0       	ldi	r22, 0x0B	; 11
    4314:	72 e0       	ldi	r23, 0x02	; 2
    4316:	ce 01       	movw	r24, r28
    4318:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    431c:	44 ef       	ldi	r20, 0xF4	; 244
    431e:	51 e0       	ldi	r21, 0x01	; 1
    4320:	68 eb       	ldi	r22, 0xB8	; 184
    4322:	71 e0       	ldi	r23, 0x01	; 1
    4324:	ce 01       	movw	r24, r28
    4326:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    432a:	4e e5       	ldi	r20, 0x5E	; 94
    432c:	51 e0       	ldi	r21, 0x01	; 1
    432e:	6d e5       	ldi	r22, 0x5D	; 93
    4330:	71 e0       	ldi	r23, 0x01	; 1
    4332:	ce 01       	movw	r24, r28
    4334:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    4338:	46 e9       	ldi	r20, 0x96	; 150
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	6b e0       	ldi	r22, 0x0B	; 11
    433e:	72 e0       	ldi	r23, 0x02	; 2
    4340:	ce 01       	movw	r24, r28
    4342:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    4346:	4a e8       	ldi	r20, 0x8A	; 138
    4348:	52 e0       	ldi	r21, 0x02	; 2
    434a:	68 eb       	ldi	r22, 0xB8	; 184
    434c:	71 e0       	ldi	r23, 0x01	; 1
    434e:	ce 01       	movw	r24, r28
    4350:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN12CSoundPlayer4beepEjj>
    4354:	2f ef       	ldi	r18, 0xFF	; 255
    4356:	85 ea       	ldi	r24, 0xA5	; 165
    4358:	9e e0       	ldi	r25, 0x0E	; 14
    435a:	21 50       	subi	r18, 0x01	; 1
    435c:	80 40       	sbci	r24, 0x00	; 0
    435e:	90 40       	sbci	r25, 0x00	; 0
    4360:	e1 f7       	brne	.-8      	; 0x435a <_ZN12CSoundPlayer4PlayEv+0x8a>
    4362:	00 c0       	rjmp	.+0      	; 0x4364 <_ZN12CSoundPlayer4PlayEv+0x94>
    4364:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    4366:	78 94       	sei
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	08 95       	ret

0000436e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    436e:	fc 01       	movw	r30, r24
    4370:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4372:	e0 e0       	ldi	r30, 0x00	; 0
    4374:	f8 e0       	ldi	r31, 0x08	; 8
    4376:	80 81       	ld	r24, Z
    4378:	80 7f       	andi	r24, 0xF0	; 240
    437a:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    437c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    437e:	10 a2       	std	Z+32, r1	; 0x20
    4380:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    4382:	10 a6       	std	Z+40, r1	; 0x28
    4384:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    4386:	12 a6       	std	Z+42, r1	; 0x2a
    4388:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    438a:	14 a6       	std	Z+44, r1	; 0x2c
    438c:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    438e:	16 a6       	std	Z+46, r1	; 0x2e
    4390:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    4392:	16 a2       	std	Z+38, r1	; 0x26
    4394:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    4396:	81 81       	ldd	r24, Z+1	; 0x01
    4398:	88 7f       	andi	r24, 0xF8	; 248
    439a:	68 2b       	or	r22, r24
    439c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    439e:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    43a0:	17 82       	std	Z+7, r1	; 0x07
    43a2:	08 95       	ret

000043a4 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    43a4:	e0 e0       	ldi	r30, 0x00	; 0
    43a6:	f8 e0       	ldi	r31, 0x08	; 8
    43a8:	66 a3       	std	Z+38, r22	; 0x26
    43aa:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    43ac:	20 81       	ld	r18, Z
    43ae:	20 7f       	andi	r18, 0xF0	; 240
    43b0:	dc 01       	movw	r26, r24
    43b2:	12 96       	adiw	r26, 0x02	; 2
    43b4:	9c 91       	ld	r25, X
    43b6:	82 2f       	mov	r24, r18
    43b8:	89 2b       	or	r24, r25
    43ba:	80 83       	st	Z, r24
    43bc:	08 95       	ret

000043be <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    43be:	e0 e0       	ldi	r30, 0x00	; 0
    43c0:	f8 e0       	ldi	r31, 0x08	; 8
    43c2:	80 81       	ld	r24, Z
    43c4:	80 7f       	andi	r24, 0xF0	; 240
    43c6:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    43c8:	10 a2       	std	Z+32, r1	; 0x20
    43ca:	11 a2       	std	Z+33, r1	; 0x21
    43cc:	08 95       	ret

000043ce <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    43ce:	e0 e0       	ldi	r30, 0x00	; 0
    43d0:	f8 e0       	ldi	r31, 0x08	; 8
    43d2:	81 81       	ldd	r24, Z+1	; 0x01
    43d4:	8f 70       	andi	r24, 0x0F	; 15
    43d6:	68 2b       	or	r22, r24
    43d8:	61 83       	std	Z+1, r22	; 0x01
    43da:	08 95       	ret

000043dc <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    43dc:	e0 e0       	ldi	r30, 0x00	; 0
    43de:	f8 e0       	ldi	r31, 0x08	; 8
    43e0:	81 81       	ldd	r24, Z+1	; 0x01
    43e2:	60 95       	com	r22
    43e4:	68 23       	and	r22, r24
    43e6:	61 83       	std	Z+1, r22	; 0x01
    43e8:	08 95       	ret

000043ea <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    43ea:	60 93 26 08 	sts	0x0826, r22
    43ee:	70 93 27 08 	sts	0x0827, r23
    43f2:	08 95       	ret

000043f4 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    43f4:	60 93 28 08 	sts	0x0828, r22
    43f8:	70 93 29 08 	sts	0x0829, r23
    43fc:	08 95       	ret

000043fe <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    43fe:	60 93 2a 08 	sts	0x082A, r22
    4402:	70 93 2b 08 	sts	0x082B, r23
    4406:	08 95       	ret

00004408 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    4408:	60 93 2c 08 	sts	0x082C, r22
    440c:	70 93 2d 08 	sts	0x082D, r23
    4410:	08 95       	ret

00004412 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    4412:	60 93 2e 08 	sts	0x082E, r22
    4416:	70 93 2f 08 	sts	0x082F, r23
    441a:	08 95       	ret

0000441c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    441c:	61 15       	cp	r22, r1
    441e:	71 05       	cpc	r23, r1
    4420:	31 f0       	breq	.+12     	; 0x442e <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    4422:	e0 e0       	ldi	r30, 0x00	; 0
    4424:	f8 e0       	ldi	r31, 0x08	; 8
    4426:	86 81       	ldd	r24, Z+6	; 0x06
    4428:	83 70       	andi	r24, 0x03	; 3
    442a:	28 2b       	or	r18, r24
    442c:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    442e:	60 93 89 21 	sts	0x2189, r22
    4432:	70 93 8a 21 	sts	0x218A, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    4436:	40 93 7f 22 	sts	0x227F, r20
    443a:	50 93 80 22 	sts	0x2280, r21
    443e:	08 95       	ret

00004440 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    4440:	61 15       	cp	r22, r1
    4442:	71 05       	cpc	r23, r1
    4444:	31 f0       	breq	.+12     	; 0x4452 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    4446:	e0 e0       	ldi	r30, 0x00	; 0
    4448:	f8 e0       	ldi	r31, 0x08	; 8
    444a:	86 81       	ldd	r24, Z+6	; 0x06
    444c:	8c 70       	andi	r24, 0x0C	; 12
    444e:	28 2b       	or	r18, r24
    4450:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    4452:	60 93 8b 21 	sts	0x218B, r22
    4456:	70 93 8c 21 	sts	0x218C, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    445a:	40 93 81 22 	sts	0x2281, r20
    445e:	50 93 82 22 	sts	0x2282, r21
    4462:	08 95       	ret

00004464 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    4464:	61 15       	cp	r22, r1
    4466:	71 05       	cpc	r23, r1
    4468:	31 f0       	breq	.+12     	; 0x4476 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    446a:	e0 e0       	ldi	r30, 0x00	; 0
    446c:	f8 e0       	ldi	r31, 0x08	; 8
    446e:	87 81       	ldd	r24, Z+7	; 0x07
    4470:	83 70       	andi	r24, 0x03	; 3
    4472:	28 2b       	or	r18, r24
    4474:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    4476:	60 93 8d 21 	sts	0x218D, r22
    447a:	70 93 8e 21 	sts	0x218E, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    447e:	40 93 83 22 	sts	0x2283, r20
    4482:	50 93 84 22 	sts	0x2284, r21
    4486:	08 95       	ret

00004488 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    4488:	61 15       	cp	r22, r1
    448a:	71 05       	cpc	r23, r1
    448c:	31 f0       	breq	.+12     	; 0x449a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    448e:	e0 e0       	ldi	r30, 0x00	; 0
    4490:	f8 e0       	ldi	r31, 0x08	; 8
    4492:	87 81       	ldd	r24, Z+7	; 0x07
    4494:	8c 70       	andi	r24, 0x0C	; 12
    4496:	28 2b       	or	r18, r24
    4498:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    449a:	60 93 8f 21 	sts	0x218F, r22
    449e:	70 93 90 21 	sts	0x2190, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    44a2:	40 93 85 22 	sts	0x2285, r20
    44a6:	50 93 86 22 	sts	0x2286, r21
    44aa:	08 95       	ret

000044ac <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    44ac:	61 15       	cp	r22, r1
    44ae:	71 05       	cpc	r23, r1
    44b0:	31 f0       	breq	.+12     	; 0x44be <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    44b2:	e0 e0       	ldi	r30, 0x00	; 0
    44b4:	f8 e0       	ldi	r31, 0x08	; 8
    44b6:	87 81       	ldd	r24, Z+7	; 0x07
    44b8:	80 73       	andi	r24, 0x30	; 48
    44ba:	28 2b       	or	r18, r24
    44bc:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    44be:	60 93 91 21 	sts	0x2191, r22
    44c2:	70 93 92 21 	sts	0x2192, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    44c6:	40 93 87 22 	sts	0x2287, r20
    44ca:	50 93 88 22 	sts	0x2288, r21
    44ce:	08 95       	ret

000044d0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    44d0:	61 15       	cp	r22, r1
    44d2:	71 05       	cpc	r23, r1
    44d4:	31 f0       	breq	.+12     	; 0x44e2 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    44d6:	e0 e0       	ldi	r30, 0x00	; 0
    44d8:	f8 e0       	ldi	r31, 0x08	; 8
    44da:	87 81       	ldd	r24, Z+7	; 0x07
    44dc:	80 7c       	andi	r24, 0xC0	; 192
    44de:	28 2b       	or	r18, r24
    44e0:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    44e2:	60 93 93 21 	sts	0x2193, r22
    44e6:	70 93 94 21 	sts	0x2194, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    44ea:	40 93 89 22 	sts	0x2289, r20
    44ee:	50 93 8a 22 	sts	0x228A, r21
    44f2:	08 95       	ret

000044f4 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	ec 01       	movw	r28, r24
    44fa:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6CTimerC1Ev>
    44fe:	8a ec       	ldi	r24, 0xCA	; 202
    4500:	90 e2       	ldi	r25, 0x20	; 32
    4502:	88 83       	st	Y, r24
    4504:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	08 95       	ret

0000450c <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    450c:	2a ec       	ldi	r18, 0xCA	; 202
    450e:	30 e2       	ldi	r19, 0x20	; 32
    4510:	fc 01       	movw	r30, r24
    4512:	20 83       	st	Z, r18
    4514:	31 83       	std	Z+1, r19	; 0x01
    4516:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN6CTimerD1Ev>
    451a:	08 95       	ret

0000451c <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    451c:	fc 01       	movw	r30, r24
    451e:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    4520:	e0 e0       	ldi	r30, 0x00	; 0
    4522:	f9 e0       	ldi	r31, 0x09	; 9
    4524:	80 81       	ld	r24, Z
    4526:	80 7f       	andi	r24, 0xF0	; 240
    4528:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    452a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    452c:	10 a2       	std	Z+32, r1	; 0x20
    452e:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    4530:	10 a6       	std	Z+40, r1	; 0x28
    4532:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    4534:	12 a6       	std	Z+42, r1	; 0x2a
    4536:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    4538:	14 a6       	std	Z+44, r1	; 0x2c
    453a:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    453c:	16 a6       	std	Z+46, r1	; 0x2e
    453e:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    4540:	16 a2       	std	Z+38, r1	; 0x26
    4542:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    4544:	81 81       	ldd	r24, Z+1	; 0x01
    4546:	88 7f       	andi	r24, 0xF8	; 248
    4548:	68 2b       	or	r22, r24
    454a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    454c:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    454e:	17 82       	std	Z+7, r1	; 0x07
    4550:	08 95       	ret

00004552 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    4552:	e0 e0       	ldi	r30, 0x00	; 0
    4554:	f9 e0       	ldi	r31, 0x09	; 9
    4556:	66 a3       	std	Z+38, r22	; 0x26
    4558:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    455a:	20 81       	ld	r18, Z
    455c:	20 7f       	andi	r18, 0xF0	; 240
    455e:	dc 01       	movw	r26, r24
    4560:	12 96       	adiw	r26, 0x02	; 2
    4562:	9c 91       	ld	r25, X
    4564:	82 2f       	mov	r24, r18
    4566:	89 2b       	or	r24, r25
    4568:	80 83       	st	Z, r24
    456a:	08 95       	ret

0000456c <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    456c:	e0 e0       	ldi	r30, 0x00	; 0
    456e:	f9 e0       	ldi	r31, 0x09	; 9
    4570:	80 81       	ld	r24, Z
    4572:	80 7f       	andi	r24, 0xF0	; 240
    4574:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    4576:	10 a2       	std	Z+32, r1	; 0x20
    4578:	11 a2       	std	Z+33, r1	; 0x21
    457a:	08 95       	ret

0000457c <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    457c:	e0 e0       	ldi	r30, 0x00	; 0
    457e:	f9 e0       	ldi	r31, 0x09	; 9
    4580:	81 81       	ldd	r24, Z+1	; 0x01
    4582:	8f 70       	andi	r24, 0x0F	; 15
    4584:	68 2b       	or	r22, r24
    4586:	61 83       	std	Z+1, r22	; 0x01
    4588:	08 95       	ret

0000458a <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    458a:	e0 e0       	ldi	r30, 0x00	; 0
    458c:	f9 e0       	ldi	r31, 0x09	; 9
    458e:	81 81       	ldd	r24, Z+1	; 0x01
    4590:	60 95       	com	r22
    4592:	68 23       	and	r22, r24
    4594:	61 83       	std	Z+1, r22	; 0x01
    4596:	08 95       	ret

00004598 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    4598:	60 93 26 09 	sts	0x0926, r22
    459c:	70 93 27 09 	sts	0x0927, r23
    45a0:	08 95       	ret

000045a2 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    45a2:	60 93 28 09 	sts	0x0928, r22
    45a6:	70 93 29 09 	sts	0x0929, r23
    45aa:	08 95       	ret

000045ac <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    45ac:	60 93 2a 09 	sts	0x092A, r22
    45b0:	70 93 2b 09 	sts	0x092B, r23
    45b4:	08 95       	ret

000045b6 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    45b6:	60 93 2c 09 	sts	0x092C, r22
    45ba:	70 93 2d 09 	sts	0x092D, r23
    45be:	08 95       	ret

000045c0 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    45c0:	60 93 2e 09 	sts	0x092E, r22
    45c4:	70 93 2f 09 	sts	0x092F, r23
    45c8:	08 95       	ret

000045ca <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    45ca:	61 15       	cp	r22, r1
    45cc:	71 05       	cpc	r23, r1
    45ce:	31 f0       	breq	.+12     	; 0x45dc <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    45d0:	e0 e0       	ldi	r30, 0x00	; 0
    45d2:	f9 e0       	ldi	r31, 0x09	; 9
    45d4:	86 81       	ldd	r24, Z+6	; 0x06
    45d6:	83 70       	andi	r24, 0x03	; 3
    45d8:	28 2b       	or	r18, r24
    45da:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    45dc:	60 93 07 22 	sts	0x2207, r22
    45e0:	70 93 08 22 	sts	0x2208, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    45e4:	40 93 fd 22 	sts	0x22FD, r20
    45e8:	50 93 fe 22 	sts	0x22FE, r21
    45ec:	08 95       	ret

000045ee <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    45ee:	61 15       	cp	r22, r1
    45f0:	71 05       	cpc	r23, r1
    45f2:	31 f0       	breq	.+12     	; 0x4600 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    45f4:	e0 e0       	ldi	r30, 0x00	; 0
    45f6:	f9 e0       	ldi	r31, 0x09	; 9
    45f8:	86 81       	ldd	r24, Z+6	; 0x06
    45fa:	8c 70       	andi	r24, 0x0C	; 12
    45fc:	28 2b       	or	r18, r24
    45fe:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    4600:	60 93 09 22 	sts	0x2209, r22
    4604:	70 93 0a 22 	sts	0x220A, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    4608:	40 93 ff 22 	sts	0x22FF, r20
    460c:	50 93 00 23 	sts	0x2300, r21
    4610:	08 95       	ret

00004612 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    4612:	61 15       	cp	r22, r1
    4614:	71 05       	cpc	r23, r1
    4616:	31 f0       	breq	.+12     	; 0x4624 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    4618:	e0 e0       	ldi	r30, 0x00	; 0
    461a:	f9 e0       	ldi	r31, 0x09	; 9
    461c:	87 81       	ldd	r24, Z+7	; 0x07
    461e:	83 70       	andi	r24, 0x03	; 3
    4620:	28 2b       	or	r18, r24
    4622:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    4624:	60 93 0b 22 	sts	0x220B, r22
    4628:	70 93 0c 22 	sts	0x220C, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    462c:	40 93 01 23 	sts	0x2301, r20
    4630:	50 93 02 23 	sts	0x2302, r21
    4634:	08 95       	ret

00004636 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    4636:	61 15       	cp	r22, r1
    4638:	71 05       	cpc	r23, r1
    463a:	31 f0       	breq	.+12     	; 0x4648 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    463c:	e0 e0       	ldi	r30, 0x00	; 0
    463e:	f9 e0       	ldi	r31, 0x09	; 9
    4640:	87 81       	ldd	r24, Z+7	; 0x07
    4642:	8c 70       	andi	r24, 0x0C	; 12
    4644:	28 2b       	or	r18, r24
    4646:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    4648:	60 93 0d 22 	sts	0x220D, r22
    464c:	70 93 0e 22 	sts	0x220E, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    4650:	40 93 03 23 	sts	0x2303, r20
    4654:	50 93 04 23 	sts	0x2304, r21
    4658:	08 95       	ret

0000465a <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    465a:	61 15       	cp	r22, r1
    465c:	71 05       	cpc	r23, r1
    465e:	31 f0       	breq	.+12     	; 0x466c <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    4660:	e0 e0       	ldi	r30, 0x00	; 0
    4662:	f9 e0       	ldi	r31, 0x09	; 9
    4664:	87 81       	ldd	r24, Z+7	; 0x07
    4666:	80 73       	andi	r24, 0x30	; 48
    4668:	28 2b       	or	r18, r24
    466a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    466c:	60 93 0f 22 	sts	0x220F, r22
    4670:	70 93 10 22 	sts	0x2210, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    4674:	40 93 05 23 	sts	0x2305, r20
    4678:	50 93 06 23 	sts	0x2306, r21
    467c:	08 95       	ret

0000467e <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    467e:	61 15       	cp	r22, r1
    4680:	71 05       	cpc	r23, r1
    4682:	31 f0       	breq	.+12     	; 0x4690 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    4684:	e0 e0       	ldi	r30, 0x00	; 0
    4686:	f9 e0       	ldi	r31, 0x09	; 9
    4688:	87 81       	ldd	r24, Z+7	; 0x07
    468a:	80 7c       	andi	r24, 0xC0	; 192
    468c:	28 2b       	or	r18, r24
    468e:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    4690:	60 93 11 22 	sts	0x2211, r22
    4694:	70 93 12 22 	sts	0x2212, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    4698:	40 93 07 23 	sts	0x2307, r20
    469c:	50 93 08 23 	sts	0x2308, r21
    46a0:	08 95       	ret

000046a2 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	ec 01       	movw	r28, r24
    46a8:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6CTimerC1Ev>
    46ac:	8e ee       	ldi	r24, 0xEE	; 238
    46ae:	90 e2       	ldi	r25, 0x20	; 32
    46b0:	88 83       	st	Y, r24
    46b2:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	08 95       	ret

000046ba <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    46ba:	2e ee       	ldi	r18, 0xEE	; 238
    46bc:	30 e2       	ldi	r19, 0x20	; 32
    46be:	fc 01       	movw	r30, r24
    46c0:	20 83       	st	Z, r18
    46c2:	31 83       	std	Z+1, r19	; 0x01
    46c4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN6CTimerD1Ev>
    46c8:	08 95       	ret

000046ca <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    46ca:	fc 01       	movw	r30, r24
    46cc:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    46ce:	e0 e0       	ldi	r30, 0x00	; 0
    46d0:	fb e0       	ldi	r31, 0x0B	; 11
    46d2:	80 81       	ld	r24, Z
    46d4:	80 7f       	andi	r24, 0xF0	; 240
    46d6:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    46d8:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    46da:	10 a2       	std	Z+32, r1	; 0x20
    46dc:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    46de:	10 a6       	std	Z+40, r1	; 0x28
    46e0:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    46e2:	12 a6       	std	Z+42, r1	; 0x2a
    46e4:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    46e6:	14 a6       	std	Z+44, r1	; 0x2c
    46e8:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    46ea:	16 a6       	std	Z+46, r1	; 0x2e
    46ec:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    46ee:	16 a2       	std	Z+38, r1	; 0x26
    46f0:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    46f2:	81 81       	ldd	r24, Z+1	; 0x01
    46f4:	88 7f       	andi	r24, 0xF8	; 248
    46f6:	68 2b       	or	r22, r24
    46f8:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    46fa:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    46fc:	17 82       	std	Z+7, r1	; 0x07
    46fe:	08 95       	ret

00004700 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    4700:	e0 e0       	ldi	r30, 0x00	; 0
    4702:	fb e0       	ldi	r31, 0x0B	; 11
    4704:	66 a3       	std	Z+38, r22	; 0x26
    4706:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    4708:	20 81       	ld	r18, Z
    470a:	20 7f       	andi	r18, 0xF0	; 240
    470c:	dc 01       	movw	r26, r24
    470e:	12 96       	adiw	r26, 0x02	; 2
    4710:	9c 91       	ld	r25, X
    4712:	82 2f       	mov	r24, r18
    4714:	89 2b       	or	r24, r25
    4716:	80 83       	st	Z, r24
    4718:	08 95       	ret

0000471a <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    471a:	e0 e0       	ldi	r30, 0x00	; 0
    471c:	fb e0       	ldi	r31, 0x0B	; 11
    471e:	80 81       	ld	r24, Z
    4720:	80 7f       	andi	r24, 0xF0	; 240
    4722:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    4724:	10 a2       	std	Z+32, r1	; 0x20
    4726:	11 a2       	std	Z+33, r1	; 0x21
    4728:	08 95       	ret

0000472a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    472a:	e0 e0       	ldi	r30, 0x00	; 0
    472c:	fb e0       	ldi	r31, 0x0B	; 11
    472e:	81 81       	ldd	r24, Z+1	; 0x01
    4730:	68 2b       	or	r22, r24
    4732:	61 83       	std	Z+1, r22	; 0x01
    4734:	08 95       	ret

00004736 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    4736:	e0 e0       	ldi	r30, 0x00	; 0
    4738:	fb e0       	ldi	r31, 0x0B	; 11
    473a:	81 81       	ldd	r24, Z+1	; 0x01
    473c:	60 95       	com	r22
    473e:	68 23       	and	r22, r24
    4740:	61 83       	std	Z+1, r22	; 0x01
    4742:	08 95       	ret

00004744 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    4744:	e0 e0       	ldi	r30, 0x00	; 0
    4746:	fb e0       	ldi	r31, 0x0B	; 11
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	62 95       	swap	r22
    474c:	6f 70       	andi	r22, 0x0F	; 15
    474e:	68 2b       	or	r22, r24
    4750:	62 83       	std	Z+2, r22	; 0x02
    4752:	08 95       	ret

00004754 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    4754:	e0 e0       	ldi	r30, 0x00	; 0
    4756:	fb e0       	ldi	r31, 0x0B	; 11
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	62 95       	swap	r22
    475c:	6f 70       	andi	r22, 0x0F	; 15
    475e:	60 95       	com	r22
    4760:	68 23       	and	r22, r24
    4762:	62 83       	std	Z+2, r22	; 0x02
    4764:	08 95       	ret

00004766 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    4766:	60 93 26 0b 	sts	0x0B26, r22
    476a:	70 93 27 0b 	sts	0x0B27, r23
    476e:	08 95       	ret

00004770 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    4770:	60 93 28 0b 	sts	0x0B28, r22
    4774:	70 93 29 0b 	sts	0x0B29, r23
    4778:	08 95       	ret

0000477a <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    477a:	60 93 2a 0b 	sts	0x0B2A, r22
    477e:	70 93 2b 0b 	sts	0x0B2B, r23
    4782:	08 95       	ret

00004784 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    4784:	60 93 2c 0b 	sts	0x0B2C, r22
    4788:	70 93 2d 0b 	sts	0x0B2D, r23
    478c:	08 95       	ret

0000478e <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    478e:	60 93 2e 0b 	sts	0x0B2E, r22
    4792:	70 93 2f 0b 	sts	0x0B2F, r23
    4796:	08 95       	ret

00004798 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    4798:	61 15       	cp	r22, r1
    479a:	71 05       	cpc	r23, r1
    479c:	31 f0       	breq	.+12     	; 0x47aa <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    479e:	e0 e0       	ldi	r30, 0x00	; 0
    47a0:	fb e0       	ldi	r31, 0x0B	; 11
    47a2:	86 81       	ldd	r24, Z+6	; 0x06
    47a4:	83 70       	andi	r24, 0x03	; 3
    47a6:	28 2b       	or	r18, r24
    47a8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    47aa:	60 93 45 22 	sts	0x2245, r22
    47ae:	70 93 46 22 	sts	0x2246, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    47b2:	40 93 3b 23 	sts	0x233B, r20
    47b6:	50 93 3c 23 	sts	0x233C, r21
    47ba:	08 95       	ret

000047bc <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    47bc:	61 15       	cp	r22, r1
    47be:	71 05       	cpc	r23, r1
    47c0:	31 f0       	breq	.+12     	; 0x47ce <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    47c2:	e0 e0       	ldi	r30, 0x00	; 0
    47c4:	fb e0       	ldi	r31, 0x0B	; 11
    47c6:	86 81       	ldd	r24, Z+6	; 0x06
    47c8:	8c 70       	andi	r24, 0x0C	; 12
    47ca:	28 2b       	or	r18, r24
    47cc:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    47ce:	60 93 47 22 	sts	0x2247, r22
    47d2:	70 93 48 22 	sts	0x2248, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    47d6:	40 93 3d 23 	sts	0x233D, r20
    47da:	50 93 3e 23 	sts	0x233E, r21
    47de:	08 95       	ret

000047e0 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    47e0:	61 15       	cp	r22, r1
    47e2:	71 05       	cpc	r23, r1
    47e4:	31 f0       	breq	.+12     	; 0x47f2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    47e6:	e0 e0       	ldi	r30, 0x00	; 0
    47e8:	fb e0       	ldi	r31, 0x0B	; 11
    47ea:	87 81       	ldd	r24, Z+7	; 0x07
    47ec:	83 70       	andi	r24, 0x03	; 3
    47ee:	28 2b       	or	r18, r24
    47f0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    47f2:	60 93 49 22 	sts	0x2249, r22
    47f6:	70 93 4a 22 	sts	0x224A, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    47fa:	40 93 3f 23 	sts	0x233F, r20
    47fe:	50 93 40 23 	sts	0x2340, r21
    4802:	08 95       	ret

00004804 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    4804:	61 15       	cp	r22, r1
    4806:	71 05       	cpc	r23, r1
    4808:	31 f0       	breq	.+12     	; 0x4816 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    480a:	e0 e0       	ldi	r30, 0x00	; 0
    480c:	fb e0       	ldi	r31, 0x0B	; 11
    480e:	87 81       	ldd	r24, Z+7	; 0x07
    4810:	8c 70       	andi	r24, 0x0C	; 12
    4812:	28 2b       	or	r18, r24
    4814:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    4816:	60 93 4b 22 	sts	0x224B, r22
    481a:	70 93 4c 22 	sts	0x224C, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    481e:	40 93 41 23 	sts	0x2341, r20
    4822:	50 93 42 23 	sts	0x2342, r21
    4826:	08 95       	ret

00004828 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    4828:	61 15       	cp	r22, r1
    482a:	71 05       	cpc	r23, r1
    482c:	31 f0       	breq	.+12     	; 0x483a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    482e:	e0 e0       	ldi	r30, 0x00	; 0
    4830:	fb e0       	ldi	r31, 0x0B	; 11
    4832:	87 81       	ldd	r24, Z+7	; 0x07
    4834:	80 73       	andi	r24, 0x30	; 48
    4836:	28 2b       	or	r18, r24
    4838:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    483a:	60 93 4d 22 	sts	0x224D, r22
    483e:	70 93 4e 22 	sts	0x224E, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    4842:	40 93 43 23 	sts	0x2343, r20
    4846:	50 93 44 23 	sts	0x2344, r21
    484a:	08 95       	ret

0000484c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    484c:	61 15       	cp	r22, r1
    484e:	71 05       	cpc	r23, r1
    4850:	31 f0       	breq	.+12     	; 0x485e <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    4852:	e0 e0       	ldi	r30, 0x00	; 0
    4854:	fb e0       	ldi	r31, 0x0B	; 11
    4856:	87 81       	ldd	r24, Z+7	; 0x07
    4858:	80 7c       	andi	r24, 0xC0	; 192
    485a:	28 2b       	or	r18, r24
    485c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    485e:	60 93 4f 22 	sts	0x224F, r22
    4862:	70 93 50 22 	sts	0x2250, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    4866:	40 93 45 23 	sts	0x2345, r20
    486a:	50 93 46 23 	sts	0x2346, r21
    486e:	08 95       	ret

00004870 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
    4874:	ec 01       	movw	r28, r24
    4876:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6CTimerC1Ev>
    487a:	82 e1       	ldi	r24, 0x12	; 18
    487c:	91 e2       	ldi	r25, 0x21	; 33
    487e:	88 83       	st	Y, r24
    4880:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    4882:	df 91       	pop	r29
    4884:	cf 91       	pop	r28
    4886:	08 95       	ret

00004888 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    4888:	22 e1       	ldi	r18, 0x12	; 18
    488a:	31 e2       	ldi	r19, 0x21	; 33
    488c:	fc 01       	movw	r30, r24
    488e:	20 83       	st	Z, r18
    4890:	31 83       	std	Z+1, r19	; 0x01
    4892:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN6CTimerD1Ev>
    4896:	08 95       	ret

00004898 <__udivmodhi4>:
    4898:	aa 1b       	sub	r26, r26
    489a:	bb 1b       	sub	r27, r27
    489c:	51 e1       	ldi	r21, 0x11	; 17
    489e:	07 c0       	rjmp	.+14     	; 0x48ae <__udivmodhi4_ep>

000048a0 <__udivmodhi4_loop>:
    48a0:	aa 1f       	adc	r26, r26
    48a2:	bb 1f       	adc	r27, r27
    48a4:	a6 17       	cp	r26, r22
    48a6:	b7 07       	cpc	r27, r23
    48a8:	10 f0       	brcs	.+4      	; 0x48ae <__udivmodhi4_ep>
    48aa:	a6 1b       	sub	r26, r22
    48ac:	b7 0b       	sbc	r27, r23

000048ae <__udivmodhi4_ep>:
    48ae:	88 1f       	adc	r24, r24
    48b0:	99 1f       	adc	r25, r25
    48b2:	5a 95       	dec	r21
    48b4:	a9 f7       	brne	.-22     	; 0x48a0 <__udivmodhi4_loop>
    48b6:	80 95       	com	r24
    48b8:	90 95       	com	r25
    48ba:	bc 01       	movw	r22, r24
    48bc:	cd 01       	movw	r24, r26
    48be:	08 95       	ret

000048c0 <__divmodsi4>:
    48c0:	05 2e       	mov	r0, r21
    48c2:	97 fb       	bst	r25, 7
    48c4:	1e f4       	brtc	.+6      	; 0x48cc <__divmodsi4+0xc>
    48c6:	00 94       	com	r0
    48c8:	0e 94 77 24 	call	0x48ee	; 0x48ee <__negsi2>
    48cc:	57 fd       	sbrc	r21, 7
    48ce:	07 d0       	rcall	.+14     	; 0x48de <__divmodsi4_neg2>
    48d0:	0e 94 96 24 	call	0x492c	; 0x492c <__udivmodsi4>
    48d4:	07 fc       	sbrc	r0, 7
    48d6:	03 d0       	rcall	.+6      	; 0x48de <__divmodsi4_neg2>
    48d8:	4e f4       	brtc	.+18     	; 0x48ec <__divmodsi4_exit>
    48da:	0c 94 77 24 	jmp	0x48ee	; 0x48ee <__negsi2>

000048de <__divmodsi4_neg2>:
    48de:	50 95       	com	r21
    48e0:	40 95       	com	r20
    48e2:	30 95       	com	r19
    48e4:	21 95       	neg	r18
    48e6:	3f 4f       	sbci	r19, 0xFF	; 255
    48e8:	4f 4f       	sbci	r20, 0xFF	; 255
    48ea:	5f 4f       	sbci	r21, 0xFF	; 255

000048ec <__divmodsi4_exit>:
    48ec:	08 95       	ret

000048ee <__negsi2>:
    48ee:	90 95       	com	r25
    48f0:	80 95       	com	r24
    48f2:	70 95       	com	r23
    48f4:	61 95       	neg	r22
    48f6:	7f 4f       	sbci	r23, 0xFF	; 255
    48f8:	8f 4f       	sbci	r24, 0xFF	; 255
    48fa:	9f 4f       	sbci	r25, 0xFF	; 255
    48fc:	08 95       	ret

000048fe <__tablejump2__>:
    48fe:	ee 0f       	add	r30, r30
    4900:	ff 1f       	adc	r31, r31
    4902:	88 1f       	adc	r24, r24
    4904:	8b bf       	out	0x3b, r24	; 59
    4906:	07 90       	elpm	r0, Z+
    4908:	f6 91       	elpm	r31, Z
    490a:	e0 2d       	mov	r30, r0
    490c:	19 94       	eijmp

0000490e <__umulhisi3>:
    490e:	a2 9f       	mul	r26, r18
    4910:	b0 01       	movw	r22, r0
    4912:	b3 9f       	mul	r27, r19
    4914:	c0 01       	movw	r24, r0
    4916:	a3 9f       	mul	r26, r19
    4918:	70 0d       	add	r23, r0
    491a:	81 1d       	adc	r24, r1
    491c:	11 24       	eor	r1, r1
    491e:	91 1d       	adc	r25, r1
    4920:	b2 9f       	mul	r27, r18
    4922:	70 0d       	add	r23, r0
    4924:	81 1d       	adc	r24, r1
    4926:	11 24       	eor	r1, r1
    4928:	91 1d       	adc	r25, r1
    492a:	08 95       	ret

0000492c <__udivmodsi4>:
    492c:	a1 e2       	ldi	r26, 0x21	; 33
    492e:	1a 2e       	mov	r1, r26
    4930:	aa 1b       	sub	r26, r26
    4932:	bb 1b       	sub	r27, r27
    4934:	fd 01       	movw	r30, r26
    4936:	0d c0       	rjmp	.+26     	; 0x4952 <__udivmodsi4_ep>

00004938 <__udivmodsi4_loop>:
    4938:	aa 1f       	adc	r26, r26
    493a:	bb 1f       	adc	r27, r27
    493c:	ee 1f       	adc	r30, r30
    493e:	ff 1f       	adc	r31, r31
    4940:	a2 17       	cp	r26, r18
    4942:	b3 07       	cpc	r27, r19
    4944:	e4 07       	cpc	r30, r20
    4946:	f5 07       	cpc	r31, r21
    4948:	20 f0       	brcs	.+8      	; 0x4952 <__udivmodsi4_ep>
    494a:	a2 1b       	sub	r26, r18
    494c:	b3 0b       	sbc	r27, r19
    494e:	e4 0b       	sbc	r30, r20
    4950:	f5 0b       	sbc	r31, r21

00004952 <__udivmodsi4_ep>:
    4952:	66 1f       	adc	r22, r22
    4954:	77 1f       	adc	r23, r23
    4956:	88 1f       	adc	r24, r24
    4958:	99 1f       	adc	r25, r25
    495a:	1a 94       	dec	r1
    495c:	69 f7       	brne	.-38     	; 0x4938 <__udivmodsi4_loop>
    495e:	60 95       	com	r22
    4960:	70 95       	com	r23
    4962:	80 95       	com	r24
    4964:	90 95       	com	r25
    4966:	9b 01       	movw	r18, r22
    4968:	ac 01       	movw	r20, r24
    496a:	bd 01       	movw	r22, r26
    496c:	cf 01       	movw	r24, r30
    496e:	08 95       	ret

00004970 <malloc>:
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	82 30       	cpi	r24, 0x02	; 2
    4976:	91 05       	cpc	r25, r1
    4978:	10 f4       	brcc	.+4      	; 0x497e <malloc+0xe>
    497a:	82 e0       	ldi	r24, 0x02	; 2
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	e0 91 ae 23 	lds	r30, 0x23AE
    4982:	f0 91 af 23 	lds	r31, 0x23AF
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	c0 e0       	ldi	r28, 0x00	; 0
    498c:	d0 e0       	ldi	r29, 0x00	; 0
    498e:	30 97       	sbiw	r30, 0x00	; 0
    4990:	11 f1       	breq	.+68     	; 0x49d6 <malloc+0x66>
    4992:	40 81       	ld	r20, Z
    4994:	51 81       	ldd	r21, Z+1	; 0x01
    4996:	48 17       	cp	r20, r24
    4998:	59 07       	cpc	r21, r25
    499a:	c0 f0       	brcs	.+48     	; 0x49cc <malloc+0x5c>
    499c:	48 17       	cp	r20, r24
    499e:	59 07       	cpc	r21, r25
    49a0:	61 f4       	brne	.+24     	; 0x49ba <malloc+0x4a>
    49a2:	82 81       	ldd	r24, Z+2	; 0x02
    49a4:	93 81       	ldd	r25, Z+3	; 0x03
    49a6:	20 97       	sbiw	r28, 0x00	; 0
    49a8:	19 f0       	breq	.+6      	; 0x49b0 <malloc+0x40>
    49aa:	8a 83       	std	Y+2, r24	; 0x02
    49ac:	9b 83       	std	Y+3, r25	; 0x03
    49ae:	2b c0       	rjmp	.+86     	; 0x4a06 <malloc+0x96>
    49b0:	80 93 ae 23 	sts	0x23AE, r24
    49b4:	90 93 af 23 	sts	0x23AF, r25
    49b8:	26 c0       	rjmp	.+76     	; 0x4a06 <malloc+0x96>
    49ba:	21 15       	cp	r18, r1
    49bc:	31 05       	cpc	r19, r1
    49be:	19 f0       	breq	.+6      	; 0x49c6 <malloc+0x56>
    49c0:	42 17       	cp	r20, r18
    49c2:	53 07       	cpc	r21, r19
    49c4:	18 f4       	brcc	.+6      	; 0x49cc <malloc+0x5c>
    49c6:	9a 01       	movw	r18, r20
    49c8:	be 01       	movw	r22, r28
    49ca:	df 01       	movw	r26, r30
    49cc:	ef 01       	movw	r28, r30
    49ce:	02 80       	ldd	r0, Z+2	; 0x02
    49d0:	f3 81       	ldd	r31, Z+3	; 0x03
    49d2:	e0 2d       	mov	r30, r0
    49d4:	dc cf       	rjmp	.-72     	; 0x498e <malloc+0x1e>
    49d6:	21 15       	cp	r18, r1
    49d8:	31 05       	cpc	r19, r1
    49da:	09 f1       	breq	.+66     	; 0x4a1e <malloc+0xae>
    49dc:	28 1b       	sub	r18, r24
    49de:	39 0b       	sbc	r19, r25
    49e0:	24 30       	cpi	r18, 0x04	; 4
    49e2:	31 05       	cpc	r19, r1
    49e4:	90 f4       	brcc	.+36     	; 0x4a0a <malloc+0x9a>
    49e6:	12 96       	adiw	r26, 0x02	; 2
    49e8:	8d 91       	ld	r24, X+
    49ea:	9c 91       	ld	r25, X
    49ec:	13 97       	sbiw	r26, 0x03	; 3
    49ee:	61 15       	cp	r22, r1
    49f0:	71 05       	cpc	r23, r1
    49f2:	21 f0       	breq	.+8      	; 0x49fc <malloc+0x8c>
    49f4:	fb 01       	movw	r30, r22
    49f6:	82 83       	std	Z+2, r24	; 0x02
    49f8:	93 83       	std	Z+3, r25	; 0x03
    49fa:	04 c0       	rjmp	.+8      	; 0x4a04 <malloc+0x94>
    49fc:	80 93 ae 23 	sts	0x23AE, r24
    4a00:	90 93 af 23 	sts	0x23AF, r25
    4a04:	fd 01       	movw	r30, r26
    4a06:	32 96       	adiw	r30, 0x02	; 2
    4a08:	44 c0       	rjmp	.+136    	; 0x4a92 <malloc+0x122>
    4a0a:	fd 01       	movw	r30, r26
    4a0c:	e2 0f       	add	r30, r18
    4a0e:	f3 1f       	adc	r31, r19
    4a10:	81 93       	st	Z+, r24
    4a12:	91 93       	st	Z+, r25
    4a14:	22 50       	subi	r18, 0x02	; 2
    4a16:	31 09       	sbc	r19, r1
    4a18:	2d 93       	st	X+, r18
    4a1a:	3c 93       	st	X, r19
    4a1c:	3a c0       	rjmp	.+116    	; 0x4a92 <malloc+0x122>
    4a1e:	20 91 ac 23 	lds	r18, 0x23AC
    4a22:	30 91 ad 23 	lds	r19, 0x23AD
    4a26:	23 2b       	or	r18, r19
    4a28:	41 f4       	brne	.+16     	; 0x4a3a <malloc+0xca>
    4a2a:	20 91 02 20 	lds	r18, 0x2002
    4a2e:	30 91 03 20 	lds	r19, 0x2003
    4a32:	20 93 ac 23 	sts	0x23AC, r18
    4a36:	30 93 ad 23 	sts	0x23AD, r19
    4a3a:	20 91 00 20 	lds	r18, 0x2000
    4a3e:	30 91 01 20 	lds	r19, 0x2001
    4a42:	21 15       	cp	r18, r1
    4a44:	31 05       	cpc	r19, r1
    4a46:	41 f4       	brne	.+16     	; 0x4a58 <malloc+0xe8>
    4a48:	2d b7       	in	r18, 0x3d	; 61
    4a4a:	3e b7       	in	r19, 0x3e	; 62
    4a4c:	40 91 04 20 	lds	r20, 0x2004
    4a50:	50 91 05 20 	lds	r21, 0x2005
    4a54:	24 1b       	sub	r18, r20
    4a56:	35 0b       	sbc	r19, r21
    4a58:	e0 91 ac 23 	lds	r30, 0x23AC
    4a5c:	f0 91 ad 23 	lds	r31, 0x23AD
    4a60:	e2 17       	cp	r30, r18
    4a62:	f3 07       	cpc	r31, r19
    4a64:	a0 f4       	brcc	.+40     	; 0x4a8e <malloc+0x11e>
    4a66:	2e 1b       	sub	r18, r30
    4a68:	3f 0b       	sbc	r19, r31
    4a6a:	28 17       	cp	r18, r24
    4a6c:	39 07       	cpc	r19, r25
    4a6e:	78 f0       	brcs	.+30     	; 0x4a8e <malloc+0x11e>
    4a70:	ac 01       	movw	r20, r24
    4a72:	4e 5f       	subi	r20, 0xFE	; 254
    4a74:	5f 4f       	sbci	r21, 0xFF	; 255
    4a76:	24 17       	cp	r18, r20
    4a78:	35 07       	cpc	r19, r21
    4a7a:	48 f0       	brcs	.+18     	; 0x4a8e <malloc+0x11e>
    4a7c:	4e 0f       	add	r20, r30
    4a7e:	5f 1f       	adc	r21, r31
    4a80:	40 93 ac 23 	sts	0x23AC, r20
    4a84:	50 93 ad 23 	sts	0x23AD, r21
    4a88:	81 93       	st	Z+, r24
    4a8a:	91 93       	st	Z+, r25
    4a8c:	02 c0       	rjmp	.+4      	; 0x4a92 <malloc+0x122>
    4a8e:	e0 e0       	ldi	r30, 0x00	; 0
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	cf 01       	movw	r24, r30
    4a94:	df 91       	pop	r29
    4a96:	cf 91       	pop	r28
    4a98:	08 95       	ret

00004a9a <free>:
    4a9a:	0f 93       	push	r16
    4a9c:	1f 93       	push	r17
    4a9e:	cf 93       	push	r28
    4aa0:	df 93       	push	r29
    4aa2:	00 97       	sbiw	r24, 0x00	; 0
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <free+0xe>
    4aa6:	8c c0       	rjmp	.+280    	; 0x4bc0 <free+0x126>
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	32 97       	sbiw	r30, 0x02	; 2
    4aac:	12 82       	std	Z+2, r1	; 0x02
    4aae:	13 82       	std	Z+3, r1	; 0x03
    4ab0:	00 91 ae 23 	lds	r16, 0x23AE
    4ab4:	10 91 af 23 	lds	r17, 0x23AF
    4ab8:	01 15       	cp	r16, r1
    4aba:	11 05       	cpc	r17, r1
    4abc:	81 f4       	brne	.+32     	; 0x4ade <free+0x44>
    4abe:	20 81       	ld	r18, Z
    4ac0:	31 81       	ldd	r19, Z+1	; 0x01
    4ac2:	82 0f       	add	r24, r18
    4ac4:	93 1f       	adc	r25, r19
    4ac6:	20 91 ac 23 	lds	r18, 0x23AC
    4aca:	30 91 ad 23 	lds	r19, 0x23AD
    4ace:	28 17       	cp	r18, r24
    4ad0:	39 07       	cpc	r19, r25
    4ad2:	79 f5       	brne	.+94     	; 0x4b32 <free+0x98>
    4ad4:	e0 93 ac 23 	sts	0x23AC, r30
    4ad8:	f0 93 ad 23 	sts	0x23AD, r31
    4adc:	71 c0       	rjmp	.+226    	; 0x4bc0 <free+0x126>
    4ade:	d8 01       	movw	r26, r16
    4ae0:	40 e0       	ldi	r20, 0x00	; 0
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	ae 17       	cp	r26, r30
    4ae6:	bf 07       	cpc	r27, r31
    4ae8:	50 f4       	brcc	.+20     	; 0x4afe <free+0x64>
    4aea:	12 96       	adiw	r26, 0x02	; 2
    4aec:	2d 91       	ld	r18, X+
    4aee:	3c 91       	ld	r19, X
    4af0:	13 97       	sbiw	r26, 0x03	; 3
    4af2:	ad 01       	movw	r20, r26
    4af4:	21 15       	cp	r18, r1
    4af6:	31 05       	cpc	r19, r1
    4af8:	09 f1       	breq	.+66     	; 0x4b3c <free+0xa2>
    4afa:	d9 01       	movw	r26, r18
    4afc:	f3 cf       	rjmp	.-26     	; 0x4ae4 <free+0x4a>
    4afe:	9d 01       	movw	r18, r26
    4b00:	da 01       	movw	r26, r20
    4b02:	22 83       	std	Z+2, r18	; 0x02
    4b04:	33 83       	std	Z+3, r19	; 0x03
    4b06:	60 81       	ld	r22, Z
    4b08:	71 81       	ldd	r23, Z+1	; 0x01
    4b0a:	86 0f       	add	r24, r22
    4b0c:	97 1f       	adc	r25, r23
    4b0e:	82 17       	cp	r24, r18
    4b10:	93 07       	cpc	r25, r19
    4b12:	69 f4       	brne	.+26     	; 0x4b2e <free+0x94>
    4b14:	ec 01       	movw	r28, r24
    4b16:	28 81       	ld	r18, Y
    4b18:	39 81       	ldd	r19, Y+1	; 0x01
    4b1a:	26 0f       	add	r18, r22
    4b1c:	37 1f       	adc	r19, r23
    4b1e:	2e 5f       	subi	r18, 0xFE	; 254
    4b20:	3f 4f       	sbci	r19, 0xFF	; 255
    4b22:	20 83       	st	Z, r18
    4b24:	31 83       	std	Z+1, r19	; 0x01
    4b26:	8a 81       	ldd	r24, Y+2	; 0x02
    4b28:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2a:	82 83       	std	Z+2, r24	; 0x02
    4b2c:	93 83       	std	Z+3, r25	; 0x03
    4b2e:	45 2b       	or	r20, r21
    4b30:	29 f4       	brne	.+10     	; 0x4b3c <free+0xa2>
    4b32:	e0 93 ae 23 	sts	0x23AE, r30
    4b36:	f0 93 af 23 	sts	0x23AF, r31
    4b3a:	42 c0       	rjmp	.+132    	; 0x4bc0 <free+0x126>
    4b3c:	12 96       	adiw	r26, 0x02	; 2
    4b3e:	ed 93       	st	X+, r30
    4b40:	fc 93       	st	X, r31
    4b42:	13 97       	sbiw	r26, 0x03	; 3
    4b44:	ed 01       	movw	r28, r26
    4b46:	49 91       	ld	r20, Y+
    4b48:	59 91       	ld	r21, Y+
    4b4a:	9e 01       	movw	r18, r28
    4b4c:	24 0f       	add	r18, r20
    4b4e:	35 1f       	adc	r19, r21
    4b50:	e2 17       	cp	r30, r18
    4b52:	f3 07       	cpc	r31, r19
    4b54:	71 f4       	brne	.+28     	; 0x4b72 <free+0xd8>
    4b56:	80 81       	ld	r24, Z
    4b58:	91 81       	ldd	r25, Z+1	; 0x01
    4b5a:	84 0f       	add	r24, r20
    4b5c:	95 1f       	adc	r25, r21
    4b5e:	02 96       	adiw	r24, 0x02	; 2
    4b60:	8d 93       	st	X+, r24
    4b62:	9c 93       	st	X, r25
    4b64:	11 97       	sbiw	r26, 0x01	; 1
    4b66:	82 81       	ldd	r24, Z+2	; 0x02
    4b68:	93 81       	ldd	r25, Z+3	; 0x03
    4b6a:	12 96       	adiw	r26, 0x02	; 2
    4b6c:	8d 93       	st	X+, r24
    4b6e:	9c 93       	st	X, r25
    4b70:	13 97       	sbiw	r26, 0x03	; 3
    4b72:	e0 e0       	ldi	r30, 0x00	; 0
    4b74:	f0 e0       	ldi	r31, 0x00	; 0
    4b76:	d8 01       	movw	r26, r16
    4b78:	12 96       	adiw	r26, 0x02	; 2
    4b7a:	8d 91       	ld	r24, X+
    4b7c:	9c 91       	ld	r25, X
    4b7e:	13 97       	sbiw	r26, 0x03	; 3
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	19 f0       	breq	.+6      	; 0x4b8a <free+0xf0>
    4b84:	f8 01       	movw	r30, r16
    4b86:	8c 01       	movw	r16, r24
    4b88:	f6 cf       	rjmp	.-20     	; 0x4b76 <free+0xdc>
    4b8a:	8d 91       	ld	r24, X+
    4b8c:	9c 91       	ld	r25, X
    4b8e:	98 01       	movw	r18, r16
    4b90:	2e 5f       	subi	r18, 0xFE	; 254
    4b92:	3f 4f       	sbci	r19, 0xFF	; 255
    4b94:	82 0f       	add	r24, r18
    4b96:	93 1f       	adc	r25, r19
    4b98:	20 91 ac 23 	lds	r18, 0x23AC
    4b9c:	30 91 ad 23 	lds	r19, 0x23AD
    4ba0:	28 17       	cp	r18, r24
    4ba2:	39 07       	cpc	r19, r25
    4ba4:	69 f4       	brne	.+26     	; 0x4bc0 <free+0x126>
    4ba6:	30 97       	sbiw	r30, 0x00	; 0
    4ba8:	29 f4       	brne	.+10     	; 0x4bb4 <free+0x11a>
    4baa:	10 92 ae 23 	sts	0x23AE, r1
    4bae:	10 92 af 23 	sts	0x23AF, r1
    4bb2:	02 c0       	rjmp	.+4      	; 0x4bb8 <free+0x11e>
    4bb4:	12 82       	std	Z+2, r1	; 0x02
    4bb6:	13 82       	std	Z+3, r1	; 0x03
    4bb8:	00 93 ac 23 	sts	0x23AC, r16
    4bbc:	10 93 ad 23 	sts	0x23AD, r17
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	1f 91       	pop	r17
    4bc6:	0f 91       	pop	r16
    4bc8:	08 95       	ret

00004bca <memcpy>:
    4bca:	fb 01       	movw	r30, r22
    4bcc:	dc 01       	movw	r26, r24
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <memcpy+0xa>
    4bd0:	01 90       	ld	r0, Z+
    4bd2:	0d 92       	st	X+, r0
    4bd4:	41 50       	subi	r20, 0x01	; 1
    4bd6:	50 40       	sbci	r21, 0x00	; 0
    4bd8:	d8 f7       	brcc	.-10     	; 0x4bd0 <memcpy+0x6>
    4bda:	08 95       	ret

00004bdc <__do_global_dtors>:
    4bdc:	11 e0       	ldi	r17, 0x01	; 1
    4bde:	c8 ef       	ldi	r28, 0xF8	; 248
    4be0:	d1 e0       	ldi	r29, 0x01	; 1
    4be2:	00 e0       	ldi	r16, 0x00	; 0
    4be4:	06 c0       	rjmp	.+12     	; 0x4bf2 <__do_global_dtors+0x16>
    4be6:	80 2f       	mov	r24, r16
    4be8:	fe 01       	movw	r30, r28
    4bea:	0e 94 7f 24 	call	0x48fe	; 0x48fe <__tablejump2__>
    4bee:	21 96       	adiw	r28, 0x01	; 1
    4bf0:	01 1d       	adc	r16, r1
    4bf2:	ca 3f       	cpi	r28, 0xFA	; 250
    4bf4:	d1 07       	cpc	r29, r17
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	08 07       	cpc	r16, r24
    4bfa:	a9 f7       	brne	.-22     	; 0x4be6 <__do_global_dtors+0xa>
    4bfc:	f8 94       	cli

00004bfe <__stop_program>:
    4bfe:	ff cf       	rjmp	.-2      	; 0x4bfe <__stop_program>
