
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004caa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  00004caa  00004d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000251  0080210e  0080210e  00004e4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008c0  00000000  00000000  00004ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b137  00000000  00000000  0000577c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021c3  00000000  00000000  000108b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027a1  00000000  00000000  00012a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ee4  00000000  00000000  00015218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000049d2  00000000  00000000  000180fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007bb9  00000000  00000000  0001cace  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  00024687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 02 	jmp	0x400	; 0x400 <__dtors_end>
       4:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__vector_1>
       8:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_2>
       c:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_3>
      10:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_4>
      14:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_5>
      18:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_6>
      1c:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__vector_7>
      20:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__vector_8>
      24:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__vector_9>
      28:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__vector_10>
      2c:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_11>
      30:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_12>
      34:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_13>
      38:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__vector_14>
      3c:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_15>
      40:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__vector_16>
      44:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_17>
      48:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_18>
      4c:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_19>
      50:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_20>
      54:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_21>
      58:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_22>
      5c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_23>
      60:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_24>
      64:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_25>
      68:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__vector_26>
      6c:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__vector_27>
      70:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_28>
      74:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__vector_29>
      78:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_30>
      7c:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__vector_31>
      80:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__vector_32>
      84:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__vector_33>
      88:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__vector_34>
      8c:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__vector_35>
      90:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__vector_36>
      94:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__vector_37>
      98:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_38>
      9c:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_39>
      a0:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__vector_40>
      a4:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__vector_41>
      a8:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__vector_42>
      ac:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_43>
      b0:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_44>
      b4:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__vector_45>
      b8:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_46>
      bc:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__vector_47>
      c0:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__vector_48>
      c4:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__vector_49>
      c8:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__vector_50>
      cc:	0c 94 85 14 	jmp	0x290a	; 0x290a <__vector_51>
      d0:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__vector_52>
      d4:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__vector_53>
      d8:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__vector_54>
      dc:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__vector_55>
      e0:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__vector_56>
      e4:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__vector_57>
      e8:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__vector_58>
      ec:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__vector_59>
      f0:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__vector_60>
      f4:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__vector_61>
      f8:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__vector_62>
      fc:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__vector_63>
     100:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__vector_64>
     104:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__vector_65>
     108:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__vector_66>
     10c:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__vector_67>
     110:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__vector_68>
     114:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_69>
     118:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_70>
     11c:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__vector_71>
     120:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__vector_72>
     124:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__vector_73>
     128:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__vector_74>
     12c:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     130:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     134:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__vector_77>
     138:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__vector_78>
     13c:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__vector_79>
     140:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__vector_80>
     144:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__vector_81>
     148:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__vector_82>
     14c:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__vector_83>
     150:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__vector_84>
     154:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__vector_85>
     158:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__vector_86>
     15c:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__vector_87>
     160:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__vector_88>
     164:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__vector_89>
     168:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__vector_90>
     16c:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__vector_91>
     170:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__vector_92>
     174:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__vector_93>
     178:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     17c:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     180:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     184:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     188:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     18c:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     190:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     194:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     198:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     19c:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1a0:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__vector_104>
     1a4:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__vector_105>
     1a8:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1ac:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1b0:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__vector_108>
     1b4:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__vector_109>
     1b8:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__vector_110>
     1bc:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__vector_111>
     1c0:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__vector_112>
     1c4:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <__vector_113>
     1c8:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1cc:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1d0:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1d4:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1d8:	0c 94 31 02 	jmp	0x462	; 0x462 <__bad_interrupt>
     1dc:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__vector_119>
     1e0:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__vector_120>
     1e4:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__vector_121>
     1e8:	9b 03       	fmulsu	r17, r19
     1ea:	9e 03       	fmulsu	r17, r22
     1ec:	af 03       	fmulsu	r18, r23
     1ee:	c0 03       	fmuls	r20, r16
     1f0:	fc 03       	fmulsu	r23, r20
     1f2:	d1 03       	fmuls	r21, r17
     1f4:	d5 03       	fmuls	r21, r21
     1f6:	d9 03       	fmulsu	r21, r17
     1f8:	dd 03       	fmulsu	r21, r21
     1fa:	e1 03       	fmuls	r22, r17
     1fc:	fc 03       	fmulsu	r23, r20
     1fe:	e5 03       	fmuls	r22, r21
     200:	e9 03       	fmulsu	r22, r17
     202:	ed 03       	fmulsu	r22, r21
     204:	f1 03       	fmuls	r23, r17
     206:	f5 03       	fmuls	r23, r21
     208:	f9 03       	fmulsu	r23, r17
     20a:	d0 04       	cpc	r13, r0
     20c:	d4 04       	cpc	r13, r4
     20e:	d8 04       	cpc	r13, r8
     210:	dc 04       	cpc	r13, r12
     212:	e0 04       	cpc	r14, r0
     214:	e4 04       	cpc	r14, r4
     216:	e8 04       	cpc	r14, r8
     218:	ec 04       	cpc	r14, r12
     21a:	f0 04       	cpc	r15, r0
     21c:	f4 04       	cpc	r15, r4
     21e:	f8 04       	cpc	r15, r8
     220:	fc 04       	cpc	r15, r12
     222:	00 05       	cpc	r16, r0
     224:	04 05       	cpc	r16, r4
     226:	08 05       	cpc	r16, r8
     228:	e5 20       	and	r14, r5
     22a:	e5 20       	and	r14, r5
     22c:	ed 20       	and	r14, r13
     22e:	f5 20       	and	r15, r5
     230:	fc 20       	and	r15, r12
     232:	4b 21       	and	r20, r11
     234:	52 21       	and	r21, r2
     236:	7e 21       	and	r23, r14
     238:	7e 21       	and	r23, r14
     23a:	7d 21       	and	r23, r13
     23c:	7d 21       	and	r23, r13
     23e:	05 a8       	ldd	r0, Z+53	; 0x35
     240:	4c cd       	rjmp	.-1384   	; 0xfffffcda <__eeprom_end+0xff7efcda>
     242:	b2 d4       	rcall	.+2404   	; 0xba8 <_ZN16CLaserControlApp3RunEv+0x2a8>
     244:	4e b9       	out	0x0e, r20	; 14
     246:	38 36       	cpi	r19, 0x68	; 104
     248:	a9 02       	muls	r26, r25
     24a:	0c 50       	subi	r16, 0x0C	; 12
     24c:	b9 91       	ld	r27, Y+
     24e:	86 88       	ldd	r8, Z+22	; 0x16
     250:	08 3c       	cpi	r16, 0xC8	; 200
     252:	a6 aa       	std	Z+54, r10	; 0x36
     254:	aa 2a       	or	r10, r26
     256:	be 00       	.word	0x00be	; ????
     258:	00 00       	nop
     25a:	80 3f       	cpi	r24, 0xF0	; 240

0000025c <__trampolines_start>:
     25c:	0c 94 68 20 	jmp	0x40d0	; 0x40d0 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     260:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb2>
     264:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     268:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     26c:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <_ZN16CLaserControlApp3RunEv+0xe8>
     270:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <_ZN7CTimerC8SetCOMPBEj>
     274:	0c 94 83 03 	jmp	0x706	; 0x706 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     278:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xda>
     27c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xaa>
     280:	0c 94 1f 09 	jmp	0x123e	; 0x123e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     284:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xca>
     288:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_ZN16CLaserControlApp3RunEv+0xa0>
     28c:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <_ZN4CSPI16StaticOnTransmitEPv>
     290:	0c 94 ed 03 	jmp	0x7da	; 0x7da <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     294:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <_ZN7CTimerF8SetCOMPAEj>
     298:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     29c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <_ZN7CTimerC8SetCOMPCEj>
     2a0:	0c 94 84 03 	jmp	0x708	; 0x708 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     2a4:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf0>
     2a8:	0c 94 08 09 	jmp	0x1210	; 0x1210 <_ZN7CTimerC8SetCOMPDEj>
     2ac:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <_ZN7CTimerC5StartEj>
     2b0:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2b4:	0c 94 9d 02 	jmp	0x53a	; 0x53a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2b8:	0c 94 2f 20 	jmp	0x405e	; 0x405e <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2bc:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2c0:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <_ZN16CLaserControlApp3RunEv+0xd8>
     2c4:	0c 94 8b 02 	jmp	0x516	; 0x516 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2c8:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <_ZN7CTimerF9SetPeriodEj>
     2cc:	0c 94 bd 09 	jmp	0x137a	; 0x137a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     2d0:	0c 94 33 02 	jmp	0x466	; 0x466 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     2d4:	0c 94 9b 03 	jmp	0x736	; 0x736 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     2d8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xea>
     2dc:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc2>
     2e0:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <_ZN9CMBSender13OnReceiveByteEh+0x42>
     2e4:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2e8:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <_ZN9CMBSender13OnReceiveByteEh+0x22>
     2ec:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2f0:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2f4:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2f8:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_ZN16CLaserControlApp3RunEv+0x110>
     2fc:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <_ZN16CMBEventsHandler11FreeBuffersEv>
     300:	0c 94 af 03 	jmp	0x75e	; 0x75e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
     304:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     308:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     30c:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     310:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <_GLOBAL__sub_D_dacSPI>
     314:	0c 94 00 05 	jmp	0xa00	; 0xa00 <_ZN16CLaserControlApp3RunEv+0x100>
     318:	0c 94 43 09 	jmp	0x1286	; 0x1286 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     31c:	0c 94 94 02 	jmp	0x528	; 0x528 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     320:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__cxa_pure_virtual>
     324:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_ZN10CDGUSUSART15GetReceivedByteEv>
     328:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <_ZN9CMBSender13OnReceiveByteEh+0xee>
     32c:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <_ZN9CMBSender13OnReceiveByteEh+0x152>
     330:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <_ZN7CTimerC4StopEv>
     334:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_ZN7CTimerC9SetPeriodEj>
     338:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <_GLOBAL__sub_I_dacSPI>
     33c:	0c 94 76 06 	jmp	0xcec	; 0xcec <_GLOBAL__sub_I_timer>
     340:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_ZN10CDGUSUSART14IsTransmittingEv>
     344:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     348:	0c 94 e6 21 	jmp	0x43cc	; 0x43cc <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     34c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     350:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <_ZN9CMBSender13OnReceiveByteEh+0x50>
     354:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     358:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <_ZN7CTimerF8SetCOMPCEj>
     35c:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     360:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     364:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_ZN16CLaserControlApp3RunEv+0xa8>
     368:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <_ZN7CTimerF5StartEj>
     36c:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp13OnTimerStaticEPv>
     370:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     374:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     378:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xba>
     37c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_ZN10CDGUSUSART11IsReceivingEv>
     380:	0c 94 ed 08 	jmp	0x11da	; 0x11da <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     384:	0c 94 81 21 	jmp	0x4302	; 0x4302 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     388:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_ZN16CLaserControlApp3RunEv+0xf8>
     38c:	0c 94 04 05 	jmp	0xa08	; 0xa08 <_ZN16CLaserControlApp3RunEv+0x108>
     390:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN16CLaserControlApp3RunEv+0xf0>
     394:	0c 94 c0 03 	jmp	0x780	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x78>
     398:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_ZN16CLaserControlApp3RunEv+0xc0>
     39c:	0c 94 15 04 	jmp	0x82a	; 0x82a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     3a0:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe2>
     3a4:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     3a8:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3ac:	0c 94 df 09 	jmp	0x13be	; 0x13be <_ZN7CTimerF8SetCOMPDEj>
     3b0:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <_ZN7CTimerC8SetCOMPAEj>
     3b4:	0c 94 b5 09 	jmp	0x136a	; 0x136a <_ZN7CTimerF4StopEv>
     3b8:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3bc:	0c 94 ed 20 	jmp	0x41da	; 0x41da <_ZN9CMBSender13OnReceiveByteEh+0x32>
     3c0:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_ZN16CLaserControlApp3RunEv+0xe0>
     3c4:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_ZN7CTimerF8SetCOMPBEj>
     3c8:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_ZN16CLaserControlApp3RunEv+0xc8>
     3cc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3d0:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <_GLOBAL__sub_D_timer>
     3d4:	0c 94 83 02 	jmp	0x506	; 0x506 <_ZN10CDGUSUSART11IsDataEmptyEv>
     3d8:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <_ZN16CLaserControlApp3RunEv+0xb8>
     3dc:	0c 94 0d 09 	jmp	0x121a	; 0x121a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3e0:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_ZN16CLaserControlApp3RunEv+0xb0>
     3e4:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     3e8:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     3ec:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <_ZN16CLaserControlApp3RunEv+0xd0>
     3f0:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa2>
     3f4:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>

000003f8 <__ctors_start>:
     3f8:	76 06       	cpc	r7, r22
     3fa:	7c 1e       	adc	r7, r28

000003fc <__ctors_end>:
     3fc:	7f 06       	cpc	r7, r31
     3fe:	95 1e       	adc	r9, r21

00000400 <__dtors_end>:
     400:	11 24       	eor	r1, r1
     402:	1f be       	out	0x3f, r1	; 63
     404:	cf ef       	ldi	r28, 0xFF	; 255
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df e3       	ldi	r29, 0x3F	; 63
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	00 e0       	ldi	r16, 0x00	; 0
     40e:	0c bf       	out	0x3c, r16	; 60

00000410 <__do_copy_data>:
     410:	11 e2       	ldi	r17, 0x21	; 33
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b0 e2       	ldi	r27, 0x20	; 32
     416:	ea ea       	ldi	r30, 0xAA	; 170
     418:	fc e4       	ldi	r31, 0x4C	; 76
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0b bf       	out	0x3b, r16	; 59
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__do_copy_data+0x14>
     420:	07 90       	elpm	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	ae 30       	cpi	r26, 0x0E	; 14
     426:	b1 07       	cpc	r27, r17
     428:	d9 f7       	brne	.-10     	; 0x420 <__do_copy_data+0x10>

0000042a <__do_clear_bss>:
     42a:	23 e2       	ldi	r18, 0x23	; 35
     42c:	ae e0       	ldi	r26, 0x0E	; 14
     42e:	b1 e2       	ldi	r27, 0x21	; 33
     430:	01 c0       	rjmp	.+2      	; 0x434 <.do_clear_bss_start>

00000432 <.do_clear_bss_loop>:
     432:	1d 92       	st	X+, r1

00000434 <.do_clear_bss_start>:
     434:	af 35       	cpi	r26, 0x5F	; 95
     436:	b2 07       	cpc	r27, r18
     438:	e1 f7       	brne	.-8      	; 0x432 <.do_clear_bss_loop>

0000043a <__do_global_ctors>:
     43a:	11 e0       	ldi	r17, 0x01	; 1
     43c:	ce ef       	ldi	r28, 0xFE	; 254
     43e:	d1 e0       	ldi	r29, 0x01	; 1
     440:	00 e0       	ldi	r16, 0x00	; 0
     442:	06 c0       	rjmp	.+12     	; 0x450 <__do_global_ctors+0x16>
     444:	21 97       	sbiw	r28, 0x01	; 1
     446:	01 09       	sbc	r16, r1
     448:	80 2f       	mov	r24, r16
     44a:	fe 01       	movw	r30, r28
     44c:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <__tablejump2__>
     450:	cc 3f       	cpi	r28, 0xFC	; 252
     452:	d1 07       	cpc	r29, r17
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	08 07       	cpc	r16, r24
     458:	a9 f7       	brne	.-22     	; 0x444 <__do_global_ctors+0xa>
     45a:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <main>
     45e:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__do_global_dtors>

00000462 <__bad_interrupt>:
     462:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000466 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     466:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     468:	e0 e6       	ldi	r30, 0x60	; 96
     46a:	f6 e0       	ldi	r31, 0x06	; 6
     46c:	88 e0       	ldi	r24, 0x08	; 8
     46e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     470:	84 e0       	ldi	r24, 0x04	; 4
     472:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     474:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     476:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     478:	e0 ea       	ldi	r30, 0xA0	; 160
     47a:	f9 e0       	ldi	r31, 0x09	; 9
     47c:	84 e1       	ldi	r24, 0x14	; 20
     47e:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     480:	88 e1       	ldi	r24, 0x18	; 24
     482:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     484:	84 81       	ldd	r24, Z+4	; 0x04
     486:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     488:	41 30       	cpi	r20, 0x01	; 1
     48a:	19 f0       	breq	.+6      	; 0x492 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     48c:	42 30       	cpi	r20, 0x02	; 2
     48e:	19 f0       	breq	.+6      	; 0x496 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     490:	04 c0       	rjmp	.+8      	; 0x49a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	03 c0       	rjmp	.+6      	; 0x49c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     496:	80 e3       	ldi	r24, 0x30	; 48
		break;
     498:	01 c0       	rjmp	.+2      	; 0x49c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     49a:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     49c:	22 23       	and	r18, r18
     49e:	19 f0       	breq	.+6      	; 0x4a6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     4a0:	21 30       	cpi	r18, 0x01	; 1
     4a2:	19 f0       	breq	.+6      	; 0x4aa <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     4a6:	87 7f       	andi	r24, 0xF7	; 247
		break;
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     4aa:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     4ac:	01 11       	cpse	r16, r1
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     4b0:	93 e4       	ldi	r25, 0x43	; 67
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	89 2b       	or	r24, r25
     4b8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ba:	f9 e0       	ldi	r31, 0x09	; 9
     4bc:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	db 01       	movw	r26, r22
     4c2:	aa 5d       	subi	r26, 0xDA	; 218
     4c4:	bf 4d       	sbci	r27, 0xDF	; 223
     4c6:	8c 91       	ld	r24, X
     4c8:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     4ca:	db 01       	movw	r26, r22
     4cc:	aa 5f       	subi	r26, 0xFA	; 250
     4ce:	bf 4d       	sbci	r27, 0xDF	; 223
     4d0:	8c 91       	ld	r24, X
     4d2:	82 95       	swap	r24
     4d4:	80 7f       	andi	r24, 0xF0	; 240
     4d6:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     4dc:	80 91 a0 09 	lds	r24, 0x09A0
}
     4e0:	08 95       	ret

000004e2 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     4e2:	60 93 a0 09 	sts	0x09A0, r22
     4e6:	08 95       	ret

000004e8 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     4e8:	80 91 a1 09 	lds	r24, 0x09A1
     4ec:	86 fb       	bst	r24, 6
     4ee:	88 27       	eor	r24, r24
     4f0:	80 f9       	bld	r24, 0
}
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	89 27       	eor	r24, r25
     4f6:	08 95       	ret

000004f8 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     4f8:	80 91 a1 09 	lds	r24, 0x09A1
     4fc:	80 95       	com	r24
}
     4fe:	88 1f       	adc	r24, r24
     500:	88 27       	eor	r24, r24
     502:	88 1f       	adc	r24, r24
     504:	08 95       	ret

00000506 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     506:	80 91 a1 09 	lds	r24, 0x09A1
     50a:	85 fb       	bst	r24, 5
     50c:	88 27       	eor	r24, r24
     50e:	80 f9       	bld	r24, 0
}
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	89 27       	eor	r24, r25
     514:	08 95       	ret

00000516 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     516:	60 93 de 22 	sts	0x22DE, r22
     51a:	70 93 df 22 	sts	0x22DF, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     51e:	40 93 e8 21 	sts	0x21E8, r20
     522:	50 93 e9 21 	sts	0x21E9, r21
     526:	08 95       	ret

00000528 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     528:	60 93 e2 22 	sts	0x22E2, r22
     52c:	70 93 e3 22 	sts	0x22E3, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     530:	40 93 ec 21 	sts	0x21EC, r20
     534:	50 93 ed 21 	sts	0x21ED, r21
     538:	08 95       	ret

0000053a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     53a:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     53c:	8b e6       	ldi	r24, 0x6B	; 107
     53e:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     540:	80 ea       	ldi	r24, 0xA0	; 160
     542:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     544:	89 e0       	ldi	r24, 0x09	; 9
     546:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     548:	12 86       	std	Z+10, r1	; 0x0a
     54a:	08 95       	ret

0000054c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     54c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     54e:	8c e6       	ldi	r24, 0x6C	; 108
     550:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     552:	80 ea       	ldi	r24, 0xA0	; 160
     554:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     556:	89 e0       	ldi	r24, 0x09	; 9
     558:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     55a:	16 86       	std	Z+14, r1	; 0x0e
     55c:	08 95       	ret

0000055e <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN6CUSARTC1Ev>
     568:	8a e4       	ldi	r24, 0x4A	; 74
     56a:	90 e2       	ldi	r25, 0x20	; 32
     56c:	88 83       	st	Y, r24
     56e:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     576:	2a e4       	ldi	r18, 0x4A	; 74
     578:	30 e2       	ldi	r19, 0x20	; 32
     57a:	fc 01       	movw	r30, r24
     57c:	20 83       	st	Z, r18
     57e:	31 83       	std	Z+1, r19	; 0x01
     580:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN6CUSARTD1Ev>
     584:	08 95       	ret

00000586 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     586:	08 95       	ret

00000588 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     588:	08 95       	ret

0000058a <_ZN11CLaserBoard12InitializeIOEv>:
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
	// Set all output
	PORTC.DIRSET = 0xFF;
     58a:	e0 e4       	ldi	r30, 0x40	; 64
     58c:	f6 e0       	ldi	r31, 0x06	; 6
     58e:	9f ef       	ldi	r25, 0xFF	; 255
     590:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     592:	88 ea       	ldi	r24, 0xA8	; 168
     594:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     596:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     598:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     59a:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     59c:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     59e:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5a0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     5a2:	87 8b       	std	Z+23, r24	; 0x17
	
	// Set all down
	PORTC.OUT = 0x00;
     5a4:	14 82       	std	Z+4, r1	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     5a6:	a0 e8       	ldi	r26, 0x80	; 128
     5a8:	b6 e0       	ldi	r27, 0x06	; 6
     5aa:	88 e0       	ldi	r24, 0x08	; 8
     5ac:	11 96       	adiw	r26, 0x01	; 1
     5ae:	8c 93       	st	X, r24
     5b0:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     5b2:	53 96       	adiw	r26, 0x13	; 19
     5b4:	1c 92       	st	X, r1
     5b6:	53 97       	sbiw	r26, 0x13	; 19
	PORTE.OUT = 0;
     5b8:	14 96       	adiw	r26, 0x04	; 4
     5ba:	1c 92       	st	X, r1
     5bc:	14 97       	sbiw	r26, 0x04	; 4
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5be:	e0 ea       	ldi	r30, 0xA0	; 160
     5c0:	f6 e0       	ldi	r31, 0x06	; 6
     5c2:	80 ec       	ldi	r24, 0xC0	; 192
     5c4:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5c6:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5c8:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5ca:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5cc:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5ce:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5d0:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5d2:	87 8b       	std	Z+23, r24	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     5d4:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     5d6:	91 83       	std	Z+1, r25	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     5d8:	e0 e6       	ldi	r30, 0x60	; 96
     5da:	f6 e0       	ldi	r31, 0x06	; 6
     5dc:	91 e1       	ldi	r25, 0x11	; 17
     5de:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5e0:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5e2:	84 8b       	std	Z+20, r24	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     5e4:	14 82       	std	Z+4, r1	; 0x04
	
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	8c 93       	st	X, r24
     5ec:	11 97       	sbiw	r26, 0x01	; 1
	
	// Configure all pins to "wired and"
	PORTE.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5ee:	80 e8       	ldi	r24, 0x80	; 128
     5f0:	50 96       	adiw	r26, 0x10	; 16
     5f2:	8c 93       	st	X, r24
     5f4:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL =PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     5f6:	51 96       	adiw	r26, 0x11	; 17
     5f8:	8c 93       	st	X, r24
     5fa:	51 97       	sbiw	r26, 0x11	; 17
	
	PORTE.OUT = 0;//PIN0_bm;
     5fc:	14 96       	adiw	r26, 0x04	; 4
     5fe:	1c 92       	st	X, r1
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     600:	e0 ea       	ldi	r30, 0xA0	; 160
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	82 81       	ldd	r24, Z+2	; 0x02
     606:	81 60       	ori	r24, 0x01	; 1
     608:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     60a:	82 81       	ldd	r24, Z+2	; 0x02
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	84 60       	ori	r24, 0x04	; 4
     614:	82 83       	std	Z+2, r24	; 0x02
     616:	08 95       	ret

00000618 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     618:	e0 e5       	ldi	r30, 0x50	; 80
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	8b ec       	ldi	r24, 0xCB	; 203
     61e:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     620:	80 81       	ld	r24, Z
     622:	88 60       	ori	r24, 0x08	; 8
     624:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	83 ff       	sbrs	r24, 3
     62a:	fd cf       	rjmp	.-6      	; 0x626 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     62c:	e0 e5       	ldi	r30, 0x50	; 80
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     632:	98 ed       	ldi	r25, 0xD8	; 216
     634:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     636:	84 ec       	ldi	r24, 0xC4	; 196
     638:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     63a:	80 81       	ld	r24, Z
     63c:	80 61       	ori	r24, 0x10	; 16
     63e:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     640:	e0 e4       	ldi	r30, 0x40	; 64
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     646:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     648:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     64a:	e0 e5       	ldi	r30, 0x50	; 80
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	81 81       	ldd	r24, Z+1	; 0x01
     650:	84 ff       	sbrs	r24, 4
     652:	fd cf       	rjmp	.-6      	; 0x64e <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     654:	e0 e4       	ldi	r30, 0x40	; 64
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	88 7f       	andi	r24, 0xF8	; 248
     65c:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     65e:	98 ed       	ldi	r25, 0xD8	; 216
     660:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     662:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     664:	a0 e5       	ldi	r26, 0x50	; 80
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	8c 91       	ld	r24, X
     66a:	88 7f       	andi	r24, 0xF8	; 248
     66c:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     66e:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     670:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     676:	e0 eb       	ldi	r30, 0xB0	; 176
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	84 81       	ldd	r24, Z+4	; 0x04
     67c:	8c 7f       	andi	r24, 0xFC	; 252
     67e:	84 83       	std	Z+4, r24	; 0x04
     680:	08 95       	ret

00000682 <_ZN11CLaserBoard4BeepEv>:
	PORTE.OUTCLR = PIN1_bm;
}

void CLaserBoard::Beep()
{
	cli();
     682:	f8 94       	cli
     684:	84 e6       	ldi	r24, 0x64	; 100
     686:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     688:	e0 e8       	ldi	r30, 0x80	; 128
     68a:	f6 e0       	ldi	r31, 0x06	; 6
     68c:	28 e0       	ldi	r18, 0x08	; 8
     68e:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     690:	af e9       	ldi	r26, 0x9F	; 159
     692:	bf e0       	ldi	r27, 0x0F	; 15
     694:	11 97       	sbiw	r26, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <_ZN11CLaserBoard4BeepEv+0x12>
     698:	00 c0       	rjmp	.+0      	; 0x69a <_ZN11CLaserBoard4BeepEv+0x18>
     69a:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     69c:	26 83       	std	Z+6, r18	; 0x06
     69e:	af e9       	ldi	r26, 0x9F	; 159
     6a0:	bf e0       	ldi	r27, 0x0F	; 15
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <_ZN11CLaserBoard4BeepEv+0x20>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <_ZN11CLaserBoard4BeepEv+0x26>
     6a8:	00 00       	nop
     6aa:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     6ac:	81 f7       	brne	.-32     	; 0x68e <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     6ae:	78 94       	sei
     6b0:	08 95       	ret

000006b2 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     6b2:	f8 94       	cli
     6b4:	45 e0       	ldi	r20, 0x05	; 5
     6b6:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6b8:	64 e6       	ldi	r22, 0x64	; 100
     6ba:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     6bc:	e0 e8       	ldi	r30, 0x80	; 128
     6be:	f6 e0       	ldi	r31, 0x06	; 6
     6c0:	28 e0       	ldi	r18, 0x08	; 8
     6c2:	1c c0       	rjmp	.+56     	; 0x6fc <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     6c4:	25 83       	std	Z+5, r18	; 0x05
     6c6:	af e9       	ldi	r26, 0x9F	; 159
     6c8:	bf e0       	ldi	r27, 0x0F	; 15
     6ca:	11 97       	sbiw	r26, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     6d0:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     6d2:	26 83       	std	Z+6, r18	; 0x06
     6d4:	af e9       	ldi	r26, 0x9F	; 159
     6d6:	bf e0       	ldi	r27, 0x0F	; 15
     6d8:	11 97       	sbiw	r26, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     6de:	00 00       	nop
     6e0:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     6e2:	81 f7       	brne	.-32     	; 0x6c4 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e4:	bf ef       	ldi	r27, 0xFF	; 255
     6e6:	73 ec       	ldi	r23, 0xC3	; 195
     6e8:	89 e0       	ldi	r24, 0x09	; 9
     6ea:	b1 50       	subi	r27, 0x01	; 1
     6ec:	70 40       	sbci	r23, 0x00	; 0
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     6f4:	00 00       	nop
     6f6:	41 50       	subi	r20, 0x01	; 1
     6f8:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     6fa:	19 f0       	breq	.+6      	; 0x702 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6fc:	86 2f       	mov	r24, r22
     6fe:	93 2f       	mov	r25, r19
     700:	e1 cf       	rjmp	.-62     	; 0x6c4 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     702:	78 94       	sei
     704:	08 95       	ret

00000706 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     706:	08 95       	ret

00000708 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
		}
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     708:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     70a:	63 30       	cpi	r22, 0x03	; 3
     70c:	29 f4       	brne	.+10     	; 0x718 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     70e:	fa 01       	movw	r30, r20
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	1e 96       	adiw	r26, 0x0e	; 14
     714:	8c 93       	st	X, r24
     716:	1e 97       	sbiw	r26, 0x0e	; 14
	
	switch (PIC_ID)
     718:	1e 96       	adiw	r26, 0x0e	; 14
     71a:	4c 91       	ld	r20, X
     71c:	1e 97       	sbiw	r26, 0x0e	; 14
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	41 31       	cpi	r20, 0x11	; 17
     722:	51 05       	cpc	r21, r1
     724:	08 f0       	brcs	.+2      	; 0x728 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     726:	68 c0       	rjmp	.+208    	; 0x7f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf0>
     728:	fa 01       	movw	r30, r20
     72a:	88 27       	eor	r24, r24
     72c:	ec 50       	subi	r30, 0x0C	; 12
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	8f 4f       	sbci	r24, 0xFF	; 255
     732:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     736:	1c 96       	adiw	r26, 0x0c	; 12
     738:	1c 92       	st	X, r1
		break;
     73a:	08 95       	ret
		case PICID_WORKFAST:
			state = APP_WORKFAST;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	1c 96       	adiw	r26, 0x0c	; 12
     740:	8c 93       	st	X, r24
     742:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkFast)
     744:	1d 96       	adiw	r26, 0x0d	; 13
     746:	8c 91       	ld	r24, X
     748:	1d 97       	sbiw	r26, 0x0d	; 13
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x48>
     74e:	54 c0       	rjmp	.+168    	; 0x7f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf0>
			{
				profile = WorkFast;
     750:	1d 96       	adiw	r26, 0x0d	; 13
     752:	1c 92       	st	X, r1
     754:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	1f 96       	adiw	r26, 0x0f	; 15
     75a:	8c 93       	st	X, r24
     75c:	08 95       	ret
			}
		break;
		case PICID_WORKMEDIUM:
			state = APP_WORKMEDIUM;
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	1c 96       	adiw	r26, 0x0c	; 12
     762:	8c 93       	st	X, r24
     764:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkMedium)
     766:	1d 96       	adiw	r26, 0x0d	; 13
     768:	8c 91       	ld	r24, X
     76a:	1d 97       	sbiw	r26, 0x0d	; 13
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	09 f4       	brne	.+2      	; 0x772 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     770:	43 c0       	rjmp	.+134    	; 0x7f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf0>
			{
				profile = WorkMedium;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	1d 96       	adiw	r26, 0x0d	; 13
     776:	8c 93       	st	X, r24
     778:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     77a:	1f 96       	adiw	r26, 0x0f	; 15
     77c:	8c 93       	st	X, r24
     77e:	08 95       	ret
			}
		break;
		case PICID_WORKSLOW:
			state = APP_WORKSLOW;
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	1c 96       	adiw	r26, 0x0c	; 12
     784:	8c 93       	st	X, r24
     786:	1c 97       	sbiw	r26, 0x0c	; 12
			if (profile != WorkSlow)
     788:	1d 96       	adiw	r26, 0x0d	; 13
     78a:	8c 91       	ld	r24, X
     78c:	1d 97       	sbiw	r26, 0x0d	; 13
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	99 f1       	breq	.+102    	; 0x7f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xf0>
			{
				profile = WorkSlow;
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	1d 96       	adiw	r26, 0x0d	; 13
     796:	8c 93       	st	X, r24
     798:	1d 97       	sbiw	r26, 0x0d	; 13
				update = true;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	1f 96       	adiw	r26, 0x0f	; 15
     79e:	8c 93       	st	X, r24
     7a0:	08 95       	ret
			}
		break;
		case PICID_WORKOnReady:
			state = APP_WORKOnReady;
     7a2:	86 e0       	ldi	r24, 0x06	; 6
     7a4:	1c 96       	adiw	r26, 0x0c	; 12
     7a6:	8c 93       	st	X, r24
		break;
     7a8:	08 95       	ret
		case PICID_WORKSTART:
			state = APP_WORKSTART;
     7aa:	84 e0       	ldi	r24, 0x04	; 4
     7ac:	1c 96       	adiw	r26, 0x0c	; 12
     7ae:	8c 93       	st	X, r24
		break;
     7b0:	08 95       	ret
		case PICID_WORKOnStart:
			state = APP_WORKOnStart;
     7b2:	87 e0       	ldi	r24, 0x07	; 7
     7b4:	1c 96       	adiw	r26, 0x0c	; 12
     7b6:	8c 93       	st	X, r24
		break;
     7b8:	08 95       	ret
		case PICID_WORKSTARTED:
			state = APP_WORKSTARTED;
     7ba:	85 e0       	ldi	r24, 0x05	; 5
     7bc:	1c 96       	adiw	r26, 0x0c	; 12
     7be:	8c 93       	st	X, r24
		break;
     7c0:	08 95       	ret
		case PICID_PHOTOTYPESELECT:
			state = APP_PHOTOTYPESELECT;
     7c2:	88 e0       	ldi	r24, 0x08	; 8
     7c4:	1c 96       	adiw	r26, 0x0c	; 12
     7c6:	8c 93       	st	X, r24
		break;
     7c8:	08 95       	ret
		case PICID_PHOTOTYPE1:
			state = APP_PHOTOTYPE1;
     7ca:	89 e0       	ldi	r24, 0x09	; 9
     7cc:	1c 96       	adiw	r26, 0x0c	; 12
     7ce:	8c 93       	st	X, r24
		break;
     7d0:	08 95       	ret
		case PICID_PHOTOTYPE2:
			state = APP_PHOTOTYPE2;
     7d2:	8a e0       	ldi	r24, 0x0A	; 10
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8c 93       	st	X, r24
		break;
     7d8:	08 95       	ret
		case PICID_PHOTOTYPE3:
			state = APP_PHOTOTYPE3;
     7da:	8b e0       	ldi	r24, 0x0B	; 11
     7dc:	1c 96       	adiw	r26, 0x0c	; 12
     7de:	8c 93       	st	X, r24
		break;
     7e0:	08 95       	ret
		case PICID_PHOTOTYPE4:
			state = APP_PHOTOTYPE4;
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
     7e4:	1c 96       	adiw	r26, 0x0c	; 12
     7e6:	8c 93       	st	X, r24
		break;
     7e8:	08 95       	ret
		case PICID_PHOTOTYPE5:
			state = APP_PHOTOTYPE5;
     7ea:	8d e0       	ldi	r24, 0x0D	; 13
     7ec:	1c 96       	adiw	r26, 0x0c	; 12
     7ee:	8c 93       	st	X, r24
		break;
     7f0:	08 95       	ret
		case PICID_PHOTOTYPE6:
			state = APP_PHOTOTYPE6;
     7f2:	8e e0       	ldi	r24, 0x0E	; 14
     7f4:	1c 96       	adiw	r26, 0x0c	; 12
     7f6:	8c 93       	st	X, r24
     7f8:	08 95       	ret

000007fa <_ZN16CLaserControlApp13OnTimerStaticEPv>:
	timer.Stop();
	laserBoard.Relay1Off();
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
     7fa:	08 95       	ret

000007fc <_Z11ConvertDataPvS_j>:
	return (data >> 8) | (data << 8);
}

void ConvertData(void* dst, void* src, uint16_t size)
{
	uint16_t  length = size / 2;
     7fc:	56 95       	lsr	r21
     7fe:	47 95       	ror	r20
	uint16_t* source = (uint16_t*)src;
	uint16_t* dest = (uint16_t*)dst;
	
	// swap bytes in words
	for (uint16_t i = 0; i < length; i++)
     800:	41 15       	cp	r20, r1
     802:	51 05       	cpc	r21, r1
     804:	89 f0       	breq	.+34     	; 0x828 <_Z11ConvertDataPvS_j+0x2c>
     806:	fb 01       	movw	r30, r22
     808:	a8 2f       	mov	r26, r24
     80a:	b9 2f       	mov	r27, r25
     80c:	44 0f       	add	r20, r20
     80e:	55 1f       	adc	r21, r21
     810:	64 0f       	add	r22, r20
     812:	75 1f       	adc	r23, r21
		dest[i] = swap(source[i]);
     814:	81 91       	ld	r24, Z+
     816:	91 91       	ld	r25, Z+
volatile DGUS_DATA m_structDGUSDATA_Medium;
volatile DGUS_DATA m_structDGUSDATA_Slow;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     818:	98 27       	eor	r25, r24
     81a:	89 27       	eor	r24, r25
     81c:	98 27       	eor	r25, r24
	uint16_t* source = (uint16_t*)src;
	uint16_t* dest = (uint16_t*)dst;
	
	// swap bytes in words
	for (uint16_t i = 0; i < length; i++)
		dest[i] = swap(source[i]);
     81e:	8d 93       	st	X+, r24
     820:	9d 93       	st	X+, r25
	uint16_t  length = size / 2;
	uint16_t* source = (uint16_t*)src;
	uint16_t* dest = (uint16_t*)dst;
	
	// swap bytes in words
	for (uint16_t i = 0; i < length; i++)
     822:	e6 17       	cp	r30, r22
     824:	f7 07       	cpc	r31, r23
     826:	b1 f7       	brne	.-20     	; 0x814 <_Z11ConvertDataPvS_j+0x18>
     828:	08 95       	ret

0000082a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	//uint16_t val = swap(*((uint16_t*)data));
	
	if (addr == STRUCT_ADDR_DATA)
     82a:	61 30       	cpi	r22, 0x01	; 1
     82c:	71 05       	cpc	r23, r1
     82e:	19 f5       	brne	.+70     	; 0x876 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x4c>
     830:	ba 01       	movw	r22, r20
     832:	fc 01       	movw	r30, r24
	{
		//memcpy((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		//ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length);
		switch (profile)
     834:	85 85       	ldd	r24, Z+13	; 0x0d
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	a1 f0       	breq	.+40     	; 0x862 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x38>
     83a:	18 f0       	brcs	.+6      	; 0x842 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	49 f0       	breq	.+18     	; 0x852 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x28>
     840:	18 c0       	rjmp	.+48     	; 0x872 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x48>
		{
			case WorkFast:
				ConvertData((void*)&m_structDGUSDATA_Fast, (void*)data, length/2);
     842:	a9 01       	movw	r20, r18
     844:	56 95       	lsr	r21
     846:	47 95       	ror	r20
     848:	86 e2       	ldi	r24, 0x26	; 38
     84a:	91 e2       	ldi	r25, 0x21	; 33
     84c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_Z11ConvertDataPvS_j>
			break;
     850:	08 95       	ret
			case WorkSlow:
				ConvertData((void*)&m_structDGUSDATA_Slow, (void*)data, length/2);
     852:	a9 01       	movw	r20, r18
     854:	56 95       	lsr	r21
     856:	47 95       	ror	r20
     858:	8e e0       	ldi	r24, 0x0E	; 14
     85a:	91 e2       	ldi	r25, 0x21	; 33
     85c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_Z11ConvertDataPvS_j>
			break;
     860:	08 95       	ret
			case WorkMedium:
				ConvertData((void*)&m_structDGUSDATA_Medium, (void*)data, length/2);
     862:	a9 01       	movw	r20, r18
     864:	56 95       	lsr	r21
     866:	47 95       	ror	r20
     868:	8a e1       	ldi	r24, 0x1A	; 26
     86a:	91 e2       	ldi	r25, 0x21	; 33
     86c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_Z11ConvertDataPvS_j>
			break;
     870:	08 95       	ret
			default:
				// Error
				CLaserBoard::Beep();
     872:	0e 94 41 03 	call	0x682	; 0x682 <_ZN11CLaserBoard4BeepEv>
     876:	08 95       	ret

00000878 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     878:	22 e6       	ldi	r18, 0x62	; 98
     87a:	30 e2       	ldi	r19, 0x20	; 32
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	08 95       	ret

00000884 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     884:	22 e6       	ldi	r18, 0x62	; 98
     886:	30 e2       	ldi	r19, 0x20	; 32
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	31 83       	std	Z+1, r19	; 0x01
     88e:	0e 94 58 20 	call	0x40b0	; 0x40b0 <_ZN16CMBEventsHandlerD1Ev>
     892:	08 95       	ret

00000894 <_ZN16CLaserControlApp5StartEv>:
	// Current profile
	profile = WorkFast;
}

void CLaserControlApp::Start()
{	
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	1f 92       	push	r1
     89e:	1f 92       	push	r1
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     8ae:	22 e0       	ldi	r18, 0x02	; 2
     8b0:	ae 01       	movw	r20, r28
     8b2:	4f 5f       	subi	r20, 0xFF	; 255
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
     8b6:	63 e0       	ldi	r22, 0x03	; 3
     8b8:	f8 01       	movw	r30, r16
     8ba:	80 89       	ldd	r24, Z+16	; 0x10
     8bc:	91 89       	ldd	r25, Z+17	; 0x11
     8be:	0e 94 00 22 	call	0x4400	; 0x4400 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     8c2:	f8 01       	movw	r30, r16
     8c4:	80 89       	ldd	r24, Z+16	; 0x10
     8c6:	91 89       	ldd	r25, Z+17	; 0x11
     8c8:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(m_structDGUSDATA_Fast));
     8cc:	2c e0       	ldi	r18, 0x0C	; 12
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	46 e2       	ldi	r20, 0x26	; 38
     8d2:	51 e2       	ldi	r21, 0x21	; 33
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	f8 01       	movw	r30, r16
     8da:	80 89       	ldd	r24, Z+16	; 0x10
     8dc:	91 89       	ldd	r25, Z+17	; 0x11
     8de:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     8e2:	f8 01       	movw	r30, r16
     8e4:	80 89       	ldd	r24, Z+16	; 0x10
     8e6:	91 89       	ldd	r25, Z+17	; 0x11
     8e8:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_WORKFAST;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	f8 01       	movw	r30, r16
     8f0:	84 87       	std	Z+12, r24	; 0x0c
}
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <_ZN16CLaserControlApp3RunEv>:

// Process GUI
void CLaserControlApp::Run()
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	2c 97       	sbiw	r28, 0x0c	; 12
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	de bf       	out	0x3e, r29	; 62
     912:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     914:	42 e0       	ldi	r20, 0x02	; 2
     916:	63 e0       	ldi	r22, 0x03	; 3
     918:	fc 01       	movw	r30, r24
     91a:	80 89       	ldd	r24, Z+16	; 0x10
     91c:	91 89       	ldd	r25, Z+17	; 0x11
     91e:	0e 94 4e 22 	call	0x449c	; 0x449c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     922:	f8 01       	movw	r30, r16
     924:	80 89       	ldd	r24, Z+16	; 0x10
     926:	91 89       	ldd	r25, Z+17	; 0x11
     928:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     92c:	f8 01       	movw	r30, r16
     92e:	80 89       	ldd	r24, Z+16	; 0x10
     930:	91 89       	ldd	r25, Z+17	; 0x11
     932:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN9CMBSender18WaitMODBUSListenerEv>
     936:	ff ef       	ldi	r31, 0xFF	; 255
     938:	21 ee       	ldi	r18, 0xE1	; 225
     93a:	84 e0       	ldi	r24, 0x04	; 4
     93c:	f1 50       	subi	r31, 0x01	; 1
     93e:	20 40       	sbci	r18, 0x00	; 0
     940:	80 40       	sbci	r24, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <_ZN16CLaserControlApp3RunEv+0x3c>
     944:	00 c0       	rjmp	.+0      	; 0x946 <_ZN16CLaserControlApp3RunEv+0x46>
     946:	00 00       	nop
	_delay_ms(50);
	
	if (!update)
     948:	f8 01       	movw	r30, r16
     94a:	87 85       	ldd	r24, Z+15	; 0x0f
     94c:	81 11       	cpse	r24, r1
     94e:	1a c0       	rjmp	.+52     	; 0x984 <_ZN16CLaserControlApp3RunEv+0x84>
	{
		// Get variables 
		m_cpSender->StartMODBUSVariableTransaction(STRUCT_ADDR_DATA, sizeof(DGUS_DATA));
     950:	4c e0       	ldi	r20, 0x0C	; 12
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 89       	ldd	r24, Z+16	; 0x10
     958:	91 89       	ldd	r25, Z+17	; 0x11
     95a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
		m_cpSender->WaitMODBUSTransmitter();
     95e:	f8 01       	movw	r30, r16
     960:	80 89       	ldd	r24, Z+16	; 0x10
     962:	91 89       	ldd	r25, Z+17	; 0x11
     964:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		m_cpSender->WaitMODBUSListener();
     968:	f8 01       	movw	r30, r16
     96a:	80 89       	ldd	r24, Z+16	; 0x10
     96c:	91 89       	ldd	r25, Z+17	; 0x11
     96e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN9CMBSender18WaitMODBUSListenerEv>
     972:	ff ef       	ldi	r31, 0xFF	; 255
     974:	21 ee       	ldi	r18, 0xE1	; 225
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	f1 50       	subi	r31, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <_ZN16CLaserControlApp3RunEv+0x78>
     980:	00 c0       	rjmp	.+0      	; 0x982 <_ZN16CLaserControlApp3RunEv+0x82>
     982:	00 00       	nop
		_delay_ms(50);
	}
	
	switch (state)
     984:	f8 01       	movw	r30, r16
     986:	84 85       	ldd	r24, Z+12	; 0x0c
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	8f 30       	cpi	r24, 0x0F	; 15
     98c:	91 05       	cpc	r25, r1
     98e:	08 f0       	brcs	.+2      	; 0x992 <_ZN16CLaserControlApp3RunEv+0x92>
     990:	42 c0       	rjmp	.+132    	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
     992:	fc 01       	movw	r30, r24
     994:	88 27       	eor	r24, r24
     996:	eb 5f       	subi	r30, 0xFB	; 251
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	8f 4f       	sbci	r24, 0xFF	; 255
     99c:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__tablejump2__>
	{		
		// DGUS State
		case APP_LOGO:
			state = APP_WORKFAST;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	f8 01       	movw	r30, r16
     9a4:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9a6:	37 c0       	rjmp	.+110    	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_WORKFAST:
			state = APP_WORKFAST;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	f8 01       	movw	r30, r16
     9ac:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9ae:	33 c0       	rjmp	.+102    	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_WORKMEDIUM:
			state = APP_WORKFAST;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	f8 01       	movw	r30, r16
     9b4:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9b6:	2f c0       	rjmp	.+94     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_WORKSLOW:
			state = APP_WORKFAST;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	f8 01       	movw	r30, r16
     9bc:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9be:	2b c0       	rjmp	.+86     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_WORKSTART:
			state = APP_WORKFAST;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	f8 01       	movw	r30, r16
     9c4:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9c6:	27 c0       	rjmp	.+78     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_WORKSTARTED:
			state = APP_WORKFAST;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	f8 01       	movw	r30, r16
     9cc:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9ce:	23 c0       	rjmp	.+70     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		
		// Commands
		case APP_WORKOnReady:
			state = APP_WORKFAST;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	f8 01       	movw	r30, r16
     9d4:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9d6:	1f c0       	rjmp	.+62     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_WORKOnStart:
			state = APP_WORKFAST;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	f8 01       	movw	r30, r16
     9dc:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9de:	1b c0       	rjmp	.+54     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		
		// Phototype selector state
		case APP_PHOTOTYPESELECT:
			state = APP_WORKFAST;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	f8 01       	movw	r30, r16
     9e4:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9e6:	17 c0       	rjmp	.+46     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_PHOTOTYPE1:
			state = APP_WORKFAST;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	f8 01       	movw	r30, r16
     9ec:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9ee:	13 c0       	rjmp	.+38     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_PHOTOTYPE2:
			state = APP_WORKFAST;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	f8 01       	movw	r30, r16
     9f4:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9f6:	0f c0       	rjmp	.+30     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_PHOTOTYPE3:
			state = APP_WORKFAST;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	f8 01       	movw	r30, r16
     9fc:	84 87       	std	Z+12, r24	; 0x0c
		break;
     9fe:	0b c0       	rjmp	.+22     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_PHOTOTYPE4:
			state = APP_WORKFAST;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	f8 01       	movw	r30, r16
     a04:	84 87       	std	Z+12, r24	; 0x0c
		break;
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_PHOTOTYPE5:
			state = APP_WORKFAST;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	f8 01       	movw	r30, r16
     a0c:	84 87       	std	Z+12, r24	; 0x0c
		break;
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <_ZN16CLaserControlApp3RunEv+0x116>
		case APP_PHOTOTYPE6:
			state = APP_WORKFAST;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	f8 01       	movw	r30, r16
     a14:	84 87       	std	Z+12, r24	; 0x0c
		break;
	}
	
	DGUS_DATA DGUSDATA;
	
	if (update)
     a16:	f8 01       	movw	r30, r16
     a18:	87 85       	ldd	r24, Z+15	; 0x0f
     a1a:	88 23       	and	r24, r24
     a1c:	91 f1       	breq	.+100    	; 0xa82 <_ZN16CLaserControlApp3RunEv+0x182>
	{
		switch (profile)
     a1e:	85 85       	ldd	r24, Z+13	; 0x0d
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	e1 f0       	breq	.+56     	; 0xa5c <_ZN16CLaserControlApp3RunEv+0x15c>
     a24:	18 f0       	brcs	.+6      	; 0xa2c <_ZN16CLaserControlApp3RunEv+0x12c>
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	69 f0       	breq	.+26     	; 0xa44 <_ZN16CLaserControlApp3RunEv+0x144>
     a2a:	23 c0       	rjmp	.+70     	; 0xa72 <_ZN16CLaserControlApp3RunEv+0x172>
		{
			case WorkFast:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Fast, sizeof(DGUS_DATA));
     a2c:	2c e0       	ldi	r18, 0x0C	; 12
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	46 e2       	ldi	r20, 0x26	; 38
     a32:	51 e2       	ldi	r21, 0x21	; 33
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	f8 01       	movw	r30, r16
     a3a:	80 89       	ldd	r24, Z+16	; 0x10
     a3c:	91 89       	ldd	r25, Z+17	; 0x11
     a3e:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <_ZN16CLaserControlApp3RunEv+0x172>
			case WorkSlow:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Slow, sizeof(DGUS_DATA));
     a44:	2c e0       	ldi	r18, 0x0C	; 12
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	4e e0       	ldi	r20, 0x0E	; 14
     a4a:	51 e2       	ldi	r21, 0x21	; 33
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	f8 01       	movw	r30, r16
     a52:	80 89       	ldd	r24, Z+16	; 0x10
     a54:	91 89       	ldd	r25, Z+17	; 0x11
     a56:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
     a5a:	0b c0       	rjmp	.+22     	; 0xa72 <_ZN16CLaserControlApp3RunEv+0x172>
			case WorkMedium:
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_DATA, (uint16_t*)&m_structDGUSDATA_Medium, sizeof(DGUS_DATA));
     a5c:	2c e0       	ldi	r18, 0x0C	; 12
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	4a e1       	ldi	r20, 0x1A	; 26
     a62:	51 e2       	ldi	r21, 0x21	; 33
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	f8 01       	movw	r30, r16
     a6a:	80 89       	ldd	r24, Z+16	; 0x10
     a6c:	91 89       	ldd	r25, Z+17	; 0x11
     a6e:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
     a72:	f8 01       	movw	r30, r16
     a74:	80 89       	ldd	r24, Z+16	; 0x10
     a76:	91 89       	ldd	r25, Z+17	; 0x11
     a78:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		update = false;
     a7c:	f8 01       	movw	r30, r16
     a7e:	17 86       	std	Z+15, r1	; 0x0f
     a80:	1c c1       	rjmp	.+568    	; 0xcba <_ZN16CLaserControlApp3RunEv+0x3ba>
	}
	else
	{
		switch (profile)
     a82:	f8 01       	movw	r30, r16
     a84:	85 85       	ldd	r24, Z+13	; 0x0d
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	09 f4       	brne	.+2      	; 0xa8c <_ZN16CLaserControlApp3RunEv+0x18c>
     a8a:	b9 c0       	rjmp	.+370    	; 0xbfe <_ZN16CLaserControlApp3RunEv+0x2fe>
     a8c:	20 f0       	brcs	.+8      	; 0xa96 <_ZN16CLaserControlApp3RunEv+0x196>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	09 f4       	brne	.+2      	; 0xa94 <_ZN16CLaserControlApp3RunEv+0x194>
     a92:	5b c0       	rjmp	.+182    	; 0xb4a <_ZN16CLaserControlApp3RunEv+0x24a>
     a94:	0d c1       	rjmp	.+538    	; 0xcb0 <_ZN16CLaserControlApp3RunEv+0x3b0>
		{
			case WorkFast:
				// Fast profile			
				DGUSDATA.DutyCycle = m_structDGUSDATA_Fast.Duration * m_structDGUSDATA_Fast.Frequency / 10;
     a96:	e6 e2       	ldi	r30, 0x26	; 38
     a98:	f1 e2       	ldi	r31, 0x21	; 33
     a9a:	82 81       	ldd	r24, Z+2	; 0x02
     a9c:	93 81       	ldd	r25, Z+3	; 0x03
     a9e:	40 81       	ld	r20, Z
     aa0:	51 81       	ldd	r21, Z+1	; 0x01
     aa2:	48 9f       	mul	r20, r24
     aa4:	90 01       	movw	r18, r0
     aa6:	49 9f       	mul	r20, r25
     aa8:	30 0d       	add	r19, r0
     aaa:	58 9f       	mul	r21, r24
     aac:	30 0d       	add	r19, r0
     aae:	11 24       	eor	r1, r1
     ab0:	ad ec       	ldi	r26, 0xCD	; 205
     ab2:	bc ec       	ldi	r27, 0xCC	; 204
     ab4:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     ab8:	96 95       	lsr	r25
     aba:	87 95       	ror	r24
     abc:	96 95       	lsr	r25
     abe:	87 95       	ror	r24
     ac0:	96 95       	lsr	r25
     ac2:	87 95       	ror	r24
     ac4:	8b 87       	std	Y+11, r24	; 0x0b
     ac6:	9c 87       	std	Y+12, r25	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100;
     ac8:	84 81       	ldd	r24, Z+4	; 0x04
     aca:	95 81       	ldd	r25, Z+5	; 0x05
     acc:	42 85       	ldd	r20, Z+10	; 0x0a
     ace:	53 85       	ldd	r21, Z+11	; 0x0b
     ad0:	48 9f       	mul	r20, r24
     ad2:	90 01       	movw	r18, r0
     ad4:	49 9f       	mul	r20, r25
     ad6:	30 0d       	add	r19, r0
     ad8:	58 9f       	mul	r21, r24
     ada:	30 0d       	add	r19, r0
     adc:	11 24       	eor	r1, r1
     ade:	36 95       	lsr	r19
     ae0:	27 95       	ror	r18
     ae2:	36 95       	lsr	r19
     ae4:	27 95       	ror	r18
     ae6:	ab e7       	ldi	r26, 0x7B	; 123
     ae8:	b4 e1       	ldi	r27, 0x14	; 20
     aea:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	8f 83       	std	Y+7, r24	; 0x07
     af4:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration / 1000;
     af6:	84 81       	ldd	r24, Z+4	; 0x04
     af8:	95 81       	ldd	r25, Z+5	; 0x05
     afa:	42 81       	ldd	r20, Z+2	; 0x02
     afc:	53 81       	ldd	r21, Z+3	; 0x03
     afe:	48 9f       	mul	r20, r24
     b00:	90 01       	movw	r18, r0
     b02:	49 9f       	mul	r20, r25
     b04:	30 0d       	add	r19, r0
     b06:	58 9f       	mul	r21, r24
     b08:	30 0d       	add	r19, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	36 95       	lsr	r19
     b0e:	27 95       	ror	r18
     b10:	36 95       	lsr	r19
     b12:	27 95       	ror	r18
     b14:	36 95       	lsr	r19
     b16:	27 95       	ror	r18
     b18:	a5 ec       	ldi	r26, 0xC5	; 197
     b1a:	b0 e2       	ldi	r27, 0x20	; 32
     b1c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     b20:	92 95       	swap	r25
     b22:	82 95       	swap	r24
     b24:	8f 70       	andi	r24, 0x0F	; 15
     b26:	89 27       	eor	r24, r25
     b28:	9f 70       	andi	r25, 0x0F	; 15
     b2a:	89 27       	eor	r24, r25
     b2c:	89 87       	std	Y+9, r24	; 0x09
     b2e:	9a 87       	std	Y+10, r25	; 0x0a
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
     b30:	26 e0       	ldi	r18, 0x06	; 6
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	ae 01       	movw	r20, r28
     b36:	49 5f       	subi	r20, 0xF9	; 249
     b38:	5f 4f       	sbci	r21, 0xFF	; 255
     b3a:	64 e0       	ldi	r22, 0x04	; 4
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	f8 01       	movw	r30, r16
     b40:	80 89       	ldd	r24, Z+16	; 0x10
     b42:	91 89       	ldd	r25, Z+17	; 0x11
     b44:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
     b48:	b3 c0       	rjmp	.+358    	; 0xcb0 <_ZN16CLaserControlApp3RunEv+0x3b0>
			case WorkSlow:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Slow.Duration * m_structDGUSDATA_Slow.Frequency / 10;
     b4a:	ee e0       	ldi	r30, 0x0E	; 14
     b4c:	f1 e2       	ldi	r31, 0x21	; 33
     b4e:	82 81       	ldd	r24, Z+2	; 0x02
     b50:	93 81       	ldd	r25, Z+3	; 0x03
     b52:	40 81       	ld	r20, Z
     b54:	51 81       	ldd	r21, Z+1	; 0x01
     b56:	48 9f       	mul	r20, r24
     b58:	90 01       	movw	r18, r0
     b5a:	49 9f       	mul	r20, r25
     b5c:	30 0d       	add	r19, r0
     b5e:	58 9f       	mul	r21, r24
     b60:	30 0d       	add	r19, r0
     b62:	11 24       	eor	r1, r1
     b64:	ad ec       	ldi	r26, 0xCD	; 205
     b66:	bc ec       	ldi	r27, 0xCC	; 204
     b68:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	96 95       	lsr	r25
     b72:	87 95       	ror	r24
     b74:	96 95       	lsr	r25
     b76:	87 95       	ror	r24
     b78:	8b 87       	std	Y+11, r24	; 0x0b
     b7a:	9c 87       	std	Y+12, r25	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100;
     b7c:	84 81       	ldd	r24, Z+4	; 0x04
     b7e:	95 81       	ldd	r25, Z+5	; 0x05
     b80:	42 85       	ldd	r20, Z+10	; 0x0a
     b82:	53 85       	ldd	r21, Z+11	; 0x0b
     b84:	48 9f       	mul	r20, r24
     b86:	90 01       	movw	r18, r0
     b88:	49 9f       	mul	r20, r25
     b8a:	30 0d       	add	r19, r0
     b8c:	58 9f       	mul	r21, r24
     b8e:	30 0d       	add	r19, r0
     b90:	11 24       	eor	r1, r1
     b92:	36 95       	lsr	r19
     b94:	27 95       	ror	r18
     b96:	36 95       	lsr	r19
     b98:	27 95       	ror	r18
     b9a:	ab e7       	ldi	r26, 0x7B	; 123
     b9c:	b4 e1       	ldi	r27, 0x14	; 20
     b9e:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	8f 83       	std	Y+7, r24	; 0x07
     ba8:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration / 1000;
     baa:	84 81       	ldd	r24, Z+4	; 0x04
     bac:	95 81       	ldd	r25, Z+5	; 0x05
     bae:	42 81       	ldd	r20, Z+2	; 0x02
     bb0:	53 81       	ldd	r21, Z+3	; 0x03
     bb2:	48 9f       	mul	r20, r24
     bb4:	90 01       	movw	r18, r0
     bb6:	49 9f       	mul	r20, r25
     bb8:	30 0d       	add	r19, r0
     bba:	58 9f       	mul	r21, r24
     bbc:	30 0d       	add	r19, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	36 95       	lsr	r19
     bc2:	27 95       	ror	r18
     bc4:	36 95       	lsr	r19
     bc6:	27 95       	ror	r18
     bc8:	36 95       	lsr	r19
     bca:	27 95       	ror	r18
     bcc:	a5 ec       	ldi	r26, 0xC5	; 197
     bce:	b0 e2       	ldi	r27, 0x20	; 32
     bd0:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     bd4:	92 95       	swap	r25
     bd6:	82 95       	swap	r24
     bd8:	8f 70       	andi	r24, 0x0F	; 15
     bda:	89 27       	eor	r24, r25
     bdc:	9f 70       	andi	r25, 0x0F	; 15
     bde:	89 27       	eor	r24, r25
     be0:	89 87       	std	Y+9, r24	; 0x09
     be2:	9a 87       	std	Y+10, r25	; 0x0a
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
     be4:	26 e0       	ldi	r18, 0x06	; 6
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	ae 01       	movw	r20, r28
     bea:	49 5f       	subi	r20, 0xF9	; 249
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	64 e0       	ldi	r22, 0x04	; 4
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 89       	ldd	r24, Z+16	; 0x10
     bf6:	91 89       	ldd	r25, Z+17	; 0x11
     bf8:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
     bfc:	59 c0       	rjmp	.+178    	; 0xcb0 <_ZN16CLaserControlApp3RunEv+0x3b0>
			case WorkMedium:
				// Fast profile
				DGUSDATA.DutyCycle = m_structDGUSDATA_Medium.Duration * m_structDGUSDATA_Medium.Frequency / 10;
     bfe:	ea e1       	ldi	r30, 0x1A	; 26
     c00:	f1 e2       	ldi	r31, 0x21	; 33
     c02:	82 81       	ldd	r24, Z+2	; 0x02
     c04:	93 81       	ldd	r25, Z+3	; 0x03
     c06:	40 81       	ld	r20, Z
     c08:	51 81       	ldd	r21, Z+1	; 0x01
     c0a:	48 9f       	mul	r20, r24
     c0c:	90 01       	movw	r18, r0
     c0e:	49 9f       	mul	r20, r25
     c10:	30 0d       	add	r19, r0
     c12:	58 9f       	mul	r21, r24
     c14:	30 0d       	add	r19, r0
     c16:	11 24       	eor	r1, r1
     c18:	ad ec       	ldi	r26, 0xCD	; 205
     c1a:	bc ec       	ldi	r27, 0xCC	; 204
     c1c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	8b 87       	std	Y+11, r24	; 0x0b
     c2e:	9c 87       	std	Y+12, r25	; 0x0c
				DGUSDATA.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100;
     c30:	84 81       	ldd	r24, Z+4	; 0x04
     c32:	95 81       	ldd	r25, Z+5	; 0x05
     c34:	42 85       	ldd	r20, Z+10	; 0x0a
     c36:	53 85       	ldd	r21, Z+11	; 0x0b
     c38:	48 9f       	mul	r20, r24
     c3a:	90 01       	movw	r18, r0
     c3c:	49 9f       	mul	r20, r25
     c3e:	30 0d       	add	r19, r0
     c40:	58 9f       	mul	r21, r24
     c42:	30 0d       	add	r19, r0
     c44:	11 24       	eor	r1, r1
     c46:	36 95       	lsr	r19
     c48:	27 95       	ror	r18
     c4a:	36 95       	lsr	r19
     c4c:	27 95       	ror	r18
     c4e:	ab e7       	ldi	r26, 0x7B	; 123
     c50:	b4 e1       	ldi	r27, 0x14	; 20
     c52:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	8f 83       	std	Y+7, r24	; 0x07
     c5c:	98 87       	std	Y+8, r25	; 0x08
				DGUSDATA.Energy    = m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration / 1000;
     c5e:	84 81       	ldd	r24, Z+4	; 0x04
     c60:	95 81       	ldd	r25, Z+5	; 0x05
     c62:	42 81       	ldd	r20, Z+2	; 0x02
     c64:	53 81       	ldd	r21, Z+3	; 0x03
     c66:	48 9f       	mul	r20, r24
     c68:	90 01       	movw	r18, r0
     c6a:	49 9f       	mul	r20, r25
     c6c:	30 0d       	add	r19, r0
     c6e:	58 9f       	mul	r21, r24
     c70:	30 0d       	add	r19, r0
     c72:	11 24       	eor	r1, r1
     c74:	36 95       	lsr	r19
     c76:	27 95       	ror	r18
     c78:	36 95       	lsr	r19
     c7a:	27 95       	ror	r18
     c7c:	36 95       	lsr	r19
     c7e:	27 95       	ror	r18
     c80:	a5 ec       	ldi	r26, 0xC5	; 197
     c82:	b0 e2       	ldi	r27, 0x20	; 32
     c84:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     c88:	92 95       	swap	r25
     c8a:	82 95       	swap	r24
     c8c:	8f 70       	andi	r24, 0x0F	; 15
     c8e:	89 27       	eor	r24, r25
     c90:	9f 70       	andi	r25, 0x0F	; 15
     c92:	89 27       	eor	r24, r25
     c94:	89 87       	std	Y+9, r24	; 0x09
     c96:	9a 87       	std	Y+10, r25	; 0x0a
				
				m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_WRITEDATA, (uint16_t*)&DGUSDATA.Power, sizeof(DGUS_WRITEDATA));
     c98:	26 e0       	ldi	r18, 0x06	; 6
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	ae 01       	movw	r20, r28
     c9e:	49 5f       	subi	r20, 0xF9	; 249
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	64 e0       	ldi	r22, 0x04	; 4
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 89       	ldd	r24, Z+16	; 0x10
     caa:	91 89       	ldd	r25, Z+17	; 0x11
     cac:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			break;
		}
		m_cpSender->WaitMODBUSTransmitter();
     cb0:	f8 01       	movw	r30, r16
     cb2:	80 89       	ldd	r24, Z+16	; 0x10
     cb4:	91 89       	ldd	r25, Z+17	; 0x11
     cb6:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	}
}
     cba:	2c 96       	adiw	r28, 0x0c	; 12
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <_ZN16CLaserControlApp12OnLaserTimerEv>:
{
}

void CLaserControlApp::OnLaserTimer()
{
	player.SoundStart(1000, 5, 0);
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	45 e0       	ldi	r20, 0x05	; 5
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	68 ee       	ldi	r22, 0xE8	; 232
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	88 e3       	ldi	r24, 0x38	; 56
     cd6:	93 e2       	ldi	r25, 0x23	; 35
     cd8:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN12CSoundPlayer10SoundStartEjjh>
	player.SoundStop();
     cdc:	88 e3       	ldi	r24, 0x38	; 56
     cde:	93 e2       	ldi	r25, 0x23	; 35
     ce0:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN12CSoundPlayer9SoundStopEv>
     ce4:	08 95       	ret

00000ce6 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimer();
     ce6:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN16CLaserControlApp12OnLaserTimerEv>
     cea:	08 95       	ret

00000cec <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     cec:	85 e3       	ldi	r24, 0x35	; 53
     cee:	91 e2       	ldi	r25, 0x21	; 33
     cf0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
     cf4:	82 e3       	ldi	r24, 0x32	; 50
     cf6:	91 e2       	ldi	r25, 0x21	; 33
     cf8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7CTimerFC1Ev>
     cfc:	08 95       	ret

00000cfe <_GLOBAL__sub_D_timer>:
     cfe:	82 e3       	ldi	r24, 0x32	; 50
     d00:	91 e2       	ldi	r25, 0x21	; 33
     d02:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN7CTimerFD1Ev>
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <string.h>
#include <util/delay.h>

CTimerC timer;
     d06:	85 e3       	ldi	r24, 0x35	; 53
     d08:	91 e2       	ldi	r25, 0x21	; 33
     d0a:	0e 94 85 09 	call	0x130a	; 0x130a <_ZN7CTimerCD1Ev>
     d0e:	08 95       	ret

00000d10 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     d2a:	68 8b       	std	Y+16, r22	; 0x10
     d2c:	79 8b       	std	Y+17, r23	; 0x11
	
	// Initialize timer
	timer.Initialize(WGM_Normal, CS_DIV256);
     d2e:	46 e0       	ldi	r20, 0x06	; 6
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	85 e3       	ldi	r24, 0x35	; 53
     d34:	91 e2       	ldi	r25, 0x21	; 33
     d36:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     d3a:	68 ea       	ldi	r22, 0xA8	; 168
     d3c:	71 e6       	ldi	r23, 0x61	; 97
     d3e:	85 e3       	ldi	r24, 0x35	; 53
     d40:	91 e2       	ldi	r25, 0x21	; 33
     d42:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	ae 01       	movw	r20, r28
     d4a:	6d ef       	ldi	r22, 0xFD	; 253
     d4c:	73 e0       	ldi	r23, 0x03	; 3
     d4e:	85 e3       	ldi	r24, 0x35	; 53
     d50:	91 e2       	ldi	r25, 0x21	; 33
     d52:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
     d56:	47 e0       	ldi	r20, 0x07	; 7
     d58:	63 e0       	ldi	r22, 0x03	; 3
     d5a:	82 e3       	ldi	r24, 0x32	; 50
     d5c:	91 e2       	ldi	r25, 0x21	; 33
     d5e:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(12500);	// 10 Hz
     d62:	64 ed       	ldi	r22, 0xD4	; 212
     d64:	70 e3       	ldi	r23, 0x30	; 48
     d66:	82 e3       	ldi	r24, 0x32	; 50
     d68:	91 e2       	ldi	r25, 0x21	; 33
     d6a:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(3125);	// 50 ms, 50% duty cycle
     d6e:	65 e3       	ldi	r22, 0x35	; 53
     d70:	7c e0       	ldi	r23, 0x0C	; 12
     d72:	82 e3       	ldi	r24, 0x32	; 50
     d74:	91 e2       	ldi	r25, 0x21	; 33
     d76:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	ae 01       	movw	r20, r28
     d7e:	63 e7       	ldi	r22, 0x73	; 115
     d80:	76 e0       	ldi	r23, 0x06	; 6
     d82:	82 e3       	ldi	r24, 0x32	; 50
     d84:	91 e2       	ldi	r25, 0x21	; 33
     d86:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
     d8a:	60 e1       	ldi	r22, 0x10	; 16
     d8c:	82 e3       	ldi	r24, 0x32	; 50
     d8e:	91 e2       	ldi	r25, 0x21	; 33
     d90:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	
	// Set global variables
	PIC_ID = 0;
     d94:	1e 86       	std	Y+14, r1	; 0x0e
	update = false;
     d96:	1f 86       	std	Y+15, r1	; 0x0f
	
	// Fast profile
	m_structDGUSDATA_Fast.Frequency = 10; // 10 Hz
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f1 e2       	ldi	r31, 0x21	; 33
     d9c:	0f 2e       	mov	r0, r31
     d9e:	fa e0       	ldi	r31, 0x0A	; 10
     da0:	af 2e       	mov	r10, r31
     da2:	b1 2c       	mov	r11, r1
     da4:	f0 2d       	mov	r31, r0
     da6:	a0 82       	st	Z, r10
     da8:	b1 82       	std	Z+1, r11	; 0x01
	m_structDGUSDATA_Fast.DutyCycle = 50; // 50%
     daa:	0f 2e       	mov	r0, r31
     dac:	f2 e3       	ldi	r31, 0x32	; 50
     dae:	cf 2e       	mov	r12, r31
     db0:	d1 2c       	mov	r13, r1
     db2:	f0 2d       	mov	r31, r0
     db4:	c2 86       	std	Z+10, r12	; 0x0a
     db6:	d3 86       	std	Z+11, r13	; 0x0b
	m_structDGUSDATA_Fast.Duration  = ((1000 / m_structDGUSDATA_Fast.Frequency) * m_structDGUSDATA_Fast.DutyCycle) / 100; // ms
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	02 85       	ldd	r16, Z+10	; 0x0a
     dbe:	13 85       	ldd	r17, Z+11	; 0x0b
     dc0:	0f 2e       	mov	r0, r31
     dc2:	f8 ee       	ldi	r31, 0xE8	; 232
     dc4:	ef 2e       	mov	r14, r31
     dc6:	f3 e0       	ldi	r31, 0x03	; 3
     dc8:	ff 2e       	mov	r15, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	c7 01       	movw	r24, r14
     dce:	0e 94 a1 24 	call	0x4942	; 0x4942 <__udivmodhi4>
     dd2:	60 9f       	mul	r22, r16
     dd4:	90 01       	movw	r18, r0
     dd6:	61 9f       	mul	r22, r17
     dd8:	30 0d       	add	r19, r0
     dda:	70 9f       	mul	r23, r16
     ddc:	30 0d       	add	r19, r0
     dde:	11 24       	eor	r1, r1
     de0:	36 95       	lsr	r19
     de2:	27 95       	ror	r18
     de4:	36 95       	lsr	r19
     de6:	27 95       	ror	r18
     de8:	ab e7       	ldi	r26, 0x7B	; 123
     dea:	b4 e1       	ldi	r27, 0x14	; 20
     dec:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	82 83       	std	Z+2, r24	; 0x02
     df6:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Fast.Intensity = 200; // W
     df8:	08 ec       	ldi	r16, 0xC8	; 200
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	04 83       	std	Z+4, r16	; 0x04
     dfe:	15 83       	std	Z+5, r17	; 0x05
	m_structDGUSDATA_Fast.Power     = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.DutyCycle) / 100; // W
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	42 85       	ldd	r20, Z+10	; 0x0a
     e06:	53 85       	ldd	r21, Z+11	; 0x0b
     e08:	48 9f       	mul	r20, r24
     e0a:	90 01       	movw	r18, r0
     e0c:	49 9f       	mul	r20, r25
     e0e:	30 0d       	add	r19, r0
     e10:	58 9f       	mul	r21, r24
     e12:	30 0d       	add	r19, r0
     e14:	11 24       	eor	r1, r1
     e16:	36 95       	lsr	r19
     e18:	27 95       	ror	r18
     e1a:	36 95       	lsr	r19
     e1c:	27 95       	ror	r18
     e1e:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	86 83       	std	Z+6, r24	; 0x06
     e28:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Fast.Energy    = (m_structDGUSDATA_Fast.Intensity * m_structDGUSDATA_Fast.Duration) / 1000; // J
     e2a:	84 81       	ldd	r24, Z+4	; 0x04
     e2c:	95 81       	ldd	r25, Z+5	; 0x05
     e2e:	42 81       	ldd	r20, Z+2	; 0x02
     e30:	53 81       	ldd	r21, Z+3	; 0x03
     e32:	48 9f       	mul	r20, r24
     e34:	90 01       	movw	r18, r0
     e36:	49 9f       	mul	r20, r25
     e38:	30 0d       	add	r19, r0
     e3a:	58 9f       	mul	r21, r24
     e3c:	30 0d       	add	r19, r0
     e3e:	11 24       	eor	r1, r1
     e40:	36 95       	lsr	r19
     e42:	27 95       	ror	r18
     e44:	36 95       	lsr	r19
     e46:	27 95       	ror	r18
     e48:	36 95       	lsr	r19
     e4a:	27 95       	ror	r18
     e4c:	a5 ec       	ldi	r26, 0xC5	; 197
     e4e:	b0 e2       	ldi	r27, 0x20	; 32
     e50:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     e54:	92 95       	swap	r25
     e56:	82 95       	swap	r24
     e58:	8f 70       	andi	r24, 0x0F	; 15
     e5a:	89 27       	eor	r24, r25
     e5c:	9f 70       	andi	r25, 0x0F	; 15
     e5e:	89 27       	eor	r24, r25
     e60:	80 87       	std	Z+8, r24	; 0x08
     e62:	91 87       	std	Z+9, r25	; 0x09
	
	// Slow profile
	m_structDGUSDATA_Slow.Frequency = 10; // 10 Hz
     e64:	ee e0       	ldi	r30, 0x0E	; 14
     e66:	f1 e2       	ldi	r31, 0x21	; 33
     e68:	a0 82       	st	Z, r10
     e6a:	b1 82       	std	Z+1, r11	; 0x01
	m_structDGUSDATA_Slow.DutyCycle = 50; // 50%
     e6c:	c2 86       	std	Z+10, r12	; 0x0a
     e6e:	d3 86       	std	Z+11, r13	; 0x0b
	m_structDGUSDATA_Slow.Duration  = ((1000 / m_structDGUSDATA_Slow.Frequency) * m_structDGUSDATA_Slow.DutyCycle) / 100; // ms
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 84       	ldd	r8, Z+10	; 0x0a
     e76:	93 84       	ldd	r9, Z+11	; 0x0b
     e78:	c7 01       	movw	r24, r14
     e7a:	0e 94 a1 24 	call	0x4942	; 0x4942 <__udivmodhi4>
     e7e:	68 9d       	mul	r22, r8
     e80:	90 01       	movw	r18, r0
     e82:	69 9d       	mul	r22, r9
     e84:	30 0d       	add	r19, r0
     e86:	78 9d       	mul	r23, r8
     e88:	30 0d       	add	r19, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	36 95       	lsr	r19
     e8e:	27 95       	ror	r18
     e90:	36 95       	lsr	r19
     e92:	27 95       	ror	r18
     e94:	ab e7       	ldi	r26, 0x7B	; 123
     e96:	b4 e1       	ldi	r27, 0x14	; 20
     e98:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	82 83       	std	Z+2, r24	; 0x02
     ea2:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Slow.Intensity = 200; // W
     ea4:	04 83       	std	Z+4, r16	; 0x04
     ea6:	15 83       	std	Z+5, r17	; 0x05
	m_structDGUSDATA_Slow.Power     = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.DutyCycle) / 100; // W
     ea8:	84 81       	ldd	r24, Z+4	; 0x04
     eaa:	95 81       	ldd	r25, Z+5	; 0x05
     eac:	42 85       	ldd	r20, Z+10	; 0x0a
     eae:	53 85       	ldd	r21, Z+11	; 0x0b
     eb0:	48 9f       	mul	r20, r24
     eb2:	90 01       	movw	r18, r0
     eb4:	49 9f       	mul	r20, r25
     eb6:	30 0d       	add	r19, r0
     eb8:	58 9f       	mul	r21, r24
     eba:	30 0d       	add	r19, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	36 95       	lsr	r19
     ec0:	27 95       	ror	r18
     ec2:	36 95       	lsr	r19
     ec4:	27 95       	ror	r18
     ec6:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	86 83       	std	Z+6, r24	; 0x06
     ed0:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Slow.Energy    = (m_structDGUSDATA_Slow.Intensity * m_structDGUSDATA_Slow.Duration) / 1000; // J
     ed2:	84 81       	ldd	r24, Z+4	; 0x04
     ed4:	95 81       	ldd	r25, Z+5	; 0x05
     ed6:	42 81       	ldd	r20, Z+2	; 0x02
     ed8:	53 81       	ldd	r21, Z+3	; 0x03
     eda:	48 9f       	mul	r20, r24
     edc:	90 01       	movw	r18, r0
     ede:	49 9f       	mul	r20, r25
     ee0:	30 0d       	add	r19, r0
     ee2:	58 9f       	mul	r21, r24
     ee4:	30 0d       	add	r19, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	36 95       	lsr	r19
     eea:	27 95       	ror	r18
     eec:	36 95       	lsr	r19
     eee:	27 95       	ror	r18
     ef0:	36 95       	lsr	r19
     ef2:	27 95       	ror	r18
     ef4:	a5 ec       	ldi	r26, 0xC5	; 197
     ef6:	b0 e2       	ldi	r27, 0x20	; 32
     ef8:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     efc:	92 95       	swap	r25
     efe:	82 95       	swap	r24
     f00:	8f 70       	andi	r24, 0x0F	; 15
     f02:	89 27       	eor	r24, r25
     f04:	9f 70       	andi	r25, 0x0F	; 15
     f06:	89 27       	eor	r24, r25
     f08:	80 87       	std	Z+8, r24	; 0x08
     f0a:	91 87       	std	Z+9, r25	; 0x09
	
	// Medium profile
	m_structDGUSDATA_Medium.Frequency = 10; // 10 Hz
     f0c:	ea e1       	ldi	r30, 0x1A	; 26
     f0e:	f1 e2       	ldi	r31, 0x21	; 33
     f10:	a0 82       	st	Z, r10
     f12:	b1 82       	std	Z+1, r11	; 0x01
	m_structDGUSDATA_Medium.DutyCycle = 50; // 50%
     f14:	c2 86       	std	Z+10, r12	; 0x0a
     f16:	d3 86       	std	Z+11, r13	; 0x0b
	m_structDGUSDATA_Medium.Duration  = ((1000 / m_structDGUSDATA_Medium.Frequency) * m_structDGUSDATA_Medium.DutyCycle) / 100; // ms
     f18:	60 81       	ld	r22, Z
     f1a:	71 81       	ldd	r23, Z+1	; 0x01
     f1c:	c2 84       	ldd	r12, Z+10	; 0x0a
     f1e:	d3 84       	ldd	r13, Z+11	; 0x0b
     f20:	c7 01       	movw	r24, r14
     f22:	0e 94 a1 24 	call	0x4942	; 0x4942 <__udivmodhi4>
     f26:	6c 9d       	mul	r22, r12
     f28:	90 01       	movw	r18, r0
     f2a:	6d 9d       	mul	r22, r13
     f2c:	30 0d       	add	r19, r0
     f2e:	7c 9d       	mul	r23, r12
     f30:	30 0d       	add	r19, r0
     f32:	11 24       	eor	r1, r1
     f34:	36 95       	lsr	r19
     f36:	27 95       	ror	r18
     f38:	36 95       	lsr	r19
     f3a:	27 95       	ror	r18
     f3c:	ab e7       	ldi	r26, 0x7B	; 123
     f3e:	b4 e1       	ldi	r27, 0x14	; 20
     f40:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	82 83       	std	Z+2, r24	; 0x02
     f4a:	93 83       	std	Z+3, r25	; 0x03
	m_structDGUSDATA_Medium.Intensity = 200; // W
     f4c:	04 83       	std	Z+4, r16	; 0x04
     f4e:	15 83       	std	Z+5, r17	; 0x05
	m_structDGUSDATA_Medium.Power     = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.DutyCycle) / 100; // W
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	95 81       	ldd	r25, Z+5	; 0x05
     f54:	42 85       	ldd	r20, Z+10	; 0x0a
     f56:	53 85       	ldd	r21, Z+11	; 0x0b
     f58:	48 9f       	mul	r20, r24
     f5a:	90 01       	movw	r18, r0
     f5c:	49 9f       	mul	r20, r25
     f5e:	30 0d       	add	r19, r0
     f60:	58 9f       	mul	r21, r24
     f62:	30 0d       	add	r19, r0
     f64:	11 24       	eor	r1, r1
     f66:	36 95       	lsr	r19
     f68:	27 95       	ror	r18
     f6a:	36 95       	lsr	r19
     f6c:	27 95       	ror	r18
     f6e:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	86 83       	std	Z+6, r24	; 0x06
     f78:	97 83       	std	Z+7, r25	; 0x07
	m_structDGUSDATA_Medium.Energy    = (m_structDGUSDATA_Medium.Intensity * m_structDGUSDATA_Medium.Duration) / 1000; // J
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	95 81       	ldd	r25, Z+5	; 0x05
     f7e:	42 81       	ldd	r20, Z+2	; 0x02
     f80:	53 81       	ldd	r21, Z+3	; 0x03
     f82:	48 9f       	mul	r20, r24
     f84:	90 01       	movw	r18, r0
     f86:	49 9f       	mul	r20, r25
     f88:	30 0d       	add	r19, r0
     f8a:	58 9f       	mul	r21, r24
     f8c:	30 0d       	add	r19, r0
     f8e:	11 24       	eor	r1, r1
     f90:	36 95       	lsr	r19
     f92:	27 95       	ror	r18
     f94:	36 95       	lsr	r19
     f96:	27 95       	ror	r18
     f98:	36 95       	lsr	r19
     f9a:	27 95       	ror	r18
     f9c:	a5 ec       	ldi	r26, 0xC5	; 197
     f9e:	b0 e2       	ldi	r27, 0x20	; 32
     fa0:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
     fa4:	92 95       	swap	r25
     fa6:	82 95       	swap	r24
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	89 27       	eor	r24, r25
     fac:	9f 70       	andi	r25, 0x0F	; 15
     fae:	89 27       	eor	r24, r25
     fb0:	80 87       	std	Z+8, r24	; 0x08
     fb2:	91 87       	std	Z+9, r25	; 0x09
	
	// Current profile
	profile = WorkFast;
     fb4:	1d 86       	std	Y+13, r1	; 0x0d
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	9f 90       	pop	r9
     fcc:	8f 90       	pop	r8
     fce:	08 95       	ret

00000fd0 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
     fd0:	08 95       	ret

00000fd2 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
     fd2:	08 95       	ret

00000fd4 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	fa e0       	ldi	r31, 0x0A	; 10
     fd8:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
     fda:	87 e8       	ldi	r24, 0x87	; 135
     fdc:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     fde:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
     fe0:	84 e2       	ldi	r24, 0x24	; 36
     fe2:	94 ef       	ldi	r25, 0xF4	; 244
     fe4:	86 a3       	std	Z+38, r24	; 0x26
     fe6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
     fe8:	82 e1       	ldi	r24, 0x12	; 18
     fea:	9a e7       	ldi	r25, 0x7A	; 122
     fec:	86 a7       	std	Z+46, r24	; 0x2e
     fee:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     ff0:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     ff2:	17 82       	std	Z+7, r1	; 0x07
     ff4:	08 95       	ret

00000ff6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
     ff6:	e0 e4       	ldi	r30, 0x40	; 64
     ff8:	fa e0       	ldi	r31, 0x0A	; 10
     ffa:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
     ffc:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     ffe:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    1000:	84 e2       	ldi	r24, 0x24	; 36
    1002:	94 ef       	ldi	r25, 0xF4	; 244
    1004:	86 a3       	std	Z+38, r24	; 0x26
    1006:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1008:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    100a:	17 82       	std	Z+7, r1	; 0x07
    100c:	08 95       	ret

0000100e <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	8a 01       	movw	r16, r20
    1016:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    1018:	9b 01       	movw	r18, r22
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	64 e2       	ldi	r22, 0x24	; 36
    1020:	74 ef       	ldi	r23, 0xF4	; 244
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 b5 24 	call	0x496a	; 0x496a <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    102a:	b8 01       	movw	r22, r16
    102c:	76 95       	lsr	r23
    102e:	67 95       	ror	r22
    1030:	ee e3       	ldi	r30, 0x3E	; 62
    1032:	e0 9f       	mul	r30, r16
    1034:	c0 01       	movw	r24, r0
    1036:	e1 9f       	mul	r30, r17
    1038:	90 0d       	add	r25, r0
    103a:	11 24       	eor	r1, r1
    103c:	86 0f       	add	r24, r22
    103e:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1040:	cf 5f       	subi	r28, 0xFF	; 255
    1042:	b9 01       	movw	r22, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    1046:	76 95       	lsr	r23
    1048:	67 95       	ror	r22
    104a:	ca 95       	dec	r28
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    104e:	e0 e0       	ldi	r30, 0x00	; 0
    1050:	fa e0       	ldi	r31, 0x0A	; 10
    1052:	66 a7       	std	Z+46, r22	; 0x2e
    1054:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    1056:	26 a3       	std	Z+38, r18	; 0x26
    1058:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    105a:	a0 e4       	ldi	r26, 0x40	; 64
    105c:	ba e0       	ldi	r27, 0x0A	; 10
    105e:	96 96       	adiw	r26, 0x26	; 38
    1060:	8d 93       	st	X+, r24
    1062:	9c 93       	st	X, r25
    1064:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    1066:	86 e0       	ldi	r24, 0x06	; 6
    1068:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    106a:	87 e0       	ldi	r24, 0x07	; 7
    106c:	8c 93       	st	X, r24
}
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    1076:	e0 e4       	ldi	r30, 0x40	; 64
    1078:	fa e0       	ldi	r31, 0x0A	; 10
    107a:	84 85       	ldd	r24, Z+12	; 0x0c
    107c:	80 ff       	sbrs	r24, 0
    107e:	fd cf       	rjmp	.-6      	; 0x107a <_ZN12CSoundPlayer9SoundStopEv+0x4>
	
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    1080:	e0 e4       	ldi	r30, 0x40	; 64
    1082:	fa e0       	ldi	r31, 0x0A	; 10
    1084:	84 85       	ldd	r24, Z+12	; 0x0c
    1086:	81 70       	andi	r24, 0x01	; 1
    1088:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	ba e0       	ldi	r27, 0x0A	; 10
    108e:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    1090:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    1092:	10 a2       	std	Z+32, r1	; 0x20
    1094:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    1096:	90 96       	adiw	r26, 0x20	; 32
    1098:	1d 92       	st	X+, r1
    109a:	1c 92       	st	X, r1
    109c:	91 97       	sbiw	r26, 0x21	; 33
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	83 ef       	ldi	r24, 0xF3	; 243
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	21 50       	subi	r18, 0x01	; 1
    10a6:	80 40       	sbci	r24, 0x00	; 0
    10a8:	90 40       	sbci	r25, 0x00	; 0
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <_ZN12CSoundPlayer9SoundStopEv+0x38>
    10ae:	00 00       	nop
    10b0:	08 95       	ret

000010b2 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    10b8:	23 e0       	ldi	r18, 0x03	; 3
    10ba:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN12CSoundPlayer9SoundStopEv>
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    10d0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    10d4:	ce 01       	movw	r24, r28
    10d6:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
	cli();
    10e6:	f8 94       	cli

	beep(a, 500);
    10e8:	44 ef       	ldi	r20, 0xF4	; 244
    10ea:	51 e0       	ldi	r21, 0x01	; 1
    10ec:	68 eb       	ldi	r22, 0xB8	; 184
    10ee:	71 e0       	ldi	r23, 0x01	; 1
    10f0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    10f4:	44 ef       	ldi	r20, 0xF4	; 244
    10f6:	51 e0       	ldi	r21, 0x01	; 1
    10f8:	68 eb       	ldi	r22, 0xB8	; 184
    10fa:	71 e0       	ldi	r23, 0x01	; 1
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1102:	44 ef       	ldi	r20, 0xF4	; 244
    1104:	51 e0       	ldi	r21, 0x01	; 1
    1106:	68 eb       	ldi	r22, 0xB8	; 184
    1108:	71 e0       	ldi	r23, 0x01	; 1
    110a:	ce 01       	movw	r24, r28
    110c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    1110:	4e e5       	ldi	r20, 0x5E	; 94
    1112:	51 e0       	ldi	r21, 0x01	; 1
    1114:	6d e5       	ldi	r22, 0x5D	; 93
    1116:	71 e0       	ldi	r23, 0x01	; 1
    1118:	ce 01       	movw	r24, r28
    111a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    111e:	46 e9       	ldi	r20, 0x96	; 150
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	6b e0       	ldi	r22, 0x0B	; 11
    1124:	72 e0       	ldi	r23, 0x02	; 2
    1126:	ce 01       	movw	r24, r28
    1128:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    112c:	44 ef       	ldi	r20, 0xF4	; 244
    112e:	51 e0       	ldi	r21, 0x01	; 1
    1130:	68 eb       	ldi	r22, 0xB8	; 184
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	ce 01       	movw	r24, r28
    1136:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    113a:	4e e5       	ldi	r20, 0x5E	; 94
    113c:	51 e0       	ldi	r21, 0x01	; 1
    113e:	6d e5       	ldi	r22, 0x5D	; 93
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1148:	46 e9       	ldi	r20, 0x96	; 150
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	6b e0       	ldi	r22, 0x0B	; 11
    114e:	72 e0       	ldi	r23, 0x02	; 2
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    1156:	4a e8       	ldi	r20, 0x8A	; 138
    1158:	52 e0       	ldi	r21, 0x02	; 2
    115a:	68 eb       	ldi	r22, 0xB8	; 184
    115c:	71 e0       	ldi	r23, 0x01	; 1
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    1164:	78 94       	sei
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    116c:	fc 01       	movw	r30, r24
    116e:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1170:	e0 e0       	ldi	r30, 0x00	; 0
    1172:	f8 e0       	ldi	r31, 0x08	; 8
    1174:	80 81       	ld	r24, Z
    1176:	80 7f       	andi	r24, 0xF0	; 240
    1178:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    117a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    117c:	10 a2       	std	Z+32, r1	; 0x20
    117e:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    1180:	10 a6       	std	Z+40, r1	; 0x28
    1182:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    1184:	12 a6       	std	Z+42, r1	; 0x2a
    1186:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1188:	14 a6       	std	Z+44, r1	; 0x2c
    118a:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    118c:	16 a6       	std	Z+46, r1	; 0x2e
    118e:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    1190:	16 a2       	std	Z+38, r1	; 0x26
    1192:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1194:	81 81       	ldd	r24, Z+1	; 0x01
    1196:	88 7f       	andi	r24, 0xF8	; 248
    1198:	68 2b       	or	r22, r24
    119a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    119c:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    119e:	17 82       	std	Z+7, r1	; 0x07
    11a0:	08 95       	ret

000011a2 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    11a2:	e0 e0       	ldi	r30, 0x00	; 0
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	66 a3       	std	Z+38, r22	; 0x26
    11a8:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    11aa:	20 81       	ld	r18, Z
    11ac:	20 7f       	andi	r18, 0xF0	; 240
    11ae:	dc 01       	movw	r26, r24
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	9c 91       	ld	r25, X
    11b4:	82 2f       	mov	r24, r18
    11b6:	89 2b       	or	r24, r25
    11b8:	80 83       	st	Z, r24
    11ba:	08 95       	ret

000011bc <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    11bc:	e0 e0       	ldi	r30, 0x00	; 0
    11be:	f8 e0       	ldi	r31, 0x08	; 8
    11c0:	80 81       	ld	r24, Z
    11c2:	80 7f       	andi	r24, 0xF0	; 240
    11c4:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    11c6:	10 a2       	std	Z+32, r1	; 0x20
    11c8:	11 a2       	std	Z+33, r1	; 0x21
    11ca:	08 95       	ret

000011cc <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    11cc:	e0 e0       	ldi	r30, 0x00	; 0
    11ce:	f8 e0       	ldi	r31, 0x08	; 8
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	8f 70       	andi	r24, 0x0F	; 15
    11d4:	68 2b       	or	r22, r24
    11d6:	61 83       	std	Z+1, r22	; 0x01
    11d8:	08 95       	ret

000011da <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    11da:	e0 e0       	ldi	r30, 0x00	; 0
    11dc:	f8 e0       	ldi	r31, 0x08	; 8
    11de:	81 81       	ldd	r24, Z+1	; 0x01
    11e0:	60 95       	com	r22
    11e2:	68 23       	and	r22, r24
    11e4:	61 83       	std	Z+1, r22	; 0x01
    11e6:	08 95       	ret

000011e8 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    11e8:	60 93 26 08 	sts	0x0826, r22
    11ec:	70 93 27 08 	sts	0x0827, r23
    11f0:	08 95       	ret

000011f2 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    11f2:	60 93 28 08 	sts	0x0828, r22
    11f6:	70 93 29 08 	sts	0x0829, r23
    11fa:	08 95       	ret

000011fc <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    11fc:	60 93 2a 08 	sts	0x082A, r22
    1200:	70 93 2b 08 	sts	0x082B, r23
    1204:	08 95       	ret

00001206 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1206:	60 93 2c 08 	sts	0x082C, r22
    120a:	70 93 2d 08 	sts	0x082D, r23
    120e:	08 95       	ret

00001210 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1210:	60 93 2e 08 	sts	0x082E, r22
    1214:	70 93 2f 08 	sts	0x082F, r23
    1218:	08 95       	ret

0000121a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    121a:	61 15       	cp	r22, r1
    121c:	71 05       	cpc	r23, r1
    121e:	31 f0       	breq	.+12     	; 0x122c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1220:	e0 e0       	ldi	r30, 0x00	; 0
    1222:	f8 e0       	ldi	r31, 0x08	; 8
    1224:	86 81       	ldd	r24, Z+6	; 0x06
    1226:	83 70       	andi	r24, 0x03	; 3
    1228:	28 2b       	or	r18, r24
    122a:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    122c:	60 93 54 21 	sts	0x2154, r22
    1230:	70 93 55 21 	sts	0x2155, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    1234:	40 93 4a 22 	sts	0x224A, r20
    1238:	50 93 4b 22 	sts	0x224B, r21
    123c:	08 95       	ret

0000123e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    123e:	61 15       	cp	r22, r1
    1240:	71 05       	cpc	r23, r1
    1242:	31 f0       	breq	.+12     	; 0x1250 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1244:	e0 e0       	ldi	r30, 0x00	; 0
    1246:	f8 e0       	ldi	r31, 0x08	; 8
    1248:	86 81       	ldd	r24, Z+6	; 0x06
    124a:	8c 70       	andi	r24, 0x0C	; 12
    124c:	28 2b       	or	r18, r24
    124e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    1250:	60 93 56 21 	sts	0x2156, r22
    1254:	70 93 57 21 	sts	0x2157, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    1258:	40 93 4c 22 	sts	0x224C, r20
    125c:	50 93 4d 22 	sts	0x224D, r21
    1260:	08 95       	ret

00001262 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1262:	61 15       	cp	r22, r1
    1264:	71 05       	cpc	r23, r1
    1266:	31 f0       	breq	.+12     	; 0x1274 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1268:	e0 e0       	ldi	r30, 0x00	; 0
    126a:	f8 e0       	ldi	r31, 0x08	; 8
    126c:	87 81       	ldd	r24, Z+7	; 0x07
    126e:	83 70       	andi	r24, 0x03	; 3
    1270:	28 2b       	or	r18, r24
    1272:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    1274:	60 93 58 21 	sts	0x2158, r22
    1278:	70 93 59 21 	sts	0x2159, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    127c:	40 93 4e 22 	sts	0x224E, r20
    1280:	50 93 4f 22 	sts	0x224F, r21
    1284:	08 95       	ret

00001286 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1286:	61 15       	cp	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	31 f0       	breq	.+12     	; 0x1298 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    128c:	e0 e0       	ldi	r30, 0x00	; 0
    128e:	f8 e0       	ldi	r31, 0x08	; 8
    1290:	87 81       	ldd	r24, Z+7	; 0x07
    1292:	8c 70       	andi	r24, 0x0C	; 12
    1294:	28 2b       	or	r18, r24
    1296:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1298:	60 93 5a 21 	sts	0x215A, r22
    129c:	70 93 5b 21 	sts	0x215B, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    12a0:	40 93 50 22 	sts	0x2250, r20
    12a4:	50 93 51 22 	sts	0x2251, r21
    12a8:	08 95       	ret

000012aa <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    12aa:	61 15       	cp	r22, r1
    12ac:	71 05       	cpc	r23, r1
    12ae:	31 f0       	breq	.+12     	; 0x12bc <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    12b0:	e0 e0       	ldi	r30, 0x00	; 0
    12b2:	f8 e0       	ldi	r31, 0x08	; 8
    12b4:	87 81       	ldd	r24, Z+7	; 0x07
    12b6:	80 73       	andi	r24, 0x30	; 48
    12b8:	28 2b       	or	r18, r24
    12ba:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    12bc:	60 93 5c 21 	sts	0x215C, r22
    12c0:	70 93 5d 21 	sts	0x215D, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    12c4:	40 93 52 22 	sts	0x2252, r20
    12c8:	50 93 53 22 	sts	0x2253, r21
    12cc:	08 95       	ret

000012ce <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    12ce:	61 15       	cp	r22, r1
    12d0:	71 05       	cpc	r23, r1
    12d2:	31 f0       	breq	.+12     	; 0x12e0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    12d4:	e0 e0       	ldi	r30, 0x00	; 0
    12d6:	f8 e0       	ldi	r31, 0x08	; 8
    12d8:	87 81       	ldd	r24, Z+7	; 0x07
    12da:	80 7c       	andi	r24, 0xC0	; 192
    12dc:	28 2b       	or	r18, r24
    12de:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    12e0:	60 93 5e 21 	sts	0x215E, r22
    12e4:	70 93 5f 21 	sts	0x215F, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    12e8:	40 93 54 22 	sts	0x2254, r20
    12ec:	50 93 55 22 	sts	0x2255, r21
    12f0:	08 95       	ret

000012f2 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
    12f8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN6CTimerC1Ev>
    12fc:	88 e7       	ldi	r24, 0x78	; 120
    12fe:	90 e2       	ldi	r25, 0x20	; 32
    1300:	88 83       	st	Y, r24
    1302:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    130a:	28 e7       	ldi	r18, 0x78	; 120
    130c:	30 e2       	ldi	r19, 0x20	; 32
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
    1312:	31 83       	std	Z+1, r19	; 0x01
    1314:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_ZN6CTimerD1Ev>
    1318:	08 95       	ret

0000131a <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    131a:	fc 01       	movw	r30, r24
    131c:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    131e:	e0 e0       	ldi	r30, 0x00	; 0
    1320:	fb e0       	ldi	r31, 0x0B	; 11
    1322:	80 81       	ld	r24, Z
    1324:	80 7f       	andi	r24, 0xF0	; 240
    1326:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1328:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    132a:	10 a2       	std	Z+32, r1	; 0x20
    132c:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    132e:	10 a6       	std	Z+40, r1	; 0x28
    1330:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    1332:	12 a6       	std	Z+42, r1	; 0x2a
    1334:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    1336:	14 a6       	std	Z+44, r1	; 0x2c
    1338:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    133a:	16 a6       	std	Z+46, r1	; 0x2e
    133c:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    133e:	16 a2       	std	Z+38, r1	; 0x26
    1340:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	88 7f       	andi	r24, 0xF8	; 248
    1346:	68 2b       	or	r22, r24
    1348:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    134a:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    134c:	17 82       	std	Z+7, r1	; 0x07
    134e:	08 95       	ret

00001350 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	fb e0       	ldi	r31, 0x0B	; 11
    1354:	66 a3       	std	Z+38, r22	; 0x26
    1356:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1358:	20 81       	ld	r18, Z
    135a:	20 7f       	andi	r18, 0xF0	; 240
    135c:	dc 01       	movw	r26, r24
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	9c 91       	ld	r25, X
    1362:	82 2f       	mov	r24, r18
    1364:	89 2b       	or	r24, r25
    1366:	80 83       	st	Z, r24
    1368:	08 95       	ret

0000136a <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    136a:	e0 e0       	ldi	r30, 0x00	; 0
    136c:	fb e0       	ldi	r31, 0x0B	; 11
    136e:	80 81       	ld	r24, Z
    1370:	80 7f       	andi	r24, 0xF0	; 240
    1372:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    1374:	10 a2       	std	Z+32, r1	; 0x20
    1376:	11 a2       	std	Z+33, r1	; 0x21
    1378:	08 95       	ret

0000137a <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB = (TCF0.CTRLB & ~0xF0) | channels;
    137a:	e0 e0       	ldi	r30, 0x00	; 0
    137c:	fb e0       	ldi	r31, 0x0B	; 11
    137e:	81 81       	ldd	r24, Z+1	; 0x01
    1380:	8f 70       	andi	r24, 0x0F	; 15
    1382:	68 2b       	or	r22, r24
    1384:	61 83       	std	Z+1, r22	; 0x01
    1386:	08 95       	ret

00001388 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	fb e0       	ldi	r31, 0x0B	; 11
    138c:	81 81       	ldd	r24, Z+1	; 0x01
    138e:	60 95       	com	r22
    1390:	68 23       	and	r22, r24
    1392:	61 83       	std	Z+1, r22	; 0x01
    1394:	08 95       	ret

00001396 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    1396:	60 93 26 0b 	sts	0x0B26, r22
    139a:	70 93 27 0b 	sts	0x0B27, r23
    139e:	08 95       	ret

000013a0 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    13a0:	60 93 28 0b 	sts	0x0B28, r22
    13a4:	70 93 29 0b 	sts	0x0B29, r23
    13a8:	08 95       	ret

000013aa <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    13aa:	60 93 2a 0b 	sts	0x0B2A, r22
    13ae:	70 93 2b 0b 	sts	0x0B2B, r23
    13b2:	08 95       	ret

000013b4 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    13b4:	60 93 2c 0b 	sts	0x0B2C, r22
    13b8:	70 93 2d 0b 	sts	0x0B2D, r23
    13bc:	08 95       	ret

000013be <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    13be:	60 93 2e 0b 	sts	0x0B2E, r22
    13c2:	70 93 2f 0b 	sts	0x0B2F, r23
    13c6:	08 95       	ret

000013c8 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    13c8:	61 15       	cp	r22, r1
    13ca:	71 05       	cpc	r23, r1
    13cc:	31 f0       	breq	.+12     	; 0x13da <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    13ce:	e0 e0       	ldi	r30, 0x00	; 0
    13d0:	fb e0       	ldi	r31, 0x0B	; 11
    13d2:	86 81       	ldd	r24, Z+6	; 0x06
    13d4:	83 70       	andi	r24, 0x03	; 3
    13d6:	28 2b       	or	r18, r24
    13d8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    13da:	60 93 10 22 	sts	0x2210, r22
    13de:	70 93 11 22 	sts	0x2211, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    13e2:	40 93 06 23 	sts	0x2306, r20
    13e6:	50 93 07 23 	sts	0x2307, r21
    13ea:	08 95       	ret

000013ec <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    13ec:	61 15       	cp	r22, r1
    13ee:	71 05       	cpc	r23, r1
    13f0:	31 f0       	breq	.+12     	; 0x13fe <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    13f2:	e0 e0       	ldi	r30, 0x00	; 0
    13f4:	fb e0       	ldi	r31, 0x0B	; 11
    13f6:	86 81       	ldd	r24, Z+6	; 0x06
    13f8:	8c 70       	andi	r24, 0x0C	; 12
    13fa:	28 2b       	or	r18, r24
    13fc:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    13fe:	60 93 12 22 	sts	0x2212, r22
    1402:	70 93 13 22 	sts	0x2213, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    1406:	40 93 08 23 	sts	0x2308, r20
    140a:	50 93 09 23 	sts	0x2309, r21
    140e:	08 95       	ret

00001410 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1410:	61 15       	cp	r22, r1
    1412:	71 05       	cpc	r23, r1
    1414:	31 f0       	breq	.+12     	; 0x1422 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1416:	e0 e0       	ldi	r30, 0x00	; 0
    1418:	fb e0       	ldi	r31, 0x0B	; 11
    141a:	87 81       	ldd	r24, Z+7	; 0x07
    141c:	83 70       	andi	r24, 0x03	; 3
    141e:	28 2b       	or	r18, r24
    1420:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    1422:	60 93 14 22 	sts	0x2214, r22
    1426:	70 93 15 22 	sts	0x2215, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    142a:	40 93 0a 23 	sts	0x230A, r20
    142e:	50 93 0b 23 	sts	0x230B, r21
    1432:	08 95       	ret

00001434 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1434:	61 15       	cp	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	31 f0       	breq	.+12     	; 0x1446 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    143a:	e0 e0       	ldi	r30, 0x00	; 0
    143c:	fb e0       	ldi	r31, 0x0B	; 11
    143e:	87 81       	ldd	r24, Z+7	; 0x07
    1440:	8c 70       	andi	r24, 0x0C	; 12
    1442:	28 2b       	or	r18, r24
    1444:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    1446:	60 93 16 22 	sts	0x2216, r22
    144a:	70 93 17 22 	sts	0x2217, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    144e:	40 93 0c 23 	sts	0x230C, r20
    1452:	50 93 0d 23 	sts	0x230D, r21
    1456:	08 95       	ret

00001458 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1458:	61 15       	cp	r22, r1
    145a:	71 05       	cpc	r23, r1
    145c:	31 f0       	breq	.+12     	; 0x146a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    145e:	e0 e0       	ldi	r30, 0x00	; 0
    1460:	fb e0       	ldi	r31, 0x0B	; 11
    1462:	87 81       	ldd	r24, Z+7	; 0x07
    1464:	80 73       	andi	r24, 0x30	; 48
    1466:	28 2b       	or	r18, r24
    1468:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    146a:	60 93 18 22 	sts	0x2218, r22
    146e:	70 93 19 22 	sts	0x2219, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    1472:	40 93 0e 23 	sts	0x230E, r20
    1476:	50 93 0f 23 	sts	0x230F, r21
    147a:	08 95       	ret

0000147c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    147c:	61 15       	cp	r22, r1
    147e:	71 05       	cpc	r23, r1
    1480:	31 f0       	breq	.+12     	; 0x148e <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1482:	e0 e0       	ldi	r30, 0x00	; 0
    1484:	fb e0       	ldi	r31, 0x0B	; 11
    1486:	87 81       	ldd	r24, Z+7	; 0x07
    1488:	80 7c       	andi	r24, 0xC0	; 192
    148a:	28 2b       	or	r18, r24
    148c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    148e:	60 93 1a 22 	sts	0x221A, r22
    1492:	70 93 1b 22 	sts	0x221B, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    1496:	40 93 10 23 	sts	0x2310, r20
    149a:	50 93 11 23 	sts	0x2311, r21
    149e:	08 95       	ret

000014a0 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	ec 01       	movw	r28, r24
    14a6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN6CTimerC1Ev>
    14aa:	8c e9       	ldi	r24, 0x9C	; 156
    14ac:	90 e2       	ldi	r25, 0x20	; 32
    14ae:	88 83       	st	Y, r24
    14b0:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    14b8:	2c e9       	ldi	r18, 0x9C	; 156
    14ba:	30 e2       	ldi	r19, 0x20	; 32
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
    14c0:	31 83       	std	Z+1, r19	; 0x01
    14c2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_ZN6CTimerD1Ev>
    14c6:	08 95       	ret

000014c8 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    14c8:	08 95       	ret

000014ca <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    14ca:	08 95       	ret

000014cc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    14cc:	ef 92       	push	r14
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    14d8:	e0 e8       	ldi	r30, 0x80	; 128
    14da:	f6 e0       	ldi	r31, 0x06	; 6
    14dc:	80 eb       	ldi	r24, 0xB0	; 176
    14de:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    14e0:	90 e4       	ldi	r25, 0x40	; 64
    14e2:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    14e4:	90 ec       	ldi	r25, 0xC0	; 192
    14e6:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    14e8:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    14ea:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    14ec:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    14ee:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    14f0:	61 11       	cpse	r22, r1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    14f4:	80 e4       	ldi	r24, 0x40	; 64
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    14f8:	80 e5       	ldi	r24, 0x50	; 80
    14fa:	01 11       	cpse	r16, r1
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1502:	30 e8       	ldi	r19, 0x80	; 128
    1504:	41 11       	cpse	r20, r1
    1506:	02 c0       	rjmp	.+4      	; 0x150c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	01 c0       	rjmp	.+2      	; 0x150e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    150c:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    150e:	22 0f       	add	r18, r18
    1510:	22 0f       	add	r18, r18
    1512:	e2 2a       	or	r14, r18
    1514:	e8 2a       	or	r14, r24
    1516:	e3 2a       	or	r14, r19
		prescaler;
    1518:	e9 2a       	or	r14, r25
    151a:	00 ec       	ldi	r16, 0xC0	; 192
    151c:	1a e0       	ldi	r17, 0x0A	; 10
    151e:	f8 01       	movw	r30, r16
    1520:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <malloc>
    152a:	88 83       	st	Y, r24
    152c:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	f8 01       	movw	r30, r16
    1532:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    1534:	82 ee       	ldi	r24, 0xE2	; 226
    1536:	9a e0       	ldi	r25, 0x0A	; 10
    1538:	80 93 aa 21 	sts	0x21AA, r24
    153c:	90 93 ab 21 	sts	0x21AB, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    1540:	c0 93 a0 22 	sts	0x22A0, r28
    1544:	d0 93 a1 22 	sts	0x22A1, r29
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ef 90       	pop	r14
    1552:	08 95       	ret

00001554 <_ZN4CSPI4SendEPhj>:
{
	free(buffer);
}

void CSPI::Send(uint8_t* data, uint16_t length)
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
	rx_pos = length;
    155a:	4a 83       	std	Y+2, r20	; 0x02
    155c:	5b 83       	std	Y+3, r21	; 0x03
	rx_frame_length = length;
    155e:	4c 83       	std	Y+4, r20	; 0x04
    1560:	5d 83       	std	Y+5, r21	; 0x05
	
	// Copy data to transmit buffer
	memcpy(buffer, data, length);
    1562:	88 81       	ld	r24, Y
    1564:	99 81       	ldd	r25, Y+1	; 0x01
    1566:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <memcpy>

	// Start transmit
	PORTE.OUTCLR = PIN4_bm;
    156a:	80 e1       	ldi	r24, 0x10	; 16
    156c:	80 93 86 06 	sts	0x0686, r24
	SPIE.DATA = buffer[--rx_pos];
    1570:	88 81       	ld	r24, Y
    1572:	99 81       	ldd	r25, Y+1	; 0x01
    1574:	4a 81       	ldd	r20, Y+2	; 0x02
    1576:	5b 81       	ldd	r21, Y+3	; 0x03
    1578:	9a 01       	movw	r18, r20
    157a:	21 50       	subi	r18, 0x01	; 1
    157c:	31 09       	sbc	r19, r1
    157e:	2a 83       	std	Y+2, r18	; 0x02
    1580:	3b 83       	std	Y+3, r19	; 0x03
    1582:	fc 01       	movw	r30, r24
    1584:	e2 0f       	add	r30, r18
    1586:	f3 1f       	adc	r31, r19
    1588:	80 81       	ld	r24, Z
    158a:	80 93 c3 0a 	sts	0x0AC3, r24
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1594:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	89 2b       	or	r24, r25
    159c:	79 f0       	breq	.+30     	; 0x15bc <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    159e:	40 81       	ld	r20, Z
    15a0:	51 81       	ldd	r21, Z+1	; 0x01
    15a2:	22 81       	ldd	r18, Z+2	; 0x02
    15a4:	33 81       	ldd	r19, Z+3	; 0x03
    15a6:	c9 01       	movw	r24, r18
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	82 83       	std	Z+2, r24	; 0x02
    15ac:	93 83       	std	Z+3, r25	; 0x03
    15ae:	fa 01       	movw	r30, r20
    15b0:	e8 0f       	add	r30, r24
    15b2:	f9 1f       	adc	r31, r25
    15b4:	80 81       	ld	r24, Z
    15b6:	80 93 c3 0a 	sts	0x0AC3, r24
    15ba:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    15bc:	80 e1       	ldi	r24, 0x10	; 16
    15be:	80 93 85 06 	sts	0x0685, r24
    15c2:	08 95       	ret

000015c4 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    15c4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN4CSPI10OnTransmitEv>
    15c8:	08 95       	ret

000015ca <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    15ca:	20 ec       	ldi	r18, 0xC0	; 192
    15cc:	30 e2       	ldi	r19, 0x20	; 32
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
    15d2:	31 83       	std	Z+1, r19	; 0x01
    15d4:	08 95       	ret

000015d6 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    15d6:	08 95       	ret

000015d8 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    15d8:	24 ee       	ldi	r18, 0xE4	; 228
    15da:	30 e2       	ldi	r19, 0x20	; 32
    15dc:	fc 01       	movw	r30, r24
    15de:	20 83       	st	Z, r18
    15e0:	31 83       	std	Z+1, r19	; 0x01
    15e2:	08 95       	ret

000015e4 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    15e4:	08 95       	ret

000015e6 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    15e6:	1f 92       	push	r1
    15e8:	0f 92       	push	r0
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	0b b6       	in	r0, 0x3b	; 59
    15f2:	0f 92       	push	r0
    15f4:	2f 93       	push	r18
    15f6:	3f 93       	push	r19
    15f8:	4f 93       	push	r20
    15fa:	5f 93       	push	r21
    15fc:	6f 93       	push	r22
    15fe:	7f 93       	push	r23
    1600:	8f 93       	push	r24
    1602:	9f 93       	push	r25
    1604:	af 93       	push	r26
    1606:	bf 93       	push	r27
    1608:	ef 93       	push	r30
    160a:	ff 93       	push	r31
    160c:	e0 91 3a 21 	lds	r30, 0x213A
    1610:	f0 91 3b 21 	lds	r31, 0x213B
    1614:	30 97       	sbiw	r30, 0x00	; 0
    1616:	29 f0       	breq	.+10     	; 0x1622 <__vector_1+0x3c>
    1618:	80 91 30 22 	lds	r24, 0x2230
    161c:	90 91 31 22 	lds	r25, 0x2231
    1620:	19 95       	eicall
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0b be       	out	0x3b, r0	; 59
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	0b b6       	in	r0, 0x3b	; 59
    1654:	0f 92       	push	r0
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	e0 91 3c 21 	lds	r30, 0x213C
    1672:	f0 91 3d 21 	lds	r31, 0x213D
    1676:	30 97       	sbiw	r30, 0x00	; 0
    1678:	29 f0       	breq	.+10     	; 0x1684 <__vector_2+0x3c>
    167a:	80 91 32 22 	lds	r24, 0x2232
    167e:	90 91 33 22 	lds	r25, 0x2233
    1682:	19 95       	eicall
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	bf 91       	pop	r27
    168a:	af 91       	pop	r26
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	7f 91       	pop	r23
    1692:	6f 91       	pop	r22
    1694:	5f 91       	pop	r21
    1696:	4f 91       	pop	r20
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0b be       	out	0x3b, r0	; 59
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	0b b6       	in	r0, 0x3b	; 59
    16b6:	0f 92       	push	r0
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	e0 91 3e 21 	lds	r30, 0x213E
    16d4:	f0 91 3f 21 	lds	r31, 0x213F
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	29 f0       	breq	.+10     	; 0x16e6 <__vector_3+0x3c>
    16dc:	80 91 34 22 	lds	r24, 0x2234
    16e0:	90 91 35 22 	lds	r25, 0x2235
    16e4:	19 95       	eicall
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	0b b6       	in	r0, 0x3b	; 59
    1718:	0f 92       	push	r0
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	e0 91 40 21 	lds	r30, 0x2140
    1736:	f0 91 41 21 	lds	r31, 0x2141
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	29 f0       	breq	.+10     	; 0x1748 <__vector_4+0x3c>
    173e:	80 91 36 22 	lds	r24, 0x2236
    1742:	90 91 37 22 	lds	r25, 0x2237
    1746:	19 95       	eicall
    1748:	ff 91       	pop	r31
    174a:	ef 91       	pop	r30
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	7f 91       	pop	r23
    1756:	6f 91       	pop	r22
    1758:	5f 91       	pop	r21
    175a:	4f 91       	pop	r20
    175c:	3f 91       	pop	r19
    175e:	2f 91       	pop	r18
    1760:	0f 90       	pop	r0
    1762:	0b be       	out	0x3b, r0	; 59
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	0b b6       	in	r0, 0x3b	; 59
    177a:	0f 92       	push	r0
    177c:	2f 93       	push	r18
    177e:	3f 93       	push	r19
    1780:	4f 93       	push	r20
    1782:	5f 93       	push	r21
    1784:	6f 93       	push	r22
    1786:	7f 93       	push	r23
    1788:	8f 93       	push	r24
    178a:	9f 93       	push	r25
    178c:	af 93       	push	r26
    178e:	bf 93       	push	r27
    1790:	ef 93       	push	r30
    1792:	ff 93       	push	r31
    1794:	e0 91 42 21 	lds	r30, 0x2142
    1798:	f0 91 43 21 	lds	r31, 0x2143
    179c:	30 97       	sbiw	r30, 0x00	; 0
    179e:	29 f0       	breq	.+10     	; 0x17aa <__vector_5+0x3c>
    17a0:	80 91 38 22 	lds	r24, 0x2238
    17a4:	90 91 39 22 	lds	r25, 0x2239
    17a8:	19 95       	eicall
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	0f 90       	pop	r0
    17c4:	0b be       	out	0x3b, r0	; 59
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	0b b6       	in	r0, 0x3b	; 59
    17dc:	0f 92       	push	r0
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	4f 93       	push	r20
    17e4:	5f 93       	push	r21
    17e6:	6f 93       	push	r22
    17e8:	7f 93       	push	r23
    17ea:	8f 93       	push	r24
    17ec:	9f 93       	push	r25
    17ee:	af 93       	push	r26
    17f0:	bf 93       	push	r27
    17f2:	ef 93       	push	r30
    17f4:	ff 93       	push	r31
    17f6:	e0 91 44 21 	lds	r30, 0x2144
    17fa:	f0 91 45 21 	lds	r31, 0x2145
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	29 f0       	breq	.+10     	; 0x180c <__vector_6+0x3c>
    1802:	80 91 3a 22 	lds	r24, 0x223A
    1806:	90 91 3b 22 	lds	r25, 0x223B
    180a:	19 95       	eicall
    180c:	ff 91       	pop	r31
    180e:	ef 91       	pop	r30
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	7f 91       	pop	r23
    181a:	6f 91       	pop	r22
    181c:	5f 91       	pop	r21
    181e:	4f 91       	pop	r20
    1820:	3f 91       	pop	r19
    1822:	2f 91       	pop	r18
    1824:	0f 90       	pop	r0
    1826:	0b be       	out	0x3b, r0	; 59
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	0f 90       	pop	r0
    182e:	1f 90       	pop	r1
    1830:	18 95       	reti

00001832 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1832:	1f 92       	push	r1
    1834:	0f 92       	push	r0
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	0f 92       	push	r0
    183a:	11 24       	eor	r1, r1
    183c:	0b b6       	in	r0, 0x3b	; 59
    183e:	0f 92       	push	r0
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	6f 93       	push	r22
    184a:	7f 93       	push	r23
    184c:	8f 93       	push	r24
    184e:	9f 93       	push	r25
    1850:	af 93       	push	r26
    1852:	bf 93       	push	r27
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
    1858:	e0 91 46 21 	lds	r30, 0x2146
    185c:	f0 91 47 21 	lds	r31, 0x2147
    1860:	30 97       	sbiw	r30, 0x00	; 0
    1862:	29 f0       	breq	.+10     	; 0x186e <__vector_7+0x3c>
    1864:	80 91 3c 22 	lds	r24, 0x223C
    1868:	90 91 3d 22 	lds	r25, 0x223D
    186c:	19 95       	eicall
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0b be       	out	0x3b, r0	; 59
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1894:	1f 92       	push	r1
    1896:	0f 92       	push	r0
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	0f 92       	push	r0
    189c:	11 24       	eor	r1, r1
    189e:	0b b6       	in	r0, 0x3b	; 59
    18a0:	0f 92       	push	r0
    18a2:	2f 93       	push	r18
    18a4:	3f 93       	push	r19
    18a6:	4f 93       	push	r20
    18a8:	5f 93       	push	r21
    18aa:	6f 93       	push	r22
    18ac:	7f 93       	push	r23
    18ae:	8f 93       	push	r24
    18b0:	9f 93       	push	r25
    18b2:	af 93       	push	r26
    18b4:	bf 93       	push	r27
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31
    18ba:	e0 91 48 21 	lds	r30, 0x2148
    18be:	f0 91 49 21 	lds	r31, 0x2149
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	29 f0       	breq	.+10     	; 0x18d0 <__vector_8+0x3c>
    18c6:	80 91 3e 22 	lds	r24, 0x223E
    18ca:	90 91 3f 22 	lds	r25, 0x223F
    18ce:	19 95       	eicall
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0b be       	out	0x3b, r0	; 59
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0f 90       	pop	r0
    18f2:	1f 90       	pop	r1
    18f4:	18 95       	reti

000018f6 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    18f6:	1f 92       	push	r1
    18f8:	0f 92       	push	r0
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	0b b6       	in	r0, 0x3b	; 59
    1902:	0f 92       	push	r0
    1904:	2f 93       	push	r18
    1906:	3f 93       	push	r19
    1908:	4f 93       	push	r20
    190a:	5f 93       	push	r21
    190c:	6f 93       	push	r22
    190e:	7f 93       	push	r23
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	e0 91 4a 21 	lds	r30, 0x214A
    1920:	f0 91 4b 21 	lds	r31, 0x214B
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	29 f0       	breq	.+10     	; 0x1932 <__vector_9+0x3c>
    1928:	80 91 40 22 	lds	r24, 0x2240
    192c:	90 91 41 22 	lds	r25, 0x2241
    1930:	19 95       	eicall
    1932:	ff 91       	pop	r31
    1934:	ef 91       	pop	r30
    1936:	bf 91       	pop	r27
    1938:	af 91       	pop	r26
    193a:	9f 91       	pop	r25
    193c:	8f 91       	pop	r24
    193e:	7f 91       	pop	r23
    1940:	6f 91       	pop	r22
    1942:	5f 91       	pop	r21
    1944:	4f 91       	pop	r20
    1946:	3f 91       	pop	r19
    1948:	2f 91       	pop	r18
    194a:	0f 90       	pop	r0
    194c:	0b be       	out	0x3b, r0	; 59
    194e:	0f 90       	pop	r0
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	0f 90       	pop	r0
    1954:	1f 90       	pop	r1
    1956:	18 95       	reti

00001958 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1958:	1f 92       	push	r1
    195a:	0f 92       	push	r0
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	0f 92       	push	r0
    1960:	11 24       	eor	r1, r1
    1962:	0b b6       	in	r0, 0x3b	; 59
    1964:	0f 92       	push	r0
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
    197e:	e0 91 4c 21 	lds	r30, 0x214C
    1982:	f0 91 4d 21 	lds	r31, 0x214D
    1986:	30 97       	sbiw	r30, 0x00	; 0
    1988:	29 f0       	breq	.+10     	; 0x1994 <__vector_10+0x3c>
    198a:	80 91 42 22 	lds	r24, 0x2242
    198e:	90 91 43 22 	lds	r25, 0x2243
    1992:	19 95       	eicall
    1994:	ff 91       	pop	r31
    1996:	ef 91       	pop	r30
    1998:	bf 91       	pop	r27
    199a:	af 91       	pop	r26
    199c:	9f 91       	pop	r25
    199e:	8f 91       	pop	r24
    19a0:	7f 91       	pop	r23
    19a2:	6f 91       	pop	r22
    19a4:	5f 91       	pop	r21
    19a6:	4f 91       	pop	r20
    19a8:	3f 91       	pop	r19
    19aa:	2f 91       	pop	r18
    19ac:	0f 90       	pop	r0
    19ae:	0b be       	out	0x3b, r0	; 59
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	0b b6       	in	r0, 0x3b	; 59
    19c6:	0f 92       	push	r0
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	af 93       	push	r26
    19da:	bf 93       	push	r27
    19dc:	ef 93       	push	r30
    19de:	ff 93       	push	r31
    19e0:	e0 91 4e 21 	lds	r30, 0x214E
    19e4:	f0 91 4f 21 	lds	r31, 0x214F
    19e8:	30 97       	sbiw	r30, 0x00	; 0
    19ea:	29 f0       	breq	.+10     	; 0x19f6 <__vector_11+0x3c>
    19ec:	80 91 44 22 	lds	r24, 0x2244
    19f0:	90 91 45 22 	lds	r25, 0x2245
    19f4:	19 95       	eicall
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	bf 91       	pop	r27
    19fc:	af 91       	pop	r26
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	7f 91       	pop	r23
    1a04:	6f 91       	pop	r22
    1a06:	5f 91       	pop	r21
    1a08:	4f 91       	pop	r20
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	0f 90       	pop	r0
    1a10:	0b be       	out	0x3b, r0	; 59
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	0b b6       	in	r0, 0x3b	; 59
    1a28:	0f 92       	push	r0
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
    1a42:	e0 91 50 21 	lds	r30, 0x2150
    1a46:	f0 91 51 21 	lds	r31, 0x2151
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	29 f0       	breq	.+10     	; 0x1a58 <__vector_12+0x3c>
    1a4e:	80 91 46 22 	lds	r24, 0x2246
    1a52:	90 91 47 22 	lds	r25, 0x2247
    1a56:	19 95       	eicall
    1a58:	ff 91       	pop	r31
    1a5a:	ef 91       	pop	r30
    1a5c:	bf 91       	pop	r27
    1a5e:	af 91       	pop	r26
    1a60:	9f 91       	pop	r25
    1a62:	8f 91       	pop	r24
    1a64:	7f 91       	pop	r23
    1a66:	6f 91       	pop	r22
    1a68:	5f 91       	pop	r21
    1a6a:	4f 91       	pop	r20
    1a6c:	3f 91       	pop	r19
    1a6e:	2f 91       	pop	r18
    1a70:	0f 90       	pop	r0
    1a72:	0b be       	out	0x3b, r0	; 59
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	0b b6       	in	r0, 0x3b	; 59
    1a8a:	0f 92       	push	r0
    1a8c:	2f 93       	push	r18
    1a8e:	3f 93       	push	r19
    1a90:	4f 93       	push	r20
    1a92:	5f 93       	push	r21
    1a94:	6f 93       	push	r22
    1a96:	7f 93       	push	r23
    1a98:	8f 93       	push	r24
    1a9a:	9f 93       	push	r25
    1a9c:	af 93       	push	r26
    1a9e:	bf 93       	push	r27
    1aa0:	ef 93       	push	r30
    1aa2:	ff 93       	push	r31
    1aa4:	e0 91 52 21 	lds	r30, 0x2152
    1aa8:	f0 91 53 21 	lds	r31, 0x2153
    1aac:	30 97       	sbiw	r30, 0x00	; 0
    1aae:	29 f0       	breq	.+10     	; 0x1aba <__vector_13+0x3c>
    1ab0:	80 91 48 22 	lds	r24, 0x2248
    1ab4:	90 91 49 22 	lds	r25, 0x2249
    1ab8:	19 95       	eicall
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	0b be       	out	0x3b, r0	; 59
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1ae0:	1f 92       	push	r1
    1ae2:	0f 92       	push	r0
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	0f 92       	push	r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	0b b6       	in	r0, 0x3b	; 59
    1aec:	0f 92       	push	r0
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
    1b06:	e0 91 54 21 	lds	r30, 0x2154
    1b0a:	f0 91 55 21 	lds	r31, 0x2155
    1b0e:	30 97       	sbiw	r30, 0x00	; 0
    1b10:	29 f0       	breq	.+10     	; 0x1b1c <__vector_14+0x3c>
    1b12:	80 91 4a 22 	lds	r24, 0x224A
    1b16:	90 91 4b 22 	lds	r25, 0x224B
    1b1a:	19 95       	eicall
    1b1c:	ff 91       	pop	r31
    1b1e:	ef 91       	pop	r30
    1b20:	bf 91       	pop	r27
    1b22:	af 91       	pop	r26
    1b24:	9f 91       	pop	r25
    1b26:	8f 91       	pop	r24
    1b28:	7f 91       	pop	r23
    1b2a:	6f 91       	pop	r22
    1b2c:	5f 91       	pop	r21
    1b2e:	4f 91       	pop	r20
    1b30:	3f 91       	pop	r19
    1b32:	2f 91       	pop	r18
    1b34:	0f 90       	pop	r0
    1b36:	0b be       	out	0x3b, r0	; 59
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f 90       	pop	r0
    1b3e:	1f 90       	pop	r1
    1b40:	18 95       	reti

00001b42 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	0b b6       	in	r0, 0x3b	; 59
    1b4e:	0f 92       	push	r0
    1b50:	2f 93       	push	r18
    1b52:	3f 93       	push	r19
    1b54:	4f 93       	push	r20
    1b56:	5f 93       	push	r21
    1b58:	6f 93       	push	r22
    1b5a:	7f 93       	push	r23
    1b5c:	8f 93       	push	r24
    1b5e:	9f 93       	push	r25
    1b60:	af 93       	push	r26
    1b62:	bf 93       	push	r27
    1b64:	ef 93       	push	r30
    1b66:	ff 93       	push	r31
    1b68:	e0 91 56 21 	lds	r30, 0x2156
    1b6c:	f0 91 57 21 	lds	r31, 0x2157
    1b70:	30 97       	sbiw	r30, 0x00	; 0
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <__vector_15+0x3c>
    1b74:	80 91 4c 22 	lds	r24, 0x224C
    1b78:	90 91 4d 22 	lds	r25, 0x224D
    1b7c:	19 95       	eicall
    1b7e:	ff 91       	pop	r31
    1b80:	ef 91       	pop	r30
    1b82:	bf 91       	pop	r27
    1b84:	af 91       	pop	r26
    1b86:	9f 91       	pop	r25
    1b88:	8f 91       	pop	r24
    1b8a:	7f 91       	pop	r23
    1b8c:	6f 91       	pop	r22
    1b8e:	5f 91       	pop	r21
    1b90:	4f 91       	pop	r20
    1b92:	3f 91       	pop	r19
    1b94:	2f 91       	pop	r18
    1b96:	0f 90       	pop	r0
    1b98:	0b be       	out	0x3b, r0	; 59
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    1ba4:	1f 92       	push	r1
    1ba6:	0f 92       	push	r0
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	0f 92       	push	r0
    1bac:	11 24       	eor	r1, r1
    1bae:	0b b6       	in	r0, 0x3b	; 59
    1bb0:	0f 92       	push	r0
    1bb2:	2f 93       	push	r18
    1bb4:	3f 93       	push	r19
    1bb6:	4f 93       	push	r20
    1bb8:	5f 93       	push	r21
    1bba:	6f 93       	push	r22
    1bbc:	7f 93       	push	r23
    1bbe:	8f 93       	push	r24
    1bc0:	9f 93       	push	r25
    1bc2:	af 93       	push	r26
    1bc4:	bf 93       	push	r27
    1bc6:	ef 93       	push	r30
    1bc8:	ff 93       	push	r31
    1bca:	e0 91 58 21 	lds	r30, 0x2158
    1bce:	f0 91 59 21 	lds	r31, 0x2159
    1bd2:	30 97       	sbiw	r30, 0x00	; 0
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <__vector_16+0x3c>
    1bd6:	80 91 4e 22 	lds	r24, 0x224E
    1bda:	90 91 4f 22 	lds	r25, 0x224F
    1bde:	19 95       	eicall
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0b be       	out	0x3b, r0	; 59
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	0f 90       	pop	r0
    1c02:	1f 90       	pop	r1
    1c04:	18 95       	reti

00001c06 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
    1c2c:	e0 91 5a 21 	lds	r30, 0x215A
    1c30:	f0 91 5b 21 	lds	r31, 0x215B
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	29 f0       	breq	.+10     	; 0x1c42 <__vector_17+0x3c>
    1c38:	80 91 50 22 	lds	r24, 0x2250
    1c3c:	90 91 51 22 	lds	r25, 0x2251
    1c40:	19 95       	eicall
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0b be       	out	0x3b, r0	; 59
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	11 24       	eor	r1, r1
    1c72:	0b b6       	in	r0, 0x3b	; 59
    1c74:	0f 92       	push	r0
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	4f 93       	push	r20
    1c7c:	5f 93       	push	r21
    1c7e:	6f 93       	push	r22
    1c80:	7f 93       	push	r23
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
    1c8e:	e0 91 5c 21 	lds	r30, 0x215C
    1c92:	f0 91 5d 21 	lds	r31, 0x215D
    1c96:	30 97       	sbiw	r30, 0x00	; 0
    1c98:	29 f0       	breq	.+10     	; 0x1ca4 <__vector_18+0x3c>
    1c9a:	80 91 52 22 	lds	r24, 0x2252
    1c9e:	90 91 53 22 	lds	r25, 0x2253
    1ca2:	19 95       	eicall
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	bf 91       	pop	r27
    1caa:	af 91       	pop	r26
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	7f 91       	pop	r23
    1cb2:	6f 91       	pop	r22
    1cb4:	5f 91       	pop	r21
    1cb6:	4f 91       	pop	r20
    1cb8:	3f 91       	pop	r19
    1cba:	2f 91       	pop	r18
    1cbc:	0f 90       	pop	r0
    1cbe:	0b be       	out	0x3b, r0	; 59
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	0b b6       	in	r0, 0x3b	; 59
    1cd6:	0f 92       	push	r0
    1cd8:	2f 93       	push	r18
    1cda:	3f 93       	push	r19
    1cdc:	4f 93       	push	r20
    1cde:	5f 93       	push	r21
    1ce0:	6f 93       	push	r22
    1ce2:	7f 93       	push	r23
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	ef 93       	push	r30
    1cee:	ff 93       	push	r31
    1cf0:	e0 91 5e 21 	lds	r30, 0x215E
    1cf4:	f0 91 5f 21 	lds	r31, 0x215F
    1cf8:	30 97       	sbiw	r30, 0x00	; 0
    1cfa:	29 f0       	breq	.+10     	; 0x1d06 <__vector_19+0x3c>
    1cfc:	80 91 54 22 	lds	r24, 0x2254
    1d00:	90 91 55 22 	lds	r25, 0x2255
    1d04:	19 95       	eicall
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0b be       	out	0x3b, r0	; 59
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	0b b6       	in	r0, 0x3b	; 59
    1d38:	0f 92       	push	r0
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	e0 91 60 21 	lds	r30, 0x2160
    1d56:	f0 91 61 21 	lds	r31, 0x2161
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <__vector_20+0x3c>
    1d5e:	80 91 56 22 	lds	r24, 0x2256
    1d62:	90 91 57 22 	lds	r25, 0x2257
    1d66:	19 95       	eicall
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0b be       	out	0x3b, r0	; 59
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1d8e:	1f 92       	push	r1
    1d90:	0f 92       	push	r0
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	0f 92       	push	r0
    1d96:	11 24       	eor	r1, r1
    1d98:	0b b6       	in	r0, 0x3b	; 59
    1d9a:	0f 92       	push	r0
    1d9c:	2f 93       	push	r18
    1d9e:	3f 93       	push	r19
    1da0:	4f 93       	push	r20
    1da2:	5f 93       	push	r21
    1da4:	6f 93       	push	r22
    1da6:	7f 93       	push	r23
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	af 93       	push	r26
    1dae:	bf 93       	push	r27
    1db0:	ef 93       	push	r30
    1db2:	ff 93       	push	r31
    1db4:	e0 91 62 21 	lds	r30, 0x2162
    1db8:	f0 91 63 21 	lds	r31, 0x2163
    1dbc:	30 97       	sbiw	r30, 0x00	; 0
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__vector_21+0x3c>
    1dc0:	80 91 58 22 	lds	r24, 0x2258
    1dc4:	90 91 59 22 	lds	r25, 0x2259
    1dc8:	19 95       	eicall
    1dca:	ff 91       	pop	r31
    1dcc:	ef 91       	pop	r30
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	0b be       	out	0x3b, r0	; 59
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	0b b6       	in	r0, 0x3b	; 59
    1dfc:	0f 92       	push	r0
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
    1e16:	e0 91 64 21 	lds	r30, 0x2164
    1e1a:	f0 91 65 21 	lds	r31, 0x2165
    1e1e:	30 97       	sbiw	r30, 0x00	; 0
    1e20:	29 f0       	breq	.+10     	; 0x1e2c <__vector_22+0x3c>
    1e22:	80 91 5a 22 	lds	r24, 0x225A
    1e26:	90 91 5b 22 	lds	r25, 0x225B
    1e2a:	19 95       	eicall
    1e2c:	ff 91       	pop	r31
    1e2e:	ef 91       	pop	r30
    1e30:	bf 91       	pop	r27
    1e32:	af 91       	pop	r26
    1e34:	9f 91       	pop	r25
    1e36:	8f 91       	pop	r24
    1e38:	7f 91       	pop	r23
    1e3a:	6f 91       	pop	r22
    1e3c:	5f 91       	pop	r21
    1e3e:	4f 91       	pop	r20
    1e40:	3f 91       	pop	r19
    1e42:	2f 91       	pop	r18
    1e44:	0f 90       	pop	r0
    1e46:	0b be       	out	0x3b, r0	; 59
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	0f 90       	pop	r0
    1e4e:	1f 90       	pop	r1
    1e50:	18 95       	reti

00001e52 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    1e52:	1f 92       	push	r1
    1e54:	0f 92       	push	r0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	0f 92       	push	r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	0b b6       	in	r0, 0x3b	; 59
    1e5e:	0f 92       	push	r0
    1e60:	2f 93       	push	r18
    1e62:	3f 93       	push	r19
    1e64:	4f 93       	push	r20
    1e66:	5f 93       	push	r21
    1e68:	6f 93       	push	r22
    1e6a:	7f 93       	push	r23
    1e6c:	8f 93       	push	r24
    1e6e:	9f 93       	push	r25
    1e70:	af 93       	push	r26
    1e72:	bf 93       	push	r27
    1e74:	ef 93       	push	r30
    1e76:	ff 93       	push	r31
    1e78:	e0 91 66 21 	lds	r30, 0x2166
    1e7c:	f0 91 67 21 	lds	r31, 0x2167
    1e80:	30 97       	sbiw	r30, 0x00	; 0
    1e82:	29 f0       	breq	.+10     	; 0x1e8e <__vector_23+0x3c>
    1e84:	80 91 5c 22 	lds	r24, 0x225C
    1e88:	90 91 5d 22 	lds	r25, 0x225D
    1e8c:	19 95       	eicall
    1e8e:	ff 91       	pop	r31
    1e90:	ef 91       	pop	r30
    1e92:	bf 91       	pop	r27
    1e94:	af 91       	pop	r26
    1e96:	9f 91       	pop	r25
    1e98:	8f 91       	pop	r24
    1e9a:	7f 91       	pop	r23
    1e9c:	6f 91       	pop	r22
    1e9e:	5f 91       	pop	r21
    1ea0:	4f 91       	pop	r20
    1ea2:	3f 91       	pop	r19
    1ea4:	2f 91       	pop	r18
    1ea6:	0f 90       	pop	r0
    1ea8:	0b be       	out	0x3b, r0	; 59
    1eaa:	0f 90       	pop	r0
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	0f 90       	pop	r0
    1eb0:	1f 90       	pop	r1
    1eb2:	18 95       	reti

00001eb4 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	0b b6       	in	r0, 0x3b	; 59
    1ec0:	0f 92       	push	r0
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	e0 91 68 21 	lds	r30, 0x2168
    1ede:	f0 91 69 21 	lds	r31, 0x2169
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	29 f0       	breq	.+10     	; 0x1ef0 <__vector_24+0x3c>
    1ee6:	80 91 5e 22 	lds	r24, 0x225E
    1eea:	90 91 5f 22 	lds	r25, 0x225F
    1eee:	19 95       	eicall
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	7f 91       	pop	r23
    1efe:	6f 91       	pop	r22
    1f00:	5f 91       	pop	r21
    1f02:	4f 91       	pop	r20
    1f04:	3f 91       	pop	r19
    1f06:	2f 91       	pop	r18
    1f08:	0f 90       	pop	r0
    1f0a:	0b be       	out	0x3b, r0	; 59
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	0b b6       	in	r0, 0x3b	; 59
    1f22:	0f 92       	push	r0
    1f24:	2f 93       	push	r18
    1f26:	3f 93       	push	r19
    1f28:	4f 93       	push	r20
    1f2a:	5f 93       	push	r21
    1f2c:	6f 93       	push	r22
    1f2e:	7f 93       	push	r23
    1f30:	8f 93       	push	r24
    1f32:	9f 93       	push	r25
    1f34:	af 93       	push	r26
    1f36:	bf 93       	push	r27
    1f38:	ef 93       	push	r30
    1f3a:	ff 93       	push	r31
    1f3c:	e0 91 6a 21 	lds	r30, 0x216A
    1f40:	f0 91 6b 21 	lds	r31, 0x216B
    1f44:	30 97       	sbiw	r30, 0x00	; 0
    1f46:	29 f0       	breq	.+10     	; 0x1f52 <__vector_25+0x3c>
    1f48:	80 91 60 22 	lds	r24, 0x2260
    1f4c:	90 91 61 22 	lds	r25, 0x2261
    1f50:	19 95       	eicall
    1f52:	ff 91       	pop	r31
    1f54:	ef 91       	pop	r30
    1f56:	bf 91       	pop	r27
    1f58:	af 91       	pop	r26
    1f5a:	9f 91       	pop	r25
    1f5c:	8f 91       	pop	r24
    1f5e:	7f 91       	pop	r23
    1f60:	6f 91       	pop	r22
    1f62:	5f 91       	pop	r21
    1f64:	4f 91       	pop	r20
    1f66:	3f 91       	pop	r19
    1f68:	2f 91       	pop	r18
    1f6a:	0f 90       	pop	r0
    1f6c:	0b be       	out	0x3b, r0	; 59
    1f6e:	0f 90       	pop	r0
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	0f 90       	pop	r0
    1f74:	1f 90       	pop	r1
    1f76:	18 95       	reti

00001f78 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    1f78:	1f 92       	push	r1
    1f7a:	0f 92       	push	r0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	0b b6       	in	r0, 0x3b	; 59
    1f84:	0f 92       	push	r0
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	4f 93       	push	r20
    1f8c:	5f 93       	push	r21
    1f8e:	6f 93       	push	r22
    1f90:	7f 93       	push	r23
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	af 93       	push	r26
    1f98:	bf 93       	push	r27
    1f9a:	ef 93       	push	r30
    1f9c:	ff 93       	push	r31
    1f9e:	e0 91 6c 21 	lds	r30, 0x216C
    1fa2:	f0 91 6d 21 	lds	r31, 0x216D
    1fa6:	30 97       	sbiw	r30, 0x00	; 0
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <__vector_26+0x3c>
    1faa:	80 91 62 22 	lds	r24, 0x2262
    1fae:	90 91 63 22 	lds	r25, 0x2263
    1fb2:	19 95       	eicall
    1fb4:	ff 91       	pop	r31
    1fb6:	ef 91       	pop	r30
    1fb8:	bf 91       	pop	r27
    1fba:	af 91       	pop	r26
    1fbc:	9f 91       	pop	r25
    1fbe:	8f 91       	pop	r24
    1fc0:	7f 91       	pop	r23
    1fc2:	6f 91       	pop	r22
    1fc4:	5f 91       	pop	r21
    1fc6:	4f 91       	pop	r20
    1fc8:	3f 91       	pop	r19
    1fca:	2f 91       	pop	r18
    1fcc:	0f 90       	pop	r0
    1fce:	0b be       	out	0x3b, r0	; 59
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    1fda:	1f 92       	push	r1
    1fdc:	0f 92       	push	r0
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	0f 92       	push	r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	0b b6       	in	r0, 0x3b	; 59
    1fe6:	0f 92       	push	r0
    1fe8:	2f 93       	push	r18
    1fea:	3f 93       	push	r19
    1fec:	4f 93       	push	r20
    1fee:	5f 93       	push	r21
    1ff0:	6f 93       	push	r22
    1ff2:	7f 93       	push	r23
    1ff4:	8f 93       	push	r24
    1ff6:	9f 93       	push	r25
    1ff8:	af 93       	push	r26
    1ffa:	bf 93       	push	r27
    1ffc:	ef 93       	push	r30
    1ffe:	ff 93       	push	r31
    2000:	e0 91 6e 21 	lds	r30, 0x216E
    2004:	f0 91 6f 21 	lds	r31, 0x216F
    2008:	30 97       	sbiw	r30, 0x00	; 0
    200a:	29 f0       	breq	.+10     	; 0x2016 <__vector_27+0x3c>
    200c:	80 91 64 22 	lds	r24, 0x2264
    2010:	90 91 65 22 	lds	r25, 0x2265
    2014:	19 95       	eicall
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	0f 90       	pop	r0
    2030:	0b be       	out	0x3b, r0	; 59
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	0b b6       	in	r0, 0x3b	; 59
    2048:	0f 92       	push	r0
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
    2062:	e0 91 70 21 	lds	r30, 0x2170
    2066:	f0 91 71 21 	lds	r31, 0x2171
    206a:	30 97       	sbiw	r30, 0x00	; 0
    206c:	29 f0       	breq	.+10     	; 0x2078 <__vector_28+0x3c>
    206e:	80 91 66 22 	lds	r24, 0x2266
    2072:	90 91 67 22 	lds	r25, 0x2267
    2076:	19 95       	eicall
    2078:	ff 91       	pop	r31
    207a:	ef 91       	pop	r30
    207c:	bf 91       	pop	r27
    207e:	af 91       	pop	r26
    2080:	9f 91       	pop	r25
    2082:	8f 91       	pop	r24
    2084:	7f 91       	pop	r23
    2086:	6f 91       	pop	r22
    2088:	5f 91       	pop	r21
    208a:	4f 91       	pop	r20
    208c:	3f 91       	pop	r19
    208e:	2f 91       	pop	r18
    2090:	0f 90       	pop	r0
    2092:	0b be       	out	0x3b, r0	; 59
    2094:	0f 90       	pop	r0
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	0f 90       	pop	r0
    209a:	1f 90       	pop	r1
    209c:	18 95       	reti

0000209e <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    209e:	1f 92       	push	r1
    20a0:	0f 92       	push	r0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	0f 92       	push	r0
    20a6:	11 24       	eor	r1, r1
    20a8:	0b b6       	in	r0, 0x3b	; 59
    20aa:	0f 92       	push	r0
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	6f 93       	push	r22
    20b6:	7f 93       	push	r23
    20b8:	8f 93       	push	r24
    20ba:	9f 93       	push	r25
    20bc:	af 93       	push	r26
    20be:	bf 93       	push	r27
    20c0:	ef 93       	push	r30
    20c2:	ff 93       	push	r31
    20c4:	e0 91 72 21 	lds	r30, 0x2172
    20c8:	f0 91 73 21 	lds	r31, 0x2173
    20cc:	30 97       	sbiw	r30, 0x00	; 0
    20ce:	29 f0       	breq	.+10     	; 0x20da <__vector_29+0x3c>
    20d0:	80 91 68 22 	lds	r24, 0x2268
    20d4:	90 91 69 22 	lds	r25, 0x2269
    20d8:	19 95       	eicall
    20da:	ff 91       	pop	r31
    20dc:	ef 91       	pop	r30
    20de:	bf 91       	pop	r27
    20e0:	af 91       	pop	r26
    20e2:	9f 91       	pop	r25
    20e4:	8f 91       	pop	r24
    20e6:	7f 91       	pop	r23
    20e8:	6f 91       	pop	r22
    20ea:	5f 91       	pop	r21
    20ec:	4f 91       	pop	r20
    20ee:	3f 91       	pop	r19
    20f0:	2f 91       	pop	r18
    20f2:	0f 90       	pop	r0
    20f4:	0b be       	out	0x3b, r0	; 59
    20f6:	0f 90       	pop	r0
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	0f 90       	pop	r0
    20fc:	1f 90       	pop	r1
    20fe:	18 95       	reti

00002100 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	0b b6       	in	r0, 0x3b	; 59
    210c:	0f 92       	push	r0
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31
    2126:	e0 91 74 21 	lds	r30, 0x2174
    212a:	f0 91 75 21 	lds	r31, 0x2175
    212e:	30 97       	sbiw	r30, 0x00	; 0
    2130:	29 f0       	breq	.+10     	; 0x213c <__vector_30+0x3c>
    2132:	80 91 6a 22 	lds	r24, 0x226A
    2136:	90 91 6b 22 	lds	r25, 0x226B
    213a:	19 95       	eicall
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	bf 91       	pop	r27
    2142:	af 91       	pop	r26
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	7f 91       	pop	r23
    214a:	6f 91       	pop	r22
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0b be       	out	0x3b, r0	; 59
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	0f 90       	pop	r0
    215e:	1f 90       	pop	r1
    2160:	18 95       	reti

00002162 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2162:	1f 92       	push	r1
    2164:	0f 92       	push	r0
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	0f 92       	push	r0
    216a:	11 24       	eor	r1, r1
    216c:	0b b6       	in	r0, 0x3b	; 59
    216e:	0f 92       	push	r0
    2170:	2f 93       	push	r18
    2172:	3f 93       	push	r19
    2174:	4f 93       	push	r20
    2176:	5f 93       	push	r21
    2178:	6f 93       	push	r22
    217a:	7f 93       	push	r23
    217c:	8f 93       	push	r24
    217e:	9f 93       	push	r25
    2180:	af 93       	push	r26
    2182:	bf 93       	push	r27
    2184:	ef 93       	push	r30
    2186:	ff 93       	push	r31
    2188:	e0 91 76 21 	lds	r30, 0x2176
    218c:	f0 91 77 21 	lds	r31, 0x2177
    2190:	30 97       	sbiw	r30, 0x00	; 0
    2192:	29 f0       	breq	.+10     	; 0x219e <__vector_31+0x3c>
    2194:	80 91 6c 22 	lds	r24, 0x226C
    2198:	90 91 6d 22 	lds	r25, 0x226D
    219c:	19 95       	eicall
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0b be       	out	0x3b, r0	; 59
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	0f 90       	pop	r0
    21c0:	1f 90       	pop	r1
    21c2:	18 95       	reti

000021c4 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    21c4:	1f 92       	push	r1
    21c6:	0f 92       	push	r0
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	0f 92       	push	r0
    21cc:	11 24       	eor	r1, r1
    21ce:	0b b6       	in	r0, 0x3b	; 59
    21d0:	0f 92       	push	r0
    21d2:	2f 93       	push	r18
    21d4:	3f 93       	push	r19
    21d6:	4f 93       	push	r20
    21d8:	5f 93       	push	r21
    21da:	6f 93       	push	r22
    21dc:	7f 93       	push	r23
    21de:	8f 93       	push	r24
    21e0:	9f 93       	push	r25
    21e2:	af 93       	push	r26
    21e4:	bf 93       	push	r27
    21e6:	ef 93       	push	r30
    21e8:	ff 93       	push	r31
    21ea:	e0 91 78 21 	lds	r30, 0x2178
    21ee:	f0 91 79 21 	lds	r31, 0x2179
    21f2:	30 97       	sbiw	r30, 0x00	; 0
    21f4:	29 f0       	breq	.+10     	; 0x2200 <__vector_32+0x3c>
    21f6:	80 91 6e 22 	lds	r24, 0x226E
    21fa:	90 91 6f 22 	lds	r25, 0x226F
    21fe:	19 95       	eicall
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	bf 91       	pop	r27
    2206:	af 91       	pop	r26
    2208:	9f 91       	pop	r25
    220a:	8f 91       	pop	r24
    220c:	7f 91       	pop	r23
    220e:	6f 91       	pop	r22
    2210:	5f 91       	pop	r21
    2212:	4f 91       	pop	r20
    2214:	3f 91       	pop	r19
    2216:	2f 91       	pop	r18
    2218:	0f 90       	pop	r0
    221a:	0b be       	out	0x3b, r0	; 59
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

00002226 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2226:	1f 92       	push	r1
    2228:	0f 92       	push	r0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	0f 92       	push	r0
    222e:	11 24       	eor	r1, r1
    2230:	0b b6       	in	r0, 0x3b	; 59
    2232:	0f 92       	push	r0
    2234:	2f 93       	push	r18
    2236:	3f 93       	push	r19
    2238:	4f 93       	push	r20
    223a:	5f 93       	push	r21
    223c:	6f 93       	push	r22
    223e:	7f 93       	push	r23
    2240:	8f 93       	push	r24
    2242:	9f 93       	push	r25
    2244:	af 93       	push	r26
    2246:	bf 93       	push	r27
    2248:	ef 93       	push	r30
    224a:	ff 93       	push	r31
    224c:	e0 91 7a 21 	lds	r30, 0x217A
    2250:	f0 91 7b 21 	lds	r31, 0x217B
    2254:	30 97       	sbiw	r30, 0x00	; 0
    2256:	29 f0       	breq	.+10     	; 0x2262 <__vector_33+0x3c>
    2258:	80 91 70 22 	lds	r24, 0x2270
    225c:	90 91 71 22 	lds	r25, 0x2271
    2260:	19 95       	eicall
    2262:	ff 91       	pop	r31
    2264:	ef 91       	pop	r30
    2266:	bf 91       	pop	r27
    2268:	af 91       	pop	r26
    226a:	9f 91       	pop	r25
    226c:	8f 91       	pop	r24
    226e:	7f 91       	pop	r23
    2270:	6f 91       	pop	r22
    2272:	5f 91       	pop	r21
    2274:	4f 91       	pop	r20
    2276:	3f 91       	pop	r19
    2278:	2f 91       	pop	r18
    227a:	0f 90       	pop	r0
    227c:	0b be       	out	0x3b, r0	; 59
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f 90       	pop	r0
    2284:	1f 90       	pop	r1
    2286:	18 95       	reti

00002288 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2288:	1f 92       	push	r1
    228a:	0f 92       	push	r0
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	0f 92       	push	r0
    2290:	11 24       	eor	r1, r1
    2292:	0b b6       	in	r0, 0x3b	; 59
    2294:	0f 92       	push	r0
    2296:	2f 93       	push	r18
    2298:	3f 93       	push	r19
    229a:	4f 93       	push	r20
    229c:	5f 93       	push	r21
    229e:	6f 93       	push	r22
    22a0:	7f 93       	push	r23
    22a2:	8f 93       	push	r24
    22a4:	9f 93       	push	r25
    22a6:	af 93       	push	r26
    22a8:	bf 93       	push	r27
    22aa:	ef 93       	push	r30
    22ac:	ff 93       	push	r31
    22ae:	e0 91 7c 21 	lds	r30, 0x217C
    22b2:	f0 91 7d 21 	lds	r31, 0x217D
    22b6:	30 97       	sbiw	r30, 0x00	; 0
    22b8:	29 f0       	breq	.+10     	; 0x22c4 <__vector_34+0x3c>
    22ba:	80 91 72 22 	lds	r24, 0x2272
    22be:	90 91 73 22 	lds	r25, 0x2273
    22c2:	19 95       	eicall
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	0f 90       	pop	r0
    22de:	0b be       	out	0x3b, r0	; 59
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    22ea:	1f 92       	push	r1
    22ec:	0f 92       	push	r0
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	0f 92       	push	r0
    22f2:	11 24       	eor	r1, r1
    22f4:	0b b6       	in	r0, 0x3b	; 59
    22f6:	0f 92       	push	r0
    22f8:	2f 93       	push	r18
    22fa:	3f 93       	push	r19
    22fc:	4f 93       	push	r20
    22fe:	5f 93       	push	r21
    2300:	6f 93       	push	r22
    2302:	7f 93       	push	r23
    2304:	8f 93       	push	r24
    2306:	9f 93       	push	r25
    2308:	af 93       	push	r26
    230a:	bf 93       	push	r27
    230c:	ef 93       	push	r30
    230e:	ff 93       	push	r31
    2310:	e0 91 7e 21 	lds	r30, 0x217E
    2314:	f0 91 7f 21 	lds	r31, 0x217F
    2318:	30 97       	sbiw	r30, 0x00	; 0
    231a:	29 f0       	breq	.+10     	; 0x2326 <__vector_35+0x3c>
    231c:	80 91 74 22 	lds	r24, 0x2274
    2320:	90 91 75 22 	lds	r25, 0x2275
    2324:	19 95       	eicall
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	7f 91       	pop	r23
    2334:	6f 91       	pop	r22
    2336:	5f 91       	pop	r21
    2338:	4f 91       	pop	r20
    233a:	3f 91       	pop	r19
    233c:	2f 91       	pop	r18
    233e:	0f 90       	pop	r0
    2340:	0b be       	out	0x3b, r0	; 59
    2342:	0f 90       	pop	r0
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	0f 90       	pop	r0
    2348:	1f 90       	pop	r1
    234a:	18 95       	reti

0000234c <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    234c:	1f 92       	push	r1
    234e:	0f 92       	push	r0
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	0f 92       	push	r0
    2354:	11 24       	eor	r1, r1
    2356:	0b b6       	in	r0, 0x3b	; 59
    2358:	0f 92       	push	r0
    235a:	2f 93       	push	r18
    235c:	3f 93       	push	r19
    235e:	4f 93       	push	r20
    2360:	5f 93       	push	r21
    2362:	6f 93       	push	r22
    2364:	7f 93       	push	r23
    2366:	8f 93       	push	r24
    2368:	9f 93       	push	r25
    236a:	af 93       	push	r26
    236c:	bf 93       	push	r27
    236e:	ef 93       	push	r30
    2370:	ff 93       	push	r31
    2372:	e0 91 80 21 	lds	r30, 0x2180
    2376:	f0 91 81 21 	lds	r31, 0x2181
    237a:	30 97       	sbiw	r30, 0x00	; 0
    237c:	29 f0       	breq	.+10     	; 0x2388 <__vector_36+0x3c>
    237e:	80 91 76 22 	lds	r24, 0x2276
    2382:	90 91 77 22 	lds	r25, 0x2277
    2386:	19 95       	eicall
    2388:	ff 91       	pop	r31
    238a:	ef 91       	pop	r30
    238c:	bf 91       	pop	r27
    238e:	af 91       	pop	r26
    2390:	9f 91       	pop	r25
    2392:	8f 91       	pop	r24
    2394:	7f 91       	pop	r23
    2396:	6f 91       	pop	r22
    2398:	5f 91       	pop	r21
    239a:	4f 91       	pop	r20
    239c:	3f 91       	pop	r19
    239e:	2f 91       	pop	r18
    23a0:	0f 90       	pop	r0
    23a2:	0b be       	out	0x3b, r0	; 59
    23a4:	0f 90       	pop	r0
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	0f 90       	pop	r0
    23aa:	1f 90       	pop	r1
    23ac:	18 95       	reti

000023ae <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    23ae:	1f 92       	push	r1
    23b0:	0f 92       	push	r0
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	0f 92       	push	r0
    23b6:	11 24       	eor	r1, r1
    23b8:	0b b6       	in	r0, 0x3b	; 59
    23ba:	0f 92       	push	r0
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	6f 93       	push	r22
    23c6:	7f 93       	push	r23
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	af 93       	push	r26
    23ce:	bf 93       	push	r27
    23d0:	ef 93       	push	r30
    23d2:	ff 93       	push	r31
    23d4:	e0 91 82 21 	lds	r30, 0x2182
    23d8:	f0 91 83 21 	lds	r31, 0x2183
    23dc:	30 97       	sbiw	r30, 0x00	; 0
    23de:	29 f0       	breq	.+10     	; 0x23ea <__vector_37+0x3c>
    23e0:	80 91 78 22 	lds	r24, 0x2278
    23e4:	90 91 79 22 	lds	r25, 0x2279
    23e8:	19 95       	eicall
    23ea:	ff 91       	pop	r31
    23ec:	ef 91       	pop	r30
    23ee:	bf 91       	pop	r27
    23f0:	af 91       	pop	r26
    23f2:	9f 91       	pop	r25
    23f4:	8f 91       	pop	r24
    23f6:	7f 91       	pop	r23
    23f8:	6f 91       	pop	r22
    23fa:	5f 91       	pop	r21
    23fc:	4f 91       	pop	r20
    23fe:	3f 91       	pop	r19
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0b be       	out	0x3b, r0	; 59
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	5f 93       	push	r21
    2426:	6f 93       	push	r22
    2428:	7f 93       	push	r23
    242a:	8f 93       	push	r24
    242c:	9f 93       	push	r25
    242e:	af 93       	push	r26
    2430:	bf 93       	push	r27
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    2436:	e0 91 84 21 	lds	r30, 0x2184
    243a:	f0 91 85 21 	lds	r31, 0x2185
    243e:	30 97       	sbiw	r30, 0x00	; 0
    2440:	29 f0       	breq	.+10     	; 0x244c <__vector_38+0x3c>
    2442:	80 91 7a 22 	lds	r24, 0x227A
    2446:	90 91 7b 22 	lds	r25, 0x227B
    244a:	19 95       	eicall
    244c:	ff 91       	pop	r31
    244e:	ef 91       	pop	r30
    2450:	bf 91       	pop	r27
    2452:	af 91       	pop	r26
    2454:	9f 91       	pop	r25
    2456:	8f 91       	pop	r24
    2458:	7f 91       	pop	r23
    245a:	6f 91       	pop	r22
    245c:	5f 91       	pop	r21
    245e:	4f 91       	pop	r20
    2460:	3f 91       	pop	r19
    2462:	2f 91       	pop	r18
    2464:	0f 90       	pop	r0
    2466:	0b be       	out	0x3b, r0	; 59
    2468:	0f 90       	pop	r0
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	0f 90       	pop	r0
    246e:	1f 90       	pop	r1
    2470:	18 95       	reti

00002472 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	0b b6       	in	r0, 0x3b	; 59
    247e:	0f 92       	push	r0
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
    2498:	e0 91 86 21 	lds	r30, 0x2186
    249c:	f0 91 87 21 	lds	r31, 0x2187
    24a0:	30 97       	sbiw	r30, 0x00	; 0
    24a2:	29 f0       	breq	.+10     	; 0x24ae <__vector_39+0x3c>
    24a4:	80 91 7c 22 	lds	r24, 0x227C
    24a8:	90 91 7d 22 	lds	r25, 0x227D
    24ac:	19 95       	eicall
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	bf 91       	pop	r27
    24b4:	af 91       	pop	r26
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	7f 91       	pop	r23
    24bc:	6f 91       	pop	r22
    24be:	5f 91       	pop	r21
    24c0:	4f 91       	pop	r20
    24c2:	3f 91       	pop	r19
    24c4:	2f 91       	pop	r18
    24c6:	0f 90       	pop	r0
    24c8:	0b be       	out	0x3b, r0	; 59
    24ca:	0f 90       	pop	r0
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	0f 90       	pop	r0
    24d0:	1f 90       	pop	r1
    24d2:	18 95       	reti

000024d4 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    24d4:	1f 92       	push	r1
    24d6:	0f 92       	push	r0
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	0f 92       	push	r0
    24dc:	11 24       	eor	r1, r1
    24de:	0b b6       	in	r0, 0x3b	; 59
    24e0:	0f 92       	push	r0
    24e2:	2f 93       	push	r18
    24e4:	3f 93       	push	r19
    24e6:	4f 93       	push	r20
    24e8:	5f 93       	push	r21
    24ea:	6f 93       	push	r22
    24ec:	7f 93       	push	r23
    24ee:	8f 93       	push	r24
    24f0:	9f 93       	push	r25
    24f2:	af 93       	push	r26
    24f4:	bf 93       	push	r27
    24f6:	ef 93       	push	r30
    24f8:	ff 93       	push	r31
    24fa:	e0 91 88 21 	lds	r30, 0x2188
    24fe:	f0 91 89 21 	lds	r31, 0x2189
    2502:	30 97       	sbiw	r30, 0x00	; 0
    2504:	29 f0       	breq	.+10     	; 0x2510 <__vector_40+0x3c>
    2506:	80 91 7e 22 	lds	r24, 0x227E
    250a:	90 91 7f 22 	lds	r25, 0x227F
    250e:	19 95       	eicall
    2510:	ff 91       	pop	r31
    2512:	ef 91       	pop	r30
    2514:	bf 91       	pop	r27
    2516:	af 91       	pop	r26
    2518:	9f 91       	pop	r25
    251a:	8f 91       	pop	r24
    251c:	7f 91       	pop	r23
    251e:	6f 91       	pop	r22
    2520:	5f 91       	pop	r21
    2522:	4f 91       	pop	r20
    2524:	3f 91       	pop	r19
    2526:	2f 91       	pop	r18
    2528:	0f 90       	pop	r0
    252a:	0b be       	out	0x3b, r0	; 59
    252c:	0f 90       	pop	r0
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	0f 90       	pop	r0
    2532:	1f 90       	pop	r1
    2534:	18 95       	reti

00002536 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    2536:	1f 92       	push	r1
    2538:	0f 92       	push	r0
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	0f 92       	push	r0
    253e:	11 24       	eor	r1, r1
    2540:	0b b6       	in	r0, 0x3b	; 59
    2542:	0f 92       	push	r0
    2544:	2f 93       	push	r18
    2546:	3f 93       	push	r19
    2548:	4f 93       	push	r20
    254a:	5f 93       	push	r21
    254c:	6f 93       	push	r22
    254e:	7f 93       	push	r23
    2550:	8f 93       	push	r24
    2552:	9f 93       	push	r25
    2554:	af 93       	push	r26
    2556:	bf 93       	push	r27
    2558:	ef 93       	push	r30
    255a:	ff 93       	push	r31
    255c:	e0 91 8a 21 	lds	r30, 0x218A
    2560:	f0 91 8b 21 	lds	r31, 0x218B
    2564:	30 97       	sbiw	r30, 0x00	; 0
    2566:	29 f0       	breq	.+10     	; 0x2572 <__vector_41+0x3c>
    2568:	80 91 80 22 	lds	r24, 0x2280
    256c:	90 91 81 22 	lds	r25, 0x2281
    2570:	19 95       	eicall
    2572:	ff 91       	pop	r31
    2574:	ef 91       	pop	r30
    2576:	bf 91       	pop	r27
    2578:	af 91       	pop	r26
    257a:	9f 91       	pop	r25
    257c:	8f 91       	pop	r24
    257e:	7f 91       	pop	r23
    2580:	6f 91       	pop	r22
    2582:	5f 91       	pop	r21
    2584:	4f 91       	pop	r20
    2586:	3f 91       	pop	r19
    2588:	2f 91       	pop	r18
    258a:	0f 90       	pop	r0
    258c:	0b be       	out	0x3b, r0	; 59
    258e:	0f 90       	pop	r0
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	0f 90       	pop	r0
    2594:	1f 90       	pop	r1
    2596:	18 95       	reti

00002598 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    2598:	1f 92       	push	r1
    259a:	0f 92       	push	r0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	0f 92       	push	r0
    25a0:	11 24       	eor	r1, r1
    25a2:	0b b6       	in	r0, 0x3b	; 59
    25a4:	0f 92       	push	r0
    25a6:	2f 93       	push	r18
    25a8:	3f 93       	push	r19
    25aa:	4f 93       	push	r20
    25ac:	5f 93       	push	r21
    25ae:	6f 93       	push	r22
    25b0:	7f 93       	push	r23
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	af 93       	push	r26
    25b8:	bf 93       	push	r27
    25ba:	ef 93       	push	r30
    25bc:	ff 93       	push	r31
    25be:	e0 91 8c 21 	lds	r30, 0x218C
    25c2:	f0 91 8d 21 	lds	r31, 0x218D
    25c6:	30 97       	sbiw	r30, 0x00	; 0
    25c8:	29 f0       	breq	.+10     	; 0x25d4 <__vector_42+0x3c>
    25ca:	80 91 82 22 	lds	r24, 0x2282
    25ce:	90 91 83 22 	lds	r25, 0x2283
    25d2:	19 95       	eicall
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	7f 91       	pop	r23
    25e2:	6f 91       	pop	r22
    25e4:	5f 91       	pop	r21
    25e6:	4f 91       	pop	r20
    25e8:	3f 91       	pop	r19
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0b be       	out	0x3b, r0	; 59
    25f0:	0f 90       	pop	r0
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	0f 90       	pop	r0
    25f6:	1f 90       	pop	r1
    25f8:	18 95       	reti

000025fa <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	11 24       	eor	r1, r1
    2604:	0b b6       	in	r0, 0x3b	; 59
    2606:	0f 92       	push	r0
    2608:	2f 93       	push	r18
    260a:	3f 93       	push	r19
    260c:	4f 93       	push	r20
    260e:	5f 93       	push	r21
    2610:	6f 93       	push	r22
    2612:	7f 93       	push	r23
    2614:	8f 93       	push	r24
    2616:	9f 93       	push	r25
    2618:	af 93       	push	r26
    261a:	bf 93       	push	r27
    261c:	ef 93       	push	r30
    261e:	ff 93       	push	r31
    2620:	e0 91 8e 21 	lds	r30, 0x218E
    2624:	f0 91 8f 21 	lds	r31, 0x218F
    2628:	30 97       	sbiw	r30, 0x00	; 0
    262a:	29 f0       	breq	.+10     	; 0x2636 <__vector_43+0x3c>
    262c:	80 91 84 22 	lds	r24, 0x2284
    2630:	90 91 85 22 	lds	r25, 0x2285
    2634:	19 95       	eicall
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0b be       	out	0x3b, r0	; 59
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	0b b6       	in	r0, 0x3b	; 59
    2668:	0f 92       	push	r0
    266a:	2f 93       	push	r18
    266c:	3f 93       	push	r19
    266e:	4f 93       	push	r20
    2670:	5f 93       	push	r21
    2672:	6f 93       	push	r22
    2674:	7f 93       	push	r23
    2676:	8f 93       	push	r24
    2678:	9f 93       	push	r25
    267a:	af 93       	push	r26
    267c:	bf 93       	push	r27
    267e:	ef 93       	push	r30
    2680:	ff 93       	push	r31
    2682:	e0 91 90 21 	lds	r30, 0x2190
    2686:	f0 91 91 21 	lds	r31, 0x2191
    268a:	30 97       	sbiw	r30, 0x00	; 0
    268c:	29 f0       	breq	.+10     	; 0x2698 <__vector_44+0x3c>
    268e:	80 91 86 22 	lds	r24, 0x2286
    2692:	90 91 87 22 	lds	r25, 0x2287
    2696:	19 95       	eicall
    2698:	ff 91       	pop	r31
    269a:	ef 91       	pop	r30
    269c:	bf 91       	pop	r27
    269e:	af 91       	pop	r26
    26a0:	9f 91       	pop	r25
    26a2:	8f 91       	pop	r24
    26a4:	7f 91       	pop	r23
    26a6:	6f 91       	pop	r22
    26a8:	5f 91       	pop	r21
    26aa:	4f 91       	pop	r20
    26ac:	3f 91       	pop	r19
    26ae:	2f 91       	pop	r18
    26b0:	0f 90       	pop	r0
    26b2:	0b be       	out	0x3b, r0	; 59
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	0f 90       	pop	r0
    26ba:	1f 90       	pop	r1
    26bc:	18 95       	reti

000026be <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    26be:	1f 92       	push	r1
    26c0:	0f 92       	push	r0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	0f 92       	push	r0
    26c6:	11 24       	eor	r1, r1
    26c8:	0b b6       	in	r0, 0x3b	; 59
    26ca:	0f 92       	push	r0
    26cc:	2f 93       	push	r18
    26ce:	3f 93       	push	r19
    26d0:	4f 93       	push	r20
    26d2:	5f 93       	push	r21
    26d4:	6f 93       	push	r22
    26d6:	7f 93       	push	r23
    26d8:	8f 93       	push	r24
    26da:	9f 93       	push	r25
    26dc:	af 93       	push	r26
    26de:	bf 93       	push	r27
    26e0:	ef 93       	push	r30
    26e2:	ff 93       	push	r31
    26e4:	e0 91 92 21 	lds	r30, 0x2192
    26e8:	f0 91 93 21 	lds	r31, 0x2193
    26ec:	30 97       	sbiw	r30, 0x00	; 0
    26ee:	29 f0       	breq	.+10     	; 0x26fa <__vector_45+0x3c>
    26f0:	80 91 88 22 	lds	r24, 0x2288
    26f4:	90 91 89 22 	lds	r25, 0x2289
    26f8:	19 95       	eicall
    26fa:	ff 91       	pop	r31
    26fc:	ef 91       	pop	r30
    26fe:	bf 91       	pop	r27
    2700:	af 91       	pop	r26
    2702:	9f 91       	pop	r25
    2704:	8f 91       	pop	r24
    2706:	7f 91       	pop	r23
    2708:	6f 91       	pop	r22
    270a:	5f 91       	pop	r21
    270c:	4f 91       	pop	r20
    270e:	3f 91       	pop	r19
    2710:	2f 91       	pop	r18
    2712:	0f 90       	pop	r0
    2714:	0b be       	out	0x3b, r0	; 59
    2716:	0f 90       	pop	r0
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	0f 90       	pop	r0
    271c:	1f 90       	pop	r1
    271e:	18 95       	reti

00002720 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    2720:	1f 92       	push	r1
    2722:	0f 92       	push	r0
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	0f 92       	push	r0
    2728:	11 24       	eor	r1, r1
    272a:	0b b6       	in	r0, 0x3b	; 59
    272c:	0f 92       	push	r0
    272e:	2f 93       	push	r18
    2730:	3f 93       	push	r19
    2732:	4f 93       	push	r20
    2734:	5f 93       	push	r21
    2736:	6f 93       	push	r22
    2738:	7f 93       	push	r23
    273a:	8f 93       	push	r24
    273c:	9f 93       	push	r25
    273e:	af 93       	push	r26
    2740:	bf 93       	push	r27
    2742:	ef 93       	push	r30
    2744:	ff 93       	push	r31
    2746:	e0 91 94 21 	lds	r30, 0x2194
    274a:	f0 91 95 21 	lds	r31, 0x2195
    274e:	30 97       	sbiw	r30, 0x00	; 0
    2750:	29 f0       	breq	.+10     	; 0x275c <__vector_46+0x3c>
    2752:	80 91 8a 22 	lds	r24, 0x228A
    2756:	90 91 8b 22 	lds	r25, 0x228B
    275a:	19 95       	eicall
    275c:	ff 91       	pop	r31
    275e:	ef 91       	pop	r30
    2760:	bf 91       	pop	r27
    2762:	af 91       	pop	r26
    2764:	9f 91       	pop	r25
    2766:	8f 91       	pop	r24
    2768:	7f 91       	pop	r23
    276a:	6f 91       	pop	r22
    276c:	5f 91       	pop	r21
    276e:	4f 91       	pop	r20
    2770:	3f 91       	pop	r19
    2772:	2f 91       	pop	r18
    2774:	0f 90       	pop	r0
    2776:	0b be       	out	0x3b, r0	; 59
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	0f 90       	pop	r0
    277e:	1f 90       	pop	r1
    2780:	18 95       	reti

00002782 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2782:	1f 92       	push	r1
    2784:	0f 92       	push	r0
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	0f 92       	push	r0
    278a:	11 24       	eor	r1, r1
    278c:	0b b6       	in	r0, 0x3b	; 59
    278e:	0f 92       	push	r0
    2790:	2f 93       	push	r18
    2792:	3f 93       	push	r19
    2794:	4f 93       	push	r20
    2796:	5f 93       	push	r21
    2798:	6f 93       	push	r22
    279a:	7f 93       	push	r23
    279c:	8f 93       	push	r24
    279e:	9f 93       	push	r25
    27a0:	af 93       	push	r26
    27a2:	bf 93       	push	r27
    27a4:	ef 93       	push	r30
    27a6:	ff 93       	push	r31
    27a8:	e0 91 96 21 	lds	r30, 0x2196
    27ac:	f0 91 97 21 	lds	r31, 0x2197
    27b0:	30 97       	sbiw	r30, 0x00	; 0
    27b2:	29 f0       	breq	.+10     	; 0x27be <__vector_47+0x3c>
    27b4:	80 91 8c 22 	lds	r24, 0x228C
    27b8:	90 91 8d 22 	lds	r25, 0x228D
    27bc:	19 95       	eicall
    27be:	ff 91       	pop	r31
    27c0:	ef 91       	pop	r30
    27c2:	bf 91       	pop	r27
    27c4:	af 91       	pop	r26
    27c6:	9f 91       	pop	r25
    27c8:	8f 91       	pop	r24
    27ca:	7f 91       	pop	r23
    27cc:	6f 91       	pop	r22
    27ce:	5f 91       	pop	r21
    27d0:	4f 91       	pop	r20
    27d2:	3f 91       	pop	r19
    27d4:	2f 91       	pop	r18
    27d6:	0f 90       	pop	r0
    27d8:	0b be       	out	0x3b, r0	; 59
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

000027e4 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    27e4:	1f 92       	push	r1
    27e6:	0f 92       	push	r0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	0f 92       	push	r0
    27ec:	11 24       	eor	r1, r1
    27ee:	0b b6       	in	r0, 0x3b	; 59
    27f0:	0f 92       	push	r0
    27f2:	2f 93       	push	r18
    27f4:	3f 93       	push	r19
    27f6:	4f 93       	push	r20
    27f8:	5f 93       	push	r21
    27fa:	6f 93       	push	r22
    27fc:	7f 93       	push	r23
    27fe:	8f 93       	push	r24
    2800:	9f 93       	push	r25
    2802:	af 93       	push	r26
    2804:	bf 93       	push	r27
    2806:	ef 93       	push	r30
    2808:	ff 93       	push	r31
    280a:	e0 91 98 21 	lds	r30, 0x2198
    280e:	f0 91 99 21 	lds	r31, 0x2199
    2812:	30 97       	sbiw	r30, 0x00	; 0
    2814:	29 f0       	breq	.+10     	; 0x2820 <__vector_48+0x3c>
    2816:	80 91 8e 22 	lds	r24, 0x228E
    281a:	90 91 8f 22 	lds	r25, 0x228F
    281e:	19 95       	eicall
    2820:	ff 91       	pop	r31
    2822:	ef 91       	pop	r30
    2824:	bf 91       	pop	r27
    2826:	af 91       	pop	r26
    2828:	9f 91       	pop	r25
    282a:	8f 91       	pop	r24
    282c:	7f 91       	pop	r23
    282e:	6f 91       	pop	r22
    2830:	5f 91       	pop	r21
    2832:	4f 91       	pop	r20
    2834:	3f 91       	pop	r19
    2836:	2f 91       	pop	r18
    2838:	0f 90       	pop	r0
    283a:	0b be       	out	0x3b, r0	; 59
    283c:	0f 90       	pop	r0
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	0f 90       	pop	r0
    2842:	1f 90       	pop	r1
    2844:	18 95       	reti

00002846 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2846:	1f 92       	push	r1
    2848:	0f 92       	push	r0
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	0f 92       	push	r0
    284e:	11 24       	eor	r1, r1
    2850:	0b b6       	in	r0, 0x3b	; 59
    2852:	0f 92       	push	r0
    2854:	2f 93       	push	r18
    2856:	3f 93       	push	r19
    2858:	4f 93       	push	r20
    285a:	5f 93       	push	r21
    285c:	6f 93       	push	r22
    285e:	7f 93       	push	r23
    2860:	8f 93       	push	r24
    2862:	9f 93       	push	r25
    2864:	af 93       	push	r26
    2866:	bf 93       	push	r27
    2868:	ef 93       	push	r30
    286a:	ff 93       	push	r31
    286c:	e0 91 9a 21 	lds	r30, 0x219A
    2870:	f0 91 9b 21 	lds	r31, 0x219B
    2874:	30 97       	sbiw	r30, 0x00	; 0
    2876:	29 f0       	breq	.+10     	; 0x2882 <__vector_49+0x3c>
    2878:	80 91 90 22 	lds	r24, 0x2290
    287c:	90 91 91 22 	lds	r25, 0x2291
    2880:	19 95       	eicall
    2882:	ff 91       	pop	r31
    2884:	ef 91       	pop	r30
    2886:	bf 91       	pop	r27
    2888:	af 91       	pop	r26
    288a:	9f 91       	pop	r25
    288c:	8f 91       	pop	r24
    288e:	7f 91       	pop	r23
    2890:	6f 91       	pop	r22
    2892:	5f 91       	pop	r21
    2894:	4f 91       	pop	r20
    2896:	3f 91       	pop	r19
    2898:	2f 91       	pop	r18
    289a:	0f 90       	pop	r0
    289c:	0b be       	out	0x3b, r0	; 59
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	0f 90       	pop	r0
    28a4:	1f 90       	pop	r1
    28a6:	18 95       	reti

000028a8 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    28a8:	1f 92       	push	r1
    28aa:	0f 92       	push	r0
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	0f 92       	push	r0
    28b0:	11 24       	eor	r1, r1
    28b2:	0b b6       	in	r0, 0x3b	; 59
    28b4:	0f 92       	push	r0
    28b6:	2f 93       	push	r18
    28b8:	3f 93       	push	r19
    28ba:	4f 93       	push	r20
    28bc:	5f 93       	push	r21
    28be:	6f 93       	push	r22
    28c0:	7f 93       	push	r23
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	ef 93       	push	r30
    28cc:	ff 93       	push	r31
    28ce:	e0 91 9c 21 	lds	r30, 0x219C
    28d2:	f0 91 9d 21 	lds	r31, 0x219D
    28d6:	30 97       	sbiw	r30, 0x00	; 0
    28d8:	29 f0       	breq	.+10     	; 0x28e4 <__vector_50+0x3c>
    28da:	80 91 92 22 	lds	r24, 0x2292
    28de:	90 91 93 22 	lds	r25, 0x2293
    28e2:	19 95       	eicall
    28e4:	ff 91       	pop	r31
    28e6:	ef 91       	pop	r30
    28e8:	bf 91       	pop	r27
    28ea:	af 91       	pop	r26
    28ec:	9f 91       	pop	r25
    28ee:	8f 91       	pop	r24
    28f0:	7f 91       	pop	r23
    28f2:	6f 91       	pop	r22
    28f4:	5f 91       	pop	r21
    28f6:	4f 91       	pop	r20
    28f8:	3f 91       	pop	r19
    28fa:	2f 91       	pop	r18
    28fc:	0f 90       	pop	r0
    28fe:	0b be       	out	0x3b, r0	; 59
    2900:	0f 90       	pop	r0
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	0f 90       	pop	r0
    2906:	1f 90       	pop	r1
    2908:	18 95       	reti

0000290a <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    290a:	1f 92       	push	r1
    290c:	0f 92       	push	r0
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	0f 92       	push	r0
    2912:	11 24       	eor	r1, r1
    2914:	0b b6       	in	r0, 0x3b	; 59
    2916:	0f 92       	push	r0
    2918:	2f 93       	push	r18
    291a:	3f 93       	push	r19
    291c:	4f 93       	push	r20
    291e:	5f 93       	push	r21
    2920:	6f 93       	push	r22
    2922:	7f 93       	push	r23
    2924:	8f 93       	push	r24
    2926:	9f 93       	push	r25
    2928:	af 93       	push	r26
    292a:	bf 93       	push	r27
    292c:	ef 93       	push	r30
    292e:	ff 93       	push	r31
    2930:	e0 91 9e 21 	lds	r30, 0x219E
    2934:	f0 91 9f 21 	lds	r31, 0x219F
    2938:	30 97       	sbiw	r30, 0x00	; 0
    293a:	29 f0       	breq	.+10     	; 0x2946 <__vector_51+0x3c>
    293c:	80 91 94 22 	lds	r24, 0x2294
    2940:	90 91 95 22 	lds	r25, 0x2295
    2944:	19 95       	eicall
    2946:	ff 91       	pop	r31
    2948:	ef 91       	pop	r30
    294a:	bf 91       	pop	r27
    294c:	af 91       	pop	r26
    294e:	9f 91       	pop	r25
    2950:	8f 91       	pop	r24
    2952:	7f 91       	pop	r23
    2954:	6f 91       	pop	r22
    2956:	5f 91       	pop	r21
    2958:	4f 91       	pop	r20
    295a:	3f 91       	pop	r19
    295c:	2f 91       	pop	r18
    295e:	0f 90       	pop	r0
    2960:	0b be       	out	0x3b, r0	; 59
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	0f 90       	pop	r0
    2968:	1f 90       	pop	r1
    296a:	18 95       	reti

0000296c <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    296c:	1f 92       	push	r1
    296e:	0f 92       	push	r0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	0f 92       	push	r0
    2974:	11 24       	eor	r1, r1
    2976:	0b b6       	in	r0, 0x3b	; 59
    2978:	0f 92       	push	r0
    297a:	2f 93       	push	r18
    297c:	3f 93       	push	r19
    297e:	4f 93       	push	r20
    2980:	5f 93       	push	r21
    2982:	6f 93       	push	r22
    2984:	7f 93       	push	r23
    2986:	8f 93       	push	r24
    2988:	9f 93       	push	r25
    298a:	af 93       	push	r26
    298c:	bf 93       	push	r27
    298e:	ef 93       	push	r30
    2990:	ff 93       	push	r31
    2992:	e0 91 a0 21 	lds	r30, 0x21A0
    2996:	f0 91 a1 21 	lds	r31, 0x21A1
    299a:	30 97       	sbiw	r30, 0x00	; 0
    299c:	29 f0       	breq	.+10     	; 0x29a8 <__vector_52+0x3c>
    299e:	80 91 96 22 	lds	r24, 0x2296
    29a2:	90 91 97 22 	lds	r25, 0x2297
    29a6:	19 95       	eicall
    29a8:	ff 91       	pop	r31
    29aa:	ef 91       	pop	r30
    29ac:	bf 91       	pop	r27
    29ae:	af 91       	pop	r26
    29b0:	9f 91       	pop	r25
    29b2:	8f 91       	pop	r24
    29b4:	7f 91       	pop	r23
    29b6:	6f 91       	pop	r22
    29b8:	5f 91       	pop	r21
    29ba:	4f 91       	pop	r20
    29bc:	3f 91       	pop	r19
    29be:	2f 91       	pop	r18
    29c0:	0f 90       	pop	r0
    29c2:	0b be       	out	0x3b, r0	; 59
    29c4:	0f 90       	pop	r0
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	0f 90       	pop	r0
    29ca:	1f 90       	pop	r1
    29cc:	18 95       	reti

000029ce <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    29ce:	1f 92       	push	r1
    29d0:	0f 92       	push	r0
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	0f 92       	push	r0
    29d6:	11 24       	eor	r1, r1
    29d8:	0b b6       	in	r0, 0x3b	; 59
    29da:	0f 92       	push	r0
    29dc:	2f 93       	push	r18
    29de:	3f 93       	push	r19
    29e0:	4f 93       	push	r20
    29e2:	5f 93       	push	r21
    29e4:	6f 93       	push	r22
    29e6:	7f 93       	push	r23
    29e8:	8f 93       	push	r24
    29ea:	9f 93       	push	r25
    29ec:	af 93       	push	r26
    29ee:	bf 93       	push	r27
    29f0:	ef 93       	push	r30
    29f2:	ff 93       	push	r31
    29f4:	e0 91 a2 21 	lds	r30, 0x21A2
    29f8:	f0 91 a3 21 	lds	r31, 0x21A3
    29fc:	30 97       	sbiw	r30, 0x00	; 0
    29fe:	29 f0       	breq	.+10     	; 0x2a0a <__vector_53+0x3c>
    2a00:	80 91 98 22 	lds	r24, 0x2298
    2a04:	90 91 99 22 	lds	r25, 0x2299
    2a08:	19 95       	eicall
    2a0a:	ff 91       	pop	r31
    2a0c:	ef 91       	pop	r30
    2a0e:	bf 91       	pop	r27
    2a10:	af 91       	pop	r26
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	7f 91       	pop	r23
    2a18:	6f 91       	pop	r22
    2a1a:	5f 91       	pop	r21
    2a1c:	4f 91       	pop	r20
    2a1e:	3f 91       	pop	r19
    2a20:	2f 91       	pop	r18
    2a22:	0f 90       	pop	r0
    2a24:	0b be       	out	0x3b, r0	; 59
    2a26:	0f 90       	pop	r0
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	0f 90       	pop	r0
    2a2c:	1f 90       	pop	r1
    2a2e:	18 95       	reti

00002a30 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2a30:	1f 92       	push	r1
    2a32:	0f 92       	push	r0
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	0f 92       	push	r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	0b b6       	in	r0, 0x3b	; 59
    2a3c:	0f 92       	push	r0
    2a3e:	2f 93       	push	r18
    2a40:	3f 93       	push	r19
    2a42:	4f 93       	push	r20
    2a44:	5f 93       	push	r21
    2a46:	6f 93       	push	r22
    2a48:	7f 93       	push	r23
    2a4a:	8f 93       	push	r24
    2a4c:	9f 93       	push	r25
    2a4e:	af 93       	push	r26
    2a50:	bf 93       	push	r27
    2a52:	ef 93       	push	r30
    2a54:	ff 93       	push	r31
    2a56:	e0 91 a4 21 	lds	r30, 0x21A4
    2a5a:	f0 91 a5 21 	lds	r31, 0x21A5
    2a5e:	30 97       	sbiw	r30, 0x00	; 0
    2a60:	29 f0       	breq	.+10     	; 0x2a6c <__vector_54+0x3c>
    2a62:	80 91 9a 22 	lds	r24, 0x229A
    2a66:	90 91 9b 22 	lds	r25, 0x229B
    2a6a:	19 95       	eicall
    2a6c:	ff 91       	pop	r31
    2a6e:	ef 91       	pop	r30
    2a70:	bf 91       	pop	r27
    2a72:	af 91       	pop	r26
    2a74:	9f 91       	pop	r25
    2a76:	8f 91       	pop	r24
    2a78:	7f 91       	pop	r23
    2a7a:	6f 91       	pop	r22
    2a7c:	5f 91       	pop	r21
    2a7e:	4f 91       	pop	r20
    2a80:	3f 91       	pop	r19
    2a82:	2f 91       	pop	r18
    2a84:	0f 90       	pop	r0
    2a86:	0b be       	out	0x3b, r0	; 59
    2a88:	0f 90       	pop	r0
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	0f 90       	pop	r0
    2a8e:	1f 90       	pop	r1
    2a90:	18 95       	reti

00002a92 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2a92:	1f 92       	push	r1
    2a94:	0f 92       	push	r0
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	0f 92       	push	r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	0b b6       	in	r0, 0x3b	; 59
    2a9e:	0f 92       	push	r0
    2aa0:	2f 93       	push	r18
    2aa2:	3f 93       	push	r19
    2aa4:	4f 93       	push	r20
    2aa6:	5f 93       	push	r21
    2aa8:	6f 93       	push	r22
    2aaa:	7f 93       	push	r23
    2aac:	8f 93       	push	r24
    2aae:	9f 93       	push	r25
    2ab0:	af 93       	push	r26
    2ab2:	bf 93       	push	r27
    2ab4:	ef 93       	push	r30
    2ab6:	ff 93       	push	r31
    2ab8:	e0 91 a6 21 	lds	r30, 0x21A6
    2abc:	f0 91 a7 21 	lds	r31, 0x21A7
    2ac0:	30 97       	sbiw	r30, 0x00	; 0
    2ac2:	29 f0       	breq	.+10     	; 0x2ace <__vector_55+0x3c>
    2ac4:	80 91 9c 22 	lds	r24, 0x229C
    2ac8:	90 91 9d 22 	lds	r25, 0x229D
    2acc:	19 95       	eicall
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	0f 90       	pop	r0
    2ae8:	0b be       	out	0x3b, r0	; 59
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	1f 90       	pop	r1
    2af2:	18 95       	reti

00002af4 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2af4:	1f 92       	push	r1
    2af6:	0f 92       	push	r0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	0f 92       	push	r0
    2afc:	11 24       	eor	r1, r1
    2afe:	0b b6       	in	r0, 0x3b	; 59
    2b00:	0f 92       	push	r0
    2b02:	2f 93       	push	r18
    2b04:	3f 93       	push	r19
    2b06:	4f 93       	push	r20
    2b08:	5f 93       	push	r21
    2b0a:	6f 93       	push	r22
    2b0c:	7f 93       	push	r23
    2b0e:	8f 93       	push	r24
    2b10:	9f 93       	push	r25
    2b12:	af 93       	push	r26
    2b14:	bf 93       	push	r27
    2b16:	ef 93       	push	r30
    2b18:	ff 93       	push	r31
    2b1a:	e0 91 a8 21 	lds	r30, 0x21A8
    2b1e:	f0 91 a9 21 	lds	r31, 0x21A9
    2b22:	30 97       	sbiw	r30, 0x00	; 0
    2b24:	29 f0       	breq	.+10     	; 0x2b30 <__vector_56+0x3c>
    2b26:	80 91 9e 22 	lds	r24, 0x229E
    2b2a:	90 91 9f 22 	lds	r25, 0x229F
    2b2e:	19 95       	eicall
    2b30:	ff 91       	pop	r31
    2b32:	ef 91       	pop	r30
    2b34:	bf 91       	pop	r27
    2b36:	af 91       	pop	r26
    2b38:	9f 91       	pop	r25
    2b3a:	8f 91       	pop	r24
    2b3c:	7f 91       	pop	r23
    2b3e:	6f 91       	pop	r22
    2b40:	5f 91       	pop	r21
    2b42:	4f 91       	pop	r20
    2b44:	3f 91       	pop	r19
    2b46:	2f 91       	pop	r18
    2b48:	0f 90       	pop	r0
    2b4a:	0b be       	out	0x3b, r0	; 59
    2b4c:	0f 90       	pop	r0
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	0f 90       	pop	r0
    2b52:	1f 90       	pop	r1
    2b54:	18 95       	reti

00002b56 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2b56:	1f 92       	push	r1
    2b58:	0f 92       	push	r0
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	0f 92       	push	r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	0b b6       	in	r0, 0x3b	; 59
    2b62:	0f 92       	push	r0
    2b64:	2f 93       	push	r18
    2b66:	3f 93       	push	r19
    2b68:	4f 93       	push	r20
    2b6a:	5f 93       	push	r21
    2b6c:	6f 93       	push	r22
    2b6e:	7f 93       	push	r23
    2b70:	8f 93       	push	r24
    2b72:	9f 93       	push	r25
    2b74:	af 93       	push	r26
    2b76:	bf 93       	push	r27
    2b78:	ef 93       	push	r30
    2b7a:	ff 93       	push	r31
    2b7c:	e0 91 aa 21 	lds	r30, 0x21AA
    2b80:	f0 91 ab 21 	lds	r31, 0x21AB
    2b84:	30 97       	sbiw	r30, 0x00	; 0
    2b86:	29 f0       	breq	.+10     	; 0x2b92 <__vector_57+0x3c>
    2b88:	80 91 a0 22 	lds	r24, 0x22A0
    2b8c:	90 91 a1 22 	lds	r25, 0x22A1
    2b90:	19 95       	eicall
    2b92:	ff 91       	pop	r31
    2b94:	ef 91       	pop	r30
    2b96:	bf 91       	pop	r27
    2b98:	af 91       	pop	r26
    2b9a:	9f 91       	pop	r25
    2b9c:	8f 91       	pop	r24
    2b9e:	7f 91       	pop	r23
    2ba0:	6f 91       	pop	r22
    2ba2:	5f 91       	pop	r21
    2ba4:	4f 91       	pop	r20
    2ba6:	3f 91       	pop	r19
    2ba8:	2f 91       	pop	r18
    2baa:	0f 90       	pop	r0
    2bac:	0b be       	out	0x3b, r0	; 59
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	0f 90       	pop	r0
    2bb4:	1f 90       	pop	r1
    2bb6:	18 95       	reti

00002bb8 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2bb8:	1f 92       	push	r1
    2bba:	0f 92       	push	r0
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	0f 92       	push	r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	0b b6       	in	r0, 0x3b	; 59
    2bc4:	0f 92       	push	r0
    2bc6:	2f 93       	push	r18
    2bc8:	3f 93       	push	r19
    2bca:	4f 93       	push	r20
    2bcc:	5f 93       	push	r21
    2bce:	6f 93       	push	r22
    2bd0:	7f 93       	push	r23
    2bd2:	8f 93       	push	r24
    2bd4:	9f 93       	push	r25
    2bd6:	af 93       	push	r26
    2bd8:	bf 93       	push	r27
    2bda:	ef 93       	push	r30
    2bdc:	ff 93       	push	r31
    2bde:	e0 91 ac 21 	lds	r30, 0x21AC
    2be2:	f0 91 ad 21 	lds	r31, 0x21AD
    2be6:	30 97       	sbiw	r30, 0x00	; 0
    2be8:	29 f0       	breq	.+10     	; 0x2bf4 <__vector_58+0x3c>
    2bea:	80 91 a2 22 	lds	r24, 0x22A2
    2bee:	90 91 a3 22 	lds	r25, 0x22A3
    2bf2:	19 95       	eicall
    2bf4:	ff 91       	pop	r31
    2bf6:	ef 91       	pop	r30
    2bf8:	bf 91       	pop	r27
    2bfa:	af 91       	pop	r26
    2bfc:	9f 91       	pop	r25
    2bfe:	8f 91       	pop	r24
    2c00:	7f 91       	pop	r23
    2c02:	6f 91       	pop	r22
    2c04:	5f 91       	pop	r21
    2c06:	4f 91       	pop	r20
    2c08:	3f 91       	pop	r19
    2c0a:	2f 91       	pop	r18
    2c0c:	0f 90       	pop	r0
    2c0e:	0b be       	out	0x3b, r0	; 59
    2c10:	0f 90       	pop	r0
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	0f 90       	pop	r0
    2c16:	1f 90       	pop	r1
    2c18:	18 95       	reti

00002c1a <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2c1a:	1f 92       	push	r1
    2c1c:	0f 92       	push	r0
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	0f 92       	push	r0
    2c22:	11 24       	eor	r1, r1
    2c24:	0b b6       	in	r0, 0x3b	; 59
    2c26:	0f 92       	push	r0
    2c28:	2f 93       	push	r18
    2c2a:	3f 93       	push	r19
    2c2c:	4f 93       	push	r20
    2c2e:	5f 93       	push	r21
    2c30:	6f 93       	push	r22
    2c32:	7f 93       	push	r23
    2c34:	8f 93       	push	r24
    2c36:	9f 93       	push	r25
    2c38:	af 93       	push	r26
    2c3a:	bf 93       	push	r27
    2c3c:	ef 93       	push	r30
    2c3e:	ff 93       	push	r31
    2c40:	e0 91 ae 21 	lds	r30, 0x21AE
    2c44:	f0 91 af 21 	lds	r31, 0x21AF
    2c48:	30 97       	sbiw	r30, 0x00	; 0
    2c4a:	29 f0       	breq	.+10     	; 0x2c56 <__vector_59+0x3c>
    2c4c:	80 91 a4 22 	lds	r24, 0x22A4
    2c50:	90 91 a5 22 	lds	r25, 0x22A5
    2c54:	19 95       	eicall
    2c56:	ff 91       	pop	r31
    2c58:	ef 91       	pop	r30
    2c5a:	bf 91       	pop	r27
    2c5c:	af 91       	pop	r26
    2c5e:	9f 91       	pop	r25
    2c60:	8f 91       	pop	r24
    2c62:	7f 91       	pop	r23
    2c64:	6f 91       	pop	r22
    2c66:	5f 91       	pop	r21
    2c68:	4f 91       	pop	r20
    2c6a:	3f 91       	pop	r19
    2c6c:	2f 91       	pop	r18
    2c6e:	0f 90       	pop	r0
    2c70:	0b be       	out	0x3b, r0	; 59
    2c72:	0f 90       	pop	r0
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	0f 90       	pop	r0
    2c78:	1f 90       	pop	r1
    2c7a:	18 95       	reti

00002c7c <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2c7c:	1f 92       	push	r1
    2c7e:	0f 92       	push	r0
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	0f 92       	push	r0
    2c84:	11 24       	eor	r1, r1
    2c86:	0b b6       	in	r0, 0x3b	; 59
    2c88:	0f 92       	push	r0
    2c8a:	2f 93       	push	r18
    2c8c:	3f 93       	push	r19
    2c8e:	4f 93       	push	r20
    2c90:	5f 93       	push	r21
    2c92:	6f 93       	push	r22
    2c94:	7f 93       	push	r23
    2c96:	8f 93       	push	r24
    2c98:	9f 93       	push	r25
    2c9a:	af 93       	push	r26
    2c9c:	bf 93       	push	r27
    2c9e:	ef 93       	push	r30
    2ca0:	ff 93       	push	r31
    2ca2:	e0 91 b0 21 	lds	r30, 0x21B0
    2ca6:	f0 91 b1 21 	lds	r31, 0x21B1
    2caa:	30 97       	sbiw	r30, 0x00	; 0
    2cac:	29 f0       	breq	.+10     	; 0x2cb8 <__vector_60+0x3c>
    2cae:	80 91 a6 22 	lds	r24, 0x22A6
    2cb2:	90 91 a7 22 	lds	r25, 0x22A7
    2cb6:	19 95       	eicall
    2cb8:	ff 91       	pop	r31
    2cba:	ef 91       	pop	r30
    2cbc:	bf 91       	pop	r27
    2cbe:	af 91       	pop	r26
    2cc0:	9f 91       	pop	r25
    2cc2:	8f 91       	pop	r24
    2cc4:	7f 91       	pop	r23
    2cc6:	6f 91       	pop	r22
    2cc8:	5f 91       	pop	r21
    2cca:	4f 91       	pop	r20
    2ccc:	3f 91       	pop	r19
    2cce:	2f 91       	pop	r18
    2cd0:	0f 90       	pop	r0
    2cd2:	0b be       	out	0x3b, r0	; 59
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	0f 90       	pop	r0
    2cda:	1f 90       	pop	r1
    2cdc:	18 95       	reti

00002cde <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    2cde:	1f 92       	push	r1
    2ce0:	0f 92       	push	r0
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	0f 92       	push	r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	0b b6       	in	r0, 0x3b	; 59
    2cea:	0f 92       	push	r0
    2cec:	2f 93       	push	r18
    2cee:	3f 93       	push	r19
    2cf0:	4f 93       	push	r20
    2cf2:	5f 93       	push	r21
    2cf4:	6f 93       	push	r22
    2cf6:	7f 93       	push	r23
    2cf8:	8f 93       	push	r24
    2cfa:	9f 93       	push	r25
    2cfc:	af 93       	push	r26
    2cfe:	bf 93       	push	r27
    2d00:	ef 93       	push	r30
    2d02:	ff 93       	push	r31
    2d04:	e0 91 b2 21 	lds	r30, 0x21B2
    2d08:	f0 91 b3 21 	lds	r31, 0x21B3
    2d0c:	30 97       	sbiw	r30, 0x00	; 0
    2d0e:	29 f0       	breq	.+10     	; 0x2d1a <__vector_61+0x3c>
    2d10:	80 91 a8 22 	lds	r24, 0x22A8
    2d14:	90 91 a9 22 	lds	r25, 0x22A9
    2d18:	19 95       	eicall
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	7f 91       	pop	r23
    2d28:	6f 91       	pop	r22
    2d2a:	5f 91       	pop	r21
    2d2c:	4f 91       	pop	r20
    2d2e:	3f 91       	pop	r19
    2d30:	2f 91       	pop	r18
    2d32:	0f 90       	pop	r0
    2d34:	0b be       	out	0x3b, r0	; 59
    2d36:	0f 90       	pop	r0
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	0f 90       	pop	r0
    2d3c:	1f 90       	pop	r1
    2d3e:	18 95       	reti

00002d40 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2d40:	1f 92       	push	r1
    2d42:	0f 92       	push	r0
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	0f 92       	push	r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	0b b6       	in	r0, 0x3b	; 59
    2d4c:	0f 92       	push	r0
    2d4e:	2f 93       	push	r18
    2d50:	3f 93       	push	r19
    2d52:	4f 93       	push	r20
    2d54:	5f 93       	push	r21
    2d56:	6f 93       	push	r22
    2d58:	7f 93       	push	r23
    2d5a:	8f 93       	push	r24
    2d5c:	9f 93       	push	r25
    2d5e:	af 93       	push	r26
    2d60:	bf 93       	push	r27
    2d62:	ef 93       	push	r30
    2d64:	ff 93       	push	r31
    2d66:	e0 91 b4 21 	lds	r30, 0x21B4
    2d6a:	f0 91 b5 21 	lds	r31, 0x21B5
    2d6e:	30 97       	sbiw	r30, 0x00	; 0
    2d70:	29 f0       	breq	.+10     	; 0x2d7c <__vector_62+0x3c>
    2d72:	80 91 aa 22 	lds	r24, 0x22AA
    2d76:	90 91 ab 22 	lds	r25, 0x22AB
    2d7a:	19 95       	eicall
    2d7c:	ff 91       	pop	r31
    2d7e:	ef 91       	pop	r30
    2d80:	bf 91       	pop	r27
    2d82:	af 91       	pop	r26
    2d84:	9f 91       	pop	r25
    2d86:	8f 91       	pop	r24
    2d88:	7f 91       	pop	r23
    2d8a:	6f 91       	pop	r22
    2d8c:	5f 91       	pop	r21
    2d8e:	4f 91       	pop	r20
    2d90:	3f 91       	pop	r19
    2d92:	2f 91       	pop	r18
    2d94:	0f 90       	pop	r0
    2d96:	0b be       	out	0x3b, r0	; 59
    2d98:	0f 90       	pop	r0
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	0f 90       	pop	r0
    2d9e:	1f 90       	pop	r1
    2da0:	18 95       	reti

00002da2 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    2da2:	1f 92       	push	r1
    2da4:	0f 92       	push	r0
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	0f 92       	push	r0
    2daa:	11 24       	eor	r1, r1
    2dac:	0b b6       	in	r0, 0x3b	; 59
    2dae:	0f 92       	push	r0
    2db0:	2f 93       	push	r18
    2db2:	3f 93       	push	r19
    2db4:	4f 93       	push	r20
    2db6:	5f 93       	push	r21
    2db8:	6f 93       	push	r22
    2dba:	7f 93       	push	r23
    2dbc:	8f 93       	push	r24
    2dbe:	9f 93       	push	r25
    2dc0:	af 93       	push	r26
    2dc2:	bf 93       	push	r27
    2dc4:	ef 93       	push	r30
    2dc6:	ff 93       	push	r31
    2dc8:	e0 91 b6 21 	lds	r30, 0x21B6
    2dcc:	f0 91 b7 21 	lds	r31, 0x21B7
    2dd0:	30 97       	sbiw	r30, 0x00	; 0
    2dd2:	29 f0       	breq	.+10     	; 0x2dde <__vector_63+0x3c>
    2dd4:	80 91 ac 22 	lds	r24, 0x22AC
    2dd8:	90 91 ad 22 	lds	r25, 0x22AD
    2ddc:	19 95       	eicall
    2dde:	ff 91       	pop	r31
    2de0:	ef 91       	pop	r30
    2de2:	bf 91       	pop	r27
    2de4:	af 91       	pop	r26
    2de6:	9f 91       	pop	r25
    2de8:	8f 91       	pop	r24
    2dea:	7f 91       	pop	r23
    2dec:	6f 91       	pop	r22
    2dee:	5f 91       	pop	r21
    2df0:	4f 91       	pop	r20
    2df2:	3f 91       	pop	r19
    2df4:	2f 91       	pop	r18
    2df6:	0f 90       	pop	r0
    2df8:	0b be       	out	0x3b, r0	; 59
    2dfa:	0f 90       	pop	r0
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	0f 90       	pop	r0
    2e00:	1f 90       	pop	r1
    2e02:	18 95       	reti

00002e04 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    2e04:	1f 92       	push	r1
    2e06:	0f 92       	push	r0
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	0f 92       	push	r0
    2e0c:	11 24       	eor	r1, r1
    2e0e:	0b b6       	in	r0, 0x3b	; 59
    2e10:	0f 92       	push	r0
    2e12:	2f 93       	push	r18
    2e14:	3f 93       	push	r19
    2e16:	4f 93       	push	r20
    2e18:	5f 93       	push	r21
    2e1a:	6f 93       	push	r22
    2e1c:	7f 93       	push	r23
    2e1e:	8f 93       	push	r24
    2e20:	9f 93       	push	r25
    2e22:	af 93       	push	r26
    2e24:	bf 93       	push	r27
    2e26:	ef 93       	push	r30
    2e28:	ff 93       	push	r31
    2e2a:	e0 91 b8 21 	lds	r30, 0x21B8
    2e2e:	f0 91 b9 21 	lds	r31, 0x21B9
    2e32:	30 97       	sbiw	r30, 0x00	; 0
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <__vector_64+0x3c>
    2e36:	80 91 ae 22 	lds	r24, 0x22AE
    2e3a:	90 91 af 22 	lds	r25, 0x22AF
    2e3e:	19 95       	eicall
    2e40:	ff 91       	pop	r31
    2e42:	ef 91       	pop	r30
    2e44:	bf 91       	pop	r27
    2e46:	af 91       	pop	r26
    2e48:	9f 91       	pop	r25
    2e4a:	8f 91       	pop	r24
    2e4c:	7f 91       	pop	r23
    2e4e:	6f 91       	pop	r22
    2e50:	5f 91       	pop	r21
    2e52:	4f 91       	pop	r20
    2e54:	3f 91       	pop	r19
    2e56:	2f 91       	pop	r18
    2e58:	0f 90       	pop	r0
    2e5a:	0b be       	out	0x3b, r0	; 59
    2e5c:	0f 90       	pop	r0
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	0f 90       	pop	r0
    2e62:	1f 90       	pop	r1
    2e64:	18 95       	reti

00002e66 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    2e66:	1f 92       	push	r1
    2e68:	0f 92       	push	r0
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	0f 92       	push	r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	0b b6       	in	r0, 0x3b	; 59
    2e72:	0f 92       	push	r0
    2e74:	2f 93       	push	r18
    2e76:	3f 93       	push	r19
    2e78:	4f 93       	push	r20
    2e7a:	5f 93       	push	r21
    2e7c:	6f 93       	push	r22
    2e7e:	7f 93       	push	r23
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25
    2e84:	af 93       	push	r26
    2e86:	bf 93       	push	r27
    2e88:	ef 93       	push	r30
    2e8a:	ff 93       	push	r31
    2e8c:	e0 91 ba 21 	lds	r30, 0x21BA
    2e90:	f0 91 bb 21 	lds	r31, 0x21BB
    2e94:	30 97       	sbiw	r30, 0x00	; 0
    2e96:	29 f0       	breq	.+10     	; 0x2ea2 <__vector_65+0x3c>
    2e98:	80 91 b0 22 	lds	r24, 0x22B0
    2e9c:	90 91 b1 22 	lds	r25, 0x22B1
    2ea0:	19 95       	eicall
    2ea2:	ff 91       	pop	r31
    2ea4:	ef 91       	pop	r30
    2ea6:	bf 91       	pop	r27
    2ea8:	af 91       	pop	r26
    2eaa:	9f 91       	pop	r25
    2eac:	8f 91       	pop	r24
    2eae:	7f 91       	pop	r23
    2eb0:	6f 91       	pop	r22
    2eb2:	5f 91       	pop	r21
    2eb4:	4f 91       	pop	r20
    2eb6:	3f 91       	pop	r19
    2eb8:	2f 91       	pop	r18
    2eba:	0f 90       	pop	r0
    2ebc:	0b be       	out	0x3b, r0	; 59
    2ebe:	0f 90       	pop	r0
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	0f 90       	pop	r0
    2ec4:	1f 90       	pop	r1
    2ec6:	18 95       	reti

00002ec8 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    2ec8:	1f 92       	push	r1
    2eca:	0f 92       	push	r0
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	0f 92       	push	r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	0b b6       	in	r0, 0x3b	; 59
    2ed4:	0f 92       	push	r0
    2ed6:	2f 93       	push	r18
    2ed8:	3f 93       	push	r19
    2eda:	4f 93       	push	r20
    2edc:	5f 93       	push	r21
    2ede:	6f 93       	push	r22
    2ee0:	7f 93       	push	r23
    2ee2:	8f 93       	push	r24
    2ee4:	9f 93       	push	r25
    2ee6:	af 93       	push	r26
    2ee8:	bf 93       	push	r27
    2eea:	ef 93       	push	r30
    2eec:	ff 93       	push	r31
    2eee:	e0 91 bc 21 	lds	r30, 0x21BC
    2ef2:	f0 91 bd 21 	lds	r31, 0x21BD
    2ef6:	30 97       	sbiw	r30, 0x00	; 0
    2ef8:	29 f0       	breq	.+10     	; 0x2f04 <__vector_66+0x3c>
    2efa:	80 91 b2 22 	lds	r24, 0x22B2
    2efe:	90 91 b3 22 	lds	r25, 0x22B3
    2f02:	19 95       	eicall
    2f04:	ff 91       	pop	r31
    2f06:	ef 91       	pop	r30
    2f08:	bf 91       	pop	r27
    2f0a:	af 91       	pop	r26
    2f0c:	9f 91       	pop	r25
    2f0e:	8f 91       	pop	r24
    2f10:	7f 91       	pop	r23
    2f12:	6f 91       	pop	r22
    2f14:	5f 91       	pop	r21
    2f16:	4f 91       	pop	r20
    2f18:	3f 91       	pop	r19
    2f1a:	2f 91       	pop	r18
    2f1c:	0f 90       	pop	r0
    2f1e:	0b be       	out	0x3b, r0	; 59
    2f20:	0f 90       	pop	r0
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	0f 90       	pop	r0
    2f26:	1f 90       	pop	r1
    2f28:	18 95       	reti

00002f2a <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    2f2a:	1f 92       	push	r1
    2f2c:	0f 92       	push	r0
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	0f 92       	push	r0
    2f32:	11 24       	eor	r1, r1
    2f34:	0b b6       	in	r0, 0x3b	; 59
    2f36:	0f 92       	push	r0
    2f38:	2f 93       	push	r18
    2f3a:	3f 93       	push	r19
    2f3c:	4f 93       	push	r20
    2f3e:	5f 93       	push	r21
    2f40:	6f 93       	push	r22
    2f42:	7f 93       	push	r23
    2f44:	8f 93       	push	r24
    2f46:	9f 93       	push	r25
    2f48:	af 93       	push	r26
    2f4a:	bf 93       	push	r27
    2f4c:	ef 93       	push	r30
    2f4e:	ff 93       	push	r31
    2f50:	e0 91 be 21 	lds	r30, 0x21BE
    2f54:	f0 91 bf 21 	lds	r31, 0x21BF
    2f58:	30 97       	sbiw	r30, 0x00	; 0
    2f5a:	29 f0       	breq	.+10     	; 0x2f66 <__vector_67+0x3c>
    2f5c:	80 91 b4 22 	lds	r24, 0x22B4
    2f60:	90 91 b5 22 	lds	r25, 0x22B5
    2f64:	19 95       	eicall
    2f66:	ff 91       	pop	r31
    2f68:	ef 91       	pop	r30
    2f6a:	bf 91       	pop	r27
    2f6c:	af 91       	pop	r26
    2f6e:	9f 91       	pop	r25
    2f70:	8f 91       	pop	r24
    2f72:	7f 91       	pop	r23
    2f74:	6f 91       	pop	r22
    2f76:	5f 91       	pop	r21
    2f78:	4f 91       	pop	r20
    2f7a:	3f 91       	pop	r19
    2f7c:	2f 91       	pop	r18
    2f7e:	0f 90       	pop	r0
    2f80:	0b be       	out	0x3b, r0	; 59
    2f82:	0f 90       	pop	r0
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	0f 90       	pop	r0
    2f88:	1f 90       	pop	r1
    2f8a:	18 95       	reti

00002f8c <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    2f8c:	1f 92       	push	r1
    2f8e:	0f 92       	push	r0
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	0f 92       	push	r0
    2f94:	11 24       	eor	r1, r1
    2f96:	0b b6       	in	r0, 0x3b	; 59
    2f98:	0f 92       	push	r0
    2f9a:	2f 93       	push	r18
    2f9c:	3f 93       	push	r19
    2f9e:	4f 93       	push	r20
    2fa0:	5f 93       	push	r21
    2fa2:	6f 93       	push	r22
    2fa4:	7f 93       	push	r23
    2fa6:	8f 93       	push	r24
    2fa8:	9f 93       	push	r25
    2faa:	af 93       	push	r26
    2fac:	bf 93       	push	r27
    2fae:	ef 93       	push	r30
    2fb0:	ff 93       	push	r31
    2fb2:	e0 91 c0 21 	lds	r30, 0x21C0
    2fb6:	f0 91 c1 21 	lds	r31, 0x21C1
    2fba:	30 97       	sbiw	r30, 0x00	; 0
    2fbc:	29 f0       	breq	.+10     	; 0x2fc8 <__vector_68+0x3c>
    2fbe:	80 91 b6 22 	lds	r24, 0x22B6
    2fc2:	90 91 b7 22 	lds	r25, 0x22B7
    2fc6:	19 95       	eicall
    2fc8:	ff 91       	pop	r31
    2fca:	ef 91       	pop	r30
    2fcc:	bf 91       	pop	r27
    2fce:	af 91       	pop	r26
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	7f 91       	pop	r23
    2fd6:	6f 91       	pop	r22
    2fd8:	5f 91       	pop	r21
    2fda:	4f 91       	pop	r20
    2fdc:	3f 91       	pop	r19
    2fde:	2f 91       	pop	r18
    2fe0:	0f 90       	pop	r0
    2fe2:	0b be       	out	0x3b, r0	; 59
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	0b b6       	in	r0, 0x3b	; 59
    2ffa:	0f 92       	push	r0
    2ffc:	2f 93       	push	r18
    2ffe:	3f 93       	push	r19
    3000:	4f 93       	push	r20
    3002:	5f 93       	push	r21
    3004:	6f 93       	push	r22
    3006:	7f 93       	push	r23
    3008:	8f 93       	push	r24
    300a:	9f 93       	push	r25
    300c:	af 93       	push	r26
    300e:	bf 93       	push	r27
    3010:	ef 93       	push	r30
    3012:	ff 93       	push	r31
    3014:	e0 91 c2 21 	lds	r30, 0x21C2
    3018:	f0 91 c3 21 	lds	r31, 0x21C3
    301c:	30 97       	sbiw	r30, 0x00	; 0
    301e:	29 f0       	breq	.+10     	; 0x302a <__vector_69+0x3c>
    3020:	80 91 b8 22 	lds	r24, 0x22B8
    3024:	90 91 b9 22 	lds	r25, 0x22B9
    3028:	19 95       	eicall
    302a:	ff 91       	pop	r31
    302c:	ef 91       	pop	r30
    302e:	bf 91       	pop	r27
    3030:	af 91       	pop	r26
    3032:	9f 91       	pop	r25
    3034:	8f 91       	pop	r24
    3036:	7f 91       	pop	r23
    3038:	6f 91       	pop	r22
    303a:	5f 91       	pop	r21
    303c:	4f 91       	pop	r20
    303e:	3f 91       	pop	r19
    3040:	2f 91       	pop	r18
    3042:	0f 90       	pop	r0
    3044:	0b be       	out	0x3b, r0	; 59
    3046:	0f 90       	pop	r0
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	0f 90       	pop	r0
    304c:	1f 90       	pop	r1
    304e:	18 95       	reti

00003050 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3050:	1f 92       	push	r1
    3052:	0f 92       	push	r0
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	0f 92       	push	r0
    3058:	11 24       	eor	r1, r1
    305a:	0b b6       	in	r0, 0x3b	; 59
    305c:	0f 92       	push	r0
    305e:	2f 93       	push	r18
    3060:	3f 93       	push	r19
    3062:	4f 93       	push	r20
    3064:	5f 93       	push	r21
    3066:	6f 93       	push	r22
    3068:	7f 93       	push	r23
    306a:	8f 93       	push	r24
    306c:	9f 93       	push	r25
    306e:	af 93       	push	r26
    3070:	bf 93       	push	r27
    3072:	ef 93       	push	r30
    3074:	ff 93       	push	r31
    3076:	e0 91 c4 21 	lds	r30, 0x21C4
    307a:	f0 91 c5 21 	lds	r31, 0x21C5
    307e:	30 97       	sbiw	r30, 0x00	; 0
    3080:	29 f0       	breq	.+10     	; 0x308c <__vector_70+0x3c>
    3082:	80 91 ba 22 	lds	r24, 0x22BA
    3086:	90 91 bb 22 	lds	r25, 0x22BB
    308a:	19 95       	eicall
    308c:	ff 91       	pop	r31
    308e:	ef 91       	pop	r30
    3090:	bf 91       	pop	r27
    3092:	af 91       	pop	r26
    3094:	9f 91       	pop	r25
    3096:	8f 91       	pop	r24
    3098:	7f 91       	pop	r23
    309a:	6f 91       	pop	r22
    309c:	5f 91       	pop	r21
    309e:	4f 91       	pop	r20
    30a0:	3f 91       	pop	r19
    30a2:	2f 91       	pop	r18
    30a4:	0f 90       	pop	r0
    30a6:	0b be       	out	0x3b, r0	; 59
    30a8:	0f 90       	pop	r0
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	0f 90       	pop	r0
    30ae:	1f 90       	pop	r1
    30b0:	18 95       	reti

000030b2 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    30b2:	1f 92       	push	r1
    30b4:	0f 92       	push	r0
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	0f 92       	push	r0
    30ba:	11 24       	eor	r1, r1
    30bc:	0b b6       	in	r0, 0x3b	; 59
    30be:	0f 92       	push	r0
    30c0:	2f 93       	push	r18
    30c2:	3f 93       	push	r19
    30c4:	4f 93       	push	r20
    30c6:	5f 93       	push	r21
    30c8:	6f 93       	push	r22
    30ca:	7f 93       	push	r23
    30cc:	8f 93       	push	r24
    30ce:	9f 93       	push	r25
    30d0:	af 93       	push	r26
    30d2:	bf 93       	push	r27
    30d4:	ef 93       	push	r30
    30d6:	ff 93       	push	r31
    30d8:	e0 91 c6 21 	lds	r30, 0x21C6
    30dc:	f0 91 c7 21 	lds	r31, 0x21C7
    30e0:	30 97       	sbiw	r30, 0x00	; 0
    30e2:	29 f0       	breq	.+10     	; 0x30ee <__vector_71+0x3c>
    30e4:	80 91 bc 22 	lds	r24, 0x22BC
    30e8:	90 91 bd 22 	lds	r25, 0x22BD
    30ec:	19 95       	eicall
    30ee:	ff 91       	pop	r31
    30f0:	ef 91       	pop	r30
    30f2:	bf 91       	pop	r27
    30f4:	af 91       	pop	r26
    30f6:	9f 91       	pop	r25
    30f8:	8f 91       	pop	r24
    30fa:	7f 91       	pop	r23
    30fc:	6f 91       	pop	r22
    30fe:	5f 91       	pop	r21
    3100:	4f 91       	pop	r20
    3102:	3f 91       	pop	r19
    3104:	2f 91       	pop	r18
    3106:	0f 90       	pop	r0
    3108:	0b be       	out	0x3b, r0	; 59
    310a:	0f 90       	pop	r0
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	0f 90       	pop	r0
    3110:	1f 90       	pop	r1
    3112:	18 95       	reti

00003114 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3114:	1f 92       	push	r1
    3116:	0f 92       	push	r0
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	0f 92       	push	r0
    311c:	11 24       	eor	r1, r1
    311e:	0b b6       	in	r0, 0x3b	; 59
    3120:	0f 92       	push	r0
    3122:	2f 93       	push	r18
    3124:	3f 93       	push	r19
    3126:	4f 93       	push	r20
    3128:	5f 93       	push	r21
    312a:	6f 93       	push	r22
    312c:	7f 93       	push	r23
    312e:	8f 93       	push	r24
    3130:	9f 93       	push	r25
    3132:	af 93       	push	r26
    3134:	bf 93       	push	r27
    3136:	ef 93       	push	r30
    3138:	ff 93       	push	r31
    313a:	e0 91 c8 21 	lds	r30, 0x21C8
    313e:	f0 91 c9 21 	lds	r31, 0x21C9
    3142:	30 97       	sbiw	r30, 0x00	; 0
    3144:	29 f0       	breq	.+10     	; 0x3150 <__vector_72+0x3c>
    3146:	80 91 be 22 	lds	r24, 0x22BE
    314a:	90 91 bf 22 	lds	r25, 0x22BF
    314e:	19 95       	eicall
    3150:	ff 91       	pop	r31
    3152:	ef 91       	pop	r30
    3154:	bf 91       	pop	r27
    3156:	af 91       	pop	r26
    3158:	9f 91       	pop	r25
    315a:	8f 91       	pop	r24
    315c:	7f 91       	pop	r23
    315e:	6f 91       	pop	r22
    3160:	5f 91       	pop	r21
    3162:	4f 91       	pop	r20
    3164:	3f 91       	pop	r19
    3166:	2f 91       	pop	r18
    3168:	0f 90       	pop	r0
    316a:	0b be       	out	0x3b, r0	; 59
    316c:	0f 90       	pop	r0
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	0f 90       	pop	r0
    3172:	1f 90       	pop	r1
    3174:	18 95       	reti

00003176 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3176:	1f 92       	push	r1
    3178:	0f 92       	push	r0
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	0f 92       	push	r0
    317e:	11 24       	eor	r1, r1
    3180:	0b b6       	in	r0, 0x3b	; 59
    3182:	0f 92       	push	r0
    3184:	2f 93       	push	r18
    3186:	3f 93       	push	r19
    3188:	4f 93       	push	r20
    318a:	5f 93       	push	r21
    318c:	6f 93       	push	r22
    318e:	7f 93       	push	r23
    3190:	8f 93       	push	r24
    3192:	9f 93       	push	r25
    3194:	af 93       	push	r26
    3196:	bf 93       	push	r27
    3198:	ef 93       	push	r30
    319a:	ff 93       	push	r31
    319c:	e0 91 ca 21 	lds	r30, 0x21CA
    31a0:	f0 91 cb 21 	lds	r31, 0x21CB
    31a4:	30 97       	sbiw	r30, 0x00	; 0
    31a6:	29 f0       	breq	.+10     	; 0x31b2 <__vector_73+0x3c>
    31a8:	80 91 c0 22 	lds	r24, 0x22C0
    31ac:	90 91 c1 22 	lds	r25, 0x22C1
    31b0:	19 95       	eicall
    31b2:	ff 91       	pop	r31
    31b4:	ef 91       	pop	r30
    31b6:	bf 91       	pop	r27
    31b8:	af 91       	pop	r26
    31ba:	9f 91       	pop	r25
    31bc:	8f 91       	pop	r24
    31be:	7f 91       	pop	r23
    31c0:	6f 91       	pop	r22
    31c2:	5f 91       	pop	r21
    31c4:	4f 91       	pop	r20
    31c6:	3f 91       	pop	r19
    31c8:	2f 91       	pop	r18
    31ca:	0f 90       	pop	r0
    31cc:	0b be       	out	0x3b, r0	; 59
    31ce:	0f 90       	pop	r0
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	0f 90       	pop	r0
    31d4:	1f 90       	pop	r1
    31d6:	18 95       	reti

000031d8 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    31d8:	1f 92       	push	r1
    31da:	0f 92       	push	r0
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	0f 92       	push	r0
    31e0:	11 24       	eor	r1, r1
    31e2:	0b b6       	in	r0, 0x3b	; 59
    31e4:	0f 92       	push	r0
    31e6:	2f 93       	push	r18
    31e8:	3f 93       	push	r19
    31ea:	4f 93       	push	r20
    31ec:	5f 93       	push	r21
    31ee:	6f 93       	push	r22
    31f0:	7f 93       	push	r23
    31f2:	8f 93       	push	r24
    31f4:	9f 93       	push	r25
    31f6:	af 93       	push	r26
    31f8:	bf 93       	push	r27
    31fa:	ef 93       	push	r30
    31fc:	ff 93       	push	r31
    31fe:	e0 91 cc 21 	lds	r30, 0x21CC
    3202:	f0 91 cd 21 	lds	r31, 0x21CD
    3206:	30 97       	sbiw	r30, 0x00	; 0
    3208:	29 f0       	breq	.+10     	; 0x3214 <__vector_74+0x3c>
    320a:	80 91 c2 22 	lds	r24, 0x22C2
    320e:	90 91 c3 22 	lds	r25, 0x22C3
    3212:	19 95       	eicall
    3214:	ff 91       	pop	r31
    3216:	ef 91       	pop	r30
    3218:	bf 91       	pop	r27
    321a:	af 91       	pop	r26
    321c:	9f 91       	pop	r25
    321e:	8f 91       	pop	r24
    3220:	7f 91       	pop	r23
    3222:	6f 91       	pop	r22
    3224:	5f 91       	pop	r21
    3226:	4f 91       	pop	r20
    3228:	3f 91       	pop	r19
    322a:	2f 91       	pop	r18
    322c:	0f 90       	pop	r0
    322e:	0b be       	out	0x3b, r0	; 59
    3230:	0f 90       	pop	r0
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	0f 90       	pop	r0
    3236:	1f 90       	pop	r1
    3238:	18 95       	reti

0000323a <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    323a:	1f 92       	push	r1
    323c:	0f 92       	push	r0
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	0f 92       	push	r0
    3242:	11 24       	eor	r1, r1
    3244:	0b b6       	in	r0, 0x3b	; 59
    3246:	0f 92       	push	r0
    3248:	2f 93       	push	r18
    324a:	3f 93       	push	r19
    324c:	4f 93       	push	r20
    324e:	5f 93       	push	r21
    3250:	6f 93       	push	r22
    3252:	7f 93       	push	r23
    3254:	8f 93       	push	r24
    3256:	9f 93       	push	r25
    3258:	af 93       	push	r26
    325a:	bf 93       	push	r27
    325c:	ef 93       	push	r30
    325e:	ff 93       	push	r31
    3260:	e0 91 d2 21 	lds	r30, 0x21D2
    3264:	f0 91 d3 21 	lds	r31, 0x21D3
    3268:	30 97       	sbiw	r30, 0x00	; 0
    326a:	29 f0       	breq	.+10     	; 0x3276 <__vector_77+0x3c>
    326c:	80 91 c8 22 	lds	r24, 0x22C8
    3270:	90 91 c9 22 	lds	r25, 0x22C9
    3274:	19 95       	eicall
    3276:	ff 91       	pop	r31
    3278:	ef 91       	pop	r30
    327a:	bf 91       	pop	r27
    327c:	af 91       	pop	r26
    327e:	9f 91       	pop	r25
    3280:	8f 91       	pop	r24
    3282:	7f 91       	pop	r23
    3284:	6f 91       	pop	r22
    3286:	5f 91       	pop	r21
    3288:	4f 91       	pop	r20
    328a:	3f 91       	pop	r19
    328c:	2f 91       	pop	r18
    328e:	0f 90       	pop	r0
    3290:	0b be       	out	0x3b, r0	; 59
    3292:	0f 90       	pop	r0
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	0f 90       	pop	r0
    3298:	1f 90       	pop	r1
    329a:	18 95       	reti

0000329c <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    329c:	1f 92       	push	r1
    329e:	0f 92       	push	r0
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	0f 92       	push	r0
    32a4:	11 24       	eor	r1, r1
    32a6:	0b b6       	in	r0, 0x3b	; 59
    32a8:	0f 92       	push	r0
    32aa:	2f 93       	push	r18
    32ac:	3f 93       	push	r19
    32ae:	4f 93       	push	r20
    32b0:	5f 93       	push	r21
    32b2:	6f 93       	push	r22
    32b4:	7f 93       	push	r23
    32b6:	8f 93       	push	r24
    32b8:	9f 93       	push	r25
    32ba:	af 93       	push	r26
    32bc:	bf 93       	push	r27
    32be:	ef 93       	push	r30
    32c0:	ff 93       	push	r31
    32c2:	e0 91 d4 21 	lds	r30, 0x21D4
    32c6:	f0 91 d5 21 	lds	r31, 0x21D5
    32ca:	30 97       	sbiw	r30, 0x00	; 0
    32cc:	29 f0       	breq	.+10     	; 0x32d8 <__vector_78+0x3c>
    32ce:	80 91 ca 22 	lds	r24, 0x22CA
    32d2:	90 91 cb 22 	lds	r25, 0x22CB
    32d6:	19 95       	eicall
    32d8:	ff 91       	pop	r31
    32da:	ef 91       	pop	r30
    32dc:	bf 91       	pop	r27
    32de:	af 91       	pop	r26
    32e0:	9f 91       	pop	r25
    32e2:	8f 91       	pop	r24
    32e4:	7f 91       	pop	r23
    32e6:	6f 91       	pop	r22
    32e8:	5f 91       	pop	r21
    32ea:	4f 91       	pop	r20
    32ec:	3f 91       	pop	r19
    32ee:	2f 91       	pop	r18
    32f0:	0f 90       	pop	r0
    32f2:	0b be       	out	0x3b, r0	; 59
    32f4:	0f 90       	pop	r0
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	0f 90       	pop	r0
    32fa:	1f 90       	pop	r1
    32fc:	18 95       	reti

000032fe <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    32fe:	1f 92       	push	r1
    3300:	0f 92       	push	r0
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	0f 92       	push	r0
    3306:	11 24       	eor	r1, r1
    3308:	0b b6       	in	r0, 0x3b	; 59
    330a:	0f 92       	push	r0
    330c:	2f 93       	push	r18
    330e:	3f 93       	push	r19
    3310:	4f 93       	push	r20
    3312:	5f 93       	push	r21
    3314:	6f 93       	push	r22
    3316:	7f 93       	push	r23
    3318:	8f 93       	push	r24
    331a:	9f 93       	push	r25
    331c:	af 93       	push	r26
    331e:	bf 93       	push	r27
    3320:	ef 93       	push	r30
    3322:	ff 93       	push	r31
    3324:	e0 91 d6 21 	lds	r30, 0x21D6
    3328:	f0 91 d7 21 	lds	r31, 0x21D7
    332c:	30 97       	sbiw	r30, 0x00	; 0
    332e:	29 f0       	breq	.+10     	; 0x333a <__vector_79+0x3c>
    3330:	80 91 cc 22 	lds	r24, 0x22CC
    3334:	90 91 cd 22 	lds	r25, 0x22CD
    3338:	19 95       	eicall
    333a:	ff 91       	pop	r31
    333c:	ef 91       	pop	r30
    333e:	bf 91       	pop	r27
    3340:	af 91       	pop	r26
    3342:	9f 91       	pop	r25
    3344:	8f 91       	pop	r24
    3346:	7f 91       	pop	r23
    3348:	6f 91       	pop	r22
    334a:	5f 91       	pop	r21
    334c:	4f 91       	pop	r20
    334e:	3f 91       	pop	r19
    3350:	2f 91       	pop	r18
    3352:	0f 90       	pop	r0
    3354:	0b be       	out	0x3b, r0	; 59
    3356:	0f 90       	pop	r0
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	0f 90       	pop	r0
    335c:	1f 90       	pop	r1
    335e:	18 95       	reti

00003360 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    3360:	1f 92       	push	r1
    3362:	0f 92       	push	r0
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	0f 92       	push	r0
    3368:	11 24       	eor	r1, r1
    336a:	0b b6       	in	r0, 0x3b	; 59
    336c:	0f 92       	push	r0
    336e:	2f 93       	push	r18
    3370:	3f 93       	push	r19
    3372:	4f 93       	push	r20
    3374:	5f 93       	push	r21
    3376:	6f 93       	push	r22
    3378:	7f 93       	push	r23
    337a:	8f 93       	push	r24
    337c:	9f 93       	push	r25
    337e:	af 93       	push	r26
    3380:	bf 93       	push	r27
    3382:	ef 93       	push	r30
    3384:	ff 93       	push	r31
    3386:	e0 91 d8 21 	lds	r30, 0x21D8
    338a:	f0 91 d9 21 	lds	r31, 0x21D9
    338e:	30 97       	sbiw	r30, 0x00	; 0
    3390:	29 f0       	breq	.+10     	; 0x339c <__vector_80+0x3c>
    3392:	80 91 ce 22 	lds	r24, 0x22CE
    3396:	90 91 cf 22 	lds	r25, 0x22CF
    339a:	19 95       	eicall
    339c:	ff 91       	pop	r31
    339e:	ef 91       	pop	r30
    33a0:	bf 91       	pop	r27
    33a2:	af 91       	pop	r26
    33a4:	9f 91       	pop	r25
    33a6:	8f 91       	pop	r24
    33a8:	7f 91       	pop	r23
    33aa:	6f 91       	pop	r22
    33ac:	5f 91       	pop	r21
    33ae:	4f 91       	pop	r20
    33b0:	3f 91       	pop	r19
    33b2:	2f 91       	pop	r18
    33b4:	0f 90       	pop	r0
    33b6:	0b be       	out	0x3b, r0	; 59
    33b8:	0f 90       	pop	r0
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	0f 90       	pop	r0
    33be:	1f 90       	pop	r1
    33c0:	18 95       	reti

000033c2 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    33c2:	1f 92       	push	r1
    33c4:	0f 92       	push	r0
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	0f 92       	push	r0
    33ca:	11 24       	eor	r1, r1
    33cc:	0b b6       	in	r0, 0x3b	; 59
    33ce:	0f 92       	push	r0
    33d0:	2f 93       	push	r18
    33d2:	3f 93       	push	r19
    33d4:	4f 93       	push	r20
    33d6:	5f 93       	push	r21
    33d8:	6f 93       	push	r22
    33da:	7f 93       	push	r23
    33dc:	8f 93       	push	r24
    33de:	9f 93       	push	r25
    33e0:	af 93       	push	r26
    33e2:	bf 93       	push	r27
    33e4:	ef 93       	push	r30
    33e6:	ff 93       	push	r31
    33e8:	e0 91 da 21 	lds	r30, 0x21DA
    33ec:	f0 91 db 21 	lds	r31, 0x21DB
    33f0:	30 97       	sbiw	r30, 0x00	; 0
    33f2:	29 f0       	breq	.+10     	; 0x33fe <__vector_81+0x3c>
    33f4:	80 91 d0 22 	lds	r24, 0x22D0
    33f8:	90 91 d1 22 	lds	r25, 0x22D1
    33fc:	19 95       	eicall
    33fe:	ff 91       	pop	r31
    3400:	ef 91       	pop	r30
    3402:	bf 91       	pop	r27
    3404:	af 91       	pop	r26
    3406:	9f 91       	pop	r25
    3408:	8f 91       	pop	r24
    340a:	7f 91       	pop	r23
    340c:	6f 91       	pop	r22
    340e:	5f 91       	pop	r21
    3410:	4f 91       	pop	r20
    3412:	3f 91       	pop	r19
    3414:	2f 91       	pop	r18
    3416:	0f 90       	pop	r0
    3418:	0b be       	out	0x3b, r0	; 59
    341a:	0f 90       	pop	r0
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	0f 90       	pop	r0
    3420:	1f 90       	pop	r1
    3422:	18 95       	reti

00003424 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3424:	1f 92       	push	r1
    3426:	0f 92       	push	r0
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	0f 92       	push	r0
    342c:	11 24       	eor	r1, r1
    342e:	0b b6       	in	r0, 0x3b	; 59
    3430:	0f 92       	push	r0
    3432:	2f 93       	push	r18
    3434:	3f 93       	push	r19
    3436:	4f 93       	push	r20
    3438:	5f 93       	push	r21
    343a:	6f 93       	push	r22
    343c:	7f 93       	push	r23
    343e:	8f 93       	push	r24
    3440:	9f 93       	push	r25
    3442:	af 93       	push	r26
    3444:	bf 93       	push	r27
    3446:	ef 93       	push	r30
    3448:	ff 93       	push	r31
    344a:	e0 91 dc 21 	lds	r30, 0x21DC
    344e:	f0 91 dd 21 	lds	r31, 0x21DD
    3452:	30 97       	sbiw	r30, 0x00	; 0
    3454:	29 f0       	breq	.+10     	; 0x3460 <__vector_82+0x3c>
    3456:	80 91 d2 22 	lds	r24, 0x22D2
    345a:	90 91 d3 22 	lds	r25, 0x22D3
    345e:	19 95       	eicall
    3460:	ff 91       	pop	r31
    3462:	ef 91       	pop	r30
    3464:	bf 91       	pop	r27
    3466:	af 91       	pop	r26
    3468:	9f 91       	pop	r25
    346a:	8f 91       	pop	r24
    346c:	7f 91       	pop	r23
    346e:	6f 91       	pop	r22
    3470:	5f 91       	pop	r21
    3472:	4f 91       	pop	r20
    3474:	3f 91       	pop	r19
    3476:	2f 91       	pop	r18
    3478:	0f 90       	pop	r0
    347a:	0b be       	out	0x3b, r0	; 59
    347c:	0f 90       	pop	r0
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	0f 90       	pop	r0
    3482:	1f 90       	pop	r1
    3484:	18 95       	reti

00003486 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3486:	1f 92       	push	r1
    3488:	0f 92       	push	r0
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	0f 92       	push	r0
    348e:	11 24       	eor	r1, r1
    3490:	0b b6       	in	r0, 0x3b	; 59
    3492:	0f 92       	push	r0
    3494:	2f 93       	push	r18
    3496:	3f 93       	push	r19
    3498:	4f 93       	push	r20
    349a:	5f 93       	push	r21
    349c:	6f 93       	push	r22
    349e:	7f 93       	push	r23
    34a0:	8f 93       	push	r24
    34a2:	9f 93       	push	r25
    34a4:	af 93       	push	r26
    34a6:	bf 93       	push	r27
    34a8:	ef 93       	push	r30
    34aa:	ff 93       	push	r31
    34ac:	e0 91 de 21 	lds	r30, 0x21DE
    34b0:	f0 91 df 21 	lds	r31, 0x21DF
    34b4:	30 97       	sbiw	r30, 0x00	; 0
    34b6:	29 f0       	breq	.+10     	; 0x34c2 <__vector_83+0x3c>
    34b8:	80 91 d4 22 	lds	r24, 0x22D4
    34bc:	90 91 d5 22 	lds	r25, 0x22D5
    34c0:	19 95       	eicall
    34c2:	ff 91       	pop	r31
    34c4:	ef 91       	pop	r30
    34c6:	bf 91       	pop	r27
    34c8:	af 91       	pop	r26
    34ca:	9f 91       	pop	r25
    34cc:	8f 91       	pop	r24
    34ce:	7f 91       	pop	r23
    34d0:	6f 91       	pop	r22
    34d2:	5f 91       	pop	r21
    34d4:	4f 91       	pop	r20
    34d6:	3f 91       	pop	r19
    34d8:	2f 91       	pop	r18
    34da:	0f 90       	pop	r0
    34dc:	0b be       	out	0x3b, r0	; 59
    34de:	0f 90       	pop	r0
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	0f 90       	pop	r0
    34e4:	1f 90       	pop	r1
    34e6:	18 95       	reti

000034e8 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    34e8:	1f 92       	push	r1
    34ea:	0f 92       	push	r0
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	0f 92       	push	r0
    34f0:	11 24       	eor	r1, r1
    34f2:	0b b6       	in	r0, 0x3b	; 59
    34f4:	0f 92       	push	r0
    34f6:	2f 93       	push	r18
    34f8:	3f 93       	push	r19
    34fa:	4f 93       	push	r20
    34fc:	5f 93       	push	r21
    34fe:	6f 93       	push	r22
    3500:	7f 93       	push	r23
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	af 93       	push	r26
    3508:	bf 93       	push	r27
    350a:	ef 93       	push	r30
    350c:	ff 93       	push	r31
    350e:	e0 91 e0 21 	lds	r30, 0x21E0
    3512:	f0 91 e1 21 	lds	r31, 0x21E1
    3516:	30 97       	sbiw	r30, 0x00	; 0
    3518:	29 f0       	breq	.+10     	; 0x3524 <__vector_84+0x3c>
    351a:	80 91 d6 22 	lds	r24, 0x22D6
    351e:	90 91 d7 22 	lds	r25, 0x22D7
    3522:	19 95       	eicall
    3524:	ff 91       	pop	r31
    3526:	ef 91       	pop	r30
    3528:	bf 91       	pop	r27
    352a:	af 91       	pop	r26
    352c:	9f 91       	pop	r25
    352e:	8f 91       	pop	r24
    3530:	7f 91       	pop	r23
    3532:	6f 91       	pop	r22
    3534:	5f 91       	pop	r21
    3536:	4f 91       	pop	r20
    3538:	3f 91       	pop	r19
    353a:	2f 91       	pop	r18
    353c:	0f 90       	pop	r0
    353e:	0b be       	out	0x3b, r0	; 59
    3540:	0f 90       	pop	r0
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	0f 90       	pop	r0
    3546:	1f 90       	pop	r1
    3548:	18 95       	reti

0000354a <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    354a:	1f 92       	push	r1
    354c:	0f 92       	push	r0
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	0f 92       	push	r0
    3552:	11 24       	eor	r1, r1
    3554:	0b b6       	in	r0, 0x3b	; 59
    3556:	0f 92       	push	r0
    3558:	2f 93       	push	r18
    355a:	3f 93       	push	r19
    355c:	4f 93       	push	r20
    355e:	5f 93       	push	r21
    3560:	6f 93       	push	r22
    3562:	7f 93       	push	r23
    3564:	8f 93       	push	r24
    3566:	9f 93       	push	r25
    3568:	af 93       	push	r26
    356a:	bf 93       	push	r27
    356c:	ef 93       	push	r30
    356e:	ff 93       	push	r31
    3570:	e0 91 e2 21 	lds	r30, 0x21E2
    3574:	f0 91 e3 21 	lds	r31, 0x21E3
    3578:	30 97       	sbiw	r30, 0x00	; 0
    357a:	29 f0       	breq	.+10     	; 0x3586 <__vector_85+0x3c>
    357c:	80 91 d8 22 	lds	r24, 0x22D8
    3580:	90 91 d9 22 	lds	r25, 0x22D9
    3584:	19 95       	eicall
    3586:	ff 91       	pop	r31
    3588:	ef 91       	pop	r30
    358a:	bf 91       	pop	r27
    358c:	af 91       	pop	r26
    358e:	9f 91       	pop	r25
    3590:	8f 91       	pop	r24
    3592:	7f 91       	pop	r23
    3594:	6f 91       	pop	r22
    3596:	5f 91       	pop	r21
    3598:	4f 91       	pop	r20
    359a:	3f 91       	pop	r19
    359c:	2f 91       	pop	r18
    359e:	0f 90       	pop	r0
    35a0:	0b be       	out	0x3b, r0	; 59
    35a2:	0f 90       	pop	r0
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	0f 90       	pop	r0
    35a8:	1f 90       	pop	r1
    35aa:	18 95       	reti

000035ac <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    35ac:	1f 92       	push	r1
    35ae:	0f 92       	push	r0
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	0f 92       	push	r0
    35b4:	11 24       	eor	r1, r1
    35b6:	0b b6       	in	r0, 0x3b	; 59
    35b8:	0f 92       	push	r0
    35ba:	2f 93       	push	r18
    35bc:	3f 93       	push	r19
    35be:	4f 93       	push	r20
    35c0:	5f 93       	push	r21
    35c2:	6f 93       	push	r22
    35c4:	7f 93       	push	r23
    35c6:	8f 93       	push	r24
    35c8:	9f 93       	push	r25
    35ca:	af 93       	push	r26
    35cc:	bf 93       	push	r27
    35ce:	ef 93       	push	r30
    35d0:	ff 93       	push	r31
    35d2:	e0 91 e4 21 	lds	r30, 0x21E4
    35d6:	f0 91 e5 21 	lds	r31, 0x21E5
    35da:	30 97       	sbiw	r30, 0x00	; 0
    35dc:	29 f0       	breq	.+10     	; 0x35e8 <__vector_86+0x3c>
    35de:	80 91 da 22 	lds	r24, 0x22DA
    35e2:	90 91 db 22 	lds	r25, 0x22DB
    35e6:	19 95       	eicall
    35e8:	ff 91       	pop	r31
    35ea:	ef 91       	pop	r30
    35ec:	bf 91       	pop	r27
    35ee:	af 91       	pop	r26
    35f0:	9f 91       	pop	r25
    35f2:	8f 91       	pop	r24
    35f4:	7f 91       	pop	r23
    35f6:	6f 91       	pop	r22
    35f8:	5f 91       	pop	r21
    35fa:	4f 91       	pop	r20
    35fc:	3f 91       	pop	r19
    35fe:	2f 91       	pop	r18
    3600:	0f 90       	pop	r0
    3602:	0b be       	out	0x3b, r0	; 59
    3604:	0f 90       	pop	r0
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	0f 90       	pop	r0
    360a:	1f 90       	pop	r1
    360c:	18 95       	reti

0000360e <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    360e:	1f 92       	push	r1
    3610:	0f 92       	push	r0
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	0f 92       	push	r0
    3616:	11 24       	eor	r1, r1
    3618:	0b b6       	in	r0, 0x3b	; 59
    361a:	0f 92       	push	r0
    361c:	2f 93       	push	r18
    361e:	3f 93       	push	r19
    3620:	4f 93       	push	r20
    3622:	5f 93       	push	r21
    3624:	6f 93       	push	r22
    3626:	7f 93       	push	r23
    3628:	8f 93       	push	r24
    362a:	9f 93       	push	r25
    362c:	af 93       	push	r26
    362e:	bf 93       	push	r27
    3630:	ef 93       	push	r30
    3632:	ff 93       	push	r31
    3634:	e0 91 e6 21 	lds	r30, 0x21E6
    3638:	f0 91 e7 21 	lds	r31, 0x21E7
    363c:	30 97       	sbiw	r30, 0x00	; 0
    363e:	29 f0       	breq	.+10     	; 0x364a <__vector_87+0x3c>
    3640:	80 91 dc 22 	lds	r24, 0x22DC
    3644:	90 91 dd 22 	lds	r25, 0x22DD
    3648:	19 95       	eicall
    364a:	ff 91       	pop	r31
    364c:	ef 91       	pop	r30
    364e:	bf 91       	pop	r27
    3650:	af 91       	pop	r26
    3652:	9f 91       	pop	r25
    3654:	8f 91       	pop	r24
    3656:	7f 91       	pop	r23
    3658:	6f 91       	pop	r22
    365a:	5f 91       	pop	r21
    365c:	4f 91       	pop	r20
    365e:	3f 91       	pop	r19
    3660:	2f 91       	pop	r18
    3662:	0f 90       	pop	r0
    3664:	0b be       	out	0x3b, r0	; 59
    3666:	0f 90       	pop	r0
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	0f 90       	pop	r0
    366c:	1f 90       	pop	r1
    366e:	18 95       	reti

00003670 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    3670:	1f 92       	push	r1
    3672:	0f 92       	push	r0
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	0f 92       	push	r0
    3678:	11 24       	eor	r1, r1
    367a:	0b b6       	in	r0, 0x3b	; 59
    367c:	0f 92       	push	r0
    367e:	2f 93       	push	r18
    3680:	3f 93       	push	r19
    3682:	4f 93       	push	r20
    3684:	5f 93       	push	r21
    3686:	6f 93       	push	r22
    3688:	7f 93       	push	r23
    368a:	8f 93       	push	r24
    368c:	9f 93       	push	r25
    368e:	af 93       	push	r26
    3690:	bf 93       	push	r27
    3692:	ef 93       	push	r30
    3694:	ff 93       	push	r31
    3696:	e0 91 e8 21 	lds	r30, 0x21E8
    369a:	f0 91 e9 21 	lds	r31, 0x21E9
    369e:	30 97       	sbiw	r30, 0x00	; 0
    36a0:	29 f0       	breq	.+10     	; 0x36ac <__vector_88+0x3c>
    36a2:	80 91 de 22 	lds	r24, 0x22DE
    36a6:	90 91 df 22 	lds	r25, 0x22DF
    36aa:	19 95       	eicall
    36ac:	ff 91       	pop	r31
    36ae:	ef 91       	pop	r30
    36b0:	bf 91       	pop	r27
    36b2:	af 91       	pop	r26
    36b4:	9f 91       	pop	r25
    36b6:	8f 91       	pop	r24
    36b8:	7f 91       	pop	r23
    36ba:	6f 91       	pop	r22
    36bc:	5f 91       	pop	r21
    36be:	4f 91       	pop	r20
    36c0:	3f 91       	pop	r19
    36c2:	2f 91       	pop	r18
    36c4:	0f 90       	pop	r0
    36c6:	0b be       	out	0x3b, r0	; 59
    36c8:	0f 90       	pop	r0
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	0f 90       	pop	r0
    36ce:	1f 90       	pop	r1
    36d0:	18 95       	reti

000036d2 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    36d2:	1f 92       	push	r1
    36d4:	0f 92       	push	r0
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	0f 92       	push	r0
    36da:	11 24       	eor	r1, r1
    36dc:	0b b6       	in	r0, 0x3b	; 59
    36de:	0f 92       	push	r0
    36e0:	2f 93       	push	r18
    36e2:	3f 93       	push	r19
    36e4:	4f 93       	push	r20
    36e6:	5f 93       	push	r21
    36e8:	6f 93       	push	r22
    36ea:	7f 93       	push	r23
    36ec:	8f 93       	push	r24
    36ee:	9f 93       	push	r25
    36f0:	af 93       	push	r26
    36f2:	bf 93       	push	r27
    36f4:	ef 93       	push	r30
    36f6:	ff 93       	push	r31
    36f8:	e0 91 ea 21 	lds	r30, 0x21EA
    36fc:	f0 91 eb 21 	lds	r31, 0x21EB
    3700:	30 97       	sbiw	r30, 0x00	; 0
    3702:	29 f0       	breq	.+10     	; 0x370e <__vector_89+0x3c>
    3704:	80 91 e0 22 	lds	r24, 0x22E0
    3708:	90 91 e1 22 	lds	r25, 0x22E1
    370c:	19 95       	eicall
    370e:	ff 91       	pop	r31
    3710:	ef 91       	pop	r30
    3712:	bf 91       	pop	r27
    3714:	af 91       	pop	r26
    3716:	9f 91       	pop	r25
    3718:	8f 91       	pop	r24
    371a:	7f 91       	pop	r23
    371c:	6f 91       	pop	r22
    371e:	5f 91       	pop	r21
    3720:	4f 91       	pop	r20
    3722:	3f 91       	pop	r19
    3724:	2f 91       	pop	r18
    3726:	0f 90       	pop	r0
    3728:	0b be       	out	0x3b, r0	; 59
    372a:	0f 90       	pop	r0
    372c:	0f be       	out	0x3f, r0	; 63
    372e:	0f 90       	pop	r0
    3730:	1f 90       	pop	r1
    3732:	18 95       	reti

00003734 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3734:	1f 92       	push	r1
    3736:	0f 92       	push	r0
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	0f 92       	push	r0
    373c:	11 24       	eor	r1, r1
    373e:	0b b6       	in	r0, 0x3b	; 59
    3740:	0f 92       	push	r0
    3742:	2f 93       	push	r18
    3744:	3f 93       	push	r19
    3746:	4f 93       	push	r20
    3748:	5f 93       	push	r21
    374a:	6f 93       	push	r22
    374c:	7f 93       	push	r23
    374e:	8f 93       	push	r24
    3750:	9f 93       	push	r25
    3752:	af 93       	push	r26
    3754:	bf 93       	push	r27
    3756:	ef 93       	push	r30
    3758:	ff 93       	push	r31
    375a:	e0 91 ec 21 	lds	r30, 0x21EC
    375e:	f0 91 ed 21 	lds	r31, 0x21ED
    3762:	30 97       	sbiw	r30, 0x00	; 0
    3764:	29 f0       	breq	.+10     	; 0x3770 <__vector_90+0x3c>
    3766:	80 91 e2 22 	lds	r24, 0x22E2
    376a:	90 91 e3 22 	lds	r25, 0x22E3
    376e:	19 95       	eicall
    3770:	ff 91       	pop	r31
    3772:	ef 91       	pop	r30
    3774:	bf 91       	pop	r27
    3776:	af 91       	pop	r26
    3778:	9f 91       	pop	r25
    377a:	8f 91       	pop	r24
    377c:	7f 91       	pop	r23
    377e:	6f 91       	pop	r22
    3780:	5f 91       	pop	r21
    3782:	4f 91       	pop	r20
    3784:	3f 91       	pop	r19
    3786:	2f 91       	pop	r18
    3788:	0f 90       	pop	r0
    378a:	0b be       	out	0x3b, r0	; 59
    378c:	0f 90       	pop	r0
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	0f 90       	pop	r0
    3792:	1f 90       	pop	r1
    3794:	18 95       	reti

00003796 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3796:	1f 92       	push	r1
    3798:	0f 92       	push	r0
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	0f 92       	push	r0
    379e:	11 24       	eor	r1, r1
    37a0:	0b b6       	in	r0, 0x3b	; 59
    37a2:	0f 92       	push	r0
    37a4:	2f 93       	push	r18
    37a6:	3f 93       	push	r19
    37a8:	4f 93       	push	r20
    37aa:	5f 93       	push	r21
    37ac:	6f 93       	push	r22
    37ae:	7f 93       	push	r23
    37b0:	8f 93       	push	r24
    37b2:	9f 93       	push	r25
    37b4:	af 93       	push	r26
    37b6:	bf 93       	push	r27
    37b8:	ef 93       	push	r30
    37ba:	ff 93       	push	r31
    37bc:	e0 91 ee 21 	lds	r30, 0x21EE
    37c0:	f0 91 ef 21 	lds	r31, 0x21EF
    37c4:	30 97       	sbiw	r30, 0x00	; 0
    37c6:	29 f0       	breq	.+10     	; 0x37d2 <__vector_91+0x3c>
    37c8:	80 91 e4 22 	lds	r24, 0x22E4
    37cc:	90 91 e5 22 	lds	r25, 0x22E5
    37d0:	19 95       	eicall
    37d2:	ff 91       	pop	r31
    37d4:	ef 91       	pop	r30
    37d6:	bf 91       	pop	r27
    37d8:	af 91       	pop	r26
    37da:	9f 91       	pop	r25
    37dc:	8f 91       	pop	r24
    37de:	7f 91       	pop	r23
    37e0:	6f 91       	pop	r22
    37e2:	5f 91       	pop	r21
    37e4:	4f 91       	pop	r20
    37e6:	3f 91       	pop	r19
    37e8:	2f 91       	pop	r18
    37ea:	0f 90       	pop	r0
    37ec:	0b be       	out	0x3b, r0	; 59
    37ee:	0f 90       	pop	r0
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	0f 90       	pop	r0
    37f4:	1f 90       	pop	r1
    37f6:	18 95       	reti

000037f8 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    37f8:	1f 92       	push	r1
    37fa:	0f 92       	push	r0
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	0f 92       	push	r0
    3800:	11 24       	eor	r1, r1
    3802:	0b b6       	in	r0, 0x3b	; 59
    3804:	0f 92       	push	r0
    3806:	2f 93       	push	r18
    3808:	3f 93       	push	r19
    380a:	4f 93       	push	r20
    380c:	5f 93       	push	r21
    380e:	6f 93       	push	r22
    3810:	7f 93       	push	r23
    3812:	8f 93       	push	r24
    3814:	9f 93       	push	r25
    3816:	af 93       	push	r26
    3818:	bf 93       	push	r27
    381a:	ef 93       	push	r30
    381c:	ff 93       	push	r31
    381e:	e0 91 f0 21 	lds	r30, 0x21F0
    3822:	f0 91 f1 21 	lds	r31, 0x21F1
    3826:	30 97       	sbiw	r30, 0x00	; 0
    3828:	29 f0       	breq	.+10     	; 0x3834 <__vector_92+0x3c>
    382a:	80 91 e6 22 	lds	r24, 0x22E6
    382e:	90 91 e7 22 	lds	r25, 0x22E7
    3832:	19 95       	eicall
    3834:	ff 91       	pop	r31
    3836:	ef 91       	pop	r30
    3838:	bf 91       	pop	r27
    383a:	af 91       	pop	r26
    383c:	9f 91       	pop	r25
    383e:	8f 91       	pop	r24
    3840:	7f 91       	pop	r23
    3842:	6f 91       	pop	r22
    3844:	5f 91       	pop	r21
    3846:	4f 91       	pop	r20
    3848:	3f 91       	pop	r19
    384a:	2f 91       	pop	r18
    384c:	0f 90       	pop	r0
    384e:	0b be       	out	0x3b, r0	; 59
    3850:	0f 90       	pop	r0
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	0f 90       	pop	r0
    3856:	1f 90       	pop	r1
    3858:	18 95       	reti

0000385a <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    385a:	1f 92       	push	r1
    385c:	0f 92       	push	r0
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	0f 92       	push	r0
    3862:	11 24       	eor	r1, r1
    3864:	0b b6       	in	r0, 0x3b	; 59
    3866:	0f 92       	push	r0
    3868:	2f 93       	push	r18
    386a:	3f 93       	push	r19
    386c:	4f 93       	push	r20
    386e:	5f 93       	push	r21
    3870:	6f 93       	push	r22
    3872:	7f 93       	push	r23
    3874:	8f 93       	push	r24
    3876:	9f 93       	push	r25
    3878:	af 93       	push	r26
    387a:	bf 93       	push	r27
    387c:	ef 93       	push	r30
    387e:	ff 93       	push	r31
    3880:	e0 91 f2 21 	lds	r30, 0x21F2
    3884:	f0 91 f3 21 	lds	r31, 0x21F3
    3888:	30 97       	sbiw	r30, 0x00	; 0
    388a:	29 f0       	breq	.+10     	; 0x3896 <__vector_93+0x3c>
    388c:	80 91 e8 22 	lds	r24, 0x22E8
    3890:	90 91 e9 22 	lds	r25, 0x22E9
    3894:	19 95       	eicall
    3896:	ff 91       	pop	r31
    3898:	ef 91       	pop	r30
    389a:	bf 91       	pop	r27
    389c:	af 91       	pop	r26
    389e:	9f 91       	pop	r25
    38a0:	8f 91       	pop	r24
    38a2:	7f 91       	pop	r23
    38a4:	6f 91       	pop	r22
    38a6:	5f 91       	pop	r21
    38a8:	4f 91       	pop	r20
    38aa:	3f 91       	pop	r19
    38ac:	2f 91       	pop	r18
    38ae:	0f 90       	pop	r0
    38b0:	0b be       	out	0x3b, r0	; 59
    38b2:	0f 90       	pop	r0
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	0f 90       	pop	r0
    38b8:	1f 90       	pop	r1
    38ba:	18 95       	reti

000038bc <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    38bc:	1f 92       	push	r1
    38be:	0f 92       	push	r0
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	0f 92       	push	r0
    38c4:	11 24       	eor	r1, r1
    38c6:	0b b6       	in	r0, 0x3b	; 59
    38c8:	0f 92       	push	r0
    38ca:	2f 93       	push	r18
    38cc:	3f 93       	push	r19
    38ce:	4f 93       	push	r20
    38d0:	5f 93       	push	r21
    38d2:	6f 93       	push	r22
    38d4:	7f 93       	push	r23
    38d6:	8f 93       	push	r24
    38d8:	9f 93       	push	r25
    38da:	af 93       	push	r26
    38dc:	bf 93       	push	r27
    38de:	ef 93       	push	r30
    38e0:	ff 93       	push	r31
    38e2:	e0 91 08 22 	lds	r30, 0x2208
    38e6:	f0 91 09 22 	lds	r31, 0x2209
    38ea:	30 97       	sbiw	r30, 0x00	; 0
    38ec:	29 f0       	breq	.+10     	; 0x38f8 <__vector_104+0x3c>
    38ee:	80 91 fe 22 	lds	r24, 0x22FE
    38f2:	90 91 ff 22 	lds	r25, 0x22FF
    38f6:	19 95       	eicall
    38f8:	ff 91       	pop	r31
    38fa:	ef 91       	pop	r30
    38fc:	bf 91       	pop	r27
    38fe:	af 91       	pop	r26
    3900:	9f 91       	pop	r25
    3902:	8f 91       	pop	r24
    3904:	7f 91       	pop	r23
    3906:	6f 91       	pop	r22
    3908:	5f 91       	pop	r21
    390a:	4f 91       	pop	r20
    390c:	3f 91       	pop	r19
    390e:	2f 91       	pop	r18
    3910:	0f 90       	pop	r0
    3912:	0b be       	out	0x3b, r0	; 59
    3914:	0f 90       	pop	r0
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	0f 90       	pop	r0
    391a:	1f 90       	pop	r1
    391c:	18 95       	reti

0000391e <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    391e:	1f 92       	push	r1
    3920:	0f 92       	push	r0
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	0f 92       	push	r0
    3926:	11 24       	eor	r1, r1
    3928:	0b b6       	in	r0, 0x3b	; 59
    392a:	0f 92       	push	r0
    392c:	2f 93       	push	r18
    392e:	3f 93       	push	r19
    3930:	4f 93       	push	r20
    3932:	5f 93       	push	r21
    3934:	6f 93       	push	r22
    3936:	7f 93       	push	r23
    3938:	8f 93       	push	r24
    393a:	9f 93       	push	r25
    393c:	af 93       	push	r26
    393e:	bf 93       	push	r27
    3940:	ef 93       	push	r30
    3942:	ff 93       	push	r31
    3944:	e0 91 0a 22 	lds	r30, 0x220A
    3948:	f0 91 0b 22 	lds	r31, 0x220B
    394c:	30 97       	sbiw	r30, 0x00	; 0
    394e:	29 f0       	breq	.+10     	; 0x395a <__vector_105+0x3c>
    3950:	80 91 00 23 	lds	r24, 0x2300
    3954:	90 91 01 23 	lds	r25, 0x2301
    3958:	19 95       	eicall
    395a:	ff 91       	pop	r31
    395c:	ef 91       	pop	r30
    395e:	bf 91       	pop	r27
    3960:	af 91       	pop	r26
    3962:	9f 91       	pop	r25
    3964:	8f 91       	pop	r24
    3966:	7f 91       	pop	r23
    3968:	6f 91       	pop	r22
    396a:	5f 91       	pop	r21
    396c:	4f 91       	pop	r20
    396e:	3f 91       	pop	r19
    3970:	2f 91       	pop	r18
    3972:	0f 90       	pop	r0
    3974:	0b be       	out	0x3b, r0	; 59
    3976:	0f 90       	pop	r0
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	0f 90       	pop	r0
    397c:	1f 90       	pop	r1
    397e:	18 95       	reti

00003980 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3980:	1f 92       	push	r1
    3982:	0f 92       	push	r0
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	0f 92       	push	r0
    3988:	11 24       	eor	r1, r1
    398a:	0b b6       	in	r0, 0x3b	; 59
    398c:	0f 92       	push	r0
    398e:	2f 93       	push	r18
    3990:	3f 93       	push	r19
    3992:	4f 93       	push	r20
    3994:	5f 93       	push	r21
    3996:	6f 93       	push	r22
    3998:	7f 93       	push	r23
    399a:	8f 93       	push	r24
    399c:	9f 93       	push	r25
    399e:	af 93       	push	r26
    39a0:	bf 93       	push	r27
    39a2:	ef 93       	push	r30
    39a4:	ff 93       	push	r31
    39a6:	e0 91 10 22 	lds	r30, 0x2210
    39aa:	f0 91 11 22 	lds	r31, 0x2211
    39ae:	30 97       	sbiw	r30, 0x00	; 0
    39b0:	29 f0       	breq	.+10     	; 0x39bc <__vector_108+0x3c>
    39b2:	80 91 06 23 	lds	r24, 0x2306
    39b6:	90 91 07 23 	lds	r25, 0x2307
    39ba:	19 95       	eicall
    39bc:	ff 91       	pop	r31
    39be:	ef 91       	pop	r30
    39c0:	bf 91       	pop	r27
    39c2:	af 91       	pop	r26
    39c4:	9f 91       	pop	r25
    39c6:	8f 91       	pop	r24
    39c8:	7f 91       	pop	r23
    39ca:	6f 91       	pop	r22
    39cc:	5f 91       	pop	r21
    39ce:	4f 91       	pop	r20
    39d0:	3f 91       	pop	r19
    39d2:	2f 91       	pop	r18
    39d4:	0f 90       	pop	r0
    39d6:	0b be       	out	0x3b, r0	; 59
    39d8:	0f 90       	pop	r0
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	0f 90       	pop	r0
    39de:	1f 90       	pop	r1
    39e0:	18 95       	reti

000039e2 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    39e2:	1f 92       	push	r1
    39e4:	0f 92       	push	r0
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	0f 92       	push	r0
    39ea:	11 24       	eor	r1, r1
    39ec:	0b b6       	in	r0, 0x3b	; 59
    39ee:	0f 92       	push	r0
    39f0:	2f 93       	push	r18
    39f2:	3f 93       	push	r19
    39f4:	4f 93       	push	r20
    39f6:	5f 93       	push	r21
    39f8:	6f 93       	push	r22
    39fa:	7f 93       	push	r23
    39fc:	8f 93       	push	r24
    39fe:	9f 93       	push	r25
    3a00:	af 93       	push	r26
    3a02:	bf 93       	push	r27
    3a04:	ef 93       	push	r30
    3a06:	ff 93       	push	r31
    3a08:	e0 91 12 22 	lds	r30, 0x2212
    3a0c:	f0 91 13 22 	lds	r31, 0x2213
    3a10:	30 97       	sbiw	r30, 0x00	; 0
    3a12:	29 f0       	breq	.+10     	; 0x3a1e <__vector_109+0x3c>
    3a14:	80 91 08 23 	lds	r24, 0x2308
    3a18:	90 91 09 23 	lds	r25, 0x2309
    3a1c:	19 95       	eicall
    3a1e:	ff 91       	pop	r31
    3a20:	ef 91       	pop	r30
    3a22:	bf 91       	pop	r27
    3a24:	af 91       	pop	r26
    3a26:	9f 91       	pop	r25
    3a28:	8f 91       	pop	r24
    3a2a:	7f 91       	pop	r23
    3a2c:	6f 91       	pop	r22
    3a2e:	5f 91       	pop	r21
    3a30:	4f 91       	pop	r20
    3a32:	3f 91       	pop	r19
    3a34:	2f 91       	pop	r18
    3a36:	0f 90       	pop	r0
    3a38:	0b be       	out	0x3b, r0	; 59
    3a3a:	0f 90       	pop	r0
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	0f 90       	pop	r0
    3a40:	1f 90       	pop	r1
    3a42:	18 95       	reti

00003a44 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3a44:	1f 92       	push	r1
    3a46:	0f 92       	push	r0
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	0f 92       	push	r0
    3a4c:	11 24       	eor	r1, r1
    3a4e:	0b b6       	in	r0, 0x3b	; 59
    3a50:	0f 92       	push	r0
    3a52:	2f 93       	push	r18
    3a54:	3f 93       	push	r19
    3a56:	4f 93       	push	r20
    3a58:	5f 93       	push	r21
    3a5a:	6f 93       	push	r22
    3a5c:	7f 93       	push	r23
    3a5e:	8f 93       	push	r24
    3a60:	9f 93       	push	r25
    3a62:	af 93       	push	r26
    3a64:	bf 93       	push	r27
    3a66:	ef 93       	push	r30
    3a68:	ff 93       	push	r31
    3a6a:	e0 91 14 22 	lds	r30, 0x2214
    3a6e:	f0 91 15 22 	lds	r31, 0x2215
    3a72:	30 97       	sbiw	r30, 0x00	; 0
    3a74:	29 f0       	breq	.+10     	; 0x3a80 <__vector_110+0x3c>
    3a76:	80 91 0a 23 	lds	r24, 0x230A
    3a7a:	90 91 0b 23 	lds	r25, 0x230B
    3a7e:	19 95       	eicall
    3a80:	ff 91       	pop	r31
    3a82:	ef 91       	pop	r30
    3a84:	bf 91       	pop	r27
    3a86:	af 91       	pop	r26
    3a88:	9f 91       	pop	r25
    3a8a:	8f 91       	pop	r24
    3a8c:	7f 91       	pop	r23
    3a8e:	6f 91       	pop	r22
    3a90:	5f 91       	pop	r21
    3a92:	4f 91       	pop	r20
    3a94:	3f 91       	pop	r19
    3a96:	2f 91       	pop	r18
    3a98:	0f 90       	pop	r0
    3a9a:	0b be       	out	0x3b, r0	; 59
    3a9c:	0f 90       	pop	r0
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	0f 90       	pop	r0
    3aa2:	1f 90       	pop	r1
    3aa4:	18 95       	reti

00003aa6 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3aa6:	1f 92       	push	r1
    3aa8:	0f 92       	push	r0
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	0f 92       	push	r0
    3aae:	11 24       	eor	r1, r1
    3ab0:	0b b6       	in	r0, 0x3b	; 59
    3ab2:	0f 92       	push	r0
    3ab4:	2f 93       	push	r18
    3ab6:	3f 93       	push	r19
    3ab8:	4f 93       	push	r20
    3aba:	5f 93       	push	r21
    3abc:	6f 93       	push	r22
    3abe:	7f 93       	push	r23
    3ac0:	8f 93       	push	r24
    3ac2:	9f 93       	push	r25
    3ac4:	af 93       	push	r26
    3ac6:	bf 93       	push	r27
    3ac8:	ef 93       	push	r30
    3aca:	ff 93       	push	r31
    3acc:	e0 91 16 22 	lds	r30, 0x2216
    3ad0:	f0 91 17 22 	lds	r31, 0x2217
    3ad4:	30 97       	sbiw	r30, 0x00	; 0
    3ad6:	29 f0       	breq	.+10     	; 0x3ae2 <__vector_111+0x3c>
    3ad8:	80 91 0c 23 	lds	r24, 0x230C
    3adc:	90 91 0d 23 	lds	r25, 0x230D
    3ae0:	19 95       	eicall
    3ae2:	ff 91       	pop	r31
    3ae4:	ef 91       	pop	r30
    3ae6:	bf 91       	pop	r27
    3ae8:	af 91       	pop	r26
    3aea:	9f 91       	pop	r25
    3aec:	8f 91       	pop	r24
    3aee:	7f 91       	pop	r23
    3af0:	6f 91       	pop	r22
    3af2:	5f 91       	pop	r21
    3af4:	4f 91       	pop	r20
    3af6:	3f 91       	pop	r19
    3af8:	2f 91       	pop	r18
    3afa:	0f 90       	pop	r0
    3afc:	0b be       	out	0x3b, r0	; 59
    3afe:	0f 90       	pop	r0
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	0f 90       	pop	r0
    3b04:	1f 90       	pop	r1
    3b06:	18 95       	reti

00003b08 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3b08:	1f 92       	push	r1
    3b0a:	0f 92       	push	r0
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	0f 92       	push	r0
    3b10:	11 24       	eor	r1, r1
    3b12:	0b b6       	in	r0, 0x3b	; 59
    3b14:	0f 92       	push	r0
    3b16:	2f 93       	push	r18
    3b18:	3f 93       	push	r19
    3b1a:	4f 93       	push	r20
    3b1c:	5f 93       	push	r21
    3b1e:	6f 93       	push	r22
    3b20:	7f 93       	push	r23
    3b22:	8f 93       	push	r24
    3b24:	9f 93       	push	r25
    3b26:	af 93       	push	r26
    3b28:	bf 93       	push	r27
    3b2a:	ef 93       	push	r30
    3b2c:	ff 93       	push	r31
    3b2e:	e0 91 18 22 	lds	r30, 0x2218
    3b32:	f0 91 19 22 	lds	r31, 0x2219
    3b36:	30 97       	sbiw	r30, 0x00	; 0
    3b38:	29 f0       	breq	.+10     	; 0x3b44 <__vector_112+0x3c>
    3b3a:	80 91 0e 23 	lds	r24, 0x230E
    3b3e:	90 91 0f 23 	lds	r25, 0x230F
    3b42:	19 95       	eicall
    3b44:	ff 91       	pop	r31
    3b46:	ef 91       	pop	r30
    3b48:	bf 91       	pop	r27
    3b4a:	af 91       	pop	r26
    3b4c:	9f 91       	pop	r25
    3b4e:	8f 91       	pop	r24
    3b50:	7f 91       	pop	r23
    3b52:	6f 91       	pop	r22
    3b54:	5f 91       	pop	r21
    3b56:	4f 91       	pop	r20
    3b58:	3f 91       	pop	r19
    3b5a:	2f 91       	pop	r18
    3b5c:	0f 90       	pop	r0
    3b5e:	0b be       	out	0x3b, r0	; 59
    3b60:	0f 90       	pop	r0
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	0f 90       	pop	r0
    3b66:	1f 90       	pop	r1
    3b68:	18 95       	reti

00003b6a <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3b6a:	1f 92       	push	r1
    3b6c:	0f 92       	push	r0
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	0f 92       	push	r0
    3b72:	11 24       	eor	r1, r1
    3b74:	0b b6       	in	r0, 0x3b	; 59
    3b76:	0f 92       	push	r0
    3b78:	2f 93       	push	r18
    3b7a:	3f 93       	push	r19
    3b7c:	4f 93       	push	r20
    3b7e:	5f 93       	push	r21
    3b80:	6f 93       	push	r22
    3b82:	7f 93       	push	r23
    3b84:	8f 93       	push	r24
    3b86:	9f 93       	push	r25
    3b88:	af 93       	push	r26
    3b8a:	bf 93       	push	r27
    3b8c:	ef 93       	push	r30
    3b8e:	ff 93       	push	r31
    3b90:	e0 91 1a 22 	lds	r30, 0x221A
    3b94:	f0 91 1b 22 	lds	r31, 0x221B
    3b98:	30 97       	sbiw	r30, 0x00	; 0
    3b9a:	29 f0       	breq	.+10     	; 0x3ba6 <__vector_113+0x3c>
    3b9c:	80 91 10 23 	lds	r24, 0x2310
    3ba0:	90 91 11 23 	lds	r25, 0x2311
    3ba4:	19 95       	eicall
    3ba6:	ff 91       	pop	r31
    3ba8:	ef 91       	pop	r30
    3baa:	bf 91       	pop	r27
    3bac:	af 91       	pop	r26
    3bae:	9f 91       	pop	r25
    3bb0:	8f 91       	pop	r24
    3bb2:	7f 91       	pop	r23
    3bb4:	6f 91       	pop	r22
    3bb6:	5f 91       	pop	r21
    3bb8:	4f 91       	pop	r20
    3bba:	3f 91       	pop	r19
    3bbc:	2f 91       	pop	r18
    3bbe:	0f 90       	pop	r0
    3bc0:	0b be       	out	0x3b, r0	; 59
    3bc2:	0f 90       	pop	r0
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	0f 90       	pop	r0
    3bc8:	1f 90       	pop	r1
    3bca:	18 95       	reti

00003bcc <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3bcc:	1f 92       	push	r1
    3bce:	0f 92       	push	r0
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	0f 92       	push	r0
    3bd4:	11 24       	eor	r1, r1
    3bd6:	0b b6       	in	r0, 0x3b	; 59
    3bd8:	0f 92       	push	r0
    3bda:	2f 93       	push	r18
    3bdc:	3f 93       	push	r19
    3bde:	4f 93       	push	r20
    3be0:	5f 93       	push	r21
    3be2:	6f 93       	push	r22
    3be4:	7f 93       	push	r23
    3be6:	8f 93       	push	r24
    3be8:	9f 93       	push	r25
    3bea:	af 93       	push	r26
    3bec:	bf 93       	push	r27
    3bee:	ef 93       	push	r30
    3bf0:	ff 93       	push	r31
    3bf2:	e0 91 26 22 	lds	r30, 0x2226
    3bf6:	f0 91 27 22 	lds	r31, 0x2227
    3bfa:	30 97       	sbiw	r30, 0x00	; 0
    3bfc:	29 f0       	breq	.+10     	; 0x3c08 <__vector_119+0x3c>
    3bfe:	80 91 1c 23 	lds	r24, 0x231C
    3c02:	90 91 1d 23 	lds	r25, 0x231D
    3c06:	19 95       	eicall
    3c08:	ff 91       	pop	r31
    3c0a:	ef 91       	pop	r30
    3c0c:	bf 91       	pop	r27
    3c0e:	af 91       	pop	r26
    3c10:	9f 91       	pop	r25
    3c12:	8f 91       	pop	r24
    3c14:	7f 91       	pop	r23
    3c16:	6f 91       	pop	r22
    3c18:	5f 91       	pop	r21
    3c1a:	4f 91       	pop	r20
    3c1c:	3f 91       	pop	r19
    3c1e:	2f 91       	pop	r18
    3c20:	0f 90       	pop	r0
    3c22:	0b be       	out	0x3b, r0	; 59
    3c24:	0f 90       	pop	r0
    3c26:	0f be       	out	0x3f, r0	; 63
    3c28:	0f 90       	pop	r0
    3c2a:	1f 90       	pop	r1
    3c2c:	18 95       	reti

00003c2e <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3c2e:	1f 92       	push	r1
    3c30:	0f 92       	push	r0
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	0f 92       	push	r0
    3c36:	11 24       	eor	r1, r1
    3c38:	0b b6       	in	r0, 0x3b	; 59
    3c3a:	0f 92       	push	r0
    3c3c:	2f 93       	push	r18
    3c3e:	3f 93       	push	r19
    3c40:	4f 93       	push	r20
    3c42:	5f 93       	push	r21
    3c44:	6f 93       	push	r22
    3c46:	7f 93       	push	r23
    3c48:	8f 93       	push	r24
    3c4a:	9f 93       	push	r25
    3c4c:	af 93       	push	r26
    3c4e:	bf 93       	push	r27
    3c50:	ef 93       	push	r30
    3c52:	ff 93       	push	r31
    3c54:	e0 91 28 22 	lds	r30, 0x2228
    3c58:	f0 91 29 22 	lds	r31, 0x2229
    3c5c:	30 97       	sbiw	r30, 0x00	; 0
    3c5e:	29 f0       	breq	.+10     	; 0x3c6a <__vector_120+0x3c>
    3c60:	80 91 1e 23 	lds	r24, 0x231E
    3c64:	90 91 1f 23 	lds	r25, 0x231F
    3c68:	19 95       	eicall
    3c6a:	ff 91       	pop	r31
    3c6c:	ef 91       	pop	r30
    3c6e:	bf 91       	pop	r27
    3c70:	af 91       	pop	r26
    3c72:	9f 91       	pop	r25
    3c74:	8f 91       	pop	r24
    3c76:	7f 91       	pop	r23
    3c78:	6f 91       	pop	r22
    3c7a:	5f 91       	pop	r21
    3c7c:	4f 91       	pop	r20
    3c7e:	3f 91       	pop	r19
    3c80:	2f 91       	pop	r18
    3c82:	0f 90       	pop	r0
    3c84:	0b be       	out	0x3b, r0	; 59
    3c86:	0f 90       	pop	r0
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	0f 90       	pop	r0
    3c8c:	1f 90       	pop	r1
    3c8e:	18 95       	reti

00003c90 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3c90:	1f 92       	push	r1
    3c92:	0f 92       	push	r0
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	0f 92       	push	r0
    3c98:	11 24       	eor	r1, r1
    3c9a:	0b b6       	in	r0, 0x3b	; 59
    3c9c:	0f 92       	push	r0
    3c9e:	2f 93       	push	r18
    3ca0:	3f 93       	push	r19
    3ca2:	4f 93       	push	r20
    3ca4:	5f 93       	push	r21
    3ca6:	6f 93       	push	r22
    3ca8:	7f 93       	push	r23
    3caa:	8f 93       	push	r24
    3cac:	9f 93       	push	r25
    3cae:	af 93       	push	r26
    3cb0:	bf 93       	push	r27
    3cb2:	ef 93       	push	r30
    3cb4:	ff 93       	push	r31
    3cb6:	e0 91 2a 22 	lds	r30, 0x222A
    3cba:	f0 91 2b 22 	lds	r31, 0x222B
    3cbe:	30 97       	sbiw	r30, 0x00	; 0
    3cc0:	29 f0       	breq	.+10     	; 0x3ccc <__vector_121+0x3c>
    3cc2:	80 91 20 23 	lds	r24, 0x2320
    3cc6:	90 91 21 23 	lds	r25, 0x2321
    3cca:	19 95       	eicall
    3ccc:	ff 91       	pop	r31
    3cce:	ef 91       	pop	r30
    3cd0:	bf 91       	pop	r27
    3cd2:	af 91       	pop	r26
    3cd4:	9f 91       	pop	r25
    3cd6:	8f 91       	pop	r24
    3cd8:	7f 91       	pop	r23
    3cda:	6f 91       	pop	r22
    3cdc:	5f 91       	pop	r21
    3cde:	4f 91       	pop	r20
    3ce0:	3f 91       	pop	r19
    3ce2:	2f 91       	pop	r18
    3ce4:	0f 90       	pop	r0
    3ce6:	0b be       	out	0x3b, r0	; 59
    3ce8:	0f 90       	pop	r0
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	0f 90       	pop	r0
    3cee:	1f 90       	pop	r1
    3cf0:	18 95       	reti

00003cf2 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    3cf2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    3cf6:	fd cf       	rjmp	.-6      	; 0x3cf2 <__cxa_pure_virtual>

00003cf8 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3cf8:	85 e5       	ldi	r24, 0x55	; 85
    3cfa:	93 e2       	ldi	r25, 0x23	; 35
    3cfc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    3d00:	83 e5       	ldi	r24, 0x53	; 83
    3d02:	93 e2       	ldi	r25, 0x23	; 35
    3d04:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    3d08:	8a e3       	ldi	r24, 0x3A	; 58
    3d0a:	93 e2       	ldi	r25, 0x23	; 35
    3d0c:	0e 94 77 20 	call	0x40ee	; 0x40ee <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3d10:	89 e3       	ldi	r24, 0x39	; 57
    3d12:	93 e2       	ldi	r25, 0x23	; 35
    3d14:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    3d18:	88 e3       	ldi	r24, 0x38	; 56
    3d1a:	93 e2       	ldi	r25, 0x23	; 35
    3d1c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3d20:	86 e2       	ldi	r24, 0x26	; 38
    3d22:	93 e2       	ldi	r25, 0x23	; 35
    3d24:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN16CLaserControlAppC1Ev>
    3d28:	08 95       	ret

00003d2a <_GLOBAL__sub_D_dacSPI>:
    3d2a:	86 e2       	ldi	r24, 0x26	; 38
    3d2c:	93 e2       	ldi	r25, 0x23	; 35
    3d2e:	0e 94 42 04 	call	0x884	; 0x884 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3d32:	88 e3       	ldi	r24, 0x38	; 56
    3d34:	93 e2       	ldi	r25, 0x23	; 35
    3d36:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    3d3a:	89 e3       	ldi	r24, 0x39	; 57
    3d3c:	93 e2       	ldi	r25, 0x23	; 35
    3d3e:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    3d42:	8a e3       	ldi	r24, 0x3A	; 58
    3d44:	93 e2       	ldi	r25, 0x23	; 35
    3d46:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    3d4a:	83 e5       	ldi	r24, 0x53	; 83
    3d4c:	93 e2       	ldi	r25, 0x23	; 35
    3d4e:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3d52:	85 e5       	ldi	r24, 0x55	; 85
    3d54:	93 e2       	ldi	r25, 0x23	; 35
    3d56:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN4CSPID1Ev>
    3d5a:	08 95       	ret

00003d5c <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3d5c:	ef 92       	push	r14
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3d62:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3d64:	89 e3       	ldi	r24, 0x39	; 57
    3d66:	93 e2       	ldi	r25, 0x23	; 35
    3d68:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    3d6c:	88 e3       	ldi	r24, 0x38	; 56
    3d6e:	93 e2       	ldi	r25, 0x23	; 35
    3d70:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    3d74:	0f 2e       	mov	r0, r31
    3d76:	f3 e0       	ldi	r31, 0x03	; 3
    3d78:	ef 2e       	mov	r14, r31
    3d7a:	f0 2d       	mov	r31, r0
    3d7c:	00 e0       	ldi	r16, 0x00	; 0
    3d7e:	23 e0       	ldi	r18, 0x03	; 3
    3d80:	40 e0       	ldi	r20, 0x00	; 0
    3d82:	61 e0       	ldi	r22, 0x01	; 1
    3d84:	85 e5       	ldi	r24, 0x55	; 85
    3d86:	93 e2       	ldi	r25, 0x23	; 35
    3d88:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3d8c:	01 e0       	ldi	r16, 0x01	; 1
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	40 e0       	ldi	r20, 0x00	; 0
    3d92:	6d e0       	ldi	r22, 0x0D	; 13
    3d94:	83 e5       	ldi	r24, 0x53	; 83
    3d96:	93 e2       	ldi	r25, 0x23	; 35
    3d98:	0e 94 33 02 	call	0x466	; 0x466 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    3d9c:	00 e0       	ldi	r16, 0x00	; 0
    3d9e:	11 e0       	ldi	r17, 0x01	; 1
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	31 e0       	ldi	r19, 0x01	; 1
    3da4:	46 e2       	ldi	r20, 0x26	; 38
    3da6:	53 e2       	ldi	r21, 0x23	; 35
    3da8:	63 e5       	ldi	r22, 0x53	; 83
    3daa:	73 e2       	ldi	r23, 0x23	; 35
    3dac:	8a e3       	ldi	r24, 0x3A	; 58
    3dae:	93 e2       	ldi	r25, 0x23	; 35
    3db0:	0e 94 7d 20 	call	0x40fa	; 0x40fa <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    3db4:	6a e3       	ldi	r22, 0x3A	; 58
    3db6:	73 e2       	ldi	r23, 0x23	; 35
    3db8:	86 e2       	ldi	r24, 0x26	; 38
    3dba:	93 e2       	ldi	r25, 0x23	; 35
    3dbc:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    3dc0:	89 e3       	ldi	r24, 0x39	; 57
    3dc2:	93 e2       	ldi	r25, 0x23	; 35
    3dc4:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    3dc8:	78 94       	sei
}
    3dca:	1f 91       	pop	r17
    3dcc:	0f 91       	pop	r16
    3dce:	ef 90       	pop	r14
    3dd0:	08 95       	ret

00003dd2 <main>:
	 
int main(void)
{
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	1f 92       	push	r1
    3dd8:	1f 92       	push	r1
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    3dde:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    3de2:	88 e3       	ldi	r24, 0x38	; 56
    3de4:	93 e2       	ldi	r25, 0x23	; 35
    3de6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12CSoundPlayer4PlayEv>
	
	// Initialize application GUI
	App.Start();
    3dea:	86 e2       	ldi	r24, 0x26	; 38
    3dec:	93 e2       	ldi	r25, 0x23	; 35
    3dee:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN16CLaserControlApp5StartEv>
	sei();	/* Enable global interrupts */
}
	 
int main(void)
{
	float x = 0.0f;
    3df2:	e1 2c       	mov	r14, r1
    3df4:	f1 2c       	mov	r15, r1
    3df6:	00 e0       	ldi	r16, 0x00	; 0
    3df8:	10 e0       	ldi	r17, 0x00	; 0
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3dfa:	0f 2e       	mov	r0, r31
    3dfc:	f8 ec       	ldi	r31, 0xC8	; 200
    3dfe:	df 2e       	mov	r13, r31
    3e00:	f0 2d       	mov	r31, r0
			App.Run();

		
		// Sine waveform generation
		x += 0.1f;
		if (x > 6.2831853) x = 0.0f;
    3e02:	a1 2c       	mov	r10, r1
    3e04:	b1 2c       	mov	r11, r1
    3e06:	c1 2c       	mov	r12, r1
    3e08:	91 2c       	mov	r9, r1
    3e0a:	8f e3       	ldi	r24, 0x3F	; 63
    3e0c:	9f e1       	ldi	r25, 0x1F	; 31
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <main+0x3c>
    3e12:	00 c0       	rjmp	.+0      	; 0x3e14 <main+0x42>
    3e14:	00 00       	nop
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3e16:	40 91 24 23 	lds	r20, 0x2324
    3e1a:	50 91 25 23 	lds	r21, 0x2325
    3e1e:	ca 01       	movw	r24, r20
    3e20:	01 96       	adiw	r24, 0x01	; 1
    3e22:	80 93 24 23 	sts	0x2324, r24
    3e26:	90 93 25 23 	sts	0x2325, r25
    3e2a:	9a 01       	movw	r18, r20
    3e2c:	36 95       	lsr	r19
    3e2e:	27 95       	ror	r18
    3e30:	36 95       	lsr	r19
    3e32:	27 95       	ror	r18
    3e34:	36 95       	lsr	r19
    3e36:	27 95       	ror	r18
    3e38:	ab e7       	ldi	r26, 0x7B	; 123
    3e3a:	b4 e1       	ldi	r27, 0x14	; 20
    3e3c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <__umulhisi3>
    3e40:	96 95       	lsr	r25
    3e42:	87 95       	ror	r24
    3e44:	d8 9e       	mul	r13, r24
    3e46:	90 01       	movw	r18, r0
    3e48:	d9 9e       	mul	r13, r25
    3e4a:	30 0d       	add	r19, r0
    3e4c:	11 24       	eor	r1, r1
    3e4e:	42 17       	cp	r20, r18
    3e50:	53 07       	cpc	r21, r19
    3e52:	21 f4       	brne	.+8      	; 0x3e5c <main+0x8a>
			App.Run();
    3e54:	86 e2       	ldi	r24, 0x26	; 38
    3e56:	93 e2       	ldi	r25, 0x23	; 35
    3e58:	0e 94 80 04 	call	0x900	; 0x900 <_ZN16CLaserControlApp3RunEv>

		
		// Sine waveform generation
		x += 0.1f;
    3e5c:	2d ec       	ldi	r18, 0xCD	; 205
    3e5e:	3c ec       	ldi	r19, 0xCC	; 204
    3e60:	4c ec       	ldi	r20, 0xCC	; 204
    3e62:	5d e3       	ldi	r21, 0x3D	; 61
    3e64:	6e 2d       	mov	r22, r14
    3e66:	7f 2d       	mov	r23, r15
    3e68:	80 2f       	mov	r24, r16
    3e6a:	91 2f       	mov	r25, r17
    3e6c:	0e 94 8f 22 	call	0x451e	; 0x451e <__addsf3>
    3e70:	e6 2e       	mov	r14, r22
    3e72:	f7 2e       	mov	r15, r23
    3e74:	08 2f       	mov	r16, r24
    3e76:	19 2f       	mov	r17, r25
		if (x > 6.2831853) x = 0.0f;
    3e78:	2b ed       	ldi	r18, 0xDB	; 219
    3e7a:	3f e0       	ldi	r19, 0x0F	; 15
    3e7c:	49 ec       	ldi	r20, 0xC9	; 201
    3e7e:	50 e4       	ldi	r21, 0x40	; 64
    3e80:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__gesf2>
    3e84:	18 16       	cp	r1, r24
    3e86:	24 f4       	brge	.+8      	; 0x3e90 <main+0xbe>
    3e88:	ea 2c       	mov	r14, r10
    3e8a:	fb 2c       	mov	r15, r11
    3e8c:	0c 2d       	mov	r16, r12
    3e8e:	19 2d       	mov	r17, r9
		float y = 1023.0f * (1.0f + sinf(x)) * 0.5f;
    3e90:	6e 2d       	mov	r22, r14
    3e92:	7f 2d       	mov	r23, r15
    3e94:	80 2f       	mov	r24, r16
    3e96:	91 2f       	mov	r25, r17
    3e98:	0e 94 ed 23 	call	0x47da	; 0x47da <sin>
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e8       	ldi	r20, 0x80	; 128
    3ea2:	5f e3       	ldi	r21, 0x3F	; 63
    3ea4:	0e 94 8f 22 	call	0x451e	; 0x451e <__addsf3>
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 ec       	ldi	r19, 0xC0	; 192
    3eac:	4f e7       	ldi	r20, 0x7F	; 127
    3eae:	54 e4       	ldi	r21, 0x44	; 68
    3eb0:	0e 94 80 23 	call	0x4700	; 0x4700 <__mulsf3>
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e0       	ldi	r20, 0x00	; 0
    3eba:	5f e3       	ldi	r21, 0x3F	; 63
    3ebc:	0e 94 80 23 	call	0x4700	; 0x4700 <__mulsf3>
		uint16_t data = ((uint16_t)y) << 2;
    3ec0:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <__fixunssfsi>
    3ec4:	66 0f       	add	r22, r22
    3ec6:	77 1f       	adc	r23, r23
    3ec8:	66 0f       	add	r22, r22
    3eca:	77 1f       	adc	r23, r23
    3ecc:	69 83       	std	Y+1, r22	; 0x01
    3ece:	7a 83       	std	Y+2, r23	; 0x02
	
		// Send to DAC	
		dacSPI.Send((uint8_t*)&data, sizeof(data));
    3ed0:	42 e0       	ldi	r20, 0x02	; 2
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	be 01       	movw	r22, r28
    3ed6:	6f 5f       	subi	r22, 0xFF	; 255
    3ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eda:	85 e5       	ldi	r24, 0x55	; 85
    3edc:	93 e2       	ldi	r25, 0x23	; 35
    3ede:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN4CSPI4SendEPhj>
    }
    3ee2:	93 cf       	rjmp	.-218    	; 0x3e0a <main+0x38>

00003ee4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3eea:	ec 81       	ldd	r30, Y+4	; 0x04
    3eec:	fd 81       	ldd	r31, Y+5	; 0x05
    3eee:	8a ea       	ldi	r24, 0xAA	; 170
    3ef0:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3ef2:	ec 81       	ldd	r30, Y+4	; 0x04
    3ef4:	fd 81       	ldd	r31, Y+5	; 0x05
    3ef6:	8c ec       	ldi	r24, 0xCC	; 204
    3ef8:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    3efa:	ec 81       	ldd	r30, Y+4	; 0x04
    3efc:	fd 81       	ldd	r31, Y+5	; 0x05
    3efe:	82 e0       	ldi	r24, 0x02	; 2
    3f00:	82 0f       	add	r24, r18
    3f02:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    3f04:	ec 81       	ldd	r30, Y+4	; 0x04
    3f06:	fd 81       	ldd	r31, Y+5	; 0x05
    3f08:	80 e8       	ldi	r24, 0x80	; 128
    3f0a:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    3f0c:	ec 81       	ldd	r30, Y+4	; 0x04
    3f0e:	fd 81       	ldd	r31, Y+5	; 0x05
    3f10:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    3f12:	85 e0       	ldi	r24, 0x05	; 5
    3f14:	82 0f       	add	r24, r18
    3f16:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	21 15       	cp	r18, r1
    3f1c:	31 05       	cpc	r19, r1
    3f1e:	81 f0       	breq	.+32     	; 0x3f40 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    3f20:	da 01       	movw	r26, r20
    3f22:	42 0f       	add	r20, r18
    3f24:	53 1f       	adc	r21, r19
    3f26:	65 e0       	ldi	r22, 0x05	; 5
    3f28:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    3f2a:	9d 91       	ld	r25, X+
    3f2c:	ec 81       	ldd	r30, Y+4	; 0x04
    3f2e:	fd 81       	ldd	r31, Y+5	; 0x05
    3f30:	e6 0f       	add	r30, r22
    3f32:	f7 1f       	adc	r31, r23
    3f34:	90 83       	st	Z, r25
    3f36:	6f 5f       	subi	r22, 0xFF	; 255
    3f38:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3f3a:	a4 17       	cp	r26, r20
    3f3c:	b5 07       	cpc	r27, r21
    3f3e:	a9 f7       	brne	.-22     	; 0x3f2a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	08 95       	ret

00003f46 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    3f46:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3f48:	a4 81       	ldd	r26, Z+4	; 0x04
    3f4a:	b5 81       	ldd	r27, Z+5	; 0x05
    3f4c:	8a ea       	ldi	r24, 0xAA	; 170
    3f4e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3f50:	a4 81       	ldd	r26, Z+4	; 0x04
    3f52:	b5 81       	ldd	r27, Z+5	; 0x05
    3f54:	8c ec       	ldi	r24, 0xCC	; 204
    3f56:	11 96       	adiw	r26, 0x01	; 1
    3f58:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    3f5a:	a4 81       	ldd	r26, Z+4	; 0x04
    3f5c:	b5 81       	ldd	r27, Z+5	; 0x05
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	12 96       	adiw	r26, 0x02	; 2
    3f62:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    3f64:	a4 81       	ldd	r26, Z+4	; 0x04
    3f66:	b5 81       	ldd	r27, Z+5	; 0x05
    3f68:	81 e8       	ldi	r24, 0x81	; 129
    3f6a:	13 96       	adiw	r26, 0x03	; 3
    3f6c:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    3f6e:	a4 81       	ldd	r26, Z+4	; 0x04
    3f70:	b5 81       	ldd	r27, Z+5	; 0x05
    3f72:	14 96       	adiw	r26, 0x04	; 4
    3f74:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    3f76:	a4 81       	ldd	r26, Z+4	; 0x04
    3f78:	b5 81       	ldd	r27, Z+5	; 0x05
    3f7a:	15 96       	adiw	r26, 0x05	; 5
    3f7c:	4c 93       	st	X, r20
	tx_frame_length = 6;
    3f7e:	86 e0       	ldi	r24, 0x06	; 6
    3f80:	81 87       	std	Z+9, r24	; 0x09
    3f82:	08 95       	ret

00003f84 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	14 96       	adiw	r26, 0x04	; 4
    3f90:	ed 91       	ld	r30, X+
    3f92:	fc 91       	ld	r31, X
    3f94:	15 97       	sbiw	r26, 0x05	; 5
    3f96:	aa ea       	ldi	r26, 0xAA	; 170
    3f98:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3f9a:	ec 01       	movw	r28, r24
    3f9c:	ec 81       	ldd	r30, Y+4	; 0x04
    3f9e:	fd 81       	ldd	r31, Y+5	; 0x05
    3fa0:	ac ec       	ldi	r26, 0xCC	; 204
    3fa2:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length * 2 + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length * 2 + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    3fa4:	ac 81       	ldd	r26, Y+4	; 0x04
    3fa6:	bd 81       	ldd	r27, Y+5	; 0x05
    3fa8:	e2 2f       	mov	r30, r18
    3faa:	ee 0f       	add	r30, r30
    3fac:	ed 5f       	subi	r30, 0xFD	; 253
    3fae:	12 96       	adiw	r26, 0x02	; 2
    3fb0:	ec 93       	st	X, r30
#endif
	tx_buffer[3] = 0x82;	// Frame command
    3fb2:	ec 81       	ldd	r30, Y+4	; 0x04
    3fb4:	fd 81       	ldd	r31, Y+5	; 0x05
    3fb6:	a2 e8       	ldi	r26, 0x82	; 130
    3fb8:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    3fba:	ec 81       	ldd	r30, Y+4	; 0x04
    3fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    3fbe:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    3fc0:	ec 81       	ldd	r30, Y+4	; 0x04
    3fc2:	fd 81       	ldd	r31, Y+5	; 0x05
    3fc4:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length * 2 + 6;
    3fc6:	b9 01       	movw	r22, r18
    3fc8:	6d 5f       	subi	r22, 0xFD	; 253
    3fca:	7f 4f       	sbci	r23, 0xFF	; 255
    3fcc:	e6 2f       	mov	r30, r22
    3fce:	ee 0f       	add	r30, r30
    3fd0:	e9 87       	std	Y+9, r30	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3fd2:	23 2b       	or	r18, r19
    3fd4:	d9 f0       	breq	.+54     	; 0x400c <__stack+0xd>
    3fd6:	e4 2f       	mov	r30, r20
    3fd8:	f5 2f       	mov	r31, r21
    3fda:	ab 01       	movw	r20, r22
    3fdc:	44 0f       	add	r20, r20
    3fde:	55 1f       	adc	r21, r21
    3fe0:	26 e0       	ldi	r18, 0x06	; 6
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    3fe4:	ec 01       	movw	r28, r24
    3fe6:	ac 81       	ldd	r26, Y+4	; 0x04
    3fe8:	bd 81       	ldd	r27, Y+5	; 0x05
    3fea:	a2 0f       	add	r26, r18
    3fec:	b3 1f       	adc	r27, r19
    3fee:	61 81       	ldd	r22, Z+1	; 0x01
    3ff0:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    3ff2:	ac 81       	ldd	r26, Y+4	; 0x04
    3ff4:	bd 81       	ldd	r27, Y+5	; 0x05
    3ff6:	a2 0f       	add	r26, r18
    3ff8:	b3 1f       	adc	r27, r19
    3ffa:	60 81       	ld	r22, Z
    3ffc:	32 96       	adiw	r30, 0x02	; 2
    3ffe:	11 96       	adiw	r26, 0x01	; 1
    4000:	6c 93       	st	X, r22
    4002:	2e 5f       	subi	r18, 0xFE	; 254
    4004:	3f 4f       	sbci	r19, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length * 2 + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4006:	24 17       	cp	r18, r20
    4008:	35 07       	cpc	r19, r21
    400a:	61 f7       	brne	.-40     	; 0x3fe4 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x60>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	1f 91       	pop	r17
    4012:	0f 91       	pop	r16
    4014:	08 95       	ret

00004016 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4016:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4018:	a4 81       	ldd	r26, Z+4	; 0x04
    401a:	b5 81       	ldd	r27, Z+5	; 0x05
    401c:	8a ea       	ldi	r24, 0xAA	; 170
    401e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4020:	a4 81       	ldd	r26, Z+4	; 0x04
    4022:	b5 81       	ldd	r27, Z+5	; 0x05
    4024:	8c ec       	ldi	r24, 0xCC	; 204
    4026:	11 96       	adiw	r26, 0x01	; 1
    4028:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    402a:	a4 81       	ldd	r26, Z+4	; 0x04
    402c:	b5 81       	ldd	r27, Z+5	; 0x05
    402e:	84 e0       	ldi	r24, 0x04	; 4
    4030:	12 96       	adiw	r26, 0x02	; 2
    4032:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4034:	a4 81       	ldd	r26, Z+4	; 0x04
    4036:	b5 81       	ldd	r27, Z+5	; 0x05
    4038:	83 e8       	ldi	r24, 0x83	; 131
    403a:	13 96       	adiw	r26, 0x03	; 3
    403c:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    403e:	a4 81       	ldd	r26, Z+4	; 0x04
    4040:	b5 81       	ldd	r27, Z+5	; 0x05
    4042:	14 96       	adiw	r26, 0x04	; 4
    4044:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4046:	a4 81       	ldd	r26, Z+4	; 0x04
    4048:	b5 81       	ldd	r27, Z+5	; 0x05
    404a:	15 96       	adiw	r26, 0x05	; 5
    404c:	6c 93       	st	X, r22
	tx_buffer[6] = length * 2;			// Data
    404e:	a4 81       	ldd	r26, Z+4	; 0x04
    4050:	b5 81       	ldd	r27, Z+5	; 0x05
    4052:	44 0f       	add	r20, r20
    4054:	16 96       	adiw	r26, 0x06	; 6
    4056:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4058:	87 e0       	ldi	r24, 0x07	; 7
    405a:	81 87       	std	Z+9, r24	; 0x09
    405c:	08 95       	ret

0000405e <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	ec 01       	movw	r28, r24
    4068:	cb 01       	movw	r24, r22
    406a:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    406c:	6f 83       	std	Y+7, r22	; 0x07
    406e:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4070:	4a 87       	std	Y+10, r20	; 0x0a
    4072:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4074:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <malloc>
    4078:	8a 83       	std	Y+2, r24	; 0x02
    407a:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    407c:	c8 01       	movw	r24, r16
    407e:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <malloc>
    4082:	8c 83       	std	Y+4, r24	; 0x04
    4084:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4086:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4088:	1e 82       	std	Y+6, r1	; 0x06
}
    408a:	df 91       	pop	r29
    408c:	cf 91       	pop	r28
    408e:	1f 91       	pop	r17
    4090:	0f 91       	pop	r16
    4092:	08 95       	ret

00004094 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	ec 01       	movw	r28, r24
	free(rx_buffer);
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	9b 81       	ldd	r25, Y+3	; 0x03
    409e:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <free>
	free(tx_buffer);
    40a2:	8c 81       	ldd	r24, Y+4	; 0x04
    40a4:	9d 81       	ldd	r25, Y+5	; 0x05
    40a6:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <free>
}
    40aa:	df 91       	pop	r29
    40ac:	cf 91       	pop	r28
    40ae:	08 95       	ret

000040b0 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    40b0:	08 95       	ret

000040b2 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    40b2:	dc 01       	movw	r26, r24
    40b4:	57 96       	adiw	r26, 0x17	; 23
    40b6:	8d 91       	ld	r24, X+
    40b8:	9c 91       	ld	r25, X
    40ba:	58 97       	sbiw	r26, 0x18	; 24
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	39 f0       	breq	.+14     	; 0x40ce <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    40c0:	dc 01       	movw	r26, r24
    40c2:	ed 91       	ld	r30, X+
    40c4:	fc 91       	ld	r31, X
    40c6:	02 80       	ldd	r0, Z+2	; 0x02
    40c8:	f3 81       	ldd	r31, Z+3	; 0x03
    40ca:	e0 2d       	mov	r30, r0
    40cc:	19 95       	eicall
    40ce:	08 95       	ret

000040d0 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    40d0:	dc 01       	movw	r26, r24
    40d2:	57 96       	adiw	r26, 0x17	; 23
    40d4:	8d 91       	ld	r24, X+
    40d6:	9c 91       	ld	r25, X
    40d8:	58 97       	sbiw	r26, 0x18	; 24
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	39 f0       	breq	.+14     	; 0x40ec <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    40de:	dc 01       	movw	r26, r24
    40e0:	ed 91       	ld	r30, X+
    40e2:	fc 91       	ld	r31, X
    40e4:	04 80       	ldd	r0, Z+4	; 0x04
    40e6:	f5 81       	ldd	r31, Z+5	; 0x05
    40e8:	e0 2d       	mov	r30, r0
    40ea:	19 95       	eicall
    40ec:	08 95       	ret

000040ee <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    40ee:	2c ef       	ldi	r18, 0xFC	; 252
    40f0:	30 e2       	ldi	r19, 0x20	; 32
    40f2:	fc 01       	movw	r30, r24
    40f4:	20 83       	st	Z, r18
    40f6:	31 83       	std	Z+1, r19	; 0x01
    40f8:	08 95       	ret

000040fa <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    40fa:	cf 92       	push	r12
    40fc:	df 92       	push	r13
    40fe:	ef 92       	push	r14
    4100:	ff 92       	push	r15
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	ec 01       	movw	r28, r24
    410c:	7b 01       	movw	r14, r22
    410e:	6a 01       	movw	r12, r20
    4110:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4112:	2f 83       	std	Y+7, r18	; 0x07
    4114:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4116:	0a 87       	std	Y+10, r16	; 0x0a
    4118:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    411a:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <malloc>
    411e:	8a 83       	std	Y+2, r24	; 0x02
    4120:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4122:	c8 01       	movw	r24, r16
    4124:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <malloc>
    4128:	8c 83       	std	Y+4, r24	; 0x04
    412a:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    412c:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    412e:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    4130:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4132:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4134:	18 8a       	std	Y+16, r1	; 0x10
    4136:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4138:	1a 8a       	std	Y+18, r1	; 0x12
    413a:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    413c:	87 e0       	ldi	r24, 0x07	; 7
    413e:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    4140:	82 e0       	ldi	r24, 0x02	; 2
    4142:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4144:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4146:	ec 86       	std	Y+12, r14	; 0x0c
    4148:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    414a:	d7 01       	movw	r26, r14
    414c:	ed 91       	ld	r30, X+
    414e:	fc 91       	ld	r31, X
    4150:	04 84       	ldd	r0, Z+12	; 0x0c
    4152:	f5 85       	ldd	r31, Z+13	; 0x0d
    4154:	e0 2d       	mov	r30, r0
    4156:	41 e8       	ldi	r20, 0x81	; 129
    4158:	51 e2       	ldi	r21, 0x21	; 33
    415a:	be 01       	movw	r22, r28
    415c:	c7 01       	movw	r24, r14
    415e:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    4160:	d7 01       	movw	r26, r14
    4162:	ed 91       	ld	r30, X+
    4164:	fc 91       	ld	r31, X
    4166:	06 84       	ldd	r0, Z+14	; 0x0e
    4168:	f7 85       	ldd	r31, Z+15	; 0x0f
    416a:	e0 2d       	mov	r30, r0
    416c:	46 ee       	ldi	r20, 0xE6	; 230
    416e:	51 e2       	ldi	r21, 0x21	; 33
    4170:	be 01       	movw	r22, r28
    4172:	c7 01       	movw	r24, r14
    4174:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4176:	c1 14       	cp	r12, r1
    4178:	d1 04       	cpc	r13, r1
    417a:	19 f0       	breq	.+6      	; 0x4182 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    417c:	cf 8a       	std	Y+23, r12	; 0x17
    417e:	d8 8e       	std	Y+24, r13	; 0x18
    4180:	02 c0       	rjmp	.+4      	; 0x4186 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    4182:	cf 8b       	std	Y+23, r28	; 0x17
    4184:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    418a:	1f 91       	pop	r17
    418c:	0f 91       	pop	r16
    418e:	ff 90       	pop	r15
    4190:	ef 90       	pop	r14
    4192:	df 90       	pop	r13
    4194:	cf 90       	pop	r12
    4196:	08 95       	ret

00004198 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    4198:	2c ef       	ldi	r18, 0xFC	; 252
    419a:	30 e2       	ldi	r19, 0x20	; 32
    419c:	fc 01       	movw	r30, r24
    419e:	20 83       	st	Z, r18
    41a0:	31 83       	std	Z+1, r19	; 0x01
    41a2:	0e 94 58 20 	call	0x40b0	; 0x40b0 <_ZN16CMBEventsHandlerD1Ev>
    41a6:	08 95       	ret

000041a8 <_ZN9CMBSender13OnReceiveByteEh>:

//void CMBSender::RequestDataFromRegister(uint8_t addr, uint8_t length);
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

void CMBSender::OnReceiveByte(uint8_t data)
{
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	ec 01       	movw	r28, r24
    41ae:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    41b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	4b 30       	cpi	r20, 0x0B	; 11
    41b6:	51 05       	cpc	r21, r1
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <_ZN9CMBSender13OnReceiveByteEh+0x14>
    41ba:	a0 c0       	rjmp	.+320    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
    41bc:	fa 01       	movw	r30, r20
    41be:	88 27       	eor	r24, r24
    41c0:	ec 5e       	subi	r30, 0xEC	; 236
    41c2:	fe 4f       	sbci	r31, 0xFE	; 254
    41c4:	8f 4f       	sbci	r24, 0xFF	; 255
    41c6:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    41ca:	9a 3a       	cpi	r25, 0xAA	; 170
    41cc:	19 f4       	brne	.+6      	; 0x41d4 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    41ce:	82 e0       	ldi	r24, 0x02	; 2
    41d0:	8e 87       	std	Y+14, r24	; 0x0e
    41d2:	94 c0       	rjmp	.+296    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	8e 87       	std	Y+14, r24	; 0x0e
    41d8:	91 c0       	rjmp	.+290    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    41da:	9c 3c       	cpi	r25, 0xCC	; 204
    41dc:	19 f4       	brne	.+6      	; 0x41e4 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    41de:	83 e0       	ldi	r24, 0x03	; 3
    41e0:	8e 87       	std	Y+14, r24	; 0x0e
    41e2:	8c c0       	rjmp	.+280    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	8e 87       	std	Y+14, r24	; 0x0e
    41e8:	89 c0       	rjmp	.+274    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    41ea:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    41ec:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    41ee:	1a 8a       	std	Y+18, r1	; 0x12
    41f0:	1b 8a       	std	Y+19, r1	; 0x13
			modbus_receiver_state = rx_FrameReceive;
    41f2:	84 e0       	ldi	r24, 0x04	; 4
    41f4:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    41f6:	82 c0       	rjmp	.+260    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    41f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41fa:	ea 81       	ldd	r30, Y+2	; 0x02
    41fc:	fb 81       	ldd	r31, Y+3	; 0x03
    41fe:	e8 0f       	add	r30, r24
    4200:	f1 1d       	adc	r31, r1
    4202:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    4204:	2f 85       	ldd	r18, Y+15	; 0x0f
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4f 81       	ldd	r20, Y+7	; 0x07
    420a:	58 85       	ldd	r21, Y+8	; 0x08
    420c:	42 17       	cp	r20, r18
    420e:	53 07       	cpc	r21, r19
    4210:	18 f4       	brcc	.+6      	; 0x4218 <_ZN9CMBSender13OnReceiveByteEh+0x70>
			{
				modbus_receiver_state = rx_Error;
    4212:	89 e0       	ldi	r24, 0x09	; 9
    4214:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    4216:	72 c0       	rjmp	.+228    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4218:	2a 89       	ldd	r18, Y+18	; 0x12
    421a:	3b 89       	ldd	r19, Y+19	; 0x13
    421c:	29 27       	eor	r18, r25
    421e:	92 2f       	mov	r25, r18
    4220:	92 95       	swap	r25
    4222:	92 27       	eor	r25, r18
    4224:	09 2e       	mov	r0, r25
    4226:	96 95       	lsr	r25
    4228:	96 95       	lsr	r25
    422a:	90 25       	eor	r25, r0
    422c:	09 2e       	mov	r0, r25
    422e:	96 95       	lsr	r25
    4230:	90 25       	eor	r25, r0
    4232:	97 70       	andi	r25, 0x07	; 7
    4234:	02 2e       	mov	r0, r18
    4236:	23 2f       	mov	r18, r19
    4238:	96 95       	lsr	r25
    423a:	07 94       	ror	r0
    423c:	97 95       	ror	r25
    423e:	30 2d       	mov	r19, r0
    4240:	29 27       	eor	r18, r25
    4242:	06 94       	lsr	r0
    4244:	97 95       	ror	r25
    4246:	30 25       	eor	r19, r0
    4248:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    424a:	2a 8b       	std	Y+18, r18	; 0x12
    424c:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    424e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4250:	8f 5f       	subi	r24, 0xFF	; 255
    4252:	8f 87       	std	Y+15, r24	; 0x0f
			if (rx_buffer_pos == rx_frame_length)
    4254:	4f 85       	ldd	r20, Y+15	; 0x0f
    4256:	8e 81       	ldd	r24, Y+6	; 0x06
    4258:	48 13       	cpse	r20, r24
    425a:	50 c0       	rjmp	.+160    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    425c:	88 e0       	ldi	r24, 0x08	; 8
    425e:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4260:	e8 81       	ld	r30, Y
    4262:	f9 81       	ldd	r31, Y+1	; 0x01
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	6a 81       	ldd	r22, Y+2	; 0x02
    4268:	7b 81       	ldd	r23, Y+3	; 0x03
    426a:	01 90       	ld	r0, Z+
    426c:	f0 81       	ld	r31, Z
    426e:	e0 2d       	mov	r30, r0
    4270:	ce 01       	movw	r24, r28
    4272:	19 95       	eicall
				if (CallbackHandler != 0)
    4274:	8f 89       	ldd	r24, Y+23	; 0x17
    4276:	98 8d       	ldd	r25, Y+24	; 0x18
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	09 f4       	brne	.+2      	; 0x427e <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    427c:	3f c0       	rjmp	.+126    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    427e:	dc 01       	movw	r26, r24
    4280:	ed 91       	ld	r30, X+
    4282:	fc 91       	ld	r31, X
    4284:	4e 81       	ldd	r20, Y+6	; 0x06
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	6a 81       	ldd	r22, Y+2	; 0x02
    428a:	7b 81       	ldd	r23, Y+3	; 0x03
    428c:	01 90       	ld	r0, Z+
    428e:	f0 81       	ld	r31, Z
    4290:	e0 2d       	mov	r30, r0
    4292:	19 95       	eicall
    4294:	33 c0       	rjmp	.+102    	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    4296:	69 2f       	mov	r22, r25
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	68 8b       	std	Y+16, r22	; 0x10
    429c:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    429e:	86 e0       	ldi	r24, 0x06	; 6
    42a0:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    42a2:	2c c0       	rjmp	.+88     	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    42a4:	28 89       	ldd	r18, Y+16	; 0x10
    42a6:	39 89       	ldd	r19, Y+17	; 0x11
    42a8:	a9 01       	movw	r20, r18
    42aa:	59 2b       	or	r21, r25
    42ac:	48 8b       	std	Y+16, r20	; 0x10
    42ae:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    42b0:	2a 89       	ldd	r18, Y+18	; 0x12
    42b2:	3b 89       	ldd	r19, Y+19	; 0x13
    42b4:	42 17       	cp	r20, r18
    42b6:	53 07       	cpc	r21, r19
    42b8:	e9 f4       	brne	.+58     	; 0x42f4 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
			{
				modbus_receiver_state = rx_Complete;
    42ba:	88 e0       	ldi	r24, 0x08	; 8
    42bc:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    42be:	e8 81       	ld	r30, Y
    42c0:	f9 81       	ldd	r31, Y+1	; 0x01
    42c2:	4e 81       	ldd	r20, Y+6	; 0x06
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	6a 81       	ldd	r22, Y+2	; 0x02
    42c8:	7b 81       	ldd	r23, Y+3	; 0x03
    42ca:	01 90       	ld	r0, Z+
    42cc:	f0 81       	ld	r31, Z
    42ce:	e0 2d       	mov	r30, r0
    42d0:	ce 01       	movw	r24, r28
    42d2:	19 95       	eicall
				if (CallbackHandler != 0)
    42d4:	8f 89       	ldd	r24, Y+23	; 0x17
    42d6:	98 8d       	ldd	r25, Y+24	; 0x18
    42d8:	00 97       	sbiw	r24, 0x00	; 0
    42da:	81 f0       	breq	.+32     	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    42dc:	dc 01       	movw	r26, r24
    42de:	ed 91       	ld	r30, X+
    42e0:	fc 91       	ld	r31, X
    42e2:	4e 81       	ldd	r20, Y+6	; 0x06
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	6a 81       	ldd	r22, Y+2	; 0x02
    42e8:	7b 81       	ldd	r23, Y+3	; 0x03
    42ea:	01 90       	ld	r0, Z+
    42ec:	f0 81       	ld	r31, Z
    42ee:	e0 2d       	mov	r30, r0
    42f0:	19 95       	eicall
    42f2:	04 c0       	rjmp	.+8      	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			else
				modbus_receiver_state = rx_Error;
    42f4:	89 e0       	ldi	r24, 0x09	; 9
    42f6:	8e 87       	std	Y+14, r24	; 0x0e
    42f8:	01 c0       	rjmp	.+2      	; 0x42fc <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    42fa:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	08 95       	ret

00004302 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4308:	8c 85       	ldd	r24, Y+12	; 0x0c
    430a:	9d 85       	ldd	r25, Y+13	; 0x0d
    430c:	dc 01       	movw	r26, r24
    430e:	ed 91       	ld	r30, X+
    4310:	fc 91       	ld	r31, X
    4312:	02 80       	ldd	r0, Z+2	; 0x02
    4314:	f3 81       	ldd	r31, Z+3	; 0x03
    4316:	e0 2d       	mov	r30, r0
    4318:	19 95       	eicall
	owner->OnReceiveByte(data);
    431a:	68 2f       	mov	r22, r24
    431c:	ce 01       	movw	r24, r28
    431e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <_ZN9CMBSender13OnReceiveByteEh>
}
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	08 95       	ret

00004328 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4328:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    432a:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    432c:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    432e:	10 8a       	std	Z+16, r1	; 0x10
    4330:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4332:	12 8a       	std	Z+18, r1	; 0x12
    4334:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    4336:	16 86       	std	Z+14, r1	; 0x0e
    4338:	08 95       	ret

0000433a <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    4340:	8c 89       	ldd	r24, Y+20	; 0x14
    4342:	84 30       	cpi	r24, 0x04	; 4
    4344:	38 f4       	brcc	.+14     	; 0x4354 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    4346:	82 30       	cpi	r24, 0x02	; 2
    4348:	b8 f5       	brcc	.+110    	; 0x43b8 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    434a:	88 23       	and	r24, r24
    434c:	31 f0       	breq	.+12     	; 0x435a <_ZN9CMBSender14OnTransmitByteEv+0x20>
    434e:	81 30       	cpi	r24, 0x01	; 1
    4350:	d1 f0       	breq	.+52     	; 0x4386 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    4352:	39 c0       	rjmp	.+114    	; 0x43c6 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    4354:	85 30       	cpi	r24, 0x05	; 5
    4356:	81 f1       	breq	.+96     	; 0x43b8 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4358:	36 c0       	rjmp	.+108    	; 0x43c6 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    435e:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4360:	8c 85       	ldd	r24, Y+12	; 0x0c
    4362:	9d 85       	ldd	r25, Y+13	; 0x0d
    4364:	2d 89       	ldd	r18, Y+21	; 0x15
    4366:	dc 01       	movw	r26, r24
    4368:	ed 91       	ld	r30, X+
    436a:	fc 91       	ld	r31, X
    436c:	ac 81       	ldd	r26, Y+4	; 0x04
    436e:	bd 81       	ldd	r27, Y+5	; 0x05
    4370:	a2 0f       	add	r26, r18
    4372:	b1 1d       	adc	r27, r1
    4374:	04 80       	ldd	r0, Z+4	; 0x04
    4376:	f5 81       	ldd	r31, Z+5	; 0x05
    4378:	e0 2d       	mov	r30, r0
    437a:	6c 91       	ld	r22, X
    437c:	19 95       	eicall
			tx_buffer_pos++;
    437e:	8d 89       	ldd	r24, Y+21	; 0x15
    4380:	8f 5f       	subi	r24, 0xFF	; 255
    4382:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    4384:	20 c0       	rjmp	.+64     	; 0x43c6 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4386:	8c 85       	ldd	r24, Y+12	; 0x0c
    4388:	9d 85       	ldd	r25, Y+13	; 0x0d
    438a:	2d 89       	ldd	r18, Y+21	; 0x15
    438c:	dc 01       	movw	r26, r24
    438e:	ed 91       	ld	r30, X+
    4390:	fc 91       	ld	r31, X
    4392:	ac 81       	ldd	r26, Y+4	; 0x04
    4394:	bd 81       	ldd	r27, Y+5	; 0x05
    4396:	a2 0f       	add	r26, r18
    4398:	b1 1d       	adc	r27, r1
    439a:	04 80       	ldd	r0, Z+4	; 0x04
    439c:	f5 81       	ldd	r31, Z+5	; 0x05
    439e:	e0 2d       	mov	r30, r0
    43a0:	6c 91       	ld	r22, X
    43a2:	19 95       	eicall
			tx_buffer_pos++;
    43a4:	8d 89       	ldd	r24, Y+21	; 0x15
    43a6:	8f 5f       	subi	r24, 0xFF	; 255
    43a8:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    43aa:	9d 89       	ldd	r25, Y+21	; 0x15
    43ac:	89 85       	ldd	r24, Y+9	; 0x09
    43ae:	98 13       	cpse	r25, r24
    43b0:	0a c0       	rjmp	.+20     	; 0x43c6 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    43b2:	83 e0       	ldi	r24, 0x03	; 3
    43b4:	8c 8b       	std	Y+20, r24	; 0x14
    43b6:	07 c0       	rjmp	.+14     	; 0x43c6 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    43b8:	8e 89       	ldd	r24, Y+22	; 0x16
    43ba:	88 23       	and	r24, r24
    43bc:	19 f0       	breq	.+6      	; 0x43c4 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    43be:	ce 01       	movw	r24, r28
    43c0:	0e 94 94 21 	call	0x4328	; 0x4328 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    43c4:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	08 95       	ret

000043cc <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    43cc:	0e 94 9d 21 	call	0x433a	; 0x433a <_ZN9CMBSender14OnTransmitByteEv>
    43d0:	08 95       	ret

000043d2 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    43d2:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    43d4:	06 c0       	rjmp	.+12     	; 0x43e2 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    43d6:	86 85       	ldd	r24, Z+14	; 0x0e
    43d8:	89 30       	cpi	r24, 0x09	; 9
    43da:	41 f0       	breq	.+16     	; 0x43ec <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    43dc:	86 85       	ldd	r24, Z+14	; 0x0e
    43de:	8a 30       	cpi	r24, 0x0A	; 10
    43e0:	39 f0       	breq	.+14     	; 0x43f0 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    43e2:	86 85       	ldd	r24, Z+14	; 0x0e
    43e4:	88 30       	cpi	r24, 0x08	; 8
    43e6:	b9 f7       	brne	.-18     	; 0x43d6 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    43ec:	82 e0       	ldi	r24, 0x02	; 2
    43ee:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    43f0:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    43f2:	08 95       	ret

000043f4 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    43f4:	fc 01       	movw	r30, r24
    43f6:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    43f8:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    43fa:	0e 94 9d 21 	call	0x433a	; 0x433a <_ZN9CMBSender14OnTransmitByteEv>
    43fe:	08 95       	ret

00004400 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4406:	e8 81       	ld	r30, Y
    4408:	f9 81       	ldd	r31, Y+1	; 0x01
    440a:	02 84       	ldd	r0, Z+10	; 0x0a
    440c:	f3 85       	ldd	r31, Z+11	; 0x0b
    440e:	e0 2d       	mov	r30, r0
    4410:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4412:	ce 01       	movw	r24, r28
    4414:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	08 95       	ret

0000441e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    4424:	e8 81       	ld	r30, Y
    4426:	f9 81       	ldd	r31, Y+1	; 0x01
    4428:	06 84       	ldd	r0, Z+14	; 0x0e
    442a:	f7 85       	ldd	r31, Z+15	; 0x0f
    442c:	e0 2d       	mov	r30, r0
    442e:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    4430:	ce 01       	movw	r24, r28
    4432:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4436:	df 91       	pop	r29
    4438:	cf 91       	pop	r28
    443a:	08 95       	ret

0000443c <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    443c:	cf 93       	push	r28
    443e:	df 93       	push	r29
    4440:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    4442:	e8 81       	ld	r30, Y
    4444:	f9 81       	ldd	r31, Y+1	; 0x01
    4446:	04 84       	ldd	r0, Z+12	; 0x0c
    4448:	f5 85       	ldd	r31, Z+13	; 0x0d
    444a:	e0 2d       	mov	r30, r0
    444c:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    444e:	ce 01       	movw	r24, r28
    4450:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4454:	df 91       	pop	r29
    4456:	cf 91       	pop	r28
    4458:	08 95       	ret

0000445a <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    445a:	cf 93       	push	r28
    445c:	df 93       	push	r29
    445e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    4460:	e8 81       	ld	r30, Y
    4462:	f9 81       	ldd	r31, Y+1	; 0x01
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	00 88       	ldd	r0, Z+16	; 0x10
    4468:	f1 89       	ldd	r31, Z+17	; 0x11
    446a:	e0 2d       	mov	r30, r0
    446c:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    446e:	ce 01       	movw	r24, r28
    4470:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4474:	df 91       	pop	r29
    4476:	cf 91       	pop	r28
    4478:	08 95       	ret

0000447a <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    447a:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    447c:	06 c0       	rjmp	.+12     	; 0x448a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    447e:	84 89       	ldd	r24, Z+20	; 0x14
    4480:	84 30       	cpi	r24, 0x04	; 4
    4482:	41 f0       	breq	.+16     	; 0x4494 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    4484:	84 89       	ldd	r24, Z+20	; 0x14
    4486:	85 30       	cpi	r24, 0x05	; 5
    4488:	39 f0       	breq	.+14     	; 0x4498 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    448a:	84 89       	ldd	r24, Z+20	; 0x14
    448c:	83 30       	cpi	r24, 0x03	; 3
    448e:	b9 f7       	brne	.-18     	; 0x447e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    4498:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    449a:	08 95       	ret

0000449c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    449c:	21 e0       	ldi	r18, 0x01	; 1
    449e:	fc 01       	movw	r30, r24
    44a0:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    44a2:	0e 94 1e 22 	call	0x443c	; 0x443c <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    44a6:	08 95       	ret

000044a8 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    44a8:	21 e0       	ldi	r18, 0x01	; 1
    44aa:	fc 01       	movw	r30, r24
    44ac:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    44ae:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    44b2:	08 95       	ret

000044b4 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	8c 01       	movw	r16, r24
    44be:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    44c0:	98 81       	ld	r25, Y
    44c2:	91 38       	cpi	r25, 0x81	; 129
    44c4:	69 f4       	brne	.+26     	; 0x44e0 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    44c6:	d8 01       	movw	r26, r16
    44c8:	ed 91       	ld	r30, X+
    44ca:	fc 91       	ld	r31, X
    44cc:	04 80       	ldd	r0, Z+4	; 0x04
    44ce:	f5 81       	ldd	r31, Z+5	; 0x05
    44d0:	e0 2d       	mov	r30, r0
    44d2:	2a 81       	ldd	r18, Y+2	; 0x02
    44d4:	ab 01       	movw	r20, r22
    44d6:	4d 5f       	subi	r20, 0xFD	; 253
    44d8:	5f 4f       	sbci	r21, 0xFF	; 255
    44da:	69 81       	ldd	r22, Y+1	; 0x01
    44dc:	c8 01       	movw	r24, r16
    44de:	19 95       	eicall
	}
	if (data[0] == 0x83)
    44e0:	98 81       	ld	r25, Y
    44e2:	93 38       	cpi	r25, 0x83	; 131
    44e4:	99 f4       	brne	.+38     	; 0x450c <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    44e6:	d8 01       	movw	r26, r16
    44e8:	ed 91       	ld	r30, X+
    44ea:	fc 91       	ld	r31, X
    44ec:	2b 81       	ldd	r18, Y+3	; 0x03
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	ae 01       	movw	r20, r28
    44f2:	4c 5f       	subi	r20, 0xFC	; 252
    44f4:	5f 4f       	sbci	r21, 0xFF	; 255
    44f6:	69 81       	ldd	r22, Y+1	; 0x01
    44f8:	70 e0       	ldi	r23, 0x00	; 0
    44fa:	76 2f       	mov	r23, r22
    44fc:	66 27       	eor	r22, r22
    44fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4500:	68 2b       	or	r22, r24
    4502:	02 80       	ldd	r0, Z+2	; 0x02
    4504:	f3 81       	ldd	r31, Z+3	; 0x03
    4506:	e0 2d       	mov	r30, r0
    4508:	c8 01       	movw	r24, r16
    450a:	19 95       	eicall
	}
}
    450c:	df 91       	pop	r29
    450e:	cf 91       	pop	r28
    4510:	1f 91       	pop	r17
    4512:	0f 91       	pop	r16
    4514:	08 95       	ret

00004516 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4516:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <_ZN9CMBSender18ProcessTransactionEPhj>
    451a:	08 95       	ret

0000451c <__subsf3>:
    451c:	50 58       	subi	r21, 0x80	; 128

0000451e <__addsf3>:
    451e:	bb 27       	eor	r27, r27
    4520:	aa 27       	eor	r26, r26
    4522:	0e 94 a6 22 	call	0x454c	; 0x454c <__addsf3x>
    4526:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__fp_round>
    452a:	0e 94 33 23 	call	0x4666	; 0x4666 <__fp_pscA>
    452e:	38 f0       	brcs	.+14     	; 0x453e <__addsf3+0x20>
    4530:	0e 94 3a 23 	call	0x4674	; 0x4674 <__fp_pscB>
    4534:	20 f0       	brcs	.+8      	; 0x453e <__addsf3+0x20>
    4536:	39 f4       	brne	.+14     	; 0x4546 <__addsf3+0x28>
    4538:	9f 3f       	cpi	r25, 0xFF	; 255
    453a:	19 f4       	brne	.+6      	; 0x4542 <__addsf3+0x24>
    453c:	26 f4       	brtc	.+8      	; 0x4546 <__addsf3+0x28>
    453e:	0c 94 30 23 	jmp	0x4660	; 0x4660 <__fp_nan>
    4542:	0e f4       	brtc	.+2      	; 0x4546 <__addsf3+0x28>
    4544:	e0 95       	com	r30
    4546:	e7 fb       	bst	r30, 7
    4548:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__fp_inf>

0000454c <__addsf3x>:
    454c:	e9 2f       	mov	r30, r25
    454e:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__fp_split3>
    4552:	58 f3       	brcs	.-42     	; 0x452a <__addsf3+0xc>
    4554:	ba 17       	cp	r27, r26
    4556:	62 07       	cpc	r22, r18
    4558:	73 07       	cpc	r23, r19
    455a:	84 07       	cpc	r24, r20
    455c:	95 07       	cpc	r25, r21
    455e:	20 f0       	brcs	.+8      	; 0x4568 <__addsf3x+0x1c>
    4560:	79 f4       	brne	.+30     	; 0x4580 <__addsf3x+0x34>
    4562:	a6 f5       	brtc	.+104    	; 0x45cc <__addsf3x+0x80>
    4564:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__fp_zero>
    4568:	0e f4       	brtc	.+2      	; 0x456c <__addsf3x+0x20>
    456a:	e0 95       	com	r30
    456c:	0b 2e       	mov	r0, r27
    456e:	ba 2f       	mov	r27, r26
    4570:	a0 2d       	mov	r26, r0
    4572:	0b 01       	movw	r0, r22
    4574:	b9 01       	movw	r22, r18
    4576:	90 01       	movw	r18, r0
    4578:	0c 01       	movw	r0, r24
    457a:	ca 01       	movw	r24, r20
    457c:	a0 01       	movw	r20, r0
    457e:	11 24       	eor	r1, r1
    4580:	ff 27       	eor	r31, r31
    4582:	59 1b       	sub	r21, r25
    4584:	99 f0       	breq	.+38     	; 0x45ac <__addsf3x+0x60>
    4586:	59 3f       	cpi	r21, 0xF9	; 249
    4588:	50 f4       	brcc	.+20     	; 0x459e <__addsf3x+0x52>
    458a:	50 3e       	cpi	r21, 0xE0	; 224
    458c:	68 f1       	brcs	.+90     	; 0x45e8 <__addsf3x+0x9c>
    458e:	1a 16       	cp	r1, r26
    4590:	f0 40       	sbci	r31, 0x00	; 0
    4592:	a2 2f       	mov	r26, r18
    4594:	23 2f       	mov	r18, r19
    4596:	34 2f       	mov	r19, r20
    4598:	44 27       	eor	r20, r20
    459a:	58 5f       	subi	r21, 0xF8	; 248
    459c:	f3 cf       	rjmp	.-26     	; 0x4584 <__addsf3x+0x38>
    459e:	46 95       	lsr	r20
    45a0:	37 95       	ror	r19
    45a2:	27 95       	ror	r18
    45a4:	a7 95       	ror	r26
    45a6:	f0 40       	sbci	r31, 0x00	; 0
    45a8:	53 95       	inc	r21
    45aa:	c9 f7       	brne	.-14     	; 0x459e <__addsf3x+0x52>
    45ac:	7e f4       	brtc	.+30     	; 0x45cc <__addsf3x+0x80>
    45ae:	1f 16       	cp	r1, r31
    45b0:	ba 0b       	sbc	r27, r26
    45b2:	62 0b       	sbc	r22, r18
    45b4:	73 0b       	sbc	r23, r19
    45b6:	84 0b       	sbc	r24, r20
    45b8:	ba f0       	brmi	.+46     	; 0x45e8 <__addsf3x+0x9c>
    45ba:	91 50       	subi	r25, 0x01	; 1
    45bc:	a1 f0       	breq	.+40     	; 0x45e6 <__addsf3x+0x9a>
    45be:	ff 0f       	add	r31, r31
    45c0:	bb 1f       	adc	r27, r27
    45c2:	66 1f       	adc	r22, r22
    45c4:	77 1f       	adc	r23, r23
    45c6:	88 1f       	adc	r24, r24
    45c8:	c2 f7       	brpl	.-16     	; 0x45ba <__addsf3x+0x6e>
    45ca:	0e c0       	rjmp	.+28     	; 0x45e8 <__addsf3x+0x9c>
    45cc:	ba 0f       	add	r27, r26
    45ce:	62 1f       	adc	r22, r18
    45d0:	73 1f       	adc	r23, r19
    45d2:	84 1f       	adc	r24, r20
    45d4:	48 f4       	brcc	.+18     	; 0x45e8 <__addsf3x+0x9c>
    45d6:	87 95       	ror	r24
    45d8:	77 95       	ror	r23
    45da:	67 95       	ror	r22
    45dc:	b7 95       	ror	r27
    45de:	f7 95       	ror	r31
    45e0:	9e 3f       	cpi	r25, 0xFE	; 254
    45e2:	08 f0       	brcs	.+2      	; 0x45e6 <__addsf3x+0x9a>
    45e4:	b0 cf       	rjmp	.-160    	; 0x4546 <__addsf3+0x28>
    45e6:	93 95       	inc	r25
    45e8:	88 0f       	add	r24, r24
    45ea:	08 f0       	brcs	.+2      	; 0x45ee <__addsf3x+0xa2>
    45ec:	99 27       	eor	r25, r25
    45ee:	ee 0f       	add	r30, r30
    45f0:	97 95       	ror	r25
    45f2:	87 95       	ror	r24
    45f4:	08 95       	ret

000045f6 <__fixunssfsi>:
    45f6:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <__fp_splitA>
    45fa:	88 f0       	brcs	.+34     	; 0x461e <__fixunssfsi+0x28>
    45fc:	9f 57       	subi	r25, 0x7F	; 127
    45fe:	98 f0       	brcs	.+38     	; 0x4626 <__fixunssfsi+0x30>
    4600:	b9 2f       	mov	r27, r25
    4602:	99 27       	eor	r25, r25
    4604:	b7 51       	subi	r27, 0x17	; 23
    4606:	b0 f0       	brcs	.+44     	; 0x4634 <__fixunssfsi+0x3e>
    4608:	e1 f0       	breq	.+56     	; 0x4642 <__fixunssfsi+0x4c>
    460a:	66 0f       	add	r22, r22
    460c:	77 1f       	adc	r23, r23
    460e:	88 1f       	adc	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	1a f0       	brmi	.+6      	; 0x461a <__fixunssfsi+0x24>
    4614:	ba 95       	dec	r27
    4616:	c9 f7       	brne	.-14     	; 0x460a <__fixunssfsi+0x14>
    4618:	14 c0       	rjmp	.+40     	; 0x4642 <__fixunssfsi+0x4c>
    461a:	b1 30       	cpi	r27, 0x01	; 1
    461c:	91 f0       	breq	.+36     	; 0x4642 <__fixunssfsi+0x4c>
    461e:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__fp_zero>
    4622:	b1 e0       	ldi	r27, 0x01	; 1
    4624:	08 95       	ret
    4626:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__fp_zero>
    462a:	67 2f       	mov	r22, r23
    462c:	78 2f       	mov	r23, r24
    462e:	88 27       	eor	r24, r24
    4630:	b8 5f       	subi	r27, 0xF8	; 248
    4632:	39 f0       	breq	.+14     	; 0x4642 <__fixunssfsi+0x4c>
    4634:	b9 3f       	cpi	r27, 0xF9	; 249
    4636:	cc f3       	brlt	.-14     	; 0x462a <__fixunssfsi+0x34>
    4638:	86 95       	lsr	r24
    463a:	77 95       	ror	r23
    463c:	67 95       	ror	r22
    463e:	b3 95       	inc	r27
    4640:	d9 f7       	brne	.-10     	; 0x4638 <__fixunssfsi+0x42>
    4642:	3e f4       	brtc	.+14     	; 0x4652 <__fixunssfsi+0x5c>
    4644:	90 95       	com	r25
    4646:	80 95       	com	r24
    4648:	70 95       	com	r23
    464a:	61 95       	neg	r22
    464c:	7f 4f       	sbci	r23, 0xFF	; 255
    464e:	8f 4f       	sbci	r24, 0xFF	; 255
    4650:	9f 4f       	sbci	r25, 0xFF	; 255
    4652:	08 95       	ret

00004654 <__fp_inf>:
    4654:	97 f9       	bld	r25, 7
    4656:	9f 67       	ori	r25, 0x7F	; 127
    4658:	80 e8       	ldi	r24, 0x80	; 128
    465a:	70 e0       	ldi	r23, 0x00	; 0
    465c:	60 e0       	ldi	r22, 0x00	; 0
    465e:	08 95       	ret

00004660 <__fp_nan>:
    4660:	9f ef       	ldi	r25, 0xFF	; 255
    4662:	80 ec       	ldi	r24, 0xC0	; 192
    4664:	08 95       	ret

00004666 <__fp_pscA>:
    4666:	00 24       	eor	r0, r0
    4668:	0a 94       	dec	r0
    466a:	16 16       	cp	r1, r22
    466c:	17 06       	cpc	r1, r23
    466e:	18 06       	cpc	r1, r24
    4670:	09 06       	cpc	r0, r25
    4672:	08 95       	ret

00004674 <__fp_pscB>:
    4674:	00 24       	eor	r0, r0
    4676:	0a 94       	dec	r0
    4678:	12 16       	cp	r1, r18
    467a:	13 06       	cpc	r1, r19
    467c:	14 06       	cpc	r1, r20
    467e:	05 06       	cpc	r0, r21
    4680:	08 95       	ret

00004682 <__fp_round>:
    4682:	09 2e       	mov	r0, r25
    4684:	03 94       	inc	r0
    4686:	00 0c       	add	r0, r0
    4688:	11 f4       	brne	.+4      	; 0x468e <__fp_round+0xc>
    468a:	88 23       	and	r24, r24
    468c:	52 f0       	brmi	.+20     	; 0x46a2 <__fp_round+0x20>
    468e:	bb 0f       	add	r27, r27
    4690:	40 f4       	brcc	.+16     	; 0x46a2 <__fp_round+0x20>
    4692:	bf 2b       	or	r27, r31
    4694:	11 f4       	brne	.+4      	; 0x469a <__fp_round+0x18>
    4696:	60 ff       	sbrs	r22, 0
    4698:	04 c0       	rjmp	.+8      	; 0x46a2 <__fp_round+0x20>
    469a:	6f 5f       	subi	r22, 0xFF	; 255
    469c:	7f 4f       	sbci	r23, 0xFF	; 255
    469e:	8f 4f       	sbci	r24, 0xFF	; 255
    46a0:	9f 4f       	sbci	r25, 0xFF	; 255
    46a2:	08 95       	ret

000046a4 <__fp_split3>:
    46a4:	57 fd       	sbrc	r21, 7
    46a6:	90 58       	subi	r25, 0x80	; 128
    46a8:	44 0f       	add	r20, r20
    46aa:	55 1f       	adc	r21, r21
    46ac:	59 f0       	breq	.+22     	; 0x46c4 <__fp_splitA+0x10>
    46ae:	5f 3f       	cpi	r21, 0xFF	; 255
    46b0:	71 f0       	breq	.+28     	; 0x46ce <__fp_splitA+0x1a>
    46b2:	47 95       	ror	r20

000046b4 <__fp_splitA>:
    46b4:	88 0f       	add	r24, r24
    46b6:	97 fb       	bst	r25, 7
    46b8:	99 1f       	adc	r25, r25
    46ba:	61 f0       	breq	.+24     	; 0x46d4 <__fp_splitA+0x20>
    46bc:	9f 3f       	cpi	r25, 0xFF	; 255
    46be:	79 f0       	breq	.+30     	; 0x46de <__fp_splitA+0x2a>
    46c0:	87 95       	ror	r24
    46c2:	08 95       	ret
    46c4:	12 16       	cp	r1, r18
    46c6:	13 06       	cpc	r1, r19
    46c8:	14 06       	cpc	r1, r20
    46ca:	55 1f       	adc	r21, r21
    46cc:	f2 cf       	rjmp	.-28     	; 0x46b2 <__fp_split3+0xe>
    46ce:	46 95       	lsr	r20
    46d0:	f1 df       	rcall	.-30     	; 0x46b4 <__fp_splitA>
    46d2:	08 c0       	rjmp	.+16     	; 0x46e4 <__fp_splitA+0x30>
    46d4:	16 16       	cp	r1, r22
    46d6:	17 06       	cpc	r1, r23
    46d8:	18 06       	cpc	r1, r24
    46da:	99 1f       	adc	r25, r25
    46dc:	f1 cf       	rjmp	.-30     	; 0x46c0 <__fp_splitA+0xc>
    46de:	86 95       	lsr	r24
    46e0:	71 05       	cpc	r23, r1
    46e2:	61 05       	cpc	r22, r1
    46e4:	08 94       	sec
    46e6:	08 95       	ret

000046e8 <__fp_zero>:
    46e8:	e8 94       	clt

000046ea <__fp_szero>:
    46ea:	bb 27       	eor	r27, r27
    46ec:	66 27       	eor	r22, r22
    46ee:	77 27       	eor	r23, r23
    46f0:	cb 01       	movw	r24, r22
    46f2:	97 f9       	bld	r25, 7
    46f4:	08 95       	ret

000046f6 <__gesf2>:
    46f6:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fp_cmp>
    46fa:	08 f4       	brcc	.+2      	; 0x46fe <__gesf2+0x8>
    46fc:	8f ef       	ldi	r24, 0xFF	; 255
    46fe:	08 95       	ret

00004700 <__mulsf3>:
    4700:	0e 94 93 23 	call	0x4726	; 0x4726 <__mulsf3x>
    4704:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__fp_round>
    4708:	0e 94 33 23 	call	0x4666	; 0x4666 <__fp_pscA>
    470c:	38 f0       	brcs	.+14     	; 0x471c <__mulsf3+0x1c>
    470e:	0e 94 3a 23 	call	0x4674	; 0x4674 <__fp_pscB>
    4712:	20 f0       	brcs	.+8      	; 0x471c <__mulsf3+0x1c>
    4714:	95 23       	and	r25, r21
    4716:	11 f0       	breq	.+4      	; 0x471c <__mulsf3+0x1c>
    4718:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__fp_inf>
    471c:	0c 94 30 23 	jmp	0x4660	; 0x4660 <__fp_nan>
    4720:	11 24       	eor	r1, r1
    4722:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__fp_szero>

00004726 <__mulsf3x>:
    4726:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__fp_split3>
    472a:	70 f3       	brcs	.-36     	; 0x4708 <__mulsf3+0x8>

0000472c <__mulsf3_pse>:
    472c:	95 9f       	mul	r25, r21
    472e:	c1 f3       	breq	.-16     	; 0x4720 <__mulsf3+0x20>
    4730:	95 0f       	add	r25, r21
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	55 1f       	adc	r21, r21
    4736:	62 9f       	mul	r22, r18
    4738:	f0 01       	movw	r30, r0
    473a:	72 9f       	mul	r23, r18
    473c:	bb 27       	eor	r27, r27
    473e:	f0 0d       	add	r31, r0
    4740:	b1 1d       	adc	r27, r1
    4742:	63 9f       	mul	r22, r19
    4744:	aa 27       	eor	r26, r26
    4746:	f0 0d       	add	r31, r0
    4748:	b1 1d       	adc	r27, r1
    474a:	aa 1f       	adc	r26, r26
    474c:	64 9f       	mul	r22, r20
    474e:	66 27       	eor	r22, r22
    4750:	b0 0d       	add	r27, r0
    4752:	a1 1d       	adc	r26, r1
    4754:	66 1f       	adc	r22, r22
    4756:	82 9f       	mul	r24, r18
    4758:	22 27       	eor	r18, r18
    475a:	b0 0d       	add	r27, r0
    475c:	a1 1d       	adc	r26, r1
    475e:	62 1f       	adc	r22, r18
    4760:	73 9f       	mul	r23, r19
    4762:	b0 0d       	add	r27, r0
    4764:	a1 1d       	adc	r26, r1
    4766:	62 1f       	adc	r22, r18
    4768:	83 9f       	mul	r24, r19
    476a:	a0 0d       	add	r26, r0
    476c:	61 1d       	adc	r22, r1
    476e:	22 1f       	adc	r18, r18
    4770:	74 9f       	mul	r23, r20
    4772:	33 27       	eor	r19, r19
    4774:	a0 0d       	add	r26, r0
    4776:	61 1d       	adc	r22, r1
    4778:	23 1f       	adc	r18, r19
    477a:	84 9f       	mul	r24, r20
    477c:	60 0d       	add	r22, r0
    477e:	21 1d       	adc	r18, r1
    4780:	82 2f       	mov	r24, r18
    4782:	76 2f       	mov	r23, r22
    4784:	6a 2f       	mov	r22, r26
    4786:	11 24       	eor	r1, r1
    4788:	9f 57       	subi	r25, 0x7F	; 127
    478a:	50 40       	sbci	r21, 0x00	; 0
    478c:	9a f0       	brmi	.+38     	; 0x47b4 <__mulsf3_pse+0x88>
    478e:	f1 f0       	breq	.+60     	; 0x47cc <__mulsf3_pse+0xa0>
    4790:	88 23       	and	r24, r24
    4792:	4a f0       	brmi	.+18     	; 0x47a6 <__mulsf3_pse+0x7a>
    4794:	ee 0f       	add	r30, r30
    4796:	ff 1f       	adc	r31, r31
    4798:	bb 1f       	adc	r27, r27
    479a:	66 1f       	adc	r22, r22
    479c:	77 1f       	adc	r23, r23
    479e:	88 1f       	adc	r24, r24
    47a0:	91 50       	subi	r25, 0x01	; 1
    47a2:	50 40       	sbci	r21, 0x00	; 0
    47a4:	a9 f7       	brne	.-22     	; 0x4790 <__mulsf3_pse+0x64>
    47a6:	9e 3f       	cpi	r25, 0xFE	; 254
    47a8:	51 05       	cpc	r21, r1
    47aa:	80 f0       	brcs	.+32     	; 0x47cc <__mulsf3_pse+0xa0>
    47ac:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__fp_inf>
    47b0:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__fp_szero>
    47b4:	5f 3f       	cpi	r21, 0xFF	; 255
    47b6:	e4 f3       	brlt	.-8      	; 0x47b0 <__mulsf3_pse+0x84>
    47b8:	98 3e       	cpi	r25, 0xE8	; 232
    47ba:	d4 f3       	brlt	.-12     	; 0x47b0 <__mulsf3_pse+0x84>
    47bc:	86 95       	lsr	r24
    47be:	77 95       	ror	r23
    47c0:	67 95       	ror	r22
    47c2:	b7 95       	ror	r27
    47c4:	f7 95       	ror	r31
    47c6:	e7 95       	ror	r30
    47c8:	9f 5f       	subi	r25, 0xFF	; 255
    47ca:	c1 f7       	brne	.-16     	; 0x47bc <__mulsf3_pse+0x90>
    47cc:	fe 2b       	or	r31, r30
    47ce:	88 0f       	add	r24, r24
    47d0:	91 1d       	adc	r25, r1
    47d2:	96 95       	lsr	r25
    47d4:	87 95       	ror	r24
    47d6:	97 f9       	bld	r25, 7
    47d8:	08 95       	ret

000047da <sin>:
    47da:	9f 93       	push	r25
    47dc:	0e 94 1b 24 	call	0x4836	; 0x4836 <__fp_rempio2>
    47e0:	0f 90       	pop	r0
    47e2:	07 fc       	sbrc	r0, 7
    47e4:	ee 5f       	subi	r30, 0xFE	; 254
    47e6:	0c 94 44 24 	jmp	0x4888	; 0x4888 <__fp_sinus>

000047ea <__fp_cmp>:
    47ea:	99 0f       	add	r25, r25
    47ec:	00 08       	sbc	r0, r0
    47ee:	55 0f       	add	r21, r21
    47f0:	aa 0b       	sbc	r26, r26
    47f2:	e0 e8       	ldi	r30, 0x80	; 128
    47f4:	fe ef       	ldi	r31, 0xFE	; 254
    47f6:	16 16       	cp	r1, r22
    47f8:	17 06       	cpc	r1, r23
    47fa:	e8 07       	cpc	r30, r24
    47fc:	f9 07       	cpc	r31, r25
    47fe:	c0 f0       	brcs	.+48     	; 0x4830 <__fp_cmp+0x46>
    4800:	12 16       	cp	r1, r18
    4802:	13 06       	cpc	r1, r19
    4804:	e4 07       	cpc	r30, r20
    4806:	f5 07       	cpc	r31, r21
    4808:	98 f0       	brcs	.+38     	; 0x4830 <__fp_cmp+0x46>
    480a:	62 1b       	sub	r22, r18
    480c:	73 0b       	sbc	r23, r19
    480e:	84 0b       	sbc	r24, r20
    4810:	95 0b       	sbc	r25, r21
    4812:	39 f4       	brne	.+14     	; 0x4822 <__fp_cmp+0x38>
    4814:	0a 26       	eor	r0, r26
    4816:	61 f0       	breq	.+24     	; 0x4830 <__fp_cmp+0x46>
    4818:	23 2b       	or	r18, r19
    481a:	24 2b       	or	r18, r20
    481c:	25 2b       	or	r18, r21
    481e:	21 f4       	brne	.+8      	; 0x4828 <__fp_cmp+0x3e>
    4820:	08 95       	ret
    4822:	0a 26       	eor	r0, r26
    4824:	09 f4       	brne	.+2      	; 0x4828 <__fp_cmp+0x3e>
    4826:	a1 40       	sbci	r26, 0x01	; 1
    4828:	a6 95       	lsr	r26
    482a:	8f ef       	ldi	r24, 0xFF	; 255
    482c:	81 1d       	adc	r24, r1
    482e:	81 1d       	adc	r24, r1
    4830:	08 95       	ret
    4832:	0c 94 30 23 	jmp	0x4660	; 0x4660 <__fp_nan>

00004836 <__fp_rempio2>:
    4836:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <__fp_splitA>
    483a:	d8 f3       	brcs	.-10     	; 0x4832 <__fp_cmp+0x48>
    483c:	e8 94       	clt
    483e:	e0 e0       	ldi	r30, 0x00	; 0
    4840:	bb 27       	eor	r27, r27
    4842:	9f 57       	subi	r25, 0x7F	; 127
    4844:	f0 f0       	brcs	.+60     	; 0x4882 <__fp_rempio2+0x4c>
    4846:	2a ed       	ldi	r18, 0xDA	; 218
    4848:	3f e0       	ldi	r19, 0x0F	; 15
    484a:	49 ec       	ldi	r20, 0xC9	; 201
    484c:	06 c0       	rjmp	.+12     	; 0x485a <__fp_rempio2+0x24>
    484e:	ee 0f       	add	r30, r30
    4850:	bb 0f       	add	r27, r27
    4852:	66 1f       	adc	r22, r22
    4854:	77 1f       	adc	r23, r23
    4856:	88 1f       	adc	r24, r24
    4858:	28 f0       	brcs	.+10     	; 0x4864 <__fp_rempio2+0x2e>
    485a:	b2 3a       	cpi	r27, 0xA2	; 162
    485c:	62 07       	cpc	r22, r18
    485e:	73 07       	cpc	r23, r19
    4860:	84 07       	cpc	r24, r20
    4862:	28 f0       	brcs	.+10     	; 0x486e <__fp_rempio2+0x38>
    4864:	b2 5a       	subi	r27, 0xA2	; 162
    4866:	62 0b       	sbc	r22, r18
    4868:	73 0b       	sbc	r23, r19
    486a:	84 0b       	sbc	r24, r20
    486c:	e3 95       	inc	r30
    486e:	9a 95       	dec	r25
    4870:	72 f7       	brpl	.-36     	; 0x484e <__fp_rempio2+0x18>
    4872:	80 38       	cpi	r24, 0x80	; 128
    4874:	30 f4       	brcc	.+12     	; 0x4882 <__fp_rempio2+0x4c>
    4876:	9a 95       	dec	r25
    4878:	bb 0f       	add	r27, r27
    487a:	66 1f       	adc	r22, r22
    487c:	77 1f       	adc	r23, r23
    487e:	88 1f       	adc	r24, r24
    4880:	d2 f7       	brpl	.-12     	; 0x4876 <__fp_rempio2+0x40>
    4882:	90 48       	sbci	r25, 0x80	; 128
    4884:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__fp_mpack_finite>

00004888 <__fp_sinus>:
    4888:	ef 93       	push	r30
    488a:	e0 ff       	sbrs	r30, 0
    488c:	07 c0       	rjmp	.+14     	; 0x489c <__fp_sinus+0x14>
    488e:	a2 ea       	ldi	r26, 0xA2	; 162
    4890:	2a ed       	ldi	r18, 0xDA	; 218
    4892:	3f e0       	ldi	r19, 0x0F	; 15
    4894:	49 ec       	ldi	r20, 0xC9	; 201
    4896:	5f eb       	ldi	r21, 0xBF	; 191
    4898:	0e 94 a6 22 	call	0x454c	; 0x454c <__addsf3x>
    489c:	0e 94 41 23 	call	0x4682	; 0x4682 <__fp_round>
    48a0:	0f 90       	pop	r0
    48a2:	03 94       	inc	r0
    48a4:	01 fc       	sbrc	r0, 1
    48a6:	90 58       	subi	r25, 0x80	; 128
    48a8:	ee e3       	ldi	r30, 0x3E	; 62
    48aa:	f2 e0       	ldi	r31, 0x02	; 2
    48ac:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__fp_powsodd>

000048b0 <__fp_mpack>:
    48b0:	9f 3f       	cpi	r25, 0xFF	; 255
    48b2:	31 f0       	breq	.+12     	; 0x48c0 <__fp_mpack_finite+0xc>

000048b4 <__fp_mpack_finite>:
    48b4:	91 50       	subi	r25, 0x01	; 1
    48b6:	20 f4       	brcc	.+8      	; 0x48c0 <__fp_mpack_finite+0xc>
    48b8:	87 95       	ror	r24
    48ba:	77 95       	ror	r23
    48bc:	67 95       	ror	r22
    48be:	b7 95       	ror	r27
    48c0:	88 0f       	add	r24, r24
    48c2:	91 1d       	adc	r25, r1
    48c4:	96 95       	lsr	r25
    48c6:	87 95       	ror	r24
    48c8:	97 f9       	bld	r25, 7
    48ca:	08 95       	ret

000048cc <__fp_powsodd>:
    48cc:	9f 93       	push	r25
    48ce:	8f 93       	push	r24
    48d0:	7f 93       	push	r23
    48d2:	6f 93       	push	r22
    48d4:	ff 93       	push	r31
    48d6:	ef 93       	push	r30
    48d8:	9b 01       	movw	r18, r22
    48da:	ac 01       	movw	r20, r24
    48dc:	0e 94 80 23 	call	0x4700	; 0x4700 <__mulsf3>
    48e0:	ef 91       	pop	r30
    48e2:	ff 91       	pop	r31
    48e4:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__fp_powser>
    48e8:	2f 91       	pop	r18
    48ea:	3f 91       	pop	r19
    48ec:	4f 91       	pop	r20
    48ee:	5f 91       	pop	r21
    48f0:	0c 94 80 23 	jmp	0x4700	; 0x4700 <__mulsf3>

000048f4 <__fp_powser>:
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	1f 93       	push	r17
    48fa:	0f 93       	push	r16
    48fc:	ff 92       	push	r15
    48fe:	ef 92       	push	r14
    4900:	df 92       	push	r13
    4902:	7b 01       	movw	r14, r22
    4904:	8c 01       	movw	r16, r24
    4906:	68 94       	set
    4908:	06 c0       	rjmp	.+12     	; 0x4916 <__fp_powser+0x22>
    490a:	da 2e       	mov	r13, r26
    490c:	ef 01       	movw	r28, r30
    490e:	0e 94 93 23 	call	0x4726	; 0x4726 <__mulsf3x>
    4912:	fe 01       	movw	r30, r28
    4914:	e8 94       	clt
    4916:	a5 91       	lpm	r26, Z+
    4918:	25 91       	lpm	r18, Z+
    491a:	35 91       	lpm	r19, Z+
    491c:	45 91       	lpm	r20, Z+
    491e:	55 91       	lpm	r21, Z+
    4920:	a6 f3       	brts	.-24     	; 0x490a <__fp_powser+0x16>
    4922:	ef 01       	movw	r28, r30
    4924:	0e 94 a6 22 	call	0x454c	; 0x454c <__addsf3x>
    4928:	fe 01       	movw	r30, r28
    492a:	97 01       	movw	r18, r14
    492c:	a8 01       	movw	r20, r16
    492e:	da 94       	dec	r13
    4930:	69 f7       	brne	.-38     	; 0x490c <__fp_powser+0x18>
    4932:	df 90       	pop	r13
    4934:	ef 90       	pop	r14
    4936:	ff 90       	pop	r15
    4938:	0f 91       	pop	r16
    493a:	1f 91       	pop	r17
    493c:	cf 91       	pop	r28
    493e:	df 91       	pop	r29
    4940:	08 95       	ret

00004942 <__udivmodhi4>:
    4942:	aa 1b       	sub	r26, r26
    4944:	bb 1b       	sub	r27, r27
    4946:	51 e1       	ldi	r21, 0x11	; 17
    4948:	07 c0       	rjmp	.+14     	; 0x4958 <__udivmodhi4_ep>

0000494a <__udivmodhi4_loop>:
    494a:	aa 1f       	adc	r26, r26
    494c:	bb 1f       	adc	r27, r27
    494e:	a6 17       	cp	r26, r22
    4950:	b7 07       	cpc	r27, r23
    4952:	10 f0       	brcs	.+4      	; 0x4958 <__udivmodhi4_ep>
    4954:	a6 1b       	sub	r26, r22
    4956:	b7 0b       	sbc	r27, r23

00004958 <__udivmodhi4_ep>:
    4958:	88 1f       	adc	r24, r24
    495a:	99 1f       	adc	r25, r25
    495c:	5a 95       	dec	r21
    495e:	a9 f7       	brne	.-22     	; 0x494a <__udivmodhi4_loop>
    4960:	80 95       	com	r24
    4962:	90 95       	com	r25
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	08 95       	ret

0000496a <__divmodsi4>:
    496a:	05 2e       	mov	r0, r21
    496c:	97 fb       	bst	r25, 7
    496e:	1e f4       	brtc	.+6      	; 0x4976 <__divmodsi4+0xc>
    4970:	00 94       	com	r0
    4972:	0e 94 cc 24 	call	0x4998	; 0x4998 <__negsi2>
    4976:	57 fd       	sbrc	r21, 7
    4978:	07 d0       	rcall	.+14     	; 0x4988 <__divmodsi4_neg2>
    497a:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__udivmodsi4>
    497e:	07 fc       	sbrc	r0, 7
    4980:	03 d0       	rcall	.+6      	; 0x4988 <__divmodsi4_neg2>
    4982:	4e f4       	brtc	.+18     	; 0x4996 <__divmodsi4_exit>
    4984:	0c 94 cc 24 	jmp	0x4998	; 0x4998 <__negsi2>

00004988 <__divmodsi4_neg2>:
    4988:	50 95       	com	r21
    498a:	40 95       	com	r20
    498c:	30 95       	com	r19
    498e:	21 95       	neg	r18
    4990:	3f 4f       	sbci	r19, 0xFF	; 255
    4992:	4f 4f       	sbci	r20, 0xFF	; 255
    4994:	5f 4f       	sbci	r21, 0xFF	; 255

00004996 <__divmodsi4_exit>:
    4996:	08 95       	ret

00004998 <__negsi2>:
    4998:	90 95       	com	r25
    499a:	80 95       	com	r24
    499c:	70 95       	com	r23
    499e:	61 95       	neg	r22
    49a0:	7f 4f       	sbci	r23, 0xFF	; 255
    49a2:	8f 4f       	sbci	r24, 0xFF	; 255
    49a4:	9f 4f       	sbci	r25, 0xFF	; 255
    49a6:	08 95       	ret

000049a8 <__tablejump2__>:
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	88 1f       	adc	r24, r24
    49ae:	8b bf       	out	0x3b, r24	; 59
    49b0:	07 90       	elpm	r0, Z+
    49b2:	f6 91       	elpm	r31, Z
    49b4:	e0 2d       	mov	r30, r0
    49b6:	19 94       	eijmp

000049b8 <__umulhisi3>:
    49b8:	a2 9f       	mul	r26, r18
    49ba:	b0 01       	movw	r22, r0
    49bc:	b3 9f       	mul	r27, r19
    49be:	c0 01       	movw	r24, r0
    49c0:	a3 9f       	mul	r26, r19
    49c2:	70 0d       	add	r23, r0
    49c4:	81 1d       	adc	r24, r1
    49c6:	11 24       	eor	r1, r1
    49c8:	91 1d       	adc	r25, r1
    49ca:	b2 9f       	mul	r27, r18
    49cc:	70 0d       	add	r23, r0
    49ce:	81 1d       	adc	r24, r1
    49d0:	11 24       	eor	r1, r1
    49d2:	91 1d       	adc	r25, r1
    49d4:	08 95       	ret

000049d6 <__udivmodsi4>:
    49d6:	a1 e2       	ldi	r26, 0x21	; 33
    49d8:	1a 2e       	mov	r1, r26
    49da:	aa 1b       	sub	r26, r26
    49dc:	bb 1b       	sub	r27, r27
    49de:	fd 01       	movw	r30, r26
    49e0:	0d c0       	rjmp	.+26     	; 0x49fc <__udivmodsi4_ep>

000049e2 <__udivmodsi4_loop>:
    49e2:	aa 1f       	adc	r26, r26
    49e4:	bb 1f       	adc	r27, r27
    49e6:	ee 1f       	adc	r30, r30
    49e8:	ff 1f       	adc	r31, r31
    49ea:	a2 17       	cp	r26, r18
    49ec:	b3 07       	cpc	r27, r19
    49ee:	e4 07       	cpc	r30, r20
    49f0:	f5 07       	cpc	r31, r21
    49f2:	20 f0       	brcs	.+8      	; 0x49fc <__udivmodsi4_ep>
    49f4:	a2 1b       	sub	r26, r18
    49f6:	b3 0b       	sbc	r27, r19
    49f8:	e4 0b       	sbc	r30, r20
    49fa:	f5 0b       	sbc	r31, r21

000049fc <__udivmodsi4_ep>:
    49fc:	66 1f       	adc	r22, r22
    49fe:	77 1f       	adc	r23, r23
    4a00:	88 1f       	adc	r24, r24
    4a02:	99 1f       	adc	r25, r25
    4a04:	1a 94       	dec	r1
    4a06:	69 f7       	brne	.-38     	; 0x49e2 <__udivmodsi4_loop>
    4a08:	60 95       	com	r22
    4a0a:	70 95       	com	r23
    4a0c:	80 95       	com	r24
    4a0e:	90 95       	com	r25
    4a10:	9b 01       	movw	r18, r22
    4a12:	ac 01       	movw	r20, r24
    4a14:	bd 01       	movw	r22, r26
    4a16:	cf 01       	movw	r24, r30
    4a18:	08 95       	ret

00004a1a <malloc>:
    4a1a:	cf 93       	push	r28
    4a1c:	df 93       	push	r29
    4a1e:	82 30       	cpi	r24, 0x02	; 2
    4a20:	91 05       	cpc	r25, r1
    4a22:	10 f4       	brcc	.+4      	; 0x4a28 <malloc+0xe>
    4a24:	82 e0       	ldi	r24, 0x02	; 2
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	e0 91 5d 23 	lds	r30, 0x235D
    4a2c:	f0 91 5e 23 	lds	r31, 0x235E
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	c0 e0       	ldi	r28, 0x00	; 0
    4a36:	d0 e0       	ldi	r29, 0x00	; 0
    4a38:	30 97       	sbiw	r30, 0x00	; 0
    4a3a:	11 f1       	breq	.+68     	; 0x4a80 <malloc+0x66>
    4a3c:	40 81       	ld	r20, Z
    4a3e:	51 81       	ldd	r21, Z+1	; 0x01
    4a40:	48 17       	cp	r20, r24
    4a42:	59 07       	cpc	r21, r25
    4a44:	c0 f0       	brcs	.+48     	; 0x4a76 <malloc+0x5c>
    4a46:	48 17       	cp	r20, r24
    4a48:	59 07       	cpc	r21, r25
    4a4a:	61 f4       	brne	.+24     	; 0x4a64 <malloc+0x4a>
    4a4c:	82 81       	ldd	r24, Z+2	; 0x02
    4a4e:	93 81       	ldd	r25, Z+3	; 0x03
    4a50:	20 97       	sbiw	r28, 0x00	; 0
    4a52:	19 f0       	breq	.+6      	; 0x4a5a <malloc+0x40>
    4a54:	8a 83       	std	Y+2, r24	; 0x02
    4a56:	9b 83       	std	Y+3, r25	; 0x03
    4a58:	2b c0       	rjmp	.+86     	; 0x4ab0 <malloc+0x96>
    4a5a:	80 93 5d 23 	sts	0x235D, r24
    4a5e:	90 93 5e 23 	sts	0x235E, r25
    4a62:	26 c0       	rjmp	.+76     	; 0x4ab0 <malloc+0x96>
    4a64:	21 15       	cp	r18, r1
    4a66:	31 05       	cpc	r19, r1
    4a68:	19 f0       	breq	.+6      	; 0x4a70 <malloc+0x56>
    4a6a:	42 17       	cp	r20, r18
    4a6c:	53 07       	cpc	r21, r19
    4a6e:	18 f4       	brcc	.+6      	; 0x4a76 <malloc+0x5c>
    4a70:	9a 01       	movw	r18, r20
    4a72:	be 01       	movw	r22, r28
    4a74:	df 01       	movw	r26, r30
    4a76:	ef 01       	movw	r28, r30
    4a78:	02 80       	ldd	r0, Z+2	; 0x02
    4a7a:	f3 81       	ldd	r31, Z+3	; 0x03
    4a7c:	e0 2d       	mov	r30, r0
    4a7e:	dc cf       	rjmp	.-72     	; 0x4a38 <malloc+0x1e>
    4a80:	21 15       	cp	r18, r1
    4a82:	31 05       	cpc	r19, r1
    4a84:	09 f1       	breq	.+66     	; 0x4ac8 <malloc+0xae>
    4a86:	28 1b       	sub	r18, r24
    4a88:	39 0b       	sbc	r19, r25
    4a8a:	24 30       	cpi	r18, 0x04	; 4
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	90 f4       	brcc	.+36     	; 0x4ab4 <malloc+0x9a>
    4a90:	12 96       	adiw	r26, 0x02	; 2
    4a92:	8d 91       	ld	r24, X+
    4a94:	9c 91       	ld	r25, X
    4a96:	13 97       	sbiw	r26, 0x03	; 3
    4a98:	61 15       	cp	r22, r1
    4a9a:	71 05       	cpc	r23, r1
    4a9c:	21 f0       	breq	.+8      	; 0x4aa6 <malloc+0x8c>
    4a9e:	fb 01       	movw	r30, r22
    4aa0:	82 83       	std	Z+2, r24	; 0x02
    4aa2:	93 83       	std	Z+3, r25	; 0x03
    4aa4:	04 c0       	rjmp	.+8      	; 0x4aae <malloc+0x94>
    4aa6:	80 93 5d 23 	sts	0x235D, r24
    4aaa:	90 93 5e 23 	sts	0x235E, r25
    4aae:	fd 01       	movw	r30, r26
    4ab0:	32 96       	adiw	r30, 0x02	; 2
    4ab2:	44 c0       	rjmp	.+136    	; 0x4b3c <malloc+0x122>
    4ab4:	fd 01       	movw	r30, r26
    4ab6:	e2 0f       	add	r30, r18
    4ab8:	f3 1f       	adc	r31, r19
    4aba:	81 93       	st	Z+, r24
    4abc:	91 93       	st	Z+, r25
    4abe:	22 50       	subi	r18, 0x02	; 2
    4ac0:	31 09       	sbc	r19, r1
    4ac2:	2d 93       	st	X+, r18
    4ac4:	3c 93       	st	X, r19
    4ac6:	3a c0       	rjmp	.+116    	; 0x4b3c <malloc+0x122>
    4ac8:	20 91 5b 23 	lds	r18, 0x235B
    4acc:	30 91 5c 23 	lds	r19, 0x235C
    4ad0:	23 2b       	or	r18, r19
    4ad2:	41 f4       	brne	.+16     	; 0x4ae4 <malloc+0xca>
    4ad4:	20 91 02 20 	lds	r18, 0x2002
    4ad8:	30 91 03 20 	lds	r19, 0x2003
    4adc:	20 93 5b 23 	sts	0x235B, r18
    4ae0:	30 93 5c 23 	sts	0x235C, r19
    4ae4:	20 91 00 20 	lds	r18, 0x2000
    4ae8:	30 91 01 20 	lds	r19, 0x2001
    4aec:	21 15       	cp	r18, r1
    4aee:	31 05       	cpc	r19, r1
    4af0:	41 f4       	brne	.+16     	; 0x4b02 <malloc+0xe8>
    4af2:	2d b7       	in	r18, 0x3d	; 61
    4af4:	3e b7       	in	r19, 0x3e	; 62
    4af6:	40 91 04 20 	lds	r20, 0x2004
    4afa:	50 91 05 20 	lds	r21, 0x2005
    4afe:	24 1b       	sub	r18, r20
    4b00:	35 0b       	sbc	r19, r21
    4b02:	e0 91 5b 23 	lds	r30, 0x235B
    4b06:	f0 91 5c 23 	lds	r31, 0x235C
    4b0a:	e2 17       	cp	r30, r18
    4b0c:	f3 07       	cpc	r31, r19
    4b0e:	a0 f4       	brcc	.+40     	; 0x4b38 <malloc+0x11e>
    4b10:	2e 1b       	sub	r18, r30
    4b12:	3f 0b       	sbc	r19, r31
    4b14:	28 17       	cp	r18, r24
    4b16:	39 07       	cpc	r19, r25
    4b18:	78 f0       	brcs	.+30     	; 0x4b38 <malloc+0x11e>
    4b1a:	ac 01       	movw	r20, r24
    4b1c:	4e 5f       	subi	r20, 0xFE	; 254
    4b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b20:	24 17       	cp	r18, r20
    4b22:	35 07       	cpc	r19, r21
    4b24:	48 f0       	brcs	.+18     	; 0x4b38 <malloc+0x11e>
    4b26:	4e 0f       	add	r20, r30
    4b28:	5f 1f       	adc	r21, r31
    4b2a:	40 93 5b 23 	sts	0x235B, r20
    4b2e:	50 93 5c 23 	sts	0x235C, r21
    4b32:	81 93       	st	Z+, r24
    4b34:	91 93       	st	Z+, r25
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <malloc+0x122>
    4b38:	e0 e0       	ldi	r30, 0x00	; 0
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	cf 01       	movw	r24, r30
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	08 95       	ret

00004b44 <free>:
    4b44:	0f 93       	push	r16
    4b46:	1f 93       	push	r17
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <free+0xe>
    4b50:	8c c0       	rjmp	.+280    	; 0x4c6a <free+0x126>
    4b52:	fc 01       	movw	r30, r24
    4b54:	32 97       	sbiw	r30, 0x02	; 2
    4b56:	12 82       	std	Z+2, r1	; 0x02
    4b58:	13 82       	std	Z+3, r1	; 0x03
    4b5a:	00 91 5d 23 	lds	r16, 0x235D
    4b5e:	10 91 5e 23 	lds	r17, 0x235E
    4b62:	01 15       	cp	r16, r1
    4b64:	11 05       	cpc	r17, r1
    4b66:	81 f4       	brne	.+32     	; 0x4b88 <free+0x44>
    4b68:	20 81       	ld	r18, Z
    4b6a:	31 81       	ldd	r19, Z+1	; 0x01
    4b6c:	82 0f       	add	r24, r18
    4b6e:	93 1f       	adc	r25, r19
    4b70:	20 91 5b 23 	lds	r18, 0x235B
    4b74:	30 91 5c 23 	lds	r19, 0x235C
    4b78:	28 17       	cp	r18, r24
    4b7a:	39 07       	cpc	r19, r25
    4b7c:	79 f5       	brne	.+94     	; 0x4bdc <free+0x98>
    4b7e:	e0 93 5b 23 	sts	0x235B, r30
    4b82:	f0 93 5c 23 	sts	0x235C, r31
    4b86:	71 c0       	rjmp	.+226    	; 0x4c6a <free+0x126>
    4b88:	d8 01       	movw	r26, r16
    4b8a:	40 e0       	ldi	r20, 0x00	; 0
    4b8c:	50 e0       	ldi	r21, 0x00	; 0
    4b8e:	ae 17       	cp	r26, r30
    4b90:	bf 07       	cpc	r27, r31
    4b92:	50 f4       	brcc	.+20     	; 0x4ba8 <free+0x64>
    4b94:	12 96       	adiw	r26, 0x02	; 2
    4b96:	2d 91       	ld	r18, X+
    4b98:	3c 91       	ld	r19, X
    4b9a:	13 97       	sbiw	r26, 0x03	; 3
    4b9c:	ad 01       	movw	r20, r26
    4b9e:	21 15       	cp	r18, r1
    4ba0:	31 05       	cpc	r19, r1
    4ba2:	09 f1       	breq	.+66     	; 0x4be6 <free+0xa2>
    4ba4:	d9 01       	movw	r26, r18
    4ba6:	f3 cf       	rjmp	.-26     	; 0x4b8e <free+0x4a>
    4ba8:	9d 01       	movw	r18, r26
    4baa:	da 01       	movw	r26, r20
    4bac:	22 83       	std	Z+2, r18	; 0x02
    4bae:	33 83       	std	Z+3, r19	; 0x03
    4bb0:	60 81       	ld	r22, Z
    4bb2:	71 81       	ldd	r23, Z+1	; 0x01
    4bb4:	86 0f       	add	r24, r22
    4bb6:	97 1f       	adc	r25, r23
    4bb8:	82 17       	cp	r24, r18
    4bba:	93 07       	cpc	r25, r19
    4bbc:	69 f4       	brne	.+26     	; 0x4bd8 <free+0x94>
    4bbe:	ec 01       	movw	r28, r24
    4bc0:	28 81       	ld	r18, Y
    4bc2:	39 81       	ldd	r19, Y+1	; 0x01
    4bc4:	26 0f       	add	r18, r22
    4bc6:	37 1f       	adc	r19, r23
    4bc8:	2e 5f       	subi	r18, 0xFE	; 254
    4bca:	3f 4f       	sbci	r19, 0xFF	; 255
    4bcc:	20 83       	st	Z, r18
    4bce:	31 83       	std	Z+1, r19	; 0x01
    4bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd4:	82 83       	std	Z+2, r24	; 0x02
    4bd6:	93 83       	std	Z+3, r25	; 0x03
    4bd8:	45 2b       	or	r20, r21
    4bda:	29 f4       	brne	.+10     	; 0x4be6 <free+0xa2>
    4bdc:	e0 93 5d 23 	sts	0x235D, r30
    4be0:	f0 93 5e 23 	sts	0x235E, r31
    4be4:	42 c0       	rjmp	.+132    	; 0x4c6a <free+0x126>
    4be6:	12 96       	adiw	r26, 0x02	; 2
    4be8:	ed 93       	st	X+, r30
    4bea:	fc 93       	st	X, r31
    4bec:	13 97       	sbiw	r26, 0x03	; 3
    4bee:	ed 01       	movw	r28, r26
    4bf0:	49 91       	ld	r20, Y+
    4bf2:	59 91       	ld	r21, Y+
    4bf4:	9e 01       	movw	r18, r28
    4bf6:	24 0f       	add	r18, r20
    4bf8:	35 1f       	adc	r19, r21
    4bfa:	e2 17       	cp	r30, r18
    4bfc:	f3 07       	cpc	r31, r19
    4bfe:	71 f4       	brne	.+28     	; 0x4c1c <free+0xd8>
    4c00:	80 81       	ld	r24, Z
    4c02:	91 81       	ldd	r25, Z+1	; 0x01
    4c04:	84 0f       	add	r24, r20
    4c06:	95 1f       	adc	r25, r21
    4c08:	02 96       	adiw	r24, 0x02	; 2
    4c0a:	8d 93       	st	X+, r24
    4c0c:	9c 93       	st	X, r25
    4c0e:	11 97       	sbiw	r26, 0x01	; 1
    4c10:	82 81       	ldd	r24, Z+2	; 0x02
    4c12:	93 81       	ldd	r25, Z+3	; 0x03
    4c14:	12 96       	adiw	r26, 0x02	; 2
    4c16:	8d 93       	st	X+, r24
    4c18:	9c 93       	st	X, r25
    4c1a:	13 97       	sbiw	r26, 0x03	; 3
    4c1c:	e0 e0       	ldi	r30, 0x00	; 0
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	d8 01       	movw	r26, r16
    4c22:	12 96       	adiw	r26, 0x02	; 2
    4c24:	8d 91       	ld	r24, X+
    4c26:	9c 91       	ld	r25, X
    4c28:	13 97       	sbiw	r26, 0x03	; 3
    4c2a:	00 97       	sbiw	r24, 0x00	; 0
    4c2c:	19 f0       	breq	.+6      	; 0x4c34 <free+0xf0>
    4c2e:	f8 01       	movw	r30, r16
    4c30:	8c 01       	movw	r16, r24
    4c32:	f6 cf       	rjmp	.-20     	; 0x4c20 <free+0xdc>
    4c34:	8d 91       	ld	r24, X+
    4c36:	9c 91       	ld	r25, X
    4c38:	98 01       	movw	r18, r16
    4c3a:	2e 5f       	subi	r18, 0xFE	; 254
    4c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3e:	82 0f       	add	r24, r18
    4c40:	93 1f       	adc	r25, r19
    4c42:	20 91 5b 23 	lds	r18, 0x235B
    4c46:	30 91 5c 23 	lds	r19, 0x235C
    4c4a:	28 17       	cp	r18, r24
    4c4c:	39 07       	cpc	r19, r25
    4c4e:	69 f4       	brne	.+26     	; 0x4c6a <free+0x126>
    4c50:	30 97       	sbiw	r30, 0x00	; 0
    4c52:	29 f4       	brne	.+10     	; 0x4c5e <free+0x11a>
    4c54:	10 92 5d 23 	sts	0x235D, r1
    4c58:	10 92 5e 23 	sts	0x235E, r1
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <free+0x11e>
    4c5e:	12 82       	std	Z+2, r1	; 0x02
    4c60:	13 82       	std	Z+3, r1	; 0x03
    4c62:	00 93 5b 23 	sts	0x235B, r16
    4c66:	10 93 5c 23 	sts	0x235C, r17
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	08 95       	ret

00004c74 <memcpy>:
    4c74:	fb 01       	movw	r30, r22
    4c76:	dc 01       	movw	r26, r24
    4c78:	02 c0       	rjmp	.+4      	; 0x4c7e <memcpy+0xa>
    4c7a:	01 90       	ld	r0, Z+
    4c7c:	0d 92       	st	X+, r0
    4c7e:	41 50       	subi	r20, 0x01	; 1
    4c80:	50 40       	sbci	r21, 0x00	; 0
    4c82:	d8 f7       	brcc	.-10     	; 0x4c7a <memcpy+0x6>
    4c84:	08 95       	ret

00004c86 <__do_global_dtors>:
    4c86:	12 e0       	ldi	r17, 0x02	; 2
    4c88:	ce ef       	ldi	r28, 0xFE	; 254
    4c8a:	d1 e0       	ldi	r29, 0x01	; 1
    4c8c:	00 e0       	ldi	r16, 0x00	; 0
    4c8e:	06 c0       	rjmp	.+12     	; 0x4c9c <__do_global_dtors+0x16>
    4c90:	80 2f       	mov	r24, r16
    4c92:	fe 01       	movw	r30, r28
    4c94:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <__tablejump2__>
    4c98:	21 96       	adiw	r28, 0x01	; 1
    4c9a:	01 1d       	adc	r16, r1
    4c9c:	c0 30       	cpi	r28, 0x00	; 0
    4c9e:	d1 07       	cpc	r29, r17
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	08 07       	cpc	r16, r24
    4ca4:	a9 f7       	brne	.-22     	; 0x4c90 <__do_global_dtors+0xa>
    4ca6:	f8 94       	cli

00004ca8 <__stop_program>:
    4ca8:	ff cf       	rjmp	.-2      	; 0x4ca8 <__stop_program>
