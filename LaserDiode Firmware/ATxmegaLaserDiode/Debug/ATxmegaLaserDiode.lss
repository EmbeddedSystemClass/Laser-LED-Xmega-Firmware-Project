
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000080e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c4  00802000  000080e8  0000817c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000367  008022c4  008022c4  00008440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d10  00000000  00000000  000084b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001948a  00000000  00000000  000091c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006678  00000000  00000000  0002264a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000684c  00000000  00000000  00028cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003cf8  00000000  00000000  0002f510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009862  00000000  00000000  00033208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c016  00000000  00000000  0003ca6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c18  00000000  00000000  00048a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__dtors_end>
       4:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__vector_1>
       8:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__vector_2>
       c:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__vector_3>
      10:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__vector_4>
      14:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__vector_5>
      18:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__vector_6>
      1c:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__vector_7>
      20:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__vector_8>
      24:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__vector_9>
      28:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__vector_10>
      2c:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__vector_11>
      30:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_12>
      34:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__vector_13>
      38:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__vector_14>
      3c:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__vector_15>
      40:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__vector_16>
      44:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__vector_17>
      48:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__vector_18>
      4c:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__vector_19>
      50:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <__vector_20>
      54:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__vector_21>
      58:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__vector_22>
      5c:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__vector_23>
      60:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__vector_24>
      64:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__vector_25>
      68:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__vector_26>
      6c:	0c 94 12 21 	jmp	0x4224	; 0x4224 <__vector_27>
      70:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__vector_28>
      74:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__vector_29>
      78:	0c 94 a5 21 	jmp	0x434a	; 0x434a <__vector_30>
      7c:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__vector_31>
      80:	0c 94 07 22 	jmp	0x440e	; 0x440e <__vector_32>
      84:	0c 94 38 22 	jmp	0x4470	; 0x4470 <__vector_33>
      88:	0c 94 69 22 	jmp	0x44d2	; 0x44d2 <__vector_34>
      8c:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <__vector_35>
      90:	0c 94 cb 22 	jmp	0x4596	; 0x4596 <__vector_36>
      94:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__vector_37>
      98:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__vector_38>
      9c:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__vector_39>
      a0:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__vector_40>
      a4:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__vector_41>
      a8:	0c 94 f1 23 	jmp	0x47e2	; 0x47e2 <__vector_42>
      ac:	0c 94 22 24 	jmp	0x4844	; 0x4844 <__vector_43>
      b0:	0c 94 53 24 	jmp	0x48a6	; 0x48a6 <__vector_44>
      b4:	0c 94 84 24 	jmp	0x4908	; 0x4908 <__vector_45>
      b8:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__vector_46>
      bc:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <__vector_47>
      c0:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__vector_48>
      c4:	0c 94 48 25 	jmp	0x4a90	; 0x4a90 <__vector_49>
      c8:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__vector_50>
      cc:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__vector_51>
      d0:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__vector_52>
      d4:	0c 94 0c 26 	jmp	0x4c18	; 0x4c18 <__vector_53>
      d8:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__vector_54>
      dc:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <__vector_55>
      e0:	0c 94 9f 26 	jmp	0x4d3e	; 0x4d3e <__vector_56>
      e4:	0c 94 d0 26 	jmp	0x4da0	; 0x4da0 <__vector_57>
      e8:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__vector_58>
      ec:	0c 94 32 27 	jmp	0x4e64	; 0x4e64 <__vector_59>
      f0:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <__vector_60>
      f4:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__vector_61>
      f8:	0c 94 c5 27 	jmp	0x4f8a	; 0x4f8a <__vector_62>
      fc:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__vector_63>
     100:	0c 94 27 28 	jmp	0x504e	; 0x504e <__vector_64>
     104:	0c 94 58 28 	jmp	0x50b0	; 0x50b0 <__vector_65>
     108:	0c 94 89 28 	jmp	0x5112	; 0x5112 <__vector_66>
     10c:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__vector_67>
     110:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__vector_68>
     114:	0c 94 1c 29 	jmp	0x5238	; 0x5238 <__vector_69>
     118:	0c 94 4d 29 	jmp	0x529a	; 0x529a <__vector_70>
     11c:	0c 94 7e 29 	jmp	0x52fc	; 0x52fc <__vector_71>
     120:	0c 94 af 29 	jmp	0x535e	; 0x535e <__vector_72>
     124:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__vector_73>
     128:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <__vector_74>
     12c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     130:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     134:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__vector_77>
     138:	0c 94 73 2a 	jmp	0x54e6	; 0x54e6 <__vector_78>
     13c:	0c 94 a4 2a 	jmp	0x5548	; 0x5548 <__vector_79>
     140:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__vector_80>
     144:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__vector_81>
     148:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__vector_82>
     14c:	0c 94 68 2b 	jmp	0x56d0	; 0x56d0 <__vector_83>
     150:	0c 94 99 2b 	jmp	0x5732	; 0x5732 <__vector_84>
     154:	0c 94 ca 2b 	jmp	0x5794	; 0x5794 <__vector_85>
     158:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__vector_86>
     15c:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__vector_87>
     160:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__vector_88>
     164:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__vector_89>
     168:	0c 94 bf 2c 	jmp	0x597e	; 0x597e <__vector_90>
     16c:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__vector_91>
     170:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__vector_92>
     174:	0c 94 52 2d 	jmp	0x5aa4	; 0x5aa4 <__vector_93>
     178:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     17c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     180:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     184:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     188:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     18c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     190:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     194:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     198:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     19c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1a0:	0c 94 83 2d 	jmp	0x5b06	; 0x5b06 <__vector_104>
     1a4:	0c 94 b4 2d 	jmp	0x5b68	; 0x5b68 <__vector_105>
     1a8:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1ac:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1b0:	0c 94 e5 2d 	jmp	0x5bca	; 0x5bca <__vector_108>
     1b4:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__vector_109>
     1b8:	0c 94 47 2e 	jmp	0x5c8e	; 0x5c8e <__vector_110>
     1bc:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__vector_111>
     1c0:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__vector_112>
     1c4:	0c 94 da 2e 	jmp	0x5db4	; 0x5db4 <__vector_113>
     1c8:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1cc:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1d0:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1d4:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1d8:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1dc:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__vector_119>
     1e0:	0c 94 3c 2f 	jmp	0x5e78	; 0x5e78 <__vector_120>
     1e4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__vector_121>
     1e8:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1ec:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1f0:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1f4:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1f8:	0c 94 c0 02 	jmp	0x580	; 0x580 <__bad_interrupt>
     1fc:	de 03       	fmulsu	r21, r22
     1fe:	60 04       	cpc	r6, r0
     200:	60 04       	cpc	r6, r0
     202:	d7 03       	fmuls	r21, r23
     204:	60 04       	cpc	r6, r0
     206:	60 04       	cpc	r6, r0
     208:	60 04       	cpc	r6, r0
     20a:	e3 03       	fmuls	r22, r19
     20c:	3e 04       	cpc	r3, r14
     20e:	60 04       	cpc	r6, r0
     210:	ea 03       	fmulsu	r22, r18
     212:	60 04       	cpc	r6, r0
     214:	f1 03       	fmuls	r23, r17
     216:	60 04       	cpc	r6, r0
     218:	f8 03       	fmulsu	r23, r16
     21a:	60 04       	cpc	r6, r0
     21c:	ff 03       	fmulsu	r23, r23
     21e:	60 04       	cpc	r6, r0
     220:	60 04       	cpc	r6, r0
     222:	60 04       	cpc	r6, r0
     224:	60 04       	cpc	r6, r0
     226:	60 04       	cpc	r6, r0
     228:	06 04       	cpc	r0, r6
     22a:	0d 04       	cpc	r0, r13
     22c:	14 04       	cpc	r1, r4
     22e:	1b 04       	cpc	r1, r11
     230:	30 04       	cpc	r3, r0
     232:	60 04       	cpc	r6, r0
     234:	22 04       	cpc	r2, r2
     236:	60 04       	cpc	r6, r0
     238:	37 04       	cpc	r3, r7
     23a:	60 04       	cpc	r6, r0
     23c:	60 04       	cpc	r6, r0
     23e:	60 04       	cpc	r6, r0
     240:	60 04       	cpc	r6, r0
     242:	60 04       	cpc	r6, r0
     244:	60 04       	cpc	r6, r0
     246:	29 04       	cpc	r2, r9
     248:	60 04       	cpc	r6, r0
     24a:	53 04       	cpc	r5, r3
     24c:	45 04       	cpc	r4, r5
     24e:	4c 04       	cpc	r4, r12
     250:	60 04       	cpc	r6, r0
     252:	60 04       	cpc	r6, r0
     254:	60 04       	cpc	r6, r0
     256:	60 04       	cpc	r6, r0
     258:	60 04       	cpc	r6, r0
     25a:	5a 04       	cpc	r5, r10
     25c:	85 04       	cpc	r8, r5
     25e:	8b 04       	cpc	r8, r11
     260:	91 04       	cpc	r9, r1
     262:	97 04       	cpc	r9, r7
     264:	9d 04       	cpc	r9, r13
     266:	a3 04       	cpc	r10, r3
     268:	a9 04       	cpc	r10, r9
     26a:	af 04       	cpc	r10, r15
     26c:	1f 05       	cpc	r17, r15
     26e:	be 04       	cpc	r11, r14
     270:	c4 04       	cpc	r12, r4
     272:	c9 04       	cpc	r12, r9
     274:	cf 04       	cpc	r12, r15
     276:	d5 04       	cpc	r13, r5
     278:	db 04       	cpc	r13, r11
     27a:	e1 04       	cpc	r14, r1
     27c:	e7 04       	cpc	r14, r7
     27e:	ed 04       	cpc	r14, r13
     280:	1b 34       	cpi	r17, 0x4B	; 75
     282:	1b 34       	cpi	r17, 0x4B	; 75
     284:	25 34       	cpi	r18, 0x45	; 69
     286:	2f 34       	cpi	r18, 0x4F	; 79
     288:	3f 34       	cpi	r19, 0x4F	; 79
     28a:	8f 34       	cpi	r24, 0x4F	; 79
     28c:	99 34       	cpi	r25, 0x49	; 73
     28e:	ce 34       	cpi	r28, 0x4E	; 78
     290:	ce 34       	cpi	r28, 0x4E	; 78
     292:	cc 34       	cpi	r28, 0x4C	; 76
     294:	cc 34       	cpi	r28, 0x4C	; 76

00000296 <__trampolines_start>:
     296:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 37 04 	jmp	0x86e	; 0x86e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 25 34 	jmp	0x684a	; 0x684a <_ZN9CMBSender13OnReceiveByteEh+0x3a>
     2a2:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     2a6:	0c 94 4c 39 	jmp	0x7298	; 0x7298 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2aa:	0c 94 8f 34 	jmp	0x691e	; 0x691e <_ZN9CMBSender13OnReceiveByteEh+0x10e>
     2ae:	0c 94 75 36 	jmp	0x6cea	; 0x6cea <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2b2:	0c 94 7e 3c 	jmp	0x78fc	; 0x78fc <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     2b6:	0c 94 6b 3a 	jmp	0x74d6	; 0x74d6 <_ZN8CTimerC18SetCOMPBEj>
     2ba:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     2be:	0c 94 f8 39 	jmp	0x73f0	; 0x73f0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2c2:	0c 94 0a 3b 	jmp	0x7614	; 0x7614 <_ZN7CTimerD9SetPeriodEj>
     2c6:	0c 94 23 3c 	jmp	0x7846	; 0x7846 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2ca:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <_ZN10CDGUSUSART11IsReceivingEv>
     2ce:	0c 94 12 3c 	jmp	0x7824	; 0x7824 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2d2:	0c 94 7a 33 	jmp	0x66f4	; 0x66f4 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2d6:	0c 94 04 3d 	jmp	0x7a08	; 0x7a08 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2da:	0c 94 14 3b 	jmp	0x7628	; 0x7628 <_ZN7CTimerD8SetCOMPBEj>
     2de:	0c 94 d1 34 	jmp	0x69a2	; 0x69a2 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2e2:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2e6:	0c 94 91 04 	jmp	0x922	; 0x922 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2ea:	0c 94 61 3a 	jmp	0x74c2	; 0x74c2 <_ZN8CTimerC19SetPeriodEj>
     2ee:	0c 94 22 04 	jmp	0x844	; 0x844 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2f2:	0c 94 4c 04 	jmp	0x898	; 0x898 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     2f6:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     2fa:	0c 94 a0 3c 	jmp	0x7940	; 0x7940 <_ZN7CTimerF8SetCOMPBEj>
     2fe:	0c 94 99 39 	jmp	0x7332	; 0x7332 <_ZN7CTimerC8SetCOMPCEj>
     302:	0c 94 0f 3b 	jmp	0x761e	; 0x761e <_ZN7CTimerD8SetCOMPAEj>
     306:	0c 94 97 04 	jmp	0x92e	; 0x92e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     30a:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     30e:	0c 94 9e 39 	jmp	0x733c	; 0x733c <_ZN7CTimerC8SetCOMPDEj>
     312:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <_ZN7CTimerF5StartEj>
     316:	0c 94 eb 3b 	jmp	0x77d6	; 0x77d6 <_ZN8CTimerD18SetCOMPBEj>
     31a:	0c 94 34 3a 	jmp	0x7468	; 0x7468 <_ZN8CTimerC15StartEj>
     31e:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     322:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <_ZN4CSPI16StaticOnTransmitEPv>
     326:	0c 94 82 3a 	jmp	0x7504	; 0x7504 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     32a:	0c 94 70 3a 	jmp	0x74e0	; 0x74e0 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     32e:	0c 94 b4 3b 	jmp	0x7768	; 0x7768 <_ZN8CTimerD15StartEj>
     332:	0c 94 3a 32 	jmp	0x6474	; 0x6474 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     336:	0c 94 85 04 	jmp	0x90a	; 0x90a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     33a:	0c 94 8b 04 	jmp	0x916	; 0x916 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     33e:	0c 94 5a 3a 	jmp	0x74b4	; 0x74b4 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     342:	0c 94 64 36 	jmp	0x6cc8	; 0x6cc8 <_ZN10CDGUSUSART11IsDataEmptyEv>
     346:	0c 94 85 3c 	jmp	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     34a:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     34e:	0c 94 55 36 	jmp	0x6caa	; 0x6caa <_ZN10CDGUSUSART14IsTransmittingEv>
     352:	0c 94 67 3b 	jmp	0x76ce	; 0x76ce <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     356:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     35a:	0c 94 a5 3c 	jmp	0x794a	; 0x794a <_ZN7CTimerF8SetCOMPCEj>
     35e:	0c 94 34 3b 	jmp	0x7668	; 0x7668 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     362:	0c 94 c4 04 	jmp	0x988	; 0x988 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc4>
     366:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     36a:	0c 94 19 06 	jmp	0xc32	; 0xc32 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     36e:	0c 94 83 39 	jmp	0x7306	; 0x7306 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     372:	0c 94 ce 34 	jmp	0x699c	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
     376:	0c 94 45 04 	jmp	0x88a	; 0x88a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     37a:	0c 94 7e 36 	jmp	0x6cfc	; 0x6cfc <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     37e:	0c 94 9d 3b 	jmp	0x773a	; 0x773a <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     382:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     386:	0c 94 7c 39 	jmp	0x72f8	; 0x72f8 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     38a:	0c 94 78 3c 	jmp	0x78f0	; 0x78f0 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     38e:	0c 94 19 3b 	jmp	0x7632	; 0x7632 <_ZN7CTimerD8SetCOMPCEj>
     392:	0c 94 d1 3c 	jmp	0x79a2	; 0x79a2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     396:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     39a:	0c 94 6b 33 	jmp	0x66d6	; 0x66d6 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     39e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     3a2:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     3a6:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <_ZN7CTimerC4StopEv>
     3aa:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3ae:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3b2:	0c 94 67 39 	jmp	0x72ce	; 0x72ce <_ZN7CTimerC5StartEj>
     3b6:	0c 94 94 3a 	jmp	0x7528	; 0x7528 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3ba:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     3be:	0c 94 66 3a 	jmp	0x74cc	; 0x74cc <_ZN8CTimerC18SetCOMPAEj>
     3c2:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__cxa_pure_virtual>
     3c6:	0c 94 cc 3a 	jmp	0x7598	; 0x7598 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3ca:	0c 94 8a 39 	jmp	0x7314	; 0x7314 <_ZN7CTimerC9SetPeriodEj>
     3ce:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     3d2:	0c 94 e1 3b 	jmp	0x77c2	; 0x77c2 <_ZN8CTimerD19SetPeriodEj>
     3d6:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3da:	0c 94 d6 2f 	jmp	0x5fac	; 0x5fac <_GLOBAL__sub_D_dacSPI>
     3de:	0c 94 30 04 	jmp	0x860	; 0x860 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3e2:	0c 94 8d 3c 	jmp	0x791a	; 0x791a <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     3e6:	0c 94 e7 3a 	jmp	0x75ce	; 0x75ce <_ZN7CTimerD5StartEj>
     3ea:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     3ee:	0c 94 aa 3c 	jmp	0x7954	; 0x7954 <_ZN7CTimerF8SetCOMPDEj>
     3f2:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <_ZN16CMBEventsHandler11FreeBuffersEv>
     3f6:	0c 94 e2 3c 	jmp	0x79c4	; 0x79c4 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3fa:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     3fe:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     402:	0c 94 c1 3b 	jmp	0x7782	; 0x7782 <_ZN8CTimerD14StopEv>
     406:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     40a:	0c 94 3f 34 	jmp	0x687e	; 0x687e <_ZN9CMBSender13OnReceiveByteEh+0x6e>
     40e:	0c 94 41 3a 	jmp	0x7482	; 0x7482 <_ZN8CTimerC14StopEv>
     412:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     416:	0c 94 f4 3a 	jmp	0x75e8	; 0x75e8 <_ZN7CTimerD4StopEv>
     41a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x142>
     41e:	0c 94 1e 3b 	jmp	0x763c	; 0x763c <_ZN7CTimerD8SetCOMPDEj>
     422:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x14e>
     426:	0c 94 af 04 	jmp	0x95e	; 0x95e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     42a:	0c 94 b9 03 	jmp	0x772	; 0x772 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     42e:	0c 94 56 3b 	jmp	0x76ac	; 0x76ac <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     432:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     436:	0c 94 06 04 	jmp	0x80c	; 0x80c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     43a:	0c 94 d6 39 	jmp	0x73ac	; 0x73ac <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     43e:	0c 94 11 32 	jmp	0x6422	; 0x6422 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     442:	0c 94 c9 3b 	jmp	0x7792	; 0x7792 <_ZN8CTimerD15ResetEv>
     446:	0c 94 cc 34 	jmp	0x6998	; 0x6998 <_ZN9CMBSender13OnReceiveByteEh+0x188>
     44a:	0c 94 a3 39 	jmp	0x7346	; 0x7346 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     44e:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     452:	0c 94 a1 2f 	jmp	0x5f42	; 0x5f42 <_GLOBAL__sub_I_dacSPI>
     456:	0c 94 9b 3c 	jmp	0x7936	; 0x7936 <_ZN7CTimerF8SetCOMPAEj>
     45a:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     45e:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     462:	0c 94 99 34 	jmp	0x6932	; 0x6932 <_ZN9CMBSender13OnReceiveByteEh+0x122>
     466:	0c 94 e7 39 	jmp	0x73ce	; 0x73ce <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     46a:	0c 94 f8 34 	jmp	0x69f0	; 0x69f0 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     46e:	0c 94 1b 34 	jmp	0x6836	; 0x6836 <_ZN9CMBSender13OnReceiveByteEh+0x26>
     472:	0c 94 a9 04 	jmp	0x952	; 0x952 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     476:	0c 94 5d 35 	jmp	0x6aba	; 0x6aba <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     47a:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     47e:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     482:	0c 94 14 36 	jmp	0x6c28	; 0x6c28 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     486:	0c 94 4f 36 	jmp	0x6c9e	; 0x6c9e <_ZN10CDGUSUSART15GetReceivedByteEv>
     48a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     48e:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     492:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     496:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     49a:	0c 94 45 3b 	jmp	0x768a	; 0x768a <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     49e:	0c 94 87 36 	jmp	0x6d0e	; 0x6d0e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     4a2:	0c 94 70 3c 	jmp	0x78e0	; 0x78e0 <_ZN7CTimerF4StopEv>
     4a6:	0c 94 e6 3b 	jmp	0x77cc	; 0x77cc <_ZN8CTimerD18SetCOMPAEj>
     4aa:	0c 94 1d 3a 	jmp	0x743a	; 0x743a <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4ae:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     4b2:	0c 94 b4 39 	jmp	0x7368	; 0x7368 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4b6:	0c 94 af 3c 	jmp	0x795e	; 0x795e <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4ba:	0c 94 94 39 	jmp	0x7328	; 0x7328 <_ZN7CTimerC8SetCOMPBEj>
     4be:	0c 94 11 36 	jmp	0x6c22	; 0x6c22 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     4c2:	0c 94 48 3c 	jmp	0x7890	; 0x7890 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4c6:	0c 94 c5 39 	jmp	0x738a	; 0x738a <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4ca:	0c 94 49 3a 	jmp	0x7492	; 0x7492 <_ZN8CTimerC15ResetEv>
     4ce:	0c 94 b8 03 	jmp	0x770	; 0x770 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4d2:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4d6:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     4da:	0c 94 c9 04 	jmp	0x992	; 0x992 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     4de:	0c 94 8f 39 	jmp	0x731e	; 0x731e <_ZN7CTimerC8SetCOMPAEj>
     4e2:	0c 94 be 04 	jmp	0x97c	; 0x97c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb8>
     4e6:	0c 94 96 3c 	jmp	0x792c	; 0x792c <_ZN7CTimerF9SetPeriodEj>
     4ea:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4ee:	0c 94 a3 04 	jmp	0x946	; 0x946 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     4f2:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4f6:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     4fa:	0c 94 c0 3c 	jmp	0x7980	; 0x7980 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4fe:	0c 94 2f 34 	jmp	0x685e	; 0x685e <_ZN9CMBSender13OnReceiveByteEh+0x4e>
     502:	0c 94 78 3b 	jmp	0x76f0	; 0x76f0 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     506:	0c 94 d3 3b 	jmp	0x77a6	; 0x77a6 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     50a:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     50e:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     512:	0c 94 14 04 	jmp	0x828	; 0x828 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     516:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>

0000051a <__ctors_start>:
     51a:	a1 2f       	mov	r26, r17

0000051c <__ctors_end>:
     51c:	d6 2f       	mov	r29, r22

0000051e <__dtors_end>:
     51e:	11 24       	eor	r1, r1
     520:	1f be       	out	0x3f, r1	; 63
     522:	cf ef       	ldi	r28, 0xFF	; 255
     524:	cd bf       	out	0x3d, r28	; 61
     526:	df e3       	ldi	r29, 0x3F	; 63
     528:	de bf       	out	0x3e, r29	; 62
     52a:	00 e0       	ldi	r16, 0x00	; 0
     52c:	0c bf       	out	0x3c, r16	; 60

0000052e <__do_copy_data>:
     52e:	12 e2       	ldi	r17, 0x22	; 34
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e2       	ldi	r27, 0x20	; 32
     534:	e8 ee       	ldi	r30, 0xE8	; 232
     536:	f0 e8       	ldi	r31, 0x80	; 128
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	0b bf       	out	0x3b, r16	; 59
     53c:	02 c0       	rjmp	.+4      	; 0x542 <__do_copy_data+0x14>
     53e:	07 90       	elpm	r0, Z+
     540:	0d 92       	st	X+, r0
     542:	a4 3c       	cpi	r26, 0xC4	; 196
     544:	b1 07       	cpc	r27, r17
     546:	d9 f7       	brne	.-10     	; 0x53e <__do_copy_data+0x10>

00000548 <__do_clear_bss>:
     548:	26 e2       	ldi	r18, 0x26	; 38
     54a:	a4 ec       	ldi	r26, 0xC4	; 196
     54c:	b2 e2       	ldi	r27, 0x22	; 34
     54e:	01 c0       	rjmp	.+2      	; 0x552 <.do_clear_bss_start>

00000550 <.do_clear_bss_loop>:
     550:	1d 92       	st	X+, r1

00000552 <.do_clear_bss_start>:
     552:	ab 32       	cpi	r26, 0x2B	; 43
     554:	b2 07       	cpc	r27, r18
     556:	e1 f7       	brne	.-8      	; 0x550 <.do_clear_bss_loop>

00000558 <__do_global_ctors>:
     558:	12 e0       	ldi	r17, 0x02	; 2
     55a:	ce e8       	ldi	r28, 0x8E	; 142
     55c:	d2 e0       	ldi	r29, 0x02	; 2
     55e:	00 e0       	ldi	r16, 0x00	; 0
     560:	06 c0       	rjmp	.+12     	; 0x56e <__do_global_ctors+0x16>
     562:	21 97       	sbiw	r28, 0x01	; 1
     564:	01 09       	sbc	r16, r1
     566:	80 2f       	mov	r24, r16
     568:	fe 01       	movw	r30, r28
     56a:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <__tablejump2__>
     56e:	cd 38       	cpi	r28, 0x8D	; 141
     570:	d1 07       	cpc	r29, r17
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	08 07       	cpc	r16, r24
     576:	a9 f7       	brne	.-22     	; 0x562 <__do_global_ctors+0xa>
     578:	0e 94 04 31 	call	0x6208	; 0x6208 <main>
     57c:	0c 94 62 40 	jmp	0x80c4	; 0x80c4 <__do_global_dtors>

00000580 <__bad_interrupt>:
     580:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000584 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     584:	08 95       	ret

00000586 <_ZN13CDGUSDatabaseD1Ev>:
     586:	08 95       	ret

00000588 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     588:	fc 01       	movw	r30, r24
     58a:	62 83       	std	Z+2, r22	; 0x02
     58c:	73 83       	std	Z+3, r23	; 0x03
     58e:	94 2f       	mov	r25, r20
     590:	85 2f       	mov	r24, r21
     592:	84 83       	std	Z+4, r24	; 0x04
     594:	95 83       	std	Z+5, r25	; 0x05
     596:	46 83       	std	Z+6, r20	; 0x06
     598:	57 83       	std	Z+7, r21	; 0x07
     59a:	10 82       	st	Z, r1
     59c:	11 82       	std	Z+1, r1	; 0x01
     59e:	08 95       	ret

000005a0 <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	2a 97       	sbiw	r28, 0x0a	; 10
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5c0:	8a e5       	ldi	r24, 0x5A	; 90
     5c2:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c8:	85 2e       	mov	r8, r21
     5ca:	99 24       	eor	r9, r9
     5cc:	aa 24       	eor	r10, r10
     5ce:	bb 24       	eor	r11, r11
     5d0:	b2 2f       	mov	r27, r18
     5d2:	aa 27       	eor	r26, r26
     5d4:	99 27       	eor	r25, r25
     5d6:	88 27       	eor	r24, r24
     5d8:	88 29       	or	r24, r8
     5da:	99 29       	or	r25, r9
     5dc:	aa 29       	or	r26, r10
     5de:	bb 29       	or	r27, r11
     5e0:	49 01       	movw	r8, r18
     5e2:	5a 01       	movw	r10, r20
     5e4:	88 24       	eor	r8, r8
     5e6:	aa 24       	eor	r10, r10
     5e8:	bb 24       	eor	r11, r11
     5ea:	ba 2c       	mov	r11, r10
     5ec:	a9 2c       	mov	r10, r9
     5ee:	98 2c       	mov	r9, r8
     5f0:	88 24       	eor	r8, r8
     5f2:	88 29       	or	r24, r8
     5f4:	99 29       	or	r25, r9
     5f6:	aa 29       	or	r26, r10
     5f8:	bb 29       	or	r27, r11
     5fa:	49 01       	movw	r8, r18
     5fc:	5a 01       	movw	r10, r20
     5fe:	88 24       	eor	r8, r8
     600:	99 24       	eor	r9, r9
     602:	bb 24       	eor	r11, r11
     604:	89 2c       	mov	r8, r9
     606:	9a 2c       	mov	r9, r10
     608:	ab 2c       	mov	r10, r11
     60a:	bb 24       	eor	r11, r11
     60c:	88 29       	or	r24, r8
     60e:	99 29       	or	r25, r9
     610:	aa 29       	or	r26, r10
     612:	bb 29       	or	r27, r11
     614:	8b 83       	std	Y+3, r24	; 0x03
     616:	9c 83       	std	Y+4, r25	; 0x04
     618:	ad 83       	std	Y+5, r26	; 0x05
     61a:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     61c:	76 27       	eor	r23, r22
     61e:	67 27       	eor	r22, r23
     620:	76 27       	eor	r23, r22
     622:	6f 83       	std	Y+7, r22	; 0x07
     624:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     626:	10 27       	eor	r17, r16
     628:	01 27       	eor	r16, r17
     62a:	10 27       	eor	r17, r16
     62c:	09 87       	std	Y+9, r16	; 0x09
     62e:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     630:	2a e0       	ldi	r18, 0x0A	; 10
     632:	ae 01       	movw	r20, r28
     634:	4f 5f       	subi	r20, 0xFF	; 255
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	66 e5       	ldi	r22, 0x56	; 86
     63a:	f7 01       	movw	r30, r14
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	93 81       	ldd	r25, Z+3	; 0x03
     640:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     644:	f7 01       	movw	r30, r14
     646:	82 81       	ldd	r24, Z+2	; 0x02
     648:	93 81       	ldd	r25, Z+3	; 0x03
     64a:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64e:	2a 96       	adiw	r28, 0x0a	; 10
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	9f 90       	pop	r9
     666:	8f 90       	pop	r8
     668:	08 95       	ret

0000066a <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	2a 97       	sbiw	r28, 0x0a	; 10
     684:	cd bf       	out	0x3d, r28	; 61
     686:	de bf       	out	0x3e, r29	; 62
     688:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     68a:	8a e5       	ldi	r24, 0x5A	; 90
     68c:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68e:	80 ea       	ldi	r24, 0xA0	; 160
     690:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     692:	85 2e       	mov	r8, r21
     694:	99 24       	eor	r9, r9
     696:	aa 24       	eor	r10, r10
     698:	bb 24       	eor	r11, r11
     69a:	b2 2f       	mov	r27, r18
     69c:	aa 27       	eor	r26, r26
     69e:	99 27       	eor	r25, r25
     6a0:	88 27       	eor	r24, r24
     6a2:	88 29       	or	r24, r8
     6a4:	99 29       	or	r25, r9
     6a6:	aa 29       	or	r26, r10
     6a8:	bb 29       	or	r27, r11
     6aa:	49 01       	movw	r8, r18
     6ac:	5a 01       	movw	r10, r20
     6ae:	88 24       	eor	r8, r8
     6b0:	aa 24       	eor	r10, r10
     6b2:	bb 24       	eor	r11, r11
     6b4:	ba 2c       	mov	r11, r10
     6b6:	a9 2c       	mov	r10, r9
     6b8:	98 2c       	mov	r9, r8
     6ba:	88 24       	eor	r8, r8
     6bc:	88 29       	or	r24, r8
     6be:	99 29       	or	r25, r9
     6c0:	aa 29       	or	r26, r10
     6c2:	bb 29       	or	r27, r11
     6c4:	49 01       	movw	r8, r18
     6c6:	5a 01       	movw	r10, r20
     6c8:	88 24       	eor	r8, r8
     6ca:	99 24       	eor	r9, r9
     6cc:	bb 24       	eor	r11, r11
     6ce:	89 2c       	mov	r8, r9
     6d0:	9a 2c       	mov	r9, r10
     6d2:	ab 2c       	mov	r10, r11
     6d4:	bb 24       	eor	r11, r11
     6d6:	88 29       	or	r24, r8
     6d8:	99 29       	or	r25, r9
     6da:	aa 29       	or	r26, r10
     6dc:	bb 29       	or	r27, r11
     6de:	8b 83       	std	Y+3, r24	; 0x03
     6e0:	9c 83       	std	Y+4, r25	; 0x04
     6e2:	ad 83       	std	Y+5, r26	; 0x05
     6e4:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e6:	76 27       	eor	r23, r22
     6e8:	67 27       	eor	r22, r23
     6ea:	76 27       	eor	r23, r22
     6ec:	6f 83       	std	Y+7, r22	; 0x07
     6ee:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6f0:	10 27       	eor	r17, r16
     6f2:	01 27       	eor	r16, r17
     6f4:	10 27       	eor	r17, r16
     6f6:	09 87       	std	Y+9, r16	; 0x09
     6f8:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6fa:	2a e0       	ldi	r18, 0x0A	; 10
     6fc:	ae 01       	movw	r20, r28
     6fe:	4f 5f       	subi	r20, 0xFF	; 255
     700:	5f 4f       	sbci	r21, 0xFF	; 255
     702:	66 e5       	ldi	r22, 0x56	; 86
     704:	f7 01       	movw	r30, r14
     706:	82 81       	ldd	r24, Z+2	; 0x02
     708:	93 81       	ldd	r25, Z+3	; 0x03
     70a:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70e:	f7 01       	movw	r30, r14
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	93 81       	ldd	r25, Z+3	; 0x03
     714:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     718:	2a 96       	adiw	r28, 0x0a	; 10
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	08 95       	ret

00000734 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	1f 92       	push	r1
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     744:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     746:	21 e0       	ldi	r18, 0x01	; 1
     748:	ae 01       	movw	r20, r28
     74a:	4f 5f       	subi	r20, 0xFF	; 255
     74c:	5f 4f       	sbci	r21, 0xFF	; 255
     74e:	66 e5       	ldi	r22, 0x56	; 86
     750:	fc 01       	movw	r30, r24
     752:	82 81       	ldd	r24, Z+2	; 0x02
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     75a:	f8 01       	movw	r30, r16
     75c:	82 81       	ldd	r24, Z+2	; 0x02
     75e:	93 81       	ldd	r25, Z+3	; 0x03
     760:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret

00000770 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     770:	08 95       	ret

00000772 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     772:	dc 01       	movw	r26, r24
     774:	63 30       	cpi	r22, 0x03	; 3
     776:	31 f4       	brne	.+12     	; 0x784 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     778:	fa 01       	movw	r30, r20
     77a:	81 81       	ldd	r24, Z+1	; 0x01
     77c:	1f 96       	adiw	r26, 0x0f	; 15
     77e:	8c 93       	st	X, r24
     780:	1f 97       	sbiw	r26, 0x0f	; 15
     782:	06 c0       	rjmp	.+12     	; 0x790 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	66 35       	cpi	r22, 0x56	; 86
     786:	21 f4       	brne	.+8      	; 0x790 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     788:	fa 01       	movw	r30, r20
     78a:	80 81       	ld	r24, Z
     78c:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <DatabaseStatusRegister>
     790:	1f 96       	adiw	r26, 0x0f	; 15
     792:	4c 91       	ld	r20, X
     794:	1f 97       	sbiw	r26, 0x0f	; 15
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	40 33       	cpi	r20, 0x30	; 48
     79a:	51 05       	cpc	r21, r1
     79c:	08 f0       	brcs	.+2      	; 0x7a0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79e:	90 c0       	rjmp	.+288    	; 0x8c0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x14e>
     7a0:	fa 01       	movw	r30, r20
     7a2:	88 27       	eor	r24, r24
     7a4:	e2 50       	subi	r30, 0x02	; 2
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	8f 4f       	sbci	r24, 0xFF	; 255
     7aa:	0c 94 c3 3e 	jmp	0x7d86	; 0x7d86 <__tablejump2__>
     7ae:	80 e8       	ldi	r24, 0x80	; 128
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	1c 96       	adiw	r26, 0x0c	; 12
     7b4:	8d 93       	st	X+, r24
     7b6:	9c 93       	st	X, r25
     7b8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ba:	08 95       	ret
     7bc:	1c 96       	adiw	r26, 0x0c	; 12
     7be:	1d 92       	st	X+, r1
     7c0:	1c 92       	st	X, r1
     7c2:	1d 97       	sbiw	r26, 0x0d	; 13
     7c4:	08 95       	ret
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	1c 96       	adiw	r26, 0x0c	; 12
     7cc:	8d 93       	st	X+, r24
     7ce:	9c 93       	st	X, r25
     7d0:	1d 97       	sbiw	r26, 0x0d	; 13
     7d2:	08 95       	ret
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	1c 96       	adiw	r26, 0x0c	; 12
     7da:	8d 93       	st	X+, r24
     7dc:	9c 93       	st	X, r25
     7de:	1d 97       	sbiw	r26, 0x0d	; 13
     7e0:	08 95       	ret
     7e2:	88 e0       	ldi	r24, 0x08	; 8
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	1c 96       	adiw	r26, 0x0c	; 12
     7e8:	8d 93       	st	X+, r24
     7ea:	9c 93       	st	X, r25
     7ec:	1d 97       	sbiw	r26, 0x0d	; 13
     7ee:	08 95       	ret
     7f0:	80 e1       	ldi	r24, 0x10	; 16
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	1c 96       	adiw	r26, 0x0c	; 12
     7f6:	8d 93       	st	X+, r24
     7f8:	9c 93       	st	X, r25
     7fa:	1d 97       	sbiw	r26, 0x0d	; 13
     7fc:	08 95       	ret
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	1c 96       	adiw	r26, 0x0c	; 12
     804:	8d 93       	st	X+, r24
     806:	9c 93       	st	X, r25
     808:	1d 97       	sbiw	r26, 0x0d	; 13
     80a:	08 95       	ret
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	1c 96       	adiw	r26, 0x0c	; 12
     812:	8d 93       	st	X+, r24
     814:	9c 93       	st	X, r25
     816:	1d 97       	sbiw	r26, 0x0d	; 13
     818:	08 95       	ret
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	1c 96       	adiw	r26, 0x0c	; 12
     820:	8d 93       	st	X+, r24
     822:	9c 93       	st	X, r25
     824:	1d 97       	sbiw	r26, 0x0d	; 13
     826:	08 95       	ret
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	1c 96       	adiw	r26, 0x0c	; 12
     82e:	8d 93       	st	X+, r24
     830:	9c 93       	st	X, r25
     832:	1d 97       	sbiw	r26, 0x0d	; 13
     834:	08 95       	ret
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	1c 96       	adiw	r26, 0x0c	; 12
     83c:	8d 93       	st	X+, r24
     83e:	9c 93       	st	X, r25
     840:	1d 97       	sbiw	r26, 0x0d	; 13
     842:	08 95       	ret
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e2       	ldi	r25, 0x20	; 32
     848:	1c 96       	adiw	r26, 0x0c	; 12
     84a:	8d 93       	st	X+, r24
     84c:	9c 93       	st	X, r25
     84e:	1d 97       	sbiw	r26, 0x0d	; 13
     850:	08 95       	ret
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e3       	ldi	r25, 0x30	; 48
     856:	1c 96       	adiw	r26, 0x0c	; 12
     858:	8d 93       	st	X+, r24
     85a:	9c 93       	st	X, r25
     85c:	1d 97       	sbiw	r26, 0x0d	; 13
     85e:	08 95       	ret
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e1       	ldi	r25, 0x10	; 16
     864:	1c 96       	adiw	r26, 0x0c	; 12
     866:	8d 93       	st	X+, r24
     868:	9c 93       	st	X, r25
     86a:	1d 97       	sbiw	r26, 0x0d	; 13
     86c:	08 95       	ret
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e4       	ldi	r25, 0x40	; 64
     872:	1c 96       	adiw	r26, 0x0c	; 12
     874:	8d 93       	st	X+, r24
     876:	9c 93       	st	X, r25
     878:	1d 97       	sbiw	r26, 0x0d	; 13
     87a:	08 95       	ret
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	95 e0       	ldi	r25, 0x05	; 5
     880:	1c 96       	adiw	r26, 0x0c	; 12
     882:	8d 93       	st	X+, r24
     884:	9c 93       	st	X, r25
     886:	1d 97       	sbiw	r26, 0x0d	; 13
     888:	08 95       	ret
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	96 e0       	ldi	r25, 0x06	; 6
     88e:	1c 96       	adiw	r26, 0x0c	; 12
     890:	8d 93       	st	X+, r24
     892:	9c 93       	st	X, r25
     894:	1d 97       	sbiw	r26, 0x0d	; 13
     896:	08 95       	ret
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	1c 96       	adiw	r26, 0x0c	; 12
     89e:	8d 93       	st	X+, r24
     8a0:	9c 93       	st	X, r25
     8a2:	1d 97       	sbiw	r26, 0x0d	; 13
     8a4:	08 95       	ret
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	1c 96       	adiw	r26, 0x0c	; 12
     8ac:	8d 93       	st	X+, r24
     8ae:	9c 93       	st	X, r25
     8b0:	1d 97       	sbiw	r26, 0x0d	; 13
     8b2:	08 95       	ret
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	94 e0       	ldi	r25, 0x04	; 4
     8b8:	1c 96       	adiw	r26, 0x0c	; 12
     8ba:	8d 93       	st	X+, r24
     8bc:	9c 93       	st	X, r25
     8be:	1d 97       	sbiw	r26, 0x0d	; 13
     8c0:	08 95       	ret

000008c2 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
     8c2:	08 95       	ret

000008c4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	8c 01       	movw	r16, r24
     8d6:	eb 01       	movw	r28, r22
     8d8:	7a 01       	movw	r14, r20
     8da:	69 01       	movw	r12, r18
     8dc:	fa 01       	movw	r30, r20
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <_Z4swapj>
     8e6:	9c 01       	movw	r18, r24
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
     8ea:	cf 16       	cp	r12, r31
     8ec:	d1 04       	cpc	r13, r1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8f0:	7a c0       	rjmp	.+244    	; 0x9e6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8f2:	fe 01       	movw	r30, r28
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	e2 31       	cpi	r30, 0x12	; 18
     8f8:	f1 05       	cpc	r31, r1
     8fa:	08 f0       	brcs	.+2      	; 0x8fe <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8fc:	a0 c0       	rjmp	.+320    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     8fe:	88 27       	eor	r24, r24
     900:	e2 5d       	subi	r30, 0xD2	; 210
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	8f 4f       	sbci	r24, 0xFF	; 255
     906:	0c 94 c3 3e 	jmp	0x7d86	; 0x7d86 <__tablejump2__>
     90a:	f8 01       	movw	r30, r16
     90c:	e4 51       	subi	r30, 0x14	; 20
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	20 83       	st	Z, r18
     912:	31 83       	std	Z+1, r19	; 0x01
     914:	94 c0       	rjmp	.+296    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     916:	f8 01       	movw	r30, r16
     918:	e2 51       	subi	r30, 0x12	; 18
     91a:	ff 4f       	sbci	r31, 0xFF	; 255
     91c:	20 83       	st	Z, r18
     91e:	31 83       	std	Z+1, r19	; 0x01
     920:	8e c0       	rjmp	.+284    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     922:	f8 01       	movw	r30, r16
     924:	e0 51       	subi	r30, 0x10	; 16
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	20 83       	st	Z, r18
     92a:	31 83       	std	Z+1, r19	; 0x01
     92c:	88 c0       	rjmp	.+272    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     92e:	f8 01       	movw	r30, r16
     930:	ee 50       	subi	r30, 0x0E	; 14
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	20 83       	st	Z, r18
     936:	31 83       	std	Z+1, r19	; 0x01
     938:	82 c0       	rjmp	.+260    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     93a:	f8 01       	movw	r30, r16
     93c:	ec 50       	subi	r30, 0x0C	; 12
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	20 83       	st	Z, r18
     942:	31 83       	std	Z+1, r19	; 0x01
     944:	7c c0       	rjmp	.+248    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     946:	f8 01       	movw	r30, r16
     948:	e8 50       	subi	r30, 0x08	; 8
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	20 83       	st	Z, r18
     94e:	31 83       	std	Z+1, r19	; 0x01
     950:	76 c0       	rjmp	.+236    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     952:	f8 01       	movw	r30, r16
     954:	ea 50       	subi	r30, 0x0A	; 10
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	20 83       	st	Z, r18
     95a:	31 83       	std	Z+1, r19	; 0x01
     95c:	70 c0       	rjmp	.+224    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     95e:	f7 01       	movw	r30, r14
     960:	60 81       	ld	r22, Z
     962:	71 81       	ldd	r23, Z+1	; 0x01
     964:	82 81       	ldd	r24, Z+2	; 0x02
     966:	93 81       	ldd	r25, Z+3	; 0x03
     968:	0e 94 81 1b 	call	0x3702	; 0x3702 <_Z6swap32m>
     96c:	f8 01       	movw	r30, r16
     96e:	e6 52       	subi	r30, 0x26	; 38
     970:	ff 4f       	sbci	r31, 0xFF	; 255
     972:	60 83       	st	Z, r22
     974:	71 83       	std	Z+1, r23	; 0x01
     976:	82 83       	std	Z+2, r24	; 0x02
     978:	93 83       	std	Z+3, r25	; 0x03
     97a:	61 c0       	rjmp	.+194    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     97c:	f8 01       	movw	r30, r16
     97e:	e2 50       	subi	r30, 0x02	; 2
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	20 83       	st	Z, r18
     984:	31 83       	std	Z+1, r19	; 0x01
     986:	5b c0       	rjmp	.+182    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     988:	f8 01       	movw	r30, r16
     98a:	f3 95       	inc	r31
     98c:	20 83       	st	Z, r18
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	56 c0       	rjmp	.+172    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     992:	f8 01       	movw	r30, r16
     994:	ee 5f       	subi	r30, 0xFE	; 254
     996:	fe 4f       	sbci	r31, 0xFE	; 254
     998:	20 83       	st	Z, r18
     99a:	31 83       	std	Z+1, r19	; 0x01
     99c:	50 c0       	rjmp	.+160    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     99e:	f8 01       	movw	r30, r16
     9a0:	ec 5f       	subi	r30, 0xFC	; 252
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	20 83       	st	Z, r18
     9a6:	31 83       	std	Z+1, r19	; 0x01
     9a8:	4a c0       	rjmp	.+148    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9aa:	f8 01       	movw	r30, r16
     9ac:	ea 5f       	subi	r30, 0xFA	; 250
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	20 83       	st	Z, r18
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	44 c0       	rjmp	.+136    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9b6:	f8 01       	movw	r30, r16
     9b8:	e8 5f       	subi	r30, 0xF8	; 248
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	20 83       	st	Z, r18
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	3e c0       	rjmp	.+124    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9c2:	f8 01       	movw	r30, r16
     9c4:	e6 5f       	subi	r30, 0xF6	; 246
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	20 83       	st	Z, r18
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	38 c0       	rjmp	.+112    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9ce:	f8 01       	movw	r30, r16
     9d0:	e4 5f       	subi	r30, 0xF4	; 244
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	20 83       	st	Z, r18
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	32 c0       	rjmp	.+100    	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9da:	f8 01       	movw	r30, r16
     9dc:	e2 5f       	subi	r30, 0xF2	; 242
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	20 83       	st	Z, r18
     9e2:	31 83       	std	Z+1, r19	; 0x01
     9e4:	2c c0       	rjmp	.+88     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     9e6:	c1 30       	cpi	r28, 0x01	; 1
     9e8:	d1 05       	cpc	r29, r1
     9ea:	51 f4       	brne	.+20     	; 0xa00 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	a6 01       	movw	r20, r12
     9f2:	b7 01       	movw	r22, r14
     9f4:	c8 01       	movw	r24, r16
     9f6:	84 51       	subi	r24, 0x14	; 20
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
     9fa:	0e 94 47 1b 	call	0x368e	; 0x368e <_Z11ConvertDataPvS_jj>
     9fe:	1f c0       	rjmp	.+62     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a00:	c5 30       	cpi	r28, 0x05	; 5
     a02:	d1 05       	cpc	r29, r1
     a04:	51 f4       	brne	.+20     	; 0xa1a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x156>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a6 01       	movw	r20, r12
     a0c:	b7 01       	movw	r22, r14
     a0e:	c8 01       	movw	r24, r16
     a10:	8c 54       	subi	r24, 0x4C	; 76
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	0e 94 47 1b 	call	0x368e	; 0x368e <_Z11ConvertDataPvS_jj>
     a18:	12 c0       	rjmp	.+36     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a1a:	22 97       	sbiw	r28, 0x02	; 2
     a1c:	81 f4       	brne	.+32     	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a1e:	f8 01       	movw	r30, r16
     a20:	86 85       	ldd	r24, Z+14	; 0x0e
     a22:	86 30       	cpi	r24, 0x06	; 6
     a24:	50 f4       	brcc	.+20     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x176>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	a6 01       	movw	r20, r12
     a2c:	b7 01       	movw	r22, r14
     a2e:	c8 01       	movw	r24, r16
     a30:	82 51       	subi	r24, 0x12	; 18
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	0e 94 47 1b 	call	0x368e	; 0x368e <_Z11ConvertDataPvS_jj>
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x17a>
     a3a:	0e 94 85 38 	call	0x710a	; 0x710a <_ZN11CLaserBoard4BeepEv>
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <_Z13NormalizeStepRjS_S_jPj>:
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	6c 01       	movw	r12, r24
     a6a:	fb 01       	movw	r30, r22
     a6c:	7a 01       	movw	r14, r20
     a6e:	dc 01       	movw	r26, r24
     a70:	8d 90       	ld	r8, X+
     a72:	9c 90       	ld	r9, X
     a74:	da 01       	movw	r26, r20
     a76:	cd 91       	ld	r28, X+
     a78:	dc 91       	ld	r29, X
     a7a:	c4 01       	movw	r24, r8
     a7c:	be 01       	movw	r22, r28
     a7e:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
     a82:	6c 9f       	mul	r22, r28
     a84:	50 01       	movw	r10, r0
     a86:	6d 9f       	mul	r22, r29
     a88:	b0 0c       	add	r11, r0
     a8a:	7c 9f       	mul	r23, r28
     a8c:	b0 0c       	add	r11, r0
     a8e:	11 24       	eor	r1, r1
     a90:	c0 81       	ld	r28, Z
     a92:	d1 81       	ldd	r29, Z+1	; 0x01
     a94:	c8 19       	sub	r28, r8
     a96:	d9 09       	sbc	r29, r9
     a98:	f8 01       	movw	r30, r16
     a9a:	60 81       	ld	r22, Z
     a9c:	71 81       	ldd	r23, Z+1	; 0x01
     a9e:	d7 01       	movw	r26, r14
     aa0:	6d 93       	st	X+, r22
     aa2:	7c 93       	st	X, r23
     aa4:	ce 01       	movw	r24, r28
     aa6:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
     aaa:	26 17       	cp	r18, r22
     aac:	37 07       	cpc	r19, r23
     aae:	60 f4       	brcc	.+24     	; 0xac8 <_Z13NormalizeStepRjS_S_jPj+0x78>
     ab0:	32 96       	adiw	r30, 0x02	; 2
     ab2:	61 91       	ld	r22, Z+
     ab4:	71 91       	ld	r23, Z+
     ab6:	d7 01       	movw	r26, r14
     ab8:	6d 93       	st	X+, r22
     aba:	7c 93       	st	X, r23
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
     ac2:	26 17       	cp	r18, r22
     ac4:	37 07       	cpc	r19, r23
     ac6:	a8 f3       	brcs	.-22     	; 0xab2 <_Z13NormalizeStepRjS_S_jPj+0x62>
     ac8:	f6 01       	movw	r30, r12
     aca:	a0 82       	st	Z, r10
     acc:	b1 82       	std	Z+1, r11	; 0x01
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	9f 90       	pop	r9
     ae4:	8f 90       	pop	r8
     ae6:	08 95       	ret

00000ae8 <_ZN16CLaserControlAppC1Ev>:
     ae8:	2e e7       	ldi	r18, 0x7E	; 126
     aea:	31 e2       	ldi	r19, 0x21	; 33
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
     af0:	31 83       	std	Z+1, r19	; 0x01
     af2:	08 95       	ret

00000af4 <_ZN16CLaserControlAppD1Ev>:
     af4:	2e e7       	ldi	r18, 0x7E	; 126
     af6:	31 e2       	ldi	r19, 0x21	; 33
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	31 83       	std	Z+1, r19	; 0x01
     afe:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <_ZN16CMBEventsHandlerD1Ev>
     b02:	08 95       	ret

00000b04 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>:
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	1f 92       	push	r1
     b0a:	1f 92       	push	r1
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	fc 01       	movw	r30, r24
     b12:	e8 52       	subi	r30, 0x28	; 40
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	60 81       	ld	r22, Z
     b18:	71 81       	ldd	r23, Z+1	; 0x01
     b1a:	cb 01       	movw	r24, r22
     b1c:	a0 e0       	ldi	r26, 0x00	; 0
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	bc 01       	movw	r22, r24
     b22:	cd 01       	movw	r24, r26
     b24:	05 2e       	mov	r0, r21
     b26:	5a e0       	ldi	r21, 0x0A	; 10
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	5a 95       	dec	r21
     b32:	d1 f7       	brne	.-12     	; 0xb28 <_ZN16CLaserControlApp18SetLaserDiodePowerEv+0x24>
     b34:	50 2d       	mov	r21, r0
     b36:	24 ef       	ldi	r18, 0xF4	; 244
     b38:	31 e0       	ldi	r19, 0x01	; 1
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
     b42:	c9 01       	movw	r24, r18
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	6f ef       	ldi	r22, 0xFF	; 255
     b4e:	7f e0       	ldi	r23, 0x0F	; 15
     b50:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z3minjj>
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	42 e0       	ldi	r20, 0x02	; 2
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	81 e2       	ldi	r24, 0x21	; 33
     b64:	96 e2       	ldi	r25, 0x26	; 38
     b66:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_ZN4CSPI4SendEPhj>
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <_ZN16CLaserControlApp11GetVariableEjj>:
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	cc 5d       	subi	r28, 0xDC	; 220
     b7c:	de 4f       	sbci	r29, 0xFE	; 254
     b7e:	88 81       	ld	r24, Y
     b80:	99 81       	ldd	r25, Y+1	; 0x01
     b82:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     b86:	88 81       	ld	r24, Y
     b88:	99 81       	ldd	r25, Y+1	; 0x01
     b8a:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     b8e:	88 81       	ld	r24, Y
     b90:	99 81       	ldd	r25, Y+1	; 0x01
     b92:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <_ZN9CMBSender18WaitMODBUSListenerEv>
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <_ZN16CLaserControlApp11SetVariableEjPjj>:
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
     ba2:	cc 5d       	subi	r28, 0xDC	; 220
     ba4:	de 4f       	sbci	r29, 0xFE	; 254
     ba6:	88 81       	ld	r24, Y
     ba8:	99 81       	ldd	r25, Y+1	; 0x01
     baa:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bae:	88 81       	ld	r24, Y
     bb0:	99 81       	ldd	r25, Y+1	; 0x01
     bb2:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZN16CLaserControlApp12SetPictureIdEj>:
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	1f 92       	push	r1
     bc6:	1f 92       	push	r1
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	8c 01       	movw	r16, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <_Z4swapj>
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	0c 5d       	subi	r16, 0xDC	; 220
     bda:	1e 4f       	sbci	r17, 0xFE	; 254
     bdc:	22 e0       	ldi	r18, 0x02	; 2
     bde:	ae 01       	movw	r20, r28
     be0:	4f 5f       	subi	r20, 0xFF	; 255
     be2:	5f 4f       	sbci	r21, 0xFF	; 255
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	f8 01       	movw	r30, r16
     be8:	80 81       	ld	r24, Z
     bea:	91 81       	ldd	r25, Z+1	; 0x01
     bec:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     bf0:	f8 01       	movw	r30, r16
     bf2:	80 81       	ld	r24, Z
     bf4:	91 81       	ldd	r25, Z+1	; 0x01
     bf6:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     c08:	fc 01       	movw	r30, r24
     c0a:	83 89       	ldd	r24, Z+19	; 0x13
     c0c:	88 23       	and	r24, r24
     c0e:	21 f0       	breq	.+8      	; 0xc18 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     c10:	81 ee       	ldi	r24, 0xE1	; 225
     c12:	95 e2       	ldi	r25, 0x25	; 37
     c14:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN11CLaserBoard6PWMOffEv>
     c18:	08 95       	ret

00000c1a <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     c1a:	fc 01       	movw	r30, r24
     c1c:	83 89       	ldd	r24, Z+19	; 0x13
     c1e:	88 23       	and	r24, r24
     c20:	21 f0       	breq	.+8      	; 0xc2a <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     c22:	81 ee       	ldi	r24, 0xE1	; 225
     c24:	95 e2       	ldi	r25, 0x25	; 37
     c26:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN11CLaserBoard5PWMOnEv>
     c2a:	08 95       	ret

00000c2c <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     c2c:	0e 94 04 06 	call	0xc08	; 0xc08 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     c30:	08 95       	ret

00000c32 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     c32:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     c36:	08 95       	ret

00000c38 <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     c38:	08 95       	ret

00000c3a <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     c3a:	08 95       	ret

00000c3c <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     c3c:	08 95       	ret

00000c3e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>:
	update = true;	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
}

void CLaserControlApp::UpdateLimits(uint16_t freq, uint16_t duration, uint16_t energy, APP_PROFILE mode)
{
     c3e:	8f 92       	push	r8
     c40:	9f 92       	push	r9
     c42:	af 92       	push	r10
     c44:	bf 92       	push	r11
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	6b 01       	movw	r12, r22
     c58:	7a 01       	movw	r14, r20
	bool UpdateFreq = false;
	switch (mode)
     c5a:	02 30       	cpi	r16, 0x02	; 2
     c5c:	81 f0       	breq	.+32     	; 0xc7e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x40>
     c5e:	18 f4       	brcc	.+6      	; 0xc66 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x28>
     c60:	01 30       	cpi	r16, 0x01	; 1
     c62:	31 f0       	breq	.+12     	; 0xc70 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x32>
     c64:	33 c0       	rjmp	.+102    	; 0xccc <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
     c66:	03 30       	cpi	r16, 0x03	; 3
     c68:	b9 f0       	breq	.+46     	; 0xc98 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x5a>
     c6a:	04 30       	cpi	r16, 0x04	; 4
     c6c:	11 f1       	breq	.+68     	; 0xcb2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x74>
     c6e:	2e c0       	rjmp	.+92     	; 0xccc <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x8e>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:		
			pstGUI[mode].m_wMinFreq = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	88 af       	std	Y+56, r24	; 0x38
     c76:	99 af       	std	Y+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     c78:	8e ab       	std	Y+54, r24	; 0x36
     c7a:	9f ab       	std	Y+55, r25	; 0x37
     c7c:	44 c0       	rjmp	.+136    	; 0xd06 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc8>
			UpdateFreq = true;
			break;
		case PROFILE_SLOW:			
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fe 01       	movw	r30, r28
     c84:	ee 5a       	subi	r30, 0xAE	; 174
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 83       	st	Z, r24
     c8a:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	32 97       	sbiw	r30, 0x02	; 2
     c92:	80 83       	st	Z, r24
     c94:	91 83       	std	Z+1, r25	; 0x01
			break;
     c96:	1d c0       	rjmp	.+58     	; 0xcd2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
		case PROFILE_MEDIUM:		
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	fe 01       	movw	r30, r28
     c9e:	e4 59       	subi	r30, 0x94	; 148
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	80 83       	st	Z, r24
     ca4:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	32 97       	sbiw	r30, 0x02	; 2
     cac:	80 83       	st	Z, r24
     cae:	91 83       	std	Z+1, r25	; 0x01
			break;
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     cb2:	86 e0       	ldi	r24, 0x06	; 6
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	fe 01       	movw	r30, r28
     cb8:	ea 57       	subi	r30, 0x7A	; 122
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
     cbe:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	32 97       	sbiw	r30, 0x02	; 2
     cc6:	80 83       	st	Z, r24
     cc8:	91 83       	std	Z+1, r25	; 0x01
			break;
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
	}
	if (mode != PROFILE_SINGLE)	
     ccc:	01 30       	cpi	r16, 0x01	; 1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x94>
     cd0:	b2 c0       	rjmp	.+356    	; 0xe36 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x1f8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
     cd2:	80 2f       	mov	r24, r16
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	fe 01       	movw	r30, r28
     cd8:	2a e1       	ldi	r18, 0x1A	; 26
     cda:	02 9f       	mul	r16, r18
     cdc:	e0 0d       	add	r30, r0
     cde:	f1 1d       	adc	r31, r1
     ce0:	11 24       	eor	r1, r1
     ce2:	26 8d       	ldd	r18, Z+30	; 0x1e
     ce4:	37 8d       	ldd	r19, Z+31	; 0x1f
     ce6:	c2 16       	cp	r12, r18
     ce8:	d3 06       	cpc	r13, r19
     cea:	68 f0       	brcs	.+26     	; 0xd06 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xc8>
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
     cec:	2a e1       	ldi	r18, 0x1A	; 26
     cee:	28 9f       	mul	r18, r24
     cf0:	f0 01       	movw	r30, r0
     cf2:	29 9f       	mul	r18, r25
     cf4:	f0 0d       	add	r31, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	ec 0f       	add	r30, r28
     cfa:	fd 1f       	adc	r31, r29
     cfc:	84 8d       	ldd	r24, Z+28	; 0x1c
     cfe:	95 8d       	ldd	r25, Z+29	; 0x1d
     d00:	8c 15       	cp	r24, r12
     d02:	9d 05       	cpc	r25, r13
     d04:	28 f4       	brcc	.+10     	; 0xd10 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0xd2>
	}
	
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
     d06:	fe 01       	movw	r30, r28
     d08:	e2 51       	subi	r30, 0x12	; 18
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	c0 82       	st	Z, r12
     d0e:	d1 82       	std	Z+1, r13	; 0x01
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     d10:	c6 01       	movw	r24, r12
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	fc 01       	movw	r30, r24
     d18:	ec 5d       	subi	r30, 0xDC	; 220
     d1a:	fe 4d       	sbci	r31, 0xDE	; 222
     d1c:	20 81       	ld	r18, Z
     d1e:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     d20:	fc 01       	movw	r30, r24
     d22:	e2 5f       	subi	r30, 0xF2	; 242
     d24:	fe 4d       	sbci	r31, 0xDE	; 222
     d26:	01 90       	ld	r0, Z+
     d28:	f0 81       	ld	r31, Z
     d2a:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     d2c:	dc 01       	movw	r26, r24
     d2e:	a8 50       	subi	r26, 0x08	; 8
     d30:	bf 4d       	sbci	r27, 0xDF	; 223
     d32:	ad 90       	ld	r10, X+
     d34:	bc 90       	ld	r11, X
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	a4 1a       	sub	r10, r20
     d3a:	b1 08       	sbc	r11, r1
     d3c:	cf 01       	movw	r24, r30
     d3e:	82 1b       	sub	r24, r18
     d40:	93 0b       	sbc	r25, r19
     d42:	b5 01       	movw	r22, r10
     d44:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
	
	if (mode == PROFILE_MEDIUM)
     d48:	03 30       	cpi	r16, 0x03	; 3
     d4a:	21 f4       	brne	.+8      	; 0xd54 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
	{
		MinD = 10;
		MaxD = 100;
     d4c:	e4 e6       	ldi	r30, 0x64	; 100
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t MaxD = MaxDurationTable[freq];
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
	
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
     d50:	2a e0       	ldi	r18, 0x0A	; 10
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	52 2f       	mov	r21, r18
     d56:	43 2f       	mov	r20, r19
     d58:	2e 15       	cp	r18, r14
     d5a:	3f 05       	cpc	r19, r15
     d5c:	10 f4       	brcc	.+4      	; 0xd62 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x124>
     d5e:	5e 2d       	mov	r21, r14
     d60:	4f 2d       	mov	r20, r15
     d62:	85 2f       	mov	r24, r21
     d64:	94 2f       	mov	r25, r20
     d66:	e8 17       	cp	r30, r24
     d68:	f9 07       	cpc	r31, r25
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x130>
     d6c:	cf 01       	movw	r24, r30
     d6e:	e0 2e       	mov	r14, r16
     d70:	f1 2c       	mov	r15, r1
     d72:	4e 01       	movw	r8, r28
     d74:	aa e1       	ldi	r26, 0x1A	; 26
     d76:	0a 9f       	mul	r16, r26
     d78:	80 0c       	add	r8, r0
     d7a:	91 1c       	adc	r9, r1
     d7c:	11 24       	eor	r1, r1
	
	// Update duration helpers
	if (duration < MinD)	duration = MinD;
	if (duration > MaxD)	duration = MaxD;
		
	if ((pstGUI[mode].m_wMinDuration != MinD) || (pstGUI[mode].m_wMaxDuration != MaxD))
     d7e:	d4 01       	movw	r26, r8
     d80:	5a 96       	adiw	r26, 0x1a	; 26
     d82:	4d 91       	ld	r20, X+
     d84:	5c 91       	ld	r21, X
     d86:	5b 97       	sbiw	r26, 0x1b	; 27
     d88:	42 17       	cp	r20, r18
     d8a:	53 07       	cpc	r21, r19
     d8c:	81 f4       	brne	.+32     	; 0xdae <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x170>
     d8e:	0a e1       	ldi	r16, 0x1A	; 26
     d90:	0e 9d       	mul	r16, r14
     d92:	a0 01       	movw	r20, r0
     d94:	0f 9d       	mul	r16, r15
     d96:	50 0d       	add	r21, r0
     d98:	11 24       	eor	r1, r1
     d9a:	4c 0f       	add	r20, r28
     d9c:	5d 1f       	adc	r21, r29
     d9e:	da 01       	movw	r26, r20
     da0:	58 96       	adiw	r26, 0x18	; 24
     da2:	4d 91       	ld	r20, X+
     da4:	5c 91       	ld	r21, X
     da6:	59 97       	sbiw	r26, 0x19	; 25
     da8:	4e 17       	cp	r20, r30
     daa:	5f 07       	cpc	r21, r31
     dac:	a1 f0       	breq	.+40     	; 0xdd6 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x198>
	{
		pstGUI[mode].m_wMinDuration = MinD;
     dae:	d4 01       	movw	r26, r8
     db0:	5a 96       	adiw	r26, 0x1a	; 26
     db2:	2d 93       	st	X+, r18
     db4:	3c 93       	st	X, r19
     db6:	5b 97       	sbiw	r26, 0x1b	; 27
		pstGUI[mode].m_wMaxDuration = MaxD;	
     db8:	4a e1       	ldi	r20, 0x1A	; 26
     dba:	4e 9d       	mul	r20, r14
     dbc:	d0 01       	movw	r26, r0
     dbe:	4f 9d       	mul	r20, r15
     dc0:	b0 0d       	add	r27, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	ac 0f       	add	r26, r28
     dc6:	bd 1f       	adc	r27, r29
     dc8:	58 96       	adiw	r26, 0x18	; 24
     dca:	ed 93       	st	X+, r30
     dcc:	fc 93       	st	X, r31
     dce:	59 97       	sbiw	r26, 0x19	; 25
		pstGUI[mode].updateDuration = true;
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	9c 96       	adiw	r26, 0x2c	; 44
     dd4:	4c 93       	st	X, r20
	}

	uint16_t index = (duration - MinD) / Delta;
     dd6:	82 1b       	sub	r24, r18
     dd8:	93 0b       	sbc	r25, r19
     dda:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_Z3maxjj>
     de6:	b5 01       	movw	r22, r10
     de8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
     dec:	4b e0       	ldi	r20, 0x0B	; 11
     dee:	4c 9d       	mul	r20, r12
     df0:	90 01       	movw	r18, r0
     df2:	4d 9d       	mul	r20, r13
     df4:	30 0d       	add	r19, r0
     df6:	11 24       	eor	r1, r1
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	fc 01       	movw	r30, r24
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	ea 5f       	subi	r30, 0xFA	; 250
     e04:	ff 4d       	sbci	r31, 0xDF	; 223
     e06:	20 81       	ld	r18, Z
     e08:	31 81       	ldd	r19, Z+1	; 0x01
     e0a:	8a e1       	ldi	r24, 0x1A	; 26
     e0c:	8e 9d       	mul	r24, r14
     e0e:	f0 01       	movw	r30, r0
     e10:	8f 9d       	mul	r24, r15
     e12:	f0 0d       	add	r31, r0
     e14:	11 24       	eor	r1, r1
     e16:	ec 0f       	add	r30, r28
     e18:	fd 1f       	adc	r31, r29
     e1a:	24 8b       	std	Z+20, r18	; 0x14
     e1c:	35 8b       	std	Z+21, r19	; 0x15
		
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
     e1e:	40 a1       	ldd	r20, Z+32	; 0x20
     e20:	51 a1       	ldd	r21, Z+33	; 0x21
		
	if ((pstGUI[mode].m_wMinEnergy_ != Offset) || (pstGUI[mode].m_wMaxEnergy_ != MaxEnergy))
     e22:	86 89       	ldd	r24, Z+22	; 0x16
     e24:	97 89       	ldd	r25, Z+23	; 0x17
     e26:	84 17       	cp	r24, r20
     e28:	95 07       	cpc	r25, r21
     e2a:	11 f1       	breq	.+68     	; 0xe70 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x232>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
     e2c:	46 8b       	std	Z+22, r20	; 0x16
     e2e:	57 8b       	std	Z+23, r21	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	85 a7       	std	Z+45, r24	; 0x2d
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x232>
	// Update Frequency
	if (UpdateFreq) 
		laserDiodeData.laserprofile.Frequency = freq;
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     e36:	c6 01       	movw	r24, r12
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	fc 01       	movw	r30, r24
     e3e:	ec 5d       	subi	r30, 0xDC	; 220
     e40:	fe 4d       	sbci	r31, 0xDE	; 222
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
     e46:	fc 01       	movw	r30, r24
     e48:	e2 5f       	subi	r30, 0xF2	; 242
     e4a:	fe 4d       	sbci	r31, 0xDE	; 222
     e4c:	01 90       	ld	r0, Z+
     e4e:	f0 81       	ld	r31, Z
     e50:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     e52:	dc 01       	movw	r26, r24
     e54:	a8 50       	subi	r26, 0x08	; 8
     e56:	bf 4d       	sbci	r27, 0xDF	; 223
     e58:	ad 90       	ld	r10, X+
     e5a:	bc 90       	ld	r11, X
     e5c:	b1 e0       	ldi	r27, 0x01	; 1
     e5e:	ab 1a       	sub	r10, r27
     e60:	b1 08       	sbc	r11, r1
     e62:	cf 01       	movw	r24, r30
     e64:	82 1b       	sub	r24, r18
     e66:	93 0b       	sbc	r25, r19
     e68:	b5 01       	movw	r22, r10
     e6a:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
     e6e:	72 cf       	rjmp	.-284    	; 0xd54 <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM+0x116>
	{
		pstGUI[mode].m_wMinEnergy_ = Offset;
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
		pstGUI[mode].updateEnergy = true;
	}
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	08 95       	ret

00000e88 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
     e88:	3f 92       	push	r3
     e8a:	4f 92       	push	r4
     e8c:	5f 92       	push	r5
     e8e:	6f 92       	push	r6
     e90:	7f 92       	push	r7
     e92:	8f 92       	push	r8
     e94:	9f 92       	push	r9
     e96:	af 92       	push	r10
     e98:	bf 92       	push	r11
     e9a:	cf 92       	push	r12
     e9c:	df 92       	push	r13
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	2a 97       	sbiw	r28, 0x0a	; 10
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	7c 01       	movw	r14, r24
     eb6:	6b 01       	movw	r12, r22
     eb8:	5a 01       	movw	r10, r20
     eba:	49 01       	movw	r8, r18
     ebc:	30 2e       	mov	r3, r16
	bool UpdateFreq = false;
	switch (mode)
     ebe:	22 e0       	ldi	r18, 0x02	; 2
     ec0:	02 17       	cp	r16, r18
     ec2:	01 f1       	breq	.+64     	; 0xf04 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x7c>
     ec4:	20 17       	cp	r18, r16
     ec6:	20 f0       	brcs	.+8      	; 0xed0 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x48>
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	04 17       	cp	r16, r20
     ecc:	41 f0       	breq	.+16     	; 0xede <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x56>
     ece:	41 c0       	rjmp	.+130    	; 0xf52 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	08 17       	cp	r16, r24
     ed4:	21 f1       	breq	.+72     	; 0xf1e <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x96>
     ed6:	a4 e0       	ldi	r26, 0x04	; 4
     ed8:	0a 17       	cp	r16, r26
     eda:	71 f1       	breq	.+92     	; 0xf38 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xb0>
     edc:	3a c0       	rjmp	.+116    	; 0xf52 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xca>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	f7 01       	movw	r30, r14
     ee4:	80 af       	std	Z+56, r24	; 0x38
     ee6:	91 af       	std	Z+57, r25	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
     ee8:	86 ab       	std	Z+54, r24	; 0x36
     eea:	97 ab       	std	Z+55, r25	; 0x37
			if (freq != 1)
     eec:	db 01       	movw	r26, r22
     eee:	8d 91       	ld	r24, X+
     ef0:	9c 91       	ld	r25, X
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	09 f4       	brne	.+2      	; 0xefa <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x72>
     ef8:	9b c1       	rjmp	.+822    	; 0x1230 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a8>
			{
				freq = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	8d 93       	st	X+, r24
     f00:	9c 93       	st	X, r25
     f02:	97 c1       	rjmp	.+814    	; 0x1232 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3aa>
				UpdateFreq = true;
			}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	f7 01       	movw	r30, r14
     f0a:	ee 5a       	subi	r30, 0xAE	; 174
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 83       	st	Z, r24
     f10:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	32 97       	sbiw	r30, 0x02	; 2
     f18:	80 83       	st	Z, r24
     f1a:	91 83       	std	Z+1, r25	; 0x01
		break;
     f1c:	1e c0       	rjmp	.+60     	; 0xf5a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	f7 01       	movw	r30, r14
     f24:	e4 59       	subi	r30, 0x94	; 148
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 83       	st	Z, r24
     f2a:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	32 97       	sbiw	r30, 0x02	; 2
     f32:	80 83       	st	Z, r24
     f34:	91 83       	std	Z+1, r25	; 0x01
		break;
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	f7 01       	movw	r30, r14
     f3e:	ea 57       	subi	r30, 0x7A	; 122
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 83       	st	Z, r24
     f44:	91 83       	std	Z+1, r25	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
     f46:	8a e0       	ldi	r24, 0x0A	; 10
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	32 97       	sbiw	r30, 0x02	; 2
     f4c:	80 83       	st	Z, r24
     f4e:	91 83       	std	Z+1, r25	; 0x01
		break;
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
	}
	
	if (mode != PROFILE_SINGLE)
     f52:	b1 e0       	ldi	r27, 0x01	; 1
     f54:	3b 16       	cp	r3, r27
     f56:	09 f4       	brne	.+2      	; 0xf5a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0xd2>
     f58:	6f c1       	rjmp	.+734    	; 0x1238 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3b0>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
     f5a:	f6 01       	movw	r30, r12
     f5c:	20 81       	ld	r18, Z
     f5e:	31 81       	ldd	r19, Z+1	; 0x01
     f60:	83 2d       	mov	r24, r3
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	f7 01       	movw	r30, r14
     f66:	4a e1       	ldi	r20, 0x1A	; 26
     f68:	34 9e       	mul	r3, r20
     f6a:	e0 0d       	add	r30, r0
     f6c:	f1 1d       	adc	r31, r1
     f6e:	11 24       	eor	r1, r1
     f70:	46 8d       	ldd	r20, Z+30	; 0x1e
     f72:	57 8d       	ldd	r21, Z+31	; 0x1f
     f74:	24 17       	cp	r18, r20
     f76:	35 07       	cpc	r19, r21
     f78:	88 f4       	brcc	.+34     	; 0xf9c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x114>
     f7a:	d6 01       	movw	r26, r12
     f7c:	4d 93       	st	X+, r20
     f7e:	5c 93       	st	X, r21
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
     f80:	2a e1       	ldi	r18, 0x1A	; 26
     f82:	28 9f       	mul	r18, r24
     f84:	f0 01       	movw	r30, r0
     f86:	29 9f       	mul	r18, r25
     f88:	f0 0d       	add	r31, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	ee 0d       	add	r30, r14
     f8e:	ff 1d       	adc	r31, r15
     f90:	84 8d       	ldd	r24, Z+28	; 0x1c
     f92:	95 8d       	ldd	r25, Z+29	; 0x1d
     f94:	84 17       	cp	r24, r20
     f96:	95 07       	cpc	r25, r21
     f98:	70 f0       	brcs	.+28     	; 0xfb6 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x12e>
     f9a:	10 c0       	rjmp	.+32     	; 0xfbc <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x134>
     f9c:	4a e1       	ldi	r20, 0x1A	; 26
     f9e:	48 9f       	mul	r20, r24
     fa0:	f0 01       	movw	r30, r0
     fa2:	49 9f       	mul	r20, r25
     fa4:	f0 0d       	add	r31, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	ee 0d       	add	r30, r14
     faa:	ff 1d       	adc	r31, r15
     fac:	84 8d       	ldd	r24, Z+28	; 0x1c
     fae:	95 8d       	ldd	r25, Z+29	; 0x1d
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	70 f4       	brcc	.+28     	; 0xfd2 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x14a>
     fb6:	f6 01       	movw	r30, r12
     fb8:	80 83       	st	Z, r24
     fba:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (UpdateFreq)
	{
		// Update Frequency
		laserDiodeData.laserprofile.Frequency = freq;
     fbc:	d6 01       	movw	r26, r12
     fbe:	8d 91       	ld	r24, X+
     fc0:	9c 91       	ld	r25, X
     fc2:	f7 01       	movw	r30, r14
     fc4:	e2 51       	subi	r30, 0x12	; 18
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 83       	st	Z, r24
     fca:	91 83       	std	Z+1, r25	; 0x01
		update = true;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	f7 01       	movw	r30, r14
     fd0:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
     fd2:	d6 01       	movw	r26, r12
     fd4:	2d 91       	ld	r18, X+
     fd6:	3c 91       	ld	r19, X
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	f9 01       	movw	r30, r18
     fde:	ec 5d       	subi	r30, 0xDC	; 220
     fe0:	fe 4d       	sbci	r31, 0xDE	; 222
     fe2:	40 81       	ld	r20, Z
     fe4:	51 81       	ldd	r21, Z+1	; 0x01
     fe6:	49 87       	std	Y+9, r20	; 0x09
     fe8:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
     fea:	f9 01       	movw	r30, r18
     fec:	e2 5f       	subi	r30, 0xF2	; 242
     fee:	fe 4d       	sbci	r31, 0xDE	; 222
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
     ff8:	84 1b       	sub	r24, r20
     ffa:	95 0b       	sbc	r25, r21
     ffc:	f9 01       	movw	r30, r18
     ffe:	e8 50       	subi	r30, 0x08	; 8
    1000:	ff 4d       	sbci	r31, 0xDF	; 223
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	61 50       	subi	r22, 0x01	; 1
    1008:	71 09       	sbc	r23, r1
    100a:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    100e:	3b 01       	movw	r6, r22
	uint16_t step ;
	
	if (mode == PROFILE_MEDIUM)
    1010:	b3 e0       	ldi	r27, 0x03	; 3
    1012:	3b 12       	cpse	r3, r27
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
	{
		MinD = 10;
    1016:	8a e0       	ldi	r24, 0x0A	; 10
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	89 87       	std	Y+9, r24	; 0x09
    101c:	9a 87       	std	Y+10, r25	; 0x0a
		MaxD = 100;	
    101e:	84 e6       	ldi	r24, 0x64	; 100
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	8f 83       	std	Y+7, r24	; 0x07
    1024:	98 87       	std	Y+8, r25	; 0x08
	}
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
    1026:	f5 01       	movw	r30, r10
    1028:	40 81       	ld	r20, Z
    102a:	51 81       	ldd	r21, Z+1	; 0x01
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	48 17       	cp	r20, r24
    1032:	59 07       	cpc	r21, r25
    1034:	08 f0       	brcs	.+2      	; 0x1038 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1b0>
    1036:	20 c1       	rjmp	.+576    	; 0x1278 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3f0>
    1038:	80 83       	st	Z, r24
    103a:	91 83       	std	Z+1, r25	; 0x01
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    103c:	2f 81       	ldd	r18, Y+7	; 0x07
    103e:	38 85       	ldd	r19, Y+8	; 0x08
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	18 f4       	brcc	.+6      	; 0x104c <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1c4>
    1046:	d5 01       	movw	r26, r10
    1048:	2d 93       	st	X+, r18
    104a:	3c 93       	st	X, r19
	
	if (UpdateDuration)
	{			
		// Update duration helpers	
		step = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	9e 83       	std	Y+6, r25	; 0x06
		NormalizeStep(MinD, MaxD, step, 20, step_table);
    1054:	08 e0       	ldi	r16, 0x08	; 8
    1056:	10 e2       	ldi	r17, 0x20	; 32
    1058:	24 e1       	ldi	r18, 0x14	; 20
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	ae 01       	movw	r20, r28
    105e:	4b 5f       	subi	r20, 0xFB	; 251
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	be 01       	movw	r22, r28
    1064:	69 5f       	subi	r22, 0xF9	; 249
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	ce 01       	movw	r24, r28
    106a:	09 96       	adiw	r24, 0x09	; 9
    106c:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wDurationStep = step;
    1070:	6d 81       	ldd	r22, Y+5	; 0x05
    1072:	7e 81       	ldd	r23, Y+6	; 0x06
    1074:	4a e1       	ldi	r20, 0x1A	; 26
    1076:	03 2d       	mov	r16, r3
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	f7 01       	movw	r30, r14
    107c:	43 9d       	mul	r20, r3
    107e:	e0 0d       	add	r30, r0
    1080:	f1 1d       	adc	r31, r1
    1082:	11 24       	eor	r1, r1
    1084:	60 a7       	std	Z+40, r22	; 0x28
    1086:	71 a7       	std	Z+41, r23	; 0x29
		pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    1088:	4f 80       	ldd	r4, Y+7	; 0x07
    108a:	58 84       	ldd	r5, Y+8	; 0x08
    108c:	29 85       	ldd	r18, Y+9	; 0x09
    108e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1090:	c2 01       	movw	r24, r4
    1092:	82 1b       	sub	r24, r18
    1094:	93 0b       	sbc	r25, r19
    1096:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    109a:	62 a7       	std	Z+42, r22	; 0x2a
    109c:	73 a7       	std	Z+43, r23	; 0x2b
		pstGUI[mode].m_wDurationOffset = MinD;
    109e:	26 a3       	std	Z+38, r18	; 0x26
    10a0:	37 a3       	std	Z+39, r19	; 0x27
		pstGUI[mode].m_wMinDuration = MinD;
    10a2:	0f 5f       	subi	r16, 0xFF	; 255
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	40 9f       	mul	r20, r16
    10a8:	d0 01       	movw	r26, r0
    10aa:	41 9f       	mul	r20, r17
    10ac:	b0 0d       	add	r27, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	ae 0d       	add	r26, r14
    10b2:	bf 1d       	adc	r27, r15
    10b4:	2d 93       	st	X+, r18
    10b6:	3c 93       	st	X, r19
		pstGUI[mode].m_wMaxDuration = MaxD;
    10b8:	40 8e       	std	Z+24, r4	; 0x18
    10ba:	51 8e       	std	Z+25, r5	; 0x19
		
		// Update Duration
		laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    10bc:	97 01       	movw	r18, r14
    10be:	20 51       	subi	r18, 0x10	; 16
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	d5 01       	movw	r26, r10
    10c4:	8d 91       	ld	r24, X+
    10c6:	9c 91       	ld	r25, X
    10c8:	46 a1       	ldd	r20, Z+38	; 0x26
    10ca:	57 a1       	ldd	r21, Z+39	; 0x27
    10cc:	84 1b       	sub	r24, r20
    10ce:	95 0b       	sbc	r25, r21
    10d0:	60 a5       	ldd	r22, Z+40	; 0x28
    10d2:	71 a5       	ldd	r23, Z+41	; 0x29
    10d4:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    10d8:	f9 01       	movw	r30, r18
    10da:	60 83       	st	Z, r22
    10dc:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Duration = duration;
    10de:	d5 01       	movw	r26, r10
    10e0:	8d 91       	ld	r24, X+
    10e2:	9c 91       	ld	r25, X
    10e4:	36 96       	adiw	r30, 0x06	; 6
    10e6:	80 83       	st	Z, r24
    10e8:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	f7 01       	movw	r30, r14
    10ee:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    10f0:	d6 01       	movw	r26, r12
    10f2:	ed 91       	ld	r30, X+
    10f4:	fc 91       	ld	r31, X
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	e8 50       	subi	r30, 0x08	; 8
    10fc:	ff 4d       	sbci	r31, 0xDF	; 223
    10fe:	40 80       	ld	r4, Z
    1100:	51 80       	ldd	r5, Z+1	; 0x01
    1102:	b1 e0       	ldi	r27, 0x01	; 1
    1104:	4b 1a       	sub	r4, r27
    1106:	51 08       	sbc	r5, r1
		laserDiodeData.lasersettings.Duration = duration;
		
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    1108:	f5 01       	movw	r30, r10
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	29 85       	ldd	r18, Y+9	; 0x09
    1110:	3a 85       	ldd	r19, Y+10	; 0x0a
    1112:	82 1b       	sub	r24, r18
    1114:	93 0b       	sbc	r25, r19
    1116:	b3 01       	movw	r22, r6
    1118:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_Z3maxjj>
    1124:	b2 01       	movw	r22, r4
    1126:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z3minjj>
	
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    112a:	d6 01       	movw	r26, r12
    112c:	4d 91       	ld	r20, X+
    112e:	5c 91       	ld	r21, X
    1130:	6b e0       	ldi	r22, 0x0B	; 11
    1132:	64 9f       	mul	r22, r20
    1134:	90 01       	movw	r18, r0
    1136:	65 9f       	mul	r22, r21
    1138:	30 0d       	add	r19, r0
    113a:	11 24       	eor	r1, r1
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	fc 01       	movw	r30, r24
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ea 5f       	subi	r30, 0xFA	; 250
    1148:	ff 4d       	sbci	r31, 0xDF	; 223
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	43 2d       	mov	r20, r3
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	f7 01       	movw	r30, r14
    1154:	ba e1       	ldi	r27, 0x1A	; 26
    1156:	3b 9e       	mul	r3, r27
    1158:	e0 0d       	add	r30, r0
    115a:	f1 1d       	adc	r31, r1
    115c:	11 24       	eor	r1, r1
    115e:	84 8b       	std	Z+20, r24	; 0x14
    1160:	95 8b       	std	Z+21, r25	; 0x15
	
	if (energy > pstGUI[mode].m_wMaxEnergy_)
    1162:	f4 01       	movw	r30, r8
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	82 17       	cp	r24, r18
    116a:	93 07       	cpc	r25, r19
    116c:	08 f0       	brcs	.+2      	; 0x1170 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x2e8>
    116e:	5d c0       	rjmp	.+186    	; 0x122a <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3a2>
	{
		energy = pstGUI[mode].m_wMaxEnergy_;
    1170:	80 83       	st	Z, r24
    1172:	91 83       	std	Z+1, r25	; 0x01
		
		// Update energy helpers
		step = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	9e 83       	std	Y+6, r25	; 0x06
		uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    117c:	8a e1       	ldi	r24, 0x1A	; 26
    117e:	84 9f       	mul	r24, r20
    1180:	60 01       	movw	r12, r0
    1182:	85 9f       	mul	r24, r21
    1184:	d0 0c       	add	r13, r0
    1186:	11 24       	eor	r1, r1
    1188:	ce 0c       	add	r12, r14
    118a:	df 1c       	adc	r13, r15
    118c:	d6 01       	movw	r26, r12
    118e:	54 96       	adiw	r26, 0x14	; 20
    1190:	8d 91       	ld	r24, X+
    1192:	9c 91       	ld	r25, X
    1194:	55 97       	sbiw	r26, 0x15	; 21
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    119a:	90 96       	adiw	r26, 0x20	; 32
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	91 97       	sbiw	r26, 0x21	; 33
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	9a 83       	std	Y+2, r25	; 0x02
		NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    11a6:	08 e0       	ldi	r16, 0x08	; 8
    11a8:	10 e2       	ldi	r17, 0x20	; 32
    11aa:	24 e1       	ldi	r18, 0x14	; 20
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	ae 01       	movw	r20, r28
    11b0:	4b 5f       	subi	r20, 0xFB	; 251
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	be 01       	movw	r22, r28
    11b6:	6d 5f       	subi	r22, 0xFD	; 253
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13NormalizeStepRjS_S_jPj>
		pstGUI[mode].m_wEnergyOffset = Offset;
    11c2:	29 81       	ldd	r18, Y+1	; 0x01
    11c4:	3a 81       	ldd	r19, Y+2	; 0x02
    11c6:	f6 01       	movw	r30, r12
    11c8:	20 a3       	std	Z+32, r18	; 0x20
    11ca:	31 a3       	std	Z+33, r19	; 0x21
		pstGUI[mode].m_wEnergyStep = step;
    11cc:	6d 81       	ldd	r22, Y+5	; 0x05
    11ce:	7e 81       	ldd	r23, Y+6	; 0x06
    11d0:	62 a3       	std	Z+34, r22	; 0x22
    11d2:	73 a3       	std	Z+35, r23	; 0x23
		pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    11d4:	84 89       	ldd	r24, Z+20	; 0x14
    11d6:	95 89       	ldd	r25, Z+21	; 0x15
    11d8:	82 1b       	sub	r24, r18
    11da:	93 0b       	sbc	r25, r19
    11dc:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    11e0:	64 a3       	std	Z+36, r22	; 0x24
    11e2:	75 a3       	std	Z+37, r23	; 0x25
		pstGUI[mode].m_wMinEnergy_ = Offset;
    11e4:	26 8b       	std	Z+22, r18	; 0x16
    11e6:	37 8b       	std	Z+23, r19	; 0x17
		pstGUI[mode].m_wMaxEnergy_ = MaxEnergy;
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	84 8b       	std	Z+20, r24	; 0x14
    11ee:	95 8b       	std	Z+21, r25	; 0x15
		
		// Update Energy
		laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    11f0:	f7 01       	movw	r30, r14
    11f2:	ee 50       	subi	r30, 0x0E	; 14
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	d4 01       	movw	r26, r8
    11f8:	8d 91       	ld	r24, X+
    11fa:	9c 91       	ld	r25, X
    11fc:	d6 01       	movw	r26, r12
    11fe:	82 1b       	sub	r24, r18
    1200:	93 0b       	sbc	r25, r19
    1202:	92 96       	adiw	r26, 0x22	; 34
    1204:	6d 91       	ld	r22, X+
    1206:	7c 91       	ld	r23, X
    1208:	93 97       	sbiw	r26, 0x23	; 35
    120a:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    120e:	60 83       	st	Z, r22
    1210:	71 83       	std	Z+1, r23	; 0x01
		laserDiodeData.lasersettings.Energy = energy;
    1212:	f4 01       	movw	r30, r8
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	f7 01       	movw	r30, r14
    121a:	e8 50       	subi	r30, 0x08	; 8
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 83       	st	Z, r24
    1220:	91 83       	std	Z+1, r25	; 0x01
		
		update = true;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	d7 01       	movw	r26, r14
    1226:	51 96       	adiw	r26, 0x11	; 17
    1228:	8c 93       	st	X, r24
	}
	
	return update;
    122a:	f7 01       	movw	r30, r14
    122c:	81 89       	ldd	r24, Z+17	; 0x11
    122e:	4b c0       	rjmp	.+150    	; 0x12c6 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x43e>
	}
}

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    1230:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (freq < pstGUI[mode].m_wMinFreq)	{	freq = pstGUI[mode].m_wMinFreq;	UpdateFreq = true;	}
		if (freq > pstGUI[mode].m_wMaxFreq)	{	freq = pstGUI[mode].m_wMaxFreq;	UpdateFreq = true;	}
	}
	
	if (UpdateFreq)
    1232:	81 11       	cpse	r24, r1
    1234:	c3 ce       	rjmp	.-634    	; 0xfbc <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x134>
    1236:	27 c0       	rjmp	.+78     	; 0x1286 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3fe>
		laserDiodeData.laserprofile.Frequency = freq;
		update = true;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1238:	d6 01       	movw	r26, r12
    123a:	2d 91       	ld	r18, X+
    123c:	3c 91       	ld	r19, X
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	f9 01       	movw	r30, r18
    1244:	ec 5d       	subi	r30, 0xDC	; 220
    1246:	fe 4d       	sbci	r31, 0xDE	; 222
    1248:	40 81       	ld	r20, Z
    124a:	51 81       	ldd	r21, Z+1	; 0x01
    124c:	49 87       	std	Y+9, r20	; 0x09
    124e:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    1250:	f9 01       	movw	r30, r18
    1252:	e2 5f       	subi	r30, 0xF2	; 242
    1254:	fe 4d       	sbci	r31, 0xDE	; 222
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	8f 83       	std	Y+7, r24	; 0x07
    125c:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    125e:	84 1b       	sub	r24, r20
    1260:	95 0b       	sbc	r25, r21
    1262:	f9 01       	movw	r30, r18
    1264:	e8 50       	subi	r30, 0x08	; 8
    1266:	ff 4d       	sbci	r31, 0xDF	; 223
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	61 50       	subi	r22, 0x01	; 1
    126e:	71 09       	sbc	r23, r1
    1270:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1274:	3b 01       	movw	r6, r22
    1276:	d7 ce       	rjmp	.-594    	; 0x1026 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
		MaxD = 100;	
	}
	
	bool UpdateDuration = false;
	if (duration < MinD)	{	duration = MinD;	UpdateDuration = true;	}
	if (duration > MaxD)	{	duration = MaxD;	UpdateDuration = true;	}
    1278:	2f 81       	ldd	r18, Y+7	; 0x07
    127a:	38 85       	ldd	r19, Y+8	; 0x08
    127c:	24 17       	cp	r18, r20
    127e:	35 07       	cpc	r19, r21
    1280:	08 f4       	brcc	.+2      	; 0x1284 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x3fc>
    1282:	e1 ce       	rjmp	.-574    	; 0x1046 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x1be>
    1284:	35 cf       	rjmp	.-406    	; 0x10f0 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x268>
		laserDiodeData.laserprofile.Frequency = freq;
		update = true;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1286:	f6 01       	movw	r30, r12
    1288:	20 81       	ld	r18, Z
    128a:	31 81       	ldd	r19, Z+1	; 0x01
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	f9 01       	movw	r30, r18
    1292:	ec 5d       	subi	r30, 0xDC	; 220
    1294:	fe 4d       	sbci	r31, 0xDE	; 222
    1296:	40 81       	ld	r20, Z
    1298:	51 81       	ldd	r21, Z+1	; 0x01
    129a:	49 87       	std	Y+9, r20	; 0x09
    129c:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    129e:	f9 01       	movw	r30, r18
    12a0:	e2 5f       	subi	r30, 0xF2	; 242
    12a2:	fe 4d       	sbci	r31, 0xDE	; 222
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    12ac:	84 1b       	sub	r24, r20
    12ae:	95 0b       	sbc	r25, r21
    12b0:	f9 01       	movw	r30, r18
    12b2:	e8 50       	subi	r30, 0x08	; 8
    12b4:	ff 4d       	sbci	r31, 0xDF	; 223
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	61 50       	subi	r22, 0x01	; 1
    12bc:	71 09       	sbc	r23, r1
    12be:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    12c2:	3b 01       	movw	r6, r22
    12c4:	b0 ce       	rjmp	.-672    	; 0x1026 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM+0x19e>
		
		update = true;
	}
	
	return update;
}
    12c6:	2a 96       	adiw	r28, 0x0a	; 10
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	bf 90       	pop	r11
    12de:	af 90       	pop	r10
    12e0:	9f 90       	pop	r9
    12e2:	8f 90       	pop	r8
    12e4:	7f 90       	pop	r7
    12e6:	6f 90       	pop	r6
    12e8:	5f 90       	pop	r5
    12ea:	4f 90       	pop	r4
    12ec:	3f 90       	pop	r3
    12ee:	08 95       	ret

000012f0 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>:

void CLaserControlApp::CalculateDurationSteps(uint16_t &freq, uint16_t &duration)
{
    12f0:	bf 92       	push	r11
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	00 d0       	rcall	.+0      	; 0x1304 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x14>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_+0x16>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	7c 01       	movw	r14, r24
    130c:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MinD = pstGUI[Profile].m_wMinDuration;
    1316:	d7 01       	movw	r26, r14
    1318:	1e 96       	adiw	r26, 0x0e	; 14
    131a:	8c 91       	ld	r24, X
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 01       	movw	r18, r24
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	0f 2e       	mov	r0, r31
    1326:	fa e1       	ldi	r31, 0x1A	; 26
    1328:	bf 2e       	mov	r11, r31
    132a:	f0 2d       	mov	r31, r0
    132c:	b2 9e       	mul	r11, r18
    132e:	f0 01       	movw	r30, r0
    1330:	b3 9e       	mul	r11, r19
    1332:	f0 0d       	add	r31, r0
    1334:	11 24       	eor	r1, r1
    1336:	ee 0d       	add	r30, r14
    1338:	ff 1d       	adc	r31, r15
    133a:	20 81       	ld	r18, Z
    133c:	31 81       	ldd	r19, Z+1	; 0x01
    133e:	2b 83       	std	Y+3, r18	; 0x03
    1340:	3c 83       	std	Y+4, r19	; 0x04
	uint16_t MaxD = pstGUI[Profile].m_wMaxDuration;
    1342:	b8 9e       	mul	r11, r24
    1344:	f0 01       	movw	r30, r0
    1346:	b9 9e       	mul	r11, r25
    1348:	f0 0d       	add	r31, r0
    134a:	11 24       	eor	r1, r1
    134c:	ee 0d       	add	r30, r14
    134e:	ff 1d       	adc	r31, r15
    1350:	80 8d       	ldd	r24, Z+24	; 0x18
    1352:	91 8d       	ldd	r25, Z+25	; 0x19
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    1358:	08 e0       	ldi	r16, 0x08	; 8
    135a:	10 e2       	ldi	r17, 0x20	; 32
    135c:	24 e1       	ldi	r18, 0x14	; 20
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	ae 01       	movw	r20, r28
    1362:	4b 5f       	subi	r20, 0xFB	; 251
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	be 01       	movw	r22, r28
    1368:	6f 5f       	subi	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	ce 01       	movw	r24, r28
    136e:	03 96       	adiw	r24, 0x03	; 3
    1370:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wDurationStep = step;
    1374:	f7 01       	movw	r30, r14
    1376:	86 85       	ldd	r24, Z+14	; 0x0e
    1378:	6d 81       	ldd	r22, Y+5	; 0x05
    137a:	7e 81       	ldd	r23, Y+6	; 0x06
    137c:	b8 9e       	mul	r11, r24
    137e:	e0 0d       	add	r30, r0
    1380:	f1 1d       	adc	r31, r1
    1382:	11 24       	eor	r1, r1
    1384:	60 a7       	std	Z+40, r22	; 0x28
    1386:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[Profile].m_wDurationNumSteps = (MaxD - MinD)/step;
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	82 1b       	sub	r24, r18
    1392:	93 0b       	sbc	r25, r19
    1394:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1398:	62 a7       	std	Z+42, r22	; 0x2a
    139a:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[Profile].m_wDurationOffset = MinD;
    139c:	26 a3       	std	Z+38, r18	; 0x26
    139e:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[Profile].updateDuration = false;
    13a0:	14 a6       	std	Z+44, r1	; 0x2c
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[Profile].m_wDurationOffset) / pstGUI[Profile].m_wDurationStep;
    13a2:	97 01       	movw	r18, r14
    13a4:	20 51       	subi	r18, 0x10	; 16
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	d6 01       	movw	r26, r12
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	46 a1       	ldd	r20, Z+38	; 0x26
    13b0:	57 a1       	ldd	r21, Z+39	; 0x27
    13b2:	84 1b       	sub	r24, r20
    13b4:	95 0b       	sbc	r25, r21
    13b6:	60 a5       	ldd	r22, Z+40	; 0x28
    13b8:	71 a5       	ldd	r23, Z+41	; 0x29
    13ba:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    13be:	f9 01       	movw	r30, r18
    13c0:	60 83       	st	Z, r22
    13c2:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Duration = duration;
    13c4:	d6 01       	movw	r26, r12
    13c6:	8d 91       	ld	r24, X+
    13c8:	9c 91       	ld	r25, X
    13ca:	36 96       	adiw	r30, 0x06	; 6
    13cc:	80 83       	st	Z, r24
    13ce:	91 83       	std	Z+1, r25	; 0x01
}
    13d0:	26 96       	adiw	r28, 0x06	; 6
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	bf 90       	pop	r11
    13e8:	08 95       	ret

000013ea <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>:

void CLaserControlApp::CalculateEnergySteps(uint16_t &freq, uint16_t &energy)
{
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x14>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_+0x16>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	7c 01       	movw	r14, r24
    1406:	6a 01       	movw	r12, r20
	uint16_t step = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t MaxEnergy = pstGUI[Profile].m_wMaxEnergy_;
    1410:	d7 01       	movw	r26, r14
    1412:	1e 96       	adiw	r26, 0x0e	; 14
    1414:	8c 91       	ld	r24, X
    1416:	0f 2e       	mov	r0, r31
    1418:	fa e1       	ldi	r31, 0x1A	; 26
    141a:	bf 2e       	mov	r11, r31
    141c:	f0 2d       	mov	r31, r0
    141e:	f7 01       	movw	r30, r14
    1420:	b8 9e       	mul	r11, r24
    1422:	e0 0d       	add	r30, r0
    1424:	f1 1d       	adc	r31, r1
    1426:	11 24       	eor	r1, r1
    1428:	84 89       	ldd	r24, Z+20	; 0x14
    142a:	95 89       	ldd	r25, Z+21	; 0x15
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t MinEnergy = pstGUI[Profile].m_wMinEnergy_;
    1430:	86 89       	ldd	r24, Z+22	; 0x16
    1432:	97 89       	ldd	r25, Z+23	; 0x17
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(MinEnergy, MaxEnergy, step, 20, step_table);
    1438:	08 e0       	ldi	r16, 0x08	; 8
    143a:	10 e2       	ldi	r17, 0x20	; 32
    143c:	24 e1       	ldi	r18, 0x14	; 20
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	ae 01       	movw	r20, r28
    1442:	4b 5f       	subi	r20, 0xFB	; 251
    1444:	5f 4f       	sbci	r21, 0xFF	; 255
    1446:	be 01       	movw	r22, r28
    1448:	6d 5f       	subi	r22, 0xFD	; 253
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[Profile].m_wEnergyStep = step;
    1454:	f7 01       	movw	r30, r14
    1456:	86 85       	ldd	r24, Z+14	; 0x0e
    1458:	6d 81       	ldd	r22, Y+5	; 0x05
    145a:	7e 81       	ldd	r23, Y+6	; 0x06
    145c:	b8 9e       	mul	r11, r24
    145e:	e0 0d       	add	r30, r0
    1460:	f1 1d       	adc	r31, r1
    1462:	11 24       	eor	r1, r1
    1464:	62 a3       	std	Z+34, r22	; 0x22
    1466:	73 a3       	std	Z+35, r23	; 0x23
	pstGUI[Profile].m_wEnergyNumSteps = (pstGUI[Profile].m_wMaxEnergy_ - MinEnergy)/step;
    1468:	29 81       	ldd	r18, Y+1	; 0x01
    146a:	3a 81       	ldd	r19, Y+2	; 0x02
    146c:	84 89       	ldd	r24, Z+20	; 0x14
    146e:	95 89       	ldd	r25, Z+21	; 0x15
    1470:	82 1b       	sub	r24, r18
    1472:	93 0b       	sbc	r25, r19
    1474:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1478:	64 a3       	std	Z+36, r22	; 0x24
    147a:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[Profile].m_wEnergyOffset = MinEnergy;
    147c:	20 a3       	std	Z+32, r18	; 0x20
    147e:	31 a3       	std	Z+33, r19	; 0x21
	pstGUI[Profile].updateEnergy = false;
    1480:	15 a6       	std	Z+45, r1	; 0x2d
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[Profile].m_wEnergyOffset) / pstGUI[Profile].m_wEnergyStep;
    1482:	97 01       	movw	r18, r14
    1484:	2e 50       	subi	r18, 0x0E	; 14
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	d6 01       	movw	r26, r12
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	40 a1       	ldd	r20, Z+32	; 0x20
    1490:	51 a1       	ldd	r21, Z+33	; 0x21
    1492:	84 1b       	sub	r24, r20
    1494:	95 0b       	sbc	r25, r21
    1496:	62 a1       	ldd	r22, Z+34	; 0x22
    1498:	73 a1       	ldd	r23, Z+35	; 0x23
    149a:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    149e:	f9 01       	movw	r30, r18
    14a0:	60 83       	st	Z, r22
    14a2:	71 83       	std	Z+1, r23	; 0x01
	laserDiodeData.lasersettings.Energy = energy;
    14a4:	d6 01       	movw	r26, r12
    14a6:	8d 91       	ld	r24, X+
    14a8:	9c 91       	ld	r25, X
    14aa:	36 96       	adiw	r30, 0x06	; 6
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
}
    14b0:	26 96       	adiw	r28, 0x06	; 6
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	08 95       	ret

000014ca <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>:

void CLaserControlApp::CalculateAllSteps(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
    14ca:	7f 92       	push	r7
    14cc:	8f 92       	push	r8
    14ce:	9f 92       	push	r9
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2a 97       	sbiw	r28, 0x0a	; 10
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	7c 01       	movw	r14, r24
    14f0:	8b 01       	movw	r16, r22
    14f2:	6a 01       	movw	r12, r20
	uint16_t MinD = MinDurationTable[freq];
    14f4:	db 01       	movw	r26, r22
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	cf 01       	movw	r24, r30
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	dc 01       	movw	r26, r24
    1502:	ac 5d       	subi	r26, 0xDC	; 220
    1504:	be 4d       	sbci	r27, 0xDE	; 222
    1506:	4d 91       	ld	r20, X+
    1508:	5c 91       	ld	r21, X
    150a:	49 87       	std	Y+9, r20	; 0x09
    150c:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t MaxD = MaxDurationTable[freq];
    150e:	dc 01       	movw	r26, r24
    1510:	a2 5f       	subi	r26, 0xF2	; 242
    1512:	be 4d       	sbci	r27, 0xDE	; 222
    1514:	8d 91       	ld	r24, X+
    1516:	9c 91       	ld	r25, X
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
	if (mode == PROFILE_MEDIUM)
    151c:	23 30       	cpi	r18, 0x03	; 3
    151e:	d1 f4       	brne	.+52     	; 0x1554 <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x8a>
	{
		MinD = 10;
    1520:	8a e0       	ldi	r24, 0x0A	; 10
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	89 87       	std	Y+9, r24	; 0x09
    1526:	9a 87       	std	Y+10, r25	; 0x0a
		MaxD = 100;
    1528:	84 e6       	ldi	r24, 0x64	; 100
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	8f 83       	std	Y+7, r24	; 0x07
    152e:	98 87       	std	Y+8, r25	; 0x08
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	e8 50       	subi	r30, 0x08	; 8
    1536:	ff 4d       	sbci	r31, 0xDF	; 223
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	61 50       	subi	r22, 0x01	; 1
    153e:	71 09       	sbc	r23, r1
    1540:	8a e5       	ldi	r24, 0x5A	; 90
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1548:	5b 01       	movw	r10, r22
	uint16_t step = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x112>
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
		MaxD = 100;
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    1554:	49 85       	ldd	r20, Y+9	; 0x09
    1556:	5a 85       	ldd	r21, Y+10	; 0x0a
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	e8 50       	subi	r30, 0x08	; 8
    155e:	ff 4d       	sbci	r31, 0xDF	; 223
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
	uint16_t step = 1;
    1564:	e1 e0       	ldi	r30, 0x01	; 1
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	ed 83       	std	Y+5, r30	; 0x05
    156a:	fe 83       	std	Y+6, r31	; 0x06
	
	if (mode == PROFILE_FAST)
    156c:	24 30       	cpi	r18, 0x04	; 4
    156e:	79 f5       	brne	.+94     	; 0x15ce <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x104>
	{
		// Update energy helpers
		pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    1570:	f7 01       	movw	r30, r14
    1572:	e8 57       	subi	r30, 0x78	; 120
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	86 e0       	ldi	r24, 0x06	; 6
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    157e:	32 96       	adiw	r30, 0x02	; 2
    1580:	21 e0       	ldi	r18, 0x01	; 1
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	20 83       	st	Z, r18
    1586:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    1588:	32 96       	adiw	r30, 0x02	; 2
    158a:	47 e0       	ldi	r20, 0x07	; 7
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	40 83       	st	Z, r20
    1590:	51 83       	std	Z+1, r21	; 0x01
		pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    1592:	3e 97       	sbiw	r30, 0x0e	; 14
    1594:	80 83       	st	Z, r24
    1596:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 12;
    1598:	32 97       	sbiw	r30, 0x02	; 2
    159a:	8c e0       	ldi	r24, 0x0C	; 12
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	80 83       	st	Z, r24
    15a0:	91 83       	std	Z+1, r25	; 0x01
		
		// Update duration helpers
		pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    15a2:	72 96       	adiw	r30, 0x12	; 18
    15a4:	82 e1       	ldi	r24, 0x12	; 18
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    15ac:	32 96       	adiw	r30, 0x02	; 2
    15ae:	20 83       	st	Z, r18
    15b0:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    15b2:	32 96       	adiw	r30, 0x02	; 2
    15b4:	21 e1       	ldi	r18, 0x11	; 17
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	20 83       	st	Z, r18
    15ba:	31 83       	std	Z+1, r19	; 0x01
		pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    15bc:	70 97       	sbiw	r30, 0x10	; 16
    15be:	80 83       	st	Z, r24
    15c0:	91 83       	std	Z+1, r25	; 0x01
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    15c2:	32 97       	sbiw	r30, 0x02	; 2
    15c4:	83 e2       	ldi	r24, 0x23	; 35
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	80 83       	st	Z, r24
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	8e c0       	rjmp	.+284    	; 0x16ea <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM+0x220>
	if (mode == PROFILE_MEDIUM)
	{
		MinD = 10;
		MaxD = 100;
	}
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq]-1);
    15ce:	84 1b       	sub	r24, r20
    15d0:	95 0b       	sbc	r25, r21
    15d2:	61 50       	subi	r22, 0x01	; 1
    15d4:	71 09       	sbc	r23, r1
    15d6:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    15da:	5b 01       	movw	r10, r22
    15dc:	72 2e       	mov	r7, r18
    15de:	48 01       	movw	r8, r16
		pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
		return;
	}
	
	// Update duration helpers
	NormalizeStep(MinD, MaxD, step, 20, step_table);
    15e0:	08 e0       	ldi	r16, 0x08	; 8
    15e2:	10 e2       	ldi	r17, 0x20	; 32
    15e4:	24 e1       	ldi	r18, 0x14	; 20
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	ae 01       	movw	r20, r28
    15ea:	4b 5f       	subi	r20, 0xFB	; 251
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	be 01       	movw	r22, r28
    15f0:	69 5f       	subi	r22, 0xF9	; 249
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	ce 01       	movw	r24, r28
    15f6:	09 96       	adiw	r24, 0x09	; 9
    15f8:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wDurationStep = step;
    15fc:	6d 81       	ldd	r22, Y+5	; 0x05
    15fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1600:	ba e1       	ldi	r27, 0x1A	; 26
    1602:	7b 9e       	mul	r7, r27
    1604:	e0 0c       	add	r14, r0
    1606:	f1 1c       	adc	r15, r1
    1608:	11 24       	eor	r1, r1
    160a:	f7 01       	movw	r30, r14
    160c:	60 a7       	std	Z+40, r22	; 0x28
    160e:	71 a7       	std	Z+41, r23	; 0x29
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
    1610:	29 85       	ldd	r18, Y+9	; 0x09
    1612:	3a 85       	ldd	r19, Y+10	; 0x0a
    1614:	8f 81       	ldd	r24, Y+7	; 0x07
    1616:	98 85       	ldd	r25, Y+8	; 0x08
    1618:	82 1b       	sub	r24, r18
    161a:	93 0b       	sbc	r25, r19
    161c:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1620:	62 a7       	std	Z+42, r22	; 0x2a
    1622:	73 a7       	std	Z+43, r23	; 0x2b
	pstGUI[mode].m_wDurationOffset = MinD;
    1624:	26 a3       	std	Z+38, r18	; 0x26
    1626:	37 a3       	std	Z+39, r19	; 0x27
	pstGUI[mode].updateDuration = false;
    1628:	14 a6       	std	Z+44, r1	; 0x2c
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    162a:	d4 01       	movw	r26, r8
    162c:	ed 91       	ld	r30, X+
    162e:	fc 91       	ld	r31, X
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	e8 50       	subi	r30, 0x08	; 8
    1636:	ff 4d       	sbci	r31, 0xDF	; 223
    1638:	00 81       	ld	r16, Z
    163a:	11 81       	ldd	r17, Z+1	; 0x01
    163c:	01 50       	subi	r16, 0x01	; 1
    163e:	11 09       	sbc	r17, r1
	pstGUI[mode].m_wDurationStep = step;
	pstGUI[mode].m_wDurationNumSteps = (MaxD - MinD)/step;
	pstGUI[mode].m_wDurationOffset = MinD;
	pstGUI[mode].updateDuration = false;
	
	uint16_t index = (duration - MinD) / Delta;
    1640:	f6 01       	movw	r30, r12
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	82 1b       	sub	r24, r18
    1648:	93 0b       	sbc	r25, r19
    164a:	b5 01       	movw	r22, r10
    164c:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_Z3maxjj>
    1658:	b8 01       	movw	r22, r16
    165a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z3minjj>
	
	//pstGUI[mode].m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
	pstGUI[mode].m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    165e:	d4 01       	movw	r26, r8
    1660:	4d 91       	ld	r20, X+
    1662:	5c 91       	ld	r21, X
    1664:	6b e0       	ldi	r22, 0x0B	; 11
    1666:	64 9f       	mul	r22, r20
    1668:	90 01       	movw	r18, r0
    166a:	65 9f       	mul	r22, r21
    166c:	30 0d       	add	r19, r0
    166e:	11 24       	eor	r1, r1
    1670:	82 0f       	add	r24, r18
    1672:	93 1f       	adc	r25, r19
    1674:	fc 01       	movw	r30, r24
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	ea 5f       	subi	r30, 0xFA	; 250
    167c:	ff 4d       	sbci	r31, 0xDF	; 223
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	f7 01       	movw	r30, r14
    1684:	84 8b       	std	Z+20, r24	; 0x14
    1686:	95 8b       	std	Z+21, r25	; 0x15
	
	// Update energy helpers
	step = 1;
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	2d 83       	std	Y+5, r18	; 0x05
    168e:	3e 83       	std	Y+6, r19	; 0x06
	uint16_t MaxEnergy = pstGUI[mode].m_wMaxEnergy_;
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t Offset = pstGUI[mode].m_wEnergyOffset;
    1694:	80 a1       	ldd	r24, Z+32	; 0x20
    1696:	91 a1       	ldd	r25, Z+33	; 0x21
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	9a 83       	std	Y+2, r25	; 0x02
	NormalizeStep(Offset, MaxEnergy, step, 20, step_table);
    169c:	08 e0       	ldi	r16, 0x08	; 8
    169e:	10 e2       	ldi	r17, 0x20	; 32
    16a0:	24 e1       	ldi	r18, 0x14	; 20
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	ae 01       	movw	r20, r28
    16a6:	4b 5f       	subi	r20, 0xFB	; 251
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	be 01       	movw	r22, r28
    16ac:	6d 5f       	subi	r22, 0xFD	; 253
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13NormalizeStepRjS_S_jPj>
	pstGUI[mode].m_wEnergyOffset = Offset;
    16b8:	29 81       	ldd	r18, Y+1	; 0x01
    16ba:	3a 81       	ldd	r19, Y+2	; 0x02
    16bc:	d7 01       	movw	r26, r14
    16be:	90 96       	adiw	r26, 0x20	; 32
    16c0:	2d 93       	st	X+, r18
    16c2:	3c 93       	st	X, r19
    16c4:	91 97       	sbiw	r26, 0x21	; 33
	pstGUI[mode].m_wEnergyStep = step;
    16c6:	6d 81       	ldd	r22, Y+5	; 0x05
    16c8:	7e 81       	ldd	r23, Y+6	; 0x06
    16ca:	92 96       	adiw	r26, 0x22	; 34
    16cc:	6d 93       	st	X+, r22
    16ce:	7c 93       	st	X, r23
    16d0:	93 97       	sbiw	r26, 0x23	; 35
	pstGUI[mode].m_wEnergyNumSteps = (pstGUI[mode].m_wMaxEnergy_ - Offset)/step;
    16d2:	54 96       	adiw	r26, 0x14	; 20
    16d4:	8d 91       	ld	r24, X+
    16d6:	9c 91       	ld	r25, X
    16d8:	55 97       	sbiw	r26, 0x15	; 21
    16da:	82 1b       	sub	r24, r18
    16dc:	93 0b       	sbc	r25, r19
    16de:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    16e2:	f7 01       	movw	r30, r14
    16e4:	64 a3       	std	Z+36, r22	; 0x24
    16e6:	75 a3       	std	Z+37, r23	; 0x25
	pstGUI[mode].updateEnergy = false;
    16e8:	15 a6       	std	Z+45, r1	; 0x2d
}
    16ea:	2a 96       	adiw	r28, 0x0a	; 10
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	cf 90       	pop	r12
    1700:	bf 90       	pop	r11
    1702:	af 90       	pop	r10
    1704:	9f 90       	pop	r9
    1706:	8f 90       	pop	r8
    1708:	7f 90       	pop	r7
    170a:	08 95       	ret

0000170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>:
	
	return result;
}

void CLaserControlApp::LaserPreset(uint16_t &freq, uint16_t &duration, uint16_t &energy, APP_PROFILE mode)
{
    170c:	8f 92       	push	r8
    170e:	9f 92       	push	r9
    1710:	af 92       	push	r10
    1712:	bf 92       	push	r11
    1714:	cf 92       	push	r12
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	6c 01       	movw	r12, r24
    1726:	7b 01       	movw	r14, r22
    1728:	ea 01       	movw	r28, r20
    172a:	49 01       	movw	r8, r18
    172c:	10 2f       	mov	r17, r16
	UpdateLimits(freq, duration, energy, mode);
    172e:	d9 01       	movw	r26, r18
    1730:	2d 91       	ld	r18, X+
    1732:	3c 91       	ld	r19, X
    1734:	48 81       	ld	r20, Y
    1736:	59 81       	ldd	r21, Y+1	; 0x01
    1738:	fb 01       	movw	r30, r22
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
	CalculateAllSteps(freq, duration, mode);
    1742:	21 2f       	mov	r18, r17
    1744:	ae 01       	movw	r20, r28
    1746:	b7 01       	movw	r22, r14
    1748:	c6 01       	movw	r24, r12
    174a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN16CLaserControlApp17CalculateAllStepsERjS0_16APP_PROFILE_ENUM>
	
	m_structLaserProfile[mode].Frequency = freq;
    174e:	01 2f       	mov	r16, r17
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	d7 01       	movw	r26, r14
    1754:	8d 91       	ld	r24, X+
    1756:	9c 91       	ld	r25, X
    1758:	f8 01       	movw	r30, r16
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	5f 01       	movw	r10, r30
    1760:	a0 0e       	add	r10, r16
    1762:	b1 1e       	adc	r11, r17
    1764:	aa 0c       	add	r10, r10
    1766:	bb 1c       	adc	r11, r11
    1768:	ac 0c       	add	r10, r12
    176a:	bd 1c       	adc	r11, r13
    176c:	d5 01       	movw	r26, r10
    176e:	aa 56       	subi	r26, 0x6A	; 106
    1770:	bf 4f       	sbci	r27, 0xFF	; 255
    1772:	8d 93       	st	X+, r24
    1774:	9c 93       	st	X, r25
	m_structLaserProfile[mode].EnergyCnt = (energy - pstGUI[mode].m_wEnergyOffset) / pstGUI[mode].m_wEnergyStep;
    1776:	8a e1       	ldi	r24, 0x1A	; 26
    1778:	80 9f       	mul	r24, r16
    177a:	90 01       	movw	r18, r0
    177c:	81 9f       	mul	r24, r17
    177e:	30 0d       	add	r19, r0
    1780:	11 24       	eor	r1, r1
    1782:	2c 0d       	add	r18, r12
    1784:	3d 1d       	adc	r19, r13
    1786:	d4 01       	movw	r26, r8
    1788:	8d 91       	ld	r24, X+
    178a:	9c 91       	ld	r25, X
    178c:	d9 01       	movw	r26, r18
    178e:	90 96       	adiw	r26, 0x20	; 32
    1790:	4d 91       	ld	r20, X+
    1792:	5c 91       	ld	r21, X
    1794:	91 97       	sbiw	r26, 0x21	; 33
    1796:	84 1b       	sub	r24, r20
    1798:	95 0b       	sbc	r25, r21
    179a:	92 96       	adiw	r26, 0x22	; 34
    179c:	6d 91       	ld	r22, X+
    179e:	7c 91       	ld	r23, X
    17a0:	93 97       	sbiw	r26, 0x23	; 35
    17a2:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    17a6:	d5 01       	movw	r26, r10
    17a8:	a6 56       	subi	r26, 0x66	; 102
    17aa:	bf 4f       	sbci	r27, 0xFF	; 255
    17ac:	6d 93       	st	X+, r22
    17ae:	7c 93       	st	X, r23
	m_structLaserProfile[mode].DurationCnt = (duration - pstGUI[mode].m_wDurationOffset) / pstGUI[mode].m_wDurationStep;
    17b0:	88 81       	ld	r24, Y
    17b2:	99 81       	ldd	r25, Y+1	; 0x01
    17b4:	d9 01       	movw	r26, r18
    17b6:	96 96       	adiw	r26, 0x26	; 38
    17b8:	4d 91       	ld	r20, X+
    17ba:	5c 91       	ld	r21, X
    17bc:	97 97       	sbiw	r26, 0x27	; 39
    17be:	84 1b       	sub	r24, r20
    17c0:	95 0b       	sbc	r25, r21
    17c2:	98 96       	adiw	r26, 0x28	; 40
    17c4:	6d 91       	ld	r22, X+
    17c6:	7c 91       	ld	r23, X
    17c8:	99 97       	sbiw	r26, 0x29	; 41
    17ca:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    17ce:	d5 01       	movw	r26, r10
    17d0:	a8 56       	subi	r26, 0x68	; 104
    17d2:	bf 4f       	sbci	r27, 0xFF	; 255
    17d4:	6d 93       	st	X+, r22
    17d6:	7c 93       	st	X, r23
    17d8:	11 97       	sbiw	r26, 0x01	; 1
	m_structLaserSettings[mode].Duration = duration;
    17da:	88 81       	ld	r24, Y
    17dc:	99 81       	ldd	r25, Y+1	; 0x01
    17de:	5e 96       	adiw	r26, 0x1e	; 30
    17e0:	8d 93       	st	X+, r24
    17e2:	9c 93       	st	X, r25
	m_structLaserSettings[mode].Energy = energy;
    17e4:	d4 01       	movw	r26, r8
    17e6:	8d 91       	ld	r24, X+
    17e8:	9c 91       	ld	r25, X
    17ea:	d5 01       	movw	r26, r10
    17ec:	a8 54       	subi	r26, 0x48	; 72
    17ee:	bf 4f       	sbci	r27, 0xFF	; 255
    17f0:	8d 93       	st	X+, r24
    17f2:	9c 93       	st	X, r25
	m_structLaserSettings[mode].Power = 0; // deprecated
    17f4:	f5 01       	movw	r30, r10
    17f6:	ec 54       	subi	r30, 0x4C	; 76
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	10 82       	st	Z, r1
    17fc:	11 82       	std	Z+1, r1	; 0x01
	
	// Set settings to hardware
	uint16_t period = 1000 / freq;											//  period [ms]
    17fe:	f7 01       	movw	r30, r14
    1800:	e0 80       	ld	r14, Z
    1802:	f1 80       	ldd	r15, Z+1	; 0x01
    1804:	88 ee       	ldi	r24, 0xE8	; 232
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	b7 01       	movw	r22, r14
    180a:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    180e:	8b 01       	movw	r16, r22
	uint32_t dutycycle = uint32_t(duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    1810:	28 81       	ld	r18, Y
    1812:	39 81       	ldd	r19, Y+1	; 0x01
    1814:	a8 ee       	ldi	r26, 0xE8	; 232
    1816:	b3 e0       	ldi	r27, 0x03	; 3
    1818:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    181c:	98 01       	movw	r18, r16
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    1826:	49 01       	movw	r8, r18
    1828:	5a 01       	movw	r10, r20
	// calculate timer settings
	laserTimerPeriod = (6250 / freq) * 10;
    182a:	8a e6       	ldi	r24, 0x6A	; 106
    182c:	98 e1       	ldi	r25, 0x18	; 24
    182e:	b7 01       	movw	r22, r14
    1830:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1834:	eb 01       	movw	r28, r22
    1836:	cc 0f       	add	r28, r28
    1838:	dd 1f       	adc	r29, r29
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	66 0f       	add	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	66 0f       	add	r22, r22
    1844:	77 1f       	adc	r23, r23
    1846:	c6 0f       	add	r28, r22
    1848:	d7 1f       	adc	r29, r23
    184a:	f6 01       	movw	r30, r12
    184c:	ee 52       	subi	r30, 0x2E	; 46
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	c0 83       	st	Z, r28
    1852:	d1 83       	std	Z+1, r29	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1854:	76 01       	movw	r14, r12
    1856:	f4 ed       	ldi	r31, 0xD4	; 212
    1858:	ef 0e       	add	r14, r31
    185a:	f1 1c       	adc	r15, r1
    185c:	de 01       	movw	r26, r28
    185e:	a5 01       	movw	r20, r10
    1860:	94 01       	movw	r18, r8
    1862:	0e 94 da 3e 	call	0x7db4	; 0x7db4 <__muluhisi3>
    1866:	28 ee       	ldi	r18, 0xE8	; 232
    1868:	33 e0       	ldi	r19, 0x03	; 3
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    1872:	c2 1b       	sub	r28, r18
    1874:	d3 0b       	sbc	r29, r19
    1876:	d7 01       	movw	r26, r14
    1878:	cd 93       	st	X+, r28
    187a:	dc 93       	st	X, r29
	laserTimerDutyCyclems = period;
    187c:	f6 01       	movw	r30, r12
    187e:	ea 52       	subi	r30, 0x2A	; 42
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	00 83       	st	Z, r16
    1884:	11 83       	std	Z+1, r17	; 0x01
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	bf 90       	pop	r11
    1898:	af 90       	pop	r10
    189a:	9f 90       	pop	r9
    189c:	8f 90       	pop	r8
    189e:	08 95       	ret

000018a0 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>:
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
	switch (mode)
    18a0:	42 30       	cpi	r20, 0x02	; 2
    18a2:	d9 f0       	breq	.+54     	; 0x18da <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x3a>
    18a4:	18 f4       	brcc	.+6      	; 0x18ac <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc>
    18a6:	41 30       	cpi	r20, 0x01	; 1
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x16>
    18aa:	3e c0       	rjmp	.+124    	; 0x1928 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
    18ac:	43 30       	cpi	r20, 0x03	; 3
    18ae:	11 f1       	breq	.+68     	; 0x18f4 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x54>
    18b0:	44 30       	cpi	r20, 0x04	; 4
    18b2:	69 f1       	breq	.+90     	; 0x190e <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x6e>
    18b4:	39 c0       	rjmp	.+114    	; 0x1928 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x88>
	{
		case PROFILE_DEFAULT:break;
		case PROFILE_SINGLE:
			pstGUI[mode].m_wMinFreq = 1;
    18b6:	21 e0       	ldi	r18, 0x01	; 1
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 af       	std	Z+56, r18	; 0x38
    18be:	31 af       	std	Z+57, r19	; 0x39
			pstGUI[mode].m_wMaxFreq = 1;
    18c0:	26 ab       	std	Z+54, r18	; 0x36
    18c2:	37 ab       	std	Z+55, r19	; 0x37
			if (freq != 1)
    18c4:	fb 01       	movw	r30, r22
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x30>
    18ce:	48 c0       	rjmp	.+144    	; 0x1960 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc0>
			{
				freq = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	08 95       	ret
				UpdateFreq = true;
				}
		break;
		case PROFILE_SLOW:
			pstGUI[mode].m_wMinFreq = PROFILE_SLOW_MIN_FREQ;
    18da:	21 e0       	ldi	r18, 0x01	; 1
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	fc 01       	movw	r30, r24
    18e0:	ee 5a       	subi	r30, 0xAE	; 174
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	20 83       	st	Z, r18
    18e6:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_SLOW_MAX_FREQ;
    18e8:	26 e0       	ldi	r18, 0x06	; 6
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	32 97       	sbiw	r30, 0x02	; 2
    18ee:	20 83       	st	Z, r18
    18f0:	31 83       	std	Z+1, r19	; 0x01
		break;
    18f2:	1c c0       	rjmp	.+56     	; 0x192c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_MEDIUM:
			pstGUI[mode].m_wMinFreq = PROFILE_MEDIUM_MIN_FREQ;
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	e4 59       	subi	r30, 0x94	; 148
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	20 83       	st	Z, r18
    1900:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_MEDIUM_MAX_FREQ;
    1902:	23 e0       	ldi	r18, 0x03	; 3
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	32 97       	sbiw	r30, 0x02	; 2
    1908:	20 83       	st	Z, r18
    190a:	31 83       	std	Z+1, r19	; 0x01
		break;
    190c:	0f c0       	rjmp	.+30     	; 0x192c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
		case PROFILE_FAST:
			pstGUI[mode].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    190e:	26 e0       	ldi	r18, 0x06	; 6
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	fc 01       	movw	r30, r24
    1914:	ea 57       	subi	r30, 0x7A	; 122
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	20 83       	st	Z, r18
    191a:	31 83       	std	Z+1, r19	; 0x01
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    191c:	2a e0       	ldi	r18, 0x0A	; 10
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	32 97       	sbiw	r30, 0x02	; 2
    1922:	20 83       	st	Z, r18
    1924:	31 83       	std	Z+1, r19	; 0x01
		break;
    1926:	02 c0       	rjmp	.+4      	; 0x192c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0x8c>
	}
	if (mode != PROFILE_SINGLE)
    1928:	41 30       	cpi	r20, 0x01	; 1
    192a:	b1 f0       	breq	.+44     	; 0x1958 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xb8>
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    192c:	fb 01       	movw	r30, r22
    192e:	20 81       	ld	r18, Z
    1930:	31 81       	ldd	r19, Z+1	; 0x01
    1932:	fc 01       	movw	r30, r24
    1934:	5a e1       	ldi	r21, 0x1A	; 26
    1936:	45 9f       	mul	r20, r21
    1938:	e0 0d       	add	r30, r0
    193a:	f1 1d       	adc	r31, r1
    193c:	11 24       	eor	r1, r1
    193e:	46 8d       	ldd	r20, Z+30	; 0x1e
    1940:	57 8d       	ldd	r21, Z+31	; 0x1f
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    1942:	84 8d       	ldd	r24, Z+28	; 0x1c
    1944:	95 8d       	ldd	r25, Z+29	; 0x1d
    1946:	82 17       	cp	r24, r18
    1948:	93 07       	cpc	r25, r19
    194a:	40 f0       	brcs	.+16     	; 0x195c <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xbc>
			pstGUI[mode].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	24 17       	cp	r18, r20
    1950:	35 07       	cpc	r19, r21
    1952:	38 f0       	brcs	.+14     	; 0x1962 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM+0xc2>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret
		break;
	}
	if (mode != PROFILE_SINGLE)
	{
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	08 95       	ret
	pstGUI[mode].updateEnergy = false;
}

bool CLaserControlApp::FreqLimits(uint16_t &freq, APP_PROFILE mode)
{
	bool UpdateFreq = false;
    1960:	80 e0       	ldi	r24, 0x00	; 0
		if (freq < pstGUI[mode].m_wMinFreq)	UpdateFreq = true;
		if (freq > pstGUI[mode].m_wMaxFreq)	UpdateFreq = true;
	}
	
	return UpdateFreq;
}
    1962:	08 95       	ret

00001964 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>:

bool CLaserControlApp::CheckLimitsFastMode(uint16_t &freq, uint16_t &duration, uint16_t &energy)
{
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	fc 01       	movw	r30, r24
    196e:	d9 01       	movw	r26, r18
	pstGUI[PROFILE_FAST].m_wMinFreq = PROFILE_FAST_MIN_FREQ;
    1970:	8a 57       	subi	r24, 0x7A	; 122
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	26 e0       	ldi	r18, 0x06	; 6
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	ec 01       	movw	r28, r24
    197a:	28 83       	st	Y, r18
    197c:	39 83       	std	Y+1, r19	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxFreq = PROFILE_FAST_MAX_FREQ;
    197e:	02 97       	sbiw	r24, 0x02	; 2
    1980:	2a e0       	ldi	r18, 0x0A	; 10
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	ec 01       	movw	r28, r24
    1986:	28 83       	st	Y, r18
    1988:	39 83       	std	Y+1, r19	; 0x01
	
	if (freq < pstGUI[PROFILE_FAST].m_wMinFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMinFreq;	}
    198a:	eb 01       	movw	r28, r22
    198c:	88 81       	ld	r24, Y
    198e:	99 81       	ldd	r25, Y+1	; 0x01
    1990:	06 97       	sbiw	r24, 0x06	; 6
    1992:	20 f4       	brcc	.+8      	; 0x199c <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x38>
    1994:	86 e0       	ldi	r24, 0x06	; 6
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	88 83       	st	Y, r24
    199a:	99 83       	std	Y+1, r25	; 0x01
	if (freq > pstGUI[PROFILE_FAST].m_wMaxFreq)	{	freq = pstGUI[PROFILE_FAST].m_wMaxFreq;	}
    199c:	cf 01       	movw	r24, r30
    199e:	8c 57       	subi	r24, 0x7C	; 124
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	ec 01       	movw	r28, r24
    19a4:	88 81       	ld	r24, Y
    19a6:	99 81       	ldd	r25, Y+1	; 0x01
    19a8:	eb 01       	movw	r28, r22
    19aa:	28 81       	ld	r18, Y
    19ac:	39 81       	ldd	r19, Y+1	; 0x01
    19ae:	82 17       	cp	r24, r18
    19b0:	93 07       	cpc	r25, r19
    19b2:	10 f4       	brcc	.+4      	; 0x19b8 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x54>
    19b4:	88 83       	st	Y, r24
    19b6:	99 83       	std	Y+1, r25	; 0x01
	
	laserDiodeData.laserprofile.Frequency = freq;
    19b8:	eb 01       	movw	r28, r22
    19ba:	88 81       	ld	r24, Y
    19bc:	99 81       	ldd	r25, Y+1	; 0x01
    19be:	ef 01       	movw	r28, r30
    19c0:	c2 51       	subi	r28, 0x12	; 18
    19c2:	df 4f       	sbci	r29, 0xFF	; 255
    19c4:	88 83       	st	Y, r24
    19c6:	99 83       	std	Y+1, r25	; 0x01
	
	if (energy > 13) { energy = 13;  }
    19c8:	8d 91       	ld	r24, X+
    19ca:	9c 91       	ld	r25, X
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    19ce:	8e 30       	cpi	r24, 0x0E	; 14
    19d0:	91 05       	cpc	r25, r1
    19d2:	30 f0       	brcs	.+12     	; 0x19e0 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x7c>
    19d4:	8d e0       	ldi	r24, 0x0D	; 13
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	8d 93       	st	X+, r24
    19da:	9c 93       	st	X, r25
    19dc:	11 97       	sbiw	r26, 0x01	; 1
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
	if (energy <  6) { energy = 6; }
    19e0:	06 97       	sbiw	r24, 0x06	; 6
    19e2:	28 f4       	brcc	.+10     	; 0x19ee <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_+0x8a>
    19e4:	86 e0       	ldi	r24, 0x06	; 6
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	8d 93       	st	X+, r24
    19ea:	9c 93       	st	X, r25
    19ec:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update energy helpers
	pstGUI[PROFILE_FAST].m_wEnergyOffset = 6;
    19ee:	ef 01       	movw	r28, r30
    19f0:	c8 57       	subi	r28, 0x78	; 120
    19f2:	df 4f       	sbci	r29, 0xFF	; 255
    19f4:	86 e0       	ldi	r24, 0x06	; 6
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	88 83       	st	Y, r24
    19fa:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyStep = 1;
    19fc:	9f 01       	movw	r18, r30
    19fe:	26 57       	subi	r18, 0x76	; 118
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	01 e0       	ldi	r16, 0x01	; 1
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	e9 01       	movw	r28, r18
    1a08:	08 83       	st	Y, r16
    1a0a:	19 83       	std	Y+1, r17	; 0x01
	pstGUI[PROFILE_FAST].m_wEnergyNumSteps = 13 - 6;
    1a0c:	2e 5f       	subi	r18, 0xFE	; 254
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	67 e0       	ldi	r22, 0x07	; 7
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	e9 01       	movw	r28, r18
    1a16:	68 83       	st	Y, r22
    1a18:	79 83       	std	Y+1, r23	; 0x01
	pstGUI[PROFILE_FAST].m_wMinEnergy_ = 6;
    1a1a:	2e 50       	subi	r18, 0x0E	; 14
    1a1c:	31 09       	sbc	r19, r1
    1a1e:	e9 01       	movw	r28, r18
    1a20:	88 83       	st	Y, r24
    1a22:	99 83       	std	Y+1, r25	; 0x01
	pstGUI[PROFILE_FAST].m_wMaxEnergy_ = 13;
    1a24:	cf 01       	movw	r24, r30
    1a26:	84 58       	subi	r24, 0x84	; 132
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	2d e0       	ldi	r18, 0x0D	; 13
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	ec 01       	movw	r28, r24
    1a30:	28 83       	st	Y, r18
    1a32:	39 83       	std	Y+1, r19	; 0x01
	
	// Update Energy
	laserDiodeData.laserprofile.EnergyCnt = (energy - pstGUI[PROFILE_FAST].m_wEnergyOffset) / pstGUI[PROFILE_FAST].m_wEnergyStep;
    1a34:	9f 01       	movw	r18, r30
    1a36:	2e 50       	subi	r18, 0x0E	; 14
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	8d 91       	ld	r24, X+
    1a3c:	9c 91       	ld	r25, X
    1a3e:	11 97       	sbiw	r26, 0x01	; 1
    1a40:	06 97       	sbiw	r24, 0x06	; 6
    1a42:	e9 01       	movw	r28, r18
    1a44:	88 83       	st	Y, r24
    1a46:	99 83       	std	Y+1, r25	; 0x01
	laserDiodeData.lasersettings.Energy = energy;	
    1a48:	2d 91       	ld	r18, X+
    1a4a:	3c 91       	ld	r19, X
    1a4c:	11 97       	sbiw	r26, 0x01	; 1
    1a4e:	cf 01       	movw	r24, r30
    1a50:	88 50       	subi	r24, 0x08	; 8
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	ec 01       	movw	r28, r24
    1a56:	28 83       	st	Y, r18
    1a58:	39 83       	std	Y+1, r19	; 0x01
	
	duration = (energy * 1440) / 500; // Calculate max duration
    1a5a:	6d 91       	ld	r22, X+
    1a5c:	7c 91       	ld	r23, X
    1a5e:	80 ea       	ldi	r24, 0xA0	; 160
    1a60:	95 e0       	ldi	r25, 0x05	; 5
    1a62:	68 9f       	mul	r22, r24
    1a64:	90 01       	movw	r18, r0
    1a66:	69 9f       	mul	r22, r25
    1a68:	30 0d       	add	r19, r0
    1a6a:	78 9f       	mul	r23, r24
    1a6c:	30 0d       	add	r19, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	36 95       	lsr	r19
    1a72:	27 95       	ror	r18
    1a74:	36 95       	lsr	r19
    1a76:	27 95       	ror	r18
    1a78:	a5 ec       	ldi	r26, 0xC5	; 197
    1a7a:	b0 e2       	ldi	r27, 0x20	; 32
    1a7c:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    1a80:	92 95       	swap	r25
    1a82:	82 95       	swap	r24
    1a84:	8f 70       	andi	r24, 0x0F	; 15
    1a86:	89 27       	eor	r24, r25
    1a88:	9f 70       	andi	r25, 0x0F	; 15
    1a8a:	89 27       	eor	r24, r25
    1a8c:	da 01       	movw	r26, r20
    1a8e:	8d 93       	st	X+, r24
    1a90:	9c 93       	st	X, r25
	/*if (duration >= 35) duration = 35;	else
	if (duration >= 24) duration = 24;	else
	if (duration >= 18) duration = 18;*/
	
	// Update duration helpers
	pstGUI[PROFILE_FAST].m_wDurationOffset = 18;
    1a92:	df 01       	movw	r26, r30
    1a94:	a2 57       	subi	r26, 0x72	; 114
    1a96:	bf 4f       	sbci	r27, 0xFF	; 255
    1a98:	82 e1       	ldi	r24, 0x12	; 18
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	8d 93       	st	X+, r24
    1a9e:	9c 93       	st	X, r25
    1aa0:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationStep = 1;
    1aa2:	12 96       	adiw	r26, 0x02	; 2
    1aa4:	0d 93       	st	X+, r16
    1aa6:	1c 93       	st	X, r17
    1aa8:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wDurationNumSteps = 35 - 18;
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	21 e1       	ldi	r18, 0x11	; 17
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	2d 93       	st	X+, r18
    1ab2:	3c 93       	st	X, r19
    1ab4:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMinDuration = 18;
    1ab6:	50 97       	sbiw	r26, 0x10	; 16
    1ab8:	8d 93       	st	X+, r24
    1aba:	9c 93       	st	X, r25
    1abc:	11 97       	sbiw	r26, 0x01	; 1
	pstGUI[PROFILE_FAST].m_wMaxDuration = 35;
    1abe:	12 97       	sbiw	r26, 0x02	; 2
    1ac0:	83 e2       	ldi	r24, 0x23	; 35
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	8d 93       	st	X+, r24
    1ac6:	9c 93       	st	X, r25
    1ac8:	11 97       	sbiw	r26, 0x01	; 1
		
	// Update Duration
	laserDiodeData.laserprofile.DurationCnt = (duration - pstGUI[PROFILE_FAST].m_wDurationOffset) / pstGUI[PROFILE_FAST].m_wDurationStep;
    1aca:	a0 59       	subi	r26, 0x90	; 144
    1acc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ace:	ea 01       	movw	r28, r20
    1ad0:	88 81       	ld	r24, Y
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	42 97       	sbiw	r24, 0x12	; 18
    1ad6:	8d 93       	st	X+, r24
    1ad8:	9c 93       	st	X, r25
	laserDiodeData.lasersettings.Duration = duration;
    1ada:	88 81       	ld	r24, Y
    1adc:	99 81       	ldd	r25, Y+1	; 0x01
    1ade:	ea 50       	subi	r30, 0x0A	; 10
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 83       	st	Z, r24
    1ae4:	91 83       	std	Z+1, r25	; 0x01
	
	return true;
}
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
		update = false;
	}
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    1af2:	4f 92       	push	r4
    1af4:	5f 92       	push	r5
    1af6:	6f 92       	push	r6
    1af8:	7f 92       	push	r7
    1afa:	af 92       	push	r10
    1afc:	bf 92       	push	r11
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	2c 97       	sbiw	r28, 0x0c	; 12
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	6c 01       	movw	r12, r24
    1b1a:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    1b1c:	db 01       	movw	r26, r22
    1b1e:	0d 91       	ld	r16, X+
    1b20:	1c 91       	ld	r17, X
    1b22:	88 ee       	ldi	r24, 0xE8	; 232
    1b24:	93 e0       	ldi	r25, 0x03	; 3
    1b26:	b8 01       	movw	r22, r16
    1b28:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1b2c:	7b 01       	movw	r14, r22
	uint32_t dutycycle = uint32_t(settings->Duration * 1000ul) / uint32_t(period);	//  duration [ms] / period [us]
    1b2e:	22 81       	ldd	r18, Z+2	; 0x02
    1b30:	33 81       	ldd	r19, Z+3	; 0x03
    1b32:	a8 ee       	ldi	r26, 0xE8	; 232
    1b34:	b3 e0       	ldi	r27, 0x03	; 3
    1b36:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    1b3a:	97 01       	movw	r18, r14
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    1b44:	29 01       	movw	r4, r18
    1b46:	3a 01       	movw	r6, r20
	
	// calculate timer settings
	laserTimerPeriod = (6250 / profile->Frequency) * 10;
    1b48:	8a e6       	ldi	r24, 0x6A	; 106
    1b4a:	98 e1       	ldi	r25, 0x18	; 24
    1b4c:	b8 01       	movw	r22, r16
    1b4e:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    1b52:	8b 01       	movw	r16, r22
    1b54:	00 0f       	add	r16, r16
    1b56:	11 1f       	adc	r17, r17
    1b58:	ab 01       	movw	r20, r22
    1b5a:	44 0f       	add	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	44 0f       	add	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	44 0f       	add	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	04 0f       	add	r16, r20
    1b68:	15 1f       	adc	r17, r21
    1b6a:	f6 01       	movw	r30, r12
    1b6c:	ee 52       	subi	r30, 0x2E	; 46
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	00 83       	st	Z, r16
    1b72:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCycle = laserTimerPeriod - uint16_t((uint32_t(laserTimerPeriod) * dutycycle) / 1000ul);
    1b74:	56 01       	movw	r10, r12
    1b76:	b4 ed       	ldi	r27, 0xD4	; 212
    1b78:	ab 0e       	add	r10, r27
    1b7a:	b1 1c       	adc	r11, r1
    1b7c:	d8 01       	movw	r26, r16
    1b7e:	a3 01       	movw	r20, r6
    1b80:	92 01       	movw	r18, r4
    1b82:	0e 94 da 3e 	call	0x7db4	; 0x7db4 <__muluhisi3>
    1b86:	28 ee       	ldi	r18, 0xE8	; 232
    1b88:	33 e0       	ldi	r19, 0x03	; 3
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    1b92:	02 1b       	sub	r16, r18
    1b94:	13 0b       	sbc	r17, r19
    1b96:	f5 01       	movw	r30, r10
    1b98:	00 83       	st	Z, r16
    1b9a:	11 83       	std	Z+1, r17	; 0x01
	laserTimerDutyCyclems = period;
    1b9c:	32 96       	adiw	r30, 0x02	; 2
    1b9e:	e0 82       	st	Z, r14
    1ba0:	f1 82       	std	Z+1, r15	; 0x01
	
	laserTimer.EnableChannel(TIMER_CHANNEL_A);
    1ba2:	60 e1       	ldi	r22, 0x10	; 16
    1ba4:	88 e1       	ldi	r24, 0x18	; 24
    1ba6:	96 e2       	ldi	r25, 0x26	; 38
    1ba8:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);
    1bac:	60 e2       	ldi	r22, 0x20	; 32
    1bae:	88 e1       	ldi	r24, 0x18	; 24
    1bb0:	96 e2       	ldi	r25, 0x26	; 38
    1bb2:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1bb6:	60 e1       	ldi	r22, 0x10	; 16
    1bb8:	88 e1       	ldi	r24, 0x18	; 24
    1bba:	96 e2       	ldi	r25, 0x26	; 38
    1bbc:	0e 94 85 3c 	call	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1bc0:	60 e2       	ldi	r22, 0x20	; 32
    1bc2:	88 e1       	ldi	r24, 0x18	; 24
    1bc4:	96 e2       	ldi	r25, 0x26	; 38
    1bc6:	0e 94 85 3c 	call	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	
	return result;
    1bca:	86 e0       	ldi	r24, 0x06	; 6
    1bcc:	fe 01       	movw	r30, r28
    1bce:	37 96       	adiw	r30, 0x07	; 7
    1bd0:	de 01       	movw	r26, r28
    1bd2:	11 96       	adiw	r26, 0x01	; 1
    1bd4:	01 90       	ld	r0, Z+
    1bd6:	0d 92       	st	X+, r0
    1bd8:	8a 95       	dec	r24
    1bda:	e1 f7       	brne	.-8      	; 0x1bd4 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0xe2>
    1bdc:	29 81       	ldd	r18, Y+1	; 0x01
    1bde:	3a 81       	ldd	r19, Y+2	; 0x02
    1be0:	4b 81       	ldd	r20, Y+3	; 0x03
    1be2:	5c 81       	ldd	r21, Y+4	; 0x04
    1be4:	6d 81       	ldd	r22, Y+5	; 0x05
    1be6:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	2c 96       	adiw	r28, 0x0c	; 12
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	7f 90       	pop	r7
    1c08:	6f 90       	pop	r6
    1c0a:	5f 90       	pop	r5
    1c0c:	4f 90       	pop	r4
    1c0e:	08 95       	ret

00001c10 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <_ZN16CLaserControlApp13MelaninPresetEj+0xe>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <_ZN16CLaserControlApp13MelaninPresetEj+0x10>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	7c 01       	movw	r14, r24
	uint16_t freq = 3;
    1c26:	83 e0       	ldi	r24, 0x03	; 3
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t duration = 65;
    1c2e:	81 e4       	ldi	r24, 0x41	; 65
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    1c34:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t energy = 22;
    1c36:	86 e1       	ldi	r24, 0x16	; 22
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
	
	Profile = PROFILE_SLOW;
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	f7 01       	movw	r30, r14
    1c42:	86 87       	std	Z+14, r24	; 0x0e
	laserDiodeData.mode = Profile;
    1c44:	e4 51       	subi	r30, 0x14	; 20
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	80 83       	st	Z, r24
    1c4e:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
    1c50:	6a 30       	cpi	r22, 0x0A	; 10
    1c52:	71 05       	cpc	r23, r1
    1c54:	50 f4       	brcc	.+20     	; 0x1c6a <_ZN16CLaserControlApp13MelaninPresetEj+0x5a>
	{
		laserDiodeData.phototype = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	74 96       	adiw	r30, 0x14	; 20
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 75; energy = 22;
    1c60:	8b e4       	ldi	r24, 0x4B	; 75
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	9c 83       	std	Y+4, r25	; 0x04
    1c68:	52 c0       	rjmp	.+164    	; 0x1d0e <_ZN16CLaserControlApp13MelaninPresetEj+0xfe>
	}
	else
	if (melanin < 20)
    1c6a:	64 31       	cpi	r22, 0x14	; 20
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	78 f4       	brcc	.+30     	; 0x1c8e <_ZN16CLaserControlApp13MelaninPresetEj+0x7e>
	{
		laserDiodeData.phototype = 2;
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	f7 01       	movw	r30, r14
    1c76:	f3 95       	inc	r31
    1c78:	80 83       	st	Z, r24
    1c7a:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 70; energy = 26;
    1c7c:	86 e4       	ldi	r24, 0x46	; 70
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	9c 83       	std	Y+4, r25	; 0x04
    1c84:	8a e1       	ldi	r24, 0x1A	; 26
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	40 c0       	rjmp	.+128    	; 0x1d0e <_ZN16CLaserControlApp13MelaninPresetEj+0xfe>
	}
	else
	if (melanin < 35)
    1c8e:	63 32       	cpi	r22, 0x23	; 35
    1c90:	71 05       	cpc	r23, r1
    1c92:	78 f4       	brcc	.+30     	; 0x1cb2 <_ZN16CLaserControlApp13MelaninPresetEj+0xa2>
	{
		laserDiodeData.phototype = 3;
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	f7 01       	movw	r30, r14
    1c9a:	f3 95       	inc	r31
    1c9c:	80 83       	st	Z, r24
    1c9e:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 70; energy = 26;
    1ca0:	86 e4       	ldi	r24, 0x46	; 70
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	9c 83       	std	Y+4, r25	; 0x04
    1ca8:	8a e1       	ldi	r24, 0x1A	; 26
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	2e c0       	rjmp	.+92     	; 0x1d0e <_ZN16CLaserControlApp13MelaninPresetEj+0xfe>
	}
	else
	if (melanin < 49)
    1cb2:	61 33       	cpi	r22, 0x31	; 49
    1cb4:	71 05       	cpc	r23, r1
    1cb6:	58 f4       	brcc	.+22     	; 0x1cce <_ZN16CLaserControlApp13MelaninPresetEj+0xbe>
	{
		laserDiodeData.phototype = 4;
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	f3 95       	inc	r31
    1cc0:	80 83       	st	Z, r24
    1cc2:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 65; energy = 23;
    1cc4:	87 e1       	ldi	r24, 0x17	; 23
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	20 c0       	rjmp	.+64     	; 0x1d0e <_ZN16CLaserControlApp13MelaninPresetEj+0xfe>
	}
	else
	if (melanin < 72)
    1cce:	68 34       	cpi	r22, 0x48	; 72
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	58 f4       	brcc	.+22     	; 0x1cea <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
    1cd4:	85 e0       	ldi	r24, 0x05	; 5
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	f7 01       	movw	r30, r14
    1cda:	f3 95       	inc	r31
    1cdc:	80 83       	st	Z, r24
    1cde:	91 83       	std	Z+1, r25	; 0x01
		freq = 3; duration = 100; energy = 22;
    1ce0:	84 e6       	ldi	r24, 0x64	; 100
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	12 c0       	rjmp	.+36     	; 0x1d0e <_ZN16CLaserControlApp13MelaninPresetEj+0xfe>
	}
	else
	{
		laserDiodeData.phototype = 6;
    1cea:	86 e0       	ldi	r24, 0x06	; 6
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	f7 01       	movw	r30, r14
    1cf0:	f3 95       	inc	r31
    1cf2:	80 83       	st	Z, r24
    1cf4:	91 83       	std	Z+1, r25	; 0x01
		freq = 1; duration = 200; energy = 32;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	88 ec       	ldi	r24, 0xC8	; 200
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	80 e2       	ldi	r24, 0x20	; 32
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	LaserPreset(freq, duration, energy, Profile);
    1d0e:	f7 01       	movw	r30, r14
    1d10:	06 85       	ldd	r16, Z+14	; 0x0e
    1d12:	9e 01       	movw	r18, r28
    1d14:	2f 5f       	subi	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	ae 01       	movw	r20, r28
    1d1a:	4d 5f       	subi	r20, 0xFD	; 253
    1d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1e:	be 01       	movw	r22, r28
    1d20:	6b 5f       	subi	r22, 0xFB	; 251
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	c7 01       	movw	r24, r14
    1d26:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	update = true;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	81 8b       	std	Z+17, r24	; 0x11
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1d30:	26 85       	ldd	r18, Z+14	; 0x0e
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	87 01       	movw	r16, r14
    1d36:	0c 50       	subi	r16, 0x0C	; 12
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	ab 01       	movw	r20, r22
    1d42:	42 0f       	add	r20, r18
    1d44:	53 1f       	adc	r21, r19
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	4c 54       	subi	r20, 0x4C	; 76
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	4e 0d       	add	r20, r14
    1d50:	5f 1d       	adc	r21, r15
    1d52:	62 0f       	add	r22, r18
    1d54:	73 1f       	adc	r23, r19
    1d56:	66 0f       	add	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	6a 56       	subi	r22, 0x6A	; 106
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	6e 0d       	add	r22, r14
    1d60:	7f 1d       	adc	r23, r15
    1d62:	c7 01       	movw	r24, r14
    1d64:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1d68:	f8 01       	movw	r30, r16
    1d6a:	20 83       	st	Z, r18
    1d6c:	31 83       	std	Z+1, r19	; 0x01
    1d6e:	42 83       	std	Z+2, r20	; 0x02
    1d70:	53 83       	std	Z+3, r21	; 0x03
    1d72:	64 83       	std	Z+4, r22	; 0x04
    1d74:	75 83       	std	Z+5, r23	; 0x05
}
    1d76:	26 96       	adiw	r28, 0x06	; 6
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	08 95       	ret

00001d8a <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <_ZN16CLaserControlApp15PhototypePresetEj+0xe>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <_ZN16CLaserControlApp15PhototypePresetEj+0x10>
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	7c 01       	movw	r14, r24
	uint16_t freq = 3;
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t duration = 65;
    1da8:	81 e4       	ldi	r24, 0x41	; 65
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	8b 83       	std	Y+3, r24	; 0x03
    1dae:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t energy = 22;
    1db0:	86 e1       	ldi	r24, 0x16	; 22
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	9a 83       	std	Y+2, r25	; 0x02
	
	Profile = PROFILE_SLOW;
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	f7 01       	movw	r30, r14
    1dbc:	86 87       	std	Z+14, r24	; 0x0e
	laserDiodeData.mode = Profile;
    1dbe:	e4 51       	subi	r30, 0x14	; 20
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
    1dca:	74 96       	adiw	r30, 0x14	; 20
    1dcc:	60 83       	st	Z, r22
    1dce:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
    1dd0:	63 30       	cpi	r22, 0x03	; 3
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	69 f1       	breq	.+90     	; 0x1e30 <_ZN16CLaserControlApp15PhototypePresetEj+0xa6>
    1dd6:	38 f4       	brcc	.+14     	; 0x1de6 <_ZN16CLaserControlApp15PhototypePresetEj+0x5c>
    1dd8:	61 30       	cpi	r22, 0x01	; 1
    1dda:	71 05       	cpc	r23, r1
    1ddc:	69 f0       	breq	.+26     	; 0x1df8 <_ZN16CLaserControlApp15PhototypePresetEj+0x6e>
    1dde:	62 30       	cpi	r22, 0x02	; 2
    1de0:	71 05       	cpc	r23, r1
    1de2:	b1 f0       	breq	.+44     	; 0x1e10 <_ZN16CLaserControlApp15PhototypePresetEj+0x86>
    1de4:	60 c0       	rjmp	.+192    	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
    1de6:	65 30       	cpi	r22, 0x05	; 5
    1de8:	71 05       	cpc	r23, r1
    1dea:	f1 f1       	breq	.+124    	; 0x1e68 <_ZN16CLaserControlApp15PhototypePresetEj+0xde>
    1dec:	88 f1       	brcs	.+98     	; 0x1e50 <_ZN16CLaserControlApp15PhototypePresetEj+0xc6>
    1dee:	66 30       	cpi	r22, 0x06	; 6
    1df0:	71 05       	cpc	r23, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <_ZN16CLaserControlApp15PhototypePresetEj+0x6c>
    1df4:	45 c0       	rjmp	.+138    	; 0x1e80 <_ZN16CLaserControlApp15PhototypePresetEj+0xf6>
    1df6:	57 c0       	rjmp	.+174    	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
    1df8:	85 e0       	ldi	r24, 0x05	; 5
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	e2 50       	subi	r30, 0x02	; 2
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	80 83       	st	Z, r24
    1e04:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 75; energy = 22;
    1e06:	8b e4       	ldi	r24, 0x4B	; 75
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
		}
		break;
    1e0e:	4b c0       	rjmp	.+150    	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
		case 2:
		{
			laserDiodeData.melanin = 14;
    1e10:	8e e0       	ldi	r24, 0x0E	; 14
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	f7 01       	movw	r30, r14
    1e16:	e2 50       	subi	r30, 0x02	; 2
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 83       	st	Z, r24
    1e1c:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 70; energy = 26;
    1e1e:	86 e4       	ldi	r24, 0x46	; 70
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8a e1       	ldi	r24, 0x1A	; 26
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e2e:	3b c0       	rjmp	.+118    	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
		case 3:
		{
			laserDiodeData.melanin = 27;
    1e30:	8b e1       	ldi	r24, 0x1B	; 27
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	f7 01       	movw	r30, r14
    1e36:	e2 50       	subi	r30, 0x02	; 2
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 70; energy = 26;
    1e3e:	86 e4       	ldi	r24, 0x46	; 70
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8a e1       	ldi	r24, 0x1A	; 26
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e4e:	2b c0       	rjmp	.+86     	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
		case 4:
		{
			laserDiodeData.melanin = 41;
    1e50:	89 e2       	ldi	r24, 0x29	; 41
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	f7 01       	movw	r30, r14
    1e56:	e2 50       	subi	r30, 0x02	; 2
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 65; energy = 23;
    1e5e:	87 e1       	ldi	r24, 0x17	; 23
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	9a 83       	std	Y+2, r25	; 0x02
		}
		break;
    1e66:	1f c0       	rjmp	.+62     	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
		case 5:
		{
			laserDiodeData.melanin = 61;
    1e68:	8d e3       	ldi	r24, 0x3D	; 61
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	f7 01       	movw	r30, r14
    1e6e:	e2 50       	subi	r30, 0x02	; 2
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 83       	st	Z, r24
    1e74:	91 83       	std	Z+1, r25	; 0x01
			freq = 3; duration = 100; energy = 22;
    1e76:	84 e6       	ldi	r24, 0x64	; 100
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
		}
		break;
    1e7e:	13 c0       	rjmp	.+38     	; 0x1ea6 <_ZN16CLaserControlApp15PhototypePresetEj+0x11c>
		case 6:
		{
			laserDiodeData.melanin = 85;
    1e80:	85 e5       	ldi	r24, 0x55	; 85
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	f7 01       	movw	r30, r14
    1e86:	e2 50       	subi	r30, 0x02	; 2
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
			freq = 1; duration = 200; energy = 32;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	88 ec       	ldi	r24, 0xC8	; 200
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	80 e2       	ldi	r24, 0x20	; 32
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
		}
	}
	
	LaserPreset(freq, duration, energy, Profile);
    1ea6:	02 e0       	ldi	r16, 0x02	; 2
    1ea8:	9e 01       	movw	r18, r28
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	ae 01       	movw	r20, r28
    1eb0:	4d 5f       	subi	r20, 0xFD	; 253
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb4:	be 01       	movw	r22, r28
    1eb6:	6b 5f       	subi	r22, 0xFB	; 251
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	c7 01       	movw	r24, r14
    1ebc:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	update = true;	
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	81 8b       	std	Z+17, r24	; 0x11
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile], (DGUS_LASERSETTINGS*)&m_structLaserSettings[Profile]);
    1ec6:	26 85       	ldd	r18, Z+14	; 0x0e
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	87 01       	movw	r16, r14
    1ecc:	0c 50       	subi	r16, 0x0C	; 12
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	b9 01       	movw	r22, r18
    1ed2:	66 0f       	add	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	ab 01       	movw	r20, r22
    1ed8:	42 0f       	add	r20, r18
    1eda:	53 1f       	adc	r21, r19
    1edc:	44 0f       	add	r20, r20
    1ede:	55 1f       	adc	r21, r21
    1ee0:	4c 54       	subi	r20, 0x4C	; 76
    1ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee4:	4e 0d       	add	r20, r14
    1ee6:	5f 1d       	adc	r21, r15
    1ee8:	62 0f       	add	r22, r18
    1eea:	73 1f       	adc	r23, r19
    1eec:	66 0f       	add	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	6a 56       	subi	r22, 0x6A	; 106
    1ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef4:	6e 0d       	add	r22, r14
    1ef6:	7f 1d       	adc	r23, r15
    1ef8:	c7 01       	movw	r24, r14
    1efa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    1efe:	f8 01       	movw	r30, r16
    1f00:	20 83       	st	Z, r18
    1f02:	31 83       	std	Z+1, r19	; 0x01
    1f04:	42 83       	std	Z+2, r20	; 0x02
    1f06:	53 83       	std	Z+3, r21	; 0x03
    1f08:	64 83       	std	Z+4, r22	; 0x04
    1f0a:	75 83       	std	Z+5, r23	; 0x05
}
    1f0c:	26 96       	adiw	r28, 0x06	; 6
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	08 95       	ret

00001f20 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1f20:	2f 92       	push	r2
    1f22:	3f 92       	push	r3
    1f24:	4f 92       	push	r4
    1f26:	5f 92       	push	r5
    1f28:	6f 92       	push	r6
    1f2a:	7f 92       	push	r7
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x24>
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x26>
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	7c 01       	movw	r14, r24
	// GUI class initialization
	m_cpSender = sender;
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	ec 5d       	subi	r30, 0xDC	; 220
    1f50:	fe 4f       	sbci	r31, 0xFE	; 254
    1f52:	60 83       	st	Z, r22
    1f54:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    1f56:	fc 01       	movw	r30, r24
    1f58:	17 86       	std	Z+15, r1	; 0x0f
	update = false;
    1f5a:	11 8a       	std	Z+17, r1	; 0x11
	prepare = false;
    1f5c:	12 8a       	std	Z+18, r1	; 0x12
	peltier_en = false;
    1f5e:	13 8a       	std	Z+19, r1	; 0x13
	//isstarted = false;
	m_wSetMin = 1;
    1f60:	3c 01       	movw	r6, r24
    1f62:	f4 ee       	ldi	r31, 0xE4	; 228
    1f64:	6f 1a       	sub	r6, r31
    1f66:	fe ef       	ldi	r31, 0xFE	; 254
    1f68:	7f 0a       	sbc	r7, r31
    1f6a:	aa 24       	eor	r10, r10
    1f6c:	a3 94       	inc	r10
    1f6e:	b1 2c       	mov	r11, r1
    1f70:	f3 01       	movw	r30, r6
    1f72:	a0 82       	st	Z, r10
    1f74:	b1 82       	std	Z+1, r11	; 0x01
	m_wSetSec = 40;
    1f76:	4c 01       	movw	r8, r24
    1f78:	f2 ee       	ldi	r31, 0xE2	; 226
    1f7a:	8f 1a       	sub	r8, r31
    1f7c:	fe ef       	ldi	r31, 0xFE	; 254
    1f7e:	9f 0a       	sbc	r9, r31
    1f80:	0f 2e       	mov	r0, r31
    1f82:	f8 e2       	ldi	r31, 0x28	; 40
    1f84:	cf 2e       	mov	r12, r31
    1f86:	d1 2c       	mov	r13, r1
    1f88:	f0 2d       	mov	r31, r0
    1f8a:	f4 01       	movw	r30, r8
    1f8c:	c0 82       	st	Z, r12
    1f8e:	d1 82       	std	Z+1, r13	; 0x01
	m_wMillSec = 0;
    1f90:	34 97       	sbiw	r30, 0x04	; 4
    1f92:	10 82       	st	Z, r1
    1f94:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    1f96:	f3 01       	movw	r30, r6
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	36 97       	sbiw	r30, 0x06	; 6
    1f9e:	80 83       	st	Z, r24
    1fa0:	91 83       	std	Z+1, r25	; 0x01
	m_wSeconds = m_wSetSec;
    1fa2:	f4 01       	movw	r30, r8
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	36 97       	sbiw	r30, 0x06	; 6
    1faa:	80 83       	st	Z, r24
    1fac:	91 83       	std	Z+1, r25	; 0x01
	m_wDeadTime = 0;
    1fae:	3a 96       	adiw	r30, 0x0a	; 10
    1fb0:	10 82       	st	Z, r1
    1fb2:	11 82       	std	Z+1, r1	; 0x01
	
	uint16_t freq = 10;
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	fa e0       	ldi	r31, 0x0A	; 10
    1fb8:	4f 2e       	mov	r4, r31
    1fba:	51 2c       	mov	r5, r1
    1fbc:	f0 2d       	mov	r31, r0
    1fbe:	4d 82       	std	Y+5, r4	; 0x05
    1fc0:	5e 82       	std	Y+6, r5	; 0x06
	uint16_t duration = 40;
    1fc2:	cb 82       	std	Y+3, r12	; 0x03
    1fc4:	dc 82       	std	Y+4, r13	; 0x04
	uint16_t energy = 14;
    1fc6:	0f 2e       	mov	r0, r31
    1fc8:	fe e0       	ldi	r31, 0x0E	; 14
    1fca:	2f 2e       	mov	r2, r31
    1fcc:	31 2c       	mov	r3, r1
    1fce:	f0 2d       	mov	r31, r0
    1fd0:	29 82       	std	Y+1, r2	; 0x01
    1fd2:	3a 82       	std	Y+2, r3	; 0x02
	
	// Fast profile
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    1fd4:	04 e0       	ldi	r16, 0x04	; 4
    1fd6:	9e 01       	movw	r18, r28
    1fd8:	2f 5f       	subi	r18, 0xFF	; 255
    1fda:	3f 4f       	sbci	r19, 0xFF	; 255
    1fdc:	ae 01       	movw	r20, r28
    1fde:	4d 5f       	subi	r20, 0xFD	; 253
    1fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe2:	be 01       	movw	r22, r28
    1fe4:	6b 5f       	subi	r22, 0xFB	; 251
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	c7 01       	movw	r24, r14
    1fea:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Medium profile
	freq = 5; duration = 80; energy = 26;
    1fee:	85 e0       	ldi	r24, 0x05	; 5
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	80 e5       	ldi	r24, 0x50	; 80
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8a e1       	ldi	r24, 0x1A	; 26
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_MEDIUM);
    2006:	03 e0       	ldi	r16, 0x03	; 3
    2008:	9e 01       	movw	r18, r28
    200a:	2f 5f       	subi	r18, 0xFF	; 255
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	ae 01       	movw	r20, r28
    2010:	4d 5f       	subi	r20, 0xFD	; 253
    2012:	5f 4f       	sbci	r21, 0xFF	; 255
    2014:	be 01       	movw	r22, r28
    2016:	6b 5f       	subi	r22, 0xFB	; 251
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	c7 01       	movw	r24, r14
    201c:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Slow profile
	freq = 2; duration = 120; energy = 36;
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	88 e7       	ldi	r24, 0x78	; 120
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	8b 83       	std	Y+3, r24	; 0x03
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	84 e2       	ldi	r24, 0x24	; 36
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SLOW);
    2038:	02 e0       	ldi	r16, 0x02	; 2
    203a:	9e 01       	movw	r18, r28
    203c:	2f 5f       	subi	r18, 0xFF	; 255
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	ae 01       	movw	r20, r28
    2042:	4d 5f       	subi	r20, 0xFD	; 253
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	be 01       	movw	r22, r28
    2048:	6b 5f       	subi	r22, 0xFB	; 251
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	c7 01       	movw	r24, r14
    204e:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	// Single profile
	freq = 1; duration = 100; energy = 38;
    2052:	ad 82       	std	Y+5, r10	; 0x05
    2054:	be 82       	std	Y+6, r11	; 0x06
    2056:	84 e6       	ldi	r24, 0x64	; 100
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	8b 83       	std	Y+3, r24	; 0x03
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	86 e2       	ldi	r24, 0x26	; 38
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	9a 83       	std	Y+2, r25	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_SINGLE);
    2066:	01 e0       	ldi	r16, 0x01	; 1
    2068:	9e 01       	movw	r18, r28
    206a:	2f 5f       	subi	r18, 0xFF	; 255
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	ae 01       	movw	r20, r28
    2070:	4d 5f       	subi	r20, 0xFD	; 253
    2072:	5f 4f       	sbci	r21, 0xFF	; 255
    2074:	be 01       	movw	r22, r28
    2076:	6b 5f       	subi	r22, 0xFB	; 251
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	c7 01       	movw	r24, r14
    207c:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Current profile
	Profile = PROFILE_FAST;
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	f7 01       	movw	r30, r14
    2084:	86 87       	std	Z+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 1b 40 	call	0x8036	; 0x8036 <eeprom_read_dword>
    208e:	f7 01       	movw	r30, r14
    2090:	e6 52       	subi	r30, 0x26	; 38
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 83       	st	Z, r22
    2096:	71 83       	std	Z+1, r23	; 0x01
    2098:	82 83       	std	Z+2, r24	; 0x02
    209a:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    209c:	72 96       	adiw	r30, 0x12	; 18
    209e:	24 e0       	ldi	r18, 0x04	; 4
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	20 83       	st	Z, r18
    20a4:	31 83       	std	Z+1, r19	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    20a6:	d7 01       	movw	r26, r14
    20a8:	a2 51       	subi	r26, 0x12	; 18
    20aa:	bf 4f       	sbci	r27, 0xFF	; 255
    20ac:	fe 97       	sbiw	r30, 0x3e	; 62
    20ae:	26 e0       	ldi	r18, 0x06	; 6
    20b0:	01 90       	ld	r0, Z+
    20b2:	0d 92       	st	X+, r0
    20b4:	2a 95       	dec	r18
    20b6:	e1 f7       	brne	.-8      	; 0x20b0 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x190>
	memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[PROFILE_FAST], sizeof(DGUS_LASERSETTINGS));
    20b8:	d7 01       	movw	r26, r14
    20ba:	ac 50       	subi	r26, 0x0C	; 12
    20bc:	bf 4f       	sbci	r27, 0xFF	; 255
    20be:	f7 01       	movw	r30, r14
    20c0:	e4 53       	subi	r30, 0x34	; 52
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	26 e0       	ldi	r18, 0x06	; 6
    20c6:	01 90       	ld	r0, Z+
    20c8:	0d 92       	st	X+, r0
    20ca:	2a 95       	dec	r18
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x1a6>
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    20ce:	f3 01       	movw	r30, r6
    20d0:	20 81       	ld	r18, Z
    20d2:	31 81       	ldd	r19, Z+1	; 0x01
    20d4:	74 97       	sbiw	r30, 0x14	; 20
    20d6:	20 83       	st	Z, r18
    20d8:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    20da:	f4 01       	movw	r30, r8
    20dc:	20 81       	ld	r18, Z
    20de:	31 81       	ldd	r19, Z+1	; 0x01
    20e0:	74 97       	sbiw	r30, 0x14	; 20
    20e2:	20 83       	st	Z, r18
    20e4:	31 83       	std	Z+1, r19	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    20e6:	0e 94 81 1b 	call	0x3702	; 0x3702 <_Z6swap32m>
    20ea:	f7 01       	movw	r30, r14
    20ec:	e6 50       	subi	r30, 0x06	; 6
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 83       	st	Z, r22
    20f2:	71 83       	std	Z+1, r23	; 0x01
    20f4:	82 83       	std	Z+2, r24	; 0x02
    20f6:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    20f8:	34 96       	adiw	r30, 0x04	; 4
    20fa:	10 82       	st	Z, r1
    20fc:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    20fe:	32 96       	adiw	r30, 0x02	; 2
    2100:	a0 82       	st	Z, r10
    2102:	b1 82       	std	Z+1, r11	; 0x01
	laserDiodeData.temperature = temperature;
    2104:	32 96       	adiw	r30, 0x02	; 2
    2106:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    210a:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    210e:	80 83       	st	Z, r24
    2110:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    2112:	32 96       	adiw	r30, 0x02	; 2
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	80 83       	st	Z, r24
    211a:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    211c:	32 96       	adiw	r30, 0x02	; 2
    211e:	10 82       	st	Z, r1
    2120:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    2122:	36 96       	adiw	r30, 0x06	; 6
    2124:	10 82       	st	Z, r1
    2126:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    2128:	32 96       	adiw	r30, 0x02	; 2
    212a:	8d e0       	ldi	r24, 0x0D	; 13
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	80 83       	st	Z, r24
    2130:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    2132:	34 96       	adiw	r30, 0x04	; 4
    2134:	10 82       	st	Z, r1
    2136:	11 82       	std	Z+1, r1	; 0x01
    2138:	12 82       	std	Z+2, r1	; 0x02
    213a:	13 82       	std	Z+3, r1	; 0x03
	
	// Preset hardware to FAST mode
	freq = 10;
    213c:	4d 82       	std	Y+5, r4	; 0x05
    213e:	5e 82       	std	Y+6, r5	; 0x06
	duration = 40;
    2140:	cb 82       	std	Y+3, r12	; 0x03
    2142:	dc 82       	std	Y+4, r13	; 0x04
	energy = 14;
    2144:	29 82       	std	Y+1, r2	; 0x01
    2146:	3a 82       	std	Y+2, r3	; 0x02
	LaserPreset(freq, duration, energy, PROFILE_FAST);
    2148:	04 e0       	ldi	r16, 0x04	; 4
    214a:	9e 01       	movw	r18, r28
    214c:	2f 5f       	subi	r18, 0xFF	; 255
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	ae 01       	movw	r20, r28
    2152:	4d 5f       	subi	r20, 0xFD	; 253
    2154:	5f 4f       	sbci	r21, 0xFF	; 255
    2156:	be 01       	movw	r22, r28
    2158:	6b 5f       	subi	r22, 0xFB	; 251
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	c7 01       	movw	r24, r14
    215e:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16CLaserControlApp11LaserPresetERjS0_S0_16APP_PROFILE_ENUM>
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    2162:	47 e0       	ldi	r20, 0x07	; 7
    2164:	63 e0       	ldi	r22, 0x03	; 3
    2166:	88 e1       	ldi	r24, 0x18	; 24
    2168:	96 e2       	ldi	r25, 0x26	; 38
    216a:	0e 94 48 3c 	call	0x7890	; 0x7890 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    216e:	f7 01       	movw	r30, r14
    2170:	ee 52       	subi	r30, 0x2E	; 46
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	88 e1       	ldi	r24, 0x18	; 24
    217a:	96 e2       	ldi	r25, 0x26	; 38
    217c:	0e 94 96 3c 	call	0x792c	; 0x792c <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    2180:	67 01       	movw	r12, r14
    2182:	f4 ed       	ldi	r31, 0xD4	; 212
    2184:	cf 0e       	add	r12, r31
    2186:	d1 1c       	adc	r13, r1
    2188:	f6 01       	movw	r30, r12
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	88 e1       	ldi	r24, 0x18	; 24
    2190:	96 e2       	ldi	r25, 0x26	; 38
    2192:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    2196:	21 e0       	ldi	r18, 0x01	; 1
    2198:	a7 01       	movw	r20, r14
    219a:	69 e5       	ldi	r22, 0x59	; 89
    219c:	7a e1       	ldi	r23, 0x1A	; 26
    219e:	88 e1       	ldi	r24, 0x18	; 24
    21a0:	96 e2       	ldi	r25, 0x26	; 38
    21a2:	0e 94 af 3c 	call	0x795e	; 0x795e <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	a7 01       	movw	r20, r14
    21aa:	61 e6       	ldi	r22, 0x61	; 97
    21ac:	74 e0       	ldi	r23, 0x04	; 4
    21ae:	88 e1       	ldi	r24, 0x18	; 24
    21b0:	96 e2       	ldi	r25, 0x26	; 38
    21b2:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    21b6:	60 e1       	ldi	r22, 0x10	; 16
    21b8:	88 e1       	ldi	r24, 0x18	; 24
    21ba:	96 e2       	ldi	r25, 0x26	; 38
    21bc:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    21c0:	60 e1       	ldi	r22, 0x10	; 16
    21c2:	88 e1       	ldi	r24, 0x18	; 24
    21c4:	96 e2       	ldi	r25, 0x26	; 38
    21c6:	0e 94 85 3c 	call	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    21ca:	f6 01       	movw	r30, r12
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	88 e1       	ldi	r24, 0x18	; 24
    21d2:	96 e2       	ldi	r25, 0x26	; 38
    21d4:	0e 94 a0 3c 	call	0x7940	; 0x7940 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    21d8:	60 e2       	ldi	r22, 0x20	; 32
    21da:	88 e1       	ldi	r24, 0x18	; 24
    21dc:	96 e2       	ldi	r25, 0x26	; 38
    21de:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    21e2:	60 e2       	ldi	r22, 0x20	; 32
    21e4:	88 e1       	ldi	r24, 0x18	; 24
    21e6:	96 e2       	ldi	r25, 0x26	; 38
    21e8:	0e 94 85 3c 	call	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    21ec:	26 96       	adiw	r28, 0x06	; 6
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	df 90       	pop	r13
    21fe:	cf 90       	pop	r12
    2200:	bf 90       	pop	r11
    2202:	af 90       	pop	r10
    2204:	9f 90       	pop	r9
    2206:	8f 90       	pop	r8
    2208:	7f 90       	pop	r7
    220a:	6f 90       	pop	r6
    220c:	5f 90       	pop	r5
    220e:	4f 90       	pop	r4
    2210:	3f 90       	pop	r3
    2212:	2f 90       	pop	r2
    2214:	08 95       	ret

00002216 <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	1f 92       	push	r1
    2224:	1f 92       	push	r1
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <_Z4swapj>
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    2238:	87 01       	movw	r16, r14
    223a:	0c 5d       	subi	r16, 0xDC	; 220
    223c:	1e 4f       	sbci	r17, 0xFE	; 254
    223e:	22 e0       	ldi	r18, 0x02	; 2
    2240:	ae 01       	movw	r20, r28
    2242:	4f 5f       	subi	r20, 0xFF	; 255
    2244:	5f 4f       	sbci	r21, 0xFF	; 255
    2246:	63 e0       	ldi	r22, 0x03	; 3
    2248:	f8 01       	movw	r30, r16
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    2252:	f8 01       	movw	r30, r16
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    225c:	a7 01       	movw	r20, r14
    225e:	44 51       	subi	r20, 0x14	; 20
    2260:	5f 4f       	sbci	r21, 0xFF	; 255
    2262:	2a e2       	ldi	r18, 0x2A	; 42
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	f8 01       	movw	r30, r16
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    2274:	f8 01       	movw	r30, r16
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    227e:	68 ea       	ldi	r22, 0xA8	; 168
    2280:	71 e6       	ldi	r23, 0x61	; 97
    2282:	8e e1       	ldi	r24, 0x1E	; 30
    2284:	96 e2       	ldi	r25, 0x26	; 38
    2286:	0e 94 67 39 	call	0x72ce	; 0x72ce <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    228a:	84 e0       	ldi	r24, 0x04	; 4
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	f7 01       	movw	r30, r14
    2290:	84 87       	std	Z+12, r24	; 0x0c
    2292:	95 87       	std	Z+13, r25	; 0x0d
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	ff 90       	pop	r15
    22a2:	ef 90       	pop	r14
    22a4:	08 95       	ret

000022a6 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>:
	
	return result;
}

DGUS_LASERSETTINGS CLaserControlApp::CalculateMultiPulseLaserSettings(DGUS_LASERPROFILE *profile, DGUS_LASERSETTINGS *settings)
{
    22a6:	4f 92       	push	r4
    22a8:	5f 92       	push	r5
    22aa:	6f 92       	push	r6
    22ac:	7f 92       	push	r7
    22ae:	8f 92       	push	r8
    22b0:	9f 92       	push	r9
    22b2:	af 92       	push	r10
    22b4:	bf 92       	push	r11
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	2c 97       	sbiw	r28, 0x0c	; 12
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	8c 01       	movw	r16, r24
    22d2:	fa 01       	movw	r30, r20
	DGUS_LASERSETTINGS result;
	
	uint16_t period = 1000 / profile->Frequency;									//  period [ms]
    22d4:	db 01       	movw	r26, r22
    22d6:	2d 91       	ld	r18, X+
    22d8:	3c 91       	ld	r19, X
    22da:	88 ee       	ldi	r24, 0xE8	; 232
    22dc:	93 e0       	ldi	r25, 0x03	; 3
    22de:	b9 01       	movw	r22, r18
    22e0:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
	uint16_t duration1 = settings->Duration / 2;
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	6c 01       	movw	r12, r24
    22ea:	d6 94       	lsr	r13
    22ec:	c7 94       	ror	r12
	uint16_t period1;
	uint16_t period2;
	uint16_t period3;
	uint16_t period4;
	
	if (profile->Frequency >= 2)
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	31 05       	cpc	r19, r1
    22f2:	48 f0       	brcs	.+18     	; 0x2306 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x60>
	{
		period3 = period - (settings->Duration - 5);
    22f4:	7b 01       	movw	r14, r22
    22f6:	e8 1a       	sub	r14, r24
    22f8:	f9 0a       	sbc	r15, r25
    22fa:	b5 e0       	ldi	r27, 0x05	; 5
    22fc:	eb 0e       	add	r14, r27
    22fe:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 5;
    2300:	25 e0       	ldi	r18, 0x05	; 5
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	08 c0       	rjmp	.+16     	; 0x2316 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x70>
		period2 = duration2;
	}
	else
	{
		period3 = period - (settings->Duration - 10);
    2306:	7b 01       	movw	r14, r22
    2308:	e8 1a       	sub	r14, r24
    230a:	f9 0a       	sbc	r15, r25
    230c:	ea e0       	ldi	r30, 0x0A	; 10
    230e:	ee 0e       	add	r14, r30
    2310:	f1 1c       	adc	r15, r1
		period4 = duration1;
		period1 = 10;
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
		period2 = duration2;
	}
	
	// calculate multi pulse
	laserMultiPulsePeriod[0] = uint32_t(625ul * (uint32_t)period1) / 10ul;
    2316:	58 01       	movw	r10, r16
    2318:	f4 ee       	ldi	r31, 0xE4	; 228
    231a:	af 0e       	add	r10, r31
    231c:	b1 1c       	adc	r11, r1
    231e:	a1 e7       	ldi	r26, 0x71	; 113
    2320:	b2 e0       	ldi	r27, 0x02	; 2
    2322:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    2326:	0f 2e       	mov	r0, r31
    2328:	fa e0       	ldi	r31, 0x0A	; 10
    232a:	4f 2e       	mov	r4, r31
    232c:	51 2c       	mov	r5, r1
    232e:	61 2c       	mov	r6, r1
    2330:	71 2c       	mov	r7, r1
    2332:	f0 2d       	mov	r31, r0
    2334:	a3 01       	movw	r20, r6
    2336:	92 01       	movw	r18, r4
    2338:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    233c:	d5 01       	movw	r26, r10
    233e:	2d 93       	st	X+, r18
    2340:	3c 93       	st	X, r19
	laserMultiPulsePeriod[1] = uint32_t(625ul * (uint32_t)period2) / 10ul;
    2342:	96 01       	movw	r18, r12
    2344:	a1 e7       	ldi	r26, 0x71	; 113
    2346:	b2 e0       	ldi	r27, 0x02	; 2
    2348:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    234c:	a3 01       	movw	r20, r6
    234e:	92 01       	movw	r18, r4
    2350:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    2354:	49 01       	movw	r8, r18
    2356:	5a 01       	movw	r10, r20
    2358:	f8 01       	movw	r30, r16
    235a:	ea 51       	subi	r30, 0x1A	; 26
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	20 83       	st	Z, r18
    2360:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[2] = uint32_t(625ul * (uint32_t)period3) / 10ul;
    2362:	68 01       	movw	r12, r16
    2364:	b8 ee       	ldi	r27, 0xE8	; 232
    2366:	cb 0e       	add	r12, r27
    2368:	d1 1c       	adc	r13, r1
    236a:	97 01       	movw	r18, r14
    236c:	a1 e7       	ldi	r26, 0x71	; 113
    236e:	b2 e0       	ldi	r27, 0x02	; 2
    2370:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    2374:	a3 01       	movw	r20, r6
    2376:	92 01       	movw	r18, r4
    2378:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    237c:	f6 01       	movw	r30, r12
    237e:	20 83       	st	Z, r18
    2380:	31 83       	std	Z+1, r19	; 0x01
	laserMultiPulsePeriod[3] = uint32_t(625ul * (uint32_t)period4) / 10ul;
    2382:	32 96       	adiw	r30, 0x02	; 2
    2384:	80 82       	st	Z, r8
    2386:	91 82       	std	Z+1, r9	; 0x01
	
	laserTimer.DisableChannel(TIMER_CHANNEL_A);
    2388:	60 e1       	ldi	r22, 0x10	; 16
    238a:	88 e1       	ldi	r24, 0x18	; 24
    238c:	96 e2       	ldi	r25, 0x26	; 38
    238e:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.DisableChannel(TIMER_CHANNEL_B);
    2392:	60 e2       	ldi	r22, 0x20	; 32
    2394:	88 e1       	ldi	r24, 0x18	; 24
    2396:	96 e2       	ldi	r25, 0x26	; 38
    2398:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
	
	return result;
    239c:	86 e0       	ldi	r24, 0x06	; 6
    239e:	fe 01       	movw	r30, r28
    23a0:	37 96       	adiw	r30, 0x07	; 7
    23a2:	de 01       	movw	r26, r28
    23a4:	11 96       	adiw	r26, 0x01	; 1
    23a6:	01 90       	ld	r0, Z+
    23a8:	0d 92       	st	X+, r0
    23aa:	8a 95       	dec	r24
    23ac:	e1 f7       	brne	.-8      	; 0x23a6 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT+0x100>
    23ae:	29 81       	ldd	r18, Y+1	; 0x01
    23b0:	3a 81       	ldd	r19, Y+2	; 0x02
    23b2:	4b 81       	ldd	r20, Y+3	; 0x03
    23b4:	5c 81       	ldd	r21, Y+4	; 0x04
    23b6:	6d 81       	ldd	r22, Y+5	; 0x05
    23b8:	7e 81       	ldd	r23, Y+6	; 0x06
}
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	2c 96       	adiw	r28, 0x0c	; 12
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	bf 90       	pop	r11
    23d6:	af 90       	pop	r10
    23d8:	9f 90       	pop	r9
    23da:	8f 90       	pop	r8
    23dc:	7f 90       	pop	r7
    23de:	6f 90       	pop	r6
    23e0:	5f 90       	pop	r5
    23e2:	4f 90       	pop	r4
    23e4:	08 95       	ret

000023e6 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    23ec:	fc 01       	movw	r30, r24
    23ee:	ee 5d       	subi	r30, 0xDE	; 222
    23f0:	fe 4f       	sbci	r31, 0xFE	; 254
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	89 2b       	or	r24, r25
    23f8:	29 f0       	breq	.+10     	; 0x2404 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	80 83       	st	Z, r24
    2402:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    2404:	8a 89       	ldd	r24, Y+18	; 0x12
    2406:	88 23       	and	r24, r24
    2408:	09 f4       	brne	.+2      	; 0x240c <_ZN16CLaserControlApp7OnTimerEv+0x26>
    240a:	89 c0       	rjmp	.+274    	; 0x251e <_ZN16CLaserControlApp7OnTimerEv+0x138>
	{
		if (m_wMillSec == 0)
    240c:	fe 01       	movw	r30, r28
    240e:	e6 5e       	subi	r30, 0xE6	; 230
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	89 2b       	or	r24, r25
    2418:	09 f0       	breq	.+2      	; 0x241c <_ZN16CLaserControlApp7OnTimerEv+0x36>
    241a:	79 c0       	rjmp	.+242    	; 0x250e <_ZN16CLaserControlApp7OnTimerEv+0x128>
		{			
			if (m_wSeconds == 0)
    241c:	32 97       	sbiw	r30, 0x02	; 2
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	89 2b       	or	r24, r25
    2424:	09 f0       	breq	.+2      	; 0x2428 <_ZN16CLaserControlApp7OnTimerEv+0x42>
    2426:	4c c0       	rjmp	.+152    	; 0x24c0 <_ZN16CLaserControlApp7OnTimerEv+0xda>
			{
				if (m_wMinutes == 0)
    2428:	32 97       	sbiw	r30, 0x02	; 2
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	89 2b       	or	r24, r25
    2430:	d1 f5       	brne	.+116    	; 0x24a6 <_ZN16CLaserControlApp7OnTimerEv+0xc0>
				{
					if (state == APP_WORKPREPARE)
    2432:	8c 85       	ldd	r24, Y+12	; 0x0c
    2434:	9d 85       	ldd	r25, Y+13	; 0x0d
    2436:	02 97       	sbiw	r24, 0x02	; 2
    2438:	a1 f5       	brne	.+104    	; 0x24a2 <_ZN16CLaserControlApp7OnTimerEv+0xbc>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    243a:	22 e0       	ldi	r18, 0x02	; 2
    243c:	44 e6       	ldi	r20, 0x64	; 100
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	65 e0       	ldi	r22, 0x05	; 5
    2442:	71 e0       	ldi	r23, 0x01	; 1
    2444:	80 ee       	ldi	r24, 0xE0	; 224
    2446:	95 e2       	ldi	r25, 0x25	; 37
    2448:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    244c:	80 ee       	ldi	r24, 0xE0	; 224
    244e:	95 e2       	ldi	r25, 0x25	; 37
    2450:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    2454:	22 e0       	ldi	r18, 0x02	; 2
    2456:	44 e6       	ldi	r20, 0x64	; 100
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	66 e2       	ldi	r22, 0x26	; 38
    245c:	71 e0       	ldi	r23, 0x01	; 1
    245e:	80 ee       	ldi	r24, 0xE0	; 224
    2460:	95 e2       	ldi	r25, 0x25	; 37
    2462:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2466:	80 ee       	ldi	r24, 0xE0	; 224
    2468:	95 e2       	ldi	r25, 0x25	; 37
    246a:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    246e:	22 e0       	ldi	r18, 0x02	; 2
    2470:	44 e6       	ldi	r20, 0x64	; 100
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	69 e4       	ldi	r22, 0x49	; 73
    2476:	71 e0       	ldi	r23, 0x01	; 1
    2478:	80 ee       	ldi	r24, 0xE0	; 224
    247a:	95 e2       	ldi	r25, 0x25	; 37
    247c:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2480:	80 ee       	ldi	r24, 0xE0	; 224
    2482:	95 e2       	ldi	r25, 0x25	; 37
    2484:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    2488:	22 e0       	ldi	r18, 0x02	; 2
    248a:	44 e6       	ldi	r20, 0x64	; 100
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	6d e5       	ldi	r22, 0x5D	; 93
    2490:	71 e0       	ldi	r23, 0x01	; 1
    2492:	80 ee       	ldi	r24, 0xE0	; 224
    2494:	95 e2       	ldi	r25, 0x25	; 37
    2496:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    249a:	80 ee       	ldi	r24, 0xE0	; 224
    249c:	95 e2       	ldi	r25, 0x25	; 37
    249e:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    24a2:	1a 8a       	std	Y+18, r1	; 0x12
    24a4:	05 c1       	rjmp	.+522    	; 0x26b0 <_ZN16CLaserControlApp7OnTimerEv+0x2ca>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    24a6:	8c e3       	ldi	r24, 0x3C	; 60
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	fe 01       	movw	r30, r28
    24ac:	e8 5e       	subi	r30, 0xE8	; 232
    24ae:	fe 4f       	sbci	r31, 0xFE	; 254
    24b0:	80 83       	st	Z, r24
    24b2:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    24b4:	32 97       	sbiw	r30, 0x02	; 2
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	80 83       	st	Z, r24
    24be:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    24c0:	84 e6       	ldi	r24, 0x64	; 100
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	fe 01       	movw	r30, r28
    24c6:	e6 5e       	subi	r30, 0xE6	; 230
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	80 83       	st	Z, r24
    24cc:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    24ce:	32 97       	sbiw	r30, 0x02	; 2
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	80 83       	st	Z, r24
    24d8:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
    24da:	8c 85       	ldd	r24, Y+12	; 0x0c
    24dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    24de:	02 97       	sbiw	r24, 0x02	; 2
    24e0:	b1 f4       	brne	.+44     	; 0x250e <_ZN16CLaserControlApp7OnTimerEv+0x128>
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    24e2:	32 97       	sbiw	r30, 0x02	; 2
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	89 2b       	or	r24, r25
    24ea:	09 f0       	breq	.+2      	; 0x24ee <_ZN16CLaserControlApp7OnTimerEv+0x108>
    24ec:	9c c0       	rjmp	.+312    	; 0x2626 <_ZN16CLaserControlApp7OnTimerEv+0x240>
    24ee:	32 96       	adiw	r30, 0x02	; 2
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	0a 97       	sbiw	r24, 0x0a	; 10
    24f6:	08 f4       	brcc	.+2      	; 0x24fa <_ZN16CLaserControlApp7OnTimerEv+0x114>
    24f8:	a4 c0       	rjmp	.+328    	; 0x2642 <_ZN16CLaserControlApp7OnTimerEv+0x25c>
    24fa:	95 c0       	rjmp	.+298    	; 0x2626 <_ZN16CLaserControlApp7OnTimerEv+0x240>
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e8 5e       	subi	r30, 0xE8	; 232
    2500:	fe 4f       	sbci	r31, 0xFE	; 254
    2502:	80 81       	ld	r24, Z
    2504:	91 81       	ldd	r25, Z+1	; 0x01
    2506:	05 97       	sbiw	r24, 0x05	; 5
    2508:	08 f4       	brcc	.+2      	; 0x250c <_ZN16CLaserControlApp7OnTimerEv+0x126>
    250a:	a4 c0       	rjmp	.+328    	; 0x2654 <_ZN16CLaserControlApp7OnTimerEv+0x26e>
    250c:	b1 c0       	rjmp	.+354    	; 0x2670 <_ZN16CLaserControlApp7OnTimerEv+0x28a>
					//player.beep(1000, 25);
					}
			}
			// ************************************
		}
		m_wMillSec-=10;
    250e:	fe 01       	movw	r30, r28
    2510:	e6 5e       	subi	r30, 0xE6	; 230
    2512:	fe 4f       	sbci	r31, 0xFE	; 254
    2514:	80 81       	ld	r24, Z
    2516:	91 81       	ldd	r25, Z+1	; 0x01
    2518:	0a 97       	sbiw	r24, 0x0a	; 10
    251a:	80 83       	st	Z, r24
    251c:	91 83       	std	Z+1, r25	; 0x01
	}
	
	if (!peltier_en)
    251e:	8b 89       	ldd	r24, Y+19	; 0x13
    2520:	81 11       	cpse	r24, r1
    2522:	4d c0       	rjmp	.+154    	; 0x25be <_ZN16CLaserControlApp7OnTimerEv+0x1d8>
	{
		if (m_wMillSec == 70)
    2524:	fe 01       	movw	r30, r28
    2526:	e6 5e       	subi	r30, 0xE6	; 230
    2528:	fe 4f       	sbci	r31, 0xFE	; 254
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	86 34       	cpi	r24, 0x46	; 70
    2530:	91 05       	cpc	r25, r1
    2532:	e9 f5       	brne	.+122    	; 0x25ae <_ZN16CLaserControlApp7OnTimerEv+0x1c8>
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
    2534:	32 97       	sbiw	r30, 0x02	; 2
    2536:	20 81       	ld	r18, Z
    2538:	31 81       	ldd	r19, Z+1	; 0x01
    253a:	36 96       	adiw	r30, 0x06	; 6
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	28 17       	cp	r18, r24
    2542:	39 07       	cpc	r19, r25
    2544:	08 f4       	brcc	.+2      	; 0x2548 <_ZN16CLaserControlApp7OnTimerEv+0x162>
    2546:	ab c0       	rjmp	.+342    	; 0x269e <_ZN16CLaserControlApp7OnTimerEv+0x2b8>
    2548:	38 97       	sbiw	r30, 0x08	; 8
    254a:	20 81       	ld	r18, Z
    254c:	31 81       	ldd	r19, Z+1	; 0x01
    254e:	36 96       	adiw	r30, 0x06	; 6
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	28 17       	cp	r18, r24
    2556:	39 07       	cpc	r19, r25
    2558:	08 f0       	brcs	.+2      	; 0x255c <_ZN16CLaserControlApp7OnTimerEv+0x176>
    255a:	98 c0       	rjmp	.+304    	; 0x268c <_ZN16CLaserControlApp7OnTimerEv+0x2a6>
    255c:	a0 c0       	rjmp	.+320    	; 0x269e <_ZN16CLaserControlApp7OnTimerEv+0x2b8>
				m_wSeconds = m_wSetSec;
			else
			{
				if (m_wSeconds == 60)
				{
					if (m_wMinutes >= m_wSetMin)
    255e:	fe 01       	movw	r30, r28
    2560:	ea 5e       	subi	r30, 0xEA	; 234
    2562:	fe 4f       	sbci	r31, 0xFE	; 254
    2564:	20 81       	ld	r18, Z
    2566:	31 81       	ldd	r19, Z+1	; 0x01
    2568:	36 96       	adiw	r30, 0x06	; 6
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	28 17       	cp	r18, r24
    2570:	39 07       	cpc	r19, r25
    2572:	28 f0       	brcs	.+10     	; 0x257e <_ZN16CLaserControlApp7OnTimerEv+0x198>
						m_wMinutes = m_wSetMin;
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	36 97       	sbiw	r30, 0x06	; 6
    257a:	80 83       	st	Z, r24
    257c:	91 83       	std	Z+1, r25	; 0x01
					m_wSeconds = 0;
    257e:	fe 01       	movw	r30, r28
    2580:	e8 5e       	subi	r30, 0xE8	; 232
    2582:	fe 4f       	sbci	r31, 0xFE	; 254
    2584:	10 82       	st	Z, r1
    2586:	11 82       	std	Z+1, r1	; 0x01
					m_wMinutes++;
    2588:	32 97       	sbiw	r30, 0x02	; 2
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	80 83       	st	Z, r24
    2592:	91 83       	std	Z+1, r25	; 0x01
				}
				m_wSeconds++;
    2594:	fe 01       	movw	r30, r28
    2596:	e8 5e       	subi	r30, 0xE8	; 232
    2598:	fe 4f       	sbci	r31, 0xFE	; 254
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	80 83       	st	Z, r24
    25a2:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 0; // Every 10 ms
    25a4:	fe 01       	movw	r30, r28
    25a6:	e6 5e       	subi	r30, 0xE6	; 230
    25a8:	fe 4f       	sbci	r31, 0xFE	; 254
    25aa:	10 82       	st	Z, r1
    25ac:	11 82       	std	Z+1, r1	; 0x01
		}
		m_wMillSec += 10;
    25ae:	fe 01       	movw	r30, r28
    25b0:	e6 5e       	subi	r30, 0xE6	; 230
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	0a 96       	adiw	r24, 0x0a	; 10
    25ba:	80 83       	st	Z, r24
    25bc:	91 83       	std	Z+1, r25	; 0x01
	}
	
	// Flow sensor
	{
		static uint16_t millsec = 100;
		if (millsec == 0)
    25be:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    25c2:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    25c6:	89 2b       	or	r24, r25
    25c8:	21 f5       	brne	.+72     	; 0x2612 <_ZN16CLaserControlApp7OnTimerEv+0x22c>
		{
			millsec = 100;
    25ca:	84 e6       	ldi	r24, 0x64	; 100
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    25d2:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
			
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    25d6:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    25da:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    25de:	49 e4       	ldi	r20, 0x49	; 73
    25e0:	48 9f       	mul	r20, r24
    25e2:	90 01       	movw	r18, r0
    25e4:	49 9f       	mul	r20, r25
    25e6:	30 0d       	add	r19, r0
    25e8:	11 24       	eor	r1, r1
    25ea:	a5 ec       	ldi	r26, 0xC5	; 197
    25ec:	be e4       	ldi	r27, 0x4E	; 78
    25ee:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    25f2:	96 95       	lsr	r25
    25f4:	87 95       	ror	r24
    25f6:	92 95       	swap	r25
    25f8:	82 95       	swap	r24
    25fa:	8f 70       	andi	r24, 0x0F	; 15
    25fc:	89 27       	eor	r24, r25
    25fe:	9f 70       	andi	r25, 0x0F	; 15
    2600:	89 27       	eor	r24, r25
    2602:	c0 5e       	subi	r28, 0xE0	; 224
    2604:	de 4f       	sbci	r29, 0xFE	; 254
    2606:	88 83       	st	Y, r24
    2608:	99 83       	std	Y+1, r25	; 0x01
			flowtimer.Reset();
    260a:	85 e1       	ldi	r24, 0x15	; 21
    260c:	96 e2       	ldi	r25, 0x26	; 38
    260e:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN8CTimerC15ResetEv>
		}
		millsec-=10;
    2612:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    2616:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    261a:	0a 97       	sbiw	r24, 0x0a	; 10
    261c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    2620:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    2624:	45 c0       	rjmp	.+138    	; 0x26b0 <_ZN16CLaserControlApp7OnTimerEv+0x2ca>
						//player.beep(1000, 50);
					}
				}
				else
				{
					player.SoundStart(1000, 25, 2);
    2626:	22 e0       	ldi	r18, 0x02	; 2
    2628:	49 e1       	ldi	r20, 0x19	; 25
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	68 ee       	ldi	r22, 0xE8	; 232
    262e:	73 e0       	ldi	r23, 0x03	; 3
    2630:	80 ee       	ldi	r24, 0xE0	; 224
    2632:	95 e2       	ldi	r25, 0x25	; 37
    2634:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    2638:	80 ee       	ldi	r24, 0xE0	; 224
    263a:	95 e2       	ldi	r25, 0x25	; 37
    263c:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
    2640:	66 cf       	rjmp	.-308    	; 0x250e <_ZN16CLaserControlApp7OnTimerEv+0x128>
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    2642:	fe 01       	movw	r30, r28
    2644:	ea 5e       	subi	r30, 0xEA	; 234
    2646:	fe 4f       	sbci	r31, 0xFE	; 254
    2648:	80 81       	ld	r24, Z
    264a:	91 81       	ldd	r25, Z+1	; 0x01
    264c:	89 2b       	or	r24, r25
    264e:	09 f4       	brne	.+2      	; 0x2652 <_ZN16CLaserControlApp7OnTimerEv+0x26c>
    2650:	55 cf       	rjmp	.-342    	; 0x24fc <_ZN16CLaserControlApp7OnTimerEv+0x116>
    2652:	0e c0       	rjmp	.+28     	; 0x2670 <_ZN16CLaserControlApp7OnTimerEv+0x28a>
					{
						player.SoundStart(1000, 100, 2);
    2654:	22 e0       	ldi	r18, 0x02	; 2
    2656:	44 e6       	ldi	r20, 0x64	; 100
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	68 ee       	ldi	r22, 0xE8	; 232
    265c:	73 e0       	ldi	r23, 0x03	; 3
    265e:	80 ee       	ldi	r24, 0xE0	; 224
    2660:	95 e2       	ldi	r25, 0x25	; 37
    2662:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2666:	80 ee       	ldi	r24, 0xE0	; 224
    2668:	95 e2       	ldi	r25, 0x25	; 37
    266a:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
    266e:	4f cf       	rjmp	.-354    	; 0x250e <_ZN16CLaserControlApp7OnTimerEv+0x128>
						//player.beep(1000, 100);
					}
					else
					{
						player.SoundStart(1000, 50, 2);
    2670:	22 e0       	ldi	r18, 0x02	; 2
    2672:	42 e3       	ldi	r20, 0x32	; 50
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	68 ee       	ldi	r22, 0xE8	; 232
    2678:	73 e0       	ldi	r23, 0x03	; 3
    267a:	80 ee       	ldi	r24, 0xE0	; 224
    267c:	95 e2       	ldi	r25, 0x25	; 37
    267e:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2682:	80 ee       	ldi	r24, 0xE0	; 224
    2684:	95 e2       	ldi	r25, 0x25	; 37
    2686:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
    268a:	41 cf       	rjmp	.-382    	; 0x250e <_ZN16CLaserControlApp7OnTimerEv+0x128>
	if (!peltier_en)
	{
		if (m_wMillSec == 70)
		{
			if ((m_wSeconds >= m_wSetSec) && (m_wMinutes >= m_wSetMin))
				m_wSeconds = m_wSetSec;
    268c:	fe 01       	movw	r30, r28
    268e:	e2 5e       	subi	r30, 0xE2	; 226
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	36 97       	sbiw	r30, 0x06	; 6
    2698:	80 83       	st	Z, r24
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	83 cf       	rjmp	.-250    	; 0x25a4 <_ZN16CLaserControlApp7OnTimerEv+0x1be>
			else
			{
				if (m_wSeconds == 60)
    269e:	fe 01       	movw	r30, r28
    26a0:	e8 5e       	subi	r30, 0xE8	; 232
    26a2:	fe 4f       	sbci	r31, 0xFE	; 254
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	cc 97       	sbiw	r24, 0x3c	; 60
    26aa:	09 f0       	breq	.+2      	; 0x26ae <_ZN16CLaserControlApp7OnTimerEv+0x2c8>
    26ac:	73 cf       	rjmp	.-282    	; 0x2594 <_ZN16CLaserControlApp7OnTimerEv+0x1ae>
    26ae:	57 cf       	rjmp	.-338    	; 0x255e <_ZN16CLaserControlApp7OnTimerEv+0x178>
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
			flowtimer.Reset();
		}
		millsec-=10;
	}
}
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    26b6:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <_ZN16CLaserControlApp7OnTimerEv>
    26ba:	08 95       	ret

000026bc <_ZN16CLaserControlApp9StopLaserEv>:
	}
}

void CLaserControlApp::StopLaser()
{
	laserTimer.Stop();
    26bc:	88 e1       	ldi	r24, 0x18	; 24
    26be:	96 e2       	ldi	r25, 0x26	; 38
    26c0:	0e 94 70 3c 	call	0x78e0	; 0x78e0 <_ZN7CTimerF4StopEv>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    26c4:	60 e1       	ldi	r22, 0x10	; 16
    26c6:	88 e1       	ldi	r24, 0x18	; 24
    26c8:	96 e2       	ldi	r25, 0x26	; 38
    26ca:	0e 94 85 3c 	call	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    26ce:	60 e2       	ldi	r22, 0x20	; 32
    26d0:	88 e1       	ldi	r24, 0x18	; 24
    26d2:	96 e2       	ldi	r25, 0x26	; 38
    26d4:	0e 94 85 3c 	call	0x790a	; 0x790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	PORTF.OUTSET = PIN0_bm;
    26d8:	e0 ea       	ldi	r30, 0xA0	; 160
    26da:	f6 e0       	ldi	r31, 0x06	; 6
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	85 83       	std	Z+5, r24	; 0x05
	PORTF.OUTSET = PIN1_bm;
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	85 83       	std	Z+5, r24	; 0x05
    26e4:	08 95       	ret

000026e6 <_ZN16CLaserControlApp3RunEv>:
	uint16_t data = min(uint16_t((uint32_t(laserPower) * 1024ul) / MAX_LASER_POWER) << 2, 4095);  // (laserPower * 640) / 63)
	dacSPI.Send((uint8_t*)&data, sizeof(data));
}

void CLaserControlApp::Run()
{	
    26e6:	6f 92       	push	r6
    26e8:	7f 92       	push	r7
    26ea:	8f 92       	push	r8
    26ec:	9f 92       	push	r9
    26ee:	af 92       	push	r10
    26f0:	bf 92       	push	r11
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	64 97       	sbiw	r28, 0x14	; 20
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    270e:	8c 01       	movw	r16, r24
    2710:	0c 5d       	subi	r16, 0xDC	; 220
    2712:	1e 4f       	sbci	r17, 0xFE	; 254
    2714:	42 e0       	ldi	r20, 0x02	; 2
    2716:	63 e0       	ldi	r22, 0x03	; 3
    2718:	d8 01       	movw	r26, r16
    271a:	8d 91       	ld	r24, X+
    271c:	9c 91       	ld	r25, X
    271e:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    2722:	f8 01       	movw	r30, r16
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    272c:	d8 01       	movw	r26, r16
    272e:	8d 91       	ld	r24, X+
    2730:	9c 91       	ld	r25, X
    2732:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2736:	bf ef       	ldi	r27, 0xFF	; 255
    2738:	e9 ef       	ldi	r30, 0xF9	; 249
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	b1 50       	subi	r27, 0x01	; 1
    273e:	e0 40       	sbci	r30, 0x00	; 0
    2740:	f0 40       	sbci	r31, 0x00	; 0
    2742:	e1 f7       	brne	.-8      	; 0x273c <_ZN16CLaserControlApp3RunEv+0x56>
    2744:	00 c0       	rjmp	.+0      	; 0x2746 <_ZN16CLaserControlApp3RunEv+0x60>
    2746:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    2748:	d7 01       	movw	r26, r14
    274a:	1c 96       	adiw	r26, 0x0c	; 12
    274c:	8d 91       	ld	r24, X+
    274e:	9c 91       	ld	r25, X
    2750:	1d 97       	sbiw	r26, 0x0d	; 13
    2752:	9f 70       	andi	r25, 0x0F	; 15
    2754:	89 2b       	or	r24, r25
    2756:	09 f4       	brne	.+2      	; 0x275a <_ZN16CLaserControlApp3RunEv+0x74>
    2758:	41 c0       	rjmp	.+130    	; 0x27dc <_ZN16CLaserControlApp3RunEv+0xf6>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    275a:	22 e0       	ldi	r18, 0x02	; 2
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	44 eb       	ldi	r20, 0xB4	; 180
    2760:	54 e2       	ldi	r21, 0x24	; 36
    2762:	6c e0       	ldi	r22, 0x0C	; 12
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	c7 01       	movw	r24, r14
    2768:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    276c:	f7 01       	movw	r30, r14
    276e:	e0 5e       	subi	r30, 0xE0	; 224
    2770:	fe 4f       	sbci	r31, 0xFE	; 254
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	44 97       	sbiw	r24, 0x14	; 20
    2778:	28 f4       	brcc	.+10     	; 0x2784 <_ZN16CLaserControlApp3RunEv+0x9e>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	70 97       	sbiw	r30, 0x10	; 16
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    2784:	f7 01       	movw	r30, r14
    2786:	e0 5e       	subi	r30, 0xE0	; 224
    2788:	fe 4f       	sbci	r31, 0xFE	; 254
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	44 97       	sbiw	r24, 0x14	; 20
    2790:	28 f0       	brcs	.+10     	; 0x279c <_ZN16CLaserControlApp3RunEv+0xb6>
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	89 97       	sbiw	r24, 0x29	; 41
    2798:	08 f4       	brcc	.+2      	; 0x279c <_ZN16CLaserControlApp3RunEv+0xb6>
    279a:	c0 c5       	rjmp	.+2944   	; 0x331c <_ZN16CLaserControlApp3RunEv+0xc36>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    279c:	f7 01       	movw	r30, r14
    279e:	e0 5e       	subi	r30, 0xE0	; 224
    27a0:	fe 4f       	sbci	r31, 0xFE	; 254
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	89 97       	sbiw	r24, 0x29	; 41
    27a8:	28 f0       	brcs	.+10     	; 0x27b4 <_ZN16CLaserControlApp3RunEv+0xce>
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	70 97       	sbiw	r30, 0x10	; 16
    27b0:	80 83       	st	Z, r24
    27b2:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    27b4:	22 e0       	ldi	r18, 0x02	; 2
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	a7 01       	movw	r20, r14
    27ba:	40 5f       	subi	r20, 0xF0	; 240
    27bc:	5e 4f       	sbci	r21, 0xFE	; 254
    27be:	63 e1       	ldi	r22, 0x13	; 19
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	c7 01       	movw	r24, r14
    27c4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    27c8:	22 e0       	ldi	r18, 0x02	; 2
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	a7 01       	movw	r20, r14
    27ce:	40 5e       	subi	r20, 0xE0	; 224
    27d0:	5e 4f       	sbci	r21, 0xFE	; 254
    27d2:	6e e0       	ldi	r22, 0x0E	; 14
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	c7 01       	movw	r24, r14
    27d8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    27dc:	f7 01       	movw	r30, r14
    27de:	84 85       	ldd	r24, Z+12	; 0x0c
    27e0:	95 85       	ldd	r25, Z+13	; 0x0d
    27e2:	88 73       	andi	r24, 0x38	; 56
    27e4:	99 27       	eor	r25, r25
    27e6:	89 2b       	or	r24, r25
    27e8:	e1 f0       	breq	.+56     	; 0x2822 <_ZN16CLaserControlApp3RunEv+0x13c>
	{
		if (temperature > 300)
    27ea:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    27ee:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    27f2:	8d 32       	cpi	r24, 0x2D	; 45
    27f4:	91 40       	sbci	r25, 0x01	; 1
    27f6:	ac f0       	brlt	.+42     	; 0x2822 <_ZN16CLaserControlApp3RunEv+0x13c>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    27f8:	69 e2       	ldi	r22, 0x29	; 41
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	c7 01       	movw	r24, r14
    27fe:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    2802:	d7 01       	movw	r26, r14
    2804:	1f 96       	adiw	r26, 0x0f	; 15
    2806:	8c 91       	ld	r24, X
    2808:	1f 97       	sbiw	r26, 0x0f	; 15
    280a:	50 96       	adiw	r26, 0x10	; 16
    280c:	8c 93       	st	X, r24
			
			//if (isstarted)
			{
				StopLaser();
    280e:	c7 01       	movw	r24, r14
    2810:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    2814:	81 ee       	ldi	r24, 0xE1	; 225
    2816:	95 e2       	ldi	r25, 0x25	; 37
    2818:	0e 94 81 38 	call	0x7102	; 0x7102 <_ZN11CLaserBoard13LaserPowerOffEv>
				PIC_ID_last = PICID_WORK_PREPARE;
    281c:	87 e0       	ldi	r24, 0x07	; 7
    281e:	f7 01       	movw	r30, r14
    2820:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	/*if ((state & (APP_WORKPOWERON | APP_WORKLIGHT)) == 0)
		isstarted = false;*/
	
	switch (state)
    2822:	d7 01       	movw	r26, r14
    2824:	1c 96       	adiw	r26, 0x0c	; 12
    2826:	8d 91       	ld	r24, X+
    2828:	9c 91       	ld	r25, X
    282a:	1d 97       	sbiw	r26, 0x0d	; 13
    282c:	81 15       	cp	r24, r1
    282e:	b2 e0       	ldi	r27, 0x02	; 2
    2830:	9b 07       	cpc	r25, r27
    2832:	09 f4       	brne	.+2      	; 0x2836 <_ZN16CLaserControlApp3RunEv+0x150>
    2834:	9e c4       	rjmp	.+2364   	; 0x3172 <_ZN16CLaserControlApp3RunEv+0xa8c>
    2836:	44 f5       	brge	.+80     	; 0x2888 <_ZN16CLaserControlApp3RunEv+0x1a2>
    2838:	80 31       	cpi	r24, 0x10	; 16
    283a:	91 05       	cpc	r25, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <_ZN16CLaserControlApp3RunEv+0x15a>
    283e:	cf c3       	rjmp	.+1950   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0x8f8>
    2840:	8c f4       	brge	.+34     	; 0x2864 <_ZN16CLaserControlApp3RunEv+0x17e>
    2842:	82 30       	cpi	r24, 0x02	; 2
    2844:	91 05       	cpc	r25, r1
    2846:	09 f4       	brne	.+2      	; 0x284a <_ZN16CLaserControlApp3RunEv+0x164>
    2848:	48 c3       	rjmp	.+1680   	; 0x2eda <_ZN16CLaserControlApp3RunEv+0x7f4>
    284a:	24 f4       	brge	.+8      	; 0x2854 <_ZN16CLaserControlApp3RunEv+0x16e>
    284c:	89 2b       	or	r24, r25
    284e:	09 f4       	brne	.+2      	; 0x2852 <_ZN16CLaserControlApp3RunEv+0x16c>
    2850:	4b c0       	rjmp	.+150    	; 0x28e8 <_ZN16CLaserControlApp3RunEv+0x202>
    2852:	4e c5       	rjmp	.+2716   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    2854:	84 30       	cpi	r24, 0x04	; 4
    2856:	91 05       	cpc	r25, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <_ZN16CLaserControlApp3RunEv+0x176>
    285a:	62 c0       	rjmp	.+196    	; 0x2920 <_ZN16CLaserControlApp3RunEv+0x23a>
    285c:	08 97       	sbiw	r24, 0x08	; 8
    285e:	09 f4       	brne	.+2      	; 0x2862 <_ZN16CLaserControlApp3RunEv+0x17c>
    2860:	aa c3       	rjmp	.+1876   	; 0x2fb6 <_ZN16CLaserControlApp3RunEv+0x8d0>
    2862:	46 c5       	rjmp	.+2700   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    2864:	80 34       	cpi	r24, 0x40	; 64
    2866:	91 05       	cpc	r25, r1
    2868:	09 f4       	brne	.+2      	; 0x286c <_ZN16CLaserControlApp3RunEv+0x186>
    286a:	6f c3       	rjmp	.+1758   	; 0x2f4a <_ZN16CLaserControlApp3RunEv+0x864>
    286c:	24 f4       	brge	.+8      	; 0x2876 <_ZN16CLaserControlApp3RunEv+0x190>
    286e:	80 97       	sbiw	r24, 0x20	; 32
    2870:	09 f4       	brne	.+2      	; 0x2874 <_ZN16CLaserControlApp3RunEv+0x18e>
    2872:	b5 c3       	rjmp	.+1898   	; 0x2fde <_ZN16CLaserControlApp3RunEv+0x8f8>
    2874:	3d c5       	rjmp	.+2682   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    2876:	80 38       	cpi	r24, 0x80	; 128
    2878:	91 05       	cpc	r25, r1
    287a:	09 f4       	brne	.+2      	; 0x287e <_ZN16CLaserControlApp3RunEv+0x198>
    287c:	40 c0       	rjmp	.+128    	; 0x28fe <_ZN16CLaserControlApp3RunEv+0x218>
    287e:	81 15       	cp	r24, r1
    2880:	91 40       	sbci	r25, 0x01	; 1
    2882:	09 f4       	brne	.+2      	; 0x2886 <_ZN16CLaserControlApp3RunEv+0x1a0>
    2884:	42 c4       	rjmp	.+2180   	; 0x310a <_ZN16CLaserControlApp3RunEv+0xa24>
    2886:	34 c5       	rjmp	.+2664   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    2888:	81 15       	cp	r24, r1
    288a:	27 e0       	ldi	r18, 0x07	; 7
    288c:	92 07       	cpc	r25, r18
    288e:	09 f4       	brne	.+2      	; 0x2892 <_ZN16CLaserControlApp3RunEv+0x1ac>
    2890:	13 c4       	rjmp	.+2086   	; 0x30b8 <_ZN16CLaserControlApp3RunEv+0x9d2>
    2892:	ac f4       	brge	.+42     	; 0x28be <_ZN16CLaserControlApp3RunEv+0x1d8>
    2894:	81 15       	cp	r24, r1
    2896:	b4 e0       	ldi	r27, 0x04	; 4
    2898:	9b 07       	cpc	r25, r27
    289a:	09 f4       	brne	.+2      	; 0x289e <_ZN16CLaserControlApp3RunEv+0x1b8>
    289c:	9c c4       	rjmp	.+2360   	; 0x31d6 <_ZN16CLaserControlApp3RunEv+0xaf0>
    289e:	2c f4       	brge	.+10     	; 0x28aa <_ZN16CLaserControlApp3RunEv+0x1c4>
    28a0:	81 15       	cp	r24, r1
    28a2:	93 40       	sbci	r25, 0x03	; 3
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <_ZN16CLaserControlApp3RunEv+0x1c2>
    28a6:	6e c4       	rjmp	.+2268   	; 0x3184 <_ZN16CLaserControlApp3RunEv+0xa9e>
    28a8:	23 c5       	rjmp	.+2630   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    28aa:	81 15       	cp	r24, r1
    28ac:	25 e0       	ldi	r18, 0x05	; 5
    28ae:	92 07       	cpc	r25, r18
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <_ZN16CLaserControlApp3RunEv+0x1ce>
    28b2:	1c c4       	rjmp	.+2104   	; 0x30ec <_ZN16CLaserControlApp3RunEv+0xa06>
    28b4:	81 15       	cp	r24, r1
    28b6:	96 40       	sbci	r25, 0x06	; 6
    28b8:	09 f4       	brne	.+2      	; 0x28bc <_ZN16CLaserControlApp3RunEv+0x1d6>
    28ba:	ec c3       	rjmp	.+2008   	; 0x3094 <_ZN16CLaserControlApp3RunEv+0x9ae>
    28bc:	19 c5       	rjmp	.+2610   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    28be:	81 15       	cp	r24, r1
    28c0:	b0 e2       	ldi	r27, 0x20	; 32
    28c2:	9b 07       	cpc	r25, r27
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <_ZN16CLaserControlApp3RunEv+0x1e2>
    28c6:	c5 c4       	rjmp	.+2442   	; 0x3252 <_ZN16CLaserControlApp3RunEv+0xb6c>
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <_ZN16CLaserControlApp3RunEv+0x1ee>
    28ca:	81 15       	cp	r24, r1
    28cc:	90 41       	sbci	r25, 0x10	; 16
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <_ZN16CLaserControlApp3RunEv+0x1ec>
    28d0:	88 c4       	rjmp	.+2320   	; 0x31e2 <_ZN16CLaserControlApp3RunEv+0xafc>
    28d2:	0e c5       	rjmp	.+2588   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
    28d4:	81 15       	cp	r24, r1
    28d6:	20 e3       	ldi	r18, 0x30	; 48
    28d8:	92 07       	cpc	r25, r18
    28da:	09 f4       	brne	.+2      	; 0x28de <_ZN16CLaserControlApp3RunEv+0x1f8>
    28dc:	e7 c4       	rjmp	.+2510   	; 0x32ac <_ZN16CLaserControlApp3RunEv+0xbc6>
    28de:	81 15       	cp	r24, r1
    28e0:	90 44       	sbci	r25, 0x40	; 64
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <_ZN16CLaserControlApp3RunEv+0x200>
    28e4:	00 c5       	rjmp	.+2560   	; 0x32e6 <_ZN16CLaserControlApp3RunEv+0xc00>
    28e6:	04 c5       	rjmp	.+2568   	; 0x32f0 <_ZN16CLaserControlApp3RunEv+0xc0a>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    28e8:	63 e0       	ldi	r22, 0x03	; 3
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	c7 01       	movw	r24, r14
    28ee:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	f7 01       	movw	r30, r14
    28f8:	84 87       	std	Z+12, r24	; 0x0c
    28fa:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    28fc:	fd c4       	rjmp	.+2554   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_MENU:
			{
				prepare = false;
    28fe:	d7 01       	movw	r26, r14
    2900:	52 96       	adiw	r26, 0x12	; 18
    2902:	1c 92       	st	X, r1
				StopLaser();
    2904:	c7 01       	movw	r24, r14
    2906:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    290a:	81 ee       	ldi	r24, 0xE1	; 225
    290c:	95 e2       	ldi	r25, 0x25	; 37
    290e:	0e 94 81 38 	call	0x7102	; 0x7102 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    2912:	f7 01       	movw	r30, r14
    2914:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    2916:	81 ee       	ldi	r24, 0xE1	; 225
    2918:	95 e2       	ldi	r25, 0x25	; 37
    291a:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN11CLaserBoard5PWMOnEv>
			}
		break;
    291e:	ec c4       	rjmp	.+2520   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_WORKSETUP:
			{
				uint16_t melanin     = laserDiodeData.melanin;
    2920:	f7 01       	movw	r30, r14
    2922:	e2 50       	subi	r30, 0x02	; 2
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	a0 80       	ld	r10, Z
    2928:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype   = laserDiodeData.phototype;
    292a:	87 01       	movw	r16, r14
    292c:	13 95       	inc	r17
    292e:	d8 01       	movw	r26, r16
    2930:	cd 90       	ld	r12, X+
    2932:	dc 90       	ld	r13, X
				uint16_t freq        = laserDiodeData.laserprofile.Frequency;
    2934:	70 97       	sbiw	r30, 0x10	; 16
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	9c 8b       	std	Y+20, r25	; 0x14
				uint16_t durationCnt = laserDiodeData.laserprofile.DurationCnt;
    293e:	32 96       	adiw	r30, 0x02	; 2
    2940:	80 80       	ld	r8, Z
    2942:	91 80       	ldd	r9, Z+1	; 0x01
				uint16_t energyCnt   = laserDiodeData.laserprofile.EnergyCnt;
    2944:	32 96       	adiw	r30, 0x02	; 2
    2946:	60 80       	ld	r6, Z
    2948:	71 80       	ldd	r7, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    294a:	46 e0       	ldi	r20, 0x06	; 6
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	62 e0       	ldi	r22, 0x02	; 2
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	c7 01       	movw	r24, r14
    2954:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    2958:	bf ef       	ldi	r27, 0xFF	; 255
    295a:	e9 ef       	ldi	r30, 0xF9	; 249
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	b1 50       	subi	r27, 0x01	; 1
    2960:	e0 40       	sbci	r30, 0x00	; 0
    2962:	f0 40       	sbci	r31, 0x00	; 0
    2964:	e1 f7       	brne	.-8      	; 0x295e <_ZN16CLaserControlApp3RunEv+0x278>
    2966:	00 c0       	rjmp	.+0      	; 0x2968 <_ZN16CLaserControlApp3RunEv+0x282>
    2968:	00 00       	nop
				_delay_ms(10);
				GetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, sizeof(DGUS_LASERSETTINGS));
    296a:	46 e0       	ldi	r20, 0x06	; 6
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	65 e0       	ldi	r22, 0x05	; 5
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	c7 01       	movw	r24, r14
    2974:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    2978:	2f ef       	ldi	r18, 0xFF	; 255
    297a:	89 ef       	ldi	r24, 0xF9	; 249
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	21 50       	subi	r18, 0x01	; 1
    2980:	80 40       	sbci	r24, 0x00	; 0
    2982:	90 40       	sbci	r25, 0x00	; 0
    2984:	e1 f7       	brne	.-8      	; 0x297e <_ZN16CLaserControlApp3RunEv+0x298>
    2986:	00 c0       	rjmp	.+0      	; 0x2988 <_ZN16CLaserControlApp3RunEv+0x2a2>
    2988:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    298a:	42 e0       	ldi	r20, 0x02	; 2
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	6d e0       	ldi	r22, 0x0D	; 13
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	c7 01       	movw	r24, r14
    2994:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    2998:	af ef       	ldi	r26, 0xFF	; 255
    299a:	b9 ef       	ldi	r27, 0xF9	; 249
    299c:	e0 e0       	ldi	r30, 0x00	; 0
    299e:	a1 50       	subi	r26, 0x01	; 1
    29a0:	b0 40       	sbci	r27, 0x00	; 0
    29a2:	e0 40       	sbci	r30, 0x00	; 0
    29a4:	e1 f7       	brne	.-8      	; 0x299e <_ZN16CLaserControlApp3RunEv+0x2b8>
    29a6:	00 c0       	rjmp	.+0      	; 0x29a8 <_ZN16CLaserControlApp3RunEv+0x2c2>
    29a8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    29aa:	42 e0       	ldi	r20, 0x02	; 2
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	c7 01       	movw	r24, r14
    29b4:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    29b8:	ff ef       	ldi	r31, 0xFF	; 255
    29ba:	29 ef       	ldi	r18, 0xF9	; 249
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	f1 50       	subi	r31, 0x01	; 1
    29c0:	20 40       	sbci	r18, 0x00	; 0
    29c2:	80 40       	sbci	r24, 0x00	; 0
    29c4:	e1 f7       	brne	.-8      	; 0x29be <_ZN16CLaserControlApp3RunEv+0x2d8>
    29c6:	00 c0       	rjmp	.+0      	; 0x29c8 <_ZN16CLaserControlApp3RunEv+0x2e2>
    29c8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    29ca:	42 e0       	ldi	r20, 0x02	; 2
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	6a e0       	ldi	r22, 0x0A	; 10
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	c7 01       	movw	r24, r14
    29d4:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    29d8:	9f ef       	ldi	r25, 0xFF	; 255
    29da:	a9 ef       	ldi	r26, 0xF9	; 249
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	91 50       	subi	r25, 0x01	; 1
    29e0:	a0 40       	sbci	r26, 0x00	; 0
    29e2:	b0 40       	sbci	r27, 0x00	; 0
    29e4:	e1 f7       	brne	.-8      	; 0x29de <_ZN16CLaserControlApp3RunEv+0x2f8>
    29e6:	00 c0       	rjmp	.+0      	; 0x29e8 <_ZN16CLaserControlApp3RunEv+0x302>
    29e8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    29ea:	42 e0       	ldi	r20, 0x02	; 2
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	6b e0       	ldi	r22, 0x0B	; 11
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	c7 01       	movw	r24, r14
    29f4:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    29f8:	ef ef       	ldi	r30, 0xFF	; 255
    29fa:	f9 ef       	ldi	r31, 0xF9	; 249
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	e1 50       	subi	r30, 0x01	; 1
    2a00:	f0 40       	sbci	r31, 0x00	; 0
    2a02:	20 40       	sbci	r18, 0x00	; 0
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <_ZN16CLaserControlApp3RunEv+0x318>
    2a06:	00 c0       	rjmp	.+0      	; 0x2a08 <_ZN16CLaserControlApp3RunEv+0x322>
    2a08:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    2a0a:	f7 01       	movw	r30, r14
    2a0c:	e6 52       	subi	r30, 0x26	; 38
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	0e 94 81 1b 	call	0x3702	; 0x3702 <_Z6swap32m>
    2a1c:	f7 01       	movw	r30, r14
    2a1e:	e6 50       	subi	r30, 0x06	; 6
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 83       	st	Z, r22
    2a24:	71 83       	std	Z+1, r23	; 0x01
    2a26:	82 83       	std	Z+2, r24	; 0x02
    2a28:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature  = temperature;
    2a2a:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2a2e:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2a32:	38 96       	adiw	r30, 0x08	; 8
    2a34:	80 83       	st	Z, r24
    2a36:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow         = m_wFlow;
    2a38:	7e 96       	adiw	r30, 0x1e	; 30
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	7a 97       	sbiw	r30, 0x1a	; 26
    2a40:	80 83       	st	Z, r24
    2a42:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    2a44:	d8 01       	movw	r26, r16
    2a46:	6d 91       	ld	r22, X+
    2a48:	7c 91       	ld	r23, X
    2a4a:	6c 15       	cp	r22, r12
    2a4c:	7d 05       	cpc	r23, r13
    2a4e:	91 f1       	breq	.+100    	; 0x2ab4 <_ZN16CLaserControlApp3RunEv+0x3ce>
				{
					PhototypePreset(laserDiodeData.phototype);
    2a50:	c7 01       	movw	r24, r14
    2a52:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN16CLaserControlApp15PhototypePresetEj>
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2a56:	f7 01       	movw	r30, r14
    2a58:	86 85       	ldd	r24, Z+14	; 0x0e
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	ac 01       	movw	r20, r24
    2a5e:	44 0f       	add	r20, r20
    2a60:	55 1f       	adc	r21, r21
    2a62:	fa 01       	movw	r30, r20
    2a64:	e8 0f       	add	r30, r24
    2a66:	f9 1f       	adc	r31, r25
    2a68:	9f 01       	movw	r18, r30
    2a6a:	22 0f       	add	r18, r18
    2a6c:	33 1f       	adc	r19, r19
    2a6e:	f9 01       	movw	r30, r18
    2a70:	ea 56       	subi	r30, 0x6A	; 106
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	ee 0d       	add	r30, r14
    2a76:	ff 1d       	adc	r31, r15
    2a78:	26 e0       	ldi	r18, 0x06	; 6
    2a7a:	d7 01       	movw	r26, r14
    2a7c:	a2 51       	subi	r26, 0x12	; 18
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	01 90       	ld	r0, Z+
    2a82:	0d 92       	st	X+, r0
    2a84:	2a 95       	dec	r18
    2a86:	e1 f7       	brne	.-8      	; 0x2a80 <_ZN16CLaserControlApp3RunEv+0x39a>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2a88:	84 0f       	add	r24, r20
    2a8a:	95 1f       	adc	r25, r21
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	fc 01       	movw	r30, r24
    2a92:	ec 54       	subi	r30, 0x4C	; 76
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	ee 0d       	add	r30, r14
    2a98:	ff 1d       	adc	r31, r15
    2a9a:	86 e0       	ldi	r24, 0x06	; 6
    2a9c:	d7 01       	movw	r26, r14
    2a9e:	ac 50       	subi	r26, 0x0C	; 12
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	0d 92       	st	X+, r0
    2aa6:	8a 95       	dec	r24
    2aa8:	e1 f7       	brne	.-8      	; 0x2aa2 <_ZN16CLaserControlApp3RunEv+0x3bc>
					update = true;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	d7 01       	movw	r26, r14
    2aae:	51 96       	adiw	r26, 0x11	; 17
    2ab0:	8c 93       	st	X, r24
					break;
    2ab2:	22 c4       	rjmp	.+2116   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				}
				else
				if (melanin != laserDiodeData.melanin)
    2ab4:	f7 01       	movw	r30, r14
    2ab6:	e2 50       	subi	r30, 0x02	; 2
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	6a 15       	cp	r22, r10
    2ac0:	7b 05       	cpc	r23, r11
    2ac2:	89 f1       	breq	.+98     	; 0x2b26 <_ZN16CLaserControlApp3RunEv+0x440>
				{
					MelaninPreset(laserDiodeData.melanin);
    2ac4:	c7 01       	movw	r24, r14
    2ac6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN16CLaserControlApp13MelaninPresetEj>
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2aca:	f7 01       	movw	r30, r14
    2acc:	86 85       	ldd	r24, Z+14	; 0x0e
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	ac 01       	movw	r20, r24
    2ad2:	44 0f       	add	r20, r20
    2ad4:	55 1f       	adc	r21, r21
    2ad6:	9a 01       	movw	r18, r20
    2ad8:	28 0f       	add	r18, r24
    2ada:	39 1f       	adc	r19, r25
    2adc:	22 0f       	add	r18, r18
    2ade:	33 1f       	adc	r19, r19
    2ae0:	f9 01       	movw	r30, r18
    2ae2:	ea 56       	subi	r30, 0x6A	; 106
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	ee 0d       	add	r30, r14
    2ae8:	ff 1d       	adc	r31, r15
    2aea:	26 e0       	ldi	r18, 0x06	; 6
    2aec:	d7 01       	movw	r26, r14
    2aee:	a2 51       	subi	r26, 0x12	; 18
    2af0:	bf 4f       	sbci	r27, 0xFF	; 255
    2af2:	01 90       	ld	r0, Z+
    2af4:	0d 92       	st	X+, r0
    2af6:	2a 95       	dec	r18
    2af8:	e1 f7       	brne	.-8      	; 0x2af2 <_ZN16CLaserControlApp3RunEv+0x40c>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2afa:	84 0f       	add	r24, r20
    2afc:	95 1f       	adc	r25, r21
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	fc 01       	movw	r30, r24
    2b04:	ec 54       	subi	r30, 0x4C	; 76
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	ee 0d       	add	r30, r14
    2b0a:	ff 1d       	adc	r31, r15
    2b0c:	86 e0       	ldi	r24, 0x06	; 6
    2b0e:	d7 01       	movw	r26, r14
    2b10:	ac 50       	subi	r26, 0x0C	; 12
    2b12:	bf 4f       	sbci	r27, 0xFF	; 255
    2b14:	01 90       	ld	r0, Z+
    2b16:	0d 92       	st	X+, r0
    2b18:	8a 95       	dec	r24
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <_ZN16CLaserControlApp3RunEv+0x42e>
					update = true;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	d7 01       	movw	r26, r14
    2b20:	51 96       	adiw	r26, 0x11	; 17
    2b22:	8c 93       	st	X, r24
					break;
    2b24:	e9 c3       	rjmp	.+2002   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				}
				else
				if (Profile != (APP_PROFILE)laserDiodeData.mode)
    2b26:	f7 01       	movw	r30, r14
    2b28:	46 85       	ldd	r20, Z+14	; 0x0e
    2b2a:	e4 51       	subi	r30, 0x14	; 20
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	01 90       	ld	r0, Z+
    2b30:	f0 81       	ld	r31, Z
    2b32:	e0 2d       	mov	r30, r0
    2b34:	4e 17       	cp	r20, r30
    2b36:	79 f1       	breq	.+94     	; 0x2b96 <_ZN16CLaserControlApp3RunEv+0x4b0>
				{
					Profile = (APP_PROFILE)laserDiodeData.mode;
    2b38:	d7 01       	movw	r26, r14
    2b3a:	1e 96       	adiw	r26, 0x0e	; 14
    2b3c:	ec 93       	st	X, r30
    2b3e:	1e 97       	sbiw	r26, 0x0e	; 14
    2b40:	9f 01       	movw	r18, r30
    2b42:	33 27       	eor	r19, r19
					// Update profile
					memcpy((void*)&laserDiodeData.laserprofile , (void*)&m_structLaserProfile [Profile], sizeof(laserDiodeData.laserprofile));
    2b44:	a9 01       	movw	r20, r18
    2b46:	44 0f       	add	r20, r20
    2b48:	55 1f       	adc	r21, r21
    2b4a:	ca 01       	movw	r24, r20
    2b4c:	82 0f       	add	r24, r18
    2b4e:	93 1f       	adc	r25, r19
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	8a 56       	subi	r24, 0x6A	; 106
    2b56:	9f 4f       	sbci	r25, 0xFF	; 255
    2b58:	f7 01       	movw	r30, r14
    2b5a:	e8 0f       	add	r30, r24
    2b5c:	f9 1f       	adc	r31, r25
    2b5e:	66 e0       	ldi	r22, 0x06	; 6
    2b60:	a2 51       	subi	r26, 0x12	; 18
    2b62:	bf 4f       	sbci	r27, 0xFF	; 255
    2b64:	01 90       	ld	r0, Z+
    2b66:	0d 92       	st	X+, r0
    2b68:	6a 95       	dec	r22
    2b6a:	e1 f7       	brne	.-8      	; 0x2b64 <_ZN16CLaserControlApp3RunEv+0x47e>
					memcpy((void*)&laserDiodeData.lasersettings, (void*)&m_structLaserSettings[Profile], sizeof(laserDiodeData.lasersettings));
    2b6c:	fa 01       	movw	r30, r20
    2b6e:	e2 0f       	add	r30, r18
    2b70:	f3 1f       	adc	r31, r19
    2b72:	ee 0f       	add	r30, r30
    2b74:	ff 1f       	adc	r31, r31
    2b76:	ec 54       	subi	r30, 0x4C	; 76
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	ee 0d       	add	r30, r14
    2b7c:	ff 1d       	adc	r31, r15
    2b7e:	86 e0       	ldi	r24, 0x06	; 6
    2b80:	d7 01       	movw	r26, r14
    2b82:	ac 50       	subi	r26, 0x0C	; 12
    2b84:	bf 4f       	sbci	r27, 0xFF	; 255
    2b86:	01 90       	ld	r0, Z+
    2b88:	0d 92       	st	X+, r0
    2b8a:	8a 95       	dec	r24
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <_ZN16CLaserControlApp3RunEv+0x4a0>
					
					update = true;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	f7 01       	movw	r30, r14
    2b92:	81 8b       	std	Z+17, r24	; 0x11
					break;
    2b94:	b1 c3       	rjmp	.+1890   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				}
				
				uint16_t duration = durationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    2b96:	f7 01       	movw	r30, r14
    2b98:	2a e1       	ldi	r18, 0x1A	; 26
    2b9a:	42 9f       	mul	r20, r18
    2b9c:	e0 0d       	add	r30, r0
    2b9e:	f1 1d       	adc	r31, r1
    2ba0:	11 24       	eor	r1, r1
    2ba2:	80 a5       	ldd	r24, Z+40	; 0x28
    2ba4:	91 a5       	ldd	r25, Z+41	; 0x29
    2ba6:	88 9e       	mul	r8, r24
    2ba8:	90 01       	movw	r18, r0
    2baa:	89 9e       	mul	r8, r25
    2bac:	30 0d       	add	r19, r0
    2bae:	98 9e       	mul	r9, r24
    2bb0:	30 0d       	add	r19, r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	86 a1       	ldd	r24, Z+38	; 0x26
    2bb6:	97 a1       	ldd	r25, Z+39	; 0x27
    2bb8:	82 0f       	add	r24, r18
    2bba:	93 1f       	adc	r25, r19
    2bbc:	89 8b       	std	Y+17, r24	; 0x11
    2bbe:	9a 8b       	std	Y+18, r25	; 0x12
				uint16_t energy   = energyCnt   * pstGUI[Profile].m_wEnergyStep   + pstGUI[Profile].m_wEnergyOffset;
    2bc0:	82 a1       	ldd	r24, Z+34	; 0x22
    2bc2:	93 a1       	ldd	r25, Z+35	; 0x23
    2bc4:	68 9e       	mul	r6, r24
    2bc6:	90 01       	movw	r18, r0
    2bc8:	69 9e       	mul	r6, r25
    2bca:	30 0d       	add	r19, r0
    2bcc:	78 9e       	mul	r7, r24
    2bce:	30 0d       	add	r19, r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	80 a1       	ldd	r24, Z+32	; 0x20
    2bd4:	91 a1       	ldd	r25, Z+33	; 0x21
    2bd6:	82 0f       	add	r24, r18
    2bd8:	93 1f       	adc	r25, r19
    2bda:	8d 87       	std	Y+13, r24	; 0x0d
    2bdc:	9e 87       	std	Y+14, r25	; 0x0e
				
				if (freq != laserDiodeData.laserprofile.Frequency)
    2bde:	f7 01       	movw	r30, r14
    2be0:	e2 51       	subi	r30, 0x12	; 18
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	2b 89       	ldd	r18, Y+19	; 0x13
    2bea:	3c 89       	ldd	r19, Y+20	; 0x14
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	61 f0       	breq	.+24     	; 0x2c0a <_ZN16CLaserControlApp3RunEv+0x524>
				{
					freq = laserDiodeData.laserprofile.Frequency;
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
    2bf4:	9c 8b       	std	Y+20, r25	; 0x14
					
					if (!FreqLimits(freq, (APP_PROFILE)laserDiodeData.mode))
    2bf6:	be 01       	movw	r22, r28
    2bf8:	6d 5e       	subi	r22, 0xED	; 237
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	c7 01       	movw	r24, r14
    2bfe:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN16CLaserControlApp10FreqLimitsERj16APP_PROFILE_ENUM>
					{
						//laserDiodeData.laserprofile.Frequency = freq;
						//update = true;
					}
					
					update = true;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	d7 01       	movw	r26, r14
    2c06:	51 96       	adiw	r26, 0x11	; 17
    2c08:	8c 93       	st	X, r24
				}
				
				UpdateLimits(freq, duration, energy, Profile);
    2c0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c0e:	49 89       	ldd	r20, Y+17	; 0x11
    2c10:	5a 89       	ldd	r21, Y+18	; 0x12
    2c12:	6b 89       	ldd	r22, Y+19	; 0x13
    2c14:	7c 89       	ldd	r23, Y+20	; 0x14
    2c16:	f7 01       	movw	r30, r14
    2c18:	06 85       	ldd	r16, Z+14	; 0x0e
    2c1a:	c7 01       	movw	r24, r14
    2c1c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_ZN16CLaserControlApp12UpdateLimitsEjjj16APP_PROFILE_ENUM>
				
				if (durationCnt != laserDiodeData.laserprofile.DurationCnt)
    2c20:	f7 01       	movw	r30, r14
    2c22:	e0 51       	subi	r30, 0x10	; 16
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	20 81       	ld	r18, Z
    2c28:	31 81       	ldd	r19, Z+1	; 0x01
    2c2a:	28 15       	cp	r18, r8
    2c2c:	39 05       	cpc	r19, r9
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <_ZN16CLaserControlApp3RunEv+0x54c>
    2c30:	58 c0       	rjmp	.+176    	; 0x2ce2 <_ZN16CLaserControlApp3RunEv+0x5fc>
				{					
					if (Profile == PROFILE_FAST)
    2c32:	d7 01       	movw	r26, r14
    2c34:	1e 96       	adiw	r26, 0x0e	; 14
    2c36:	8c 91       	ld	r24, X
    2c38:	84 30       	cpi	r24, 0x04	; 4
    2c3a:	19 f4       	brne	.+6      	; 0x2c42 <_ZN16CLaserControlApp3RunEv+0x55c>
						laserDiodeData.laserprofile.DurationCnt = durationCnt; // Disable duration when FAST mode
    2c3c:	80 82       	st	Z, r8
    2c3e:	91 82       	std	Z+1, r9	; 0x01
    2c40:	4d c0       	rjmp	.+154    	; 0x2cdc <_ZN16CLaserControlApp3RunEv+0x5f6>
					else
					{
						duration = laserDiodeData.laserprofile.DurationCnt * pstGUI[Profile].m_wDurationStep + pstGUI[Profile].m_wDurationOffset;
    2c42:	48 2f       	mov	r20, r24
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	f7 01       	movw	r30, r14
    2c48:	ba e1       	ldi	r27, 0x1A	; 26
    2c4a:	8b 9f       	mul	r24, r27
    2c4c:	e0 0d       	add	r30, r0
    2c4e:	f1 1d       	adc	r31, r1
    2c50:	11 24       	eor	r1, r1
    2c52:	80 a5       	ldd	r24, Z+40	; 0x28
    2c54:	91 a5       	ldd	r25, Z+41	; 0x29
    2c56:	28 9f       	mul	r18, r24
    2c58:	b0 01       	movw	r22, r0
    2c5a:	29 9f       	mul	r18, r25
    2c5c:	70 0d       	add	r23, r0
    2c5e:	38 9f       	mul	r19, r24
    2c60:	70 0d       	add	r23, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	86 a1       	ldd	r24, Z+38	; 0x26
    2c66:	97 a1       	ldd	r25, Z+39	; 0x27
    2c68:	86 0f       	add	r24, r22
    2c6a:	97 1f       	adc	r25, r23
    2c6c:	89 8b       	std	Y+17, r24	; 0x11
    2c6e:	9a 8b       	std	Y+18, r25	; 0x12
						
						// Check limit
						if ((duration <= pstGUI[Profile].m_wMaxDuration) && (duration >= pstGUI[Profile].m_wMinDuration))
    2c70:	20 8d       	ldd	r18, Z+24	; 0x18
    2c72:	31 8d       	ldd	r19, Z+25	; 0x19
    2c74:	28 17       	cp	r18, r24
    2c76:	39 07       	cpc	r19, r25
    2c78:	60 f1       	brcs	.+88     	; 0x2cd2 <_ZN16CLaserControlApp3RunEv+0x5ec>
    2c7a:	9a 01       	movw	r18, r20
    2c7c:	2f 5f       	subi	r18, 0xFF	; 255
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c80:	6a e1       	ldi	r22, 0x1A	; 26
    2c82:	62 9f       	mul	r22, r18
    2c84:	f0 01       	movw	r30, r0
    2c86:	63 9f       	mul	r22, r19
    2c88:	f0 0d       	add	r31, r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	ee 0d       	add	r30, r14
    2c8e:	ff 1d       	adc	r31, r15
    2c90:	20 81       	ld	r18, Z
    2c92:	31 81       	ldd	r19, Z+1	; 0x01
    2c94:	82 17       	cp	r24, r18
    2c96:	93 07       	cpc	r25, r19
    2c98:	e0 f0       	brcs	.+56     	; 0x2cd2 <_ZN16CLaserControlApp3RunEv+0x5ec>
						{
							if (pstGUI[Profile].updateDuration)
    2c9a:	8a e1       	ldi	r24, 0x1A	; 26
    2c9c:	84 9f       	mul	r24, r20
    2c9e:	f0 01       	movw	r30, r0
    2ca0:	85 9f       	mul	r24, r21
    2ca2:	f0 0d       	add	r31, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	ee 0d       	add	r30, r14
    2ca8:	ff 1d       	adc	r31, r15
    2caa:	84 a5       	ldd	r24, Z+44	; 0x2c
    2cac:	88 23       	and	r24, r24
    2cae:	49 f0       	breq	.+18     	; 0x2cc2 <_ZN16CLaserControlApp3RunEv+0x5dc>
								CalculateDurationSteps(freq, duration);
    2cb0:	ae 01       	movw	r20, r28
    2cb2:	4f 5e       	subi	r20, 0xEF	; 239
    2cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb6:	be 01       	movw	r22, r28
    2cb8:	6d 5e       	subi	r22, 0xED	; 237
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	c7 01       	movw	r24, r14
    2cbe:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN16CLaserControlApp22CalculateDurationStepsERjS0_>
							laserDiodeData.lasersettings.Duration = duration;
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	f7 01       	movw	r30, r14
    2cc8:	ea 50       	subi	r30, 0x0A	; 10
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 83       	st	Z, r24
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	05 c0       	rjmp	.+10     	; 0x2cdc <_ZN16CLaserControlApp3RunEv+0x5f6>
						}
						else
							laserDiodeData.laserprofile.DurationCnt = durationCnt; // Cancel change if out
    2cd2:	f7 01       	movw	r30, r14
    2cd4:	e0 51       	subi	r30, 0x10	; 16
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 82       	st	Z, r8
    2cda:	91 82       	std	Z+1, r9	; 0x01
					}
					update = true;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	f7 01       	movw	r30, r14
    2ce0:	81 8b       	std	Z+17, r24	; 0x11
				}
				if (energyCnt != laserDiodeData.laserprofile.EnergyCnt)
    2ce2:	f7 01       	movw	r30, r14
    2ce4:	ee 50       	subi	r30, 0x0E	; 14
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	40 81       	ld	r20, Z
    2cea:	51 81       	ldd	r21, Z+1	; 0x01
    2cec:	46 15       	cp	r20, r6
    2cee:	57 05       	cpc	r21, r7
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <_ZN16CLaserControlApp3RunEv+0x60e>
    2cf2:	67 c0       	rjmp	.+206    	; 0x2dc2 <_ZN16CLaserControlApp3RunEv+0x6dc>
				{
					energy = laserDiodeData.laserprofile.EnergyCnt * pstGUI[Profile].m_wEnergyStep + pstGUI[Profile].m_wEnergyOffset;
    2cf4:	d7 01       	movw	r26, r14
    2cf6:	1e 96       	adiw	r26, 0x0e	; 14
    2cf8:	2c 91       	ld	r18, X
    2cfa:	62 2f       	mov	r22, r18
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	f7 01       	movw	r30, r14
    2d00:	ba e1       	ldi	r27, 0x1A	; 26
    2d02:	2b 9f       	mul	r18, r27
    2d04:	e0 0d       	add	r30, r0
    2d06:	f1 1d       	adc	r31, r1
    2d08:	11 24       	eor	r1, r1
    2d0a:	82 a1       	ldd	r24, Z+34	; 0x22
    2d0c:	93 a1       	ldd	r25, Z+35	; 0x23
    2d0e:	48 9f       	mul	r20, r24
    2d10:	d0 01       	movw	r26, r0
    2d12:	49 9f       	mul	r20, r25
    2d14:	b0 0d       	add	r27, r0
    2d16:	58 9f       	mul	r21, r24
    2d18:	b0 0d       	add	r27, r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	80 a1       	ldd	r24, Z+32	; 0x20
    2d1e:	91 a1       	ldd	r25, Z+33	; 0x21
    2d20:	8a 0f       	add	r24, r26
    2d22:	9b 1f       	adc	r25, r27
    2d24:	8d 87       	std	Y+13, r24	; 0x0d
    2d26:	9e 87       	std	Y+14, r25	; 0x0e
					
					if (Profile == PROFILE_FAST)
    2d28:	24 30       	cpi	r18, 0x04	; 4
    2d2a:	69 f4       	brne	.+26     	; 0x2d46 <_ZN16CLaserControlApp3RunEv+0x660>
						CheckLimitsFastMode(freq, duration, energy);
    2d2c:	9e 01       	movw	r18, r28
    2d2e:	23 5f       	subi	r18, 0xF3	; 243
    2d30:	3f 4f       	sbci	r19, 0xFF	; 255
    2d32:	ae 01       	movw	r20, r28
    2d34:	4f 5e       	subi	r20, 0xEF	; 239
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	be 01       	movw	r22, r28
    2d3a:	6d 5e       	subi	r22, 0xED	; 237
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	c7 01       	movw	r24, r14
    2d40:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
    2d44:	3b c0       	rjmp	.+118    	; 0x2dbc <_ZN16CLaserControlApp3RunEv+0x6d6>
					else
					{
						// Check limit
						if ((energy <= pstGUI[Profile].m_wMaxEnergy_) && (energy >= pstGUI[Profile].m_wMinEnergy_))
    2d46:	2a e1       	ldi	r18, 0x1A	; 26
    2d48:	26 9f       	mul	r18, r22
    2d4a:	f0 01       	movw	r30, r0
    2d4c:	27 9f       	mul	r18, r23
    2d4e:	f0 0d       	add	r31, r0
    2d50:	11 24       	eor	r1, r1
    2d52:	ee 0d       	add	r30, r14
    2d54:	ff 1d       	adc	r31, r15
    2d56:	24 89       	ldd	r18, Z+20	; 0x14
    2d58:	35 89       	ldd	r19, Z+21	; 0x15
    2d5a:	28 17       	cp	r18, r24
    2d5c:	39 07       	cpc	r19, r25
    2d5e:	48 f1       	brcs	.+82     	; 0x2db2 <_ZN16CLaserControlApp3RunEv+0x6cc>
    2d60:	2a e1       	ldi	r18, 0x1A	; 26
    2d62:	26 9f       	mul	r18, r22
    2d64:	f0 01       	movw	r30, r0
    2d66:	27 9f       	mul	r18, r23
    2d68:	f0 0d       	add	r31, r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	ee 0d       	add	r30, r14
    2d6e:	ff 1d       	adc	r31, r15
    2d70:	26 89       	ldd	r18, Z+22	; 0x16
    2d72:	37 89       	ldd	r19, Z+23	; 0x17
    2d74:	82 17       	cp	r24, r18
    2d76:	93 07       	cpc	r25, r19
    2d78:	e0 f0       	brcs	.+56     	; 0x2db2 <_ZN16CLaserControlApp3RunEv+0x6cc>
						{
							if (pstGUI[Profile].updateEnergy)
    2d7a:	8a e1       	ldi	r24, 0x1A	; 26
    2d7c:	86 9f       	mul	r24, r22
    2d7e:	f0 01       	movw	r30, r0
    2d80:	87 9f       	mul	r24, r23
    2d82:	f0 0d       	add	r31, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	ee 0d       	add	r30, r14
    2d88:	ff 1d       	adc	r31, r15
    2d8a:	85 a5       	ldd	r24, Z+45	; 0x2d
    2d8c:	88 23       	and	r24, r24
    2d8e:	49 f0       	breq	.+18     	; 0x2da2 <_ZN16CLaserControlApp3RunEv+0x6bc>
								CalculateEnergySteps(freq, energy);
    2d90:	ae 01       	movw	r20, r28
    2d92:	43 5f       	subi	r20, 0xF3	; 243
    2d94:	5f 4f       	sbci	r21, 0xFF	; 255
    2d96:	be 01       	movw	r22, r28
    2d98:	6d 5e       	subi	r22, 0xED	; 237
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	c7 01       	movw	r24, r14
    2d9e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZN16CLaserControlApp20CalculateEnergyStepsERjS0_>
							laserDiodeData.lasersettings.Energy = energy;
    2da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da6:	f7 01       	movw	r30, r14
    2da8:	e8 50       	subi	r30, 0x08	; 8
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 83       	st	Z, r24
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	05 c0       	rjmp	.+10     	; 0x2dbc <_ZN16CLaserControlApp3RunEv+0x6d6>
						}
						else
							laserDiodeData.laserprofile.EnergyCnt = energyCnt; // Cancel change if out
    2db2:	f7 01       	movw	r30, r14
    2db4:	ee 50       	subi	r30, 0x0E	; 14
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 82       	st	Z, r6
    2dba:	71 82       	std	Z+1, r7	; 0x01
					}
					update = true;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	f7 01       	movw	r30, r14
    2dc0:	81 8b       	std	Z+17, r24	; 0x11
				}
				
				if (Profile != PROFILE_FAST)
    2dc2:	d7 01       	movw	r26, r14
    2dc4:	1e 96       	adiw	r26, 0x0e	; 14
    2dc6:	0c 91       	ld	r16, X
    2dc8:	04 30       	cpi	r16, 0x04	; 4
    2dca:	69 f0       	breq	.+26     	; 0x2de6 <_ZN16CLaserControlApp3RunEv+0x700>
					CheckLimits(freq, duration, energy, Profile);
    2dcc:	9e 01       	movw	r18, r28
    2dce:	23 5f       	subi	r18, 0xF3	; 243
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	ae 01       	movw	r20, r28
    2dd4:	4f 5e       	subi	r20, 0xEF	; 239
    2dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd8:	be 01       	movw	r22, r28
    2dda:	6d 5e       	subi	r22, 0xED	; 237
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	c7 01       	movw	r24, r14
    2de0:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN16CLaserControlApp11CheckLimitsERjS0_S0_16APP_PROFILE_ENUM>
    2de4:	0c c0       	rjmp	.+24     	; 0x2dfe <_ZN16CLaserControlApp3RunEv+0x718>
				else
					CheckLimitsFastMode(freq, duration, energy);
    2de6:	9e 01       	movw	r18, r28
    2de8:	23 5f       	subi	r18, 0xF3	; 243
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	ae 01       	movw	r20, r28
    2dee:	4f 5e       	subi	r20, 0xEF	; 239
    2df0:	5f 4f       	sbci	r21, 0xFF	; 255
    2df2:	be 01       	movw	r22, r28
    2df4:	6d 5e       	subi	r22, 0xED	; 237
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	c7 01       	movw	r24, r14
    2dfa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN16CLaserControlApp19CheckLimitsFastModeERjS0_S0_>
				
				if (Profile == PROFILE_MEDIUM)
    2dfe:	f7 01       	movw	r30, r14
    2e00:	86 85       	ldd	r24, Z+14	; 0x0e
    2e02:	83 30       	cpi	r24, 0x03	; 3
    2e04:	81 f4       	brne	.+32     	; 0x2e26 <_ZN16CLaserControlApp3RunEv+0x740>
					CalculateMultiPulseLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2e06:	a7 01       	movw	r20, r14
    2e08:	4c 50       	subi	r20, 0x0C	; 12
    2e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0c:	b7 01       	movw	r22, r14
    2e0e:	62 51       	subi	r22, 0x12	; 18
    2e10:	7f 4f       	sbci	r23, 0xFF	; 255
    2e12:	c7 01       	movw	r24, r14
    2e14:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN16CLaserControlApp32CalculateMultiPulseLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2e18:	2f 83       	std	Y+7, r18	; 0x07
    2e1a:	38 87       	std	Y+8, r19	; 0x08
    2e1c:	49 87       	std	Y+9, r20	; 0x09
    2e1e:	5a 87       	std	Y+10, r21	; 0x0a
    2e20:	6b 87       	std	Y+11, r22	; 0x0b
    2e22:	7c 87       	std	Y+12, r23	; 0x0c
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <_ZN16CLaserControlApp3RunEv+0x75e>
				else
					CalculateLaserSettings(&laserDiodeData.laserprofile, &laserDiodeData.lasersettings);
    2e26:	a7 01       	movw	r20, r14
    2e28:	4c 50       	subi	r20, 0x0C	; 12
    2e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e2c:	b7 01       	movw	r22, r14
    2e2e:	62 51       	subi	r22, 0x12	; 18
    2e30:	7f 4f       	sbci	r23, 0xFF	; 255
    2e32:	c7 01       	movw	r24, r14
    2e34:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCTP25DGUS_LASERSETTINGS_STRUCT>
    2e38:	29 83       	std	Y+1, r18	; 0x01
    2e3a:	3a 83       	std	Y+2, r19	; 0x02
    2e3c:	4b 83       	std	Y+3, r20	; 0x03
    2e3e:	5c 83       	std	Y+4, r21	; 0x04
    2e40:	6d 83       	std	Y+5, r22	; 0x05
    2e42:	7e 83       	std	Y+6, r23	; 0x06
					
				laserPower = min((uint32_t)(laserDiodeData.lasersettings.Energy * 1440ul) / (uint32_t)laserDiodeData.lasersettings.Duration, MAX_LASER_POWER); // Convert Energy J/cm2 to Power in Watts
    2e44:	f7 01       	movw	r30, r14
    2e46:	e8 50       	subi	r30, 0x08	; 8
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	20 81       	ld	r18, Z
    2e4c:	31 81       	ldd	r19, Z+1	; 0x01
    2e4e:	a0 ea       	ldi	r26, 0xA0	; 160
    2e50:	b5 e0       	ldi	r27, 0x05	; 5
    2e52:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    2e56:	32 97       	sbiw	r30, 0x02	; 2
    2e58:	20 81       	ld	r18, Z
    2e5a:	31 81       	ldd	r19, Z+1	; 0x01
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    2e64:	64 ef       	ldi	r22, 0xF4	; 244
    2e66:	71 e0       	ldi	r23, 0x01	; 1
    2e68:	c9 01       	movw	r24, r18
    2e6a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z3minjj>
    2e6e:	f7 01       	movw	r30, r14
    2e70:	e8 52       	subi	r30, 0x28	; 40
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
				
				// Copy data to profiles
				if (update)
    2e78:	d7 01       	movw	r26, r14
    2e7a:	51 96       	adiw	r26, 0x11	; 17
    2e7c:	8c 91       	ld	r24, X
    2e7e:	51 97       	sbiw	r26, 0x11	; 17
    2e80:	88 23       	and	r24, r24
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <_ZN16CLaserControlApp3RunEv+0x7a0>
    2e84:	39 c2       	rjmp	.+1138   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				{
					memcpy((void*)&m_structLaserProfile [Profile], (void*)&laserDiodeData.laserprofile , sizeof(laserDiodeData.laserprofile));
    2e86:	1e 96       	adiw	r26, 0x0e	; 14
    2e88:	8c 91       	ld	r24, X
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	aa 0f       	add	r26, r26
    2e90:	bb 1f       	adc	r27, r27
    2e92:	a8 0f       	add	r26, r24
    2e94:	b9 1f       	adc	r27, r25
    2e96:	aa 0f       	add	r26, r26
    2e98:	bb 1f       	adc	r27, r27
    2e9a:	aa 56       	subi	r26, 0x6A	; 106
    2e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9e:	ae 0d       	add	r26, r14
    2ea0:	bf 1d       	adc	r27, r15
    2ea2:	86 e0       	ldi	r24, 0x06	; 6
    2ea4:	76 96       	adiw	r30, 0x16	; 22
    2ea6:	01 90       	ld	r0, Z+
    2ea8:	0d 92       	st	X+, r0
    2eaa:	8a 95       	dec	r24
    2eac:	e1 f7       	brne	.-8      	; 0x2ea6 <_ZN16CLaserControlApp3RunEv+0x7c0>
					memcpy((void*)&m_structLaserSettings[Profile], (void*)&laserDiodeData.lasersettings, sizeof(laserDiodeData.lasersettings));
    2eae:	f7 01       	movw	r30, r14
    2eb0:	86 85       	ldd	r24, Z+14	; 0x0e
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	aa 0f       	add	r26, r26
    2eb8:	bb 1f       	adc	r27, r27
    2eba:	a8 0f       	add	r26, r24
    2ebc:	b9 1f       	adc	r27, r25
    2ebe:	aa 0f       	add	r26, r26
    2ec0:	bb 1f       	adc	r27, r27
    2ec2:	ac 54       	subi	r26, 0x4C	; 76
    2ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec6:	ae 0d       	add	r26, r14
    2ec8:	bf 1d       	adc	r27, r15
    2eca:	86 e0       	ldi	r24, 0x06	; 6
    2ecc:	ec 50       	subi	r30, 0x0C	; 12
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	01 90       	ld	r0, Z+
    2ed2:	0d 92       	st	X+, r0
    2ed4:	8a 95       	dec	r24
    2ed6:	e1 f7       	brne	.-8      	; 0x2ed0 <_ZN16CLaserControlApp3RunEv+0x7ea>
				}
			}
		break;
    2ed8:	0f c2       	rjmp	.+1054   	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    2eda:	d7 01       	movw	r26, r14
    2edc:	52 96       	adiw	r26, 0x12	; 18
    2ede:	8c 91       	ld	r24, X
    2ee0:	88 23       	and	r24, r24
    2ee2:	b9 f0       	breq	.+46     	; 0x2f12 <_ZN16CLaserControlApp3RunEv+0x82c>
				{
					timervar.timer_minutes = m_wMinutes;
    2ee4:	f7 01       	movw	r30, r14
    2ee6:	ea 5e       	subi	r30, 0xEA	; 234
    2ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	8d 87       	std	Y+13, r24	; 0x0d
    2ef0:	9e 87       	std	Y+14, r25	; 0x0e
					timervar.timer_seconds = m_wSeconds;
    2ef2:	32 96       	adiw	r30, 0x02	; 2
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 81       	ldd	r25, Z+1	; 0x01
    2ef8:	8f 87       	std	Y+15, r24	; 0x0f
    2efa:	98 8b       	std	Y+16, r25	; 0x10
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    2efc:	24 e0       	ldi	r18, 0x04	; 4
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	ae 01       	movw	r20, r28
    2f02:	43 5f       	subi	r20, 0xF3	; 243
    2f04:	5f 4f       	sbci	r21, 0xFF	; 255
    2f06:	6f e0       	ldi	r22, 0x0F	; 15
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	c7 01       	movw	r24, r14
    2f0c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
    2f10:	f3 c1       	rjmp	.+998    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    2f12:	f7 01       	movw	r30, r14
    2f14:	86 85       	ldd	r24, Z+14	; 0x0e
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	ac 01       	movw	r20, r24
    2f1a:	44 0f       	add	r20, r20
    2f1c:	55 1f       	adc	r21, r21
    2f1e:	84 0f       	add	r24, r20
    2f20:	95 1f       	adc	r25, r21
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	ac 01       	movw	r20, r24
    2f28:	4a 56       	subi	r20, 0x6A	; 106
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2c:	4e 0d       	add	r20, r14
    2f2e:	5f 1d       	adc	r21, r15
    2f30:	26 e0       	ldi	r18, 0x06	; 6
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	62 e0       	ldi	r22, 0x02	; 2
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	c7 01       	movw	r24, r14
    2f3a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    2f3e:	6c e0       	ldi	r22, 0x0C	; 12
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	c7 01       	movw	r24, r14
    2f44:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    2f48:	d7 c1       	rjmp	.+942    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    2f4a:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2f4e:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2f52:	6a e0       	ldi	r22, 0x0A	; 10
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	0e 94 6e 3e 	call	0x7cdc	; 0x7cdc <__divmodhi4>
    2f5a:	6d 87       	std	Y+13, r22	; 0x0d
    2f5c:	7e 87       	std	Y+14, r23	; 0x0e
				timervar.timer_seconds = temperature % 10;
    2f5e:	8f 87       	std	Y+15, r24	; 0x0f
    2f60:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    2f62:	24 e0       	ldi	r18, 0x04	; 4
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	ae 01       	movw	r20, r28
    2f68:	43 5f       	subi	r20, 0xF3	; 243
    2f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6c:	6f e0       	ldi	r22, 0x0F	; 15
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	c7 01       	movw	r24, r14
    2f72:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    2f76:	f7 01       	movw	r30, r14
    2f78:	e4 5e       	subi	r30, 0xE4	; 228
    2f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	36 97       	sbiw	r30, 0x06	; 6
    2f82:	80 83       	st	Z, r24
    2f84:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    2f86:	38 96       	adiw	r30, 0x08	; 8
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	36 97       	sbiw	r30, 0x06	; 6
    2f8e:	80 83       	st	Z, r24
    2f90:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	d7 01       	movw	r26, r14
    2f96:	52 96       	adiw	r26, 0x12	; 18
    2f98:	8c 93       	st	X, r24
				
				if (temperature < 290)
    2f9a:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2f9e:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2fa2:	82 32       	cpi	r24, 0x22	; 34
    2fa4:	91 40       	sbci	r25, 0x01	; 1
    2fa6:	0c f0       	brlt	.+2      	; 0x2faa <_ZN16CLaserControlApp3RunEv+0x8c4>
    2fa8:	a7 c1       	rjmp	.+846    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
					SetPictureId(PICID_WORK_PREPARE);
    2faa:	67 e0       	ldi	r22, 0x07	; 7
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	c7 01       	movw	r24, r14
    2fb0:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    2fb4:	a1 c1       	rjmp	.+834    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    2fb6:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    2fba:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    2fbe:	8d 32       	cpi	r24, 0x2D	; 45
    2fc0:	91 40       	sbci	r25, 0x01	; 1
    2fc2:	0c f4       	brge	.+2      	; 0x2fc6 <_ZN16CLaserControlApp3RunEv+0x8e0>
    2fc4:	99 c1       	rjmp	.+818    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    2fc6:	69 e2       	ldi	r22, 0x29	; 41
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	c7 01       	movw	r24, r14
    2fcc:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    2fd0:	d7 01       	movw	r26, r14
    2fd2:	1f 96       	adiw	r26, 0x0f	; 15
    2fd4:	8c 91       	ld	r24, X
    2fd6:	1f 97       	sbiw	r26, 0x0f	; 15
    2fd8:	50 96       	adiw	r26, 0x10	; 16
    2fda:	8c 93       	st	X, r24
    2fdc:	8d c1       	rjmp	.+794    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				SetLaserDiodePower();
    2fde:	c7 01       	movw	r24, r14
    2fe0:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
							
				if (!laserBoard.Footswitch())
    2fe4:	81 ee       	ldi	r24, 0xE1	; 225
    2fe6:	95 e2       	ldi	r25, 0x25	; 37
    2fe8:	0e 94 cc 38 	call	0x7198	; 0x7198 <_ZN11CLaserBoard10FootswitchEv>
    2fec:	81 11       	cpse	r24, r1
    2fee:	12 c0       	rjmp	.+36     	; 0x3014 <_ZN16CLaserControlApp3RunEv+0x92e>
				{
					//isstarted = true;
					if (state != APP_WORKLIGHT)
    2ff0:	f7 01       	movw	r30, r14
    2ff2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ff4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ff6:	80 97       	sbiw	r24, 0x20	; 32
    2ff8:	f1 f0       	breq	.+60     	; 0x3036 <_ZN16CLaserControlApp3RunEv+0x950>
					{
						SetPictureId(PICID_WORK_STARTED);
    2ffa:	60 e1       	ldi	r22, 0x10	; 16
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	c7 01       	movw	r24, r14
    3000:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    3004:	80 e2       	ldi	r24, 0x20	; 32
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	d7 01       	movw	r26, r14
    300a:	1c 96       	adiw	r26, 0x0c	; 12
    300c:	8d 93       	st	X+, r24
    300e:	9c 93       	st	X, r25
    3010:	1d 97       	sbiw	r26, 0x0d	; 13
    3012:	11 c0       	rjmp	.+34     	; 0x3036 <_ZN16CLaserControlApp3RunEv+0x950>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    3014:	f7 01       	movw	r30, r14
    3016:	84 85       	ldd	r24, Z+12	; 0x0c
    3018:	95 85       	ldd	r25, Z+13	; 0x0d
    301a:	40 97       	sbiw	r24, 0x10	; 16
    301c:	61 f0       	breq	.+24     	; 0x3036 <_ZN16CLaserControlApp3RunEv+0x950>
					{
						SetPictureId(PICID_WORK_POWERON);
    301e:	6e e0       	ldi	r22, 0x0E	; 14
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	c7 01       	movw	r24, r14
    3024:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    3028:	80 e1       	ldi	r24, 0x10	; 16
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	d7 01       	movw	r26, r14
    302e:	1c 96       	adiw	r26, 0x0c	; 12
    3030:	8d 93       	st	X+, r24
    3032:	9c 93       	st	X, r25
    3034:	1d 97       	sbiw	r26, 0x0d	; 13
					}
					//StopLaser();
				}
			
				uint32_t cnt = swap32(laserCounter);
    3036:	f7 01       	movw	r30, r14
    3038:	e6 52       	subi	r30, 0x26	; 38
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	60 81       	ld	r22, Z
    303e:	71 81       	ldd	r23, Z+1	; 0x01
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	0e 94 81 1b 	call	0x3702	; 0x3702 <_Z6swap32m>
    3048:	6d 87       	std	Y+13, r22	; 0x0d
    304a:	7e 87       	std	Y+14, r23	; 0x0e
    304c:	8f 87       	std	Y+15, r24	; 0x0f
    304e:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    3050:	24 e0       	ldi	r18, 0x04	; 4
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	ae 01       	movw	r20, r28
    3056:	43 5f       	subi	r20, 0xF3	; 243
    3058:	5f 4f       	sbci	r21, 0xFF	; 255
    305a:	68 e0       	ldi	r22, 0x08	; 8
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	c7 01       	movw	r24, r14
    3060:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    3064:	f7 01       	movw	r30, r14
    3066:	e2 52       	subi	r30, 0x22	; 34
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	0e 94 81 1b 	call	0x3702	; 0x3702 <_Z6swap32m>
    3076:	6d 87       	std	Y+13, r22	; 0x0d
    3078:	7e 87       	std	Y+14, r23	; 0x0e
    307a:	8f 87       	std	Y+15, r24	; 0x0f
    307c:	98 8b       	std	Y+16, r25	; 0x10
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    307e:	24 e0       	ldi	r18, 0x04	; 4
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	ae 01       	movw	r20, r28
    3084:	43 5f       	subi	r20, 0xF3	; 243
    3086:	5f 4f       	sbci	r21, 0xFF	; 255
    3088:	64 e1       	ldi	r22, 0x14	; 20
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	c7 01       	movw	r24, r14
    308e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    3092:	32 c1       	rjmp	.+612    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    3094:	81 ee       	ldi	r24, 0xE1	; 225
    3096:	95 e2       	ldi	r25, 0x25	; 37
    3098:	0e 94 81 38 	call	0x7102	; 0x7102 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    309c:	f7 01       	movw	r30, r14
    309e:	e0 5e       	subi	r30, 0xE0	; 224
    30a0:	fe 4f       	sbci	r31, 0xFE	; 254
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	cd 97       	sbiw	r24, 0x3d	; 61
    30a8:	08 f4       	brcc	.+2      	; 0x30ac <_ZN16CLaserControlApp3RunEv+0x9c6>
    30aa:	26 c1       	rjmp	.+588    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				SetPictureId(PICID_WORKOnReady);
    30ac:	69 e1       	ldi	r22, 0x19	; 25
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	c7 01       	movw	r24, r14
    30b2:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
    30b6:	20 c1       	rjmp	.+576    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    30b8:	81 ee       	ldi	r24, 0xE1	; 225
    30ba:	95 e2       	ldi	r25, 0x25	; 37
    30bc:	0e 94 81 38 	call	0x7102	; 0x7102 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    30c0:	f7 01       	movw	r30, r14
    30c2:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    30c4:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    30c8:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    30cc:	82 32       	cpi	r24, 0x22	; 34
    30ce:	91 40       	sbci	r25, 0x01	; 1
    30d0:	0c f0       	brlt	.+2      	; 0x30d4 <_ZN16CLaserControlApp3RunEv+0x9ee>
    30d2:	12 c1       	rjmp	.+548    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
			{
				prepare = true;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	d7 01       	movw	r26, r14
    30d8:	52 96       	adiw	r26, 0x12	; 18
    30da:	8c 93       	st	X, r24
    30dc:	52 97       	sbiw	r26, 0x12	; 18
				SetPictureId(PIC_ID_last);
    30de:	50 96       	adiw	r26, 0x10	; 16
    30e0:	6c 91       	ld	r22, X
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	c7 01       	movw	r24, r14
    30e6:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
    30ea:	06 c1       	rjmp	.+524    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    30ec:	81 ee       	ldi	r24, 0xE1	; 225
    30ee:	95 e2       	ldi	r25, 0x25	; 37
    30f0:	0e 94 81 38 	call	0x7102	; 0x7102 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    30f4:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    30f8:	85 ff       	sbrs	r24, 5
    30fa:	fe c0       	rjmp	.+508    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				SetPictureId(PIC_ID_last);
    30fc:	f7 01       	movw	r30, r14
    30fe:	60 89       	ldd	r22, Z+16	; 0x10
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	c7 01       	movw	r24, r14
    3104:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
    3108:	f7 c0       	rjmp	.+494    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    310a:	f7 01       	movw	r30, r14
    310c:	e2 52       	subi	r30, 0x22	; 34
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	10 82       	st	Z, r1
    3112:	11 82       	std	Z+1, r1	; 0x01
    3114:	12 82       	std	Z+2, r1	; 0x02
    3116:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    3118:	81 ee       	ldi	r24, 0xE1	; 225
    311a:	95 e2       	ldi	r25, 0x25	; 37
    311c:	0e 94 7d 38 	call	0x70fa	; 0x70fa <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    3120:	f7 01       	movw	r30, r14
    3122:	ec 5f       	subi	r30, 0xFC	; 252
    3124:	fe 4f       	sbci	r31, 0xFE	; 254
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	2c ec       	ldi	r18, 0xCC	; 204
    312c:	28 9f       	mul	r18, r24
    312e:	b0 01       	movw	r22, r0
    3130:	29 9f       	mul	r18, r25
    3132:	70 0d       	add	r23, r0
    3134:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    3136:	82 e1       	ldi	r24, 0x12	; 18
    3138:	96 e2       	ldi	r25, 0x26	; 38
    313a:	0e 94 0f 3b 	call	0x761e	; 0x761e <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	d7 01       	movw	r26, r14
    3142:	53 96       	adiw	r26, 0x13	; 19
    3144:	8c 93       	st	X, r24
    3146:	53 97       	sbiw	r26, 0x13	; 19
				
				prepare = true;
    3148:	52 96       	adiw	r26, 0x12	; 18
    314a:	8c 93       	st	X, r24
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    314c:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    3150:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    3154:	83 32       	cpi	r24, 0x23	; 35
    3156:	91 40       	sbci	r25, 0x01	; 1
    3158:	34 f0       	brlt	.+12     	; 0x3166 <_ZN16CLaserControlApp3RunEv+0xa80>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    315a:	67 e2       	ldi	r22, 0x27	; 39
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	c7 01       	movw	r24, r14
    3160:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
    3164:	c9 c0       	rjmp	.+402    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    3166:	67 e0       	ldi	r22, 0x07	; 7
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	c7 01       	movw	r24, r14
    316c:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
    3170:	c3 c0       	rjmp	.+390    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				SetLaserDiodePower();
    3172:	c7 01       	movw	r24, r14
    3174:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
				
				SetPictureId(PICID_WORK_POWERON);
    3178:	6e e0       	ldi	r22, 0x0E	; 14
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	c7 01       	movw	r24, r14
    317e:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    3182:	ba c0       	rjmp	.+372    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    3184:	6a e0       	ldi	r22, 0x0A	; 10
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	c7 01       	movw	r24, r14
    318a:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
				
				StopLaser();
    318e:	c7 01       	movw	r24, r14
    3190:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN16CLaserControlApp9StopLaserEv>
				laserBoard.LaserPowerOff();
    3194:	81 ee       	ldi	r24, 0xE1	; 225
    3196:	95 e2       	ldi	r25, 0x25	; 37
    3198:	0e 94 81 38 	call	0x7102	; 0x7102 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    319c:	f7 01       	movw	r30, r14
    319e:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    31a0:	81 ee       	ldi	r24, 0xE1	; 225
    31a2:	95 e2       	ldi	r25, 0x25	; 37
    31a4:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    31a8:	f7 01       	movw	r30, r14
    31aa:	e6 52       	subi	r30, 0x26	; 38
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	40 81       	ld	r20, Z
    31b0:	51 81       	ldd	r21, Z+1	; 0x01
    31b2:	62 81       	ldd	r22, Z+2	; 0x02
    31b4:	73 81       	ldd	r23, Z+3	; 0x03
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 22 40 	call	0x8044	; 0x8044 <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    31be:	1d 86       	std	Y+13, r1	; 0x0d
    31c0:	1e 86       	std	Y+14, r1	; 0x0e
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    31c2:	42 e0       	ldi	r20, 0x02	; 2
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	be 01       	movw	r22, r28
    31c8:	63 5f       	subi	r22, 0xF3	; 243
    31ca:	7f 4f       	sbci	r23, 0xFF	; 255
    31cc:	81 e2       	ldi	r24, 0x21	; 33
    31ce:	96 e2       	ldi	r25, 0x26	; 38
    31d0:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_ZN4CSPI4SendEPhj>
			}
		break;
    31d4:	91 c0       	rjmp	.+290    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    31d6:	6a e0       	ldi	r22, 0x0A	; 10
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	c7 01       	movw	r24, r14
    31dc:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    31e0:	8b c0       	rjmp	.+278    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    31e2:	42 e0       	ldi	r20, 0x02	; 2
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	61 e1       	ldi	r22, 0x11	; 17
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	c7 01       	movw	r24, r14
    31ec:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    31f0:	ff ef       	ldi	r31, 0xFF	; 255
    31f2:	21 ee       	ldi	r18, 0xE1	; 225
    31f4:	84 e0       	ldi	r24, 0x04	; 4
    31f6:	f1 50       	subi	r31, 0x01	; 1
    31f8:	20 40       	sbci	r18, 0x00	; 0
    31fa:	80 40       	sbci	r24, 0x00	; 0
    31fc:	e1 f7       	brne	.-8      	; 0x31f6 <_ZN16CLaserControlApp3RunEv+0xb10>
    31fe:	00 c0       	rjmp	.+0      	; 0x3200 <_ZN16CLaserControlApp3RunEv+0xb1a>
    3200:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    3202:	42 e0       	ldi	r20, 0x02	; 2
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	62 e1       	ldi	r22, 0x12	; 18
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	c7 01       	movw	r24, r14
    320c:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
    3210:	9f ef       	ldi	r25, 0xFF	; 255
    3212:	a1 ee       	ldi	r26, 0xE1	; 225
    3214:	b4 e0       	ldi	r27, 0x04	; 4
    3216:	91 50       	subi	r25, 0x01	; 1
    3218:	a0 40       	sbci	r26, 0x00	; 0
    321a:	b0 40       	sbci	r27, 0x00	; 0
    321c:	e1 f7       	brne	.-8      	; 0x3216 <_ZN16CLaserControlApp3RunEv+0xb30>
    321e:	00 c0       	rjmp	.+0      	; 0x3220 <_ZN16CLaserControlApp3RunEv+0xb3a>
    3220:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    3222:	f7 01       	movw	r30, r14
    3224:	e4 5f       	subi	r30, 0xF4	; 244
    3226:	fe 4f       	sbci	r31, 0xFE	; 254
    3228:	20 81       	ld	r18, Z
    322a:	31 81       	ldd	r19, Z+1	; 0x01
    322c:	c9 01       	movw	r24, r18
    322e:	a0 e0       	ldi	r26, 0x00	; 0
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	90 51       	subi	r25, 0x10	; 16
    3234:	af 4f       	sbci	r26, 0xFF	; 255
    3236:	bf 4f       	sbci	r27, 0xFF	; 255
    3238:	22 27       	eor	r18, r18
    323a:	38 2f       	mov	r19, r24
    323c:	49 2f       	mov	r20, r25
    323e:	5a 2f       	mov	r21, r26
    3240:	00 e0       	ldi	r16, 0x00	; 0
    3242:	1c e0       	ldi	r17, 0x0C	; 12
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	71 e0       	ldi	r23, 0x01	; 1
    3248:	88 e0       	ldi	r24, 0x08	; 8
    324a:	96 e2       	ldi	r25, 0x26	; 38
    324c:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    3250:	53 c0       	rjmp	.+166    	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
    3252:	ef ef       	ldi	r30, 0xFF	; 255
    3254:	f7 ea       	ldi	r31, 0xA7	; 167
    3256:	21 e6       	ldi	r18, 0x61	; 97
    3258:	e1 50       	subi	r30, 0x01	; 1
    325a:	f0 40       	sbci	r31, 0x00	; 0
    325c:	20 40       	sbci	r18, 0x00	; 0
    325e:	e1 f7       	brne	.-8      	; 0x3258 <_ZN16CLaserControlApp3RunEv+0xb72>
    3260:	00 c0       	rjmp	.+0      	; 0x3262 <_ZN16CLaserControlApp3RunEv+0xb7c>
    3262:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    3264:	42 e0       	ldi	r20, 0x02	; 2
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	62 e1       	ldi	r22, 0x12	; 18
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	c7 01       	movw	r24, r14
    326e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    3272:	f7 01       	movw	r30, r14
    3274:	e2 5f       	subi	r30, 0xF2	; 242
    3276:	fe 4f       	sbci	r31, 0xFE	; 254
    3278:	20 81       	ld	r18, Z
    327a:	31 81       	ldd	r19, Z+1	; 0x01
    327c:	32 97       	sbiw	r30, 0x02	; 2
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	28 0f       	add	r18, r24
    3284:	39 1f       	adc	r19, r25
    3286:	c9 01       	movw	r24, r18
    3288:	a0 e0       	ldi	r26, 0x00	; 0
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	90 51       	subi	r25, 0x10	; 16
    328e:	af 4f       	sbci	r26, 0xFF	; 255
    3290:	bf 4f       	sbci	r27, 0xFF	; 255
    3292:	22 27       	eor	r18, r18
    3294:	38 2f       	mov	r19, r24
    3296:	49 2f       	mov	r20, r25
    3298:	5a 2f       	mov	r21, r26
    329a:	00 e0       	ldi	r16, 0x00	; 0
    329c:	11 e0       	ldi	r17, 0x01	; 1
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	7d e0       	ldi	r23, 0x0D	; 13
    32a2:	88 e0       	ldi	r24, 0x08	; 8
    32a4:	96 e2       	ldi	r25, 0x26	; 38
    32a6:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    32aa:	26 c0       	rjmp	.+76     	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    32ac:	f7 01       	movw	r30, r14
    32ae:	e2 5f       	subi	r30, 0xF2	; 242
    32b0:	fe 4f       	sbci	r31, 0xFE	; 254
    32b2:	20 81       	ld	r18, Z
    32b4:	31 81       	ldd	r19, Z+1	; 0x01
    32b6:	32 97       	sbiw	r30, 0x02	; 2
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	28 0f       	add	r18, r24
    32be:	39 1f       	adc	r19, r25
    32c0:	c9 01       	movw	r24, r18
    32c2:	a0 e0       	ldi	r26, 0x00	; 0
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	90 51       	subi	r25, 0x10	; 16
    32c8:	af 4f       	sbci	r26, 0xFF	; 255
    32ca:	bf 4f       	sbci	r27, 0xFF	; 255
    32cc:	22 27       	eor	r18, r18
    32ce:	38 2f       	mov	r19, r24
    32d0:	49 2f       	mov	r20, r25
    32d2:	5a 2f       	mov	r21, r26
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	11 e0       	ldi	r17, 0x01	; 1
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	7d e0       	ldi	r23, 0x0D	; 13
    32dc:	88 e0       	ldi	r24, 0x08	; 8
    32de:	96 e2       	ldi	r25, 0x26	; 38
    32e0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    32e4:	09 c0       	rjmp	.+18     	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    32e6:	88 e0       	ldi	r24, 0x08	; 8
    32e8:	96 e2       	ldi	r25, 0x26	; 38
    32ea:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    32ee:	04 c0       	rjmp	.+8      	; 0x32f8 <_ZN16CLaserControlApp3RunEv+0xc12>
		default:
			Database.UnMap();
    32f0:	88 e0       	ldi	r24, 0x08	; 8
    32f2:	96 e2       	ldi	r25, 0x26	; 38
    32f4:	0e 94 9a 03 	call	0x734	; 0x734 <_ZN13CDGUSDatabase5UnMapEv>
			PIC_ID_last = PIC_ID;
			SetPictureId(PICID_WORK_ERROR1);
		}
#endif
	
	if (update)
    32f8:	d7 01       	movw	r26, r14
    32fa:	51 96       	adiw	r26, 0x11	; 17
    32fc:	8c 91       	ld	r24, X
    32fe:	88 23       	and	r24, r24
    3300:	a9 f0       	breq	.+42     	; 0x332c <_ZN16CLaserControlApp3RunEv+0xc46>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    3302:	a7 01       	movw	r20, r14
    3304:	44 51       	subi	r20, 0x14	; 20
    3306:	5f 4f       	sbci	r21, 0xFF	; 255
    3308:	2a e2       	ldi	r18, 0x2A	; 42
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	61 e0       	ldi	r22, 0x01	; 1
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	c7 01       	movw	r24, r14
    3312:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    3316:	f7 01       	movw	r30, r14
    3318:	11 8a       	std	Z+17, r1	; 0x11
    331a:	08 c0       	rjmp	.+16     	; 0x332c <_ZN16CLaserControlApp3RunEv+0xc46>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	f7 01       	movw	r30, r14
    3322:	e0 5f       	subi	r30, 0xF0	; 240
    3324:	fe 4f       	sbci	r31, 0xFE	; 254
    3326:	80 83       	st	Z, r24
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	38 ca       	rjmp	.-2960   	; 0x279c <_ZN16CLaserControlApp3RunEv+0xb6>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    332c:	64 96       	adiw	r28, 0x14	; 20
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	df 91       	pop	r29
    3334:	cf 91       	pop	r28
    3336:	1f 91       	pop	r17
    3338:	0f 91       	pop	r16
    333a:	ff 90       	pop	r15
    333c:	ef 90       	pop	r14
    333e:	df 90       	pop	r13
    3340:	cf 90       	pop	r12
    3342:	bf 90       	pop	r11
    3344:	af 90       	pop	r10
    3346:	9f 90       	pop	r9
    3348:	8f 90       	pop	r8
    334a:	7f 90       	pop	r7
    334c:	6f 90       	pop	r6
    334e:	08 95       	ret

00003350 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
void CLaserControlApp::OnLaserTimer()
{
}

void CLaserControlApp::OnLaserTimerStop()
{			
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	ec 01       	movw	r28, r24
	if (Profile == PROFILE_SINGLE)
    3356:	2e 85       	ldd	r18, Y+14	; 0x0e
    3358:	21 30       	cpi	r18, 0x01	; 1
    335a:	09 f5       	brne	.+66     	; 0x339e <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x4e>
	{
		StopLaser();
    335c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN16CLaserControlApp9StopLaserEv>
		
		if (laserTimerDutyCyclems > 100)
    3360:	ca 52       	subi	r28, 0x2A	; 42
    3362:	df 4f       	sbci	r29, 0xFF	; 255
    3364:	48 81       	ld	r20, Y
    3366:	59 81       	ldd	r21, Y+1	; 0x01
    3368:	45 36       	cpi	r20, 0x65	; 101
    336a:	51 05       	cpc	r21, r1
    336c:	50 f0       	brcs	.+20     	; 0x3382 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x32>
			player.SoundStart(500, 50, 0);
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	42 e3       	ldi	r20, 0x32	; 50
    3372:	50 e0       	ldi	r21, 0x00	; 0
    3374:	64 ef       	ldi	r22, 0xF4	; 244
    3376:	71 e0       	ldi	r23, 0x01	; 1
    3378:	80 ee       	ldi	r24, 0xE0	; 224
    337a:	95 e2       	ldi	r25, 0x25	; 37
    337c:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
    3380:	09 c0       	rjmp	.+18     	; 0x3394 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x44>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    3382:	56 95       	lsr	r21
    3384:	47 95       	ror	r20
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	64 ef       	ldi	r22, 0xF4	; 244
    338a:	71 e0       	ldi	r23, 0x01	; 1
    338c:	80 ee       	ldi	r24, 0xE0	; 224
    338e:	95 e2       	ldi	r25, 0x25	; 37
    3390:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    3394:	80 ee       	ldi	r24, 0xE0	; 224
    3396:	95 e2       	ldi	r25, 0x25	; 37
    3398:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
		return;
    339c:	87 c0       	rjmp	.+270    	; 0x34ac <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x15c>
	}
	
	laserCounter++;
    339e:	fc 01       	movw	r30, r24
    33a0:	e6 52       	subi	r30, 0x26	; 38
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	80 81       	ld	r24, Z
    33a6:	91 81       	ldd	r25, Z+1	; 0x01
    33a8:	a2 81       	ldd	r26, Z+2	; 0x02
    33aa:	b3 81       	ldd	r27, Z+3	; 0x03
    33ac:	01 96       	adiw	r24, 0x01	; 1
    33ae:	a1 1d       	adc	r26, r1
    33b0:	b1 1d       	adc	r27, r1
    33b2:	80 83       	st	Z, r24
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	a2 83       	std	Z+2, r26	; 0x02
    33b8:	b3 83       	std	Z+3, r27	; 0x03
	laserCounterSession++;
    33ba:	34 96       	adiw	r30, 0x04	; 4
    33bc:	80 81       	ld	r24, Z
    33be:	91 81       	ldd	r25, Z+1	; 0x01
    33c0:	a2 81       	ldd	r26, Z+2	; 0x02
    33c2:	b3 81       	ldd	r27, Z+3	; 0x03
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	a1 1d       	adc	r26, r1
    33c8:	b1 1d       	adc	r27, r1
    33ca:	80 83       	st	Z, r24
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	a2 83       	std	Z+2, r26	; 0x02
    33d0:	b3 83       	std	Z+3, r27	; 0x03
	
	if (Profile == PROFILE_MEDIUM)
    33d2:	23 30       	cpi	r18, 0x03	; 3
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x88>
    33d6:	4c c0       	rjmp	.+152    	; 0x3470 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x120>
	{	
		if 	((laserMultiPulseState%2) == 0)
    33d8:	34 96       	adiw	r30, 0x04	; 4
    33da:	80 81       	ld	r24, Z
    33dc:	80 fd       	sbrc	r24, 0
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x98>
			PORTF.OUTCLR = PIN0_bm;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    33e6:	03 c0       	rjmp	.+6      	; 0x33ee <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x9e>
		else
			PORTF.OUTSET = PIN0_bm;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if 	((laserMultiPulseState%2) == 0)
    33ee:	fe 01       	movw	r30, r28
    33f0:	ee 51       	subi	r30, 0x1E	; 30
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	80 fd       	sbrc	r24, 0
    33f8:	04 c0       	rjmp	.+8      	; 0x3402 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xb2>
			PORTF.OUTCLR = PIN1_bm;
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    3400:	03 c0       	rjmp	.+6      	; 0x3408 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xb8>
		else
			PORTF.OUTSET = PIN1_bm;
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			
		if (laserMultiPulseState > NUM_PULSES * 2) laserMultiPulseState = 0;
    3408:	fe 01       	movw	r30, r28
    340a:	ee 51       	subi	r30, 0x1E	; 30
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	05 97       	sbiw	r24, 0x05	; 5
    3414:	10 f0       	brcs	.+4      	; 0x341a <_ZN16CLaserControlApp16OnLaserTimerStopEv+0xca>
    3416:	10 82       	st	Z, r1
    3418:	11 82       	std	Z+1, r1	; 0x01
		TCF0.PERBUF = laserMultiPulsePeriod[laserMultiPulseState];
    341a:	de 01       	movw	r26, r28
    341c:	ae 51       	subi	r26, 0x1E	; 30
    341e:	bf 4f       	sbci	r27, 0xFF	; 255
    3420:	ed 91       	ld	r30, X+
    3422:	fc 91       	ld	r31, X
    3424:	11 97       	sbiw	r26, 0x01	; 1
    3426:	ee 58       	subi	r30, 0x8E	; 142
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	ec 0f       	add	r30, r28
    3430:	fd 1f       	adc	r31, r29
    3432:	80 81       	ld	r24, Z
    3434:	91 81       	ldd	r25, Z+1	; 0x01
    3436:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    343a:	90 93 37 0b 	sts	0x0B37, r25	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
		
		if (laserMultiPulseState == 3)
    343e:	8d 91       	ld	r24, X+
    3440:	9c 91       	ld	r25, X
    3442:	03 97       	sbiw	r24, 0x03	; 3
    3444:	69 f4       	brne	.+26     	; 0x3460 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x110>
		{
			player.SoundStart(500, 100, 0);
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	44 e6       	ldi	r20, 0x64	; 100
    344a:	50 e0       	ldi	r21, 0x00	; 0
    344c:	64 ef       	ldi	r22, 0xF4	; 244
    344e:	71 e0       	ldi	r23, 0x01	; 1
    3450:	80 ee       	ldi	r24, 0xE0	; 224
    3452:	95 e2       	ldi	r25, 0x25	; 37
    3454:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    3458:	80 ee       	ldi	r24, 0xE0	; 224
    345a:	95 e2       	ldi	r25, 0x25	; 37
    345c:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
		}
		
		laserMultiPulseState++;
    3460:	ce 51       	subi	r28, 0x1E	; 30
    3462:	df 4f       	sbci	r29, 0xFF	; 255
    3464:	88 81       	ld	r24, Y
    3466:	99 81       	ldd	r25, Y+1	; 0x01
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	88 83       	st	Y, r24
    346c:	99 83       	std	Y+1, r25	; 0x01
    346e:	1e c0       	rjmp	.+60     	; 0x34ac <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x15c>
	}
	else
	{
		if (laserTimerDutyCyclems > 100)
    3470:	ca 52       	subi	r28, 0x2A	; 42
    3472:	df 4f       	sbci	r29, 0xFF	; 255
    3474:	48 81       	ld	r20, Y
    3476:	59 81       	ldd	r21, Y+1	; 0x01
    3478:	45 36       	cpi	r20, 0x65	; 101
    347a:	51 05       	cpc	r21, r1
    347c:	50 f0       	brcs	.+20     	; 0x3492 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x142>
			player.SoundStart(500, 50, 0);
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	42 e3       	ldi	r20, 0x32	; 50
    3482:	50 e0       	ldi	r21, 0x00	; 0
    3484:	64 ef       	ldi	r22, 0xF4	; 244
    3486:	71 e0       	ldi	r23, 0x01	; 1
    3488:	80 ee       	ldi	r24, 0xE0	; 224
    348a:	95 e2       	ldi	r25, 0x25	; 37
    348c:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
    3490:	09 c0       	rjmp	.+18     	; 0x34a4 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x154>
		else
			player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    3492:	56 95       	lsr	r21
    3494:	47 95       	ror	r20
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	64 ef       	ldi	r22, 0xF4	; 244
    349a:	71 e0       	ldi	r23, 0x01	; 1
    349c:	80 ee       	ldi	r24, 0xE0	; 224
    349e:	95 e2       	ldi	r25, 0x25	; 37
    34a0:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN12CSoundPlayer10SoundStartEjjh>
		player.SoundStop();
    34a4:	80 ee       	ldi	r24, 0xE0	; 224
    34a6:	95 e2       	ldi	r25, 0x25	; 37
    34a8:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN12CSoundPlayer9SoundStopEv>
	}
}
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	08 95       	ret

000034b2 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStopStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    34b2:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    34b6:	08 95       	ret

000034b8 <_ZN16CLaserControlApp10StartLaserEv>:
	
	return true;
}

void CLaserControlApp::StartLaser()
{
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	ec 01       	movw	r28, r24
	if (Profile == PROFILE_MEDIUM)
    34c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    34c4:	83 30       	cpi	r24, 0x03	; 3
    34c6:	09 f0       	breq	.+2      	; 0x34ca <_ZN16CLaserControlApp10StartLaserEv+0x12>
    34c8:	44 c0       	rjmp	.+136    	; 0x3552 <_ZN16CLaserControlApp10StartLaserEv+0x9a>
	{
		laserTimer.Stop();
    34ca:	88 e1       	ldi	r24, 0x18	; 24
    34cc:	96 e2       	ldi	r25, 0x26	; 38
    34ce:	0e 94 70 3c 	call	0x78e0	; 0x78e0 <_ZN7CTimerF4StopEv>
		laserMultiPulseState = 2;
    34d2:	fe 01       	movw	r30, r28
    34d4:	ee 51       	subi	r30, 0x1E	; 30
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	80 83       	st	Z, r24
    34de:	91 83       	std	Z+1, r25	; 0x01
		PORTF.OUTSET = PIN0_bm;
    34e0:	e0 ea       	ldi	r30, 0xA0	; 160
    34e2:	f6 e0       	ldi	r31, 0x06	; 6
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	85 83       	std	Z+5, r24	; 0x05
		PORTF.OUTSET = PIN1_bm;
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	85 83       	std	Z+5, r24	; 0x05
		laserTimer.SetCOMPA(laserMultiPulsePeriod[0]/2);
    34ec:	8e 01       	movw	r16, r28
    34ee:	0c 51       	subi	r16, 0x1C	; 28
    34f0:	1f 4f       	sbci	r17, 0xFF	; 255
    34f2:	f8 01       	movw	r30, r16
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	76 95       	lsr	r23
    34fa:	67 95       	ror	r22
    34fc:	88 e1       	ldi	r24, 0x18	; 24
    34fe:	96 e2       	ldi	r25, 0x26	; 38
    3500:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserMultiPulsePeriod[0]/2);
    3504:	f8 01       	movw	r30, r16
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	76 95       	lsr	r23
    350c:	67 95       	ror	r22
    350e:	88 e1       	ldi	r24, 0x18	; 24
    3510:	96 e2       	ldi	r25, 0x26	; 38
    3512:	0e 94 a0 3c 	call	0x7940	; 0x7940 <_ZN7CTimerF8SetCOMPBEj>
		TCF0.PERBUF = laserMultiPulsePeriod[1];
    3516:	ca 51       	subi	r28, 0x1A	; 26
    3518:	df 4f       	sbci	r29, 0xFF	; 255
    351a:	88 81       	ld	r24, Y
    351c:	99 81       	ldd	r25, Y+1	; 0x01
    351e:	e0 e0       	ldi	r30, 0x00	; 0
    3520:	fb e0       	ldi	r31, 0x0B	; 11
    3522:	86 ab       	std	Z+54, r24	; 0x36
    3524:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserMultiPulsePeriod[1]/2;
    3526:	88 81       	ld	r24, Y
    3528:	99 81       	ldd	r25, Y+1	; 0x01
    352a:	96 95       	lsr	r25
    352c:	87 95       	ror	r24
    352e:	80 af       	std	Z+56, r24	; 0x38
    3530:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserMultiPulsePeriod[1]/2;
    3532:	88 81       	ld	r24, Y
    3534:	99 81       	ldd	r25, Y+1	; 0x01
    3536:	96 95       	lsr	r25
    3538:	87 95       	ror	r24
    353a:	82 af       	std	Z+58, r24	; 0x3a
    353c:	93 af       	std	Z+59, r25	; 0x3b
		TCF0.CNT = 0;
    353e:	10 a2       	std	Z+32, r1	; 0x20
    3540:	11 a2       	std	Z+33, r1	; 0x21
		laserTimer.Start(laserMultiPulsePeriod[0]);
    3542:	f8 01       	movw	r30, r16
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	88 e1       	ldi	r24, 0x18	; 24
    354a:	96 e2       	ldi	r25, 0x26	; 38
    354c:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN7CTimerF5StartEj>
    3550:	27 c0       	rjmp	.+78     	; 0x35a0 <_ZN16CLaserControlApp10StartLaserEv+0xe8>
	} else
	{
		TCF0.PERBUF = laserTimerPeriod;
    3552:	8e 01       	movw	r16, r28
    3554:	0e 52       	subi	r16, 0x2E	; 46
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	f8 01       	movw	r30, r16
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	e0 e0       	ldi	r30, 0x00	; 0
    3560:	fb e0       	ldi	r31, 0x0B	; 11
    3562:	86 ab       	std	Z+54, r24	; 0x36
    3564:	97 ab       	std	Z+55, r25	; 0x37
		TCF0.CCABUF = laserTimerDutyCycle;
    3566:	cc 52       	subi	r28, 0x2C	; 44
    3568:	df 4f       	sbci	r29, 0xFF	; 255
    356a:	88 81       	ld	r24, Y
    356c:	99 81       	ldd	r25, Y+1	; 0x01
    356e:	80 af       	std	Z+56, r24	; 0x38
    3570:	91 af       	std	Z+57, r25	; 0x39
		TCF0.CCBBUF = laserTimerDutyCycle;
    3572:	88 81       	ld	r24, Y
    3574:	99 81       	ldd	r25, Y+1	; 0x01
    3576:	82 af       	std	Z+58, r24	; 0x3a
    3578:	93 af       	std	Z+59, r25	; 0x3b
		laserTimer.SetCOMPA(laserTimerDutyCycle);
    357a:	68 81       	ld	r22, Y
    357c:	79 81       	ldd	r23, Y+1	; 0x01
    357e:	88 e1       	ldi	r24, 0x18	; 24
    3580:	96 e2       	ldi	r25, 0x26	; 38
    3582:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN7CTimerF8SetCOMPAEj>
		laserTimer.SetCOMPB(laserTimerDutyCycle);
    3586:	68 81       	ld	r22, Y
    3588:	79 81       	ldd	r23, Y+1	; 0x01
    358a:	88 e1       	ldi	r24, 0x18	; 24
    358c:	96 e2       	ldi	r25, 0x26	; 38
    358e:	0e 94 a0 3c 	call	0x7940	; 0x7940 <_ZN7CTimerF8SetCOMPBEj>
		//TCF0.CNT = 0;
		//laserTimer.ChannelReset(TIMER_CHANNEL_A);
		//laserTimer.ChannelReset(TIMER_CHANNEL_B);
		laserTimer.Start(laserTimerPeriod);
    3592:	f8 01       	movw	r30, r16
    3594:	60 81       	ld	r22, Z
    3596:	71 81       	ldd	r23, Z+1	; 0x01
    3598:	88 e1       	ldi	r24, 0x18	; 24
    359a:	96 e2       	ldi	r25, 0x26	; 38
    359c:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN7CTimerF5StartEj>
	}
}
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	08 95       	ret

000035aa <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    35ae:	fc 01       	movw	r30, r24
    35b0:	24 85       	ldd	r18, Z+12	; 0x0c
    35b2:	35 85       	ldd	r19, Z+13	; 0x0d
    35b4:	20 31       	cpi	r18, 0x10	; 16
    35b6:	31 05       	cpc	r19, r1
    35b8:	21 f0       	breq	.+8      	; 0x35c2 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    35ba:	20 32       	cpi	r18, 0x20	; 32
    35bc:	31 05       	cpc	r19, r1
    35be:	09 f0       	breq	.+2      	; 0x35c2 <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    35c0:	60 c0       	rjmp	.+192    	; 0x3682 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    35c2:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    35c4:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    35c8:	80 fd       	sbrc	r24, 0
    35ca:	51 c0       	rjmp	.+162    	; 0x366e <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    35cc:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <__data_end>
    35d0:	81 11       	cpse	r24, r1
    35d2:	57 c0       	rjmp	.+174    	; 0x3682 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
    35d4:	fe 01       	movw	r30, r28
    35d6:	ee 5d       	subi	r30, 0xDE	; 222
    35d8:	fe 4f       	sbci	r31, 0xFE	; 254
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	89 2b       	or	r24, r25
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    35e2:	4b c0       	rjmp	.+150    	; 0x367a <_ZN16CLaserControlApp6OnINT0Ev+0xd0>
    35e4:	4e c0       	rjmp	.+156    	; 0x3682 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    35e6:	8a e0       	ldi	r24, 0x0A	; 10
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	fe 01       	movw	r30, r28
    35ec:	ee 5d       	subi	r30, 0xDE	; 222
    35ee:	fe 4f       	sbci	r31, 0xFE	; 254
    35f0:	80 83       	st	Z, r24
    35f2:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    35f4:	e8 54       	subi	r30, 0x48	; 72
    35f6:	f1 09       	sbc	r31, r1
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	a2 81       	ldd	r26, Z+2	; 0x02
    35fe:	b3 81       	ldd	r27, Z+3	; 0x03
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	a1 1d       	adc	r26, r1
    3604:	b1 1d       	adc	r27, r1
    3606:	80 83       	st	Z, r24
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	a2 83       	std	Z+2, r26	; 0x02
    360c:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    360e:	34 96       	adiw	r30, 0x04	; 4
    3610:	80 81       	ld	r24, Z
    3612:	91 81       	ldd	r25, Z+1	; 0x01
    3614:	a2 81       	ldd	r26, Z+2	; 0x02
    3616:	b3 81       	ldd	r27, Z+3	; 0x03
    3618:	01 96       	adiw	r24, 0x01	; 1
    361a:	a1 1d       	adc	r26, r1
    361c:	b1 1d       	adc	r27, r1
    361e:	80 83       	st	Z, r24
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	a2 83       	std	Z+2, r26	; 0x02
    3624:	b3 83       	std	Z+3, r27	; 0x03
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
						player.SoundStop();*/
					}
						
					if (laserTimerDutyCycle != 0)
    3626:	fe 01       	movw	r30, r28
    3628:	ec 52       	subi	r30, 0x2C	; 44
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	29 f0       	breq	.+10     	; 0x363e <_ZN16CLaserControlApp6OnINT0Ev+0x94>
						TCF0.CNT = laserTimerDutyCycle - 1;
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    363a:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
						
					StartLaser();
    363e:	ce 01       	movw	r24, r28
    3640:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <_ZN16CLaserControlApp10StartLaserEv>
					
					if (Profile == PROFILE_SINGLE)
    3644:	8e 85       	ldd	r24, Y+14	; 0x0e
    3646:	81 30       	cpi	r24, 0x01	; 1
    3648:	49 f4       	brne	.+18     	; 0x365c <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    364a:	ff ef       	ldi	r31, 0xFF	; 255
    364c:	27 e8       	ldi	r18, 0x87	; 135
    364e:	83 e1       	ldi	r24, 0x13	; 19
    3650:	f1 50       	subi	r31, 0x01	; 1
    3652:	20 40       	sbci	r18, 0x00	; 0
    3654:	80 40       	sbci	r24, 0x00	; 0
    3656:	e1 f7       	brne	.-8      	; 0x3650 <_ZN16CLaserControlApp6OnINT0Ev+0xa6>
    3658:	00 c0       	rjmp	.+0      	; 0x365a <_ZN16CLaserControlApp6OnINT0Ev+0xb0>
    365a:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    365c:	e0 e4       	ldi	r30, 0x40	; 64
    365e:	f6 e0       	ldi	r31, 0x06	; 6
    3660:	84 85       	ldd	r24, Z+12	; 0x0c
    3662:	8e 7f       	andi	r24, 0xFE	; 254
    3664:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <__data_end>
    366c:	0a c0       	rjmp	.+20     	; 0x3682 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    366e:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <__data_end>
				
				StopLaser();
    3672:	ce 01       	movw	r24, r28
    3674:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN16CLaserControlApp9StopLaserEv>
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <_ZN16CLaserControlApp6OnINT0Ev+0xd8>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    367a:	8e 85       	ldd	r24, Y+14	; 0x0e
    367c:	81 30       	cpi	r24, 0x01	; 1
    367e:	99 f6       	brne	.-90     	; 0x3626 <_ZN16CLaserControlApp6OnINT0Ev+0x7c>
    3680:	b2 cf       	rjmp	.-156    	; 0x35e6 <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	08 95       	ret

00003688 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    3688:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN16CLaserControlApp6OnINT0Ev>
    368c:	08 95       	ret

0000368e <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    368e:	cf 92       	push	r12
    3690:	df 92       	push	r13
    3692:	ef 92       	push	r14
    3694:	ff 92       	push	r15
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	7c 01       	movw	r14, r24
    36a0:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    36a2:	41 15       	cp	r20, r1
    36a4:	51 05       	cpc	r21, r1
    36a6:	b1 f0       	breq	.+44     	; 0x36d4 <_Z11ConvertDataPvS_jj+0x46>
    36a8:	6b 01       	movw	r12, r22
    36aa:	c4 0e       	add	r12, r20
    36ac:	d5 1e       	adc	r13, r21
    36ae:	eb 01       	movw	r28, r22
    36b0:	26 1b       	sub	r18, r22
    36b2:	37 0b       	sbc	r19, r23
    36b4:	c9 01       	movw	r24, r18
    36b6:	8c 0f       	add	r24, r28
    36b8:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    36ba:	b8 01       	movw	r22, r16
    36bc:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    36c0:	fc 01       	movw	r30, r24
    36c2:	41 e0       	ldi	r20, 0x01	; 1
    36c4:	e4 27       	eor	r30, r20
    36c6:	ee 0d       	add	r30, r14
    36c8:	ff 1d       	adc	r31, r15
    36ca:	89 91       	ld	r24, Y+
    36cc:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    36ce:	cc 15       	cp	r28, r12
    36d0:	dd 05       	cpc	r29, r13
    36d2:	81 f7       	brne	.-32     	; 0x36b4 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	ff 90       	pop	r15
    36de:	ef 90       	pop	r14
    36e0:	df 90       	pop	r13
    36e2:	cf 90       	pop	r12
    36e4:	08 95       	ret

000036e6 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    36e6:	68 17       	cp	r22, r24
    36e8:	79 07       	cpc	r23, r25
    36ea:	08 f4       	brcc	.+2      	; 0x36ee <_Z3minjj+0x8>
    36ec:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    36ee:	08 95       	ret

000036f0 <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    36f0:	86 17       	cp	r24, r22
    36f2:	97 07       	cpc	r25, r23
    36f4:	08 f4       	brcc	.+2      	; 0x36f8 <_Z3maxjj+0x8>
    36f6:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    36f8:	08 95       	ret

000036fa <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    36fa:	98 27       	eor	r25, r24
    36fc:	89 27       	eor	r24, r25
    36fe:	98 27       	eor	r25, r24
    3700:	08 95       	ret

00003702 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    3702:	9b 01       	movw	r18, r22
    3704:	bc 01       	movw	r22, r24
    3706:	c9 01       	movw	r24, r18
}
    3708:	08 95       	ret

0000370a <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    370a:	08 95       	ret

0000370c <_ZN4CSPID1Ev>:
    370c:	08 95       	ret

0000370e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    370e:	ef 92       	push	r14
    3710:	0f 93       	push	r16
    3712:	1f 93       	push	r17
    3714:	cf 93       	push	r28
    3716:	df 93       	push	r29
    3718:	ec 01       	movw	r28, r24
    371a:	e0 e8       	ldi	r30, 0x80	; 128
    371c:	f6 e0       	ldi	r31, 0x06	; 6
    371e:	90 eb       	ldi	r25, 0xB0	; 176
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	80 ec       	ldi	r24, 0xC0	; 192
    3724:	84 8b       	std	Z+20, r24	; 0x14
    3726:	85 8b       	std	Z+21, r24	; 0x15
    3728:	87 8b       	std	Z+23, r24	; 0x17
    372a:	95 83       	std	Z+5, r25	; 0x05
    372c:	61 11       	cpse	r22, r1
    372e:	02 c0       	rjmp	.+4      	; 0x3734 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    3730:	80 e4       	ldi	r24, 0x40	; 64
    3732:	01 c0       	rjmp	.+2      	; 0x3736 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    3734:	80 e5       	ldi	r24, 0x50	; 80
    3736:	01 11       	cpse	r16, r1
    3738:	02 c0       	rjmp	.+4      	; 0x373e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	01 c0       	rjmp	.+2      	; 0x3740 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    373e:	30 e8       	ldi	r19, 0x80	; 128
    3740:	41 11       	cpse	r20, r1
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	01 c0       	rjmp	.+2      	; 0x374a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    3748:	90 e2       	ldi	r25, 0x20	; 32
    374a:	22 0f       	add	r18, r18
    374c:	22 0f       	add	r18, r18
    374e:	e2 2a       	or	r14, r18
    3750:	e8 2a       	or	r14, r24
    3752:	e3 2a       	or	r14, r19
    3754:	e9 2a       	or	r14, r25
    3756:	00 ec       	ldi	r16, 0xC0	; 192
    3758:	1a e0       	ldi	r17, 0x0A	; 10
    375a:	f8 01       	movw	r30, r16
    375c:	e0 82       	st	Z, r14
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <malloc>
    3766:	88 83       	st	Y, r24
    3768:	99 83       	std	Y+1, r25	; 0x01
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	f8 01       	movw	r30, r16
    376e:	81 83       	std	Z+1, r24	; 0x01
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	9c e1       	ldi	r25, 0x1C	; 28
    3774:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <InterruptFuncTable+0x72>
    3778:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <InterruptFuncTable+0x73>
    377c:	c0 93 2e 24 	sts	0x242E, r28	; 0x80242e <InterruptSenderTable+0x72>
    3780:	d0 93 2f 24 	sts	0x242F, r29	; 0x80242f <InterruptSenderTable+0x73>
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	ef 90       	pop	r14
    378e:	08 95       	ret

00003790 <_ZN4CSPI4SendEPhj>:
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	ec 01       	movw	r28, r24
    3796:	4a 83       	std	Y+2, r20	; 0x02
    3798:	5b 83       	std	Y+3, r21	; 0x03
    379a:	4c 83       	std	Y+4, r20	; 0x04
    379c:	5d 83       	std	Y+5, r21	; 0x05
    379e:	88 81       	ld	r24, Y
    37a0:	99 81       	ldd	r25, Y+1	; 0x01
    37a2:	0e 94 12 40 	call	0x8024	; 0x8024 <memcpy>
    37a6:	80 e1       	ldi	r24, 0x10	; 16
    37a8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    37ac:	88 81       	ld	r24, Y
    37ae:	99 81       	ldd	r25, Y+1	; 0x01
    37b0:	4a 81       	ldd	r20, Y+2	; 0x02
    37b2:	5b 81       	ldd	r21, Y+3	; 0x03
    37b4:	9a 01       	movw	r18, r20
    37b6:	21 50       	subi	r18, 0x01	; 1
    37b8:	31 09       	sbc	r19, r1
    37ba:	2a 83       	std	Y+2, r18	; 0x02
    37bc:	3b 83       	std	Y+3, r19	; 0x03
    37be:	fc 01       	movw	r30, r24
    37c0:	e2 0f       	add	r30, r18
    37c2:	f3 1f       	adc	r31, r19
    37c4:	80 81       	ld	r24, Z
    37c6:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	08 95       	ret

000037d0 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    37d0:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    37d2:	82 81       	ldd	r24, Z+2	; 0x02
    37d4:	93 81       	ldd	r25, Z+3	; 0x03
    37d6:	89 2b       	or	r24, r25
    37d8:	79 f0       	breq	.+30     	; 0x37f8 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    37da:	40 81       	ld	r20, Z
    37dc:	51 81       	ldd	r21, Z+1	; 0x01
    37de:	22 81       	ldd	r18, Z+2	; 0x02
    37e0:	33 81       	ldd	r19, Z+3	; 0x03
    37e2:	c9 01       	movw	r24, r18
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	82 83       	std	Z+2, r24	; 0x02
    37e8:	93 83       	std	Z+3, r25	; 0x03
    37ea:	fa 01       	movw	r30, r20
    37ec:	e8 0f       	add	r30, r24
    37ee:	f9 1f       	adc	r31, r25
    37f0:	80 81       	ld	r24, Z
    37f2:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    37f6:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    37f8:	80 e1       	ldi	r24, 0x10	; 16
    37fa:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    37fe:	08 95       	ret

00003800 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    3800:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_ZN4CSPI10OnTransmitEv>
    3804:	08 95       	ret

00003806 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    3806:	24 e9       	ldi	r18, 0x94	; 148
    3808:	31 e2       	ldi	r19, 0x21	; 33
    380a:	fc 01       	movw	r30, r24
    380c:	20 83       	st	Z, r18
    380e:	31 83       	std	Z+1, r19	; 0x01
    3810:	08 95       	ret

00003812 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    3812:	08 95       	ret

00003814 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    3814:	28 eb       	ldi	r18, 0xB8	; 184
    3816:	31 e2       	ldi	r19, 0x21	; 33
    3818:	fc 01       	movw	r30, r24
    381a:	20 83       	st	Z, r18
    381c:	31 83       	std	Z+1, r19	; 0x01
    381e:	08 95       	ret

00003820 <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    3820:	08 95       	ret

00003822 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    3822:	26 ed       	ldi	r18, 0xD6	; 214
    3824:	31 e2       	ldi	r19, 0x21	; 33
    3826:	fc 01       	movw	r30, r24
    3828:	20 83       	st	Z, r18
    382a:	31 83       	std	Z+1, r19	; 0x01
    382c:	08 95       	ret

0000382e <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    382e:	08 95       	ret

00003830 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    3830:	1f 92       	push	r1
    3832:	0f 92       	push	r0
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	0f 92       	push	r0
    3838:	11 24       	eor	r1, r1
    383a:	0b b6       	in	r0, 0x3b	; 59
    383c:	0f 92       	push	r0
    383e:	2f 93       	push	r18
    3840:	3f 93       	push	r19
    3842:	4f 93       	push	r20
    3844:	5f 93       	push	r21
    3846:	6f 93       	push	r22
    3848:	7f 93       	push	r23
    384a:	8f 93       	push	r24
    384c:	9f 93       	push	r25
    384e:	af 93       	push	r26
    3850:	bf 93       	push	r27
    3852:	ef 93       	push	r30
    3854:	ff 93       	push	r31
    3856:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <InterruptFuncTable+0x2>
    385a:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <InterruptFuncTable+0x3>
    385e:	30 97       	sbiw	r30, 0x00	; 0
    3860:	29 f0       	breq	.+10     	; 0x386c <__vector_1+0x3c>
    3862:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <InterruptSenderTable+0x2>
    3866:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <InterruptSenderTable+0x3>
    386a:	19 95       	eicall
    386c:	ff 91       	pop	r31
    386e:	ef 91       	pop	r30
    3870:	bf 91       	pop	r27
    3872:	af 91       	pop	r26
    3874:	9f 91       	pop	r25
    3876:	8f 91       	pop	r24
    3878:	7f 91       	pop	r23
    387a:	6f 91       	pop	r22
    387c:	5f 91       	pop	r21
    387e:	4f 91       	pop	r20
    3880:	3f 91       	pop	r19
    3882:	2f 91       	pop	r18
    3884:	0f 90       	pop	r0
    3886:	0b be       	out	0x3b, r0	; 59
    3888:	0f 90       	pop	r0
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	0f 90       	pop	r0
    388e:	1f 90       	pop	r1
    3890:	18 95       	reti

00003892 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    3892:	1f 92       	push	r1
    3894:	0f 92       	push	r0
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	0f 92       	push	r0
    389a:	11 24       	eor	r1, r1
    389c:	0b b6       	in	r0, 0x3b	; 59
    389e:	0f 92       	push	r0
    38a0:	2f 93       	push	r18
    38a2:	3f 93       	push	r19
    38a4:	4f 93       	push	r20
    38a6:	5f 93       	push	r21
    38a8:	6f 93       	push	r22
    38aa:	7f 93       	push	r23
    38ac:	8f 93       	push	r24
    38ae:	9f 93       	push	r25
    38b0:	af 93       	push	r26
    38b2:	bf 93       	push	r27
    38b4:	ef 93       	push	r30
    38b6:	ff 93       	push	r31
    38b8:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <InterruptFuncTable+0x4>
    38bc:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <InterruptFuncTable+0x5>
    38c0:	30 97       	sbiw	r30, 0x00	; 0
    38c2:	29 f0       	breq	.+10     	; 0x38ce <__vector_2+0x3c>
    38c4:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <InterruptSenderTable+0x4>
    38c8:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <InterruptSenderTable+0x5>
    38cc:	19 95       	eicall
    38ce:	ff 91       	pop	r31
    38d0:	ef 91       	pop	r30
    38d2:	bf 91       	pop	r27
    38d4:	af 91       	pop	r26
    38d6:	9f 91       	pop	r25
    38d8:	8f 91       	pop	r24
    38da:	7f 91       	pop	r23
    38dc:	6f 91       	pop	r22
    38de:	5f 91       	pop	r21
    38e0:	4f 91       	pop	r20
    38e2:	3f 91       	pop	r19
    38e4:	2f 91       	pop	r18
    38e6:	0f 90       	pop	r0
    38e8:	0b be       	out	0x3b, r0	; 59
    38ea:	0f 90       	pop	r0
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	0f 90       	pop	r0
    38f0:	1f 90       	pop	r1
    38f2:	18 95       	reti

000038f4 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    38f4:	1f 92       	push	r1
    38f6:	0f 92       	push	r0
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	0f 92       	push	r0
    38fc:	11 24       	eor	r1, r1
    38fe:	0b b6       	in	r0, 0x3b	; 59
    3900:	0f 92       	push	r0
    3902:	2f 93       	push	r18
    3904:	3f 93       	push	r19
    3906:	4f 93       	push	r20
    3908:	5f 93       	push	r21
    390a:	6f 93       	push	r22
    390c:	7f 93       	push	r23
    390e:	8f 93       	push	r24
    3910:	9f 93       	push	r25
    3912:	af 93       	push	r26
    3914:	bf 93       	push	r27
    3916:	ef 93       	push	r30
    3918:	ff 93       	push	r31
    391a:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <InterruptFuncTable+0x6>
    391e:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <InterruptFuncTable+0x7>
    3922:	30 97       	sbiw	r30, 0x00	; 0
    3924:	29 f0       	breq	.+10     	; 0x3930 <__vector_3+0x3c>
    3926:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <InterruptSenderTable+0x6>
    392a:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <InterruptSenderTable+0x7>
    392e:	19 95       	eicall
    3930:	ff 91       	pop	r31
    3932:	ef 91       	pop	r30
    3934:	bf 91       	pop	r27
    3936:	af 91       	pop	r26
    3938:	9f 91       	pop	r25
    393a:	8f 91       	pop	r24
    393c:	7f 91       	pop	r23
    393e:	6f 91       	pop	r22
    3940:	5f 91       	pop	r21
    3942:	4f 91       	pop	r20
    3944:	3f 91       	pop	r19
    3946:	2f 91       	pop	r18
    3948:	0f 90       	pop	r0
    394a:	0b be       	out	0x3b, r0	; 59
    394c:	0f 90       	pop	r0
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	0f 90       	pop	r0
    3952:	1f 90       	pop	r1
    3954:	18 95       	reti

00003956 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    3956:	1f 92       	push	r1
    3958:	0f 92       	push	r0
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	0f 92       	push	r0
    395e:	11 24       	eor	r1, r1
    3960:	0b b6       	in	r0, 0x3b	; 59
    3962:	0f 92       	push	r0
    3964:	2f 93       	push	r18
    3966:	3f 93       	push	r19
    3968:	4f 93       	push	r20
    396a:	5f 93       	push	r21
    396c:	6f 93       	push	r22
    396e:	7f 93       	push	r23
    3970:	8f 93       	push	r24
    3972:	9f 93       	push	r25
    3974:	af 93       	push	r26
    3976:	bf 93       	push	r27
    3978:	ef 93       	push	r30
    397a:	ff 93       	push	r31
    397c:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <InterruptFuncTable+0x8>
    3980:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <InterruptFuncTable+0x9>
    3984:	30 97       	sbiw	r30, 0x00	; 0
    3986:	29 f0       	breq	.+10     	; 0x3992 <__vector_4+0x3c>
    3988:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <InterruptSenderTable+0x8>
    398c:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <InterruptSenderTable+0x9>
    3990:	19 95       	eicall
    3992:	ff 91       	pop	r31
    3994:	ef 91       	pop	r30
    3996:	bf 91       	pop	r27
    3998:	af 91       	pop	r26
    399a:	9f 91       	pop	r25
    399c:	8f 91       	pop	r24
    399e:	7f 91       	pop	r23
    39a0:	6f 91       	pop	r22
    39a2:	5f 91       	pop	r21
    39a4:	4f 91       	pop	r20
    39a6:	3f 91       	pop	r19
    39a8:	2f 91       	pop	r18
    39aa:	0f 90       	pop	r0
    39ac:	0b be       	out	0x3b, r0	; 59
    39ae:	0f 90       	pop	r0
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	0f 90       	pop	r0
    39b4:	1f 90       	pop	r1
    39b6:	18 95       	reti

000039b8 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    39b8:	1f 92       	push	r1
    39ba:	0f 92       	push	r0
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	0f 92       	push	r0
    39c0:	11 24       	eor	r1, r1
    39c2:	0b b6       	in	r0, 0x3b	; 59
    39c4:	0f 92       	push	r0
    39c6:	2f 93       	push	r18
    39c8:	3f 93       	push	r19
    39ca:	4f 93       	push	r20
    39cc:	5f 93       	push	r21
    39ce:	6f 93       	push	r22
    39d0:	7f 93       	push	r23
    39d2:	8f 93       	push	r24
    39d4:	9f 93       	push	r25
    39d6:	af 93       	push	r26
    39d8:	bf 93       	push	r27
    39da:	ef 93       	push	r30
    39dc:	ff 93       	push	r31
    39de:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <InterruptFuncTable+0xa>
    39e2:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <InterruptFuncTable+0xb>
    39e6:	30 97       	sbiw	r30, 0x00	; 0
    39e8:	29 f0       	breq	.+10     	; 0x39f4 <__vector_5+0x3c>
    39ea:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <InterruptSenderTable+0xa>
    39ee:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <InterruptSenderTable+0xb>
    39f2:	19 95       	eicall
    39f4:	ff 91       	pop	r31
    39f6:	ef 91       	pop	r30
    39f8:	bf 91       	pop	r27
    39fa:	af 91       	pop	r26
    39fc:	9f 91       	pop	r25
    39fe:	8f 91       	pop	r24
    3a00:	7f 91       	pop	r23
    3a02:	6f 91       	pop	r22
    3a04:	5f 91       	pop	r21
    3a06:	4f 91       	pop	r20
    3a08:	3f 91       	pop	r19
    3a0a:	2f 91       	pop	r18
    3a0c:	0f 90       	pop	r0
    3a0e:	0b be       	out	0x3b, r0	; 59
    3a10:	0f 90       	pop	r0
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	0f 90       	pop	r0
    3a16:	1f 90       	pop	r1
    3a18:	18 95       	reti

00003a1a <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    3a1a:	1f 92       	push	r1
    3a1c:	0f 92       	push	r0
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	0f 92       	push	r0
    3a22:	11 24       	eor	r1, r1
    3a24:	0b b6       	in	r0, 0x3b	; 59
    3a26:	0f 92       	push	r0
    3a28:	2f 93       	push	r18
    3a2a:	3f 93       	push	r19
    3a2c:	4f 93       	push	r20
    3a2e:	5f 93       	push	r21
    3a30:	6f 93       	push	r22
    3a32:	7f 93       	push	r23
    3a34:	8f 93       	push	r24
    3a36:	9f 93       	push	r25
    3a38:	af 93       	push	r26
    3a3a:	bf 93       	push	r27
    3a3c:	ef 93       	push	r30
    3a3e:	ff 93       	push	r31
    3a40:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <InterruptFuncTable+0xc>
    3a44:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <InterruptFuncTable+0xd>
    3a48:	30 97       	sbiw	r30, 0x00	; 0
    3a4a:	29 f0       	breq	.+10     	; 0x3a56 <__vector_6+0x3c>
    3a4c:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <InterruptSenderTable+0xc>
    3a50:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <InterruptSenderTable+0xd>
    3a54:	19 95       	eicall
    3a56:	ff 91       	pop	r31
    3a58:	ef 91       	pop	r30
    3a5a:	bf 91       	pop	r27
    3a5c:	af 91       	pop	r26
    3a5e:	9f 91       	pop	r25
    3a60:	8f 91       	pop	r24
    3a62:	7f 91       	pop	r23
    3a64:	6f 91       	pop	r22
    3a66:	5f 91       	pop	r21
    3a68:	4f 91       	pop	r20
    3a6a:	3f 91       	pop	r19
    3a6c:	2f 91       	pop	r18
    3a6e:	0f 90       	pop	r0
    3a70:	0b be       	out	0x3b, r0	; 59
    3a72:	0f 90       	pop	r0
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	0f 90       	pop	r0
    3a78:	1f 90       	pop	r1
    3a7a:	18 95       	reti

00003a7c <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    3a7c:	1f 92       	push	r1
    3a7e:	0f 92       	push	r0
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	0f 92       	push	r0
    3a84:	11 24       	eor	r1, r1
    3a86:	0b b6       	in	r0, 0x3b	; 59
    3a88:	0f 92       	push	r0
    3a8a:	2f 93       	push	r18
    3a8c:	3f 93       	push	r19
    3a8e:	4f 93       	push	r20
    3a90:	5f 93       	push	r21
    3a92:	6f 93       	push	r22
    3a94:	7f 93       	push	r23
    3a96:	8f 93       	push	r24
    3a98:	9f 93       	push	r25
    3a9a:	af 93       	push	r26
    3a9c:	bf 93       	push	r27
    3a9e:	ef 93       	push	r30
    3aa0:	ff 93       	push	r31
    3aa2:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <InterruptFuncTable+0xe>
    3aa6:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <InterruptFuncTable+0xf>
    3aaa:	30 97       	sbiw	r30, 0x00	; 0
    3aac:	29 f0       	breq	.+10     	; 0x3ab8 <__vector_7+0x3c>
    3aae:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <InterruptSenderTable+0xe>
    3ab2:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <InterruptSenderTable+0xf>
    3ab6:	19 95       	eicall
    3ab8:	ff 91       	pop	r31
    3aba:	ef 91       	pop	r30
    3abc:	bf 91       	pop	r27
    3abe:	af 91       	pop	r26
    3ac0:	9f 91       	pop	r25
    3ac2:	8f 91       	pop	r24
    3ac4:	7f 91       	pop	r23
    3ac6:	6f 91       	pop	r22
    3ac8:	5f 91       	pop	r21
    3aca:	4f 91       	pop	r20
    3acc:	3f 91       	pop	r19
    3ace:	2f 91       	pop	r18
    3ad0:	0f 90       	pop	r0
    3ad2:	0b be       	out	0x3b, r0	; 59
    3ad4:	0f 90       	pop	r0
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	0f 90       	pop	r0
    3ada:	1f 90       	pop	r1
    3adc:	18 95       	reti

00003ade <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    3ade:	1f 92       	push	r1
    3ae0:	0f 92       	push	r0
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	0f 92       	push	r0
    3ae6:	11 24       	eor	r1, r1
    3ae8:	0b b6       	in	r0, 0x3b	; 59
    3aea:	0f 92       	push	r0
    3aec:	2f 93       	push	r18
    3aee:	3f 93       	push	r19
    3af0:	4f 93       	push	r20
    3af2:	5f 93       	push	r21
    3af4:	6f 93       	push	r22
    3af6:	7f 93       	push	r23
    3af8:	8f 93       	push	r24
    3afa:	9f 93       	push	r25
    3afc:	af 93       	push	r26
    3afe:	bf 93       	push	r27
    3b00:	ef 93       	push	r30
    3b02:	ff 93       	push	r31
    3b04:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <InterruptFuncTable+0x10>
    3b08:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <InterruptFuncTable+0x11>
    3b0c:	30 97       	sbiw	r30, 0x00	; 0
    3b0e:	29 f0       	breq	.+10     	; 0x3b1a <__vector_8+0x3c>
    3b10:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <InterruptSenderTable+0x10>
    3b14:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <InterruptSenderTable+0x11>
    3b18:	19 95       	eicall
    3b1a:	ff 91       	pop	r31
    3b1c:	ef 91       	pop	r30
    3b1e:	bf 91       	pop	r27
    3b20:	af 91       	pop	r26
    3b22:	9f 91       	pop	r25
    3b24:	8f 91       	pop	r24
    3b26:	7f 91       	pop	r23
    3b28:	6f 91       	pop	r22
    3b2a:	5f 91       	pop	r21
    3b2c:	4f 91       	pop	r20
    3b2e:	3f 91       	pop	r19
    3b30:	2f 91       	pop	r18
    3b32:	0f 90       	pop	r0
    3b34:	0b be       	out	0x3b, r0	; 59
    3b36:	0f 90       	pop	r0
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	0f 90       	pop	r0
    3b3c:	1f 90       	pop	r1
    3b3e:	18 95       	reti

00003b40 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    3b40:	1f 92       	push	r1
    3b42:	0f 92       	push	r0
    3b44:	0f b6       	in	r0, 0x3f	; 63
    3b46:	0f 92       	push	r0
    3b48:	11 24       	eor	r1, r1
    3b4a:	0b b6       	in	r0, 0x3b	; 59
    3b4c:	0f 92       	push	r0
    3b4e:	2f 93       	push	r18
    3b50:	3f 93       	push	r19
    3b52:	4f 93       	push	r20
    3b54:	5f 93       	push	r21
    3b56:	6f 93       	push	r22
    3b58:	7f 93       	push	r23
    3b5a:	8f 93       	push	r24
    3b5c:	9f 93       	push	r25
    3b5e:	af 93       	push	r26
    3b60:	bf 93       	push	r27
    3b62:	ef 93       	push	r30
    3b64:	ff 93       	push	r31
    3b66:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <InterruptFuncTable+0x12>
    3b6a:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <InterruptFuncTable+0x13>
    3b6e:	30 97       	sbiw	r30, 0x00	; 0
    3b70:	29 f0       	breq	.+10     	; 0x3b7c <__vector_9+0x3c>
    3b72:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <InterruptSenderTable+0x12>
    3b76:	90 91 cf 23 	lds	r25, 0x23CF	; 0x8023cf <InterruptSenderTable+0x13>
    3b7a:	19 95       	eicall
    3b7c:	ff 91       	pop	r31
    3b7e:	ef 91       	pop	r30
    3b80:	bf 91       	pop	r27
    3b82:	af 91       	pop	r26
    3b84:	9f 91       	pop	r25
    3b86:	8f 91       	pop	r24
    3b88:	7f 91       	pop	r23
    3b8a:	6f 91       	pop	r22
    3b8c:	5f 91       	pop	r21
    3b8e:	4f 91       	pop	r20
    3b90:	3f 91       	pop	r19
    3b92:	2f 91       	pop	r18
    3b94:	0f 90       	pop	r0
    3b96:	0b be       	out	0x3b, r0	; 59
    3b98:	0f 90       	pop	r0
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	0f 90       	pop	r0
    3b9e:	1f 90       	pop	r1
    3ba0:	18 95       	reti

00003ba2 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    3ba2:	1f 92       	push	r1
    3ba4:	0f 92       	push	r0
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	0f 92       	push	r0
    3baa:	11 24       	eor	r1, r1
    3bac:	0b b6       	in	r0, 0x3b	; 59
    3bae:	0f 92       	push	r0
    3bb0:	2f 93       	push	r18
    3bb2:	3f 93       	push	r19
    3bb4:	4f 93       	push	r20
    3bb6:	5f 93       	push	r21
    3bb8:	6f 93       	push	r22
    3bba:	7f 93       	push	r23
    3bbc:	8f 93       	push	r24
    3bbe:	9f 93       	push	r25
    3bc0:	af 93       	push	r26
    3bc2:	bf 93       	push	r27
    3bc4:	ef 93       	push	r30
    3bc6:	ff 93       	push	r31
    3bc8:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <InterruptFuncTable+0x14>
    3bcc:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <InterruptFuncTable+0x15>
    3bd0:	30 97       	sbiw	r30, 0x00	; 0
    3bd2:	29 f0       	breq	.+10     	; 0x3bde <__vector_10+0x3c>
    3bd4:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <InterruptSenderTable+0x14>
    3bd8:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <InterruptSenderTable+0x15>
    3bdc:	19 95       	eicall
    3bde:	ff 91       	pop	r31
    3be0:	ef 91       	pop	r30
    3be2:	bf 91       	pop	r27
    3be4:	af 91       	pop	r26
    3be6:	9f 91       	pop	r25
    3be8:	8f 91       	pop	r24
    3bea:	7f 91       	pop	r23
    3bec:	6f 91       	pop	r22
    3bee:	5f 91       	pop	r21
    3bf0:	4f 91       	pop	r20
    3bf2:	3f 91       	pop	r19
    3bf4:	2f 91       	pop	r18
    3bf6:	0f 90       	pop	r0
    3bf8:	0b be       	out	0x3b, r0	; 59
    3bfa:	0f 90       	pop	r0
    3bfc:	0f be       	out	0x3f, r0	; 63
    3bfe:	0f 90       	pop	r0
    3c00:	1f 90       	pop	r1
    3c02:	18 95       	reti

00003c04 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    3c04:	1f 92       	push	r1
    3c06:	0f 92       	push	r0
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	0f 92       	push	r0
    3c0c:	11 24       	eor	r1, r1
    3c0e:	0b b6       	in	r0, 0x3b	; 59
    3c10:	0f 92       	push	r0
    3c12:	2f 93       	push	r18
    3c14:	3f 93       	push	r19
    3c16:	4f 93       	push	r20
    3c18:	5f 93       	push	r21
    3c1a:	6f 93       	push	r22
    3c1c:	7f 93       	push	r23
    3c1e:	8f 93       	push	r24
    3c20:	9f 93       	push	r25
    3c22:	af 93       	push	r26
    3c24:	bf 93       	push	r27
    3c26:	ef 93       	push	r30
    3c28:	ff 93       	push	r31
    3c2a:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <InterruptFuncTable+0x16>
    3c2e:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <InterruptFuncTable+0x17>
    3c32:	30 97       	sbiw	r30, 0x00	; 0
    3c34:	29 f0       	breq	.+10     	; 0x3c40 <__vector_11+0x3c>
    3c36:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <InterruptSenderTable+0x16>
    3c3a:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <InterruptSenderTable+0x17>
    3c3e:	19 95       	eicall
    3c40:	ff 91       	pop	r31
    3c42:	ef 91       	pop	r30
    3c44:	bf 91       	pop	r27
    3c46:	af 91       	pop	r26
    3c48:	9f 91       	pop	r25
    3c4a:	8f 91       	pop	r24
    3c4c:	7f 91       	pop	r23
    3c4e:	6f 91       	pop	r22
    3c50:	5f 91       	pop	r21
    3c52:	4f 91       	pop	r20
    3c54:	3f 91       	pop	r19
    3c56:	2f 91       	pop	r18
    3c58:	0f 90       	pop	r0
    3c5a:	0b be       	out	0x3b, r0	; 59
    3c5c:	0f 90       	pop	r0
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	0f 90       	pop	r0
    3c62:	1f 90       	pop	r1
    3c64:	18 95       	reti

00003c66 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    3c66:	1f 92       	push	r1
    3c68:	0f 92       	push	r0
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	0f 92       	push	r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	0b b6       	in	r0, 0x3b	; 59
    3c72:	0f 92       	push	r0
    3c74:	2f 93       	push	r18
    3c76:	3f 93       	push	r19
    3c78:	4f 93       	push	r20
    3c7a:	5f 93       	push	r21
    3c7c:	6f 93       	push	r22
    3c7e:	7f 93       	push	r23
    3c80:	8f 93       	push	r24
    3c82:	9f 93       	push	r25
    3c84:	af 93       	push	r26
    3c86:	bf 93       	push	r27
    3c88:	ef 93       	push	r30
    3c8a:	ff 93       	push	r31
    3c8c:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <InterruptFuncTable+0x18>
    3c90:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <InterruptFuncTable+0x19>
    3c94:	30 97       	sbiw	r30, 0x00	; 0
    3c96:	29 f0       	breq	.+10     	; 0x3ca2 <__vector_12+0x3c>
    3c98:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <InterruptSenderTable+0x18>
    3c9c:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <InterruptSenderTable+0x19>
    3ca0:	19 95       	eicall
    3ca2:	ff 91       	pop	r31
    3ca4:	ef 91       	pop	r30
    3ca6:	bf 91       	pop	r27
    3ca8:	af 91       	pop	r26
    3caa:	9f 91       	pop	r25
    3cac:	8f 91       	pop	r24
    3cae:	7f 91       	pop	r23
    3cb0:	6f 91       	pop	r22
    3cb2:	5f 91       	pop	r21
    3cb4:	4f 91       	pop	r20
    3cb6:	3f 91       	pop	r19
    3cb8:	2f 91       	pop	r18
    3cba:	0f 90       	pop	r0
    3cbc:	0b be       	out	0x3b, r0	; 59
    3cbe:	0f 90       	pop	r0
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	0f 90       	pop	r0
    3cc4:	1f 90       	pop	r1
    3cc6:	18 95       	reti

00003cc8 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    3cc8:	1f 92       	push	r1
    3cca:	0f 92       	push	r0
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	0f 92       	push	r0
    3cd0:	11 24       	eor	r1, r1
    3cd2:	0b b6       	in	r0, 0x3b	; 59
    3cd4:	0f 92       	push	r0
    3cd6:	2f 93       	push	r18
    3cd8:	3f 93       	push	r19
    3cda:	4f 93       	push	r20
    3cdc:	5f 93       	push	r21
    3cde:	6f 93       	push	r22
    3ce0:	7f 93       	push	r23
    3ce2:	8f 93       	push	r24
    3ce4:	9f 93       	push	r25
    3ce6:	af 93       	push	r26
    3ce8:	bf 93       	push	r27
    3cea:	ef 93       	push	r30
    3cec:	ff 93       	push	r31
    3cee:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <InterruptFuncTable+0x1a>
    3cf2:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <InterruptFuncTable+0x1b>
    3cf6:	30 97       	sbiw	r30, 0x00	; 0
    3cf8:	29 f0       	breq	.+10     	; 0x3d04 <__vector_13+0x3c>
    3cfa:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <InterruptSenderTable+0x1a>
    3cfe:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <InterruptSenderTable+0x1b>
    3d02:	19 95       	eicall
    3d04:	ff 91       	pop	r31
    3d06:	ef 91       	pop	r30
    3d08:	bf 91       	pop	r27
    3d0a:	af 91       	pop	r26
    3d0c:	9f 91       	pop	r25
    3d0e:	8f 91       	pop	r24
    3d10:	7f 91       	pop	r23
    3d12:	6f 91       	pop	r22
    3d14:	5f 91       	pop	r21
    3d16:	4f 91       	pop	r20
    3d18:	3f 91       	pop	r19
    3d1a:	2f 91       	pop	r18
    3d1c:	0f 90       	pop	r0
    3d1e:	0b be       	out	0x3b, r0	; 59
    3d20:	0f 90       	pop	r0
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	0f 90       	pop	r0
    3d26:	1f 90       	pop	r1
    3d28:	18 95       	reti

00003d2a <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    3d2a:	1f 92       	push	r1
    3d2c:	0f 92       	push	r0
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	0f 92       	push	r0
    3d32:	11 24       	eor	r1, r1
    3d34:	0b b6       	in	r0, 0x3b	; 59
    3d36:	0f 92       	push	r0
    3d38:	2f 93       	push	r18
    3d3a:	3f 93       	push	r19
    3d3c:	4f 93       	push	r20
    3d3e:	5f 93       	push	r21
    3d40:	6f 93       	push	r22
    3d42:	7f 93       	push	r23
    3d44:	8f 93       	push	r24
    3d46:	9f 93       	push	r25
    3d48:	af 93       	push	r26
    3d4a:	bf 93       	push	r27
    3d4c:	ef 93       	push	r30
    3d4e:	ff 93       	push	r31
    3d50:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <InterruptFuncTable+0x1c>
    3d54:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <InterruptFuncTable+0x1d>
    3d58:	30 97       	sbiw	r30, 0x00	; 0
    3d5a:	29 f0       	breq	.+10     	; 0x3d66 <__vector_14+0x3c>
    3d5c:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <InterruptSenderTable+0x1c>
    3d60:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <InterruptSenderTable+0x1d>
    3d64:	19 95       	eicall
    3d66:	ff 91       	pop	r31
    3d68:	ef 91       	pop	r30
    3d6a:	bf 91       	pop	r27
    3d6c:	af 91       	pop	r26
    3d6e:	9f 91       	pop	r25
    3d70:	8f 91       	pop	r24
    3d72:	7f 91       	pop	r23
    3d74:	6f 91       	pop	r22
    3d76:	5f 91       	pop	r21
    3d78:	4f 91       	pop	r20
    3d7a:	3f 91       	pop	r19
    3d7c:	2f 91       	pop	r18
    3d7e:	0f 90       	pop	r0
    3d80:	0b be       	out	0x3b, r0	; 59
    3d82:	0f 90       	pop	r0
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	0f 90       	pop	r0
    3d88:	1f 90       	pop	r1
    3d8a:	18 95       	reti

00003d8c <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    3d8c:	1f 92       	push	r1
    3d8e:	0f 92       	push	r0
    3d90:	0f b6       	in	r0, 0x3f	; 63
    3d92:	0f 92       	push	r0
    3d94:	11 24       	eor	r1, r1
    3d96:	0b b6       	in	r0, 0x3b	; 59
    3d98:	0f 92       	push	r0
    3d9a:	2f 93       	push	r18
    3d9c:	3f 93       	push	r19
    3d9e:	4f 93       	push	r20
    3da0:	5f 93       	push	r21
    3da2:	6f 93       	push	r22
    3da4:	7f 93       	push	r23
    3da6:	8f 93       	push	r24
    3da8:	9f 93       	push	r25
    3daa:	af 93       	push	r26
    3dac:	bf 93       	push	r27
    3dae:	ef 93       	push	r30
    3db0:	ff 93       	push	r31
    3db2:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <InterruptFuncTable+0x1e>
    3db6:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <InterruptFuncTable+0x1f>
    3dba:	30 97       	sbiw	r30, 0x00	; 0
    3dbc:	29 f0       	breq	.+10     	; 0x3dc8 <__vector_15+0x3c>
    3dbe:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <InterruptSenderTable+0x1e>
    3dc2:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <InterruptSenderTable+0x1f>
    3dc6:	19 95       	eicall
    3dc8:	ff 91       	pop	r31
    3dca:	ef 91       	pop	r30
    3dcc:	bf 91       	pop	r27
    3dce:	af 91       	pop	r26
    3dd0:	9f 91       	pop	r25
    3dd2:	8f 91       	pop	r24
    3dd4:	7f 91       	pop	r23
    3dd6:	6f 91       	pop	r22
    3dd8:	5f 91       	pop	r21
    3dda:	4f 91       	pop	r20
    3ddc:	3f 91       	pop	r19
    3dde:	2f 91       	pop	r18
    3de0:	0f 90       	pop	r0
    3de2:	0b be       	out	0x3b, r0	; 59
    3de4:	0f 90       	pop	r0
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	0f 90       	pop	r0
    3dea:	1f 90       	pop	r1
    3dec:	18 95       	reti

00003dee <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    3dee:	1f 92       	push	r1
    3df0:	0f 92       	push	r0
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	0f 92       	push	r0
    3df6:	11 24       	eor	r1, r1
    3df8:	0b b6       	in	r0, 0x3b	; 59
    3dfa:	0f 92       	push	r0
    3dfc:	2f 93       	push	r18
    3dfe:	3f 93       	push	r19
    3e00:	4f 93       	push	r20
    3e02:	5f 93       	push	r21
    3e04:	6f 93       	push	r22
    3e06:	7f 93       	push	r23
    3e08:	8f 93       	push	r24
    3e0a:	9f 93       	push	r25
    3e0c:	af 93       	push	r26
    3e0e:	bf 93       	push	r27
    3e10:	ef 93       	push	r30
    3e12:	ff 93       	push	r31
    3e14:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <InterruptFuncTable+0x20>
    3e18:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <InterruptFuncTable+0x21>
    3e1c:	30 97       	sbiw	r30, 0x00	; 0
    3e1e:	29 f0       	breq	.+10     	; 0x3e2a <__vector_16+0x3c>
    3e20:	80 91 dc 23 	lds	r24, 0x23DC	; 0x8023dc <InterruptSenderTable+0x20>
    3e24:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <InterruptSenderTable+0x21>
    3e28:	19 95       	eicall
    3e2a:	ff 91       	pop	r31
    3e2c:	ef 91       	pop	r30
    3e2e:	bf 91       	pop	r27
    3e30:	af 91       	pop	r26
    3e32:	9f 91       	pop	r25
    3e34:	8f 91       	pop	r24
    3e36:	7f 91       	pop	r23
    3e38:	6f 91       	pop	r22
    3e3a:	5f 91       	pop	r21
    3e3c:	4f 91       	pop	r20
    3e3e:	3f 91       	pop	r19
    3e40:	2f 91       	pop	r18
    3e42:	0f 90       	pop	r0
    3e44:	0b be       	out	0x3b, r0	; 59
    3e46:	0f 90       	pop	r0
    3e48:	0f be       	out	0x3f, r0	; 63
    3e4a:	0f 90       	pop	r0
    3e4c:	1f 90       	pop	r1
    3e4e:	18 95       	reti

00003e50 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    3e50:	1f 92       	push	r1
    3e52:	0f 92       	push	r0
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	0f 92       	push	r0
    3e58:	11 24       	eor	r1, r1
    3e5a:	0b b6       	in	r0, 0x3b	; 59
    3e5c:	0f 92       	push	r0
    3e5e:	2f 93       	push	r18
    3e60:	3f 93       	push	r19
    3e62:	4f 93       	push	r20
    3e64:	5f 93       	push	r21
    3e66:	6f 93       	push	r22
    3e68:	7f 93       	push	r23
    3e6a:	8f 93       	push	r24
    3e6c:	9f 93       	push	r25
    3e6e:	af 93       	push	r26
    3e70:	bf 93       	push	r27
    3e72:	ef 93       	push	r30
    3e74:	ff 93       	push	r31
    3e76:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <InterruptFuncTable+0x22>
    3e7a:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <InterruptFuncTable+0x23>
    3e7e:	30 97       	sbiw	r30, 0x00	; 0
    3e80:	29 f0       	breq	.+10     	; 0x3e8c <__vector_17+0x3c>
    3e82:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <InterruptSenderTable+0x22>
    3e86:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <InterruptSenderTable+0x23>
    3e8a:	19 95       	eicall
    3e8c:	ff 91       	pop	r31
    3e8e:	ef 91       	pop	r30
    3e90:	bf 91       	pop	r27
    3e92:	af 91       	pop	r26
    3e94:	9f 91       	pop	r25
    3e96:	8f 91       	pop	r24
    3e98:	7f 91       	pop	r23
    3e9a:	6f 91       	pop	r22
    3e9c:	5f 91       	pop	r21
    3e9e:	4f 91       	pop	r20
    3ea0:	3f 91       	pop	r19
    3ea2:	2f 91       	pop	r18
    3ea4:	0f 90       	pop	r0
    3ea6:	0b be       	out	0x3b, r0	; 59
    3ea8:	0f 90       	pop	r0
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	0f 90       	pop	r0
    3eae:	1f 90       	pop	r1
    3eb0:	18 95       	reti

00003eb2 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    3eb2:	1f 92       	push	r1
    3eb4:	0f 92       	push	r0
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	0f 92       	push	r0
    3eba:	11 24       	eor	r1, r1
    3ebc:	0b b6       	in	r0, 0x3b	; 59
    3ebe:	0f 92       	push	r0
    3ec0:	2f 93       	push	r18
    3ec2:	3f 93       	push	r19
    3ec4:	4f 93       	push	r20
    3ec6:	5f 93       	push	r21
    3ec8:	6f 93       	push	r22
    3eca:	7f 93       	push	r23
    3ecc:	8f 93       	push	r24
    3ece:	9f 93       	push	r25
    3ed0:	af 93       	push	r26
    3ed2:	bf 93       	push	r27
    3ed4:	ef 93       	push	r30
    3ed6:	ff 93       	push	r31
    3ed8:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <InterruptFuncTable+0x24>
    3edc:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <InterruptFuncTable+0x25>
    3ee0:	30 97       	sbiw	r30, 0x00	; 0
    3ee2:	29 f0       	breq	.+10     	; 0x3eee <__vector_18+0x3c>
    3ee4:	80 91 e0 23 	lds	r24, 0x23E0	; 0x8023e0 <InterruptSenderTable+0x24>
    3ee8:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <InterruptSenderTable+0x25>
    3eec:	19 95       	eicall
    3eee:	ff 91       	pop	r31
    3ef0:	ef 91       	pop	r30
    3ef2:	bf 91       	pop	r27
    3ef4:	af 91       	pop	r26
    3ef6:	9f 91       	pop	r25
    3ef8:	8f 91       	pop	r24
    3efa:	7f 91       	pop	r23
    3efc:	6f 91       	pop	r22
    3efe:	5f 91       	pop	r21
    3f00:	4f 91       	pop	r20
    3f02:	3f 91       	pop	r19
    3f04:	2f 91       	pop	r18
    3f06:	0f 90       	pop	r0
    3f08:	0b be       	out	0x3b, r0	; 59
    3f0a:	0f 90       	pop	r0
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	0f 90       	pop	r0
    3f10:	1f 90       	pop	r1
    3f12:	18 95       	reti

00003f14 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    3f14:	1f 92       	push	r1
    3f16:	0f 92       	push	r0
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	0f 92       	push	r0
    3f1c:	11 24       	eor	r1, r1
    3f1e:	0b b6       	in	r0, 0x3b	; 59
    3f20:	0f 92       	push	r0
    3f22:	2f 93       	push	r18
    3f24:	3f 93       	push	r19
    3f26:	4f 93       	push	r20
    3f28:	5f 93       	push	r21
    3f2a:	6f 93       	push	r22
    3f2c:	7f 93       	push	r23
    3f2e:	8f 93       	push	r24
    3f30:	9f 93       	push	r25
    3f32:	af 93       	push	r26
    3f34:	bf 93       	push	r27
    3f36:	ef 93       	push	r30
    3f38:	ff 93       	push	r31
    3f3a:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <InterruptFuncTable+0x26>
    3f3e:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <InterruptFuncTable+0x27>
    3f42:	30 97       	sbiw	r30, 0x00	; 0
    3f44:	29 f0       	breq	.+10     	; 0x3f50 <__vector_19+0x3c>
    3f46:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <InterruptSenderTable+0x26>
    3f4a:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <InterruptSenderTable+0x27>
    3f4e:	19 95       	eicall
    3f50:	ff 91       	pop	r31
    3f52:	ef 91       	pop	r30
    3f54:	bf 91       	pop	r27
    3f56:	af 91       	pop	r26
    3f58:	9f 91       	pop	r25
    3f5a:	8f 91       	pop	r24
    3f5c:	7f 91       	pop	r23
    3f5e:	6f 91       	pop	r22
    3f60:	5f 91       	pop	r21
    3f62:	4f 91       	pop	r20
    3f64:	3f 91       	pop	r19
    3f66:	2f 91       	pop	r18
    3f68:	0f 90       	pop	r0
    3f6a:	0b be       	out	0x3b, r0	; 59
    3f6c:	0f 90       	pop	r0
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	0f 90       	pop	r0
    3f72:	1f 90       	pop	r1
    3f74:	18 95       	reti

00003f76 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    3f76:	1f 92       	push	r1
    3f78:	0f 92       	push	r0
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	0f 92       	push	r0
    3f7e:	11 24       	eor	r1, r1
    3f80:	0b b6       	in	r0, 0x3b	; 59
    3f82:	0f 92       	push	r0
    3f84:	2f 93       	push	r18
    3f86:	3f 93       	push	r19
    3f88:	4f 93       	push	r20
    3f8a:	5f 93       	push	r21
    3f8c:	6f 93       	push	r22
    3f8e:	7f 93       	push	r23
    3f90:	8f 93       	push	r24
    3f92:	9f 93       	push	r25
    3f94:	af 93       	push	r26
    3f96:	bf 93       	push	r27
    3f98:	ef 93       	push	r30
    3f9a:	ff 93       	push	r31
    3f9c:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <InterruptFuncTable+0x28>
    3fa0:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <InterruptFuncTable+0x29>
    3fa4:	30 97       	sbiw	r30, 0x00	; 0
    3fa6:	29 f0       	breq	.+10     	; 0x3fb2 <__vector_20+0x3c>
    3fa8:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <InterruptSenderTable+0x28>
    3fac:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <InterruptSenderTable+0x29>
    3fb0:	19 95       	eicall
    3fb2:	ff 91       	pop	r31
    3fb4:	ef 91       	pop	r30
    3fb6:	bf 91       	pop	r27
    3fb8:	af 91       	pop	r26
    3fba:	9f 91       	pop	r25
    3fbc:	8f 91       	pop	r24
    3fbe:	7f 91       	pop	r23
    3fc0:	6f 91       	pop	r22
    3fc2:	5f 91       	pop	r21
    3fc4:	4f 91       	pop	r20
    3fc6:	3f 91       	pop	r19
    3fc8:	2f 91       	pop	r18
    3fca:	0f 90       	pop	r0
    3fcc:	0b be       	out	0x3b, r0	; 59
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti

00003fd8 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    3fd8:	1f 92       	push	r1
    3fda:	0f 92       	push	r0
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	0f 92       	push	r0
    3fe0:	11 24       	eor	r1, r1
    3fe2:	0b b6       	in	r0, 0x3b	; 59
    3fe4:	0f 92       	push	r0
    3fe6:	2f 93       	push	r18
    3fe8:	3f 93       	push	r19
    3fea:	4f 93       	push	r20
    3fec:	5f 93       	push	r21
    3fee:	6f 93       	push	r22
    3ff0:	7f 93       	push	r23
    3ff2:	8f 93       	push	r24
    3ff4:	9f 93       	push	r25
    3ff6:	af 93       	push	r26
    3ff8:	bf 93       	push	r27
    3ffa:	ef 93       	push	r30
    3ffc:	ff 93       	push	r31
    3ffe:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <InterruptFuncTable+0x2a>
    4002:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <InterruptFuncTable+0x2b>
    4006:	30 97       	sbiw	r30, 0x00	; 0
    4008:	29 f0       	breq	.+10     	; 0x4014 <__stack+0x15>
    400a:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <InterruptSenderTable+0x2a>
    400e:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <InterruptSenderTable+0x2b>
    4012:	19 95       	eicall
    4014:	ff 91       	pop	r31
    4016:	ef 91       	pop	r30
    4018:	bf 91       	pop	r27
    401a:	af 91       	pop	r26
    401c:	9f 91       	pop	r25
    401e:	8f 91       	pop	r24
    4020:	7f 91       	pop	r23
    4022:	6f 91       	pop	r22
    4024:	5f 91       	pop	r21
    4026:	4f 91       	pop	r20
    4028:	3f 91       	pop	r19
    402a:	2f 91       	pop	r18
    402c:	0f 90       	pop	r0
    402e:	0b be       	out	0x3b, r0	; 59
    4030:	0f 90       	pop	r0
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	0f 90       	pop	r0
    4036:	1f 90       	pop	r1
    4038:	18 95       	reti

0000403a <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    403a:	1f 92       	push	r1
    403c:	0f 92       	push	r0
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	0f 92       	push	r0
    4042:	11 24       	eor	r1, r1
    4044:	0b b6       	in	r0, 0x3b	; 59
    4046:	0f 92       	push	r0
    4048:	2f 93       	push	r18
    404a:	3f 93       	push	r19
    404c:	4f 93       	push	r20
    404e:	5f 93       	push	r21
    4050:	6f 93       	push	r22
    4052:	7f 93       	push	r23
    4054:	8f 93       	push	r24
    4056:	9f 93       	push	r25
    4058:	af 93       	push	r26
    405a:	bf 93       	push	r27
    405c:	ef 93       	push	r30
    405e:	ff 93       	push	r31
    4060:	e0 91 f2 22 	lds	r30, 0x22F2	; 0x8022f2 <InterruptFuncTable+0x2c>
    4064:	f0 91 f3 22 	lds	r31, 0x22F3	; 0x8022f3 <InterruptFuncTable+0x2d>
    4068:	30 97       	sbiw	r30, 0x00	; 0
    406a:	29 f0       	breq	.+10     	; 0x4076 <__vector_22+0x3c>
    406c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <InterruptSenderTable+0x2c>
    4070:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <InterruptSenderTable+0x2d>
    4074:	19 95       	eicall
    4076:	ff 91       	pop	r31
    4078:	ef 91       	pop	r30
    407a:	bf 91       	pop	r27
    407c:	af 91       	pop	r26
    407e:	9f 91       	pop	r25
    4080:	8f 91       	pop	r24
    4082:	7f 91       	pop	r23
    4084:	6f 91       	pop	r22
    4086:	5f 91       	pop	r21
    4088:	4f 91       	pop	r20
    408a:	3f 91       	pop	r19
    408c:	2f 91       	pop	r18
    408e:	0f 90       	pop	r0
    4090:	0b be       	out	0x3b, r0	; 59
    4092:	0f 90       	pop	r0
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	0f 90       	pop	r0
    4098:	1f 90       	pop	r1
    409a:	18 95       	reti

0000409c <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    409c:	1f 92       	push	r1
    409e:	0f 92       	push	r0
    40a0:	0f b6       	in	r0, 0x3f	; 63
    40a2:	0f 92       	push	r0
    40a4:	11 24       	eor	r1, r1
    40a6:	0b b6       	in	r0, 0x3b	; 59
    40a8:	0f 92       	push	r0
    40aa:	2f 93       	push	r18
    40ac:	3f 93       	push	r19
    40ae:	4f 93       	push	r20
    40b0:	5f 93       	push	r21
    40b2:	6f 93       	push	r22
    40b4:	7f 93       	push	r23
    40b6:	8f 93       	push	r24
    40b8:	9f 93       	push	r25
    40ba:	af 93       	push	r26
    40bc:	bf 93       	push	r27
    40be:	ef 93       	push	r30
    40c0:	ff 93       	push	r31
    40c2:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <InterruptFuncTable+0x2e>
    40c6:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <InterruptFuncTable+0x2f>
    40ca:	30 97       	sbiw	r30, 0x00	; 0
    40cc:	29 f0       	breq	.+10     	; 0x40d8 <__vector_23+0x3c>
    40ce:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <InterruptSenderTable+0x2e>
    40d2:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <InterruptSenderTable+0x2f>
    40d6:	19 95       	eicall
    40d8:	ff 91       	pop	r31
    40da:	ef 91       	pop	r30
    40dc:	bf 91       	pop	r27
    40de:	af 91       	pop	r26
    40e0:	9f 91       	pop	r25
    40e2:	8f 91       	pop	r24
    40e4:	7f 91       	pop	r23
    40e6:	6f 91       	pop	r22
    40e8:	5f 91       	pop	r21
    40ea:	4f 91       	pop	r20
    40ec:	3f 91       	pop	r19
    40ee:	2f 91       	pop	r18
    40f0:	0f 90       	pop	r0
    40f2:	0b be       	out	0x3b, r0	; 59
    40f4:	0f 90       	pop	r0
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	0f 90       	pop	r0
    40fa:	1f 90       	pop	r1
    40fc:	18 95       	reti

000040fe <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    40fe:	1f 92       	push	r1
    4100:	0f 92       	push	r0
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	0f 92       	push	r0
    4106:	11 24       	eor	r1, r1
    4108:	0b b6       	in	r0, 0x3b	; 59
    410a:	0f 92       	push	r0
    410c:	2f 93       	push	r18
    410e:	3f 93       	push	r19
    4110:	4f 93       	push	r20
    4112:	5f 93       	push	r21
    4114:	6f 93       	push	r22
    4116:	7f 93       	push	r23
    4118:	8f 93       	push	r24
    411a:	9f 93       	push	r25
    411c:	af 93       	push	r26
    411e:	bf 93       	push	r27
    4120:	ef 93       	push	r30
    4122:	ff 93       	push	r31
    4124:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <InterruptFuncTable+0x30>
    4128:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <InterruptFuncTable+0x31>
    412c:	30 97       	sbiw	r30, 0x00	; 0
    412e:	29 f0       	breq	.+10     	; 0x413a <__vector_24+0x3c>
    4130:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <InterruptSenderTable+0x30>
    4134:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <InterruptSenderTable+0x31>
    4138:	19 95       	eicall
    413a:	ff 91       	pop	r31
    413c:	ef 91       	pop	r30
    413e:	bf 91       	pop	r27
    4140:	af 91       	pop	r26
    4142:	9f 91       	pop	r25
    4144:	8f 91       	pop	r24
    4146:	7f 91       	pop	r23
    4148:	6f 91       	pop	r22
    414a:	5f 91       	pop	r21
    414c:	4f 91       	pop	r20
    414e:	3f 91       	pop	r19
    4150:	2f 91       	pop	r18
    4152:	0f 90       	pop	r0
    4154:	0b be       	out	0x3b, r0	; 59
    4156:	0f 90       	pop	r0
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	0f 90       	pop	r0
    415c:	1f 90       	pop	r1
    415e:	18 95       	reti

00004160 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    4160:	1f 92       	push	r1
    4162:	0f 92       	push	r0
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	0f 92       	push	r0
    4168:	11 24       	eor	r1, r1
    416a:	0b b6       	in	r0, 0x3b	; 59
    416c:	0f 92       	push	r0
    416e:	2f 93       	push	r18
    4170:	3f 93       	push	r19
    4172:	4f 93       	push	r20
    4174:	5f 93       	push	r21
    4176:	6f 93       	push	r22
    4178:	7f 93       	push	r23
    417a:	8f 93       	push	r24
    417c:	9f 93       	push	r25
    417e:	af 93       	push	r26
    4180:	bf 93       	push	r27
    4182:	ef 93       	push	r30
    4184:	ff 93       	push	r31
    4186:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <InterruptFuncTable+0x32>
    418a:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <InterruptFuncTable+0x33>
    418e:	30 97       	sbiw	r30, 0x00	; 0
    4190:	29 f0       	breq	.+10     	; 0x419c <__vector_25+0x3c>
    4192:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <InterruptSenderTable+0x32>
    4196:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <InterruptSenderTable+0x33>
    419a:	19 95       	eicall
    419c:	ff 91       	pop	r31
    419e:	ef 91       	pop	r30
    41a0:	bf 91       	pop	r27
    41a2:	af 91       	pop	r26
    41a4:	9f 91       	pop	r25
    41a6:	8f 91       	pop	r24
    41a8:	7f 91       	pop	r23
    41aa:	6f 91       	pop	r22
    41ac:	5f 91       	pop	r21
    41ae:	4f 91       	pop	r20
    41b0:	3f 91       	pop	r19
    41b2:	2f 91       	pop	r18
    41b4:	0f 90       	pop	r0
    41b6:	0b be       	out	0x3b, r0	; 59
    41b8:	0f 90       	pop	r0
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	0f 90       	pop	r0
    41be:	1f 90       	pop	r1
    41c0:	18 95       	reti

000041c2 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    41c2:	1f 92       	push	r1
    41c4:	0f 92       	push	r0
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	0f 92       	push	r0
    41ca:	11 24       	eor	r1, r1
    41cc:	0b b6       	in	r0, 0x3b	; 59
    41ce:	0f 92       	push	r0
    41d0:	2f 93       	push	r18
    41d2:	3f 93       	push	r19
    41d4:	4f 93       	push	r20
    41d6:	5f 93       	push	r21
    41d8:	6f 93       	push	r22
    41da:	7f 93       	push	r23
    41dc:	8f 93       	push	r24
    41de:	9f 93       	push	r25
    41e0:	af 93       	push	r26
    41e2:	bf 93       	push	r27
    41e4:	ef 93       	push	r30
    41e6:	ff 93       	push	r31
    41e8:	e0 91 fa 22 	lds	r30, 0x22FA	; 0x8022fa <InterruptFuncTable+0x34>
    41ec:	f0 91 fb 22 	lds	r31, 0x22FB	; 0x8022fb <InterruptFuncTable+0x35>
    41f0:	30 97       	sbiw	r30, 0x00	; 0
    41f2:	29 f0       	breq	.+10     	; 0x41fe <__vector_26+0x3c>
    41f4:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <InterruptSenderTable+0x34>
    41f8:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <InterruptSenderTable+0x35>
    41fc:	19 95       	eicall
    41fe:	ff 91       	pop	r31
    4200:	ef 91       	pop	r30
    4202:	bf 91       	pop	r27
    4204:	af 91       	pop	r26
    4206:	9f 91       	pop	r25
    4208:	8f 91       	pop	r24
    420a:	7f 91       	pop	r23
    420c:	6f 91       	pop	r22
    420e:	5f 91       	pop	r21
    4210:	4f 91       	pop	r20
    4212:	3f 91       	pop	r19
    4214:	2f 91       	pop	r18
    4216:	0f 90       	pop	r0
    4218:	0b be       	out	0x3b, r0	; 59
    421a:	0f 90       	pop	r0
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	0f 90       	pop	r0
    4220:	1f 90       	pop	r1
    4222:	18 95       	reti

00004224 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    4224:	1f 92       	push	r1
    4226:	0f 92       	push	r0
    4228:	0f b6       	in	r0, 0x3f	; 63
    422a:	0f 92       	push	r0
    422c:	11 24       	eor	r1, r1
    422e:	0b b6       	in	r0, 0x3b	; 59
    4230:	0f 92       	push	r0
    4232:	2f 93       	push	r18
    4234:	3f 93       	push	r19
    4236:	4f 93       	push	r20
    4238:	5f 93       	push	r21
    423a:	6f 93       	push	r22
    423c:	7f 93       	push	r23
    423e:	8f 93       	push	r24
    4240:	9f 93       	push	r25
    4242:	af 93       	push	r26
    4244:	bf 93       	push	r27
    4246:	ef 93       	push	r30
    4248:	ff 93       	push	r31
    424a:	e0 91 fc 22 	lds	r30, 0x22FC	; 0x8022fc <InterruptFuncTable+0x36>
    424e:	f0 91 fd 22 	lds	r31, 0x22FD	; 0x8022fd <InterruptFuncTable+0x37>
    4252:	30 97       	sbiw	r30, 0x00	; 0
    4254:	29 f0       	breq	.+10     	; 0x4260 <__vector_27+0x3c>
    4256:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <InterruptSenderTable+0x36>
    425a:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <InterruptSenderTable+0x37>
    425e:	19 95       	eicall
    4260:	ff 91       	pop	r31
    4262:	ef 91       	pop	r30
    4264:	bf 91       	pop	r27
    4266:	af 91       	pop	r26
    4268:	9f 91       	pop	r25
    426a:	8f 91       	pop	r24
    426c:	7f 91       	pop	r23
    426e:	6f 91       	pop	r22
    4270:	5f 91       	pop	r21
    4272:	4f 91       	pop	r20
    4274:	3f 91       	pop	r19
    4276:	2f 91       	pop	r18
    4278:	0f 90       	pop	r0
    427a:	0b be       	out	0x3b, r0	; 59
    427c:	0f 90       	pop	r0
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	0f 90       	pop	r0
    4282:	1f 90       	pop	r1
    4284:	18 95       	reti

00004286 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    4286:	1f 92       	push	r1
    4288:	0f 92       	push	r0
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	0f 92       	push	r0
    428e:	11 24       	eor	r1, r1
    4290:	0b b6       	in	r0, 0x3b	; 59
    4292:	0f 92       	push	r0
    4294:	2f 93       	push	r18
    4296:	3f 93       	push	r19
    4298:	4f 93       	push	r20
    429a:	5f 93       	push	r21
    429c:	6f 93       	push	r22
    429e:	7f 93       	push	r23
    42a0:	8f 93       	push	r24
    42a2:	9f 93       	push	r25
    42a4:	af 93       	push	r26
    42a6:	bf 93       	push	r27
    42a8:	ef 93       	push	r30
    42aa:	ff 93       	push	r31
    42ac:	e0 91 fe 22 	lds	r30, 0x22FE	; 0x8022fe <InterruptFuncTable+0x38>
    42b0:	f0 91 ff 22 	lds	r31, 0x22FF	; 0x8022ff <InterruptFuncTable+0x39>
    42b4:	30 97       	sbiw	r30, 0x00	; 0
    42b6:	29 f0       	breq	.+10     	; 0x42c2 <__vector_28+0x3c>
    42b8:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <InterruptSenderTable+0x38>
    42bc:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <InterruptSenderTable+0x39>
    42c0:	19 95       	eicall
    42c2:	ff 91       	pop	r31
    42c4:	ef 91       	pop	r30
    42c6:	bf 91       	pop	r27
    42c8:	af 91       	pop	r26
    42ca:	9f 91       	pop	r25
    42cc:	8f 91       	pop	r24
    42ce:	7f 91       	pop	r23
    42d0:	6f 91       	pop	r22
    42d2:	5f 91       	pop	r21
    42d4:	4f 91       	pop	r20
    42d6:	3f 91       	pop	r19
    42d8:	2f 91       	pop	r18
    42da:	0f 90       	pop	r0
    42dc:	0b be       	out	0x3b, r0	; 59
    42de:	0f 90       	pop	r0
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	0f 90       	pop	r0
    42e4:	1f 90       	pop	r1
    42e6:	18 95       	reti

000042e8 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    42e8:	1f 92       	push	r1
    42ea:	0f 92       	push	r0
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	0f 92       	push	r0
    42f0:	11 24       	eor	r1, r1
    42f2:	0b b6       	in	r0, 0x3b	; 59
    42f4:	0f 92       	push	r0
    42f6:	2f 93       	push	r18
    42f8:	3f 93       	push	r19
    42fa:	4f 93       	push	r20
    42fc:	5f 93       	push	r21
    42fe:	6f 93       	push	r22
    4300:	7f 93       	push	r23
    4302:	8f 93       	push	r24
    4304:	9f 93       	push	r25
    4306:	af 93       	push	r26
    4308:	bf 93       	push	r27
    430a:	ef 93       	push	r30
    430c:	ff 93       	push	r31
    430e:	e0 91 00 23 	lds	r30, 0x2300	; 0x802300 <InterruptFuncTable+0x3a>
    4312:	f0 91 01 23 	lds	r31, 0x2301	; 0x802301 <InterruptFuncTable+0x3b>
    4316:	30 97       	sbiw	r30, 0x00	; 0
    4318:	29 f0       	breq	.+10     	; 0x4324 <__vector_29+0x3c>
    431a:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <InterruptSenderTable+0x3a>
    431e:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <InterruptSenderTable+0x3b>
    4322:	19 95       	eicall
    4324:	ff 91       	pop	r31
    4326:	ef 91       	pop	r30
    4328:	bf 91       	pop	r27
    432a:	af 91       	pop	r26
    432c:	9f 91       	pop	r25
    432e:	8f 91       	pop	r24
    4330:	7f 91       	pop	r23
    4332:	6f 91       	pop	r22
    4334:	5f 91       	pop	r21
    4336:	4f 91       	pop	r20
    4338:	3f 91       	pop	r19
    433a:	2f 91       	pop	r18
    433c:	0f 90       	pop	r0
    433e:	0b be       	out	0x3b, r0	; 59
    4340:	0f 90       	pop	r0
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	0f 90       	pop	r0
    4346:	1f 90       	pop	r1
    4348:	18 95       	reti

0000434a <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    434a:	1f 92       	push	r1
    434c:	0f 92       	push	r0
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	0f 92       	push	r0
    4352:	11 24       	eor	r1, r1
    4354:	0b b6       	in	r0, 0x3b	; 59
    4356:	0f 92       	push	r0
    4358:	2f 93       	push	r18
    435a:	3f 93       	push	r19
    435c:	4f 93       	push	r20
    435e:	5f 93       	push	r21
    4360:	6f 93       	push	r22
    4362:	7f 93       	push	r23
    4364:	8f 93       	push	r24
    4366:	9f 93       	push	r25
    4368:	af 93       	push	r26
    436a:	bf 93       	push	r27
    436c:	ef 93       	push	r30
    436e:	ff 93       	push	r31
    4370:	e0 91 02 23 	lds	r30, 0x2302	; 0x802302 <InterruptFuncTable+0x3c>
    4374:	f0 91 03 23 	lds	r31, 0x2303	; 0x802303 <InterruptFuncTable+0x3d>
    4378:	30 97       	sbiw	r30, 0x00	; 0
    437a:	29 f0       	breq	.+10     	; 0x4386 <__vector_30+0x3c>
    437c:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <InterruptSenderTable+0x3c>
    4380:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <InterruptSenderTable+0x3d>
    4384:	19 95       	eicall
    4386:	ff 91       	pop	r31
    4388:	ef 91       	pop	r30
    438a:	bf 91       	pop	r27
    438c:	af 91       	pop	r26
    438e:	9f 91       	pop	r25
    4390:	8f 91       	pop	r24
    4392:	7f 91       	pop	r23
    4394:	6f 91       	pop	r22
    4396:	5f 91       	pop	r21
    4398:	4f 91       	pop	r20
    439a:	3f 91       	pop	r19
    439c:	2f 91       	pop	r18
    439e:	0f 90       	pop	r0
    43a0:	0b be       	out	0x3b, r0	; 59
    43a2:	0f 90       	pop	r0
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	0f 90       	pop	r0
    43a8:	1f 90       	pop	r1
    43aa:	18 95       	reti

000043ac <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    43ac:	1f 92       	push	r1
    43ae:	0f 92       	push	r0
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	0f 92       	push	r0
    43b4:	11 24       	eor	r1, r1
    43b6:	0b b6       	in	r0, 0x3b	; 59
    43b8:	0f 92       	push	r0
    43ba:	2f 93       	push	r18
    43bc:	3f 93       	push	r19
    43be:	4f 93       	push	r20
    43c0:	5f 93       	push	r21
    43c2:	6f 93       	push	r22
    43c4:	7f 93       	push	r23
    43c6:	8f 93       	push	r24
    43c8:	9f 93       	push	r25
    43ca:	af 93       	push	r26
    43cc:	bf 93       	push	r27
    43ce:	ef 93       	push	r30
    43d0:	ff 93       	push	r31
    43d2:	e0 91 04 23 	lds	r30, 0x2304	; 0x802304 <InterruptFuncTable+0x3e>
    43d6:	f0 91 05 23 	lds	r31, 0x2305	; 0x802305 <InterruptFuncTable+0x3f>
    43da:	30 97       	sbiw	r30, 0x00	; 0
    43dc:	29 f0       	breq	.+10     	; 0x43e8 <__vector_31+0x3c>
    43de:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <InterruptSenderTable+0x3e>
    43e2:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <InterruptSenderTable+0x3f>
    43e6:	19 95       	eicall
    43e8:	ff 91       	pop	r31
    43ea:	ef 91       	pop	r30
    43ec:	bf 91       	pop	r27
    43ee:	af 91       	pop	r26
    43f0:	9f 91       	pop	r25
    43f2:	8f 91       	pop	r24
    43f4:	7f 91       	pop	r23
    43f6:	6f 91       	pop	r22
    43f8:	5f 91       	pop	r21
    43fa:	4f 91       	pop	r20
    43fc:	3f 91       	pop	r19
    43fe:	2f 91       	pop	r18
    4400:	0f 90       	pop	r0
    4402:	0b be       	out	0x3b, r0	; 59
    4404:	0f 90       	pop	r0
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	0f 90       	pop	r0
    440a:	1f 90       	pop	r1
    440c:	18 95       	reti

0000440e <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    440e:	1f 92       	push	r1
    4410:	0f 92       	push	r0
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	0f 92       	push	r0
    4416:	11 24       	eor	r1, r1
    4418:	0b b6       	in	r0, 0x3b	; 59
    441a:	0f 92       	push	r0
    441c:	2f 93       	push	r18
    441e:	3f 93       	push	r19
    4420:	4f 93       	push	r20
    4422:	5f 93       	push	r21
    4424:	6f 93       	push	r22
    4426:	7f 93       	push	r23
    4428:	8f 93       	push	r24
    442a:	9f 93       	push	r25
    442c:	af 93       	push	r26
    442e:	bf 93       	push	r27
    4430:	ef 93       	push	r30
    4432:	ff 93       	push	r31
    4434:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <InterruptFuncTable+0x40>
    4438:	f0 91 07 23 	lds	r31, 0x2307	; 0x802307 <InterruptFuncTable+0x41>
    443c:	30 97       	sbiw	r30, 0x00	; 0
    443e:	29 f0       	breq	.+10     	; 0x444a <__vector_32+0x3c>
    4440:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <InterruptSenderTable+0x40>
    4444:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <InterruptSenderTable+0x41>
    4448:	19 95       	eicall
    444a:	ff 91       	pop	r31
    444c:	ef 91       	pop	r30
    444e:	bf 91       	pop	r27
    4450:	af 91       	pop	r26
    4452:	9f 91       	pop	r25
    4454:	8f 91       	pop	r24
    4456:	7f 91       	pop	r23
    4458:	6f 91       	pop	r22
    445a:	5f 91       	pop	r21
    445c:	4f 91       	pop	r20
    445e:	3f 91       	pop	r19
    4460:	2f 91       	pop	r18
    4462:	0f 90       	pop	r0
    4464:	0b be       	out	0x3b, r0	; 59
    4466:	0f 90       	pop	r0
    4468:	0f be       	out	0x3f, r0	; 63
    446a:	0f 90       	pop	r0
    446c:	1f 90       	pop	r1
    446e:	18 95       	reti

00004470 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    4470:	1f 92       	push	r1
    4472:	0f 92       	push	r0
    4474:	0f b6       	in	r0, 0x3f	; 63
    4476:	0f 92       	push	r0
    4478:	11 24       	eor	r1, r1
    447a:	0b b6       	in	r0, 0x3b	; 59
    447c:	0f 92       	push	r0
    447e:	2f 93       	push	r18
    4480:	3f 93       	push	r19
    4482:	4f 93       	push	r20
    4484:	5f 93       	push	r21
    4486:	6f 93       	push	r22
    4488:	7f 93       	push	r23
    448a:	8f 93       	push	r24
    448c:	9f 93       	push	r25
    448e:	af 93       	push	r26
    4490:	bf 93       	push	r27
    4492:	ef 93       	push	r30
    4494:	ff 93       	push	r31
    4496:	e0 91 08 23 	lds	r30, 0x2308	; 0x802308 <InterruptFuncTable+0x42>
    449a:	f0 91 09 23 	lds	r31, 0x2309	; 0x802309 <InterruptFuncTable+0x43>
    449e:	30 97       	sbiw	r30, 0x00	; 0
    44a0:	29 f0       	breq	.+10     	; 0x44ac <__vector_33+0x3c>
    44a2:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <InterruptSenderTable+0x42>
    44a6:	90 91 ff 23 	lds	r25, 0x23FF	; 0x8023ff <InterruptSenderTable+0x43>
    44aa:	19 95       	eicall
    44ac:	ff 91       	pop	r31
    44ae:	ef 91       	pop	r30
    44b0:	bf 91       	pop	r27
    44b2:	af 91       	pop	r26
    44b4:	9f 91       	pop	r25
    44b6:	8f 91       	pop	r24
    44b8:	7f 91       	pop	r23
    44ba:	6f 91       	pop	r22
    44bc:	5f 91       	pop	r21
    44be:	4f 91       	pop	r20
    44c0:	3f 91       	pop	r19
    44c2:	2f 91       	pop	r18
    44c4:	0f 90       	pop	r0
    44c6:	0b be       	out	0x3b, r0	; 59
    44c8:	0f 90       	pop	r0
    44ca:	0f be       	out	0x3f, r0	; 63
    44cc:	0f 90       	pop	r0
    44ce:	1f 90       	pop	r1
    44d0:	18 95       	reti

000044d2 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    44d2:	1f 92       	push	r1
    44d4:	0f 92       	push	r0
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	0f 92       	push	r0
    44da:	11 24       	eor	r1, r1
    44dc:	0b b6       	in	r0, 0x3b	; 59
    44de:	0f 92       	push	r0
    44e0:	2f 93       	push	r18
    44e2:	3f 93       	push	r19
    44e4:	4f 93       	push	r20
    44e6:	5f 93       	push	r21
    44e8:	6f 93       	push	r22
    44ea:	7f 93       	push	r23
    44ec:	8f 93       	push	r24
    44ee:	9f 93       	push	r25
    44f0:	af 93       	push	r26
    44f2:	bf 93       	push	r27
    44f4:	ef 93       	push	r30
    44f6:	ff 93       	push	r31
    44f8:	e0 91 0a 23 	lds	r30, 0x230A	; 0x80230a <InterruptFuncTable+0x44>
    44fc:	f0 91 0b 23 	lds	r31, 0x230B	; 0x80230b <InterruptFuncTable+0x45>
    4500:	30 97       	sbiw	r30, 0x00	; 0
    4502:	29 f0       	breq	.+10     	; 0x450e <__vector_34+0x3c>
    4504:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <InterruptSenderTable+0x44>
    4508:	90 91 01 24 	lds	r25, 0x2401	; 0x802401 <InterruptSenderTable+0x45>
    450c:	19 95       	eicall
    450e:	ff 91       	pop	r31
    4510:	ef 91       	pop	r30
    4512:	bf 91       	pop	r27
    4514:	af 91       	pop	r26
    4516:	9f 91       	pop	r25
    4518:	8f 91       	pop	r24
    451a:	7f 91       	pop	r23
    451c:	6f 91       	pop	r22
    451e:	5f 91       	pop	r21
    4520:	4f 91       	pop	r20
    4522:	3f 91       	pop	r19
    4524:	2f 91       	pop	r18
    4526:	0f 90       	pop	r0
    4528:	0b be       	out	0x3b, r0	; 59
    452a:	0f 90       	pop	r0
    452c:	0f be       	out	0x3f, r0	; 63
    452e:	0f 90       	pop	r0
    4530:	1f 90       	pop	r1
    4532:	18 95       	reti

00004534 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    4534:	1f 92       	push	r1
    4536:	0f 92       	push	r0
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	0f 92       	push	r0
    453c:	11 24       	eor	r1, r1
    453e:	0b b6       	in	r0, 0x3b	; 59
    4540:	0f 92       	push	r0
    4542:	2f 93       	push	r18
    4544:	3f 93       	push	r19
    4546:	4f 93       	push	r20
    4548:	5f 93       	push	r21
    454a:	6f 93       	push	r22
    454c:	7f 93       	push	r23
    454e:	8f 93       	push	r24
    4550:	9f 93       	push	r25
    4552:	af 93       	push	r26
    4554:	bf 93       	push	r27
    4556:	ef 93       	push	r30
    4558:	ff 93       	push	r31
    455a:	e0 91 0c 23 	lds	r30, 0x230C	; 0x80230c <InterruptFuncTable+0x46>
    455e:	f0 91 0d 23 	lds	r31, 0x230D	; 0x80230d <InterruptFuncTable+0x47>
    4562:	30 97       	sbiw	r30, 0x00	; 0
    4564:	29 f0       	breq	.+10     	; 0x4570 <__vector_35+0x3c>
    4566:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <InterruptSenderTable+0x46>
    456a:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <InterruptSenderTable+0x47>
    456e:	19 95       	eicall
    4570:	ff 91       	pop	r31
    4572:	ef 91       	pop	r30
    4574:	bf 91       	pop	r27
    4576:	af 91       	pop	r26
    4578:	9f 91       	pop	r25
    457a:	8f 91       	pop	r24
    457c:	7f 91       	pop	r23
    457e:	6f 91       	pop	r22
    4580:	5f 91       	pop	r21
    4582:	4f 91       	pop	r20
    4584:	3f 91       	pop	r19
    4586:	2f 91       	pop	r18
    4588:	0f 90       	pop	r0
    458a:	0b be       	out	0x3b, r0	; 59
    458c:	0f 90       	pop	r0
    458e:	0f be       	out	0x3f, r0	; 63
    4590:	0f 90       	pop	r0
    4592:	1f 90       	pop	r1
    4594:	18 95       	reti

00004596 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    4596:	1f 92       	push	r1
    4598:	0f 92       	push	r0
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	0f 92       	push	r0
    459e:	11 24       	eor	r1, r1
    45a0:	0b b6       	in	r0, 0x3b	; 59
    45a2:	0f 92       	push	r0
    45a4:	2f 93       	push	r18
    45a6:	3f 93       	push	r19
    45a8:	4f 93       	push	r20
    45aa:	5f 93       	push	r21
    45ac:	6f 93       	push	r22
    45ae:	7f 93       	push	r23
    45b0:	8f 93       	push	r24
    45b2:	9f 93       	push	r25
    45b4:	af 93       	push	r26
    45b6:	bf 93       	push	r27
    45b8:	ef 93       	push	r30
    45ba:	ff 93       	push	r31
    45bc:	e0 91 0e 23 	lds	r30, 0x230E	; 0x80230e <InterruptFuncTable+0x48>
    45c0:	f0 91 0f 23 	lds	r31, 0x230F	; 0x80230f <InterruptFuncTable+0x49>
    45c4:	30 97       	sbiw	r30, 0x00	; 0
    45c6:	29 f0       	breq	.+10     	; 0x45d2 <__vector_36+0x3c>
    45c8:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <InterruptSenderTable+0x48>
    45cc:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <InterruptSenderTable+0x49>
    45d0:	19 95       	eicall
    45d2:	ff 91       	pop	r31
    45d4:	ef 91       	pop	r30
    45d6:	bf 91       	pop	r27
    45d8:	af 91       	pop	r26
    45da:	9f 91       	pop	r25
    45dc:	8f 91       	pop	r24
    45de:	7f 91       	pop	r23
    45e0:	6f 91       	pop	r22
    45e2:	5f 91       	pop	r21
    45e4:	4f 91       	pop	r20
    45e6:	3f 91       	pop	r19
    45e8:	2f 91       	pop	r18
    45ea:	0f 90       	pop	r0
    45ec:	0b be       	out	0x3b, r0	; 59
    45ee:	0f 90       	pop	r0
    45f0:	0f be       	out	0x3f, r0	; 63
    45f2:	0f 90       	pop	r0
    45f4:	1f 90       	pop	r1
    45f6:	18 95       	reti

000045f8 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    45f8:	1f 92       	push	r1
    45fa:	0f 92       	push	r0
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	0f 92       	push	r0
    4600:	11 24       	eor	r1, r1
    4602:	0b b6       	in	r0, 0x3b	; 59
    4604:	0f 92       	push	r0
    4606:	2f 93       	push	r18
    4608:	3f 93       	push	r19
    460a:	4f 93       	push	r20
    460c:	5f 93       	push	r21
    460e:	6f 93       	push	r22
    4610:	7f 93       	push	r23
    4612:	8f 93       	push	r24
    4614:	9f 93       	push	r25
    4616:	af 93       	push	r26
    4618:	bf 93       	push	r27
    461a:	ef 93       	push	r30
    461c:	ff 93       	push	r31
    461e:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <InterruptFuncTable+0x4a>
    4622:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <InterruptFuncTable+0x4b>
    4626:	30 97       	sbiw	r30, 0x00	; 0
    4628:	29 f0       	breq	.+10     	; 0x4634 <__vector_37+0x3c>
    462a:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <InterruptSenderTable+0x4a>
    462e:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <InterruptSenderTable+0x4b>
    4632:	19 95       	eicall
    4634:	ff 91       	pop	r31
    4636:	ef 91       	pop	r30
    4638:	bf 91       	pop	r27
    463a:	af 91       	pop	r26
    463c:	9f 91       	pop	r25
    463e:	8f 91       	pop	r24
    4640:	7f 91       	pop	r23
    4642:	6f 91       	pop	r22
    4644:	5f 91       	pop	r21
    4646:	4f 91       	pop	r20
    4648:	3f 91       	pop	r19
    464a:	2f 91       	pop	r18
    464c:	0f 90       	pop	r0
    464e:	0b be       	out	0x3b, r0	; 59
    4650:	0f 90       	pop	r0
    4652:	0f be       	out	0x3f, r0	; 63
    4654:	0f 90       	pop	r0
    4656:	1f 90       	pop	r1
    4658:	18 95       	reti

0000465a <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    465a:	1f 92       	push	r1
    465c:	0f 92       	push	r0
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	0f 92       	push	r0
    4662:	11 24       	eor	r1, r1
    4664:	0b b6       	in	r0, 0x3b	; 59
    4666:	0f 92       	push	r0
    4668:	2f 93       	push	r18
    466a:	3f 93       	push	r19
    466c:	4f 93       	push	r20
    466e:	5f 93       	push	r21
    4670:	6f 93       	push	r22
    4672:	7f 93       	push	r23
    4674:	8f 93       	push	r24
    4676:	9f 93       	push	r25
    4678:	af 93       	push	r26
    467a:	bf 93       	push	r27
    467c:	ef 93       	push	r30
    467e:	ff 93       	push	r31
    4680:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <InterruptFuncTable+0x4c>
    4684:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <InterruptFuncTable+0x4d>
    4688:	30 97       	sbiw	r30, 0x00	; 0
    468a:	29 f0       	breq	.+10     	; 0x4696 <__vector_38+0x3c>
    468c:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <InterruptSenderTable+0x4c>
    4690:	90 91 09 24 	lds	r25, 0x2409	; 0x802409 <InterruptSenderTable+0x4d>
    4694:	19 95       	eicall
    4696:	ff 91       	pop	r31
    4698:	ef 91       	pop	r30
    469a:	bf 91       	pop	r27
    469c:	af 91       	pop	r26
    469e:	9f 91       	pop	r25
    46a0:	8f 91       	pop	r24
    46a2:	7f 91       	pop	r23
    46a4:	6f 91       	pop	r22
    46a6:	5f 91       	pop	r21
    46a8:	4f 91       	pop	r20
    46aa:	3f 91       	pop	r19
    46ac:	2f 91       	pop	r18
    46ae:	0f 90       	pop	r0
    46b0:	0b be       	out	0x3b, r0	; 59
    46b2:	0f 90       	pop	r0
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	0f 90       	pop	r0
    46b8:	1f 90       	pop	r1
    46ba:	18 95       	reti

000046bc <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    46bc:	1f 92       	push	r1
    46be:	0f 92       	push	r0
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	0f 92       	push	r0
    46c4:	11 24       	eor	r1, r1
    46c6:	0b b6       	in	r0, 0x3b	; 59
    46c8:	0f 92       	push	r0
    46ca:	2f 93       	push	r18
    46cc:	3f 93       	push	r19
    46ce:	4f 93       	push	r20
    46d0:	5f 93       	push	r21
    46d2:	6f 93       	push	r22
    46d4:	7f 93       	push	r23
    46d6:	8f 93       	push	r24
    46d8:	9f 93       	push	r25
    46da:	af 93       	push	r26
    46dc:	bf 93       	push	r27
    46de:	ef 93       	push	r30
    46e0:	ff 93       	push	r31
    46e2:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <InterruptFuncTable+0x4e>
    46e6:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <InterruptFuncTable+0x4f>
    46ea:	30 97       	sbiw	r30, 0x00	; 0
    46ec:	29 f0       	breq	.+10     	; 0x46f8 <__vector_39+0x3c>
    46ee:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <InterruptSenderTable+0x4e>
    46f2:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <InterruptSenderTable+0x4f>
    46f6:	19 95       	eicall
    46f8:	ff 91       	pop	r31
    46fa:	ef 91       	pop	r30
    46fc:	bf 91       	pop	r27
    46fe:	af 91       	pop	r26
    4700:	9f 91       	pop	r25
    4702:	8f 91       	pop	r24
    4704:	7f 91       	pop	r23
    4706:	6f 91       	pop	r22
    4708:	5f 91       	pop	r21
    470a:	4f 91       	pop	r20
    470c:	3f 91       	pop	r19
    470e:	2f 91       	pop	r18
    4710:	0f 90       	pop	r0
    4712:	0b be       	out	0x3b, r0	; 59
    4714:	0f 90       	pop	r0
    4716:	0f be       	out	0x3f, r0	; 63
    4718:	0f 90       	pop	r0
    471a:	1f 90       	pop	r1
    471c:	18 95       	reti

0000471e <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    471e:	1f 92       	push	r1
    4720:	0f 92       	push	r0
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	0f 92       	push	r0
    4726:	11 24       	eor	r1, r1
    4728:	0b b6       	in	r0, 0x3b	; 59
    472a:	0f 92       	push	r0
    472c:	2f 93       	push	r18
    472e:	3f 93       	push	r19
    4730:	4f 93       	push	r20
    4732:	5f 93       	push	r21
    4734:	6f 93       	push	r22
    4736:	7f 93       	push	r23
    4738:	8f 93       	push	r24
    473a:	9f 93       	push	r25
    473c:	af 93       	push	r26
    473e:	bf 93       	push	r27
    4740:	ef 93       	push	r30
    4742:	ff 93       	push	r31
    4744:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <InterruptFuncTable+0x50>
    4748:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <InterruptFuncTable+0x51>
    474c:	30 97       	sbiw	r30, 0x00	; 0
    474e:	29 f0       	breq	.+10     	; 0x475a <__vector_40+0x3c>
    4750:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <InterruptSenderTable+0x50>
    4754:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <InterruptSenderTable+0x51>
    4758:	19 95       	eicall
    475a:	ff 91       	pop	r31
    475c:	ef 91       	pop	r30
    475e:	bf 91       	pop	r27
    4760:	af 91       	pop	r26
    4762:	9f 91       	pop	r25
    4764:	8f 91       	pop	r24
    4766:	7f 91       	pop	r23
    4768:	6f 91       	pop	r22
    476a:	5f 91       	pop	r21
    476c:	4f 91       	pop	r20
    476e:	3f 91       	pop	r19
    4770:	2f 91       	pop	r18
    4772:	0f 90       	pop	r0
    4774:	0b be       	out	0x3b, r0	; 59
    4776:	0f 90       	pop	r0
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	0f 90       	pop	r0
    477c:	1f 90       	pop	r1
    477e:	18 95       	reti

00004780 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    4780:	1f 92       	push	r1
    4782:	0f 92       	push	r0
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	0f 92       	push	r0
    4788:	11 24       	eor	r1, r1
    478a:	0b b6       	in	r0, 0x3b	; 59
    478c:	0f 92       	push	r0
    478e:	2f 93       	push	r18
    4790:	3f 93       	push	r19
    4792:	4f 93       	push	r20
    4794:	5f 93       	push	r21
    4796:	6f 93       	push	r22
    4798:	7f 93       	push	r23
    479a:	8f 93       	push	r24
    479c:	9f 93       	push	r25
    479e:	af 93       	push	r26
    47a0:	bf 93       	push	r27
    47a2:	ef 93       	push	r30
    47a4:	ff 93       	push	r31
    47a6:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <InterruptFuncTable+0x52>
    47aa:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <InterruptFuncTable+0x53>
    47ae:	30 97       	sbiw	r30, 0x00	; 0
    47b0:	29 f0       	breq	.+10     	; 0x47bc <__vector_41+0x3c>
    47b2:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <InterruptSenderTable+0x52>
    47b6:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <InterruptSenderTable+0x53>
    47ba:	19 95       	eicall
    47bc:	ff 91       	pop	r31
    47be:	ef 91       	pop	r30
    47c0:	bf 91       	pop	r27
    47c2:	af 91       	pop	r26
    47c4:	9f 91       	pop	r25
    47c6:	8f 91       	pop	r24
    47c8:	7f 91       	pop	r23
    47ca:	6f 91       	pop	r22
    47cc:	5f 91       	pop	r21
    47ce:	4f 91       	pop	r20
    47d0:	3f 91       	pop	r19
    47d2:	2f 91       	pop	r18
    47d4:	0f 90       	pop	r0
    47d6:	0b be       	out	0x3b, r0	; 59
    47d8:	0f 90       	pop	r0
    47da:	0f be       	out	0x3f, r0	; 63
    47dc:	0f 90       	pop	r0
    47de:	1f 90       	pop	r1
    47e0:	18 95       	reti

000047e2 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    47e2:	1f 92       	push	r1
    47e4:	0f 92       	push	r0
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	0f 92       	push	r0
    47ea:	11 24       	eor	r1, r1
    47ec:	0b b6       	in	r0, 0x3b	; 59
    47ee:	0f 92       	push	r0
    47f0:	2f 93       	push	r18
    47f2:	3f 93       	push	r19
    47f4:	4f 93       	push	r20
    47f6:	5f 93       	push	r21
    47f8:	6f 93       	push	r22
    47fa:	7f 93       	push	r23
    47fc:	8f 93       	push	r24
    47fe:	9f 93       	push	r25
    4800:	af 93       	push	r26
    4802:	bf 93       	push	r27
    4804:	ef 93       	push	r30
    4806:	ff 93       	push	r31
    4808:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <InterruptFuncTable+0x54>
    480c:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <InterruptFuncTable+0x55>
    4810:	30 97       	sbiw	r30, 0x00	; 0
    4812:	29 f0       	breq	.+10     	; 0x481e <__vector_42+0x3c>
    4814:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <InterruptSenderTable+0x54>
    4818:	90 91 11 24 	lds	r25, 0x2411	; 0x802411 <InterruptSenderTable+0x55>
    481c:	19 95       	eicall
    481e:	ff 91       	pop	r31
    4820:	ef 91       	pop	r30
    4822:	bf 91       	pop	r27
    4824:	af 91       	pop	r26
    4826:	9f 91       	pop	r25
    4828:	8f 91       	pop	r24
    482a:	7f 91       	pop	r23
    482c:	6f 91       	pop	r22
    482e:	5f 91       	pop	r21
    4830:	4f 91       	pop	r20
    4832:	3f 91       	pop	r19
    4834:	2f 91       	pop	r18
    4836:	0f 90       	pop	r0
    4838:	0b be       	out	0x3b, r0	; 59
    483a:	0f 90       	pop	r0
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	0f 90       	pop	r0
    4840:	1f 90       	pop	r1
    4842:	18 95       	reti

00004844 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    4844:	1f 92       	push	r1
    4846:	0f 92       	push	r0
    4848:	0f b6       	in	r0, 0x3f	; 63
    484a:	0f 92       	push	r0
    484c:	11 24       	eor	r1, r1
    484e:	0b b6       	in	r0, 0x3b	; 59
    4850:	0f 92       	push	r0
    4852:	2f 93       	push	r18
    4854:	3f 93       	push	r19
    4856:	4f 93       	push	r20
    4858:	5f 93       	push	r21
    485a:	6f 93       	push	r22
    485c:	7f 93       	push	r23
    485e:	8f 93       	push	r24
    4860:	9f 93       	push	r25
    4862:	af 93       	push	r26
    4864:	bf 93       	push	r27
    4866:	ef 93       	push	r30
    4868:	ff 93       	push	r31
    486a:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <InterruptFuncTable+0x56>
    486e:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <InterruptFuncTable+0x57>
    4872:	30 97       	sbiw	r30, 0x00	; 0
    4874:	29 f0       	breq	.+10     	; 0x4880 <__vector_43+0x3c>
    4876:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <InterruptSenderTable+0x56>
    487a:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <InterruptSenderTable+0x57>
    487e:	19 95       	eicall
    4880:	ff 91       	pop	r31
    4882:	ef 91       	pop	r30
    4884:	bf 91       	pop	r27
    4886:	af 91       	pop	r26
    4888:	9f 91       	pop	r25
    488a:	8f 91       	pop	r24
    488c:	7f 91       	pop	r23
    488e:	6f 91       	pop	r22
    4890:	5f 91       	pop	r21
    4892:	4f 91       	pop	r20
    4894:	3f 91       	pop	r19
    4896:	2f 91       	pop	r18
    4898:	0f 90       	pop	r0
    489a:	0b be       	out	0x3b, r0	; 59
    489c:	0f 90       	pop	r0
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	0f 90       	pop	r0
    48a2:	1f 90       	pop	r1
    48a4:	18 95       	reti

000048a6 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    48a6:	1f 92       	push	r1
    48a8:	0f 92       	push	r0
    48aa:	0f b6       	in	r0, 0x3f	; 63
    48ac:	0f 92       	push	r0
    48ae:	11 24       	eor	r1, r1
    48b0:	0b b6       	in	r0, 0x3b	; 59
    48b2:	0f 92       	push	r0
    48b4:	2f 93       	push	r18
    48b6:	3f 93       	push	r19
    48b8:	4f 93       	push	r20
    48ba:	5f 93       	push	r21
    48bc:	6f 93       	push	r22
    48be:	7f 93       	push	r23
    48c0:	8f 93       	push	r24
    48c2:	9f 93       	push	r25
    48c4:	af 93       	push	r26
    48c6:	bf 93       	push	r27
    48c8:	ef 93       	push	r30
    48ca:	ff 93       	push	r31
    48cc:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <InterruptFuncTable+0x58>
    48d0:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <InterruptFuncTable+0x59>
    48d4:	30 97       	sbiw	r30, 0x00	; 0
    48d6:	29 f0       	breq	.+10     	; 0x48e2 <__vector_44+0x3c>
    48d8:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <InterruptSenderTable+0x58>
    48dc:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <InterruptSenderTable+0x59>
    48e0:	19 95       	eicall
    48e2:	ff 91       	pop	r31
    48e4:	ef 91       	pop	r30
    48e6:	bf 91       	pop	r27
    48e8:	af 91       	pop	r26
    48ea:	9f 91       	pop	r25
    48ec:	8f 91       	pop	r24
    48ee:	7f 91       	pop	r23
    48f0:	6f 91       	pop	r22
    48f2:	5f 91       	pop	r21
    48f4:	4f 91       	pop	r20
    48f6:	3f 91       	pop	r19
    48f8:	2f 91       	pop	r18
    48fa:	0f 90       	pop	r0
    48fc:	0b be       	out	0x3b, r0	; 59
    48fe:	0f 90       	pop	r0
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	0f 90       	pop	r0
    4904:	1f 90       	pop	r1
    4906:	18 95       	reti

00004908 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    4908:	1f 92       	push	r1
    490a:	0f 92       	push	r0
    490c:	0f b6       	in	r0, 0x3f	; 63
    490e:	0f 92       	push	r0
    4910:	11 24       	eor	r1, r1
    4912:	0b b6       	in	r0, 0x3b	; 59
    4914:	0f 92       	push	r0
    4916:	2f 93       	push	r18
    4918:	3f 93       	push	r19
    491a:	4f 93       	push	r20
    491c:	5f 93       	push	r21
    491e:	6f 93       	push	r22
    4920:	7f 93       	push	r23
    4922:	8f 93       	push	r24
    4924:	9f 93       	push	r25
    4926:	af 93       	push	r26
    4928:	bf 93       	push	r27
    492a:	ef 93       	push	r30
    492c:	ff 93       	push	r31
    492e:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <InterruptFuncTable+0x5a>
    4932:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <InterruptFuncTable+0x5b>
    4936:	30 97       	sbiw	r30, 0x00	; 0
    4938:	29 f0       	breq	.+10     	; 0x4944 <__vector_45+0x3c>
    493a:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <InterruptSenderTable+0x5a>
    493e:	90 91 17 24 	lds	r25, 0x2417	; 0x802417 <InterruptSenderTable+0x5b>
    4942:	19 95       	eicall
    4944:	ff 91       	pop	r31
    4946:	ef 91       	pop	r30
    4948:	bf 91       	pop	r27
    494a:	af 91       	pop	r26
    494c:	9f 91       	pop	r25
    494e:	8f 91       	pop	r24
    4950:	7f 91       	pop	r23
    4952:	6f 91       	pop	r22
    4954:	5f 91       	pop	r21
    4956:	4f 91       	pop	r20
    4958:	3f 91       	pop	r19
    495a:	2f 91       	pop	r18
    495c:	0f 90       	pop	r0
    495e:	0b be       	out	0x3b, r0	; 59
    4960:	0f 90       	pop	r0
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	0f 90       	pop	r0
    4966:	1f 90       	pop	r1
    4968:	18 95       	reti

0000496a <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    496a:	1f 92       	push	r1
    496c:	0f 92       	push	r0
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	0f 92       	push	r0
    4972:	11 24       	eor	r1, r1
    4974:	0b b6       	in	r0, 0x3b	; 59
    4976:	0f 92       	push	r0
    4978:	2f 93       	push	r18
    497a:	3f 93       	push	r19
    497c:	4f 93       	push	r20
    497e:	5f 93       	push	r21
    4980:	6f 93       	push	r22
    4982:	7f 93       	push	r23
    4984:	8f 93       	push	r24
    4986:	9f 93       	push	r25
    4988:	af 93       	push	r26
    498a:	bf 93       	push	r27
    498c:	ef 93       	push	r30
    498e:	ff 93       	push	r31
    4990:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <InterruptFuncTable+0x5c>
    4994:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <InterruptFuncTable+0x5d>
    4998:	30 97       	sbiw	r30, 0x00	; 0
    499a:	29 f0       	breq	.+10     	; 0x49a6 <__vector_46+0x3c>
    499c:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <InterruptSenderTable+0x5c>
    49a0:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <InterruptSenderTable+0x5d>
    49a4:	19 95       	eicall
    49a6:	ff 91       	pop	r31
    49a8:	ef 91       	pop	r30
    49aa:	bf 91       	pop	r27
    49ac:	af 91       	pop	r26
    49ae:	9f 91       	pop	r25
    49b0:	8f 91       	pop	r24
    49b2:	7f 91       	pop	r23
    49b4:	6f 91       	pop	r22
    49b6:	5f 91       	pop	r21
    49b8:	4f 91       	pop	r20
    49ba:	3f 91       	pop	r19
    49bc:	2f 91       	pop	r18
    49be:	0f 90       	pop	r0
    49c0:	0b be       	out	0x3b, r0	; 59
    49c2:	0f 90       	pop	r0
    49c4:	0f be       	out	0x3f, r0	; 63
    49c6:	0f 90       	pop	r0
    49c8:	1f 90       	pop	r1
    49ca:	18 95       	reti

000049cc <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    49cc:	1f 92       	push	r1
    49ce:	0f 92       	push	r0
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	0f 92       	push	r0
    49d4:	11 24       	eor	r1, r1
    49d6:	0b b6       	in	r0, 0x3b	; 59
    49d8:	0f 92       	push	r0
    49da:	2f 93       	push	r18
    49dc:	3f 93       	push	r19
    49de:	4f 93       	push	r20
    49e0:	5f 93       	push	r21
    49e2:	6f 93       	push	r22
    49e4:	7f 93       	push	r23
    49e6:	8f 93       	push	r24
    49e8:	9f 93       	push	r25
    49ea:	af 93       	push	r26
    49ec:	bf 93       	push	r27
    49ee:	ef 93       	push	r30
    49f0:	ff 93       	push	r31
    49f2:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <InterruptFuncTable+0x5e>
    49f6:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <InterruptFuncTable+0x5f>
    49fa:	30 97       	sbiw	r30, 0x00	; 0
    49fc:	29 f0       	breq	.+10     	; 0x4a08 <__vector_47+0x3c>
    49fe:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <InterruptSenderTable+0x5e>
    4a02:	90 91 1b 24 	lds	r25, 0x241B	; 0x80241b <InterruptSenderTable+0x5f>
    4a06:	19 95       	eicall
    4a08:	ff 91       	pop	r31
    4a0a:	ef 91       	pop	r30
    4a0c:	bf 91       	pop	r27
    4a0e:	af 91       	pop	r26
    4a10:	9f 91       	pop	r25
    4a12:	8f 91       	pop	r24
    4a14:	7f 91       	pop	r23
    4a16:	6f 91       	pop	r22
    4a18:	5f 91       	pop	r21
    4a1a:	4f 91       	pop	r20
    4a1c:	3f 91       	pop	r19
    4a1e:	2f 91       	pop	r18
    4a20:	0f 90       	pop	r0
    4a22:	0b be       	out	0x3b, r0	; 59
    4a24:	0f 90       	pop	r0
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	0f 90       	pop	r0
    4a2a:	1f 90       	pop	r1
    4a2c:	18 95       	reti

00004a2e <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    4a2e:	1f 92       	push	r1
    4a30:	0f 92       	push	r0
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	0f 92       	push	r0
    4a36:	11 24       	eor	r1, r1
    4a38:	0b b6       	in	r0, 0x3b	; 59
    4a3a:	0f 92       	push	r0
    4a3c:	2f 93       	push	r18
    4a3e:	3f 93       	push	r19
    4a40:	4f 93       	push	r20
    4a42:	5f 93       	push	r21
    4a44:	6f 93       	push	r22
    4a46:	7f 93       	push	r23
    4a48:	8f 93       	push	r24
    4a4a:	9f 93       	push	r25
    4a4c:	af 93       	push	r26
    4a4e:	bf 93       	push	r27
    4a50:	ef 93       	push	r30
    4a52:	ff 93       	push	r31
    4a54:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <InterruptFuncTable+0x60>
    4a58:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <InterruptFuncTable+0x61>
    4a5c:	30 97       	sbiw	r30, 0x00	; 0
    4a5e:	29 f0       	breq	.+10     	; 0x4a6a <__vector_48+0x3c>
    4a60:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <InterruptSenderTable+0x60>
    4a64:	90 91 1d 24 	lds	r25, 0x241D	; 0x80241d <InterruptSenderTable+0x61>
    4a68:	19 95       	eicall
    4a6a:	ff 91       	pop	r31
    4a6c:	ef 91       	pop	r30
    4a6e:	bf 91       	pop	r27
    4a70:	af 91       	pop	r26
    4a72:	9f 91       	pop	r25
    4a74:	8f 91       	pop	r24
    4a76:	7f 91       	pop	r23
    4a78:	6f 91       	pop	r22
    4a7a:	5f 91       	pop	r21
    4a7c:	4f 91       	pop	r20
    4a7e:	3f 91       	pop	r19
    4a80:	2f 91       	pop	r18
    4a82:	0f 90       	pop	r0
    4a84:	0b be       	out	0x3b, r0	; 59
    4a86:	0f 90       	pop	r0
    4a88:	0f be       	out	0x3f, r0	; 63
    4a8a:	0f 90       	pop	r0
    4a8c:	1f 90       	pop	r1
    4a8e:	18 95       	reti

00004a90 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    4a90:	1f 92       	push	r1
    4a92:	0f 92       	push	r0
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	0f 92       	push	r0
    4a98:	11 24       	eor	r1, r1
    4a9a:	0b b6       	in	r0, 0x3b	; 59
    4a9c:	0f 92       	push	r0
    4a9e:	2f 93       	push	r18
    4aa0:	3f 93       	push	r19
    4aa2:	4f 93       	push	r20
    4aa4:	5f 93       	push	r21
    4aa6:	6f 93       	push	r22
    4aa8:	7f 93       	push	r23
    4aaa:	8f 93       	push	r24
    4aac:	9f 93       	push	r25
    4aae:	af 93       	push	r26
    4ab0:	bf 93       	push	r27
    4ab2:	ef 93       	push	r30
    4ab4:	ff 93       	push	r31
    4ab6:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <InterruptFuncTable+0x62>
    4aba:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <InterruptFuncTable+0x63>
    4abe:	30 97       	sbiw	r30, 0x00	; 0
    4ac0:	29 f0       	breq	.+10     	; 0x4acc <__vector_49+0x3c>
    4ac2:	80 91 1e 24 	lds	r24, 0x241E	; 0x80241e <InterruptSenderTable+0x62>
    4ac6:	90 91 1f 24 	lds	r25, 0x241F	; 0x80241f <InterruptSenderTable+0x63>
    4aca:	19 95       	eicall
    4acc:	ff 91       	pop	r31
    4ace:	ef 91       	pop	r30
    4ad0:	bf 91       	pop	r27
    4ad2:	af 91       	pop	r26
    4ad4:	9f 91       	pop	r25
    4ad6:	8f 91       	pop	r24
    4ad8:	7f 91       	pop	r23
    4ada:	6f 91       	pop	r22
    4adc:	5f 91       	pop	r21
    4ade:	4f 91       	pop	r20
    4ae0:	3f 91       	pop	r19
    4ae2:	2f 91       	pop	r18
    4ae4:	0f 90       	pop	r0
    4ae6:	0b be       	out	0x3b, r0	; 59
    4ae8:	0f 90       	pop	r0
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	0f 90       	pop	r0
    4aee:	1f 90       	pop	r1
    4af0:	18 95       	reti

00004af2 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    4af2:	1f 92       	push	r1
    4af4:	0f 92       	push	r0
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	0f 92       	push	r0
    4afa:	11 24       	eor	r1, r1
    4afc:	0b b6       	in	r0, 0x3b	; 59
    4afe:	0f 92       	push	r0
    4b00:	2f 93       	push	r18
    4b02:	3f 93       	push	r19
    4b04:	4f 93       	push	r20
    4b06:	5f 93       	push	r21
    4b08:	6f 93       	push	r22
    4b0a:	7f 93       	push	r23
    4b0c:	8f 93       	push	r24
    4b0e:	9f 93       	push	r25
    4b10:	af 93       	push	r26
    4b12:	bf 93       	push	r27
    4b14:	ef 93       	push	r30
    4b16:	ff 93       	push	r31
    4b18:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <InterruptFuncTable+0x64>
    4b1c:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <InterruptFuncTable+0x65>
    4b20:	30 97       	sbiw	r30, 0x00	; 0
    4b22:	29 f0       	breq	.+10     	; 0x4b2e <__vector_50+0x3c>
    4b24:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <InterruptSenderTable+0x64>
    4b28:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <InterruptSenderTable+0x65>
    4b2c:	19 95       	eicall
    4b2e:	ff 91       	pop	r31
    4b30:	ef 91       	pop	r30
    4b32:	bf 91       	pop	r27
    4b34:	af 91       	pop	r26
    4b36:	9f 91       	pop	r25
    4b38:	8f 91       	pop	r24
    4b3a:	7f 91       	pop	r23
    4b3c:	6f 91       	pop	r22
    4b3e:	5f 91       	pop	r21
    4b40:	4f 91       	pop	r20
    4b42:	3f 91       	pop	r19
    4b44:	2f 91       	pop	r18
    4b46:	0f 90       	pop	r0
    4b48:	0b be       	out	0x3b, r0	; 59
    4b4a:	0f 90       	pop	r0
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	0f 90       	pop	r0
    4b50:	1f 90       	pop	r1
    4b52:	18 95       	reti

00004b54 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    4b54:	1f 92       	push	r1
    4b56:	0f 92       	push	r0
    4b58:	0f b6       	in	r0, 0x3f	; 63
    4b5a:	0f 92       	push	r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	0b b6       	in	r0, 0x3b	; 59
    4b60:	0f 92       	push	r0
    4b62:	2f 93       	push	r18
    4b64:	3f 93       	push	r19
    4b66:	4f 93       	push	r20
    4b68:	5f 93       	push	r21
    4b6a:	6f 93       	push	r22
    4b6c:	7f 93       	push	r23
    4b6e:	8f 93       	push	r24
    4b70:	9f 93       	push	r25
    4b72:	af 93       	push	r26
    4b74:	bf 93       	push	r27
    4b76:	ef 93       	push	r30
    4b78:	ff 93       	push	r31
    4b7a:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <InterruptFuncTable+0x66>
    4b7e:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <InterruptFuncTable+0x67>
    4b82:	30 97       	sbiw	r30, 0x00	; 0
    4b84:	29 f0       	breq	.+10     	; 0x4b90 <__vector_51+0x3c>
    4b86:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <InterruptSenderTable+0x66>
    4b8a:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <InterruptSenderTable+0x67>
    4b8e:	19 95       	eicall
    4b90:	ff 91       	pop	r31
    4b92:	ef 91       	pop	r30
    4b94:	bf 91       	pop	r27
    4b96:	af 91       	pop	r26
    4b98:	9f 91       	pop	r25
    4b9a:	8f 91       	pop	r24
    4b9c:	7f 91       	pop	r23
    4b9e:	6f 91       	pop	r22
    4ba0:	5f 91       	pop	r21
    4ba2:	4f 91       	pop	r20
    4ba4:	3f 91       	pop	r19
    4ba6:	2f 91       	pop	r18
    4ba8:	0f 90       	pop	r0
    4baa:	0b be       	out	0x3b, r0	; 59
    4bac:	0f 90       	pop	r0
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	0f 90       	pop	r0
    4bb2:	1f 90       	pop	r1
    4bb4:	18 95       	reti

00004bb6 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    4bb6:	1f 92       	push	r1
    4bb8:	0f 92       	push	r0
    4bba:	0f b6       	in	r0, 0x3f	; 63
    4bbc:	0f 92       	push	r0
    4bbe:	11 24       	eor	r1, r1
    4bc0:	0b b6       	in	r0, 0x3b	; 59
    4bc2:	0f 92       	push	r0
    4bc4:	2f 93       	push	r18
    4bc6:	3f 93       	push	r19
    4bc8:	4f 93       	push	r20
    4bca:	5f 93       	push	r21
    4bcc:	6f 93       	push	r22
    4bce:	7f 93       	push	r23
    4bd0:	8f 93       	push	r24
    4bd2:	9f 93       	push	r25
    4bd4:	af 93       	push	r26
    4bd6:	bf 93       	push	r27
    4bd8:	ef 93       	push	r30
    4bda:	ff 93       	push	r31
    4bdc:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <InterruptFuncTable+0x68>
    4be0:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <InterruptFuncTable+0x69>
    4be4:	30 97       	sbiw	r30, 0x00	; 0
    4be6:	29 f0       	breq	.+10     	; 0x4bf2 <__vector_52+0x3c>
    4be8:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <InterruptSenderTable+0x68>
    4bec:	90 91 25 24 	lds	r25, 0x2425	; 0x802425 <InterruptSenderTable+0x69>
    4bf0:	19 95       	eicall
    4bf2:	ff 91       	pop	r31
    4bf4:	ef 91       	pop	r30
    4bf6:	bf 91       	pop	r27
    4bf8:	af 91       	pop	r26
    4bfa:	9f 91       	pop	r25
    4bfc:	8f 91       	pop	r24
    4bfe:	7f 91       	pop	r23
    4c00:	6f 91       	pop	r22
    4c02:	5f 91       	pop	r21
    4c04:	4f 91       	pop	r20
    4c06:	3f 91       	pop	r19
    4c08:	2f 91       	pop	r18
    4c0a:	0f 90       	pop	r0
    4c0c:	0b be       	out	0x3b, r0	; 59
    4c0e:	0f 90       	pop	r0
    4c10:	0f be       	out	0x3f, r0	; 63
    4c12:	0f 90       	pop	r0
    4c14:	1f 90       	pop	r1
    4c16:	18 95       	reti

00004c18 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    4c18:	1f 92       	push	r1
    4c1a:	0f 92       	push	r0
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	0f 92       	push	r0
    4c20:	11 24       	eor	r1, r1
    4c22:	0b b6       	in	r0, 0x3b	; 59
    4c24:	0f 92       	push	r0
    4c26:	2f 93       	push	r18
    4c28:	3f 93       	push	r19
    4c2a:	4f 93       	push	r20
    4c2c:	5f 93       	push	r21
    4c2e:	6f 93       	push	r22
    4c30:	7f 93       	push	r23
    4c32:	8f 93       	push	r24
    4c34:	9f 93       	push	r25
    4c36:	af 93       	push	r26
    4c38:	bf 93       	push	r27
    4c3a:	ef 93       	push	r30
    4c3c:	ff 93       	push	r31
    4c3e:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <InterruptFuncTable+0x6a>
    4c42:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <InterruptFuncTable+0x6b>
    4c46:	30 97       	sbiw	r30, 0x00	; 0
    4c48:	29 f0       	breq	.+10     	; 0x4c54 <__vector_53+0x3c>
    4c4a:	80 91 26 24 	lds	r24, 0x2426	; 0x802426 <InterruptSenderTable+0x6a>
    4c4e:	90 91 27 24 	lds	r25, 0x2427	; 0x802427 <InterruptSenderTable+0x6b>
    4c52:	19 95       	eicall
    4c54:	ff 91       	pop	r31
    4c56:	ef 91       	pop	r30
    4c58:	bf 91       	pop	r27
    4c5a:	af 91       	pop	r26
    4c5c:	9f 91       	pop	r25
    4c5e:	8f 91       	pop	r24
    4c60:	7f 91       	pop	r23
    4c62:	6f 91       	pop	r22
    4c64:	5f 91       	pop	r21
    4c66:	4f 91       	pop	r20
    4c68:	3f 91       	pop	r19
    4c6a:	2f 91       	pop	r18
    4c6c:	0f 90       	pop	r0
    4c6e:	0b be       	out	0x3b, r0	; 59
    4c70:	0f 90       	pop	r0
    4c72:	0f be       	out	0x3f, r0	; 63
    4c74:	0f 90       	pop	r0
    4c76:	1f 90       	pop	r1
    4c78:	18 95       	reti

00004c7a <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    4c7a:	1f 92       	push	r1
    4c7c:	0f 92       	push	r0
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	0f 92       	push	r0
    4c82:	11 24       	eor	r1, r1
    4c84:	0b b6       	in	r0, 0x3b	; 59
    4c86:	0f 92       	push	r0
    4c88:	2f 93       	push	r18
    4c8a:	3f 93       	push	r19
    4c8c:	4f 93       	push	r20
    4c8e:	5f 93       	push	r21
    4c90:	6f 93       	push	r22
    4c92:	7f 93       	push	r23
    4c94:	8f 93       	push	r24
    4c96:	9f 93       	push	r25
    4c98:	af 93       	push	r26
    4c9a:	bf 93       	push	r27
    4c9c:	ef 93       	push	r30
    4c9e:	ff 93       	push	r31
    4ca0:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <InterruptFuncTable+0x6c>
    4ca4:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <InterruptFuncTable+0x6d>
    4ca8:	30 97       	sbiw	r30, 0x00	; 0
    4caa:	29 f0       	breq	.+10     	; 0x4cb6 <__vector_54+0x3c>
    4cac:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <InterruptSenderTable+0x6c>
    4cb0:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <InterruptSenderTable+0x6d>
    4cb4:	19 95       	eicall
    4cb6:	ff 91       	pop	r31
    4cb8:	ef 91       	pop	r30
    4cba:	bf 91       	pop	r27
    4cbc:	af 91       	pop	r26
    4cbe:	9f 91       	pop	r25
    4cc0:	8f 91       	pop	r24
    4cc2:	7f 91       	pop	r23
    4cc4:	6f 91       	pop	r22
    4cc6:	5f 91       	pop	r21
    4cc8:	4f 91       	pop	r20
    4cca:	3f 91       	pop	r19
    4ccc:	2f 91       	pop	r18
    4cce:	0f 90       	pop	r0
    4cd0:	0b be       	out	0x3b, r0	; 59
    4cd2:	0f 90       	pop	r0
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	0f 90       	pop	r0
    4cd8:	1f 90       	pop	r1
    4cda:	18 95       	reti

00004cdc <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    4cdc:	1f 92       	push	r1
    4cde:	0f 92       	push	r0
    4ce0:	0f b6       	in	r0, 0x3f	; 63
    4ce2:	0f 92       	push	r0
    4ce4:	11 24       	eor	r1, r1
    4ce6:	0b b6       	in	r0, 0x3b	; 59
    4ce8:	0f 92       	push	r0
    4cea:	2f 93       	push	r18
    4cec:	3f 93       	push	r19
    4cee:	4f 93       	push	r20
    4cf0:	5f 93       	push	r21
    4cf2:	6f 93       	push	r22
    4cf4:	7f 93       	push	r23
    4cf6:	8f 93       	push	r24
    4cf8:	9f 93       	push	r25
    4cfa:	af 93       	push	r26
    4cfc:	bf 93       	push	r27
    4cfe:	ef 93       	push	r30
    4d00:	ff 93       	push	r31
    4d02:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <InterruptFuncTable+0x6e>
    4d06:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <InterruptFuncTable+0x6f>
    4d0a:	30 97       	sbiw	r30, 0x00	; 0
    4d0c:	29 f0       	breq	.+10     	; 0x4d18 <__vector_55+0x3c>
    4d0e:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <InterruptSenderTable+0x6e>
    4d12:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <InterruptSenderTable+0x6f>
    4d16:	19 95       	eicall
    4d18:	ff 91       	pop	r31
    4d1a:	ef 91       	pop	r30
    4d1c:	bf 91       	pop	r27
    4d1e:	af 91       	pop	r26
    4d20:	9f 91       	pop	r25
    4d22:	8f 91       	pop	r24
    4d24:	7f 91       	pop	r23
    4d26:	6f 91       	pop	r22
    4d28:	5f 91       	pop	r21
    4d2a:	4f 91       	pop	r20
    4d2c:	3f 91       	pop	r19
    4d2e:	2f 91       	pop	r18
    4d30:	0f 90       	pop	r0
    4d32:	0b be       	out	0x3b, r0	; 59
    4d34:	0f 90       	pop	r0
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	0f 90       	pop	r0
    4d3a:	1f 90       	pop	r1
    4d3c:	18 95       	reti

00004d3e <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    4d3e:	1f 92       	push	r1
    4d40:	0f 92       	push	r0
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	0f 92       	push	r0
    4d46:	11 24       	eor	r1, r1
    4d48:	0b b6       	in	r0, 0x3b	; 59
    4d4a:	0f 92       	push	r0
    4d4c:	2f 93       	push	r18
    4d4e:	3f 93       	push	r19
    4d50:	4f 93       	push	r20
    4d52:	5f 93       	push	r21
    4d54:	6f 93       	push	r22
    4d56:	7f 93       	push	r23
    4d58:	8f 93       	push	r24
    4d5a:	9f 93       	push	r25
    4d5c:	af 93       	push	r26
    4d5e:	bf 93       	push	r27
    4d60:	ef 93       	push	r30
    4d62:	ff 93       	push	r31
    4d64:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <InterruptFuncTable+0x70>
    4d68:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <InterruptFuncTable+0x71>
    4d6c:	30 97       	sbiw	r30, 0x00	; 0
    4d6e:	29 f0       	breq	.+10     	; 0x4d7a <__vector_56+0x3c>
    4d70:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <InterruptSenderTable+0x70>
    4d74:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <InterruptSenderTable+0x71>
    4d78:	19 95       	eicall
    4d7a:	ff 91       	pop	r31
    4d7c:	ef 91       	pop	r30
    4d7e:	bf 91       	pop	r27
    4d80:	af 91       	pop	r26
    4d82:	9f 91       	pop	r25
    4d84:	8f 91       	pop	r24
    4d86:	7f 91       	pop	r23
    4d88:	6f 91       	pop	r22
    4d8a:	5f 91       	pop	r21
    4d8c:	4f 91       	pop	r20
    4d8e:	3f 91       	pop	r19
    4d90:	2f 91       	pop	r18
    4d92:	0f 90       	pop	r0
    4d94:	0b be       	out	0x3b, r0	; 59
    4d96:	0f 90       	pop	r0
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	0f 90       	pop	r0
    4d9c:	1f 90       	pop	r1
    4d9e:	18 95       	reti

00004da0 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    4da0:	1f 92       	push	r1
    4da2:	0f 92       	push	r0
    4da4:	0f b6       	in	r0, 0x3f	; 63
    4da6:	0f 92       	push	r0
    4da8:	11 24       	eor	r1, r1
    4daa:	0b b6       	in	r0, 0x3b	; 59
    4dac:	0f 92       	push	r0
    4dae:	2f 93       	push	r18
    4db0:	3f 93       	push	r19
    4db2:	4f 93       	push	r20
    4db4:	5f 93       	push	r21
    4db6:	6f 93       	push	r22
    4db8:	7f 93       	push	r23
    4dba:	8f 93       	push	r24
    4dbc:	9f 93       	push	r25
    4dbe:	af 93       	push	r26
    4dc0:	bf 93       	push	r27
    4dc2:	ef 93       	push	r30
    4dc4:	ff 93       	push	r31
    4dc6:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <InterruptFuncTable+0x72>
    4dca:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <InterruptFuncTable+0x73>
    4dce:	30 97       	sbiw	r30, 0x00	; 0
    4dd0:	29 f0       	breq	.+10     	; 0x4ddc <__vector_57+0x3c>
    4dd2:	80 91 2e 24 	lds	r24, 0x242E	; 0x80242e <InterruptSenderTable+0x72>
    4dd6:	90 91 2f 24 	lds	r25, 0x242F	; 0x80242f <InterruptSenderTable+0x73>
    4dda:	19 95       	eicall
    4ddc:	ff 91       	pop	r31
    4dde:	ef 91       	pop	r30
    4de0:	bf 91       	pop	r27
    4de2:	af 91       	pop	r26
    4de4:	9f 91       	pop	r25
    4de6:	8f 91       	pop	r24
    4de8:	7f 91       	pop	r23
    4dea:	6f 91       	pop	r22
    4dec:	5f 91       	pop	r21
    4dee:	4f 91       	pop	r20
    4df0:	3f 91       	pop	r19
    4df2:	2f 91       	pop	r18
    4df4:	0f 90       	pop	r0
    4df6:	0b be       	out	0x3b, r0	; 59
    4df8:	0f 90       	pop	r0
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	0f 90       	pop	r0
    4dfe:	1f 90       	pop	r1
    4e00:	18 95       	reti

00004e02 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    4e02:	1f 92       	push	r1
    4e04:	0f 92       	push	r0
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	0f 92       	push	r0
    4e0a:	11 24       	eor	r1, r1
    4e0c:	0b b6       	in	r0, 0x3b	; 59
    4e0e:	0f 92       	push	r0
    4e10:	2f 93       	push	r18
    4e12:	3f 93       	push	r19
    4e14:	4f 93       	push	r20
    4e16:	5f 93       	push	r21
    4e18:	6f 93       	push	r22
    4e1a:	7f 93       	push	r23
    4e1c:	8f 93       	push	r24
    4e1e:	9f 93       	push	r25
    4e20:	af 93       	push	r26
    4e22:	bf 93       	push	r27
    4e24:	ef 93       	push	r30
    4e26:	ff 93       	push	r31
    4e28:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <InterruptFuncTable+0x74>
    4e2c:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <InterruptFuncTable+0x75>
    4e30:	30 97       	sbiw	r30, 0x00	; 0
    4e32:	29 f0       	breq	.+10     	; 0x4e3e <__vector_58+0x3c>
    4e34:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <InterruptSenderTable+0x74>
    4e38:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <InterruptSenderTable+0x75>
    4e3c:	19 95       	eicall
    4e3e:	ff 91       	pop	r31
    4e40:	ef 91       	pop	r30
    4e42:	bf 91       	pop	r27
    4e44:	af 91       	pop	r26
    4e46:	9f 91       	pop	r25
    4e48:	8f 91       	pop	r24
    4e4a:	7f 91       	pop	r23
    4e4c:	6f 91       	pop	r22
    4e4e:	5f 91       	pop	r21
    4e50:	4f 91       	pop	r20
    4e52:	3f 91       	pop	r19
    4e54:	2f 91       	pop	r18
    4e56:	0f 90       	pop	r0
    4e58:	0b be       	out	0x3b, r0	; 59
    4e5a:	0f 90       	pop	r0
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	0f 90       	pop	r0
    4e60:	1f 90       	pop	r1
    4e62:	18 95       	reti

00004e64 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    4e64:	1f 92       	push	r1
    4e66:	0f 92       	push	r0
    4e68:	0f b6       	in	r0, 0x3f	; 63
    4e6a:	0f 92       	push	r0
    4e6c:	11 24       	eor	r1, r1
    4e6e:	0b b6       	in	r0, 0x3b	; 59
    4e70:	0f 92       	push	r0
    4e72:	2f 93       	push	r18
    4e74:	3f 93       	push	r19
    4e76:	4f 93       	push	r20
    4e78:	5f 93       	push	r21
    4e7a:	6f 93       	push	r22
    4e7c:	7f 93       	push	r23
    4e7e:	8f 93       	push	r24
    4e80:	9f 93       	push	r25
    4e82:	af 93       	push	r26
    4e84:	bf 93       	push	r27
    4e86:	ef 93       	push	r30
    4e88:	ff 93       	push	r31
    4e8a:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <InterruptFuncTable+0x76>
    4e8e:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <InterruptFuncTable+0x77>
    4e92:	30 97       	sbiw	r30, 0x00	; 0
    4e94:	29 f0       	breq	.+10     	; 0x4ea0 <__vector_59+0x3c>
    4e96:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <InterruptSenderTable+0x76>
    4e9a:	90 91 33 24 	lds	r25, 0x2433	; 0x802433 <InterruptSenderTable+0x77>
    4e9e:	19 95       	eicall
    4ea0:	ff 91       	pop	r31
    4ea2:	ef 91       	pop	r30
    4ea4:	bf 91       	pop	r27
    4ea6:	af 91       	pop	r26
    4ea8:	9f 91       	pop	r25
    4eaa:	8f 91       	pop	r24
    4eac:	7f 91       	pop	r23
    4eae:	6f 91       	pop	r22
    4eb0:	5f 91       	pop	r21
    4eb2:	4f 91       	pop	r20
    4eb4:	3f 91       	pop	r19
    4eb6:	2f 91       	pop	r18
    4eb8:	0f 90       	pop	r0
    4eba:	0b be       	out	0x3b, r0	; 59
    4ebc:	0f 90       	pop	r0
    4ebe:	0f be       	out	0x3f, r0	; 63
    4ec0:	0f 90       	pop	r0
    4ec2:	1f 90       	pop	r1
    4ec4:	18 95       	reti

00004ec6 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    4ec6:	1f 92       	push	r1
    4ec8:	0f 92       	push	r0
    4eca:	0f b6       	in	r0, 0x3f	; 63
    4ecc:	0f 92       	push	r0
    4ece:	11 24       	eor	r1, r1
    4ed0:	0b b6       	in	r0, 0x3b	; 59
    4ed2:	0f 92       	push	r0
    4ed4:	2f 93       	push	r18
    4ed6:	3f 93       	push	r19
    4ed8:	4f 93       	push	r20
    4eda:	5f 93       	push	r21
    4edc:	6f 93       	push	r22
    4ede:	7f 93       	push	r23
    4ee0:	8f 93       	push	r24
    4ee2:	9f 93       	push	r25
    4ee4:	af 93       	push	r26
    4ee6:	bf 93       	push	r27
    4ee8:	ef 93       	push	r30
    4eea:	ff 93       	push	r31
    4eec:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <InterruptFuncTable+0x78>
    4ef0:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <InterruptFuncTable+0x79>
    4ef4:	30 97       	sbiw	r30, 0x00	; 0
    4ef6:	29 f0       	breq	.+10     	; 0x4f02 <__vector_60+0x3c>
    4ef8:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <InterruptSenderTable+0x78>
    4efc:	90 91 35 24 	lds	r25, 0x2435	; 0x802435 <InterruptSenderTable+0x79>
    4f00:	19 95       	eicall
    4f02:	ff 91       	pop	r31
    4f04:	ef 91       	pop	r30
    4f06:	bf 91       	pop	r27
    4f08:	af 91       	pop	r26
    4f0a:	9f 91       	pop	r25
    4f0c:	8f 91       	pop	r24
    4f0e:	7f 91       	pop	r23
    4f10:	6f 91       	pop	r22
    4f12:	5f 91       	pop	r21
    4f14:	4f 91       	pop	r20
    4f16:	3f 91       	pop	r19
    4f18:	2f 91       	pop	r18
    4f1a:	0f 90       	pop	r0
    4f1c:	0b be       	out	0x3b, r0	; 59
    4f1e:	0f 90       	pop	r0
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	0f 90       	pop	r0
    4f24:	1f 90       	pop	r1
    4f26:	18 95       	reti

00004f28 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    4f28:	1f 92       	push	r1
    4f2a:	0f 92       	push	r0
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	0f 92       	push	r0
    4f30:	11 24       	eor	r1, r1
    4f32:	0b b6       	in	r0, 0x3b	; 59
    4f34:	0f 92       	push	r0
    4f36:	2f 93       	push	r18
    4f38:	3f 93       	push	r19
    4f3a:	4f 93       	push	r20
    4f3c:	5f 93       	push	r21
    4f3e:	6f 93       	push	r22
    4f40:	7f 93       	push	r23
    4f42:	8f 93       	push	r24
    4f44:	9f 93       	push	r25
    4f46:	af 93       	push	r26
    4f48:	bf 93       	push	r27
    4f4a:	ef 93       	push	r30
    4f4c:	ff 93       	push	r31
    4f4e:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <InterruptFuncTable+0x7a>
    4f52:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <InterruptFuncTable+0x7b>
    4f56:	30 97       	sbiw	r30, 0x00	; 0
    4f58:	29 f0       	breq	.+10     	; 0x4f64 <__vector_61+0x3c>
    4f5a:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <InterruptSenderTable+0x7a>
    4f5e:	90 91 37 24 	lds	r25, 0x2437	; 0x802437 <InterruptSenderTable+0x7b>
    4f62:	19 95       	eicall
    4f64:	ff 91       	pop	r31
    4f66:	ef 91       	pop	r30
    4f68:	bf 91       	pop	r27
    4f6a:	af 91       	pop	r26
    4f6c:	9f 91       	pop	r25
    4f6e:	8f 91       	pop	r24
    4f70:	7f 91       	pop	r23
    4f72:	6f 91       	pop	r22
    4f74:	5f 91       	pop	r21
    4f76:	4f 91       	pop	r20
    4f78:	3f 91       	pop	r19
    4f7a:	2f 91       	pop	r18
    4f7c:	0f 90       	pop	r0
    4f7e:	0b be       	out	0x3b, r0	; 59
    4f80:	0f 90       	pop	r0
    4f82:	0f be       	out	0x3f, r0	; 63
    4f84:	0f 90       	pop	r0
    4f86:	1f 90       	pop	r1
    4f88:	18 95       	reti

00004f8a <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    4f8a:	1f 92       	push	r1
    4f8c:	0f 92       	push	r0
    4f8e:	0f b6       	in	r0, 0x3f	; 63
    4f90:	0f 92       	push	r0
    4f92:	11 24       	eor	r1, r1
    4f94:	0b b6       	in	r0, 0x3b	; 59
    4f96:	0f 92       	push	r0
    4f98:	2f 93       	push	r18
    4f9a:	3f 93       	push	r19
    4f9c:	4f 93       	push	r20
    4f9e:	5f 93       	push	r21
    4fa0:	6f 93       	push	r22
    4fa2:	7f 93       	push	r23
    4fa4:	8f 93       	push	r24
    4fa6:	9f 93       	push	r25
    4fa8:	af 93       	push	r26
    4faa:	bf 93       	push	r27
    4fac:	ef 93       	push	r30
    4fae:	ff 93       	push	r31
    4fb0:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <InterruptFuncTable+0x7c>
    4fb4:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <InterruptFuncTable+0x7d>
    4fb8:	30 97       	sbiw	r30, 0x00	; 0
    4fba:	29 f0       	breq	.+10     	; 0x4fc6 <__vector_62+0x3c>
    4fbc:	80 91 38 24 	lds	r24, 0x2438	; 0x802438 <InterruptSenderTable+0x7c>
    4fc0:	90 91 39 24 	lds	r25, 0x2439	; 0x802439 <InterruptSenderTable+0x7d>
    4fc4:	19 95       	eicall
    4fc6:	ff 91       	pop	r31
    4fc8:	ef 91       	pop	r30
    4fca:	bf 91       	pop	r27
    4fcc:	af 91       	pop	r26
    4fce:	9f 91       	pop	r25
    4fd0:	8f 91       	pop	r24
    4fd2:	7f 91       	pop	r23
    4fd4:	6f 91       	pop	r22
    4fd6:	5f 91       	pop	r21
    4fd8:	4f 91       	pop	r20
    4fda:	3f 91       	pop	r19
    4fdc:	2f 91       	pop	r18
    4fde:	0f 90       	pop	r0
    4fe0:	0b be       	out	0x3b, r0	; 59
    4fe2:	0f 90       	pop	r0
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	0f 90       	pop	r0
    4fe8:	1f 90       	pop	r1
    4fea:	18 95       	reti

00004fec <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    4fec:	1f 92       	push	r1
    4fee:	0f 92       	push	r0
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	0f 92       	push	r0
    4ff4:	11 24       	eor	r1, r1
    4ff6:	0b b6       	in	r0, 0x3b	; 59
    4ff8:	0f 92       	push	r0
    4ffa:	2f 93       	push	r18
    4ffc:	3f 93       	push	r19
    4ffe:	4f 93       	push	r20
    5000:	5f 93       	push	r21
    5002:	6f 93       	push	r22
    5004:	7f 93       	push	r23
    5006:	8f 93       	push	r24
    5008:	9f 93       	push	r25
    500a:	af 93       	push	r26
    500c:	bf 93       	push	r27
    500e:	ef 93       	push	r30
    5010:	ff 93       	push	r31
    5012:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <InterruptFuncTable+0x7e>
    5016:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <InterruptFuncTable+0x7f>
    501a:	30 97       	sbiw	r30, 0x00	; 0
    501c:	29 f0       	breq	.+10     	; 0x5028 <__vector_63+0x3c>
    501e:	80 91 3a 24 	lds	r24, 0x243A	; 0x80243a <InterruptSenderTable+0x7e>
    5022:	90 91 3b 24 	lds	r25, 0x243B	; 0x80243b <InterruptSenderTable+0x7f>
    5026:	19 95       	eicall
    5028:	ff 91       	pop	r31
    502a:	ef 91       	pop	r30
    502c:	bf 91       	pop	r27
    502e:	af 91       	pop	r26
    5030:	9f 91       	pop	r25
    5032:	8f 91       	pop	r24
    5034:	7f 91       	pop	r23
    5036:	6f 91       	pop	r22
    5038:	5f 91       	pop	r21
    503a:	4f 91       	pop	r20
    503c:	3f 91       	pop	r19
    503e:	2f 91       	pop	r18
    5040:	0f 90       	pop	r0
    5042:	0b be       	out	0x3b, r0	; 59
    5044:	0f 90       	pop	r0
    5046:	0f be       	out	0x3f, r0	; 63
    5048:	0f 90       	pop	r0
    504a:	1f 90       	pop	r1
    504c:	18 95       	reti

0000504e <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    504e:	1f 92       	push	r1
    5050:	0f 92       	push	r0
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	0f 92       	push	r0
    5056:	11 24       	eor	r1, r1
    5058:	0b b6       	in	r0, 0x3b	; 59
    505a:	0f 92       	push	r0
    505c:	2f 93       	push	r18
    505e:	3f 93       	push	r19
    5060:	4f 93       	push	r20
    5062:	5f 93       	push	r21
    5064:	6f 93       	push	r22
    5066:	7f 93       	push	r23
    5068:	8f 93       	push	r24
    506a:	9f 93       	push	r25
    506c:	af 93       	push	r26
    506e:	bf 93       	push	r27
    5070:	ef 93       	push	r30
    5072:	ff 93       	push	r31
    5074:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <InterruptFuncTable+0x80>
    5078:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <InterruptFuncTable+0x81>
    507c:	30 97       	sbiw	r30, 0x00	; 0
    507e:	29 f0       	breq	.+10     	; 0x508a <__vector_64+0x3c>
    5080:	80 91 3c 24 	lds	r24, 0x243C	; 0x80243c <InterruptSenderTable+0x80>
    5084:	90 91 3d 24 	lds	r25, 0x243D	; 0x80243d <InterruptSenderTable+0x81>
    5088:	19 95       	eicall
    508a:	ff 91       	pop	r31
    508c:	ef 91       	pop	r30
    508e:	bf 91       	pop	r27
    5090:	af 91       	pop	r26
    5092:	9f 91       	pop	r25
    5094:	8f 91       	pop	r24
    5096:	7f 91       	pop	r23
    5098:	6f 91       	pop	r22
    509a:	5f 91       	pop	r21
    509c:	4f 91       	pop	r20
    509e:	3f 91       	pop	r19
    50a0:	2f 91       	pop	r18
    50a2:	0f 90       	pop	r0
    50a4:	0b be       	out	0x3b, r0	; 59
    50a6:	0f 90       	pop	r0
    50a8:	0f be       	out	0x3f, r0	; 63
    50aa:	0f 90       	pop	r0
    50ac:	1f 90       	pop	r1
    50ae:	18 95       	reti

000050b0 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    50b0:	1f 92       	push	r1
    50b2:	0f 92       	push	r0
    50b4:	0f b6       	in	r0, 0x3f	; 63
    50b6:	0f 92       	push	r0
    50b8:	11 24       	eor	r1, r1
    50ba:	0b b6       	in	r0, 0x3b	; 59
    50bc:	0f 92       	push	r0
    50be:	2f 93       	push	r18
    50c0:	3f 93       	push	r19
    50c2:	4f 93       	push	r20
    50c4:	5f 93       	push	r21
    50c6:	6f 93       	push	r22
    50c8:	7f 93       	push	r23
    50ca:	8f 93       	push	r24
    50cc:	9f 93       	push	r25
    50ce:	af 93       	push	r26
    50d0:	bf 93       	push	r27
    50d2:	ef 93       	push	r30
    50d4:	ff 93       	push	r31
    50d6:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <InterruptFuncTable+0x82>
    50da:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <InterruptFuncTable+0x83>
    50de:	30 97       	sbiw	r30, 0x00	; 0
    50e0:	29 f0       	breq	.+10     	; 0x50ec <__vector_65+0x3c>
    50e2:	80 91 3e 24 	lds	r24, 0x243E	; 0x80243e <InterruptSenderTable+0x82>
    50e6:	90 91 3f 24 	lds	r25, 0x243F	; 0x80243f <InterruptSenderTable+0x83>
    50ea:	19 95       	eicall
    50ec:	ff 91       	pop	r31
    50ee:	ef 91       	pop	r30
    50f0:	bf 91       	pop	r27
    50f2:	af 91       	pop	r26
    50f4:	9f 91       	pop	r25
    50f6:	8f 91       	pop	r24
    50f8:	7f 91       	pop	r23
    50fa:	6f 91       	pop	r22
    50fc:	5f 91       	pop	r21
    50fe:	4f 91       	pop	r20
    5100:	3f 91       	pop	r19
    5102:	2f 91       	pop	r18
    5104:	0f 90       	pop	r0
    5106:	0b be       	out	0x3b, r0	; 59
    5108:	0f 90       	pop	r0
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	0f 90       	pop	r0
    510e:	1f 90       	pop	r1
    5110:	18 95       	reti

00005112 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    5112:	1f 92       	push	r1
    5114:	0f 92       	push	r0
    5116:	0f b6       	in	r0, 0x3f	; 63
    5118:	0f 92       	push	r0
    511a:	11 24       	eor	r1, r1
    511c:	0b b6       	in	r0, 0x3b	; 59
    511e:	0f 92       	push	r0
    5120:	2f 93       	push	r18
    5122:	3f 93       	push	r19
    5124:	4f 93       	push	r20
    5126:	5f 93       	push	r21
    5128:	6f 93       	push	r22
    512a:	7f 93       	push	r23
    512c:	8f 93       	push	r24
    512e:	9f 93       	push	r25
    5130:	af 93       	push	r26
    5132:	bf 93       	push	r27
    5134:	ef 93       	push	r30
    5136:	ff 93       	push	r31
    5138:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <InterruptFuncTable+0x84>
    513c:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <InterruptFuncTable+0x85>
    5140:	30 97       	sbiw	r30, 0x00	; 0
    5142:	29 f0       	breq	.+10     	; 0x514e <__vector_66+0x3c>
    5144:	80 91 40 24 	lds	r24, 0x2440	; 0x802440 <InterruptSenderTable+0x84>
    5148:	90 91 41 24 	lds	r25, 0x2441	; 0x802441 <InterruptSenderTable+0x85>
    514c:	19 95       	eicall
    514e:	ff 91       	pop	r31
    5150:	ef 91       	pop	r30
    5152:	bf 91       	pop	r27
    5154:	af 91       	pop	r26
    5156:	9f 91       	pop	r25
    5158:	8f 91       	pop	r24
    515a:	7f 91       	pop	r23
    515c:	6f 91       	pop	r22
    515e:	5f 91       	pop	r21
    5160:	4f 91       	pop	r20
    5162:	3f 91       	pop	r19
    5164:	2f 91       	pop	r18
    5166:	0f 90       	pop	r0
    5168:	0b be       	out	0x3b, r0	; 59
    516a:	0f 90       	pop	r0
    516c:	0f be       	out	0x3f, r0	; 63
    516e:	0f 90       	pop	r0
    5170:	1f 90       	pop	r1
    5172:	18 95       	reti

00005174 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    5174:	1f 92       	push	r1
    5176:	0f 92       	push	r0
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	0f 92       	push	r0
    517c:	11 24       	eor	r1, r1
    517e:	0b b6       	in	r0, 0x3b	; 59
    5180:	0f 92       	push	r0
    5182:	2f 93       	push	r18
    5184:	3f 93       	push	r19
    5186:	4f 93       	push	r20
    5188:	5f 93       	push	r21
    518a:	6f 93       	push	r22
    518c:	7f 93       	push	r23
    518e:	8f 93       	push	r24
    5190:	9f 93       	push	r25
    5192:	af 93       	push	r26
    5194:	bf 93       	push	r27
    5196:	ef 93       	push	r30
    5198:	ff 93       	push	r31
    519a:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <InterruptFuncTable+0x86>
    519e:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <InterruptFuncTable+0x87>
    51a2:	30 97       	sbiw	r30, 0x00	; 0
    51a4:	29 f0       	breq	.+10     	; 0x51b0 <__vector_67+0x3c>
    51a6:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <InterruptSenderTable+0x86>
    51aa:	90 91 43 24 	lds	r25, 0x2443	; 0x802443 <InterruptSenderTable+0x87>
    51ae:	19 95       	eicall
    51b0:	ff 91       	pop	r31
    51b2:	ef 91       	pop	r30
    51b4:	bf 91       	pop	r27
    51b6:	af 91       	pop	r26
    51b8:	9f 91       	pop	r25
    51ba:	8f 91       	pop	r24
    51bc:	7f 91       	pop	r23
    51be:	6f 91       	pop	r22
    51c0:	5f 91       	pop	r21
    51c2:	4f 91       	pop	r20
    51c4:	3f 91       	pop	r19
    51c6:	2f 91       	pop	r18
    51c8:	0f 90       	pop	r0
    51ca:	0b be       	out	0x3b, r0	; 59
    51cc:	0f 90       	pop	r0
    51ce:	0f be       	out	0x3f, r0	; 63
    51d0:	0f 90       	pop	r0
    51d2:	1f 90       	pop	r1
    51d4:	18 95       	reti

000051d6 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    51d6:	1f 92       	push	r1
    51d8:	0f 92       	push	r0
    51da:	0f b6       	in	r0, 0x3f	; 63
    51dc:	0f 92       	push	r0
    51de:	11 24       	eor	r1, r1
    51e0:	0b b6       	in	r0, 0x3b	; 59
    51e2:	0f 92       	push	r0
    51e4:	2f 93       	push	r18
    51e6:	3f 93       	push	r19
    51e8:	4f 93       	push	r20
    51ea:	5f 93       	push	r21
    51ec:	6f 93       	push	r22
    51ee:	7f 93       	push	r23
    51f0:	8f 93       	push	r24
    51f2:	9f 93       	push	r25
    51f4:	af 93       	push	r26
    51f6:	bf 93       	push	r27
    51f8:	ef 93       	push	r30
    51fa:	ff 93       	push	r31
    51fc:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <InterruptFuncTable+0x88>
    5200:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <InterruptFuncTable+0x89>
    5204:	30 97       	sbiw	r30, 0x00	; 0
    5206:	29 f0       	breq	.+10     	; 0x5212 <__vector_68+0x3c>
    5208:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <InterruptSenderTable+0x88>
    520c:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <InterruptSenderTable+0x89>
    5210:	19 95       	eicall
    5212:	ff 91       	pop	r31
    5214:	ef 91       	pop	r30
    5216:	bf 91       	pop	r27
    5218:	af 91       	pop	r26
    521a:	9f 91       	pop	r25
    521c:	8f 91       	pop	r24
    521e:	7f 91       	pop	r23
    5220:	6f 91       	pop	r22
    5222:	5f 91       	pop	r21
    5224:	4f 91       	pop	r20
    5226:	3f 91       	pop	r19
    5228:	2f 91       	pop	r18
    522a:	0f 90       	pop	r0
    522c:	0b be       	out	0x3b, r0	; 59
    522e:	0f 90       	pop	r0
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	0f 90       	pop	r0
    5234:	1f 90       	pop	r1
    5236:	18 95       	reti

00005238 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    5238:	1f 92       	push	r1
    523a:	0f 92       	push	r0
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	0f 92       	push	r0
    5240:	11 24       	eor	r1, r1
    5242:	0b b6       	in	r0, 0x3b	; 59
    5244:	0f 92       	push	r0
    5246:	2f 93       	push	r18
    5248:	3f 93       	push	r19
    524a:	4f 93       	push	r20
    524c:	5f 93       	push	r21
    524e:	6f 93       	push	r22
    5250:	7f 93       	push	r23
    5252:	8f 93       	push	r24
    5254:	9f 93       	push	r25
    5256:	af 93       	push	r26
    5258:	bf 93       	push	r27
    525a:	ef 93       	push	r30
    525c:	ff 93       	push	r31
    525e:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <InterruptFuncTable+0x8a>
    5262:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <InterruptFuncTable+0x8b>
    5266:	30 97       	sbiw	r30, 0x00	; 0
    5268:	29 f0       	breq	.+10     	; 0x5274 <__vector_69+0x3c>
    526a:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <InterruptSenderTable+0x8a>
    526e:	90 91 47 24 	lds	r25, 0x2447	; 0x802447 <InterruptSenderTable+0x8b>
    5272:	19 95       	eicall
    5274:	ff 91       	pop	r31
    5276:	ef 91       	pop	r30
    5278:	bf 91       	pop	r27
    527a:	af 91       	pop	r26
    527c:	9f 91       	pop	r25
    527e:	8f 91       	pop	r24
    5280:	7f 91       	pop	r23
    5282:	6f 91       	pop	r22
    5284:	5f 91       	pop	r21
    5286:	4f 91       	pop	r20
    5288:	3f 91       	pop	r19
    528a:	2f 91       	pop	r18
    528c:	0f 90       	pop	r0
    528e:	0b be       	out	0x3b, r0	; 59
    5290:	0f 90       	pop	r0
    5292:	0f be       	out	0x3f, r0	; 63
    5294:	0f 90       	pop	r0
    5296:	1f 90       	pop	r1
    5298:	18 95       	reti

0000529a <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    529a:	1f 92       	push	r1
    529c:	0f 92       	push	r0
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	0f 92       	push	r0
    52a2:	11 24       	eor	r1, r1
    52a4:	0b b6       	in	r0, 0x3b	; 59
    52a6:	0f 92       	push	r0
    52a8:	2f 93       	push	r18
    52aa:	3f 93       	push	r19
    52ac:	4f 93       	push	r20
    52ae:	5f 93       	push	r21
    52b0:	6f 93       	push	r22
    52b2:	7f 93       	push	r23
    52b4:	8f 93       	push	r24
    52b6:	9f 93       	push	r25
    52b8:	af 93       	push	r26
    52ba:	bf 93       	push	r27
    52bc:	ef 93       	push	r30
    52be:	ff 93       	push	r31
    52c0:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <InterruptFuncTable+0x8c>
    52c4:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <InterruptFuncTable+0x8d>
    52c8:	30 97       	sbiw	r30, 0x00	; 0
    52ca:	29 f0       	breq	.+10     	; 0x52d6 <__vector_70+0x3c>
    52cc:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <InterruptSenderTable+0x8c>
    52d0:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <InterruptSenderTable+0x8d>
    52d4:	19 95       	eicall
    52d6:	ff 91       	pop	r31
    52d8:	ef 91       	pop	r30
    52da:	bf 91       	pop	r27
    52dc:	af 91       	pop	r26
    52de:	9f 91       	pop	r25
    52e0:	8f 91       	pop	r24
    52e2:	7f 91       	pop	r23
    52e4:	6f 91       	pop	r22
    52e6:	5f 91       	pop	r21
    52e8:	4f 91       	pop	r20
    52ea:	3f 91       	pop	r19
    52ec:	2f 91       	pop	r18
    52ee:	0f 90       	pop	r0
    52f0:	0b be       	out	0x3b, r0	; 59
    52f2:	0f 90       	pop	r0
    52f4:	0f be       	out	0x3f, r0	; 63
    52f6:	0f 90       	pop	r0
    52f8:	1f 90       	pop	r1
    52fa:	18 95       	reti

000052fc <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    52fc:	1f 92       	push	r1
    52fe:	0f 92       	push	r0
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	0f 92       	push	r0
    5304:	11 24       	eor	r1, r1
    5306:	0b b6       	in	r0, 0x3b	; 59
    5308:	0f 92       	push	r0
    530a:	2f 93       	push	r18
    530c:	3f 93       	push	r19
    530e:	4f 93       	push	r20
    5310:	5f 93       	push	r21
    5312:	6f 93       	push	r22
    5314:	7f 93       	push	r23
    5316:	8f 93       	push	r24
    5318:	9f 93       	push	r25
    531a:	af 93       	push	r26
    531c:	bf 93       	push	r27
    531e:	ef 93       	push	r30
    5320:	ff 93       	push	r31
    5322:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <InterruptFuncTable+0x8e>
    5326:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <InterruptFuncTable+0x8f>
    532a:	30 97       	sbiw	r30, 0x00	; 0
    532c:	29 f0       	breq	.+10     	; 0x5338 <__vector_71+0x3c>
    532e:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <InterruptSenderTable+0x8e>
    5332:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <InterruptSenderTable+0x8f>
    5336:	19 95       	eicall
    5338:	ff 91       	pop	r31
    533a:	ef 91       	pop	r30
    533c:	bf 91       	pop	r27
    533e:	af 91       	pop	r26
    5340:	9f 91       	pop	r25
    5342:	8f 91       	pop	r24
    5344:	7f 91       	pop	r23
    5346:	6f 91       	pop	r22
    5348:	5f 91       	pop	r21
    534a:	4f 91       	pop	r20
    534c:	3f 91       	pop	r19
    534e:	2f 91       	pop	r18
    5350:	0f 90       	pop	r0
    5352:	0b be       	out	0x3b, r0	; 59
    5354:	0f 90       	pop	r0
    5356:	0f be       	out	0x3f, r0	; 63
    5358:	0f 90       	pop	r0
    535a:	1f 90       	pop	r1
    535c:	18 95       	reti

0000535e <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    535e:	1f 92       	push	r1
    5360:	0f 92       	push	r0
    5362:	0f b6       	in	r0, 0x3f	; 63
    5364:	0f 92       	push	r0
    5366:	11 24       	eor	r1, r1
    5368:	0b b6       	in	r0, 0x3b	; 59
    536a:	0f 92       	push	r0
    536c:	2f 93       	push	r18
    536e:	3f 93       	push	r19
    5370:	4f 93       	push	r20
    5372:	5f 93       	push	r21
    5374:	6f 93       	push	r22
    5376:	7f 93       	push	r23
    5378:	8f 93       	push	r24
    537a:	9f 93       	push	r25
    537c:	af 93       	push	r26
    537e:	bf 93       	push	r27
    5380:	ef 93       	push	r30
    5382:	ff 93       	push	r31
    5384:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <InterruptFuncTable+0x90>
    5388:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <InterruptFuncTable+0x91>
    538c:	30 97       	sbiw	r30, 0x00	; 0
    538e:	29 f0       	breq	.+10     	; 0x539a <__vector_72+0x3c>
    5390:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <InterruptSenderTable+0x90>
    5394:	90 91 4d 24 	lds	r25, 0x244D	; 0x80244d <InterruptSenderTable+0x91>
    5398:	19 95       	eicall
    539a:	ff 91       	pop	r31
    539c:	ef 91       	pop	r30
    539e:	bf 91       	pop	r27
    53a0:	af 91       	pop	r26
    53a2:	9f 91       	pop	r25
    53a4:	8f 91       	pop	r24
    53a6:	7f 91       	pop	r23
    53a8:	6f 91       	pop	r22
    53aa:	5f 91       	pop	r21
    53ac:	4f 91       	pop	r20
    53ae:	3f 91       	pop	r19
    53b0:	2f 91       	pop	r18
    53b2:	0f 90       	pop	r0
    53b4:	0b be       	out	0x3b, r0	; 59
    53b6:	0f 90       	pop	r0
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	0f 90       	pop	r0
    53bc:	1f 90       	pop	r1
    53be:	18 95       	reti

000053c0 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    53c0:	1f 92       	push	r1
    53c2:	0f 92       	push	r0
    53c4:	0f b6       	in	r0, 0x3f	; 63
    53c6:	0f 92       	push	r0
    53c8:	11 24       	eor	r1, r1
    53ca:	0b b6       	in	r0, 0x3b	; 59
    53cc:	0f 92       	push	r0
    53ce:	2f 93       	push	r18
    53d0:	3f 93       	push	r19
    53d2:	4f 93       	push	r20
    53d4:	5f 93       	push	r21
    53d6:	6f 93       	push	r22
    53d8:	7f 93       	push	r23
    53da:	8f 93       	push	r24
    53dc:	9f 93       	push	r25
    53de:	af 93       	push	r26
    53e0:	bf 93       	push	r27
    53e2:	ef 93       	push	r30
    53e4:	ff 93       	push	r31
    53e6:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <InterruptFuncTable+0x92>
    53ea:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <InterruptFuncTable+0x93>
    53ee:	30 97       	sbiw	r30, 0x00	; 0
    53f0:	29 f0       	breq	.+10     	; 0x53fc <__vector_73+0x3c>
    53f2:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <InterruptSenderTable+0x92>
    53f6:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <InterruptSenderTable+0x93>
    53fa:	19 95       	eicall
    53fc:	ff 91       	pop	r31
    53fe:	ef 91       	pop	r30
    5400:	bf 91       	pop	r27
    5402:	af 91       	pop	r26
    5404:	9f 91       	pop	r25
    5406:	8f 91       	pop	r24
    5408:	7f 91       	pop	r23
    540a:	6f 91       	pop	r22
    540c:	5f 91       	pop	r21
    540e:	4f 91       	pop	r20
    5410:	3f 91       	pop	r19
    5412:	2f 91       	pop	r18
    5414:	0f 90       	pop	r0
    5416:	0b be       	out	0x3b, r0	; 59
    5418:	0f 90       	pop	r0
    541a:	0f be       	out	0x3f, r0	; 63
    541c:	0f 90       	pop	r0
    541e:	1f 90       	pop	r1
    5420:	18 95       	reti

00005422 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    5422:	1f 92       	push	r1
    5424:	0f 92       	push	r0
    5426:	0f b6       	in	r0, 0x3f	; 63
    5428:	0f 92       	push	r0
    542a:	11 24       	eor	r1, r1
    542c:	0b b6       	in	r0, 0x3b	; 59
    542e:	0f 92       	push	r0
    5430:	2f 93       	push	r18
    5432:	3f 93       	push	r19
    5434:	4f 93       	push	r20
    5436:	5f 93       	push	r21
    5438:	6f 93       	push	r22
    543a:	7f 93       	push	r23
    543c:	8f 93       	push	r24
    543e:	9f 93       	push	r25
    5440:	af 93       	push	r26
    5442:	bf 93       	push	r27
    5444:	ef 93       	push	r30
    5446:	ff 93       	push	r31
    5448:	e0 91 5a 23 	lds	r30, 0x235A	; 0x80235a <InterruptFuncTable+0x94>
    544c:	f0 91 5b 23 	lds	r31, 0x235B	; 0x80235b <InterruptFuncTable+0x95>
    5450:	30 97       	sbiw	r30, 0x00	; 0
    5452:	29 f0       	breq	.+10     	; 0x545e <__vector_74+0x3c>
    5454:	80 91 50 24 	lds	r24, 0x2450	; 0x802450 <InterruptSenderTable+0x94>
    5458:	90 91 51 24 	lds	r25, 0x2451	; 0x802451 <InterruptSenderTable+0x95>
    545c:	19 95       	eicall
    545e:	ff 91       	pop	r31
    5460:	ef 91       	pop	r30
    5462:	bf 91       	pop	r27
    5464:	af 91       	pop	r26
    5466:	9f 91       	pop	r25
    5468:	8f 91       	pop	r24
    546a:	7f 91       	pop	r23
    546c:	6f 91       	pop	r22
    546e:	5f 91       	pop	r21
    5470:	4f 91       	pop	r20
    5472:	3f 91       	pop	r19
    5474:	2f 91       	pop	r18
    5476:	0f 90       	pop	r0
    5478:	0b be       	out	0x3b, r0	; 59
    547a:	0f 90       	pop	r0
    547c:	0f be       	out	0x3f, r0	; 63
    547e:	0f 90       	pop	r0
    5480:	1f 90       	pop	r1
    5482:	18 95       	reti

00005484 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    5484:	1f 92       	push	r1
    5486:	0f 92       	push	r0
    5488:	0f b6       	in	r0, 0x3f	; 63
    548a:	0f 92       	push	r0
    548c:	11 24       	eor	r1, r1
    548e:	0b b6       	in	r0, 0x3b	; 59
    5490:	0f 92       	push	r0
    5492:	2f 93       	push	r18
    5494:	3f 93       	push	r19
    5496:	4f 93       	push	r20
    5498:	5f 93       	push	r21
    549a:	6f 93       	push	r22
    549c:	7f 93       	push	r23
    549e:	8f 93       	push	r24
    54a0:	9f 93       	push	r25
    54a2:	af 93       	push	r26
    54a4:	bf 93       	push	r27
    54a6:	ef 93       	push	r30
    54a8:	ff 93       	push	r31
    54aa:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <InterruptFuncTable+0x9a>
    54ae:	f0 91 61 23 	lds	r31, 0x2361	; 0x802361 <InterruptFuncTable+0x9b>
    54b2:	30 97       	sbiw	r30, 0x00	; 0
    54b4:	29 f0       	breq	.+10     	; 0x54c0 <__vector_77+0x3c>
    54b6:	80 91 56 24 	lds	r24, 0x2456	; 0x802456 <InterruptSenderTable+0x9a>
    54ba:	90 91 57 24 	lds	r25, 0x2457	; 0x802457 <InterruptSenderTable+0x9b>
    54be:	19 95       	eicall
    54c0:	ff 91       	pop	r31
    54c2:	ef 91       	pop	r30
    54c4:	bf 91       	pop	r27
    54c6:	af 91       	pop	r26
    54c8:	9f 91       	pop	r25
    54ca:	8f 91       	pop	r24
    54cc:	7f 91       	pop	r23
    54ce:	6f 91       	pop	r22
    54d0:	5f 91       	pop	r21
    54d2:	4f 91       	pop	r20
    54d4:	3f 91       	pop	r19
    54d6:	2f 91       	pop	r18
    54d8:	0f 90       	pop	r0
    54da:	0b be       	out	0x3b, r0	; 59
    54dc:	0f 90       	pop	r0
    54de:	0f be       	out	0x3f, r0	; 63
    54e0:	0f 90       	pop	r0
    54e2:	1f 90       	pop	r1
    54e4:	18 95       	reti

000054e6 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    54e6:	1f 92       	push	r1
    54e8:	0f 92       	push	r0
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	0f 92       	push	r0
    54ee:	11 24       	eor	r1, r1
    54f0:	0b b6       	in	r0, 0x3b	; 59
    54f2:	0f 92       	push	r0
    54f4:	2f 93       	push	r18
    54f6:	3f 93       	push	r19
    54f8:	4f 93       	push	r20
    54fa:	5f 93       	push	r21
    54fc:	6f 93       	push	r22
    54fe:	7f 93       	push	r23
    5500:	8f 93       	push	r24
    5502:	9f 93       	push	r25
    5504:	af 93       	push	r26
    5506:	bf 93       	push	r27
    5508:	ef 93       	push	r30
    550a:	ff 93       	push	r31
    550c:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <InterruptFuncTable+0x9c>
    5510:	f0 91 63 23 	lds	r31, 0x2363	; 0x802363 <InterruptFuncTable+0x9d>
    5514:	30 97       	sbiw	r30, 0x00	; 0
    5516:	29 f0       	breq	.+10     	; 0x5522 <__vector_78+0x3c>
    5518:	80 91 58 24 	lds	r24, 0x2458	; 0x802458 <InterruptSenderTable+0x9c>
    551c:	90 91 59 24 	lds	r25, 0x2459	; 0x802459 <InterruptSenderTable+0x9d>
    5520:	19 95       	eicall
    5522:	ff 91       	pop	r31
    5524:	ef 91       	pop	r30
    5526:	bf 91       	pop	r27
    5528:	af 91       	pop	r26
    552a:	9f 91       	pop	r25
    552c:	8f 91       	pop	r24
    552e:	7f 91       	pop	r23
    5530:	6f 91       	pop	r22
    5532:	5f 91       	pop	r21
    5534:	4f 91       	pop	r20
    5536:	3f 91       	pop	r19
    5538:	2f 91       	pop	r18
    553a:	0f 90       	pop	r0
    553c:	0b be       	out	0x3b, r0	; 59
    553e:	0f 90       	pop	r0
    5540:	0f be       	out	0x3f, r0	; 63
    5542:	0f 90       	pop	r0
    5544:	1f 90       	pop	r1
    5546:	18 95       	reti

00005548 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    5548:	1f 92       	push	r1
    554a:	0f 92       	push	r0
    554c:	0f b6       	in	r0, 0x3f	; 63
    554e:	0f 92       	push	r0
    5550:	11 24       	eor	r1, r1
    5552:	0b b6       	in	r0, 0x3b	; 59
    5554:	0f 92       	push	r0
    5556:	2f 93       	push	r18
    5558:	3f 93       	push	r19
    555a:	4f 93       	push	r20
    555c:	5f 93       	push	r21
    555e:	6f 93       	push	r22
    5560:	7f 93       	push	r23
    5562:	8f 93       	push	r24
    5564:	9f 93       	push	r25
    5566:	af 93       	push	r26
    5568:	bf 93       	push	r27
    556a:	ef 93       	push	r30
    556c:	ff 93       	push	r31
    556e:	e0 91 64 23 	lds	r30, 0x2364	; 0x802364 <InterruptFuncTable+0x9e>
    5572:	f0 91 65 23 	lds	r31, 0x2365	; 0x802365 <InterruptFuncTable+0x9f>
    5576:	30 97       	sbiw	r30, 0x00	; 0
    5578:	29 f0       	breq	.+10     	; 0x5584 <__vector_79+0x3c>
    557a:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <InterruptSenderTable+0x9e>
    557e:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <InterruptSenderTable+0x9f>
    5582:	19 95       	eicall
    5584:	ff 91       	pop	r31
    5586:	ef 91       	pop	r30
    5588:	bf 91       	pop	r27
    558a:	af 91       	pop	r26
    558c:	9f 91       	pop	r25
    558e:	8f 91       	pop	r24
    5590:	7f 91       	pop	r23
    5592:	6f 91       	pop	r22
    5594:	5f 91       	pop	r21
    5596:	4f 91       	pop	r20
    5598:	3f 91       	pop	r19
    559a:	2f 91       	pop	r18
    559c:	0f 90       	pop	r0
    559e:	0b be       	out	0x3b, r0	; 59
    55a0:	0f 90       	pop	r0
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	0f 90       	pop	r0
    55a6:	1f 90       	pop	r1
    55a8:	18 95       	reti

000055aa <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    55aa:	1f 92       	push	r1
    55ac:	0f 92       	push	r0
    55ae:	0f b6       	in	r0, 0x3f	; 63
    55b0:	0f 92       	push	r0
    55b2:	11 24       	eor	r1, r1
    55b4:	0b b6       	in	r0, 0x3b	; 59
    55b6:	0f 92       	push	r0
    55b8:	2f 93       	push	r18
    55ba:	3f 93       	push	r19
    55bc:	4f 93       	push	r20
    55be:	5f 93       	push	r21
    55c0:	6f 93       	push	r22
    55c2:	7f 93       	push	r23
    55c4:	8f 93       	push	r24
    55c6:	9f 93       	push	r25
    55c8:	af 93       	push	r26
    55ca:	bf 93       	push	r27
    55cc:	ef 93       	push	r30
    55ce:	ff 93       	push	r31
    55d0:	e0 91 66 23 	lds	r30, 0x2366	; 0x802366 <InterruptFuncTable+0xa0>
    55d4:	f0 91 67 23 	lds	r31, 0x2367	; 0x802367 <InterruptFuncTable+0xa1>
    55d8:	30 97       	sbiw	r30, 0x00	; 0
    55da:	29 f0       	breq	.+10     	; 0x55e6 <__vector_80+0x3c>
    55dc:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <InterruptSenderTable+0xa0>
    55e0:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <InterruptSenderTable+0xa1>
    55e4:	19 95       	eicall
    55e6:	ff 91       	pop	r31
    55e8:	ef 91       	pop	r30
    55ea:	bf 91       	pop	r27
    55ec:	af 91       	pop	r26
    55ee:	9f 91       	pop	r25
    55f0:	8f 91       	pop	r24
    55f2:	7f 91       	pop	r23
    55f4:	6f 91       	pop	r22
    55f6:	5f 91       	pop	r21
    55f8:	4f 91       	pop	r20
    55fa:	3f 91       	pop	r19
    55fc:	2f 91       	pop	r18
    55fe:	0f 90       	pop	r0
    5600:	0b be       	out	0x3b, r0	; 59
    5602:	0f 90       	pop	r0
    5604:	0f be       	out	0x3f, r0	; 63
    5606:	0f 90       	pop	r0
    5608:	1f 90       	pop	r1
    560a:	18 95       	reti

0000560c <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    560c:	1f 92       	push	r1
    560e:	0f 92       	push	r0
    5610:	0f b6       	in	r0, 0x3f	; 63
    5612:	0f 92       	push	r0
    5614:	11 24       	eor	r1, r1
    5616:	0b b6       	in	r0, 0x3b	; 59
    5618:	0f 92       	push	r0
    561a:	2f 93       	push	r18
    561c:	3f 93       	push	r19
    561e:	4f 93       	push	r20
    5620:	5f 93       	push	r21
    5622:	6f 93       	push	r22
    5624:	7f 93       	push	r23
    5626:	8f 93       	push	r24
    5628:	9f 93       	push	r25
    562a:	af 93       	push	r26
    562c:	bf 93       	push	r27
    562e:	ef 93       	push	r30
    5630:	ff 93       	push	r31
    5632:	e0 91 68 23 	lds	r30, 0x2368	; 0x802368 <InterruptFuncTable+0xa2>
    5636:	f0 91 69 23 	lds	r31, 0x2369	; 0x802369 <InterruptFuncTable+0xa3>
    563a:	30 97       	sbiw	r30, 0x00	; 0
    563c:	29 f0       	breq	.+10     	; 0x5648 <__vector_81+0x3c>
    563e:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <InterruptSenderTable+0xa2>
    5642:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <InterruptSenderTable+0xa3>
    5646:	19 95       	eicall
    5648:	ff 91       	pop	r31
    564a:	ef 91       	pop	r30
    564c:	bf 91       	pop	r27
    564e:	af 91       	pop	r26
    5650:	9f 91       	pop	r25
    5652:	8f 91       	pop	r24
    5654:	7f 91       	pop	r23
    5656:	6f 91       	pop	r22
    5658:	5f 91       	pop	r21
    565a:	4f 91       	pop	r20
    565c:	3f 91       	pop	r19
    565e:	2f 91       	pop	r18
    5660:	0f 90       	pop	r0
    5662:	0b be       	out	0x3b, r0	; 59
    5664:	0f 90       	pop	r0
    5666:	0f be       	out	0x3f, r0	; 63
    5668:	0f 90       	pop	r0
    566a:	1f 90       	pop	r1
    566c:	18 95       	reti

0000566e <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    566e:	1f 92       	push	r1
    5670:	0f 92       	push	r0
    5672:	0f b6       	in	r0, 0x3f	; 63
    5674:	0f 92       	push	r0
    5676:	11 24       	eor	r1, r1
    5678:	0b b6       	in	r0, 0x3b	; 59
    567a:	0f 92       	push	r0
    567c:	2f 93       	push	r18
    567e:	3f 93       	push	r19
    5680:	4f 93       	push	r20
    5682:	5f 93       	push	r21
    5684:	6f 93       	push	r22
    5686:	7f 93       	push	r23
    5688:	8f 93       	push	r24
    568a:	9f 93       	push	r25
    568c:	af 93       	push	r26
    568e:	bf 93       	push	r27
    5690:	ef 93       	push	r30
    5692:	ff 93       	push	r31
    5694:	e0 91 6a 23 	lds	r30, 0x236A	; 0x80236a <InterruptFuncTable+0xa4>
    5698:	f0 91 6b 23 	lds	r31, 0x236B	; 0x80236b <InterruptFuncTable+0xa5>
    569c:	30 97       	sbiw	r30, 0x00	; 0
    569e:	29 f0       	breq	.+10     	; 0x56aa <__vector_82+0x3c>
    56a0:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <InterruptSenderTable+0xa4>
    56a4:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <InterruptSenderTable+0xa5>
    56a8:	19 95       	eicall
    56aa:	ff 91       	pop	r31
    56ac:	ef 91       	pop	r30
    56ae:	bf 91       	pop	r27
    56b0:	af 91       	pop	r26
    56b2:	9f 91       	pop	r25
    56b4:	8f 91       	pop	r24
    56b6:	7f 91       	pop	r23
    56b8:	6f 91       	pop	r22
    56ba:	5f 91       	pop	r21
    56bc:	4f 91       	pop	r20
    56be:	3f 91       	pop	r19
    56c0:	2f 91       	pop	r18
    56c2:	0f 90       	pop	r0
    56c4:	0b be       	out	0x3b, r0	; 59
    56c6:	0f 90       	pop	r0
    56c8:	0f be       	out	0x3f, r0	; 63
    56ca:	0f 90       	pop	r0
    56cc:	1f 90       	pop	r1
    56ce:	18 95       	reti

000056d0 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    56d0:	1f 92       	push	r1
    56d2:	0f 92       	push	r0
    56d4:	0f b6       	in	r0, 0x3f	; 63
    56d6:	0f 92       	push	r0
    56d8:	11 24       	eor	r1, r1
    56da:	0b b6       	in	r0, 0x3b	; 59
    56dc:	0f 92       	push	r0
    56de:	2f 93       	push	r18
    56e0:	3f 93       	push	r19
    56e2:	4f 93       	push	r20
    56e4:	5f 93       	push	r21
    56e6:	6f 93       	push	r22
    56e8:	7f 93       	push	r23
    56ea:	8f 93       	push	r24
    56ec:	9f 93       	push	r25
    56ee:	af 93       	push	r26
    56f0:	bf 93       	push	r27
    56f2:	ef 93       	push	r30
    56f4:	ff 93       	push	r31
    56f6:	e0 91 6c 23 	lds	r30, 0x236C	; 0x80236c <InterruptFuncTable+0xa6>
    56fa:	f0 91 6d 23 	lds	r31, 0x236D	; 0x80236d <InterruptFuncTable+0xa7>
    56fe:	30 97       	sbiw	r30, 0x00	; 0
    5700:	29 f0       	breq	.+10     	; 0x570c <__vector_83+0x3c>
    5702:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <InterruptSenderTable+0xa6>
    5706:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <InterruptSenderTable+0xa7>
    570a:	19 95       	eicall
    570c:	ff 91       	pop	r31
    570e:	ef 91       	pop	r30
    5710:	bf 91       	pop	r27
    5712:	af 91       	pop	r26
    5714:	9f 91       	pop	r25
    5716:	8f 91       	pop	r24
    5718:	7f 91       	pop	r23
    571a:	6f 91       	pop	r22
    571c:	5f 91       	pop	r21
    571e:	4f 91       	pop	r20
    5720:	3f 91       	pop	r19
    5722:	2f 91       	pop	r18
    5724:	0f 90       	pop	r0
    5726:	0b be       	out	0x3b, r0	; 59
    5728:	0f 90       	pop	r0
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	0f 90       	pop	r0
    572e:	1f 90       	pop	r1
    5730:	18 95       	reti

00005732 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    5732:	1f 92       	push	r1
    5734:	0f 92       	push	r0
    5736:	0f b6       	in	r0, 0x3f	; 63
    5738:	0f 92       	push	r0
    573a:	11 24       	eor	r1, r1
    573c:	0b b6       	in	r0, 0x3b	; 59
    573e:	0f 92       	push	r0
    5740:	2f 93       	push	r18
    5742:	3f 93       	push	r19
    5744:	4f 93       	push	r20
    5746:	5f 93       	push	r21
    5748:	6f 93       	push	r22
    574a:	7f 93       	push	r23
    574c:	8f 93       	push	r24
    574e:	9f 93       	push	r25
    5750:	af 93       	push	r26
    5752:	bf 93       	push	r27
    5754:	ef 93       	push	r30
    5756:	ff 93       	push	r31
    5758:	e0 91 6e 23 	lds	r30, 0x236E	; 0x80236e <InterruptFuncTable+0xa8>
    575c:	f0 91 6f 23 	lds	r31, 0x236F	; 0x80236f <InterruptFuncTable+0xa9>
    5760:	30 97       	sbiw	r30, 0x00	; 0
    5762:	29 f0       	breq	.+10     	; 0x576e <__vector_84+0x3c>
    5764:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <InterruptSenderTable+0xa8>
    5768:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <InterruptSenderTable+0xa9>
    576c:	19 95       	eicall
    576e:	ff 91       	pop	r31
    5770:	ef 91       	pop	r30
    5772:	bf 91       	pop	r27
    5774:	af 91       	pop	r26
    5776:	9f 91       	pop	r25
    5778:	8f 91       	pop	r24
    577a:	7f 91       	pop	r23
    577c:	6f 91       	pop	r22
    577e:	5f 91       	pop	r21
    5780:	4f 91       	pop	r20
    5782:	3f 91       	pop	r19
    5784:	2f 91       	pop	r18
    5786:	0f 90       	pop	r0
    5788:	0b be       	out	0x3b, r0	; 59
    578a:	0f 90       	pop	r0
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	0f 90       	pop	r0
    5790:	1f 90       	pop	r1
    5792:	18 95       	reti

00005794 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    5794:	1f 92       	push	r1
    5796:	0f 92       	push	r0
    5798:	0f b6       	in	r0, 0x3f	; 63
    579a:	0f 92       	push	r0
    579c:	11 24       	eor	r1, r1
    579e:	0b b6       	in	r0, 0x3b	; 59
    57a0:	0f 92       	push	r0
    57a2:	2f 93       	push	r18
    57a4:	3f 93       	push	r19
    57a6:	4f 93       	push	r20
    57a8:	5f 93       	push	r21
    57aa:	6f 93       	push	r22
    57ac:	7f 93       	push	r23
    57ae:	8f 93       	push	r24
    57b0:	9f 93       	push	r25
    57b2:	af 93       	push	r26
    57b4:	bf 93       	push	r27
    57b6:	ef 93       	push	r30
    57b8:	ff 93       	push	r31
    57ba:	e0 91 70 23 	lds	r30, 0x2370	; 0x802370 <InterruptFuncTable+0xaa>
    57be:	f0 91 71 23 	lds	r31, 0x2371	; 0x802371 <InterruptFuncTable+0xab>
    57c2:	30 97       	sbiw	r30, 0x00	; 0
    57c4:	29 f0       	breq	.+10     	; 0x57d0 <__vector_85+0x3c>
    57c6:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <InterruptSenderTable+0xaa>
    57ca:	90 91 67 24 	lds	r25, 0x2467	; 0x802467 <InterruptSenderTable+0xab>
    57ce:	19 95       	eicall
    57d0:	ff 91       	pop	r31
    57d2:	ef 91       	pop	r30
    57d4:	bf 91       	pop	r27
    57d6:	af 91       	pop	r26
    57d8:	9f 91       	pop	r25
    57da:	8f 91       	pop	r24
    57dc:	7f 91       	pop	r23
    57de:	6f 91       	pop	r22
    57e0:	5f 91       	pop	r21
    57e2:	4f 91       	pop	r20
    57e4:	3f 91       	pop	r19
    57e6:	2f 91       	pop	r18
    57e8:	0f 90       	pop	r0
    57ea:	0b be       	out	0x3b, r0	; 59
    57ec:	0f 90       	pop	r0
    57ee:	0f be       	out	0x3f, r0	; 63
    57f0:	0f 90       	pop	r0
    57f2:	1f 90       	pop	r1
    57f4:	18 95       	reti

000057f6 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    57f6:	1f 92       	push	r1
    57f8:	0f 92       	push	r0
    57fa:	0f b6       	in	r0, 0x3f	; 63
    57fc:	0f 92       	push	r0
    57fe:	11 24       	eor	r1, r1
    5800:	0b b6       	in	r0, 0x3b	; 59
    5802:	0f 92       	push	r0
    5804:	2f 93       	push	r18
    5806:	3f 93       	push	r19
    5808:	4f 93       	push	r20
    580a:	5f 93       	push	r21
    580c:	6f 93       	push	r22
    580e:	7f 93       	push	r23
    5810:	8f 93       	push	r24
    5812:	9f 93       	push	r25
    5814:	af 93       	push	r26
    5816:	bf 93       	push	r27
    5818:	ef 93       	push	r30
    581a:	ff 93       	push	r31
    581c:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <InterruptFuncTable+0xac>
    5820:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <InterruptFuncTable+0xad>
    5824:	30 97       	sbiw	r30, 0x00	; 0
    5826:	29 f0       	breq	.+10     	; 0x5832 <__vector_86+0x3c>
    5828:	80 91 68 24 	lds	r24, 0x2468	; 0x802468 <InterruptSenderTable+0xac>
    582c:	90 91 69 24 	lds	r25, 0x2469	; 0x802469 <InterruptSenderTable+0xad>
    5830:	19 95       	eicall
    5832:	ff 91       	pop	r31
    5834:	ef 91       	pop	r30
    5836:	bf 91       	pop	r27
    5838:	af 91       	pop	r26
    583a:	9f 91       	pop	r25
    583c:	8f 91       	pop	r24
    583e:	7f 91       	pop	r23
    5840:	6f 91       	pop	r22
    5842:	5f 91       	pop	r21
    5844:	4f 91       	pop	r20
    5846:	3f 91       	pop	r19
    5848:	2f 91       	pop	r18
    584a:	0f 90       	pop	r0
    584c:	0b be       	out	0x3b, r0	; 59
    584e:	0f 90       	pop	r0
    5850:	0f be       	out	0x3f, r0	; 63
    5852:	0f 90       	pop	r0
    5854:	1f 90       	pop	r1
    5856:	18 95       	reti

00005858 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    5858:	1f 92       	push	r1
    585a:	0f 92       	push	r0
    585c:	0f b6       	in	r0, 0x3f	; 63
    585e:	0f 92       	push	r0
    5860:	11 24       	eor	r1, r1
    5862:	0b b6       	in	r0, 0x3b	; 59
    5864:	0f 92       	push	r0
    5866:	2f 93       	push	r18
    5868:	3f 93       	push	r19
    586a:	4f 93       	push	r20
    586c:	5f 93       	push	r21
    586e:	6f 93       	push	r22
    5870:	7f 93       	push	r23
    5872:	8f 93       	push	r24
    5874:	9f 93       	push	r25
    5876:	af 93       	push	r26
    5878:	bf 93       	push	r27
    587a:	ef 93       	push	r30
    587c:	ff 93       	push	r31
    587e:	e0 91 74 23 	lds	r30, 0x2374	; 0x802374 <InterruptFuncTable+0xae>
    5882:	f0 91 75 23 	lds	r31, 0x2375	; 0x802375 <InterruptFuncTable+0xaf>
    5886:	30 97       	sbiw	r30, 0x00	; 0
    5888:	29 f0       	breq	.+10     	; 0x5894 <__vector_87+0x3c>
    588a:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <InterruptSenderTable+0xae>
    588e:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <InterruptSenderTable+0xaf>
    5892:	19 95       	eicall
    5894:	ff 91       	pop	r31
    5896:	ef 91       	pop	r30
    5898:	bf 91       	pop	r27
    589a:	af 91       	pop	r26
    589c:	9f 91       	pop	r25
    589e:	8f 91       	pop	r24
    58a0:	7f 91       	pop	r23
    58a2:	6f 91       	pop	r22
    58a4:	5f 91       	pop	r21
    58a6:	4f 91       	pop	r20
    58a8:	3f 91       	pop	r19
    58aa:	2f 91       	pop	r18
    58ac:	0f 90       	pop	r0
    58ae:	0b be       	out	0x3b, r0	; 59
    58b0:	0f 90       	pop	r0
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	0f 90       	pop	r0
    58b6:	1f 90       	pop	r1
    58b8:	18 95       	reti

000058ba <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    58ba:	1f 92       	push	r1
    58bc:	0f 92       	push	r0
    58be:	0f b6       	in	r0, 0x3f	; 63
    58c0:	0f 92       	push	r0
    58c2:	11 24       	eor	r1, r1
    58c4:	0b b6       	in	r0, 0x3b	; 59
    58c6:	0f 92       	push	r0
    58c8:	2f 93       	push	r18
    58ca:	3f 93       	push	r19
    58cc:	4f 93       	push	r20
    58ce:	5f 93       	push	r21
    58d0:	6f 93       	push	r22
    58d2:	7f 93       	push	r23
    58d4:	8f 93       	push	r24
    58d6:	9f 93       	push	r25
    58d8:	af 93       	push	r26
    58da:	bf 93       	push	r27
    58dc:	ef 93       	push	r30
    58de:	ff 93       	push	r31
    58e0:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <InterruptFuncTable+0xb0>
    58e4:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <InterruptFuncTable+0xb1>
    58e8:	30 97       	sbiw	r30, 0x00	; 0
    58ea:	29 f0       	breq	.+10     	; 0x58f6 <__vector_88+0x3c>
    58ec:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <InterruptSenderTable+0xb0>
    58f0:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <InterruptSenderTable+0xb1>
    58f4:	19 95       	eicall
    58f6:	ff 91       	pop	r31
    58f8:	ef 91       	pop	r30
    58fa:	bf 91       	pop	r27
    58fc:	af 91       	pop	r26
    58fe:	9f 91       	pop	r25
    5900:	8f 91       	pop	r24
    5902:	7f 91       	pop	r23
    5904:	6f 91       	pop	r22
    5906:	5f 91       	pop	r21
    5908:	4f 91       	pop	r20
    590a:	3f 91       	pop	r19
    590c:	2f 91       	pop	r18
    590e:	0f 90       	pop	r0
    5910:	0b be       	out	0x3b, r0	; 59
    5912:	0f 90       	pop	r0
    5914:	0f be       	out	0x3f, r0	; 63
    5916:	0f 90       	pop	r0
    5918:	1f 90       	pop	r1
    591a:	18 95       	reti

0000591c <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    591c:	1f 92       	push	r1
    591e:	0f 92       	push	r0
    5920:	0f b6       	in	r0, 0x3f	; 63
    5922:	0f 92       	push	r0
    5924:	11 24       	eor	r1, r1
    5926:	0b b6       	in	r0, 0x3b	; 59
    5928:	0f 92       	push	r0
    592a:	2f 93       	push	r18
    592c:	3f 93       	push	r19
    592e:	4f 93       	push	r20
    5930:	5f 93       	push	r21
    5932:	6f 93       	push	r22
    5934:	7f 93       	push	r23
    5936:	8f 93       	push	r24
    5938:	9f 93       	push	r25
    593a:	af 93       	push	r26
    593c:	bf 93       	push	r27
    593e:	ef 93       	push	r30
    5940:	ff 93       	push	r31
    5942:	e0 91 78 23 	lds	r30, 0x2378	; 0x802378 <InterruptFuncTable+0xb2>
    5946:	f0 91 79 23 	lds	r31, 0x2379	; 0x802379 <InterruptFuncTable+0xb3>
    594a:	30 97       	sbiw	r30, 0x00	; 0
    594c:	29 f0       	breq	.+10     	; 0x5958 <__vector_89+0x3c>
    594e:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <InterruptSenderTable+0xb2>
    5952:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <InterruptSenderTable+0xb3>
    5956:	19 95       	eicall
    5958:	ff 91       	pop	r31
    595a:	ef 91       	pop	r30
    595c:	bf 91       	pop	r27
    595e:	af 91       	pop	r26
    5960:	9f 91       	pop	r25
    5962:	8f 91       	pop	r24
    5964:	7f 91       	pop	r23
    5966:	6f 91       	pop	r22
    5968:	5f 91       	pop	r21
    596a:	4f 91       	pop	r20
    596c:	3f 91       	pop	r19
    596e:	2f 91       	pop	r18
    5970:	0f 90       	pop	r0
    5972:	0b be       	out	0x3b, r0	; 59
    5974:	0f 90       	pop	r0
    5976:	0f be       	out	0x3f, r0	; 63
    5978:	0f 90       	pop	r0
    597a:	1f 90       	pop	r1
    597c:	18 95       	reti

0000597e <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    597e:	1f 92       	push	r1
    5980:	0f 92       	push	r0
    5982:	0f b6       	in	r0, 0x3f	; 63
    5984:	0f 92       	push	r0
    5986:	11 24       	eor	r1, r1
    5988:	0b b6       	in	r0, 0x3b	; 59
    598a:	0f 92       	push	r0
    598c:	2f 93       	push	r18
    598e:	3f 93       	push	r19
    5990:	4f 93       	push	r20
    5992:	5f 93       	push	r21
    5994:	6f 93       	push	r22
    5996:	7f 93       	push	r23
    5998:	8f 93       	push	r24
    599a:	9f 93       	push	r25
    599c:	af 93       	push	r26
    599e:	bf 93       	push	r27
    59a0:	ef 93       	push	r30
    59a2:	ff 93       	push	r31
    59a4:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <InterruptFuncTable+0xb4>
    59a8:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <InterruptFuncTable+0xb5>
    59ac:	30 97       	sbiw	r30, 0x00	; 0
    59ae:	29 f0       	breq	.+10     	; 0x59ba <__vector_90+0x3c>
    59b0:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <InterruptSenderTable+0xb4>
    59b4:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <InterruptSenderTable+0xb5>
    59b8:	19 95       	eicall
    59ba:	ff 91       	pop	r31
    59bc:	ef 91       	pop	r30
    59be:	bf 91       	pop	r27
    59c0:	af 91       	pop	r26
    59c2:	9f 91       	pop	r25
    59c4:	8f 91       	pop	r24
    59c6:	7f 91       	pop	r23
    59c8:	6f 91       	pop	r22
    59ca:	5f 91       	pop	r21
    59cc:	4f 91       	pop	r20
    59ce:	3f 91       	pop	r19
    59d0:	2f 91       	pop	r18
    59d2:	0f 90       	pop	r0
    59d4:	0b be       	out	0x3b, r0	; 59
    59d6:	0f 90       	pop	r0
    59d8:	0f be       	out	0x3f, r0	; 63
    59da:	0f 90       	pop	r0
    59dc:	1f 90       	pop	r1
    59de:	18 95       	reti

000059e0 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    59e0:	1f 92       	push	r1
    59e2:	0f 92       	push	r0
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	0f 92       	push	r0
    59e8:	11 24       	eor	r1, r1
    59ea:	0b b6       	in	r0, 0x3b	; 59
    59ec:	0f 92       	push	r0
    59ee:	2f 93       	push	r18
    59f0:	3f 93       	push	r19
    59f2:	4f 93       	push	r20
    59f4:	5f 93       	push	r21
    59f6:	6f 93       	push	r22
    59f8:	7f 93       	push	r23
    59fa:	8f 93       	push	r24
    59fc:	9f 93       	push	r25
    59fe:	af 93       	push	r26
    5a00:	bf 93       	push	r27
    5a02:	ef 93       	push	r30
    5a04:	ff 93       	push	r31
    5a06:	e0 91 7c 23 	lds	r30, 0x237C	; 0x80237c <InterruptFuncTable+0xb6>
    5a0a:	f0 91 7d 23 	lds	r31, 0x237D	; 0x80237d <InterruptFuncTable+0xb7>
    5a0e:	30 97       	sbiw	r30, 0x00	; 0
    5a10:	29 f0       	breq	.+10     	; 0x5a1c <__vector_91+0x3c>
    5a12:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <InterruptSenderTable+0xb6>
    5a16:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <InterruptSenderTable+0xb7>
    5a1a:	19 95       	eicall
    5a1c:	ff 91       	pop	r31
    5a1e:	ef 91       	pop	r30
    5a20:	bf 91       	pop	r27
    5a22:	af 91       	pop	r26
    5a24:	9f 91       	pop	r25
    5a26:	8f 91       	pop	r24
    5a28:	7f 91       	pop	r23
    5a2a:	6f 91       	pop	r22
    5a2c:	5f 91       	pop	r21
    5a2e:	4f 91       	pop	r20
    5a30:	3f 91       	pop	r19
    5a32:	2f 91       	pop	r18
    5a34:	0f 90       	pop	r0
    5a36:	0b be       	out	0x3b, r0	; 59
    5a38:	0f 90       	pop	r0
    5a3a:	0f be       	out	0x3f, r0	; 63
    5a3c:	0f 90       	pop	r0
    5a3e:	1f 90       	pop	r1
    5a40:	18 95       	reti

00005a42 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    5a42:	1f 92       	push	r1
    5a44:	0f 92       	push	r0
    5a46:	0f b6       	in	r0, 0x3f	; 63
    5a48:	0f 92       	push	r0
    5a4a:	11 24       	eor	r1, r1
    5a4c:	0b b6       	in	r0, 0x3b	; 59
    5a4e:	0f 92       	push	r0
    5a50:	2f 93       	push	r18
    5a52:	3f 93       	push	r19
    5a54:	4f 93       	push	r20
    5a56:	5f 93       	push	r21
    5a58:	6f 93       	push	r22
    5a5a:	7f 93       	push	r23
    5a5c:	8f 93       	push	r24
    5a5e:	9f 93       	push	r25
    5a60:	af 93       	push	r26
    5a62:	bf 93       	push	r27
    5a64:	ef 93       	push	r30
    5a66:	ff 93       	push	r31
    5a68:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <InterruptFuncTable+0xb8>
    5a6c:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <InterruptFuncTable+0xb9>
    5a70:	30 97       	sbiw	r30, 0x00	; 0
    5a72:	29 f0       	breq	.+10     	; 0x5a7e <__vector_92+0x3c>
    5a74:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <InterruptSenderTable+0xb8>
    5a78:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <InterruptSenderTable+0xb9>
    5a7c:	19 95       	eicall
    5a7e:	ff 91       	pop	r31
    5a80:	ef 91       	pop	r30
    5a82:	bf 91       	pop	r27
    5a84:	af 91       	pop	r26
    5a86:	9f 91       	pop	r25
    5a88:	8f 91       	pop	r24
    5a8a:	7f 91       	pop	r23
    5a8c:	6f 91       	pop	r22
    5a8e:	5f 91       	pop	r21
    5a90:	4f 91       	pop	r20
    5a92:	3f 91       	pop	r19
    5a94:	2f 91       	pop	r18
    5a96:	0f 90       	pop	r0
    5a98:	0b be       	out	0x3b, r0	; 59
    5a9a:	0f 90       	pop	r0
    5a9c:	0f be       	out	0x3f, r0	; 63
    5a9e:	0f 90       	pop	r0
    5aa0:	1f 90       	pop	r1
    5aa2:	18 95       	reti

00005aa4 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    5aa4:	1f 92       	push	r1
    5aa6:	0f 92       	push	r0
    5aa8:	0f b6       	in	r0, 0x3f	; 63
    5aaa:	0f 92       	push	r0
    5aac:	11 24       	eor	r1, r1
    5aae:	0b b6       	in	r0, 0x3b	; 59
    5ab0:	0f 92       	push	r0
    5ab2:	2f 93       	push	r18
    5ab4:	3f 93       	push	r19
    5ab6:	4f 93       	push	r20
    5ab8:	5f 93       	push	r21
    5aba:	6f 93       	push	r22
    5abc:	7f 93       	push	r23
    5abe:	8f 93       	push	r24
    5ac0:	9f 93       	push	r25
    5ac2:	af 93       	push	r26
    5ac4:	bf 93       	push	r27
    5ac6:	ef 93       	push	r30
    5ac8:	ff 93       	push	r31
    5aca:	e0 91 80 23 	lds	r30, 0x2380	; 0x802380 <InterruptFuncTable+0xba>
    5ace:	f0 91 81 23 	lds	r31, 0x2381	; 0x802381 <InterruptFuncTable+0xbb>
    5ad2:	30 97       	sbiw	r30, 0x00	; 0
    5ad4:	29 f0       	breq	.+10     	; 0x5ae0 <__vector_93+0x3c>
    5ad6:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <InterruptSenderTable+0xba>
    5ada:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <InterruptSenderTable+0xbb>
    5ade:	19 95       	eicall
    5ae0:	ff 91       	pop	r31
    5ae2:	ef 91       	pop	r30
    5ae4:	bf 91       	pop	r27
    5ae6:	af 91       	pop	r26
    5ae8:	9f 91       	pop	r25
    5aea:	8f 91       	pop	r24
    5aec:	7f 91       	pop	r23
    5aee:	6f 91       	pop	r22
    5af0:	5f 91       	pop	r21
    5af2:	4f 91       	pop	r20
    5af4:	3f 91       	pop	r19
    5af6:	2f 91       	pop	r18
    5af8:	0f 90       	pop	r0
    5afa:	0b be       	out	0x3b, r0	; 59
    5afc:	0f 90       	pop	r0
    5afe:	0f be       	out	0x3f, r0	; 63
    5b00:	0f 90       	pop	r0
    5b02:	1f 90       	pop	r1
    5b04:	18 95       	reti

00005b06 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    5b06:	1f 92       	push	r1
    5b08:	0f 92       	push	r0
    5b0a:	0f b6       	in	r0, 0x3f	; 63
    5b0c:	0f 92       	push	r0
    5b0e:	11 24       	eor	r1, r1
    5b10:	0b b6       	in	r0, 0x3b	; 59
    5b12:	0f 92       	push	r0
    5b14:	2f 93       	push	r18
    5b16:	3f 93       	push	r19
    5b18:	4f 93       	push	r20
    5b1a:	5f 93       	push	r21
    5b1c:	6f 93       	push	r22
    5b1e:	7f 93       	push	r23
    5b20:	8f 93       	push	r24
    5b22:	9f 93       	push	r25
    5b24:	af 93       	push	r26
    5b26:	bf 93       	push	r27
    5b28:	ef 93       	push	r30
    5b2a:	ff 93       	push	r31
    5b2c:	e0 91 96 23 	lds	r30, 0x2396	; 0x802396 <InterruptFuncTable+0xd0>
    5b30:	f0 91 97 23 	lds	r31, 0x2397	; 0x802397 <InterruptFuncTable+0xd1>
    5b34:	30 97       	sbiw	r30, 0x00	; 0
    5b36:	29 f0       	breq	.+10     	; 0x5b42 <__vector_104+0x3c>
    5b38:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <InterruptSenderTable+0xd0>
    5b3c:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <InterruptSenderTable+0xd1>
    5b40:	19 95       	eicall
    5b42:	ff 91       	pop	r31
    5b44:	ef 91       	pop	r30
    5b46:	bf 91       	pop	r27
    5b48:	af 91       	pop	r26
    5b4a:	9f 91       	pop	r25
    5b4c:	8f 91       	pop	r24
    5b4e:	7f 91       	pop	r23
    5b50:	6f 91       	pop	r22
    5b52:	5f 91       	pop	r21
    5b54:	4f 91       	pop	r20
    5b56:	3f 91       	pop	r19
    5b58:	2f 91       	pop	r18
    5b5a:	0f 90       	pop	r0
    5b5c:	0b be       	out	0x3b, r0	; 59
    5b5e:	0f 90       	pop	r0
    5b60:	0f be       	out	0x3f, r0	; 63
    5b62:	0f 90       	pop	r0
    5b64:	1f 90       	pop	r1
    5b66:	18 95       	reti

00005b68 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    5b68:	1f 92       	push	r1
    5b6a:	0f 92       	push	r0
    5b6c:	0f b6       	in	r0, 0x3f	; 63
    5b6e:	0f 92       	push	r0
    5b70:	11 24       	eor	r1, r1
    5b72:	0b b6       	in	r0, 0x3b	; 59
    5b74:	0f 92       	push	r0
    5b76:	2f 93       	push	r18
    5b78:	3f 93       	push	r19
    5b7a:	4f 93       	push	r20
    5b7c:	5f 93       	push	r21
    5b7e:	6f 93       	push	r22
    5b80:	7f 93       	push	r23
    5b82:	8f 93       	push	r24
    5b84:	9f 93       	push	r25
    5b86:	af 93       	push	r26
    5b88:	bf 93       	push	r27
    5b8a:	ef 93       	push	r30
    5b8c:	ff 93       	push	r31
    5b8e:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <InterruptFuncTable+0xd2>
    5b92:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <InterruptFuncTable+0xd3>
    5b96:	30 97       	sbiw	r30, 0x00	; 0
    5b98:	29 f0       	breq	.+10     	; 0x5ba4 <__vector_105+0x3c>
    5b9a:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <InterruptSenderTable+0xd2>
    5b9e:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <InterruptSenderTable+0xd3>
    5ba2:	19 95       	eicall
    5ba4:	ff 91       	pop	r31
    5ba6:	ef 91       	pop	r30
    5ba8:	bf 91       	pop	r27
    5baa:	af 91       	pop	r26
    5bac:	9f 91       	pop	r25
    5bae:	8f 91       	pop	r24
    5bb0:	7f 91       	pop	r23
    5bb2:	6f 91       	pop	r22
    5bb4:	5f 91       	pop	r21
    5bb6:	4f 91       	pop	r20
    5bb8:	3f 91       	pop	r19
    5bba:	2f 91       	pop	r18
    5bbc:	0f 90       	pop	r0
    5bbe:	0b be       	out	0x3b, r0	; 59
    5bc0:	0f 90       	pop	r0
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	0f 90       	pop	r0
    5bc6:	1f 90       	pop	r1
    5bc8:	18 95       	reti

00005bca <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    5bca:	1f 92       	push	r1
    5bcc:	0f 92       	push	r0
    5bce:	0f b6       	in	r0, 0x3f	; 63
    5bd0:	0f 92       	push	r0
    5bd2:	11 24       	eor	r1, r1
    5bd4:	0b b6       	in	r0, 0x3b	; 59
    5bd6:	0f 92       	push	r0
    5bd8:	2f 93       	push	r18
    5bda:	3f 93       	push	r19
    5bdc:	4f 93       	push	r20
    5bde:	5f 93       	push	r21
    5be0:	6f 93       	push	r22
    5be2:	7f 93       	push	r23
    5be4:	8f 93       	push	r24
    5be6:	9f 93       	push	r25
    5be8:	af 93       	push	r26
    5bea:	bf 93       	push	r27
    5bec:	ef 93       	push	r30
    5bee:	ff 93       	push	r31
    5bf0:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <InterruptFuncTable+0xd8>
    5bf4:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <InterruptFuncTable+0xd9>
    5bf8:	30 97       	sbiw	r30, 0x00	; 0
    5bfa:	29 f0       	breq	.+10     	; 0x5c06 <__vector_108+0x3c>
    5bfc:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <InterruptSenderTable+0xd8>
    5c00:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <InterruptSenderTable+0xd9>
    5c04:	19 95       	eicall
    5c06:	ff 91       	pop	r31
    5c08:	ef 91       	pop	r30
    5c0a:	bf 91       	pop	r27
    5c0c:	af 91       	pop	r26
    5c0e:	9f 91       	pop	r25
    5c10:	8f 91       	pop	r24
    5c12:	7f 91       	pop	r23
    5c14:	6f 91       	pop	r22
    5c16:	5f 91       	pop	r21
    5c18:	4f 91       	pop	r20
    5c1a:	3f 91       	pop	r19
    5c1c:	2f 91       	pop	r18
    5c1e:	0f 90       	pop	r0
    5c20:	0b be       	out	0x3b, r0	; 59
    5c22:	0f 90       	pop	r0
    5c24:	0f be       	out	0x3f, r0	; 63
    5c26:	0f 90       	pop	r0
    5c28:	1f 90       	pop	r1
    5c2a:	18 95       	reti

00005c2c <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    5c2c:	1f 92       	push	r1
    5c2e:	0f 92       	push	r0
    5c30:	0f b6       	in	r0, 0x3f	; 63
    5c32:	0f 92       	push	r0
    5c34:	11 24       	eor	r1, r1
    5c36:	0b b6       	in	r0, 0x3b	; 59
    5c38:	0f 92       	push	r0
    5c3a:	2f 93       	push	r18
    5c3c:	3f 93       	push	r19
    5c3e:	4f 93       	push	r20
    5c40:	5f 93       	push	r21
    5c42:	6f 93       	push	r22
    5c44:	7f 93       	push	r23
    5c46:	8f 93       	push	r24
    5c48:	9f 93       	push	r25
    5c4a:	af 93       	push	r26
    5c4c:	bf 93       	push	r27
    5c4e:	ef 93       	push	r30
    5c50:	ff 93       	push	r31
    5c52:	e0 91 a0 23 	lds	r30, 0x23A0	; 0x8023a0 <InterruptFuncTable+0xda>
    5c56:	f0 91 a1 23 	lds	r31, 0x23A1	; 0x8023a1 <InterruptFuncTable+0xdb>
    5c5a:	30 97       	sbiw	r30, 0x00	; 0
    5c5c:	29 f0       	breq	.+10     	; 0x5c68 <__vector_109+0x3c>
    5c5e:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <InterruptSenderTable+0xda>
    5c62:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <InterruptSenderTable+0xdb>
    5c66:	19 95       	eicall
    5c68:	ff 91       	pop	r31
    5c6a:	ef 91       	pop	r30
    5c6c:	bf 91       	pop	r27
    5c6e:	af 91       	pop	r26
    5c70:	9f 91       	pop	r25
    5c72:	8f 91       	pop	r24
    5c74:	7f 91       	pop	r23
    5c76:	6f 91       	pop	r22
    5c78:	5f 91       	pop	r21
    5c7a:	4f 91       	pop	r20
    5c7c:	3f 91       	pop	r19
    5c7e:	2f 91       	pop	r18
    5c80:	0f 90       	pop	r0
    5c82:	0b be       	out	0x3b, r0	; 59
    5c84:	0f 90       	pop	r0
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	0f 90       	pop	r0
    5c8a:	1f 90       	pop	r1
    5c8c:	18 95       	reti

00005c8e <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    5c8e:	1f 92       	push	r1
    5c90:	0f 92       	push	r0
    5c92:	0f b6       	in	r0, 0x3f	; 63
    5c94:	0f 92       	push	r0
    5c96:	11 24       	eor	r1, r1
    5c98:	0b b6       	in	r0, 0x3b	; 59
    5c9a:	0f 92       	push	r0
    5c9c:	2f 93       	push	r18
    5c9e:	3f 93       	push	r19
    5ca0:	4f 93       	push	r20
    5ca2:	5f 93       	push	r21
    5ca4:	6f 93       	push	r22
    5ca6:	7f 93       	push	r23
    5ca8:	8f 93       	push	r24
    5caa:	9f 93       	push	r25
    5cac:	af 93       	push	r26
    5cae:	bf 93       	push	r27
    5cb0:	ef 93       	push	r30
    5cb2:	ff 93       	push	r31
    5cb4:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <InterruptFuncTable+0xdc>
    5cb8:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <InterruptFuncTable+0xdd>
    5cbc:	30 97       	sbiw	r30, 0x00	; 0
    5cbe:	29 f0       	breq	.+10     	; 0x5cca <__vector_110+0x3c>
    5cc0:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <InterruptSenderTable+0xdc>
    5cc4:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <InterruptSenderTable+0xdd>
    5cc8:	19 95       	eicall
    5cca:	ff 91       	pop	r31
    5ccc:	ef 91       	pop	r30
    5cce:	bf 91       	pop	r27
    5cd0:	af 91       	pop	r26
    5cd2:	9f 91       	pop	r25
    5cd4:	8f 91       	pop	r24
    5cd6:	7f 91       	pop	r23
    5cd8:	6f 91       	pop	r22
    5cda:	5f 91       	pop	r21
    5cdc:	4f 91       	pop	r20
    5cde:	3f 91       	pop	r19
    5ce0:	2f 91       	pop	r18
    5ce2:	0f 90       	pop	r0
    5ce4:	0b be       	out	0x3b, r0	; 59
    5ce6:	0f 90       	pop	r0
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	0f 90       	pop	r0
    5cec:	1f 90       	pop	r1
    5cee:	18 95       	reti

00005cf0 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    5cf0:	1f 92       	push	r1
    5cf2:	0f 92       	push	r0
    5cf4:	0f b6       	in	r0, 0x3f	; 63
    5cf6:	0f 92       	push	r0
    5cf8:	11 24       	eor	r1, r1
    5cfa:	0b b6       	in	r0, 0x3b	; 59
    5cfc:	0f 92       	push	r0
    5cfe:	2f 93       	push	r18
    5d00:	3f 93       	push	r19
    5d02:	4f 93       	push	r20
    5d04:	5f 93       	push	r21
    5d06:	6f 93       	push	r22
    5d08:	7f 93       	push	r23
    5d0a:	8f 93       	push	r24
    5d0c:	9f 93       	push	r25
    5d0e:	af 93       	push	r26
    5d10:	bf 93       	push	r27
    5d12:	ef 93       	push	r30
    5d14:	ff 93       	push	r31
    5d16:	e0 91 a4 23 	lds	r30, 0x23A4	; 0x8023a4 <InterruptFuncTable+0xde>
    5d1a:	f0 91 a5 23 	lds	r31, 0x23A5	; 0x8023a5 <InterruptFuncTable+0xdf>
    5d1e:	30 97       	sbiw	r30, 0x00	; 0
    5d20:	29 f0       	breq	.+10     	; 0x5d2c <__vector_111+0x3c>
    5d22:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <InterruptSenderTable+0xde>
    5d26:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <InterruptSenderTable+0xdf>
    5d2a:	19 95       	eicall
    5d2c:	ff 91       	pop	r31
    5d2e:	ef 91       	pop	r30
    5d30:	bf 91       	pop	r27
    5d32:	af 91       	pop	r26
    5d34:	9f 91       	pop	r25
    5d36:	8f 91       	pop	r24
    5d38:	7f 91       	pop	r23
    5d3a:	6f 91       	pop	r22
    5d3c:	5f 91       	pop	r21
    5d3e:	4f 91       	pop	r20
    5d40:	3f 91       	pop	r19
    5d42:	2f 91       	pop	r18
    5d44:	0f 90       	pop	r0
    5d46:	0b be       	out	0x3b, r0	; 59
    5d48:	0f 90       	pop	r0
    5d4a:	0f be       	out	0x3f, r0	; 63
    5d4c:	0f 90       	pop	r0
    5d4e:	1f 90       	pop	r1
    5d50:	18 95       	reti

00005d52 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    5d52:	1f 92       	push	r1
    5d54:	0f 92       	push	r0
    5d56:	0f b6       	in	r0, 0x3f	; 63
    5d58:	0f 92       	push	r0
    5d5a:	11 24       	eor	r1, r1
    5d5c:	0b b6       	in	r0, 0x3b	; 59
    5d5e:	0f 92       	push	r0
    5d60:	2f 93       	push	r18
    5d62:	3f 93       	push	r19
    5d64:	4f 93       	push	r20
    5d66:	5f 93       	push	r21
    5d68:	6f 93       	push	r22
    5d6a:	7f 93       	push	r23
    5d6c:	8f 93       	push	r24
    5d6e:	9f 93       	push	r25
    5d70:	af 93       	push	r26
    5d72:	bf 93       	push	r27
    5d74:	ef 93       	push	r30
    5d76:	ff 93       	push	r31
    5d78:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <InterruptFuncTable+0xe0>
    5d7c:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <InterruptFuncTable+0xe1>
    5d80:	30 97       	sbiw	r30, 0x00	; 0
    5d82:	29 f0       	breq	.+10     	; 0x5d8e <__vector_112+0x3c>
    5d84:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <InterruptSenderTable+0xe0>
    5d88:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <InterruptSenderTable+0xe1>
    5d8c:	19 95       	eicall
    5d8e:	ff 91       	pop	r31
    5d90:	ef 91       	pop	r30
    5d92:	bf 91       	pop	r27
    5d94:	af 91       	pop	r26
    5d96:	9f 91       	pop	r25
    5d98:	8f 91       	pop	r24
    5d9a:	7f 91       	pop	r23
    5d9c:	6f 91       	pop	r22
    5d9e:	5f 91       	pop	r21
    5da0:	4f 91       	pop	r20
    5da2:	3f 91       	pop	r19
    5da4:	2f 91       	pop	r18
    5da6:	0f 90       	pop	r0
    5da8:	0b be       	out	0x3b, r0	; 59
    5daa:	0f 90       	pop	r0
    5dac:	0f be       	out	0x3f, r0	; 63
    5dae:	0f 90       	pop	r0
    5db0:	1f 90       	pop	r1
    5db2:	18 95       	reti

00005db4 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    5db4:	1f 92       	push	r1
    5db6:	0f 92       	push	r0
    5db8:	0f b6       	in	r0, 0x3f	; 63
    5dba:	0f 92       	push	r0
    5dbc:	11 24       	eor	r1, r1
    5dbe:	0b b6       	in	r0, 0x3b	; 59
    5dc0:	0f 92       	push	r0
    5dc2:	2f 93       	push	r18
    5dc4:	3f 93       	push	r19
    5dc6:	4f 93       	push	r20
    5dc8:	5f 93       	push	r21
    5dca:	6f 93       	push	r22
    5dcc:	7f 93       	push	r23
    5dce:	8f 93       	push	r24
    5dd0:	9f 93       	push	r25
    5dd2:	af 93       	push	r26
    5dd4:	bf 93       	push	r27
    5dd6:	ef 93       	push	r30
    5dd8:	ff 93       	push	r31
    5dda:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <InterruptFuncTable+0xe2>
    5dde:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <InterruptFuncTable+0xe3>
    5de2:	30 97       	sbiw	r30, 0x00	; 0
    5de4:	29 f0       	breq	.+10     	; 0x5df0 <__vector_113+0x3c>
    5de6:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <InterruptSenderTable+0xe2>
    5dea:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <InterruptSenderTable+0xe3>
    5dee:	19 95       	eicall
    5df0:	ff 91       	pop	r31
    5df2:	ef 91       	pop	r30
    5df4:	bf 91       	pop	r27
    5df6:	af 91       	pop	r26
    5df8:	9f 91       	pop	r25
    5dfa:	8f 91       	pop	r24
    5dfc:	7f 91       	pop	r23
    5dfe:	6f 91       	pop	r22
    5e00:	5f 91       	pop	r21
    5e02:	4f 91       	pop	r20
    5e04:	3f 91       	pop	r19
    5e06:	2f 91       	pop	r18
    5e08:	0f 90       	pop	r0
    5e0a:	0b be       	out	0x3b, r0	; 59
    5e0c:	0f 90       	pop	r0
    5e0e:	0f be       	out	0x3f, r0	; 63
    5e10:	0f 90       	pop	r0
    5e12:	1f 90       	pop	r1
    5e14:	18 95       	reti

00005e16 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    5e16:	1f 92       	push	r1
    5e18:	0f 92       	push	r0
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	0f 92       	push	r0
    5e1e:	11 24       	eor	r1, r1
    5e20:	0b b6       	in	r0, 0x3b	; 59
    5e22:	0f 92       	push	r0
    5e24:	2f 93       	push	r18
    5e26:	3f 93       	push	r19
    5e28:	4f 93       	push	r20
    5e2a:	5f 93       	push	r21
    5e2c:	6f 93       	push	r22
    5e2e:	7f 93       	push	r23
    5e30:	8f 93       	push	r24
    5e32:	9f 93       	push	r25
    5e34:	af 93       	push	r26
    5e36:	bf 93       	push	r27
    5e38:	ef 93       	push	r30
    5e3a:	ff 93       	push	r31
    5e3c:	e0 91 b4 23 	lds	r30, 0x23B4	; 0x8023b4 <InterruptFuncTable+0xee>
    5e40:	f0 91 b5 23 	lds	r31, 0x23B5	; 0x8023b5 <InterruptFuncTable+0xef>
    5e44:	30 97       	sbiw	r30, 0x00	; 0
    5e46:	29 f0       	breq	.+10     	; 0x5e52 <__vector_119+0x3c>
    5e48:	80 91 aa 24 	lds	r24, 0x24AA	; 0x8024aa <InterruptSenderTable+0xee>
    5e4c:	90 91 ab 24 	lds	r25, 0x24AB	; 0x8024ab <InterruptSenderTable+0xef>
    5e50:	19 95       	eicall
    5e52:	ff 91       	pop	r31
    5e54:	ef 91       	pop	r30
    5e56:	bf 91       	pop	r27
    5e58:	af 91       	pop	r26
    5e5a:	9f 91       	pop	r25
    5e5c:	8f 91       	pop	r24
    5e5e:	7f 91       	pop	r23
    5e60:	6f 91       	pop	r22
    5e62:	5f 91       	pop	r21
    5e64:	4f 91       	pop	r20
    5e66:	3f 91       	pop	r19
    5e68:	2f 91       	pop	r18
    5e6a:	0f 90       	pop	r0
    5e6c:	0b be       	out	0x3b, r0	; 59
    5e6e:	0f 90       	pop	r0
    5e70:	0f be       	out	0x3f, r0	; 63
    5e72:	0f 90       	pop	r0
    5e74:	1f 90       	pop	r1
    5e76:	18 95       	reti

00005e78 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    5e78:	1f 92       	push	r1
    5e7a:	0f 92       	push	r0
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	0f 92       	push	r0
    5e80:	11 24       	eor	r1, r1
    5e82:	0b b6       	in	r0, 0x3b	; 59
    5e84:	0f 92       	push	r0
    5e86:	2f 93       	push	r18
    5e88:	3f 93       	push	r19
    5e8a:	4f 93       	push	r20
    5e8c:	5f 93       	push	r21
    5e8e:	6f 93       	push	r22
    5e90:	7f 93       	push	r23
    5e92:	8f 93       	push	r24
    5e94:	9f 93       	push	r25
    5e96:	af 93       	push	r26
    5e98:	bf 93       	push	r27
    5e9a:	ef 93       	push	r30
    5e9c:	ff 93       	push	r31
    5e9e:	e0 91 b6 23 	lds	r30, 0x23B6	; 0x8023b6 <InterruptFuncTable+0xf0>
    5ea2:	f0 91 b7 23 	lds	r31, 0x23B7	; 0x8023b7 <InterruptFuncTable+0xf1>
    5ea6:	30 97       	sbiw	r30, 0x00	; 0
    5ea8:	29 f0       	breq	.+10     	; 0x5eb4 <__vector_120+0x3c>
    5eaa:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <InterruptSenderTable+0xf0>
    5eae:	90 91 ad 24 	lds	r25, 0x24AD	; 0x8024ad <InterruptSenderTable+0xf1>
    5eb2:	19 95       	eicall
    5eb4:	ff 91       	pop	r31
    5eb6:	ef 91       	pop	r30
    5eb8:	bf 91       	pop	r27
    5eba:	af 91       	pop	r26
    5ebc:	9f 91       	pop	r25
    5ebe:	8f 91       	pop	r24
    5ec0:	7f 91       	pop	r23
    5ec2:	6f 91       	pop	r22
    5ec4:	5f 91       	pop	r21
    5ec6:	4f 91       	pop	r20
    5ec8:	3f 91       	pop	r19
    5eca:	2f 91       	pop	r18
    5ecc:	0f 90       	pop	r0
    5ece:	0b be       	out	0x3b, r0	; 59
    5ed0:	0f 90       	pop	r0
    5ed2:	0f be       	out	0x3f, r0	; 63
    5ed4:	0f 90       	pop	r0
    5ed6:	1f 90       	pop	r1
    5ed8:	18 95       	reti

00005eda <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    5eda:	1f 92       	push	r1
    5edc:	0f 92       	push	r0
    5ede:	0f b6       	in	r0, 0x3f	; 63
    5ee0:	0f 92       	push	r0
    5ee2:	11 24       	eor	r1, r1
    5ee4:	0b b6       	in	r0, 0x3b	; 59
    5ee6:	0f 92       	push	r0
    5ee8:	2f 93       	push	r18
    5eea:	3f 93       	push	r19
    5eec:	4f 93       	push	r20
    5eee:	5f 93       	push	r21
    5ef0:	6f 93       	push	r22
    5ef2:	7f 93       	push	r23
    5ef4:	8f 93       	push	r24
    5ef6:	9f 93       	push	r25
    5ef8:	af 93       	push	r26
    5efa:	bf 93       	push	r27
    5efc:	ef 93       	push	r30
    5efe:	ff 93       	push	r31
    5f00:	e0 91 b8 23 	lds	r30, 0x23B8	; 0x8023b8 <InterruptFuncTable+0xf2>
    5f04:	f0 91 b9 23 	lds	r31, 0x23B9	; 0x8023b9 <InterruptFuncTable+0xf3>
    5f08:	30 97       	sbiw	r30, 0x00	; 0
    5f0a:	29 f0       	breq	.+10     	; 0x5f16 <__vector_121+0x3c>
    5f0c:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <InterruptSenderTable+0xf2>
    5f10:	90 91 af 24 	lds	r25, 0x24AF	; 0x8024af <InterruptSenderTable+0xf3>
    5f14:	19 95       	eicall
    5f16:	ff 91       	pop	r31
    5f18:	ef 91       	pop	r30
    5f1a:	bf 91       	pop	r27
    5f1c:	af 91       	pop	r26
    5f1e:	9f 91       	pop	r25
    5f20:	8f 91       	pop	r24
    5f22:	7f 91       	pop	r23
    5f24:	6f 91       	pop	r22
    5f26:	5f 91       	pop	r21
    5f28:	4f 91       	pop	r20
    5f2a:	3f 91       	pop	r19
    5f2c:	2f 91       	pop	r18
    5f2e:	0f 90       	pop	r0
    5f30:	0b be       	out	0x3b, r0	; 59
    5f32:	0f 90       	pop	r0
    5f34:	0f be       	out	0x3f, r0	; 63
    5f36:	0f 90       	pop	r0
    5f38:	1f 90       	pop	r1
    5f3a:	18 95       	reti

00005f3c <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    5f3c:	0e 94 9d 38 	call	0x713a	; 0x713a <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    5f40:	fd cf       	rjmp	.-6      	; 0x5f3c <__cxa_pure_virtual>

00005f42 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    5f42:	81 e2       	ldi	r24, 0x21	; 33
    5f44:	96 e2       	ldi	r25, 0x26	; 38
    5f46:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN4CSPIC1Ev>
CTimerC timer;
    5f4a:	8e e1       	ldi	r24, 0x1E	; 30
    5f4c:	96 e2       	ldi	r25, 0x26	; 38
    5f4e:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    5f52:	8b e1       	ldi	r24, 0x1B	; 27
    5f54:	96 e2       	ldi	r25, 0x26	; 38
    5f56:	0e 94 34 3c 	call	0x7868	; 0x7868 <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    5f5a:	88 e1       	ldi	r24, 0x18	; 24
    5f5c:	96 e2       	ldi	r25, 0x26	; 38
    5f5e:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    5f62:	85 e1       	ldi	r24, 0x15	; 21
    5f64:	96 e2       	ldi	r25, 0x26	; 38
    5f66:	0e 94 b8 3a 	call	0x7570	; 0x7570 <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    5f6a:	82 e1       	ldi	r24, 0x12	; 18
    5f6c:	96 e2       	ldi	r25, 0x26	; 38
    5f6e:	0e 94 89 3b 	call	0x7712	; 0x7712 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    5f72:	80 e1       	ldi	r24, 0x10	; 16
    5f74:	96 e2       	ldi	r25, 0x26	; 38
    5f76:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    5f7a:	88 e0       	ldi	r24, 0x08	; 8
    5f7c:	96 e2       	ldi	r25, 0x26	; 38
    5f7e:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    5f82:	8b ee       	ldi	r24, 0xEB	; 235
    5f84:	95 e2       	ldi	r25, 0x25	; 37
    5f86:	0e 94 89 33 	call	0x6712	; 0x6712 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    5f8a:	81 ee       	ldi	r24, 0xE1	; 225
    5f8c:	95 e2       	ldi	r25, 0x25	; 37
    5f8e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    5f92:	80 ee       	ldi	r24, 0xE0	; 224
    5f94:	95 e2       	ldi	r25, 0x25	; 37
    5f96:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    5f9a:	8a eb       	ldi	r24, 0xBA	; 186
    5f9c:	94 e2       	ldi	r25, 0x24	; 36
    5f9e:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    5fa2:	86 eb       	ldi	r24, 0xB6	; 182
    5fa4:	94 e2       	ldi	r25, 0x24	; 36
    5fa6:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <_ZN8CDS18B20C1Ev>
    5faa:	08 95       	ret

00005fac <_GLOBAL__sub_D_dacSPI>:
    5fac:	86 eb       	ldi	r24, 0xB6	; 182
    5fae:	94 e2       	ldi	r25, 0x24	; 36
    5fb0:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    5fb4:	8a eb       	ldi	r24, 0xBA	; 186
    5fb6:	94 e2       	ldi	r25, 0x24	; 36
    5fb8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    5fbc:	80 ee       	ldi	r24, 0xE0	; 224
    5fbe:	95 e2       	ldi	r25, 0x25	; 37
    5fc0:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    5fc4:	81 ee       	ldi	r24, 0xE1	; 225
    5fc6:	95 e2       	ldi	r25, 0x25	; 37
    5fc8:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    5fcc:	8b ee       	ldi	r24, 0xEB	; 235
    5fce:	95 e2       	ldi	r25, 0x25	; 37
    5fd0:	0e 94 00 34 	call	0x6800	; 0x6800 <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    5fd4:	88 e0       	ldi	r24, 0x08	; 8
    5fd6:	96 e2       	ldi	r25, 0x26	; 38
    5fd8:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    5fdc:	80 e1       	ldi	r24, 0x10	; 16
    5fde:	96 e2       	ldi	r25, 0x26	; 38
    5fe0:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    5fe4:	82 e1       	ldi	r24, 0x12	; 18
    5fe6:	96 e2       	ldi	r25, 0x26	; 38
    5fe8:	0e 94 95 3b 	call	0x772a	; 0x772a <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    5fec:	85 e1       	ldi	r24, 0x15	; 21
    5fee:	96 e2       	ldi	r25, 0x26	; 38
    5ff0:	0e 94 c4 3a 	call	0x7588	; 0x7588 <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    5ff4:	88 e1       	ldi	r24, 0x18	; 24
    5ff6:	96 e2       	ldi	r25, 0x26	; 38
    5ff8:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    5ffc:	8b e1       	ldi	r24, 0x1B	; 27
    5ffe:	96 e2       	ldi	r25, 0x26	; 38
    6000:	0e 94 40 3c 	call	0x7880	; 0x7880 <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    6004:	8e e1       	ldi	r24, 0x1E	; 30
    6006:	96 e2       	ldi	r25, 0x26	; 38
    6008:	0e 94 15 3a 	call	0x742a	; 0x742a <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    600c:	81 e2       	ldi	r24, 0x21	; 33
    600e:	96 e2       	ldi	r25, 0x26	; 38
    6010:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN4CSPID1Ev>
    6014:	08 95       	ret

00006016 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    6016:	cf 92       	push	r12
    6018:	df 92       	push	r13
    601a:	ef 92       	push	r14
    601c:	ff 92       	push	r15
    601e:	0f 93       	push	r16
    6020:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    6022:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    6024:	84 e6       	ldi	r24, 0x64	; 100
    6026:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize modules
	laserBoard.InitializeIO();
    602a:	81 ee       	ldi	r24, 0xE1	; 225
    602c:	95 e2       	ldi	r25, 0x25	; 37
    602e:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    6032:	86 eb       	ldi	r24, 0xB6	; 182
    6034:	94 e2       	ldi	r25, 0x24	; 36
    6036:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    603a:	80 ee       	ldi	r24, 0xE0	; 224
    603c:	95 e2       	ldi	r25, 0x25	; 37
    603e:	0e 94 41 39 	call	0x7282	; 0x7282 <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    6042:	46 e0       	ldi	r20, 0x06	; 6
    6044:	60 e0       	ldi	r22, 0x00	; 0
    6046:	8e e1       	ldi	r24, 0x1E	; 30
    6048:	96 e2       	ldi	r25, 0x26	; 38
    604a:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    604e:	68 ea       	ldi	r22, 0xA8	; 168
    6050:	71 e6       	ldi	r23, 0x61	; 97
    6052:	8e e1       	ldi	r24, 0x1E	; 30
    6054:	96 e2       	ldi	r25, 0x26	; 38
    6056:	0e 94 8a 39 	call	0x7314	; 0x7314 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    605a:	21 e0       	ldi	r18, 0x01	; 1
    605c:	4a eb       	ldi	r20, 0xBA	; 186
    605e:	54 e2       	ldi	r21, 0x24	; 36
    6060:	6b e5       	ldi	r22, 0x5B	; 91
    6062:	73 e1       	ldi	r23, 0x13	; 19
    6064:	8e e1       	ldi	r24, 0x1E	; 30
    6066:	96 e2       	ldi	r25, 0x26	; 38
    6068:	0e 94 a3 39 	call	0x7346	; 0x7346 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    606c:	47 e0       	ldi	r20, 0x07	; 7
    606e:	60 e0       	ldi	r22, 0x00	; 0
    6070:	8b e1       	ldi	r24, 0x1B	; 27
    6072:	96 e2       	ldi	r25, 0x26	; 38
    6074:	0e 94 9d 3b 	call	0x773a	; 0x773a <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    6078:	62 e1       	ldi	r22, 0x12	; 18
    607a:	7a e7       	ldi	r23, 0x7A	; 122
    607c:	8b e1       	ldi	r24, 0x1B	; 27
    607e:	96 e2       	ldi	r25, 0x26	; 38
    6080:	0e 94 e1 3b 	call	0x77c2	; 0x77c2 <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    6084:	48 e0       	ldi	r20, 0x08	; 8
    6086:	60 e0       	ldi	r22, 0x00	; 0
    6088:	85 e1       	ldi	r24, 0x15	; 21
    608a:	96 e2       	ldi	r25, 0x26	; 38
    608c:	0e 94 1d 3a 	call	0x743a	; 0x743a <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    6090:	6f ef       	ldi	r22, 0xFF	; 255
    6092:	7f ef       	ldi	r23, 0xFF	; 255
    6094:	85 e1       	ldi	r24, 0x15	; 21
    6096:	96 e2       	ldi	r25, 0x26	; 38
    6098:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    609c:	6f ef       	ldi	r22, 0xFF	; 255
    609e:	7f ef       	ldi	r23, 0xFF	; 255
    60a0:	85 e1       	ldi	r24, 0x15	; 21
    60a2:	96 e2       	ldi	r25, 0x26	; 38
    60a4:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    60a8:	45 e0       	ldi	r20, 0x05	; 5
    60aa:	63 e0       	ldi	r22, 0x03	; 3
    60ac:	82 e1       	ldi	r24, 0x12	; 18
    60ae:	96 e2       	ldi	r25, 0x26	; 38
    60b0:	0e 94 cc 3a 	call	0x7598	; 0x7598 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    60b4:	60 e0       	ldi	r22, 0x00	; 0
    60b6:	72 e0       	ldi	r23, 0x02	; 2
    60b8:	82 e1       	ldi	r24, 0x12	; 18
    60ba:	96 e2       	ldi	r25, 0x26	; 38
    60bc:	0e 94 0f 3b 	call	0x761e	; 0x761e <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    60c0:	81 ee       	ldi	r24, 0xE1	; 225
    60c2:	95 e2       	ldi	r25, 0x25	; 37
    60c4:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    60c8:	81 ee       	ldi	r24, 0xE1	; 225
    60ca:	95 e2       	ldi	r25, 0x25	; 37
    60cc:	0e 94 65 38 	call	0x70ca	; 0x70ca <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    60d0:	81 ee       	ldi	r24, 0xE1	; 225
    60d2:	95 e2       	ldi	r25, 0x25	; 37
    60d4:	0e 94 69 38 	call	0x70d2	; 0x70d2 <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    60d8:	81 ee       	ldi	r24, 0xE1	; 225
    60da:	95 e2       	ldi	r25, 0x25	; 37
    60dc:	0e 94 6d 38 	call	0x70da	; 0x70da <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    60e0:	21 e0       	ldi	r18, 0x01	; 1
    60e2:	4a eb       	ldi	r20, 0xBA	; 186
    60e4:	54 e2       	ldi	r21, 0x24	; 36
    60e6:	66 e1       	ldi	r22, 0x16	; 22
    60e8:	76 e0       	ldi	r23, 0x06	; 6
    60ea:	82 e1       	ldi	r24, 0x12	; 18
    60ec:	96 e2       	ldi	r25, 0x26	; 38
    60ee:	0e 94 23 3b 	call	0x7646	; 0x7646 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    60f2:	21 e0       	ldi	r18, 0x01	; 1
    60f4:	4a eb       	ldi	r20, 0xBA	; 186
    60f6:	54 e2       	ldi	r21, 0x24	; 36
    60f8:	69 e1       	ldi	r22, 0x19	; 25
    60fa:	76 e0       	ldi	r23, 0x06	; 6
    60fc:	82 e1       	ldi	r24, 0x12	; 18
    60fe:	96 e2       	ldi	r25, 0x26	; 38
    6100:	0e 94 45 3b 	call	0x768a	; 0x768a <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    6104:	60 e0       	ldi	r22, 0x00	; 0
    6106:	71 e0       	ldi	r23, 0x01	; 1
    6108:	82 e1       	ldi	r24, 0x12	; 18
    610a:	96 e2       	ldi	r25, 0x26	; 38
    610c:	0e 94 14 3b 	call	0x7628	; 0x7628 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    6110:	60 e0       	ldi	r22, 0x00	; 0
    6112:	72 e0       	ldi	r23, 0x02	; 2
    6114:	82 e1       	ldi	r24, 0x12	; 18
    6116:	96 e2       	ldi	r25, 0x26	; 38
    6118:	0e 94 19 3b 	call	0x7632	; 0x7632 <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    611c:	60 e0       	ldi	r22, 0x00	; 0
    611e:	73 e0       	ldi	r23, 0x03	; 3
    6120:	82 e1       	ldi	r24, 0x12	; 18
    6122:	96 e2       	ldi	r25, 0x26	; 38
    6124:	0e 94 1e 3b 	call	0x763c	; 0x763c <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    6128:	2c e0       	ldi	r18, 0x0C	; 12
    612a:	4a eb       	ldi	r20, 0xBA	; 186
    612c:	54 e2       	ldi	r21, 0x24	; 36
    612e:	6c e1       	ldi	r22, 0x1C	; 28
    6130:	76 e0       	ldi	r23, 0x06	; 6
    6132:	82 e1       	ldi	r24, 0x12	; 18
    6134:	96 e2       	ldi	r25, 0x26	; 38
    6136:	0e 94 56 3b 	call	0x76ac	; 0x76ac <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    613a:	20 e3       	ldi	r18, 0x30	; 48
    613c:	4a eb       	ldi	r20, 0xBA	; 186
    613e:	54 e2       	ldi	r21, 0x24	; 36
    6140:	6d e1       	ldi	r22, 0x1D	; 29
    6142:	76 e0       	ldi	r23, 0x06	; 6
    6144:	82 e1       	ldi	r24, 0x12	; 18
    6146:	96 e2       	ldi	r25, 0x26	; 38
    6148:	0e 94 67 3b 	call	0x76ce	; 0x76ce <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    614c:	20 ec       	ldi	r18, 0xC0	; 192
    614e:	4a eb       	ldi	r20, 0xBA	; 186
    6150:	54 e2       	ldi	r21, 0x24	; 36
    6152:	6e e1       	ldi	r22, 0x1E	; 30
    6154:	76 e0       	ldi	r23, 0x06	; 6
    6156:	82 e1       	ldi	r24, 0x12	; 18
    6158:	96 e2       	ldi	r25, 0x26	; 38
    615a:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    615e:	60 e0       	ldi	r22, 0x00	; 0
    6160:	74 e0       	ldi	r23, 0x04	; 4
    6162:	82 e1       	ldi	r24, 0x12	; 18
    6164:	96 e2       	ldi	r25, 0x26	; 38
    6166:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    616a:	0f 2e       	mov	r0, r31
    616c:	f3 e0       	ldi	r31, 0x03	; 3
    616e:	ef 2e       	mov	r14, r31
    6170:	f0 2d       	mov	r31, r0
    6172:	00 e0       	ldi	r16, 0x00	; 0
    6174:	23 e0       	ldi	r18, 0x03	; 3
    6176:	40 e0       	ldi	r20, 0x00	; 0
    6178:	61 e0       	ldi	r22, 0x01	; 1
    617a:	81 e2       	ldi	r24, 0x21	; 33
    617c:	96 e2       	ldi	r25, 0x26	; 38
    617e:	0e 94 87 1b 	call	0x370e	; 0x370e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    6182:	01 e0       	ldi	r16, 0x01	; 1
    6184:	20 e0       	ldi	r18, 0x00	; 0
    6186:	40 e0       	ldi	r20, 0x00	; 0
    6188:	6d e0       	ldi	r22, 0x0D	; 13
    618a:	80 e1       	ldi	r24, 0x10	; 16
    618c:	96 e2       	ldi	r25, 0x26	; 38
    618e:	0e 94 14 36 	call	0x6c28	; 0x6c28 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    6192:	0f 2e       	mov	r0, r31
    6194:	f2 e1       	ldi	r31, 0x12	; 18
    6196:	cf 2e       	mov	r12, r31
    6198:	fa e7       	ldi	r31, 0x7A	; 122
    619a:	df 2e       	mov	r13, r31
    619c:	f0 2d       	mov	r31, r0
    619e:	e1 2c       	mov	r14, r1
    61a0:	ff 24       	eor	r15, r15
    61a2:	f3 94       	inc	r15
    61a4:	00 e0       	ldi	r16, 0x00	; 0
    61a6:	11 e0       	ldi	r17, 0x01	; 1
    61a8:	2a eb       	ldi	r18, 0xBA	; 186
    61aa:	34 e2       	ldi	r19, 0x24	; 36
    61ac:	40 e1       	ldi	r20, 0x10	; 16
    61ae:	56 e2       	ldi	r21, 0x26	; 38
    61b0:	6b e1       	ldi	r22, 0x1B	; 27
    61b2:	76 e2       	ldi	r23, 0x26	; 38
    61b4:	8b ee       	ldi	r24, 0xEB	; 235
    61b6:	95 e2       	ldi	r25, 0x25	; 37
    61b8:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    61bc:	40 e0       	ldi	r20, 0x00	; 0
    61be:	51 e0       	ldi	r21, 0x01	; 1
    61c0:	6b ee       	ldi	r22, 0xEB	; 235
    61c2:	75 e2       	ldi	r23, 0x25	; 37
    61c4:	88 e0       	ldi	r24, 0x08	; 8
    61c6:	96 e2       	ldi	r25, 0x26	; 38
    61c8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    61cc:	6b ee       	ldi	r22, 0xEB	; 235
    61ce:	75 e2       	ldi	r23, 0x25	; 37
    61d0:	8a eb       	ldi	r24, 0xBA	; 186
    61d2:	94 e2       	ldi	r25, 0x24	; 36
    61d4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    61d8:	81 ee       	ldi	r24, 0xE1	; 225
    61da:	95 e2       	ldi	r25, 0x25	; 37
    61dc:	0e 94 28 38 	call	0x7050	; 0x7050 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    61e0:	8a eb       	ldi	r24, 0xBA	; 186
    61e2:	94 e2       	ldi	r25, 0x24	; 36
    61e4:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <InterruptSenderTable+0x4>
    61e8:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <InterruptSenderTable+0x5>
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    61ec:	84 e4       	ldi	r24, 0x44	; 68
    61ee:	9b e1       	ldi	r25, 0x1B	; 27
    61f0:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <InterruptFuncTable+0x4>
    61f4:	90 93 cb 22 	sts	0x22CB, r25	; 0x8022cb <InterruptFuncTable+0x5>
	
	sei();	/* Enable global interrupts */
    61f8:	78 94       	sei
}
    61fa:	1f 91       	pop	r17
    61fc:	0f 91       	pop	r16
    61fe:	ff 90       	pop	r15
    6200:	ef 90       	pop	r14
    6202:	df 90       	pop	r13
    6204:	cf 90       	pop	r12
    6206:	08 95       	ret

00006208 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    6208:	cf 93       	push	r28
    620a:	df 93       	push	r29
    620c:	1f 92       	push	r1
    620e:	1f 92       	push	r1
    6210:	cd b7       	in	r28, 0x3d	; 61
    6212:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    6214:	0e 94 0b 30 	call	0x6016	; 0x6016 <_Z16SystemInitializev>
    6218:	2a ea       	ldi	r18, 0xAA	; 170
    621a:	36 ee       	ldi	r19, 0xE6	; 230
    621c:	86 e9       	ldi	r24, 0x96	; 150
    621e:	91 e0       	ldi	r25, 0x01	; 1
    6220:	21 50       	subi	r18, 0x01	; 1
    6222:	30 40       	sbci	r19, 0x00	; 0
    6224:	80 40       	sbci	r24, 0x00	; 0
    6226:	90 40       	sbci	r25, 0x00	; 0
    6228:	d9 f7       	brne	.-10     	; 0x6220 <main+0x18>
    622a:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    622c:	81 ee       	ldi	r24, 0xE1	; 225
    622e:	95 e2       	ldi	r25, 0x25	; 37
    6230:	0e 94 71 38 	call	0x70e2	; 0x70e2 <_ZN11CLaserBoard8Relay1OnEv>
    6234:	2f ef       	ldi	r18, 0xFF	; 255
    6236:	33 ec       	ldi	r19, 0xC3	; 195
    6238:	89 e0       	ldi	r24, 0x09	; 9
    623a:	21 50       	subi	r18, 0x01	; 1
    623c:	30 40       	sbci	r19, 0x00	; 0
    623e:	80 40       	sbci	r24, 0x00	; 0
    6240:	e1 f7       	brne	.-8      	; 0x623a <main+0x32>
    6242:	00 c0       	rjmp	.+0      	; 0x6244 <main+0x3c>
    6244:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    6246:	19 82       	std	Y+1, r1	; 0x01
    6248:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    624a:	42 e0       	ldi	r20, 0x02	; 2
    624c:	50 e0       	ldi	r21, 0x00	; 0
    624e:	be 01       	movw	r22, r28
    6250:	6f 5f       	subi	r22, 0xFF	; 255
    6252:	7f 4f       	sbci	r23, 0xFF	; 255
    6254:	81 e2       	ldi	r24, 0x21	; 33
    6256:	96 e2       	ldi	r25, 0x26	; 38
    6258:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    625c:	8a eb       	ldi	r24, 0xBA	; 186
    625e:	94 e2       	ldi	r25, 0x24	; 36
    6260:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    6264:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    6266:	81 ee       	ldi	r24, 0xE1	; 225
    6268:	95 e2       	ldi	r25, 0x25	; 37
    626a:	0e 94 c7 38 	call	0x718e	; 0x718e <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    626e:	8a eb       	ldi	r24, 0xBA	; 186
    6270:	94 e2       	ldi	r25, 0x24	; 36
    6272:	0e 94 73 13 	call	0x26e6	; 0x26e6 <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    6276:	40 91 b2 24 	lds	r20, 0x24B2	; 0x8024b2 <_ZZ4mainE3prs>
    627a:	50 91 b3 24 	lds	r21, 0x24B3	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    627e:	ca 01       	movw	r24, r20
    6280:	01 96       	adiw	r24, 0x01	; 1
    6282:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <_ZZ4mainE3prs>
    6286:	90 93 b3 24 	sts	0x24B3, r25	; 0x8024b3 <_ZZ4mainE3prs+0x1>
    628a:	9a 01       	movw	r18, r20
    628c:	a9 e8       	ldi	r26, 0x89	; 137
    628e:	b8 e8       	ldi	r27, 0x88	; 136
    6290:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    6294:	96 95       	lsr	r25
    6296:	87 95       	ror	r24
    6298:	96 95       	lsr	r25
    629a:	87 95       	ror	r24
    629c:	96 95       	lsr	r25
    629e:	87 95       	ror	r24
    62a0:	18 9f       	mul	r17, r24
    62a2:	90 01       	movw	r18, r0
    62a4:	19 9f       	mul	r17, r25
    62a6:	30 0d       	add	r19, r0
    62a8:	11 24       	eor	r1, r1
    62aa:	42 17       	cp	r20, r18
    62ac:	53 07       	cpc	r21, r19
    62ae:	41 f4       	brne	.+16     	; 0x62c0 <main+0xb8>
				temperature = D18B20.temp_18b20();
    62b0:	86 eb       	ldi	r24, 0xB6	; 182
    62b2:	94 e2       	ldi	r25, 0x24	; 36
    62b4:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <_ZN8CDS18B2010temp_18b20Ev>
    62b8:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <temperature>
    62bc:	90 93 b5 24 	sts	0x24B5, r25	; 0x8024b5 <temperature+0x1>
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    62c0:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    62c4:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    62c8:	8a 30       	cpi	r24, 0x0A	; 10
    62ca:	91 40       	sbci	r25, 0x01	; 1
    62cc:	24 f0       	brlt	.+8      	; 0x62d6 <main+0xce>
				laserBoard.Relay2On();
    62ce:	81 ee       	ldi	r24, 0xE1	; 225
    62d0:	95 e2       	ldi	r25, 0x25	; 37
    62d2:	0e 94 75 38 	call	0x70ea	; 0x70ea <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    62d6:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <temperature>
    62da:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <temperature+0x1>
    62de:	8f 3f       	cpi	r24, 0xFF	; 255
    62e0:	91 05       	cpc	r25, r1
    62e2:	0c f6       	brge	.-126    	; 0x6266 <main+0x5e>
				laserBoard.Relay2Off();			
    62e4:	81 ee       	ldi	r24, 0xE1	; 225
    62e6:	95 e2       	ldi	r25, 0x25	; 37
    62e8:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN11CLaserBoard9Relay2OffEv>
    62ec:	bc cf       	rjmp	.-136    	; 0x6266 <main+0x5e>

000062ee <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	index = crch ^ data;	
	crch  = crcl ^ CRCTABH[index];
	crcl  = CRCTABL[index];

	return (crch << 8) | crcl;
}
    62ee:	ef 92       	push	r14
    62f0:	ff 92       	push	r15
    62f2:	0f 93       	push	r16
    62f4:	1f 93       	push	r17
    62f6:	cf 93       	push	r28
    62f8:	df 93       	push	r29
    62fa:	8c 01       	movw	r16, r24
    62fc:	dc 01       	movw	r26, r24
    62fe:	14 96       	adiw	r26, 0x04	; 4
    6300:	ed 91       	ld	r30, X+
    6302:	fc 91       	ld	r31, X
    6304:	15 97       	sbiw	r26, 0x05	; 5
    6306:	8a ea       	ldi	r24, 0xAA	; 170
    6308:	80 83       	st	Z, r24
    630a:	14 96       	adiw	r26, 0x04	; 4
    630c:	ed 91       	ld	r30, X+
    630e:	fc 91       	ld	r31, X
    6310:	15 97       	sbiw	r26, 0x05	; 5
    6312:	8c ec       	ldi	r24, 0xCC	; 204
    6314:	81 83       	std	Z+1, r24	; 0x01
    6316:	14 96       	adiw	r26, 0x04	; 4
    6318:	ed 91       	ld	r30, X+
    631a:	fc 91       	ld	r31, X
    631c:	15 97       	sbiw	r26, 0x05	; 5
    631e:	85 e0       	ldi	r24, 0x05	; 5
    6320:	82 0f       	add	r24, r18
    6322:	82 83       	std	Z+2, r24	; 0x02
    6324:	14 96       	adiw	r26, 0x04	; 4
    6326:	ed 91       	ld	r30, X+
    6328:	fc 91       	ld	r31, X
    632a:	15 97       	sbiw	r26, 0x05	; 5
    632c:	82 e8       	ldi	r24, 0x82	; 130
    632e:	83 83       	std	Z+3, r24	; 0x03
    6330:	14 96       	adiw	r26, 0x04	; 4
    6332:	ed 91       	ld	r30, X+
    6334:	fc 91       	ld	r31, X
    6336:	15 97       	sbiw	r26, 0x05	; 5
    6338:	74 83       	std	Z+4, r23	; 0x04
    633a:	14 96       	adiw	r26, 0x04	; 4
    633c:	ed 91       	ld	r30, X+
    633e:	fc 91       	ld	r31, X
    6340:	15 97       	sbiw	r26, 0x05	; 5
    6342:	65 83       	std	Z+5, r22	; 0x05
    6344:	86 e0       	ldi	r24, 0x06	; 6
    6346:	82 0f       	add	r24, r18
    6348:	19 96       	adiw	r26, 0x09	; 9
    634a:	8c 93       	st	X, r24
    634c:	c9 01       	movw	r24, r18
    634e:	96 95       	lsr	r25
    6350:	87 95       	ror	r24
    6352:	00 97       	sbiw	r24, 0x00	; 0
    6354:	d9 f0       	breq	.+54     	; 0x638c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x9e>
    6356:	e4 2f       	mov	r30, r20
    6358:	f5 2f       	mov	r31, r21
    635a:	03 96       	adiw	r24, 0x03	; 3
    635c:	88 0f       	add	r24, r24
    635e:	99 1f       	adc	r25, r25
    6360:	46 e0       	ldi	r20, 0x06	; 6
    6362:	50 e0       	ldi	r21, 0x00	; 0
    6364:	e8 01       	movw	r28, r16
    6366:	ac 81       	ldd	r26, Y+4	; 0x04
    6368:	bd 81       	ldd	r27, Y+5	; 0x05
    636a:	a4 0f       	add	r26, r20
    636c:	b5 1f       	adc	r27, r21
    636e:	61 81       	ldd	r22, Z+1	; 0x01
    6370:	6c 93       	st	X, r22
    6372:	ac 81       	ldd	r26, Y+4	; 0x04
    6374:	bd 81       	ldd	r27, Y+5	; 0x05
    6376:	a4 0f       	add	r26, r20
    6378:	b5 1f       	adc	r27, r21
    637a:	60 81       	ld	r22, Z
    637c:	32 96       	adiw	r30, 0x02	; 2
    637e:	11 96       	adiw	r26, 0x01	; 1
    6380:	6c 93       	st	X, r22
    6382:	4e 5f       	subi	r20, 0xFE	; 254
    6384:	5f 4f       	sbci	r21, 0xFF	; 255
    6386:	48 17       	cp	r20, r24
    6388:	59 07       	cpc	r21, r25
    638a:	61 f7       	brne	.-40     	; 0x6364 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x76>
    638c:	f8 01       	movw	r30, r16
    638e:	81 85       	ldd	r24, Z+9	; 0x09
    6390:	a8 2f       	mov	r26, r24
    6392:	b0 e0       	ldi	r27, 0x00	; 0
    6394:	a4 30       	cpi	r26, 0x04	; 4
    6396:	b1 05       	cpc	r27, r1
    6398:	34 f1       	brlt	.+76     	; 0x63e6 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xf8>
    639a:	04 80       	ldd	r0, Z+4	; 0x04
    639c:	f5 81       	ldd	r31, Z+5	; 0x05
    639e:	e0 2d       	mov	r30, r0
    63a0:	33 96       	adiw	r30, 0x03	; 3
    63a2:	63 e0       	ldi	r22, 0x03	; 3
    63a4:	70 e0       	ldi	r23, 0x00	; 0
    63a6:	4f ef       	ldi	r20, 0xFF	; 255
    63a8:	5f ef       	ldi	r21, 0xFF	; 255
    63aa:	91 91       	ld	r25, Z+
    63ac:	49 27       	eor	r20, r25
    63ae:	94 2f       	mov	r25, r20
    63b0:	92 95       	swap	r25
    63b2:	94 27       	eor	r25, r20
    63b4:	09 2e       	mov	r0, r25
    63b6:	96 95       	lsr	r25
    63b8:	96 95       	lsr	r25
    63ba:	90 25       	eor	r25, r0
    63bc:	09 2e       	mov	r0, r25
    63be:	96 95       	lsr	r25
    63c0:	90 25       	eor	r25, r0
    63c2:	97 70       	andi	r25, 0x07	; 7
    63c4:	04 2e       	mov	r0, r20
    63c6:	45 2f       	mov	r20, r21
    63c8:	96 95       	lsr	r25
    63ca:	07 94       	ror	r0
    63cc:	97 95       	ror	r25
    63ce:	50 2d       	mov	r21, r0
    63d0:	49 27       	eor	r20, r25
    63d2:	06 94       	lsr	r0
    63d4:	97 95       	ror	r25
    63d6:	50 25       	eor	r21, r0
    63d8:	49 27       	eor	r20, r25
    63da:	6f 5f       	subi	r22, 0xFF	; 255
    63dc:	7f 4f       	sbci	r23, 0xFF	; 255
    63de:	6a 17       	cp	r22, r26
    63e0:	7b 07       	cpc	r23, r27
    63e2:	1c f3       	brlt	.-58     	; 0x63aa <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xbc>
    63e4:	02 c0       	rjmp	.+4      	; 0x63ea <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xfc>
    63e6:	4f ef       	ldi	r20, 0xFF	; 255
    63e8:	5f ef       	ldi	r21, 0xFF	; 255
    63ea:	d8 01       	movw	r26, r16
    63ec:	14 96       	adiw	r26, 0x04	; 4
    63ee:	ed 91       	ld	r30, X+
    63f0:	fc 91       	ld	r31, X
    63f2:	15 97       	sbiw	r26, 0x05	; 5
    63f4:	e8 0f       	add	r30, r24
    63f6:	f1 1d       	adc	r31, r1
    63f8:	51 83       	std	Z+1, r21	; 0x01
    63fa:	19 96       	adiw	r26, 0x09	; 9
    63fc:	8c 91       	ld	r24, X
    63fe:	19 97       	sbiw	r26, 0x09	; 9
    6400:	14 96       	adiw	r26, 0x04	; 4
    6402:	ed 91       	ld	r30, X+
    6404:	fc 91       	ld	r31, X
    6406:	15 97       	sbiw	r26, 0x05	; 5
    6408:	e8 0f       	add	r30, r24
    640a:	f1 1d       	adc	r31, r1
    640c:	40 83       	st	Z, r20
    640e:	28 5f       	subi	r18, 0xF8	; 248
    6410:	19 96       	adiw	r26, 0x09	; 9
    6412:	2c 93       	st	X, r18
    6414:	df 91       	pop	r29
    6416:	cf 91       	pop	r28
    6418:	1f 91       	pop	r17
    641a:	0f 91       	pop	r16
    641c:	ff 90       	pop	r15
    641e:	ef 90       	pop	r14
    6420:	08 95       	ret

00006422 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
    6422:	0f 93       	push	r16
    6424:	1f 93       	push	r17
    6426:	cf 93       	push	r28
    6428:	df 93       	push	r29
    642a:	ec 01       	movw	r28, r24
    642c:	cb 01       	movw	r24, r22
    642e:	8a 01       	movw	r16, r20
    6430:	6f 83       	std	Y+7, r22	; 0x07
    6432:	78 87       	std	Y+8, r23	; 0x08
    6434:	4a 87       	std	Y+10, r20	; 0x0a
    6436:	5b 87       	std	Y+11, r21	; 0x0b
    6438:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <malloc>
    643c:	8a 83       	std	Y+2, r24	; 0x02
    643e:	9b 83       	std	Y+3, r25	; 0x03
    6440:	c8 01       	movw	r24, r16
    6442:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <malloc>
    6446:	8c 83       	std	Y+4, r24	; 0x04
    6448:	9d 83       	std	Y+5, r25	; 0x05
    644a:	19 86       	std	Y+9, r1	; 0x09
    644c:	1e 82       	std	Y+6, r1	; 0x06
    644e:	df 91       	pop	r29
    6450:	cf 91       	pop	r28
    6452:	1f 91       	pop	r17
    6454:	0f 91       	pop	r16
    6456:	08 95       	ret

00006458 <_ZN16CMBEventsHandler11FreeBuffersEv>:
    6458:	cf 93       	push	r28
    645a:	df 93       	push	r29
    645c:	ec 01       	movw	r28, r24
    645e:	8a 81       	ldd	r24, Y+2	; 0x02
    6460:	9b 81       	ldd	r25, Y+3	; 0x03
    6462:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <free>
    6466:	8c 81       	ldd	r24, Y+4	; 0x04
    6468:	9d 81       	ldd	r25, Y+5	; 0x05
    646a:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <free>
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	08 95       	ret

00006474 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:
    6474:	cf 93       	push	r28
    6476:	df 93       	push	r29
    6478:	dc 01       	movw	r26, r24
    647a:	14 96       	adiw	r26, 0x04	; 4
    647c:	ed 91       	ld	r30, X+
    647e:	fc 91       	ld	r31, X
    6480:	15 97       	sbiw	r26, 0x05	; 5
    6482:	8a ea       	ldi	r24, 0xAA	; 170
    6484:	80 83       	st	Z, r24
    6486:	14 96       	adiw	r26, 0x04	; 4
    6488:	ed 91       	ld	r30, X+
    648a:	fc 91       	ld	r31, X
    648c:	15 97       	sbiw	r26, 0x05	; 5
    648e:	8c ec       	ldi	r24, 0xCC	; 204
    6490:	81 83       	std	Z+1, r24	; 0x01
    6492:	14 96       	adiw	r26, 0x04	; 4
    6494:	ed 91       	ld	r30, X+
    6496:	fc 91       	ld	r31, X
    6498:	15 97       	sbiw	r26, 0x05	; 5
    649a:	85 e0       	ldi	r24, 0x05	; 5
    649c:	82 83       	std	Z+2, r24	; 0x02
    649e:	14 96       	adiw	r26, 0x04	; 4
    64a0:	ed 91       	ld	r30, X+
    64a2:	fc 91       	ld	r31, X
    64a4:	15 97       	sbiw	r26, 0x05	; 5
    64a6:	81 e8       	ldi	r24, 0x81	; 129
    64a8:	83 83       	std	Z+3, r24	; 0x03
    64aa:	14 96       	adiw	r26, 0x04	; 4
    64ac:	ed 91       	ld	r30, X+
    64ae:	fc 91       	ld	r31, X
    64b0:	15 97       	sbiw	r26, 0x05	; 5
    64b2:	64 83       	std	Z+4, r22	; 0x04
    64b4:	14 96       	adiw	r26, 0x04	; 4
    64b6:	ed 91       	ld	r30, X+
    64b8:	fc 91       	ld	r31, X
    64ba:	15 97       	sbiw	r26, 0x05	; 5
    64bc:	45 83       	std	Z+5, r20	; 0x05
    64be:	86 e0       	ldi	r24, 0x06	; 6
    64c0:	19 96       	adiw	r26, 0x09	; 9
    64c2:	8c 93       	st	X, r24
    64c4:	19 97       	sbiw	r26, 0x09	; 9
    64c6:	14 96       	adiw	r26, 0x04	; 4
    64c8:	cd 91       	ld	r28, X+
    64ca:	dc 91       	ld	r29, X
    64cc:	15 97       	sbiw	r26, 0x05	; 5
    64ce:	fe 01       	movw	r30, r28
    64d0:	33 96       	adiw	r30, 0x03	; 3
    64d2:	be 01       	movw	r22, r28
    64d4:	6a 5f       	subi	r22, 0xFA	; 250
    64d6:	7f 4f       	sbci	r23, 0xFF	; 255
    64d8:	2f ef       	ldi	r18, 0xFF	; 255
    64da:	3f ef       	ldi	r19, 0xFF	; 255
    64dc:	91 91       	ld	r25, Z+
    64de:	29 27       	eor	r18, r25
    64e0:	92 2f       	mov	r25, r18
    64e2:	92 95       	swap	r25
    64e4:	92 27       	eor	r25, r18
    64e6:	09 2e       	mov	r0, r25
    64e8:	96 95       	lsr	r25
    64ea:	96 95       	lsr	r25
    64ec:	90 25       	eor	r25, r0
    64ee:	09 2e       	mov	r0, r25
    64f0:	96 95       	lsr	r25
    64f2:	90 25       	eor	r25, r0
    64f4:	97 70       	andi	r25, 0x07	; 7
    64f6:	02 2e       	mov	r0, r18
    64f8:	23 2f       	mov	r18, r19
    64fa:	96 95       	lsr	r25
    64fc:	07 94       	ror	r0
    64fe:	97 95       	ror	r25
    6500:	30 2d       	mov	r19, r0
    6502:	29 27       	eor	r18, r25
    6504:	06 94       	lsr	r0
    6506:	97 95       	ror	r25
    6508:	30 25       	eor	r19, r0
    650a:	29 27       	eor	r18, r25
    650c:	e6 17       	cp	r30, r22
    650e:	f7 07       	cpc	r31, r23
    6510:	29 f7       	brne	.-54     	; 0x64dc <_ZN16CMBEventsHandler13FillRegDataRqEhh+0x68>
    6512:	3f 83       	std	Y+7, r19	; 0x07
    6514:	19 96       	adiw	r26, 0x09	; 9
    6516:	8c 91       	ld	r24, X
    6518:	19 97       	sbiw	r26, 0x09	; 9
    651a:	14 96       	adiw	r26, 0x04	; 4
    651c:	ed 91       	ld	r30, X+
    651e:	fc 91       	ld	r31, X
    6520:	15 97       	sbiw	r26, 0x05	; 5
    6522:	e8 0f       	add	r30, r24
    6524:	f1 1d       	adc	r31, r1
    6526:	20 83       	st	Z, r18
    6528:	48 5f       	subi	r20, 0xF8	; 248
    652a:	19 96       	adiw	r26, 0x09	; 9
    652c:	4c 93       	st	X, r20
    652e:	df 91       	pop	r29
    6530:	cf 91       	pop	r28
    6532:	08 95       	ret

00006534 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:
    6534:	cf 93       	push	r28
    6536:	df 93       	push	r29
    6538:	dc 01       	movw	r26, r24
    653a:	14 96       	adiw	r26, 0x04	; 4
    653c:	ed 91       	ld	r30, X+
    653e:	fc 91       	ld	r31, X
    6540:	15 97       	sbiw	r26, 0x05	; 5
    6542:	8a ea       	ldi	r24, 0xAA	; 170
    6544:	80 83       	st	Z, r24
    6546:	14 96       	adiw	r26, 0x04	; 4
    6548:	ed 91       	ld	r30, X+
    654a:	fc 91       	ld	r31, X
    654c:	15 97       	sbiw	r26, 0x05	; 5
    654e:	8c ec       	ldi	r24, 0xCC	; 204
    6550:	81 83       	std	Z+1, r24	; 0x01
    6552:	14 96       	adiw	r26, 0x04	; 4
    6554:	ed 91       	ld	r30, X+
    6556:	fc 91       	ld	r31, X
    6558:	15 97       	sbiw	r26, 0x05	; 5
    655a:	86 e0       	ldi	r24, 0x06	; 6
    655c:	82 83       	std	Z+2, r24	; 0x02
    655e:	14 96       	adiw	r26, 0x04	; 4
    6560:	ed 91       	ld	r30, X+
    6562:	fc 91       	ld	r31, X
    6564:	15 97       	sbiw	r26, 0x05	; 5
    6566:	83 e8       	ldi	r24, 0x83	; 131
    6568:	83 83       	std	Z+3, r24	; 0x03
    656a:	14 96       	adiw	r26, 0x04	; 4
    656c:	ed 91       	ld	r30, X+
    656e:	fc 91       	ld	r31, X
    6570:	15 97       	sbiw	r26, 0x05	; 5
    6572:	74 83       	std	Z+4, r23	; 0x04
    6574:	14 96       	adiw	r26, 0x04	; 4
    6576:	ed 91       	ld	r30, X+
    6578:	fc 91       	ld	r31, X
    657a:	15 97       	sbiw	r26, 0x05	; 5
    657c:	65 83       	std	Z+5, r22	; 0x05
    657e:	14 96       	adiw	r26, 0x04	; 4
    6580:	ed 91       	ld	r30, X+
    6582:	fc 91       	ld	r31, X
    6584:	15 97       	sbiw	r26, 0x05	; 5
    6586:	46 83       	std	Z+6, r20	; 0x06
    6588:	87 e0       	ldi	r24, 0x07	; 7
    658a:	19 96       	adiw	r26, 0x09	; 9
    658c:	8c 93       	st	X, r24
    658e:	19 97       	sbiw	r26, 0x09	; 9
    6590:	14 96       	adiw	r26, 0x04	; 4
    6592:	cd 91       	ld	r28, X+
    6594:	dc 91       	ld	r29, X
    6596:	15 97       	sbiw	r26, 0x05	; 5
    6598:	fe 01       	movw	r30, r28
    659a:	33 96       	adiw	r30, 0x03	; 3
    659c:	ae 01       	movw	r20, r28
    659e:	49 5f       	subi	r20, 0xF9	; 249
    65a0:	5f 4f       	sbci	r21, 0xFF	; 255
    65a2:	2f ef       	ldi	r18, 0xFF	; 255
    65a4:	3f ef       	ldi	r19, 0xFF	; 255
    65a6:	91 91       	ld	r25, Z+
    65a8:	29 27       	eor	r18, r25
    65aa:	92 2f       	mov	r25, r18
    65ac:	92 95       	swap	r25
    65ae:	92 27       	eor	r25, r18
    65b0:	09 2e       	mov	r0, r25
    65b2:	96 95       	lsr	r25
    65b4:	96 95       	lsr	r25
    65b6:	90 25       	eor	r25, r0
    65b8:	09 2e       	mov	r0, r25
    65ba:	96 95       	lsr	r25
    65bc:	90 25       	eor	r25, r0
    65be:	97 70       	andi	r25, 0x07	; 7
    65c0:	02 2e       	mov	r0, r18
    65c2:	23 2f       	mov	r18, r19
    65c4:	96 95       	lsr	r25
    65c6:	07 94       	ror	r0
    65c8:	97 95       	ror	r25
    65ca:	30 2d       	mov	r19, r0
    65cc:	29 27       	eor	r18, r25
    65ce:	06 94       	lsr	r0
    65d0:	97 95       	ror	r25
    65d2:	30 25       	eor	r19, r0
    65d4:	29 27       	eor	r18, r25
    65d6:	e4 17       	cp	r30, r20
    65d8:	f5 07       	cpc	r31, r21
    65da:	29 f7       	brne	.-54     	; 0x65a6 <_ZN16CMBEventsHandler13FillVarDataRqEjj+0x72>
    65dc:	38 87       	std	Y+8, r19	; 0x08
    65de:	19 96       	adiw	r26, 0x09	; 9
    65e0:	8c 91       	ld	r24, X
    65e2:	19 97       	sbiw	r26, 0x09	; 9
    65e4:	14 96       	adiw	r26, 0x04	; 4
    65e6:	ed 91       	ld	r30, X+
    65e8:	fc 91       	ld	r31, X
    65ea:	15 97       	sbiw	r26, 0x05	; 5
    65ec:	e8 0f       	add	r30, r24
    65ee:	f1 1d       	adc	r31, r1
    65f0:	20 83       	st	Z, r18
    65f2:	89 e0       	ldi	r24, 0x09	; 9
    65f4:	19 96       	adiw	r26, 0x09	; 9
    65f6:	8c 93       	st	X, r24
    65f8:	df 91       	pop	r29
    65fa:	cf 91       	pop	r28
    65fc:	08 95       	ret

000065fe <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
    65fe:	cf 93       	push	r28
    6600:	df 93       	push	r29
    6602:	ec 01       	movw	r28, r24
    6604:	ec 81       	ldd	r30, Y+4	; 0x04
    6606:	fd 81       	ldd	r31, Y+5	; 0x05
    6608:	8a ea       	ldi	r24, 0xAA	; 170
    660a:	80 83       	st	Z, r24
    660c:	ec 81       	ldd	r30, Y+4	; 0x04
    660e:	fd 81       	ldd	r31, Y+5	; 0x05
    6610:	8c ec       	ldi	r24, 0xCC	; 204
    6612:	81 83       	std	Z+1, r24	; 0x01
    6614:	ec 81       	ldd	r30, Y+4	; 0x04
    6616:	fd 81       	ldd	r31, Y+5	; 0x05
    6618:	84 e0       	ldi	r24, 0x04	; 4
    661a:	82 0f       	add	r24, r18
    661c:	82 83       	std	Z+2, r24	; 0x02
    661e:	ec 81       	ldd	r30, Y+4	; 0x04
    6620:	fd 81       	ldd	r31, Y+5	; 0x05
    6622:	80 e8       	ldi	r24, 0x80	; 128
    6624:	83 83       	std	Z+3, r24	; 0x03
    6626:	ec 81       	ldd	r30, Y+4	; 0x04
    6628:	fd 81       	ldd	r31, Y+5	; 0x05
    662a:	64 83       	std	Z+4, r22	; 0x04
    662c:	85 e0       	ldi	r24, 0x05	; 5
    662e:	82 0f       	add	r24, r18
    6630:	89 87       	std	Y+9, r24	; 0x09
    6632:	82 2f       	mov	r24, r18
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	00 97       	sbiw	r24, 0x00	; 0
    6638:	81 f0       	breq	.+32     	; 0x665a <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    663a:	da 01       	movw	r26, r20
    663c:	48 0f       	add	r20, r24
    663e:	59 1f       	adc	r21, r25
    6640:	65 e0       	ldi	r22, 0x05	; 5
    6642:	70 e0       	ldi	r23, 0x00	; 0
    6644:	8d 91       	ld	r24, X+
    6646:	ec 81       	ldd	r30, Y+4	; 0x04
    6648:	fd 81       	ldd	r31, Y+5	; 0x05
    664a:	e6 0f       	add	r30, r22
    664c:	f7 1f       	adc	r31, r23
    664e:	80 83       	st	Z, r24
    6650:	6f 5f       	subi	r22, 0xFF	; 255
    6652:	7f 4f       	sbci	r23, 0xFF	; 255
    6654:	a4 17       	cp	r26, r20
    6656:	b5 07       	cpc	r27, r21
    6658:	a9 f7       	brne	.-22     	; 0x6644 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
    665a:	a9 85       	ldd	r26, Y+9	; 0x09
    665c:	b0 e0       	ldi	r27, 0x00	; 0
    665e:	a4 30       	cpi	r26, 0x04	; 4
    6660:	b1 05       	cpc	r27, r1
    6662:	28 f1       	brcs	.+74     	; 0x66ae <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb0>
    6664:	ec 81       	ldd	r30, Y+4	; 0x04
    6666:	fd 81       	ldd	r31, Y+5	; 0x05
    6668:	33 96       	adiw	r30, 0x03	; 3
    666a:	63 e0       	ldi	r22, 0x03	; 3
    666c:	70 e0       	ldi	r23, 0x00	; 0
    666e:	4f ef       	ldi	r20, 0xFF	; 255
    6670:	5f ef       	ldi	r21, 0xFF	; 255
    6672:	91 91       	ld	r25, Z+
    6674:	49 27       	eor	r20, r25
    6676:	94 2f       	mov	r25, r20
    6678:	92 95       	swap	r25
    667a:	94 27       	eor	r25, r20
    667c:	09 2e       	mov	r0, r25
    667e:	96 95       	lsr	r25
    6680:	96 95       	lsr	r25
    6682:	90 25       	eor	r25, r0
    6684:	09 2e       	mov	r0, r25
    6686:	96 95       	lsr	r25
    6688:	90 25       	eor	r25, r0
    668a:	97 70       	andi	r25, 0x07	; 7
    668c:	04 2e       	mov	r0, r20
    668e:	45 2f       	mov	r20, r21
    6690:	96 95       	lsr	r25
    6692:	07 94       	ror	r0
    6694:	97 95       	ror	r25
    6696:	50 2d       	mov	r21, r0
    6698:	49 27       	eor	r20, r25
    669a:	06 94       	lsr	r0
    669c:	97 95       	ror	r25
    669e:	50 25       	eor	r21, r0
    66a0:	49 27       	eor	r20, r25
    66a2:	6f 5f       	subi	r22, 0xFF	; 255
    66a4:	7f 4f       	sbci	r23, 0xFF	; 255
    66a6:	6a 17       	cp	r22, r26
    66a8:	7b 07       	cpc	r23, r27
    66aa:	18 f3       	brcs	.-58     	; 0x6672 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x74>
    66ac:	02 c0       	rjmp	.+4      	; 0x66b2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb4>
    66ae:	4f ef       	ldi	r20, 0xFF	; 255
    66b0:	5f ef       	ldi	r21, 0xFF	; 255
    66b2:	8c 81       	ldd	r24, Y+4	; 0x04
    66b4:	9d 81       	ldd	r25, Y+5	; 0x05
    66b6:	a8 0f       	add	r26, r24
    66b8:	b9 1f       	adc	r27, r25
    66ba:	11 96       	adiw	r26, 0x01	; 1
    66bc:	5c 93       	st	X, r21
    66be:	89 85       	ldd	r24, Y+9	; 0x09
    66c0:	ec 81       	ldd	r30, Y+4	; 0x04
    66c2:	fd 81       	ldd	r31, Y+5	; 0x05
    66c4:	e8 0f       	add	r30, r24
    66c6:	f1 1d       	adc	r31, r1
    66c8:	40 83       	st	Z, r20
    66ca:	29 5f       	subi	r18, 0xF9	; 249
    66cc:	29 87       	std	Y+9, r18	; 0x09
    66ce:	df 91       	pop	r29
    66d0:	cf 91       	pop	r28
    66d2:	08 95       	ret

000066d4 <_ZN16CMBEventsHandlerD1Ev>:

CMBEventsHandler::~CMBEventsHandler()
    66d4:	08 95       	ret

000066d6 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    66d6:	dc 01       	movw	r26, r24
    66d8:	5b 96       	adiw	r26, 0x1b	; 27
    66da:	8d 91       	ld	r24, X+
    66dc:	9c 91       	ld	r25, X
    66de:	5c 97       	sbiw	r26, 0x1c	; 28
    66e0:	00 97       	sbiw	r24, 0x00	; 0
    66e2:	39 f0       	breq	.+14     	; 0x66f2 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    66e4:	dc 01       	movw	r26, r24
    66e6:	ed 91       	ld	r30, X+
    66e8:	fc 91       	ld	r31, X
    66ea:	02 80       	ldd	r0, Z+2	; 0x02
    66ec:	f3 81       	ldd	r31, Z+3	; 0x03
    66ee:	e0 2d       	mov	r30, r0
    66f0:	19 95       	eicall
    66f2:	08 95       	ret

000066f4 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    66f4:	dc 01       	movw	r26, r24
    66f6:	5b 96       	adiw	r26, 0x1b	; 27
    66f8:	8d 91       	ld	r24, X+
    66fa:	9c 91       	ld	r25, X
    66fc:	5c 97       	sbiw	r26, 0x1c	; 28
    66fe:	00 97       	sbiw	r24, 0x00	; 0
    6700:	39 f0       	breq	.+14     	; 0x6710 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    6702:	dc 01       	movw	r26, r24
    6704:	ed 91       	ld	r30, X+
    6706:	fc 91       	ld	r31, X
    6708:	04 80       	ldd	r0, Z+4	; 0x04
    670a:	f5 81       	ldd	r31, Z+5	; 0x05
    670c:	e0 2d       	mov	r30, r0
    670e:	19 95       	eicall
    6710:	08 95       	ret

00006712 <_ZN9CMBSenderC1Ev>:
    6712:	2e ee       	ldi	r18, 0xEE	; 238
    6714:	31 e2       	ldi	r19, 0x21	; 33
    6716:	fc 01       	movw	r30, r24
    6718:	20 83       	st	Z, r18
    671a:	31 83       	std	Z+1, r19	; 0x01
    671c:	08 95       	ret

0000671e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    671e:	6f 92       	push	r6
    6720:	7f 92       	push	r7
    6722:	8f 92       	push	r8
    6724:	9f 92       	push	r9
    6726:	af 92       	push	r10
    6728:	bf 92       	push	r11
    672a:	cf 92       	push	r12
    672c:	df 92       	push	r13
    672e:	ef 92       	push	r14
    6730:	ff 92       	push	r15
    6732:	0f 93       	push	r16
    6734:	1f 93       	push	r17
    6736:	cf 93       	push	r28
    6738:	df 93       	push	r29
    673a:	ec 01       	movw	r28, r24
    673c:	4b 01       	movw	r8, r22
    673e:	5a 01       	movw	r10, r20
    6740:	39 01       	movw	r6, r18
    6742:	c8 01       	movw	r24, r16
    6744:	0f 83       	std	Y+7, r16	; 0x07
    6746:	18 87       	std	Y+8, r17	; 0x08
    6748:	ea 86       	std	Y+10, r14	; 0x0a
    674a:	fb 86       	std	Y+11, r15	; 0x0b
    674c:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <malloc>
    6750:	8a 83       	std	Y+2, r24	; 0x02
    6752:	9b 83       	std	Y+3, r25	; 0x03
    6754:	c7 01       	movw	r24, r14
    6756:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <malloc>
    675a:	8c 83       	std	Y+4, r24	; 0x04
    675c:	9d 83       	std	Y+5, r25	; 0x05
    675e:	19 8e       	std	Y+25, r1	; 0x19
    6760:	19 86       	std	Y+9, r1	; 0x09
    6762:	19 8a       	std	Y+17, r1	; 0x11
    6764:	1e 82       	std	Y+6, r1	; 0x06
    6766:	1c 8a       	std	Y+20, r1	; 0x14
    6768:	1d 8a       	std	Y+21, r1	; 0x15
    676a:	8f ef       	ldi	r24, 0xFF	; 255
    676c:	9f ef       	ldi	r25, 0xFF	; 255
    676e:	8e 8b       	std	Y+22, r24	; 0x16
    6770:	9f 8b       	std	Y+23, r25	; 0x17
    6772:	87 e0       	ldi	r24, 0x07	; 7
    6774:	88 8b       	std	Y+16, r24	; 0x10
    6776:	82 e0       	ldi	r24, 0x02	; 2
    6778:	88 8f       	std	Y+24, r24	; 0x18
    677a:	1a 8e       	std	Y+26, r1	; 0x1a
    677c:	ca 8a       	std	Y+18, r12	; 0x12
    677e:	db 8a       	std	Y+19, r13	; 0x13
    6780:	ac 86       	std	Y+12, r10	; 0x0c
    6782:	bd 86       	std	Y+13, r11	; 0x0d
    6784:	d5 01       	movw	r26, r10
    6786:	ed 91       	ld	r30, X+
    6788:	fc 91       	ld	r31, X
    678a:	04 84       	ldd	r0, Z+12	; 0x0c
    678c:	f5 85       	ldd	r31, Z+13	; 0x0d
    678e:	e0 2d       	mov	r30, r0
    6790:	41 ed       	ldi	r20, 0xD1	; 209
    6792:	54 e3       	ldi	r21, 0x34	; 52
    6794:	be 01       	movw	r22, r28
    6796:	c5 01       	movw	r24, r10
    6798:	19 95       	eicall
    679a:	d5 01       	movw	r26, r10
    679c:	ed 91       	ld	r30, X+
    679e:	fc 91       	ld	r31, X
    67a0:	06 84       	ldd	r0, Z+14	; 0x0e
    67a2:	f7 85       	ldd	r31, Z+15	; 0x0f
    67a4:	e0 2d       	mov	r30, r0
    67a6:	4d e5       	ldi	r20, 0x5D	; 93
    67a8:	55 e3       	ldi	r21, 0x35	; 53
    67aa:	be 01       	movw	r22, r28
    67ac:	c5 01       	movw	r24, r10
    67ae:	19 95       	eicall
    67b0:	61 14       	cp	r6, r1
    67b2:	71 04       	cpc	r7, r1
    67b4:	19 f0       	breq	.+6      	; 0x67bc <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    67b6:	6b 8e       	std	Y+27, r6	; 0x1b
    67b8:	7c 8e       	std	Y+28, r7	; 0x1c
    67ba:	02 c0       	rjmp	.+4      	; 0x67c0 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xa2>
    67bc:	cb 8f       	std	Y+27, r28	; 0x1b
    67be:	dc 8f       	std	Y+28, r29	; 0x1c
    67c0:	8e 86       	std	Y+14, r8	; 0x0e
    67c2:	9f 86       	std	Y+15, r9	; 0x0f
    67c4:	81 14       	cp	r8, r1
    67c6:	91 04       	cpc	r9, r1
    67c8:	61 f0       	breq	.+24     	; 0x67e2 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc4>
    67ca:	d4 01       	movw	r26, r8
    67cc:	ed 91       	ld	r30, X+
    67ce:	fc 91       	ld	r31, X
    67d0:	02 88       	ldd	r0, Z+18	; 0x12
    67d2:	f3 89       	ldd	r31, Z+19	; 0x13
    67d4:	e0 2d       	mov	r30, r0
    67d6:	21 e0       	ldi	r18, 0x01	; 1
    67d8:	ae 01       	movw	r20, r28
    67da:	68 ef       	ldi	r22, 0xF8	; 248
    67dc:	74 e3       	ldi	r23, 0x34	; 52
    67de:	c4 01       	movw	r24, r8
    67e0:	19 95       	eicall
    67e2:	df 91       	pop	r29
    67e4:	cf 91       	pop	r28
    67e6:	1f 91       	pop	r17
    67e8:	0f 91       	pop	r16
    67ea:	ff 90       	pop	r15
    67ec:	ef 90       	pop	r14
    67ee:	df 90       	pop	r13
    67f0:	cf 90       	pop	r12
    67f2:	bf 90       	pop	r11
    67f4:	af 90       	pop	r10
    67f6:	9f 90       	pop	r9
    67f8:	8f 90       	pop	r8
    67fa:	7f 90       	pop	r7
    67fc:	6f 90       	pop	r6
    67fe:	08 95       	ret

00006800 <_ZN9CMBSenderD1Ev>:
    6800:	2e ee       	ldi	r18, 0xEE	; 238
    6802:	31 e2       	ldi	r19, 0x21	; 33
    6804:	fc 01       	movw	r30, r24
    6806:	20 83       	st	Z, r18
    6808:	31 83       	std	Z+1, r19	; 0x01
    680a:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <_ZN16CMBEventsHandlerD1Ev>
    680e:	08 95       	ret

00006810 <_ZN9CMBSender13OnReceiveByteEh>:
    6810:	cf 93       	push	r28
    6812:	df 93       	push	r29
    6814:	dc 01       	movw	r26, r24
    6816:	96 2f       	mov	r25, r22
    6818:	50 96       	adiw	r26, 0x10	; 16
    681a:	4c 91       	ld	r20, X
    681c:	50 97       	sbiw	r26, 0x10	; 16
    681e:	50 e0       	ldi	r21, 0x00	; 0
    6820:	4b 30       	cpi	r20, 0x0B	; 11
    6822:	51 05       	cpc	r21, r1
    6824:	08 f0       	brcs	.+2      	; 0x6828 <_ZN9CMBSender13OnReceiveByteEh+0x18>
    6826:	ba c0       	rjmp	.+372    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6828:	fa 01       	movw	r30, r20
    682a:	88 27       	eor	r24, r24
    682c:	e0 5c       	subi	r30, 0xC0	; 192
    682e:	fe 4f       	sbci	r31, 0xFE	; 254
    6830:	8f 4f       	sbci	r24, 0xFF	; 255
    6832:	0c 94 c3 3e 	jmp	0x7d86	; 0x7d86 <__tablejump2__>
    6836:	9a 3a       	cpi	r25, 0xAA	; 170
    6838:	21 f4       	brne	.+8      	; 0x6842 <_ZN9CMBSender13OnReceiveByteEh+0x32>
    683a:	82 e0       	ldi	r24, 0x02	; 2
    683c:	50 96       	adiw	r26, 0x10	; 16
    683e:	8c 93       	st	X, r24
    6840:	ad c0       	rjmp	.+346    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6842:	81 e0       	ldi	r24, 0x01	; 1
    6844:	50 96       	adiw	r26, 0x10	; 16
    6846:	8c 93       	st	X, r24
    6848:	a9 c0       	rjmp	.+338    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    684a:	9c 3c       	cpi	r25, 0xCC	; 204
    684c:	21 f4       	brne	.+8      	; 0x6856 <_ZN9CMBSender13OnReceiveByteEh+0x46>
    684e:	83 e0       	ldi	r24, 0x03	; 3
    6850:	50 96       	adiw	r26, 0x10	; 16
    6852:	8c 93       	st	X, r24
    6854:	a3 c0       	rjmp	.+326    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6856:	81 e0       	ldi	r24, 0x01	; 1
    6858:	50 96       	adiw	r26, 0x10	; 16
    685a:	8c 93       	st	X, r24
    685c:	9f c0       	rjmp	.+318    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    685e:	16 96       	adiw	r26, 0x06	; 6
    6860:	9c 93       	st	X, r25
    6862:	16 97       	sbiw	r26, 0x06	; 6
    6864:	51 96       	adiw	r26, 0x11	; 17
    6866:	1c 92       	st	X, r1
    6868:	51 97       	sbiw	r26, 0x11	; 17
    686a:	8f ef       	ldi	r24, 0xFF	; 255
    686c:	9f ef       	ldi	r25, 0xFF	; 255
    686e:	56 96       	adiw	r26, 0x16	; 22
    6870:	8d 93       	st	X+, r24
    6872:	9c 93       	st	X, r25
    6874:	57 97       	sbiw	r26, 0x17	; 23
    6876:	84 e0       	ldi	r24, 0x04	; 4
    6878:	50 96       	adiw	r26, 0x10	; 16
    687a:	8c 93       	st	X, r24
    687c:	8f c0       	rjmp	.+286    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    687e:	51 96       	adiw	r26, 0x11	; 17
    6880:	8c 91       	ld	r24, X
    6882:	51 97       	sbiw	r26, 0x11	; 17
    6884:	12 96       	adiw	r26, 0x02	; 2
    6886:	ed 91       	ld	r30, X+
    6888:	fc 91       	ld	r31, X
    688a:	13 97       	sbiw	r26, 0x03	; 3
    688c:	e8 0f       	add	r30, r24
    688e:	f1 1d       	adc	r31, r1
    6890:	90 83       	st	Z, r25
    6892:	51 96       	adiw	r26, 0x11	; 17
    6894:	2c 91       	ld	r18, X
    6896:	51 97       	sbiw	r26, 0x11	; 17
    6898:	30 e0       	ldi	r19, 0x00	; 0
    689a:	17 96       	adiw	r26, 0x07	; 7
    689c:	4d 91       	ld	r20, X+
    689e:	5c 91       	ld	r21, X
    68a0:	18 97       	sbiw	r26, 0x08	; 8
    68a2:	42 17       	cp	r20, r18
    68a4:	53 07       	cpc	r21, r19
    68a6:	20 f4       	brcc	.+8      	; 0x68b0 <_ZN9CMBSender13OnReceiveByteEh+0xa0>
    68a8:	89 e0       	ldi	r24, 0x09	; 9
    68aa:	50 96       	adiw	r26, 0x10	; 16
    68ac:	8c 93       	st	X, r24
    68ae:	76 c0       	rjmp	.+236    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    68b0:	56 96       	adiw	r26, 0x16	; 22
    68b2:	2d 91       	ld	r18, X+
    68b4:	3c 91       	ld	r19, X
    68b6:	57 97       	sbiw	r26, 0x17	; 23
    68b8:	29 27       	eor	r18, r25
    68ba:	62 2f       	mov	r22, r18
    68bc:	62 95       	swap	r22
    68be:	62 27       	eor	r22, r18
    68c0:	06 2e       	mov	r0, r22
    68c2:	66 95       	lsr	r22
    68c4:	66 95       	lsr	r22
    68c6:	60 25       	eor	r22, r0
    68c8:	06 2e       	mov	r0, r22
    68ca:	66 95       	lsr	r22
    68cc:	60 25       	eor	r22, r0
    68ce:	67 70       	andi	r22, 0x07	; 7
    68d0:	02 2e       	mov	r0, r18
    68d2:	23 2f       	mov	r18, r19
    68d4:	66 95       	lsr	r22
    68d6:	07 94       	ror	r0
    68d8:	67 95       	ror	r22
    68da:	30 2d       	mov	r19, r0
    68dc:	26 27       	eor	r18, r22
    68de:	06 94       	lsr	r0
    68e0:	67 95       	ror	r22
    68e2:	30 25       	eor	r19, r0
    68e4:	26 27       	eor	r18, r22
    68e6:	56 96       	adiw	r26, 0x16	; 22
    68e8:	2d 93       	st	X+, r18
    68ea:	3c 93       	st	X, r19
    68ec:	57 97       	sbiw	r26, 0x17	; 23
    68ee:	51 96       	adiw	r26, 0x11	; 17
    68f0:	8c 91       	ld	r24, X
    68f2:	51 97       	sbiw	r26, 0x11	; 17
    68f4:	8f 5f       	subi	r24, 0xFF	; 255
    68f6:	51 96       	adiw	r26, 0x11	; 17
    68f8:	8c 93       	st	X, r24
    68fa:	51 97       	sbiw	r26, 0x11	; 17
    68fc:	51 96       	adiw	r26, 0x11	; 17
    68fe:	2c 91       	ld	r18, X
    6900:	51 97       	sbiw	r26, 0x11	; 17
    6902:	30 e0       	ldi	r19, 0x00	; 0
    6904:	16 96       	adiw	r26, 0x06	; 6
    6906:	8c 91       	ld	r24, X
    6908:	16 97       	sbiw	r26, 0x06	; 6
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	02 97       	sbiw	r24, 0x02	; 2
    690e:	28 17       	cp	r18, r24
    6910:	39 07       	cpc	r19, r25
    6912:	09 f0       	breq	.+2      	; 0x6916 <_ZN9CMBSender13OnReceiveByteEh+0x106>
    6914:	43 c0       	rjmp	.+134    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6916:	85 e0       	ldi	r24, 0x05	; 5
    6918:	50 96       	adiw	r26, 0x10	; 16
    691a:	8c 93       	st	X, r24
    691c:	3f c0       	rjmp	.+126    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    691e:	69 2f       	mov	r22, r25
    6920:	70 e0       	ldi	r23, 0x00	; 0
    6922:	54 96       	adiw	r26, 0x14	; 20
    6924:	6d 93       	st	X+, r22
    6926:	7c 93       	st	X, r23
    6928:	55 97       	sbiw	r26, 0x15	; 21
    692a:	86 e0       	ldi	r24, 0x06	; 6
    692c:	50 96       	adiw	r26, 0x10	; 16
    692e:	8c 93       	st	X, r24
    6930:	35 c0       	rjmp	.+106    	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6932:	54 96       	adiw	r26, 0x14	; 20
    6934:	2d 91       	ld	r18, X+
    6936:	3c 91       	ld	r19, X
    6938:	55 97       	sbiw	r26, 0x15	; 21
    693a:	a9 01       	movw	r20, r18
    693c:	59 2b       	or	r21, r25
    693e:	54 96       	adiw	r26, 0x14	; 20
    6940:	4d 93       	st	X+, r20
    6942:	5c 93       	st	X, r21
    6944:	55 97       	sbiw	r26, 0x15	; 21
    6946:	56 96       	adiw	r26, 0x16	; 22
    6948:	2d 91       	ld	r18, X+
    694a:	3c 91       	ld	r19, X
    694c:	57 97       	sbiw	r26, 0x17	; 23
    694e:	42 17       	cp	r20, r18
    6950:	53 07       	cpc	r21, r19
    6952:	f1 f4       	brne	.+60     	; 0x6990 <_ZN9CMBSender13OnReceiveByteEh+0x180>
    6954:	ed 01       	movw	r28, r26
    6956:	88 e0       	ldi	r24, 0x08	; 8
    6958:	88 8b       	std	Y+16, r24	; 0x10
    695a:	e8 81       	ld	r30, Y
    695c:	f9 81       	ldd	r31, Y+1	; 0x01
    695e:	4e 81       	ldd	r20, Y+6	; 0x06
    6960:	50 e0       	ldi	r21, 0x00	; 0
    6962:	6a 81       	ldd	r22, Y+2	; 0x02
    6964:	7b 81       	ldd	r23, Y+3	; 0x03
    6966:	01 90       	ld	r0, Z+
    6968:	f0 81       	ld	r31, Z
    696a:	e0 2d       	mov	r30, r0
    696c:	cd 01       	movw	r24, r26
    696e:	19 95       	eicall
    6970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6974:	00 97       	sbiw	r24, 0x00	; 0
    6976:	91 f0       	breq	.+36     	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6978:	dc 01       	movw	r26, r24
    697a:	ed 91       	ld	r30, X+
    697c:	fc 91       	ld	r31, X
    697e:	4e 81       	ldd	r20, Y+6	; 0x06
    6980:	50 e0       	ldi	r21, 0x00	; 0
    6982:	6a 81       	ldd	r22, Y+2	; 0x02
    6984:	7b 81       	ldd	r23, Y+3	; 0x03
    6986:	01 90       	ld	r0, Z+
    6988:	f0 81       	ld	r31, Z
    698a:	e0 2d       	mov	r30, r0
    698c:	19 95       	eicall
    698e:	06 c0       	rjmp	.+12     	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6990:	89 e0       	ldi	r24, 0x09	; 9
    6992:	50 96       	adiw	r26, 0x10	; 16
    6994:	8c 93       	st	X, r24
    6996:	02 c0       	rjmp	.+4      	; 0x699c <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    6998:	5a 96       	adiw	r26, 0x1a	; 26
    699a:	1c 92       	st	X, r1
    699c:	df 91       	pop	r29
    699e:	cf 91       	pop	r28
    69a0:	08 95       	ret

000069a2 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    69a2:	cf 93       	push	r28
    69a4:	df 93       	push	r29
    69a6:	ec 01       	movw	r28, r24
    69a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    69aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    69ac:	dc 01       	movw	r26, r24
    69ae:	ed 91       	ld	r30, X+
    69b0:	fc 91       	ld	r31, X
    69b2:	02 80       	ldd	r0, Z+2	; 0x02
    69b4:	f3 81       	ldd	r31, Z+3	; 0x03
    69b6:	e0 2d       	mov	r30, r0
    69b8:	19 95       	eicall
    69ba:	68 2f       	mov	r22, r24
    69bc:	ce 01       	movw	r24, r28
    69be:	0e 94 08 34 	call	0x6810	; 0x6810 <_ZN9CMBSender13OnReceiveByteEh>
    69c2:	df 91       	pop	r29
    69c4:	cf 91       	pop	r28
    69c6:	08 95       	ret

000069c8 <_ZN9CMBSender9OnTimeoutEv>:
    69c8:	cf 93       	push	r28
    69ca:	df 93       	push	r29
    69cc:	ec 01       	movw	r28, r24
    69ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    69d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    69d2:	dc 01       	movw	r26, r24
    69d4:	ed 91       	ld	r30, X+
    69d6:	fc 91       	ld	r31, X
    69d8:	04 80       	ldd	r0, Z+4	; 0x04
    69da:	f5 81       	ldd	r31, Z+5	; 0x05
    69dc:	e0 2d       	mov	r30, r0
    69de:	19 95       	eicall
    69e0:	88 89       	ldd	r24, Y+16	; 0x10
    69e2:	88 30       	cpi	r24, 0x08	; 8
    69e4:	11 f0       	breq	.+4      	; 0x69ea <_ZN9CMBSender9OnTimeoutEv+0x22>
    69e6:	8a e0       	ldi	r24, 0x0A	; 10
    69e8:	88 8b       	std	Y+16, r24	; 0x10
    69ea:	df 91       	pop	r29
    69ec:	cf 91       	pop	r28
    69ee:	08 95       	ret

000069f0 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    69f0:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <_ZN9CMBSender9OnTimeoutEv>
    69f4:	08 95       	ret

000069f6 <_ZN9CMBSender19StartMODBUSListenerEv>:
    69f6:	cf 93       	push	r28
    69f8:	df 93       	push	r29
    69fa:	fc 01       	movw	r30, r24
    69fc:	11 8a       	std	Z+17, r1	; 0x11
    69fe:	16 82       	std	Z+6, r1	; 0x06
    6a00:	14 8a       	std	Z+20, r1	; 0x14
    6a02:	15 8a       	std	Z+21, r1	; 0x15
    6a04:	16 8a       	std	Z+22, r1	; 0x16
    6a06:	17 8a       	std	Z+23, r1	; 0x17
    6a08:	10 8a       	std	Z+16, r1	; 0x10
    6a0a:	86 85       	ldd	r24, Z+14	; 0x0e
    6a0c:	97 85       	ldd	r25, Z+15	; 0x0f
    6a0e:	ec 01       	movw	r28, r24
    6a10:	a8 81       	ld	r26, Y
    6a12:	b9 81       	ldd	r27, Y+1	; 0x01
    6a14:	62 89       	ldd	r22, Z+18	; 0x12
    6a16:	73 89       	ldd	r23, Z+19	; 0x13
    6a18:	12 96       	adiw	r26, 0x02	; 2
    6a1a:	ed 91       	ld	r30, X+
    6a1c:	fc 91       	ld	r31, X
    6a1e:	13 97       	sbiw	r26, 0x03	; 3
    6a20:	19 95       	eicall
    6a22:	df 91       	pop	r29
    6a24:	cf 91       	pop	r28
    6a26:	08 95       	ret

00006a28 <_ZN9CMBSender14OnTransmitByteEv>:
    6a28:	cf 93       	push	r28
    6a2a:	df 93       	push	r29
    6a2c:	ec 01       	movw	r28, r24
    6a2e:	88 8d       	ldd	r24, Y+24	; 0x18
    6a30:	84 30       	cpi	r24, 0x04	; 4
    6a32:	38 f4       	brcc	.+14     	; 0x6a42 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    6a34:	82 30       	cpi	r24, 0x02	; 2
    6a36:	b8 f5       	brcc	.+110    	; 0x6aa6 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    6a38:	88 23       	and	r24, r24
    6a3a:	31 f0       	breq	.+12     	; 0x6a48 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    6a3c:	81 30       	cpi	r24, 0x01	; 1
    6a3e:	d1 f0       	breq	.+52     	; 0x6a74 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    6a40:	39 c0       	rjmp	.+114    	; 0x6ab4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6a42:	85 30       	cpi	r24, 0x05	; 5
    6a44:	81 f1       	breq	.+96     	; 0x6aa6 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    6a46:	36 c0       	rjmp	.+108    	; 0x6ab4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6a48:	81 e0       	ldi	r24, 0x01	; 1
    6a4a:	88 8f       	std	Y+24, r24	; 0x18
    6a4c:	19 8e       	std	Y+25, r1	; 0x19
    6a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6a50:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a52:	29 8d       	ldd	r18, Y+25	; 0x19
    6a54:	dc 01       	movw	r26, r24
    6a56:	ed 91       	ld	r30, X+
    6a58:	fc 91       	ld	r31, X
    6a5a:	ac 81       	ldd	r26, Y+4	; 0x04
    6a5c:	bd 81       	ldd	r27, Y+5	; 0x05
    6a5e:	a2 0f       	add	r26, r18
    6a60:	b1 1d       	adc	r27, r1
    6a62:	04 80       	ldd	r0, Z+4	; 0x04
    6a64:	f5 81       	ldd	r31, Z+5	; 0x05
    6a66:	e0 2d       	mov	r30, r0
    6a68:	6c 91       	ld	r22, X
    6a6a:	19 95       	eicall
    6a6c:	89 8d       	ldd	r24, Y+25	; 0x19
    6a6e:	8f 5f       	subi	r24, 0xFF	; 255
    6a70:	89 8f       	std	Y+25, r24	; 0x19
    6a72:	20 c0       	rjmp	.+64     	; 0x6ab4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6a74:	8c 85       	ldd	r24, Y+12	; 0x0c
    6a76:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a78:	29 8d       	ldd	r18, Y+25	; 0x19
    6a7a:	dc 01       	movw	r26, r24
    6a7c:	ed 91       	ld	r30, X+
    6a7e:	fc 91       	ld	r31, X
    6a80:	ac 81       	ldd	r26, Y+4	; 0x04
    6a82:	bd 81       	ldd	r27, Y+5	; 0x05
    6a84:	a2 0f       	add	r26, r18
    6a86:	b1 1d       	adc	r27, r1
    6a88:	04 80       	ldd	r0, Z+4	; 0x04
    6a8a:	f5 81       	ldd	r31, Z+5	; 0x05
    6a8c:	e0 2d       	mov	r30, r0
    6a8e:	6c 91       	ld	r22, X
    6a90:	19 95       	eicall
    6a92:	89 8d       	ldd	r24, Y+25	; 0x19
    6a94:	8f 5f       	subi	r24, 0xFF	; 255
    6a96:	89 8f       	std	Y+25, r24	; 0x19
    6a98:	99 8d       	ldd	r25, Y+25	; 0x19
    6a9a:	89 85       	ldd	r24, Y+9	; 0x09
    6a9c:	98 13       	cpse	r25, r24
    6a9e:	0a c0       	rjmp	.+20     	; 0x6ab4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6aa0:	83 e0       	ldi	r24, 0x03	; 3
    6aa2:	88 8f       	std	Y+24, r24	; 0x18
    6aa4:	07 c0       	rjmp	.+14     	; 0x6ab4 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    6aa6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6aa8:	88 23       	and	r24, r24
    6aaa:	19 f0       	breq	.+6      	; 0x6ab2 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    6aac:	ce 01       	movw	r24, r28
    6aae:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <_ZN9CMBSender19StartMODBUSListenerEv>
    6ab2:	1a 8e       	std	Y+26, r1	; 0x1a
    6ab4:	df 91       	pop	r29
    6ab6:	cf 91       	pop	r28
    6ab8:	08 95       	ret

00006aba <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    6aba:	0e 94 14 35 	call	0x6a28	; 0x6a28 <_ZN9CMBSender14OnTransmitByteEv>
    6abe:	08 95       	ret

00006ac0 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    6ac0:	fc 01       	movw	r30, r24
    6ac2:	06 c0       	rjmp	.+12     	; 0x6ad0 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    6ac4:	80 89       	ldd	r24, Z+16	; 0x10
    6ac6:	89 30       	cpi	r24, 0x09	; 9
    6ac8:	41 f0       	breq	.+16     	; 0x6ada <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    6aca:	80 89       	ldd	r24, Z+16	; 0x10
    6acc:	8a 30       	cpi	r24, 0x0A	; 10
    6ace:	39 f0       	breq	.+14     	; 0x6ade <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    6ad0:	80 89       	ldd	r24, Z+16	; 0x10
    6ad2:	88 30       	cpi	r24, 0x08	; 8
    6ad4:	b9 f7       	brne	.-18     	; 0x6ac4 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    6ad6:	81 e0       	ldi	r24, 0x01	; 1
    6ad8:	08 95       	ret
    6ada:	82 e0       	ldi	r24, 0x02	; 2
    6adc:	08 95       	ret
    6ade:	83 e0       	ldi	r24, 0x03	; 3
    6ae0:	08 95       	ret

00006ae2 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    6ae2:	cf 93       	push	r28
    6ae4:	df 93       	push	r29
    6ae6:	ec 01       	movw	r28, r24
    6ae8:	19 8e       	std	Y+25, r1	; 0x19
    6aea:	18 8e       	std	Y+24, r1	; 0x18
    6aec:	0e 94 14 35 	call	0x6a28	; 0x6a28 <_ZN9CMBSender14OnTransmitByteEv>
    6af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6af2:	9f 85       	ldd	r25, Y+15	; 0x0f
    6af4:	dc 01       	movw	r26, r24
    6af6:	ed 91       	ld	r30, X+
    6af8:	fc 91       	ld	r31, X
    6afa:	6a 89       	ldd	r22, Y+18	; 0x12
    6afc:	7b 89       	ldd	r23, Y+19	; 0x13
    6afe:	02 80       	ldd	r0, Z+2	; 0x02
    6b00:	f3 81       	ldd	r31, Z+3	; 0x03
    6b02:	e0 2d       	mov	r30, r0
    6b04:	19 95       	eicall
    6b06:	df 91       	pop	r29
    6b08:	cf 91       	pop	r28
    6b0a:	08 95       	ret

00006b0c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	ec 01       	movw	r28, r24
    6b12:	e8 81       	ld	r30, Y
    6b14:	f9 81       	ldd	r31, Y+1	; 0x01
    6b16:	02 84       	ldd	r0, Z+10	; 0x0a
    6b18:	f3 85       	ldd	r31, Z+11	; 0x0b
    6b1a:	e0 2d       	mov	r30, r0
    6b1c:	19 95       	eicall
    6b1e:	ce 01       	movw	r24, r28
    6b20:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6b24:	df 91       	pop	r29
    6b26:	cf 91       	pop	r28
    6b28:	08 95       	ret

00006b2a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	ec 01       	movw	r28, r24
    6b30:	e8 81       	ld	r30, Y
    6b32:	f9 81       	ldd	r31, Y+1	; 0x01
    6b34:	06 84       	ldd	r0, Z+14	; 0x0e
    6b36:	f7 85       	ldd	r31, Z+15	; 0x0f
    6b38:	e0 2d       	mov	r30, r0
    6b3a:	19 95       	eicall
    6b3c:	ce 01       	movw	r24, r28
    6b3e:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6b42:	df 91       	pop	r29
    6b44:	cf 91       	pop	r28
    6b46:	08 95       	ret

00006b48 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    6b48:	cf 93       	push	r28
    6b4a:	df 93       	push	r29
    6b4c:	ec 01       	movw	r28, r24
    6b4e:	e8 81       	ld	r30, Y
    6b50:	f9 81       	ldd	r31, Y+1	; 0x01
    6b52:	04 84       	ldd	r0, Z+12	; 0x0c
    6b54:	f5 85       	ldd	r31, Z+13	; 0x0d
    6b56:	e0 2d       	mov	r30, r0
    6b58:	19 95       	eicall
    6b5a:	ce 01       	movw	r24, r28
    6b5c:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6b60:	df 91       	pop	r29
    6b62:	cf 91       	pop	r28
    6b64:	08 95       	ret

00006b66 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    6b66:	cf 93       	push	r28
    6b68:	df 93       	push	r29
    6b6a:	ec 01       	movw	r28, r24
    6b6c:	e8 81       	ld	r30, Y
    6b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    6b70:	50 e0       	ldi	r21, 0x00	; 0
    6b72:	00 88       	ldd	r0, Z+16	; 0x10
    6b74:	f1 89       	ldd	r31, Z+17	; 0x11
    6b76:	e0 2d       	mov	r30, r0
    6b78:	19 95       	eicall
    6b7a:	ce 01       	movw	r24, r28
    6b7c:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    6b80:	df 91       	pop	r29
    6b82:	cf 91       	pop	r28
    6b84:	08 95       	ret

00006b86 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    6b86:	fc 01       	movw	r30, r24
    6b88:	06 c0       	rjmp	.+12     	; 0x6b96 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    6b8a:	80 8d       	ldd	r24, Z+24	; 0x18
    6b8c:	84 30       	cpi	r24, 0x04	; 4
    6b8e:	41 f0       	breq	.+16     	; 0x6ba0 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    6b90:	80 8d       	ldd	r24, Z+24	; 0x18
    6b92:	85 30       	cpi	r24, 0x05	; 5
    6b94:	39 f0       	breq	.+14     	; 0x6ba4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    6b96:	80 8d       	ldd	r24, Z+24	; 0x18
    6b98:	83 30       	cpi	r24, 0x03	; 3
    6b9a:	b9 f7       	brne	.-18     	; 0x6b8a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    6b9c:	81 e0       	ldi	r24, 0x01	; 1
    6b9e:	08 95       	ret
    6ba0:	82 e0       	ldi	r24, 0x02	; 2
    6ba2:	08 95       	ret
    6ba4:	83 e0       	ldi	r24, 0x03	; 3
    6ba6:	08 95       	ret

00006ba8 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    6ba8:	21 e0       	ldi	r18, 0x01	; 1
    6baa:	fc 01       	movw	r30, r24
    6bac:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    6bae:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    6bb2:	08 95       	ret

00006bb4 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    6bb4:	21 e0       	ldi	r18, 0x01	; 1
    6bb6:	fc 01       	movw	r30, r24
    6bb8:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    6bba:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    6bbe:	08 95       	ret

00006bc0 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    6bc0:	0f 93       	push	r16
    6bc2:	1f 93       	push	r17
    6bc4:	cf 93       	push	r28
    6bc6:	df 93       	push	r29
    6bc8:	8c 01       	movw	r16, r24
    6bca:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    6bcc:	98 81       	ld	r25, Y
    6bce:	91 38       	cpi	r25, 0x81	; 129
    6bd0:	69 f4       	brne	.+26     	; 0x6bec <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    6bd2:	d8 01       	movw	r26, r16
    6bd4:	ed 91       	ld	r30, X+
    6bd6:	fc 91       	ld	r31, X
    6bd8:	04 80       	ldd	r0, Z+4	; 0x04
    6bda:	f5 81       	ldd	r31, Z+5	; 0x05
    6bdc:	e0 2d       	mov	r30, r0
    6bde:	2a 81       	ldd	r18, Y+2	; 0x02
    6be0:	ab 01       	movw	r20, r22
    6be2:	4d 5f       	subi	r20, 0xFD	; 253
    6be4:	5f 4f       	sbci	r21, 0xFF	; 255
    6be6:	69 81       	ldd	r22, Y+1	; 0x01
    6be8:	c8 01       	movw	r24, r16
    6bea:	19 95       	eicall
	}
	if (data[0] == 0x83)
    6bec:	98 81       	ld	r25, Y
    6bee:	93 38       	cpi	r25, 0x83	; 131
    6bf0:	99 f4       	brne	.+38     	; 0x6c18 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    6bf2:	d8 01       	movw	r26, r16
    6bf4:	ed 91       	ld	r30, X+
    6bf6:	fc 91       	ld	r31, X
    6bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    6bfa:	30 e0       	ldi	r19, 0x00	; 0
    6bfc:	ae 01       	movw	r20, r28
    6bfe:	4c 5f       	subi	r20, 0xFC	; 252
    6c00:	5f 4f       	sbci	r21, 0xFF	; 255
    6c02:	69 81       	ldd	r22, Y+1	; 0x01
    6c04:	70 e0       	ldi	r23, 0x00	; 0
    6c06:	76 2f       	mov	r23, r22
    6c08:	66 27       	eor	r22, r22
    6c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c0c:	68 2b       	or	r22, r24
    6c0e:	02 80       	ldd	r0, Z+2	; 0x02
    6c10:	f3 81       	ldd	r31, Z+3	; 0x03
    6c12:	e0 2d       	mov	r30, r0
    6c14:	c8 01       	movw	r24, r16
    6c16:	19 95       	eicall
	}
}
    6c18:	df 91       	pop	r29
    6c1a:	cf 91       	pop	r28
    6c1c:	1f 91       	pop	r17
    6c1e:	0f 91       	pop	r16
    6c20:	08 95       	ret

00006c22 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    6c22:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <_ZN9CMBSender18ProcessTransactionEPhj>
    6c26:	08 95       	ret

00006c28 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    6c28:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    6c2a:	e0 e6       	ldi	r30, 0x60	; 96
    6c2c:	f6 e0       	ldi	r31, 0x06	; 6
    6c2e:	88 e0       	ldi	r24, 0x08	; 8
    6c30:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    6c32:	84 e0       	ldi	r24, 0x04	; 4
    6c34:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    6c36:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    6c38:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    6c3a:	e0 ea       	ldi	r30, 0xA0	; 160
    6c3c:	f9 e0       	ldi	r31, 0x09	; 9
    6c3e:	84 e1       	ldi	r24, 0x14	; 20
    6c40:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    6c42:	88 e1       	ldi	r24, 0x18	; 24
    6c44:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    6c46:	84 81       	ldd	r24, Z+4	; 0x04
    6c48:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    6c4a:	41 30       	cpi	r20, 0x01	; 1
    6c4c:	19 f0       	breq	.+6      	; 0x6c54 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    6c4e:	42 30       	cpi	r20, 0x02	; 2
    6c50:	19 f0       	breq	.+6      	; 0x6c58 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    6c52:	04 c0       	rjmp	.+8      	; 0x6c5c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    6c54:	80 e2       	ldi	r24, 0x20	; 32
    6c56:	03 c0       	rjmp	.+6      	; 0x6c5e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    6c58:	80 e3       	ldi	r24, 0x30	; 48
		break;
    6c5a:	01 c0       	rjmp	.+2      	; 0x6c5e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    6c5c:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    6c5e:	22 23       	and	r18, r18
    6c60:	19 f0       	breq	.+6      	; 0x6c68 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    6c62:	21 30       	cpi	r18, 0x01	; 1
    6c64:	19 f0       	breq	.+6      	; 0x6c6c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    6c66:	03 c0       	rjmp	.+6      	; 0x6c6e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    6c68:	87 7f       	andi	r24, 0xF7	; 247
		break;
    6c6a:	01 c0       	rjmp	.+2      	; 0x6c6e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    6c6c:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    6c6e:	01 11       	cpse	r16, r1
    6c70:	02 c0       	rjmp	.+4      	; 0x6c76 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    6c72:	93 e4       	ldi	r25, 0x43	; 67
    6c74:	01 c0       	rjmp	.+2      	; 0x6c78 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    6c76:	93 e0       	ldi	r25, 0x03	; 3
    6c78:	89 2b       	or	r24, r25
    6c7a:	e0 ea       	ldi	r30, 0xA0	; 160
    6c7c:	f9 e0       	ldi	r31, 0x09	; 9
    6c7e:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    6c80:	70 e0       	ldi	r23, 0x00	; 0
    6c82:	db 01       	movw	r26, r22
    6c84:	a6 5a       	subi	r26, 0xA6	; 166
    6c86:	be 4d       	sbci	r27, 0xDE	; 222
    6c88:	8c 91       	ld	r24, X
    6c8a:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    6c8c:	db 01       	movw	r26, r22
    6c8e:	a6 5c       	subi	r26, 0xC6	; 198
    6c90:	be 4d       	sbci	r27, 0xDE	; 222
    6c92:	8c 91       	ld	r24, X
    6c94:	82 95       	swap	r24
    6c96:	80 7f       	andi	r24, 0xF0	; 240
    6c98:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    6c9a:	0f 91       	pop	r16
    6c9c:	08 95       	ret

00006c9e <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    6c9e:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
    6ca2:	08 95       	ret

00006ca4 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    6ca4:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    6ca8:	08 95       	ret

00006caa <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    6caa:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6cae:	86 fb       	bst	r24, 6
    6cb0:	88 27       	eor	r24, r24
    6cb2:	80 f9       	bld	r24, 0
}
    6cb4:	91 e0       	ldi	r25, 0x01	; 1
    6cb6:	89 27       	eor	r24, r25
    6cb8:	08 95       	ret

00006cba <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    6cba:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6cbe:	80 95       	com	r24
}
    6cc0:	88 1f       	adc	r24, r24
    6cc2:	88 27       	eor	r24, r24
    6cc4:	88 1f       	adc	r24, r24
    6cc6:	08 95       	ret

00006cc8 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    6cc8:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    6ccc:	85 fb       	bst	r24, 5
    6cce:	88 27       	eor	r24, r24
    6cd0:	80 f9       	bld	r24, 0
}
    6cd2:	91 e0       	ldi	r25, 0x01	; 1
    6cd4:	89 27       	eor	r24, r25
    6cd6:	08 95       	ret

00006cd8 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    6cd8:	60 93 6c 24 	sts	0x246C, r22	; 0x80246c <InterruptSenderTable+0xb0>
    6cdc:	70 93 6d 24 	sts	0x246D, r23	; 0x80246d <InterruptSenderTable+0xb1>
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    6ce0:	40 93 76 23 	sts	0x2376, r20	; 0x802376 <InterruptFuncTable+0xb0>
    6ce4:	50 93 77 23 	sts	0x2377, r21	; 0x802377 <InterruptFuncTable+0xb1>
    6ce8:	08 95       	ret

00006cea <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    6cea:	60 93 70 24 	sts	0x2470, r22	; 0x802470 <InterruptSenderTable+0xb4>
    6cee:	70 93 71 24 	sts	0x2471, r23	; 0x802471 <InterruptSenderTable+0xb5>
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    6cf2:	40 93 7a 23 	sts	0x237A, r20	; 0x80237a <InterruptFuncTable+0xb4>
    6cf6:	50 93 7b 23 	sts	0x237B, r21	; 0x80237b <InterruptFuncTable+0xb5>
    6cfa:	08 95       	ret

00006cfc <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    6cfc:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    6cfe:	8b e6       	ldi	r24, 0x6B	; 107
    6d00:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    6d02:	80 ea       	ldi	r24, 0xA0	; 160
    6d04:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    6d06:	89 e0       	ldi	r24, 0x09	; 9
    6d08:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    6d0a:	12 86       	std	Z+10, r1	; 0x0a
    6d0c:	08 95       	ret

00006d0e <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    6d0e:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    6d10:	8c e6       	ldi	r24, 0x6C	; 108
    6d12:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    6d14:	80 ea       	ldi	r24, 0xA0	; 160
    6d16:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    6d18:	89 e0       	ldi	r24, 0x09	; 9
    6d1a:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    6d1c:	16 86       	std	Z+14, r1	; 0x0e
    6d1e:	08 95       	ret

00006d20 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    6d20:	cf 93       	push	r28
    6d22:	df 93       	push	r29
    6d24:	ec 01       	movw	r28, r24
    6d26:	0e 94 11 1c 	call	0x3822	; 0x3822 <_ZN6CUSARTC1Ev>
    6d2a:	84 e0       	ldi	r24, 0x04	; 4
    6d2c:	92 e2       	ldi	r25, 0x22	; 34
    6d2e:	88 83       	st	Y, r24
    6d30:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    6d32:	df 91       	pop	r29
    6d34:	cf 91       	pop	r28
    6d36:	08 95       	ret

00006d38 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    6d38:	24 e0       	ldi	r18, 0x04	; 4
    6d3a:	32 e2       	ldi	r19, 0x22	; 34
    6d3c:	fc 01       	movw	r30, r24
    6d3e:	20 83       	st	Z, r18
    6d40:	31 83       	std	Z+1, r19	; 0x01
    6d42:	0e 94 17 1c 	call	0x382e	; 0x382e <_ZN6CUSARTD1Ev>
    6d46:	08 95       	ret

00006d48 <_Z18onewire_crc_updatehh>:

#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
    6d48:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t p = 8; p; p--) {
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
    6d4a:	3c e8       	ldi	r19, 0x8C	; 140
    6d4c:	26 2f       	mov	r18, r22
    6d4e:	28 27       	eor	r18, r24
    6d50:	20 ff       	sbrs	r18, 0
    6d52:	03 c0       	rjmp	.+6      	; 0x6d5a <_Z18onewire_crc_updatehh+0x12>
    6d54:	86 95       	lsr	r24
    6d56:	83 27       	eor	r24, r19
    6d58:	01 c0       	rjmp	.+2      	; 0x6d5c <_Z18onewire_crc_updatehh+0x14>
    6d5a:	86 95       	lsr	r24
		b >>= 1;
    6d5c:	66 95       	lsr	r22
    6d5e:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
	for (uint8_t p = 8; p; p--) {
    6d60:	a9 f7       	brne	.-22     	; 0x6d4c <_Z18onewire_crc_updatehh+0x4>
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
		b >>= 1;
	}
	return crc;
}
    6d62:	08 95       	ret

00006d64 <_ZN8CDS18B20C1Ev>:

// default constructor
CDS18B20::CDS18B20()
    6d64:	08 95       	ret

00006d66 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    6d66:	08 95       	ret

00006d68 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    6d68:	e0 e6       	ldi	r30, 0x60	; 96
    6d6a:	f6 e0       	ldi	r31, 0x06	; 6
    6d6c:	80 e8       	ldi	r24, 0x80	; 128
    6d6e:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6d70:	a7 e2       	ldi	r26, 0x27	; 39
    6d72:	bf e0       	ldi	r27, 0x0F	; 15
    6d74:	11 97       	sbiw	r26, 0x01	; 1
    6d76:	f1 f7       	brne	.-4      	; 0x6d74 <_ZN8CDS18B207w1_findEv+0xc>
    6d78:	00 c0       	rjmp	.+0      	; 0x6d7a <_ZN8CDS18B207w1_findEv+0x12>
    6d7a:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    6d7c:	82 83       	std	Z+2, r24	; 0x02
    6d7e:	87 e0       	ldi	r24, 0x07	; 7
    6d80:	92 e0       	ldi	r25, 0x02	; 2
    6d82:	01 97       	sbiw	r24, 0x01	; 1
    6d84:	f1 f7       	brne	.-4      	; 0x6d82 <_ZN8CDS18B207w1_findEv+0x1a>
    6d86:	00 c0       	rjmp	.+0      	; 0x6d88 <_ZN8CDS18B207w1_findEv+0x20>
    6d88:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    6d8a:	80 85       	ldd	r24, Z+8	; 0x08
    6d8c:	af e1       	ldi	r26, 0x1F	; 31
    6d8e:	bd e0       	ldi	r27, 0x0D	; 13
    6d90:	11 97       	sbiw	r26, 0x01	; 1
    6d92:	f1 f7       	brne	.-4      	; 0x6d90 <_ZN8CDS18B207w1_findEv+0x28>
    6d94:	00 c0       	rjmp	.+0      	; 0x6d96 <_ZN8CDS18B207w1_findEv+0x2e>
    6d96:	00 00       	nop
    6d98:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    6d9a:	88 1f       	adc	r24, r24
    6d9c:	88 27       	eor	r24, r24
    6d9e:	88 1f       	adc	r24, r24
    6da0:	08 95       	ret

00006da2 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    6da2:	cf 93       	push	r28
    6da4:	df 93       	push	r29
    6da6:	80 e0       	ldi	r24, 0x00	; 0
    6da8:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    6daa:	c1 e0       	ldi	r28, 0x01	; 1
    6dac:	d0 e0       	ldi	r29, 0x00	; 0
    6dae:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    6db0:	e0 e6       	ldi	r30, 0x60	; 96
    6db2:	f6 e0       	ldi	r31, 0x06	; 6
    6db4:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    6db6:	9e 01       	movw	r18, r28
    6db8:	08 2e       	mov	r0, r24
    6dba:	02 c0       	rjmp	.+4      	; 0x6dc0 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    6dbc:	22 0f       	add	r18, r18
    6dbe:	33 1f       	adc	r19, r19
    6dc0:	0a 94       	dec	r0
    6dc2:	e2 f7       	brpl	.-8      	; 0x6dbc <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    6dc4:	d9 01       	movw	r26, r18
    6dc6:	a6 23       	and	r26, r22
    6dc8:	b7 23       	and	r27, r23
    6dca:	2a 17       	cp	r18, r26
    6dcc:	3b 07       	cpc	r19, r27
    6dce:	69 f4       	brne	.+26     	; 0x6dea <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    6dd0:	41 83       	std	Z+1, r20	; 0x01
    6dd2:	25 e1       	ldi	r18, 0x15	; 21
    6dd4:	2a 95       	dec	r18
    6dd6:	f1 f7       	brne	.-4      	; 0x6dd4 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    6dd8:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    6dda:	42 83       	std	Z+2, r20	; 0x02
    6ddc:	a7 e0       	ldi	r26, 0x07	; 7
    6dde:	b2 e0       	ldi	r27, 0x02	; 2
    6de0:	11 97       	sbiw	r26, 0x01	; 1
    6de2:	f1 f7       	brne	.-4      	; 0x6de0 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    6de4:	00 c0       	rjmp	.+0      	; 0x6de6 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    6de6:	00 00       	nop
    6de8:	0c c0       	rjmp	.+24     	; 0x6e02 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    6dea:	41 83       	std	Z+1, r20	; 0x01
    6dec:	a7 e0       	ldi	r26, 0x07	; 7
    6dee:	b2 e0       	ldi	r27, 0x02	; 2
    6df0:	11 97       	sbiw	r26, 0x01	; 1
    6df2:	f1 f7       	brne	.-4      	; 0x6df0 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    6df4:	00 c0       	rjmp	.+0      	; 0x6df6 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    6df6:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    6df8:	42 83       	std	Z+2, r20	; 0x02
    6dfa:	b5 e3       	ldi	r27, 0x35	; 53
    6dfc:	ba 95       	dec	r27
    6dfe:	f1 f7       	brne	.-4      	; 0x6dfc <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    6e00:	00 00       	nop
    6e02:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    6e04:	88 30       	cpi	r24, 0x08	; 8
    6e06:	91 05       	cpc	r25, r1
    6e08:	b1 f6       	brne	.-84     	; 0x6db6 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    6e0a:	df 91       	pop	r29
    6e0c:	cf 91       	pop	r28
    6e0e:	08 95       	ret

00006e10 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    6e10:	20 e0       	ldi	r18, 0x00	; 0
    6e12:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    6e14:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    6e16:	e0 e6       	ldi	r30, 0x60	; 96
    6e18:	f6 e0       	ldi	r31, 0x06	; 6
    6e1a:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    6e1c:	61 e0       	ldi	r22, 0x01	; 1
    6e1e:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    6e20:	91 83       	std	Z+1, r25	; 0x01
    6e22:	45 e1       	ldi	r20, 0x15	; 21
    6e24:	4a 95       	dec	r20
    6e26:	f1 f7       	brne	.-4      	; 0x6e24 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    6e28:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    6e2a:	92 83       	std	Z+2, r25	; 0x02
    6e2c:	aa e6       	ldi	r26, 0x6A	; 106
    6e2e:	aa 95       	dec	r26
    6e30:	f1 f7       	brne	.-4      	; 0x6e2e <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    6e32:	00 c0       	rjmp	.+0      	; 0x6e34 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    6e34:	40 85       	ldd	r20, Z+8	; 0x08
    6e36:	44 23       	and	r20, r20
    6e38:	54 f0       	brlt	.+20     	; 0x6e4e <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    6e3a:	ab 01       	movw	r20, r22
    6e3c:	02 2e       	mov	r0, r18
    6e3e:	02 c0       	rjmp	.+4      	; 0x6e44 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    6e40:	44 0f       	add	r20, r20
    6e42:	55 1f       	adc	r21, r21
    6e44:	0a 94       	dec	r0
    6e46:	e2 f7       	brpl	.-8      	; 0x6e40 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    6e48:	40 95       	com	r20
    6e4a:	84 23       	and	r24, r20
    6e4c:	08 c0       	rjmp	.+16     	; 0x6e5e <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    6e4e:	ab 01       	movw	r20, r22
    6e50:	02 2e       	mov	r0, r18
    6e52:	02 c0       	rjmp	.+4      	; 0x6e58 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    6e54:	44 0f       	add	r20, r20
    6e56:	55 1f       	adc	r21, r21
    6e58:	0a 94       	dec	r0
    6e5a:	e2 f7       	brpl	.-8      	; 0x6e54 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    6e5c:	84 2b       	or	r24, r20
    6e5e:	af e8       	ldi	r26, 0x8F	; 143
    6e60:	b1 e0       	ldi	r27, 0x01	; 1
    6e62:	11 97       	sbiw	r26, 0x01	; 1
    6e64:	f1 f7       	brne	.-4      	; 0x6e62 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    6e66:	00 c0       	rjmp	.+0      	; 0x6e68 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    6e68:	00 00       	nop
    6e6a:	2f 5f       	subi	r18, 0xFF	; 255
    6e6c:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    6e6e:	28 30       	cpi	r18, 0x08	; 8
    6e70:	31 05       	cpc	r19, r1
    6e72:	b1 f6       	brne	.-84     	; 0x6e20 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    6e74:	08 95       	ret

00006e76 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    6e76:	af 92       	push	r10
    6e78:	bf 92       	push	r11
    6e7a:	df 92       	push	r13
    6e7c:	ef 92       	push	r14
    6e7e:	ff 92       	push	r15
    6e80:	0f 93       	push	r16
    6e82:	1f 93       	push	r17
    6e84:	cf 93       	push	r28
    6e86:	df 93       	push	r29
    6e88:	cd b7       	in	r28, 0x3d	; 61
    6e8a:	de b7       	in	r29, 0x3e	; 62
    6e8c:	29 97       	sbiw	r28, 0x09	; 9
    6e8e:	cd bf       	out	0x3d, r28	; 61
    6e90:	de bf       	out	0x3e, r29	; 62
    6e92:	8c 01       	movw	r16, r24
	unsigned char data[9];
	int temp = 0;
	
	if (req)
    6e94:	fc 01       	movw	r30, r24
    6e96:	82 81       	ldd	r24, Z+2	; 0x02
    6e98:	88 23       	and	r24, r24
    6e9a:	a1 f0       	breq	.+40     	; 0x6ec4 <_ZN8CDS18B2010temp_18b20Ev+0x4e>
	{
		if(w1_find())
    6e9c:	c8 01       	movw	r24, r16
    6e9e:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <_ZN8CDS18B207w1_findEv>
    6ea2:	88 23       	and	r24, r24
    6ea4:	61 f0       	breq	.+24     	; 0x6ebe <_ZN8CDS18B2010temp_18b20Ev+0x48>
		{
			w1_sendcmd(0xcc);	//skip ROM
    6ea6:	6c ec       	ldi	r22, 0xCC	; 204
    6ea8:	c8 01       	movw	r24, r16
    6eaa:	0e 94 d1 36 	call	0x6da2	; 0x6da2 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    6eae:	64 e4       	ldi	r22, 0x44	; 68
    6eb0:	c8 01       	movw	r24, r16
    6eb2:	0e 94 d1 36 	call	0x6da2	; 0x6da2 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    6eb6:	81 e0       	ldi	r24, 0x01	; 1
    6eb8:	f8 01       	movw	r30, r16
    6eba:	83 83       	std	Z+3, r24	; 0x03
    6ebc:	3f c0       	rjmp	.+126    	; 0x6f3c <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		}
		else
			find = false;
    6ebe:	f8 01       	movw	r30, r16
    6ec0:	13 82       	std	Z+3, r1	; 0x03
    6ec2:	3c c0       	rjmp	.+120    	; 0x6f3c <_ZN8CDS18B2010temp_18b20Ev+0xc6>
	}
	else
	{
		if (find)
    6ec4:	f8 01       	movw	r30, r16
    6ec6:	83 81       	ldd	r24, Z+3	; 0x03
    6ec8:	88 23       	and	r24, r24
    6eca:	c1 f1       	breq	.+112    	; 0x6f3c <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		{
			w1_find();
    6ecc:	c8 01       	movw	r24, r16
    6ece:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    6ed2:	6c ec       	ldi	r22, 0xCC	; 204
    6ed4:	c8 01       	movw	r24, r16
    6ed6:	0e 94 d1 36 	call	0x6da2	; 0x6da2 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    6eda:	6e eb       	ldi	r22, 0xBE	; 190
    6edc:	c8 01       	movw	r24, r16
    6ede:	0e 94 d1 36 	call	0x6da2	; 0x6da2 <_ZN8CDS18B2010w1_sendcmdEh>
    6ee2:	ce 01       	movw	r24, r28
    6ee4:	01 96       	adiw	r24, 0x01	; 1
    6ee6:	7c 01       	movw	r14, r24
    6ee8:	5e 01       	movw	r10, r28
    6eea:	9a e0       	ldi	r25, 0x0A	; 10
    6eec:	a9 0e       	add	r10, r25
    6eee:	b1 1c       	adc	r11, r1
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
    6ef0:	d1 2c       	mov	r13, r1
			for (int i = 0; i < 9; i++)
			{
				data[i] = w1_receive_byte();
    6ef2:	c8 01       	movw	r24, r16
    6ef4:	0e 94 08 37 	call	0x6e10	; 0x6e10 <_ZN8CDS18B2015w1_receive_byteEv>
    6ef8:	68 2f       	mov	r22, r24
    6efa:	f7 01       	movw	r30, r14
    6efc:	81 93       	st	Z+, r24
    6efe:	7f 01       	movw	r14, r30
				crc = onewire_crc_update(crc, data[i]);
    6f00:	8d 2d       	mov	r24, r13
    6f02:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <_Z18onewire_crc_updatehh>
    6f06:	d8 2e       	mov	r13, r24
			w1_sendcmd(0xcc);
			w1_sendcmd(0xbe);	//read temperature
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
			for (int i = 0; i < 9; i++)
    6f08:	ea 14       	cp	r14, r10
    6f0a:	fb 04       	cpc	r15, r11
    6f0c:	91 f7       	brne	.-28     	; 0x6ef2 <_ZN8CDS18B2010temp_18b20Ev+0x7c>
			{
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
    6f0e:	8a 81       	ldd	r24, Y+2	; 0x02
			temp = temp<<8;
			temp |= data[0];
    6f10:	69 81       	ldd	r22, Y+1	; 0x01
			
			temp *= 0.625;
			
			if (crc == 0)
    6f12:	d1 10       	cpse	r13, r1
    6f14:	13 c0       	rjmp	.+38     	; 0x6f3c <_ZN8CDS18B2010temp_18b20Ev+0xc6>
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
			temp = temp<<8;
    6f16:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    6f18:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    6f1a:	07 2e       	mov	r0, r23
    6f1c:	00 0c       	add	r0, r0
    6f1e:	88 0b       	sbc	r24, r24
    6f20:	99 0b       	sbc	r25, r25
    6f22:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <__floatsisf>
    6f26:	20 e0       	ldi	r18, 0x00	; 0
    6f28:	30 e0       	ldi	r19, 0x00	; 0
    6f2a:	40 e2       	ldi	r20, 0x20	; 32
    6f2c:	5f e3       	ldi	r21, 0x3F	; 63
    6f2e:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <__mulsf3>
    6f32:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__fixsfsi>
    6f36:	f8 01       	movw	r30, r16
    6f38:	60 83       	st	Z, r22
    6f3a:	71 83       	std	Z+1, r23	; 0x01
			if (crc == 0)
				temperature = temp;
		}
	}
	
	req = !req;
    6f3c:	f8 01       	movw	r30, r16
    6f3e:	92 81       	ldd	r25, Z+2	; 0x02
    6f40:	81 e0       	ldi	r24, 0x01	; 1
    6f42:	89 27       	eor	r24, r25
    6f44:	82 83       	std	Z+2, r24	; 0x02
	
	return temperature;
}
    6f46:	80 81       	ld	r24, Z
    6f48:	91 81       	ldd	r25, Z+1	; 0x01
    6f4a:	29 96       	adiw	r28, 0x09	; 9
    6f4c:	cd bf       	out	0x3d, r28	; 61
    6f4e:	de bf       	out	0x3e, r29	; 62
    6f50:	df 91       	pop	r29
    6f52:	cf 91       	pop	r28
    6f54:	1f 91       	pop	r17
    6f56:	0f 91       	pop	r16
    6f58:	ff 90       	pop	r15
    6f5a:	ef 90       	pop	r14
    6f5c:	df 90       	pop	r13
    6f5e:	bf 90       	pop	r11
    6f60:	af 90       	pop	r10
    6f62:	08 95       	ret

00006f64 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    6f64:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    6f66:	a0 e6       	ldi	r26, 0x60	; 96
    6f68:	b6 e0       	ldi	r27, 0x06	; 6
    6f6a:	80 e8       	ldi	r24, 0x80	; 128
    6f6c:	16 96       	adiw	r26, 0x06	; 6
    6f6e:	8c 93       	st	X, r24
    6f70:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    6f72:	57 96       	adiw	r26, 0x17	; 23
    6f74:	1c 92       	st	X, r1
	
	temperature = 0;
    6f76:	10 82       	st	Z, r1
    6f78:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    6f7a:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    6f7c:	81 e0       	ldi	r24, 0x01	; 1
    6f7e:	82 83       	std	Z+2, r24	; 0x02
    6f80:	08 95       	ret

00006f82 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    6f82:	08 95       	ret

00006f84 <_ZN11CLaserBoardD1Ev>:
    6f84:	08 95       	ret

00006f86 <_ZN11CLaserBoard12InitializeIOEv>:
    6f86:	cf 93       	push	r28
    6f88:	df 93       	push	r29
    6f8a:	ec 01       	movw	r28, r24
    6f8c:	e0 e4       	ldi	r30, 0x40	; 64
    6f8e:	f6 e0       	ldi	r31, 0x06	; 6
    6f90:	11 82       	std	Z+1, r1	; 0x01
    6f92:	98 ea       	ldi	r25, 0xA8	; 168
    6f94:	90 8b       	std	Z+16, r25	; 0x10
    6f96:	91 8b       	std	Z+17, r25	; 0x11
    6f98:	92 8b       	std	Z+18, r25	; 0x12
    6f9a:	93 8b       	std	Z+19, r25	; 0x13
    6f9c:	94 8b       	std	Z+20, r25	; 0x14
    6f9e:	95 8b       	std	Z+21, r25	; 0x15
    6fa0:	96 8b       	std	Z+22, r25	; 0x16
    6fa2:	97 8b       	std	Z+23, r25	; 0x17
    6fa4:	8f ef       	ldi	r24, 0xFF	; 255
    6fa6:	84 83       	std	Z+4, r24	; 0x04
    6fa8:	a0 e8       	ldi	r26, 0x80	; 128
    6faa:	b6 e0       	ldi	r27, 0x06	; 6
    6fac:	98 e0       	ldi	r25, 0x08	; 8
    6fae:	11 96       	adiw	r26, 0x01	; 1
    6fb0:	9c 93       	st	X, r25
    6fb2:	11 97       	sbiw	r26, 0x01	; 1
    6fb4:	53 96       	adiw	r26, 0x13	; 19
    6fb6:	1c 92       	st	X, r1
    6fb8:	53 97       	sbiw	r26, 0x13	; 19
    6fba:	14 96       	adiw	r26, 0x04	; 4
    6fbc:	1c 92       	st	X, r1
    6fbe:	14 97       	sbiw	r26, 0x04	; 4
    6fc0:	e0 ea       	ldi	r30, 0xA0	; 160
    6fc2:	f6 e0       	ldi	r31, 0x06	; 6
    6fc4:	90 ec       	ldi	r25, 0xC0	; 192
    6fc6:	90 8b       	std	Z+16, r25	; 0x10
    6fc8:	20 e8       	ldi	r18, 0x80	; 128
    6fca:	21 8b       	std	Z+17, r18	; 0x11
    6fcc:	22 8b       	std	Z+18, r18	; 0x12
    6fce:	23 8b       	std	Z+19, r18	; 0x13
    6fd0:	94 8b       	std	Z+20, r25	; 0x14
    6fd2:	95 8b       	std	Z+21, r25	; 0x15
    6fd4:	96 8b       	std	Z+22, r25	; 0x16
    6fd6:	97 8b       	std	Z+23, r25	; 0x17
    6fd8:	14 82       	std	Z+4, r1	; 0x04
    6fda:	81 83       	std	Z+1, r24	; 0x01
    6fdc:	e0 e6       	ldi	r30, 0x60	; 96
    6fde:	f6 e0       	ldi	r31, 0x06	; 6
    6fe0:	81 e1       	ldi	r24, 0x11	; 17
    6fe2:	81 83       	std	Z+1, r24	; 0x01
    6fe4:	90 8b       	std	Z+16, r25	; 0x10
    6fe6:	94 8b       	std	Z+20, r25	; 0x14
    6fe8:	15 8a       	std	Z+21, r1	; 0x15
    6fea:	14 82       	std	Z+4, r1	; 0x04
    6fec:	87 e0       	ldi	r24, 0x07	; 7
    6fee:	11 96       	adiw	r26, 0x01	; 1
    6ff0:	8c 93       	st	X, r24
    6ff2:	11 97       	sbiw	r26, 0x01	; 1
    6ff4:	50 96       	adiw	r26, 0x10	; 16
    6ff6:	2c 93       	st	X, r18
    6ff8:	50 97       	sbiw	r26, 0x10	; 16
    6ffa:	51 96       	adiw	r26, 0x11	; 17
    6ffc:	2c 93       	st	X, r18
    6ffe:	51 97       	sbiw	r26, 0x11	; 17
    7000:	52 96       	adiw	r26, 0x12	; 18
    7002:	2c 93       	st	X, r18
    7004:	52 97       	sbiw	r26, 0x12	; 18
    7006:	14 96       	adiw	r26, 0x04	; 4
    7008:	1c 92       	st	X, r1
    700a:	e0 ea       	ldi	r30, 0xA0	; 160
    700c:	f0 e0       	ldi	r31, 0x00	; 0
    700e:	82 81       	ldd	r24, Z+2	; 0x02
    7010:	81 60       	ori	r24, 0x01	; 1
    7012:	82 83       	std	Z+2, r24	; 0x02
    7014:	82 81       	ldd	r24, Z+2	; 0x02
    7016:	82 60       	ori	r24, 0x02	; 2
    7018:	82 83       	std	Z+2, r24	; 0x02
    701a:	82 81       	ldd	r24, Z+2	; 0x02
    701c:	84 60       	ori	r24, 0x04	; 4
    701e:	82 83       	std	Z+2, r24	; 0x02
    7020:	fe 01       	movw	r30, r28
    7022:	9e 01       	movw	r18, r28
    7024:	28 5f       	subi	r18, 0xF8	; 248
    7026:	3f 4f       	sbci	r19, 0xFF	; 255
    7028:	91 e0       	ldi	r25, 0x01	; 1
    702a:	91 93       	st	Z+, r25
    702c:	e2 17       	cp	r30, r18
    702e:	f3 07       	cpc	r31, r19
    7030:	e1 f7       	brne	.-8      	; 0x702a <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    7032:	83 e0       	ldi	r24, 0x03	; 3
    7034:	88 87       	std	Y+8, r24	; 0x08
    7036:	e0 e4       	ldi	r30, 0x40	; 64
    7038:	f6 e0       	ldi	r31, 0x06	; 6
    703a:	81 e0       	ldi	r24, 0x01	; 1
    703c:	82 87       	std	Z+10, r24	; 0x0a
    703e:	81 87       	std	Z+9, r24	; 0x09
    7040:	e0 ea       	ldi	r30, 0xA0	; 160
    7042:	f6 e0       	ldi	r31, 0x06	; 6
    7044:	85 83       	std	Z+5, r24	; 0x05
    7046:	82 e0       	ldi	r24, 0x02	; 2
    7048:	85 83       	std	Z+5, r24	; 0x05
    704a:	df 91       	pop	r29
    704c:	cf 91       	pop	r28
    704e:	08 95       	ret

00007050 <_ZN11CLaserBoard15InitializeClockEv>:
    7050:	e0 e5       	ldi	r30, 0x50	; 80
    7052:	f0 e0       	ldi	r31, 0x00	; 0
    7054:	8b ec       	ldi	r24, 0xCB	; 203
    7056:	82 83       	std	Z+2, r24	; 0x02
    7058:	80 81       	ld	r24, Z
    705a:	88 60       	ori	r24, 0x08	; 8
    705c:	80 83       	st	Z, r24
    705e:	81 81       	ldd	r24, Z+1	; 0x01
    7060:	83 ff       	sbrs	r24, 3
    7062:	fd cf       	rjmp	.-6      	; 0x705e <_ZN11CLaserBoard15InitializeClockEv+0xe>
    7064:	e0 e5       	ldi	r30, 0x50	; 80
    7066:	f0 e0       	ldi	r31, 0x00	; 0
    7068:	85 81       	ldd	r24, Z+5	; 0x05
    706a:	98 ed       	ldi	r25, 0xD8	; 216
    706c:	94 bf       	out	0x34, r25	; 52
    706e:	84 ec       	ldi	r24, 0xC4	; 196
    7070:	85 83       	std	Z+5, r24	; 0x05
    7072:	80 81       	ld	r24, Z
    7074:	80 61       	ori	r24, 0x10	; 16
    7076:	80 83       	st	Z, r24
    7078:	e0 e4       	ldi	r30, 0x40	; 64
    707a:	f0 e0       	ldi	r31, 0x00	; 0
    707c:	81 81       	ldd	r24, Z+1	; 0x01
    707e:	94 bf       	out	0x34, r25	; 52
    7080:	11 82       	std	Z+1, r1	; 0x01
    7082:	e0 e5       	ldi	r30, 0x50	; 80
    7084:	f0 e0       	ldi	r31, 0x00	; 0
    7086:	81 81       	ldd	r24, Z+1	; 0x01
    7088:	84 ff       	sbrs	r24, 4
    708a:	fd cf       	rjmp	.-6      	; 0x7086 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    708c:	e0 e4       	ldi	r30, 0x40	; 64
    708e:	f0 e0       	ldi	r31, 0x00	; 0
    7090:	80 81       	ld	r24, Z
    7092:	88 7f       	andi	r24, 0xF8	; 248
    7094:	84 60       	ori	r24, 0x04	; 4
    7096:	98 ed       	ldi	r25, 0xD8	; 216
    7098:	94 bf       	out	0x34, r25	; 52
    709a:	80 83       	st	Z, r24
    709c:	a0 e5       	ldi	r26, 0x50	; 80
    709e:	b0 e0       	ldi	r27, 0x00	; 0
    70a0:	8c 91       	ld	r24, X
    70a2:	88 7f       	andi	r24, 0xF8	; 248
    70a4:	8c 93       	st	X, r24
    70a6:	82 81       	ldd	r24, Z+2	; 0x02
    70a8:	94 bf       	out	0x34, r25	; 52
    70aa:	81 e0       	ldi	r24, 0x01	; 1
    70ac:	82 83       	std	Z+2, r24	; 0x02
    70ae:	e0 eb       	ldi	r30, 0xB0	; 176
    70b0:	f0 e0       	ldi	r31, 0x00	; 0
    70b2:	84 81       	ldd	r24, Z+4	; 0x04
    70b4:	8c 7f       	andi	r24, 0xFC	; 252
    70b6:	84 83       	std	Z+4, r24	; 0x04
    70b8:	08 95       	ret

000070ba <_ZN11CLaserBoard5PWMOnEv>:
    70ba:	84 e0       	ldi	r24, 0x04	; 4
    70bc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    70c0:	08 95       	ret

000070c2 <_ZN11CLaserBoard6PWMOffEv>:
    70c2:	84 e0       	ldi	r24, 0x04	; 4
    70c4:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    70c8:	08 95       	ret

000070ca <_ZN11CLaserBoard5REDOnEv>:
    70ca:	82 e0       	ldi	r24, 0x02	; 2
    70cc:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    70d0:	08 95       	ret

000070d2 <_ZN11CLaserBoard5GRNOnEv>:
    70d2:	84 e0       	ldi	r24, 0x04	; 4
    70d4:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    70d8:	08 95       	ret

000070da <_ZN11CLaserBoard5BLUOnEv>:
    70da:	88 e0       	ldi	r24, 0x08	; 8
    70dc:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    70e0:	08 95       	ret

000070e2 <_ZN11CLaserBoard8Relay1OnEv>:
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    70e8:	08 95       	ret

000070ea <_ZN11CLaserBoard8Relay2OnEv>:
    70ea:	80 e1       	ldi	r24, 0x10	; 16
    70ec:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    70f0:	08 95       	ret

000070f2 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    70f2:	80 e1       	ldi	r24, 0x10	; 16
    70f4:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    70f8:	08 95       	ret

000070fa <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    70fa:	82 e0       	ldi	r24, 0x02	; 2
    70fc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    7100:	08 95       	ret

00007102 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    7102:	82 e0       	ldi	r24, 0x02	; 2
    7104:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    7108:	08 95       	ret

0000710a <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    710a:	f8 94       	cli
    710c:	84 e6       	ldi	r24, 0x64	; 100
    710e:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    7110:	e0 e8       	ldi	r30, 0x80	; 128
    7112:	f6 e0       	ldi	r31, 0x06	; 6
    7114:	28 e0       	ldi	r18, 0x08	; 8
    7116:	25 83       	std	Z+5, r18	; 0x05
    7118:	af e9       	ldi	r26, 0x9F	; 159
    711a:	bf e0       	ldi	r27, 0x0F	; 15
    711c:	11 97       	sbiw	r26, 0x01	; 1
    711e:	f1 f7       	brne	.-4      	; 0x711c <_ZN11CLaserBoard4BeepEv+0x12>
    7120:	00 c0       	rjmp	.+0      	; 0x7122 <_ZN11CLaserBoard4BeepEv+0x18>
    7122:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    7124:	26 83       	std	Z+6, r18	; 0x06
    7126:	af e9       	ldi	r26, 0x9F	; 159
    7128:	bf e0       	ldi	r27, 0x0F	; 15
    712a:	11 97       	sbiw	r26, 0x01	; 1
    712c:	f1 f7       	brne	.-4      	; 0x712a <_ZN11CLaserBoard4BeepEv+0x20>
    712e:	00 c0       	rjmp	.+0      	; 0x7130 <_ZN11CLaserBoard4BeepEv+0x26>
    7130:	00 00       	nop
    7132:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    7134:	81 f7       	brne	.-32     	; 0x7116 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    7136:	78 94       	sei
    7138:	08 95       	ret

0000713a <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    713a:	f8 94       	cli
    713c:	45 e0       	ldi	r20, 0x05	; 5
    713e:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    7140:	64 e6       	ldi	r22, 0x64	; 100
    7142:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    7144:	e0 e8       	ldi	r30, 0x80	; 128
    7146:	f6 e0       	ldi	r31, 0x06	; 6
    7148:	28 e0       	ldi	r18, 0x08	; 8
    714a:	1c c0       	rjmp	.+56     	; 0x7184 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    714c:	25 83       	std	Z+5, r18	; 0x05
    714e:	af e9       	ldi	r26, 0x9F	; 159
    7150:	bf e0       	ldi	r27, 0x0F	; 15
    7152:	11 97       	sbiw	r26, 0x01	; 1
    7154:	f1 f7       	brne	.-4      	; 0x7152 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    7156:	00 c0       	rjmp	.+0      	; 0x7158 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    7158:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    715a:	26 83       	std	Z+6, r18	; 0x06
    715c:	af e9       	ldi	r26, 0x9F	; 159
    715e:	bf e0       	ldi	r27, 0x0F	; 15
    7160:	11 97       	sbiw	r26, 0x01	; 1
    7162:	f1 f7       	brne	.-4      	; 0x7160 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    7164:	00 c0       	rjmp	.+0      	; 0x7166 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    7166:	00 00       	nop
    7168:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    716a:	81 f7       	brne	.-32     	; 0x714c <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    716c:	bf ef       	ldi	r27, 0xFF	; 255
    716e:	73 ec       	ldi	r23, 0xC3	; 195
    7170:	89 e0       	ldi	r24, 0x09	; 9
    7172:	b1 50       	subi	r27, 0x01	; 1
    7174:	70 40       	sbci	r23, 0x00	; 0
    7176:	80 40       	sbci	r24, 0x00	; 0
    7178:	e1 f7       	brne	.-8      	; 0x7172 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    717a:	00 c0       	rjmp	.+0      	; 0x717c <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    717c:	00 00       	nop
    717e:	41 50       	subi	r20, 0x01	; 1
    7180:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    7182:	19 f0       	breq	.+6      	; 0x718a <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    7184:	86 2f       	mov	r24, r22
    7186:	93 2f       	mov	r25, r19
    7188:	e1 cf       	rjmp	.-62     	; 0x714c <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    718a:	78 94       	sei
    718c:	08 95       	ret

0000718e <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    718e:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    7192:	fc 01       	movw	r30, r24
    7194:	21 87       	std	Z+9, r18	; 0x09
    7196:	08 95       	ret

00007198 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    7198:	fc 01       	movw	r30, r24
    719a:	81 85       	ldd	r24, Z+9	; 0x09
    719c:	81 70       	andi	r24, 0x01	; 1
    719e:	08 95       	ret

000071a0 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    71a0:	08 95       	ret

000071a2 <_ZN12CSoundPlayerD1Ev>:
    71a2:	08 95       	ret

000071a4 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    71a4:	e0 e0       	ldi	r30, 0x00	; 0
    71a6:	fa e0       	ldi	r31, 0x0A	; 10
    71a8:	10 82       	st	Z, r1
    71aa:	87 e8       	ldi	r24, 0x87	; 135
    71ac:	81 83       	std	Z+1, r24	; 0x01
    71ae:	13 82       	std	Z+3, r1	; 0x03
    71b0:	84 e2       	ldi	r24, 0x24	; 36
    71b2:	94 ef       	ldi	r25, 0xF4	; 244
    71b4:	86 a3       	std	Z+38, r24	; 0x26
    71b6:	97 a3       	std	Z+39, r25	; 0x27
    71b8:	82 e1       	ldi	r24, 0x12	; 18
    71ba:	9a e7       	ldi	r25, 0x7A	; 122
    71bc:	86 a7       	std	Z+46, r24	; 0x2e
    71be:	97 a7       	std	Z+47, r25	; 0x2f
    71c0:	16 82       	std	Z+6, r1	; 0x06
    71c2:	17 82       	std	Z+7, r1	; 0x07
    71c4:	08 95       	ret

000071c6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    71c6:	e0 e4       	ldi	r30, 0x40	; 64
    71c8:	fa e0       	ldi	r31, 0x0A	; 10
    71ca:	10 82       	st	Z, r1
    71cc:	11 82       	std	Z+1, r1	; 0x01
    71ce:	13 82       	std	Z+3, r1	; 0x03
    71d0:	84 e2       	ldi	r24, 0x24	; 36
    71d2:	94 ef       	ldi	r25, 0xF4	; 244
    71d4:	86 a3       	std	Z+38, r24	; 0x26
    71d6:	97 a3       	std	Z+39, r25	; 0x27
    71d8:	16 82       	std	Z+6, r1	; 0x06
    71da:	17 82       	std	Z+7, r1	; 0x07
    71dc:	08 95       	ret

000071de <_ZN12CSoundPlayer10SoundStartEjjh>:
    71de:	0f 93       	push	r16
    71e0:	1f 93       	push	r17
    71e2:	cf 93       	push	r28
    71e4:	8a 01       	movw	r16, r20
    71e6:	c2 2f       	mov	r28, r18
    71e8:	9b 01       	movw	r18, r22
    71ea:	40 e0       	ldi	r20, 0x00	; 0
    71ec:	50 e0       	ldi	r21, 0x00	; 0
    71ee:	64 e2       	ldi	r22, 0x24	; 36
    71f0:	74 ef       	ldi	r23, 0xF4	; 244
    71f2:	80 e0       	ldi	r24, 0x00	; 0
    71f4:	90 e0       	ldi	r25, 0x00	; 0
    71f6:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <__divmodsi4>
    71fa:	b8 01       	movw	r22, r16
    71fc:	76 95       	lsr	r23
    71fe:	67 95       	ror	r22
    7200:	ee e3       	ldi	r30, 0x3E	; 62
    7202:	e0 9f       	mul	r30, r16
    7204:	c0 01       	movw	r24, r0
    7206:	e1 9f       	mul	r30, r17
    7208:	90 0d       	add	r25, r0
    720a:	11 24       	eor	r1, r1
    720c:	86 0f       	add	r24, r22
    720e:	97 1f       	adc	r25, r23
    7210:	cf 5f       	subi	r28, 0xFF	; 255
    7212:	b9 01       	movw	r22, r18
    7214:	02 c0       	rjmp	.+4      	; 0x721a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    7216:	76 95       	lsr	r23
    7218:	67 95       	ror	r22
    721a:	ca 95       	dec	r28
    721c:	e2 f7       	brpl	.-8      	; 0x7216 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    721e:	e0 e0       	ldi	r30, 0x00	; 0
    7220:	fa e0       	ldi	r31, 0x0A	; 10
    7222:	66 a7       	std	Z+46, r22	; 0x2e
    7224:	77 a7       	std	Z+47, r23	; 0x2f
    7226:	26 a3       	std	Z+38, r18	; 0x26
    7228:	37 a3       	std	Z+39, r19	; 0x27
    722a:	a0 e4       	ldi	r26, 0x40	; 64
    722c:	ba e0       	ldi	r27, 0x0A	; 10
    722e:	96 96       	adiw	r26, 0x26	; 38
    7230:	8d 93       	st	X+, r24
    7232:	9c 93       	st	X, r25
    7234:	97 97       	sbiw	r26, 0x27	; 39
    7236:	86 e0       	ldi	r24, 0x06	; 6
    7238:	80 83       	st	Z, r24
    723a:	87 e0       	ldi	r24, 0x07	; 7
    723c:	8c 93       	st	X, r24
    723e:	cf 91       	pop	r28
    7240:	1f 91       	pop	r17
    7242:	0f 91       	pop	r16
    7244:	08 95       	ret

00007246 <_ZN12CSoundPlayer9SoundStopEv>:
    7246:	e0 e4       	ldi	r30, 0x40	; 64
    7248:	fa e0       	ldi	r31, 0x0A	; 10
    724a:	84 85       	ldd	r24, Z+12	; 0x0c
    724c:	80 ff       	sbrs	r24, 0
    724e:	fd cf       	rjmp	.-6      	; 0x724a <_ZN12CSoundPlayer9SoundStopEv+0x4>
    7250:	e0 e4       	ldi	r30, 0x40	; 64
    7252:	fa e0       	ldi	r31, 0x0A	; 10
    7254:	84 85       	ldd	r24, Z+12	; 0x0c
    7256:	81 70       	andi	r24, 0x01	; 1
    7258:	84 87       	std	Z+12, r24	; 0x0c
    725a:	a0 e0       	ldi	r26, 0x00	; 0
    725c:	ba e0       	ldi	r27, 0x0A	; 10
    725e:	1c 92       	st	X, r1
    7260:	10 82       	st	Z, r1
    7262:	10 a2       	std	Z+32, r1	; 0x20
    7264:	11 a2       	std	Z+33, r1	; 0x21
    7266:	90 96       	adiw	r26, 0x20	; 32
    7268:	1d 92       	st	X+, r1
    726a:	1c 92       	st	X, r1
    726c:	91 97       	sbiw	r26, 0x21	; 33
    726e:	2f ef       	ldi	r18, 0xFF	; 255
    7270:	83 ef       	ldi	r24, 0xF3	; 243
    7272:	91 e0       	ldi	r25, 0x01	; 1
    7274:	21 50       	subi	r18, 0x01	; 1
    7276:	80 40       	sbci	r24, 0x00	; 0
    7278:	90 40       	sbci	r25, 0x00	; 0
    727a:	e1 f7       	brne	.-8      	; 0x7274 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    727c:	00 c0       	rjmp	.+0      	; 0x727e <_ZN12CSoundPlayer9SoundStopEv+0x38>
    727e:	00 00       	nop
    7280:	08 95       	ret

00007282 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    7282:	cf 93       	push	r28
    7284:	df 93       	push	r29
    7286:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    7288:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    728c:	ce 01       	movw	r24, r28
    728e:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    7292:	df 91       	pop	r29
    7294:	cf 91       	pop	r28
    7296:	08 95       	ret

00007298 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    7298:	fc 01       	movw	r30, r24
    729a:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    729c:	e0 e0       	ldi	r30, 0x00	; 0
    729e:	f8 e0       	ldi	r31, 0x08	; 8
    72a0:	80 81       	ld	r24, Z
    72a2:	80 7f       	andi	r24, 0xF0	; 240
    72a4:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    72a6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    72a8:	10 a2       	std	Z+32, r1	; 0x20
    72aa:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    72ac:	10 a6       	std	Z+40, r1	; 0x28
    72ae:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    72b0:	12 a6       	std	Z+42, r1	; 0x2a
    72b2:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    72b4:	14 a6       	std	Z+44, r1	; 0x2c
    72b6:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    72b8:	16 a6       	std	Z+46, r1	; 0x2e
    72ba:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    72bc:	16 a2       	std	Z+38, r1	; 0x26
    72be:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    72c0:	81 81       	ldd	r24, Z+1	; 0x01
    72c2:	88 7f       	andi	r24, 0xF8	; 248
    72c4:	68 2b       	or	r22, r24
    72c6:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    72c8:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    72ca:	17 82       	std	Z+7, r1	; 0x07
    72cc:	08 95       	ret

000072ce <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    72ce:	e0 e0       	ldi	r30, 0x00	; 0
    72d0:	f8 e0       	ldi	r31, 0x08	; 8
    72d2:	66 a3       	std	Z+38, r22	; 0x26
    72d4:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    72d6:	20 81       	ld	r18, Z
    72d8:	20 7f       	andi	r18, 0xF0	; 240
    72da:	dc 01       	movw	r26, r24
    72dc:	12 96       	adiw	r26, 0x02	; 2
    72de:	9c 91       	ld	r25, X
    72e0:	82 2f       	mov	r24, r18
    72e2:	89 2b       	or	r24, r25
    72e4:	80 83       	st	Z, r24
    72e6:	08 95       	ret

000072e8 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    72e8:	e0 e0       	ldi	r30, 0x00	; 0
    72ea:	f8 e0       	ldi	r31, 0x08	; 8
    72ec:	80 81       	ld	r24, Z
    72ee:	80 7f       	andi	r24, 0xF0	; 240
    72f0:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    72f2:	10 a2       	std	Z+32, r1	; 0x20
    72f4:	11 a2       	std	Z+33, r1	; 0x21
    72f6:	08 95       	ret

000072f8 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    72f8:	e0 e0       	ldi	r30, 0x00	; 0
    72fa:	f8 e0       	ldi	r31, 0x08	; 8
    72fc:	81 81       	ldd	r24, Z+1	; 0x01
    72fe:	8f 70       	andi	r24, 0x0F	; 15
    7300:	68 2b       	or	r22, r24
    7302:	61 83       	std	Z+1, r22	; 0x01
    7304:	08 95       	ret

00007306 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    7306:	e0 e0       	ldi	r30, 0x00	; 0
    7308:	f8 e0       	ldi	r31, 0x08	; 8
    730a:	81 81       	ldd	r24, Z+1	; 0x01
    730c:	60 95       	com	r22
    730e:	68 23       	and	r22, r24
    7310:	61 83       	std	Z+1, r22	; 0x01
    7312:	08 95       	ret

00007314 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    7314:	60 93 26 08 	sts	0x0826, r22	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    7318:	70 93 27 08 	sts	0x0827, r23	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    731c:	08 95       	ret

0000731e <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    731e:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    7322:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    7326:	08 95       	ret

00007328 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    7328:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    732c:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    7330:	08 95       	ret

00007332 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    7332:	60 93 2c 08 	sts	0x082C, r22	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
    7336:	70 93 2d 08 	sts	0x082D, r23	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
    733a:	08 95       	ret

0000733c <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    733c:	60 93 2e 08 	sts	0x082E, r22	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
    7340:	70 93 2f 08 	sts	0x082F, r23	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
    7344:	08 95       	ret

00007346 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7346:	61 15       	cp	r22, r1
    7348:	71 05       	cpc	r23, r1
    734a:	29 f0       	breq	.+10     	; 0x7356 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    734c:	e0 e0       	ldi	r30, 0x00	; 0
    734e:	f8 e0       	ldi	r31, 0x08	; 8
    7350:	86 81       	ldd	r24, Z+6	; 0x06
    7352:	28 2b       	or	r18, r24
    7354:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    7356:	60 93 e2 22 	sts	0x22E2, r22	; 0x8022e2 <InterruptFuncTable+0x1c>
    735a:	70 93 e3 22 	sts	0x22E3, r23	; 0x8022e3 <InterruptFuncTable+0x1d>
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    735e:	40 93 d8 23 	sts	0x23D8, r20	; 0x8023d8 <InterruptSenderTable+0x1c>
    7362:	50 93 d9 23 	sts	0x23D9, r21	; 0x8023d9 <InterruptSenderTable+0x1d>
    7366:	08 95       	ret

00007368 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7368:	61 15       	cp	r22, r1
    736a:	71 05       	cpc	r23, r1
    736c:	29 f0       	breq	.+10     	; 0x7378 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    736e:	e0 e0       	ldi	r30, 0x00	; 0
    7370:	f8 e0       	ldi	r31, 0x08	; 8
    7372:	86 81       	ldd	r24, Z+6	; 0x06
    7374:	28 2b       	or	r18, r24
    7376:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    7378:	60 93 e4 22 	sts	0x22E4, r22	; 0x8022e4 <InterruptFuncTable+0x1e>
    737c:	70 93 e5 22 	sts	0x22E5, r23	; 0x8022e5 <InterruptFuncTable+0x1f>
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    7380:	40 93 da 23 	sts	0x23DA, r20	; 0x8023da <InterruptSenderTable+0x1e>
    7384:	50 93 db 23 	sts	0x23DB, r21	; 0x8023db <InterruptSenderTable+0x1f>
    7388:	08 95       	ret

0000738a <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    738a:	61 15       	cp	r22, r1
    738c:	71 05       	cpc	r23, r1
    738e:	29 f0       	breq	.+10     	; 0x739a <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    7390:	e0 e0       	ldi	r30, 0x00	; 0
    7392:	f8 e0       	ldi	r31, 0x08	; 8
    7394:	87 81       	ldd	r24, Z+7	; 0x07
    7396:	28 2b       	or	r18, r24
    7398:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    739a:	60 93 e6 22 	sts	0x22E6, r22	; 0x8022e6 <InterruptFuncTable+0x20>
    739e:	70 93 e7 22 	sts	0x22E7, r23	; 0x8022e7 <InterruptFuncTable+0x21>
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    73a2:	40 93 dc 23 	sts	0x23DC, r20	; 0x8023dc <InterruptSenderTable+0x20>
    73a6:	50 93 dd 23 	sts	0x23DD, r21	; 0x8023dd <InterruptSenderTable+0x21>
    73aa:	08 95       	ret

000073ac <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    73ac:	61 15       	cp	r22, r1
    73ae:	71 05       	cpc	r23, r1
    73b0:	29 f0       	breq	.+10     	; 0x73bc <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    73b2:	e0 e0       	ldi	r30, 0x00	; 0
    73b4:	f8 e0       	ldi	r31, 0x08	; 8
    73b6:	87 81       	ldd	r24, Z+7	; 0x07
    73b8:	28 2b       	or	r18, r24
    73ba:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    73bc:	60 93 e8 22 	sts	0x22E8, r22	; 0x8022e8 <InterruptFuncTable+0x22>
    73c0:	70 93 e9 22 	sts	0x22E9, r23	; 0x8022e9 <InterruptFuncTable+0x23>
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    73c4:	40 93 de 23 	sts	0x23DE, r20	; 0x8023de <InterruptSenderTable+0x22>
    73c8:	50 93 df 23 	sts	0x23DF, r21	; 0x8023df <InterruptSenderTable+0x23>
    73cc:	08 95       	ret

000073ce <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    73ce:	61 15       	cp	r22, r1
    73d0:	71 05       	cpc	r23, r1
    73d2:	29 f0       	breq	.+10     	; 0x73de <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    73d4:	e0 e0       	ldi	r30, 0x00	; 0
    73d6:	f8 e0       	ldi	r31, 0x08	; 8
    73d8:	87 81       	ldd	r24, Z+7	; 0x07
    73da:	28 2b       	or	r18, r24
    73dc:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    73de:	60 93 ea 22 	sts	0x22EA, r22	; 0x8022ea <InterruptFuncTable+0x24>
    73e2:	70 93 eb 22 	sts	0x22EB, r23	; 0x8022eb <InterruptFuncTable+0x25>
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    73e6:	40 93 e0 23 	sts	0x23E0, r20	; 0x8023e0 <InterruptSenderTable+0x24>
    73ea:	50 93 e1 23 	sts	0x23E1, r21	; 0x8023e1 <InterruptSenderTable+0x25>
    73ee:	08 95       	ret

000073f0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    73f0:	61 15       	cp	r22, r1
    73f2:	71 05       	cpc	r23, r1
    73f4:	29 f0       	breq	.+10     	; 0x7400 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    73f6:	e0 e0       	ldi	r30, 0x00	; 0
    73f8:	f8 e0       	ldi	r31, 0x08	; 8
    73fa:	87 81       	ldd	r24, Z+7	; 0x07
    73fc:	28 2b       	or	r18, r24
    73fe:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    7400:	60 93 ec 22 	sts	0x22EC, r22	; 0x8022ec <InterruptFuncTable+0x26>
    7404:	70 93 ed 22 	sts	0x22ED, r23	; 0x8022ed <InterruptFuncTable+0x27>
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    7408:	40 93 e2 23 	sts	0x23E2, r20	; 0x8023e2 <InterruptSenderTable+0x26>
    740c:	50 93 e3 23 	sts	0x23E3, r21	; 0x8023e3 <InterruptSenderTable+0x27>
    7410:	08 95       	ret

00007412 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    7412:	cf 93       	push	r28
    7414:	df 93       	push	r29
    7416:	ec 01       	movw	r28, r24
    7418:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN6CTimerC1Ev>
    741c:	8c e1       	ldi	r24, 0x1C	; 28
    741e:	92 e2       	ldi	r25, 0x22	; 34
    7420:	88 83       	st	Y, r24
    7422:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    7424:	df 91       	pop	r29
    7426:	cf 91       	pop	r28
    7428:	08 95       	ret

0000742a <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    742a:	2c e1       	ldi	r18, 0x1C	; 28
    742c:	32 e2       	ldi	r19, 0x22	; 34
    742e:	fc 01       	movw	r30, r24
    7430:	20 83       	st	Z, r18
    7432:	31 83       	std	Z+1, r19	; 0x01
    7434:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN6CTimerD1Ev>
    7438:	08 95       	ret

0000743a <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    743a:	fc 01       	movw	r30, r24
    743c:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    743e:	e0 e4       	ldi	r30, 0x40	; 64
    7440:	f8 e0       	ldi	r31, 0x08	; 8
    7442:	80 81       	ld	r24, Z
    7444:	80 7f       	andi	r24, 0xF0	; 240
    7446:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7448:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    744a:	10 a2       	std	Z+32, r1	; 0x20
    744c:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    744e:	10 a6       	std	Z+40, r1	; 0x28
    7450:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    7452:	12 a6       	std	Z+42, r1	; 0x2a
    7454:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    7456:	16 a2       	std	Z+38, r1	; 0x26
    7458:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    745a:	81 81       	ldd	r24, Z+1	; 0x01
    745c:	88 7f       	andi	r24, 0xF8	; 248
    745e:	68 2b       	or	r22, r24
    7460:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7462:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7464:	17 82       	std	Z+7, r1	; 0x07
    7466:	08 95       	ret

00007468 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    7468:	e0 e4       	ldi	r30, 0x40	; 64
    746a:	f8 e0       	ldi	r31, 0x08	; 8
    746c:	66 a3       	std	Z+38, r22	; 0x26
    746e:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    7470:	20 81       	ld	r18, Z
    7472:	20 7f       	andi	r18, 0xF0	; 240
    7474:	dc 01       	movw	r26, r24
    7476:	12 96       	adiw	r26, 0x02	; 2
    7478:	9c 91       	ld	r25, X
    747a:	82 2f       	mov	r24, r18
    747c:	89 2b       	or	r24, r25
    747e:	80 83       	st	Z, r24
    7480:	08 95       	ret

00007482 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7482:	e0 e4       	ldi	r30, 0x40	; 64
    7484:	f8 e0       	ldi	r31, 0x08	; 8
    7486:	80 81       	ld	r24, Z
    7488:	80 7f       	andi	r24, 0xF0	; 240
    748a:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    748c:	10 a2       	std	Z+32, r1	; 0x20
    748e:	11 a2       	std	Z+33, r1	; 0x21
    7490:	08 95       	ret

00007492 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    7492:	e0 e4       	ldi	r30, 0x40	; 64
    7494:	f8 e0       	ldi	r31, 0x08	; 8
    7496:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7498:	80 81       	ld	r24, Z
    749a:	80 7f       	andi	r24, 0xF0	; 240
    749c:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    749e:	10 a2       	std	Z+32, r1	; 0x20
    74a0:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    74a2:	90 83       	st	Z, r25
    74a4:	08 95       	ret

000074a6 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    74a6:	e0 e4       	ldi	r30, 0x40	; 64
    74a8:	f8 e0       	ldi	r31, 0x08	; 8
    74aa:	81 81       	ldd	r24, Z+1	; 0x01
    74ac:	8f 70       	andi	r24, 0x0F	; 15
    74ae:	68 2b       	or	r22, r24
    74b0:	61 83       	std	Z+1, r22	; 0x01
    74b2:	08 95       	ret

000074b4 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    74b4:	e0 e4       	ldi	r30, 0x40	; 64
    74b6:	f8 e0       	ldi	r31, 0x08	; 8
    74b8:	81 81       	ldd	r24, Z+1	; 0x01
    74ba:	60 95       	com	r22
    74bc:	68 23       	and	r22, r24
    74be:	61 83       	std	Z+1, r22	; 0x01
    74c0:	08 95       	ret

000074c2 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    74c2:	60 93 66 08 	sts	0x0866, r22	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    74c6:	70 93 67 08 	sts	0x0867, r23	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    74ca:	08 95       	ret

000074cc <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    74cc:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    74d0:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    74d4:	08 95       	ret

000074d6 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    74d6:	60 93 6a 08 	sts	0x086A, r22	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    74da:	70 93 6b 08 	sts	0x086B, r23	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    74de:	08 95       	ret

000074e0 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    74e0:	61 15       	cp	r22, r1
    74e2:	71 05       	cpc	r23, r1
    74e4:	31 f0       	breq	.+12     	; 0x74f2 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    74e6:	e0 e4       	ldi	r30, 0x40	; 64
    74e8:	f8 e0       	ldi	r31, 0x08	; 8
    74ea:	86 81       	ldd	r24, Z+6	; 0x06
    74ec:	83 70       	andi	r24, 0x03	; 3
    74ee:	28 2b       	or	r18, r24
    74f0:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    74f2:	60 93 ee 22 	sts	0x22EE, r22	; 0x8022ee <InterruptFuncTable+0x28>
    74f6:	70 93 ef 22 	sts	0x22EF, r23	; 0x8022ef <InterruptFuncTable+0x29>
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    74fa:	40 93 e4 23 	sts	0x23E4, r20	; 0x8023e4 <InterruptSenderTable+0x28>
    74fe:	50 93 e5 23 	sts	0x23E5, r21	; 0x8023e5 <InterruptSenderTable+0x29>
    7502:	08 95       	ret

00007504 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7504:	61 15       	cp	r22, r1
    7506:	71 05       	cpc	r23, r1
    7508:	31 f0       	breq	.+12     	; 0x7516 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    750a:	e0 e4       	ldi	r30, 0x40	; 64
    750c:	f8 e0       	ldi	r31, 0x08	; 8
    750e:	86 81       	ldd	r24, Z+6	; 0x06
    7510:	8c 70       	andi	r24, 0x0C	; 12
    7512:	28 2b       	or	r18, r24
    7514:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    7516:	60 93 f0 22 	sts	0x22F0, r22	; 0x8022f0 <InterruptFuncTable+0x2a>
    751a:	70 93 f1 22 	sts	0x22F1, r23	; 0x8022f1 <InterruptFuncTable+0x2b>
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    751e:	40 93 e6 23 	sts	0x23E6, r20	; 0x8023e6 <InterruptSenderTable+0x2a>
    7522:	50 93 e7 23 	sts	0x23E7, r21	; 0x8023e7 <InterruptSenderTable+0x2b>
    7526:	08 95       	ret

00007528 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7528:	61 15       	cp	r22, r1
    752a:	71 05       	cpc	r23, r1
    752c:	31 f0       	breq	.+12     	; 0x753a <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    752e:	e0 e4       	ldi	r30, 0x40	; 64
    7530:	f8 e0       	ldi	r31, 0x08	; 8
    7532:	87 81       	ldd	r24, Z+7	; 0x07
    7534:	83 70       	andi	r24, 0x03	; 3
    7536:	28 2b       	or	r18, r24
    7538:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    753a:	60 93 f2 22 	sts	0x22F2, r22	; 0x8022f2 <InterruptFuncTable+0x2c>
    753e:	70 93 f3 22 	sts	0x22F3, r23	; 0x8022f3 <InterruptFuncTable+0x2d>
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    7542:	40 93 e8 23 	sts	0x23E8, r20	; 0x8023e8 <InterruptSenderTable+0x2c>
    7546:	50 93 e9 23 	sts	0x23E9, r21	; 0x8023e9 <InterruptSenderTable+0x2d>
    754a:	08 95       	ret

0000754c <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    754c:	61 15       	cp	r22, r1
    754e:	71 05       	cpc	r23, r1
    7550:	31 f0       	breq	.+12     	; 0x755e <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    7552:	e0 e4       	ldi	r30, 0x40	; 64
    7554:	f8 e0       	ldi	r31, 0x08	; 8
    7556:	87 81       	ldd	r24, Z+7	; 0x07
    7558:	8c 70       	andi	r24, 0x0C	; 12
    755a:	28 2b       	or	r18, r24
    755c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    755e:	60 93 f4 22 	sts	0x22F4, r22	; 0x8022f4 <InterruptFuncTable+0x2e>
    7562:	70 93 f5 22 	sts	0x22F5, r23	; 0x8022f5 <InterruptFuncTable+0x2f>
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    7566:	40 93 ea 23 	sts	0x23EA, r20	; 0x8023ea <InterruptSenderTable+0x2e>
    756a:	50 93 eb 23 	sts	0x23EB, r21	; 0x8023eb <InterruptSenderTable+0x2f>
    756e:	08 95       	ret

00007570 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    7570:	cf 93       	push	r28
    7572:	df 93       	push	r29
    7574:	ec 01       	movw	r28, r24
    7576:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN7CTimer1C1Ev>
    757a:	80 e4       	ldi	r24, 0x40	; 64
    757c:	92 e2       	ldi	r25, 0x22	; 34
    757e:	88 83       	st	Y, r24
    7580:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    7582:	df 91       	pop	r29
    7584:	cf 91       	pop	r28
    7586:	08 95       	ret

00007588 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    7588:	20 e4       	ldi	r18, 0x40	; 64
    758a:	32 e2       	ldi	r19, 0x22	; 34
    758c:	fc 01       	movw	r30, r24
    758e:	20 83       	st	Z, r18
    7590:	31 83       	std	Z+1, r19	; 0x01
    7592:	0e 94 10 1c 	call	0x3820	; 0x3820 <_ZN7CTimer1D1Ev>
    7596:	08 95       	ret

00007598 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    7598:	fc 01       	movw	r30, r24
    759a:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    759c:	e0 e0       	ldi	r30, 0x00	; 0
    759e:	f9 e0       	ldi	r31, 0x09	; 9
    75a0:	80 81       	ld	r24, Z
    75a2:	80 7f       	andi	r24, 0xF0	; 240
    75a4:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    75a6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    75a8:	10 a2       	std	Z+32, r1	; 0x20
    75aa:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    75ac:	10 a6       	std	Z+40, r1	; 0x28
    75ae:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    75b0:	12 a6       	std	Z+42, r1	; 0x2a
    75b2:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    75b4:	14 a6       	std	Z+44, r1	; 0x2c
    75b6:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    75b8:	16 a6       	std	Z+46, r1	; 0x2e
    75ba:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    75bc:	16 a2       	std	Z+38, r1	; 0x26
    75be:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    75c0:	81 81       	ldd	r24, Z+1	; 0x01
    75c2:	88 7f       	andi	r24, 0xF8	; 248
    75c4:	68 2b       	or	r22, r24
    75c6:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    75c8:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    75ca:	17 82       	std	Z+7, r1	; 0x07
    75cc:	08 95       	ret

000075ce <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    75ce:	e0 e0       	ldi	r30, 0x00	; 0
    75d0:	f9 e0       	ldi	r31, 0x09	; 9
    75d2:	66 a3       	std	Z+38, r22	; 0x26
    75d4:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    75d6:	20 81       	ld	r18, Z
    75d8:	20 7f       	andi	r18, 0xF0	; 240
    75da:	dc 01       	movw	r26, r24
    75dc:	12 96       	adiw	r26, 0x02	; 2
    75de:	9c 91       	ld	r25, X
    75e0:	82 2f       	mov	r24, r18
    75e2:	89 2b       	or	r24, r25
    75e4:	80 83       	st	Z, r24
    75e6:	08 95       	ret

000075e8 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    75e8:	e0 e0       	ldi	r30, 0x00	; 0
    75ea:	f9 e0       	ldi	r31, 0x09	; 9
    75ec:	80 81       	ld	r24, Z
    75ee:	80 7f       	andi	r24, 0xF0	; 240
    75f0:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    75f2:	10 a2       	std	Z+32, r1	; 0x20
    75f4:	11 a2       	std	Z+33, r1	; 0x21
    75f6:	08 95       	ret

000075f8 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    75f8:	e0 e0       	ldi	r30, 0x00	; 0
    75fa:	f9 e0       	ldi	r31, 0x09	; 9
    75fc:	81 81       	ldd	r24, Z+1	; 0x01
    75fe:	8f 70       	andi	r24, 0x0F	; 15
    7600:	68 2b       	or	r22, r24
    7602:	61 83       	std	Z+1, r22	; 0x01
    7604:	08 95       	ret

00007606 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    7606:	e0 e0       	ldi	r30, 0x00	; 0
    7608:	f9 e0       	ldi	r31, 0x09	; 9
    760a:	81 81       	ldd	r24, Z+1	; 0x01
    760c:	60 95       	com	r22
    760e:	68 23       	and	r22, r24
    7610:	61 83       	std	Z+1, r22	; 0x01
    7612:	08 95       	ret

00007614 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    7614:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    7618:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    761c:	08 95       	ret

0000761e <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    761e:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    7622:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    7626:	08 95       	ret

00007628 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    7628:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    762c:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    7630:	08 95       	ret

00007632 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    7632:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
    7636:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
    763a:	08 95       	ret

0000763c <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    763c:	60 93 2e 09 	sts	0x092E, r22	; 0x80092e <__TEXT_REGION_LENGTH__+0x70092e>
    7640:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <__TEXT_REGION_LENGTH__+0x70092f>
    7644:	08 95       	ret

00007646 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    7646:	61 15       	cp	r22, r1
    7648:	71 05       	cpc	r23, r1
    764a:	29 f0       	breq	.+10     	; 0x7656 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    764c:	e0 e0       	ldi	r30, 0x00	; 0
    764e:	f9 e0       	ldi	r31, 0x09	; 9
    7650:	86 81       	ldd	r24, Z+6	; 0x06
    7652:	28 2b       	or	r18, r24
    7654:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    7656:	60 93 60 23 	sts	0x2360, r22	; 0x802360 <InterruptFuncTable+0x9a>
    765a:	70 93 61 23 	sts	0x2361, r23	; 0x802361 <InterruptFuncTable+0x9b>
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    765e:	40 93 56 24 	sts	0x2456, r20	; 0x802456 <InterruptSenderTable+0x9a>
    7662:	50 93 57 24 	sts	0x2457, r21	; 0x802457 <InterruptSenderTable+0x9b>
    7666:	08 95       	ret

00007668 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7668:	61 15       	cp	r22, r1
    766a:	71 05       	cpc	r23, r1
    766c:	29 f0       	breq	.+10     	; 0x7678 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    766e:	e0 e0       	ldi	r30, 0x00	; 0
    7670:	f9 e0       	ldi	r31, 0x09	; 9
    7672:	86 81       	ldd	r24, Z+6	; 0x06
    7674:	28 2b       	or	r18, r24
    7676:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    7678:	60 93 62 23 	sts	0x2362, r22	; 0x802362 <InterruptFuncTable+0x9c>
    767c:	70 93 63 23 	sts	0x2363, r23	; 0x802363 <InterruptFuncTable+0x9d>
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    7680:	40 93 58 24 	sts	0x2458, r20	; 0x802458 <InterruptSenderTable+0x9c>
    7684:	50 93 59 24 	sts	0x2459, r21	; 0x802459 <InterruptSenderTable+0x9d>
    7688:	08 95       	ret

0000768a <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    768a:	61 15       	cp	r22, r1
    768c:	71 05       	cpc	r23, r1
    768e:	29 f0       	breq	.+10     	; 0x769a <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    7690:	e0 e0       	ldi	r30, 0x00	; 0
    7692:	f9 e0       	ldi	r31, 0x09	; 9
    7694:	87 81       	ldd	r24, Z+7	; 0x07
    7696:	28 2b       	or	r18, r24
    7698:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    769a:	60 93 64 23 	sts	0x2364, r22	; 0x802364 <InterruptFuncTable+0x9e>
    769e:	70 93 65 23 	sts	0x2365, r23	; 0x802365 <InterruptFuncTable+0x9f>
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    76a2:	40 93 5a 24 	sts	0x245A, r20	; 0x80245a <InterruptSenderTable+0x9e>
    76a6:	50 93 5b 24 	sts	0x245B, r21	; 0x80245b <InterruptSenderTable+0x9f>
    76aa:	08 95       	ret

000076ac <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    76ac:	61 15       	cp	r22, r1
    76ae:	71 05       	cpc	r23, r1
    76b0:	29 f0       	breq	.+10     	; 0x76bc <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    76b2:	e0 e0       	ldi	r30, 0x00	; 0
    76b4:	f9 e0       	ldi	r31, 0x09	; 9
    76b6:	87 81       	ldd	r24, Z+7	; 0x07
    76b8:	28 2b       	or	r18, r24
    76ba:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    76bc:	60 93 66 23 	sts	0x2366, r22	; 0x802366 <InterruptFuncTable+0xa0>
    76c0:	70 93 67 23 	sts	0x2367, r23	; 0x802367 <InterruptFuncTable+0xa1>
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    76c4:	40 93 5c 24 	sts	0x245C, r20	; 0x80245c <InterruptSenderTable+0xa0>
    76c8:	50 93 5d 24 	sts	0x245D, r21	; 0x80245d <InterruptSenderTable+0xa1>
    76cc:	08 95       	ret

000076ce <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    76ce:	61 15       	cp	r22, r1
    76d0:	71 05       	cpc	r23, r1
    76d2:	29 f0       	breq	.+10     	; 0x76de <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    76d4:	e0 e0       	ldi	r30, 0x00	; 0
    76d6:	f9 e0       	ldi	r31, 0x09	; 9
    76d8:	87 81       	ldd	r24, Z+7	; 0x07
    76da:	28 2b       	or	r18, r24
    76dc:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    76de:	60 93 68 23 	sts	0x2368, r22	; 0x802368 <InterruptFuncTable+0xa2>
    76e2:	70 93 69 23 	sts	0x2369, r23	; 0x802369 <InterruptFuncTable+0xa3>
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    76e6:	40 93 5e 24 	sts	0x245E, r20	; 0x80245e <InterruptSenderTable+0xa2>
    76ea:	50 93 5f 24 	sts	0x245F, r21	; 0x80245f <InterruptSenderTable+0xa3>
    76ee:	08 95       	ret

000076f0 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    76f0:	61 15       	cp	r22, r1
    76f2:	71 05       	cpc	r23, r1
    76f4:	29 f0       	breq	.+10     	; 0x7700 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    76f6:	e0 e0       	ldi	r30, 0x00	; 0
    76f8:	f9 e0       	ldi	r31, 0x09	; 9
    76fa:	87 81       	ldd	r24, Z+7	; 0x07
    76fc:	28 2b       	or	r18, r24
    76fe:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    7700:	60 93 6a 23 	sts	0x236A, r22	; 0x80236a <InterruptFuncTable+0xa4>
    7704:	70 93 6b 23 	sts	0x236B, r23	; 0x80236b <InterruptFuncTable+0xa5>
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    7708:	40 93 60 24 	sts	0x2460, r20	; 0x802460 <InterruptSenderTable+0xa4>
    770c:	50 93 61 24 	sts	0x2461, r21	; 0x802461 <InterruptSenderTable+0xa5>
    7710:	08 95       	ret

00007712 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    7712:	cf 93       	push	r28
    7714:	df 93       	push	r29
    7716:	ec 01       	movw	r28, r24
    7718:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN6CTimerC1Ev>
    771c:	8e e5       	ldi	r24, 0x5E	; 94
    771e:	92 e2       	ldi	r25, 0x22	; 34
    7720:	88 83       	st	Y, r24
    7722:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    7724:	df 91       	pop	r29
    7726:	cf 91       	pop	r28
    7728:	08 95       	ret

0000772a <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    772a:	2e e5       	ldi	r18, 0x5E	; 94
    772c:	32 e2       	ldi	r19, 0x22	; 34
    772e:	fc 01       	movw	r30, r24
    7730:	20 83       	st	Z, r18
    7732:	31 83       	std	Z+1, r19	; 0x01
    7734:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN6CTimerD1Ev>
    7738:	08 95       	ret

0000773a <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    773a:	fc 01       	movw	r30, r24
    773c:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    773e:	e0 e4       	ldi	r30, 0x40	; 64
    7740:	f9 e0       	ldi	r31, 0x09	; 9
    7742:	80 81       	ld	r24, Z
    7744:	80 7f       	andi	r24, 0xF0	; 240
    7746:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    7748:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    774a:	10 a2       	std	Z+32, r1	; 0x20
    774c:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    774e:	10 a6       	std	Z+40, r1	; 0x28
    7750:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    7752:	12 a6       	std	Z+42, r1	; 0x2a
    7754:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    7756:	16 a2       	std	Z+38, r1	; 0x26
    7758:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    775a:	81 81       	ldd	r24, Z+1	; 0x01
    775c:	88 7f       	andi	r24, 0xF8	; 248
    775e:	68 2b       	or	r22, r24
    7760:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7762:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    7764:	17 82       	std	Z+7, r1	; 0x07
    7766:	08 95       	ret

00007768 <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    7768:	e0 e4       	ldi	r30, 0x40	; 64
    776a:	f9 e0       	ldi	r31, 0x09	; 9
    776c:	66 a3       	std	Z+38, r22	; 0x26
    776e:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    7770:	20 81       	ld	r18, Z
    7772:	20 7f       	andi	r18, 0xF0	; 240
    7774:	dc 01       	movw	r26, r24
    7776:	12 96       	adiw	r26, 0x02	; 2
    7778:	9c 91       	ld	r25, X
    777a:	82 2f       	mov	r24, r18
    777c:	89 2b       	or	r24, r25
    777e:	80 83       	st	Z, r24
    7780:	08 95       	ret

00007782 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7782:	e0 e4       	ldi	r30, 0x40	; 64
    7784:	f9 e0       	ldi	r31, 0x09	; 9
    7786:	80 81       	ld	r24, Z
    7788:	80 7f       	andi	r24, 0xF0	; 240
    778a:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    778c:	10 a2       	std	Z+32, r1	; 0x20
    778e:	11 a2       	std	Z+33, r1	; 0x21
    7790:	08 95       	ret

00007792 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    7792:	e0 e4       	ldi	r30, 0x40	; 64
    7794:	f9 e0       	ldi	r31, 0x09	; 9
    7796:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7798:	80 81       	ld	r24, Z
    779a:	80 7f       	andi	r24, 0xF0	; 240
    779c:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    779e:	10 a2       	std	Z+32, r1	; 0x20
    77a0:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    77a2:	90 83       	st	Z, r25
    77a4:	08 95       	ret

000077a6 <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    77a6:	e0 e4       	ldi	r30, 0x40	; 64
    77a8:	f9 e0       	ldi	r31, 0x09	; 9
    77aa:	81 81       	ldd	r24, Z+1	; 0x01
    77ac:	8f 70       	andi	r24, 0x0F	; 15
    77ae:	68 2b       	or	r22, r24
    77b0:	61 83       	std	Z+1, r22	; 0x01
    77b2:	08 95       	ret

000077b4 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    77b4:	e0 e4       	ldi	r30, 0x40	; 64
    77b6:	f9 e0       	ldi	r31, 0x09	; 9
    77b8:	81 81       	ldd	r24, Z+1	; 0x01
    77ba:	60 95       	com	r22
    77bc:	68 23       	and	r22, r24
    77be:	61 83       	std	Z+1, r22	; 0x01
    77c0:	08 95       	ret

000077c2 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    77c2:	60 93 66 09 	sts	0x0966, r22	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    77c6:	70 93 67 09 	sts	0x0967, r23	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    77ca:	08 95       	ret

000077cc <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    77cc:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    77d0:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    77d4:	08 95       	ret

000077d6 <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    77d6:	60 93 6a 09 	sts	0x096A, r22	; 0x80096a <__TEXT_REGION_LENGTH__+0x70096a>
    77da:	70 93 6b 09 	sts	0x096B, r23	; 0x80096b <__TEXT_REGION_LENGTH__+0x70096b>
    77de:	08 95       	ret

000077e0 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    77e0:	61 15       	cp	r22, r1
    77e2:	71 05       	cpc	r23, r1
    77e4:	29 f0       	breq	.+10     	; 0x77f0 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    77e6:	e0 e4       	ldi	r30, 0x40	; 64
    77e8:	f9 e0       	ldi	r31, 0x09	; 9
    77ea:	86 81       	ldd	r24, Z+6	; 0x06
    77ec:	28 2b       	or	r18, r24
    77ee:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    77f0:	60 93 6c 23 	sts	0x236C, r22	; 0x80236c <InterruptFuncTable+0xa6>
    77f4:	70 93 6d 23 	sts	0x236D, r23	; 0x80236d <InterruptFuncTable+0xa7>
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    77f8:	40 93 62 24 	sts	0x2462, r20	; 0x802462 <InterruptSenderTable+0xa6>
    77fc:	50 93 63 24 	sts	0x2463, r21	; 0x802463 <InterruptSenderTable+0xa7>
    7800:	08 95       	ret

00007802 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7802:	61 15       	cp	r22, r1
    7804:	71 05       	cpc	r23, r1
    7806:	29 f0       	breq	.+10     	; 0x7812 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    7808:	e0 e4       	ldi	r30, 0x40	; 64
    780a:	f9 e0       	ldi	r31, 0x09	; 9
    780c:	86 81       	ldd	r24, Z+6	; 0x06
    780e:	28 2b       	or	r18, r24
    7810:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    7812:	60 93 6e 23 	sts	0x236E, r22	; 0x80236e <InterruptFuncTable+0xa8>
    7816:	70 93 6f 23 	sts	0x236F, r23	; 0x80236f <InterruptFuncTable+0xa9>
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    781a:	40 93 64 24 	sts	0x2464, r20	; 0x802464 <InterruptSenderTable+0xa8>
    781e:	50 93 65 24 	sts	0x2465, r21	; 0x802465 <InterruptSenderTable+0xa9>
    7822:	08 95       	ret

00007824 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    7824:	61 15       	cp	r22, r1
    7826:	71 05       	cpc	r23, r1
    7828:	29 f0       	breq	.+10     	; 0x7834 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    782a:	e0 e4       	ldi	r30, 0x40	; 64
    782c:	f9 e0       	ldi	r31, 0x09	; 9
    782e:	87 81       	ldd	r24, Z+7	; 0x07
    7830:	28 2b       	or	r18, r24
    7832:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    7834:	60 93 70 23 	sts	0x2370, r22	; 0x802370 <InterruptFuncTable+0xaa>
    7838:	70 93 71 23 	sts	0x2371, r23	; 0x802371 <InterruptFuncTable+0xab>
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    783c:	40 93 66 24 	sts	0x2466, r20	; 0x802466 <InterruptSenderTable+0xaa>
    7840:	50 93 67 24 	sts	0x2467, r21	; 0x802467 <InterruptSenderTable+0xab>
    7844:	08 95       	ret

00007846 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    7846:	61 15       	cp	r22, r1
    7848:	71 05       	cpc	r23, r1
    784a:	29 f0       	breq	.+10     	; 0x7856 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    784c:	e0 e4       	ldi	r30, 0x40	; 64
    784e:	f9 e0       	ldi	r31, 0x09	; 9
    7850:	87 81       	ldd	r24, Z+7	; 0x07
    7852:	28 2b       	or	r18, r24
    7854:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    7856:	60 93 72 23 	sts	0x2372, r22	; 0x802372 <InterruptFuncTable+0xac>
    785a:	70 93 73 23 	sts	0x2373, r23	; 0x802373 <InterruptFuncTable+0xad>
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    785e:	40 93 68 24 	sts	0x2468, r20	; 0x802468 <InterruptSenderTable+0xac>
    7862:	50 93 69 24 	sts	0x2469, r21	; 0x802469 <InterruptSenderTable+0xad>
    7866:	08 95       	ret

00007868 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    7868:	cf 93       	push	r28
    786a:	df 93       	push	r29
    786c:	ec 01       	movw	r28, r24
    786e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN7CTimer1C1Ev>
    7872:	82 e8       	ldi	r24, 0x82	; 130
    7874:	92 e2       	ldi	r25, 0x22	; 34
    7876:	88 83       	st	Y, r24
    7878:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    787a:	df 91       	pop	r29
    787c:	cf 91       	pop	r28
    787e:	08 95       	ret

00007880 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    7880:	22 e8       	ldi	r18, 0x82	; 130
    7882:	32 e2       	ldi	r19, 0x22	; 34
    7884:	fc 01       	movw	r30, r24
    7886:	20 83       	st	Z, r18
    7888:	31 83       	std	Z+1, r19	; 0x01
    788a:	0e 94 10 1c 	call	0x3820	; 0x3820 <_ZN7CTimer1D1Ev>
    788e:	08 95       	ret

00007890 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    7890:	fc 01       	movw	r30, r24
    7892:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    7894:	e0 e0       	ldi	r30, 0x00	; 0
    7896:	fb e0       	ldi	r31, 0x0B	; 11
    7898:	80 81       	ld	r24, Z
    789a:	80 7f       	andi	r24, 0xF0	; 240
    789c:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    789e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    78a0:	10 a2       	std	Z+32, r1	; 0x20
    78a2:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    78a4:	10 a6       	std	Z+40, r1	; 0x28
    78a6:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    78a8:	12 a6       	std	Z+42, r1	; 0x2a
    78aa:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    78ac:	14 a6       	std	Z+44, r1	; 0x2c
    78ae:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    78b0:	16 a6       	std	Z+46, r1	; 0x2e
    78b2:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    78b4:	16 a2       	std	Z+38, r1	; 0x26
    78b6:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    78b8:	81 81       	ldd	r24, Z+1	; 0x01
    78ba:	88 7f       	andi	r24, 0xF8	; 248
    78bc:	68 2b       	or	r22, r24
    78be:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    78c0:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    78c2:	17 82       	std	Z+7, r1	; 0x07
    78c4:	08 95       	ret

000078c6 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    78c6:	e0 e0       	ldi	r30, 0x00	; 0
    78c8:	fb e0       	ldi	r31, 0x0B	; 11
    78ca:	66 a3       	std	Z+38, r22	; 0x26
    78cc:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    78ce:	20 81       	ld	r18, Z
    78d0:	20 7f       	andi	r18, 0xF0	; 240
    78d2:	dc 01       	movw	r26, r24
    78d4:	12 96       	adiw	r26, 0x02	; 2
    78d6:	9c 91       	ld	r25, X
    78d8:	82 2f       	mov	r24, r18
    78da:	89 2b       	or	r24, r25
    78dc:	80 83       	st	Z, r24
    78de:	08 95       	ret

000078e0 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    78e0:	e0 e0       	ldi	r30, 0x00	; 0
    78e2:	fb e0       	ldi	r31, 0x0B	; 11
    78e4:	80 81       	ld	r24, Z
    78e6:	80 7f       	andi	r24, 0xF0	; 240
    78e8:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    78ea:	10 a2       	std	Z+32, r1	; 0x20
    78ec:	11 a2       	std	Z+33, r1	; 0x21
    78ee:	08 95       	ret

000078f0 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    78f0:	e0 e0       	ldi	r30, 0x00	; 0
    78f2:	fb e0       	ldi	r31, 0x0B	; 11
    78f4:	81 81       	ldd	r24, Z+1	; 0x01
    78f6:	68 2b       	or	r22, r24
    78f8:	61 83       	std	Z+1, r22	; 0x01
    78fa:	08 95       	ret

000078fc <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    78fc:	e0 e0       	ldi	r30, 0x00	; 0
    78fe:	fb e0       	ldi	r31, 0x0B	; 11
    7900:	81 81       	ldd	r24, Z+1	; 0x01
    7902:	60 95       	com	r22
    7904:	68 23       	and	r22, r24
    7906:	61 83       	std	Z+1, r22	; 0x01
    7908:	08 95       	ret

0000790a <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    790a:	e0 e0       	ldi	r30, 0x00	; 0
    790c:	fb e0       	ldi	r31, 0x0B	; 11
    790e:	82 81       	ldd	r24, Z+2	; 0x02
    7910:	62 95       	swap	r22
    7912:	6f 70       	andi	r22, 0x0F	; 15
    7914:	68 2b       	or	r22, r24
    7916:	62 83       	std	Z+2, r22	; 0x02
    7918:	08 95       	ret

0000791a <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    791a:	e0 e0       	ldi	r30, 0x00	; 0
    791c:	fb e0       	ldi	r31, 0x0B	; 11
    791e:	82 81       	ldd	r24, Z+2	; 0x02
    7920:	62 95       	swap	r22
    7922:	6f 70       	andi	r22, 0x0F	; 15
    7924:	60 95       	com	r22
    7926:	68 23       	and	r22, r24
    7928:	62 83       	std	Z+2, r22	; 0x02
    792a:	08 95       	ret

0000792c <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PERBUF = value;
    792c:	60 93 36 0b 	sts	0x0B36, r22	; 0x800b36 <__TEXT_REGION_LENGTH__+0x700b36>
    7930:	70 93 37 0b 	sts	0x0B37, r23	; 0x800b37 <__TEXT_REGION_LENGTH__+0x700b37>
    7934:	08 95       	ret

00007936 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    7936:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
    793a:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
    793e:	08 95       	ret

00007940 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    7940:	60 93 2a 0b 	sts	0x0B2A, r22	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
    7944:	70 93 2b 0b 	sts	0x0B2B, r23	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
    7948:	08 95       	ret

0000794a <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    794a:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
    794e:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
    7952:	08 95       	ret

00007954 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    7954:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
    7958:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
    795c:	08 95       	ret

0000795e <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    795e:	61 15       	cp	r22, r1
    7960:	71 05       	cpc	r23, r1
    7962:	29 f0       	breq	.+10     	; 0x796e <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    7964:	e0 e0       	ldi	r30, 0x00	; 0
    7966:	fb e0       	ldi	r31, 0x0B	; 11
    7968:	86 81       	ldd	r24, Z+6	; 0x06
    796a:	28 2b       	or	r18, r24
    796c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    796e:	60 93 9e 23 	sts	0x239E, r22	; 0x80239e <InterruptFuncTable+0xd8>
    7972:	70 93 9f 23 	sts	0x239F, r23	; 0x80239f <InterruptFuncTable+0xd9>
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    7976:	40 93 94 24 	sts	0x2494, r20	; 0x802494 <InterruptSenderTable+0xd8>
    797a:	50 93 95 24 	sts	0x2495, r21	; 0x802495 <InterruptSenderTable+0xd9>
    797e:	08 95       	ret

00007980 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    7980:	61 15       	cp	r22, r1
    7982:	71 05       	cpc	r23, r1
    7984:	29 f0       	breq	.+10     	; 0x7990 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    7986:	e0 e0       	ldi	r30, 0x00	; 0
    7988:	fb e0       	ldi	r31, 0x0B	; 11
    798a:	86 81       	ldd	r24, Z+6	; 0x06
    798c:	28 2b       	or	r18, r24
    798e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    7990:	60 93 a0 23 	sts	0x23A0, r22	; 0x8023a0 <InterruptFuncTable+0xda>
    7994:	70 93 a1 23 	sts	0x23A1, r23	; 0x8023a1 <InterruptFuncTable+0xdb>
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    7998:	40 93 96 24 	sts	0x2496, r20	; 0x802496 <InterruptSenderTable+0xda>
    799c:	50 93 97 24 	sts	0x2497, r21	; 0x802497 <InterruptSenderTable+0xdb>
    79a0:	08 95       	ret

000079a2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    79a2:	61 15       	cp	r22, r1
    79a4:	71 05       	cpc	r23, r1
    79a6:	29 f0       	breq	.+10     	; 0x79b2 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    79a8:	e0 e0       	ldi	r30, 0x00	; 0
    79aa:	fb e0       	ldi	r31, 0x0B	; 11
    79ac:	87 81       	ldd	r24, Z+7	; 0x07
    79ae:	28 2b       	or	r18, r24
    79b0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    79b2:	60 93 a2 23 	sts	0x23A2, r22	; 0x8023a2 <InterruptFuncTable+0xdc>
    79b6:	70 93 a3 23 	sts	0x23A3, r23	; 0x8023a3 <InterruptFuncTable+0xdd>
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    79ba:	40 93 98 24 	sts	0x2498, r20	; 0x802498 <InterruptSenderTable+0xdc>
    79be:	50 93 99 24 	sts	0x2499, r21	; 0x802499 <InterruptSenderTable+0xdd>
    79c2:	08 95       	ret

000079c4 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    79c4:	61 15       	cp	r22, r1
    79c6:	71 05       	cpc	r23, r1
    79c8:	29 f0       	breq	.+10     	; 0x79d4 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    79ca:	e0 e0       	ldi	r30, 0x00	; 0
    79cc:	fb e0       	ldi	r31, 0x0B	; 11
    79ce:	87 81       	ldd	r24, Z+7	; 0x07
    79d0:	28 2b       	or	r18, r24
    79d2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    79d4:	60 93 a4 23 	sts	0x23A4, r22	; 0x8023a4 <InterruptFuncTable+0xde>
    79d8:	70 93 a5 23 	sts	0x23A5, r23	; 0x8023a5 <InterruptFuncTable+0xdf>
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    79dc:	40 93 9a 24 	sts	0x249A, r20	; 0x80249a <InterruptSenderTable+0xde>
    79e0:	50 93 9b 24 	sts	0x249B, r21	; 0x80249b <InterruptSenderTable+0xdf>
    79e4:	08 95       	ret

000079e6 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    79e6:	61 15       	cp	r22, r1
    79e8:	71 05       	cpc	r23, r1
    79ea:	29 f0       	breq	.+10     	; 0x79f6 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    79ec:	e0 e0       	ldi	r30, 0x00	; 0
    79ee:	fb e0       	ldi	r31, 0x0B	; 11
    79f0:	87 81       	ldd	r24, Z+7	; 0x07
    79f2:	28 2b       	or	r18, r24
    79f4:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    79f6:	60 93 a6 23 	sts	0x23A6, r22	; 0x8023a6 <InterruptFuncTable+0xe0>
    79fa:	70 93 a7 23 	sts	0x23A7, r23	; 0x8023a7 <InterruptFuncTable+0xe1>
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    79fe:	40 93 9c 24 	sts	0x249C, r20	; 0x80249c <InterruptSenderTable+0xe0>
    7a02:	50 93 9d 24 	sts	0x249D, r21	; 0x80249d <InterruptSenderTable+0xe1>
    7a06:	08 95       	ret

00007a08 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    7a08:	61 15       	cp	r22, r1
    7a0a:	71 05       	cpc	r23, r1
    7a0c:	29 f0       	breq	.+10     	; 0x7a18 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    7a0e:	e0 e0       	ldi	r30, 0x00	; 0
    7a10:	fb e0       	ldi	r31, 0x0B	; 11
    7a12:	87 81       	ldd	r24, Z+7	; 0x07
    7a14:	28 2b       	or	r18, r24
    7a16:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    7a18:	60 93 a8 23 	sts	0x23A8, r22	; 0x8023a8 <InterruptFuncTable+0xe2>
    7a1c:	70 93 a9 23 	sts	0x23A9, r23	; 0x8023a9 <InterruptFuncTable+0xe3>
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    7a20:	40 93 9e 24 	sts	0x249E, r20	; 0x80249e <InterruptSenderTable+0xe2>
    7a24:	50 93 9f 24 	sts	0x249F, r21	; 0x80249f <InterruptSenderTable+0xe3>
    7a28:	08 95       	ret

00007a2a <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    7a2a:	cf 93       	push	r28
    7a2c:	df 93       	push	r29
    7a2e:	ec 01       	movw	r28, r24
    7a30:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN6CTimerC1Ev>
    7a34:	80 ea       	ldi	r24, 0xA0	; 160
    7a36:	92 e2       	ldi	r25, 0x22	; 34
    7a38:	88 83       	st	Y, r24
    7a3a:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    7a3c:	df 91       	pop	r29
    7a3e:	cf 91       	pop	r28
    7a40:	08 95       	ret

00007a42 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    7a42:	20 ea       	ldi	r18, 0xA0	; 160
    7a44:	32 e2       	ldi	r19, 0x22	; 34
    7a46:	fc 01       	movw	r30, r24
    7a48:	20 83       	st	Z, r18
    7a4a:	31 83       	std	Z+1, r19	; 0x01
    7a4c:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN6CTimerD1Ev>
    7a50:	08 95       	ret

00007a52 <__fixsfsi>:
    7a52:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <__fixunssfsi>
    7a56:	68 94       	set
    7a58:	b1 11       	cpse	r27, r1
    7a5a:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <__fp_szero>
    7a5e:	08 95       	ret

00007a60 <__fixunssfsi>:
    7a60:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <__fp_splitA>
    7a64:	88 f0       	brcs	.+34     	; 0x7a88 <__fixunssfsi+0x28>
    7a66:	9f 57       	subi	r25, 0x7F	; 127
    7a68:	98 f0       	brcs	.+38     	; 0x7a90 <__fixunssfsi+0x30>
    7a6a:	b9 2f       	mov	r27, r25
    7a6c:	99 27       	eor	r25, r25
    7a6e:	b7 51       	subi	r27, 0x17	; 23
    7a70:	b0 f0       	brcs	.+44     	; 0x7a9e <__fixunssfsi+0x3e>
    7a72:	e1 f0       	breq	.+56     	; 0x7aac <__fixunssfsi+0x4c>
    7a74:	66 0f       	add	r22, r22
    7a76:	77 1f       	adc	r23, r23
    7a78:	88 1f       	adc	r24, r24
    7a7a:	99 1f       	adc	r25, r25
    7a7c:	1a f0       	brmi	.+6      	; 0x7a84 <__fixunssfsi+0x24>
    7a7e:	ba 95       	dec	r27
    7a80:	c9 f7       	brne	.-14     	; 0x7a74 <__fixunssfsi+0x14>
    7a82:	14 c0       	rjmp	.+40     	; 0x7aac <__fixunssfsi+0x4c>
    7a84:	b1 30       	cpi	r27, 0x01	; 1
    7a86:	91 f0       	breq	.+36     	; 0x7aac <__fixunssfsi+0x4c>
    7a88:	0e 94 be 3d 	call	0x7b7c	; 0x7b7c <__fp_zero>
    7a8c:	b1 e0       	ldi	r27, 0x01	; 1
    7a8e:	08 95       	ret
    7a90:	0c 94 be 3d 	jmp	0x7b7c	; 0x7b7c <__fp_zero>
    7a94:	67 2f       	mov	r22, r23
    7a96:	78 2f       	mov	r23, r24
    7a98:	88 27       	eor	r24, r24
    7a9a:	b8 5f       	subi	r27, 0xF8	; 248
    7a9c:	39 f0       	breq	.+14     	; 0x7aac <__fixunssfsi+0x4c>
    7a9e:	b9 3f       	cpi	r27, 0xF9	; 249
    7aa0:	cc f3       	brlt	.-14     	; 0x7a94 <__fixunssfsi+0x34>
    7aa2:	86 95       	lsr	r24
    7aa4:	77 95       	ror	r23
    7aa6:	67 95       	ror	r22
    7aa8:	b3 95       	inc	r27
    7aaa:	d9 f7       	brne	.-10     	; 0x7aa2 <__fixunssfsi+0x42>
    7aac:	3e f4       	brtc	.+14     	; 0x7abc <__fixunssfsi+0x5c>
    7aae:	90 95       	com	r25
    7ab0:	80 95       	com	r24
    7ab2:	70 95       	com	r23
    7ab4:	61 95       	neg	r22
    7ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    7aba:	9f 4f       	sbci	r25, 0xFF	; 255
    7abc:	08 95       	ret

00007abe <__floatunsisf>:
    7abe:	e8 94       	clt
    7ac0:	09 c0       	rjmp	.+18     	; 0x7ad4 <__floatsisf+0x12>

00007ac2 <__floatsisf>:
    7ac2:	97 fb       	bst	r25, 7
    7ac4:	3e f4       	brtc	.+14     	; 0x7ad4 <__floatsisf+0x12>
    7ac6:	90 95       	com	r25
    7ac8:	80 95       	com	r24
    7aca:	70 95       	com	r23
    7acc:	61 95       	neg	r22
    7ace:	7f 4f       	sbci	r23, 0xFF	; 255
    7ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    7ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad4:	99 23       	and	r25, r25
    7ad6:	a9 f0       	breq	.+42     	; 0x7b02 <__floatsisf+0x40>
    7ad8:	f9 2f       	mov	r31, r25
    7ada:	96 e9       	ldi	r25, 0x96	; 150
    7adc:	bb 27       	eor	r27, r27
    7ade:	93 95       	inc	r25
    7ae0:	f6 95       	lsr	r31
    7ae2:	87 95       	ror	r24
    7ae4:	77 95       	ror	r23
    7ae6:	67 95       	ror	r22
    7ae8:	b7 95       	ror	r27
    7aea:	f1 11       	cpse	r31, r1
    7aec:	f8 cf       	rjmp	.-16     	; 0x7ade <__floatsisf+0x1c>
    7aee:	fa f4       	brpl	.+62     	; 0x7b2e <__floatsisf+0x6c>
    7af0:	bb 0f       	add	r27, r27
    7af2:	11 f4       	brne	.+4      	; 0x7af8 <__floatsisf+0x36>
    7af4:	60 ff       	sbrs	r22, 0
    7af6:	1b c0       	rjmp	.+54     	; 0x7b2e <__floatsisf+0x6c>
    7af8:	6f 5f       	subi	r22, 0xFF	; 255
    7afa:	7f 4f       	sbci	r23, 0xFF	; 255
    7afc:	8f 4f       	sbci	r24, 0xFF	; 255
    7afe:	9f 4f       	sbci	r25, 0xFF	; 255
    7b00:	16 c0       	rjmp	.+44     	; 0x7b2e <__floatsisf+0x6c>
    7b02:	88 23       	and	r24, r24
    7b04:	11 f0       	breq	.+4      	; 0x7b0a <__floatsisf+0x48>
    7b06:	96 e9       	ldi	r25, 0x96	; 150
    7b08:	11 c0       	rjmp	.+34     	; 0x7b2c <__floatsisf+0x6a>
    7b0a:	77 23       	and	r23, r23
    7b0c:	21 f0       	breq	.+8      	; 0x7b16 <__floatsisf+0x54>
    7b0e:	9e e8       	ldi	r25, 0x8E	; 142
    7b10:	87 2f       	mov	r24, r23
    7b12:	76 2f       	mov	r23, r22
    7b14:	05 c0       	rjmp	.+10     	; 0x7b20 <__floatsisf+0x5e>
    7b16:	66 23       	and	r22, r22
    7b18:	71 f0       	breq	.+28     	; 0x7b36 <__floatsisf+0x74>
    7b1a:	96 e8       	ldi	r25, 0x86	; 134
    7b1c:	86 2f       	mov	r24, r22
    7b1e:	70 e0       	ldi	r23, 0x00	; 0
    7b20:	60 e0       	ldi	r22, 0x00	; 0
    7b22:	2a f0       	brmi	.+10     	; 0x7b2e <__floatsisf+0x6c>
    7b24:	9a 95       	dec	r25
    7b26:	66 0f       	add	r22, r22
    7b28:	77 1f       	adc	r23, r23
    7b2a:	88 1f       	adc	r24, r24
    7b2c:	da f7       	brpl	.-10     	; 0x7b24 <__floatsisf+0x62>
    7b2e:	88 0f       	add	r24, r24
    7b30:	96 95       	lsr	r25
    7b32:	87 95       	ror	r24
    7b34:	97 f9       	bld	r25, 7
    7b36:	08 95       	ret

00007b38 <__fp_split3>:
    7b38:	57 fd       	sbrc	r21, 7
    7b3a:	90 58       	subi	r25, 0x80	; 128
    7b3c:	44 0f       	add	r20, r20
    7b3e:	55 1f       	adc	r21, r21
    7b40:	59 f0       	breq	.+22     	; 0x7b58 <__fp_splitA+0x10>
    7b42:	5f 3f       	cpi	r21, 0xFF	; 255
    7b44:	71 f0       	breq	.+28     	; 0x7b62 <__fp_splitA+0x1a>
    7b46:	47 95       	ror	r20

00007b48 <__fp_splitA>:
    7b48:	88 0f       	add	r24, r24
    7b4a:	97 fb       	bst	r25, 7
    7b4c:	99 1f       	adc	r25, r25
    7b4e:	61 f0       	breq	.+24     	; 0x7b68 <__fp_splitA+0x20>
    7b50:	9f 3f       	cpi	r25, 0xFF	; 255
    7b52:	79 f0       	breq	.+30     	; 0x7b72 <__fp_splitA+0x2a>
    7b54:	87 95       	ror	r24
    7b56:	08 95       	ret
    7b58:	12 16       	cp	r1, r18
    7b5a:	13 06       	cpc	r1, r19
    7b5c:	14 06       	cpc	r1, r20
    7b5e:	55 1f       	adc	r21, r21
    7b60:	f2 cf       	rjmp	.-28     	; 0x7b46 <__fp_split3+0xe>
    7b62:	46 95       	lsr	r20
    7b64:	f1 df       	rcall	.-30     	; 0x7b48 <__fp_splitA>
    7b66:	08 c0       	rjmp	.+16     	; 0x7b78 <__fp_splitA+0x30>
    7b68:	16 16       	cp	r1, r22
    7b6a:	17 06       	cpc	r1, r23
    7b6c:	18 06       	cpc	r1, r24
    7b6e:	99 1f       	adc	r25, r25
    7b70:	f1 cf       	rjmp	.-30     	; 0x7b54 <__fp_splitA+0xc>
    7b72:	86 95       	lsr	r24
    7b74:	71 05       	cpc	r23, r1
    7b76:	61 05       	cpc	r22, r1
    7b78:	08 94       	sec
    7b7a:	08 95       	ret

00007b7c <__fp_zero>:
    7b7c:	e8 94       	clt

00007b7e <__fp_szero>:
    7b7e:	bb 27       	eor	r27, r27
    7b80:	66 27       	eor	r22, r22
    7b82:	77 27       	eor	r23, r23
    7b84:	cb 01       	movw	r24, r22
    7b86:	97 f9       	bld	r25, 7
    7b88:	08 95       	ret

00007b8a <__mulsf3>:
    7b8a:	0e 94 d8 3d 	call	0x7bb0	; 0x7bb0 <__mulsf3x>
    7b8e:	0c 94 49 3e 	jmp	0x7c92	; 0x7c92 <__fp_round>
    7b92:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <__fp_pscA>
    7b96:	38 f0       	brcs	.+14     	; 0x7ba6 <__mulsf3+0x1c>
    7b98:	0e 94 42 3e 	call	0x7c84	; 0x7c84 <__fp_pscB>
    7b9c:	20 f0       	brcs	.+8      	; 0x7ba6 <__mulsf3+0x1c>
    7b9e:	95 23       	and	r25, r21
    7ba0:	11 f0       	breq	.+4      	; 0x7ba6 <__mulsf3+0x1c>
    7ba2:	0c 94 32 3e 	jmp	0x7c64	; 0x7c64 <__fp_inf>
    7ba6:	0c 94 38 3e 	jmp	0x7c70	; 0x7c70 <__fp_nan>
    7baa:	11 24       	eor	r1, r1
    7bac:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <__fp_szero>

00007bb0 <__mulsf3x>:
    7bb0:	0e 94 9c 3d 	call	0x7b38	; 0x7b38 <__fp_split3>
    7bb4:	70 f3       	brcs	.-36     	; 0x7b92 <__mulsf3+0x8>

00007bb6 <__mulsf3_pse>:
    7bb6:	95 9f       	mul	r25, r21
    7bb8:	c1 f3       	breq	.-16     	; 0x7baa <__mulsf3+0x20>
    7bba:	95 0f       	add	r25, r21
    7bbc:	50 e0       	ldi	r21, 0x00	; 0
    7bbe:	55 1f       	adc	r21, r21
    7bc0:	62 9f       	mul	r22, r18
    7bc2:	f0 01       	movw	r30, r0
    7bc4:	72 9f       	mul	r23, r18
    7bc6:	bb 27       	eor	r27, r27
    7bc8:	f0 0d       	add	r31, r0
    7bca:	b1 1d       	adc	r27, r1
    7bcc:	63 9f       	mul	r22, r19
    7bce:	aa 27       	eor	r26, r26
    7bd0:	f0 0d       	add	r31, r0
    7bd2:	b1 1d       	adc	r27, r1
    7bd4:	aa 1f       	adc	r26, r26
    7bd6:	64 9f       	mul	r22, r20
    7bd8:	66 27       	eor	r22, r22
    7bda:	b0 0d       	add	r27, r0
    7bdc:	a1 1d       	adc	r26, r1
    7bde:	66 1f       	adc	r22, r22
    7be0:	82 9f       	mul	r24, r18
    7be2:	22 27       	eor	r18, r18
    7be4:	b0 0d       	add	r27, r0
    7be6:	a1 1d       	adc	r26, r1
    7be8:	62 1f       	adc	r22, r18
    7bea:	73 9f       	mul	r23, r19
    7bec:	b0 0d       	add	r27, r0
    7bee:	a1 1d       	adc	r26, r1
    7bf0:	62 1f       	adc	r22, r18
    7bf2:	83 9f       	mul	r24, r19
    7bf4:	a0 0d       	add	r26, r0
    7bf6:	61 1d       	adc	r22, r1
    7bf8:	22 1f       	adc	r18, r18
    7bfa:	74 9f       	mul	r23, r20
    7bfc:	33 27       	eor	r19, r19
    7bfe:	a0 0d       	add	r26, r0
    7c00:	61 1d       	adc	r22, r1
    7c02:	23 1f       	adc	r18, r19
    7c04:	84 9f       	mul	r24, r20
    7c06:	60 0d       	add	r22, r0
    7c08:	21 1d       	adc	r18, r1
    7c0a:	82 2f       	mov	r24, r18
    7c0c:	76 2f       	mov	r23, r22
    7c0e:	6a 2f       	mov	r22, r26
    7c10:	11 24       	eor	r1, r1
    7c12:	9f 57       	subi	r25, 0x7F	; 127
    7c14:	50 40       	sbci	r21, 0x00	; 0
    7c16:	9a f0       	brmi	.+38     	; 0x7c3e <__mulsf3_pse+0x88>
    7c18:	f1 f0       	breq	.+60     	; 0x7c56 <__mulsf3_pse+0xa0>
    7c1a:	88 23       	and	r24, r24
    7c1c:	4a f0       	brmi	.+18     	; 0x7c30 <__mulsf3_pse+0x7a>
    7c1e:	ee 0f       	add	r30, r30
    7c20:	ff 1f       	adc	r31, r31
    7c22:	bb 1f       	adc	r27, r27
    7c24:	66 1f       	adc	r22, r22
    7c26:	77 1f       	adc	r23, r23
    7c28:	88 1f       	adc	r24, r24
    7c2a:	91 50       	subi	r25, 0x01	; 1
    7c2c:	50 40       	sbci	r21, 0x00	; 0
    7c2e:	a9 f7       	brne	.-22     	; 0x7c1a <__mulsf3_pse+0x64>
    7c30:	9e 3f       	cpi	r25, 0xFE	; 254
    7c32:	51 05       	cpc	r21, r1
    7c34:	80 f0       	brcs	.+32     	; 0x7c56 <__mulsf3_pse+0xa0>
    7c36:	0c 94 32 3e 	jmp	0x7c64	; 0x7c64 <__fp_inf>
    7c3a:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <__fp_szero>
    7c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    7c40:	e4 f3       	brlt	.-8      	; 0x7c3a <__mulsf3_pse+0x84>
    7c42:	98 3e       	cpi	r25, 0xE8	; 232
    7c44:	d4 f3       	brlt	.-12     	; 0x7c3a <__mulsf3_pse+0x84>
    7c46:	86 95       	lsr	r24
    7c48:	77 95       	ror	r23
    7c4a:	67 95       	ror	r22
    7c4c:	b7 95       	ror	r27
    7c4e:	f7 95       	ror	r31
    7c50:	e7 95       	ror	r30
    7c52:	9f 5f       	subi	r25, 0xFF	; 255
    7c54:	c1 f7       	brne	.-16     	; 0x7c46 <__mulsf3_pse+0x90>
    7c56:	fe 2b       	or	r31, r30
    7c58:	88 0f       	add	r24, r24
    7c5a:	91 1d       	adc	r25, r1
    7c5c:	96 95       	lsr	r25
    7c5e:	87 95       	ror	r24
    7c60:	97 f9       	bld	r25, 7
    7c62:	08 95       	ret

00007c64 <__fp_inf>:
    7c64:	97 f9       	bld	r25, 7
    7c66:	9f 67       	ori	r25, 0x7F	; 127
    7c68:	80 e8       	ldi	r24, 0x80	; 128
    7c6a:	70 e0       	ldi	r23, 0x00	; 0
    7c6c:	60 e0       	ldi	r22, 0x00	; 0
    7c6e:	08 95       	ret

00007c70 <__fp_nan>:
    7c70:	9f ef       	ldi	r25, 0xFF	; 255
    7c72:	80 ec       	ldi	r24, 0xC0	; 192
    7c74:	08 95       	ret

00007c76 <__fp_pscA>:
    7c76:	00 24       	eor	r0, r0
    7c78:	0a 94       	dec	r0
    7c7a:	16 16       	cp	r1, r22
    7c7c:	17 06       	cpc	r1, r23
    7c7e:	18 06       	cpc	r1, r24
    7c80:	09 06       	cpc	r0, r25
    7c82:	08 95       	ret

00007c84 <__fp_pscB>:
    7c84:	00 24       	eor	r0, r0
    7c86:	0a 94       	dec	r0
    7c88:	12 16       	cp	r1, r18
    7c8a:	13 06       	cpc	r1, r19
    7c8c:	14 06       	cpc	r1, r20
    7c8e:	05 06       	cpc	r0, r21
    7c90:	08 95       	ret

00007c92 <__fp_round>:
    7c92:	09 2e       	mov	r0, r25
    7c94:	03 94       	inc	r0
    7c96:	00 0c       	add	r0, r0
    7c98:	11 f4       	brne	.+4      	; 0x7c9e <__fp_round+0xc>
    7c9a:	88 23       	and	r24, r24
    7c9c:	52 f0       	brmi	.+20     	; 0x7cb2 <__fp_round+0x20>
    7c9e:	bb 0f       	add	r27, r27
    7ca0:	40 f4       	brcc	.+16     	; 0x7cb2 <__fp_round+0x20>
    7ca2:	bf 2b       	or	r27, r31
    7ca4:	11 f4       	brne	.+4      	; 0x7caa <__fp_round+0x18>
    7ca6:	60 ff       	sbrs	r22, 0
    7ca8:	04 c0       	rjmp	.+8      	; 0x7cb2 <__fp_round+0x20>
    7caa:	6f 5f       	subi	r22, 0xFF	; 255
    7cac:	7f 4f       	sbci	r23, 0xFF	; 255
    7cae:	8f 4f       	sbci	r24, 0xFF	; 255
    7cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb2:	08 95       	ret

00007cb4 <__udivmodhi4>:
    7cb4:	aa 1b       	sub	r26, r26
    7cb6:	bb 1b       	sub	r27, r27
    7cb8:	51 e1       	ldi	r21, 0x11	; 17
    7cba:	07 c0       	rjmp	.+14     	; 0x7cca <__udivmodhi4_ep>

00007cbc <__udivmodhi4_loop>:
    7cbc:	aa 1f       	adc	r26, r26
    7cbe:	bb 1f       	adc	r27, r27
    7cc0:	a6 17       	cp	r26, r22
    7cc2:	b7 07       	cpc	r27, r23
    7cc4:	10 f0       	brcs	.+4      	; 0x7cca <__udivmodhi4_ep>
    7cc6:	a6 1b       	sub	r26, r22
    7cc8:	b7 0b       	sbc	r27, r23

00007cca <__udivmodhi4_ep>:
    7cca:	88 1f       	adc	r24, r24
    7ccc:	99 1f       	adc	r25, r25
    7cce:	5a 95       	dec	r21
    7cd0:	a9 f7       	brne	.-22     	; 0x7cbc <__udivmodhi4_loop>
    7cd2:	80 95       	com	r24
    7cd4:	90 95       	com	r25
    7cd6:	bc 01       	movw	r22, r24
    7cd8:	cd 01       	movw	r24, r26
    7cda:	08 95       	ret

00007cdc <__divmodhi4>:
    7cdc:	97 fb       	bst	r25, 7
    7cde:	07 2e       	mov	r0, r23
    7ce0:	16 f4       	brtc	.+4      	; 0x7ce6 <__divmodhi4+0xa>
    7ce2:	00 94       	com	r0
    7ce4:	07 d0       	rcall	.+14     	; 0x7cf4 <__divmodhi4_neg1>
    7ce6:	77 fd       	sbrc	r23, 7
    7ce8:	09 d0       	rcall	.+18     	; 0x7cfc <__divmodhi4_neg2>
    7cea:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__udivmodhi4>
    7cee:	07 fc       	sbrc	r0, 7
    7cf0:	05 d0       	rcall	.+10     	; 0x7cfc <__divmodhi4_neg2>
    7cf2:	3e f4       	brtc	.+14     	; 0x7d02 <__divmodhi4_exit>

00007cf4 <__divmodhi4_neg1>:
    7cf4:	90 95       	com	r25
    7cf6:	81 95       	neg	r24
    7cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    7cfa:	08 95       	ret

00007cfc <__divmodhi4_neg2>:
    7cfc:	70 95       	com	r23
    7cfe:	61 95       	neg	r22
    7d00:	7f 4f       	sbci	r23, 0xFF	; 255

00007d02 <__divmodhi4_exit>:
    7d02:	08 95       	ret

00007d04 <__udivmodsi4>:
    7d04:	a1 e2       	ldi	r26, 0x21	; 33
    7d06:	1a 2e       	mov	r1, r26
    7d08:	aa 1b       	sub	r26, r26
    7d0a:	bb 1b       	sub	r27, r27
    7d0c:	fd 01       	movw	r30, r26
    7d0e:	0d c0       	rjmp	.+26     	; 0x7d2a <__udivmodsi4_ep>

00007d10 <__udivmodsi4_loop>:
    7d10:	aa 1f       	adc	r26, r26
    7d12:	bb 1f       	adc	r27, r27
    7d14:	ee 1f       	adc	r30, r30
    7d16:	ff 1f       	adc	r31, r31
    7d18:	a2 17       	cp	r26, r18
    7d1a:	b3 07       	cpc	r27, r19
    7d1c:	e4 07       	cpc	r30, r20
    7d1e:	f5 07       	cpc	r31, r21
    7d20:	20 f0       	brcs	.+8      	; 0x7d2a <__udivmodsi4_ep>
    7d22:	a2 1b       	sub	r26, r18
    7d24:	b3 0b       	sbc	r27, r19
    7d26:	e4 0b       	sbc	r30, r20
    7d28:	f5 0b       	sbc	r31, r21

00007d2a <__udivmodsi4_ep>:
    7d2a:	66 1f       	adc	r22, r22
    7d2c:	77 1f       	adc	r23, r23
    7d2e:	88 1f       	adc	r24, r24
    7d30:	99 1f       	adc	r25, r25
    7d32:	1a 94       	dec	r1
    7d34:	69 f7       	brne	.-38     	; 0x7d10 <__udivmodsi4_loop>
    7d36:	60 95       	com	r22
    7d38:	70 95       	com	r23
    7d3a:	80 95       	com	r24
    7d3c:	90 95       	com	r25
    7d3e:	9b 01       	movw	r18, r22
    7d40:	ac 01       	movw	r20, r24
    7d42:	bd 01       	movw	r22, r26
    7d44:	cf 01       	movw	r24, r30
    7d46:	08 95       	ret

00007d48 <__divmodsi4>:
    7d48:	05 2e       	mov	r0, r21
    7d4a:	97 fb       	bst	r25, 7
    7d4c:	1e f4       	brtc	.+6      	; 0x7d54 <__divmodsi4+0xc>
    7d4e:	00 94       	com	r0
    7d50:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <__negsi2>
    7d54:	57 fd       	sbrc	r21, 7
    7d56:	07 d0       	rcall	.+14     	; 0x7d66 <__divmodsi4_neg2>
    7d58:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <__udivmodsi4>
    7d5c:	07 fc       	sbrc	r0, 7
    7d5e:	03 d0       	rcall	.+6      	; 0x7d66 <__divmodsi4_neg2>
    7d60:	4e f4       	brtc	.+18     	; 0x7d74 <__divmodsi4_exit>
    7d62:	0c 94 bb 3e 	jmp	0x7d76	; 0x7d76 <__negsi2>

00007d66 <__divmodsi4_neg2>:
    7d66:	50 95       	com	r21
    7d68:	40 95       	com	r20
    7d6a:	30 95       	com	r19
    7d6c:	21 95       	neg	r18
    7d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    7d70:	4f 4f       	sbci	r20, 0xFF	; 255
    7d72:	5f 4f       	sbci	r21, 0xFF	; 255

00007d74 <__divmodsi4_exit>:
    7d74:	08 95       	ret

00007d76 <__negsi2>:
    7d76:	90 95       	com	r25
    7d78:	80 95       	com	r24
    7d7a:	70 95       	com	r23
    7d7c:	61 95       	neg	r22
    7d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d80:	8f 4f       	sbci	r24, 0xFF	; 255
    7d82:	9f 4f       	sbci	r25, 0xFF	; 255
    7d84:	08 95       	ret

00007d86 <__tablejump2__>:
    7d86:	ee 0f       	add	r30, r30
    7d88:	ff 1f       	adc	r31, r31
    7d8a:	88 1f       	adc	r24, r24
    7d8c:	8b bf       	out	0x3b, r24	; 59
    7d8e:	07 90       	elpm	r0, Z+
    7d90:	f6 91       	elpm	r31, Z
    7d92:	e0 2d       	mov	r30, r0
    7d94:	19 94       	eijmp

00007d96 <__umulhisi3>:
    7d96:	a2 9f       	mul	r26, r18
    7d98:	b0 01       	movw	r22, r0
    7d9a:	b3 9f       	mul	r27, r19
    7d9c:	c0 01       	movw	r24, r0
    7d9e:	a3 9f       	mul	r26, r19
    7da0:	70 0d       	add	r23, r0
    7da2:	81 1d       	adc	r24, r1
    7da4:	11 24       	eor	r1, r1
    7da6:	91 1d       	adc	r25, r1
    7da8:	b2 9f       	mul	r27, r18
    7daa:	70 0d       	add	r23, r0
    7dac:	81 1d       	adc	r24, r1
    7dae:	11 24       	eor	r1, r1
    7db0:	91 1d       	adc	r25, r1
    7db2:	08 95       	ret

00007db4 <__muluhisi3>:
    7db4:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <__umulhisi3>
    7db8:	a5 9f       	mul	r26, r21
    7dba:	90 0d       	add	r25, r0
    7dbc:	b4 9f       	mul	r27, r20
    7dbe:	90 0d       	add	r25, r0
    7dc0:	a4 9f       	mul	r26, r20
    7dc2:	80 0d       	add	r24, r0
    7dc4:	91 1d       	adc	r25, r1
    7dc6:	11 24       	eor	r1, r1
    7dc8:	08 95       	ret

00007dca <malloc>:
    7dca:	cf 93       	push	r28
    7dcc:	df 93       	push	r29
    7dce:	82 30       	cpi	r24, 0x02	; 2
    7dd0:	91 05       	cpc	r25, r1
    7dd2:	10 f4       	brcc	.+4      	; 0x7dd8 <malloc+0xe>
    7dd4:	82 e0       	ldi	r24, 0x02	; 2
    7dd6:	90 e0       	ldi	r25, 0x00	; 0
    7dd8:	e0 91 29 26 	lds	r30, 0x2629	; 0x802629 <__flp>
    7ddc:	f0 91 2a 26 	lds	r31, 0x262A	; 0x80262a <__flp+0x1>
    7de0:	20 e0       	ldi	r18, 0x00	; 0
    7de2:	30 e0       	ldi	r19, 0x00	; 0
    7de4:	c0 e0       	ldi	r28, 0x00	; 0
    7de6:	d0 e0       	ldi	r29, 0x00	; 0
    7de8:	30 97       	sbiw	r30, 0x00	; 0
    7dea:	11 f1       	breq	.+68     	; 0x7e30 <malloc+0x66>
    7dec:	40 81       	ld	r20, Z
    7dee:	51 81       	ldd	r21, Z+1	; 0x01
    7df0:	48 17       	cp	r20, r24
    7df2:	59 07       	cpc	r21, r25
    7df4:	c0 f0       	brcs	.+48     	; 0x7e26 <malloc+0x5c>
    7df6:	48 17       	cp	r20, r24
    7df8:	59 07       	cpc	r21, r25
    7dfa:	61 f4       	brne	.+24     	; 0x7e14 <malloc+0x4a>
    7dfc:	82 81       	ldd	r24, Z+2	; 0x02
    7dfe:	93 81       	ldd	r25, Z+3	; 0x03
    7e00:	20 97       	sbiw	r28, 0x00	; 0
    7e02:	19 f0       	breq	.+6      	; 0x7e0a <malloc+0x40>
    7e04:	8a 83       	std	Y+2, r24	; 0x02
    7e06:	9b 83       	std	Y+3, r25	; 0x03
    7e08:	2b c0       	rjmp	.+86     	; 0x7e60 <malloc+0x96>
    7e0a:	80 93 29 26 	sts	0x2629, r24	; 0x802629 <__flp>
    7e0e:	90 93 2a 26 	sts	0x262A, r25	; 0x80262a <__flp+0x1>
    7e12:	26 c0       	rjmp	.+76     	; 0x7e60 <malloc+0x96>
    7e14:	21 15       	cp	r18, r1
    7e16:	31 05       	cpc	r19, r1
    7e18:	19 f0       	breq	.+6      	; 0x7e20 <malloc+0x56>
    7e1a:	42 17       	cp	r20, r18
    7e1c:	53 07       	cpc	r21, r19
    7e1e:	18 f4       	brcc	.+6      	; 0x7e26 <malloc+0x5c>
    7e20:	9a 01       	movw	r18, r20
    7e22:	be 01       	movw	r22, r28
    7e24:	df 01       	movw	r26, r30
    7e26:	ef 01       	movw	r28, r30
    7e28:	02 80       	ldd	r0, Z+2	; 0x02
    7e2a:	f3 81       	ldd	r31, Z+3	; 0x03
    7e2c:	e0 2d       	mov	r30, r0
    7e2e:	dc cf       	rjmp	.-72     	; 0x7de8 <malloc+0x1e>
    7e30:	21 15       	cp	r18, r1
    7e32:	31 05       	cpc	r19, r1
    7e34:	09 f1       	breq	.+66     	; 0x7e78 <malloc+0xae>
    7e36:	28 1b       	sub	r18, r24
    7e38:	39 0b       	sbc	r19, r25
    7e3a:	24 30       	cpi	r18, 0x04	; 4
    7e3c:	31 05       	cpc	r19, r1
    7e3e:	90 f4       	brcc	.+36     	; 0x7e64 <malloc+0x9a>
    7e40:	12 96       	adiw	r26, 0x02	; 2
    7e42:	8d 91       	ld	r24, X+
    7e44:	9c 91       	ld	r25, X
    7e46:	13 97       	sbiw	r26, 0x03	; 3
    7e48:	61 15       	cp	r22, r1
    7e4a:	71 05       	cpc	r23, r1
    7e4c:	21 f0       	breq	.+8      	; 0x7e56 <malloc+0x8c>
    7e4e:	fb 01       	movw	r30, r22
    7e50:	82 83       	std	Z+2, r24	; 0x02
    7e52:	93 83       	std	Z+3, r25	; 0x03
    7e54:	04 c0       	rjmp	.+8      	; 0x7e5e <malloc+0x94>
    7e56:	80 93 29 26 	sts	0x2629, r24	; 0x802629 <__flp>
    7e5a:	90 93 2a 26 	sts	0x262A, r25	; 0x80262a <__flp+0x1>
    7e5e:	fd 01       	movw	r30, r26
    7e60:	32 96       	adiw	r30, 0x02	; 2
    7e62:	44 c0       	rjmp	.+136    	; 0x7eec <malloc+0x122>
    7e64:	fd 01       	movw	r30, r26
    7e66:	e2 0f       	add	r30, r18
    7e68:	f3 1f       	adc	r31, r19
    7e6a:	81 93       	st	Z+, r24
    7e6c:	91 93       	st	Z+, r25
    7e6e:	22 50       	subi	r18, 0x02	; 2
    7e70:	31 09       	sbc	r19, r1
    7e72:	2d 93       	st	X+, r18
    7e74:	3c 93       	st	X, r19
    7e76:	3a c0       	rjmp	.+116    	; 0x7eec <malloc+0x122>
    7e78:	20 91 27 26 	lds	r18, 0x2627	; 0x802627 <__brkval>
    7e7c:	30 91 28 26 	lds	r19, 0x2628	; 0x802628 <__brkval+0x1>
    7e80:	23 2b       	or	r18, r19
    7e82:	41 f4       	brne	.+16     	; 0x7e94 <malloc+0xca>
    7e84:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    7e88:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    7e8c:	20 93 27 26 	sts	0x2627, r18	; 0x802627 <__brkval>
    7e90:	30 93 28 26 	sts	0x2628, r19	; 0x802628 <__brkval+0x1>
    7e94:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    7e98:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    7e9c:	21 15       	cp	r18, r1
    7e9e:	31 05       	cpc	r19, r1
    7ea0:	41 f4       	brne	.+16     	; 0x7eb2 <malloc+0xe8>
    7ea2:	2d b7       	in	r18, 0x3d	; 61
    7ea4:	3e b7       	in	r19, 0x3e	; 62
    7ea6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    7eaa:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    7eae:	24 1b       	sub	r18, r20
    7eb0:	35 0b       	sbc	r19, r21
    7eb2:	e0 91 27 26 	lds	r30, 0x2627	; 0x802627 <__brkval>
    7eb6:	f0 91 28 26 	lds	r31, 0x2628	; 0x802628 <__brkval+0x1>
    7eba:	e2 17       	cp	r30, r18
    7ebc:	f3 07       	cpc	r31, r19
    7ebe:	a0 f4       	brcc	.+40     	; 0x7ee8 <malloc+0x11e>
    7ec0:	2e 1b       	sub	r18, r30
    7ec2:	3f 0b       	sbc	r19, r31
    7ec4:	28 17       	cp	r18, r24
    7ec6:	39 07       	cpc	r19, r25
    7ec8:	78 f0       	brcs	.+30     	; 0x7ee8 <malloc+0x11e>
    7eca:	ac 01       	movw	r20, r24
    7ecc:	4e 5f       	subi	r20, 0xFE	; 254
    7ece:	5f 4f       	sbci	r21, 0xFF	; 255
    7ed0:	24 17       	cp	r18, r20
    7ed2:	35 07       	cpc	r19, r21
    7ed4:	48 f0       	brcs	.+18     	; 0x7ee8 <malloc+0x11e>
    7ed6:	4e 0f       	add	r20, r30
    7ed8:	5f 1f       	adc	r21, r31
    7eda:	40 93 27 26 	sts	0x2627, r20	; 0x802627 <__brkval>
    7ede:	50 93 28 26 	sts	0x2628, r21	; 0x802628 <__brkval+0x1>
    7ee2:	81 93       	st	Z+, r24
    7ee4:	91 93       	st	Z+, r25
    7ee6:	02 c0       	rjmp	.+4      	; 0x7eec <malloc+0x122>
    7ee8:	e0 e0       	ldi	r30, 0x00	; 0
    7eea:	f0 e0       	ldi	r31, 0x00	; 0
    7eec:	cf 01       	movw	r24, r30
    7eee:	df 91       	pop	r29
    7ef0:	cf 91       	pop	r28
    7ef2:	08 95       	ret

00007ef4 <free>:
    7ef4:	0f 93       	push	r16
    7ef6:	1f 93       	push	r17
    7ef8:	cf 93       	push	r28
    7efa:	df 93       	push	r29
    7efc:	00 97       	sbiw	r24, 0x00	; 0
    7efe:	09 f4       	brne	.+2      	; 0x7f02 <free+0xe>
    7f00:	8c c0       	rjmp	.+280    	; 0x801a <free+0x126>
    7f02:	fc 01       	movw	r30, r24
    7f04:	32 97       	sbiw	r30, 0x02	; 2
    7f06:	12 82       	std	Z+2, r1	; 0x02
    7f08:	13 82       	std	Z+3, r1	; 0x03
    7f0a:	00 91 29 26 	lds	r16, 0x2629	; 0x802629 <__flp>
    7f0e:	10 91 2a 26 	lds	r17, 0x262A	; 0x80262a <__flp+0x1>
    7f12:	01 15       	cp	r16, r1
    7f14:	11 05       	cpc	r17, r1
    7f16:	81 f4       	brne	.+32     	; 0x7f38 <free+0x44>
    7f18:	20 81       	ld	r18, Z
    7f1a:	31 81       	ldd	r19, Z+1	; 0x01
    7f1c:	82 0f       	add	r24, r18
    7f1e:	93 1f       	adc	r25, r19
    7f20:	20 91 27 26 	lds	r18, 0x2627	; 0x802627 <__brkval>
    7f24:	30 91 28 26 	lds	r19, 0x2628	; 0x802628 <__brkval+0x1>
    7f28:	28 17       	cp	r18, r24
    7f2a:	39 07       	cpc	r19, r25
    7f2c:	79 f5       	brne	.+94     	; 0x7f8c <free+0x98>
    7f2e:	e0 93 27 26 	sts	0x2627, r30	; 0x802627 <__brkval>
    7f32:	f0 93 28 26 	sts	0x2628, r31	; 0x802628 <__brkval+0x1>
    7f36:	71 c0       	rjmp	.+226    	; 0x801a <free+0x126>
    7f38:	d8 01       	movw	r26, r16
    7f3a:	40 e0       	ldi	r20, 0x00	; 0
    7f3c:	50 e0       	ldi	r21, 0x00	; 0
    7f3e:	ae 17       	cp	r26, r30
    7f40:	bf 07       	cpc	r27, r31
    7f42:	50 f4       	brcc	.+20     	; 0x7f58 <free+0x64>
    7f44:	12 96       	adiw	r26, 0x02	; 2
    7f46:	2d 91       	ld	r18, X+
    7f48:	3c 91       	ld	r19, X
    7f4a:	13 97       	sbiw	r26, 0x03	; 3
    7f4c:	ad 01       	movw	r20, r26
    7f4e:	21 15       	cp	r18, r1
    7f50:	31 05       	cpc	r19, r1
    7f52:	09 f1       	breq	.+66     	; 0x7f96 <free+0xa2>
    7f54:	d9 01       	movw	r26, r18
    7f56:	f3 cf       	rjmp	.-26     	; 0x7f3e <free+0x4a>
    7f58:	9d 01       	movw	r18, r26
    7f5a:	da 01       	movw	r26, r20
    7f5c:	22 83       	std	Z+2, r18	; 0x02
    7f5e:	33 83       	std	Z+3, r19	; 0x03
    7f60:	60 81       	ld	r22, Z
    7f62:	71 81       	ldd	r23, Z+1	; 0x01
    7f64:	86 0f       	add	r24, r22
    7f66:	97 1f       	adc	r25, r23
    7f68:	82 17       	cp	r24, r18
    7f6a:	93 07       	cpc	r25, r19
    7f6c:	69 f4       	brne	.+26     	; 0x7f88 <free+0x94>
    7f6e:	ec 01       	movw	r28, r24
    7f70:	28 81       	ld	r18, Y
    7f72:	39 81       	ldd	r19, Y+1	; 0x01
    7f74:	26 0f       	add	r18, r22
    7f76:	37 1f       	adc	r19, r23
    7f78:	2e 5f       	subi	r18, 0xFE	; 254
    7f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7f7c:	20 83       	st	Z, r18
    7f7e:	31 83       	std	Z+1, r19	; 0x01
    7f80:	8a 81       	ldd	r24, Y+2	; 0x02
    7f82:	9b 81       	ldd	r25, Y+3	; 0x03
    7f84:	82 83       	std	Z+2, r24	; 0x02
    7f86:	93 83       	std	Z+3, r25	; 0x03
    7f88:	45 2b       	or	r20, r21
    7f8a:	29 f4       	brne	.+10     	; 0x7f96 <free+0xa2>
    7f8c:	e0 93 29 26 	sts	0x2629, r30	; 0x802629 <__flp>
    7f90:	f0 93 2a 26 	sts	0x262A, r31	; 0x80262a <__flp+0x1>
    7f94:	42 c0       	rjmp	.+132    	; 0x801a <free+0x126>
    7f96:	12 96       	adiw	r26, 0x02	; 2
    7f98:	ed 93       	st	X+, r30
    7f9a:	fc 93       	st	X, r31
    7f9c:	13 97       	sbiw	r26, 0x03	; 3
    7f9e:	ed 01       	movw	r28, r26
    7fa0:	49 91       	ld	r20, Y+
    7fa2:	59 91       	ld	r21, Y+
    7fa4:	9e 01       	movw	r18, r28
    7fa6:	24 0f       	add	r18, r20
    7fa8:	35 1f       	adc	r19, r21
    7faa:	e2 17       	cp	r30, r18
    7fac:	f3 07       	cpc	r31, r19
    7fae:	71 f4       	brne	.+28     	; 0x7fcc <free+0xd8>
    7fb0:	80 81       	ld	r24, Z
    7fb2:	91 81       	ldd	r25, Z+1	; 0x01
    7fb4:	84 0f       	add	r24, r20
    7fb6:	95 1f       	adc	r25, r21
    7fb8:	02 96       	adiw	r24, 0x02	; 2
    7fba:	8d 93       	st	X+, r24
    7fbc:	9c 93       	st	X, r25
    7fbe:	11 97       	sbiw	r26, 0x01	; 1
    7fc0:	82 81       	ldd	r24, Z+2	; 0x02
    7fc2:	93 81       	ldd	r25, Z+3	; 0x03
    7fc4:	12 96       	adiw	r26, 0x02	; 2
    7fc6:	8d 93       	st	X+, r24
    7fc8:	9c 93       	st	X, r25
    7fca:	13 97       	sbiw	r26, 0x03	; 3
    7fcc:	e0 e0       	ldi	r30, 0x00	; 0
    7fce:	f0 e0       	ldi	r31, 0x00	; 0
    7fd0:	d8 01       	movw	r26, r16
    7fd2:	12 96       	adiw	r26, 0x02	; 2
    7fd4:	8d 91       	ld	r24, X+
    7fd6:	9c 91       	ld	r25, X
    7fd8:	13 97       	sbiw	r26, 0x03	; 3
    7fda:	00 97       	sbiw	r24, 0x00	; 0
    7fdc:	19 f0       	breq	.+6      	; 0x7fe4 <free+0xf0>
    7fde:	f8 01       	movw	r30, r16
    7fe0:	8c 01       	movw	r16, r24
    7fe2:	f6 cf       	rjmp	.-20     	; 0x7fd0 <free+0xdc>
    7fe4:	8d 91       	ld	r24, X+
    7fe6:	9c 91       	ld	r25, X
    7fe8:	98 01       	movw	r18, r16
    7fea:	2e 5f       	subi	r18, 0xFE	; 254
    7fec:	3f 4f       	sbci	r19, 0xFF	; 255
    7fee:	82 0f       	add	r24, r18
    7ff0:	93 1f       	adc	r25, r19
    7ff2:	20 91 27 26 	lds	r18, 0x2627	; 0x802627 <__brkval>
    7ff6:	30 91 28 26 	lds	r19, 0x2628	; 0x802628 <__brkval+0x1>
    7ffa:	28 17       	cp	r18, r24
    7ffc:	39 07       	cpc	r19, r25
    7ffe:	69 f4       	brne	.+26     	; 0x801a <free+0x126>
    8000:	30 97       	sbiw	r30, 0x00	; 0
    8002:	29 f4       	brne	.+10     	; 0x800e <free+0x11a>
    8004:	10 92 29 26 	sts	0x2629, r1	; 0x802629 <__flp>
    8008:	10 92 2a 26 	sts	0x262A, r1	; 0x80262a <__flp+0x1>
    800c:	02 c0       	rjmp	.+4      	; 0x8012 <free+0x11e>
    800e:	12 82       	std	Z+2, r1	; 0x02
    8010:	13 82       	std	Z+3, r1	; 0x03
    8012:	00 93 27 26 	sts	0x2627, r16	; 0x802627 <__brkval>
    8016:	10 93 28 26 	sts	0x2628, r17	; 0x802628 <__brkval+0x1>
    801a:	df 91       	pop	r29
    801c:	cf 91       	pop	r28
    801e:	1f 91       	pop	r17
    8020:	0f 91       	pop	r16
    8022:	08 95       	ret

00008024 <memcpy>:
    8024:	fb 01       	movw	r30, r22
    8026:	dc 01       	movw	r26, r24
    8028:	02 c0       	rjmp	.+4      	; 0x802e <memcpy+0xa>
    802a:	01 90       	ld	r0, Z+
    802c:	0d 92       	st	X+, r0
    802e:	41 50       	subi	r20, 0x01	; 1
    8030:	50 40       	sbci	r21, 0x00	; 0
    8032:	d8 f7       	brcc	.-10     	; 0x802a <memcpy+0x6>
    8034:	08 95       	ret

00008036 <eeprom_read_dword>:
    8036:	0e 94 33 40 	call	0x8066	; 0x8066 <eeprom_mapen>
    803a:	60 81       	ld	r22, Z
    803c:	71 81       	ldd	r23, Z+1	; 0x01
    803e:	82 81       	ldd	r24, Z+2	; 0x02
    8040:	93 81       	ldd	r25, Z+3	; 0x03
    8042:	08 95       	ret

00008044 <eeprom_write_dword>:
    8044:	24 2f       	mov	r18, r20
    8046:	0e 94 40 40 	call	0x8080	; 0x8080 <eeprom_write_r18>
    804a:	25 2f       	mov	r18, r21
    804c:	0e 94 40 40 	call	0x8080	; 0x8080 <eeprom_write_r18>
    8050:	0c 94 2a 40 	jmp	0x8054	; 0x8054 <eeprom_write_word>

00008054 <eeprom_write_word>:
    8054:	0e 94 3f 40 	call	0x807e	; 0x807e <eeprom_write_byte>
    8058:	27 2f       	mov	r18, r23
    805a:	0c 94 40 40 	jmp	0x8080	; 0x8080 <eeprom_write_r18>

0000805e <eeprom_read_byte>:
    805e:	03 d0       	rcall	.+6      	; 0x8066 <eeprom_mapen>
    8060:	80 81       	ld	r24, Z
    8062:	99 27       	eor	r25, r25
    8064:	08 95       	ret

00008066 <eeprom_mapen>:
    8066:	e0 ec       	ldi	r30, 0xC0	; 192
    8068:	f1 e0       	ldi	r31, 0x01	; 1
    806a:	37 85       	ldd	r19, Z+15	; 0x0f
    806c:	37 fd       	sbrc	r19, 7
    806e:	fd cf       	rjmp	.-6      	; 0x806a <eeprom_mapen+0x4>
    8070:	34 85       	ldd	r19, Z+12	; 0x0c
    8072:	38 60       	ori	r19, 0x08	; 8
    8074:	34 87       	std	Z+12, r19	; 0x0c
    8076:	fc 01       	movw	r30, r24
    8078:	e0 50       	subi	r30, 0x00	; 0
    807a:	f0 4f       	sbci	r31, 0xF0	; 240
    807c:	08 95       	ret

0000807e <eeprom_write_byte>:
    807e:	26 2f       	mov	r18, r22

00008080 <eeprom_write_r18>:
    8080:	e0 ec       	ldi	r30, 0xC0	; 192
    8082:	f1 e0       	ldi	r31, 0x01	; 1
    8084:	37 85       	ldd	r19, Z+15	; 0x0f
    8086:	37 fd       	sbrc	r19, 7
    8088:	fd cf       	rjmp	.-6      	; 0x8084 <eeprom_write_r18+0x4>
    808a:	34 85       	ldd	r19, Z+12	; 0x0c
    808c:	37 7f       	andi	r19, 0xF7	; 247
    808e:	34 87       	std	Z+12, r19	; 0x0c
    8090:	37 85       	ldd	r19, Z+15	; 0x0f
    8092:	31 ff       	sbrs	r19, 1
    8094:	09 c0       	rjmp	.+18     	; 0x80a8 <eeprom_write_r18+0x28>
    8096:	36 e3       	ldi	r19, 0x36	; 54
    8098:	32 87       	std	Z+10, r19	; 0x0a
    809a:	38 ed       	ldi	r19, 0xD8	; 216
    809c:	34 bf       	out	0x34, r19	; 52
    809e:	31 e0       	ldi	r19, 0x01	; 1
    80a0:	33 87       	std	Z+11, r19	; 0x0b
    80a2:	37 85       	ldd	r19, Z+15	; 0x0f
    80a4:	37 fd       	sbrc	r19, 7
    80a6:	fd cf       	rjmp	.-6      	; 0x80a2 <eeprom_write_r18+0x22>
    80a8:	33 e3       	ldi	r19, 0x33	; 51
    80aa:	32 87       	std	Z+10, r19	; 0x0a
    80ac:	80 83       	st	Z, r24
    80ae:	91 83       	std	Z+1, r25	; 0x01
    80b0:	12 82       	std	Z+2, r1	; 0x02
    80b2:	24 83       	std	Z+4, r18	; 0x04
    80b4:	25 e3       	ldi	r18, 0x35	; 53
    80b6:	22 87       	std	Z+10, r18	; 0x0a
    80b8:	28 ed       	ldi	r18, 0xD8	; 216
    80ba:	31 e0       	ldi	r19, 0x01	; 1
    80bc:	24 bf       	out	0x34, r18	; 52
    80be:	33 87       	std	Z+11, r19	; 0x0b
    80c0:	01 96       	adiw	r24, 0x01	; 1
    80c2:	08 95       	ret

000080c4 <__do_global_dtors>:
    80c4:	12 e0       	ldi	r17, 0x02	; 2
    80c6:	ce e8       	ldi	r28, 0x8E	; 142
    80c8:	d2 e0       	ldi	r29, 0x02	; 2
    80ca:	00 e0       	ldi	r16, 0x00	; 0
    80cc:	06 c0       	rjmp	.+12     	; 0x80da <__do_global_dtors+0x16>
    80ce:	80 2f       	mov	r24, r16
    80d0:	fe 01       	movw	r30, r28
    80d2:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <__tablejump2__>
    80d6:	21 96       	adiw	r28, 0x01	; 1
    80d8:	01 1d       	adc	r16, r1
    80da:	cf 38       	cpi	r28, 0x8F	; 143
    80dc:	d1 07       	cpc	r29, r17
    80de:	80 e0       	ldi	r24, 0x00	; 0
    80e0:	08 07       	cpc	r16, r24
    80e2:	a9 f7       	brne	.-22     	; 0x80ce <__do_global_dtors+0xa>
    80e4:	f8 94       	cli

000080e6 <__stop_program>:
    80e6:	ff cf       	rjmp	.-2      	; 0x80e6 <__stop_program>
