
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ae  00802000  000068ae  00006942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c1  008022ae  008022ae  00006bf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00006c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018007  00000000  00000000  00007900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000650f  00000000  00000000  0001f907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005dc6  00000000  00000000  00025e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003964  00000000  00000000  0002bbdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000092c1  00000000  00000000  0002f540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a500  00000000  00000000  00038801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b78  00000000  00000000  00042d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__vector_1>
       8:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__vector_2>
       c:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__vector_3>
      10:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__vector_4>
      14:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__vector_5>
      18:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__vector_6>
      1c:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__vector_7>
      20:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__vector_8>
      24:	0c 94 df 12 	jmp	0x25be	; 0x25be <__vector_9>
      28:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__vector_10>
      2c:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__vector_11>
      30:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__vector_12>
      34:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_13>
      38:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__vector_14>
      3c:	0c 94 05 14 	jmp	0x280a	; 0x280a <__vector_15>
      40:	0c 94 36 14 	jmp	0x286c	; 0x286c <__vector_16>
      44:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__vector_17>
      48:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__vector_18>
      4c:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__vector_19>
      50:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__vector_20>
      54:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__vector_21>
      58:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__vector_22>
      5c:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__vector_23>
      60:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__vector_24>
      64:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__vector_25>
      68:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__vector_26>
      6c:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__vector_27>
      70:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__vector_28>
      74:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__vector_29>
      78:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__vector_30>
      7c:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__vector_31>
      80:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__vector_32>
      84:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__vector_33>
      88:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__vector_34>
      8c:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__vector_35>
      90:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_36>
      94:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__vector_37>
      98:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__vector_38>
      9c:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__vector_39>
      a0:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__vector_40>
      a4:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__vector_41>
      a8:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__vector_42>
      ac:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__vector_43>
      b0:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__vector_44>
      b4:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__vector_45>
      b8:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__vector_46>
      bc:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__vector_47>
      c0:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__vector_48>
      c4:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__vector_49>
      c8:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__vector_50>
      cc:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__vector_51>
      d0:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__vector_52>
      d4:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__vector_53>
      d8:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__vector_54>
      dc:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__vector_55>
      e0:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <__vector_56>
      e4:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__vector_57>
      e8:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__vector_58>
      ec:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__vector_59>
      f0:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__vector_60>
      f4:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__vector_61>
      f8:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__vector_62>
      fc:	0c 94 35 1d 	jmp	0x3a6a	; 0x3a6a <__vector_63>
     100:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__vector_64>
     104:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__vector_65>
     108:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <__vector_66>
     10c:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__vector_67>
     110:	0c 94 2a 1e 	jmp	0x3c54	; 0x3c54 <__vector_68>
     114:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__vector_69>
     118:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__vector_70>
     11c:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__vector_71>
     120:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__vector_72>
     124:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__vector_73>
     128:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__vector_77>
     138:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__vector_78>
     13c:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__vector_79>
     140:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__vector_80>
     144:	0c 94 45 20 	jmp	0x408a	; 0x408a <__vector_81>
     148:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__vector_82>
     14c:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__vector_83>
     150:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__vector_84>
     154:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__vector_85>
     158:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__vector_86>
     15c:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__vector_87>
     160:	0c 94 9c 21 	jmp	0x4338	; 0x4338 <__vector_88>
     164:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__vector_89>
     168:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__vector_90>
     16c:	0c 94 2f 22 	jmp	0x445e	; 0x445e <__vector_91>
     170:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__vector_92>
     174:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <__vector_104>
     1a4:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 24 23 	jmp	0x4648	; 0x4648 <__vector_108>
     1b4:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <__vector_109>
     1b8:	0c 94 86 23 	jmp	0x470c	; 0x470c <__vector_110>
     1bc:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__vector_111>
     1c0:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <__vector_112>
     1c4:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 4a 24 	jmp	0x4894	; 0x4894 <__vector_119>
     1e0:	0c 94 7b 24 	jmp	0x48f6	; 0x48f6 <__vector_120>
     1e4:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7b 04       	cpc	r7, r11
     25e:	81 04       	cpc	r8, r1
     260:	87 04       	cpc	r8, r7
     262:	8d 04       	cpc	r8, r13
     264:	93 04       	cpc	r9, r3
     266:	99 04       	cpc	r9, r9
     268:	9f 04       	cpc	r9, r15
     26a:	a5 04       	cpc	r10, r5
     26c:	1c 05       	cpc	r17, r12
     26e:	b3 04       	cpc	r11, r3
     270:	b9 04       	cpc	r11, r9
     272:	bf 04       	cpc	r11, r15
     274:	c5 04       	cpc	r12, r5
     276:	cb 04       	cpc	r12, r11
     278:	d1 04       	cpc	r13, r1
     27a:	d7 04       	cpc	r13, r7
     27c:	dd 04       	cpc	r13, r13
     27e:	e3 04       	cpc	r14, r3
     280:	47 28       	or	r4, r7
     282:	47 28       	or	r4, r7
     284:	4f 28       	or	r4, r15
     286:	57 28       	or	r5, r7
     288:	5e 28       	or	r5, r14
     28a:	ad 28       	or	r10, r13
     28c:	b4 28       	or	r11, r4
     28e:	e0 28       	or	r14, r0
     290:	e0 28       	or	r14, r0
     292:	df 28       	or	r13, r15
     294:	df 28       	or	r13, r15

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <_GLOBAL__sub_D_dacSPI>
     2a2:	0c 94 1c 2e 	jmp	0x5c38	; 0x5c38 <_ZN8CTimerC15ResetEv>
     2a6:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     2aa:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2ae:	0c 94 e5 2f 	jmp	0x5fca	; 0x5fca <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2b2:	0c 94 c3 2f 	jmp	0x5f86	; 0x5f86 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2b6:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2ba:	0c 94 98 2d 	jmp	0x5b30	; 0x5b30 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2be:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2c2:	0c 94 d6 2e 	jmp	0x5dac	; 0x5dac <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     2c6:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     2ca:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <_ZN10CDGUSUSART14IsTransmittingEv>
     2ce:	0c 94 f6 2e 	jmp	0x5dec	; 0x5dec <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2d2:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2d6:	0c 94 36 30 	jmp	0x606c	; 0x606c <_ZN7CTimerF5StartEj>
     2da:	0c 94 dd 2e 	jmp	0x5dba	; 0x5dba <_ZN7CTimerD9SetPeriodEj>
     2de:	0c 94 ba 2d 	jmp	0x5b74	; 0x5b74 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2e2:	0c 94 83 10 	jmp	0x2106	; 0x2106 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     2e6:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     2ea:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2ee:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     2f2:	0c 94 c6 30 	jmp	0x618c	; 0x618c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2f6:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     2fa:	0c 94 a9 2d 	jmp	0x5b52	; 0x5b52 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2fe:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     302:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     306:	0c 94 58 30 	jmp	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     30a:	0c 94 26 2a 	jmp	0x544c	; 0x544c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     30e:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     312:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     316:	0c 94 4f 28 	jmp	0x509e	; 0x509e <_ZN9CMBSender13OnReceiveByteEh+0x32>
     31a:	0c 94 47 28 	jmp	0x508e	; 0x508e <_ZN9CMBSender13OnReceiveByteEh+0x22>
     31e:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <_ZN7CTimerC8SetCOMPBEj>
     322:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <_ZN7CTimerD8SetCOMPBEj>
     326:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     32a:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <_ZN7CTimerD4StopEv>
     32e:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     332:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     336:	0c 94 9b 27 	jmp	0x4f36	; 0x4f36 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     33a:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     33e:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     342:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     346:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <_ZN7CTimerC8SetCOMPCEj>
     34a:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     34e:	0c 94 d4 2f 	jmp	0x5fa8	; 0x5fa8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     352:	0c 94 07 2e 	jmp	0x5c0e	; 0x5c0e <_ZN8CTimerC15StartEj>
     356:	0c 94 ec 2e 	jmp	0x5dd8	; 0x5dd8 <_ZN7CTimerD8SetCOMPCEj>
     35a:	0c 94 5e 28 	jmp	0x50bc	; 0x50bc <_ZN9CMBSender13OnReceiveByteEh+0x50>
     35e:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     362:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <_ZN10CDGUSUSART11IsDataEmptyEv>
     366:	0c 94 76 06 	jmp	0xcec	; 0xcec <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     36a:	0c 94 87 2a 	jmp	0x550e	; 0x550e <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     36e:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     372:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     376:	0c 94 39 2e 	jmp	0x5c72	; 0x5c72 <_ZN8CTimerC18SetCOMPAEj>
     37a:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     37e:	0c 94 71 2d 	jmp	0x5ae2	; 0x5ae2 <_ZN7CTimerC8SetCOMPDEj>
     382:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <_ZN16CLaserControlApp13OnTimerStaticEPv>
     386:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     38a:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     38e:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     392:	0c 94 a6 2f 	jmp	0x5f4c	; 0x5f4c <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     396:	0c 94 51 30 	jmp	0x60a2	; 0x60a2 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     39a:	0c 94 87 2d 	jmp	0x5b0e	; 0x5b0e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     39e:	0c 94 43 30 	jmp	0x6086	; 0x6086 <_ZN7CTimerF4StopEv>
     3a2:	0c 94 82 30 	jmp	0x6104	; 0x6104 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3a6:	0c 94 4f 2d 	jmp	0x5a9e	; 0x5a9e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     3aa:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     3ae:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     3b2:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3b6:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     3ba:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3be:	0c 94 93 30 	jmp	0x6126	; 0x6126 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3c2:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3c6:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3ca:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     3ce:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3d2:	0c 94 a4 30 	jmp	0x6148	; 0x6148 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3d6:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3da:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     3de:	0c 94 06 27 	jmp	0x4e0c	; 0x4e0c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     3e2:	0c 94 87 2f 	jmp	0x5f0e	; 0x5f0e <_ZN8CTimerD15StartEj>
     3e6:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     3ea:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     3ee:	0c 94 56 2d 	jmp	0x5aac	; 0x5aac <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     3f2:	0c 94 e0 24 	jmp	0x49c0	; 0x49c0 <_GLOBAL__sub_I_dacSPI>
     3f6:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     3fa:	0c 94 e2 2e 	jmp	0x5dc4	; 0x5dc4 <_ZN7CTimerD8SetCOMPAEj>
     3fe:	0c 94 2d 2e 	jmp	0x5c5a	; 0x5c5a <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     402:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <_ZN7CTimerD5StartEj>
     406:	0c 94 0a 29 	jmp	0x5214	; 0x5214 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     40a:	0c 94 6f 2a 	jmp	0x54de	; 0x54de <_ZN10CDGUSUSART11IsReceivingEv>
     40e:	0c 94 55 2e 	jmp	0x5caa	; 0x5caa <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     412:	0c 94 29 2f 	jmp	0x5e52	; 0x5e52 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     416:	0c 94 df 28 	jmp	0x51be	; 0x51be <_ZN9CMBSender13OnReceiveByteEh+0x152>
     41a:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     41e:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     422:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     426:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     42a:	0c 94 b9 2f 	jmp	0x5f72	; 0x5f72 <_ZN8CTimerD18SetCOMPAEj>
     42e:	0c 94 69 30 	jmp	0x60d2	; 0x60d2 <_ZN7CTimerF9SetPeriodEj>
     432:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     436:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     43a:	0c 94 ad 28 	jmp	0x515a	; 0x515a <_ZN9CMBSender13OnReceiveByteEh+0xee>
     43e:	0c 94 aa 27 	jmp	0x4f54	; 0x4f54 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     442:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     446:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <_ZN16CMBEventsHandler11FreeBuffersEv>
     44a:	0c 94 b5 30 	jmp	0x616a	; 0x616a <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     44e:	0c 94 34 2e 	jmp	0x5c68	; 0x5c68 <_ZN8CTimerC19SetPeriodEj>
     452:	0c 94 90 2a 	jmp	0x5520	; 0x5520 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     456:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     45a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     45e:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     462:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     466:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     46a:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <_ZN8CTimerD18SetCOMPBEj>
     46e:	0c 94 62 2d 	jmp	0x5ac4	; 0x5ac4 <_ZN7CTimerC8SetCOMPAEj>
     472:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     476:	0c 94 77 06 	jmp	0xcee	; 0xcee <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     47a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     47e:	0c 94 78 30 	jmp	0x60f0	; 0x60f0 <_ZN7CTimerF8SetCOMPCEj>
     482:	0c 94 3a 2d 	jmp	0x5a74	; 0x5a74 <_ZN7CTimerC5StartEj>
     486:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <_ZN8CTimerD14StopEv>
     48a:	0c 94 b4 28 	jmp	0x5168	; 0x5168 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     48e:	0c 94 14 2e 	jmp	0x5c28	; 0x5c28 <_ZN8CTimerC14StopEv>
     492:	0c 94 f1 2e 	jmp	0x5de2	; 0x5de2 <_ZN7CTimerD8SetCOMPDEj>
     496:	0c 94 ad 2f 	jmp	0x5f5a	; 0x5f5a <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     49a:	0c 94 5d 2d 	jmp	0x5aba	; 0x5aba <_ZN7CTimerC9SetPeriodEj>
     49e:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4a2:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     4a6:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <_ZN8CTimerD15ResetEv>
     4aa:	0c 94 73 30 	jmp	0x60e6	; 0x60e6 <_ZN7CTimerF8SetCOMPBEj>
     4ae:	0c 94 1f 2d 	jmp	0x5a3e	; 0x5a3e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b2:	0c 94 61 2a 	jmp	0x54c2	; 0x54c2 <_ZN10CDGUSUSART15GetReceivedByteEv>
     4b6:	0c 94 cb 04 	jmp	0x996	; 0x996 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     4ba:	0c 94 b4 2f 	jmp	0x5f68	; 0x5f68 <_ZN8CTimerD19SetPeriodEj>
     4be:	0c 94 70 06 	jmp	0xce0	; 0xce0 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4c2:	0c 94 7d 30 	jmp	0x60fa	; 0x60fa <_ZN7CTimerF8SetCOMPDEj>
     4c6:	0c 94 47 2d 	jmp	0x5a8e	; 0x5a8e <_ZN7CTimerC4StopEv>
     4ca:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4ce:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     4d2:	0c 94 6e 30 	jmp	0x60dc	; 0x60dc <_ZN7CTimerF8SetCOMPAEj>
     4d6:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4da:	0c 94 3f 11 	jmp	0x227e	; 0x227e <_ZN4CSPI16StaticOnTransmitEPv>
     4de:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <__cxa_pure_virtual>
     4e2:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     4e6:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4ea:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc2>
     4ee:	0c 94 f6 2f 	jmp	0x5fec	; 0x5fec <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     4f2:	0c 94 70 2f 	jmp	0x5ee0	; 0x5ee0 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4f6:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <_ZN9CMBSender13OnReceiveByteEh+0x42>
     4fa:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     4fe:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     502:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     506:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     50a:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <_ZN8CTimerC18SetCOMPBEj>
     50e:	0c 94 6f 29 	jmp	0x52de	; 0x52de <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     512:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>

00000516 <__ctors_start>:
     516:	e0 24       	eor	r14, r0

00000518 <__ctors_end>:
     518:	15 25       	eor	r17, r5

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	ee ea       	ldi	r30, 0xAE	; 174
     532:	f8 e6       	ldi	r31, 0x68	; 104
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	ae 3a       	cpi	r26, 0xAE	; 174
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	25 e2       	ldi	r18, 0x25	; 37
     546:	ae ea       	ldi	r26, 0xAE	; 174
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	af 36       	cpi	r26, 0x6F	; 111
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 a6 32 	call	0x654c	; 0x654c <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 43 26 	call	0x4c86	; 0x4c86 <main>
     578:	0c 94 45 34 	jmp	0x688a	; 0x688a <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 98 29 	call	0x5330	; 0x5330 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 98 29 	call	0x5330	; 0x5330 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 98 29 	call	0x5330	; 0x5330 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 af 22 	sts	0x22AF, r24
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	eb 01       	movw	r28, r22
     8c4:	7a 01       	movw	r14, r20
     8c6:	69 01       	movw	r12, r18
     8c8:	fa 01       	movw	r30, r20
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z4swapj>
     8d2:	9c 01       	movw	r18, r24
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8dc:	7a c0       	rjmp	.+244    	; 0x9d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8de:	fe 01       	movw	r30, r28
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	e2 31       	cpi	r30, 0x12	; 18
     8e4:	f1 05       	cpc	r31, r1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e8:	a7 c0       	rjmp	.+334    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     8ea:	88 27       	eor	r24, r24
     8ec:	e2 5d       	subi	r30, 0xD2	; 210
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__tablejump2__>
     8f6:	f8 01       	movw	r30, r16
     8f8:	ea 5b       	subi	r30, 0xBA	; 186
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	20 83       	st	Z, r18
     8fe:	31 83       	std	Z+1, r19	; 0x01
     900:	9b c0       	rjmp	.+310    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     902:	f8 01       	movw	r30, r16
     904:	e8 5b       	subi	r30, 0xB8	; 184
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	20 83       	st	Z, r18
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	95 c0       	rjmp	.+298    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     90e:	f8 01       	movw	r30, r16
     910:	e6 5b       	subi	r30, 0xB6	; 182
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	8f c0       	rjmp	.+286    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     91a:	f8 01       	movw	r30, r16
     91c:	e4 5b       	subi	r30, 0xB4	; 180
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	89 c0       	rjmp	.+274    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     926:	f8 01       	movw	r30, r16
     928:	e2 5b       	subi	r30, 0xB2	; 178
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	83 c0       	rjmp	.+262    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     932:	f8 01       	movw	r30, r16
     934:	e0 5b       	subi	r30, 0xB0	; 176
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	20 83       	st	Z, r18
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	7d c0       	rjmp	.+250    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     93e:	f8 01       	movw	r30, r16
     940:	ee 5a       	subi	r30, 0xAE	; 174
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	77 c0       	rjmp	.+238    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     94a:	f7 01       	movw	r30, r14
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	0e 94 c0 10 	call	0x2180	; 0x2180 <_Z6swap32m>
     958:	f8 01       	movw	r30, r16
     95a:	fe 96       	adiw	r30, 0x3e	; 62
     95c:	60 83       	st	Z, r22
     95e:	71 83       	std	Z+1, r23	; 0x01
     960:	82 83       	std	Z+2, r24	; 0x02
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	69 c0       	rjmp	.+210    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     966:	f8 01       	movw	r30, r16
     968:	e8 5a       	subi	r30, 0xA8	; 168
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	63 c0       	rjmp	.+198    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     972:	f8 01       	movw	r30, r16
     974:	e6 5a       	subi	r30, 0xA6	; 166
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	20 83       	st	Z, r18
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	5d c0       	rjmp	.+186    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     97e:	f8 01       	movw	r30, r16
     980:	e4 5a       	subi	r30, 0xA4	; 164
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	20 83       	st	Z, r18
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	57 c0       	rjmp	.+174    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     98a:	f8 01       	movw	r30, r16
     98c:	e2 5a       	subi	r30, 0xA2	; 162
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	20 83       	st	Z, r18
     992:	31 83       	std	Z+1, r19	; 0x01
     994:	51 c0       	rjmp	.+162    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     996:	f8 01       	movw	r30, r16
     998:	e0 5a       	subi	r30, 0xA0	; 160
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	4b c0       	rjmp	.+150    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9a2:	f8 01       	movw	r30, r16
     9a4:	ee 59       	subi	r30, 0x9E	; 158
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	20 83       	st	Z, r18
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ae:	f8 01       	movw	r30, r16
     9b0:	ec 59       	subi	r30, 0x9C	; 156
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	20 83       	st	Z, r18
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ba:	f8 01       	movw	r30, r16
     9bc:	ea 59       	subi	r30, 0x9A	; 154
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	20 83       	st	Z, r18
     9c2:	31 83       	std	Z+1, r19	; 0x01
     9c4:	39 c0       	rjmp	.+114    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9c6:	f8 01       	movw	r30, r16
     9c8:	e8 59       	subi	r30, 0x98	; 152
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	20 83       	st	Z, r18
     9ce:	31 83       	std	Z+1, r19	; 0x01
     9d0:	33 c0       	rjmp	.+102    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9d2:	c1 30       	cpi	r28, 0x01	; 1
     9d4:	d1 05       	cpc	r29, r1
     9d6:	51 f4       	brne	.+20     	; 0x9ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a6 01       	movw	r20, r12
     9de:	b7 01       	movw	r22, r14
     9e0:	c8 01       	movw	r24, r16
     9e2:	8a 5b       	subi	r24, 0xBA	; 186
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	0e 94 86 10 	call	0x210c	; 0x210c <_Z11ConvertDataPvS_jj>
     9ea:	26 c0       	rjmp	.+76     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ec:	c5 30       	cpi	r28, 0x05	; 5
     9ee:	d1 05       	cpc	r29, r1
     9f0:	49 f4       	brne	.+18     	; 0xa04 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x154>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	a6 01       	movw	r20, r12
     9f8:	b7 01       	movw	r22, r14
     9fa:	c8 01       	movw	r24, r16
     9fc:	c0 96       	adiw	r24, 0x30	; 48
     9fe:	0e 94 86 10 	call	0x210c	; 0x210c <_Z11ConvertDataPvS_jj>
     a02:	1a c0       	rjmp	.+52     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a04:	22 97       	sbiw	r28, 0x02	; 2
     a06:	c1 f4       	brne	.+48     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a08:	f8 01       	movw	r30, r16
     a0a:	86 85       	ldd	r24, Z+14	; 0x0e
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	90 f4       	brcc	.+36     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x184>
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	48 96       	adiw	r24, 0x18	; 24
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a6 01       	movw	r20, r12
     a28:	b7 01       	movw	r22, r14
     a2a:	80 0f       	add	r24, r16
     a2c:	91 1f       	adc	r25, r17
     a2e:	0e 94 86 10 	call	0x210c	; 0x210c <_Z11ConvertDataPvS_jj>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a34:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <_ZN11CLaserBoard4BeepEv>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN16CLaserControlAppC1Ev>:
     a4a:	28 e6       	ldi	r18, 0x68	; 104
     a4c:	31 e2       	ldi	r19, 0x21	; 33
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	08 95       	ret

00000a56 <_ZN16CLaserControlAppD1Ev>:
     a56:	28 e6       	ldi	r18, 0x68	; 104
     a58:	31 e2       	ldi	r19, 0x21	; 33
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
     a5e:	31 83       	std	Z+1, r19	; 0x01
     a60:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <_ZN16CMBEventsHandlerD1Ev>
     a64:	08 95       	ret

00000a66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	7c 01       	movw	r14, r24
     a90:	8b 01       	movw	r16, r22
     a92:	fb 01       	movw	r30, r22
     a94:	80 80       	ld	r8, Z
     a96:	91 80       	ldd	r9, Z+1	; 0x01
     a98:	88 ee       	ldi	r24, 0xE8	; 232
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodhi4>
     aa2:	5b 01       	movw	r10, r22
     aa4:	22 81       	ldd	r18, Z+2	; 0x02
     aa6:	33 81       	ldd	r19, Z+3	; 0x03
     aa8:	a8 ee       	ldi	r26, 0xE8	; 232
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
     ab0:	95 01       	movw	r18, r10
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	0e 94 65 32 	call	0x64ca	; 0x64ca <__udivmodsi4>
     aba:	29 01       	movw	r4, r18
     abc:	3a 01       	movw	r6, r20
     abe:	f8 01       	movw	r30, r16
     ac0:	c4 80       	ldd	r12, Z+4	; 0x04
     ac2:	d5 80       	ldd	r13, Z+5	; 0x05
     ac4:	8a e6       	ldi	r24, 0x6A	; 106
     ac6:	98 e1       	ldi	r25, 0x18	; 24
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodhi4>
     ace:	8b 01       	movw	r16, r22
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	06 0f       	add	r16, r22
     ae2:	17 1f       	adc	r17, r23
     ae4:	f7 01       	movw	r30, r14
     ae6:	06 ab       	std	Z+54, r16	; 0x36
     ae8:	17 ab       	std	Z+55, r17	; 0x37
     aea:	d8 01       	movw	r26, r16
     aec:	a3 01       	movw	r20, r6
     aee:	92 01       	movw	r18, r4
     af0:	0e 94 bd 32 	call	0x657a	; 0x657a <__muluhisi3>
     af4:	28 ee       	ldi	r18, 0xE8	; 232
     af6:	33 e0       	ldi	r19, 0x03	; 3
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 65 32 	call	0x64ca	; 0x64ca <__udivmodsi4>
     b00:	02 1b       	sub	r16, r18
     b02:	13 0b       	sbc	r17, r19
     b04:	f7 01       	movw	r30, r14
     b06:	00 af       	std	Z+56, r16	; 0x38
     b08:	11 af       	std	Z+57, r17	; 0x39
     b0a:	a2 ae       	std	Z+58, r10	; 0x3a
     b0c:	b3 ae       	std	Z+59, r11	; 0x3b
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	8c 9d       	mul	r24, r12
     b12:	90 01       	movw	r18, r0
     b14:	8d 9d       	mul	r24, r13
     b16:	30 0d       	add	r19, r0
     b18:	11 24       	eor	r1, r1
     b1a:	36 95       	lsr	r19
     b1c:	27 95       	ror	r18
     b1e:	36 95       	lsr	r19
     b20:	27 95       	ror	r18
     b22:	ab e7       	ldi	r26, 0x7B	; 123
     b24:	b4 e1       	ldi	r27, 0x14	; 20
     b26:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
     b2a:	8c 01       	movw	r16, r24
     b2c:	16 95       	lsr	r17
     b2e:	07 95       	ror	r16
     b30:	09 83       	std	Y+1, r16	; 0x01
     b32:	1a 83       	std	Y+2, r17	; 0x02
     b34:	96 01       	movw	r18, r12
     b36:	a8 ec       	ldi	r26, 0xC8	; 200
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	0e 94 2d 32 	call	0x645a	; 0x645a <__mulsi3>
     b4a:	20 ea       	ldi	r18, 0xA0	; 160
     b4c:	36 e8       	ldi	r19, 0x86	; 134
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 65 32 	call	0x64ca	; 0x64ca <__udivmodsi4>
     b56:	12 2f       	mov	r17, r18
     b58:	82 2f       	mov	r24, r18
     b5a:	93 2f       	mov	r25, r19
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	2a e0       	ldi	r18, 0x0A	; 10
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	0e 94 65 32 	call	0x64ca	; 0x64ca <__udivmodsi4>
     b70:	62 2f       	mov	r22, r18
     b72:	82 2f       	mov	r24, r18
     b74:	93 2f       	mov	r25, r19
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	20 2f       	mov	r18, r16
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	41 2f       	mov	r20, r17
     b80:	5c 81       	ldd	r21, Y+4	; 0x04
     b82:	7e 81       	ldd	r23, Y+6	; 0x06
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	08 95       	ret

00000bb0 <_ZN16CLaserControlApp11GetVariableEjj>:
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	c2 58       	subi	r28, 0x82	; 130
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	0e 94 72 29 	call	0x52e4	; 0x52e4 <_ZN9CMBSender18WaitMODBUSListenerEv>
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	c2 58       	subi	r28, 0x82	; 130
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	0e 94 a7 29 	call	0x534e	; 0x534e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8c 01       	movw	r16, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z4swapj>
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	02 58       	subi	r16, 0x82	; 130
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	ae 01       	movw	r20, r28
     c1c:	4f 5f       	subi	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	63 e0       	ldi	r22, 0x03	; 3
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	0e 94 98 29 	call	0x5330	; 0x5330 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     c44:	fc 01       	movw	r30, r24
     c46:	fe 96       	adiw	r30, 0x3e	; 62
     c48:	40 81       	ld	r20, Z
     c4a:	51 81       	ldd	r21, Z+1	; 0x01
     c4c:	62 81       	ldd	r22, Z+2	; 0x02
     c4e:	73 81       	ldd	r23, Z+3	; 0x03
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	6f 4f       	sbci	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	40 83       	st	Z, r20
     c5a:	51 83       	std	Z+1, r21	; 0x01
     c5c:	62 83       	std	Z+2, r22	; 0x02
     c5e:	73 83       	std	Z+3, r23	; 0x03
     c60:	34 96       	adiw	r30, 0x04	; 4
     c62:	40 81       	ld	r20, Z
     c64:	51 81       	ldd	r21, Z+1	; 0x01
     c66:	62 81       	ldd	r22, Z+2	; 0x02
     c68:	73 81       	ldd	r23, Z+3	; 0x03
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	6f 4f       	sbci	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	40 83       	st	Z, r20
     c74:	51 83       	std	Z+1, r21	; 0x01
     c76:	62 83       	std	Z+2, r22	; 0x02
     c78:	73 83       	std	Z+3, r23	; 0x03
     c7a:	fc 01       	movw	r30, r24
     c7c:	42 ad       	ldd	r20, Z+58	; 0x3a
     c7e:	53 ad       	ldd	r21, Z+59	; 0x3b
     c80:	45 36       	cpi	r20, 0x65	; 101
     c82:	51 05       	cpc	r21, r1
     c84:	50 f0       	brcs	.+20     	; 0xc9a <_ZN16CLaserControlApp12OnLaserTimerEv+0x56>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	42 e3       	ldi	r20, 0x32	; 50
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	64 ef       	ldi	r22, 0xF4	; 244
     c8e:	71 e0       	ldi	r23, 0x01	; 1
     c90:	84 e2       	ldi	r24, 0x24	; 36
     c92:	95 e2       	ldi	r25, 0x25	; 37
     c94:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
     c98:	09 c0       	rjmp	.+18     	; 0xcac <_ZN16CLaserControlApp12OnLaserTimerEv+0x68>
     c9a:	56 95       	lsr	r21
     c9c:	47 95       	ror	r20
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	64 ef       	ldi	r22, 0xF4	; 244
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	84 e2       	ldi	r24, 0x24	; 36
     ca6:	95 e2       	ldi	r25, 0x25	; 37
     ca8:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
     cac:	84 e2       	ldi	r24, 0x24	; 36
     cae:	95 e2       	ldi	r25, 0x25	; 37
     cb0:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
     cb4:	08 95       	ret

00000cb6 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     cb6:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN16CLaserControlApp12OnLaserTimerEv>
     cba:	08 95       	ret

00000cbc <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     cbc:	fc 01       	movw	r30, r24
     cbe:	83 89       	ldd	r24, Z+19	; 0x13
     cc0:	88 23       	and	r24, r24
     cc2:	21 f0       	breq	.+8      	; 0xccc <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     cc4:	85 e2       	ldi	r24, 0x25	; 37
     cc6:	95 e2       	ldi	r25, 0x25	; 37
     cc8:	0e 94 34 2c 	call	0x5868	; 0x5868 <_ZN11CLaserBoard6PWMOffEv>
     ccc:	08 95       	ret

00000cce <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     cce:	fc 01       	movw	r30, r24
     cd0:	83 89       	ldd	r24, Z+19	; 0x13
     cd2:	88 23       	and	r24, r24
     cd4:	21 f0       	breq	.+8      	; 0xcde <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     cd6:	85 e2       	ldi	r24, 0x25	; 37
     cd8:	95 e2       	ldi	r25, 0x25	; 37
     cda:	0e 94 30 2c 	call	0x5860	; 0x5860 <_ZN11CLaserBoard5PWMOnEv>
     cde:	08 95       	ret

00000ce0 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     ce0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     ce4:	08 95       	ret

00000ce6 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     ce6:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     cea:	08 95       	ret

00000cec <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     cec:	08 95       	ret

00000cee <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     cee:	08 95       	ret

00000cf0 <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     cf0:	08 95       	ret

00000cf2 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     cfc:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     cfe:	fc 01       	movw	r30, r24
     d00:	ea 5b       	subi	r30, 0xBA	; 186
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	10 82       	st	Z, r1
     d06:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     d08:	32 96       	adiw	r30, 0x02	; 2
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     d12:	6a 30       	cpi	r22, 0x0A	; 10
     d14:	71 05       	cpc	r23, r1
     d16:	70 f4       	brcc	.+28     	; 0xd34 <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	72 96       	adiw	r30, 0x12	; 18
     d1e:	80 83       	st	Z, r24
     d20:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d22:	8c e3       	ldi	r24, 0x3C	; 60
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	8e 8b       	std	Y+22, r24	; 0x16
     d28:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d2a:	81 e6       	ldi	r24, 0x61	; 97
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	8c 8b       	std	Y+20, r24	; 0x14
     d30:	9d 8b       	std	Y+21, r25	; 0x15
     d32:	5b c0       	rjmp	.+182    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     d34:	64 31       	cpi	r22, 0x14	; 20
     d36:	71 05       	cpc	r23, r1
     d38:	80 f4       	brcc	.+32     	; 0xd5a <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fe 01       	movw	r30, r28
     d40:	e6 5a       	subi	r30, 0xA6	; 166
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	80 83       	st	Z, r24
     d46:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d48:	8c e3       	ldi	r24, 0x3C	; 60
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	8e 8b       	std	Y+22, r24	; 0x16
     d4e:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d50:	81 e6       	ldi	r24, 0x61	; 97
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	8c 8b       	std	Y+20, r24	; 0x14
     d56:	9d 8b       	std	Y+21, r25	; 0x15
     d58:	48 c0       	rjmp	.+144    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     d5a:	63 32       	cpi	r22, 0x23	; 35
     d5c:	71 05       	cpc	r23, r1
     d5e:	80 f4       	brcc	.+32     	; 0xd80 <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fe 01       	movw	r30, r28
     d66:	e6 5a       	subi	r30, 0xA6	; 166
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d6e:	8c e3       	ldi	r24, 0x3C	; 60
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	8e 8b       	std	Y+22, r24	; 0x16
     d74:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d76:	81 e6       	ldi	r24, 0x61	; 97
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	8c 8b       	std	Y+20, r24	; 0x14
     d7c:	9d 8b       	std	Y+21, r25	; 0x15
     d7e:	35 c0       	rjmp	.+106    	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     d80:	61 33       	cpi	r22, 0x31	; 49
     d82:	71 05       	cpc	r23, r1
     d84:	80 f4       	brcc	.+32     	; 0xda6 <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	fe 01       	movw	r30, r28
     d8c:	e6 5a       	subi	r30, 0xA6	; 166
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	8e 8b       	std	Y+22, r24	; 0x16
     d9a:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d9c:	81 e6       	ldi	r24, 0x61	; 97
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8c 8b       	std	Y+20, r24	; 0x14
     da2:	9d 8b       	std	Y+21, r25	; 0x15
     da4:	22 c0       	rjmp	.+68     	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     da6:	68 34       	cpi	r22, 0x48	; 72
     da8:	71 05       	cpc	r23, r1
     daa:	80 f4       	brcc	.+32     	; 0xdcc <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     dac:	85 e0       	ldi	r24, 0x05	; 5
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fe 01       	movw	r30, r28
     db2:	e6 5a       	subi	r30, 0xA6	; 166
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dba:	84 e6       	ldi	r24, 0x64	; 100
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	8e 8b       	std	Y+22, r24	; 0x16
     dc0:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 90;
     dc2:	8a e5       	ldi	r24, 0x5A	; 90
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	8c 8b       	std	Y+20, r24	; 0x14
     dc8:	9d 8b       	std	Y+21, r25	; 0x15
     dca:	0f c0       	rjmp	.+30     	; 0xdea <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fe 01       	movw	r30, r28
     dd2:	e6 5a       	subi	r30, 0xA6	; 166
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 83       	st	Z, r24
     dd8:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dda:	84 e6       	ldi	r24, 0x64	; 100
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	8e 8b       	std	Y+22, r24	; 0x16
     de0:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 87;
     de2:	87 e5       	ldi	r24, 0x57	; 87
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	8c 8b       	std	Y+20, r24	; 0x14
     de8:	9d 8b       	std	Y+21, r25	; 0x15
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     dea:	fe 01       	movw	r30, r28
     dec:	e4 5b       	subi	r30, 0xB4	; 180
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     df8:	8e 89       	ldd	r24, Y+22	; 0x16
     dfa:	9f 89       	ldd	r25, Y+23	; 0x17
     dfc:	32 97       	sbiw	r30, 0x02	; 2
     dfe:	80 83       	st	Z, r24
     e00:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     e02:	8e 01       	movw	r16, r28
     e04:	02 5b       	subi	r16, 0xB2	; 178
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	68 0f       	add	r22, r24
     e14:	79 1f       	adc	r23, r25
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	68 5e       	subi	r22, 0xE8	; 232
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	6c 0f       	add	r22, r28
     e20:	7d 1f       	adc	r23, r29
     e22:	ce 01       	movw	r24, r28
     e24:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     e28:	f8 01       	movw	r30, r16
     e2a:	20 83       	st	Z, r18
     e2c:	31 83       	std	Z+1, r19	; 0x01
     e2e:	42 83       	std	Z+2, r20	; 0x02
     e30:	53 83       	std	Z+3, r21	; 0x03
     e32:	64 83       	std	Z+4, r22	; 0x04
     e34:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     e36:	8e 85       	ldd	r24, Y+14	; 0x0e
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ec 0f       	add	r30, r28
     e4a:	fd 1f       	adc	r31, r29
     e4c:	84 8d       	ldd	r24, Z+28	; 0x1c
     e4e:	95 8d       	ldd	r25, Z+29	; 0x1d
     e50:	8c af       	std	Y+60, r24	; 0x3c
     e52:	9d af       	std	Y+61, r25	; 0x3d
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     e68:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     e6a:	fc 01       	movw	r30, r24
     e6c:	ea 5b       	subi	r30, 0xBA	; 186
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	10 82       	st	Z, r1
     e72:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     e74:	32 96       	adiw	r30, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	80 83       	st	Z, r24
     e7c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     e7e:	72 96       	adiw	r30, 0x12	; 18
     e80:	60 83       	st	Z, r22
     e82:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     e84:	63 30       	cpi	r22, 0x03	; 3
     e86:	71 05       	cpc	r23, r1
     e88:	91 f1       	breq	.+100    	; 0xeee <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     e8c:	61 30       	cpi	r22, 0x01	; 1
     e8e:	71 05       	cpc	r23, r1
     e90:	71 f0       	breq	.+28     	; 0xeae <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     e92:	62 30       	cpi	r22, 0x02	; 2
     e94:	71 05       	cpc	r23, r1
     e96:	d9 f0       	breq	.+54     	; 0xece <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     e98:	69 c0       	rjmp	.+210    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     e9a:	65 30       	cpi	r22, 0x05	; 5
     e9c:	71 05       	cpc	r23, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     ea0:	46 c0       	rjmp	.+140    	; 0xf2e <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     ea2:	a8 f1       	brcs	.+106    	; 0xf0e <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     ea4:	66 30       	cpi	r22, 0x06	; 6
     ea6:	71 05       	cpc	r23, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     eaa:	51 c0       	rjmp	.+162    	; 0xf4e <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     eac:	5f c0       	rjmp	.+190    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fe 01       	movw	r30, r28
     eb4:	e8 5a       	subi	r30, 0xA8	; 168
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 83       	st	Z, r24
     eba:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ebc:	8c e3       	ldi	r24, 0x3C	; 60
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	8e 8b       	std	Y+22, r24	; 0x16
     ec2:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     ec4:	81 e6       	ldi	r24, 0x61	; 97
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8c 8b       	std	Y+20, r24	; 0x14
     eca:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     ecc:	4f c0       	rjmp	.+158    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     ece:	8e e0       	ldi	r24, 0x0E	; 14
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fe 01       	movw	r30, r28
     ed4:	e8 5a       	subi	r30, 0xA8	; 168
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     edc:	8c e3       	ldi	r24, 0x3C	; 60
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	8e 8b       	std	Y+22, r24	; 0x16
     ee2:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     ee4:	81 e6       	ldi	r24, 0x61	; 97
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	8c 8b       	std	Y+20, r24	; 0x14
     eea:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     eee:	8b e1       	ldi	r24, 0x1B	; 27
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fe 01       	movw	r30, r28
     ef4:	e8 5a       	subi	r30, 0xA8	; 168
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     efc:	8c e3       	ldi	r24, 0x3C	; 60
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	8e 8b       	std	Y+22, r24	; 0x16
     f02:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f04:	81 e6       	ldi	r24, 0x61	; 97
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	8c 8b       	std	Y+20, r24	; 0x14
     f0a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f0c:	2f c0       	rjmp	.+94     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     f0e:	89 e2       	ldi	r24, 0x29	; 41
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fe 01       	movw	r30, r28
     f14:	e8 5a       	subi	r30, 0xA8	; 168
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 83       	st	Z, r24
     f1a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f1c:	84 e6       	ldi	r24, 0x64	; 100
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	8e 8b       	std	Y+22, r24	; 0x16
     f22:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f24:	81 e6       	ldi	r24, 0x61	; 97
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	8c 8b       	std	Y+20, r24	; 0x14
     f2a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     f2e:	8d e3       	ldi	r24, 0x3D	; 61
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	fe 01       	movw	r30, r28
     f34:	e8 5a       	subi	r30, 0xA8	; 168
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f3c:	84 e6       	ldi	r24, 0x64	; 100
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	8e 8b       	std	Y+22, r24	; 0x16
     f42:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 90;
     f44:	8a e5       	ldi	r24, 0x5A	; 90
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8c 8b       	std	Y+20, r24	; 0x14
     f4a:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     f4e:	85 e5       	ldi	r24, 0x55	; 85
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fe 01       	movw	r30, r28
     f54:	e8 5a       	subi	r30, 0xA8	; 168
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f5c:	84 e6       	ldi	r24, 0x64	; 100
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	8e 8b       	std	Y+22, r24	; 0x16
     f62:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 87;
     f64:	87 e5       	ldi	r24, 0x57	; 87
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	8c 8b       	std	Y+20, r24	; 0x14
     f6a:	9d 8b       	std	Y+21, r25	; 0x15
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     f6c:	fe 01       	movw	r30, r28
     f6e:	e4 5b       	subi	r30, 0xB4	; 180
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	84 e6       	ldi	r24, 0x64	; 100
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     f7a:	8e 89       	ldd	r24, Y+22	; 0x16
     f7c:	9f 89       	ldd	r25, Y+23	; 0x17
     f7e:	32 97       	sbiw	r30, 0x02	; 2
     f80:	80 83       	st	Z, r24
     f82:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     f84:	8e 01       	movw	r16, r28
     f86:	02 5b       	subi	r16, 0xB2	; 178
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	be 01       	movw	r22, r28
     f8c:	68 5e       	subi	r22, 0xE8	; 232
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	ce 01       	movw	r24, r28
     f92:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     f96:	f8 01       	movw	r30, r16
     f98:	20 83       	st	Z, r18
     f9a:	31 83       	std	Z+1, r19	; 0x01
     f9c:	42 83       	std	Z+2, r20	; 0x02
     f9e:	53 83       	std	Z+3, r21	; 0x03
     fa0:	64 83       	std	Z+4, r22	; 0x04
     fa2:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ec 0f       	add	r30, r28
     fb8:	fd 1f       	adc	r31, r29
     fba:	84 8d       	ldd	r24, Z+28	; 0x1c
     fbc:	95 8d       	ldd	r25, Z+29	; 0x1d
     fbe:	8c af       	std	Y+60, r24	; 0x3c
     fc0:	9d af       	std	Y+61, r25	; 0x3d
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	8b 01       	movw	r16, r22
     fe4:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	b1 f0       	breq	.+44     	; 0x1016 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
     fea:	18 f4       	brcc	.+6      	; 0xff2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
     fec:	21 30       	cpi	r18, 0x01	; 1
     fee:	31 f0       	breq	.+12     	; 0xffc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
     ff0:	58 c0       	rjmp	.+176    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	39 f1       	breq	.+78     	; 0x1044 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
     ff6:	24 30       	cpi	r18, 0x04	; 4
     ff8:	e9 f1       	breq	.+122    	; 0x1074 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
     ffa:	53 c0       	rjmp	.+166    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
     ffc:	db 01       	movw	r26, r22
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	09 f4       	brne	.+2      	; 0x100a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
    1008:	4c c0       	rjmp	.+152    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	8d 93       	st	X+, r24
    1010:	9c 93       	st	X, r25
				update = true;
    1012:	89 8b       	std	Y+17, r24	; 0x11
    1014:	46 c0       	rjmp	.+140    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
    1016:	fb 01       	movw	r30, r22
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	04 97       	sbiw	r24, 0x04	; 4
    101e:	30 f0       	brcs	.+12     	; 0x102c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 1)
    102c:	d8 01       	movw	r26, r16
    102e:	8d 91       	ld	r24, X+
    1030:	9c 91       	ld	r25, X
    1032:	11 97       	sbiw	r26, 0x01	; 1
    1034:	89 2b       	or	r24, r25
    1036:	a9 f5       	brne	.+106    	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	8d 93       	st	X+, r24
    103e:	9c 93       	st	X, r25
				update = true;
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	2f c0       	rjmp	.+94     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
    1044:	fb 01       	movw	r30, r22
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	07 97       	sbiw	r24, 0x07	; 7
    104c:	30 f0       	brcs	.+12     	; 0x105a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 4)
    105a:	d8 01       	movw	r26, r16
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	04 97       	sbiw	r24, 0x04	; 4
    1064:	f0 f4       	brcc	.+60     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	8d 93       	st	X+, r24
    106c:	9c 93       	st	X, r25
				update = true;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 8b       	std	Y+17, r24	; 0x11
    1072:	17 c0       	rjmp	.+46     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    1074:	fb 01       	movw	r30, r22
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	0b 97       	sbiw	r24, 0x0b	; 11
    107c:	30 f0       	brcs	.+12     	; 0x108a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 7)
    108a:	d8 01       	movw	r26, r16
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	11 97       	sbiw	r26, 0x01	; 1
    1092:	07 97       	sbiw	r24, 0x07	; 7
    1094:	30 f4       	brcc	.+12     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	8d 93       	st	X+, r24
    109c:	9c 93       	st	X, r25
				update = true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 8b       	std	Y+17, r24	; 0x11
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    10a2:	f8 01       	movw	r30, r16
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	f9 01       	movw	r30, r18
    10ae:	e2 5f       	subi	r30, 0xF2	; 242
    10b0:	fe 4d       	sbci	r31, 0xDE	; 222
    10b2:	c0 80       	ld	r12, Z
    10b4:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    10b6:	f9 01       	movw	r30, r18
    10b8:	e8 50       	subi	r30, 0x08	; 8
    10ba:	ff 4d       	sbci	r31, 0xDF	; 223
    10bc:	01 90       	ld	r0, Z+
    10be:	f0 81       	ld	r31, Z
    10c0:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    10c2:	cf 01       	movw	r24, r30
    10c4:	8c 19       	sub	r24, r12
    10c6:	9d 09       	sbc	r25, r13
    10c8:	d9 01       	movw	r26, r18
    10ca:	ae 51       	subi	r26, 0x1E	; 30
    10cc:	bf 4d       	sbci	r27, 0xDF	; 223
    10ce:	6d 91       	ld	r22, X+
    10d0:	7c 91       	ld	r23, X
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	71 09       	sbc	r23, r1
    10d6:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodhi4>
	
	if (duration < MinD)
    10da:	d7 01       	movw	r26, r14
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	8c 15       	cp	r24, r12
    10e4:	9d 05       	cpc	r25, r13
    10e6:	20 f4       	brcc	.+8      	; 0x10f0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    10e8:	cd 92       	st	X+, r12
    10ea:	dc 92       	st	X, r13
		update = true;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	if (duration > MaxD)
    10f0:	d7 01       	movw	r26, r14
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	e8 17       	cp	r30, r24
    10fa:	f9 07       	cpc	r31, r25
    10fc:	20 f4       	brcc	.+8      	; 0x1106 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    10fe:	ed 93       	st	X+, r30
    1100:	fc 93       	st	X, r31
		update = true;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1106:	d8 01       	movw	r26, r16
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ee 51       	subi	r30, 0x1E	; 30
    1112:	ff 4d       	sbci	r31, 0xDF	; 223
    1114:	a0 80       	ld	r10, Z
    1116:	b1 80       	ldd	r11, Z+1	; 0x01
    1118:	b1 e0       	ldi	r27, 0x01	; 1
    111a:	ab 1a       	sub	r10, r27
    111c:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    111e:	f7 01       	movw	r30, r14
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	8c 19       	sub	r24, r12
    1126:	9d 09       	sbc	r25, r13
    1128:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 b7 10 	call	0x216e	; 0x216e <_Z3maxjj>
    1134:	b5 01       	movw	r22, r10
    1136:	0e 94 b2 10 	call	0x2164	; 0x2164 <_Z3minjj>
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    113a:	d8 01       	movw	r26, r16
    113c:	4d 91       	ld	r20, X+
    113e:	5c 91       	ld	r21, X
    1140:	6b e0       	ldi	r22, 0x0B	; 11
    1142:	64 9f       	mul	r22, r20
    1144:	90 01       	movw	r18, r0
    1146:	65 9f       	mul	r22, r21
    1148:	30 0d       	add	r19, r0
    114a:	11 24       	eor	r1, r1
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	fc 01       	movw	r30, r24
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	e0 51       	subi	r30, 0x10	; 16
    1158:	f0 4e       	sbci	r31, 0xE0	; 224
    115a:	20 81       	ld	r18, Z
    115c:	31 81       	ldd	r19, Z+1	; 0x01
    115e:	ad ec       	ldi	r26, 0xCD	; 205
    1160:	bc ec       	ldi	r27, 0xCC	; 204
    1162:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	8c 8b       	std	Y+20, r24	; 0x14
    1170:	9d 8b       	std	Y+21, r25	; 0x15
	
	return update;
    1172:	89 89       	ldd	r24, Y+17	; 0x11
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	08 95       	ret

0000118a <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 58       	subi	r30, 0x82	; 130
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	60 83       	st	Z, r22
    11ac:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    11ae:	1f 86       	std	Y+15, r1	; 0x0f
	update = false;
    11b0:	19 8a       	std	Y+17, r1	; 0x11
	prepare = false;
    11b2:	1a 8a       	std	Y+18, r1	; 0x12
	peltier_en = false;
    11b4:	1b 8a       	std	Y+19, r1	; 0x13
	m_wSetMin = 0;
    11b6:	6c 01       	movw	r12, r24
    11b8:	26 e7       	ldi	r18, 0x76	; 118
    11ba:	c2 0e       	add	r12, r18
    11bc:	d1 1c       	adc	r13, r1
    11be:	f6 01       	movw	r30, r12
    11c0:	10 82       	st	Z, r1
    11c2:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 10;
    11c4:	7c 01       	movw	r14, r24
    11c6:	f8 e7       	ldi	r31, 0x78	; 120
    11c8:	ef 0e       	add	r14, r31
    11ca:	f1 1c       	adc	r15, r1
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f7 01       	movw	r30, r14
    11d2:	80 83       	st	Z, r24
    11d4:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    11d6:	34 97       	sbiw	r30, 0x04	; 4
    11d8:	10 82       	st	Z, r1
    11da:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    11dc:	f6 01       	movw	r30, r12
    11de:	20 81       	ld	r18, Z
    11e0:	31 81       	ldd	r19, Z+1	; 0x01
    11e2:	36 97       	sbiw	r30, 0x06	; 6
    11e4:	20 83       	st	Z, r18
    11e6:	31 83       	std	Z+1, r19	; 0x01
	m_wSeconds = m_wSetSec;
    11e8:	f7 01       	movw	r30, r14
    11ea:	20 81       	ld	r18, Z
    11ec:	31 81       	ldd	r19, Z+1	; 0x01
    11ee:	36 97       	sbiw	r30, 0x06	; 6
    11f0:	20 83       	st	Z, r18
    11f2:	31 83       	std	Z+1, r19	; 0x01
	m_wDeadTime = 0;
    11f4:	3a 96       	adiw	r30, 0x0a	; 10
    11f6:	10 82       	st	Z, r1
    11f8:	11 82       	std	Z+1, r1	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    11fa:	88 ab       	std	Y+48, r24	; 0x30
    11fc:	99 ab       	std	Y+49, r25	; 0x31
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    11fe:	88 e2       	ldi	r24, 0x28	; 40
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	8a ab       	std	Y+50, r24	; 0x32
    1204:	9b ab       	std	Y+51, r25	; 0x33
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	8c ab       	std	Y+52, r24	; 0x34
    120c:	9d ab       	std	Y+53, r25	; 0x35
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    120e:	25 e0       	ldi	r18, 0x05	; 5
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	2a a7       	std	Y+42, r18	; 0x2a
    1214:	3b a7       	std	Y+43, r19	; 0x2b
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    1216:	20 e5       	ldi	r18, 0x50	; 80
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	2c a7       	std	Y+44, r18	; 0x2c
    121c:	3d a7       	std	Y+45, r19	; 0x2d
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
    121e:	8e a7       	std	Y+46, r24	; 0x2e
    1220:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    1222:	22 e0       	ldi	r18, 0x02	; 2
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	2c a3       	std	Y+36, r18	; 0x24
    1228:	3d a3       	std	Y+37, r19	; 0x25
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    122a:	28 e7       	ldi	r18, 0x78	; 120
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	2e a3       	std	Y+38, r18	; 0x26
    1230:	3f a3       	std	Y+39, r19	; 0x27
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
    1232:	88 a7       	std	Y+40, r24	; 0x28
    1234:	99 a7       	std	Y+41, r25	; 0x29
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    1236:	aa 24       	eor	r10, r10
    1238:	a3 94       	inc	r10
    123a:	b1 2c       	mov	r11, r1
    123c:	ae 8e       	std	Y+30, r10	; 0x1e
    123e:	bf 8e       	std	Y+31, r11	; 0x1f
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    1240:	88 a3       	std	Y+32, r24	; 0x20
    1242:	99 a3       	std	Y+33, r25	; 0x21
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
    1244:	8a a3       	std	Y+34, r24	; 0x22
    1246:	9b a3       	std	Y+35, r25	; 0x23
	
	// Current profile
	Profile = PROFILE_FAST;
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 fe 33 	call	0x67fc	; 0x67fc <eeprom_read_dword>
    1254:	4e 01       	movw	r8, r28
    1256:	fe e3       	ldi	r31, 0x3E	; 62
    1258:	8f 0e       	add	r8, r31
    125a:	91 1c       	adc	r9, r1
    125c:	f4 01       	movw	r30, r8
    125e:	60 83       	st	Z, r22
    1260:	71 83       	std	Z+1, r23	; 0x01
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    1266:	38 96       	adiw	r30, 0x08	; 8
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	80 83       	st	Z, r24
    126e:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1270:	be 01       	movw	r22, r28
    1272:	60 5d       	subi	r22, 0xD0	; 208
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	de 01       	movw	r26, r28
    1278:	a8 5b       	subi	r26, 0xB8	; 184
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	fb 01       	movw	r30, r22
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	8a 95       	dec	r24
    1286:	e1 f7       	brne	.-8      	; 0x1280 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0xf6>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    1288:	8e 01       	movw	r16, r28
    128a:	02 5b       	subi	r16, 0xB2	; 178
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1294:	f8 01       	movw	r30, r16
    1296:	20 83       	st	Z, r18
    1298:	31 83       	std	Z+1, r19	; 0x01
    129a:	42 83       	std	Z+2, r20	; 0x02
    129c:	53 83       	std	Z+3, r21	; 0x03
    129e:	64 83       	std	Z+4, r22	; 0x04
    12a0:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    12a2:	f6 01       	movw	r30, r12
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	74 97       	sbiw	r30, 0x14	; 20
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    12ae:	f7 01       	movw	r30, r14
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	74 97       	sbiw	r30, 0x14	; 20
    12b6:	80 83       	st	Z, r24
    12b8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    12ba:	f4 01       	movw	r30, r8
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	0e 94 c0 10 	call	0x2180	; 0x2180 <_Z6swap32m>
    12c8:	fe 01       	movw	r30, r28
    12ca:	ec 5a       	subi	r30, 0xAC	; 172
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 83       	st	Z, r22
    12d0:	71 83       	std	Z+1, r23	; 0x01
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    12d6:	34 96       	adiw	r30, 0x04	; 4
    12d8:	10 82       	st	Z, r1
    12da:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    12dc:	32 96       	adiw	r30, 0x02	; 2
    12de:	a0 82       	st	Z, r10
    12e0:	b1 82       	std	Z+1, r11	; 0x01
	laserDiodeData.temperature = temperature;
    12e2:	32 96       	adiw	r30, 0x02	; 2
    12e4:	80 91 9e 24 	lds	r24, 0x249E
    12e8:	90 91 9f 24 	lds	r25, 0x249F
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    12f0:	32 96       	adiw	r30, 0x02	; 2
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	80 83       	st	Z, r24
    12f8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    12fa:	32 96       	adiw	r30, 0x02	; 2
    12fc:	10 82       	st	Z, r1
    12fe:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    1300:	36 96       	adiw	r30, 0x06	; 6
    1302:	10 82       	st	Z, r1
    1304:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    1306:	32 96       	adiw	r30, 0x02	; 2
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    1310:	34 96       	adiw	r30, 0x04	; 4
    1312:	10 82       	st	Z, r1
    1314:	11 82       	std	Z+1, r1	; 0x01
    1316:	12 82       	std	Z+2, r1	; 0x02
    1318:	13 82       	std	Z+3, r1	; 0x03
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    131a:	47 e0       	ldi	r20, 0x07	; 7
    131c:	63 e0       	ldi	r22, 0x03	; 3
    131e:	8c e5       	ldi	r24, 0x5C	; 92
    1320:	95 e2       	ldi	r25, 0x25	; 37
    1322:	0e 94 1b 30 	call	0x6036	; 0x6036 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    1326:	6e a9       	ldd	r22, Y+54	; 0x36
    1328:	7f a9       	ldd	r23, Y+55	; 0x37
    132a:	8c e5       	ldi	r24, 0x5C	; 92
    132c:	95 e2       	ldi	r25, 0x25	; 37
    132e:	0e 94 69 30 	call	0x60d2	; 0x60d2 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1332:	68 ad       	ldd	r22, Y+56	; 0x38
    1334:	79 ad       	ldd	r23, Y+57	; 0x39
    1336:	8c e5       	ldi	r24, 0x5C	; 92
    1338:	95 e2       	ldi	r25, 0x25	; 37
    133a:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	ae 01       	movw	r20, r28
    1342:	6b e5       	ldi	r22, 0x5B	; 91
    1344:	76 e0       	ldi	r23, 0x06	; 6
    1346:	8c e5       	ldi	r24, 0x5C	; 92
    1348:	95 e2       	ldi	r25, 0x25	; 37
    134a:	0e 94 82 30 	call	0x6104	; 0x6104 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	ae 01       	movw	r20, r28
    1352:	6b eb       	ldi	r22, 0xBB	; 187
    1354:	7e e0       	ldi	r23, 0x0E	; 14
    1356:	8c e5       	ldi	r24, 0x5C	; 92
    1358:	95 e2       	ldi	r25, 0x25	; 37
    135a:	0e 94 a4 30 	call	0x6148	; 0x6148 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    135e:	60 e1       	ldi	r22, 0x10	; 16
    1360:	8c e5       	ldi	r24, 0x5C	; 92
    1362:	95 e2       	ldi	r25, 0x25	; 37
    1364:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1368:	60 e1       	ldi	r22, 0x10	; 16
    136a:	8c e5       	ldi	r24, 0x5C	; 92
    136c:	95 e2       	ldi	r25, 0x25	; 37
    136e:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1372:	68 ad       	ldd	r22, Y+56	; 0x38
    1374:	79 ad       	ldd	r23, Y+57	; 0x39
    1376:	8c e5       	ldi	r24, 0x5C	; 92
    1378:	95 e2       	ldi	r25, 0x25	; 37
    137a:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    137e:	60 e2       	ldi	r22, 0x20	; 32
    1380:	8c e5       	ldi	r24, 0x5C	; 92
    1382:	95 e2       	ldi	r25, 0x25	; 37
    1384:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1388:	60 e2       	ldi	r22, 0x20	; 32
    138a:	8c e5       	ldi	r24, 0x5C	; 92
    138c:	95 e2       	ldi	r25, 0x25	; 37
    138e:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	08 95       	ret

000013ac <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	1f 92       	push	r1
    13ba:	1f 92       	push	r1
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z4swapj>
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    13ce:	87 01       	movw	r16, r14
    13d0:	02 58       	subi	r16, 0x82	; 130
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	22 e0       	ldi	r18, 0x02	; 2
    13d6:	ae 01       	movw	r20, r28
    13d8:	4f 5f       	subi	r20, 0xFF	; 255
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	f8 01       	movw	r30, r16
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	0e 94 98 29 	call	0x5330	; 0x5330 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    13f2:	a7 01       	movw	r20, r14
    13f4:	4a 5b       	subi	r20, 0xBA	; 186
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	2a e2       	ldi	r18, 0x2A	; 42
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	f8 01       	movw	r30, r16
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	0e 94 a7 29 	call	0x534e	; 0x534e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    140a:	f8 01       	movw	r30, r16
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    1414:	68 ea       	ldi	r22, 0xA8	; 168
    1416:	71 e6       	ldi	r23, 0x61	; 97
    1418:	82 e6       	ldi	r24, 0x62	; 98
    141a:	95 e2       	ldi	r25, 0x25	; 37
    141c:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	f7 01       	movw	r30, r14
    1426:	84 87       	std	Z+12, r24	; 0x0c
    1428:	95 87       	std	Z+13, r25	; 0x0d
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	00 d0       	rcall	.+0      	; 0x1452 <_ZN16CLaserControlApp3RunEv+0x16>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <_ZN16CLaserControlApp3RunEv+0x18>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    145a:	8c 01       	movw	r16, r24
    145c:	02 58       	subi	r16, 0x82	; 130
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	42 e0       	ldi	r20, 0x02	; 2
    1462:	63 e0       	ldi	r22, 0x03	; 3
    1464:	f8 01       	movw	r30, r16
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	0e 94 e6 29 	call	0x53cc	; 0x53cc <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    146e:	f8 01       	movw	r30, r16
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    1478:	f8 01       	movw	r30, r16
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1482:	ff ef       	ldi	r31, 0xFF	; 255
    1484:	29 ef       	ldi	r18, 0xF9	; 249
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	f1 50       	subi	r31, 0x01	; 1
    148a:	20 40       	sbci	r18, 0x00	; 0
    148c:	80 40       	sbci	r24, 0x00	; 0
    148e:	e1 f7       	brne	.-8      	; 0x1488 <_ZN16CLaserControlApp3RunEv+0x4c>
    1490:	00 c0       	rjmp	.+0      	; 0x1492 <_ZN16CLaserControlApp3RunEv+0x56>
    1492:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    1494:	f7 01       	movw	r30, r14
    1496:	84 85       	ldd	r24, Z+12	; 0x0c
    1498:	95 85       	ldd	r25, Z+13	; 0x0d
    149a:	9f 70       	andi	r25, 0x0F	; 15
    149c:	89 2b       	or	r24, r25
    149e:	09 f4       	brne	.+2      	; 0x14a2 <_ZN16CLaserControlApp3RunEv+0x66>
    14a0:	41 c0       	rjmp	.+130    	; 0x1524 <_ZN16CLaserControlApp3RunEv+0xe8>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    14a2:	22 e0       	ldi	r18, 0x02	; 2
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4e e9       	ldi	r20, 0x9E	; 158
    14a8:	54 e2       	ldi	r21, 0x24	; 36
    14aa:	6c e0       	ldi	r22, 0x0C	; 12
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	c7 01       	movw	r24, r14
    14b0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    14b4:	f7 01       	movw	r30, r14
    14b6:	e6 58       	subi	r30, 0x86	; 134
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	44 97       	sbiw	r24, 0x14	; 20
    14c0:	28 f4       	brcc	.+10     	; 0x14cc <_ZN16CLaserControlApp3RunEv+0x90>
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	70 97       	sbiw	r30, 0x10	; 16
    14c8:	80 83       	st	Z, r24
    14ca:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    14cc:	f7 01       	movw	r30, r14
    14ce:	e6 58       	subi	r30, 0x86	; 134
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	44 97       	sbiw	r24, 0x14	; 20
    14d8:	28 f0       	brcs	.+10     	; 0x14e4 <_ZN16CLaserControlApp3RunEv+0xa8>
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	89 97       	sbiw	r24, 0x29	; 41
    14e0:	08 f4       	brcc	.+2      	; 0x14e4 <_ZN16CLaserControlApp3RunEv+0xa8>
    14e2:	20 c4       	rjmp	.+2112   	; 0x1d24 <_ZN16CLaserControlApp3RunEv+0x8e8>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    14e4:	f7 01       	movw	r30, r14
    14e6:	e6 58       	subi	r30, 0x86	; 134
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	89 97       	sbiw	r24, 0x29	; 41
    14f0:	28 f0       	brcs	.+10     	; 0x14fc <_ZN16CLaserControlApp3RunEv+0xc0>
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	70 97       	sbiw	r30, 0x10	; 16
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    14fc:	22 e0       	ldi	r18, 0x02	; 2
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	a7 01       	movw	r20, r14
    1502:	46 59       	subi	r20, 0x96	; 150
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	63 e1       	ldi	r22, 0x13	; 19
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	c7 01       	movw	r24, r14
    150c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1510:	22 e0       	ldi	r18, 0x02	; 2
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	a7 01       	movw	r20, r14
    1516:	46 58       	subi	r20, 0x86	; 134
    1518:	5f 4f       	sbci	r21, 0xFF	; 255
    151a:	6e e0       	ldi	r22, 0x0E	; 14
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	c7 01       	movw	r24, r14
    1520:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    1524:	f7 01       	movw	r30, r14
    1526:	84 85       	ldd	r24, Z+12	; 0x0c
    1528:	95 85       	ldd	r25, Z+13	; 0x0d
    152a:	88 73       	andi	r24, 0x38	; 56
    152c:	99 27       	eor	r25, r25
    152e:	89 2b       	or	r24, r25
    1530:	79 f0       	breq	.+30     	; 0x1550 <_ZN16CLaserControlApp3RunEv+0x114>
	{
		if (temperature > 300)
    1532:	80 91 9e 24 	lds	r24, 0x249E
    1536:	90 91 9f 24 	lds	r25, 0x249F
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	91 40       	sbci	r25, 0x01	; 1
    153e:	44 f0       	brlt	.+16     	; 0x1550 <_ZN16CLaserControlApp3RunEv+0x114>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    1540:	69 e2       	ldi	r22, 0x29	; 41
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	c7 01       	movw	r24, r14
    1546:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    154a:	f7 01       	movw	r30, r14
    154c:	87 85       	ldd	r24, Z+15	; 0x0f
    154e:	80 8b       	std	Z+16, r24	; 0x10
		}
	}
	
	switch (state)
    1550:	f7 01       	movw	r30, r14
    1552:	84 85       	ldd	r24, Z+12	; 0x0c
    1554:	95 85       	ldd	r25, Z+13	; 0x0d
    1556:	81 15       	cp	r24, r1
    1558:	f2 e0       	ldi	r31, 0x02	; 2
    155a:	9f 07       	cpc	r25, r31
    155c:	09 f4       	brne	.+2      	; 0x1560 <_ZN16CLaserControlApp3RunEv+0x124>
    155e:	cb c2       	rjmp	.+1430   	; 0x1af6 <_ZN16CLaserControlApp3RunEv+0x6ba>
    1560:	1c f5       	brge	.+70     	; 0x15a8 <_ZN16CLaserControlApp3RunEv+0x16c>
    1562:	88 30       	cpi	r24, 0x08	; 8
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <_ZN16CLaserControlApp3RunEv+0x12e>
    1568:	bc c1       	rjmp	.+888    	; 0x18e2 <_ZN16CLaserControlApp3RunEv+0x4a6>
    156a:	64 f4       	brge	.+24     	; 0x1584 <_ZN16CLaserControlApp3RunEv+0x148>
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <_ZN16CLaserControlApp3RunEv+0x138>
    1572:	4d c1       	rjmp	.+666    	; 0x180e <_ZN16CLaserControlApp3RunEv+0x3d2>
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <_ZN16CLaserControlApp3RunEv+0x140>
    157a:	51 c0       	rjmp	.+162    	; 0x161e <_ZN16CLaserControlApp3RunEv+0x1e2>
    157c:	89 2b       	or	r24, r25
    157e:	09 f0       	breq	.+2      	; 0x1582 <_ZN16CLaserControlApp3RunEv+0x146>
    1580:	b0 c3       	rjmp	.+1888   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    1582:	42 c0       	rjmp	.+132    	; 0x1608 <_ZN16CLaserControlApp3RunEv+0x1cc>
    1584:	80 32       	cpi	r24, 0x20	; 32
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <_ZN16CLaserControlApp3RunEv+0x150>
    158a:	bc c1       	rjmp	.+888    	; 0x1904 <_ZN16CLaserControlApp3RunEv+0x4c8>
    158c:	24 f4       	brge	.+8      	; 0x1596 <_ZN16CLaserControlApp3RunEv+0x15a>
    158e:	40 97       	sbiw	r24, 0x10	; 16
    1590:	09 f4       	brne	.+2      	; 0x1594 <_ZN16CLaserControlApp3RunEv+0x158>
    1592:	b8 c1       	rjmp	.+880    	; 0x1904 <_ZN16CLaserControlApp3RunEv+0x4c8>
    1594:	a6 c3       	rjmp	.+1868   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    1596:	80 34       	cpi	r24, 0x40	; 64
    1598:	91 05       	cpc	r25, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <_ZN16CLaserControlApp3RunEv+0x162>
    159c:	6d c1       	rjmp	.+730    	; 0x1878 <_ZN16CLaserControlApp3RunEv+0x43c>
    159e:	81 15       	cp	r24, r1
    15a0:	91 40       	sbci	r25, 0x01	; 1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <_ZN16CLaserControlApp3RunEv+0x16a>
    15a4:	6a c2       	rjmp	.+1236   	; 0x1a7a <_ZN16CLaserControlApp3RunEv+0x63e>
    15a6:	9d c3       	rjmp	.+1850   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15a8:	81 15       	cp	r24, r1
    15aa:	f7 e0       	ldi	r31, 0x07	; 7
    15ac:	9f 07       	cpc	r25, r31
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_ZN16CLaserControlApp3RunEv+0x176>
    15b0:	3e c2       	rjmp	.+1148   	; 0x1a2e <_ZN16CLaserControlApp3RunEv+0x5f2>
    15b2:	ac f4       	brge	.+42     	; 0x15de <_ZN16CLaserControlApp3RunEv+0x1a2>
    15b4:	81 15       	cp	r24, r1
    15b6:	e4 e0       	ldi	r30, 0x04	; 4
    15b8:	9e 07       	cpc	r25, r30
    15ba:	09 f4       	brne	.+2      	; 0x15be <_ZN16CLaserControlApp3RunEv+0x182>
    15bc:	05 c3       	rjmp	.+1546   	; 0x1bc8 <_ZN16CLaserControlApp3RunEv+0x78c>
    15be:	2c f4       	brge	.+10     	; 0x15ca <_ZN16CLaserControlApp3RunEv+0x18e>
    15c0:	81 15       	cp	r24, r1
    15c2:	93 40       	sbci	r25, 0x03	; 3
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <_ZN16CLaserControlApp3RunEv+0x18c>
    15c6:	cd c2       	rjmp	.+1434   	; 0x1b62 <_ZN16CLaserControlApp3RunEv+0x726>
    15c8:	8c c3       	rjmp	.+1816   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15ca:	81 15       	cp	r24, r1
    15cc:	e5 e0       	ldi	r30, 0x05	; 5
    15ce:	9e 07       	cpc	r25, r30
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <_ZN16CLaserControlApp3RunEv+0x198>
    15d2:	44 c2       	rjmp	.+1160   	; 0x1a5c <_ZN16CLaserControlApp3RunEv+0x620>
    15d4:	81 15       	cp	r24, r1
    15d6:	96 40       	sbci	r25, 0x06	; 6
    15d8:	09 f4       	brne	.+2      	; 0x15dc <_ZN16CLaserControlApp3RunEv+0x1a0>
    15da:	17 c2       	rjmp	.+1070   	; 0x1a0a <_ZN16CLaserControlApp3RunEv+0x5ce>
    15dc:	82 c3       	rjmp	.+1796   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15de:	81 15       	cp	r24, r1
    15e0:	20 e2       	ldi	r18, 0x20	; 32
    15e2:	92 07       	cpc	r25, r18
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <_ZN16CLaserControlApp3RunEv+0x1ac>
    15e6:	2e c3       	rjmp	.+1628   	; 0x1c44 <_ZN16CLaserControlApp3RunEv+0x808>
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <_ZN16CLaserControlApp3RunEv+0x1b8>
    15ea:	81 15       	cp	r24, r1
    15ec:	90 41       	sbci	r25, 0x10	; 16
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <_ZN16CLaserControlApp3RunEv+0x1b6>
    15f0:	f1 c2       	rjmp	.+1506   	; 0x1bd4 <_ZN16CLaserControlApp3RunEv+0x798>
    15f2:	77 c3       	rjmp	.+1774   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
    15f4:	81 15       	cp	r24, r1
    15f6:	20 e3       	ldi	r18, 0x30	; 48
    15f8:	92 07       	cpc	r25, r18
    15fa:	09 f4       	brne	.+2      	; 0x15fe <_ZN16CLaserControlApp3RunEv+0x1c2>
    15fc:	50 c3       	rjmp	.+1696   	; 0x1c9e <_ZN16CLaserControlApp3RunEv+0x862>
    15fe:	81 15       	cp	r24, r1
    1600:	90 44       	sbci	r25, 0x40	; 64
    1602:	09 f4       	brne	.+2      	; 0x1606 <_ZN16CLaserControlApp3RunEv+0x1ca>
    1604:	69 c3       	rjmp	.+1746   	; 0x1cd8 <_ZN16CLaserControlApp3RunEv+0x89c>
    1606:	6d c3       	rjmp	.+1754   	; 0x1ce2 <_ZN16CLaserControlApp3RunEv+0x8a6>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    1608:	63 e0       	ldi	r22, 0x03	; 3
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	c7 01       	movw	r24, r14
    160e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	f7 01       	movw	r30, r14
    1618:	84 87       	std	Z+12, r24	; 0x0c
    161a:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    161c:	66 c3       	rjmp	.+1740   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    161e:	f7 01       	movw	r30, r14
    1620:	e8 5a       	subi	r30, 0xA8	; 168
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	a0 80       	ld	r10, Z
    1626:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    1628:	87 01       	movw	r16, r14
    162a:	06 5a       	subi	r16, 0xA6	; 166
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	f8 01       	movw	r30, r16
    1630:	c0 80       	ld	r12, Z
    1632:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    1634:	46 e0       	ldi	r20, 0x06	; 6
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	62 e0       	ldi	r22, 0x02	; 2
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	c7 01       	movw	r24, r14
    163e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1642:	ff ef       	ldi	r31, 0xFF	; 255
    1644:	29 ef       	ldi	r18, 0xF9	; 249
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	f1 50       	subi	r31, 0x01	; 1
    164a:	20 40       	sbci	r18, 0x00	; 0
    164c:	80 40       	sbci	r24, 0x00	; 0
    164e:	e1 f7       	brne	.-8      	; 0x1648 <_ZN16CLaserControlApp3RunEv+0x20c>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <_ZN16CLaserControlApp3RunEv+0x216>
    1652:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    1654:	42 e0       	ldi	r20, 0x02	; 2
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	6d e0       	ldi	r22, 0x0D	; 13
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	c7 01       	movw	r24, r14
    165e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	e9 ef       	ldi	r30, 0xF9	; 249
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	91 50       	subi	r25, 0x01	; 1
    166a:	e0 40       	sbci	r30, 0x00	; 0
    166c:	f0 40       	sbci	r31, 0x00	; 0
    166e:	e1 f7       	brne	.-8      	; 0x1668 <_ZN16CLaserControlApp3RunEv+0x22c>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <_ZN16CLaserControlApp3RunEv+0x236>
    1672:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    1674:	42 e0       	ldi	r20, 0x02	; 2
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	c7 01       	movw	r24, r14
    167e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1682:	2f ef       	ldi	r18, 0xFF	; 255
    1684:	89 ef       	ldi	r24, 0xF9	; 249
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	21 50       	subi	r18, 0x01	; 1
    168a:	80 40       	sbci	r24, 0x00	; 0
    168c:	90 40       	sbci	r25, 0x00	; 0
    168e:	e1 f7       	brne	.-8      	; 0x1688 <_ZN16CLaserControlApp3RunEv+0x24c>
    1690:	00 c0       	rjmp	.+0      	; 0x1692 <_ZN16CLaserControlApp3RunEv+0x256>
    1692:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    1694:	42 e0       	ldi	r20, 0x02	; 2
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	6a e0       	ldi	r22, 0x0A	; 10
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	c7 01       	movw	r24, r14
    169e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16a2:	ef ef       	ldi	r30, 0xFF	; 255
    16a4:	f9 ef       	ldi	r31, 0xF9	; 249
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	e1 50       	subi	r30, 0x01	; 1
    16aa:	f0 40       	sbci	r31, 0x00	; 0
    16ac:	20 40       	sbci	r18, 0x00	; 0
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <_ZN16CLaserControlApp3RunEv+0x26c>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <_ZN16CLaserControlApp3RunEv+0x276>
    16b2:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    16b4:	42 e0       	ldi	r20, 0x02	; 2
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	6b e0       	ldi	r22, 0x0B	; 11
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	c7 01       	movw	r24, r14
    16be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	99 ef       	ldi	r25, 0xF9	; 249
    16c6:	e0 e0       	ldi	r30, 0x00	; 0
    16c8:	81 50       	subi	r24, 0x01	; 1
    16ca:	90 40       	sbci	r25, 0x00	; 0
    16cc:	e0 40       	sbci	r30, 0x00	; 0
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <_ZN16CLaserControlApp3RunEv+0x28c>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <_ZN16CLaserControlApp3RunEv+0x296>
    16d2:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    16d4:	f7 01       	movw	r30, r14
    16d6:	fe 96       	adiw	r30, 0x3e	; 62
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	0e 94 c0 10 	call	0x2180	; 0x2180 <_Z6swap32m>
    16e4:	f7 01       	movw	r30, r14
    16e6:	ec 5a       	subi	r30, 0xAC	; 172
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 83       	st	Z, r22
    16ec:	71 83       	std	Z+1, r23	; 0x01
    16ee:	82 83       	std	Z+2, r24	; 0x02
    16f0:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature = temperature;
    16f2:	80 91 9e 24 	lds	r24, 0x249E
    16f6:	90 91 9f 24 	lds	r25, 0x249F
    16fa:	38 96       	adiw	r30, 0x08	; 8
    16fc:	80 83       	st	Z, r24
    16fe:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    1700:	7e 96       	adiw	r30, 0x1e	; 30
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	7a 97       	sbiw	r30, 0x1a	; 26
    1708:	80 83       	st	Z, r24
    170a:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    170c:	f8 01       	movw	r30, r16
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	6c 15       	cp	r22, r12
    1714:	7d 05       	cpc	r23, r13
    1716:	39 f0       	breq	.+14     	; 0x1726 <_ZN16CLaserControlApp3RunEv+0x2ea>
				{
					PhototypePreset(laserDiodeData.phototype);
    1718:	c7 01       	movw	r24, r14
    171a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	f7 01       	movw	r30, r14
    1722:	81 8b       	std	Z+17, r24	; 0x11
    1724:	4f c0       	rjmp	.+158    	; 0x17c4 <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				if (melanin != laserDiodeData.melanin)
    1726:	f7 01       	movw	r30, r14
    1728:	e8 5a       	subi	r30, 0xA8	; 168
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	6a 15       	cp	r22, r10
    1732:	7b 05       	cpc	r23, r11
    1734:	39 f0       	breq	.+14     	; 0x1744 <_ZN16CLaserControlApp3RunEv+0x308>
				{
					MelaninPreset(laserDiodeData.melanin);
    1736:	c7 01       	movw	r24, r14
    1738:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	f7 01       	movw	r30, r14
    1740:	81 8b       	std	Z+17, r24	; 0x11
    1742:	40 c0       	rjmp	.+128    	; 0x17c4 <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    1744:	f7 01       	movw	r30, r14
    1746:	ea 5b       	subi	r30, 0xBA	; 186
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    174c:	f7 01       	movw	r30, r14
    174e:	96 85       	ldd	r25, Z+14	; 0x0e
    1750:	98 17       	cp	r25, r24
    1752:	19 f0       	breq	.+6      	; 0x175a <_ZN16CLaserControlApp3RunEv+0x31e>
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	91 8b       	std	Z+17, r25	; 0x11
    1758:	86 87       	std	Z+14, r24	; 0x0e
				
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    175a:	f7 01       	movw	r30, r14
    175c:	86 85       	ldd	r24, Z+14	; 0x0e
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	bc 01       	movw	r22, r24
    1762:	66 0f       	add	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	68 0f       	add	r22, r24
    1768:	79 1f       	adc	r23, r25
    176a:	66 0f       	add	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	68 5e       	subi	r22, 0xE8	; 232
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	6e 0d       	add	r22, r14
    1774:	7f 1d       	adc	r23, r15
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	fb 01       	movw	r30, r22
    177a:	d7 01       	movw	r26, r14
    177c:	a8 5b       	subi	r26, 0xB8	; 184
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	01 90       	ld	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	8a 95       	dec	r24
    1786:	e1 f7       	brne	.-8      	; 0x1780 <_ZN16CLaserControlApp3RunEv+0x344>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    1788:	87 01       	movw	r16, r14
    178a:	02 5b       	subi	r16, 0xB2	; 178
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	c7 01       	movw	r24, r14
    1790:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1794:	f8 01       	movw	r30, r16
    1796:	20 83       	st	Z, r18
    1798:	31 83       	std	Z+1, r19	; 0x01
    179a:	42 83       	std	Z+2, r20	; 0x02
    179c:	53 83       	std	Z+3, r21	; 0x03
    179e:	64 83       	std	Z+4, r22	; 0x04
    17a0:	75 83       	std	Z+5, r23	; 0x05
					laserPower = m_structLaserProfile[Profile].EnergyPercent;
    17a2:	f7 01       	movw	r30, r14
    17a4:	86 85       	ldd	r24, Z+14	; 0x0e
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	e8 0f       	add	r30, r24
    17b0:	f9 1f       	adc	r31, r25
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	ee 0d       	add	r30, r14
    17b8:	ff 1d       	adc	r31, r15
    17ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    17bc:	95 8d       	ldd	r25, Z+29	; 0x1d
    17be:	f7 01       	movw	r30, r14
    17c0:	84 af       	std	Z+60, r24	; 0x3c
    17c2:	95 af       	std	Z+61, r25	; 0x3d
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    17c4:	f7 01       	movw	r30, r14
    17c6:	26 85       	ldd	r18, Z+14	; 0x0e
    17c8:	a7 01       	movw	r20, r14
    17ca:	46 5b       	subi	r20, 0xB6	; 182
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255
    17ce:	b7 01       	movw	r22, r14
    17d0:	68 5b       	subi	r22, 0xB8	; 184
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	c7 01       	movw	r24, r14
    17d6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    17da:	f7 01       	movw	r30, r14
    17dc:	81 8b       	std	Z+17, r24	; 0x11
				
				laserPower = m_wMaxEnergy * laserPower / 100;
    17de:	44 89       	ldd	r20, Z+20	; 0x14
    17e0:	55 89       	ldd	r21, Z+21	; 0x15
    17e2:	84 ad       	ldd	r24, Z+60	; 0x3c
    17e4:	95 ad       	ldd	r25, Z+61	; 0x3d
    17e6:	48 9f       	mul	r20, r24
    17e8:	90 01       	movw	r18, r0
    17ea:	49 9f       	mul	r20, r25
    17ec:	30 0d       	add	r19, r0
    17ee:	58 9f       	mul	r21, r24
    17f0:	30 0d       	add	r19, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	36 95       	lsr	r19
    17f6:	27 95       	ror	r18
    17f8:	36 95       	lsr	r19
    17fa:	27 95       	ror	r18
    17fc:	ab e7       	ldi	r26, 0x7B	; 123
    17fe:	b4 e1       	ldi	r27, 0x14	; 20
    1800:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	84 af       	std	Z+60, r24	; 0x3c
    180a:	95 af       	std	Z+61, r25	; 0x3d
					laserDiodeData.laserprofile.EnergyPercent = m_wMaxEnergy;
					laserPower = m_wMaxEnergy;
					update = true;
				}*/
			}
		break;
    180c:	6e c2       	rjmp	.+1244   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    180e:	f7 01       	movw	r30, r14
    1810:	82 89       	ldd	r24, Z+18	; 0x12
    1812:	88 23       	and	r24, r24
    1814:	b1 f0       	breq	.+44     	; 0x1842 <_ZN16CLaserControlApp3RunEv+0x406>
				{
					timervar.timer_minutes = m_wMinutes;
    1816:	e0 59       	subi	r30, 0x90	; 144
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    1822:	32 96       	adiw	r30, 0x02	; 2
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	8b 83       	std	Y+3, r24	; 0x03
    182a:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    182c:	24 e0       	ldi	r18, 0x04	; 4
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	ae 01       	movw	r20, r28
    1832:	4f 5f       	subi	r20, 0xFF	; 255
    1834:	5f 4f       	sbci	r21, 0xFF	; 255
    1836:	6f e0       	ldi	r22, 0x0F	; 15
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	c7 01       	movw	r24, r14
    183c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    1840:	54 c2       	rjmp	.+1192   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    1842:	f7 01       	movw	r30, r14
    1844:	86 85       	ldd	r24, Z+14	; 0x0e
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	ac 01       	movw	r20, r24
    184a:	44 0f       	add	r20, r20
    184c:	55 1f       	adc	r21, r21
    184e:	48 0f       	add	r20, r24
    1850:	59 1f       	adc	r21, r25
    1852:	44 0f       	add	r20, r20
    1854:	55 1f       	adc	r21, r21
    1856:	48 5e       	subi	r20, 0xE8	; 232
    1858:	5f 4f       	sbci	r21, 0xFF	; 255
    185a:	4e 0d       	add	r20, r14
    185c:	5f 1d       	adc	r21, r15
    185e:	26 e0       	ldi	r18, 0x06	; 6
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	62 e0       	ldi	r22, 0x02	; 2
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	c7 01       	movw	r24, r14
    1868:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    186c:	6c e0       	ldi	r22, 0x0C	; 12
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	c7 01       	movw	r24, r14
    1872:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    1876:	39 c2       	rjmp	.+1138   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    1878:	80 91 9e 24 	lds	r24, 0x249E
    187c:	90 91 9f 24 	lds	r25, 0x249F
    1880:	6a e0       	ldi	r22, 0x0A	; 10
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__divmodhi4>
    1888:	69 83       	std	Y+1, r22	; 0x01
    188a:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1890:	24 e0       	ldi	r18, 0x04	; 4
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	ae 01       	movw	r20, r28
    1896:	4f 5f       	subi	r20, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	6f e0       	ldi	r22, 0x0F	; 15
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	c7 01       	movw	r24, r14
    18a0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    18a4:	f7 01       	movw	r30, r14
    18a6:	ea 58       	subi	r30, 0x8A	; 138
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	36 97       	sbiw	r30, 0x06	; 6
    18b0:	80 83       	st	Z, r24
    18b2:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    18b4:	38 96       	adiw	r30, 0x08	; 8
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	36 97       	sbiw	r30, 0x06	; 6
    18bc:	80 83       	st	Z, r24
    18be:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	f7 01       	movw	r30, r14
    18c4:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    18c6:	80 91 9e 24 	lds	r24, 0x249E
    18ca:	90 91 9f 24 	lds	r25, 0x249F
    18ce:	82 32       	cpi	r24, 0x22	; 34
    18d0:	91 40       	sbci	r25, 0x01	; 1
    18d2:	0c f0       	brlt	.+2      	; 0x18d6 <_ZN16CLaserControlApp3RunEv+0x49a>
    18d4:	0a c2       	rjmp	.+1044   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
					SetPictureId(PICID_WORK_PREPARE);
    18d6:	67 e0       	ldi	r22, 0x07	; 7
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	c7 01       	movw	r24, r14
    18dc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    18e0:	04 c2       	rjmp	.+1032   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    18e2:	80 91 9e 24 	lds	r24, 0x249E
    18e6:	90 91 9f 24 	lds	r25, 0x249F
    18ea:	8d 32       	cpi	r24, 0x2D	; 45
    18ec:	91 40       	sbci	r25, 0x01	; 1
    18ee:	0c f4       	brge	.+2      	; 0x18f2 <_ZN16CLaserControlApp3RunEv+0x4b6>
    18f0:	fc c1       	rjmp	.+1016   	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    18f2:	69 e2       	ldi	r22, 0x29	; 41
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	c7 01       	movw	r24, r14
    18f8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    18fc:	f7 01       	movw	r30, r14
    18fe:	87 85       	ldd	r24, Z+15	; 0x0f
    1900:	80 8b       	std	Z+16, r24	; 0x10
    1902:	f3 c1       	rjmp	.+998    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1904:	f7 01       	movw	r30, r14
    1906:	84 ad       	ldd	r24, Z+60	; 0x3c
    1908:	95 ad       	ldd	r25, Z+61	; 0x3d
    190a:	ac 01       	movw	r20, r24
    190c:	56 95       	lsr	r21
    190e:	54 2f       	mov	r21, r20
    1910:	44 27       	eor	r20, r20
    1912:	57 95       	ror	r21
    1914:	47 95       	ror	r20
    1916:	98 2f       	mov	r25, r24
    1918:	88 27       	eor	r24, r24
    191a:	99 0f       	add	r25, r25
    191c:	48 0f       	add	r20, r24
    191e:	59 1f       	adc	r21, r25
    1920:	9a 01       	movw	r18, r20
    1922:	a1 e1       	ldi	r26, 0x11	; 17
    1924:	b4 e0       	ldi	r27, 0x04	; 4
    1926:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
    192a:	48 1b       	sub	r20, r24
    192c:	59 0b       	sbc	r21, r25
    192e:	56 95       	lsr	r21
    1930:	47 95       	ror	r20
    1932:	84 0f       	add	r24, r20
    1934:	95 1f       	adc	r25, r21
    1936:	96 95       	lsr	r25
    1938:	87 95       	ror	r24
    193a:	92 95       	swap	r25
    193c:	82 95       	swap	r24
    193e:	8f 70       	andi	r24, 0x0F	; 15
    1940:	89 27       	eor	r24, r25
    1942:	9f 70       	andi	r25, 0x0F	; 15
    1944:	89 27       	eor	r24, r25
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	9e 83       	std	Y+6, r25	; 0x06
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1952:	42 e0       	ldi	r20, 0x02	; 2
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	be 01       	movw	r22, r28
    1958:	6b 5f       	subi	r22, 0xFB	; 251
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	85 e6       	ldi	r24, 0x65	; 101
    195e:	95 e2       	ldi	r25, 0x25	; 37
    1960:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN4CSPI4SendEPhj>
							
				if (!laserBoard.Footswitch())
    1964:	85 e2       	ldi	r24, 0x25	; 37
    1966:	95 e2       	ldi	r25, 0x25	; 37
    1968:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN11CLaserBoard10FootswitchEv>
    196c:	81 11       	cpse	r24, r1
    196e:	10 c0       	rjmp	.+32     	; 0x1990 <_ZN16CLaserControlApp3RunEv+0x554>
				{
					if (state != APP_WORKLIGHT)
    1970:	f7 01       	movw	r30, r14
    1972:	84 85       	ldd	r24, Z+12	; 0x0c
    1974:	95 85       	ldd	r25, Z+13	; 0x0d
    1976:	80 97       	sbiw	r24, 0x20	; 32
    1978:	d1 f0       	breq	.+52     	; 0x19ae <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_STARTED);
    197a:	60 e1       	ldi	r22, 0x10	; 16
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    1984:	80 e2       	ldi	r24, 0x20	; 32
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	f7 01       	movw	r30, r14
    198a:	84 87       	std	Z+12, r24	; 0x0c
    198c:	95 87       	std	Z+13, r25	; 0x0d
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <_ZN16CLaserControlApp3RunEv+0x572>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    1990:	f7 01       	movw	r30, r14
    1992:	84 85       	ldd	r24, Z+12	; 0x0c
    1994:	95 85       	ldd	r25, Z+13	; 0x0d
    1996:	40 97       	sbiw	r24, 0x10	; 16
    1998:	51 f0       	breq	.+20     	; 0x19ae <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_POWERON);
    199a:	6e e0       	ldi	r22, 0x0E	; 14
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	c7 01       	movw	r24, r14
    19a0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    19a4:	80 e1       	ldi	r24, 0x10	; 16
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	f7 01       	movw	r30, r14
    19aa:	84 87       	std	Z+12, r24	; 0x0c
    19ac:	95 87       	std	Z+13, r25	; 0x0d
					}
				}
			
				uint32_t cnt = swap32(laserCounter);
    19ae:	f7 01       	movw	r30, r14
    19b0:	fe 96       	adiw	r30, 0x3e	; 62
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	0e 94 c0 10 	call	0x2180	; 0x2180 <_Z6swap32m>
    19be:	69 83       	std	Y+1, r22	; 0x01
    19c0:	7a 83       	std	Y+2, r23	; 0x02
    19c2:	8b 83       	std	Y+3, r24	; 0x03
    19c4:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    19c6:	24 e0       	ldi	r18, 0x04	; 4
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	ae 01       	movw	r20, r28
    19cc:	4f 5f       	subi	r20, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	68 e0       	ldi	r22, 0x08	; 8
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	c7 01       	movw	r24, r14
    19d6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    19da:	f7 01       	movw	r30, r14
    19dc:	ee 5b       	subi	r30, 0xBE	; 190
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	0e 94 c0 10 	call	0x2180	; 0x2180 <_Z6swap32m>
    19ec:	69 83       	std	Y+1, r22	; 0x01
    19ee:	7a 83       	std	Y+2, r23	; 0x02
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    19f4:	24 e0       	ldi	r18, 0x04	; 4
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	ae 01       	movw	r20, r28
    19fa:	4f 5f       	subi	r20, 0xFF	; 255
    19fc:	5f 4f       	sbci	r21, 0xFF	; 255
    19fe:	64 e1       	ldi	r22, 0x14	; 20
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	c7 01       	movw	r24, r14
    1a04:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    1a08:	70 c1       	rjmp	.+736    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    1a0a:	85 e2       	ldi	r24, 0x25	; 37
    1a0c:	95 e2       	ldi	r25, 0x25	; 37
    1a0e:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    1a12:	f7 01       	movw	r30, r14
    1a14:	e6 58       	subi	r30, 0x86	; 134
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	cd 97       	sbiw	r24, 0x3d	; 61
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <_ZN16CLaserControlApp3RunEv+0x5e6>
    1a20:	64 c1       	rjmp	.+712    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
				SetPictureId(PICID_WORKOnReady);
    1a22:	69 e1       	ldi	r22, 0x19	; 25
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	c7 01       	movw	r24, r14
    1a28:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a2c:	5e c1       	rjmp	.+700    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    1a2e:	85 e2       	ldi	r24, 0x25	; 37
    1a30:	95 e2       	ldi	r25, 0x25	; 37
    1a32:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    1a36:	f7 01       	movw	r30, r14
    1a38:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    1a3a:	80 91 9e 24 	lds	r24, 0x249E
    1a3e:	90 91 9f 24 	lds	r25, 0x249F
    1a42:	82 32       	cpi	r24, 0x22	; 34
    1a44:	91 40       	sbci	r25, 0x01	; 1
    1a46:	0c f0       	brlt	.+2      	; 0x1a4a <_ZN16CLaserControlApp3RunEv+0x60e>
    1a48:	50 c1       	rjmp	.+672    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
			{
				prepare = true;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	82 8b       	std	Z+18, r24	; 0x12
				SetPictureId(PIC_ID_last);
    1a50:	60 89       	ldd	r22, Z+16	; 0x10
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	c7 01       	movw	r24, r14
    1a56:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a5a:	47 c1       	rjmp	.+654    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    1a5c:	85 e2       	ldi	r24, 0x25	; 37
    1a5e:	95 e2       	ldi	r25, 0x25	; 37
    1a60:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    1a64:	80 91 68 06 	lds	r24, 0x0668
    1a68:	85 ff       	sbrs	r24, 5
    1a6a:	3f c1       	rjmp	.+638    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
				SetPictureId(PIC_ID_last);
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	60 89       	ldd	r22, Z+16	; 0x10
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	c7 01       	movw	r24, r14
    1a74:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a78:	38 c1       	rjmp	.+624    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	ee 5b       	subi	r30, 0xBE	; 190
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	10 82       	st	Z, r1
    1a82:	11 82       	std	Z+1, r1	; 0x01
    1a84:	12 82       	std	Z+2, r1	; 0x02
    1a86:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    1a88:	85 e2       	ldi	r24, 0x25	; 37
    1a8a:	95 e2       	ldi	r25, 0x25	; 37
    1a8c:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1a90:	f7 01       	movw	r30, r14
    1a92:	e2 5a       	subi	r30, 0xA2	; 162
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	2c ec       	ldi	r18, 0xCC	; 204
    1a9c:	28 9f       	mul	r18, r24
    1a9e:	b0 01       	movw	r22, r0
    1aa0:	29 9f       	mul	r18, r25
    1aa2:	70 0d       	add	r23, r0
    1aa4:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1aa6:	86 e5       	ldi	r24, 0x56	; 86
    1aa8:	95 e2       	ldi	r25, 0x25	; 37
    1aaa:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	f7 01       	movw	r30, r14
    1ab2:	83 8b       	std	Z+19, r24	; 0x13
				
				prepare = true;
    1ab4:	82 8b       	std	Z+18, r24	; 0x12
				m_wMinutes = m_wSetMin;
    1ab6:	ea 58       	subi	r30, 0x8A	; 138
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	36 97       	sbiw	r30, 0x06	; 6
    1ac0:	80 83       	st	Z, r24
    1ac2:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1ac4:	38 96       	adiw	r30, 0x08	; 8
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	36 97       	sbiw	r30, 0x06	; 6
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    1ad0:	80 91 9e 24 	lds	r24, 0x249E
    1ad4:	90 91 9f 24 	lds	r25, 0x249F
    1ad8:	83 32       	cpi	r24, 0x23	; 35
    1ada:	91 40       	sbci	r25, 0x01	; 1
    1adc:	34 f0       	brlt	.+12     	; 0x1aea <_ZN16CLaserControlApp3RunEv+0x6ae>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1ade:	67 e2       	ldi	r22, 0x27	; 39
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ae8:	00 c1       	rjmp	.+512    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1aea:	67 e0       	ldi	r22, 0x07	; 7
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	c7 01       	movw	r24, r14
    1af0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1af4:	fa c0       	rjmp	.+500    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1af6:	f7 01       	movw	r30, r14
    1af8:	84 ad       	ldd	r24, Z+60	; 0x3c
    1afa:	95 ad       	ldd	r25, Z+61	; 0x3d
    1afc:	ac 01       	movw	r20, r24
    1afe:	56 95       	lsr	r21
    1b00:	54 2f       	mov	r21, r20
    1b02:	44 27       	eor	r20, r20
    1b04:	57 95       	ror	r21
    1b06:	47 95       	ror	r20
    1b08:	98 2f       	mov	r25, r24
    1b0a:	88 27       	eor	r24, r24
    1b0c:	99 0f       	add	r25, r25
    1b0e:	48 0f       	add	r20, r24
    1b10:	59 1f       	adc	r21, r25
    1b12:	9a 01       	movw	r18, r20
    1b14:	a1 e1       	ldi	r26, 0x11	; 17
    1b16:	b4 e0       	ldi	r27, 0x04	; 4
    1b18:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
    1b1c:	48 1b       	sub	r20, r24
    1b1e:	59 0b       	sbc	r21, r25
    1b20:	56 95       	lsr	r21
    1b22:	47 95       	ror	r20
    1b24:	84 0f       	add	r24, r20
    1b26:	95 1f       	adc	r25, r21
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	92 95       	swap	r25
    1b2e:	82 95       	swap	r24
    1b30:	8f 70       	andi	r24, 0x0F	; 15
    1b32:	89 27       	eor	r24, r25
    1b34:	9f 70       	andi	r25, 0x0F	; 15
    1b36:	89 27       	eor	r24, r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1b44:	42 e0       	ldi	r20, 0x02	; 2
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	be 01       	movw	r22, r28
    1b4a:	6f 5f       	subi	r22, 0xFF	; 255
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	85 e6       	ldi	r24, 0x65	; 101
    1b50:	95 e2       	ldi	r25, 0x25	; 37
    1b52:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    1b56:	6e e0       	ldi	r22, 0x0E	; 14
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	c7 01       	movw	r24, r14
    1b5c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1b60:	c4 c0       	rjmp	.+392    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1b62:	6a e0       	ldi	r22, 0x0A	; 10
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	c7 01       	movw	r24, r14
    1b68:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1b6c:	8c e5       	ldi	r24, 0x5C	; 92
    1b6e:	95 e2       	ldi	r25, 0x25	; 37
    1b70:	0e 94 43 30 	call	0x6086	; 0x6086 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1b74:	60 e1       	ldi	r22, 0x10	; 16
    1b76:	8c e5       	ldi	r24, 0x5C	; 92
    1b78:	95 e2       	ldi	r25, 0x25	; 37
    1b7a:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1b7e:	60 e2       	ldi	r22, 0x20	; 32
    1b80:	8c e5       	ldi	r24, 0x5C	; 92
    1b82:	95 e2       	ldi	r25, 0x25	; 37
    1b84:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1b88:	85 e2       	ldi	r24, 0x25	; 37
    1b8a:	95 e2       	ldi	r25, 0x25	; 37
    1b8c:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    1b90:	f7 01       	movw	r30, r14
    1b92:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    1b94:	85 e2       	ldi	r24, 0x25	; 37
    1b96:	95 e2       	ldi	r25, 0x25	; 37
    1b98:	0e 94 30 2c 	call	0x5860	; 0x5860 <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1b9c:	f7 01       	movw	r30, r14
    1b9e:	fe 96       	adiw	r30, 0x3e	; 62
    1ba0:	40 81       	ld	r20, Z
    1ba2:	51 81       	ldd	r21, Z+1	; 0x01
    1ba4:	62 81       	ldd	r22, Z+2	; 0x02
    1ba6:	73 81       	ldd	r23, Z+3	; 0x03
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 05 34 	call	0x680a	; 0x680a <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1bb0:	19 82       	std	Y+1, r1	; 0x01
    1bb2:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1bb4:	42 e0       	ldi	r20, 0x02	; 2
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	be 01       	movw	r22, r28
    1bba:	6f 5f       	subi	r22, 0xFF	; 255
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	85 e6       	ldi	r24, 0x65	; 101
    1bc0:	95 e2       	ldi	r25, 0x25	; 37
    1bc2:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN4CSPI4SendEPhj>
			}
		break;
    1bc6:	91 c0       	rjmp	.+290    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1bc8:	6a e0       	ldi	r22, 0x0A	; 10
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	c7 01       	movw	r24, r14
    1bce:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1bd2:	8b c0       	rjmp	.+278    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1bd4:	42 e0       	ldi	r20, 0x02	; 2
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	61 e1       	ldi	r22, 0x11	; 17
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	c7 01       	movw	r24, r14
    1bde:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1be2:	ff ef       	ldi	r31, 0xFF	; 255
    1be4:	21 ee       	ldi	r18, 0xE1	; 225
    1be6:	84 e0       	ldi	r24, 0x04	; 4
    1be8:	f1 50       	subi	r31, 0x01	; 1
    1bea:	20 40       	sbci	r18, 0x00	; 0
    1bec:	80 40       	sbci	r24, 0x00	; 0
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <_ZN16CLaserControlApp3RunEv+0x7ac>
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <_ZN16CLaserControlApp3RunEv+0x7b6>
    1bf2:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1bf4:	42 e0       	ldi	r20, 0x02	; 2
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	62 e1       	ldi	r22, 0x12	; 18
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	e1 ee       	ldi	r30, 0xE1	; 225
    1c06:	f4 e0       	ldi	r31, 0x04	; 4
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	e0 40       	sbci	r30, 0x00	; 0
    1c0c:	f0 40       	sbci	r31, 0x00	; 0
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <_ZN16CLaserControlApp3RunEv+0x7cc>
    1c10:	00 c0       	rjmp	.+0      	; 0x1c12 <_ZN16CLaserControlApp3RunEv+0x7d6>
    1c12:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1c14:	f7 01       	movw	r30, r14
    1c16:	ea 59       	subi	r30, 0x9A	; 154
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	20 81       	ld	r18, Z
    1c1c:	31 81       	ldd	r19, Z+1	; 0x01
    1c1e:	c9 01       	movw	r24, r18
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	90 51       	subi	r25, 0x10	; 16
    1c26:	af 4f       	sbci	r26, 0xFF	; 255
    1c28:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2a:	22 27       	eor	r18, r18
    1c2c:	38 2f       	mov	r19, r24
    1c2e:	49 2f       	mov	r20, r25
    1c30:	5a 2f       	mov	r21, r26
    1c32:	00 e0       	ldi	r16, 0x00	; 0
    1c34:	1c e0       	ldi	r17, 0x0C	; 12
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	8c e4       	ldi	r24, 0x4C	; 76
    1c3c:	95 e2       	ldi	r25, 0x25	; 37
    1c3e:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1c42:	53 c0       	rjmp	.+166    	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
    1c44:	2f ef       	ldi	r18, 0xFF	; 255
    1c46:	87 ea       	ldi	r24, 0xA7	; 167
    1c48:	91 e6       	ldi	r25, 0x61	; 97
    1c4a:	21 50       	subi	r18, 0x01	; 1
    1c4c:	80 40       	sbci	r24, 0x00	; 0
    1c4e:	90 40       	sbci	r25, 0x00	; 0
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <_ZN16CLaserControlApp3RunEv+0x80e>
    1c52:	00 c0       	rjmp	.+0      	; 0x1c54 <_ZN16CLaserControlApp3RunEv+0x818>
    1c54:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1c56:	42 e0       	ldi	r20, 0x02	; 2
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	62 e1       	ldi	r22, 0x12	; 18
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	c7 01       	movw	r24, r14
    1c60:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c64:	f7 01       	movw	r30, r14
    1c66:	e8 59       	subi	r30, 0x98	; 152
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	20 81       	ld	r18, Z
    1c6c:	31 81       	ldd	r19, Z+1	; 0x01
    1c6e:	32 97       	sbiw	r30, 0x02	; 2
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	28 0f       	add	r18, r24
    1c76:	39 1f       	adc	r19, r25
    1c78:	c9 01       	movw	r24, r18
    1c7a:	a0 e0       	ldi	r26, 0x00	; 0
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	90 51       	subi	r25, 0x10	; 16
    1c80:	af 4f       	sbci	r26, 0xFF	; 255
    1c82:	bf 4f       	sbci	r27, 0xFF	; 255
    1c84:	22 27       	eor	r18, r18
    1c86:	38 2f       	mov	r19, r24
    1c88:	49 2f       	mov	r20, r25
    1c8a:	5a 2f       	mov	r21, r26
    1c8c:	00 e0       	ldi	r16, 0x00	; 0
    1c8e:	11 e0       	ldi	r17, 0x01	; 1
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	7d e0       	ldi	r23, 0x0D	; 13
    1c94:	8c e4       	ldi	r24, 0x4C	; 76
    1c96:	95 e2       	ldi	r25, 0x25	; 37
    1c98:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1c9c:	26 c0       	rjmp	.+76     	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	e8 59       	subi	r30, 0x98	; 152
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	20 81       	ld	r18, Z
    1ca6:	31 81       	ldd	r19, Z+1	; 0x01
    1ca8:	32 97       	sbiw	r30, 0x02	; 2
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	28 0f       	add	r18, r24
    1cb0:	39 1f       	adc	r19, r25
    1cb2:	c9 01       	movw	r24, r18
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	90 51       	subi	r25, 0x10	; 16
    1cba:	af 4f       	sbci	r26, 0xFF	; 255
    1cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbe:	22 27       	eor	r18, r18
    1cc0:	38 2f       	mov	r19, r24
    1cc2:	49 2f       	mov	r20, r25
    1cc4:	5a 2f       	mov	r21, r26
    1cc6:	00 e0       	ldi	r16, 0x00	; 0
    1cc8:	11 e0       	ldi	r17, 0x01	; 1
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	7d e0       	ldi	r23, 0x0D	; 13
    1cce:	8c e4       	ldi	r24, 0x4C	; 76
    1cd0:	95 e2       	ldi	r25, 0x25	; 37
    1cd2:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1cd8:	8c e4       	ldi	r24, 0x4C	; 76
    1cda:	95 e2       	ldi	r25, 0x25	; 37
    1cdc:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <_ZN16CLaserControlApp3RunEv+0x8ae>
		default:
			Database.UnMap();
    1ce2:	8c e4       	ldi	r24, 0x4C	; 76
    1ce4:	95 e2       	ldi	r25, 0x25	; 37
    1ce6:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
	}
	
	if ((PORTD.IN & PIN6_bm) == 0)
    1cea:	80 91 68 06 	lds	r24, 0x0668
    1cee:	86 fd       	sbrc	r24, 6
    1cf0:	08 c0       	rjmp	.+16     	; 0x1d02 <_ZN16CLaserControlApp3RunEv+0x8c6>
		{
			PIC_ID_last = PIC_ID;
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	87 85       	ldd	r24, Z+15	; 0x0f
    1cf6:	80 8b       	std	Z+16, r24	; 0x10
			SetPictureId(PICID_WORK_ERROR1);
    1cf8:	68 e0       	ldi	r22, 0x08	; 8
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
		}
	
	if (update)
    1d02:	f7 01       	movw	r30, r14
    1d04:	81 89       	ldd	r24, Z+17	; 0x11
    1d06:	88 23       	and	r24, r24
    1d08:	a9 f0       	breq	.+42     	; 0x1d34 <_ZN16CLaserControlApp3RunEv+0x8f8>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1d0a:	a7 01       	movw	r20, r14
    1d0c:	4a 5b       	subi	r20, 0xBA	; 186
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	2a e2       	ldi	r18, 0x2A	; 42
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	c7 01       	movw	r24, r14
    1d1a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1d1e:	f7 01       	movw	r30, r14
    1d20:	11 8a       	std	Z+17, r1	; 0x11
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <_ZN16CLaserControlApp3RunEv+0x8f8>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	f7 01       	movw	r30, r14
    1d2a:	e6 59       	subi	r30, 0x96	; 150
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	d8 cb       	rjmp	.-2128   	; 0x14e4 <_ZN16CLaserControlApp3RunEv+0xa8>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    1d34:	26 96       	adiw	r28, 0x06	; 6
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	08 95       	ret

00001d50 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    1d50:	fc 01       	movw	r30, r24
    1d52:	86 85       	ldd	r24, Z+14	; 0x0e
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	71 f4       	brne	.+28     	; 0x1d74 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    1d58:	8c e5       	ldi	r24, 0x5C	; 92
    1d5a:	95 e2       	ldi	r25, 0x25	; 37
    1d5c:	0e 94 43 30 	call	0x6086	; 0x6086 <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1d60:	60 e1       	ldi	r22, 0x10	; 16
    1d62:	8c e5       	ldi	r24, 0x5C	; 92
    1d64:	95 e2       	ldi	r25, 0x25	; 37
    1d66:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1d6a:	60 e2       	ldi	r22, 0x20	; 32
    1d6c:	8c e5       	ldi	r24, 0x5C	; 92
    1d6e:	95 e2       	ldi	r25, 0x25	; 37
    1d70:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    1d74:	08 95       	ret

00001d76 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    1d76:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1d7a:	08 95       	ret

00001d7c <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    1d82:	fc 01       	movw	r30, r24
    1d84:	e4 58       	subi	r30, 0x84	; 132
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	89 2b       	or	r24, r25
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	80 83       	st	Z, r24
    1d98:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    1d9a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    1da0:	a8 c0       	rjmp	.+336    	; 0x1ef2 <_ZN16CLaserControlApp7OnTimerEv+0x176>
	{
		if (m_wMillSec == 0)
    1da2:	fe 01       	movw	r30, r28
    1da4:	ec 58       	subi	r30, 0x8C	; 140
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	89 2b       	or	r24, r25
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    1db0:	98 c0       	rjmp	.+304    	; 0x1ee2 <_ZN16CLaserControlApp7OnTimerEv+0x166>
		{
			m_wFlow = (TCC1.CNT * 10) / 8;
    1db2:	80 91 60 08 	lds	r24, 0x0860
    1db6:	90 91 61 08 	lds	r25, 0x0861
    1dba:	9c 01       	movw	r18, r24
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	96 95       	lsr	r25
    1dd2:	87 95       	ror	r24
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	96 95       	lsr	r25
    1dda:	87 95       	ror	r24
    1ddc:	36 96       	adiw	r30, 0x06	; 6
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1de2:	89 e5       	ldi	r24, 0x59	; 89
    1de4:	95 e2       	ldi	r25, 0x25	; 37
    1de6:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <_ZN8CTimerC15ResetEv>
			
			if (m_wSeconds == 0)
    1dea:	fe 01       	movw	r30, r28
    1dec:	ee 58       	subi	r30, 0x8E	; 142
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	89 2b       	or	r24, r25
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <_ZN16CLaserControlApp7OnTimerEv+0x7e>
    1df8:	4c c0       	rjmp	.+152    	; 0x1e92 <_ZN16CLaserControlApp7OnTimerEv+0x116>
			{
				if (m_wMinutes == 0)
    1dfa:	32 97       	sbiw	r30, 0x02	; 2
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	89 2b       	or	r24, r25
    1e02:	d1 f5       	brne	.+116    	; 0x1e78 <_ZN16CLaserControlApp7OnTimerEv+0xfc>
				{
					if (state == APP_WORKPREPARE)
    1e04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e06:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e08:	02 97       	sbiw	r24, 0x02	; 2
    1e0a:	a1 f5       	brne	.+104    	; 0x1e74 <_ZN16CLaserControlApp7OnTimerEv+0xf8>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    1e0c:	22 e0       	ldi	r18, 0x02	; 2
    1e0e:	44 e6       	ldi	r20, 0x64	; 100
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	65 e0       	ldi	r22, 0x05	; 5
    1e14:	71 e0       	ldi	r23, 0x01	; 1
    1e16:	84 e2       	ldi	r24, 0x24	; 36
    1e18:	95 e2       	ldi	r25, 0x25	; 37
    1e1a:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e1e:	84 e2       	ldi	r24, 0x24	; 36
    1e20:	95 e2       	ldi	r25, 0x25	; 37
    1e22:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    1e26:	22 e0       	ldi	r18, 0x02	; 2
    1e28:	44 e6       	ldi	r20, 0x64	; 100
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	66 e2       	ldi	r22, 0x26	; 38
    1e2e:	71 e0       	ldi	r23, 0x01	; 1
    1e30:	84 e2       	ldi	r24, 0x24	; 36
    1e32:	95 e2       	ldi	r25, 0x25	; 37
    1e34:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e38:	84 e2       	ldi	r24, 0x24	; 36
    1e3a:	95 e2       	ldi	r25, 0x25	; 37
    1e3c:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    1e40:	22 e0       	ldi	r18, 0x02	; 2
    1e42:	44 e6       	ldi	r20, 0x64	; 100
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	69 e4       	ldi	r22, 0x49	; 73
    1e48:	71 e0       	ldi	r23, 0x01	; 1
    1e4a:	84 e2       	ldi	r24, 0x24	; 36
    1e4c:	95 e2       	ldi	r25, 0x25	; 37
    1e4e:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e52:	84 e2       	ldi	r24, 0x24	; 36
    1e54:	95 e2       	ldi	r25, 0x25	; 37
    1e56:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    1e5a:	22 e0       	ldi	r18, 0x02	; 2
    1e5c:	44 e6       	ldi	r20, 0x64	; 100
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	6d e5       	ldi	r22, 0x5D	; 93
    1e62:	71 e0       	ldi	r23, 0x01	; 1
    1e64:	84 e2       	ldi	r24, 0x24	; 36
    1e66:	95 e2       	ldi	r25, 0x25	; 37
    1e68:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e6c:	84 e2       	ldi	r24, 0x24	; 36
    1e6e:	95 e2       	ldi	r25, 0x25	; 37
    1e70:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1e74:	1a 8a       	std	Y+18, r1	; 0x12
    1e76:	9f c0       	rjmp	.+318    	; 0x1fb6 <_ZN16CLaserControlApp7OnTimerEv+0x23a>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    1e78:	8c e3       	ldi	r24, 0x3C	; 60
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ee 58       	subi	r30, 0x8E	; 142
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    1e86:	32 97       	sbiw	r30, 0x02	; 2
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	80 83       	st	Z, r24
    1e90:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    1e92:	84 e6       	ldi	r24, 0x64	; 100
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	fe 01       	movw	r30, r28
    1e98:	ec 58       	subi	r30, 0x8C	; 140
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    1ea0:	32 97       	sbiw	r30, 0x02	; 2
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	80 83       	st	Z, r24
    1eaa:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    1eac:	32 97       	sbiw	r30, 0x02	; 2
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	89 2b       	or	r24, r25
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <_ZN16CLaserControlApp7OnTimerEv+0x13c>
    1eb6:	4c c0       	rjmp	.+152    	; 0x1f50 <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1eb8:	32 96       	adiw	r30, 0x02	; 2
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	0a 97       	sbiw	r24, 0x0a	; 10
    1ec0:	08 f0       	brcs	.+2      	; 0x1ec4 <_ZN16CLaserControlApp7OnTimerEv+0x148>
    1ec2:	46 c0       	rjmp	.+140    	; 0x1f50 <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1ec4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ec6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ec8:	02 97       	sbiw	r24, 0x02	; 2
    1eca:	09 f0       	breq	.+2      	; 0x1ece <_ZN16CLaserControlApp7OnTimerEv+0x152>
    1ecc:	41 c0       	rjmp	.+130    	; 0x1f50 <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1ece:	4e c0       	rjmp	.+156    	; 0x1f6c <_ZN16CLaserControlApp7OnTimerEv+0x1f0>
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ee 58       	subi	r30, 0x8E	; 142
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	05 97       	sbiw	r24, 0x05	; 5
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <_ZN16CLaserControlApp7OnTimerEv+0x164>
    1ede:	4f c0       	rjmp	.+158    	; 0x1f7e <_ZN16CLaserControlApp7OnTimerEv+0x202>
    1ee0:	5c c0       	rjmp	.+184    	; 0x1f9a <_ZN16CLaserControlApp7OnTimerEv+0x21e>
				player.SoundStop();
				//player.beep(1000, 25);
			}
			// ************************************
		}
		m_wMillSec-=10;
    1ee2:	cc 58       	subi	r28, 0x8C	; 140
    1ee4:	df 4f       	sbci	r29, 0xFF	; 255
    1ee6:	88 81       	ld	r24, Y
    1ee8:	99 81       	ldd	r25, Y+1	; 0x01
    1eea:	0a 97       	sbiw	r24, 0x0a	; 10
    1eec:	88 83       	st	Y, r24
    1eee:	99 83       	std	Y+1, r25	; 0x01
    1ef0:	62 c0       	rjmp	.+196    	; 0x1fb6 <_ZN16CLaserControlApp7OnTimerEv+0x23a>
	}
	else
	{
		if (m_wMillSec == 0)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ec 58       	subi	r30, 0x8C	; 140
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	89 2b       	or	r24, r25
    1efe:	01 f5       	brne	.+64     	; 0x1f40 <_ZN16CLaserControlApp7OnTimerEv+0x1c4>
		{
			m_wMillSec = 100;
    1f00:	84 e6       	ldi	r24, 0x64	; 100
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	80 83       	st	Z, r24
    1f06:	91 83       	std	Z+1, r25	; 0x01
			
			m_wFlow = (TCC1.CNT * 10) / 8;
    1f08:	80 91 60 08 	lds	r24, 0x0860
    1f0c:	90 91 61 08 	lds	r25, 0x0861
    1f10:	9c 01       	movw	r18, r24
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	96 95       	lsr	r25
    1f28:	87 95       	ror	r24
    1f2a:	96 95       	lsr	r25
    1f2c:	87 95       	ror	r24
    1f2e:	96 95       	lsr	r25
    1f30:	87 95       	ror	r24
    1f32:	36 96       	adiw	r30, 0x06	; 6
    1f34:	80 83       	st	Z, r24
    1f36:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1f38:	89 e5       	ldi	r24, 0x59	; 89
    1f3a:	95 e2       	ldi	r25, 0x25	; 37
    1f3c:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <_ZN8CTimerC15ResetEv>
		}
		m_wMillSec-=10;
    1f40:	cc 58       	subi	r28, 0x8C	; 140
    1f42:	df 4f       	sbci	r29, 0xFF	; 255
    1f44:	88 81       	ld	r24, Y
    1f46:	99 81       	ldd	r25, Y+1	; 0x01
    1f48:	0a 97       	sbiw	r24, 0x0a	; 10
    1f4a:	88 83       	st	Y, r24
    1f4c:	99 83       	std	Y+1, r25	; 0x01
    1f4e:	33 c0       	rjmp	.+102    	; 0x1fb6 <_ZN16CLaserControlApp7OnTimerEv+0x23a>
					//player.beep(1000, 50);
				}
			}
			else
			{
				player.SoundStart(1000, 25, 2);
    1f50:	22 e0       	ldi	r18, 0x02	; 2
    1f52:	49 e1       	ldi	r20, 0x19	; 25
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	68 ee       	ldi	r22, 0xE8	; 232
    1f58:	73 e0       	ldi	r23, 0x03	; 3
    1f5a:	84 e2       	ldi	r24, 0x24	; 36
    1f5c:	95 e2       	ldi	r25, 0x25	; 37
    1f5e:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    1f62:	84 e2       	ldi	r24, 0x24	; 36
    1f64:	95 e2       	ldi	r25, 0x25	; 37
    1f66:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
    1f6a:	bb cf       	rjmp	.-138    	; 0x1ee2 <_ZN16CLaserControlApp7OnTimerEv+0x166>
			m_wSeconds--;
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e0 59       	subi	r30, 0x90	; 144
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	89 2b       	or	r24, r25
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <_ZN16CLaserControlApp7OnTimerEv+0x200>
    1f7a:	aa cf       	rjmp	.-172    	; 0x1ed0 <_ZN16CLaserControlApp7OnTimerEv+0x154>
    1f7c:	0e c0       	rjmp	.+28     	; 0x1f9a <_ZN16CLaserControlApp7OnTimerEv+0x21e>
				{
					player.SoundStart(1000, 100, 2);
    1f7e:	22 e0       	ldi	r18, 0x02	; 2
    1f80:	44 e6       	ldi	r20, 0x64	; 100
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	68 ee       	ldi	r22, 0xE8	; 232
    1f86:	73 e0       	ldi	r23, 0x03	; 3
    1f88:	84 e2       	ldi	r24, 0x24	; 36
    1f8a:	95 e2       	ldi	r25, 0x25	; 37
    1f8c:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f90:	84 e2       	ldi	r24, 0x24	; 36
    1f92:	95 e2       	ldi	r25, 0x25	; 37
    1f94:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
    1f98:	a4 cf       	rjmp	.-184    	; 0x1ee2 <_ZN16CLaserControlApp7OnTimerEv+0x166>
					//player.beep(1000, 100);
				}
				else
				{
					player.SoundStart(1000, 50, 2);
    1f9a:	22 e0       	ldi	r18, 0x02	; 2
    1f9c:	42 e3       	ldi	r20, 0x32	; 50
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	68 ee       	ldi	r22, 0xE8	; 232
    1fa2:	73 e0       	ldi	r23, 0x03	; 3
    1fa4:	84 e2       	ldi	r24, 0x24	; 36
    1fa6:	95 e2       	ldi	r25, 0x25	; 37
    1fa8:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1fac:	84 e2       	ldi	r24, 0x24	; 36
    1fae:	95 e2       	ldi	r25, 0x25	; 37
    1fb0:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
    1fb4:	96 cf       	rjmp	.-212    	; 0x1ee2 <_ZN16CLaserControlApp7OnTimerEv+0x166>
			m_wFlow = (TCC1.CNT * 10) / 8;
			flowtimer.Reset();
		}
		m_wMillSec-=10;
	}
}
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret

00001fbc <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1fbc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN16CLaserControlApp7OnTimerEv>
    1fc0:	08 95       	ret

00001fc2 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	24 85       	ldd	r18, Z+12	; 0x0c
    1fca:	35 85       	ldd	r19, Z+13	; 0x0d
    1fcc:	20 31       	cpi	r18, 0x10	; 16
    1fce:	31 05       	cpc	r19, r1
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fd2:	20 32       	cpi	r18, 0x20	; 32
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fd8:	93 c0       	rjmp	.+294    	; 0x2100 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    1fda:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    1fdc:	80 91 48 06 	lds	r24, 0x0648
    1fe0:	80 fd       	sbrc	r24, 0
    1fe2:	78 c0       	rjmp	.+240    	; 0x20d4 <_ZN16CLaserControlApp6OnINT0Ev+0x112>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    1fe4:	80 91 ae 22 	lds	r24, 0x22AE
    1fe8:	81 11       	cpse	r24, r1
    1fea:	8a c0       	rjmp	.+276    	; 0x2100 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e4 58       	subi	r30, 0x84	; 132
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	89 2b       	or	r24, r25
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    1ffa:	7d c0       	rjmp	.+250    	; 0x20f6 <_ZN16CLaserControlApp6OnINT0Ev+0x134>
    1ffc:	81 c0       	rjmp	.+258    	; 0x2100 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    1ffe:	8a e0       	ldi	r24, 0x0A	; 10
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fe 01       	movw	r30, r28
    2004:	e4 58       	subi	r30, 0x84	; 132
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    200c:	fe 97       	sbiw	r30, 0x3e	; 62
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	a2 81       	ldd	r26, Z+2	; 0x02
    2014:	b3 81       	ldd	r27, Z+3	; 0x03
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	a1 1d       	adc	r26, r1
    201a:	b1 1d       	adc	r27, r1
    201c:	80 83       	st	Z, r24
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	a2 83       	std	Z+2, r26	; 0x02
    2022:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    2024:	34 96       	adiw	r30, 0x04	; 4
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	a2 81       	ldd	r26, Z+2	; 0x02
    202c:	b3 81       	ldd	r27, Z+3	; 0x03
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	a1 1d       	adc	r26, r1
    2032:	b1 1d       	adc	r27, r1
    2034:	80 83       	st	Z, r24
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	a2 83       	std	Z+2, r26	; 0x02
    203a:	b3 83       	std	Z+3, r27	; 0x03
						
						if (laserTimerDutyCyclems > 100)
    203c:	4a ad       	ldd	r20, Y+58	; 0x3a
    203e:	5b ad       	ldd	r21, Y+59	; 0x3b
    2040:	45 36       	cpi	r20, 0x65	; 101
    2042:	51 05       	cpc	r21, r1
    2044:	50 f0       	brcs	.+20     	; 0x205a <_ZN16CLaserControlApp6OnINT0Ev+0x98>
							player.SoundStart(500, 50, 0);
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	42 e3       	ldi	r20, 0x32	; 50
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	64 ef       	ldi	r22, 0xF4	; 244
    204e:	71 e0       	ldi	r23, 0x01	; 1
    2050:	84 e2       	ldi	r24, 0x24	; 36
    2052:	95 e2       	ldi	r25, 0x25	; 37
    2054:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
    2058:	09 c0       	rjmp	.+18     	; 0x206c <_ZN16CLaserControlApp6OnINT0Ev+0xaa>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    205a:	56 95       	lsr	r21
    205c:	47 95       	ror	r20
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	64 ef       	ldi	r22, 0xF4	; 244
    2062:	71 e0       	ldi	r23, 0x01	; 1
    2064:	84 e2       	ldi	r24, 0x24	; 36
    2066:	95 e2       	ldi	r25, 0x25	; 37
    2068:	0e 94 c2 2c 	call	0x5984	; 0x5984 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    206c:	84 e2       	ldi	r24, 0x24	; 36
    206e:	95 e2       	ldi	r25, 0x25	; 37
    2070:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    2074:	88 ad       	ldd	r24, Y+56	; 0x38
    2076:	99 ad       	ldd	r25, Y+57	; 0x39
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	29 f0       	breq	.+10     	; 0x2086 <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
						TCF0.CNT = laserTimerDutyCycle - 1;
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	80 93 20 0b 	sts	0x0B20, r24
    2082:	90 93 21 0b 	sts	0x0B21, r25
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    2086:	68 ad       	ldd	r22, Y+56	; 0x38
    2088:	79 ad       	ldd	r23, Y+57	; 0x39
    208a:	8c e5       	ldi	r24, 0x5C	; 92
    208c:	95 e2       	ldi	r25, 0x25	; 37
    208e:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    2092:	68 ad       	ldd	r22, Y+56	; 0x38
    2094:	79 ad       	ldd	r23, Y+57	; 0x39
    2096:	8c e5       	ldi	r24, 0x5C	; 92
    2098:	95 e2       	ldi	r25, 0x25	; 37
    209a:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    209e:	6e a9       	ldd	r22, Y+54	; 0x36
    20a0:	7f a9       	ldd	r23, Y+55	; 0x37
    20a2:	8c e5       	ldi	r24, 0x5C	; 92
    20a4:	95 e2       	ldi	r25, 0x25	; 37
    20a6:	0e 94 36 30 	call	0x606c	; 0x606c <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    20aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	49 f4       	brne	.+18     	; 0x20c2 <_ZN16CLaserControlApp6OnINT0Ev+0x100>
    20b0:	ff ef       	ldi	r31, 0xFF	; 255
    20b2:	27 e8       	ldi	r18, 0x87	; 135
    20b4:	83 e1       	ldi	r24, 0x13	; 19
    20b6:	f1 50       	subi	r31, 0x01	; 1
    20b8:	20 40       	sbci	r18, 0x00	; 0
    20ba:	80 40       	sbci	r24, 0x00	; 0
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <_ZN16CLaserControlApp6OnINT0Ev+0xf4>
    20be:	00 c0       	rjmp	.+0      	; 0x20c0 <_ZN16CLaserControlApp6OnINT0Ev+0xfe>
    20c0:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    20c2:	e0 e4       	ldi	r30, 0x40	; 64
    20c4:	f6 e0       	ldi	r31, 0x06	; 6
    20c6:	84 85       	ldd	r24, Z+12	; 0x0c
    20c8:	8e 7f       	andi	r24, 0xFE	; 254
    20ca:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 ae 22 	sts	0x22AE, r24
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    20d4:	10 92 ae 22 	sts	0x22AE, r1
				
				laserTimer.Stop();
    20d8:	8c e5       	ldi	r24, 0x5C	; 92
    20da:	95 e2       	ldi	r25, 0x25	; 37
    20dc:	0e 94 43 30 	call	0x6086	; 0x6086 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    20e0:	60 e1       	ldi	r22, 0x10	; 16
    20e2:	8c e5       	ldi	r24, 0x5C	; 92
    20e4:	95 e2       	ldi	r25, 0x25	; 37
    20e6:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    20ea:	60 e2       	ldi	r22, 0x20	; 32
    20ec:	8c e5       	ldi	r24, 0x5C	; 92
    20ee:	95 e2       	ldi	r25, 0x25	; 37
    20f0:	0e 94 58 30 	call	0x60b0	; 0x60b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    20f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <_ZN16CLaserControlApp6OnINT0Ev+0x13c>
    20fc:	bb cf       	rjmp	.-138    	; 0x2074 <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    20fe:	7f cf       	rjmp	.-258    	; 0x1ffe <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    2106:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN16CLaserControlApp6OnINT0Ev>
    210a:	08 95       	ret

0000210c <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    210c:	cf 92       	push	r12
    210e:	df 92       	push	r13
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	7c 01       	movw	r14, r24
    211e:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    2120:	41 15       	cp	r20, r1
    2122:	51 05       	cpc	r21, r1
    2124:	b1 f0       	breq	.+44     	; 0x2152 <_Z11ConvertDataPvS_jj+0x46>
    2126:	6b 01       	movw	r12, r22
    2128:	c4 0e       	add	r12, r20
    212a:	d5 1e       	adc	r13, r21
    212c:	eb 01       	movw	r28, r22
    212e:	26 1b       	sub	r18, r22
    2130:	37 0b       	sbc	r19, r23
    2132:	c9 01       	movw	r24, r18
    2134:	8c 0f       	add	r24, r28
    2136:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    2138:	b8 01       	movw	r22, r16
    213a:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodhi4>
    213e:	fc 01       	movw	r30, r24
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	e4 27       	eor	r30, r20
    2144:	ee 0d       	add	r30, r14
    2146:	ff 1d       	adc	r31, r15
    2148:	89 91       	ld	r24, Y+
    214a:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    214c:	cc 15       	cp	r28, r12
    214e:	dd 05       	cpc	r29, r13
    2150:	81 f7       	brne	.-32     	; 0x2132 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	df 90       	pop	r13
    2160:	cf 90       	pop	r12
    2162:	08 95       	ret

00002164 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    2164:	68 17       	cp	r22, r24
    2166:	79 07       	cpc	r23, r25
    2168:	08 f4       	brcc	.+2      	; 0x216c <_Z3minjj+0x8>
    216a:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    216c:	08 95       	ret

0000216e <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    216e:	86 17       	cp	r24, r22
    2170:	97 07       	cpc	r25, r23
    2172:	08 f4       	brcc	.+2      	; 0x2176 <_Z3maxjj+0x8>
    2174:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    2176:	08 95       	ret

00002178 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    2178:	98 27       	eor	r25, r24
    217a:	89 27       	eor	r24, r25
    217c:	98 27       	eor	r25, r24
    217e:	08 95       	ret

00002180 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    2180:	9b 01       	movw	r18, r22
    2182:	bc 01       	movw	r22, r24
    2184:	c9 01       	movw	r24, r18
}
    2186:	08 95       	ret

00002188 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    2188:	08 95       	ret

0000218a <_ZN4CSPID1Ev>:
    218a:	08 95       	ret

0000218c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    218c:	ef 92       	push	r14
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	ec 01       	movw	r28, r24
    2198:	e0 e8       	ldi	r30, 0x80	; 128
    219a:	f6 e0       	ldi	r31, 0x06	; 6
    219c:	90 eb       	ldi	r25, 0xB0	; 176
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 ec       	ldi	r24, 0xC0	; 192
    21a2:	84 8b       	std	Z+20, r24	; 0x14
    21a4:	85 8b       	std	Z+21, r24	; 0x15
    21a6:	87 8b       	std	Z+23, r24	; 0x17
    21a8:	95 83       	std	Z+5, r25	; 0x05
    21aa:	61 11       	cpse	r22, r1
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    21ae:	80 e4       	ldi	r24, 0x40	; 64
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    21b2:	80 e5       	ldi	r24, 0x50	; 80
    21b4:	01 11       	cpse	r16, r1
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    21bc:	30 e8       	ldi	r19, 0x80	; 128
    21be:	41 11       	cpse	r20, r1
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    21c6:	90 e2       	ldi	r25, 0x20	; 32
    21c8:	22 0f       	add	r18, r18
    21ca:	22 0f       	add	r18, r18
    21cc:	e2 2a       	or	r14, r18
    21ce:	e8 2a       	or	r14, r24
    21d0:	e3 2a       	or	r14, r19
    21d2:	e9 2a       	or	r14, r25
    21d4:	00 ec       	ldi	r16, 0xC0	; 192
    21d6:	1a e0       	ldi	r17, 0x0A	; 10
    21d8:	f8 01       	movw	r30, r16
    21da:	e0 82       	st	Z, r14
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 c8 32 	call	0x6590	; 0x6590 <malloc>
    21e4:	88 83       	st	Y, r24
    21e6:	99 83       	std	Y+1, r25	; 0x01
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	f8 01       	movw	r30, r16
    21ec:	81 83       	std	Z+1, r24	; 0x01
    21ee:	8f e3       	ldi	r24, 0x3F	; 63
    21f0:	91 e1       	ldi	r25, 0x11	; 17
    21f2:	80 93 22 23 	sts	0x2322, r24
    21f6:	90 93 23 23 	sts	0x2323, r25
    21fa:	c0 93 18 24 	sts	0x2418, r28
    21fe:	d0 93 19 24 	sts	0x2419, r29
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ef 90       	pop	r14
    220c:	08 95       	ret

0000220e <_ZN4CSPI4SendEPhj>:
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	ec 01       	movw	r28, r24
    2214:	4a 83       	std	Y+2, r20	; 0x02
    2216:	5b 83       	std	Y+3, r21	; 0x03
    2218:	4c 83       	std	Y+4, r20	; 0x04
    221a:	5d 83       	std	Y+5, r21	; 0x05
    221c:	88 81       	ld	r24, Y
    221e:	99 81       	ldd	r25, Y+1	; 0x01
    2220:	0e 94 f5 33 	call	0x67ea	; 0x67ea <memcpy>
    2224:	80 e1       	ldi	r24, 0x10	; 16
    2226:	80 93 86 06 	sts	0x0686, r24
    222a:	88 81       	ld	r24, Y
    222c:	99 81       	ldd	r25, Y+1	; 0x01
    222e:	4a 81       	ldd	r20, Y+2	; 0x02
    2230:	5b 81       	ldd	r21, Y+3	; 0x03
    2232:	9a 01       	movw	r18, r20
    2234:	21 50       	subi	r18, 0x01	; 1
    2236:	31 09       	sbc	r19, r1
    2238:	2a 83       	std	Y+2, r18	; 0x02
    223a:	3b 83       	std	Y+3, r19	; 0x03
    223c:	fc 01       	movw	r30, r24
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	80 81       	ld	r24, Z
    2244:	80 93 c3 0a 	sts	0x0AC3, r24
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	08 95       	ret

0000224e <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    224e:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	89 2b       	or	r24, r25
    2256:	79 f0       	breq	.+30     	; 0x2276 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2258:	40 81       	ld	r20, Z
    225a:	51 81       	ldd	r21, Z+1	; 0x01
    225c:	22 81       	ldd	r18, Z+2	; 0x02
    225e:	33 81       	ldd	r19, Z+3	; 0x03
    2260:	c9 01       	movw	r24, r18
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	82 83       	std	Z+2, r24	; 0x02
    2266:	93 83       	std	Z+3, r25	; 0x03
    2268:	fa 01       	movw	r30, r20
    226a:	e8 0f       	add	r30, r24
    226c:	f9 1f       	adc	r31, r25
    226e:	80 81       	ld	r24, Z
    2270:	80 93 c3 0a 	sts	0x0AC3, r24
    2274:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    2276:	80 e1       	ldi	r24, 0x10	; 16
    2278:	80 93 85 06 	sts	0x0685, r24
    227c:	08 95       	ret

0000227e <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    227e:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN4CSPI10OnTransmitEv>
    2282:	08 95       	ret

00002284 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    2284:	2e e7       	ldi	r18, 0x7E	; 126
    2286:	31 e2       	ldi	r19, 0x21	; 33
    2288:	fc 01       	movw	r30, r24
    228a:	20 83       	st	Z, r18
    228c:	31 83       	std	Z+1, r19	; 0x01
    228e:	08 95       	ret

00002290 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    2290:	08 95       	ret

00002292 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    2292:	22 ea       	ldi	r18, 0xA2	; 162
    2294:	31 e2       	ldi	r19, 0x21	; 33
    2296:	fc 01       	movw	r30, r24
    2298:	20 83       	st	Z, r18
    229a:	31 83       	std	Z+1, r19	; 0x01
    229c:	08 95       	ret

0000229e <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    229e:	08 95       	ret

000022a0 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    22a0:	20 ec       	ldi	r18, 0xC0	; 192
    22a2:	31 e2       	ldi	r19, 0x21	; 33
    22a4:	fc 01       	movw	r30, r24
    22a6:	20 83       	st	Z, r18
    22a8:	31 83       	std	Z+1, r19	; 0x01
    22aa:	08 95       	ret

000022ac <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    22ac:	08 95       	ret

000022ae <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    22ae:	1f 92       	push	r1
    22b0:	0f 92       	push	r0
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	0f 92       	push	r0
    22b6:	11 24       	eor	r1, r1
    22b8:	0b b6       	in	r0, 0x3b	; 59
    22ba:	0f 92       	push	r0
    22bc:	2f 93       	push	r18
    22be:	3f 93       	push	r19
    22c0:	4f 93       	push	r20
    22c2:	5f 93       	push	r21
    22c4:	6f 93       	push	r22
    22c6:	7f 93       	push	r23
    22c8:	8f 93       	push	r24
    22ca:	9f 93       	push	r25
    22cc:	af 93       	push	r26
    22ce:	bf 93       	push	r27
    22d0:	ef 93       	push	r30
    22d2:	ff 93       	push	r31
    22d4:	e0 91 b2 22 	lds	r30, 0x22B2
    22d8:	f0 91 b3 22 	lds	r31, 0x22B3
    22dc:	30 97       	sbiw	r30, 0x00	; 0
    22de:	29 f0       	breq	.+10     	; 0x22ea <__vector_1+0x3c>
    22e0:	80 91 a8 23 	lds	r24, 0x23A8
    22e4:	90 91 a9 23 	lds	r25, 0x23A9
    22e8:	19 95       	eicall
    22ea:	ff 91       	pop	r31
    22ec:	ef 91       	pop	r30
    22ee:	bf 91       	pop	r27
    22f0:	af 91       	pop	r26
    22f2:	9f 91       	pop	r25
    22f4:	8f 91       	pop	r24
    22f6:	7f 91       	pop	r23
    22f8:	6f 91       	pop	r22
    22fa:	5f 91       	pop	r21
    22fc:	4f 91       	pop	r20
    22fe:	3f 91       	pop	r19
    2300:	2f 91       	pop	r18
    2302:	0f 90       	pop	r0
    2304:	0b be       	out	0x3b, r0	; 59
    2306:	0f 90       	pop	r0
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti

00002310 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    2310:	1f 92       	push	r1
    2312:	0f 92       	push	r0
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	0f 92       	push	r0
    2318:	11 24       	eor	r1, r1
    231a:	0b b6       	in	r0, 0x3b	; 59
    231c:	0f 92       	push	r0
    231e:	2f 93       	push	r18
    2320:	3f 93       	push	r19
    2322:	4f 93       	push	r20
    2324:	5f 93       	push	r21
    2326:	6f 93       	push	r22
    2328:	7f 93       	push	r23
    232a:	8f 93       	push	r24
    232c:	9f 93       	push	r25
    232e:	af 93       	push	r26
    2330:	bf 93       	push	r27
    2332:	ef 93       	push	r30
    2334:	ff 93       	push	r31
    2336:	e0 91 b4 22 	lds	r30, 0x22B4
    233a:	f0 91 b5 22 	lds	r31, 0x22B5
    233e:	30 97       	sbiw	r30, 0x00	; 0
    2340:	29 f0       	breq	.+10     	; 0x234c <__vector_2+0x3c>
    2342:	80 91 aa 23 	lds	r24, 0x23AA
    2346:	90 91 ab 23 	lds	r25, 0x23AB
    234a:	19 95       	eicall
    234c:	ff 91       	pop	r31
    234e:	ef 91       	pop	r30
    2350:	bf 91       	pop	r27
    2352:	af 91       	pop	r26
    2354:	9f 91       	pop	r25
    2356:	8f 91       	pop	r24
    2358:	7f 91       	pop	r23
    235a:	6f 91       	pop	r22
    235c:	5f 91       	pop	r21
    235e:	4f 91       	pop	r20
    2360:	3f 91       	pop	r19
    2362:	2f 91       	pop	r18
    2364:	0f 90       	pop	r0
    2366:	0b be       	out	0x3b, r0	; 59
    2368:	0f 90       	pop	r0
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	0f 90       	pop	r0
    236e:	1f 90       	pop	r1
    2370:	18 95       	reti

00002372 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    2372:	1f 92       	push	r1
    2374:	0f 92       	push	r0
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	0f 92       	push	r0
    237a:	11 24       	eor	r1, r1
    237c:	0b b6       	in	r0, 0x3b	; 59
    237e:	0f 92       	push	r0
    2380:	2f 93       	push	r18
    2382:	3f 93       	push	r19
    2384:	4f 93       	push	r20
    2386:	5f 93       	push	r21
    2388:	6f 93       	push	r22
    238a:	7f 93       	push	r23
    238c:	8f 93       	push	r24
    238e:	9f 93       	push	r25
    2390:	af 93       	push	r26
    2392:	bf 93       	push	r27
    2394:	ef 93       	push	r30
    2396:	ff 93       	push	r31
    2398:	e0 91 b6 22 	lds	r30, 0x22B6
    239c:	f0 91 b7 22 	lds	r31, 0x22B7
    23a0:	30 97       	sbiw	r30, 0x00	; 0
    23a2:	29 f0       	breq	.+10     	; 0x23ae <__vector_3+0x3c>
    23a4:	80 91 ac 23 	lds	r24, 0x23AC
    23a8:	90 91 ad 23 	lds	r25, 0x23AD
    23ac:	19 95       	eicall
    23ae:	ff 91       	pop	r31
    23b0:	ef 91       	pop	r30
    23b2:	bf 91       	pop	r27
    23b4:	af 91       	pop	r26
    23b6:	9f 91       	pop	r25
    23b8:	8f 91       	pop	r24
    23ba:	7f 91       	pop	r23
    23bc:	6f 91       	pop	r22
    23be:	5f 91       	pop	r21
    23c0:	4f 91       	pop	r20
    23c2:	3f 91       	pop	r19
    23c4:	2f 91       	pop	r18
    23c6:	0f 90       	pop	r0
    23c8:	0b be       	out	0x3b, r0	; 59
    23ca:	0f 90       	pop	r0
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	0f 90       	pop	r0
    23d0:	1f 90       	pop	r1
    23d2:	18 95       	reti

000023d4 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    23d4:	1f 92       	push	r1
    23d6:	0f 92       	push	r0
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	0f 92       	push	r0
    23dc:	11 24       	eor	r1, r1
    23de:	0b b6       	in	r0, 0x3b	; 59
    23e0:	0f 92       	push	r0
    23e2:	2f 93       	push	r18
    23e4:	3f 93       	push	r19
    23e6:	4f 93       	push	r20
    23e8:	5f 93       	push	r21
    23ea:	6f 93       	push	r22
    23ec:	7f 93       	push	r23
    23ee:	8f 93       	push	r24
    23f0:	9f 93       	push	r25
    23f2:	af 93       	push	r26
    23f4:	bf 93       	push	r27
    23f6:	ef 93       	push	r30
    23f8:	ff 93       	push	r31
    23fa:	e0 91 b8 22 	lds	r30, 0x22B8
    23fe:	f0 91 b9 22 	lds	r31, 0x22B9
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	29 f0       	breq	.+10     	; 0x2410 <__vector_4+0x3c>
    2406:	80 91 ae 23 	lds	r24, 0x23AE
    240a:	90 91 af 23 	lds	r25, 0x23AF
    240e:	19 95       	eicall
    2410:	ff 91       	pop	r31
    2412:	ef 91       	pop	r30
    2414:	bf 91       	pop	r27
    2416:	af 91       	pop	r26
    2418:	9f 91       	pop	r25
    241a:	8f 91       	pop	r24
    241c:	7f 91       	pop	r23
    241e:	6f 91       	pop	r22
    2420:	5f 91       	pop	r21
    2422:	4f 91       	pop	r20
    2424:	3f 91       	pop	r19
    2426:	2f 91       	pop	r18
    2428:	0f 90       	pop	r0
    242a:	0b be       	out	0x3b, r0	; 59
    242c:	0f 90       	pop	r0
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	0f 90       	pop	r0
    2432:	1f 90       	pop	r1
    2434:	18 95       	reti

00002436 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2436:	1f 92       	push	r1
    2438:	0f 92       	push	r0
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	0f 92       	push	r0
    243e:	11 24       	eor	r1, r1
    2440:	0b b6       	in	r0, 0x3b	; 59
    2442:	0f 92       	push	r0
    2444:	2f 93       	push	r18
    2446:	3f 93       	push	r19
    2448:	4f 93       	push	r20
    244a:	5f 93       	push	r21
    244c:	6f 93       	push	r22
    244e:	7f 93       	push	r23
    2450:	8f 93       	push	r24
    2452:	9f 93       	push	r25
    2454:	af 93       	push	r26
    2456:	bf 93       	push	r27
    2458:	ef 93       	push	r30
    245a:	ff 93       	push	r31
    245c:	e0 91 ba 22 	lds	r30, 0x22BA
    2460:	f0 91 bb 22 	lds	r31, 0x22BB
    2464:	30 97       	sbiw	r30, 0x00	; 0
    2466:	29 f0       	breq	.+10     	; 0x2472 <__vector_5+0x3c>
    2468:	80 91 b0 23 	lds	r24, 0x23B0
    246c:	90 91 b1 23 	lds	r25, 0x23B1
    2470:	19 95       	eicall
    2472:	ff 91       	pop	r31
    2474:	ef 91       	pop	r30
    2476:	bf 91       	pop	r27
    2478:	af 91       	pop	r26
    247a:	9f 91       	pop	r25
    247c:	8f 91       	pop	r24
    247e:	7f 91       	pop	r23
    2480:	6f 91       	pop	r22
    2482:	5f 91       	pop	r21
    2484:	4f 91       	pop	r20
    2486:	3f 91       	pop	r19
    2488:	2f 91       	pop	r18
    248a:	0f 90       	pop	r0
    248c:	0b be       	out	0x3b, r0	; 59
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti

00002498 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    2498:	1f 92       	push	r1
    249a:	0f 92       	push	r0
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	0f 92       	push	r0
    24a0:	11 24       	eor	r1, r1
    24a2:	0b b6       	in	r0, 0x3b	; 59
    24a4:	0f 92       	push	r0
    24a6:	2f 93       	push	r18
    24a8:	3f 93       	push	r19
    24aa:	4f 93       	push	r20
    24ac:	5f 93       	push	r21
    24ae:	6f 93       	push	r22
    24b0:	7f 93       	push	r23
    24b2:	8f 93       	push	r24
    24b4:	9f 93       	push	r25
    24b6:	af 93       	push	r26
    24b8:	bf 93       	push	r27
    24ba:	ef 93       	push	r30
    24bc:	ff 93       	push	r31
    24be:	e0 91 bc 22 	lds	r30, 0x22BC
    24c2:	f0 91 bd 22 	lds	r31, 0x22BD
    24c6:	30 97       	sbiw	r30, 0x00	; 0
    24c8:	29 f0       	breq	.+10     	; 0x24d4 <__vector_6+0x3c>
    24ca:	80 91 b2 23 	lds	r24, 0x23B2
    24ce:	90 91 b3 23 	lds	r25, 0x23B3
    24d2:	19 95       	eicall
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	bf 91       	pop	r27
    24da:	af 91       	pop	r26
    24dc:	9f 91       	pop	r25
    24de:	8f 91       	pop	r24
    24e0:	7f 91       	pop	r23
    24e2:	6f 91       	pop	r22
    24e4:	5f 91       	pop	r21
    24e6:	4f 91       	pop	r20
    24e8:	3f 91       	pop	r19
    24ea:	2f 91       	pop	r18
    24ec:	0f 90       	pop	r0
    24ee:	0b be       	out	0x3b, r0	; 59
    24f0:	0f 90       	pop	r0
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	0f 90       	pop	r0
    24f6:	1f 90       	pop	r1
    24f8:	18 95       	reti

000024fa <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    24fa:	1f 92       	push	r1
    24fc:	0f 92       	push	r0
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	0f 92       	push	r0
    2502:	11 24       	eor	r1, r1
    2504:	0b b6       	in	r0, 0x3b	; 59
    2506:	0f 92       	push	r0
    2508:	2f 93       	push	r18
    250a:	3f 93       	push	r19
    250c:	4f 93       	push	r20
    250e:	5f 93       	push	r21
    2510:	6f 93       	push	r22
    2512:	7f 93       	push	r23
    2514:	8f 93       	push	r24
    2516:	9f 93       	push	r25
    2518:	af 93       	push	r26
    251a:	bf 93       	push	r27
    251c:	ef 93       	push	r30
    251e:	ff 93       	push	r31
    2520:	e0 91 be 22 	lds	r30, 0x22BE
    2524:	f0 91 bf 22 	lds	r31, 0x22BF
    2528:	30 97       	sbiw	r30, 0x00	; 0
    252a:	29 f0       	breq	.+10     	; 0x2536 <__vector_7+0x3c>
    252c:	80 91 b4 23 	lds	r24, 0x23B4
    2530:	90 91 b5 23 	lds	r25, 0x23B5
    2534:	19 95       	eicall
    2536:	ff 91       	pop	r31
    2538:	ef 91       	pop	r30
    253a:	bf 91       	pop	r27
    253c:	af 91       	pop	r26
    253e:	9f 91       	pop	r25
    2540:	8f 91       	pop	r24
    2542:	7f 91       	pop	r23
    2544:	6f 91       	pop	r22
    2546:	5f 91       	pop	r21
    2548:	4f 91       	pop	r20
    254a:	3f 91       	pop	r19
    254c:	2f 91       	pop	r18
    254e:	0f 90       	pop	r0
    2550:	0b be       	out	0x3b, r0	; 59
    2552:	0f 90       	pop	r0
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	0f 90       	pop	r0
    2558:	1f 90       	pop	r1
    255a:	18 95       	reti

0000255c <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    255c:	1f 92       	push	r1
    255e:	0f 92       	push	r0
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	0f 92       	push	r0
    2564:	11 24       	eor	r1, r1
    2566:	0b b6       	in	r0, 0x3b	; 59
    2568:	0f 92       	push	r0
    256a:	2f 93       	push	r18
    256c:	3f 93       	push	r19
    256e:	4f 93       	push	r20
    2570:	5f 93       	push	r21
    2572:	6f 93       	push	r22
    2574:	7f 93       	push	r23
    2576:	8f 93       	push	r24
    2578:	9f 93       	push	r25
    257a:	af 93       	push	r26
    257c:	bf 93       	push	r27
    257e:	ef 93       	push	r30
    2580:	ff 93       	push	r31
    2582:	e0 91 c0 22 	lds	r30, 0x22C0
    2586:	f0 91 c1 22 	lds	r31, 0x22C1
    258a:	30 97       	sbiw	r30, 0x00	; 0
    258c:	29 f0       	breq	.+10     	; 0x2598 <__vector_8+0x3c>
    258e:	80 91 b6 23 	lds	r24, 0x23B6
    2592:	90 91 b7 23 	lds	r25, 0x23B7
    2596:	19 95       	eicall
    2598:	ff 91       	pop	r31
    259a:	ef 91       	pop	r30
    259c:	bf 91       	pop	r27
    259e:	af 91       	pop	r26
    25a0:	9f 91       	pop	r25
    25a2:	8f 91       	pop	r24
    25a4:	7f 91       	pop	r23
    25a6:	6f 91       	pop	r22
    25a8:	5f 91       	pop	r21
    25aa:	4f 91       	pop	r20
    25ac:	3f 91       	pop	r19
    25ae:	2f 91       	pop	r18
    25b0:	0f 90       	pop	r0
    25b2:	0b be       	out	0x3b, r0	; 59
    25b4:	0f 90       	pop	r0
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	0f 90       	pop	r0
    25ba:	1f 90       	pop	r1
    25bc:	18 95       	reti

000025be <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    25be:	1f 92       	push	r1
    25c0:	0f 92       	push	r0
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	0f 92       	push	r0
    25c6:	11 24       	eor	r1, r1
    25c8:	0b b6       	in	r0, 0x3b	; 59
    25ca:	0f 92       	push	r0
    25cc:	2f 93       	push	r18
    25ce:	3f 93       	push	r19
    25d0:	4f 93       	push	r20
    25d2:	5f 93       	push	r21
    25d4:	6f 93       	push	r22
    25d6:	7f 93       	push	r23
    25d8:	8f 93       	push	r24
    25da:	9f 93       	push	r25
    25dc:	af 93       	push	r26
    25de:	bf 93       	push	r27
    25e0:	ef 93       	push	r30
    25e2:	ff 93       	push	r31
    25e4:	e0 91 c2 22 	lds	r30, 0x22C2
    25e8:	f0 91 c3 22 	lds	r31, 0x22C3
    25ec:	30 97       	sbiw	r30, 0x00	; 0
    25ee:	29 f0       	breq	.+10     	; 0x25fa <__vector_9+0x3c>
    25f0:	80 91 b8 23 	lds	r24, 0x23B8
    25f4:	90 91 b9 23 	lds	r25, 0x23B9
    25f8:	19 95       	eicall
    25fa:	ff 91       	pop	r31
    25fc:	ef 91       	pop	r30
    25fe:	bf 91       	pop	r27
    2600:	af 91       	pop	r26
    2602:	9f 91       	pop	r25
    2604:	8f 91       	pop	r24
    2606:	7f 91       	pop	r23
    2608:	6f 91       	pop	r22
    260a:	5f 91       	pop	r21
    260c:	4f 91       	pop	r20
    260e:	3f 91       	pop	r19
    2610:	2f 91       	pop	r18
    2612:	0f 90       	pop	r0
    2614:	0b be       	out	0x3b, r0	; 59
    2616:	0f 90       	pop	r0
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	0f 90       	pop	r0
    261c:	1f 90       	pop	r1
    261e:	18 95       	reti

00002620 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    2620:	1f 92       	push	r1
    2622:	0f 92       	push	r0
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	0f 92       	push	r0
    2628:	11 24       	eor	r1, r1
    262a:	0b b6       	in	r0, 0x3b	; 59
    262c:	0f 92       	push	r0
    262e:	2f 93       	push	r18
    2630:	3f 93       	push	r19
    2632:	4f 93       	push	r20
    2634:	5f 93       	push	r21
    2636:	6f 93       	push	r22
    2638:	7f 93       	push	r23
    263a:	8f 93       	push	r24
    263c:	9f 93       	push	r25
    263e:	af 93       	push	r26
    2640:	bf 93       	push	r27
    2642:	ef 93       	push	r30
    2644:	ff 93       	push	r31
    2646:	e0 91 c4 22 	lds	r30, 0x22C4
    264a:	f0 91 c5 22 	lds	r31, 0x22C5
    264e:	30 97       	sbiw	r30, 0x00	; 0
    2650:	29 f0       	breq	.+10     	; 0x265c <__vector_10+0x3c>
    2652:	80 91 ba 23 	lds	r24, 0x23BA
    2656:	90 91 bb 23 	lds	r25, 0x23BB
    265a:	19 95       	eicall
    265c:	ff 91       	pop	r31
    265e:	ef 91       	pop	r30
    2660:	bf 91       	pop	r27
    2662:	af 91       	pop	r26
    2664:	9f 91       	pop	r25
    2666:	8f 91       	pop	r24
    2668:	7f 91       	pop	r23
    266a:	6f 91       	pop	r22
    266c:	5f 91       	pop	r21
    266e:	4f 91       	pop	r20
    2670:	3f 91       	pop	r19
    2672:	2f 91       	pop	r18
    2674:	0f 90       	pop	r0
    2676:	0b be       	out	0x3b, r0	; 59
    2678:	0f 90       	pop	r0
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	0f 90       	pop	r0
    267e:	1f 90       	pop	r1
    2680:	18 95       	reti

00002682 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2682:	1f 92       	push	r1
    2684:	0f 92       	push	r0
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	0f 92       	push	r0
    268a:	11 24       	eor	r1, r1
    268c:	0b b6       	in	r0, 0x3b	; 59
    268e:	0f 92       	push	r0
    2690:	2f 93       	push	r18
    2692:	3f 93       	push	r19
    2694:	4f 93       	push	r20
    2696:	5f 93       	push	r21
    2698:	6f 93       	push	r22
    269a:	7f 93       	push	r23
    269c:	8f 93       	push	r24
    269e:	9f 93       	push	r25
    26a0:	af 93       	push	r26
    26a2:	bf 93       	push	r27
    26a4:	ef 93       	push	r30
    26a6:	ff 93       	push	r31
    26a8:	e0 91 c6 22 	lds	r30, 0x22C6
    26ac:	f0 91 c7 22 	lds	r31, 0x22C7
    26b0:	30 97       	sbiw	r30, 0x00	; 0
    26b2:	29 f0       	breq	.+10     	; 0x26be <__vector_11+0x3c>
    26b4:	80 91 bc 23 	lds	r24, 0x23BC
    26b8:	90 91 bd 23 	lds	r25, 0x23BD
    26bc:	19 95       	eicall
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0b be       	out	0x3b, r0	; 59
    26da:	0f 90       	pop	r0
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	0f 90       	pop	r0
    26e0:	1f 90       	pop	r1
    26e2:	18 95       	reti

000026e4 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    26e4:	1f 92       	push	r1
    26e6:	0f 92       	push	r0
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	0f 92       	push	r0
    26ec:	11 24       	eor	r1, r1
    26ee:	0b b6       	in	r0, 0x3b	; 59
    26f0:	0f 92       	push	r0
    26f2:	2f 93       	push	r18
    26f4:	3f 93       	push	r19
    26f6:	4f 93       	push	r20
    26f8:	5f 93       	push	r21
    26fa:	6f 93       	push	r22
    26fc:	7f 93       	push	r23
    26fe:	8f 93       	push	r24
    2700:	9f 93       	push	r25
    2702:	af 93       	push	r26
    2704:	bf 93       	push	r27
    2706:	ef 93       	push	r30
    2708:	ff 93       	push	r31
    270a:	e0 91 c8 22 	lds	r30, 0x22C8
    270e:	f0 91 c9 22 	lds	r31, 0x22C9
    2712:	30 97       	sbiw	r30, 0x00	; 0
    2714:	29 f0       	breq	.+10     	; 0x2720 <__vector_12+0x3c>
    2716:	80 91 be 23 	lds	r24, 0x23BE
    271a:	90 91 bf 23 	lds	r25, 0x23BF
    271e:	19 95       	eicall
    2720:	ff 91       	pop	r31
    2722:	ef 91       	pop	r30
    2724:	bf 91       	pop	r27
    2726:	af 91       	pop	r26
    2728:	9f 91       	pop	r25
    272a:	8f 91       	pop	r24
    272c:	7f 91       	pop	r23
    272e:	6f 91       	pop	r22
    2730:	5f 91       	pop	r21
    2732:	4f 91       	pop	r20
    2734:	3f 91       	pop	r19
    2736:	2f 91       	pop	r18
    2738:	0f 90       	pop	r0
    273a:	0b be       	out	0x3b, r0	; 59
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	0f 90       	pop	r0
    2742:	1f 90       	pop	r1
    2744:	18 95       	reti

00002746 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	0b b6       	in	r0, 0x3b	; 59
    2752:	0f 92       	push	r0
    2754:	2f 93       	push	r18
    2756:	3f 93       	push	r19
    2758:	4f 93       	push	r20
    275a:	5f 93       	push	r21
    275c:	6f 93       	push	r22
    275e:	7f 93       	push	r23
    2760:	8f 93       	push	r24
    2762:	9f 93       	push	r25
    2764:	af 93       	push	r26
    2766:	bf 93       	push	r27
    2768:	ef 93       	push	r30
    276a:	ff 93       	push	r31
    276c:	e0 91 ca 22 	lds	r30, 0x22CA
    2770:	f0 91 cb 22 	lds	r31, 0x22CB
    2774:	30 97       	sbiw	r30, 0x00	; 0
    2776:	29 f0       	breq	.+10     	; 0x2782 <__vector_13+0x3c>
    2778:	80 91 c0 23 	lds	r24, 0x23C0
    277c:	90 91 c1 23 	lds	r25, 0x23C1
    2780:	19 95       	eicall
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	bf 91       	pop	r27
    2788:	af 91       	pop	r26
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	7f 91       	pop	r23
    2790:	6f 91       	pop	r22
    2792:	5f 91       	pop	r21
    2794:	4f 91       	pop	r20
    2796:	3f 91       	pop	r19
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0b be       	out	0x3b, r0	; 59
    279e:	0f 90       	pop	r0
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	0f 90       	pop	r0
    27a4:	1f 90       	pop	r1
    27a6:	18 95       	reti

000027a8 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    27a8:	1f 92       	push	r1
    27aa:	0f 92       	push	r0
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	0f 92       	push	r0
    27b0:	11 24       	eor	r1, r1
    27b2:	0b b6       	in	r0, 0x3b	; 59
    27b4:	0f 92       	push	r0
    27b6:	2f 93       	push	r18
    27b8:	3f 93       	push	r19
    27ba:	4f 93       	push	r20
    27bc:	5f 93       	push	r21
    27be:	6f 93       	push	r22
    27c0:	7f 93       	push	r23
    27c2:	8f 93       	push	r24
    27c4:	9f 93       	push	r25
    27c6:	af 93       	push	r26
    27c8:	bf 93       	push	r27
    27ca:	ef 93       	push	r30
    27cc:	ff 93       	push	r31
    27ce:	e0 91 cc 22 	lds	r30, 0x22CC
    27d2:	f0 91 cd 22 	lds	r31, 0x22CD
    27d6:	30 97       	sbiw	r30, 0x00	; 0
    27d8:	29 f0       	breq	.+10     	; 0x27e4 <__vector_14+0x3c>
    27da:	80 91 c2 23 	lds	r24, 0x23C2
    27de:	90 91 c3 23 	lds	r25, 0x23C3
    27e2:	19 95       	eicall
    27e4:	ff 91       	pop	r31
    27e6:	ef 91       	pop	r30
    27e8:	bf 91       	pop	r27
    27ea:	af 91       	pop	r26
    27ec:	9f 91       	pop	r25
    27ee:	8f 91       	pop	r24
    27f0:	7f 91       	pop	r23
    27f2:	6f 91       	pop	r22
    27f4:	5f 91       	pop	r21
    27f6:	4f 91       	pop	r20
    27f8:	3f 91       	pop	r19
    27fa:	2f 91       	pop	r18
    27fc:	0f 90       	pop	r0
    27fe:	0b be       	out	0x3b, r0	; 59
    2800:	0f 90       	pop	r0
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	0f 90       	pop	r0
    2806:	1f 90       	pop	r1
    2808:	18 95       	reti

0000280a <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    280a:	1f 92       	push	r1
    280c:	0f 92       	push	r0
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	0f 92       	push	r0
    2812:	11 24       	eor	r1, r1
    2814:	0b b6       	in	r0, 0x3b	; 59
    2816:	0f 92       	push	r0
    2818:	2f 93       	push	r18
    281a:	3f 93       	push	r19
    281c:	4f 93       	push	r20
    281e:	5f 93       	push	r21
    2820:	6f 93       	push	r22
    2822:	7f 93       	push	r23
    2824:	8f 93       	push	r24
    2826:	9f 93       	push	r25
    2828:	af 93       	push	r26
    282a:	bf 93       	push	r27
    282c:	ef 93       	push	r30
    282e:	ff 93       	push	r31
    2830:	e0 91 ce 22 	lds	r30, 0x22CE
    2834:	f0 91 cf 22 	lds	r31, 0x22CF
    2838:	30 97       	sbiw	r30, 0x00	; 0
    283a:	29 f0       	breq	.+10     	; 0x2846 <__vector_15+0x3c>
    283c:	80 91 c4 23 	lds	r24, 0x23C4
    2840:	90 91 c5 23 	lds	r25, 0x23C5
    2844:	19 95       	eicall
    2846:	ff 91       	pop	r31
    2848:	ef 91       	pop	r30
    284a:	bf 91       	pop	r27
    284c:	af 91       	pop	r26
    284e:	9f 91       	pop	r25
    2850:	8f 91       	pop	r24
    2852:	7f 91       	pop	r23
    2854:	6f 91       	pop	r22
    2856:	5f 91       	pop	r21
    2858:	4f 91       	pop	r20
    285a:	3f 91       	pop	r19
    285c:	2f 91       	pop	r18
    285e:	0f 90       	pop	r0
    2860:	0b be       	out	0x3b, r0	; 59
    2862:	0f 90       	pop	r0
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	0f 90       	pop	r0
    2868:	1f 90       	pop	r1
    286a:	18 95       	reti

0000286c <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    286c:	1f 92       	push	r1
    286e:	0f 92       	push	r0
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	0f 92       	push	r0
    2874:	11 24       	eor	r1, r1
    2876:	0b b6       	in	r0, 0x3b	; 59
    2878:	0f 92       	push	r0
    287a:	2f 93       	push	r18
    287c:	3f 93       	push	r19
    287e:	4f 93       	push	r20
    2880:	5f 93       	push	r21
    2882:	6f 93       	push	r22
    2884:	7f 93       	push	r23
    2886:	8f 93       	push	r24
    2888:	9f 93       	push	r25
    288a:	af 93       	push	r26
    288c:	bf 93       	push	r27
    288e:	ef 93       	push	r30
    2890:	ff 93       	push	r31
    2892:	e0 91 d0 22 	lds	r30, 0x22D0
    2896:	f0 91 d1 22 	lds	r31, 0x22D1
    289a:	30 97       	sbiw	r30, 0x00	; 0
    289c:	29 f0       	breq	.+10     	; 0x28a8 <__vector_16+0x3c>
    289e:	80 91 c6 23 	lds	r24, 0x23C6
    28a2:	90 91 c7 23 	lds	r25, 0x23C7
    28a6:	19 95       	eicall
    28a8:	ff 91       	pop	r31
    28aa:	ef 91       	pop	r30
    28ac:	bf 91       	pop	r27
    28ae:	af 91       	pop	r26
    28b0:	9f 91       	pop	r25
    28b2:	8f 91       	pop	r24
    28b4:	7f 91       	pop	r23
    28b6:	6f 91       	pop	r22
    28b8:	5f 91       	pop	r21
    28ba:	4f 91       	pop	r20
    28bc:	3f 91       	pop	r19
    28be:	2f 91       	pop	r18
    28c0:	0f 90       	pop	r0
    28c2:	0b be       	out	0x3b, r0	; 59
    28c4:	0f 90       	pop	r0
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	0f 90       	pop	r0
    28ca:	1f 90       	pop	r1
    28cc:	18 95       	reti

000028ce <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    28ce:	1f 92       	push	r1
    28d0:	0f 92       	push	r0
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	0f 92       	push	r0
    28d6:	11 24       	eor	r1, r1
    28d8:	0b b6       	in	r0, 0x3b	; 59
    28da:	0f 92       	push	r0
    28dc:	2f 93       	push	r18
    28de:	3f 93       	push	r19
    28e0:	4f 93       	push	r20
    28e2:	5f 93       	push	r21
    28e4:	6f 93       	push	r22
    28e6:	7f 93       	push	r23
    28e8:	8f 93       	push	r24
    28ea:	9f 93       	push	r25
    28ec:	af 93       	push	r26
    28ee:	bf 93       	push	r27
    28f0:	ef 93       	push	r30
    28f2:	ff 93       	push	r31
    28f4:	e0 91 d2 22 	lds	r30, 0x22D2
    28f8:	f0 91 d3 22 	lds	r31, 0x22D3
    28fc:	30 97       	sbiw	r30, 0x00	; 0
    28fe:	29 f0       	breq	.+10     	; 0x290a <__vector_17+0x3c>
    2900:	80 91 c8 23 	lds	r24, 0x23C8
    2904:	90 91 c9 23 	lds	r25, 0x23C9
    2908:	19 95       	eicall
    290a:	ff 91       	pop	r31
    290c:	ef 91       	pop	r30
    290e:	bf 91       	pop	r27
    2910:	af 91       	pop	r26
    2912:	9f 91       	pop	r25
    2914:	8f 91       	pop	r24
    2916:	7f 91       	pop	r23
    2918:	6f 91       	pop	r22
    291a:	5f 91       	pop	r21
    291c:	4f 91       	pop	r20
    291e:	3f 91       	pop	r19
    2920:	2f 91       	pop	r18
    2922:	0f 90       	pop	r0
    2924:	0b be       	out	0x3b, r0	; 59
    2926:	0f 90       	pop	r0
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	0f 90       	pop	r0
    292c:	1f 90       	pop	r1
    292e:	18 95       	reti

00002930 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2930:	1f 92       	push	r1
    2932:	0f 92       	push	r0
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	0f 92       	push	r0
    2938:	11 24       	eor	r1, r1
    293a:	0b b6       	in	r0, 0x3b	; 59
    293c:	0f 92       	push	r0
    293e:	2f 93       	push	r18
    2940:	3f 93       	push	r19
    2942:	4f 93       	push	r20
    2944:	5f 93       	push	r21
    2946:	6f 93       	push	r22
    2948:	7f 93       	push	r23
    294a:	8f 93       	push	r24
    294c:	9f 93       	push	r25
    294e:	af 93       	push	r26
    2950:	bf 93       	push	r27
    2952:	ef 93       	push	r30
    2954:	ff 93       	push	r31
    2956:	e0 91 d4 22 	lds	r30, 0x22D4
    295a:	f0 91 d5 22 	lds	r31, 0x22D5
    295e:	30 97       	sbiw	r30, 0x00	; 0
    2960:	29 f0       	breq	.+10     	; 0x296c <__vector_18+0x3c>
    2962:	80 91 ca 23 	lds	r24, 0x23CA
    2966:	90 91 cb 23 	lds	r25, 0x23CB
    296a:	19 95       	eicall
    296c:	ff 91       	pop	r31
    296e:	ef 91       	pop	r30
    2970:	bf 91       	pop	r27
    2972:	af 91       	pop	r26
    2974:	9f 91       	pop	r25
    2976:	8f 91       	pop	r24
    2978:	7f 91       	pop	r23
    297a:	6f 91       	pop	r22
    297c:	5f 91       	pop	r21
    297e:	4f 91       	pop	r20
    2980:	3f 91       	pop	r19
    2982:	2f 91       	pop	r18
    2984:	0f 90       	pop	r0
    2986:	0b be       	out	0x3b, r0	; 59
    2988:	0f 90       	pop	r0
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	0f 90       	pop	r0
    298e:	1f 90       	pop	r1
    2990:	18 95       	reti

00002992 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2992:	1f 92       	push	r1
    2994:	0f 92       	push	r0
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	0f 92       	push	r0
    299a:	11 24       	eor	r1, r1
    299c:	0b b6       	in	r0, 0x3b	; 59
    299e:	0f 92       	push	r0
    29a0:	2f 93       	push	r18
    29a2:	3f 93       	push	r19
    29a4:	4f 93       	push	r20
    29a6:	5f 93       	push	r21
    29a8:	6f 93       	push	r22
    29aa:	7f 93       	push	r23
    29ac:	8f 93       	push	r24
    29ae:	9f 93       	push	r25
    29b0:	af 93       	push	r26
    29b2:	bf 93       	push	r27
    29b4:	ef 93       	push	r30
    29b6:	ff 93       	push	r31
    29b8:	e0 91 d6 22 	lds	r30, 0x22D6
    29bc:	f0 91 d7 22 	lds	r31, 0x22D7
    29c0:	30 97       	sbiw	r30, 0x00	; 0
    29c2:	29 f0       	breq	.+10     	; 0x29ce <__vector_19+0x3c>
    29c4:	80 91 cc 23 	lds	r24, 0x23CC
    29c8:	90 91 cd 23 	lds	r25, 0x23CD
    29cc:	19 95       	eicall
    29ce:	ff 91       	pop	r31
    29d0:	ef 91       	pop	r30
    29d2:	bf 91       	pop	r27
    29d4:	af 91       	pop	r26
    29d6:	9f 91       	pop	r25
    29d8:	8f 91       	pop	r24
    29da:	7f 91       	pop	r23
    29dc:	6f 91       	pop	r22
    29de:	5f 91       	pop	r21
    29e0:	4f 91       	pop	r20
    29e2:	3f 91       	pop	r19
    29e4:	2f 91       	pop	r18
    29e6:	0f 90       	pop	r0
    29e8:	0b be       	out	0x3b, r0	; 59
    29ea:	0f 90       	pop	r0
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	0f 90       	pop	r0
    29f0:	1f 90       	pop	r1
    29f2:	18 95       	reti

000029f4 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    29f4:	1f 92       	push	r1
    29f6:	0f 92       	push	r0
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	0f 92       	push	r0
    29fc:	11 24       	eor	r1, r1
    29fe:	0b b6       	in	r0, 0x3b	; 59
    2a00:	0f 92       	push	r0
    2a02:	2f 93       	push	r18
    2a04:	3f 93       	push	r19
    2a06:	4f 93       	push	r20
    2a08:	5f 93       	push	r21
    2a0a:	6f 93       	push	r22
    2a0c:	7f 93       	push	r23
    2a0e:	8f 93       	push	r24
    2a10:	9f 93       	push	r25
    2a12:	af 93       	push	r26
    2a14:	bf 93       	push	r27
    2a16:	ef 93       	push	r30
    2a18:	ff 93       	push	r31
    2a1a:	e0 91 d8 22 	lds	r30, 0x22D8
    2a1e:	f0 91 d9 22 	lds	r31, 0x22D9
    2a22:	30 97       	sbiw	r30, 0x00	; 0
    2a24:	29 f0       	breq	.+10     	; 0x2a30 <__vector_20+0x3c>
    2a26:	80 91 ce 23 	lds	r24, 0x23CE
    2a2a:	90 91 cf 23 	lds	r25, 0x23CF
    2a2e:	19 95       	eicall
    2a30:	ff 91       	pop	r31
    2a32:	ef 91       	pop	r30
    2a34:	bf 91       	pop	r27
    2a36:	af 91       	pop	r26
    2a38:	9f 91       	pop	r25
    2a3a:	8f 91       	pop	r24
    2a3c:	7f 91       	pop	r23
    2a3e:	6f 91       	pop	r22
    2a40:	5f 91       	pop	r21
    2a42:	4f 91       	pop	r20
    2a44:	3f 91       	pop	r19
    2a46:	2f 91       	pop	r18
    2a48:	0f 90       	pop	r0
    2a4a:	0b be       	out	0x3b, r0	; 59
    2a4c:	0f 90       	pop	r0
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	0f 90       	pop	r0
    2a52:	1f 90       	pop	r1
    2a54:	18 95       	reti

00002a56 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2a56:	1f 92       	push	r1
    2a58:	0f 92       	push	r0
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	0f 92       	push	r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	0b b6       	in	r0, 0x3b	; 59
    2a62:	0f 92       	push	r0
    2a64:	2f 93       	push	r18
    2a66:	3f 93       	push	r19
    2a68:	4f 93       	push	r20
    2a6a:	5f 93       	push	r21
    2a6c:	6f 93       	push	r22
    2a6e:	7f 93       	push	r23
    2a70:	8f 93       	push	r24
    2a72:	9f 93       	push	r25
    2a74:	af 93       	push	r26
    2a76:	bf 93       	push	r27
    2a78:	ef 93       	push	r30
    2a7a:	ff 93       	push	r31
    2a7c:	e0 91 da 22 	lds	r30, 0x22DA
    2a80:	f0 91 db 22 	lds	r31, 0x22DB
    2a84:	30 97       	sbiw	r30, 0x00	; 0
    2a86:	29 f0       	breq	.+10     	; 0x2a92 <__vector_21+0x3c>
    2a88:	80 91 d0 23 	lds	r24, 0x23D0
    2a8c:	90 91 d1 23 	lds	r25, 0x23D1
    2a90:	19 95       	eicall
    2a92:	ff 91       	pop	r31
    2a94:	ef 91       	pop	r30
    2a96:	bf 91       	pop	r27
    2a98:	af 91       	pop	r26
    2a9a:	9f 91       	pop	r25
    2a9c:	8f 91       	pop	r24
    2a9e:	7f 91       	pop	r23
    2aa0:	6f 91       	pop	r22
    2aa2:	5f 91       	pop	r21
    2aa4:	4f 91       	pop	r20
    2aa6:	3f 91       	pop	r19
    2aa8:	2f 91       	pop	r18
    2aaa:	0f 90       	pop	r0
    2aac:	0b be       	out	0x3b, r0	; 59
    2aae:	0f 90       	pop	r0
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	0f 90       	pop	r0
    2ab4:	1f 90       	pop	r1
    2ab6:	18 95       	reti

00002ab8 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2ab8:	1f 92       	push	r1
    2aba:	0f 92       	push	r0
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	0f 92       	push	r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	0b b6       	in	r0, 0x3b	; 59
    2ac4:	0f 92       	push	r0
    2ac6:	2f 93       	push	r18
    2ac8:	3f 93       	push	r19
    2aca:	4f 93       	push	r20
    2acc:	5f 93       	push	r21
    2ace:	6f 93       	push	r22
    2ad0:	7f 93       	push	r23
    2ad2:	8f 93       	push	r24
    2ad4:	9f 93       	push	r25
    2ad6:	af 93       	push	r26
    2ad8:	bf 93       	push	r27
    2ada:	ef 93       	push	r30
    2adc:	ff 93       	push	r31
    2ade:	e0 91 dc 22 	lds	r30, 0x22DC
    2ae2:	f0 91 dd 22 	lds	r31, 0x22DD
    2ae6:	30 97       	sbiw	r30, 0x00	; 0
    2ae8:	29 f0       	breq	.+10     	; 0x2af4 <__vector_22+0x3c>
    2aea:	80 91 d2 23 	lds	r24, 0x23D2
    2aee:	90 91 d3 23 	lds	r25, 0x23D3
    2af2:	19 95       	eicall
    2af4:	ff 91       	pop	r31
    2af6:	ef 91       	pop	r30
    2af8:	bf 91       	pop	r27
    2afa:	af 91       	pop	r26
    2afc:	9f 91       	pop	r25
    2afe:	8f 91       	pop	r24
    2b00:	7f 91       	pop	r23
    2b02:	6f 91       	pop	r22
    2b04:	5f 91       	pop	r21
    2b06:	4f 91       	pop	r20
    2b08:	3f 91       	pop	r19
    2b0a:	2f 91       	pop	r18
    2b0c:	0f 90       	pop	r0
    2b0e:	0b be       	out	0x3b, r0	; 59
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	0f 90       	pop	r0
    2b16:	1f 90       	pop	r1
    2b18:	18 95       	reti

00002b1a <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2b1a:	1f 92       	push	r1
    2b1c:	0f 92       	push	r0
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	0f 92       	push	r0
    2b22:	11 24       	eor	r1, r1
    2b24:	0b b6       	in	r0, 0x3b	; 59
    2b26:	0f 92       	push	r0
    2b28:	2f 93       	push	r18
    2b2a:	3f 93       	push	r19
    2b2c:	4f 93       	push	r20
    2b2e:	5f 93       	push	r21
    2b30:	6f 93       	push	r22
    2b32:	7f 93       	push	r23
    2b34:	8f 93       	push	r24
    2b36:	9f 93       	push	r25
    2b38:	af 93       	push	r26
    2b3a:	bf 93       	push	r27
    2b3c:	ef 93       	push	r30
    2b3e:	ff 93       	push	r31
    2b40:	e0 91 de 22 	lds	r30, 0x22DE
    2b44:	f0 91 df 22 	lds	r31, 0x22DF
    2b48:	30 97       	sbiw	r30, 0x00	; 0
    2b4a:	29 f0       	breq	.+10     	; 0x2b56 <__vector_23+0x3c>
    2b4c:	80 91 d4 23 	lds	r24, 0x23D4
    2b50:	90 91 d5 23 	lds	r25, 0x23D5
    2b54:	19 95       	eicall
    2b56:	ff 91       	pop	r31
    2b58:	ef 91       	pop	r30
    2b5a:	bf 91       	pop	r27
    2b5c:	af 91       	pop	r26
    2b5e:	9f 91       	pop	r25
    2b60:	8f 91       	pop	r24
    2b62:	7f 91       	pop	r23
    2b64:	6f 91       	pop	r22
    2b66:	5f 91       	pop	r21
    2b68:	4f 91       	pop	r20
    2b6a:	3f 91       	pop	r19
    2b6c:	2f 91       	pop	r18
    2b6e:	0f 90       	pop	r0
    2b70:	0b be       	out	0x3b, r0	; 59
    2b72:	0f 90       	pop	r0
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	0f 90       	pop	r0
    2b78:	1f 90       	pop	r1
    2b7a:	18 95       	reti

00002b7c <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2b7c:	1f 92       	push	r1
    2b7e:	0f 92       	push	r0
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	0f 92       	push	r0
    2b84:	11 24       	eor	r1, r1
    2b86:	0b b6       	in	r0, 0x3b	; 59
    2b88:	0f 92       	push	r0
    2b8a:	2f 93       	push	r18
    2b8c:	3f 93       	push	r19
    2b8e:	4f 93       	push	r20
    2b90:	5f 93       	push	r21
    2b92:	6f 93       	push	r22
    2b94:	7f 93       	push	r23
    2b96:	8f 93       	push	r24
    2b98:	9f 93       	push	r25
    2b9a:	af 93       	push	r26
    2b9c:	bf 93       	push	r27
    2b9e:	ef 93       	push	r30
    2ba0:	ff 93       	push	r31
    2ba2:	e0 91 e0 22 	lds	r30, 0x22E0
    2ba6:	f0 91 e1 22 	lds	r31, 0x22E1
    2baa:	30 97       	sbiw	r30, 0x00	; 0
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <__vector_24+0x3c>
    2bae:	80 91 d6 23 	lds	r24, 0x23D6
    2bb2:	90 91 d7 23 	lds	r25, 0x23D7
    2bb6:	19 95       	eicall
    2bb8:	ff 91       	pop	r31
    2bba:	ef 91       	pop	r30
    2bbc:	bf 91       	pop	r27
    2bbe:	af 91       	pop	r26
    2bc0:	9f 91       	pop	r25
    2bc2:	8f 91       	pop	r24
    2bc4:	7f 91       	pop	r23
    2bc6:	6f 91       	pop	r22
    2bc8:	5f 91       	pop	r21
    2bca:	4f 91       	pop	r20
    2bcc:	3f 91       	pop	r19
    2bce:	2f 91       	pop	r18
    2bd0:	0f 90       	pop	r0
    2bd2:	0b be       	out	0x3b, r0	; 59
    2bd4:	0f 90       	pop	r0
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	0f 90       	pop	r0
    2bda:	1f 90       	pop	r1
    2bdc:	18 95       	reti

00002bde <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2bde:	1f 92       	push	r1
    2be0:	0f 92       	push	r0
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	0f 92       	push	r0
    2be6:	11 24       	eor	r1, r1
    2be8:	0b b6       	in	r0, 0x3b	; 59
    2bea:	0f 92       	push	r0
    2bec:	2f 93       	push	r18
    2bee:	3f 93       	push	r19
    2bf0:	4f 93       	push	r20
    2bf2:	5f 93       	push	r21
    2bf4:	6f 93       	push	r22
    2bf6:	7f 93       	push	r23
    2bf8:	8f 93       	push	r24
    2bfa:	9f 93       	push	r25
    2bfc:	af 93       	push	r26
    2bfe:	bf 93       	push	r27
    2c00:	ef 93       	push	r30
    2c02:	ff 93       	push	r31
    2c04:	e0 91 e2 22 	lds	r30, 0x22E2
    2c08:	f0 91 e3 22 	lds	r31, 0x22E3
    2c0c:	30 97       	sbiw	r30, 0x00	; 0
    2c0e:	29 f0       	breq	.+10     	; 0x2c1a <__vector_25+0x3c>
    2c10:	80 91 d8 23 	lds	r24, 0x23D8
    2c14:	90 91 d9 23 	lds	r25, 0x23D9
    2c18:	19 95       	eicall
    2c1a:	ff 91       	pop	r31
    2c1c:	ef 91       	pop	r30
    2c1e:	bf 91       	pop	r27
    2c20:	af 91       	pop	r26
    2c22:	9f 91       	pop	r25
    2c24:	8f 91       	pop	r24
    2c26:	7f 91       	pop	r23
    2c28:	6f 91       	pop	r22
    2c2a:	5f 91       	pop	r21
    2c2c:	4f 91       	pop	r20
    2c2e:	3f 91       	pop	r19
    2c30:	2f 91       	pop	r18
    2c32:	0f 90       	pop	r0
    2c34:	0b be       	out	0x3b, r0	; 59
    2c36:	0f 90       	pop	r0
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	0f 90       	pop	r0
    2c3c:	1f 90       	pop	r1
    2c3e:	18 95       	reti

00002c40 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2c40:	1f 92       	push	r1
    2c42:	0f 92       	push	r0
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	0f 92       	push	r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	0b b6       	in	r0, 0x3b	; 59
    2c4c:	0f 92       	push	r0
    2c4e:	2f 93       	push	r18
    2c50:	3f 93       	push	r19
    2c52:	4f 93       	push	r20
    2c54:	5f 93       	push	r21
    2c56:	6f 93       	push	r22
    2c58:	7f 93       	push	r23
    2c5a:	8f 93       	push	r24
    2c5c:	9f 93       	push	r25
    2c5e:	af 93       	push	r26
    2c60:	bf 93       	push	r27
    2c62:	ef 93       	push	r30
    2c64:	ff 93       	push	r31
    2c66:	e0 91 e4 22 	lds	r30, 0x22E4
    2c6a:	f0 91 e5 22 	lds	r31, 0x22E5
    2c6e:	30 97       	sbiw	r30, 0x00	; 0
    2c70:	29 f0       	breq	.+10     	; 0x2c7c <__vector_26+0x3c>
    2c72:	80 91 da 23 	lds	r24, 0x23DA
    2c76:	90 91 db 23 	lds	r25, 0x23DB
    2c7a:	19 95       	eicall
    2c7c:	ff 91       	pop	r31
    2c7e:	ef 91       	pop	r30
    2c80:	bf 91       	pop	r27
    2c82:	af 91       	pop	r26
    2c84:	9f 91       	pop	r25
    2c86:	8f 91       	pop	r24
    2c88:	7f 91       	pop	r23
    2c8a:	6f 91       	pop	r22
    2c8c:	5f 91       	pop	r21
    2c8e:	4f 91       	pop	r20
    2c90:	3f 91       	pop	r19
    2c92:	2f 91       	pop	r18
    2c94:	0f 90       	pop	r0
    2c96:	0b be       	out	0x3b, r0	; 59
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	0f 90       	pop	r0
    2c9e:	1f 90       	pop	r1
    2ca0:	18 95       	reti

00002ca2 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2ca2:	1f 92       	push	r1
    2ca4:	0f 92       	push	r0
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	0f 92       	push	r0
    2caa:	11 24       	eor	r1, r1
    2cac:	0b b6       	in	r0, 0x3b	; 59
    2cae:	0f 92       	push	r0
    2cb0:	2f 93       	push	r18
    2cb2:	3f 93       	push	r19
    2cb4:	4f 93       	push	r20
    2cb6:	5f 93       	push	r21
    2cb8:	6f 93       	push	r22
    2cba:	7f 93       	push	r23
    2cbc:	8f 93       	push	r24
    2cbe:	9f 93       	push	r25
    2cc0:	af 93       	push	r26
    2cc2:	bf 93       	push	r27
    2cc4:	ef 93       	push	r30
    2cc6:	ff 93       	push	r31
    2cc8:	e0 91 e6 22 	lds	r30, 0x22E6
    2ccc:	f0 91 e7 22 	lds	r31, 0x22E7
    2cd0:	30 97       	sbiw	r30, 0x00	; 0
    2cd2:	29 f0       	breq	.+10     	; 0x2cde <__vector_27+0x3c>
    2cd4:	80 91 dc 23 	lds	r24, 0x23DC
    2cd8:	90 91 dd 23 	lds	r25, 0x23DD
    2cdc:	19 95       	eicall
    2cde:	ff 91       	pop	r31
    2ce0:	ef 91       	pop	r30
    2ce2:	bf 91       	pop	r27
    2ce4:	af 91       	pop	r26
    2ce6:	9f 91       	pop	r25
    2ce8:	8f 91       	pop	r24
    2cea:	7f 91       	pop	r23
    2cec:	6f 91       	pop	r22
    2cee:	5f 91       	pop	r21
    2cf0:	4f 91       	pop	r20
    2cf2:	3f 91       	pop	r19
    2cf4:	2f 91       	pop	r18
    2cf6:	0f 90       	pop	r0
    2cf8:	0b be       	out	0x3b, r0	; 59
    2cfa:	0f 90       	pop	r0
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	0f 90       	pop	r0
    2d00:	1f 90       	pop	r1
    2d02:	18 95       	reti

00002d04 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2d04:	1f 92       	push	r1
    2d06:	0f 92       	push	r0
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	0f 92       	push	r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	0b b6       	in	r0, 0x3b	; 59
    2d10:	0f 92       	push	r0
    2d12:	2f 93       	push	r18
    2d14:	3f 93       	push	r19
    2d16:	4f 93       	push	r20
    2d18:	5f 93       	push	r21
    2d1a:	6f 93       	push	r22
    2d1c:	7f 93       	push	r23
    2d1e:	8f 93       	push	r24
    2d20:	9f 93       	push	r25
    2d22:	af 93       	push	r26
    2d24:	bf 93       	push	r27
    2d26:	ef 93       	push	r30
    2d28:	ff 93       	push	r31
    2d2a:	e0 91 e8 22 	lds	r30, 0x22E8
    2d2e:	f0 91 e9 22 	lds	r31, 0x22E9
    2d32:	30 97       	sbiw	r30, 0x00	; 0
    2d34:	29 f0       	breq	.+10     	; 0x2d40 <__vector_28+0x3c>
    2d36:	80 91 de 23 	lds	r24, 0x23DE
    2d3a:	90 91 df 23 	lds	r25, 0x23DF
    2d3e:	19 95       	eicall
    2d40:	ff 91       	pop	r31
    2d42:	ef 91       	pop	r30
    2d44:	bf 91       	pop	r27
    2d46:	af 91       	pop	r26
    2d48:	9f 91       	pop	r25
    2d4a:	8f 91       	pop	r24
    2d4c:	7f 91       	pop	r23
    2d4e:	6f 91       	pop	r22
    2d50:	5f 91       	pop	r21
    2d52:	4f 91       	pop	r20
    2d54:	3f 91       	pop	r19
    2d56:	2f 91       	pop	r18
    2d58:	0f 90       	pop	r0
    2d5a:	0b be       	out	0x3b, r0	; 59
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	0f 90       	pop	r0
    2d62:	1f 90       	pop	r1
    2d64:	18 95       	reti

00002d66 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2d66:	1f 92       	push	r1
    2d68:	0f 92       	push	r0
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	0f 92       	push	r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	0b b6       	in	r0, 0x3b	; 59
    2d72:	0f 92       	push	r0
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
    2d8c:	e0 91 ea 22 	lds	r30, 0x22EA
    2d90:	f0 91 eb 22 	lds	r31, 0x22EB
    2d94:	30 97       	sbiw	r30, 0x00	; 0
    2d96:	29 f0       	breq	.+10     	; 0x2da2 <__vector_29+0x3c>
    2d98:	80 91 e0 23 	lds	r24, 0x23E0
    2d9c:	90 91 e1 23 	lds	r25, 0x23E1
    2da0:	19 95       	eicall
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	7f 91       	pop	r23
    2db0:	6f 91       	pop	r22
    2db2:	5f 91       	pop	r21
    2db4:	4f 91       	pop	r20
    2db6:	3f 91       	pop	r19
    2db8:	2f 91       	pop	r18
    2dba:	0f 90       	pop	r0
    2dbc:	0b be       	out	0x3b, r0	; 59
    2dbe:	0f 90       	pop	r0
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	0f 90       	pop	r0
    2dc4:	1f 90       	pop	r1
    2dc6:	18 95       	reti

00002dc8 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2dc8:	1f 92       	push	r1
    2dca:	0f 92       	push	r0
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	0f 92       	push	r0
    2dd0:	11 24       	eor	r1, r1
    2dd2:	0b b6       	in	r0, 0x3b	; 59
    2dd4:	0f 92       	push	r0
    2dd6:	2f 93       	push	r18
    2dd8:	3f 93       	push	r19
    2dda:	4f 93       	push	r20
    2ddc:	5f 93       	push	r21
    2dde:	6f 93       	push	r22
    2de0:	7f 93       	push	r23
    2de2:	8f 93       	push	r24
    2de4:	9f 93       	push	r25
    2de6:	af 93       	push	r26
    2de8:	bf 93       	push	r27
    2dea:	ef 93       	push	r30
    2dec:	ff 93       	push	r31
    2dee:	e0 91 ec 22 	lds	r30, 0x22EC
    2df2:	f0 91 ed 22 	lds	r31, 0x22ED
    2df6:	30 97       	sbiw	r30, 0x00	; 0
    2df8:	29 f0       	breq	.+10     	; 0x2e04 <__vector_30+0x3c>
    2dfa:	80 91 e2 23 	lds	r24, 0x23E2
    2dfe:	90 91 e3 23 	lds	r25, 0x23E3
    2e02:	19 95       	eicall
    2e04:	ff 91       	pop	r31
    2e06:	ef 91       	pop	r30
    2e08:	bf 91       	pop	r27
    2e0a:	af 91       	pop	r26
    2e0c:	9f 91       	pop	r25
    2e0e:	8f 91       	pop	r24
    2e10:	7f 91       	pop	r23
    2e12:	6f 91       	pop	r22
    2e14:	5f 91       	pop	r21
    2e16:	4f 91       	pop	r20
    2e18:	3f 91       	pop	r19
    2e1a:	2f 91       	pop	r18
    2e1c:	0f 90       	pop	r0
    2e1e:	0b be       	out	0x3b, r0	; 59
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	0f 90       	pop	r0
    2e26:	1f 90       	pop	r1
    2e28:	18 95       	reti

00002e2a <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2e2a:	1f 92       	push	r1
    2e2c:	0f 92       	push	r0
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	0f 92       	push	r0
    2e32:	11 24       	eor	r1, r1
    2e34:	0b b6       	in	r0, 0x3b	; 59
    2e36:	0f 92       	push	r0
    2e38:	2f 93       	push	r18
    2e3a:	3f 93       	push	r19
    2e3c:	4f 93       	push	r20
    2e3e:	5f 93       	push	r21
    2e40:	6f 93       	push	r22
    2e42:	7f 93       	push	r23
    2e44:	8f 93       	push	r24
    2e46:	9f 93       	push	r25
    2e48:	af 93       	push	r26
    2e4a:	bf 93       	push	r27
    2e4c:	ef 93       	push	r30
    2e4e:	ff 93       	push	r31
    2e50:	e0 91 ee 22 	lds	r30, 0x22EE
    2e54:	f0 91 ef 22 	lds	r31, 0x22EF
    2e58:	30 97       	sbiw	r30, 0x00	; 0
    2e5a:	29 f0       	breq	.+10     	; 0x2e66 <__vector_31+0x3c>
    2e5c:	80 91 e4 23 	lds	r24, 0x23E4
    2e60:	90 91 e5 23 	lds	r25, 0x23E5
    2e64:	19 95       	eicall
    2e66:	ff 91       	pop	r31
    2e68:	ef 91       	pop	r30
    2e6a:	bf 91       	pop	r27
    2e6c:	af 91       	pop	r26
    2e6e:	9f 91       	pop	r25
    2e70:	8f 91       	pop	r24
    2e72:	7f 91       	pop	r23
    2e74:	6f 91       	pop	r22
    2e76:	5f 91       	pop	r21
    2e78:	4f 91       	pop	r20
    2e7a:	3f 91       	pop	r19
    2e7c:	2f 91       	pop	r18
    2e7e:	0f 90       	pop	r0
    2e80:	0b be       	out	0x3b, r0	; 59
    2e82:	0f 90       	pop	r0
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	0f 90       	pop	r0
    2e88:	1f 90       	pop	r1
    2e8a:	18 95       	reti

00002e8c <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2e8c:	1f 92       	push	r1
    2e8e:	0f 92       	push	r0
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	0b b6       	in	r0, 0x3b	; 59
    2e98:	0f 92       	push	r0
    2e9a:	2f 93       	push	r18
    2e9c:	3f 93       	push	r19
    2e9e:	4f 93       	push	r20
    2ea0:	5f 93       	push	r21
    2ea2:	6f 93       	push	r22
    2ea4:	7f 93       	push	r23
    2ea6:	8f 93       	push	r24
    2ea8:	9f 93       	push	r25
    2eaa:	af 93       	push	r26
    2eac:	bf 93       	push	r27
    2eae:	ef 93       	push	r30
    2eb0:	ff 93       	push	r31
    2eb2:	e0 91 f0 22 	lds	r30, 0x22F0
    2eb6:	f0 91 f1 22 	lds	r31, 0x22F1
    2eba:	30 97       	sbiw	r30, 0x00	; 0
    2ebc:	29 f0       	breq	.+10     	; 0x2ec8 <__vector_32+0x3c>
    2ebe:	80 91 e6 23 	lds	r24, 0x23E6
    2ec2:	90 91 e7 23 	lds	r25, 0x23E7
    2ec6:	19 95       	eicall
    2ec8:	ff 91       	pop	r31
    2eca:	ef 91       	pop	r30
    2ecc:	bf 91       	pop	r27
    2ece:	af 91       	pop	r26
    2ed0:	9f 91       	pop	r25
    2ed2:	8f 91       	pop	r24
    2ed4:	7f 91       	pop	r23
    2ed6:	6f 91       	pop	r22
    2ed8:	5f 91       	pop	r21
    2eda:	4f 91       	pop	r20
    2edc:	3f 91       	pop	r19
    2ede:	2f 91       	pop	r18
    2ee0:	0f 90       	pop	r0
    2ee2:	0b be       	out	0x3b, r0	; 59
    2ee4:	0f 90       	pop	r0
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	0f 90       	pop	r0
    2eea:	1f 90       	pop	r1
    2eec:	18 95       	reti

00002eee <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2eee:	1f 92       	push	r1
    2ef0:	0f 92       	push	r0
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	0f 92       	push	r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	0b b6       	in	r0, 0x3b	; 59
    2efa:	0f 92       	push	r0
    2efc:	2f 93       	push	r18
    2efe:	3f 93       	push	r19
    2f00:	4f 93       	push	r20
    2f02:	5f 93       	push	r21
    2f04:	6f 93       	push	r22
    2f06:	7f 93       	push	r23
    2f08:	8f 93       	push	r24
    2f0a:	9f 93       	push	r25
    2f0c:	af 93       	push	r26
    2f0e:	bf 93       	push	r27
    2f10:	ef 93       	push	r30
    2f12:	ff 93       	push	r31
    2f14:	e0 91 f2 22 	lds	r30, 0x22F2
    2f18:	f0 91 f3 22 	lds	r31, 0x22F3
    2f1c:	30 97       	sbiw	r30, 0x00	; 0
    2f1e:	29 f0       	breq	.+10     	; 0x2f2a <__vector_33+0x3c>
    2f20:	80 91 e8 23 	lds	r24, 0x23E8
    2f24:	90 91 e9 23 	lds	r25, 0x23E9
    2f28:	19 95       	eicall
    2f2a:	ff 91       	pop	r31
    2f2c:	ef 91       	pop	r30
    2f2e:	bf 91       	pop	r27
    2f30:	af 91       	pop	r26
    2f32:	9f 91       	pop	r25
    2f34:	8f 91       	pop	r24
    2f36:	7f 91       	pop	r23
    2f38:	6f 91       	pop	r22
    2f3a:	5f 91       	pop	r21
    2f3c:	4f 91       	pop	r20
    2f3e:	3f 91       	pop	r19
    2f40:	2f 91       	pop	r18
    2f42:	0f 90       	pop	r0
    2f44:	0b be       	out	0x3b, r0	; 59
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	0f 90       	pop	r0
    2f4c:	1f 90       	pop	r1
    2f4e:	18 95       	reti

00002f50 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2f50:	1f 92       	push	r1
    2f52:	0f 92       	push	r0
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	0f 92       	push	r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	0b b6       	in	r0, 0x3b	; 59
    2f5c:	0f 92       	push	r0
    2f5e:	2f 93       	push	r18
    2f60:	3f 93       	push	r19
    2f62:	4f 93       	push	r20
    2f64:	5f 93       	push	r21
    2f66:	6f 93       	push	r22
    2f68:	7f 93       	push	r23
    2f6a:	8f 93       	push	r24
    2f6c:	9f 93       	push	r25
    2f6e:	af 93       	push	r26
    2f70:	bf 93       	push	r27
    2f72:	ef 93       	push	r30
    2f74:	ff 93       	push	r31
    2f76:	e0 91 f4 22 	lds	r30, 0x22F4
    2f7a:	f0 91 f5 22 	lds	r31, 0x22F5
    2f7e:	30 97       	sbiw	r30, 0x00	; 0
    2f80:	29 f0       	breq	.+10     	; 0x2f8c <__vector_34+0x3c>
    2f82:	80 91 ea 23 	lds	r24, 0x23EA
    2f86:	90 91 eb 23 	lds	r25, 0x23EB
    2f8a:	19 95       	eicall
    2f8c:	ff 91       	pop	r31
    2f8e:	ef 91       	pop	r30
    2f90:	bf 91       	pop	r27
    2f92:	af 91       	pop	r26
    2f94:	9f 91       	pop	r25
    2f96:	8f 91       	pop	r24
    2f98:	7f 91       	pop	r23
    2f9a:	6f 91       	pop	r22
    2f9c:	5f 91       	pop	r21
    2f9e:	4f 91       	pop	r20
    2fa0:	3f 91       	pop	r19
    2fa2:	2f 91       	pop	r18
    2fa4:	0f 90       	pop	r0
    2fa6:	0b be       	out	0x3b, r0	; 59
    2fa8:	0f 90       	pop	r0
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	0f 90       	pop	r0
    2fae:	1f 90       	pop	r1
    2fb0:	18 95       	reti

00002fb2 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2fb2:	1f 92       	push	r1
    2fb4:	0f 92       	push	r0
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	0f 92       	push	r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	0b b6       	in	r0, 0x3b	; 59
    2fbe:	0f 92       	push	r0
    2fc0:	2f 93       	push	r18
    2fc2:	3f 93       	push	r19
    2fc4:	4f 93       	push	r20
    2fc6:	5f 93       	push	r21
    2fc8:	6f 93       	push	r22
    2fca:	7f 93       	push	r23
    2fcc:	8f 93       	push	r24
    2fce:	9f 93       	push	r25
    2fd0:	af 93       	push	r26
    2fd2:	bf 93       	push	r27
    2fd4:	ef 93       	push	r30
    2fd6:	ff 93       	push	r31
    2fd8:	e0 91 f6 22 	lds	r30, 0x22F6
    2fdc:	f0 91 f7 22 	lds	r31, 0x22F7
    2fe0:	30 97       	sbiw	r30, 0x00	; 0
    2fe2:	29 f0       	breq	.+10     	; 0x2fee <__vector_35+0x3c>
    2fe4:	80 91 ec 23 	lds	r24, 0x23EC
    2fe8:	90 91 ed 23 	lds	r25, 0x23ED
    2fec:	19 95       	eicall
    2fee:	ff 91       	pop	r31
    2ff0:	ef 91       	pop	r30
    2ff2:	bf 91       	pop	r27
    2ff4:	af 91       	pop	r26
    2ff6:	9f 91       	pop	r25
    2ff8:	8f 91       	pop	r24
    2ffa:	7f 91       	pop	r23
    2ffc:	6f 91       	pop	r22
    2ffe:	5f 91       	pop	r21
    3000:	4f 91       	pop	r20
    3002:	3f 91       	pop	r19
    3004:	2f 91       	pop	r18
    3006:	0f 90       	pop	r0
    3008:	0b be       	out	0x3b, r0	; 59
    300a:	0f 90       	pop	r0
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	0f 90       	pop	r0
    3010:	1f 90       	pop	r1
    3012:	18 95       	reti

00003014 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	0b b6       	in	r0, 0x3b	; 59
    3020:	0f 92       	push	r0
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
    303a:	e0 91 f8 22 	lds	r30, 0x22F8
    303e:	f0 91 f9 22 	lds	r31, 0x22F9
    3042:	30 97       	sbiw	r30, 0x00	; 0
    3044:	29 f0       	breq	.+10     	; 0x3050 <__vector_36+0x3c>
    3046:	80 91 ee 23 	lds	r24, 0x23EE
    304a:	90 91 ef 23 	lds	r25, 0x23EF
    304e:	19 95       	eicall
    3050:	ff 91       	pop	r31
    3052:	ef 91       	pop	r30
    3054:	bf 91       	pop	r27
    3056:	af 91       	pop	r26
    3058:	9f 91       	pop	r25
    305a:	8f 91       	pop	r24
    305c:	7f 91       	pop	r23
    305e:	6f 91       	pop	r22
    3060:	5f 91       	pop	r21
    3062:	4f 91       	pop	r20
    3064:	3f 91       	pop	r19
    3066:	2f 91       	pop	r18
    3068:	0f 90       	pop	r0
    306a:	0b be       	out	0x3b, r0	; 59
    306c:	0f 90       	pop	r0
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	0f 90       	pop	r0
    3072:	1f 90       	pop	r1
    3074:	18 95       	reti

00003076 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    3076:	1f 92       	push	r1
    3078:	0f 92       	push	r0
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	0f 92       	push	r0
    307e:	11 24       	eor	r1, r1
    3080:	0b b6       	in	r0, 0x3b	; 59
    3082:	0f 92       	push	r0
    3084:	2f 93       	push	r18
    3086:	3f 93       	push	r19
    3088:	4f 93       	push	r20
    308a:	5f 93       	push	r21
    308c:	6f 93       	push	r22
    308e:	7f 93       	push	r23
    3090:	8f 93       	push	r24
    3092:	9f 93       	push	r25
    3094:	af 93       	push	r26
    3096:	bf 93       	push	r27
    3098:	ef 93       	push	r30
    309a:	ff 93       	push	r31
    309c:	e0 91 fa 22 	lds	r30, 0x22FA
    30a0:	f0 91 fb 22 	lds	r31, 0x22FB
    30a4:	30 97       	sbiw	r30, 0x00	; 0
    30a6:	29 f0       	breq	.+10     	; 0x30b2 <__vector_37+0x3c>
    30a8:	80 91 f0 23 	lds	r24, 0x23F0
    30ac:	90 91 f1 23 	lds	r25, 0x23F1
    30b0:	19 95       	eicall
    30b2:	ff 91       	pop	r31
    30b4:	ef 91       	pop	r30
    30b6:	bf 91       	pop	r27
    30b8:	af 91       	pop	r26
    30ba:	9f 91       	pop	r25
    30bc:	8f 91       	pop	r24
    30be:	7f 91       	pop	r23
    30c0:	6f 91       	pop	r22
    30c2:	5f 91       	pop	r21
    30c4:	4f 91       	pop	r20
    30c6:	3f 91       	pop	r19
    30c8:	2f 91       	pop	r18
    30ca:	0f 90       	pop	r0
    30cc:	0b be       	out	0x3b, r0	; 59
    30ce:	0f 90       	pop	r0
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	0f 90       	pop	r0
    30d4:	1f 90       	pop	r1
    30d6:	18 95       	reti

000030d8 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    30d8:	1f 92       	push	r1
    30da:	0f 92       	push	r0
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	0f 92       	push	r0
    30e0:	11 24       	eor	r1, r1
    30e2:	0b b6       	in	r0, 0x3b	; 59
    30e4:	0f 92       	push	r0
    30e6:	2f 93       	push	r18
    30e8:	3f 93       	push	r19
    30ea:	4f 93       	push	r20
    30ec:	5f 93       	push	r21
    30ee:	6f 93       	push	r22
    30f0:	7f 93       	push	r23
    30f2:	8f 93       	push	r24
    30f4:	9f 93       	push	r25
    30f6:	af 93       	push	r26
    30f8:	bf 93       	push	r27
    30fa:	ef 93       	push	r30
    30fc:	ff 93       	push	r31
    30fe:	e0 91 fc 22 	lds	r30, 0x22FC
    3102:	f0 91 fd 22 	lds	r31, 0x22FD
    3106:	30 97       	sbiw	r30, 0x00	; 0
    3108:	29 f0       	breq	.+10     	; 0x3114 <__vector_38+0x3c>
    310a:	80 91 f2 23 	lds	r24, 0x23F2
    310e:	90 91 f3 23 	lds	r25, 0x23F3
    3112:	19 95       	eicall
    3114:	ff 91       	pop	r31
    3116:	ef 91       	pop	r30
    3118:	bf 91       	pop	r27
    311a:	af 91       	pop	r26
    311c:	9f 91       	pop	r25
    311e:	8f 91       	pop	r24
    3120:	7f 91       	pop	r23
    3122:	6f 91       	pop	r22
    3124:	5f 91       	pop	r21
    3126:	4f 91       	pop	r20
    3128:	3f 91       	pop	r19
    312a:	2f 91       	pop	r18
    312c:	0f 90       	pop	r0
    312e:	0b be       	out	0x3b, r0	; 59
    3130:	0f 90       	pop	r0
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	0f 90       	pop	r0
    3136:	1f 90       	pop	r1
    3138:	18 95       	reti

0000313a <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    313a:	1f 92       	push	r1
    313c:	0f 92       	push	r0
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	0f 92       	push	r0
    3142:	11 24       	eor	r1, r1
    3144:	0b b6       	in	r0, 0x3b	; 59
    3146:	0f 92       	push	r0
    3148:	2f 93       	push	r18
    314a:	3f 93       	push	r19
    314c:	4f 93       	push	r20
    314e:	5f 93       	push	r21
    3150:	6f 93       	push	r22
    3152:	7f 93       	push	r23
    3154:	8f 93       	push	r24
    3156:	9f 93       	push	r25
    3158:	af 93       	push	r26
    315a:	bf 93       	push	r27
    315c:	ef 93       	push	r30
    315e:	ff 93       	push	r31
    3160:	e0 91 fe 22 	lds	r30, 0x22FE
    3164:	f0 91 ff 22 	lds	r31, 0x22FF
    3168:	30 97       	sbiw	r30, 0x00	; 0
    316a:	29 f0       	breq	.+10     	; 0x3176 <__vector_39+0x3c>
    316c:	80 91 f4 23 	lds	r24, 0x23F4
    3170:	90 91 f5 23 	lds	r25, 0x23F5
    3174:	19 95       	eicall
    3176:	ff 91       	pop	r31
    3178:	ef 91       	pop	r30
    317a:	bf 91       	pop	r27
    317c:	af 91       	pop	r26
    317e:	9f 91       	pop	r25
    3180:	8f 91       	pop	r24
    3182:	7f 91       	pop	r23
    3184:	6f 91       	pop	r22
    3186:	5f 91       	pop	r21
    3188:	4f 91       	pop	r20
    318a:	3f 91       	pop	r19
    318c:	2f 91       	pop	r18
    318e:	0f 90       	pop	r0
    3190:	0b be       	out	0x3b, r0	; 59
    3192:	0f 90       	pop	r0
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	0f 90       	pop	r0
    3198:	1f 90       	pop	r1
    319a:	18 95       	reti

0000319c <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    319c:	1f 92       	push	r1
    319e:	0f 92       	push	r0
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	0f 92       	push	r0
    31a4:	11 24       	eor	r1, r1
    31a6:	0b b6       	in	r0, 0x3b	; 59
    31a8:	0f 92       	push	r0
    31aa:	2f 93       	push	r18
    31ac:	3f 93       	push	r19
    31ae:	4f 93       	push	r20
    31b0:	5f 93       	push	r21
    31b2:	6f 93       	push	r22
    31b4:	7f 93       	push	r23
    31b6:	8f 93       	push	r24
    31b8:	9f 93       	push	r25
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	ef 93       	push	r30
    31c0:	ff 93       	push	r31
    31c2:	e0 91 00 23 	lds	r30, 0x2300
    31c6:	f0 91 01 23 	lds	r31, 0x2301
    31ca:	30 97       	sbiw	r30, 0x00	; 0
    31cc:	29 f0       	breq	.+10     	; 0x31d8 <__vector_40+0x3c>
    31ce:	80 91 f6 23 	lds	r24, 0x23F6
    31d2:	90 91 f7 23 	lds	r25, 0x23F7
    31d6:	19 95       	eicall
    31d8:	ff 91       	pop	r31
    31da:	ef 91       	pop	r30
    31dc:	bf 91       	pop	r27
    31de:	af 91       	pop	r26
    31e0:	9f 91       	pop	r25
    31e2:	8f 91       	pop	r24
    31e4:	7f 91       	pop	r23
    31e6:	6f 91       	pop	r22
    31e8:	5f 91       	pop	r21
    31ea:	4f 91       	pop	r20
    31ec:	3f 91       	pop	r19
    31ee:	2f 91       	pop	r18
    31f0:	0f 90       	pop	r0
    31f2:	0b be       	out	0x3b, r0	; 59
    31f4:	0f 90       	pop	r0
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	0f 90       	pop	r0
    31fa:	1f 90       	pop	r1
    31fc:	18 95       	reti

000031fe <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    31fe:	1f 92       	push	r1
    3200:	0f 92       	push	r0
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	0f 92       	push	r0
    3206:	11 24       	eor	r1, r1
    3208:	0b b6       	in	r0, 0x3b	; 59
    320a:	0f 92       	push	r0
    320c:	2f 93       	push	r18
    320e:	3f 93       	push	r19
    3210:	4f 93       	push	r20
    3212:	5f 93       	push	r21
    3214:	6f 93       	push	r22
    3216:	7f 93       	push	r23
    3218:	8f 93       	push	r24
    321a:	9f 93       	push	r25
    321c:	af 93       	push	r26
    321e:	bf 93       	push	r27
    3220:	ef 93       	push	r30
    3222:	ff 93       	push	r31
    3224:	e0 91 02 23 	lds	r30, 0x2302
    3228:	f0 91 03 23 	lds	r31, 0x2303
    322c:	30 97       	sbiw	r30, 0x00	; 0
    322e:	29 f0       	breq	.+10     	; 0x323a <__vector_41+0x3c>
    3230:	80 91 f8 23 	lds	r24, 0x23F8
    3234:	90 91 f9 23 	lds	r25, 0x23F9
    3238:	19 95       	eicall
    323a:	ff 91       	pop	r31
    323c:	ef 91       	pop	r30
    323e:	bf 91       	pop	r27
    3240:	af 91       	pop	r26
    3242:	9f 91       	pop	r25
    3244:	8f 91       	pop	r24
    3246:	7f 91       	pop	r23
    3248:	6f 91       	pop	r22
    324a:	5f 91       	pop	r21
    324c:	4f 91       	pop	r20
    324e:	3f 91       	pop	r19
    3250:	2f 91       	pop	r18
    3252:	0f 90       	pop	r0
    3254:	0b be       	out	0x3b, r0	; 59
    3256:	0f 90       	pop	r0
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	0f 90       	pop	r0
    325c:	1f 90       	pop	r1
    325e:	18 95       	reti

00003260 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    3260:	1f 92       	push	r1
    3262:	0f 92       	push	r0
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	0f 92       	push	r0
    3268:	11 24       	eor	r1, r1
    326a:	0b b6       	in	r0, 0x3b	; 59
    326c:	0f 92       	push	r0
    326e:	2f 93       	push	r18
    3270:	3f 93       	push	r19
    3272:	4f 93       	push	r20
    3274:	5f 93       	push	r21
    3276:	6f 93       	push	r22
    3278:	7f 93       	push	r23
    327a:	8f 93       	push	r24
    327c:	9f 93       	push	r25
    327e:	af 93       	push	r26
    3280:	bf 93       	push	r27
    3282:	ef 93       	push	r30
    3284:	ff 93       	push	r31
    3286:	e0 91 04 23 	lds	r30, 0x2304
    328a:	f0 91 05 23 	lds	r31, 0x2305
    328e:	30 97       	sbiw	r30, 0x00	; 0
    3290:	29 f0       	breq	.+10     	; 0x329c <__vector_42+0x3c>
    3292:	80 91 fa 23 	lds	r24, 0x23FA
    3296:	90 91 fb 23 	lds	r25, 0x23FB
    329a:	19 95       	eicall
    329c:	ff 91       	pop	r31
    329e:	ef 91       	pop	r30
    32a0:	bf 91       	pop	r27
    32a2:	af 91       	pop	r26
    32a4:	9f 91       	pop	r25
    32a6:	8f 91       	pop	r24
    32a8:	7f 91       	pop	r23
    32aa:	6f 91       	pop	r22
    32ac:	5f 91       	pop	r21
    32ae:	4f 91       	pop	r20
    32b0:	3f 91       	pop	r19
    32b2:	2f 91       	pop	r18
    32b4:	0f 90       	pop	r0
    32b6:	0b be       	out	0x3b, r0	; 59
    32b8:	0f 90       	pop	r0
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	0f 90       	pop	r0
    32be:	1f 90       	pop	r1
    32c0:	18 95       	reti

000032c2 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    32c2:	1f 92       	push	r1
    32c4:	0f 92       	push	r0
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	0f 92       	push	r0
    32ca:	11 24       	eor	r1, r1
    32cc:	0b b6       	in	r0, 0x3b	; 59
    32ce:	0f 92       	push	r0
    32d0:	2f 93       	push	r18
    32d2:	3f 93       	push	r19
    32d4:	4f 93       	push	r20
    32d6:	5f 93       	push	r21
    32d8:	6f 93       	push	r22
    32da:	7f 93       	push	r23
    32dc:	8f 93       	push	r24
    32de:	9f 93       	push	r25
    32e0:	af 93       	push	r26
    32e2:	bf 93       	push	r27
    32e4:	ef 93       	push	r30
    32e6:	ff 93       	push	r31
    32e8:	e0 91 06 23 	lds	r30, 0x2306
    32ec:	f0 91 07 23 	lds	r31, 0x2307
    32f0:	30 97       	sbiw	r30, 0x00	; 0
    32f2:	29 f0       	breq	.+10     	; 0x32fe <__vector_43+0x3c>
    32f4:	80 91 fc 23 	lds	r24, 0x23FC
    32f8:	90 91 fd 23 	lds	r25, 0x23FD
    32fc:	19 95       	eicall
    32fe:	ff 91       	pop	r31
    3300:	ef 91       	pop	r30
    3302:	bf 91       	pop	r27
    3304:	af 91       	pop	r26
    3306:	9f 91       	pop	r25
    3308:	8f 91       	pop	r24
    330a:	7f 91       	pop	r23
    330c:	6f 91       	pop	r22
    330e:	5f 91       	pop	r21
    3310:	4f 91       	pop	r20
    3312:	3f 91       	pop	r19
    3314:	2f 91       	pop	r18
    3316:	0f 90       	pop	r0
    3318:	0b be       	out	0x3b, r0	; 59
    331a:	0f 90       	pop	r0
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	0f 90       	pop	r0
    3320:	1f 90       	pop	r1
    3322:	18 95       	reti

00003324 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    3324:	1f 92       	push	r1
    3326:	0f 92       	push	r0
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	0f 92       	push	r0
    332c:	11 24       	eor	r1, r1
    332e:	0b b6       	in	r0, 0x3b	; 59
    3330:	0f 92       	push	r0
    3332:	2f 93       	push	r18
    3334:	3f 93       	push	r19
    3336:	4f 93       	push	r20
    3338:	5f 93       	push	r21
    333a:	6f 93       	push	r22
    333c:	7f 93       	push	r23
    333e:	8f 93       	push	r24
    3340:	9f 93       	push	r25
    3342:	af 93       	push	r26
    3344:	bf 93       	push	r27
    3346:	ef 93       	push	r30
    3348:	ff 93       	push	r31
    334a:	e0 91 08 23 	lds	r30, 0x2308
    334e:	f0 91 09 23 	lds	r31, 0x2309
    3352:	30 97       	sbiw	r30, 0x00	; 0
    3354:	29 f0       	breq	.+10     	; 0x3360 <__vector_44+0x3c>
    3356:	80 91 fe 23 	lds	r24, 0x23FE
    335a:	90 91 ff 23 	lds	r25, 0x23FF
    335e:	19 95       	eicall
    3360:	ff 91       	pop	r31
    3362:	ef 91       	pop	r30
    3364:	bf 91       	pop	r27
    3366:	af 91       	pop	r26
    3368:	9f 91       	pop	r25
    336a:	8f 91       	pop	r24
    336c:	7f 91       	pop	r23
    336e:	6f 91       	pop	r22
    3370:	5f 91       	pop	r21
    3372:	4f 91       	pop	r20
    3374:	3f 91       	pop	r19
    3376:	2f 91       	pop	r18
    3378:	0f 90       	pop	r0
    337a:	0b be       	out	0x3b, r0	; 59
    337c:	0f 90       	pop	r0
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	0f 90       	pop	r0
    3382:	1f 90       	pop	r1
    3384:	18 95       	reti

00003386 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3386:	1f 92       	push	r1
    3388:	0f 92       	push	r0
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	0f 92       	push	r0
    338e:	11 24       	eor	r1, r1
    3390:	0b b6       	in	r0, 0x3b	; 59
    3392:	0f 92       	push	r0
    3394:	2f 93       	push	r18
    3396:	3f 93       	push	r19
    3398:	4f 93       	push	r20
    339a:	5f 93       	push	r21
    339c:	6f 93       	push	r22
    339e:	7f 93       	push	r23
    33a0:	8f 93       	push	r24
    33a2:	9f 93       	push	r25
    33a4:	af 93       	push	r26
    33a6:	bf 93       	push	r27
    33a8:	ef 93       	push	r30
    33aa:	ff 93       	push	r31
    33ac:	e0 91 0a 23 	lds	r30, 0x230A
    33b0:	f0 91 0b 23 	lds	r31, 0x230B
    33b4:	30 97       	sbiw	r30, 0x00	; 0
    33b6:	29 f0       	breq	.+10     	; 0x33c2 <__vector_45+0x3c>
    33b8:	80 91 00 24 	lds	r24, 0x2400
    33bc:	90 91 01 24 	lds	r25, 0x2401
    33c0:	19 95       	eicall
    33c2:	ff 91       	pop	r31
    33c4:	ef 91       	pop	r30
    33c6:	bf 91       	pop	r27
    33c8:	af 91       	pop	r26
    33ca:	9f 91       	pop	r25
    33cc:	8f 91       	pop	r24
    33ce:	7f 91       	pop	r23
    33d0:	6f 91       	pop	r22
    33d2:	5f 91       	pop	r21
    33d4:	4f 91       	pop	r20
    33d6:	3f 91       	pop	r19
    33d8:	2f 91       	pop	r18
    33da:	0f 90       	pop	r0
    33dc:	0b be       	out	0x3b, r0	; 59
    33de:	0f 90       	pop	r0
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	0f 90       	pop	r0
    33e4:	1f 90       	pop	r1
    33e6:	18 95       	reti

000033e8 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    33e8:	1f 92       	push	r1
    33ea:	0f 92       	push	r0
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	0f 92       	push	r0
    33f0:	11 24       	eor	r1, r1
    33f2:	0b b6       	in	r0, 0x3b	; 59
    33f4:	0f 92       	push	r0
    33f6:	2f 93       	push	r18
    33f8:	3f 93       	push	r19
    33fa:	4f 93       	push	r20
    33fc:	5f 93       	push	r21
    33fe:	6f 93       	push	r22
    3400:	7f 93       	push	r23
    3402:	8f 93       	push	r24
    3404:	9f 93       	push	r25
    3406:	af 93       	push	r26
    3408:	bf 93       	push	r27
    340a:	ef 93       	push	r30
    340c:	ff 93       	push	r31
    340e:	e0 91 0c 23 	lds	r30, 0x230C
    3412:	f0 91 0d 23 	lds	r31, 0x230D
    3416:	30 97       	sbiw	r30, 0x00	; 0
    3418:	29 f0       	breq	.+10     	; 0x3424 <__vector_46+0x3c>
    341a:	80 91 02 24 	lds	r24, 0x2402
    341e:	90 91 03 24 	lds	r25, 0x2403
    3422:	19 95       	eicall
    3424:	ff 91       	pop	r31
    3426:	ef 91       	pop	r30
    3428:	bf 91       	pop	r27
    342a:	af 91       	pop	r26
    342c:	9f 91       	pop	r25
    342e:	8f 91       	pop	r24
    3430:	7f 91       	pop	r23
    3432:	6f 91       	pop	r22
    3434:	5f 91       	pop	r21
    3436:	4f 91       	pop	r20
    3438:	3f 91       	pop	r19
    343a:	2f 91       	pop	r18
    343c:	0f 90       	pop	r0
    343e:	0b be       	out	0x3b, r0	; 59
    3440:	0f 90       	pop	r0
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	0f 90       	pop	r0
    3446:	1f 90       	pop	r1
    3448:	18 95       	reti

0000344a <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    344a:	1f 92       	push	r1
    344c:	0f 92       	push	r0
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	0f 92       	push	r0
    3452:	11 24       	eor	r1, r1
    3454:	0b b6       	in	r0, 0x3b	; 59
    3456:	0f 92       	push	r0
    3458:	2f 93       	push	r18
    345a:	3f 93       	push	r19
    345c:	4f 93       	push	r20
    345e:	5f 93       	push	r21
    3460:	6f 93       	push	r22
    3462:	7f 93       	push	r23
    3464:	8f 93       	push	r24
    3466:	9f 93       	push	r25
    3468:	af 93       	push	r26
    346a:	bf 93       	push	r27
    346c:	ef 93       	push	r30
    346e:	ff 93       	push	r31
    3470:	e0 91 0e 23 	lds	r30, 0x230E
    3474:	f0 91 0f 23 	lds	r31, 0x230F
    3478:	30 97       	sbiw	r30, 0x00	; 0
    347a:	29 f0       	breq	.+10     	; 0x3486 <__vector_47+0x3c>
    347c:	80 91 04 24 	lds	r24, 0x2404
    3480:	90 91 05 24 	lds	r25, 0x2405
    3484:	19 95       	eicall
    3486:	ff 91       	pop	r31
    3488:	ef 91       	pop	r30
    348a:	bf 91       	pop	r27
    348c:	af 91       	pop	r26
    348e:	9f 91       	pop	r25
    3490:	8f 91       	pop	r24
    3492:	7f 91       	pop	r23
    3494:	6f 91       	pop	r22
    3496:	5f 91       	pop	r21
    3498:	4f 91       	pop	r20
    349a:	3f 91       	pop	r19
    349c:	2f 91       	pop	r18
    349e:	0f 90       	pop	r0
    34a0:	0b be       	out	0x3b, r0	; 59
    34a2:	0f 90       	pop	r0
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	0f 90       	pop	r0
    34a8:	1f 90       	pop	r1
    34aa:	18 95       	reti

000034ac <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    34ac:	1f 92       	push	r1
    34ae:	0f 92       	push	r0
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	0f 92       	push	r0
    34b4:	11 24       	eor	r1, r1
    34b6:	0b b6       	in	r0, 0x3b	; 59
    34b8:	0f 92       	push	r0
    34ba:	2f 93       	push	r18
    34bc:	3f 93       	push	r19
    34be:	4f 93       	push	r20
    34c0:	5f 93       	push	r21
    34c2:	6f 93       	push	r22
    34c4:	7f 93       	push	r23
    34c6:	8f 93       	push	r24
    34c8:	9f 93       	push	r25
    34ca:	af 93       	push	r26
    34cc:	bf 93       	push	r27
    34ce:	ef 93       	push	r30
    34d0:	ff 93       	push	r31
    34d2:	e0 91 10 23 	lds	r30, 0x2310
    34d6:	f0 91 11 23 	lds	r31, 0x2311
    34da:	30 97       	sbiw	r30, 0x00	; 0
    34dc:	29 f0       	breq	.+10     	; 0x34e8 <__vector_48+0x3c>
    34de:	80 91 06 24 	lds	r24, 0x2406
    34e2:	90 91 07 24 	lds	r25, 0x2407
    34e6:	19 95       	eicall
    34e8:	ff 91       	pop	r31
    34ea:	ef 91       	pop	r30
    34ec:	bf 91       	pop	r27
    34ee:	af 91       	pop	r26
    34f0:	9f 91       	pop	r25
    34f2:	8f 91       	pop	r24
    34f4:	7f 91       	pop	r23
    34f6:	6f 91       	pop	r22
    34f8:	5f 91       	pop	r21
    34fa:	4f 91       	pop	r20
    34fc:	3f 91       	pop	r19
    34fe:	2f 91       	pop	r18
    3500:	0f 90       	pop	r0
    3502:	0b be       	out	0x3b, r0	; 59
    3504:	0f 90       	pop	r0
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	0f 90       	pop	r0
    350a:	1f 90       	pop	r1
    350c:	18 95       	reti

0000350e <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    350e:	1f 92       	push	r1
    3510:	0f 92       	push	r0
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	0f 92       	push	r0
    3516:	11 24       	eor	r1, r1
    3518:	0b b6       	in	r0, 0x3b	; 59
    351a:	0f 92       	push	r0
    351c:	2f 93       	push	r18
    351e:	3f 93       	push	r19
    3520:	4f 93       	push	r20
    3522:	5f 93       	push	r21
    3524:	6f 93       	push	r22
    3526:	7f 93       	push	r23
    3528:	8f 93       	push	r24
    352a:	9f 93       	push	r25
    352c:	af 93       	push	r26
    352e:	bf 93       	push	r27
    3530:	ef 93       	push	r30
    3532:	ff 93       	push	r31
    3534:	e0 91 12 23 	lds	r30, 0x2312
    3538:	f0 91 13 23 	lds	r31, 0x2313
    353c:	30 97       	sbiw	r30, 0x00	; 0
    353e:	29 f0       	breq	.+10     	; 0x354a <__vector_49+0x3c>
    3540:	80 91 08 24 	lds	r24, 0x2408
    3544:	90 91 09 24 	lds	r25, 0x2409
    3548:	19 95       	eicall
    354a:	ff 91       	pop	r31
    354c:	ef 91       	pop	r30
    354e:	bf 91       	pop	r27
    3550:	af 91       	pop	r26
    3552:	9f 91       	pop	r25
    3554:	8f 91       	pop	r24
    3556:	7f 91       	pop	r23
    3558:	6f 91       	pop	r22
    355a:	5f 91       	pop	r21
    355c:	4f 91       	pop	r20
    355e:	3f 91       	pop	r19
    3560:	2f 91       	pop	r18
    3562:	0f 90       	pop	r0
    3564:	0b be       	out	0x3b, r0	; 59
    3566:	0f 90       	pop	r0
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	0f 90       	pop	r0
    356c:	1f 90       	pop	r1
    356e:	18 95       	reti

00003570 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    3570:	1f 92       	push	r1
    3572:	0f 92       	push	r0
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	0f 92       	push	r0
    3578:	11 24       	eor	r1, r1
    357a:	0b b6       	in	r0, 0x3b	; 59
    357c:	0f 92       	push	r0
    357e:	2f 93       	push	r18
    3580:	3f 93       	push	r19
    3582:	4f 93       	push	r20
    3584:	5f 93       	push	r21
    3586:	6f 93       	push	r22
    3588:	7f 93       	push	r23
    358a:	8f 93       	push	r24
    358c:	9f 93       	push	r25
    358e:	af 93       	push	r26
    3590:	bf 93       	push	r27
    3592:	ef 93       	push	r30
    3594:	ff 93       	push	r31
    3596:	e0 91 14 23 	lds	r30, 0x2314
    359a:	f0 91 15 23 	lds	r31, 0x2315
    359e:	30 97       	sbiw	r30, 0x00	; 0
    35a0:	29 f0       	breq	.+10     	; 0x35ac <__vector_50+0x3c>
    35a2:	80 91 0a 24 	lds	r24, 0x240A
    35a6:	90 91 0b 24 	lds	r25, 0x240B
    35aa:	19 95       	eicall
    35ac:	ff 91       	pop	r31
    35ae:	ef 91       	pop	r30
    35b0:	bf 91       	pop	r27
    35b2:	af 91       	pop	r26
    35b4:	9f 91       	pop	r25
    35b6:	8f 91       	pop	r24
    35b8:	7f 91       	pop	r23
    35ba:	6f 91       	pop	r22
    35bc:	5f 91       	pop	r21
    35be:	4f 91       	pop	r20
    35c0:	3f 91       	pop	r19
    35c2:	2f 91       	pop	r18
    35c4:	0f 90       	pop	r0
    35c6:	0b be       	out	0x3b, r0	; 59
    35c8:	0f 90       	pop	r0
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	0f 90       	pop	r0
    35ce:	1f 90       	pop	r1
    35d0:	18 95       	reti

000035d2 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    35d2:	1f 92       	push	r1
    35d4:	0f 92       	push	r0
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	0f 92       	push	r0
    35da:	11 24       	eor	r1, r1
    35dc:	0b b6       	in	r0, 0x3b	; 59
    35de:	0f 92       	push	r0
    35e0:	2f 93       	push	r18
    35e2:	3f 93       	push	r19
    35e4:	4f 93       	push	r20
    35e6:	5f 93       	push	r21
    35e8:	6f 93       	push	r22
    35ea:	7f 93       	push	r23
    35ec:	8f 93       	push	r24
    35ee:	9f 93       	push	r25
    35f0:	af 93       	push	r26
    35f2:	bf 93       	push	r27
    35f4:	ef 93       	push	r30
    35f6:	ff 93       	push	r31
    35f8:	e0 91 16 23 	lds	r30, 0x2316
    35fc:	f0 91 17 23 	lds	r31, 0x2317
    3600:	30 97       	sbiw	r30, 0x00	; 0
    3602:	29 f0       	breq	.+10     	; 0x360e <__vector_51+0x3c>
    3604:	80 91 0c 24 	lds	r24, 0x240C
    3608:	90 91 0d 24 	lds	r25, 0x240D
    360c:	19 95       	eicall
    360e:	ff 91       	pop	r31
    3610:	ef 91       	pop	r30
    3612:	bf 91       	pop	r27
    3614:	af 91       	pop	r26
    3616:	9f 91       	pop	r25
    3618:	8f 91       	pop	r24
    361a:	7f 91       	pop	r23
    361c:	6f 91       	pop	r22
    361e:	5f 91       	pop	r21
    3620:	4f 91       	pop	r20
    3622:	3f 91       	pop	r19
    3624:	2f 91       	pop	r18
    3626:	0f 90       	pop	r0
    3628:	0b be       	out	0x3b, r0	; 59
    362a:	0f 90       	pop	r0
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	0f 90       	pop	r0
    3630:	1f 90       	pop	r1
    3632:	18 95       	reti

00003634 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    3634:	1f 92       	push	r1
    3636:	0f 92       	push	r0
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	0f 92       	push	r0
    363c:	11 24       	eor	r1, r1
    363e:	0b b6       	in	r0, 0x3b	; 59
    3640:	0f 92       	push	r0
    3642:	2f 93       	push	r18
    3644:	3f 93       	push	r19
    3646:	4f 93       	push	r20
    3648:	5f 93       	push	r21
    364a:	6f 93       	push	r22
    364c:	7f 93       	push	r23
    364e:	8f 93       	push	r24
    3650:	9f 93       	push	r25
    3652:	af 93       	push	r26
    3654:	bf 93       	push	r27
    3656:	ef 93       	push	r30
    3658:	ff 93       	push	r31
    365a:	e0 91 18 23 	lds	r30, 0x2318
    365e:	f0 91 19 23 	lds	r31, 0x2319
    3662:	30 97       	sbiw	r30, 0x00	; 0
    3664:	29 f0       	breq	.+10     	; 0x3670 <__vector_52+0x3c>
    3666:	80 91 0e 24 	lds	r24, 0x240E
    366a:	90 91 0f 24 	lds	r25, 0x240F
    366e:	19 95       	eicall
    3670:	ff 91       	pop	r31
    3672:	ef 91       	pop	r30
    3674:	bf 91       	pop	r27
    3676:	af 91       	pop	r26
    3678:	9f 91       	pop	r25
    367a:	8f 91       	pop	r24
    367c:	7f 91       	pop	r23
    367e:	6f 91       	pop	r22
    3680:	5f 91       	pop	r21
    3682:	4f 91       	pop	r20
    3684:	3f 91       	pop	r19
    3686:	2f 91       	pop	r18
    3688:	0f 90       	pop	r0
    368a:	0b be       	out	0x3b, r0	; 59
    368c:	0f 90       	pop	r0
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	0f 90       	pop	r0
    3692:	1f 90       	pop	r1
    3694:	18 95       	reti

00003696 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    3696:	1f 92       	push	r1
    3698:	0f 92       	push	r0
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	0f 92       	push	r0
    369e:	11 24       	eor	r1, r1
    36a0:	0b b6       	in	r0, 0x3b	; 59
    36a2:	0f 92       	push	r0
    36a4:	2f 93       	push	r18
    36a6:	3f 93       	push	r19
    36a8:	4f 93       	push	r20
    36aa:	5f 93       	push	r21
    36ac:	6f 93       	push	r22
    36ae:	7f 93       	push	r23
    36b0:	8f 93       	push	r24
    36b2:	9f 93       	push	r25
    36b4:	af 93       	push	r26
    36b6:	bf 93       	push	r27
    36b8:	ef 93       	push	r30
    36ba:	ff 93       	push	r31
    36bc:	e0 91 1a 23 	lds	r30, 0x231A
    36c0:	f0 91 1b 23 	lds	r31, 0x231B
    36c4:	30 97       	sbiw	r30, 0x00	; 0
    36c6:	29 f0       	breq	.+10     	; 0x36d2 <__vector_53+0x3c>
    36c8:	80 91 10 24 	lds	r24, 0x2410
    36cc:	90 91 11 24 	lds	r25, 0x2411
    36d0:	19 95       	eicall
    36d2:	ff 91       	pop	r31
    36d4:	ef 91       	pop	r30
    36d6:	bf 91       	pop	r27
    36d8:	af 91       	pop	r26
    36da:	9f 91       	pop	r25
    36dc:	8f 91       	pop	r24
    36de:	7f 91       	pop	r23
    36e0:	6f 91       	pop	r22
    36e2:	5f 91       	pop	r21
    36e4:	4f 91       	pop	r20
    36e6:	3f 91       	pop	r19
    36e8:	2f 91       	pop	r18
    36ea:	0f 90       	pop	r0
    36ec:	0b be       	out	0x3b, r0	; 59
    36ee:	0f 90       	pop	r0
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	0f 90       	pop	r0
    36f4:	1f 90       	pop	r1
    36f6:	18 95       	reti

000036f8 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    36f8:	1f 92       	push	r1
    36fa:	0f 92       	push	r0
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	0f 92       	push	r0
    3700:	11 24       	eor	r1, r1
    3702:	0b b6       	in	r0, 0x3b	; 59
    3704:	0f 92       	push	r0
    3706:	2f 93       	push	r18
    3708:	3f 93       	push	r19
    370a:	4f 93       	push	r20
    370c:	5f 93       	push	r21
    370e:	6f 93       	push	r22
    3710:	7f 93       	push	r23
    3712:	8f 93       	push	r24
    3714:	9f 93       	push	r25
    3716:	af 93       	push	r26
    3718:	bf 93       	push	r27
    371a:	ef 93       	push	r30
    371c:	ff 93       	push	r31
    371e:	e0 91 1c 23 	lds	r30, 0x231C
    3722:	f0 91 1d 23 	lds	r31, 0x231D
    3726:	30 97       	sbiw	r30, 0x00	; 0
    3728:	29 f0       	breq	.+10     	; 0x3734 <__vector_54+0x3c>
    372a:	80 91 12 24 	lds	r24, 0x2412
    372e:	90 91 13 24 	lds	r25, 0x2413
    3732:	19 95       	eicall
    3734:	ff 91       	pop	r31
    3736:	ef 91       	pop	r30
    3738:	bf 91       	pop	r27
    373a:	af 91       	pop	r26
    373c:	9f 91       	pop	r25
    373e:	8f 91       	pop	r24
    3740:	7f 91       	pop	r23
    3742:	6f 91       	pop	r22
    3744:	5f 91       	pop	r21
    3746:	4f 91       	pop	r20
    3748:	3f 91       	pop	r19
    374a:	2f 91       	pop	r18
    374c:	0f 90       	pop	r0
    374e:	0b be       	out	0x3b, r0	; 59
    3750:	0f 90       	pop	r0
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	0f 90       	pop	r0
    3756:	1f 90       	pop	r1
    3758:	18 95       	reti

0000375a <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    375a:	1f 92       	push	r1
    375c:	0f 92       	push	r0
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	0f 92       	push	r0
    3762:	11 24       	eor	r1, r1
    3764:	0b b6       	in	r0, 0x3b	; 59
    3766:	0f 92       	push	r0
    3768:	2f 93       	push	r18
    376a:	3f 93       	push	r19
    376c:	4f 93       	push	r20
    376e:	5f 93       	push	r21
    3770:	6f 93       	push	r22
    3772:	7f 93       	push	r23
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	af 93       	push	r26
    377a:	bf 93       	push	r27
    377c:	ef 93       	push	r30
    377e:	ff 93       	push	r31
    3780:	e0 91 1e 23 	lds	r30, 0x231E
    3784:	f0 91 1f 23 	lds	r31, 0x231F
    3788:	30 97       	sbiw	r30, 0x00	; 0
    378a:	29 f0       	breq	.+10     	; 0x3796 <__vector_55+0x3c>
    378c:	80 91 14 24 	lds	r24, 0x2414
    3790:	90 91 15 24 	lds	r25, 0x2415
    3794:	19 95       	eicall
    3796:	ff 91       	pop	r31
    3798:	ef 91       	pop	r30
    379a:	bf 91       	pop	r27
    379c:	af 91       	pop	r26
    379e:	9f 91       	pop	r25
    37a0:	8f 91       	pop	r24
    37a2:	7f 91       	pop	r23
    37a4:	6f 91       	pop	r22
    37a6:	5f 91       	pop	r21
    37a8:	4f 91       	pop	r20
    37aa:	3f 91       	pop	r19
    37ac:	2f 91       	pop	r18
    37ae:	0f 90       	pop	r0
    37b0:	0b be       	out	0x3b, r0	; 59
    37b2:	0f 90       	pop	r0
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	0f 90       	pop	r0
    37b8:	1f 90       	pop	r1
    37ba:	18 95       	reti

000037bc <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    37bc:	1f 92       	push	r1
    37be:	0f 92       	push	r0
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	0f 92       	push	r0
    37c4:	11 24       	eor	r1, r1
    37c6:	0b b6       	in	r0, 0x3b	; 59
    37c8:	0f 92       	push	r0
    37ca:	2f 93       	push	r18
    37cc:	3f 93       	push	r19
    37ce:	4f 93       	push	r20
    37d0:	5f 93       	push	r21
    37d2:	6f 93       	push	r22
    37d4:	7f 93       	push	r23
    37d6:	8f 93       	push	r24
    37d8:	9f 93       	push	r25
    37da:	af 93       	push	r26
    37dc:	bf 93       	push	r27
    37de:	ef 93       	push	r30
    37e0:	ff 93       	push	r31
    37e2:	e0 91 20 23 	lds	r30, 0x2320
    37e6:	f0 91 21 23 	lds	r31, 0x2321
    37ea:	30 97       	sbiw	r30, 0x00	; 0
    37ec:	29 f0       	breq	.+10     	; 0x37f8 <__vector_56+0x3c>
    37ee:	80 91 16 24 	lds	r24, 0x2416
    37f2:	90 91 17 24 	lds	r25, 0x2417
    37f6:	19 95       	eicall
    37f8:	ff 91       	pop	r31
    37fa:	ef 91       	pop	r30
    37fc:	bf 91       	pop	r27
    37fe:	af 91       	pop	r26
    3800:	9f 91       	pop	r25
    3802:	8f 91       	pop	r24
    3804:	7f 91       	pop	r23
    3806:	6f 91       	pop	r22
    3808:	5f 91       	pop	r21
    380a:	4f 91       	pop	r20
    380c:	3f 91       	pop	r19
    380e:	2f 91       	pop	r18
    3810:	0f 90       	pop	r0
    3812:	0b be       	out	0x3b, r0	; 59
    3814:	0f 90       	pop	r0
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	0f 90       	pop	r0
    381a:	1f 90       	pop	r1
    381c:	18 95       	reti

0000381e <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    381e:	1f 92       	push	r1
    3820:	0f 92       	push	r0
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	0f 92       	push	r0
    3826:	11 24       	eor	r1, r1
    3828:	0b b6       	in	r0, 0x3b	; 59
    382a:	0f 92       	push	r0
    382c:	2f 93       	push	r18
    382e:	3f 93       	push	r19
    3830:	4f 93       	push	r20
    3832:	5f 93       	push	r21
    3834:	6f 93       	push	r22
    3836:	7f 93       	push	r23
    3838:	8f 93       	push	r24
    383a:	9f 93       	push	r25
    383c:	af 93       	push	r26
    383e:	bf 93       	push	r27
    3840:	ef 93       	push	r30
    3842:	ff 93       	push	r31
    3844:	e0 91 22 23 	lds	r30, 0x2322
    3848:	f0 91 23 23 	lds	r31, 0x2323
    384c:	30 97       	sbiw	r30, 0x00	; 0
    384e:	29 f0       	breq	.+10     	; 0x385a <__vector_57+0x3c>
    3850:	80 91 18 24 	lds	r24, 0x2418
    3854:	90 91 19 24 	lds	r25, 0x2419
    3858:	19 95       	eicall
    385a:	ff 91       	pop	r31
    385c:	ef 91       	pop	r30
    385e:	bf 91       	pop	r27
    3860:	af 91       	pop	r26
    3862:	9f 91       	pop	r25
    3864:	8f 91       	pop	r24
    3866:	7f 91       	pop	r23
    3868:	6f 91       	pop	r22
    386a:	5f 91       	pop	r21
    386c:	4f 91       	pop	r20
    386e:	3f 91       	pop	r19
    3870:	2f 91       	pop	r18
    3872:	0f 90       	pop	r0
    3874:	0b be       	out	0x3b, r0	; 59
    3876:	0f 90       	pop	r0
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	0f 90       	pop	r0
    387c:	1f 90       	pop	r1
    387e:	18 95       	reti

00003880 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3880:	1f 92       	push	r1
    3882:	0f 92       	push	r0
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	0f 92       	push	r0
    3888:	11 24       	eor	r1, r1
    388a:	0b b6       	in	r0, 0x3b	; 59
    388c:	0f 92       	push	r0
    388e:	2f 93       	push	r18
    3890:	3f 93       	push	r19
    3892:	4f 93       	push	r20
    3894:	5f 93       	push	r21
    3896:	6f 93       	push	r22
    3898:	7f 93       	push	r23
    389a:	8f 93       	push	r24
    389c:	9f 93       	push	r25
    389e:	af 93       	push	r26
    38a0:	bf 93       	push	r27
    38a2:	ef 93       	push	r30
    38a4:	ff 93       	push	r31
    38a6:	e0 91 24 23 	lds	r30, 0x2324
    38aa:	f0 91 25 23 	lds	r31, 0x2325
    38ae:	30 97       	sbiw	r30, 0x00	; 0
    38b0:	29 f0       	breq	.+10     	; 0x38bc <__vector_58+0x3c>
    38b2:	80 91 1a 24 	lds	r24, 0x241A
    38b6:	90 91 1b 24 	lds	r25, 0x241B
    38ba:	19 95       	eicall
    38bc:	ff 91       	pop	r31
    38be:	ef 91       	pop	r30
    38c0:	bf 91       	pop	r27
    38c2:	af 91       	pop	r26
    38c4:	9f 91       	pop	r25
    38c6:	8f 91       	pop	r24
    38c8:	7f 91       	pop	r23
    38ca:	6f 91       	pop	r22
    38cc:	5f 91       	pop	r21
    38ce:	4f 91       	pop	r20
    38d0:	3f 91       	pop	r19
    38d2:	2f 91       	pop	r18
    38d4:	0f 90       	pop	r0
    38d6:	0b be       	out	0x3b, r0	; 59
    38d8:	0f 90       	pop	r0
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	0f 90       	pop	r0
    38de:	1f 90       	pop	r1
    38e0:	18 95       	reti

000038e2 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    38e2:	1f 92       	push	r1
    38e4:	0f 92       	push	r0
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	0f 92       	push	r0
    38ea:	11 24       	eor	r1, r1
    38ec:	0b b6       	in	r0, 0x3b	; 59
    38ee:	0f 92       	push	r0
    38f0:	2f 93       	push	r18
    38f2:	3f 93       	push	r19
    38f4:	4f 93       	push	r20
    38f6:	5f 93       	push	r21
    38f8:	6f 93       	push	r22
    38fa:	7f 93       	push	r23
    38fc:	8f 93       	push	r24
    38fe:	9f 93       	push	r25
    3900:	af 93       	push	r26
    3902:	bf 93       	push	r27
    3904:	ef 93       	push	r30
    3906:	ff 93       	push	r31
    3908:	e0 91 26 23 	lds	r30, 0x2326
    390c:	f0 91 27 23 	lds	r31, 0x2327
    3910:	30 97       	sbiw	r30, 0x00	; 0
    3912:	29 f0       	breq	.+10     	; 0x391e <__vector_59+0x3c>
    3914:	80 91 1c 24 	lds	r24, 0x241C
    3918:	90 91 1d 24 	lds	r25, 0x241D
    391c:	19 95       	eicall
    391e:	ff 91       	pop	r31
    3920:	ef 91       	pop	r30
    3922:	bf 91       	pop	r27
    3924:	af 91       	pop	r26
    3926:	9f 91       	pop	r25
    3928:	8f 91       	pop	r24
    392a:	7f 91       	pop	r23
    392c:	6f 91       	pop	r22
    392e:	5f 91       	pop	r21
    3930:	4f 91       	pop	r20
    3932:	3f 91       	pop	r19
    3934:	2f 91       	pop	r18
    3936:	0f 90       	pop	r0
    3938:	0b be       	out	0x3b, r0	; 59
    393a:	0f 90       	pop	r0
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	0f 90       	pop	r0
    3940:	1f 90       	pop	r1
    3942:	18 95       	reti

00003944 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3944:	1f 92       	push	r1
    3946:	0f 92       	push	r0
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	0f 92       	push	r0
    394c:	11 24       	eor	r1, r1
    394e:	0b b6       	in	r0, 0x3b	; 59
    3950:	0f 92       	push	r0
    3952:	2f 93       	push	r18
    3954:	3f 93       	push	r19
    3956:	4f 93       	push	r20
    3958:	5f 93       	push	r21
    395a:	6f 93       	push	r22
    395c:	7f 93       	push	r23
    395e:	8f 93       	push	r24
    3960:	9f 93       	push	r25
    3962:	af 93       	push	r26
    3964:	bf 93       	push	r27
    3966:	ef 93       	push	r30
    3968:	ff 93       	push	r31
    396a:	e0 91 28 23 	lds	r30, 0x2328
    396e:	f0 91 29 23 	lds	r31, 0x2329
    3972:	30 97       	sbiw	r30, 0x00	; 0
    3974:	29 f0       	breq	.+10     	; 0x3980 <__vector_60+0x3c>
    3976:	80 91 1e 24 	lds	r24, 0x241E
    397a:	90 91 1f 24 	lds	r25, 0x241F
    397e:	19 95       	eicall
    3980:	ff 91       	pop	r31
    3982:	ef 91       	pop	r30
    3984:	bf 91       	pop	r27
    3986:	af 91       	pop	r26
    3988:	9f 91       	pop	r25
    398a:	8f 91       	pop	r24
    398c:	7f 91       	pop	r23
    398e:	6f 91       	pop	r22
    3990:	5f 91       	pop	r21
    3992:	4f 91       	pop	r20
    3994:	3f 91       	pop	r19
    3996:	2f 91       	pop	r18
    3998:	0f 90       	pop	r0
    399a:	0b be       	out	0x3b, r0	; 59
    399c:	0f 90       	pop	r0
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	0f 90       	pop	r0
    39a2:	1f 90       	pop	r1
    39a4:	18 95       	reti

000039a6 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    39a6:	1f 92       	push	r1
    39a8:	0f 92       	push	r0
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	0f 92       	push	r0
    39ae:	11 24       	eor	r1, r1
    39b0:	0b b6       	in	r0, 0x3b	; 59
    39b2:	0f 92       	push	r0
    39b4:	2f 93       	push	r18
    39b6:	3f 93       	push	r19
    39b8:	4f 93       	push	r20
    39ba:	5f 93       	push	r21
    39bc:	6f 93       	push	r22
    39be:	7f 93       	push	r23
    39c0:	8f 93       	push	r24
    39c2:	9f 93       	push	r25
    39c4:	af 93       	push	r26
    39c6:	bf 93       	push	r27
    39c8:	ef 93       	push	r30
    39ca:	ff 93       	push	r31
    39cc:	e0 91 2a 23 	lds	r30, 0x232A
    39d0:	f0 91 2b 23 	lds	r31, 0x232B
    39d4:	30 97       	sbiw	r30, 0x00	; 0
    39d6:	29 f0       	breq	.+10     	; 0x39e2 <__vector_61+0x3c>
    39d8:	80 91 20 24 	lds	r24, 0x2420
    39dc:	90 91 21 24 	lds	r25, 0x2421
    39e0:	19 95       	eicall
    39e2:	ff 91       	pop	r31
    39e4:	ef 91       	pop	r30
    39e6:	bf 91       	pop	r27
    39e8:	af 91       	pop	r26
    39ea:	9f 91       	pop	r25
    39ec:	8f 91       	pop	r24
    39ee:	7f 91       	pop	r23
    39f0:	6f 91       	pop	r22
    39f2:	5f 91       	pop	r21
    39f4:	4f 91       	pop	r20
    39f6:	3f 91       	pop	r19
    39f8:	2f 91       	pop	r18
    39fa:	0f 90       	pop	r0
    39fc:	0b be       	out	0x3b, r0	; 59
    39fe:	0f 90       	pop	r0
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	0f 90       	pop	r0
    3a04:	1f 90       	pop	r1
    3a06:	18 95       	reti

00003a08 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    3a08:	1f 92       	push	r1
    3a0a:	0f 92       	push	r0
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	0f 92       	push	r0
    3a10:	11 24       	eor	r1, r1
    3a12:	0b b6       	in	r0, 0x3b	; 59
    3a14:	0f 92       	push	r0
    3a16:	2f 93       	push	r18
    3a18:	3f 93       	push	r19
    3a1a:	4f 93       	push	r20
    3a1c:	5f 93       	push	r21
    3a1e:	6f 93       	push	r22
    3a20:	7f 93       	push	r23
    3a22:	8f 93       	push	r24
    3a24:	9f 93       	push	r25
    3a26:	af 93       	push	r26
    3a28:	bf 93       	push	r27
    3a2a:	ef 93       	push	r30
    3a2c:	ff 93       	push	r31
    3a2e:	e0 91 2c 23 	lds	r30, 0x232C
    3a32:	f0 91 2d 23 	lds	r31, 0x232D
    3a36:	30 97       	sbiw	r30, 0x00	; 0
    3a38:	29 f0       	breq	.+10     	; 0x3a44 <__vector_62+0x3c>
    3a3a:	80 91 22 24 	lds	r24, 0x2422
    3a3e:	90 91 23 24 	lds	r25, 0x2423
    3a42:	19 95       	eicall
    3a44:	ff 91       	pop	r31
    3a46:	ef 91       	pop	r30
    3a48:	bf 91       	pop	r27
    3a4a:	af 91       	pop	r26
    3a4c:	9f 91       	pop	r25
    3a4e:	8f 91       	pop	r24
    3a50:	7f 91       	pop	r23
    3a52:	6f 91       	pop	r22
    3a54:	5f 91       	pop	r21
    3a56:	4f 91       	pop	r20
    3a58:	3f 91       	pop	r19
    3a5a:	2f 91       	pop	r18
    3a5c:	0f 90       	pop	r0
    3a5e:	0b be       	out	0x3b, r0	; 59
    3a60:	0f 90       	pop	r0
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	0f 90       	pop	r0
    3a66:	1f 90       	pop	r1
    3a68:	18 95       	reti

00003a6a <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3a6a:	1f 92       	push	r1
    3a6c:	0f 92       	push	r0
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	0f 92       	push	r0
    3a72:	11 24       	eor	r1, r1
    3a74:	0b b6       	in	r0, 0x3b	; 59
    3a76:	0f 92       	push	r0
    3a78:	2f 93       	push	r18
    3a7a:	3f 93       	push	r19
    3a7c:	4f 93       	push	r20
    3a7e:	5f 93       	push	r21
    3a80:	6f 93       	push	r22
    3a82:	7f 93       	push	r23
    3a84:	8f 93       	push	r24
    3a86:	9f 93       	push	r25
    3a88:	af 93       	push	r26
    3a8a:	bf 93       	push	r27
    3a8c:	ef 93       	push	r30
    3a8e:	ff 93       	push	r31
    3a90:	e0 91 2e 23 	lds	r30, 0x232E
    3a94:	f0 91 2f 23 	lds	r31, 0x232F
    3a98:	30 97       	sbiw	r30, 0x00	; 0
    3a9a:	29 f0       	breq	.+10     	; 0x3aa6 <__vector_63+0x3c>
    3a9c:	80 91 24 24 	lds	r24, 0x2424
    3aa0:	90 91 25 24 	lds	r25, 0x2425
    3aa4:	19 95       	eicall
    3aa6:	ff 91       	pop	r31
    3aa8:	ef 91       	pop	r30
    3aaa:	bf 91       	pop	r27
    3aac:	af 91       	pop	r26
    3aae:	9f 91       	pop	r25
    3ab0:	8f 91       	pop	r24
    3ab2:	7f 91       	pop	r23
    3ab4:	6f 91       	pop	r22
    3ab6:	5f 91       	pop	r21
    3ab8:	4f 91       	pop	r20
    3aba:	3f 91       	pop	r19
    3abc:	2f 91       	pop	r18
    3abe:	0f 90       	pop	r0
    3ac0:	0b be       	out	0x3b, r0	; 59
    3ac2:	0f 90       	pop	r0
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	0f 90       	pop	r0
    3ac8:	1f 90       	pop	r1
    3aca:	18 95       	reti

00003acc <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3acc:	1f 92       	push	r1
    3ace:	0f 92       	push	r0
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	0f 92       	push	r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	0b b6       	in	r0, 0x3b	; 59
    3ad8:	0f 92       	push	r0
    3ada:	2f 93       	push	r18
    3adc:	3f 93       	push	r19
    3ade:	4f 93       	push	r20
    3ae0:	5f 93       	push	r21
    3ae2:	6f 93       	push	r22
    3ae4:	7f 93       	push	r23
    3ae6:	8f 93       	push	r24
    3ae8:	9f 93       	push	r25
    3aea:	af 93       	push	r26
    3aec:	bf 93       	push	r27
    3aee:	ef 93       	push	r30
    3af0:	ff 93       	push	r31
    3af2:	e0 91 30 23 	lds	r30, 0x2330
    3af6:	f0 91 31 23 	lds	r31, 0x2331
    3afa:	30 97       	sbiw	r30, 0x00	; 0
    3afc:	29 f0       	breq	.+10     	; 0x3b08 <__vector_64+0x3c>
    3afe:	80 91 26 24 	lds	r24, 0x2426
    3b02:	90 91 27 24 	lds	r25, 0x2427
    3b06:	19 95       	eicall
    3b08:	ff 91       	pop	r31
    3b0a:	ef 91       	pop	r30
    3b0c:	bf 91       	pop	r27
    3b0e:	af 91       	pop	r26
    3b10:	9f 91       	pop	r25
    3b12:	8f 91       	pop	r24
    3b14:	7f 91       	pop	r23
    3b16:	6f 91       	pop	r22
    3b18:	5f 91       	pop	r21
    3b1a:	4f 91       	pop	r20
    3b1c:	3f 91       	pop	r19
    3b1e:	2f 91       	pop	r18
    3b20:	0f 90       	pop	r0
    3b22:	0b be       	out	0x3b, r0	; 59
    3b24:	0f 90       	pop	r0
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	0f 90       	pop	r0
    3b2a:	1f 90       	pop	r1
    3b2c:	18 95       	reti

00003b2e <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3b2e:	1f 92       	push	r1
    3b30:	0f 92       	push	r0
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	0f 92       	push	r0
    3b36:	11 24       	eor	r1, r1
    3b38:	0b b6       	in	r0, 0x3b	; 59
    3b3a:	0f 92       	push	r0
    3b3c:	2f 93       	push	r18
    3b3e:	3f 93       	push	r19
    3b40:	4f 93       	push	r20
    3b42:	5f 93       	push	r21
    3b44:	6f 93       	push	r22
    3b46:	7f 93       	push	r23
    3b48:	8f 93       	push	r24
    3b4a:	9f 93       	push	r25
    3b4c:	af 93       	push	r26
    3b4e:	bf 93       	push	r27
    3b50:	ef 93       	push	r30
    3b52:	ff 93       	push	r31
    3b54:	e0 91 32 23 	lds	r30, 0x2332
    3b58:	f0 91 33 23 	lds	r31, 0x2333
    3b5c:	30 97       	sbiw	r30, 0x00	; 0
    3b5e:	29 f0       	breq	.+10     	; 0x3b6a <__vector_65+0x3c>
    3b60:	80 91 28 24 	lds	r24, 0x2428
    3b64:	90 91 29 24 	lds	r25, 0x2429
    3b68:	19 95       	eicall
    3b6a:	ff 91       	pop	r31
    3b6c:	ef 91       	pop	r30
    3b6e:	bf 91       	pop	r27
    3b70:	af 91       	pop	r26
    3b72:	9f 91       	pop	r25
    3b74:	8f 91       	pop	r24
    3b76:	7f 91       	pop	r23
    3b78:	6f 91       	pop	r22
    3b7a:	5f 91       	pop	r21
    3b7c:	4f 91       	pop	r20
    3b7e:	3f 91       	pop	r19
    3b80:	2f 91       	pop	r18
    3b82:	0f 90       	pop	r0
    3b84:	0b be       	out	0x3b, r0	; 59
    3b86:	0f 90       	pop	r0
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	0f 90       	pop	r0
    3b8c:	1f 90       	pop	r1
    3b8e:	18 95       	reti

00003b90 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3b90:	1f 92       	push	r1
    3b92:	0f 92       	push	r0
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	0f 92       	push	r0
    3b98:	11 24       	eor	r1, r1
    3b9a:	0b b6       	in	r0, 0x3b	; 59
    3b9c:	0f 92       	push	r0
    3b9e:	2f 93       	push	r18
    3ba0:	3f 93       	push	r19
    3ba2:	4f 93       	push	r20
    3ba4:	5f 93       	push	r21
    3ba6:	6f 93       	push	r22
    3ba8:	7f 93       	push	r23
    3baa:	8f 93       	push	r24
    3bac:	9f 93       	push	r25
    3bae:	af 93       	push	r26
    3bb0:	bf 93       	push	r27
    3bb2:	ef 93       	push	r30
    3bb4:	ff 93       	push	r31
    3bb6:	e0 91 34 23 	lds	r30, 0x2334
    3bba:	f0 91 35 23 	lds	r31, 0x2335
    3bbe:	30 97       	sbiw	r30, 0x00	; 0
    3bc0:	29 f0       	breq	.+10     	; 0x3bcc <__vector_66+0x3c>
    3bc2:	80 91 2a 24 	lds	r24, 0x242A
    3bc6:	90 91 2b 24 	lds	r25, 0x242B
    3bca:	19 95       	eicall
    3bcc:	ff 91       	pop	r31
    3bce:	ef 91       	pop	r30
    3bd0:	bf 91       	pop	r27
    3bd2:	af 91       	pop	r26
    3bd4:	9f 91       	pop	r25
    3bd6:	8f 91       	pop	r24
    3bd8:	7f 91       	pop	r23
    3bda:	6f 91       	pop	r22
    3bdc:	5f 91       	pop	r21
    3bde:	4f 91       	pop	r20
    3be0:	3f 91       	pop	r19
    3be2:	2f 91       	pop	r18
    3be4:	0f 90       	pop	r0
    3be6:	0b be       	out	0x3b, r0	; 59
    3be8:	0f 90       	pop	r0
    3bea:	0f be       	out	0x3f, r0	; 63
    3bec:	0f 90       	pop	r0
    3bee:	1f 90       	pop	r1
    3bf0:	18 95       	reti

00003bf2 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3bf2:	1f 92       	push	r1
    3bf4:	0f 92       	push	r0
    3bf6:	0f b6       	in	r0, 0x3f	; 63
    3bf8:	0f 92       	push	r0
    3bfa:	11 24       	eor	r1, r1
    3bfc:	0b b6       	in	r0, 0x3b	; 59
    3bfe:	0f 92       	push	r0
    3c00:	2f 93       	push	r18
    3c02:	3f 93       	push	r19
    3c04:	4f 93       	push	r20
    3c06:	5f 93       	push	r21
    3c08:	6f 93       	push	r22
    3c0a:	7f 93       	push	r23
    3c0c:	8f 93       	push	r24
    3c0e:	9f 93       	push	r25
    3c10:	af 93       	push	r26
    3c12:	bf 93       	push	r27
    3c14:	ef 93       	push	r30
    3c16:	ff 93       	push	r31
    3c18:	e0 91 36 23 	lds	r30, 0x2336
    3c1c:	f0 91 37 23 	lds	r31, 0x2337
    3c20:	30 97       	sbiw	r30, 0x00	; 0
    3c22:	29 f0       	breq	.+10     	; 0x3c2e <__vector_67+0x3c>
    3c24:	80 91 2c 24 	lds	r24, 0x242C
    3c28:	90 91 2d 24 	lds	r25, 0x242D
    3c2c:	19 95       	eicall
    3c2e:	ff 91       	pop	r31
    3c30:	ef 91       	pop	r30
    3c32:	bf 91       	pop	r27
    3c34:	af 91       	pop	r26
    3c36:	9f 91       	pop	r25
    3c38:	8f 91       	pop	r24
    3c3a:	7f 91       	pop	r23
    3c3c:	6f 91       	pop	r22
    3c3e:	5f 91       	pop	r21
    3c40:	4f 91       	pop	r20
    3c42:	3f 91       	pop	r19
    3c44:	2f 91       	pop	r18
    3c46:	0f 90       	pop	r0
    3c48:	0b be       	out	0x3b, r0	; 59
    3c4a:	0f 90       	pop	r0
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	0f 90       	pop	r0
    3c50:	1f 90       	pop	r1
    3c52:	18 95       	reti

00003c54 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3c54:	1f 92       	push	r1
    3c56:	0f 92       	push	r0
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	0f 92       	push	r0
    3c5c:	11 24       	eor	r1, r1
    3c5e:	0b b6       	in	r0, 0x3b	; 59
    3c60:	0f 92       	push	r0
    3c62:	2f 93       	push	r18
    3c64:	3f 93       	push	r19
    3c66:	4f 93       	push	r20
    3c68:	5f 93       	push	r21
    3c6a:	6f 93       	push	r22
    3c6c:	7f 93       	push	r23
    3c6e:	8f 93       	push	r24
    3c70:	9f 93       	push	r25
    3c72:	af 93       	push	r26
    3c74:	bf 93       	push	r27
    3c76:	ef 93       	push	r30
    3c78:	ff 93       	push	r31
    3c7a:	e0 91 38 23 	lds	r30, 0x2338
    3c7e:	f0 91 39 23 	lds	r31, 0x2339
    3c82:	30 97       	sbiw	r30, 0x00	; 0
    3c84:	29 f0       	breq	.+10     	; 0x3c90 <__vector_68+0x3c>
    3c86:	80 91 2e 24 	lds	r24, 0x242E
    3c8a:	90 91 2f 24 	lds	r25, 0x242F
    3c8e:	19 95       	eicall
    3c90:	ff 91       	pop	r31
    3c92:	ef 91       	pop	r30
    3c94:	bf 91       	pop	r27
    3c96:	af 91       	pop	r26
    3c98:	9f 91       	pop	r25
    3c9a:	8f 91       	pop	r24
    3c9c:	7f 91       	pop	r23
    3c9e:	6f 91       	pop	r22
    3ca0:	5f 91       	pop	r21
    3ca2:	4f 91       	pop	r20
    3ca4:	3f 91       	pop	r19
    3ca6:	2f 91       	pop	r18
    3ca8:	0f 90       	pop	r0
    3caa:	0b be       	out	0x3b, r0	; 59
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	0f 90       	pop	r0
    3cb2:	1f 90       	pop	r1
    3cb4:	18 95       	reti

00003cb6 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3cb6:	1f 92       	push	r1
    3cb8:	0f 92       	push	r0
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	0f 92       	push	r0
    3cbe:	11 24       	eor	r1, r1
    3cc0:	0b b6       	in	r0, 0x3b	; 59
    3cc2:	0f 92       	push	r0
    3cc4:	2f 93       	push	r18
    3cc6:	3f 93       	push	r19
    3cc8:	4f 93       	push	r20
    3cca:	5f 93       	push	r21
    3ccc:	6f 93       	push	r22
    3cce:	7f 93       	push	r23
    3cd0:	8f 93       	push	r24
    3cd2:	9f 93       	push	r25
    3cd4:	af 93       	push	r26
    3cd6:	bf 93       	push	r27
    3cd8:	ef 93       	push	r30
    3cda:	ff 93       	push	r31
    3cdc:	e0 91 3a 23 	lds	r30, 0x233A
    3ce0:	f0 91 3b 23 	lds	r31, 0x233B
    3ce4:	30 97       	sbiw	r30, 0x00	; 0
    3ce6:	29 f0       	breq	.+10     	; 0x3cf2 <__vector_69+0x3c>
    3ce8:	80 91 30 24 	lds	r24, 0x2430
    3cec:	90 91 31 24 	lds	r25, 0x2431
    3cf0:	19 95       	eicall
    3cf2:	ff 91       	pop	r31
    3cf4:	ef 91       	pop	r30
    3cf6:	bf 91       	pop	r27
    3cf8:	af 91       	pop	r26
    3cfa:	9f 91       	pop	r25
    3cfc:	8f 91       	pop	r24
    3cfe:	7f 91       	pop	r23
    3d00:	6f 91       	pop	r22
    3d02:	5f 91       	pop	r21
    3d04:	4f 91       	pop	r20
    3d06:	3f 91       	pop	r19
    3d08:	2f 91       	pop	r18
    3d0a:	0f 90       	pop	r0
    3d0c:	0b be       	out	0x3b, r0	; 59
    3d0e:	0f 90       	pop	r0
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	0f 90       	pop	r0
    3d14:	1f 90       	pop	r1
    3d16:	18 95       	reti

00003d18 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3d18:	1f 92       	push	r1
    3d1a:	0f 92       	push	r0
    3d1c:	0f b6       	in	r0, 0x3f	; 63
    3d1e:	0f 92       	push	r0
    3d20:	11 24       	eor	r1, r1
    3d22:	0b b6       	in	r0, 0x3b	; 59
    3d24:	0f 92       	push	r0
    3d26:	2f 93       	push	r18
    3d28:	3f 93       	push	r19
    3d2a:	4f 93       	push	r20
    3d2c:	5f 93       	push	r21
    3d2e:	6f 93       	push	r22
    3d30:	7f 93       	push	r23
    3d32:	8f 93       	push	r24
    3d34:	9f 93       	push	r25
    3d36:	af 93       	push	r26
    3d38:	bf 93       	push	r27
    3d3a:	ef 93       	push	r30
    3d3c:	ff 93       	push	r31
    3d3e:	e0 91 3c 23 	lds	r30, 0x233C
    3d42:	f0 91 3d 23 	lds	r31, 0x233D
    3d46:	30 97       	sbiw	r30, 0x00	; 0
    3d48:	29 f0       	breq	.+10     	; 0x3d54 <__vector_70+0x3c>
    3d4a:	80 91 32 24 	lds	r24, 0x2432
    3d4e:	90 91 33 24 	lds	r25, 0x2433
    3d52:	19 95       	eicall
    3d54:	ff 91       	pop	r31
    3d56:	ef 91       	pop	r30
    3d58:	bf 91       	pop	r27
    3d5a:	af 91       	pop	r26
    3d5c:	9f 91       	pop	r25
    3d5e:	8f 91       	pop	r24
    3d60:	7f 91       	pop	r23
    3d62:	6f 91       	pop	r22
    3d64:	5f 91       	pop	r21
    3d66:	4f 91       	pop	r20
    3d68:	3f 91       	pop	r19
    3d6a:	2f 91       	pop	r18
    3d6c:	0f 90       	pop	r0
    3d6e:	0b be       	out	0x3b, r0	; 59
    3d70:	0f 90       	pop	r0
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	0f 90       	pop	r0
    3d76:	1f 90       	pop	r1
    3d78:	18 95       	reti

00003d7a <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3d7a:	1f 92       	push	r1
    3d7c:	0f 92       	push	r0
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	0f 92       	push	r0
    3d82:	11 24       	eor	r1, r1
    3d84:	0b b6       	in	r0, 0x3b	; 59
    3d86:	0f 92       	push	r0
    3d88:	2f 93       	push	r18
    3d8a:	3f 93       	push	r19
    3d8c:	4f 93       	push	r20
    3d8e:	5f 93       	push	r21
    3d90:	6f 93       	push	r22
    3d92:	7f 93       	push	r23
    3d94:	8f 93       	push	r24
    3d96:	9f 93       	push	r25
    3d98:	af 93       	push	r26
    3d9a:	bf 93       	push	r27
    3d9c:	ef 93       	push	r30
    3d9e:	ff 93       	push	r31
    3da0:	e0 91 3e 23 	lds	r30, 0x233E
    3da4:	f0 91 3f 23 	lds	r31, 0x233F
    3da8:	30 97       	sbiw	r30, 0x00	; 0
    3daa:	29 f0       	breq	.+10     	; 0x3db6 <__vector_71+0x3c>
    3dac:	80 91 34 24 	lds	r24, 0x2434
    3db0:	90 91 35 24 	lds	r25, 0x2435
    3db4:	19 95       	eicall
    3db6:	ff 91       	pop	r31
    3db8:	ef 91       	pop	r30
    3dba:	bf 91       	pop	r27
    3dbc:	af 91       	pop	r26
    3dbe:	9f 91       	pop	r25
    3dc0:	8f 91       	pop	r24
    3dc2:	7f 91       	pop	r23
    3dc4:	6f 91       	pop	r22
    3dc6:	5f 91       	pop	r21
    3dc8:	4f 91       	pop	r20
    3dca:	3f 91       	pop	r19
    3dcc:	2f 91       	pop	r18
    3dce:	0f 90       	pop	r0
    3dd0:	0b be       	out	0x3b, r0	; 59
    3dd2:	0f 90       	pop	r0
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	0f 90       	pop	r0
    3dd8:	1f 90       	pop	r1
    3dda:	18 95       	reti

00003ddc <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3ddc:	1f 92       	push	r1
    3dde:	0f 92       	push	r0
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	0f 92       	push	r0
    3de4:	11 24       	eor	r1, r1
    3de6:	0b b6       	in	r0, 0x3b	; 59
    3de8:	0f 92       	push	r0
    3dea:	2f 93       	push	r18
    3dec:	3f 93       	push	r19
    3dee:	4f 93       	push	r20
    3df0:	5f 93       	push	r21
    3df2:	6f 93       	push	r22
    3df4:	7f 93       	push	r23
    3df6:	8f 93       	push	r24
    3df8:	9f 93       	push	r25
    3dfa:	af 93       	push	r26
    3dfc:	bf 93       	push	r27
    3dfe:	ef 93       	push	r30
    3e00:	ff 93       	push	r31
    3e02:	e0 91 40 23 	lds	r30, 0x2340
    3e06:	f0 91 41 23 	lds	r31, 0x2341
    3e0a:	30 97       	sbiw	r30, 0x00	; 0
    3e0c:	29 f0       	breq	.+10     	; 0x3e18 <__vector_72+0x3c>
    3e0e:	80 91 36 24 	lds	r24, 0x2436
    3e12:	90 91 37 24 	lds	r25, 0x2437
    3e16:	19 95       	eicall
    3e18:	ff 91       	pop	r31
    3e1a:	ef 91       	pop	r30
    3e1c:	bf 91       	pop	r27
    3e1e:	af 91       	pop	r26
    3e20:	9f 91       	pop	r25
    3e22:	8f 91       	pop	r24
    3e24:	7f 91       	pop	r23
    3e26:	6f 91       	pop	r22
    3e28:	5f 91       	pop	r21
    3e2a:	4f 91       	pop	r20
    3e2c:	3f 91       	pop	r19
    3e2e:	2f 91       	pop	r18
    3e30:	0f 90       	pop	r0
    3e32:	0b be       	out	0x3b, r0	; 59
    3e34:	0f 90       	pop	r0
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	0f 90       	pop	r0
    3e3a:	1f 90       	pop	r1
    3e3c:	18 95       	reti

00003e3e <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3e3e:	1f 92       	push	r1
    3e40:	0f 92       	push	r0
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	0f 92       	push	r0
    3e46:	11 24       	eor	r1, r1
    3e48:	0b b6       	in	r0, 0x3b	; 59
    3e4a:	0f 92       	push	r0
    3e4c:	2f 93       	push	r18
    3e4e:	3f 93       	push	r19
    3e50:	4f 93       	push	r20
    3e52:	5f 93       	push	r21
    3e54:	6f 93       	push	r22
    3e56:	7f 93       	push	r23
    3e58:	8f 93       	push	r24
    3e5a:	9f 93       	push	r25
    3e5c:	af 93       	push	r26
    3e5e:	bf 93       	push	r27
    3e60:	ef 93       	push	r30
    3e62:	ff 93       	push	r31
    3e64:	e0 91 42 23 	lds	r30, 0x2342
    3e68:	f0 91 43 23 	lds	r31, 0x2343
    3e6c:	30 97       	sbiw	r30, 0x00	; 0
    3e6e:	29 f0       	breq	.+10     	; 0x3e7a <__vector_73+0x3c>
    3e70:	80 91 38 24 	lds	r24, 0x2438
    3e74:	90 91 39 24 	lds	r25, 0x2439
    3e78:	19 95       	eicall
    3e7a:	ff 91       	pop	r31
    3e7c:	ef 91       	pop	r30
    3e7e:	bf 91       	pop	r27
    3e80:	af 91       	pop	r26
    3e82:	9f 91       	pop	r25
    3e84:	8f 91       	pop	r24
    3e86:	7f 91       	pop	r23
    3e88:	6f 91       	pop	r22
    3e8a:	5f 91       	pop	r21
    3e8c:	4f 91       	pop	r20
    3e8e:	3f 91       	pop	r19
    3e90:	2f 91       	pop	r18
    3e92:	0f 90       	pop	r0
    3e94:	0b be       	out	0x3b, r0	; 59
    3e96:	0f 90       	pop	r0
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	0f 90       	pop	r0
    3e9c:	1f 90       	pop	r1
    3e9e:	18 95       	reti

00003ea0 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3ea0:	1f 92       	push	r1
    3ea2:	0f 92       	push	r0
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	0f 92       	push	r0
    3ea8:	11 24       	eor	r1, r1
    3eaa:	0b b6       	in	r0, 0x3b	; 59
    3eac:	0f 92       	push	r0
    3eae:	2f 93       	push	r18
    3eb0:	3f 93       	push	r19
    3eb2:	4f 93       	push	r20
    3eb4:	5f 93       	push	r21
    3eb6:	6f 93       	push	r22
    3eb8:	7f 93       	push	r23
    3eba:	8f 93       	push	r24
    3ebc:	9f 93       	push	r25
    3ebe:	af 93       	push	r26
    3ec0:	bf 93       	push	r27
    3ec2:	ef 93       	push	r30
    3ec4:	ff 93       	push	r31
    3ec6:	e0 91 44 23 	lds	r30, 0x2344
    3eca:	f0 91 45 23 	lds	r31, 0x2345
    3ece:	30 97       	sbiw	r30, 0x00	; 0
    3ed0:	29 f0       	breq	.+10     	; 0x3edc <__vector_74+0x3c>
    3ed2:	80 91 3a 24 	lds	r24, 0x243A
    3ed6:	90 91 3b 24 	lds	r25, 0x243B
    3eda:	19 95       	eicall
    3edc:	ff 91       	pop	r31
    3ede:	ef 91       	pop	r30
    3ee0:	bf 91       	pop	r27
    3ee2:	af 91       	pop	r26
    3ee4:	9f 91       	pop	r25
    3ee6:	8f 91       	pop	r24
    3ee8:	7f 91       	pop	r23
    3eea:	6f 91       	pop	r22
    3eec:	5f 91       	pop	r21
    3eee:	4f 91       	pop	r20
    3ef0:	3f 91       	pop	r19
    3ef2:	2f 91       	pop	r18
    3ef4:	0f 90       	pop	r0
    3ef6:	0b be       	out	0x3b, r0	; 59
    3ef8:	0f 90       	pop	r0
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	0f 90       	pop	r0
    3efe:	1f 90       	pop	r1
    3f00:	18 95       	reti

00003f02 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3f02:	1f 92       	push	r1
    3f04:	0f 92       	push	r0
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	0f 92       	push	r0
    3f0a:	11 24       	eor	r1, r1
    3f0c:	0b b6       	in	r0, 0x3b	; 59
    3f0e:	0f 92       	push	r0
    3f10:	2f 93       	push	r18
    3f12:	3f 93       	push	r19
    3f14:	4f 93       	push	r20
    3f16:	5f 93       	push	r21
    3f18:	6f 93       	push	r22
    3f1a:	7f 93       	push	r23
    3f1c:	8f 93       	push	r24
    3f1e:	9f 93       	push	r25
    3f20:	af 93       	push	r26
    3f22:	bf 93       	push	r27
    3f24:	ef 93       	push	r30
    3f26:	ff 93       	push	r31
    3f28:	e0 91 4a 23 	lds	r30, 0x234A
    3f2c:	f0 91 4b 23 	lds	r31, 0x234B
    3f30:	30 97       	sbiw	r30, 0x00	; 0
    3f32:	29 f0       	breq	.+10     	; 0x3f3e <__vector_77+0x3c>
    3f34:	80 91 40 24 	lds	r24, 0x2440
    3f38:	90 91 41 24 	lds	r25, 0x2441
    3f3c:	19 95       	eicall
    3f3e:	ff 91       	pop	r31
    3f40:	ef 91       	pop	r30
    3f42:	bf 91       	pop	r27
    3f44:	af 91       	pop	r26
    3f46:	9f 91       	pop	r25
    3f48:	8f 91       	pop	r24
    3f4a:	7f 91       	pop	r23
    3f4c:	6f 91       	pop	r22
    3f4e:	5f 91       	pop	r21
    3f50:	4f 91       	pop	r20
    3f52:	3f 91       	pop	r19
    3f54:	2f 91       	pop	r18
    3f56:	0f 90       	pop	r0
    3f58:	0b be       	out	0x3b, r0	; 59
    3f5a:	0f 90       	pop	r0
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	0f 90       	pop	r0
    3f60:	1f 90       	pop	r1
    3f62:	18 95       	reti

00003f64 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3f64:	1f 92       	push	r1
    3f66:	0f 92       	push	r0
    3f68:	0f b6       	in	r0, 0x3f	; 63
    3f6a:	0f 92       	push	r0
    3f6c:	11 24       	eor	r1, r1
    3f6e:	0b b6       	in	r0, 0x3b	; 59
    3f70:	0f 92       	push	r0
    3f72:	2f 93       	push	r18
    3f74:	3f 93       	push	r19
    3f76:	4f 93       	push	r20
    3f78:	5f 93       	push	r21
    3f7a:	6f 93       	push	r22
    3f7c:	7f 93       	push	r23
    3f7e:	8f 93       	push	r24
    3f80:	9f 93       	push	r25
    3f82:	af 93       	push	r26
    3f84:	bf 93       	push	r27
    3f86:	ef 93       	push	r30
    3f88:	ff 93       	push	r31
    3f8a:	e0 91 4c 23 	lds	r30, 0x234C
    3f8e:	f0 91 4d 23 	lds	r31, 0x234D
    3f92:	30 97       	sbiw	r30, 0x00	; 0
    3f94:	29 f0       	breq	.+10     	; 0x3fa0 <__vector_78+0x3c>
    3f96:	80 91 42 24 	lds	r24, 0x2442
    3f9a:	90 91 43 24 	lds	r25, 0x2443
    3f9e:	19 95       	eicall
    3fa0:	ff 91       	pop	r31
    3fa2:	ef 91       	pop	r30
    3fa4:	bf 91       	pop	r27
    3fa6:	af 91       	pop	r26
    3fa8:	9f 91       	pop	r25
    3faa:	8f 91       	pop	r24
    3fac:	7f 91       	pop	r23
    3fae:	6f 91       	pop	r22
    3fb0:	5f 91       	pop	r21
    3fb2:	4f 91       	pop	r20
    3fb4:	3f 91       	pop	r19
    3fb6:	2f 91       	pop	r18
    3fb8:	0f 90       	pop	r0
    3fba:	0b be       	out	0x3b, r0	; 59
    3fbc:	0f 90       	pop	r0
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	0f 90       	pop	r0
    3fc2:	1f 90       	pop	r1
    3fc4:	18 95       	reti

00003fc6 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3fc6:	1f 92       	push	r1
    3fc8:	0f 92       	push	r0
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	0f 92       	push	r0
    3fce:	11 24       	eor	r1, r1
    3fd0:	0b b6       	in	r0, 0x3b	; 59
    3fd2:	0f 92       	push	r0
    3fd4:	2f 93       	push	r18
    3fd6:	3f 93       	push	r19
    3fd8:	4f 93       	push	r20
    3fda:	5f 93       	push	r21
    3fdc:	6f 93       	push	r22
    3fde:	7f 93       	push	r23
    3fe0:	8f 93       	push	r24
    3fe2:	9f 93       	push	r25
    3fe4:	af 93       	push	r26
    3fe6:	bf 93       	push	r27
    3fe8:	ef 93       	push	r30
    3fea:	ff 93       	push	r31
    3fec:	e0 91 4e 23 	lds	r30, 0x234E
    3ff0:	f0 91 4f 23 	lds	r31, 0x234F
    3ff4:	30 97       	sbiw	r30, 0x00	; 0
    3ff6:	29 f0       	breq	.+10     	; 0x4002 <__stack+0x3>
    3ff8:	80 91 44 24 	lds	r24, 0x2444
    3ffc:	90 91 45 24 	lds	r25, 0x2445
    4000:	19 95       	eicall
    4002:	ff 91       	pop	r31
    4004:	ef 91       	pop	r30
    4006:	bf 91       	pop	r27
    4008:	af 91       	pop	r26
    400a:	9f 91       	pop	r25
    400c:	8f 91       	pop	r24
    400e:	7f 91       	pop	r23
    4010:	6f 91       	pop	r22
    4012:	5f 91       	pop	r21
    4014:	4f 91       	pop	r20
    4016:	3f 91       	pop	r19
    4018:	2f 91       	pop	r18
    401a:	0f 90       	pop	r0
    401c:	0b be       	out	0x3b, r0	; 59
    401e:	0f 90       	pop	r0
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	0f 90       	pop	r0
    4024:	1f 90       	pop	r1
    4026:	18 95       	reti

00004028 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    4028:	1f 92       	push	r1
    402a:	0f 92       	push	r0
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	0f 92       	push	r0
    4030:	11 24       	eor	r1, r1
    4032:	0b b6       	in	r0, 0x3b	; 59
    4034:	0f 92       	push	r0
    4036:	2f 93       	push	r18
    4038:	3f 93       	push	r19
    403a:	4f 93       	push	r20
    403c:	5f 93       	push	r21
    403e:	6f 93       	push	r22
    4040:	7f 93       	push	r23
    4042:	8f 93       	push	r24
    4044:	9f 93       	push	r25
    4046:	af 93       	push	r26
    4048:	bf 93       	push	r27
    404a:	ef 93       	push	r30
    404c:	ff 93       	push	r31
    404e:	e0 91 50 23 	lds	r30, 0x2350
    4052:	f0 91 51 23 	lds	r31, 0x2351
    4056:	30 97       	sbiw	r30, 0x00	; 0
    4058:	29 f0       	breq	.+10     	; 0x4064 <__vector_80+0x3c>
    405a:	80 91 46 24 	lds	r24, 0x2446
    405e:	90 91 47 24 	lds	r25, 0x2447
    4062:	19 95       	eicall
    4064:	ff 91       	pop	r31
    4066:	ef 91       	pop	r30
    4068:	bf 91       	pop	r27
    406a:	af 91       	pop	r26
    406c:	9f 91       	pop	r25
    406e:	8f 91       	pop	r24
    4070:	7f 91       	pop	r23
    4072:	6f 91       	pop	r22
    4074:	5f 91       	pop	r21
    4076:	4f 91       	pop	r20
    4078:	3f 91       	pop	r19
    407a:	2f 91       	pop	r18
    407c:	0f 90       	pop	r0
    407e:	0b be       	out	0x3b, r0	; 59
    4080:	0f 90       	pop	r0
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	0f 90       	pop	r0
    4086:	1f 90       	pop	r1
    4088:	18 95       	reti

0000408a <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    408a:	1f 92       	push	r1
    408c:	0f 92       	push	r0
    408e:	0f b6       	in	r0, 0x3f	; 63
    4090:	0f 92       	push	r0
    4092:	11 24       	eor	r1, r1
    4094:	0b b6       	in	r0, 0x3b	; 59
    4096:	0f 92       	push	r0
    4098:	2f 93       	push	r18
    409a:	3f 93       	push	r19
    409c:	4f 93       	push	r20
    409e:	5f 93       	push	r21
    40a0:	6f 93       	push	r22
    40a2:	7f 93       	push	r23
    40a4:	8f 93       	push	r24
    40a6:	9f 93       	push	r25
    40a8:	af 93       	push	r26
    40aa:	bf 93       	push	r27
    40ac:	ef 93       	push	r30
    40ae:	ff 93       	push	r31
    40b0:	e0 91 52 23 	lds	r30, 0x2352
    40b4:	f0 91 53 23 	lds	r31, 0x2353
    40b8:	30 97       	sbiw	r30, 0x00	; 0
    40ba:	29 f0       	breq	.+10     	; 0x40c6 <__vector_81+0x3c>
    40bc:	80 91 48 24 	lds	r24, 0x2448
    40c0:	90 91 49 24 	lds	r25, 0x2449
    40c4:	19 95       	eicall
    40c6:	ff 91       	pop	r31
    40c8:	ef 91       	pop	r30
    40ca:	bf 91       	pop	r27
    40cc:	af 91       	pop	r26
    40ce:	9f 91       	pop	r25
    40d0:	8f 91       	pop	r24
    40d2:	7f 91       	pop	r23
    40d4:	6f 91       	pop	r22
    40d6:	5f 91       	pop	r21
    40d8:	4f 91       	pop	r20
    40da:	3f 91       	pop	r19
    40dc:	2f 91       	pop	r18
    40de:	0f 90       	pop	r0
    40e0:	0b be       	out	0x3b, r0	; 59
    40e2:	0f 90       	pop	r0
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	0f 90       	pop	r0
    40e8:	1f 90       	pop	r1
    40ea:	18 95       	reti

000040ec <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    40ec:	1f 92       	push	r1
    40ee:	0f 92       	push	r0
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	0f 92       	push	r0
    40f4:	11 24       	eor	r1, r1
    40f6:	0b b6       	in	r0, 0x3b	; 59
    40f8:	0f 92       	push	r0
    40fa:	2f 93       	push	r18
    40fc:	3f 93       	push	r19
    40fe:	4f 93       	push	r20
    4100:	5f 93       	push	r21
    4102:	6f 93       	push	r22
    4104:	7f 93       	push	r23
    4106:	8f 93       	push	r24
    4108:	9f 93       	push	r25
    410a:	af 93       	push	r26
    410c:	bf 93       	push	r27
    410e:	ef 93       	push	r30
    4110:	ff 93       	push	r31
    4112:	e0 91 54 23 	lds	r30, 0x2354
    4116:	f0 91 55 23 	lds	r31, 0x2355
    411a:	30 97       	sbiw	r30, 0x00	; 0
    411c:	29 f0       	breq	.+10     	; 0x4128 <__vector_82+0x3c>
    411e:	80 91 4a 24 	lds	r24, 0x244A
    4122:	90 91 4b 24 	lds	r25, 0x244B
    4126:	19 95       	eicall
    4128:	ff 91       	pop	r31
    412a:	ef 91       	pop	r30
    412c:	bf 91       	pop	r27
    412e:	af 91       	pop	r26
    4130:	9f 91       	pop	r25
    4132:	8f 91       	pop	r24
    4134:	7f 91       	pop	r23
    4136:	6f 91       	pop	r22
    4138:	5f 91       	pop	r21
    413a:	4f 91       	pop	r20
    413c:	3f 91       	pop	r19
    413e:	2f 91       	pop	r18
    4140:	0f 90       	pop	r0
    4142:	0b be       	out	0x3b, r0	; 59
    4144:	0f 90       	pop	r0
    4146:	0f be       	out	0x3f, r0	; 63
    4148:	0f 90       	pop	r0
    414a:	1f 90       	pop	r1
    414c:	18 95       	reti

0000414e <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    414e:	1f 92       	push	r1
    4150:	0f 92       	push	r0
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	0f 92       	push	r0
    4156:	11 24       	eor	r1, r1
    4158:	0b b6       	in	r0, 0x3b	; 59
    415a:	0f 92       	push	r0
    415c:	2f 93       	push	r18
    415e:	3f 93       	push	r19
    4160:	4f 93       	push	r20
    4162:	5f 93       	push	r21
    4164:	6f 93       	push	r22
    4166:	7f 93       	push	r23
    4168:	8f 93       	push	r24
    416a:	9f 93       	push	r25
    416c:	af 93       	push	r26
    416e:	bf 93       	push	r27
    4170:	ef 93       	push	r30
    4172:	ff 93       	push	r31
    4174:	e0 91 56 23 	lds	r30, 0x2356
    4178:	f0 91 57 23 	lds	r31, 0x2357
    417c:	30 97       	sbiw	r30, 0x00	; 0
    417e:	29 f0       	breq	.+10     	; 0x418a <__vector_83+0x3c>
    4180:	80 91 4c 24 	lds	r24, 0x244C
    4184:	90 91 4d 24 	lds	r25, 0x244D
    4188:	19 95       	eicall
    418a:	ff 91       	pop	r31
    418c:	ef 91       	pop	r30
    418e:	bf 91       	pop	r27
    4190:	af 91       	pop	r26
    4192:	9f 91       	pop	r25
    4194:	8f 91       	pop	r24
    4196:	7f 91       	pop	r23
    4198:	6f 91       	pop	r22
    419a:	5f 91       	pop	r21
    419c:	4f 91       	pop	r20
    419e:	3f 91       	pop	r19
    41a0:	2f 91       	pop	r18
    41a2:	0f 90       	pop	r0
    41a4:	0b be       	out	0x3b, r0	; 59
    41a6:	0f 90       	pop	r0
    41a8:	0f be       	out	0x3f, r0	; 63
    41aa:	0f 90       	pop	r0
    41ac:	1f 90       	pop	r1
    41ae:	18 95       	reti

000041b0 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    41b0:	1f 92       	push	r1
    41b2:	0f 92       	push	r0
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	0f 92       	push	r0
    41b8:	11 24       	eor	r1, r1
    41ba:	0b b6       	in	r0, 0x3b	; 59
    41bc:	0f 92       	push	r0
    41be:	2f 93       	push	r18
    41c0:	3f 93       	push	r19
    41c2:	4f 93       	push	r20
    41c4:	5f 93       	push	r21
    41c6:	6f 93       	push	r22
    41c8:	7f 93       	push	r23
    41ca:	8f 93       	push	r24
    41cc:	9f 93       	push	r25
    41ce:	af 93       	push	r26
    41d0:	bf 93       	push	r27
    41d2:	ef 93       	push	r30
    41d4:	ff 93       	push	r31
    41d6:	e0 91 58 23 	lds	r30, 0x2358
    41da:	f0 91 59 23 	lds	r31, 0x2359
    41de:	30 97       	sbiw	r30, 0x00	; 0
    41e0:	29 f0       	breq	.+10     	; 0x41ec <__vector_84+0x3c>
    41e2:	80 91 4e 24 	lds	r24, 0x244E
    41e6:	90 91 4f 24 	lds	r25, 0x244F
    41ea:	19 95       	eicall
    41ec:	ff 91       	pop	r31
    41ee:	ef 91       	pop	r30
    41f0:	bf 91       	pop	r27
    41f2:	af 91       	pop	r26
    41f4:	9f 91       	pop	r25
    41f6:	8f 91       	pop	r24
    41f8:	7f 91       	pop	r23
    41fa:	6f 91       	pop	r22
    41fc:	5f 91       	pop	r21
    41fe:	4f 91       	pop	r20
    4200:	3f 91       	pop	r19
    4202:	2f 91       	pop	r18
    4204:	0f 90       	pop	r0
    4206:	0b be       	out	0x3b, r0	; 59
    4208:	0f 90       	pop	r0
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	0f 90       	pop	r0
    420e:	1f 90       	pop	r1
    4210:	18 95       	reti

00004212 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    4212:	1f 92       	push	r1
    4214:	0f 92       	push	r0
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	0f 92       	push	r0
    421a:	11 24       	eor	r1, r1
    421c:	0b b6       	in	r0, 0x3b	; 59
    421e:	0f 92       	push	r0
    4220:	2f 93       	push	r18
    4222:	3f 93       	push	r19
    4224:	4f 93       	push	r20
    4226:	5f 93       	push	r21
    4228:	6f 93       	push	r22
    422a:	7f 93       	push	r23
    422c:	8f 93       	push	r24
    422e:	9f 93       	push	r25
    4230:	af 93       	push	r26
    4232:	bf 93       	push	r27
    4234:	ef 93       	push	r30
    4236:	ff 93       	push	r31
    4238:	e0 91 5a 23 	lds	r30, 0x235A
    423c:	f0 91 5b 23 	lds	r31, 0x235B
    4240:	30 97       	sbiw	r30, 0x00	; 0
    4242:	29 f0       	breq	.+10     	; 0x424e <__vector_85+0x3c>
    4244:	80 91 50 24 	lds	r24, 0x2450
    4248:	90 91 51 24 	lds	r25, 0x2451
    424c:	19 95       	eicall
    424e:	ff 91       	pop	r31
    4250:	ef 91       	pop	r30
    4252:	bf 91       	pop	r27
    4254:	af 91       	pop	r26
    4256:	9f 91       	pop	r25
    4258:	8f 91       	pop	r24
    425a:	7f 91       	pop	r23
    425c:	6f 91       	pop	r22
    425e:	5f 91       	pop	r21
    4260:	4f 91       	pop	r20
    4262:	3f 91       	pop	r19
    4264:	2f 91       	pop	r18
    4266:	0f 90       	pop	r0
    4268:	0b be       	out	0x3b, r0	; 59
    426a:	0f 90       	pop	r0
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	0f 90       	pop	r0
    4270:	1f 90       	pop	r1
    4272:	18 95       	reti

00004274 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    4274:	1f 92       	push	r1
    4276:	0f 92       	push	r0
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	0f 92       	push	r0
    427c:	11 24       	eor	r1, r1
    427e:	0b b6       	in	r0, 0x3b	; 59
    4280:	0f 92       	push	r0
    4282:	2f 93       	push	r18
    4284:	3f 93       	push	r19
    4286:	4f 93       	push	r20
    4288:	5f 93       	push	r21
    428a:	6f 93       	push	r22
    428c:	7f 93       	push	r23
    428e:	8f 93       	push	r24
    4290:	9f 93       	push	r25
    4292:	af 93       	push	r26
    4294:	bf 93       	push	r27
    4296:	ef 93       	push	r30
    4298:	ff 93       	push	r31
    429a:	e0 91 5c 23 	lds	r30, 0x235C
    429e:	f0 91 5d 23 	lds	r31, 0x235D
    42a2:	30 97       	sbiw	r30, 0x00	; 0
    42a4:	29 f0       	breq	.+10     	; 0x42b0 <__vector_86+0x3c>
    42a6:	80 91 52 24 	lds	r24, 0x2452
    42aa:	90 91 53 24 	lds	r25, 0x2453
    42ae:	19 95       	eicall
    42b0:	ff 91       	pop	r31
    42b2:	ef 91       	pop	r30
    42b4:	bf 91       	pop	r27
    42b6:	af 91       	pop	r26
    42b8:	9f 91       	pop	r25
    42ba:	8f 91       	pop	r24
    42bc:	7f 91       	pop	r23
    42be:	6f 91       	pop	r22
    42c0:	5f 91       	pop	r21
    42c2:	4f 91       	pop	r20
    42c4:	3f 91       	pop	r19
    42c6:	2f 91       	pop	r18
    42c8:	0f 90       	pop	r0
    42ca:	0b be       	out	0x3b, r0	; 59
    42cc:	0f 90       	pop	r0
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	0f 90       	pop	r0
    42d2:	1f 90       	pop	r1
    42d4:	18 95       	reti

000042d6 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    42d6:	1f 92       	push	r1
    42d8:	0f 92       	push	r0
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	0f 92       	push	r0
    42de:	11 24       	eor	r1, r1
    42e0:	0b b6       	in	r0, 0x3b	; 59
    42e2:	0f 92       	push	r0
    42e4:	2f 93       	push	r18
    42e6:	3f 93       	push	r19
    42e8:	4f 93       	push	r20
    42ea:	5f 93       	push	r21
    42ec:	6f 93       	push	r22
    42ee:	7f 93       	push	r23
    42f0:	8f 93       	push	r24
    42f2:	9f 93       	push	r25
    42f4:	af 93       	push	r26
    42f6:	bf 93       	push	r27
    42f8:	ef 93       	push	r30
    42fa:	ff 93       	push	r31
    42fc:	e0 91 5e 23 	lds	r30, 0x235E
    4300:	f0 91 5f 23 	lds	r31, 0x235F
    4304:	30 97       	sbiw	r30, 0x00	; 0
    4306:	29 f0       	breq	.+10     	; 0x4312 <__vector_87+0x3c>
    4308:	80 91 54 24 	lds	r24, 0x2454
    430c:	90 91 55 24 	lds	r25, 0x2455
    4310:	19 95       	eicall
    4312:	ff 91       	pop	r31
    4314:	ef 91       	pop	r30
    4316:	bf 91       	pop	r27
    4318:	af 91       	pop	r26
    431a:	9f 91       	pop	r25
    431c:	8f 91       	pop	r24
    431e:	7f 91       	pop	r23
    4320:	6f 91       	pop	r22
    4322:	5f 91       	pop	r21
    4324:	4f 91       	pop	r20
    4326:	3f 91       	pop	r19
    4328:	2f 91       	pop	r18
    432a:	0f 90       	pop	r0
    432c:	0b be       	out	0x3b, r0	; 59
    432e:	0f 90       	pop	r0
    4330:	0f be       	out	0x3f, r0	; 63
    4332:	0f 90       	pop	r0
    4334:	1f 90       	pop	r1
    4336:	18 95       	reti

00004338 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4338:	1f 92       	push	r1
    433a:	0f 92       	push	r0
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	0f 92       	push	r0
    4340:	11 24       	eor	r1, r1
    4342:	0b b6       	in	r0, 0x3b	; 59
    4344:	0f 92       	push	r0
    4346:	2f 93       	push	r18
    4348:	3f 93       	push	r19
    434a:	4f 93       	push	r20
    434c:	5f 93       	push	r21
    434e:	6f 93       	push	r22
    4350:	7f 93       	push	r23
    4352:	8f 93       	push	r24
    4354:	9f 93       	push	r25
    4356:	af 93       	push	r26
    4358:	bf 93       	push	r27
    435a:	ef 93       	push	r30
    435c:	ff 93       	push	r31
    435e:	e0 91 60 23 	lds	r30, 0x2360
    4362:	f0 91 61 23 	lds	r31, 0x2361
    4366:	30 97       	sbiw	r30, 0x00	; 0
    4368:	29 f0       	breq	.+10     	; 0x4374 <__vector_88+0x3c>
    436a:	80 91 56 24 	lds	r24, 0x2456
    436e:	90 91 57 24 	lds	r25, 0x2457
    4372:	19 95       	eicall
    4374:	ff 91       	pop	r31
    4376:	ef 91       	pop	r30
    4378:	bf 91       	pop	r27
    437a:	af 91       	pop	r26
    437c:	9f 91       	pop	r25
    437e:	8f 91       	pop	r24
    4380:	7f 91       	pop	r23
    4382:	6f 91       	pop	r22
    4384:	5f 91       	pop	r21
    4386:	4f 91       	pop	r20
    4388:	3f 91       	pop	r19
    438a:	2f 91       	pop	r18
    438c:	0f 90       	pop	r0
    438e:	0b be       	out	0x3b, r0	; 59
    4390:	0f 90       	pop	r0
    4392:	0f be       	out	0x3f, r0	; 63
    4394:	0f 90       	pop	r0
    4396:	1f 90       	pop	r1
    4398:	18 95       	reti

0000439a <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    439a:	1f 92       	push	r1
    439c:	0f 92       	push	r0
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	0f 92       	push	r0
    43a2:	11 24       	eor	r1, r1
    43a4:	0b b6       	in	r0, 0x3b	; 59
    43a6:	0f 92       	push	r0
    43a8:	2f 93       	push	r18
    43aa:	3f 93       	push	r19
    43ac:	4f 93       	push	r20
    43ae:	5f 93       	push	r21
    43b0:	6f 93       	push	r22
    43b2:	7f 93       	push	r23
    43b4:	8f 93       	push	r24
    43b6:	9f 93       	push	r25
    43b8:	af 93       	push	r26
    43ba:	bf 93       	push	r27
    43bc:	ef 93       	push	r30
    43be:	ff 93       	push	r31
    43c0:	e0 91 62 23 	lds	r30, 0x2362
    43c4:	f0 91 63 23 	lds	r31, 0x2363
    43c8:	30 97       	sbiw	r30, 0x00	; 0
    43ca:	29 f0       	breq	.+10     	; 0x43d6 <__vector_89+0x3c>
    43cc:	80 91 58 24 	lds	r24, 0x2458
    43d0:	90 91 59 24 	lds	r25, 0x2459
    43d4:	19 95       	eicall
    43d6:	ff 91       	pop	r31
    43d8:	ef 91       	pop	r30
    43da:	bf 91       	pop	r27
    43dc:	af 91       	pop	r26
    43de:	9f 91       	pop	r25
    43e0:	8f 91       	pop	r24
    43e2:	7f 91       	pop	r23
    43e4:	6f 91       	pop	r22
    43e6:	5f 91       	pop	r21
    43e8:	4f 91       	pop	r20
    43ea:	3f 91       	pop	r19
    43ec:	2f 91       	pop	r18
    43ee:	0f 90       	pop	r0
    43f0:	0b be       	out	0x3b, r0	; 59
    43f2:	0f 90       	pop	r0
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	0f 90       	pop	r0
    43f8:	1f 90       	pop	r1
    43fa:	18 95       	reti

000043fc <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    43fc:	1f 92       	push	r1
    43fe:	0f 92       	push	r0
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	0f 92       	push	r0
    4404:	11 24       	eor	r1, r1
    4406:	0b b6       	in	r0, 0x3b	; 59
    4408:	0f 92       	push	r0
    440a:	2f 93       	push	r18
    440c:	3f 93       	push	r19
    440e:	4f 93       	push	r20
    4410:	5f 93       	push	r21
    4412:	6f 93       	push	r22
    4414:	7f 93       	push	r23
    4416:	8f 93       	push	r24
    4418:	9f 93       	push	r25
    441a:	af 93       	push	r26
    441c:	bf 93       	push	r27
    441e:	ef 93       	push	r30
    4420:	ff 93       	push	r31
    4422:	e0 91 64 23 	lds	r30, 0x2364
    4426:	f0 91 65 23 	lds	r31, 0x2365
    442a:	30 97       	sbiw	r30, 0x00	; 0
    442c:	29 f0       	breq	.+10     	; 0x4438 <__vector_90+0x3c>
    442e:	80 91 5a 24 	lds	r24, 0x245A
    4432:	90 91 5b 24 	lds	r25, 0x245B
    4436:	19 95       	eicall
    4438:	ff 91       	pop	r31
    443a:	ef 91       	pop	r30
    443c:	bf 91       	pop	r27
    443e:	af 91       	pop	r26
    4440:	9f 91       	pop	r25
    4442:	8f 91       	pop	r24
    4444:	7f 91       	pop	r23
    4446:	6f 91       	pop	r22
    4448:	5f 91       	pop	r21
    444a:	4f 91       	pop	r20
    444c:	3f 91       	pop	r19
    444e:	2f 91       	pop	r18
    4450:	0f 90       	pop	r0
    4452:	0b be       	out	0x3b, r0	; 59
    4454:	0f 90       	pop	r0
    4456:	0f be       	out	0x3f, r0	; 63
    4458:	0f 90       	pop	r0
    445a:	1f 90       	pop	r1
    445c:	18 95       	reti

0000445e <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    445e:	1f 92       	push	r1
    4460:	0f 92       	push	r0
    4462:	0f b6       	in	r0, 0x3f	; 63
    4464:	0f 92       	push	r0
    4466:	11 24       	eor	r1, r1
    4468:	0b b6       	in	r0, 0x3b	; 59
    446a:	0f 92       	push	r0
    446c:	2f 93       	push	r18
    446e:	3f 93       	push	r19
    4470:	4f 93       	push	r20
    4472:	5f 93       	push	r21
    4474:	6f 93       	push	r22
    4476:	7f 93       	push	r23
    4478:	8f 93       	push	r24
    447a:	9f 93       	push	r25
    447c:	af 93       	push	r26
    447e:	bf 93       	push	r27
    4480:	ef 93       	push	r30
    4482:	ff 93       	push	r31
    4484:	e0 91 66 23 	lds	r30, 0x2366
    4488:	f0 91 67 23 	lds	r31, 0x2367
    448c:	30 97       	sbiw	r30, 0x00	; 0
    448e:	29 f0       	breq	.+10     	; 0x449a <__vector_91+0x3c>
    4490:	80 91 5c 24 	lds	r24, 0x245C
    4494:	90 91 5d 24 	lds	r25, 0x245D
    4498:	19 95       	eicall
    449a:	ff 91       	pop	r31
    449c:	ef 91       	pop	r30
    449e:	bf 91       	pop	r27
    44a0:	af 91       	pop	r26
    44a2:	9f 91       	pop	r25
    44a4:	8f 91       	pop	r24
    44a6:	7f 91       	pop	r23
    44a8:	6f 91       	pop	r22
    44aa:	5f 91       	pop	r21
    44ac:	4f 91       	pop	r20
    44ae:	3f 91       	pop	r19
    44b0:	2f 91       	pop	r18
    44b2:	0f 90       	pop	r0
    44b4:	0b be       	out	0x3b, r0	; 59
    44b6:	0f 90       	pop	r0
    44b8:	0f be       	out	0x3f, r0	; 63
    44ba:	0f 90       	pop	r0
    44bc:	1f 90       	pop	r1
    44be:	18 95       	reti

000044c0 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    44c0:	1f 92       	push	r1
    44c2:	0f 92       	push	r0
    44c4:	0f b6       	in	r0, 0x3f	; 63
    44c6:	0f 92       	push	r0
    44c8:	11 24       	eor	r1, r1
    44ca:	0b b6       	in	r0, 0x3b	; 59
    44cc:	0f 92       	push	r0
    44ce:	2f 93       	push	r18
    44d0:	3f 93       	push	r19
    44d2:	4f 93       	push	r20
    44d4:	5f 93       	push	r21
    44d6:	6f 93       	push	r22
    44d8:	7f 93       	push	r23
    44da:	8f 93       	push	r24
    44dc:	9f 93       	push	r25
    44de:	af 93       	push	r26
    44e0:	bf 93       	push	r27
    44e2:	ef 93       	push	r30
    44e4:	ff 93       	push	r31
    44e6:	e0 91 68 23 	lds	r30, 0x2368
    44ea:	f0 91 69 23 	lds	r31, 0x2369
    44ee:	30 97       	sbiw	r30, 0x00	; 0
    44f0:	29 f0       	breq	.+10     	; 0x44fc <__vector_92+0x3c>
    44f2:	80 91 5e 24 	lds	r24, 0x245E
    44f6:	90 91 5f 24 	lds	r25, 0x245F
    44fa:	19 95       	eicall
    44fc:	ff 91       	pop	r31
    44fe:	ef 91       	pop	r30
    4500:	bf 91       	pop	r27
    4502:	af 91       	pop	r26
    4504:	9f 91       	pop	r25
    4506:	8f 91       	pop	r24
    4508:	7f 91       	pop	r23
    450a:	6f 91       	pop	r22
    450c:	5f 91       	pop	r21
    450e:	4f 91       	pop	r20
    4510:	3f 91       	pop	r19
    4512:	2f 91       	pop	r18
    4514:	0f 90       	pop	r0
    4516:	0b be       	out	0x3b, r0	; 59
    4518:	0f 90       	pop	r0
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	0f 90       	pop	r0
    451e:	1f 90       	pop	r1
    4520:	18 95       	reti

00004522 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    4522:	1f 92       	push	r1
    4524:	0f 92       	push	r0
    4526:	0f b6       	in	r0, 0x3f	; 63
    4528:	0f 92       	push	r0
    452a:	11 24       	eor	r1, r1
    452c:	0b b6       	in	r0, 0x3b	; 59
    452e:	0f 92       	push	r0
    4530:	2f 93       	push	r18
    4532:	3f 93       	push	r19
    4534:	4f 93       	push	r20
    4536:	5f 93       	push	r21
    4538:	6f 93       	push	r22
    453a:	7f 93       	push	r23
    453c:	8f 93       	push	r24
    453e:	9f 93       	push	r25
    4540:	af 93       	push	r26
    4542:	bf 93       	push	r27
    4544:	ef 93       	push	r30
    4546:	ff 93       	push	r31
    4548:	e0 91 6a 23 	lds	r30, 0x236A
    454c:	f0 91 6b 23 	lds	r31, 0x236B
    4550:	30 97       	sbiw	r30, 0x00	; 0
    4552:	29 f0       	breq	.+10     	; 0x455e <__vector_93+0x3c>
    4554:	80 91 60 24 	lds	r24, 0x2460
    4558:	90 91 61 24 	lds	r25, 0x2461
    455c:	19 95       	eicall
    455e:	ff 91       	pop	r31
    4560:	ef 91       	pop	r30
    4562:	bf 91       	pop	r27
    4564:	af 91       	pop	r26
    4566:	9f 91       	pop	r25
    4568:	8f 91       	pop	r24
    456a:	7f 91       	pop	r23
    456c:	6f 91       	pop	r22
    456e:	5f 91       	pop	r21
    4570:	4f 91       	pop	r20
    4572:	3f 91       	pop	r19
    4574:	2f 91       	pop	r18
    4576:	0f 90       	pop	r0
    4578:	0b be       	out	0x3b, r0	; 59
    457a:	0f 90       	pop	r0
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	0f 90       	pop	r0
    4580:	1f 90       	pop	r1
    4582:	18 95       	reti

00004584 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    4584:	1f 92       	push	r1
    4586:	0f 92       	push	r0
    4588:	0f b6       	in	r0, 0x3f	; 63
    458a:	0f 92       	push	r0
    458c:	11 24       	eor	r1, r1
    458e:	0b b6       	in	r0, 0x3b	; 59
    4590:	0f 92       	push	r0
    4592:	2f 93       	push	r18
    4594:	3f 93       	push	r19
    4596:	4f 93       	push	r20
    4598:	5f 93       	push	r21
    459a:	6f 93       	push	r22
    459c:	7f 93       	push	r23
    459e:	8f 93       	push	r24
    45a0:	9f 93       	push	r25
    45a2:	af 93       	push	r26
    45a4:	bf 93       	push	r27
    45a6:	ef 93       	push	r30
    45a8:	ff 93       	push	r31
    45aa:	e0 91 80 23 	lds	r30, 0x2380
    45ae:	f0 91 81 23 	lds	r31, 0x2381
    45b2:	30 97       	sbiw	r30, 0x00	; 0
    45b4:	29 f0       	breq	.+10     	; 0x45c0 <__vector_104+0x3c>
    45b6:	80 91 76 24 	lds	r24, 0x2476
    45ba:	90 91 77 24 	lds	r25, 0x2477
    45be:	19 95       	eicall
    45c0:	ff 91       	pop	r31
    45c2:	ef 91       	pop	r30
    45c4:	bf 91       	pop	r27
    45c6:	af 91       	pop	r26
    45c8:	9f 91       	pop	r25
    45ca:	8f 91       	pop	r24
    45cc:	7f 91       	pop	r23
    45ce:	6f 91       	pop	r22
    45d0:	5f 91       	pop	r21
    45d2:	4f 91       	pop	r20
    45d4:	3f 91       	pop	r19
    45d6:	2f 91       	pop	r18
    45d8:	0f 90       	pop	r0
    45da:	0b be       	out	0x3b, r0	; 59
    45dc:	0f 90       	pop	r0
    45de:	0f be       	out	0x3f, r0	; 63
    45e0:	0f 90       	pop	r0
    45e2:	1f 90       	pop	r1
    45e4:	18 95       	reti

000045e6 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    45e6:	1f 92       	push	r1
    45e8:	0f 92       	push	r0
    45ea:	0f b6       	in	r0, 0x3f	; 63
    45ec:	0f 92       	push	r0
    45ee:	11 24       	eor	r1, r1
    45f0:	0b b6       	in	r0, 0x3b	; 59
    45f2:	0f 92       	push	r0
    45f4:	2f 93       	push	r18
    45f6:	3f 93       	push	r19
    45f8:	4f 93       	push	r20
    45fa:	5f 93       	push	r21
    45fc:	6f 93       	push	r22
    45fe:	7f 93       	push	r23
    4600:	8f 93       	push	r24
    4602:	9f 93       	push	r25
    4604:	af 93       	push	r26
    4606:	bf 93       	push	r27
    4608:	ef 93       	push	r30
    460a:	ff 93       	push	r31
    460c:	e0 91 82 23 	lds	r30, 0x2382
    4610:	f0 91 83 23 	lds	r31, 0x2383
    4614:	30 97       	sbiw	r30, 0x00	; 0
    4616:	29 f0       	breq	.+10     	; 0x4622 <__vector_105+0x3c>
    4618:	80 91 78 24 	lds	r24, 0x2478
    461c:	90 91 79 24 	lds	r25, 0x2479
    4620:	19 95       	eicall
    4622:	ff 91       	pop	r31
    4624:	ef 91       	pop	r30
    4626:	bf 91       	pop	r27
    4628:	af 91       	pop	r26
    462a:	9f 91       	pop	r25
    462c:	8f 91       	pop	r24
    462e:	7f 91       	pop	r23
    4630:	6f 91       	pop	r22
    4632:	5f 91       	pop	r21
    4634:	4f 91       	pop	r20
    4636:	3f 91       	pop	r19
    4638:	2f 91       	pop	r18
    463a:	0f 90       	pop	r0
    463c:	0b be       	out	0x3b, r0	; 59
    463e:	0f 90       	pop	r0
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	0f 90       	pop	r0
    4644:	1f 90       	pop	r1
    4646:	18 95       	reti

00004648 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4648:	1f 92       	push	r1
    464a:	0f 92       	push	r0
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	0f 92       	push	r0
    4650:	11 24       	eor	r1, r1
    4652:	0b b6       	in	r0, 0x3b	; 59
    4654:	0f 92       	push	r0
    4656:	2f 93       	push	r18
    4658:	3f 93       	push	r19
    465a:	4f 93       	push	r20
    465c:	5f 93       	push	r21
    465e:	6f 93       	push	r22
    4660:	7f 93       	push	r23
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
    466e:	e0 91 88 23 	lds	r30, 0x2388
    4672:	f0 91 89 23 	lds	r31, 0x2389
    4676:	30 97       	sbiw	r30, 0x00	; 0
    4678:	29 f0       	breq	.+10     	; 0x4684 <__vector_108+0x3c>
    467a:	80 91 7e 24 	lds	r24, 0x247E
    467e:	90 91 7f 24 	lds	r25, 0x247F
    4682:	19 95       	eicall
    4684:	ff 91       	pop	r31
    4686:	ef 91       	pop	r30
    4688:	bf 91       	pop	r27
    468a:	af 91       	pop	r26
    468c:	9f 91       	pop	r25
    468e:	8f 91       	pop	r24
    4690:	7f 91       	pop	r23
    4692:	6f 91       	pop	r22
    4694:	5f 91       	pop	r21
    4696:	4f 91       	pop	r20
    4698:	3f 91       	pop	r19
    469a:	2f 91       	pop	r18
    469c:	0f 90       	pop	r0
    469e:	0b be       	out	0x3b, r0	; 59
    46a0:	0f 90       	pop	r0
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	0f 90       	pop	r0
    46a6:	1f 90       	pop	r1
    46a8:	18 95       	reti

000046aa <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    46aa:	1f 92       	push	r1
    46ac:	0f 92       	push	r0
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	0f 92       	push	r0
    46b2:	11 24       	eor	r1, r1
    46b4:	0b b6       	in	r0, 0x3b	; 59
    46b6:	0f 92       	push	r0
    46b8:	2f 93       	push	r18
    46ba:	3f 93       	push	r19
    46bc:	4f 93       	push	r20
    46be:	5f 93       	push	r21
    46c0:	6f 93       	push	r22
    46c2:	7f 93       	push	r23
    46c4:	8f 93       	push	r24
    46c6:	9f 93       	push	r25
    46c8:	af 93       	push	r26
    46ca:	bf 93       	push	r27
    46cc:	ef 93       	push	r30
    46ce:	ff 93       	push	r31
    46d0:	e0 91 8a 23 	lds	r30, 0x238A
    46d4:	f0 91 8b 23 	lds	r31, 0x238B
    46d8:	30 97       	sbiw	r30, 0x00	; 0
    46da:	29 f0       	breq	.+10     	; 0x46e6 <__vector_109+0x3c>
    46dc:	80 91 80 24 	lds	r24, 0x2480
    46e0:	90 91 81 24 	lds	r25, 0x2481
    46e4:	19 95       	eicall
    46e6:	ff 91       	pop	r31
    46e8:	ef 91       	pop	r30
    46ea:	bf 91       	pop	r27
    46ec:	af 91       	pop	r26
    46ee:	9f 91       	pop	r25
    46f0:	8f 91       	pop	r24
    46f2:	7f 91       	pop	r23
    46f4:	6f 91       	pop	r22
    46f6:	5f 91       	pop	r21
    46f8:	4f 91       	pop	r20
    46fa:	3f 91       	pop	r19
    46fc:	2f 91       	pop	r18
    46fe:	0f 90       	pop	r0
    4700:	0b be       	out	0x3b, r0	; 59
    4702:	0f 90       	pop	r0
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	0f 90       	pop	r0
    4708:	1f 90       	pop	r1
    470a:	18 95       	reti

0000470c <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    470c:	1f 92       	push	r1
    470e:	0f 92       	push	r0
    4710:	0f b6       	in	r0, 0x3f	; 63
    4712:	0f 92       	push	r0
    4714:	11 24       	eor	r1, r1
    4716:	0b b6       	in	r0, 0x3b	; 59
    4718:	0f 92       	push	r0
    471a:	2f 93       	push	r18
    471c:	3f 93       	push	r19
    471e:	4f 93       	push	r20
    4720:	5f 93       	push	r21
    4722:	6f 93       	push	r22
    4724:	7f 93       	push	r23
    4726:	8f 93       	push	r24
    4728:	9f 93       	push	r25
    472a:	af 93       	push	r26
    472c:	bf 93       	push	r27
    472e:	ef 93       	push	r30
    4730:	ff 93       	push	r31
    4732:	e0 91 8c 23 	lds	r30, 0x238C
    4736:	f0 91 8d 23 	lds	r31, 0x238D
    473a:	30 97       	sbiw	r30, 0x00	; 0
    473c:	29 f0       	breq	.+10     	; 0x4748 <__vector_110+0x3c>
    473e:	80 91 82 24 	lds	r24, 0x2482
    4742:	90 91 83 24 	lds	r25, 0x2483
    4746:	19 95       	eicall
    4748:	ff 91       	pop	r31
    474a:	ef 91       	pop	r30
    474c:	bf 91       	pop	r27
    474e:	af 91       	pop	r26
    4750:	9f 91       	pop	r25
    4752:	8f 91       	pop	r24
    4754:	7f 91       	pop	r23
    4756:	6f 91       	pop	r22
    4758:	5f 91       	pop	r21
    475a:	4f 91       	pop	r20
    475c:	3f 91       	pop	r19
    475e:	2f 91       	pop	r18
    4760:	0f 90       	pop	r0
    4762:	0b be       	out	0x3b, r0	; 59
    4764:	0f 90       	pop	r0
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	0f 90       	pop	r0
    476a:	1f 90       	pop	r1
    476c:	18 95       	reti

0000476e <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    476e:	1f 92       	push	r1
    4770:	0f 92       	push	r0
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	0f 92       	push	r0
    4776:	11 24       	eor	r1, r1
    4778:	0b b6       	in	r0, 0x3b	; 59
    477a:	0f 92       	push	r0
    477c:	2f 93       	push	r18
    477e:	3f 93       	push	r19
    4780:	4f 93       	push	r20
    4782:	5f 93       	push	r21
    4784:	6f 93       	push	r22
    4786:	7f 93       	push	r23
    4788:	8f 93       	push	r24
    478a:	9f 93       	push	r25
    478c:	af 93       	push	r26
    478e:	bf 93       	push	r27
    4790:	ef 93       	push	r30
    4792:	ff 93       	push	r31
    4794:	e0 91 8e 23 	lds	r30, 0x238E
    4798:	f0 91 8f 23 	lds	r31, 0x238F
    479c:	30 97       	sbiw	r30, 0x00	; 0
    479e:	29 f0       	breq	.+10     	; 0x47aa <__vector_111+0x3c>
    47a0:	80 91 84 24 	lds	r24, 0x2484
    47a4:	90 91 85 24 	lds	r25, 0x2485
    47a8:	19 95       	eicall
    47aa:	ff 91       	pop	r31
    47ac:	ef 91       	pop	r30
    47ae:	bf 91       	pop	r27
    47b0:	af 91       	pop	r26
    47b2:	9f 91       	pop	r25
    47b4:	8f 91       	pop	r24
    47b6:	7f 91       	pop	r23
    47b8:	6f 91       	pop	r22
    47ba:	5f 91       	pop	r21
    47bc:	4f 91       	pop	r20
    47be:	3f 91       	pop	r19
    47c0:	2f 91       	pop	r18
    47c2:	0f 90       	pop	r0
    47c4:	0b be       	out	0x3b, r0	; 59
    47c6:	0f 90       	pop	r0
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	0f 90       	pop	r0
    47cc:	1f 90       	pop	r1
    47ce:	18 95       	reti

000047d0 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    47d0:	1f 92       	push	r1
    47d2:	0f 92       	push	r0
    47d4:	0f b6       	in	r0, 0x3f	; 63
    47d6:	0f 92       	push	r0
    47d8:	11 24       	eor	r1, r1
    47da:	0b b6       	in	r0, 0x3b	; 59
    47dc:	0f 92       	push	r0
    47de:	2f 93       	push	r18
    47e0:	3f 93       	push	r19
    47e2:	4f 93       	push	r20
    47e4:	5f 93       	push	r21
    47e6:	6f 93       	push	r22
    47e8:	7f 93       	push	r23
    47ea:	8f 93       	push	r24
    47ec:	9f 93       	push	r25
    47ee:	af 93       	push	r26
    47f0:	bf 93       	push	r27
    47f2:	ef 93       	push	r30
    47f4:	ff 93       	push	r31
    47f6:	e0 91 90 23 	lds	r30, 0x2390
    47fa:	f0 91 91 23 	lds	r31, 0x2391
    47fe:	30 97       	sbiw	r30, 0x00	; 0
    4800:	29 f0       	breq	.+10     	; 0x480c <__vector_112+0x3c>
    4802:	80 91 86 24 	lds	r24, 0x2486
    4806:	90 91 87 24 	lds	r25, 0x2487
    480a:	19 95       	eicall
    480c:	ff 91       	pop	r31
    480e:	ef 91       	pop	r30
    4810:	bf 91       	pop	r27
    4812:	af 91       	pop	r26
    4814:	9f 91       	pop	r25
    4816:	8f 91       	pop	r24
    4818:	7f 91       	pop	r23
    481a:	6f 91       	pop	r22
    481c:	5f 91       	pop	r21
    481e:	4f 91       	pop	r20
    4820:	3f 91       	pop	r19
    4822:	2f 91       	pop	r18
    4824:	0f 90       	pop	r0
    4826:	0b be       	out	0x3b, r0	; 59
    4828:	0f 90       	pop	r0
    482a:	0f be       	out	0x3f, r0	; 63
    482c:	0f 90       	pop	r0
    482e:	1f 90       	pop	r1
    4830:	18 95       	reti

00004832 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    4832:	1f 92       	push	r1
    4834:	0f 92       	push	r0
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	0f 92       	push	r0
    483a:	11 24       	eor	r1, r1
    483c:	0b b6       	in	r0, 0x3b	; 59
    483e:	0f 92       	push	r0
    4840:	2f 93       	push	r18
    4842:	3f 93       	push	r19
    4844:	4f 93       	push	r20
    4846:	5f 93       	push	r21
    4848:	6f 93       	push	r22
    484a:	7f 93       	push	r23
    484c:	8f 93       	push	r24
    484e:	9f 93       	push	r25
    4850:	af 93       	push	r26
    4852:	bf 93       	push	r27
    4854:	ef 93       	push	r30
    4856:	ff 93       	push	r31
    4858:	e0 91 92 23 	lds	r30, 0x2392
    485c:	f0 91 93 23 	lds	r31, 0x2393
    4860:	30 97       	sbiw	r30, 0x00	; 0
    4862:	29 f0       	breq	.+10     	; 0x486e <__vector_113+0x3c>
    4864:	80 91 88 24 	lds	r24, 0x2488
    4868:	90 91 89 24 	lds	r25, 0x2489
    486c:	19 95       	eicall
    486e:	ff 91       	pop	r31
    4870:	ef 91       	pop	r30
    4872:	bf 91       	pop	r27
    4874:	af 91       	pop	r26
    4876:	9f 91       	pop	r25
    4878:	8f 91       	pop	r24
    487a:	7f 91       	pop	r23
    487c:	6f 91       	pop	r22
    487e:	5f 91       	pop	r21
    4880:	4f 91       	pop	r20
    4882:	3f 91       	pop	r19
    4884:	2f 91       	pop	r18
    4886:	0f 90       	pop	r0
    4888:	0b be       	out	0x3b, r0	; 59
    488a:	0f 90       	pop	r0
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	0f 90       	pop	r0
    4890:	1f 90       	pop	r1
    4892:	18 95       	reti

00004894 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4894:	1f 92       	push	r1
    4896:	0f 92       	push	r0
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	0f 92       	push	r0
    489c:	11 24       	eor	r1, r1
    489e:	0b b6       	in	r0, 0x3b	; 59
    48a0:	0f 92       	push	r0
    48a2:	2f 93       	push	r18
    48a4:	3f 93       	push	r19
    48a6:	4f 93       	push	r20
    48a8:	5f 93       	push	r21
    48aa:	6f 93       	push	r22
    48ac:	7f 93       	push	r23
    48ae:	8f 93       	push	r24
    48b0:	9f 93       	push	r25
    48b2:	af 93       	push	r26
    48b4:	bf 93       	push	r27
    48b6:	ef 93       	push	r30
    48b8:	ff 93       	push	r31
    48ba:	e0 91 9e 23 	lds	r30, 0x239E
    48be:	f0 91 9f 23 	lds	r31, 0x239F
    48c2:	30 97       	sbiw	r30, 0x00	; 0
    48c4:	29 f0       	breq	.+10     	; 0x48d0 <__vector_119+0x3c>
    48c6:	80 91 94 24 	lds	r24, 0x2494
    48ca:	90 91 95 24 	lds	r25, 0x2495
    48ce:	19 95       	eicall
    48d0:	ff 91       	pop	r31
    48d2:	ef 91       	pop	r30
    48d4:	bf 91       	pop	r27
    48d6:	af 91       	pop	r26
    48d8:	9f 91       	pop	r25
    48da:	8f 91       	pop	r24
    48dc:	7f 91       	pop	r23
    48de:	6f 91       	pop	r22
    48e0:	5f 91       	pop	r21
    48e2:	4f 91       	pop	r20
    48e4:	3f 91       	pop	r19
    48e6:	2f 91       	pop	r18
    48e8:	0f 90       	pop	r0
    48ea:	0b be       	out	0x3b, r0	; 59
    48ec:	0f 90       	pop	r0
    48ee:	0f be       	out	0x3f, r0	; 63
    48f0:	0f 90       	pop	r0
    48f2:	1f 90       	pop	r1
    48f4:	18 95       	reti

000048f6 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    48f6:	1f 92       	push	r1
    48f8:	0f 92       	push	r0
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	0f 92       	push	r0
    48fe:	11 24       	eor	r1, r1
    4900:	0b b6       	in	r0, 0x3b	; 59
    4902:	0f 92       	push	r0
    4904:	2f 93       	push	r18
    4906:	3f 93       	push	r19
    4908:	4f 93       	push	r20
    490a:	5f 93       	push	r21
    490c:	6f 93       	push	r22
    490e:	7f 93       	push	r23
    4910:	8f 93       	push	r24
    4912:	9f 93       	push	r25
    4914:	af 93       	push	r26
    4916:	bf 93       	push	r27
    4918:	ef 93       	push	r30
    491a:	ff 93       	push	r31
    491c:	e0 91 a0 23 	lds	r30, 0x23A0
    4920:	f0 91 a1 23 	lds	r31, 0x23A1
    4924:	30 97       	sbiw	r30, 0x00	; 0
    4926:	29 f0       	breq	.+10     	; 0x4932 <__vector_120+0x3c>
    4928:	80 91 96 24 	lds	r24, 0x2496
    492c:	90 91 97 24 	lds	r25, 0x2497
    4930:	19 95       	eicall
    4932:	ff 91       	pop	r31
    4934:	ef 91       	pop	r30
    4936:	bf 91       	pop	r27
    4938:	af 91       	pop	r26
    493a:	9f 91       	pop	r25
    493c:	8f 91       	pop	r24
    493e:	7f 91       	pop	r23
    4940:	6f 91       	pop	r22
    4942:	5f 91       	pop	r21
    4944:	4f 91       	pop	r20
    4946:	3f 91       	pop	r19
    4948:	2f 91       	pop	r18
    494a:	0f 90       	pop	r0
    494c:	0b be       	out	0x3b, r0	; 59
    494e:	0f 90       	pop	r0
    4950:	0f be       	out	0x3f, r0	; 63
    4952:	0f 90       	pop	r0
    4954:	1f 90       	pop	r1
    4956:	18 95       	reti

00004958 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4958:	1f 92       	push	r1
    495a:	0f 92       	push	r0
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	0f 92       	push	r0
    4960:	11 24       	eor	r1, r1
    4962:	0b b6       	in	r0, 0x3b	; 59
    4964:	0f 92       	push	r0
    4966:	2f 93       	push	r18
    4968:	3f 93       	push	r19
    496a:	4f 93       	push	r20
    496c:	5f 93       	push	r21
    496e:	6f 93       	push	r22
    4970:	7f 93       	push	r23
    4972:	8f 93       	push	r24
    4974:	9f 93       	push	r25
    4976:	af 93       	push	r26
    4978:	bf 93       	push	r27
    497a:	ef 93       	push	r30
    497c:	ff 93       	push	r31
    497e:	e0 91 a2 23 	lds	r30, 0x23A2
    4982:	f0 91 a3 23 	lds	r31, 0x23A3
    4986:	30 97       	sbiw	r30, 0x00	; 0
    4988:	29 f0       	breq	.+10     	; 0x4994 <__vector_121+0x3c>
    498a:	80 91 98 24 	lds	r24, 0x2498
    498e:	90 91 99 24 	lds	r25, 0x2499
    4992:	19 95       	eicall
    4994:	ff 91       	pop	r31
    4996:	ef 91       	pop	r30
    4998:	bf 91       	pop	r27
    499a:	af 91       	pop	r26
    499c:	9f 91       	pop	r25
    499e:	8f 91       	pop	r24
    49a0:	7f 91       	pop	r23
    49a2:	6f 91       	pop	r22
    49a4:	5f 91       	pop	r21
    49a6:	4f 91       	pop	r20
    49a8:	3f 91       	pop	r19
    49aa:	2f 91       	pop	r18
    49ac:	0f 90       	pop	r0
    49ae:	0b be       	out	0x3b, r0	; 59
    49b0:	0f 90       	pop	r0
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	0f 90       	pop	r0
    49b6:	1f 90       	pop	r1
    49b8:	18 95       	reti

000049ba <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    49ba:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    49be:	fd cf       	rjmp	.-6      	; 0x49ba <__cxa_pure_virtual>

000049c0 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    49c0:	85 e6       	ldi	r24, 0x65	; 101
    49c2:	95 e2       	ldi	r25, 0x25	; 37
    49c4:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZN4CSPIC1Ev>
CTimerC timer;
    49c8:	82 e6       	ldi	r24, 0x62	; 98
    49ca:	95 e2       	ldi	r25, 0x25	; 37
    49cc:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    49d0:	8f e5       	ldi	r24, 0x5F	; 95
    49d2:	95 e2       	ldi	r25, 0x25	; 37
    49d4:	0e 94 07 30 	call	0x600e	; 0x600e <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    49d8:	8c e5       	ldi	r24, 0x5C	; 92
    49da:	95 e2       	ldi	r25, 0x25	; 37
    49dc:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    49e0:	89 e5       	ldi	r24, 0x59	; 89
    49e2:	95 e2       	ldi	r25, 0x25	; 37
    49e4:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    49e8:	86 e5       	ldi	r24, 0x56	; 86
    49ea:	95 e2       	ldi	r25, 0x25	; 37
    49ec:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    49f0:	84 e5       	ldi	r24, 0x54	; 84
    49f2:	95 e2       	ldi	r25, 0x25	; 37
    49f4:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    49f8:	8c e4       	ldi	r24, 0x4C	; 76
    49fa:	95 e2       	ldi	r25, 0x25	; 37
    49fc:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    4a00:	8f e2       	ldi	r24, 0x2F	; 47
    4a02:	95 e2       	ldi	r25, 0x25	; 37
    4a04:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    4a08:	85 e2       	ldi	r24, 0x25	; 37
    4a0a:	95 e2       	ldi	r25, 0x25	; 37
    4a0c:	0e 94 99 2b 	call	0x5732	; 0x5732 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    4a10:	84 e2       	ldi	r24, 0x24	; 36
    4a12:	95 e2       	ldi	r25, 0x25	; 37
    4a14:	0e 94 a3 2c 	call	0x5946	; 0x5946 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    4a18:	84 ea       	ldi	r24, 0xA4	; 164
    4a1a:	94 e2       	ldi	r25, 0x24	; 36
    4a1c:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    4a20:	80 ea       	ldi	r24, 0xA0	; 160
    4a22:	94 e2       	ldi	r25, 0x24	; 36
    4a24:	0e 94 b6 2a 	call	0x556c	; 0x556c <_ZN8CDS18B20C1Ev>
    4a28:	08 95       	ret

00004a2a <_GLOBAL__sub_D_dacSPI>:
    4a2a:	80 ea       	ldi	r24, 0xA0	; 160
    4a2c:	94 e2       	ldi	r25, 0x24	; 36
    4a2e:	0e 94 b7 2a 	call	0x556e	; 0x556e <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    4a32:	84 ea       	ldi	r24, 0xA4	; 164
    4a34:	94 e2       	ldi	r25, 0x24	; 36
    4a36:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4a3a:	84 e2       	ldi	r24, 0x24	; 36
    4a3c:	95 e2       	ldi	r25, 0x25	; 37
    4a3e:	0e 94 a4 2c 	call	0x5948	; 0x5948 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    4a42:	85 e2       	ldi	r24, 0x25	; 37
    4a44:	95 e2       	ldi	r25, 0x25	; 37
    4a46:	0e 94 9a 2b 	call	0x5734	; 0x5734 <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    4a4a:	8f e2       	ldi	r24, 0x2F	; 47
    4a4c:	95 e2       	ldi	r25, 0x25	; 37
    4a4e:	0e 94 2e 28 	call	0x505c	; 0x505c <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    4a52:	8c e4       	ldi	r24, 0x4C	; 76
    4a54:	95 e2       	ldi	r25, 0x25	; 37
    4a56:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    4a5a:	84 e5       	ldi	r24, 0x54	; 84
    4a5c:	95 e2       	ldi	r25, 0x25	; 37
    4a5e:	0e 94 ae 2a 	call	0x555c	; 0x555c <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    4a62:	86 e5       	ldi	r24, 0x56	; 86
    4a64:	95 e2       	ldi	r25, 0x25	; 37
    4a66:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    4a6a:	89 e5       	ldi	r24, 0x59	; 89
    4a6c:	95 e2       	ldi	r25, 0x25	; 37
    4a6e:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    4a72:	8c e5       	ldi	r24, 0x5C	; 92
    4a74:	95 e2       	ldi	r25, 0x25	; 37
    4a76:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    4a7a:	8f e5       	ldi	r24, 0x5F	; 95
    4a7c:	95 e2       	ldi	r25, 0x25	; 37
    4a7e:	0e 94 13 30 	call	0x6026	; 0x6026 <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    4a82:	82 e6       	ldi	r24, 0x62	; 98
    4a84:	95 e2       	ldi	r25, 0x25	; 37
    4a86:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4a8a:	85 e6       	ldi	r24, 0x65	; 101
    4a8c:	95 e2       	ldi	r25, 0x25	; 37
    4a8e:	0e 94 c5 10 	call	0x218a	; 0x218a <_ZN4CSPID1Ev>
    4a92:	08 95       	ret

00004a94 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4a94:	cf 92       	push	r12
    4a96:	df 92       	push	r13
    4a98:	ef 92       	push	r14
    4a9a:	ff 92       	push	r15
    4a9c:	0f 93       	push	r16
    4a9e:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4aa0:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4aa2:	84 e6       	ldi	r24, 0x64	; 100
    4aa4:	80 93 80 01 	sts	0x0180, r24
	
	// Initialize modules
	laserBoard.InitializeIO();
    4aa8:	85 e2       	ldi	r24, 0x25	; 37
    4aaa:	95 e2       	ldi	r25, 0x25	; 37
    4aac:	0e 94 9b 2b 	call	0x5736	; 0x5736 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4ab0:	80 ea       	ldi	r24, 0xA0	; 160
    4ab2:	94 e2       	ldi	r25, 0x24	; 36
    4ab4:	0e 94 8a 2b 	call	0x5714	; 0x5714 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4ab8:	84 e2       	ldi	r24, 0x24	; 36
    4aba:	95 e2       	ldi	r25, 0x25	; 37
    4abc:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    4ac0:	46 e0       	ldi	r20, 0x06	; 6
    4ac2:	60 e0       	ldi	r22, 0x00	; 0
    4ac4:	82 e6       	ldi	r24, 0x62	; 98
    4ac6:	95 e2       	ldi	r25, 0x25	; 37
    4ac8:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    4acc:	68 ea       	ldi	r22, 0xA8	; 168
    4ace:	71 e6       	ldi	r23, 0x61	; 97
    4ad0:	82 e6       	ldi	r24, 0x62	; 98
    4ad2:	95 e2       	ldi	r25, 0x25	; 37
    4ad4:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    4ad8:	21 e0       	ldi	r18, 0x01	; 1
    4ada:	44 ea       	ldi	r20, 0xA4	; 164
    4adc:	54 e2       	ldi	r21, 0x24	; 36
    4ade:	6e ed       	ldi	r22, 0xDE	; 222
    4ae0:	7f e0       	ldi	r23, 0x0F	; 15
    4ae2:	82 e6       	ldi	r24, 0x62	; 98
    4ae4:	95 e2       	ldi	r25, 0x25	; 37
    4ae6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4aea:	47 e0       	ldi	r20, 0x07	; 7
    4aec:	60 e0       	ldi	r22, 0x00	; 0
    4aee:	8f e5       	ldi	r24, 0x5F	; 95
    4af0:	95 e2       	ldi	r25, 0x25	; 37
    4af2:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4af6:	62 e1       	ldi	r22, 0x12	; 18
    4af8:	7a e7       	ldi	r23, 0x7A	; 122
    4afa:	8f e5       	ldi	r24, 0x5F	; 95
    4afc:	95 e2       	ldi	r25, 0x25	; 37
    4afe:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4b02:	48 e0       	ldi	r20, 0x08	; 8
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	89 e5       	ldi	r24, 0x59	; 89
    4b08:	95 e2       	ldi	r25, 0x25	; 37
    4b0a:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4b0e:	6f ef       	ldi	r22, 0xFF	; 255
    4b10:	7f ef       	ldi	r23, 0xFF	; 255
    4b12:	89 e5       	ldi	r24, 0x59	; 89
    4b14:	95 e2       	ldi	r25, 0x25	; 37
    4b16:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4b1a:	6f ef       	ldi	r22, 0xFF	; 255
    4b1c:	7f ef       	ldi	r23, 0xFF	; 255
    4b1e:	89 e5       	ldi	r24, 0x59	; 89
    4b20:	95 e2       	ldi	r25, 0x25	; 37
    4b22:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    4b26:	45 e0       	ldi	r20, 0x05	; 5
    4b28:	63 e0       	ldi	r22, 0x03	; 3
    4b2a:	86 e5       	ldi	r24, 0x56	; 86
    4b2c:	95 e2       	ldi	r25, 0x25	; 37
    4b2e:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    4b32:	60 e0       	ldi	r22, 0x00	; 0
    4b34:	72 e0       	ldi	r23, 0x02	; 2
    4b36:	86 e5       	ldi	r24, 0x56	; 86
    4b38:	95 e2       	ldi	r25, 0x25	; 37
    4b3a:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    4b3e:	85 e2       	ldi	r24, 0x25	; 37
    4b40:	95 e2       	ldi	r25, 0x25	; 37
    4b42:	0e 94 30 2c 	call	0x5860	; 0x5860 <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    4b46:	85 e2       	ldi	r24, 0x25	; 37
    4b48:	95 e2       	ldi	r25, 0x25	; 37
    4b4a:	0e 94 38 2c 	call	0x5870	; 0x5870 <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    4b4e:	85 e2       	ldi	r24, 0x25	; 37
    4b50:	95 e2       	ldi	r25, 0x25	; 37
    4b52:	0e 94 3c 2c 	call	0x5878	; 0x5878 <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    4b56:	85 e2       	ldi	r24, 0x25	; 37
    4b58:	95 e2       	ldi	r25, 0x25	; 37
    4b5a:	0e 94 40 2c 	call	0x5880	; 0x5880 <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4b5e:	21 e0       	ldi	r18, 0x01	; 1
    4b60:	44 ea       	ldi	r20, 0xA4	; 164
    4b62:	54 e2       	ldi	r21, 0x24	; 36
    4b64:	60 e7       	ldi	r22, 0x70	; 112
    4b66:	76 e0       	ldi	r23, 0x06	; 6
    4b68:	86 e5       	ldi	r24, 0x56	; 86
    4b6a:	95 e2       	ldi	r25, 0x25	; 37
    4b6c:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4b70:	21 e0       	ldi	r18, 0x01	; 1
    4b72:	44 ea       	ldi	r20, 0xA4	; 164
    4b74:	54 e2       	ldi	r21, 0x24	; 36
    4b76:	63 e7       	ldi	r22, 0x73	; 115
    4b78:	76 e0       	ldi	r23, 0x06	; 6
    4b7a:	86 e5       	ldi	r24, 0x56	; 86
    4b7c:	95 e2       	ldi	r25, 0x25	; 37
    4b7e:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
//#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	71 e0       	ldi	r23, 0x01	; 1
    4b86:	86 e5       	ldi	r24, 0x56	; 86
    4b88:	95 e2       	ldi	r25, 0x25	; 37
    4b8a:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    4b8e:	60 e0       	ldi	r22, 0x00	; 0
    4b90:	72 e0       	ldi	r23, 0x02	; 2
    4b92:	86 e5       	ldi	r24, 0x56	; 86
    4b94:	95 e2       	ldi	r25, 0x25	; 37
    4b96:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    4b9a:	60 e0       	ldi	r22, 0x00	; 0
    4b9c:	73 e0       	ldi	r23, 0x03	; 3
    4b9e:	86 e5       	ldi	r24, 0x56	; 86
    4ba0:	95 e2       	ldi	r25, 0x25	; 37
    4ba2:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    4ba6:	2c e0       	ldi	r18, 0x0C	; 12
    4ba8:	44 ea       	ldi	r20, 0xA4	; 164
    4baa:	54 e2       	ldi	r21, 0x24	; 36
    4bac:	66 e7       	ldi	r22, 0x76	; 118
    4bae:	76 e0       	ldi	r23, 0x06	; 6
    4bb0:	86 e5       	ldi	r24, 0x56	; 86
    4bb2:	95 e2       	ldi	r25, 0x25	; 37
    4bb4:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    4bb8:	20 e3       	ldi	r18, 0x30	; 48
    4bba:	44 ea       	ldi	r20, 0xA4	; 164
    4bbc:	54 e2       	ldi	r21, 0x24	; 36
    4bbe:	67 e7       	ldi	r22, 0x77	; 119
    4bc0:	76 e0       	ldi	r23, 0x06	; 6
    4bc2:	86 e5       	ldi	r24, 0x56	; 86
    4bc4:	95 e2       	ldi	r25, 0x25	; 37
    4bc6:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    4bca:	20 ec       	ldi	r18, 0xC0	; 192
    4bcc:	44 ea       	ldi	r20, 0xA4	; 164
    4bce:	54 e2       	ldi	r21, 0x24	; 36
    4bd0:	68 e7       	ldi	r22, 0x78	; 120
    4bd2:	76 e0       	ldi	r23, 0x06	; 6
    4bd4:	86 e5       	ldi	r24, 0x56	; 86
    4bd6:	95 e2       	ldi	r25, 0x25	; 37
    4bd8:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
//#endif
	pwmtimer.Start(1024);
    4bdc:	60 e0       	ldi	r22, 0x00	; 0
    4bde:	74 e0       	ldi	r23, 0x04	; 4
    4be0:	86 e5       	ldi	r24, 0x56	; 86
    4be2:	95 e2       	ldi	r25, 0x25	; 37
    4be4:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4be8:	0f 2e       	mov	r0, r31
    4bea:	f3 e0       	ldi	r31, 0x03	; 3
    4bec:	ef 2e       	mov	r14, r31
    4bee:	f0 2d       	mov	r31, r0
    4bf0:	00 e0       	ldi	r16, 0x00	; 0
    4bf2:	23 e0       	ldi	r18, 0x03	; 3
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	61 e0       	ldi	r22, 0x01	; 1
    4bf8:	85 e6       	ldi	r24, 0x65	; 101
    4bfa:	95 e2       	ldi	r25, 0x25	; 37
    4bfc:	0e 94 c6 10 	call	0x218c	; 0x218c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4c00:	01 e0       	ldi	r16, 0x01	; 1
    4c02:	20 e0       	ldi	r18, 0x00	; 0
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	6d e0       	ldi	r22, 0x0D	; 13
    4c08:	84 e5       	ldi	r24, 0x54	; 84
    4c0a:	95 e2       	ldi	r25, 0x25	; 37
    4c0c:	0e 94 26 2a 	call	0x544c	; 0x544c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4c10:	0f 2e       	mov	r0, r31
    4c12:	f2 e1       	ldi	r31, 0x12	; 18
    4c14:	cf 2e       	mov	r12, r31
    4c16:	fa e7       	ldi	r31, 0x7A	; 122
    4c18:	df 2e       	mov	r13, r31
    4c1a:	f0 2d       	mov	r31, r0
    4c1c:	e1 2c       	mov	r14, r1
    4c1e:	ff 24       	eor	r15, r15
    4c20:	f3 94       	inc	r15
    4c22:	00 e0       	ldi	r16, 0x00	; 0
    4c24:	11 e0       	ldi	r17, 0x01	; 1
    4c26:	24 ea       	ldi	r18, 0xA4	; 164
    4c28:	34 e2       	ldi	r19, 0x24	; 36
    4c2a:	44 e5       	ldi	r20, 0x54	; 84
    4c2c:	55 e2       	ldi	r21, 0x25	; 37
    4c2e:	6f e5       	ldi	r22, 0x5F	; 95
    4c30:	75 e2       	ldi	r23, 0x25	; 37
    4c32:	8f e2       	ldi	r24, 0x2F	; 47
    4c34:	95 e2       	ldi	r25, 0x25	; 37
    4c36:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4c3a:	40 e0       	ldi	r20, 0x00	; 0
    4c3c:	51 e0       	ldi	r21, 0x01	; 1
    4c3e:	6f e2       	ldi	r22, 0x2F	; 47
    4c40:	75 e2       	ldi	r23, 0x25	; 37
    4c42:	8c e4       	ldi	r24, 0x4C	; 76
    4c44:	95 e2       	ldi	r25, 0x25	; 37
    4c46:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4c4a:	6f e2       	ldi	r22, 0x2F	; 47
    4c4c:	75 e2       	ldi	r23, 0x25	; 37
    4c4e:	84 ea       	ldi	r24, 0xA4	; 164
    4c50:	94 e2       	ldi	r25, 0x24	; 36
    4c52:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4c56:	85 e2       	ldi	r24, 0x25	; 37
    4c58:	95 e2       	ldi	r25, 0x25	; 37
    4c5a:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4c5e:	84 ea       	ldi	r24, 0xA4	; 164
    4c60:	94 e2       	ldi	r25, 0x24	; 36
    4c62:	80 93 aa 23 	sts	0x23AA, r24
    4c66:	90 93 ab 23 	sts	0x23AB, r25
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4c6a:	83 e8       	ldi	r24, 0x83	; 131
    4c6c:	90 e1       	ldi	r25, 0x10	; 16
    4c6e:	80 93 b4 22 	sts	0x22B4, r24
    4c72:	90 93 b5 22 	sts	0x22B5, r25
	
	sei();	/* Enable global interrupts */
    4c76:	78 94       	sei
}
    4c78:	1f 91       	pop	r17
    4c7a:	0f 91       	pop	r16
    4c7c:	ff 90       	pop	r15
    4c7e:	ef 90       	pop	r14
    4c80:	df 90       	pop	r13
    4c82:	cf 90       	pop	r12
    4c84:	08 95       	ret

00004c86 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	1f 92       	push	r1
    4c8c:	1f 92       	push	r1
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4c92:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <_Z16SystemInitializev>
    4c96:	2a ea       	ldi	r18, 0xAA	; 170
    4c98:	36 ee       	ldi	r19, 0xE6	; 230
    4c9a:	86 e9       	ldi	r24, 0x96	; 150
    4c9c:	91 e0       	ldi	r25, 0x01	; 1
    4c9e:	21 50       	subi	r18, 0x01	; 1
    4ca0:	30 40       	sbci	r19, 0x00	; 0
    4ca2:	80 40       	sbci	r24, 0x00	; 0
    4ca4:	90 40       	sbci	r25, 0x00	; 0
    4ca6:	d9 f7       	brne	.-10     	; 0x4c9e <main+0x18>
    4ca8:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4caa:	85 e2       	ldi	r24, 0x25	; 37
    4cac:	95 e2       	ldi	r25, 0x25	; 37
    4cae:	0e 94 44 2c 	call	0x5888	; 0x5888 <_ZN11CLaserBoard8Relay1OnEv>
    4cb2:	2f ef       	ldi	r18, 0xFF	; 255
    4cb4:	33 ec       	ldi	r19, 0xC3	; 195
    4cb6:	89 e0       	ldi	r24, 0x09	; 9
    4cb8:	21 50       	subi	r18, 0x01	; 1
    4cba:	30 40       	sbci	r19, 0x00	; 0
    4cbc:	80 40       	sbci	r24, 0x00	; 0
    4cbe:	e1 f7       	brne	.-8      	; 0x4cb8 <main+0x32>
    4cc0:	00 c0       	rjmp	.+0      	; 0x4cc2 <main+0x3c>
    4cc2:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4cc4:	19 82       	std	Y+1, r1	; 0x01
    4cc6:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4cc8:	42 e0       	ldi	r20, 0x02	; 2
    4cca:	50 e0       	ldi	r21, 0x00	; 0
    4ccc:	be 01       	movw	r22, r28
    4cce:	6f 5f       	subi	r22, 0xFF	; 255
    4cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd2:	85 e6       	ldi	r24, 0x65	; 101
    4cd4:	95 e2       	ldi	r25, 0x25	; 37
    4cd6:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4cda:	84 ea       	ldi	r24, 0xA4	; 164
    4cdc:	94 e2       	ldi	r25, 0x24	; 36
    4cde:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4ce2:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4ce4:	85 e2       	ldi	r24, 0x25	; 37
    4ce6:	95 e2       	ldi	r25, 0x25	; 37
    4ce8:	0e 94 9a 2c 	call	0x5934	; 0x5934 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4cec:	84 ea       	ldi	r24, 0xA4	; 164
    4cee:	94 e2       	ldi	r25, 0x24	; 36
    4cf0:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4cf4:	40 91 9c 24 	lds	r20, 0x249C
    4cf8:	50 91 9d 24 	lds	r21, 0x249D
    4cfc:	ca 01       	movw	r24, r20
    4cfe:	01 96       	adiw	r24, 0x01	; 1
    4d00:	80 93 9c 24 	sts	0x249C, r24
    4d04:	90 93 9d 24 	sts	0x249D, r25
    4d08:	9a 01       	movw	r18, r20
    4d0a:	a9 e8       	ldi	r26, 0x89	; 137
    4d0c:	b8 e8       	ldi	r27, 0x88	; 136
    4d0e:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
    4d12:	96 95       	lsr	r25
    4d14:	87 95       	ror	r24
    4d16:	96 95       	lsr	r25
    4d18:	87 95       	ror	r24
    4d1a:	96 95       	lsr	r25
    4d1c:	87 95       	ror	r24
    4d1e:	18 9f       	mul	r17, r24
    4d20:	90 01       	movw	r18, r0
    4d22:	19 9f       	mul	r17, r25
    4d24:	30 0d       	add	r19, r0
    4d26:	11 24       	eor	r1, r1
    4d28:	42 17       	cp	r20, r18
    4d2a:	53 07       	cpc	r21, r19
    4d2c:	41 f4       	brne	.+16     	; 0x4d3e <main+0xb8>
				temperature = D18B20.temp_18b20();
    4d2e:	80 ea       	ldi	r24, 0xA0	; 160
    4d30:	94 e2       	ldi	r25, 0x24	; 36
    4d32:	0e 94 3f 2b 	call	0x567e	; 0x567e <_ZN8CDS18B2010temp_18b20Ev>
    4d36:	80 93 9e 24 	sts	0x249E, r24
    4d3a:	90 93 9f 24 	sts	0x249F, r25
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4d3e:	80 91 9e 24 	lds	r24, 0x249E
    4d42:	90 91 9f 24 	lds	r25, 0x249F
    4d46:	8a 30       	cpi	r24, 0x0A	; 10
    4d48:	91 40       	sbci	r25, 0x01	; 1
    4d4a:	24 f0       	brlt	.+8      	; 0x4d54 <main+0xce>
				laserBoard.Relay2On();
    4d4c:	85 e2       	ldi	r24, 0x25	; 37
    4d4e:	95 e2       	ldi	r25, 0x25	; 37
    4d50:	0e 94 48 2c 	call	0x5890	; 0x5890 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4d54:	80 91 9e 24 	lds	r24, 0x249E
    4d58:	90 91 9f 24 	lds	r25, 0x249F
    4d5c:	8f 3f       	cpi	r24, 0xFF	; 255
    4d5e:	91 05       	cpc	r25, r1
    4d60:	0c f6       	brge	.-126    	; 0x4ce4 <main+0x5e>
				laserBoard.Relay2Off();			
    4d62:	85 e2       	ldi	r24, 0x25	; 37
    4d64:	95 e2       	ldi	r25, 0x25	; 37
    4d66:	0e 94 4c 2c 	call	0x5898	; 0x5898 <_ZN11CLaserBoard9Relay2OffEv>
    4d6a:	bc cf       	rjmp	.-136    	; 0x4ce4 <main+0x5e>

00004d6c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4d6c:	cf 93       	push	r28
    4d6e:	df 93       	push	r29
    4d70:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4d72:	ec 81       	ldd	r30, Y+4	; 0x04
    4d74:	fd 81       	ldd	r31, Y+5	; 0x05
    4d76:	8a ea       	ldi	r24, 0xAA	; 170
    4d78:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4d7a:	ec 81       	ldd	r30, Y+4	; 0x04
    4d7c:	fd 81       	ldd	r31, Y+5	; 0x05
    4d7e:	8c ec       	ldi	r24, 0xCC	; 204
    4d80:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4d82:	ec 81       	ldd	r30, Y+4	; 0x04
    4d84:	fd 81       	ldd	r31, Y+5	; 0x05
    4d86:	82 e0       	ldi	r24, 0x02	; 2
    4d88:	82 0f       	add	r24, r18
    4d8a:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4d8c:	ec 81       	ldd	r30, Y+4	; 0x04
    4d8e:	fd 81       	ldd	r31, Y+5	; 0x05
    4d90:	80 e8       	ldi	r24, 0x80	; 128
    4d92:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4d94:	ec 81       	ldd	r30, Y+4	; 0x04
    4d96:	fd 81       	ldd	r31, Y+5	; 0x05
    4d98:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4d9a:	85 e0       	ldi	r24, 0x05	; 5
    4d9c:	82 0f       	add	r24, r18
    4d9e:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	21 15       	cp	r18, r1
    4da4:	31 05       	cpc	r19, r1
    4da6:	81 f0       	breq	.+32     	; 0x4dc8 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4da8:	da 01       	movw	r26, r20
    4daa:	42 0f       	add	r20, r18
    4dac:	53 1f       	adc	r21, r19
    4dae:	65 e0       	ldi	r22, 0x05	; 5
    4db0:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4db2:	9d 91       	ld	r25, X+
    4db4:	ec 81       	ldd	r30, Y+4	; 0x04
    4db6:	fd 81       	ldd	r31, Y+5	; 0x05
    4db8:	e6 0f       	add	r30, r22
    4dba:	f7 1f       	adc	r31, r23
    4dbc:	90 83       	st	Z, r25
    4dbe:	6f 5f       	subi	r22, 0xFF	; 255
    4dc0:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4dc2:	a4 17       	cp	r26, r20
    4dc4:	b5 07       	cpc	r27, r21
    4dc6:	a9 f7       	brne	.-22     	; 0x4db2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	08 95       	ret

00004dce <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4dce:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4dd0:	a4 81       	ldd	r26, Z+4	; 0x04
    4dd2:	b5 81       	ldd	r27, Z+5	; 0x05
    4dd4:	8a ea       	ldi	r24, 0xAA	; 170
    4dd6:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4dd8:	a4 81       	ldd	r26, Z+4	; 0x04
    4dda:	b5 81       	ldd	r27, Z+5	; 0x05
    4ddc:	8c ec       	ldi	r24, 0xCC	; 204
    4dde:	11 96       	adiw	r26, 0x01	; 1
    4de0:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4de2:	a4 81       	ldd	r26, Z+4	; 0x04
    4de4:	b5 81       	ldd	r27, Z+5	; 0x05
    4de6:	83 e0       	ldi	r24, 0x03	; 3
    4de8:	12 96       	adiw	r26, 0x02	; 2
    4dea:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4dec:	a4 81       	ldd	r26, Z+4	; 0x04
    4dee:	b5 81       	ldd	r27, Z+5	; 0x05
    4df0:	81 e8       	ldi	r24, 0x81	; 129
    4df2:	13 96       	adiw	r26, 0x03	; 3
    4df4:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4df6:	a4 81       	ldd	r26, Z+4	; 0x04
    4df8:	b5 81       	ldd	r27, Z+5	; 0x05
    4dfa:	14 96       	adiw	r26, 0x04	; 4
    4dfc:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4dfe:	a4 81       	ldd	r26, Z+4	; 0x04
    4e00:	b5 81       	ldd	r27, Z+5	; 0x05
    4e02:	15 96       	adiw	r26, 0x05	; 5
    4e04:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4e06:	86 e0       	ldi	r24, 0x06	; 6
    4e08:	81 87       	std	Z+9, r24	; 0x09
    4e0a:	08 95       	ret

00004e0c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4e0c:	0f 93       	push	r16
    4e0e:	1f 93       	push	r17
    4e10:	cf 93       	push	r28
    4e12:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4e14:	dc 01       	movw	r26, r24
    4e16:	14 96       	adiw	r26, 0x04	; 4
    4e18:	ed 91       	ld	r30, X+
    4e1a:	fc 91       	ld	r31, X
    4e1c:	15 97       	sbiw	r26, 0x05	; 5
    4e1e:	aa ea       	ldi	r26, 0xAA	; 170
    4e20:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4e22:	ec 01       	movw	r28, r24
    4e24:	ec 81       	ldd	r30, Y+4	; 0x04
    4e26:	fd 81       	ldd	r31, Y+5	; 0x05
    4e28:	ac ec       	ldi	r26, 0xCC	; 204
    4e2a:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4e2c:	ec 81       	ldd	r30, Y+4	; 0x04
    4e2e:	fd 81       	ldd	r31, Y+5	; 0x05
    4e30:	a3 e0       	ldi	r26, 0x03	; 3
    4e32:	a2 0f       	add	r26, r18
    4e34:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4e36:	ec 81       	ldd	r30, Y+4	; 0x04
    4e38:	fd 81       	ldd	r31, Y+5	; 0x05
    4e3a:	a2 e8       	ldi	r26, 0x82	; 130
    4e3c:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4e3e:	ec 81       	ldd	r30, Y+4	; 0x04
    4e40:	fd 81       	ldd	r31, Y+5	; 0x05
    4e42:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4e44:	ec 81       	ldd	r30, Y+4	; 0x04
    4e46:	fd 81       	ldd	r31, Y+5	; 0x05
    4e48:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4e4a:	66 e0       	ldi	r22, 0x06	; 6
    4e4c:	62 0f       	add	r22, r18
    4e4e:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4e50:	36 95       	lsr	r19
    4e52:	27 95       	ror	r18
    4e54:	21 15       	cp	r18, r1
    4e56:	31 05       	cpc	r19, r1
    4e58:	e1 f0       	breq	.+56     	; 0x4e92 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4e5a:	e4 2f       	mov	r30, r20
    4e5c:	f5 2f       	mov	r31, r21
    4e5e:	2d 5f       	subi	r18, 0xFD	; 253
    4e60:	3f 4f       	sbci	r19, 0xFF	; 255
    4e62:	22 0f       	add	r18, r18
    4e64:	33 1f       	adc	r19, r19
    4e66:	46 e0       	ldi	r20, 0x06	; 6
    4e68:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4e6a:	ec 01       	movw	r28, r24
    4e6c:	ac 81       	ldd	r26, Y+4	; 0x04
    4e6e:	bd 81       	ldd	r27, Y+5	; 0x05
    4e70:	a4 0f       	add	r26, r20
    4e72:	b5 1f       	adc	r27, r21
    4e74:	61 81       	ldd	r22, Z+1	; 0x01
    4e76:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4e78:	ac 81       	ldd	r26, Y+4	; 0x04
    4e7a:	bd 81       	ldd	r27, Y+5	; 0x05
    4e7c:	a4 0f       	add	r26, r20
    4e7e:	b5 1f       	adc	r27, r21
    4e80:	60 81       	ld	r22, Z
    4e82:	32 96       	adiw	r30, 0x02	; 2
    4e84:	11 96       	adiw	r26, 0x01	; 1
    4e86:	6c 93       	st	X, r22
    4e88:	4e 5f       	subi	r20, 0xFE	; 254
    4e8a:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4e8c:	42 17       	cp	r20, r18
    4e8e:	53 07       	cpc	r21, r19
    4e90:	61 f7       	brne	.-40     	; 0x4e6a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	1f 91       	pop	r17
    4e98:	0f 91       	pop	r16
    4e9a:	08 95       	ret

00004e9c <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4e9c:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4e9e:	a4 81       	ldd	r26, Z+4	; 0x04
    4ea0:	b5 81       	ldd	r27, Z+5	; 0x05
    4ea2:	8a ea       	ldi	r24, 0xAA	; 170
    4ea4:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4ea6:	a4 81       	ldd	r26, Z+4	; 0x04
    4ea8:	b5 81       	ldd	r27, Z+5	; 0x05
    4eaa:	8c ec       	ldi	r24, 0xCC	; 204
    4eac:	11 96       	adiw	r26, 0x01	; 1
    4eae:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4eb0:	a4 81       	ldd	r26, Z+4	; 0x04
    4eb2:	b5 81       	ldd	r27, Z+5	; 0x05
    4eb4:	84 e0       	ldi	r24, 0x04	; 4
    4eb6:	12 96       	adiw	r26, 0x02	; 2
    4eb8:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4eba:	a4 81       	ldd	r26, Z+4	; 0x04
    4ebc:	b5 81       	ldd	r27, Z+5	; 0x05
    4ebe:	83 e8       	ldi	r24, 0x83	; 131
    4ec0:	13 96       	adiw	r26, 0x03	; 3
    4ec2:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4ec4:	a4 81       	ldd	r26, Z+4	; 0x04
    4ec6:	b5 81       	ldd	r27, Z+5	; 0x05
    4ec8:	14 96       	adiw	r26, 0x04	; 4
    4eca:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4ecc:	a4 81       	ldd	r26, Z+4	; 0x04
    4ece:	b5 81       	ldd	r27, Z+5	; 0x05
    4ed0:	15 96       	adiw	r26, 0x05	; 5
    4ed2:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4ed4:	a4 81       	ldd	r26, Z+4	; 0x04
    4ed6:	b5 81       	ldd	r27, Z+5	; 0x05
    4ed8:	16 96       	adiw	r26, 0x06	; 6
    4eda:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4edc:	87 e0       	ldi	r24, 0x07	; 7
    4ede:	81 87       	std	Z+9, r24	; 0x09
    4ee0:	08 95       	ret

00004ee2 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4ee2:	0f 93       	push	r16
    4ee4:	1f 93       	push	r17
    4ee6:	cf 93       	push	r28
    4ee8:	df 93       	push	r29
    4eea:	ec 01       	movw	r28, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4ef0:	6f 83       	std	Y+7, r22	; 0x07
    4ef2:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4ef4:	4a 87       	std	Y+10, r20	; 0x0a
    4ef6:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4ef8:	0e 94 c8 32 	call	0x6590	; 0x6590 <malloc>
    4efc:	8a 83       	std	Y+2, r24	; 0x02
    4efe:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4f00:	c8 01       	movw	r24, r16
    4f02:	0e 94 c8 32 	call	0x6590	; 0x6590 <malloc>
    4f06:	8c 83       	std	Y+4, r24	; 0x04
    4f08:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4f0a:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4f0c:	1e 82       	std	Y+6, r1	; 0x06
}
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	08 95       	ret

00004f18 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f20:	9b 81       	ldd	r25, Y+3	; 0x03
    4f22:	0e 94 5d 33 	call	0x66ba	; 0x66ba <free>
	free(tx_buffer);
    4f26:	8c 81       	ldd	r24, Y+4	; 0x04
    4f28:	9d 81       	ldd	r25, Y+5	; 0x05
    4f2a:	0e 94 5d 33 	call	0x66ba	; 0x66ba <free>
}
    4f2e:	df 91       	pop	r29
    4f30:	cf 91       	pop	r28
    4f32:	08 95       	ret

00004f34 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    4f34:	08 95       	ret

00004f36 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    4f36:	dc 01       	movw	r26, r24
    4f38:	5b 96       	adiw	r26, 0x1b	; 27
    4f3a:	8d 91       	ld	r24, X+
    4f3c:	9c 91       	ld	r25, X
    4f3e:	5c 97       	sbiw	r26, 0x1c	; 28
    4f40:	00 97       	sbiw	r24, 0x00	; 0
    4f42:	39 f0       	breq	.+14     	; 0x4f52 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    4f44:	dc 01       	movw	r26, r24
    4f46:	ed 91       	ld	r30, X+
    4f48:	fc 91       	ld	r31, X
    4f4a:	02 80       	ldd	r0, Z+2	; 0x02
    4f4c:	f3 81       	ldd	r31, Z+3	; 0x03
    4f4e:	e0 2d       	mov	r30, r0
    4f50:	19 95       	eicall
    4f52:	08 95       	ret

00004f54 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    4f54:	dc 01       	movw	r26, r24
    4f56:	5b 96       	adiw	r26, 0x1b	; 27
    4f58:	8d 91       	ld	r24, X+
    4f5a:	9c 91       	ld	r25, X
    4f5c:	5c 97       	sbiw	r26, 0x1c	; 28
    4f5e:	00 97       	sbiw	r24, 0x00	; 0
    4f60:	39 f0       	breq	.+14     	; 0x4f70 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    4f62:	dc 01       	movw	r26, r24
    4f64:	ed 91       	ld	r30, X+
    4f66:	fc 91       	ld	r31, X
    4f68:	04 80       	ldd	r0, Z+4	; 0x04
    4f6a:	f5 81       	ldd	r31, Z+5	; 0x05
    4f6c:	e0 2d       	mov	r30, r0
    4f6e:	19 95       	eicall
    4f70:	08 95       	ret

00004f72 <_ZN9CMBSenderC1Ev>:
    4f72:	28 ed       	ldi	r18, 0xD8	; 216
    4f74:	31 e2       	ldi	r19, 0x21	; 33
    4f76:	fc 01       	movw	r30, r24
    4f78:	20 83       	st	Z, r18
    4f7a:	31 83       	std	Z+1, r19	; 0x01
    4f7c:	08 95       	ret

00004f7e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    4f7e:	6f 92       	push	r6
    4f80:	7f 92       	push	r7
    4f82:	8f 92       	push	r8
    4f84:	9f 92       	push	r9
    4f86:	af 92       	push	r10
    4f88:	bf 92       	push	r11
    4f8a:	cf 92       	push	r12
    4f8c:	df 92       	push	r13
    4f8e:	ef 92       	push	r14
    4f90:	ff 92       	push	r15
    4f92:	0f 93       	push	r16
    4f94:	1f 93       	push	r17
    4f96:	cf 93       	push	r28
    4f98:	df 93       	push	r29
    4f9a:	ec 01       	movw	r28, r24
    4f9c:	4b 01       	movw	r8, r22
    4f9e:	5a 01       	movw	r10, r20
    4fa0:	39 01       	movw	r6, r18
    4fa2:	c8 01       	movw	r24, r16
    4fa4:	0f 83       	std	Y+7, r16	; 0x07
    4fa6:	18 87       	std	Y+8, r17	; 0x08
    4fa8:	ea 86       	std	Y+10, r14	; 0x0a
    4faa:	fb 86       	std	Y+11, r15	; 0x0b
    4fac:	0e 94 c8 32 	call	0x6590	; 0x6590 <malloc>
    4fb0:	8a 83       	std	Y+2, r24	; 0x02
    4fb2:	9b 83       	std	Y+3, r25	; 0x03
    4fb4:	c7 01       	movw	r24, r14
    4fb6:	0e 94 c8 32 	call	0x6590	; 0x6590 <malloc>
    4fba:	8c 83       	std	Y+4, r24	; 0x04
    4fbc:	9d 83       	std	Y+5, r25	; 0x05
    4fbe:	19 8e       	std	Y+25, r1	; 0x19
    4fc0:	19 86       	std	Y+9, r1	; 0x09
    4fc2:	19 8a       	std	Y+17, r1	; 0x11
    4fc4:	1e 82       	std	Y+6, r1	; 0x06
    4fc6:	1c 8a       	std	Y+20, r1	; 0x14
    4fc8:	1d 8a       	std	Y+21, r1	; 0x15
    4fca:	1e 8a       	std	Y+22, r1	; 0x16
    4fcc:	1f 8a       	std	Y+23, r1	; 0x17
    4fce:	87 e0       	ldi	r24, 0x07	; 7
    4fd0:	88 8b       	std	Y+16, r24	; 0x10
    4fd2:	82 e0       	ldi	r24, 0x02	; 2
    4fd4:	88 8f       	std	Y+24, r24	; 0x18
    4fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    4fd8:	ca 8a       	std	Y+18, r12	; 0x12
    4fda:	db 8a       	std	Y+19, r13	; 0x13
    4fdc:	ac 86       	std	Y+12, r10	; 0x0c
    4fde:	bd 86       	std	Y+13, r11	; 0x0d
    4fe0:	d5 01       	movw	r26, r10
    4fe2:	ed 91       	ld	r30, X+
    4fe4:	fc 91       	ld	r31, X
    4fe6:	04 84       	ldd	r0, Z+12	; 0x0c
    4fe8:	f5 85       	ldd	r31, Z+13	; 0x0d
    4fea:	e0 2d       	mov	r30, r0
    4fec:	43 ee       	ldi	r20, 0xE3	; 227
    4fee:	58 e2       	ldi	r21, 0x28	; 40
    4ff0:	be 01       	movw	r22, r28
    4ff2:	c5 01       	movw	r24, r10
    4ff4:	19 95       	eicall
    4ff6:	d5 01       	movw	r26, r10
    4ff8:	ed 91       	ld	r30, X+
    4ffa:	fc 91       	ld	r31, X
    4ffc:	06 84       	ldd	r0, Z+14	; 0x0e
    4ffe:	f7 85       	ldd	r31, Z+15	; 0x0f
    5000:	e0 2d       	mov	r30, r0
    5002:	4f e6       	ldi	r20, 0x6F	; 111
    5004:	59 e2       	ldi	r21, 0x29	; 41
    5006:	be 01       	movw	r22, r28
    5008:	c5 01       	movw	r24, r10
    500a:	19 95       	eicall
    500c:	61 14       	cp	r6, r1
    500e:	71 04       	cpc	r7, r1
    5010:	19 f0       	breq	.+6      	; 0x5018 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9a>
    5012:	6b 8e       	std	Y+27, r6	; 0x1b
    5014:	7c 8e       	std	Y+28, r7	; 0x1c
    5016:	02 c0       	rjmp	.+4      	; 0x501c <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    5018:	cb 8f       	std	Y+27, r28	; 0x1b
    501a:	dc 8f       	std	Y+28, r29	; 0x1c
    501c:	8e 86       	std	Y+14, r8	; 0x0e
    501e:	9f 86       	std	Y+15, r9	; 0x0f
    5020:	81 14       	cp	r8, r1
    5022:	91 04       	cpc	r9, r1
    5024:	61 f0       	breq	.+24     	; 0x503e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc0>
    5026:	d4 01       	movw	r26, r8
    5028:	ed 91       	ld	r30, X+
    502a:	fc 91       	ld	r31, X
    502c:	02 88       	ldd	r0, Z+18	; 0x12
    502e:	f3 89       	ldd	r31, Z+19	; 0x13
    5030:	e0 2d       	mov	r30, r0
    5032:	21 e0       	ldi	r18, 0x01	; 1
    5034:	ae 01       	movw	r20, r28
    5036:	6a e0       	ldi	r22, 0x0A	; 10
    5038:	79 e2       	ldi	r23, 0x29	; 41
    503a:	c4 01       	movw	r24, r8
    503c:	19 95       	eicall
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	1f 91       	pop	r17
    5044:	0f 91       	pop	r16
    5046:	ff 90       	pop	r15
    5048:	ef 90       	pop	r14
    504a:	df 90       	pop	r13
    504c:	cf 90       	pop	r12
    504e:	bf 90       	pop	r11
    5050:	af 90       	pop	r10
    5052:	9f 90       	pop	r9
    5054:	8f 90       	pop	r8
    5056:	7f 90       	pop	r7
    5058:	6f 90       	pop	r6
    505a:	08 95       	ret

0000505c <_ZN9CMBSenderD1Ev>:
    505c:	28 ed       	ldi	r18, 0xD8	; 216
    505e:	31 e2       	ldi	r19, 0x21	; 33
    5060:	fc 01       	movw	r30, r24
    5062:	20 83       	st	Z, r18
    5064:	31 83       	std	Z+1, r19	; 0x01
    5066:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <_ZN16CMBEventsHandlerD1Ev>
    506a:	08 95       	ret

0000506c <_ZN9CMBSender13OnReceiveByteEh>:
    506c:	cf 93       	push	r28
    506e:	df 93       	push	r29
    5070:	ec 01       	movw	r28, r24
    5072:	96 2f       	mov	r25, r22
    5074:	48 89       	ldd	r20, Y+16	; 0x10
    5076:	50 e0       	ldi	r21, 0x00	; 0
    5078:	4b 30       	cpi	r20, 0x0B	; 11
    507a:	51 05       	cpc	r21, r1
    507c:	08 f0       	brcs	.+2      	; 0x5080 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    507e:	a0 c0       	rjmp	.+320    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5080:	fa 01       	movw	r30, r20
    5082:	88 27       	eor	r24, r24
    5084:	e0 5c       	subi	r30, 0xC0	; 192
    5086:	fe 4f       	sbci	r31, 0xFE	; 254
    5088:	8f 4f       	sbci	r24, 0xFF	; 255
    508a:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__tablejump2__>
    508e:	9a 3a       	cpi	r25, 0xAA	; 170
    5090:	19 f4       	brne	.+6      	; 0x5098 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
    5092:	82 e0       	ldi	r24, 0x02	; 2
    5094:	88 8b       	std	Y+16, r24	; 0x10
    5096:	94 c0       	rjmp	.+296    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	88 8b       	std	Y+16, r24	; 0x10
    509c:	91 c0       	rjmp	.+290    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    509e:	9c 3c       	cpi	r25, 0xCC	; 204
    50a0:	19 f4       	brne	.+6      	; 0x50a8 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
    50a2:	83 e0       	ldi	r24, 0x03	; 3
    50a4:	88 8b       	std	Y+16, r24	; 0x10
    50a6:	8c c0       	rjmp	.+280    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	88 8b       	std	Y+16, r24	; 0x10
    50ac:	89 c0       	rjmp	.+274    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    50ae:	9e 83       	std	Y+6, r25	; 0x06
    50b0:	19 8a       	std	Y+17, r1	; 0x11
    50b2:	1e 8a       	std	Y+22, r1	; 0x16
    50b4:	1f 8a       	std	Y+23, r1	; 0x17
    50b6:	84 e0       	ldi	r24, 0x04	; 4
    50b8:	88 8b       	std	Y+16, r24	; 0x10
    50ba:	82 c0       	rjmp	.+260    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    50bc:	89 89       	ldd	r24, Y+17	; 0x11
    50be:	ea 81       	ldd	r30, Y+2	; 0x02
    50c0:	fb 81       	ldd	r31, Y+3	; 0x03
    50c2:	e8 0f       	add	r30, r24
    50c4:	f1 1d       	adc	r31, r1
    50c6:	90 83       	st	Z, r25
    50c8:	29 89       	ldd	r18, Y+17	; 0x11
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	4f 81       	ldd	r20, Y+7	; 0x07
    50ce:	58 85       	ldd	r21, Y+8	; 0x08
    50d0:	42 17       	cp	r20, r18
    50d2:	53 07       	cpc	r21, r19
    50d4:	18 f4       	brcc	.+6      	; 0x50dc <_ZN9CMBSender13OnReceiveByteEh+0x70>
    50d6:	89 e0       	ldi	r24, 0x09	; 9
    50d8:	88 8b       	std	Y+16, r24	; 0x10
    50da:	72 c0       	rjmp	.+228    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    50dc:	2e 89       	ldd	r18, Y+22	; 0x16
    50de:	3f 89       	ldd	r19, Y+23	; 0x17
    50e0:	29 27       	eor	r18, r25
    50e2:	92 2f       	mov	r25, r18
    50e4:	92 95       	swap	r25
    50e6:	92 27       	eor	r25, r18
    50e8:	09 2e       	mov	r0, r25
    50ea:	96 95       	lsr	r25
    50ec:	96 95       	lsr	r25
    50ee:	90 25       	eor	r25, r0
    50f0:	09 2e       	mov	r0, r25
    50f2:	96 95       	lsr	r25
    50f4:	90 25       	eor	r25, r0
    50f6:	97 70       	andi	r25, 0x07	; 7
    50f8:	02 2e       	mov	r0, r18
    50fa:	23 2f       	mov	r18, r19
    50fc:	96 95       	lsr	r25
    50fe:	07 94       	ror	r0
    5100:	97 95       	ror	r25
    5102:	30 2d       	mov	r19, r0
    5104:	29 27       	eor	r18, r25
    5106:	06 94       	lsr	r0
    5108:	97 95       	ror	r25
    510a:	30 25       	eor	r19, r0
    510c:	29 27       	eor	r18, r25
    510e:	2e 8b       	std	Y+22, r18	; 0x16
    5110:	3f 8b       	std	Y+23, r19	; 0x17
    5112:	89 89       	ldd	r24, Y+17	; 0x11
    5114:	8f 5f       	subi	r24, 0xFF	; 255
    5116:	89 8b       	std	Y+17, r24	; 0x11
    5118:	49 89       	ldd	r20, Y+17	; 0x11
    511a:	8e 81       	ldd	r24, Y+6	; 0x06
    511c:	48 13       	cpse	r20, r24
    511e:	50 c0       	rjmp	.+160    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5120:	88 e0       	ldi	r24, 0x08	; 8
    5122:	88 8b       	std	Y+16, r24	; 0x10
    5124:	e8 81       	ld	r30, Y
    5126:	f9 81       	ldd	r31, Y+1	; 0x01
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	6a 81       	ldd	r22, Y+2	; 0x02
    512c:	7b 81       	ldd	r23, Y+3	; 0x03
    512e:	01 90       	ld	r0, Z+
    5130:	f0 81       	ld	r31, Z
    5132:	e0 2d       	mov	r30, r0
    5134:	ce 01       	movw	r24, r28
    5136:	19 95       	eicall
    5138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    513a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	09 f4       	brne	.+2      	; 0x5142 <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    5140:	3f c0       	rjmp	.+126    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5142:	dc 01       	movw	r26, r24
    5144:	ed 91       	ld	r30, X+
    5146:	fc 91       	ld	r31, X
    5148:	4e 81       	ldd	r20, Y+6	; 0x06
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	6a 81       	ldd	r22, Y+2	; 0x02
    514e:	7b 81       	ldd	r23, Y+3	; 0x03
    5150:	01 90       	ld	r0, Z+
    5152:	f0 81       	ld	r31, Z
    5154:	e0 2d       	mov	r30, r0
    5156:	19 95       	eicall
    5158:	33 c0       	rjmp	.+102    	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    515a:	69 2f       	mov	r22, r25
    515c:	70 e0       	ldi	r23, 0x00	; 0
    515e:	6c 8b       	std	Y+20, r22	; 0x14
    5160:	7d 8b       	std	Y+21, r23	; 0x15
    5162:	86 e0       	ldi	r24, 0x06	; 6
    5164:	88 8b       	std	Y+16, r24	; 0x10
    5166:	2c c0       	rjmp	.+88     	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5168:	2c 89       	ldd	r18, Y+20	; 0x14
    516a:	3d 89       	ldd	r19, Y+21	; 0x15
    516c:	a9 01       	movw	r20, r18
    516e:	59 2b       	or	r21, r25
    5170:	4c 8b       	std	Y+20, r20	; 0x14
    5172:	5d 8b       	std	Y+21, r21	; 0x15
    5174:	2e 89       	ldd	r18, Y+22	; 0x16
    5176:	3f 89       	ldd	r19, Y+23	; 0x17
    5178:	42 17       	cp	r20, r18
    517a:	53 07       	cpc	r21, r19
    517c:	e9 f4       	brne	.+58     	; 0x51b8 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
    517e:	88 e0       	ldi	r24, 0x08	; 8
    5180:	88 8b       	std	Y+16, r24	; 0x10
    5182:	e8 81       	ld	r30, Y
    5184:	f9 81       	ldd	r31, Y+1	; 0x01
    5186:	4e 81       	ldd	r20, Y+6	; 0x06
    5188:	50 e0       	ldi	r21, 0x00	; 0
    518a:	6a 81       	ldd	r22, Y+2	; 0x02
    518c:	7b 81       	ldd	r23, Y+3	; 0x03
    518e:	01 90       	ld	r0, Z+
    5190:	f0 81       	ld	r31, Z
    5192:	e0 2d       	mov	r30, r0
    5194:	ce 01       	movw	r24, r28
    5196:	19 95       	eicall
    5198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    519a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    519c:	00 97       	sbiw	r24, 0x00	; 0
    519e:	81 f0       	breq	.+32     	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51a0:	dc 01       	movw	r26, r24
    51a2:	ed 91       	ld	r30, X+
    51a4:	fc 91       	ld	r31, X
    51a6:	4e 81       	ldd	r20, Y+6	; 0x06
    51a8:	50 e0       	ldi	r21, 0x00	; 0
    51aa:	6a 81       	ldd	r22, Y+2	; 0x02
    51ac:	7b 81       	ldd	r23, Y+3	; 0x03
    51ae:	01 90       	ld	r0, Z+
    51b0:	f0 81       	ld	r31, Z
    51b2:	e0 2d       	mov	r30, r0
    51b4:	19 95       	eicall
    51b6:	04 c0       	rjmp	.+8      	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51b8:	89 e0       	ldi	r24, 0x09	; 9
    51ba:	88 8b       	std	Y+16, r24	; 0x10
    51bc:	01 c0       	rjmp	.+2      	; 0x51c0 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51be:	1a 8e       	std	Y+26, r1	; 0x1a
    51c0:	df 91       	pop	r29
    51c2:	cf 91       	pop	r28
    51c4:	08 95       	ret

000051c6 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    51c6:	cf 93       	push	r28
    51c8:	df 93       	push	r29
    51ca:	ec 01       	movw	r28, r24
    51cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    51ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    51d0:	dc 01       	movw	r26, r24
    51d2:	ed 91       	ld	r30, X+
    51d4:	fc 91       	ld	r31, X
    51d6:	02 80       	ldd	r0, Z+2	; 0x02
    51d8:	f3 81       	ldd	r31, Z+3	; 0x03
    51da:	e0 2d       	mov	r30, r0
    51dc:	19 95       	eicall
    51de:	68 2f       	mov	r22, r24
    51e0:	ce 01       	movw	r24, r28
    51e2:	0e 94 36 28 	call	0x506c	; 0x506c <_ZN9CMBSender13OnReceiveByteEh>
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	08 95       	ret

000051ec <_ZN9CMBSender9OnTimeoutEv>:
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
    51f0:	ec 01       	movw	r28, r24
    51f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    51f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    51f6:	dc 01       	movw	r26, r24
    51f8:	ed 91       	ld	r30, X+
    51fa:	fc 91       	ld	r31, X
    51fc:	04 80       	ldd	r0, Z+4	; 0x04
    51fe:	f5 81       	ldd	r31, Z+5	; 0x05
    5200:	e0 2d       	mov	r30, r0
    5202:	19 95       	eicall
    5204:	88 89       	ldd	r24, Y+16	; 0x10
    5206:	88 30       	cpi	r24, 0x08	; 8
    5208:	11 f0       	breq	.+4      	; 0x520e <_ZN9CMBSender9OnTimeoutEv+0x22>
    520a:	8a e0       	ldi	r24, 0x0A	; 10
    520c:	88 8b       	std	Y+16, r24	; 0x10
    520e:	df 91       	pop	r29
    5210:	cf 91       	pop	r28
    5212:	08 95       	ret

00005214 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    5214:	0e 94 f6 28 	call	0x51ec	; 0x51ec <_ZN9CMBSender9OnTimeoutEv>
    5218:	08 95       	ret

0000521a <_ZN9CMBSender19StartMODBUSListenerEv>:
    521a:	cf 93       	push	r28
    521c:	df 93       	push	r29
    521e:	fc 01       	movw	r30, r24
    5220:	11 8a       	std	Z+17, r1	; 0x11
    5222:	16 82       	std	Z+6, r1	; 0x06
    5224:	14 8a       	std	Z+20, r1	; 0x14
    5226:	15 8a       	std	Z+21, r1	; 0x15
    5228:	16 8a       	std	Z+22, r1	; 0x16
    522a:	17 8a       	std	Z+23, r1	; 0x17
    522c:	10 8a       	std	Z+16, r1	; 0x10
    522e:	86 85       	ldd	r24, Z+14	; 0x0e
    5230:	97 85       	ldd	r25, Z+15	; 0x0f
    5232:	ec 01       	movw	r28, r24
    5234:	a8 81       	ld	r26, Y
    5236:	b9 81       	ldd	r27, Y+1	; 0x01
    5238:	62 89       	ldd	r22, Z+18	; 0x12
    523a:	73 89       	ldd	r23, Z+19	; 0x13
    523c:	12 96       	adiw	r26, 0x02	; 2
    523e:	ed 91       	ld	r30, X+
    5240:	fc 91       	ld	r31, X
    5242:	13 97       	sbiw	r26, 0x03	; 3
    5244:	19 95       	eicall
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	08 95       	ret

0000524c <_ZN9CMBSender14OnTransmitByteEv>:
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
    5250:	ec 01       	movw	r28, r24
    5252:	88 8d       	ldd	r24, Y+24	; 0x18
    5254:	84 30       	cpi	r24, 0x04	; 4
    5256:	38 f4       	brcc	.+14     	; 0x5266 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    5258:	82 30       	cpi	r24, 0x02	; 2
    525a:	b8 f5       	brcc	.+110    	; 0x52ca <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    525c:	88 23       	and	r24, r24
    525e:	31 f0       	breq	.+12     	; 0x526c <_ZN9CMBSender14OnTransmitByteEv+0x20>
    5260:	81 30       	cpi	r24, 0x01	; 1
    5262:	d1 f0       	breq	.+52     	; 0x5298 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    5264:	39 c0       	rjmp	.+114    	; 0x52d8 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5266:	85 30       	cpi	r24, 0x05	; 5
    5268:	81 f1       	breq	.+96     	; 0x52ca <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    526a:	36 c0       	rjmp	.+108    	; 0x52d8 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	88 8f       	std	Y+24, r24	; 0x18
    5270:	19 8e       	std	Y+25, r1	; 0x19
    5272:	8c 85       	ldd	r24, Y+12	; 0x0c
    5274:	9d 85       	ldd	r25, Y+13	; 0x0d
    5276:	29 8d       	ldd	r18, Y+25	; 0x19
    5278:	dc 01       	movw	r26, r24
    527a:	ed 91       	ld	r30, X+
    527c:	fc 91       	ld	r31, X
    527e:	ac 81       	ldd	r26, Y+4	; 0x04
    5280:	bd 81       	ldd	r27, Y+5	; 0x05
    5282:	a2 0f       	add	r26, r18
    5284:	b1 1d       	adc	r27, r1
    5286:	04 80       	ldd	r0, Z+4	; 0x04
    5288:	f5 81       	ldd	r31, Z+5	; 0x05
    528a:	e0 2d       	mov	r30, r0
    528c:	6c 91       	ld	r22, X
    528e:	19 95       	eicall
    5290:	89 8d       	ldd	r24, Y+25	; 0x19
    5292:	8f 5f       	subi	r24, 0xFF	; 255
    5294:	89 8f       	std	Y+25, r24	; 0x19
    5296:	20 c0       	rjmp	.+64     	; 0x52d8 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5298:	8c 85       	ldd	r24, Y+12	; 0x0c
    529a:	9d 85       	ldd	r25, Y+13	; 0x0d
    529c:	29 8d       	ldd	r18, Y+25	; 0x19
    529e:	dc 01       	movw	r26, r24
    52a0:	ed 91       	ld	r30, X+
    52a2:	fc 91       	ld	r31, X
    52a4:	ac 81       	ldd	r26, Y+4	; 0x04
    52a6:	bd 81       	ldd	r27, Y+5	; 0x05
    52a8:	a2 0f       	add	r26, r18
    52aa:	b1 1d       	adc	r27, r1
    52ac:	04 80       	ldd	r0, Z+4	; 0x04
    52ae:	f5 81       	ldd	r31, Z+5	; 0x05
    52b0:	e0 2d       	mov	r30, r0
    52b2:	6c 91       	ld	r22, X
    52b4:	19 95       	eicall
    52b6:	89 8d       	ldd	r24, Y+25	; 0x19
    52b8:	8f 5f       	subi	r24, 0xFF	; 255
    52ba:	89 8f       	std	Y+25, r24	; 0x19
    52bc:	99 8d       	ldd	r25, Y+25	; 0x19
    52be:	89 85       	ldd	r24, Y+9	; 0x09
    52c0:	98 13       	cpse	r25, r24
    52c2:	0a c0       	rjmp	.+20     	; 0x52d8 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    52c4:	83 e0       	ldi	r24, 0x03	; 3
    52c6:	88 8f       	std	Y+24, r24	; 0x18
    52c8:	07 c0       	rjmp	.+14     	; 0x52d8 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    52ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    52cc:	88 23       	and	r24, r24
    52ce:	19 f0       	breq	.+6      	; 0x52d6 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    52d0:	ce 01       	movw	r24, r28
    52d2:	0e 94 0d 29 	call	0x521a	; 0x521a <_ZN9CMBSender19StartMODBUSListenerEv>
    52d6:	1a 8e       	std	Y+26, r1	; 0x1a
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	08 95       	ret

000052de <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    52de:	0e 94 26 29 	call	0x524c	; 0x524c <_ZN9CMBSender14OnTransmitByteEv>
    52e2:	08 95       	ret

000052e4 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    52e4:	fc 01       	movw	r30, r24
    52e6:	06 c0       	rjmp	.+12     	; 0x52f4 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    52e8:	80 89       	ldd	r24, Z+16	; 0x10
    52ea:	89 30       	cpi	r24, 0x09	; 9
    52ec:	41 f0       	breq	.+16     	; 0x52fe <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    52ee:	80 89       	ldd	r24, Z+16	; 0x10
    52f0:	8a 30       	cpi	r24, 0x0A	; 10
    52f2:	39 f0       	breq	.+14     	; 0x5302 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    52f4:	80 89       	ldd	r24, Z+16	; 0x10
    52f6:	88 30       	cpi	r24, 0x08	; 8
    52f8:	b9 f7       	brne	.-18     	; 0x52e8 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	08 95       	ret
    52fe:	82 e0       	ldi	r24, 0x02	; 2
    5300:	08 95       	ret
    5302:	83 e0       	ldi	r24, 0x03	; 3
    5304:	08 95       	ret

00005306 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	ec 01       	movw	r28, r24
    530c:	19 8e       	std	Y+25, r1	; 0x19
    530e:	18 8e       	std	Y+24, r1	; 0x18
    5310:	0e 94 26 29 	call	0x524c	; 0x524c <_ZN9CMBSender14OnTransmitByteEv>
    5314:	8e 85       	ldd	r24, Y+14	; 0x0e
    5316:	9f 85       	ldd	r25, Y+15	; 0x0f
    5318:	dc 01       	movw	r26, r24
    531a:	ed 91       	ld	r30, X+
    531c:	fc 91       	ld	r31, X
    531e:	6a 89       	ldd	r22, Y+18	; 0x12
    5320:	7b 89       	ldd	r23, Y+19	; 0x13
    5322:	02 80       	ldd	r0, Z+2	; 0x02
    5324:	f3 81       	ldd	r31, Z+3	; 0x03
    5326:	e0 2d       	mov	r30, r0
    5328:	19 95       	eicall
    532a:	df 91       	pop	r29
    532c:	cf 91       	pop	r28
    532e:	08 95       	ret

00005330 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    5330:	cf 93       	push	r28
    5332:	df 93       	push	r29
    5334:	ec 01       	movw	r28, r24
    5336:	e8 81       	ld	r30, Y
    5338:	f9 81       	ldd	r31, Y+1	; 0x01
    533a:	02 84       	ldd	r0, Z+10	; 0x0a
    533c:	f3 85       	ldd	r31, Z+11	; 0x0b
    533e:	e0 2d       	mov	r30, r0
    5340:	19 95       	eicall
    5342:	ce 01       	movw	r24, r28
    5344:	0e 94 83 29 	call	0x5306	; 0x5306 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5348:	df 91       	pop	r29
    534a:	cf 91       	pop	r28
    534c:	08 95       	ret

0000534e <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    534e:	cf 93       	push	r28
    5350:	df 93       	push	r29
    5352:	ec 01       	movw	r28, r24
    5354:	e8 81       	ld	r30, Y
    5356:	f9 81       	ldd	r31, Y+1	; 0x01
    5358:	06 84       	ldd	r0, Z+14	; 0x0e
    535a:	f7 85       	ldd	r31, Z+15	; 0x0f
    535c:	e0 2d       	mov	r30, r0
    535e:	19 95       	eicall
    5360:	ce 01       	movw	r24, r28
    5362:	0e 94 83 29 	call	0x5306	; 0x5306 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	08 95       	ret

0000536c <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	ec 01       	movw	r28, r24
    5372:	e8 81       	ld	r30, Y
    5374:	f9 81       	ldd	r31, Y+1	; 0x01
    5376:	04 84       	ldd	r0, Z+12	; 0x0c
    5378:	f5 85       	ldd	r31, Z+13	; 0x0d
    537a:	e0 2d       	mov	r30, r0
    537c:	19 95       	eicall
    537e:	ce 01       	movw	r24, r28
    5380:	0e 94 83 29 	call	0x5306	; 0x5306 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	08 95       	ret

0000538a <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	ec 01       	movw	r28, r24
    5390:	e8 81       	ld	r30, Y
    5392:	f9 81       	ldd	r31, Y+1	; 0x01
    5394:	50 e0       	ldi	r21, 0x00	; 0
    5396:	00 88       	ldd	r0, Z+16	; 0x10
    5398:	f1 89       	ldd	r31, Z+17	; 0x11
    539a:	e0 2d       	mov	r30, r0
    539c:	19 95       	eicall
    539e:	ce 01       	movw	r24, r28
    53a0:	0e 94 83 29 	call	0x5306	; 0x5306 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    53a4:	df 91       	pop	r29
    53a6:	cf 91       	pop	r28
    53a8:	08 95       	ret

000053aa <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    53aa:	fc 01       	movw	r30, r24
    53ac:	06 c0       	rjmp	.+12     	; 0x53ba <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    53ae:	80 8d       	ldd	r24, Z+24	; 0x18
    53b0:	84 30       	cpi	r24, 0x04	; 4
    53b2:	41 f0       	breq	.+16     	; 0x53c4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    53b4:	80 8d       	ldd	r24, Z+24	; 0x18
    53b6:	85 30       	cpi	r24, 0x05	; 5
    53b8:	39 f0       	breq	.+14     	; 0x53c8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    53ba:	80 8d       	ldd	r24, Z+24	; 0x18
    53bc:	83 30       	cpi	r24, 0x03	; 3
    53be:	b9 f7       	brne	.-18     	; 0x53ae <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	08 95       	ret
    53c4:	82 e0       	ldi	r24, 0x02	; 2
    53c6:	08 95       	ret
    53c8:	83 e0       	ldi	r24, 0x03	; 3
    53ca:	08 95       	ret

000053cc <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    53cc:	21 e0       	ldi	r18, 0x01	; 1
    53ce:	fc 01       	movw	r30, r24
    53d0:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    53d2:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    53d6:	08 95       	ret

000053d8 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    53d8:	21 e0       	ldi	r18, 0x01	; 1
    53da:	fc 01       	movw	r30, r24
    53dc:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    53de:	0e 94 c5 29 	call	0x538a	; 0x538a <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    53e2:	08 95       	ret

000053e4 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	8c 01       	movw	r16, r24
    53ee:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    53f0:	98 81       	ld	r25, Y
    53f2:	91 38       	cpi	r25, 0x81	; 129
    53f4:	69 f4       	brne	.+26     	; 0x5410 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    53f6:	d8 01       	movw	r26, r16
    53f8:	ed 91       	ld	r30, X+
    53fa:	fc 91       	ld	r31, X
    53fc:	04 80       	ldd	r0, Z+4	; 0x04
    53fe:	f5 81       	ldd	r31, Z+5	; 0x05
    5400:	e0 2d       	mov	r30, r0
    5402:	2a 81       	ldd	r18, Y+2	; 0x02
    5404:	ab 01       	movw	r20, r22
    5406:	4d 5f       	subi	r20, 0xFD	; 253
    5408:	5f 4f       	sbci	r21, 0xFF	; 255
    540a:	69 81       	ldd	r22, Y+1	; 0x01
    540c:	c8 01       	movw	r24, r16
    540e:	19 95       	eicall
	}
	if (data[0] == 0x83)
    5410:	98 81       	ld	r25, Y
    5412:	93 38       	cpi	r25, 0x83	; 131
    5414:	99 f4       	brne	.+38     	; 0x543c <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5416:	d8 01       	movw	r26, r16
    5418:	ed 91       	ld	r30, X+
    541a:	fc 91       	ld	r31, X
    541c:	2b 81       	ldd	r18, Y+3	; 0x03
    541e:	30 e0       	ldi	r19, 0x00	; 0
    5420:	ae 01       	movw	r20, r28
    5422:	4c 5f       	subi	r20, 0xFC	; 252
    5424:	5f 4f       	sbci	r21, 0xFF	; 255
    5426:	69 81       	ldd	r22, Y+1	; 0x01
    5428:	70 e0       	ldi	r23, 0x00	; 0
    542a:	76 2f       	mov	r23, r22
    542c:	66 27       	eor	r22, r22
    542e:	8a 81       	ldd	r24, Y+2	; 0x02
    5430:	68 2b       	or	r22, r24
    5432:	02 80       	ldd	r0, Z+2	; 0x02
    5434:	f3 81       	ldd	r31, Z+3	; 0x03
    5436:	e0 2d       	mov	r30, r0
    5438:	c8 01       	movw	r24, r16
    543a:	19 95       	eicall
	}
}
    543c:	df 91       	pop	r29
    543e:	cf 91       	pop	r28
    5440:	1f 91       	pop	r17
    5442:	0f 91       	pop	r16
    5444:	08 95       	ret

00005446 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    5446:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <_ZN9CMBSender18ProcessTransactionEPhj>
    544a:	08 95       	ret

0000544c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    544c:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    544e:	e0 e6       	ldi	r30, 0x60	; 96
    5450:	f6 e0       	ldi	r31, 0x06	; 6
    5452:	88 e0       	ldi	r24, 0x08	; 8
    5454:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    5456:	84 e0       	ldi	r24, 0x04	; 4
    5458:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    545a:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    545c:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    545e:	e0 ea       	ldi	r30, 0xA0	; 160
    5460:	f9 e0       	ldi	r31, 0x09	; 9
    5462:	84 e1       	ldi	r24, 0x14	; 20
    5464:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    5466:	88 e1       	ldi	r24, 0x18	; 24
    5468:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    546a:	84 81       	ldd	r24, Z+4	; 0x04
    546c:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    546e:	41 30       	cpi	r20, 0x01	; 1
    5470:	19 f0       	breq	.+6      	; 0x5478 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    5472:	42 30       	cpi	r20, 0x02	; 2
    5474:	19 f0       	breq	.+6      	; 0x547c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    5476:	04 c0       	rjmp	.+8      	; 0x5480 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    5478:	80 e2       	ldi	r24, 0x20	; 32
    547a:	03 c0       	rjmp	.+6      	; 0x5482 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    547c:	80 e3       	ldi	r24, 0x30	; 48
		break;
    547e:	01 c0       	rjmp	.+2      	; 0x5482 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    5480:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    5482:	22 23       	and	r18, r18
    5484:	19 f0       	breq	.+6      	; 0x548c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    5486:	21 30       	cpi	r18, 0x01	; 1
    5488:	19 f0       	breq	.+6      	; 0x5490 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    548a:	03 c0       	rjmp	.+6      	; 0x5492 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    548c:	87 7f       	andi	r24, 0xF7	; 247
		break;
    548e:	01 c0       	rjmp	.+2      	; 0x5492 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    5490:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    5492:	01 11       	cpse	r16, r1
    5494:	02 c0       	rjmp	.+4      	; 0x549a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    5496:	93 e4       	ldi	r25, 0x43	; 67
    5498:	01 c0       	rjmp	.+2      	; 0x549c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    549a:	93 e0       	ldi	r25, 0x03	; 3
    549c:	89 2b       	or	r24, r25
    549e:	e0 ea       	ldi	r30, 0xA0	; 160
    54a0:	f9 e0       	ldi	r31, 0x09	; 9
    54a2:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    54a4:	70 e0       	ldi	r23, 0x00	; 0
    54a6:	db 01       	movw	r26, r22
    54a8:	ac 5b       	subi	r26, 0xBC	; 188
    54aa:	be 4d       	sbci	r27, 0xDE	; 222
    54ac:	8c 91       	ld	r24, X
    54ae:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    54b0:	db 01       	movw	r26, r22
    54b2:	ac 5d       	subi	r26, 0xDC	; 220
    54b4:	be 4d       	sbci	r27, 0xDE	; 222
    54b6:	8c 91       	ld	r24, X
    54b8:	82 95       	swap	r24
    54ba:	80 7f       	andi	r24, 0xF0	; 240
    54bc:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    54be:	0f 91       	pop	r16
    54c0:	08 95       	ret

000054c2 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    54c2:	80 91 a0 09 	lds	r24, 0x09A0
}
    54c6:	08 95       	ret

000054c8 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    54c8:	60 93 a0 09 	sts	0x09A0, r22
    54cc:	08 95       	ret

000054ce <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    54ce:	80 91 a1 09 	lds	r24, 0x09A1
    54d2:	86 fb       	bst	r24, 6
    54d4:	88 27       	eor	r24, r24
    54d6:	80 f9       	bld	r24, 0
}
    54d8:	91 e0       	ldi	r25, 0x01	; 1
    54da:	89 27       	eor	r24, r25
    54dc:	08 95       	ret

000054de <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    54de:	80 91 a1 09 	lds	r24, 0x09A1
    54e2:	80 95       	com	r24
}
    54e4:	88 1f       	adc	r24, r24
    54e6:	88 27       	eor	r24, r24
    54e8:	88 1f       	adc	r24, r24
    54ea:	08 95       	ret

000054ec <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    54ec:	80 91 a1 09 	lds	r24, 0x09A1
    54f0:	85 fb       	bst	r24, 5
    54f2:	88 27       	eor	r24, r24
    54f4:	80 f9       	bld	r24, 0
}
    54f6:	91 e0       	ldi	r25, 0x01	; 1
    54f8:	89 27       	eor	r24, r25
    54fa:	08 95       	ret

000054fc <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    54fc:	60 93 56 24 	sts	0x2456, r22
    5500:	70 93 57 24 	sts	0x2457, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    5504:	40 93 60 23 	sts	0x2360, r20
    5508:	50 93 61 23 	sts	0x2361, r21
    550c:	08 95       	ret

0000550e <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    550e:	60 93 5a 24 	sts	0x245A, r22
    5512:	70 93 5b 24 	sts	0x245B, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    5516:	40 93 64 23 	sts	0x2364, r20
    551a:	50 93 65 23 	sts	0x2365, r21
    551e:	08 95       	ret

00005520 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    5520:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    5522:	8b e6       	ldi	r24, 0x6B	; 107
    5524:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    5526:	80 ea       	ldi	r24, 0xA0	; 160
    5528:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    552a:	89 e0       	ldi	r24, 0x09	; 9
    552c:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    552e:	12 86       	std	Z+10, r1	; 0x0a
    5530:	08 95       	ret

00005532 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    5532:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    5534:	8c e6       	ldi	r24, 0x6C	; 108
    5536:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    5538:	80 ea       	ldi	r24, 0xA0	; 160
    553a:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    553c:	89 e0       	ldi	r24, 0x09	; 9
    553e:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    5540:	16 86       	std	Z+14, r1	; 0x0e
    5542:	08 95       	ret

00005544 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	ec 01       	movw	r28, r24
    554a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZN6CUSARTC1Ev>
    554e:	8e ee       	ldi	r24, 0xEE	; 238
    5550:	91 e2       	ldi	r25, 0x21	; 33
    5552:	88 83       	st	Y, r24
    5554:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	08 95       	ret

0000555c <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    555c:	2e ee       	ldi	r18, 0xEE	; 238
    555e:	31 e2       	ldi	r19, 0x21	; 33
    5560:	fc 01       	movw	r30, r24
    5562:	20 83       	st	Z, r18
    5564:	31 83       	std	Z+1, r19	; 0x01
    5566:	0e 94 56 11 	call	0x22ac	; 0x22ac <_ZN6CUSARTD1Ev>
    556a:	08 95       	ret

0000556c <_ZN8CDS18B20C1Ev>:
#define F_CPU	32000000

#include <util/delay.h>

// default constructor
CDS18B20::CDS18B20()
    556c:	08 95       	ret

0000556e <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    556e:	08 95       	ret

00005570 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    5570:	e0 e6       	ldi	r30, 0x60	; 96
    5572:	f6 e0       	ldi	r31, 0x06	; 6
    5574:	80 e8       	ldi	r24, 0x80	; 128
    5576:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5578:	a7 e2       	ldi	r26, 0x27	; 39
    557a:	bf e0       	ldi	r27, 0x0F	; 15
    557c:	11 97       	sbiw	r26, 0x01	; 1
    557e:	f1 f7       	brne	.-4      	; 0x557c <_ZN8CDS18B207w1_findEv+0xc>
    5580:	00 c0       	rjmp	.+0      	; 0x5582 <_ZN8CDS18B207w1_findEv+0x12>
    5582:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    5584:	82 83       	std	Z+2, r24	; 0x02
    5586:	87 e0       	ldi	r24, 0x07	; 7
    5588:	92 e0       	ldi	r25, 0x02	; 2
    558a:	01 97       	sbiw	r24, 0x01	; 1
    558c:	f1 f7       	brne	.-4      	; 0x558a <_ZN8CDS18B207w1_findEv+0x1a>
    558e:	00 c0       	rjmp	.+0      	; 0x5590 <_ZN8CDS18B207w1_findEv+0x20>
    5590:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    5592:	80 85       	ldd	r24, Z+8	; 0x08
    5594:	af e1       	ldi	r26, 0x1F	; 31
    5596:	bd e0       	ldi	r27, 0x0D	; 13
    5598:	11 97       	sbiw	r26, 0x01	; 1
    559a:	f1 f7       	brne	.-4      	; 0x5598 <_ZN8CDS18B207w1_findEv+0x28>
    559c:	00 c0       	rjmp	.+0      	; 0x559e <_ZN8CDS18B207w1_findEv+0x2e>
    559e:	00 00       	nop
    55a0:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    55a2:	88 1f       	adc	r24, r24
    55a4:	88 27       	eor	r24, r24
    55a6:	88 1f       	adc	r24, r24
    55a8:	08 95       	ret

000055aa <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    55aa:	cf 93       	push	r28
    55ac:	df 93       	push	r29
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    55b2:	c1 e0       	ldi	r28, 0x01	; 1
    55b4:	d0 e0       	ldi	r29, 0x00	; 0
    55b6:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    55b8:	e0 e6       	ldi	r30, 0x60	; 96
    55ba:	f6 e0       	ldi	r31, 0x06	; 6
    55bc:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    55be:	9e 01       	movw	r18, r28
    55c0:	08 2e       	mov	r0, r24
    55c2:	02 c0       	rjmp	.+4      	; 0x55c8 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    55c4:	22 0f       	add	r18, r18
    55c6:	33 1f       	adc	r19, r19
    55c8:	0a 94       	dec	r0
    55ca:	e2 f7       	brpl	.-8      	; 0x55c4 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    55cc:	d9 01       	movw	r26, r18
    55ce:	a6 23       	and	r26, r22
    55d0:	b7 23       	and	r27, r23
    55d2:	2a 17       	cp	r18, r26
    55d4:	3b 07       	cpc	r19, r27
    55d6:	69 f4       	brne	.+26     	; 0x55f2 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    55d8:	41 83       	std	Z+1, r20	; 0x01
    55da:	25 e1       	ldi	r18, 0x15	; 21
    55dc:	2a 95       	dec	r18
    55de:	f1 f7       	brne	.-4      	; 0x55dc <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    55e0:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    55e2:	42 83       	std	Z+2, r20	; 0x02
    55e4:	a7 e0       	ldi	r26, 0x07	; 7
    55e6:	b2 e0       	ldi	r27, 0x02	; 2
    55e8:	11 97       	sbiw	r26, 0x01	; 1
    55ea:	f1 f7       	brne	.-4      	; 0x55e8 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    55ec:	00 c0       	rjmp	.+0      	; 0x55ee <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    55ee:	00 00       	nop
    55f0:	0c c0       	rjmp	.+24     	; 0x560a <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    55f2:	41 83       	std	Z+1, r20	; 0x01
    55f4:	a7 e0       	ldi	r26, 0x07	; 7
    55f6:	b2 e0       	ldi	r27, 0x02	; 2
    55f8:	11 97       	sbiw	r26, 0x01	; 1
    55fa:	f1 f7       	brne	.-4      	; 0x55f8 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    55fc:	00 c0       	rjmp	.+0      	; 0x55fe <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    55fe:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    5600:	42 83       	std	Z+2, r20	; 0x02
    5602:	b5 e3       	ldi	r27, 0x35	; 53
    5604:	ba 95       	dec	r27
    5606:	f1 f7       	brne	.-4      	; 0x5604 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    5608:	00 00       	nop
    560a:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    560c:	88 30       	cpi	r24, 0x08	; 8
    560e:	91 05       	cpc	r25, r1
    5610:	b1 f6       	brne	.-84     	; 0x55be <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	08 95       	ret

00005618 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    561c:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    561e:	e0 e6       	ldi	r30, 0x60	; 96
    5620:	f6 e0       	ldi	r31, 0x06	; 6
    5622:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    5624:	61 e0       	ldi	r22, 0x01	; 1
    5626:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    5628:	91 83       	std	Z+1, r25	; 0x01
    562a:	45 e1       	ldi	r20, 0x15	; 21
    562c:	4a 95       	dec	r20
    562e:	f1 f7       	brne	.-4      	; 0x562c <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    5630:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    5632:	92 83       	std	Z+2, r25	; 0x02
    5634:	aa e6       	ldi	r26, 0x6A	; 106
    5636:	aa 95       	dec	r26
    5638:	f1 f7       	brne	.-4      	; 0x5636 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    563a:	00 c0       	rjmp	.+0      	; 0x563c <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    563c:	40 85       	ldd	r20, Z+8	; 0x08
    563e:	44 23       	and	r20, r20
    5640:	54 f0       	brlt	.+20     	; 0x5656 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    5642:	ab 01       	movw	r20, r22
    5644:	02 2e       	mov	r0, r18
    5646:	02 c0       	rjmp	.+4      	; 0x564c <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    5648:	44 0f       	add	r20, r20
    564a:	55 1f       	adc	r21, r21
    564c:	0a 94       	dec	r0
    564e:	e2 f7       	brpl	.-8      	; 0x5648 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    5650:	40 95       	com	r20
    5652:	84 23       	and	r24, r20
    5654:	08 c0       	rjmp	.+16     	; 0x5666 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    5656:	ab 01       	movw	r20, r22
    5658:	02 2e       	mov	r0, r18
    565a:	02 c0       	rjmp	.+4      	; 0x5660 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    565c:	44 0f       	add	r20, r20
    565e:	55 1f       	adc	r21, r21
    5660:	0a 94       	dec	r0
    5662:	e2 f7       	brpl	.-8      	; 0x565c <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    5664:	84 2b       	or	r24, r20
    5666:	af e8       	ldi	r26, 0x8F	; 143
    5668:	b1 e0       	ldi	r27, 0x01	; 1
    566a:	11 97       	sbiw	r26, 0x01	; 1
    566c:	f1 f7       	brne	.-4      	; 0x566a <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    566e:	00 c0       	rjmp	.+0      	; 0x5670 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    5670:	00 00       	nop
    5672:	2f 5f       	subi	r18, 0xFF	; 255
    5674:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    5676:	28 30       	cpi	r18, 0x08	; 8
    5678:	31 05       	cpc	r19, r1
    567a:	b1 f6       	brne	.-84     	; 0x5628 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    567c:	08 95       	ret

0000567e <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    567e:	1f 93       	push	r17
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	ec 01       	movw	r28, r24
	unsigned char data[2];
	int temp = 0;
	
	if (req)
    5686:	8a 81       	ldd	r24, Y+2	; 0x02
    5688:	88 23       	and	r24, r24
    568a:	91 f0       	breq	.+36     	; 0x56b0 <_ZN8CDS18B2010temp_18b20Ev+0x32>
	{
		if(w1_find())
    568c:	ce 01       	movw	r24, r28
    568e:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZN8CDS18B207w1_findEv>
    5692:	88 23       	and	r24, r24
    5694:	59 f0       	breq	.+22     	; 0x56ac <_ZN8CDS18B2010temp_18b20Ev+0x2e>
		{
			w1_sendcmd(0xcc);	//skip ROM
    5696:	6c ec       	ldi	r22, 0xCC	; 204
    5698:	ce 01       	movw	r24, r28
    569a:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    569e:	64 e4       	ldi	r22, 0x44	; 68
    56a0:	ce 01       	movw	r24, r28
    56a2:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	8b 83       	std	Y+3, r24	; 0x03
    56aa:	2a c0       	rjmp	.+84     	; 0x5700 <_ZN8CDS18B2010temp_18b20Ev+0x82>
		}
		else
			find = false;
    56ac:	1b 82       	std	Y+3, r1	; 0x03
    56ae:	28 c0       	rjmp	.+80     	; 0x5700 <_ZN8CDS18B2010temp_18b20Ev+0x82>
	}
	else
	{
		if (find)
    56b0:	8b 81       	ldd	r24, Y+3	; 0x03
    56b2:	88 23       	and	r24, r24
    56b4:	29 f1       	breq	.+74     	; 0x5700 <_ZN8CDS18B2010temp_18b20Ev+0x82>
		{
			w1_find();
    56b6:	ce 01       	movw	r24, r28
    56b8:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    56bc:	6c ec       	ldi	r22, 0xCC	; 204
    56be:	ce 01       	movw	r24, r28
    56c0:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    56c4:	6e eb       	ldi	r22, 0xBE	; 190
    56c6:	ce 01       	movw	r24, r28
    56c8:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <_ZN8CDS18B2010w1_sendcmdEh>
			data[0] = w1_receive_byte();
    56cc:	ce 01       	movw	r24, r28
    56ce:	0e 94 0c 2b 	call	0x5618	; 0x5618 <_ZN8CDS18B2015w1_receive_byteEv>
    56d2:	18 2f       	mov	r17, r24
			data[1] = w1_receive_byte();
    56d4:	ce 01       	movw	r24, r28
    56d6:	0e 94 0c 2b 	call	0x5618	; 0x5618 <_ZN8CDS18B2015w1_receive_byteEv>
			
			temp = data[1];
			temp = temp<<8;
    56da:	61 2f       	mov	r22, r17
    56dc:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    56de:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    56e0:	07 2e       	mov	r0, r23
    56e2:	00 0c       	add	r0, r0
    56e4:	88 0b       	sbc	r24, r24
    56e6:	99 0b       	sbc	r25, r25
    56e8:	0e 94 34 31 	call	0x6268	; 0x6268 <__floatsisf>
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	30 e0       	ldi	r19, 0x00	; 0
    56f0:	40 e2       	ldi	r20, 0x20	; 32
    56f2:	5f e3       	ldi	r21, 0x3F	; 63
    56f4:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    56f8:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__fixsfsi>
    56fc:	68 83       	st	Y, r22
    56fe:	79 83       	std	Y+1, r23	; 0x01
			
			temperature = temp;
		}
	}
	
	req = !req;
    5700:	9a 81       	ldd	r25, Y+2	; 0x02
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	89 27       	eor	r24, r25
    5706:	8a 83       	std	Y+2, r24	; 0x02
	
	return temperature;
}
    5708:	88 81       	ld	r24, Y
    570a:	99 81       	ldd	r25, Y+1	; 0x01
    570c:	df 91       	pop	r29
    570e:	cf 91       	pop	r28
    5710:	1f 91       	pop	r17
    5712:	08 95       	ret

00005714 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    5714:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    5716:	a0 e6       	ldi	r26, 0x60	; 96
    5718:	b6 e0       	ldi	r27, 0x06	; 6
    571a:	80 e8       	ldi	r24, 0x80	; 128
    571c:	16 96       	adiw	r26, 0x06	; 6
    571e:	8c 93       	st	X, r24
    5720:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    5722:	57 96       	adiw	r26, 0x17	; 23
    5724:	1c 92       	st	X, r1
	
	temperature = 0;
    5726:	10 82       	st	Z, r1
    5728:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    572a:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	82 83       	std	Z+2, r24	; 0x02
    5730:	08 95       	ret

00005732 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    5732:	08 95       	ret

00005734 <_ZN11CLaserBoardD1Ev>:
    5734:	08 95       	ret

00005736 <_ZN11CLaserBoard12InitializeIOEv>:
    5736:	cf 93       	push	r28
    5738:	df 93       	push	r29
    573a:	ec 01       	movw	r28, r24
    573c:	e0 e4       	ldi	r30, 0x40	; 64
    573e:	f6 e0       	ldi	r31, 0x06	; 6
    5740:	11 82       	std	Z+1, r1	; 0x01
    5742:	98 ea       	ldi	r25, 0xA8	; 168
    5744:	90 8b       	std	Z+16, r25	; 0x10
    5746:	91 8b       	std	Z+17, r25	; 0x11
    5748:	92 8b       	std	Z+18, r25	; 0x12
    574a:	93 8b       	std	Z+19, r25	; 0x13
    574c:	94 8b       	std	Z+20, r25	; 0x14
    574e:	95 8b       	std	Z+21, r25	; 0x15
    5750:	96 8b       	std	Z+22, r25	; 0x16
    5752:	97 8b       	std	Z+23, r25	; 0x17
    5754:	8f ef       	ldi	r24, 0xFF	; 255
    5756:	84 83       	std	Z+4, r24	; 0x04
    5758:	a0 e8       	ldi	r26, 0x80	; 128
    575a:	b6 e0       	ldi	r27, 0x06	; 6
    575c:	98 e0       	ldi	r25, 0x08	; 8
    575e:	11 96       	adiw	r26, 0x01	; 1
    5760:	9c 93       	st	X, r25
    5762:	11 97       	sbiw	r26, 0x01	; 1
    5764:	53 96       	adiw	r26, 0x13	; 19
    5766:	1c 92       	st	X, r1
    5768:	53 97       	sbiw	r26, 0x13	; 19
    576a:	14 96       	adiw	r26, 0x04	; 4
    576c:	1c 92       	st	X, r1
    576e:	14 97       	sbiw	r26, 0x04	; 4
    5770:	e0 ea       	ldi	r30, 0xA0	; 160
    5772:	f6 e0       	ldi	r31, 0x06	; 6
    5774:	90 ec       	ldi	r25, 0xC0	; 192
    5776:	90 8b       	std	Z+16, r25	; 0x10
    5778:	20 e8       	ldi	r18, 0x80	; 128
    577a:	21 8b       	std	Z+17, r18	; 0x11
    577c:	22 8b       	std	Z+18, r18	; 0x12
    577e:	23 8b       	std	Z+19, r18	; 0x13
    5780:	94 8b       	std	Z+20, r25	; 0x14
    5782:	95 8b       	std	Z+21, r25	; 0x15
    5784:	96 8b       	std	Z+22, r25	; 0x16
    5786:	97 8b       	std	Z+23, r25	; 0x17
    5788:	14 82       	std	Z+4, r1	; 0x04
    578a:	81 83       	std	Z+1, r24	; 0x01
    578c:	e0 e6       	ldi	r30, 0x60	; 96
    578e:	f6 e0       	ldi	r31, 0x06	; 6
    5790:	81 e1       	ldi	r24, 0x11	; 17
    5792:	81 83       	std	Z+1, r24	; 0x01
    5794:	90 8b       	std	Z+16, r25	; 0x10
    5796:	94 8b       	std	Z+20, r25	; 0x14
    5798:	15 8a       	std	Z+21, r1	; 0x15
    579a:	14 82       	std	Z+4, r1	; 0x04
    579c:	87 e0       	ldi	r24, 0x07	; 7
    579e:	11 96       	adiw	r26, 0x01	; 1
    57a0:	8c 93       	st	X, r24
    57a2:	11 97       	sbiw	r26, 0x01	; 1
    57a4:	50 96       	adiw	r26, 0x10	; 16
    57a6:	2c 93       	st	X, r18
    57a8:	50 97       	sbiw	r26, 0x10	; 16
    57aa:	51 96       	adiw	r26, 0x11	; 17
    57ac:	2c 93       	st	X, r18
    57ae:	51 97       	sbiw	r26, 0x11	; 17
    57b0:	52 96       	adiw	r26, 0x12	; 18
    57b2:	2c 93       	st	X, r18
    57b4:	52 97       	sbiw	r26, 0x12	; 18
    57b6:	14 96       	adiw	r26, 0x04	; 4
    57b8:	1c 92       	st	X, r1
    57ba:	e0 ea       	ldi	r30, 0xA0	; 160
    57bc:	f0 e0       	ldi	r31, 0x00	; 0
    57be:	82 81       	ldd	r24, Z+2	; 0x02
    57c0:	81 60       	ori	r24, 0x01	; 1
    57c2:	82 83       	std	Z+2, r24	; 0x02
    57c4:	82 81       	ldd	r24, Z+2	; 0x02
    57c6:	82 60       	ori	r24, 0x02	; 2
    57c8:	82 83       	std	Z+2, r24	; 0x02
    57ca:	82 81       	ldd	r24, Z+2	; 0x02
    57cc:	84 60       	ori	r24, 0x04	; 4
    57ce:	82 83       	std	Z+2, r24	; 0x02
    57d0:	fe 01       	movw	r30, r28
    57d2:	9e 01       	movw	r18, r28
    57d4:	28 5f       	subi	r18, 0xF8	; 248
    57d6:	3f 4f       	sbci	r19, 0xFF	; 255
    57d8:	91 e0       	ldi	r25, 0x01	; 1
    57da:	91 93       	st	Z+, r25
    57dc:	e2 17       	cp	r30, r18
    57de:	f3 07       	cpc	r31, r19
    57e0:	e1 f7       	brne	.-8      	; 0x57da <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    57e2:	83 e0       	ldi	r24, 0x03	; 3
    57e4:	88 87       	std	Y+8, r24	; 0x08
    57e6:	e0 e4       	ldi	r30, 0x40	; 64
    57e8:	f6 e0       	ldi	r31, 0x06	; 6
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	82 87       	std	Z+10, r24	; 0x0a
    57ee:	81 87       	std	Z+9, r24	; 0x09
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	08 95       	ret

000057f6 <_ZN11CLaserBoard15InitializeClockEv>:
    57f6:	e0 e5       	ldi	r30, 0x50	; 80
    57f8:	f0 e0       	ldi	r31, 0x00	; 0
    57fa:	8b ec       	ldi	r24, 0xCB	; 203
    57fc:	82 83       	std	Z+2, r24	; 0x02
    57fe:	80 81       	ld	r24, Z
    5800:	88 60       	ori	r24, 0x08	; 8
    5802:	80 83       	st	Z, r24
    5804:	81 81       	ldd	r24, Z+1	; 0x01
    5806:	83 ff       	sbrs	r24, 3
    5808:	fd cf       	rjmp	.-6      	; 0x5804 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    580a:	e0 e5       	ldi	r30, 0x50	; 80
    580c:	f0 e0       	ldi	r31, 0x00	; 0
    580e:	85 81       	ldd	r24, Z+5	; 0x05
    5810:	98 ed       	ldi	r25, 0xD8	; 216
    5812:	94 bf       	out	0x34, r25	; 52
    5814:	84 ec       	ldi	r24, 0xC4	; 196
    5816:	85 83       	std	Z+5, r24	; 0x05
    5818:	80 81       	ld	r24, Z
    581a:	80 61       	ori	r24, 0x10	; 16
    581c:	80 83       	st	Z, r24
    581e:	e0 e4       	ldi	r30, 0x40	; 64
    5820:	f0 e0       	ldi	r31, 0x00	; 0
    5822:	81 81       	ldd	r24, Z+1	; 0x01
    5824:	94 bf       	out	0x34, r25	; 52
    5826:	11 82       	std	Z+1, r1	; 0x01
    5828:	e0 e5       	ldi	r30, 0x50	; 80
    582a:	f0 e0       	ldi	r31, 0x00	; 0
    582c:	81 81       	ldd	r24, Z+1	; 0x01
    582e:	84 ff       	sbrs	r24, 4
    5830:	fd cf       	rjmp	.-6      	; 0x582c <_ZN11CLaserBoard15InitializeClockEv+0x36>
    5832:	e0 e4       	ldi	r30, 0x40	; 64
    5834:	f0 e0       	ldi	r31, 0x00	; 0
    5836:	80 81       	ld	r24, Z
    5838:	88 7f       	andi	r24, 0xF8	; 248
    583a:	84 60       	ori	r24, 0x04	; 4
    583c:	98 ed       	ldi	r25, 0xD8	; 216
    583e:	94 bf       	out	0x34, r25	; 52
    5840:	80 83       	st	Z, r24
    5842:	a0 e5       	ldi	r26, 0x50	; 80
    5844:	b0 e0       	ldi	r27, 0x00	; 0
    5846:	8c 91       	ld	r24, X
    5848:	88 7f       	andi	r24, 0xF8	; 248
    584a:	8c 93       	st	X, r24
    584c:	82 81       	ldd	r24, Z+2	; 0x02
    584e:	94 bf       	out	0x34, r25	; 52
    5850:	81 e0       	ldi	r24, 0x01	; 1
    5852:	82 83       	std	Z+2, r24	; 0x02
    5854:	e0 eb       	ldi	r30, 0xB0	; 176
    5856:	f0 e0       	ldi	r31, 0x00	; 0
    5858:	84 81       	ldd	r24, Z+4	; 0x04
    585a:	8c 7f       	andi	r24, 0xFC	; 252
    585c:	84 83       	std	Z+4, r24	; 0x04
    585e:	08 95       	ret

00005860 <_ZN11CLaserBoard5PWMOnEv>:
    5860:	84 e0       	ldi	r24, 0x04	; 4
    5862:	80 93 85 06 	sts	0x0685, r24
    5866:	08 95       	ret

00005868 <_ZN11CLaserBoard6PWMOffEv>:
    5868:	84 e0       	ldi	r24, 0x04	; 4
    586a:	80 93 86 06 	sts	0x0686, r24
    586e:	08 95       	ret

00005870 <_ZN11CLaserBoard5REDOnEv>:
    5870:	82 e0       	ldi	r24, 0x02	; 2
    5872:	80 93 a5 06 	sts	0x06A5, r24
    5876:	08 95       	ret

00005878 <_ZN11CLaserBoard5GRNOnEv>:
    5878:	84 e0       	ldi	r24, 0x04	; 4
    587a:	80 93 a5 06 	sts	0x06A5, r24
    587e:	08 95       	ret

00005880 <_ZN11CLaserBoard5BLUOnEv>:
    5880:	88 e0       	ldi	r24, 0x08	; 8
    5882:	80 93 a5 06 	sts	0x06A5, r24
    5886:	08 95       	ret

00005888 <_ZN11CLaserBoard8Relay1OnEv>:
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	80 93 62 06 	sts	0x0662, r24
    588e:	08 95       	ret

00005890 <_ZN11CLaserBoard8Relay2OnEv>:
    5890:	80 e1       	ldi	r24, 0x10	; 16
    5892:	80 93 62 06 	sts	0x0662, r24
    5896:	08 95       	ret

00005898 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    5898:	80 e1       	ldi	r24, 0x10	; 16
    589a:	80 93 61 06 	sts	0x0661, r24
    589e:	08 95       	ret

000058a0 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    58a0:	82 e0       	ldi	r24, 0x02	; 2
    58a2:	80 93 85 06 	sts	0x0685, r24
    58a6:	08 95       	ret

000058a8 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    58a8:	82 e0       	ldi	r24, 0x02	; 2
    58aa:	80 93 86 06 	sts	0x0686, r24
    58ae:	08 95       	ret

000058b0 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    58b0:	f8 94       	cli
    58b2:	84 e6       	ldi	r24, 0x64	; 100
    58b4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    58b6:	e0 e8       	ldi	r30, 0x80	; 128
    58b8:	f6 e0       	ldi	r31, 0x06	; 6
    58ba:	28 e0       	ldi	r18, 0x08	; 8
    58bc:	25 83       	std	Z+5, r18	; 0x05
    58be:	af e9       	ldi	r26, 0x9F	; 159
    58c0:	bf e0       	ldi	r27, 0x0F	; 15
    58c2:	11 97       	sbiw	r26, 0x01	; 1
    58c4:	f1 f7       	brne	.-4      	; 0x58c2 <_ZN11CLaserBoard4BeepEv+0x12>
    58c6:	00 c0       	rjmp	.+0      	; 0x58c8 <_ZN11CLaserBoard4BeepEv+0x18>
    58c8:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    58ca:	26 83       	std	Z+6, r18	; 0x06
    58cc:	af e9       	ldi	r26, 0x9F	; 159
    58ce:	bf e0       	ldi	r27, 0x0F	; 15
    58d0:	11 97       	sbiw	r26, 0x01	; 1
    58d2:	f1 f7       	brne	.-4      	; 0x58d0 <_ZN11CLaserBoard4BeepEv+0x20>
    58d4:	00 c0       	rjmp	.+0      	; 0x58d6 <_ZN11CLaserBoard4BeepEv+0x26>
    58d6:	00 00       	nop
    58d8:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    58da:	81 f7       	brne	.-32     	; 0x58bc <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    58dc:	78 94       	sei
    58de:	08 95       	ret

000058e0 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    58e0:	f8 94       	cli
    58e2:	45 e0       	ldi	r20, 0x05	; 5
    58e4:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    58e6:	64 e6       	ldi	r22, 0x64	; 100
    58e8:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    58ea:	e0 e8       	ldi	r30, 0x80	; 128
    58ec:	f6 e0       	ldi	r31, 0x06	; 6
    58ee:	28 e0       	ldi	r18, 0x08	; 8
    58f0:	1c c0       	rjmp	.+56     	; 0x592a <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    58f2:	25 83       	std	Z+5, r18	; 0x05
    58f4:	af e9       	ldi	r26, 0x9F	; 159
    58f6:	bf e0       	ldi	r27, 0x0F	; 15
    58f8:	11 97       	sbiw	r26, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    58fc:	00 c0       	rjmp	.+0      	; 0x58fe <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    58fe:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    5900:	26 83       	std	Z+6, r18	; 0x06
    5902:	af e9       	ldi	r26, 0x9F	; 159
    5904:	bf e0       	ldi	r27, 0x0F	; 15
    5906:	11 97       	sbiw	r26, 0x01	; 1
    5908:	f1 f7       	brne	.-4      	; 0x5906 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    590a:	00 c0       	rjmp	.+0      	; 0x590c <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    590c:	00 00       	nop
    590e:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    5910:	81 f7       	brne	.-32     	; 0x58f2 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5912:	bf ef       	ldi	r27, 0xFF	; 255
    5914:	73 ec       	ldi	r23, 0xC3	; 195
    5916:	89 e0       	ldi	r24, 0x09	; 9
    5918:	b1 50       	subi	r27, 0x01	; 1
    591a:	70 40       	sbci	r23, 0x00	; 0
    591c:	80 40       	sbci	r24, 0x00	; 0
    591e:	e1 f7       	brne	.-8      	; 0x5918 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    5920:	00 c0       	rjmp	.+0      	; 0x5922 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    5922:	00 00       	nop
    5924:	41 50       	subi	r20, 0x01	; 1
    5926:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    5928:	19 f0       	breq	.+6      	; 0x5930 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    592a:	86 2f       	mov	r24, r22
    592c:	93 2f       	mov	r25, r19
    592e:	e1 cf       	rjmp	.-62     	; 0x58f2 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5930:	78 94       	sei
    5932:	08 95       	ret

00005934 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5934:	20 91 48 06 	lds	r18, 0x0648
    5938:	fc 01       	movw	r30, r24
    593a:	21 87       	std	Z+9, r18	; 0x09
    593c:	08 95       	ret

0000593e <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    593e:	fc 01       	movw	r30, r24
    5940:	81 85       	ldd	r24, Z+9	; 0x09
    5942:	81 70       	andi	r24, 0x01	; 1
    5944:	08 95       	ret

00005946 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    5946:	08 95       	ret

00005948 <_ZN12CSoundPlayerD1Ev>:
    5948:	08 95       	ret

0000594a <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    594a:	e0 e0       	ldi	r30, 0x00	; 0
    594c:	fa e0       	ldi	r31, 0x0A	; 10
    594e:	10 82       	st	Z, r1
    5950:	87 e8       	ldi	r24, 0x87	; 135
    5952:	81 83       	std	Z+1, r24	; 0x01
    5954:	13 82       	std	Z+3, r1	; 0x03
    5956:	84 e2       	ldi	r24, 0x24	; 36
    5958:	94 ef       	ldi	r25, 0xF4	; 244
    595a:	86 a3       	std	Z+38, r24	; 0x26
    595c:	97 a3       	std	Z+39, r25	; 0x27
    595e:	82 e1       	ldi	r24, 0x12	; 18
    5960:	9a e7       	ldi	r25, 0x7A	; 122
    5962:	86 a7       	std	Z+46, r24	; 0x2e
    5964:	97 a7       	std	Z+47, r25	; 0x2f
    5966:	16 82       	std	Z+6, r1	; 0x06
    5968:	17 82       	std	Z+7, r1	; 0x07
    596a:	08 95       	ret

0000596c <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    596c:	e0 e4       	ldi	r30, 0x40	; 64
    596e:	fa e0       	ldi	r31, 0x0A	; 10
    5970:	10 82       	st	Z, r1
    5972:	11 82       	std	Z+1, r1	; 0x01
    5974:	13 82       	std	Z+3, r1	; 0x03
    5976:	84 e2       	ldi	r24, 0x24	; 36
    5978:	94 ef       	ldi	r25, 0xF4	; 244
    597a:	86 a3       	std	Z+38, r24	; 0x26
    597c:	97 a3       	std	Z+39, r25	; 0x27
    597e:	16 82       	std	Z+6, r1	; 0x06
    5980:	17 82       	std	Z+7, r1	; 0x07
    5982:	08 95       	ret

00005984 <_ZN12CSoundPlayer10SoundStartEjjh>:
    5984:	0f 93       	push	r16
    5986:	1f 93       	push	r17
    5988:	cf 93       	push	r28
    598a:	8a 01       	movw	r16, r20
    598c:	c2 2f       	mov	r28, r18
    598e:	9b 01       	movw	r18, r22
    5990:	40 e0       	ldi	r20, 0x00	; 0
    5992:	50 e0       	ldi	r21, 0x00	; 0
    5994:	64 e2       	ldi	r22, 0x24	; 36
    5996:	74 ef       	ldi	r23, 0xF4	; 244
    5998:	80 e0       	ldi	r24, 0x00	; 0
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	0e 94 87 32 	call	0x650e	; 0x650e <__divmodsi4>
    59a0:	b8 01       	movw	r22, r16
    59a2:	76 95       	lsr	r23
    59a4:	67 95       	ror	r22
    59a6:	ee e3       	ldi	r30, 0x3E	; 62
    59a8:	e0 9f       	mul	r30, r16
    59aa:	c0 01       	movw	r24, r0
    59ac:	e1 9f       	mul	r30, r17
    59ae:	90 0d       	add	r25, r0
    59b0:	11 24       	eor	r1, r1
    59b2:	86 0f       	add	r24, r22
    59b4:	97 1f       	adc	r25, r23
    59b6:	cf 5f       	subi	r28, 0xFF	; 255
    59b8:	b9 01       	movw	r22, r18
    59ba:	02 c0       	rjmp	.+4      	; 0x59c0 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    59bc:	76 95       	lsr	r23
    59be:	67 95       	ror	r22
    59c0:	ca 95       	dec	r28
    59c2:	e2 f7       	brpl	.-8      	; 0x59bc <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    59c4:	e0 e0       	ldi	r30, 0x00	; 0
    59c6:	fa e0       	ldi	r31, 0x0A	; 10
    59c8:	66 a7       	std	Z+46, r22	; 0x2e
    59ca:	77 a7       	std	Z+47, r23	; 0x2f
    59cc:	26 a3       	std	Z+38, r18	; 0x26
    59ce:	37 a3       	std	Z+39, r19	; 0x27
    59d0:	a0 e4       	ldi	r26, 0x40	; 64
    59d2:	ba e0       	ldi	r27, 0x0A	; 10
    59d4:	96 96       	adiw	r26, 0x26	; 38
    59d6:	8d 93       	st	X+, r24
    59d8:	9c 93       	st	X, r25
    59da:	97 97       	sbiw	r26, 0x27	; 39
    59dc:	86 e0       	ldi	r24, 0x06	; 6
    59de:	80 83       	st	Z, r24
    59e0:	87 e0       	ldi	r24, 0x07	; 7
    59e2:	8c 93       	st	X, r24
    59e4:	cf 91       	pop	r28
    59e6:	1f 91       	pop	r17
    59e8:	0f 91       	pop	r16
    59ea:	08 95       	ret

000059ec <_ZN12CSoundPlayer9SoundStopEv>:
    59ec:	e0 e4       	ldi	r30, 0x40	; 64
    59ee:	fa e0       	ldi	r31, 0x0A	; 10
    59f0:	84 85       	ldd	r24, Z+12	; 0x0c
    59f2:	80 ff       	sbrs	r24, 0
    59f4:	fd cf       	rjmp	.-6      	; 0x59f0 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    59f6:	e0 e4       	ldi	r30, 0x40	; 64
    59f8:	fa e0       	ldi	r31, 0x0A	; 10
    59fa:	84 85       	ldd	r24, Z+12	; 0x0c
    59fc:	81 70       	andi	r24, 0x01	; 1
    59fe:	84 87       	std	Z+12, r24	; 0x0c
    5a00:	a0 e0       	ldi	r26, 0x00	; 0
    5a02:	ba e0       	ldi	r27, 0x0A	; 10
    5a04:	1c 92       	st	X, r1
    5a06:	10 82       	st	Z, r1
    5a08:	10 a2       	std	Z+32, r1	; 0x20
    5a0a:	11 a2       	std	Z+33, r1	; 0x21
    5a0c:	90 96       	adiw	r26, 0x20	; 32
    5a0e:	1d 92       	st	X+, r1
    5a10:	1c 92       	st	X, r1
    5a12:	91 97       	sbiw	r26, 0x21	; 33
    5a14:	2f ef       	ldi	r18, 0xFF	; 255
    5a16:	83 ef       	ldi	r24, 0xF3	; 243
    5a18:	91 e0       	ldi	r25, 0x01	; 1
    5a1a:	21 50       	subi	r18, 0x01	; 1
    5a1c:	80 40       	sbci	r24, 0x00	; 0
    5a1e:	90 40       	sbci	r25, 0x00	; 0
    5a20:	e1 f7       	brne	.-8      	; 0x5a1a <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    5a22:	00 c0       	rjmp	.+0      	; 0x5a24 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    5a24:	00 00       	nop
    5a26:	08 95       	ret

00005a28 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    5a28:	cf 93       	push	r28
    5a2a:	df 93       	push	r29
    5a2c:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5a2e:	0e 94 a5 2c 	call	0x594a	; 0x594a <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5a32:	ce 01       	movw	r24, r28
    5a34:	0e 94 b6 2c 	call	0x596c	; 0x596c <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    5a38:	df 91       	pop	r29
    5a3a:	cf 91       	pop	r28
    5a3c:	08 95       	ret

00005a3e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5a3e:	fc 01       	movw	r30, r24
    5a40:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5a42:	e0 e0       	ldi	r30, 0x00	; 0
    5a44:	f8 e0       	ldi	r31, 0x08	; 8
    5a46:	80 81       	ld	r24, Z
    5a48:	80 7f       	andi	r24, 0xF0	; 240
    5a4a:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5a4c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5a4e:	10 a2       	std	Z+32, r1	; 0x20
    5a50:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5a52:	10 a6       	std	Z+40, r1	; 0x28
    5a54:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    5a56:	12 a6       	std	Z+42, r1	; 0x2a
    5a58:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    5a5a:	14 a6       	std	Z+44, r1	; 0x2c
    5a5c:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5a5e:	16 a6       	std	Z+46, r1	; 0x2e
    5a60:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5a62:	16 a2       	std	Z+38, r1	; 0x26
    5a64:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5a66:	81 81       	ldd	r24, Z+1	; 0x01
    5a68:	88 7f       	andi	r24, 0xF8	; 248
    5a6a:	68 2b       	or	r22, r24
    5a6c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5a6e:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5a70:	17 82       	std	Z+7, r1	; 0x07
    5a72:	08 95       	ret

00005a74 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5a74:	e0 e0       	ldi	r30, 0x00	; 0
    5a76:	f8 e0       	ldi	r31, 0x08	; 8
    5a78:	66 a3       	std	Z+38, r22	; 0x26
    5a7a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5a7c:	20 81       	ld	r18, Z
    5a7e:	20 7f       	andi	r18, 0xF0	; 240
    5a80:	dc 01       	movw	r26, r24
    5a82:	12 96       	adiw	r26, 0x02	; 2
    5a84:	9c 91       	ld	r25, X
    5a86:	82 2f       	mov	r24, r18
    5a88:	89 2b       	or	r24, r25
    5a8a:	80 83       	st	Z, r24
    5a8c:	08 95       	ret

00005a8e <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5a8e:	e0 e0       	ldi	r30, 0x00	; 0
    5a90:	f8 e0       	ldi	r31, 0x08	; 8
    5a92:	80 81       	ld	r24, Z
    5a94:	80 7f       	andi	r24, 0xF0	; 240
    5a96:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    5a98:	10 a2       	std	Z+32, r1	; 0x20
    5a9a:	11 a2       	std	Z+33, r1	; 0x21
    5a9c:	08 95       	ret

00005a9e <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5a9e:	e0 e0       	ldi	r30, 0x00	; 0
    5aa0:	f8 e0       	ldi	r31, 0x08	; 8
    5aa2:	81 81       	ldd	r24, Z+1	; 0x01
    5aa4:	8f 70       	andi	r24, 0x0F	; 15
    5aa6:	68 2b       	or	r22, r24
    5aa8:	61 83       	std	Z+1, r22	; 0x01
    5aaa:	08 95       	ret

00005aac <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5aac:	e0 e0       	ldi	r30, 0x00	; 0
    5aae:	f8 e0       	ldi	r31, 0x08	; 8
    5ab0:	81 81       	ldd	r24, Z+1	; 0x01
    5ab2:	60 95       	com	r22
    5ab4:	68 23       	and	r22, r24
    5ab6:	61 83       	std	Z+1, r22	; 0x01
    5ab8:	08 95       	ret

00005aba <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    5aba:	60 93 26 08 	sts	0x0826, r22
    5abe:	70 93 27 08 	sts	0x0827, r23
    5ac2:	08 95       	ret

00005ac4 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5ac4:	60 93 28 08 	sts	0x0828, r22
    5ac8:	70 93 29 08 	sts	0x0829, r23
    5acc:	08 95       	ret

00005ace <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    5ace:	60 93 2a 08 	sts	0x082A, r22
    5ad2:	70 93 2b 08 	sts	0x082B, r23
    5ad6:	08 95       	ret

00005ad8 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    5ad8:	60 93 2c 08 	sts	0x082C, r22
    5adc:	70 93 2d 08 	sts	0x082D, r23
    5ae0:	08 95       	ret

00005ae2 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    5ae2:	60 93 2e 08 	sts	0x082E, r22
    5ae6:	70 93 2f 08 	sts	0x082F, r23
    5aea:	08 95       	ret

00005aec <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5aec:	61 15       	cp	r22, r1
    5aee:	71 05       	cpc	r23, r1
    5af0:	29 f0       	breq	.+10     	; 0x5afc <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5af2:	e0 e0       	ldi	r30, 0x00	; 0
    5af4:	f8 e0       	ldi	r31, 0x08	; 8
    5af6:	86 81       	ldd	r24, Z+6	; 0x06
    5af8:	28 2b       	or	r18, r24
    5afa:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    5afc:	60 93 cc 22 	sts	0x22CC, r22
    5b00:	70 93 cd 22 	sts	0x22CD, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    5b04:	40 93 c2 23 	sts	0x23C2, r20
    5b08:	50 93 c3 23 	sts	0x23C3, r21
    5b0c:	08 95       	ret

00005b0e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5b0e:	61 15       	cp	r22, r1
    5b10:	71 05       	cpc	r23, r1
    5b12:	29 f0       	breq	.+10     	; 0x5b1e <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5b14:	e0 e0       	ldi	r30, 0x00	; 0
    5b16:	f8 e0       	ldi	r31, 0x08	; 8
    5b18:	86 81       	ldd	r24, Z+6	; 0x06
    5b1a:	28 2b       	or	r18, r24
    5b1c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    5b1e:	60 93 ce 22 	sts	0x22CE, r22
    5b22:	70 93 cf 22 	sts	0x22CF, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    5b26:	40 93 c4 23 	sts	0x23C4, r20
    5b2a:	50 93 c5 23 	sts	0x23C5, r21
    5b2e:	08 95       	ret

00005b30 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5b30:	61 15       	cp	r22, r1
    5b32:	71 05       	cpc	r23, r1
    5b34:	29 f0       	breq	.+10     	; 0x5b40 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5b36:	e0 e0       	ldi	r30, 0x00	; 0
    5b38:	f8 e0       	ldi	r31, 0x08	; 8
    5b3a:	87 81       	ldd	r24, Z+7	; 0x07
    5b3c:	28 2b       	or	r18, r24
    5b3e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5b40:	60 93 d0 22 	sts	0x22D0, r22
    5b44:	70 93 d1 22 	sts	0x22D1, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5b48:	40 93 c6 23 	sts	0x23C6, r20
    5b4c:	50 93 c7 23 	sts	0x23C7, r21
    5b50:	08 95       	ret

00005b52 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5b52:	61 15       	cp	r22, r1
    5b54:	71 05       	cpc	r23, r1
    5b56:	29 f0       	breq	.+10     	; 0x5b62 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5b58:	e0 e0       	ldi	r30, 0x00	; 0
    5b5a:	f8 e0       	ldi	r31, 0x08	; 8
    5b5c:	87 81       	ldd	r24, Z+7	; 0x07
    5b5e:	28 2b       	or	r18, r24
    5b60:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5b62:	60 93 d2 22 	sts	0x22D2, r22
    5b66:	70 93 d3 22 	sts	0x22D3, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5b6a:	40 93 c8 23 	sts	0x23C8, r20
    5b6e:	50 93 c9 23 	sts	0x23C9, r21
    5b72:	08 95       	ret

00005b74 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5b74:	61 15       	cp	r22, r1
    5b76:	71 05       	cpc	r23, r1
    5b78:	29 f0       	breq	.+10     	; 0x5b84 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5b7a:	e0 e0       	ldi	r30, 0x00	; 0
    5b7c:	f8 e0       	ldi	r31, 0x08	; 8
    5b7e:	87 81       	ldd	r24, Z+7	; 0x07
    5b80:	28 2b       	or	r18, r24
    5b82:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5b84:	60 93 d4 22 	sts	0x22D4, r22
    5b88:	70 93 d5 22 	sts	0x22D5, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5b8c:	40 93 ca 23 	sts	0x23CA, r20
    5b90:	50 93 cb 23 	sts	0x23CB, r21
    5b94:	08 95       	ret

00005b96 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5b96:	61 15       	cp	r22, r1
    5b98:	71 05       	cpc	r23, r1
    5b9a:	29 f0       	breq	.+10     	; 0x5ba6 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5b9c:	e0 e0       	ldi	r30, 0x00	; 0
    5b9e:	f8 e0       	ldi	r31, 0x08	; 8
    5ba0:	87 81       	ldd	r24, Z+7	; 0x07
    5ba2:	28 2b       	or	r18, r24
    5ba4:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5ba6:	60 93 d6 22 	sts	0x22D6, r22
    5baa:	70 93 d7 22 	sts	0x22D7, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5bae:	40 93 cc 23 	sts	0x23CC, r20
    5bb2:	50 93 cd 23 	sts	0x23CD, r21
    5bb6:	08 95       	ret

00005bb8 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	ec 01       	movw	r28, r24
    5bbe:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6CTimerC1Ev>
    5bc2:	86 e0       	ldi	r24, 0x06	; 6
    5bc4:	92 e2       	ldi	r25, 0x22	; 34
    5bc6:	88 83       	st	Y, r24
    5bc8:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5bca:	df 91       	pop	r29
    5bcc:	cf 91       	pop	r28
    5bce:	08 95       	ret

00005bd0 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5bd0:	26 e0       	ldi	r18, 0x06	; 6
    5bd2:	32 e2       	ldi	r19, 0x22	; 34
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	20 83       	st	Z, r18
    5bd8:	31 83       	std	Z+1, r19	; 0x01
    5bda:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN6CTimerD1Ev>
    5bde:	08 95       	ret

00005be0 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5be0:	fc 01       	movw	r30, r24
    5be2:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5be4:	e0 e4       	ldi	r30, 0x40	; 64
    5be6:	f8 e0       	ldi	r31, 0x08	; 8
    5be8:	80 81       	ld	r24, Z
    5bea:	80 7f       	andi	r24, 0xF0	; 240
    5bec:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5bee:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5bf0:	10 a2       	std	Z+32, r1	; 0x20
    5bf2:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5bf4:	10 a6       	std	Z+40, r1	; 0x28
    5bf6:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5bf8:	12 a6       	std	Z+42, r1	; 0x2a
    5bfa:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5bfc:	16 a2       	std	Z+38, r1	; 0x26
    5bfe:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5c00:	81 81       	ldd	r24, Z+1	; 0x01
    5c02:	88 7f       	andi	r24, 0xF8	; 248
    5c04:	68 2b       	or	r22, r24
    5c06:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5c08:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5c0a:	17 82       	std	Z+7, r1	; 0x07
    5c0c:	08 95       	ret

00005c0e <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5c0e:	e0 e4       	ldi	r30, 0x40	; 64
    5c10:	f8 e0       	ldi	r31, 0x08	; 8
    5c12:	66 a3       	std	Z+38, r22	; 0x26
    5c14:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5c16:	20 81       	ld	r18, Z
    5c18:	20 7f       	andi	r18, 0xF0	; 240
    5c1a:	dc 01       	movw	r26, r24
    5c1c:	12 96       	adiw	r26, 0x02	; 2
    5c1e:	9c 91       	ld	r25, X
    5c20:	82 2f       	mov	r24, r18
    5c22:	89 2b       	or	r24, r25
    5c24:	80 83       	st	Z, r24
    5c26:	08 95       	ret

00005c28 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5c28:	e0 e4       	ldi	r30, 0x40	; 64
    5c2a:	f8 e0       	ldi	r31, 0x08	; 8
    5c2c:	80 81       	ld	r24, Z
    5c2e:	80 7f       	andi	r24, 0xF0	; 240
    5c30:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5c32:	10 a2       	std	Z+32, r1	; 0x20
    5c34:	11 a2       	std	Z+33, r1	; 0x21
    5c36:	08 95       	ret

00005c38 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5c38:	e0 e4       	ldi	r30, 0x40	; 64
    5c3a:	f8 e0       	ldi	r31, 0x08	; 8
    5c3c:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5c3e:	80 81       	ld	r24, Z
    5c40:	80 7f       	andi	r24, 0xF0	; 240
    5c42:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5c44:	10 a2       	std	Z+32, r1	; 0x20
    5c46:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5c48:	90 83       	st	Z, r25
    5c4a:	08 95       	ret

00005c4c <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5c4c:	e0 e4       	ldi	r30, 0x40	; 64
    5c4e:	f8 e0       	ldi	r31, 0x08	; 8
    5c50:	81 81       	ldd	r24, Z+1	; 0x01
    5c52:	8f 70       	andi	r24, 0x0F	; 15
    5c54:	68 2b       	or	r22, r24
    5c56:	61 83       	std	Z+1, r22	; 0x01
    5c58:	08 95       	ret

00005c5a <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5c5a:	e0 e4       	ldi	r30, 0x40	; 64
    5c5c:	f8 e0       	ldi	r31, 0x08	; 8
    5c5e:	81 81       	ldd	r24, Z+1	; 0x01
    5c60:	60 95       	com	r22
    5c62:	68 23       	and	r22, r24
    5c64:	61 83       	std	Z+1, r22	; 0x01
    5c66:	08 95       	ret

00005c68 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5c68:	60 93 66 08 	sts	0x0866, r22
    5c6c:	70 93 67 08 	sts	0x0867, r23
    5c70:	08 95       	ret

00005c72 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5c72:	60 93 68 08 	sts	0x0868, r22
    5c76:	70 93 69 08 	sts	0x0869, r23
    5c7a:	08 95       	ret

00005c7c <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5c7c:	60 93 6a 08 	sts	0x086A, r22
    5c80:	70 93 6b 08 	sts	0x086B, r23
    5c84:	08 95       	ret

00005c86 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5c86:	61 15       	cp	r22, r1
    5c88:	71 05       	cpc	r23, r1
    5c8a:	31 f0       	breq	.+12     	; 0x5c98 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5c8c:	e0 e4       	ldi	r30, 0x40	; 64
    5c8e:	f8 e0       	ldi	r31, 0x08	; 8
    5c90:	86 81       	ldd	r24, Z+6	; 0x06
    5c92:	83 70       	andi	r24, 0x03	; 3
    5c94:	28 2b       	or	r18, r24
    5c96:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5c98:	60 93 d8 22 	sts	0x22D8, r22
    5c9c:	70 93 d9 22 	sts	0x22D9, r23
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5ca0:	40 93 ce 23 	sts	0x23CE, r20
    5ca4:	50 93 cf 23 	sts	0x23CF, r21
    5ca8:	08 95       	ret

00005caa <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5caa:	61 15       	cp	r22, r1
    5cac:	71 05       	cpc	r23, r1
    5cae:	31 f0       	breq	.+12     	; 0x5cbc <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5cb0:	e0 e4       	ldi	r30, 0x40	; 64
    5cb2:	f8 e0       	ldi	r31, 0x08	; 8
    5cb4:	86 81       	ldd	r24, Z+6	; 0x06
    5cb6:	8c 70       	andi	r24, 0x0C	; 12
    5cb8:	28 2b       	or	r18, r24
    5cba:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5cbc:	60 93 da 22 	sts	0x22DA, r22
    5cc0:	70 93 db 22 	sts	0x22DB, r23
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5cc4:	40 93 d0 23 	sts	0x23D0, r20
    5cc8:	50 93 d1 23 	sts	0x23D1, r21
    5ccc:	08 95       	ret

00005cce <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5cce:	61 15       	cp	r22, r1
    5cd0:	71 05       	cpc	r23, r1
    5cd2:	31 f0       	breq	.+12     	; 0x5ce0 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5cd4:	e0 e4       	ldi	r30, 0x40	; 64
    5cd6:	f8 e0       	ldi	r31, 0x08	; 8
    5cd8:	87 81       	ldd	r24, Z+7	; 0x07
    5cda:	83 70       	andi	r24, 0x03	; 3
    5cdc:	28 2b       	or	r18, r24
    5cde:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5ce0:	60 93 dc 22 	sts	0x22DC, r22
    5ce4:	70 93 dd 22 	sts	0x22DD, r23
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5ce8:	40 93 d2 23 	sts	0x23D2, r20
    5cec:	50 93 d3 23 	sts	0x23D3, r21
    5cf0:	08 95       	ret

00005cf2 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5cf2:	61 15       	cp	r22, r1
    5cf4:	71 05       	cpc	r23, r1
    5cf6:	31 f0       	breq	.+12     	; 0x5d04 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5cf8:	e0 e4       	ldi	r30, 0x40	; 64
    5cfa:	f8 e0       	ldi	r31, 0x08	; 8
    5cfc:	87 81       	ldd	r24, Z+7	; 0x07
    5cfe:	8c 70       	andi	r24, 0x0C	; 12
    5d00:	28 2b       	or	r18, r24
    5d02:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5d04:	60 93 de 22 	sts	0x22DE, r22
    5d08:	70 93 df 22 	sts	0x22DF, r23
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5d0c:	40 93 d4 23 	sts	0x23D4, r20
    5d10:	50 93 d5 23 	sts	0x23D5, r21
    5d14:	08 95       	ret

00005d16 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5d16:	cf 93       	push	r28
    5d18:	df 93       	push	r29
    5d1a:	ec 01       	movw	r28, r24
    5d1c:	0e 94 49 11 	call	0x2292	; 0x2292 <_ZN7CTimer1C1Ev>
    5d20:	8a e2       	ldi	r24, 0x2A	; 42
    5d22:	92 e2       	ldi	r25, 0x22	; 34
    5d24:	88 83       	st	Y, r24
    5d26:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5d28:	df 91       	pop	r29
    5d2a:	cf 91       	pop	r28
    5d2c:	08 95       	ret

00005d2e <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5d2e:	2a e2       	ldi	r18, 0x2A	; 42
    5d30:	32 e2       	ldi	r19, 0x22	; 34
    5d32:	fc 01       	movw	r30, r24
    5d34:	20 83       	st	Z, r18
    5d36:	31 83       	std	Z+1, r19	; 0x01
    5d38:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN7CTimer1D1Ev>
    5d3c:	08 95       	ret

00005d3e <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5d3e:	fc 01       	movw	r30, r24
    5d40:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d42:	e0 e0       	ldi	r30, 0x00	; 0
    5d44:	f9 e0       	ldi	r31, 0x09	; 9
    5d46:	80 81       	ld	r24, Z
    5d48:	80 7f       	andi	r24, 0xF0	; 240
    5d4a:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5d4c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5d4e:	10 a2       	std	Z+32, r1	; 0x20
    5d50:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    5d52:	10 a6       	std	Z+40, r1	; 0x28
    5d54:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    5d56:	12 a6       	std	Z+42, r1	; 0x2a
    5d58:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    5d5a:	14 a6       	std	Z+44, r1	; 0x2c
    5d5c:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    5d5e:	16 a6       	std	Z+46, r1	; 0x2e
    5d60:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    5d62:	16 a2       	std	Z+38, r1	; 0x26
    5d64:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5d66:	81 81       	ldd	r24, Z+1	; 0x01
    5d68:	88 7f       	andi	r24, 0xF8	; 248
    5d6a:	68 2b       	or	r22, r24
    5d6c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5d6e:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5d70:	17 82       	std	Z+7, r1	; 0x07
    5d72:	08 95       	ret

00005d74 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    5d74:	e0 e0       	ldi	r30, 0x00	; 0
    5d76:	f9 e0       	ldi	r31, 0x09	; 9
    5d78:	66 a3       	std	Z+38, r22	; 0x26
    5d7a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5d7c:	20 81       	ld	r18, Z
    5d7e:	20 7f       	andi	r18, 0xF0	; 240
    5d80:	dc 01       	movw	r26, r24
    5d82:	12 96       	adiw	r26, 0x02	; 2
    5d84:	9c 91       	ld	r25, X
    5d86:	82 2f       	mov	r24, r18
    5d88:	89 2b       	or	r24, r25
    5d8a:	80 83       	st	Z, r24
    5d8c:	08 95       	ret

00005d8e <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d8e:	e0 e0       	ldi	r30, 0x00	; 0
    5d90:	f9 e0       	ldi	r31, 0x09	; 9
    5d92:	80 81       	ld	r24, Z
    5d94:	80 7f       	andi	r24, 0xF0	; 240
    5d96:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    5d98:	10 a2       	std	Z+32, r1	; 0x20
    5d9a:	11 a2       	std	Z+33, r1	; 0x21
    5d9c:	08 95       	ret

00005d9e <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    5d9e:	e0 e0       	ldi	r30, 0x00	; 0
    5da0:	f9 e0       	ldi	r31, 0x09	; 9
    5da2:	81 81       	ldd	r24, Z+1	; 0x01
    5da4:	8f 70       	andi	r24, 0x0F	; 15
    5da6:	68 2b       	or	r22, r24
    5da8:	61 83       	std	Z+1, r22	; 0x01
    5daa:	08 95       	ret

00005dac <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    5dac:	e0 e0       	ldi	r30, 0x00	; 0
    5dae:	f9 e0       	ldi	r31, 0x09	; 9
    5db0:	81 81       	ldd	r24, Z+1	; 0x01
    5db2:	60 95       	com	r22
    5db4:	68 23       	and	r22, r24
    5db6:	61 83       	std	Z+1, r22	; 0x01
    5db8:	08 95       	ret

00005dba <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    5dba:	60 93 26 09 	sts	0x0926, r22
    5dbe:	70 93 27 09 	sts	0x0927, r23
    5dc2:	08 95       	ret

00005dc4 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    5dc4:	60 93 28 09 	sts	0x0928, r22
    5dc8:	70 93 29 09 	sts	0x0929, r23
    5dcc:	08 95       	ret

00005dce <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    5dce:	60 93 2a 09 	sts	0x092A, r22
    5dd2:	70 93 2b 09 	sts	0x092B, r23
    5dd6:	08 95       	ret

00005dd8 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    5dd8:	60 93 2c 09 	sts	0x092C, r22
    5ddc:	70 93 2d 09 	sts	0x092D, r23
    5de0:	08 95       	ret

00005de2 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    5de2:	60 93 2e 09 	sts	0x092E, r22
    5de6:	70 93 2f 09 	sts	0x092F, r23
    5dea:	08 95       	ret

00005dec <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5dec:	61 15       	cp	r22, r1
    5dee:	71 05       	cpc	r23, r1
    5df0:	29 f0       	breq	.+10     	; 0x5dfc <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5df2:	e0 e0       	ldi	r30, 0x00	; 0
    5df4:	f9 e0       	ldi	r31, 0x09	; 9
    5df6:	86 81       	ldd	r24, Z+6	; 0x06
    5df8:	28 2b       	or	r18, r24
    5dfa:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    5dfc:	60 93 4a 23 	sts	0x234A, r22
    5e00:	70 93 4b 23 	sts	0x234B, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    5e04:	40 93 40 24 	sts	0x2440, r20
    5e08:	50 93 41 24 	sts	0x2441, r21
    5e0c:	08 95       	ret

00005e0e <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5e0e:	61 15       	cp	r22, r1
    5e10:	71 05       	cpc	r23, r1
    5e12:	29 f0       	breq	.+10     	; 0x5e1e <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5e14:	e0 e0       	ldi	r30, 0x00	; 0
    5e16:	f9 e0       	ldi	r31, 0x09	; 9
    5e18:	86 81       	ldd	r24, Z+6	; 0x06
    5e1a:	28 2b       	or	r18, r24
    5e1c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    5e1e:	60 93 4c 23 	sts	0x234C, r22
    5e22:	70 93 4d 23 	sts	0x234D, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    5e26:	40 93 42 24 	sts	0x2442, r20
    5e2a:	50 93 43 24 	sts	0x2443, r21
    5e2e:	08 95       	ret

00005e30 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5e30:	61 15       	cp	r22, r1
    5e32:	71 05       	cpc	r23, r1
    5e34:	29 f0       	breq	.+10     	; 0x5e40 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5e36:	e0 e0       	ldi	r30, 0x00	; 0
    5e38:	f9 e0       	ldi	r31, 0x09	; 9
    5e3a:	87 81       	ldd	r24, Z+7	; 0x07
    5e3c:	28 2b       	or	r18, r24
    5e3e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    5e40:	60 93 4e 23 	sts	0x234E, r22
    5e44:	70 93 4f 23 	sts	0x234F, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    5e48:	40 93 44 24 	sts	0x2444, r20
    5e4c:	50 93 45 24 	sts	0x2445, r21
    5e50:	08 95       	ret

00005e52 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5e52:	61 15       	cp	r22, r1
    5e54:	71 05       	cpc	r23, r1
    5e56:	29 f0       	breq	.+10     	; 0x5e62 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5e58:	e0 e0       	ldi	r30, 0x00	; 0
    5e5a:	f9 e0       	ldi	r31, 0x09	; 9
    5e5c:	87 81       	ldd	r24, Z+7	; 0x07
    5e5e:	28 2b       	or	r18, r24
    5e60:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    5e62:	60 93 50 23 	sts	0x2350, r22
    5e66:	70 93 51 23 	sts	0x2351, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    5e6a:	40 93 46 24 	sts	0x2446, r20
    5e6e:	50 93 47 24 	sts	0x2447, r21
    5e72:	08 95       	ret

00005e74 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5e74:	61 15       	cp	r22, r1
    5e76:	71 05       	cpc	r23, r1
    5e78:	29 f0       	breq	.+10     	; 0x5e84 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5e7a:	e0 e0       	ldi	r30, 0x00	; 0
    5e7c:	f9 e0       	ldi	r31, 0x09	; 9
    5e7e:	87 81       	ldd	r24, Z+7	; 0x07
    5e80:	28 2b       	or	r18, r24
    5e82:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    5e84:	60 93 52 23 	sts	0x2352, r22
    5e88:	70 93 53 23 	sts	0x2353, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    5e8c:	40 93 48 24 	sts	0x2448, r20
    5e90:	50 93 49 24 	sts	0x2449, r21
    5e94:	08 95       	ret

00005e96 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5e96:	61 15       	cp	r22, r1
    5e98:	71 05       	cpc	r23, r1
    5e9a:	29 f0       	breq	.+10     	; 0x5ea6 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5e9c:	e0 e0       	ldi	r30, 0x00	; 0
    5e9e:	f9 e0       	ldi	r31, 0x09	; 9
    5ea0:	87 81       	ldd	r24, Z+7	; 0x07
    5ea2:	28 2b       	or	r18, r24
    5ea4:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    5ea6:	60 93 54 23 	sts	0x2354, r22
    5eaa:	70 93 55 23 	sts	0x2355, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    5eae:	40 93 4a 24 	sts	0x244A, r20
    5eb2:	50 93 4b 24 	sts	0x244B, r21
    5eb6:	08 95       	ret

00005eb8 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
    5ebc:	ec 01       	movw	r28, r24
    5ebe:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6CTimerC1Ev>
    5ec2:	88 e4       	ldi	r24, 0x48	; 72
    5ec4:	92 e2       	ldi	r25, 0x22	; 34
    5ec6:	88 83       	st	Y, r24
    5ec8:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    5eca:	df 91       	pop	r29
    5ecc:	cf 91       	pop	r28
    5ece:	08 95       	ret

00005ed0 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    5ed0:	28 e4       	ldi	r18, 0x48	; 72
    5ed2:	32 e2       	ldi	r19, 0x22	; 34
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	20 83       	st	Z, r18
    5ed8:	31 83       	std	Z+1, r19	; 0x01
    5eda:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN6CTimerD1Ev>
    5ede:	08 95       	ret

00005ee0 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5ee0:	fc 01       	movw	r30, r24
    5ee2:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ee4:	e0 e4       	ldi	r30, 0x40	; 64
    5ee6:	f9 e0       	ldi	r31, 0x09	; 9
    5ee8:	80 81       	ld	r24, Z
    5eea:	80 7f       	andi	r24, 0xF0	; 240
    5eec:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5eee:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    5ef0:	10 a2       	std	Z+32, r1	; 0x20
    5ef2:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    5ef4:	10 a6       	std	Z+40, r1	; 0x28
    5ef6:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    5ef8:	12 a6       	std	Z+42, r1	; 0x2a
    5efa:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    5efc:	16 a2       	std	Z+38, r1	; 0x26
    5efe:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5f00:	81 81       	ldd	r24, Z+1	; 0x01
    5f02:	88 7f       	andi	r24, 0xF8	; 248
    5f04:	68 2b       	or	r22, r24
    5f06:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5f08:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5f0a:	17 82       	std	Z+7, r1	; 0x07
    5f0c:	08 95       	ret

00005f0e <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    5f0e:	e0 e4       	ldi	r30, 0x40	; 64
    5f10:	f9 e0       	ldi	r31, 0x09	; 9
    5f12:	66 a3       	std	Z+38, r22	; 0x26
    5f14:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5f16:	20 81       	ld	r18, Z
    5f18:	20 7f       	andi	r18, 0xF0	; 240
    5f1a:	dc 01       	movw	r26, r24
    5f1c:	12 96       	adiw	r26, 0x02	; 2
    5f1e:	9c 91       	ld	r25, X
    5f20:	82 2f       	mov	r24, r18
    5f22:	89 2b       	or	r24, r25
    5f24:	80 83       	st	Z, r24
    5f26:	08 95       	ret

00005f28 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5f28:	e0 e4       	ldi	r30, 0x40	; 64
    5f2a:	f9 e0       	ldi	r31, 0x09	; 9
    5f2c:	80 81       	ld	r24, Z
    5f2e:	80 7f       	andi	r24, 0xF0	; 240
    5f30:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    5f32:	10 a2       	std	Z+32, r1	; 0x20
    5f34:	11 a2       	std	Z+33, r1	; 0x21
    5f36:	08 95       	ret

00005f38 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    5f38:	e0 e4       	ldi	r30, 0x40	; 64
    5f3a:	f9 e0       	ldi	r31, 0x09	; 9
    5f3c:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5f3e:	80 81       	ld	r24, Z
    5f40:	80 7f       	andi	r24, 0xF0	; 240
    5f42:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    5f44:	10 a2       	std	Z+32, r1	; 0x20
    5f46:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    5f48:	90 83       	st	Z, r25
    5f4a:	08 95       	ret

00005f4c <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    5f4c:	e0 e4       	ldi	r30, 0x40	; 64
    5f4e:	f9 e0       	ldi	r31, 0x09	; 9
    5f50:	81 81       	ldd	r24, Z+1	; 0x01
    5f52:	8f 70       	andi	r24, 0x0F	; 15
    5f54:	68 2b       	or	r22, r24
    5f56:	61 83       	std	Z+1, r22	; 0x01
    5f58:	08 95       	ret

00005f5a <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    5f5a:	e0 e4       	ldi	r30, 0x40	; 64
    5f5c:	f9 e0       	ldi	r31, 0x09	; 9
    5f5e:	81 81       	ldd	r24, Z+1	; 0x01
    5f60:	60 95       	com	r22
    5f62:	68 23       	and	r22, r24
    5f64:	61 83       	std	Z+1, r22	; 0x01
    5f66:	08 95       	ret

00005f68 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    5f68:	60 93 66 09 	sts	0x0966, r22
    5f6c:	70 93 67 09 	sts	0x0967, r23
    5f70:	08 95       	ret

00005f72 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    5f72:	60 93 68 09 	sts	0x0968, r22
    5f76:	70 93 69 09 	sts	0x0969, r23
    5f7a:	08 95       	ret

00005f7c <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    5f7c:	60 93 6a 09 	sts	0x096A, r22
    5f80:	70 93 6b 09 	sts	0x096B, r23
    5f84:	08 95       	ret

00005f86 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5f86:	61 15       	cp	r22, r1
    5f88:	71 05       	cpc	r23, r1
    5f8a:	29 f0       	breq	.+10     	; 0x5f96 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5f8c:	e0 e4       	ldi	r30, 0x40	; 64
    5f8e:	f9 e0       	ldi	r31, 0x09	; 9
    5f90:	86 81       	ldd	r24, Z+6	; 0x06
    5f92:	28 2b       	or	r18, r24
    5f94:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    5f96:	60 93 56 23 	sts	0x2356, r22
    5f9a:	70 93 57 23 	sts	0x2357, r23
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    5f9e:	40 93 4c 24 	sts	0x244C, r20
    5fa2:	50 93 4d 24 	sts	0x244D, r21
    5fa6:	08 95       	ret

00005fa8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5fa8:	61 15       	cp	r22, r1
    5faa:	71 05       	cpc	r23, r1
    5fac:	29 f0       	breq	.+10     	; 0x5fb8 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5fae:	e0 e4       	ldi	r30, 0x40	; 64
    5fb0:	f9 e0       	ldi	r31, 0x09	; 9
    5fb2:	86 81       	ldd	r24, Z+6	; 0x06
    5fb4:	28 2b       	or	r18, r24
    5fb6:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    5fb8:	60 93 58 23 	sts	0x2358, r22
    5fbc:	70 93 59 23 	sts	0x2359, r23
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    5fc0:	40 93 4e 24 	sts	0x244E, r20
    5fc4:	50 93 4f 24 	sts	0x244F, r21
    5fc8:	08 95       	ret

00005fca <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5fca:	61 15       	cp	r22, r1
    5fcc:	71 05       	cpc	r23, r1
    5fce:	29 f0       	breq	.+10     	; 0x5fda <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5fd0:	e0 e4       	ldi	r30, 0x40	; 64
    5fd2:	f9 e0       	ldi	r31, 0x09	; 9
    5fd4:	87 81       	ldd	r24, Z+7	; 0x07
    5fd6:	28 2b       	or	r18, r24
    5fd8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    5fda:	60 93 5a 23 	sts	0x235A, r22
    5fde:	70 93 5b 23 	sts	0x235B, r23
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    5fe2:	40 93 50 24 	sts	0x2450, r20
    5fe6:	50 93 51 24 	sts	0x2451, r21
    5fea:	08 95       	ret

00005fec <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5fec:	61 15       	cp	r22, r1
    5fee:	71 05       	cpc	r23, r1
    5ff0:	29 f0       	breq	.+10     	; 0x5ffc <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5ff2:	e0 e4       	ldi	r30, 0x40	; 64
    5ff4:	f9 e0       	ldi	r31, 0x09	; 9
    5ff6:	87 81       	ldd	r24, Z+7	; 0x07
    5ff8:	28 2b       	or	r18, r24
    5ffa:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    5ffc:	60 93 5c 23 	sts	0x235C, r22
    6000:	70 93 5d 23 	sts	0x235D, r23
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    6004:	40 93 52 24 	sts	0x2452, r20
    6008:	50 93 53 24 	sts	0x2453, r21
    600c:	08 95       	ret

0000600e <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    600e:	cf 93       	push	r28
    6010:	df 93       	push	r29
    6012:	ec 01       	movw	r28, r24
    6014:	0e 94 49 11 	call	0x2292	; 0x2292 <_ZN7CTimer1C1Ev>
    6018:	8c e6       	ldi	r24, 0x6C	; 108
    601a:	92 e2       	ldi	r25, 0x22	; 34
    601c:	88 83       	st	Y, r24
    601e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    6020:	df 91       	pop	r29
    6022:	cf 91       	pop	r28
    6024:	08 95       	ret

00006026 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    6026:	2c e6       	ldi	r18, 0x6C	; 108
    6028:	32 e2       	ldi	r19, 0x22	; 34
    602a:	fc 01       	movw	r30, r24
    602c:	20 83       	st	Z, r18
    602e:	31 83       	std	Z+1, r19	; 0x01
    6030:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN7CTimer1D1Ev>
    6034:	08 95       	ret

00006036 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    6036:	fc 01       	movw	r30, r24
    6038:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    603a:	e0 e0       	ldi	r30, 0x00	; 0
    603c:	fb e0       	ldi	r31, 0x0B	; 11
    603e:	80 81       	ld	r24, Z
    6040:	80 7f       	andi	r24, 0xF0	; 240
    6042:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    6044:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    6046:	10 a2       	std	Z+32, r1	; 0x20
    6048:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    604a:	10 a6       	std	Z+40, r1	; 0x28
    604c:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    604e:	12 a6       	std	Z+42, r1	; 0x2a
    6050:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    6052:	14 a6       	std	Z+44, r1	; 0x2c
    6054:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    6056:	16 a6       	std	Z+46, r1	; 0x2e
    6058:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    605a:	16 a2       	std	Z+38, r1	; 0x26
    605c:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    605e:	81 81       	ldd	r24, Z+1	; 0x01
    6060:	88 7f       	andi	r24, 0xF8	; 248
    6062:	68 2b       	or	r22, r24
    6064:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    6066:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    6068:	17 82       	std	Z+7, r1	; 0x07
    606a:	08 95       	ret

0000606c <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    606c:	e0 e0       	ldi	r30, 0x00	; 0
    606e:	fb e0       	ldi	r31, 0x0B	; 11
    6070:	66 a3       	std	Z+38, r22	; 0x26
    6072:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    6074:	20 81       	ld	r18, Z
    6076:	20 7f       	andi	r18, 0xF0	; 240
    6078:	dc 01       	movw	r26, r24
    607a:	12 96       	adiw	r26, 0x02	; 2
    607c:	9c 91       	ld	r25, X
    607e:	82 2f       	mov	r24, r18
    6080:	89 2b       	or	r24, r25
    6082:	80 83       	st	Z, r24
    6084:	08 95       	ret

00006086 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6086:	e0 e0       	ldi	r30, 0x00	; 0
    6088:	fb e0       	ldi	r31, 0x0B	; 11
    608a:	80 81       	ld	r24, Z
    608c:	80 7f       	andi	r24, 0xF0	; 240
    608e:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    6090:	10 a2       	std	Z+32, r1	; 0x20
    6092:	11 a2       	std	Z+33, r1	; 0x21
    6094:	08 95       	ret

00006096 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    6096:	e0 e0       	ldi	r30, 0x00	; 0
    6098:	fb e0       	ldi	r31, 0x0B	; 11
    609a:	81 81       	ldd	r24, Z+1	; 0x01
    609c:	68 2b       	or	r22, r24
    609e:	61 83       	std	Z+1, r22	; 0x01
    60a0:	08 95       	ret

000060a2 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    60a2:	e0 e0       	ldi	r30, 0x00	; 0
    60a4:	fb e0       	ldi	r31, 0x0B	; 11
    60a6:	81 81       	ldd	r24, Z+1	; 0x01
    60a8:	60 95       	com	r22
    60aa:	68 23       	and	r22, r24
    60ac:	61 83       	std	Z+1, r22	; 0x01
    60ae:	08 95       	ret

000060b0 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    60b0:	e0 e0       	ldi	r30, 0x00	; 0
    60b2:	fb e0       	ldi	r31, 0x0B	; 11
    60b4:	82 81       	ldd	r24, Z+2	; 0x02
    60b6:	62 95       	swap	r22
    60b8:	6f 70       	andi	r22, 0x0F	; 15
    60ba:	68 2b       	or	r22, r24
    60bc:	62 83       	std	Z+2, r22	; 0x02
    60be:	08 95       	ret

000060c0 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    60c0:	e0 e0       	ldi	r30, 0x00	; 0
    60c2:	fb e0       	ldi	r31, 0x0B	; 11
    60c4:	82 81       	ldd	r24, Z+2	; 0x02
    60c6:	62 95       	swap	r22
    60c8:	6f 70       	andi	r22, 0x0F	; 15
    60ca:	60 95       	com	r22
    60cc:	68 23       	and	r22, r24
    60ce:	62 83       	std	Z+2, r22	; 0x02
    60d0:	08 95       	ret

000060d2 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    60d2:	60 93 26 0b 	sts	0x0B26, r22
    60d6:	70 93 27 0b 	sts	0x0B27, r23
    60da:	08 95       	ret

000060dc <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    60dc:	60 93 28 0b 	sts	0x0B28, r22
    60e0:	70 93 29 0b 	sts	0x0B29, r23
    60e4:	08 95       	ret

000060e6 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    60e6:	60 93 2a 0b 	sts	0x0B2A, r22
    60ea:	70 93 2b 0b 	sts	0x0B2B, r23
    60ee:	08 95       	ret

000060f0 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    60f0:	60 93 2c 0b 	sts	0x0B2C, r22
    60f4:	70 93 2d 0b 	sts	0x0B2D, r23
    60f8:	08 95       	ret

000060fa <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    60fa:	60 93 2e 0b 	sts	0x0B2E, r22
    60fe:	70 93 2f 0b 	sts	0x0B2F, r23
    6102:	08 95       	ret

00006104 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    6104:	61 15       	cp	r22, r1
    6106:	71 05       	cpc	r23, r1
    6108:	29 f0       	breq	.+10     	; 0x6114 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    610a:	e0 e0       	ldi	r30, 0x00	; 0
    610c:	fb e0       	ldi	r31, 0x0B	; 11
    610e:	86 81       	ldd	r24, Z+6	; 0x06
    6110:	28 2b       	or	r18, r24
    6112:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    6114:	60 93 88 23 	sts	0x2388, r22
    6118:	70 93 89 23 	sts	0x2389, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    611c:	40 93 7e 24 	sts	0x247E, r20
    6120:	50 93 7f 24 	sts	0x247F, r21
    6124:	08 95       	ret

00006126 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    6126:	61 15       	cp	r22, r1
    6128:	71 05       	cpc	r23, r1
    612a:	29 f0       	breq	.+10     	; 0x6136 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    612c:	e0 e0       	ldi	r30, 0x00	; 0
    612e:	fb e0       	ldi	r31, 0x0B	; 11
    6130:	86 81       	ldd	r24, Z+6	; 0x06
    6132:	28 2b       	or	r18, r24
    6134:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    6136:	60 93 8a 23 	sts	0x238A, r22
    613a:	70 93 8b 23 	sts	0x238B, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    613e:	40 93 80 24 	sts	0x2480, r20
    6142:	50 93 81 24 	sts	0x2481, r21
    6146:	08 95       	ret

00006148 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    6148:	61 15       	cp	r22, r1
    614a:	71 05       	cpc	r23, r1
    614c:	29 f0       	breq	.+10     	; 0x6158 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    614e:	e0 e0       	ldi	r30, 0x00	; 0
    6150:	fb e0       	ldi	r31, 0x0B	; 11
    6152:	87 81       	ldd	r24, Z+7	; 0x07
    6154:	28 2b       	or	r18, r24
    6156:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    6158:	60 93 8c 23 	sts	0x238C, r22
    615c:	70 93 8d 23 	sts	0x238D, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    6160:	40 93 82 24 	sts	0x2482, r20
    6164:	50 93 83 24 	sts	0x2483, r21
    6168:	08 95       	ret

0000616a <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    616a:	61 15       	cp	r22, r1
    616c:	71 05       	cpc	r23, r1
    616e:	29 f0       	breq	.+10     	; 0x617a <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    6170:	e0 e0       	ldi	r30, 0x00	; 0
    6172:	fb e0       	ldi	r31, 0x0B	; 11
    6174:	87 81       	ldd	r24, Z+7	; 0x07
    6176:	28 2b       	or	r18, r24
    6178:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    617a:	60 93 8e 23 	sts	0x238E, r22
    617e:	70 93 8f 23 	sts	0x238F, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    6182:	40 93 84 24 	sts	0x2484, r20
    6186:	50 93 85 24 	sts	0x2485, r21
    618a:	08 95       	ret

0000618c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    618c:	61 15       	cp	r22, r1
    618e:	71 05       	cpc	r23, r1
    6190:	29 f0       	breq	.+10     	; 0x619c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6192:	e0 e0       	ldi	r30, 0x00	; 0
    6194:	fb e0       	ldi	r31, 0x0B	; 11
    6196:	87 81       	ldd	r24, Z+7	; 0x07
    6198:	28 2b       	or	r18, r24
    619a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    619c:	60 93 90 23 	sts	0x2390, r22
    61a0:	70 93 91 23 	sts	0x2391, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    61a4:	40 93 86 24 	sts	0x2486, r20
    61a8:	50 93 87 24 	sts	0x2487, r21
    61ac:	08 95       	ret

000061ae <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    61ae:	61 15       	cp	r22, r1
    61b0:	71 05       	cpc	r23, r1
    61b2:	29 f0       	breq	.+10     	; 0x61be <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    61b4:	e0 e0       	ldi	r30, 0x00	; 0
    61b6:	fb e0       	ldi	r31, 0x0B	; 11
    61b8:	87 81       	ldd	r24, Z+7	; 0x07
    61ba:	28 2b       	or	r18, r24
    61bc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    61be:	60 93 92 23 	sts	0x2392, r22
    61c2:	70 93 93 23 	sts	0x2393, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    61c6:	40 93 88 24 	sts	0x2488, r20
    61ca:	50 93 89 24 	sts	0x2489, r21
    61ce:	08 95       	ret

000061d0 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
    61d4:	ec 01       	movw	r28, r24
    61d6:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6CTimerC1Ev>
    61da:	8a e8       	ldi	r24, 0x8A	; 138
    61dc:	92 e2       	ldi	r25, 0x22	; 34
    61de:	88 83       	st	Y, r24
    61e0:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    61e2:	df 91       	pop	r29
    61e4:	cf 91       	pop	r28
    61e6:	08 95       	ret

000061e8 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    61e8:	2a e8       	ldi	r18, 0x8A	; 138
    61ea:	32 e2       	ldi	r19, 0x22	; 34
    61ec:	fc 01       	movw	r30, r24
    61ee:	20 83       	st	Z, r18
    61f0:	31 83       	std	Z+1, r19	; 0x01
    61f2:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN6CTimerD1Ev>
    61f6:	08 95       	ret

000061f8 <__fixsfsi>:
    61f8:	0e 94 03 31 	call	0x6206	; 0x6206 <__fixunssfsi>
    61fc:	68 94       	set
    61fe:	b1 11       	cpse	r27, r1
    6200:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__fp_szero>
    6204:	08 95       	ret

00006206 <__fixunssfsi>:
    6206:	0e 94 77 31 	call	0x62ee	; 0x62ee <__fp_splitA>
    620a:	88 f0       	brcs	.+34     	; 0x622e <__fixunssfsi+0x28>
    620c:	9f 57       	subi	r25, 0x7F	; 127
    620e:	98 f0       	brcs	.+38     	; 0x6236 <__fixunssfsi+0x30>
    6210:	b9 2f       	mov	r27, r25
    6212:	99 27       	eor	r25, r25
    6214:	b7 51       	subi	r27, 0x17	; 23
    6216:	b0 f0       	brcs	.+44     	; 0x6244 <__fixunssfsi+0x3e>
    6218:	e1 f0       	breq	.+56     	; 0x6252 <__fixunssfsi+0x4c>
    621a:	66 0f       	add	r22, r22
    621c:	77 1f       	adc	r23, r23
    621e:	88 1f       	adc	r24, r24
    6220:	99 1f       	adc	r25, r25
    6222:	1a f0       	brmi	.+6      	; 0x622a <__fixunssfsi+0x24>
    6224:	ba 95       	dec	r27
    6226:	c9 f7       	brne	.-14     	; 0x621a <__fixunssfsi+0x14>
    6228:	14 c0       	rjmp	.+40     	; 0x6252 <__fixunssfsi+0x4c>
    622a:	b1 30       	cpi	r27, 0x01	; 1
    622c:	91 f0       	breq	.+36     	; 0x6252 <__fixunssfsi+0x4c>
    622e:	0e 94 91 31 	call	0x6322	; 0x6322 <__fp_zero>
    6232:	b1 e0       	ldi	r27, 0x01	; 1
    6234:	08 95       	ret
    6236:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_zero>
    623a:	67 2f       	mov	r22, r23
    623c:	78 2f       	mov	r23, r24
    623e:	88 27       	eor	r24, r24
    6240:	b8 5f       	subi	r27, 0xF8	; 248
    6242:	39 f0       	breq	.+14     	; 0x6252 <__fixunssfsi+0x4c>
    6244:	b9 3f       	cpi	r27, 0xF9	; 249
    6246:	cc f3       	brlt	.-14     	; 0x623a <__fixunssfsi+0x34>
    6248:	86 95       	lsr	r24
    624a:	77 95       	ror	r23
    624c:	67 95       	ror	r22
    624e:	b3 95       	inc	r27
    6250:	d9 f7       	brne	.-10     	; 0x6248 <__fixunssfsi+0x42>
    6252:	3e f4       	brtc	.+14     	; 0x6262 <__fixunssfsi+0x5c>
    6254:	90 95       	com	r25
    6256:	80 95       	com	r24
    6258:	70 95       	com	r23
    625a:	61 95       	neg	r22
    625c:	7f 4f       	sbci	r23, 0xFF	; 255
    625e:	8f 4f       	sbci	r24, 0xFF	; 255
    6260:	9f 4f       	sbci	r25, 0xFF	; 255
    6262:	08 95       	ret

00006264 <__floatunsisf>:
    6264:	e8 94       	clt
    6266:	09 c0       	rjmp	.+18     	; 0x627a <__floatsisf+0x12>

00006268 <__floatsisf>:
    6268:	97 fb       	bst	r25, 7
    626a:	3e f4       	brtc	.+14     	; 0x627a <__floatsisf+0x12>
    626c:	90 95       	com	r25
    626e:	80 95       	com	r24
    6270:	70 95       	com	r23
    6272:	61 95       	neg	r22
    6274:	7f 4f       	sbci	r23, 0xFF	; 255
    6276:	8f 4f       	sbci	r24, 0xFF	; 255
    6278:	9f 4f       	sbci	r25, 0xFF	; 255
    627a:	99 23       	and	r25, r25
    627c:	a9 f0       	breq	.+42     	; 0x62a8 <__floatsisf+0x40>
    627e:	f9 2f       	mov	r31, r25
    6280:	96 e9       	ldi	r25, 0x96	; 150
    6282:	bb 27       	eor	r27, r27
    6284:	93 95       	inc	r25
    6286:	f6 95       	lsr	r31
    6288:	87 95       	ror	r24
    628a:	77 95       	ror	r23
    628c:	67 95       	ror	r22
    628e:	b7 95       	ror	r27
    6290:	f1 11       	cpse	r31, r1
    6292:	f8 cf       	rjmp	.-16     	; 0x6284 <__floatsisf+0x1c>
    6294:	fa f4       	brpl	.+62     	; 0x62d4 <__floatsisf+0x6c>
    6296:	bb 0f       	add	r27, r27
    6298:	11 f4       	brne	.+4      	; 0x629e <__floatsisf+0x36>
    629a:	60 ff       	sbrs	r22, 0
    629c:	1b c0       	rjmp	.+54     	; 0x62d4 <__floatsisf+0x6c>
    629e:	6f 5f       	subi	r22, 0xFF	; 255
    62a0:	7f 4f       	sbci	r23, 0xFF	; 255
    62a2:	8f 4f       	sbci	r24, 0xFF	; 255
    62a4:	9f 4f       	sbci	r25, 0xFF	; 255
    62a6:	16 c0       	rjmp	.+44     	; 0x62d4 <__floatsisf+0x6c>
    62a8:	88 23       	and	r24, r24
    62aa:	11 f0       	breq	.+4      	; 0x62b0 <__floatsisf+0x48>
    62ac:	96 e9       	ldi	r25, 0x96	; 150
    62ae:	11 c0       	rjmp	.+34     	; 0x62d2 <__floatsisf+0x6a>
    62b0:	77 23       	and	r23, r23
    62b2:	21 f0       	breq	.+8      	; 0x62bc <__floatsisf+0x54>
    62b4:	9e e8       	ldi	r25, 0x8E	; 142
    62b6:	87 2f       	mov	r24, r23
    62b8:	76 2f       	mov	r23, r22
    62ba:	05 c0       	rjmp	.+10     	; 0x62c6 <__floatsisf+0x5e>
    62bc:	66 23       	and	r22, r22
    62be:	71 f0       	breq	.+28     	; 0x62dc <__floatsisf+0x74>
    62c0:	96 e8       	ldi	r25, 0x86	; 134
    62c2:	86 2f       	mov	r24, r22
    62c4:	70 e0       	ldi	r23, 0x00	; 0
    62c6:	60 e0       	ldi	r22, 0x00	; 0
    62c8:	2a f0       	brmi	.+10     	; 0x62d4 <__floatsisf+0x6c>
    62ca:	9a 95       	dec	r25
    62cc:	66 0f       	add	r22, r22
    62ce:	77 1f       	adc	r23, r23
    62d0:	88 1f       	adc	r24, r24
    62d2:	da f7       	brpl	.-10     	; 0x62ca <__floatsisf+0x62>
    62d4:	88 0f       	add	r24, r24
    62d6:	96 95       	lsr	r25
    62d8:	87 95       	ror	r24
    62da:	97 f9       	bld	r25, 7
    62dc:	08 95       	ret

000062de <__fp_split3>:
    62de:	57 fd       	sbrc	r21, 7
    62e0:	90 58       	subi	r25, 0x80	; 128
    62e2:	44 0f       	add	r20, r20
    62e4:	55 1f       	adc	r21, r21
    62e6:	59 f0       	breq	.+22     	; 0x62fe <__fp_splitA+0x10>
    62e8:	5f 3f       	cpi	r21, 0xFF	; 255
    62ea:	71 f0       	breq	.+28     	; 0x6308 <__fp_splitA+0x1a>
    62ec:	47 95       	ror	r20

000062ee <__fp_splitA>:
    62ee:	88 0f       	add	r24, r24
    62f0:	97 fb       	bst	r25, 7
    62f2:	99 1f       	adc	r25, r25
    62f4:	61 f0       	breq	.+24     	; 0x630e <__fp_splitA+0x20>
    62f6:	9f 3f       	cpi	r25, 0xFF	; 255
    62f8:	79 f0       	breq	.+30     	; 0x6318 <__fp_splitA+0x2a>
    62fa:	87 95       	ror	r24
    62fc:	08 95       	ret
    62fe:	12 16       	cp	r1, r18
    6300:	13 06       	cpc	r1, r19
    6302:	14 06       	cpc	r1, r20
    6304:	55 1f       	adc	r21, r21
    6306:	f2 cf       	rjmp	.-28     	; 0x62ec <__fp_split3+0xe>
    6308:	46 95       	lsr	r20
    630a:	f1 df       	rcall	.-30     	; 0x62ee <__fp_splitA>
    630c:	08 c0       	rjmp	.+16     	; 0x631e <__fp_splitA+0x30>
    630e:	16 16       	cp	r1, r22
    6310:	17 06       	cpc	r1, r23
    6312:	18 06       	cpc	r1, r24
    6314:	99 1f       	adc	r25, r25
    6316:	f1 cf       	rjmp	.-30     	; 0x62fa <__fp_splitA+0xc>
    6318:	86 95       	lsr	r24
    631a:	71 05       	cpc	r23, r1
    631c:	61 05       	cpc	r22, r1
    631e:	08 94       	sec
    6320:	08 95       	ret

00006322 <__fp_zero>:
    6322:	e8 94       	clt

00006324 <__fp_szero>:
    6324:	bb 27       	eor	r27, r27
    6326:	66 27       	eor	r22, r22
    6328:	77 27       	eor	r23, r23
    632a:	cb 01       	movw	r24, r22
    632c:	97 f9       	bld	r25, 7
    632e:	08 95       	ret

00006330 <__mulsf3>:
    6330:	0e 94 ab 31 	call	0x6356	; 0x6356 <__mulsf3x>
    6334:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__fp_round>
    6338:	0e 94 0e 32 	call	0x641c	; 0x641c <__fp_pscA>
    633c:	38 f0       	brcs	.+14     	; 0x634c <__mulsf3+0x1c>
    633e:	0e 94 15 32 	call	0x642a	; 0x642a <__fp_pscB>
    6342:	20 f0       	brcs	.+8      	; 0x634c <__mulsf3+0x1c>
    6344:	95 23       	and	r25, r21
    6346:	11 f0       	breq	.+4      	; 0x634c <__mulsf3+0x1c>
    6348:	0c 94 05 32 	jmp	0x640a	; 0x640a <__fp_inf>
    634c:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <__fp_nan>
    6350:	11 24       	eor	r1, r1
    6352:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__fp_szero>

00006356 <__mulsf3x>:
    6356:	0e 94 6f 31 	call	0x62de	; 0x62de <__fp_split3>
    635a:	70 f3       	brcs	.-36     	; 0x6338 <__mulsf3+0x8>

0000635c <__mulsf3_pse>:
    635c:	95 9f       	mul	r25, r21
    635e:	c1 f3       	breq	.-16     	; 0x6350 <__mulsf3+0x20>
    6360:	95 0f       	add	r25, r21
    6362:	50 e0       	ldi	r21, 0x00	; 0
    6364:	55 1f       	adc	r21, r21
    6366:	62 9f       	mul	r22, r18
    6368:	f0 01       	movw	r30, r0
    636a:	72 9f       	mul	r23, r18
    636c:	bb 27       	eor	r27, r27
    636e:	f0 0d       	add	r31, r0
    6370:	b1 1d       	adc	r27, r1
    6372:	63 9f       	mul	r22, r19
    6374:	aa 27       	eor	r26, r26
    6376:	f0 0d       	add	r31, r0
    6378:	b1 1d       	adc	r27, r1
    637a:	aa 1f       	adc	r26, r26
    637c:	64 9f       	mul	r22, r20
    637e:	66 27       	eor	r22, r22
    6380:	b0 0d       	add	r27, r0
    6382:	a1 1d       	adc	r26, r1
    6384:	66 1f       	adc	r22, r22
    6386:	82 9f       	mul	r24, r18
    6388:	22 27       	eor	r18, r18
    638a:	b0 0d       	add	r27, r0
    638c:	a1 1d       	adc	r26, r1
    638e:	62 1f       	adc	r22, r18
    6390:	73 9f       	mul	r23, r19
    6392:	b0 0d       	add	r27, r0
    6394:	a1 1d       	adc	r26, r1
    6396:	62 1f       	adc	r22, r18
    6398:	83 9f       	mul	r24, r19
    639a:	a0 0d       	add	r26, r0
    639c:	61 1d       	adc	r22, r1
    639e:	22 1f       	adc	r18, r18
    63a0:	74 9f       	mul	r23, r20
    63a2:	33 27       	eor	r19, r19
    63a4:	a0 0d       	add	r26, r0
    63a6:	61 1d       	adc	r22, r1
    63a8:	23 1f       	adc	r18, r19
    63aa:	84 9f       	mul	r24, r20
    63ac:	60 0d       	add	r22, r0
    63ae:	21 1d       	adc	r18, r1
    63b0:	82 2f       	mov	r24, r18
    63b2:	76 2f       	mov	r23, r22
    63b4:	6a 2f       	mov	r22, r26
    63b6:	11 24       	eor	r1, r1
    63b8:	9f 57       	subi	r25, 0x7F	; 127
    63ba:	50 40       	sbci	r21, 0x00	; 0
    63bc:	9a f0       	brmi	.+38     	; 0x63e4 <__mulsf3_pse+0x88>
    63be:	f1 f0       	breq	.+60     	; 0x63fc <__mulsf3_pse+0xa0>
    63c0:	88 23       	and	r24, r24
    63c2:	4a f0       	brmi	.+18     	; 0x63d6 <__mulsf3_pse+0x7a>
    63c4:	ee 0f       	add	r30, r30
    63c6:	ff 1f       	adc	r31, r31
    63c8:	bb 1f       	adc	r27, r27
    63ca:	66 1f       	adc	r22, r22
    63cc:	77 1f       	adc	r23, r23
    63ce:	88 1f       	adc	r24, r24
    63d0:	91 50       	subi	r25, 0x01	; 1
    63d2:	50 40       	sbci	r21, 0x00	; 0
    63d4:	a9 f7       	brne	.-22     	; 0x63c0 <__mulsf3_pse+0x64>
    63d6:	9e 3f       	cpi	r25, 0xFE	; 254
    63d8:	51 05       	cpc	r21, r1
    63da:	80 f0       	brcs	.+32     	; 0x63fc <__mulsf3_pse+0xa0>
    63dc:	0c 94 05 32 	jmp	0x640a	; 0x640a <__fp_inf>
    63e0:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__fp_szero>
    63e4:	5f 3f       	cpi	r21, 0xFF	; 255
    63e6:	e4 f3       	brlt	.-8      	; 0x63e0 <__mulsf3_pse+0x84>
    63e8:	98 3e       	cpi	r25, 0xE8	; 232
    63ea:	d4 f3       	brlt	.-12     	; 0x63e0 <__mulsf3_pse+0x84>
    63ec:	86 95       	lsr	r24
    63ee:	77 95       	ror	r23
    63f0:	67 95       	ror	r22
    63f2:	b7 95       	ror	r27
    63f4:	f7 95       	ror	r31
    63f6:	e7 95       	ror	r30
    63f8:	9f 5f       	subi	r25, 0xFF	; 255
    63fa:	c1 f7       	brne	.-16     	; 0x63ec <__mulsf3_pse+0x90>
    63fc:	fe 2b       	or	r31, r30
    63fe:	88 0f       	add	r24, r24
    6400:	91 1d       	adc	r25, r1
    6402:	96 95       	lsr	r25
    6404:	87 95       	ror	r24
    6406:	97 f9       	bld	r25, 7
    6408:	08 95       	ret

0000640a <__fp_inf>:
    640a:	97 f9       	bld	r25, 7
    640c:	9f 67       	ori	r25, 0x7F	; 127
    640e:	80 e8       	ldi	r24, 0x80	; 128
    6410:	70 e0       	ldi	r23, 0x00	; 0
    6412:	60 e0       	ldi	r22, 0x00	; 0
    6414:	08 95       	ret

00006416 <__fp_nan>:
    6416:	9f ef       	ldi	r25, 0xFF	; 255
    6418:	80 ec       	ldi	r24, 0xC0	; 192
    641a:	08 95       	ret

0000641c <__fp_pscA>:
    641c:	00 24       	eor	r0, r0
    641e:	0a 94       	dec	r0
    6420:	16 16       	cp	r1, r22
    6422:	17 06       	cpc	r1, r23
    6424:	18 06       	cpc	r1, r24
    6426:	09 06       	cpc	r0, r25
    6428:	08 95       	ret

0000642a <__fp_pscB>:
    642a:	00 24       	eor	r0, r0
    642c:	0a 94       	dec	r0
    642e:	12 16       	cp	r1, r18
    6430:	13 06       	cpc	r1, r19
    6432:	14 06       	cpc	r1, r20
    6434:	05 06       	cpc	r0, r21
    6436:	08 95       	ret

00006438 <__fp_round>:
    6438:	09 2e       	mov	r0, r25
    643a:	03 94       	inc	r0
    643c:	00 0c       	add	r0, r0
    643e:	11 f4       	brne	.+4      	; 0x6444 <__fp_round+0xc>
    6440:	88 23       	and	r24, r24
    6442:	52 f0       	brmi	.+20     	; 0x6458 <__fp_round+0x20>
    6444:	bb 0f       	add	r27, r27
    6446:	40 f4       	brcc	.+16     	; 0x6458 <__fp_round+0x20>
    6448:	bf 2b       	or	r27, r31
    644a:	11 f4       	brne	.+4      	; 0x6450 <__fp_round+0x18>
    644c:	60 ff       	sbrs	r22, 0
    644e:	04 c0       	rjmp	.+8      	; 0x6458 <__fp_round+0x20>
    6450:	6f 5f       	subi	r22, 0xFF	; 255
    6452:	7f 4f       	sbci	r23, 0xFF	; 255
    6454:	8f 4f       	sbci	r24, 0xFF	; 255
    6456:	9f 4f       	sbci	r25, 0xFF	; 255
    6458:	08 95       	ret

0000645a <__mulsi3>:
    645a:	db 01       	movw	r26, r22
    645c:	8f 93       	push	r24
    645e:	9f 93       	push	r25
    6460:	0e 94 bd 32 	call	0x657a	; 0x657a <__muluhisi3>
    6464:	bf 91       	pop	r27
    6466:	af 91       	pop	r26
    6468:	a2 9f       	mul	r26, r18
    646a:	80 0d       	add	r24, r0
    646c:	91 1d       	adc	r25, r1
    646e:	a3 9f       	mul	r26, r19
    6470:	90 0d       	add	r25, r0
    6472:	b2 9f       	mul	r27, r18
    6474:	90 0d       	add	r25, r0
    6476:	11 24       	eor	r1, r1
    6478:	08 95       	ret

0000647a <__udivmodhi4>:
    647a:	aa 1b       	sub	r26, r26
    647c:	bb 1b       	sub	r27, r27
    647e:	51 e1       	ldi	r21, 0x11	; 17
    6480:	07 c0       	rjmp	.+14     	; 0x6490 <__udivmodhi4_ep>

00006482 <__udivmodhi4_loop>:
    6482:	aa 1f       	adc	r26, r26
    6484:	bb 1f       	adc	r27, r27
    6486:	a6 17       	cp	r26, r22
    6488:	b7 07       	cpc	r27, r23
    648a:	10 f0       	brcs	.+4      	; 0x6490 <__udivmodhi4_ep>
    648c:	a6 1b       	sub	r26, r22
    648e:	b7 0b       	sbc	r27, r23

00006490 <__udivmodhi4_ep>:
    6490:	88 1f       	adc	r24, r24
    6492:	99 1f       	adc	r25, r25
    6494:	5a 95       	dec	r21
    6496:	a9 f7       	brne	.-22     	; 0x6482 <__udivmodhi4_loop>
    6498:	80 95       	com	r24
    649a:	90 95       	com	r25
    649c:	bc 01       	movw	r22, r24
    649e:	cd 01       	movw	r24, r26
    64a0:	08 95       	ret

000064a2 <__divmodhi4>:
    64a2:	97 fb       	bst	r25, 7
    64a4:	07 2e       	mov	r0, r23
    64a6:	16 f4       	brtc	.+4      	; 0x64ac <__divmodhi4+0xa>
    64a8:	00 94       	com	r0
    64aa:	07 d0       	rcall	.+14     	; 0x64ba <__divmodhi4_neg1>
    64ac:	77 fd       	sbrc	r23, 7
    64ae:	09 d0       	rcall	.+18     	; 0x64c2 <__divmodhi4_neg2>
    64b0:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodhi4>
    64b4:	07 fc       	sbrc	r0, 7
    64b6:	05 d0       	rcall	.+10     	; 0x64c2 <__divmodhi4_neg2>
    64b8:	3e f4       	brtc	.+14     	; 0x64c8 <__divmodhi4_exit>

000064ba <__divmodhi4_neg1>:
    64ba:	90 95       	com	r25
    64bc:	81 95       	neg	r24
    64be:	9f 4f       	sbci	r25, 0xFF	; 255
    64c0:	08 95       	ret

000064c2 <__divmodhi4_neg2>:
    64c2:	70 95       	com	r23
    64c4:	61 95       	neg	r22
    64c6:	7f 4f       	sbci	r23, 0xFF	; 255

000064c8 <__divmodhi4_exit>:
    64c8:	08 95       	ret

000064ca <__udivmodsi4>:
    64ca:	a1 e2       	ldi	r26, 0x21	; 33
    64cc:	1a 2e       	mov	r1, r26
    64ce:	aa 1b       	sub	r26, r26
    64d0:	bb 1b       	sub	r27, r27
    64d2:	fd 01       	movw	r30, r26
    64d4:	0d c0       	rjmp	.+26     	; 0x64f0 <__udivmodsi4_ep>

000064d6 <__udivmodsi4_loop>:
    64d6:	aa 1f       	adc	r26, r26
    64d8:	bb 1f       	adc	r27, r27
    64da:	ee 1f       	adc	r30, r30
    64dc:	ff 1f       	adc	r31, r31
    64de:	a2 17       	cp	r26, r18
    64e0:	b3 07       	cpc	r27, r19
    64e2:	e4 07       	cpc	r30, r20
    64e4:	f5 07       	cpc	r31, r21
    64e6:	20 f0       	brcs	.+8      	; 0x64f0 <__udivmodsi4_ep>
    64e8:	a2 1b       	sub	r26, r18
    64ea:	b3 0b       	sbc	r27, r19
    64ec:	e4 0b       	sbc	r30, r20
    64ee:	f5 0b       	sbc	r31, r21

000064f0 <__udivmodsi4_ep>:
    64f0:	66 1f       	adc	r22, r22
    64f2:	77 1f       	adc	r23, r23
    64f4:	88 1f       	adc	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	1a 94       	dec	r1
    64fa:	69 f7       	brne	.-38     	; 0x64d6 <__udivmodsi4_loop>
    64fc:	60 95       	com	r22
    64fe:	70 95       	com	r23
    6500:	80 95       	com	r24
    6502:	90 95       	com	r25
    6504:	9b 01       	movw	r18, r22
    6506:	ac 01       	movw	r20, r24
    6508:	bd 01       	movw	r22, r26
    650a:	cf 01       	movw	r24, r30
    650c:	08 95       	ret

0000650e <__divmodsi4>:
    650e:	05 2e       	mov	r0, r21
    6510:	97 fb       	bst	r25, 7
    6512:	1e f4       	brtc	.+6      	; 0x651a <__divmodsi4+0xc>
    6514:	00 94       	com	r0
    6516:	0e 94 9e 32 	call	0x653c	; 0x653c <__negsi2>
    651a:	57 fd       	sbrc	r21, 7
    651c:	07 d0       	rcall	.+14     	; 0x652c <__divmodsi4_neg2>
    651e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__udivmodsi4>
    6522:	07 fc       	sbrc	r0, 7
    6524:	03 d0       	rcall	.+6      	; 0x652c <__divmodsi4_neg2>
    6526:	4e f4       	brtc	.+18     	; 0x653a <__divmodsi4_exit>
    6528:	0c 94 9e 32 	jmp	0x653c	; 0x653c <__negsi2>

0000652c <__divmodsi4_neg2>:
    652c:	50 95       	com	r21
    652e:	40 95       	com	r20
    6530:	30 95       	com	r19
    6532:	21 95       	neg	r18
    6534:	3f 4f       	sbci	r19, 0xFF	; 255
    6536:	4f 4f       	sbci	r20, 0xFF	; 255
    6538:	5f 4f       	sbci	r21, 0xFF	; 255

0000653a <__divmodsi4_exit>:
    653a:	08 95       	ret

0000653c <__negsi2>:
    653c:	90 95       	com	r25
    653e:	80 95       	com	r24
    6540:	70 95       	com	r23
    6542:	61 95       	neg	r22
    6544:	7f 4f       	sbci	r23, 0xFF	; 255
    6546:	8f 4f       	sbci	r24, 0xFF	; 255
    6548:	9f 4f       	sbci	r25, 0xFF	; 255
    654a:	08 95       	ret

0000654c <__tablejump2__>:
    654c:	ee 0f       	add	r30, r30
    654e:	ff 1f       	adc	r31, r31
    6550:	88 1f       	adc	r24, r24
    6552:	8b bf       	out	0x3b, r24	; 59
    6554:	07 90       	elpm	r0, Z+
    6556:	f6 91       	elpm	r31, Z
    6558:	e0 2d       	mov	r30, r0
    655a:	19 94       	eijmp

0000655c <__umulhisi3>:
    655c:	a2 9f       	mul	r26, r18
    655e:	b0 01       	movw	r22, r0
    6560:	b3 9f       	mul	r27, r19
    6562:	c0 01       	movw	r24, r0
    6564:	a3 9f       	mul	r26, r19
    6566:	70 0d       	add	r23, r0
    6568:	81 1d       	adc	r24, r1
    656a:	11 24       	eor	r1, r1
    656c:	91 1d       	adc	r25, r1
    656e:	b2 9f       	mul	r27, r18
    6570:	70 0d       	add	r23, r0
    6572:	81 1d       	adc	r24, r1
    6574:	11 24       	eor	r1, r1
    6576:	91 1d       	adc	r25, r1
    6578:	08 95       	ret

0000657a <__muluhisi3>:
    657a:	0e 94 ae 32 	call	0x655c	; 0x655c <__umulhisi3>
    657e:	a5 9f       	mul	r26, r21
    6580:	90 0d       	add	r25, r0
    6582:	b4 9f       	mul	r27, r20
    6584:	90 0d       	add	r25, r0
    6586:	a4 9f       	mul	r26, r20
    6588:	80 0d       	add	r24, r0
    658a:	91 1d       	adc	r25, r1
    658c:	11 24       	eor	r1, r1
    658e:	08 95       	ret

00006590 <malloc>:
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
    6594:	82 30       	cpi	r24, 0x02	; 2
    6596:	91 05       	cpc	r25, r1
    6598:	10 f4       	brcc	.+4      	; 0x659e <malloc+0xe>
    659a:	82 e0       	ldi	r24, 0x02	; 2
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	e0 91 6d 25 	lds	r30, 0x256D
    65a2:	f0 91 6e 25 	lds	r31, 0x256E
    65a6:	20 e0       	ldi	r18, 0x00	; 0
    65a8:	30 e0       	ldi	r19, 0x00	; 0
    65aa:	c0 e0       	ldi	r28, 0x00	; 0
    65ac:	d0 e0       	ldi	r29, 0x00	; 0
    65ae:	30 97       	sbiw	r30, 0x00	; 0
    65b0:	11 f1       	breq	.+68     	; 0x65f6 <malloc+0x66>
    65b2:	40 81       	ld	r20, Z
    65b4:	51 81       	ldd	r21, Z+1	; 0x01
    65b6:	48 17       	cp	r20, r24
    65b8:	59 07       	cpc	r21, r25
    65ba:	c0 f0       	brcs	.+48     	; 0x65ec <malloc+0x5c>
    65bc:	48 17       	cp	r20, r24
    65be:	59 07       	cpc	r21, r25
    65c0:	61 f4       	brne	.+24     	; 0x65da <malloc+0x4a>
    65c2:	82 81       	ldd	r24, Z+2	; 0x02
    65c4:	93 81       	ldd	r25, Z+3	; 0x03
    65c6:	20 97       	sbiw	r28, 0x00	; 0
    65c8:	19 f0       	breq	.+6      	; 0x65d0 <malloc+0x40>
    65ca:	8a 83       	std	Y+2, r24	; 0x02
    65cc:	9b 83       	std	Y+3, r25	; 0x03
    65ce:	2b c0       	rjmp	.+86     	; 0x6626 <malloc+0x96>
    65d0:	80 93 6d 25 	sts	0x256D, r24
    65d4:	90 93 6e 25 	sts	0x256E, r25
    65d8:	26 c0       	rjmp	.+76     	; 0x6626 <malloc+0x96>
    65da:	21 15       	cp	r18, r1
    65dc:	31 05       	cpc	r19, r1
    65de:	19 f0       	breq	.+6      	; 0x65e6 <malloc+0x56>
    65e0:	42 17       	cp	r20, r18
    65e2:	53 07       	cpc	r21, r19
    65e4:	18 f4       	brcc	.+6      	; 0x65ec <malloc+0x5c>
    65e6:	9a 01       	movw	r18, r20
    65e8:	be 01       	movw	r22, r28
    65ea:	df 01       	movw	r26, r30
    65ec:	ef 01       	movw	r28, r30
    65ee:	02 80       	ldd	r0, Z+2	; 0x02
    65f0:	f3 81       	ldd	r31, Z+3	; 0x03
    65f2:	e0 2d       	mov	r30, r0
    65f4:	dc cf       	rjmp	.-72     	; 0x65ae <malloc+0x1e>
    65f6:	21 15       	cp	r18, r1
    65f8:	31 05       	cpc	r19, r1
    65fa:	09 f1       	breq	.+66     	; 0x663e <malloc+0xae>
    65fc:	28 1b       	sub	r18, r24
    65fe:	39 0b       	sbc	r19, r25
    6600:	24 30       	cpi	r18, 0x04	; 4
    6602:	31 05       	cpc	r19, r1
    6604:	90 f4       	brcc	.+36     	; 0x662a <malloc+0x9a>
    6606:	12 96       	adiw	r26, 0x02	; 2
    6608:	8d 91       	ld	r24, X+
    660a:	9c 91       	ld	r25, X
    660c:	13 97       	sbiw	r26, 0x03	; 3
    660e:	61 15       	cp	r22, r1
    6610:	71 05       	cpc	r23, r1
    6612:	21 f0       	breq	.+8      	; 0x661c <malloc+0x8c>
    6614:	fb 01       	movw	r30, r22
    6616:	82 83       	std	Z+2, r24	; 0x02
    6618:	93 83       	std	Z+3, r25	; 0x03
    661a:	04 c0       	rjmp	.+8      	; 0x6624 <malloc+0x94>
    661c:	80 93 6d 25 	sts	0x256D, r24
    6620:	90 93 6e 25 	sts	0x256E, r25
    6624:	fd 01       	movw	r30, r26
    6626:	32 96       	adiw	r30, 0x02	; 2
    6628:	44 c0       	rjmp	.+136    	; 0x66b2 <malloc+0x122>
    662a:	fd 01       	movw	r30, r26
    662c:	e2 0f       	add	r30, r18
    662e:	f3 1f       	adc	r31, r19
    6630:	81 93       	st	Z+, r24
    6632:	91 93       	st	Z+, r25
    6634:	22 50       	subi	r18, 0x02	; 2
    6636:	31 09       	sbc	r19, r1
    6638:	2d 93       	st	X+, r18
    663a:	3c 93       	st	X, r19
    663c:	3a c0       	rjmp	.+116    	; 0x66b2 <malloc+0x122>
    663e:	20 91 6b 25 	lds	r18, 0x256B
    6642:	30 91 6c 25 	lds	r19, 0x256C
    6646:	23 2b       	or	r18, r19
    6648:	41 f4       	brne	.+16     	; 0x665a <malloc+0xca>
    664a:	20 91 02 20 	lds	r18, 0x2002
    664e:	30 91 03 20 	lds	r19, 0x2003
    6652:	20 93 6b 25 	sts	0x256B, r18
    6656:	30 93 6c 25 	sts	0x256C, r19
    665a:	20 91 00 20 	lds	r18, 0x2000
    665e:	30 91 01 20 	lds	r19, 0x2001
    6662:	21 15       	cp	r18, r1
    6664:	31 05       	cpc	r19, r1
    6666:	41 f4       	brne	.+16     	; 0x6678 <malloc+0xe8>
    6668:	2d b7       	in	r18, 0x3d	; 61
    666a:	3e b7       	in	r19, 0x3e	; 62
    666c:	40 91 04 20 	lds	r20, 0x2004
    6670:	50 91 05 20 	lds	r21, 0x2005
    6674:	24 1b       	sub	r18, r20
    6676:	35 0b       	sbc	r19, r21
    6678:	e0 91 6b 25 	lds	r30, 0x256B
    667c:	f0 91 6c 25 	lds	r31, 0x256C
    6680:	e2 17       	cp	r30, r18
    6682:	f3 07       	cpc	r31, r19
    6684:	a0 f4       	brcc	.+40     	; 0x66ae <malloc+0x11e>
    6686:	2e 1b       	sub	r18, r30
    6688:	3f 0b       	sbc	r19, r31
    668a:	28 17       	cp	r18, r24
    668c:	39 07       	cpc	r19, r25
    668e:	78 f0       	brcs	.+30     	; 0x66ae <malloc+0x11e>
    6690:	ac 01       	movw	r20, r24
    6692:	4e 5f       	subi	r20, 0xFE	; 254
    6694:	5f 4f       	sbci	r21, 0xFF	; 255
    6696:	24 17       	cp	r18, r20
    6698:	35 07       	cpc	r19, r21
    669a:	48 f0       	brcs	.+18     	; 0x66ae <malloc+0x11e>
    669c:	4e 0f       	add	r20, r30
    669e:	5f 1f       	adc	r21, r31
    66a0:	40 93 6b 25 	sts	0x256B, r20
    66a4:	50 93 6c 25 	sts	0x256C, r21
    66a8:	81 93       	st	Z+, r24
    66aa:	91 93       	st	Z+, r25
    66ac:	02 c0       	rjmp	.+4      	; 0x66b2 <malloc+0x122>
    66ae:	e0 e0       	ldi	r30, 0x00	; 0
    66b0:	f0 e0       	ldi	r31, 0x00	; 0
    66b2:	cf 01       	movw	r24, r30
    66b4:	df 91       	pop	r29
    66b6:	cf 91       	pop	r28
    66b8:	08 95       	ret

000066ba <free>:
    66ba:	0f 93       	push	r16
    66bc:	1f 93       	push	r17
    66be:	cf 93       	push	r28
    66c0:	df 93       	push	r29
    66c2:	00 97       	sbiw	r24, 0x00	; 0
    66c4:	09 f4       	brne	.+2      	; 0x66c8 <free+0xe>
    66c6:	8c c0       	rjmp	.+280    	; 0x67e0 <free+0x126>
    66c8:	fc 01       	movw	r30, r24
    66ca:	32 97       	sbiw	r30, 0x02	; 2
    66cc:	12 82       	std	Z+2, r1	; 0x02
    66ce:	13 82       	std	Z+3, r1	; 0x03
    66d0:	00 91 6d 25 	lds	r16, 0x256D
    66d4:	10 91 6e 25 	lds	r17, 0x256E
    66d8:	01 15       	cp	r16, r1
    66da:	11 05       	cpc	r17, r1
    66dc:	81 f4       	brne	.+32     	; 0x66fe <free+0x44>
    66de:	20 81       	ld	r18, Z
    66e0:	31 81       	ldd	r19, Z+1	; 0x01
    66e2:	82 0f       	add	r24, r18
    66e4:	93 1f       	adc	r25, r19
    66e6:	20 91 6b 25 	lds	r18, 0x256B
    66ea:	30 91 6c 25 	lds	r19, 0x256C
    66ee:	28 17       	cp	r18, r24
    66f0:	39 07       	cpc	r19, r25
    66f2:	79 f5       	brne	.+94     	; 0x6752 <free+0x98>
    66f4:	e0 93 6b 25 	sts	0x256B, r30
    66f8:	f0 93 6c 25 	sts	0x256C, r31
    66fc:	71 c0       	rjmp	.+226    	; 0x67e0 <free+0x126>
    66fe:	d8 01       	movw	r26, r16
    6700:	40 e0       	ldi	r20, 0x00	; 0
    6702:	50 e0       	ldi	r21, 0x00	; 0
    6704:	ae 17       	cp	r26, r30
    6706:	bf 07       	cpc	r27, r31
    6708:	50 f4       	brcc	.+20     	; 0x671e <free+0x64>
    670a:	12 96       	adiw	r26, 0x02	; 2
    670c:	2d 91       	ld	r18, X+
    670e:	3c 91       	ld	r19, X
    6710:	13 97       	sbiw	r26, 0x03	; 3
    6712:	ad 01       	movw	r20, r26
    6714:	21 15       	cp	r18, r1
    6716:	31 05       	cpc	r19, r1
    6718:	09 f1       	breq	.+66     	; 0x675c <free+0xa2>
    671a:	d9 01       	movw	r26, r18
    671c:	f3 cf       	rjmp	.-26     	; 0x6704 <free+0x4a>
    671e:	9d 01       	movw	r18, r26
    6720:	da 01       	movw	r26, r20
    6722:	22 83       	std	Z+2, r18	; 0x02
    6724:	33 83       	std	Z+3, r19	; 0x03
    6726:	60 81       	ld	r22, Z
    6728:	71 81       	ldd	r23, Z+1	; 0x01
    672a:	86 0f       	add	r24, r22
    672c:	97 1f       	adc	r25, r23
    672e:	82 17       	cp	r24, r18
    6730:	93 07       	cpc	r25, r19
    6732:	69 f4       	brne	.+26     	; 0x674e <free+0x94>
    6734:	ec 01       	movw	r28, r24
    6736:	28 81       	ld	r18, Y
    6738:	39 81       	ldd	r19, Y+1	; 0x01
    673a:	26 0f       	add	r18, r22
    673c:	37 1f       	adc	r19, r23
    673e:	2e 5f       	subi	r18, 0xFE	; 254
    6740:	3f 4f       	sbci	r19, 0xFF	; 255
    6742:	20 83       	st	Z, r18
    6744:	31 83       	std	Z+1, r19	; 0x01
    6746:	8a 81       	ldd	r24, Y+2	; 0x02
    6748:	9b 81       	ldd	r25, Y+3	; 0x03
    674a:	82 83       	std	Z+2, r24	; 0x02
    674c:	93 83       	std	Z+3, r25	; 0x03
    674e:	45 2b       	or	r20, r21
    6750:	29 f4       	brne	.+10     	; 0x675c <free+0xa2>
    6752:	e0 93 6d 25 	sts	0x256D, r30
    6756:	f0 93 6e 25 	sts	0x256E, r31
    675a:	42 c0       	rjmp	.+132    	; 0x67e0 <free+0x126>
    675c:	12 96       	adiw	r26, 0x02	; 2
    675e:	ed 93       	st	X+, r30
    6760:	fc 93       	st	X, r31
    6762:	13 97       	sbiw	r26, 0x03	; 3
    6764:	ed 01       	movw	r28, r26
    6766:	49 91       	ld	r20, Y+
    6768:	59 91       	ld	r21, Y+
    676a:	9e 01       	movw	r18, r28
    676c:	24 0f       	add	r18, r20
    676e:	35 1f       	adc	r19, r21
    6770:	e2 17       	cp	r30, r18
    6772:	f3 07       	cpc	r31, r19
    6774:	71 f4       	brne	.+28     	; 0x6792 <free+0xd8>
    6776:	80 81       	ld	r24, Z
    6778:	91 81       	ldd	r25, Z+1	; 0x01
    677a:	84 0f       	add	r24, r20
    677c:	95 1f       	adc	r25, r21
    677e:	02 96       	adiw	r24, 0x02	; 2
    6780:	8d 93       	st	X+, r24
    6782:	9c 93       	st	X, r25
    6784:	11 97       	sbiw	r26, 0x01	; 1
    6786:	82 81       	ldd	r24, Z+2	; 0x02
    6788:	93 81       	ldd	r25, Z+3	; 0x03
    678a:	12 96       	adiw	r26, 0x02	; 2
    678c:	8d 93       	st	X+, r24
    678e:	9c 93       	st	X, r25
    6790:	13 97       	sbiw	r26, 0x03	; 3
    6792:	e0 e0       	ldi	r30, 0x00	; 0
    6794:	f0 e0       	ldi	r31, 0x00	; 0
    6796:	d8 01       	movw	r26, r16
    6798:	12 96       	adiw	r26, 0x02	; 2
    679a:	8d 91       	ld	r24, X+
    679c:	9c 91       	ld	r25, X
    679e:	13 97       	sbiw	r26, 0x03	; 3
    67a0:	00 97       	sbiw	r24, 0x00	; 0
    67a2:	19 f0       	breq	.+6      	; 0x67aa <free+0xf0>
    67a4:	f8 01       	movw	r30, r16
    67a6:	8c 01       	movw	r16, r24
    67a8:	f6 cf       	rjmp	.-20     	; 0x6796 <free+0xdc>
    67aa:	8d 91       	ld	r24, X+
    67ac:	9c 91       	ld	r25, X
    67ae:	98 01       	movw	r18, r16
    67b0:	2e 5f       	subi	r18, 0xFE	; 254
    67b2:	3f 4f       	sbci	r19, 0xFF	; 255
    67b4:	82 0f       	add	r24, r18
    67b6:	93 1f       	adc	r25, r19
    67b8:	20 91 6b 25 	lds	r18, 0x256B
    67bc:	30 91 6c 25 	lds	r19, 0x256C
    67c0:	28 17       	cp	r18, r24
    67c2:	39 07       	cpc	r19, r25
    67c4:	69 f4       	brne	.+26     	; 0x67e0 <free+0x126>
    67c6:	30 97       	sbiw	r30, 0x00	; 0
    67c8:	29 f4       	brne	.+10     	; 0x67d4 <free+0x11a>
    67ca:	10 92 6d 25 	sts	0x256D, r1
    67ce:	10 92 6e 25 	sts	0x256E, r1
    67d2:	02 c0       	rjmp	.+4      	; 0x67d8 <free+0x11e>
    67d4:	12 82       	std	Z+2, r1	; 0x02
    67d6:	13 82       	std	Z+3, r1	; 0x03
    67d8:	00 93 6b 25 	sts	0x256B, r16
    67dc:	10 93 6c 25 	sts	0x256C, r17
    67e0:	df 91       	pop	r29
    67e2:	cf 91       	pop	r28
    67e4:	1f 91       	pop	r17
    67e6:	0f 91       	pop	r16
    67e8:	08 95       	ret

000067ea <memcpy>:
    67ea:	fb 01       	movw	r30, r22
    67ec:	dc 01       	movw	r26, r24
    67ee:	02 c0       	rjmp	.+4      	; 0x67f4 <memcpy+0xa>
    67f0:	01 90       	ld	r0, Z+
    67f2:	0d 92       	st	X+, r0
    67f4:	41 50       	subi	r20, 0x01	; 1
    67f6:	50 40       	sbci	r21, 0x00	; 0
    67f8:	d8 f7       	brcc	.-10     	; 0x67f0 <memcpy+0x6>
    67fa:	08 95       	ret

000067fc <eeprom_read_dword>:
    67fc:	0e 94 16 34 	call	0x682c	; 0x682c <eeprom_mapen>
    6800:	60 81       	ld	r22, Z
    6802:	71 81       	ldd	r23, Z+1	; 0x01
    6804:	82 81       	ldd	r24, Z+2	; 0x02
    6806:	93 81       	ldd	r25, Z+3	; 0x03
    6808:	08 95       	ret

0000680a <eeprom_write_dword>:
    680a:	24 2f       	mov	r18, r20
    680c:	0e 94 23 34 	call	0x6846	; 0x6846 <eeprom_write_r18>
    6810:	25 2f       	mov	r18, r21
    6812:	0e 94 23 34 	call	0x6846	; 0x6846 <eeprom_write_r18>
    6816:	0c 94 0d 34 	jmp	0x681a	; 0x681a <eeprom_write_word>

0000681a <eeprom_write_word>:
    681a:	0e 94 22 34 	call	0x6844	; 0x6844 <eeprom_write_byte>
    681e:	27 2f       	mov	r18, r23
    6820:	0c 94 23 34 	jmp	0x6846	; 0x6846 <eeprom_write_r18>

00006824 <eeprom_read_byte>:
    6824:	03 d0       	rcall	.+6      	; 0x682c <eeprom_mapen>
    6826:	80 81       	ld	r24, Z
    6828:	99 27       	eor	r25, r25
    682a:	08 95       	ret

0000682c <eeprom_mapen>:
    682c:	e0 ec       	ldi	r30, 0xC0	; 192
    682e:	f1 e0       	ldi	r31, 0x01	; 1
    6830:	37 85       	ldd	r19, Z+15	; 0x0f
    6832:	37 fd       	sbrc	r19, 7
    6834:	fd cf       	rjmp	.-6      	; 0x6830 <eeprom_mapen+0x4>
    6836:	34 85       	ldd	r19, Z+12	; 0x0c
    6838:	38 60       	ori	r19, 0x08	; 8
    683a:	34 87       	std	Z+12, r19	; 0x0c
    683c:	fc 01       	movw	r30, r24
    683e:	e0 50       	subi	r30, 0x00	; 0
    6840:	f0 4f       	sbci	r31, 0xF0	; 240
    6842:	08 95       	ret

00006844 <eeprom_write_byte>:
    6844:	26 2f       	mov	r18, r22

00006846 <eeprom_write_r18>:
    6846:	e0 ec       	ldi	r30, 0xC0	; 192
    6848:	f1 e0       	ldi	r31, 0x01	; 1
    684a:	37 85       	ldd	r19, Z+15	; 0x0f
    684c:	37 fd       	sbrc	r19, 7
    684e:	fd cf       	rjmp	.-6      	; 0x684a <eeprom_write_r18+0x4>
    6850:	34 85       	ldd	r19, Z+12	; 0x0c
    6852:	37 7f       	andi	r19, 0xF7	; 247
    6854:	34 87       	std	Z+12, r19	; 0x0c
    6856:	37 85       	ldd	r19, Z+15	; 0x0f
    6858:	31 ff       	sbrs	r19, 1
    685a:	09 c0       	rjmp	.+18     	; 0x686e <eeprom_write_r18+0x28>
    685c:	36 e3       	ldi	r19, 0x36	; 54
    685e:	32 87       	std	Z+10, r19	; 0x0a
    6860:	38 ed       	ldi	r19, 0xD8	; 216
    6862:	34 bf       	out	0x34, r19	; 52
    6864:	31 e0       	ldi	r19, 0x01	; 1
    6866:	33 87       	std	Z+11, r19	; 0x0b
    6868:	37 85       	ldd	r19, Z+15	; 0x0f
    686a:	37 fd       	sbrc	r19, 7
    686c:	fd cf       	rjmp	.-6      	; 0x6868 <eeprom_write_r18+0x22>
    686e:	33 e3       	ldi	r19, 0x33	; 51
    6870:	32 87       	std	Z+10, r19	; 0x0a
    6872:	80 83       	st	Z, r24
    6874:	91 83       	std	Z+1, r25	; 0x01
    6876:	12 82       	std	Z+2, r1	; 0x02
    6878:	24 83       	std	Z+4, r18	; 0x04
    687a:	25 e3       	ldi	r18, 0x35	; 53
    687c:	22 87       	std	Z+10, r18	; 0x0a
    687e:	28 ed       	ldi	r18, 0xD8	; 216
    6880:	31 e0       	ldi	r19, 0x01	; 1
    6882:	24 bf       	out	0x34, r18	; 52
    6884:	33 87       	std	Z+11, r19	; 0x0b
    6886:	01 96       	adiw	r24, 0x01	; 1
    6888:	08 95       	ret

0000688a <__do_global_dtors>:
    688a:	12 e0       	ldi	r17, 0x02	; 2
    688c:	cc e8       	ldi	r28, 0x8C	; 140
    688e:	d2 e0       	ldi	r29, 0x02	; 2
    6890:	00 e0       	ldi	r16, 0x00	; 0
    6892:	06 c0       	rjmp	.+12     	; 0x68a0 <__do_global_dtors+0x16>
    6894:	80 2f       	mov	r24, r16
    6896:	fe 01       	movw	r30, r28
    6898:	0e 94 a6 32 	call	0x654c	; 0x654c <__tablejump2__>
    689c:	21 96       	adiw	r28, 0x01	; 1
    689e:	01 1d       	adc	r16, r1
    68a0:	cd 38       	cpi	r28, 0x8D	; 141
    68a2:	d1 07       	cpc	r29, r17
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	08 07       	cpc	r16, r24
    68a8:	a9 f7       	brne	.-22     	; 0x6894 <__do_global_dtors+0xa>
    68aa:	f8 94       	cli

000068ac <__stop_program>:
    68ac:	ff cf       	rjmp	.-2      	; 0x68ac <__stop_program>
