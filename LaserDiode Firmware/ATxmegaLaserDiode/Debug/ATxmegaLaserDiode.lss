
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000069c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002da  00802000  000069c0  00006a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c1  008022da  008022da  00006d2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00006da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018194  00000000  00000000  00007a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000650f  00000000  00000000  0001fbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e83  00000000  00000000  000260e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000395c  00000000  00000000  0002bf68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000092ac  00000000  00000000  0002f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a5ca  00000000  00000000  00038b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b78  00000000  00000000  0004313a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__vector_1>
       8:	0c 94 05 12 	jmp	0x240a	; 0x240a <__vector_2>
       c:	0c 94 36 12 	jmp	0x246c	; 0x246c <__vector_3>
      10:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_4>
      14:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_5>
      18:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_6>
      1c:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__vector_7>
      20:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_8>
      24:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__vector_9>
      28:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__vector_10>
      2c:	0c 94 be 13 	jmp	0x277c	; 0x277c <__vector_11>
      30:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__vector_12>
      34:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__vector_13>
      38:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__vector_14>
      3c:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__vector_15>
      40:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__vector_16>
      44:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__vector_17>
      48:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_18>
      4c:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__vector_19>
      50:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__vector_20>
      54:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__vector_21>
      58:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__vector_22>
      5c:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__vector_23>
      60:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__vector_24>
      64:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__vector_25>
      68:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__vector_26>
      6c:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__vector_27>
      70:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__vector_28>
      74:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__vector_29>
      78:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__vector_30>
      7c:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__vector_31>
      80:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__vector_32>
      84:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__vector_33>
      88:	0c 94 25 18 	jmp	0x304a	; 0x304a <__vector_34>
      8c:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__vector_35>
      90:	0c 94 87 18 	jmp	0x310e	; 0x310e <__vector_36>
      94:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__vector_37>
      98:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__vector_38>
      9c:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__vector_39>
      a0:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__vector_40>
      a4:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__vector_41>
      a8:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__vector_42>
      ac:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__vector_43>
      b0:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__vector_44>
      b4:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__vector_45>
      b8:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__vector_46>
      bc:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__vector_47>
      c0:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__vector_48>
      c4:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__vector_49>
      c8:	0c 94 35 1b 	jmp	0x366a	; 0x366a <__vector_50>
      cc:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__vector_51>
      d0:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__vector_52>
      d4:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <__vector_53>
      d8:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__vector_54>
      dc:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__vector_55>
      e0:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__vector_56>
      e4:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <__vector_57>
      e8:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__vector_58>
      ec:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__vector_59>
      f0:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__vector_60>
      f4:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__vector_61>
      f8:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__vector_62>
      fc:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__vector_63>
     100:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__vector_64>
     104:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__vector_65>
     108:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__vector_66>
     10c:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__vector_67>
     110:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__vector_68>
     114:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__vector_69>
     118:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__vector_70>
     11c:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <__vector_71>
     120:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__vector_72>
     124:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__vector_73>
     128:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__vector_77>
     138:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__vector_78>
     13c:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__vector_79>
     140:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__vector_80>
     144:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__vector_81>
     148:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__vector_82>
     14c:	0c 94 24 21 	jmp	0x4248	; 0x4248 <__vector_83>
     150:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__vector_84>
     154:	0c 94 86 21 	jmp	0x430c	; 0x430c <__vector_85>
     158:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__vector_86>
     15c:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__vector_87>
     160:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__vector_88>
     164:	0c 94 4a 22 	jmp	0x4494	; 0x4494 <__vector_89>
     168:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__vector_90>
     16c:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__vector_91>
     170:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__vector_92>
     174:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__vector_104>
     1a4:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__vector_108>
     1b4:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <__vector_109>
     1b8:	0c 94 03 24 	jmp	0x4806	; 0x4806 <__vector_110>
     1bc:	0c 94 34 24 	jmp	0x4868	; 0x4868 <__vector_111>
     1c0:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <__vector_112>
     1c4:	0c 94 96 24 	jmp	0x492c	; 0x492c <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 c7 24 	jmp	0x498e	; 0x498e <__vector_119>
     1e0:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__vector_120>
     1e4:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7b 04       	cpc	r7, r11
     25e:	81 04       	cpc	r8, r1
     260:	87 04       	cpc	r8, r7
     262:	8d 04       	cpc	r8, r13
     264:	93 04       	cpc	r9, r3
     266:	99 04       	cpc	r9, r9
     268:	9f 04       	cpc	r9, r15
     26a:	a5 04       	cpc	r10, r5
     26c:	1c 05       	cpc	r17, r12
     26e:	b3 04       	cpc	r11, r3
     270:	b9 04       	cpc	r11, r9
     272:	bf 04       	cpc	r11, r15
     274:	c5 04       	cpc	r12, r5
     276:	cb 04       	cpc	r12, r11
     278:	d1 04       	cpc	r13, r1
     27a:	d7 04       	cpc	r13, r7
     27c:	dd 04       	cpc	r13, r13
     27e:	e3 04       	cpc	r14, r3
     280:	c4 28       	or	r12, r4
     282:	c4 28       	or	r12, r4
     284:	cc 28       	or	r12, r12
     286:	d4 28       	or	r13, r4
     288:	db 28       	or	r13, r11
     28a:	2a 29       	or	r18, r10
     28c:	31 29       	or	r19, r1
     28e:	5d 29       	or	r21, r13
     290:	5d 29       	or	r21, r13
     292:	5c 29       	or	r21, r12
     294:	5c 29       	or	r21, r12

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2a2:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <_ZN8CTimerC18SetCOMPAEj>
     2a6:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <_ZN10CDGUSUSART11IsDataEmptyEv>
     2aa:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <_GLOBAL__sub_I_dacSPI>
     2ae:	0c 94 3d 30 	jmp	0x607a	; 0x607a <_ZN8CTimerD19SetPeriodEj>
     2b2:	0c 94 60 31 	jmp	0x62c0	; 0x62c0 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2b6:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
     2ba:	0c 94 2f 30 	jmp	0x605e	; 0x605e <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     2be:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <_ZN7CTimerC8SetCOMPBEj>
     2c2:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <_ZN8CTimerC18SetCOMPBEj>
     2c6:	0c 94 66 2f 	jmp	0x5ecc	; 0x5ecc <_ZN7CTimerD9SetPeriodEj>
     2ca:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2ce:	0c 94 28 2f 	jmp	0x5e50	; 0x5e50 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2d2:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2d6:	0c 94 18 28 	jmp	0x5030	; 0x5030 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2da:	0c 94 cc 28 	jmp	0x5198	; 0x5198 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     2de:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <_ZN7CTimerC8SetCOMPDEj>
     2e2:	0c 94 00 11 	jmp	0x2200	; 0x2200 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     2e6:	0c 94 db 28 	jmp	0x51b6	; 0x51b6 <_ZN9CMBSender13OnReceiveByteEh+0x50>
     2ea:	0c 94 16 2b 	jmp	0x562c	; 0x562c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     2ee:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     2f2:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <_ZN7CTimerC9SetPeriodEj>
     2f6:	0c 94 83 27 	jmp	0x4f06	; 0x4f06 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2fa:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2fe:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     302:	0c 94 6e 30 	jmp	0x60dc	; 0x60dc <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     306:	0c 94 06 31 	jmp	0x620c	; 0x620c <_ZN7CTimerF8SetCOMPDEj>
     30a:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     30e:	0c 94 47 30 	jmp	0x608e	; 0x608e <_ZN8CTimerD18SetCOMPBEj>
     312:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <_ZN7CTimerC8SetCOMPCEj>
     316:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     31a:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     31e:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xce>
     322:	0c 94 a4 30 	jmp	0x6148	; 0x6148 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     326:	0c 94 2d 31 	jmp	0x625a	; 0x625a <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     32a:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     32e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf2>
     332:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     336:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <_ZN7CTimerC4StopEv>
     33a:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <_ZN7CTimerD4StopEv>
     33e:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     342:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <_ZN9CMBSender13OnReceiveByteEh+0x152>
     346:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     34a:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     34e:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     352:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     356:	0c 94 d8 2d 	jmp	0x5bb0	; 0x5bb0 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     35a:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     35e:	0c 94 36 30 	jmp	0x606c	; 0x606c <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     362:	0c 94 58 2f 	jmp	0x5eb0	; 0x5eb0 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     366:	0c 94 7f 2f 	jmp	0x5efe	; 0x5efe <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     36a:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     36e:	0c 94 67 06 	jmp	0xcce	; 0xcce <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     372:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     376:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     37a:	0c 94 9d 2e 	jmp	0x5d3a	; 0x5d3a <_ZN8CTimerC14StopEv>
     37e:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfe>
     382:	0c 94 df 2d 	jmp	0x5bbe	; 0x5bbe <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     386:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     38a:	0c 94 4f 31 	jmp	0x629e	; 0x629e <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     38e:	0c 94 ff 2d 	jmp	0x5bfe	; 0x5bfe <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     392:	0c 94 a0 2a 	jmp	0x5540	; 0x5540 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     396:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     39a:	0c 94 87 29 	jmp	0x530e	; 0x530e <_ZN9CMBSender18OnTimeoutInterruptEPv>
     39e:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <_ZN10CDGUSUSART11IsReceivingEv>
     3a2:	0c 94 54 2e 	jmp	0x5ca8	; 0x5ca8 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3a6:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3aa:	0c 94 eb 2d 	jmp	0x5bd6	; 0x5bd6 <_ZN7CTimerC8SetCOMPAEj>
     3ae:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3b2:	0c 94 f2 30 	jmp	0x61e4	; 0x61e4 <_ZN7CTimerF9SetPeriodEj>
     3b6:	0c 94 bf 30 	jmp	0x617e	; 0x617e <_ZN7CTimerF5StartEj>
     3ba:	0c 94 02 2f 	jmp	0x5e04	; 0x5e04 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3be:	0c 94 31 29 	jmp	0x5262	; 0x5262 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     3c2:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     3c6:	0c 94 0b 31 	jmp	0x6216	; 0x6216 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3ca:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10a>
     3ce:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3d2:	0c 94 f7 30 	jmp	0x61ee	; 0x61ee <_ZN7CTimerF8SetCOMPAEj>
     3d6:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <_ZN8CTimerC19SetPeriodEj>
     3da:	0c 94 27 28 	jmp	0x504e	; 0x504e <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     3de:	0c 94 c4 28 	jmp	0x5188	; 0x5188 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     3e2:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3e6:	0c 94 64 27 	jmp	0x4ec8	; 0x4ec8 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     3ea:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     3ee:	0c 94 fc 30 	jmp	0x61f8	; 0x61f8 <_ZN7CTimerF8SetCOMPBEj>
     3f2:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x116>
     3f6:	0c 94 a1 2f 	jmp	0x5f42	; 0x5f42 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3fa:	0c 94 c3 2f 	jmp	0x5f86	; 0x5f86 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3fe:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     402:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     406:	0c 94 09 28 	jmp	0x5012	; 0x5012 <_ZN16CMBEventsHandler11FreeBuffersEv>
     40a:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     40e:	0c 94 43 2f 	jmp	0x5e86	; 0x5e86 <_ZN7CTimerD5StartEj>
     412:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     416:	0c 94 21 2e 	jmp	0x5c42	; 0x5c42 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     41a:	0c 94 d4 2f 	jmp	0x5fa8	; 0x5fa8 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     41e:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     422:	0c 94 b6 2e 	jmp	0x5d6c	; 0x5d6c <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     426:	0c 94 75 2f 	jmp	0x5eea	; 0x5eea <_ZN7CTimerD8SetCOMPCEj>
     42a:	0c 94 10 2e 	jmp	0x5c20	; 0x5c20 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     42e:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     432:	0c 94 7a 2f 	jmp	0x5ef4	; 0x5ef4 <_ZN7CTimerD8SetCOMPDEj>
     436:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     43a:	0c 94 4c 30 	jmp	0x6098	; 0x6098 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     43e:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     442:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__cxa_pure_virtual>
     446:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     44a:	0c 94 70 2f 	jmp	0x5ee0	; 0x5ee0 <_ZN7CTimerD8SetCOMPBEj>
     44e:	0c 94 1d 30 	jmp	0x603a	; 0x603a <_ZN8CTimerD14StopEv>
     452:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     456:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     45a:	0c 94 92 25 	jmp	0x4b24	; 0x4b24 <_GLOBAL__sub_D_dacSPI>
     45e:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <_ZN7CTimerF4StopEv>
     462:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <_ZN7CTimerD8SetCOMPAEj>
     466:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     46a:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xda>
     46e:	0c 94 33 27 	jmp	0x4e66	; 0x4e66 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     472:	0c 94 01 31 	jmp	0x6202	; 0x6202 <_ZN7CTimerF8SetCOMPCEj>
     476:	0c 94 2a 29 	jmp	0x5254	; 0x5254 <_ZN9CMBSender13OnReceiveByteEh+0xee>
     47a:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <_ZN8CTimerC15StartEj>
     47e:	0c 94 e4 2a 	jmp	0x55c8	; 0x55c8 <_ZN10CDGUSUSART14IsTransmittingEv>
     482:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     486:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     48a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     48e:	0c 94 25 30 	jmp	0x604a	; 0x604a <_ZN8CTimerD15ResetEv>
     492:	0c 94 d4 28 	jmp	0x51a8	; 0x51a8 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     496:	0c 94 c3 2d 	jmp	0x5b86	; 0x5b86 <_ZN7CTimerC5StartEj>
     49a:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     49e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     4a2:	0c 94 e1 30 	jmp	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     4a6:	0c 94 3e 31 	jmp	0x627c	; 0x627c <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     4aa:	0c 94 5f 2f 	jmp	0x5ebe	; 0x5ebe <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     4ae:	0c 94 f9 2f 	jmp	0x5ff2	; 0x5ff2 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b2:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     4b6:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     4ba:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     4be:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     4c2:	0c 94 1c 31 	jmp	0x6238	; 0x6238 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4c6:	0c 94 cb 04 	jmp	0x996	; 0x996 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe6>
     4ca:	0c 94 10 30 	jmp	0x6020	; 0x6020 <_ZN8CTimerD15StartEj>
     4ce:	0c 94 5d 06 	jmp	0xcba	; 0xcba <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     4d2:	0c 94 e9 30 	jmp	0x61d2	; 0x61d2 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     4d6:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4da:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     4de:	0c 94 d4 30 	jmp	0x61a8	; 0x61a8 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     4e2:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4e6:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4ea:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc2>
     4ee:	0c 94 42 30 	jmp	0x6084	; 0x6084 <_ZN8CTimerD18SetCOMPAEj>
     4f2:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <_ZN4CSPI16StaticOnTransmitEPv>
     4f6:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4fa:	0c 94 de 2a 	jmp	0x55bc	; 0x55bc <_ZN10CDGUSUSART15GetReceivedByteEv>
     4fe:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     502:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     506:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     50a:	0c 94 a5 2e 	jmp	0x5d4a	; 0x5d4a <_ZN8CTimerC15ResetEv>
     50e:	0c 94 ec 29 	jmp	0x53d8	; 0x53d8 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     512:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <_ZN9CMBSender18OnUSARTRxInterruptEPv>

00000516 <__ctors_start>:
     516:	5d 25       	eor	r21, r13

00000518 <__ctors_end>:
     518:	92 25       	eor	r25, r2

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	12 e2       	ldi	r17, 0x22	; 34
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	e0 ec       	ldi	r30, 0xC0	; 192
     532:	f9 e6       	ldi	r31, 0x69	; 105
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	aa 3d       	cpi	r26, 0xDA	; 218
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	25 e2       	ldi	r18, 0x25	; 37
     546:	aa ed       	ldi	r26, 0xDA	; 218
     548:	b2 e2       	ldi	r27, 0x22	; 34
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	ab 39       	cpi	r26, 0x9B	; 155
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 2f 33 	call	0x665e	; 0x665e <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <main>
     578:	0c 94 ce 34 	jmp	0x699c	; 0x699c <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
	laserBoard.GRNOn();
}
void CLaserControlApp::OnPWMTimerBLU()
{
	laserBoard.BLUOn();
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 e3 22 	sts	0x22E3, r24
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 2f 33 	jmp	0x665e	; 0x665e <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	eb 01       	movw	r28, r22
     8c4:	7a 01       	movw	r14, r20
     8c6:	69 01       	movw	r12, r18
     8c8:	fa 01       	movw	r30, r20
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	0e 94 39 11 	call	0x2272	; 0x2272 <_Z4swapj>
     8d2:	9c 01       	movw	r18, r24
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8dc:	7a c0       	rjmp	.+244    	; 0x9d2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x122>
     8de:	fe 01       	movw	r30, r28
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	e2 31       	cpi	r30, 0x12	; 18
     8e4:	f1 05       	cpc	r31, r1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e8:	a7 c0       	rjmp	.+334    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     8ea:	88 27       	eor	r24, r24
     8ec:	e2 5d       	subi	r30, 0xD2	; 210
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	0c 94 2f 33 	jmp	0x665e	; 0x665e <__tablejump2__>
     8f6:	f8 01       	movw	r30, r16
     8f8:	ee 5b       	subi	r30, 0xBE	; 190
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	20 83       	st	Z, r18
     8fe:	31 83       	std	Z+1, r19	; 0x01
     900:	9b c0       	rjmp	.+310    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     902:	f8 01       	movw	r30, r16
     904:	ec 5b       	subi	r30, 0xBC	; 188
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	20 83       	st	Z, r18
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	95 c0       	rjmp	.+298    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     90e:	f8 01       	movw	r30, r16
     910:	ea 5b       	subi	r30, 0xBA	; 186
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	8f c0       	rjmp	.+286    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     91a:	f8 01       	movw	r30, r16
     91c:	e8 5b       	subi	r30, 0xB8	; 184
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	89 c0       	rjmp	.+274    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     926:	f8 01       	movw	r30, r16
     928:	e6 5b       	subi	r30, 0xB6	; 182
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	83 c0       	rjmp	.+262    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     932:	f8 01       	movw	r30, r16
     934:	e4 5b       	subi	r30, 0xB4	; 180
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	20 83       	st	Z, r18
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	7d c0       	rjmp	.+250    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     93e:	f8 01       	movw	r30, r16
     940:	e2 5b       	subi	r30, 0xB2	; 178
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	77 c0       	rjmp	.+238    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     94a:	f7 01       	movw	r30, r14
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	0e 94 3d 11 	call	0x227a	; 0x227a <_Z6swap32m>
     958:	f8 01       	movw	r30, r16
     95a:	fe 96       	adiw	r30, 0x3e	; 62
     95c:	60 83       	st	Z, r22
     95e:	71 83       	std	Z+1, r23	; 0x01
     960:	82 83       	std	Z+2, r24	; 0x02
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	69 c0       	rjmp	.+210    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     966:	f8 01       	movw	r30, r16
     968:	ec 5a       	subi	r30, 0xAC	; 172
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	63 c0       	rjmp	.+198    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     972:	f8 01       	movw	r30, r16
     974:	ea 5a       	subi	r30, 0xAA	; 170
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	20 83       	st	Z, r18
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	5d c0       	rjmp	.+186    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     97e:	f8 01       	movw	r30, r16
     980:	e8 5a       	subi	r30, 0xA8	; 168
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	20 83       	st	Z, r18
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	57 c0       	rjmp	.+174    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     98a:	f8 01       	movw	r30, r16
     98c:	e6 5a       	subi	r30, 0xA6	; 166
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	20 83       	st	Z, r18
     992:	31 83       	std	Z+1, r19	; 0x01
     994:	51 c0       	rjmp	.+162    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     996:	f8 01       	movw	r30, r16
     998:	e4 5a       	subi	r30, 0xA4	; 164
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	4b c0       	rjmp	.+150    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9a2:	f8 01       	movw	r30, r16
     9a4:	e2 5a       	subi	r30, 0xA2	; 162
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	20 83       	st	Z, r18
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ae:	f8 01       	movw	r30, r16
     9b0:	e0 5a       	subi	r30, 0xA0	; 160
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	20 83       	st	Z, r18
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ba:	f8 01       	movw	r30, r16
     9bc:	ee 59       	subi	r30, 0x9E	; 158
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	20 83       	st	Z, r18
     9c2:	31 83       	std	Z+1, r19	; 0x01
     9c4:	39 c0       	rjmp	.+114    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9c6:	f8 01       	movw	r30, r16
     9c8:	ec 59       	subi	r30, 0x9C	; 156
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	20 83       	st	Z, r18
     9ce:	31 83       	std	Z+1, r19	; 0x01
     9d0:	33 c0       	rjmp	.+102    	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9d2:	c1 30       	cpi	r28, 0x01	; 1
     9d4:	d1 05       	cpc	r29, r1
     9d6:	51 f4       	brne	.+20     	; 0x9ec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13c>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a6 01       	movw	r20, r12
     9de:	b7 01       	movw	r22, r14
     9e0:	c8 01       	movw	r24, r16
     9e2:	8e 5b       	subi	r24, 0xBE	; 190
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z11ConvertDataPvS_jj>
     9ea:	26 c0       	rjmp	.+76     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     9ec:	c5 30       	cpi	r28, 0x05	; 5
     9ee:	d1 05       	cpc	r29, r1
     9f0:	49 f4       	brne	.+18     	; 0xa04 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x154>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	a6 01       	movw	r20, r12
     9f8:	b7 01       	movw	r22, r14
     9fa:	c8 01       	movw	r24, r16
     9fc:	c0 96       	adiw	r24, 0x30	; 48
     9fe:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z11ConvertDataPvS_jj>
     a02:	1a c0       	rjmp	.+52     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a04:	22 97       	sbiw	r28, 0x02	; 2
     a06:	c1 f4       	brne	.+48     	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a08:	f8 01       	movw	r30, r16
     a0a:	86 85       	ldd	r24, Z+14	; 0x0e
     a0c:	86 30       	cpi	r24, 0x06	; 6
     a0e:	90 f4       	brcc	.+36     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x184>
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	48 96       	adiw	r24, 0x18	; 24
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a6 01       	movw	r20, r12
     a28:	b7 01       	movw	r22, r14
     a2a:	80 0f       	add	r24, r16
     a2c:	91 1f       	adc	r25, r17
     a2e:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z11ConvertDataPvS_jj>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x188>
     a34:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <_ZN11CLaserBoard4BeepEv>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN16CLaserControlAppC1Ev>:
     a4a:	24 e9       	ldi	r18, 0x94	; 148
     a4c:	31 e2       	ldi	r19, 0x21	; 33
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	08 95       	ret

00000a56 <_ZN16CLaserControlAppD1Ev>:
     a56:	24 e9       	ldi	r18, 0x94	; 148
     a58:	31 e2       	ldi	r19, 0x21	; 33
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
     a5e:	31 83       	std	Z+1, r19	; 0x01
     a60:	0e 94 17 28 	call	0x502e	; 0x502e <_ZN16CMBEventsHandlerD1Ev>
     a64:	08 95       	ret

00000a66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	7c 01       	movw	r14, r24
     a90:	8b 01       	movw	r16, r22
     a92:	fb 01       	movw	r30, r22
     a94:	80 80       	ld	r8, Z
     a96:	91 80       	ldd	r9, Z+1	; 0x01
     a98:	88 ee       	ldi	r24, 0xE8	; 232
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivmodhi4>
     aa2:	5b 01       	movw	r10, r22
     aa4:	22 81       	ldd	r18, Z+2	; 0x02
     aa6:	33 81       	ldd	r19, Z+3	; 0x03
     aa8:	a8 ee       	ldi	r26, 0xE8	; 232
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
     ab0:	95 01       	movw	r18, r10
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
     aba:	29 01       	movw	r4, r18
     abc:	3a 01       	movw	r6, r20
     abe:	f8 01       	movw	r30, r16
     ac0:	c4 80       	ldd	r12, Z+4	; 0x04
     ac2:	d5 80       	ldd	r13, Z+5	; 0x05
     ac4:	8a e6       	ldi	r24, 0x6A	; 106
     ac6:	98 e1       	ldi	r25, 0x18	; 24
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivmodhi4>
     ace:	8b 01       	movw	r16, r22
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	06 0f       	add	r16, r22
     ae2:	17 1f       	adc	r17, r23
     ae4:	f7 01       	movw	r30, r14
     ae6:	06 ab       	std	Z+54, r16	; 0x36
     ae8:	17 ab       	std	Z+55, r17	; 0x37
     aea:	d8 01       	movw	r26, r16
     aec:	a3 01       	movw	r20, r6
     aee:	92 01       	movw	r18, r4
     af0:	0e 94 46 33 	call	0x668c	; 0x668c <__muluhisi3>
     af4:	28 ee       	ldi	r18, 0xE8	; 232
     af6:	33 e0       	ldi	r19, 0x03	; 3
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
     b00:	02 1b       	sub	r16, r18
     b02:	13 0b       	sbc	r17, r19
     b04:	f7 01       	movw	r30, r14
     b06:	00 af       	std	Z+56, r16	; 0x38
     b08:	11 af       	std	Z+57, r17	; 0x39
     b0a:	a2 ae       	std	Z+58, r10	; 0x3a
     b0c:	b3 ae       	std	Z+59, r11	; 0x3b
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	8c 9d       	mul	r24, r12
     b12:	90 01       	movw	r18, r0
     b14:	8d 9d       	mul	r24, r13
     b16:	30 0d       	add	r19, r0
     b18:	11 24       	eor	r1, r1
     b1a:	36 95       	lsr	r19
     b1c:	27 95       	ror	r18
     b1e:	36 95       	lsr	r19
     b20:	27 95       	ror	r18
     b22:	ab e7       	ldi	r26, 0x7B	; 123
     b24:	b4 e1       	ldi	r27, 0x14	; 20
     b26:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
     b2a:	8c 01       	movw	r16, r24
     b2c:	16 95       	lsr	r17
     b2e:	07 95       	ror	r16
     b30:	09 83       	std	Y+1, r16	; 0x01
     b32:	1a 83       	std	Y+2, r17	; 0x02
     b34:	96 01       	movw	r18, r12
     b36:	a8 ec       	ldi	r26, 0xC8	; 200
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	0e 94 b6 32 	call	0x656c	; 0x656c <__mulsi3>
     b4a:	20 ea       	ldi	r18, 0xA0	; 160
     b4c:	36 e8       	ldi	r19, 0x86	; 134
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
     b56:	12 2f       	mov	r17, r18
     b58:	82 2f       	mov	r24, r18
     b5a:	93 2f       	mov	r25, r19
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	2a e0       	ldi	r18, 0x0A	; 10
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
     b70:	62 2f       	mov	r22, r18
     b72:	82 2f       	mov	r24, r18
     b74:	93 2f       	mov	r25, r19
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	20 2f       	mov	r18, r16
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	41 2f       	mov	r20, r17
     b80:	5c 81       	ldd	r21, Y+4	; 0x04
     b82:	7e 81       	ldd	r23, Y+6	; 0x06
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	08 95       	ret

00000bb0 <_ZN16CLaserControlApp11GetVariableEjj>:
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	ca 58       	subi	r28, 0x8A	; 138
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	0e 94 ef 29 	call	0x53de	; 0x53de <_ZN9CMBSender18WaitMODBUSListenerEv>
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	ca 58       	subi	r28, 0x8A	; 138
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8c 01       	movw	r16, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	0e 94 39 11 	call	0x2272	; 0x2272 <_Z4swapj>
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	0a 58       	subi	r16, 0x8A	; 138
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	ae 01       	movw	r20, r28
     c1c:	4f 5f       	subi	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	63 e0       	ldi	r22, 0x03	; 3
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     c44:	fc 01       	movw	r30, r24
     c46:	fe 96       	adiw	r30, 0x3e	; 62
     c48:	40 81       	ld	r20, Z
     c4a:	51 81       	ldd	r21, Z+1	; 0x01
     c4c:	62 81       	ldd	r22, Z+2	; 0x02
     c4e:	73 81       	ldd	r23, Z+3	; 0x03
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	6f 4f       	sbci	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	40 83       	st	Z, r20
     c5a:	51 83       	std	Z+1, r21	; 0x01
     c5c:	62 83       	std	Z+2, r22	; 0x02
     c5e:	73 83       	std	Z+3, r23	; 0x03
     c60:	fc 01       	movw	r30, r24
     c62:	42 ad       	ldd	r20, Z+58	; 0x3a
     c64:	53 ad       	ldd	r21, Z+59	; 0x3b
     c66:	45 36       	cpi	r20, 0x65	; 101
     c68:	51 05       	cpc	r21, r1
     c6a:	50 f0       	brcs	.+20     	; 0xc80 <_ZN16CLaserControlApp12OnLaserTimerEv+0x3c>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	42 e3       	ldi	r20, 0x32	; 50
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	64 ef       	ldi	r22, 0xF4	; 244
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	80 e5       	ldi	r24, 0x50	; 80
     c78:	95 e2       	ldi	r25, 0x25	; 37
     c7a:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <_ZN16CLaserControlApp12OnLaserTimerEv+0x4e>
     c80:	56 95       	lsr	r21
     c82:	47 95       	ror	r20
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	64 ef       	ldi	r22, 0xF4	; 244
     c88:	71 e0       	ldi	r23, 0x01	; 1
     c8a:	80 e5       	ldi	r24, 0x50	; 80
     c8c:	95 e2       	ldi	r25, 0x25	; 37
     c8e:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
     c92:	80 e5       	ldi	r24, 0x50	; 80
     c94:	95 e2       	ldi	r25, 0x25	; 37
     c96:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
     c9a:	08 95       	ret

00000c9c <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     c9c:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN16CLaserControlApp12OnLaserTimerEv>
     ca0:	08 95       	ret

00000ca2 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     ca2:	fc 01       	movw	r30, r24
     ca4:	83 89       	ldd	r24, Z+19	; 0x13
     ca6:	88 23       	and	r24, r24
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     caa:	81 e5       	ldi	r24, 0x51	; 81
     cac:	95 e2       	ldi	r25, 0x25	; 37
     cae:	0e 94 ad 2c 	call	0x595a	; 0x595a <_ZN11CLaserBoard5PWMOnEv>
     cb2:	08 95       	ret

00000cb4 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     cb4:	0e 94 51 06 	call	0xca2	; 0xca2 <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     cb8:	08 95       	ret

00000cba <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
		laserBoard.PWMOn();
}

void CLaserControlApp::OnPWMTimerRED()
{
	laserBoard.REDOn();
     cba:	81 e5       	ldi	r24, 0x51	; 81
     cbc:	95 e2       	ldi	r25, 0x25	; 37
     cbe:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN11CLaserBoard5REDOnEv>
     cc2:	08 95       	ret

00000cc4 <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
}
void CLaserControlApp::OnPWMTimerGRN()
{
	laserBoard.GRNOn();
     cc4:	81 e5       	ldi	r24, 0x51	; 81
     cc6:	95 e2       	ldi	r25, 0x25	; 37
     cc8:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN11CLaserBoard5GRNOnEv>
     ccc:	08 95       	ret

00000cce <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
}
void CLaserControlApp::OnPWMTimerBLU()
{
	laserBoard.BLUOn();
     cce:	81 e5       	ldi	r24, 0x51	; 81
     cd0:	95 e2       	ldi	r25, 0x25	; 37
     cd2:	0e 94 c5 2c 	call	0x598a	; 0x598a <_ZN11CLaserBoard5BLUOnEv>
     cd6:	08 95       	ret

00000cd8 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     ce2:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     ce4:	fc 01       	movw	r30, r24
     ce6:	ee 5b       	subi	r30, 0xBE	; 190
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	10 82       	st	Z, r1
     cec:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     cee:	32 96       	adiw	r30, 0x02	; 2
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	80 83       	st	Z, r24
     cf6:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     cf8:	6a 30       	cpi	r22, 0x0A	; 10
     cfa:	71 05       	cpc	r23, r1
     cfc:	70 f4       	brcc	.+28     	; 0xd1a <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	72 96       	adiw	r30, 0x12	; 18
     d04:	80 83       	st	Z, r24
     d06:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d08:	8c e3       	ldi	r24, 0x3C	; 60
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	8e 8b       	std	Y+22, r24	; 0x16
     d0e:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d10:	81 e6       	ldi	r24, 0x61	; 97
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	8c 8b       	std	Y+20, r24	; 0x14
     d16:	9d 8b       	std	Y+21, r25	; 0x15
     d18:	5b c0       	rjmp	.+182    	; 0xdd0 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     d1a:	64 31       	cpi	r22, 0x14	; 20
     d1c:	71 05       	cpc	r23, r1
     d1e:	80 f4       	brcc	.+32     	; 0xd40 <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	fe 01       	movw	r30, r28
     d26:	ea 5a       	subi	r30, 0xAA	; 170
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 83       	st	Z, r24
     d2c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d2e:	8c e3       	ldi	r24, 0x3C	; 60
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8e 8b       	std	Y+22, r24	; 0x16
     d34:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d36:	81 e6       	ldi	r24, 0x61	; 97
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	8c 8b       	std	Y+20, r24	; 0x14
     d3c:	9d 8b       	std	Y+21, r25	; 0x15
     d3e:	48 c0       	rjmp	.+144    	; 0xdd0 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     d40:	63 32       	cpi	r22, 0x23	; 35
     d42:	71 05       	cpc	r23, r1
     d44:	80 f4       	brcc	.+32     	; 0xd66 <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	fe 01       	movw	r30, r28
     d4c:	ea 5a       	subi	r30, 0xAA	; 170
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 83       	st	Z, r24
     d52:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d54:	8c e3       	ldi	r24, 0x3C	; 60
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	8e 8b       	std	Y+22, r24	; 0x16
     d5a:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d5c:	81 e6       	ldi	r24, 0x61	; 97
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	8c 8b       	std	Y+20, r24	; 0x14
     d62:	9d 8b       	std	Y+21, r25	; 0x15
     d64:	35 c0       	rjmp	.+106    	; 0xdd0 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     d66:	61 33       	cpi	r22, 0x31	; 49
     d68:	71 05       	cpc	r23, r1
     d6a:	80 f4       	brcc	.+32     	; 0xd8c <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	fe 01       	movw	r30, r28
     d72:	ea 5a       	subi	r30, 0xAA	; 170
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d7a:	84 e6       	ldi	r24, 0x64	; 100
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	8e 8b       	std	Y+22, r24	; 0x16
     d80:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 97;
     d82:	81 e6       	ldi	r24, 0x61	; 97
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	8c 8b       	std	Y+20, r24	; 0x14
     d88:	9d 8b       	std	Y+21, r25	; 0x15
     d8a:	22 c0       	rjmp	.+68     	; 0xdd0 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     d8c:	68 34       	cpi	r22, 0x48	; 72
     d8e:	71 05       	cpc	r23, r1
     d90:	80 f4       	brcc	.+32     	; 0xdb2 <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     d92:	85 e0       	ldi	r24, 0x05	; 5
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	fe 01       	movw	r30, r28
     d98:	ea 5a       	subi	r30, 0xAA	; 170
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	80 83       	st	Z, r24
     d9e:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     da0:	84 e6       	ldi	r24, 0x64	; 100
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	8e 8b       	std	Y+22, r24	; 0x16
     da6:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 90;
     da8:	8a e5       	ldi	r24, 0x5A	; 90
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	8c 8b       	std	Y+20, r24	; 0x14
     dae:	9d 8b       	std	Y+21, r25	; 0x15
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     db2:	86 e0       	ldi	r24, 0x06	; 6
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fe 01       	movw	r30, r28
     db8:	ea 5a       	subi	r30, 0xAA	; 170
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 83       	st	Z, r24
     dbe:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     dc0:	84 e6       	ldi	r24, 0x64	; 100
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	8e 8b       	std	Y+22, r24	; 0x16
     dc6:	9f 8b       	std	Y+23, r25	; 0x17
		m_wMaxEnergy = 87;
     dc8:	87 e5       	ldi	r24, 0x57	; 87
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	8c 8b       	std	Y+20, r24	; 0x14
     dce:	9d 8b       	std	Y+21, r25	; 0x15
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     dd0:	fe 01       	movw	r30, r28
     dd2:	e8 5b       	subi	r30, 0xB8	; 184
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	84 e6       	ldi	r24, 0x64	; 100
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	80 83       	st	Z, r24
     ddc:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     dde:	8e 89       	ldd	r24, Y+22	; 0x16
     de0:	9f 89       	ldd	r25, Y+23	; 0x17
     de2:	32 97       	sbiw	r30, 0x02	; 2
     de4:	80 83       	st	Z, r24
     de6:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     de8:	8e 01       	movw	r16, r28
     dea:	06 5b       	subi	r16, 0xB6	; 182
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	8e 85       	ldd	r24, Y+14	; 0x0e
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	bc 01       	movw	r22, r24
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	68 0f       	add	r22, r24
     dfa:	79 1f       	adc	r23, r25
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	68 5e       	subi	r22, 0xE8	; 232
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	6c 0f       	add	r22, r28
     e06:	7d 1f       	adc	r23, r29
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     e0e:	f8 01       	movw	r30, r16
     e10:	20 83       	st	Z, r18
     e12:	31 83       	std	Z+1, r19	; 0x01
     e14:	42 83       	std	Z+2, r20	; 0x02
     e16:	53 83       	std	Z+3, r21	; 0x03
     e18:	64 83       	std	Z+4, r22	; 0x04
     e1a:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     e1c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fc 01       	movw	r30, r24
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	e8 0f       	add	r30, r24
     e28:	f9 1f       	adc	r31, r25
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	ec 0f       	add	r30, r28
     e30:	fd 1f       	adc	r31, r29
     e32:	84 8d       	ldd	r24, Z+28	; 0x1c
     e34:	95 8d       	ldd	r25, Z+29	; 0x1d
     e36:	8c af       	std	Y+60, r24	; 0x3c
     e38:	9d af       	std	Y+61, r25	; 0x3d
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     e4e:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     e50:	fc 01       	movw	r30, r24
     e52:	ee 5b       	subi	r30, 0xBE	; 190
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	10 82       	st	Z, r1
     e58:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     e5a:	32 96       	adiw	r30, 0x02	; 2
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	80 83       	st	Z, r24
     e62:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     e64:	72 96       	adiw	r30, 0x12	; 18
     e66:	60 83       	st	Z, r22
     e68:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     e6a:	63 30       	cpi	r22, 0x03	; 3
     e6c:	71 05       	cpc	r23, r1
     e6e:	91 f1       	breq	.+100    	; 0xed4 <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     e70:	38 f4       	brcc	.+14     	; 0xe80 <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     e72:	61 30       	cpi	r22, 0x01	; 1
     e74:	71 05       	cpc	r23, r1
     e76:	71 f0       	breq	.+28     	; 0xe94 <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     e78:	62 30       	cpi	r22, 0x02	; 2
     e7a:	71 05       	cpc	r23, r1
     e7c:	d9 f0       	breq	.+54     	; 0xeb4 <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     e7e:	69 c0       	rjmp	.+210    	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     e80:	65 30       	cpi	r22, 0x05	; 5
     e82:	71 05       	cpc	r23, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     e86:	46 c0       	rjmp	.+140    	; 0xf14 <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     e88:	a8 f1       	brcs	.+106    	; 0xef4 <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     e8a:	66 30       	cpi	r22, 0x06	; 6
     e8c:	71 05       	cpc	r23, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     e90:	51 c0       	rjmp	.+162    	; 0xf34 <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     e92:	5f c0       	rjmp	.+190    	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     e94:	85 e0       	ldi	r24, 0x05	; 5
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	fe 01       	movw	r30, r28
     e9a:	ec 5a       	subi	r30, 0xAC	; 172
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 83       	st	Z, r24
     ea0:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ea2:	8c e3       	ldi	r24, 0x3C	; 60
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	8e 8b       	std	Y+22, r24	; 0x16
     ea8:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     eaa:	81 e6       	ldi	r24, 0x61	; 97
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	8c 8b       	std	Y+20, r24	; 0x14
     eb0:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     eb2:	4f c0       	rjmp	.+158    	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     eb4:	8e e0       	ldi	r24, 0x0E	; 14
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	fe 01       	movw	r30, r28
     eba:	ec 5a       	subi	r30, 0xAC	; 172
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 83       	st	Z, r24
     ec0:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ec2:	8c e3       	ldi	r24, 0x3C	; 60
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	8e 8b       	std	Y+22, r24	; 0x16
     ec8:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     eca:	81 e6       	ldi	r24, 0x61	; 97
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	8c 8b       	std	Y+20, r24	; 0x14
     ed0:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     ed4:	8b e1       	ldi	r24, 0x1B	; 27
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	fe 01       	movw	r30, r28
     eda:	ec 5a       	subi	r30, 0xAC	; 172
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 83       	st	Z, r24
     ee0:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     ee2:	8c e3       	ldi	r24, 0x3C	; 60
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	8e 8b       	std	Y+22, r24	; 0x16
     ee8:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     eea:	81 e6       	ldi	r24, 0x61	; 97
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	8c 8b       	std	Y+20, r24	; 0x14
     ef0:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     ef2:	2f c0       	rjmp	.+94     	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     ef4:	89 e2       	ldi	r24, 0x29	; 41
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fe 01       	movw	r30, r28
     efa:	ec 5a       	subi	r30, 0xAC	; 172
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 83       	st	Z, r24
     f00:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f02:	84 e6       	ldi	r24, 0x64	; 100
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	8e 8b       	std	Y+22, r24	; 0x16
     f08:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 97;
     f0a:	81 e6       	ldi	r24, 0x61	; 97
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	8c 8b       	std	Y+20, r24	; 0x14
     f10:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f12:	1f c0       	rjmp	.+62     	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     f14:	8d e3       	ldi	r24, 0x3D	; 61
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fe 01       	movw	r30, r28
     f1a:	ec 5a       	subi	r30, 0xAC	; 172
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	80 83       	st	Z, r24
     f20:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f22:	84 e6       	ldi	r24, 0x64	; 100
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	8e 8b       	std	Y+22, r24	; 0x16
     f28:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 90;
     f2a:	8a e5       	ldi	r24, 0x5A	; 90
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	8c 8b       	std	Y+20, r24	; 0x14
     f30:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     f34:	85 e5       	ldi	r24, 0x55	; 85
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	fe 01       	movw	r30, r28
     f3a:	ec 5a       	subi	r30, 0xAC	; 172
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 83       	st	Z, r24
     f40:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f42:	84 e6       	ldi	r24, 0x64	; 100
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	8e 8b       	std	Y+22, r24	; 0x16
     f48:	9f 8b       	std	Y+23, r25	; 0x17
			m_wMaxEnergy = 87;
     f4a:	87 e5       	ldi	r24, 0x57	; 87
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	8c 8b       	std	Y+20, r24	; 0x14
     f50:	9d 8b       	std	Y+21, r25	; 0x15
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     f52:	fe 01       	movw	r30, r28
     f54:	e8 5b       	subi	r30, 0xB8	; 184
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	84 e6       	ldi	r24, 0x64	; 100
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	80 83       	st	Z, r24
     f5e:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     f60:	8e 89       	ldd	r24, Y+22	; 0x16
     f62:	9f 89       	ldd	r25, Y+23	; 0x17
     f64:	32 97       	sbiw	r30, 0x02	; 2
     f66:	80 83       	st	Z, r24
     f68:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     f6a:	8e 01       	movw	r16, r28
     f6c:	06 5b       	subi	r16, 0xB6	; 182
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	be 01       	movw	r22, r28
     f72:	68 5e       	subi	r22, 0xE8	; 232
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     f7c:	f8 01       	movw	r30, r16
     f7e:	20 83       	st	Z, r18
     f80:	31 83       	std	Z+1, r19	; 0x01
     f82:	42 83       	std	Z+2, r20	; 0x02
     f84:	53 83       	std	Z+3, r21	; 0x03
     f86:	64 83       	std	Z+4, r22	; 0x04
     f88:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	e8 0f       	add	r30, r24
     f96:	f9 1f       	adc	r31, r25
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	ec 0f       	add	r30, r28
     f9e:	fd 1f       	adc	r31, r29
     fa0:	84 8d       	ldd	r24, Z+28	; 0x1c
     fa2:	95 8d       	ldd	r25, Z+29	; 0x1d
     fa4:	8c af       	std	Y+60, r24	; 0x3c
     fa6:	9d af       	std	Y+61, r25	; 0x3d
}
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	08 95       	ret

00000fb2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
     fc8:	8b 01       	movw	r16, r22
     fca:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	b1 f0       	breq	.+44     	; 0xffc <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
     fd2:	21 30       	cpi	r18, 0x01	; 1
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
     fd6:	58 c0       	rjmp	.+176    	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
     fd8:	23 30       	cpi	r18, 0x03	; 3
     fda:	39 f1       	breq	.+78     	; 0x102a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
     fdc:	24 30       	cpi	r18, 0x04	; 4
     fde:	e9 f1       	breq	.+122    	; 0x105a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
     fe0:	53 c0       	rjmp	.+166    	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
     fe2:	db 01       	movw	r26, r22
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	11 97       	sbiw	r26, 0x01	; 1
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	09 f4       	brne	.+2      	; 0xff0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
     fee:	4c c0       	rjmp	.+152    	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	8d 93       	st	X+, r24
     ff6:	9c 93       	st	X, r25
				update = true;
     ff8:	89 8b       	std	Y+17, r24	; 0x11
     ffa:	46 c0       	rjmp	.+140    	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
     ffc:	fb 01       	movw	r30, r22
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	04 97       	sbiw	r24, 0x04	; 4
    1004:	30 f0       	brcs	.+12     	; 0x1012 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 1)
    1012:	d8 01       	movw	r26, r16
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	11 97       	sbiw	r26, 0x01	; 1
    101a:	89 2b       	or	r24, r25
    101c:	a9 f5       	brne	.+106    	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	8d 93       	st	X+, r24
    1024:	9c 93       	st	X, r25
				update = true;
    1026:	89 8b       	std	Y+17, r24	; 0x11
    1028:	2f c0       	rjmp	.+94     	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
    102a:	fb 01       	movw	r30, r22
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	07 97       	sbiw	r24, 0x07	; 7
    1032:	30 f0       	brcs	.+12     	; 0x1040 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	80 83       	st	Z, r24
    103a:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 4)
    1040:	d8 01       	movw	r26, r16
    1042:	8d 91       	ld	r24, X+
    1044:	9c 91       	ld	r25, X
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	04 97       	sbiw	r24, 0x04	; 4
    104a:	f0 f4       	brcc	.+60     	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	8d 93       	st	X+, r24
    1052:	9c 93       	st	X, r25
				update = true;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	89 8b       	std	Y+17, r24	; 0x11
    1058:	17 c0       	rjmp	.+46     	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    105a:	fb 01       	movw	r30, r22
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	0b 97       	sbiw	r24, 0x0b	; 11
    1062:	30 f0       	brcs	.+12     	; 0x1070 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    1064:	8a e0       	ldi	r24, 0x0A	; 10
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	80 83       	st	Z, r24
    106a:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 7)
    1070:	d8 01       	movw	r26, r16
    1072:	8d 91       	ld	r24, X+
    1074:	9c 91       	ld	r25, X
    1076:	11 97       	sbiw	r26, 0x01	; 1
    1078:	07 97       	sbiw	r24, 0x07	; 7
    107a:	30 f4       	brcc	.+12     	; 0x1088 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    107c:	87 e0       	ldi	r24, 0x07	; 7
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	8d 93       	st	X+, r24
    1082:	9c 93       	st	X, r25
				update = true;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 8b       	std	Y+17, r24	; 0x11
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1088:	f8 01       	movw	r30, r16
    108a:	20 81       	ld	r18, Z
    108c:	31 81       	ldd	r19, Z+1	; 0x01
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	f9 01       	movw	r30, r18
    1094:	e6 5c       	subi	r30, 0xC6	; 198
    1096:	fe 4d       	sbci	r31, 0xDE	; 222
    1098:	c0 80       	ld	r12, Z
    109a:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    109c:	f9 01       	movw	r30, r18
    109e:	ec 5d       	subi	r30, 0xDC	; 220
    10a0:	fe 4d       	sbci	r31, 0xDE	; 222
    10a2:	01 90       	ld	r0, Z+
    10a4:	f0 81       	ld	r31, Z
    10a6:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    10a8:	cf 01       	movw	r24, r30
    10aa:	8c 19       	sub	r24, r12
    10ac:	9d 09       	sbc	r25, r13
    10ae:	d9 01       	movw	r26, r18
    10b0:	a2 5f       	subi	r26, 0xF2	; 242
    10b2:	be 4d       	sbci	r27, 0xDE	; 222
    10b4:	6d 91       	ld	r22, X+
    10b6:	7c 91       	ld	r23, X
    10b8:	61 50       	subi	r22, 0x01	; 1
    10ba:	71 09       	sbc	r23, r1
    10bc:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivmodhi4>
	
	if (duration < MinD)
    10c0:	d7 01       	movw	r26, r14
    10c2:	8d 91       	ld	r24, X+
    10c4:	9c 91       	ld	r25, X
    10c6:	11 97       	sbiw	r26, 0x01	; 1
    10c8:	8c 15       	cp	r24, r12
    10ca:	9d 05       	cpc	r25, r13
    10cc:	20 f4       	brcc	.+8      	; 0x10d6 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    10ce:	cd 92       	st	X+, r12
    10d0:	dc 92       	st	X, r13
		update = true;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	if (duration > MaxD)
    10d6:	d7 01       	movw	r26, r14
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	11 97       	sbiw	r26, 0x01	; 1
    10de:	e8 17       	cp	r30, r24
    10e0:	f9 07       	cpc	r31, r25
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    10e4:	ed 93       	st	X+, r30
    10e6:	fc 93       	st	X, r31
		update = true;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    10ec:	d8 01       	movw	r26, r16
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	e2 5f       	subi	r30, 0xF2	; 242
    10f8:	fe 4d       	sbci	r31, 0xDE	; 222
    10fa:	a0 80       	ld	r10, Z
    10fc:	b1 80       	ldd	r11, Z+1	; 0x01
    10fe:	b1 e0       	ldi	r27, 0x01	; 1
    1100:	ab 1a       	sub	r10, r27
    1102:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    1104:	f7 01       	movw	r30, r14
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	8c 19       	sub	r24, r12
    110c:	9d 09       	sbc	r25, r13
    110e:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 34 11 	call	0x2268	; 0x2268 <_Z3maxjj>
    111a:	b5 01       	movw	r22, r10
    111c:	0e 94 2f 11 	call	0x225e	; 0x225e <_Z3minjj>
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    1120:	d8 01       	movw	r26, r16
    1122:	4d 91       	ld	r20, X+
    1124:	5c 91       	ld	r21, X
    1126:	6b e0       	ldi	r22, 0x0B	; 11
    1128:	64 9f       	mul	r22, r20
    112a:	90 01       	movw	r18, r0
    112c:	65 9f       	mul	r22, r21
    112e:	30 0d       	add	r19, r0
    1130:	11 24       	eor	r1, r1
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	e4 5e       	subi	r30, 0xE4	; 228
    113e:	ff 4d       	sbci	r31, 0xDF	; 223
    1140:	20 81       	ld	r18, Z
    1142:	31 81       	ldd	r19, Z+1	; 0x01
    1144:	ad ec       	ldi	r26, 0xCD	; 205
    1146:	bc ec       	ldi	r27, 0xCC	; 204
    1148:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
    114c:	96 95       	lsr	r25
    114e:	87 95       	ror	r24
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	8c 8b       	std	Y+20, r24	; 0x14
    1156:	9d 8b       	std	Y+21, r25	; 0x15
	
	return update;
    1158:	89 89       	ldd	r24, Y+17	; 0x11
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	08 95       	ret

00001170 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1170:	af 92       	push	r10
    1172:	bf 92       	push	r11
    1174:	cf 92       	push	r12
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    1186:	fc 01       	movw	r30, r24
    1188:	ea 58       	subi	r30, 0x8A	; 138
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	60 83       	st	Z, r22
    118e:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    1190:	1f 86       	std	Y+15, r1	; 0x0f
	update = false;
    1192:	19 8a       	std	Y+17, r1	; 0x11
	prepare = false;
    1194:	1a 8a       	std	Y+18, r1	; 0x12
	peltier_en = false;
    1196:	1b 8a       	std	Y+19, r1	; 0x13
	m_wSetMin = 0;
    1198:	6c 01       	movw	r12, r24
    119a:	2e e6       	ldi	r18, 0x6E	; 110
    119c:	c2 0e       	add	r12, r18
    119e:	d1 1c       	adc	r13, r1
    11a0:	f6 01       	movw	r30, r12
    11a2:	10 82       	st	Z, r1
    11a4:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 10;
    11a6:	7c 01       	movw	r14, r24
    11a8:	f0 e7       	ldi	r31, 0x70	; 112
    11aa:	ef 0e       	add	r14, r31
    11ac:	f1 1c       	adc	r15, r1
    11ae:	8a e0       	ldi	r24, 0x0A	; 10
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	f7 01       	movw	r30, r14
    11b4:	80 83       	st	Z, r24
    11b6:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    11b8:	34 97       	sbiw	r30, 0x04	; 4
    11ba:	10 82       	st	Z, r1
    11bc:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    11be:	f6 01       	movw	r30, r12
    11c0:	20 81       	ld	r18, Z
    11c2:	31 81       	ldd	r19, Z+1	; 0x01
    11c4:	36 97       	sbiw	r30, 0x06	; 6
    11c6:	20 83       	st	Z, r18
    11c8:	31 83       	std	Z+1, r19	; 0x01
	m_wSeconds = m_wSetSec;
    11ca:	f7 01       	movw	r30, r14
    11cc:	20 81       	ld	r18, Z
    11ce:	31 81       	ldd	r19, Z+1	; 0x01
    11d0:	36 97       	sbiw	r30, 0x06	; 6
    11d2:	20 83       	st	Z, r18
    11d4:	31 83       	std	Z+1, r19	; 0x01
	m_wDeadTime = 0;
    11d6:	3a 96       	adiw	r30, 0x0a	; 10
    11d8:	10 82       	st	Z, r1
    11da:	11 82       	std	Z+1, r1	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    11dc:	88 ab       	std	Y+48, r24	; 0x30
    11de:	99 ab       	std	Y+49, r25	; 0x31
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    11e0:	88 e2       	ldi	r24, 0x28	; 40
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	8a ab       	std	Y+50, r24	; 0x32
    11e6:	9b ab       	std	Y+51, r25	; 0x33
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
    11e8:	84 e6       	ldi	r24, 0x64	; 100
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	8c ab       	std	Y+52, r24	; 0x34
    11ee:	9d ab       	std	Y+53, r25	; 0x35
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    11f0:	25 e0       	ldi	r18, 0x05	; 5
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	2a a7       	std	Y+42, r18	; 0x2a
    11f6:	3b a7       	std	Y+43, r19	; 0x2b
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    11f8:	20 e5       	ldi	r18, 0x50	; 80
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	2c a7       	std	Y+44, r18	; 0x2c
    11fe:	3d a7       	std	Y+45, r19	; 0x2d
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
    1200:	8e a7       	std	Y+46, r24	; 0x2e
    1202:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    1204:	22 e0       	ldi	r18, 0x02	; 2
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	2c a3       	std	Y+36, r18	; 0x24
    120a:	3d a3       	std	Y+37, r19	; 0x25
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    120c:	28 e7       	ldi	r18, 0x78	; 120
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	2e a3       	std	Y+38, r18	; 0x26
    1212:	3f a3       	std	Y+39, r19	; 0x27
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
    1214:	88 a7       	std	Y+40, r24	; 0x28
    1216:	99 a7       	std	Y+41, r25	; 0x29
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	2e 8f       	std	Y+30, r18	; 0x1e
    121e:	3f 8f       	std	Y+31, r19	; 0x1f
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    1220:	88 a3       	std	Y+32, r24	; 0x20
    1222:	99 a3       	std	Y+33, r25	; 0x21
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
    1224:	8a a3       	std	Y+34, r24	; 0x22
    1226:	9b a3       	std	Y+35, r25	; 0x23
	
	// Current profile
	Profile = PROFILE_FAST;
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 87 34 	call	0x690e	; 0x690e <eeprom_read_dword>
    1234:	5e 01       	movw	r10, r28
    1236:	fe e3       	ldi	r31, 0x3E	; 62
    1238:	af 0e       	add	r10, r31
    123a:	b1 1c       	adc	r11, r1
    123c:	f5 01       	movw	r30, r10
    123e:	60 83       	st	Z, r22
    1240:	71 83       	std	Z+1, r23	; 0x01
    1242:	82 83       	std	Z+2, r24	; 0x02
    1244:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    1246:	34 96       	adiw	r30, 0x04	; 4
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	80 83       	st	Z, r24
    124e:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1250:	be 01       	movw	r22, r28
    1252:	60 5d       	subi	r22, 0xD0	; 208
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	de 01       	movw	r26, r28
    1258:	ac 5b       	subi	r26, 0xBC	; 188
    125a:	bf 4f       	sbci	r27, 0xFF	; 255
    125c:	86 e0       	ldi	r24, 0x06	; 6
    125e:	fb 01       	movw	r30, r22
    1260:	01 90       	ld	r0, Z+
    1262:	0d 92       	st	X+, r0
    1264:	8a 95       	dec	r24
    1266:	e1 f7       	brne	.-8      	; 0x1260 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0xf0>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    1268:	8e 01       	movw	r16, r28
    126a:	06 5b       	subi	r16, 0xB6	; 182
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1274:	f8 01       	movw	r30, r16
    1276:	20 83       	st	Z, r18
    1278:	31 83       	std	Z+1, r19	; 0x01
    127a:	42 83       	std	Z+2, r20	; 0x02
    127c:	53 83       	std	Z+3, r21	; 0x03
    127e:	64 83       	std	Z+4, r22	; 0x04
    1280:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    1282:	f6 01       	movw	r30, r12
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	70 97       	sbiw	r30, 0x10	; 16
    128a:	80 83       	st	Z, r24
    128c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    128e:	f7 01       	movw	r30, r14
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	70 97       	sbiw	r30, 0x10	; 16
    1296:	80 83       	st	Z, r24
    1298:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    129a:	f5 01       	movw	r30, r10
    129c:	60 81       	ld	r22, Z
    129e:	71 81       	ldd	r23, Z+1	; 0x01
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	0e 94 3d 11 	call	0x227a	; 0x227a <_Z6swap32m>
    12a8:	fe 01       	movw	r30, r28
    12aa:	e0 5b       	subi	r30, 0xB0	; 176
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 83       	st	Z, r22
    12b0:	71 83       	std	Z+1, r23	; 0x01
    12b2:	82 83       	std	Z+2, r24	; 0x02
    12b4:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    12b6:	34 96       	adiw	r30, 0x04	; 4
    12b8:	10 82       	st	Z, r1
    12ba:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 0;
    12bc:	32 96       	adiw	r30, 0x02	; 2
    12be:	10 82       	st	Z, r1
    12c0:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.temperature = temperature;
    12c2:	32 96       	adiw	r30, 0x02	; 2
    12c4:	80 91 d2 24 	lds	r24, 0x24D2
    12c8:	90 91 d3 24 	lds	r25, 0x24D3
    12cc:	80 83       	st	Z, r24
    12ce:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    12d0:	32 96       	adiw	r30, 0x02	; 2
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	80 83       	st	Z, r24
    12d8:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    12da:	32 96       	adiw	r30, 0x02	; 2
    12dc:	10 82       	st	Z, r1
    12de:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    12e0:	36 96       	adiw	r30, 0x06	; 6
    12e2:	10 82       	st	Z, r1
    12e4:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    12e6:	32 96       	adiw	r30, 0x02	; 2
    12e8:	8d e0       	ldi	r24, 0x0D	; 13
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    12f0:	47 e0       	ldi	r20, 0x07	; 7
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	88 e8       	ldi	r24, 0x88	; 136
    12f6:	95 e2       	ldi	r25, 0x25	; 37
    12f8:	0e 94 a4 30 	call	0x6148	; 0x6148 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    12fc:	6e a9       	ldd	r22, Y+54	; 0x36
    12fe:	7f a9       	ldd	r23, Y+55	; 0x37
    1300:	88 e8       	ldi	r24, 0x88	; 136
    1302:	95 e2       	ldi	r25, 0x25	; 37
    1304:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1308:	68 ad       	ldd	r22, Y+56	; 0x38
    130a:	79 ad       	ldd	r23, Y+57	; 0x39
    130c:	88 e8       	ldi	r24, 0x88	; 136
    130e:	95 e2       	ldi	r25, 0x25	; 37
    1310:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN7CTimerF8SetCOMPAEj>
	//laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    1314:	21 e0       	ldi	r18, 0x01	; 1
    1316:	ae 01       	movw	r20, r28
    1318:	6e e4       	ldi	r22, 0x4E	; 78
    131a:	76 e0       	ldi	r23, 0x06	; 6
    131c:	88 e8       	ldi	r24, 0x88	; 136
    131e:	95 e2       	ldi	r25, 0x25	; 37
    1320:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	ae 01       	movw	r20, r28
    1328:	66 e7       	ldi	r22, 0x76	; 118
    132a:	7e e0       	ldi	r23, 0x0E	; 14
    132c:	88 e8       	ldi	r24, 0x88	; 136
    132e:	95 e2       	ldi	r25, 0x25	; 37
    1330:	0e 94 2d 31 	call	0x625a	; 0x625a <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    1334:	60 e1       	ldi	r22, 0x10	; 16
    1336:	88 e8       	ldi	r24, 0x88	; 136
    1338:	95 e2       	ldi	r25, 0x25	; 37
    133a:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	//laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    133e:	60 e1       	ldi	r22, 0x10	; 16
    1340:	88 e8       	ldi	r24, 0x88	; 136
    1342:	95 e2       	ldi	r25, 0x25	; 37
    1344:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	//laserTimer.ChannelSet(TIMER_CHANNEL_B);
}
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	08 95       	ret

0000135e <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	1f 92       	push	r1
    136c:	1f 92       	push	r1
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 39 11 	call	0x2272	; 0x2272 <_Z4swapj>
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1380:	87 01       	movw	r16, r14
    1382:	0a 58       	subi	r16, 0x8A	; 138
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	22 e0       	ldi	r18, 0x02	; 2
    1388:	ae 01       	movw	r20, r28
    138a:	4f 5f       	subi	r20, 0xFF	; 255
    138c:	5f 4f       	sbci	r21, 0xFF	; 255
    138e:	63 e0       	ldi	r22, 0x03	; 3
    1390:	f8 01       	movw	r30, r16
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    139a:	f8 01       	movw	r30, r16
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    13a4:	a7 01       	movw	r20, r14
    13a6:	4e 5b       	subi	r20, 0xBE	; 190
    13a8:	5f 4f       	sbci	r21, 0xFF	; 255
    13aa:	26 e2       	ldi	r18, 0x26	; 38
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    13bc:	f8 01       	movw	r30, r16
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    13c6:	68 ea       	ldi	r22, 0xA8	; 168
    13c8:	71 e6       	ldi	r23, 0x61	; 97
    13ca:	8e e8       	ldi	r24, 0x8E	; 142
    13cc:	95 e2       	ldi	r25, 0x25	; 37
    13ce:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	f7 01       	movw	r30, r14
    13d8:	84 87       	std	Z+12, r24	; 0x0c
    13da:	95 87       	std	Z+13, r25	; 0x0d
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	08 95       	ret

000013ee <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 d0       	rcall	.+0      	; 0x1404 <_ZN16CLaserControlApp3RunEv+0x16>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <_ZN16CLaserControlApp3RunEv+0x18>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    140c:	8c 01       	movw	r16, r24
    140e:	0a 58       	subi	r16, 0x8A	; 138
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	42 e0       	ldi	r20, 0x02	; 2
    1414:	63 e0       	ldi	r22, 0x03	; 3
    1416:	f8 01       	movw	r30, r16
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    1420:	f8 01       	movw	r30, r16
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    142a:	f8 01       	movw	r30, r16
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	0e 94 ef 29 	call	0x53de	; 0x53de <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1434:	ff ef       	ldi	r31, 0xFF	; 255
    1436:	29 ef       	ldi	r18, 0xF9	; 249
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	f1 50       	subi	r31, 0x01	; 1
    143c:	20 40       	sbci	r18, 0x00	; 0
    143e:	80 40       	sbci	r24, 0x00	; 0
    1440:	e1 f7       	brne	.-8      	; 0x143a <_ZN16CLaserControlApp3RunEv+0x4c>
    1442:	00 c0       	rjmp	.+0      	; 0x1444 <_ZN16CLaserControlApp3RunEv+0x56>
    1444:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    1446:	f7 01       	movw	r30, r14
    1448:	84 85       	ldd	r24, Z+12	; 0x0c
    144a:	95 85       	ldd	r25, Z+13	; 0x0d
    144c:	9f 70       	andi	r25, 0x0F	; 15
    144e:	89 2b       	or	r24, r25
    1450:	09 f4       	brne	.+2      	; 0x1454 <_ZN16CLaserControlApp3RunEv+0x66>
    1452:	41 c0       	rjmp	.+130    	; 0x14d6 <_ZN16CLaserControlApp3RunEv+0xe8>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    1454:	22 e0       	ldi	r18, 0x02	; 2
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	42 ed       	ldi	r20, 0xD2	; 210
    145a:	54 e2       	ldi	r21, 0x24	; 36
    145c:	6c e0       	ldi	r22, 0x0C	; 12
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	c7 01       	movw	r24, r14
    1462:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1466:	f7 01       	movw	r30, r14
    1468:	ee 58       	subi	r30, 0x8E	; 142
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	44 97       	sbiw	r24, 0x14	; 20
    1472:	28 f4       	brcc	.+10     	; 0x147e <_ZN16CLaserControlApp3RunEv+0x90>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	3c 97       	sbiw	r30, 0x0c	; 12
    147a:	80 83       	st	Z, r24
    147c:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    147e:	f7 01       	movw	r30, r14
    1480:	ee 58       	subi	r30, 0x8E	; 142
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	44 97       	sbiw	r24, 0x14	; 20
    148a:	28 f0       	brcs	.+10     	; 0x1496 <_ZN16CLaserControlApp3RunEv+0xa8>
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	89 97       	sbiw	r24, 0x29	; 41
    1492:	08 f4       	brcc	.+2      	; 0x1496 <_ZN16CLaserControlApp3RunEv+0xa8>
    1494:	02 c4       	rjmp	.+2052   	; 0x1c9a <_ZN16CLaserControlApp3RunEv+0x8ac>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    1496:	f7 01       	movw	r30, r14
    1498:	ee 58       	subi	r30, 0x8E	; 142
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	89 97       	sbiw	r24, 0x29	; 41
    14a2:	28 f0       	brcs	.+10     	; 0x14ae <_ZN16CLaserControlApp3RunEv+0xc0>
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	3c 97       	sbiw	r30, 0x0c	; 12
    14aa:	80 83       	st	Z, r24
    14ac:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    14ae:	22 e0       	ldi	r18, 0x02	; 2
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	a7 01       	movw	r20, r14
    14b4:	4a 59       	subi	r20, 0x9A	; 154
    14b6:	5f 4f       	sbci	r21, 0xFF	; 255
    14b8:	63 e1       	ldi	r22, 0x13	; 19
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	c7 01       	movw	r24, r14
    14be:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    14c2:	22 e0       	ldi	r18, 0x02	; 2
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	a7 01       	movw	r20, r14
    14c8:	4e 58       	subi	r20, 0x8E	; 142
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	6e e0       	ldi	r22, 0x0E	; 14
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	c7 01       	movw	r24, r14
    14d2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    14d6:	f7 01       	movw	r30, r14
    14d8:	84 85       	ldd	r24, Z+12	; 0x0c
    14da:	95 85       	ldd	r25, Z+13	; 0x0d
    14dc:	88 73       	andi	r24, 0x38	; 56
    14de:	99 27       	eor	r25, r25
    14e0:	89 2b       	or	r24, r25
    14e2:	79 f0       	breq	.+30     	; 0x1502 <_ZN16CLaserControlApp3RunEv+0x114>
	{
		if (temperature > 300)
    14e4:	80 91 d2 24 	lds	r24, 0x24D2
    14e8:	90 91 d3 24 	lds	r25, 0x24D3
    14ec:	8d 32       	cpi	r24, 0x2D	; 45
    14ee:	91 40       	sbci	r25, 0x01	; 1
    14f0:	44 f0       	brlt	.+16     	; 0x1502 <_ZN16CLaserControlApp3RunEv+0x114>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    14f2:	69 e2       	ldi	r22, 0x29	; 41
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	c7 01       	movw	r24, r14
    14f8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    14fc:	f7 01       	movw	r30, r14
    14fe:	87 85       	ldd	r24, Z+15	; 0x0f
    1500:	80 8b       	std	Z+16, r24	; 0x10
		}
	}
	
	switch (state)
    1502:	f7 01       	movw	r30, r14
    1504:	84 85       	ldd	r24, Z+12	; 0x0c
    1506:	95 85       	ldd	r25, Z+13	; 0x0d
    1508:	81 15       	cp	r24, r1
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	9f 07       	cpc	r25, r31
    150e:	09 f4       	brne	.+2      	; 0x1512 <_ZN16CLaserControlApp3RunEv+0x124>
    1510:	ad c2       	rjmp	.+1370   	; 0x1a6c <_ZN16CLaserControlApp3RunEv+0x67e>
    1512:	1c f5       	brge	.+70     	; 0x155a <_ZN16CLaserControlApp3RunEv+0x16c>
    1514:	88 30       	cpi	r24, 0x08	; 8
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <_ZN16CLaserControlApp3RunEv+0x12e>
    151a:	bc c1       	rjmp	.+888    	; 0x1894 <_ZN16CLaserControlApp3RunEv+0x4a6>
    151c:	64 f4       	brge	.+24     	; 0x1536 <_ZN16CLaserControlApp3RunEv+0x148>
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <_ZN16CLaserControlApp3RunEv+0x138>
    1524:	4d c1       	rjmp	.+666    	; 0x17c0 <_ZN16CLaserControlApp3RunEv+0x3d2>
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	91 05       	cpc	r25, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <_ZN16CLaserControlApp3RunEv+0x140>
    152c:	51 c0       	rjmp	.+162    	; 0x15d0 <_ZN16CLaserControlApp3RunEv+0x1e2>
    152e:	89 2b       	or	r24, r25
    1530:	09 f0       	breq	.+2      	; 0x1534 <_ZN16CLaserControlApp3RunEv+0x146>
    1532:	92 c3       	rjmp	.+1828   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
    1534:	42 c0       	rjmp	.+132    	; 0x15ba <_ZN16CLaserControlApp3RunEv+0x1cc>
    1536:	80 32       	cpi	r24, 0x20	; 32
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <_ZN16CLaserControlApp3RunEv+0x150>
    153c:	bc c1       	rjmp	.+888    	; 0x18b6 <_ZN16CLaserControlApp3RunEv+0x4c8>
    153e:	24 f4       	brge	.+8      	; 0x1548 <_ZN16CLaserControlApp3RunEv+0x15a>
    1540:	40 97       	sbiw	r24, 0x10	; 16
    1542:	09 f4       	brne	.+2      	; 0x1546 <_ZN16CLaserControlApp3RunEv+0x158>
    1544:	b8 c1       	rjmp	.+880    	; 0x18b6 <_ZN16CLaserControlApp3RunEv+0x4c8>
    1546:	88 c3       	rjmp	.+1808   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
    1548:	80 34       	cpi	r24, 0x40	; 64
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <_ZN16CLaserControlApp3RunEv+0x162>
    154e:	6d c1       	rjmp	.+730    	; 0x182a <_ZN16CLaserControlApp3RunEv+0x43c>
    1550:	81 15       	cp	r24, r1
    1552:	91 40       	sbci	r25, 0x01	; 1
    1554:	09 f4       	brne	.+2      	; 0x1558 <_ZN16CLaserControlApp3RunEv+0x16a>
    1556:	53 c2       	rjmp	.+1190   	; 0x19fe <_ZN16CLaserControlApp3RunEv+0x610>
    1558:	7f c3       	rjmp	.+1790   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
    155a:	81 15       	cp	r24, r1
    155c:	f7 e0       	ldi	r31, 0x07	; 7
    155e:	9f 07       	cpc	r25, r31
    1560:	09 f4       	brne	.+2      	; 0x1564 <_ZN16CLaserControlApp3RunEv+0x176>
    1562:	27 c2       	rjmp	.+1102   	; 0x19b2 <_ZN16CLaserControlApp3RunEv+0x5c4>
    1564:	ac f4       	brge	.+42     	; 0x1590 <_ZN16CLaserControlApp3RunEv+0x1a2>
    1566:	81 15       	cp	r24, r1
    1568:	e4 e0       	ldi	r30, 0x04	; 4
    156a:	9e 07       	cpc	r25, r30
    156c:	09 f4       	brne	.+2      	; 0x1570 <_ZN16CLaserControlApp3RunEv+0x182>
    156e:	e7 c2       	rjmp	.+1486   	; 0x1b3e <_ZN16CLaserControlApp3RunEv+0x750>
    1570:	2c f4       	brge	.+10     	; 0x157c <_ZN16CLaserControlApp3RunEv+0x18e>
    1572:	81 15       	cp	r24, r1
    1574:	93 40       	sbci	r25, 0x03	; 3
    1576:	09 f4       	brne	.+2      	; 0x157a <_ZN16CLaserControlApp3RunEv+0x18c>
    1578:	af c2       	rjmp	.+1374   	; 0x1ad8 <_ZN16CLaserControlApp3RunEv+0x6ea>
    157a:	6e c3       	rjmp	.+1756   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
    157c:	81 15       	cp	r24, r1
    157e:	e5 e0       	ldi	r30, 0x05	; 5
    1580:	9e 07       	cpc	r25, r30
    1582:	09 f4       	brne	.+2      	; 0x1586 <_ZN16CLaserControlApp3RunEv+0x198>
    1584:	2d c2       	rjmp	.+1114   	; 0x19e0 <_ZN16CLaserControlApp3RunEv+0x5f2>
    1586:	81 15       	cp	r24, r1
    1588:	96 40       	sbci	r25, 0x06	; 6
    158a:	09 f4       	brne	.+2      	; 0x158e <_ZN16CLaserControlApp3RunEv+0x1a0>
    158c:	00 c2       	rjmp	.+1024   	; 0x198e <_ZN16CLaserControlApp3RunEv+0x5a0>
    158e:	64 c3       	rjmp	.+1736   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
    1590:	81 15       	cp	r24, r1
    1592:	20 e2       	ldi	r18, 0x20	; 32
    1594:	92 07       	cpc	r25, r18
    1596:	09 f4       	brne	.+2      	; 0x159a <_ZN16CLaserControlApp3RunEv+0x1ac>
    1598:	10 c3       	rjmp	.+1568   	; 0x1bba <_ZN16CLaserControlApp3RunEv+0x7cc>
    159a:	2c f4       	brge	.+10     	; 0x15a6 <_ZN16CLaserControlApp3RunEv+0x1b8>
    159c:	81 15       	cp	r24, r1
    159e:	90 41       	sbci	r25, 0x10	; 16
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <_ZN16CLaserControlApp3RunEv+0x1b6>
    15a2:	d3 c2       	rjmp	.+1446   	; 0x1b4a <_ZN16CLaserControlApp3RunEv+0x75c>
    15a4:	59 c3       	rjmp	.+1714   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
    15a6:	81 15       	cp	r24, r1
    15a8:	20 e3       	ldi	r18, 0x30	; 48
    15aa:	92 07       	cpc	r25, r18
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <_ZN16CLaserControlApp3RunEv+0x1c2>
    15ae:	32 c3       	rjmp	.+1636   	; 0x1c14 <_ZN16CLaserControlApp3RunEv+0x826>
    15b0:	81 15       	cp	r24, r1
    15b2:	90 44       	sbci	r25, 0x40	; 64
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <_ZN16CLaserControlApp3RunEv+0x1ca>
    15b6:	4b c3       	rjmp	.+1686   	; 0x1c4e <_ZN16CLaserControlApp3RunEv+0x860>
    15b8:	4f c3       	rjmp	.+1694   	; 0x1c58 <_ZN16CLaserControlApp3RunEv+0x86a>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    15ba:	63 e0       	ldi	r22, 0x03	; 3
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	c7 01       	movw	r24, r14
    15c0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	f7 01       	movw	r30, r14
    15ca:	84 87       	std	Z+12, r24	; 0x0c
    15cc:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    15ce:	48 c3       	rjmp	.+1680   	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    15d0:	f7 01       	movw	r30, r14
    15d2:	ec 5a       	subi	r30, 0xAC	; 172
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	a0 80       	ld	r10, Z
    15d8:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    15da:	87 01       	movw	r16, r14
    15dc:	0a 5a       	subi	r16, 0xAA	; 170
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	f8 01       	movw	r30, r16
    15e2:	c0 80       	ld	r12, Z
    15e4:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    15e6:	46 e0       	ldi	r20, 0x06	; 6
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	62 e0       	ldi	r22, 0x02	; 2
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	c7 01       	movw	r24, r14
    15f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    15f4:	ff ef       	ldi	r31, 0xFF	; 255
    15f6:	29 ef       	ldi	r18, 0xF9	; 249
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	f1 50       	subi	r31, 0x01	; 1
    15fc:	20 40       	sbci	r18, 0x00	; 0
    15fe:	80 40       	sbci	r24, 0x00	; 0
    1600:	e1 f7       	brne	.-8      	; 0x15fa <_ZN16CLaserControlApp3RunEv+0x20c>
    1602:	00 c0       	rjmp	.+0      	; 0x1604 <_ZN16CLaserControlApp3RunEv+0x216>
    1604:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    1606:	42 e0       	ldi	r20, 0x02	; 2
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	6d e0       	ldi	r22, 0x0D	; 13
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	c7 01       	movw	r24, r14
    1610:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	e9 ef       	ldi	r30, 0xF9	; 249
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	91 50       	subi	r25, 0x01	; 1
    161c:	e0 40       	sbci	r30, 0x00	; 0
    161e:	f0 40       	sbci	r31, 0x00	; 0
    1620:	e1 f7       	brne	.-8      	; 0x161a <_ZN16CLaserControlApp3RunEv+0x22c>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <_ZN16CLaserControlApp3RunEv+0x236>
    1624:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    1626:	42 e0       	ldi	r20, 0x02	; 2
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	c7 01       	movw	r24, r14
    1630:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1634:	2f ef       	ldi	r18, 0xFF	; 255
    1636:	89 ef       	ldi	r24, 0xF9	; 249
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	21 50       	subi	r18, 0x01	; 1
    163c:	80 40       	sbci	r24, 0x00	; 0
    163e:	90 40       	sbci	r25, 0x00	; 0
    1640:	e1 f7       	brne	.-8      	; 0x163a <_ZN16CLaserControlApp3RunEv+0x24c>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <_ZN16CLaserControlApp3RunEv+0x256>
    1644:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    1646:	42 e0       	ldi	r20, 0x02	; 2
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	6a e0       	ldi	r22, 0x0A	; 10
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	c7 01       	movw	r24, r14
    1650:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1654:	ef ef       	ldi	r30, 0xFF	; 255
    1656:	f9 ef       	ldi	r31, 0xF9	; 249
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	e1 50       	subi	r30, 0x01	; 1
    165c:	f0 40       	sbci	r31, 0x00	; 0
    165e:	20 40       	sbci	r18, 0x00	; 0
    1660:	e1 f7       	brne	.-8      	; 0x165a <_ZN16CLaserControlApp3RunEv+0x26c>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <_ZN16CLaserControlApp3RunEv+0x276>
    1664:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    1666:	42 e0       	ldi	r20, 0x02	; 2
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	6b e0       	ldi	r22, 0x0B	; 11
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	c7 01       	movw	r24, r14
    1670:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	99 ef       	ldi	r25, 0xF9	; 249
    1678:	e0 e0       	ldi	r30, 0x00	; 0
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	90 40       	sbci	r25, 0x00	; 0
    167e:	e0 40       	sbci	r30, 0x00	; 0
    1680:	e1 f7       	brne	.-8      	; 0x167a <_ZN16CLaserControlApp3RunEv+0x28c>
    1682:	00 c0       	rjmp	.+0      	; 0x1684 <_ZN16CLaserControlApp3RunEv+0x296>
    1684:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    1686:	f7 01       	movw	r30, r14
    1688:	fe 96       	adiw	r30, 0x3e	; 62
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	0e 94 3d 11 	call	0x227a	; 0x227a <_Z6swap32m>
    1696:	f7 01       	movw	r30, r14
    1698:	e0 5b       	subi	r30, 0xB0	; 176
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 83       	st	Z, r22
    169e:	71 83       	std	Z+1, r23	; 0x01
    16a0:	82 83       	std	Z+2, r24	; 0x02
    16a2:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature = temperature;
    16a4:	80 91 d2 24 	lds	r24, 0x24D2
    16a8:	90 91 d3 24 	lds	r25, 0x24D3
    16ac:	38 96       	adiw	r30, 0x08	; 8
    16ae:	80 83       	st	Z, r24
    16b0:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    16b2:	7a 96       	adiw	r30, 0x1a	; 26
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	76 97       	sbiw	r30, 0x16	; 22
    16ba:	80 83       	st	Z, r24
    16bc:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    16be:	f8 01       	movw	r30, r16
    16c0:	60 81       	ld	r22, Z
    16c2:	71 81       	ldd	r23, Z+1	; 0x01
    16c4:	6c 15       	cp	r22, r12
    16c6:	7d 05       	cpc	r23, r13
    16c8:	39 f0       	breq	.+14     	; 0x16d8 <_ZN16CLaserControlApp3RunEv+0x2ea>
				{
					PhototypePreset(laserDiodeData.phototype);
    16ca:	c7 01       	movw	r24, r14
    16cc:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	f7 01       	movw	r30, r14
    16d4:	81 8b       	std	Z+17, r24	; 0x11
    16d6:	4f c0       	rjmp	.+158    	; 0x1776 <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				if (melanin != laserDiodeData.melanin)
    16d8:	f7 01       	movw	r30, r14
    16da:	ec 5a       	subi	r30, 0xAC	; 172
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	6a 15       	cp	r22, r10
    16e4:	7b 05       	cpc	r23, r11
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <_ZN16CLaserControlApp3RunEv+0x308>
				{
					MelaninPreset(laserDiodeData.melanin);
    16e8:	c7 01       	movw	r24, r14
    16ea:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	f7 01       	movw	r30, r14
    16f2:	81 8b       	std	Z+17, r24	; 0x11
    16f4:	40 c0       	rjmp	.+128    	; 0x1776 <_ZN16CLaserControlApp3RunEv+0x388>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    16f6:	f7 01       	movw	r30, r14
    16f8:	ee 5b       	subi	r30, 0xBE	; 190
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    16fe:	f7 01       	movw	r30, r14
    1700:	96 85       	ldd	r25, Z+14	; 0x0e
    1702:	98 17       	cp	r25, r24
    1704:	19 f0       	breq	.+6      	; 0x170c <_ZN16CLaserControlApp3RunEv+0x31e>
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	91 8b       	std	Z+17, r25	; 0x11
    170a:	86 87       	std	Z+14, r24	; 0x0e
				
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    170c:	f7 01       	movw	r30, r14
    170e:	86 85       	ldd	r24, Z+14	; 0x0e
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	bc 01       	movw	r22, r24
    1714:	66 0f       	add	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	68 0f       	add	r22, r24
    171a:	79 1f       	adc	r23, r25
    171c:	66 0f       	add	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	68 5e       	subi	r22, 0xE8	; 232
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	6e 0d       	add	r22, r14
    1726:	7f 1d       	adc	r23, r15
    1728:	86 e0       	ldi	r24, 0x06	; 6
    172a:	fb 01       	movw	r30, r22
    172c:	d7 01       	movw	r26, r14
    172e:	ac 5b       	subi	r26, 0xBC	; 188
    1730:	bf 4f       	sbci	r27, 0xFF	; 255
    1732:	01 90       	ld	r0, Z+
    1734:	0d 92       	st	X+, r0
    1736:	8a 95       	dec	r24
    1738:	e1 f7       	brne	.-8      	; 0x1732 <_ZN16CLaserControlApp3RunEv+0x344>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    173a:	87 01       	movw	r16, r14
    173c:	06 5b       	subi	r16, 0xB6	; 182
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	c7 01       	movw	r24, r14
    1742:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1746:	f8 01       	movw	r30, r16
    1748:	20 83       	st	Z, r18
    174a:	31 83       	std	Z+1, r19	; 0x01
    174c:	42 83       	std	Z+2, r20	; 0x02
    174e:	53 83       	std	Z+3, r21	; 0x03
    1750:	64 83       	std	Z+4, r22	; 0x04
    1752:	75 83       	std	Z+5, r23	; 0x05
					laserPower = m_structLaserProfile[Profile].EnergyPercent;
    1754:	f7 01       	movw	r30, r14
    1756:	86 85       	ldd	r24, Z+14	; 0x0e
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	fc 01       	movw	r30, r24
    175c:	ee 0f       	add	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	e8 0f       	add	r30, r24
    1762:	f9 1f       	adc	r31, r25
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ee 0d       	add	r30, r14
    176a:	ff 1d       	adc	r31, r15
    176c:	84 8d       	ldd	r24, Z+28	; 0x1c
    176e:	95 8d       	ldd	r25, Z+29	; 0x1d
    1770:	f7 01       	movw	r30, r14
    1772:	84 af       	std	Z+60, r24	; 0x3c
    1774:	95 af       	std	Z+61, r25	; 0x3d
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    1776:	f7 01       	movw	r30, r14
    1778:	26 85       	ldd	r18, Z+14	; 0x0e
    177a:	a7 01       	movw	r20, r14
    177c:	4a 5b       	subi	r20, 0xBA	; 186
    177e:	5f 4f       	sbci	r21, 0xFF	; 255
    1780:	b7 01       	movw	r22, r14
    1782:	6c 5b       	subi	r22, 0xBC	; 188
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	c7 01       	movw	r24, r14
    1788:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    178c:	f7 01       	movw	r30, r14
    178e:	81 8b       	std	Z+17, r24	; 0x11
				
				laserPower = m_wMaxEnergy * laserPower / 100;
    1790:	44 89       	ldd	r20, Z+20	; 0x14
    1792:	55 89       	ldd	r21, Z+21	; 0x15
    1794:	84 ad       	ldd	r24, Z+60	; 0x3c
    1796:	95 ad       	ldd	r25, Z+61	; 0x3d
    1798:	48 9f       	mul	r20, r24
    179a:	90 01       	movw	r18, r0
    179c:	49 9f       	mul	r20, r25
    179e:	30 0d       	add	r19, r0
    17a0:	58 9f       	mul	r21, r24
    17a2:	30 0d       	add	r19, r0
    17a4:	11 24       	eor	r1, r1
    17a6:	36 95       	lsr	r19
    17a8:	27 95       	ror	r18
    17aa:	36 95       	lsr	r19
    17ac:	27 95       	ror	r18
    17ae:	ab e7       	ldi	r26, 0x7B	; 123
    17b0:	b4 e1       	ldi	r27, 0x14	; 20
    17b2:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	84 af       	std	Z+60, r24	; 0x3c
    17bc:	95 af       	std	Z+61, r25	; 0x3d
					laserDiodeData.laserprofile.EnergyPercent = m_wMaxEnergy;
					laserPower = m_wMaxEnergy;
					update = true;
				}*/
			}
		break;
    17be:	50 c2       	rjmp	.+1184   	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    17c0:	f7 01       	movw	r30, r14
    17c2:	82 89       	ldd	r24, Z+18	; 0x12
    17c4:	88 23       	and	r24, r24
    17c6:	b1 f0       	breq	.+44     	; 0x17f4 <_ZN16CLaserControlApp3RunEv+0x406>
				{
					timervar.timer_minutes = m_wMinutes;
    17c8:	e8 59       	subi	r30, 0x98	; 152
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    17d4:	32 96       	adiw	r30, 0x02	; 2
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	8b 83       	std	Y+3, r24	; 0x03
    17dc:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    17de:	24 e0       	ldi	r18, 0x04	; 4
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	ae 01       	movw	r20, r28
    17e4:	4f 5f       	subi	r20, 0xFF	; 255
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	6f e0       	ldi	r22, 0x0F	; 15
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	c7 01       	movw	r24, r14
    17ee:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
    17f2:	36 c2       	rjmp	.+1132   	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    17f4:	f7 01       	movw	r30, r14
    17f6:	86 85       	ldd	r24, Z+14	; 0x0e
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	ac 01       	movw	r20, r24
    17fc:	44 0f       	add	r20, r20
    17fe:	55 1f       	adc	r21, r21
    1800:	48 0f       	add	r20, r24
    1802:	59 1f       	adc	r21, r25
    1804:	44 0f       	add	r20, r20
    1806:	55 1f       	adc	r21, r21
    1808:	48 5e       	subi	r20, 0xE8	; 232
    180a:	5f 4f       	sbci	r21, 0xFF	; 255
    180c:	4e 0d       	add	r20, r14
    180e:	5f 1d       	adc	r21, r15
    1810:	26 e0       	ldi	r18, 0x06	; 6
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	62 e0       	ldi	r22, 0x02	; 2
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	c7 01       	movw	r24, r14
    181a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    181e:	6c e0       	ldi	r22, 0x0C	; 12
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	c7 01       	movw	r24, r14
    1824:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    1828:	1b c2       	rjmp	.+1078   	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    182a:	80 91 d2 24 	lds	r24, 0x24D2
    182e:	90 91 d3 24 	lds	r25, 0x24D3
    1832:	6a e0       	ldi	r22, 0x0A	; 10
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__divmodhi4>
    183a:	69 83       	std	Y+1, r22	; 0x01
    183c:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1842:	24 e0       	ldi	r18, 0x04	; 4
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	ae 01       	movw	r20, r28
    1848:	4f 5f       	subi	r20, 0xFF	; 255
    184a:	5f 4f       	sbci	r21, 0xFF	; 255
    184c:	6f e0       	ldi	r22, 0x0F	; 15
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	c7 01       	movw	r24, r14
    1852:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    1856:	f7 01       	movw	r30, r14
    1858:	e2 59       	subi	r30, 0x92	; 146
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	36 97       	sbiw	r30, 0x06	; 6
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1866:	38 96       	adiw	r30, 0x08	; 8
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	36 97       	sbiw	r30, 0x06	; 6
    186e:	80 83       	st	Z, r24
    1870:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	f7 01       	movw	r30, r14
    1876:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    1878:	80 91 d2 24 	lds	r24, 0x24D2
    187c:	90 91 d3 24 	lds	r25, 0x24D3
    1880:	82 32       	cpi	r24, 0x22	; 34
    1882:	91 40       	sbci	r25, 0x01	; 1
    1884:	0c f0       	brlt	.+2      	; 0x1888 <_ZN16CLaserControlApp3RunEv+0x49a>
    1886:	ec c1       	rjmp	.+984    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
					SetPictureId(PICID_WORK_PREPARE);
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	c7 01       	movw	r24, r14
    188e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1892:	e6 c1       	rjmp	.+972    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    1894:	80 91 d2 24 	lds	r24, 0x24D2
    1898:	90 91 d3 24 	lds	r25, 0x24D3
    189c:	8d 32       	cpi	r24, 0x2D	; 45
    189e:	91 40       	sbci	r25, 0x01	; 1
    18a0:	0c f4       	brge	.+2      	; 0x18a4 <_ZN16CLaserControlApp3RunEv+0x4b6>
    18a2:	de c1       	rjmp	.+956    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    18a4:	69 e2       	ldi	r22, 0x29	; 41
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	c7 01       	movw	r24, r14
    18aa:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    18ae:	f7 01       	movw	r30, r14
    18b0:	87 85       	ldd	r24, Z+15	; 0x0f
    18b2:	80 8b       	std	Z+16, r24	; 0x10
    18b4:	d5 c1       	rjmp	.+938    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    18b6:	f7 01       	movw	r30, r14
    18b8:	84 ad       	ldd	r24, Z+60	; 0x3c
    18ba:	95 ad       	ldd	r25, Z+61	; 0x3d
    18bc:	ac 01       	movw	r20, r24
    18be:	56 95       	lsr	r21
    18c0:	54 2f       	mov	r21, r20
    18c2:	44 27       	eor	r20, r20
    18c4:	57 95       	ror	r21
    18c6:	47 95       	ror	r20
    18c8:	98 2f       	mov	r25, r24
    18ca:	88 27       	eor	r24, r24
    18cc:	99 0f       	add	r25, r25
    18ce:	48 0f       	add	r20, r24
    18d0:	59 1f       	adc	r21, r25
    18d2:	9a 01       	movw	r18, r20
    18d4:	a1 e1       	ldi	r26, 0x11	; 17
    18d6:	b4 e0       	ldi	r27, 0x04	; 4
    18d8:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
    18dc:	48 1b       	sub	r20, r24
    18de:	59 0b       	sbc	r21, r25
    18e0:	56 95       	lsr	r21
    18e2:	47 95       	ror	r20
    18e4:	84 0f       	add	r24, r20
    18e6:	95 1f       	adc	r25, r21
    18e8:	96 95       	lsr	r25
    18ea:	87 95       	ror	r24
    18ec:	92 95       	swap	r25
    18ee:	82 95       	swap	r24
    18f0:	8f 70       	andi	r24, 0x0F	; 15
    18f2:	89 27       	eor	r24, r25
    18f4:	9f 70       	andi	r25, 0x0F	; 15
    18f6:	89 27       	eor	r24, r25
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	9e 83       	std	Y+6, r25	; 0x06
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1904:	42 e0       	ldi	r20, 0x02	; 2
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	be 01       	movw	r22, r28
    190a:	6b 5f       	subi	r22, 0xFB	; 251
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	81 e9       	ldi	r24, 0x91	; 145
    1910:	95 e2       	ldi	r25, 0x25	; 37
    1912:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN4CSPI4SendEPhj>
							
				if (!laserBoard.Footswitch())
    1916:	81 e5       	ldi	r24, 0x51	; 81
    1918:	95 e2       	ldi	r25, 0x25	; 37
    191a:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <_ZN11CLaserBoard10FootswitchEv>
    191e:	81 11       	cpse	r24, r1
    1920:	10 c0       	rjmp	.+32     	; 0x1942 <_ZN16CLaserControlApp3RunEv+0x554>
				{
					if (state != APP_WORKLIGHT)
    1922:	f7 01       	movw	r30, r14
    1924:	84 85       	ldd	r24, Z+12	; 0x0c
    1926:	95 85       	ldd	r25, Z+13	; 0x0d
    1928:	80 97       	sbiw	r24, 0x20	; 32
    192a:	d1 f0       	breq	.+52     	; 0x1960 <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_STARTED);
    192c:	60 e1       	ldi	r22, 0x10	; 16
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	c7 01       	movw	r24, r14
    1932:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	f7 01       	movw	r30, r14
    193c:	84 87       	std	Z+12, r24	; 0x0c
    193e:	95 87       	std	Z+13, r25	; 0x0d
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <_ZN16CLaserControlApp3RunEv+0x572>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    1942:	f7 01       	movw	r30, r14
    1944:	84 85       	ldd	r24, Z+12	; 0x0c
    1946:	95 85       	ldd	r25, Z+13	; 0x0d
    1948:	40 97       	sbiw	r24, 0x10	; 16
    194a:	51 f0       	breq	.+20     	; 0x1960 <_ZN16CLaserControlApp3RunEv+0x572>
					{
						SetPictureId(PICID_WORK_POWERON);
    194c:	6e e0       	ldi	r22, 0x0E	; 14
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	c7 01       	movw	r24, r14
    1952:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    1956:	80 e1       	ldi	r24, 0x10	; 16
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	f7 01       	movw	r30, r14
    195c:	84 87       	std	Z+12, r24	; 0x0c
    195e:	95 87       	std	Z+13, r25	; 0x0d
					}
				}
			
				uint32_t cnt = swap32(laserCounter);
    1960:	f7 01       	movw	r30, r14
    1962:	fe 96       	adiw	r30, 0x3e	; 62
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	0e 94 3d 11 	call	0x227a	; 0x227a <_Z6swap32m>
    1970:	69 83       	std	Y+1, r22	; 0x01
    1972:	7a 83       	std	Y+2, r23	; 0x02
    1974:	8b 83       	std	Y+3, r24	; 0x03
    1976:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    1978:	24 e0       	ldi	r18, 0x04	; 4
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	ae 01       	movw	r20, r28
    197e:	4f 5f       	subi	r20, 0xFF	; 255
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	68 e0       	ldi	r22, 0x08	; 8
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	c7 01       	movw	r24, r14
    1988:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    198c:	69 c1       	rjmp	.+722    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    198e:	81 e5       	ldi	r24, 0x51	; 81
    1990:	95 e2       	ldi	r25, 0x25	; 37
    1992:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    1996:	f7 01       	movw	r30, r14
    1998:	ee 58       	subi	r30, 0x8E	; 142
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	cd 97       	sbiw	r24, 0x3d	; 61
    19a2:	08 f4       	brcc	.+2      	; 0x19a6 <_ZN16CLaserControlApp3RunEv+0x5b8>
    19a4:	5d c1       	rjmp	.+698    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
				SetPictureId(PICID_WORKOnReady);
    19a6:	69 e1       	ldi	r22, 0x19	; 25
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	c7 01       	movw	r24, r14
    19ac:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    19b0:	57 c1       	rjmp	.+686    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    19b2:	81 e5       	ldi	r24, 0x51	; 81
    19b4:	95 e2       	ldi	r25, 0x25	; 37
    19b6:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    19ba:	f7 01       	movw	r30, r14
    19bc:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    19be:	80 91 d2 24 	lds	r24, 0x24D2
    19c2:	90 91 d3 24 	lds	r25, 0x24D3
    19c6:	82 32       	cpi	r24, 0x22	; 34
    19c8:	91 40       	sbci	r25, 0x01	; 1
    19ca:	0c f0       	brlt	.+2      	; 0x19ce <_ZN16CLaserControlApp3RunEv+0x5e0>
    19cc:	49 c1       	rjmp	.+658    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
			{
				prepare = true;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	f7 01       	movw	r30, r14
    19d2:	82 8b       	std	Z+18, r24	; 0x12
				SetPictureId(PIC_ID_last);
    19d4:	60 89       	ldd	r22, Z+16	; 0x10
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	c7 01       	movw	r24, r14
    19da:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    19de:	40 c1       	rjmp	.+640    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    19e0:	81 e5       	ldi	r24, 0x51	; 81
    19e2:	95 e2       	ldi	r25, 0x25	; 37
    19e4:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    19e8:	80 91 68 06 	lds	r24, 0x0668
    19ec:	85 ff       	sbrs	r24, 5
    19ee:	38 c1       	rjmp	.+624    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
				SetPictureId(PIC_ID_last);
    19f0:	f7 01       	movw	r30, r14
    19f2:	60 89       	ldd	r22, Z+16	; 0x10
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	c7 01       	movw	r24, r14
    19f8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    19fc:	31 c1       	rjmp	.+610    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		
		// Commands
		case APP_WORKOnReady:
			{
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    19fe:	81 e5       	ldi	r24, 0x51	; 81
    1a00:	95 e2       	ldi	r25, 0x25	; 37
    1a02:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1a06:	f7 01       	movw	r30, r14
    1a08:	e6 5a       	subi	r30, 0xA6	; 166
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	2c ec       	ldi	r18, 0xCC	; 204
    1a12:	28 9f       	mul	r18, r24
    1a14:	b0 01       	movw	r22, r0
    1a16:	29 9f       	mul	r18, r25
    1a18:	70 0d       	add	r23, r0
    1a1a:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1a1c:	82 e8       	ldi	r24, 0x82	; 130
    1a1e:	95 e2       	ldi	r25, 0x25	; 37
    1a20:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	f7 01       	movw	r30, r14
    1a28:	83 8b       	std	Z+19, r24	; 0x13
				
				prepare = true;
    1a2a:	82 8b       	std	Z+18, r24	; 0x12
				m_wMinutes = m_wSetMin;
    1a2c:	e2 59       	subi	r30, 0x92	; 146
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	36 97       	sbiw	r30, 0x06	; 6
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1a3a:	38 96       	adiw	r30, 0x08	; 8
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	36 97       	sbiw	r30, 0x06	; 6
    1a42:	80 83       	st	Z, r24
    1a44:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    1a46:	80 91 d2 24 	lds	r24, 0x24D2
    1a4a:	90 91 d3 24 	lds	r25, 0x24D3
    1a4e:	83 32       	cpi	r24, 0x23	; 35
    1a50:	91 40       	sbci	r25, 0x01	; 1
    1a52:	34 f0       	brlt	.+12     	; 0x1a60 <_ZN16CLaserControlApp3RunEv+0x672>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1a54:	67 e2       	ldi	r22, 0x27	; 39
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	c7 01       	movw	r24, r14
    1a5a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a5e:	00 c1       	rjmp	.+512    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1a60:	67 e0       	ldi	r22, 0x07	; 7
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	c7 01       	movw	r24, r14
    1a66:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
    1a6a:	fa c0       	rjmp	.+500    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	84 ad       	ldd	r24, Z+60	; 0x3c
    1a70:	95 ad       	ldd	r25, Z+61	; 0x3d
    1a72:	ac 01       	movw	r20, r24
    1a74:	56 95       	lsr	r21
    1a76:	54 2f       	mov	r21, r20
    1a78:	44 27       	eor	r20, r20
    1a7a:	57 95       	ror	r21
    1a7c:	47 95       	ror	r20
    1a7e:	98 2f       	mov	r25, r24
    1a80:	88 27       	eor	r24, r24
    1a82:	99 0f       	add	r25, r25
    1a84:	48 0f       	add	r20, r24
    1a86:	59 1f       	adc	r21, r25
    1a88:	9a 01       	movw	r18, r20
    1a8a:	a1 e1       	ldi	r26, 0x11	; 17
    1a8c:	b4 e0       	ldi	r27, 0x04	; 4
    1a8e:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
    1a92:	48 1b       	sub	r20, r24
    1a94:	59 0b       	sbc	r21, r25
    1a96:	56 95       	lsr	r21
    1a98:	47 95       	ror	r20
    1a9a:	84 0f       	add	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	96 95       	lsr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	92 95       	swap	r25
    1aa4:	82 95       	swap	r24
    1aa6:	8f 70       	andi	r24, 0x0F	; 15
    1aa8:	89 27       	eor	r24, r25
    1aaa:	9f 70       	andi	r25, 0x0F	; 15
    1aac:	89 27       	eor	r24, r25
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1aba:	42 e0       	ldi	r20, 0x02	; 2
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	be 01       	movw	r22, r28
    1ac0:	6f 5f       	subi	r22, 0xFF	; 255
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	81 e9       	ldi	r24, 0x91	; 145
    1ac6:	95 e2       	ldi	r25, 0x25	; 37
    1ac8:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    1acc:	6e e0       	ldi	r22, 0x0E	; 14
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1ad6:	c4 c0       	rjmp	.+392    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1ad8:	6a e0       	ldi	r22, 0x0A	; 10
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	c7 01       	movw	r24, r14
    1ade:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1ae2:	88 e8       	ldi	r24, 0x88	; 136
    1ae4:	95 e2       	ldi	r25, 0x25	; 37
    1ae6:	0e 94 cc 30 	call	0x6198	; 0x6198 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1aea:	60 e1       	ldi	r22, 0x10	; 16
    1aec:	88 e8       	ldi	r24, 0x88	; 136
    1aee:	95 e2       	ldi	r25, 0x25	; 37
    1af0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1af4:	60 e2       	ldi	r22, 0x20	; 32
    1af6:	88 e8       	ldi	r24, 0x88	; 136
    1af8:	95 e2       	ldi	r25, 0x25	; 37
    1afa:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1afe:	81 e5       	ldi	r24, 0x51	; 81
    1b00:	95 e2       	ldi	r25, 0x25	; 37
    1b02:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    1b06:	f7 01       	movw	r30, r14
    1b08:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    1b0a:	81 e5       	ldi	r24, 0x51	; 81
    1b0c:	95 e2       	ldi	r25, 0x25	; 37
    1b0e:	0e 94 ad 2c 	call	0x595a	; 0x595a <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1b12:	f7 01       	movw	r30, r14
    1b14:	fe 96       	adiw	r30, 0x3e	; 62
    1b16:	40 81       	ld	r20, Z
    1b18:	51 81       	ldd	r21, Z+1	; 0x01
    1b1a:	62 81       	ldd	r22, Z+2	; 0x02
    1b1c:	73 81       	ldd	r23, Z+3	; 0x03
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 8e 34 	call	0x691c	; 0x691c <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1b26:	19 82       	std	Y+1, r1	; 0x01
    1b28:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1b2a:	42 e0       	ldi	r20, 0x02	; 2
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	be 01       	movw	r22, r28
    1b30:	6f 5f       	subi	r22, 0xFF	; 255
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	81 e9       	ldi	r24, 0x91	; 145
    1b36:	95 e2       	ldi	r25, 0x25	; 37
    1b38:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN4CSPI4SendEPhj>
			}
		break;
    1b3c:	91 c0       	rjmp	.+290    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1b3e:	6a e0       	ldi	r22, 0x0A	; 10
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	c7 01       	movw	r24, r14
    1b44:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1b48:	8b c0       	rjmp	.+278    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1b4a:	42 e0       	ldi	r20, 0x02	; 2
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	61 e1       	ldi	r22, 0x11	; 17
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	c7 01       	movw	r24, r14
    1b54:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1b58:	ff ef       	ldi	r31, 0xFF	; 255
    1b5a:	21 ee       	ldi	r18, 0xE1	; 225
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	f1 50       	subi	r31, 0x01	; 1
    1b60:	20 40       	sbci	r18, 0x00	; 0
    1b62:	80 40       	sbci	r24, 0x00	; 0
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <_ZN16CLaserControlApp3RunEv+0x770>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <_ZN16CLaserControlApp3RunEv+0x77a>
    1b68:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1b6a:	42 e0       	ldi	r20, 0x02	; 2
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	62 e1       	ldi	r22, 0x12	; 18
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	c7 01       	movw	r24, r14
    1b74:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
    1b78:	9f ef       	ldi	r25, 0xFF	; 255
    1b7a:	e1 ee       	ldi	r30, 0xE1	; 225
    1b7c:	f4 e0       	ldi	r31, 0x04	; 4
    1b7e:	91 50       	subi	r25, 0x01	; 1
    1b80:	e0 40       	sbci	r30, 0x00	; 0
    1b82:	f0 40       	sbci	r31, 0x00	; 0
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <_ZN16CLaserControlApp3RunEv+0x790>
    1b86:	00 c0       	rjmp	.+0      	; 0x1b88 <_ZN16CLaserControlApp3RunEv+0x79a>
    1b88:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	ee 59       	subi	r30, 0x9E	; 158
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	20 81       	ld	r18, Z
    1b92:	31 81       	ldd	r19, Z+1	; 0x01
    1b94:	c9 01       	movw	r24, r18
    1b96:	a0 e0       	ldi	r26, 0x00	; 0
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	90 51       	subi	r25, 0x10	; 16
    1b9c:	af 4f       	sbci	r26, 0xFF	; 255
    1b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba0:	22 27       	eor	r18, r18
    1ba2:	38 2f       	mov	r19, r24
    1ba4:	49 2f       	mov	r20, r25
    1ba6:	5a 2f       	mov	r21, r26
    1ba8:	00 e0       	ldi	r16, 0x00	; 0
    1baa:	1c e0       	ldi	r17, 0x0C	; 12
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	71 e0       	ldi	r23, 0x01	; 1
    1bb0:	88 e7       	ldi	r24, 0x78	; 120
    1bb2:	95 e2       	ldi	r25, 0x25	; 37
    1bb4:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1bb8:	53 c0       	rjmp	.+166    	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
    1bba:	2f ef       	ldi	r18, 0xFF	; 255
    1bbc:	87 ea       	ldi	r24, 0xA7	; 167
    1bbe:	91 e6       	ldi	r25, 0x61	; 97
    1bc0:	21 50       	subi	r18, 0x01	; 1
    1bc2:	80 40       	sbci	r24, 0x00	; 0
    1bc4:	90 40       	sbci	r25, 0x00	; 0
    1bc6:	e1 f7       	brne	.-8      	; 0x1bc0 <_ZN16CLaserControlApp3RunEv+0x7d2>
    1bc8:	00 c0       	rjmp	.+0      	; 0x1bca <_ZN16CLaserControlApp3RunEv+0x7dc>
    1bca:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1bcc:	42 e0       	ldi	r20, 0x02	; 2
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	62 e1       	ldi	r22, 0x12	; 18
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1bda:	f7 01       	movw	r30, r14
    1bdc:	ec 59       	subi	r30, 0x9C	; 156
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	20 81       	ld	r18, Z
    1be2:	31 81       	ldd	r19, Z+1	; 0x01
    1be4:	32 97       	sbiw	r30, 0x02	; 2
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	28 0f       	add	r18, r24
    1bec:	39 1f       	adc	r19, r25
    1bee:	c9 01       	movw	r24, r18
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	90 51       	subi	r25, 0x10	; 16
    1bf6:	af 4f       	sbci	r26, 0xFF	; 255
    1bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfa:	22 27       	eor	r18, r18
    1bfc:	38 2f       	mov	r19, r24
    1bfe:	49 2f       	mov	r20, r25
    1c00:	5a 2f       	mov	r21, r26
    1c02:	00 e0       	ldi	r16, 0x00	; 0
    1c04:	11 e0       	ldi	r17, 0x01	; 1
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	7d e0       	ldi	r23, 0x0D	; 13
    1c0a:	88 e7       	ldi	r24, 0x78	; 120
    1c0c:	95 e2       	ldi	r25, 0x25	; 37
    1c0e:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1c12:	26 c0       	rjmp	.+76     	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1c14:	f7 01       	movw	r30, r14
    1c16:	ec 59       	subi	r30, 0x9C	; 156
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	20 81       	ld	r18, Z
    1c1c:	31 81       	ldd	r19, Z+1	; 0x01
    1c1e:	32 97       	sbiw	r30, 0x02	; 2
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	28 0f       	add	r18, r24
    1c26:	39 1f       	adc	r19, r25
    1c28:	c9 01       	movw	r24, r18
    1c2a:	a0 e0       	ldi	r26, 0x00	; 0
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	90 51       	subi	r25, 0x10	; 16
    1c30:	af 4f       	sbci	r26, 0xFF	; 255
    1c32:	bf 4f       	sbci	r27, 0xFF	; 255
    1c34:	22 27       	eor	r18, r18
    1c36:	38 2f       	mov	r19, r24
    1c38:	49 2f       	mov	r20, r25
    1c3a:	5a 2f       	mov	r21, r26
    1c3c:	00 e0       	ldi	r16, 0x00	; 0
    1c3e:	11 e0       	ldi	r17, 0x01	; 1
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	7d e0       	ldi	r23, 0x0D	; 13
    1c44:	88 e7       	ldi	r24, 0x78	; 120
    1c46:	95 e2       	ldi	r25, 0x25	; 37
    1c48:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1c4e:	88 e7       	ldi	r24, 0x78	; 120
    1c50:	95 e2       	ldi	r25, 0x25	; 37
    1c52:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <_ZN16CLaserControlApp3RunEv+0x872>
		default:
			Database.UnMap();
    1c58:	88 e7       	ldi	r24, 0x78	; 120
    1c5a:	95 e2       	ldi	r25, 0x25	; 37
    1c5c:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
	}
	
	if ((PORTD.IN & PIN6_bm) == 0)
    1c60:	80 91 68 06 	lds	r24, 0x0668
    1c64:	86 fd       	sbrc	r24, 6
    1c66:	08 c0       	rjmp	.+16     	; 0x1c78 <_ZN16CLaserControlApp3RunEv+0x88a>
		{
			PIC_ID_last = PIC_ID;
    1c68:	f7 01       	movw	r30, r14
    1c6a:	87 85       	ldd	r24, Z+15	; 0x0f
    1c6c:	80 8b       	std	Z+16, r24	; 0x10
			SetPictureId(PICID_WORK_ERROR1);
    1c6e:	68 e0       	ldi	r22, 0x08	; 8
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	c7 01       	movw	r24, r14
    1c74:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN16CLaserControlApp12SetPictureIdEj>
		}
	
	if (update)
    1c78:	f7 01       	movw	r30, r14
    1c7a:	81 89       	ldd	r24, Z+17	; 0x11
    1c7c:	88 23       	and	r24, r24
    1c7e:	a9 f0       	breq	.+42     	; 0x1caa <_ZN16CLaserControlApp3RunEv+0x8bc>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1c80:	a7 01       	movw	r20, r14
    1c82:	4e 5b       	subi	r20, 0xBE	; 190
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	26 e2       	ldi	r18, 0x26	; 38
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	c7 01       	movw	r24, r14
    1c90:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1c94:	f7 01       	movw	r30, r14
    1c96:	11 8a       	std	Z+17, r1	; 0x11
    1c98:	08 c0       	rjmp	.+16     	; 0x1caa <_ZN16CLaserControlApp3RunEv+0x8bc>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	ea 59       	subi	r30, 0x9A	; 154
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 83       	st	Z, r24
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	f6 cb       	rjmp	.-2068   	; 0x1496 <_ZN16CLaserControlApp3RunEv+0xa8>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    1caa:	26 96       	adiw	r28, 0x06	; 6
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
    1cc0:	bf 90       	pop	r11
    1cc2:	af 90       	pop	r10
    1cc4:	08 95       	ret

00001cc6 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	86 85       	ldd	r24, Z+14	; 0x0e
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	71 f4       	brne	.+28     	; 0x1cea <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    1cce:	88 e8       	ldi	r24, 0x88	; 136
    1cd0:	95 e2       	ldi	r25, 0x25	; 37
    1cd2:	0e 94 cc 30 	call	0x6198	; 0x6198 <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1cd6:	60 e1       	ldi	r22, 0x10	; 16
    1cd8:	88 e8       	ldi	r24, 0x88	; 136
    1cda:	95 e2       	ldi	r25, 0x25	; 37
    1cdc:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1ce0:	60 e2       	ldi	r22, 0x20	; 32
    1ce2:	88 e8       	ldi	r24, 0x88	; 136
    1ce4:	95 e2       	ldi	r25, 0x25	; 37
    1ce6:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    1cea:	08 95       	ret

00001cec <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    1cec:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1cf0:	08 95       	ret

00001cf2 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	ec 58       	subi	r30, 0x8C	; 140
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	89 2b       	or	r24, r25
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    1d10:	8a 89       	ldd	r24, Y+18	; 0x12
    1d12:	88 23       	and	r24, r24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    1d16:	a8 c0       	rjmp	.+336    	; 0x1e68 <_ZN16CLaserControlApp7OnTimerEv+0x176>
	{
		if (m_wMillSec == 0)
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e4 59       	subi	r30, 0x94	; 148
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	89 2b       	or	r24, r25
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    1d26:	98 c0       	rjmp	.+304    	; 0x1e58 <_ZN16CLaserControlApp7OnTimerEv+0x166>
		{
			m_wFlow = (TCC1.CNT * 10) / 8;
    1d28:	80 91 60 08 	lds	r24, 0x0860
    1d2c:	90 91 61 08 	lds	r25, 0x0861
    1d30:	9c 01       	movw	r18, r24
    1d32:	22 0f       	add	r18, r18
    1d34:	33 1f       	adc	r19, r19
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	82 0f       	add	r24, r18
    1d44:	93 1f       	adc	r25, r19
    1d46:	96 95       	lsr	r25
    1d48:	87 95       	ror	r24
    1d4a:	96 95       	lsr	r25
    1d4c:	87 95       	ror	r24
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	36 96       	adiw	r30, 0x06	; 6
    1d54:	80 83       	st	Z, r24
    1d56:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1d58:	85 e8       	ldi	r24, 0x85	; 133
    1d5a:	95 e2       	ldi	r25, 0x25	; 37
    1d5c:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <_ZN8CTimerC15ResetEv>
			
			if (m_wSeconds == 0)
    1d60:	fe 01       	movw	r30, r28
    1d62:	e6 59       	subi	r30, 0x96	; 150
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	89 2b       	or	r24, r25
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <_ZN16CLaserControlApp7OnTimerEv+0x7e>
    1d6e:	4c c0       	rjmp	.+152    	; 0x1e08 <_ZN16CLaserControlApp7OnTimerEv+0x116>
			{
				if (m_wMinutes == 0)
    1d70:	32 97       	sbiw	r30, 0x02	; 2
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	89 2b       	or	r24, r25
    1d78:	d1 f5       	brne	.+116    	; 0x1dee <_ZN16CLaserControlApp7OnTimerEv+0xfc>
				{
					if (state == APP_WORKPREPARE)
    1d7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d7e:	02 97       	sbiw	r24, 0x02	; 2
    1d80:	a1 f5       	brne	.+104    	; 0x1dea <_ZN16CLaserControlApp7OnTimerEv+0xf8>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    1d82:	22 e0       	ldi	r18, 0x02	; 2
    1d84:	44 e6       	ldi	r20, 0x64	; 100
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	65 e0       	ldi	r22, 0x05	; 5
    1d8a:	71 e0       	ldi	r23, 0x01	; 1
    1d8c:	80 e5       	ldi	r24, 0x50	; 80
    1d8e:	95 e2       	ldi	r25, 0x25	; 37
    1d90:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1d94:	80 e5       	ldi	r24, 0x50	; 80
    1d96:	95 e2       	ldi	r25, 0x25	; 37
    1d98:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    1d9c:	22 e0       	ldi	r18, 0x02	; 2
    1d9e:	44 e6       	ldi	r20, 0x64	; 100
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	66 e2       	ldi	r22, 0x26	; 38
    1da4:	71 e0       	ldi	r23, 0x01	; 1
    1da6:	80 e5       	ldi	r24, 0x50	; 80
    1da8:	95 e2       	ldi	r25, 0x25	; 37
    1daa:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1dae:	80 e5       	ldi	r24, 0x50	; 80
    1db0:	95 e2       	ldi	r25, 0x25	; 37
    1db2:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    1db6:	22 e0       	ldi	r18, 0x02	; 2
    1db8:	44 e6       	ldi	r20, 0x64	; 100
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	69 e4       	ldi	r22, 0x49	; 73
    1dbe:	71 e0       	ldi	r23, 0x01	; 1
    1dc0:	80 e5       	ldi	r24, 0x50	; 80
    1dc2:	95 e2       	ldi	r25, 0x25	; 37
    1dc4:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1dc8:	80 e5       	ldi	r24, 0x50	; 80
    1dca:	95 e2       	ldi	r25, 0x25	; 37
    1dcc:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    1dd0:	22 e0       	ldi	r18, 0x02	; 2
    1dd2:	44 e6       	ldi	r20, 0x64	; 100
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	6d e5       	ldi	r22, 0x5D	; 93
    1dd8:	71 e0       	ldi	r23, 0x01	; 1
    1dda:	80 e5       	ldi	r24, 0x50	; 80
    1ddc:	95 e2       	ldi	r25, 0x25	; 37
    1dde:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1de2:	80 e5       	ldi	r24, 0x50	; 80
    1de4:	95 e2       	ldi	r25, 0x25	; 37
    1de6:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1dea:	1a 8a       	std	Y+18, r1	; 0x12
    1dec:	9f c0       	rjmp	.+318    	; 0x1f2c <_ZN16CLaserControlApp7OnTimerEv+0x23a>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    1dee:	8c e3       	ldi	r24, 0x3C	; 60
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	fe 01       	movw	r30, r28
    1df4:	e6 59       	subi	r30, 0x96	; 150
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    1dfc:	32 97       	sbiw	r30, 0x02	; 2
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	80 83       	st	Z, r24
    1e06:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    1e08:	84 e6       	ldi	r24, 0x64	; 100
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e4 59       	subi	r30, 0x94	; 148
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    1e16:	32 97       	sbiw	r30, 0x02	; 2
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	80 83       	st	Z, r24
    1e20:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    1e22:	32 97       	sbiw	r30, 0x02	; 2
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	89 2b       	or	r24, r25
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <_ZN16CLaserControlApp7OnTimerEv+0x13c>
    1e2c:	4c c0       	rjmp	.+152    	; 0x1ec6 <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1e2e:	32 96       	adiw	r30, 0x02	; 2
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	0a 97       	sbiw	r24, 0x0a	; 10
    1e36:	08 f0       	brcs	.+2      	; 0x1e3a <_ZN16CLaserControlApp7OnTimerEv+0x148>
    1e38:	46 c0       	rjmp	.+140    	; 0x1ec6 <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e3e:	02 97       	sbiw	r24, 0x02	; 2
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <_ZN16CLaserControlApp7OnTimerEv+0x152>
    1e42:	41 c0       	rjmp	.+130    	; 0x1ec6 <_ZN16CLaserControlApp7OnTimerEv+0x1d4>
    1e44:	4e c0       	rjmp	.+156    	; 0x1ee2 <_ZN16CLaserControlApp7OnTimerEv+0x1f0>
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e6 59       	subi	r30, 0x96	; 150
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	05 97       	sbiw	r24, 0x05	; 5
    1e52:	08 f4       	brcc	.+2      	; 0x1e56 <_ZN16CLaserControlApp7OnTimerEv+0x164>
    1e54:	4f c0       	rjmp	.+158    	; 0x1ef4 <_ZN16CLaserControlApp7OnTimerEv+0x202>
    1e56:	5c c0       	rjmp	.+184    	; 0x1f10 <_ZN16CLaserControlApp7OnTimerEv+0x21e>
				player.SoundStop();
				//player.beep(1000, 25);
			}
			// ************************************
		}
		m_wMillSec-=10;
    1e58:	c4 59       	subi	r28, 0x94	; 148
    1e5a:	df 4f       	sbci	r29, 0xFF	; 255
    1e5c:	88 81       	ld	r24, Y
    1e5e:	99 81       	ldd	r25, Y+1	; 0x01
    1e60:	0a 97       	sbiw	r24, 0x0a	; 10
    1e62:	88 83       	st	Y, r24
    1e64:	99 83       	std	Y+1, r25	; 0x01
    1e66:	62 c0       	rjmp	.+196    	; 0x1f2c <_ZN16CLaserControlApp7OnTimerEv+0x23a>
	}
	else
	{
		if (m_wMillSec == 0)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e4 59       	subi	r30, 0x94	; 148
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	89 2b       	or	r24, r25
    1e74:	01 f5       	brne	.+64     	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x1c4>
		{
			m_wMillSec = 100;
    1e76:	84 e6       	ldi	r24, 0x64	; 100
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	80 83       	st	Z, r24
    1e7c:	91 83       	std	Z+1, r25	; 0x01
			
			m_wFlow = (TCC1.CNT * 10) / 8;
    1e7e:	80 91 60 08 	lds	r24, 0x0860
    1e82:	90 91 61 08 	lds	r25, 0x0861
    1e86:	9c 01       	movw	r18, r24
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	82 0f       	add	r24, r18
    1e9a:	93 1f       	adc	r25, r19
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	96 95       	lsr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	96 95       	lsr	r25
    1ea6:	87 95       	ror	r24
    1ea8:	36 96       	adiw	r30, 0x06	; 6
    1eaa:	80 83       	st	Z, r24
    1eac:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    1eae:	85 e8       	ldi	r24, 0x85	; 133
    1eb0:	95 e2       	ldi	r25, 0x25	; 37
    1eb2:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <_ZN8CTimerC15ResetEv>
		}
		m_wMillSec-=10;
    1eb6:	c4 59       	subi	r28, 0x94	; 148
    1eb8:	df 4f       	sbci	r29, 0xFF	; 255
    1eba:	88 81       	ld	r24, Y
    1ebc:	99 81       	ldd	r25, Y+1	; 0x01
    1ebe:	0a 97       	sbiw	r24, 0x0a	; 10
    1ec0:	88 83       	st	Y, r24
    1ec2:	99 83       	std	Y+1, r25	; 0x01
    1ec4:	33 c0       	rjmp	.+102    	; 0x1f2c <_ZN16CLaserControlApp7OnTimerEv+0x23a>
					//player.beep(1000, 50);
				}
			}
			else
			{
				player.SoundStart(1000, 25, 2);
    1ec6:	22 e0       	ldi	r18, 0x02	; 2
    1ec8:	49 e1       	ldi	r20, 0x19	; 25
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	68 ee       	ldi	r22, 0xE8	; 232
    1ece:	73 e0       	ldi	r23, 0x03	; 3
    1ed0:	80 e5       	ldi	r24, 0x50	; 80
    1ed2:	95 e2       	ldi	r25, 0x25	; 37
    1ed4:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    1ed8:	80 e5       	ldi	r24, 0x50	; 80
    1eda:	95 e2       	ldi	r25, 0x25	; 37
    1edc:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
    1ee0:	bb cf       	rjmp	.-138    	; 0x1e58 <_ZN16CLaserControlApp7OnTimerEv+0x166>
			m_wSeconds--;
			
			// ****************** Tick sound
			if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 5)
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e8 59       	subi	r30, 0x98	; 152
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	89 2b       	or	r24, r25
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <_ZN16CLaserControlApp7OnTimerEv+0x200>
    1ef0:	aa cf       	rjmp	.-172    	; 0x1e46 <_ZN16CLaserControlApp7OnTimerEv+0x154>
    1ef2:	0e c0       	rjmp	.+28     	; 0x1f10 <_ZN16CLaserControlApp7OnTimerEv+0x21e>
				{
					player.SoundStart(1000, 100, 2);
    1ef4:	22 e0       	ldi	r18, 0x02	; 2
    1ef6:	44 e6       	ldi	r20, 0x64	; 100
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	68 ee       	ldi	r22, 0xE8	; 232
    1efc:	73 e0       	ldi	r23, 0x03	; 3
    1efe:	80 e5       	ldi	r24, 0x50	; 80
    1f00:	95 e2       	ldi	r25, 0x25	; 37
    1f02:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f06:	80 e5       	ldi	r24, 0x50	; 80
    1f08:	95 e2       	ldi	r25, 0x25	; 37
    1f0a:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
    1f0e:	a4 cf       	rjmp	.-184    	; 0x1e58 <_ZN16CLaserControlApp7OnTimerEv+0x166>
					//player.beep(1000, 100);
				}
				else
				{
					player.SoundStart(1000, 50, 2);
    1f10:	22 e0       	ldi	r18, 0x02	; 2
    1f12:	42 e3       	ldi	r20, 0x32	; 50
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	68 ee       	ldi	r22, 0xE8	; 232
    1f18:	73 e0       	ldi	r23, 0x03	; 3
    1f1a:	80 e5       	ldi	r24, 0x50	; 80
    1f1c:	95 e2       	ldi	r25, 0x25	; 37
    1f1e:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f22:	80 e5       	ldi	r24, 0x50	; 80
    1f24:	95 e2       	ldi	r25, 0x25	; 37
    1f26:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
    1f2a:	96 cf       	rjmp	.-212    	; 0x1e58 <_ZN16CLaserControlApp7OnTimerEv+0x166>
			m_wFlow = (TCC1.CNT * 10) / 8;
			flowtimer.Reset();
		}
		m_wMillSec-=10;
	}
}
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	08 95       	ret

00001f32 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1f32:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_ZN16CLaserControlApp7OnTimerEv>
    1f36:	08 95       	ret

00001f38 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
	//laserBoard.Relay1Off();
}

void CLaserControlApp::OnPWMTimerOVF()
{
	if (peltier_en)
    1f38:	fc 01       	movw	r30, r24
    1f3a:	83 89       	ldd	r24, Z+19	; 0x13
    1f3c:	88 23       	and	r24, r24
    1f3e:	21 f0       	breq	.+8      	; 0x1f48 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
	{
		laserBoard.PWMOff();
    1f40:	81 e5       	ldi	r24, 0x51	; 81
    1f42:	95 e2       	ldi	r25, 0x25	; 37
    1f44:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN11CLaserBoard6PWMOffEv>
	}
	laserBoard.REDOff();
    1f48:	81 e5       	ldi	r24, 0x51	; 81
    1f4a:	95 e2       	ldi	r25, 0x25	; 37
    1f4c:	0e 94 b9 2c 	call	0x5972	; 0x5972 <_ZN11CLaserBoard6REDOffEv>
	laserBoard.GRNOff();
    1f50:	81 e5       	ldi	r24, 0x51	; 81
    1f52:	95 e2       	ldi	r25, 0x25	; 37
    1f54:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_ZN11CLaserBoard6GRNOffEv>
	laserBoard.BLUOff();
    1f58:	81 e5       	ldi	r24, 0x51	; 81
    1f5a:	95 e2       	ldi	r25, 0x25	; 37
    1f5c:	0e 94 c9 2c 	call	0x5992	; 0x5992 <_ZN11CLaserBoard6BLUOffEv>
	static int delay = 1000;
	static uint16_t red = 0;
	static uint16_t grn = 0;
	static uint16_t blu = 0;
	
	if (tableGRN[pos] > grn) grn++;
    1f60:	80 91 e1 22 	lds	r24, 0x22E1
    1f64:	90 91 e2 22 	lds	r25, 0x22E2
    1f68:	fc 01       	movw	r30, r24
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	ea 5e       	subi	r30, 0xEA	; 234
    1f70:	ff 4d       	sbci	r31, 0xDF	; 223
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	20 91 df 22 	lds	r18, 0x22DF
    1f7a:	30 91 e0 22 	lds	r19, 0x22E0
    1f7e:	26 17       	cp	r18, r22
    1f80:	37 07       	cpc	r19, r23
    1f82:	30 f4       	brcc	.+12     	; 0x1f90 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x58>
    1f84:	2f 5f       	subi	r18, 0xFF	; 255
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	20 93 df 22 	sts	0x22DF, r18
    1f8c:	30 93 e0 22 	sts	0x22E0, r19
	if (tableGRN[pos] < grn) grn--;
    1f90:	20 91 df 22 	lds	r18, 0x22DF
    1f94:	30 91 e0 22 	lds	r19, 0x22E0
    1f98:	62 17       	cp	r22, r18
    1f9a:	73 07       	cpc	r23, r19
    1f9c:	30 f4       	brcc	.+12     	; 0x1faa <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x72>
    1f9e:	21 50       	subi	r18, 0x01	; 1
    1fa0:	31 09       	sbc	r19, r1
    1fa2:	20 93 df 22 	sts	0x22DF, r18
    1fa6:	30 93 e0 22 	sts	0x22E0, r19
	
	if (tableRED[pos] > red) red++;
    1faa:	fc 01       	movw	r30, r24
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	ec 5d       	subi	r30, 0xDC	; 220
    1fb2:	ff 4d       	sbci	r31, 0xDF	; 223
    1fb4:	a0 81       	ld	r26, Z
    1fb6:	b1 81       	ldd	r27, Z+1	; 0x01
    1fb8:	20 91 dd 22 	lds	r18, 0x22DD
    1fbc:	30 91 de 22 	lds	r19, 0x22DE
    1fc0:	2a 17       	cp	r18, r26
    1fc2:	3b 07       	cpc	r19, r27
    1fc4:	30 f4       	brcc	.+12     	; 0x1fd2 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x9a>
    1fc6:	2f 5f       	subi	r18, 0xFF	; 255
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	20 93 dd 22 	sts	0x22DD, r18
    1fce:	30 93 de 22 	sts	0x22DE, r19
	if (tableRED[pos] < red) red--;
    1fd2:	20 91 dd 22 	lds	r18, 0x22DD
    1fd6:	30 91 de 22 	lds	r19, 0x22DE
    1fda:	a2 17       	cp	r26, r18
    1fdc:	b3 07       	cpc	r27, r19
    1fde:	30 f4       	brcc	.+12     	; 0x1fec <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0xb4>
    1fe0:	21 50       	subi	r18, 0x01	; 1
    1fe2:	31 09       	sbc	r19, r1
    1fe4:	20 93 dd 22 	sts	0x22DD, r18
    1fe8:	30 93 de 22 	sts	0x22DE, r19
	
	if (tableBLU[pos] > blu) blu++;
    1fec:	fc 01       	movw	r30, r24
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	e8 5f       	subi	r30, 0xF8	; 248
    1ff4:	ff 4d       	sbci	r31, 0xDF	; 223
    1ff6:	20 81       	ld	r18, Z
    1ff8:	31 81       	ldd	r19, Z+1	; 0x01
    1ffa:	40 91 db 22 	lds	r20, 0x22DB
    1ffe:	50 91 dc 22 	lds	r21, 0x22DC
    2002:	42 17       	cp	r20, r18
    2004:	53 07       	cpc	r21, r19
    2006:	30 f4       	brcc	.+12     	; 0x2014 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0xdc>
    2008:	4f 5f       	subi	r20, 0xFF	; 255
    200a:	5f 4f       	sbci	r21, 0xFF	; 255
    200c:	40 93 db 22 	sts	0x22DB, r20
    2010:	50 93 dc 22 	sts	0x22DC, r21
	if (tableBLU[pos] < blu) blu--;
    2014:	40 91 db 22 	lds	r20, 0x22DB
    2018:	50 91 dc 22 	lds	r21, 0x22DC
    201c:	24 17       	cp	r18, r20
    201e:	35 07       	cpc	r19, r21
    2020:	30 f4       	brcc	.+12     	; 0x202e <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0xf6>
    2022:	41 50       	subi	r20, 0x01	; 1
    2024:	51 09       	sbc	r21, r1
    2026:	40 93 db 22 	sts	0x22DB, r20
    202a:	50 93 dc 22 	sts	0x22DC, r21
	
	if (tableBLU[pos] == blu && tableRED[pos] == red && tableGRN[pos] == grn)
    202e:	40 91 db 22 	lds	r20, 0x22DB
    2032:	50 91 dc 22 	lds	r21, 0x22DC
    2036:	24 17       	cp	r18, r20
    2038:	35 07       	cpc	r19, r21
    203a:	81 f5       	brne	.+96     	; 0x209c <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x164>
    203c:	20 91 dd 22 	lds	r18, 0x22DD
    2040:	30 91 de 22 	lds	r19, 0x22DE
    2044:	a2 17       	cp	r26, r18
    2046:	b3 07       	cpc	r27, r19
    2048:	49 f5       	brne	.+82     	; 0x209c <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x164>
    204a:	20 91 df 22 	lds	r18, 0x22DF
    204e:	30 91 e0 22 	lds	r19, 0x22E0
    2052:	62 17       	cp	r22, r18
    2054:	73 07       	cpc	r23, r19
    2056:	11 f5       	brne	.+68     	; 0x209c <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x164>
	{
		if (delay == 0)
    2058:	20 91 06 20 	lds	r18, 0x2006
    205c:	30 91 07 20 	lds	r19, 0x2007
    2060:	23 2b       	or	r18, r19
    2062:	99 f4       	brne	.+38     	; 0x208a <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x152>
		{
			pos++;
    2064:	01 96       	adiw	r24, 0x01	; 1
			if (pos == 7) pos = 0;
    2066:	87 30       	cpi	r24, 0x07	; 7
    2068:	91 05       	cpc	r25, r1
    206a:	29 f0       	breq	.+10     	; 0x2076 <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x13e>
	
	if (tableBLU[pos] == blu && tableRED[pos] == red && tableGRN[pos] == grn)
	{
		if (delay == 0)
		{
			pos++;
    206c:	80 93 e1 22 	sts	0x22E1, r24
    2070:	90 93 e2 22 	sts	0x22E2, r25
    2074:	04 c0       	rjmp	.+8      	; 0x207e <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x146>
			if (pos == 7) pos = 0;
    2076:	10 92 e1 22 	sts	0x22E1, r1
    207a:	10 92 e2 22 	sts	0x22E2, r1
			delay = 1000;
    207e:	88 ee       	ldi	r24, 0xE8	; 232
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	80 93 06 20 	sts	0x2006, r24
    2086:	90 93 07 20 	sts	0x2007, r25
		}
		delay --;
    208a:	80 91 06 20 	lds	r24, 0x2006
    208e:	90 91 07 20 	lds	r25, 0x2007
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	80 93 06 20 	sts	0x2006, r24
    2098:	90 93 07 20 	sts	0x2007, r25
	}
	
	pwmtimer.SetCOMPB(red);
    209c:	60 91 dd 22 	lds	r22, 0x22DD
    20a0:	70 91 de 22 	lds	r23, 0x22DE
    20a4:	82 e8       	ldi	r24, 0x82	; 130
    20a6:	95 e2       	ldi	r25, 0x25	; 37
    20a8:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(grn);
    20ac:	60 91 df 22 	lds	r22, 0x22DF
    20b0:	70 91 e0 22 	lds	r23, 0x22E0
    20b4:	82 e8       	ldi	r24, 0x82	; 130
    20b6:	95 e2       	ldi	r25, 0x25	; 37
    20b8:	0e 94 75 2f 	call	0x5eea	; 0x5eea <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(blu);
    20bc:	60 91 db 22 	lds	r22, 0x22DB
    20c0:	70 91 dc 22 	lds	r23, 0x22DC
    20c4:	82 e8       	ldi	r24, 0x82	; 130
    20c6:	95 e2       	ldi	r25, 0x25	; 37
    20c8:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <_ZN7CTimerD8SetCOMPDEj>
    20cc:	08 95       	ret

000020ce <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
    20ce:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
    20d2:	08 95       	ret

000020d4 <_ZN16CLaserControlApp6OnINT0Ev>:
{
	laserBoard.BLUOn();
}

void CLaserControlApp::OnINT0()
{
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    20d8:	fc 01       	movw	r30, r24
    20da:	24 85       	ldd	r18, Z+12	; 0x0c
    20dc:	35 85       	ldd	r19, Z+13	; 0x0d
    20de:	20 31       	cpi	r18, 0x10	; 16
    20e0:	31 05       	cpc	r19, r1
    20e2:	21 f0       	breq	.+8      	; 0x20ec <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    20e4:	20 32       	cpi	r18, 0x20	; 32
    20e6:	31 05       	cpc	r19, r1
    20e8:	09 f0       	breq	.+2      	; 0x20ec <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    20ea:	87 c0       	rjmp	.+270    	; 0x21fa <_ZN16CLaserControlApp6OnINT0Ev+0x126>
    20ec:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    20ee:	80 91 48 06 	lds	r24, 0x0648
    20f2:	80 fd       	sbrc	r24, 0
    20f4:	6c c0       	rjmp	.+216    	; 0x21ce <_ZN16CLaserControlApp6OnINT0Ev+0xfa>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    20f6:	80 91 da 22 	lds	r24, 0x22DA
    20fa:	81 11       	cpse	r24, r1
    20fc:	7e c0       	rjmp	.+252    	; 0x21fa <_ZN16CLaserControlApp6OnINT0Ev+0x126>
    20fe:	fe 01       	movw	r30, r28
    2100:	ec 58       	subi	r30, 0x8C	; 140
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	89 2b       	or	r24, r25
    210a:	09 f4       	brne	.+2      	; 0x210e <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    210c:	71 c0       	rjmp	.+226    	; 0x21f0 <_ZN16CLaserControlApp6OnINT0Ev+0x11c>
    210e:	75 c0       	rjmp	.+234    	; 0x21fa <_ZN16CLaserControlApp6OnINT0Ev+0x126>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    2110:	8a e0       	ldi	r24, 0x0A	; 10
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	fe 01       	movw	r30, r28
    2116:	ec 58       	subi	r30, 0x8C	; 140
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 83       	st	Z, r24
    211c:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    211e:	f6 97       	sbiw	r30, 0x36	; 54
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	a2 81       	ldd	r26, Z+2	; 0x02
    2126:	b3 81       	ldd	r27, Z+3	; 0x03
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	a1 1d       	adc	r26, r1
    212c:	b1 1d       	adc	r27, r1
    212e:	80 83       	st	Z, r24
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	a2 83       	std	Z+2, r26	; 0x02
    2134:	b3 83       	std	Z+3, r27	; 0x03
						
						if (laserTimerDutyCyclems > 100)
    2136:	4a ad       	ldd	r20, Y+58	; 0x3a
    2138:	5b ad       	ldd	r21, Y+59	; 0x3b
    213a:	45 36       	cpi	r20, 0x65	; 101
    213c:	51 05       	cpc	r21, r1
    213e:	50 f0       	brcs	.+20     	; 0x2154 <_ZN16CLaserControlApp6OnINT0Ev+0x80>
							player.SoundStart(500, 50, 0);
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	42 e3       	ldi	r20, 0x32	; 50
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	64 ef       	ldi	r22, 0xF4	; 244
    2148:	71 e0       	ldi	r23, 0x01	; 1
    214a:	80 e5       	ldi	r24, 0x50	; 80
    214c:	95 e2       	ldi	r25, 0x25	; 37
    214e:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <_ZN16CLaserControlApp6OnINT0Ev+0x92>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    2154:	56 95       	lsr	r21
    2156:	47 95       	ror	r20
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	64 ef       	ldi	r22, 0xF4	; 244
    215c:	71 e0       	ldi	r23, 0x01	; 1
    215e:	80 e5       	ldi	r24, 0x50	; 80
    2160:	95 e2       	ldi	r25, 0x25	; 37
    2162:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2166:	80 e5       	ldi	r24, 0x50	; 80
    2168:	95 e2       	ldi	r25, 0x25	; 37
    216a:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    216e:	88 ad       	ldd	r24, Y+56	; 0x38
    2170:	99 ad       	ldd	r25, Y+57	; 0x39
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	29 f0       	breq	.+10     	; 0x2180 <_ZN16CLaserControlApp6OnINT0Ev+0xac>
						TCF0.CNT = laserTimerDutyCycle - 1;
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	80 93 20 0b 	sts	0x0B20, r24
    217c:	90 93 21 0b 	sts	0x0B21, r25
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    2180:	68 ad       	ldd	r22, Y+56	; 0x38
    2182:	79 ad       	ldd	r23, Y+57	; 0x39
    2184:	88 e8       	ldi	r24, 0x88	; 136
    2186:	95 e2       	ldi	r25, 0x25	; 37
    2188:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    218c:	68 ad       	ldd	r22, Y+56	; 0x38
    218e:	79 ad       	ldd	r23, Y+57	; 0x39
    2190:	88 e8       	ldi	r24, 0x88	; 136
    2192:	95 e2       	ldi	r25, 0x25	; 37
    2194:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    2198:	6e a9       	ldd	r22, Y+54	; 0x36
    219a:	7f a9       	ldd	r23, Y+55	; 0x37
    219c:	88 e8       	ldi	r24, 0x88	; 136
    219e:	95 e2       	ldi	r25, 0x25	; 37
    21a0:	0e 94 bf 30 	call	0x617e	; 0x617e <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    21a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	49 f4       	brne	.+18     	; 0x21bc <_ZN16CLaserControlApp6OnINT0Ev+0xe8>
    21aa:	ff ef       	ldi	r31, 0xFF	; 255
    21ac:	27 e8       	ldi	r18, 0x87	; 135
    21ae:	83 e1       	ldi	r24, 0x13	; 19
    21b0:	f1 50       	subi	r31, 0x01	; 1
    21b2:	20 40       	sbci	r18, 0x00	; 0
    21b4:	80 40       	sbci	r24, 0x00	; 0
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <_ZN16CLaserControlApp6OnINT0Ev+0xdc>
    21b8:	00 c0       	rjmp	.+0      	; 0x21ba <_ZN16CLaserControlApp6OnINT0Ev+0xe6>
    21ba:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    21bc:	e0 e4       	ldi	r30, 0x40	; 64
    21be:	f6 e0       	ldi	r31, 0x06	; 6
    21c0:	84 85       	ldd	r24, Z+12	; 0x0c
    21c2:	8e 7f       	andi	r24, 0xFE	; 254
    21c4:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	80 93 da 22 	sts	0x22DA, r24
    21cc:	16 c0       	rjmp	.+44     	; 0x21fa <_ZN16CLaserControlApp6OnINT0Ev+0x126>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    21ce:	10 92 da 22 	sts	0x22DA, r1
				
				laserTimer.Stop();
    21d2:	88 e8       	ldi	r24, 0x88	; 136
    21d4:	95 e2       	ldi	r25, 0x25	; 37
    21d6:	0e 94 cc 30 	call	0x6198	; 0x6198 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    21da:	60 e1       	ldi	r22, 0x10	; 16
    21dc:	88 e8       	ldi	r24, 0x88	; 136
    21de:	95 e2       	ldi	r25, 0x25	; 37
    21e0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    21e4:	60 e2       	ldi	r22, 0x20	; 32
    21e6:	88 e8       	ldi	r24, 0x88	; 136
    21e8:	95 e2       	ldi	r25, 0x25	; 37
    21ea:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <_ZN16CLaserControlApp6OnINT0Ev+0x126>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    21f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <_ZN16CLaserControlApp6OnINT0Ev+0x124>
    21f6:	bb cf       	rjmp	.-138    	; 0x216e <_ZN16CLaserControlApp6OnINT0Ev+0x9a>
    21f8:	8b cf       	rjmp	.-234    	; 0x2110 <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    2200:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN16CLaserControlApp6OnINT0Ev>
    2204:	08 95       	ret

00002206 <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    2206:	cf 92       	push	r12
    2208:	df 92       	push	r13
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	7c 01       	movw	r14, r24
    2218:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    221a:	41 15       	cp	r20, r1
    221c:	51 05       	cpc	r21, r1
    221e:	b1 f0       	breq	.+44     	; 0x224c <_Z11ConvertDataPvS_jj+0x46>
    2220:	6b 01       	movw	r12, r22
    2222:	c4 0e       	add	r12, r20
    2224:	d5 1e       	adc	r13, r21
    2226:	eb 01       	movw	r28, r22
    2228:	26 1b       	sub	r18, r22
    222a:	37 0b       	sbc	r19, r23
    222c:	c9 01       	movw	r24, r18
    222e:	8c 0f       	add	r24, r28
    2230:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    2232:	b8 01       	movw	r22, r16
    2234:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivmodhi4>
    2238:	fc 01       	movw	r30, r24
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	e4 27       	eor	r30, r20
    223e:	ee 0d       	add	r30, r14
    2240:	ff 1d       	adc	r31, r15
    2242:	89 91       	ld	r24, Y+
    2244:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    2246:	cc 15       	cp	r28, r12
    2248:	dd 05       	cpc	r29, r13
    224a:	81 f7       	brne	.-32     	; 0x222c <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	ff 90       	pop	r15
    2256:	ef 90       	pop	r14
    2258:	df 90       	pop	r13
    225a:	cf 90       	pop	r12
    225c:	08 95       	ret

0000225e <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    225e:	68 17       	cp	r22, r24
    2260:	79 07       	cpc	r23, r25
    2262:	08 f4       	brcc	.+2      	; 0x2266 <_Z3minjj+0x8>
    2264:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    2266:	08 95       	ret

00002268 <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    2268:	86 17       	cp	r24, r22
    226a:	97 07       	cpc	r25, r23
    226c:	08 f4       	brcc	.+2      	; 0x2270 <_Z3maxjj+0x8>
    226e:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    2270:	08 95       	ret

00002272 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    2272:	98 27       	eor	r25, r24
    2274:	89 27       	eor	r24, r25
    2276:	98 27       	eor	r25, r24
    2278:	08 95       	ret

0000227a <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    227a:	9b 01       	movw	r18, r22
    227c:	bc 01       	movw	r22, r24
    227e:	c9 01       	movw	r24, r18
}
    2280:	08 95       	ret

00002282 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    2282:	08 95       	ret

00002284 <_ZN4CSPID1Ev>:
    2284:	08 95       	ret

00002286 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    2286:	ef 92       	push	r14
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	ec 01       	movw	r28, r24
    2292:	e0 e8       	ldi	r30, 0x80	; 128
    2294:	f6 e0       	ldi	r31, 0x06	; 6
    2296:	90 eb       	ldi	r25, 0xB0	; 176
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 ec       	ldi	r24, 0xC0	; 192
    229c:	84 8b       	std	Z+20, r24	; 0x14
    229e:	85 8b       	std	Z+21, r24	; 0x15
    22a0:	87 8b       	std	Z+23, r24	; 0x17
    22a2:	95 83       	std	Z+5, r25	; 0x05
    22a4:	61 11       	cpse	r22, r1
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    22a8:	80 e4       	ldi	r24, 0x40	; 64
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    22ac:	80 e5       	ldi	r24, 0x50	; 80
    22ae:	01 11       	cpse	r16, r1
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    22b6:	30 e8       	ldi	r19, 0x80	; 128
    22b8:	41 11       	cpse	r20, r1
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    22c0:	90 e2       	ldi	r25, 0x20	; 32
    22c2:	22 0f       	add	r18, r18
    22c4:	22 0f       	add	r18, r18
    22c6:	e2 2a       	or	r14, r18
    22c8:	e8 2a       	or	r14, r24
    22ca:	e3 2a       	or	r14, r19
    22cc:	e9 2a       	or	r14, r25
    22ce:	00 ec       	ldi	r16, 0xC0	; 192
    22d0:	1a e0       	ldi	r17, 0x0A	; 10
    22d2:	f8 01       	movw	r30, r16
    22d4:	e0 82       	st	Z, r14
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	0e 94 51 33 	call	0x66a2	; 0x66a2 <malloc>
    22de:	88 83       	st	Y, r24
    22e0:	99 83       	std	Y+1, r25	; 0x01
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	f8 01       	movw	r30, r16
    22e6:	81 83       	std	Z+1, r24	; 0x01
    22e8:	8c eb       	ldi	r24, 0xBC	; 188
    22ea:	91 e1       	ldi	r25, 0x11	; 17
    22ec:	80 93 56 23 	sts	0x2356, r24
    22f0:	90 93 57 23 	sts	0x2357, r25
    22f4:	c0 93 4c 24 	sts	0x244C, r28
    22f8:	d0 93 4d 24 	sts	0x244D, r29
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ef 90       	pop	r14
    2306:	08 95       	ret

00002308 <_ZN4CSPI4SendEPhj>:
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	ec 01       	movw	r28, r24
    230e:	4a 83       	std	Y+2, r20	; 0x02
    2310:	5b 83       	std	Y+3, r21	; 0x03
    2312:	4c 83       	std	Y+4, r20	; 0x04
    2314:	5d 83       	std	Y+5, r21	; 0x05
    2316:	88 81       	ld	r24, Y
    2318:	99 81       	ldd	r25, Y+1	; 0x01
    231a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <memcpy>
    231e:	80 e1       	ldi	r24, 0x10	; 16
    2320:	80 93 86 06 	sts	0x0686, r24
    2324:	88 81       	ld	r24, Y
    2326:	99 81       	ldd	r25, Y+1	; 0x01
    2328:	4a 81       	ldd	r20, Y+2	; 0x02
    232a:	5b 81       	ldd	r21, Y+3	; 0x03
    232c:	9a 01       	movw	r18, r20
    232e:	21 50       	subi	r18, 0x01	; 1
    2330:	31 09       	sbc	r19, r1
    2332:	2a 83       	std	Y+2, r18	; 0x02
    2334:	3b 83       	std	Y+3, r19	; 0x03
    2336:	fc 01       	movw	r30, r24
    2338:	e2 0f       	add	r30, r18
    233a:	f3 1f       	adc	r31, r19
    233c:	80 81       	ld	r24, Z
    233e:	80 93 c3 0a 	sts	0x0AC3, r24
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    2348:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	89 2b       	or	r24, r25
    2350:	79 f0       	breq	.+30     	; 0x2370 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2352:	40 81       	ld	r20, Z
    2354:	51 81       	ldd	r21, Z+1	; 0x01
    2356:	22 81       	ldd	r18, Z+2	; 0x02
    2358:	33 81       	ldd	r19, Z+3	; 0x03
    235a:	c9 01       	movw	r24, r18
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	82 83       	std	Z+2, r24	; 0x02
    2360:	93 83       	std	Z+3, r25	; 0x03
    2362:	fa 01       	movw	r30, r20
    2364:	e8 0f       	add	r30, r24
    2366:	f9 1f       	adc	r31, r25
    2368:	80 81       	ld	r24, Z
    236a:	80 93 c3 0a 	sts	0x0AC3, r24
    236e:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    2370:	80 e1       	ldi	r24, 0x10	; 16
    2372:	80 93 85 06 	sts	0x0685, r24
    2376:	08 95       	ret

00002378 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    2378:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN4CSPI10OnTransmitEv>
    237c:	08 95       	ret

0000237e <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    237e:	2a ea       	ldi	r18, 0xAA	; 170
    2380:	31 e2       	ldi	r19, 0x21	; 33
    2382:	fc 01       	movw	r30, r24
    2384:	20 83       	st	Z, r18
    2386:	31 83       	std	Z+1, r19	; 0x01
    2388:	08 95       	ret

0000238a <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    238a:	08 95       	ret

0000238c <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    238c:	2e ec       	ldi	r18, 0xCE	; 206
    238e:	31 e2       	ldi	r19, 0x21	; 33
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18
    2394:	31 83       	std	Z+1, r19	; 0x01
    2396:	08 95       	ret

00002398 <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    2398:	08 95       	ret

0000239a <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    239a:	2c ee       	ldi	r18, 0xEC	; 236
    239c:	31 e2       	ldi	r19, 0x21	; 33
    239e:	fc 01       	movw	r30, r24
    23a0:	20 83       	st	Z, r18
    23a2:	31 83       	std	Z+1, r19	; 0x01
    23a4:	08 95       	ret

000023a6 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    23a6:	08 95       	ret

000023a8 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    23a8:	1f 92       	push	r1
    23aa:	0f 92       	push	r0
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	0f 92       	push	r0
    23b0:	11 24       	eor	r1, r1
    23b2:	0b b6       	in	r0, 0x3b	; 59
    23b4:	0f 92       	push	r0
    23b6:	2f 93       	push	r18
    23b8:	3f 93       	push	r19
    23ba:	4f 93       	push	r20
    23bc:	5f 93       	push	r21
    23be:	6f 93       	push	r22
    23c0:	7f 93       	push	r23
    23c2:	8f 93       	push	r24
    23c4:	9f 93       	push	r25
    23c6:	af 93       	push	r26
    23c8:	bf 93       	push	r27
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
    23ce:	e0 91 e6 22 	lds	r30, 0x22E6
    23d2:	f0 91 e7 22 	lds	r31, 0x22E7
    23d6:	30 97       	sbiw	r30, 0x00	; 0
    23d8:	29 f0       	breq	.+10     	; 0x23e4 <__vector_1+0x3c>
    23da:	80 91 dc 23 	lds	r24, 0x23DC
    23de:	90 91 dd 23 	lds	r25, 0x23DD
    23e2:	19 95       	eicall
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	bf 91       	pop	r27
    23ea:	af 91       	pop	r26
    23ec:	9f 91       	pop	r25
    23ee:	8f 91       	pop	r24
    23f0:	7f 91       	pop	r23
    23f2:	6f 91       	pop	r22
    23f4:	5f 91       	pop	r21
    23f6:	4f 91       	pop	r20
    23f8:	3f 91       	pop	r19
    23fa:	2f 91       	pop	r18
    23fc:	0f 90       	pop	r0
    23fe:	0b be       	out	0x3b, r0	; 59
    2400:	0f 90       	pop	r0
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	0f 90       	pop	r0
    2406:	1f 90       	pop	r1
    2408:	18 95       	reti

0000240a <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    240a:	1f 92       	push	r1
    240c:	0f 92       	push	r0
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	0f 92       	push	r0
    2412:	11 24       	eor	r1, r1
    2414:	0b b6       	in	r0, 0x3b	; 59
    2416:	0f 92       	push	r0
    2418:	2f 93       	push	r18
    241a:	3f 93       	push	r19
    241c:	4f 93       	push	r20
    241e:	5f 93       	push	r21
    2420:	6f 93       	push	r22
    2422:	7f 93       	push	r23
    2424:	8f 93       	push	r24
    2426:	9f 93       	push	r25
    2428:	af 93       	push	r26
    242a:	bf 93       	push	r27
    242c:	ef 93       	push	r30
    242e:	ff 93       	push	r31
    2430:	e0 91 e8 22 	lds	r30, 0x22E8
    2434:	f0 91 e9 22 	lds	r31, 0x22E9
    2438:	30 97       	sbiw	r30, 0x00	; 0
    243a:	29 f0       	breq	.+10     	; 0x2446 <__vector_2+0x3c>
    243c:	80 91 de 23 	lds	r24, 0x23DE
    2440:	90 91 df 23 	lds	r25, 0x23DF
    2444:	19 95       	eicall
    2446:	ff 91       	pop	r31
    2448:	ef 91       	pop	r30
    244a:	bf 91       	pop	r27
    244c:	af 91       	pop	r26
    244e:	9f 91       	pop	r25
    2450:	8f 91       	pop	r24
    2452:	7f 91       	pop	r23
    2454:	6f 91       	pop	r22
    2456:	5f 91       	pop	r21
    2458:	4f 91       	pop	r20
    245a:	3f 91       	pop	r19
    245c:	2f 91       	pop	r18
    245e:	0f 90       	pop	r0
    2460:	0b be       	out	0x3b, r0	; 59
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	0f 90       	pop	r0
    2468:	1f 90       	pop	r1
    246a:	18 95       	reti

0000246c <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    246c:	1f 92       	push	r1
    246e:	0f 92       	push	r0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	0f 92       	push	r0
    2474:	11 24       	eor	r1, r1
    2476:	0b b6       	in	r0, 0x3b	; 59
    2478:	0f 92       	push	r0
    247a:	2f 93       	push	r18
    247c:	3f 93       	push	r19
    247e:	4f 93       	push	r20
    2480:	5f 93       	push	r21
    2482:	6f 93       	push	r22
    2484:	7f 93       	push	r23
    2486:	8f 93       	push	r24
    2488:	9f 93       	push	r25
    248a:	af 93       	push	r26
    248c:	bf 93       	push	r27
    248e:	ef 93       	push	r30
    2490:	ff 93       	push	r31
    2492:	e0 91 ea 22 	lds	r30, 0x22EA
    2496:	f0 91 eb 22 	lds	r31, 0x22EB
    249a:	30 97       	sbiw	r30, 0x00	; 0
    249c:	29 f0       	breq	.+10     	; 0x24a8 <__vector_3+0x3c>
    249e:	80 91 e0 23 	lds	r24, 0x23E0
    24a2:	90 91 e1 23 	lds	r25, 0x23E1
    24a6:	19 95       	eicall
    24a8:	ff 91       	pop	r31
    24aa:	ef 91       	pop	r30
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	7f 91       	pop	r23
    24b6:	6f 91       	pop	r22
    24b8:	5f 91       	pop	r21
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0b be       	out	0x3b, r0	; 59
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	2f 93       	push	r18
    24de:	3f 93       	push	r19
    24e0:	4f 93       	push	r20
    24e2:	5f 93       	push	r21
    24e4:	6f 93       	push	r22
    24e6:	7f 93       	push	r23
    24e8:	8f 93       	push	r24
    24ea:	9f 93       	push	r25
    24ec:	af 93       	push	r26
    24ee:	bf 93       	push	r27
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
    24f4:	e0 91 ec 22 	lds	r30, 0x22EC
    24f8:	f0 91 ed 22 	lds	r31, 0x22ED
    24fc:	30 97       	sbiw	r30, 0x00	; 0
    24fe:	29 f0       	breq	.+10     	; 0x250a <__vector_4+0x3c>
    2500:	80 91 e2 23 	lds	r24, 0x23E2
    2504:	90 91 e3 23 	lds	r25, 0x23E3
    2508:	19 95       	eicall
    250a:	ff 91       	pop	r31
    250c:	ef 91       	pop	r30
    250e:	bf 91       	pop	r27
    2510:	af 91       	pop	r26
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	7f 91       	pop	r23
    2518:	6f 91       	pop	r22
    251a:	5f 91       	pop	r21
    251c:	4f 91       	pop	r20
    251e:	3f 91       	pop	r19
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0b be       	out	0x3b, r0	; 59
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f 90       	pop	r0
    252c:	1f 90       	pop	r1
    252e:	18 95       	reti

00002530 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	0b b6       	in	r0, 0x3b	; 59
    253c:	0f 92       	push	r0
    253e:	2f 93       	push	r18
    2540:	3f 93       	push	r19
    2542:	4f 93       	push	r20
    2544:	5f 93       	push	r21
    2546:	6f 93       	push	r22
    2548:	7f 93       	push	r23
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	af 93       	push	r26
    2550:	bf 93       	push	r27
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
    2556:	e0 91 ee 22 	lds	r30, 0x22EE
    255a:	f0 91 ef 22 	lds	r31, 0x22EF
    255e:	30 97       	sbiw	r30, 0x00	; 0
    2560:	29 f0       	breq	.+10     	; 0x256c <__vector_5+0x3c>
    2562:	80 91 e4 23 	lds	r24, 0x23E4
    2566:	90 91 e5 23 	lds	r25, 0x23E5
    256a:	19 95       	eicall
    256c:	ff 91       	pop	r31
    256e:	ef 91       	pop	r30
    2570:	bf 91       	pop	r27
    2572:	af 91       	pop	r26
    2574:	9f 91       	pop	r25
    2576:	8f 91       	pop	r24
    2578:	7f 91       	pop	r23
    257a:	6f 91       	pop	r22
    257c:	5f 91       	pop	r21
    257e:	4f 91       	pop	r20
    2580:	3f 91       	pop	r19
    2582:	2f 91       	pop	r18
    2584:	0f 90       	pop	r0
    2586:	0b be       	out	0x3b, r0	; 59
    2588:	0f 90       	pop	r0
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	0f 90       	pop	r0
    258e:	1f 90       	pop	r1
    2590:	18 95       	reti

00002592 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    2592:	1f 92       	push	r1
    2594:	0f 92       	push	r0
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	0f 92       	push	r0
    259a:	11 24       	eor	r1, r1
    259c:	0b b6       	in	r0, 0x3b	; 59
    259e:	0f 92       	push	r0
    25a0:	2f 93       	push	r18
    25a2:	3f 93       	push	r19
    25a4:	4f 93       	push	r20
    25a6:	5f 93       	push	r21
    25a8:	6f 93       	push	r22
    25aa:	7f 93       	push	r23
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	ef 93       	push	r30
    25b6:	ff 93       	push	r31
    25b8:	e0 91 f0 22 	lds	r30, 0x22F0
    25bc:	f0 91 f1 22 	lds	r31, 0x22F1
    25c0:	30 97       	sbiw	r30, 0x00	; 0
    25c2:	29 f0       	breq	.+10     	; 0x25ce <__vector_6+0x3c>
    25c4:	80 91 e6 23 	lds	r24, 0x23E6
    25c8:	90 91 e7 23 	lds	r25, 0x23E7
    25cc:	19 95       	eicall
    25ce:	ff 91       	pop	r31
    25d0:	ef 91       	pop	r30
    25d2:	bf 91       	pop	r27
    25d4:	af 91       	pop	r26
    25d6:	9f 91       	pop	r25
    25d8:	8f 91       	pop	r24
    25da:	7f 91       	pop	r23
    25dc:	6f 91       	pop	r22
    25de:	5f 91       	pop	r21
    25e0:	4f 91       	pop	r20
    25e2:	3f 91       	pop	r19
    25e4:	2f 91       	pop	r18
    25e6:	0f 90       	pop	r0
    25e8:	0b be       	out	0x3b, r0	; 59
    25ea:	0f 90       	pop	r0
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	0f 90       	pop	r0
    25f0:	1f 90       	pop	r1
    25f2:	18 95       	reti

000025f4 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    25f4:	1f 92       	push	r1
    25f6:	0f 92       	push	r0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	0b b6       	in	r0, 0x3b	; 59
    2600:	0f 92       	push	r0
    2602:	2f 93       	push	r18
    2604:	3f 93       	push	r19
    2606:	4f 93       	push	r20
    2608:	5f 93       	push	r21
    260a:	6f 93       	push	r22
    260c:	7f 93       	push	r23
    260e:	8f 93       	push	r24
    2610:	9f 93       	push	r25
    2612:	af 93       	push	r26
    2614:	bf 93       	push	r27
    2616:	ef 93       	push	r30
    2618:	ff 93       	push	r31
    261a:	e0 91 f2 22 	lds	r30, 0x22F2
    261e:	f0 91 f3 22 	lds	r31, 0x22F3
    2622:	30 97       	sbiw	r30, 0x00	; 0
    2624:	29 f0       	breq	.+10     	; 0x2630 <__vector_7+0x3c>
    2626:	80 91 e8 23 	lds	r24, 0x23E8
    262a:	90 91 e9 23 	lds	r25, 0x23E9
    262e:	19 95       	eicall
    2630:	ff 91       	pop	r31
    2632:	ef 91       	pop	r30
    2634:	bf 91       	pop	r27
    2636:	af 91       	pop	r26
    2638:	9f 91       	pop	r25
    263a:	8f 91       	pop	r24
    263c:	7f 91       	pop	r23
    263e:	6f 91       	pop	r22
    2640:	5f 91       	pop	r21
    2642:	4f 91       	pop	r20
    2644:	3f 91       	pop	r19
    2646:	2f 91       	pop	r18
    2648:	0f 90       	pop	r0
    264a:	0b be       	out	0x3b, r0	; 59
    264c:	0f 90       	pop	r0
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	0f 90       	pop	r0
    2652:	1f 90       	pop	r1
    2654:	18 95       	reti

00002656 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	0b b6       	in	r0, 0x3b	; 59
    2662:	0f 92       	push	r0
    2664:	2f 93       	push	r18
    2666:	3f 93       	push	r19
    2668:	4f 93       	push	r20
    266a:	5f 93       	push	r21
    266c:	6f 93       	push	r22
    266e:	7f 93       	push	r23
    2670:	8f 93       	push	r24
    2672:	9f 93       	push	r25
    2674:	af 93       	push	r26
    2676:	bf 93       	push	r27
    2678:	ef 93       	push	r30
    267a:	ff 93       	push	r31
    267c:	e0 91 f4 22 	lds	r30, 0x22F4
    2680:	f0 91 f5 22 	lds	r31, 0x22F5
    2684:	30 97       	sbiw	r30, 0x00	; 0
    2686:	29 f0       	breq	.+10     	; 0x2692 <__vector_8+0x3c>
    2688:	80 91 ea 23 	lds	r24, 0x23EA
    268c:	90 91 eb 23 	lds	r25, 0x23EB
    2690:	19 95       	eicall
    2692:	ff 91       	pop	r31
    2694:	ef 91       	pop	r30
    2696:	bf 91       	pop	r27
    2698:	af 91       	pop	r26
    269a:	9f 91       	pop	r25
    269c:	8f 91       	pop	r24
    269e:	7f 91       	pop	r23
    26a0:	6f 91       	pop	r22
    26a2:	5f 91       	pop	r21
    26a4:	4f 91       	pop	r20
    26a6:	3f 91       	pop	r19
    26a8:	2f 91       	pop	r18
    26aa:	0f 90       	pop	r0
    26ac:	0b be       	out	0x3b, r0	; 59
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	0f 90       	pop	r0
    26b4:	1f 90       	pop	r1
    26b6:	18 95       	reti

000026b8 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    26b8:	1f 92       	push	r1
    26ba:	0f 92       	push	r0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	0f 92       	push	r0
    26c0:	11 24       	eor	r1, r1
    26c2:	0b b6       	in	r0, 0x3b	; 59
    26c4:	0f 92       	push	r0
    26c6:	2f 93       	push	r18
    26c8:	3f 93       	push	r19
    26ca:	4f 93       	push	r20
    26cc:	5f 93       	push	r21
    26ce:	6f 93       	push	r22
    26d0:	7f 93       	push	r23
    26d2:	8f 93       	push	r24
    26d4:	9f 93       	push	r25
    26d6:	af 93       	push	r26
    26d8:	bf 93       	push	r27
    26da:	ef 93       	push	r30
    26dc:	ff 93       	push	r31
    26de:	e0 91 f6 22 	lds	r30, 0x22F6
    26e2:	f0 91 f7 22 	lds	r31, 0x22F7
    26e6:	30 97       	sbiw	r30, 0x00	; 0
    26e8:	29 f0       	breq	.+10     	; 0x26f4 <__vector_9+0x3c>
    26ea:	80 91 ec 23 	lds	r24, 0x23EC
    26ee:	90 91 ed 23 	lds	r25, 0x23ED
    26f2:	19 95       	eicall
    26f4:	ff 91       	pop	r31
    26f6:	ef 91       	pop	r30
    26f8:	bf 91       	pop	r27
    26fa:	af 91       	pop	r26
    26fc:	9f 91       	pop	r25
    26fe:	8f 91       	pop	r24
    2700:	7f 91       	pop	r23
    2702:	6f 91       	pop	r22
    2704:	5f 91       	pop	r21
    2706:	4f 91       	pop	r20
    2708:	3f 91       	pop	r19
    270a:	2f 91       	pop	r18
    270c:	0f 90       	pop	r0
    270e:	0b be       	out	0x3b, r0	; 59
    2710:	0f 90       	pop	r0
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	0f 90       	pop	r0
    2716:	1f 90       	pop	r1
    2718:	18 95       	reti

0000271a <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    271a:	1f 92       	push	r1
    271c:	0f 92       	push	r0
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	0f 92       	push	r0
    2722:	11 24       	eor	r1, r1
    2724:	0b b6       	in	r0, 0x3b	; 59
    2726:	0f 92       	push	r0
    2728:	2f 93       	push	r18
    272a:	3f 93       	push	r19
    272c:	4f 93       	push	r20
    272e:	5f 93       	push	r21
    2730:	6f 93       	push	r22
    2732:	7f 93       	push	r23
    2734:	8f 93       	push	r24
    2736:	9f 93       	push	r25
    2738:	af 93       	push	r26
    273a:	bf 93       	push	r27
    273c:	ef 93       	push	r30
    273e:	ff 93       	push	r31
    2740:	e0 91 f8 22 	lds	r30, 0x22F8
    2744:	f0 91 f9 22 	lds	r31, 0x22F9
    2748:	30 97       	sbiw	r30, 0x00	; 0
    274a:	29 f0       	breq	.+10     	; 0x2756 <__vector_10+0x3c>
    274c:	80 91 ee 23 	lds	r24, 0x23EE
    2750:	90 91 ef 23 	lds	r25, 0x23EF
    2754:	19 95       	eicall
    2756:	ff 91       	pop	r31
    2758:	ef 91       	pop	r30
    275a:	bf 91       	pop	r27
    275c:	af 91       	pop	r26
    275e:	9f 91       	pop	r25
    2760:	8f 91       	pop	r24
    2762:	7f 91       	pop	r23
    2764:	6f 91       	pop	r22
    2766:	5f 91       	pop	r21
    2768:	4f 91       	pop	r20
    276a:	3f 91       	pop	r19
    276c:	2f 91       	pop	r18
    276e:	0f 90       	pop	r0
    2770:	0b be       	out	0x3b, r0	; 59
    2772:	0f 90       	pop	r0
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	0f 90       	pop	r0
    2778:	1f 90       	pop	r1
    277a:	18 95       	reti

0000277c <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    277c:	1f 92       	push	r1
    277e:	0f 92       	push	r0
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	0f 92       	push	r0
    2784:	11 24       	eor	r1, r1
    2786:	0b b6       	in	r0, 0x3b	; 59
    2788:	0f 92       	push	r0
    278a:	2f 93       	push	r18
    278c:	3f 93       	push	r19
    278e:	4f 93       	push	r20
    2790:	5f 93       	push	r21
    2792:	6f 93       	push	r22
    2794:	7f 93       	push	r23
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	af 93       	push	r26
    279c:	bf 93       	push	r27
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
    27a2:	e0 91 fa 22 	lds	r30, 0x22FA
    27a6:	f0 91 fb 22 	lds	r31, 0x22FB
    27aa:	30 97       	sbiw	r30, 0x00	; 0
    27ac:	29 f0       	breq	.+10     	; 0x27b8 <__vector_11+0x3c>
    27ae:	80 91 f0 23 	lds	r24, 0x23F0
    27b2:	90 91 f1 23 	lds	r25, 0x23F1
    27b6:	19 95       	eicall
    27b8:	ff 91       	pop	r31
    27ba:	ef 91       	pop	r30
    27bc:	bf 91       	pop	r27
    27be:	af 91       	pop	r26
    27c0:	9f 91       	pop	r25
    27c2:	8f 91       	pop	r24
    27c4:	7f 91       	pop	r23
    27c6:	6f 91       	pop	r22
    27c8:	5f 91       	pop	r21
    27ca:	4f 91       	pop	r20
    27cc:	3f 91       	pop	r19
    27ce:	2f 91       	pop	r18
    27d0:	0f 90       	pop	r0
    27d2:	0b be       	out	0x3b, r0	; 59
    27d4:	0f 90       	pop	r0
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	0f 90       	pop	r0
    27da:	1f 90       	pop	r1
    27dc:	18 95       	reti

000027de <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    27de:	1f 92       	push	r1
    27e0:	0f 92       	push	r0
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	0f 92       	push	r0
    27e6:	11 24       	eor	r1, r1
    27e8:	0b b6       	in	r0, 0x3b	; 59
    27ea:	0f 92       	push	r0
    27ec:	2f 93       	push	r18
    27ee:	3f 93       	push	r19
    27f0:	4f 93       	push	r20
    27f2:	5f 93       	push	r21
    27f4:	6f 93       	push	r22
    27f6:	7f 93       	push	r23
    27f8:	8f 93       	push	r24
    27fa:	9f 93       	push	r25
    27fc:	af 93       	push	r26
    27fe:	bf 93       	push	r27
    2800:	ef 93       	push	r30
    2802:	ff 93       	push	r31
    2804:	e0 91 fc 22 	lds	r30, 0x22FC
    2808:	f0 91 fd 22 	lds	r31, 0x22FD
    280c:	30 97       	sbiw	r30, 0x00	; 0
    280e:	29 f0       	breq	.+10     	; 0x281a <__vector_12+0x3c>
    2810:	80 91 f2 23 	lds	r24, 0x23F2
    2814:	90 91 f3 23 	lds	r25, 0x23F3
    2818:	19 95       	eicall
    281a:	ff 91       	pop	r31
    281c:	ef 91       	pop	r30
    281e:	bf 91       	pop	r27
    2820:	af 91       	pop	r26
    2822:	9f 91       	pop	r25
    2824:	8f 91       	pop	r24
    2826:	7f 91       	pop	r23
    2828:	6f 91       	pop	r22
    282a:	5f 91       	pop	r21
    282c:	4f 91       	pop	r20
    282e:	3f 91       	pop	r19
    2830:	2f 91       	pop	r18
    2832:	0f 90       	pop	r0
    2834:	0b be       	out	0x3b, r0	; 59
    2836:	0f 90       	pop	r0
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	0f 90       	pop	r0
    283c:	1f 90       	pop	r1
    283e:	18 95       	reti

00002840 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2840:	1f 92       	push	r1
    2842:	0f 92       	push	r0
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	0f 92       	push	r0
    2848:	11 24       	eor	r1, r1
    284a:	0b b6       	in	r0, 0x3b	; 59
    284c:	0f 92       	push	r0
    284e:	2f 93       	push	r18
    2850:	3f 93       	push	r19
    2852:	4f 93       	push	r20
    2854:	5f 93       	push	r21
    2856:	6f 93       	push	r22
    2858:	7f 93       	push	r23
    285a:	8f 93       	push	r24
    285c:	9f 93       	push	r25
    285e:	af 93       	push	r26
    2860:	bf 93       	push	r27
    2862:	ef 93       	push	r30
    2864:	ff 93       	push	r31
    2866:	e0 91 fe 22 	lds	r30, 0x22FE
    286a:	f0 91 ff 22 	lds	r31, 0x22FF
    286e:	30 97       	sbiw	r30, 0x00	; 0
    2870:	29 f0       	breq	.+10     	; 0x287c <__vector_13+0x3c>
    2872:	80 91 f4 23 	lds	r24, 0x23F4
    2876:	90 91 f5 23 	lds	r25, 0x23F5
    287a:	19 95       	eicall
    287c:	ff 91       	pop	r31
    287e:	ef 91       	pop	r30
    2880:	bf 91       	pop	r27
    2882:	af 91       	pop	r26
    2884:	9f 91       	pop	r25
    2886:	8f 91       	pop	r24
    2888:	7f 91       	pop	r23
    288a:	6f 91       	pop	r22
    288c:	5f 91       	pop	r21
    288e:	4f 91       	pop	r20
    2890:	3f 91       	pop	r19
    2892:	2f 91       	pop	r18
    2894:	0f 90       	pop	r0
    2896:	0b be       	out	0x3b, r0	; 59
    2898:	0f 90       	pop	r0
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	0f 90       	pop	r0
    289e:	1f 90       	pop	r1
    28a0:	18 95       	reti

000028a2 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    28a2:	1f 92       	push	r1
    28a4:	0f 92       	push	r0
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	0f 92       	push	r0
    28aa:	11 24       	eor	r1, r1
    28ac:	0b b6       	in	r0, 0x3b	; 59
    28ae:	0f 92       	push	r0
    28b0:	2f 93       	push	r18
    28b2:	3f 93       	push	r19
    28b4:	4f 93       	push	r20
    28b6:	5f 93       	push	r21
    28b8:	6f 93       	push	r22
    28ba:	7f 93       	push	r23
    28bc:	8f 93       	push	r24
    28be:	9f 93       	push	r25
    28c0:	af 93       	push	r26
    28c2:	bf 93       	push	r27
    28c4:	ef 93       	push	r30
    28c6:	ff 93       	push	r31
    28c8:	e0 91 00 23 	lds	r30, 0x2300
    28cc:	f0 91 01 23 	lds	r31, 0x2301
    28d0:	30 97       	sbiw	r30, 0x00	; 0
    28d2:	29 f0       	breq	.+10     	; 0x28de <__vector_14+0x3c>
    28d4:	80 91 f6 23 	lds	r24, 0x23F6
    28d8:	90 91 f7 23 	lds	r25, 0x23F7
    28dc:	19 95       	eicall
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0b be       	out	0x3b, r0	; 59
    28fa:	0f 90       	pop	r0
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	0f 90       	pop	r0
    2900:	1f 90       	pop	r1
    2902:	18 95       	reti

00002904 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    2904:	1f 92       	push	r1
    2906:	0f 92       	push	r0
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	0f 92       	push	r0
    290c:	11 24       	eor	r1, r1
    290e:	0b b6       	in	r0, 0x3b	; 59
    2910:	0f 92       	push	r0
    2912:	2f 93       	push	r18
    2914:	3f 93       	push	r19
    2916:	4f 93       	push	r20
    2918:	5f 93       	push	r21
    291a:	6f 93       	push	r22
    291c:	7f 93       	push	r23
    291e:	8f 93       	push	r24
    2920:	9f 93       	push	r25
    2922:	af 93       	push	r26
    2924:	bf 93       	push	r27
    2926:	ef 93       	push	r30
    2928:	ff 93       	push	r31
    292a:	e0 91 02 23 	lds	r30, 0x2302
    292e:	f0 91 03 23 	lds	r31, 0x2303
    2932:	30 97       	sbiw	r30, 0x00	; 0
    2934:	29 f0       	breq	.+10     	; 0x2940 <__vector_15+0x3c>
    2936:	80 91 f8 23 	lds	r24, 0x23F8
    293a:	90 91 f9 23 	lds	r25, 0x23F9
    293e:	19 95       	eicall
    2940:	ff 91       	pop	r31
    2942:	ef 91       	pop	r30
    2944:	bf 91       	pop	r27
    2946:	af 91       	pop	r26
    2948:	9f 91       	pop	r25
    294a:	8f 91       	pop	r24
    294c:	7f 91       	pop	r23
    294e:	6f 91       	pop	r22
    2950:	5f 91       	pop	r21
    2952:	4f 91       	pop	r20
    2954:	3f 91       	pop	r19
    2956:	2f 91       	pop	r18
    2958:	0f 90       	pop	r0
    295a:	0b be       	out	0x3b, r0	; 59
    295c:	0f 90       	pop	r0
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	0f 90       	pop	r0
    2962:	1f 90       	pop	r1
    2964:	18 95       	reti

00002966 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2966:	1f 92       	push	r1
    2968:	0f 92       	push	r0
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	0f 92       	push	r0
    296e:	11 24       	eor	r1, r1
    2970:	0b b6       	in	r0, 0x3b	; 59
    2972:	0f 92       	push	r0
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	ef 93       	push	r30
    298a:	ff 93       	push	r31
    298c:	e0 91 04 23 	lds	r30, 0x2304
    2990:	f0 91 05 23 	lds	r31, 0x2305
    2994:	30 97       	sbiw	r30, 0x00	; 0
    2996:	29 f0       	breq	.+10     	; 0x29a2 <__vector_16+0x3c>
    2998:	80 91 fa 23 	lds	r24, 0x23FA
    299c:	90 91 fb 23 	lds	r25, 0x23FB
    29a0:	19 95       	eicall
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	bf 91       	pop	r27
    29a8:	af 91       	pop	r26
    29aa:	9f 91       	pop	r25
    29ac:	8f 91       	pop	r24
    29ae:	7f 91       	pop	r23
    29b0:	6f 91       	pop	r22
    29b2:	5f 91       	pop	r21
    29b4:	4f 91       	pop	r20
    29b6:	3f 91       	pop	r19
    29b8:	2f 91       	pop	r18
    29ba:	0f 90       	pop	r0
    29bc:	0b be       	out	0x3b, r0	; 59
    29be:	0f 90       	pop	r0
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	0f 90       	pop	r0
    29c4:	1f 90       	pop	r1
    29c6:	18 95       	reti

000029c8 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    29c8:	1f 92       	push	r1
    29ca:	0f 92       	push	r0
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	0f 92       	push	r0
    29d0:	11 24       	eor	r1, r1
    29d2:	0b b6       	in	r0, 0x3b	; 59
    29d4:	0f 92       	push	r0
    29d6:	2f 93       	push	r18
    29d8:	3f 93       	push	r19
    29da:	4f 93       	push	r20
    29dc:	5f 93       	push	r21
    29de:	6f 93       	push	r22
    29e0:	7f 93       	push	r23
    29e2:	8f 93       	push	r24
    29e4:	9f 93       	push	r25
    29e6:	af 93       	push	r26
    29e8:	bf 93       	push	r27
    29ea:	ef 93       	push	r30
    29ec:	ff 93       	push	r31
    29ee:	e0 91 06 23 	lds	r30, 0x2306
    29f2:	f0 91 07 23 	lds	r31, 0x2307
    29f6:	30 97       	sbiw	r30, 0x00	; 0
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <__vector_17+0x3c>
    29fa:	80 91 fc 23 	lds	r24, 0x23FC
    29fe:	90 91 fd 23 	lds	r25, 0x23FD
    2a02:	19 95       	eicall
    2a04:	ff 91       	pop	r31
    2a06:	ef 91       	pop	r30
    2a08:	bf 91       	pop	r27
    2a0a:	af 91       	pop	r26
    2a0c:	9f 91       	pop	r25
    2a0e:	8f 91       	pop	r24
    2a10:	7f 91       	pop	r23
    2a12:	6f 91       	pop	r22
    2a14:	5f 91       	pop	r21
    2a16:	4f 91       	pop	r20
    2a18:	3f 91       	pop	r19
    2a1a:	2f 91       	pop	r18
    2a1c:	0f 90       	pop	r0
    2a1e:	0b be       	out	0x3b, r0	; 59
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	0f 90       	pop	r0
    2a26:	1f 90       	pop	r1
    2a28:	18 95       	reti

00002a2a <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	0b b6       	in	r0, 0x3b	; 59
    2a36:	0f 92       	push	r0
    2a38:	2f 93       	push	r18
    2a3a:	3f 93       	push	r19
    2a3c:	4f 93       	push	r20
    2a3e:	5f 93       	push	r21
    2a40:	6f 93       	push	r22
    2a42:	7f 93       	push	r23
    2a44:	8f 93       	push	r24
    2a46:	9f 93       	push	r25
    2a48:	af 93       	push	r26
    2a4a:	bf 93       	push	r27
    2a4c:	ef 93       	push	r30
    2a4e:	ff 93       	push	r31
    2a50:	e0 91 08 23 	lds	r30, 0x2308
    2a54:	f0 91 09 23 	lds	r31, 0x2309
    2a58:	30 97       	sbiw	r30, 0x00	; 0
    2a5a:	29 f0       	breq	.+10     	; 0x2a66 <__vector_18+0x3c>
    2a5c:	80 91 fe 23 	lds	r24, 0x23FE
    2a60:	90 91 ff 23 	lds	r25, 0x23FF
    2a64:	19 95       	eicall
    2a66:	ff 91       	pop	r31
    2a68:	ef 91       	pop	r30
    2a6a:	bf 91       	pop	r27
    2a6c:	af 91       	pop	r26
    2a6e:	9f 91       	pop	r25
    2a70:	8f 91       	pop	r24
    2a72:	7f 91       	pop	r23
    2a74:	6f 91       	pop	r22
    2a76:	5f 91       	pop	r21
    2a78:	4f 91       	pop	r20
    2a7a:	3f 91       	pop	r19
    2a7c:	2f 91       	pop	r18
    2a7e:	0f 90       	pop	r0
    2a80:	0b be       	out	0x3b, r0	; 59
    2a82:	0f 90       	pop	r0
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	0f 90       	pop	r0
    2a88:	1f 90       	pop	r1
    2a8a:	18 95       	reti

00002a8c <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2a8c:	1f 92       	push	r1
    2a8e:	0f 92       	push	r0
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	0f 92       	push	r0
    2a94:	11 24       	eor	r1, r1
    2a96:	0b b6       	in	r0, 0x3b	; 59
    2a98:	0f 92       	push	r0
    2a9a:	2f 93       	push	r18
    2a9c:	3f 93       	push	r19
    2a9e:	4f 93       	push	r20
    2aa0:	5f 93       	push	r21
    2aa2:	6f 93       	push	r22
    2aa4:	7f 93       	push	r23
    2aa6:	8f 93       	push	r24
    2aa8:	9f 93       	push	r25
    2aaa:	af 93       	push	r26
    2aac:	bf 93       	push	r27
    2aae:	ef 93       	push	r30
    2ab0:	ff 93       	push	r31
    2ab2:	e0 91 0a 23 	lds	r30, 0x230A
    2ab6:	f0 91 0b 23 	lds	r31, 0x230B
    2aba:	30 97       	sbiw	r30, 0x00	; 0
    2abc:	29 f0       	breq	.+10     	; 0x2ac8 <__vector_19+0x3c>
    2abe:	80 91 00 24 	lds	r24, 0x2400
    2ac2:	90 91 01 24 	lds	r25, 0x2401
    2ac6:	19 95       	eicall
    2ac8:	ff 91       	pop	r31
    2aca:	ef 91       	pop	r30
    2acc:	bf 91       	pop	r27
    2ace:	af 91       	pop	r26
    2ad0:	9f 91       	pop	r25
    2ad2:	8f 91       	pop	r24
    2ad4:	7f 91       	pop	r23
    2ad6:	6f 91       	pop	r22
    2ad8:	5f 91       	pop	r21
    2ada:	4f 91       	pop	r20
    2adc:	3f 91       	pop	r19
    2ade:	2f 91       	pop	r18
    2ae0:	0f 90       	pop	r0
    2ae2:	0b be       	out	0x3b, r0	; 59
    2ae4:	0f 90       	pop	r0
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	0f 90       	pop	r0
    2aea:	1f 90       	pop	r1
    2aec:	18 95       	reti

00002aee <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    2aee:	1f 92       	push	r1
    2af0:	0f 92       	push	r0
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	0f 92       	push	r0
    2af6:	11 24       	eor	r1, r1
    2af8:	0b b6       	in	r0, 0x3b	; 59
    2afa:	0f 92       	push	r0
    2afc:	2f 93       	push	r18
    2afe:	3f 93       	push	r19
    2b00:	4f 93       	push	r20
    2b02:	5f 93       	push	r21
    2b04:	6f 93       	push	r22
    2b06:	7f 93       	push	r23
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    2b14:	e0 91 0c 23 	lds	r30, 0x230C
    2b18:	f0 91 0d 23 	lds	r31, 0x230D
    2b1c:	30 97       	sbiw	r30, 0x00	; 0
    2b1e:	29 f0       	breq	.+10     	; 0x2b2a <__vector_20+0x3c>
    2b20:	80 91 02 24 	lds	r24, 0x2402
    2b24:	90 91 03 24 	lds	r25, 0x2403
    2b28:	19 95       	eicall
    2b2a:	ff 91       	pop	r31
    2b2c:	ef 91       	pop	r30
    2b2e:	bf 91       	pop	r27
    2b30:	af 91       	pop	r26
    2b32:	9f 91       	pop	r25
    2b34:	8f 91       	pop	r24
    2b36:	7f 91       	pop	r23
    2b38:	6f 91       	pop	r22
    2b3a:	5f 91       	pop	r21
    2b3c:	4f 91       	pop	r20
    2b3e:	3f 91       	pop	r19
    2b40:	2f 91       	pop	r18
    2b42:	0f 90       	pop	r0
    2b44:	0b be       	out	0x3b, r0	; 59
    2b46:	0f 90       	pop	r0
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	0f 90       	pop	r0
    2b4c:	1f 90       	pop	r1
    2b4e:	18 95       	reti

00002b50 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2b50:	1f 92       	push	r1
    2b52:	0f 92       	push	r0
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	0f 92       	push	r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	0b b6       	in	r0, 0x3b	; 59
    2b5c:	0f 92       	push	r0
    2b5e:	2f 93       	push	r18
    2b60:	3f 93       	push	r19
    2b62:	4f 93       	push	r20
    2b64:	5f 93       	push	r21
    2b66:	6f 93       	push	r22
    2b68:	7f 93       	push	r23
    2b6a:	8f 93       	push	r24
    2b6c:	9f 93       	push	r25
    2b6e:	af 93       	push	r26
    2b70:	bf 93       	push	r27
    2b72:	ef 93       	push	r30
    2b74:	ff 93       	push	r31
    2b76:	e0 91 0e 23 	lds	r30, 0x230E
    2b7a:	f0 91 0f 23 	lds	r31, 0x230F
    2b7e:	30 97       	sbiw	r30, 0x00	; 0
    2b80:	29 f0       	breq	.+10     	; 0x2b8c <__vector_21+0x3c>
    2b82:	80 91 04 24 	lds	r24, 0x2404
    2b86:	90 91 05 24 	lds	r25, 0x2405
    2b8a:	19 95       	eicall
    2b8c:	ff 91       	pop	r31
    2b8e:	ef 91       	pop	r30
    2b90:	bf 91       	pop	r27
    2b92:	af 91       	pop	r26
    2b94:	9f 91       	pop	r25
    2b96:	8f 91       	pop	r24
    2b98:	7f 91       	pop	r23
    2b9a:	6f 91       	pop	r22
    2b9c:	5f 91       	pop	r21
    2b9e:	4f 91       	pop	r20
    2ba0:	3f 91       	pop	r19
    2ba2:	2f 91       	pop	r18
    2ba4:	0f 90       	pop	r0
    2ba6:	0b be       	out	0x3b, r0	; 59
    2ba8:	0f 90       	pop	r0
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	0f 90       	pop	r0
    2bae:	1f 90       	pop	r1
    2bb0:	18 95       	reti

00002bb2 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2bb2:	1f 92       	push	r1
    2bb4:	0f 92       	push	r0
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	0f 92       	push	r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	0b b6       	in	r0, 0x3b	; 59
    2bbe:	0f 92       	push	r0
    2bc0:	2f 93       	push	r18
    2bc2:	3f 93       	push	r19
    2bc4:	4f 93       	push	r20
    2bc6:	5f 93       	push	r21
    2bc8:	6f 93       	push	r22
    2bca:	7f 93       	push	r23
    2bcc:	8f 93       	push	r24
    2bce:	9f 93       	push	r25
    2bd0:	af 93       	push	r26
    2bd2:	bf 93       	push	r27
    2bd4:	ef 93       	push	r30
    2bd6:	ff 93       	push	r31
    2bd8:	e0 91 10 23 	lds	r30, 0x2310
    2bdc:	f0 91 11 23 	lds	r31, 0x2311
    2be0:	30 97       	sbiw	r30, 0x00	; 0
    2be2:	29 f0       	breq	.+10     	; 0x2bee <__vector_22+0x3c>
    2be4:	80 91 06 24 	lds	r24, 0x2406
    2be8:	90 91 07 24 	lds	r25, 0x2407
    2bec:	19 95       	eicall
    2bee:	ff 91       	pop	r31
    2bf0:	ef 91       	pop	r30
    2bf2:	bf 91       	pop	r27
    2bf4:	af 91       	pop	r26
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	7f 91       	pop	r23
    2bfc:	6f 91       	pop	r22
    2bfe:	5f 91       	pop	r21
    2c00:	4f 91       	pop	r20
    2c02:	3f 91       	pop	r19
    2c04:	2f 91       	pop	r18
    2c06:	0f 90       	pop	r0
    2c08:	0b be       	out	0x3b, r0	; 59
    2c0a:	0f 90       	pop	r0
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	0f 90       	pop	r0
    2c10:	1f 90       	pop	r1
    2c12:	18 95       	reti

00002c14 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2c14:	1f 92       	push	r1
    2c16:	0f 92       	push	r0
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	0f 92       	push	r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	0b b6       	in	r0, 0x3b	; 59
    2c20:	0f 92       	push	r0
    2c22:	2f 93       	push	r18
    2c24:	3f 93       	push	r19
    2c26:	4f 93       	push	r20
    2c28:	5f 93       	push	r21
    2c2a:	6f 93       	push	r22
    2c2c:	7f 93       	push	r23
    2c2e:	8f 93       	push	r24
    2c30:	9f 93       	push	r25
    2c32:	af 93       	push	r26
    2c34:	bf 93       	push	r27
    2c36:	ef 93       	push	r30
    2c38:	ff 93       	push	r31
    2c3a:	e0 91 12 23 	lds	r30, 0x2312
    2c3e:	f0 91 13 23 	lds	r31, 0x2313
    2c42:	30 97       	sbiw	r30, 0x00	; 0
    2c44:	29 f0       	breq	.+10     	; 0x2c50 <__vector_23+0x3c>
    2c46:	80 91 08 24 	lds	r24, 0x2408
    2c4a:	90 91 09 24 	lds	r25, 0x2409
    2c4e:	19 95       	eicall
    2c50:	ff 91       	pop	r31
    2c52:	ef 91       	pop	r30
    2c54:	bf 91       	pop	r27
    2c56:	af 91       	pop	r26
    2c58:	9f 91       	pop	r25
    2c5a:	8f 91       	pop	r24
    2c5c:	7f 91       	pop	r23
    2c5e:	6f 91       	pop	r22
    2c60:	5f 91       	pop	r21
    2c62:	4f 91       	pop	r20
    2c64:	3f 91       	pop	r19
    2c66:	2f 91       	pop	r18
    2c68:	0f 90       	pop	r0
    2c6a:	0b be       	out	0x3b, r0	; 59
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	0f 90       	pop	r0
    2c72:	1f 90       	pop	r1
    2c74:	18 95       	reti

00002c76 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2c76:	1f 92       	push	r1
    2c78:	0f 92       	push	r0
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	0f 92       	push	r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	0b b6       	in	r0, 0x3b	; 59
    2c82:	0f 92       	push	r0
    2c84:	2f 93       	push	r18
    2c86:	3f 93       	push	r19
    2c88:	4f 93       	push	r20
    2c8a:	5f 93       	push	r21
    2c8c:	6f 93       	push	r22
    2c8e:	7f 93       	push	r23
    2c90:	8f 93       	push	r24
    2c92:	9f 93       	push	r25
    2c94:	af 93       	push	r26
    2c96:	bf 93       	push	r27
    2c98:	ef 93       	push	r30
    2c9a:	ff 93       	push	r31
    2c9c:	e0 91 14 23 	lds	r30, 0x2314
    2ca0:	f0 91 15 23 	lds	r31, 0x2315
    2ca4:	30 97       	sbiw	r30, 0x00	; 0
    2ca6:	29 f0       	breq	.+10     	; 0x2cb2 <__vector_24+0x3c>
    2ca8:	80 91 0a 24 	lds	r24, 0x240A
    2cac:	90 91 0b 24 	lds	r25, 0x240B
    2cb0:	19 95       	eicall
    2cb2:	ff 91       	pop	r31
    2cb4:	ef 91       	pop	r30
    2cb6:	bf 91       	pop	r27
    2cb8:	af 91       	pop	r26
    2cba:	9f 91       	pop	r25
    2cbc:	8f 91       	pop	r24
    2cbe:	7f 91       	pop	r23
    2cc0:	6f 91       	pop	r22
    2cc2:	5f 91       	pop	r21
    2cc4:	4f 91       	pop	r20
    2cc6:	3f 91       	pop	r19
    2cc8:	2f 91       	pop	r18
    2cca:	0f 90       	pop	r0
    2ccc:	0b be       	out	0x3b, r0	; 59
    2cce:	0f 90       	pop	r0
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	0f 90       	pop	r0
    2cd4:	1f 90       	pop	r1
    2cd6:	18 95       	reti

00002cd8 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2cd8:	1f 92       	push	r1
    2cda:	0f 92       	push	r0
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	0f 92       	push	r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	0b b6       	in	r0, 0x3b	; 59
    2ce4:	0f 92       	push	r0
    2ce6:	2f 93       	push	r18
    2ce8:	3f 93       	push	r19
    2cea:	4f 93       	push	r20
    2cec:	5f 93       	push	r21
    2cee:	6f 93       	push	r22
    2cf0:	7f 93       	push	r23
    2cf2:	8f 93       	push	r24
    2cf4:	9f 93       	push	r25
    2cf6:	af 93       	push	r26
    2cf8:	bf 93       	push	r27
    2cfa:	ef 93       	push	r30
    2cfc:	ff 93       	push	r31
    2cfe:	e0 91 16 23 	lds	r30, 0x2316
    2d02:	f0 91 17 23 	lds	r31, 0x2317
    2d06:	30 97       	sbiw	r30, 0x00	; 0
    2d08:	29 f0       	breq	.+10     	; 0x2d14 <__vector_25+0x3c>
    2d0a:	80 91 0c 24 	lds	r24, 0x240C
    2d0e:	90 91 0d 24 	lds	r25, 0x240D
    2d12:	19 95       	eicall
    2d14:	ff 91       	pop	r31
    2d16:	ef 91       	pop	r30
    2d18:	bf 91       	pop	r27
    2d1a:	af 91       	pop	r26
    2d1c:	9f 91       	pop	r25
    2d1e:	8f 91       	pop	r24
    2d20:	7f 91       	pop	r23
    2d22:	6f 91       	pop	r22
    2d24:	5f 91       	pop	r21
    2d26:	4f 91       	pop	r20
    2d28:	3f 91       	pop	r19
    2d2a:	2f 91       	pop	r18
    2d2c:	0f 90       	pop	r0
    2d2e:	0b be       	out	0x3b, r0	; 59
    2d30:	0f 90       	pop	r0
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	0f 90       	pop	r0
    2d36:	1f 90       	pop	r1
    2d38:	18 95       	reti

00002d3a <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2d3a:	1f 92       	push	r1
    2d3c:	0f 92       	push	r0
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	0f 92       	push	r0
    2d42:	11 24       	eor	r1, r1
    2d44:	0b b6       	in	r0, 0x3b	; 59
    2d46:	0f 92       	push	r0
    2d48:	2f 93       	push	r18
    2d4a:	3f 93       	push	r19
    2d4c:	4f 93       	push	r20
    2d4e:	5f 93       	push	r21
    2d50:	6f 93       	push	r22
    2d52:	7f 93       	push	r23
    2d54:	8f 93       	push	r24
    2d56:	9f 93       	push	r25
    2d58:	af 93       	push	r26
    2d5a:	bf 93       	push	r27
    2d5c:	ef 93       	push	r30
    2d5e:	ff 93       	push	r31
    2d60:	e0 91 18 23 	lds	r30, 0x2318
    2d64:	f0 91 19 23 	lds	r31, 0x2319
    2d68:	30 97       	sbiw	r30, 0x00	; 0
    2d6a:	29 f0       	breq	.+10     	; 0x2d76 <__vector_26+0x3c>
    2d6c:	80 91 0e 24 	lds	r24, 0x240E
    2d70:	90 91 0f 24 	lds	r25, 0x240F
    2d74:	19 95       	eicall
    2d76:	ff 91       	pop	r31
    2d78:	ef 91       	pop	r30
    2d7a:	bf 91       	pop	r27
    2d7c:	af 91       	pop	r26
    2d7e:	9f 91       	pop	r25
    2d80:	8f 91       	pop	r24
    2d82:	7f 91       	pop	r23
    2d84:	6f 91       	pop	r22
    2d86:	5f 91       	pop	r21
    2d88:	4f 91       	pop	r20
    2d8a:	3f 91       	pop	r19
    2d8c:	2f 91       	pop	r18
    2d8e:	0f 90       	pop	r0
    2d90:	0b be       	out	0x3b, r0	; 59
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2d9c:	1f 92       	push	r1
    2d9e:	0f 92       	push	r0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	0f 92       	push	r0
    2da4:	11 24       	eor	r1, r1
    2da6:	0b b6       	in	r0, 0x3b	; 59
    2da8:	0f 92       	push	r0
    2daa:	2f 93       	push	r18
    2dac:	3f 93       	push	r19
    2dae:	4f 93       	push	r20
    2db0:	5f 93       	push	r21
    2db2:	6f 93       	push	r22
    2db4:	7f 93       	push	r23
    2db6:	8f 93       	push	r24
    2db8:	9f 93       	push	r25
    2dba:	af 93       	push	r26
    2dbc:	bf 93       	push	r27
    2dbe:	ef 93       	push	r30
    2dc0:	ff 93       	push	r31
    2dc2:	e0 91 1a 23 	lds	r30, 0x231A
    2dc6:	f0 91 1b 23 	lds	r31, 0x231B
    2dca:	30 97       	sbiw	r30, 0x00	; 0
    2dcc:	29 f0       	breq	.+10     	; 0x2dd8 <__vector_27+0x3c>
    2dce:	80 91 10 24 	lds	r24, 0x2410
    2dd2:	90 91 11 24 	lds	r25, 0x2411
    2dd6:	19 95       	eicall
    2dd8:	ff 91       	pop	r31
    2dda:	ef 91       	pop	r30
    2ddc:	bf 91       	pop	r27
    2dde:	af 91       	pop	r26
    2de0:	9f 91       	pop	r25
    2de2:	8f 91       	pop	r24
    2de4:	7f 91       	pop	r23
    2de6:	6f 91       	pop	r22
    2de8:	5f 91       	pop	r21
    2dea:	4f 91       	pop	r20
    2dec:	3f 91       	pop	r19
    2dee:	2f 91       	pop	r18
    2df0:	0f 90       	pop	r0
    2df2:	0b be       	out	0x3b, r0	; 59
    2df4:	0f 90       	pop	r0
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	0f 90       	pop	r0
    2dfa:	1f 90       	pop	r1
    2dfc:	18 95       	reti

00002dfe <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2dfe:	1f 92       	push	r1
    2e00:	0f 92       	push	r0
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	0f 92       	push	r0
    2e06:	11 24       	eor	r1, r1
    2e08:	0b b6       	in	r0, 0x3b	; 59
    2e0a:	0f 92       	push	r0
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	e0 91 1c 23 	lds	r30, 0x231C
    2e28:	f0 91 1d 23 	lds	r31, 0x231D
    2e2c:	30 97       	sbiw	r30, 0x00	; 0
    2e2e:	29 f0       	breq	.+10     	; 0x2e3a <__vector_28+0x3c>
    2e30:	80 91 12 24 	lds	r24, 0x2412
    2e34:	90 91 13 24 	lds	r25, 0x2413
    2e38:	19 95       	eicall
    2e3a:	ff 91       	pop	r31
    2e3c:	ef 91       	pop	r30
    2e3e:	bf 91       	pop	r27
    2e40:	af 91       	pop	r26
    2e42:	9f 91       	pop	r25
    2e44:	8f 91       	pop	r24
    2e46:	7f 91       	pop	r23
    2e48:	6f 91       	pop	r22
    2e4a:	5f 91       	pop	r21
    2e4c:	4f 91       	pop	r20
    2e4e:	3f 91       	pop	r19
    2e50:	2f 91       	pop	r18
    2e52:	0f 90       	pop	r0
    2e54:	0b be       	out	0x3b, r0	; 59
    2e56:	0f 90       	pop	r0
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	0f 90       	pop	r0
    2e5c:	1f 90       	pop	r1
    2e5e:	18 95       	reti

00002e60 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2e60:	1f 92       	push	r1
    2e62:	0f 92       	push	r0
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	0f 92       	push	r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	0b b6       	in	r0, 0x3b	; 59
    2e6c:	0f 92       	push	r0
    2e6e:	2f 93       	push	r18
    2e70:	3f 93       	push	r19
    2e72:	4f 93       	push	r20
    2e74:	5f 93       	push	r21
    2e76:	6f 93       	push	r22
    2e78:	7f 93       	push	r23
    2e7a:	8f 93       	push	r24
    2e7c:	9f 93       	push	r25
    2e7e:	af 93       	push	r26
    2e80:	bf 93       	push	r27
    2e82:	ef 93       	push	r30
    2e84:	ff 93       	push	r31
    2e86:	e0 91 1e 23 	lds	r30, 0x231E
    2e8a:	f0 91 1f 23 	lds	r31, 0x231F
    2e8e:	30 97       	sbiw	r30, 0x00	; 0
    2e90:	29 f0       	breq	.+10     	; 0x2e9c <__vector_29+0x3c>
    2e92:	80 91 14 24 	lds	r24, 0x2414
    2e96:	90 91 15 24 	lds	r25, 0x2415
    2e9a:	19 95       	eicall
    2e9c:	ff 91       	pop	r31
    2e9e:	ef 91       	pop	r30
    2ea0:	bf 91       	pop	r27
    2ea2:	af 91       	pop	r26
    2ea4:	9f 91       	pop	r25
    2ea6:	8f 91       	pop	r24
    2ea8:	7f 91       	pop	r23
    2eaa:	6f 91       	pop	r22
    2eac:	5f 91       	pop	r21
    2eae:	4f 91       	pop	r20
    2eb0:	3f 91       	pop	r19
    2eb2:	2f 91       	pop	r18
    2eb4:	0f 90       	pop	r0
    2eb6:	0b be       	out	0x3b, r0	; 59
    2eb8:	0f 90       	pop	r0
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	0f 90       	pop	r0
    2ebe:	1f 90       	pop	r1
    2ec0:	18 95       	reti

00002ec2 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2ec2:	1f 92       	push	r1
    2ec4:	0f 92       	push	r0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	0f 92       	push	r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	0b b6       	in	r0, 0x3b	; 59
    2ece:	0f 92       	push	r0
    2ed0:	2f 93       	push	r18
    2ed2:	3f 93       	push	r19
    2ed4:	4f 93       	push	r20
    2ed6:	5f 93       	push	r21
    2ed8:	6f 93       	push	r22
    2eda:	7f 93       	push	r23
    2edc:	8f 93       	push	r24
    2ede:	9f 93       	push	r25
    2ee0:	af 93       	push	r26
    2ee2:	bf 93       	push	r27
    2ee4:	ef 93       	push	r30
    2ee6:	ff 93       	push	r31
    2ee8:	e0 91 20 23 	lds	r30, 0x2320
    2eec:	f0 91 21 23 	lds	r31, 0x2321
    2ef0:	30 97       	sbiw	r30, 0x00	; 0
    2ef2:	29 f0       	breq	.+10     	; 0x2efe <__vector_30+0x3c>
    2ef4:	80 91 16 24 	lds	r24, 0x2416
    2ef8:	90 91 17 24 	lds	r25, 0x2417
    2efc:	19 95       	eicall
    2efe:	ff 91       	pop	r31
    2f00:	ef 91       	pop	r30
    2f02:	bf 91       	pop	r27
    2f04:	af 91       	pop	r26
    2f06:	9f 91       	pop	r25
    2f08:	8f 91       	pop	r24
    2f0a:	7f 91       	pop	r23
    2f0c:	6f 91       	pop	r22
    2f0e:	5f 91       	pop	r21
    2f10:	4f 91       	pop	r20
    2f12:	3f 91       	pop	r19
    2f14:	2f 91       	pop	r18
    2f16:	0f 90       	pop	r0
    2f18:	0b be       	out	0x3b, r0	; 59
    2f1a:	0f 90       	pop	r0
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	0f 90       	pop	r0
    2f20:	1f 90       	pop	r1
    2f22:	18 95       	reti

00002f24 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2f24:	1f 92       	push	r1
    2f26:	0f 92       	push	r0
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	0f 92       	push	r0
    2f2c:	11 24       	eor	r1, r1
    2f2e:	0b b6       	in	r0, 0x3b	; 59
    2f30:	0f 92       	push	r0
    2f32:	2f 93       	push	r18
    2f34:	3f 93       	push	r19
    2f36:	4f 93       	push	r20
    2f38:	5f 93       	push	r21
    2f3a:	6f 93       	push	r22
    2f3c:	7f 93       	push	r23
    2f3e:	8f 93       	push	r24
    2f40:	9f 93       	push	r25
    2f42:	af 93       	push	r26
    2f44:	bf 93       	push	r27
    2f46:	ef 93       	push	r30
    2f48:	ff 93       	push	r31
    2f4a:	e0 91 22 23 	lds	r30, 0x2322
    2f4e:	f0 91 23 23 	lds	r31, 0x2323
    2f52:	30 97       	sbiw	r30, 0x00	; 0
    2f54:	29 f0       	breq	.+10     	; 0x2f60 <__vector_31+0x3c>
    2f56:	80 91 18 24 	lds	r24, 0x2418
    2f5a:	90 91 19 24 	lds	r25, 0x2419
    2f5e:	19 95       	eicall
    2f60:	ff 91       	pop	r31
    2f62:	ef 91       	pop	r30
    2f64:	bf 91       	pop	r27
    2f66:	af 91       	pop	r26
    2f68:	9f 91       	pop	r25
    2f6a:	8f 91       	pop	r24
    2f6c:	7f 91       	pop	r23
    2f6e:	6f 91       	pop	r22
    2f70:	5f 91       	pop	r21
    2f72:	4f 91       	pop	r20
    2f74:	3f 91       	pop	r19
    2f76:	2f 91       	pop	r18
    2f78:	0f 90       	pop	r0
    2f7a:	0b be       	out	0x3b, r0	; 59
    2f7c:	0f 90       	pop	r0
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	0f 90       	pop	r0
    2f82:	1f 90       	pop	r1
    2f84:	18 95       	reti

00002f86 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2f86:	1f 92       	push	r1
    2f88:	0f 92       	push	r0
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	0f 92       	push	r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	0b b6       	in	r0, 0x3b	; 59
    2f92:	0f 92       	push	r0
    2f94:	2f 93       	push	r18
    2f96:	3f 93       	push	r19
    2f98:	4f 93       	push	r20
    2f9a:	5f 93       	push	r21
    2f9c:	6f 93       	push	r22
    2f9e:	7f 93       	push	r23
    2fa0:	8f 93       	push	r24
    2fa2:	9f 93       	push	r25
    2fa4:	af 93       	push	r26
    2fa6:	bf 93       	push	r27
    2fa8:	ef 93       	push	r30
    2faa:	ff 93       	push	r31
    2fac:	e0 91 24 23 	lds	r30, 0x2324
    2fb0:	f0 91 25 23 	lds	r31, 0x2325
    2fb4:	30 97       	sbiw	r30, 0x00	; 0
    2fb6:	29 f0       	breq	.+10     	; 0x2fc2 <__vector_32+0x3c>
    2fb8:	80 91 1a 24 	lds	r24, 0x241A
    2fbc:	90 91 1b 24 	lds	r25, 0x241B
    2fc0:	19 95       	eicall
    2fc2:	ff 91       	pop	r31
    2fc4:	ef 91       	pop	r30
    2fc6:	bf 91       	pop	r27
    2fc8:	af 91       	pop	r26
    2fca:	9f 91       	pop	r25
    2fcc:	8f 91       	pop	r24
    2fce:	7f 91       	pop	r23
    2fd0:	6f 91       	pop	r22
    2fd2:	5f 91       	pop	r21
    2fd4:	4f 91       	pop	r20
    2fd6:	3f 91       	pop	r19
    2fd8:	2f 91       	pop	r18
    2fda:	0f 90       	pop	r0
    2fdc:	0b be       	out	0x3b, r0	; 59
    2fde:	0f 90       	pop	r0
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	0f 90       	pop	r0
    2fe4:	1f 90       	pop	r1
    2fe6:	18 95       	reti

00002fe8 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2fe8:	1f 92       	push	r1
    2fea:	0f 92       	push	r0
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	0f 92       	push	r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	0b b6       	in	r0, 0x3b	; 59
    2ff4:	0f 92       	push	r0
    2ff6:	2f 93       	push	r18
    2ff8:	3f 93       	push	r19
    2ffa:	4f 93       	push	r20
    2ffc:	5f 93       	push	r21
    2ffe:	6f 93       	push	r22
    3000:	7f 93       	push	r23
    3002:	8f 93       	push	r24
    3004:	9f 93       	push	r25
    3006:	af 93       	push	r26
    3008:	bf 93       	push	r27
    300a:	ef 93       	push	r30
    300c:	ff 93       	push	r31
    300e:	e0 91 26 23 	lds	r30, 0x2326
    3012:	f0 91 27 23 	lds	r31, 0x2327
    3016:	30 97       	sbiw	r30, 0x00	; 0
    3018:	29 f0       	breq	.+10     	; 0x3024 <__vector_33+0x3c>
    301a:	80 91 1c 24 	lds	r24, 0x241C
    301e:	90 91 1d 24 	lds	r25, 0x241D
    3022:	19 95       	eicall
    3024:	ff 91       	pop	r31
    3026:	ef 91       	pop	r30
    3028:	bf 91       	pop	r27
    302a:	af 91       	pop	r26
    302c:	9f 91       	pop	r25
    302e:	8f 91       	pop	r24
    3030:	7f 91       	pop	r23
    3032:	6f 91       	pop	r22
    3034:	5f 91       	pop	r21
    3036:	4f 91       	pop	r20
    3038:	3f 91       	pop	r19
    303a:	2f 91       	pop	r18
    303c:	0f 90       	pop	r0
    303e:	0b be       	out	0x3b, r0	; 59
    3040:	0f 90       	pop	r0
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	0f 90       	pop	r0
    3046:	1f 90       	pop	r1
    3048:	18 95       	reti

0000304a <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    304a:	1f 92       	push	r1
    304c:	0f 92       	push	r0
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	0f 92       	push	r0
    3052:	11 24       	eor	r1, r1
    3054:	0b b6       	in	r0, 0x3b	; 59
    3056:	0f 92       	push	r0
    3058:	2f 93       	push	r18
    305a:	3f 93       	push	r19
    305c:	4f 93       	push	r20
    305e:	5f 93       	push	r21
    3060:	6f 93       	push	r22
    3062:	7f 93       	push	r23
    3064:	8f 93       	push	r24
    3066:	9f 93       	push	r25
    3068:	af 93       	push	r26
    306a:	bf 93       	push	r27
    306c:	ef 93       	push	r30
    306e:	ff 93       	push	r31
    3070:	e0 91 28 23 	lds	r30, 0x2328
    3074:	f0 91 29 23 	lds	r31, 0x2329
    3078:	30 97       	sbiw	r30, 0x00	; 0
    307a:	29 f0       	breq	.+10     	; 0x3086 <__vector_34+0x3c>
    307c:	80 91 1e 24 	lds	r24, 0x241E
    3080:	90 91 1f 24 	lds	r25, 0x241F
    3084:	19 95       	eicall
    3086:	ff 91       	pop	r31
    3088:	ef 91       	pop	r30
    308a:	bf 91       	pop	r27
    308c:	af 91       	pop	r26
    308e:	9f 91       	pop	r25
    3090:	8f 91       	pop	r24
    3092:	7f 91       	pop	r23
    3094:	6f 91       	pop	r22
    3096:	5f 91       	pop	r21
    3098:	4f 91       	pop	r20
    309a:	3f 91       	pop	r19
    309c:	2f 91       	pop	r18
    309e:	0f 90       	pop	r0
    30a0:	0b be       	out	0x3b, r0	; 59
    30a2:	0f 90       	pop	r0
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	0f 90       	pop	r0
    30a8:	1f 90       	pop	r1
    30aa:	18 95       	reti

000030ac <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    30ac:	1f 92       	push	r1
    30ae:	0f 92       	push	r0
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	0f 92       	push	r0
    30b4:	11 24       	eor	r1, r1
    30b6:	0b b6       	in	r0, 0x3b	; 59
    30b8:	0f 92       	push	r0
    30ba:	2f 93       	push	r18
    30bc:	3f 93       	push	r19
    30be:	4f 93       	push	r20
    30c0:	5f 93       	push	r21
    30c2:	6f 93       	push	r22
    30c4:	7f 93       	push	r23
    30c6:	8f 93       	push	r24
    30c8:	9f 93       	push	r25
    30ca:	af 93       	push	r26
    30cc:	bf 93       	push	r27
    30ce:	ef 93       	push	r30
    30d0:	ff 93       	push	r31
    30d2:	e0 91 2a 23 	lds	r30, 0x232A
    30d6:	f0 91 2b 23 	lds	r31, 0x232B
    30da:	30 97       	sbiw	r30, 0x00	; 0
    30dc:	29 f0       	breq	.+10     	; 0x30e8 <__vector_35+0x3c>
    30de:	80 91 20 24 	lds	r24, 0x2420
    30e2:	90 91 21 24 	lds	r25, 0x2421
    30e6:	19 95       	eicall
    30e8:	ff 91       	pop	r31
    30ea:	ef 91       	pop	r30
    30ec:	bf 91       	pop	r27
    30ee:	af 91       	pop	r26
    30f0:	9f 91       	pop	r25
    30f2:	8f 91       	pop	r24
    30f4:	7f 91       	pop	r23
    30f6:	6f 91       	pop	r22
    30f8:	5f 91       	pop	r21
    30fa:	4f 91       	pop	r20
    30fc:	3f 91       	pop	r19
    30fe:	2f 91       	pop	r18
    3100:	0f 90       	pop	r0
    3102:	0b be       	out	0x3b, r0	; 59
    3104:	0f 90       	pop	r0
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	0f 90       	pop	r0
    310a:	1f 90       	pop	r1
    310c:	18 95       	reti

0000310e <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    310e:	1f 92       	push	r1
    3110:	0f 92       	push	r0
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	0f 92       	push	r0
    3116:	11 24       	eor	r1, r1
    3118:	0b b6       	in	r0, 0x3b	; 59
    311a:	0f 92       	push	r0
    311c:	2f 93       	push	r18
    311e:	3f 93       	push	r19
    3120:	4f 93       	push	r20
    3122:	5f 93       	push	r21
    3124:	6f 93       	push	r22
    3126:	7f 93       	push	r23
    3128:	8f 93       	push	r24
    312a:	9f 93       	push	r25
    312c:	af 93       	push	r26
    312e:	bf 93       	push	r27
    3130:	ef 93       	push	r30
    3132:	ff 93       	push	r31
    3134:	e0 91 2c 23 	lds	r30, 0x232C
    3138:	f0 91 2d 23 	lds	r31, 0x232D
    313c:	30 97       	sbiw	r30, 0x00	; 0
    313e:	29 f0       	breq	.+10     	; 0x314a <__vector_36+0x3c>
    3140:	80 91 22 24 	lds	r24, 0x2422
    3144:	90 91 23 24 	lds	r25, 0x2423
    3148:	19 95       	eicall
    314a:	ff 91       	pop	r31
    314c:	ef 91       	pop	r30
    314e:	bf 91       	pop	r27
    3150:	af 91       	pop	r26
    3152:	9f 91       	pop	r25
    3154:	8f 91       	pop	r24
    3156:	7f 91       	pop	r23
    3158:	6f 91       	pop	r22
    315a:	5f 91       	pop	r21
    315c:	4f 91       	pop	r20
    315e:	3f 91       	pop	r19
    3160:	2f 91       	pop	r18
    3162:	0f 90       	pop	r0
    3164:	0b be       	out	0x3b, r0	; 59
    3166:	0f 90       	pop	r0
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	0f 90       	pop	r0
    316c:	1f 90       	pop	r1
    316e:	18 95       	reti

00003170 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    3170:	1f 92       	push	r1
    3172:	0f 92       	push	r0
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	0f 92       	push	r0
    3178:	11 24       	eor	r1, r1
    317a:	0b b6       	in	r0, 0x3b	; 59
    317c:	0f 92       	push	r0
    317e:	2f 93       	push	r18
    3180:	3f 93       	push	r19
    3182:	4f 93       	push	r20
    3184:	5f 93       	push	r21
    3186:	6f 93       	push	r22
    3188:	7f 93       	push	r23
    318a:	8f 93       	push	r24
    318c:	9f 93       	push	r25
    318e:	af 93       	push	r26
    3190:	bf 93       	push	r27
    3192:	ef 93       	push	r30
    3194:	ff 93       	push	r31
    3196:	e0 91 2e 23 	lds	r30, 0x232E
    319a:	f0 91 2f 23 	lds	r31, 0x232F
    319e:	30 97       	sbiw	r30, 0x00	; 0
    31a0:	29 f0       	breq	.+10     	; 0x31ac <__vector_37+0x3c>
    31a2:	80 91 24 24 	lds	r24, 0x2424
    31a6:	90 91 25 24 	lds	r25, 0x2425
    31aa:	19 95       	eicall
    31ac:	ff 91       	pop	r31
    31ae:	ef 91       	pop	r30
    31b0:	bf 91       	pop	r27
    31b2:	af 91       	pop	r26
    31b4:	9f 91       	pop	r25
    31b6:	8f 91       	pop	r24
    31b8:	7f 91       	pop	r23
    31ba:	6f 91       	pop	r22
    31bc:	5f 91       	pop	r21
    31be:	4f 91       	pop	r20
    31c0:	3f 91       	pop	r19
    31c2:	2f 91       	pop	r18
    31c4:	0f 90       	pop	r0
    31c6:	0b be       	out	0x3b, r0	; 59
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	0f 90       	pop	r0
    31ce:	1f 90       	pop	r1
    31d0:	18 95       	reti

000031d2 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    31d2:	1f 92       	push	r1
    31d4:	0f 92       	push	r0
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	0f 92       	push	r0
    31da:	11 24       	eor	r1, r1
    31dc:	0b b6       	in	r0, 0x3b	; 59
    31de:	0f 92       	push	r0
    31e0:	2f 93       	push	r18
    31e2:	3f 93       	push	r19
    31e4:	4f 93       	push	r20
    31e6:	5f 93       	push	r21
    31e8:	6f 93       	push	r22
    31ea:	7f 93       	push	r23
    31ec:	8f 93       	push	r24
    31ee:	9f 93       	push	r25
    31f0:	af 93       	push	r26
    31f2:	bf 93       	push	r27
    31f4:	ef 93       	push	r30
    31f6:	ff 93       	push	r31
    31f8:	e0 91 30 23 	lds	r30, 0x2330
    31fc:	f0 91 31 23 	lds	r31, 0x2331
    3200:	30 97       	sbiw	r30, 0x00	; 0
    3202:	29 f0       	breq	.+10     	; 0x320e <__vector_38+0x3c>
    3204:	80 91 26 24 	lds	r24, 0x2426
    3208:	90 91 27 24 	lds	r25, 0x2427
    320c:	19 95       	eicall
    320e:	ff 91       	pop	r31
    3210:	ef 91       	pop	r30
    3212:	bf 91       	pop	r27
    3214:	af 91       	pop	r26
    3216:	9f 91       	pop	r25
    3218:	8f 91       	pop	r24
    321a:	7f 91       	pop	r23
    321c:	6f 91       	pop	r22
    321e:	5f 91       	pop	r21
    3220:	4f 91       	pop	r20
    3222:	3f 91       	pop	r19
    3224:	2f 91       	pop	r18
    3226:	0f 90       	pop	r0
    3228:	0b be       	out	0x3b, r0	; 59
    322a:	0f 90       	pop	r0
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	0f 90       	pop	r0
    3230:	1f 90       	pop	r1
    3232:	18 95       	reti

00003234 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    3234:	1f 92       	push	r1
    3236:	0f 92       	push	r0
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	0f 92       	push	r0
    323c:	11 24       	eor	r1, r1
    323e:	0b b6       	in	r0, 0x3b	; 59
    3240:	0f 92       	push	r0
    3242:	2f 93       	push	r18
    3244:	3f 93       	push	r19
    3246:	4f 93       	push	r20
    3248:	5f 93       	push	r21
    324a:	6f 93       	push	r22
    324c:	7f 93       	push	r23
    324e:	8f 93       	push	r24
    3250:	9f 93       	push	r25
    3252:	af 93       	push	r26
    3254:	bf 93       	push	r27
    3256:	ef 93       	push	r30
    3258:	ff 93       	push	r31
    325a:	e0 91 32 23 	lds	r30, 0x2332
    325e:	f0 91 33 23 	lds	r31, 0x2333
    3262:	30 97       	sbiw	r30, 0x00	; 0
    3264:	29 f0       	breq	.+10     	; 0x3270 <__vector_39+0x3c>
    3266:	80 91 28 24 	lds	r24, 0x2428
    326a:	90 91 29 24 	lds	r25, 0x2429
    326e:	19 95       	eicall
    3270:	ff 91       	pop	r31
    3272:	ef 91       	pop	r30
    3274:	bf 91       	pop	r27
    3276:	af 91       	pop	r26
    3278:	9f 91       	pop	r25
    327a:	8f 91       	pop	r24
    327c:	7f 91       	pop	r23
    327e:	6f 91       	pop	r22
    3280:	5f 91       	pop	r21
    3282:	4f 91       	pop	r20
    3284:	3f 91       	pop	r19
    3286:	2f 91       	pop	r18
    3288:	0f 90       	pop	r0
    328a:	0b be       	out	0x3b, r0	; 59
    328c:	0f 90       	pop	r0
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	0f 90       	pop	r0
    3292:	1f 90       	pop	r1
    3294:	18 95       	reti

00003296 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    3296:	1f 92       	push	r1
    3298:	0f 92       	push	r0
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	0f 92       	push	r0
    329e:	11 24       	eor	r1, r1
    32a0:	0b b6       	in	r0, 0x3b	; 59
    32a2:	0f 92       	push	r0
    32a4:	2f 93       	push	r18
    32a6:	3f 93       	push	r19
    32a8:	4f 93       	push	r20
    32aa:	5f 93       	push	r21
    32ac:	6f 93       	push	r22
    32ae:	7f 93       	push	r23
    32b0:	8f 93       	push	r24
    32b2:	9f 93       	push	r25
    32b4:	af 93       	push	r26
    32b6:	bf 93       	push	r27
    32b8:	ef 93       	push	r30
    32ba:	ff 93       	push	r31
    32bc:	e0 91 34 23 	lds	r30, 0x2334
    32c0:	f0 91 35 23 	lds	r31, 0x2335
    32c4:	30 97       	sbiw	r30, 0x00	; 0
    32c6:	29 f0       	breq	.+10     	; 0x32d2 <__vector_40+0x3c>
    32c8:	80 91 2a 24 	lds	r24, 0x242A
    32cc:	90 91 2b 24 	lds	r25, 0x242B
    32d0:	19 95       	eicall
    32d2:	ff 91       	pop	r31
    32d4:	ef 91       	pop	r30
    32d6:	bf 91       	pop	r27
    32d8:	af 91       	pop	r26
    32da:	9f 91       	pop	r25
    32dc:	8f 91       	pop	r24
    32de:	7f 91       	pop	r23
    32e0:	6f 91       	pop	r22
    32e2:	5f 91       	pop	r21
    32e4:	4f 91       	pop	r20
    32e6:	3f 91       	pop	r19
    32e8:	2f 91       	pop	r18
    32ea:	0f 90       	pop	r0
    32ec:	0b be       	out	0x3b, r0	; 59
    32ee:	0f 90       	pop	r0
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	0f 90       	pop	r0
    32f4:	1f 90       	pop	r1
    32f6:	18 95       	reti

000032f8 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    32f8:	1f 92       	push	r1
    32fa:	0f 92       	push	r0
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	0f 92       	push	r0
    3300:	11 24       	eor	r1, r1
    3302:	0b b6       	in	r0, 0x3b	; 59
    3304:	0f 92       	push	r0
    3306:	2f 93       	push	r18
    3308:	3f 93       	push	r19
    330a:	4f 93       	push	r20
    330c:	5f 93       	push	r21
    330e:	6f 93       	push	r22
    3310:	7f 93       	push	r23
    3312:	8f 93       	push	r24
    3314:	9f 93       	push	r25
    3316:	af 93       	push	r26
    3318:	bf 93       	push	r27
    331a:	ef 93       	push	r30
    331c:	ff 93       	push	r31
    331e:	e0 91 36 23 	lds	r30, 0x2336
    3322:	f0 91 37 23 	lds	r31, 0x2337
    3326:	30 97       	sbiw	r30, 0x00	; 0
    3328:	29 f0       	breq	.+10     	; 0x3334 <__vector_41+0x3c>
    332a:	80 91 2c 24 	lds	r24, 0x242C
    332e:	90 91 2d 24 	lds	r25, 0x242D
    3332:	19 95       	eicall
    3334:	ff 91       	pop	r31
    3336:	ef 91       	pop	r30
    3338:	bf 91       	pop	r27
    333a:	af 91       	pop	r26
    333c:	9f 91       	pop	r25
    333e:	8f 91       	pop	r24
    3340:	7f 91       	pop	r23
    3342:	6f 91       	pop	r22
    3344:	5f 91       	pop	r21
    3346:	4f 91       	pop	r20
    3348:	3f 91       	pop	r19
    334a:	2f 91       	pop	r18
    334c:	0f 90       	pop	r0
    334e:	0b be       	out	0x3b, r0	; 59
    3350:	0f 90       	pop	r0
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	0f 90       	pop	r0
    3356:	1f 90       	pop	r1
    3358:	18 95       	reti

0000335a <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    335a:	1f 92       	push	r1
    335c:	0f 92       	push	r0
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	0f 92       	push	r0
    3362:	11 24       	eor	r1, r1
    3364:	0b b6       	in	r0, 0x3b	; 59
    3366:	0f 92       	push	r0
    3368:	2f 93       	push	r18
    336a:	3f 93       	push	r19
    336c:	4f 93       	push	r20
    336e:	5f 93       	push	r21
    3370:	6f 93       	push	r22
    3372:	7f 93       	push	r23
    3374:	8f 93       	push	r24
    3376:	9f 93       	push	r25
    3378:	af 93       	push	r26
    337a:	bf 93       	push	r27
    337c:	ef 93       	push	r30
    337e:	ff 93       	push	r31
    3380:	e0 91 38 23 	lds	r30, 0x2338
    3384:	f0 91 39 23 	lds	r31, 0x2339
    3388:	30 97       	sbiw	r30, 0x00	; 0
    338a:	29 f0       	breq	.+10     	; 0x3396 <__vector_42+0x3c>
    338c:	80 91 2e 24 	lds	r24, 0x242E
    3390:	90 91 2f 24 	lds	r25, 0x242F
    3394:	19 95       	eicall
    3396:	ff 91       	pop	r31
    3398:	ef 91       	pop	r30
    339a:	bf 91       	pop	r27
    339c:	af 91       	pop	r26
    339e:	9f 91       	pop	r25
    33a0:	8f 91       	pop	r24
    33a2:	7f 91       	pop	r23
    33a4:	6f 91       	pop	r22
    33a6:	5f 91       	pop	r21
    33a8:	4f 91       	pop	r20
    33aa:	3f 91       	pop	r19
    33ac:	2f 91       	pop	r18
    33ae:	0f 90       	pop	r0
    33b0:	0b be       	out	0x3b, r0	; 59
    33b2:	0f 90       	pop	r0
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	0f 90       	pop	r0
    33b8:	1f 90       	pop	r1
    33ba:	18 95       	reti

000033bc <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    33bc:	1f 92       	push	r1
    33be:	0f 92       	push	r0
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	0f 92       	push	r0
    33c4:	11 24       	eor	r1, r1
    33c6:	0b b6       	in	r0, 0x3b	; 59
    33c8:	0f 92       	push	r0
    33ca:	2f 93       	push	r18
    33cc:	3f 93       	push	r19
    33ce:	4f 93       	push	r20
    33d0:	5f 93       	push	r21
    33d2:	6f 93       	push	r22
    33d4:	7f 93       	push	r23
    33d6:	8f 93       	push	r24
    33d8:	9f 93       	push	r25
    33da:	af 93       	push	r26
    33dc:	bf 93       	push	r27
    33de:	ef 93       	push	r30
    33e0:	ff 93       	push	r31
    33e2:	e0 91 3a 23 	lds	r30, 0x233A
    33e6:	f0 91 3b 23 	lds	r31, 0x233B
    33ea:	30 97       	sbiw	r30, 0x00	; 0
    33ec:	29 f0       	breq	.+10     	; 0x33f8 <__vector_43+0x3c>
    33ee:	80 91 30 24 	lds	r24, 0x2430
    33f2:	90 91 31 24 	lds	r25, 0x2431
    33f6:	19 95       	eicall
    33f8:	ff 91       	pop	r31
    33fa:	ef 91       	pop	r30
    33fc:	bf 91       	pop	r27
    33fe:	af 91       	pop	r26
    3400:	9f 91       	pop	r25
    3402:	8f 91       	pop	r24
    3404:	7f 91       	pop	r23
    3406:	6f 91       	pop	r22
    3408:	5f 91       	pop	r21
    340a:	4f 91       	pop	r20
    340c:	3f 91       	pop	r19
    340e:	2f 91       	pop	r18
    3410:	0f 90       	pop	r0
    3412:	0b be       	out	0x3b, r0	; 59
    3414:	0f 90       	pop	r0
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	0f 90       	pop	r0
    341a:	1f 90       	pop	r1
    341c:	18 95       	reti

0000341e <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    341e:	1f 92       	push	r1
    3420:	0f 92       	push	r0
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	0f 92       	push	r0
    3426:	11 24       	eor	r1, r1
    3428:	0b b6       	in	r0, 0x3b	; 59
    342a:	0f 92       	push	r0
    342c:	2f 93       	push	r18
    342e:	3f 93       	push	r19
    3430:	4f 93       	push	r20
    3432:	5f 93       	push	r21
    3434:	6f 93       	push	r22
    3436:	7f 93       	push	r23
    3438:	8f 93       	push	r24
    343a:	9f 93       	push	r25
    343c:	af 93       	push	r26
    343e:	bf 93       	push	r27
    3440:	ef 93       	push	r30
    3442:	ff 93       	push	r31
    3444:	e0 91 3c 23 	lds	r30, 0x233C
    3448:	f0 91 3d 23 	lds	r31, 0x233D
    344c:	30 97       	sbiw	r30, 0x00	; 0
    344e:	29 f0       	breq	.+10     	; 0x345a <__vector_44+0x3c>
    3450:	80 91 32 24 	lds	r24, 0x2432
    3454:	90 91 33 24 	lds	r25, 0x2433
    3458:	19 95       	eicall
    345a:	ff 91       	pop	r31
    345c:	ef 91       	pop	r30
    345e:	bf 91       	pop	r27
    3460:	af 91       	pop	r26
    3462:	9f 91       	pop	r25
    3464:	8f 91       	pop	r24
    3466:	7f 91       	pop	r23
    3468:	6f 91       	pop	r22
    346a:	5f 91       	pop	r21
    346c:	4f 91       	pop	r20
    346e:	3f 91       	pop	r19
    3470:	2f 91       	pop	r18
    3472:	0f 90       	pop	r0
    3474:	0b be       	out	0x3b, r0	; 59
    3476:	0f 90       	pop	r0
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	0f 90       	pop	r0
    347c:	1f 90       	pop	r1
    347e:	18 95       	reti

00003480 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3480:	1f 92       	push	r1
    3482:	0f 92       	push	r0
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	0f 92       	push	r0
    3488:	11 24       	eor	r1, r1
    348a:	0b b6       	in	r0, 0x3b	; 59
    348c:	0f 92       	push	r0
    348e:	2f 93       	push	r18
    3490:	3f 93       	push	r19
    3492:	4f 93       	push	r20
    3494:	5f 93       	push	r21
    3496:	6f 93       	push	r22
    3498:	7f 93       	push	r23
    349a:	8f 93       	push	r24
    349c:	9f 93       	push	r25
    349e:	af 93       	push	r26
    34a0:	bf 93       	push	r27
    34a2:	ef 93       	push	r30
    34a4:	ff 93       	push	r31
    34a6:	e0 91 3e 23 	lds	r30, 0x233E
    34aa:	f0 91 3f 23 	lds	r31, 0x233F
    34ae:	30 97       	sbiw	r30, 0x00	; 0
    34b0:	29 f0       	breq	.+10     	; 0x34bc <__vector_45+0x3c>
    34b2:	80 91 34 24 	lds	r24, 0x2434
    34b6:	90 91 35 24 	lds	r25, 0x2435
    34ba:	19 95       	eicall
    34bc:	ff 91       	pop	r31
    34be:	ef 91       	pop	r30
    34c0:	bf 91       	pop	r27
    34c2:	af 91       	pop	r26
    34c4:	9f 91       	pop	r25
    34c6:	8f 91       	pop	r24
    34c8:	7f 91       	pop	r23
    34ca:	6f 91       	pop	r22
    34cc:	5f 91       	pop	r21
    34ce:	4f 91       	pop	r20
    34d0:	3f 91       	pop	r19
    34d2:	2f 91       	pop	r18
    34d4:	0f 90       	pop	r0
    34d6:	0b be       	out	0x3b, r0	; 59
    34d8:	0f 90       	pop	r0
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	0f 90       	pop	r0
    34de:	1f 90       	pop	r1
    34e0:	18 95       	reti

000034e2 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    34e2:	1f 92       	push	r1
    34e4:	0f 92       	push	r0
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	0f 92       	push	r0
    34ea:	11 24       	eor	r1, r1
    34ec:	0b b6       	in	r0, 0x3b	; 59
    34ee:	0f 92       	push	r0
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	ef 93       	push	r30
    3506:	ff 93       	push	r31
    3508:	e0 91 40 23 	lds	r30, 0x2340
    350c:	f0 91 41 23 	lds	r31, 0x2341
    3510:	30 97       	sbiw	r30, 0x00	; 0
    3512:	29 f0       	breq	.+10     	; 0x351e <__vector_46+0x3c>
    3514:	80 91 36 24 	lds	r24, 0x2436
    3518:	90 91 37 24 	lds	r25, 0x2437
    351c:	19 95       	eicall
    351e:	ff 91       	pop	r31
    3520:	ef 91       	pop	r30
    3522:	bf 91       	pop	r27
    3524:	af 91       	pop	r26
    3526:	9f 91       	pop	r25
    3528:	8f 91       	pop	r24
    352a:	7f 91       	pop	r23
    352c:	6f 91       	pop	r22
    352e:	5f 91       	pop	r21
    3530:	4f 91       	pop	r20
    3532:	3f 91       	pop	r19
    3534:	2f 91       	pop	r18
    3536:	0f 90       	pop	r0
    3538:	0b be       	out	0x3b, r0	; 59
    353a:	0f 90       	pop	r0
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	0f 90       	pop	r0
    3540:	1f 90       	pop	r1
    3542:	18 95       	reti

00003544 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    3544:	1f 92       	push	r1
    3546:	0f 92       	push	r0
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	0f 92       	push	r0
    354c:	11 24       	eor	r1, r1
    354e:	0b b6       	in	r0, 0x3b	; 59
    3550:	0f 92       	push	r0
    3552:	2f 93       	push	r18
    3554:	3f 93       	push	r19
    3556:	4f 93       	push	r20
    3558:	5f 93       	push	r21
    355a:	6f 93       	push	r22
    355c:	7f 93       	push	r23
    355e:	8f 93       	push	r24
    3560:	9f 93       	push	r25
    3562:	af 93       	push	r26
    3564:	bf 93       	push	r27
    3566:	ef 93       	push	r30
    3568:	ff 93       	push	r31
    356a:	e0 91 42 23 	lds	r30, 0x2342
    356e:	f0 91 43 23 	lds	r31, 0x2343
    3572:	30 97       	sbiw	r30, 0x00	; 0
    3574:	29 f0       	breq	.+10     	; 0x3580 <__vector_47+0x3c>
    3576:	80 91 38 24 	lds	r24, 0x2438
    357a:	90 91 39 24 	lds	r25, 0x2439
    357e:	19 95       	eicall
    3580:	ff 91       	pop	r31
    3582:	ef 91       	pop	r30
    3584:	bf 91       	pop	r27
    3586:	af 91       	pop	r26
    3588:	9f 91       	pop	r25
    358a:	8f 91       	pop	r24
    358c:	7f 91       	pop	r23
    358e:	6f 91       	pop	r22
    3590:	5f 91       	pop	r21
    3592:	4f 91       	pop	r20
    3594:	3f 91       	pop	r19
    3596:	2f 91       	pop	r18
    3598:	0f 90       	pop	r0
    359a:	0b be       	out	0x3b, r0	; 59
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	0f 90       	pop	r0
    35a2:	1f 90       	pop	r1
    35a4:	18 95       	reti

000035a6 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    35a6:	1f 92       	push	r1
    35a8:	0f 92       	push	r0
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	0f 92       	push	r0
    35ae:	11 24       	eor	r1, r1
    35b0:	0b b6       	in	r0, 0x3b	; 59
    35b2:	0f 92       	push	r0
    35b4:	2f 93       	push	r18
    35b6:	3f 93       	push	r19
    35b8:	4f 93       	push	r20
    35ba:	5f 93       	push	r21
    35bc:	6f 93       	push	r22
    35be:	7f 93       	push	r23
    35c0:	8f 93       	push	r24
    35c2:	9f 93       	push	r25
    35c4:	af 93       	push	r26
    35c6:	bf 93       	push	r27
    35c8:	ef 93       	push	r30
    35ca:	ff 93       	push	r31
    35cc:	e0 91 44 23 	lds	r30, 0x2344
    35d0:	f0 91 45 23 	lds	r31, 0x2345
    35d4:	30 97       	sbiw	r30, 0x00	; 0
    35d6:	29 f0       	breq	.+10     	; 0x35e2 <__vector_48+0x3c>
    35d8:	80 91 3a 24 	lds	r24, 0x243A
    35dc:	90 91 3b 24 	lds	r25, 0x243B
    35e0:	19 95       	eicall
    35e2:	ff 91       	pop	r31
    35e4:	ef 91       	pop	r30
    35e6:	bf 91       	pop	r27
    35e8:	af 91       	pop	r26
    35ea:	9f 91       	pop	r25
    35ec:	8f 91       	pop	r24
    35ee:	7f 91       	pop	r23
    35f0:	6f 91       	pop	r22
    35f2:	5f 91       	pop	r21
    35f4:	4f 91       	pop	r20
    35f6:	3f 91       	pop	r19
    35f8:	2f 91       	pop	r18
    35fa:	0f 90       	pop	r0
    35fc:	0b be       	out	0x3b, r0	; 59
    35fe:	0f 90       	pop	r0
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	0f 90       	pop	r0
    3604:	1f 90       	pop	r1
    3606:	18 95       	reti

00003608 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    3608:	1f 92       	push	r1
    360a:	0f 92       	push	r0
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	0f 92       	push	r0
    3610:	11 24       	eor	r1, r1
    3612:	0b b6       	in	r0, 0x3b	; 59
    3614:	0f 92       	push	r0
    3616:	2f 93       	push	r18
    3618:	3f 93       	push	r19
    361a:	4f 93       	push	r20
    361c:	5f 93       	push	r21
    361e:	6f 93       	push	r22
    3620:	7f 93       	push	r23
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	af 93       	push	r26
    3628:	bf 93       	push	r27
    362a:	ef 93       	push	r30
    362c:	ff 93       	push	r31
    362e:	e0 91 46 23 	lds	r30, 0x2346
    3632:	f0 91 47 23 	lds	r31, 0x2347
    3636:	30 97       	sbiw	r30, 0x00	; 0
    3638:	29 f0       	breq	.+10     	; 0x3644 <__vector_49+0x3c>
    363a:	80 91 3c 24 	lds	r24, 0x243C
    363e:	90 91 3d 24 	lds	r25, 0x243D
    3642:	19 95       	eicall
    3644:	ff 91       	pop	r31
    3646:	ef 91       	pop	r30
    3648:	bf 91       	pop	r27
    364a:	af 91       	pop	r26
    364c:	9f 91       	pop	r25
    364e:	8f 91       	pop	r24
    3650:	7f 91       	pop	r23
    3652:	6f 91       	pop	r22
    3654:	5f 91       	pop	r21
    3656:	4f 91       	pop	r20
    3658:	3f 91       	pop	r19
    365a:	2f 91       	pop	r18
    365c:	0f 90       	pop	r0
    365e:	0b be       	out	0x3b, r0	; 59
    3660:	0f 90       	pop	r0
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	0f 90       	pop	r0
    3666:	1f 90       	pop	r1
    3668:	18 95       	reti

0000366a <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    366a:	1f 92       	push	r1
    366c:	0f 92       	push	r0
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	0f 92       	push	r0
    3672:	11 24       	eor	r1, r1
    3674:	0b b6       	in	r0, 0x3b	; 59
    3676:	0f 92       	push	r0
    3678:	2f 93       	push	r18
    367a:	3f 93       	push	r19
    367c:	4f 93       	push	r20
    367e:	5f 93       	push	r21
    3680:	6f 93       	push	r22
    3682:	7f 93       	push	r23
    3684:	8f 93       	push	r24
    3686:	9f 93       	push	r25
    3688:	af 93       	push	r26
    368a:	bf 93       	push	r27
    368c:	ef 93       	push	r30
    368e:	ff 93       	push	r31
    3690:	e0 91 48 23 	lds	r30, 0x2348
    3694:	f0 91 49 23 	lds	r31, 0x2349
    3698:	30 97       	sbiw	r30, 0x00	; 0
    369a:	29 f0       	breq	.+10     	; 0x36a6 <__vector_50+0x3c>
    369c:	80 91 3e 24 	lds	r24, 0x243E
    36a0:	90 91 3f 24 	lds	r25, 0x243F
    36a4:	19 95       	eicall
    36a6:	ff 91       	pop	r31
    36a8:	ef 91       	pop	r30
    36aa:	bf 91       	pop	r27
    36ac:	af 91       	pop	r26
    36ae:	9f 91       	pop	r25
    36b0:	8f 91       	pop	r24
    36b2:	7f 91       	pop	r23
    36b4:	6f 91       	pop	r22
    36b6:	5f 91       	pop	r21
    36b8:	4f 91       	pop	r20
    36ba:	3f 91       	pop	r19
    36bc:	2f 91       	pop	r18
    36be:	0f 90       	pop	r0
    36c0:	0b be       	out	0x3b, r0	; 59
    36c2:	0f 90       	pop	r0
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	0f 90       	pop	r0
    36c8:	1f 90       	pop	r1
    36ca:	18 95       	reti

000036cc <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    36cc:	1f 92       	push	r1
    36ce:	0f 92       	push	r0
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	0f 92       	push	r0
    36d4:	11 24       	eor	r1, r1
    36d6:	0b b6       	in	r0, 0x3b	; 59
    36d8:	0f 92       	push	r0
    36da:	2f 93       	push	r18
    36dc:	3f 93       	push	r19
    36de:	4f 93       	push	r20
    36e0:	5f 93       	push	r21
    36e2:	6f 93       	push	r22
    36e4:	7f 93       	push	r23
    36e6:	8f 93       	push	r24
    36e8:	9f 93       	push	r25
    36ea:	af 93       	push	r26
    36ec:	bf 93       	push	r27
    36ee:	ef 93       	push	r30
    36f0:	ff 93       	push	r31
    36f2:	e0 91 4a 23 	lds	r30, 0x234A
    36f6:	f0 91 4b 23 	lds	r31, 0x234B
    36fa:	30 97       	sbiw	r30, 0x00	; 0
    36fc:	29 f0       	breq	.+10     	; 0x3708 <__vector_51+0x3c>
    36fe:	80 91 40 24 	lds	r24, 0x2440
    3702:	90 91 41 24 	lds	r25, 0x2441
    3706:	19 95       	eicall
    3708:	ff 91       	pop	r31
    370a:	ef 91       	pop	r30
    370c:	bf 91       	pop	r27
    370e:	af 91       	pop	r26
    3710:	9f 91       	pop	r25
    3712:	8f 91       	pop	r24
    3714:	7f 91       	pop	r23
    3716:	6f 91       	pop	r22
    3718:	5f 91       	pop	r21
    371a:	4f 91       	pop	r20
    371c:	3f 91       	pop	r19
    371e:	2f 91       	pop	r18
    3720:	0f 90       	pop	r0
    3722:	0b be       	out	0x3b, r0	; 59
    3724:	0f 90       	pop	r0
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	0f 90       	pop	r0
    372a:	1f 90       	pop	r1
    372c:	18 95       	reti

0000372e <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    372e:	1f 92       	push	r1
    3730:	0f 92       	push	r0
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	0f 92       	push	r0
    3736:	11 24       	eor	r1, r1
    3738:	0b b6       	in	r0, 0x3b	; 59
    373a:	0f 92       	push	r0
    373c:	2f 93       	push	r18
    373e:	3f 93       	push	r19
    3740:	4f 93       	push	r20
    3742:	5f 93       	push	r21
    3744:	6f 93       	push	r22
    3746:	7f 93       	push	r23
    3748:	8f 93       	push	r24
    374a:	9f 93       	push	r25
    374c:	af 93       	push	r26
    374e:	bf 93       	push	r27
    3750:	ef 93       	push	r30
    3752:	ff 93       	push	r31
    3754:	e0 91 4c 23 	lds	r30, 0x234C
    3758:	f0 91 4d 23 	lds	r31, 0x234D
    375c:	30 97       	sbiw	r30, 0x00	; 0
    375e:	29 f0       	breq	.+10     	; 0x376a <__vector_52+0x3c>
    3760:	80 91 42 24 	lds	r24, 0x2442
    3764:	90 91 43 24 	lds	r25, 0x2443
    3768:	19 95       	eicall
    376a:	ff 91       	pop	r31
    376c:	ef 91       	pop	r30
    376e:	bf 91       	pop	r27
    3770:	af 91       	pop	r26
    3772:	9f 91       	pop	r25
    3774:	8f 91       	pop	r24
    3776:	7f 91       	pop	r23
    3778:	6f 91       	pop	r22
    377a:	5f 91       	pop	r21
    377c:	4f 91       	pop	r20
    377e:	3f 91       	pop	r19
    3780:	2f 91       	pop	r18
    3782:	0f 90       	pop	r0
    3784:	0b be       	out	0x3b, r0	; 59
    3786:	0f 90       	pop	r0
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	0f 90       	pop	r0
    378c:	1f 90       	pop	r1
    378e:	18 95       	reti

00003790 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    3790:	1f 92       	push	r1
    3792:	0f 92       	push	r0
    3794:	0f b6       	in	r0, 0x3f	; 63
    3796:	0f 92       	push	r0
    3798:	11 24       	eor	r1, r1
    379a:	0b b6       	in	r0, 0x3b	; 59
    379c:	0f 92       	push	r0
    379e:	2f 93       	push	r18
    37a0:	3f 93       	push	r19
    37a2:	4f 93       	push	r20
    37a4:	5f 93       	push	r21
    37a6:	6f 93       	push	r22
    37a8:	7f 93       	push	r23
    37aa:	8f 93       	push	r24
    37ac:	9f 93       	push	r25
    37ae:	af 93       	push	r26
    37b0:	bf 93       	push	r27
    37b2:	ef 93       	push	r30
    37b4:	ff 93       	push	r31
    37b6:	e0 91 4e 23 	lds	r30, 0x234E
    37ba:	f0 91 4f 23 	lds	r31, 0x234F
    37be:	30 97       	sbiw	r30, 0x00	; 0
    37c0:	29 f0       	breq	.+10     	; 0x37cc <__vector_53+0x3c>
    37c2:	80 91 44 24 	lds	r24, 0x2444
    37c6:	90 91 45 24 	lds	r25, 0x2445
    37ca:	19 95       	eicall
    37cc:	ff 91       	pop	r31
    37ce:	ef 91       	pop	r30
    37d0:	bf 91       	pop	r27
    37d2:	af 91       	pop	r26
    37d4:	9f 91       	pop	r25
    37d6:	8f 91       	pop	r24
    37d8:	7f 91       	pop	r23
    37da:	6f 91       	pop	r22
    37dc:	5f 91       	pop	r21
    37de:	4f 91       	pop	r20
    37e0:	3f 91       	pop	r19
    37e2:	2f 91       	pop	r18
    37e4:	0f 90       	pop	r0
    37e6:	0b be       	out	0x3b, r0	; 59
    37e8:	0f 90       	pop	r0
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	0f 90       	pop	r0
    37ee:	1f 90       	pop	r1
    37f0:	18 95       	reti

000037f2 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    37f2:	1f 92       	push	r1
    37f4:	0f 92       	push	r0
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	0f 92       	push	r0
    37fa:	11 24       	eor	r1, r1
    37fc:	0b b6       	in	r0, 0x3b	; 59
    37fe:	0f 92       	push	r0
    3800:	2f 93       	push	r18
    3802:	3f 93       	push	r19
    3804:	4f 93       	push	r20
    3806:	5f 93       	push	r21
    3808:	6f 93       	push	r22
    380a:	7f 93       	push	r23
    380c:	8f 93       	push	r24
    380e:	9f 93       	push	r25
    3810:	af 93       	push	r26
    3812:	bf 93       	push	r27
    3814:	ef 93       	push	r30
    3816:	ff 93       	push	r31
    3818:	e0 91 50 23 	lds	r30, 0x2350
    381c:	f0 91 51 23 	lds	r31, 0x2351
    3820:	30 97       	sbiw	r30, 0x00	; 0
    3822:	29 f0       	breq	.+10     	; 0x382e <__vector_54+0x3c>
    3824:	80 91 46 24 	lds	r24, 0x2446
    3828:	90 91 47 24 	lds	r25, 0x2447
    382c:	19 95       	eicall
    382e:	ff 91       	pop	r31
    3830:	ef 91       	pop	r30
    3832:	bf 91       	pop	r27
    3834:	af 91       	pop	r26
    3836:	9f 91       	pop	r25
    3838:	8f 91       	pop	r24
    383a:	7f 91       	pop	r23
    383c:	6f 91       	pop	r22
    383e:	5f 91       	pop	r21
    3840:	4f 91       	pop	r20
    3842:	3f 91       	pop	r19
    3844:	2f 91       	pop	r18
    3846:	0f 90       	pop	r0
    3848:	0b be       	out	0x3b, r0	; 59
    384a:	0f 90       	pop	r0
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	0f 90       	pop	r0
    3850:	1f 90       	pop	r1
    3852:	18 95       	reti

00003854 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    3854:	1f 92       	push	r1
    3856:	0f 92       	push	r0
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	0f 92       	push	r0
    385c:	11 24       	eor	r1, r1
    385e:	0b b6       	in	r0, 0x3b	; 59
    3860:	0f 92       	push	r0
    3862:	2f 93       	push	r18
    3864:	3f 93       	push	r19
    3866:	4f 93       	push	r20
    3868:	5f 93       	push	r21
    386a:	6f 93       	push	r22
    386c:	7f 93       	push	r23
    386e:	8f 93       	push	r24
    3870:	9f 93       	push	r25
    3872:	af 93       	push	r26
    3874:	bf 93       	push	r27
    3876:	ef 93       	push	r30
    3878:	ff 93       	push	r31
    387a:	e0 91 52 23 	lds	r30, 0x2352
    387e:	f0 91 53 23 	lds	r31, 0x2353
    3882:	30 97       	sbiw	r30, 0x00	; 0
    3884:	29 f0       	breq	.+10     	; 0x3890 <__vector_55+0x3c>
    3886:	80 91 48 24 	lds	r24, 0x2448
    388a:	90 91 49 24 	lds	r25, 0x2449
    388e:	19 95       	eicall
    3890:	ff 91       	pop	r31
    3892:	ef 91       	pop	r30
    3894:	bf 91       	pop	r27
    3896:	af 91       	pop	r26
    3898:	9f 91       	pop	r25
    389a:	8f 91       	pop	r24
    389c:	7f 91       	pop	r23
    389e:	6f 91       	pop	r22
    38a0:	5f 91       	pop	r21
    38a2:	4f 91       	pop	r20
    38a4:	3f 91       	pop	r19
    38a6:	2f 91       	pop	r18
    38a8:	0f 90       	pop	r0
    38aa:	0b be       	out	0x3b, r0	; 59
    38ac:	0f 90       	pop	r0
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	0f 90       	pop	r0
    38b2:	1f 90       	pop	r1
    38b4:	18 95       	reti

000038b6 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    38b6:	1f 92       	push	r1
    38b8:	0f 92       	push	r0
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	0f 92       	push	r0
    38be:	11 24       	eor	r1, r1
    38c0:	0b b6       	in	r0, 0x3b	; 59
    38c2:	0f 92       	push	r0
    38c4:	2f 93       	push	r18
    38c6:	3f 93       	push	r19
    38c8:	4f 93       	push	r20
    38ca:	5f 93       	push	r21
    38cc:	6f 93       	push	r22
    38ce:	7f 93       	push	r23
    38d0:	8f 93       	push	r24
    38d2:	9f 93       	push	r25
    38d4:	af 93       	push	r26
    38d6:	bf 93       	push	r27
    38d8:	ef 93       	push	r30
    38da:	ff 93       	push	r31
    38dc:	e0 91 54 23 	lds	r30, 0x2354
    38e0:	f0 91 55 23 	lds	r31, 0x2355
    38e4:	30 97       	sbiw	r30, 0x00	; 0
    38e6:	29 f0       	breq	.+10     	; 0x38f2 <__vector_56+0x3c>
    38e8:	80 91 4a 24 	lds	r24, 0x244A
    38ec:	90 91 4b 24 	lds	r25, 0x244B
    38f0:	19 95       	eicall
    38f2:	ff 91       	pop	r31
    38f4:	ef 91       	pop	r30
    38f6:	bf 91       	pop	r27
    38f8:	af 91       	pop	r26
    38fa:	9f 91       	pop	r25
    38fc:	8f 91       	pop	r24
    38fe:	7f 91       	pop	r23
    3900:	6f 91       	pop	r22
    3902:	5f 91       	pop	r21
    3904:	4f 91       	pop	r20
    3906:	3f 91       	pop	r19
    3908:	2f 91       	pop	r18
    390a:	0f 90       	pop	r0
    390c:	0b be       	out	0x3b, r0	; 59
    390e:	0f 90       	pop	r0
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	0f 90       	pop	r0
    3914:	1f 90       	pop	r1
    3916:	18 95       	reti

00003918 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    3918:	1f 92       	push	r1
    391a:	0f 92       	push	r0
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	0f 92       	push	r0
    3920:	11 24       	eor	r1, r1
    3922:	0b b6       	in	r0, 0x3b	; 59
    3924:	0f 92       	push	r0
    3926:	2f 93       	push	r18
    3928:	3f 93       	push	r19
    392a:	4f 93       	push	r20
    392c:	5f 93       	push	r21
    392e:	6f 93       	push	r22
    3930:	7f 93       	push	r23
    3932:	8f 93       	push	r24
    3934:	9f 93       	push	r25
    3936:	af 93       	push	r26
    3938:	bf 93       	push	r27
    393a:	ef 93       	push	r30
    393c:	ff 93       	push	r31
    393e:	e0 91 56 23 	lds	r30, 0x2356
    3942:	f0 91 57 23 	lds	r31, 0x2357
    3946:	30 97       	sbiw	r30, 0x00	; 0
    3948:	29 f0       	breq	.+10     	; 0x3954 <__vector_57+0x3c>
    394a:	80 91 4c 24 	lds	r24, 0x244C
    394e:	90 91 4d 24 	lds	r25, 0x244D
    3952:	19 95       	eicall
    3954:	ff 91       	pop	r31
    3956:	ef 91       	pop	r30
    3958:	bf 91       	pop	r27
    395a:	af 91       	pop	r26
    395c:	9f 91       	pop	r25
    395e:	8f 91       	pop	r24
    3960:	7f 91       	pop	r23
    3962:	6f 91       	pop	r22
    3964:	5f 91       	pop	r21
    3966:	4f 91       	pop	r20
    3968:	3f 91       	pop	r19
    396a:	2f 91       	pop	r18
    396c:	0f 90       	pop	r0
    396e:	0b be       	out	0x3b, r0	; 59
    3970:	0f 90       	pop	r0
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	0f 90       	pop	r0
    3976:	1f 90       	pop	r1
    3978:	18 95       	reti

0000397a <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    397a:	1f 92       	push	r1
    397c:	0f 92       	push	r0
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	0f 92       	push	r0
    3982:	11 24       	eor	r1, r1
    3984:	0b b6       	in	r0, 0x3b	; 59
    3986:	0f 92       	push	r0
    3988:	2f 93       	push	r18
    398a:	3f 93       	push	r19
    398c:	4f 93       	push	r20
    398e:	5f 93       	push	r21
    3990:	6f 93       	push	r22
    3992:	7f 93       	push	r23
    3994:	8f 93       	push	r24
    3996:	9f 93       	push	r25
    3998:	af 93       	push	r26
    399a:	bf 93       	push	r27
    399c:	ef 93       	push	r30
    399e:	ff 93       	push	r31
    39a0:	e0 91 58 23 	lds	r30, 0x2358
    39a4:	f0 91 59 23 	lds	r31, 0x2359
    39a8:	30 97       	sbiw	r30, 0x00	; 0
    39aa:	29 f0       	breq	.+10     	; 0x39b6 <__vector_58+0x3c>
    39ac:	80 91 4e 24 	lds	r24, 0x244E
    39b0:	90 91 4f 24 	lds	r25, 0x244F
    39b4:	19 95       	eicall
    39b6:	ff 91       	pop	r31
    39b8:	ef 91       	pop	r30
    39ba:	bf 91       	pop	r27
    39bc:	af 91       	pop	r26
    39be:	9f 91       	pop	r25
    39c0:	8f 91       	pop	r24
    39c2:	7f 91       	pop	r23
    39c4:	6f 91       	pop	r22
    39c6:	5f 91       	pop	r21
    39c8:	4f 91       	pop	r20
    39ca:	3f 91       	pop	r19
    39cc:	2f 91       	pop	r18
    39ce:	0f 90       	pop	r0
    39d0:	0b be       	out	0x3b, r0	; 59
    39d2:	0f 90       	pop	r0
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	0f 90       	pop	r0
    39d8:	1f 90       	pop	r1
    39da:	18 95       	reti

000039dc <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    39dc:	1f 92       	push	r1
    39de:	0f 92       	push	r0
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	0f 92       	push	r0
    39e4:	11 24       	eor	r1, r1
    39e6:	0b b6       	in	r0, 0x3b	; 59
    39e8:	0f 92       	push	r0
    39ea:	2f 93       	push	r18
    39ec:	3f 93       	push	r19
    39ee:	4f 93       	push	r20
    39f0:	5f 93       	push	r21
    39f2:	6f 93       	push	r22
    39f4:	7f 93       	push	r23
    39f6:	8f 93       	push	r24
    39f8:	9f 93       	push	r25
    39fa:	af 93       	push	r26
    39fc:	bf 93       	push	r27
    39fe:	ef 93       	push	r30
    3a00:	ff 93       	push	r31
    3a02:	e0 91 5a 23 	lds	r30, 0x235A
    3a06:	f0 91 5b 23 	lds	r31, 0x235B
    3a0a:	30 97       	sbiw	r30, 0x00	; 0
    3a0c:	29 f0       	breq	.+10     	; 0x3a18 <__vector_59+0x3c>
    3a0e:	80 91 50 24 	lds	r24, 0x2450
    3a12:	90 91 51 24 	lds	r25, 0x2451
    3a16:	19 95       	eicall
    3a18:	ff 91       	pop	r31
    3a1a:	ef 91       	pop	r30
    3a1c:	bf 91       	pop	r27
    3a1e:	af 91       	pop	r26
    3a20:	9f 91       	pop	r25
    3a22:	8f 91       	pop	r24
    3a24:	7f 91       	pop	r23
    3a26:	6f 91       	pop	r22
    3a28:	5f 91       	pop	r21
    3a2a:	4f 91       	pop	r20
    3a2c:	3f 91       	pop	r19
    3a2e:	2f 91       	pop	r18
    3a30:	0f 90       	pop	r0
    3a32:	0b be       	out	0x3b, r0	; 59
    3a34:	0f 90       	pop	r0
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	0f 90       	pop	r0
    3a3a:	1f 90       	pop	r1
    3a3c:	18 95       	reti

00003a3e <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3a3e:	1f 92       	push	r1
    3a40:	0f 92       	push	r0
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	0f 92       	push	r0
    3a46:	11 24       	eor	r1, r1
    3a48:	0b b6       	in	r0, 0x3b	; 59
    3a4a:	0f 92       	push	r0
    3a4c:	2f 93       	push	r18
    3a4e:	3f 93       	push	r19
    3a50:	4f 93       	push	r20
    3a52:	5f 93       	push	r21
    3a54:	6f 93       	push	r22
    3a56:	7f 93       	push	r23
    3a58:	8f 93       	push	r24
    3a5a:	9f 93       	push	r25
    3a5c:	af 93       	push	r26
    3a5e:	bf 93       	push	r27
    3a60:	ef 93       	push	r30
    3a62:	ff 93       	push	r31
    3a64:	e0 91 5c 23 	lds	r30, 0x235C
    3a68:	f0 91 5d 23 	lds	r31, 0x235D
    3a6c:	30 97       	sbiw	r30, 0x00	; 0
    3a6e:	29 f0       	breq	.+10     	; 0x3a7a <__vector_60+0x3c>
    3a70:	80 91 52 24 	lds	r24, 0x2452
    3a74:	90 91 53 24 	lds	r25, 0x2453
    3a78:	19 95       	eicall
    3a7a:	ff 91       	pop	r31
    3a7c:	ef 91       	pop	r30
    3a7e:	bf 91       	pop	r27
    3a80:	af 91       	pop	r26
    3a82:	9f 91       	pop	r25
    3a84:	8f 91       	pop	r24
    3a86:	7f 91       	pop	r23
    3a88:	6f 91       	pop	r22
    3a8a:	5f 91       	pop	r21
    3a8c:	4f 91       	pop	r20
    3a8e:	3f 91       	pop	r19
    3a90:	2f 91       	pop	r18
    3a92:	0f 90       	pop	r0
    3a94:	0b be       	out	0x3b, r0	; 59
    3a96:	0f 90       	pop	r0
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	0f 90       	pop	r0
    3a9c:	1f 90       	pop	r1
    3a9e:	18 95       	reti

00003aa0 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3aa0:	1f 92       	push	r1
    3aa2:	0f 92       	push	r0
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	0f 92       	push	r0
    3aa8:	11 24       	eor	r1, r1
    3aaa:	0b b6       	in	r0, 0x3b	; 59
    3aac:	0f 92       	push	r0
    3aae:	2f 93       	push	r18
    3ab0:	3f 93       	push	r19
    3ab2:	4f 93       	push	r20
    3ab4:	5f 93       	push	r21
    3ab6:	6f 93       	push	r22
    3ab8:	7f 93       	push	r23
    3aba:	8f 93       	push	r24
    3abc:	9f 93       	push	r25
    3abe:	af 93       	push	r26
    3ac0:	bf 93       	push	r27
    3ac2:	ef 93       	push	r30
    3ac4:	ff 93       	push	r31
    3ac6:	e0 91 5e 23 	lds	r30, 0x235E
    3aca:	f0 91 5f 23 	lds	r31, 0x235F
    3ace:	30 97       	sbiw	r30, 0x00	; 0
    3ad0:	29 f0       	breq	.+10     	; 0x3adc <__vector_61+0x3c>
    3ad2:	80 91 54 24 	lds	r24, 0x2454
    3ad6:	90 91 55 24 	lds	r25, 0x2455
    3ada:	19 95       	eicall
    3adc:	ff 91       	pop	r31
    3ade:	ef 91       	pop	r30
    3ae0:	bf 91       	pop	r27
    3ae2:	af 91       	pop	r26
    3ae4:	9f 91       	pop	r25
    3ae6:	8f 91       	pop	r24
    3ae8:	7f 91       	pop	r23
    3aea:	6f 91       	pop	r22
    3aec:	5f 91       	pop	r21
    3aee:	4f 91       	pop	r20
    3af0:	3f 91       	pop	r19
    3af2:	2f 91       	pop	r18
    3af4:	0f 90       	pop	r0
    3af6:	0b be       	out	0x3b, r0	; 59
    3af8:	0f 90       	pop	r0
    3afa:	0f be       	out	0x3f, r0	; 63
    3afc:	0f 90       	pop	r0
    3afe:	1f 90       	pop	r1
    3b00:	18 95       	reti

00003b02 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    3b02:	1f 92       	push	r1
    3b04:	0f 92       	push	r0
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	0f 92       	push	r0
    3b0a:	11 24       	eor	r1, r1
    3b0c:	0b b6       	in	r0, 0x3b	; 59
    3b0e:	0f 92       	push	r0
    3b10:	2f 93       	push	r18
    3b12:	3f 93       	push	r19
    3b14:	4f 93       	push	r20
    3b16:	5f 93       	push	r21
    3b18:	6f 93       	push	r22
    3b1a:	7f 93       	push	r23
    3b1c:	8f 93       	push	r24
    3b1e:	9f 93       	push	r25
    3b20:	af 93       	push	r26
    3b22:	bf 93       	push	r27
    3b24:	ef 93       	push	r30
    3b26:	ff 93       	push	r31
    3b28:	e0 91 60 23 	lds	r30, 0x2360
    3b2c:	f0 91 61 23 	lds	r31, 0x2361
    3b30:	30 97       	sbiw	r30, 0x00	; 0
    3b32:	29 f0       	breq	.+10     	; 0x3b3e <__vector_62+0x3c>
    3b34:	80 91 56 24 	lds	r24, 0x2456
    3b38:	90 91 57 24 	lds	r25, 0x2457
    3b3c:	19 95       	eicall
    3b3e:	ff 91       	pop	r31
    3b40:	ef 91       	pop	r30
    3b42:	bf 91       	pop	r27
    3b44:	af 91       	pop	r26
    3b46:	9f 91       	pop	r25
    3b48:	8f 91       	pop	r24
    3b4a:	7f 91       	pop	r23
    3b4c:	6f 91       	pop	r22
    3b4e:	5f 91       	pop	r21
    3b50:	4f 91       	pop	r20
    3b52:	3f 91       	pop	r19
    3b54:	2f 91       	pop	r18
    3b56:	0f 90       	pop	r0
    3b58:	0b be       	out	0x3b, r0	; 59
    3b5a:	0f 90       	pop	r0
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	0f 90       	pop	r0
    3b60:	1f 90       	pop	r1
    3b62:	18 95       	reti

00003b64 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3b64:	1f 92       	push	r1
    3b66:	0f 92       	push	r0
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	0f 92       	push	r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	0b b6       	in	r0, 0x3b	; 59
    3b70:	0f 92       	push	r0
    3b72:	2f 93       	push	r18
    3b74:	3f 93       	push	r19
    3b76:	4f 93       	push	r20
    3b78:	5f 93       	push	r21
    3b7a:	6f 93       	push	r22
    3b7c:	7f 93       	push	r23
    3b7e:	8f 93       	push	r24
    3b80:	9f 93       	push	r25
    3b82:	af 93       	push	r26
    3b84:	bf 93       	push	r27
    3b86:	ef 93       	push	r30
    3b88:	ff 93       	push	r31
    3b8a:	e0 91 62 23 	lds	r30, 0x2362
    3b8e:	f0 91 63 23 	lds	r31, 0x2363
    3b92:	30 97       	sbiw	r30, 0x00	; 0
    3b94:	29 f0       	breq	.+10     	; 0x3ba0 <__vector_63+0x3c>
    3b96:	80 91 58 24 	lds	r24, 0x2458
    3b9a:	90 91 59 24 	lds	r25, 0x2459
    3b9e:	19 95       	eicall
    3ba0:	ff 91       	pop	r31
    3ba2:	ef 91       	pop	r30
    3ba4:	bf 91       	pop	r27
    3ba6:	af 91       	pop	r26
    3ba8:	9f 91       	pop	r25
    3baa:	8f 91       	pop	r24
    3bac:	7f 91       	pop	r23
    3bae:	6f 91       	pop	r22
    3bb0:	5f 91       	pop	r21
    3bb2:	4f 91       	pop	r20
    3bb4:	3f 91       	pop	r19
    3bb6:	2f 91       	pop	r18
    3bb8:	0f 90       	pop	r0
    3bba:	0b be       	out	0x3b, r0	; 59
    3bbc:	0f 90       	pop	r0
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	0f 90       	pop	r0
    3bc2:	1f 90       	pop	r1
    3bc4:	18 95       	reti

00003bc6 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3bc6:	1f 92       	push	r1
    3bc8:	0f 92       	push	r0
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	0f 92       	push	r0
    3bce:	11 24       	eor	r1, r1
    3bd0:	0b b6       	in	r0, 0x3b	; 59
    3bd2:	0f 92       	push	r0
    3bd4:	2f 93       	push	r18
    3bd6:	3f 93       	push	r19
    3bd8:	4f 93       	push	r20
    3bda:	5f 93       	push	r21
    3bdc:	6f 93       	push	r22
    3bde:	7f 93       	push	r23
    3be0:	8f 93       	push	r24
    3be2:	9f 93       	push	r25
    3be4:	af 93       	push	r26
    3be6:	bf 93       	push	r27
    3be8:	ef 93       	push	r30
    3bea:	ff 93       	push	r31
    3bec:	e0 91 64 23 	lds	r30, 0x2364
    3bf0:	f0 91 65 23 	lds	r31, 0x2365
    3bf4:	30 97       	sbiw	r30, 0x00	; 0
    3bf6:	29 f0       	breq	.+10     	; 0x3c02 <__vector_64+0x3c>
    3bf8:	80 91 5a 24 	lds	r24, 0x245A
    3bfc:	90 91 5b 24 	lds	r25, 0x245B
    3c00:	19 95       	eicall
    3c02:	ff 91       	pop	r31
    3c04:	ef 91       	pop	r30
    3c06:	bf 91       	pop	r27
    3c08:	af 91       	pop	r26
    3c0a:	9f 91       	pop	r25
    3c0c:	8f 91       	pop	r24
    3c0e:	7f 91       	pop	r23
    3c10:	6f 91       	pop	r22
    3c12:	5f 91       	pop	r21
    3c14:	4f 91       	pop	r20
    3c16:	3f 91       	pop	r19
    3c18:	2f 91       	pop	r18
    3c1a:	0f 90       	pop	r0
    3c1c:	0b be       	out	0x3b, r0	; 59
    3c1e:	0f 90       	pop	r0
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	0f 90       	pop	r0
    3c24:	1f 90       	pop	r1
    3c26:	18 95       	reti

00003c28 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3c28:	1f 92       	push	r1
    3c2a:	0f 92       	push	r0
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	0f 92       	push	r0
    3c30:	11 24       	eor	r1, r1
    3c32:	0b b6       	in	r0, 0x3b	; 59
    3c34:	0f 92       	push	r0
    3c36:	2f 93       	push	r18
    3c38:	3f 93       	push	r19
    3c3a:	4f 93       	push	r20
    3c3c:	5f 93       	push	r21
    3c3e:	6f 93       	push	r22
    3c40:	7f 93       	push	r23
    3c42:	8f 93       	push	r24
    3c44:	9f 93       	push	r25
    3c46:	af 93       	push	r26
    3c48:	bf 93       	push	r27
    3c4a:	ef 93       	push	r30
    3c4c:	ff 93       	push	r31
    3c4e:	e0 91 66 23 	lds	r30, 0x2366
    3c52:	f0 91 67 23 	lds	r31, 0x2367
    3c56:	30 97       	sbiw	r30, 0x00	; 0
    3c58:	29 f0       	breq	.+10     	; 0x3c64 <__vector_65+0x3c>
    3c5a:	80 91 5c 24 	lds	r24, 0x245C
    3c5e:	90 91 5d 24 	lds	r25, 0x245D
    3c62:	19 95       	eicall
    3c64:	ff 91       	pop	r31
    3c66:	ef 91       	pop	r30
    3c68:	bf 91       	pop	r27
    3c6a:	af 91       	pop	r26
    3c6c:	9f 91       	pop	r25
    3c6e:	8f 91       	pop	r24
    3c70:	7f 91       	pop	r23
    3c72:	6f 91       	pop	r22
    3c74:	5f 91       	pop	r21
    3c76:	4f 91       	pop	r20
    3c78:	3f 91       	pop	r19
    3c7a:	2f 91       	pop	r18
    3c7c:	0f 90       	pop	r0
    3c7e:	0b be       	out	0x3b, r0	; 59
    3c80:	0f 90       	pop	r0
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	0f 90       	pop	r0
    3c86:	1f 90       	pop	r1
    3c88:	18 95       	reti

00003c8a <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3c8a:	1f 92       	push	r1
    3c8c:	0f 92       	push	r0
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	0f 92       	push	r0
    3c92:	11 24       	eor	r1, r1
    3c94:	0b b6       	in	r0, 0x3b	; 59
    3c96:	0f 92       	push	r0
    3c98:	2f 93       	push	r18
    3c9a:	3f 93       	push	r19
    3c9c:	4f 93       	push	r20
    3c9e:	5f 93       	push	r21
    3ca0:	6f 93       	push	r22
    3ca2:	7f 93       	push	r23
    3ca4:	8f 93       	push	r24
    3ca6:	9f 93       	push	r25
    3ca8:	af 93       	push	r26
    3caa:	bf 93       	push	r27
    3cac:	ef 93       	push	r30
    3cae:	ff 93       	push	r31
    3cb0:	e0 91 68 23 	lds	r30, 0x2368
    3cb4:	f0 91 69 23 	lds	r31, 0x2369
    3cb8:	30 97       	sbiw	r30, 0x00	; 0
    3cba:	29 f0       	breq	.+10     	; 0x3cc6 <__vector_66+0x3c>
    3cbc:	80 91 5e 24 	lds	r24, 0x245E
    3cc0:	90 91 5f 24 	lds	r25, 0x245F
    3cc4:	19 95       	eicall
    3cc6:	ff 91       	pop	r31
    3cc8:	ef 91       	pop	r30
    3cca:	bf 91       	pop	r27
    3ccc:	af 91       	pop	r26
    3cce:	9f 91       	pop	r25
    3cd0:	8f 91       	pop	r24
    3cd2:	7f 91       	pop	r23
    3cd4:	6f 91       	pop	r22
    3cd6:	5f 91       	pop	r21
    3cd8:	4f 91       	pop	r20
    3cda:	3f 91       	pop	r19
    3cdc:	2f 91       	pop	r18
    3cde:	0f 90       	pop	r0
    3ce0:	0b be       	out	0x3b, r0	; 59
    3ce2:	0f 90       	pop	r0
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	0f 90       	pop	r0
    3ce8:	1f 90       	pop	r1
    3cea:	18 95       	reti

00003cec <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3cec:	1f 92       	push	r1
    3cee:	0f 92       	push	r0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	0f 92       	push	r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	0b b6       	in	r0, 0x3b	; 59
    3cf8:	0f 92       	push	r0
    3cfa:	2f 93       	push	r18
    3cfc:	3f 93       	push	r19
    3cfe:	4f 93       	push	r20
    3d00:	5f 93       	push	r21
    3d02:	6f 93       	push	r22
    3d04:	7f 93       	push	r23
    3d06:	8f 93       	push	r24
    3d08:	9f 93       	push	r25
    3d0a:	af 93       	push	r26
    3d0c:	bf 93       	push	r27
    3d0e:	ef 93       	push	r30
    3d10:	ff 93       	push	r31
    3d12:	e0 91 6a 23 	lds	r30, 0x236A
    3d16:	f0 91 6b 23 	lds	r31, 0x236B
    3d1a:	30 97       	sbiw	r30, 0x00	; 0
    3d1c:	29 f0       	breq	.+10     	; 0x3d28 <__vector_67+0x3c>
    3d1e:	80 91 60 24 	lds	r24, 0x2460
    3d22:	90 91 61 24 	lds	r25, 0x2461
    3d26:	19 95       	eicall
    3d28:	ff 91       	pop	r31
    3d2a:	ef 91       	pop	r30
    3d2c:	bf 91       	pop	r27
    3d2e:	af 91       	pop	r26
    3d30:	9f 91       	pop	r25
    3d32:	8f 91       	pop	r24
    3d34:	7f 91       	pop	r23
    3d36:	6f 91       	pop	r22
    3d38:	5f 91       	pop	r21
    3d3a:	4f 91       	pop	r20
    3d3c:	3f 91       	pop	r19
    3d3e:	2f 91       	pop	r18
    3d40:	0f 90       	pop	r0
    3d42:	0b be       	out	0x3b, r0	; 59
    3d44:	0f 90       	pop	r0
    3d46:	0f be       	out	0x3f, r0	; 63
    3d48:	0f 90       	pop	r0
    3d4a:	1f 90       	pop	r1
    3d4c:	18 95       	reti

00003d4e <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3d4e:	1f 92       	push	r1
    3d50:	0f 92       	push	r0
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	0f 92       	push	r0
    3d56:	11 24       	eor	r1, r1
    3d58:	0b b6       	in	r0, 0x3b	; 59
    3d5a:	0f 92       	push	r0
    3d5c:	2f 93       	push	r18
    3d5e:	3f 93       	push	r19
    3d60:	4f 93       	push	r20
    3d62:	5f 93       	push	r21
    3d64:	6f 93       	push	r22
    3d66:	7f 93       	push	r23
    3d68:	8f 93       	push	r24
    3d6a:	9f 93       	push	r25
    3d6c:	af 93       	push	r26
    3d6e:	bf 93       	push	r27
    3d70:	ef 93       	push	r30
    3d72:	ff 93       	push	r31
    3d74:	e0 91 6c 23 	lds	r30, 0x236C
    3d78:	f0 91 6d 23 	lds	r31, 0x236D
    3d7c:	30 97       	sbiw	r30, 0x00	; 0
    3d7e:	29 f0       	breq	.+10     	; 0x3d8a <__vector_68+0x3c>
    3d80:	80 91 62 24 	lds	r24, 0x2462
    3d84:	90 91 63 24 	lds	r25, 0x2463
    3d88:	19 95       	eicall
    3d8a:	ff 91       	pop	r31
    3d8c:	ef 91       	pop	r30
    3d8e:	bf 91       	pop	r27
    3d90:	af 91       	pop	r26
    3d92:	9f 91       	pop	r25
    3d94:	8f 91       	pop	r24
    3d96:	7f 91       	pop	r23
    3d98:	6f 91       	pop	r22
    3d9a:	5f 91       	pop	r21
    3d9c:	4f 91       	pop	r20
    3d9e:	3f 91       	pop	r19
    3da0:	2f 91       	pop	r18
    3da2:	0f 90       	pop	r0
    3da4:	0b be       	out	0x3b, r0	; 59
    3da6:	0f 90       	pop	r0
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	0f 90       	pop	r0
    3dac:	1f 90       	pop	r1
    3dae:	18 95       	reti

00003db0 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3db0:	1f 92       	push	r1
    3db2:	0f 92       	push	r0
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	0f 92       	push	r0
    3db8:	11 24       	eor	r1, r1
    3dba:	0b b6       	in	r0, 0x3b	; 59
    3dbc:	0f 92       	push	r0
    3dbe:	2f 93       	push	r18
    3dc0:	3f 93       	push	r19
    3dc2:	4f 93       	push	r20
    3dc4:	5f 93       	push	r21
    3dc6:	6f 93       	push	r22
    3dc8:	7f 93       	push	r23
    3dca:	8f 93       	push	r24
    3dcc:	9f 93       	push	r25
    3dce:	af 93       	push	r26
    3dd0:	bf 93       	push	r27
    3dd2:	ef 93       	push	r30
    3dd4:	ff 93       	push	r31
    3dd6:	e0 91 6e 23 	lds	r30, 0x236E
    3dda:	f0 91 6f 23 	lds	r31, 0x236F
    3dde:	30 97       	sbiw	r30, 0x00	; 0
    3de0:	29 f0       	breq	.+10     	; 0x3dec <__vector_69+0x3c>
    3de2:	80 91 64 24 	lds	r24, 0x2464
    3de6:	90 91 65 24 	lds	r25, 0x2465
    3dea:	19 95       	eicall
    3dec:	ff 91       	pop	r31
    3dee:	ef 91       	pop	r30
    3df0:	bf 91       	pop	r27
    3df2:	af 91       	pop	r26
    3df4:	9f 91       	pop	r25
    3df6:	8f 91       	pop	r24
    3df8:	7f 91       	pop	r23
    3dfa:	6f 91       	pop	r22
    3dfc:	5f 91       	pop	r21
    3dfe:	4f 91       	pop	r20
    3e00:	3f 91       	pop	r19
    3e02:	2f 91       	pop	r18
    3e04:	0f 90       	pop	r0
    3e06:	0b be       	out	0x3b, r0	; 59
    3e08:	0f 90       	pop	r0
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	0f 90       	pop	r0
    3e0e:	1f 90       	pop	r1
    3e10:	18 95       	reti

00003e12 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3e12:	1f 92       	push	r1
    3e14:	0f 92       	push	r0
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	0f 92       	push	r0
    3e1a:	11 24       	eor	r1, r1
    3e1c:	0b b6       	in	r0, 0x3b	; 59
    3e1e:	0f 92       	push	r0
    3e20:	2f 93       	push	r18
    3e22:	3f 93       	push	r19
    3e24:	4f 93       	push	r20
    3e26:	5f 93       	push	r21
    3e28:	6f 93       	push	r22
    3e2a:	7f 93       	push	r23
    3e2c:	8f 93       	push	r24
    3e2e:	9f 93       	push	r25
    3e30:	af 93       	push	r26
    3e32:	bf 93       	push	r27
    3e34:	ef 93       	push	r30
    3e36:	ff 93       	push	r31
    3e38:	e0 91 70 23 	lds	r30, 0x2370
    3e3c:	f0 91 71 23 	lds	r31, 0x2371
    3e40:	30 97       	sbiw	r30, 0x00	; 0
    3e42:	29 f0       	breq	.+10     	; 0x3e4e <__vector_70+0x3c>
    3e44:	80 91 66 24 	lds	r24, 0x2466
    3e48:	90 91 67 24 	lds	r25, 0x2467
    3e4c:	19 95       	eicall
    3e4e:	ff 91       	pop	r31
    3e50:	ef 91       	pop	r30
    3e52:	bf 91       	pop	r27
    3e54:	af 91       	pop	r26
    3e56:	9f 91       	pop	r25
    3e58:	8f 91       	pop	r24
    3e5a:	7f 91       	pop	r23
    3e5c:	6f 91       	pop	r22
    3e5e:	5f 91       	pop	r21
    3e60:	4f 91       	pop	r20
    3e62:	3f 91       	pop	r19
    3e64:	2f 91       	pop	r18
    3e66:	0f 90       	pop	r0
    3e68:	0b be       	out	0x3b, r0	; 59
    3e6a:	0f 90       	pop	r0
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	0f 90       	pop	r0
    3e70:	1f 90       	pop	r1
    3e72:	18 95       	reti

00003e74 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3e74:	1f 92       	push	r1
    3e76:	0f 92       	push	r0
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	0f 92       	push	r0
    3e7c:	11 24       	eor	r1, r1
    3e7e:	0b b6       	in	r0, 0x3b	; 59
    3e80:	0f 92       	push	r0
    3e82:	2f 93       	push	r18
    3e84:	3f 93       	push	r19
    3e86:	4f 93       	push	r20
    3e88:	5f 93       	push	r21
    3e8a:	6f 93       	push	r22
    3e8c:	7f 93       	push	r23
    3e8e:	8f 93       	push	r24
    3e90:	9f 93       	push	r25
    3e92:	af 93       	push	r26
    3e94:	bf 93       	push	r27
    3e96:	ef 93       	push	r30
    3e98:	ff 93       	push	r31
    3e9a:	e0 91 72 23 	lds	r30, 0x2372
    3e9e:	f0 91 73 23 	lds	r31, 0x2373
    3ea2:	30 97       	sbiw	r30, 0x00	; 0
    3ea4:	29 f0       	breq	.+10     	; 0x3eb0 <__vector_71+0x3c>
    3ea6:	80 91 68 24 	lds	r24, 0x2468
    3eaa:	90 91 69 24 	lds	r25, 0x2469
    3eae:	19 95       	eicall
    3eb0:	ff 91       	pop	r31
    3eb2:	ef 91       	pop	r30
    3eb4:	bf 91       	pop	r27
    3eb6:	af 91       	pop	r26
    3eb8:	9f 91       	pop	r25
    3eba:	8f 91       	pop	r24
    3ebc:	7f 91       	pop	r23
    3ebe:	6f 91       	pop	r22
    3ec0:	5f 91       	pop	r21
    3ec2:	4f 91       	pop	r20
    3ec4:	3f 91       	pop	r19
    3ec6:	2f 91       	pop	r18
    3ec8:	0f 90       	pop	r0
    3eca:	0b be       	out	0x3b, r0	; 59
    3ecc:	0f 90       	pop	r0
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	0f 90       	pop	r0
    3ed2:	1f 90       	pop	r1
    3ed4:	18 95       	reti

00003ed6 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3ed6:	1f 92       	push	r1
    3ed8:	0f 92       	push	r0
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	0f 92       	push	r0
    3ede:	11 24       	eor	r1, r1
    3ee0:	0b b6       	in	r0, 0x3b	; 59
    3ee2:	0f 92       	push	r0
    3ee4:	2f 93       	push	r18
    3ee6:	3f 93       	push	r19
    3ee8:	4f 93       	push	r20
    3eea:	5f 93       	push	r21
    3eec:	6f 93       	push	r22
    3eee:	7f 93       	push	r23
    3ef0:	8f 93       	push	r24
    3ef2:	9f 93       	push	r25
    3ef4:	af 93       	push	r26
    3ef6:	bf 93       	push	r27
    3ef8:	ef 93       	push	r30
    3efa:	ff 93       	push	r31
    3efc:	e0 91 74 23 	lds	r30, 0x2374
    3f00:	f0 91 75 23 	lds	r31, 0x2375
    3f04:	30 97       	sbiw	r30, 0x00	; 0
    3f06:	29 f0       	breq	.+10     	; 0x3f12 <__vector_72+0x3c>
    3f08:	80 91 6a 24 	lds	r24, 0x246A
    3f0c:	90 91 6b 24 	lds	r25, 0x246B
    3f10:	19 95       	eicall
    3f12:	ff 91       	pop	r31
    3f14:	ef 91       	pop	r30
    3f16:	bf 91       	pop	r27
    3f18:	af 91       	pop	r26
    3f1a:	9f 91       	pop	r25
    3f1c:	8f 91       	pop	r24
    3f1e:	7f 91       	pop	r23
    3f20:	6f 91       	pop	r22
    3f22:	5f 91       	pop	r21
    3f24:	4f 91       	pop	r20
    3f26:	3f 91       	pop	r19
    3f28:	2f 91       	pop	r18
    3f2a:	0f 90       	pop	r0
    3f2c:	0b be       	out	0x3b, r0	; 59
    3f2e:	0f 90       	pop	r0
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	0f 90       	pop	r0
    3f34:	1f 90       	pop	r1
    3f36:	18 95       	reti

00003f38 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3f38:	1f 92       	push	r1
    3f3a:	0f 92       	push	r0
    3f3c:	0f b6       	in	r0, 0x3f	; 63
    3f3e:	0f 92       	push	r0
    3f40:	11 24       	eor	r1, r1
    3f42:	0b b6       	in	r0, 0x3b	; 59
    3f44:	0f 92       	push	r0
    3f46:	2f 93       	push	r18
    3f48:	3f 93       	push	r19
    3f4a:	4f 93       	push	r20
    3f4c:	5f 93       	push	r21
    3f4e:	6f 93       	push	r22
    3f50:	7f 93       	push	r23
    3f52:	8f 93       	push	r24
    3f54:	9f 93       	push	r25
    3f56:	af 93       	push	r26
    3f58:	bf 93       	push	r27
    3f5a:	ef 93       	push	r30
    3f5c:	ff 93       	push	r31
    3f5e:	e0 91 76 23 	lds	r30, 0x2376
    3f62:	f0 91 77 23 	lds	r31, 0x2377
    3f66:	30 97       	sbiw	r30, 0x00	; 0
    3f68:	29 f0       	breq	.+10     	; 0x3f74 <__vector_73+0x3c>
    3f6a:	80 91 6c 24 	lds	r24, 0x246C
    3f6e:	90 91 6d 24 	lds	r25, 0x246D
    3f72:	19 95       	eicall
    3f74:	ff 91       	pop	r31
    3f76:	ef 91       	pop	r30
    3f78:	bf 91       	pop	r27
    3f7a:	af 91       	pop	r26
    3f7c:	9f 91       	pop	r25
    3f7e:	8f 91       	pop	r24
    3f80:	7f 91       	pop	r23
    3f82:	6f 91       	pop	r22
    3f84:	5f 91       	pop	r21
    3f86:	4f 91       	pop	r20
    3f88:	3f 91       	pop	r19
    3f8a:	2f 91       	pop	r18
    3f8c:	0f 90       	pop	r0
    3f8e:	0b be       	out	0x3b, r0	; 59
    3f90:	0f 90       	pop	r0
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	0f 90       	pop	r0
    3f96:	1f 90       	pop	r1
    3f98:	18 95       	reti

00003f9a <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3f9a:	1f 92       	push	r1
    3f9c:	0f 92       	push	r0
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	0f 92       	push	r0
    3fa2:	11 24       	eor	r1, r1
    3fa4:	0b b6       	in	r0, 0x3b	; 59
    3fa6:	0f 92       	push	r0
    3fa8:	2f 93       	push	r18
    3faa:	3f 93       	push	r19
    3fac:	4f 93       	push	r20
    3fae:	5f 93       	push	r21
    3fb0:	6f 93       	push	r22
    3fb2:	7f 93       	push	r23
    3fb4:	8f 93       	push	r24
    3fb6:	9f 93       	push	r25
    3fb8:	af 93       	push	r26
    3fba:	bf 93       	push	r27
    3fbc:	ef 93       	push	r30
    3fbe:	ff 93       	push	r31
    3fc0:	e0 91 78 23 	lds	r30, 0x2378
    3fc4:	f0 91 79 23 	lds	r31, 0x2379
    3fc8:	30 97       	sbiw	r30, 0x00	; 0
    3fca:	29 f0       	breq	.+10     	; 0x3fd6 <__vector_74+0x3c>
    3fcc:	80 91 6e 24 	lds	r24, 0x246E
    3fd0:	90 91 6f 24 	lds	r25, 0x246F
    3fd4:	19 95       	eicall
    3fd6:	ff 91       	pop	r31
    3fd8:	ef 91       	pop	r30
    3fda:	bf 91       	pop	r27
    3fdc:	af 91       	pop	r26
    3fde:	9f 91       	pop	r25
    3fe0:	8f 91       	pop	r24
    3fe2:	7f 91       	pop	r23
    3fe4:	6f 91       	pop	r22
    3fe6:	5f 91       	pop	r21
    3fe8:	4f 91       	pop	r20
    3fea:	3f 91       	pop	r19
    3fec:	2f 91       	pop	r18
    3fee:	0f 90       	pop	r0
    3ff0:	0b be       	out	0x3b, r0	; 59
    3ff2:	0f 90       	pop	r0
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	0f 90       	pop	r0
    3ff8:	1f 90       	pop	r1
    3ffa:	18 95       	reti

00003ffc <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3ffc:	1f 92       	push	r1
    3ffe:	0f 92       	push	r0
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	0f 92       	push	r0
    4004:	11 24       	eor	r1, r1
    4006:	0b b6       	in	r0, 0x3b	; 59
    4008:	0f 92       	push	r0
    400a:	2f 93       	push	r18
    400c:	3f 93       	push	r19
    400e:	4f 93       	push	r20
    4010:	5f 93       	push	r21
    4012:	6f 93       	push	r22
    4014:	7f 93       	push	r23
    4016:	8f 93       	push	r24
    4018:	9f 93       	push	r25
    401a:	af 93       	push	r26
    401c:	bf 93       	push	r27
    401e:	ef 93       	push	r30
    4020:	ff 93       	push	r31
    4022:	e0 91 7e 23 	lds	r30, 0x237E
    4026:	f0 91 7f 23 	lds	r31, 0x237F
    402a:	30 97       	sbiw	r30, 0x00	; 0
    402c:	29 f0       	breq	.+10     	; 0x4038 <__stack+0x39>
    402e:	80 91 74 24 	lds	r24, 0x2474
    4032:	90 91 75 24 	lds	r25, 0x2475
    4036:	19 95       	eicall
    4038:	ff 91       	pop	r31
    403a:	ef 91       	pop	r30
    403c:	bf 91       	pop	r27
    403e:	af 91       	pop	r26
    4040:	9f 91       	pop	r25
    4042:	8f 91       	pop	r24
    4044:	7f 91       	pop	r23
    4046:	6f 91       	pop	r22
    4048:	5f 91       	pop	r21
    404a:	4f 91       	pop	r20
    404c:	3f 91       	pop	r19
    404e:	2f 91       	pop	r18
    4050:	0f 90       	pop	r0
    4052:	0b be       	out	0x3b, r0	; 59
    4054:	0f 90       	pop	r0
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	0f 90       	pop	r0
    405a:	1f 90       	pop	r1
    405c:	18 95       	reti

0000405e <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    405e:	1f 92       	push	r1
    4060:	0f 92       	push	r0
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	0f 92       	push	r0
    4066:	11 24       	eor	r1, r1
    4068:	0b b6       	in	r0, 0x3b	; 59
    406a:	0f 92       	push	r0
    406c:	2f 93       	push	r18
    406e:	3f 93       	push	r19
    4070:	4f 93       	push	r20
    4072:	5f 93       	push	r21
    4074:	6f 93       	push	r22
    4076:	7f 93       	push	r23
    4078:	8f 93       	push	r24
    407a:	9f 93       	push	r25
    407c:	af 93       	push	r26
    407e:	bf 93       	push	r27
    4080:	ef 93       	push	r30
    4082:	ff 93       	push	r31
    4084:	e0 91 80 23 	lds	r30, 0x2380
    4088:	f0 91 81 23 	lds	r31, 0x2381
    408c:	30 97       	sbiw	r30, 0x00	; 0
    408e:	29 f0       	breq	.+10     	; 0x409a <__vector_78+0x3c>
    4090:	80 91 76 24 	lds	r24, 0x2476
    4094:	90 91 77 24 	lds	r25, 0x2477
    4098:	19 95       	eicall
    409a:	ff 91       	pop	r31
    409c:	ef 91       	pop	r30
    409e:	bf 91       	pop	r27
    40a0:	af 91       	pop	r26
    40a2:	9f 91       	pop	r25
    40a4:	8f 91       	pop	r24
    40a6:	7f 91       	pop	r23
    40a8:	6f 91       	pop	r22
    40aa:	5f 91       	pop	r21
    40ac:	4f 91       	pop	r20
    40ae:	3f 91       	pop	r19
    40b0:	2f 91       	pop	r18
    40b2:	0f 90       	pop	r0
    40b4:	0b be       	out	0x3b, r0	; 59
    40b6:	0f 90       	pop	r0
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	0f 90       	pop	r0
    40bc:	1f 90       	pop	r1
    40be:	18 95       	reti

000040c0 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    40c0:	1f 92       	push	r1
    40c2:	0f 92       	push	r0
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	0f 92       	push	r0
    40c8:	11 24       	eor	r1, r1
    40ca:	0b b6       	in	r0, 0x3b	; 59
    40cc:	0f 92       	push	r0
    40ce:	2f 93       	push	r18
    40d0:	3f 93       	push	r19
    40d2:	4f 93       	push	r20
    40d4:	5f 93       	push	r21
    40d6:	6f 93       	push	r22
    40d8:	7f 93       	push	r23
    40da:	8f 93       	push	r24
    40dc:	9f 93       	push	r25
    40de:	af 93       	push	r26
    40e0:	bf 93       	push	r27
    40e2:	ef 93       	push	r30
    40e4:	ff 93       	push	r31
    40e6:	e0 91 82 23 	lds	r30, 0x2382
    40ea:	f0 91 83 23 	lds	r31, 0x2383
    40ee:	30 97       	sbiw	r30, 0x00	; 0
    40f0:	29 f0       	breq	.+10     	; 0x40fc <__vector_79+0x3c>
    40f2:	80 91 78 24 	lds	r24, 0x2478
    40f6:	90 91 79 24 	lds	r25, 0x2479
    40fa:	19 95       	eicall
    40fc:	ff 91       	pop	r31
    40fe:	ef 91       	pop	r30
    4100:	bf 91       	pop	r27
    4102:	af 91       	pop	r26
    4104:	9f 91       	pop	r25
    4106:	8f 91       	pop	r24
    4108:	7f 91       	pop	r23
    410a:	6f 91       	pop	r22
    410c:	5f 91       	pop	r21
    410e:	4f 91       	pop	r20
    4110:	3f 91       	pop	r19
    4112:	2f 91       	pop	r18
    4114:	0f 90       	pop	r0
    4116:	0b be       	out	0x3b, r0	; 59
    4118:	0f 90       	pop	r0
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	0f 90       	pop	r0
    411e:	1f 90       	pop	r1
    4120:	18 95       	reti

00004122 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    4122:	1f 92       	push	r1
    4124:	0f 92       	push	r0
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	0f 92       	push	r0
    412a:	11 24       	eor	r1, r1
    412c:	0b b6       	in	r0, 0x3b	; 59
    412e:	0f 92       	push	r0
    4130:	2f 93       	push	r18
    4132:	3f 93       	push	r19
    4134:	4f 93       	push	r20
    4136:	5f 93       	push	r21
    4138:	6f 93       	push	r22
    413a:	7f 93       	push	r23
    413c:	8f 93       	push	r24
    413e:	9f 93       	push	r25
    4140:	af 93       	push	r26
    4142:	bf 93       	push	r27
    4144:	ef 93       	push	r30
    4146:	ff 93       	push	r31
    4148:	e0 91 84 23 	lds	r30, 0x2384
    414c:	f0 91 85 23 	lds	r31, 0x2385
    4150:	30 97       	sbiw	r30, 0x00	; 0
    4152:	29 f0       	breq	.+10     	; 0x415e <__vector_80+0x3c>
    4154:	80 91 7a 24 	lds	r24, 0x247A
    4158:	90 91 7b 24 	lds	r25, 0x247B
    415c:	19 95       	eicall
    415e:	ff 91       	pop	r31
    4160:	ef 91       	pop	r30
    4162:	bf 91       	pop	r27
    4164:	af 91       	pop	r26
    4166:	9f 91       	pop	r25
    4168:	8f 91       	pop	r24
    416a:	7f 91       	pop	r23
    416c:	6f 91       	pop	r22
    416e:	5f 91       	pop	r21
    4170:	4f 91       	pop	r20
    4172:	3f 91       	pop	r19
    4174:	2f 91       	pop	r18
    4176:	0f 90       	pop	r0
    4178:	0b be       	out	0x3b, r0	; 59
    417a:	0f 90       	pop	r0
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	0f 90       	pop	r0
    4180:	1f 90       	pop	r1
    4182:	18 95       	reti

00004184 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    4184:	1f 92       	push	r1
    4186:	0f 92       	push	r0
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	0f 92       	push	r0
    418c:	11 24       	eor	r1, r1
    418e:	0b b6       	in	r0, 0x3b	; 59
    4190:	0f 92       	push	r0
    4192:	2f 93       	push	r18
    4194:	3f 93       	push	r19
    4196:	4f 93       	push	r20
    4198:	5f 93       	push	r21
    419a:	6f 93       	push	r22
    419c:	7f 93       	push	r23
    419e:	8f 93       	push	r24
    41a0:	9f 93       	push	r25
    41a2:	af 93       	push	r26
    41a4:	bf 93       	push	r27
    41a6:	ef 93       	push	r30
    41a8:	ff 93       	push	r31
    41aa:	e0 91 86 23 	lds	r30, 0x2386
    41ae:	f0 91 87 23 	lds	r31, 0x2387
    41b2:	30 97       	sbiw	r30, 0x00	; 0
    41b4:	29 f0       	breq	.+10     	; 0x41c0 <__vector_81+0x3c>
    41b6:	80 91 7c 24 	lds	r24, 0x247C
    41ba:	90 91 7d 24 	lds	r25, 0x247D
    41be:	19 95       	eicall
    41c0:	ff 91       	pop	r31
    41c2:	ef 91       	pop	r30
    41c4:	bf 91       	pop	r27
    41c6:	af 91       	pop	r26
    41c8:	9f 91       	pop	r25
    41ca:	8f 91       	pop	r24
    41cc:	7f 91       	pop	r23
    41ce:	6f 91       	pop	r22
    41d0:	5f 91       	pop	r21
    41d2:	4f 91       	pop	r20
    41d4:	3f 91       	pop	r19
    41d6:	2f 91       	pop	r18
    41d8:	0f 90       	pop	r0
    41da:	0b be       	out	0x3b, r0	; 59
    41dc:	0f 90       	pop	r0
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	0f 90       	pop	r0
    41e2:	1f 90       	pop	r1
    41e4:	18 95       	reti

000041e6 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    41e6:	1f 92       	push	r1
    41e8:	0f 92       	push	r0
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	0f 92       	push	r0
    41ee:	11 24       	eor	r1, r1
    41f0:	0b b6       	in	r0, 0x3b	; 59
    41f2:	0f 92       	push	r0
    41f4:	2f 93       	push	r18
    41f6:	3f 93       	push	r19
    41f8:	4f 93       	push	r20
    41fa:	5f 93       	push	r21
    41fc:	6f 93       	push	r22
    41fe:	7f 93       	push	r23
    4200:	8f 93       	push	r24
    4202:	9f 93       	push	r25
    4204:	af 93       	push	r26
    4206:	bf 93       	push	r27
    4208:	ef 93       	push	r30
    420a:	ff 93       	push	r31
    420c:	e0 91 88 23 	lds	r30, 0x2388
    4210:	f0 91 89 23 	lds	r31, 0x2389
    4214:	30 97       	sbiw	r30, 0x00	; 0
    4216:	29 f0       	breq	.+10     	; 0x4222 <__vector_82+0x3c>
    4218:	80 91 7e 24 	lds	r24, 0x247E
    421c:	90 91 7f 24 	lds	r25, 0x247F
    4220:	19 95       	eicall
    4222:	ff 91       	pop	r31
    4224:	ef 91       	pop	r30
    4226:	bf 91       	pop	r27
    4228:	af 91       	pop	r26
    422a:	9f 91       	pop	r25
    422c:	8f 91       	pop	r24
    422e:	7f 91       	pop	r23
    4230:	6f 91       	pop	r22
    4232:	5f 91       	pop	r21
    4234:	4f 91       	pop	r20
    4236:	3f 91       	pop	r19
    4238:	2f 91       	pop	r18
    423a:	0f 90       	pop	r0
    423c:	0b be       	out	0x3b, r0	; 59
    423e:	0f 90       	pop	r0
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	0f 90       	pop	r0
    4244:	1f 90       	pop	r1
    4246:	18 95       	reti

00004248 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    4248:	1f 92       	push	r1
    424a:	0f 92       	push	r0
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	0f 92       	push	r0
    4250:	11 24       	eor	r1, r1
    4252:	0b b6       	in	r0, 0x3b	; 59
    4254:	0f 92       	push	r0
    4256:	2f 93       	push	r18
    4258:	3f 93       	push	r19
    425a:	4f 93       	push	r20
    425c:	5f 93       	push	r21
    425e:	6f 93       	push	r22
    4260:	7f 93       	push	r23
    4262:	8f 93       	push	r24
    4264:	9f 93       	push	r25
    4266:	af 93       	push	r26
    4268:	bf 93       	push	r27
    426a:	ef 93       	push	r30
    426c:	ff 93       	push	r31
    426e:	e0 91 8a 23 	lds	r30, 0x238A
    4272:	f0 91 8b 23 	lds	r31, 0x238B
    4276:	30 97       	sbiw	r30, 0x00	; 0
    4278:	29 f0       	breq	.+10     	; 0x4284 <__vector_83+0x3c>
    427a:	80 91 80 24 	lds	r24, 0x2480
    427e:	90 91 81 24 	lds	r25, 0x2481
    4282:	19 95       	eicall
    4284:	ff 91       	pop	r31
    4286:	ef 91       	pop	r30
    4288:	bf 91       	pop	r27
    428a:	af 91       	pop	r26
    428c:	9f 91       	pop	r25
    428e:	8f 91       	pop	r24
    4290:	7f 91       	pop	r23
    4292:	6f 91       	pop	r22
    4294:	5f 91       	pop	r21
    4296:	4f 91       	pop	r20
    4298:	3f 91       	pop	r19
    429a:	2f 91       	pop	r18
    429c:	0f 90       	pop	r0
    429e:	0b be       	out	0x3b, r0	; 59
    42a0:	0f 90       	pop	r0
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	0f 90       	pop	r0
    42a6:	1f 90       	pop	r1
    42a8:	18 95       	reti

000042aa <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    42aa:	1f 92       	push	r1
    42ac:	0f 92       	push	r0
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	0f 92       	push	r0
    42b2:	11 24       	eor	r1, r1
    42b4:	0b b6       	in	r0, 0x3b	; 59
    42b6:	0f 92       	push	r0
    42b8:	2f 93       	push	r18
    42ba:	3f 93       	push	r19
    42bc:	4f 93       	push	r20
    42be:	5f 93       	push	r21
    42c0:	6f 93       	push	r22
    42c2:	7f 93       	push	r23
    42c4:	8f 93       	push	r24
    42c6:	9f 93       	push	r25
    42c8:	af 93       	push	r26
    42ca:	bf 93       	push	r27
    42cc:	ef 93       	push	r30
    42ce:	ff 93       	push	r31
    42d0:	e0 91 8c 23 	lds	r30, 0x238C
    42d4:	f0 91 8d 23 	lds	r31, 0x238D
    42d8:	30 97       	sbiw	r30, 0x00	; 0
    42da:	29 f0       	breq	.+10     	; 0x42e6 <__vector_84+0x3c>
    42dc:	80 91 82 24 	lds	r24, 0x2482
    42e0:	90 91 83 24 	lds	r25, 0x2483
    42e4:	19 95       	eicall
    42e6:	ff 91       	pop	r31
    42e8:	ef 91       	pop	r30
    42ea:	bf 91       	pop	r27
    42ec:	af 91       	pop	r26
    42ee:	9f 91       	pop	r25
    42f0:	8f 91       	pop	r24
    42f2:	7f 91       	pop	r23
    42f4:	6f 91       	pop	r22
    42f6:	5f 91       	pop	r21
    42f8:	4f 91       	pop	r20
    42fa:	3f 91       	pop	r19
    42fc:	2f 91       	pop	r18
    42fe:	0f 90       	pop	r0
    4300:	0b be       	out	0x3b, r0	; 59
    4302:	0f 90       	pop	r0
    4304:	0f be       	out	0x3f, r0	; 63
    4306:	0f 90       	pop	r0
    4308:	1f 90       	pop	r1
    430a:	18 95       	reti

0000430c <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    430c:	1f 92       	push	r1
    430e:	0f 92       	push	r0
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	0f 92       	push	r0
    4314:	11 24       	eor	r1, r1
    4316:	0b b6       	in	r0, 0x3b	; 59
    4318:	0f 92       	push	r0
    431a:	2f 93       	push	r18
    431c:	3f 93       	push	r19
    431e:	4f 93       	push	r20
    4320:	5f 93       	push	r21
    4322:	6f 93       	push	r22
    4324:	7f 93       	push	r23
    4326:	8f 93       	push	r24
    4328:	9f 93       	push	r25
    432a:	af 93       	push	r26
    432c:	bf 93       	push	r27
    432e:	ef 93       	push	r30
    4330:	ff 93       	push	r31
    4332:	e0 91 8e 23 	lds	r30, 0x238E
    4336:	f0 91 8f 23 	lds	r31, 0x238F
    433a:	30 97       	sbiw	r30, 0x00	; 0
    433c:	29 f0       	breq	.+10     	; 0x4348 <__vector_85+0x3c>
    433e:	80 91 84 24 	lds	r24, 0x2484
    4342:	90 91 85 24 	lds	r25, 0x2485
    4346:	19 95       	eicall
    4348:	ff 91       	pop	r31
    434a:	ef 91       	pop	r30
    434c:	bf 91       	pop	r27
    434e:	af 91       	pop	r26
    4350:	9f 91       	pop	r25
    4352:	8f 91       	pop	r24
    4354:	7f 91       	pop	r23
    4356:	6f 91       	pop	r22
    4358:	5f 91       	pop	r21
    435a:	4f 91       	pop	r20
    435c:	3f 91       	pop	r19
    435e:	2f 91       	pop	r18
    4360:	0f 90       	pop	r0
    4362:	0b be       	out	0x3b, r0	; 59
    4364:	0f 90       	pop	r0
    4366:	0f be       	out	0x3f, r0	; 63
    4368:	0f 90       	pop	r0
    436a:	1f 90       	pop	r1
    436c:	18 95       	reti

0000436e <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    436e:	1f 92       	push	r1
    4370:	0f 92       	push	r0
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	0f 92       	push	r0
    4376:	11 24       	eor	r1, r1
    4378:	0b b6       	in	r0, 0x3b	; 59
    437a:	0f 92       	push	r0
    437c:	2f 93       	push	r18
    437e:	3f 93       	push	r19
    4380:	4f 93       	push	r20
    4382:	5f 93       	push	r21
    4384:	6f 93       	push	r22
    4386:	7f 93       	push	r23
    4388:	8f 93       	push	r24
    438a:	9f 93       	push	r25
    438c:	af 93       	push	r26
    438e:	bf 93       	push	r27
    4390:	ef 93       	push	r30
    4392:	ff 93       	push	r31
    4394:	e0 91 90 23 	lds	r30, 0x2390
    4398:	f0 91 91 23 	lds	r31, 0x2391
    439c:	30 97       	sbiw	r30, 0x00	; 0
    439e:	29 f0       	breq	.+10     	; 0x43aa <__vector_86+0x3c>
    43a0:	80 91 86 24 	lds	r24, 0x2486
    43a4:	90 91 87 24 	lds	r25, 0x2487
    43a8:	19 95       	eicall
    43aa:	ff 91       	pop	r31
    43ac:	ef 91       	pop	r30
    43ae:	bf 91       	pop	r27
    43b0:	af 91       	pop	r26
    43b2:	9f 91       	pop	r25
    43b4:	8f 91       	pop	r24
    43b6:	7f 91       	pop	r23
    43b8:	6f 91       	pop	r22
    43ba:	5f 91       	pop	r21
    43bc:	4f 91       	pop	r20
    43be:	3f 91       	pop	r19
    43c0:	2f 91       	pop	r18
    43c2:	0f 90       	pop	r0
    43c4:	0b be       	out	0x3b, r0	; 59
    43c6:	0f 90       	pop	r0
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	0f 90       	pop	r0
    43cc:	1f 90       	pop	r1
    43ce:	18 95       	reti

000043d0 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    43d0:	1f 92       	push	r1
    43d2:	0f 92       	push	r0
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	0f 92       	push	r0
    43d8:	11 24       	eor	r1, r1
    43da:	0b b6       	in	r0, 0x3b	; 59
    43dc:	0f 92       	push	r0
    43de:	2f 93       	push	r18
    43e0:	3f 93       	push	r19
    43e2:	4f 93       	push	r20
    43e4:	5f 93       	push	r21
    43e6:	6f 93       	push	r22
    43e8:	7f 93       	push	r23
    43ea:	8f 93       	push	r24
    43ec:	9f 93       	push	r25
    43ee:	af 93       	push	r26
    43f0:	bf 93       	push	r27
    43f2:	ef 93       	push	r30
    43f4:	ff 93       	push	r31
    43f6:	e0 91 92 23 	lds	r30, 0x2392
    43fa:	f0 91 93 23 	lds	r31, 0x2393
    43fe:	30 97       	sbiw	r30, 0x00	; 0
    4400:	29 f0       	breq	.+10     	; 0x440c <__vector_87+0x3c>
    4402:	80 91 88 24 	lds	r24, 0x2488
    4406:	90 91 89 24 	lds	r25, 0x2489
    440a:	19 95       	eicall
    440c:	ff 91       	pop	r31
    440e:	ef 91       	pop	r30
    4410:	bf 91       	pop	r27
    4412:	af 91       	pop	r26
    4414:	9f 91       	pop	r25
    4416:	8f 91       	pop	r24
    4418:	7f 91       	pop	r23
    441a:	6f 91       	pop	r22
    441c:	5f 91       	pop	r21
    441e:	4f 91       	pop	r20
    4420:	3f 91       	pop	r19
    4422:	2f 91       	pop	r18
    4424:	0f 90       	pop	r0
    4426:	0b be       	out	0x3b, r0	; 59
    4428:	0f 90       	pop	r0
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	0f 90       	pop	r0
    442e:	1f 90       	pop	r1
    4430:	18 95       	reti

00004432 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4432:	1f 92       	push	r1
    4434:	0f 92       	push	r0
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	0f 92       	push	r0
    443a:	11 24       	eor	r1, r1
    443c:	0b b6       	in	r0, 0x3b	; 59
    443e:	0f 92       	push	r0
    4440:	2f 93       	push	r18
    4442:	3f 93       	push	r19
    4444:	4f 93       	push	r20
    4446:	5f 93       	push	r21
    4448:	6f 93       	push	r22
    444a:	7f 93       	push	r23
    444c:	8f 93       	push	r24
    444e:	9f 93       	push	r25
    4450:	af 93       	push	r26
    4452:	bf 93       	push	r27
    4454:	ef 93       	push	r30
    4456:	ff 93       	push	r31
    4458:	e0 91 94 23 	lds	r30, 0x2394
    445c:	f0 91 95 23 	lds	r31, 0x2395
    4460:	30 97       	sbiw	r30, 0x00	; 0
    4462:	29 f0       	breq	.+10     	; 0x446e <__vector_88+0x3c>
    4464:	80 91 8a 24 	lds	r24, 0x248A
    4468:	90 91 8b 24 	lds	r25, 0x248B
    446c:	19 95       	eicall
    446e:	ff 91       	pop	r31
    4470:	ef 91       	pop	r30
    4472:	bf 91       	pop	r27
    4474:	af 91       	pop	r26
    4476:	9f 91       	pop	r25
    4478:	8f 91       	pop	r24
    447a:	7f 91       	pop	r23
    447c:	6f 91       	pop	r22
    447e:	5f 91       	pop	r21
    4480:	4f 91       	pop	r20
    4482:	3f 91       	pop	r19
    4484:	2f 91       	pop	r18
    4486:	0f 90       	pop	r0
    4488:	0b be       	out	0x3b, r0	; 59
    448a:	0f 90       	pop	r0
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	0f 90       	pop	r0
    4490:	1f 90       	pop	r1
    4492:	18 95       	reti

00004494 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    4494:	1f 92       	push	r1
    4496:	0f 92       	push	r0
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	0f 92       	push	r0
    449c:	11 24       	eor	r1, r1
    449e:	0b b6       	in	r0, 0x3b	; 59
    44a0:	0f 92       	push	r0
    44a2:	2f 93       	push	r18
    44a4:	3f 93       	push	r19
    44a6:	4f 93       	push	r20
    44a8:	5f 93       	push	r21
    44aa:	6f 93       	push	r22
    44ac:	7f 93       	push	r23
    44ae:	8f 93       	push	r24
    44b0:	9f 93       	push	r25
    44b2:	af 93       	push	r26
    44b4:	bf 93       	push	r27
    44b6:	ef 93       	push	r30
    44b8:	ff 93       	push	r31
    44ba:	e0 91 96 23 	lds	r30, 0x2396
    44be:	f0 91 97 23 	lds	r31, 0x2397
    44c2:	30 97       	sbiw	r30, 0x00	; 0
    44c4:	29 f0       	breq	.+10     	; 0x44d0 <__vector_89+0x3c>
    44c6:	80 91 8c 24 	lds	r24, 0x248C
    44ca:	90 91 8d 24 	lds	r25, 0x248D
    44ce:	19 95       	eicall
    44d0:	ff 91       	pop	r31
    44d2:	ef 91       	pop	r30
    44d4:	bf 91       	pop	r27
    44d6:	af 91       	pop	r26
    44d8:	9f 91       	pop	r25
    44da:	8f 91       	pop	r24
    44dc:	7f 91       	pop	r23
    44de:	6f 91       	pop	r22
    44e0:	5f 91       	pop	r21
    44e2:	4f 91       	pop	r20
    44e4:	3f 91       	pop	r19
    44e6:	2f 91       	pop	r18
    44e8:	0f 90       	pop	r0
    44ea:	0b be       	out	0x3b, r0	; 59
    44ec:	0f 90       	pop	r0
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	0f 90       	pop	r0
    44f2:	1f 90       	pop	r1
    44f4:	18 95       	reti

000044f6 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    44f6:	1f 92       	push	r1
    44f8:	0f 92       	push	r0
    44fa:	0f b6       	in	r0, 0x3f	; 63
    44fc:	0f 92       	push	r0
    44fe:	11 24       	eor	r1, r1
    4500:	0b b6       	in	r0, 0x3b	; 59
    4502:	0f 92       	push	r0
    4504:	2f 93       	push	r18
    4506:	3f 93       	push	r19
    4508:	4f 93       	push	r20
    450a:	5f 93       	push	r21
    450c:	6f 93       	push	r22
    450e:	7f 93       	push	r23
    4510:	8f 93       	push	r24
    4512:	9f 93       	push	r25
    4514:	af 93       	push	r26
    4516:	bf 93       	push	r27
    4518:	ef 93       	push	r30
    451a:	ff 93       	push	r31
    451c:	e0 91 98 23 	lds	r30, 0x2398
    4520:	f0 91 99 23 	lds	r31, 0x2399
    4524:	30 97       	sbiw	r30, 0x00	; 0
    4526:	29 f0       	breq	.+10     	; 0x4532 <__vector_90+0x3c>
    4528:	80 91 8e 24 	lds	r24, 0x248E
    452c:	90 91 8f 24 	lds	r25, 0x248F
    4530:	19 95       	eicall
    4532:	ff 91       	pop	r31
    4534:	ef 91       	pop	r30
    4536:	bf 91       	pop	r27
    4538:	af 91       	pop	r26
    453a:	9f 91       	pop	r25
    453c:	8f 91       	pop	r24
    453e:	7f 91       	pop	r23
    4540:	6f 91       	pop	r22
    4542:	5f 91       	pop	r21
    4544:	4f 91       	pop	r20
    4546:	3f 91       	pop	r19
    4548:	2f 91       	pop	r18
    454a:	0f 90       	pop	r0
    454c:	0b be       	out	0x3b, r0	; 59
    454e:	0f 90       	pop	r0
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	0f 90       	pop	r0
    4554:	1f 90       	pop	r1
    4556:	18 95       	reti

00004558 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    4558:	1f 92       	push	r1
    455a:	0f 92       	push	r0
    455c:	0f b6       	in	r0, 0x3f	; 63
    455e:	0f 92       	push	r0
    4560:	11 24       	eor	r1, r1
    4562:	0b b6       	in	r0, 0x3b	; 59
    4564:	0f 92       	push	r0
    4566:	2f 93       	push	r18
    4568:	3f 93       	push	r19
    456a:	4f 93       	push	r20
    456c:	5f 93       	push	r21
    456e:	6f 93       	push	r22
    4570:	7f 93       	push	r23
    4572:	8f 93       	push	r24
    4574:	9f 93       	push	r25
    4576:	af 93       	push	r26
    4578:	bf 93       	push	r27
    457a:	ef 93       	push	r30
    457c:	ff 93       	push	r31
    457e:	e0 91 9a 23 	lds	r30, 0x239A
    4582:	f0 91 9b 23 	lds	r31, 0x239B
    4586:	30 97       	sbiw	r30, 0x00	; 0
    4588:	29 f0       	breq	.+10     	; 0x4594 <__vector_91+0x3c>
    458a:	80 91 90 24 	lds	r24, 0x2490
    458e:	90 91 91 24 	lds	r25, 0x2491
    4592:	19 95       	eicall
    4594:	ff 91       	pop	r31
    4596:	ef 91       	pop	r30
    4598:	bf 91       	pop	r27
    459a:	af 91       	pop	r26
    459c:	9f 91       	pop	r25
    459e:	8f 91       	pop	r24
    45a0:	7f 91       	pop	r23
    45a2:	6f 91       	pop	r22
    45a4:	5f 91       	pop	r21
    45a6:	4f 91       	pop	r20
    45a8:	3f 91       	pop	r19
    45aa:	2f 91       	pop	r18
    45ac:	0f 90       	pop	r0
    45ae:	0b be       	out	0x3b, r0	; 59
    45b0:	0f 90       	pop	r0
    45b2:	0f be       	out	0x3f, r0	; 63
    45b4:	0f 90       	pop	r0
    45b6:	1f 90       	pop	r1
    45b8:	18 95       	reti

000045ba <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    45ba:	1f 92       	push	r1
    45bc:	0f 92       	push	r0
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	0f 92       	push	r0
    45c2:	11 24       	eor	r1, r1
    45c4:	0b b6       	in	r0, 0x3b	; 59
    45c6:	0f 92       	push	r0
    45c8:	2f 93       	push	r18
    45ca:	3f 93       	push	r19
    45cc:	4f 93       	push	r20
    45ce:	5f 93       	push	r21
    45d0:	6f 93       	push	r22
    45d2:	7f 93       	push	r23
    45d4:	8f 93       	push	r24
    45d6:	9f 93       	push	r25
    45d8:	af 93       	push	r26
    45da:	bf 93       	push	r27
    45dc:	ef 93       	push	r30
    45de:	ff 93       	push	r31
    45e0:	e0 91 9c 23 	lds	r30, 0x239C
    45e4:	f0 91 9d 23 	lds	r31, 0x239D
    45e8:	30 97       	sbiw	r30, 0x00	; 0
    45ea:	29 f0       	breq	.+10     	; 0x45f6 <__vector_92+0x3c>
    45ec:	80 91 92 24 	lds	r24, 0x2492
    45f0:	90 91 93 24 	lds	r25, 0x2493
    45f4:	19 95       	eicall
    45f6:	ff 91       	pop	r31
    45f8:	ef 91       	pop	r30
    45fa:	bf 91       	pop	r27
    45fc:	af 91       	pop	r26
    45fe:	9f 91       	pop	r25
    4600:	8f 91       	pop	r24
    4602:	7f 91       	pop	r23
    4604:	6f 91       	pop	r22
    4606:	5f 91       	pop	r21
    4608:	4f 91       	pop	r20
    460a:	3f 91       	pop	r19
    460c:	2f 91       	pop	r18
    460e:	0f 90       	pop	r0
    4610:	0b be       	out	0x3b, r0	; 59
    4612:	0f 90       	pop	r0
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	0f 90       	pop	r0
    4618:	1f 90       	pop	r1
    461a:	18 95       	reti

0000461c <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    461c:	1f 92       	push	r1
    461e:	0f 92       	push	r0
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	0f 92       	push	r0
    4624:	11 24       	eor	r1, r1
    4626:	0b b6       	in	r0, 0x3b	; 59
    4628:	0f 92       	push	r0
    462a:	2f 93       	push	r18
    462c:	3f 93       	push	r19
    462e:	4f 93       	push	r20
    4630:	5f 93       	push	r21
    4632:	6f 93       	push	r22
    4634:	7f 93       	push	r23
    4636:	8f 93       	push	r24
    4638:	9f 93       	push	r25
    463a:	af 93       	push	r26
    463c:	bf 93       	push	r27
    463e:	ef 93       	push	r30
    4640:	ff 93       	push	r31
    4642:	e0 91 9e 23 	lds	r30, 0x239E
    4646:	f0 91 9f 23 	lds	r31, 0x239F
    464a:	30 97       	sbiw	r30, 0x00	; 0
    464c:	29 f0       	breq	.+10     	; 0x4658 <__vector_93+0x3c>
    464e:	80 91 94 24 	lds	r24, 0x2494
    4652:	90 91 95 24 	lds	r25, 0x2495
    4656:	19 95       	eicall
    4658:	ff 91       	pop	r31
    465a:	ef 91       	pop	r30
    465c:	bf 91       	pop	r27
    465e:	af 91       	pop	r26
    4660:	9f 91       	pop	r25
    4662:	8f 91       	pop	r24
    4664:	7f 91       	pop	r23
    4666:	6f 91       	pop	r22
    4668:	5f 91       	pop	r21
    466a:	4f 91       	pop	r20
    466c:	3f 91       	pop	r19
    466e:	2f 91       	pop	r18
    4670:	0f 90       	pop	r0
    4672:	0b be       	out	0x3b, r0	; 59
    4674:	0f 90       	pop	r0
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	0f 90       	pop	r0
    467a:	1f 90       	pop	r1
    467c:	18 95       	reti

0000467e <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    467e:	1f 92       	push	r1
    4680:	0f 92       	push	r0
    4682:	0f b6       	in	r0, 0x3f	; 63
    4684:	0f 92       	push	r0
    4686:	11 24       	eor	r1, r1
    4688:	0b b6       	in	r0, 0x3b	; 59
    468a:	0f 92       	push	r0
    468c:	2f 93       	push	r18
    468e:	3f 93       	push	r19
    4690:	4f 93       	push	r20
    4692:	5f 93       	push	r21
    4694:	6f 93       	push	r22
    4696:	7f 93       	push	r23
    4698:	8f 93       	push	r24
    469a:	9f 93       	push	r25
    469c:	af 93       	push	r26
    469e:	bf 93       	push	r27
    46a0:	ef 93       	push	r30
    46a2:	ff 93       	push	r31
    46a4:	e0 91 b4 23 	lds	r30, 0x23B4
    46a8:	f0 91 b5 23 	lds	r31, 0x23B5
    46ac:	30 97       	sbiw	r30, 0x00	; 0
    46ae:	29 f0       	breq	.+10     	; 0x46ba <__vector_104+0x3c>
    46b0:	80 91 aa 24 	lds	r24, 0x24AA
    46b4:	90 91 ab 24 	lds	r25, 0x24AB
    46b8:	19 95       	eicall
    46ba:	ff 91       	pop	r31
    46bc:	ef 91       	pop	r30
    46be:	bf 91       	pop	r27
    46c0:	af 91       	pop	r26
    46c2:	9f 91       	pop	r25
    46c4:	8f 91       	pop	r24
    46c6:	7f 91       	pop	r23
    46c8:	6f 91       	pop	r22
    46ca:	5f 91       	pop	r21
    46cc:	4f 91       	pop	r20
    46ce:	3f 91       	pop	r19
    46d0:	2f 91       	pop	r18
    46d2:	0f 90       	pop	r0
    46d4:	0b be       	out	0x3b, r0	; 59
    46d6:	0f 90       	pop	r0
    46d8:	0f be       	out	0x3f, r0	; 63
    46da:	0f 90       	pop	r0
    46dc:	1f 90       	pop	r1
    46de:	18 95       	reti

000046e0 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    46e0:	1f 92       	push	r1
    46e2:	0f 92       	push	r0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	0f 92       	push	r0
    46e8:	11 24       	eor	r1, r1
    46ea:	0b b6       	in	r0, 0x3b	; 59
    46ec:	0f 92       	push	r0
    46ee:	2f 93       	push	r18
    46f0:	3f 93       	push	r19
    46f2:	4f 93       	push	r20
    46f4:	5f 93       	push	r21
    46f6:	6f 93       	push	r22
    46f8:	7f 93       	push	r23
    46fa:	8f 93       	push	r24
    46fc:	9f 93       	push	r25
    46fe:	af 93       	push	r26
    4700:	bf 93       	push	r27
    4702:	ef 93       	push	r30
    4704:	ff 93       	push	r31
    4706:	e0 91 b6 23 	lds	r30, 0x23B6
    470a:	f0 91 b7 23 	lds	r31, 0x23B7
    470e:	30 97       	sbiw	r30, 0x00	; 0
    4710:	29 f0       	breq	.+10     	; 0x471c <__vector_105+0x3c>
    4712:	80 91 ac 24 	lds	r24, 0x24AC
    4716:	90 91 ad 24 	lds	r25, 0x24AD
    471a:	19 95       	eicall
    471c:	ff 91       	pop	r31
    471e:	ef 91       	pop	r30
    4720:	bf 91       	pop	r27
    4722:	af 91       	pop	r26
    4724:	9f 91       	pop	r25
    4726:	8f 91       	pop	r24
    4728:	7f 91       	pop	r23
    472a:	6f 91       	pop	r22
    472c:	5f 91       	pop	r21
    472e:	4f 91       	pop	r20
    4730:	3f 91       	pop	r19
    4732:	2f 91       	pop	r18
    4734:	0f 90       	pop	r0
    4736:	0b be       	out	0x3b, r0	; 59
    4738:	0f 90       	pop	r0
    473a:	0f be       	out	0x3f, r0	; 63
    473c:	0f 90       	pop	r0
    473e:	1f 90       	pop	r1
    4740:	18 95       	reti

00004742 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4742:	1f 92       	push	r1
    4744:	0f 92       	push	r0
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	0f 92       	push	r0
    474a:	11 24       	eor	r1, r1
    474c:	0b b6       	in	r0, 0x3b	; 59
    474e:	0f 92       	push	r0
    4750:	2f 93       	push	r18
    4752:	3f 93       	push	r19
    4754:	4f 93       	push	r20
    4756:	5f 93       	push	r21
    4758:	6f 93       	push	r22
    475a:	7f 93       	push	r23
    475c:	8f 93       	push	r24
    475e:	9f 93       	push	r25
    4760:	af 93       	push	r26
    4762:	bf 93       	push	r27
    4764:	ef 93       	push	r30
    4766:	ff 93       	push	r31
    4768:	e0 91 bc 23 	lds	r30, 0x23BC
    476c:	f0 91 bd 23 	lds	r31, 0x23BD
    4770:	30 97       	sbiw	r30, 0x00	; 0
    4772:	29 f0       	breq	.+10     	; 0x477e <__vector_108+0x3c>
    4774:	80 91 b2 24 	lds	r24, 0x24B2
    4778:	90 91 b3 24 	lds	r25, 0x24B3
    477c:	19 95       	eicall
    477e:	ff 91       	pop	r31
    4780:	ef 91       	pop	r30
    4782:	bf 91       	pop	r27
    4784:	af 91       	pop	r26
    4786:	9f 91       	pop	r25
    4788:	8f 91       	pop	r24
    478a:	7f 91       	pop	r23
    478c:	6f 91       	pop	r22
    478e:	5f 91       	pop	r21
    4790:	4f 91       	pop	r20
    4792:	3f 91       	pop	r19
    4794:	2f 91       	pop	r18
    4796:	0f 90       	pop	r0
    4798:	0b be       	out	0x3b, r0	; 59
    479a:	0f 90       	pop	r0
    479c:	0f be       	out	0x3f, r0	; 63
    479e:	0f 90       	pop	r0
    47a0:	1f 90       	pop	r1
    47a2:	18 95       	reti

000047a4 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    47a4:	1f 92       	push	r1
    47a6:	0f 92       	push	r0
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	0f 92       	push	r0
    47ac:	11 24       	eor	r1, r1
    47ae:	0b b6       	in	r0, 0x3b	; 59
    47b0:	0f 92       	push	r0
    47b2:	2f 93       	push	r18
    47b4:	3f 93       	push	r19
    47b6:	4f 93       	push	r20
    47b8:	5f 93       	push	r21
    47ba:	6f 93       	push	r22
    47bc:	7f 93       	push	r23
    47be:	8f 93       	push	r24
    47c0:	9f 93       	push	r25
    47c2:	af 93       	push	r26
    47c4:	bf 93       	push	r27
    47c6:	ef 93       	push	r30
    47c8:	ff 93       	push	r31
    47ca:	e0 91 be 23 	lds	r30, 0x23BE
    47ce:	f0 91 bf 23 	lds	r31, 0x23BF
    47d2:	30 97       	sbiw	r30, 0x00	; 0
    47d4:	29 f0       	breq	.+10     	; 0x47e0 <__vector_109+0x3c>
    47d6:	80 91 b4 24 	lds	r24, 0x24B4
    47da:	90 91 b5 24 	lds	r25, 0x24B5
    47de:	19 95       	eicall
    47e0:	ff 91       	pop	r31
    47e2:	ef 91       	pop	r30
    47e4:	bf 91       	pop	r27
    47e6:	af 91       	pop	r26
    47e8:	9f 91       	pop	r25
    47ea:	8f 91       	pop	r24
    47ec:	7f 91       	pop	r23
    47ee:	6f 91       	pop	r22
    47f0:	5f 91       	pop	r21
    47f2:	4f 91       	pop	r20
    47f4:	3f 91       	pop	r19
    47f6:	2f 91       	pop	r18
    47f8:	0f 90       	pop	r0
    47fa:	0b be       	out	0x3b, r0	; 59
    47fc:	0f 90       	pop	r0
    47fe:	0f be       	out	0x3f, r0	; 63
    4800:	0f 90       	pop	r0
    4802:	1f 90       	pop	r1
    4804:	18 95       	reti

00004806 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    4806:	1f 92       	push	r1
    4808:	0f 92       	push	r0
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	0f 92       	push	r0
    480e:	11 24       	eor	r1, r1
    4810:	0b b6       	in	r0, 0x3b	; 59
    4812:	0f 92       	push	r0
    4814:	2f 93       	push	r18
    4816:	3f 93       	push	r19
    4818:	4f 93       	push	r20
    481a:	5f 93       	push	r21
    481c:	6f 93       	push	r22
    481e:	7f 93       	push	r23
    4820:	8f 93       	push	r24
    4822:	9f 93       	push	r25
    4824:	af 93       	push	r26
    4826:	bf 93       	push	r27
    4828:	ef 93       	push	r30
    482a:	ff 93       	push	r31
    482c:	e0 91 c0 23 	lds	r30, 0x23C0
    4830:	f0 91 c1 23 	lds	r31, 0x23C1
    4834:	30 97       	sbiw	r30, 0x00	; 0
    4836:	29 f0       	breq	.+10     	; 0x4842 <__vector_110+0x3c>
    4838:	80 91 b6 24 	lds	r24, 0x24B6
    483c:	90 91 b7 24 	lds	r25, 0x24B7
    4840:	19 95       	eicall
    4842:	ff 91       	pop	r31
    4844:	ef 91       	pop	r30
    4846:	bf 91       	pop	r27
    4848:	af 91       	pop	r26
    484a:	9f 91       	pop	r25
    484c:	8f 91       	pop	r24
    484e:	7f 91       	pop	r23
    4850:	6f 91       	pop	r22
    4852:	5f 91       	pop	r21
    4854:	4f 91       	pop	r20
    4856:	3f 91       	pop	r19
    4858:	2f 91       	pop	r18
    485a:	0f 90       	pop	r0
    485c:	0b be       	out	0x3b, r0	; 59
    485e:	0f 90       	pop	r0
    4860:	0f be       	out	0x3f, r0	; 63
    4862:	0f 90       	pop	r0
    4864:	1f 90       	pop	r1
    4866:	18 95       	reti

00004868 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    4868:	1f 92       	push	r1
    486a:	0f 92       	push	r0
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	0f 92       	push	r0
    4870:	11 24       	eor	r1, r1
    4872:	0b b6       	in	r0, 0x3b	; 59
    4874:	0f 92       	push	r0
    4876:	2f 93       	push	r18
    4878:	3f 93       	push	r19
    487a:	4f 93       	push	r20
    487c:	5f 93       	push	r21
    487e:	6f 93       	push	r22
    4880:	7f 93       	push	r23
    4882:	8f 93       	push	r24
    4884:	9f 93       	push	r25
    4886:	af 93       	push	r26
    4888:	bf 93       	push	r27
    488a:	ef 93       	push	r30
    488c:	ff 93       	push	r31
    488e:	e0 91 c2 23 	lds	r30, 0x23C2
    4892:	f0 91 c3 23 	lds	r31, 0x23C3
    4896:	30 97       	sbiw	r30, 0x00	; 0
    4898:	29 f0       	breq	.+10     	; 0x48a4 <__vector_111+0x3c>
    489a:	80 91 b8 24 	lds	r24, 0x24B8
    489e:	90 91 b9 24 	lds	r25, 0x24B9
    48a2:	19 95       	eicall
    48a4:	ff 91       	pop	r31
    48a6:	ef 91       	pop	r30
    48a8:	bf 91       	pop	r27
    48aa:	af 91       	pop	r26
    48ac:	9f 91       	pop	r25
    48ae:	8f 91       	pop	r24
    48b0:	7f 91       	pop	r23
    48b2:	6f 91       	pop	r22
    48b4:	5f 91       	pop	r21
    48b6:	4f 91       	pop	r20
    48b8:	3f 91       	pop	r19
    48ba:	2f 91       	pop	r18
    48bc:	0f 90       	pop	r0
    48be:	0b be       	out	0x3b, r0	; 59
    48c0:	0f 90       	pop	r0
    48c2:	0f be       	out	0x3f, r0	; 63
    48c4:	0f 90       	pop	r0
    48c6:	1f 90       	pop	r1
    48c8:	18 95       	reti

000048ca <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    48ca:	1f 92       	push	r1
    48cc:	0f 92       	push	r0
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	0f 92       	push	r0
    48d2:	11 24       	eor	r1, r1
    48d4:	0b b6       	in	r0, 0x3b	; 59
    48d6:	0f 92       	push	r0
    48d8:	2f 93       	push	r18
    48da:	3f 93       	push	r19
    48dc:	4f 93       	push	r20
    48de:	5f 93       	push	r21
    48e0:	6f 93       	push	r22
    48e2:	7f 93       	push	r23
    48e4:	8f 93       	push	r24
    48e6:	9f 93       	push	r25
    48e8:	af 93       	push	r26
    48ea:	bf 93       	push	r27
    48ec:	ef 93       	push	r30
    48ee:	ff 93       	push	r31
    48f0:	e0 91 c4 23 	lds	r30, 0x23C4
    48f4:	f0 91 c5 23 	lds	r31, 0x23C5
    48f8:	30 97       	sbiw	r30, 0x00	; 0
    48fa:	29 f0       	breq	.+10     	; 0x4906 <__vector_112+0x3c>
    48fc:	80 91 ba 24 	lds	r24, 0x24BA
    4900:	90 91 bb 24 	lds	r25, 0x24BB
    4904:	19 95       	eicall
    4906:	ff 91       	pop	r31
    4908:	ef 91       	pop	r30
    490a:	bf 91       	pop	r27
    490c:	af 91       	pop	r26
    490e:	9f 91       	pop	r25
    4910:	8f 91       	pop	r24
    4912:	7f 91       	pop	r23
    4914:	6f 91       	pop	r22
    4916:	5f 91       	pop	r21
    4918:	4f 91       	pop	r20
    491a:	3f 91       	pop	r19
    491c:	2f 91       	pop	r18
    491e:	0f 90       	pop	r0
    4920:	0b be       	out	0x3b, r0	; 59
    4922:	0f 90       	pop	r0
    4924:	0f be       	out	0x3f, r0	; 63
    4926:	0f 90       	pop	r0
    4928:	1f 90       	pop	r1
    492a:	18 95       	reti

0000492c <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    492c:	1f 92       	push	r1
    492e:	0f 92       	push	r0
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	0f 92       	push	r0
    4934:	11 24       	eor	r1, r1
    4936:	0b b6       	in	r0, 0x3b	; 59
    4938:	0f 92       	push	r0
    493a:	2f 93       	push	r18
    493c:	3f 93       	push	r19
    493e:	4f 93       	push	r20
    4940:	5f 93       	push	r21
    4942:	6f 93       	push	r22
    4944:	7f 93       	push	r23
    4946:	8f 93       	push	r24
    4948:	9f 93       	push	r25
    494a:	af 93       	push	r26
    494c:	bf 93       	push	r27
    494e:	ef 93       	push	r30
    4950:	ff 93       	push	r31
    4952:	e0 91 c6 23 	lds	r30, 0x23C6
    4956:	f0 91 c7 23 	lds	r31, 0x23C7
    495a:	30 97       	sbiw	r30, 0x00	; 0
    495c:	29 f0       	breq	.+10     	; 0x4968 <__vector_113+0x3c>
    495e:	80 91 bc 24 	lds	r24, 0x24BC
    4962:	90 91 bd 24 	lds	r25, 0x24BD
    4966:	19 95       	eicall
    4968:	ff 91       	pop	r31
    496a:	ef 91       	pop	r30
    496c:	bf 91       	pop	r27
    496e:	af 91       	pop	r26
    4970:	9f 91       	pop	r25
    4972:	8f 91       	pop	r24
    4974:	7f 91       	pop	r23
    4976:	6f 91       	pop	r22
    4978:	5f 91       	pop	r21
    497a:	4f 91       	pop	r20
    497c:	3f 91       	pop	r19
    497e:	2f 91       	pop	r18
    4980:	0f 90       	pop	r0
    4982:	0b be       	out	0x3b, r0	; 59
    4984:	0f 90       	pop	r0
    4986:	0f be       	out	0x3f, r0	; 63
    4988:	0f 90       	pop	r0
    498a:	1f 90       	pop	r1
    498c:	18 95       	reti

0000498e <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    498e:	1f 92       	push	r1
    4990:	0f 92       	push	r0
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	0f 92       	push	r0
    4996:	11 24       	eor	r1, r1
    4998:	0b b6       	in	r0, 0x3b	; 59
    499a:	0f 92       	push	r0
    499c:	2f 93       	push	r18
    499e:	3f 93       	push	r19
    49a0:	4f 93       	push	r20
    49a2:	5f 93       	push	r21
    49a4:	6f 93       	push	r22
    49a6:	7f 93       	push	r23
    49a8:	8f 93       	push	r24
    49aa:	9f 93       	push	r25
    49ac:	af 93       	push	r26
    49ae:	bf 93       	push	r27
    49b0:	ef 93       	push	r30
    49b2:	ff 93       	push	r31
    49b4:	e0 91 d2 23 	lds	r30, 0x23D2
    49b8:	f0 91 d3 23 	lds	r31, 0x23D3
    49bc:	30 97       	sbiw	r30, 0x00	; 0
    49be:	29 f0       	breq	.+10     	; 0x49ca <__vector_119+0x3c>
    49c0:	80 91 c8 24 	lds	r24, 0x24C8
    49c4:	90 91 c9 24 	lds	r25, 0x24C9
    49c8:	19 95       	eicall
    49ca:	ff 91       	pop	r31
    49cc:	ef 91       	pop	r30
    49ce:	bf 91       	pop	r27
    49d0:	af 91       	pop	r26
    49d2:	9f 91       	pop	r25
    49d4:	8f 91       	pop	r24
    49d6:	7f 91       	pop	r23
    49d8:	6f 91       	pop	r22
    49da:	5f 91       	pop	r21
    49dc:	4f 91       	pop	r20
    49de:	3f 91       	pop	r19
    49e0:	2f 91       	pop	r18
    49e2:	0f 90       	pop	r0
    49e4:	0b be       	out	0x3b, r0	; 59
    49e6:	0f 90       	pop	r0
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	0f 90       	pop	r0
    49ec:	1f 90       	pop	r1
    49ee:	18 95       	reti

000049f0 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    49f0:	1f 92       	push	r1
    49f2:	0f 92       	push	r0
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	0f 92       	push	r0
    49f8:	11 24       	eor	r1, r1
    49fa:	0b b6       	in	r0, 0x3b	; 59
    49fc:	0f 92       	push	r0
    49fe:	2f 93       	push	r18
    4a00:	3f 93       	push	r19
    4a02:	4f 93       	push	r20
    4a04:	5f 93       	push	r21
    4a06:	6f 93       	push	r22
    4a08:	7f 93       	push	r23
    4a0a:	8f 93       	push	r24
    4a0c:	9f 93       	push	r25
    4a0e:	af 93       	push	r26
    4a10:	bf 93       	push	r27
    4a12:	ef 93       	push	r30
    4a14:	ff 93       	push	r31
    4a16:	e0 91 d4 23 	lds	r30, 0x23D4
    4a1a:	f0 91 d5 23 	lds	r31, 0x23D5
    4a1e:	30 97       	sbiw	r30, 0x00	; 0
    4a20:	29 f0       	breq	.+10     	; 0x4a2c <__vector_120+0x3c>
    4a22:	80 91 ca 24 	lds	r24, 0x24CA
    4a26:	90 91 cb 24 	lds	r25, 0x24CB
    4a2a:	19 95       	eicall
    4a2c:	ff 91       	pop	r31
    4a2e:	ef 91       	pop	r30
    4a30:	bf 91       	pop	r27
    4a32:	af 91       	pop	r26
    4a34:	9f 91       	pop	r25
    4a36:	8f 91       	pop	r24
    4a38:	7f 91       	pop	r23
    4a3a:	6f 91       	pop	r22
    4a3c:	5f 91       	pop	r21
    4a3e:	4f 91       	pop	r20
    4a40:	3f 91       	pop	r19
    4a42:	2f 91       	pop	r18
    4a44:	0f 90       	pop	r0
    4a46:	0b be       	out	0x3b, r0	; 59
    4a48:	0f 90       	pop	r0
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	0f 90       	pop	r0
    4a4e:	1f 90       	pop	r1
    4a50:	18 95       	reti

00004a52 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4a52:	1f 92       	push	r1
    4a54:	0f 92       	push	r0
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	0f 92       	push	r0
    4a5a:	11 24       	eor	r1, r1
    4a5c:	0b b6       	in	r0, 0x3b	; 59
    4a5e:	0f 92       	push	r0
    4a60:	2f 93       	push	r18
    4a62:	3f 93       	push	r19
    4a64:	4f 93       	push	r20
    4a66:	5f 93       	push	r21
    4a68:	6f 93       	push	r22
    4a6a:	7f 93       	push	r23
    4a6c:	8f 93       	push	r24
    4a6e:	9f 93       	push	r25
    4a70:	af 93       	push	r26
    4a72:	bf 93       	push	r27
    4a74:	ef 93       	push	r30
    4a76:	ff 93       	push	r31
    4a78:	e0 91 d6 23 	lds	r30, 0x23D6
    4a7c:	f0 91 d7 23 	lds	r31, 0x23D7
    4a80:	30 97       	sbiw	r30, 0x00	; 0
    4a82:	29 f0       	breq	.+10     	; 0x4a8e <__vector_121+0x3c>
    4a84:	80 91 cc 24 	lds	r24, 0x24CC
    4a88:	90 91 cd 24 	lds	r25, 0x24CD
    4a8c:	19 95       	eicall
    4a8e:	ff 91       	pop	r31
    4a90:	ef 91       	pop	r30
    4a92:	bf 91       	pop	r27
    4a94:	af 91       	pop	r26
    4a96:	9f 91       	pop	r25
    4a98:	8f 91       	pop	r24
    4a9a:	7f 91       	pop	r23
    4a9c:	6f 91       	pop	r22
    4a9e:	5f 91       	pop	r21
    4aa0:	4f 91       	pop	r20
    4aa2:	3f 91       	pop	r19
    4aa4:	2f 91       	pop	r18
    4aa6:	0f 90       	pop	r0
    4aa8:	0b be       	out	0x3b, r0	; 59
    4aaa:	0f 90       	pop	r0
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	0f 90       	pop	r0
    4ab0:	1f 90       	pop	r1
    4ab2:	18 95       	reti

00004ab4 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4ab4:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    4ab8:	fd cf       	rjmp	.-6      	; 0x4ab4 <__cxa_pure_virtual>

00004aba <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4aba:	81 e9       	ldi	r24, 0x91	; 145
    4abc:	95 e2       	ldi	r25, 0x25	; 37
    4abe:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN4CSPIC1Ev>
CTimerC timer;
    4ac2:	8e e8       	ldi	r24, 0x8E	; 142
    4ac4:	95 e2       	ldi	r25, 0x25	; 37
    4ac6:	0e 94 65 2e 	call	0x5cca	; 0x5cca <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    4aca:	8b e8       	ldi	r24, 0x8B	; 139
    4acc:	95 e2       	ldi	r25, 0x25	; 37
    4ace:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    4ad2:	88 e8       	ldi	r24, 0x88	; 136
    4ad4:	95 e2       	ldi	r25, 0x25	; 37
    4ad6:	0e 94 71 31 	call	0x62e2	; 0x62e2 <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    4ada:	85 e8       	ldi	r24, 0x85	; 133
    4adc:	95 e2       	ldi	r25, 0x25	; 37
    4ade:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    4ae2:	82 e8       	ldi	r24, 0x82	; 130
    4ae4:	95 e2       	ldi	r25, 0x25	; 37
    4ae6:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    4aea:	80 e8       	ldi	r24, 0x80	; 128
    4aec:	95 e2       	ldi	r25, 0x25	; 37
    4aee:	0e 94 1f 2b 	call	0x563e	; 0x563e <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    4af2:	88 e7       	ldi	r24, 0x78	; 120
    4af4:	95 e2       	ldi	r25, 0x25	; 37
    4af6:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    4afa:	8b e5       	ldi	r24, 0x5B	; 91
    4afc:	95 e2       	ldi	r25, 0x25	; 37
    4afe:	0e 94 36 28 	call	0x506c	; 0x506c <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    4b02:	81 e5       	ldi	r24, 0x51	; 81
    4b04:	95 e2       	ldi	r25, 0x25	; 37
    4b06:	0e 94 16 2c 	call	0x582c	; 0x582c <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    4b0a:	80 e5       	ldi	r24, 0x50	; 80
    4b0c:	95 e2       	ldi	r25, 0x25	; 37
    4b0e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    4b12:	88 ed       	ldi	r24, 0xD8	; 216
    4b14:	94 e2       	ldi	r25, 0x24	; 36
    4b16:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    4b1a:	84 ed       	ldi	r24, 0xD4	; 212
    4b1c:	94 e2       	ldi	r25, 0x24	; 36
    4b1e:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZN8CDS18B20C1Ev>
    4b22:	08 95       	ret

00004b24 <_GLOBAL__sub_D_dacSPI>:
    4b24:	84 ed       	ldi	r24, 0xD4	; 212
    4b26:	94 e2       	ldi	r25, 0x24	; 36
    4b28:	0e 94 34 2b 	call	0x5668	; 0x5668 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    4b2c:	88 ed       	ldi	r24, 0xD8	; 216
    4b2e:	94 e2       	ldi	r25, 0x24	; 36
    4b30:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4b34:	80 e5       	ldi	r24, 0x50	; 80
    4b36:	95 e2       	ldi	r25, 0x25	; 37
    4b38:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    4b3c:	81 e5       	ldi	r24, 0x51	; 81
    4b3e:	95 e2       	ldi	r25, 0x25	; 37
    4b40:	0e 94 17 2c 	call	0x582e	; 0x582e <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    4b44:	8b e5       	ldi	r24, 0x5B	; 91
    4b46:	95 e2       	ldi	r25, 0x25	; 37
    4b48:	0e 94 ab 28 	call	0x5156	; 0x5156 <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    4b4c:	88 e7       	ldi	r24, 0x78	; 120
    4b4e:	95 e2       	ldi	r25, 0x25	; 37
    4b50:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    4b54:	80 e8       	ldi	r24, 0x80	; 128
    4b56:	95 e2       	ldi	r25, 0x25	; 37
    4b58:	0e 94 2b 2b 	call	0x5656	; 0x5656 <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    4b5c:	82 e8       	ldi	r24, 0x82	; 130
    4b5e:	95 e2       	ldi	r25, 0x25	; 37
    4b60:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    4b64:	85 e8       	ldi	r24, 0x85	; 133
    4b66:	95 e2       	ldi	r25, 0x25	; 37
    4b68:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    4b6c:	88 e8       	ldi	r24, 0x88	; 136
    4b6e:	95 e2       	ldi	r25, 0x25	; 37
    4b70:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    4b74:	8b e8       	ldi	r24, 0x8B	; 139
    4b76:	95 e2       	ldi	r25, 0x25	; 37
    4b78:	0e 94 9c 30 	call	0x6138	; 0x6138 <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    4b7c:	8e e8       	ldi	r24, 0x8E	; 142
    4b7e:	95 e2       	ldi	r25, 0x25	; 37
    4b80:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4b84:	81 e9       	ldi	r24, 0x91	; 145
    4b86:	95 e2       	ldi	r25, 0x25	; 37
    4b88:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN4CSPID1Ev>
    4b8c:	08 95       	ret

00004b8e <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4b8e:	cf 92       	push	r12
    4b90:	df 92       	push	r13
    4b92:	ef 92       	push	r14
    4b94:	ff 92       	push	r15
    4b96:	0f 93       	push	r16
    4b98:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4b9a:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4b9c:	84 e6       	ldi	r24, 0x64	; 100
    4b9e:	80 93 80 01 	sts	0x0180, r24
	
	// Initialize modules
	laserBoard.InitializeIO();
    4ba2:	81 e5       	ldi	r24, 0x51	; 81
    4ba4:	95 e2       	ldi	r25, 0x25	; 37
    4ba6:	0e 94 18 2c 	call	0x5830	; 0x5830 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4baa:	84 ed       	ldi	r24, 0xD4	; 212
    4bac:	94 e2       	ldi	r25, 0x24	; 36
    4bae:	0e 94 07 2c 	call	0x580e	; 0x580e <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4bb2:	80 e5       	ldi	r24, 0x50	; 80
    4bb4:	95 e2       	ldi	r25, 0x25	; 37
    4bb6:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    4bba:	46 e0       	ldi	r20, 0x06	; 6
    4bbc:	60 e0       	ldi	r22, 0x00	; 0
    4bbe:	8e e8       	ldi	r24, 0x8E	; 142
    4bc0:	95 e2       	ldi	r25, 0x25	; 37
    4bc2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    4bc6:	68 ea       	ldi	r22, 0xA8	; 168
    4bc8:	71 e6       	ldi	r23, 0x61	; 97
    4bca:	8e e8       	ldi	r24, 0x8E	; 142
    4bcc:	95 e2       	ldi	r25, 0x25	; 37
    4bce:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    4bd2:	21 e0       	ldi	r18, 0x01	; 1
    4bd4:	48 ed       	ldi	r20, 0xD8	; 216
    4bd6:	54 e2       	ldi	r21, 0x24	; 36
    4bd8:	69 e9       	ldi	r22, 0x99	; 153
    4bda:	7f e0       	ldi	r23, 0x0F	; 15
    4bdc:	8e e8       	ldi	r24, 0x8E	; 142
    4bde:	95 e2       	ldi	r25, 0x25	; 37
    4be0:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4be4:	47 e0       	ldi	r20, 0x07	; 7
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	8b e8       	ldi	r24, 0x8B	; 139
    4bea:	95 e2       	ldi	r25, 0x25	; 37
    4bec:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4bf0:	62 e1       	ldi	r22, 0x12	; 18
    4bf2:	7a e7       	ldi	r23, 0x7A	; 122
    4bf4:	8b e8       	ldi	r24, 0x8B	; 139
    4bf6:	95 e2       	ldi	r25, 0x25	; 37
    4bf8:	0e 94 3d 30 	call	0x607a	; 0x607a <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4bfc:	48 e0       	ldi	r20, 0x08	; 8
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	85 e8       	ldi	r24, 0x85	; 133
    4c02:	95 e2       	ldi	r25, 0x25	; 37
    4c04:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4c08:	6f ef       	ldi	r22, 0xFF	; 255
    4c0a:	7f ef       	ldi	r23, 0xFF	; 255
    4c0c:	85 e8       	ldi	r24, 0x85	; 133
    4c0e:	95 e2       	ldi	r25, 0x25	; 37
    4c10:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4c14:	6f ef       	ldi	r22, 0xFF	; 255
    4c16:	7f ef       	ldi	r23, 0xFF	; 255
    4c18:	85 e8       	ldi	r24, 0x85	; 133
    4c1a:	95 e2       	ldi	r25, 0x25	; 37
    4c1c:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    4c20:	45 e0       	ldi	r20, 0x05	; 5
    4c22:	63 e0       	ldi	r22, 0x03	; 3
    4c24:	82 e8       	ldi	r24, 0x82	; 130
    4c26:	95 e2       	ldi	r25, 0x25	; 37
    4c28:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    4c2c:	60 e0       	ldi	r22, 0x00	; 0
    4c2e:	72 e0       	ldi	r23, 0x02	; 2
    4c30:	82 e8       	ldi	r24, 0x82	; 130
    4c32:	95 e2       	ldi	r25, 0x25	; 37
    4c34:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    4c38:	81 e5       	ldi	r24, 0x51	; 81
    4c3a:	95 e2       	ldi	r25, 0x25	; 37
    4c3c:	0e 94 ad 2c 	call	0x595a	; 0x595a <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    4c40:	81 e5       	ldi	r24, 0x51	; 81
    4c42:	95 e2       	ldi	r25, 0x25	; 37
    4c44:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    4c48:	81 e5       	ldi	r24, 0x51	; 81
    4c4a:	95 e2       	ldi	r25, 0x25	; 37
    4c4c:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    4c50:	81 e5       	ldi	r24, 0x51	; 81
    4c52:	95 e2       	ldi	r25, 0x25	; 37
    4c54:	0e 94 c5 2c 	call	0x598a	; 0x598a <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4c58:	21 e0       	ldi	r18, 0x01	; 1
    4c5a:	48 ed       	ldi	r20, 0xD8	; 216
    4c5c:	54 e2       	ldi	r21, 0x24	; 36
    4c5e:	67 e6       	ldi	r22, 0x67	; 103
    4c60:	70 e1       	ldi	r23, 0x10	; 16
    4c62:	82 e8       	ldi	r24, 0x82	; 130
    4c64:	95 e2       	ldi	r25, 0x25	; 37
    4c66:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4c6a:	21 e0       	ldi	r18, 0x01	; 1
    4c6c:	48 ed       	ldi	r20, 0xD8	; 216
    4c6e:	54 e2       	ldi	r21, 0x24	; 36
    4c70:	6a e5       	ldi	r22, 0x5A	; 90
    4c72:	76 e0       	ldi	r23, 0x06	; 6
    4c74:	82 e8       	ldi	r24, 0x82	; 130
    4c76:	95 e2       	ldi	r25, 0x25	; 37
    4c78:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
	pwmtimer.SetCOMPB(256);
    4c7c:	60 e0       	ldi	r22, 0x00	; 0
    4c7e:	71 e0       	ldi	r23, 0x01	; 1
    4c80:	82 e8       	ldi	r24, 0x82	; 130
    4c82:	95 e2       	ldi	r25, 0x25	; 37
    4c84:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    4c88:	60 e0       	ldi	r22, 0x00	; 0
    4c8a:	72 e0       	ldi	r23, 0x02	; 2
    4c8c:	82 e8       	ldi	r24, 0x82	; 130
    4c8e:	95 e2       	ldi	r25, 0x25	; 37
    4c90:	0e 94 75 2f 	call	0x5eea	; 0x5eea <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    4c94:	60 e0       	ldi	r22, 0x00	; 0
    4c96:	73 e0       	ldi	r23, 0x03	; 3
    4c98:	82 e8       	ldi	r24, 0x82	; 130
    4c9a:	95 e2       	ldi	r25, 0x25	; 37
    4c9c:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    4ca0:	2c e0       	ldi	r18, 0x0C	; 12
    4ca2:	48 ed       	ldi	r20, 0xD8	; 216
    4ca4:	54 e2       	ldi	r21, 0x24	; 36
    4ca6:	6d e5       	ldi	r22, 0x5D	; 93
    4ca8:	76 e0       	ldi	r23, 0x06	; 6
    4caa:	82 e8       	ldi	r24, 0x82	; 130
    4cac:	95 e2       	ldi	r25, 0x25	; 37
    4cae:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    4cb2:	20 e3       	ldi	r18, 0x30	; 48
    4cb4:	48 ed       	ldi	r20, 0xD8	; 216
    4cb6:	54 e2       	ldi	r21, 0x24	; 36
    4cb8:	62 e6       	ldi	r22, 0x62	; 98
    4cba:	76 e0       	ldi	r23, 0x06	; 6
    4cbc:	82 e8       	ldi	r24, 0x82	; 130
    4cbe:	95 e2       	ldi	r25, 0x25	; 37
    4cc0:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    4cc4:	20 ec       	ldi	r18, 0xC0	; 192
    4cc6:	48 ed       	ldi	r20, 0xD8	; 216
    4cc8:	54 e2       	ldi	r21, 0x24	; 36
    4cca:	67 e6       	ldi	r22, 0x67	; 103
    4ccc:	76 e0       	ldi	r23, 0x06	; 6
    4cce:	82 e8       	ldi	r24, 0x82	; 130
    4cd0:	95 e2       	ldi	r25, 0x25	; 37
    4cd2:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
	pwmtimer.Start(1024);
    4cd6:	60 e0       	ldi	r22, 0x00	; 0
    4cd8:	74 e0       	ldi	r23, 0x04	; 4
    4cda:	82 e8       	ldi	r24, 0x82	; 130
    4cdc:	95 e2       	ldi	r25, 0x25	; 37
    4cde:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4ce2:	0f 2e       	mov	r0, r31
    4ce4:	f3 e0       	ldi	r31, 0x03	; 3
    4ce6:	ef 2e       	mov	r14, r31
    4ce8:	f0 2d       	mov	r31, r0
    4cea:	00 e0       	ldi	r16, 0x00	; 0
    4cec:	23 e0       	ldi	r18, 0x03	; 3
    4cee:	40 e0       	ldi	r20, 0x00	; 0
    4cf0:	61 e0       	ldi	r22, 0x01	; 1
    4cf2:	81 e9       	ldi	r24, 0x91	; 145
    4cf4:	95 e2       	ldi	r25, 0x25	; 37
    4cf6:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4cfa:	01 e0       	ldi	r16, 0x01	; 1
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	6d e0       	ldi	r22, 0x0D	; 13
    4d02:	80 e8       	ldi	r24, 0x80	; 128
    4d04:	95 e2       	ldi	r25, 0x25	; 37
    4d06:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4d0a:	0f 2e       	mov	r0, r31
    4d0c:	f2 e1       	ldi	r31, 0x12	; 18
    4d0e:	cf 2e       	mov	r12, r31
    4d10:	fa e7       	ldi	r31, 0x7A	; 122
    4d12:	df 2e       	mov	r13, r31
    4d14:	f0 2d       	mov	r31, r0
    4d16:	e1 2c       	mov	r14, r1
    4d18:	ff 24       	eor	r15, r15
    4d1a:	f3 94       	inc	r15
    4d1c:	00 e0       	ldi	r16, 0x00	; 0
    4d1e:	11 e0       	ldi	r17, 0x01	; 1
    4d20:	28 ed       	ldi	r18, 0xD8	; 216
    4d22:	34 e2       	ldi	r19, 0x24	; 36
    4d24:	40 e8       	ldi	r20, 0x80	; 128
    4d26:	55 e2       	ldi	r21, 0x25	; 37
    4d28:	6b e8       	ldi	r22, 0x8B	; 139
    4d2a:	75 e2       	ldi	r23, 0x25	; 37
    4d2c:	8b e5       	ldi	r24, 0x5B	; 91
    4d2e:	95 e2       	ldi	r25, 0x25	; 37
    4d30:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4d34:	40 e0       	ldi	r20, 0x00	; 0
    4d36:	51 e0       	ldi	r21, 0x01	; 1
    4d38:	6b e5       	ldi	r22, 0x5B	; 91
    4d3a:	75 e2       	ldi	r23, 0x25	; 37
    4d3c:	88 e7       	ldi	r24, 0x78	; 120
    4d3e:	95 e2       	ldi	r25, 0x25	; 37
    4d40:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4d44:	6b e5       	ldi	r22, 0x5B	; 91
    4d46:	75 e2       	ldi	r23, 0x25	; 37
    4d48:	88 ed       	ldi	r24, 0xD8	; 216
    4d4a:	94 e2       	ldi	r25, 0x24	; 36
    4d4c:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4d50:	81 e5       	ldi	r24, 0x51	; 81
    4d52:	95 e2       	ldi	r25, 0x25	; 37
    4d54:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4d58:	88 ed       	ldi	r24, 0xD8	; 216
    4d5a:	94 e2       	ldi	r25, 0x24	; 36
    4d5c:	80 93 de 23 	sts	0x23DE, r24
    4d60:	90 93 df 23 	sts	0x23DF, r25
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	91 e1       	ldi	r25, 0x11	; 17
    4d68:	80 93 e8 22 	sts	0x22E8, r24
    4d6c:	90 93 e9 22 	sts	0x22E9, r25
	
	sei();	/* Enable global interrupts */
    4d70:	78 94       	sei
}
    4d72:	1f 91       	pop	r17
    4d74:	0f 91       	pop	r16
    4d76:	ff 90       	pop	r15
    4d78:	ef 90       	pop	r14
    4d7a:	df 90       	pop	r13
    4d7c:	cf 90       	pop	r12
    4d7e:	08 95       	ret

00004d80 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	1f 92       	push	r1
    4d86:	1f 92       	push	r1
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4d8c:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <_Z16SystemInitializev>
    4d90:	2a ea       	ldi	r18, 0xAA	; 170
    4d92:	36 ee       	ldi	r19, 0xE6	; 230
    4d94:	86 e9       	ldi	r24, 0x96	; 150
    4d96:	91 e0       	ldi	r25, 0x01	; 1
    4d98:	21 50       	subi	r18, 0x01	; 1
    4d9a:	30 40       	sbci	r19, 0x00	; 0
    4d9c:	80 40       	sbci	r24, 0x00	; 0
    4d9e:	90 40       	sbci	r25, 0x00	; 0
    4da0:	d9 f7       	brne	.-10     	; 0x4d98 <main+0x18>
    4da2:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4da4:	81 e5       	ldi	r24, 0x51	; 81
    4da6:	95 e2       	ldi	r25, 0x25	; 37
    4da8:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN11CLaserBoard8Relay1OnEv>
    4dac:	2f ef       	ldi	r18, 0xFF	; 255
    4dae:	33 ec       	ldi	r19, 0xC3	; 195
    4db0:	89 e0       	ldi	r24, 0x09	; 9
    4db2:	21 50       	subi	r18, 0x01	; 1
    4db4:	30 40       	sbci	r19, 0x00	; 0
    4db6:	80 40       	sbci	r24, 0x00	; 0
    4db8:	e1 f7       	brne	.-8      	; 0x4db2 <main+0x32>
    4dba:	00 c0       	rjmp	.+0      	; 0x4dbc <main+0x3c>
    4dbc:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4dbe:	19 82       	std	Y+1, r1	; 0x01
    4dc0:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4dc2:	42 e0       	ldi	r20, 0x02	; 2
    4dc4:	50 e0       	ldi	r21, 0x00	; 0
    4dc6:	be 01       	movw	r22, r28
    4dc8:	6f 5f       	subi	r22, 0xFF	; 255
    4dca:	7f 4f       	sbci	r23, 0xFF	; 255
    4dcc:	81 e9       	ldi	r24, 0x91	; 145
    4dce:	95 e2       	ldi	r25, 0x25	; 37
    4dd0:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4dd4:	88 ed       	ldi	r24, 0xD8	; 216
    4dd6:	94 e2       	ldi	r25, 0x24	; 36
    4dd8:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4ddc:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4dde:	81 e5       	ldi	r24, 0x51	; 81
    4de0:	95 e2       	ldi	r25, 0x25	; 37
    4de2:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4de6:	88 ed       	ldi	r24, 0xD8	; 216
    4de8:	94 e2       	ldi	r25, 0x24	; 36
    4dea:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4dee:	40 91 d0 24 	lds	r20, 0x24D0
    4df2:	50 91 d1 24 	lds	r21, 0x24D1
    4df6:	ca 01       	movw	r24, r20
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	80 93 d0 24 	sts	0x24D0, r24
    4dfe:	90 93 d1 24 	sts	0x24D1, r25
    4e02:	9a 01       	movw	r18, r20
    4e04:	a9 e8       	ldi	r26, 0x89	; 137
    4e06:	b8 e8       	ldi	r27, 0x88	; 136
    4e08:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
    4e0c:	96 95       	lsr	r25
    4e0e:	87 95       	ror	r24
    4e10:	96 95       	lsr	r25
    4e12:	87 95       	ror	r24
    4e14:	96 95       	lsr	r25
    4e16:	87 95       	ror	r24
    4e18:	18 9f       	mul	r17, r24
    4e1a:	90 01       	movw	r18, r0
    4e1c:	19 9f       	mul	r17, r25
    4e1e:	30 0d       	add	r19, r0
    4e20:	11 24       	eor	r1, r1
    4e22:	42 17       	cp	r20, r18
    4e24:	53 07       	cpc	r21, r19
    4e26:	41 f4       	brne	.+16     	; 0x4e38 <main+0xb8>
				temperature = D18B20.temp_18b20();
    4e28:	84 ed       	ldi	r24, 0xD4	; 212
    4e2a:	94 e2       	ldi	r25, 0x24	; 36
    4e2c:	0e 94 bc 2b 	call	0x5778	; 0x5778 <_ZN8CDS18B2010temp_18b20Ev>
    4e30:	80 93 d2 24 	sts	0x24D2, r24
    4e34:	90 93 d3 24 	sts	0x24D3, r25
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4e38:	80 91 d2 24 	lds	r24, 0x24D2
    4e3c:	90 91 d3 24 	lds	r25, 0x24D3
    4e40:	8a 30       	cpi	r24, 0x0A	; 10
    4e42:	91 40       	sbci	r25, 0x01	; 1
    4e44:	24 f0       	brlt	.+8      	; 0x4e4e <main+0xce>
				laserBoard.Relay2On();
    4e46:	81 e5       	ldi	r24, 0x51	; 81
    4e48:	95 e2       	ldi	r25, 0x25	; 37
    4e4a:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4e4e:	80 91 d2 24 	lds	r24, 0x24D2
    4e52:	90 91 d3 24 	lds	r25, 0x24D3
    4e56:	8f 3f       	cpi	r24, 0xFF	; 255
    4e58:	91 05       	cpc	r25, r1
    4e5a:	0c f6       	brge	.-126    	; 0x4dde <main+0x5e>
				laserBoard.Relay2Off();			
    4e5c:	81 e5       	ldi	r24, 0x51	; 81
    4e5e:	95 e2       	ldi	r25, 0x25	; 37
    4e60:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <_ZN11CLaserBoard9Relay2OffEv>
    4e64:	bc cf       	rjmp	.-136    	; 0x4dde <main+0x5e>

00004e66 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4e6c:	ec 81       	ldd	r30, Y+4	; 0x04
    4e6e:	fd 81       	ldd	r31, Y+5	; 0x05
    4e70:	8a ea       	ldi	r24, 0xAA	; 170
    4e72:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4e74:	ec 81       	ldd	r30, Y+4	; 0x04
    4e76:	fd 81       	ldd	r31, Y+5	; 0x05
    4e78:	8c ec       	ldi	r24, 0xCC	; 204
    4e7a:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4e7c:	ec 81       	ldd	r30, Y+4	; 0x04
    4e7e:	fd 81       	ldd	r31, Y+5	; 0x05
    4e80:	82 e0       	ldi	r24, 0x02	; 2
    4e82:	82 0f       	add	r24, r18
    4e84:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4e86:	ec 81       	ldd	r30, Y+4	; 0x04
    4e88:	fd 81       	ldd	r31, Y+5	; 0x05
    4e8a:	80 e8       	ldi	r24, 0x80	; 128
    4e8c:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4e8e:	ec 81       	ldd	r30, Y+4	; 0x04
    4e90:	fd 81       	ldd	r31, Y+5	; 0x05
    4e92:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4e94:	85 e0       	ldi	r24, 0x05	; 5
    4e96:	82 0f       	add	r24, r18
    4e98:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	21 15       	cp	r18, r1
    4e9e:	31 05       	cpc	r19, r1
    4ea0:	81 f0       	breq	.+32     	; 0x4ec2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4ea2:	da 01       	movw	r26, r20
    4ea4:	42 0f       	add	r20, r18
    4ea6:	53 1f       	adc	r21, r19
    4ea8:	65 e0       	ldi	r22, 0x05	; 5
    4eaa:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4eac:	9d 91       	ld	r25, X+
    4eae:	ec 81       	ldd	r30, Y+4	; 0x04
    4eb0:	fd 81       	ldd	r31, Y+5	; 0x05
    4eb2:	e6 0f       	add	r30, r22
    4eb4:	f7 1f       	adc	r31, r23
    4eb6:	90 83       	st	Z, r25
    4eb8:	6f 5f       	subi	r22, 0xFF	; 255
    4eba:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4ebc:	a4 17       	cp	r26, r20
    4ebe:	b5 07       	cpc	r27, r21
    4ec0:	a9 f7       	brne	.-22     	; 0x4eac <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	08 95       	ret

00004ec8 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4ec8:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4eca:	a4 81       	ldd	r26, Z+4	; 0x04
    4ecc:	b5 81       	ldd	r27, Z+5	; 0x05
    4ece:	8a ea       	ldi	r24, 0xAA	; 170
    4ed0:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4ed2:	a4 81       	ldd	r26, Z+4	; 0x04
    4ed4:	b5 81       	ldd	r27, Z+5	; 0x05
    4ed6:	8c ec       	ldi	r24, 0xCC	; 204
    4ed8:	11 96       	adiw	r26, 0x01	; 1
    4eda:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4edc:	a4 81       	ldd	r26, Z+4	; 0x04
    4ede:	b5 81       	ldd	r27, Z+5	; 0x05
    4ee0:	83 e0       	ldi	r24, 0x03	; 3
    4ee2:	12 96       	adiw	r26, 0x02	; 2
    4ee4:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4ee6:	a4 81       	ldd	r26, Z+4	; 0x04
    4ee8:	b5 81       	ldd	r27, Z+5	; 0x05
    4eea:	81 e8       	ldi	r24, 0x81	; 129
    4eec:	13 96       	adiw	r26, 0x03	; 3
    4eee:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4ef0:	a4 81       	ldd	r26, Z+4	; 0x04
    4ef2:	b5 81       	ldd	r27, Z+5	; 0x05
    4ef4:	14 96       	adiw	r26, 0x04	; 4
    4ef6:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4ef8:	a4 81       	ldd	r26, Z+4	; 0x04
    4efa:	b5 81       	ldd	r27, Z+5	; 0x05
    4efc:	15 96       	adiw	r26, 0x05	; 5
    4efe:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4f00:	86 e0       	ldi	r24, 0x06	; 6
    4f02:	81 87       	std	Z+9, r24	; 0x09
    4f04:	08 95       	ret

00004f06 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4f06:	0f 93       	push	r16
    4f08:	1f 93       	push	r17
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4f0e:	dc 01       	movw	r26, r24
    4f10:	14 96       	adiw	r26, 0x04	; 4
    4f12:	ed 91       	ld	r30, X+
    4f14:	fc 91       	ld	r31, X
    4f16:	15 97       	sbiw	r26, 0x05	; 5
    4f18:	aa ea       	ldi	r26, 0xAA	; 170
    4f1a:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4f1c:	ec 01       	movw	r28, r24
    4f1e:	ec 81       	ldd	r30, Y+4	; 0x04
    4f20:	fd 81       	ldd	r31, Y+5	; 0x05
    4f22:	ac ec       	ldi	r26, 0xCC	; 204
    4f24:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4f26:	ec 81       	ldd	r30, Y+4	; 0x04
    4f28:	fd 81       	ldd	r31, Y+5	; 0x05
    4f2a:	a3 e0       	ldi	r26, 0x03	; 3
    4f2c:	a2 0f       	add	r26, r18
    4f2e:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4f30:	ec 81       	ldd	r30, Y+4	; 0x04
    4f32:	fd 81       	ldd	r31, Y+5	; 0x05
    4f34:	a2 e8       	ldi	r26, 0x82	; 130
    4f36:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4f38:	ec 81       	ldd	r30, Y+4	; 0x04
    4f3a:	fd 81       	ldd	r31, Y+5	; 0x05
    4f3c:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4f3e:	ec 81       	ldd	r30, Y+4	; 0x04
    4f40:	fd 81       	ldd	r31, Y+5	; 0x05
    4f42:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4f44:	66 e0       	ldi	r22, 0x06	; 6
    4f46:	62 0f       	add	r22, r18
    4f48:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4f4a:	36 95       	lsr	r19
    4f4c:	27 95       	ror	r18
    4f4e:	21 15       	cp	r18, r1
    4f50:	31 05       	cpc	r19, r1
    4f52:	e1 f0       	breq	.+56     	; 0x4f8c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4f54:	e4 2f       	mov	r30, r20
    4f56:	f5 2f       	mov	r31, r21
    4f58:	2d 5f       	subi	r18, 0xFD	; 253
    4f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5c:	22 0f       	add	r18, r18
    4f5e:	33 1f       	adc	r19, r19
    4f60:	46 e0       	ldi	r20, 0x06	; 6
    4f62:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4f64:	ec 01       	movw	r28, r24
    4f66:	ac 81       	ldd	r26, Y+4	; 0x04
    4f68:	bd 81       	ldd	r27, Y+5	; 0x05
    4f6a:	a4 0f       	add	r26, r20
    4f6c:	b5 1f       	adc	r27, r21
    4f6e:	61 81       	ldd	r22, Z+1	; 0x01
    4f70:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4f72:	ac 81       	ldd	r26, Y+4	; 0x04
    4f74:	bd 81       	ldd	r27, Y+5	; 0x05
    4f76:	a4 0f       	add	r26, r20
    4f78:	b5 1f       	adc	r27, r21
    4f7a:	60 81       	ld	r22, Z
    4f7c:	32 96       	adiw	r30, 0x02	; 2
    4f7e:	11 96       	adiw	r26, 0x01	; 1
    4f80:	6c 93       	st	X, r22
    4f82:	4e 5f       	subi	r20, 0xFE	; 254
    4f84:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4f86:	42 17       	cp	r20, r18
    4f88:	53 07       	cpc	r21, r19
    4f8a:	61 f7       	brne	.-40     	; 0x4f64 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    4f8c:	df 91       	pop	r29
    4f8e:	cf 91       	pop	r28
    4f90:	1f 91       	pop	r17
    4f92:	0f 91       	pop	r16
    4f94:	08 95       	ret

00004f96 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4f96:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4f98:	a4 81       	ldd	r26, Z+4	; 0x04
    4f9a:	b5 81       	ldd	r27, Z+5	; 0x05
    4f9c:	8a ea       	ldi	r24, 0xAA	; 170
    4f9e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4fa0:	a4 81       	ldd	r26, Z+4	; 0x04
    4fa2:	b5 81       	ldd	r27, Z+5	; 0x05
    4fa4:	8c ec       	ldi	r24, 0xCC	; 204
    4fa6:	11 96       	adiw	r26, 0x01	; 1
    4fa8:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    4faa:	a4 81       	ldd	r26, Z+4	; 0x04
    4fac:	b5 81       	ldd	r27, Z+5	; 0x05
    4fae:	84 e0       	ldi	r24, 0x04	; 4
    4fb0:	12 96       	adiw	r26, 0x02	; 2
    4fb2:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4fb4:	a4 81       	ldd	r26, Z+4	; 0x04
    4fb6:	b5 81       	ldd	r27, Z+5	; 0x05
    4fb8:	83 e8       	ldi	r24, 0x83	; 131
    4fba:	13 96       	adiw	r26, 0x03	; 3
    4fbc:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4fbe:	a4 81       	ldd	r26, Z+4	; 0x04
    4fc0:	b5 81       	ldd	r27, Z+5	; 0x05
    4fc2:	14 96       	adiw	r26, 0x04	; 4
    4fc4:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4fc6:	a4 81       	ldd	r26, Z+4	; 0x04
    4fc8:	b5 81       	ldd	r27, Z+5	; 0x05
    4fca:	15 96       	adiw	r26, 0x05	; 5
    4fcc:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4fce:	a4 81       	ldd	r26, Z+4	; 0x04
    4fd0:	b5 81       	ldd	r27, Z+5	; 0x05
    4fd2:	16 96       	adiw	r26, 0x06	; 6
    4fd4:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4fd6:	87 e0       	ldi	r24, 0x07	; 7
    4fd8:	81 87       	std	Z+9, r24	; 0x09
    4fda:	08 95       	ret

00004fdc <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4fdc:	0f 93       	push	r16
    4fde:	1f 93       	push	r17
    4fe0:	cf 93       	push	r28
    4fe2:	df 93       	push	r29
    4fe4:	ec 01       	movw	r28, r24
    4fe6:	cb 01       	movw	r24, r22
    4fe8:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4fea:	6f 83       	std	Y+7, r22	; 0x07
    4fec:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4fee:	4a 87       	std	Y+10, r20	; 0x0a
    4ff0:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4ff2:	0e 94 51 33 	call	0x66a2	; 0x66a2 <malloc>
    4ff6:	8a 83       	std	Y+2, r24	; 0x02
    4ff8:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4ffa:	c8 01       	movw	r24, r16
    4ffc:	0e 94 51 33 	call	0x66a2	; 0x66a2 <malloc>
    5000:	8c 83       	std	Y+4, r24	; 0x04
    5002:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    5004:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    5006:	1e 82       	std	Y+6, r1	; 0x06
}
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	0f 91       	pop	r16
    5010:	08 95       	ret

00005012 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    5012:	cf 93       	push	r28
    5014:	df 93       	push	r29
    5016:	ec 01       	movw	r28, r24
	free(rx_buffer);
    5018:	8a 81       	ldd	r24, Y+2	; 0x02
    501a:	9b 81       	ldd	r25, Y+3	; 0x03
    501c:	0e 94 e6 33 	call	0x67cc	; 0x67cc <free>
	free(tx_buffer);
    5020:	8c 81       	ldd	r24, Y+4	; 0x04
    5022:	9d 81       	ldd	r25, Y+5	; 0x05
    5024:	0e 94 e6 33 	call	0x67cc	; 0x67cc <free>
}
    5028:	df 91       	pop	r29
    502a:	cf 91       	pop	r28
    502c:	08 95       	ret

0000502e <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    502e:	08 95       	ret

00005030 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    5030:	dc 01       	movw	r26, r24
    5032:	5b 96       	adiw	r26, 0x1b	; 27
    5034:	8d 91       	ld	r24, X+
    5036:	9c 91       	ld	r25, X
    5038:	5c 97       	sbiw	r26, 0x1c	; 28
    503a:	00 97       	sbiw	r24, 0x00	; 0
    503c:	39 f0       	breq	.+14     	; 0x504c <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    503e:	dc 01       	movw	r26, r24
    5040:	ed 91       	ld	r30, X+
    5042:	fc 91       	ld	r31, X
    5044:	02 80       	ldd	r0, Z+2	; 0x02
    5046:	f3 81       	ldd	r31, Z+3	; 0x03
    5048:	e0 2d       	mov	r30, r0
    504a:	19 95       	eicall
    504c:	08 95       	ret

0000504e <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    504e:	dc 01       	movw	r26, r24
    5050:	5b 96       	adiw	r26, 0x1b	; 27
    5052:	8d 91       	ld	r24, X+
    5054:	9c 91       	ld	r25, X
    5056:	5c 97       	sbiw	r26, 0x1c	; 28
    5058:	00 97       	sbiw	r24, 0x00	; 0
    505a:	39 f0       	breq	.+14     	; 0x506a <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    505c:	dc 01       	movw	r26, r24
    505e:	ed 91       	ld	r30, X+
    5060:	fc 91       	ld	r31, X
    5062:	04 80       	ldd	r0, Z+4	; 0x04
    5064:	f5 81       	ldd	r31, Z+5	; 0x05
    5066:	e0 2d       	mov	r30, r0
    5068:	19 95       	eicall
    506a:	08 95       	ret

0000506c <_ZN9CMBSenderC1Ev>:
    506c:	24 e0       	ldi	r18, 0x04	; 4
    506e:	32 e2       	ldi	r19, 0x22	; 34
    5070:	fc 01       	movw	r30, r24
    5072:	20 83       	st	Z, r18
    5074:	31 83       	std	Z+1, r19	; 0x01
    5076:	08 95       	ret

00005078 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    5078:	6f 92       	push	r6
    507a:	7f 92       	push	r7
    507c:	8f 92       	push	r8
    507e:	9f 92       	push	r9
    5080:	af 92       	push	r10
    5082:	bf 92       	push	r11
    5084:	cf 92       	push	r12
    5086:	df 92       	push	r13
    5088:	ef 92       	push	r14
    508a:	ff 92       	push	r15
    508c:	0f 93       	push	r16
    508e:	1f 93       	push	r17
    5090:	cf 93       	push	r28
    5092:	df 93       	push	r29
    5094:	ec 01       	movw	r28, r24
    5096:	4b 01       	movw	r8, r22
    5098:	5a 01       	movw	r10, r20
    509a:	39 01       	movw	r6, r18
    509c:	c8 01       	movw	r24, r16
    509e:	0f 83       	std	Y+7, r16	; 0x07
    50a0:	18 87       	std	Y+8, r17	; 0x08
    50a2:	ea 86       	std	Y+10, r14	; 0x0a
    50a4:	fb 86       	std	Y+11, r15	; 0x0b
    50a6:	0e 94 51 33 	call	0x66a2	; 0x66a2 <malloc>
    50aa:	8a 83       	std	Y+2, r24	; 0x02
    50ac:	9b 83       	std	Y+3, r25	; 0x03
    50ae:	c7 01       	movw	r24, r14
    50b0:	0e 94 51 33 	call	0x66a2	; 0x66a2 <malloc>
    50b4:	8c 83       	std	Y+4, r24	; 0x04
    50b6:	9d 83       	std	Y+5, r25	; 0x05
    50b8:	19 8e       	std	Y+25, r1	; 0x19
    50ba:	19 86       	std	Y+9, r1	; 0x09
    50bc:	19 8a       	std	Y+17, r1	; 0x11
    50be:	1e 82       	std	Y+6, r1	; 0x06
    50c0:	1c 8a       	std	Y+20, r1	; 0x14
    50c2:	1d 8a       	std	Y+21, r1	; 0x15
    50c4:	1e 8a       	std	Y+22, r1	; 0x16
    50c6:	1f 8a       	std	Y+23, r1	; 0x17
    50c8:	87 e0       	ldi	r24, 0x07	; 7
    50ca:	88 8b       	std	Y+16, r24	; 0x10
    50cc:	82 e0       	ldi	r24, 0x02	; 2
    50ce:	88 8f       	std	Y+24, r24	; 0x18
    50d0:	1a 8e       	std	Y+26, r1	; 0x1a
    50d2:	ca 8a       	std	Y+18, r12	; 0x12
    50d4:	db 8a       	std	Y+19, r13	; 0x13
    50d6:	ac 86       	std	Y+12, r10	; 0x0c
    50d8:	bd 86       	std	Y+13, r11	; 0x0d
    50da:	d5 01       	movw	r26, r10
    50dc:	ed 91       	ld	r30, X+
    50de:	fc 91       	ld	r31, X
    50e0:	04 84       	ldd	r0, Z+12	; 0x0c
    50e2:	f5 85       	ldd	r31, Z+13	; 0x0d
    50e4:	e0 2d       	mov	r30, r0
    50e6:	40 e6       	ldi	r20, 0x60	; 96
    50e8:	59 e2       	ldi	r21, 0x29	; 41
    50ea:	be 01       	movw	r22, r28
    50ec:	c5 01       	movw	r24, r10
    50ee:	19 95       	eicall
    50f0:	d5 01       	movw	r26, r10
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	06 84       	ldd	r0, Z+14	; 0x0e
    50f8:	f7 85       	ldd	r31, Z+15	; 0x0f
    50fa:	e0 2d       	mov	r30, r0
    50fc:	4c ee       	ldi	r20, 0xEC	; 236
    50fe:	59 e2       	ldi	r21, 0x29	; 41
    5100:	be 01       	movw	r22, r28
    5102:	c5 01       	movw	r24, r10
    5104:	19 95       	eicall
    5106:	61 14       	cp	r6, r1
    5108:	71 04       	cpc	r7, r1
    510a:	19 f0       	breq	.+6      	; 0x5112 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9a>
    510c:	6b 8e       	std	Y+27, r6	; 0x1b
    510e:	7c 8e       	std	Y+28, r7	; 0x1c
    5110:	02 c0       	rjmp	.+4      	; 0x5116 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    5112:	cb 8f       	std	Y+27, r28	; 0x1b
    5114:	dc 8f       	std	Y+28, r29	; 0x1c
    5116:	8e 86       	std	Y+14, r8	; 0x0e
    5118:	9f 86       	std	Y+15, r9	; 0x0f
    511a:	81 14       	cp	r8, r1
    511c:	91 04       	cpc	r9, r1
    511e:	61 f0       	breq	.+24     	; 0x5138 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc0>
    5120:	d4 01       	movw	r26, r8
    5122:	ed 91       	ld	r30, X+
    5124:	fc 91       	ld	r31, X
    5126:	02 88       	ldd	r0, Z+18	; 0x12
    5128:	f3 89       	ldd	r31, Z+19	; 0x13
    512a:	e0 2d       	mov	r30, r0
    512c:	21 e0       	ldi	r18, 0x01	; 1
    512e:	ae 01       	movw	r20, r28
    5130:	67 e8       	ldi	r22, 0x87	; 135
    5132:	79 e2       	ldi	r23, 0x29	; 41
    5134:	c4 01       	movw	r24, r8
    5136:	19 95       	eicall
    5138:	df 91       	pop	r29
    513a:	cf 91       	pop	r28
    513c:	1f 91       	pop	r17
    513e:	0f 91       	pop	r16
    5140:	ff 90       	pop	r15
    5142:	ef 90       	pop	r14
    5144:	df 90       	pop	r13
    5146:	cf 90       	pop	r12
    5148:	bf 90       	pop	r11
    514a:	af 90       	pop	r10
    514c:	9f 90       	pop	r9
    514e:	8f 90       	pop	r8
    5150:	7f 90       	pop	r7
    5152:	6f 90       	pop	r6
    5154:	08 95       	ret

00005156 <_ZN9CMBSenderD1Ev>:
    5156:	24 e0       	ldi	r18, 0x04	; 4
    5158:	32 e2       	ldi	r19, 0x22	; 34
    515a:	fc 01       	movw	r30, r24
    515c:	20 83       	st	Z, r18
    515e:	31 83       	std	Z+1, r19	; 0x01
    5160:	0e 94 17 28 	call	0x502e	; 0x502e <_ZN16CMBEventsHandlerD1Ev>
    5164:	08 95       	ret

00005166 <_ZN9CMBSender13OnReceiveByteEh>:
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	ec 01       	movw	r28, r24
    516c:	96 2f       	mov	r25, r22
    516e:	48 89       	ldd	r20, Y+16	; 0x10
    5170:	50 e0       	ldi	r21, 0x00	; 0
    5172:	4b 30       	cpi	r20, 0x0B	; 11
    5174:	51 05       	cpc	r21, r1
    5176:	08 f0       	brcs	.+2      	; 0x517a <_ZN9CMBSender13OnReceiveByteEh+0x14>
    5178:	a0 c0       	rjmp	.+320    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    517a:	fa 01       	movw	r30, r20
    517c:	88 27       	eor	r24, r24
    517e:	e0 5c       	subi	r30, 0xC0	; 192
    5180:	fe 4f       	sbci	r31, 0xFE	; 254
    5182:	8f 4f       	sbci	r24, 0xFF	; 255
    5184:	0c 94 2f 33 	jmp	0x665e	; 0x665e <__tablejump2__>
    5188:	9a 3a       	cpi	r25, 0xAA	; 170
    518a:	19 f4       	brne	.+6      	; 0x5192 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
    518c:	82 e0       	ldi	r24, 0x02	; 2
    518e:	88 8b       	std	Y+16, r24	; 0x10
    5190:	94 c0       	rjmp	.+296    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	88 8b       	std	Y+16, r24	; 0x10
    5196:	91 c0       	rjmp	.+290    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5198:	9c 3c       	cpi	r25, 0xCC	; 204
    519a:	19 f4       	brne	.+6      	; 0x51a2 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
    519c:	83 e0       	ldi	r24, 0x03	; 3
    519e:	88 8b       	std	Y+16, r24	; 0x10
    51a0:	8c c0       	rjmp	.+280    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51a2:	81 e0       	ldi	r24, 0x01	; 1
    51a4:	88 8b       	std	Y+16, r24	; 0x10
    51a6:	89 c0       	rjmp	.+274    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51a8:	9e 83       	std	Y+6, r25	; 0x06
    51aa:	19 8a       	std	Y+17, r1	; 0x11
    51ac:	1e 8a       	std	Y+22, r1	; 0x16
    51ae:	1f 8a       	std	Y+23, r1	; 0x17
    51b0:	84 e0       	ldi	r24, 0x04	; 4
    51b2:	88 8b       	std	Y+16, r24	; 0x10
    51b4:	82 c0       	rjmp	.+260    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51b6:	89 89       	ldd	r24, Y+17	; 0x11
    51b8:	ea 81       	ldd	r30, Y+2	; 0x02
    51ba:	fb 81       	ldd	r31, Y+3	; 0x03
    51bc:	e8 0f       	add	r30, r24
    51be:	f1 1d       	adc	r31, r1
    51c0:	90 83       	st	Z, r25
    51c2:	29 89       	ldd	r18, Y+17	; 0x11
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	4f 81       	ldd	r20, Y+7	; 0x07
    51c8:	58 85       	ldd	r21, Y+8	; 0x08
    51ca:	42 17       	cp	r20, r18
    51cc:	53 07       	cpc	r21, r19
    51ce:	18 f4       	brcc	.+6      	; 0x51d6 <_ZN9CMBSender13OnReceiveByteEh+0x70>
    51d0:	89 e0       	ldi	r24, 0x09	; 9
    51d2:	88 8b       	std	Y+16, r24	; 0x10
    51d4:	72 c0       	rjmp	.+228    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    51d6:	2e 89       	ldd	r18, Y+22	; 0x16
    51d8:	3f 89       	ldd	r19, Y+23	; 0x17
    51da:	29 27       	eor	r18, r25
    51dc:	92 2f       	mov	r25, r18
    51de:	92 95       	swap	r25
    51e0:	92 27       	eor	r25, r18
    51e2:	09 2e       	mov	r0, r25
    51e4:	96 95       	lsr	r25
    51e6:	96 95       	lsr	r25
    51e8:	90 25       	eor	r25, r0
    51ea:	09 2e       	mov	r0, r25
    51ec:	96 95       	lsr	r25
    51ee:	90 25       	eor	r25, r0
    51f0:	97 70       	andi	r25, 0x07	; 7
    51f2:	02 2e       	mov	r0, r18
    51f4:	23 2f       	mov	r18, r19
    51f6:	96 95       	lsr	r25
    51f8:	07 94       	ror	r0
    51fa:	97 95       	ror	r25
    51fc:	30 2d       	mov	r19, r0
    51fe:	29 27       	eor	r18, r25
    5200:	06 94       	lsr	r0
    5202:	97 95       	ror	r25
    5204:	30 25       	eor	r19, r0
    5206:	29 27       	eor	r18, r25
    5208:	2e 8b       	std	Y+22, r18	; 0x16
    520a:	3f 8b       	std	Y+23, r19	; 0x17
    520c:	89 89       	ldd	r24, Y+17	; 0x11
    520e:	8f 5f       	subi	r24, 0xFF	; 255
    5210:	89 8b       	std	Y+17, r24	; 0x11
    5212:	49 89       	ldd	r20, Y+17	; 0x11
    5214:	8e 81       	ldd	r24, Y+6	; 0x06
    5216:	48 13       	cpse	r20, r24
    5218:	50 c0       	rjmp	.+160    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    521a:	88 e0       	ldi	r24, 0x08	; 8
    521c:	88 8b       	std	Y+16, r24	; 0x10
    521e:	e8 81       	ld	r30, Y
    5220:	f9 81       	ldd	r31, Y+1	; 0x01
    5222:	50 e0       	ldi	r21, 0x00	; 0
    5224:	6a 81       	ldd	r22, Y+2	; 0x02
    5226:	7b 81       	ldd	r23, Y+3	; 0x03
    5228:	01 90       	ld	r0, Z+
    522a:	f0 81       	ld	r31, Z
    522c:	e0 2d       	mov	r30, r0
    522e:	ce 01       	movw	r24, r28
    5230:	19 95       	eicall
    5232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5236:	00 97       	sbiw	r24, 0x00	; 0
    5238:	09 f4       	brne	.+2      	; 0x523c <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    523a:	3f c0       	rjmp	.+126    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    523c:	dc 01       	movw	r26, r24
    523e:	ed 91       	ld	r30, X+
    5240:	fc 91       	ld	r31, X
    5242:	4e 81       	ldd	r20, Y+6	; 0x06
    5244:	50 e0       	ldi	r21, 0x00	; 0
    5246:	6a 81       	ldd	r22, Y+2	; 0x02
    5248:	7b 81       	ldd	r23, Y+3	; 0x03
    524a:	01 90       	ld	r0, Z+
    524c:	f0 81       	ld	r31, Z
    524e:	e0 2d       	mov	r30, r0
    5250:	19 95       	eicall
    5252:	33 c0       	rjmp	.+102    	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5254:	69 2f       	mov	r22, r25
    5256:	70 e0       	ldi	r23, 0x00	; 0
    5258:	6c 8b       	std	Y+20, r22	; 0x14
    525a:	7d 8b       	std	Y+21, r23	; 0x15
    525c:	86 e0       	ldi	r24, 0x06	; 6
    525e:	88 8b       	std	Y+16, r24	; 0x10
    5260:	2c c0       	rjmp	.+88     	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5262:	2c 89       	ldd	r18, Y+20	; 0x14
    5264:	3d 89       	ldd	r19, Y+21	; 0x15
    5266:	a9 01       	movw	r20, r18
    5268:	59 2b       	or	r21, r25
    526a:	4c 8b       	std	Y+20, r20	; 0x14
    526c:	5d 8b       	std	Y+21, r21	; 0x15
    526e:	2e 89       	ldd	r18, Y+22	; 0x16
    5270:	3f 89       	ldd	r19, Y+23	; 0x17
    5272:	42 17       	cp	r20, r18
    5274:	53 07       	cpc	r21, r19
    5276:	e9 f4       	brne	.+58     	; 0x52b2 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
    5278:	88 e0       	ldi	r24, 0x08	; 8
    527a:	88 8b       	std	Y+16, r24	; 0x10
    527c:	e8 81       	ld	r30, Y
    527e:	f9 81       	ldd	r31, Y+1	; 0x01
    5280:	4e 81       	ldd	r20, Y+6	; 0x06
    5282:	50 e0       	ldi	r21, 0x00	; 0
    5284:	6a 81       	ldd	r22, Y+2	; 0x02
    5286:	7b 81       	ldd	r23, Y+3	; 0x03
    5288:	01 90       	ld	r0, Z+
    528a:	f0 81       	ld	r31, Z
    528c:	e0 2d       	mov	r30, r0
    528e:	ce 01       	movw	r24, r28
    5290:	19 95       	eicall
    5292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5296:	00 97       	sbiw	r24, 0x00	; 0
    5298:	81 f0       	breq	.+32     	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    529a:	dc 01       	movw	r26, r24
    529c:	ed 91       	ld	r30, X+
    529e:	fc 91       	ld	r31, X
    52a0:	4e 81       	ldd	r20, Y+6	; 0x06
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	6a 81       	ldd	r22, Y+2	; 0x02
    52a6:	7b 81       	ldd	r23, Y+3	; 0x03
    52a8:	01 90       	ld	r0, Z+
    52aa:	f0 81       	ld	r31, Z
    52ac:	e0 2d       	mov	r30, r0
    52ae:	19 95       	eicall
    52b0:	04 c0       	rjmp	.+8      	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52b2:	89 e0       	ldi	r24, 0x09	; 9
    52b4:	88 8b       	std	Y+16, r24	; 0x10
    52b6:	01 c0       	rjmp	.+2      	; 0x52ba <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52b8:	1a 8e       	std	Y+26, r1	; 0x1a
    52ba:	df 91       	pop	r29
    52bc:	cf 91       	pop	r28
    52be:	08 95       	ret

000052c0 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    52c0:	cf 93       	push	r28
    52c2:	df 93       	push	r29
    52c4:	ec 01       	movw	r28, r24
    52c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    52c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    52ca:	dc 01       	movw	r26, r24
    52cc:	ed 91       	ld	r30, X+
    52ce:	fc 91       	ld	r31, X
    52d0:	02 80       	ldd	r0, Z+2	; 0x02
    52d2:	f3 81       	ldd	r31, Z+3	; 0x03
    52d4:	e0 2d       	mov	r30, r0
    52d6:	19 95       	eicall
    52d8:	68 2f       	mov	r22, r24
    52da:	ce 01       	movw	r24, r28
    52dc:	0e 94 b3 28 	call	0x5166	; 0x5166 <_ZN9CMBSender13OnReceiveByteEh>
    52e0:	df 91       	pop	r29
    52e2:	cf 91       	pop	r28
    52e4:	08 95       	ret

000052e6 <_ZN9CMBSender9OnTimeoutEv>:
    52e6:	cf 93       	push	r28
    52e8:	df 93       	push	r29
    52ea:	ec 01       	movw	r28, r24
    52ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    52ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    52f0:	dc 01       	movw	r26, r24
    52f2:	ed 91       	ld	r30, X+
    52f4:	fc 91       	ld	r31, X
    52f6:	04 80       	ldd	r0, Z+4	; 0x04
    52f8:	f5 81       	ldd	r31, Z+5	; 0x05
    52fa:	e0 2d       	mov	r30, r0
    52fc:	19 95       	eicall
    52fe:	88 89       	ldd	r24, Y+16	; 0x10
    5300:	88 30       	cpi	r24, 0x08	; 8
    5302:	11 f0       	breq	.+4      	; 0x5308 <_ZN9CMBSender9OnTimeoutEv+0x22>
    5304:	8a e0       	ldi	r24, 0x0A	; 10
    5306:	88 8b       	std	Y+16, r24	; 0x10
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	08 95       	ret

0000530e <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    530e:	0e 94 73 29 	call	0x52e6	; 0x52e6 <_ZN9CMBSender9OnTimeoutEv>
    5312:	08 95       	ret

00005314 <_ZN9CMBSender19StartMODBUSListenerEv>:
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	fc 01       	movw	r30, r24
    531a:	11 8a       	std	Z+17, r1	; 0x11
    531c:	16 82       	std	Z+6, r1	; 0x06
    531e:	14 8a       	std	Z+20, r1	; 0x14
    5320:	15 8a       	std	Z+21, r1	; 0x15
    5322:	16 8a       	std	Z+22, r1	; 0x16
    5324:	17 8a       	std	Z+23, r1	; 0x17
    5326:	10 8a       	std	Z+16, r1	; 0x10
    5328:	86 85       	ldd	r24, Z+14	; 0x0e
    532a:	97 85       	ldd	r25, Z+15	; 0x0f
    532c:	ec 01       	movw	r28, r24
    532e:	a8 81       	ld	r26, Y
    5330:	b9 81       	ldd	r27, Y+1	; 0x01
    5332:	62 89       	ldd	r22, Z+18	; 0x12
    5334:	73 89       	ldd	r23, Z+19	; 0x13
    5336:	12 96       	adiw	r26, 0x02	; 2
    5338:	ed 91       	ld	r30, X+
    533a:	fc 91       	ld	r31, X
    533c:	13 97       	sbiw	r26, 0x03	; 3
    533e:	19 95       	eicall
    5340:	df 91       	pop	r29
    5342:	cf 91       	pop	r28
    5344:	08 95       	ret

00005346 <_ZN9CMBSender14OnTransmitByteEv>:
    5346:	cf 93       	push	r28
    5348:	df 93       	push	r29
    534a:	ec 01       	movw	r28, r24
    534c:	88 8d       	ldd	r24, Y+24	; 0x18
    534e:	84 30       	cpi	r24, 0x04	; 4
    5350:	38 f4       	brcc	.+14     	; 0x5360 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    5352:	82 30       	cpi	r24, 0x02	; 2
    5354:	b8 f5       	brcc	.+110    	; 0x53c4 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    5356:	88 23       	and	r24, r24
    5358:	31 f0       	breq	.+12     	; 0x5366 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    535a:	81 30       	cpi	r24, 0x01	; 1
    535c:	d1 f0       	breq	.+52     	; 0x5392 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    535e:	39 c0       	rjmp	.+114    	; 0x53d2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5360:	85 30       	cpi	r24, 0x05	; 5
    5362:	81 f1       	breq	.+96     	; 0x53c4 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    5364:	36 c0       	rjmp	.+108    	; 0x53d2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	88 8f       	std	Y+24, r24	; 0x18
    536a:	19 8e       	std	Y+25, r1	; 0x19
    536c:	8c 85       	ldd	r24, Y+12	; 0x0c
    536e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5370:	29 8d       	ldd	r18, Y+25	; 0x19
    5372:	dc 01       	movw	r26, r24
    5374:	ed 91       	ld	r30, X+
    5376:	fc 91       	ld	r31, X
    5378:	ac 81       	ldd	r26, Y+4	; 0x04
    537a:	bd 81       	ldd	r27, Y+5	; 0x05
    537c:	a2 0f       	add	r26, r18
    537e:	b1 1d       	adc	r27, r1
    5380:	04 80       	ldd	r0, Z+4	; 0x04
    5382:	f5 81       	ldd	r31, Z+5	; 0x05
    5384:	e0 2d       	mov	r30, r0
    5386:	6c 91       	ld	r22, X
    5388:	19 95       	eicall
    538a:	89 8d       	ldd	r24, Y+25	; 0x19
    538c:	8f 5f       	subi	r24, 0xFF	; 255
    538e:	89 8f       	std	Y+25, r24	; 0x19
    5390:	20 c0       	rjmp	.+64     	; 0x53d2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5392:	8c 85       	ldd	r24, Y+12	; 0x0c
    5394:	9d 85       	ldd	r25, Y+13	; 0x0d
    5396:	29 8d       	ldd	r18, Y+25	; 0x19
    5398:	dc 01       	movw	r26, r24
    539a:	ed 91       	ld	r30, X+
    539c:	fc 91       	ld	r31, X
    539e:	ac 81       	ldd	r26, Y+4	; 0x04
    53a0:	bd 81       	ldd	r27, Y+5	; 0x05
    53a2:	a2 0f       	add	r26, r18
    53a4:	b1 1d       	adc	r27, r1
    53a6:	04 80       	ldd	r0, Z+4	; 0x04
    53a8:	f5 81       	ldd	r31, Z+5	; 0x05
    53aa:	e0 2d       	mov	r30, r0
    53ac:	6c 91       	ld	r22, X
    53ae:	19 95       	eicall
    53b0:	89 8d       	ldd	r24, Y+25	; 0x19
    53b2:	8f 5f       	subi	r24, 0xFF	; 255
    53b4:	89 8f       	std	Y+25, r24	; 0x19
    53b6:	99 8d       	ldd	r25, Y+25	; 0x19
    53b8:	89 85       	ldd	r24, Y+9	; 0x09
    53ba:	98 13       	cpse	r25, r24
    53bc:	0a c0       	rjmp	.+20     	; 0x53d2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    53be:	83 e0       	ldi	r24, 0x03	; 3
    53c0:	88 8f       	std	Y+24, r24	; 0x18
    53c2:	07 c0       	rjmp	.+14     	; 0x53d2 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    53c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    53c6:	88 23       	and	r24, r24
    53c8:	19 f0       	breq	.+6      	; 0x53d0 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    53ca:	ce 01       	movw	r24, r28
    53cc:	0e 94 8a 29 	call	0x5314	; 0x5314 <_ZN9CMBSender19StartMODBUSListenerEv>
    53d0:	1a 8e       	std	Y+26, r1	; 0x1a
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	08 95       	ret

000053d8 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    53d8:	0e 94 a3 29 	call	0x5346	; 0x5346 <_ZN9CMBSender14OnTransmitByteEv>
    53dc:	08 95       	ret

000053de <_ZN9CMBSender18WaitMODBUSListenerEv>:
    53de:	fc 01       	movw	r30, r24
    53e0:	06 c0       	rjmp	.+12     	; 0x53ee <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    53e2:	80 89       	ldd	r24, Z+16	; 0x10
    53e4:	89 30       	cpi	r24, 0x09	; 9
    53e6:	41 f0       	breq	.+16     	; 0x53f8 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    53e8:	80 89       	ldd	r24, Z+16	; 0x10
    53ea:	8a 30       	cpi	r24, 0x0A	; 10
    53ec:	39 f0       	breq	.+14     	; 0x53fc <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    53ee:	80 89       	ldd	r24, Z+16	; 0x10
    53f0:	88 30       	cpi	r24, 0x08	; 8
    53f2:	b9 f7       	brne	.-18     	; 0x53e2 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	08 95       	ret
    53f8:	82 e0       	ldi	r24, 0x02	; 2
    53fa:	08 95       	ret
    53fc:	83 e0       	ldi	r24, 0x03	; 3
    53fe:	08 95       	ret

00005400 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	ec 01       	movw	r28, r24
    5406:	19 8e       	std	Y+25, r1	; 0x19
    5408:	18 8e       	std	Y+24, r1	; 0x18
    540a:	0e 94 a3 29 	call	0x5346	; 0x5346 <_ZN9CMBSender14OnTransmitByteEv>
    540e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5410:	9f 85       	ldd	r25, Y+15	; 0x0f
    5412:	dc 01       	movw	r26, r24
    5414:	ed 91       	ld	r30, X+
    5416:	fc 91       	ld	r31, X
    5418:	6a 89       	ldd	r22, Y+18	; 0x12
    541a:	7b 89       	ldd	r23, Y+19	; 0x13
    541c:	02 80       	ldd	r0, Z+2	; 0x02
    541e:	f3 81       	ldd	r31, Z+3	; 0x03
    5420:	e0 2d       	mov	r30, r0
    5422:	19 95       	eicall
    5424:	df 91       	pop	r29
    5426:	cf 91       	pop	r28
    5428:	08 95       	ret

0000542a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	ec 01       	movw	r28, r24
    5430:	e8 81       	ld	r30, Y
    5432:	f9 81       	ldd	r31, Y+1	; 0x01
    5434:	02 84       	ldd	r0, Z+10	; 0x0a
    5436:	f3 85       	ldd	r31, Z+11	; 0x0b
    5438:	e0 2d       	mov	r30, r0
    543a:	19 95       	eicall
    543c:	ce 01       	movw	r24, r28
    543e:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	08 95       	ret

00005448 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    5448:	cf 93       	push	r28
    544a:	df 93       	push	r29
    544c:	ec 01       	movw	r28, r24
    544e:	e8 81       	ld	r30, Y
    5450:	f9 81       	ldd	r31, Y+1	; 0x01
    5452:	06 84       	ldd	r0, Z+14	; 0x0e
    5454:	f7 85       	ldd	r31, Z+15	; 0x0f
    5456:	e0 2d       	mov	r30, r0
    5458:	19 95       	eicall
    545a:	ce 01       	movw	r24, r28
    545c:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5460:	df 91       	pop	r29
    5462:	cf 91       	pop	r28
    5464:	08 95       	ret

00005466 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    5466:	cf 93       	push	r28
    5468:	df 93       	push	r29
    546a:	ec 01       	movw	r28, r24
    546c:	e8 81       	ld	r30, Y
    546e:	f9 81       	ldd	r31, Y+1	; 0x01
    5470:	04 84       	ldd	r0, Z+12	; 0x0c
    5472:	f5 85       	ldd	r31, Z+13	; 0x0d
    5474:	e0 2d       	mov	r30, r0
    5476:	19 95       	eicall
    5478:	ce 01       	movw	r24, r28
    547a:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    547e:	df 91       	pop	r29
    5480:	cf 91       	pop	r28
    5482:	08 95       	ret

00005484 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	ec 01       	movw	r28, r24
    548a:	e8 81       	ld	r30, Y
    548c:	f9 81       	ldd	r31, Y+1	; 0x01
    548e:	50 e0       	ldi	r21, 0x00	; 0
    5490:	00 88       	ldd	r0, Z+16	; 0x10
    5492:	f1 89       	ldd	r31, Z+17	; 0x11
    5494:	e0 2d       	mov	r30, r0
    5496:	19 95       	eicall
    5498:	ce 01       	movw	r24, r28
    549a:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    549e:	df 91       	pop	r29
    54a0:	cf 91       	pop	r28
    54a2:	08 95       	ret

000054a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    54a4:	fc 01       	movw	r30, r24
    54a6:	06 c0       	rjmp	.+12     	; 0x54b4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    54a8:	80 8d       	ldd	r24, Z+24	; 0x18
    54aa:	84 30       	cpi	r24, 0x04	; 4
    54ac:	41 f0       	breq	.+16     	; 0x54be <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    54ae:	80 8d       	ldd	r24, Z+24	; 0x18
    54b0:	85 30       	cpi	r24, 0x05	; 5
    54b2:	39 f0       	breq	.+14     	; 0x54c2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    54b4:	80 8d       	ldd	r24, Z+24	; 0x18
    54b6:	83 30       	cpi	r24, 0x03	; 3
    54b8:	b9 f7       	brne	.-18     	; 0x54a8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    54ba:	81 e0       	ldi	r24, 0x01	; 1
    54bc:	08 95       	ret
    54be:	82 e0       	ldi	r24, 0x02	; 2
    54c0:	08 95       	ret
    54c2:	83 e0       	ldi	r24, 0x03	; 3
    54c4:	08 95       	ret

000054c6 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    54c6:	21 e0       	ldi	r18, 0x01	; 1
    54c8:	fc 01       	movw	r30, r24
    54ca:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    54cc:	0e 94 33 2a 	call	0x5466	; 0x5466 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    54d0:	08 95       	ret

000054d2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    54d2:	21 e0       	ldi	r18, 0x01	; 1
    54d4:	fc 01       	movw	r30, r24
    54d6:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    54d8:	0e 94 42 2a 	call	0x5484	; 0x5484 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    54dc:	08 95       	ret

000054de <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    54de:	0f 93       	push	r16
    54e0:	1f 93       	push	r17
    54e2:	cf 93       	push	r28
    54e4:	df 93       	push	r29
    54e6:	8c 01       	movw	r16, r24
    54e8:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    54ea:	98 81       	ld	r25, Y
    54ec:	91 38       	cpi	r25, 0x81	; 129
    54ee:	69 f4       	brne	.+26     	; 0x550a <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    54f0:	d8 01       	movw	r26, r16
    54f2:	ed 91       	ld	r30, X+
    54f4:	fc 91       	ld	r31, X
    54f6:	04 80       	ldd	r0, Z+4	; 0x04
    54f8:	f5 81       	ldd	r31, Z+5	; 0x05
    54fa:	e0 2d       	mov	r30, r0
    54fc:	2a 81       	ldd	r18, Y+2	; 0x02
    54fe:	ab 01       	movw	r20, r22
    5500:	4d 5f       	subi	r20, 0xFD	; 253
    5502:	5f 4f       	sbci	r21, 0xFF	; 255
    5504:	69 81       	ldd	r22, Y+1	; 0x01
    5506:	c8 01       	movw	r24, r16
    5508:	19 95       	eicall
	}
	if (data[0] == 0x83)
    550a:	98 81       	ld	r25, Y
    550c:	93 38       	cpi	r25, 0x83	; 131
    550e:	99 f4       	brne	.+38     	; 0x5536 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5510:	d8 01       	movw	r26, r16
    5512:	ed 91       	ld	r30, X+
    5514:	fc 91       	ld	r31, X
    5516:	2b 81       	ldd	r18, Y+3	; 0x03
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	ae 01       	movw	r20, r28
    551c:	4c 5f       	subi	r20, 0xFC	; 252
    551e:	5f 4f       	sbci	r21, 0xFF	; 255
    5520:	69 81       	ldd	r22, Y+1	; 0x01
    5522:	70 e0       	ldi	r23, 0x00	; 0
    5524:	76 2f       	mov	r23, r22
    5526:	66 27       	eor	r22, r22
    5528:	8a 81       	ldd	r24, Y+2	; 0x02
    552a:	68 2b       	or	r22, r24
    552c:	02 80       	ldd	r0, Z+2	; 0x02
    552e:	f3 81       	ldd	r31, Z+3	; 0x03
    5530:	e0 2d       	mov	r30, r0
    5532:	c8 01       	movw	r24, r16
    5534:	19 95       	eicall
	}
}
    5536:	df 91       	pop	r29
    5538:	cf 91       	pop	r28
    553a:	1f 91       	pop	r17
    553c:	0f 91       	pop	r16
    553e:	08 95       	ret

00005540 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    5540:	0e 94 6f 2a 	call	0x54de	; 0x54de <_ZN9CMBSender18ProcessTransactionEPhj>
    5544:	08 95       	ret

00005546 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    5546:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    5548:	e0 e6       	ldi	r30, 0x60	; 96
    554a:	f6 e0       	ldi	r31, 0x06	; 6
    554c:	88 e0       	ldi	r24, 0x08	; 8
    554e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    5550:	84 e0       	ldi	r24, 0x04	; 4
    5552:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    5554:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    5556:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    5558:	e0 ea       	ldi	r30, 0xA0	; 160
    555a:	f9 e0       	ldi	r31, 0x09	; 9
    555c:	84 e1       	ldi	r24, 0x14	; 20
    555e:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    5560:	88 e1       	ldi	r24, 0x18	; 24
    5562:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    5564:	84 81       	ldd	r24, Z+4	; 0x04
    5566:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    5568:	41 30       	cpi	r20, 0x01	; 1
    556a:	19 f0       	breq	.+6      	; 0x5572 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    556c:	42 30       	cpi	r20, 0x02	; 2
    556e:	19 f0       	breq	.+6      	; 0x5576 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    5570:	04 c0       	rjmp	.+8      	; 0x557a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    5572:	80 e2       	ldi	r24, 0x20	; 32
    5574:	03 c0       	rjmp	.+6      	; 0x557c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    5576:	80 e3       	ldi	r24, 0x30	; 48
		break;
    5578:	01 c0       	rjmp	.+2      	; 0x557c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    557a:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    557c:	22 23       	and	r18, r18
    557e:	19 f0       	breq	.+6      	; 0x5586 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    5580:	21 30       	cpi	r18, 0x01	; 1
    5582:	19 f0       	breq	.+6      	; 0x558a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    5584:	03 c0       	rjmp	.+6      	; 0x558c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    5586:	87 7f       	andi	r24, 0xF7	; 247
		break;
    5588:	01 c0       	rjmp	.+2      	; 0x558c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    558a:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    558c:	01 11       	cpse	r16, r1
    558e:	02 c0       	rjmp	.+4      	; 0x5594 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    5590:	93 e4       	ldi	r25, 0x43	; 67
    5592:	01 c0       	rjmp	.+2      	; 0x5596 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    5594:	93 e0       	ldi	r25, 0x03	; 3
    5596:	89 2b       	or	r24, r25
    5598:	e0 ea       	ldi	r30, 0xA0	; 160
    559a:	f9 e0       	ldi	r31, 0x09	; 9
    559c:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    559e:	70 e0       	ldi	r23, 0x00	; 0
    55a0:	db 01       	movw	r26, r22
    55a2:	a0 59       	subi	r26, 0x90	; 144
    55a4:	be 4d       	sbci	r27, 0xDE	; 222
    55a6:	8c 91       	ld	r24, X
    55a8:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    55aa:	db 01       	movw	r26, r22
    55ac:	a0 5b       	subi	r26, 0xB0	; 176
    55ae:	be 4d       	sbci	r27, 0xDE	; 222
    55b0:	8c 91       	ld	r24, X
    55b2:	82 95       	swap	r24
    55b4:	80 7f       	andi	r24, 0xF0	; 240
    55b6:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    55b8:	0f 91       	pop	r16
    55ba:	08 95       	ret

000055bc <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    55bc:	80 91 a0 09 	lds	r24, 0x09A0
}
    55c0:	08 95       	ret

000055c2 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    55c2:	60 93 a0 09 	sts	0x09A0, r22
    55c6:	08 95       	ret

000055c8 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    55c8:	80 91 a1 09 	lds	r24, 0x09A1
    55cc:	86 fb       	bst	r24, 6
    55ce:	88 27       	eor	r24, r24
    55d0:	80 f9       	bld	r24, 0
}
    55d2:	91 e0       	ldi	r25, 0x01	; 1
    55d4:	89 27       	eor	r24, r25
    55d6:	08 95       	ret

000055d8 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    55d8:	80 91 a1 09 	lds	r24, 0x09A1
    55dc:	80 95       	com	r24
}
    55de:	88 1f       	adc	r24, r24
    55e0:	88 27       	eor	r24, r24
    55e2:	88 1f       	adc	r24, r24
    55e4:	08 95       	ret

000055e6 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    55e6:	80 91 a1 09 	lds	r24, 0x09A1
    55ea:	85 fb       	bst	r24, 5
    55ec:	88 27       	eor	r24, r24
    55ee:	80 f9       	bld	r24, 0
}
    55f0:	91 e0       	ldi	r25, 0x01	; 1
    55f2:	89 27       	eor	r24, r25
    55f4:	08 95       	ret

000055f6 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    55f6:	60 93 8a 24 	sts	0x248A, r22
    55fa:	70 93 8b 24 	sts	0x248B, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    55fe:	40 93 94 23 	sts	0x2394, r20
    5602:	50 93 95 23 	sts	0x2395, r21
    5606:	08 95       	ret

00005608 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    5608:	60 93 8e 24 	sts	0x248E, r22
    560c:	70 93 8f 24 	sts	0x248F, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    5610:	40 93 98 23 	sts	0x2398, r20
    5614:	50 93 99 23 	sts	0x2399, r21
    5618:	08 95       	ret

0000561a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    561a:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    561c:	8b e6       	ldi	r24, 0x6B	; 107
    561e:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    5620:	80 ea       	ldi	r24, 0xA0	; 160
    5622:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    5624:	89 e0       	ldi	r24, 0x09	; 9
    5626:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    5628:	12 86       	std	Z+10, r1	; 0x0a
    562a:	08 95       	ret

0000562c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    562c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    562e:	8c e6       	ldi	r24, 0x6C	; 108
    5630:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    5632:	80 ea       	ldi	r24, 0xA0	; 160
    5634:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    5636:	89 e0       	ldi	r24, 0x09	; 9
    5638:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    563a:	16 86       	std	Z+14, r1	; 0x0e
    563c:	08 95       	ret

0000563e <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    563e:	cf 93       	push	r28
    5640:	df 93       	push	r29
    5642:	ec 01       	movw	r28, r24
    5644:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN6CUSARTC1Ev>
    5648:	8a e1       	ldi	r24, 0x1A	; 26
    564a:	92 e2       	ldi	r25, 0x22	; 34
    564c:	88 83       	st	Y, r24
    564e:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    5650:	df 91       	pop	r29
    5652:	cf 91       	pop	r28
    5654:	08 95       	ret

00005656 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    5656:	2a e1       	ldi	r18, 0x1A	; 26
    5658:	32 e2       	ldi	r19, 0x22	; 34
    565a:	fc 01       	movw	r30, r24
    565c:	20 83       	st	Z, r18
    565e:	31 83       	std	Z+1, r19	; 0x01
    5660:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN6CUSARTD1Ev>
    5664:	08 95       	ret

00005666 <_ZN8CDS18B20C1Ev>:
#define F_CPU	32000000

#include <util/delay.h>

// default constructor
CDS18B20::CDS18B20()
    5666:	08 95       	ret

00005668 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    5668:	08 95       	ret

0000566a <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    566a:	e0 e6       	ldi	r30, 0x60	; 96
    566c:	f6 e0       	ldi	r31, 0x06	; 6
    566e:	80 e8       	ldi	r24, 0x80	; 128
    5670:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5672:	a7 e2       	ldi	r26, 0x27	; 39
    5674:	bf e0       	ldi	r27, 0x0F	; 15
    5676:	11 97       	sbiw	r26, 0x01	; 1
    5678:	f1 f7       	brne	.-4      	; 0x5676 <_ZN8CDS18B207w1_findEv+0xc>
    567a:	00 c0       	rjmp	.+0      	; 0x567c <_ZN8CDS18B207w1_findEv+0x12>
    567c:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    567e:	82 83       	std	Z+2, r24	; 0x02
    5680:	87 e0       	ldi	r24, 0x07	; 7
    5682:	92 e0       	ldi	r25, 0x02	; 2
    5684:	01 97       	sbiw	r24, 0x01	; 1
    5686:	f1 f7       	brne	.-4      	; 0x5684 <_ZN8CDS18B207w1_findEv+0x1a>
    5688:	00 c0       	rjmp	.+0      	; 0x568a <_ZN8CDS18B207w1_findEv+0x20>
    568a:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    568c:	80 85       	ldd	r24, Z+8	; 0x08
    568e:	af e1       	ldi	r26, 0x1F	; 31
    5690:	bd e0       	ldi	r27, 0x0D	; 13
    5692:	11 97       	sbiw	r26, 0x01	; 1
    5694:	f1 f7       	brne	.-4      	; 0x5692 <_ZN8CDS18B207w1_findEv+0x28>
    5696:	00 c0       	rjmp	.+0      	; 0x5698 <_ZN8CDS18B207w1_findEv+0x2e>
    5698:	00 00       	nop
    569a:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    569c:	88 1f       	adc	r24, r24
    569e:	88 27       	eor	r24, r24
    56a0:	88 1f       	adc	r24, r24
    56a2:	08 95       	ret

000056a4 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    56a4:	cf 93       	push	r28
    56a6:	df 93       	push	r29
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    56ac:	c1 e0       	ldi	r28, 0x01	; 1
    56ae:	d0 e0       	ldi	r29, 0x00	; 0
    56b0:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    56b2:	e0 e6       	ldi	r30, 0x60	; 96
    56b4:	f6 e0       	ldi	r31, 0x06	; 6
    56b6:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    56b8:	9e 01       	movw	r18, r28
    56ba:	08 2e       	mov	r0, r24
    56bc:	02 c0       	rjmp	.+4      	; 0x56c2 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    56be:	22 0f       	add	r18, r18
    56c0:	33 1f       	adc	r19, r19
    56c2:	0a 94       	dec	r0
    56c4:	e2 f7       	brpl	.-8      	; 0x56be <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    56c6:	d9 01       	movw	r26, r18
    56c8:	a6 23       	and	r26, r22
    56ca:	b7 23       	and	r27, r23
    56cc:	2a 17       	cp	r18, r26
    56ce:	3b 07       	cpc	r19, r27
    56d0:	69 f4       	brne	.+26     	; 0x56ec <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    56d2:	41 83       	std	Z+1, r20	; 0x01
    56d4:	25 e1       	ldi	r18, 0x15	; 21
    56d6:	2a 95       	dec	r18
    56d8:	f1 f7       	brne	.-4      	; 0x56d6 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    56da:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    56dc:	42 83       	std	Z+2, r20	; 0x02
    56de:	a7 e0       	ldi	r26, 0x07	; 7
    56e0:	b2 e0       	ldi	r27, 0x02	; 2
    56e2:	11 97       	sbiw	r26, 0x01	; 1
    56e4:	f1 f7       	brne	.-4      	; 0x56e2 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    56e6:	00 c0       	rjmp	.+0      	; 0x56e8 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    56e8:	00 00       	nop
    56ea:	0c c0       	rjmp	.+24     	; 0x5704 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    56ec:	41 83       	std	Z+1, r20	; 0x01
    56ee:	a7 e0       	ldi	r26, 0x07	; 7
    56f0:	b2 e0       	ldi	r27, 0x02	; 2
    56f2:	11 97       	sbiw	r26, 0x01	; 1
    56f4:	f1 f7       	brne	.-4      	; 0x56f2 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    56f6:	00 c0       	rjmp	.+0      	; 0x56f8 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    56f8:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    56fa:	42 83       	std	Z+2, r20	; 0x02
    56fc:	b5 e3       	ldi	r27, 0x35	; 53
    56fe:	ba 95       	dec	r27
    5700:	f1 f7       	brne	.-4      	; 0x56fe <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    5702:	00 00       	nop
    5704:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    5706:	88 30       	cpi	r24, 0x08	; 8
    5708:	91 05       	cpc	r25, r1
    570a:	b1 f6       	brne	.-84     	; 0x56b8 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    570c:	df 91       	pop	r29
    570e:	cf 91       	pop	r28
    5710:	08 95       	ret

00005712 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    5716:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    5718:	e0 e6       	ldi	r30, 0x60	; 96
    571a:	f6 e0       	ldi	r31, 0x06	; 6
    571c:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    571e:	61 e0       	ldi	r22, 0x01	; 1
    5720:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	45 e1       	ldi	r20, 0x15	; 21
    5726:	4a 95       	dec	r20
    5728:	f1 f7       	brne	.-4      	; 0x5726 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    572a:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    572c:	92 83       	std	Z+2, r25	; 0x02
    572e:	aa e6       	ldi	r26, 0x6A	; 106
    5730:	aa 95       	dec	r26
    5732:	f1 f7       	brne	.-4      	; 0x5730 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    5734:	00 c0       	rjmp	.+0      	; 0x5736 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    5736:	40 85       	ldd	r20, Z+8	; 0x08
    5738:	44 23       	and	r20, r20
    573a:	54 f0       	brlt	.+20     	; 0x5750 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    573c:	ab 01       	movw	r20, r22
    573e:	02 2e       	mov	r0, r18
    5740:	02 c0       	rjmp	.+4      	; 0x5746 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    5742:	44 0f       	add	r20, r20
    5744:	55 1f       	adc	r21, r21
    5746:	0a 94       	dec	r0
    5748:	e2 f7       	brpl	.-8      	; 0x5742 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    574a:	40 95       	com	r20
    574c:	84 23       	and	r24, r20
    574e:	08 c0       	rjmp	.+16     	; 0x5760 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    5750:	ab 01       	movw	r20, r22
    5752:	02 2e       	mov	r0, r18
    5754:	02 c0       	rjmp	.+4      	; 0x575a <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    5756:	44 0f       	add	r20, r20
    5758:	55 1f       	adc	r21, r21
    575a:	0a 94       	dec	r0
    575c:	e2 f7       	brpl	.-8      	; 0x5756 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    575e:	84 2b       	or	r24, r20
    5760:	af e8       	ldi	r26, 0x8F	; 143
    5762:	b1 e0       	ldi	r27, 0x01	; 1
    5764:	11 97       	sbiw	r26, 0x01	; 1
    5766:	f1 f7       	brne	.-4      	; 0x5764 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    5768:	00 c0       	rjmp	.+0      	; 0x576a <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    576a:	00 00       	nop
    576c:	2f 5f       	subi	r18, 0xFF	; 255
    576e:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    5770:	28 30       	cpi	r18, 0x08	; 8
    5772:	31 05       	cpc	r19, r1
    5774:	b1 f6       	brne	.-84     	; 0x5722 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    5776:	08 95       	ret

00005778 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	ec 01       	movw	r28, r24
	unsigned char data[2];
	int temp = 0;
	
	if (req)
    5780:	8a 81       	ldd	r24, Y+2	; 0x02
    5782:	88 23       	and	r24, r24
    5784:	91 f0       	breq	.+36     	; 0x57aa <_ZN8CDS18B2010temp_18b20Ev+0x32>
	{
		if(w1_find())
    5786:	ce 01       	movw	r24, r28
    5788:	0e 94 35 2b 	call	0x566a	; 0x566a <_ZN8CDS18B207w1_findEv>
    578c:	88 23       	and	r24, r24
    578e:	59 f0       	breq	.+22     	; 0x57a6 <_ZN8CDS18B2010temp_18b20Ev+0x2e>
		{
			w1_sendcmd(0xcc);	//skip ROM
    5790:	6c ec       	ldi	r22, 0xCC	; 204
    5792:	ce 01       	movw	r24, r28
    5794:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    5798:	64 e4       	ldi	r22, 0x44	; 68
    579a:	ce 01       	movw	r24, r28
    579c:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	8b 83       	std	Y+3, r24	; 0x03
    57a4:	2a c0       	rjmp	.+84     	; 0x57fa <_ZN8CDS18B2010temp_18b20Ev+0x82>
		}
		else
			find = false;
    57a6:	1b 82       	std	Y+3, r1	; 0x03
    57a8:	28 c0       	rjmp	.+80     	; 0x57fa <_ZN8CDS18B2010temp_18b20Ev+0x82>
	}
	else
	{
		if (find)
    57aa:	8b 81       	ldd	r24, Y+3	; 0x03
    57ac:	88 23       	and	r24, r24
    57ae:	29 f1       	breq	.+74     	; 0x57fa <_ZN8CDS18B2010temp_18b20Ev+0x82>
		{
			w1_find();
    57b0:	ce 01       	movw	r24, r28
    57b2:	0e 94 35 2b 	call	0x566a	; 0x566a <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    57b6:	6c ec       	ldi	r22, 0xCC	; 204
    57b8:	ce 01       	movw	r24, r28
    57ba:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    57be:	6e eb       	ldi	r22, 0xBE	; 190
    57c0:	ce 01       	movw	r24, r28
    57c2:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN8CDS18B2010w1_sendcmdEh>
			data[0] = w1_receive_byte();
    57c6:	ce 01       	movw	r24, r28
    57c8:	0e 94 89 2b 	call	0x5712	; 0x5712 <_ZN8CDS18B2015w1_receive_byteEv>
    57cc:	18 2f       	mov	r17, r24
			data[1] = w1_receive_byte();
    57ce:	ce 01       	movw	r24, r28
    57d0:	0e 94 89 2b 	call	0x5712	; 0x5712 <_ZN8CDS18B2015w1_receive_byteEv>
			
			temp = data[1];
			temp = temp<<8;
    57d4:	61 2f       	mov	r22, r17
    57d6:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    57d8:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    57da:	07 2e       	mov	r0, r23
    57dc:	00 0c       	add	r0, r0
    57de:	88 0b       	sbc	r24, r24
    57e0:	99 0b       	sbc	r25, r25
    57e2:	0e 94 bd 31 	call	0x637a	; 0x637a <__floatsisf>
    57e6:	20 e0       	ldi	r18, 0x00	; 0
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	40 e2       	ldi	r20, 0x20	; 32
    57ec:	5f e3       	ldi	r21, 0x3F	; 63
    57ee:	0e 94 21 32 	call	0x6442	; 0x6442 <__mulsf3>
    57f2:	0e 94 85 31 	call	0x630a	; 0x630a <__fixsfsi>
    57f6:	68 83       	st	Y, r22
    57f8:	79 83       	std	Y+1, r23	; 0x01
			
			temperature = temp;
		}
	}
	
	req = !req;
    57fa:	9a 81       	ldd	r25, Y+2	; 0x02
    57fc:	81 e0       	ldi	r24, 0x01	; 1
    57fe:	89 27       	eor	r24, r25
    5800:	8a 83       	std	Y+2, r24	; 0x02
	
	return temperature;
}
    5802:	88 81       	ld	r24, Y
    5804:	99 81       	ldd	r25, Y+1	; 0x01
    5806:	df 91       	pop	r29
    5808:	cf 91       	pop	r28
    580a:	1f 91       	pop	r17
    580c:	08 95       	ret

0000580e <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    580e:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    5810:	a0 e6       	ldi	r26, 0x60	; 96
    5812:	b6 e0       	ldi	r27, 0x06	; 6
    5814:	80 e8       	ldi	r24, 0x80	; 128
    5816:	16 96       	adiw	r26, 0x06	; 6
    5818:	8c 93       	st	X, r24
    581a:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    581c:	57 96       	adiw	r26, 0x17	; 23
    581e:	1c 92       	st	X, r1
	
	temperature = 0;
    5820:	10 82       	st	Z, r1
    5822:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    5824:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	82 83       	std	Z+2, r24	; 0x02
    582a:	08 95       	ret

0000582c <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    582c:	08 95       	ret

0000582e <_ZN11CLaserBoardD1Ev>:
    582e:	08 95       	ret

00005830 <_ZN11CLaserBoard12InitializeIOEv>:
    5830:	cf 93       	push	r28
    5832:	df 93       	push	r29
    5834:	ec 01       	movw	r28, r24
    5836:	e0 e4       	ldi	r30, 0x40	; 64
    5838:	f6 e0       	ldi	r31, 0x06	; 6
    583a:	11 82       	std	Z+1, r1	; 0x01
    583c:	88 ea       	ldi	r24, 0xA8	; 168
    583e:	80 8b       	std	Z+16, r24	; 0x10
    5840:	20 e8       	ldi	r18, 0x80	; 128
    5842:	21 8b       	std	Z+17, r18	; 0x11
    5844:	22 8b       	std	Z+18, r18	; 0x12
    5846:	23 8b       	std	Z+19, r18	; 0x13
    5848:	84 8b       	std	Z+20, r24	; 0x14
    584a:	85 8b       	std	Z+21, r24	; 0x15
    584c:	86 8b       	std	Z+22, r24	; 0x16
    584e:	87 8b       	std	Z+23, r24	; 0x17
    5850:	8f ef       	ldi	r24, 0xFF	; 255
    5852:	84 83       	std	Z+4, r24	; 0x04
    5854:	a0 e8       	ldi	r26, 0x80	; 128
    5856:	b6 e0       	ldi	r27, 0x06	; 6
    5858:	98 e0       	ldi	r25, 0x08	; 8
    585a:	11 96       	adiw	r26, 0x01	; 1
    585c:	9c 93       	st	X, r25
    585e:	11 97       	sbiw	r26, 0x01	; 1
    5860:	53 96       	adiw	r26, 0x13	; 19
    5862:	1c 92       	st	X, r1
    5864:	53 97       	sbiw	r26, 0x13	; 19
    5866:	14 96       	adiw	r26, 0x04	; 4
    5868:	1c 92       	st	X, r1
    586a:	14 97       	sbiw	r26, 0x04	; 4
    586c:	e0 ea       	ldi	r30, 0xA0	; 160
    586e:	f6 e0       	ldi	r31, 0x06	; 6
    5870:	90 ec       	ldi	r25, 0xC0	; 192
    5872:	90 8b       	std	Z+16, r25	; 0x10
    5874:	91 8b       	std	Z+17, r25	; 0x11
    5876:	92 8b       	std	Z+18, r25	; 0x12
    5878:	93 8b       	std	Z+19, r25	; 0x13
    587a:	94 8b       	std	Z+20, r25	; 0x14
    587c:	95 8b       	std	Z+21, r25	; 0x15
    587e:	96 8b       	std	Z+22, r25	; 0x16
    5880:	97 8b       	std	Z+23, r25	; 0x17
    5882:	14 82       	std	Z+4, r1	; 0x04
    5884:	81 83       	std	Z+1, r24	; 0x01
    5886:	e0 e6       	ldi	r30, 0x60	; 96
    5888:	f6 e0       	ldi	r31, 0x06	; 6
    588a:	81 e1       	ldi	r24, 0x11	; 17
    588c:	81 83       	std	Z+1, r24	; 0x01
    588e:	90 8b       	std	Z+16, r25	; 0x10
    5890:	94 8b       	std	Z+20, r25	; 0x14
    5892:	15 8a       	std	Z+21, r1	; 0x15
    5894:	14 82       	std	Z+4, r1	; 0x04
    5896:	87 e0       	ldi	r24, 0x07	; 7
    5898:	11 96       	adiw	r26, 0x01	; 1
    589a:	8c 93       	st	X, r24
    589c:	11 97       	sbiw	r26, 0x01	; 1
    589e:	50 96       	adiw	r26, 0x10	; 16
    58a0:	2c 93       	st	X, r18
    58a2:	50 97       	sbiw	r26, 0x10	; 16
    58a4:	51 96       	adiw	r26, 0x11	; 17
    58a6:	2c 93       	st	X, r18
    58a8:	51 97       	sbiw	r26, 0x11	; 17
    58aa:	52 96       	adiw	r26, 0x12	; 18
    58ac:	2c 93       	st	X, r18
    58ae:	52 97       	sbiw	r26, 0x12	; 18
    58b0:	14 96       	adiw	r26, 0x04	; 4
    58b2:	1c 92       	st	X, r1
    58b4:	e0 ea       	ldi	r30, 0xA0	; 160
    58b6:	f0 e0       	ldi	r31, 0x00	; 0
    58b8:	82 81       	ldd	r24, Z+2	; 0x02
    58ba:	81 60       	ori	r24, 0x01	; 1
    58bc:	82 83       	std	Z+2, r24	; 0x02
    58be:	82 81       	ldd	r24, Z+2	; 0x02
    58c0:	82 60       	ori	r24, 0x02	; 2
    58c2:	82 83       	std	Z+2, r24	; 0x02
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	84 60       	ori	r24, 0x04	; 4
    58c8:	82 83       	std	Z+2, r24	; 0x02
    58ca:	fe 01       	movw	r30, r28
    58cc:	9e 01       	movw	r18, r28
    58ce:	28 5f       	subi	r18, 0xF8	; 248
    58d0:	3f 4f       	sbci	r19, 0xFF	; 255
    58d2:	91 e0       	ldi	r25, 0x01	; 1
    58d4:	91 93       	st	Z+, r25
    58d6:	e2 17       	cp	r30, r18
    58d8:	f3 07       	cpc	r31, r19
    58da:	e1 f7       	brne	.-8      	; 0x58d4 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    58dc:	83 e0       	ldi	r24, 0x03	; 3
    58de:	88 87       	std	Y+8, r24	; 0x08
    58e0:	e0 e4       	ldi	r30, 0x40	; 64
    58e2:	f6 e0       	ldi	r31, 0x06	; 6
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	82 87       	std	Z+10, r24	; 0x0a
    58e8:	81 87       	std	Z+9, r24	; 0x09
    58ea:	df 91       	pop	r29
    58ec:	cf 91       	pop	r28
    58ee:	08 95       	ret

000058f0 <_ZN11CLaserBoard15InitializeClockEv>:
    58f0:	e0 e5       	ldi	r30, 0x50	; 80
    58f2:	f0 e0       	ldi	r31, 0x00	; 0
    58f4:	8b ec       	ldi	r24, 0xCB	; 203
    58f6:	82 83       	std	Z+2, r24	; 0x02
    58f8:	80 81       	ld	r24, Z
    58fa:	88 60       	ori	r24, 0x08	; 8
    58fc:	80 83       	st	Z, r24
    58fe:	81 81       	ldd	r24, Z+1	; 0x01
    5900:	83 ff       	sbrs	r24, 3
    5902:	fd cf       	rjmp	.-6      	; 0x58fe <_ZN11CLaserBoard15InitializeClockEv+0xe>
    5904:	e0 e5       	ldi	r30, 0x50	; 80
    5906:	f0 e0       	ldi	r31, 0x00	; 0
    5908:	85 81       	ldd	r24, Z+5	; 0x05
    590a:	98 ed       	ldi	r25, 0xD8	; 216
    590c:	94 bf       	out	0x34, r25	; 52
    590e:	84 ec       	ldi	r24, 0xC4	; 196
    5910:	85 83       	std	Z+5, r24	; 0x05
    5912:	80 81       	ld	r24, Z
    5914:	80 61       	ori	r24, 0x10	; 16
    5916:	80 83       	st	Z, r24
    5918:	e0 e4       	ldi	r30, 0x40	; 64
    591a:	f0 e0       	ldi	r31, 0x00	; 0
    591c:	81 81       	ldd	r24, Z+1	; 0x01
    591e:	94 bf       	out	0x34, r25	; 52
    5920:	11 82       	std	Z+1, r1	; 0x01
    5922:	e0 e5       	ldi	r30, 0x50	; 80
    5924:	f0 e0       	ldi	r31, 0x00	; 0
    5926:	81 81       	ldd	r24, Z+1	; 0x01
    5928:	84 ff       	sbrs	r24, 4
    592a:	fd cf       	rjmp	.-6      	; 0x5926 <_ZN11CLaserBoard15InitializeClockEv+0x36>
    592c:	e0 e4       	ldi	r30, 0x40	; 64
    592e:	f0 e0       	ldi	r31, 0x00	; 0
    5930:	80 81       	ld	r24, Z
    5932:	88 7f       	andi	r24, 0xF8	; 248
    5934:	84 60       	ori	r24, 0x04	; 4
    5936:	98 ed       	ldi	r25, 0xD8	; 216
    5938:	94 bf       	out	0x34, r25	; 52
    593a:	80 83       	st	Z, r24
    593c:	a0 e5       	ldi	r26, 0x50	; 80
    593e:	b0 e0       	ldi	r27, 0x00	; 0
    5940:	8c 91       	ld	r24, X
    5942:	88 7f       	andi	r24, 0xF8	; 248
    5944:	8c 93       	st	X, r24
    5946:	82 81       	ldd	r24, Z+2	; 0x02
    5948:	94 bf       	out	0x34, r25	; 52
    594a:	81 e0       	ldi	r24, 0x01	; 1
    594c:	82 83       	std	Z+2, r24	; 0x02
    594e:	e0 eb       	ldi	r30, 0xB0	; 176
    5950:	f0 e0       	ldi	r31, 0x00	; 0
    5952:	84 81       	ldd	r24, Z+4	; 0x04
    5954:	8c 7f       	andi	r24, 0xFC	; 252
    5956:	84 83       	std	Z+4, r24	; 0x04
    5958:	08 95       	ret

0000595a <_ZN11CLaserBoard5PWMOnEv>:
    595a:	84 e0       	ldi	r24, 0x04	; 4
    595c:	80 93 85 06 	sts	0x0685, r24
    5960:	08 95       	ret

00005962 <_ZN11CLaserBoard6PWMOffEv>:
    5962:	84 e0       	ldi	r24, 0x04	; 4
    5964:	80 93 86 06 	sts	0x0686, r24
    5968:	08 95       	ret

0000596a <_ZN11CLaserBoard5REDOnEv>:
    596a:	82 e0       	ldi	r24, 0x02	; 2
    596c:	80 93 a5 06 	sts	0x06A5, r24
    5970:	08 95       	ret

00005972 <_ZN11CLaserBoard6REDOffEv>:
    5972:	82 e0       	ldi	r24, 0x02	; 2
    5974:	80 93 a6 06 	sts	0x06A6, r24
    5978:	08 95       	ret

0000597a <_ZN11CLaserBoard5GRNOnEv>:
    597a:	84 e0       	ldi	r24, 0x04	; 4
    597c:	80 93 a5 06 	sts	0x06A5, r24
    5980:	08 95       	ret

00005982 <_ZN11CLaserBoard6GRNOffEv>:
    5982:	84 e0       	ldi	r24, 0x04	; 4
    5984:	80 93 a6 06 	sts	0x06A6, r24
    5988:	08 95       	ret

0000598a <_ZN11CLaserBoard5BLUOnEv>:
    598a:	88 e0       	ldi	r24, 0x08	; 8
    598c:	80 93 a5 06 	sts	0x06A5, r24
    5990:	08 95       	ret

00005992 <_ZN11CLaserBoard6BLUOffEv>:
    5992:	88 e0       	ldi	r24, 0x08	; 8
    5994:	80 93 a6 06 	sts	0x06A6, r24
    5998:	08 95       	ret

0000599a <_ZN11CLaserBoard8Relay1OnEv>:
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	80 93 62 06 	sts	0x0662, r24
    59a0:	08 95       	ret

000059a2 <_ZN11CLaserBoard8Relay2OnEv>:
    59a2:	80 e1       	ldi	r24, 0x10	; 16
    59a4:	80 93 62 06 	sts	0x0662, r24
    59a8:	08 95       	ret

000059aa <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    59aa:	80 e1       	ldi	r24, 0x10	; 16
    59ac:	80 93 61 06 	sts	0x0661, r24
    59b0:	08 95       	ret

000059b2 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    59b2:	82 e0       	ldi	r24, 0x02	; 2
    59b4:	80 93 85 06 	sts	0x0685, r24
    59b8:	08 95       	ret

000059ba <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    59ba:	82 e0       	ldi	r24, 0x02	; 2
    59bc:	80 93 86 06 	sts	0x0686, r24
    59c0:	08 95       	ret

000059c2 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    59c2:	f8 94       	cli
    59c4:	84 e6       	ldi	r24, 0x64	; 100
    59c6:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    59c8:	e0 e8       	ldi	r30, 0x80	; 128
    59ca:	f6 e0       	ldi	r31, 0x06	; 6
    59cc:	28 e0       	ldi	r18, 0x08	; 8
    59ce:	25 83       	std	Z+5, r18	; 0x05
    59d0:	af e9       	ldi	r26, 0x9F	; 159
    59d2:	bf e0       	ldi	r27, 0x0F	; 15
    59d4:	11 97       	sbiw	r26, 0x01	; 1
    59d6:	f1 f7       	brne	.-4      	; 0x59d4 <_ZN11CLaserBoard4BeepEv+0x12>
    59d8:	00 c0       	rjmp	.+0      	; 0x59da <_ZN11CLaserBoard4BeepEv+0x18>
    59da:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    59dc:	26 83       	std	Z+6, r18	; 0x06
    59de:	af e9       	ldi	r26, 0x9F	; 159
    59e0:	bf e0       	ldi	r27, 0x0F	; 15
    59e2:	11 97       	sbiw	r26, 0x01	; 1
    59e4:	f1 f7       	brne	.-4      	; 0x59e2 <_ZN11CLaserBoard4BeepEv+0x20>
    59e6:	00 c0       	rjmp	.+0      	; 0x59e8 <_ZN11CLaserBoard4BeepEv+0x26>
    59e8:	00 00       	nop
    59ea:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    59ec:	81 f7       	brne	.-32     	; 0x59ce <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    59ee:	78 94       	sei
    59f0:	08 95       	ret

000059f2 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    59f2:	f8 94       	cli
    59f4:	45 e0       	ldi	r20, 0x05	; 5
    59f6:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    59f8:	64 e6       	ldi	r22, 0x64	; 100
    59fa:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    59fc:	e0 e8       	ldi	r30, 0x80	; 128
    59fe:	f6 e0       	ldi	r31, 0x06	; 6
    5a00:	28 e0       	ldi	r18, 0x08	; 8
    5a02:	1c c0       	rjmp	.+56     	; 0x5a3c <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    5a04:	25 83       	std	Z+5, r18	; 0x05
    5a06:	af e9       	ldi	r26, 0x9F	; 159
    5a08:	bf e0       	ldi	r27, 0x0F	; 15
    5a0a:	11 97       	sbiw	r26, 0x01	; 1
    5a0c:	f1 f7       	brne	.-4      	; 0x5a0a <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    5a0e:	00 c0       	rjmp	.+0      	; 0x5a10 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    5a10:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    5a12:	26 83       	std	Z+6, r18	; 0x06
    5a14:	af e9       	ldi	r26, 0x9F	; 159
    5a16:	bf e0       	ldi	r27, 0x0F	; 15
    5a18:	11 97       	sbiw	r26, 0x01	; 1
    5a1a:	f1 f7       	brne	.-4      	; 0x5a18 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    5a1c:	00 c0       	rjmp	.+0      	; 0x5a1e <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    5a1e:	00 00       	nop
    5a20:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    5a22:	81 f7       	brne	.-32     	; 0x5a04 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5a24:	bf ef       	ldi	r27, 0xFF	; 255
    5a26:	73 ec       	ldi	r23, 0xC3	; 195
    5a28:	89 e0       	ldi	r24, 0x09	; 9
    5a2a:	b1 50       	subi	r27, 0x01	; 1
    5a2c:	70 40       	sbci	r23, 0x00	; 0
    5a2e:	80 40       	sbci	r24, 0x00	; 0
    5a30:	e1 f7       	brne	.-8      	; 0x5a2a <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    5a32:	00 c0       	rjmp	.+0      	; 0x5a34 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    5a34:	00 00       	nop
    5a36:	41 50       	subi	r20, 0x01	; 1
    5a38:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    5a3a:	19 f0       	breq	.+6      	; 0x5a42 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5a3c:	86 2f       	mov	r24, r22
    5a3e:	93 2f       	mov	r25, r19
    5a40:	e1 cf       	rjmp	.-62     	; 0x5a04 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5a42:	78 94       	sei
    5a44:	08 95       	ret

00005a46 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5a46:	20 91 48 06 	lds	r18, 0x0648
    5a4a:	fc 01       	movw	r30, r24
    5a4c:	21 87       	std	Z+9, r18	; 0x09
    5a4e:	08 95       	ret

00005a50 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    5a50:	fc 01       	movw	r30, r24
    5a52:	81 85       	ldd	r24, Z+9	; 0x09
    5a54:	81 70       	andi	r24, 0x01	; 1
    5a56:	08 95       	ret

00005a58 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    5a58:	08 95       	ret

00005a5a <_ZN12CSoundPlayerD1Ev>:
    5a5a:	08 95       	ret

00005a5c <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    5a5c:	e0 e0       	ldi	r30, 0x00	; 0
    5a5e:	fa e0       	ldi	r31, 0x0A	; 10
    5a60:	10 82       	st	Z, r1
    5a62:	87 e8       	ldi	r24, 0x87	; 135
    5a64:	81 83       	std	Z+1, r24	; 0x01
    5a66:	13 82       	std	Z+3, r1	; 0x03
    5a68:	84 e2       	ldi	r24, 0x24	; 36
    5a6a:	94 ef       	ldi	r25, 0xF4	; 244
    5a6c:	86 a3       	std	Z+38, r24	; 0x26
    5a6e:	97 a3       	std	Z+39, r25	; 0x27
    5a70:	82 e1       	ldi	r24, 0x12	; 18
    5a72:	9a e7       	ldi	r25, 0x7A	; 122
    5a74:	86 a7       	std	Z+46, r24	; 0x2e
    5a76:	97 a7       	std	Z+47, r25	; 0x2f
    5a78:	16 82       	std	Z+6, r1	; 0x06
    5a7a:	17 82       	std	Z+7, r1	; 0x07
    5a7c:	08 95       	ret

00005a7e <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    5a7e:	e0 e4       	ldi	r30, 0x40	; 64
    5a80:	fa e0       	ldi	r31, 0x0A	; 10
    5a82:	10 82       	st	Z, r1
    5a84:	11 82       	std	Z+1, r1	; 0x01
    5a86:	13 82       	std	Z+3, r1	; 0x03
    5a88:	84 e2       	ldi	r24, 0x24	; 36
    5a8a:	94 ef       	ldi	r25, 0xF4	; 244
    5a8c:	86 a3       	std	Z+38, r24	; 0x26
    5a8e:	97 a3       	std	Z+39, r25	; 0x27
    5a90:	16 82       	std	Z+6, r1	; 0x06
    5a92:	17 82       	std	Z+7, r1	; 0x07
    5a94:	08 95       	ret

00005a96 <_ZN12CSoundPlayer10SoundStartEjjh>:
    5a96:	0f 93       	push	r16
    5a98:	1f 93       	push	r17
    5a9a:	cf 93       	push	r28
    5a9c:	8a 01       	movw	r16, r20
    5a9e:	c2 2f       	mov	r28, r18
    5aa0:	9b 01       	movw	r18, r22
    5aa2:	40 e0       	ldi	r20, 0x00	; 0
    5aa4:	50 e0       	ldi	r21, 0x00	; 0
    5aa6:	64 e2       	ldi	r22, 0x24	; 36
    5aa8:	74 ef       	ldi	r23, 0xF4	; 244
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	0e 94 10 33 	call	0x6620	; 0x6620 <__divmodsi4>
    5ab2:	b8 01       	movw	r22, r16
    5ab4:	76 95       	lsr	r23
    5ab6:	67 95       	ror	r22
    5ab8:	ee e3       	ldi	r30, 0x3E	; 62
    5aba:	e0 9f       	mul	r30, r16
    5abc:	c0 01       	movw	r24, r0
    5abe:	e1 9f       	mul	r30, r17
    5ac0:	90 0d       	add	r25, r0
    5ac2:	11 24       	eor	r1, r1
    5ac4:	86 0f       	add	r24, r22
    5ac6:	97 1f       	adc	r25, r23
    5ac8:	cf 5f       	subi	r28, 0xFF	; 255
    5aca:	b9 01       	movw	r22, r18
    5acc:	02 c0       	rjmp	.+4      	; 0x5ad2 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    5ace:	76 95       	lsr	r23
    5ad0:	67 95       	ror	r22
    5ad2:	ca 95       	dec	r28
    5ad4:	e2 f7       	brpl	.-8      	; 0x5ace <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    5ad6:	e0 e0       	ldi	r30, 0x00	; 0
    5ad8:	fa e0       	ldi	r31, 0x0A	; 10
    5ada:	66 a7       	std	Z+46, r22	; 0x2e
    5adc:	77 a7       	std	Z+47, r23	; 0x2f
    5ade:	26 a3       	std	Z+38, r18	; 0x26
    5ae0:	37 a3       	std	Z+39, r19	; 0x27
    5ae2:	a0 e4       	ldi	r26, 0x40	; 64
    5ae4:	ba e0       	ldi	r27, 0x0A	; 10
    5ae6:	96 96       	adiw	r26, 0x26	; 38
    5ae8:	8d 93       	st	X+, r24
    5aea:	9c 93       	st	X, r25
    5aec:	97 97       	sbiw	r26, 0x27	; 39
    5aee:	86 e0       	ldi	r24, 0x06	; 6
    5af0:	80 83       	st	Z, r24
    5af2:	87 e0       	ldi	r24, 0x07	; 7
    5af4:	8c 93       	st	X, r24
    5af6:	cf 91       	pop	r28
    5af8:	1f 91       	pop	r17
    5afa:	0f 91       	pop	r16
    5afc:	08 95       	ret

00005afe <_ZN12CSoundPlayer9SoundStopEv>:
    5afe:	e0 e4       	ldi	r30, 0x40	; 64
    5b00:	fa e0       	ldi	r31, 0x0A	; 10
    5b02:	84 85       	ldd	r24, Z+12	; 0x0c
    5b04:	80 ff       	sbrs	r24, 0
    5b06:	fd cf       	rjmp	.-6      	; 0x5b02 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    5b08:	e0 e4       	ldi	r30, 0x40	; 64
    5b0a:	fa e0       	ldi	r31, 0x0A	; 10
    5b0c:	84 85       	ldd	r24, Z+12	; 0x0c
    5b0e:	81 70       	andi	r24, 0x01	; 1
    5b10:	84 87       	std	Z+12, r24	; 0x0c
    5b12:	a0 e0       	ldi	r26, 0x00	; 0
    5b14:	ba e0       	ldi	r27, 0x0A	; 10
    5b16:	1c 92       	st	X, r1
    5b18:	10 82       	st	Z, r1
    5b1a:	10 a2       	std	Z+32, r1	; 0x20
    5b1c:	11 a2       	std	Z+33, r1	; 0x21
    5b1e:	90 96       	adiw	r26, 0x20	; 32
    5b20:	1d 92       	st	X+, r1
    5b22:	1c 92       	st	X, r1
    5b24:	91 97       	sbiw	r26, 0x21	; 33
    5b26:	2f ef       	ldi	r18, 0xFF	; 255
    5b28:	83 ef       	ldi	r24, 0xF3	; 243
    5b2a:	91 e0       	ldi	r25, 0x01	; 1
    5b2c:	21 50       	subi	r18, 0x01	; 1
    5b2e:	80 40       	sbci	r24, 0x00	; 0
    5b30:	90 40       	sbci	r25, 0x00	; 0
    5b32:	e1 f7       	brne	.-8      	; 0x5b2c <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    5b34:	00 c0       	rjmp	.+0      	; 0x5b36 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    5b36:	00 00       	nop
    5b38:	08 95       	ret

00005b3a <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5b40:	0e 94 2e 2d 	call	0x5a5c	; 0x5a5c <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5b44:	ce 01       	movw	r24, r28
    5b46:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    5b4a:	df 91       	pop	r29
    5b4c:	cf 91       	pop	r28
    5b4e:	08 95       	ret

00005b50 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5b50:	fc 01       	movw	r30, r24
    5b52:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5b54:	e0 e0       	ldi	r30, 0x00	; 0
    5b56:	f8 e0       	ldi	r31, 0x08	; 8
    5b58:	80 81       	ld	r24, Z
    5b5a:	80 7f       	andi	r24, 0xF0	; 240
    5b5c:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5b5e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5b60:	10 a2       	std	Z+32, r1	; 0x20
    5b62:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5b64:	10 a6       	std	Z+40, r1	; 0x28
    5b66:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    5b68:	12 a6       	std	Z+42, r1	; 0x2a
    5b6a:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    5b6c:	14 a6       	std	Z+44, r1	; 0x2c
    5b6e:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5b70:	16 a6       	std	Z+46, r1	; 0x2e
    5b72:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5b74:	16 a2       	std	Z+38, r1	; 0x26
    5b76:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5b78:	81 81       	ldd	r24, Z+1	; 0x01
    5b7a:	88 7f       	andi	r24, 0xF8	; 248
    5b7c:	68 2b       	or	r22, r24
    5b7e:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5b80:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5b82:	17 82       	std	Z+7, r1	; 0x07
    5b84:	08 95       	ret

00005b86 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5b86:	e0 e0       	ldi	r30, 0x00	; 0
    5b88:	f8 e0       	ldi	r31, 0x08	; 8
    5b8a:	66 a3       	std	Z+38, r22	; 0x26
    5b8c:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5b8e:	20 81       	ld	r18, Z
    5b90:	20 7f       	andi	r18, 0xF0	; 240
    5b92:	dc 01       	movw	r26, r24
    5b94:	12 96       	adiw	r26, 0x02	; 2
    5b96:	9c 91       	ld	r25, X
    5b98:	82 2f       	mov	r24, r18
    5b9a:	89 2b       	or	r24, r25
    5b9c:	80 83       	st	Z, r24
    5b9e:	08 95       	ret

00005ba0 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ba0:	e0 e0       	ldi	r30, 0x00	; 0
    5ba2:	f8 e0       	ldi	r31, 0x08	; 8
    5ba4:	80 81       	ld	r24, Z
    5ba6:	80 7f       	andi	r24, 0xF0	; 240
    5ba8:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    5baa:	10 a2       	std	Z+32, r1	; 0x20
    5bac:	11 a2       	std	Z+33, r1	; 0x21
    5bae:	08 95       	ret

00005bb0 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5bb0:	e0 e0       	ldi	r30, 0x00	; 0
    5bb2:	f8 e0       	ldi	r31, 0x08	; 8
    5bb4:	81 81       	ldd	r24, Z+1	; 0x01
    5bb6:	8f 70       	andi	r24, 0x0F	; 15
    5bb8:	68 2b       	or	r22, r24
    5bba:	61 83       	std	Z+1, r22	; 0x01
    5bbc:	08 95       	ret

00005bbe <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5bbe:	e0 e0       	ldi	r30, 0x00	; 0
    5bc0:	f8 e0       	ldi	r31, 0x08	; 8
    5bc2:	81 81       	ldd	r24, Z+1	; 0x01
    5bc4:	60 95       	com	r22
    5bc6:	68 23       	and	r22, r24
    5bc8:	61 83       	std	Z+1, r22	; 0x01
    5bca:	08 95       	ret

00005bcc <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    5bcc:	60 93 26 08 	sts	0x0826, r22
    5bd0:	70 93 27 08 	sts	0x0827, r23
    5bd4:	08 95       	ret

00005bd6 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5bd6:	60 93 28 08 	sts	0x0828, r22
    5bda:	70 93 29 08 	sts	0x0829, r23
    5bde:	08 95       	ret

00005be0 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    5be0:	60 93 2a 08 	sts	0x082A, r22
    5be4:	70 93 2b 08 	sts	0x082B, r23
    5be8:	08 95       	ret

00005bea <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    5bea:	60 93 2c 08 	sts	0x082C, r22
    5bee:	70 93 2d 08 	sts	0x082D, r23
    5bf2:	08 95       	ret

00005bf4 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    5bf4:	60 93 2e 08 	sts	0x082E, r22
    5bf8:	70 93 2f 08 	sts	0x082F, r23
    5bfc:	08 95       	ret

00005bfe <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5bfe:	61 15       	cp	r22, r1
    5c00:	71 05       	cpc	r23, r1
    5c02:	29 f0       	breq	.+10     	; 0x5c0e <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5c04:	e0 e0       	ldi	r30, 0x00	; 0
    5c06:	f8 e0       	ldi	r31, 0x08	; 8
    5c08:	86 81       	ldd	r24, Z+6	; 0x06
    5c0a:	28 2b       	or	r18, r24
    5c0c:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    5c0e:	60 93 00 23 	sts	0x2300, r22
    5c12:	70 93 01 23 	sts	0x2301, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    5c16:	40 93 f6 23 	sts	0x23F6, r20
    5c1a:	50 93 f7 23 	sts	0x23F7, r21
    5c1e:	08 95       	ret

00005c20 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5c20:	61 15       	cp	r22, r1
    5c22:	71 05       	cpc	r23, r1
    5c24:	29 f0       	breq	.+10     	; 0x5c30 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5c26:	e0 e0       	ldi	r30, 0x00	; 0
    5c28:	f8 e0       	ldi	r31, 0x08	; 8
    5c2a:	86 81       	ldd	r24, Z+6	; 0x06
    5c2c:	28 2b       	or	r18, r24
    5c2e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    5c30:	60 93 02 23 	sts	0x2302, r22
    5c34:	70 93 03 23 	sts	0x2303, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    5c38:	40 93 f8 23 	sts	0x23F8, r20
    5c3c:	50 93 f9 23 	sts	0x23F9, r21
    5c40:	08 95       	ret

00005c42 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5c42:	61 15       	cp	r22, r1
    5c44:	71 05       	cpc	r23, r1
    5c46:	29 f0       	breq	.+10     	; 0x5c52 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5c48:	e0 e0       	ldi	r30, 0x00	; 0
    5c4a:	f8 e0       	ldi	r31, 0x08	; 8
    5c4c:	87 81       	ldd	r24, Z+7	; 0x07
    5c4e:	28 2b       	or	r18, r24
    5c50:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5c52:	60 93 04 23 	sts	0x2304, r22
    5c56:	70 93 05 23 	sts	0x2305, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5c5a:	40 93 fa 23 	sts	0x23FA, r20
    5c5e:	50 93 fb 23 	sts	0x23FB, r21
    5c62:	08 95       	ret

00005c64 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5c64:	61 15       	cp	r22, r1
    5c66:	71 05       	cpc	r23, r1
    5c68:	29 f0       	breq	.+10     	; 0x5c74 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5c6a:	e0 e0       	ldi	r30, 0x00	; 0
    5c6c:	f8 e0       	ldi	r31, 0x08	; 8
    5c6e:	87 81       	ldd	r24, Z+7	; 0x07
    5c70:	28 2b       	or	r18, r24
    5c72:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5c74:	60 93 06 23 	sts	0x2306, r22
    5c78:	70 93 07 23 	sts	0x2307, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5c7c:	40 93 fc 23 	sts	0x23FC, r20
    5c80:	50 93 fd 23 	sts	0x23FD, r21
    5c84:	08 95       	ret

00005c86 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5c86:	61 15       	cp	r22, r1
    5c88:	71 05       	cpc	r23, r1
    5c8a:	29 f0       	breq	.+10     	; 0x5c96 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5c8c:	e0 e0       	ldi	r30, 0x00	; 0
    5c8e:	f8 e0       	ldi	r31, 0x08	; 8
    5c90:	87 81       	ldd	r24, Z+7	; 0x07
    5c92:	28 2b       	or	r18, r24
    5c94:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5c96:	60 93 08 23 	sts	0x2308, r22
    5c9a:	70 93 09 23 	sts	0x2309, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5c9e:	40 93 fe 23 	sts	0x23FE, r20
    5ca2:	50 93 ff 23 	sts	0x23FF, r21
    5ca6:	08 95       	ret

00005ca8 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5ca8:	61 15       	cp	r22, r1
    5caa:	71 05       	cpc	r23, r1
    5cac:	29 f0       	breq	.+10     	; 0x5cb8 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5cae:	e0 e0       	ldi	r30, 0x00	; 0
    5cb0:	f8 e0       	ldi	r31, 0x08	; 8
    5cb2:	87 81       	ldd	r24, Z+7	; 0x07
    5cb4:	28 2b       	or	r18, r24
    5cb6:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5cb8:	60 93 0a 23 	sts	0x230A, r22
    5cbc:	70 93 0b 23 	sts	0x230B, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5cc0:	40 93 00 24 	sts	0x2400, r20
    5cc4:	50 93 01 24 	sts	0x2401, r21
    5cc8:	08 95       	ret

00005cca <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5cca:	cf 93       	push	r28
    5ccc:	df 93       	push	r29
    5cce:	ec 01       	movw	r28, r24
    5cd0:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN6CTimerC1Ev>
    5cd4:	82 e3       	ldi	r24, 0x32	; 50
    5cd6:	92 e2       	ldi	r25, 0x22	; 34
    5cd8:	88 83       	st	Y, r24
    5cda:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5cdc:	df 91       	pop	r29
    5cde:	cf 91       	pop	r28
    5ce0:	08 95       	ret

00005ce2 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5ce2:	22 e3       	ldi	r18, 0x32	; 50
    5ce4:	32 e2       	ldi	r19, 0x22	; 34
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	20 83       	st	Z, r18
    5cea:	31 83       	std	Z+1, r19	; 0x01
    5cec:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN6CTimerD1Ev>
    5cf0:	08 95       	ret

00005cf2 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5cf6:	e0 e4       	ldi	r30, 0x40	; 64
    5cf8:	f8 e0       	ldi	r31, 0x08	; 8
    5cfa:	80 81       	ld	r24, Z
    5cfc:	80 7f       	andi	r24, 0xF0	; 240
    5cfe:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5d00:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5d02:	10 a2       	std	Z+32, r1	; 0x20
    5d04:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5d06:	10 a6       	std	Z+40, r1	; 0x28
    5d08:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5d0a:	12 a6       	std	Z+42, r1	; 0x2a
    5d0c:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5d0e:	16 a2       	std	Z+38, r1	; 0x26
    5d10:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5d12:	81 81       	ldd	r24, Z+1	; 0x01
    5d14:	88 7f       	andi	r24, 0xF8	; 248
    5d16:	68 2b       	or	r22, r24
    5d18:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5d1a:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5d1c:	17 82       	std	Z+7, r1	; 0x07
    5d1e:	08 95       	ret

00005d20 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5d20:	e0 e4       	ldi	r30, 0x40	; 64
    5d22:	f8 e0       	ldi	r31, 0x08	; 8
    5d24:	66 a3       	std	Z+38, r22	; 0x26
    5d26:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5d28:	20 81       	ld	r18, Z
    5d2a:	20 7f       	andi	r18, 0xF0	; 240
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	12 96       	adiw	r26, 0x02	; 2
    5d30:	9c 91       	ld	r25, X
    5d32:	82 2f       	mov	r24, r18
    5d34:	89 2b       	or	r24, r25
    5d36:	80 83       	st	Z, r24
    5d38:	08 95       	ret

00005d3a <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d3a:	e0 e4       	ldi	r30, 0x40	; 64
    5d3c:	f8 e0       	ldi	r31, 0x08	; 8
    5d3e:	80 81       	ld	r24, Z
    5d40:	80 7f       	andi	r24, 0xF0	; 240
    5d42:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5d44:	10 a2       	std	Z+32, r1	; 0x20
    5d46:	11 a2       	std	Z+33, r1	; 0x21
    5d48:	08 95       	ret

00005d4a <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5d4a:	e0 e4       	ldi	r30, 0x40	; 64
    5d4c:	f8 e0       	ldi	r31, 0x08	; 8
    5d4e:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d50:	80 81       	ld	r24, Z
    5d52:	80 7f       	andi	r24, 0xF0	; 240
    5d54:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5d56:	10 a2       	std	Z+32, r1	; 0x20
    5d58:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5d5a:	90 83       	st	Z, r25
    5d5c:	08 95       	ret

00005d5e <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5d5e:	e0 e4       	ldi	r30, 0x40	; 64
    5d60:	f8 e0       	ldi	r31, 0x08	; 8
    5d62:	81 81       	ldd	r24, Z+1	; 0x01
    5d64:	8f 70       	andi	r24, 0x0F	; 15
    5d66:	68 2b       	or	r22, r24
    5d68:	61 83       	std	Z+1, r22	; 0x01
    5d6a:	08 95       	ret

00005d6c <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5d6c:	e0 e4       	ldi	r30, 0x40	; 64
    5d6e:	f8 e0       	ldi	r31, 0x08	; 8
    5d70:	81 81       	ldd	r24, Z+1	; 0x01
    5d72:	60 95       	com	r22
    5d74:	68 23       	and	r22, r24
    5d76:	61 83       	std	Z+1, r22	; 0x01
    5d78:	08 95       	ret

00005d7a <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5d7a:	60 93 66 08 	sts	0x0866, r22
    5d7e:	70 93 67 08 	sts	0x0867, r23
    5d82:	08 95       	ret

00005d84 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5d84:	60 93 68 08 	sts	0x0868, r22
    5d88:	70 93 69 08 	sts	0x0869, r23
    5d8c:	08 95       	ret

00005d8e <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5d8e:	60 93 6a 08 	sts	0x086A, r22
    5d92:	70 93 6b 08 	sts	0x086B, r23
    5d96:	08 95       	ret

00005d98 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5d98:	61 15       	cp	r22, r1
    5d9a:	71 05       	cpc	r23, r1
    5d9c:	31 f0       	breq	.+12     	; 0x5daa <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5d9e:	e0 e4       	ldi	r30, 0x40	; 64
    5da0:	f8 e0       	ldi	r31, 0x08	; 8
    5da2:	86 81       	ldd	r24, Z+6	; 0x06
    5da4:	83 70       	andi	r24, 0x03	; 3
    5da6:	28 2b       	or	r18, r24
    5da8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5daa:	60 93 0c 23 	sts	0x230C, r22
    5dae:	70 93 0d 23 	sts	0x230D, r23
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5db2:	40 93 02 24 	sts	0x2402, r20
    5db6:	50 93 03 24 	sts	0x2403, r21
    5dba:	08 95       	ret

00005dbc <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5dbc:	61 15       	cp	r22, r1
    5dbe:	71 05       	cpc	r23, r1
    5dc0:	31 f0       	breq	.+12     	; 0x5dce <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5dc2:	e0 e4       	ldi	r30, 0x40	; 64
    5dc4:	f8 e0       	ldi	r31, 0x08	; 8
    5dc6:	86 81       	ldd	r24, Z+6	; 0x06
    5dc8:	8c 70       	andi	r24, 0x0C	; 12
    5dca:	28 2b       	or	r18, r24
    5dcc:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5dce:	60 93 0e 23 	sts	0x230E, r22
    5dd2:	70 93 0f 23 	sts	0x230F, r23
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5dd6:	40 93 04 24 	sts	0x2404, r20
    5dda:	50 93 05 24 	sts	0x2405, r21
    5dde:	08 95       	ret

00005de0 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5de0:	61 15       	cp	r22, r1
    5de2:	71 05       	cpc	r23, r1
    5de4:	31 f0       	breq	.+12     	; 0x5df2 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5de6:	e0 e4       	ldi	r30, 0x40	; 64
    5de8:	f8 e0       	ldi	r31, 0x08	; 8
    5dea:	87 81       	ldd	r24, Z+7	; 0x07
    5dec:	83 70       	andi	r24, 0x03	; 3
    5dee:	28 2b       	or	r18, r24
    5df0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5df2:	60 93 10 23 	sts	0x2310, r22
    5df6:	70 93 11 23 	sts	0x2311, r23
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5dfa:	40 93 06 24 	sts	0x2406, r20
    5dfe:	50 93 07 24 	sts	0x2407, r21
    5e02:	08 95       	ret

00005e04 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5e04:	61 15       	cp	r22, r1
    5e06:	71 05       	cpc	r23, r1
    5e08:	31 f0       	breq	.+12     	; 0x5e16 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5e0a:	e0 e4       	ldi	r30, 0x40	; 64
    5e0c:	f8 e0       	ldi	r31, 0x08	; 8
    5e0e:	87 81       	ldd	r24, Z+7	; 0x07
    5e10:	8c 70       	andi	r24, 0x0C	; 12
    5e12:	28 2b       	or	r18, r24
    5e14:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5e16:	60 93 12 23 	sts	0x2312, r22
    5e1a:	70 93 13 23 	sts	0x2313, r23
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5e1e:	40 93 08 24 	sts	0x2408, r20
    5e22:	50 93 09 24 	sts	0x2409, r21
    5e26:	08 95       	ret

00005e28 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	ec 01       	movw	r28, r24
    5e2e:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN7CTimer1C1Ev>
    5e32:	86 e5       	ldi	r24, 0x56	; 86
    5e34:	92 e2       	ldi	r25, 0x22	; 34
    5e36:	88 83       	st	Y, r24
    5e38:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5e3a:	df 91       	pop	r29
    5e3c:	cf 91       	pop	r28
    5e3e:	08 95       	ret

00005e40 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5e40:	26 e5       	ldi	r18, 0x56	; 86
    5e42:	32 e2       	ldi	r19, 0x22	; 34
    5e44:	fc 01       	movw	r30, r24
    5e46:	20 83       	st	Z, r18
    5e48:	31 83       	std	Z+1, r19	; 0x01
    5e4a:	0e 94 cc 11 	call	0x2398	; 0x2398 <_ZN7CTimer1D1Ev>
    5e4e:	08 95       	ret

00005e50 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5e50:	fc 01       	movw	r30, r24
    5e52:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5e54:	e0 e0       	ldi	r30, 0x00	; 0
    5e56:	f9 e0       	ldi	r31, 0x09	; 9
    5e58:	80 81       	ld	r24, Z
    5e5a:	80 7f       	andi	r24, 0xF0	; 240
    5e5c:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5e5e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5e60:	10 a2       	std	Z+32, r1	; 0x20
    5e62:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    5e64:	10 a6       	std	Z+40, r1	; 0x28
    5e66:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    5e68:	12 a6       	std	Z+42, r1	; 0x2a
    5e6a:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    5e6c:	14 a6       	std	Z+44, r1	; 0x2c
    5e6e:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    5e70:	16 a6       	std	Z+46, r1	; 0x2e
    5e72:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    5e74:	16 a2       	std	Z+38, r1	; 0x26
    5e76:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5e78:	81 81       	ldd	r24, Z+1	; 0x01
    5e7a:	88 7f       	andi	r24, 0xF8	; 248
    5e7c:	68 2b       	or	r22, r24
    5e7e:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5e80:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5e82:	17 82       	std	Z+7, r1	; 0x07
    5e84:	08 95       	ret

00005e86 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    5e86:	e0 e0       	ldi	r30, 0x00	; 0
    5e88:	f9 e0       	ldi	r31, 0x09	; 9
    5e8a:	66 a3       	std	Z+38, r22	; 0x26
    5e8c:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5e8e:	20 81       	ld	r18, Z
    5e90:	20 7f       	andi	r18, 0xF0	; 240
    5e92:	dc 01       	movw	r26, r24
    5e94:	12 96       	adiw	r26, 0x02	; 2
    5e96:	9c 91       	ld	r25, X
    5e98:	82 2f       	mov	r24, r18
    5e9a:	89 2b       	or	r24, r25
    5e9c:	80 83       	st	Z, r24
    5e9e:	08 95       	ret

00005ea0 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ea0:	e0 e0       	ldi	r30, 0x00	; 0
    5ea2:	f9 e0       	ldi	r31, 0x09	; 9
    5ea4:	80 81       	ld	r24, Z
    5ea6:	80 7f       	andi	r24, 0xF0	; 240
    5ea8:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    5eaa:	10 a2       	std	Z+32, r1	; 0x20
    5eac:	11 a2       	std	Z+33, r1	; 0x21
    5eae:	08 95       	ret

00005eb0 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    5eb0:	e0 e0       	ldi	r30, 0x00	; 0
    5eb2:	f9 e0       	ldi	r31, 0x09	; 9
    5eb4:	81 81       	ldd	r24, Z+1	; 0x01
    5eb6:	8f 70       	andi	r24, 0x0F	; 15
    5eb8:	68 2b       	or	r22, r24
    5eba:	61 83       	std	Z+1, r22	; 0x01
    5ebc:	08 95       	ret

00005ebe <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    5ebe:	e0 e0       	ldi	r30, 0x00	; 0
    5ec0:	f9 e0       	ldi	r31, 0x09	; 9
    5ec2:	81 81       	ldd	r24, Z+1	; 0x01
    5ec4:	60 95       	com	r22
    5ec6:	68 23       	and	r22, r24
    5ec8:	61 83       	std	Z+1, r22	; 0x01
    5eca:	08 95       	ret

00005ecc <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    5ecc:	60 93 26 09 	sts	0x0926, r22
    5ed0:	70 93 27 09 	sts	0x0927, r23
    5ed4:	08 95       	ret

00005ed6 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    5ed6:	60 93 28 09 	sts	0x0928, r22
    5eda:	70 93 29 09 	sts	0x0929, r23
    5ede:	08 95       	ret

00005ee0 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    5ee0:	60 93 2a 09 	sts	0x092A, r22
    5ee4:	70 93 2b 09 	sts	0x092B, r23
    5ee8:	08 95       	ret

00005eea <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    5eea:	60 93 2c 09 	sts	0x092C, r22
    5eee:	70 93 2d 09 	sts	0x092D, r23
    5ef2:	08 95       	ret

00005ef4 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    5ef4:	60 93 2e 09 	sts	0x092E, r22
    5ef8:	70 93 2f 09 	sts	0x092F, r23
    5efc:	08 95       	ret

00005efe <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5efe:	61 15       	cp	r22, r1
    5f00:	71 05       	cpc	r23, r1
    5f02:	29 f0       	breq	.+10     	; 0x5f0e <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5f04:	e0 e0       	ldi	r30, 0x00	; 0
    5f06:	f9 e0       	ldi	r31, 0x09	; 9
    5f08:	86 81       	ldd	r24, Z+6	; 0x06
    5f0a:	28 2b       	or	r18, r24
    5f0c:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    5f0e:	60 93 7e 23 	sts	0x237E, r22
    5f12:	70 93 7f 23 	sts	0x237F, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    5f16:	40 93 74 24 	sts	0x2474, r20
    5f1a:	50 93 75 24 	sts	0x2475, r21
    5f1e:	08 95       	ret

00005f20 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5f20:	61 15       	cp	r22, r1
    5f22:	71 05       	cpc	r23, r1
    5f24:	29 f0       	breq	.+10     	; 0x5f30 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5f26:	e0 e0       	ldi	r30, 0x00	; 0
    5f28:	f9 e0       	ldi	r31, 0x09	; 9
    5f2a:	86 81       	ldd	r24, Z+6	; 0x06
    5f2c:	28 2b       	or	r18, r24
    5f2e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    5f30:	60 93 80 23 	sts	0x2380, r22
    5f34:	70 93 81 23 	sts	0x2381, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    5f38:	40 93 76 24 	sts	0x2476, r20
    5f3c:	50 93 77 24 	sts	0x2477, r21
    5f40:	08 95       	ret

00005f42 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5f42:	61 15       	cp	r22, r1
    5f44:	71 05       	cpc	r23, r1
    5f46:	29 f0       	breq	.+10     	; 0x5f52 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5f48:	e0 e0       	ldi	r30, 0x00	; 0
    5f4a:	f9 e0       	ldi	r31, 0x09	; 9
    5f4c:	87 81       	ldd	r24, Z+7	; 0x07
    5f4e:	28 2b       	or	r18, r24
    5f50:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    5f52:	60 93 82 23 	sts	0x2382, r22
    5f56:	70 93 83 23 	sts	0x2383, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    5f5a:	40 93 78 24 	sts	0x2478, r20
    5f5e:	50 93 79 24 	sts	0x2479, r21
    5f62:	08 95       	ret

00005f64 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5f64:	61 15       	cp	r22, r1
    5f66:	71 05       	cpc	r23, r1
    5f68:	29 f0       	breq	.+10     	; 0x5f74 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5f6a:	e0 e0       	ldi	r30, 0x00	; 0
    5f6c:	f9 e0       	ldi	r31, 0x09	; 9
    5f6e:	87 81       	ldd	r24, Z+7	; 0x07
    5f70:	28 2b       	or	r18, r24
    5f72:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    5f74:	60 93 84 23 	sts	0x2384, r22
    5f78:	70 93 85 23 	sts	0x2385, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    5f7c:	40 93 7a 24 	sts	0x247A, r20
    5f80:	50 93 7b 24 	sts	0x247B, r21
    5f84:	08 95       	ret

00005f86 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5f86:	61 15       	cp	r22, r1
    5f88:	71 05       	cpc	r23, r1
    5f8a:	29 f0       	breq	.+10     	; 0x5f96 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5f8c:	e0 e0       	ldi	r30, 0x00	; 0
    5f8e:	f9 e0       	ldi	r31, 0x09	; 9
    5f90:	87 81       	ldd	r24, Z+7	; 0x07
    5f92:	28 2b       	or	r18, r24
    5f94:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    5f96:	60 93 86 23 	sts	0x2386, r22
    5f9a:	70 93 87 23 	sts	0x2387, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    5f9e:	40 93 7c 24 	sts	0x247C, r20
    5fa2:	50 93 7d 24 	sts	0x247D, r21
    5fa6:	08 95       	ret

00005fa8 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5fa8:	61 15       	cp	r22, r1
    5faa:	71 05       	cpc	r23, r1
    5fac:	29 f0       	breq	.+10     	; 0x5fb8 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5fae:	e0 e0       	ldi	r30, 0x00	; 0
    5fb0:	f9 e0       	ldi	r31, 0x09	; 9
    5fb2:	87 81       	ldd	r24, Z+7	; 0x07
    5fb4:	28 2b       	or	r18, r24
    5fb6:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    5fb8:	60 93 88 23 	sts	0x2388, r22
    5fbc:	70 93 89 23 	sts	0x2389, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    5fc0:	40 93 7e 24 	sts	0x247E, r20
    5fc4:	50 93 7f 24 	sts	0x247F, r21
    5fc8:	08 95       	ret

00005fca <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	ec 01       	movw	r28, r24
    5fd0:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN6CTimerC1Ev>
    5fd4:	84 e7       	ldi	r24, 0x74	; 116
    5fd6:	92 e2       	ldi	r25, 0x22	; 34
    5fd8:	88 83       	st	Y, r24
    5fda:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    5fdc:	df 91       	pop	r29
    5fde:	cf 91       	pop	r28
    5fe0:	08 95       	ret

00005fe2 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    5fe2:	24 e7       	ldi	r18, 0x74	; 116
    5fe4:	32 e2       	ldi	r19, 0x22	; 34
    5fe6:	fc 01       	movw	r30, r24
    5fe8:	20 83       	st	Z, r18
    5fea:	31 83       	std	Z+1, r19	; 0x01
    5fec:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN6CTimerD1Ev>
    5ff0:	08 95       	ret

00005ff2 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ff6:	e0 e4       	ldi	r30, 0x40	; 64
    5ff8:	f9 e0       	ldi	r31, 0x09	; 9
    5ffa:	80 81       	ld	r24, Z
    5ffc:	80 7f       	andi	r24, 0xF0	; 240
    5ffe:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    6000:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    6002:	10 a2       	std	Z+32, r1	; 0x20
    6004:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    6006:	10 a6       	std	Z+40, r1	; 0x28
    6008:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    600a:	12 a6       	std	Z+42, r1	; 0x2a
    600c:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    600e:	16 a2       	std	Z+38, r1	; 0x26
    6010:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    6012:	81 81       	ldd	r24, Z+1	; 0x01
    6014:	88 7f       	andi	r24, 0xF8	; 248
    6016:	68 2b       	or	r22, r24
    6018:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    601a:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    601c:	17 82       	std	Z+7, r1	; 0x07
    601e:	08 95       	ret

00006020 <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    6020:	e0 e4       	ldi	r30, 0x40	; 64
    6022:	f9 e0       	ldi	r31, 0x09	; 9
    6024:	66 a3       	std	Z+38, r22	; 0x26
    6026:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    6028:	20 81       	ld	r18, Z
    602a:	20 7f       	andi	r18, 0xF0	; 240
    602c:	dc 01       	movw	r26, r24
    602e:	12 96       	adiw	r26, 0x02	; 2
    6030:	9c 91       	ld	r25, X
    6032:	82 2f       	mov	r24, r18
    6034:	89 2b       	or	r24, r25
    6036:	80 83       	st	Z, r24
    6038:	08 95       	ret

0000603a <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    603a:	e0 e4       	ldi	r30, 0x40	; 64
    603c:	f9 e0       	ldi	r31, 0x09	; 9
    603e:	80 81       	ld	r24, Z
    6040:	80 7f       	andi	r24, 0xF0	; 240
    6042:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    6044:	10 a2       	std	Z+32, r1	; 0x20
    6046:	11 a2       	std	Z+33, r1	; 0x21
    6048:	08 95       	ret

0000604a <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    604a:	e0 e4       	ldi	r30, 0x40	; 64
    604c:	f9 e0       	ldi	r31, 0x09	; 9
    604e:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6050:	80 81       	ld	r24, Z
    6052:	80 7f       	andi	r24, 0xF0	; 240
    6054:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    6056:	10 a2       	std	Z+32, r1	; 0x20
    6058:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    605a:	90 83       	st	Z, r25
    605c:	08 95       	ret

0000605e <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    605e:	e0 e4       	ldi	r30, 0x40	; 64
    6060:	f9 e0       	ldi	r31, 0x09	; 9
    6062:	81 81       	ldd	r24, Z+1	; 0x01
    6064:	8f 70       	andi	r24, 0x0F	; 15
    6066:	68 2b       	or	r22, r24
    6068:	61 83       	std	Z+1, r22	; 0x01
    606a:	08 95       	ret

0000606c <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    606c:	e0 e4       	ldi	r30, 0x40	; 64
    606e:	f9 e0       	ldi	r31, 0x09	; 9
    6070:	81 81       	ldd	r24, Z+1	; 0x01
    6072:	60 95       	com	r22
    6074:	68 23       	and	r22, r24
    6076:	61 83       	std	Z+1, r22	; 0x01
    6078:	08 95       	ret

0000607a <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    607a:	60 93 66 09 	sts	0x0966, r22
    607e:	70 93 67 09 	sts	0x0967, r23
    6082:	08 95       	ret

00006084 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    6084:	60 93 68 09 	sts	0x0968, r22
    6088:	70 93 69 09 	sts	0x0969, r23
    608c:	08 95       	ret

0000608e <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    608e:	60 93 6a 09 	sts	0x096A, r22
    6092:	70 93 6b 09 	sts	0x096B, r23
    6096:	08 95       	ret

00006098 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    6098:	61 15       	cp	r22, r1
    609a:	71 05       	cpc	r23, r1
    609c:	29 f0       	breq	.+10     	; 0x60a8 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    609e:	e0 e4       	ldi	r30, 0x40	; 64
    60a0:	f9 e0       	ldi	r31, 0x09	; 9
    60a2:	86 81       	ldd	r24, Z+6	; 0x06
    60a4:	28 2b       	or	r18, r24
    60a6:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    60a8:	60 93 8a 23 	sts	0x238A, r22
    60ac:	70 93 8b 23 	sts	0x238B, r23
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    60b0:	40 93 80 24 	sts	0x2480, r20
    60b4:	50 93 81 24 	sts	0x2481, r21
    60b8:	08 95       	ret

000060ba <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    60ba:	61 15       	cp	r22, r1
    60bc:	71 05       	cpc	r23, r1
    60be:	29 f0       	breq	.+10     	; 0x60ca <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    60c0:	e0 e4       	ldi	r30, 0x40	; 64
    60c2:	f9 e0       	ldi	r31, 0x09	; 9
    60c4:	86 81       	ldd	r24, Z+6	; 0x06
    60c6:	28 2b       	or	r18, r24
    60c8:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    60ca:	60 93 8c 23 	sts	0x238C, r22
    60ce:	70 93 8d 23 	sts	0x238D, r23
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    60d2:	40 93 82 24 	sts	0x2482, r20
    60d6:	50 93 83 24 	sts	0x2483, r21
    60da:	08 95       	ret

000060dc <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    60dc:	61 15       	cp	r22, r1
    60de:	71 05       	cpc	r23, r1
    60e0:	29 f0       	breq	.+10     	; 0x60ec <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    60e2:	e0 e4       	ldi	r30, 0x40	; 64
    60e4:	f9 e0       	ldi	r31, 0x09	; 9
    60e6:	87 81       	ldd	r24, Z+7	; 0x07
    60e8:	28 2b       	or	r18, r24
    60ea:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    60ec:	60 93 8e 23 	sts	0x238E, r22
    60f0:	70 93 8f 23 	sts	0x238F, r23
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    60f4:	40 93 84 24 	sts	0x2484, r20
    60f8:	50 93 85 24 	sts	0x2485, r21
    60fc:	08 95       	ret

000060fe <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    60fe:	61 15       	cp	r22, r1
    6100:	71 05       	cpc	r23, r1
    6102:	29 f0       	breq	.+10     	; 0x610e <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    6104:	e0 e4       	ldi	r30, 0x40	; 64
    6106:	f9 e0       	ldi	r31, 0x09	; 9
    6108:	87 81       	ldd	r24, Z+7	; 0x07
    610a:	28 2b       	or	r18, r24
    610c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    610e:	60 93 90 23 	sts	0x2390, r22
    6112:	70 93 91 23 	sts	0x2391, r23
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    6116:	40 93 86 24 	sts	0x2486, r20
    611a:	50 93 87 24 	sts	0x2487, r21
    611e:	08 95       	ret

00006120 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	ec 01       	movw	r28, r24
    6126:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN7CTimer1C1Ev>
    612a:	88 e9       	ldi	r24, 0x98	; 152
    612c:	92 e2       	ldi	r25, 0x22	; 34
    612e:	88 83       	st	Y, r24
    6130:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    6132:	df 91       	pop	r29
    6134:	cf 91       	pop	r28
    6136:	08 95       	ret

00006138 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    6138:	28 e9       	ldi	r18, 0x98	; 152
    613a:	32 e2       	ldi	r19, 0x22	; 34
    613c:	fc 01       	movw	r30, r24
    613e:	20 83       	st	Z, r18
    6140:	31 83       	std	Z+1, r19	; 0x01
    6142:	0e 94 cc 11 	call	0x2398	; 0x2398 <_ZN7CTimer1D1Ev>
    6146:	08 95       	ret

00006148 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    6148:	fc 01       	movw	r30, r24
    614a:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    614c:	e0 e0       	ldi	r30, 0x00	; 0
    614e:	fb e0       	ldi	r31, 0x0B	; 11
    6150:	80 81       	ld	r24, Z
    6152:	80 7f       	andi	r24, 0xF0	; 240
    6154:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    6156:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    6158:	10 a2       	std	Z+32, r1	; 0x20
    615a:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    615c:	10 a6       	std	Z+40, r1	; 0x28
    615e:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    6160:	12 a6       	std	Z+42, r1	; 0x2a
    6162:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    6164:	14 a6       	std	Z+44, r1	; 0x2c
    6166:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    6168:	16 a6       	std	Z+46, r1	; 0x2e
    616a:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    616c:	16 a2       	std	Z+38, r1	; 0x26
    616e:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    6170:	81 81       	ldd	r24, Z+1	; 0x01
    6172:	88 7f       	andi	r24, 0xF8	; 248
    6174:	68 2b       	or	r22, r24
    6176:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    6178:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    617a:	17 82       	std	Z+7, r1	; 0x07
    617c:	08 95       	ret

0000617e <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    617e:	e0 e0       	ldi	r30, 0x00	; 0
    6180:	fb e0       	ldi	r31, 0x0B	; 11
    6182:	66 a3       	std	Z+38, r22	; 0x26
    6184:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    6186:	20 81       	ld	r18, Z
    6188:	20 7f       	andi	r18, 0xF0	; 240
    618a:	dc 01       	movw	r26, r24
    618c:	12 96       	adiw	r26, 0x02	; 2
    618e:	9c 91       	ld	r25, X
    6190:	82 2f       	mov	r24, r18
    6192:	89 2b       	or	r24, r25
    6194:	80 83       	st	Z, r24
    6196:	08 95       	ret

00006198 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6198:	e0 e0       	ldi	r30, 0x00	; 0
    619a:	fb e0       	ldi	r31, 0x0B	; 11
    619c:	80 81       	ld	r24, Z
    619e:	80 7f       	andi	r24, 0xF0	; 240
    61a0:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    61a2:	10 a2       	std	Z+32, r1	; 0x20
    61a4:	11 a2       	std	Z+33, r1	; 0x21
    61a6:	08 95       	ret

000061a8 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    61a8:	e0 e0       	ldi	r30, 0x00	; 0
    61aa:	fb e0       	ldi	r31, 0x0B	; 11
    61ac:	81 81       	ldd	r24, Z+1	; 0x01
    61ae:	68 2b       	or	r22, r24
    61b0:	61 83       	std	Z+1, r22	; 0x01
    61b2:	08 95       	ret

000061b4 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    61b4:	e0 e0       	ldi	r30, 0x00	; 0
    61b6:	fb e0       	ldi	r31, 0x0B	; 11
    61b8:	81 81       	ldd	r24, Z+1	; 0x01
    61ba:	60 95       	com	r22
    61bc:	68 23       	and	r22, r24
    61be:	61 83       	std	Z+1, r22	; 0x01
    61c0:	08 95       	ret

000061c2 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    61c2:	e0 e0       	ldi	r30, 0x00	; 0
    61c4:	fb e0       	ldi	r31, 0x0B	; 11
    61c6:	82 81       	ldd	r24, Z+2	; 0x02
    61c8:	62 95       	swap	r22
    61ca:	6f 70       	andi	r22, 0x0F	; 15
    61cc:	68 2b       	or	r22, r24
    61ce:	62 83       	std	Z+2, r22	; 0x02
    61d0:	08 95       	ret

000061d2 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    61d2:	e0 e0       	ldi	r30, 0x00	; 0
    61d4:	fb e0       	ldi	r31, 0x0B	; 11
    61d6:	82 81       	ldd	r24, Z+2	; 0x02
    61d8:	62 95       	swap	r22
    61da:	6f 70       	andi	r22, 0x0F	; 15
    61dc:	60 95       	com	r22
    61de:	68 23       	and	r22, r24
    61e0:	62 83       	std	Z+2, r22	; 0x02
    61e2:	08 95       	ret

000061e4 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    61e4:	60 93 26 0b 	sts	0x0B26, r22
    61e8:	70 93 27 0b 	sts	0x0B27, r23
    61ec:	08 95       	ret

000061ee <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    61ee:	60 93 28 0b 	sts	0x0B28, r22
    61f2:	70 93 29 0b 	sts	0x0B29, r23
    61f6:	08 95       	ret

000061f8 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    61f8:	60 93 2a 0b 	sts	0x0B2A, r22
    61fc:	70 93 2b 0b 	sts	0x0B2B, r23
    6200:	08 95       	ret

00006202 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    6202:	60 93 2c 0b 	sts	0x0B2C, r22
    6206:	70 93 2d 0b 	sts	0x0B2D, r23
    620a:	08 95       	ret

0000620c <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    620c:	60 93 2e 0b 	sts	0x0B2E, r22
    6210:	70 93 2f 0b 	sts	0x0B2F, r23
    6214:	08 95       	ret

00006216 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    6216:	61 15       	cp	r22, r1
    6218:	71 05       	cpc	r23, r1
    621a:	29 f0       	breq	.+10     	; 0x6226 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    621c:	e0 e0       	ldi	r30, 0x00	; 0
    621e:	fb e0       	ldi	r31, 0x0B	; 11
    6220:	86 81       	ldd	r24, Z+6	; 0x06
    6222:	28 2b       	or	r18, r24
    6224:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    6226:	60 93 bc 23 	sts	0x23BC, r22
    622a:	70 93 bd 23 	sts	0x23BD, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    622e:	40 93 b2 24 	sts	0x24B2, r20
    6232:	50 93 b3 24 	sts	0x24B3, r21
    6236:	08 95       	ret

00006238 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    6238:	61 15       	cp	r22, r1
    623a:	71 05       	cpc	r23, r1
    623c:	29 f0       	breq	.+10     	; 0x6248 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    623e:	e0 e0       	ldi	r30, 0x00	; 0
    6240:	fb e0       	ldi	r31, 0x0B	; 11
    6242:	86 81       	ldd	r24, Z+6	; 0x06
    6244:	28 2b       	or	r18, r24
    6246:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    6248:	60 93 be 23 	sts	0x23BE, r22
    624c:	70 93 bf 23 	sts	0x23BF, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    6250:	40 93 b4 24 	sts	0x24B4, r20
    6254:	50 93 b5 24 	sts	0x24B5, r21
    6258:	08 95       	ret

0000625a <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    625a:	61 15       	cp	r22, r1
    625c:	71 05       	cpc	r23, r1
    625e:	29 f0       	breq	.+10     	; 0x626a <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    6260:	e0 e0       	ldi	r30, 0x00	; 0
    6262:	fb e0       	ldi	r31, 0x0B	; 11
    6264:	87 81       	ldd	r24, Z+7	; 0x07
    6266:	28 2b       	or	r18, r24
    6268:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    626a:	60 93 c0 23 	sts	0x23C0, r22
    626e:	70 93 c1 23 	sts	0x23C1, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    6272:	40 93 b6 24 	sts	0x24B6, r20
    6276:	50 93 b7 24 	sts	0x24B7, r21
    627a:	08 95       	ret

0000627c <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    627c:	61 15       	cp	r22, r1
    627e:	71 05       	cpc	r23, r1
    6280:	29 f0       	breq	.+10     	; 0x628c <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    6282:	e0 e0       	ldi	r30, 0x00	; 0
    6284:	fb e0       	ldi	r31, 0x0B	; 11
    6286:	87 81       	ldd	r24, Z+7	; 0x07
    6288:	28 2b       	or	r18, r24
    628a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    628c:	60 93 c2 23 	sts	0x23C2, r22
    6290:	70 93 c3 23 	sts	0x23C3, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    6294:	40 93 b8 24 	sts	0x24B8, r20
    6298:	50 93 b9 24 	sts	0x24B9, r21
    629c:	08 95       	ret

0000629e <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    629e:	61 15       	cp	r22, r1
    62a0:	71 05       	cpc	r23, r1
    62a2:	29 f0       	breq	.+10     	; 0x62ae <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    62a4:	e0 e0       	ldi	r30, 0x00	; 0
    62a6:	fb e0       	ldi	r31, 0x0B	; 11
    62a8:	87 81       	ldd	r24, Z+7	; 0x07
    62aa:	28 2b       	or	r18, r24
    62ac:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    62ae:	60 93 c4 23 	sts	0x23C4, r22
    62b2:	70 93 c5 23 	sts	0x23C5, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    62b6:	40 93 ba 24 	sts	0x24BA, r20
    62ba:	50 93 bb 24 	sts	0x24BB, r21
    62be:	08 95       	ret

000062c0 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    62c0:	61 15       	cp	r22, r1
    62c2:	71 05       	cpc	r23, r1
    62c4:	29 f0       	breq	.+10     	; 0x62d0 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    62c6:	e0 e0       	ldi	r30, 0x00	; 0
    62c8:	fb e0       	ldi	r31, 0x0B	; 11
    62ca:	87 81       	ldd	r24, Z+7	; 0x07
    62cc:	28 2b       	or	r18, r24
    62ce:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    62d0:	60 93 c6 23 	sts	0x23C6, r22
    62d4:	70 93 c7 23 	sts	0x23C7, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    62d8:	40 93 bc 24 	sts	0x24BC, r20
    62dc:	50 93 bd 24 	sts	0x24BD, r21
    62e0:	08 95       	ret

000062e2 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    62e2:	cf 93       	push	r28
    62e4:	df 93       	push	r29
    62e6:	ec 01       	movw	r28, r24
    62e8:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN6CTimerC1Ev>
    62ec:	86 eb       	ldi	r24, 0xB6	; 182
    62ee:	92 e2       	ldi	r25, 0x22	; 34
    62f0:	88 83       	st	Y, r24
    62f2:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    62f4:	df 91       	pop	r29
    62f6:	cf 91       	pop	r28
    62f8:	08 95       	ret

000062fa <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    62fa:	26 eb       	ldi	r18, 0xB6	; 182
    62fc:	32 e2       	ldi	r19, 0x22	; 34
    62fe:	fc 01       	movw	r30, r24
    6300:	20 83       	st	Z, r18
    6302:	31 83       	std	Z+1, r19	; 0x01
    6304:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN6CTimerD1Ev>
    6308:	08 95       	ret

0000630a <__fixsfsi>:
    630a:	0e 94 8c 31 	call	0x6318	; 0x6318 <__fixunssfsi>
    630e:	68 94       	set
    6310:	b1 11       	cpse	r27, r1
    6312:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <__fp_szero>
    6316:	08 95       	ret

00006318 <__fixunssfsi>:
    6318:	0e 94 00 32 	call	0x6400	; 0x6400 <__fp_splitA>
    631c:	88 f0       	brcs	.+34     	; 0x6340 <__fixunssfsi+0x28>
    631e:	9f 57       	subi	r25, 0x7F	; 127
    6320:	98 f0       	brcs	.+38     	; 0x6348 <__fixunssfsi+0x30>
    6322:	b9 2f       	mov	r27, r25
    6324:	99 27       	eor	r25, r25
    6326:	b7 51       	subi	r27, 0x17	; 23
    6328:	b0 f0       	brcs	.+44     	; 0x6356 <__fixunssfsi+0x3e>
    632a:	e1 f0       	breq	.+56     	; 0x6364 <__fixunssfsi+0x4c>
    632c:	66 0f       	add	r22, r22
    632e:	77 1f       	adc	r23, r23
    6330:	88 1f       	adc	r24, r24
    6332:	99 1f       	adc	r25, r25
    6334:	1a f0       	brmi	.+6      	; 0x633c <__fixunssfsi+0x24>
    6336:	ba 95       	dec	r27
    6338:	c9 f7       	brne	.-14     	; 0x632c <__fixunssfsi+0x14>
    633a:	14 c0       	rjmp	.+40     	; 0x6364 <__fixunssfsi+0x4c>
    633c:	b1 30       	cpi	r27, 0x01	; 1
    633e:	91 f0       	breq	.+36     	; 0x6364 <__fixunssfsi+0x4c>
    6340:	0e 94 1a 32 	call	0x6434	; 0x6434 <__fp_zero>
    6344:	b1 e0       	ldi	r27, 0x01	; 1
    6346:	08 95       	ret
    6348:	0c 94 1a 32 	jmp	0x6434	; 0x6434 <__fp_zero>
    634c:	67 2f       	mov	r22, r23
    634e:	78 2f       	mov	r23, r24
    6350:	88 27       	eor	r24, r24
    6352:	b8 5f       	subi	r27, 0xF8	; 248
    6354:	39 f0       	breq	.+14     	; 0x6364 <__fixunssfsi+0x4c>
    6356:	b9 3f       	cpi	r27, 0xF9	; 249
    6358:	cc f3       	brlt	.-14     	; 0x634c <__fixunssfsi+0x34>
    635a:	86 95       	lsr	r24
    635c:	77 95       	ror	r23
    635e:	67 95       	ror	r22
    6360:	b3 95       	inc	r27
    6362:	d9 f7       	brne	.-10     	; 0x635a <__fixunssfsi+0x42>
    6364:	3e f4       	brtc	.+14     	; 0x6374 <__fixunssfsi+0x5c>
    6366:	90 95       	com	r25
    6368:	80 95       	com	r24
    636a:	70 95       	com	r23
    636c:	61 95       	neg	r22
    636e:	7f 4f       	sbci	r23, 0xFF	; 255
    6370:	8f 4f       	sbci	r24, 0xFF	; 255
    6372:	9f 4f       	sbci	r25, 0xFF	; 255
    6374:	08 95       	ret

00006376 <__floatunsisf>:
    6376:	e8 94       	clt
    6378:	09 c0       	rjmp	.+18     	; 0x638c <__floatsisf+0x12>

0000637a <__floatsisf>:
    637a:	97 fb       	bst	r25, 7
    637c:	3e f4       	brtc	.+14     	; 0x638c <__floatsisf+0x12>
    637e:	90 95       	com	r25
    6380:	80 95       	com	r24
    6382:	70 95       	com	r23
    6384:	61 95       	neg	r22
    6386:	7f 4f       	sbci	r23, 0xFF	; 255
    6388:	8f 4f       	sbci	r24, 0xFF	; 255
    638a:	9f 4f       	sbci	r25, 0xFF	; 255
    638c:	99 23       	and	r25, r25
    638e:	a9 f0       	breq	.+42     	; 0x63ba <__floatsisf+0x40>
    6390:	f9 2f       	mov	r31, r25
    6392:	96 e9       	ldi	r25, 0x96	; 150
    6394:	bb 27       	eor	r27, r27
    6396:	93 95       	inc	r25
    6398:	f6 95       	lsr	r31
    639a:	87 95       	ror	r24
    639c:	77 95       	ror	r23
    639e:	67 95       	ror	r22
    63a0:	b7 95       	ror	r27
    63a2:	f1 11       	cpse	r31, r1
    63a4:	f8 cf       	rjmp	.-16     	; 0x6396 <__floatsisf+0x1c>
    63a6:	fa f4       	brpl	.+62     	; 0x63e6 <__floatsisf+0x6c>
    63a8:	bb 0f       	add	r27, r27
    63aa:	11 f4       	brne	.+4      	; 0x63b0 <__floatsisf+0x36>
    63ac:	60 ff       	sbrs	r22, 0
    63ae:	1b c0       	rjmp	.+54     	; 0x63e6 <__floatsisf+0x6c>
    63b0:	6f 5f       	subi	r22, 0xFF	; 255
    63b2:	7f 4f       	sbci	r23, 0xFF	; 255
    63b4:	8f 4f       	sbci	r24, 0xFF	; 255
    63b6:	9f 4f       	sbci	r25, 0xFF	; 255
    63b8:	16 c0       	rjmp	.+44     	; 0x63e6 <__floatsisf+0x6c>
    63ba:	88 23       	and	r24, r24
    63bc:	11 f0       	breq	.+4      	; 0x63c2 <__floatsisf+0x48>
    63be:	96 e9       	ldi	r25, 0x96	; 150
    63c0:	11 c0       	rjmp	.+34     	; 0x63e4 <__floatsisf+0x6a>
    63c2:	77 23       	and	r23, r23
    63c4:	21 f0       	breq	.+8      	; 0x63ce <__floatsisf+0x54>
    63c6:	9e e8       	ldi	r25, 0x8E	; 142
    63c8:	87 2f       	mov	r24, r23
    63ca:	76 2f       	mov	r23, r22
    63cc:	05 c0       	rjmp	.+10     	; 0x63d8 <__floatsisf+0x5e>
    63ce:	66 23       	and	r22, r22
    63d0:	71 f0       	breq	.+28     	; 0x63ee <__floatsisf+0x74>
    63d2:	96 e8       	ldi	r25, 0x86	; 134
    63d4:	86 2f       	mov	r24, r22
    63d6:	70 e0       	ldi	r23, 0x00	; 0
    63d8:	60 e0       	ldi	r22, 0x00	; 0
    63da:	2a f0       	brmi	.+10     	; 0x63e6 <__floatsisf+0x6c>
    63dc:	9a 95       	dec	r25
    63de:	66 0f       	add	r22, r22
    63e0:	77 1f       	adc	r23, r23
    63e2:	88 1f       	adc	r24, r24
    63e4:	da f7       	brpl	.-10     	; 0x63dc <__floatsisf+0x62>
    63e6:	88 0f       	add	r24, r24
    63e8:	96 95       	lsr	r25
    63ea:	87 95       	ror	r24
    63ec:	97 f9       	bld	r25, 7
    63ee:	08 95       	ret

000063f0 <__fp_split3>:
    63f0:	57 fd       	sbrc	r21, 7
    63f2:	90 58       	subi	r25, 0x80	; 128
    63f4:	44 0f       	add	r20, r20
    63f6:	55 1f       	adc	r21, r21
    63f8:	59 f0       	breq	.+22     	; 0x6410 <__fp_splitA+0x10>
    63fa:	5f 3f       	cpi	r21, 0xFF	; 255
    63fc:	71 f0       	breq	.+28     	; 0x641a <__fp_splitA+0x1a>
    63fe:	47 95       	ror	r20

00006400 <__fp_splitA>:
    6400:	88 0f       	add	r24, r24
    6402:	97 fb       	bst	r25, 7
    6404:	99 1f       	adc	r25, r25
    6406:	61 f0       	breq	.+24     	; 0x6420 <__fp_splitA+0x20>
    6408:	9f 3f       	cpi	r25, 0xFF	; 255
    640a:	79 f0       	breq	.+30     	; 0x642a <__fp_splitA+0x2a>
    640c:	87 95       	ror	r24
    640e:	08 95       	ret
    6410:	12 16       	cp	r1, r18
    6412:	13 06       	cpc	r1, r19
    6414:	14 06       	cpc	r1, r20
    6416:	55 1f       	adc	r21, r21
    6418:	f2 cf       	rjmp	.-28     	; 0x63fe <__fp_split3+0xe>
    641a:	46 95       	lsr	r20
    641c:	f1 df       	rcall	.-30     	; 0x6400 <__fp_splitA>
    641e:	08 c0       	rjmp	.+16     	; 0x6430 <__fp_splitA+0x30>
    6420:	16 16       	cp	r1, r22
    6422:	17 06       	cpc	r1, r23
    6424:	18 06       	cpc	r1, r24
    6426:	99 1f       	adc	r25, r25
    6428:	f1 cf       	rjmp	.-30     	; 0x640c <__fp_splitA+0xc>
    642a:	86 95       	lsr	r24
    642c:	71 05       	cpc	r23, r1
    642e:	61 05       	cpc	r22, r1
    6430:	08 94       	sec
    6432:	08 95       	ret

00006434 <__fp_zero>:
    6434:	e8 94       	clt

00006436 <__fp_szero>:
    6436:	bb 27       	eor	r27, r27
    6438:	66 27       	eor	r22, r22
    643a:	77 27       	eor	r23, r23
    643c:	cb 01       	movw	r24, r22
    643e:	97 f9       	bld	r25, 7
    6440:	08 95       	ret

00006442 <__mulsf3>:
    6442:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3x>
    6446:	0c 94 a5 32 	jmp	0x654a	; 0x654a <__fp_round>
    644a:	0e 94 97 32 	call	0x652e	; 0x652e <__fp_pscA>
    644e:	38 f0       	brcs	.+14     	; 0x645e <__mulsf3+0x1c>
    6450:	0e 94 9e 32 	call	0x653c	; 0x653c <__fp_pscB>
    6454:	20 f0       	brcs	.+8      	; 0x645e <__mulsf3+0x1c>
    6456:	95 23       	and	r25, r21
    6458:	11 f0       	breq	.+4      	; 0x645e <__mulsf3+0x1c>
    645a:	0c 94 8e 32 	jmp	0x651c	; 0x651c <__fp_inf>
    645e:	0c 94 94 32 	jmp	0x6528	; 0x6528 <__fp_nan>
    6462:	11 24       	eor	r1, r1
    6464:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <__fp_szero>

00006468 <__mulsf3x>:
    6468:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <__fp_split3>
    646c:	70 f3       	brcs	.-36     	; 0x644a <__mulsf3+0x8>

0000646e <__mulsf3_pse>:
    646e:	95 9f       	mul	r25, r21
    6470:	c1 f3       	breq	.-16     	; 0x6462 <__mulsf3+0x20>
    6472:	95 0f       	add	r25, r21
    6474:	50 e0       	ldi	r21, 0x00	; 0
    6476:	55 1f       	adc	r21, r21
    6478:	62 9f       	mul	r22, r18
    647a:	f0 01       	movw	r30, r0
    647c:	72 9f       	mul	r23, r18
    647e:	bb 27       	eor	r27, r27
    6480:	f0 0d       	add	r31, r0
    6482:	b1 1d       	adc	r27, r1
    6484:	63 9f       	mul	r22, r19
    6486:	aa 27       	eor	r26, r26
    6488:	f0 0d       	add	r31, r0
    648a:	b1 1d       	adc	r27, r1
    648c:	aa 1f       	adc	r26, r26
    648e:	64 9f       	mul	r22, r20
    6490:	66 27       	eor	r22, r22
    6492:	b0 0d       	add	r27, r0
    6494:	a1 1d       	adc	r26, r1
    6496:	66 1f       	adc	r22, r22
    6498:	82 9f       	mul	r24, r18
    649a:	22 27       	eor	r18, r18
    649c:	b0 0d       	add	r27, r0
    649e:	a1 1d       	adc	r26, r1
    64a0:	62 1f       	adc	r22, r18
    64a2:	73 9f       	mul	r23, r19
    64a4:	b0 0d       	add	r27, r0
    64a6:	a1 1d       	adc	r26, r1
    64a8:	62 1f       	adc	r22, r18
    64aa:	83 9f       	mul	r24, r19
    64ac:	a0 0d       	add	r26, r0
    64ae:	61 1d       	adc	r22, r1
    64b0:	22 1f       	adc	r18, r18
    64b2:	74 9f       	mul	r23, r20
    64b4:	33 27       	eor	r19, r19
    64b6:	a0 0d       	add	r26, r0
    64b8:	61 1d       	adc	r22, r1
    64ba:	23 1f       	adc	r18, r19
    64bc:	84 9f       	mul	r24, r20
    64be:	60 0d       	add	r22, r0
    64c0:	21 1d       	adc	r18, r1
    64c2:	82 2f       	mov	r24, r18
    64c4:	76 2f       	mov	r23, r22
    64c6:	6a 2f       	mov	r22, r26
    64c8:	11 24       	eor	r1, r1
    64ca:	9f 57       	subi	r25, 0x7F	; 127
    64cc:	50 40       	sbci	r21, 0x00	; 0
    64ce:	9a f0       	brmi	.+38     	; 0x64f6 <__mulsf3_pse+0x88>
    64d0:	f1 f0       	breq	.+60     	; 0x650e <__mulsf3_pse+0xa0>
    64d2:	88 23       	and	r24, r24
    64d4:	4a f0       	brmi	.+18     	; 0x64e8 <__mulsf3_pse+0x7a>
    64d6:	ee 0f       	add	r30, r30
    64d8:	ff 1f       	adc	r31, r31
    64da:	bb 1f       	adc	r27, r27
    64dc:	66 1f       	adc	r22, r22
    64de:	77 1f       	adc	r23, r23
    64e0:	88 1f       	adc	r24, r24
    64e2:	91 50       	subi	r25, 0x01	; 1
    64e4:	50 40       	sbci	r21, 0x00	; 0
    64e6:	a9 f7       	brne	.-22     	; 0x64d2 <__mulsf3_pse+0x64>
    64e8:	9e 3f       	cpi	r25, 0xFE	; 254
    64ea:	51 05       	cpc	r21, r1
    64ec:	80 f0       	brcs	.+32     	; 0x650e <__mulsf3_pse+0xa0>
    64ee:	0c 94 8e 32 	jmp	0x651c	; 0x651c <__fp_inf>
    64f2:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <__fp_szero>
    64f6:	5f 3f       	cpi	r21, 0xFF	; 255
    64f8:	e4 f3       	brlt	.-8      	; 0x64f2 <__mulsf3_pse+0x84>
    64fa:	98 3e       	cpi	r25, 0xE8	; 232
    64fc:	d4 f3       	brlt	.-12     	; 0x64f2 <__mulsf3_pse+0x84>
    64fe:	86 95       	lsr	r24
    6500:	77 95       	ror	r23
    6502:	67 95       	ror	r22
    6504:	b7 95       	ror	r27
    6506:	f7 95       	ror	r31
    6508:	e7 95       	ror	r30
    650a:	9f 5f       	subi	r25, 0xFF	; 255
    650c:	c1 f7       	brne	.-16     	; 0x64fe <__mulsf3_pse+0x90>
    650e:	fe 2b       	or	r31, r30
    6510:	88 0f       	add	r24, r24
    6512:	91 1d       	adc	r25, r1
    6514:	96 95       	lsr	r25
    6516:	87 95       	ror	r24
    6518:	97 f9       	bld	r25, 7
    651a:	08 95       	ret

0000651c <__fp_inf>:
    651c:	97 f9       	bld	r25, 7
    651e:	9f 67       	ori	r25, 0x7F	; 127
    6520:	80 e8       	ldi	r24, 0x80	; 128
    6522:	70 e0       	ldi	r23, 0x00	; 0
    6524:	60 e0       	ldi	r22, 0x00	; 0
    6526:	08 95       	ret

00006528 <__fp_nan>:
    6528:	9f ef       	ldi	r25, 0xFF	; 255
    652a:	80 ec       	ldi	r24, 0xC0	; 192
    652c:	08 95       	ret

0000652e <__fp_pscA>:
    652e:	00 24       	eor	r0, r0
    6530:	0a 94       	dec	r0
    6532:	16 16       	cp	r1, r22
    6534:	17 06       	cpc	r1, r23
    6536:	18 06       	cpc	r1, r24
    6538:	09 06       	cpc	r0, r25
    653a:	08 95       	ret

0000653c <__fp_pscB>:
    653c:	00 24       	eor	r0, r0
    653e:	0a 94       	dec	r0
    6540:	12 16       	cp	r1, r18
    6542:	13 06       	cpc	r1, r19
    6544:	14 06       	cpc	r1, r20
    6546:	05 06       	cpc	r0, r21
    6548:	08 95       	ret

0000654a <__fp_round>:
    654a:	09 2e       	mov	r0, r25
    654c:	03 94       	inc	r0
    654e:	00 0c       	add	r0, r0
    6550:	11 f4       	brne	.+4      	; 0x6556 <__fp_round+0xc>
    6552:	88 23       	and	r24, r24
    6554:	52 f0       	brmi	.+20     	; 0x656a <__fp_round+0x20>
    6556:	bb 0f       	add	r27, r27
    6558:	40 f4       	brcc	.+16     	; 0x656a <__fp_round+0x20>
    655a:	bf 2b       	or	r27, r31
    655c:	11 f4       	brne	.+4      	; 0x6562 <__fp_round+0x18>
    655e:	60 ff       	sbrs	r22, 0
    6560:	04 c0       	rjmp	.+8      	; 0x656a <__fp_round+0x20>
    6562:	6f 5f       	subi	r22, 0xFF	; 255
    6564:	7f 4f       	sbci	r23, 0xFF	; 255
    6566:	8f 4f       	sbci	r24, 0xFF	; 255
    6568:	9f 4f       	sbci	r25, 0xFF	; 255
    656a:	08 95       	ret

0000656c <__mulsi3>:
    656c:	db 01       	movw	r26, r22
    656e:	8f 93       	push	r24
    6570:	9f 93       	push	r25
    6572:	0e 94 46 33 	call	0x668c	; 0x668c <__muluhisi3>
    6576:	bf 91       	pop	r27
    6578:	af 91       	pop	r26
    657a:	a2 9f       	mul	r26, r18
    657c:	80 0d       	add	r24, r0
    657e:	91 1d       	adc	r25, r1
    6580:	a3 9f       	mul	r26, r19
    6582:	90 0d       	add	r25, r0
    6584:	b2 9f       	mul	r27, r18
    6586:	90 0d       	add	r25, r0
    6588:	11 24       	eor	r1, r1
    658a:	08 95       	ret

0000658c <__udivmodhi4>:
    658c:	aa 1b       	sub	r26, r26
    658e:	bb 1b       	sub	r27, r27
    6590:	51 e1       	ldi	r21, 0x11	; 17
    6592:	07 c0       	rjmp	.+14     	; 0x65a2 <__udivmodhi4_ep>

00006594 <__udivmodhi4_loop>:
    6594:	aa 1f       	adc	r26, r26
    6596:	bb 1f       	adc	r27, r27
    6598:	a6 17       	cp	r26, r22
    659a:	b7 07       	cpc	r27, r23
    659c:	10 f0       	brcs	.+4      	; 0x65a2 <__udivmodhi4_ep>
    659e:	a6 1b       	sub	r26, r22
    65a0:	b7 0b       	sbc	r27, r23

000065a2 <__udivmodhi4_ep>:
    65a2:	88 1f       	adc	r24, r24
    65a4:	99 1f       	adc	r25, r25
    65a6:	5a 95       	dec	r21
    65a8:	a9 f7       	brne	.-22     	; 0x6594 <__udivmodhi4_loop>
    65aa:	80 95       	com	r24
    65ac:	90 95       	com	r25
    65ae:	bc 01       	movw	r22, r24
    65b0:	cd 01       	movw	r24, r26
    65b2:	08 95       	ret

000065b4 <__divmodhi4>:
    65b4:	97 fb       	bst	r25, 7
    65b6:	07 2e       	mov	r0, r23
    65b8:	16 f4       	brtc	.+4      	; 0x65be <__divmodhi4+0xa>
    65ba:	00 94       	com	r0
    65bc:	07 d0       	rcall	.+14     	; 0x65cc <__divmodhi4_neg1>
    65be:	77 fd       	sbrc	r23, 7
    65c0:	09 d0       	rcall	.+18     	; 0x65d4 <__divmodhi4_neg2>
    65c2:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivmodhi4>
    65c6:	07 fc       	sbrc	r0, 7
    65c8:	05 d0       	rcall	.+10     	; 0x65d4 <__divmodhi4_neg2>
    65ca:	3e f4       	brtc	.+14     	; 0x65da <__divmodhi4_exit>

000065cc <__divmodhi4_neg1>:
    65cc:	90 95       	com	r25
    65ce:	81 95       	neg	r24
    65d0:	9f 4f       	sbci	r25, 0xFF	; 255
    65d2:	08 95       	ret

000065d4 <__divmodhi4_neg2>:
    65d4:	70 95       	com	r23
    65d6:	61 95       	neg	r22
    65d8:	7f 4f       	sbci	r23, 0xFF	; 255

000065da <__divmodhi4_exit>:
    65da:	08 95       	ret

000065dc <__udivmodsi4>:
    65dc:	a1 e2       	ldi	r26, 0x21	; 33
    65de:	1a 2e       	mov	r1, r26
    65e0:	aa 1b       	sub	r26, r26
    65e2:	bb 1b       	sub	r27, r27
    65e4:	fd 01       	movw	r30, r26
    65e6:	0d c0       	rjmp	.+26     	; 0x6602 <__udivmodsi4_ep>

000065e8 <__udivmodsi4_loop>:
    65e8:	aa 1f       	adc	r26, r26
    65ea:	bb 1f       	adc	r27, r27
    65ec:	ee 1f       	adc	r30, r30
    65ee:	ff 1f       	adc	r31, r31
    65f0:	a2 17       	cp	r26, r18
    65f2:	b3 07       	cpc	r27, r19
    65f4:	e4 07       	cpc	r30, r20
    65f6:	f5 07       	cpc	r31, r21
    65f8:	20 f0       	brcs	.+8      	; 0x6602 <__udivmodsi4_ep>
    65fa:	a2 1b       	sub	r26, r18
    65fc:	b3 0b       	sbc	r27, r19
    65fe:	e4 0b       	sbc	r30, r20
    6600:	f5 0b       	sbc	r31, r21

00006602 <__udivmodsi4_ep>:
    6602:	66 1f       	adc	r22, r22
    6604:	77 1f       	adc	r23, r23
    6606:	88 1f       	adc	r24, r24
    6608:	99 1f       	adc	r25, r25
    660a:	1a 94       	dec	r1
    660c:	69 f7       	brne	.-38     	; 0x65e8 <__udivmodsi4_loop>
    660e:	60 95       	com	r22
    6610:	70 95       	com	r23
    6612:	80 95       	com	r24
    6614:	90 95       	com	r25
    6616:	9b 01       	movw	r18, r22
    6618:	ac 01       	movw	r20, r24
    661a:	bd 01       	movw	r22, r26
    661c:	cf 01       	movw	r24, r30
    661e:	08 95       	ret

00006620 <__divmodsi4>:
    6620:	05 2e       	mov	r0, r21
    6622:	97 fb       	bst	r25, 7
    6624:	1e f4       	brtc	.+6      	; 0x662c <__divmodsi4+0xc>
    6626:	00 94       	com	r0
    6628:	0e 94 27 33 	call	0x664e	; 0x664e <__negsi2>
    662c:	57 fd       	sbrc	r21, 7
    662e:	07 d0       	rcall	.+14     	; 0x663e <__divmodsi4_neg2>
    6630:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
    6634:	07 fc       	sbrc	r0, 7
    6636:	03 d0       	rcall	.+6      	; 0x663e <__divmodsi4_neg2>
    6638:	4e f4       	brtc	.+18     	; 0x664c <__divmodsi4_exit>
    663a:	0c 94 27 33 	jmp	0x664e	; 0x664e <__negsi2>

0000663e <__divmodsi4_neg2>:
    663e:	50 95       	com	r21
    6640:	40 95       	com	r20
    6642:	30 95       	com	r19
    6644:	21 95       	neg	r18
    6646:	3f 4f       	sbci	r19, 0xFF	; 255
    6648:	4f 4f       	sbci	r20, 0xFF	; 255
    664a:	5f 4f       	sbci	r21, 0xFF	; 255

0000664c <__divmodsi4_exit>:
    664c:	08 95       	ret

0000664e <__negsi2>:
    664e:	90 95       	com	r25
    6650:	80 95       	com	r24
    6652:	70 95       	com	r23
    6654:	61 95       	neg	r22
    6656:	7f 4f       	sbci	r23, 0xFF	; 255
    6658:	8f 4f       	sbci	r24, 0xFF	; 255
    665a:	9f 4f       	sbci	r25, 0xFF	; 255
    665c:	08 95       	ret

0000665e <__tablejump2__>:
    665e:	ee 0f       	add	r30, r30
    6660:	ff 1f       	adc	r31, r31
    6662:	88 1f       	adc	r24, r24
    6664:	8b bf       	out	0x3b, r24	; 59
    6666:	07 90       	elpm	r0, Z+
    6668:	f6 91       	elpm	r31, Z
    666a:	e0 2d       	mov	r30, r0
    666c:	19 94       	eijmp

0000666e <__umulhisi3>:
    666e:	a2 9f       	mul	r26, r18
    6670:	b0 01       	movw	r22, r0
    6672:	b3 9f       	mul	r27, r19
    6674:	c0 01       	movw	r24, r0
    6676:	a3 9f       	mul	r26, r19
    6678:	70 0d       	add	r23, r0
    667a:	81 1d       	adc	r24, r1
    667c:	11 24       	eor	r1, r1
    667e:	91 1d       	adc	r25, r1
    6680:	b2 9f       	mul	r27, r18
    6682:	70 0d       	add	r23, r0
    6684:	81 1d       	adc	r24, r1
    6686:	11 24       	eor	r1, r1
    6688:	91 1d       	adc	r25, r1
    668a:	08 95       	ret

0000668c <__muluhisi3>:
    668c:	0e 94 37 33 	call	0x666e	; 0x666e <__umulhisi3>
    6690:	a5 9f       	mul	r26, r21
    6692:	90 0d       	add	r25, r0
    6694:	b4 9f       	mul	r27, r20
    6696:	90 0d       	add	r25, r0
    6698:	a4 9f       	mul	r26, r20
    669a:	80 0d       	add	r24, r0
    669c:	91 1d       	adc	r25, r1
    669e:	11 24       	eor	r1, r1
    66a0:	08 95       	ret

000066a2 <malloc>:
    66a2:	cf 93       	push	r28
    66a4:	df 93       	push	r29
    66a6:	82 30       	cpi	r24, 0x02	; 2
    66a8:	91 05       	cpc	r25, r1
    66aa:	10 f4       	brcc	.+4      	; 0x66b0 <malloc+0xe>
    66ac:	82 e0       	ldi	r24, 0x02	; 2
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	e0 91 99 25 	lds	r30, 0x2599
    66b4:	f0 91 9a 25 	lds	r31, 0x259A
    66b8:	20 e0       	ldi	r18, 0x00	; 0
    66ba:	30 e0       	ldi	r19, 0x00	; 0
    66bc:	c0 e0       	ldi	r28, 0x00	; 0
    66be:	d0 e0       	ldi	r29, 0x00	; 0
    66c0:	30 97       	sbiw	r30, 0x00	; 0
    66c2:	11 f1       	breq	.+68     	; 0x6708 <malloc+0x66>
    66c4:	40 81       	ld	r20, Z
    66c6:	51 81       	ldd	r21, Z+1	; 0x01
    66c8:	48 17       	cp	r20, r24
    66ca:	59 07       	cpc	r21, r25
    66cc:	c0 f0       	brcs	.+48     	; 0x66fe <malloc+0x5c>
    66ce:	48 17       	cp	r20, r24
    66d0:	59 07       	cpc	r21, r25
    66d2:	61 f4       	brne	.+24     	; 0x66ec <malloc+0x4a>
    66d4:	82 81       	ldd	r24, Z+2	; 0x02
    66d6:	93 81       	ldd	r25, Z+3	; 0x03
    66d8:	20 97       	sbiw	r28, 0x00	; 0
    66da:	19 f0       	breq	.+6      	; 0x66e2 <malloc+0x40>
    66dc:	8a 83       	std	Y+2, r24	; 0x02
    66de:	9b 83       	std	Y+3, r25	; 0x03
    66e0:	2b c0       	rjmp	.+86     	; 0x6738 <malloc+0x96>
    66e2:	80 93 99 25 	sts	0x2599, r24
    66e6:	90 93 9a 25 	sts	0x259A, r25
    66ea:	26 c0       	rjmp	.+76     	; 0x6738 <malloc+0x96>
    66ec:	21 15       	cp	r18, r1
    66ee:	31 05       	cpc	r19, r1
    66f0:	19 f0       	breq	.+6      	; 0x66f8 <malloc+0x56>
    66f2:	42 17       	cp	r20, r18
    66f4:	53 07       	cpc	r21, r19
    66f6:	18 f4       	brcc	.+6      	; 0x66fe <malloc+0x5c>
    66f8:	9a 01       	movw	r18, r20
    66fa:	be 01       	movw	r22, r28
    66fc:	df 01       	movw	r26, r30
    66fe:	ef 01       	movw	r28, r30
    6700:	02 80       	ldd	r0, Z+2	; 0x02
    6702:	f3 81       	ldd	r31, Z+3	; 0x03
    6704:	e0 2d       	mov	r30, r0
    6706:	dc cf       	rjmp	.-72     	; 0x66c0 <malloc+0x1e>
    6708:	21 15       	cp	r18, r1
    670a:	31 05       	cpc	r19, r1
    670c:	09 f1       	breq	.+66     	; 0x6750 <malloc+0xae>
    670e:	28 1b       	sub	r18, r24
    6710:	39 0b       	sbc	r19, r25
    6712:	24 30       	cpi	r18, 0x04	; 4
    6714:	31 05       	cpc	r19, r1
    6716:	90 f4       	brcc	.+36     	; 0x673c <malloc+0x9a>
    6718:	12 96       	adiw	r26, 0x02	; 2
    671a:	8d 91       	ld	r24, X+
    671c:	9c 91       	ld	r25, X
    671e:	13 97       	sbiw	r26, 0x03	; 3
    6720:	61 15       	cp	r22, r1
    6722:	71 05       	cpc	r23, r1
    6724:	21 f0       	breq	.+8      	; 0x672e <malloc+0x8c>
    6726:	fb 01       	movw	r30, r22
    6728:	82 83       	std	Z+2, r24	; 0x02
    672a:	93 83       	std	Z+3, r25	; 0x03
    672c:	04 c0       	rjmp	.+8      	; 0x6736 <malloc+0x94>
    672e:	80 93 99 25 	sts	0x2599, r24
    6732:	90 93 9a 25 	sts	0x259A, r25
    6736:	fd 01       	movw	r30, r26
    6738:	32 96       	adiw	r30, 0x02	; 2
    673a:	44 c0       	rjmp	.+136    	; 0x67c4 <malloc+0x122>
    673c:	fd 01       	movw	r30, r26
    673e:	e2 0f       	add	r30, r18
    6740:	f3 1f       	adc	r31, r19
    6742:	81 93       	st	Z+, r24
    6744:	91 93       	st	Z+, r25
    6746:	22 50       	subi	r18, 0x02	; 2
    6748:	31 09       	sbc	r19, r1
    674a:	2d 93       	st	X+, r18
    674c:	3c 93       	st	X, r19
    674e:	3a c0       	rjmp	.+116    	; 0x67c4 <malloc+0x122>
    6750:	20 91 97 25 	lds	r18, 0x2597
    6754:	30 91 98 25 	lds	r19, 0x2598
    6758:	23 2b       	or	r18, r19
    675a:	41 f4       	brne	.+16     	; 0x676c <malloc+0xca>
    675c:	20 91 02 20 	lds	r18, 0x2002
    6760:	30 91 03 20 	lds	r19, 0x2003
    6764:	20 93 97 25 	sts	0x2597, r18
    6768:	30 93 98 25 	sts	0x2598, r19
    676c:	20 91 00 20 	lds	r18, 0x2000
    6770:	30 91 01 20 	lds	r19, 0x2001
    6774:	21 15       	cp	r18, r1
    6776:	31 05       	cpc	r19, r1
    6778:	41 f4       	brne	.+16     	; 0x678a <malloc+0xe8>
    677a:	2d b7       	in	r18, 0x3d	; 61
    677c:	3e b7       	in	r19, 0x3e	; 62
    677e:	40 91 04 20 	lds	r20, 0x2004
    6782:	50 91 05 20 	lds	r21, 0x2005
    6786:	24 1b       	sub	r18, r20
    6788:	35 0b       	sbc	r19, r21
    678a:	e0 91 97 25 	lds	r30, 0x2597
    678e:	f0 91 98 25 	lds	r31, 0x2598
    6792:	e2 17       	cp	r30, r18
    6794:	f3 07       	cpc	r31, r19
    6796:	a0 f4       	brcc	.+40     	; 0x67c0 <malloc+0x11e>
    6798:	2e 1b       	sub	r18, r30
    679a:	3f 0b       	sbc	r19, r31
    679c:	28 17       	cp	r18, r24
    679e:	39 07       	cpc	r19, r25
    67a0:	78 f0       	brcs	.+30     	; 0x67c0 <malloc+0x11e>
    67a2:	ac 01       	movw	r20, r24
    67a4:	4e 5f       	subi	r20, 0xFE	; 254
    67a6:	5f 4f       	sbci	r21, 0xFF	; 255
    67a8:	24 17       	cp	r18, r20
    67aa:	35 07       	cpc	r19, r21
    67ac:	48 f0       	brcs	.+18     	; 0x67c0 <malloc+0x11e>
    67ae:	4e 0f       	add	r20, r30
    67b0:	5f 1f       	adc	r21, r31
    67b2:	40 93 97 25 	sts	0x2597, r20
    67b6:	50 93 98 25 	sts	0x2598, r21
    67ba:	81 93       	st	Z+, r24
    67bc:	91 93       	st	Z+, r25
    67be:	02 c0       	rjmp	.+4      	; 0x67c4 <malloc+0x122>
    67c0:	e0 e0       	ldi	r30, 0x00	; 0
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	cf 01       	movw	r24, r30
    67c6:	df 91       	pop	r29
    67c8:	cf 91       	pop	r28
    67ca:	08 95       	ret

000067cc <free>:
    67cc:	0f 93       	push	r16
    67ce:	1f 93       	push	r17
    67d0:	cf 93       	push	r28
    67d2:	df 93       	push	r29
    67d4:	00 97       	sbiw	r24, 0x00	; 0
    67d6:	09 f4       	brne	.+2      	; 0x67da <free+0xe>
    67d8:	8c c0       	rjmp	.+280    	; 0x68f2 <free+0x126>
    67da:	fc 01       	movw	r30, r24
    67dc:	32 97       	sbiw	r30, 0x02	; 2
    67de:	12 82       	std	Z+2, r1	; 0x02
    67e0:	13 82       	std	Z+3, r1	; 0x03
    67e2:	00 91 99 25 	lds	r16, 0x2599
    67e6:	10 91 9a 25 	lds	r17, 0x259A
    67ea:	01 15       	cp	r16, r1
    67ec:	11 05       	cpc	r17, r1
    67ee:	81 f4       	brne	.+32     	; 0x6810 <free+0x44>
    67f0:	20 81       	ld	r18, Z
    67f2:	31 81       	ldd	r19, Z+1	; 0x01
    67f4:	82 0f       	add	r24, r18
    67f6:	93 1f       	adc	r25, r19
    67f8:	20 91 97 25 	lds	r18, 0x2597
    67fc:	30 91 98 25 	lds	r19, 0x2598
    6800:	28 17       	cp	r18, r24
    6802:	39 07       	cpc	r19, r25
    6804:	79 f5       	brne	.+94     	; 0x6864 <free+0x98>
    6806:	e0 93 97 25 	sts	0x2597, r30
    680a:	f0 93 98 25 	sts	0x2598, r31
    680e:	71 c0       	rjmp	.+226    	; 0x68f2 <free+0x126>
    6810:	d8 01       	movw	r26, r16
    6812:	40 e0       	ldi	r20, 0x00	; 0
    6814:	50 e0       	ldi	r21, 0x00	; 0
    6816:	ae 17       	cp	r26, r30
    6818:	bf 07       	cpc	r27, r31
    681a:	50 f4       	brcc	.+20     	; 0x6830 <free+0x64>
    681c:	12 96       	adiw	r26, 0x02	; 2
    681e:	2d 91       	ld	r18, X+
    6820:	3c 91       	ld	r19, X
    6822:	13 97       	sbiw	r26, 0x03	; 3
    6824:	ad 01       	movw	r20, r26
    6826:	21 15       	cp	r18, r1
    6828:	31 05       	cpc	r19, r1
    682a:	09 f1       	breq	.+66     	; 0x686e <free+0xa2>
    682c:	d9 01       	movw	r26, r18
    682e:	f3 cf       	rjmp	.-26     	; 0x6816 <free+0x4a>
    6830:	9d 01       	movw	r18, r26
    6832:	da 01       	movw	r26, r20
    6834:	22 83       	std	Z+2, r18	; 0x02
    6836:	33 83       	std	Z+3, r19	; 0x03
    6838:	60 81       	ld	r22, Z
    683a:	71 81       	ldd	r23, Z+1	; 0x01
    683c:	86 0f       	add	r24, r22
    683e:	97 1f       	adc	r25, r23
    6840:	82 17       	cp	r24, r18
    6842:	93 07       	cpc	r25, r19
    6844:	69 f4       	brne	.+26     	; 0x6860 <free+0x94>
    6846:	ec 01       	movw	r28, r24
    6848:	28 81       	ld	r18, Y
    684a:	39 81       	ldd	r19, Y+1	; 0x01
    684c:	26 0f       	add	r18, r22
    684e:	37 1f       	adc	r19, r23
    6850:	2e 5f       	subi	r18, 0xFE	; 254
    6852:	3f 4f       	sbci	r19, 0xFF	; 255
    6854:	20 83       	st	Z, r18
    6856:	31 83       	std	Z+1, r19	; 0x01
    6858:	8a 81       	ldd	r24, Y+2	; 0x02
    685a:	9b 81       	ldd	r25, Y+3	; 0x03
    685c:	82 83       	std	Z+2, r24	; 0x02
    685e:	93 83       	std	Z+3, r25	; 0x03
    6860:	45 2b       	or	r20, r21
    6862:	29 f4       	brne	.+10     	; 0x686e <free+0xa2>
    6864:	e0 93 99 25 	sts	0x2599, r30
    6868:	f0 93 9a 25 	sts	0x259A, r31
    686c:	42 c0       	rjmp	.+132    	; 0x68f2 <free+0x126>
    686e:	12 96       	adiw	r26, 0x02	; 2
    6870:	ed 93       	st	X+, r30
    6872:	fc 93       	st	X, r31
    6874:	13 97       	sbiw	r26, 0x03	; 3
    6876:	ed 01       	movw	r28, r26
    6878:	49 91       	ld	r20, Y+
    687a:	59 91       	ld	r21, Y+
    687c:	9e 01       	movw	r18, r28
    687e:	24 0f       	add	r18, r20
    6880:	35 1f       	adc	r19, r21
    6882:	e2 17       	cp	r30, r18
    6884:	f3 07       	cpc	r31, r19
    6886:	71 f4       	brne	.+28     	; 0x68a4 <free+0xd8>
    6888:	80 81       	ld	r24, Z
    688a:	91 81       	ldd	r25, Z+1	; 0x01
    688c:	84 0f       	add	r24, r20
    688e:	95 1f       	adc	r25, r21
    6890:	02 96       	adiw	r24, 0x02	; 2
    6892:	8d 93       	st	X+, r24
    6894:	9c 93       	st	X, r25
    6896:	11 97       	sbiw	r26, 0x01	; 1
    6898:	82 81       	ldd	r24, Z+2	; 0x02
    689a:	93 81       	ldd	r25, Z+3	; 0x03
    689c:	12 96       	adiw	r26, 0x02	; 2
    689e:	8d 93       	st	X+, r24
    68a0:	9c 93       	st	X, r25
    68a2:	13 97       	sbiw	r26, 0x03	; 3
    68a4:	e0 e0       	ldi	r30, 0x00	; 0
    68a6:	f0 e0       	ldi	r31, 0x00	; 0
    68a8:	d8 01       	movw	r26, r16
    68aa:	12 96       	adiw	r26, 0x02	; 2
    68ac:	8d 91       	ld	r24, X+
    68ae:	9c 91       	ld	r25, X
    68b0:	13 97       	sbiw	r26, 0x03	; 3
    68b2:	00 97       	sbiw	r24, 0x00	; 0
    68b4:	19 f0       	breq	.+6      	; 0x68bc <free+0xf0>
    68b6:	f8 01       	movw	r30, r16
    68b8:	8c 01       	movw	r16, r24
    68ba:	f6 cf       	rjmp	.-20     	; 0x68a8 <free+0xdc>
    68bc:	8d 91       	ld	r24, X+
    68be:	9c 91       	ld	r25, X
    68c0:	98 01       	movw	r18, r16
    68c2:	2e 5f       	subi	r18, 0xFE	; 254
    68c4:	3f 4f       	sbci	r19, 0xFF	; 255
    68c6:	82 0f       	add	r24, r18
    68c8:	93 1f       	adc	r25, r19
    68ca:	20 91 97 25 	lds	r18, 0x2597
    68ce:	30 91 98 25 	lds	r19, 0x2598
    68d2:	28 17       	cp	r18, r24
    68d4:	39 07       	cpc	r19, r25
    68d6:	69 f4       	brne	.+26     	; 0x68f2 <free+0x126>
    68d8:	30 97       	sbiw	r30, 0x00	; 0
    68da:	29 f4       	brne	.+10     	; 0x68e6 <free+0x11a>
    68dc:	10 92 99 25 	sts	0x2599, r1
    68e0:	10 92 9a 25 	sts	0x259A, r1
    68e4:	02 c0       	rjmp	.+4      	; 0x68ea <free+0x11e>
    68e6:	12 82       	std	Z+2, r1	; 0x02
    68e8:	13 82       	std	Z+3, r1	; 0x03
    68ea:	00 93 97 25 	sts	0x2597, r16
    68ee:	10 93 98 25 	sts	0x2598, r17
    68f2:	df 91       	pop	r29
    68f4:	cf 91       	pop	r28
    68f6:	1f 91       	pop	r17
    68f8:	0f 91       	pop	r16
    68fa:	08 95       	ret

000068fc <memcpy>:
    68fc:	fb 01       	movw	r30, r22
    68fe:	dc 01       	movw	r26, r24
    6900:	02 c0       	rjmp	.+4      	; 0x6906 <memcpy+0xa>
    6902:	01 90       	ld	r0, Z+
    6904:	0d 92       	st	X+, r0
    6906:	41 50       	subi	r20, 0x01	; 1
    6908:	50 40       	sbci	r21, 0x00	; 0
    690a:	d8 f7       	brcc	.-10     	; 0x6902 <memcpy+0x6>
    690c:	08 95       	ret

0000690e <eeprom_read_dword>:
    690e:	0e 94 9f 34 	call	0x693e	; 0x693e <eeprom_mapen>
    6912:	60 81       	ld	r22, Z
    6914:	71 81       	ldd	r23, Z+1	; 0x01
    6916:	82 81       	ldd	r24, Z+2	; 0x02
    6918:	93 81       	ldd	r25, Z+3	; 0x03
    691a:	08 95       	ret

0000691c <eeprom_write_dword>:
    691c:	24 2f       	mov	r18, r20
    691e:	0e 94 ac 34 	call	0x6958	; 0x6958 <eeprom_write_r18>
    6922:	25 2f       	mov	r18, r21
    6924:	0e 94 ac 34 	call	0x6958	; 0x6958 <eeprom_write_r18>
    6928:	0c 94 96 34 	jmp	0x692c	; 0x692c <eeprom_write_word>

0000692c <eeprom_write_word>:
    692c:	0e 94 ab 34 	call	0x6956	; 0x6956 <eeprom_write_byte>
    6930:	27 2f       	mov	r18, r23
    6932:	0c 94 ac 34 	jmp	0x6958	; 0x6958 <eeprom_write_r18>

00006936 <eeprom_read_byte>:
    6936:	03 d0       	rcall	.+6      	; 0x693e <eeprom_mapen>
    6938:	80 81       	ld	r24, Z
    693a:	99 27       	eor	r25, r25
    693c:	08 95       	ret

0000693e <eeprom_mapen>:
    693e:	e0 ec       	ldi	r30, 0xC0	; 192
    6940:	f1 e0       	ldi	r31, 0x01	; 1
    6942:	37 85       	ldd	r19, Z+15	; 0x0f
    6944:	37 fd       	sbrc	r19, 7
    6946:	fd cf       	rjmp	.-6      	; 0x6942 <eeprom_mapen+0x4>
    6948:	34 85       	ldd	r19, Z+12	; 0x0c
    694a:	38 60       	ori	r19, 0x08	; 8
    694c:	34 87       	std	Z+12, r19	; 0x0c
    694e:	fc 01       	movw	r30, r24
    6950:	e0 50       	subi	r30, 0x00	; 0
    6952:	f0 4f       	sbci	r31, 0xF0	; 240
    6954:	08 95       	ret

00006956 <eeprom_write_byte>:
    6956:	26 2f       	mov	r18, r22

00006958 <eeprom_write_r18>:
    6958:	e0 ec       	ldi	r30, 0xC0	; 192
    695a:	f1 e0       	ldi	r31, 0x01	; 1
    695c:	37 85       	ldd	r19, Z+15	; 0x0f
    695e:	37 fd       	sbrc	r19, 7
    6960:	fd cf       	rjmp	.-6      	; 0x695c <eeprom_write_r18+0x4>
    6962:	34 85       	ldd	r19, Z+12	; 0x0c
    6964:	37 7f       	andi	r19, 0xF7	; 247
    6966:	34 87       	std	Z+12, r19	; 0x0c
    6968:	37 85       	ldd	r19, Z+15	; 0x0f
    696a:	31 ff       	sbrs	r19, 1
    696c:	09 c0       	rjmp	.+18     	; 0x6980 <eeprom_write_r18+0x28>
    696e:	36 e3       	ldi	r19, 0x36	; 54
    6970:	32 87       	std	Z+10, r19	; 0x0a
    6972:	38 ed       	ldi	r19, 0xD8	; 216
    6974:	34 bf       	out	0x34, r19	; 52
    6976:	31 e0       	ldi	r19, 0x01	; 1
    6978:	33 87       	std	Z+11, r19	; 0x0b
    697a:	37 85       	ldd	r19, Z+15	; 0x0f
    697c:	37 fd       	sbrc	r19, 7
    697e:	fd cf       	rjmp	.-6      	; 0x697a <eeprom_write_r18+0x22>
    6980:	33 e3       	ldi	r19, 0x33	; 51
    6982:	32 87       	std	Z+10, r19	; 0x0a
    6984:	80 83       	st	Z, r24
    6986:	91 83       	std	Z+1, r25	; 0x01
    6988:	12 82       	std	Z+2, r1	; 0x02
    698a:	24 83       	std	Z+4, r18	; 0x04
    698c:	25 e3       	ldi	r18, 0x35	; 53
    698e:	22 87       	std	Z+10, r18	; 0x0a
    6990:	28 ed       	ldi	r18, 0xD8	; 216
    6992:	31 e0       	ldi	r19, 0x01	; 1
    6994:	24 bf       	out	0x34, r18	; 52
    6996:	33 87       	std	Z+11, r19	; 0x0b
    6998:	01 96       	adiw	r24, 0x01	; 1
    699a:	08 95       	ret

0000699c <__do_global_dtors>:
    699c:	12 e0       	ldi	r17, 0x02	; 2
    699e:	cc e8       	ldi	r28, 0x8C	; 140
    69a0:	d2 e0       	ldi	r29, 0x02	; 2
    69a2:	00 e0       	ldi	r16, 0x00	; 0
    69a4:	06 c0       	rjmp	.+12     	; 0x69b2 <__do_global_dtors+0x16>
    69a6:	80 2f       	mov	r24, r16
    69a8:	fe 01       	movw	r30, r28
    69aa:	0e 94 2f 33 	call	0x665e	; 0x665e <__tablejump2__>
    69ae:	21 96       	adiw	r28, 0x01	; 1
    69b0:	01 1d       	adc	r16, r1
    69b2:	cd 38       	cpi	r28, 0x8D	; 141
    69b4:	d1 07       	cpc	r29, r17
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	08 07       	cpc	r16, r24
    69ba:	a9 f7       	brne	.-22     	; 0x69a6 <__do_global_dtors+0xa>
    69bc:	f8 94       	cli

000069be <__stop_program>:
    69be:	ff cf       	rjmp	.-2      	; 0x69be <__stop_program>
